<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="64b8d2bb065ca77fe0dc5f5fef705f4b317c4fca" translate="yes" xml:space="preserve">
          <source>How do I redirect to another page?</source>
          <target state="translated">他のページにリダイレクトするには?</target>
        </trans-unit>
        <trans-unit id="0261e937b4173727b02c00645ba76e6a415fae20" translate="yes" xml:space="preserve">
          <source>How do I reformat a paragraph?</source>
          <target state="translated">段落を再フォーマットするには?</target>
        </trans-unit>
        <trans-unit id="0eeeab64d2dc7e3dd771f347a9a11591454f54b3" translate="yes" xml:space="preserve">
          <source>How do I remove HTML from a string?</source>
          <target state="translated">文字列からHTMLを削除するには?</target>
        </trans-unit>
        <trans-unit id="7190f2c95452c7e338420c52915e20b7f528657f" translate="yes" xml:space="preserve">
          <source>How do I remove consecutive pairs of characters?</source>
          <target state="translated">連続した文字のペアを削除するには?</target>
        </trans-unit>
        <trans-unit id="d5da8d0925bfcf1ec95ecac71470e320a20303f5" translate="yes" xml:space="preserve">
          <source>How do I reset an each() operation part-way through?</source>
          <target state="translated">each()の操作を途中でリセットするには?</target>
        </trans-unit>
        <trans-unit id="344b42394088d6a1b32ccef3d8e8decb8e4c01b4" translate="yes" xml:space="preserve">
          <source>How do I reverse a string?</source>
          <target state="translated">文字列を反転させるには?</target>
        </trans-unit>
        <trans-unit id="c109790cdec5d8d7c505dc674edb8df7914a81e2" translate="yes" xml:space="preserve">
          <source>How do I select a random element from an array?</source>
          <target state="translated">配列からランダムな要素を選択するには?</target>
        </trans-unit>
        <trans-unit id="199c93de57e75c85ebb9d101614dabcde24b6614" translate="yes" xml:space="preserve">
          <source>How do I select a random line from a file?</source>
          <target state="translated">ファイルからランダムなラインを選択するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="39ccafc4ea9b3fd7b952612609873f9c549c7c42" translate="yes" xml:space="preserve">
          <source>How do I send email?</source>
          <target state="translated">メールを送るにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="56fc4c1960e173cac75e9d994591b6be91c2c2f5" translate="yes" xml:space="preserve">
          <source>How do I set CPU limits?</source>
          <target state="translated">CPUの制限を設定するには?</target>
        </trans-unit>
        <trans-unit id="73ae95585e094adfdbb75ef9f256a18859cff476" translate="yes" xml:space="preserve">
          <source>How do I set a file's timestamp in perl?</source>
          <target state="translated">perlでファイルのタイムスタンプを設定するには?</target>
        </trans-unit>
        <trans-unit id="7015da22cf6dfd7afb1594ce5e8862f937d3b755" translate="yes" xml:space="preserve">
          <source>How do I set the time and date?</source>
          <target state="translated">日時の設定方法を教えてください。</target>
        </trans-unit>
        <trans-unit id="36b77dc941cd48cd98a47f8dbd2c57de165d3aa2" translate="yes" xml:space="preserve">
          <source>How do I shuffle an array randomly?</source>
          <target state="translated">配列をランダムにシャッフルするには?</target>
        </trans-unit>
        <trans-unit id="c56fb4f98404c5161610269f73993e7de95a3de7" translate="yes" xml:space="preserve">
          <source>How do I skip some return values?</source>
          <target state="translated">いくつかの戻り値をスキップするには?</target>
        </trans-unit>
        <trans-unit id="f999ee460d48e77fd71574c2f54756bd21091885" translate="yes" xml:space="preserve">
          <source>How do I sort a hash (optionally by value instead of key)?</source>
          <target state="translated">ハッシュをソートするにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="3557025618ab23a2cf788475e1bcca26065db241" translate="yes" xml:space="preserve">
          <source>How do I sort an array by (anything)?</source>
          <target state="translated">配列を(何でも)でソートするには?</target>
        </trans-unit>
        <trans-unit id="11e9e959693213fc786f53e3eeef7ea5001cbb5a" translate="yes" xml:space="preserve">
          <source>How do I start a process in the background?</source>
          <target state="translated">バックグラウンドでプロセスを開始するには?</target>
        </trans-unit>
        <trans-unit id="e8df49adcf72001a3aba0a320e673d15d1fbff49" translate="yes" xml:space="preserve">
          <source>How do I store complex data structures with DB_File?</source>
          <target state="translated">DB_Fileで複雑なデータ構造を保存するには?</target>
        </trans-unit>
        <trans-unit id="d0810d8592d3996c240e80dd3d6e5421e650a5a9" translate="yes" xml:space="preserve">
          <source>How do I strip blank space from the beginning/end of a string?</source>
          <target state="translated">紐の始まり/終わりから空白のスペースを剥ぎ取るには?</target>
        </trans-unit>
        <trans-unit id="8ae8648605278dba0e8e66d1aa18bb02cd9cbee2" translate="yes" xml:space="preserve">
          <source>How do I substitute case-insensitively on the LHS while preserving case on the RHS?</source>
          <target state="translated">RHSの症例を保存しつつ、LHSの症例を無神経に代用するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="32d79b5f1ff74cbc3bfb77b42941e7971f7cd494" translate="yes" xml:space="preserve">
          <source>How do I tell the difference between errors from the shell and perl?</source>
          <target state="translated">シェルとperlのエラーの見分け方は?</target>
        </trans-unit>
        <trans-unit id="402cd06b394cf67e3d76498ee9b3e9b9d87437a0" translate="yes" xml:space="preserve">
          <source>How do I temporarily block warnings?</source>
          <target state="translated">警告を一時的にブロックする方法は?</target>
        </trans-unit>
        <trans-unit id="c0789eca0c8fd61b4175e61db4aa71f599404e50" translate="yes" xml:space="preserve">
          <source>How do I test whether two arrays or hashes are equal?</source>
          <target state="translated">2つの配列またはハッシュが等しいかどうかをテストするには?</target>
        </trans-unit>
        <trans-unit id="e84b81ceb7f858ca3fa98015c2c4dfea66af9e8b" translate="yes" xml:space="preserve">
          <source>How do I timeout a slow event?</source>
          <target state="translated">遅いイベントをタイムアウトさせるには?</target>
        </trans-unit>
        <trans-unit id="4865802f290eeeec02fbec1851daaa986a328389" translate="yes" xml:space="preserve">
          <source>How do I transfer files in binary mode ?</source>
          <target state="translated">バイナリモードでファイルを転送するには?</target>
        </trans-unit>
        <trans-unit id="e46e5cb6feaa9bdc58f6ceead41bdfe807157710" translate="yes" xml:space="preserve">
          <source>How do I trap control characters/signals?</source>
          <target state="translated">コントロールキャラクター/シグナルをトラップするにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="d2dd15b6c1b33b3c86eddf841d0c83120333ce34" translate="yes" xml:space="preserve">
          <source>How do I traverse a directory tree?</source>
          <target state="translated">ディレクトリツリーをたどるには?</target>
        </trans-unit>
        <trans-unit id="e9dd0c064f83a182ab0d7dad0b56b72fe36b708b" translate="yes" xml:space="preserve">
          <source>How do I unescape a string?</source>
          <target state="translated">文字列をエスケープしないようにするには?</target>
        </trans-unit>
        <trans-unit id="de74f402e85f9eee7aa46222792929c66c3f3ab7" translate="yes" xml:space="preserve">
          <source>How do I use MIME to make an attachment to a mail message?</source>
          <target state="translated">MIMEを使ってメールメッセージに添付ファイルを作成するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="d3ed87430fcbcc3ae6919edba6458d4a0ecbd944" translate="yes" xml:space="preserve">
          <source>How do I use a module without installing it?</source>
          <target state="translated">モジュールをインストールせずに使用するには?</target>
        </trans-unit>
        <trans-unit id="ec6da1c1f95c027b2d1444208c25f958dcd9f486" translate="yes" xml:space="preserve">
          <source>How do I use a regular expression to strip C-style comments from a file?</source>
          <target state="translated">正規表現を使ってファイルからCスタイルのコメントを削除するには?</target>
        </trans-unit>
        <trans-unit id="a8b6bf66c7856a15f241de6c0802175e07cd63b3" translate="yes" xml:space="preserve">
          <source>How do I use all this in extensions?</source>
          <target state="translated">これを全部拡張機能で使うにはどうすればいいの?</target>
        </trans-unit>
        <trans-unit id="b826b48e54f42be4d7b4af41a8de11eb743f6b7a" translate="yes" xml:space="preserve">
          <source>How do I use an SQL database?</source>
          <target state="translated">SQLデータベースの使い方は?</target>
        </trans-unit>
        <trans-unit id="2bdd87983f12ab09515439198b26c02b64e724f4" translate="yes" xml:space="preserve">
          <source>How do I validate input?</source>
          <target state="translated">入力を検証するには?</target>
        </trans-unit>
        <trans-unit id="26964c4f36b19d9f1a78d8688cbdbdb4cea51cb7" translate="yes" xml:space="preserve">
          <source>How do I verify a credit card checksum?</source>
          <target state="translated">クレジットカードのチェックサムを確認するには?</target>
        </trans-unit>
        <trans-unit id="4f3796bf485f2eb722b7ed35a129d4469581633e" translate="yes" xml:space="preserve">
          <source>How do we do it? You might think first to use &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt;; however, since &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; collapses blank fields, you'll never know whether a record was income or expenditure. Oops. Well, you could always use &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">どうやってやるの？最初に &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; を使用することを考えるかもしれません。ただし、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; は空白のフィールドを折りたたむため、レコードが収入であるか支出であるかは決してわかりません。おっとっと。まあ、あなたはいつでも &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; を使うことができます：</target>
        </trans-unit>
        <trans-unit id="103fbca18a8de8029a50cc2b1c4a72ca20bf5fba" translate="yes" xml:space="preserve">
          <source>How do we do it? You might think first to use &lt;code&gt;split&lt;/code&gt;; however, since &lt;code&gt;split&lt;/code&gt; collapses blank fields, you'll never know whether a record was income or expenditure. Oops. Well, you could always use &lt;code&gt;substr&lt;/code&gt;:</source>
          <target state="translated">どうすればいいですか？最初に &lt;code&gt;split&lt;/code&gt; を使用することを考えるかもしれません。ただし、 &lt;code&gt;split&lt;/code&gt; は空白のフィールドを折りたたむため、レコードが収入であるか支出であるかはわかりません。おっと。まあ、あなたはいつでも &lt;code&gt;substr&lt;/code&gt; を使うことができます：</target>
        </trans-unit>
        <trans-unit id="adb503b87f7ea09a8ed712efab2105d52de66798" translate="yes" xml:space="preserve">
          <source>How do we know if the &lt;code&gt;U&lt;/code&gt; is the first format in the &lt;code&gt;pat&lt;/code&gt; ? Well, if we have a pointer to the start of &lt;code&gt;pat&lt;/code&gt; then, if we see a &lt;code&gt;U&lt;/code&gt; we can test whether we're still at the start of the string. So, here's where &lt;code&gt;pat&lt;/code&gt; is set up:</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; が &lt;code&gt;pat&lt;/code&gt; の最初の形式であるかどうかをどのようにして知ることができますか？さて、 &lt;code&gt;pat&lt;/code&gt; の先頭へのポインタがある場合、 &lt;code&gt;U&lt;/code&gt; が表示されていれば、まだ文字列の先頭にいるかどうかをテストできます。だから、ここに &lt;code&gt;pat&lt;/code&gt; が設定されています：</target>
        </trans-unit>
        <trans-unit id="0b8d788126db97a55dce37692218aca769c60ab7" translate="yes" xml:space="preserve">
          <source>How do we know if the &lt;code&gt;U&lt;/code&gt; is the first format in the &lt;code&gt;pat&lt;/code&gt;? Well, if we have a pointer to the start of &lt;code&gt;pat&lt;/code&gt; then, if we see a &lt;code&gt;U&lt;/code&gt; we can test whether we're still at the start of the string. So, here's where &lt;code&gt;pat&lt;/code&gt; is set up:</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; が &lt;code&gt;pat&lt;/code&gt; 最初のフォーマットであるかどうかをどうやって知ることができますか？さて、 &lt;code&gt;pat&lt;/code&gt; の先頭へのポインタがある場合、 &lt;code&gt;U&lt;/code&gt; が表示されれば、まだ文字列の先頭にいるかどうかをテストできます。だから、ここに &lt;code&gt;pat&lt;/code&gt; が設定されています：</target>
        </trans-unit>
        <trans-unit id="41c2d105be109eed3cac8eac59cfe5a2af927614" translate="yes" xml:space="preserve">
          <source>How do we prepare to fix this up? First we locate the code in question - the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; happens at runtime, so it's going to be in one of the</source>
          <target state="translated">これを修正するためにどのように準備しますか？まず、問題のコードを見つけます。 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; は実行時に発生するため、次のいずれかに配置されます。</target>
        </trans-unit>
        <trans-unit id="5d7d9138e293d0199d65703623c0ff89dd97e453" translate="yes" xml:space="preserve">
          <source>How do we prepare to fix this up? First we locate the code in question - the &lt;code&gt;pack&lt;/code&gt; happens at runtime, so it's going to be in one of the</source>
          <target state="translated">これを修正するためにどのように準備しますか？まず、問題のコードを見つけます。 &lt;code&gt;pack&lt;/code&gt; は実行時に発生するため、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="24a7f470a36048c277bd60a862a28514c120a416" translate="yes" xml:space="preserve">
          <source>How do you know that you've made the right decisions? Have you picked an interface design that will cause problems later? Have you picked the most appropriate name? Do you have any questions?</source>
          <target state="translated">正しい判断をしたことをどのようにして知ることができますか?後で問題になるようなインターフェースデザインを選んでいませんか?最も適切な名前を選んでいますか?何か質問はありますか?</target>
        </trans-unit>
        <trans-unit id="41a4f1d575f0f11ff6874b18c40b76daeb66d4c2" translate="yes" xml:space="preserve">
          <source>How do you print it out? Why can't you say just &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; @AoA&lt;/code&gt; ? How do you sort it? How can you pass it to a function or get one of these back from a function? Is it an object? Can you save it to disk to read back later? How do you access whole rows or columns of that matrix? Do all the values have to be numeric?</source>
          <target state="translated">どのように印刷しますか？どうして &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; @AoA&lt;/code&gt; とだけ&lt;a href=&quot;functions/print&quot;&gt;印刷&lt;/a&gt;できないのですか？どのように分類しますか？どのようにして関数に渡したり、関数からこれらの1つを取り戻すことができますか？オブジェクトですか？それをディスクに保存して、後で読み戻すことはできますか？そのマトリックスの行全体または列全体にどのようにアクセスしますか？すべての値は数値である必要がありますか？</target>
        </trans-unit>
        <trans-unit id="7a08ef652d92b58fe7f054cbc142a1867f296373" translate="yes" xml:space="preserve">
          <source>How do you print it out? Why can't you say just &lt;code&gt;print @AoA&lt;/code&gt;? How do you sort it? How can you pass it to a function or get one of these back from a function? Is it an object? Can you save it to disk to read back later? How do you access whole rows or columns of that matrix? Do all the values have to be numeric?</source>
          <target state="translated">どのように印刷しますか？ &lt;code&gt;print @AoA&lt;/code&gt; だけではどうして言えないのですか？どのように分類しますか？どうすればそれを関数に渡したり、関数からこれらの1つを取り戻したりできますか？オブジェクトですか？後で読み返すためにディスクに保存できますか？そのマトリックスの行全体または列全体にどのようにアクセスしますか？すべての値は数値である必要がありますか？</target>
        </trans-unit>
        <trans-unit id="0db30a52c84584239974d26d09f54763e3e6b602" translate="yes" xml:space="preserve">
          <source>How do you want to capitalize those words?</source>
          <target state="translated">その言葉をどうやって大文字にするの?</target>
        </trans-unit>
        <trans-unit id="057ea76fe6b43747bac035e0aa618c75b67755d7" translate="yes" xml:space="preserve">
          <source>How does &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;P&lt;/code&gt; work? Imagine some pointer in the buffer about to be unpacked: If it isn't the null pointer (which will smartly produce the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value) we have a start address - but then what? Perl has no way of knowing how long this &quot;fixed length string&quot; is, so it's up to you to specify the actual size as an explicit length after &lt;code&gt;P&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; での &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; はどのように機能しますか？バッファ内のいくつかのポインタがアンパックされようとしていることを想像してください。それがnullポインタ（ &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値をスマートに生成する）でない場合は、開始アドレスがありますが、それから何ですか？Perlはこの「固定長文字列」の長さを知る方法がないので、実際のサイズを &lt;code&gt;P&lt;/code&gt; の後に明示的な長さとして指定するのはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="7cb23bf82dfe8e718e7ef8eacd292b571d084be2" translate="yes" xml:space="preserve">
          <source>How does &lt;code&gt;unpack&lt;/code&gt; with &lt;code&gt;P&lt;/code&gt; work? Imagine some pointer in the buffer about to be unpacked: If it isn't the null pointer (which will smartly produce the &lt;code&gt;undef&lt;/code&gt; value) we have a start address - but then what? Perl has no way of knowing how long this &quot;fixed length string&quot; is, so it's up to you to specify the actual size as an explicit length after &lt;code&gt;P&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; での &lt;code&gt;unpack&lt;/code&gt; はどのように機能しますか？解凍されようとしているバッファ内のポインタを想像してみてください。それがnullポインタ（ &lt;code&gt;undef&lt;/code&gt; 値をスマートに生成する）でない場合は、開始アドレスがありますが、それではどうでしょうか。Perlには、この「固定長文字列」の長さを知る方法がないため、実際のサイズを &lt;code&gt;P&lt;/code&gt; の後の明示的な長さとして指定するのはあなた次第です。</target>
        </trans-unit>
        <trans-unit id="9905196a168946e4c1e199eb5d4a39f1df926922" translate="yes" xml:space="preserve">
          <source>How does C3 work</source>
          <target state="translated">C3はどのように動作するのか</target>
        </trans-unit>
        <trans-unit id="ec67f8e66f8cd607856093fe73d4e05432e16189" translate="yes" xml:space="preserve">
          <source>How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?</source>
          <target state="translated">PerlはJava、Python、REXX、Scheme、Tclなどの他の言語と比べてどうですか?</target>
        </trans-unit>
        <trans-unit id="1c4f7191bdf4e77d9f3df9d3633a24eb4798422b" translate="yes" xml:space="preserve">
          <source>How does Perl store UTF-8 strings?</source>
          <target state="translated">PerlはどのようにしてUTF-8の文字列を保存するのですか?</target>
        </trans-unit>
        <trans-unit id="d6555d1bc4e0774734c01cf5a9778e9667013a49" translate="yes" xml:space="preserve">
          <source>How does UTF-8 represent Unicode characters?</source>
          <target state="translated">UTF-8はどのようにUnicode文字を表現しているのですか?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">どうやって使うのか?</target>
        </trans-unit>
        <trans-unit id="7cc6d699d794fc3ac271d46b893bbe5d8af9561d" translate="yes" xml:space="preserve">
          <source>How does the HAS_QUUX become defined where it needs to be? Well, if Foonix happens to be Unixy enough to be able to run the Configure script, and Configure has been taught about detecting and testing quux(), the HAS_QUUX will be correctly defined. In other platforms, the corresponding configuration step will hopefully do the same.</source>
          <target state="translated">HAS_QUUX は、どのようにして必要な場所で定義されるようになるのでしょうか?Foonix が、Configure スクリプトを実行できるほど Unixy であり、Configure が quux()の検出とテストについて教えられている場合は、HAS_QUUX が正しく定義されます。他のプラットフォームでも、対応する設定ステップで同じことができるようになります。</target>
        </trans-unit>
        <trans-unit id="a7654b1f75662fbb39441273d3ed984d7a322d6a" translate="yes" xml:space="preserve">
          <source>How far up the call stack should &lt;code&gt;$Test&lt;/code&gt; look when reporting where the test failed.</source>
          <target state="translated">テストがどこで失敗したかを報告するときに &lt;code&gt;$Test&lt;/code&gt; がコールスタックをどのくらい上に見るか。</target>
        </trans-unit>
        <trans-unit id="085217ef4c6745e3415b3c7e78584430d39a3a20" translate="yes" xml:space="preserve">
          <source>How field hashes work</source>
          <target state="translated">フィールドハッシュの仕組み</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="debefefe9570a7f478b45607468c1f04ecf9084c" translate="yes" xml:space="preserve">
          <source>How long to wait for child processes and threads before aborting.</source>
          <target state="translated">アボートする前に子プロセスやスレッドをどのくらい待つか。</target>
        </trans-unit>
        <trans-unit id="5aeac53e476a9bc19466fb717cce28dc3a661453" translate="yes" xml:space="preserve">
          <source>How many bits fit in the NaN depends on what kind of floating points are being used, but on the most common platforms (64-bit IEEE 754, or the x86 80-bit long doubles) there are 51 and 61 bits available, respectively. (There would be 52 and 62, but the quiet/signaling bit of NaNs takes away one.) However, because of the floating-point-to- integer-and-back conversions, please test carefully whether you get back what you put in. If your integers are only 32 bits wide, you probably should not rely on more than 32 bits of payload.</source>
          <target state="translated">NaNに何ビット入るかは、どのような浮動小数点を使用しているかによりますが、最も一般的なプラットフォーム(64ビットのIEEE 754、またはx86の80ビットのロングダブルス)では、それぞれ51ビットと61ビットが利用可能です(52と62はあるでしょうが、NaNは静音/シグナリングビットを1つ取り除きます)。(52と62があるはずだが、NaNsの静音/シグナリングビットが1つを奪っている)。ただし、浮動小数点から整数への変換と逆変換があるので、入れたものが返ってくるかどうかは慎重にテストしてください。整数が32ビット幅しかない場合は、32ビット以上のペイロードに頼るべきではないでしょう。</target>
        </trans-unit>
        <trans-unit id="0c8392c4bc182245c6112422d8ac379f29dc0269" translate="yes" xml:space="preserve">
          <source>How many days shall we keep statistics about downloads?</source>
          <target state="translated">ダウンロード数の統計を何日保つのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a2df7a98d6c586141cd04b6aa0105c17934a6b57" translate="yes" xml:space="preserve">
          <source>How many items shall we keep in the statistics about downloads?</source>
          <target state="translated">ダウンロードに関する統計では、いくつの項目を保存しておけばいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a4c476d15c4f91ec82f82f8c5a4b611455926ad6" translate="yes" xml:space="preserve">
          <source>How many things you have to skip over when moving from the beginning of a string or array to a specific position within it. Thus, the minimum offset is zero, not one, because you don&amp;rsquo;t skip anything to get to the first item.</source>
          <target state="translated">文字列または配列の先頭からその中の特定の位置に移動するときにスキップする必要があるものの数。したがって、最初の項目に到達するために何もスキップしないため、最小オフセットは1ではなく0です。</target>
        </trans-unit>
        <trans-unit id="e8f69207ec93ea9ac0d7bd7d78ad22c5fad82d93" translate="yes" xml:space="preserve">
          <source>How much memory will an X kb tar file need?</source>
          <target state="translated">Xkbのtarファイルはどのくらいのメモリが必要ですか?</target>
        </trans-unit>
        <trans-unit id="06d061df76ab13c25cd39004271d0f48f24f772c" translate="yes" xml:space="preserve">
          <source>How multiple interpreters and concurrency are supported</source>
          <target state="translated">複数のインタプリタと同時実行をどのようにサポートしているか</target>
        </trans-unit>
        <trans-unit id="6077b2c6a621300c72c26286304312a48389905e" translate="yes" xml:space="preserve">
          <source>How often are new versions of Perl released?</source>
          <target state="translated">Perl の新しいバージョンはどのくらいの頻度でリリースされていますか?</target>
        </trans-unit>
        <trans-unit id="09667313848c3831b4f83a58be79ca17489cfe27" translate="yes" xml:space="preserve">
          <source>How stable is Perl?</source>
          <target state="translated">Perlはどれくらい安定していますか?</target>
        </trans-unit>
        <trans-unit id="83c34a283446a710c37e72f2a9adb47d8902892c" translate="yes" xml:space="preserve">
          <source>How that string gets evaluated is entirely subject to the command interpreter on your system. On most platforms, you will have to protect shell metacharacters if you want them treated literally. This is in practice difficult to do, as it's unclear how to escape which characters. See &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; for a clean and safe example of a manual &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; to emulate backticks safely.</source>
          <target state="translated">その文字列がどのように評価されるかは、完全にシステムのコマンドインタープリターの影響を受けます。ほとんどのプラットフォームでは、シェルのメタ文字を文字どおりに扱いたい場合は保護する必要があります。これは、どの文字をエスケープするかが明確でないため、実際には困難です。バッククォートを安全にエミュレートする手動の &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; のクリーンで安全な例については、&lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9eed5100d867c777939bb5769caf179997d17506" translate="yes" xml:space="preserve">
          <source>How that string gets evaluated is entirely subject to the command interpreter on your system. On most platforms, you will have to protect shell metacharacters if you want them treated literally. This is in practice difficult to do, as it's unclear how to escape which characters. See &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt; for a clean and safe example of a manual &lt;code&gt;fork()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; to emulate backticks safely.</source>
          <target state="translated">その文字列がどのように評価されるかは、システムのコマンドインタープリターに完全に依存します。ほとんどのプラットフォームでは、文字通りに処理する場合は、シェルのメタ文字を保護する必要があります。どの文字をエスケープするかが不明確であるため、これを行うのは実際には困難です。&lt;a href=&quot;perlsec&quot;&gt;バックティック&lt;/a&gt;を安全にエミュレートするための手動 &lt;code&gt;fork()&lt;/code&gt; および &lt;code&gt;exec()&lt;/code&gt; のクリーンで安全な例については、perlsecを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c335ff6cb2a45884654c99fc61e53c7a376324b" translate="yes" xml:space="preserve">
          <source>How to &lt;code&gt;declare()&lt;/code&gt; a dotted-decimal version</source>
          <target state="translated">ドット付き10進バージョンを &lt;code&gt;declare()&lt;/code&gt; 方法（）</target>
        </trans-unit>
        <trans-unit id="e0814da3e299e49d2449969ad142f5bd55fcc256" translate="yes" xml:space="preserve">
          <source>How to &lt;code&gt;parse()&lt;/code&gt; a version</source>
          <target state="translated">バージョンを &lt;code&gt;parse()&lt;/code&gt; する方法</target>
        </trans-unit>
        <trans-unit id="32e58ed61895689f9ea71e1d65dd7b363842c21f" translate="yes" xml:space="preserve">
          <source>How to Eat an Egg on a Net</source>
          <target state="translated">ネットで卵を食べる方法</target>
        </trans-unit>
        <trans-unit id="1e92c63bea5bacbfe17288aa9b727bd5b57d76ef" translate="yes" xml:space="preserve">
          <source>How to Export</source>
          <target state="translated">エクスポート方法</target>
        </trans-unit>
        <trans-unit id="c94aa75d1f562c0c7126364d18c31a48ccae10ce" translate="yes" xml:space="preserve">
          <source>How to Import</source>
          <target state="translated">インポート方法</target>
        </trans-unit>
        <trans-unit id="66e5306e1ee37b9c8432fab22e675761fdae05d9" translate="yes" xml:space="preserve">
          <source>How to build it - possible changes to Makefile.PL etc.</source>
          <target state="translated">どのように構築するか-Makefile.PL などへの変更の可能性。</target>
        </trans-unit>
        <trans-unit id="276af2b0e47e1128b2d6988024c5aa973d55b3ad" translate="yes" xml:space="preserve">
          <source>How to check for a legal version string</source>
          <target state="translated">正規のバージョン文字列を確認する方法</target>
        </trans-unit>
        <trans-unit id="200eebf37528bcbed0445247c76a5eb54f9e1c23" translate="yes" xml:space="preserve">
          <source>How to compare version objects</source>
          <target state="translated">バージョンオブジェクトの比較方法</target>
        </trans-unit>
        <trans-unit id="ca504da3ad384a1782b8a80c01519809d8213b8a" translate="yes" xml:space="preserve">
          <source>How to contribute to the perlfaq</source>
          <target state="translated">perlfaqに貢献する方法</target>
        </trans-unit>
        <trans-unit id="d80ee544d5d5799659326d52d976ff8d1a12d506" translate="yes" xml:space="preserve">
          <source>How to contribute to this document</source>
          <target state="translated">このドキュメントへの投稿方法</target>
        </trans-unit>
        <trans-unit id="98f26a635f2b0eee95797f21034bacde6a2960b0" translate="yes" xml:space="preserve">
          <source>How to convert a module from decimal to dotted-decimal</source>
          <target state="translated">モジュールを10進数から10進数に変換する方法</target>
        </trans-unit>
        <trans-unit id="59750c3fc03389b5d7028878d6d502ec39f41a63" translate="yes" xml:space="preserve">
          <source>How to create a new module</source>
          <target state="translated">新規モジュールの作成方法</target>
        </trans-unit>
        <trans-unit id="4b6cf27d781b549a9ad503d5e122d5adb52f744e" translate="yes" xml:space="preserve">
          <source>How to declare() a dotted-decimal version</source>
          <target state="translated">ドット10進数版の宣言方法</target>
        </trans-unit>
        <trans-unit id="117233b2c5097bb47b4e325f79c07984d73d5ef7" translate="yes" xml:space="preserve">
          <source>How to get a package, unwrap it, and make a change before building it?</source>
          <target state="translated">パッケージの入手方法、開封方法、ビルド前の変更点は?</target>
        </trans-unit>
        <trans-unit id="581ecead393f1357725f2a7ad157c2752daf62ea" translate="yes" xml:space="preserve">
          <source>How to install it.</source>
          <target state="translated">インストールの仕方です。</target>
        </trans-unit>
        <trans-unit id="6a513660bb1d74aac4457f5e1ad35cd324a50563" translate="yes" xml:space="preserve">
          <source>How to parse() a version</source>
          <target state="translated">バージョンをパースする方法</target>
        </trans-unit>
        <trans-unit id="745ad195185248d449699ab965e2e195908cc3f7" translate="yes" xml:space="preserve">
          <source>How to release and distribute a module.</source>
          <target state="translated">モジュールをリリースして配布する方法</target>
        </trans-unit>
        <trans-unit id="fac65371d245ce74fd54b584511aa21b655f4973" translate="yes" xml:space="preserve">
          <source>How to report errors. &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; says to throw an exception on any POD formatting error. &lt;code&gt;stderr&lt;/code&gt; says to report errors on standard error, but not to throw an exception. &lt;code&gt;pod&lt;/code&gt; says to include a POD ERRORS section in the resulting documentation summarizing the errors. &lt;code&gt;none&lt;/code&gt; ignores POD errors entirely, as much as possible.</source>
          <target state="translated">エラーを報告する方法。 &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; は、PODフォーマットエラーが発生すると例外をスローするように指示します。 &lt;code&gt;stderr&lt;/code&gt; は標準エラーでエラーを報告するが、例外をスローしないように言います。 &lt;code&gt;pod&lt;/code&gt; は、エラーをまとめた結果のドキュメントにPOD ERRORSセクションを含めるように言っています。可能な限り、PODエラーを完全に無視する &lt;code&gt;none&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="d8e06e503e624ee14cb08fcb7aa8200b1d1a33be" translate="yes" xml:space="preserve">
          <source>How to report errors. &lt;code&gt;die&lt;/code&gt; says to throw an exception on any POD formatting error. &lt;code&gt;stderr&lt;/code&gt; says to report errors on standard error, but not to throw an exception. &lt;code&gt;pod&lt;/code&gt; says to include a POD ERRORS section in the resulting documentation summarizing the errors. &lt;code&gt;none&lt;/code&gt; ignores POD errors entirely, as much as possible.</source>
          <target state="translated">エラーを報告する方法。 &lt;code&gt;die&lt;/code&gt; は、PODフォーマットエラーで例外をスローすると言います。 &lt;code&gt;stderr&lt;/code&gt; は、標準エラーでエラーを報告するように言っていますが、例外をスローしないように言っています。 &lt;code&gt;pod&lt;/code&gt; は、エラーを要約した結果のドキュメントにPODERRORSセクションを含めるように言っています。可能な限り、PODエラーを完全に無視する &lt;code&gt;none&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="d7d2e49b42408e54cf7a34c3e80635f480f9c4a8" translate="yes" xml:space="preserve">
          <source>How to use Field Hashes</source>
          <target state="translated">フィールドハッシュの使い方</target>
        </trans-unit>
        <trans-unit id="fc1ff928efd359368d94e6d36c9ac3ed9b57df61" translate="yes" xml:space="preserve">
          <source>How to use ppport.h</source>
          <target state="translated">ppport.hの使い方</target>
        </trans-unit>
        <trans-unit id="76a1aee9e2d87dca5af8b9f3523a520421f66d36" translate="yes" xml:space="preserve">
          <source>How to use the perlfaq</source>
          <target state="translated">perlfaqの使い方</target>
        </trans-unit>
        <trans-unit id="3f24180ceba0ec0cc68f9d5c0e1e26d52c83ce1f" translate="yes" xml:space="preserve">
          <source>How you access/control keyboards, screens, and pointing devices (&quot;mice&quot;) is system-dependent. Try the following modules:</source>
          <target state="translated">キーボード、スクリーン、ポインティングデバイス(「マウス」)にどのようにアクセス/制御するかは、システムに依存します。以下のモジュールを試してみてください。</target>
        </trans-unit>
        <trans-unit id="4bc300db17dcedeb6194b557a3ba400e45f35668" translate="yes" xml:space="preserve">
          <source>How you choose to license your work is a personal decision. The general mechanism is to assert your Copyright and then make a declaration of how others may copy/use/modify your work.</source>
          <target state="translated">あなたの作品をどのようにライセンスするかは、個人の判断によります。一般的なメカニズムは、あなたの著作権を主張し、他の人がどのようにあなたの作品をコピー/使用/変更することができるかを宣言することです。</target>
        </trans-unit>
        <trans-unit id="eb2f13a23bf4830d2fc62239cefe549717cd58f6" translate="yes" xml:space="preserve">
          <source>How your various pieces of data relate to each other and what shape they make when you put them all together, as in a rectangular table or a triangular tree.</source>
          <target state="translated">長方形の表や三角の木のように、さまざまなデータの断片が互いにどのように関係しているか、また、それらをまとめたときにどのような形をしているか。</target>
        </trans-unit>
        <trans-unit id="49e45b77d6ea8c9934575389c7d37f20873b7d78" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;change()&lt;/code&gt; inherited from &lt;code&gt;Unicode::Collate&lt;/code&gt; allows such a tailoring that is reserved by &lt;code&gt;locale&lt;/code&gt;. Examples:</source>
          <target state="translated">ただし、 &lt;code&gt;Unicode::Collate&lt;/code&gt; から継承された &lt;code&gt;change()&lt;/code&gt; は、 &lt;code&gt;locale&lt;/code&gt; によって予約されているそのような調整を許可します。例：</target>
        </trans-unit>
        <trans-unit id="e1a5d362bff5ef9a53ac39d40f0d72384a7a7980" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;entry&lt;/code&gt; is allowed, even if it is used for &lt;code&gt;locale&lt;/code&gt; support, to add or override mappings.</source>
          <target state="translated">ただし、 &lt;code&gt;locale&lt;/code&gt; サポートに使用されている場合でも、マッピングを追加またはオーバーライドするための &lt;code&gt;entry&lt;/code&gt; は許可されます。</target>
        </trans-unit>
        <trans-unit id="d3b89735ac32202767302de6090cfe3b522ac706" translate="yes" xml:space="preserve">
          <source>However adding a Time::Piece object to another Time::Piece object will cause a runtime error.</source>
          <target state="translated">しかし、Time::Pieceオブジェクトを別のTime::Pieceオブジェクトに追加すると、ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="30f041c654fc533b28dcc332c81f8669c3b80359" translate="yes" xml:space="preserve">
          <source>However any other combinations of &lt;code&gt;\&lt;/code&gt; followed by a character are not substituted but only skipped, in order to parse them as regular expressions at the following step. As &lt;code&gt;\c&lt;/code&gt; is skipped at this step, &lt;code&gt;@&lt;/code&gt; of &lt;code&gt;\c@&lt;/code&gt; in RE is possibly treated as an array symbol (for example &lt;code&gt;@foo&lt;/code&gt; ), even though the same text in &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; gives interpolation of &lt;code&gt;\c@&lt;/code&gt; .</source>
          <target state="translated">ただし、次のステップで正規表現として解析するために、文字の後に続く &lt;code&gt;\&lt;/code&gt; の他の組み合わせは置換されずにスキップされるだけです。 &lt;code&gt;\c&lt;/code&gt; 、このステップでスキップされる &lt;code&gt;@&lt;/code&gt; の &lt;code&gt;\c@&lt;/code&gt; におけるRE可能性（例えば用アレイシンボルとして扱われ &lt;code&gt;@foo&lt;/code&gt; に同じテキストにもかかわらず、） &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq//&lt;/a&gt;&lt;/code&gt; の補間与える &lt;code&gt;\c@&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9fa46c7dac1006200659c34da5fea0149776dd8d" translate="yes" xml:space="preserve">
          <source>However any other combinations of &lt;code&gt;\&lt;/code&gt; followed by a character are not substituted but only skipped, in order to parse them as regular expressions at the following step. As &lt;code&gt;\c&lt;/code&gt; is skipped at this step, &lt;code&gt;@&lt;/code&gt; of &lt;code&gt;\c@&lt;/code&gt; in RE is possibly treated as an array symbol (for example &lt;code&gt;@foo&lt;/code&gt;), even though the same text in &lt;code&gt;qq//&lt;/code&gt; gives interpolation of &lt;code&gt;\c@&lt;/code&gt;.</source>
          <target state="translated">ただし、次の手順で正規表現として解析するために、 &lt;code&gt;\&lt;/code&gt; の後に文字が続く他の組み合わせは置換されず、スキップされるだけです。 &lt;code&gt;\c&lt;/code&gt; 、このステップでスキップされる &lt;code&gt;@&lt;/code&gt; の &lt;code&gt;\c@&lt;/code&gt; におけるRE可能性（例えば用アレイシンボルとして扱われ &lt;code&gt;@foo&lt;/code&gt; に同じテキストにもかかわらず、） &lt;code&gt;qq//&lt;/code&gt; の補間与える &lt;code&gt;\c@&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16e29f719714863d70b942d575046dbb5cba98f5" translate="yes" xml:space="preserve">
          <source>However calling these methods only affects the use of the methods above that can return a data connection. They have no effect on methods &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;put&lt;/code&gt; , &lt;code&gt;put_unique&lt;/code&gt; and those that do not require data connections.</source>
          <target state="translated">ただし、これらのメソッドの呼び出しは、データ接続を返すことができる上記のメソッドの使用にのみ影響します。これらは、メソッド &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; 、 &lt;code&gt;put_unique&lt;/code&gt; 、およびデータ接続を必要としないメソッドには影響しません。</target>
        </trans-unit>
        <trans-unit id="de13c057041819bc6b844abfeff87d29540cb81e" translate="yes" xml:space="preserve">
          <source>However calling these methods only affects the use of the methods above that can return a data connection. They have no effect on methods &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;put_unique&lt;/code&gt; and those that do not require data connections.</source>
          <target state="translated">ただし、これらのメソッドを呼び出すと、データ接続を返すことができる上記のメソッドの使用にのみ影響します。これらは、メソッド &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; 、 &lt;code&gt;put_unique&lt;/code&gt; 、およびデータ接続を必要としないメソッドには影響しません。</target>
        </trans-unit>
        <trans-unit id="4dd9e96cfe2926dfabdbc85765517e42ef1d89e7" translate="yes" xml:space="preserve">
          <source>However if you use them for methods it is up to you to figure out how to make inheritance work.)</source>
          <target state="translated">しかし、メソッドに使用する場合は、継承をどのように機能させるかはあなた次第です)。</target>
        </trans-unit>
        <trans-unit id="3eb546f277a4853248567d6d99dbadcec1483c0f" translate="yes" xml:space="preserve">
          <source>However it is possible to :</source>
          <target state="translated">しかし、それは可能です。</target>
        </trans-unit>
        <trans-unit id="b048a4ce1b3f69d17018ba3c836a5e60080a819e" translate="yes" xml:space="preserve">
          <source>However the parent classes are set, the package's &lt;code&gt;@ISA&lt;/code&gt; variable will contain a list of those parents. This is simply a list of scalars, each of which is a string that corresponds to a package name.</source>
          <target state="translated">親クラスが設定されていても、パッケージの &lt;code&gt;@ISA&lt;/code&gt; 変数にはそれらの親のリストが含まれます。これは単にスカラーのリストであり、各スカラーはパッケージ名に対応する文字列です。</target>
        </trans-unit>
        <trans-unit id="ba3e62d1138ee32c59c072f255ef49bd8748a854" translate="yes" xml:space="preserve">
          <source>However the results of other styles of rounding differ if the digit immediately to the right of the rounding place (skipping the decimal point) is 5 and if there are no digits, or no digits other than 0, after that 5. In such cases:</source>
          <target state="translated">しかし、他のスタイルの丸めの結果は、丸め場所のすぐ右の桁(小数点を飛ばして)が5である場合と、5の後に桁がない場合、または0以外の桁がない場合で異なります。 このような場合には、丸め場所のすぐ右の桁が5である場合と、0以外の桁がない場合では、丸めの結果が異なります。</target>
        </trans-unit>
        <trans-unit id="4fbf8823a3b3cfa62eaf7d0dd429a9afbd37439d" translate="yes" xml:space="preserve">
          <source>However the test engine bleeds these message to screen in unexpected moments. Two messages of this kind</source>
          <target state="translated">しかし、テストエンジンは予期せぬ瞬間にこれらのメッセージを画面にブリードします。この種の2つのメッセージ</target>
        </trans-unit>
        <trans-unit id="ef8fc937e43b67ff40714fcd8d7fd4e3c6c06fbf" translate="yes" xml:space="preserve">
          <source>However you should never rely on the numerical position of any opcode within the opset. In other words both sides of a bit vector operator should be opsets returned from Opcode functions.</source>
          <target state="translated">しかし、オプセット内のオプコードの数値位置に頼るべきではありません。言い換えれば、ビットベクトル演算子の両側は、オペコード関数から返されるオペセットでなければなりません。</target>
        </trans-unit>
        <trans-unit id="553943043c049c659e40aebd03db5306b0148501" translate="yes" xml:space="preserve">
          <source>However, &lt;code&gt;sudo&lt;/code&gt; sets the real user or group ID to that of the target identity, not just the effective ID as set-id bits do. As a result, Perl can't detect that it is running under &lt;code&gt;sudo&lt;/code&gt;, and so won't automatically take its own security precautions such as turning on taint mode. Where &lt;code&gt;sudo&lt;/code&gt; configuration dictates exactly which command can be run, the approved command may include a &lt;code&gt;-T&lt;/code&gt; option to perl to enable taint mode.</source>
          <target state="translated">ただし、 &lt;code&gt;sudo&lt;/code&gt; は、set-idビットのように実効IDだけでなく、実際のユーザーまたはグループIDをターゲットIDのIDに設定します。その結果、Perlは &lt;code&gt;sudo&lt;/code&gt; で実行されていることを検出できないため、汚染モードをオンにするなど、独自のセキュリティ対策を自動的に講じることはありません。どこ &lt;code&gt;sudo&lt;/code&gt; を実行することができます正確にコマンド設定おもむくまま、承認されたコマンドが含まれる &lt;code&gt;-T&lt;/code&gt; 汚染モードを有効にするには、perlのにオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="98648e73024116127cb39bd5de118b8a0a2cc6ca" translate="yes" xml:space="preserve">
          <source>However, Filter::Simple is smart enough to notice your existing &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; and Do The Right Thing with it. That is, if you explicitly define an &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine in a package that's using Filter::Simple, that &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine will still be invoked immediately after any filter you install.</source>
          <target state="translated">ただし、Filter :: Simpleは、既存の &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; に気づき、それを使って正しいことを実行できるほどスマートです。つまり、Filter :: Simpleを使用しているパッケージで &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; サブルーチンを明示的に定義した場合でも、その &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; サブルーチンは、インストールしたフィルターの直後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f6d3a8dddc21154e6d620bf1f1a45edff899ff21" translate="yes" xml:space="preserve">
          <source>However, Filter::Simple is smart enough to notice your existing &lt;code&gt;import&lt;/code&gt; and Do The Right Thing with it. That is, if you explicitly define an &lt;code&gt;import&lt;/code&gt; subroutine in a package that's using Filter::Simple, that &lt;code&gt;import&lt;/code&gt; subroutine will still be invoked immediately after any filter you install.</source>
          <target state="translated">ただし、Filter :: Simpleは、既存の &lt;code&gt;import&lt;/code&gt; に気づき、それを使って正しいことを行うのに十分賢いです。つまり、Filter :: Simpleを使用しているパッケージで &lt;code&gt;import&lt;/code&gt; サブルーチンを明示的に定義した場合でも、その &lt;code&gt;import&lt;/code&gt; サブルーチンは、フィルターをインストールした直後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c4b48fb21a2bbb8cdba9c4ae239ab0a9635d85aa" translate="yes" xml:space="preserve">
          <source>However, Perl supports Unicode, see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;.</source>
          <target state="translated">ただし、PerlはUnicodeをサポートしています&lt;a href=&quot;perluniintro&quot;&gt;。perluniintroを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0a6f0fb90e2229030c78d6a2fabfcae7c71bc14e" translate="yes" xml:space="preserve">
          <source>However, Pod::Simple (and presumably all derived parsers) offers the &lt;code&gt;nbsp_for_S&lt;/code&gt; option which, if enabled, will suppress all S events, and instead change all spaces in the content to non-breaking spaces. This is intended for formatters that output to a format that has no code that means the same as S&amp;lt;...&amp;gt;, but which has a code/character that means non-breaking space.</source>
          <target state="translated">ただし、Pod :: Simple（およびおそらくすべての派生パーサー）は &lt;code&gt;nbsp_for_S&lt;/code&gt; オプションを提供します。これを有効にすると、すべてのSイベントが抑制され、代わりにコンテンツ内のすべてのスペースが改行なしスペースに変更されます。これは、S &amp;lt;...&amp;gt;と同じ意味のコードがないが、改行しないスペースを意味するコード/文字があるフォーマットに出力するフォーマッターを対象としています。</target>
        </trans-unit>
        <trans-unit id="ebf2ba42f69a41e6f42882a675ee34d4602093f3" translate="yes" xml:space="preserve">
          <source>However, Pod::Simple (and presumably all derived parsers) offers the &lt;code&gt;nix_X_codes&lt;/code&gt; option which, if enabled, will suppress all X events and ignore their content. For formatters/processors that don't use X events, this is presumably quite useful.</source>
          <target state="translated">ただし、Pod :: Simple（およびおそらくすべての派生パーサー）は &lt;code&gt;nix_X_codes&lt;/code&gt; オプションを提供します。これを有効にすると、すべてのXイベントが抑制され、その内容が無視されます。Xイベントを使用しないフォーマッタ/プロセッサの場合、これはおそらく非常に便利です。</target>
        </trans-unit>
        <trans-unit id="6aacf8e8d0ef0c63358a4dd55406f6405076e03d" translate="yes" xml:space="preserve">
          <source>However, a dynamically loaded Perl extension is forced to use some symbols from the perl executable, e.g., to know how to find the arguments to the functions: the arguments live on the perl internal evaluation stack. The solution is to put the main code of the interpreter into a DLL, and make the</source>
          <target state="translated">しかし、動的にロードされたPerlの拡張機能は、関数の引数を見つける方法を知るために、Perlの実行ファイルからいくつかのシンボルを使わざるを得ません。解決策は、インタープリタのメインコードをDLLに入れて</target>
        </trans-unit>
        <trans-unit id="cb42fd65a00722a5c95e1e740839f3eb31964f36" translate="yes" xml:space="preserve">
          <source>However, a misapplied space-to-NBSP replacement could (wrongly) produce something equivalent to this:</source>
          <target state="translated">しかし、誤って適用された空間-NBSP置換は、(誤って)これと同等のものを生成する可能性があります。</target>
        </trans-unit>
        <trans-unit id="81448f13f8166a4612eb5d956580cdb8ee3e6da5" translate="yes" xml:space="preserve">
          <source>However, a value assigned to &lt;code&gt;$(&lt;/code&gt; must be a single number used to set the real gid. So the value given by &lt;code&gt;$(&lt;/code&gt; should</source>
          <target state="translated">ただし、 &lt;code&gt;$(&lt;/code&gt; に割り当てられる値は、実際のgidを設定するために使用される単一の数値である必要があります。したがって、 &lt;code&gt;$(&lt;/code&gt; によって与えられる値は</target>
        </trans-unit>
        <trans-unit id="2623bb5aade26c0a0ddb97e7e99b8d0d79bed6e1" translate="yes" xml:space="preserve">
          <source>However, anyone particularly interested in getting the full value of the treelet, can just traverse the content of the treeleet @$treelet_object. To wit:</source>
          <target state="translated">しかし、特にツリーレットの完全な値を取得したい人は、ツリーレット @$treelet_object の内容を辿ればいいのです。以下のようになります。</target>
        </trans-unit>
        <trans-unit id="120fef724fd1ad9704e66311dce9e65e6c74f159" translate="yes" xml:space="preserve">
          <source>However, as an 80% solution it is still effective, as it has caught bugs in the past.</source>
          <target state="translated">しかし、80%の解決策としては、過去にバグを捕まえたことがあるので、まだ効果はあります。</target>
        </trans-unit>
        <trans-unit id="9b024ed706553b3e26fb5776910e94a5d18ec48c" translate="yes" xml:space="preserve">
          <source>However, be aware this will delete ALL untracked content. You can use</source>
          <target state="translated">ただし、これは追跡されていないすべてのコンテンツを削除することに注意してください。以下のように</target>
        </trans-unit>
        <trans-unit id="dc3b493b7bf70efb7fa8d258ead45b41c49f7ae9" translate="yes" xml:space="preserve">
          <source>However, because there are</source>
          <target state="translated">があるため</target>
        </trans-unit>
        <trans-unit id="4c76c10ddfa1b1106d8945288c840e976b5200f2" translate="yes" xml:space="preserve">
          <source>However, before calling Configure, you need to check if using adb is a viable choice in the first place. Because Android doesn't have a</source>
          <target state="translated">しかし、Configureを呼び出す前に、そもそもadbを使うことが実行可能な選択肢なのかどうかを確認する必要があります。なぜなら、Androidには</target>
        </trans-unit>
        <trans-unit id="fa4c0892873afe913676eee2f3455aa2ddb34a7e" translate="yes" xml:space="preserve">
          <source>However, between perl v5.10.0 and v5.24.0, it could be used lexically by writing &lt;code&gt;my $_&lt;/code&gt;. Making &lt;code&gt;$_&lt;/code&gt; refer to the global &lt;code&gt;$_&lt;/code&gt; in the same scope was then possible with &lt;code&gt;our $_&lt;/code&gt;. This experimental feature was removed and is now a fatal error, but you may encounter it in older code.</source>
          <target state="translated">ただし、perl v5.10.0とv5.24.0の間では &lt;code&gt;my $_&lt;/code&gt; 書き込むことで字句的に使用できます。作る &lt;code&gt;$_&lt;/code&gt; 世界を参照してください &lt;code&gt;$_&lt;/code&gt; 同じスコープにすることで、その後可能であった &lt;code&gt;our $_&lt;/code&gt; 。この実験的な機能は削除され、致命的なエラーになりましたが、古いコードで発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fd72d7b069cc72d81b73b3f8597e881a55bd64a6" translate="yes" xml:space="preserve">
          <source>However, calling any &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; methods in such an &lt;code&gt;END&lt;/code&gt; block will most likely</source>
          <target state="translated">ただし、このような &lt;code&gt;END&lt;/code&gt; ブロックで&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;メソッドを呼び出すと、</target>
        </trans-unit>
        <trans-unit id="4d2c94143c1c2488e5582ae3924e1321e1fc2e29" translate="yes" xml:space="preserve">
          <source>However, everything referenced by the returned value is a fresh copy in the joining thread, even if a returned object had in the child thread been a copy of something that previously existed in the parent thread. After joining, the parent will therefore have a duplicate of each such object. This sometimes matters, especially if the object gets mutated; this can especially matter for private data to which a returned subroutine provides access.</source>
          <target state="translated">しかし、返されたオブジェクトが子スレッドで以前に親スレッドに存在していたもののコピーであったとしても、返された値によって参照されるすべてのものは、参加スレッドでは新鮮なコピーとなります。したがって、参加後、親スレッドはそのようなオブジェクトの複製を持つことになります。これは、特にオブジェクトが突然変異した場合に問題になることがあります。</target>
        </trans-unit>
        <trans-unit id="c314b40d0f00ce73038bbcc98e7f0ca7b1457690" translate="yes" xml:space="preserve">
          <source>However, for the following, the items are already shared, so their references are added directly to the queue, and no cloning takes place:</source>
          <target state="translated">しかし、以下のような場合は、すでにアイテムは共有されているので、それらの参照は直接キューに追加され、クローニングは行われません。</target>
        </trans-unit>
        <trans-unit id="bdc1303f64a141ea4136f512c4911ecba9b92d10" translate="yes" xml:space="preserve">
          <source>However, for the one-off simple case where I don't want to pull out a full templating system, I'll use a string that has two Perl scalar variables in it. In this example, I want to expand &lt;code&gt;$foo&lt;/code&gt; and &lt;code&gt;$bar&lt;/code&gt; to their variable's values:</source>
          <target state="translated">ただし、完全なテンプレートシステムを引き出したくない1回限りの単純なケースでは、2つのPerlスカラー変数を含む文字列を使用します。この例では、 &lt;code&gt;$foo&lt;/code&gt; と &lt;code&gt;$bar&lt;/code&gt; を変数の値に展開します。</target>
        </trans-unit>
        <trans-unit id="5ff029079aabc6f922c78c4701467310a318c5e3" translate="yes" xml:space="preserve">
          <source>However, if a Perl script begins with the Unicode &lt;code&gt;BOM&lt;/code&gt; (UTF-16LE, UTF16-BE, or UTF-8), or if the script looks like non-&lt;code&gt;BOM&lt;/code&gt; -marked UTF-16 of either endianness, Perl will correctly read in the script as the appropriate Unicode encoding. (&lt;code&gt;BOM&lt;/code&gt; -less UTF-8 cannot be effectively recognized or differentiated from ISO 8859-1 or other eight-bit encodings.)</source>
          <target state="translated">ただし、PerlスクリプトがUnicode &lt;code&gt;BOM&lt;/code&gt; （UTF-16LE、UTF16-BE、またはUTF-8）で始まる場合、またはスクリプトがいずれかのエンディアンの非 &lt;code&gt;BOM&lt;/code&gt; マーク付きUTF-16のように見える場合、Perlは正しく読み取りますスクリプトを適切なUnicodeエンコーディングとして。（ &lt;code&gt;BOM&lt;/code&gt; なしのUTF-8は、ISO 8859-1または他の8ビットエンコーディングと効果的に認識または区別できません。）</target>
        </trans-unit>
        <trans-unit id="7a530119f7016cecda2473b0ac614ce58e818515" translate="yes" xml:space="preserve">
          <source>However, if a particular species of quote character is included in the delimiter specification, then that type of quote will be correctly handled. for example, if &lt;code&gt;$text&lt;/code&gt; is:</source>
          <target state="translated">ただし、特定の種類の引用文字が区切り文字の仕様に含まれている場合、そのタイプの引用は正しく処理されます。たとえば、 &lt;code&gt;$text&lt;/code&gt; が次の場合：</target>
        </trans-unit>
        <trans-unit id="9e2ebae72b3d33fdf44dedb85d641ca00f3f57a1" translate="yes" xml:space="preserve">
          <source>However, if all you want to do is change your time zone, you can probably get away with setting an environment variable:</source>
          <target state="translated">しかし、もしあなたがタイムゾーンを変更したいだけなら、環境変数を設定することでなんとかなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e12d8527d56fa8ab8e8667f75a93e6392109725d" translate="yes" xml:space="preserve">
          <source>However, if hitting EOF is an expected and normal event, you do not want to exit simply because you have run out of input. Instead, you probably just want to exit an input loop. You can then test to see if an actual error has caused the loop to terminate, and act accordingly:</source>
          <target state="translated">しかし、EOFを打つことが予想される通常のイベントであれば、単に入力がなくなったからといって終了したいとは思わないでしょう。むしろ、単に入力ループを終了させたいだけなのかもしれません。そうすれば、実際にエラーが発生してループが終了したかどうかをテストして、それに応じた処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="29e1fafc250caebd597211caeac2164bfd06193d" translate="yes" xml:space="preserve">
          <source>However, if the &lt;code&gt;]&lt;/code&gt; is the</source>
          <target state="translated">ただし、 &lt;code&gt;]&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="8b420ee9db4dd8d8741d24e9570ff42a7cdea42c" translate="yes" xml:space="preserve">
          <source>However, if the command contained arguments that contained whitespace, stringifying the command would lose the significance of the whitespace. Therefore, &lt;code&gt;IPC::Cmd&lt;/code&gt; will quote any arguments containing whitespace in your command if the command is passed as an arrayref and contains special characters.</source>
          <target state="translated">ただし、コマンドに空白を含む引数が含まれている場合、コマンドを文字列化すると空白の意味が失われます。したがって、コマンドがarrayrefとして渡され、特殊文字が含まれている場合、 &lt;code&gt;IPC::Cmd&lt;/code&gt; はコマンドに空白を含む引数を引用します。</target>
        </trans-unit>
        <trans-unit id="6cc1c4bf7e539678ba51b5fda046a8f31ec28dde" translate="yes" xml:space="preserve">
          <source>However, if the data can't be parsed as valid Perl, then it is passed as an uninterpreted string. For example:</source>
          <target state="translated">ただし、データが有効なPerlとして解析できない場合は、解釈されない文字列として渡されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="713c4744650ad1f6870512c16d626634ea8370be" translate="yes" xml:space="preserve">
          <source>However, if the input text was passed in a variable, that variable's &lt;code&gt;&lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; value is updated to point at the first character after the extracted text. That means that in a list context the various subroutines can be used much like regular expressions. For example:</source>
          <target state="translated">ただし、入力テキストが変数で渡された場合、その変数の &lt;code&gt;&lt;a href=&quot;../functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; 値は、抽出されたテキストの後の最初の文字を指すように更新されます。つまり、リストコンテキストでは、さまざまなサブルーチンを正規表現のように使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="95b66c82de22ae75797335cbe11c9ea09bb6550e" translate="yes" xml:space="preserve">
          <source>However, if the input text was passed in a variable, that variable's &lt;code&gt;pos&lt;/code&gt; value is updated to point at the first character after the extracted text. That means that in a list context the various subroutines can be used much like regular expressions. For example:</source>
          <target state="translated">ただし、入力テキストが変数で渡された場合、その変数の &lt;code&gt;pos&lt;/code&gt; 値は、抽出されたテキストの後の最初の文字を指すように更新されます。つまり、リストコンテキストでは、さまざまなサブルーチンを正規表現のように使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="755d5a289c3e42c14904a4a718307f0b6e480799" translate="yes" xml:space="preserve">
          <source>However, if the kernel set-id script feature isn't disabled, Perl will complain loudly that your set-id script is insecure. You'll need to either disable the kernel set-id script feature, or put a C wrapper around the script. A C wrapper is just a compiled program that does nothing except call your Perl program. Compiled programs are not subject to the kernel bug that plagues set-id scripts. Here's a simple wrapper, written in C:</source>
          <target state="translated">しかし、カーネルの set-id スクリプト機能が無効になっていないと、Perl は set-id スクリプトが安全でないと大声で文句を言います。カーネルの set-id スクリプト機能を無効にするか、スクリプトの周りに C ラッパーを置く必要があります。C ラッパーはコンパイルされたプログラムで、Perl プログラムを呼び出す以外は何もしません。コンパイルされたプログラムは、セット ID スクリプトを悩ませるカーネルのバグの影響を受けません。以下に C で書かれたシンプルなラッパーを示します。</target>
        </trans-unit>
        <trans-unit id="cbc9ddee054ab9351fcec45d24db4192d4d2775c" translate="yes" xml:space="preserve">
          <source>However, if the list element is itself a variable, it appears that you can change a list element. However, the list element is the variable, not the data. You're not changing the list element, but something the list element refers to. The list element itself doesn't change: it's still the same variable.</source>
          <target state="translated">しかし、リスト要素自体が変数であれば、リスト要素を変更することができるようです。しかし、リスト要素は変数であって、データではありません。あなたが変更しているのはリスト要素ではなく、リスト要素が参照している何かです。リスト要素自体は変わりません。</target>
        </trans-unit>
        <trans-unit id="1ff33c873357001776962a640d53584ca4867e68" translate="yes" xml:space="preserve">
          <source>However, if the string value associated with &amp;lt;reject&amp;gt; is &quot;MAX&quot;, then &lt;code&gt;extract_tagged&lt;/code&gt; returns the complete text up to the point of failure. If the string is &quot;PARA&quot;, &lt;code&gt;extract_tagged&lt;/code&gt; returns only the first paragraph after the tag (up to the first line that is either empty or contains only whitespace characters). If the string is &quot;&quot;, the the default behaviour (i.e. failure) is reinstated.</source>
          <target state="translated">ただし、&amp;lt;reject&amp;gt;に関連付けられた文字列値が &quot;MAX&quot;の場合、 &lt;code&gt;extract_tagged&lt;/code&gt; は失敗した時点までの完全なテキストを返します。文字列が「PARA」の場合、 &lt;code&gt;extract_tagged&lt;/code&gt; は、タグの後の最初の段落のみを返します（空であるか空白文字のみを含む最初の行まで）。文字列が &quot;&quot;の場合、デフォルトの動作（つまり、失敗）に戻ります。</target>
        </trans-unit>
        <trans-unit id="a40e24fb0252cc9815324344313381a888c122c8" translate="yes" xml:space="preserve">
          <source>However, if there is no matching &lt;code&gt;}&lt;/code&gt;, Perl doesn't know if it was mistakenly omitted, or if &lt;code&gt;[^\n]{&lt;/code&gt; was desired, and raises this error. If you meant the former, add the right brace; if you meant the latter, escape the brace with a backslash, like so: &lt;code&gt;\N\{&lt;/code&gt;</source>
          <target state="translated">ただし、一致する &lt;code&gt;}&lt;/code&gt; がない場合、Perlはそれが誤って省略されたかどうか、または &lt;code&gt;[^\n]{&lt;/code&gt; が必要かどうかを認識せず、このエラーを発生させます。前者を意味する場合は、右中括弧を追加します。後者を意味する場合は、次のようにバックスラッシュで中括弧をエスケープします： &lt;code&gt;\N\{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4db7ce89f0ac0ff04237db2ffe65056106401da4" translate="yes" xml:space="preserve">
          <source>However, if you have fixed sized records, then you might do something more like this:</source>
          <target state="translated">しかし、サイズが固定されているレコードであれば、もっとこういったことをするかもしれません。</target>
        </trans-unit>
        <trans-unit id="f0a31e0971a11a0c1d822f02efd0eb4f79c74f3a" translate="yes" xml:space="preserve">
          <source>However, if you set &quot;_AUTO =&amp;gt; 1&quot; in the %Lexicon in, ThisProject/I18N/en.pm (assuming that English (en) is the language that all your programmers will be using for this project's internal message keys), then you don't ever have to go adding lines like this</source>
          <target state="translated">ただし、％Lexiconで &quot;_AUTO =&amp;gt; 1&quot;を設定すると、ThisProject / I18N / en.pm（すべてのプログラマーがこのプロジェクトの内部メッセージキーに使用する言語は英語（en）であると想定）このような行を追加する必要はありません</target>
        </trans-unit>
        <trans-unit id="a09363cd76b1dde7e3a57d25fdf3272ced3af2ab" translate="yes" xml:space="preserve">
          <source>However, if you want the old behavior (and think carefully about that because it's a weird side effect), you can pass a hash slice instead. Perl 5.004 didn't make this a special case:</source>
          <target state="translated">しかし、もし古い挙動を望むのであれば(それは奇妙な副作用なので慎重に考えてください)、代わりにハッシュスライスを渡すことができます。Perl 5.004では、これを特殊なケースにはしませんでした。</target>
        </trans-unit>
        <trans-unit id="e5e7624dee9866ac2811666ebfbf093d8c557c15" translate="yes" xml:space="preserve">
          <source>However, if you'd like to override that just for perl, execute something like the following in</source>
          <target state="translated">しかし、Perlのためだけにオーバーライドしたい場合は、以下のように</target>
        </trans-unit>
        <trans-unit id="c9bcfc80dafa07d27c313feb7344f54609aa72b0" translate="yes" xml:space="preserve">
          <source>However, if you're not using git, you can still produce a suitable patch. You'll need a pristine copy of the Perl source to diff against. The porters prefer unified diffs. Using GNU &lt;code&gt;diff&lt;/code&gt; , you can produce a diff like this:</source>
          <target state="translated">ただし、gitを使用していない場合でも、適切なパッチを作成できます。差分をとるには、Perlソースの元のコピーが必要です。ポーターは統一されたdiffを好みます。GNU &lt;code&gt;diff&lt;/code&gt; を使用すると、次のようなdiffを生成できます。</target>
        </trans-unit>
        <trans-unit id="d3945c60d94533987656e9ddcf44eefd8a3f5cf4" translate="yes" xml:space="preserve">
          <source>However, if you're not using git, you can still produce a suitable patch. You'll need a pristine copy of the Perl source to diff against. The porters prefer unified diffs. Using GNU &lt;code&gt;diff&lt;/code&gt;, you can produce a diff like this:</source>
          <target state="translated">ただし、gitを使用していない場合でも、適切なパッチを作成できます。差分をとるには、Perlソースの元のコピーが必要です。ポーターは統一された差分を好みます。GNU &lt;code&gt;diff&lt;/code&gt; を使用すると、次のようなdiffを作成できます。</target>
        </trans-unit>
        <trans-unit id="912422cfe6349f661271a697889a1ce04bbb7530" translate="yes" xml:space="preserve">
          <source>However, in list context, the line input operator returns all of the lines as a list. The first line goes into &lt;code&gt;@array[1]&lt;/code&gt; and the rest of the lines mysteriously disappear:</source>
          <target state="translated">ただし、リストのコンテキストでは、行入力演算子はすべての行をリストとして返します。最初の行は &lt;code&gt;@array[1]&lt;/code&gt; 入り、残りの行は不思議なことに消えます：</target>
        </trans-unit>
        <trans-unit id="a4cbc737f6445190a51915b10ef52747baeb38d6" translate="yes" xml:space="preserve">
          <source>However, in the case you are using &lt;code&gt;LANGUAGE&lt;/code&gt; : it affects the language of informational, warning, and error messages output by commands (in other words, it's like &lt;code&gt;LC_MESSAGES&lt;/code&gt; ) but it has higher priority than &lt;code&gt;LC_ALL&lt;/code&gt; . Moreover, it's not a single value but instead a &quot;path&quot; (&quot;:&quot;-separated list) of</source>
          <target state="translated">ただし、 &lt;code&gt;LANGUAGE&lt;/code&gt; を使用している場合：コマンドによって出力される情報メッセージ、警告メッセージ、およびエラーメッセージの言語に影響します（つまり、 &lt;code&gt;LC_MESSAGES&lt;/code&gt; のようなものです）が、 &lt;code&gt;LC_ALL&lt;/code&gt; よりも優先されます。さらに、これは単一の値ではなく、代わりに「パス」（「：」で区切られたリスト）</target>
        </trans-unit>
        <trans-unit id="7b6e0b1c8600ac9825ba07e5dbd49e2921e845b8" translate="yes" xml:space="preserve">
          <source>However, in the case you are using &lt;code&gt;LANGUAGE&lt;/code&gt;: it affects the language of informational, warning, and error messages output by commands (in other words, it's like &lt;code&gt;LC_MESSAGES&lt;/code&gt;) but it has higher priority than &lt;code&gt;LC_ALL&lt;/code&gt;. Moreover, it's not a single value but instead a &quot;path&quot; (&quot;:&quot;-separated list) of</source>
          <target state="translated">ただし、 &lt;code&gt;LANGUAGE&lt;/code&gt; を使用している場合：コマンドによって出力される情報、警告、およびエラーメッセージの言語に影響します（つまり、 &lt;code&gt;LC_MESSAGES&lt;/code&gt; のようになります）が、 &lt;code&gt;LC_ALL&lt;/code&gt; よりも優先されます。さらに、それは単一の値ではなく、代わりにの「パス」（「：」-区切りリスト）です。</target>
        </trans-unit>
        <trans-unit id="264a100caceb32bafbc7cc09c2eb6cec03b010a6" translate="yes" xml:space="preserve">
          <source>However, it does mean that functions like &lt;code&gt;is_deeply()&lt;/code&gt; cannot be used to test the internals of string overloaded objects. In this case I would suggest &lt;a href=&quot;Test::Deep&quot;&gt;Test::Deep&lt;/a&gt; which contains more flexible testing functions for complex data structures.</source>
          <target state="translated">ただし、 &lt;code&gt;is_deeply()&lt;/code&gt; のような関数を使用して、文字列がオーバーロードされたオブジェクトの内部をテストできないことを意味します。この場合、複雑なデータ構造に対してより柔軟なテスト関数を含む&lt;a href=&quot;Test::Deep&quot;&gt;Test :: Deep&lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="fdfb88ca6aeb7caca106e8a86ebad4a7bd611554" translate="yes" xml:space="preserve">
          <source>However, it does mean that functions like &lt;code&gt;is_deeply()&lt;/code&gt; cannot be used to test the internals of string overloaded objects. In this case I would suggest &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Deep&quot;&gt;Test::Deep&lt;/a&gt; which contains more flexible testing functions for complex data structures.</source>
          <target state="translated">ただし、 &lt;code&gt;is_deeply()&lt;/code&gt; などの関数を使用して、文字列のオーバーロードされたオブジェクトの内部をテストすることはできません。この場合、複雑なデータ構造のためのより柔軟なテスト関数を含む&lt;a href=&quot;http://search.cpan.org/perldoc/Test::Deep&quot;&gt;Test :: Deep&lt;/a&gt;を提案します。</target>
        </trans-unit>
        <trans-unit id="4b56d396ba6f1980056b816ee33f44e386574d54" translate="yes" xml:space="preserve">
          <source>However, it is important to remember that Perl threads cannot magically do things unless your operating system's threads allow it. So if your system blocks the entire process on &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep()&lt;/a&gt;&lt;/code&gt;, Perl usually will, as well.</source>
          <target state="translated">ただし、オペレーティングシステムのスレッドで許可されていない限り、Perlスレッドは魔法のようなことはできないことに注意してください。したがって、システムが &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep()&lt;/a&gt;&lt;/code&gt; でプロセス全体をブロックする場合、Perlも通常はブロックします。</target>
        </trans-unit>
        <trans-unit id="13d58a858b7bda780cb252aafbed51984ace596c" translate="yes" xml:space="preserve">
          <source>However, it is important to remember that Perl threads cannot magically do things unless your operating system's threads allow it. So if your system blocks the entire process on &lt;code&gt;sleep()&lt;/code&gt;, Perl usually will, as well.</source>
          <target state="translated">ただし、オペレーティングシステムのスレッドで許可されていない限り、Perlスレッドは魔法のように処理を実行できないことを覚えておくことが重要です。したがって、システムが &lt;code&gt;sleep()&lt;/code&gt; でプロセス全体をブロックする場合、Perlも通常はブロックします。</target>
        </trans-unit>
        <trans-unit id="9d9bc751c2a736800a6ded071584d5744291603c" translate="yes" xml:space="preserve">
          <source>However, it is possible to set up attribute handlers that are called at other points in the program's compilation or execution, by explicitly stating the phase (or phases) in which you wish the attribute handler to be called. For example:</source>
          <target state="translated">しかし、属性ハンドラが呼び出されたいフェーズ(またはフェーズ)を明示的に指定することで、プログラムのコンパイルや実行の他の時点で呼び出される属性ハンドラを設定することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9f3f862372589763b899aeb3b91931550dc55057" translate="yes" xml:space="preserve">
          <source>However, it may happen that parsing must be restarted at the beginning when various circumstances occur along the way. An example is if the program turns out to be so large that there are jumps in it that won't fit in the normal 16 bits available. There are two special regops that can hold bigger jump destinations, BRANCHJ and LONGBRANCH. The parse is restarted, and these are used instead of the normal shorter ones. Whenever restarting the parse is required, the function returns failure and sets a flag as to what needs to be done. This is passed up to the top level routine which takes the appropriate action and restarts from scratch. In the case of needing longer jumps, the &lt;code&gt;RExC_use_BRANCHJ&lt;/code&gt; flag is set in the &lt;code&gt;RExC_state_t&lt;/code&gt; structure, which the functions know to inspect before deciding how to do branches.</source>
          <target state="translated">ただし、途中でさまざまな状況が発生した場合は、最初に解析を再開する必要がある場合があります。例としては、プログラムが大きすぎて、使用可能な通常の16ビットに収まらないジャンプがある場合があります。より大きなジャンプ先を保持できる2つの特別なレゴップ、BRANCHJとLONGBRANCHがあります。解析が再開され、通常の短いものの代わりにこれらが使用されます。解析を再開する必要があるときはいつでも、関数は失敗を返し、何をする必要があるかについてフラグを設定します。これは、適切なアクションを実行して最初から再開するトップレベルのルーチンに渡されます。より長いジャンプが必要な場合は、 &lt;code&gt;RExC_use_BRANCHJ&lt;/code&gt; フラグが &lt;code&gt;RExC_state_t&lt;/code&gt; に設定されます。 構造。分岐の実行方法を決定する前に、関数が検査することを知っています。</target>
        </trans-unit>
        <trans-unit id="495f4657c76d2b9516ad67652bc58b23f23940a2" translate="yes" xml:space="preserve">
          <source>However, it would be unwise to write tests such as:</source>
          <target state="translated">しかし、このようなテストを書くのは賢明ではないでしょう。</target>
        </trans-unit>
        <trans-unit id="b30399fa602102d2334ab528f7c1b9ececea8d0d" translate="yes" xml:space="preserve">
          <source>However, it's impossible to &lt;b&gt;perform&lt;/b&gt; the operations in this order: you have to find the values of &lt;code&gt;$b&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt; before you add them together, for instance. So, the other thread that runs through the op tree is the execution order: each op has a field &lt;code&gt;op_next&lt;/code&gt; which points to the next op to be run, so following these pointers tells us how perl executes the code. We can traverse the tree in this order using the &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; option to &lt;code&gt;B::Terse&lt;/code&gt; :</source>
          <target state="translated">ただし、この順序で操作を&lt;b&gt;実行&lt;/b&gt;する&lt;b&gt;こと&lt;/b&gt;は不可能です。たとえば、 &lt;code&gt;$b&lt;/code&gt; と &lt;code&gt;$c&lt;/code&gt; 一緒に追加する前に、それらの値を見つける必要があります。したがって、opツリーを介して実行される他のスレッドは実行順序です。各opには、実行される次のopを指すフィールド &lt;code&gt;op_next&lt;/code&gt; があるため、これらのポインターに従うと、perlがコードを実行する方法がわかります。 &lt;code&gt;B::Terse&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; オプションを使用して、この順序でツリーをトラバースできます。</target>
        </trans-unit>
        <trans-unit id="3c7146a5076741d60fd0b54759165e4d154c0a24" translate="yes" xml:space="preserve">
          <source>However, it's impossible to &lt;b&gt;perform&lt;/b&gt; the operations in this order: you have to find the values of &lt;code&gt;$b&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt; before you add them together, for instance. So, the other thread that runs through the op tree is the execution order: each op has a field &lt;code&gt;op_next&lt;/code&gt; which points to the next op to be run, so following these pointers tells us how perl executes the code. We can traverse the tree in this order using the &lt;code&gt;exec&lt;/code&gt; option to &lt;code&gt;B::Terse&lt;/code&gt;:</source>
          <target state="translated">ただし、この順序で操作を&lt;b&gt;実行&lt;/b&gt;する&lt;b&gt;こと&lt;/b&gt;はできません。たとえば、 &lt;code&gt;$b&lt;/code&gt; と &lt;code&gt;$c&lt;/code&gt; 値を合計する前に、それらの値を見つける必要があります。したがって、opツリーを実行する他のスレッドは実行順序です。各opには、実行される次のopを指すフィールド &lt;code&gt;op_next&lt;/code&gt; があります。したがって、これらのポインターに従うと、perlがコードを実行する方法がわかります。 &lt;code&gt;B::Terse&lt;/code&gt; ：の &lt;code&gt;exec&lt;/code&gt; オプションを使用して、この順序でツリーをトラバースできます。</target>
        </trans-unit>
        <trans-unit id="ae9a82c6ab7917617f6a85766c8d2b1d78c8def0" translate="yes" xml:space="preserve">
          <source>However, it's possible to have distinct files in different directories that intentionally has the same name, just differing in case, that should be reported. Hence, you may force the behavior by setting this to true or false.</source>
          <target state="translated">しかし、意図的に同じ名前を持っている別のディレクトリに別個のファイルを持っている可能性があります、それは報告されるべきであるケースで異なるだけである。そのため、これを true か false に設定することで強制的に動作させることができます。</target>
        </trans-unit>
        <trans-unit id="5a3fd83f97cb972df229bb4d55a4c188b477d626" translate="yes" xml:space="preserve">
          <source>However, long experience has shown that many programming tasks may be significantly simplified by using repeated subexpressions that may match zero-length substrings. Here's a simple example being:</source>
          <target state="translated">しかし、長い経験から、多くのプログラミングタスクは、ゼロ長の部分文字列と一致する可能性のある繰り返し部分式を使用することで、大幅に簡略化されることがわかっています。ここに簡単な例があります。</target>
        </trans-unit>
        <trans-unit id="d855fdc3242b3ecead3a30530ccd98509a636a5c" translate="yes" xml:space="preserve">
          <source>However, not everything you can write in Perl code can be written in the above shorthand system -- not by a long shot. For example, consider the Italian translator from the beginning of this article, who wanted the Italian for &quot;I didn't find any files&quot; as a special case, instead of &quot;I found 0 files&quot;. That couldn't be specified (at least not easily or simply) in our shorthand system, and it would have to be written out in full, like this:</source>
          <target state="translated">しかし、Perl のコードで書けることのすべてが上記の速記法で書けるわけではありません。例えば、この記事の最初に出てきたイタリア語の翻訳者を考えてみましょう。これは私たちの速記法では指定できず(少なくとも簡単には指定できませんし、単純にも指定できません)、以下のように完全に書き出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="ccc9947a9b58d2f4b1cd78cbf550721e43e5ecea" translate="yes" xml:space="preserve">
          <source>However, note that &lt;code&gt;sv_unmagic&lt;/code&gt; removes all magic of a certain &lt;code&gt;type&lt;/code&gt; from the &lt;code&gt;SV&lt;/code&gt; . If you want to remove only certain magic of a &lt;code&gt;type&lt;/code&gt; based on the magic virtual table, use &lt;code&gt;sv_unmagicext&lt;/code&gt; instead:</source>
          <target state="translated">ただし、 &lt;code&gt;sv_unmagic&lt;/code&gt; は特定の &lt;code&gt;type&lt;/code&gt; すべてのマジックを &lt;code&gt;SV&lt;/code&gt; から削除することに注意してください。マジック仮想テーブルに基づく &lt;code&gt;type&lt;/code&gt; 特定のマジックのみを削除する場合は、代わりに &lt;code&gt;sv_unmagicext&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="755c4cc30c87595f07d149af2b7b703fd4c79822" translate="yes" xml:space="preserve">
          <source>However, note that &lt;code&gt;sv_unmagic&lt;/code&gt; removes all magic of a certain &lt;code&gt;type&lt;/code&gt; from the &lt;code&gt;SV&lt;/code&gt;. If you want to remove only certain magic of a &lt;code&gt;type&lt;/code&gt; based on the magic virtual table, use &lt;code&gt;sv_unmagicext&lt;/code&gt; instead:</source>
          <target state="translated">ただし、 &lt;code&gt;sv_unmagic&lt;/code&gt; は特定の &lt;code&gt;type&lt;/code&gt; すべての魔法を &lt;code&gt;SV&lt;/code&gt; から削除することに注意してください。マジック仮想テーブルに基づく &lt;code&gt;type&lt;/code&gt; 特定のマジックのみを削除する場合は、代わりに &lt;code&gt;sv_unmagicext&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a0770ad99650293f49eefd8e2631959530003f02" translate="yes" xml:space="preserve">
          <source>However, note that &lt;code&gt;use encoding&lt;/code&gt; actually had three distinct effects:</source>
          <target state="translated">ただし、 &lt;code&gt;use encoding&lt;/code&gt; には実際には3つの異なる効果があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3714710035618507b561178df5f82b541c8974c8" translate="yes" xml:space="preserve">
          <source>However, note that even as the specified layers are &quot;pushed on top&quot; for open() and binmode(), this doesn't mean that the effects are limited to the &quot;top&quot;: PerlIO layers can be very 'active' and inspect and affect layers also deeper in the stack. As an example there is a layer called &quot;raw&quot; which repeatedly &quot;pops&quot; layers until it reaches the first layer that has declared itself capable of handling binary data. The &quot;pushed&quot; layers are processed in left-to-right order.</source>
          <target state="translated">しかし、open()やbinmode()では指定されたレイヤが「上に押し出される」ので、効果が「上」に限定されるわけではないことに注意してください。PerlIO のレイヤは非常に「アクティブ」で、スタックの奥にあるレイヤにも影響を与えます。例として、&quot;raw &quot;と呼ばれるレイヤーがあり、バイナリデータを扱うことができると宣言した最初のレイヤーに到達するまで、繰り返し &quot;pump &quot;します。押し出された」レイヤーは左から右の順番で処理されます。</target>
        </trans-unit>
        <trans-unit id="e68001f4c648450ca168ec0cde1c3f91a0e8624c" translate="yes" xml:space="preserve">
          <source>However, on Windows systems this isn't quite true prior to Visual Studio 15, at which point Microsoft fixed a bug. A race can occur if you use the following operations on earlier Windows platforms:</source>
          <target state="translated">しかし、Windows システム上では、Visual Studio 15 より前のバージョンでは、これはあまり当てはまらず、その時点でマイクロソフトはバグを修正していました。それ以前のWindowsプラットフォームで以下の操作を行うと、レースが発生することがあります。</target>
        </trans-unit>
        <trans-unit id="237e671ead4e4f448bac6dfef4927434cec18095" translate="yes" xml:space="preserve">
          <source>However, on earlier Perls, or if you pass strings to subroutines outside the feature's scope, you can force Unicode rules by changing the encoding to UTF-8 by doing &lt;code&gt;utf8::upgrade($string)&lt;/code&gt; . This can be used safely on any string, as it checks and does not change strings that have already been upgraded.</source>
          <target state="translated">ただし、以前のPerlでは、または機能のスコープ外のサブルーチンに文字列を渡す場合、 &lt;code&gt;utf8::upgrade($string)&lt;/code&gt; 実行してエンコーディングをUTF-8に変更することにより、Unicodeルールを強制できます。これは、すでにアップグレードされている文字列をチェックして変更しないため、どの文字列でも安全に使用できます。</target>
        </trans-unit>
        <trans-unit id="84e3115d2c9ec337c66cb9d3c294ddc900febcb1" translate="yes" xml:space="preserve">
          <source>However, on earlier Perls, or if you pass strings to subroutines outside the feature's scope, you can force Unicode rules by changing the encoding to UTF-8 by doing &lt;code&gt;utf8::upgrade($string)&lt;/code&gt;. This can be used safely on any string, as it checks and does not change strings that have already been upgraded.</source>
          <target state="translated">ただし、以前のPerlでは、または機能のスコープ外のサブルーチンに文字列を渡す場合は、 &lt;code&gt;utf8::upgrade($string)&lt;/code&gt; 実行してエンコーディングをUTF-8に変更することで、Unicodeルールを強制できます。これは、すでにアップグレードされた文字列をチェックして変更しないため、どの文字列でも安全に使用できます。</target>
        </trans-unit>
        <trans-unit id="9d790ef4b7b652054f8ef9f08eabcfceb4c9c9d7" translate="yes" xml:space="preserve">
          <source>However, only double quotes &quot;interpolate&quot; variables and special characters such as newlines (&lt;code&gt;\n&lt;/code&gt; ):</source>
          <target state="translated">ただし、二重引用符だけが変数と、改行（ &lt;code&gt;\n&lt;/code&gt; ）などの特殊文字を「補間」します。</target>
        </trans-unit>
        <trans-unit id="e743ca902ceb7982199b34d10b972ebd948b6061" translate="yes" xml:space="preserve">
          <source>However, only double quotes &quot;interpolate&quot; variables and special characters such as newlines (&lt;code&gt;\n&lt;/code&gt;):</source>
          <target state="translated">ただし、変数と改行（ &lt;code&gt;\n&lt;/code&gt; ）などの特殊文字を「補間」するのは二重引用符のみです。</target>
        </trans-unit>
        <trans-unit id="cf4f7d0c2e35a50b2d5589c3de0999f54d0755a9" translate="yes" xml:space="preserve">
          <source>However, other accidents of history have made Perl a well-accepted language for design of server-side programs (generally in CGI form) for Web site interfaces. Localization of static pages in Web sites is trivial, feasible either with simple language-negotiation features in servers like Apache, or with some kind of server-side inclusions of language-appropriate text into layout templates. However, I think that the localization of Perl-based search systems (or other kinds of dynamic content) in Web sites, be they public or access-restricted, is where Maketext will see the greatest use.</source>
          <target state="translated">しかし、歴史上の他の偶然により、Perl は Web サイトのインターフェイスのためのサーバサイドプログラム (一般的には CGI 形式)を設計するための言語として十分に受け入れられるようになりました。Webサイト内の静的ページのローカライズは、Apacheのようなサーバの単純な言語ネゴシエーション機能か、サーバ側で言語に適したテキストをレイアウトテンプレートに組み込むことで、簡単に実現できます。しかし、Perl ベースの検索システム (または他の種類の動的コンテンツ)の Web サイトでのローカリゼーションは、それらが公開されているかアクセス制限されているかにかかわらず、Maketext が最もよく使われるところだと私は考えています。</target>
        </trans-unit>
        <trans-unit id="5f40951889d3378b60336de3c7c19a48f84efe15" translate="yes" xml:space="preserve">
          <source>However, over the years, changes in gcc, GNU ld, and Solaris ld have made it difficult to automatically detect which ld ultimately gets called. You may have to manually edit config.sh and add the -Wl,-E flags yourself, or else run Configure interactively and add the flags at the appropriate prompts.</source>
          <target state="translated">しかし、長年の間に gcc、GNU ld、Solaris ld の変更により、最終的にどの ld が呼び出されるかを自動的に検出することが困難になりました。config.sh を手動で編集して -Wl,-E フラグを自分で追加するか、Configure を対話的に実行して適切なプロンプトでフラグを追加する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="fed61c8dd1afaf8e79d8960756c0fdb435ad95dc" translate="yes" xml:space="preserve">
          <source>However, people often either forget to add &lt;code&gt;BEGIN&lt;/code&gt;, or mistakenly group &lt;code&gt;use_ok&lt;/code&gt; with other tests in a single &lt;code&gt;BEGIN&lt;/code&gt; block, which can create subtle differences in execution order.</source>
          <target state="translated">ただし、多くの場合、 &lt;code&gt;BEGIN&lt;/code&gt; を追加するのを忘れたり、 &lt;code&gt;use_ok&lt;/code&gt; を他のテストと誤ってグループ化して1つの &lt;code&gt;BEGIN&lt;/code&gt; ブロックに入れたりすると、実行順序に微妙な違いが生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7abae8990eb0eaeb22dbcaa2121181a9c3213635" translate="yes" xml:space="preserve">
          <source>However, since I am running a very recent Hurd snapshot, in which a lot of bugs that were exposed by the Perl test suite have been fixed, you may encounter more failures. Likely candidates are: &quot;op/stat&quot;, &quot;lib/io_pipe&quot;, &quot;lib/io_sock&quot;, &quot;lib/io_udp&quot; and &quot;lib/time&quot;.</source>
          <target state="translated">しかし、私はPerlのテストスイートで露出していた多くのバグが修正された、ごく最近のHurdのスナップショットを実行しているので、より多くの失敗に遭遇するかもしれません。考えられるのは、以下のようなものです。&quot;op/stat&quot;、&quot;lib/io_pipe&quot;、&quot;lib/io_sock&quot;、&quot;lib/io_udp&quot;、&quot;lib/time&quot;。</target>
        </trans-unit>
        <trans-unit id="0a2932991138cff6cda965e1aa59120419d51793" translate="yes" xml:space="preserve">
          <source>However, since prototype checking happens at compile time, the assignment above happens too late to be of much use. You could address this by putting the whole loop of assignments within a BEGIN block, forcing it to occur during compilation.</source>
          <target state="translated">しかし、プロトタイプのチェックはコンパイル時に行われるので、上記の代入はあまり意味がありません。これに対処するには、代入のループ全体をBEGINブロックの中に入れて、コンパイル時に強制的に発生させることができます。</target>
        </trans-unit>
        <trans-unit id="f30360d0680e8617d8855ae3da4bf95cb66d3a40" translate="yes" xml:space="preserve">
          <source>However, since the name is not used by perl except as the return value of &lt;code&gt;caller&lt;/code&gt;, for stack traces or similar, there is no actual requirement that the name be syntactically valid as a perl function name. This could be used to attach extra information that could be useful in debugging stack traces.</source>
          <target state="translated">ただし、名前は &lt;code&gt;caller&lt;/code&gt; の戻り値として以外はperlによって使用されないため、スタックトレースなどの場合、名前がperl関数名として構文的に有効である必要はありません。これは、スタックトレースのデバッグに役立つ可能性のある追加情報を添付するために使用できます。</target>
        </trans-unit>
        <trans-unit id="f5dc0373ab5a69dc9065fd1361f3fe68378bd857" translate="yes" xml:space="preserve">
          <source>However, some people find that code harder to read than writing it with parentheses:</source>
          <target state="translated">しかし、そのコードは括弧で書くよりも読みにくいと感じる人もいます。</target>
        </trans-unit>
        <trans-unit id="b290a654499ed3de25fe105a7a5f328394110489" translate="yes" xml:space="preserve">
          <source>However, strings composed purely of ASCII code points (&lt;code&gt;0x00&lt;/code&gt;..&lt;code&gt;0x7F&lt;/code&gt;) will</source>
          <target state="translated">ただし、純粋にASCIIコードポイント（ &lt;code&gt;0x00&lt;/code&gt; .. &lt;code&gt;0x7F&lt;/code&gt; ）で構成される文字列は</target>
        </trans-unit>
        <trans-unit id="e33f317ee43849ba21e4562b2cfcaf42b63f23a8" translate="yes" xml:space="preserve">
          <source>However, that doesn't work if the line ending isn't a newline. You might change that &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; to a &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; so you can count the number of times the input record separator, &lt;code&gt;$/&lt;/code&gt; , shows up:</source>
          <target state="translated">ただし、行末が改行でない場合は機能しません。その &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 変更して、入力レコード区切り記号 &lt;code&gt;$/&lt;/code&gt; が現れる回数を数えることができます。</target>
        </trans-unit>
        <trans-unit id="9245af6fccc9a0ce411947a6accfc71a28fd8594" translate="yes" xml:space="preserve">
          <source>However, that doesn't work if the line ending isn't a newline. You might change that &lt;code&gt;tr///&lt;/code&gt; to a &lt;code&gt;s///&lt;/code&gt; so you can count the number of times the input record separator, &lt;code&gt;$/&lt;/code&gt;, shows up:</source>
          <target state="translated">ただし、行末が改行でない場合は機能しません。その &lt;code&gt;tr///&lt;/code&gt; を &lt;code&gt;s///&lt;/code&gt; 変更して、入力レコード区切り文字 &lt;code&gt;$/&lt;/code&gt; が表示される回数を数えることができます。</target>
        </trans-unit>
        <trans-unit id="ff8d86d9a6fdf31c1cce87bc99b477e123d4270e" translate="yes" xml:space="preserve">
          <source>However, the &lt;b&gt;.ph&lt;/b&gt; files almost double in size when built using &lt;b&gt;-h&lt;/b&gt;.</source>
          <target state="translated">ただし、&lt;b&gt;-h&lt;/b&gt;を使用してビルドすると、&lt;b&gt;.ph&lt;/b&gt;ファイルのサイズはほぼ2倍になります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="bf442c2f732fb4fe8240d9ec730b9c9278986a2a" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;Filter =&amp;gt; 1&lt;/code&gt; flavor of &lt;code&gt;use encoding&lt;/code&gt; will</source>
          <target state="translated">ただし、 &lt;code&gt;Filter =&amp;gt; 1&lt;/code&gt; フレーバーの &lt;code&gt;use encoding&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="dbf1c5152a0ddfa7cc0b45d1130d02f94e11246a" translate="yes" xml:space="preserve">
          <source>However, the &lt;code&gt;W&lt;/code&gt; specifier does operate on whole characters, as does the &lt;code&gt;U&lt;/code&gt; specifier.</source>
          <target state="translated">ただし、 &lt;code&gt;W&lt;/code&gt; 指定子は、 &lt;code&gt;U&lt;/code&gt; 指定子と同様に、文字全体を操作します。</target>
        </trans-unit>
        <trans-unit id="3da026c415acace03626d9fb7e1ee90aa243fe42" translate="yes" xml:space="preserve">
          <source>However, the above usage will create global variables throughout your program, which is bad programming practice. &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; creates lexically scoped variables instead. The variables are scoped to the block (i.e. a bunch of statements surrounded by curly-braces) in which they are defined.</source>
          <target state="translated">ただし、上記の使用方法では、プログラム全体でグローバル変数が作成されますが、これはプログラミングの習慣としては不適切です。 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 字句の代わりに変数をスコープ作成します。変数のスコープは、それらが定義されているブロック（つまり、中括弧で囲まれた一連のステートメント）です。</target>
        </trans-unit>
        <trans-unit id="38d3383a6acfe85a3e5c76aa619706a45144742d" translate="yes" xml:space="preserve">
          <source>However, the above usage will create global variables throughout your program, which is bad programming practice. &lt;code&gt;my&lt;/code&gt; creates lexically scoped variables instead. The variables are scoped to the block (i.e. a bunch of statements surrounded by curly-braces) in which they are defined.</source>
          <target state="translated">ただし、上記の使用法では、プログラム全体でグローバル変数が作成されます。これは、プログラミングの習慣としては不適切です。代わりに &lt;code&gt;my&lt;/code&gt; 字句スコープの変数を作成します。変数のスコープは、変数が定義されているブロック（つまり、中括弧で囲まれた一連のステートメント）にスコープされます。</target>
        </trans-unit>
        <trans-unit id="a041fd9ed4a1cc9a27e266960cf76f5cd2574980" translate="yes" xml:space="preserve">
          <source>However, the behaviour it enables is always performed by &lt;code&gt;IO::Socket::IP&lt;/code&gt;.</source>
          <target state="translated">ただし、それが有効にする動作は常に &lt;code&gt;IO::Socket::IP&lt;/code&gt; によって実行されます。</target>
        </trans-unit>
        <trans-unit id="643bcb3d157afa153f651f6fc7ccfed78f3e704a" translate="yes" xml:space="preserve">
          <source>However, the call in:</source>
          <target state="translated">しかし、コールイン。</target>
        </trans-unit>
        <trans-unit id="5357a547fd30e714675256546afb934f7d52ca74" translate="yes" xml:space="preserve">
          <source>However, the ever-increasing internationalization of the Web (whether measured in terms of amount of content, of numbers of content writers or programmers, or of size of content audiences) makes it increasingly likely that the interface to the average Web-based dynamic content service will be localized for two or maybe three languages. It is my hope that Maketext will make that task as simple as possible, and will remove previous barriers to localization for languages dissimilar to English.</source>
          <target state="translated">しかし、ウェブの国際化はますます進んでおり、(コンテンツの量、コンテンツライターやプログラマーの数、あるいはコンテンツのオーディエンスの規模などの点で測定されるかどうかに関わらず)平均的なウェブベースのダイナミックコンテンツサービスのインターフェイスは、2つか3つの言語にローカライズされる可能性が高くなってきています。Maketext がその作業を可能な限り簡単にし、英語とは異なる言語のローカライズに対するこれまでの障壁を取り除いてくれることを期待しています。</target>
        </trans-unit>
        <trans-unit id="30ecfcc25810d7a7cdf5b6a2a73a83af471c9442" translate="yes" xml:space="preserve">
          <source>However, the generated Perl function is called in very C-ish style:</source>
          <target state="translated">しかし、生成されたPerl関数は非常にCっぽいスタイルで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="be1c834c7d4d71f52243b42559f80aabe198a844" translate="yes" xml:space="preserve">
          <source>However, the matching position of the input variable would be set to &quot;exit;&quot; (i.e.</source>
          <target state="translated">しかし、入力変数のマッチング位置は「exit;」に設定されます(つまり</target>
        </trans-unit>
        <trans-unit id="25bf3d063af8542ff55fc69607480626e4cfa1dd" translate="yes" xml:space="preserve">
          <source>However, the result of such a slice cannot be localized or assigned to. These are otherwise very much consistent with hash slices using the @ symbol.</source>
          <target state="translated">しかし、このようなスライスの結果は、ローカライズされたり、割り当てられたりすることはできません。これらはそれ以外の場合、@記号を使用したハッシュスライスと非常に整合性があります。</target>
        </trans-unit>
        <trans-unit id="d95f0313fce5fa0d84ae8a729df3c8f4e82e2159" translate="yes" xml:space="preserve">
          <source>However, the result of such a slice cannot be localized, deleted or used in assignment. These are otherwise very much consistent with hash slices using the @ symbol.</source>
          <target state="translated">しかし、そのようなスライスの結果は、ローカライズ、削除、または代入に使用することはできません。これらはそれ以外の場合、@シンボルを使用したハッシュスライスと非常に整合性があります。</target>
        </trans-unit>
        <trans-unit id="c017b28f94bbc1527d3a99433c0d70601c0484be" translate="yes" xml:space="preserve">
          <source>However, the shortcut requires that you specify exactly two command-line arguments, &lt;code&gt;indirs&lt;/code&gt; and &lt;code&gt;outdir&lt;/code&gt; .</source>
          <target state="translated">ただし、ショートカットでは、2つのコマンドライン引数 &lt;code&gt;indirs&lt;/code&gt; および &lt;code&gt;outdir&lt;/code&gt; を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b66f8dabd20676d1be94167c3e3005cd50687163" translate="yes" xml:space="preserve">
          <source>However, the shortcut requires that you specify exactly two command-line arguments, &lt;code&gt;indirs&lt;/code&gt; and &lt;code&gt;outdir&lt;/code&gt;.</source>
          <target state="translated">ただし、ショートカットでは、コマンドライン引数 &lt;code&gt;indirs&lt;/code&gt; と &lt;code&gt;outdir&lt;/code&gt; の2つを正確に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8789f7d9a0995a0db12e65eee11cc6c52128e982" translate="yes" xml:space="preserve">
          <source>However, the use of bare v-strings to initialize version objects is &lt;b&gt;strongly&lt;/b&gt; discouraged in all circumstances. Also, bare v-strings are not completely supported in any version of Perl prior to 5.8.1.</source>
          <target state="translated">ただし、バージョンオブジェクトを初期化するために裸のv文字列を使用することは、すべての状況で&lt;b&gt;強く&lt;/b&gt;お勧めしません。また、裸のv文字列は、5.8.1より前のPerlのどのバージョンでも完全にはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5988e176ff20437ccf0016e7e2f8d1b308901fa5" translate="yes" xml:space="preserve">
          <source>However, the way a programmer should think about references is not so much in terms of the bare reference count, but in terms of</source>
          <target state="translated">しかし、プログラマが参照について考えるべき方法は、むき出しの参照数という観点からではなく、次のような観点から考えることです。</target>
        </trans-unit>
        <trans-unit id="174d3b644e004445441e24cae4b9fd65f9fed124" translate="yes" xml:space="preserve">
          <source>However, their are many, many other differences. For example, this works in Perl 5:</source>
          <target state="translated">しかし、他にも多くの違いがあります。例えば、これはPerl 5で動作します。</target>
        </trans-unit>
        <trans-unit id="431ca5f68339a06fd3a547e35432cecf8dddda74" translate="yes" xml:space="preserve">
          <source>However, there are places where this breaks down. Certain Perl constructs are for Unicode only, such as &lt;code&gt;\p{Alpha}&lt;/code&gt; . They assume that 0xD7 always has its Unicode meaning (or the equivalent on EBCDIC platforms). Since Latin1 is a subset of Unicode and 0xD7 is the multiplication sign in both Latin1 and Unicode, &lt;code&gt;\p{Alpha}&lt;/code&gt; will never match it, regardless of locale. A similar issue occurs with &lt;code&gt;\N{...}&lt;/code&gt; . Prior to v5.20, It is therefore a bad idea to use &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\N{}&lt;/code&gt; under plain &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; --</source>
          <target state="translated">しかし、これが失敗する場所があります。 &lt;code&gt;\p{Alpha}&lt;/code&gt; など、特定のPerl構成はUnicode専用です。彼らは、0xD7は常にそのUnicodeの意味（またはEBCDICプラットフォームでは同等のもの）を持っていると想定しています。Latin1はUnicodeのサブセットであり、0xD7はLatin1とUnicodeの両方の乗算記号であるため、ロケールに関係なく、 &lt;code&gt;\p{Alpha}&lt;/code&gt; は決して一致しません。 &lt;code&gt;\N{...}&lt;/code&gt; 同様の問題が発生します。したがって、v5.20より前のバージョンでは、単純な &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ロケールで &lt;code&gt;\p{}&lt;/code&gt; または &lt;code&gt;\N{}&lt;/code&gt; を使用することはお勧めできません-</target>
        </trans-unit>
        <trans-unit id="bfffc2a487e4695cb332617a58fbff944ca5de8f" translate="yes" xml:space="preserve">
          <source>However, there are places where this breaks down. Certain Perl constructs are for Unicode only, such as &lt;code&gt;\p{Alpha}&lt;/code&gt;. They assume that 0xD7 always has its Unicode meaning (or the equivalent on EBCDIC platforms). Since Latin1 is a subset of Unicode and 0xD7 is the multiplication sign in both Latin1 and Unicode, &lt;code&gt;\p{Alpha}&lt;/code&gt; will never match it, regardless of locale. A similar issue occurs with &lt;code&gt;\N{...}&lt;/code&gt;. Prior to v5.20, it is therefore a bad idea to use &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\N{}&lt;/code&gt; under plain &lt;code&gt;use locale&lt;/code&gt;--</source>
          <target state="translated">ただし、これが故障する場所があります。 &lt;code&gt;\p{Alpha}&lt;/code&gt; など、特定のPerl構造はUnicode専用です。彼らは、0xD7が常にUnicodeの意味（またはEBCDICプラットフォームの同等の意味）を持っていると想定しています。Latin1はUnicodeのサブセットであり、0xD7はLatin1とUnicodeの両方の乗算記号であるため、ロケールに関係なく、 &lt;code&gt;\p{Alpha}&lt;/code&gt; がそれに一致することはありません。 &lt;code&gt;\N{...}&lt;/code&gt; 同様の問題が発生します。V5.20の前に、使用することが悪い考えである &lt;code&gt;\p{}&lt;/code&gt; 、または &lt;code&gt;\N{}&lt;/code&gt; 普通下 &lt;code&gt;use locale&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="79a79d341666f9d08432041587a457666ea4e643" translate="yes" xml:space="preserve">
          <source>However, there is a third way: perl DLL exports the main() function and several callbacks to customize the search path. Below is a complete example of a &quot;Perl loader&quot; which</source>
          <target state="translated">しかし、3つ目の方法があります:perl DLLはmain()関数と検索パスをカスタマイズするためのいくつかのコールバックをエクスポートします。以下は、「Perl ローダ」の完全な例です。</target>
        </trans-unit>
        <trans-unit id="167fa8624f523d65d674923630d20eace6f440ad" translate="yes" xml:space="preserve">
          <source>However, there is one other function which manipulates the reference count of its argument. The &lt;code&gt;newRV_inc&lt;/code&gt; function, you will recall, creates a reference to the specified argument. As a side effect, it increments the argument's reference count. If this is not what you want, use &lt;code&gt;newRV_noinc&lt;/code&gt; instead.</source>
          <target state="translated">ただし、引数の参照カウントを操作する関数が他に1つあります。 &lt;code&gt;newRV_inc&lt;/code&gt; の機能は、あなたがリコールされます、指定された引数への参照を作成します。副作用として、引数の参照カウントが増加します。これが必要なものでない場合は、代わりに &lt;code&gt;newRV_noinc&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a934c497d33c3b96a41f7573fdbc88756bd17bf7" translate="yes" xml:space="preserve">
          <source>However, these filepaths appear in the list returned by &lt;code&gt;standard_typemap_locations()&lt;/code&gt; in reverse order,</source>
          <target state="translated">ただし、これらのファイルパスは、 &lt;code&gt;standard_typemap_locations()&lt;/code&gt; によって返されるリストに逆の順序で表示されます。</target>
        </trans-unit>
        <trans-unit id="78acaa936efa9d2893b28f11a288123a0f9298ff" translate="yes" xml:space="preserve">
          <source>However, these two XSUBs provide almost identical generated C code: &lt;b&gt;xsubpp&lt;/b&gt; compiler is smart enough to figure out the &lt;code&gt;CODE:&lt;/code&gt; section from the first two lines of the description of XSUB. What about &lt;code&gt;OUTPUT:&lt;/code&gt; section? In fact, that is absolutely the same! The &lt;code&gt;OUTPUT:&lt;/code&gt; section can be removed as well,</source>
          <target state="translated">ただし、これらの2つのXSUBは、ほぼ同じ生成Cコードを提供します&lt;b&gt;。xsubpp&lt;/b&gt;コンパイラーは、XSUBの説明の最初の2行の &lt;code&gt;CODE:&lt;/code&gt; セクションを理解するのに十分スマートです。何についての &lt;code&gt;OUTPUT:&lt;/code&gt; セクション？実際、それはまったく同じです！ &lt;code&gt;OUTPUT:&lt;/code&gt; セクションには、同様に除去することができます</target>
        </trans-unit>
        <trans-unit id="84b8501e3adfdc161bae2d83215ead9cfc2ea49b" translate="yes" xml:space="preserve">
          <source>However, this approach is limited to the first arguments following &quot;root&quot; (again, see &lt;a href=&quot;File::Spec::Unix#canonpath%28%29&quot;&gt;&quot;canonpath()&quot; in File::Spec::Unix&lt;/a&gt;. If there are more arguments that move up the directory tree, an invalid path going beyond root can be created.</source>
          <target state="translated">ただし、このアプローチは「root」に続く最初の引数に限定されます（ここでも、&lt;a href=&quot;File::Spec::Unix#canonpath%28%29&quot;&gt;File :: Spec :: Unixの「canonpath（）」を&lt;/a&gt;参照してください。ディレクトリツリーを上に移動する引数がさらにある場合は、rootを超える無効なパス作成することができます。</target>
        </trans-unit>
        <trans-unit id="8993e8546f1a446361af9208f62149f37c72c7da" translate="yes" xml:space="preserve">
          <source>However, this approach is limited to the first arguments following &quot;root&quot; (again, see &lt;code&gt;Unix-&amp;gt;canonpath()&lt;/code&gt; ). If there are more arguments that move up the directory tree, an invalid path going beyond root can be created.</source>
          <target state="translated">ただし、このアプローチは「ルート」に続く最初の引数に限定されます（ここでも、 &lt;code&gt;Unix-&amp;gt;canonpath()&lt;/code&gt; を参照してください）。ディレクトリツリーを上に移動する引数がさらにある場合、ルートを超えて無効なパスが作成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5458eab9c28fdf9d40e7593c2500908102783b51" translate="yes" xml:space="preserve">
          <source>However, this feature was undeprecated in Perl 5.24.</source>
          <target state="translated">しかし、この機能はPerl 5.24では未実装でした。</target>
        </trans-unit>
        <trans-unit id="f01b858fc25bd1ebdcf816e174585aed80aab581" translate="yes" xml:space="preserve">
          <source>However, this function may return a Unicode string if the environment variable being expanded hasn't been assigned to via %ENV. Access to %ENV is currently always using byte semantics.</source>
          <target state="translated">ただし、展開される環境変数が %ENV を介して割り当てられていない場合、この関数は Unicode 文字列を返すことがあります。現在、%ENV へのアクセスは常にバイト・セマンティクスを使用しています。</target>
        </trans-unit>
        <trans-unit id="7865ef8ee24a1f53476e6455eeebeda223f24ca5" translate="yes" xml:space="preserve">
          <source>However, this only does what you mean if &lt;code&gt;$init_fields&lt;/code&gt; is indeed a hash reference. The condition &lt;code&gt;$init_fields ~~ $REQUIRED_FIELDS&lt;/code&gt; also allows the strings &lt;code&gt;&quot;name&quot;&lt;/code&gt;, &lt;code&gt;&quot;rank&quot;&lt;/code&gt;, &lt;code&gt;&quot;serial_num&quot;&lt;/code&gt; as well as any array reference that contains &lt;code&gt;&quot;name&quot;&lt;/code&gt; or &lt;code&gt;&quot;rank&quot;&lt;/code&gt; or &lt;code&gt;&quot;serial_num&quot;&lt;/code&gt; anywhere to pass through.</source>
          <target state="translated">ただし、これは、 &lt;code&gt;$init_fields&lt;/code&gt; が実際にハッシュ参照である場合にのみ意味します。条件 &lt;code&gt;$init_fields ~~ $REQUIRED_FIELDS&lt;/code&gt; 、文字列ができ &lt;code&gt;&quot;name&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;rank&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;serial_num&quot;&lt;/code&gt; 良く含まれている任意の配列参照のように &lt;code&gt;&quot;name&quot;&lt;/code&gt; や &lt;code&gt;&quot;rank&quot;&lt;/code&gt; または &lt;code&gt;&quot;serial_num&quot;&lt;/code&gt; どこでも通過するが。</target>
        </trans-unit>
        <trans-unit id="29b29d0e56857b797fbe9046c1637ec13ba0255e" translate="yes" xml:space="preserve">
          <source>However, this produces a list of temporary integer values as long as the original list of strings, only to reduce it down to a single value again. We can compute the same result more efficiently by using &lt;code&gt;reduce&lt;/code&gt; with a code block that accumulates lengths by writing this instead as:</source>
          <target state="translated">ただし、これにより、元の文字列のリストと同じ長さの一時的な整数値のリストが生成され、再び1つの値に縮小されます。代わりに次のように記述することで長さを累積するコードブロックで &lt;code&gt;reduce&lt;/code&gt; を使用することにより、同じ結果をより効率的に計算できます。</target>
        </trans-unit>
        <trans-unit id="a498e0a44f0f9f8fbe6e40968d0b21c8d56b2479" translate="yes" xml:space="preserve">
          <source>However, this request is ignored, as the current code now uses the low-level math library for directly storing the number parts.</source>
          <target state="translated">しかし、現在のコードでは、数値部分を直接格納するために低レベルの数学ライブラリを使用しているため、この要求は無視されます。</target>
        </trans-unit>
        <trans-unit id="6b7469fc2b44cf29dd35f31f1f2fa503b7de276c" translate="yes" xml:space="preserve">
          <source>However, this silent upgrading can easily cause problems, if you happen to mix unicode strings with non-Latin1 data -- i.e. byte-strings encoded in UTF-8 or other encodings. The error will not manifest until the combined string is written to output, at which time it would be impossible to see where did the silent upgrading occur.</source>
          <target state="translated">しかし、このサイレントアップグレードは、Unicode 文字列と非Latin1データ(UTF-8やその他のエンコーディングでエンコードされたバイト文字列など)を混在させた場合に、簡単に問題を引き起こす可能性があります。このエラーは、結合された文字列が出力に書き込まれるまで顕在化しませんが、その時点では、サイレントアップグレードがどこで発生したのかを確認することは不可能です。</target>
        </trans-unit>
        <trans-unit id="1c442891dca9145a3b9c79c668f4b9ec23f39a60" translate="yes" xml:space="preserve">
          <source>However, this still does not guarantee that these DLL may be loaded. The reason is the mangling of the name of the</source>
          <target state="translated">しかし、これでもこれらのDLLが読み込まれる可能性があることを保証するものではありません。その理由は</target>
        </trans-unit>
        <trans-unit id="2084b9ad89039a2ea6c4200ac2905bee170c22b7" translate="yes" xml:space="preserve">
          <source>However, to help ease understanding, it is suggested that you place a &quot;&amp;amp;&quot; next to the variable name and away from the variable type), and place a &quot;*&quot; near the variable type, but away from the variable name (as in the call to foo above). By doing so, it is easy to understand exactly what will be passed to the C function; it will be whatever is in the &quot;last column&quot;.</source>
          <target state="translated">ただし、理解を容易にするために、変数名の隣に「＆」を配置し、変数型から離します）、「*」を変数名の近くに配置しますが、変数名から離します（上記のfooの呼び出し）。そうすることで、C関数に渡されるものを正確に理解するのは簡単です。「最後の列」にあるものになります。</target>
        </trans-unit>
        <trans-unit id="ae3f94bdf7ac1269b60e51c2ce0911730992c14a" translate="yes" xml:space="preserve">
          <source>However, under some circumstances, this behavior may be excessively slow. For example, suppose you have a million-record file, and you want to do:</source>
          <target state="translated">しかし、状況によっては、この動作が極端に遅くなることがあります。例えば、100万レコードのファイルを持っていて、それを実行したいとします。</target>
        </trans-unit>
        <trans-unit id="37cab8dafbfef6134cbae52136465a602af12595" translate="yes" xml:space="preserve">
          <source>However, unless you tell &lt;code&gt;Memoize&lt;/code&gt; that these calls are equivalent, it will not know that, and it will compute the values for these invocations of your function separately, and store them separately.</source>
          <target state="translated">ただし、これらの呼び出しが同等であることを &lt;code&gt;Memoize&lt;/code&gt; に伝えない限り、それはわかりません。また、関数のこれらの呼び出しの値を個別に計算し、個別に格納します。</target>
        </trans-unit>
        <trans-unit id="142779c491fb94a0d076da32b3296ae6b26999c0" translate="yes" xml:space="preserve">
          <source>However, up through v5.20, Perl initialized things on start-up so that &lt;code&gt;LC_NUMERIC&lt;/code&gt; was set to the &quot;C&quot; locale. But if any code anywhere changed it, it would stay changed. This means that your module can't count on &lt;code&gt;LC_NUMERIC&lt;/code&gt; being something in particular, and you can't expect floating point numbers (including version strings) to have dots in them. If you don't allow for a non-dot, your code could break if anyone anywhere changed the locale. For this reason, v5.22 changed the behavior so that Perl tries to keep &lt;code&gt;LC_NUMERIC&lt;/code&gt; in the &quot;C&quot; locale except around the operations internally where it should be something else. Misbehaving XS code will always be able to change the locale anyway, but the most common instance of this is checked for and handled.</source>
          <target state="translated">ただし、v5.20までは、Perlは起動時に物事を初期化し、 &lt;code&gt;LC_NUMERIC&lt;/code&gt; が「C」ロケールに設定されるようにしました。しかし、どこかのコードがそれを変更した場合、それは変更されたままになります。つまり、モジュールは &lt;code&gt;LC_NUMERIC&lt;/code&gt; が特定のものであることを期待できず、浮動小数点数（バージョン文字列を含む）にドットが含まれることは期待できません。ドット以外を許可しない場合、誰かがロケールを変更した場合、コードが壊れる可能性があります。このため、v5.22は動作を変更し、Perlが &lt;code&gt;LC_NUMERIC&lt;/code&gt; を &quot;C&quot;ロケールに維持しようとするようになりました。とにかくXSコードの誤動作は常にロケールを変更できますが、これの最も一般的なインスタンスがチェックされて処理されます。</target>
        </trans-unit>
        <trans-unit id="068b747d32004750485efe98f8d1cbafa2e0e35a" translate="yes" xml:space="preserve">
          <source>However, using &lt;code&gt;&amp;amp;&lt;/code&gt; in the call still overrides the prototype of &lt;code&gt;foo&lt;/code&gt; if present:</source>
          <target state="translated">ただし、呼び出しで &lt;code&gt;&amp;amp;&lt;/code&gt; を使用しても、 &lt;code&gt;foo&lt;/code&gt; のプロトタイプが存在する場合はそれをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="f9fabcfc6b8511bdc0a7ecd34a3e04f701d2b56e" translate="yes" xml:space="preserve">
          <source>However, using &lt;code&gt;\015\012&lt;/code&gt; (or &lt;code&gt;\cM\cJ&lt;/code&gt; , or &lt;code&gt;\x0D\x0A&lt;/code&gt; ) can be tedious and unsightly, as well as confusing to those maintaining the code. As such, the &lt;code&gt;Socket&lt;/code&gt; module supplies the Right Thing for those who want it.</source>
          <target state="translated">ただし、 &lt;code&gt;\015\012&lt;/code&gt; （または &lt;code&gt;\cM\cJ&lt;/code&gt; 、または &lt;code&gt;\x0D\x0A&lt;/code&gt; ）を使用すると、コードを保守する人を混乱させるだけでなく、退屈で見苦しいものになる可能性があります。このように、 &lt;code&gt;Socket&lt;/code&gt; モジュールはそれを望む人々に正しいものを提供します。</target>
        </trans-unit>
        <trans-unit id="bc2515b31d0fe90459c261be099beca3ae68dad0" translate="yes" xml:space="preserve">
          <source>However, using &lt;code&gt;\015\012&lt;/code&gt; (or &lt;code&gt;\cM\cJ&lt;/code&gt;, or &lt;code&gt;\x0D\x0A&lt;/code&gt;) can be tedious and unsightly, as well as confusing to those maintaining the code. As such, the &lt;a href=&quot;socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt; module supplies the Right Thing for those who want it.</source>
          <target state="translated">ただし、 &lt;code&gt;\015\012&lt;/code&gt; （または &lt;code&gt;\cM\cJ&lt;/code&gt; 、または &lt;code&gt;\x0D\x0A&lt;/code&gt; ）を使用すると、面倒で見苦しいだけでなく、コードを保守している人を混乱させる可能性があります。このように、&lt;a href=&quot;socket&quot;&gt; &lt;code&gt;Socket&lt;/code&gt; &lt;/a&gt;モジュールはそれを望む人々に正しいものを提供します。</target>
        </trans-unit>
        <trans-unit id="163537b4f5c11cd47e9722700a60c6c7ea0ade4a" translate="yes" xml:space="preserve">
          <source>However, using the code requires that you have a working C compiler and can use it to build and install a CPAN module. Here's a solution using the standard &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module, which is already on your system (assuming your system supports POSIX).</source>
          <target state="translated">ただし、コードを使用するには、動作するCコンパイラが必要であり、CPANモジュールをビルドおよびインストールするためにそれを使用できます。これは、すでにシステムにある標準の&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールを使用したソリューションです（システムがPOSIXをサポートしている場合）。</target>
        </trans-unit>
        <trans-unit id="a4350da00ad3028f4efc1846f8fc750c07ee286a" translate="yes" xml:space="preserve">
          <source>However, when it's a list-context assignment and you're trying to use &lt;code&gt;||&lt;/code&gt; for control flow, you probably need &lt;code&gt;&quot;or&quot;&lt;/code&gt; so that the assignment takes higher precedence.</source>
          <target state="translated">ただし、それがリストコンテキストの割り当てであり、使用しようとしている場合 &lt;code&gt;||&lt;/code&gt; 制御フローでは、割り当てがより優先されるように、おそらく &lt;code&gt;&quot;or&quot;&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="b662692b6fa64e61f6a9c3f800af2536f40b3b4a" translate="yes" xml:space="preserve">
          <source>However, when you</source>
          <target state="translated">ただし、以下のような場合には</target>
        </trans-unit>
        <trans-unit id="41f9727ede39a1ce5211e24f06cf1afdd8d7ee83" translate="yes" xml:space="preserve">
          <source>However, you can change the way an object is smartmatched by overloading the &lt;code&gt;~~&lt;/code&gt; operator. This is allowed to extend the usual smartmatch semantics. For objects that do have an &lt;code&gt;~~&lt;/code&gt; overload, see &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;~~&lt;/code&gt; 演算子をオーバーロードすることで、オブジェクトのスマートマッチングの方法を変更できます。これにより、通常のsmartmatchセマンティクスを拡張できます。持っているオブジェクトの場合 &lt;code&gt;~~&lt;/code&gt; オーバーロードを参照してください&lt;a href=&quot;overload&quot;&gt;過負荷&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b89d0d284e64c095a60bef4f1dd049a654a9b8f4" translate="yes" xml:space="preserve">
          <source>However, you can suppress the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; by using an explicit, empty import list. Both of these still happen at compile-time:</source>
          <target state="translated">ただし、明示的な空のインポートリストを使用して、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; を抑制できます。これらは両方ともコンパイル時にまだ発生します。</target>
        </trans-unit>
        <trans-unit id="260fe9f97d0d69a65905fdc8f061356d4780ef04" translate="yes" xml:space="preserve">
          <source>However, you can suppress the &lt;code&gt;import&lt;/code&gt; by using an explicit, empty import list. Both of these still happen at compile-time:</source>
          <target state="translated">ただし、明示的な空のインポートリストを使用して、 &lt;code&gt;import&lt;/code&gt; を抑制することができます。これらは両方ともコンパイル時に発生します。</target>
        </trans-unit>
        <trans-unit id="2eb959e8b316e23c060bb14a1aa10ea6663e7a66" translate="yes" xml:space="preserve">
          <source>However, you have to be more cautious with namespace and variable scoping when using a persistent interpreter. In previous examples we've been using global variables in the default package &lt;code&gt;main&lt;/code&gt; . We knew exactly what code would be run, and assumed we could avoid variable collisions and outrageous symbol table growth.</source>
          <target state="translated">ただし、永続的なインタープリターを使用する場合は、名前空間と変数のスコープについてより注意する必要があります。前の例では、デフォルトのパッケージ &lt;code&gt;main&lt;/code&gt; でグローバル変数を使用しています。どのコードが実行されるかを正確に把握しており、変数の衝突や法外なシンボルテーブルの増加を回避できると想定しました。</target>
        </trans-unit>
        <trans-unit id="f80e0acb7e372dabc4a5f7b74c6498f8798ef7a3" translate="yes" xml:space="preserve">
          <source>However, you have to be more cautious with namespace and variable scoping when using a persistent interpreter. In previous examples we've been using global variables in the default package &lt;code&gt;main&lt;/code&gt;. We knew exactly what code would be run, and assumed we could avoid variable collisions and outrageous symbol table growth.</source>
          <target state="translated">ただし、永続インタープリターを使用する場合は、名前空間と変数のスコープにさらに注意する必要があります。前の例では、デフォルトのパッケージ &lt;code&gt;main&lt;/code&gt; でグローバル変数を使用していました。どのコードが実行されるかを正確に知っており、変数の衝突やシンボルテーブルの法外な増大を回避できると想定しました。</target>
        </trans-unit>
        <trans-unit id="e66a879553ebe7b620fa37901232bfb863aa6d3d" translate="yes" xml:space="preserve">
          <source>However, you may know that you intend to use the results in a particular context, where some pragmas are already in scope. In this case, you use the &lt;b&gt;ambient_pragmas&lt;/b&gt; method to describe the assumptions you wish to make.</source>
          <target state="translated">ただし、一部のプラグマがすでにスコープ内にある特定のコンテキストで結果を使用するつもりであることを知っている場合があります。この場合は、&lt;b&gt;ambient_pragmas&lt;/b&gt;メソッドを使用して、想定する仮定を記述します。</target>
        </trans-unit>
        <trans-unit id="13143a50c1533ee9fae63ea9ed2eae1b6ad85192" translate="yes" xml:space="preserve">
          <source>However, you might be out of luck if you expect that means there is a real person on the other side. With the &lt;a href=&quot;expect&quot;&gt;Expect&lt;/a&gt; module, another program can pretend to be a person. The program might even come close to passing the Turing test.</source>
          <target state="translated">ただし、反対側に実在の人物がいることを期待している場合は、運が悪い可能性があります。&lt;a href=&quot;expect&quot;&gt;期待&lt;/a&gt;モジュール、別のプログラムは、人のふりをすることができます。プログラムはチューリングテストに合格することさえあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="56cfa87ada9834b01835bf9c64cf509441054b7b" translate="yes" xml:space="preserve">
          <source>However, you might be out of luck if you expect that means there is a real person on the other side. With the &lt;a href=&quot;http://search.cpan.org/perldoc/Expect&quot;&gt;Expect&lt;/a&gt; module, another program can pretend to be a person. The program might even come close to passing the Turing test.</source>
          <target state="translated">しかし、反対側に実在の人物がいることを意味する場合、運が悪い場合があります。&lt;a href=&quot;http://search.cpan.org/perldoc/Expect&quot;&gt;期待&lt;/a&gt;モジュール、別のプログラムは、人のふりをすることができます。プログラムは、チューリングテストに合格することにも近づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="a422dec568026043ae4e005023457a913a05b272" translate="yes" xml:space="preserve">
          <source>However, you must not do this, for example:</source>
          <target state="translated">ただし、例えば、これはやってはいけません。</target>
        </trans-unit>
        <trans-unit id="e3a4e64a25b29be20841a60bc10f2c0bc37e06f9" translate="yes" xml:space="preserve">
          <source>However, you should &lt;b&gt;not&lt;/b&gt; blindly rely on perl always doing the right thing. Particularly, perl will mistakenly return true when you clear the hash by repeatedly calling DELETE until it is empty. You are therefore advised to supply your own SCALAR method when you want to be absolutely sure that your hash behaves nicely in scalar context.</source>
          <target state="translated">しかし、perlが常に正しいことをしていることに頼る必要はあり&lt;b&gt;ません&lt;/b&gt;。特に、ハッシュが空になるまで繰り返しDELETEを呼び出してハッシュをクリアすると、perlは誤ってtrueを返します。したがって、ハッシュがスカラーコンテキストで適切に動作することを確実にしたい場合は、独自のSCALARメソッドを提供することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="684d82ac83a5f8790e5e4368c88d7c77aa0309c6" translate="yes" xml:space="preserve">
          <source>Hub ID of the hub that is represented in the parent-child relationship.</source>
          <target state="translated">親子関係で表されるハブのハブID。</target>
        </trans-unit>
        <trans-unit id="b42118b9b162322837f3cc4bb7657481f703e832" translate="yes" xml:space="preserve">
          <source>Hub subclasses (and some hub utility objects) live under this namespace. It is perfectly reasonable for third party distributions to add new hub subclasses in this namespace.</source>
          <target state="translated">ハブサブクラス(およびいくつかのハブユーティリティオブジェクト)は、この名前空間の下に存在します。サードパーティのディストリビューションがこの名前空間に新しいハブサブクラスを追加するのは完全に合理的です。</target>
        </trans-unit>
        <trans-unit id="2a802db1cd7382689ea166fa197e7bee4e5a74a9" translate="yes" xml:space="preserve">
          <source>Hub used by interceptor to grab results.</source>
          <target state="translated">結果をつかむためにインターセプターが使用するハブ。</target>
        </trans-unit>
        <trans-unit id="f64bf0d9364108763162c7fb9f03b312d24f14b0" translate="yes" xml:space="preserve">
          <source>Hub used by subtests</source>
          <target state="translated">サブテストで使用されるハブ</target>
        </trans-unit>
        <trans-unit id="59d2100593fec39720245432930b526325693698" translate="yes" xml:space="preserve">
          <source>Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;</source>
          <target state="translated">Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;</target>
        </trans-unit>
        <trans-unit id="903a8361b68cfddd3da7251d755007dc0e94f5d3" translate="yes" xml:space="preserve">
          <source>Human readable description of the assertion.</source>
          <target state="translated">アサーションの人間が読める記述。</target>
        </trans-unit>
        <trans-unit id="3eba29a5d2ddda0020c1cac7fb53eb47535a92ce" translate="yes" xml:space="preserve">
          <source>Human readable description of the event.</source>
          <target state="translated">イベントの人間が読める説明。</target>
        </trans-unit>
        <trans-unit id="9606d069fe25297dd11df0cc8580ee8dbe3f85e7" translate="yes" xml:space="preserve">
          <source>Human readable explanation for the plan being set. This is normally not rendered by most formatters except when the &lt;code&gt;skip&lt;/code&gt; field is also set.</source>
          <target state="translated">設定されている計画についての人間が読める説明。これは通常、 &lt;code&gt;skip&lt;/code&gt; フィールドも設定されている場合を除いて、ほとんどのフォーマッタではレンダリングされません。</target>
        </trans-unit>
        <trans-unit id="bc1a79a67a1a08817e952e2d08177e5fbf4cba31" translate="yes" xml:space="preserve">
          <source>Human readable explanation for the special behavior.</source>
          <target state="translated">特殊な行動を人間が読めるように解説</target>
        </trans-unit>
        <trans-unit id="f687605c0577ef885ee45c1c086d0ad37ee205b5" translate="yes" xml:space="preserve">
          <source>Human readable explanation of why amnesty was granted.</source>
          <target state="translated">恩赦が認められた理由を人間が読めるように解説</target>
        </trans-unit>
        <trans-unit id="6b2aebac92e9a840f478fce4b6343c22b8d0ca60" translate="yes" xml:space="preserve">
          <source>Human readable string or data structure, this is the information to display. Formatters are free to render the structures however they please. This may contain a blessed object.</source>
          <target state="translated">人間が読める文字列またはデータ構造体、これは表示する情報です。フォーマッタは好きなように構造体をレンダリングすることができます。これには祝福されたオブジェクトが含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="6a9d2d17793130f2e86c0885a2d78da3c7f24dc7" translate="yes" xml:space="preserve">
          <source>Human readable text for display.</source>
          <target state="translated">表示のための人間が読めるテキスト。</target>
        </trans-unit>
        <trans-unit id="f14e46ce7d094f9326167acc499698128651be85" translate="yes" xml:space="preserve">
          <source>Hungary</source>
          <target state="translated">Hungary</target>
        </trans-unit>
        <trans-unit id="1938ed7c63e01c8a596d909427e34650befec480" translate="yes" xml:space="preserve">
          <source>HvENAME</source>
          <target state="translated">HvENAME</target>
        </trans-unit>
        <trans-unit id="6d3ea3f5bd46317a0b128c10a43f2b6c88d4d4cb" translate="yes" xml:space="preserve">
          <source>HvENAMELEN</source>
          <target state="translated">HvENAMELEN</target>
        </trans-unit>
        <trans-unit id="867db34eff4673062e6b813ed04df520c5233a3d" translate="yes" xml:space="preserve">
          <source>HvENAMEUTF8</source>
          <target state="translated">HvENAMEUTF8</target>
        </trans-unit>
        <trans-unit id="df110dc29f38c56ef4eec2b4759e744b23e69e1f" translate="yes" xml:space="preserve">
          <source>HvFILL</source>
          <target state="translated">HvFILL</target>
        </trans-unit>
        <trans-unit id="d18ff5331b7e22893e39912957fedf5b97c67829" translate="yes" xml:space="preserve">
          <source>HvNAME</source>
          <target state="translated">HvNAME</target>
        </trans-unit>
        <trans-unit id="9c77eb3e074087eb866a360b06af707ee5df0f01" translate="yes" xml:space="preserve">
          <source>HvNAMELEN</source>
          <target state="translated">HvNAMELEN</target>
        </trans-unit>
        <trans-unit id="c5d2d62591fdff3694f9b23256ac71f286680b41" translate="yes" xml:space="preserve">
          <source>HvNAMEUTF8</source>
          <target state="translated">HvNAMEUTF8</target>
        </trans-unit>
        <trans-unit id="9711a7cfeff071972d36fdd6050e80bc9d749c0b" translate="yes" xml:space="preserve">
          <source>Hyperlinks</source>
          <target state="translated">Hyperlinks</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="68ea31ac882843ca3bb7347afdcbec874605911e" translate="yes" xml:space="preserve">
          <source>I almost always use keys that are themselves valid lexicon values. One notable exception is when the value is quite long. For example, to get the screenful of data that a command-line program might return when given an unknown switch, I often just use a brief, self-explanatory key such as &quot;_USAGE_MESSAGE&quot;. At that point I then go and immediately to define that lexicon entry in the ProjectClass::L10N::en lexicon (since English is always my &quot;project language&quot;):</source>
          <target state="translated">私はほとんどの場合、それ自体が有効なレキシコン値であるキーを使用します。特筆すべき例外は、値が非常に長い場合です。例えば、コマンドライン・プログラムが未知のスイッチを与えられたときに、画面いっぱいのデータを取得するために、&quot;_USAGE_MESSAGE&quot; のような簡潔でわかりやすいキーを使うことがよくあります。その時点で、すぐに ProjectClass::L10N::en レキシコンの中にそのレキシコン・エントリを定義します (英語は常に私の &quot;プロジェクト言語 &quot;なので)。</target>
        </trans-unit>
        <trans-unit id="bd142ae3cc7adab96cfaa7558d02068b158e85c3" translate="yes" xml:space="preserve">
          <source>I am also usually active on IRC as 'autarch' on &lt;code&gt;irc://irc.perl.org&lt;/code&gt;.</source>
          <target state="translated">私は通常、 &lt;code&gt;irc://irc.perl.org&lt;/code&gt; の「autarch」としてIRCでも活動しています。</target>
        </trans-unit>
        <trans-unit id="5e1174e9f9955c9e61d54f218d08d7285e0e0ae8" translate="yes" xml:space="preserve">
          <source>I am behind a SOCKS firewall, but the Firewall option does not work ?</source>
          <target state="translated">私はSOCKSのファイアウォールの後ろにいますが、ファイアウォールオプションは動作しませんか?</target>
        </trans-unit>
        <trans-unit id="99b0de54116e38392536f989ded25ad9bceea24f" translate="yes" xml:space="preserve">
          <source>I am behind an FTP proxy firewall, but cannot access machines outside ?</source>
          <target state="translated">私はFTPプロキシファイアウォールの後ろにいますが、外のマシンにアクセスすることができません。</target>
        </trans-unit>
        <trans-unit id="a12498934a0d4cbe958ea9ae2277b44bccce11e2" translate="yes" xml:space="preserve">
          <source>I am not root, how can I install a module in a personal directory?</source>
          <target state="translated">私はrootではありませんが、どのように個人のディレクトリにモジュールをインストールすることができますか?</target>
        </trans-unit>
        <trans-unit id="720225fb87f4fceb999d3d3c67fa208ed54fe066" translate="yes" xml:space="preserve">
          <source>I am sure there are bugs in the code. If you do find any, or can suggest any enhancements, I would welcome your comments.</source>
          <target state="translated">私はコードにバグがあると確信しています。もし何か発見した場合、あるいは機能強化を提案できる場合は、コメントをお待ちしています。</target>
        </trans-unit>
        <trans-unit id="f822dc00911ca2b5b17523234c19e71174239e30" translate="yes" xml:space="preserve">
          <source>I assume that each language class derives (directly or indirectly) from your project class, and also defines its @ISA, its %Lexicon, or both. But I anticipate no dire consequences if these assumptions do not hold.</source>
          <target state="translated">各言語クラスはプロジェクト・クラスから(直接または間接的に)派生し、@ISA、%Lexicon、またはその両方を定義していると仮定しています。しかし、これらの仮定が成り立たない場合は、悲惨な結果にはならないと予想しています。</target>
        </trans-unit>
        <trans-unit id="aac2738433180b0fc7eec7ab6421ac5a20b62f00" translate="yes" xml:space="preserve">
          <source>I believe this issue is prevalent not only for Mac Indics but also in other Indic encodings, but the above were the only Indic encodings maps that I could find at &lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/&lt;/a&gt; .</source>
          <target state="translated">この問題はMacIndicだけでなく、他のIndicエンコーディングでも蔓延していると思いますが、&lt;a href=&quot;http://www.unicode.org/&quot;&gt;http：//www.unicode.org/で&lt;/a&gt;見つけたIndicエンコーディングマップは上記だけでした。</target>
        </trans-unit>
        <trans-unit id="7b4d37f069c57cb7de599233daad3bd27d0a8ebc" translate="yes" xml:space="preserve">
          <source>I can also pass callbacks to the constructor:</source>
          <target state="translated">コンストラクタにコールバックを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="64bcef0f48a866ba703693e5fcdad43a764ad25a" translate="yes" xml:space="preserve">
          <source>I can also tell prove to save the results again so that it updates its idea of which tests failed:</source>
          <target state="translated">私はまた、それがどのテストが失敗したかのアイデアを更新するように、再び結果を保存するために証明することができます。</target>
        </trans-unit>
        <trans-unit id="23d96c393b63a12dec2fe257877addccb84b91ed" translate="yes" xml:space="preserve">
          <source>I can incorporate these options into my own version of prove. It's pretty simple. Most of the work of prove is handled by App::Prove. The important code in prove is just:</source>
          <target state="translated">これらのオプションを自分のバージョンの証明書に組み込むことができます。それはとてもシンプルです。prove の作業のほとんどは App::Prove によって処理されます。proveで重要なコードは、ただ</target>
        </trans-unit>
        <trans-unit id="5f16057cfc74a8e91522c5a546d3a88bbd9af3c3" translate="yes" xml:space="preserve">
          <source>I can picture all sorts of circumstances where you just do not want lookup to be able to fail (since failing normally means that maketext throws a &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, although see the next section for greater control over that). But here's one circumstance where _AUTO lexicons are meant to be</source>
          <target state="translated">（MAKETEXTがスローする通常の手段失敗以来、私はあなただけで失敗することができるように、ルックアップしたくないような状況のすべての種類を想像することができ &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; そのより細かく制御するために、次のセクションを参照してくださいが、）。しかし、ここでは_AUTOレキシコンが意図されている状況の1つです。</target>
        </trans-unit>
        <trans-unit id="73e0e4b77d6bcf01d6041debc1a2e83d30fd057e" translate="yes" xml:space="preserve">
          <source>I can picture all sorts of circumstances where you just do not want lookup to be able to fail (since failing normally means that maketext throws a &lt;code&gt;die&lt;/code&gt;, although see the next section for greater control over that). But here's one circumstance where _AUTO lexicons are meant to be</source>
          <target state="translated">（MAKETEXTがスローする通常の手段失敗以来、私はあなただけで失敗することができるように、ルックアップしたくないような状況のすべての種類を想像することができ &lt;code&gt;die&lt;/code&gt; そのより細かく制御するために、次のセクションを参照してくださいが、）。しかし、ここに_AUTOレキシコンが意図されている1つの状況があります</target>
        </trans-unit>
        <trans-unit id="08456af218bdc4a506b4e778d48d6e90d82b1d13" translate="yes" xml:space="preserve">
          <source>I can tell prove just to run the tests that are failing like this:</source>
          <target state="translated">このように失敗しているテストを実行するだけで証明できるんですね。</target>
        </trans-unit>
        <trans-unit id="c4089c61d9307c046d40cd9abd561382f7f03ee3" translate="yes" xml:space="preserve">
          <source>I cannot embed perl into my program, or use</source>
          <target state="translated">プログラムにperlを埋め込むことができません。</target>
        </trans-unit>
        <trans-unit id="31d3f8a1fa15d729190062c1ddc4f7dd97a4bdd9" translate="yes" xml:space="preserve">
          <source>I cannot embed perl into my program, or use _perl.dll_ from my program.</source>
          <target state="translated">perlをプログラムに埋め込んだり、プログラムから_perl.dll_を使用することができません。</target>
        </trans-unit>
        <trans-unit id="e0dabde4d7970f758fc132b87f569962de8417e4" translate="yes" xml:space="preserve">
          <source>I cannot embed perl into my program, or use perl.dll from my program.</source>
          <target state="translated">perlをプログラムに埋め込むことも、プログラムからperl.dllを使用することもできません。</target>
        </trans-unit>
        <trans-unit id="0dfdb8e8d03951e17fc904de692bb5bbd7335317" translate="yes" xml:space="preserve">
          <source>I cannot run external programs</source>
          <target state="translated">外部プログラムを実行できない</target>
        </trans-unit>
        <trans-unit id="993598ed9e1ff928aa61c98c2c0a4e51ef13499b" translate="yes" xml:space="preserve">
          <source>I cleaned it up a little.</source>
          <target state="translated">少しだけ綺麗にしてみました。</target>
        </trans-unit>
        <trans-unit id="03ed42e550b2837d803cc938a5c931b4a08219dc" translate="yes" xml:space="preserve">
          <source>I copied the Perl binary from one machine to another, but scripts don't work.</source>
          <target state="translated">Perlのバイナリをあるマシンから別のマシンにコピーしましたが、スクリプトが動作しません。</target>
        </trans-unit>
        <trans-unit id="9327e89bd234d7a986b2da9100760b6e37c4547a" translate="yes" xml:space="preserve">
          <source>I could start up faster by delaying compilation until it should be needed, but this gets a &quot;panic: top_level&quot; when using the pragma form in Perl 5.001e.</source>
          <target state="translated">必要になるまでコンパイルを遅らせることで、より速く起動することができましたが、Perl 5.001eでプラグマ形式を使用すると、&quot;panic:top_level &quot;になってしまいます。</target>
        </trans-unit>
        <trans-unit id="88a201ad71d898eadaddaac681114556a0d035b9" translate="yes" xml:space="preserve">
          <source>I do not anticipate that you will need (or particularly want) to nest bracket groups, but you are welcome to email me with convincing (real-life) arguments to the contrary.</source>
          <target state="translated">私は、あなたがブラケットグループを入れ子にする必要がある(または特にしたい)とは予想していませんが、それに反して説得力のある(現実の)議論を私にメールで送ることを歓迎します。</target>
        </trans-unit>
        <trans-unit id="3bb5142da6ee5443fb8a1f91f511fc41a8d23e27" translate="yes" xml:space="preserve">
          <source>I don't have a C compiler. How can I build my own Perl interpreter?</source>
          <target state="translated">Cコンパイラを持っていません。自分でPerlインタプリタを作るにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="d6d0389812dedc1090c3af8ee3195c2e1255c8d3" translate="yes" xml:space="preserve">
          <source>I foresee no problems with having multiple inheritance in your hierarchy of language classes. (As usual, however, Perl will complain bitterly if you have a cycle in the hierarchy: i.e., if any class is its own ancestor.)</source>
          <target state="translated">言語クラスの階層に複数の継承があっても問題はないと思います。(しかし、いつものように、Perl は、階層内にサイクルがある場合、つまり、どのクラスもそれ自身の祖先である場合には、激しく文句を言うでしょう)。</target>
        </trans-unit>
        <trans-unit id="371ea8fdbc8bb052c307098a6984a7c87ed2802d" translate="yes" xml:space="preserve">
          <source>I get an error when I run this from my shell (which happens to be bash). That may look like perl forgot it has a &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; function, but my shebang line is not the path to perl, so the shell runs the script, and I get the error.</source>
          <target state="translated">これを自分のシェル（たまたまbash）から実行すると、エラーが発生します。これはperlのように見えるかもしれませんが、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; 関数があることを忘れていましたが、私のシバン行はperlへのパスではないため、シェルがスクリプトを実行し、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3b40ca07783bb532ad8480c512cbc6f6a04c95d1" translate="yes" xml:space="preserve">
          <source>I get an error when I run this from my shell (which happens to be bash). That may look like perl forgot it has a &lt;code&gt;print()&lt;/code&gt; function, but my shebang line is not the path to perl, so the shell runs the script, and I get the error.</source>
          <target state="translated">これをシェル（たまたまbash）から実行すると、エラーが発生します。これは、perlが &lt;code&gt;print()&lt;/code&gt; 関数を持っていることを忘れたように見えるかもしれませんが、私のシバン行はperlへのパスではないため、シェルがスクリプトを実行し、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="25b36e7f52406231ec7c4381f27e5a02ba4d1de4" translate="yes" xml:space="preserve">
          <source>I grabbed the sources and tried to compile but gdbm/dynamic loading/malloc/linking/... failed. How do I make it work?</source>
          <target state="translated">ソースを掴んでコンパイルしようとしたのですが、gdbm/dynamic loading/malloc/linking/...が失敗しました。どうすればうまくいくのでしょうか?</target>
        </trans-unit>
        <trans-unit id="d3f27f69fc434f23222da72a1a4ed476958555fb" translate="yes" xml:space="preserve">
          <source>I have heard of one other type of firewall which requires a login to the firewall with an account, then a second login with &lt;code&gt;user@hostname&lt;/code&gt;. You can still use Net::FTP to traverse these firewalls, but a more manual approach must be taken, eg</source>
          <target state="translated">アカウントを使用してファイアウォールにログインし、次に &lt;code&gt;user@hostname&lt;/code&gt; @hostnameを使用して2回目のログインを行う必要があるもう1つのタイプのファイアウォールについて聞いたことがあります。Net :: FTPを使用してこれらのファイアウォールを通過することはできますが、より手動のアプローチをとる必要があります。</target>
        </trans-unit>
        <trans-unit id="12aeb2257dccbb467ef10e49ef5687a5f072930e" translate="yes" xml:space="preserve">
          <source>I have no clue what this does. Strips function prefixes?</source>
          <target state="translated">これが何をするのかさっぱりわかりません。関数の接頭辞を取り除く?</target>
        </trans-unit>
        <trans-unit id="0cb0121fc9974d9d1b5aed90c164d431509f7248" translate="yes" xml:space="preserve">
          <source>I have seen scripts call a method message, but cannot find it documented ?</source>
          <target state="translated">私はスクリプトがメソッドメッセージを呼び出すのを見たことがありますが、文書化されたそれを見つけることができませんか?</target>
        </trans-unit>
        <trans-unit id="fc30870b270d5fd5a0e0ca93284b0967a0e43a00" translate="yes" xml:space="preserve">
          <source>I have supposed that since this module is concerned with file I/O, almost all normal use of it will be heavily I/O bound. This means that the time to maintain complicated data structures inside the module will be dominated by the time to actually perform the I/O. When there was an opportunity to spend CPU time to avoid doing I/O, I usually tried to take it.</source>
          <target state="translated">このモジュールはファイルのI/Oに関係しているので、ほとんどすべての通常の使用は重くI/Oに縛られることを想定しています。つまり、モジュール内部の複雑なデータ構造を維持する時間が、実際にI/Oを行う時間に支配されることになる。I/OをしないためにCPUの時間を使う機会があったときは、普通にそれを取ろうとしていました。</target>
        </trans-unit>
        <trans-unit id="9f890badb47c01638de767ac6be14f492fbbfa01" translate="yes" xml:space="preserve">
          <source>I installed a Bundle and had a couple of fails. When I retried, everything resolved nicely. Can this be fixed to work on first try?</source>
          <target state="translated">私はバンドルをインストールしましたが、いくつか失敗しました。再試行したところ、すべてがきれいに解決しました。これは、最初の試みで動作するように修正することができますか?</target>
        </trans-unit>
        <trans-unit id="f93fb27a66a374179e4455b8d8985c2d226a8af1" translate="yes" xml:space="preserve">
          <source>I installed a new version of module X but CPAN keeps saying, I have the old version installed</source>
          <target state="translated">モジュールXの新しいバージョンをインストールしましたが、CPANは「古いバージョンがインストールされている」と言い続けています。</target>
        </trans-unit>
        <trans-unit id="ce465a8fc00712ba52e5306e95737f3b12576087" translate="yes" xml:space="preserve">
          <source>I know of no way to find out the state of popups</source>
          <target state="translated">ポップアップの状態を調べる方法を知らない</target>
        </trans-unit>
        <trans-unit id="50ca6fc19f7270831b580874499d55acf40e475f" translate="yes" xml:space="preserve">
          <source>I know of no way to find out the state of redirection of popups to the disk</source>
          <target state="translated">ポップアップのディスクへのリダイレクトの状態を調べる方法を知りません。</target>
        </trans-unit>
        <trans-unit id="74eeceb13c393c687a92a5cda3bd40599b660cd1" translate="yes" xml:space="preserve">
          <source>I lost track; what encoding is the internal format really?</source>
          <target state="translated">私は見失いました;内部フォーマットは本当にどのようなエンコーディングですか?</target>
        </trans-unit>
        <trans-unit id="d25ced27930e65857371f29ffd1a913f02b5e4b7" translate="yes" xml:space="preserve">
          <source>I love it when a plan comes together</source>
          <target state="translated">企みがまとまってくるのが好き</target>
        </trans-unit>
        <trans-unit id="606078fbab11616b11caaa1df541827c0df787a2" translate="yes" xml:space="preserve">
          <source>I maintain a mailing list on which I occasionally announce new versions of Memoize. The list is for announcements only, not discussion. To join, send an empty message to mjd-perl-memoize-request@Plover.com.</source>
          <target state="translated">私はメーリングリストを管理していて、たまに新バージョンの発表をしています。このメーリングリストは告知のためのもので、議論のためのものではありません。参加するには、mjd-perl-memoize-request@Plover.com まで空のメッセージを送ってください。</target>
        </trans-unit>
        <trans-unit id="8c678b32e1afc117e7298e7cd70848ce65ee6435" translate="yes" xml:space="preserve">
          <source>I need to tell prove to use my My::TAP::Harness. If My::TAP::Harness is on Perl's @INC include path I can</source>
          <target state="translated">My::TAP::Harnessを使用するために証明を伝える必要があります。My::TAP::HarnessがPerlの@INCインクルードパスにある場合は</target>
        </trans-unit>
        <trans-unit id="92c1a5ec60a557a8f6b6b470a96e90910a56e1c7" translate="yes" xml:space="preserve">
          <source>I pointed out that &lt;code&gt;Memoize&lt;/code&gt; uses a hash, and that looking up a number in the hash is necessarily going to take a lot longer than a single multiplication. There really is no way to speed up the &lt;code&gt;square&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; はハッシュを使用しており、ハッシュ内の数値を検索することは、単一の乗算よりもかなり長い時間がかかることを指摘しました。 &lt;code&gt;square&lt;/code&gt; 関数を高速化する方法は本当にありません。</target>
        </trans-unit>
        <trans-unit id="05b0f6d7121204753b37fe3a1f3d86b9576db3c7" translate="yes" xml:space="preserve">
          <source>I presume that it would be only the exceptional Web site that gets localized for English</source>
          <target state="translated">英語にローカライズされているのは、例外的なウェブサイトだけではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="44584b7f38a4c7c497d3af92b7cb4267fde694f9" translate="yes" xml:space="preserve">
          <source>I promised to give you 90% of the benefit with 10% of the details, and that means I left out 90% of the details. Now that you have an overview of the important parts, it should be easier to read the &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; manual page, which discusses 100% of the details.</source>
          <target state="translated">私はあなたに90％の利益を10％の詳細で与えると約束しました、そしてそれは私が90％の詳細を省いたことを意味します。重要な部分の概要が&lt;a href=&quot;perlref&quot;&gt;わかっ&lt;/a&gt;たので、100％詳細について説明しているperlrefのマニュアルページを読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="fe86a2ccd7bbbde333da23b987f2e2e4802f719a" translate="yes" xml:space="preserve">
          <source>I put a regular expression into $/ but it didn't work. What's wrong?</source>
          <target state="translated">正規表現を$/に入れてみましたが、うまくいきませんでした。何がいけないのでしょうか?</target>
        </trans-unit>
        <trans-unit id="73511fb1b7957dad066b5bf11010746dfb956b61" translate="yes" xml:space="preserve">
          <source>I recommend reading all of these:</source>
          <target state="translated">全部読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b7928600b482b60ec404a555ac7072bbe1486616" translate="yes" xml:space="preserve">
          <source>I say &quot;your portion of the stack&quot; above because PP code doesn't necessarily get the whole stack to itself: if your function calls another function, you'll only want to expose the arguments aimed for the called function, and not (necessarily) let it get at your own data. The way we do this is to have a &quot;virtual&quot; bottom-of-stack, exposed to each function. The mark stack keeps bookmarks to locations in the argument stack usable by each function. For instance, when dealing with a tied variable, (internally, something with &quot;P&quot; magic) Perl has to call methods for accesses to the tied variables. However, we need to separate the arguments exposed to the method to the argument exposed to the original function - the store or fetch or whatever it may be. Here's roughly how the tied &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; is implemented; see &lt;code&gt;av_push&lt;/code&gt; in</source>
          <target state="translated">上記の「スタックの一部」と言うのは、PPコードが必ずしもスタック全体をそれ自体に取得するわけではないためです。関数が別の関数を呼び出す場合、呼び出された関数に向けられた引数のみを公開し、（必ずしも）自分のデータを取得します。これを行う方法は、各関数に公開された「仮想」スタックの最下部を持つことです。マークスタックは、各関数で使用可能な引数スタック内の場所へのブックマークを保持します。たとえば、結合された変数（内部的には &quot;P&quot;マジックを持つもの）を処理する場合、Perlは結合された変数にアクセスするためのメソッドを呼び出す必要があります。ただし、メソッドに公開されている引数を元の関数（ストアまたはフェッチなど）に公開されている引数に分離する必要があります。ここに'sタイド &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 実装方法の概要。見る &lt;code&gt;av_push&lt;/code&gt; in</target>
        </trans-unit>
        <trans-unit id="3b74357799ff3a807572f0228d6475d4cbcdbf36" translate="yes" xml:space="preserve">
          <source>I say &quot;your portion of the stack&quot; above because PP code doesn't necessarily get the whole stack to itself: if your function calls another function, you'll only want to expose the arguments aimed for the called function, and not (necessarily) let it get at your own data. The way we do this is to have a &quot;virtual&quot; bottom-of-stack, exposed to each function. The mark stack keeps bookmarks to locations in the argument stack usable by each function. For instance, when dealing with a tied variable, (internally, something with &quot;P&quot; magic) Perl has to call methods for accesses to the tied variables. However, we need to separate the arguments exposed to the method to the argument exposed to the original function - the store or fetch or whatever it may be. Here's roughly how the tied &lt;code&gt;push&lt;/code&gt; is implemented; see &lt;code&gt;av_push&lt;/code&gt; in</source>
          <target state="translated">PPコードが必ずしもスタック全体をそれ自体に取得するとは限らないため、上記の「スタックの一部」と言います。関数が別の関数を呼び出す場合は、呼び出された関数を対象とした引数のみを公開し、（必然的に）自分のデータを取得させます。これを行う方法は、各関数に公開される「仮想」スタックの最下部を作成することです。マークスタックは、各関数で使用できる引数スタック内の場所へのブックマークを保持します。たとえば、タイ変数を処理する場合（内部的には「P」マジックを使用するもの）、Perlはタイ変数にアクセスするためのメソッドを呼び出す必要があります。ただし、メソッドに公開されている引数を、元の関数に公開されている引数（ストア、フェッチ、またはそれが何であれ）に分離する必要があります。ここに'■タイド &lt;code&gt;push&lt;/code&gt; がどのように実装されているか。見る &lt;code&gt;av_push&lt;/code&gt; in</target>
        </trans-unit>
        <trans-unit id="bd010707291df43195b163d13725276025549dad" translate="yes" xml:space="preserve">
          <source>I still don't get locking. I just want to increment the number in the file. How can I do this?</source>
          <target state="translated">まだロックがかかりません。ファイル内の数字をインクリメントしたいだけです。どうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="0c3fa205e2bf9a49a23f4b51209de0f9232902bf" translate="yes" xml:space="preserve">
          <source>I think it would help to give some concrete examples to make it easier to understand the API. Of course I agree that the API has to be concise, but since there is no second document that is more of a guide, I think that it'd make it easier to start with the doc which is an API, but has examples in it in places where things are unclear, to a person who is not a PerlIO guru (yet).</source>
          <target state="translated">APIを理解しやすくするためには、具体的な例を示した方が良いと思います。もちろん、APIが簡潔でなければならないことには同意しますが、ガイド的な第二のドキュメントがないので、PerlIOの達人ではない(まだ)人には、APIではあるが、わからないところに例が載っているドキュメントから始めた方が楽だと思います。</target>
        </trans-unit>
        <trans-unit id="09ffd110a6022c3eacd4a506a275e7c45f272e0d" translate="yes" xml:space="preserve">
          <source>I think that keys as lexicon values makes the completed lexicon entries more readable:</source>
          <target state="translated">キーをレキシコン値にすることで、完成されたレキシコンエントリがより読みやすくなると思います。</target>
        </trans-unit>
        <trans-unit id="794953983b61d639901830159ca78a40665adca3" translate="yes" xml:space="preserve">
          <source>I used 'lynx' to fetch a file, but its contents is all wrong!</source>
          <target state="translated">lynx'を使ってファイルを取得したのですが、中身が全部間違っています。</target>
        </trans-unit>
        <trans-unit id="14dcb94db4c292bdfbf0b5c851ca4df4a4bf4c31" translate="yes" xml:space="preserve">
          <source>I want to clean up my mess, and install a new perl along with all modules I have. How do I go about it?</source>
          <target state="translated">私は、私の混乱をきれいにして、私が持っているすべてのモジュールと一緒に新しいperlをインストールしたいと思います。どうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="3ae9e2275243ec65b397ebef16d91a7d431148ac" translate="yes" xml:space="preserve">
          <source>I want to log my test results in a database so I can track them over time. To do this I override the summary method in TAP::Harness. I start with a simple prototype that dumps the results as a YAML document:</source>
          <target state="translated">テスト結果をデータベースに記録して、時間の経過とともに追跡できるようにしたいと思います。これを行うために、TAP::Harness の summary メソッドをオーバーライドします。結果をYAMLドキュメントとしてダンプするシンプルなプロトタイプから始めます。</target>
        </trans-unit>
        <trans-unit id="0c2d698fc768ffb8cd382c1370e66993c67187ee" translate="yes" xml:space="preserve">
          <source>I {changed directory, modified my environment} in a perl script. How come the change disappeared when I exited the script? How do I get my changes to be visible?</source>
          <target state="translated">perlスクリプトで{ディレクトリの変更、環境の変更}をしました。スクリプトを終了すると変更が消えてしまいました。どうすれば変更内容を表示させることができますか?</target>
        </trans-unit>
        <trans-unit id="8d4b0ae21d1479e72399aeb9631081d458e4ae16" translate="yes" xml:space="preserve">
          <source>I&amp;lt;bar&amp;gt;</source>
          <target state="translated">I&amp;lt;bar&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3bb667cf6d485cf87366e4fa5d3fb7627b160f2b" translate="yes" xml:space="preserve">
          <source>I'll define the</source>
          <target state="translated">を定義します。</target>
        </trans-unit>
        <trans-unit id="5cc9daab4dbfbc15ce11a2a71cb8dfe5485782e2" translate="yes" xml:space="preserve">
          <source>I'm afraid that we're not quite through with the alignment catch yet. The hydra raises another ugly head when you pack arrays of structures:</source>
          <target state="translated">アライメントキャッチは まだ終わっていないようだ あなたが構造物の配列を詰めるとき、ヒドラは別の醜い頭を上げる。</target>
        </trans-unit>
        <trans-unit id="f883cc87b6710df9317db1561fdc26ada281ddbe" translate="yes" xml:space="preserve">
          <source>I'm frequently irritated with the CPAN shell's inability to help me select a good mirror.</source>
          <target state="translated">CPANシェルのいい鏡選びの参考にならないことにイライラすることが多々あります。</target>
        </trans-unit>
        <trans-unit id="70a3ef0517de91698e88a243cc2feee12ba385a3" translate="yes" xml:space="preserve">
          <source>I'm having trouble matching over more than one line. What's wrong?</source>
          <target state="translated">複数行に渡ってマッチングがうまくいかない。何か問題があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="8b9d03c166b0dec7e59491eb481c804d58495438" translate="yes" xml:space="preserve">
          <source>I'm not totally sure that locale names map satisfactorily to language tags. Think REAL hard about how you use this. YOU HAVE BEEN WARNED.</source>
          <target state="translated">ロケール名と言語タグがうまく対応しているかどうかはよくわかりません。これをどのように使うのか、よく考えてみてください。警告します。</target>
        </trans-unit>
        <trans-unit id="73daa2b6bdc84827d06ade0cf82b30946cb9ce40" translate="yes" xml:space="preserve">
          <source>I'm offering this port &quot;as is&quot;. You can ask me questions, but I can't guarantee I'll be able to answer them. There are some excellent books available on the Perl language; consult a book seller.</source>
          <target state="translated">私はこのポートを「現状のまま」提供しています。私に質問をすることはできますが、私がそれに答えられるとは保証できません。Perl 言語についての優れた本がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="4357a589e4e3b7a00e21bb3c83ca3b640b5e0ab8" translate="yes" xml:space="preserve">
          <source>I'm ok, you're not ok.</source>
          <target state="translated">私は大丈夫、あなたは大丈夫じゃない。</target>
        </trans-unit>
        <trans-unit id="108bd315655f1ba897c01059e340ad678da6e2f4" translate="yes" xml:space="preserve">
          <source>I'm sure most of us have seen code which looks like, (or worse than), this:</source>
          <target state="translated">私たちのほとんどは、これに似た(またはそれ以上に悪い)コードを見たことがあるのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="2f2f2a41a5729ebdf99d33e9a94c056bfe6a7622" translate="yes" xml:space="preserve">
          <source>I'm using WinZip, or some other non-POSIX client, and files are not being extracted properly!</source>
          <target state="translated">WinZipなどのPOSIX以外のクライアントを使っているのですが、ファイルが正しく展開されません!</target>
        </trans-unit>
        <trans-unit id="76c00e4567fd7637d5e9878ed4c5f66e616b88b8" translate="yes" xml:space="preserve">
          <source>I've considered making all the above functions that output language tags return all those tags strictly in lowercase. Having all your language tags in lowercase does make some things easier. But you might as well just lowercase as you like, or call &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; where appropriate.</source>
          <target state="translated">言語タグを出力する上記のすべての関数が、すべてのタグを厳密に小文字で返すようにすることを検討しました。すべての言語タグを小文字にすると、いくつかのことが簡単になります。ただし、必要に応じて小文字にするか、 &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; 呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="88c5fcd7802546df837a3bf463ca41dcbe3c282a" translate="yes" xml:space="preserve">
          <source>I've read perlembed, perlguts, etc., but I can't embed perl in my C program; what am I doing wrong?</source>
          <target state="translated">perlembedやperlgutsなどを読んだのですが、Cプログラムにperlを埋め込むことができません。</target>
        </trans-unit>
        <trans-unit id="4dfe11ac55007ac0949167eaeb2efbe8ea5b1f5d" translate="yes" xml:space="preserve">
          <source>I/O</source>
          <target state="translated">I/O</target>
        </trans-unit>
        <trans-unit id="c880785e491d41fc494e4fbfcd55e995f2687586" translate="yes" xml:space="preserve">
          <source>I/O Operators</source>
          <target state="translated">I/Oオペレータ</target>
        </trans-unit>
        <trans-unit id="1bd45ae6f90a489462015faa36411b1a7a88b1e2" translate="yes" xml:space="preserve">
          <source>I/O control operations for disk devices. Used in the &lt;code&gt;$uIoControlCode&lt;/code&gt; argument to &lt;code&gt;DeviceIoControl&lt;/code&gt;. Most of these are to be used on physical drive devices like &lt;code&gt;&quot;//./PhysicalDrive0&quot;&lt;/code&gt;. However, &lt;code&gt;IOCTL_DISK_GET_PARTITION_INFO&lt;/code&gt; and &lt;code&gt;IOCTL_DISK_SET_PARTITION_INFO&lt;/code&gt; should only be used on a single-partition device like &lt;code&gt;&quot;//./C:&quot;&lt;/code&gt;. Also, &lt;code&gt;IOCTL_DISK_GET_MEDIA_TYPES&lt;/code&gt; is documented as having been superseded but is still useful when used on a floppy device like &lt;code&gt;&quot;//./A:&quot;&lt;/code&gt;.</source>
          <target state="translated">ディスクデバイスのI / O制御操作。 &lt;code&gt;DeviceIoControl&lt;/code&gt; の &lt;code&gt;$uIoControlCode&lt;/code&gt; 引数で使用されます。これらのほとんどは、 &lt;code&gt;&quot;//./PhysicalDrive0&quot;&lt;/code&gt; などの物理ドライブデバイスで使用されます。ただし、 &lt;code&gt;IOCTL_DISK_GET_PARTITION_INFO&lt;/code&gt; および &lt;code&gt;IOCTL_DISK_SET_PARTITION_INFO&lt;/code&gt; は、 &lt;code&gt;&quot;//./C:&quot;&lt;/code&gt; などの単一パーティションデバイスでのみ使用する必要があります。また、 &lt;code&gt;IOCTL_DISK_GET_MEDIA_TYPES&lt;/code&gt; は置き換えられたものとして文書化されていますが、 &lt;code&gt;&quot;//./A:&quot;&lt;/code&gt; などのフロッピーデバイスで使用する場合は引き続き役立ちます。</target>
        </trans-unit>
        <trans-unit id="0a4882a6a30b4583bba173c6035cc140752a4ec0" translate="yes" xml:space="preserve">
          <source>I/O control operations for generic storage devices. Used in the &lt;code&gt;$uIoControlCode&lt;/code&gt; argument to &lt;code&gt;DeviceIoControl&lt;/code&gt;. Includes &lt;code&gt;IOCTL_STORAGE_CHECK_VERIFY&lt;/code&gt;, &lt;code&gt;IOCTL_STORAGE_MEDIA_REMOVAL&lt;/code&gt;, &lt;code&gt;IOCTL_STORAGE_EJECT_MEDIA&lt;/code&gt;, &lt;code&gt;IOCTL_STORAGE_LOAD_MEDIA&lt;/code&gt;, &lt;code&gt;IOCTL_STORAGE_RESERVE&lt;/code&gt;, &lt;code&gt;IOCTL_STORAGE_RELEASE&lt;/code&gt;, &lt;code&gt;IOCTL_STORAGE_FIND_NEW_DEVICES&lt;/code&gt;, and &lt;code&gt;IOCTL_STORAGE_GET_MEDIA_TYPES&lt;/code&gt;.</source>
          <target state="translated">一般的なストレージデバイスのI / O制御操作。 &lt;code&gt;DeviceIoControl&lt;/code&gt; の &lt;code&gt;$uIoControlCode&lt;/code&gt; 引数で使用されます。含ま &lt;code&gt;IOCTL_STORAGE_CHECK_VERIFY&lt;/code&gt; 、 &lt;code&gt;IOCTL_STORAGE_MEDIA_REMOVAL&lt;/code&gt; 、 &lt;code&gt;IOCTL_STORAGE_EJECT_MEDIA&lt;/code&gt; 、 &lt;code&gt;IOCTL_STORAGE_LOAD_MEDIA&lt;/code&gt; 、 &lt;code&gt;IOCTL_STORAGE_RESERVE&lt;/code&gt; 、 &lt;code&gt;IOCTL_STORAGE_RELEASE&lt;/code&gt; 、 &lt;code&gt;IOCTL_STORAGE_FIND_NEW_DEVICES&lt;/code&gt; 、および &lt;code&gt;IOCTL_STORAGE_GET_MEDIA_TYPES&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="1fa930eaf91e1f81994700657728c3a757afb3cf" translate="yes" xml:space="preserve">
          <source>I/O flow (the actual 5 minute tutorial)</source>
          <target state="translated">I/Oの流れ(実際の5分間のチュートリアル</target>
        </trans-unit>
        <trans-unit id="ae9cf1f9e1227f9dff6b41ea1e5f80cc2ae055d8" translate="yes" xml:space="preserve">
          <source>I/O layer</source>
          <target state="translated">入出力層</target>
        </trans-unit>
        <trans-unit id="46fc5fcf49da9b0ec975af77958aa41975a1fe45" translate="yes" xml:space="preserve">
          <source>I/O redirection and backgrounding</source>
          <target state="translated">I/Oリダイレクションとバックグラウンド</target>
        </trans-unit>
        <trans-unit id="30d63bddfa4212ccce60957ddceaf4fa37417d27" translate="yes" xml:space="preserve">
          <source>I/O timeout value</source>
          <target state="translated">入出力タイムアウト値</target>
        </trans-unit>
        <trans-unit id="8571fe32abe041d9dce3d7d7c47b858f248fa514" translate="yes" xml:space="preserve">
          <source>I18N AND L10N</source>
          <target state="translated">I18NとL10N</target>
        </trans-unit>
        <trans-unit id="e6b903dcac2bbc1b40e43d5e333946755137d36f" translate="yes" xml:space="preserve">
          <source>I18N::Charset</source>
          <target state="translated">I18N::Charset</target>
        </trans-unit>
        <trans-unit id="de5d730fbdbbf0183cf0f4683f1a73058ef3481c" translate="yes" xml:space="preserve">
          <source>I18N::Collate</source>
          <target state="translated">I18N::Collate</target>
        </trans-unit>
        <trans-unit id="01ad2dd6dde49d7565416cd97f4d499093f9d249" translate="yes" xml:space="preserve">
          <source>I18N::Collate - compare 8-bit scalar data according to the current locale</source>
          <target state="translated">I18N::Collate-現在のロケールに応じて 8 ビットのスカラーデータを比較する</target>
        </trans-unit>
        <trans-unit id="e106875b328699ace6767aa9c5ecab5bca3b0bd8" translate="yes" xml:space="preserve">
          <source>I18N::LangTags</source>
          <target state="translated">I18N::LangTags</target>
        </trans-unit>
        <trans-unit id="169f8297167d0e993d7316faae039b48a7c3bab1" translate="yes" xml:space="preserve">
          <source>I18N::LangTags - functions for dealing with RFC3066-style language tags</source>
          <target state="translated">I18N::LangTags-RFC3066 形式の言語タグを扱うための関数</target>
        </trans-unit>
        <trans-unit id="921275b7d99f260593561350c7678a20816444ed" translate="yes" xml:space="preserve">
          <source>I18N::LangTags::Detect</source>
          <target state="translated">I18N::LangTags::Detect</target>
        </trans-unit>
        <trans-unit id="778875cc577b876aab7ab802d4648cdcd4ee6cae" translate="yes" xml:space="preserve">
          <source>I18N::LangTags::Detect - detect the user's language preferences</source>
          <target state="translated">I18N::LangTags::Detect-ユーザの言語設定を検出する</target>
        </trans-unit>
        <trans-unit id="c04ea1622f377702e175508a3a481907575a2f47" translate="yes" xml:space="preserve">
          <source>I18N::LangTags::List</source>
          <target state="translated">I18N::LangTags::List</target>
        </trans-unit>
        <trans-unit id="020bb812c335fc278093b15a03a292e40918c844" translate="yes" xml:space="preserve">
          <source>I18N::LangTags::List -- tags and names for human languages</source>
          <target state="translated">I18N::LangTags::List --人間の言語のタグと名前</target>
        </trans-unit>
        <trans-unit id="e3646198e54c82833384221bb49e8cf11f385f8f" translate="yes" xml:space="preserve">
          <source>I18N::Langinfo</source>
          <target state="translated">I18N::Langinfo</target>
        </trans-unit>
        <trans-unit id="75f77bed8de0aee0770843a55893169b79d25155" translate="yes" xml:space="preserve">
          <source>I18N::Langinfo - query locale information</source>
          <target state="translated">I18N::Langinfo-ロケール情報を問い合わせる</target>
        </trans-unit>
        <trans-unit id="fde9493a25e191231f11e09ab4dbdd30b2b2a8bf" translate="yes" xml:space="preserve">
          <source>I18N:Collate obsolete</source>
          <target state="translated">I18N:廃止されたものを照合する</target>
        </trans-unit>
        <trans-unit id="0afef78a7afa599e29cd712fed951b6314ade53c" translate="yes" xml:space="preserve">
          <source>I18n and l10n</source>
          <target state="translated">I18nとl10n</target>
        </trans-unit>
        <trans-unit id="3886f65f7123288c1155f83462ecaa6186be5aba" translate="yes" xml:space="preserve">
          <source>I64 (8.2 and later)</source>
          <target state="translated">I64 (8.2以降)</target>
        </trans-unit>
        <trans-unit id="f7d467a87245290159a1b6af42928666730653f6" translate="yes" xml:space="preserve">
          <source>IANA</source>
          <target state="translated">IANA</target>
        </trans-unit>
        <trans-unit id="0e13c62333772940b082221be7ca7762de31a069" translate="yes" xml:space="preserve">
          <source>IBM XL C for AIX</source>
          <target state="translated">IBM XL C for AIX</target>
        </trans-unit>
        <trans-unit id="c8afdae11327e149f5501c448b30becf77bc4954" translate="yes" xml:space="preserve">
          <source>IBM XL C/C++ for AIX</source>
          <target state="translated">IBM XL C/C++for AIX</target>
        </trans-unit>
        <trans-unit id="90317bc062fe454cff88014258aea7e36e9b3afc" translate="yes" xml:space="preserve">
          <source>IBM calls its implementation of long doubles 128-bit, but it is not the IEEE 128-bit (&quot;quadruple precision&quot;) which would give 116 bit of mantissa (nor it is implemented in hardware), instead it's a special software implementation called &quot;double-double&quot;, which gives 106 bits of mantissa.</source>
          <target state="translated">IBMは、長いダブルスのその実装を128ビットと呼んでいますが、それは(また、それはハードウェアで実装されていません)マンティッサの116ビットを与えるであろうIEEE 128ビット(&quot;四倍精度&quot;)ではなく、代わりにそれはマンティッサの106ビットを与える &quot;ダブルダブル &quot;と呼ばれる特殊なソフトウェア実装です。</target>
        </trans-unit>
        <trans-unit id="896c500f28ef7df0fbbd0268cb9652b7cfe0014c" translate="yes" xml:space="preserve">
          <source>IBM uses the AIX system Perl (V5.6.0 on AIX 5.1 and V5.8.2 on AIX 5.2 / 5.3 and 6.1; V5.8.8 on AIX 5.3 TL11 and AIX 6.1 TL4; V5.10.1 on AIX 7.1) for some AIX system scripts. If you switch the links in /usr/bin from the AIX system Perl (/usr/opt/perl5) to the newly build Perl then you get the same features as with the IBM AIX system Perl if the threaded options are used.</source>
          <target state="translated">IBM は、いくつかの AIX システムスクリプトに AIX システム Perl (V5.6.0 on AIX 5.1 and V5.8.2 on AIX 5.2/5.3 and 6.1;V5.8.8 on AIX 5.3 TL11 and AIX 6.1 TL4;V5.10.1 on AIX 7.1)を使用しています。/usr/bin のリンクを AIX システム Perl (/usr/opt/perl5)から新しくビルドされた Perl に切り替えると、スレッドオプションが使用されている場合、IBM AIX システム Perl と同じ機能を得ることができます。</target>
        </trans-unit>
        <trans-unit id="ade9d724c5b212d6e78013557f35ac5c64927377" translate="yes" xml:space="preserve">
          <source>ICU Character Mapping Tables &lt;a href=&quot;http://site.icu-project.org/charts/charset&quot;&gt;http://site.icu-project.org/charts/charset&lt;/a&gt;</source>
          <target state="translated">ICU文字マッピングテーブル&lt;a href=&quot;http://site.icu-project.org/charts/charset&quot;&gt;http://site.icu-project.org/charts/charset&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92d0be3756020c7fb70f5f8d43b6e18e96de1472" translate="yes" xml:space="preserve">
          <source>ICU Home Page &lt;a href=&quot;http://www.icu-project.org/&quot;&gt;http://www.icu-project.org/&lt;/a&gt;</source>
          <target state="translated">ICUホームページ&lt;a href=&quot;http://www.icu-project.org/&quot;&gt;http://www.icu-project.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4b3a4d066585cb49384b262b020e538f42a1f2ef" translate="yes" xml:space="preserve">
          <source>ICU:Conversion Data &lt;a href=&quot;http://www.icu-project.org/userguide/conversion-data.html&quot;&gt;http://www.icu-project.org/userguide/conversion-data.html&lt;/a&gt;</source>
          <target state="translated">ICU：変換データ&lt;a href=&quot;http://www.icu-project.org/userguide/conversion-data.html&quot;&gt;http://www.icu-project.org/userguide/conversion-data.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="46c5f048dbe4176fe265d2a79feb829754221b1e" translate="yes" xml:space="preserve">
          <source>IDENTIFYING CHARACTER CODE SETS</source>
          <target state="translated">キャラクターコードセットの識別</target>
        </trans-unit>
        <trans-unit id="98eebf3bdf415d089af03ec0debc7c66f797a900" translate="yes" xml:space="preserve">
          <source>IETF Policy on Character Sets and Languages</source>
          <target state="translated">しょうもじセットおよび言語に関するIETFポリシー</target>
        </trans-unit>
        <trans-unit id="db4d48e5feaf920779dd2373b4efffa265df836a" translate="yes" xml:space="preserve">
          <source>IFS access</source>
          <target state="translated">アイエフエスアクセス</target>
        </trans-unit>
        <trans-unit id="6a5d66d70494ee5ff5a453f224b81868447c393b" translate="yes" xml:space="preserve">
          <source>IMPLEMENTATION</source>
          <target state="translated">IMPLEMENTATION</target>
        </trans-unit>
        <trans-unit id="282613097967896b3e57bca75eb0bce558486a26" translate="yes" xml:space="preserve">
          <source>IMPLEMENTATION DETAILS</source>
          <target state="translated">実装の詳細</target>
        </trans-unit>
        <trans-unit id="0e35eae7c0731d3856fc41389b70ba2d34677ec0" translate="yes" xml:space="preserve">
          <source>IMPLEMENTATION NOTE</source>
          <target state="translated">実装ノート</target>
        </trans-unit>
        <trans-unit id="00f6ac93461571c87bf08a0fa480109344a9be63" translate="yes" xml:space="preserve">
          <source>IMPLICIT LOADING</source>
          <target state="translated">インプリシットローディング</target>
        </trans-unit>
        <trans-unit id="2af61b8a92b859239b57341d2094b6ce58292a8a" translate="yes" xml:space="preserve">
          <source>IMPORTANT NOTE 2: Attempting to bypass the normal stringification rules by manually applying &lt;a href=&quot;version#numify%28%29&quot;&gt;numify()&lt;/a&gt; and &lt;a href=&quot;version#normal%28%29&quot;&gt;normal()&lt;/a&gt; will sometimes yield surprising results:</source>
          <target state="translated">重要な注意2：&lt;a href=&quot;version#numify%28%29&quot;&gt;numify（）&lt;/a&gt;と&lt;a href=&quot;version#normal%28%29&quot;&gt;normal（）&lt;/a&gt;を手動で適用して通常の文字列化ルールをバイパスしようとすると、驚くべき結果が生じることがあります。</target>
        </trans-unit>
        <trans-unit id="d100fb60d3feed237cfa4b32f5da84abc315f27f" translate="yes" xml:space="preserve">
          <source>IMPORTANT NOTE: As shown above, if your Decimal version contains more than 3 significant digits after the decimal place, it will be split on each multiple of 3, so 1.0003 is equivalent to v1.0.300, due to the need to remain compatible with Perl's own 5.005_03 == 5.5.30 interpretation. Any trailing zeros are ignored for mathematical comparison purposes.</source>
          <target state="translated">重要な注意:上記のように、Decimal のバージョンで小数点以下に 3 桁以上の数字が含まれている場合、3 の倍数ごとに分割されますので、1.0003 は v1.0.300 と同等です。最後のゼロは数学的な比較のために無視されます。</target>
        </trans-unit>
        <trans-unit id="5d6d142ce7a912c87993ee95b67742ac2fb602f1" translate="yes" xml:space="preserve">
          <source>IMPORTANT NOTE: There is one exceptional cases shown in the above table where the &quot;initializer&quot; is not stringwise equivalent to the stringified representation. If you use the &lt;code&gt;qv&lt;/code&gt;() operator on a version without a leading 'v' &lt;b&gt;and&lt;/b&gt; with only a single decimal place, the stringified output will have a leading 'v', to preserve the sense. See the &lt;a href=&quot;#qv%28%29&quot;&gt;&quot;qv()&quot;&lt;/a&gt; operator for more details.</source>
          <target state="translated">重要な注意：上記の表に示されている例外的なケースが1つあり、「初期化子」は文字列化された表現と文字列的に同等ではありません。あなたが使用している場合は &lt;code&gt;qv&lt;/code&gt; 大手「V」なしバージョンの（）演算子を&lt;b&gt;して&lt;/b&gt;、単一の小数点以下の場所で、文字列化出力は感覚を維持するために、主要な「V」を持つことになります。詳細については、&lt;a href=&quot;#qv%28%29&quot;&gt;「qv（）」&lt;/a&gt;演算子を参照してください。</target>
        </trans-unit>
        <trans-unit id="bb759641a6b8b6611a890056cf82c280511d2e9e" translate="yes" xml:space="preserve">
          <source>IMPORTANT NOTE: This may mean that code which searches for a specific string (to determine whether a given module is available) may need to be changed. It is always better to use the built-in comparison implicit in &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt;, rather than manually poking at &lt;code&gt;class-&amp;gt;VERSION&lt;/code&gt; and then doing a comparison yourself.</source>
          <target state="translated">重要な注意：これは、特定の文字列を検索するコード（特定のモジュールが使用可能かどうかを判断するため）を変更する必要がある場合があることを意味する場合があります。 &lt;code&gt;class-&amp;gt;VERSION&lt;/code&gt; を手動で突いてから自分で比較するよりも、 &lt;code&gt;use&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; に暗黙的に組み込まれている比較を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="926527594f94772fcf38d60a2b632b1bb4c3c38c" translate="yes" xml:space="preserve">
          <source>IMPORTANT!</source>
          <target state="translated">IMPORTANT!</target>
        </trans-unit>
        <trans-unit id="c2e68d710cae68fae1b4d1132f818132a6f1837f" translate="yes" xml:space="preserve">
          <source>IMPORTANT: if you use this &lt;code&gt;-S&lt;/code&gt; switch, be sure to delete the CONFIG environment variable before running the script:</source>
          <target state="translated">重要：この &lt;code&gt;-S&lt;/code&gt; スイッチを使用する場合は、スクリプトを実行する前に、CONFIG環境変数を必ず削除してください。</target>
        </trans-unit>
        <trans-unit id="8d0c22f22ac148bf746659a76f51a0cce8f4070e" translate="yes" xml:space="preserve">
          <source>IMPORTS</source>
          <target state="translated">IMPORTS</target>
        </trans-unit>
        <trans-unit id="7696e648752c3c28012375bdb960a19fe39b8205" translate="yes" xml:space="preserve">
          <source>IMPORTS THE FUNCTIONS</source>
          <target state="translated">IMPORTS THE FUNCTIONS</target>
        </trans-unit>
        <trans-unit id="6a09657af85954f963dea9fb1156c8ea7994677c" translate="yes" xml:space="preserve">
          <source>IN6ADDR_ANY, IN6ADDR_LOOPBACK</source>
          <target state="translated">IN6ADDR_ANY、IN6ADDR_LOOPBACK</target>
        </trans-unit>
        <trans-unit id="8b4b83ea115334b0957635d43569bbc4350f1369" translate="yes" xml:space="preserve">
          <source>INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_NONE</source>
          <target state="translated">INADDR_ANY,INADDR_BROADCAST,INADDR_LOOPBACK,INADDR_NONE</target>
        </trans-unit>
        <trans-unit id="ff3c82a6fc602d03a66e45a7aa9a2ebf5c59e91e" translate="yes" xml:space="preserve">
          <source>INC</source>
          <target state="translated">INC</target>
        </trans-unit>
        <trans-unit id="3c49bdd8d8e33e31f0c17fbcb306d09e8c131ead" translate="yes" xml:space="preserve">
          <source>INCLUDE_EXT</source>
          <target state="translated">INCLUDE_EXT</target>
        </trans-unit>
        <trans-unit id="648fb0ddc69c6bf59cfae2b4b521d2eea5687df1" translate="yes" xml:space="preserve">
          <source>INCREMENTAL PARSING</source>
          <target state="translated">インクリメンタルパーシング</target>
        </trans-unit>
        <trans-unit id="cbe356b54ea95780c909073ac988ee31715e5615" translate="yes" xml:space="preserve">
          <source>INDIVIDUAL RESULTS</source>
          <target state="translated">個人の結果</target>
        </trans-unit>
        <trans-unit id="87d0fcde0a601e06d986c8740283892296dbb885" translate="yes" xml:space="preserve">
          <source>INHERITANCE</source>
          <target state="translated">INHERITANCE</target>
        </trans-unit>
        <trans-unit id="bc46a4e0420d357db7bfbcb7b5fcbc613dc48c1b" translate="yes" xml:space="preserve">
          <source>INIT</source>
          <target state="translated">INIT</target>
        </trans-unit>
        <trans-unit id="59990b467aae79667fd3fe1156086a0a147fb594" translate="yes" xml:space="preserve">
          <source>INIT HOOKS</source>
          <target state="translated">イニットフック</target>
        </trans-unit>
        <trans-unit id="c335a27a082cc8d17dd36dc0eda3086cb0c9baaa" translate="yes" xml:space="preserve">
          <source>INSTALL</source>
          <target state="translated">INSTALL</target>
        </trans-unit>
        <trans-unit id="bcfd83b3c8dcdbc242801037551b58c708467a92" translate="yes" xml:space="preserve">
          <source>INSTALL PERL ON CYGWIN</source>
          <target state="translated">CYGWINにPERLをインストール</target>
        </trans-unit>
        <trans-unit id="b3642e83164b0035941a17dcaac1e8efc8ccc9e9" translate="yes" xml:space="preserve">
          <source>INSTALLARCHLIB</source>
          <target state="translated">INSTALLARCHLIB</target>
        </trans-unit>
        <trans-unit id="9d09dba09f4e15504911bf4a5e67189762904dd8" translate="yes" xml:space="preserve">
          <source>INSTALLATION</source>
          <target state="translated">INSTALLATION</target>
        </trans-unit>
        <trans-unit id="e5f21f5cfe15896cc57e4f66a25de31e67f38e54" translate="yes" xml:space="preserve">
          <source>INSTALLBIN</source>
          <target state="translated">INSTALLBIN</target>
        </trans-unit>
        <trans-unit id="a8dc0b332a8b3a30e1a3bfbf06a9ca622fa8b35a" translate="yes" xml:space="preserve">
          <source>INSTALLDIRS</source>
          <target state="translated">INSTALLDIRS</target>
        </trans-unit>
        <trans-unit id="16fff6f9fc1411630b91667c135606baff1eac91" translate="yes" xml:space="preserve">
          <source>INSTALLING PERL IN OPENVOS</source>
          <target state="translated">OPENVOSへのPERLのインストール</target>
        </trans-unit>
        <trans-unit id="7f052cc6553ecac6e3df0d0b879d905d556954d5" translate="yes" xml:space="preserve">
          <source>INSTALLMAN1DIR</source>
          <target state="translated">INSTALLMAN1DIR</target>
        </trans-unit>
        <trans-unit id="0e681f5032851ed30a543a900ac579e142841900" translate="yes" xml:space="preserve">
          <source>INSTALLMAN3DIR</source>
          <target state="translated">INSTALLMAN3DIR</target>
        </trans-unit>
        <trans-unit id="5933a08af3c7bebbbe6c3b67d67acaea7b113126" translate="yes" xml:space="preserve">
          <source>INSTALLPRIVLIB</source>
          <target state="translated">INSTALLPRIVLIB</target>
        </trans-unit>
        <trans-unit id="0c644278acf33a9a81880f74ea11f3e383631b34" translate="yes" xml:space="preserve">
          <source>INSTALLSCRIPT</source>
          <target state="translated">INSTALLSCRIPT</target>
        </trans-unit>
        <trans-unit id="54fcbd0bdcbf148e12836065934bc12897303524" translate="yes" xml:space="preserve">
          <source>INSTALLSITEARCH</source>
          <target state="translated">INSTALLSITEARCH</target>
        </trans-unit>
        <trans-unit id="89655a121385e7efe5f2cdc5a6d3add0eebb0223" translate="yes" xml:space="preserve">
          <source>INSTALLSITEBIN</source>
          <target state="translated">INSTALLSITEBIN</target>
        </trans-unit>
        <trans-unit id="933a51e99c70b3ad9b7b202ddc1482a7c0f44d60" translate="yes" xml:space="preserve">
          <source>INSTALLSITELIB</source>
          <target state="translated">INSTALLSITELIB</target>
        </trans-unit>
        <trans-unit id="df84db65783bcfd646d621819ed5a53534ed4081" translate="yes" xml:space="preserve">
          <source>INSTALLSITELIB=i:\perl\lib</source>
          <target state="translated">INSTALLSITELIB=i:\perl\lib</target>
        </trans-unit>
        <trans-unit id="26ed8090363cf70046fb05d12bd5b73ad1feec3a" translate="yes" xml:space="preserve">
          <source>INSTALLSITEMAN1DIR</source>
          <target state="translated">INSTALLSITEMAN1DIR</target>
        </trans-unit>
        <trans-unit id="1df2b4517a777a7e926d6a7992d6ee2806c0c778" translate="yes" xml:space="preserve">
          <source>INSTALLSITEMAN3DIR</source>
          <target state="translated">INSTALLSITEMAN3DIR</target>
        </trans-unit>
        <trans-unit id="ce3a6803fc962f8355f8305d4755ca6b09a83fff" translate="yes" xml:space="preserve">
          <source>INSTALLSITESCRIPT</source>
          <target state="translated">INSTALLSITESCRIPT</target>
        </trans-unit>
        <trans-unit id="8fee1b3f92888427d17dfd354d028dcbcbc0ee9c" translate="yes" xml:space="preserve">
          <source>INSTALLVENDORARCH</source>
          <target state="translated">INSTALLVENDORARCH</target>
        </trans-unit>
        <trans-unit id="8b9cc74bd95a4dcfb94e960cfd6efdacf510a333" translate="yes" xml:space="preserve">
          <source>INSTALLVENDORBIN</source>
          <target state="translated">INSTALLVENDORBIN</target>
        </trans-unit>
        <trans-unit id="c8fe30115e9bf08d3e86930e4100d4ce2c1a6393" translate="yes" xml:space="preserve">
          <source>INSTALLVENDORLIB</source>
          <target state="translated">INSTALLVENDORLIB</target>
        </trans-unit>
        <trans-unit id="e80dab2a62b5932a7c992c9d56713d5afabb5666" translate="yes" xml:space="preserve">
          <source>INSTALLVENDORMAN1DIR</source>
          <target state="translated">INSTALLVENDORMAN1DIR</target>
        </trans-unit>
        <trans-unit id="635ef78bb9259eec612010b989a90be923912f75" translate="yes" xml:space="preserve">
          <source>INSTALLVENDORMAN3DIR</source>
          <target state="translated">INSTALLVENDORMAN3DIR</target>
        </trans-unit>
        <trans-unit id="64618110e901d3a5a0394dcdad64f11844b60749" translate="yes" xml:space="preserve">
          <source>INSTALLVENDORSCRIPT</source>
          <target state="translated">INSTALLVENDORSCRIPT</target>
        </trans-unit>
        <trans-unit id="f1bd7855c675170fd5743049f5030b83e6d9486c" translate="yes" xml:space="preserve">
          <source>INSTALL_BASE</source>
          <target state="translated">INSTALL_BASE</target>
        </trans-unit>
        <trans-unit id="972644501aef360867a4520d3945803529f2cc3e" translate="yes" xml:space="preserve">
          <source>INSTALL_BASE can be passed into Makefile.PL to change where your module will be installed. INSTALL_BASE is more like what everyone else calls &quot;prefix&quot; than PREFIX is.</source>
          <target state="translated">INSTALL_BASEはMakefile.PLに渡すことで、モジュールのインストール先を変更することができます。INSTALL_BASEはPREFIXというよりも、みんなが「プレフィックス」と呼んでいるものに近いものです。</target>
        </trans-unit>
        <trans-unit id="964f70f55608056234ee8f272195661f239be038" translate="yes" xml:space="preserve">
          <source>INSTALL_BASE in MakeMaker and &lt;code&gt;--install_base&lt;/code&gt; in Module::Build (as of 0.28) install to the same location. If you want MakeMaker and Module::Build to install to the same location simply set INSTALL_BASE and &lt;code&gt;--install_base&lt;/code&gt; to the same location.</source>
          <target state="translated">MakeMakerのINSTALL_BASEとModule :: Buildの &lt;code&gt;--install_base&lt;/code&gt; （0.28以降）を同じ場所にインストールします。MakeMakerとModule :: Buildを同じ場所にインストールする場合は、INSTALL_BASEと &lt;code&gt;--install_base&lt;/code&gt; を同じ場所に設定するだけです。</target>
        </trans-unit>
        <trans-unit id="c3f863f63a3576929f3be4a5b8b4b41019807a08" translate="yes" xml:space="preserve">
          <source>INSTALL_BASE tells these tools to put your modules into</source>
          <target state="translated">INSTALL_BASE は、これらのツールがモジュールを</target>
        </trans-unit>
        <trans-unit id="7b883de1f22bd64a8fb3db547deeba102b803a0e" translate="yes" xml:space="preserve">
          <source>INSTALL_BASE was added in 6.31.</source>
          <target state="translated">6.31でINSTALL_BASEを追加しました。</target>
        </trans-unit>
        <trans-unit id="886581b5b89b6e85f222ace37294af35562883c9" translate="yes" xml:space="preserve">
          <source>INST_ARCHLIB</source>
          <target state="translated">INST_ARCHLIB</target>
        </trans-unit>
        <trans-unit id="8a2379bc7653dd5379a3e78bb80106b03ea038a2" translate="yes" xml:space="preserve">
          <source>INST_BIN</source>
          <target state="translated">INST_BIN</target>
        </trans-unit>
        <trans-unit id="b3767b1163f565cbd5848c1ada0a99e721fdaa0f" translate="yes" xml:space="preserve">
          <source>INST_LIB</source>
          <target state="translated">INST_LIB</target>
        </trans-unit>
        <trans-unit id="391959e82830797dda34f122ffd715943af1eafc" translate="yes" xml:space="preserve">
          <source>INST_MAN1DIR</source>
          <target state="translated">INST_MAN1DIR</target>
        </trans-unit>
        <trans-unit id="eb72524f0c074de5e6da6ca437d4e86dc340dc3b" translate="yes" xml:space="preserve">
          <source>INST_MAN3DIR</source>
          <target state="translated">INST_MAN3DIR</target>
        </trans-unit>
        <trans-unit id="0e2cba5b7722f5d7d798d0a11841e1fc5d220d67" translate="yes" xml:space="preserve">
          <source>INST_SCRIPT</source>
          <target state="translated">INST_SCRIPT</target>
        </trans-unit>
        <trans-unit id="6f436e25f27f33e27c6053472309a17baa61d133" translate="yes" xml:space="preserve">
          <source>INTERFACE</source>
          <target state="translated">INTERFACE</target>
        </trans-unit>
        <trans-unit id="325df994199a5a3b5bfde97c65a8f35d498e9bab" translate="yes" xml:space="preserve">
          <source>INTERNAL FORMAT</source>
          <target state="translated">内部フォーマット</target>
        </trans-unit>
        <trans-unit id="f2ee4f9d199f048c10a5b49f80f81e925ff271d9" translate="yes" xml:space="preserve">
          <source>INTERNAL VARIABLE TYPES</source>
          <target state="translated">内部可変型</target>
        </trans-unit>
        <trans-unit id="ae880205d974d478a4f8301ed9ed724acfe764dd" translate="yes" xml:space="preserve">
          <source>INTERNALS</source>
          <target state="translated">INTERNALS</target>
        </trans-unit>
        <trans-unit id="0270ca97abe5bddc53ed95fb7179da4406621a18" translate="yes" xml:space="preserve">
          <source>INTRODUCTION</source>
          <target state="translated">INTRODUCTION</target>
        </trans-unit>
        <trans-unit id="0f6bca99bbb2a730f1c35f8aa2b2773658a27931" translate="yes" xml:space="preserve">
          <source>INTUIT</source>
          <target state="translated">INTUIT</target>
        </trans-unit>
        <trans-unit id="ce753ef37866a2969f587c295482b688037bd94e" translate="yes" xml:space="preserve">
          <source>IN_LOCALE</source>
          <target state="translated">IN_LOCALE</target>
        </trans-unit>
        <trans-unit id="4e3731a31894b7187bb76565396bb61a32a82161" translate="yes" xml:space="preserve">
          <source>IN_LOCALE_COMPILETIME</source>
          <target state="translated">IN_LOCALE_COMPILETIME</target>
        </trans-unit>
        <trans-unit id="b36325353ec225c227d7b482dcf439805cffb50a" translate="yes" xml:space="preserve">
          <source>IN_LOCALE_RUNTIME</source>
          <target state="translated">IN_LOCALE_RUNTIME</target>
        </trans-unit>
        <trans-unit id="9d8fb39373007c2c84580d473e2a6e10a1f4c15d" translate="yes" xml:space="preserve">
          <source>IO</source>
          <target state="translated">IO</target>
        </trans-unit>
        <trans-unit id="9703b620b98df0424c1d2891029b0a53270adadc" translate="yes" xml:space="preserve">
          <source>IO - load various IO modules</source>
          <target state="translated">IO-様々な IO モジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="8218c7c584e2e73f83429a7a715ed0c77b1e9143" translate="yes" xml:space="preserve">
          <source>IO Functions</source>
          <target state="translated">IO関数</target>
        </trans-unit>
        <trans-unit id="8e8c7b4a7985c2b9c9f4e596a14848275f335be5" translate="yes" xml:space="preserve">
          <source>IO Redirect</source>
          <target state="translated">IOリダイレクト</target>
        </trans-unit>
        <trans-unit id="1a4992825d003b9237bfbb2d1eeebbc4148368e7" translate="yes" xml:space="preserve">
          <source>IO layers (like '%s') unavailable</source>
          <target state="translated">IO レイヤー('%s' のような)が利用できません。</target>
        </trans-unit>
        <trans-unit id="95153958c8a3fc0d7cc0242c39911001df17f39d" translate="yes" xml:space="preserve">
          <source>IO:: style interface to &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress::Zlib&lt;/a&gt;</source>
          <target state="translated">IO :: &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress :: Zlib&lt;/a&gt;へのスタイルインターフェイス</target>
        </trans-unit>
        <trans-unit id="c2e82ec6ecdf1d506a4bc4471deaf660ec582141" translate="yes" xml:space="preserve">
          <source>IO:: style interface to &lt;a href=&quot;compress/zlib&quot;&gt;Compress::Zlib&lt;/a&gt;</source>
          <target state="translated">IO &lt;a href=&quot;compress/zlib&quot;&gt;::: Compress :: Zlib&lt;/a&gt;へのスタイルインターフェイス</target>
        </trans-unit>
        <trans-unit id="d76ad5f2ab8e85a14e373d86896f0b50ad94632d" translate="yes" xml:space="preserve">
          <source>IO::Compress::Base</source>
          <target state="translated">IO::Compress::Base</target>
        </trans-unit>
        <trans-unit id="f7a823195ba1022235bbaa930f5dacd9dcd2cde3" translate="yes" xml:space="preserve">
          <source>IO::Compress::Base - Base Class for IO::Compress modules</source>
          <target state="translated">IO::Compress::Base-IO::Compress モジュールの基底クラス</target>
        </trans-unit>
        <trans-unit id="2246092601d71db730b1277537bdfeb99922692b" translate="yes" xml:space="preserve">
          <source>IO::Compress::Bzip2</source>
          <target state="translated">IO::Compress::Bzip2</target>
        </trans-unit>
        <trans-unit id="4c110e2dd18855a5ac17fa0ff96df45279296253" translate="yes" xml:space="preserve">
          <source>IO::Compress::Bzip2 - Write bzip2 files/buffers</source>
          <target state="translated">IO::Compress::Bzip2-bzip2 ファイル/バッファを書き込む</target>
        </trans-unit>
        <trans-unit id="faeedf86bc5c3bf443dc7cb32aca40a75c1a61b1" translate="yes" xml:space="preserve">
          <source>IO::Compress::Deflate</source>
          <target state="translated">IO::Compress::Deflate</target>
        </trans-unit>
        <trans-unit id="a24fa13516822c712bdf720b0c4b0786c457612f" translate="yes" xml:space="preserve">
          <source>IO::Compress::Deflate - Write RFC 1950 files/buffers</source>
          <target state="translated">IO::Compress::Deflate-RFC 1950 ファイル/バッファを書き込む</target>
        </trans-unit>
        <trans-unit id="f27ab19280760fb919a1e3287acc4b2ced04c845" translate="yes" xml:space="preserve">
          <source>IO::Compress::FAQ</source>
          <target state="translated">IO::Compress::FAQ</target>
        </trans-unit>
        <trans-unit id="7dd8dce39506e0315c95f5807e0b2eb0d3b042f5" translate="yes" xml:space="preserve">
          <source>IO::Compress::FAQ -- Frequently Asked Questions about IO::Compress</source>
          <target state="translated">IO::Compress::FAQ --IO::Compress に関するよくある質問</target>
        </trans-unit>
        <trans-unit id="c7fa9683b439c9ad1a7266191cc46683626bdae6" translate="yes" xml:space="preserve">
          <source>IO::Compress::Gzip</source>
          <target state="translated">IO::Compress::Gzip</target>
        </trans-unit>
        <trans-unit id="9e41ceaa77fd713ed3c8d8b1bfe6a609a7ddcea6" translate="yes" xml:space="preserve">
          <source>IO::Compress::Gzip - Write RFC 1952 files/buffers</source>
          <target state="translated">IO::Compress::Gzip-RFC 1952 ファイル/バッファを書き込む</target>
        </trans-unit>
        <trans-unit id="3205da05670e0698dd32ff4811dcf7e209aab757" translate="yes" xml:space="preserve">
          <source>IO::Compress::RawDeflate</source>
          <target state="translated">IO::Compress::RawDeflate</target>
        </trans-unit>
        <trans-unit id="94bf2f893b55a2f57dfacc0d6c1e83c0ef44793d" translate="yes" xml:space="preserve">
          <source>IO::Compress::RawDeflate - Write RFC 1951 files/buffers</source>
          <target state="translated">IO::Compress::RawDeflate-RFC 1951 のファイル/バッファを書き込む</target>
        </trans-unit>
        <trans-unit id="7015e5f6eae1214c2df0155ccaef808cdc7d0769" translate="yes" xml:space="preserve">
          <source>IO::Compress::Zip</source>
          <target state="translated">IO::Compress::Zip</target>
        </trans-unit>
        <trans-unit id="b05cb1e00a4226cff2f721fcd3f609b4ad94b38c" translate="yes" xml:space="preserve">
          <source>IO::Compress::Zip - Write zip files/buffers</source>
          <target state="translated">IO::Compress::Zip-zip ファイル/バッファを書き込む</target>
        </trans-unit>
        <trans-unit id="4bf7c8cfd258e92c5a7a288432da2eb725c5d32c" translate="yes" xml:space="preserve">
          <source>IO::Dir</source>
          <target state="translated">IO::Dir</target>
        </trans-unit>
        <trans-unit id="f3b94128fba8d6583679638179ef4a0530bdd5d3" translate="yes" xml:space="preserve">
          <source>IO::Dir - supply object methods for directory handles</source>
          <target state="translated">IO::Dir-ディレクトリハンドル用のオブジェクトメソッドを提供する</target>
        </trans-unit>
        <trans-unit id="1287d92d070eaf8f54116ae56a21bfe69917a99d" translate="yes" xml:space="preserve">
          <source>IO::File</source>
          <target state="translated">IO::File</target>
        </trans-unit>
        <trans-unit id="aef399115f05d82a203fb89d5e657a748c3e82de" translate="yes" xml:space="preserve">
          <source>IO::File - supply object methods for filehandles</source>
          <target state="translated">IO::File-ファイルハンドル用のオブジェクトメソッドを提供する</target>
        </trans-unit>
        <trans-unit id="85678e755d6fdd386f63c43333047c282a85eb74" translate="yes" xml:space="preserve">
          <source>IO::Handle</source>
          <target state="translated">IO::Handle</target>
        </trans-unit>
        <trans-unit id="d2ccf931b06cca09cc21fc6e3f7adaeb42eedc30" translate="yes" xml:space="preserve">
          <source>IO::Handle - supply object methods for I/O handles</source>
          <target state="translated">IO::Handle-I/Oハンドル用のオブジェクトメソッドを提供する</target>
        </trans-unit>
        <trans-unit id="33e6674e03fd1f9387dffec88a9442f12eb239c1" translate="yes" xml:space="preserve">
          <source>IO::Handle-&amp;gt;format_formfeed(EXPR)</source>
          <target state="translated">IO::Handle-&amp;gt;format_formfeed(EXPR)</target>
        </trans-unit>
        <trans-unit id="4328314a142bc495dbcedc8dec821af05b31bc33" translate="yes" xml:space="preserve">
          <source>IO::Handle-&amp;gt;format_line_break_characters EXPR</source>
          <target state="translated">IO :: Handle-&amp;gt; format_line_break_characters EXPR</target>
        </trans-unit>
        <trans-unit id="6e5d46bf8e867cd748990f3121e29b41bc040337" translate="yes" xml:space="preserve">
          <source>IO::Handle-&amp;gt;input_record_separator( EXPR )</source>
          <target state="translated">IO :: Handle-&amp;gt; input_record_separator（EXPR）</target>
        </trans-unit>
        <trans-unit id="88d38bb7198b1035ad2fe3e3a4c8b631ea81ae89" translate="yes" xml:space="preserve">
          <source>IO::Handle-&amp;gt;output_field_separator( EXPR )</source>
          <target state="translated">IO :: Handle-&amp;gt; output_field_separator（EXPR）</target>
        </trans-unit>
        <trans-unit id="960c5c651b09566f1754a215a5295869a49e219e" translate="yes" xml:space="preserve">
          <source>IO::Handle-&amp;gt;output_record_separator( EXPR )</source>
          <target state="translated">IO :: Handle-&amp;gt; output_record_separator（EXPR）</target>
        </trans-unit>
        <trans-unit id="7d7436d4629d382e64fc528a233e4705d021fb55" translate="yes" xml:space="preserve">
          <source>IO::Pipe</source>
          <target state="translated">IO::Pipe</target>
        </trans-unit>
        <trans-unit id="00e90fb1e0a6527593ec48869ad8bdd4be4727ec" translate="yes" xml:space="preserve">
          <source>IO::Pipe - supply object methods for pipes</source>
          <target state="translated">IO::Pipe-パイプ用のオブジェクトメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="7411852690ce77d3e52c0392cb140a1da3c8926a" translate="yes" xml:space="preserve">
          <source>IO::Poll</source>
          <target state="translated">IO::Poll</target>
        </trans-unit>
        <trans-unit id="4af10858345e94c5247f732b4f8aeefb3d3033f8" translate="yes" xml:space="preserve">
          <source>IO::Poll - Object interface to system poll call</source>
          <target state="translated">IO::Poll-システムポーリングコールへのオブジェクトインターフェース</target>
        </trans-unit>
        <trans-unit id="a68be240586077bf55c7114e0c2dd0a3089b0b00" translate="yes" xml:space="preserve">
          <source>IO::Seekable</source>
          <target state="translated">IO::Seekable</target>
        </trans-unit>
        <trans-unit id="aca83121c079f3f44793e1fb400037048e6c0ec3" translate="yes" xml:space="preserve">
          <source>IO::Seekable - supply seek based methods for I/O objects</source>
          <target state="translated">IO::Seekable-I/O オブジェクトのためのシークベースのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="a4d83b02d49f96871e2c2e3d92dc1e0d34ec01f3" translate="yes" xml:space="preserve">
          <source>IO::Select</source>
          <target state="translated">IO::Select</target>
        </trans-unit>
        <trans-unit id="f909f3c8685d0640556ffd855c6e6b3161826eb6" translate="yes" xml:space="preserve">
          <source>IO::Select - OO interface to the select system call</source>
          <target state="translated">IO::Select-セレクトシステムコールへの OO インターフェース.</target>
        </trans-unit>
        <trans-unit id="77ccdb7781ae721df7a63530341f8d0e30eb9ba3" translate="yes" xml:space="preserve">
          <source>IO::Socket</source>
          <target state="translated">IO::Socket</target>
        </trans-unit>
        <trans-unit id="bcf86f1138a4fa3de29dc58d70750df124a76378" translate="yes" xml:space="preserve">
          <source>IO::Socket - Object interface to socket communications</source>
          <target state="translated">IO::Socket-ソケット通信のためのオブジェクトインタフェース</target>
        </trans-unit>
        <trans-unit id="d9cad026ce1354129e7518abf6e60742a423f5cd" translate="yes" xml:space="preserve">
          <source>IO::Socket::INET</source>
          <target state="translated">IO::Socket::INET</target>
        </trans-unit>
        <trans-unit id="21c7e3d3993af799697bb17b584159010291f1ca" translate="yes" xml:space="preserve">
          <source>IO::Socket::INET - Object interface for AF_INET domain sockets</source>
          <target state="translated">IO::Socket::INET-AF_INET ドメインソケット用オブジェクトインタフェース</target>
        </trans-unit>
        <trans-unit id="847540cd1ff5e36f63fe89cede6f91a6c8dc3cc9" translate="yes" xml:space="preserve">
          <source>IO::Socket::INET INCOMPATIBILITES</source>
          <target state="translated">IO::Socket::INET INCOMPATIBILITES</target>
        </trans-unit>
        <trans-unit id="90c6a2e029e8c8c79ed477acabec06a520b7120a" translate="yes" xml:space="preserve">
          <source>IO::Socket::IP</source>
          <target state="translated">IO::Socket::IP</target>
        </trans-unit>
        <trans-unit id="f8d87248556e958244a0c1aaa8d71d0e3f955f2d" translate="yes" xml:space="preserve">
          <source>IO::Socket::IP version 0.25 or IO::Socket::INET6 version 2.62 is required for IPv6 support.</source>
          <target state="translated">IPv6対応にはIO::Socket::IPバージョン0.25またはIO::Socket::INET6バージョン2.62が必要です。</target>
        </trans-unit>
        <trans-unit id="ef92351b8f3537bb6cc9713b22a0a29a3dd06aa7" translate="yes" xml:space="preserve">
          <source>IO::Socket::SSL version 2.007 or higher is required for SSL support.</source>
          <target state="translated">SSL対応にはIO::Socket::SSLのバージョン2.007以上が必要です。</target>
        </trans-unit>
        <trans-unit id="8d370bee8efab5b347f028125483323b0c8ed6d8" translate="yes" xml:space="preserve">
          <source>IO::Socket::UNIX</source>
          <target state="translated">IO::Socket::UNIX</target>
        </trans-unit>
        <trans-unit id="fd6fc205eb14f250173655f91ae8e3991e80a0fc" translate="yes" xml:space="preserve">
          <source>IO::Socket::UNIX - Object interface for AF_UNIX domain sockets</source>
          <target state="translated">IO::Socket::UNIX-AF_UNIX ドメインソケット用のオブジェクトインタフェース</target>
        </trans-unit>
        <trans-unit id="d387a4118fc41f5c91b925119de8c6c9b651a7b5" translate="yes" xml:space="preserve">
          <source>IO::Socket::atmark not implemented on this architecture</source>
          <target state="translated">IO::Socket::atmark はこのアーキテクチャでは実装されていません。</target>
        </trans-unit>
        <trans-unit id="cc9efdf30a325c69f4eff01ffa74edfa8d13285c" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::AnyInflate</source>
          <target state="translated">IO::Uncompress::AnyInflate</target>
        </trans-unit>
        <trans-unit id="3f52359b31109c62a3cfec4235eb32afa54b7e76" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::AnyInflate - Uncompress zlib-based (zip, gzip) file/buffer</source>
          <target state="translated">IO::Uncompress::AnyInflate-zlib ベースの (zip,gzip)ファイル/バッファを展開する</target>
        </trans-unit>
        <trans-unit id="9bcf772c56ff61361b8adfe8ed0930e47dd806cc" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::AnyUncompress</source>
          <target state="translated">IO::Uncompress::AnyUncompress</target>
        </trans-unit>
        <trans-unit id="da915e62cd2924afaf5bdf41d62bf124d1816c96" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::AnyUncompress - Uncompress gzip, zip, bzip2 or lzop file/buffer</source>
          <target state="translated">IO::Uncompress::AnyUncompress-gzip,zip,bzip2 または lzop ファイル/バッファを解凍する</target>
        </trans-unit>
        <trans-unit id="a94c8d52ccfd5a43c50325b3be6e5dc8c0de211d" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::AnyUncompress - Uncompress gzip, zip, bzip2, xz, lzma, lzip, lzf or lzop file/buffer</source>
          <target state="translated">IO::Uncompress::AnyUncompress-gzip,zip,bzip2,xz,lzma,lzip,lzf,lzop ファイル/バッファを解凍する</target>
        </trans-unit>
        <trans-unit id="5b9d98befeabd4f68c0ee5ed490ad9ef9466ce0b" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Base</source>
          <target state="translated">IO::Uncompress::Base</target>
        </trans-unit>
        <trans-unit id="6dd0aef5e96daa96cabb662e679bcaf3f782ff34" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Base - Base Class for IO::Uncompress modules</source>
          <target state="translated">IO::Uncompress::Base-IO::Uncompress モジュールのベースクラス</target>
        </trans-unit>
        <trans-unit id="47626e73b0c552496671b93615517289c7a72139" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Bunzip2</source>
          <target state="translated">IO::Uncompress::Bunzip2</target>
        </trans-unit>
        <trans-unit id="558fc1d47555183743c62caa50f8fea7e57150e4" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Bunzip2 - Read bzip2 files/buffers</source>
          <target state="translated">IO::Uncompress::Bunzip2-bzip2 ファイル/バッファを読み込む</target>
        </trans-unit>
        <trans-unit id="c56a044dac563ce20e270b6dad9d51e1ed4d67b5" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Gunzip</source>
          <target state="translated">IO::Uncompress::Gunzip</target>
        </trans-unit>
        <trans-unit id="6858dbc4b4fa294b4bc17de10e3aec6d95c7a29d" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Gunzip - Read RFC 1952 files/buffers</source>
          <target state="translated">IO::Uncompress::Gunzip-RFC 1952 のファイル/バッファを読み込む</target>
        </trans-unit>
        <trans-unit id="bdd707a0a7c129500d87baf2238a9f12252dc1a6" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Inflate</source>
          <target state="translated">IO::Uncompress::Inflate</target>
        </trans-unit>
        <trans-unit id="9ea3fd5cd65551930396ea883f6b4523a57e56f5" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Inflate - Read RFC 1950 files/buffers</source>
          <target state="translated">IO::Uncompress::Inflate-RFC 1950 ファイル/バッファを読み込む</target>
        </trans-unit>
        <trans-unit id="2387ca346858e6f631ae40207df5832845bfa4d3" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::RawInflate</source>
          <target state="translated">IO::Uncompress::RawInflate</target>
        </trans-unit>
        <trans-unit id="0d1105cd05d8ddcb7bbad73158149f37cd425d0a" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::RawInflate - Read RFC 1951 files/buffers</source>
          <target state="translated">IO::Uncompress::RawInflate-RFC 1951 のファイル/バッファを読み込む</target>
        </trans-unit>
        <trans-unit id="eb25986effc3adf3d081252f8af9cf0ffcfb3a8a" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Unzip</source>
          <target state="translated">IO::Uncompress::Unzip</target>
        </trans-unit>
        <trans-unit id="7aed8f7e034916e56f4674cc0310d37a446ee94f" translate="yes" xml:space="preserve">
          <source>IO::Uncompress::Unzip - Read zip files/buffers</source>
          <target state="translated">IO::Uncompress::Unzip-zip ファイル/バッファを読み込む</target>
        </trans-unit>
        <trans-unit id="f4c4eb93eddc35e78414020ae5db828e1e7864b8" translate="yes" xml:space="preserve">
          <source>IO::Zlib</source>
          <target state="translated">IO::Zlib</target>
        </trans-unit>
        <trans-unit id="d04446e459b1e71b578f998f8ab90764c4b0f8e3" translate="yes" xml:space="preserve">
          <source>IO::Zlib - IO:: style interface to &lt;a href=&quot;../compress/zlib&quot;&gt;Compress::Zlib&lt;/a&gt;</source>
          <target state="translated">IO :: Zlib- &lt;a href=&quot;../compress/zlib&quot;&gt;Compress :: Zlib&lt;/a&gt;へのIO ::スタイルのインターフェース</target>
        </trans-unit>
        <trans-unit id="1a833dc84965b791c8180a7f9bca2ad00d4ae502" translate="yes" xml:space="preserve">
          <source>IO::Zlib - IO:: style interface to &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress::Zlib&lt;/a&gt;</source>
          <target state="translated">IO :: Zlib- &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress :: Zlib&lt;/a&gt;へのIO ::スタイルインターフェイス</target>
        </trans-unit>
        <trans-unit id="d3f1ff5ae16f8f008a024c94a2871ed43a079e29" translate="yes" xml:space="preserve">
          <source>IO::Zlib::READ: NBYTES must be specified</source>
          <target state="translated">IO::Zlib::READ:NBYTES を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b518756109da5b44c543995580fa7fa3fe28da6b" translate="yes" xml:space="preserve">
          <source>IO::Zlib::WRITE: too long LENGTH</source>
          <target state="translated">IO::Zlib::WRITE:長すぎる LENGTH</target>
        </trans-unit>
        <trans-unit id="16afa17f59e61e732bb594e1d07367170d0e3516" translate="yes" xml:space="preserve">
          <source>IO::Zlib::getlines: must be called in list context</source>
          <target state="translated">IO::Zlib::getlines:リストコンテキストで呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="744b77ff3abbf3b6e1e64e30f7190f2e0e168879" translate="yes" xml:space="preserve">
          <source>IO::Zlib::gzopen_external: mode '...' is illegal</source>
          <target state="translated">IO::Zlib::gzopen_external:モード '...' が不正</target>
        </trans-unit>
        <trans-unit id="c2ece9d22f9b2c053955dd1211c105cea7756474" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: '...' is illegal</source>
          <target state="translated">IO::Zlib::import.'...は違法</target>
        </trans-unit>
        <trans-unit id="84556d1d56bdf3da066fa6199f9990e8d2a4eaa9" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: ':gzip_external' requires an argument</source>
          <target state="translated">IO::Zlib::import.':gzip_external' は引数として</target>
        </trans-unit>
        <trans-unit id="f33a6e3d14094a99186bbb131dd967ca442a99e2" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: 'gzip_read' '...' is illegal</source>
          <target state="translated">IO::Zlib::import.'gzip_read' '...は不正です。</target>
        </trans-unit>
        <trans-unit id="430510c63254c938fe8a419081620b44e9a63369" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: 'gzip_read_open' requires an argument</source>
          <target state="translated">IO::Zlib::import.'gzip_read_open' は引数を必要とします。</target>
        </trans-unit>
        <trans-unit id="5ef06ad0f4357c011fb32988808d09f0b27277a4" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: 'gzip_write_open' '...' is illegal</source>
          <target state="translated">IO::Zlib::import.'gzip_write_open' '...は不正です。</target>
        </trans-unit>
        <trans-unit id="48cbd51a10bd74c633549cef79628135e981981b" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: 'gzip_write_open' requires an argument</source>
          <target state="translated">IO::Zlib::import.'gzip_write_open' は引数を必要とします。</target>
        </trans-unit>
        <trans-unit id="27cde92750a3d48d656e69ded8901f66e2e3f4c3" translate="yes" xml:space="preserve">
          <source>IO::Zlib::import: no Compress::Zlib and no external gzip</source>
          <target state="translated">IO::Zlib::import:Compress::Zlibがなく、外部gzipがない。</target>
        </trans-unit>
        <trans-unit id="baefedf7f6990fe793b903ceae7ef91bfaf79c09" translate="yes" xml:space="preserve">
          <source>IO::Zlib::open: needs a filename</source>
          <target state="translated">IO::Zlib::open:ファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="ea424d38af72dd1366a08aad1f47eca3e7ec3d24" translate="yes" xml:space="preserve">
          <source>IP</source>
          <target state="translated">IP</target>
        </trans-unit>
        <trans-unit id="e66f01e3abb1a4678f130fa0379ceec3adaec42e" translate="yes" xml:space="preserve">
          <source>IP protocol constants to use as the third argument to socket(), the level argument to getsockopt() or setsockopt(), or the value of the &lt;code&gt;SO_PROTOCOL&lt;/code&gt; socket option.</source>
          <target state="translated">socket（）の3番目の引数、getsockopt（）またはsetsockopt（）のlevel引数、または &lt;code&gt;SO_PROTOCOL&lt;/code&gt; ソケットオプションの値として使用するIPプロトコル定数。</target>
        </trans-unit>
        <trans-unit id="061b6bad243fee6cf3f9b677d21494fee55f1c64" translate="yes" xml:space="preserve">
          <source>IPA</source>
          <target state="translated">IPA</target>
        </trans-unit>
        <trans-unit id="f4aa7e6cdf843e01253be3fd2becaee731842f78" translate="yes" xml:space="preserve">
          <source>IPC</source>
          <target state="translated">IPC</target>
        </trans-unit>
        <trans-unit id="d54b59c534e736687131e3ec256172d1adbc895d" translate="yes" xml:space="preserve">
          <source>IPC AND CONCURRENCY</source>
          <target state="translated">IPCと整合性</target>
        </trans-unit>
        <trans-unit id="b9e5cff8767ed4c7882144c6f5c7afd4a74a2869" translate="yes" xml:space="preserve">
          <source>IPC drivers live in this namespace. It is fine to create new IPC drivers and to put them in this namespace.</source>
          <target state="translated">IPCドライバはこの名前空間に存在します。新しいIPCドライバを作成して、それをこの名前空間に入れても構いません。</target>
        </trans-unit>
        <trans-unit id="25bb80888fafae35a8c04a482f4c52ba12354860" translate="yes" xml:space="preserve">
          <source>IPC::Cmd</source>
          <target state="translated">IPC::Cmd</target>
        </trans-unit>
        <trans-unit id="4aa727aa3bbf49a23200ff9a15dd661ace7ba750" translate="yes" xml:space="preserve">
          <source>IPC::Cmd - finding and running system commands made easy</source>
          <target state="translated">IPC::Cmd-システムコマンドの検索と実行が簡単になりました。</target>
        </trans-unit>
        <trans-unit id="9e94bec610bda8b6d6dba9768e7c89860ea7cbd2" translate="yes" xml:space="preserve">
          <source>IPC::Cmd allows you to run commands platform independently, interactively if desired, but have them still work.</source>
          <target state="translated">IPC::Cmdでは、必要に応じて対話的に独立してプラットフォーム上でコマンドを実行することができます。</target>
        </trans-unit>
        <trans-unit id="55a4e391e67ff1bdcc3e16ba0fb5ae458ce57904" translate="yes" xml:space="preserve">
          <source>IPC::Msg</source>
          <target state="translated">IPC::Msg</target>
        </trans-unit>
        <trans-unit id="6b32de39850adb752165f60b3bda5f0d97f34ff3" translate="yes" xml:space="preserve">
          <source>IPC::Msg - SysV Msg IPC object class</source>
          <target state="translated">IPC::Msg-SysV Msg IPC オブジェクトクラス</target>
        </trans-unit>
        <trans-unit id="9dd902f8639b58e7edb7b6f8c06c22ac41c9ca2e" translate="yes" xml:space="preserve">
          <source>IPC::Open2</source>
          <target state="translated">IPC::Open2</target>
        </trans-unit>
        <trans-unit id="699765d9577f1c1501174faba27f2ca1f61d47cd" translate="yes" xml:space="preserve">
          <source>IPC::Open2 - open a process for both reading and writing using open2()</source>
          <target state="translated">IPC::Open2-open2()を使用して読み書きの両方のプロセスをオープンする</target>
        </trans-unit>
        <trans-unit id="6e80951681402ceb79b82897f2cb2015d59ab625" translate="yes" xml:space="preserve">
          <source>IPC::Open3</source>
          <target state="translated">IPC::Open3</target>
        </trans-unit>
        <trans-unit id="cbebbea4476633d292dae0e9b37d3ff0220e8a12" translate="yes" xml:space="preserve">
          <source>IPC::Open3 - open a process for reading, writing, and error handling using open3()</source>
          <target state="translated">IPC::Open3-open3()を使用して、読み書きやエラー処理のためのプロセスをオープンします。</target>
        </trans-unit>
        <trans-unit id="e9c314ea8a55f232d58be815a30ee23b54cdb80b" translate="yes" xml:space="preserve">
          <source>IPC::Run</source>
          <target state="translated">IPC::Run</target>
        </trans-unit>
        <trans-unit id="5696dbec647d54eae7948ff758da75aceb6e7bdd" translate="yes" xml:space="preserve">
          <source>IPC::Semaphore</source>
          <target state="translated">IPC::Semaphore</target>
        </trans-unit>
        <trans-unit id="4ac3e2f97ecebc0c9df272394b412c2bc0e4c139" translate="yes" xml:space="preserve">
          <source>IPC::Semaphore - SysV Semaphore IPC object class</source>
          <target state="translated">IPC::Semaphore-SysV Semaphore IPC オブジェクトクラス</target>
        </trans-unit>
        <trans-unit id="eaac05351199d5338d0c67774a49f0ff5b08ddcd" translate="yes" xml:space="preserve">
          <source>IPC::SharedMem</source>
          <target state="translated">IPC::SharedMem</target>
        </trans-unit>
        <trans-unit id="b67329129b7437abd470390d9b8de8b506578731" translate="yes" xml:space="preserve">
          <source>IPC::SharedMem - SysV Shared Memory IPC object class</source>
          <target state="translated">IPC::SharedMem-SysV 共有メモリ IPC オブジェクトクラス</target>
        </trans-unit>
        <trans-unit id="cac6bf077ecf12b8c4774537cb90121c12f40546" translate="yes" xml:space="preserve">
          <source>IPC::SysV</source>
          <target state="translated">IPC::SysV</target>
        </trans-unit>
        <trans-unit id="4a65a5b9999ec2f5bcb9aefce9ed4d2ebb83e351" translate="yes" xml:space="preserve">
          <source>IPC::SysV - System V IPC constants and system calls</source>
          <target state="translated">IPC::SysV-System V IPC 定数とシステムコール</target>
        </trans-unit>
        <trans-unit id="eb04f21953f498789cba10742ad8acc6a3a6d8ee" translate="yes" xml:space="preserve">
          <source>IPC::[Run|Open3] will first read all of STDOUT, then all of STDERR, meaning the output looks like '13' on STDOUT and '24' on STDERR, instead of</source>
          <target state="translated">IPC:[Run|Open3]は最初にSTDOUTの全てを読み込んでからSTDERRの全てを読み込んでいます。</target>
        </trans-unit>
        <trans-unit id="c31963d765721dcd50b3ac6ea7828e71081eb9d0" translate="yes" xml:space="preserve">
          <source>IPPROTO_IP, IPPROTO_IPV6, IPPROTO_TCP, ...</source>
          <target state="translated">IPPROTO_IP、IPPROTO_IPV6、IPPROTO_TCP、...</target>
        </trans-unit>
        <trans-unit id="d605f8c901e4d72b551c09d9a4925d13cd9fbbb6" translate="yes" xml:space="preserve">
          <source>IPTOS_LOWDELAY, IPTOS_THROUGHPUT, IPTOS_RELIABILITY, ...</source>
          <target state="translated">IPTOS_LOWDELAY,IPTOS_THROUGHPUT,IPTOS_RELIABILITY,...</target>
        </trans-unit>
        <trans-unit id="b69eb35e4d4802a904ccf4f4eadf16b1c7831980" translate="yes" xml:space="preserve">
          <source>IPV6_ADD_MEMBERSHIP, IPV6_MTU, IPV6_V6ONLY, ...</source>
          <target state="translated">IPV6_ADD_MEMBERSHIP、IPV6_MTU、IPV6_V6ONLY、...</target>
        </trans-unit>
        <trans-unit id="5dcc16ca06e8e1e2d76e2715098a08de9cb62845" translate="yes" xml:space="preserve">
          <source>IP_OPTIONS, IP_TOS, IP_TTL, ...</source>
          <target state="translated">IP_OPTIONS,IP_TOS,IP_TTL,...</target>
        </trans-unit>
        <trans-unit id="52736177bb0ddc7186d53ccc0e904a6fc38535ec" translate="yes" xml:space="preserve">
          <source>IP_PMTUDISC_WANT, IP_PMTUDISC_DONT, ...</source>
          <target state="translated">IP_PMTUDISC_WANT,IP_PMTUDISC_DONT,...</target>
        </trans-unit>
        <trans-unit id="a68fa8efe4a09d8c0c63ae60426d9366434bccb2" translate="yes" xml:space="preserve">
          <source>IRC</source>
          <target state="translated">IRC</target>
        </trans-unit>
        <trans-unit id="e845e309f2bc4605301c4c8195c02b9ee45aab86" translate="yes" xml:space="preserve">
          <source>IRIX 6.5 documentation on syslog, &lt;a href=&quot;http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?coll=0650&amp;amp;db=man&amp;amp;fname=3c+syslog&quot;&gt;http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?coll=0650&amp;amp;db=man&amp;amp;fname=3c+syslog&lt;/a&gt;</source>
          <target state="translated">syslogに関するIRIX 6.5のドキュメント、&lt;a href=&quot;http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?coll=0650&amp;amp;db=man&amp;amp;fname=3c+syslog&quot;&gt;http：//techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi？coll = 0650＆db = man＆fname = 3c +&lt;/a&gt; syslog</target>
        </trans-unit>
        <trans-unit id="9e349cb6fd67b0b7af90f7902a26799f4b980ca8" translate="yes" xml:space="preserve">
          <source>IRIX documentation on syslog, &lt;a href=&quot;http://nixdoc.net/man-pages/IRIX/man3/syslog.3c.html&quot;&gt;http://nixdoc.net/man-pages/IRIX/man3/syslog.3c.html&lt;/a&gt;</source>
          <target state="translated">Syslogに関するIRIXドキュメント、&lt;a href=&quot;http://nixdoc.net/man-pages/IRIX/man3/syslog.3c.html&quot;&gt;http：//nixdoc.net/man-pages/IRIX/man3/syslog.3c.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="407683774352e467c08d20959c8dcea8f6ef7fa7" translate="yes" xml:space="preserve">
          <source>ISIRI 3342, Iran System, ISIRI 2900 [Farsi]</source>
          <target state="translated">ISIRI 3342、イランシステム、ISIRI 2900 [ファルシ語]</target>
        </trans-unit>
        <trans-unit id="4f325d995b6d028ccc75771b1679537b623521c4" translate="yes" xml:space="preserve">
          <source>ISO</source>
          <target state="translated">ISO</target>
        </trans-unit>
        <trans-unit id="f776e0bcef88f6053e04b30cd9568a2f517c3848" translate="yes" xml:space="preserve">
          <source>ISO 6429 is available from ISO for a charge; the author of this module does not own a copy of it. Since the source material for ISO 6429 was ECMA-048 and the latter is available for free, there seems little reason to obtain the ISO standard.</source>
          <target state="translated">ISO 6429はISOから有料で入手できます。ISO 6429のソースはECMA-048で、後者は無料で入手できますので、ISO規格を入手する理由はあまりないようです。</target>
        </trans-unit>
        <trans-unit id="3353e215f71b71f7414efad5057c41576384753e" translate="yes" xml:space="preserve">
          <source>ISO 8859</source>
          <target state="translated">ISO8859</target>
        </trans-unit>
        <trans-unit id="8fb0773017f88d072a29c4af9bf4189cc9c9a466" translate="yes" xml:space="preserve">
          <source>ISO 8859-1 (Latin-1)</source>
          <target state="translated">ISO 8859-1 (ラテン語-1)</target>
        </trans-unit>
        <trans-unit id="58189607ac5de761659ad85bfe08184fa60a5f97" translate="yes" xml:space="preserve">
          <source>ISO codes for country sub-divisions (states, counties, provinces, etc), as defined in ISO 3166-2. This module is not part of the Locale-Codes distribution, but is available from CPAN in CPAN/modules/by-module/Locale/</source>
          <target state="translated">ISO 3166-2で定義されている国の小区分(州、郡、州など)のためのISOコード。このモジュールは、Locale-Codesディストリビューションには含まれていないが、CPANからCPAN/modules/by-module/Locale/で入手できる。</target>
        </trans-unit>
        <trans-unit id="2ee43903e014e67bbc02a16177f46410f4c5e2d5" translate="yes" xml:space="preserve">
          <source>ISO-2022</source>
          <target state="translated">ISO-2022</target>
        </trans-unit>
        <trans-unit id="0be641e76803b7f8b2767005594a25c505dcb463" translate="yes" xml:space="preserve">
          <source>ISO-2022-CN [RFC1922]</source>
          <target state="translated">ISO-2022-CN [RFC1922].</target>
        </trans-unit>
        <trans-unit id="e2562b9e7af09019f9f6f2808d127ef571d29778" translate="yes" xml:space="preserve">
          <source>ISO-2022-JP-1 (RFC2237) is a superset of ISO-2022-JP (RFC1468) which adds support for JIS X 0212-1990. That means you can use the same code to decode to utf8 but not vice versa.</source>
          <target state="translated">ISO-2022-JP-1(RFC2237)は、JIS X 0212-1990のサポートを追加したISO-2022-JP(RFC1468)のスーパーセットです。つまり、同じコードを使って utf8 にデコードすることができますが、その逆はできません。</target>
        </trans-unit>
        <trans-unit id="29cc7458d9efed7fe50460a3c77c7b87ac7a4db4" translate="yes" xml:space="preserve">
          <source>ISO-2022-JP-2 [RFC1554]</source>
          <target state="translated">ISO-2022-JP-2 [RFC1554].</target>
        </trans-unit>
        <trans-unit id="63ffbc186932bc40f01e94ff7f5da5bf38a7154e" translate="yes" xml:space="preserve">
          <source>ISO-8859 and corresponding vendor mappings</source>
          <target state="translated">ISO-8859と対応するベンダーマッピング</target>
        </trans-unit>
        <trans-unit id="19de626ae38d6fda9f9525299d239d5c0047248b" translate="yes" xml:space="preserve">
          <source>ISO-8859-8-1 [Hebrew]</source>
          <target state="translated">ISO-8859-8-1 [ヘブライ語]</target>
        </trans-unit>
        <trans-unit id="846e5e5cfd7e004c49ed6ae8c1a88eb61f8816e2" translate="yes" xml:space="preserve">
          <source>ISO/IEC 10646 encoding form: Universal Character Set coded in two octets.</source>
          <target state="translated">ISO/IEC 10646 符号化形式。2オクテットでコード化されたユニバーサル文字セット。</target>
        </trans-unit>
        <trans-unit id="13dc9cc90e3e41be961fd70df5f28ccfd86e620a" translate="yes" xml:space="preserve">
          <source>ISSUES</source>
          <target state="translated">ISSUES</target>
        </trans-unit>
        <trans-unit id="c5d9779f83f04a49a66dda9ed50dc9241b27d743" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_GREATER_THAN_UV_MAX bool IS_NUMBER_GREATER_THAN_UV_MAX</source>
          <target state="translated">IS_NUMBER_GREATER_THAN_UV_MAX bool IS_NUMBER_GREATER_THAN_UV_MAX</target>
        </trans-unit>
        <trans-unit id="d4f5693602a943228410c2db90175bdc9e162f71" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_INFINITY bool IS_NUMBER_INFINITY</source>
          <target state="translated">IS_NUMBER_INFINITY bool IS_NUMBER_INFINITY</target>
        </trans-unit>
        <trans-unit id="ed51a22a984a7a3384cf7607e6083139f796bac6" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_IN_UV bool IS_NUMBER_IN_UV</source>
          <target state="translated">IS_NUMBER_IN_UV bool IS_NUMBER_IN_UV</target>
        </trans-unit>
        <trans-unit id="3b619f91f9748472f17789ce360cdba95124ee65" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_NAN bool IS_NUMBER_NAN</source>
          <target state="translated">IS_NUMBER_NAN bool IS_NUMBER_NAN</target>
        </trans-unit>
        <trans-unit id="63251c261b533d85d9b19ec08396f8b333d44ea2" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_NEG bool IS_NUMBER_NEG</source>
          <target state="translated">IS_NUMBER_NEG bool IS_NUMBER_NEG</target>
        </trans-unit>
        <trans-unit id="13d56a5e4d44a907f0379be77749d8420d47b899" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_NOT_INT</source>
          <target state="translated">IS_NUMBER_NOT_INT</target>
        </trans-unit>
        <trans-unit id="6c84053d4886e789ea8b111c5248970e59a2046c" translate="yes" xml:space="preserve">
          <source>IS_NUMBER_NOT_INT will be set with IS_NUMBER_IN_UV if trailing decimals were seen (in which case *valuep gives the true value truncated to an integer), and IS_NUMBER_NEG if the number is negative (in which case *valuep holds the absolute value). IS_NUMBER_IN_UV is not set if e notation was used or the number is larger than a UV.</source>
          <target state="translated">IS_NUMBER_NOT_INTは、末尾に小数が見える場合(この場合、*valuepは整数に切り捨てられた真の値を与えます)にはIS_NUMBER_IN_UVとセットされ、数値が負の場合(この場合、*valuepは絶対値を保持します)にはIS_NUMBER_NEGとセットされます。e記法が使用されているか、数値がUVより大きい場合、IS_NUMBER_IN_UVは設定されません。</target>
        </trans-unit>
        <trans-unit id="a41c9a62c208bda09b6e0e4693fb0c85b4373197" translate="yes" xml:space="preserve">
          <source>IS_SAFE_SYSCALL</source>
          <target state="translated">IS_SAFE_SYSCALL</target>
        </trans-unit>
        <trans-unit id="e849c5f96439c1fe622e4ace3225dd079d5ce0bc" translate="yes" xml:space="preserve">
          <source>ITEM</source>
          <target state="translated">ITEM</target>
        </trans-unit>
        <trans-unit id="e98fda145e73c44d41ee1cf81a9942997f60dc03" translate="yes" xml:space="preserve">
          <source>ITEM...</source>
          <target state="translated">ITEM...</target>
        </trans-unit>
        <trans-unit id="81355db038b4c2e62588bc2f02426816803c8b50" translate="yes" xml:space="preserve">
          <source>ITEMHASH</source>
          <target state="translated">ITEMHASH</target>
        </trans-unit>
        <trans-unit id="932eaaf5a36529c34a7868b56cba634f534f39b4" translate="yes" xml:space="preserve">
          <source>IV</source>
          <target state="translated">IV</target>
        </trans-unit>
        <trans-unit id="af7024f6a1aba1b8353a4f8d081230e10f559e67" translate="yes" xml:space="preserve">
          <source>IVX</source>
          <target state="translated">IVX</target>
        </trans-unit>
        <trans-unit id="3776b457f4a64c1c2e929c3beb97e225d7174238" translate="yes" xml:space="preserve">
          <source>Iain Truskett. Updated by the Perl 5 Porters.</source>
          <target state="translated">Iain Truskett。Perl 5 Portersによって更新されました。</target>
        </trans-unit>
        <trans-unit id="18334cc78787c9bf930719c033735bf066a1783e" translate="yes" xml:space="preserve">
          <source>Idaho</source>
          <target state="translated">Idaho</target>
        </trans-unit>
        <trans-unit id="d3280028436889a62f2d1e26e6623a3b63327bf8" translate="yes" xml:space="preserve">
          <source>Idea by Tony Bowden and Paul Johnson, code by Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;, wardrobe by Calvin Klein.</source>
          <target state="translated">Tony BowdenとPaul Johnsonによるアイデア、Michael G Schwernによるコード&amp;lt;schwern@pobox.com&amp;gt;、Calvin Kleinによるワードローブ。</target>
        </trans-unit>
        <trans-unit id="38eaa27bde2babc938a1d3f61f24a4c3c9ee9393" translate="yes" xml:space="preserve">
          <source>Ideally, all instances of &lt;code&gt;PL_sub_generation++&lt;/code&gt; in perl source outside of</source>
          <target state="translated">理想的には、外部のperlソースにある &lt;code&gt;PL_sub_generation++&lt;/code&gt; すべてのインスタンス</target>
        </trans-unit>
        <trans-unit id="e4477a644f309bbba5035bb03dd4d512f954eb2e" translate="yes" xml:space="preserve">
          <source>Ideally, all of these operators would completely ignore the &lt;code&gt;:utf8&lt;/code&gt; state, working only with bytes, but this would result in silently breaking existing code.</source>
          <target state="translated">理想的には、これらの演算子はすべて &lt;code&gt;:utf8&lt;/code&gt; 状態を完全に無視し、バイトのみを処理しますが、これにより、既存のコードがサイレントに破壊されます。</target>
        </trans-unit>
        <trans-unit id="501684b206c21ec5483e8cb92e79c26ad4af36ca" translate="yes" xml:space="preserve">
          <source>Ideally, all of these operators would completely ignore the &lt;code&gt;:utf8&lt;/code&gt; state, working only with bytes, but this would result in silently breaking existing code. To avoid this a future version of perl will throw an exception when any of sysread(), recv(), syswrite() or send() are called on handle with the &lt;code&gt;:utf8&lt;/code&gt; layer.</source>
          <target state="translated">理想的には、これらの演算子はすべて &lt;code&gt;:utf8&lt;/code&gt; 状態を完全に無視し、バイトのみを処理しますが、これにより、既存のコードがサイレントに破壊されます。これを回避するために、将来のバージョンのperlは、sysread（）、recv（）、syswrite（）、またはsend（）のいずれかが &lt;code&gt;:utf8&lt;/code&gt; レイヤーのハンドルで呼び出されたときに例外をスローします。</target>
        </trans-unit>
        <trans-unit id="b72ac1e7c6fddbcf97426592a619f53420c1c124" translate="yes" xml:space="preserve">
          <source>Ideally, someone who's slightly familiar with your module should be able to refresh their memory without hitting &quot;page down&quot;. As your reader continues through the document, they should receive a progressively greater amount of knowledge.</source>
          <target state="translated">理想的には、あなたのモジュールに少しでも精通している人が、「ページダウン」をせずに記憶を更新できるようにすることです。読者がドキュメントを読み進めていくうちに、徐々に知識が増えていくはずです。</target>
        </trans-unit>
        <trans-unit id="6760494b3e87b72d6f704a16dfd8c909bfd06f21" translate="yes" xml:space="preserve">
          <source>Identical to &lt;a href=&quot;#lrint&quot;&gt;&quot;lrint&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#lrint&quot;&gt;「lrint」&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="71c30d178b22c94b418adae6de96d27ac6651de9" translate="yes" xml:space="preserve">
          <source>Identical to &lt;a href=&quot;#lrint&quot;&gt;lrint&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#lrint&quot;&gt;lrint&lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="c269c4512ac345c8ac0e6a3f0761757db1ece435" translate="yes" xml:space="preserve">
          <source>Identical to &lt;code&gt;grok_number_flags()&lt;/code&gt; with &lt;code&gt;flags&lt;/code&gt; set to zero.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; をゼロに設定した &lt;code&gt;grok_number_flags()&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="189f7c8820b5d91329256424f9abd34533abf5d2" translate="yes" xml:space="preserve">
          <source>Identical to &lt;code&gt;has_errors&lt;/code&gt; , but also returns true if any TODO tests unexpectedly succeeded. This is more akin to &quot;warnings&quot;.</source>
          <target state="translated">&lt;code&gt;has_errors&lt;/code&gt; と同じですが、TODOテストが予期せず成功した場合にもtrueを返します。これは「警告」に似ています。</target>
        </trans-unit>
        <trans-unit id="0e295a166224f4ec773840e576cbbb4eea64c35a" translate="yes" xml:space="preserve">
          <source>Identical to &lt;code&gt;has_errors&lt;/code&gt;, but also returns true if any TODO tests unexpectedly succeeded. This is more akin to &quot;warnings&quot;.</source>
          <target state="translated">&lt;code&gt;has_errors&lt;/code&gt; と同じですが、TODOテストが予期せず成功した場合にもtrueを返します。これは「警告」に似ています。</target>
        </trans-unit>
        <trans-unit id="49923c15da594194a42e0f23479dad9afb3e6e18" translate="yes" xml:space="preserve">
          <source>Identical to &lt;code&gt;seek OFFSET, WHENCE&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;seek OFFSET, WHENCE&lt;/code&gt; を求めるのは同じです、WHENCE、</target>
        </trans-unit>
        <trans-unit id="725851e6339b491e1de8826e667b9695d8cea364" translate="yes" xml:space="preserve">
          <source>Identical to grok_number_flags() with flags set to zero.</source>
          <target state="translated">grok_number_flags()と同じで、フラグはゼロに設定されます。</target>
        </trans-unit>
        <trans-unit id="9052a2716f89fc7937386d07b0ec6eb570325f21" translate="yes" xml:space="preserve">
          <source>Identifier parsing</source>
          <target state="translated">パーシングを識別する</target>
        </trans-unit>
        <trans-unit id="c9e9b7fc2f9e092c9b1b92a7e63d7d890ea86035" translate="yes" xml:space="preserve">
          <source>Identifier too long</source>
          <target state="translated">識別子が長すぎる</target>
        </trans-unit>
        <trans-unit id="96bd1c9d626bb40d98db0e06c9d88504407f597b" translate="yes" xml:space="preserve">
          <source>Identifies _POSIX_ARG_MAX as a constant sub, optimized to an IV. Although POSIX isn't entirely consistent across platforms, this is likely to be present in virtually all of them.</source>
          <target state="translated">POSIX_ARG_MAXをIVに最適化された定数サブとして識別します。POSIXはプラットフォーム間で完全に一貫しているわけではありませんが、これは事実上すべてのプラットフォームに存在している可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="651807fc401b8332ec409deb81843bccbd052364" translate="yes" xml:space="preserve">
          <source>Identifies md5 as an XS function. The export is needed so that BC can find it in main.</source>
          <target state="translated">md5をXS関数として識別します。BCがmainで見つけられるようにエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="c85a93ef2b6eb1be3e8769838c333c812af4359a" translate="yes" xml:space="preserve">
          <source>Identify a remote machine name. The auto-login process searches the .netrc file for a machine token that matches the remote machine specified. Once a match is made, the subsequent .netrc tokens are processed, stopping when the end of file is reached or an- other machine or a default token is encountered.</source>
          <target state="translated">リモートマシン名を識別します。自動ログインプロセスは、指定されたリモートマシンに一致するマシントークンを .netrc ファイルから検索します。一致すると、後続の .netrc トークンが処理され、ファイルの終端に達するか、他のマシンまたはデフォルトのトークンに遭遇した場合に停止します。</target>
        </trans-unit>
        <trans-unit id="ad36a5ddf7af0b9b2aadce75c61491b0c464af3b" translate="yes" xml:space="preserve">
          <source>Identify a user on the remote machine. If this token is present, the auto-login process will initiate a login using the specified name.</source>
          <target state="translated">リモート マシン上のユーザーを識別します。このトークンが存在する場合、自動ログインプロセスは指定された名前を使用してログインを開始します。</target>
        </trans-unit>
        <trans-unit id="93ca58cc90c1952df3129b0ab2a244d796f9ba81" translate="yes" xml:space="preserve">
          <source>Identify and return the FQDN of the current host.</source>
          <target state="translated">現在のホストのFQDNを識別して返します。</target>
        </trans-unit>
        <trans-unit id="1b3b4987c2d4674f5207d125a1368bf151a6aeb4" translate="yes" xml:space="preserve">
          <source>Identify the C functions which use some inband info as an indication of failure. They may be candidates to return undef or an empty list in case of failure. If the failure may be detected without a call to the C function, you may want to use an INIT: section to report the failure. For failures detectable after the C function returns one may want to use a POSTCALL: section to process the failure. In more complicated cases use CODE: or PPCODE: sections.</source>
          <target state="translated">失敗の指標としてバンド内情報を使用するC関数を識別してください。これらの関数は、失敗した場合に undef を返すか、空のリストを返すかの候補になるかもしれません。C関数を呼ばずに失敗が検出された場合は、INIT:セクションを使って失敗を報告したいかもしれません。C関数が戻ってきた後に検出された障害については、POSTCALL:セクションを使用して障害を処理したい場合があります。より複雑な場合は、CODE:セクションまたは PPCODE:セクションを使用します。</target>
        </trans-unit>
        <trans-unit id="b1d8de6657b1cd9ff03db4bb8c676352163c1ab9" translate="yes" xml:space="preserve">
          <source>Identify the C functions with input/output or output parameters. The XSUBs for these functions may be able to return lists to Perl.</source>
          <target state="translated">入力/出力または出力パラメータを持つC関数を識別してください。これらの関数のXSUBはPerlにリストを返すことができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="90f84ba2bf147a844b20d38f482ee57bb2e58f7e" translate="yes" xml:space="preserve">
          <source>Identify the pointers in the C function parameter lists and return values. Some pointers may be used to implement input/output or output parameters, they can be handled in XS with the &lt;code&gt;&amp;amp;&lt;/code&gt; unary operator, and, possibly, using the NO_INIT keyword. Some others will require handling of types like &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; *&lt;/code&gt; , and one needs to decide what a useful Perl translation will do in such a case. When the semantic is clear, it is advisable to put the translation into a typemap file.</source>
          <target state="translated">C関数パラメーターリストと戻り値でポインターを識別します。一部のポインターは、入出力パラメーターまたは出力パラメーターの実装に使用でき、 &lt;code&gt;&amp;amp;&lt;/code&gt; 単項演算子を使用してXSで処理でき、場合によってはNO_INITキーワードを使用できます。他のいくつかは &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; *&lt;/code&gt; のような型の処理を必要とし、そのような場合に有用なPerl変換が何をするかを決定する必要があります。意味が明確な場合は、翻訳をタイプマップファイルに入れることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="02c745f2a38f59b1173a4d016d93fc6da4107dea" translate="yes" xml:space="preserve">
          <source>Identify the pointers in the C function parameter lists and return values. Some pointers may be used to implement input/output or output parameters, they can be handled in XS with the &lt;code&gt;&amp;amp;&lt;/code&gt; unary operator, and, possibly, using the NO_INIT keyword. Some others will require handling of types like &lt;code&gt;int *&lt;/code&gt;, and one needs to decide what a useful Perl translation will do in such a case. When the semantic is clear, it is advisable to put the translation into a typemap file.</source>
          <target state="translated">C関数のパラメーターリストと戻り値でポインターを識別します。一部のポインターは、入出力パラメーターまたは出力パラメーターを実装するために使用できます。これらは、XSで &lt;code&gt;&amp;amp;&lt;/code&gt; 単項演算子を使用して、場合によってはNO_INITキーワードを使用して処理できます。他のいくつかは &lt;code&gt;int *&lt;/code&gt; のような型の処理を必要とし、そのような場合に有用なPerl変換が何をするかを決定する必要があります。セマンティクスが明確な場合は、翻訳をタイプマップファイルに入れることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b3f574cc58fec6b5a326569871a9bc4c7e511150" translate="yes" xml:space="preserve">
          <source>Identify the structures used by the C functions. In many cases it may be helpful to use the T_PTROBJ typemap for these structures so they can be manipulated by Perl as blessed objects. (This is handled automatically by &lt;code&gt;h2xs -x&lt;/code&gt; .)</source>
          <target state="translated">C関数によって使用される構造を識別します。多くの場合、これらの構造体にT_PTROBJタイプマップを使用すると、Perlで祝福されたオブジェクトとして操作できるようになります。（これは &lt;code&gt;h2xs -x&lt;/code&gt; によって自動的に処理されます。）</target>
        </trans-unit>
        <trans-unit id="010ff5be16a493cb47c53ed9163162ed618b8c47" translate="yes" xml:space="preserve">
          <source>Identify the structures used by the C functions. In many cases it may be helpful to use the T_PTROBJ typemap for these structures so they can be manipulated by Perl as blessed objects. (This is handled automatically by &lt;code&gt;h2xs -x&lt;/code&gt;.)</source>
          <target state="translated">C関数で使用される構造を特定します。多くの場合、これらの構造にT_PTROBJタイプマップを使用すると、Perlが祝福されたオブジェクトとして操作できるようになると便利です。（これは &lt;code&gt;h2xs -x&lt;/code&gt; によって自動的に処理されます。）</target>
        </trans-unit>
        <trans-unit id="7cadfb291553bfe2fe292f1f1bdcc23146b4ce0c" translate="yes" xml:space="preserve">
          <source>Identify which values are used by only the C and XSUB functions themselves, say, when a parameter to a function should be a contents of a global variable. If Perl does not need to access the contents of the value then it may not be necessary to provide a translation for that value from C to Perl.</source>
          <target state="translated">例えば、ある関数のパラメータがグローバル変数の内容であるべき場合などに、どの値がCとXSUB関数自身によってのみ使用されるかを識別します。Perlが値の内容にアクセスする必要がない場合は、CからPerlへの変換を提供する必要はないかもしれません。</target>
        </trans-unit>
        <trans-unit id="56f43be29163ab63b1344b6e022e099866950791" translate="yes" xml:space="preserve">
          <source>Identifying DLLs</source>
          <target state="translated">DLLの識別</target>
        </trans-unit>
        <trans-unit id="82508a1705f3161aa990aa2c93c5670f8e0880f2" translate="yes" xml:space="preserve">
          <source>Identity of objects returned from threads</source>
          <target state="translated">スレッドから返されたオブジェクトの識別</target>
        </trans-unit>
        <trans-unit id="322518cb4fde79b98b609332667667f3d3c4e560" translate="yes" xml:space="preserve">
          <source>Idhash-based inside-out implementation with explicit object registry. No destructor is needed and objects are thread safe.</source>
          <target state="translated">Idhashベースのインサイドアウト実装で、明示的なオブジェクトレジストリを備えています。デストラクタは不要で、オブジェクトはスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="bc58745f8a36f6c13d8394fd39a743ccc1e12aee" translate="yes" xml:space="preserve">
          <source>Idhash-based inside-out implementation. Like &lt;code&gt;Name_id&lt;/code&gt; it needs a &lt;code&gt;DESTROY&lt;/code&gt; method and would need &lt;code&gt;CLONE&lt;/code&gt; for thread support.</source>
          <target state="translated">Idhashベースのインサイドアウト実装。 &lt;code&gt;Name_id&lt;/code&gt; と同様に、 &lt;code&gt;DESTROY&lt;/code&gt; メソッドが必要であり、スレッドのサポートには &lt;code&gt;CLONE&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="37c8800e90368fca825ac19f3c1c00b3997debbb" translate="yes" xml:space="preserve">
          <source>If $ENV{'PERLIO_DEBUG'} is not set PerlIO_debug() is a no-op.</source>
          <target state="translated">ENV{'PERLIO_DEBUG'}が設定されていない場合、PerlIO_debug()は実行されません。</target>
        </trans-unit>
        <trans-unit id="34dc71088c30578327b9b7bd86a2add6dfe92c0b" translate="yes" xml:space="preserve">
          <source>If $Term::ANSIColor::AUTOLOCAL is set (see below), it takes precedence over $Term::ANSIColor::AUTORESET, and the latter is ignored.</source>
          <target state="translated">もし $Term::ANSIColor::AUTOLOCAL が設定されている場合(後述)、$Term::ANSIColor::AUTORESET よりも優先され、後者は無視されます。</target>
        </trans-unit>
        <trans-unit id="d7df1e43ea1f957f59393ae695f2cf9b6d2d606b" translate="yes" xml:space="preserve">
          <source>If $Term::ANSIColor::AUTOLOCAL is set, each sequence of color constants will be implicitly preceded by LOCALCOLOR. In other words, the following:</source>
          <target state="translated">もし $Term::ANSIColor::AUTOLOCAL が設定されている場合、色定数の各シーケンスは暗黙のうちに LOCALCOLOR の前に置かれます。つまり、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9886d30e7ae4310a71b5b389e615e24f477c9c12" translate="yes" xml:space="preserve">
          <source>If $Term::ANSIColor::AUTOLOCAL is set, it takes precedence over $Term::ANSIColor::AUTORESET, and the latter is ignored.</source>
          <target state="translated">もし $Term::ANSIColor::AUTOLOCAL が設定されている場合は、$Term::ANSIColor::AUTORESET よりも優先され、後者は無視されます。</target>
        </trans-unit>
        <trans-unit id="00b4b93a6e7c56aaf9898bc10e1ac72d3a78d804" translate="yes" xml:space="preserve">
          <source>If $base doesn't have a trailing colon, the last element of $base is assumed to be a filename. This filename is ignored. Otherwise all path components are assumed to be directories.</source>
          <target state="translated">base の最後にコロンがない場合、$base の最後の要素はファイル名とみなされます。このファイル名は無視されます。それ以外の場合は、すべてのパスコンポーネントがディレクトリであるとみなされます。</target>
        </trans-unit>
        <trans-unit id="e44a850613a15c52040db7b75a563e3363f3a945" translate="yes" xml:space="preserve">
          <source>If $base is not present or '', then $base is set to the current working directory. If $base is relative, then it is converted to absolute form using &lt;code&gt;rel2abs()&lt;/code&gt; . This means that it is taken to be relative to the current working directory.</source>
          <target state="translated">$ baseが存在しないか ''の場合、$ baseは現在の作業ディレクトリに設定されます。$ baseが相対の場合、 &lt;code&gt;rel2abs()&lt;/code&gt; を使用して絶対形式に変換されます。これは、現在の作業ディレクトリからの相対と見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="1ac0ec7cd3bc97fc5c257fe4a45200d456c5936a" translate="yes" xml:space="preserve">
          <source>If $base is not present or '', then $base is set to the current working directory. If $base is relative, then it is converted to absolute form using &lt;code&gt;rel2abs()&lt;/code&gt;. This means that it is taken to be relative to the current working directory.</source>
          <target state="translated">$ baseが存在しないか、 ''の場合、$ baseは現在の作業ディレクトリに設定されます。$ baseが相対的である場合、 &lt;code&gt;rel2abs()&lt;/code&gt; を使用して絶対形式に変換されます。これは、現在の作業ディレクトリを基準にしたものと見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="845e455de01e5f024d6cd4c4973aa19e89db7d23" translate="yes" xml:space="preserve">
          <source>If $base is not present or '', then &lt;a href=&quot;../../cwd&quot;&gt;cwd()&lt;/a&gt; is used. If $base is relative, then it is converted to absolute form using &lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs()&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;../../cwd&quot;&gt;cwd()&lt;/a&gt;.</source>
          <target state="translated">$ baseが存在しないか ''の場合、&lt;a href=&quot;../../cwd&quot;&gt;cwd（）&lt;/a&gt;が使用されます。$ baseが相対の場合、&lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs（）&lt;/a&gt;を使用して絶対形式に変換されます。これは、&lt;a href=&quot;../../cwd&quot;&gt;cwd（）に&lt;/a&gt;関連していると見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="5c40ff51bf83072e14de8451f609e067639c21f4" translate="yes" xml:space="preserve">
          <source>If $base is not present or '', then &lt;a href=&quot;cwd&quot;&gt;cwd()&lt;/a&gt; is used. If $base is relative, then it is converted to absolute form using &lt;a href=&quot;#rel2abs%28%29&quot;&gt;&quot;rel2abs()&quot;&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;cwd&quot;&gt;cwd()&lt;/a&gt;.</source>
          <target state="translated">$ baseが存在しない場合、または ''の場合、&lt;a href=&quot;cwd&quot;&gt;cwd（）&lt;/a&gt;が使用されます。$ baseが相対的である場合、&lt;a href=&quot;#rel2abs%28%29&quot;&gt;「rel2abs（）」&lt;/a&gt;を使用して絶対形式に変換されます。これは、&lt;a href=&quot;cwd&quot;&gt;cwd（）に&lt;/a&gt;関連していると見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="b9272bd7bdd63c187d96603ba9d632df6f83a5a3" translate="yes" xml:space="preserve">
          <source>If $base is not present or '', then the current working directory is used. If $base is relative, then it is converted to absolute form using &lt;code&gt;rel2abs()&lt;/code&gt; . This means that it is taken to be relative to the current working directory.</source>
          <target state="translated">$ baseが存在しないか ''の場合、現在の作業ディレクトリが使用されます。$ baseが相対の場合、 &lt;code&gt;rel2abs()&lt;/code&gt; を使用して絶対形式に変換されます。これは、現在の作業ディレクトリからの相対と見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="b66c3e7b074813162992aae05acc57abf750bc24" translate="yes" xml:space="preserve">
          <source>If $base is not present or '', then the current working directory is used. If $base is relative, then it is converted to absolute form using &lt;code&gt;rel2abs()&lt;/code&gt;. This means that it is taken to be relative to the current working directory.</source>
          <target state="translated">$ baseが存在しない場合、または ''の場合、現在の作業ディレクトリが使用されます。$ baseが相対的である場合、 &lt;code&gt;rel2abs()&lt;/code&gt; を使用して絶対形式に変換されます。これは、現在の作業ディレクトリを基準にしたものと見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="1e5fe1a187e17b34fb3d5857b8fec9a663cd647f" translate="yes" xml:space="preserve">
          <source>If $chld_in begins with &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt;, then $chld_in will be closed in the parent, and the child will read from it directly. If $chld_out or $chld_err begins with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, then the child will send output directly to that filehandle. In both cases, there will be a &lt;a href=&quot;http://man.he.net/man2/dup&quot;&gt;dup(2)&lt;/a&gt; instead of a &lt;a href=&quot;http://man.he.net/man2/pipe&quot;&gt;pipe(2)&lt;/a&gt; made.</source>
          <target state="translated">$ chld_inが &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt; で始まる場合、$ chld_inは親で閉じられ、子はそこから直接読み取ります。 $ chld_outまたは$ chld_errが &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まる場合、子はそのファイルハンドルに直接出力を送信します。どちらの場合も、&lt;a href=&quot;http://man.he.net/man2/pipe&quot;&gt;pipe（2）の&lt;/a&gt;代わりに&lt;a href=&quot;http://man.he.net/man2/dup&quot;&gt;dup &lt;/a&gt;（2）が作成されます。</target>
        </trans-unit>
        <trans-unit id="3eeec7a0508f8bfb175a7dfc1c9f776420700e6b" translate="yes" xml:space="preserve">
          <source>If $chld_out is a string (that is, a bareword filehandle rather than a glob or a reference) and it begins with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, then the child will send output directly to that file handle. If $chld_in is a string that begins with &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt; , then $chld_in will be closed in the parent, and the child will read from it directly. In both cases, there will be a dup(2) instead of a pipe(2) made.</source>
          <target state="translated">$ chld_outが文字列（つまり、グロブや参照ではなくベアワードのファイルハンドル）であり、 &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まる場合、子はそのファイルハンドルに直接出力を送信します。$ chld_inが &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt; で始まる文字列の場合、$ chld_inは親で閉じられ、子はそれから直接読み取ります。どちらの場合も、作成されたpipe（2）の代わりにdup（2）が存在します。</target>
        </trans-unit>
        <trans-unit id="bb5d964b870841cdc4d8247b114d6ed7feacad03" translate="yes" xml:space="preserve">
          <source>If $chld_out is a string (that is, a bareword filehandle rather than a glob or a reference) and it begins with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, then the child will send output directly to that file handle. If $chld_in is a string that begins with &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt;, then $chld_in will be closed in the parent, and the child will read from it directly. In both cases, there will be a &lt;a href=&quot;http://man.he.net/man2/dup&quot;&gt;dup(2)&lt;/a&gt; instead of a &lt;a href=&quot;http://man.he.net/man2/pipe&quot;&gt;pipe(2)&lt;/a&gt; made.</source>
          <target state="translated">$ chld_outが文字列（つまり、globや参照ではなくベアワードファイルハンドル）であり、 &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まる場合、子はそのファイルハンドルに直接出力を送信します。$ chld_inが &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt; で始まる文字列の場合、$ chld_inは親で閉じられ、子はそこから直接読み取ります。どちらの場合も、&lt;a href=&quot;http://man.he.net/man2/pipe&quot;&gt;pipe（2）の&lt;/a&gt;代わりに&lt;a href=&quot;http://man.he.net/man2/dup&quot;&gt;dup &lt;/a&gt;（2）が作成されます。</target>
        </trans-unit>
        <trans-unit id="44fc8fa9695e13537785e072991da9317e572016" translate="yes" xml:space="preserve">
          <source>If $device is given, this device is used to bind the source endpoint before sending the ping packet. I believe this only works with superuser privileges and with udp and icmp protocols at this time.</source>
          <target state="translated">device が与えられた場合、このデバイスは ping パケットを送信する前に送信元のエンドポイントをバインドするために使用されます。現時点では、スーパーユーザ権限と udp および icmp プロトコルでのみ動作すると思います。</target>
        </trans-unit>
        <trans-unit id="c0ccd65f83616cd6cb2edfc67d2ca291d582e3dc" translate="yes" xml:space="preserve">
          <source>If $dont_execute is true it will only print what it was going to do without actually doing it. Default is false.</source>
          <target state="translated">dont_execute を true にすると、実際に実行せずに実行しようとしていたことだけを表示します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="4487f23cdc43d77eefda03ffdb355fcd16d21554" translate="yes" xml:space="preserve">
          <source>If $dry_run is true it will only print what it was going to do without actually doing it. Default is false.</source>
          <target state="translated">dry_runがtrueの場合は、実際には実行せずに実行しようとしていたことだけを表示します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="18c02a1762fa9a8596890767dac4fd996ccee7b8" translate="yes" xml:space="preserve">
          <source>If $file is not given, output goes to STDOUT.</source>
          <target state="translated">file が指定されない場合、出力は STDOUT に出力されます。</target>
        </trans-unit>
        <trans-unit id="d0d307167134c6f267f7b1e5ea27d0a25a9d1edd" translate="yes" xml:space="preserve">
          <source>If $lang1 is not a valid language tag, returns empty-list in a list context, undef in a scalar context.</source>
          <target state="translated">lang1 が有効な言語タグではない場合、リストコンテキストでは空のリストを返し、スカラコンテキストでは undef を返します。</target>
        </trans-unit>
        <trans-unit id="6adb44f6d344c97f88c0df71861fe153cb8933a6" translate="yes" xml:space="preserve">
          <source>If $n is -12, the following values, F(0) to F(12), are returned:</source>
          <target state="translated">n が -12 の場合は、次の値 F(0)から F(12)が返されます。</target>
        </trans-unit>
        <trans-unit id="88b3052cab9399b49f31b3d6abdfc51fc8199576" translate="yes" xml:space="preserve">
          <source>If $n is -12, the following values, L(0) to L(-12), are returned:</source>
          <target state="translated">nが-12の場合、以下の値、L(0)からL(-12)までの値が返されます。</target>
        </trans-unit>
        <trans-unit id="5ee23960e33f02c0ec76877b3b88bcea62b52eb5" translate="yes" xml:space="preserve">
          <source>If $options{allow_variables} is true it will leave &lt;code&gt;'$(FOO)'&lt;/code&gt; make variables untouched. If false they will be escaped like any other &lt;code&gt;$&lt;/code&gt; . Defaults to true.</source>
          <target state="translated">$ options {allow_variables}がtrueの場合、 &lt;code&gt;'$(FOO)'&lt;/code&gt; のままにして変数を変更しません。falseの場合、他の &lt;code&gt;$&lt;/code&gt; と同様にエスケープされます。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="5af890a74a4e63465dd086ae3936bc7cc991986f" translate="yes" xml:space="preserve">
          <source>If $options{allow_variables} is true it will leave &lt;code&gt;'$(FOO)'&lt;/code&gt; make variables untouched. If false they will be escaped like any other &lt;code&gt;$&lt;/code&gt;. Defaults to true.</source>
          <target state="translated">$ options {allow_variables}がtrueの場合、 &lt;code&gt;'$(FOO)'&lt;/code&gt; のままになり、変数は変更されません。falseの場合、他の &lt;code&gt;$&lt;/code&gt; と同じようにエスケープされます。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="7e4290bb3a94a4f28c693632b42d671f5b272d5b" translate="yes" xml:space="preserve">
          <source>If $opts{allow_variables} is true, make variables of the form &lt;code&gt;$(...)&lt;/code&gt; will not be escaped. Other &lt;code&gt;$&lt;/code&gt; will. Default is to escape all &lt;code&gt;$&lt;/code&gt; .</source>
          <target state="translated">$ opts {allow_variables}がtrueの場合、 &lt;code&gt;$(...)&lt;/code&gt; 形式のmake変数はエスケープされません。他の &lt;code&gt;$&lt;/code&gt; になります。デフォルトでは、すべての &lt;code&gt;$&lt;/code&gt; をエスケープします。</target>
        </trans-unit>
        <trans-unit id="45a9cc1fe09732d92a99ea0ef6a79df5a1201010" translate="yes" xml:space="preserve">
          <source>If $opts{allow_variables} is true, make variables of the form &lt;code&gt;$(...)&lt;/code&gt; will not be escaped. Other &lt;code&gt;$&lt;/code&gt; will. Default is to escape all &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="translated">$ opts {allow_variables}がtrueの場合、 &lt;code&gt;$(...)&lt;/code&gt; 形式のmake変数はエスケープされません。他の &lt;code&gt;$&lt;/code&gt; 意志。デフォルトでは、すべての &lt;code&gt;$&lt;/code&gt; をエスケープします。</target>
        </trans-unit>
        <trans-unit id="855199c44e171a04babf60aa36fe8d5f139967b6" translate="yes" xml:space="preserve">
          <source>If $opts{append} is true the $file will be appended to rather than overwritten. Default is to overwrite.</source>
          <target state="translated">opts{append}を true にすると、$opts{append}は上書きではなく追加されます。デフォルトは上書きです。</target>
        </trans-unit>
        <trans-unit id="6f940e23e748b82cd99453c8e14fb88e03638ce9" translate="yes" xml:space="preserve">
          <source>If $path and $base appear to be on two different volumes, we will not attempt to resolve the two paths, and we will instead simply return $path. Note that previous versions of this module ignored the volume of $base, which resulted in garbage results part of the time.</source>
          <target state="translated">path と $base が二つの異なるボリューム上にあるように見える場合は、 二つのパスを解決しようとはせず、代わりに単に $path を返します。このモジュールの以前のバージョンでは、 $base のボリュームを無視していたため、結果の一部がゴミになっていたことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cbae8edca75030504736a7e9ba0e1664c9973d5c" translate="yes" xml:space="preserve">
          <source>If $path is absolute, it is cleaned up and returned using &lt;a href=&quot;#canonpath%28%29&quot;&gt;&quot;canonpath()&quot;&lt;/a&gt;.</source>
          <target state="translated">$ pathが絶対値の場合、&lt;a href=&quot;#canonpath%28%29&quot;&gt;「canonpath（）」&lt;/a&gt;を使用してクリーンアップされて返されます。</target>
        </trans-unit>
        <trans-unit id="850236350e7bb82f14f3904d51572fc6195796da" translate="yes" xml:space="preserve">
          <source>If $path is absolute, it is cleaned up and returned using &lt;a href=&quot;#canonpath()&quot;&gt;canonpath()&lt;/a&gt;.</source>
          <target state="translated">$ pathが絶対パスの場合、クリーンアップされ、&lt;a href=&quot;#canonpath()&quot;&gt;canonpath（）&lt;/a&gt;を使用して返されます。</target>
        </trans-unit>
        <trans-unit id="8dd162a4e3a5b7fb03319f43889033f3ce26c0ac" translate="yes" xml:space="preserve">
          <source>If $path is already absolute, it is returned and $base is ignored.</source>
          <target state="translated">パスがすでに絶対値である場合は、それが返され、 $base は無視されます。</target>
        </trans-unit>
        <trans-unit id="886dc2f5228118ff9d61b100bc53fdb8e15c29aa" translate="yes" xml:space="preserve">
          <source>If $path is relative, it is converted to absolute form using &lt;a href=&quot;#rel2abs%28%29&quot;&gt;&quot;rel2abs()&quot;&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;cwd&quot;&gt;cwd()&lt;/a&gt;.</source>
          <target state="translated">$ pathが相対パスの場合、&lt;a href=&quot;#rel2abs%28%29&quot;&gt;「rel2abs（）」&lt;/a&gt;を使用して絶対形式に変換されます。これは、&lt;a href=&quot;cwd&quot;&gt;cwd（）に&lt;/a&gt;関連していると見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="777c7fd35866ed59635fd89f40d3d520a0dbf9c9" translate="yes" xml:space="preserve">
          <source>If $path is relative, it is converted to absolute form using &lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs()&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;../../cwd&quot;&gt;cwd()&lt;/a&gt;.</source>
          <target state="translated">$ pathが相対パスの場合、&lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs（）&lt;/a&gt;を使用して絶対パスに変換されます。これは、&lt;a href=&quot;../../cwd&quot;&gt;cwd（）に&lt;/a&gt;関連していると見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="7ca3a7041ed2c9c63e8a6e3a8ccf54b7c562514d" translate="yes" xml:space="preserve">
          <source>If $path is relative, it is converted to absolute form using &lt;code&gt;rel2abs()&lt;/code&gt; . This means that it is taken to be relative to the current working directory.</source>
          <target state="translated">$ pathが相対パスの場合、 &lt;code&gt;rel2abs()&lt;/code&gt; を使用して絶対パスに変換されます。これは、現在の作業ディレクトリからの相対と見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="e06af1fee89e76c48b343a46105f41869071f188" translate="yes" xml:space="preserve">
          <source>If $path is relative, it is converted to absolute form using &lt;code&gt;rel2abs()&lt;/code&gt;. This means that it is taken to be relative to the current working directory.</source>
          <target state="translated">$ pathが相対パスの場合、 &lt;code&gt;rel2abs()&lt;/code&gt; を使用して絶対形式に変換されます。これは、現在の作業ディレクトリを基準にしたものと見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="5254527bc2e7fffb01bf04870bf9b3803ac84a3a" translate="yes" xml:space="preserve">
          <source>If $skip is undefined then the skip file will be autodetected and used if it is found. If $skip is a reference to an array then it is assumed the array contains the list of patterns, if $skip is a true non reference it is assumed to be the filename holding the list of patterns, any other value of $skip is taken to mean that no install filtering should occur.</source>
          <target state="translated">skip が未定義の場合は、スキップファイルが見つかった場合に自動検出されて使用されます。skip が配列への参照の場合は、配列にパターンのリストが含まれているものと見なします。skip が真の非参照の場合は、パターンのリストを保持するファイル名と見なします。</target>
        </trans-unit>
        <trans-unit id="8fa5810ef2976d0d9f6da3cb5784a5117836d30e" translate="yes" xml:space="preserve">
          <source>If $tos is given, this ToS is configured into the socket.</source>
          <target state="translated">tosが与えられた場合、このToSはソケットに設定されます。</target>
        </trans-unit>
        <trans-unit id="92f994b9259d086e448ddc0c57c689110cb3a4ae" translate="yes" xml:space="preserve">
          <source>If $uninstall_shadows is true any differing versions throughout @INC will be uninstalled. This is &quot;make install UNINST=1&quot;</source>
          <target state="translated">uninstall_shadowsがtrueの場合、@INC全体で異なるバージョンのものはすべてアンインストールされます。これは &quot;make install UNINST=1&quot; です。</target>
        </trans-unit>
        <trans-unit id="d25dc89b5c8f1043b2555a0a5b1ef64713bc4410" translate="yes" xml:space="preserve">
          <source>If $verbose is true, will print out each file removed. Default is false.</source>
          <target state="translated">verbose を true にすると、削除されたファイルをそれぞれ出力します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="bcca2238b940008ca2f6edea6b116ca4f08340a0" translate="yes" xml:space="preserve">
          <source>If $verbose is true, will print out each file removed. Default is false. This is &quot;make install VERBINST=1&quot;. $verbose values going up to 5 show increasingly more diagnostics output.</source>
          <target state="translated">verbose を true にすると、削除されたファイルをそれぞれ出力します。デフォルトはfalseです。これは「make install VERBINST=1」です。verbose の値が 5 に上がるほど、診断結果の出力が増えていきます。</target>
        </trans-unit>
        <trans-unit id="769e2245fa144a60a2da225854d87529340273af" translate="yes" xml:space="preserve">
          <source>If &amp;lt;tos&amp;gt; is given, this ToS is configured into the socket.</source>
          <target state="translated">&amp;lt;tos&amp;gt;が指定されている場合、このToSはソケットに構成されます。</target>
        </trans-unit>
        <trans-unit id="fe6210a09cf838e292147ff60a09be55f53fc7bf" translate="yes" xml:space="preserve">
          <source>If 'pattern' is an empty string, the last</source>
          <target state="translated">pattern' が空文字列の場合、最後の</target>
        </trans-unit>
        <trans-unit id="0ebb8bcb9771923015eb97e7f45b5b7f4e5fde8a" translate="yes" xml:space="preserve">
          <source>If 0 is given as the version number, then any version is supported.</source>
          <target state="translated">バージョン番号に 0 が与えられた場合は、どのバージョンでもサポートされます。</target>
        </trans-unit>
        <trans-unit id="1ce161c1d1a95615015e87f6deb5c4e15fba876e" translate="yes" xml:space="preserve">
          <source>If 0, allows</source>
          <target state="translated">0の場合は</target>
        </trans-unit>
        <trans-unit id="e3e28f04766a1a5f37a30a978712cb8019a0f8ec" translate="yes" xml:space="preserve">
          <source>If 0, perl ignores setlocale() failing. May be useful with some strange</source>
          <target state="translated">0の場合、perlはsetlocale()の失敗を無視します。いくつかの奇妙な</target>
        </trans-unit>
        <trans-unit id="0fcc1cd2f54ca974c2f03b70436631faa5fcbfff" translate="yes" xml:space="preserve">
          <source>If 0, perl would not warn of in case of unwarranted free(). With older perls this might be useful in conjunction with the module DB_File, which was buggy when dynamically linked and OMF-built.</source>
          <target state="translated">0 を指定すると、perl は正当でない free()を実行した場合に警告を発しません。古い Perl では、これは動的にリンクされて OMF でビルドされたときにバグがあった DB_File モジュールと一緒に使うと便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="0184b287a86a499460e472243734776163d62a28" translate="yes" xml:space="preserve">
          <source>If 0, then you have specified the G_DISCARD flag.</source>
          <target state="translated">0 の場合は G_DISCARD フラグを指定したことになります。</target>
        </trans-unit>
        <trans-unit id="59622b7a1ad0df9c79750964aae25dbf7a4a54d5" translate="yes" xml:space="preserve">
          <source>If 1, then the item actually returned by the Perl subroutine will be stored on the Perl stack - the section</source>
          <target state="translated">1の場合、Perlサブルーチンが実際に返した項目はPerlスタックに格納されます。</target>
        </trans-unit>
        <trans-unit id="f287e1183da76005aad8b01623d1574c97f08bac" translate="yes" xml:space="preserve">
          <source>If 1, then the item actually returned by the Perl subroutine will be stored on the Perl stack - the section &lt;a href=&quot;#Returning-a-Scalar&quot;&gt;&quot;Returning a Scalar&quot;&lt;/a&gt; shows how to access this value on the stack. Remember that regardless of how many items the Perl subroutine returns, only the last one will be accessible from the stack - think of the case where only one value is returned as being a list with only one element. Any other items that were returned will not exist by the time control returns from the</source>
          <target state="translated">1の場合、Perlサブルーチンによって実際に返される項目は、Perlスタックに格納されます。&lt;a href=&quot;#Returning-a-Scalar&quot;&gt;「スカラーを返す」&lt;/a&gt;セクションでは、スタック上のこの値にアクセスする方法を示しています。 Perlサブルーチンが返すアイテムの数に関係なく、スタックからアクセスできるのは最後のアイテムだけであることに注意してください。1つの値のみが返される場合は、要素が1つだけのリストであると考えてください。返された他のアイテムは、コントロールがから戻るまでには存在しません。</target>
        </trans-unit>
        <trans-unit id="dea4460b4f37611ed7726bdc86a6a203f8857086" translate="yes" xml:space="preserve">
          <source>If 1. and 2. didn't work, the environment variables &lt;code&gt;LC_ALL&lt;/code&gt; and &lt;code&gt;LANG&lt;/code&gt; (in that order) are matched for anything looking like UTF-8, and if any found, &lt;code&gt;:utf8&lt;/code&gt; is used as the default encoding for the open pragma.</source>
          <target state="translated">1.と2.が機能しなかった場合、環境変数 &lt;code&gt;LC_ALL&lt;/code&gt; と &lt;code&gt;LANG&lt;/code&gt; （この順序で）はUTF-8のようなものに一致し、見つかった場合は、 &lt;code&gt;:utf8&lt;/code&gt; がopenプラグマのデフォルトのエンコーディングとして使用されます。</target>
        </trans-unit>
        <trans-unit id="564ba04f0c77bd18f1de6b5d8d1c4de41e90203f" translate="yes" xml:space="preserve">
          <source>If 1. didn't work but we are under the locale pragma, the environment variables &lt;code&gt;LC_ALL&lt;/code&gt; and &lt;code&gt;LANG&lt;/code&gt; (in that order) are matched for encodings (the part after &quot;&lt;code&gt;.&lt;/code&gt;&quot;, if any), and if any found, that is used as the default encoding for the open pragma.</source>
          <target state="translated">1.が機能せず、localeプラグマの下にいる場合、環境変数 &lt;code&gt;LC_ALL&lt;/code&gt; および &lt;code&gt;LANG&lt;/code&gt; （この順序で）がエンコーディング（「 &lt;code&gt;.&lt;/code&gt; 」の後の部分）と一致し、見つかった場合はそれが使用されます。 openプラグマのデフォルトのエンコーディングとして。</target>
        </trans-unit>
        <trans-unit id="3a1afd51d6a3da0d6403cee52200d8b304585c08" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#PL_parser-%3Ebufptr&quot;&gt;&quot;PL_parser-&amp;gt;bufptr&quot;&lt;/a&gt; is pointing to the very end of the current chunk (i.e., the current chunk has been entirely consumed), normally the current chunk will be discarded at the same time that the new chunk is read in. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;LEX_KEEP_PREVIOUS&lt;/code&gt; bit set, the current chunk will not be discarded. If the current chunk has not been entirely consumed, then it will not be discarded regardless of the flag.</source>
          <target state="translated">&lt;a href=&quot;#PL_parser-%3Ebufptr&quot;&gt;「PL_parser-&amp;gt; bufptr」&lt;/a&gt;が現在のチャンクの最後を指している場合（つまり、現在のチャンクが完全に消費されている場合）、通常、現在のチャンクは新しいチャンクが読み込まれると同時に破棄されます。 &lt;code&gt;flags&lt;/code&gt; 場合持っている &lt;code&gt;LEX_KEEP_PREVIOUS&lt;/code&gt; ビットセットを、現在のチャンクは破棄されることはありません。現在のチャンクが完全に消費されていない場合は、フラグに関係なく破棄されません。</target>
        </trans-unit>
        <trans-unit id="5cc7e264f1e9eeedc8d7e2b14c1a68dd77cae7b4" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; is pointing to the very end of the current chunk (i.e., the current chunk has been entirely consumed), normally the current chunk will be discarded at the same time that the new chunk is read in. If</source>
          <target state="translated">&lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt; bufptr&lt;/a&gt;が現在のチャンクの最後を指している場合（つまり、現在のチャンクが完全に消費されている場合）、通常、現在のチャンクは新しいチャンクが読み込まれると同時に破棄されます。</target>
        </trans-unit>
        <trans-unit id="ab9b9dc2a96c1b74c9cadb45dfb3263c99d73a6b" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#do-EXPR&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; can read the file but cannot compile it, it returns &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; and sets an error message in &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;#do-EXPR&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; cannot read the file, it returns undef and sets &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt; to the error. Always check &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt; first, as compilation could fail in a way that also sets &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt;. If the file is successfully compiled, &lt;a href=&quot;#do-EXPR&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; returns the value of the last expression evaluated.</source>
          <target state="translated">場合&lt;a href=&quot;#do-EXPR&quot;&gt; &lt;code&gt;do&lt;/code&gt; &lt;/a&gt;、ファイルを読み取ることができますが、それをコンパイルすることはできません、それは返し&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; を&lt;/a&gt;して、エラーメッセージを設定します&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#do-EXPR&quot;&gt; &lt;code&gt;do&lt;/code&gt; &lt;/a&gt;がファイルを読み取れない場合は、undefを返し、&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; &lt;/a&gt;を設定します。エラーに。&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;設定する方法でコンパイルが失敗する可能性があるため、常に最初に$ @を確認してください&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; &lt;/a&gt;。ファイルが正常にコンパイルされた場合、&lt;a href=&quot;#do-EXPR&quot;&gt; &lt;code&gt;do&lt;/code&gt; &lt;/a&gt;は最後に評価された式の値を返します。</target>
        </trans-unit>
        <trans-unit id="5bf2b0be95e3bf2e4bd6ed03a9822036447b6309" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#readline-EXPR&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; encounters an operating system error, &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt; will be set with the corresponding error message. It can be helpful to check &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt; when you are reading from filehandles you don't trust, such as a tty or a socket. The following example uses the operator form of &lt;a href=&quot;#readline-EXPR&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; and dies if the result is not defined.</source>
          <target state="translated">&lt;a href=&quot;#readline-EXPR&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt;でオペレーティングシステムエラーが発生した場合、&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; &lt;/a&gt;対応するエラーメッセージで設定されます。&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; &lt;/a&gt;を確認すると便利です。 ttyやソケットなどの信頼できないファイルハンドルから読み取る場合。次の例では、&lt;a href=&quot;#readline-EXPR&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt;の演算子形式を使用し、結果が定義されていない場合は終了します。</target>
        </trans-unit>
        <trans-unit id="878d2594c5d9d20b43a7cfef25e3d9ca8c531de7" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#srand-EXPR&quot;&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/a&gt; is not called explicitly, it is called implicitly without a parameter at the first use of the &lt;a href=&quot;#rand-EXPR&quot;&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/a&gt; operator. However, there are a few situations where programs are likely to want to call &lt;a href=&quot;#srand-EXPR&quot;&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/a&gt;. One is for generating predictable results, generally for testing or debugging. There, you use &lt;code&gt;srand($seed)&lt;/code&gt;, with the same &lt;code&gt;$seed&lt;/code&gt; each time. Another case is that you may want to call &lt;a href=&quot;#srand-EXPR&quot;&gt;&lt;code&gt;srand&lt;/code&gt;&lt;/a&gt; after a &lt;a href=&quot;#fork&quot;&gt;&lt;code&gt;fork&lt;/code&gt;&lt;/a&gt; to avoid child processes sharing the same seed value as the parent (and consequently each other).</source>
          <target state="translated">&lt;a href=&quot;#srand-EXPR&quot;&gt; &lt;code&gt;srand&lt;/code&gt; &lt;/a&gt;が明示的に呼び出されない場合、&lt;a href=&quot;#rand-EXPR&quot;&gt; &lt;code&gt;rand&lt;/code&gt; &lt;/a&gt;演算子を最初に使用するときに、パラメーターなしで暗黙的に呼び出されます。ただし、プログラムが&lt;a href=&quot;#srand-EXPR&quot;&gt; &lt;code&gt;srand&lt;/code&gt; &lt;/a&gt;を呼び出したい場合がいくつかあります。 1つは、予測可能な結果を​​生成するためのもので、通常はテストまたはデバッグ用です。そこでは、毎回同じ &lt;code&gt;$seed&lt;/code&gt; を使用して &lt;code&gt;srand($seed)&lt;/code&gt; を使用します。もう1つのケースは、子プロセスが親と同じシード値を共有することを回避するために、&lt;a href=&quot;#fork&quot;&gt; &lt;code&gt;fork&lt;/code&gt; &lt;/a&gt;後に&lt;a href=&quot;#srand-EXPR&quot;&gt; &lt;code&gt;srand&lt;/code&gt; &lt;/a&gt;を呼び出すことです（したがって、互いに）。</target>
        </trans-unit>
        <trans-unit id="d10fb228e7791a04f02a88f131ae6798266242b1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#stat-FILEHANDLE&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; is passed the special filehandle consisting of an underline, no stat is done, but the current contents of the stat structure from the last &lt;a href=&quot;#stat-FILEHANDLE&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt;, or filetest are returned. Example:</source>
          <target state="translated">アンダースコアで構成される特別なファイルハンドルが&lt;a href=&quot;#stat-FILEHANDLE&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;に渡された場合、statは実行されませんが、最後の&lt;a href=&quot;#stat-FILEHANDLE&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt; &lt;code&gt;lstat&lt;/code&gt; &lt;/a&gt;、またはfiletestからのstat構造の現在の内容が返されます。例：</target>
        </trans-unit>
        <trans-unit id="baa00f7897b1c66fe0a596f5bb93527533128be4" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; cannot be found (or &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console&quot;&gt;Win32::Console&lt;/a&gt; if running under Windows) tests will be run without color.</source>
          <target state="translated">場合&lt;a href=&quot;../../term/ansicolor&quot;&gt;ターム:: ANSICOLORが&lt;/a&gt;見つからない（または&lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console&quot;&gt;Win32の::コンソール&lt;/a&gt; Windowsで実行する場合）のテストは、色なしで実行されます。</target>
        </trans-unit>
        <trans-unit id="42a72e58cfc32531fbd4fab5178d34e628485bf7" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../cpan/meta&quot;&gt;CPAN::Meta&lt;/a&gt; is installed, MakeMaker will automatically generate</source>
          <target state="translated">場合は&lt;a href=&quot;../cpan/meta&quot;&gt;CPAN ::メタが&lt;/a&gt;インストールされている、のMakeMakerが自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="e5d244370ef566711e04ba5145e26efe3e9b271c" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN::Meta&lt;/a&gt; is installed, MakeMaker will automatically generate</source>
          <target state="translated">場合は&lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN ::メタが&lt;/a&gt;インストールされている、のMakeMakerが自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="f3a37900ec3a9e29958a45c25ea701d35b6e343f" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;IO::Socket::IP&quot;&gt;IO::Socket::IP&lt;/a&gt; 0.25 or later is installed, HTTP::Tiny will use it instead of &lt;a href=&quot;IO::Socket::INET&quot;&gt;IO::Socket::INET&lt;/a&gt; for transparent support for both IPv4 and IPv6.</source>
          <target state="translated">もし&lt;a href=&quot;IO::Socket::IP&quot;&gt;IO ::ソケット:: IP&lt;/a&gt; 0.25以降がインストールされている、HTTP ::タイニーがするのではなく、それを使用します&lt;a href=&quot;IO::Socket::INET&quot;&gt;IO ::ソケット:: INETは&lt;/a&gt;、IPv4とIPv6の両方のために、透明支持体のために。</target>
        </trans-unit>
        <trans-unit id="cd755112fc59cf8f24f51046f0dfaee1c7bd92bf" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;Term::ANSIColor&quot;&gt;Term::ANSIColor&lt;/a&gt; cannot be found (and &lt;a href=&quot;Win32::Console::ANSI&quot;&gt;Win32::Console::ANSI&lt;/a&gt; if running under Windows) tests will be run without color.</source>
          <target state="translated">場合&lt;a href=&quot;Term::ANSIColor&quot;&gt;ターム:: ANSICOLORが&lt;/a&gt;見つからない（と&lt;a href=&quot;Win32::Console::ANSI&quot;&gt;Win32の::コンソール:: ANSI&lt;/a&gt; Windowsで実行する場合）のテストは、色なしで実行されます。</target>
        </trans-unit>
        <trans-unit id="4a94e167e7f1c0794c5a0b78b8cee155e32baf87" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;http://man.he.net/man2/umask&quot;&gt;umask(2)&lt;/a&gt; is not implemented on your system and you are trying to restrict access for</source>
          <target state="translated">場合&lt;a href=&quot;http://man.he.net/man2/umask&quot;&gt;のumask（2）は、&lt;/a&gt;システム上に実装されていない、あなたはのためのアクセスを制限しようとしています</target>
        </trans-unit>
        <trans-unit id="66c3ec58f6b5e85635c3d7dfd311e4342f5aba20" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;use locale&lt;/code&gt;&lt;/a&gt; (including &lt;code&gt;use locale ':not_characters'&lt;/code&gt;) is in effect and &lt;a href=&quot;posix#setlocale&quot;&gt;&lt;code&gt;POSIX::setlocale&lt;/code&gt;&lt;/a&gt; has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">もし&lt;a href=&quot;locale&quot;&gt; &lt;code&gt;use locale&lt;/code&gt; &lt;/a&gt;（含む &lt;code&gt;use locale ':not_characters'&lt;/code&gt; ）有効であり、&lt;a href=&quot;posix#setlocale&quot;&gt; &lt;code&gt;POSIX::setlocale&lt;/code&gt; &lt;/a&gt;呼び出された、フォーマットされた浮動小数点数で小数点の区切り文字に使用する文字は、によって影響される &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール。&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;および&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="108eca6848696cd0de287a231d549cff82edd6aa" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;-t&lt;/b&gt; is given, &lt;b&gt;pod2text&lt;/b&gt; will take the current width of your screen from this environment variable, if available. It overrides terminal width information in TERMCAP.</source>
          <target state="translated">&lt;b&gt;-t&lt;/b&gt;が指定されている場合、&lt;b&gt;pod2text&lt;/b&gt;は、使用可能な場合、この環境変数から画面の現在の幅を取得します。TERMCAPの端末幅情報を上書きします。</target>
        </trans-unit>
        <trans-unit id="fc2c6665b79caef5aa91e98d089e901b7263b1c2" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;-t&lt;/b&gt; is given, &lt;b&gt;pod2text&lt;/b&gt; will use the contents of this environment variable if available to determine the correct formatting sequences for your current terminal device.</source>
          <target state="translated">&lt;b&gt;-t&lt;/b&gt;が指定されている場合、&lt;b&gt;pod2text&lt;/b&gt;は、使用可能な場合はこの環境変数の内容を使用して、現在の端末デバイスの正しいフォーマットシーケンスを決定します。</target>
        </trans-unit>
        <trans-unit id="9c867f84603d2f4182710d040ee18f9885c092cc" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;Locale::Maketext::Lexicon&lt;/b&gt; is not present, it implements a minimal localization function by simply interpolating &lt;code&gt;[_1]&lt;/code&gt; with the first argument, &lt;code&gt;[_2]&lt;/code&gt; with the second, etc. Interpolated function like &lt;code&gt;[quant,_1]&lt;/code&gt; are treated as &lt;code&gt;[_1]&lt;/code&gt; , with the sole exception of &lt;code&gt;[tense,_1,X]&lt;/code&gt; , which will append &lt;code&gt;ing&lt;/code&gt; to &lt;code&gt;_1&lt;/code&gt; when X is &lt;code&gt;present&lt;/code&gt; , or appending &lt;code&gt;ed&lt;/code&gt; to &amp;lt;_1&amp;gt; otherwise.</source>
          <target state="translated">場合&lt;b&gt;ロケール:: MAKETEXT ::辞書が&lt;/b&gt;存在しない場合、それは単純に補間することによって、最小限のローカライズ機能を実現 &lt;code&gt;[_1]&lt;/code&gt; 、最初の引数を指定して &lt;code&gt;[_2]&lt;/code&gt; のような等秒、補間関数と &lt;code&gt;[quant,_1]&lt;/code&gt; として扱われます &lt;code&gt;[_1]&lt;/code&gt; 、唯一の例外 &lt;code&gt;[tense,_1,X]&lt;/code&gt; 追加されます、 &lt;code&gt;ing&lt;/code&gt; に &lt;code&gt;_1&lt;/code&gt; Xである場合に &lt;code&gt;present&lt;/code&gt; 、又は追加 &lt;code&gt;ed&lt;/code&gt; に&amp;lt;_1&amp;gt;そうでありません。</target>
        </trans-unit>
        <trans-unit id="3da75cd17f8484e1cc0ad4bbfd2ed5b8f369d8c3" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;Locale::Maketext::Lexicon&lt;/b&gt; is not present, it implements a minimal localization function by simply interpolating &lt;code&gt;[_1]&lt;/code&gt; with the first argument, &lt;code&gt;[_2]&lt;/code&gt; with the second, etc. Interpolated function like &lt;code&gt;[quant,_1]&lt;/code&gt; are treated as &lt;code&gt;[_1]&lt;/code&gt;, with the sole exception of &lt;code&gt;[tense,_1,X]&lt;/code&gt;, which will append &lt;code&gt;ing&lt;/code&gt; to &lt;code&gt;_1&lt;/code&gt; when X is &lt;code&gt;present&lt;/code&gt;, or appending &lt;code&gt;ed&lt;/code&gt; to &amp;lt;_1&amp;gt; otherwise.</source>
          <target state="translated">&lt;b&gt;Locale :: Maketext :: Lexicon&lt;/b&gt;が存在しない場合は、 &lt;code&gt;[_2]&lt;/code&gt; 1 &lt;code&gt;[_1]&lt;/code&gt; を最初の引数で、[_ 2 ]を2番目の引数で補間するだけで、最小限のローカリゼーション関数を実装します。 &lt;code&gt;[quant,_1]&lt;/code&gt; ような補間関数は[として扱われます &lt;code&gt;[_1]&lt;/code&gt; 唯一の例外 &lt;code&gt;[tense,_1,X]&lt;/code&gt; 追加されます、 &lt;code&gt;ing&lt;/code&gt; に &lt;code&gt;_1&lt;/code&gt; Xである場合に &lt;code&gt;present&lt;/code&gt; 、又は追加 &lt;code&gt;ed&lt;/code&gt; に&amp;lt;_1&amp;gt;そうでありません。</target>
        </trans-unit>
        <trans-unit id="3079127a0d6aa2996f8f83dac436403e0868d7e3" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;all&lt;/b&gt; of these are the case, then you need to set the &lt;code&gt;$eof&lt;/code&gt; parameter to true on the final call (and only the final call) to &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; .</source>
          <target state="translated">場合は&lt;b&gt;、すべての&lt;/b&gt;これらのはケースです、あなたは設定する必要があります &lt;code&gt;$eof&lt;/code&gt; への最終コール（とのみ、最終的な呼び出し）にパラメータをtrueに &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0055cca9e96f566b053907d319402c20f817d1a7" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;all&lt;/b&gt; of these are the case, then you need to set the &lt;code&gt;$eof&lt;/code&gt; parameter to true on the final call (and only the final call) to &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt;.</source>
          <target state="translated">場合は&lt;b&gt;、すべての&lt;/b&gt;これらのはケースです、あなたは設定する必要があります &lt;code&gt;$eof&lt;/code&gt; への最終コール（とのみ、最終的な呼び出し）にパラメータをtrueに &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21045907ee178d775e967c06cc19006db36b57f1" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;pod2man&lt;/b&gt; fails with errors, see &lt;a href=&quot;Pod::Man&quot;&gt;Pod::Man&lt;/a&gt; and &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; for information about what those errors might mean.</source>
          <target state="translated">場合&lt;b&gt;pod2manが&lt;/b&gt;エラーで失敗し、参照&lt;a href=&quot;Pod::Man&quot;&gt;ポッド::男&lt;/a&gt;と&lt;a href=&quot;Pod::Simple&quot;&gt;ポッド:: Simpleは&lt;/a&gt;これらのエラーが意味するかもしれないものについては、を。</target>
        </trans-unit>
        <trans-unit id="1304e40e4e83fe3d3333f01173ec1c6d1e1c6f99" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;pod2man&lt;/b&gt; fails with errors, see &lt;a href=&quot;pod/man&quot;&gt;Pod::Man&lt;/a&gt; and &lt;a href=&quot;pod/simple&quot;&gt;Pod::Simple&lt;/a&gt; for information about what those errors might mean.</source>
          <target state="translated">場合&lt;b&gt;pod2manが&lt;/b&gt;エラーで失敗し、参照&lt;a href=&quot;pod/man&quot;&gt;ポッド::男&lt;/a&gt;と&lt;a href=&quot;pod/simple&quot;&gt;ポッド:: Simpleは&lt;/a&gt;これらのエラーが意味するかもしれないものについては、を。</target>
        </trans-unit>
        <trans-unit id="f3c086d017a2724c073cdc0c004a469d39ebb70e" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;pod2text&lt;/b&gt; fails with errors, see &lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt; and &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; for information about what those errors might mean. Internally, it can also produce the following diagnostics:</source>
          <target state="translated">場合&lt;b&gt;pod2textが&lt;/b&gt;エラーで失敗し、参照&lt;a href=&quot;Pod::Text&quot;&gt;ポッド::テキスト&lt;/a&gt;と&lt;a href=&quot;Pod::Simple&quot;&gt;ポッド:: Simpleは&lt;/a&gt;これらのエラーが意味するかもしれないものについては、を。内部的には、次の診断を生成することもできます。</target>
        </trans-unit>
        <trans-unit id="f4176eb0fb0948998c97b4edf835cbf5dcd8f3b5" translate="yes" xml:space="preserve">
          <source>If &lt;b&gt;pod2text&lt;/b&gt; fails with errors, see &lt;a href=&quot;pod/text&quot;&gt;Pod::Text&lt;/a&gt; and &lt;a href=&quot;pod/simple&quot;&gt;Pod::Simple&lt;/a&gt; for information about what those errors might mean. Internally, it can also produce the following diagnostics:</source>
          <target state="translated">場合&lt;b&gt;pod2textが&lt;/b&gt;エラーで失敗し、参照&lt;a href=&quot;pod/text&quot;&gt;ポッド::テキスト&lt;/a&gt;と&lt;a href=&quot;pod/simple&quot;&gt;ポッド:: Simpleは&lt;/a&gt;これらのエラーが意味するかもしれないものについては、を。内部的には、次の診断も生成できます。</target>
        </trans-unit>
        <trans-unit id="988f5c207e367599a6818bf91e93811516af5517" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;/&quot;&lt;/code&gt; is the delimiter then the initial &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; is optional. With the &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; you can use any pair of non-whitespace (ASCII) characters as delimiters. This is particularly useful for matching path names that contain &lt;code&gt;&quot;/&quot;&lt;/code&gt; , to avoid LTS (leaning toothpick syndrome). If &lt;code&gt;&quot;?&quot;&lt;/code&gt; is the delimiter, then a match-only-once rule applies, described in &lt;code&gt;m?&lt;i&gt;PATTERN&lt;/i&gt;?&lt;/code&gt; below. If &lt;code&gt;&quot;'&quot;&lt;/code&gt; (single quote) is the delimiter, no interpolation is performed on the</source>
          <target state="translated">場合は &lt;code&gt;&quot;/&quot;&lt;/code&gt; 区切り文字は、初期 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; は任意です。 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 君は、区切り文字として非空白文字（ASCII）文字の任意のペアを使用することができます。これは、 &lt;code&gt;&quot;/&quot;&lt;/code&gt; を含むパス名を照合する場合に特に役立ち、LTS（つまようじの傾き）を回避します。 &lt;code&gt;&quot;?&quot;&lt;/code&gt; なら 区切り文字である場合、 &lt;code&gt;m?&lt;i&gt;PATTERN&lt;/i&gt;?&lt;/code&gt; で記述される、1回限りの一致ルールが適用されますか？&lt;i&gt;パターン&lt;/i&gt;？未満。場合は &lt;code&gt;&quot;'&quot;&lt;/code&gt; （単一引用符）が区切り文字で、何の補間は上で実行されません</target>
        </trans-unit>
        <trans-unit id="6b9a8e2c3960de18a19c42696e997f8ffea4a1fa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;/&quot;&lt;/code&gt; is the delimiter then the initial &lt;code&gt;m&lt;/code&gt; is optional. With the &lt;code&gt;m&lt;/code&gt; you can use any pair of non-whitespace (ASCII) characters as delimiters. This is particularly useful for matching path names that contain &lt;code&gt;&quot;/&quot;&lt;/code&gt;, to avoid LTS (leaning toothpick syndrome). If &lt;code&gt;&quot;?&quot;&lt;/code&gt; is the delimiter, then a match-only-once rule applies, described in &lt;code&gt;m?&lt;i&gt;PATTERN&lt;/i&gt;?&lt;/code&gt; below. If &lt;code&gt;&quot;'&quot;&lt;/code&gt; (single quote) is the delimiter, no variable interpolation is performed on the</source>
          <target state="translated">場合は &lt;code&gt;&quot;/&quot;&lt;/code&gt; 区切り文字は、初期 &lt;code&gt;m&lt;/code&gt; は任意です。 &lt;code&gt;m&lt;/code&gt; 君は、区切り文字として非空白文字（ASCII）文字の任意のペアを使用することができます。これは、LTS（傾いた楊症候群）を回避するために、 &lt;code&gt;&quot;/&quot;&lt;/code&gt; を含むパス名を照合する場合に特に役立ちます。 &lt;code&gt;&quot;?&quot;&lt;/code&gt; 場合区切り文字は、 &lt;code&gt;m?&lt;i&gt;PATTERN&lt;/i&gt;?&lt;/code&gt; で説明されているように、1回限りの一致ルールが適用されますか？&lt;i&gt;パターン&lt;/i&gt;？未満。場合は &lt;code&gt;&quot;'&quot;&lt;/code&gt; （単一引用符）が区切り文字で、何の変数補間は上で実行されません</target>
        </trans-unit>
        <trans-unit id="efd1c59bcbb68bd82e85d30cea7a785addeb35a4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;A&quot;&lt;/code&gt; and &lt;code&gt;A'&lt;/code&gt; coincide: &lt;code&gt;AB&lt;/code&gt; is a better match than &lt;code&gt;AB'&lt;/code&gt; if &lt;code&gt;&quot;B&quot;&lt;/code&gt; is a better match for &lt;code&gt;&quot;T&quot;&lt;/code&gt; than &lt;code&gt;B'&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&quot;A&quot;&lt;/code&gt; と &lt;code&gt;A'&lt;/code&gt; ：一致 &lt;code&gt;AB&lt;/code&gt; は、より良好一致する &lt;code&gt;AB'&lt;/code&gt; あれば &lt;code&gt;&quot;B&quot;&lt;/code&gt; するためのよりよい一致である &lt;code&gt;&quot;T&quot;&lt;/code&gt; より &lt;code&gt;B'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc627db8f0150de994b80dc55cea56de1a9e2796" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;A&quot;&lt;/code&gt; is a better match for &lt;code&gt;&quot;S&quot;&lt;/code&gt; than &lt;code&gt;A'&lt;/code&gt;, &lt;code&gt;AB&lt;/code&gt; is a better match than &lt;code&gt;A'B'&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;&quot;A&quot;&lt;/code&gt; より良い試合である &lt;code&gt;&quot;S&quot;&lt;/code&gt; よりも &lt;code&gt;A'&lt;/code&gt; &lt;code&gt;AB&lt;/code&gt; は、より良い試合です &lt;code&gt;A'B'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4134f85a82aca95ee568f43289ebb0ed4545d2aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$@&lt;/code&gt; is empty then the string &lt;code&gt;&quot;Died&quot;&lt;/code&gt; is used.</source>
          <target state="translated">場合は &lt;code&gt;$@&lt;/code&gt; 、文字列は空である &lt;code&gt;&quot;Died&quot;&lt;/code&gt; に使用されます。</target>
        </trans-unit>
        <trans-unit id="f1898954d30bb03694346f5c287c1a5d39827435" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$@&lt;/code&gt; is empty then the string &lt;code&gt;&quot;Warning: Something's wrong&quot;&lt;/code&gt; is used.</source>
          <target state="translated">場合は &lt;code&gt;$@&lt;/code&gt; 、文字列は空です &lt;code&gt;&quot;Warning: Something's wrong&quot;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="bd653baf1f66ef92b469ea572e07f68509c56382" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ENV{PERL_DESTRUCT_LEVEL}&lt;/code&gt; is set to an integer greater than the value of &lt;code&gt;PL_perl_destruct_level&lt;/code&gt; its value is used instead.</source>
          <target state="translated">場合 &lt;code&gt;$ENV{PERL_DESTRUCT_LEVEL}&lt;/code&gt; の値よりも大きい整数に設定されている &lt;code&gt;PL_perl_destruct_level&lt;/code&gt; その値が代わりに使用されています。</target>
        </trans-unit>
        <trans-unit id="8349dcfb4261ce55d683cb8a5fd2171cf0fa3a9f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$Storable::Deparse&lt;/code&gt; and/or &lt;code&gt;$Storable::Eval&lt;/code&gt; are set to false values, then the value of &lt;code&gt;$Storable::forgive_me&lt;/code&gt; (see below) is respected while serializing and deserializing.</source>
          <target state="translated">場合は &lt;code&gt;$Storable::Deparse&lt;/code&gt; および/または &lt;code&gt;$Storable::Eval&lt;/code&gt; falseの値に設定され、その後の値が &lt;code&gt;$Storable::forgive_me&lt;/code&gt; シリアライズとデシリアライズながら（下記参照）尊敬されています。</target>
        </trans-unit>
        <trans-unit id="e98020b671aa605e805711cb6bc682413e70f748" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$_&lt;/code&gt; is lexical in the scope where the &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; appears (because it has been declared with the deprecated &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; construct) then, in addition to being locally aliased to the list elements, &lt;code&gt;$_&lt;/code&gt; keeps being lexical inside the block; i.e., it can't be seen from the outside, avoiding any potential side-effects.</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; が出現するスコープで字句的である場合（非推奨の &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; 構文で宣言されているため）、リスト要素にローカルでエイリアスされることに加えて、 &lt;code&gt;$_&lt;/code&gt; はブロック内で語彙的であり続けます。つまり、外部からは見えず、潜在的な副作用を回避できます。</target>
        </trans-unit>
        <trans-unit id="4f7113393512805f0f59fa7b96e8b849e1995d1c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$_&lt;/code&gt; is lexical in the scope where the &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; appears (because it has been declared with the deprecated &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; construct), then, in addition to being locally aliased to the list elements, &lt;code&gt;$_&lt;/code&gt; keeps being lexical inside the block; that is, it can't be seen from the outside, avoiding any potential side-effects.</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; が表示されるスコープ内で字句的である場合（非推奨の &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; 構文で宣言されているため）、リスト要素にローカルでエイリアスされることに加えて、 &lt;code&gt;$_&lt;/code&gt; はブロック内で字句的であり続けます。つまり、外部からは見えず、潜在的な副作用を回避できます。</target>
        </trans-unit>
        <trans-unit id="cb93a45a461425fe55c63aa4556c32605c5c3edf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$_&lt;/code&gt; is lexical in the scope where the &lt;code&gt;&lt;a href=&quot;grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; appears (because it has been declared with the deprecated &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; construct) then, in addition to being locally aliased to the list elements, &lt;code&gt;$_&lt;/code&gt; keeps being lexical inside the block; i.e., it can't be seen from the outside, avoiding any potential side-effects.</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; が出現するスコープで字句的である場合（非推奨の &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; 構文で宣言されているため）、リスト要素にローカルでエイリアスされることに加えて、 &lt;code&gt;$_&lt;/code&gt; はブロック内で語彙的であり続けます。つまり、外部からは見えず、潜在的な副作用を回避できます。</target>
        </trans-unit>
        <trans-unit id="25899b6abc79ff8d8c10640cbdc4955bb3e63743" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$_&lt;/code&gt; is lexical in the scope where the &lt;code&gt;&lt;a href=&quot;map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; appears (because it has been declared with the deprecated &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; construct), then, in addition to being locally aliased to the list elements, &lt;code&gt;$_&lt;/code&gt; keeps being lexical inside the block; that is, it can't be seen from the outside, avoiding any potential side-effects.</source>
          <target state="translated">&lt;code&gt;$_&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; が表示されるスコープ内で字句的である場合（非推奨の &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt; $_&lt;/code&gt; 構文で宣言されているため）、リスト要素にローカルでエイリアスされることに加えて、 &lt;code&gt;$_&lt;/code&gt; はブロック内で字句的であり続けます。つまり、外部からは見えず、潜在的な副作用を回避できます。</target>
        </trans-unit>
        <trans-unit id="2bf18bea13d8e6a37cbbcfdc3ed1634945661fd3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; are scalars then after these statements</source>
          <target state="translated">場合は &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; 、これらのステートメントの後に続いているスカラー</target>
        </trans-unit>
        <trans-unit id="92cf042152ebf0550f54e6d7d3ad9a3448e3c104" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$a&lt;/code&gt; pointed to an array of two elements then we would see the following.</source>
          <target state="translated">&lt;code&gt;$a&lt;/code&gt; が2つの要素の配列を指す場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="fee2f2e0ebac86e4349ab49b826ea37defd988af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$aref&lt;/code&gt; holds a reference to an array, then &lt;code&gt;$aref-&amp;gt;[3]&lt;/code&gt; is the fourth element of the array. Don't confuse this with &lt;code&gt;$aref[3]&lt;/code&gt; , which is the fourth element of a totally different array, one deceptively named &lt;code&gt;@aref&lt;/code&gt; . &lt;code&gt;$aref&lt;/code&gt; and &lt;code&gt;@aref&lt;/code&gt; are unrelated the same way that &lt;code&gt;$item&lt;/code&gt; and &lt;code&gt;@item&lt;/code&gt; are.</source>
          <target state="translated">&lt;code&gt;$aref&lt;/code&gt; が配列への参照を保持している場合、$ aref- &lt;code&gt;$aref-&amp;gt;[3]&lt;/code&gt; は配列の4番目の要素です。これを &lt;code&gt;$aref[3]&lt;/code&gt; と混同しないでください。$ aref [3]は、まったく異なる配列の4番目の要素であり、 &lt;code&gt;@aref&lt;/code&gt; と@arefと名付けられています。 &lt;code&gt;$aref&lt;/code&gt; と &lt;code&gt;@aref&lt;/code&gt; は、 &lt;code&gt;$item&lt;/code&gt; と &lt;code&gt;@item&lt;/code&gt; と同じように無関係です。</target>
        </trans-unit>
        <trans-unit id="56cb4a03de2631e78fd42838b903ba847f7a9d3f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$aref&lt;/code&gt; holds a reference to an array, then &lt;code&gt;$aref-&amp;gt;[3]&lt;/code&gt; is the fourth element of the array. Don't confuse this with &lt;code&gt;$aref[3]&lt;/code&gt;, which is the fourth element of a totally different array, one deceptively named &lt;code&gt;@aref&lt;/code&gt;. &lt;code&gt;$aref&lt;/code&gt; and &lt;code&gt;@aref&lt;/code&gt; are unrelated the same way that &lt;code&gt;$item&lt;/code&gt; and &lt;code&gt;@item&lt;/code&gt; are.</source>
          <target state="translated">&lt;code&gt;$aref&lt;/code&gt; が配列への参照を保持している場合、$ aref- &lt;code&gt;$aref-&amp;gt;[3]&lt;/code&gt; は配列の4番目の要素です。これを &lt;code&gt;$aref[3]&lt;/code&gt; と混同しないでください。これは、まったく異なる配列の4番目の要素であり、 &lt;code&gt;@aref&lt;/code&gt; という名前です。 &lt;code&gt;$aref&lt;/code&gt; と &lt;code&gt;@aref&lt;/code&gt; は、 &lt;code&gt;$item&lt;/code&gt; と &lt;code&gt;@item&lt;/code&gt; と同じように無関係です。</target>
        </trans-unit>
        <trans-unit id="f9c98499f2d6c2b76ade873a689c1003108b5526" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$bFailIfExists&lt;/code&gt; is true and &lt;code&gt;$sNewFileName&lt;/code&gt; is the path to a file that already exists, then &lt;code&gt;CopyFile&lt;/code&gt; will fail. If &lt;code&gt;$bFailIfExists&lt;/code&gt; is false, then the copy of the &lt;code&gt;$sOldFileNmae&lt;/code&gt; file will overwrite the &lt;code&gt;$sNewFileName&lt;/code&gt; file if it already exists.</source>
          <target state="translated">場合は &lt;code&gt;$bFailIfExists&lt;/code&gt; 真であると &lt;code&gt;$sNewFileName&lt;/code&gt; すでに存在するファイルへのパスです、そして &lt;code&gt;CopyFile&lt;/code&gt; メソッドは失敗します。場合は &lt;code&gt;$bFailIfExists&lt;/code&gt; falseで、その後のコピー &lt;code&gt;$sOldFileNmae&lt;/code&gt; ファイルが上書きされます &lt;code&gt;$sNewFileName&lt;/code&gt; がすでに存在する場合、ファイルを。</target>
        </trans-unit>
        <trans-unit id="de74274409753dd786fd5d63e5d1412ca957382c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$base&lt;/code&gt; is not defined, Euler's number (e) is used:</source>
          <target state="translated">&lt;code&gt;$base&lt;/code&gt; が定義されていない場合、オイラー数（e）が使用されます。</target>
        </trans-unit>
        <trans-unit id="0050f172fa605210fb670bacd9e4150d6ef91f04" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$base&lt;/code&gt; is not present or '', then &lt;a href=&quot;../cwd&quot;&gt;Cwd::cwd()&lt;/a&gt; is used. If &lt;code&gt;$base&lt;/code&gt; is relative, then it is converted to absolute form using &lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs()&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;../cwd&quot;&gt;Cwd::cwd()&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$base&lt;/code&gt; 存在しないか、「」、その後、&lt;a href=&quot;../cwd&quot;&gt;CWD :: CWD（）&lt;/a&gt;使用されています。 &lt;code&gt;$base&lt;/code&gt; が相対の場合、&lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs（）&lt;/a&gt;を使用して絶対形式に変換されます。これは、それが&lt;a href=&quot;../cwd&quot;&gt;Cwd :: cwd（）&lt;/a&gt;に対して相対的であると解釈されることを意味します。</target>
        </trans-unit>
        <trans-unit id="efe7c38890e29ff157911650e99baf9d891029df" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$base&lt;/code&gt; is not present or '', then &lt;a href=&quot;cwd&quot;&gt;Cwd::cwd()&lt;/a&gt; is used. If &lt;code&gt;$base&lt;/code&gt; is relative, then it is converted to absolute form using &lt;a href=&quot;#rel2abs%28%29&quot;&gt;&quot;rel2abs()&quot;&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;cwd&quot;&gt;Cwd::cwd()&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$base&lt;/code&gt; 存在しないか、「」、その後、&lt;a href=&quot;cwd&quot;&gt;CWD :: CWD（）&lt;/a&gt;使用されています。 &lt;code&gt;$base&lt;/code&gt; が相対的である場合、&lt;a href=&quot;#rel2abs%28%29&quot;&gt;「rel2abs（）」&lt;/a&gt;を使用して絶対形式に変換されます。これは、&lt;a href=&quot;cwd&quot;&gt;Cwd :: cwd（）に&lt;/a&gt;関連していると見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="7addd5930cc7a5f994dbe5d5d02d12cbcde98a29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$buffer&lt;/code&gt; consists of multiple concatenated gzip data streams only the first will be uncompressed. Use &lt;code&gt;gunzip&lt;/code&gt; with the &lt;code&gt;MultiStream&lt;/code&gt; option in the &lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; module if you need to deal with concatenated data streams.</source>
          <target state="translated">&lt;code&gt;$buffer&lt;/code&gt; が複数の連結されたgzipデータストリームで構成されている場合、最初のデータストリームのみが圧縮解除されます。使用し &lt;code&gt;gunzip&lt;/code&gt; を持つ &lt;code&gt;MultiStream&lt;/code&gt; におけるオプション &lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; モジュールあなたは、連結データ・ストリームに対処する必要がある場合。</target>
        </trans-unit>
        <trans-unit id="92f8dcce322cf03e285482ec192e88b4162c7d25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$coderef&lt;/code&gt; is omitted or undefined, the corresponding callback will be disabled. There can only ever be one callback for a given key.</source>
          <target state="translated">場合は &lt;code&gt;$coderef&lt;/code&gt; 省略または定義されていない、対応するコールバックは無効になります。特定のキーに対してコールバックは1つしか存在できません。</target>
        </trans-unit>
        <trans-unit id="7811262733e4fe0a3b5f69a60aebbea5b3943e0c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false (the default), then &lt;code&gt;decode&lt;/code&gt; will only accept valid JSON texts.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; false（デフォルト）で、その後、 &lt;code&gt;decode&lt;/code&gt; 唯一の有効なJSONテキストを受け入れます。</target>
        </trans-unit>
        <trans-unit id="7c1982a9afd1e57e2a8bcba28c638e592681686f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false (the default), then &lt;code&gt;encode&lt;/code&gt; will not consider this type of conversion, and tagged JSON values will cause a parse error in &lt;code&gt;decode&lt;/code&gt;, as if tags were not part of the grammar.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; （デフォルト）falseで、その後、 &lt;code&gt;encode&lt;/code&gt; 、変換のこのタイプを考慮し、JSONの値がでパースエラーが発生しますタグ付けされません &lt;code&gt;decode&lt;/code&gt; タグは文法の一部ではなかったかのように、。</target>
        </trans-unit>
        <trans-unit id="1e48b0ec5233ac4e9e42a4dc42eb1f5c48b74c94" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false (the default), then &lt;code&gt;encode&lt;/code&gt; will not consider this type of conversion.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; false（デフォルト）である場合、 &lt;code&gt;encode&lt;/code&gt; 、変換のこのタイプを考慮しています。</target>
        </trans-unit>
        <trans-unit id="cdb7a77074d5d405efea88b2c7bbc5c701916dfb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false (the default), then &lt;code&gt;encode&lt;/code&gt; will throw an exception when it encounters a blessed object that it cannot convert otherwise.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; false（デフォルト）である場合、 &lt;code&gt;encode&lt;/code&gt; 、それがそうでない場合は変換できないことを祝福されたオブジェクトに遭遇したときに例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="04de0fcb5da7e078ae940e967073b0177355bd6c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false (the default), then &lt;code&gt;encode&lt;/code&gt; will throw an exception when it encounters anything it cannot encode as JSON.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; （デフォルト）falseで、その後、 &lt;code&gt;encode&lt;/code&gt; 、それがJSONとしてエンコードできないものに遭遇したときに例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="3086280d8ee71ea70bdfcb2afb309beaf2d06527" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, no newlines or indenting will be produced, and the resulting JSON text is guaranteed not to contain any &lt;code&gt;newlines&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; falseで、何の改行やインデントは生成されなくなります、そして得られたJSONテキストがどの含まないことが保証されて &lt;code&gt;newlines&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e975b01cc569dbba02de74e0b10f766fc4f3b4f3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then JSON::PP does nothing.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; falseで、その後、JSON :: PPは何もしません。</target>
        </trans-unit>
        <trans-unit id="be336cd490e25871d5c5a043187b4c6b849802ac" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then the &lt;code&gt;encode&lt;/code&gt; method will croak if it isn't passed an arrayref or hashref, as JSON texts must either be an object or array. Likewise, &lt;code&gt;decode&lt;/code&gt; will croak if given something that is not a JSON object or array.</source>
          <target state="translated">&lt;code&gt;$enable&lt;/code&gt; がfalseの場合、JSONテキストはオブジェクトまたは配列のいずれかである必要があるため、arrayrefまたはhashrefが渡されないと、 &lt;code&gt;encode&lt;/code&gt; メソッドが不正になります。同様に、JSONオブジェクトまたは配列ではないものが与えられた場合、 &lt;code&gt;decode&lt;/code&gt; は鳴ります。</target>
        </trans-unit>
        <trans-unit id="4552208ed349063bd809d4cf67b8cd611bca27cf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then the &lt;code&gt;encode&lt;/code&gt; method will not add any extra space at those places.</source>
          <target state="translated">&lt;code&gt;$enable&lt;/code&gt; がfalseの場合、 &lt;code&gt;encode&lt;/code&gt; メソッドはそれらの場所に余分なスペースを追加しません。</target>
        </trans-unit>
        <trans-unit id="37e2d73b94d150c5d23686bd0382b4503285cd34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then the &lt;code&gt;encode&lt;/code&gt; method will not escape Unicode characters unless required by the JSON syntax or other flags.</source>
          <target state="translated">&lt;code&gt;$enable&lt;/code&gt; がfalseの場合、 &lt;code&gt;encode&lt;/code&gt; メソッドはJSON構文または他のフラグで必要とされない限りUnicode文字をエスケープしません。</target>
        </trans-unit>
        <trans-unit id="f3902c5124259f16919978729c3ce2be1df8d80a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then the &lt;code&gt;encode&lt;/code&gt; method will not escape Unicode characters unless required by the JSON syntax or other flags. This results in a faster and more compact format.</source>
          <target state="translated">&lt;code&gt;$enable&lt;/code&gt; がfalseの場合、 &lt;code&gt;encode&lt;/code&gt; メソッドはJSON構文または他のフラグで必要とされない限りUnicode文字をエスケープしません。これにより、より高速でコンパクトなフォーマットが実現します。</target>
        </trans-unit>
        <trans-unit id="c86f85aa1caeceb3912119cb7b2d498b0a32493f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then the &lt;code&gt;encode&lt;/code&gt; method will output key-value pairs in the order Perl stores them (which will likely change between runs of the same script, and can change even within the same run from 5.18 onwards).</source>
          <target state="translated">&lt;code&gt;$enable&lt;/code&gt; がfalseの場合、 &lt;code&gt;encode&lt;/code&gt; メソッドはPerlが格納する順序でキーと値のペアを出力します（これは同じスクリプトの実行間で変更される可能性が高く、5.18以降の同じ実行内でも変更される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="13b52abf83b8965155f261b8d742e8a34398b89a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is false, then the &lt;code&gt;encode&lt;/code&gt; method will return the JSON string as a (non-encoded) Unicode string, while &lt;code&gt;decode&lt;/code&gt; expects thus a Unicode string. Any decoding or encoding (e.g. to UTF-8 or UTF-16) needs to be done yourself, e.g. using the Encode module.</source>
          <target state="translated">&lt;code&gt;$enable&lt;/code&gt; がfalseの場合、 &lt;code&gt;encode&lt;/code&gt; メソッドはJSON文字列を（エンコードされていない）Unicode文字列として返しますが、 &lt;code&gt;decode&lt;/code&gt; はUnicode文字列を想定しています。デコードまたはエンコード（UTF-8またはUTF-16など）は、Encodeモジュールを使用するなどして自分で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="44ad37ba20b3a29620caccad5e3ecd7a88326558" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), the string returned by &lt;code&gt;encode&lt;/code&gt; will be shrunk (i.e. downgraded if possible).</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、文字列がで返さ &lt;code&gt;encode&lt;/code&gt; 縮小されます（可能な場合つまり格下げ）。</target>
        </trans-unit>
        <trans-unit id="bfb4e08bf1d863891f648ce2830c8c09f60cbc10" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;decode&lt;/code&gt; will accept invalid JSON texts that contain JSON objects whose names don't begin and end with quotation marks. &lt;code&gt;encode&lt;/code&gt; will not be affected in any way.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;decode&lt;/code&gt; JSONは名前が始まり、引用符で終わらないオブジェクト含まれている無効なJSONテキストを受け入れます。 &lt;code&gt;encode&lt;/code&gt; は一切影響を受けません。</target>
        </trans-unit>
        <trans-unit id="246bb991806282f44448e175226c86c650ef5e28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;decode&lt;/code&gt; will accept invalid JSON texts that contain strings that begin and end with single quotation marks. &lt;code&gt;encode&lt;/code&gt; will not be affected in any way.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;decode&lt;/code&gt; 始まる文字列を含む無効なJSONテキストを受け入れ、単一引用符で終了します。 &lt;code&gt;encode&lt;/code&gt; は一切影響を受けません。</target>
        </trans-unit>
        <trans-unit id="67308b350cc4783d9abd2fdf5b4a1f710199873e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;decode&lt;/code&gt; will accept invalid JSON texts that contain unescaped [\x00-\x1f\x22\x5c] characters. &lt;code&gt;encode&lt;/code&gt; will not be affected in any way.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;decode&lt;/code&gt; エスケープされていない[\ x00- \ X1F \ X22 \ x5c]の文字を含む無効なJSONテキストを受け入れます。 &lt;code&gt;encode&lt;/code&gt; は一切影響を受けません。</target>
        </trans-unit>
        <trans-unit id="7558d7379ca02e4f9b9f352b5ef01f5fb78976eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;decode&lt;/code&gt; will accept some extensions to normal JSON syntax (see below). &lt;code&gt;encode&lt;/code&gt; will not be affected in anyway.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;decode&lt;/code&gt; （下記参照）、通常のJSONの構文にいくつかの拡張を受け入れます。 &lt;code&gt;encode&lt;/code&gt; はとにかく影響を受けません。</target>
        </trans-unit>
        <trans-unit id="8ace324f1a416d3e8da7b9e8dd1ed7db2c8c1dab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;decode&lt;/code&gt; will convert big integers Perl cannot handle as integer into &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; objects and convert floating numbers into &lt;a href=&quot;Math::BigFloat&quot;&gt;Math::BigFloat&lt;/a&gt; objects. &lt;code&gt;encode&lt;/code&gt; will convert &lt;code&gt;Math::BigInt&lt;/code&gt; and &lt;code&gt;Math::BigFloat&lt;/code&gt; objects into JSON numbers.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;decode&lt;/code&gt; Perlがに整数として扱うことができない大きな整数に変換します&lt;a href=&quot;Math::BigInt&quot;&gt;数学:: BigIntのは、&lt;/a&gt;オブジェクトとに浮動小数点数を変換する&lt;a href=&quot;Math::BigFloat&quot;&gt;数学::ビッグフロートは、&lt;/a&gt;オブジェクト。 &lt;code&gt;encode&lt;/code&gt; 変換する &lt;code&gt;Math::BigInt&lt;/code&gt; と &lt;code&gt;Math::BigFloat&lt;/code&gt; JSON番号にオブジェクト。</target>
        </trans-unit>
        <trans-unit id="82c0e8fb85aba2afac4d627a09a871fc06d122a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;encode&lt;/code&gt; will</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; そして、真（または欠落）で &lt;code&gt;encode&lt;/code&gt; 意志</target>
        </trans-unit>
        <trans-unit id="491263f59c01a4eaaa7f2c7452a1609d3f1f36ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;encode&lt;/code&gt; will explicitly escape</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 明示的にエスケープします</target>
        </trans-unit>
        <trans-unit id="9f3f1412723a3ab4e362a57dd7e73738bb982d44" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;encode&lt;/code&gt;, upon encountering a blessed object, will check for the availability of the &lt;code&gt;FREEZE&lt;/code&gt; method on the object's class. If found, it will be used to serialise the object into a nonstandard tagged JSON value (that JSON decoders cannot decode).</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 、祝福されたオブジェクトに遭遇すると、の可用性をチェックします &lt;code&gt;FREEZE&lt;/code&gt; オブジェクトのクラスのメソッド。見つかった場合は、オブジェクトを非標準のタグ付きJSON値（JSONデコーダーはデコードできない）にシリアル化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a35a5f5496c5b2efdffca81661108891f4928274" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then &lt;code&gt;encode&lt;/code&gt;, upon encountering a blessed object, will check for the availability of the &lt;code&gt;TO_JSON&lt;/code&gt; method on the object's class. If found, it will be called in scalar context and the resulting scalar will be encoded instead of the object.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 、祝福されたオブジェクトに遭遇すると、の可用性をチェックします &lt;code&gt;TO_JSON&lt;/code&gt; オブジェクトのクラスにメソッド。見つかった場合、それはスカラーコンテキストで呼び出され、結果のスカラーはオブジェクトの代わりにエンコードされます。</target>
        </trans-unit>
        <trans-unit id="4aabc89dbe4a6bf91747a70a7f38abf24d998ff9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method can convert a non-reference into its corresponding string, number or null JSON value, which is an extension to RFC4627. Likewise, &lt;code&gt;decode&lt;/code&gt; will accept those JSON values instead of croaking.</source>
          <target state="translated">場合 &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、次いで、 &lt;code&gt;encode&lt;/code&gt; 方法はRFC4627への拡張であり、それに対応する文字列、数値、またはヌルJSON値に非参照を変換することができます。同様に、 &lt;code&gt;decode&lt;/code&gt; はクローキングの代わりにそれらのJSON値を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2bd9f62480de589dfa295edb699ae5c2e11f3633" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will add an extra optional space after the &lt;code&gt;:&lt;/code&gt; separating keys from values in JSON objects and extra whitespace after the &lt;code&gt;,&lt;/code&gt; separating key-value pairs and array members.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 方式は、後に余分なオプションのスペースを追加します &lt;code&gt;:&lt;/code&gt; 後JSONオブジェクトの値からキーと余分な空白を分離し &lt;code&gt;,&lt;/code&gt; キーと値のペアとアレイメンバーを分離します。</target>
        </trans-unit>
        <trans-unit id="40417ce6845e6ec8b53c1d5a6af47798ccba201d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will add an extra optional space before the &lt;code&gt;:&lt;/code&gt; separating keys from values in JSON objects.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 方法は、前に余分なオプションのスペースを追加します &lt;code&gt;:&lt;/code&gt; JSONオブジェクト内の値から分離するキー。</target>
        </trans-unit>
        <trans-unit id="d08f5353e1c6dfda4e64411628e93b6243deb94f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will encode the JSON result into UTF-8, as required by many protocols, while the &lt;code&gt;decode&lt;/code&gt; method expects to be handled an UTF-8-encoded string. Please note that UTF-8-encoded strings do not contain any characters outside the range &lt;code&gt;0..255&lt;/code&gt;, they are thus useful for bytewise/binary I/O. In future versions, enabling this option might enable autodetection of the UTF-16 and UTF-32 encoding families, as described in RFC4627.</source>
          <target state="translated">場合 &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、次いで、 &lt;code&gt;encode&lt;/code&gt; 多くのプロトコルによって要求されるようにしながら、方法は、UTF-8にJSONの結果をコードする &lt;code&gt;decode&lt;/code&gt; 方法を期待は、UTF-8でエンコードされた文字列を処理します。UTF-8でエンコードされた文字列には、 &lt;code&gt;0..255&lt;/code&gt; の範囲外の文字が含まれていないため、バイト単位/バイナリI / Oに役立ちます。将来のバージョンでは、RFC4627で説明されているように、このオプションを有効にすると、UTF-16およびUTF-32エンコーディングファミリの自動検出が有効になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9cb7643219ec296a582847f0971f541d53b49849" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will encode the resulting JSON text as latin1 (or iso-8859-1), escaping any characters outside the code range &lt;code&gt;0..255&lt;/code&gt;. The resulting string can be treated as a latin1-encoded JSON text or a native Unicode string. The &lt;code&gt;decode&lt;/code&gt; method will not be affected in any way by this flag, as &lt;code&gt;decode&lt;/code&gt; by default expects Unicode, which is a strict superset of latin1.</source>
          <target state="translated">場合 &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、次いで、 &lt;code&gt;encode&lt;/code&gt; 方法は、コード範囲外の文字エスケープ、LATIN1（またはISO-8859-1）として得られたJSONテキストをコードする &lt;code&gt;0..255&lt;/code&gt; を。結果の文字列は、latin1でエンコードされたJSONテキストまたはネイティブのUnicode文字列として扱うことができます。 &lt;code&gt;decode&lt;/code&gt; の方法は、このフラグによって、どのような方法で影響されない &lt;code&gt;decode&lt;/code&gt; デフォルトではLATIN1の厳密なスーパーセットであるUnicodeを、期待します。</target>
        </trans-unit>
        <trans-unit id="22d729ea73360087d038c168d6df4573c08be0b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will not barf when it encounters a blessed reference that it cannot convert otherwise. Instead, a JSON &lt;code&gt;null&lt;/code&gt; value is encoded instead of the object.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 方法はBARFそれはそう変換できないことを祝福された参照を検出しませんとき。代わりに、オブジェクトの代わりに &lt;code&gt;null&lt;/code&gt; 値がエンコードされます。</target>
        </trans-unit>
        <trans-unit id="8120948e30627d79c4071787a445caabdb06a056" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will not generate characters outside the code range &lt;code&gt;0..127&lt;/code&gt; (which is ASCII). Any Unicode characters outside that range will be escaped using either a single \uXXXX (BMP characters) or a double \uHHHH\uLLLLL escape sequence, as per RFC4627. The resulting encoded JSON text can be treated as a native Unicode string, an ascii-encoded, latin1-encoded or UTF-8 encoded string, or any other superset of ASCII.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 方法は、コードの範囲外の文字を生成しません &lt;code&gt;0..127&lt;/code&gt; （ASCIIです）。その範囲外のUnicode文字は、RFC4627に従って、単一の\ uXXXX（BMP文字）または二重の\ uHHHH \ uLLLLLエスケープシーケンスを使用してエスケープされます。結果としてエンコードされたJSONテキストは、ネイティブUnicode文字列、asciiエンコード、latin1エンコード、UTF-8エンコードの文字列、またはその他のASCIIのスーパーセットとして扱うことができます。</target>
        </trans-unit>
        <trans-unit id="5f442720c1ebc67a4d7d3134850e92ef85f78491" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will output JSON objects by sorting their keys. This is adding a comparatively high overhead.</source>
          <target state="translated">場合は &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、その後、 &lt;code&gt;encode&lt;/code&gt; 方法が出力されますJSONは自分のキーをソートすることにより、オブジェクト。これにより、比較的高いオーバーヘッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="f0fd8141083b0c1d8b81b6f4d6866a0fb5c4899a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$enable&lt;/code&gt; is true (or missing), then the &lt;code&gt;encode&lt;/code&gt; method will use a multiline format as output, putting every array member or object/hash key-value pair into its own line, indenting them properly.</source>
          <target state="translated">場合 &lt;code&gt;$enable&lt;/code&gt; 真（または欠落）で、次いで、 &lt;code&gt;encode&lt;/code&gt; 方法は、適切にインデント、独自の行にすべての配列メンバやオブジェクト/ハッシュキーと値のペアを入れ、出力としてマルチフォーマットを使用します。</target>
        </trans-unit>
        <trans-unit id="9c05ab0710c330ccfa58b05a1d99cb1930161cb6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$fh&lt;/code&gt; is a filehandle, such as is returned by &lt;code&gt;IO::File&lt;/code&gt; or one of the other &lt;code&gt;IO&lt;/code&gt; modules, you may use:</source>
          <target state="translated">場合は &lt;code&gt;$fh&lt;/code&gt; などによって返されるファイルハンドル、ある &lt;code&gt;IO::File&lt;/code&gt; や他の1 &lt;code&gt;IO&lt;/code&gt; モジュールは、あなたが使用することができます：</target>
        </trans-unit>
        <trans-unit id="e3cb3fa6da7016a06a0ddc81b83c00820e64661b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$global&lt;/code&gt; is true then the driver should send the event to all hubs in all processes and threads.</source>
          <target state="translated">場合は &lt;code&gt;$global&lt;/code&gt; 真であるドライバは、すべてのプロセスとスレッド内のすべてのハブにイベントを送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="7412f2956d9be3c45dbde64ef1450e59ad2d04b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$id&lt;/code&gt; is the id of a registered object (see &lt;a href=&quot;#register&quot;&gt;&quot;register&quot;&lt;/a&gt;), returns the object, otherwise an undefined value. For registered objects this is the inverse function of &lt;code&gt;id()&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$id&lt;/code&gt; （参照登録されたオブジェクトのIDである&lt;a href=&quot;#register&quot;&gt;「登録」&lt;/a&gt;）、それ以外の場合は未定義の値、オブジェクトを返します。登録されたオブジェクトの場合、これは &lt;code&gt;id()&lt;/code&gt; の逆関数です。</target>
        </trans-unit>
        <trans-unit id="80cddfe7cac5da52e604c2e95ecabe44db020236" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$id&lt;/code&gt; is the id of a registered object (see &lt;a href=&quot;#register&quot;&gt;register&lt;/a&gt;), returns the object, otherwise an undefined value. For registered objects this is the inverse function of &lt;code&gt;id()&lt;/code&gt; .</source>
          <target state="translated">場合 &lt;code&gt;$id&lt;/code&gt; （参照登録されたオブジェクトのIDで&lt;a href=&quot;#register&quot;&gt;登録&lt;/a&gt;）、オブジェクト、そうでない場合は、未定義の値を返します。登録済みオブジェクトの場合、これは &lt;code&gt;id()&lt;/code&gt; の逆関数です。</target>
        </trans-unit>
        <trans-unit id="cc434bb4b25d64e8d72b26a1167930b8ab9c02ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input&lt;/code&gt; is a scalar reference, the compressed data will be read from &lt;code&gt;$$input&lt;/code&gt; .</source>
          <target state="translated">場合は &lt;code&gt;$input&lt;/code&gt; スカラリファレンスで、圧縮されたデータから読み込まれます &lt;code&gt;$$input&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="260df432afe5ea3f6b10347c137307e5145777ef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input&lt;/code&gt; is a scalar reference, the compressed data will be read from &lt;code&gt;$$input&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$input&lt;/code&gt; スカラリファレンスで、圧縮されたデータから読み込まれます &lt;code&gt;$$input&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1deee19e273a335c0c4f6a1643abcff33ad56b8b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a scalar reference, the input data will be read from &lt;code&gt;$$input_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">場合は &lt;code&gt;$input_filename_or_reference&lt;/code&gt; スカラリファレンスで、入力データから読み込まれます &lt;code&gt;$$input_filename_or_reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e61f15d9caa9af92bd7bab0101da2a2fc66fae53" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a scalar reference, the input data will be read from &lt;code&gt;$$input_filename_or_reference&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$input_filename_or_reference&lt;/code&gt; スカラリファレンスで、入力データから読み込まれます &lt;code&gt;$$input_filename_or_reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="442fe7b0ca25d4c885c4e854d9668346a5bb7269" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;anyinflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;anyinflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="9aa314fdcd8580313e8abf8e02f29427ab27b460" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;anyuncompress&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;anyuncompress&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="18a54dcb23d30a160237fad9927225b0b52fd938" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;bunzip2&lt;/code&gt; will assume that it is an</source>
          <target state="translated">場合は &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 文字で区切られた文字列である「&amp;lt;」と「&amp;gt;」 &lt;code&gt;bunzip2&lt;/code&gt; はそれがあることを前提としています</target>
        </trans-unit>
        <trans-unit id="2674b9a8665c681ee519359fca9a33d0c649f2e0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;bzip2&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;bzip2&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="8d40f68b3835780881ecdd758b0745e5d0346006" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;deflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;deflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="4fe4284a3754ea968d5efe965b410a0bdc45da42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;gunzip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;gunzip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="54bfc13f24ab6d2f1fe87f0e4095f9cb61a84059" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;gzip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;gzip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="9bc5cf10f5ea974c9dba92b8ddcdee6c56efe154" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;inflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">場合は &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 文字で区切られた文字列である「&amp;lt;」と「&amp;gt;」 &lt;code&gt;inflate&lt;/code&gt; それがあることを前提としています</target>
        </trans-unit>
        <trans-unit id="8e074643e90fcbea02cb6c241eab28946a00d829" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;rawdeflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;rawdeflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="c17eec5153adb41349f1323f8a2716fe9be3d4a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;rawinflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;rawinflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="4ab52d4fbbd216b398b3cd45ad27a194f5b5a84f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;unzip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;unzip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="35a8f72eaee6c21d9a2ad219023a7a4de0558584" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;zip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$input_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;zip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="2e1657129b850f80b9a61087ceca9451d92c60dc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$input_filename_or_reference&lt;/code&gt; is an array reference, each element in the array must be a filename.</source>
          <target state="translated">場合は &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 配列リファレンスで、配列の各要素には、ファイル名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f6f55f2709b4c8b210fa8171af0e426a8189b01a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$locale_name&lt;/code&gt; is not available, fallback is selected in the following order:</source>
          <target state="translated">場合は &lt;code&gt;$locale_name&lt;/code&gt; 使用できない場合、フォールバックは、次の順序で選択されています。</target>
        </trans-unit>
        <trans-unit id="9bbc80ca8dd7a56323169258329eaced7ec9500d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$n&lt;/code&gt; is negative, returns the digit counting from left.</source>
          <target state="translated">&lt;code&gt;$n&lt;/code&gt; が負の場合、左から数えて桁を返します。</target>
        </trans-unit>
        <trans-unit id="320bf336e74d67e7ea69246db25f2a4bdd482c4d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$num_tests&lt;/code&gt; is omitted, the number of tests run will be used, like no_plan.</source>
          <target state="translated">場合は &lt;code&gt;$num_tests&lt;/code&gt; 省略され、実行テストの数はno_planのように、使用されます。</target>
        </trans-unit>
        <trans-unit id="9d696967ac485ed4d512d17c0805aaab2b3cb743" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$numeric&lt;/code&gt; is true, these will be given in numeric form rather than being resolved into names.</source>
          <target state="translated">場合は &lt;code&gt;$numeric&lt;/code&gt; 真である、これらは数値形式で与えられることになるのではなく名前に分解されています。</target>
        </trans-unit>
        <trans-unit id="dec7e6706afeeac3972bbf967d824b032cbdeb1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$olBytesRead&lt;/code&gt; is not &lt;code&gt;[]&lt;/code&gt;, it will be set to the actual number of bytes read, though &lt;code&gt;length($opBuffer)&lt;/code&gt; can also be used to determine this.</source>
          <target state="translated">&lt;code&gt;$olBytesRead&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; でない場合、実際に読み取られたバイト数に設定されますが、 &lt;code&gt;length($opBuffer)&lt;/code&gt; を使用してこれを決定することもできます。</target>
        </trans-unit>
        <trans-unit id="2d1acd93b6a6ef1f8b92bfb6d087b55815058f80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a buffer and &lt;code&gt;Append&lt;/code&gt; is enabled, all compressed data will be append to the end of &lt;code&gt;$output&lt;/code&gt; . Otherwise &lt;code&gt;$output&lt;/code&gt; will be cleared before any data is written to it.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; バッファされ、 &lt;code&gt;Append&lt;/code&gt; 有効になっている、すべての圧縮されたデータは、の末尾に追加されます &lt;code&gt;$output&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;$output&lt;/code&gt; はデータが書き込まれる前にクリアされます。</target>
        </trans-unit>
        <trans-unit id="92afc15c575b4de234228583007cad12aa627fb5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a buffer and &lt;code&gt;Append&lt;/code&gt; is enabled, all compressed data will be append to the end of &lt;code&gt;$output&lt;/code&gt;. Otherwise &lt;code&gt;$output&lt;/code&gt; will be cleared before any data is written to it.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; バッファされ、 &lt;code&gt;Append&lt;/code&gt; 有効になっている、すべての圧縮されたデータは、の末尾に追加されます &lt;code&gt;$output&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;$output&lt;/code&gt; は、データが書き込まれる前にクリアされます。</target>
        </trans-unit>
        <trans-unit id="e8582554c9105fe0c715aaa06eeaea2d3fcfc688" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a file or a filehandle, it must be seekable.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; ファイルやファイルハンドルである、それはシーク可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="430d11ebbae99eabba1b751c1fb7c8e38808dc22" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a filehandle, the file pointer will be positioned to the end of the file via a call to &lt;code&gt;&lt;a href=&quot;../../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; before any compressed data is written to it. Otherwise the file pointer will not be moved.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; ファイルハンドルで、ファイルポインタは、呼び出しを経由して、ファイルの末尾に配置されます &lt;code&gt;&lt;a href=&quot;../../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; 任意の圧縮されたデータが書き込まれる前に。それ以外の場合、ファイルポインターは移動されません。</target>
        </trans-unit>
        <trans-unit id="f05d0ea62b4bacb21e297df6978bb119d6575e37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a filehandle, the file pointer will be positioned to the end of the file via a call to &lt;code&gt;seek&lt;/code&gt; before any compressed data is written to it. Otherwise the file pointer will not be moved.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; ファイルハンドルで、ファイルポインタは、呼び出しを経由して、ファイルの末尾に配置されます &lt;code&gt;seek&lt;/code&gt; 任意の圧縮されたデータが書き込まれる前に。それ以外の場合、ファイルポインタは移動されません。</target>
        </trans-unit>
        <trans-unit id="6f34a91ef18a1100dcab801875430fa2964155e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a filename and &lt;code&gt;Append&lt;/code&gt; is enabled, the file will be opened in append mode. Otherwise the contents of the file, if any, will be truncated before any compressed data is written to it.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; ファイル名で、 &lt;code&gt;Append&lt;/code&gt; 有効になっていると、ファイルは追記モードで開かれます。それ以外の場合、圧縮データがファイルに書き込まれる前に、ファイルの内容は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="905a4b022cfd04d4344f06eb8d1d7814fe3b2e8c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a scalar reference, the compressed data will be stored in &lt;code&gt;$$output&lt;/code&gt; .</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; スカラリファレンスで、圧縮されたデータは、に保存されます &lt;code&gt;$$output&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6a7576a43214d6e50502e7d58fdfce2630e01b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output&lt;/code&gt; is a scalar reference, the compressed data will be stored in &lt;code&gt;$$output&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; スカラリファレンスで、圧縮されたデータは、に保存されます &lt;code&gt;$$output&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="130d5c72326e4e51651ab55caf6ff565c16bd2ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a scalar reference, the compressed data will be stored in &lt;code&gt;$$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">場合は &lt;code&gt;$output_filename_or_reference&lt;/code&gt; スカラー・リファレンスで、圧縮されたデータは、に保存されます &lt;code&gt;$$output_filename_or_reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a39be39ddf44d7bf461e73a4324b038a6242f93" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a scalar reference, the compressed data will be stored in &lt;code&gt;$$output_filename_or_reference&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$output_filename_or_reference&lt;/code&gt; スカラー・リファレンスで、圧縮されたデータは、に保存されます &lt;code&gt;$$output_filename_or_reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6e6e43463d8cf9f8c4cc955f62290b2d79a9ce9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a scalar reference, the uncompressed data will be stored in &lt;code&gt;$$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">場合は &lt;code&gt;$output_filename_or_reference&lt;/code&gt; スカラー・リファレンスで、非圧縮データをに保存されます &lt;code&gt;$$output_filename_or_reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21a168ccb52122de1bd3352cd9d3af1687ee7454" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a scalar reference, the uncompressed data will be stored in &lt;code&gt;$$output_filename_or_reference&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$output_filename_or_reference&lt;/code&gt; スカラー・リファレンスで、非圧縮データをに保存されます &lt;code&gt;$$output_filename_or_reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffed2a8f82140ef8dc0c4ed699c9112d9f907c47" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;anyinflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;anyinflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="b9f151907f2e5c73c6d5a7f5e3827d63f2d086e7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;anyuncompress&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;anyuncompress&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="eb784e91a1d15b001b3d17241bbd0f023fa0db31" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;bunzip2&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;bunzip2&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="308eaa4a6536e52e6cbbe3d9c09c32dfa80725fa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;bzip2&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;bzip2&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="632c19749781b38310b67e8cb7d2da8bcbd87fa7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;deflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;deflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="4846f7304e22cdc9a232215f9939eddfa8d9211d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;gunzip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;gunzip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="4f11ec72b95266da1fd717b81d461cc92a72f199" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;gzip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;gzip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="f099e710944546f4f6281f3a2de13a8288ffdd0a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;inflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">場合は &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 文字で区切られた文字列である「&amp;lt;」と「&amp;gt;」 &lt;code&gt;inflate&lt;/code&gt; それがあることを前提としています</target>
        </trans-unit>
        <trans-unit id="cceae651ad537fbe024d4ffd9a457c78fec4fbd7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;rawdeflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;rawdeflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="767601b4f86c38e1ce00ed67d4e6753dd438a660" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;rawinflate&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;rawinflate&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="c227dd1ee1e8b9659ffdea7cebe0fc1ef9dd1a51" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;unzip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;unzip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="2ae55891ab5b00668d1e680f825b4abc927f84c6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a string that is delimited by the characters &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; &lt;code&gt;zip&lt;/code&gt; will assume that it is an</source>
          <target state="translated">&lt;code&gt;$output_filename_or_reference&lt;/code&gt; が文字「&amp;lt;」と「&amp;gt;」で区切られた文字列の場合、 &lt;code&gt;zip&lt;/code&gt; はそれが</target>
        </trans-unit>
        <trans-unit id="a78a9fcfd00ce247c78fb42d76b95940b9310c9c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is an array reference, the compressed data will be pushed onto the array.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 配列リファレンスであり、圧縮されたデータは、アレイ上にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="37e6606fa0b627f8a29d46dde4b8ebad46bd51a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is an array reference, the uncompressed data will be pushed onto the array.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 配列リファレンスであり、非圧縮データは、アレイ上にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="46c17470e6cc4d6d06d981448409ffd8362d74b4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$path&lt;/code&gt; is absolute, it is cleaned up and returned using &lt;a href=&quot;#canonpath&quot;&gt;&quot;canonpath&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$path&lt;/code&gt; が絶対値の場合、&lt;a href=&quot;#canonpath&quot;&gt;「canonpath」&lt;/a&gt;を使用してクリーンアップされ、返されます。</target>
        </trans-unit>
        <trans-unit id="369470062bc6b67bd375785b11035d408478ab66" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$path&lt;/code&gt; is absolute, it is cleaned up and returned using &lt;a href=&quot;#canonpath&quot;&gt;canonpath&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$path&lt;/code&gt; が絶対パスの場合、クリーンアップされ、&lt;a href=&quot;#canonpath&quot;&gt;canonpath&lt;/a&gt;を使用して返されます。</target>
        </trans-unit>
        <trans-unit id="3c2c38c6381b06048880f2f47e06a03a66a2f0d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$path&lt;/code&gt; is relative, it is converted to absolute form using &lt;a href=&quot;#rel2abs%28%29&quot;&gt;&quot;rel2abs()&quot;&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;cwd&quot;&gt;Cwd::cwd()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$path&lt;/code&gt; が相対パスの場合、&lt;a href=&quot;#rel2abs%28%29&quot;&gt;「rel2abs（）」&lt;/a&gt;を使用して絶対形式に変換されます。これは、&lt;a href=&quot;cwd&quot;&gt;Cwd :: cwd（）に&lt;/a&gt;関連していると見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="8992ca77fb991d344a3dd6a4f26aedbf1b0f1d7f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$path&lt;/code&gt; is relative, it is converted to absolute form using &lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs()&lt;/a&gt;. This means that it is taken to be relative to &lt;a href=&quot;../cwd&quot;&gt;Cwd::cwd()&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$path&lt;/code&gt; が相対パスの場合、&lt;a href=&quot;#rel2abs()&quot;&gt;rel2abs（）&lt;/a&gt;を使用して絶対形式に変換されます。これは、それが&lt;a href=&quot;../cwd&quot;&gt;Cwd :: cwd（）&lt;/a&gt;に対して相対的であると解釈されることを意味します。</target>
        </trans-unit>
        <trans-unit id="a33d4ccec3781b021129aedf529c68c428662f57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$phase&lt;/code&gt; or &lt;code&gt;$type&lt;/code&gt; are undefined or otherwise invalid, an exception will be raised.</source>
          <target state="translated">場合は &lt;code&gt;$phase&lt;/code&gt; または &lt;code&gt;$type&lt;/code&gt; 未定義か、そうでない場合は無効で、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="529756014729906a36945c0c1d2b4d6306a5c66b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$potential_libs&lt;/code&gt; is empty, the return value will be empty. Otherwise, the libraries specified by &lt;code&gt;$Config{perllibs}&lt;/code&gt; (see Config.pm) will be appended to the list of &lt;code&gt;$potential_libs&lt;/code&gt; . The libraries will be searched for in the directories specified in &lt;code&gt;$potential_libs&lt;/code&gt; , &lt;code&gt;$Config{libpth}&lt;/code&gt; , and in &lt;code&gt;$Config{installarchlib}/CORE&lt;/code&gt; . For each library that is found, a space-separated list of fully qualified library pathnames is generated.</source>
          <target state="translated">場合は &lt;code&gt;$potential_libs&lt;/code&gt; 空である、戻り値は空になります。そうでない場合は、 &lt;code&gt;$Config{perllibs}&lt;/code&gt; （Config.pmを参照）で指定されたライブラリが &lt;code&gt;$potential_libs&lt;/code&gt; リストに追加されます。ライブラリは、 &lt;code&gt;$potential_libs&lt;/code&gt; 、 &lt;code&gt;$Config{libpth}&lt;/code&gt; 、および &lt;code&gt;$Config{installarchlib}/CORE&lt;/code&gt; 指定されたディレクトリで検索されます。見つかったライブラリごとに、完全修飾ライブラリパス名のスペース区切りのリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="a33dfa3cb51d3b667a9940aa0224c9aa9e3bd626" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$potential_libs&lt;/code&gt; is empty, the return value will be empty. Otherwise, the libraries specified by &lt;code&gt;$Config{perllibs}&lt;/code&gt; (see Config.pm) will be appended to the list of &lt;code&gt;$potential_libs&lt;/code&gt;. The libraries will be searched for in the directories specified in &lt;code&gt;$potential_libs&lt;/code&gt;, &lt;code&gt;$Config{libpth}&lt;/code&gt;, and in &lt;code&gt;$Config{installarchlib}/CORE&lt;/code&gt;. For each library that is found, a space-separated list of fully qualified library pathnames is generated.</source>
          <target state="translated">場合は &lt;code&gt;$potential_libs&lt;/code&gt; 空である、戻り値は空になります。それ以外の場合は、 &lt;code&gt;$Config{perllibs}&lt;/code&gt; （Config.pmを参照）で指定されたライブラリが &lt;code&gt;$potential_libs&lt;/code&gt; リストに追加されます。ライブラリは、 &lt;code&gt;$potential_libs&lt;/code&gt; 、 &lt;code&gt;$Config{libpth}&lt;/code&gt; 、および &lt;code&gt;$Config{installarchlib}/CORE&lt;/code&gt; 指定されたディレクトリで検索されます。見つかったライブラリごとに、完全修飾ライブラリパス名のスペース区切りのリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="6e553e7605e3100f0e3fcb5a8fa623376f34f081" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$priority&lt;/code&gt; permits, logs &lt;code&gt;$message&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/sprintf&quot;&gt;sprintf&lt;/a&gt;($format, @args)&lt;/code&gt; with the addition that &lt;code&gt;%m&lt;/code&gt; in $message or &lt;code&gt;$format&lt;/code&gt; is replaced with &lt;code&gt;&quot;$!&quot;&lt;/code&gt; (the latest error message).</source>
          <target state="translated">&lt;code&gt;$priority&lt;/code&gt; が許可する場合、 &lt;code&gt;$message&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/sprintf&quot;&gt;sprintf&lt;/a&gt;($format, @args)&lt;/code&gt; をログに記録し、$ messageまたは &lt;code&gt;$format&lt;/code&gt; &lt;code&gt;%m&lt;/code&gt; を &lt;code&gt;&quot;$!&quot;&lt;/code&gt; 置き換えます。（最新のエラーメッセージ）。</target>
        </trans-unit>
        <trans-unit id="853d4061f455f6e6d37a506979fa44f0b913548a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$priority&lt;/code&gt; permits, logs &lt;code&gt;$message&lt;/code&gt; or &lt;code&gt;sprintf($format, @args)&lt;/code&gt; with the addition that &lt;code&gt;%m&lt;/code&gt; in $message or &lt;code&gt;$format&lt;/code&gt; is replaced with &lt;code&gt;&quot;$!&quot;&lt;/code&gt; (the latest error message).</source>
          <target state="translated">&lt;code&gt;$priority&lt;/code&gt; 許可されている場合は、 &lt;code&gt;$message&lt;/code&gt; または &lt;code&gt;sprintf($format, @args)&lt;/code&gt; をログに記録し、$ messageまたは &lt;code&gt;$format&lt;/code&gt; &lt;code&gt;%m&lt;/code&gt; を &lt;code&gt;&quot;$!&quot;&lt;/code&gt; 置き換えます。（最新のエラーメッセージ）。</target>
        </trans-unit>
        <trans-unit id="9f52d52d1ba29c4eacb016d029d5d02c84a30a69" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ref&lt;/code&gt; is a blessed reference the name of the package that it is blessed into is returned. Otherwise &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$ref&lt;/code&gt; がblessされた参照の場合、blessされたパッケージの名前が返されます。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="e5e917878adcf725e243606546ded3ddf73b8c65" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ref&lt;/code&gt; is a blessed reference, the name of the package that it is blessed into is returned. Otherwise &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">場合は &lt;code&gt;$ref&lt;/code&gt; blessされたリファレンス、それが返されるに恵まれていること、パッケージの名前です。それ以外の場合は、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="79e261aa8c38ef64f4ef56cc680e427a28531090" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ref&lt;/code&gt; is a reference the basic Perl type of the variable referenced is returned as a plain string (such as &lt;code&gt;ARRAY&lt;/code&gt; or &lt;code&gt;HASH&lt;/code&gt; ). Otherwise &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$ref&lt;/code&gt; が参照の場合、参照される変数の基本的なPerl型はプレーン文字列（ &lt;code&gt;ARRAY&lt;/code&gt; や &lt;code&gt;HASH&lt;/code&gt; など）として返されます。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="fbc02c6f36c505398dff2d8f520950bd61427281" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ref&lt;/code&gt; is a reference, the basic Perl type of the variable referenced is returned as a plain string (such as &lt;code&gt;ARRAY&lt;/code&gt; or &lt;code&gt;HASH&lt;/code&gt;). Otherwise &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$ref&lt;/code&gt; が参照の場合、参照される変数の基本的なPerlタイプは、プレーンな文字列（ &lt;code&gt;ARRAY&lt;/code&gt; や &lt;code&gt;HASH&lt;/code&gt; など）として返されます。それ以外の場合は、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="fac5930e7537a0d644cf3490408ca500262cfef0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ref&lt;/code&gt; is reference the internal memory address of the referenced value is returned as a plain integer. Otherwise &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$ref&lt;/code&gt; が参照の場合、参照された値の内部メモリアドレスがプレーン整数として返されます。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7f8848e692246887d1670a841851026e0d0d247e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ref&lt;/code&gt; is reference, the internal memory address of the referenced value is returned as a plain integer. Otherwise &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$ref&lt;/code&gt; が参照の場合、参照された値の内部メモリアドレスはプレーン整数として返されます。それ以外の場合は、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4f2f6d4bd4dbef02b5adcb98b33be7311853de12" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$result&lt;/code&gt; is undefined the corresponding parser has reached the end of its input (and will automatically be removed from the multiplexer).</source>
          <target state="translated">&lt;code&gt;$result&lt;/code&gt; が未定義の場合、対応するパーサーは入力の終わりに達しています（そして自動的にマルチプレクサーから削除されます）。</target>
        </trans-unit>
        <trans-unit id="78156973481681bf236b7a46f7e67281a60be7e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$string&lt;/code&gt; is given, then this string is appended to the already existing JSON fragment stored in the &lt;code&gt;$json&lt;/code&gt; object.</source>
          <target state="translated">場合は &lt;code&gt;$string&lt;/code&gt; 与えられ、その後、この文字列はに保存されている既存のJSONフラグメントに追加された &lt;code&gt;$json&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3a340f9f260eea8720ddb9232a9ecfe918063812" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; does not match any part of &lt;code&gt;$string&lt;/code&gt; , returns &lt;code&gt;-1&lt;/code&gt; in scalar context and an empty list in list context.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; のどの部分とも一致しない場合、スカラーコンテキストでは &lt;code&gt;-1&lt;/code&gt; を返し、リストコンテキストでは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="34f2ce5e748390e7ea9b7256361ae68fda804dd4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; does not match any part of &lt;code&gt;$string&lt;/code&gt; , returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context and an empty list in list context.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; のどの部分とも一致しない場合、スカラーコンテキストでは &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、リストコンテキストでは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="78ec8c638c3f85aaeb890b68130939aac53cb1a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; does not match any part of &lt;code&gt;$string&lt;/code&gt; , returns an empty list.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; のどの部分とも一致しない場合、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="fc1b67e1c3f6e66a8b72265ebfbfbd5b7ef792af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; does not match any part of &lt;code&gt;$string&lt;/code&gt;, returns &lt;code&gt;-1&lt;/code&gt; in scalar context and an empty list in list context.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; のどの部分とも一致しない場合、スカラーコンテキストでは &lt;code&gt;-1&lt;/code&gt; を返し、リストコンテキストでは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c201b05fbdc585a181de55865d16278affee3294" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; does not match any part of &lt;code&gt;$string&lt;/code&gt;, returns &lt;code&gt;undef&lt;/code&gt; in scalar context and an empty list in list context.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; のどの部分とも一致しない場合、スカラーコンテキストでは &lt;code&gt;undef&lt;/code&gt; を返し、リストコンテキストでは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="0f2e1e8a9a6ad69b33dbc5f664836bb1347dcf06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; does not match any part of &lt;code&gt;$string&lt;/code&gt;, returns an empty list.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; のどの部分とも一致しない場合、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="7dc9206b35b196b0963c771281e4b1c34fd9c295" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt; , all the occurrences of the matching part are replaced by &lt;code&gt;$replacement&lt;/code&gt; (&lt;code&gt;$string&lt;/code&gt; is modified) and &lt;code&gt;$count&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致する部分のすべての出現箇所が &lt;code&gt;$replacement&lt;/code&gt; （ &lt;code&gt;$string&lt;/code&gt; が変更されます）に置き換えられ、 &lt;code&gt;$count&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b46dcd3b846eff16d0953c63180197a9948d71b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt; , in scalar context, returns &lt;b&gt;a reference to&lt;/b&gt; the first occurrence of the matching part (&lt;code&gt;$match_ref&lt;/code&gt; is always true if matches, since every reference is &lt;b&gt;true&lt;/b&gt;); in list context, returns the first occurrence of the matching part.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; がスカラーコンテキストで &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致する部分の最初の出現&lt;b&gt;へ&lt;/b&gt;の&lt;b&gt;参照を&lt;/b&gt;返します（すべての参照が&lt;b&gt;true&lt;/b&gt;であるため、一致する場合、 &lt;code&gt;$match_ref&lt;/code&gt; は常にtrue &lt;b&gt;です&lt;/b&gt;）。リストのコンテキストでは、一致する部分の最初の出現を返します。</target>
        </trans-unit>
        <trans-unit id="c160da8add608824da0efecdea8fe8dbd7d4c55a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt; , returns all the matching parts (or matching count in scalar context).</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致するすべての部分（またはスカラーコンテキストの一致する数）を返します。</target>
        </trans-unit>
        <trans-unit id="c10bc187ce931b2a7b22530d13ae4fe64805817c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt; , returns the position of the first occurrence of the matching part in scalar context; in list context, returns a two-element list of the position and the length of the matching part.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、スカラーコンテキストで一致する部分が最初に出現する位置を返します。リストのコンテキストでは、一致する部分の位置と長さの2要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="d649e7e5214d8eb5d7dfa63d2b26508aa3ec136c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt; , the first occurrence of the matching part is replaced by &lt;code&gt;$replacement&lt;/code&gt; (&lt;code&gt;$string&lt;/code&gt; is modified) and &lt;code&gt;$count&lt;/code&gt; (always equals to &lt;code&gt;1&lt;/code&gt; ) is returned.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致する部分の最初の出現が &lt;code&gt;$replacement&lt;/code&gt; （ &lt;code&gt;$string&lt;/code&gt; が変更されます）に置き換えられ、 &lt;code&gt;$count&lt;/code&gt; （常に &lt;code&gt;1&lt;/code&gt; と等しい）が返されます。</target>
        </trans-unit>
        <trans-unit id="c3fbde2ba093a3465cab9494d515f9997f56434f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt;, all the occurrences of the matching part are replaced by &lt;code&gt;$replacement&lt;/code&gt; (&lt;code&gt;$string&lt;/code&gt; is modified) and &lt;code&gt;$count&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致する部分のすべての出現箇所が &lt;code&gt;$replacement&lt;/code&gt; 置き換えられ（ &lt;code&gt;$string&lt;/code&gt; が変更されます）、 &lt;code&gt;$count&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4911ca5dae8ff08a4b4cb6051ee9c7432277080b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt;, in scalar context, returns &lt;b&gt;a reference to&lt;/b&gt; the first occurrence of the matching part (&lt;code&gt;$match_ref&lt;/code&gt; is always true if matches, since every reference is &lt;b&gt;true&lt;/b&gt;); in list context, returns the first occurrence of the matching part.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、スカラーコンテキストでは、一致する部分の最初の出現&lt;b&gt;へ&lt;/b&gt;の&lt;b&gt;参照を&lt;/b&gt;返します（すべての参照が&lt;b&gt;true&lt;/b&gt;であるため、一致する場合、 &lt;code&gt;$match_ref&lt;/code&gt; は常にtrue&lt;b&gt;です&lt;/b&gt;）。リストコンテキストでは、一致する部分の最初の出現を返します。</target>
        </trans-unit>
        <trans-unit id="50330de1105cec13a916504977d0fffac051d470" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt;, returns all the matching parts (or matching count in scalar context).</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致するすべての部分（またはスカラーコンテキストでは一致するカウント）を返します。</target>
        </trans-unit>
        <trans-unit id="b37346d5bdc4adf2f6aafd9b3124f4a5fcee52ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt;, returns the position of the first occurrence of the matching part in scalar context; in list context, returns a two-element list of the position and the length of the matching part.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、スカラーコンテキストで一致する部分が最初に出現する位置を返します。リストコンテキストでは、一致するパーツの位置と長さの2要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="7936ff462585086c63c3b202fca7c61f67f270da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$substring&lt;/code&gt; matches a part of &lt;code&gt;$string&lt;/code&gt;, the first occurrence of the matching part is replaced by &lt;code&gt;$replacement&lt;/code&gt; (&lt;code&gt;$string&lt;/code&gt; is modified) and &lt;code&gt;$count&lt;/code&gt; (always equals to &lt;code&gt;1&lt;/code&gt;) is returned.</source>
          <target state="translated">&lt;code&gt;$substring&lt;/code&gt; が &lt;code&gt;$string&lt;/code&gt; 一部と一致する場合、一致する部分の最初の出現が &lt;code&gt;$replacement&lt;/code&gt; 置き換えられ（ &lt;code&gt;$string&lt;/code&gt; が変更されます）、 &lt;code&gt;$count&lt;/code&gt; （常に &lt;code&gt;1&lt;/code&gt; に等しい）が返されます。</target>
        </trans-unit>
        <trans-unit id="923955b556ee1c107b87425fc0d239520dd618a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$thing&lt;/code&gt; refers to an object, then this function returns the name of the package the object has been blessed into. If &lt;code&gt;$thing&lt;/code&gt; doesn't contain a reference to a blessed object, the &lt;code&gt;blessed&lt;/code&gt; function returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$thing&lt;/code&gt; オブジェクトを指し、この関数はオブジェクトがに恵まれているパッケージの名前を返します。 &lt;code&gt;$thing&lt;/code&gt; blessオブジェクトへの参照が含まれていない場合、 &lt;code&gt;blessed&lt;/code&gt; 関数は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6339b1ca7faa12a87dd16d8376168402efc0b0e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$thing&lt;/code&gt; refers to an object, then this function returns the name of the package the object has been blessed into. If &lt;code&gt;$thing&lt;/code&gt; doesn't contain a reference to a blessed object, the &lt;code&gt;blessed&lt;/code&gt; function returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$thing&lt;/code&gt; オブジェクトを指し、この関数はオブジェクトがに恵まれているパッケージの名前を返します。 &lt;code&gt;$thing&lt;/code&gt; blessedオブジェクトへの参照が含まれていない場合、 &lt;code&gt;blessed&lt;/code&gt; 関数は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="62b5b827c9fa69b1b1193c08475c48b1b10adad6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$total-&amp;gt;{bad} == 0&lt;/code&gt; and &lt;code&gt;$total-&amp;gt;{max} &amp;gt; 0&lt;/code&gt; , you've got a successful test.</source>
          <target state="translated">もし &lt;code&gt;$total-&amp;gt;{bad} == 0&lt;/code&gt; と &lt;code&gt;$total-&amp;gt;{max} &amp;gt; 0&lt;/code&gt; 、あなたは成功したテストを持っています。</target>
        </trans-unit>
        <trans-unit id="762c2fef6e9c59f981f639aa3049b28356711a9e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$total-&amp;gt;{bad} == 0&lt;/code&gt; and &lt;code&gt;$total-&amp;gt;{max} &amp;gt; 0&lt;/code&gt;, you've got a successful test.</source>
          <target state="translated">もし &lt;code&gt;$total-&amp;gt;{bad} == 0&lt;/code&gt; と &lt;code&gt;$total-&amp;gt;{max} &amp;gt; 0&lt;/code&gt; 、あなたは成功したテストを持っています。</target>
        </trans-unit>
        <trans-unit id="49c7b300af278a42c6325ca397a30c8b1a02bd5e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$uOldFlags&lt;/code&gt; were the value of the handle's flags before the call to &lt;code&gt;SetHandleInformation&lt;/code&gt;, then the value of the handle's flags afterward would be:</source>
          <target state="translated">場合は &lt;code&gt;$uOldFlags&lt;/code&gt; への呼び出しの前にハンドルの旗の値だった &lt;code&gt;SetHandleInformation&lt;/code&gt; 、その後、ハンドルのフラグの値は、その後次のようになります。</target>
        </trans-unit>
        <trans-unit id="7e9127d14922a52db0d5d2508646de8dbb02dabc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$var&lt;/code&gt; is a scalar that has both numeric and string values, the result is true.</source>
          <target state="translated">&lt;code&gt;$var&lt;/code&gt; が数値と文字列の両方の値を持つスカラーである場合、結果はtrueです。</target>
        </trans-unit>
        <trans-unit id="811b177adb678df1c7fcd2ebe9a8006c41328bc7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$var&lt;/code&gt; is a scalar which was coded as a vstring the result is true.</source>
          <target state="translated">&lt;code&gt;$var&lt;/code&gt; がvstringとしてコーディングされたスカラーの場合、結果はtrueです。</target>
        </trans-unit>
        <trans-unit id="a9caaf937ca561a040c20b5fbde0fec6da524973" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$var&lt;/code&gt; is a scalar which was coded as a vstring, the result is true.</source>
          <target state="translated">&lt;code&gt;$var&lt;/code&gt; がvstringとしてコード化されたスカラーである場合、結果はtrueです。</target>
        </trans-unit>
        <trans-unit id="eea1e5cda1b021861102b8f6816c7f61a9adac01" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt; are non-zero, they must be relative primes, i.e., &lt;code&gt;bgcd($y, $mod)==1&lt;/code&gt; . '&lt;code&gt;NaN&lt;/code&gt; ' is returned when no modular multiplicative inverse exists.</source>
          <target state="translated">場合は &lt;code&gt;$x&lt;/code&gt; と &lt;code&gt;$y&lt;/code&gt; ゼロである、彼らは相対的な素数、すなわち、でなければなりません &lt;code&gt;bgcd($y, $mod)==1&lt;/code&gt; 。' &lt;code&gt;NaN&lt;/code&gt; 'は、モジュラー乗法逆数が存在しない場合に返されます。</target>
        </trans-unit>
        <trans-unit id="b5fcc92529718794debebbbd28d3a6b743f73817" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt; are non-zero, they must be relative primes, i.e., &lt;code&gt;bgcd($y, $mod)==1&lt;/code&gt;. '&lt;code&gt;NaN&lt;/code&gt;' is returned when no modular multiplicative inverse exists.</source>
          <target state="translated">場合は &lt;code&gt;$x&lt;/code&gt; と &lt;code&gt;$y&lt;/code&gt; ゼロである、彼らは相対的な素数、すなわち、でなければなりません &lt;code&gt;bgcd($y, $mod)==1&lt;/code&gt; 。' &lt;code&gt;NaN&lt;/code&gt; 'は、モジュラ逆数が存在しない場合に返されます。</target>
        </trans-unit>
        <trans-unit id="f1241f2fba2bddba0f0228a9100bb47c11034264" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$z&lt;/code&gt; is associated with a buffer, this method has no effect and always returns &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$z&lt;/code&gt; がバッファに関連付けられている場合、このメソッドは効果がなく、常に &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a9624e7af7def5be294a442f4173d4d3d6d7e212" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$z&lt;/code&gt; is associated with a buffer, this method has no effect and always returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$z&lt;/code&gt; がバッファーに関連付けられている場合、このメソッドは効果がなく、常に &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9c2e0c2819ecb9af14cc06d8987b7eee133a60fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;%+&lt;/code&gt; or &lt;code&gt;%-&lt;/code&gt; is being operated on, if any.</source>
          <target state="translated">もし &lt;code&gt;%+&lt;/code&gt; または &lt;code&gt;%-&lt;/code&gt; もしあれば、上で動作しています。</target>
        </trans-unit>
        <trans-unit id="33759bad70947890a80808b87beeb0ad07a9f99a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is overloaded then the same implementation is used for both the</source>
          <target state="translated">場合は &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; その後、過負荷になっている同じ実装が両方に使用されます</target>
        </trans-unit>
        <trans-unit id="2655a0d13879bb1273409b47214e136f442c0716" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;'-'&lt;/code&gt; is the first or last character in a character class, it is treated as an ordinary character.</source>
          <target state="translated">場合は &lt;code&gt;'-'&lt;/code&gt; 文字クラスの最初または最後の文字である、それは通常の文字として扱われます。</target>
        </trans-unit>
        <trans-unit id="3fbcc9b880c1850b742f9cae8dd87f58567ba57c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;'-'&lt;/code&gt; is the first or last character in a character class, it is treated as an ordinary character; &lt;code&gt;[-ab]&lt;/code&gt; , &lt;code&gt;[ab-]&lt;/code&gt; and &lt;code&gt;[a\-b]&lt;/code&gt; are all equivalent.</source>
          <target state="translated">場合は &lt;code&gt;'-'&lt;/code&gt; 文字クラスの最初または最後の文字である、それは通常の文字として扱われます。 &lt;code&gt;[-ab]&lt;/code&gt; 、 &lt;code&gt;[ab-]&lt;/code&gt; 、および &lt;code&gt;[a\-b]&lt;/code&gt; はすべて同等です。</target>
        </trans-unit>
        <trans-unit id="7642b1add676b77e55b012fe61fa0084ce5fe11b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;'-'&lt;/code&gt; is the first or last character in a character class, it is treated as an ordinary character; &lt;code&gt;[-ab]&lt;/code&gt;, &lt;code&gt;[ab-]&lt;/code&gt; and &lt;code&gt;[a\-b]&lt;/code&gt; are all equivalent.</source>
          <target state="translated">場合は &lt;code&gt;'-'&lt;/code&gt; 文字クラスの最初または最後の文字である、それは通常の文字として扱われます。 &lt;code&gt;[-ab]&lt;/code&gt; 、 &lt;code&gt;[ab-]&lt;/code&gt; 、 &lt;code&gt;[a\-b]&lt;/code&gt; はすべて同等です。</target>
        </trans-unit>
        <trans-unit id="8b4ef209f3736a149a4cf48e4ad6ea5f08cb5ced" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;'fallback'&lt;/code&gt; is TRUE and no copy constructor is defined then, for objects not based on scalars, Perl may silently fall back on simple assignment - that is, assignment of the object reference. In effect, this disables the copy constructor mechanism since no new copy of the object data is created. This is almost certainly not what you want. (It is, however, consistent: for example, Perl's fallback for the &lt;code&gt;++&lt;/code&gt; operator is to increment the reference itself.)</source>
          <target state="translated">場合は &lt;code&gt;'fallback'&lt;/code&gt; 、オブジェクト参照の代入である- TRUEで、何のコピーコンストラクタはスカラーに基づいていないオブジェクトに対して、その後、定義されていない、Perlは黙って、単純な割り当てに頼ることがあります。実際には、オブジェクトデータの新しいコピーは作成されないため、これはコピーコンストラクターメカニズムを無効にします。これはほぼ間違いなくあなたが望むものではありません。（ただし、一貫性があります。たとえば、 &lt;code&gt;++&lt;/code&gt; 演算子に対するPerlのフォールバックは、参照自体をインクリメントすることです。）</target>
        </trans-unit>
        <trans-unit id="f876580a65734a569954c7e1c0d71566801b2a2a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;'fallback'&lt;/code&gt; is undefined or TRUE then a copy constructor can be autogenerated, but only for objects based on scalars. In other cases it needs to be defined explicitly. Where an object's data is stored as, for example, an array of scalars, the following might be appropriate:</source>
          <target state="translated">場合は &lt;code&gt;'fallback'&lt;/code&gt; 未定義またはTRUEされ、その後コピーコンストラクタはなく、スカラーのみに基づいて、オブジェクトに対して、自動生成されます。その他の場合は、明示的に定義する必要があります。たとえば、オブジェクトのデータがスカラーの配列として格納されている場合、以下が適切な場合があります。</target>
        </trans-unit>
        <trans-unit id="aaf2bfa6a27ac22ef6886057189af7b7a1f09aa1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-&amp;gt;offs[num].start&lt;/code&gt; or &lt;code&gt;-&amp;gt;offs[num].end&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; then that capture group did not match. &lt;code&gt;-&amp;gt;offs[0].start/end&lt;/code&gt; represents &lt;code&gt;$&amp;amp;&lt;/code&gt; (or &lt;code&gt;${^MATCH}&lt;/code&gt; under &lt;code&gt;//p&lt;/code&gt; ) and &lt;code&gt;-&amp;gt;offs[paren].end&lt;/code&gt; matches &lt;code&gt;$$paren&lt;/code&gt; where &lt;code&gt;$paren &lt;/code&gt; = 1&amp;gt;.</source>
          <target state="translated">もし &lt;code&gt;-&amp;gt;offs[num].start&lt;/code&gt; か &lt;code&gt;-&amp;gt;offs[num].end&lt;/code&gt; ある &lt;code&gt;-1&lt;/code&gt; その後、キャプチャグループが一致しなかったこと。 &lt;code&gt;-&amp;gt;offs[0].start/end&lt;/code&gt; は &lt;code&gt;$&amp;amp;&lt;/code&gt; （または &lt;code&gt;//p&lt;/code&gt; の下の &lt;code&gt;${^MATCH}&lt;/code&gt; ）を表し、 &lt;code&gt;-&amp;gt;offs[paren].end&lt;/code&gt; は &lt;code&gt;$paren &lt;/code&gt; = 1&amp;gt; である &lt;code&gt;$$paren&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="57dd1014f096fb43a6b9346ad9421342ded823ff" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-&amp;gt;offs[num].start&lt;/code&gt; or &lt;code&gt;-&amp;gt;offs[num].end&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; then that capture group did not match. &lt;code&gt;-&amp;gt;offs[0].start/end&lt;/code&gt; represents &lt;code&gt;$&amp;amp;&lt;/code&gt; (or &lt;code&gt;${^MATCH}&lt;/code&gt; under &lt;code&gt;/p&lt;/code&gt;) and &lt;code&gt;-&amp;gt;offs[paren].end&lt;/code&gt; matches &lt;code&gt;$$paren&lt;/code&gt; where &lt;code&gt;$paren &lt;/code&gt;= 1&amp;gt;.</source>
          <target state="translated">もし &lt;code&gt;-&amp;gt;offs[num].start&lt;/code&gt; か &lt;code&gt;-&amp;gt;offs[num].end&lt;/code&gt; ある &lt;code&gt;-1&lt;/code&gt; その後、キャプチャグループが一致しなかったこと。 &lt;code&gt;-&amp;gt;offs[0].start/end&lt;/code&gt; 表す &lt;code&gt;$&amp;amp;&lt;/code&gt; (または &lt;code&gt;${^MATCH}&lt;/code&gt; 下 &lt;code&gt;/p&lt;/code&gt; ）と &lt;code&gt;-&amp;gt;offs[paren].end&lt;/code&gt; 一致 &lt;code&gt;$$paren&lt;/code&gt; &lt;code&gt;$paren &lt;/code&gt; = 1&amp;gt;を。</target>
        </trans-unit>
        <trans-unit id="c6203f8ab9db59ac080a4fb390ff800c0d1e53c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-&lt;/code&gt; is not a recognized switch letter, getopts() supports arguments &lt;code&gt;--help&lt;/code&gt; and &lt;code&gt;--version&lt;/code&gt; . If &lt;code&gt;main::HELP_MESSAGE()&lt;/code&gt; and/or &lt;code&gt;main::VERSION_MESSAGE()&lt;/code&gt; are defined, they are called; the arguments are the output file handle, the name of option-processing package, its version, and the switches string. If the subroutines are not defined, an attempt is made to generate intelligent messages; for best results, define $main::VERSION.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; が認識されるスイッチ文字ではない場合、getopts（）は引数 &lt;code&gt;--help&lt;/code&gt; および &lt;code&gt;--version&lt;/code&gt; をサポートします。場合 &lt;code&gt;main::HELP_MESSAGE()&lt;/code&gt; および/または &lt;code&gt;main::VERSION_MESSAGE()&lt;/code&gt; 定義され、それらが呼ばれています。引数は、出力ファイルハンドル、オプション処理パッケージの名前、そのバージョン、およびスイッチ文字列です。サブルーチンが定義されていない場合、インテリジェントメッセージの生成が試行されます。最良の結果を得るには、$ main :: VERSIONを定義します。</target>
        </trans-unit>
        <trans-unit id="14cd49c88b8972d01c98fe1ff97e8e713aaa02a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-&lt;/code&gt; is not a recognized switch letter, getopts() supports arguments &lt;code&gt;--help&lt;/code&gt; and &lt;code&gt;--version&lt;/code&gt;. If &lt;code&gt;main::HELP_MESSAGE()&lt;/code&gt; and/or &lt;code&gt;main::VERSION_MESSAGE()&lt;/code&gt; are defined, they are called; the arguments are the output file handle, the name of option-processing package, its version, and the switches string. If the subroutines are not defined, an attempt is made to generate intelligent messages; for best results, define $main::VERSION.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; が認識されたスイッチ文字でない場合、getopts（）は引数 &lt;code&gt;--help&lt;/code&gt; および &lt;code&gt;--version&lt;/code&gt; をサポートします。場合 &lt;code&gt;main::HELP_MESSAGE()&lt;/code&gt; および/または &lt;code&gt;main::VERSION_MESSAGE()&lt;/code&gt; 定義され、それらが呼ばれています。引数は、出力ファイルハンドル、オプション処理パッケージの名前、そのバージョン、およびスイッチ文字列です。サブルーチンが定義されていない場合、インテリジェントメッセージの生成が試みられます。最良の結果を得るには、$ main :: VERSIONを定義します。</target>
        </trans-unit>
        <trans-unit id="7069d110eb31ac59c5fa5654832fee9ae99f4bc6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-Strict&lt;/code&gt; is disabled, then &lt;code&gt;$string&lt;/code&gt; can contain any character except NULL. If any null characters are present, the field will be truncated at the first NULL.</source>
          <target state="translated">場合 &lt;code&gt;-Strict&lt;/code&gt; 無効になっている場合、 &lt;code&gt;$string&lt;/code&gt; NULL以外の任意の文字を含めることができます。NULL文字が存在する場合、フィールドは最初のNULLで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="72b90d51b78e3f86c015e424f0a9c82ae7cdd392" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:full&lt;/code&gt; is present, for expansion of &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt;, the string</source>
          <target state="translated">&lt;code&gt;:full&lt;/code&gt; が存在する場合、 &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; 展開では、文字列</target>
        </trans-unit>
        <trans-unit id="34845b5a7409ae2ff88602a784737cd832c5bd71" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:short&lt;/code&gt; is present, and</source>
          <target state="translated">場合 &lt;code&gt;:short&lt;/code&gt; 、存在し、</target>
        </trans-unit>
        <trans-unit id="51514fa7ee13d4abe63d9987d2badb1e9b04ad61" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; winds up off the top of the stack it report the highest context.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;../functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; スタックの上から巻き取るそれは最高の状況を報告しています。</target>
        </trans-unit>
        <trans-unit id="b1ac9c6b50bb86cfe48d37ba1ee2e0f181649af5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; (not a string &lt;code&gt;&quot;undef&quot;&lt;/code&gt; ) is passed explicitly as the value for this key, any normalization is not carried out (this may make tailoring easier if any normalization is not desired). Under &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; , only contiguous contractions are resolved; e.g. even if &lt;code&gt;A-ring&lt;/code&gt; (and &lt;code&gt;A-ring-cedilla&lt;/code&gt; ) is ordered after &lt;code&gt;Z&lt;/code&gt; , &lt;code&gt;A-cedilla-ring&lt;/code&gt; would be primary equal to &lt;code&gt;A&lt;/code&gt; . In this point, &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;, preprocess =&amp;gt; &lt;a href=&quot;../functions/sub&quot;&gt;sub&lt;/a&gt; { NFD(&lt;a href=&quot;../functions/shift&quot;&gt;shift&lt;/a&gt;) })&lt;/code&gt;&lt;b&gt;is not&lt;/b&gt; equivalent to &lt;code&gt;(normalization =&amp;gt; 'NFD')&lt;/code&gt; .</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; （文字列ではありません &lt;code&gt;&quot;undef&quot;&lt;/code&gt; ）は、このキーの値として明示的に渡され、任意の正規化は、（任意の正規化が望まれていない場合、これは簡単に仕立てにすること）が行われていません。 &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; 下では、隣接する縮約のみが解決されます。たとえば、 &lt;code&gt;A-ring&lt;/code&gt; （および &lt;code&gt;A-ring-cedilla&lt;/code&gt; ）が &lt;code&gt;Z&lt;/code&gt; の後に注文されたとしても、 &lt;code&gt;A-cedilla-ring&lt;/code&gt; は &lt;code&gt;A&lt;/code&gt; と同じプライマリになります。この点で、 &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;, preprocess =&amp;gt; &lt;a href=&quot;../functions/sub&quot;&gt;sub&lt;/a&gt; { NFD(&lt;a href=&quot;../functions/shift&quot;&gt;shift&lt;/a&gt;) })&lt;/code&gt; &lt;b&gt;は次&lt;/b&gt;と同等で&lt;b&gt;はありません&lt;/b&gt; &lt;code&gt;(normalization =&amp;gt; 'NFD')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa3ebd4a416f2ed67a7f6e0321914f19253d4061" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is passed explicitly as the value for this key, no file is read (but you can define collation elements via &lt;code&gt;entry&lt;/code&gt; ).</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; このキーの値として明示的に渡され、何のファイルが読み込まれません（ただし、経由で照合要素を定義することができ &lt;code&gt;entry&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="311ed3b2b34ac0afe5f28bb9003642de34a3cf73" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is passed explicitly as the value for this key, weight for Hangul syllables is treated as undefined without decomposition into Hangul Jamo. But definition of weight for Hangul syllables in &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; is still valid.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; このキーの値として明示的に渡され、ハングル音節の重みは、ハングルの字母に分解することなく、未定義として扱われます。ただし、 &lt;code&gt;table&lt;/code&gt; または &lt;code&gt;entry&lt;/code&gt; ハングル音節の重みの定義は引き続き有効です。</target>
        </trans-unit>
        <trans-unit id="a0847d602472c48d4557dcd264e5fd82c70ededc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Devel::Peek&lt;/code&gt; directive has a &lt;code&gt;:opd=FLAGS&lt;/code&gt; argument, this switches on debugging of opcode dispatch. &lt;code&gt;FLAGS&lt;/code&gt; should be a combination of &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt; , and &lt;code&gt;P&lt;/code&gt; (see &lt;b&gt;-D&lt;/b&gt; flags in &lt;a href=&quot;../perlrun&quot;&gt;perlrun&lt;/a&gt;). &lt;code&gt;:opd&lt;/code&gt; is a shortcut for &lt;code&gt;:opd=st&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Devel::Peek&lt;/code&gt; ディレクティブを&lt;a href=&quot;../functions/use&quot;&gt;使用する&lt;/a&gt;場合、 &lt;code&gt;:opd=FLAGS&lt;/code&gt; 引数を指定すると、オペコードディスパッチのデバッグがオンになります。 &lt;code&gt;FLAGS&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;t&lt;/code&gt; 、および &lt;code&gt;P&lt;/code&gt; の組み合わせである必要があります（&lt;a href=&quot;../perlrun&quot;&gt;perlrunの&lt;/a&gt;&lt;b&gt;-D&lt;/b&gt;フラグを参照）。 &lt;code&gt;:opd&lt;/code&gt; は &lt;code&gt;:opd=st&lt;/code&gt; のショートカットです。</target>
        </trans-unit>
        <trans-unit id="dae0c23c00276e5219bdb2cdf7fffc6926c2f0f3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; can read the file but cannot compile it, it returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and sets an error message in &lt;code&gt;$@&lt;/code&gt; . If &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; cannot read the file, it returns undef and sets &lt;code&gt;$!&lt;/code&gt; to the error. Always check &lt;code&gt;$@&lt;/code&gt; first, as compilation could fail in a way that also sets &lt;code&gt;$!&lt;/code&gt; . If the file is successfully compiled, &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; returns the value of the last expression evaluated.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、ファイルを読み取ることができますが、それをコンパイルすることはできません、それは返し &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をして、エラーメッセージを設定します &lt;code&gt;$@&lt;/code&gt; 。ファイルを読み取れない場合 &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、undefを返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。エラーに。コンパイルは &lt;code&gt;$!&lt;/code&gt; も設定する方法で失敗する可能性があるため、常に最初に &lt;code&gt;$@&lt;/code&gt; 確認してください。。ファイルが正常にコンパイルされると、 &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; は最後に評価された式の値を返します。</target>
        </trans-unit>
        <trans-unit id="e753c27e9c7187898b162963067981265acf4ee7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; can read the file but cannot compile it, it returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and sets an error message in &lt;code&gt;$@&lt;/code&gt; . If &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; cannot read the file, it returns undef and sets &lt;code&gt;$!&lt;/code&gt; to the error. Always check &lt;code&gt;$@&lt;/code&gt; first, as compilation could fail in a way that also sets &lt;code&gt;$!&lt;/code&gt; . If the file is successfully compiled, &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; returns the value of the last expression evaluated.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、ファイルを読み取ることができますが、それをコンパイルすることはできません、それは返し &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をして、エラーメッセージを設定します &lt;code&gt;$@&lt;/code&gt; 。ファイルを読み取れない場合 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、undefを返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。エラーに。コンパイルは &lt;code&gt;$!&lt;/code&gt; も設定する方法で失敗する可能性があるため、常に最初に &lt;code&gt;$@&lt;/code&gt; 確認してください。。ファイルが正常にコンパイルされると、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; は最後に評価された式の値を返します。</target>
        </trans-unit>
        <trans-unit id="a29f1441f3fe81108d43067a84beeb2b3df06a0c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; really is needed, then consider using the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; が本当に必要な場合は、次の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="fbdbd42df3d8a3289f178b0b712d70c88452aff7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; encounters an operating system error, &lt;code&gt;$!&lt;/code&gt; will be set with the corresponding error message. It can be helpful to check &lt;code&gt;$!&lt;/code&gt; when you are reading from filehandles you don't trust, such as a tty or a socket. The following example uses the operator form of &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; and dies if the result is not defined.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; でオペレーティングシステムエラーが発生した場合は、 &lt;code&gt;$!&lt;/code&gt; 対応するエラーメッセージが設定されます。 &lt;code&gt;$!&lt;/code&gt; をチェックすると参考になります！ ttyやソケットなど、信頼できないファイルハンドルから読み取る場合。次の例では、演算子形式の &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; を使用し、結果が定義されていない場合は終了します。</target>
        </trans-unit>
        <trans-unit id="d241999daf1d6b5b1d790a94e12c3db4b7639b62" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; does not point to a well-formed UTF-8 character and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) to -1. If those warnings are off, the computed value if well-defined (or the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ) is the next possible position in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が有効になっている整形UTF8文字とUTF8の警告を指していない、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されて &lt;code&gt;retlen&lt;/code&gt; が -1 NULLではありません）。これらの警告がオフの場合、適切に定義されている場合は計算された値（そうでない場合はUnicode REPLACEMENT CHARACTER）が暗黙的に返され、（ &lt;code&gt;retlen&lt;/code&gt; がNULLでない場合） &lt;code&gt;*retlen&lt;/code&gt; が設定されるため、（ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）は不正でない文字を開始する可能性がある &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; の次の可能な位置。参照してください&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt;置換文字が返されたときの詳細については。</target>
        </trans-unit>
        <trans-unit id="e0d74bacc686d5d25a69c27fe56691316eb86755" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; does not point to a well-formed UTF-8 character and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) to -1. If those warnings are off, the computed value, if well-defined (or the Unicode REPLACEMENT CHARACTER if not), is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ) is the next possible position in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が有効になっている整形UTF8文字とUTF8の警告を指していない、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されて &lt;code&gt;retlen&lt;/code&gt; が -1 NULLではありません）。これらの警告がオフの場合、適切に定義されている場合（またはUnicode REPLACEMENT CHARACTERの場合）、計算された値はサイレントに返され、（ &lt;code&gt;retlen&lt;/code&gt; がNULLでない場合） &lt;code&gt;*retlen&lt;/code&gt; が設定されるため、（ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）は不正でない文字を開始する可能性がある &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; の次の可能な位置。参照してください&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt;置換文字が返されたときの詳細については。</target>
        </trans-unit>
        <trans-unit id="bd7ce6c8380ad430d911ba4aeab09bd5672c569b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; points to one of the detected malformations, and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; doesn't point to NULL) to -1. If those warnings are off, the computed value if well-defined (or the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ) is the next possible position in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">もし &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 検出された奇形のいずれかを指し、UTF8警告は、有効になっているゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; が（あれば設定されている &lt;code&gt;retlen&lt;/code&gt; が -1 NULLをポイントしません）。これらの警告がオフの場合、適切に定義されている場合は計算された値（そうでない場合はUnicode REPLACEMENT CHARACTER）が暗黙的に返され、（ &lt;code&gt;retlen&lt;/code&gt; がNULLでない場合） &lt;code&gt;*retlen&lt;/code&gt; が設定されるため、（ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）は不正でない文字を開始する可能性がある &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; の次の可能な位置。参照してください&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt;置換文字が返されたときの詳細については。</target>
        </trans-unit>
        <trans-unit id="f087a32f599c70b71522f617c69df5af3084d9d6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; points to one of the detected malformations, and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) to -1. If those warnings are off, the computed value if well-defined (or the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ) is the next possible position in &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">もし &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 検出奇形、およびUTF8の警告のいずれかの点が有効にされ、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されている &lt;code&gt;retlen&lt;/code&gt; が NULLでない）-1。これらの警告がオフの場合、適切に定義されている場合は計算された値（そうでない場合はUnicode REPLACEMENT CHARACTER）が暗黙的に返され、（ &lt;code&gt;retlen&lt;/code&gt; がNULLでない場合） &lt;code&gt;*retlen&lt;/code&gt; が設定されるため、（ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）は不正でない文字を開始する可能性がある &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; の次の可能な位置。参照してください&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;utf8n_to_uvchr&lt;/a&gt;置換文字が返されたときの詳細については。</target>
        </trans-unit>
        <trans-unit id="5f4f6bcfdeca5ca3ce7d26db71a53789a3b67e8b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; is invoked as &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; ' '&lt;/code&gt; or with no arguments (which really means &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;(' ', $_)&lt;/code&gt; , see &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;), Perl will set this flag. The regex engine can then check for it and set the SKIPWHITE and WHITE extflags. To do this, the Perl engine does:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; ' '&lt;/code&gt; として、または引数なしで呼び出された場合（実際には &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;(' ', $_)&lt;/code&gt; 意味します&lt;a href=&quot;functions/split&quot;&gt;。splitを&lt;/a&gt;参照）、Perlはこのフラグを設定します。正規表現エンジンはそれをチェックし、SKIPWHITEおよびWHITE extflagsを設定できます。これを行うために、Perlエンジンは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="5670ad2e09b0f96c2653919425d0503ae94298b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; is not called explicitly, it is called implicitly without a parameter at the first use of the &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; operator. However, there are a few situations where programs are likely to want to call &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;. One is for generating predictable results, generally for testing or debugging. There, you use &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand($seed)&lt;/a&gt;&lt;/code&gt;, with the same &lt;code&gt;$seed&lt;/code&gt; each time. Another case is that you may want to call &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; after a &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; to avoid child processes sharing the same seed value as the parent (and consequently each other).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; が明示的に呼び出されない場合、 &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; 演算子の最初の使用時にパラメーターなしで暗黙的に呼び出されます。ただし、プログラムが &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; を呼び出したい場合がいくつかあります。 1つは、一般にテストまたはデバッグのために、予測可能な結果を​​生成するためのものです。そこでは、毎回同じ &lt;code&gt;$seed&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand($seed)&lt;/a&gt;&lt;/code&gt; を使用します。別のケースでは、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; 後にsrand（）を呼び出して、子プロセスが親と同じシード値を（したがって、お互いに）共有しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="cccd9e31f8fdf12513d7e9607d1902ac2bd43369" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; is passed the special filehandle consisting of an underline, no stat is done, but the current contents of the stat structure from the last &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, or filetest are returned. Example:</source>
          <target state="translated">下線からなる特別なファイルハンドルが &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; に渡された場合、statは実行されませんが、最後の &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、またはfiletest からのstat構造体の現在の内容が返されます。例：</target>
        </trans-unit>
        <trans-unit id="3a943f3015131830c0ed79135dd6ffd5caeedbfa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is specified as an argument to &lt;code&gt;autodie&lt;/code&gt; , then it uses &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; to do the heavy lifting. See the description of that module for more information.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; への引数として &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; が指定されている場合は、&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC :: System :: Simple&lt;/a&gt;を使用して重い処理を行います。詳細については、そのモジュールの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a8b7802544453fc6ad5238177a90c2f0eccb634" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (including &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ) is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; （含む &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ）効果であり、POSIX ::のsetlocale（）が呼び出された、フォーマットされた浮動小数点数で小数点の区切り文字に使用する文字は、によって影響される &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール。&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;と&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="037fc9127a03dbcb60108531d797528430fc80ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; encounters an operating system error, &lt;code&gt;$!&lt;/code&gt; will be set with the corresponding error message. It can be helpful to check &lt;code&gt;$!&lt;/code&gt; when you are reading from filehandles you don't trust, such as a tty or a socket. The following example uses the operator form of &lt;code&gt;&lt;a href=&quot;readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; and dies if the result is not defined.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; でオペレーティングシステムエラーが発生した場合は、 &lt;code&gt;$!&lt;/code&gt; 対応するエラーメッセージが設定されます。 &lt;code&gt;$!&lt;/code&gt; をチェックすると参考になります！ ttyやソケットなど、信頼できないファイルハンドルから読み取る場合。次の例では、演算子形式の &lt;code&gt;&lt;a href=&quot;readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; を使用し、結果が定義されていない場合は終了します。</target>
        </trans-unit>
        <trans-unit id="2d7702ac9f2d2a81c61f2c22a4643a2b4934ac53" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; is not called explicitly, it is called implicitly without a parameter at the first use of the &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; operator. However, there are a few situations where programs are likely to want to call &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;. One is for generating predictable results, generally for testing or debugging. There, you use &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand($seed)&lt;/a&gt;&lt;/code&gt;, with the same &lt;code&gt;$seed&lt;/code&gt; each time. Another case is that you may want to call &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; after a &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; to avoid child processes sharing the same seed value as the parent (and consequently each other).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; が明示的に呼び出されない場合、 &lt;code&gt;&lt;a href=&quot;rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; 演算子の最初の使用時にパラメーターなしで暗黙的に呼び出されます。ただし、プログラムが &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; を呼び出したい場合がいくつかあります。 1つは、一般にテストまたはデバッグのために、予測可能な結果を​​生成するためのものです。そこでは、毎回同じ &lt;code&gt;$seed&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand($seed)&lt;/a&gt;&lt;/code&gt; を使用します。別のケースでは、 &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;srand&quot;&gt;srand()&lt;/a&gt;&lt;/code&gt; 後にsrand（）を呼び出して、子プロセスが親と同じシード値を（したがって、お互いに）共有しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="0e39dea0f8d4bc40933767354a2f3ede98ed2f3d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; is passed the special filehandle consisting of an underline, no stat is done, but the current contents of the stat structure from the last &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;, or filetest are returned. Example:</source>
          <target state="translated">下線からなる特別なファイルハンドルが &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; に渡された場合、statは実行されませんが、最後の &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、またはfiletest からのstat構造体の現在の内容が返されます。例：</target>
        </trans-unit>
        <trans-unit id="4d0fc4f120e9a470fc6f07be480b6e3ed0441ee3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; is in effect:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; &lt;a href=&quot;use&quot;&gt;使用&lt;/a&gt;が有効な場合：</target>
        </trans-unit>
        <trans-unit id="acafe9c3ebbd6459bfa75fbfb2c2b7c67ce9bcdd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (including &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ) is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale. See &lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;../posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; （含む &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ）効果であり、POSIX ::のsetlocale（）が呼び出された、フォーマットされた浮動小数点数で小数点の区切り文字に使用する文字は、によって影響される &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール。&lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;と&lt;a href=&quot;../posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4fa0102bfd20d7fca81e7a9229fd0c15e53ef801" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;@descriptions&lt;/code&gt; is given, these correspond to the keys used in each call to the add() method. Returns an array of the requested parsers (in the requested order) in list context or an array reference in scalar context.</source>
          <target state="translated">&lt;code&gt;@descriptions&lt;/code&gt; が指定されている場合、これらはadd（）メソッドの各呼び出しで使用されるキーに対応します。リストコンテキストの要求されたパーサーの配列（要求された順序）またはスカラーコンテキストの配列参照を返します。</target>
        </trans-unit>
        <trans-unit id="19fd000c86a54d51f5f77fda0d06393c9c4850ce" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A'&lt;/code&gt; coincide: &lt;code&gt;AB&lt;/code&gt; is a better match than &lt;code&gt;AB'&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; is a better match for &lt;code&gt;T&lt;/code&gt; than &lt;code&gt;B'&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;A'&lt;/code&gt; が一致： &lt;code&gt;AB&lt;/code&gt; は、より良好一致する &lt;code&gt;AB'&lt;/code&gt; 場合 &lt;code&gt;B&lt;/code&gt; より良いマッチである &lt;code&gt;T&lt;/code&gt; より &lt;code&gt;B'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1cdd4b8faba979c10f3007699d2ae7796c4a29c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;A&lt;/code&gt; is a better match for &lt;code&gt;S&lt;/code&gt; than &lt;code&gt;A'&lt;/code&gt;, &lt;code&gt;AB&lt;/code&gt; is a better match than &lt;code&gt;A'B'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;A&lt;/code&gt; が &lt;code&gt;A'&lt;/code&gt; よりも &lt;code&gt;S&lt;/code&gt; の方が一致する場合、 &lt;code&gt;AB&lt;/code&gt; は &lt;code&gt;A'B'&lt;/code&gt; よりも一致します。</target>
        </trans-unit>
        <trans-unit id="4156d315c54ceb2fee7698af8b63e714f0a2462c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, all compressed data will be append to the end of the output buffer. Otherwise the output buffer will be cleared before any compressed data is written to it.</source>
          <target state="translated">&lt;code&gt;Append&lt;/code&gt; が有効な場合、すべての圧縮データは出力バッファーの最後に追加されます。それ以外の場合は、圧縮データが書き込まれる前に出力バッファーがクリアされます。</target>
        </trans-unit>
        <trans-unit id="949b457391fc5cf37099eaecff56b10b510ca113" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, all uncompressed data will be append to the end of the output buffer. Otherwise the output buffer will be cleared before any uncompressed data is written to it.</source>
          <target state="translated">&lt;code&gt;Append&lt;/code&gt; が有効な場合、すべての非圧縮データは出力バッファーの最後に追加されます。それ以外の場合、圧縮されていないデータが書き込まれる前に、出力バッファーはクリアされます。</target>
        </trans-unit>
        <trans-unit id="badd301fd65baa8719ba53ea1a80949656267442" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, the file will be opened in append mode. Otherwise the contents of the file, if any, will be truncated before any compressed data is written to it.</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 有効になっている、ファイルを追加モードで開かれます。それ以外の場合、圧縮データがファイルに書き込まれる前に、ファイルの内容は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="1454be0505ecbcd6144a8007fb6e1b0593fddf1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, the file will be opened in append mode. Otherwise the contents of the file, if any, will be truncated before any uncompressed data is written to it.</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 有効になっている、ファイルを追加モードで開かれます。それ以外の場合、ファイルのコンテンツは、もしあれば、圧縮されていないデータが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="65081513c33900b0638266063d522dfa1dd85637" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, the filehandle will be positioned to the end of the file via a call to &lt;code&gt;&lt;a href=&quot;../../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; before any compressed data is written to it. Otherwise the file pointer will not be moved.</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 有効になっている、ファイルハンドルは、呼び出しを経由して、ファイルの末尾に配置されます &lt;code&gt;&lt;a href=&quot;../../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; 任意の圧縮されたデータが書き込まれる前に。それ以外の場合、ファイルポインターは移動されません。</target>
        </trans-unit>
        <trans-unit id="26fb68f8b046494190d2e776943c032f469c5adb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, the filehandle will be positioned to the end of the file via a call to &lt;code&gt;&lt;a href=&quot;../../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; before any uncompressed data is written to it. Otherwise the file pointer will not be moved.</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 有効になっている、ファイルハンドルは、呼び出しを経由して、ファイルの末尾に配置されます &lt;code&gt;&lt;a href=&quot;../../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; 任意の非圧縮データが書き込まれる前に。それ以外の場合、ファイルポインターは移動されません。</target>
        </trans-unit>
        <trans-unit id="61760816f1c2f85d9599ced573f084a05cf816ce" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, the filehandle will be positioned to the end of the file via a call to &lt;code&gt;seek&lt;/code&gt; before any compressed data is written to it. Otherwise the file pointer will not be moved.</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 有効になっている、ファイルハンドルは、呼び出しを経由して、ファイルの末尾に配置されます &lt;code&gt;seek&lt;/code&gt; 任意の圧縮されたデータが書き込まれる前に。それ以外の場合、ファイルポインタは移動されません。</target>
        </trans-unit>
        <trans-unit id="3a4c77f4cfed963d8872c1a7f3de19f7c8bb526f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Append&lt;/code&gt; is enabled, the filehandle will be positioned to the end of the file via a call to &lt;code&gt;seek&lt;/code&gt; before any uncompressed data is written to it. Otherwise the file pointer will not be moved.</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 有効になっている、ファイルハンドルは、呼び出しを経由して、ファイルの末尾に配置されます &lt;code&gt;seek&lt;/code&gt; 任意の非圧縮データが書き込まれる前に。それ以外の場合、ファイルポインタは移動されません。</target>
        </trans-unit>
        <trans-unit id="a8cc3d0792e66bfb9901cb16087529158d209e53" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;anyinflate&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;anyinflate&lt;/code&gt; が完了しました。</target>
        </trans-unit>
        <trans-unit id="6e70bd36d1a537ad13b970c5e3018a8db164c8ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;anyuncompress&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;anyuncompress&lt;/code&gt; が完了しました。</target>
        </trans-unit>
        <trans-unit id="c9769aa738284afde961b2f9bd816825ddcd7550" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;bunzip2&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;bunzip2&lt;/code&gt; が完了しました。</target>
        </trans-unit>
        <trans-unit id="45ce2b192ba4b06ccb81a9f97e89861c03acbbf0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;bzip2&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;bzip2&lt;/code&gt; のが完了しました。</target>
        </trans-unit>
        <trans-unit id="931b26269125b502ee9a79f1079ca4ffe0db45ab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;deflate&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;deflate&lt;/code&gt; 完了しました。</target>
        </trans-unit>
        <trans-unit id="e1fd436eb74e99c1011e676ef2d33a7ca8f221d0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;gunzip&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;gunzip&lt;/code&gt; のが完了しました。</target>
        </trans-unit>
        <trans-unit id="88e88b090b73765991b48faaa8220edbbe4df365" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;gzip&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;gzip&lt;/code&gt; 完了しました。</target>
        </trans-unit>
        <trans-unit id="a90d9e6b94ea9918e75047142b2356a3ca3ce954" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;inflate&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;inflate&lt;/code&gt; 完了しました。</target>
        </trans-unit>
        <trans-unit id="8a6b1372a509b879eaf5e2572538481635eccd1a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;rawdeflate&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;rawdeflate&lt;/code&gt; が完了しました。</target>
        </trans-unit>
        <trans-unit id="49cd128d450ba32be8b448e6b5ad08dbf2c6fedd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;rawinflate&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;rawinflate&lt;/code&gt; が完了しました。</target>
        </trans-unit>
        <trans-unit id="c0389ec2b7c0d6d8486da6034ee7b237f00728a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;unzip&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;unzip&lt;/code&gt; 完了しました。</target>
        </trans-unit>
        <trans-unit id="b28f338327748e0ed3d3b45714c8c08b6240edf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;AutoClose&lt;/code&gt; is specified, and the value is true, it will result in all input and/or output filehandles being closed once &lt;code&gt;zip&lt;/code&gt; has completed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; 指定され、値がtrueの場合、それは一度閉鎖されているすべての入力および/または出力ファイルハンドルになります &lt;code&gt;zip&lt;/code&gt; 完了しました。</target>
        </trans-unit>
        <trans-unit id="2f369078e4170f80457a1f35c7563da5a1cc6678" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Blocking&lt;/code&gt; is set to 0, the connection will be in nonblocking mode. If not specified it defaults to 1 (blocking mode).</source>
          <target state="translated">&lt;code&gt;Blocking&lt;/code&gt; が0に設定されている場合、接続は非ブロッキングモードになります。指定しない場合のデフォルトは1（ブロックモード）です。</target>
        </trans-unit>
        <trans-unit id="bb88f5eab4e448f2a5e55013144cf7297d82804e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DATA&lt;/code&gt; is not specified then the result will indicate that the server wishes the data to be sent. The data must then be sent using the &lt;code&gt;datasend&lt;/code&gt; and &lt;code&gt;dataend&lt;/code&gt; methods described in &lt;a href=&quot;Net::Cmd&quot;&gt;Net::Cmd&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DATA&lt;/code&gt; が指定されていない場合、結果はサーバーがデータの送信を希望していることを示します。データは、その後使用して送信されなければならない &lt;code&gt;datasend&lt;/code&gt; と &lt;code&gt;dataend&lt;/code&gt; に記載されている方法&lt;a href=&quot;Net::Cmd&quot;&gt;はNet :: Cmdをします&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="27ca4e9e26da273f75ec2f01acbae00f6340bacd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DATA&lt;/code&gt; is not specified then the result will indicate that the server wishes the data to be sent. The data must then be sent using the &lt;code&gt;datasend&lt;/code&gt; and &lt;code&gt;dataend&lt;/code&gt; methods described in &lt;a href=&quot;cmd&quot;&gt;Net::Cmd&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DATA&lt;/code&gt; が指定されていない場合、結果はサーバーがデータの送信を望んでいることを示します。次に、&lt;a href=&quot;cmd&quot;&gt;Net :: Cmdで&lt;/a&gt;説明されている &lt;code&gt;datasend&lt;/code&gt; および &lt;code&gt;dataend&lt;/code&gt; メソッドを使用してデータを送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="1b9556c0d7129263a154caaea9b76ae15222d837" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Digest::MD5&lt;/code&gt; is not available, it return a string with only &lt;code&gt;0&lt;/code&gt;'s.</source>
          <target state="translated">場合 &lt;code&gt;Digest::MD5&lt;/code&gt; 利用できない、それだけで文字列を返す &lt;code&gt;0&lt;/code&gt; さん。</target>
        </trans-unit>
        <trans-unit id="a2e077eab3d667c955449b8c582fa6b4685309db" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ExactAddresses&lt;/code&gt; is passed to the constructor, then addresses should be a valid rfc2821-quoted address, although Net::SMTP will accept the address surrounded by angle brackets.</source>
          <target state="translated">&lt;code&gt;ExactAddresses&lt;/code&gt; がコンストラクタに渡される場合、アドレスは有効なrfc2821-quotedアドレスでなければなりませんが、Net :: SMTPは山括弧で囲まれたアドレスを受け入れます。</target>
        </trans-unit>
        <trans-unit id="3d6f9a7de111ad6f15c5cac01bf2df035fda0020" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FH&lt;/code&gt; is specified then it is expected to be a valid filehandle and the result will be printed to it, on success a true value will be returned. If &lt;code&gt;FH&lt;/code&gt; is not specified then the return value, on success, will be a reference to an array containing the article requested, each entry in the array will contain one line of the article.</source>
          <target state="translated">&lt;code&gt;FH&lt;/code&gt; が指定されている場合、それは有効なファイルハンドルであることが期待され、結果がそれに出力されます。成功した場合、true値が返されます。 &lt;code&gt;FH&lt;/code&gt; が指定されていない場合、戻り値は、成功した場合、要求された記事を含む配列への参照になります。配列の各エントリには、記事の1行が含まれます。</target>
        </trans-unit>
        <trans-unit id="dcf85df21ad4f13a17a67e275700748df1fd4365" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Features&lt;/code&gt; method reports a feature &lt;code&gt;attribs&lt;/code&gt; as present, the method &lt;code&gt;Attribs&lt;/code&gt; is not dummy.</source>
          <target state="translated">&lt;code&gt;Features&lt;/code&gt; メソッドが現在の機能 &lt;code&gt;attribs&lt;/code&gt; を報告する場合、メソッド &lt;code&gt;Attribs&lt;/code&gt; はダミーではありません。</target>
        </trans-unit>
        <trans-unit id="4e81c8aad04f59a1692e53f2e58534a0dee91bde" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;File&lt;/code&gt; inherited from &lt;code&gt;DataSource&lt;/code&gt; , which inherited from &lt;code&gt;Thing&lt;/code&gt; , then Perl would keep looking &quot;up the chain&quot; if necessary.</source>
          <target state="translated">場合は &lt;code&gt;File&lt;/code&gt; から継承された &lt;code&gt;DataSource&lt;/code&gt; から継承された、 &lt;code&gt;Thing&lt;/code&gt; 、そしてPerlは必要に応じて「チェーンまで」探し続けるでしょう。</target>
        </trans-unit>
        <trans-unit id="01422e251ecb63e2630d1526d1b2fd71e7e35b64" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;File&lt;/code&gt; inherited from &lt;code&gt;DataSource&lt;/code&gt;, which inherited from &lt;code&gt;Thing&lt;/code&gt;, then Perl would keep looking &quot;up the chain&quot; if necessary.</source>
          <target state="translated">場合は &lt;code&gt;File&lt;/code&gt; から継承された &lt;code&gt;DataSource&lt;/code&gt; から継承された、 &lt;code&gt;Thing&lt;/code&gt; 、そしてPerlは必要に応じて「チェーンまで」探し続けるでしょう。</target>
        </trans-unit>
        <trans-unit id="871f80a19c627be0f52c1b6ef1cd6cbad1358e34" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileHandle::open&lt;/code&gt; is given a numeric mode, it passes that mode and the optional permissions value to the Perl &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; operator. For convenience, &lt;code&gt;FileHandle::import&lt;/code&gt; tries to import the O_XXX constants from the Fcntl module. If dynamic loading is not available, this may fail, but the rest of FileHandle will still work.</source>
          <target state="translated">場合は &lt;code&gt;FileHandle::open&lt;/code&gt; 数字モードが与えられ、それは、Perlにそのモードとオプションの権限値を渡し &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; でオペレータ。便宜上、 &lt;code&gt;FileHandle::import&lt;/code&gt; はFcntlモジュールからO_XXX定数をインポートしようとします。動的ロードが利用できない場合、これは失敗する可能性がありますが、残りのFileHandleは引き続き機能します。</target>
        </trans-unit>
        <trans-unit id="e5d4678ebb21520018d8a8ac8a3ed168c69d444f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileHandle::open&lt;/code&gt; is given a numeric mode, it passes that mode and the optional permissions value to the Perl &lt;code&gt;sysopen&lt;/code&gt; operator. For convenience, &lt;code&gt;FileHandle::import&lt;/code&gt; tries to import the O_XXX constants from the Fcntl module. If dynamic loading is not available, this may fail, but the rest of FileHandle will still work.</source>
          <target state="translated">場合は &lt;code&gt;FileHandle::open&lt;/code&gt; 数字モードが与えられ、それは、Perlにそのモードとオプションの権限値を渡し &lt;code&gt;sysopen&lt;/code&gt; でオペレータ。便宜上、 &lt;code&gt;FileHandle::import&lt;/code&gt; はFcntlモジュールからO_XXX定数をインポートしようとします。動的ロードが利用できない場合、これは失敗する可能性がありますが、FileHandleの残りの部分は引き続き機能します。</target>
        </trans-unit>
        <trans-unit id="bb1f139d098c0a906b0eeef1ef6e5dc6d9836cd4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileHandle::open&lt;/code&gt; receives a Perl mode string (&quot;&amp;gt;&quot;, &quot;+&amp;lt;&quot;, etc.) or a POSIX fopen() mode string (&quot;w&quot;, &quot;r+&quot;, etc.), it uses the basic Perl &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;FileHandle::open&lt;/code&gt; がPerlモード文字列（ &quot;&amp;gt;&quot;、 &quot;+ &amp;lt;&quot;など）またはPOSIX fopen（）モード文字列（ &quot;w&quot;、 &quot;r +&quot;など）を受け取った場合、基本的なPerl &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; を使用します。オペレーター。</target>
        </trans-unit>
        <trans-unit id="f576810c104d4cab1572ebfd5a073a5c50992b01" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileHandle::open&lt;/code&gt; receives a Perl mode string (&quot;&amp;gt;&quot;, &quot;+&amp;lt;&quot;, etc.) or a POSIX fopen() mode string (&quot;w&quot;, &quot;r+&quot;, etc.), it uses the basic Perl &lt;code&gt;open&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;FileHandle::open&lt;/code&gt; がPerlモード文字列（ &quot;&amp;gt;&quot;、 &quot;+ &amp;lt;&quot;など）またはPOSIX fopen（）モード文字列（ &quot;w&quot;、 &quot;r +&quot;など）を受信した場合、基本的なPerlopenを使用し &lt;code&gt;open&lt;/code&gt; オペレーター。</target>
        </trans-unit>
        <trans-unit id="a2feaf81d0c85e64b59f8f9c85179dcb22ae1819" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GLOB_NOSORT&lt;/code&gt; is not in effect, sort filenames is alphabetical order (case does not matter) rather than in ASCII order.</source>
          <target state="translated">&lt;code&gt;GLOB_NOSORT&lt;/code&gt; が有効でない場合、ソートファイル名はASCII順ではなくアルファベット順（大文字と小文字は関係ありません）です。</target>
        </trans-unit>
        <trans-unit id="67e8ee96965d8f4239b93f54928c2446de8f1552" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GNU&lt;/code&gt; cc (gcc) is used, this variable holds &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; to indicate whether the compiler is version 1 or 2. This is used in setting some of the default cflags. It is set to '' if not gcc.</source>
          <target state="translated">場合 &lt;code&gt;GNU&lt;/code&gt; の CC（GCC）が使用され、この変数が保持する &lt;code&gt;1&lt;/code&gt; 又は &lt;code&gt;2&lt;/code&gt; をコンパイラがバージョン1または2これはデフォルトCFLAGSのいくつかの設定で使用されているかどうかを示します。gccでない場合は ''に設定されます。</target>
        </trans-unit>
        <trans-unit id="ee184683f7c3453d93a7bedbc7d10e7e2d4b99bb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GNU&lt;/code&gt; cc (gcc) is used, this variable holds the operating system and version used to compile gcc. It is set to '' if not gcc, or if nothing useful can be parsed as the os version.</source>
          <target state="translated">場合 &lt;code&gt;GNU&lt;/code&gt; の CC（GCC）が使用され、この変数は、コンパイルGCCに使用されるオペレーティングシステムとバージョンを保持しています。gccでない場合、または有用なものがosバージョンとして解析できない場合は、 ''に設定されます。</target>
        </trans-unit>
        <trans-unit id="c7c81dd0bd77cba1c688390cdf8b5eb031575d80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;GNU&lt;/code&gt; cc (gcc) is used, this variable will enable (if set) the -ansi and -pedantic ccflags for building core files (through cflags script). (See</source>
          <target state="translated">場合 &lt;code&gt;GNU&lt;/code&gt; CC（GCC）が使用され、この変数は、（設定されている場合）（CFLAGSスクリプト経由）コアファイルを構築するための-ansiと-pedantic CCFLAGSが可能になります。（見る</target>
        </trans-unit>
        <trans-unit id="0efd17fe9103ee1aaae0dc765c4fdcda7599e53f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IO::File::open&lt;/code&gt; is given a mode that includes the &lt;code&gt;:&lt;/code&gt; character, it passes all the three arguments to the three-argument &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;IO::File::open&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; 文字を含むモードが指定されている場合、3つの引数すべてを3つの引数の &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 演算子に渡します。</target>
        </trans-unit>
        <trans-unit id="d9d2307f492ec346285f4361272b678878cc377e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IO::File::open&lt;/code&gt; is given a mode that includes the &lt;code&gt;:&lt;/code&gt; character, it passes all the three arguments to the three-argument &lt;code&gt;open&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;IO::File::open&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; 文字を含むモードが指定されている場合、3つの引数すべてが3つの引数の &lt;code&gt;open&lt;/code&gt; 演算子に渡されます。</target>
        </trans-unit>
        <trans-unit id="6b022840a97cd5dd7f3b791be6eab1e939aa4189" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IO::File::open&lt;/code&gt; is given a numeric mode, it passes that mode and the optional permissions value to the Perl &lt;code&gt;&lt;a href=&quot;../functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; operator. The permissions default to 0666.</source>
          <target state="translated">場合は &lt;code&gt;IO::File::open&lt;/code&gt; 数字モードが与えられ、それは、Perlにそのモードとオプションの権限値を渡し &lt;code&gt;&lt;a href=&quot;../functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; でオペレータ。権限のデフォルトは0666です。</target>
        </trans-unit>
        <trans-unit id="648473154f696c7584f730b90fd7267a915b5e74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IO::File::open&lt;/code&gt; is given a numeric mode, it passes that mode and the optional permissions value to the Perl &lt;code&gt;sysopen&lt;/code&gt; operator. The permissions default to 0666.</source>
          <target state="translated">場合は &lt;code&gt;IO::File::open&lt;/code&gt; 数字モードが与えられ、それは、Perlにそのモードとオプションの権限値を渡し &lt;code&gt;sysopen&lt;/code&gt; でオペレータ。権限のデフォルトは0666です。</target>
        </trans-unit>
        <trans-unit id="53e83efe8c19dc0d9571afae7a20a9dcda69bd25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IO::File::open&lt;/code&gt; receives a Perl mode string (&quot;&amp;gt;&quot;, &quot;+&amp;lt;&quot;, etc.) or an ANSI C fopen() mode string (&quot;w&quot;, &quot;r+&quot;, etc.), it uses the basic Perl &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; operator (but protects any special characters).</source>
          <target state="translated">もし &lt;code&gt;IO::File::open&lt;/code&gt; Perlのモードの文字列（ &quot;&amp;gt;&quot;、 &quot;+ &amp;lt;&quot;など）またはANSI Cのfopen（）モード文字列を受信する（ &quot;W&quot; &quot;R +&quot;など）、その用途基本的なPerlの &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 演算子（ただし、特殊文字は保護されます）。</target>
        </trans-unit>
        <trans-unit id="a2b31024d2546cbe74c22838b7e8daa31b3fb8b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IO::File::open&lt;/code&gt; receives a Perl mode string (&quot;&amp;gt;&quot;, &quot;+&amp;lt;&quot;, etc.) or an ANSI C fopen() mode string (&quot;w&quot;, &quot;r+&quot;, etc.), it uses the basic Perl &lt;code&gt;open&lt;/code&gt; operator (but protects any special characters).</source>
          <target state="translated">もし &lt;code&gt;IO::File::open&lt;/code&gt; Perlのモードの文字列（ &quot;&amp;gt;&quot;、 &quot;+ &amp;lt;&quot;など）またはANSI Cのfopen（）モード文字列を受信する（ &quot;W&quot; &quot;R +&quot;など）、その用途基本的なPerlの &lt;code&gt;open&lt;/code&gt; オペレータ（しかし、任意の特殊文字を保護します）。</target>
        </trans-unit>
        <trans-unit id="25244641705396e9c5a0c603f886177852688f85" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LIST OF FILES TO TEST&lt;/code&gt; is omitted, the file list is obtained from the manifest. The file list may include shell wildcards which will be expanded out.</source>
          <target state="translated">場合 &lt;code&gt;LIST OF FILES TO TEST&lt;/code&gt; 省略され、ファイルリストは、マニフェストから取得されます。ファイルリストには、展開されるシェルワイルドカードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="bc047fe00993cc36f1bde2a682c140574f3968b4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Level =&amp;gt; Z_BEST_SPEED&lt;/code&gt; has been specified then XFL is set to 2. If &lt;code&gt;Level =&amp;gt; Z_BEST_COMPRESSION&lt;/code&gt; has been specified then XFL is set to 4. Otherwise XFL is set to 0.</source>
          <target state="translated">&lt;code&gt;Level =&amp;gt; Z_BEST_SPEED&lt;/code&gt; が指定されている場合、XFLは2に設定されます &lt;code&gt;Level =&amp;gt; Z_BEST_COMPRESSION&lt;/code&gt; が指定されている場合、XFLは4に設定されます。それ以外の場合、XFLは0に設定されます。</target>
        </trans-unit>
        <trans-unit id="0aa2ad74e8011287eeea7635ab9b549166e0107b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LimitOutput&lt;/code&gt; is enabled, the &lt;code&gt;ConsumeInput&lt;/code&gt; option will also be enabled.</source>
          <target state="translated">場合 &lt;code&gt;LimitOutput&lt;/code&gt; が有効になっている、 &lt;code&gt;ConsumeInput&lt;/code&gt; のオプションも有効になります。</target>
        </trans-unit>
        <trans-unit id="6b5272a0252e677f68469c99e247e850a281513f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Listen&lt;/code&gt; is defined then a listen socket is created, else if the socket type, which is derived from the protocol, is SOCK_STREAM then connect() is called. If the &lt;code&gt;Listen&lt;/code&gt; argument is given, but false, the queue size will be set to 5.</source>
          <target state="translated">&lt;code&gt;Listen&lt;/code&gt; が定義されている場合は、listenソケットが作成されます。それ以外の場合は、プロトコルから派生したソケットタイプがSOCK_STREAMの場合、connect（）が呼び出されます。場合 &lt;code&gt;Listen&lt;/code&gt; 引数が与えられたが、偽され、キューサイズは5に設定されます。</target>
        </trans-unit>
        <trans-unit id="119d044a27ad244e9922efb2919b95739dfc6f48" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MESSAGE-SPEC&lt;/code&gt; is a reference to a list of two message numbers and the second number in a range is less than or equal to the first then the range represents all messages in the group after the first message number.</source>
          <target state="translated">場合 &lt;code&gt;MESSAGE-SPEC&lt;/code&gt; は、 2つのメッセージ番号のリストへの参照であり、範囲の2番目の数未満または最初に等しいその後範囲は、最初のメッセージ番号の後にグループ内のすべてのメッセージを表しています。</target>
        </trans-unit>
        <trans-unit id="983c80c65b5dc12e5941f3ad256f42dbd5aa351d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MESSAGE&lt;/code&gt; is not specified then the message must be sent using the &lt;code&gt;datasend&lt;/code&gt; and &lt;code&gt;dataend&lt;/code&gt; methods from &lt;a href=&quot;Net::Cmd&quot;&gt;Net::Cmd&lt;/a&gt;</source>
          <target state="translated">場合は &lt;code&gt;MESSAGE&lt;/code&gt; 指定されていないメッセージが使用して送信しなければならない &lt;code&gt;datasend&lt;/code&gt; と &lt;code&gt;dataend&lt;/code&gt; からメソッド&lt;a href=&quot;Net::Cmd&quot;&gt;ネットを:: Cmdを&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fae31070991ff1f03f3487ee3feed2b35c28afa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MESSAGE&lt;/code&gt; is not specified then the message must be sent using the &lt;code&gt;datasend&lt;/code&gt; and &lt;code&gt;dataend&lt;/code&gt; methods from &lt;a href=&quot;cmd&quot;&gt;Net::Cmd&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;MESSAGE&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;cmd&quot;&gt;Net :: Cmdの&lt;/a&gt; &lt;code&gt;datasend&lt;/code&gt; および &lt;code&gt;dataend&lt;/code&gt; メソッドを使用してメッセージを送信する必要があります</target>
        </trans-unit>
        <trans-unit id="b4f8b5e83cced9672fcf844844603c4b1519fbeb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NEXT&lt;/code&gt; redispatching is used in the methods of a &quot;diamond&quot; class hierarchy:</source>
          <target state="translated">「ダイアモンド」クラス階層のメソッドで &lt;code&gt;NEXT&lt;/code&gt; 再ディスパッチが使用されている場合：</target>
        </trans-unit>
        <trans-unit id="fa6cc1f17445fc581970662d0c27067922cd4606" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is not specified and the &lt;code&gt;$input&lt;/code&gt; parameter is a filename, the value of &lt;code&gt;$input&lt;/code&gt; will be used for the zip filename header field.</source>
          <target state="translated">場合は &lt;code&gt;Name&lt;/code&gt; 指定されず、 &lt;code&gt;$input&lt;/code&gt; パラメータがファイル名で、値 &lt;code&gt;$input&lt;/code&gt; ZIPファイル名ヘッダフィールドのために使用されます。</target>
        </trans-unit>
        <trans-unit id="16fa552eaed310969186dcb3a6fc9c674d262d84" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is not specified and the &lt;code&gt;$input&lt;/code&gt; parameter is not a filename, no zip filename field will be created.</source>
          <target state="translated">場合は &lt;code&gt;Name&lt;/code&gt; 指定されておらず、 &lt;code&gt;$input&lt;/code&gt; パラメータがファイル名ではありません、何のzipファイル名フィールドが作成されません。</target>
        </trans-unit>
        <trans-unit id="90ec1912df6897d3b8157fa885ee828e31fcb30c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_LOADMOD_DENY&lt;/code&gt; is set, the module is loaded as if with &lt;code&gt;no&lt;/code&gt; rather than &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;PERL_LOADMOD_DENY&lt;/code&gt; が設定され、モジュールが持つかのようにロードされ &lt;code&gt;no&lt;/code&gt; のではなく &lt;code&gt;use&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0d9c7a2c762fe5aa671ca88a1e57aa13b9aa7f6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt; is set, the module is loaded as if with an empty import list, as in &lt;code&gt;use Foo::Bar ()&lt;/code&gt;; this is the only circumstance in which the trailing optional arguments may be omitted entirely. Otherwise, if &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; is set, the trailing arguments must consist of exactly one &lt;code&gt;OP*&lt;/code&gt;, containing the op tree that produces the relevant import arguments. Otherwise, the trailing arguments must all be &lt;code&gt;SV*&lt;/code&gt; values that will be used as import arguments; and the list must be terminated with &lt;code&gt;(SV*) NULL&lt;/code&gt;. If neither &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt; nor &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; is set, the trailing &lt;code&gt;NULL&lt;/code&gt; pointer is needed even if no import arguments are desired. The reference count for each specified &lt;code&gt;SV*&lt;/code&gt; argument is decremented. In addition, the &lt;code&gt;name&lt;/code&gt; argument is modified.</source>
          <target state="translated">場合 &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt; が設定され、モジュールはのように、空のインポートリストであるかのようにロードされている &lt;code&gt;use Foo::Bar ()&lt;/code&gt; ;これは、末尾のオプションの引数を完全に省略できる唯一の状況です。それ以外の場合、 &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; が設定されている場合、末尾の引数は、関連するインポート引数を生成するopツリーを含む1つの &lt;code&gt;OP*&lt;/code&gt; で構成されている必要があります。それ以外の場合、末尾の引数はすべて、インポート引数として使用される &lt;code&gt;SV*&lt;/code&gt; 値である必要があります。リストは &lt;code&gt;(SV*) NULL&lt;/code&gt; で終了する必要があります。 &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt; も &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; も設定されていない場合、末尾の &lt;code&gt;NULL&lt;/code&gt; インポート引数が必要ない場合でも、ポインタが必要です。指定された各 &lt;code&gt;SV*&lt;/code&gt; 引数の参照カウントがデクリメントされます。さらに、 &lt;code&gt;name&lt;/code&gt; 引数が変更されます。</target>
        </trans-unit>
        <trans-unit id="7150b29ccf2318861af577a7533fe5cd202a009c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_PV_ESCAPE_ALL&lt;/code&gt; is set then all input chars will be output using &lt;code&gt;\x01F1&lt;/code&gt; style escapes, otherwise if &lt;code&gt;PERL_PV_ESCAPE_NONASCII&lt;/code&gt; is set, only non-ASCII chars will be escaped using this style; otherwise, only chars above 255 will be so escaped; other non printable chars will use octal or common escaped patterns like &lt;code&gt;\n&lt;/code&gt;. Otherwise, if &lt;code&gt;PERL_PV_ESCAPE_NOBACKSLASH&lt;/code&gt; then all chars below 255 will be treated as printable and will be output as literals.</source>
          <target state="translated">&lt;code&gt;PERL_PV_ESCAPE_ALL&lt;/code&gt; が設定されている場合、すべての入力文字は &lt;code&gt;\x01F1&lt;/code&gt; スタイルのエスケープを使用して出力されます。それ以外の場合、 &lt;code&gt;PERL_PV_ESCAPE_NONASCII&lt;/code&gt; が設定されている場合、非ASCII文字のみがこのスタイルを使用してエスケープされます。それ以外の場合、255を超える文字のみがそのようにエスケープされます。他の印刷不可能な文字は、8進数または &lt;code&gt;\n&lt;/code&gt; ような一般的なエスケープパターンを使用します。それ以外の場合、 &lt;code&gt;PERL_PV_ESCAPE_NOBACKSLASH&lt;/code&gt; の場合、255未満のすべての文字は印刷可能として扱われ、リテラルとして出力されます。</target>
        </trans-unit>
        <trans-unit id="fd6e934e5c2d97914014a2305fe6d83cca0f7a87" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_PV_ESCAPE_FIRSTCHAR&lt;/code&gt; is set then only the first char of the string will be escaped, regardless of max. If the output is to be in hex, then it will be returned as a plain hex sequence. Thus the output will either be a single char, an octal escape sequence, a special escape like &lt;code&gt;\n&lt;/code&gt; or a hex value.</source>
          <target state="translated">&lt;code&gt;PERL_PV_ESCAPE_FIRSTCHAR&lt;/code&gt; が設定されている場合、最大値に関係なく、文字列の最初の文字のみがエスケープされます。出力を16進数にする場合は、プレーンな16進数シーケンスとして返されます。したがって、出力は、単一の文字、8進数のエスケープシーケンス、 &lt;code&gt;\n&lt;/code&gt; ような特別なエスケープ、または16進値のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="4556bf449af07632214df812c6e299c60c88a77e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_PV_ESCAPE_RE&lt;/code&gt; is set then the escape char used will be a &lt;code&gt;&quot;%&quot;&lt;/code&gt; and not a &lt;code&gt;&quot;\\&quot;&lt;/code&gt;. This is because regexes very often contain backslashed sequences, whereas &lt;code&gt;&quot;%&quot;&lt;/code&gt; is not a particularly common character in patterns.</source>
          <target state="translated">場合 &lt;code&gt;PERL_PV_ESCAPE_RE&lt;/code&gt; が設定され、その後使用エスケープ文字になります &lt;code&gt;&quot;%&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;\\&quot;&lt;/code&gt; 。これは、正規表現にバックスラッシュシーケンスが含まれることが非常に多いのに対し、 &lt;code&gt;&quot;%&quot;&lt;/code&gt; はパターンで特に一般的な文字ではないためです。</target>
        </trans-unit>
        <trans-unit id="3b287252fa0fadb9f209dd7e1ddcb194eaed64b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_PV_ESCAPE_UNI&lt;/code&gt; is set then the input string is treated as UTF-8 if &lt;code&gt;PERL_PV_ESCAPE_UNI_DETECT&lt;/code&gt; is set then the input string is scanned using &lt;code&gt;is_utf8_string()&lt;/code&gt; to determine if it is UTF-8.</source>
          <target state="translated">場合 &lt;code&gt;PERL_PV_ESCAPE_UNI&lt;/code&gt; が設定されている場合、入力文字列がUTF-8として処理さ &lt;code&gt;PERL_PV_ESCAPE_UNI_DETECT&lt;/code&gt; は、入力文字列を使用してスキャンされ、その後設定されている &lt;code&gt;is_utf8_string()&lt;/code&gt; がUTF-8であるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="35533bcb02c546225ef493f044a6f536db7a71c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_SCAN_ALLOW_UNDERSCORES&lt;/code&gt; is set in</source>
          <target state="translated">&lt;code&gt;PERL_SCAN_ALLOW_UNDERSCORES&lt;/code&gt; が設定されている場合</target>
        </trans-unit>
        <trans-unit id="927d1c982e9f33464297a28a964aa06b97d23586" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_SCAN_ALLOW_UNDERSCORES&lt;/code&gt; is set in &lt;code&gt;*flags&lt;/code&gt; then any or all pairs of digits may be separated from each other by a single underscore; also a single leading underscore is accepted.</source>
          <target state="translated">&lt;code&gt;PERL_SCAN_ALLOW_UNDERSCORES&lt;/code&gt; が &lt;code&gt;*flags&lt;/code&gt; に設定されている場合、数字のいずれかまたはすべてのペアを1つのアンダースコアで区切ることができます。また、単一の先頭の下線が受け入れられます。</target>
        </trans-unit>
        <trans-unit id="52cb6eab9df9b80f7b8043595e084ea362a195f8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; environment variable is set, it will be used as a command for comparing unexpected multiline results. If you have GNU diff installed, you might want to set &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; to &lt;code&gt;diff -u&lt;/code&gt; . If you don't have a suitable program, you might install the &lt;code&gt;Text::Diff&lt;/code&gt; module and then set &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; to be &lt;code&gt;perl
-MText::Diff -e 'print diff(@ARGV)'&lt;/code&gt; . If &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; isn't set but the &lt;code&gt;Algorithm::Diff&lt;/code&gt; module is available, then it will be used to show the differences in multiline results.</source>
          <target state="translated">場合 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; の環境変数が設定されている、それは予期しない複数行の結果を比較するためのコマンドとして使用されます。 GNU diffがインストールされている場合は、 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; を &lt;code&gt;diff -u&lt;/code&gt; に設定することをお勧めします。適切なプログラムがない場合は、 &lt;code&gt;Text::Diff&lt;/code&gt; モジュールをインストールしてから、 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; を &lt;code&gt;perl -MText::Diff -e 'print diff(@ARGV)'&lt;/code&gt; ます。場合 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; が設定されていませんが、 &lt;code&gt;Algorithm::Diff&lt;/code&gt; モジュールが利用可能である、複数行の結果の違いを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="4e08ae53639fc6920187fdd8042110e8e1996f69" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; environment variable is set, it will be used as a command for comparing unexpected multiline results. If you have GNU diff installed, you might want to set &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; to &lt;code&gt;diff -u&lt;/code&gt;. If you don't have a suitable program, you might install the &lt;code&gt;Text::Diff&lt;/code&gt; module and then set &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; to be &lt;code&gt;perl -MText::Diff -e 'print diff(@ARGV)'&lt;/code&gt;. If &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; isn't set but the &lt;code&gt;Algorithm::Diff&lt;/code&gt; module is available, then it will be used to show the differences in multiline results.</source>
          <target state="translated">場合 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; の環境変数が設定されている、それは予期しない複数行の結果を比較するためのコマンドとして使用されます。 GNU diffがインストールされている場合は、 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; を &lt;code&gt;diff -u&lt;/code&gt; -uに設定することをお勧めします。適切なプログラムがない場合は、 &lt;code&gt;Text::Diff&lt;/code&gt; モジュールをインストールしてから、 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; を &lt;code&gt;perl -MText::Diff -e 'print diff(@ARGV)'&lt;/code&gt; ます。場合 &lt;code&gt;PERL_TEST_DIFF&lt;/code&gt; が設定されていませんが、 &lt;code&gt;Algorithm::Diff&lt;/code&gt; モジュールが利用可能である、複数行の結果の違いを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="8fb3ad782aee3a8db708fe40cb7ddcd44325815d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PadnameOUTER&lt;/code&gt; is set on the pad name, then that slot in the frame AV is a REFCNT'ed reference to a lexical from &quot;outside&quot;. Such entries are sometimes referred to as 'fake'. In this case, the name does not use 'low' and 'high' to store a cop_seq range, since it is in scope throughout. Instead 'high' stores some flags containing info about the real lexical (is it declared in an anon, and is it capable of being instantiated multiple times?), and for fake ANONs, 'low' contains the index within the parent's pad where the lexical's value is stored, to make cloning quicker.</source>
          <target state="translated">&lt;code&gt;PadnameOUTER&lt;/code&gt; がパッド名に設定されている場合、フレームAVのそのスロットは、「外部」からの字句へのREFCNT参照です。このようなエントリは、「偽物」と呼ばれることもあります。この場合、名前は「low」と「high」を使用してcop_seq範囲を格納しません。これは、全体がスコープ内にあるためです。代わりに、「high」は実際の字句に関する情報を含むいくつかのフラグを格納し（anonで宣言されており、複数回インスタンス化できますか？）、偽のANONの場合、「low」は親のパッド内のインデックスを含みます。クローン作成を高速化するために、字句の値が保存されます。</target>
        </trans-unit>
        <trans-unit id="dee3b30e6a54d64d92736caa387fa1fa00014452" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PerlIO_push&lt;/code&gt; was performed and open has failed, it must &lt;code&gt;PerlIO_pop&lt;/code&gt; itself, since if it's not, the layer won't be removed and may cause bad problems.</source>
          <target state="translated">場合 &lt;code&gt;PerlIO_push&lt;/code&gt; が行われたとのオープンが失敗した、それがなければなりません &lt;code&gt;PerlIO_pop&lt;/code&gt; そうでない場合は、層が除去されず、悪いの問題を引き起こす可能性があるため、自分自身を。</target>
        </trans-unit>
        <trans-unit id="e92add0536c750719a7004e9b389b82f89f36216" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Proto&lt;/code&gt; is not given and you specify a symbolic &lt;code&gt;PeerPort&lt;/code&gt; port, then the constructor will try to derive &lt;code&gt;Proto&lt;/code&gt; from the service name. As a last resort &lt;code&gt;Proto&lt;/code&gt; &quot;tcp&quot; is assumed. The &lt;code&gt;Type&lt;/code&gt; parameter will be deduced from &lt;code&gt;Proto&lt;/code&gt; if not specified.</source>
          <target state="translated">場合 &lt;code&gt;Proto&lt;/code&gt; 与えられていない、あなたはシンボリック指定 &lt;code&gt;PeerPort&lt;/code&gt; のポートを、そしてコンストラクタが導出しようと &lt;code&gt;Proto&lt;/code&gt; サービス名から。最後の手段として、 &lt;code&gt;Proto&lt;/code&gt; &quot;tcp&quot;が想定されます。 &lt;code&gt;Type&lt;/code&gt; パラメータは、から推定される &lt;code&gt;Proto&lt;/code&gt; 指定されていない場合。</target>
        </trans-unit>
        <trans-unit id="fe5b8d2d2cf1b0bc68bdf3e0b890723eb0712304" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SkipBad&lt;/code&gt; is true the &lt;code&gt;recipient&lt;/code&gt; will not return an error when a bad address is encountered and it will return an array of addresses that did succeed.</source>
          <target state="translated">場合 &lt;code&gt;SkipBad&lt;/code&gt; が真である &lt;code&gt;recipient&lt;/code&gt; 不正なアドレスに遭遇したときにエラーを返さないし、それが成功したアドレスの配列を返します。</target>
        </trans-unit>
        <trans-unit id="d0468225999e79fdda0c8dc21ac9ecaa76acd0e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Strict&lt;/code&gt; is enabled the following behaviour will be policed:</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; が有効になっている場合、次の動作がポリシングされます。</target>
        </trans-unit>
        <trans-unit id="b96d3e92a2737a01f8355b6b1112adb835436235" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TIMEOUT&lt;/code&gt; is missing, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or less than or equal to 0, then this call behaves the same as &lt;code&gt;dequeue_nb&lt;/code&gt; .</source>
          <target state="translated">場合 &lt;code&gt;TIMEOUT&lt;/code&gt; が不足している、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を、または以下0よりも、このコールはと同じように動作し &lt;code&gt;dequeue_nb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c530cec74f6e8b7055d3fa3d9efe868ec89d0a2b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TIMEOUT&lt;/code&gt; is missing, &lt;code&gt;undef&lt;/code&gt;, or less than or equal to 0, then this call behaves the same as &lt;code&gt;dequeue_nb&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;TIMEOUT&lt;/code&gt; が不足している、 &lt;code&gt;undef&lt;/code&gt; を、または以下0よりも、このコールはと同じように動作し &lt;code&gt;dequeue_nb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3dbb2f4f8d2f84122800f9964093173fd31ae6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Tie::File&lt;/code&gt; 's memory limit is large enough, all the writing will done in memory. Then, when you call &lt;code&gt;-&amp;gt;flush&lt;/code&gt; , the entire file will be rewritten in a single pass.</source>
          <target state="translated">場合は &lt;code&gt;Tie::File&lt;/code&gt; のメモリ制限が十分な大きさがあり、すべての書き込みがメモリ内で行われます。次に、 &lt;code&gt;-&amp;gt;flush&lt;/code&gt; を呼び出すと、ファイル全体が1回のパスで書き換えられます。</target>
        </trans-unit>
        <trans-unit id="86295dc1bf1fa74a00cc2da2e3439e42c182b9ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Tie::File&lt;/code&gt;'s memory limit is large enough, all the writing will done in memory. Then, when you call &lt;code&gt;-&amp;gt;flush&lt;/code&gt;, the entire file will be rewritten in a single pass.</source>
          <target state="translated">場合は &lt;code&gt;Tie::File&lt;/code&gt; のメモリ制限が十分な大きさがあり、すべての書き込みがメモリ内で行われます。次に、 &lt;code&gt;-&amp;gt;flush&lt;/code&gt; を呼び出すと、ファイル全体が1回のパスで書き換えられます。</target>
        </trans-unit>
        <trans-unit id="717bb6fc0375ed7c5d36f69b6a41d7203067aa19" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UCA_Version&lt;/code&gt; is 26 or later, the &lt;code&gt;identical&lt;/code&gt; level is preferred; &lt;code&gt;Unicode::Collate-&amp;gt;new(identical =&amp;gt; 1)&lt;/code&gt; and &lt;code&gt;Unicode::Collate-&amp;gt;new(identical =&amp;gt; 1,&lt;/code&gt;&lt;code&gt;variable =&amp;gt; &quot;non-ignorable&quot;, level =&amp;gt; 3)&lt;/code&gt; should be used.</source>
          <target state="translated">場合 &lt;code&gt;UCA_Version&lt;/code&gt; が 26以降で、 &lt;code&gt;identical&lt;/code&gt; レベルであることが好ましいです。 &lt;code&gt;Unicode::Collate-&amp;gt;new(identical =&amp;gt; 1)&lt;/code&gt; および &lt;code&gt;Unicode::Collate-&amp;gt;new(identical =&amp;gt; 1,&lt;/code&gt; &lt;code&gt;variable =&amp;gt; &quot;non-ignorable&quot;, level =&amp;gt; 3)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="02434c0e062f79bd3d8c8ef802e8385afcfb68a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;UCA_Version&lt;/code&gt; is equal to or greater than 14, default is &lt;code&gt;[]&lt;/code&gt; (i.e. no rearrangement).</source>
          <target state="translated">場合 &lt;code&gt;UCA_Version&lt;/code&gt; が 14以上である場合、デフォルトは &lt;code&gt;[]&lt;/code&gt; （すなわち、無転位）。</target>
        </trans-unit>
        <trans-unit id="b309f1cb237c3cb1331fc5e7c80d1a3dc5b1ba82" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VALUE&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; then the debug level will be set to the default debug level for the class.</source>
          <target state="translated">場合 &lt;code&gt;VALUE&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をその後、デバッグレベルはクラスのデフォルトのデバッグレベルに設定されます。</target>
        </trans-unit>
        <trans-unit id="4e940cabf3eff6f96ef019a41252378fda2e834a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;VALUE&lt;/code&gt; is &lt;code&gt;undef&lt;/code&gt; then the debug level will be set to the default debug level for the class.</source>
          <target state="translated">場合 &lt;code&gt;VALUE&lt;/code&gt; がある &lt;code&gt;undef&lt;/code&gt; をその後、デバッグレベルはクラスのデフォルトのデバッグレベルに設定されます。</target>
        </trans-unit>
        <trans-unit id="44072f8a4414482a73ce8e1b198996a838545678" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;WHERE&lt;/code&gt; is given then the first &lt;code&gt;WHERE&lt;/code&gt; bytes of the file will not be transferred, and the remaining bytes will be appended to the local file if it already exists.</source>
          <target state="translated">&lt;code&gt;WHERE&lt;/code&gt; が指定されている場合、ファイルの最初の &lt;code&gt;WHERE&lt;/code&gt; バイトは転送されず、残りのバイトがすでに存在する場合は、ローカルファイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="ac99e0f8353a2cf6b3d40ee09fd4abe5de979195" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;allow_tags&lt;/code&gt; is enabled, &lt;code&gt;JSON::PP&lt;/code&gt; will look up the &lt;code&gt;THAW&lt;/code&gt; method of the package/classname used during serialisation (it will not attempt to load the package as a Perl module). If there is no such method, the decoding will fail with an error.</source>
          <target state="translated">&lt;code&gt;allow_tags&lt;/code&gt; が有効になっている場合、 &lt;code&gt;JSON::PP&lt;/code&gt; はシリアル化中に使用されたパッケージ/クラス名の &lt;code&gt;THAW&lt;/code&gt; メソッドを検索します（パッケージをPerlモジュールとしてロードしようとはしません）。そのような方法がない場合、デコードはエラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="3cdf8e9a5929ab26a43f519805188b99c5f0b522" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;appendOutput&lt;/code&gt; is enabled in the constructor for the bunzip2 object, the uncompressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If not enabled, &lt;code&gt;$output&lt;/code&gt; will be truncated before the uncompressed data is written to it.</source>
          <target state="translated">bunzip2オブジェクトのコンストラクタで &lt;code&gt;appendOutput&lt;/code&gt; が有効になっている場合、圧縮されていないデータが &lt;code&gt;$output&lt;/code&gt; 追加されます。有効になっていない場合、 &lt;code&gt;$output&lt;/code&gt; は圧縮されていないデータが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="667286e52e2e632a32355f2300da667dd6bd7a78" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;appendOutput&lt;/code&gt; is enabled in the constructor for the bunzip2 object, the uncompressed data will be appended to &lt;code&gt;$output&lt;/code&gt;. If not enabled, &lt;code&gt;$output&lt;/code&gt; will be truncated before the uncompressed data is written to it.</source>
          <target state="translated">bunzip2オブジェクトのコンストラクターで &lt;code&gt;appendOutput&lt;/code&gt; が有効になっている場合、非圧縮データは &lt;code&gt;$output&lt;/code&gt; 追加されます。有効にしない場合、 &lt;code&gt;$output&lt;/code&gt; は、非圧縮データが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="f450b4455b8d11ffbd473a1bb2010cafedaed33e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;appendOutput&lt;/code&gt; is enabled in the constructor for the bzip2 object, the compressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If not enabled, &lt;code&gt;$output&lt;/code&gt; will be truncated before the compressed data is written to it.</source>
          <target state="translated">bzip2オブジェクトのコンストラクターで &lt;code&gt;appendOutput&lt;/code&gt; が有効になっている場合、圧縮データは &lt;code&gt;$output&lt;/code&gt; 追加されます。有効でない場合、 &lt;code&gt;$output&lt;/code&gt; は圧縮されたデータが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="096baeccf53db357601ffc253c8281b1e48c8ccf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;appendOutput&lt;/code&gt; is enabled in the constructor for the bzip2 object, the compressed data will be appended to &lt;code&gt;$output&lt;/code&gt;. If not enabled, &lt;code&gt;$output&lt;/code&gt; will be truncated before the compressed data is written to it.</source>
          <target state="translated">bzip2オブジェクトのコンストラクターで &lt;code&gt;appendOutput&lt;/code&gt; が有効になっている場合、圧縮されたデータは &lt;code&gt;$output&lt;/code&gt; 追加されます。有効にしない場合、 &lt;code&gt;$output&lt;/code&gt; は、圧縮データが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="1432fae77d6dafc174cc09ef9602a6c9c5caf4ec" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;block&lt;/code&gt; is null then the subroutine will have no body, and for the time being it will be an error to call it. This represents a forward subroutine declaration such as &lt;code&gt;sub foo ($$);&lt;/code&gt;. If &lt;code&gt;block&lt;/code&gt; is non-null then it provides the Perl code of the subroutine body, which will be executed when the subroutine is called. This body includes any argument unwrapping code resulting from a subroutine signature or similar. The pad use of the code must correspond to the pad attached to &lt;code&gt;PL_compcv&lt;/code&gt;. The code is not expected to include a &lt;code&gt;leavesub&lt;/code&gt; or &lt;code&gt;leavesublv&lt;/code&gt; op; this function will add such an op. &lt;code&gt;block&lt;/code&gt; is consumed by this function and will become part of the constructed subroutine.</source>
          <target state="translated">場合は &lt;code&gt;block&lt;/code&gt; nullのサブルーチンには、本体を持っていないだろう、と当分の間、それを呼び出すとエラーになります。これは、 &lt;code&gt;sub foo ($$);&lt;/code&gt; などのフォワードサブルーチン宣言を表します。。 &lt;code&gt;block&lt;/code&gt; がnull以外の場合、サブルーチン本体のPerlコードを提供します。これは、サブルーチンが呼び出されたときに実行されます。この本体には、サブルーチンの署名など​​から生じる引数のラップ解除コードが含まれます。コードのパッド使用は、 &lt;code&gt;PL_compcv&lt;/code&gt; に接続されているパッドに対応している必要があります。コードに &lt;code&gt;leavesub&lt;/code&gt; または &lt;code&gt;leavesublv&lt;/code&gt; opが含まれることは想定されていません。この関数はそのような操作を追加します。 &lt;code&gt;block&lt;/code&gt; この関数によって消費され、構築されたサブルーチンの一部になります。</target>
        </trans-unit>
        <trans-unit id="1b199e24b4ee7d3c552a01dcb6637c8cc3a9e1f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;bundling_override&lt;/code&gt; is enabled, bundling is enabled as with &lt;code&gt;bundling&lt;/code&gt; but now long option names override option bundles.</source>
          <target state="translated">&lt;code&gt;bundling_override&lt;/code&gt; が有効になっている場合、バンドルと同様に &lt;code&gt;bundling&lt;/code&gt; が有効になりますが、長いオプション名はオプションバンドルをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="54b90baea8c11dc735bd2168186bca9ee27f1a9f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;caller()&lt;/code&gt; winds up off the top of the stack it report the highest context.</source>
          <target state="translated">場合は &lt;code&gt;caller()&lt;/code&gt; スタックの上から巻き取るそれは最高の状況を報告しています。</target>
        </trans-unit>
        <trans-unit id="e3dc97ff755fb934bfd6f1a8ed830ff62cc4e40b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;consumeInput&lt;/code&gt; is enabled in the constructor for the bunzip2 object, &lt;code&gt;$input&lt;/code&gt; will have all compressed data removed from it after uncompression. On &lt;code&gt;BZ_OK&lt;/code&gt; return this will mean that &lt;code&gt;$input&lt;/code&gt; will be an empty string; when &lt;code&gt;BZ_STREAM_END&lt;/code&gt;&lt;code&gt;$input&lt;/code&gt; will either be an empty string or will contain whatever data immediately followed the compressed data stream.</source>
          <target state="translated">場合 &lt;code&gt;consumeInput&lt;/code&gt; が bunzip2オブジェクトのコンストラクタで有効になっている、 &lt;code&gt;$input&lt;/code&gt; 解凍後、それから削除されたすべての圧縮されたデータを持っています。上 &lt;code&gt;BZ_OK&lt;/code&gt; これはことを意味します返す &lt;code&gt;$input&lt;/code&gt; 空の文字列になります。 &lt;code&gt;BZ_STREAM_END&lt;/code&gt; の場合、 &lt;code&gt;$input&lt;/code&gt; は空の文字列になるか、圧縮データストリームの直後に続くデータが含まれます。</target>
        </trans-unit>
        <trans-unit id="13672333fc5b967feaa626b683b8bcc04e6c7332" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;cv&lt;/code&gt; is a constant sub eligible for inlining, returns the constant value returned by the sub. Otherwise, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cv&lt;/code&gt; がインライン化に適格な定数サブである場合、サブによって返される定数値を返します。それ以外の場合は、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d1dd05ec9d332008df8a7389201274fce30d7a10" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;cv&lt;/code&gt; is a constant sub eligible for inlining, returns the constant value returned by the sub. Otherwise, returns NULL.</source>
          <target state="translated">&lt;code&gt;cv&lt;/code&gt; がインライン化に適した定数サブである場合、サブによって返される定数値を返します。それ以外の場合は、NULLを返します。</target>
        </trans-unit>
        <trans-unit id="ede33bdf6d08f63d2072630b001c1c1d527bfdbb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;device&lt;/code&gt; is given, this device is used to bind the source endpoint before sending the ping packet. I believe this only works with superuser privileges and with udp and icmp protocols at this time.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; が指定されている場合、このデバイスは、pingパケットを送信する前に送信元エンドポイントをバインドするために使用されます。現時点では、これはスーパーユーザー権限とudpおよびicmpプロトコルでのみ機能すると思います。</target>
        </trans-unit>
        <trans-unit id="d37d86734f002378b0c0f7d856f9af361e68cbc0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;done_testing()&lt;/code&gt; is called twice, the second call will issue a failing test.</source>
          <target state="translated">場合は &lt;code&gt;done_testing()&lt;/code&gt; 2回呼び出され、2番目の呼び出しは失敗し、テストを発行します。</target>
        </trans-unit>
        <trans-unit id="a074a15a27ab0ac63397d85c19569d7f123797eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;down()&lt;/code&gt; attempts to decrement the counter below zero, it blocks until the counter is large enough. Note that while a semaphore can be created with a starting count of zero, any &lt;code&gt;up()&lt;/code&gt; or &lt;code&gt;down()&lt;/code&gt; always changes the counter by at least one, and so &lt;code&gt;$semaphore-&amp;gt;down(0)&lt;/code&gt; is the same as &lt;code&gt;$semaphore-&amp;gt;down(1)&lt;/code&gt; .</source>
          <target state="translated">もし &lt;code&gt;down()&lt;/code&gt; 零下カウンタをデクリメントする試み、それブロックカウンタまでは十分な大きさです。セマフォはゼロの開始カウントで作成できますが、 &lt;code&gt;up()&lt;/code&gt; または &lt;code&gt;down()&lt;/code&gt; は常に少なくとも1つだけカウンタを変更するため、 &lt;code&gt;$semaphore-&amp;gt;down(0)&lt;/code&gt; は &lt;code&gt;$semaphore-&amp;gt;down(1)&lt;/code&gt; と同じです。ダウン（1）。</target>
        </trans-unit>
        <trans-unit id="dc095b856cd7bbcf568ac5723a3a668cbf72bdda" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;down()&lt;/code&gt; attempts to decrement the counter below zero, it blocks until the counter is large enough. Note that while a semaphore can be created with a starting count of zero, any &lt;code&gt;up()&lt;/code&gt; or &lt;code&gt;down()&lt;/code&gt; always changes the counter by at least one, and so &lt;code&gt;$semaphore-&amp;gt;down(0)&lt;/code&gt; is the same as &lt;code&gt;$semaphore-&amp;gt;down(1)&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;down()&lt;/code&gt; 零下カウンタをデクリメントする試み、それブロックカウンタまでは十分な大きさです。セマフォは開始カウントがゼロで作成できますが、 &lt;code&gt;up()&lt;/code&gt; または &lt;code&gt;down()&lt;/code&gt; は常にカウンターを少なくとも1つ変更するため、 &lt;code&gt;$semaphore-&amp;gt;down(0)&lt;/code&gt; は &lt;code&gt;$semaphore-&amp;gt;down(1)&lt;/code&gt; と同じであることに注意してください。down（1）。</target>
        </trans-unit>
        <trans-unit id="bd2ee9c9e231a07f99e855dc49bb00a01e62f7c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;e &amp;lt; s&lt;/code&gt; or if the scan would end up past &lt;code&gt;e&lt;/code&gt;, it raises a UTF8 warning and returns the number of valid characters.</source>
          <target state="translated">場合は &lt;code&gt;e &amp;lt; s&lt;/code&gt; またはスキャンが過去に終わるならば &lt;code&gt;e&lt;/code&gt; 、それがUTF8の警告を発生させ、有効な文字の数を返します。</target>
        </trans-unit>
        <trans-unit id="b73e1156e34709c2cf87a897c0dfdd15558afa70" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;exit()&lt;/code&gt; really is needed, then consider using the following:</source>
          <target state="translated">&lt;code&gt;exit()&lt;/code&gt; が本当に必要な場合は、次の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="40ba804a2596516d0c1570f7f282c973ab9c2345" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extract&lt;/code&gt; is called without a list of file names, the entire contents of the archive are extracted.</source>
          <target state="translated">場合 &lt;code&gt;extract&lt;/code&gt; 、ファイル名のリストなしで呼び出され、アーカイブの内容全体が抽出されます。</target>
        </trans-unit>
        <trans-unit id="fd1942906fddd7c45d5614b21cfa194ab92d3708" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fallback&lt;/code&gt; is TRUE for both operands then perform the usual operation for the operator, treating the operands as numbers, strings, or booleans as appropriate for the operator (see note).</source>
          <target state="translated">両方のオペランドの &lt;code&gt;fallback&lt;/code&gt; がTRUEの場合、演算子に対して通常の演算を実行し、オペランドを数値、文字列、またはブール値として扱います（注を参照）。</target>
        </trans-unit>
        <trans-unit id="77c9ad5fa8afacb61183204af87e0582ca853195" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags &amp;amp; SV_SMAGIC&lt;/code&gt; is true, will call &lt;code&gt;SvSETMAGIC&lt;/code&gt;. If &lt;code&gt;flags &amp;amp; SV_HAS_TRAILING_NUL&lt;/code&gt; is true, then &lt;code&gt;ptr[len]&lt;/code&gt; must be &lt;code&gt;NUL&lt;/code&gt;, and the realloc will be skipped (i.e. the buffer is actually at least 1 byte longer than &lt;code&gt;len&lt;/code&gt;, and already meets the requirements for storing in &lt;code&gt;SvPVX&lt;/code&gt;).</source>
          <target state="translated">場合は &lt;code&gt;flags &amp;amp; SV_SMAGIC&lt;/code&gt; 真である、呼び出します &lt;code&gt;SvSETMAGIC&lt;/code&gt; を。場合は &lt;code&gt;flags &amp;amp; SV_HAS_TRAILING_NUL&lt;/code&gt; 真である場合、 &lt;code&gt;ptr[len]&lt;/code&gt; なければなりません &lt;code&gt;NUL&lt;/code&gt; 、およびreallocのはスキップされます（つまり、バッファがより少なくとも1台のバイト長く実際に &lt;code&gt;len&lt;/code&gt; は、すでにに保存するための要件を満たしている &lt;code&gt;SvPVX&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5fd52e0f8326669fc207b7050c548b0008ac0b17" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; &amp;amp; SV_SMAGIC is true, will call SvSETMAGIC. If &lt;code&gt;flags&lt;/code&gt; &amp;amp; SV_HAS_TRAILING_NUL is true, then &lt;code&gt;ptr[len]&lt;/code&gt; must be &lt;code&gt;NUL&lt;/code&gt; , and the realloc will be skipped (i.e. the buffer is actually at least 1 byte longer than &lt;code&gt;len&lt;/code&gt; , and already meets the requirements for storing in &lt;code&gt;SvPVX&lt;/code&gt; ).</source>
          <target state="translated">場合は &lt;code&gt;flags&lt;/code&gt; ＆SV_SMAGICが真である、SvSETMAGICを呼び出します。場合は &lt;code&gt;flags&lt;/code&gt; ＆SV_HAS_TRAILING_NULがtrueの場合、 &lt;code&gt;ptr[len]&lt;/code&gt; なければなりません &lt;code&gt;NUL&lt;/code&gt; 、およびreallocのはスキップされます（つまり、バッファがより少なくとも1台のバイト長く実際に &lt;code&gt;len&lt;/code&gt; は、すでにに保存するための要件を満たしている &lt;code&gt;SvPVX&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0edc0d40cf1bae07e3194b59cda754464ac0af29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; does not include the &lt;code&gt;G_DISCARD&lt;/code&gt; flag then &lt;code&gt;hv_delete&lt;/code&gt; will create and return a mortal copy of the deleted value.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; に &lt;code&gt;G_DISCARD&lt;/code&gt; フラグが含まれていない場合、 &lt;code&gt;hv_delete&lt;/code&gt; は削除された値の致命的なコピーを作成して返します。</target>
        </trans-unit>
        <trans-unit id="10df1aa8bd4f0824119d6cef9b8d19de3f0f48a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; has SV_FORCE_UTF8_UPGRADE set, this function assumes that the PV will expand when converted to UTF-8, and skips the extra work of checking for that. Typically this flag is used by a routine that has already parsed the string and found such characters, and passes this information on so that the work doesn't have to be repeated.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; にSV_FORCE_UTF8_UPGRADEが設定されている場合、この関数は、PVがUTF-8に変換されたときに拡張すると想定し、その確認のための余分な作業をスキップします。通常、このフラグは、文字列を既に解析してそのような文字を見つけたルーチンによって使用され、この情報を渡すため、作業を繰り返す必要がありません。</target>
        </trans-unit>
        <trans-unit id="ad87c09509d32a63c00d8007a6c9913223d72fda" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;CV_NAME_NOTQUAL&lt;/code&gt; bit set, then the package name will not be included. If the first argument is neither a CV nor a GV, this flag is ignored (subject to change).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; に &lt;code&gt;CV_NAME_NOTQUAL&lt;/code&gt; ビットが設定されている場合、パッケージ名は含まれません。最初の引数がCVでもGVでもない場合、このフラグは無視されます（変更される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="37b250f1c8aff9dcda9cab5ceb3c6ef02e048bcc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;SV_SMAGIC&lt;/code&gt; bit set, will &lt;code&gt;mg_set&lt;/code&gt; on &lt;code&gt;dsv&lt;/code&gt; afterwards if appropriate. &lt;code&gt;sv_catpvn&lt;/code&gt; and &lt;code&gt;sv_catpvn_nomg&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;SV_SMAGIC&lt;/code&gt; のビットがセットされて、します &lt;code&gt;mg_set&lt;/code&gt; に &lt;code&gt;dsv&lt;/code&gt; 適切であれば、その後。 &lt;code&gt;sv_catpvn&lt;/code&gt; と &lt;code&gt;sv_catpvn_nomg&lt;/code&gt; は、この関数の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="883c9501bfde5d52c5604a1b12447c3d9a8fe23c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; has the bit &lt;code&gt;RV2CVOPCV_MARK_EARLY&lt;/code&gt; set, then the handling of a GV reference is modified. If a GV was examined and its CV slot was found to be empty, then the &lt;code&gt;gv&lt;/code&gt; op has the &lt;code&gt;OPpEARLY_CV&lt;/code&gt; flag set. If the op is not optimised away, and the CV slot is later populated with a subroutine having a prototype, that flag eventually triggers the warning &quot;called too early to check prototype&quot;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; のビット &lt;code&gt;RV2CVOPCV_MARK_EARLY&lt;/code&gt; が設定されている場合、GV参照の処理が変更されます。 GVを検査し、そのCVスロットが空であることが判明した場合には、 &lt;code&gt;gv&lt;/code&gt; OPが有する &lt;code&gt;OPpEARLY_CV&lt;/code&gt; のフラグが設定さ。 opが最適化されておらず、後でCVスロットにプロトタイプを持つサブルーチンが追加された場合、そのフラグは最終的に「プロトタイプをチェックするには早すぎます」という警告をトリガーします。</target>
        </trans-unit>
        <trans-unit id="94ba87252f4445bc6642c895685a2b0c13a4c9f3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; has the bit &lt;code&gt;RV2CVOPCV_RETURN_NAME_GV&lt;/code&gt; set, then instead of returning a pointer to the subroutine it returns a pointer to the GV giving the most appropriate name for the subroutine in this context. Normally this is just the &lt;code&gt;CvGV&lt;/code&gt; of the subroutine, but for an anonymous (&lt;code&gt;CvANON&lt;/code&gt;) subroutine that is referenced through a GV it will be the referencing GV. The resulting &lt;code&gt;GV*&lt;/code&gt; is cast to &lt;code&gt;CV*&lt;/code&gt; to be returned. A null pointer is returned as usual if there is no statically-determinable subroutine.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; のビット &lt;code&gt;RV2CVOPCV_RETURN_NAME_GV&lt;/code&gt; が設定されている場合、サブルーチンへのポインターを返す代わりに、このコンテキストでサブルーチンに最も適切な名前を与えるGVへのポインターを返します。通常、これはサブルーチンの &lt;code&gt;CvGV&lt;/code&gt; にすぎませんが、GVを介して参照される匿名（ &lt;code&gt;CvANON&lt;/code&gt; ）サブルーチンの場合は、参照GVになります。結果の &lt;code&gt;GV*&lt;/code&gt; は &lt;code&gt;CV*&lt;/code&gt; にキャストされて返されます。静的に決定可能なサブルーチンがない場合は、通常どおりnullポインターが返されます。</target>
        </trans-unit>
        <trans-unit id="242a2d0b6758ae9991c2578558a99b10e3dde258" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; in non-zero, it can be any combination of the &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; flags accepted by &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt;, and with the same meanings.</source>
          <target state="translated">場合は &lt;code&gt;flags&lt;/code&gt; 非ゼロで、それはの任意の組み合わせを使用でき &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; で受け入れフラグ &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt; と同じ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="16ac1f6f577ac784401bb8130dc871e9c34ad1b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is 0, any well-formed UTF-8, as extended by Perl, is accepted without restriction. If the final few bytes of the buffer do not form a complete code point, this will return TRUE anyway, provided that &lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char_flags&quot;&gt;&quot;is_utf8_valid_partial_char_flags&quot;&lt;/a&gt;&lt;/code&gt; returns TRUE for them.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; が0の場合、Perlによって拡張された整形式のUTF-8は、制限なしで受け入れられます。バッファの最後の数バイトが完全なコードポイントを形成しない場合、 &lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char_flags&quot;&gt;&quot;is_utf8_valid_partial_char_flags&quot;&lt;/a&gt;&lt;/code&gt; がそれらに対してTRUEを返す限り、これはとにかくTRUEを返します。</target>
        </trans-unit>
        <trans-unit id="23848029d478b456b26bba2286d77574bebc75c1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is 0, this behaves identically to &lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char&quot;&gt;&quot;is_utf8_valid_partial_char&quot;&lt;/a&gt;&lt;/code&gt;. Otherwise &lt;code&gt;flags&lt;/code&gt; can be any combination of the &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; flags accepted by &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt;. If there is any sequence of bytes that can complete the input partial character in such a way that a non-prohibited character is formed, the function returns TRUE; otherwise FALSE. Non character code points cannot be determined based on partial character input. But many of the other possible excluded types can be determined from just the first one or two bytes.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; が0の場合、これは &lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char&quot;&gt;&quot;is_utf8_valid_partial_char&quot;&lt;/a&gt;&lt;/code&gt; と同じように動作します。そうでない場合 &lt;code&gt;flags&lt;/code&gt; 、任意の組み合わせとすることができる &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; で受け入れフラグ &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt; 。禁止されていない文字が形成されるような方法で入力部分文字を完成させることができるバイトのシーケンスがある場合、関数はTRUEを返します。それ以外の場合はFALSE。文字以外のポイントは、部分的な文字入力に基づいて判別することはできません。ただし、他の可能な除外タイプの多くは、最初の1バイトまたは2バイトだけから判別できます。</target>
        </trans-unit>
        <trans-unit id="7776c59483454fdc128e37c2b654f9e899314281" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is 0, this function accepts any code point from 0..&lt;code&gt;IV_MAX&lt;/code&gt; as input. &lt;code&gt;IV_MAX&lt;/code&gt; is typically 0x7FFF_FFFF in a 32-bit word.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; が0の場合、この関数は0からの任意のコードポイントを受け入れます。入力として &lt;code&gt;IV_MAX&lt;/code&gt; 。 &lt;code&gt;IV_MAX&lt;/code&gt; は通常、32ビットワードで0x7FFF_FFFFです。</target>
        </trans-unit>
        <trans-unit id="10e5eab05bd09c8fe9f56a01b844bac5e3765d28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is 0, this gives the same results as &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt;; if &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;UTF8_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt;, this gives the same results as &lt;code&gt;&lt;a href=&quot;#isSTRICT_UTF8_CHAR&quot;&gt;&quot;isSTRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt;; and if &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE&lt;/code&gt;, this gives the same results as &lt;code&gt;&lt;a href=&quot;#isC9_STRICT_UTF8_CHAR&quot;&gt;&quot;isC9_STRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt;. Otherwise &lt;code&gt;flags&lt;/code&gt; may be any combination of the &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; flags understood by &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt;, with the same meanings.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; が0の場合、これは &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; と同じ結果になります。 &lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;UTF8_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt; の場合、これは &lt;code&gt;&lt;a href=&quot;#isSTRICT_UTF8_CHAR&quot;&gt;&quot;isSTRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; と同じ結果になります。 &lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; の場合、これは &lt;code&gt;&lt;a href=&quot;#isC9_STRICT_UTF8_CHAR&quot;&gt;&quot;isC9_STRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; と同じ結果になります。それ以外の場合、 &lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt; によって理解される &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; フラグの任意の組み合わせであり、同じ意味です。</target>
        </trans-unit>
        <trans-unit id="c01ee327fde250472c539a32455541306b4bc120" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is 0, this gives the same results as &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt;; if &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;UTF8_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt;, this gives the same results as &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt;; and if &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE&lt;/code&gt;, this gives the same results as &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt;. Otherwise &lt;code&gt;flags&lt;/code&gt; may be any combination of the &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; flags understood by &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt;, with the same meanings.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; が0の場合、これは &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同じ結果になります。 &lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;UTF8_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt; の場合、これは &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同じ結果になります。 &lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;UTF8_DISALLOW_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; の場合、これは &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同じ結果になります。それ以外の場合、 &lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt;&lt;/code&gt; によって理解される &lt;code&gt;UTF8_DISALLOW_&lt;i&gt;foo&lt;/i&gt;&lt;/code&gt; フラグの任意の組み合わせであり、同じ意味です。</target>
        </trans-unit>
        <trans-unit id="3ef48bc44bf4f8b7aeee22cccd386b0d4dcfb8f9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;frame &amp;amp; 4&lt;/code&gt; , arguments to functions are printed, plus context and caller info. If &lt;code&gt;frame &amp;amp; 8&lt;/code&gt; , overloaded &lt;code&gt;stringify&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt;d &lt;code&gt;FETCH&lt;/code&gt; is enabled on the printed arguments. If &lt;code&gt;frame
&amp;amp; 16&lt;/code&gt; , the return value from the subroutine is printed.</source>
          <target state="translated">&lt;code&gt;frame &amp;amp; 4&lt;/code&gt; 場合、関数への引数と、コンテキストと呼び出し元の情報が出力されます。場合 &lt;code&gt;frame &amp;amp; 8&lt;/code&gt; 、過負荷 &lt;code&gt;stringify&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; dは &lt;code&gt;FETCH&lt;/code&gt; 印刷引数で有効になっています。 &lt;code&gt;frame &amp;amp; 16&lt;/code&gt; 場合、サブルーチンからの戻り値が出力されます。</target>
        </trans-unit>
        <trans-unit id="f6ef7c333faaf2cb26f8747450c37161f8d75370" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;frame &amp;amp; 4&lt;/code&gt;, arguments to functions are printed, plus context and caller info. If &lt;code&gt;frame &amp;amp; 8&lt;/code&gt;, overloaded &lt;code&gt;stringify&lt;/code&gt; and &lt;code&gt;tie&lt;/code&gt;d &lt;code&gt;FETCH&lt;/code&gt; is enabled on the printed arguments. If &lt;code&gt;frame &amp;amp; 16&lt;/code&gt;, the return value from the subroutine is printed.</source>
          <target state="translated">&lt;code&gt;frame &amp;amp; 4&lt;/code&gt; 場合、関数への引数に加えて、コンテキストと呼び出し元の情報が出力されます。場合 &lt;code&gt;frame &amp;amp; 8&lt;/code&gt; 、過負荷 &lt;code&gt;stringify&lt;/code&gt; と &lt;code&gt;tie&lt;/code&gt; dは &lt;code&gt;FETCH&lt;/code&gt; 印刷引数で有効になっています。 &lt;code&gt;frame &amp;amp; 16&lt;/code&gt; 場合、サブルーチンからの戻り値が出力されます。</target>
        </trans-unit>
        <trans-unit id="b54e3981c02655a1fab1a806eaa02120a0c9bfed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;function&lt;/code&gt; was the name of a function, then &lt;code&gt;memoize&lt;/code&gt; hides the old version and installs the new memoized version under the old name, so that &lt;code&gt;&amp;amp;function(...)&lt;/code&gt; actually invokes the memoized version.</source>
          <target state="translated">場合 &lt;code&gt;function&lt;/code&gt; 、関数の名前だった、そして &lt;code&gt;memoize&lt;/code&gt; は、古いバージョンを隠し、古い名前で新しいメモ化バージョンをインストールし、そのことを &lt;code&gt;&amp;amp;function(...)&lt;/code&gt; 実際にメモ化バージョンを起動します。</target>
        </trans-unit>
        <trans-unit id="4823580da2e2f493ed7ea495228a6fb43531c2a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;get_handle&lt;/code&gt; senses that it's running in program that was invoked as a CGI, then it tries to get language-tags out of the environment variable &quot;HTTP_ACCEPT_LANGUAGE&quot;, and it pretends that those were the languages passed as parameters to &lt;code&gt;get_handle&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; がCGIとして呼び出されたプログラムで実行されていることを感知した場合、環境変数「HTTP_ACCEPT_LANGUAGE」から言語タグを取得しようとし、それらが &lt;code&gt;get_handle&lt;/code&gt; にパラメーターとして渡された言語であると偽装します。</target>
        </trans-unit>
        <trans-unit id="7b8f1bd59bcb9836018bddcc2b5f32a734b99099" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;get_handle&lt;/code&gt; senses that it's running in program that was invoked as a CGI, then it tries to get language-tags out of the environment variable &quot;HTTP_ACCEPT_LANGUAGE&quot;, and it pretends that those were the languages passed as parameters to &lt;code&gt;get_handle&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;get_handle&lt;/code&gt; それがCGIとして呼び出されたプログラムで実行していることの感覚、それは環境変数「HTTP_ACCEPT_LANGUAGE」のうち、言語タグを取得しようと、それはそれらをするためのパラメータとして渡された言語だったことふり &lt;code&gt;get_handle&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a5501c614e6eee43f2f2b50112bdb8a824a2fea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;gv&lt;/code&gt; is a completely empty typeglob, it is deleted from the stash.</source>
          <target state="translated">場合 &lt;code&gt;gv&lt;/code&gt; 完全に空型グロブで、それがスタッシュから削除されます。</target>
        </trans-unit>
        <trans-unit id="171c792393c3bd16ce8492fbf51df1d34df47fa3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;gv&lt;/code&gt; is a typeglob containing only a sufficiently-ordinary constant sub, the typeglob is replaced with a scalar-reference placeholder that more compactly represents the same thing.</source>
          <target state="translated">&lt;code&gt;gv&lt;/code&gt; が十分に通常の定数subのみを含む型グロブである場合、型グロブは同じものをよりコンパクトに表すスカラー参照プレースホルダーに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="91c336e511b07c506517b1f2fbdfac89a7b69625" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;gv&lt;/code&gt; is a typeglob whose subroutine entry is a constant sub eligible for inlining, or &lt;code&gt;gv&lt;/code&gt; is a placeholder reference that would be promoted to such a typeglob, then returns the value returned by the sub. Otherwise, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;gv&lt;/code&gt; 、そのサブルーチンエントリインライン化、またはのための一定のサブ対象となる型グロブである &lt;code&gt;gv&lt;/code&gt; そのような型グロブに昇格されるプレースホルダ参照であるが、その後、サブによって返された値を返します。それ以外の場合は、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="15863e2e3bcfe9bf34415295eb886e40c8b84a73" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;gv&lt;/code&gt; is a typeglob whose subroutine entry is a constant sub eligible for inlining, or &lt;code&gt;gv&lt;/code&gt; is a placeholder reference that would be promoted to such a typeglob, then returns the value returned by the sub. Otherwise, returns NULL.</source>
          <target state="translated">場合 &lt;code&gt;gv&lt;/code&gt; 、そのサブルーチンエントリインライン化、またはのための一定のサブ対象となる型グロブである &lt;code&gt;gv&lt;/code&gt; そのような型グロブに昇格されるプレースホルダ参照であるが、その後、サブによって返された値を返します。それ以外の場合は、NULLを返します。</target>
        </trans-unit>
        <trans-unit id="5b76926b7fe43456ac634077129deadebe6d1749" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ignoreName&lt;/code&gt; or &lt;code&gt;undefName&lt;/code&gt; is used, character names should be specified as a comment (following &lt;code&gt;#&lt;/code&gt; ) on each line.</source>
          <target state="translated">&lt;code&gt;ignoreName&lt;/code&gt; または &lt;code&gt;undefName&lt;/code&gt; を使用する場合は、文字名を各行のコメント（ &lt;code&gt;#&lt;/code&gt; に続く）として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c67ec45488470986d50d9732fc06ac7df6e89db8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ignoreName&lt;/code&gt; or &lt;code&gt;undefName&lt;/code&gt; is used, character names should be specified as a comment (following &lt;code&gt;#&lt;/code&gt;) on each line.</source>
          <target state="translated">&lt;code&gt;ignoreName&lt;/code&gt; または &lt;code&gt;undefName&lt;/code&gt; を使用する場合は、文字名を各行のコメント（ &lt;code&gt;#&lt;/code&gt; に続く）として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="606bfb04b8810dddbc165299090455517c6f31d2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;len&lt;/code&gt; is 0, it will be calculated using &lt;code&gt;strlen(s)&lt;/code&gt; , (which means if you use this option, that &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; can't have embedded &lt;code&gt;NUL&lt;/code&gt; characters and has to have a terminating &lt;code&gt;NUL&lt;/code&gt; byte).</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; が0の場合、 &lt;code&gt;strlen(s)&lt;/code&gt; を使用して計算されます（つまり、このオプションを使用する場合、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;NUL&lt;/code&gt; 文字を埋め込むことはできず、終了 &lt;code&gt;NUL&lt;/code&gt; バイトが必要です）。</target>
        </trans-unit>
        <trans-unit id="35a8aa529d970b1105047bbf5eb8254c1640c25a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;len&lt;/code&gt; is 0, it will be calculated using &lt;code&gt;strlen(s)&lt;/code&gt;, (which means if you use this option, that &lt;code&gt;s&lt;/code&gt; can't have embedded &lt;code&gt;NUL&lt;/code&gt; characters and has to have a terminating &lt;code&gt;NUL&lt;/code&gt; byte).</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; が0の場合、 &lt;code&gt;strlen(s)&lt;/code&gt; を使用して計算されます（つまり、このオプションを使用する場合、 &lt;code&gt;s&lt;/code&gt; には &lt;code&gt;NUL&lt;/code&gt; 文字を埋め込むことができず、終了 &lt;code&gt;NUL&lt;/code&gt; バイトが必要です）。</target>
        </trans-unit>
        <trans-unit id="564f6927aa67faeb8390b79eb296fc0609382f07" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;list_archive()&lt;/code&gt; is passed an array reference as its third argument it returns a list of hash references containing the requested properties of each file. The following list of properties is supported: full_path, name, size, mtime (last modified date), mode, uid, gid, linkname, uname, gname, devmajor, devminor, prefix, type.</source>
          <target state="translated">場合 &lt;code&gt;list_archive()&lt;/code&gt; その3番目の引数として配列リファレンスが渡され、それは、各ファイルの要求されたプロパティを含むハッシュ・リファレンスのリストを返します。次のプロパティのリストがサポートされています：full_path、name、size、mtime（最終変更日）、mode、uid、gid、linkname、uname、gname、devmajor、devminor、prefix、type。</target>
        </trans-unit>
        <trans-unit id="30b6892ba87f6c10d6419b32b55f7a86419b6ce9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;list_files()&lt;/code&gt; is passed an array reference as its first argument it returns a list of hash references containing the requested properties of each file. The following list of properties is supported: name, size, mtime (last modified date), mode, uid, gid, linkname, uname, gname, devmajor, devminor, prefix.</source>
          <target state="translated">場合 &lt;code&gt;list_files()&lt;/code&gt; は最初の引数として配列リファレンスが渡され、それは、各ファイルの要求されたプロパティを含むハッシュ・リファレンスのリストを返します。プロパティの次のリストがサポートされています：名前、サイズ、mtime（最終更新日）、モード、uid、gid、linkname、uname、gname、devmajor、devminor、prefix。</target>
        </trans-unit>
        <trans-unit id="6b6ca16484970453642612331b9f95d68983da46" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;make_path&lt;/code&gt; or &lt;code&gt;remove_tree&lt;/code&gt; encounter an error, a diagnostic message will be printed to &lt;code&gt;STDERR&lt;/code&gt; via &lt;code&gt;carp&lt;/code&gt; (for non-fatal errors), or via &lt;code&gt;croak&lt;/code&gt; (for fatal errors).</source>
          <target state="translated">場合 &lt;code&gt;make_path&lt;/code&gt; 又は &lt;code&gt;remove_tree&lt;/code&gt; 遭遇エラー、診断メッセージは、に出力する &lt;code&gt;STDERR&lt;/code&gt; 介し &lt;code&gt;carp&lt;/code&gt; （非致命的なエラーの場合）、または介し &lt;code&gt;croak&lt;/code&gt; （致命的なエラーのため）。</target>
        </trans-unit>
        <trans-unit id="c1dea29744b11722e865e983de60cdb68d486715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;make_path&lt;/code&gt; or &lt;code&gt;remove_tree&lt;/code&gt; encounters an error, a diagnostic message will be printed to &lt;code&gt;STDERR&lt;/code&gt; via &lt;code&gt;carp&lt;/code&gt; (for non-fatal errors) or via &lt;code&gt;croak&lt;/code&gt; (for fatal errors).</source>
          <target state="translated">場合 &lt;code&gt;make_path&lt;/code&gt; 又は &lt;code&gt;remove_tree&lt;/code&gt; 遭遇エラー、診断メッセージは、に出力する &lt;code&gt;STDERR&lt;/code&gt; 介し &lt;code&gt;carp&lt;/code&gt; （非致命的なエラーの場合）または介し &lt;code&gt;croak&lt;/code&gt; （致命的なエラーのため）。</target>
        </trans-unit>
        <trans-unit id="e12005256b82b7dbf15e43b617aa6446b9ea3caa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;merge&lt;/code&gt; is true the harness will create parsers that merge STDOUT and STDERR together for any processes they start.</source>
          <target state="translated">場合 &lt;code&gt;merge&lt;/code&gt; 真であるハーネスは、彼らが開始するすべてのプロセスのために一緒にSTDOUTとSTDERRをマージするパーサーを作成します。</target>
        </trans-unit>
        <trans-unit id="a65b7746a43b203ecde7cf3199ef2365227c5212" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;name&lt;/code&gt; is null then the subroutine will be anonymous, with its &lt;code&gt;CvGV&lt;/code&gt; referring to an &lt;code&gt;__ANON__&lt;/code&gt; glob. If &lt;code&gt;name&lt;/code&gt; is non-null then the subroutine will be named accordingly, referenced by the appropriate glob. &lt;code&gt;name&lt;/code&gt; is a string of length &lt;code&gt;len&lt;/code&gt; bytes giving a sigilless symbol name, in UTF-8 if &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;SVf_UTF8&lt;/code&gt; bit set and in Latin-1 otherwise. The name may be either qualified or unqualified, with the stash defaulting in the same manner as for &lt;code&gt;gv_fetchpvn_flags&lt;/code&gt;. &lt;code&gt;flags&lt;/code&gt; may contain flag bits understood by &lt;code&gt;gv_fetchpvn_flags&lt;/code&gt; with the same meaning as they have there, such as &lt;code&gt;GV_ADDWARN&lt;/code&gt;. The symbol is always added to the stash if necessary, with &lt;code&gt;GV_ADDMULTI&lt;/code&gt; semantics.</source>
          <target state="translated">場合は &lt;code&gt;name&lt;/code&gt; nullのサブルーチンは、そので、匿名になります &lt;code&gt;CvGV&lt;/code&gt; はを参照 &lt;code&gt;__ANON__&lt;/code&gt; のグロブ。 &lt;code&gt;name&lt;/code&gt; がnull以外の場合、サブルーチンはそれに応じて名前が付けられ、適切なglobによって参照されます。 &lt;code&gt;name&lt;/code&gt; は、 &lt;code&gt;flags&lt;/code&gt; に &lt;code&gt;SVf_UTF8&lt;/code&gt; ビットが設定されている場合はUTF-8で、それ以外の場合はLatin-1で、シギルレスシンボル名を与える長さ &lt;code&gt;len&lt;/code&gt; バイトの文字列です。名前は修飾されている場合と修飾されていない場合があり、stashは &lt;code&gt;gv_fetchpvn_flags&lt;/code&gt; の場合と同じ方法でデフォルト設定されます。 &lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;gv_fetchpvn_flags&lt;/code&gt; によって理解されるフラグビットが含まれる場合があります &lt;code&gt;GV_ADDWARN&lt;/code&gt; など、そこにあるのと同じ意味です。シンボルは、必要に応じて、 &lt;code&gt;GV_ADDMULTI&lt;/code&gt; セマンティクスを使用して常にスタッシュに追加されます。</target>
        </trans-unit>
        <trans-unit id="8ab07e7506173a92d684e99bcaa1a4031e98f0c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;name&lt;/code&gt; is null then the subroutine will be anonymous, with its &lt;code&gt;CvGV&lt;/code&gt; referring to an &lt;code&gt;__ANON__&lt;/code&gt; glob. If &lt;code&gt;name&lt;/code&gt; is non-null then the subroutine will be named accordingly, referenced by the appropriate glob. &lt;code&gt;name&lt;/code&gt; is a string of length &lt;code&gt;len&lt;/code&gt; bytes giving a sigilless symbol name, in UTF-8 if &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;SVf_UTF8&lt;/code&gt; bit set and in Latin-1 otherwise. The name may be either qualified or unqualified. If the name is unqualified then it defaults to being in the stash specified by &lt;code&gt;stash&lt;/code&gt; if that is non-null, or to &lt;code&gt;PL_curstash&lt;/code&gt; if &lt;code&gt;stash&lt;/code&gt; is null. The symbol is always added to the stash if necessary, with &lt;code&gt;GV_ADDMULTI&lt;/code&gt; semantics.</source>
          <target state="translated">場合は &lt;code&gt;name&lt;/code&gt; nullのサブルーチンは、そので、匿名になります &lt;code&gt;CvGV&lt;/code&gt; はを参照 &lt;code&gt;__ANON__&lt;/code&gt; のグロブ。 &lt;code&gt;name&lt;/code&gt; がnull以外の場合、サブルーチンはそれに応じて名前が付けられ、適切なglobによって参照されます。 &lt;code&gt;name&lt;/code&gt; は、 &lt;code&gt;flags&lt;/code&gt; に &lt;code&gt;SVf_UTF8&lt;/code&gt; ビットが設定されている場合はUTF-8で、それ以外の場合はLatin-1で、シギルレスシンボル名を与える長さ &lt;code&gt;len&lt;/code&gt; バイトの文字列です。名前は修飾されている場合と修飾されていない場合があります。名前はその後、スタッシュであることがで指定されたデフォルトは修飾されていない場合は &lt;code&gt;stash&lt;/code&gt; ことが非nullの場合、またはに &lt;code&gt;PL_curstash&lt;/code&gt; 場合 &lt;code&gt;stash&lt;/code&gt; 無効です。シンボルは、必要に応じて、 &lt;code&gt;GV_ADDMULTI&lt;/code&gt; セマンティクスを使用して常にスタッシュに追加されます。</target>
        </trans-unit>
        <trans-unit id="a5a417a1f8bba03650439d46556e6b5e2f42cdc6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;namlen&lt;/code&gt; is greater than zero then a &lt;code&gt;savepvn&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;namlen&lt;/code&gt; がゼロより大きい場合、 &lt;code&gt;savepvn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5b4f60a5261a12c3ad5e79f21f3b4cceb3007ea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;new()&lt;/code&gt; is invoked with arguments and the &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; method fails for any reason, &lt;code&gt;new()&lt;/code&gt; returns undef.</source>
          <target state="translated">場合は &lt;code&gt;new()&lt;/code&gt; 引数で呼び出され &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; メソッドが何らかの理由で失敗した、 &lt;code&gt;new()&lt;/code&gt; はundefを返します。</target>
        </trans-unit>
        <trans-unit id="7cef9a9221becdc1b22f8b33e94c433da6581c20" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;new()&lt;/code&gt; is invoked with arguments and the &lt;code&gt;read()&lt;/code&gt; method fails for any reason, &lt;code&gt;new()&lt;/code&gt; returns undef.</source>
          <target state="translated">場合は &lt;code&gt;new()&lt;/code&gt; 引数で呼び出され &lt;code&gt;read()&lt;/code&gt; メソッドが何らかの理由で失敗した、 &lt;code&gt;new()&lt;/code&gt; はundefを返します。</target>
        </trans-unit>
        <trans-unit id="33de51c2b233ea7368e7ccccf568c1e624835ecc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;o&lt;/code&gt; is null, the state op is returned. Otherwise the state op is combined with &lt;code&gt;o&lt;/code&gt; into a &lt;code&gt;lineseq&lt;/code&gt; list op, which is returned. &lt;code&gt;o&lt;/code&gt; is consumed by this function and becomes part of the returned op tree.</source>
          <target state="translated">場合は &lt;code&gt;o&lt;/code&gt; がnullの場合、状態OPが返されます。それ以外の場合、状態opは &lt;code&gt;o&lt;/code&gt; と結合されて &lt;code&gt;lineseq&lt;/code&gt; リストopになり、返されます。 &lt;code&gt;o&lt;/code&gt; はこの関数によって消費され、返されるopツリーの一部になります。</target>
        </trans-unit>
        <trans-unit id="d5c8f13fd0a4ec2abf65b26b0dde9b71cbc468dc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;o_is_gv&lt;/code&gt; is false and &lt;code&gt;o&lt;/code&gt; is null, then the subroutine will be anonymous. If &lt;code&gt;o_is_gv&lt;/code&gt; is false and &lt;code&gt;o&lt;/code&gt; is non-null, then &lt;code&gt;o&lt;/code&gt; must point to a &lt;code&gt;const&lt;/code&gt; op, which will be consumed by this function, and its string value supplies a name for the subroutine. The name may be qualified or unqualified, and if it is unqualified then a default stash will be selected in some manner. If &lt;code&gt;o_is_gv&lt;/code&gt; is true, then &lt;code&gt;o&lt;/code&gt; doesn't point to an &lt;code&gt;OP&lt;/code&gt; at all, but is instead a cast pointer to a &lt;code&gt;GV&lt;/code&gt; by which the subroutine will be named.</source>
          <target state="translated">場合 &lt;code&gt;o_is_gv&lt;/code&gt; が偽であり、 &lt;code&gt;o&lt;/code&gt; はnullである場合、サブルーチンは匿名になります。場合 &lt;code&gt;o_is_gv&lt;/code&gt; が偽であり、 &lt;code&gt;o&lt;/code&gt; が非nullで、その後、 &lt;code&gt;o&lt;/code&gt; 必見ポイントへ &lt;code&gt;const&lt;/code&gt; この機能によって消費され、その文字列値は、サブルーチンの名前を提供しますオペアンプ、。名前は修飾されている場合と修飾されていない場合があり、修飾されていない場合は、何らかの方法でデフォルトのスタッシュが選択されます。場合 &lt;code&gt;o_is_gv&lt;/code&gt; が真である場合、 &lt;code&gt;o&lt;/code&gt; は指していない &lt;code&gt;OP&lt;/code&gt; 全てではなく、その代わりに、キャストのポインタである &lt;code&gt;GV&lt;/code&gt; サブルーチンを命名されることで。</target>
        </trans-unit>
        <trans-unit id="dcf32c805e2ddc81931fd2560a08109645dce7e6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;optype&lt;/code&gt; is &lt;code&gt;OP_ANDASSIGN&lt;/code&gt;, &lt;code&gt;OP_ORASSIGN&lt;/code&gt;, or &lt;code&gt;OP_DORASSIGN&lt;/code&gt;, then a suitable conditional optree is constructed. If &lt;code&gt;optype&lt;/code&gt; is the opcode of a binary operator, such as &lt;code&gt;OP_BIT_OR&lt;/code&gt;, then an op is constructed that performs the binary operation and assigns the result to the left argument. Either way, if &lt;code&gt;optype&lt;/code&gt; is non-zero then &lt;code&gt;flags&lt;/code&gt; has no effect.</source>
          <target state="translated">場合 &lt;code&gt;optype&lt;/code&gt; ある &lt;code&gt;OP_ANDASSIGN&lt;/code&gt; 、 &lt;code&gt;OP_ORASSIGN&lt;/code&gt; 、又は &lt;code&gt;OP_DORASSIGN&lt;/code&gt; 、次いで、適切な条件付き構文木が構築されます。 &lt;code&gt;optype&lt;/code&gt; が &lt;code&gt;OP_BIT_OR&lt;/code&gt; などの二項演算子のオペコードである場合、二項演算を実行し、結果を左の引数に割り当てるopが作成されます。いずれにせよ、 &lt;code&gt;optype&lt;/code&gt; がゼロ以外の場合、 &lt;code&gt;flags&lt;/code&gt; は効果がありません。</target>
        </trans-unit>
        <trans-unit id="35ecad3c0cc7408f92e26472fcb7141e48a993e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;optype&lt;/code&gt; is zero, then a plain scalar or list assignment is constructed. Which type of assignment it is is automatically determined. &lt;code&gt;flags&lt;/code&gt; gives the eight bits of &lt;code&gt;op_flags&lt;/code&gt;, except that &lt;code&gt;OPf_KIDS&lt;/code&gt; will be set automatically, and, shifted up eight bits, the eight bits of &lt;code&gt;op_private&lt;/code&gt;, except that the bit with value 1 or 2 is automatically set as required.</source>
          <target state="translated">&lt;code&gt;optype&lt;/code&gt; がゼロの場合、プレーンなスカラーまたはリストの割り当てが作成されます。どのタイプの割り当てであるかは自動的に決定されます。 &lt;code&gt;flags&lt;/code&gt; 8ビット与える &lt;code&gt;op_flags&lt;/code&gt; のことを除いて、 &lt;code&gt;OPf_KIDS&lt;/code&gt; が自動的に設定され、そして、8ビット、8ビットのシフトアップ &lt;code&gt;op_private&lt;/code&gt; を必要に応じて値1又は2を有するビットが自動的に設定されることを除いて、。</target>
        </trans-unit>
        <trans-unit id="14b4ce4ab1caa8905ea03f71030c64a0c404abbc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pass_through&lt;/code&gt; is also enabled, options processing will terminate at the first unrecognized option, or non-option, whichever comes first.</source>
          <target state="translated">&lt;code&gt;pass_through&lt;/code&gt; も有効になっている場合、オプションの処理は、最初の認識されないオプションまたは非オプションのいずれか早い方で終了します。</target>
        </trans-unit>
        <trans-unit id="9243fb188fd78661a99b6e8ffc13a07c0c193e45" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pe1&lt;/code&gt; is non-&lt;code&gt;NULL&lt;/code&gt; and the pointer it points to is not &lt;code&gt;NULL&lt;/code&gt;, that pointer is considered an end pointer to the position 1 byte past the maximum point in &lt;code&gt;s1&lt;/code&gt; beyond which scanning will not continue under any circumstances. (This routine assumes that UTF-8 encoded input strings are not malformed; malformed input can cause it to read past &lt;code&gt;pe1&lt;/code&gt;). This means that if both &lt;code&gt;l1&lt;/code&gt; and &lt;code&gt;pe1&lt;/code&gt; are specified, and &lt;code&gt;pe1&lt;/code&gt; is less than &lt;code&gt;s1&lt;/code&gt;+&lt;code&gt;l1&lt;/code&gt;, the match will never be successful because it can never get as far as its goal (and in fact is asserted against). Correspondingly for &lt;code&gt;pe2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;pe1&lt;/code&gt; 非ある &lt;code&gt;NULL&lt;/code&gt; とそれが指すポインタがない &lt;code&gt;NULL&lt;/code&gt; 、そのポインタがの最大点過去位置1バイトのエンド・ポインタと考えられる &lt;code&gt;s1&lt;/code&gt; 走査がどのような状況下で続行されませんそれを超えます。 （このルーチンは、UTF-8でエンコードされた入力文字列が不正な形式ではないことを前提としています。不正な形式の入力により、 &lt;code&gt;pe1&lt;/code&gt; を超えて読み取られる可能性があります）。つまり、 &lt;code&gt;l1&lt;/code&gt; と &lt;code&gt;pe1&lt;/code&gt; の両方が指定されていて、 &lt;code&gt;pe1&lt;/code&gt; が &lt;code&gt;s1&lt;/code&gt; + &lt;code&gt;l1&lt;/code&gt; 未満の場合、目標まで到達できないため（実際には、反対に主張されているため）、一致は成功しません。 &lt;code&gt;pe2&lt;/code&gt; に対応して &lt;code&gt;s2&lt;/code&gt; に関して。</target>
        </trans-unit>
        <trans-unit id="c02b449190a1b90198a28e96aea10bbc105c7788" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pe1&lt;/code&gt; is non-NULL and the pointer it points to is not NULL, that pointer is considered an end pointer to the position 1 byte past the maximum point in &lt;code&gt;s1&lt;/code&gt; beyond which scanning will not continue under any circumstances. (This routine assumes that UTF-8 encoded input strings are not malformed; malformed input can cause it to read past &lt;code&gt;pe1&lt;/code&gt; ). This means that if both &lt;code&gt;l1&lt;/code&gt; and &lt;code&gt;pe1&lt;/code&gt; are specified, and &lt;code&gt;pe1&lt;/code&gt; is less than &lt;code&gt;s1&lt;/code&gt; +&lt;code&gt;l1&lt;/code&gt; , the match will never be successful because it can never get as far as its goal (and in fact is asserted against). Correspondingly for &lt;code&gt;pe2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt; .</source>
          <target state="translated">場合 &lt;code&gt;pe1&lt;/code&gt; 非NULLであり、それが指すポインタがNULLではない、そのポインタがの最大点過去位置1バイトのエンド・ポインタと考えられる &lt;code&gt;s1&lt;/code&gt; 走査がどのような状況下で続行されませんそれを超えます。 （このルーチンは、UTF-8でエンコードされた入力文字列が不正な形式ではないことを前提としています。不正な形式の入力により、 &lt;code&gt;pe1&lt;/code&gt; を過ぎて読み取る可能性があります）つまり、 &lt;code&gt;l1&lt;/code&gt; と &lt;code&gt;pe1&lt;/code&gt; の両方が指定されていて、 &lt;code&gt;pe1&lt;/code&gt; が &lt;code&gt;s1&lt;/code&gt; + &lt;code&gt;l1&lt;/code&gt; より小さい場合、その目標まで到達できないため（実際にはアサートされないため）、一致は成功しません。 &lt;code&gt;s2&lt;/code&gt; に関して &lt;code&gt;pe2&lt;/code&gt; に対応して。</target>
        </trans-unit>
        <trans-unit id="e5414852c94de9d937514c7b2ffd918737261abd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;permute&lt;/code&gt; is enabled, this means that</source>
          <target state="translated">&lt;code&gt;permute&lt;/code&gt; が有効になっている場合、これは</target>
        </trans-unit>
        <trans-unit id="e47709e624b959c659a6f5424e397b7429bd08c4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;preprocess&lt;/code&gt; and/or &lt;code&gt;normalization&lt;/code&gt; is applied, the code points of the string after them (in NFD by default) are used.</source>
          <target state="translated">場合 &lt;code&gt;preprocess&lt;/code&gt; 及び/又は &lt;code&gt;normalization&lt;/code&gt; 適用され、（デフォルトではNFDに）それらの後の文字列のコードポイントが使用されます。</target>
        </trans-unit>
        <trans-unit id="c7a3e0b813ddb5c552aec4199fd49e48847ff2c2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;prompt()&lt;/code&gt; detects that it is not running interactively and there is nothing on STDIN or if the PERL_MM_USE_DEFAULT environment variable is set to true, the $default will be used without prompting. This prevents automated processes from blocking on user input.</source>
          <target state="translated">場合 &lt;code&gt;prompt()&lt;/code&gt; 、それが対話的に実行されていないと、STDIN上の何もまたはPERL_MM_USE_DEFAULT環境変数がtrueに設定されている場合、$デフォルトはプロンプトを表示せずに使用されますが検出されませんでした。これにより、自動化されたプロセスがユーザー入力をブロックするのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="9d8185228e8e06faca877b9d0926aab5904e951a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;require_order&lt;/code&gt; is enabled, options processing terminates when the first non-option is encountered.</source>
          <target state="translated">場合 &lt;code&gt;require_order&lt;/code&gt; 最初の非オプションに遭遇した場合のオプションは終了を処理し、有効になっています。</target>
        </trans-unit>
        <trans-unit id="7ec89b0e13a7db5b1125011c45839f2c6cfb36ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;require_order&lt;/code&gt; is enabled, options processing will terminate at the first unrecognized option, or non-option, whichever comes first and all remaining arguments are passed to &lt;code&gt;@ARGV&lt;/code&gt; instead of the catchall &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; if present. However, if &lt;code&gt;permute&lt;/code&gt; is enabled instead, results can become confusing.</source>
          <target state="translated">&lt;code&gt;require_order&lt;/code&gt; が有効になっている場合、オプション処理は最初の認識されないオプションまたは非オプションのいずれか早い方で終了し、残りのすべての引数は、存在する場合、catchall &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; の代わりに &lt;code&gt;@ARGV&lt;/code&gt; に渡されます。ただし、代わりに &lt;code&gt;permute&lt;/code&gt; を有効にすると、結果がわかりにくくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e12b0dc8bb5978452519b2af8436776d186cd58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;s&lt;/code&gt; does not point to a well-formed UTF-8 character and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't &lt;code&gt;NULL&lt;/code&gt;) to -1. If those warnings are off, the computed value, if well-defined (or the Unicode REPLACEMENT CHARACTER if not), is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't &lt;code&gt;NULL&lt;/code&gt;) so that (&lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt;) is the next possible position in &lt;code&gt;s&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">場合は &lt;code&gt;s&lt;/code&gt; が有効になっている整形UTF8文字とUTF8の警告を指していない、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; は（あれば設定されている &lt;code&gt;retlen&lt;/code&gt; がない &lt;code&gt;NULL&lt;/code&gt; は-1）。これらの警告がオフの場合、明確に定義されている場合（またはそうでない場合はUnicode REPLACEMENT CHARACTER）、計算された値がサイレントに返され、（ &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）が次のように &lt;code&gt;*retlen&lt;/code&gt; が設定されます（ &lt;code&gt;retlen&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合）。不正な形式ではない文字を開始する可能性 &lt;code&gt;s&lt;/code&gt; あるs内の次の可能な位置。参照&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;「utf8n_to_uvchr」&lt;/a&gt;置換文字が返されたときの詳細については、を。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
