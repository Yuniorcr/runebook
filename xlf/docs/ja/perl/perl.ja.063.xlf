<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="9aa02419484468b5c8da416f7649906d690c9a05" translate="yes" xml:space="preserve">
          <source>There is the &quot;regnext&quot; from a given regop. This is the regop which is reached by jumping forward by the value of &lt;code&gt;NEXT_OFF()&lt;/code&gt;, or in a few cases for longer jumps by the &lt;code&gt;arg1&lt;/code&gt; field of the &lt;code&gt;regnode_1&lt;/code&gt; structure. The subroutine &lt;code&gt;regnext()&lt;/code&gt; handles this transparently. This is the logical successor of the node, which in some cases, like that of the &lt;code&gt;BRANCH&lt;/code&gt; regop, has special meaning.</source>
          <target state="translated">特定のregopからの「regnext」があります。これは、NEXT_OFF &lt;code&gt;NEXT_OFF()&lt;/code&gt; 値によって前方にジャンプするか、場合によっては &lt;code&gt;regnode_1&lt;/code&gt; 構造の &lt;code&gt;arg1&lt;/code&gt; フィールドによってより長いジャンプを行うことによって到達するregopです。サブルーチン &lt;code&gt;regnext()&lt;/code&gt; は、これを透過的に処理します。これはノードの論理的な後継であり、 &lt;code&gt;BRANCH&lt;/code&gt; regopの場合のように、特別な意味を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="d7e93b59e1cec82fb52bcc021241febda0271114" translate="yes" xml:space="preserve">
          <source>There is unfortunately no way to know whether the current emulator supports more than eight colors, which makes the choice of colors difficult. The most conservative choice is to use only the regular colors, which are at least displayed on all emulators. However, they will appear dark in sixteen-color terminal emulators, including most common emulators in UNIX X environments. If you know the display is one of those emulators, you may wish to use the bright variants instead. Even better, offer the user a way to configure the colors for a given application to fit their terminal emulator.</source>
          <target state="translated">現在のエミュレータが8色以上の色をサポートしているかどうかを知る方法は残念ながらありません。最も保守的な選択は、少なくともすべてのエミュレータで表示される通常の色だけを使うことです。しかし、UNIX X 環境で最も一般的なエミュレータを含む、16 色の端末エミュレータでは暗く表示されます。ディスプレイがそれらのエミュレータの一つであることがわかっているならば、代わりに明るい色を使いたいと思うかもしれません。さらに良いのは、ユーザが自分の端末エミュレータに合わせて、あるアプリケーションの色を設定できるようにする方法を提供することです。</target>
        </trans-unit>
        <trans-unit id="695fd95569c58aad4ef775aef68eb765f2b01d11" translate="yes" xml:space="preserve">
          <source>There is whitespace at the beginning or the end of the contents of L&amp;lt;...&amp;gt;.</source>
          <target state="translated">L &amp;lt;...&amp;gt;の内容の最初または最後に空白があります。</target>
        </trans-unit>
        <trans-unit id="95a3b67169b42d8576a9c6b1e3142c83d233d818" translate="yes" xml:space="preserve">
          <source>There is/was a minor twist which makes this scheme fragile: what to do with DLLs loaded from</source>
          <target state="translated">このスキームを脆弱にするちょっとしたひねりがあります。</target>
        </trans-unit>
        <trans-unit id="3224e59e3b76dce8e510a893a97e615a7718acdb" translate="yes" xml:space="preserve">
          <source>There may be a few system-dependent issues of concern to EBCDIC Perl programmers.</source>
          <target state="translated">EBCDIC Perlプログラマにとって、システムに依存した問題がいくつかあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="74512965a00a9ef27998a0f76a590e7ca4e44a5a" translate="yes" xml:space="preserve">
          <source>There may be a slight performance decrease in the filetest operations when the filetest pragma is in effect, because checking bits is very cheap.</source>
          <target state="translated">filetest pragmaが有効な場合、ビットチェックは非常に安価なので、filetest操作では若干のパフォーマンス低下があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e5aefd712f7c17e18d56a8092421c803470327d8" translate="yes" xml:space="preserve">
          <source>There may be several other functions that have undefined behavior so this list shouldn't be considered complete.</source>
          <target state="translated">他にも未定義の動作をする関数がいくつかあるかもしれないので、このリストは完全なものとは考えられません。</target>
        </trans-unit>
        <trans-unit id="8f2ee1e9e100e424daf008c17d87249cb596b7da" translate="yes" xml:space="preserve">
          <source>There might be padding bytes between the fields to align the fields - the bytes can be anything</source>
          <target state="translated">フィールドを整列させるためにフィールド間にパディングバイトがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="79bbf613c601df02685a1a8cf9fe8bf41a315d78" translate="yes" xml:space="preserve">
          <source>There must be no space after the &amp;lt;&amp;lt; part.</source>
          <target state="translated">&amp;lt;&amp;lt;部分の後にスペースがあってはなりません。</target>
        </trans-unit>
        <trans-unit id="0027f08c80bd3f13ec2adbb5ed6335850c27dec0" translate="yes" xml:space="preserve">
          <source>There needs to be at least a line separator after the end token.</source>
          <target state="translated">エンドトークンの後には、少なくとも行区切りが必要です。</target>
        </trans-unit>
        <trans-unit id="3c0e690d4d9216e705dc85028ebd1bac807095e9" translate="yes" xml:space="preserve">
          <source>There needs to be content inside E, L, and X formatting codes.</source>
          <target state="translated">E,L,Xのフォーマットコードの中に内容がある必要があります。</target>
        </trans-unit>
        <trans-unit id="04957b7e4885516ed63d7f8370637e85be797dcc" translate="yes" xml:space="preserve">
          <source>There seem to be various problems in this long double implementation. If Configure detects this brokenness, it will disable the long double support. This can be overridden with explicit &lt;code&gt;-Duselongdouble&lt;/code&gt; (or &lt;code&gt;-Dusemorebits&lt;/code&gt;, which enables both long doubles and 64 bit integers). If you decide to enable long doubles, for most of the broken things Perl has implemented workarounds, but the handling of the special values infinity and NaN remains badly broken: for example infinity plus zero results in NaN.</source>
          <target state="translated">この長いdoubleの実装には、さまざまな問題があるようです。Configureがこの破損を検出すると、longdoubleのサポートが無効になります。これは、明示的な &lt;code&gt;-Duselongdouble&lt;/code&gt; （または &lt;code&gt;-Dusemorebits&lt;/code&gt; 、long doubleと64ビット整数の両方を有効にする）でオーバーライドできます。long doubleを有効にすることにした場合、壊れたもののほとんどに対してPerlは回避策を実装しましたが、特別な値の無限大とNaNの処理はひどく壊れたままです。たとえば、無限大とゼロの結果はNaNになります。</target>
        </trans-unit>
        <trans-unit id="8da2d0d0ae5db5c30555083a00bfa8e94e394bba" translate="yes" xml:space="preserve">
          <source>There seem to be various problems in this long double implementation. If Configure detects this brokenness, it will disable the long double support. This can be overriden with explicit &lt;code&gt;-Duselongdouble&lt;/code&gt; (or &lt;code&gt;-Dusemorebits&lt;/code&gt; , which enables both long doubles and 64 bit integers). If you decide to enable long doubles, for most of the broken things Perl has implemented workarounds, but the handling of the special values infinity and NaN remains badly broken: for example infinity plus zero results in NaN.</source>
          <target state="translated">この長い二重実装にはさまざまな問題があるようです。Configureがこの問題を検出すると、long doubleサポートが無効になります。これは、明示的な &lt;code&gt;-Duselongdouble&lt;/code&gt; （または &lt;code&gt;-Dusemorebits&lt;/code&gt; 、これによりlong doubleと64ビット整数の両方を有効にする）でオーバーライドできます。長いdoubleを有効にすることにした場合、壊れたもののほとんどに対してPerlは回避策を実装しましたが、特殊値の無限大とNaNの処理はひどく壊れたままです。たとえば、無限大とゼロはNaNになります。</target>
        </trans-unit>
        <trans-unit id="0335b463034771ce67a8d72b65b51f2c22f06a51" translate="yes" xml:space="preserve">
          <source>There seems to be a broken system header file in HP-UX 11.00 that breaks perl building in 32bit mode with GNU gcc-4.x causing this error. The same file for HP-UX 11.11 (even though the file is older) does not show this failure, and has the correct definition, so the best fix is to patch the header to match:</source>
          <target state="translated">HP-UX 11.00には、壊れたシステムヘッダファイルがあるようで、GNU gcc-4.xで32bitモードでperlをビルドすると、このエラーの原因となります。HP-UX 11.11用の同じファイル(ファイルが古いにもかかわらず)では、このエラーは表示されず、正しい定義を持っているので、最善の修正はヘッダを一致するようにパッチを当てることです。</target>
        </trans-unit>
        <trans-unit id="06ff19d7cd54ce39cc7fc4ec7d77ca64eb5bbd76" translate="yes" xml:space="preserve">
          <source>There should be a second &lt;code&gt;&quot;:&quot;&lt;/code&gt; , like this:</source>
          <target state="translated">次のように、2番目の &lt;code&gt;&quot;:&quot;&lt;/code&gt; があるはずです。</target>
        </trans-unit>
        <trans-unit id="f721ea1c84751a36c3521319fb047aa7a307e4e5" translate="yes" xml:space="preserve">
          <source>There should be an operator before the &lt;code&gt;&quot;(&quot;&lt;/code&gt; , as there's no indication as to how the digits are to be combined with the characters in the Lao and Thai scripts.</source>
          <target state="translated">ラオス文字とタイ文字の文字と数字をどのように組み合わせるかについての指示がないため、 &lt;code&gt;&quot;(&quot;&lt;/code&gt; 前に演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="b71e898307cc5bb054200f4c984f66181569531c" translate="yes" xml:space="preserve">
          <source>There should be an operator before the &lt;code&gt;&quot;(&quot;&lt;/code&gt;, as there's no indication as to how the digits are to be combined with the characters in the Lao and Thai scripts.</source>
          <target state="translated">ラオス文字とタイ文字の文字と数字を組み合わせる方法が示されていないため、 &lt;code&gt;&quot;(&quot;&lt;/code&gt; 前に演算子が必要です。</target>
        </trans-unit>
        <trans-unit id="b4b586b7cb9ac2ab75263a6f83deec69bb4720e3" translate="yes" xml:space="preserve">
          <source>There should be no test failures.</source>
          <target state="translated">テストの失敗はないはずです。</target>
        </trans-unit>
        <trans-unit id="b05734899e6eb6dfc62f93644e8cdfe0e3686a6c" translate="yes" xml:space="preserve">
          <source>There used to be two main passes involved in parsing, the first to calculate the size of the compiled program, and the second to actually compile it. But now there is only one main pass, with an initial crude guess based on the length of the input pattern, which is increased if necessary as parsing proceeds, and afterwards, trimmed to the actual amount used.</source>
          <target state="translated">以前は、構文解析には、コンパイルされたプログラムのサイズを計算するためのパスと、実際にコンパイルするためのパスの2つがありました。しかし現在では、入力パターンの長さを基にした最初の粗い推測がメインパスとなり、パースが進むにつれて必要に応じて増加し、その後、実際に使用される量に合わせてトリミングされています。</target>
        </trans-unit>
        <trans-unit id="6e7e045068e59967e564a49c6f93bb7b24be5931" translate="yes" xml:space="preserve">
          <source>There we're using the %USER_VARS hash instead of symbolic references. Sometimes this comes up in reading strings from the user with variable references and wanting to expand them to the values of your perl program's variables. This is also a bad idea because it conflates the program-addressable namespace and the user-addressable one. Instead of reading a string and expanding it to the actual contents of your program's own variables:</source>
          <target state="translated">ここでは、シンボリック参照の代わりに %USER_VARS ハッシュを使用しています。時々、これは変数参照でユーザから文字列を読み取って、それをperlプログラムの変数の値に展開したいときに出てきます。これはまた、プログラムでアドレス指定可能な名前空間とユーザでアドレス指定可能な名前空間を混同してしまうので、良くない考えです。文字列を読み込んで、それをプログラム自身の変数の実際の内容に展開するのではなく。</target>
        </trans-unit>
        <trans-unit id="42ff6f078c663dbcc013a189f161b1005798db67" translate="yes" xml:space="preserve">
          <source>There were at least two consecutive &lt;code&gt;=begin&lt;/code&gt; commands without the corresponding &lt;code&gt;=end&lt;/code&gt; . Only one &lt;code&gt;=begin&lt;/code&gt; may be active at a time.</source>
          <target state="translated">少なくとも2つの連続する &lt;code&gt;=begin&lt;/code&gt; コマンドがあり、対応する &lt;code&gt;=end&lt;/code&gt; がありませんでした。一度にアクティブにできる &lt;code&gt;=begin&lt;/code&gt; は1つだけです。</target>
        </trans-unit>
        <trans-unit id="f453a9d5941f2f68e4cfdb1b1ca5576cad8a3040" translate="yes" xml:space="preserve">
          <source>There were race conditions 1.x implementations of File::Path's &lt;code&gt;rmtree&lt;/code&gt; function (although sometimes patched depending on the OS distribution or platform). The 2.0 version contains code to avoid the problem mentioned in CVE-2002-0435.</source>
          <target state="translated">File :: Pathの &lt;code&gt;rmtree&lt;/code&gt; 関数の1.x実装の競合状態がありました（ただし、OSディストリビューションまたはプラットフォームによってはパッチが適用される場合があります）。2.0バージョンには、CVE-2002-0435で言及されている問題を回避するためのコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="3380503a8405cff6d76d7964b6fbca011946199a" translate="yes" xml:space="preserve">
          <source>There were race conditions in the 1.x implementations of File::Path's &lt;code&gt;rmtree&lt;/code&gt; function (although sometimes patched depending on the OS distribution or platform). The 2.0 version contains code to avoid the problem mentioned in CVE-2002-0435.</source>
          <target state="translated">File :: Pathの &lt;code&gt;rmtree&lt;/code&gt; 関数の1.x実装には競合状態がありました（ただし、OSディストリビューションまたはプラットフォームによってはパッチが適用される場合があります）。2.0バージョンには、CVE-2002-0435に記載されている問題を回避するためのコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="78c41744f80fbb19ebe5f5b692cb01709180e04c" translate="yes" xml:space="preserve">
          <source>There were two things you could do, knowing this: be paranoid or be pragmatic. The paranoid approach was to do as little as possible in your signal handler. Set an existing integer variable that already has a value, and return. This doesn't help you if you're in a slow system call, which will just restart. That means you have to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; to longjmp(3) out of the handler. Even this is a little cavalier for the true paranoiac, who avoids &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in a handler because the system</source>
          <target state="translated">これを知ってできることは2つありました。偏執的であるか、実用的であるかです。偏執的なアプローチは、シグナルハンドラーでできる限り少ないことを行うことでした。すでに値を持つ既存の整変数を設定して戻ります。再起動するだけの遅いシステムコールの場合、これは役に立ちません。つまり、ハンドラーからlongjmp（3）で &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 必要があります。でも、これは避け、真の偏執狂のために少し無頓着であり、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; システムためのハンドラでは、</target>
        </trans-unit>
        <trans-unit id="be42f956d21114ebe79af50776e96bfca65bd05b" translate="yes" xml:space="preserve">
          <source>There were two things you could do, knowing this: be paranoid or be pragmatic. The paranoid approach was to do as little as possible in your signal handler. Set an existing integer variable that already has a value, and return. This doesn't help you if you're in a slow system call, which will just restart. That means you have to &lt;code&gt;die&lt;/code&gt; to longjmp(3) out of the handler. Even this is a little cavalier for the true paranoiac, who avoids &lt;code&gt;die&lt;/code&gt; in a handler because the system</source>
          <target state="translated">これを知って、あなたができることが2つありました：妄想的であることまたは実用的であること。偏執的なアプローチは、シグナルハンドラーでできる限り少ないことでした。すでに値を持っている既存の整数変数を設定し、を返します。再起動するだけの遅いシステムコールを使用している場合、これは役に立ちません。つまり、ハンドラーからlongjmp（3）で &lt;code&gt;die&lt;/code&gt; 必要があります。これでさえ、システムがハンドラーで &lt;code&gt;die&lt;/code&gt; を避ける真のパラノイアにとっては少し無頓着です</target>
        </trans-unit>
        <trans-unit id="73d8966c11e67db894b509268c4964e23520f68e" translate="yes" xml:space="preserve">
          <source>There will be less network overhead (and some efficiency in your program) if you specify either the udp or the icmp protocol. The tcp protocol will generate 2.5 times or more traffic for each ping than either udp or icmp. If many hosts are pinged frequently, you may wish to implement a small wait (e.g. 25ms or more) between each ping to avoid flooding your network with packets.</source>
          <target state="translated">udp または icmp プロトコルのどちらかを指定した方が、ネットワークのオーバーヘッドが少なくなります (プログラムの効率も上がります)。tcp プロトコルは udp や icmp の 2.5 倍以上のトラフィックを ping 毎に生成します。多くのホストが頻繁に ping される場合は、ネットワークにパケットが溢れないように、各 ping 間に少しの待ち時間 (例:25ms 以上)を設けるとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="6b418e4f885e0ed1944b1a75c443618ba49e064f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s More Than One Way To Do It, the Perl Motto. The notion that there can be more than one valid path to solving a programming problem in context. (This doesn&amp;rsquo;t mean that more ways are always better or that all possible paths are equally desirable&amp;mdash;just that there need not be One True Way.)</source>
          <target state="translated">Perlのモットーは、それを行う方法が1つではありません。コンテキストでプログラミングの問題を解決するには、複数の有効なパスが存在する可能性があるという概念。（これは、より多くの方法が常により良いこと、またはすべての可能なパスが同じように望ましいことを意味するのではなく、ただ1つの真の方法である必要はありません。）</target>
        </trans-unit>
        <trans-unit id="f28bb8331230709c36ed738881be6c54310d8343" translate="yes" xml:space="preserve">
          <source>There's More Than One Way to Do It</source>
          <target state="translated">ひとりではできないことがある</target>
        </trans-unit>
        <trans-unit id="4490df2ff2d12a716aa36bd30350a041386f672a" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;a href=&quot;#no-MODULE-VERSION-LIST&quot;&gt;&lt;code&gt;no&lt;/code&gt;&lt;/a&gt; declaration that unimports meanings imported by &lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt;, i.e., it calls &lt;code&gt;Module-&amp;gt;unimport(LIST)&lt;/code&gt; instead of &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt;. It behaves just as &lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="translated">&lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;によってインポートされた意味をインポート解除する対応する&lt;a href=&quot;#no-MODULE-VERSION-LIST&quot;&gt; &lt;code&gt;no&lt;/code&gt; &lt;/a&gt;宣言があります。つまり、&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; の&lt;/a&gt;代わりに &lt;code&gt;Module-&amp;gt;unimport(LIST)&lt;/code&gt; を呼び出します。&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;がVERSIONの場合と同じように動作するか、リストが省略または空であるか、インポート解除メソッドが見つかりません。</target>
        </trans-unit>
        <trans-unit id="2d73bf3d5d8029a31c5c535e944915e019e3d9d2" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; declaration that unimports meanings imported by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, i.e., it calls &lt;code&gt;unimport Module LIST&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;. It behaves just as &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; によってインポートされた意味をunimport する対応する &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 宣言があります。つまり、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;unimport Module LIST&lt;/code&gt; を呼び出します。VERSION、省略または空のLIST、またはunimportメソッドが見つからない場合の &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="899206f410877415c07b1eae00900c686b6ba014" translate="yes" xml:space="preserve">
          <source>There's a corresponding &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; declaration that unimports meanings imported by &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, i.e., it calls &lt;code&gt;unimport Module LIST&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;. It behaves just as &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does with VERSION, an omitted or empty LIST, or no unimport method being found.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; によってインポートされた意味をunimport する対応する &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 宣言があります。つまり、 &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ではなく &lt;code&gt;unimport Module LIST&lt;/code&gt; を呼び出します。VERSION、省略または空のLIST、またはunimportメソッドが見つからない場合の &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="5182f679e917b06933e3121044c80451fb98d666" translate="yes" xml:space="preserve">
          <source>There's a couple of useful ones to know about straight away. You wouldn't think we're using any libraries at all at the moment, but '&lt;b&gt;M&lt;/b&gt;' will show which modules are currently loaded, and their version number, while '&lt;b&gt;m&lt;/b&gt;' will show the methods, and '&lt;b&gt;S&lt;/b&gt;' shows all subroutines (by pattern) as shown below. '&lt;b&gt;V&lt;/b&gt;' and '&lt;b&gt;X&lt;/b&gt;' show variables in the program by package scope and can be constrained by pattern.</source>
          <target state="translated">すぐに知っておくと便利なものがいくつかあります。現時点ではライブラリを使用しているとは思わないかもしれませんが、「&lt;b&gt;M&lt;/b&gt;」は現在ロードされているモジュールとそのバージョン番号を示し、「&lt;b&gt;m&lt;/b&gt;」はメソッドを示し、「&lt;b&gt;S&lt;/b&gt;」はすべてのサブルーチンを示します（パターン別）以下のようになります。' &lt;b&gt;V&lt;/b&gt; 'および ' &lt;b&gt;X&lt;/b&gt; 'は、プログラム内の変数をパッケージスコープ別に示し、パターンで制約できます。</target>
        </trans-unit>
        <trans-unit id="4a1ef6c094aa8fbf90f65e6711f095cef82e3a69" translate="yes" xml:space="preserve">
          <source>There's a great deal of reuse possible for sharing of phrases between modules for related dialects, or for sharing of auxiliary functions between related languages. (By &quot;auxiliary functions&quot;, I mean functions that don't produce phrase-text, but which, say, return an answer to &quot;does this number require a plural noun after it?&quot;. Such auxiliary functions would be used in the internal logic of functions that actually do produce phrase-text.)</source>
          <target state="translated">関連する方言のモジュール間でフレーズを共有したり、関連する言語間で補助関数を共有したりすることで、多くの再利用が可能になります。(ここでいう「補助関数」とは、フレーズテキストを生成しないが、例えば、「この数の後に複数形の名詞を必要とするか?このような補助関数は、実際にフレーズ文を生成する関数の内部ロジックで使用されます)。</target>
        </trans-unit>
        <trans-unit id="18ae2cf96b3321649a9e67b52ce3c6b5c29a8066" translate="yes" xml:space="preserve">
          <source>There's a lot more to networking than this, but this should get you started.</source>
          <target state="translated">ネットワーキングにはこれ以外にもたくさんのことがありますが、これはあなたが始められるようにするためのものです。</target>
        </trans-unit>
        <trans-unit id="7dfd5539590f938c8db0768ae08c09cb62cf9574" translate="yes" xml:space="preserve">
          <source>There's a lot to know about character sets, and text encodings. It's probably best to spend a full day learning all this, but the basics can be learned in minutes.</source>
          <target state="translated">文字セットやテキストエンコーディングについて知っておくべきことはたくさんあります。これらすべてを丸一日かけて学ぶのがベストでしょうが、基本的なことは数分で習得できます。</target>
        </trans-unit>
        <trans-unit id="99ae85d03f4b582c99ff96216db7d59e44f17f54" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt; に問題があります。作成したパイプの読み取り側のファイル番号を返しますが、もう一方のファイル番号を取得する方法はありません。代わりに &lt;code&gt;&lt;a href=&quot;functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; を使用することで、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="66cd02292a787335ff912b7d35685e3ae9e8fbc4" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;code&gt;&lt;a href=&quot;pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall(&amp;amp;SYS_pipe)&lt;/a&gt;&lt;/code&gt; に問題があります。作成したパイプの読み取り側のファイル番号を返しますが、もう一方のファイル番号を取得する方法はありません。代わりに &lt;code&gt;&lt;a href=&quot;pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; を使用することで、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="124833fbba9a90584d7cbbd8c3f21d0d1ed7374a" translate="yes" xml:space="preserve">
          <source>There's a problem with &lt;code&gt;syscall(SYS_pipe())&lt;/code&gt;: it returns the file number of the read end of the pipe it creates, but there is no way to retrieve the file number of the other end. You can avoid this problem by using &lt;a href=&quot;#pipe-READHANDLE%2CWRITEHANDLE&quot;&gt;&lt;code&gt;pipe&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;syscall(SYS_pipe())&lt;/code&gt; に問題があります。作成したパイプの読み取り端のファイル番号を返しますが、もう一方の端のファイル番号を取得する方法はありません。代わりに&lt;a href=&quot;#pipe-READHANDLE%2CWRITEHANDLE&quot;&gt; &lt;code&gt;pipe&lt;/code&gt; &lt;/a&gt;を使用することで、この問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="e41e3a2378d95f98d33fb21414c6067f31a384cf" translate="yes" xml:space="preserve">
          <source>There's a slight complication under the hood of &lt;code&gt;Memoize&lt;/code&gt; : There are actually</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; のフードの下には少し複雑な問題があります。</target>
        </trans-unit>
        <trans-unit id="e606f3dfb543a0539ef72dd37726579bac1b16a8" translate="yes" xml:space="preserve">
          <source>There's a slight complication under the hood of &lt;code&gt;Memoize&lt;/code&gt;: There are actually</source>
          <target state="translated">&lt;code&gt;Memoize&lt;/code&gt; は少し複雑な問題があります：実際には</target>
        </trans-unit>
        <trans-unit id="5de903209b03670bb7672de0c3e9635cd117f5ca" translate="yes" xml:space="preserve">
          <source>There's a subtle trap lurking in the offing: Adding another field after the Short Message (in variable &lt;code&gt;$sm&lt;/code&gt; ) is all right when packing, but this cannot be unpacked naively:</source>
          <target state="translated">沖合いには潜んでいる微妙な罠があります：ショートメッセージ（変数 &lt;code&gt;$sm&lt;/code&gt; ）の後に別のフィールドを追加しても、パッキング時に問題はありませんが、単純にアンパックすることはできません。</target>
        </trans-unit>
        <trans-unit id="f66d2e86f53d8e9dfa87109acbd15cc3b1bb44aa" translate="yes" xml:space="preserve">
          <source>There's a subtle trap lurking in the offing: Adding another field after the Short Message (in variable &lt;code&gt;$sm&lt;/code&gt;) is all right when packing, but this cannot be unpacked naively:</source>
          <target state="translated">沖合に潜んでいる微妙な罠があります：短いメッセージ（変数 &lt;code&gt;$sm&lt;/code&gt; ）の後に別のフィールドを追加することはパック時に問題ありませんが、これを素朴にアンパックすることはできません：</target>
        </trans-unit>
        <trans-unit id="5136f0522d5206778ac4f88d48f4c827076f1a46" translate="yes" xml:space="preserve">
          <source>There's a wiki dedicated to the Test Anything Protocol:</source>
          <target state="translated">なんでもテストプロトコル専用のwikiがあるよ</target>
        </trans-unit>
        <trans-unit id="3b112374a474f8a64038b7df632984baece37394" translate="yes" xml:space="preserve">
          <source>There's also</source>
          <target state="translated">もあります。</target>
        </trans-unit>
        <trans-unit id="40aa0d88671271215389ee01ca5270e38fa18dab" translate="yes" xml:space="preserve">
          <source>There's also a &lt;a href=&quot;File::Tail&quot;&gt;File::Tail&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPANの&lt;a href=&quot;File::Tail&quot;&gt;File :: Tail&lt;/a&gt;モジュールもあります。</target>
        </trans-unit>
        <trans-unit id="58a726895b66eba4d8724a2292f078a4d2648322" translate="yes" xml:space="preserve">
          <source>There's also a &lt;a href=&quot;http://search.cpan.org/perldoc/File::Tail&quot;&gt;File::Tail&lt;/a&gt; module from CPAN.</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/File::Tail&quot;&gt;File :: Tail&lt;/a&gt;モジュールもあります。</target>
        </trans-unit>
        <trans-unit id="035e86078ae3280a54d8fc426b353c9ce230b2ad" translate="yes" xml:space="preserve">
          <source>There's also a negated version of it:</source>
          <target state="translated">否定されているバージョンもあります。</target>
        </trans-unit>
        <trans-unit id="194f92c1842e4ee102fc7a284b9e315ab368c04c" translate="yes" xml:space="preserve">
          <source>There's also a negated version, for the same reason we have &lt;code&gt;unless&lt;/code&gt; :</source>
          <target state="translated">同じ理由で、以下の &lt;code&gt;unless&lt;/code&gt; 、否定バージョンもあります。</target>
        </trans-unit>
        <trans-unit id="e0601768e9aaa457e7e7ef47834fc2f32a22f940" translate="yes" xml:space="preserve">
          <source>There's also a negated version, for the same reason we have &lt;code&gt;unless&lt;/code&gt;:</source>
          <target state="translated">否定バージョンもあります。同じ理由で、次の &lt;code&gt;unless&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ce23f5592e874ac51b717997ee3d4abcaf17d1eb" translate="yes" xml:space="preserve">
          <source>There's an &lt;code&gt;unmemoize&lt;/code&gt; function that you can import if you want to. Why would you want to? Here's an example: Suppose you have your cache tied to a DBM file, and you want to make sure that the cache is written out to disk if someone interrupts the program. If the program exits normally, this will happen anyway, but if someone types control-C or something then the program will terminate immediately without synchronizing the database. So what you can do instead is</source>
          <target state="translated">あります &lt;code&gt;unmemoize&lt;/code&gt; あなたがしたい場合は、インポートすることができ、その関数は。なぜあなたはしたいですか？次に例を示します。キャッシュがDBMファイルに関連付けられていて、誰かがプログラムを中断した場合にキャッシュがディスクに書き込まれるようにしたいとします。プログラムが正常に終了する場合、これはとにかく起こりますが、誰かがcontrol-Cなどを入力すると、データベースを同期せずにプログラムはすぐに終了します。代わりにできることは</target>
        </trans-unit>
        <trans-unit id="08ec3c4ec2591dd761c5a485e08fcf45d215a5be" translate="yes" xml:space="preserve">
          <source>There's an effort going on to document the internal functions and automatically produce reference manuals from them -- &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; is one such manual which details all the functions which are available to XS writers. &lt;a href=&quot;perlintern&quot;&gt;perlintern&lt;/a&gt; is the autogenerated manual for the functions which are not part of the API and are supposedly for internal use only.</source>
          <target state="translated">内部関数を文書化し、それらからリファレンスマニュアルを自動的に作成する取り組みが行われています&lt;a href=&quot;perlapi&quot;&gt;。perlapi&lt;/a&gt;は、XSライターが利用できるすべての関数を詳しく説明するマニュアルの1つです。&lt;a href=&quot;perlintern&quot;&gt;perlintern&lt;/a&gt;は、APIの一部ではなく、内部での使用のみが想定される関数の自動生成マニュアルです。</target>
        </trans-unit>
        <trans-unit id="b109c22c8125d5fbc051e5882994774c0628f7aa" translate="yes" xml:space="preserve">
          <source>There's an example of this in &lt;a href=&quot;functions/crypt&quot;&gt;crypt&lt;/a&gt;). First, you put the terminal into &quot;no echo&quot; mode, then just read the password normally. You may do this with an old-style &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl()&lt;/a&gt;&lt;/code&gt; function, POSIX terminal control (see &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; or its documentation the Camel Book), or a call to the &lt;b&gt;stty&lt;/b&gt; program, with varying degrees of portability.</source>
          <target state="translated">これの例は&lt;a href=&quot;functions/crypt&quot;&gt;cryptにあります&lt;/a&gt;）。まず、端末を「エコーなし」モードにしてから、通常どおりパスワードを読み取ります。これは、旧式の &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl()&lt;/a&gt;&lt;/code&gt; 関数、POSIX端末制御（&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;またはそのドキュメント、Camel Bookを参照）、または移植性の程度が異なる&lt;b&gt;stty&lt;/b&gt;プログラムの呼び出しで行うことができます。</target>
        </trans-unit>
        <trans-unit id="e33a4a8215c89473473d7891ce0340be047dd1e2" translate="yes" xml:space="preserve">
          <source>There's an example of this in &lt;a href=&quot;perlfunc#crypt&quot;&gt;&quot;crypt&quot; in perlfunc&lt;/a&gt;. First, you put the terminal into &quot;no echo&quot; mode, then just read the password normally. You may do this with an old-style &lt;code&gt;ioctl()&lt;/code&gt; function, POSIX terminal control (see &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; or its documentation the Camel Book), or a call to the &lt;b&gt;stty&lt;/b&gt; program, with varying degrees of portability.</source>
          <target state="translated">&lt;a href=&quot;perlfunc#crypt&quot;&gt;perlfuncの「crypt」に&lt;/a&gt;この例があります。まず、端末を「エコーなし」モードにしてから、通常どおりパスワードを読み取ります。これは、古いスタイルの &lt;code&gt;ioctl()&lt;/code&gt; 関数、POSIXターミナルコントロール（&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;またはそのドキュメントであるCamel Bookを参照）、またはさまざまな程度の移植性を備えた&lt;b&gt;stty&lt;/b&gt;プログラムの呼び出しを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="1ee734c8b4d4a5b72b07450e993a31efdfcc81d2" translate="yes" xml:space="preserve">
          <source>There's an extraordinary number of people out there who don't appear to know anything about using the perl debugger, though they use the language every day. This is for them.</source>
          <target state="translated">毎日のようにperlデバッガを使っているのに、perlデバッガの使い方を何も知らないように見える人が異常に多いです。これは彼らのためのものです。</target>
        </trans-unit>
        <trans-unit id="36e675dcb566e351efbc0e3f85ec7104c90a083d" translate="yes" xml:space="preserve">
          <source>There's currently only one class that has a stable interface - CPAN::Shell. All commands that are available in the CPAN shell are methods of the class CPAN::Shell. The arguments on the commandline are passed as arguments to the method.</source>
          <target state="translated">現在、安定したインターフェイスを持つクラスは1つだけです-CPAN::Shell。CPAN シェルで利用できるすべてのコマンドは、クラス CPAN::Shell のメソッドです。コマンドライン上の引数は、メソッドの引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="f60d62cdc295d6cbdfb5f2a35e55c4e958719c10" translate="yes" xml:space="preserve">
          <source>There's even less need to distinguish between EBCDIC code pages, but to do so try looking at one or more of the characters that differ between them.</source>
          <target state="translated">EBCDICコードのページを区別する必要性はさらに少なくなりましたが、そのためには、1つまたは複数の異なる文字を見てみてください。</target>
        </trans-unit>
        <trans-unit id="241fd51f25450a5ab0b7ec2c19699d2410027de0" translate="yes" xml:space="preserve">
          <source>There's no builtin way to do this, but &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; has a couple of techniques to make it possible for the intrepid hacker.</source>
          <target state="translated">これを行う組み込みの方法はありませんが、&lt;a href=&quot;perlform&quot;&gt;perlformに&lt;/a&gt;は、大胆なハッカーがこれを可能にするためのいくつかのテクニックがあります。</target>
        </trans-unit>
        <trans-unit id="5ace2a9bc7f6a90948438c072e0ce5f8cdc2b9bc" translate="yes" xml:space="preserve">
          <source>There's no feedback from this, but you can see what breakpoints are set by using the list 'L' command:</source>
          <target state="translated">これによるフィードバックはありませんが、リスト'L'コマンドでどのようなブレークポイントが設定されているかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="f521ff0638ee964aa0ea31d64e9248f45119c41c" translate="yes" xml:space="preserve">
          <source>There's no solution for this problem other than making the custom engine understand a construct like &lt;code&gt;(?:)&lt;/code&gt;.</source>
          <target state="translated">カスタムエンジンに &lt;code&gt;(?:)&lt;/code&gt; のような構造を理解させる以外に、この問題の解決策はありません。</target>
        </trans-unit>
        <trans-unit id="f42438ddafc8a1bac998273822622081c6567570" translate="yes" xml:space="preserve">
          <source>There's no strong security layer in CPAN.pm. CPAN.pm helps you to install foreign, unmasked, unsigned code on your machine. We compare to a checksum that comes from the net just as the distribution file itself. But we try to make it easy to add security on demand:</source>
          <target state="translated">CPAN.pmには強力なセキュリティ層がありません。CPAN.pmは、あなたのマシンに外国の、マスクされていない、署名されていないコードをインストールするのに役立ちます。私たちは、配布ファイル自体と同じようにネットから来るチェックサムと比較します。しかし、必要に応じて簡単にセキュリティを追加できるようにしています。</target>
        </trans-unit>
        <trans-unit id="794fc83a38998696363c5b95bfbda5c120c0de13" translate="yes" xml:space="preserve">
          <source>There's no way to tell if a &lt;code&gt;char *&lt;/code&gt; or &lt;code&gt;U8 *&lt;/code&gt; string is UTF-8 or not. But you can tell if an SV is to be treated as UTF-8 by calling &lt;code&gt;DO_UTF8&lt;/code&gt; on it, after stringifying it with &lt;code&gt;SvPV&lt;/code&gt; or a similar macro. And, you can tell if SV is actually UTF-8 (even if it is not to be treated as such) by looking at its &lt;code&gt;SvUTF8&lt;/code&gt; flag (again after stringifying it). Don't forget to set the flag if something should be UTF-8. Treat the flag as part of the PV, even though it's not -- if you pass on the PV to somewhere, pass on the flag too.</source>
          <target state="translated">&lt;code&gt;char *&lt;/code&gt; または &lt;code&gt;U8 *&lt;/code&gt; 文字列がUTF-8かどうかを判別する方法はありません。ただし、 &lt;code&gt;SvPV&lt;/code&gt; または類似のマクロで文字列化した後、 &lt;code&gt;DO_UTF8&lt;/code&gt; を呼び出すことで、SVをUTF-8として扱うかどうかを判断できます。また、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグを（文字列化した後）調べることで、SVが実際にUTF-8であるかどうかを判断できます（そのように扱わない場合でも）。 UTF-8にする必要がある場合は、フラグを設定することを忘れないでください。フラグをPVの一部として扱いますが、PVの一部ではありません。PVをどこかに渡す場合は、フラグも渡します。</target>
        </trans-unit>
        <trans-unit id="dcc25cfc8a3ec732d1d2283e554b506992b75eb5" translate="yes" xml:space="preserve">
          <source>There's not a single way to run code in the background so you don't have to wait for it to finish before your program moves on to other tasks. Process management depends on your particular operating system, and many of the techniques are covered in &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;.</source>
          <target state="translated">バックグラウンドでコードを実行する方法は1つではないため、プログラムが他のタスクに移る前に、コードが完了するのを待つ必要はありません。プロセス管理は特定のオペレーティングシステムに依存し、多くの手法は&lt;a href=&quot;perlipc&quot;&gt;perlipcで&lt;/a&gt;カバーされています。</target>
        </trans-unit>
        <trans-unit id="d2aa5e3dbb927bd52349be7be623e623e64f5bf0" translate="yes" xml:space="preserve">
          <source>There's now some new C code that's been added to the .xs file. The purpose of the &lt;code&gt;constant&lt;/code&gt; routine is to make the values that are #define'd in the header file accessible by the Perl script (by calling either &lt;code&gt;TESTVAL&lt;/code&gt; or &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt; ). There's also some XS code to allow calls to the &lt;code&gt;constant&lt;/code&gt; routine.</source>
          <target state="translated">.xsファイルに追加された新しいCコードがいくつかあります。 &lt;code&gt;constant&lt;/code&gt; ルーチンの目的は、ヘッダーファイルで#defineされた値をPerlスクリプトで（ &lt;code&gt;TESTVAL&lt;/code&gt; または &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt; ）アクセスできるようにすることです。 &lt;code&gt;constant&lt;/code&gt; ルーチンへの呼び出しを許可するXSコードもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="31087344a4d97cb3b80b7f78b63485fff944c0b5" translate="yes" xml:space="preserve">
          <source>There's now some new C code that's been added to the .xs file. The purpose of the &lt;code&gt;constant&lt;/code&gt; routine is to make the values that are #define'd in the header file accessible by the Perl script (by calling either &lt;code&gt;TESTVAL&lt;/code&gt; or &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt;). There's also some XS code to allow calls to the &lt;code&gt;constant&lt;/code&gt; routine.</source>
          <target state="translated">.xsファイルに追加された新しいCコードがいくつかあります。 &lt;code&gt;constant&lt;/code&gt; ルーチンの目的は、ヘッダーファイルで#defineされた値にPerlスクリプトからアクセスできるようにすることです（ &lt;code&gt;TESTVAL&lt;/code&gt; または &lt;code&gt;&amp;amp;Mytest2::TESTVAL&lt;/code&gt; いずれかを呼び出すことによって）。 &lt;code&gt;constant&lt;/code&gt; ルーチンの呼び出しを可能にするXSコードもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="e3ac8386164e4284b824a87f18c211196212c066" translate="yes" xml:space="preserve">
          <source>There's one fine point I skipped. Line 5 is unnecessary, and we can get rid of it.</source>
          <target state="translated">1点だけ細かいところを飛ばしてしまいました。5行目は不要なので省略します。</target>
        </trans-unit>
        <trans-unit id="f039a4fa9d9f10c8752271acf6c5252496665e47" translate="yes" xml:space="preserve">
          <source>There's one more item to add to this list. Do &lt;b&gt;not&lt;/b&gt; export variable names. Just because &lt;code&gt;Exporter&lt;/code&gt; lets you do that, it does not mean you should.</source>
          <target state="translated">このリストに追加するアイテムがもう1つあります。変数名&lt;b&gt;は&lt;/b&gt;エクスポートし&lt;b&gt;ないで&lt;/b&gt;ください。理由だけで &lt;code&gt;Exporter&lt;/code&gt; 、あなたがそれを行うことができます、それはあなたがすべきという意味ではありません。</target>
        </trans-unit>
        <trans-unit id="ae8f51d8071cfe43c76f4dc0a54e230b2757479f" translate="yes" xml:space="preserve">
          <source>There's plenty more to Maketext than described above -- for example, there's the details of how language tags (&quot;en-US&quot;, &quot;i-pwn&quot;, &quot;fi&quot;, etc.) or locale IDs (&quot;en_US&quot;) interact with actual module naming (&quot;BogoQuery/Locale/en_us.pm&quot;), and what magic can ensue; there's the details of how to record (and possibly negotiate) what character encoding Maketext will return text in (UTF8? Latin-1? KOI8?). There's the interesting fact that Maketext is for localization, but nowhere actually has a &quot;&lt;code&gt;use locale;&lt;/code&gt;&quot; anywhere in it. For the curious, there's the somewhat frightening details of how I actually implement something like data inheritance so that searches across modules' %Lexicon hashes can parallel how Perl implements method inheritance.</source>
          <target state="translated">Maketextには、上記以外にもたくさんのことがあります。たとえば、言語タグ（ &quot;en-US&quot;、 &quot;i-pwn&quot;、 &quot;fi&quot;など）またはロケールID（ &quot;en_US&quot;）がどのように相互作用するかについての詳細があります。実際のモジュールの命名（ &quot;BogoQuery / Locale / en_us.pm&quot;）、およびどのような魔法が続く可能性があるか。 Maketextがテキストを返す文字エンコード（UTF8？ラテン-1？KOI8？）を記録する（そして場合によってはネゴシエートする）方法の詳細があります。 Maketextがローカリゼーション用であるという興味深い事実があり &lt;code&gt;use locale;&lt;/code&gt; が、実際にはどこにも「ロケールの使用」がありません。不思議なことに、モジュールの％Lexiconハッシュ全体の検索が、Perlがメソッド継承を実装する方法と並行できるように、データ継承のようなものを実際に実装する方法のやや恐ろしい詳細があります。</target>
        </trans-unit>
        <trans-unit id="3157833531a4041a2d11a3ede90a818b20eec8a5" translate="yes" xml:space="preserve">
          <source>There's three possible options: arm-linux-androideabi for ARM, mipsel-linux-android for MIPS, and simply x86 for x86. As of 2014, most Android devices run on ARM, so that is generally a safe bet.</source>
          <target state="translated">ARMならarm-linux-androideabi、MIPSならmipsel-linux-android、x86ならsimply x86の3つの選択肢が考えられます。2014年現在、ほとんどのAndroid端末はARMで動作しているので、一般的にはこれが無難です。</target>
        </trans-unit>
        <trans-unit id="23be60d3d8e40781087cd39d472decaae39f70d3" translate="yes" xml:space="preserve">
          <source>There, &quot;=shazbot&quot; will be parsed as a Pod command &quot;shazbot&quot;, not as a data paragraph &quot;=shazbot\n&quot;. However, you can express a data paragraph consisting of &quot;=shazbot\n&quot; using this code:</source>
          <target state="translated">ここでは、&quot;=shazbot &quot;は、データパラグラフ&quot;=shazbotn &quot;ではなく、Podコマンド &quot;shazbot &quot;として解析されます。しかし、このコードを使えば、&quot;=shazbot\n &quot;からなるデータパラグラフを表現することができます。</target>
        </trans-unit>
        <trans-unit id="d934ecae0b30d1837eb15a99e36faf1a189e093b" translate="yes" xml:space="preserve">
          <source>There, the &quot;=begin html&quot;...&quot;=end html&quot; region is nested inside the larger &quot;=begin :biblio&quot;...&quot;=end :biblio&quot; region. Note that the content of the &quot;=begin html&quot;...&quot;=end html&quot; region is data paragraph(s), because the immediately containing region's identifier (&quot;html&quot;)</source>
          <target state="translated">そこでは、&quot;=begin html&quot;...&quot;=end html &quot;領域は、より大きな&quot;=begin :biblio&quot;...&quot;=end :biblio &quot;領域の中に入れ子になっています。なお、&quot;=begin html&quot;...&quot;=end html &quot;領域の内容はデータパラグラフである。</target>
        </trans-unit>
        <trans-unit id="4c11e16e3b4c4d1c6c6291b739425f3d103ebc32" translate="yes" xml:space="preserve">
          <source>Therefor, we recommend to only use &lt;code&gt;lynx&lt;/code&gt; as a last resort. This is why it is at the back of our list of methods to try as well.</source>
          <target state="translated">したがって、最後の手段として &lt;code&gt;lynx&lt;/code&gt; のみを使用することをお勧めします。これが、試行するメソッドのリストの最後にある理由です。</target>
        </trans-unit>
        <trans-unit id="22f5648477726ba3de08027c1e14282ca2d62678" translate="yes" xml:space="preserve">
          <source>Therefore it is best to avoid &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; . Instead use &lt;code&gt;@CARP_NOT&lt;/code&gt; , &lt;code&gt;%Carp::Internal&lt;/code&gt; and &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; .</source>
          <target state="translated">したがって、 &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; を使用しないことをお勧めします。代わりに、 &lt;code&gt;@CARP_NOT&lt;/code&gt; 、 &lt;code&gt;%Carp::Internal&lt;/code&gt; および &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51f60bccfa776ffe69d8f053cbc128c1c25657ab" translate="yes" xml:space="preserve">
          <source>Therefore it is best to avoid &lt;code&gt;$Carp::CarpLevel&lt;/code&gt;. Instead use &lt;code&gt;@CARP_NOT&lt;/code&gt;, &lt;code&gt;%Carp::Internal&lt;/code&gt; and &lt;code&gt;%Carp::CarpInternal&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; 避けるのが最善です。代わりに、 &lt;code&gt;@CARP_NOT&lt;/code&gt; 、 &lt;code&gt;%Carp::Internal&lt;/code&gt; 、および &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee230bfa80dc9a35487630711b69781b4de0480c" translate="yes" xml:space="preserve">
          <source>Therefore modules that can install from CPAN to the core library must make sure not to call this pragma when they have done so. Generally this means that the exact logic from the installer must be mirrored inside the module. E.g.:</source>
          <target state="translated">したがって、CPAN からコアライブラリにインストールできるモジュールは、その際にこの pragma を呼び出さないようにしなければなりません。一般的に、これはインストーラからの正確なロジックをモジュール内でミラーリングしなければならないことを意味します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6d0e80030071251142bc856e7654aae9ae473e69" translate="yes" xml:space="preserve">
          <source>Therefore we can use the &lt;code&gt;O_FILES&lt;/code&gt; variable to tell MakeMaker to use these objects into the shared library.</source>
          <target state="translated">したがって、 &lt;code&gt;O_FILES&lt;/code&gt; 変数を使用して、これらのオブジェクトを共有ライブラリに使用するようMakeMakerに指示できます。</target>
        </trans-unit>
        <trans-unit id="bc549460f9ec0f5ba049505f7c5226ae9e2f8140" translate="yes" xml:space="preserve">
          <source>Therefore, if you make changes to $ENV{TZ} from inside a thread other than the main thread then those changes will not be seen by strftime if you subsequently call that with the %Z formatting code. You must change $ENV{TZ} in the main thread to have the desired effect in this case (and you must also call _tzset() in the main thread to register the environment change).</source>
          <target state="translated">したがって、メイン・スレッド以外のスレッドの内部から $ENV{TZ}に変更を加えた場合、その後に %Z の書式設定コードを使用してそのスレッドを呼び出しても、その変更は strftime には表示されません。この場合は、メインスレッド内で $ENV{TZ}を変更する必要があります (また、メインスレッド内で _tzset()を呼び出して環境の変更を登録する必要があります)。</target>
        </trans-unit>
        <trans-unit id="a9f8fba915c890e8c346b81a259121ea682217ff" translate="yes" xml:space="preserve">
          <source>Therefore, if you want your scripts to be able to run on all versions of Perl, you should call &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; explicitly and not rely on automatic closing.</source>
          <target state="translated">したがって、スクリプトをすべてのバージョンのPerlで実行できるようにするには、自動クローズに依存せずに、 &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; を明示的に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="954446d1274139a67133d250b76f105e02594120" translate="yes" xml:space="preserve">
          <source>Therefore, if you want your scripts to be able to run on all versions of Perl, you should call &lt;code&gt;close&lt;/code&gt; explicitly and not rely on automatic closing.</source>
          <target state="translated">したがって、スクリプトをすべてのバージョンのPerlで実行できるようにする場合は、自動クローズに依存せずに、明示的に &lt;code&gt;close&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b60bd02288d8270eaef5b4fd58dd4835333cea91" translate="yes" xml:space="preserve">
          <source>Therefore, populate such variables &lt;b&gt;after&lt;/b&gt; declaring them as shared. (Scalar and scalar refs are not affected by this problem.)</source>
          <target state="translated">したがって、そのような変数は、共有されていると宣言して&lt;b&gt;から&lt;/b&gt;入力してください。（スカラーおよびスカラー参照は、この問題の影響を受けません。）</target>
        </trans-unit>
        <trans-unit id="fd4c5f1975f02e1f013464b5926b49a349d976cd" translate="yes" xml:space="preserve">
          <source>Therefore, recursion should normally be avoided, but is nonetheless supported.</source>
          <target state="translated">したがって、再帰は通常は避けるべきですが、それにもかかわらずサポートされています。</target>
        </trans-unit>
        <trans-unit id="db068f38c67a6942c06b6242bd31cfce066e66c2" translate="yes" xml:space="preserve">
          <source>Therefore, when both -f and -t are omitted, &lt;b&gt;piconv&lt;/b&gt; just acts like &lt;b&gt;cat&lt;/b&gt;.</source>
          <target state="translated">したがって、-fと-tの両方を省略した場合、&lt;b&gt;piconvは&lt;/b&gt;単に&lt;b&gt;catの&lt;/b&gt;ように動作します。</target>
        </trans-unit>
        <trans-unit id="2f61899aa2182fe38363f4a728d368f7dbd80080" translate="yes" xml:space="preserve">
          <source>Therefore, when serializing hooks are involved,</source>
          <target state="translated">そのため、フックのシリアライズが絡んでくると</target>
        </trans-unit>
        <trans-unit id="083d92ff42dd743db0e3ca76319637c407df0e2d" translate="yes" xml:space="preserve">
          <source>Therefore, you should bless objects before sharing them.</source>
          <target state="translated">そのため、物を共有する前に祝福しましょう。</target>
        </trans-unit>
        <trans-unit id="c563bb79b9bbcc9436e0f964c49bd1fc0638d285" translate="yes" xml:space="preserve">
          <source>These #vars represent opcode properties that you may want as part of your rendering. The '#' is intended as a private sigil; a #var's value is interpolated into the style-line, much like &quot;read $this&quot;.</source>
          <target state="translated">これらの #var は、レンダリングの一部として必要なオペコードのプロパティを表しています。'#' はプライベートなシグルとして意図されています;#var の値は &quot;read $this&quot; のようにスタイルラインに補間されます。</target>
        </trans-unit>
        <trans-unit id="0e7355ac11ba52ff51227da22556bcbc5b08758c" translate="yes" xml:space="preserve">
          <source>These ID's are unique enough for most purposes. For identical ids to be generated you must have 2 processes with the same PID generate IDs at the same time with the same current state of the incrementing integer. This is a perfectly reasonable thing to expect to happen across multiple machines, but is quite unlikely to happen on one machine.</source>
          <target state="translated">これらのIDは、ほとんどの目的には十分にユニークです。同一のIDを生成するには、同じPIDを持つ2つのプロセスが同時にIDを生成し、インクリメントされる整数の現在の状態が同じでなければなりません。これは複数のマシンにまたがって発生することを期待するのは完全に合理的なことですが、1台のマシンで発生することはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="4fb65d165e3bae5f5ca82f785cf62dfbdc24692e" translate="yes" xml:space="preserve">
          <source>These JSON atoms become &lt;code&gt;JSON::PP::true&lt;/code&gt; and &lt;code&gt;JSON::PP::false&lt;/code&gt;, respectively. They are overloaded to act almost exactly like the numbers &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;. You can check whether a scalar is a JSON boolean by using the &lt;code&gt;JSON::PP::is_bool&lt;/code&gt; function.</source>
          <target state="translated">これらのJSONアトムはそれぞれ &lt;code&gt;JSON::PP::true&lt;/code&gt; と &lt;code&gt;JSON::PP::false&lt;/code&gt; になります。それらは、数値 &lt;code&gt;1&lt;/code&gt; および &lt;code&gt;0&lt;/code&gt; とほぼ同じように動作するようにオーバーロードされています。 &lt;code&gt;JSON::PP::is_bool&lt;/code&gt; 関数を使用して、スカラーがJSONブール値であるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="8f188e4230a9960392a0f6434bcd9cdb687b2105" translate="yes" xml:space="preserve">
          <source>These actually run the tests, analogous to the functions in Test::More.</source>
          <target state="translated">これらは実際にテストを実行するもので、Test::More の関数に似ています。</target>
        </trans-unit>
        <trans-unit id="47b609b8bdbe47393836decca9fbf56107eb37fe" translate="yes" xml:space="preserve">
          <source>These all match a single codepoint with the given property. Use &lt;code&gt;\P&lt;/code&gt; in place of &lt;code&gt;\p&lt;/code&gt; to match one codepoint lacking that property.</source>
          <target state="translated">これらはすべて、特定のプロパティを持つ単一のコードポイントに一致します。 &lt;code&gt;\p&lt;/code&gt; 代わりに &lt;code&gt;\P&lt;/code&gt; を使用して、そのプロパティがない1つのコードポイントに一致させます。</target>
        </trans-unit>
        <trans-unit id="14b0e821748bdb374700b2c0b377f04dafebe4c2" translate="yes" xml:space="preserve">
          <source>These all might have problems handling infinity right.</source>
          <target state="translated">これらはすべて、無限大の権利の処理に問題があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f193401280223b6d90ef40113a3483800172634b" translate="yes" xml:space="preserve">
          <source>These are Locale::Maketext's assumptions about the class hierarchy formed by all your language classes:</source>
          <target state="translated">これらは、すべての言語クラスによって形成されるクラス階層に関するLocale::Maketextの仮定です。</target>
        </trans-unit>
        <trans-unit id="7d93f149b189abdf70833601535a585584795222" translate="yes" xml:space="preserve">
          <source>These are Perl bindings for the Gtk toolkit ( &lt;a href=&quot;http://www.gtk.org&quot;&gt;http://www.gtk.org&lt;/a&gt; ). The interface changed significantly between versions 1 and 2 so they have separate Perl modules. It runs under Unix, Win32 and Mac OS X (currently it requires an X server on Mac OS, but a 'native' port is underway), and the widgets look the same on every platform: i.e., they don't match the native widgets. As with Wx, the Perl bindings follow the C API closely, and the documentation requires you to read the C documentation to understand it.</source>
          <target state="translated">これらは、Gtkツールキット（&lt;a href=&quot;http://www.gtk.org&quot;&gt;http://www.gtk.org&lt;/a&gt;）用のPerlバインディングです。バージョン1と2の間でインターフェースが大幅に変更されたため、Perlモジュールが別々になっています。 Unix、Win32、Mac OS X（現在、Mac OSではXサーバーが必要ですが、「ネイティブ」ポートが進行中です）で実行され、ウィジェットはすべてのプラットフォームで同じに見えます。つまり、ウィジェットはネイティブと一致しませんウィジェット。 Wxの場合と同様に、PerlバインディングはC APIに厳密に従っており、ドキュメントではそれを理解するためにCドキュメントを読む必要があります。</target>
        </trans-unit>
        <trans-unit id="06cca08d46609adb849cad691c3d195ff57274e9" translate="yes" xml:space="preserve">
          <source>These are a few notes describing features peculiar to Plan 9 Perl. As such, it is not intended to be a replacement for the rest of the Perl 5 documentation (which is both copious and excellent). If you have any questions to which you can't find answers in these man pages, contact Luther Huffman at lutherh@stratcom.com and we'll try to answer them.</source>
          <target state="translated">これらは Plan 9 Perl に特有の機能を記述したいくつかのメモです。このように、Perl 5 の残りのドキュメント (豊富で優れたものです)の代わりになることを意図したものではありません。これらのマニュアル・ページに答えが見つからない質問がある場合は、Luther Huffman(lutherh@stratcom.com)に連絡してください。</target>
        </trans-unit>
        <trans-unit id="035e487505e2bd7d2a574e14eebe3b30a69fa1a9" translate="yes" xml:space="preserve">
          <source>These are a hotchpotch of opcodes still waiting to be considered</source>
          <target state="translated">これらは、まだ考慮されるのを待っているオペコードのホットポットです。</target>
        </trans-unit>
        <trans-unit id="7deedf4836f35aa67f0c08100f5d4987addf81e4" translate="yes" xml:space="preserve">
          <source>These are a record of the hubs an event passes through. Most recent hub is the first one in the list.</source>
          <target state="translated">イベントが通過したハブの記録です。最新のハブがリストの最初のハブになります。</target>
        </trans-unit>
        <trans-unit id="ab597ea19704a4092bef6ea8610d0145fc3acd27" translate="yes" xml:space="preserve">
          <source>These are all &quot;getters&quot; which return the data set for these attributes during object construction.</source>
          <target state="translated">これらはすべて、オブジェクトの構築中にこれらの属性のデータセットを返す「ゲッター」です。</target>
        </trans-unit>
        <trans-unit id="99670b79a346a2bf9e4cb33dd6b8ba8a01dd0f06" translate="yes" xml:space="preserve">
          <source>These are all imported from &lt;a href=&quot;Test2::Util::Facets2Legacy&quot;&gt;Test2::Util::Facets2Legacy&lt;/a&gt;, see that module or &lt;a href=&quot;Test2::Event&quot;&gt;Test2::Event&lt;/a&gt; for documentation on what they do.</source>
          <target state="translated">これらはすべて&lt;a href=&quot;Test2::Util::Facets2Legacy&quot;&gt;Test2 :: Util :: Facets2Legacy&lt;/a&gt;からインポートされます。それらの機能に関するドキュメントについては、そのモジュールまたは&lt;a href=&quot;Test2::Event&quot;&gt;Test2 :: Event&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c6ad141ea95625d5f83dc60a511981417685e463" translate="yes" xml:space="preserve">
          <source>These are also the typical steps involved in writing a computer program. This makes perfect sense, because regular expressions are essentially programs written in a little computer language that specifies patterns.</source>
          <target state="translated">これらは、コンピュータプログラムを書く際の典型的なステップでもあります。なぜなら、正規表現は基本的にパターンを指定する小さなコンピュータ言語で書かれたプログラムだからです。</target>
        </trans-unit>
        <trans-unit id="c614a56da53c8268e03927a0382855aa589c9ffe" translate="yes" xml:space="preserve">
          <source>These are alternate syntaxes for &lt;code&gt;decode('utf8', ...)&lt;/code&gt; and &lt;code&gt;encode('utf8',
...)&lt;/code&gt; .</source>
          <target state="translated">これらは、 &lt;code&gt;decode('utf8', ...)&lt;/code&gt; および &lt;code&gt;encode('utf8', ...)&lt;/code&gt; 代替構文です。</target>
        </trans-unit>
        <trans-unit id="1c836f0954439914f97915361085c611a4a6522e" translate="yes" xml:space="preserve">
          <source>These are alternate syntaxes for &lt;code&gt;decode('utf8', ...)&lt;/code&gt; and &lt;code&gt;encode('utf8', ...)&lt;/code&gt;. Do not use these functions for data exchange. Instead use &lt;code&gt;decode('UTF-8', ...)&lt;/code&gt; and &lt;code&gt;encode('UTF-8', ...)&lt;/code&gt;; see &lt;a href=&quot;#What%27s-the-difference-between-UTF-8-and-utf8%3F&quot;&gt;&quot;What's the difference between UTF-8 and utf8?&quot;&lt;/a&gt; below.</source>
          <target state="translated">これらは、 &lt;code&gt;decode('utf8', ...)&lt;/code&gt; および &lt;code&gt;encode('utf8', ...)&lt;/code&gt; 代替構文です。これらの機能をデータ交換に使用しないでください。代わりに、 &lt;code&gt;decode('UTF-8', ...)&lt;/code&gt; と &lt;code&gt;encode('UTF-8', ...)&lt;/code&gt; 。&lt;a href=&quot;#What%27s-the-difference-between-UTF-8-and-utf8%3F&quot;&gt;「UTF-8とutf8の違いは何ですか？」を&lt;/a&gt;参照してください。未満。</target>
        </trans-unit>
        <trans-unit id="a504c2130962ba4555e63c517df7cfb6c3415a56" translate="yes" xml:space="preserve">
          <source>These are based on what command.com does on Win98. They may be wrong for other Windows shells, I don't know.</source>
          <target state="translated">これらは、command.com が Win98 で行うことをベースにしています。他のWindowsシェルでは間違っているかもしれませんが、私は知りません。</target>
        </trans-unit>
        <trans-unit id="2c07d55f7a2a925e22fec82104bd39d3cabc4301" translate="yes" xml:space="preserve">
          <source>These are called mid-endian, middle-endian, mixed-endian, or just weird.</source>
          <target state="translated">これらをミッドエンディアン、ミドルエンディアン、ミックスエンディアン、ただの変人と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="e533ef7489d17854e05259c84118c5f3b5f226af" translate="yes" xml:space="preserve">
          <source>These are called whenever a context is initialized. That means when a new instance is created. These hooks are &lt;b&gt;NOT&lt;/b&gt; called every time something requests a context, just when a new one is created.</source>
          <target state="translated">これらは、コンテキストが初期化されるたびに呼び出されます。これは、新しいインスタンスが作成されるときを意味します。これらのフックは、新しいフックが作成されたときだけでなく、何かがコンテキストを要求するたびに呼び出されるわけではあり&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="c0e21c37ef5bc936dc62910a2c3001a6fca894bc" translate="yes" xml:space="preserve">
          <source>These are called whenever a context is released. That means when the last reference to the instance is about to be destroyed. These hooks are &lt;b&gt;NOT&lt;/b&gt; called every time &lt;code&gt;$ctx-&amp;gt;release&lt;/code&gt; is called.</source>
          <target state="translated">これらは、コンテキストが解放されるたびに呼び出されます。これは、インスタンスへの最後の参照が破棄されようとしていることを意味します。これらのフックは、 &lt;code&gt;$ctx-&amp;gt;release&lt;/code&gt; が呼び出されるたびに呼び出されるわけではあり&lt;b&gt;ません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="3a9105b34a20a7fdd4e6d997e3a1e1ad31f3f321" translate="yes" xml:space="preserve">
          <source>These are covered in the following section.</source>
          <target state="translated">これらについては、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="7333c3db6eebc965b9acc79a29ea8b8aa13ff1d3" translate="yes" xml:space="preserve">
          <source>These are derived by using &lt;code&gt;strftime()&lt;/code&gt;, and not all versions of that function know about them. &lt;code&gt;&quot;&quot;&lt;/code&gt; is returned for these on such systems.</source>
          <target state="translated">これらは &lt;code&gt;strftime()&lt;/code&gt; を使用して導出され、その関数のすべてのバージョンがそれらを認識しているわけではありません。このようなシステムでは、これらに対して &lt;code&gt;&quot;&quot;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="543fcf9df34b75f159b226a9706c32a67f612f3d" translate="yes" xml:space="preserve">
          <source>These are effectively no-ops.</source>
          <target state="translated">これらは事実上のノーオペです。</target>
        </trans-unit>
        <trans-unit id="f6dbfbbee534ca87c61eabe600b034f42390dde5" translate="yes" xml:space="preserve">
          <source>These are equivalent</source>
          <target state="translated">これらは等価です。</target>
        </trans-unit>
        <trans-unit id="2c34193d065093cc77699a0d9ca713a7565b5a4e" translate="yes" xml:space="preserve">
          <source>These are fetched from one or more mirrored CPAN (Comprehensive Perl Archive Network) sites and unpacked in a dedicated directory.</source>
          <target state="translated">これらは、1つ以上のミラーリングされたCPAN (Comprehensive Perl Archive Network)サイトから取得され、専用のディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="1218c4eafb2ac24b7f5a6bfc47e38d53cda6dbb8" translate="yes" xml:space="preserve">
          <source>These are fprintf()/vfprintf() equivalents.</source>
          <target state="translated">これらは fprintf()/vfprintf()と同等のものです。</target>
        </trans-unit>
        <trans-unit id="c9080846b04ed2aaef61ea34f53f7101d2c5f347" translate="yes" xml:space="preserve">
          <source>These are functions for searching through directory trees doing work on each file found similar to the Unix</source>
          <target state="translated">これらの機能は、ディレクトリツリーを検索するための機能で、Unix の</target>
        </trans-unit>
        <trans-unit id="82d3c39fd0ecabf1c8dc2de9284d7be1c98f1d46" translate="yes" xml:space="preserve">
          <source>These are general guidelines for how to write POD documentation for Perl scripts and modules, based on general guidelines for writing good UNIX man pages. All of these guidelines are, of course, optional, but following them will make your documentation more consistent with other documentation on the system.</source>
          <target state="translated">これらは、優れた UNIX man ページを書くための一般的なガイドラインに基づいた、Perl スクリプトやモジュールのための POD ドキュメンテーションの書き方の一般的なガイドラインです。もちろん、これらのガイドラインはすべて任意ですが、これらのガイドラインに従うことで、システム上の他のドキュメントとの整合性を高めることができます。</target>
        </trans-unit>
        <trans-unit id="a253bda8befb626a9c36c82d1823fdc871bc54a9" translate="yes" xml:space="preserve">
          <source>These are hooks that allow you to add custom behavior to actions taken by Test2 and tools built on top of it.</source>
          <target state="translated">これらは、Test2やその上に構築されたツールで実行されるアクションにカスタム動作を追加できるフックです。</target>
        </trans-unit>
        <trans-unit id="dad0e81d2d1dfbeb7b354f138de6b73ae95d9158" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl from source. This version of Perl requires the dynamic linking support that is found in OpenVOS Release 17.1 and thus is not supported on OpenVOS Release 17.0 or earlier releases.</source>
          <target state="translated">これらは、ソースから Perl をビルドするための手順です。このバージョンのPerlは、OpenVOS Release 17.1で見られる動的リンクのサポートを必要とするため、OpenVOS Release 17.0以前のリリースではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c8591b5e35cdacaa99ac7aebf4d9655f41e44d08" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl under DOS (or w??), using DJGPP v2.03 or later. Under w95 long filenames are supported.</source>
          <target state="translated">DJGPP v2.03 以降を使用して、DOS (または w?)上で Perl をビルドするための手順です。w95以下では長いファイル名がサポートされています。</target>
        </trans-unit>
        <trans-unit id="1ebba6a1db0c9a0e274e92574c949eaf7a4b8fb7" translate="yes" xml:space="preserve">
          <source>These are instructions for building Perl under Windows 2000 and later.</source>
          <target state="translated">Windows 2000以降でPerlを構築するための手順です。</target>
        </trans-unit>
        <trans-unit id="56039c5fbea93b2739212ecaf27c30cc3edfb9c5" translate="yes" xml:space="preserve">
          <source>These are intended to be services performed by the clients of this API.</source>
          <target state="translated">これらは、このAPIのクライアントによって実行されるサービスを意図しています。</target>
        </trans-unit>
        <trans-unit id="6d5e58ad94dd8e12f40343c4fe00cb855a20e455" translate="yes" xml:space="preserve">
          <source>These are just the most common definitions of &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt; in Perl. There may well be others. For example, on an EBCDIC implementation such as z/OS (OS/390) or OS/400 (using the ILE, the PASE is ASCII-based) the above material is similar to &quot;Unix&quot; but the code numbers change:</source>
          <target state="translated">これらは、Perl での &lt;code&gt;\n&lt;/code&gt; と &lt;code&gt;\r&lt;/code&gt; の最も一般的な定義です。他にもあるかもしれません。たとえば、z / OS（OS / 390）またはOS / 400（ILEを使用し、PASEはASCIIベース）などのEBCDIC実装では、上記の内容は「Unix」に似ていますが、コード番号が変更されています。</target>
        </trans-unit>
        <trans-unit id="e2a1ebead9f267c39fe9da94bb4791dac090d0bc" translate="yes" xml:space="preserve">
          <source>These are low-level functions to extract and use capabilities from a terminal capability (termcap) database.</source>
          <target state="translated">これらは、ターミナルケイパビリティ(termcap)データベースからケイパビリティを抽出して使用するための低レベルの関数です。</target>
        </trans-unit>
        <trans-unit id="6e1b104453fcd9be9aa03bca5a6390babe809d8b" translate="yes" xml:space="preserve">
          <source>These are methods that you may find it handy to use, generally from %Lexicon routines of yours (whether expressed as Bracket Notation or not).</source>
          <target state="translated">これらのメソッドは、一般的にはあなたの %Lexicon ルーチン (ブラケット記法で表現されているかどうかにかかわらず)から使用すると便利だと思われるメソッドです。</target>
        </trans-unit>
        <trans-unit id="9a95859137ef50d66689fe259453639b6dce722a" translate="yes" xml:space="preserve">
          <source>These are methods which are used in the course of writing a test but are not themselves tests.</source>
          <target state="translated">これらはテストを書く過程で使用されるメソッドですが、それ自体はテストではありません。</target>
        </trans-unit>
        <trans-unit id="14859e3783966bf81d1767be73584f0ff1e6b683" translate="yes" xml:space="preserve">
          <source>These are methods which help writing cross-platform code.</source>
          <target state="translated">これらは、クロスプラットフォームのコードを書くのに役立つメソッドです。</target>
        </trans-unit>
        <trans-unit id="10fcdff63f0636b8e542860baaf4e1184f58638e" translate="yes" xml:space="preserve">
          <source>These are methods which produce make targets.</source>
          <target state="translated">メークターゲットを生成する方法です。</target>
        </trans-unit>
        <trans-unit id="10849203134f1b9b6877d6c9803884e2fb3562a9" translate="yes" xml:space="preserve">
          <source>These are modules that did not break, but had broken test suites that have since been fixed.</source>
          <target state="translated">これらのモジュールは、壊れてはいないが、テストスイートが壊れていたモジュールで、その後修正されています。</target>
        </trans-unit>
        <trans-unit id="5242bfa15c97f14acba2cd2d00dbeca39084930f" translate="yes" xml:space="preserve">
          <source>These are most easily explained from the bottom up.</source>
          <target state="translated">これらは、最も簡単に底辺から説明することができます。</target>
        </trans-unit>
        <trans-unit id="97c6eb63dac1e7db10f1e2e9276ff1ad9b5b7b24" translate="yes" xml:space="preserve">
          <source>These are not supplied by default, but must be explicitly imported. They are lexically scoped.</source>
          <target state="translated">これらはデフォルトでは提供されていませんが、明示的にインポートする必要があります。これらは語彙的にスコープされています。</target>
        </trans-unit>
        <trans-unit id="eff3d42df745b107b6d797477e3d4e7f8d24cab3" translate="yes" xml:space="preserve">
          <source>These are not the very basics, though. It is assumed that you already know the difference between bytes and characters, and realise (and accept!) that there are many different character sets and encodings, and that your program has to be explicit about them. Recommended reading is &quot;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&quot; by Joel Spolsky, at &lt;a href=&quot;http://joelonsoftware.com/articles/Unicode.html&quot;&gt;http://joelonsoftware.com/articles/Unicode.html&lt;/a&gt;.</source>
          <target state="translated">ただし、これらは基本的なものではありません。あなたはすでにバイトと文字の違いを知っており、多くの異なる文字セットとエンコーディングがあり、プログラムがそれらについて明示的でなければならないことを理解（そして受け入れる！）していると想定しています。推奨される読み物は、&lt;a href=&quot;http://joelonsoftware.com/articles/Unicode.html&quot;&gt;http：&lt;/a&gt; //joelonsoftware.com/articles/Unicode.htmlにあるJoel Spolskyによる「Unicodeと文字セットについて絶対に確実に知っておく必要のある絶対的な最小値（言い訳なし！）」です。</target>
        </trans-unit>
        <trans-unit id="cd6ee1d320e203631c0d3d164abcb5a87fff3dcb" translate="yes" xml:space="preserve">
          <source>These are often used in macro definitions. Note that you can't return a value out of them.</source>
          <target state="translated">これらはマクロの定義でよく使われます。これらから値を返すことはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3cbc1741b6d34271e2ec1a26ca7d6418baa0ebb4" translate="yes" xml:space="preserve">
          <source>These are only present when &lt;code&gt;netorder&lt;/code&gt; is FALSE. These are the sizes of various C datatypes of the perl that created this image. These must match the current perl for the image to be readable by Storable.</source>
          <target state="translated">これらは、 &lt;code&gt;netorder&lt;/code&gt; がFALSEの場合にのみ存在します。これらは、このイメージを作成したperlのさまざまなCデータ型のサイズです。Storableでイメージを読み取るには、これらが現在のperlと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="920887e803f6cf14e09050db36f20df3c6ead9d1" translate="yes" xml:space="preserve">
          <source>These are only supported if your system has &amp;lt;</source>
          <target state="translated">これらは、システムに&amp;lt;</target>
        </trans-unit>
        <trans-unit id="140e31bd5bffd898fd2913825a2d2d23dcf95138" translate="yes" xml:space="preserve">
          <source>These are pairwise exclusive, i.e. compact or loose, vt or ascii.</source>
          <target state="translated">これらはペアワイズエクスクルーシブ、すなわち、コンパクトまたはルーズ、vtまたはアスキーです。</target>
        </trans-unit>
        <trans-unit id="ee44bfea63f0502e44e3769d9962bf8126742be7" translate="yes" xml:space="preserve">
          <source>These are passed in to your plugin's &lt;code&gt;load()&lt;/code&gt; class method (if it has one), along with a reference to the &lt;code&gt;App::Prove&lt;/code&gt; object that is invoking your plugin:</source>
          <target state="translated">これらは、プラグインの &lt;code&gt;load()&lt;/code&gt; クラスメソッド（存在する場合）に、プラグインを呼び出している &lt;code&gt;App::Prove&lt;/code&gt; オブジェクトへの参照とともに渡されます。</target>
        </trans-unit>
        <trans-unit id="0a54cca37ec252d12e0edbfcecfc7fffff46a74a" translate="yes" xml:space="preserve">
          <source>These are probematic. The C standard says that these should be considered punctuation in the C locale (and the POSIX standard defers to the C standard), and Unicode is generally considered a superset of the C locale. But Unicode has added an extra category, &quot;Symbol&quot;, and classifies these particular characters as being symbols. Most UTF-8 locales have them treated as punctuation, so that &lt;a href=&quot;http://man.he.net/man2/ispunct&quot;&gt;ispunct(2)&lt;/a&gt; returns non-zero for them. But a few locales have it return 0. Perl takes the first approach, not using &lt;code&gt;ispunct()&lt;/code&gt; at all (see &lt;a href=&quot;perlrecharclass#%5B5%5D&quot;&gt;Note [5] in perlrecharclass&lt;/a&gt;), and this message is raised to notify you that you are getting Perl's approach, not the locale's.</source>
          <target state="translated">これらは調査的です。 C標準では、これらはCロケールでは句読点と見なす必要があるとされており（POSIX標準はC標準に従います）、Unicodeは一般にCロケールのスーパーセットと見なされます。しかし、Unicodeは追加のカテゴリ「シンボル」を追加し、これらの特定の文字をシンボルとして分類しています。ほとんどのUTF-8ロケールでは、句読点として扱われるため、&lt;a href=&quot;http://man.he.net/man2/ispunct&quot;&gt;ispunct（2）&lt;/a&gt;はゼロ以外を返します。ただし、一部のロケールでは0が返さ&lt;a href=&quot;perlrecharclass#%5B5%5D&quot;&gt;れます。Perlはispunct &lt;/a&gt; &lt;code&gt;ispunct()&lt;/code&gt; をまったく使用せずに最初のアプローチを採用し（perlrecharclassの注[5]を参照）、このメッセージは、ロケールではなくPerlのアプローチを取得していることを通知するために発生します。 。</target>
        </trans-unit>
        <trans-unit id="87db38161fab9301a6c38e350a75487ce9dba0c7" translate="yes" xml:space="preserve">
          <source>These are readline issues and can only be fixed by studying readline configuration on your architecture and adjusting the referenced file accordingly. Please make a backup of the &lt;code&gt;/etc/inputrc&lt;/code&gt; or &lt;code&gt;~/.inputrc&lt;/code&gt; and edit them. Quite often harmless changes like uppercasing or lowercasing some arguments solves the problem.</source>
          <target state="translated">これらはreadlineの問題であり、アーキテクチャのreadline構成を調査し、それに応じて参照ファイルを調整することによってのみ修正できます。 &lt;code&gt;/etc/inputrc&lt;/code&gt; または &lt;code&gt;~/.inputrc&lt;/code&gt; バックアップを作成して編集してください。一部の引数を大文字または小文字のように変更することで問題が解決することがよくあります。</target>
        </trans-unit>
        <trans-unit id="b38ff2c237d2189cfc8068063c988ad558800625" translate="yes" xml:space="preserve">
          <source>These are scripts which will check the source things like ANSI C violations, POD encoding issues, etc.</source>
          <target state="translated">これらは、ANSI C の違反や POD のエンコーディングの問題などのソースをチェックするスクリプトです。</target>
        </trans-unit>
        <trans-unit id="08a1e3d5222d26c7ad00377b2f49dd3e19a69282" translate="yes" xml:space="preserve">
          <source>These are shortcuts for &lt;code&gt;$token-&amp;gt;tag() eq &lt;i&gt;somestring&lt;/i&gt;&lt;/code&gt;</source>
          <target state="translated">これらは &lt;code&gt;$token-&amp;gt;tag() eq &lt;i&gt;somestring&lt;/i&gt;&lt;/code&gt; &lt;i&gt;somestringの&lt;/i&gt;ショートカットです&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="34937e959a1c366f5128e5b9fde3a8ddb4bd5e6f" translate="yes" xml:space="preserve">
          <source>These are similar to article(), body() and head(), but rather than returning the requested data directly, they return a tied filehandle from which to read the article.</source>
          <target state="translated">これらは article()、body()、head()に似ていますが、要求されたデータを直接返すのではなく、記事を読むための紐付きファイルハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="992979db9b32df20ed312f9df292c8122981c5bf" translate="yes" xml:space="preserve">
          <source>These are the files in the Perl release that contain references to Cygwin. These very brief notes attempt to explain the reason for all conditional code. Hopefully, keeping this up to date will allow the Cygwin port to be kept as clean as possible.</source>
          <target state="translated">これらは、Cygwinへの参照を含むPerlリリースのファイルです。これらの非常に簡単なメモは、すべての条件付きコードの理由を説明しようとしています。うまくいけば、これを最新の状態に保つことで、Cygwinの移植版を可能な限りクリーンな状態に保つことができます。</target>
        </trans-unit>
        <trans-unit id="75ac46c3e2da8e520c552d106b13b25422f4ae84" translate="yes" xml:space="preserve">
          <source>These are the functions that are available, they may either be called as functions or class methods:</source>
          <target state="translated">これらは利用可能な関数で、関数として呼ばれることもあれば、クラスメソッドとして呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="da1f03a776fe8bedafea0b23935ca2ad13f5c2fe" translate="yes" xml:space="preserve">
          <source>These are the hash data structures that are available:</source>
          <target state="translated">これらが利用可能なハッシュデータ構造体です。</target>
        </trans-unit>
        <trans-unit id="cf5f4459a98cf4ec50466a764ec50e3aa2bdb1de" translate="yes" xml:space="preserve">
          <source>These are the newest form of versions, and correspond to Perl's own version style beginning with 5.6.0. Starting with Perl 5.10.0, and most likely Perl 6, this is likely to be the preferred form. This method normally requires that the input parameter be quoted, although Perl's after 5.8.1 can use v-strings as a special form of quoting, but this is highly discouraged.</source>
          <target state="translated">これらは最新のバージョンの形式で、5.6.0 から始まる Perl 自身のバージョンスタイルに対応しています。Perl 5.10.0 以降、Perl 6 以降では、これが好ましい形式になる可能性が高いです。5.8.1以降のPerlではv-stringを特殊な形で使用することができますが、この方法は通常入力パラメータを引用符で囲む必要がありますが、非常にお勧めできません。</target>
        </trans-unit>
        <trans-unit id="321abf696e1ac3f1c7e8ae4631a3e0352eed8069" translate="yes" xml:space="preserve">
          <source>These are the same as color('attribute') and can be used if you prefer typing:</source>
          <target state="translated">これらはcolor('attribute')と同じで、タイピングを好む場合に使用することができます。</target>
        </trans-unit>
        <trans-unit id="4187810dcd65ec8ff13d408cac42774a760ce9e6" translate="yes" xml:space="preserve">
          <source>These are the signals which a program might normally expect to encounter and which by default cause it to terminate. They are HUP, INT, PIPE and TERM.</source>
          <target state="translated">これらは、プログラムが通常遭遇するであろうシグナルであり、デフォルトではプログラムを終了させるシグナルです。HUP、INT、PIPE、TERM です。</target>
        </trans-unit>
        <trans-unit id="50c4067312fedca516066cb81563c6787bf50478" translate="yes" xml:space="preserve">
          <source>These are the signals which were trapped by default by the old &lt;b&gt;sigtrap&lt;/b&gt; interface, they are ABRT, BUS, EMT, FPE, ILL, PIPE, QUIT, SEGV, SYS, TERM, and TRAP. If no signals or signals lists are passed to &lt;b&gt;sigtrap&lt;/b&gt;, this list is used.</source>
          <target state="translated">これらは、古い&lt;b&gt;sigtrap&lt;/b&gt;インターフェイスによってデフォルトでトラップされた信号であり、ABRT、BUS、EMT、FPE、ILL、PIPE、QUIT、SEGV、SYS、TERM、およびTRAPです。シグナルまたはシグナルリストが&lt;b&gt;sigtrap&lt;/b&gt;に渡されない場合、このリストが使用されます。</target>
        </trans-unit>
        <trans-unit id="cea91aaa564fccd3f4852969e3ebc12f20249663" translate="yes" xml:space="preserve">
          <source>These are the six methods that are exported as default.</source>
          <target state="translated">以上がデフォルトでエクスポートされる6つのメソッドです。</target>
        </trans-unit>
        <trans-unit id="107044185540681260f831f30270844d122d9842" translate="yes" xml:space="preserve">
          <source>These are the things that you can put in the parameters to plan:</source>
          <target state="translated">これらは計画を立てるためのパラメータに入れるものです。</target>
        </trans-unit>
        <trans-unit id="cae5aa495786f78d7786c67162eeac298ded8720" translate="yes" xml:space="preserve">
          <source>These are to do with constructing a language handle:</source>
          <target state="translated">これらは、言語ハンドルを構築するためのものです。</target>
        </trans-unit>
        <trans-unit id="922c34b791a974e411c2469dcdbd7774f0e10924" translate="yes" xml:space="preserve">
          <source>These are used to get/set the 'active' attribute. When true this attribute will force &lt;code&gt;hub-&amp;gt;finalize()&lt;/code&gt; to take action even if there is no plan, and no tests have been run. This flag is useful for plugins that add follow-up behaviors that need to run even if no events are seen.</source>
          <target state="translated">これらは、「アクティブ」属性を取得/設定するために使用されます。trueの場合、この属性は、計画がなく、テストが実行されていない場合でも、 &lt;code&gt;hub-&amp;gt;finalize()&lt;/code&gt; にアクションを実行させます。このフラグは、イベントが表示されない場合でも実行する必要があるフォローアップ動作を追加するプラグインに役立ちます。</target>
        </trans-unit>
        <trans-unit id="25e9dcb05d530b0eaaf353a6122269805fd5136a" translate="yes" xml:space="preserve">
          <source>These are useful shortcuts to save on the typing.</source>
          <target state="translated">これらは、タイピングの手間を省くための便利なショートカットです。</target>
        </trans-unit>
        <trans-unit id="20957167192887677e71195c4861c8a5596fbdd0" translate="yes" xml:space="preserve">
          <source>These are valid only on ASCII platforms. Starting in Perl v5.22, simply changing the octal constants to equivalent &lt;code&gt;\N{U+...}&lt;/code&gt; values makes them portable:</source>
          <target state="translated">これらはASCIIプラットフォームでのみ有効です。Perl v5.22以降では、8進定数を同等の &lt;code&gt;\N{U+...}&lt;/code&gt; 値に変更するだけで移植性が向上します。</target>
        </trans-unit>
        <trans-unit id="121235b5fae01f0300690949bf870a51f4a735f5" translate="yes" xml:space="preserve">
          <source>These are various utility functions for manipulating UTF8-encoded strings. For the uninitiated, this is a method of representing arbitrary Unicode characters as a variable number of bytes, in such a way that characters in the ASCII range are unmodified, and a zero byte never appears within non-zero characters.</source>
          <target state="translated">UTF8エンコードされた文字列を操作するための様々なユーティリティ関数です。これは、ASCII 範囲内の文字が変更されず、ゼロ以外の文字の中にゼロバイトが現れることがないような方法で、任意の Unicode 文字を可変バイト数で表現する方法です。</target>
        </trans-unit>
        <trans-unit id="a8c3820acf49b8050b73972a9c61ce1cf6f1d9df" translate="yes" xml:space="preserve">
          <source>These are versions of the macros which take an explicit interpreter as an argument.</source>
          <target state="translated">これらは、引数として明示的なインタプリタを取るマクロのバージョンです。</target>
        </trans-unit>
        <trans-unit id="b056cc5f487123530dc637016a4d1c22c28e035c" translate="yes" xml:space="preserve">
          <source>These are:</source>
          <target state="translated">これらは</target>
        </trans-unit>
        <trans-unit id="16d16f3cffc4ac9689654ee5a738c8ecadd74b82" translate="yes" xml:space="preserve">
          <source>These can all be disabled with</source>
          <target state="translated">これらはすべて</target>
        </trans-unit>
        <trans-unit id="e41fb2d0ecca05f4e2a4a44f51aab35f28ed5c33" translate="yes" xml:space="preserve">
          <source>These can be combined into a single regexp with a three-way alternation:</source>
          <target state="translated">これらは三者交替で一つの正規表現にまとめることができます。</target>
        </trans-unit>
        <trans-unit id="172164005a20965708fb5481ccabdedd39caefb5" translate="yes" xml:space="preserve">
          <source>These can be imported, or called as methods on the class.</source>
          <target state="translated">これらはインポートしたり、クラスのメソッドとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="299d50e1fb824778d0759c0f08b0488ba008e1c8" translate="yes" xml:space="preserve">
          <source>These can be used to add filters. Filters can modify, replace, or remove events before anything else can see them.</source>
          <target state="translated">これらを使用してフィルタを追加することができます。フィルタは、他の何かが見る前にイベントを修正、置換、削除することができます。</target>
        </trans-unit>
        <trans-unit id="4eeb7ad8186044a1f9cb1af61a0f21c3ae49622d" translate="yes" xml:space="preserve">
          <source>These can be used to remove filters and pre_filters. The &lt;code&gt;$sub&lt;/code&gt; argument is the reference returned by &lt;code&gt;filter()&lt;/code&gt; or &lt;code&gt;pre_filter()&lt;/code&gt;.</source>
          <target state="translated">これらは、フィルターとpre_filtersを削除するために使用できます。 &lt;code&gt;$sub&lt;/code&gt; 引数により戻さ基準である &lt;code&gt;filter()&lt;/code&gt; または &lt;code&gt;pre_filter()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3356ead5e79e95f8cf87a7aefe66f6dc48400c35" translate="yes" xml:space="preserve">
          <source>These can be used to turn IPC waiting on and off, or check the current value of the flag.</source>
          <target state="translated">これらを使用して、IPC待ちをオン/オフにしたり、フラグの現在値をチェックしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="70b66993a553be0939fc1c087fcb0c54c5cdbbb0" translate="yes" xml:space="preserve">
          <source>These cases below violate the &quot;remainder has the sign of the second of the two arguments&quot;, since they wouldn't match up otherwise.</source>
          <target state="translated">以下のケースは、そうでなければ一致しないので、「残りは2つの論証のうち2番目の論証の符号を持つ」に違反しています。</target>
        </trans-unit>
        <trans-unit id="1fd6f63888a958514d8ebfc5074b3f479f8a49f9" translate="yes" xml:space="preserve">
          <source>These classes correspond in the obvious way to the underlying C structures of similar names. The inheritance hierarchy mimics the underlying C &quot;inheritance&quot;:</source>
          <target state="translated">これらのクラスは、類似した名前の C 言語の構造体に対応しています。継承階層は、基礎となるCの「継承」を模倣しています。</target>
        </trans-unit>
        <trans-unit id="5f11a03556aad53a0a7bc63133f793375ad1dc66" translate="yes" xml:space="preserve">
          <source>These code blocks can be prefixed with &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; to give the appearance of a subroutine (although this is not considered good style). One should note that these code blocks don't really exist as named subroutines (despite their appearance). The thing that gives this away is the fact that you can have &lt;b&gt;more than one&lt;/b&gt; of these code blocks in a program, and they will get &lt;b&gt;all&lt;/b&gt; executed at the appropriate moment. So you can't execute any of these code blocks by name.</source>
          <target state="translated">これらのコードブロックの前に &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; を付けると、サブルーチンのように見えます（ただし、これは良いスタイルとは見なされません）。これらのコードブロックは名前付きサブルーチンとしては実際には存在しないことに注意してください（それらの外観にもかかわらず）。これを実現するのは、プログラム内にこれらのコードブロックを&lt;b&gt;複数&lt;/b&gt;持つことができ、適切なときに&lt;b&gt;すべて&lt;/b&gt;実行されるという事実です。したがって、これらのコードブロックを名前で実行することはできません。</target>
        </trans-unit>
        <trans-unit id="135b8ae6adb863f81a824e0e084d6f888cb7a313" translate="yes" xml:space="preserve">
          <source>These code blocks can be prefixed with &lt;code&gt;sub&lt;/code&gt; to give the appearance of a subroutine (although this is not considered good style). One should note that these code blocks don't really exist as named subroutines (despite their appearance). The thing that gives this away is the fact that you can have &lt;b&gt;more than one&lt;/b&gt; of these code blocks in a program, and they will get &lt;b&gt;all&lt;/b&gt; executed at the appropriate moment. So you can't execute any of these code blocks by name.</source>
          <target state="translated">これらのコードブロックの前に &lt;code&gt;sub&lt;/code&gt; を付けて、サブルーチンの外観を与えることができます（ただし、これは適切なスタイルとは見なされません）。これらのコードブロックは、名前付きサブルーチンとして実際には存在しないことに注意してください（外観にもかかわらず）。これを提供するのは、プログラムにこれらのコードブロックを&lt;b&gt;複数&lt;/b&gt;持つことができ、それらは&lt;b&gt;すべて&lt;/b&gt;適切なタイミングで実行されるという事実です。したがって、これらのコードブロックを名前で実行することはできません。</target>
        </trans-unit>
        <trans-unit id="97b3b7dd37ba8a222332eb2984faedc72082d594" translate="yes" xml:space="preserve">
          <source>These commands take any number of arguments and investigate what is necessary to perform the action. Argument processing is as follows:</source>
          <target state="translated">これらのコマンドは任意の数の引数を取り、アクションを実行するために必要なものを調べます。引数の処理は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1935b5d017d485fb4c9165c42281556d84b0d309" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;../perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;.</source>
          <target state="translated">これらのコンパイルフェーズキーワードは&lt;a href=&quot;../perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;、perlmodのBEGIN、UNITCHECK、CHECK、INIT、ENDに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cfb52f790e80f5471de59b15936b8e64b57f38e3" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;perlmod#BEGIN%2C-UNITCHECK%2C-CHECK%2C-INIT-and-END&quot;&gt;&quot;BEGIN, UNITCHECK, CHECK, INIT and END&quot; in perlmod&lt;/a&gt;.</source>
          <target state="translated">これらのコンパイルフェーズのキーワードは&lt;a href=&quot;perlmod#BEGIN%2C-UNITCHECK%2C-CHECK%2C-INIT-and-END&quot;&gt;、perlmodの「BEGIN、UNITCHECK、CHECK、INIT、およびEND」に記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d7f96e99d050cd5ba24ce3555c69d5626ea1ddfe" translate="yes" xml:space="preserve">
          <source>These compile phase keywords are documented in &lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;BEGIN, UNITCHECK, CHECK, INIT and END in perlmod&lt;/a&gt;.</source>
          <target state="translated">これらのコンパイルフェーズキーワードは&lt;a href=&quot;perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END&quot;&gt;、perlmodのBEGIN、UNITCHECK、CHECK、INIT、ENDに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="97251eb9b01071889514a18b4c3f732daa85a7b2" translate="yes" xml:space="preserve">
          <source>These constants are not imported by &lt;code&gt;IO::Compress::Zip&lt;/code&gt; by default.</source>
          <target state="translated">これらの定数は、デフォルトでは &lt;code&gt;IO::Compress::Zip&lt;/code&gt; によってインポートされません。</target>
        </trans-unit>
        <trans-unit id="4a9cdeb250fa9e2cb61227f4240cb75a90c2a763" translate="yes" xml:space="preserve">
          <source>These constants can also be used with fully qualified names, eg. &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt; .</source>
          <target state="translated">これらの定数は、完全修飾名でも使用できます。 &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38e4d9e8ffca41ef0f0b08e38acc59353b323e18" translate="yes" xml:space="preserve">
          <source>These constants can also be used with fully qualified names, eg. &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt;.</source>
          <target state="translated">これらの定数は、完全修飾名で使用することもできます。 &lt;code&gt;SDBM_File::PAGFEXT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b24ced089c50142be624d4fe7279d5e7e8267bf6" translate="yes" xml:space="preserve">
          <source>These conversions are governed by the following general rules:</source>
          <target state="translated">これらの変換は、以下の一般的なルールに準拠しています。</target>
        </trans-unit>
        <trans-unit id="8ebb9f4990eefbf7af18e7f37f2d673045cd0b59" translate="yes" xml:space="preserve">
          <source>These conversions are invoked according to context as necessary. For example, the subroutine for &lt;code&gt;'&quot;&quot;'&lt;/code&gt; (stringify) may be used where the overloaded object is passed as an argument to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, and that for &lt;code&gt;'bool'&lt;/code&gt; where it is tested in the condition of a flow control statement (like &lt;code&gt;while&lt;/code&gt; ) or the ternary &lt;code&gt;?:&lt;/code&gt; operation.</source>
          <target state="translated">これらの変換は、必要に応じてコンテキストに応じて呼び出されます。たとえば、 &lt;code&gt;'&quot;&quot;'&lt;/code&gt; （stringify）のサブルーチンは、オーバーロードされたオブジェクトが &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; の引数として渡される場合に使用でき、 &lt;code&gt;'bool'&lt;/code&gt; の場合は、フロー制御ステートメントの条件（ &lt;code&gt;while&lt;/code&gt; のような）でテストされますまたは三項 &lt;code&gt;?:&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="380117f70d82e15acd1450b3ca50a68f2d64bbe1" translate="yes" xml:space="preserve">
          <source>These conversions are invoked according to context as necessary. For example, the subroutine for &lt;code&gt;'&quot;&quot;'&lt;/code&gt; (stringify) may be used where the overloaded object is passed as an argument to &lt;code&gt;print&lt;/code&gt;, and that for &lt;code&gt;'bool'&lt;/code&gt; where it is tested in the condition of a flow control statement (like &lt;code&gt;while&lt;/code&gt;) or the ternary &lt;code&gt;?:&lt;/code&gt; operation.</source>
          <target state="translated">これらの変換は、必要に応じてコンテキストに従って呼び出されます。たとえば、 &lt;code&gt;'&quot;&quot;'&lt;/code&gt; （stringify）のサブルーチンは、オーバーロードされたオブジェクトが &lt;code&gt;print&lt;/code&gt; の引数として渡される場合に使用でき、 &lt;code&gt;'bool'&lt;/code&gt; のサブルーチンは、フロー制御ステートメントの条件（ &lt;code&gt;while&lt;/code&gt; など）でテストされる場合に使用できます。または三項 &lt;code&gt;?:&lt;/code&gt; 演算。</target>
        </trans-unit>
        <trans-unit id="a40ed2255002784d89744404c25a8dfb75189849" translate="yes" xml:space="preserve">
          <source>These correspond (loosely) to fgetpos() and fsetpos(). Rather than stdio's Fpos_t they expect a &quot;Perl Scalar Value&quot; to be passed. What is stored there should be considered opaque. The layout of the data may vary from handle to handle. When not using stdio or if platform does not have the stdio calls then they are implemented in terms of PerlIO_tell() and PerlIO_seek().</source>
          <target state="translated">これらは fgetpos()と fsetpos()に(ゆるく)対応しています。stdioのFpos_tではなく、&quot;Perl Scalar Value &quot;が渡されることを期待しています。そこに格納されているものは不透明と考えるべきです。データのレイアウトはハンドルによって異なるかもしれません。stdio を使用しない場合や、プラットフォームが stdio 呼び出しを持っていない場合、それらは PerlIO_tell()と PerlIO_seek()の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="3ab9bc2795a0ea30e5174b44302c5f3390695af2" translate="yes" xml:space="preserve">
          <source>These correspond functionally to fread() and fwrite() but the arguments and return values are different. The PerlIO_read() and PerlIO_write() signatures have been modeled on the more sane low level read() and write() functions instead: The &quot;file&quot; argument is passed first, there is only one &quot;count&quot;, and the return value can distinguish between error and &lt;code&gt;EOF&lt;/code&gt; .</source>
          <target state="translated">これらは機能的にfread（）およびfwrite（）に対応していますが、引数と戻り値は異なります。代わりに、PerlIO_read（）およびPerlIO_write（）シグネチャは、よりまともな低レベルのread（）およびwrite（）関数に基づいてモデル化されています。「file」引数が最初に渡され、「count」は1つしかありません。エラーと &lt;code&gt;EOF&lt;/code&gt; を区別します。</target>
        </trans-unit>
        <trans-unit id="6709bb996b1b03a70d9886cbb196b8cf31182557" translate="yes" xml:space="preserve">
          <source>These correspond functionally to fread() and fwrite() but the arguments and return values are different. The PerlIO_read() and PerlIO_write() signatures have been modeled on the more sane low level read() and write() functions instead: The &quot;file&quot; argument is passed first, there is only one &quot;count&quot;, and the return value can distinguish between error and &lt;code&gt;EOF&lt;/code&gt;.</source>
          <target state="translated">これらは機能的にfread（）とfwrite（）に対応しますが、引数と戻り値は異なります。 PerlIO_read（）およびPerlIO_write（）シグネチャは、代わりに、より適切な低レベルのread（）およびwrite（）関数でモデル化されています。「file」引数が最初に渡され、「count」は1つだけであり、戻り値は次のことができます。エラーと &lt;code&gt;EOF&lt;/code&gt; を区別します。</target>
        </trans-unit>
        <trans-unit id="6faed5a4522cd8b94dc864e27b779abb63c4ce78" translate="yes" xml:space="preserve">
          <source>These correspond to fopen()/fdopen() and the arguments are the same. Return &lt;code&gt;NULL&lt;/code&gt; and set &lt;code&gt;errno&lt;/code&gt; if there is an error. There may be an implementation limit on the number of open handles, which may be lower than the limit on the number of open files - &lt;code&gt;errno&lt;/code&gt; may not be set when &lt;code&gt;NULL&lt;/code&gt; is returned if this limit is exceeded.</source>
          <target state="translated">これらはfopen（）/ fdopen（）に対応し、引数は同じです。リターン &lt;code&gt;NULL&lt;/code&gt; とセット &lt;code&gt;errno&lt;/code&gt; にエラーが発生した場合。開いているハンドルの数には実装上の制限があり、開いているファイルの数の制限よりも少ない場合があり &lt;code&gt;NULL&lt;/code&gt; 。この制限を超えると、NULLが返されたときに &lt;code&gt;errno&lt;/code&gt; が設定されない場合があります。</target>
        </trans-unit>
        <trans-unit id="85c39d61ce18e7b09b1791e93aa8066eeef62084" translate="yes" xml:space="preserve">
          <source>These correspond to fputs() and fputc(). Note that arguments have been revised to have &quot;file&quot; first.</source>
          <target state="translated">これらは fputs()と fputc()に対応しています。引数が最初に &quot;file &quot;を持つように修正されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="544fd46c0b10a4444296cac7b81bb5f9a1983a0b" translate="yes" xml:space="preserve">
          <source>These correspond to historical versions of Perl itself prior to 5.6.0, as well as all other modules which follow the Camel rules for the $VERSION scalar. A Decimal version is initialized with what looks like a floating point number. Leading zeros &lt;b&gt;are&lt;/b&gt; significant and trailing zeros are implied so that a minimum of three places is maintained between subversions. What this means is that any subversion (digits to the right of the decimal place) that contains less than three digits will have trailing zeros added to make up the difference, but only for purposes of comparison with other version objects. For example:</source>
          <target state="translated">これらは、5.6.0より前のPerl自体の履歴バージョン、および$ VERSIONスカラーのCamelルールに従う他のすべてのモジュールに対応します。Decimalバージョンは、浮動小数点数のように見えるもので初期化されます。先行ゼロ&lt;b&gt;は&lt;/b&gt;重要であり、後続ゼロは、サブバージョン間で最低3つの場所が維持されるように暗示されます。これが意味するのは、3桁未満のサブバージョン（小数点以下の桁数）には、他のバージョンオブジェクトとの比較のみを目的として、違いを補うために末尾のゼロが追加されるということです。例えば：</target>
        </trans-unit>
        <trans-unit id="8e90caae28ef06f86a5a7c45f8c354bdfbb310ff" translate="yes" xml:space="preserve">
          <source>These defaults may change once perlio has been better tested and tuned.</source>
          <target state="translated">これらのデフォルト値は、perlioのテストと調整が完了した後に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7839c4fa6c5e549c45dd9f01f832d15a81b4f89c" translate="yes" xml:space="preserve">
          <source>These dependencies &lt;b&gt;must&lt;/b&gt; be installed for proper completion of the phase.</source>
          <target state="translated">これらの依存関係は、フェーズを適切に完了するためにインストールする&lt;b&gt;必要&lt;/b&gt;が&lt;b&gt;あり&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a282aac2b58f5229db8cb0a3f6d43227938378cc" translate="yes" xml:space="preserve">
          <source>These dependencies are optional, but are suggested for enhanced operation of the described distribution.</source>
          <target state="translated">これらの依存関係はオプションですが、記述されているディストリビューションの操作性を向上させるために提案されています。</target>
        </trans-unit>
        <trans-unit id="4b42ed96c36dd8480d16597a1b739ba48b433615" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=perl. Defaults to $Config{installman*dir}.</source>
          <target state="translated">これらのディレクトリは、INSTALLDIRS=perl の場合、'make install' 時に man ページを取得します。デフォルトは $Config{installman*dir}です。</target>
        </trans-unit>
        <trans-unit id="80d2a82fca268aa8c538c7ef08b93ac2b88facef" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=site (default). Defaults to $(SITEPREFIX)/man/man$(MAN*EXT).</source>
          <target state="translated">これらのディレクトリは、INSTALLDIRS=site (デフォルト)の場合、'make install' 時に man ページを取得します。デフォルトは $(SITEPREFIX)/man/man$(MAN*EXT)です。</target>
        </trans-unit>
        <trans-unit id="68e3f1b03dd4e2ce3d50494f40f9bb4bc33a9ff9" translate="yes" xml:space="preserve">
          <source>These directories get the man pages at 'make install' time if INSTALLDIRS=vendor. Defaults to $(VENDORPREFIX)/man/man$(MAN*EXT).</source>
          <target state="translated">これらのディレクトリは、INSTALLDIRS=vendor の場合、'make install' 時に man ページを取得します。デフォルトは $(VENDORPREFIX)/man/man$(MAN*EXT)です。</target>
        </trans-unit>
        <trans-unit id="826d28206d7a0a00e581093b89d5458113f88ed8" translate="yes" xml:space="preserve">
          <source>These events are somewhat unlike the other over-* structures, as far as what their contents are. When an &quot;=over ... =back&quot; block is parsed where the items are a list of text &quot;subheadings&quot;, it will produce this event structure:</source>
          <target state="translated">これらのイベントは、その内容が何であるかという点では、他のover-*構造体とはやや異なります。オーバー ......=バック&quot; ブロックが解析され、項目がテキスト &quot;小見出し &quot;のリストになっている場合、このイベント構造体が生成されます。</target>
        </trans-unit>
        <trans-unit id="e1cc2ff1be108f9b3225e238afe683fc7768cc47" translate="yes" xml:space="preserve">
          <source>These events are somewhat unlike the other over-* structures, as far as what their contents are. When an &quot;=over ... =back&quot; block is parsed where there are no items, it will produce this event structure:</source>
          <target state="translated">これらのイベントは、その内容が何であるかに関しては、他の over-*構造体とはやや異なります。アイテムが存在しない&quot;=over ...=back &quot;ブロックが解析されると、このイベント構造体が生成されます。</target>
        </trans-unit>
        <trans-unit id="059d0be95b4f0a24081b715eea5d71b4a7804c63" translate="yes" xml:space="preserve">
          <source>These events are somewhat unlike the other over-* structures, as far as what their contents are. When an &quot;=over ... =back&quot; block is parsed where there is no content, it will produce this event structure:</source>
          <target state="translated">これらのイベントは、その内容が何であるかという点で、他の over-*構造体とはやや異なります。内容がない&quot;=over ...=back &quot;ブロックが解析された場合、このイベント構造体が生成されます。</target>
        </trans-unit>
        <trans-unit id="697b26f4c2f86a2a70b8343c157814214e1b6619" translate="yes" xml:space="preserve">
          <source>These examples apply for use in the &lt;code&gt;AUTODIE_HINTS&lt;/code&gt; subroutine and when calling &lt;code&gt;autodie::hints-&amp;gt;set_hints_for()&lt;/code&gt;.</source>
          <target state="translated">これらの例は、 &lt;code&gt;AUTODIE_HINTS&lt;/code&gt; サブルーチンでの使用、および &lt;code&gt;autodie::hints-&amp;gt;set_hints_for()&lt;/code&gt; 呼び出し時に適用されます。</target>
        </trans-unit>
        <trans-unit id="40c3a72856e79ae11ef7788be093b884c47b09d5" translate="yes" xml:space="preserve">
          <source>These examples are realized in the code below, which could be copied to a file</source>
          <target state="translated">これらの例は以下のコードで実現されています。</target>
        </trans-unit>
        <trans-unit id="ea1d8aa8b62f74ea36ff39b0b63b9774953aaca0" translate="yes" xml:space="preserve">
          <source>These examples of attempts to use an ellipsis are syntax errors:</source>
          <target state="translated">省略記号を使用しようとしたこれらの例は、構文エラーです。</target>
        </trans-unit>
        <trans-unit id="ad269ea05e73affc724a0326dc3ecea88836b454" translate="yes" xml:space="preserve">
          <source>These examples often reflect the style and preference of the author of that piece of the documentation, and may be briefer than a corresponding line of code in a real program. Except where otherwise noted, you should assume that &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; statements appear earlier in the &quot;program&quot;, and that any variables used have already been declared, even if those declarations have been omitted to make the example easier to read.</source>
          <target state="translated">これらの例は、多くの場合、そのドキュメントの作成者のスタイルと好みを反映しており、実際のプログラムの対応するコード行よりも短い場合があります。特に明記されている場合を除き、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; ステートメントは「プログラム」の前半にあり、使用されている変数はすでに宣言されていると想定してください。</target>
        </trans-unit>
        <trans-unit id="d4e7b3ca44c221b3e7c212675f6429495503147e" translate="yes" xml:space="preserve">
          <source>These examples often reflect the style and preference of the author of that piece of the documentation, and may be briefer than a corresponding line of code in a real program. Except where otherwise noted, you should assume that &lt;code&gt;use strict&lt;/code&gt; and &lt;code&gt;use warnings&lt;/code&gt; statements appear earlier in the &quot;program&quot;, and that any variables used have already been declared, even if those declarations have been omitted to make the example easier to read.</source>
          <target state="translated">これらの例は、多くの場合、ドキュメントのその部分の作成者のスタイルと好みを反映しており、実際のプログラムの対応するコード行よりも短い場合があります。特に明記されていない限り、 &lt;code&gt;use strict&lt;/code&gt; および &lt;code&gt;use warnings&lt;/code&gt; ステートメントは「プログラム」の前半にあり、例を読みやすくするために宣言が省略されている場合でも、使用される変数はすでに宣言されていると想定する必要があります。</target>
        </trans-unit>
        <trans-unit id="da4181b23484c1b0366a0256854a440c5eed9952" translate="yes" xml:space="preserve">
          <source>These examples show how to make references to variables with names. Sometimes you want to make an array or a hash that doesn't have a name. This is analogous to the way you like to be able to use the string &lt;code&gt;&quot;\n&quot;&lt;/code&gt; or the number 80 without having to store it in a named variable first.</source>
          <target state="translated">これらの例は、名前で変数を参照する方法を示しています。名前のない配列またはハッシュを作成したい場合があります。これは、文字列 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; または数値80を、最初に名前付き変数に格納する必要なしに使用できるようにする方法に似ています。</target>
        </trans-unit>
        <trans-unit id="20a65f5d703ea411ed23607c52479559427bdd1b" translate="yes" xml:space="preserve">
          <source>These examples show standard binary, octal, and hexadecimal conversion. All cases return 250.</source>
          <target state="translated">これらの例は、標準の2進数、8進数、および16進数の変換を示しています。すべての場合は250を返します。</target>
        </trans-unit>
        <trans-unit id="3275ce9b816da8fb07d0b0ce58c3254f177b415d" translate="yes" xml:space="preserve">
          <source>These exercise the C calls of the same names. Everything after the flags arg is passed as the args to the called function. They return whatever the C function itself pushed onto the stack, plus the return value from the function; for example</source>
          <target state="translated">これらは同名のC言語の呼び出しを実行します。flags arg以降の全てが呼び出された関数の引数として渡されます。これらの関数は、C関数自身がスタックにプッシュしたものに、関数からの戻り値を加えたものを返します。</target>
        </trans-unit>
        <trans-unit id="8154f7f4551172387a5e006af7a44b0eb2db652a" translate="yes" xml:space="preserve">
          <source>These exports lack the 'test2_' prefix because of how important/common they are. Exports in the &lt;a href=&quot;#OTHER-API-EXPORTS&quot;&gt;&quot;OTHER API EXPORTS&quot;&lt;/a&gt; section have the 'test2_' prefix to ensure they stand out.</source>
          <target state="translated">これらのエクスポートは、その重要性/共通性のため、「test2_」プレフィックスがありません。「OTHERAPIEXPORTS &lt;a href=&quot;#OTHER-API-EXPORTS&quot;&gt;」&lt;/a&gt;セクションのエクスポートには、目立つように「test2_」プレフィックスが付いています。</target>
        </trans-unit>
        <trans-unit id="7900d790c497c44a25852d75caed60efb96bb183" translate="yes" xml:space="preserve">
          <source>These features are no longer considered experimental and their functionality has disappeared. It's your own fault if you wrote production programs using these features after we explicitly told you not to (see &lt;a href=&quot;perlpolicy&quot;&gt;perlpolicy&lt;/a&gt;).</source>
          <target state="translated">これらの機能は実験的なものとは見なされなくなり、その機能はなくなりました。これらの機能を使用して、明示的に&lt;a href=&quot;perlpolicy&quot;&gt;禁止&lt;/a&gt;するように指示した後で（perlpolicyを参照）プロダクションプログラムを作成したのは、あなた自身の責任です。</target>
        </trans-unit>
        <trans-unit id="ecdbc29b6059151fd36541ed2cea90e388fc6071" translate="yes" xml:space="preserve">
          <source>These features were so wildly successful and played so well with others that we decided to remove their experimental status and admit them as full, stable features in the world of Perl, lavishing all the benefits and luxuries thereof. They are also awarded +5 Stability and +3 Charisma.</source>
          <target state="translated">これらの機能は非常に大成功を収め、他の機能との相性も良かったので、私たちは実験的な状態を取り除き、Perl の世界で完全に安定した機能として認めることにし、そのすべての利点と贅沢を与えることにしました。また、+5 安定性と+3 カリスマ性も付与されています。</target>
        </trans-unit>
        <trans-unit id="23bca6002a132d6b029d6fafa0db7395943b6806" translate="yes" xml:space="preserve">
          <source>These fields are documented in &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; in the details() function</source>
          <target state="translated">これらのフィールドは、details（）関数の&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builderに記載さ&lt;/a&gt;れています。</target>
        </trans-unit>
        <trans-unit id="63e6036965bbf4c4737a51a1417b34175db545ac" translate="yes" xml:space="preserve">
          <source>These fields are exclusive to Test::Tester.</source>
          <target state="translated">これらのフィールドはTest::Tester専用です。</target>
        </trans-unit>
        <trans-unit id="436079f5f30dfc97a1a6d7f8ea9906fefeca2983" translate="yes" xml:space="preserve">
          <source>These fields are used to keep track of how many paren groups could be matched in the pattern, which was the last open paren to be entered, and which was the last close paren to be entered.</source>
          <target state="translated">これらのフィールドは、パターン内でマッチしたペアレングループの数、最後に入力されたオープンペアレンがどれであったか、最後に入力されたクローズペアレンがどれであったかを追跡するために使用されます。</target>
        </trans-unit>
        <trans-unit id="364e8607b9d0b5e1133548655910099e7ea2800f" translate="yes" xml:space="preserve">
          <source>These fields are used to keep track of: how many paren capture groups there are in the pattern; which was the highest paren to be closed (see &lt;a href=&quot;perlvar#%24%2B&quot;&gt;&quot;$+&quot; in perlvar&lt;/a&gt;); and which was the most recent paren to be closed (see &lt;a href=&quot;perlvar#%24%5EN&quot;&gt;&quot;$^N&quot; in perlvar&lt;/a&gt;).</source>
          <target state="translated">これらのフィールドは、以下を追跡するために使用されます。パターン内にあるパレンキャプチャグループの数。これは閉鎖される最高の&lt;a href=&quot;perlvar#%24%2B&quot;&gt;親でした&lt;/a&gt;（perlvarの「$ +」を参照）。そして、これは閉鎖さ&lt;a href=&quot;perlvar#%24%5EN&quot;&gt;れた最新の親でした（perlvarの「$ ^ N」を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="55f6d64891a439ddc08d9e9a7c82712ad5e53094" translate="yes" xml:space="preserve">
          <source>These fields were not always set properly by tools. These are &lt;b&gt;MOSTLY&lt;/b&gt; deprecated by the &lt;a href=&quot;Test2::EventFacet::Hub&quot;&gt;Test2::EventFacet::Hub&lt;/a&gt; facets. These fields are not required, and may only reflect the hub that was current when the event was created, which is not necessarily the same as the hub the event was sent through.</source>
          <target state="translated">これらのフィールドは、ツールによって常に適切に設定されているとは限りません。これらはされている&lt;b&gt;MOSTLY&lt;/b&gt;で非推奨&lt;a href=&quot;Test2::EventFacet::Hub&quot;&gt;にTest2 :: EventFacet ::ハブ&lt;/a&gt;面。これらのフィールドは必須ではなく、イベントが作成されたときに現在のハブのみを反映する場合があります。これは、イベントが送信されたハブと必ずしも同じではありません。</target>
        </trans-unit>
        <trans-unit id="4c8e2d7aa479f62270f36bb981c83130e3ea21ce" translate="yes" xml:space="preserve">
          <source>These files contain information on who maintains which modules. Run &lt;code&gt;perl Porting/Maintainers -M Module::Name&lt;/code&gt; to find out more information about a dual-life module.</source>
          <target state="translated">これらのファイルには、誰がどのモジュールを保守しているかに関する情報が含まれています。 &lt;code&gt;perl Porting/Maintainers -M Module::Name&lt;/code&gt; を実行して、デュアルライフモジュールの詳細を確認します。</target>
        </trans-unit>
        <trans-unit id="7c3add026b4eccbc256b7dbac98ef5e6ce0ff8a8" translate="yes" xml:space="preserve">
          <source>These flags can be set during compilation to enable optimizations in the &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operator.</source>
          <target state="translated">これらのフラグは、コンパイル中に設定して、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 演算子の最適化を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ba4786ce1716e79f3dd44cdde2b9934a0474166a" translate="yes" xml:space="preserve">
          <source>These flags can be set during compilation to enable optimizations in the &lt;code&gt;split&lt;/code&gt; operator.</source>
          <target state="translated">これらのフラグは、 &lt;code&gt;split&lt;/code&gt; 演算子で最適化を有効にするためにコンパイル中に設定できます。</target>
        </trans-unit>
        <trans-unit id="e37fe8b518dd14c6463f65c8f4e797fa6141aaa5" translate="yes" xml:space="preserve">
          <source>These flags will be combined with &lt;code&gt;AI_PASSIVE&lt;/code&gt; if the &lt;code&gt;Listen&lt;/code&gt; argument is given. For more information see the documentation about &lt;code&gt;getaddrinfo()&lt;/code&gt; in the &lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;Listen&lt;/code&gt; 引数が指定されている場合、これらのフラグは &lt;code&gt;AI_PASSIVE&lt;/code&gt; と組み合わされます。詳細については、&lt;a href=&quot;socket&quot;&gt;Socket&lt;/a&gt;モジュールの &lt;code&gt;getaddrinfo()&lt;/code&gt; に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5ad448cfc75702b92a6132746a47d8bee944a550" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">これらのフロー制御キーワードは&lt;a href=&quot;../perlsyn#Compound-Statements&quot;&gt;、perlsynの複合ステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c20b24e4fbc48221510b4bcf4dcbd023da2f2f48" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;&quot;Compound Statements&quot; in perlsyn&lt;/a&gt;.</source>
          <target state="translated">これらのフロー制御キーワードは&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;、perlsynの「CompoundStatements」に記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4f149ae07a8478e188c52361aad3ec711ed1026a" translate="yes" xml:space="preserve">
          <source>These flow-control keywords are documented in &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">これらのフロー制御キーワードは&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;、perlsynの複合ステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="309e08bc8a3175c38d05ead911b510e18b559b99" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;../perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">試験的なスイッチ機能に関連するこれらのフロー制御キーワードは&lt;a href=&quot;../perlsyn#Switch-Statements&quot;&gt;、perlsynのスイッチステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c6ea531d00fc508a3823794aa1be9e23af84e702" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;&quot;Switch Statements&quot; in perlsyn&lt;/a&gt;.</source>
          <target state="translated">実験的なswitch機能に関連するこれらのフロー制御キーワードは&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;、perlsynの「SwitchStatements」に記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a272370ad05edf250f2041efdee62784d465ad39" translate="yes" xml:space="preserve">
          <source>These flow-control keywords related to the experimental switch feature are documented in &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;.</source>
          <target state="translated">試験的なスイッチ機能に関連するこれらのフロー制御キーワードは&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;、perlsynのスイッチステートメントに記載されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc4036739b5240858c0bf581399bd57e7b5e9c9e" translate="yes" xml:space="preserve">
          <source>These forms may be assigned to, and cause the right-hand side to be evaluated in scalar context:</source>
          <target state="translated">これらのフォームは、割り当てられ、右辺がスカラーコンテキストで評価される原因となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b6a87abeab3fa4b07145fb59b22ed97519f70773" translate="yes" xml:space="preserve">
          <source>These free versions of Visual C++ 2008-2013 Professional contain the same compilers and linkers that ship with the full versions, and also contain everything necessary to build Perl, rather than requiring a separate download of the Windows SDK like previous versions did.</source>
          <target state="translated">Visual C++2008-2013 Professional のこれらの無料版には、フルバージョンと同じコンパイラとリンカが含まれており、以前のバージョンのように Windows SDK の個別ダウンロードを必要とするのではなく、Perl のビルドに必要なものがすべて含まれています。</target>
        </trans-unit>
        <trans-unit id="dd071ab048c765a21e6eb3e509d63da5f9264cc6" translate="yes" xml:space="preserve">
          <source>These free versions of Visual C++ 2008-2019 Professional contain the same compilers and linkers that ship with the full versions, and also contain everything necessary to build Perl, rather than requiring a separate download of the Windows SDK like previous versions did.</source>
          <target state="translated">Visual C++2008-2019 Professional のこれらの無料版には、フルバージョンと同じコンパイラとリンカが含まれており、以前のバージョンのように Windows SDK の個別ダウンロードを必要とするのではなく、Perl をビルドするために必要なすべてのものが含まれています。</target>
        </trans-unit>
        <trans-unit id="efdfa79cbeb17377a5124b29f2fd31a6e8d98c48" translate="yes" xml:space="preserve">
          <source>These functions allow checksums to be merged. Refer to the</source>
          <target state="translated">これらの関数により、チェックサムをマージすることができます。この関数を使用して、チェックサムをマージするには</target>
        </trans-unit>
        <trans-unit id="ba57dd2ab74f37811d43a497242362420e4296f0" translate="yes" xml:space="preserve">
          <source>These functions are exported only on request. They each take a single argument and return the absolute pathname for it. If no argument is given they'll use the current working directory.</source>
          <target state="translated">これらの関数はリクエストがあった場合にのみエクスポートされます。それぞれ一つの引数を取り、その絶対パス名を返します。引数が与えられていない場合は、現在の作業ディレクトリを使用します。</target>
        </trans-unit>
        <trans-unit id="11a75a016614f3f6a49b489f2532217d2dc9b130" translate="yes" xml:space="preserve">
          <source>These functions are interface of character data used internally. If you want only to get Unicode normalization forms, you don't need call them yourself.</source>
          <target state="translated">これらの関数は、内部で使用される文字データのインターフェースです。Unicode正規化フォームだけを取得したい場合は、自分で呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="a5805d5b7ed6958150825f5cb6f923e00d36788d" translate="yes" xml:space="preserve">
          <source>These functions are provided for backwards compatibility with common tempfile generation C library functions.</source>
          <target state="translated">これらの関数は、一般的なtempfile生成Cライブラリ関数との下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="4c85d18231511b3dd1840594c64b0cd5dd02c4fd" translate="yes" xml:space="preserve">
          <source>These functions are related to the method resolution order of perl classes</source>
          <target state="translated">これらの関数は、Perlクラスのメソッド解決順序に関連しています。</target>
        </trans-unit>
        <trans-unit id="f5dc09684122720f5aa9541567e929d09cbfcab9" translate="yes" xml:space="preserve">
          <source>These functions are related to the method resolution order of perl classes Also see &lt;a href=&quot;perlmroapi&quot;&gt;perlmroapi&lt;/a&gt;.</source>
          <target state="translated">これらの関数は、perlクラスのメソッド解決順序に関連しています&lt;a href=&quot;perlmroapi&quot;&gt;。perlmroapi&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="565eacfa6d391bb1e8f9b310d413202832f4d770" translate="yes" xml:space="preserve">
          <source>These functions are used by the filter to obtain either a line or block from the next filter in the chain or the actual source file if there aren't any other filters.</source>
          <target state="translated">これらの関数はフィルタが連鎖している次のフィルタ、 あるいは他にフィルタがない場合は実際のソースファイルから行やブロックを取得するのに使われます。</target>
        </trans-unit>
        <trans-unit id="b40856071384296779ffb96483ca0013c6d7f3df" translate="yes" xml:space="preserve">
          <source>These functions are usually used inside an &lt;code&gt;ok()&lt;/code&gt; .</source>
          <target state="translated">これらの関数は通常、 &lt;code&gt;ok()&lt;/code&gt; 内で使用されます。</target>
        </trans-unit>
        <trans-unit id="e41468bdd006d27480bb97d817c9ffa27e30a0b5" translate="yes" xml:space="preserve">
          <source>These functions are usually used inside an &lt;code&gt;ok()&lt;/code&gt;.</source>
          <target state="translated">これらの関数は通常、 &lt;code&gt;ok()&lt;/code&gt; 内で使用されます。</target>
        </trans-unit>
        <trans-unit id="ad9ddd863a33c4087b2128f800b2bb735b670e0b" translate="yes" xml:space="preserve">
          <source>These functions control the global state of the package.</source>
          <target state="translated">これらの関数は、パッケージのグローバルな状態を制御します。</target>
        </trans-unit>
        <trans-unit id="524d44a200305a1bdc5134c684c7bc58ebf331b8" translate="yes" xml:space="preserve">
          <source>These functions grant &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; token as a prefix of the method name. Note that if you want to keep the returned glob for a long time, you need to check for it being &quot;AUTOLOAD&quot;, since at the later time the call may load a different subroutine due to $AUTOLOAD changing its value. Use the glob created as a side effect to do this.</source>
          <target state="translated">これらの関数は、メソッド名の接頭辞として &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; トークンを付与します。返されたグロブを長期間保持する場合は、 &quot;AUTOLOAD&quot;であることを確認する必要があることに注意してください。後で、$ AUTOLOADが値を変更するため、呼び出しが別のサブルーチンをロードする場合があるためです。これを行うには、副作用として作成されたグロブを使用します。</target>
        </trans-unit>
        <trans-unit id="46e538c266b73e137dc14a5dc62eb4e35a0dc1d7" translate="yes" xml:space="preserve">
          <source>These functions grant &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; token as a prefix of the method name. Note that if you want to keep the returned glob for a long time, you need to check for it being &quot;AUTOLOAD&quot;, since at the later time the call may load a different subroutine due to &lt;code&gt;$AUTOLOAD&lt;/code&gt; changing its value. Use the glob created as a side effect to do this.</source>
          <target state="translated">これらの関数は、メソッド名のプレフィックスとして &lt;code&gt;&quot;SUPER&quot;&lt;/code&gt; トークンを付与します。返されたglobを長期間保持する場合は、「AUTOLOAD」であることを確認する必要があります。後で、 &lt;code&gt;$AUTOLOAD&lt;/code&gt; が値を変更するため、呼び出しが別のサブルーチンをロードする可能性があるためです。これを行うには、副作用として作成されたグロブを使用します。</target>
        </trans-unit>
        <trans-unit id="e3b1137b52cacd1fbff911e830d8d14363d490cb" translate="yes" xml:space="preserve">
          <source>These functions have the same side-effects as &lt;code&gt;gv_fetchmeth&lt;/code&gt; with &lt;code&gt;level==0&lt;/code&gt; . The warning against passing the GV returned by &lt;code&gt;gv_fetchmeth&lt;/code&gt; to &lt;code&gt;call_sv&lt;/code&gt; applies equally to these functions.</source>
          <target state="translated">これらの関数には、 &lt;code&gt;level==0&lt;/code&gt; を &lt;code&gt;gv_fetchmeth&lt;/code&gt; したgv_fetchmethと同じ副作用があります。GVを渡すことに対する警告がで返さ &lt;code&gt;gv_fetchmeth&lt;/code&gt; に &lt;code&gt;call_sv&lt;/code&gt; これらの関数にも同様に適用されます。</target>
        </trans-unit>
        <trans-unit id="2b56f3bac64bb21a82acf1501da762f0c2c856f4" translate="yes" xml:space="preserve">
          <source>These functions have the same side-effects as &lt;code&gt;gv_fetchmeth&lt;/code&gt; with &lt;code&gt;level==0&lt;/code&gt;. The warning against passing the GV returned by &lt;code&gt;gv_fetchmeth&lt;/code&gt; to &lt;code&gt;call_sv&lt;/code&gt; applies equally to these functions.</source>
          <target state="translated">これらの関数には、 &lt;code&gt;level==0&lt;/code&gt; &lt;code&gt;gv_fetchmeth&lt;/code&gt; と同じ副作用があります。GVを渡すことに対する警告がで返さ &lt;code&gt;gv_fetchmeth&lt;/code&gt; に &lt;code&gt;call_sv&lt;/code&gt; これらの関数にも同様に適用されます。</target>
        </trans-unit>
        <trans-unit id="98d4aef8dd151e8462fbb3063b8efcb68e0d87b2" translate="yes" xml:space="preserve">
          <source>These functions provide convenient and thread-safe means of manipulating hook variables.</source>
          <target state="translated">これらの関数は、便利でスレッドセーフなフック変数の操作手段を提供します。</target>
        </trans-unit>
        <trans-unit id="a1aa255500a4b04da2dc6b5da9157c66c2e72423" translate="yes" xml:space="preserve">
          <source>These functions return the filehandles that test output should be written to. They are primarily useful when writing a custom formatter and code that turns events into actual output (TAP, etc.). They will return a dupe of the original filehandles that formatted output can be sent to regardless of whatever state the currently running test may have left STDOUT and STDERR in.</source>
          <target state="translated">これらの関数は、テスト出力が書き込まれるべきファイルハンドルを返します。これらの関数は、カスタムフォーマッタやイベントを実際の出力(TAPなど)に変換するコードを書くときに主に便利です。これらの関数は、現在実行中のテストがSTDOUTとSTDERRを残したままの状態に関わらず、フォーマットされた出力を送ることができるオリジナルのファイルハンドルの複製を返します。</target>
        </trans-unit>
        <trans-unit id="f738338a9dbfbee4b5a909220a80f41318a9f381" translate="yes" xml:space="preserve">
          <source>These functions simply print $Config{ccflags} and $Config{ccdlflags}</source>
          <target state="translated">これらの関数は、単に $Config{ccflags}と $Config{ccdlflags}を表示します。</target>
        </trans-unit>
        <trans-unit id="6cd020ca0f66b00dde6a2341717a3dae0fc7c828" translate="yes" xml:space="preserve">
          <source>These functions take a hash as an argument. The recognized keys of this hash are:</source>
          <target state="translated">これらの関数はハッシュを引数にとります。このハッシュの認識されるキーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d6359c7691ac9172680cb301b6768d6c5620c165" translate="yes" xml:space="preserve">
          <source>These functions take an input numeric code point in one encoding and return what its equivalent value is in the other.</source>
          <target state="translated">これらの関数は、一方のエンコーディングで入力された数値コードポイントを受け取り、他方のエンコーディングではその等価値を返します。</target>
        </trans-unit>
        <trans-unit id="7ebb5ef7a942f7d31cebfd11f8de6228de926c64" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded. See &lt;a href=&quot;../perlvar#%25INC&quot;&gt;%INC in perlvar&lt;/a&gt;.</source>
          <target state="translated">これらのフックは、ロードしたファイルに対応する％INCエントリを設定することもできます。&lt;a href=&quot;../perlvar#%25INC&quot;&gt;perlvarの％INCを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dcbca2e2db6c0375d3253e7898e5f5abc5deaab1" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the %INC entry corresponding to the files they have loaded. See &lt;a href=&quot;perlvar#%25INC&quot;&gt;%INC in perlvar&lt;/a&gt;.</source>
          <target state="translated">これらのフックは、ロードしたファイルに対応する％INCエントリを設定することもできます。&lt;a href=&quot;perlvar#%25INC&quot;&gt;perlvarの％INCを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5503b912c616b1c1dc8b62e0e994ce6da27034d1" translate="yes" xml:space="preserve">
          <source>These hooks are also permitted to set the &lt;a href=&quot;perlvar#%25INC&quot;&gt;&lt;code&gt;%INC&lt;/code&gt;&lt;/a&gt; entry corresponding to the files they have loaded. See &lt;a href=&quot;perlvar#%25INC&quot;&gt;&quot;%INC&quot; in perlvar&lt;/a&gt;.</source>
          <target state="translated">これらのフックは、ロードしたファイルに対応する&lt;a href=&quot;perlvar#%25INC&quot;&gt; &lt;code&gt;%INC&lt;/code&gt; &lt;/a&gt;エントリを設定することもできます。&lt;a href=&quot;perlvar#%25INC&quot;&gt;perlvarの「％INC」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78a1c65d2979db94163456cbe8161d55f284997f" translate="yes" xml:space="preserve">
          <source>These instructions almost certainly won't work with older Symbian releases or other SDKs. Patches to get this port running in other releases, SDKs, compilers, platforms, or devices are naturally welcome.</source>
          <target state="translated">これらの指示は、古い Symbian リリースや他の SDK ではほとんど確実に動作しません。他のリリース、SDK、コンパイラ、プラットフォーム、またはデバイスでこの移植版を動作させるためのパッチは、当然ながら歓迎されます。</target>
        </trans-unit>
        <trans-unit id="70f079e2e8fde2b1b9c52a64a204e00b961420ae" translate="yes" xml:space="preserve">
          <source>These instructions assume an Unixish build environment on your host system; they've been tested on Linux and OS X, and may work on Cygwin and MSYS. While Google also provides an NDK for Windows, these steps won't work native there, although it may be possible to cross-compile through different means.</source>
          <target state="translated">これらの手順は、ホストシステム上のUnix系のビルド環境を想定しています。LinuxとOS Xでテスト済みで、CygwinとMSYSでも動作する可能性があります。Google は Windows 用の NDK も提供していますが、これらの手順はネイティブでは動作しません。</target>
        </trans-unit>
        <trans-unit id="7b41cc6de55339f50e9dff758782b5feb169269e" translate="yes" xml:space="preserve">
          <source>These instructions have been tested under various Nokia Series 60 Symbian SDKs (1.2 to 2.6, 2.8 should also work, 1.2 compiles but does not work), Series 80 2.0, and Nokia 7710 (Series 90) SDK. You can get the SDKs from Forum Nokia (&lt;a href=&quot;http://www.forum.nokia.com/&quot;&gt;http://www.forum.nokia.com/&lt;/a&gt;). A very rough port (&quot;it compiles&quot;) to UIQ 2.1 has also been made.</source>
          <target state="translated">これらの手順は、さまざまなNokia Series 60 Symbian SDK（1.2〜2.6、2.8も機能するはずです、1.2はコンパイルされますが機能しません）、Series 80 2.0、およびNokia 7710（Series 90）SDKでテストされています。SDKは、Forum Nokia（&lt;a href=&quot;http://www.forum.nokia.com/&quot;&gt;http://www.forum.nokia.com/&lt;/a&gt;）から入手できます。UIQ 2.1への非常に大まかな移植（「コンパイル」）も行われました。</target>
        </trans-unit>
        <trans-unit id="8243bb38a9870ed902e40da582837671b3b2a2f6" translate="yes" xml:space="preserve">
          <source>These interfaces are only available in Perl 5.9.5 and higher. See &lt;a href=&quot;MRO::Compat&quot;&gt;MRO::Compat&lt;/a&gt; on CPAN for a mostly forwards compatible implementation for older Perls.</source>
          <target state="translated">これらのインターフェースは、Perl5.9.5以降でのみ使用できます。古いPerlのほとんどの上位互換性のある実装については、CPANの&lt;a href=&quot;MRO::Compat&quot;&gt;MRO :: Compat&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ab8134e6c8ea614a58bbf4cba85fe875f47ac40" translate="yes" xml:space="preserve">
          <source>These interfaces are only available in Perl 5.9.5 and higher. See &lt;a href=&quot;http://search.cpan.org/perldoc/MRO::Compat&quot;&gt;MRO::Compat&lt;/a&gt; on CPAN for a mostly forwards compatible implementation for older Perls.</source>
          <target state="translated">これらのインターフェースは、Perl 5.9.5以降でのみ使用できます。古いPerlのほとんどが互換性のある実装については、CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/MRO::Compat&quot;&gt;MRO :: Compat&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="800024eb93ec8e2e1c9e19ed6e58201379d4f5ea" translate="yes" xml:space="preserve">
          <source>These items are the primitives used to perform indenting, and to select text from amongst alternatives.</source>
          <target state="translated">これらの項目は、インデントを実行したり、代替案の中からテキス ト を選択したりするために用いられるプリミティブです。</target>
        </trans-unit>
        <trans-unit id="3dfe7afbcdb97590e1c6c0085eefd647c7035d88" translate="yes" xml:space="preserve">
          <source>These keys will be populated before any exceptions are thrown should there be an error.</source>
          <target state="translated">これらのキーは、エラーが発生した場合に例外がスローされる前に入力されます。</target>
        </trans-unit>
        <trans-unit id="a901d1a803d1f1e84cb86c073bdbaefe49dcbe0f" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;../perldata#Special-Literals&quot;&gt;Special Literals in perldata&lt;/a&gt;.</source>
          <target state="translated">これらのキーワードは&lt;a href=&quot;../perldata#Special-Literals&quot;&gt;、perldataの特別なリテラルに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1d6b25a409414e2ca5afbdfa8033c35fbcccb54b" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;perldata#Special-Literals&quot;&gt;&quot;Special Literals&quot; in perldata&lt;/a&gt;.</source>
          <target state="translated">これらのキーワードは&lt;a href=&quot;perldata#Special-Literals&quot;&gt;、perldataの「SpecialLiterals」に記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1500951fb5f2dd9eeebd6c439509f1ad3f36d4ce" translate="yes" xml:space="preserve">
          <source>These keywords are documented in &lt;a href=&quot;perldata#Special-Literals&quot;&gt;Special Literals in perldata&lt;/a&gt;.</source>
          <target state="translated">これらのキーワードは&lt;a href=&quot;perldata#Special-Literals&quot;&gt;、perldataの特別なリテラルに記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="017f89666b16c462ff4b71931d55ca635d0ecaed" translate="yes" xml:space="preserve">
          <source>These last two are only valid for pad name SVs. They only existed in the B::NV class before Perl 5.22. In 5.22 they were moved to the B::PADNAME class.</source>
          <target state="translated">これらの最後の 2 つは、パッド名 SV に対してのみ有効です。これらはPerl 5.22以前のB::NVクラスにのみ存在していました。5.22では、これらはB::PADNAMEクラスに移動されました。</target>
        </trans-unit>
        <trans-unit id="298686bf6c6c117c0e1d2a3856c264e7ccaf286f" translate="yes" xml:space="preserve">
          <source>These let you access, or specify, the IPC system internals.</source>
          <target state="translated">これらは、IPC システムの内部にアクセスしたり、指定したりすることができます。</target>
        </trans-unit>
        <trans-unit id="a9833d67dc0abefa0216f41f8ee8eb9cce74882f" translate="yes" xml:space="preserve">
          <source>These let you access, or specify, the formatters that can/should be used.</source>
          <target state="translated">これらは、使用できる/使用すべきフォーマッタにアクセスしたり、指定したりすることができます。</target>
        </trans-unit>
        <trans-unit id="c5bcc5490ceb9d124e54596118346ed571b24dc1" translate="yes" xml:space="preserve">
          <source>These libraries cannot be installed when the phase is in operation. This is a very rare situation, and the &lt;code&gt;conflicts&lt;/code&gt; relationship should be used with great caution, or not at all.</source>
          <target state="translated">これらのライブラリは、フェーズの動作中はインストールできません。これは非常にまれな状況であり、 &lt;code&gt;conflicts&lt;/code&gt; 関係は細心の注意を払って使用するか、まったく使用しないでください。</target>
        </trans-unit>
        <trans-unit id="ee3476aee9a9c9d8b18c6d57ac8c385c0348f0d4" translate="yes" xml:space="preserve">
          <source>These look just like character names but return multiple codepoints. Notice the &lt;code&gt;%vx&lt;/code&gt; vector-print functionality in &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらは文字名のように見えますが、複数のコードポイントを返します。 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;%vx&lt;/code&gt; vector-print機能に注意してください。</target>
        </trans-unit>
        <trans-unit id="3391fc814f15e6deaf725b432b00af48ee0dd251" translate="yes" xml:space="preserve">
          <source>These look just like character names but return multiple codepoints. Notice the &lt;code&gt;%vx&lt;/code&gt; vector-print functionality in &lt;code&gt;printf&lt;/code&gt;.</source>
          <target state="translated">これらは文字名と同じように見えますが、複数のコードポイントを返します。 &lt;code&gt;printf&lt;/code&gt; の &lt;code&gt;%vx&lt;/code&gt; ベクトル印刷機能に注目してください。</target>
        </trans-unit>
        <trans-unit id="e76a83f91dda3c78158f07c2bcf605e73e782739" translate="yes" xml:space="preserve">
          <source>These loop ops are not included in :base_core because they can easily be used to implement a resource attack (e.g., consume all available CPU time).</source>
          <target state="translated">これらのループ演算は、リソース攻撃の実装に容易に使用できるため、 :base_core には含まれていません (例:利用可能な CPU 時間をすべて消費する)。</target>
        </trans-unit>
        <trans-unit id="a843eb74986a4e9f839472d2d8d150ea39980b05" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of integer variable &lt;code&gt;i&lt;/code&gt; at the end of enclosing</source>
          <target state="translated">これらのマクロは、囲み文字の最後に整数変数 &lt;code&gt;i&lt;/code&gt; の値を復元するように配置します</target>
        </trans-unit>
        <trans-unit id="f7a2a9aebcff3586f69f55801776cb23fd4e90a9" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of pointers &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; must be a pointer of a type which survives conversion to &lt;code&gt;SV*&lt;/code&gt; and back, &lt;code&gt;p&lt;/code&gt; should be able to survive conversion to &lt;code&gt;char*&lt;/code&gt; and back.</source>
          <target state="translated">これらのマクロは、ポインター &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;p&lt;/code&gt; の値を復元するように配置します。 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;SV*&lt;/code&gt; への変換およびそれ以降の変換に耐えるタイプのポインターでなければなりません &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;char*&lt;/code&gt; への変換およびそれ以降の変換に耐えることができます。</target>
        </trans-unit>
        <trans-unit id="abe6df67a459b0e2e30bde61ddbbfa6e1689636a" translate="yes" xml:space="preserve">
          <source>These macros arrange things to restore the value of pointers &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;. &lt;code&gt;s&lt;/code&gt; must be a pointer of a type which survives conversion to &lt;code&gt;SV*&lt;/code&gt; and back, &lt;code&gt;p&lt;/code&gt; should be able to survive conversion to &lt;code&gt;char*&lt;/code&gt; and back.</source>
          <target state="translated">これらのマクロは、ポインタ &lt;code&gt;s&lt;/code&gt; と &lt;code&gt;p&lt;/code&gt; の値を復元するように配置します。 &lt;code&gt;s&lt;/code&gt; は、 &lt;code&gt;SV*&lt;/code&gt; への変換とその逆の変換に耐える型のポインターである必要があり、 &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;char*&lt;/code&gt; とその逆の変換に耐えられる必要があります。</target>
        </trans-unit>
        <trans-unit id="593dfba1d3d328349b77f1588cf82c2aaffa0443" translate="yes" xml:space="preserve">
          <source>These may not necessarily cause trouble, but indicate mediocre style.</source>
          <target state="translated">これらは必ずしもトラブルの原因になるとは限りませんが、平凡なスタイルを示しています。</target>
        </trans-unit>
        <trans-unit id="e22b64582fc85ac43b9e96c24337a10a450121a5" translate="yes" xml:space="preserve">
          <source>These memory related ops are not included in :base_core because they can easily be used to implement a resource attack (e.g., consume all available memory).</source>
          <target state="translated">これらのメモリ関連の操作は :base_core には含まれていません。 なぜなら、リソース攻撃を実装するのに簡単に使用できるからです (例えば、利用可能なすべてのメモリを消費する)。</target>
        </trans-unit>
        <trans-unit id="77c1bb576863e90102788a1b3ffe564db0c5c144" translate="yes" xml:space="preserve">
          <source>These messages are classified as follows (listed in increasing order of desperation):</source>
          <target state="translated">これらのメッセージは以下のように分類されています(自暴自棄になっているものが多い順に並んでいます)。</target>
        </trans-unit>
        <trans-unit id="b0bb74426f2aa2733dbc5c5a86f08523cab5f25f" translate="yes" xml:space="preserve">
          <source>These messages may safely be ignored. (Note that for a SunOS4 system, you must use -B/bin/ instead.)</source>
          <target state="translated">これらのメッセージは無視しても問題ありません。(SunOS4 システムでは、代わりに -B/bin/を使用しなければならないことに注意してください)。</target>
        </trans-unit>
        <trans-unit id="5b9f0b892cf28755d89fe7944f868ad5bf940e68" translate="yes" xml:space="preserve">
          <source>These methods all apply to the Ptr type for the structure; additionally two methods are constructed for the structure type itself, &lt;code&gt;_to_ptr&lt;/code&gt; which returns a Ptr type pointing to the same structure, and a &lt;code&gt;new&lt;/code&gt; method to construct and return a new structure, initialised to zeroes.</source>
          <target state="translated">これらのメソッドはすべて、構造のPtrタイプに適用されます。さらに二つの方法は、構造タイプ自体のために構成されている &lt;code&gt;_to_ptr&lt;/code&gt; 同じ構造にのPTR式ポインティングを返し、 &lt;code&gt;new&lt;/code&gt; 構築するための方法及びゼロに初期設定新しい構造を返します。</target>
        </trans-unit>
        <trans-unit id="833ac724c3c333f81488114a18e12c4a9e975d1a" translate="yes" xml:space="preserve">
          <source>These methods all test the BigInt for being one specific value and return true or false depending on the input. These are faster than doing something like:</source>
          <target state="translated">これらのメソッドはすべて、BigIntがある特定の値であるかどうかをテストし、入力に応じて真か偽を返します。これらのメソッドは、以下のようなことをするよりも高速です。</target>
        </trans-unit>
        <trans-unit id="44e7eefb77f18d6db25c4aade77e34563622be4e" translate="yes" xml:space="preserve">
          <source>These methods are called when Math::BigInt encounters an object it doesn't know how to handle. For instance, assume $x is a Math::BigInt, or subclass thereof, and $y is defined, but not a Math::BigInt, or subclass thereof. If you do</source>
          <target state="translated">これらのメソッドは、Math::BigInt が処理方法を知らないオブジェクトに遭遇したときに呼び出されます。例えば、$x が Math::BigInt またはそのサブクラスであり、$y が定義されているが Math::BigInt またはそのサブクラスではないとします。このような場合</target>
        </trans-unit>
        <trans-unit id="2e0a252991a786c320bc1feeb73f0f20e3e9795f" translate="yes" xml:space="preserve">
          <source>These methods are discussed in the section &quot;Bracket Notation Security&quot;.</source>
          <target state="translated">これらの方法については、「ブラケット記法のセキュリティ」のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="92da9e899f4e8b0a6a719a6370a299d62ec6b1c8" translate="yes" xml:space="preserve">
          <source>These methods are for setting up tests and declaring how many there are. You usually only want to call one of these methods.</source>
          <target state="translated">これらのメソッドはテストを設定し、テストの数を宣言するためのものです。通常はこれらのメソッドのうちの1つだけを呼び出すことになります。</target>
        </trans-unit>
        <trans-unit id="98d7c4cb78ffffaf07a8efc77ee2a4a9356ea4d1" translate="yes" xml:space="preserve">
          <source>These methods are intended to be used in the everyday dealing of exceptions.</source>
          <target state="translated">これらのメソッドは、日常的に例外を扱う際に使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="9725043aadb2020c60801a841d8cbbe42a310c40" translate="yes" xml:space="preserve">
          <source>These methods are not intended to be called by the user, but used or over-ridden by a sub-class of &lt;code&gt;Net::Cmd&lt;/code&gt;</source>
          <target state="translated">これらのメソッドは、ユーザーが呼び出すことを意図したものではなく、 &lt;code&gt;Net::Cmd&lt;/code&gt; サブクラスによって使用またはオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="c96be7d81aefe7494626f31fbf2d601d47ed4e3e" translate="yes" xml:space="preserve">
          <source>These methods are only testing the sign, and not the value.</source>
          <target state="translated">これらの方法は符号をテストしているだけで、値をテストしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="1d5446ceaa2f31e572217b447d4bad05a2bfe863" translate="yes" xml:space="preserve">
          <source>These methods are shorthand for calling &lt;code&gt;request()&lt;/code&gt; for the given method. The URL must have unsafe characters escaped and international domain names encoded. See &lt;code&gt;request()&lt;/code&gt; for valid options and a description of the response.</source>
          <target state="translated">これらのメソッドは、指定されたメソッドの &lt;code&gt;request()&lt;/code&gt; を呼び出すための省略形です。URLには、安全でない文字をエスケープし、国際ドメイン名をエンコードする必要があります。有効なオプションと応答の説明については、 &lt;code&gt;request()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f55156f755c79786d47317ca2de0a12228b5b4b7" translate="yes" xml:space="preserve">
          <source>These methods are useful when writing your own test methods.</source>
          <target state="translated">これらの方法は、自分でテスト方法を書くときに便利です。</target>
        </trans-unit>
        <trans-unit id="1371312bc20ca6b06acc065c53943c266c38f79b" translate="yes" xml:space="preserve">
          <source>These methods control where Test::Builder will print its output. They take either an open &lt;code&gt;$filehandle&lt;/code&gt; , a &lt;code&gt;$filename&lt;/code&gt; to open and write to or a &lt;code&gt;$scalar&lt;/code&gt; reference to append to. It will always return a &lt;code&gt;$filehandle&lt;/code&gt; .</source>
          <target state="translated">これらのメソッドは、Test :: Builderが出力を印刷する場所を制御します。それらは、開いている &lt;code&gt;$filehandle&lt;/code&gt; 、開いて書き込む &lt;code&gt;$filename&lt;/code&gt; 、または追加する &lt;code&gt;$scalar&lt;/code&gt; 参照のいずれかを取ります。常に &lt;code&gt;$filehandle&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="c6256a8c8405e7801b12616fc7588a653b02503a" translate="yes" xml:space="preserve">
          <source>These methods control where Test::Builder will print its output. They take either an open &lt;code&gt;$filehandle&lt;/code&gt;, a &lt;code&gt;$filename&lt;/code&gt; to open and write to or a &lt;code&gt;$scalar&lt;/code&gt; reference to append to. It will always return a &lt;code&gt;$filehandle&lt;/code&gt;.</source>
          <target state="translated">これらのメソッドは、Test :: Builderが出力を出力する場所を制御します。それらは、開いている &lt;code&gt;$filehandle&lt;/code&gt; 、開いて書き込む &lt;code&gt;$filename&lt;/code&gt; 、または追加する &lt;code&gt;$scalar&lt;/code&gt; 参照のいずれかを取ります。常に &lt;code&gt;$filehandle&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="4dabfc6c3e23d636029050966dc499c5c862fee9" translate="yes" xml:space="preserve">
          <source>These methods get the values of similarly named fields within the OP data structure. See top of &lt;code&gt;op.h&lt;/code&gt; for more info.</source>
          <target state="translated">これらのメソッドは、OPデータ構造内の同様の名前のフィールドの値を取得します。詳細については、 &lt;code&gt;op.h&lt;/code&gt; の上部を参照してください。</target>
        </trans-unit>
        <trans-unit id="eac0ba268e5d0e742f5c1a8121218a2683f22449" translate="yes" xml:space="preserve">
          <source>These methods guarantee fast individual tests but require a re-organization of the original list or array. They only pay off if you have to test multiple values against the same array.</source>
          <target state="translated">これらのメソッドは、個々のテストを高速に行うことを保証しますが、元のリストや配列を再編成する必要があります。これらのメソッドは、同じ配列に対して複数の値をテストしなければならない場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="f57ba0d1f35f964a5a1c34d55f9aeead1f7ad788" translate="yes" xml:space="preserve">
          <source>These methods have cycle detection and will throw an exception early if a cycle is detected. &lt;code&gt;uuid()&lt;/code&gt; is currently the only subroutine in this library that has a fallback behavior when cycles are detected.</source>
          <target state="translated">これらのメソッドにはサイクル検出機能があり、サイクルが検出されると早期に例外がスローされます。 &lt;code&gt;uuid()&lt;/code&gt; は現在、サイクルが検出されたときにフォールバック動作を行うこのライブラリ内の唯一のサブルーチンです。</target>
        </trans-unit>
        <trans-unit id="7cb3b559e380c719f80028fb428c3eb720e12704" translate="yes" xml:space="preserve">
          <source>These methods install a transparent filter on the I/O stream that converts data from the specified encoding when it is read in from the stream. The result is always Unicode.</source>
          <target state="translated">これらのメソッドは、I/O ストリームに透過フィルタをインストールし、ストリームからデータを読み込んだときに指定したエンコーディングからデータを変換します。結果は常に Unicode です。</target>
        </trans-unit>
        <trans-unit id="f58c6a34e5787c6cc0d22a8ee189b8d36dae62d5" translate="yes" xml:space="preserve">
          <source>These methods modify the invocand object and returns it.</source>
          <target state="translated">これらのメソッドは、インボカンドオブジェクトを変更し、それを返します。</target>
        </trans-unit>
        <trans-unit id="2d0828193002db36233bc401e0a0e9c0dbb462a1" translate="yes" xml:space="preserve">
          <source>These methods provide a user interface to the &lt;code&gt;Net::Cmd&lt;/code&gt; object.</source>
          <target state="translated">これらのメソッドは、 &lt;code&gt;Net::Cmd&lt;/code&gt; オブジェクトへのユーザーインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="e225e7aa23799f06f35cd0332e8b4cde6a695883" translate="yes" xml:space="preserve">
          <source>These methods return lists of string values, which might be represented in the distmeta structure as arrayrefs or scalars:</source>
          <target state="translated">これらのメソッドは、distmeta構造体の中でarrayrefやスカラとして表現されるかもしれない文字列のリストを返します。</target>
        </trans-unit>
        <trans-unit id="ff435d938391d9561763fbcab2d9f747b7f84a93" translate="yes" xml:space="preserve">
          <source>These methods set the size (in half-points, like 52 for 26-point) that these heading levels will appear as.</source>
          <target state="translated">これらのメソッドは、これらの見出しレベルが表示されるサイズ(26ポイントの場合は52のように半ポイントで)を設定します。</target>
        </trans-unit>
        <trans-unit id="abcc7bd5fdde6b4a0c109a19d7071ed04915f8b9" translate="yes" xml:space="preserve">
          <source>These methods use commands that are not part of the RFC977 documentation. Some servers may not support all of them.</source>
          <target state="translated">これらのメソッドはRFC977のドキュメントに含まれていないコマンドを使用します。サーバによっては、これらすべてをサポートしていない場合があります。</target>
        </trans-unit>
        <trans-unit id="31ccd9bd046a9504a4b8ad4115c9067507a8e143" translate="yes" xml:space="preserve">
          <source>These modes are all actually set via a bitmask. Here is how the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants are laid out. You can import the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallbacks)&lt;/code&gt; , and you can import the generic bitmask constants via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallback_all)&lt;/code&gt; .</source>
          <target state="translated">これらのモードはすべて、実際にはビットマスクを介して設定されます。以下は、 &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; 定数のレイアウト方法です。あなたは、インポートすることができ &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; の経由定数を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallbacks)&lt;/code&gt; 、あなたは経由して、一般的なビットマスク定数をインポートすることができ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(:fallback_all)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e33c5a40e1debe70ee0e42cb3c084926947443d" translate="yes" xml:space="preserve">
          <source>These modes are all actually set via a bitmask. Here is how the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants are laid out. You can import the &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; constants via &lt;code&gt;use Encode qw(:fallbacks)&lt;/code&gt;, and you can import the generic bitmask constants via &lt;code&gt;use Encode qw(:fallback_all)&lt;/code&gt;.</source>
          <target state="translated">これらのモードはすべて、実際にはビットマスクを介して設定されます。ここではどのように &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; の定数がレイアウトされています。 &lt;code&gt;use Encode qw(:fallbacks)&lt;/code&gt; を使用して &lt;code&gt;FB_&lt;i&gt;XXX&lt;/i&gt;&lt;/code&gt; 定数をインポートでき、Encode qw（：fallback_all）を &lt;code&gt;use Encode qw(:fallback_all)&lt;/code&gt; て汎用ビットマスク定数をインポートできます。</target>
        </trans-unit>
        <trans-unit id="d789a994adbfeec56de6cff1edba3230c60ae5bf" translate="yes" xml:space="preserve">
          <source>These modifiers are restored at the end of the enclosing group. For example,</source>
          <target state="translated">これらの修飾子は、囲むグループの最後に復元されます。例えば</target>
        </trans-unit>
        <trans-unit id="36a2832964ad1656c58b1143307f7ac9e06be52f" translate="yes" xml:space="preserve">
          <source>These modifiers do not carry over into named subpatterns called in the enclosing group. In other words, a pattern such as &lt;code&gt;((?i)(?&amp;amp;&lt;i&gt;NAME&lt;/i&gt;))&lt;/code&gt; does not change the case-sensitivity of the</source>
          <target state="translated">これらの修飾子は、囲んでいるグループで呼び出される名前付きサブパターンには引き継がれません。つまり、 &lt;code&gt;((?i)(?&amp;amp;&lt;i&gt;NAME&lt;/i&gt;))&lt;/code&gt; などのパターンでは、大文字と小文字の区別は変わりません。</target>
        </trans-unit>
        <trans-unit id="4b50f0d55e6d3bcc6eb1ad193029b6cf71ad0ceb" translate="yes" xml:space="preserve">
          <source>These modifiers do not carry over into named subpatterns called in the enclosing group. In other words, a pattern such as &lt;code&gt;((?i)(?&amp;amp;NAME))&lt;/code&gt; does not change the case-sensitivity of the &quot;NAME&quot; pattern.</source>
          <target state="translated">これらの修飾子は、包含グループで呼び出された名前付きサブパターンに引き継がれません。つまり、 &lt;code&gt;((?i)(?&amp;amp;NAME))&lt;/code&gt; などのパターンは、「NAME」パターンの大文字と小文字の区別を変更しません。</target>
        </trans-unit>
        <trans-unit id="333ce465cc885bdd43387f970476181f3973f86d" translate="yes" xml:space="preserve">
          <source>These modifiers, all new in 5.14, affect which character-set rules (Unicode,</source>
          <target state="translated">これらの修飾子は、すべて 5.14 で新たに追加されたもので、どの文字セット規則 (Unicode.</target>
        </trans-unit>
        <trans-unit id="f5fbd761faf543e63a6416a5e28a730d54795855" translate="yes" xml:space="preserve">
          <source>These modifiers, all new in 5.14, affect which character-set rules (Unicode, etc.) are used, as described below in &lt;a href=&quot;#Character-set-modifiers&quot;&gt;Character set modifiers&lt;/a&gt;.</source>
          <target state="translated">これらの修飾子はすべて5.14の新機能であり、「&lt;a href=&quot;#Character-set-modifiers&quot;&gt;文字セット修飾子」&lt;/a&gt;で後述するように、使用される文字セットルール（Unicodeなど）に影響します。</target>
        </trans-unit>
        <trans-unit id="2face06edd17affb51aa3f3b2560aa4d1613d318" translate="yes" xml:space="preserve">
          <source>These modules still function correctly, but their test suites will not pass. If you already have these modules installed then you can continue to use them. If you are trying to install them after upgrading Test::Builder you will need to force installation, or bypass the broken tests.</source>
          <target state="translated">これらのモジュールはまだ正しく機能していますが、テストスイートはパスしません。これらのモジュールが既にインストールされている場合は、引き続き使用することができます。Test::Builder をアップグレードした後にこれらのモジュールをインストールしようとすると、強制的にインストールするか、壊れたテストをバイパスする必要があります。</target>
        </trans-unit>
        <trans-unit id="bb9708d2ade8d02334095230804c31cb6c6f062f" translate="yes" xml:space="preserve">
          <source>These names are case-insensitive. By default (if specification is omitted), 'shifted' is adopted.</source>
          <target state="translated">これらの名前は大文字小文字を区別しません。デフォルトでは(指定を省略した場合)'shifted'が採用されます。</target>
        </trans-unit>
        <trans-unit id="a2a7bae57c0b7e47324c6368dda30c35ad91dca7" translate="yes" xml:space="preserve">
          <source>These notices must be retained in any copies of any part of this documentation and/or software.</source>
          <target state="translated">これらの通知は、このドキュメントおよび/またはソフトウェアのいかなる部分のコピーでも保持されなければなりません。</target>
        </trans-unit>
        <trans-unit id="efbc4f1ae4d272c0d4681905f6fb23798e4783eb" translate="yes" xml:space="preserve">
          <source>These numbers was achieved Apr 2004 with ActivePerl-5.8.3 running under Linux on a P4 2.8 GHz CPU. The last 5 entries differ by being pure perl implementations of the algorithms, which explains why they are so slow.</source>
          <target state="translated">この数字は2004年4月にP4 2.8GHzのCPUでLinuxでActivePerl-5.8.3を実行して達成したものです。最後の 5 つのエントリは、アルゴリズムを純粋な perl で実装したものであるという点で異なっていますが、それがなぜ遅いのかを説明しています。</target>
        </trans-unit>
        <trans-unit id="397e9a46a749c3f6612fa5900c82fbeb3d54197f" translate="yes" xml:space="preserve">
          <source>These old, perl3-era utilities have been deprecated in favour of &lt;code&gt;h2xs&lt;/code&gt; for a long time. As of Perl 5.26, they have been removed.</source>
          <target state="translated">これらの古いperl3時代のユーティリティは、長い間 &lt;code&gt;h2xs&lt;/code&gt; を優先して非推奨になりました。Perl 5.26以降、これらは削除されました。</target>
        </trans-unit>
        <trans-unit id="b16394db34a86c1309e6f32038763254bbfec1e7" translate="yes" xml:space="preserve">
          <source>These operators are documented in &lt;a href=&quot;../perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">これらの演算子は&lt;a href=&quot;../perlop&quot;&gt;perlopに&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="902ffcf3ea51513d56fbec3ce0266f1b87291429" translate="yes" xml:space="preserve">
          <source>These operators are documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">これらの演算子は&lt;a href=&quot;perlop&quot;&gt;perlopに&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="23835ab35bd3941ef690822a20797ba91ee28d2e" translate="yes" xml:space="preserve">
          <source>These operators are exempt from the &quot;looks like a function rule&quot; described above. That is, an opening parenthesis after the operator does not affect how much of the following code constitutes the argument. Put the opening parentheses before the operator to separate it from code that follows (this applies only to operators with higher precedence than unary operators, of course):</source>
          <target state="translated">これらの演算子は、上述の「関数のように見える」ルールの対象外となります。つまり、演算子の後に括弧があっても、それに続くコードがどれだけ引数を構成しているかには影響しません。演算子の前に開括弧を入れて、それを後続のコードから分離してください (もちろん、これは単項演算子よりも優先順位の高い演算子にのみ適用されます)。</target>
        </trans-unit>
        <trans-unit id="6b54b9bb627d1cf1404f3b5dab668ec8269f4aa6" translate="yes" xml:space="preserve">
          <source>These operators obtain the information described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, if you have the privileges necessary to retrieve the named user's UAF information via &lt;code&gt;sys$getuai&lt;/code&gt; . If not, then only the &lt;code&gt;$name&lt;/code&gt; , &lt;code&gt;$uid&lt;/code&gt; , and &lt;code&gt;$gid&lt;/code&gt; items are returned. The &lt;code&gt;$dir&lt;/code&gt; item contains the login directory in VMS syntax, while the &lt;code&gt;$comment&lt;/code&gt; item contains the login directory in Unix syntax. The &lt;code&gt;$gcos&lt;/code&gt; item contains the owner field from the UAF record. The &lt;code&gt;$quota&lt;/code&gt; item is not used.</source>
          <target state="translated">指定されたユーザーのUAF情報を &lt;code&gt;sys$getuai&lt;/code&gt; 経由で取得するために必要な特権を持っている場合、これらのオペレーターは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;で説明されている情報を取得します。そうでない場合は、 &lt;code&gt;$name&lt;/code&gt; 、 &lt;code&gt;$uid&lt;/code&gt; 、および &lt;code&gt;$gid&lt;/code&gt; アイテムのみが返されます。 &lt;code&gt;$dir&lt;/code&gt; ながらアイテムは、VMSの構文でログインディレクトリが含まれている &lt;code&gt;$comment&lt;/code&gt; 項目はUNIXの構文でログインディレクトリが含まれています。 &lt;code&gt;$gcos&lt;/code&gt; 項目は、UAFレコードから所有者フィールドが含まれています。 &lt;code&gt;$quota&lt;/code&gt; 項目は使用されません。</target>
        </trans-unit>
        <trans-unit id="67e9c8225d78cd00aa38baba429b7de497a323bb" translate="yes" xml:space="preserve">
          <source>These operators obtain the information described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, if you have the privileges necessary to retrieve the named user's UAF information via &lt;code&gt;sys$getuai&lt;/code&gt;. If not, then only the &lt;code&gt;$name&lt;/code&gt;, &lt;code&gt;$uid&lt;/code&gt;, and &lt;code&gt;$gid&lt;/code&gt; items are returned. The &lt;code&gt;$dir&lt;/code&gt; item contains the login directory in VMS syntax, while the &lt;code&gt;$comment&lt;/code&gt; item contains the login directory in Unix syntax. The &lt;code&gt;$gcos&lt;/code&gt; item contains the owner field from the UAF record. The &lt;code&gt;$quota&lt;/code&gt; item is not used.</source>
          <target state="translated">これらの演算子は、 &lt;code&gt;sys$getuai&lt;/code&gt; 介して指定されたユーザーのUAF情報を取得するために必要な特権がある場合、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;で説明されている情報を取得します。そうでない場合は、 &lt;code&gt;$name&lt;/code&gt; 、 &lt;code&gt;$uid&lt;/code&gt; 、および &lt;code&gt;$gid&lt;/code&gt; アイテムのみが返されます。 &lt;code&gt;$dir&lt;/code&gt; ながらアイテムは、VMSの構文でログインディレクトリが含まれている &lt;code&gt;$comment&lt;/code&gt; 項目はUNIXの構文でログインディレクトリが含まれています。 &lt;code&gt;$gcos&lt;/code&gt; 項目は、UAFレコードから所有者フィールドが含まれています。 &lt;code&gt;$quota&lt;/code&gt; 項目は使用されません。</target>
        </trans-unit>
        <trans-unit id="e7e657656c9789c3619d255f79ac9b3a6c835215" translate="yes" xml:space="preserve">
          <source>These ops are not included in :base_core because of the risk of them being used to generate floating point exceptions (which would have to be caught using a $SIG{FPE} handler).</source>
          <target state="translated">これらの操作は浮動小数点例外の生成に使用されるリスクがあるため、 :base_core には含まれていません (これは $SIG{FPE}ハンドラを使用して捕捉する必要があります)。</target>
        </trans-unit>
        <trans-unit id="d5ea0da5f8ce978d8d492f686d44331bb4fc3946" translate="yes" xml:space="preserve">
          <source>These ops are not included in :base_core because they have an effect beyond the scope of the compartment.</source>
          <target state="translated">これらの操作はコンパートメントの範囲を超えた効果を持つため、 :base_core には含まれていません。</target>
        </trans-unit>
        <trans-unit id="dc4dfb8577c0955249e95ba26e17b894dbf4b7a2" translate="yes" xml:space="preserve">
          <source>These ops are related to multi-threading.</source>
          <target state="translated">これらの操作はマルチスレッドに関連しています。</target>
        </trans-unit>
        <trans-unit id="2901e27ec7bca28af121ed51d6417c782431820f" translate="yes" xml:space="preserve">
          <source>These ops enable</source>
          <target state="translated">これらのOPSは、以下のことを可能にします。</target>
        </trans-unit>
        <trans-unit id="e55c6aacfd2933ba2a5d8d99593dbebe1787988f" translate="yes" xml:space="preserve">
          <source>These options affect which handler will be used for subsequently installed signals.</source>
          <target state="translated">これらのオプションは、その後にインストールされるシグナルに使用されるハンドラに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="29c586cad3979b967f1d8c83a031669d4e85f7d5" translate="yes" xml:space="preserve">
          <source>These options control the 'vertical display' of opcodes. The display 'order' is also called 'mode' elsewhere in this document.</source>
          <target state="translated">これらのオプションは、オペコードの「垂直表示」を制御する。表示の「順序」は、このドキュメントの他の部分では「モード」とも呼ばれています。</target>
        </trans-unit>
        <trans-unit id="b5693ca212dce09ab36fc48e6272f7336e49446b" translate="yes" xml:space="preserve">
          <source>These options select the line-style (or just style) used to render each opcode, and dictates what info is actually printed into each line.</source>
          <target state="translated">これらのオプションは、各オペコードのレンダリングに使用されるラインスタイル (または単にスタイル)を選択し、各行に実際にどのような情報が印刷されるかを決定します。</target>
        </trans-unit>
        <trans-unit id="822ae20d8832a94dbc806795384f0c1cb46d5024" translate="yes" xml:space="preserve">
          <source>These packages can all be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージはすべて、ダウンロードセンター（&lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en）&lt;/a&gt;で検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変化し続けるため、無意味なタスクであることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="a96b412b0738a7917698193862d504e1b28178d5" translate="yes" xml:space="preserve">
          <source>These packages can all be downloaded by searching in the Download Center at &lt;a href=&quot;https://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;https://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージはすべて、&lt;a href=&quot;https://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;https：//www.microsoft.com/downloads/search.aspx？displaylang = enの&lt;/a&gt;ダウンロードセンターで検索することでダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変更されるため、無意味な作業であることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="e00985d023d49949f9c18d4b6917b5fcc1fe8b04" translate="yes" xml:space="preserve">
          <source>These packages can be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージは、ダウンロードセンター（&lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en）&lt;/a&gt;で検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変化し続けるため、無意味なタスクであることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="768a190e5a4a6b2a5a78de898be2b0088fa40b69" translate="yes" xml:space="preserve">
          <source>These packages can be downloaded by searching in the Download Center at &lt;a href=&quot;https://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;https://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージは、&lt;a href=&quot;https://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;https：//www.microsoft.com/downloads/search.aspx？displaylang = enの&lt;/a&gt;ダウンロードセンターで検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変更されるため、無意味な作業であることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="ee6b901a4b16ea8fd5c1a17b0f5f523262d0ae63" translate="yes" xml:space="preserve">
          <source>These packages can both be downloaded by searching in the Download Center at &lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en&lt;/a&gt;. (Providing exact links to these packages has proven a pointless task because the links keep on changing so often.)</source>
          <target state="translated">これらのパッケージはどちらも、ダウンロードセンター（&lt;a href=&quot;http://www.microsoft.com/downloads/search.aspx?displaylang=en&quot;&gt;http://www.microsoft.com/downloads/search.aspx?displaylang=en）&lt;/a&gt;で検索してダウンロードできます。（これらのパッケージへの正確なリンクを提供することは、リンクが頻繁に変化し続けるため、無意味なタスクであることが証明されています。）</target>
        </trans-unit>
        <trans-unit id="b0b087e3db9d0ec8ccf2941b80cf3aaf473d4556" translate="yes" xml:space="preserve">
          <source>These perl routines currently (as of Perl v.5.8.6) cannot handle passed inf.</source>
          <target state="translated">これらの perl ルーチンは現在 (Perl v.5.8.6 以降)、渡された inf を扱うことができません。</target>
        </trans-unit>
        <trans-unit id="5ee158f8c062eca4d28a3ec2d9f8d880c70ecea2" translate="yes" xml:space="preserve">
          <source>These possessive quantifiers represent a special case of a more general concept, the</source>
          <target state="translated">これらの所有量詞は、より一般的な概念である</target>
        </trans-unit>
        <trans-unit id="bfd6c7d2c77daf624f0f4dda10d349c1b00557da" translate="yes" xml:space="preserve">
          <source>These properties are &lt;code&gt;\b&lt;/code&gt; (without braces), &lt;code&gt;\B&lt;/code&gt; (without braces), &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt; , &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;\W&lt;/code&gt; , and all the Posix character classes</source>
          <target state="translated">これらのプロパティは、 &lt;code&gt;\b&lt;/code&gt; （中かっこなし）、 &lt;code&gt;\B&lt;/code&gt; （中かっこなし）、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\S&lt;/code&gt; 、 &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;\W&lt;/code&gt; 、およびすべてのPosix文字クラスです。</target>
        </trans-unit>
        <trans-unit id="75c6e853336d06e89c7d24890512216ff9df496b" translate="yes" xml:space="preserve">
          <source>These properties are &lt;code&gt;\b&lt;/code&gt; (without braces), &lt;code&gt;\B&lt;/code&gt; (without braces), &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt;, &lt;code&gt;\w&lt;/code&gt;, &lt;code&gt;\W&lt;/code&gt;, and all the Posix character classes</source>
          <target state="translated">これらのプロパティは、 &lt;code&gt;\b&lt;/code&gt; （中括弧なし）、 &lt;code&gt;\B&lt;/code&gt; （中括弧なし）、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\S&lt;/code&gt; 、 &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;\W&lt;/code&gt; 、およびすべてのPosix文字クラスです。</target>
        </trans-unit>
        <trans-unit id="ac0cd3dd6b0da7da2a477124699c51a8786143da" translate="yes" xml:space="preserve">
          <source>These provide access to internal state and object instances.</source>
          <target state="translated">これらは内部状態やオブジェクトインスタンスへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="49d4c7299af6c451da747abf6a31ed43bc6d224c" translate="yes" xml:space="preserve">
          <source>These quantifiers will try to match as much of the string as possible, while still allowing the regex to match. So we have</source>
          <target state="translated">これらの量詞は、可能な限り文字列をマッチさせようとしますが、正規表現はマッチさせることができます。つまり、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b9b2f742b1b0fcfd6307ec607f8aee70bbd6ff21" translate="yes" xml:space="preserve">
          <source>These readers return hashrefs of arbitrary unblessed data structures, each described more fully in the specification:</source>
          <target state="translated">これらのリーダは、仕様書でより詳細に説明されている任意の無拘束データ構造のハッシュレットを返します。</target>
        </trans-unit>
        <trans-unit id="26153a279914ed6ae972bab9be5035c10687695d" translate="yes" xml:space="preserve">
          <source>These results are &quot;meta&quot; information about the total results of an individual test program.</source>
          <target state="translated">これらの結果は、個々のテストプログラムの合計結果に関する「メタ」情報です。</target>
        </trans-unit>
        <trans-unit id="2bea10980ed9e4e8701806a5267309dec8b36b3d" translate="yes" xml:space="preserve">
          <source>These results refer to individual tests which are run.</source>
          <target state="translated">これらの結果は、実行される個々のテストを参照しています。</target>
        </trans-unit>
        <trans-unit id="8893a5b7811d1faa2be1d81844c471e18cd604f6" translate="yes" xml:space="preserve">
          <source>These round modes always round in the same direction.</source>
          <target state="translated">これらのラウンドモードは、常に同じ方向にラウンドします。</target>
        </trans-unit>
        <trans-unit id="d39fb8588e2e03cf43f722c60791932347b9ede7" translate="yes" xml:space="preserve">
          <source>These rounding modes round to the nearest digit. They differ in how they determine which way to round in the ambiguous case when there is a tie.</source>
          <target state="translated">これらの丸めモードは、最も近い桁に丸めます。これらの丸め方は、同点の場合に曖昧な場合にどのように丸めるかを決定する方法が異なります。</target>
        </trans-unit>
        <trans-unit id="f99e408a46643ae41ce4a2a5b658c331ee2d8a0f" translate="yes" xml:space="preserve">
          <source>These routines all create system-specific portability problems. As noted elsewhere, Perl is at the mercy of your C libraries for much of its system behavior. It's probably safest to assume broken SysV semantics for signals and to stick with simple TCP and UDP socket operations; e.g., don't try to pass open file descriptors over a local UDP datagram socket if you want your code to stand a chance of being portable.</source>
          <target state="translated">これらのルーチンはすべて、システム固有の移植性の問題を引き起こします。別のところで述べたように、Perl はシステムの動作の多くを C ライブラリに依存しています。シグナルのために壊れた SysV のセマンティクスを想定し、単純な TCP と UDP ソケット操作に固執するのが最も安全でしょう。</target>
        </trans-unit>
        <trans-unit id="7accb91a83a147e188cfdb7ea0bdeddeb0f7f3a7" translate="yes" xml:space="preserve">
          <source>These routines allow you to parse file paths into their directory, filename and suffix.</source>
          <target state="translated">これらのルーチンを使用すると、ファイルパスをディレクトリ、ファイル名、サフィックスにパースすることができます。</target>
        </trans-unit>
        <trans-unit id="b2c49f2650fd89670405ec1fbc536b94e9ae8bdf" translate="yes" xml:space="preserve">
          <source>These routines are all documented in the Locale::Codes::API man page.</source>
          <target state="translated">これらのルーチンはすべてLocale::Codes::APIのマニュアルページに記載されています。</target>
        </trans-unit>
        <trans-unit id="5bd965d62212a6eeb3c7fb76c8f854332dc29f76" translate="yes" xml:space="preserve">
          <source>These routines are quite efficient and yet are always guaranteed to agree with &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt;. We manage this by caching the start times of any months we've seen before. If we know the start time of the month, we can always calculate any time within the month. The start times are calculated using a mathematical formula. Unlike other algorithms that do multiple calls to &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらのルーチンは非常に効率的ですが、常に &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt; と一致することが保証されています。これは、これまでに見た月の開始時間をキャッシュすることで管理します。月の開始時刻がわかっていれば、その月のいつでも計算できます。開始時間は数式を使用して計算されます。 &lt;code&gt;&lt;a href=&quot;../functions/gmtime&quot;&gt;gmtime()&lt;/a&gt;&lt;/code&gt; を複数回呼び出す他のアルゴリズムとは異なります。</target>
        </trans-unit>
        <trans-unit id="54b6203ba949c1c3d7c2acb41e2e6e57811ab704" translate="yes" xml:space="preserve">
          <source>These routines are quite efficient and yet are always guaranteed to agree with &lt;code&gt;localtime()&lt;/code&gt; and &lt;code&gt;gmtime()&lt;/code&gt;. We manage this by caching the start times of any months we've seen before. If we know the start time of the month, we can always calculate any time within the month. The start times are calculated using a mathematical formula. Unlike other algorithms that do multiple calls to &lt;code&gt;gmtime()&lt;/code&gt;.</source>
          <target state="translated">これらのルーチンは非常に効率的ですが、 &lt;code&gt;localtime()&lt;/code&gt; および &lt;code&gt;gmtime()&lt;/code&gt; と常に一致することが保証されています。これは、これまでに見た月の開始時刻をキャッシュすることで管理します。その月の開始時刻がわかっていれば、その月のいつでもいつでも計算できます。開始時間は数式を使用して計算されます。 &lt;code&gt;gmtime()&lt;/code&gt; を複数回呼び出す他のアルゴリズムとは異なります。</target>
        </trans-unit>
        <trans-unit id="e296b7f9a5e96b639ca1839fa4442d3f45e92709" translate="yes" xml:space="preserve">
          <source>These routines are the same as their counterparts in the system C library. In list context, the return values from the various get routines are as follows:</source>
          <target state="translated">これらのルーチンは、システムCライブラリの対応するものと同じです。リストコンテキストでは、様々な get ルーチンからの戻り値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="cc1ea3e493711677c93d92be2ec1c6ec9a5ee909" translate="yes" xml:space="preserve">
          <source>These routines used to be called &lt;code&gt;perl_call_sv&lt;/code&gt; , etc., before Perl v5.6.0, but those names are now deprecated; macros of the same name are provided for compatibility.</source>
          <target state="translated">これらのルーチンは、Perl v5.6.0より前は &lt;code&gt;perl_call_sv&lt;/code&gt; などと呼ばれていましたが、これらの名前は非推奨になりました。同じ名前のマクロが互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="93e20f0b82d868c177a926520e899384ae0d6b0f" translate="yes" xml:space="preserve">
          <source>These routines used to be called &lt;code&gt;perl_call_sv&lt;/code&gt;, etc., before Perl v5.6.0, but those names are now deprecated; macros of the same name are provided for compatibility.</source>
          <target state="translated">これらのルーチンは、Perl v5.6.0より前は &lt;code&gt;perl_call_sv&lt;/code&gt; などと呼ばれていましたが、現在は非推奨になっています。互換性のために、同じ名前のマクロが提供されています。</target>
        </trans-unit>
        <trans-unit id="1fb1fb969b6c77a6565b33ce0e7b7cbfccc95cfb" translate="yes" xml:space="preserve">
          <source>These rules are complicated, but the goal is for them to do what you want (even if you don't quite understand why they are doing it). For example:</source>
          <target state="translated">これらのルールは複雑ですが、目的は自分のやりたいことをやってもらうことです(なぜそれをやっているのか全く理解していなくても)。例えば</target>
        </trans-unit>
        <trans-unit id="c63bc3c15060a430def6be9fa36745fbd5e2304e" translate="yes" xml:space="preserve">
          <source>These rules were designed for compactness of expression, rather than legibility and maintainability. The &lt;a href=&quot;#%2Fx-and-%2Fxx&quot;&gt;&quot;/x and /xx&quot;&lt;/a&gt; pattern modifiers allow you to insert white space to improve readability. And use of &lt;code&gt;&lt;a href=&quot;re#%27strict%27-mode&quot;&gt;re 'strict'&lt;/a&gt;&lt;/code&gt; adds extra checking to catch some typos that might silently compile into something unintended.</source>
          <target state="translated">これらのルールは、読みやすさや保守性ではなく、表現のコンパクトさを目的として設計されました。&lt;a href=&quot;#%2Fx-and-%2Fxx&quot;&gt;「/ xと/ XX」&lt;/a&gt;パターン修飾子を使用すると、読みやすくするために空白を挿入することができます。また、 &lt;code&gt;&lt;a href=&quot;re#%27strict%27-mode&quot;&gt;re 'strict'&lt;/a&gt;&lt;/code&gt; 使用すると、意図しないものにサイレントにコンパイルされる可能性のあるいくつかのタイプミスをキャッチするための追加のチェックが追加されます。</target>
        </trans-unit>
        <trans-unit id="1c39d28608973eadb707da3830a9f4611c69ff29" translate="yes" xml:space="preserve">
          <source>These select Unicode rules. That means that in double-quotish strings, the string is always converted to UTF-8 to force a Unicode interpretation (you can &lt;code&gt;utf8::downgrade()&lt;/code&gt; afterwards to convert back to non-UTF8, if possible). In regular expression patterns, the conversion isn't done, but if the character set modifier would otherwise be &lt;code&gt;/d&lt;/code&gt;, it is changed to &lt;code&gt;/u&lt;/code&gt; .</source>
          <target state="translated">これらはUnicodeルールを選択します。つまり、二重引用符の文字列では、文字列は常にUTF-8に変換され、Unicode解釈が強制されます &lt;code&gt;utf8::downgrade()&lt;/code&gt; 後でutf8 :: downgrade（）を実行して、可能であれば非UTF8に戻すことができます）。正規表現パターンでは変換は行われませんが、文字セット修飾子が &lt;code&gt;/d&lt;/code&gt; である場合は &lt;code&gt;/u&lt;/code&gt; に変更されます。</target>
        </trans-unit>
        <trans-unit id="b576853b18c74e3e57c9d5a616cf25646efde147" translate="yes" xml:space="preserve">
          <source>These select Unicode rules. That means that in double-quotish strings, the string is always converted to UTF-8 to force a Unicode interpretation (you can &lt;code&gt;utf8::downgrade()&lt;/code&gt; afterwards to convert back to non-UTF8, if possible). In regular expression patterns, the conversion isn't done, but if the character set modifier would otherwise be &lt;code&gt;/d&lt;/code&gt;, it is changed to &lt;code&gt;/u&lt;/code&gt;.</source>
          <target state="translated">これらはUnicodeルールを選択します。つまり、二重引用符で囲まれた文字列では、文字列は常にUTF-8に変換され、Unicodeの解釈が強制されます &lt;code&gt;utf8::downgrade()&lt;/code&gt; 可能であれば、後でutf8 :: downgrade（）を使用して非UTF8に戻すことができます）。正規表現パターンでは、変換は行われませんが、文字セット修飾子が &lt;code&gt;/d&lt;/code&gt; である場合は、 &lt;code&gt;/u&lt;/code&gt; に変更されます。</target>
        </trans-unit>
        <trans-unit id="c33be304d6b7f8ebe4e43f5c0dfa6aefb4009eb4" translate="yes" xml:space="preserve">
          <source>These sets of one-liners are equivalent:</source>
          <target state="translated">これらのワンライナーのセットは等価です。</target>
        </trans-unit>
        <trans-unit id="52c95446c9ca7d3ffaa7ed7da6e1f21bf02cdc2e" translate="yes" xml:space="preserve">
          <source>These settings can be overridden globally too:</source>
          <target state="translated">これらの設定はグローバルにもオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="cbc91f3641f463359dfc31290abbc3a64d30454a" translate="yes" xml:space="preserve">
          <source>These should be familiar operations, with the exception of &lt;code&gt;av_unshift&lt;/code&gt; . This routine adds &lt;code&gt;num&lt;/code&gt; elements at the front of the array with the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value. You must then use &lt;code&gt;av_store&lt;/code&gt; (described below) to assign values to these new elements.</source>
          <target state="translated">これらは、 &lt;code&gt;av_unshift&lt;/code&gt; を除いて、おなじみの操作でなければなりません。このルーチンは、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値を持つ配列の前に &lt;code&gt;num&lt;/code&gt; 個の要素を追加します。次に、 &lt;code&gt;av_store&lt;/code&gt; （以下で説明）を使用して、これらの新しい要素に値を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="e729774b9950231de8aa37e9ccc295a6e06651f9" translate="yes" xml:space="preserve">
          <source>These should be familiar operations, with the exception of &lt;code&gt;av_unshift&lt;/code&gt;. This routine adds &lt;code&gt;num&lt;/code&gt; elements at the front of the array with the &lt;code&gt;undef&lt;/code&gt; value. You must then use &lt;code&gt;av_store&lt;/code&gt; (described below) to assign values to these new elements.</source>
          <target state="translated">これらは、 &lt;code&gt;av_unshift&lt;/code&gt; を除いて、使い慣れた操作である必要があります。このルーチンは、配列の先頭に &lt;code&gt;undef&lt;/code&gt; 値を持つ &lt;code&gt;num&lt;/code&gt; 要素を追加します。次に、 &lt;code&gt;av_store&lt;/code&gt; （以下で説明）を使用して、これらの新しい要素に値を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="8f249c892c517536f796cbacefae284ca0ae8032" translate="yes" xml:space="preserve">
          <source>These should give you an overall feel for how modules are laid out and written.</source>
          <target state="translated">これらは、モジュールがどのようにレイアウトされ、どのように書かれているかの全体的な感覚を提供してくれるはずです。</target>
        </trans-unit>
        <trans-unit id="9a888f57551ca71c1272e83f90d05d460b30fbf3" translate="yes" xml:space="preserve">
          <source>These signal to a formatter that if it is to hyphenate &quot;sigaction&quot; or &quot;manuscript&quot;, then it should be done as &quot;sig-</source>
          <target state="translated">これらは,もし &quot;sigaction &quot;や &quot;manuscript &quot;をハイフン化する場合は,&quot;sig-&quot;とするべきであることをフォーマッタに合図している.</target>
        </trans-unit>
        <trans-unit id="a76776d9b84dd64fcd8c2f12ffb416173943a78e" translate="yes" xml:space="preserve">
          <source>These signals usually indicate a serious problem with the Perl interpreter or with your script. They are ABRT, BUS, EMT, FPE, ILL, QUIT, SEGV, SYS and TRAP.</source>
          <target state="translated">これらのシグナルは通常、Perl インタプリタやスクリプトに重大な問題があることを示しています。ABRT,BUS,EMT,FPE,ILL,QUIT,SEGV,SYS,TRAP です。</target>
        </trans-unit>
        <trans-unit id="7ee071669b1efa68f9a3156de49d5e707921d24a" translate="yes" xml:space="preserve">
          <source>These solutions can have far-reaching effects on your system and on the way you write your CGI programs, so investigate them with care.</source>
          <target state="translated">これらのソリューションは、システムやCGIプログラムの書き方に大きな影響を与える可能性がありますので、注意して調査してください。</target>
        </trans-unit>
        <trans-unit id="b7b244316194399450de143deaa053b425f44f52" translate="yes" xml:space="preserve">
          <source>These special patterns are generally of the form &lt;code&gt;(*&lt;i&gt;VERB&lt;/i&gt;:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt;. Unless otherwise stated the</source>
          <target state="translated">これらの特殊なパターンは、通常、 &lt;code&gt;(*&lt;i&gt;VERB&lt;/i&gt;:&lt;i&gt;arg&lt;/i&gt;)&lt;/code&gt; の形式です。特に明記しない限り、</target>
        </trans-unit>
        <trans-unit id="af1c9d3db11663506b814ed4474ccb898e81f0dd" translate="yes" xml:space="preserve">
          <source>These special patterns are generally of the form &lt;code&gt;(*VERB:ARG)&lt;/code&gt;. Unless otherwise stated the ARG argument is optional; in some cases, it is forbidden.</source>
          <target state="translated">これらの特別なパターンは、一般的に &lt;code&gt;(*VERB:ARG)&lt;/code&gt; という形式です。特に明記しない限り、ARG引数はオプションです。いくつかのケースでは、それは禁止されています。</target>
        </trans-unit>
        <trans-unit id="44f08bb0d22471168dee4b6292fc949cf275107b" translate="yes" xml:space="preserve">
          <source>These special values become JSON true and JSON false values, respectively. You can also use &lt;code&gt;\1&lt;/code&gt; and &lt;code&gt;\0&lt;/code&gt; directly if you want.</source>
          <target state="translated">これらの特別な値は、それぞれJSONtrue値とJSONfalse値になります。必要に応じて、 &lt;code&gt;\1&lt;/code&gt; と &lt;code&gt;\0&lt;/code&gt; 直接使用することもできます。</target>
        </trans-unit>
        <trans-unit id="ae6fd84e089df12e602215034c3af5ac8fb7e11a" translate="yes" xml:space="preserve">
          <source>These special variables, like the &lt;code&gt;%+&lt;/code&gt; hash and the numbered match variables (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; , etc.) are dynamically scoped until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;%+&lt;/code&gt; ハッシュや番号付き一致変数（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; など）のようなこれらの特殊変数は、囲んでいるブロックの終わりまで、または次の一致が成功するまでのいずれか早い方まで動的にスコープされます。（&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;perlsynの複合文を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="f99b2f0c65b0d18630113afe2aefcc29ab8a0144" translate="yes" xml:space="preserve">
          <source>These special variables, like the &lt;code&gt;%+&lt;/code&gt; hash and the numbered match variables (&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;,</source>
          <target state="translated">以下のようなこれらの特殊変数、 &lt;code&gt;%+&lt;/code&gt; ハッシュと番号が一致変数（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="ba4f20c17b5b03a6a3deb3a04503955765039642" translate="yes" xml:space="preserve">
          <source>These strengths make it especially popular with web developers and system administrators. Mathematicians, geneticists, journalists, managers and many other people also use Perl.</source>
          <target state="translated">これらの強みから、Web開発者やシステム管理者に特に人気があります。数学者、遺伝学者、ジャーナリスト、管理者、その他多くの人々もPerlを使用しています。</target>
        </trans-unit>
        <trans-unit id="a952f4bd002dc5bdafb796a94c6eaa4765c9b45b" translate="yes" xml:space="preserve">
          <source>These strings do not match /\Bam\B/</source>
          <target state="translated">これらの文字列は、/\Bam\B/と一致しません。</target>
        </trans-unit>
        <trans-unit id="2125a4453223ddc6316d0fee4d859469467def9f" translate="yes" xml:space="preserve">
          <source>These strings do not match /\b'\b/.</source>
          <target state="translated">これらの文字列は、/\b'\b/と一致しません。</target>
        </trans-unit>
        <trans-unit id="8aa64b62307f4ac9360d6b96b7d4a2888dc9ba0f" translate="yes" xml:space="preserve">
          <source>These strings do not match /\bPerl\b/.</source>
          <target state="translated">これらの文字列は、/\bPerl\b/と一致しません。</target>
        </trans-unit>
        <trans-unit id="1ece96fea144561ec8d240482b56438a3b8cd021" translate="yes" xml:space="preserve">
          <source>These subroutines are only visible within the block in which they are declared, and only after that declaration:</source>
          <target state="translated">これらのサブルーチンは宣言されたブロック内でのみ表示され、その宣言後にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="5002f9badee48e82e2e716cfadae24bcbea4d597" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Level&lt;/code&gt; option in the constructor.</source>
          <target state="translated">これらの記号定数は、コンストラクターの &lt;code&gt;Level&lt;/code&gt; オプションで使用されます。</target>
        </trans-unit>
        <trans-unit id="de652943440f246885efed6bc50624dc94d59ab4" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Method&lt;/code&gt; option in the constructor.</source>
          <target state="translated">これらの記号定数は、コンストラクターの[ &lt;code&gt;Method&lt;/code&gt; ]オプションで使用されます。</target>
        </trans-unit>
        <trans-unit id="4ec9419fff6178cfe016f55595d7a90364f97f63" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;Strategy&lt;/code&gt; option in the constructor.</source>
          <target state="translated">これらの記号定数は、コンストラクターの &lt;code&gt;Strategy&lt;/code&gt; オプションによって使用されます。</target>
        </trans-unit>
        <trans-unit id="09599ebf73a41d7f3fd327344d88fceb70681aab" translate="yes" xml:space="preserve">
          <source>These symbolic constants are used by the &lt;code&gt;flush&lt;/code&gt; method.</source>
          <target state="translated">これらの記号定数は、 &lt;code&gt;flush&lt;/code&gt; メソッドで使用されます。</target>
        </trans-unit>
        <trans-unit id="430e03746fb928435d7aa08e0e3eea945da77d4a" translate="yes" xml:space="preserve">
          <source>These symbols appear before the op-name, and indicate the B:: namespace that represents the ops in your Perl code.</source>
          <target state="translated">これらのシンボルは op-name の前に表示され、Perl コードの中で ops を表す B::名前空間を示しています。</target>
        </trans-unit>
        <trans-unit id="aded896deefbdaf418ca756d53862b007b01f8b9" translate="yes" xml:space="preserve">
          <source>These terms are interpreted as described in IETF RFC 2119.</source>
          <target state="translated">これらの用語は、IETF RFC 2119に記載されているように解釈されます。</target>
        </trans-unit>
        <trans-unit id="2dbd7a997bbaaa84741a5e1fbd14e323c239d540" translate="yes" xml:space="preserve">
          <source>These terms are your choice of any of (1) the Perl Artistic Licence, or (2) version 2 of the GNU General Public License as published by the Free Software Foundation, or (3) any later version of the GNU General Public License.</source>
          <target state="translated">これらの条件は、(1)Perl Artistic Licence、(2)Free Software Foundationによって発行されたGNU General Public Licenseのバージョン2、または(3)GNU General Public Licenseのそれ以降のバージョンのいずれかを選択することになります。</target>
        </trans-unit>
        <trans-unit id="5c298e17caacd4174da139fecae9a62cf22ed5cc" translate="yes" xml:space="preserve">
          <source>These tests are expected to succeed. Usually, most or all of your tests are in this category. If a normal test doesn't succeed, then that means that something is</source>
          <target state="translated">これらのテストは成功することが期待されています。通常、ほとんどまたはすべてのテストがこのカテゴリに属します。通常のテストが成功しない場合、それは何かが</target>
        </trans-unit>
        <trans-unit id="07325952f04a521e228140b025365f61c44af25f" translate="yes" xml:space="preserve">
          <source>These three macros are used to change a memory buffer size or to free a piece of memory no longer needed. The arguments to &lt;code&gt;Renew&lt;/code&gt; and &lt;code&gt;Renewc&lt;/code&gt; match those of &lt;code&gt;New&lt;/code&gt; and &lt;code&gt;Newc&lt;/code&gt; with the exception of not needing the &quot;magic cookie&quot; argument.</source>
          <target state="translated">これらの3つのマクロは、メモリバッファーサイズを変更したり、不要になったメモリを解放するために使用されます。引数はする &lt;code&gt;Renew&lt;/code&gt; と &lt;code&gt;Renewc&lt;/code&gt; はのものと一致する &lt;code&gt;New&lt;/code&gt; と &lt;code&gt;Newc&lt;/code&gt; を「マジッククッキー」引数を必要としないを除いて。</target>
        </trans-unit>
        <trans-unit id="3b6ba4dd1926405bd4af1077435f09d7c0a86a11" translate="yes" xml:space="preserve">
          <source>These three macros are used to move, copy, or zero out previously allocated memory. The &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; arguments point to the source and destination starting points. Perl will move, copy, or zero out &lt;code&gt;number&lt;/code&gt; instances of the size of the &lt;code&gt;type&lt;/code&gt; data structure (using the &lt;code&gt;sizeof&lt;/code&gt; function).</source>
          <target state="translated">これらの3つのマクロは、以前に割り当てられたメモリを移動、コピー、または消去するために使用されます。 &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;dest&lt;/code&gt; 引数は、送信元と宛先の開始点を指します。Perlは、移動、コピー、またはアウトゼロであろう &lt;code&gt;number&lt;/code&gt; のサイズのインスタンス &lt;code&gt;type&lt;/code&gt; （使用データ構造 &lt;code&gt;sizeof&lt;/code&gt; 機能）。</target>
        </trans-unit>
        <trans-unit id="335c760b89ccd866bd4e5cd7ec4e5ef4c599cbd4" translate="yes" xml:space="preserve">
          <source>These two export tags globally modify the default flags that bsd_glob() and, except on VMS, Perl's built-in &lt;code&gt;&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; operator use. &lt;code&gt;GLOB_NOCASE&lt;/code&gt; is turned on or off, respectively.</source>
          <target state="translated">これら2つのエクスポートタグは、bsd_glob（）と、VMSを除いて、Perlの組み込み &lt;code&gt;&lt;a href=&quot;../functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 演算子が使用するデフォルトフラグをグローバルに変更します。 &lt;code&gt;GLOB_NOCASE&lt;/code&gt; はそれぞれオンまたはオフになります。</target>
        </trans-unit>
        <trans-unit id="2f0953e19b1283bac80bee4d4c7b6b45f4e0bf61" translate="yes" xml:space="preserve">
          <source>These two export tags globally modify the default flags that bsd_glob() and, except on VMS, Perl's built-in &lt;code&gt;glob&lt;/code&gt; operator use. &lt;code&gt;GLOB_NOCASE&lt;/code&gt; is turned on or off, respectively.</source>
          <target state="translated">これらの2つのエクスポートタグは、bsd_glob（）が使用するデフォルトのフラグをグローバルに変更し、VMSを除き、Perlの組み込み &lt;code&gt;glob&lt;/code&gt; オペレーターが使用します。 &lt;code&gt;GLOB_NOCASE&lt;/code&gt; は、それぞれオンまたはオフになります。</target>
        </trans-unit>
        <trans-unit id="9660fc7e9efd93a7abe465c81de57e11a5045a23" translate="yes" xml:space="preserve">
          <source>These two features are available starting with Perl 5.16.</source>
          <target state="translated">これら2つの機能はPerl 5.16から利用可能です。</target>
        </trans-unit>
        <trans-unit id="fa5480402538907c3c246c95ce18885b4ae5225b" translate="yes" xml:space="preserve">
          <source>These two handles are held in the array part of the GLOB until either &lt;code&gt;reader&lt;/code&gt; or &lt;code&gt;writer&lt;/code&gt; is called.</source>
          <target state="translated">これらの2つのハンドルは、 &lt;code&gt;reader&lt;/code&gt; または &lt;code&gt;writer&lt;/code&gt; が呼び出されるまで、GLOBの配列部分に保持されます。</target>
        </trans-unit>
        <trans-unit id="b0f87921e5dc8828d5a6d9ea360bbab6bf450027" translate="yes" xml:space="preserve">
          <source>These two lower level macros are defined, but must only be used when dealing with keys that are not &lt;code&gt;SV*&lt;/code&gt; s:</source>
          <target state="translated">次の2つの下位レベルマクロが定義されていますが、 &lt;code&gt;SV*&lt;/code&gt; ではないキーを扱う場合にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b2d573ca29281a8113cbc1782d1b335ee12feb43" translate="yes" xml:space="preserve">
          <source>These two lower level macros are defined, but must only be used when dealing with keys that are not &lt;code&gt;SV*&lt;/code&gt;s:</source>
          <target state="translated">これらの2つの下位レベルのマクロは定義されていますが、 &lt;code&gt;SV*&lt;/code&gt; ではないキーを処理する場合にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ca39330e5c20e1239e2de6584e211ecc882f376" translate="yes" xml:space="preserve">
          <source>These two methods are discussed in the section &quot;Controlling Lookup Failure&quot;.</source>
          <target state="translated">これら2つの方法については、「ルックアップ失敗の制御」の項で説明しています。</target>
        </trans-unit>
        <trans-unit id="0b5a74bc9d562e1d07daa7fdb3ddf9da715c3433" translate="yes" xml:space="preserve">
          <source>These two methods return the pad names, using B::SPECIAL objects for null pointers and B::PADNAME objects otherwise.</source>
          <target state="translated">これら2つのメソッドは、NULLポインタにはB::SPECIALオブジェクトを使用し、それ以外の場合はB::PADNAMEオブジェクトを使用してパッド名を返します。</target>
        </trans-unit>
        <trans-unit id="74ded97cfff6de6cbb1491c5e4159e3babfbcd36" translate="yes" xml:space="preserve">
          <source>These two parameters are used to specify the ambient pragmas in the format used by the special variables $^H and ${^WARNING_BITS}.</source>
          <target state="translated">この2つのパラメータは、特殊変数$^Hと${^WARNING_BITS}が使用する形式のアンビエントプラ グマを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="668c2e486db55d10e5d748ec32a4297d24e80364" translate="yes" xml:space="preserve">
          <source>These two values for</source>
          <target state="translated">のこの2つの値は</target>
        </trans-unit>
        <trans-unit id="fded399d428f7e457d56603aa714f9152134fea1" translate="yes" xml:space="preserve">
          <source>These utilities help manage extra Perl modules that don't come with the perl distribution.</source>
          <target state="translated">これらのユーティリティは、Perl ディストリビューションに付属していない Perl モジュールを管理するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="25a3a72bd29e8059a94921c647bd6ce419cc4377" translate="yes" xml:space="preserve">
          <source>These values will not change for the duration of the tied hash</source>
          <target state="translated">これらの値は、タイドハッシュの期間中は変更されません。</target>
        </trans-unit>
        <trans-unit id="32b1d023c49a0c39aa9dd2f2164ec0cee979dc1b" translate="yes" xml:space="preserve">
          <source>These variables are global to an entire process. They are shared between all interpreters and all threads in a process.</source>
          <target state="translated">これらの変数はプロセス全体に対してグローバルです。これらの変数は、プロセス内のすべてのインタプリタとすべてのスレッドの間で共有されます。</target>
        </trans-unit>
        <trans-unit id="c34e796e9875a610406c8f84f6c6846160af7938" translate="yes" xml:space="preserve">
          <source>These variables are global to an entire process. They are shared between all interpreters and all threads in a process. Any variables not documented here may be changed or removed without notice, so don't use them! If you feel you really do need to use an unlisted variable, first send email to &lt;a href=&quot;mailto:perl5-porters@perl.org&quot;&gt;perl5-porters@perl.org&lt;/a&gt;. It may be that someone there will point out a way to accomplish what you need without using an internal variable. But if not, you should get a go-ahead to document and then use the variable.</source>
          <target state="translated">これらの変数は、プロセス全体に対してグローバルです。これらは、プロセス内のすべてのインタープリターとすべてのスレッドの間で共有されます。ここに記載されていない変数は、予告なしに変更または削除される可能性があるため、使用しないでください。リストにない変数を本当に使用する必要があると思われる場合は、最初に&lt;a href=&quot;mailto:perl5-porters@perl.org&quot;&gt;perl5-porters@perl.org&lt;/a&gt;に電子メールを送信してください。そこにいる誰かが、内部変数を使用せずに必要なことを達成する方法を指摘するかもしれません。ただし、そうでない場合は、ドキュメントを作成してから変数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="53f5ad69f1f855f312a7f31903221b231e10b532" translate="yes" xml:space="preserve">
          <source>These variables are read-only and dynamically-scoped, unless we note otherwise.</source>
          <target state="translated">これらの変数は、特に注意しない限り、読み取り専用で動的にスコープされます。</target>
        </trans-unit>
        <trans-unit id="2a1de91c215bb3911b0f9767ad8cb63c7c66902f" translate="yes" xml:space="preserve">
          <source>These variables are read-only and dynamically-scoped.</source>
          <target state="translated">これらの変数は読み取り専用で、動的にスコープされます。</target>
        </trans-unit>
        <trans-unit id="c7b31baa2b679d0f632af8871cff4bfcc11fe664" translate="yes" xml:space="preserve">
          <source>These variables are used not only to represent Perl-space variables, but also any constants in the code, as well as some structures completely internal to Perl. The symbol table, for instance, is an ordinary Perl hash. Your code is represented by an SV as it's read into the parser; any program files you call are opened via ordinary Perl filehandles, and so on.</source>
          <target state="translated">これらの変数は Perl 空間変数だけでなく、コード内のあらゆる定数や Perl の内部構造体を表すためにも使用されます。例えば、シンボルテーブルは通常の Perl のハッシュです。あなたのコードは、パーサに読み込まれる際に SV で表現され、呼び出したプログラム・ファイルは通常の Perl ファイルハンドルで開かれます。</target>
        </trans-unit>
        <trans-unit id="82a728707d8b23d45f027d3109e809864b998b05" translate="yes" xml:space="preserve">
          <source>These variables determine the default state of the object created by calling the &lt;code&gt;new&lt;/code&gt; method, but cannot be used to alter the state of the object thereafter. The equivalent method names should be used instead to query or set the internal state of the object.</source>
          <target state="translated">これらの変数は、 &lt;code&gt;new&lt;/code&gt; メソッドの呼び出しによって作成されたオブジェクトのデフォルトの状態を決定しますが、その後のオブジェクトの状態の変更には使用できません。オブジェクトの内部状態を照会または設定するには、代わりに同等のメソッド名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="21d06b0dd7e2966bcc2949ad21cc8cf11e259059" translate="yes" xml:space="preserve">
          <source>These variables provide information about the current interpreter state.</source>
          <target state="translated">これらの変数は、現在のインタプリタの状態に関する情報を提供します。</target>
        </trans-unit>
        <trans-unit id="44c61b22b7df4c04e51047feabc1fcdef03de656" translate="yes" xml:space="preserve">
          <source>These various prefixes correspond to the &lt;a href=&quot;http://man.he.net/man3/fopen&quot;&gt;fopen(3)&lt;/a&gt; modes of &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;r+&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt;, &lt;code&gt;w+&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;a+&lt;/code&gt;.</source>
          <target state="translated">これらのさまざまなプレフィックスは、 &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;r+&lt;/code&gt; 、 &lt;code&gt;w&lt;/code&gt; 、 &lt;code&gt;w+&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、および &lt;code&gt;a+&lt;/code&gt; の&lt;a href=&quot;http://man.he.net/man3/fopen&quot;&gt;fopen（3）&lt;/a&gt;モードに対応します。</target>
        </trans-unit>
        <trans-unit id="3ee1fe032de721a344cba89480c67e716abbee89" translate="yes" xml:space="preserve">
          <source>These various prefixes correspond to the fopen(3) modes of &lt;code&gt;r&lt;/code&gt; , &lt;code&gt;r+&lt;/code&gt; , &lt;code&gt;w&lt;/code&gt; , &lt;code&gt;w+&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , and &lt;code&gt;a+&lt;/code&gt; .</source>
          <target state="translated">これらのさまざまなプレフィックスは、 &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;r+&lt;/code&gt; 、 &lt;code&gt;w&lt;/code&gt; 、 &lt;code&gt;w+&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、および &lt;code&gt;a+&lt;/code&gt; のfopen（3）モードに対応しています。</target>
        </trans-unit>
        <trans-unit id="ab874a84fee8b167d507adabcea364962ee19104" translate="yes" xml:space="preserve">
          <source>These vars take 3 forms:</source>
          <target state="translated">これらの変数には3つの形式があります。</target>
        </trans-unit>
        <trans-unit id="b607e9f6b449fd1b8f047ca8c774e440f540bc1c" translate="yes" xml:space="preserve">
          <source>These were was released in Test::More 0.82, and first shipped with Perl in 5.10.1 as part of Test::More 0.92.</source>
          <target state="translated">これらはTest::More 0.82でリリースされ、5.10.1でTest::More 0.92の一部としてPerlと一緒に出荷されました。</target>
        </trans-unit>
        <trans-unit id="dbff7e2745b850ca42a72fcb2a24d874bb4460d2" translate="yes" xml:space="preserve">
          <source>These will take care of 64-bit integers and long doubles. For example:</source>
          <target state="translated">これらは64ビット整数と長い倍数を処理します。例えば</target>
        </trans-unit>
        <trans-unit id="ac19dfbee94adc36e2c9732558c6cd8eefc750a8" translate="yes" xml:space="preserve">
          <source>These will tell you if you truly have an integer, double, or string pointer stored in your SV. The &quot;p&quot; stands for private.</source>
          <target state="translated">これらは、SV に格納されているポインタが本当に整数、二重、文字列のいずれかであるかどうかを教えてくれます。p」はprivateの略です。</target>
        </trans-unit>
        <trans-unit id="01c10ede2ffed1b0b1b81928ac4993a2913e0a5d" translate="yes" xml:space="preserve">
          <source>These work as in normal strings.</source>
          <target state="translated">これらは通常の文字列と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="187ee14d57ea8ada7fd976b56339ad22b9d5a13e" translate="yes" xml:space="preserve">
          <source>These would be split and each converted to a prerequisite with a minimum version of zero.</source>
          <target state="translated">これらは分割され、それぞれがゼロの最小バージョンの前提条件に変換されます。</target>
        </trans-unit>
        <trans-unit id="38675552ee022f79a520bb1f28a37d1e98aa3227" translate="yes" xml:space="preserve">
          <source>They all return true if the test passed, false if the test failed.</source>
          <target state="translated">これらはすべて、テストが合格した場合はtrueを返し、失敗した場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="8c3cf570334019dd16b6da35836503ad0b730443" translate="yes" xml:space="preserve">
          <source>They also return and accept whole hash entries (&lt;code&gt;HE*&lt;/code&gt; ), making their use more efficient (since the hash number for a particular string doesn't have to be recomputed every time). See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for detailed descriptions.</source>
          <target state="translated">また、ハッシュエントリ全体（ &lt;code&gt;HE*&lt;/code&gt; ）を返し、受け入れて、より効率的に使用します（特定の文字列のハッシュ番号を毎回再計算する必要がないため）。詳細については&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="48ac4e95d836a1020bf0ae83cd70b2eeacf64b7e" translate="yes" xml:space="preserve">
          <source>They also return and accept whole hash entries (&lt;code&gt;HE*&lt;/code&gt;), making their use more efficient (since the hash number for a particular string doesn't have to be recomputed every time). See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for detailed descriptions.</source>
          <target state="translated">また、ハッシュエントリ全体（ &lt;code&gt;HE*&lt;/code&gt; ）を返し、受け入れるため、使用効率が向上します（特定の文字列のハッシュ番号を毎回再計算する必要がないため）。詳細な説明については、&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a25c349a57769dbafa1bf807ae04ad1d22921bb7" translate="yes" xml:space="preserve">
          <source>They are not exported and must be addressed using the full package name.</source>
          <target state="translated">これらはエクスポートされず、完全なパッケージ名を使用してアドレスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="82e0433b7d59191ca9d6b5b4f7f2c32e84b80d15" translate="yes" xml:space="preserve">
          <source>They are suspected to be compiler errors (at least the shuffle.t failure is known from some IRIX 6 setups) and math library errors (the Trig.t failure), but since IRIX 5 is long since end-of-lifed, further fixes for the IRIX are unlikely. If you can get gcc for 5.3, you could try that, too, since gcc in IRIX 6 is a known workaround for at least the shuffle.t and sort.t failures.</source>
          <target state="translated">これらはコンパイラのエラー(少なくとも shuffle.t の失敗は IRIX 6 のいくつかのセットアップで確認されています)と数学ライブラリのエラー(Trig.t の失敗)が疑われていますが、IRIX 5 は既に寿命を迎えているので、IRIX のための更なる修正は期待できません。IRIX 6 の gcc は少なくとも shuffle.t と sort.t の失敗の回避策として知られているので、5.3 用の gcc を入手できれば、それも試すことができます。</target>
        </trans-unit>
        <trans-unit id="69688ab534f08d7044475644301b479b2c0aa07a" translate="yes" xml:space="preserve">
          <source>They are type specifiers, as detailed in &lt;a href=&quot;perldata&quot;&gt;perldata&lt;/a&gt;:</source>
          <target state="translated">これらは、&lt;a href=&quot;perldata&quot;&gt;perldataで&lt;/a&gt;詳述されているように、型指定子です。</target>
        </trans-unit>
        <trans-unit id="e0af70f00dfa3e42a5613047a29fed35339f3d84" translate="yes" xml:space="preserve">
          <source>They come in handy when you want to print or find the size of data.</source>
          <target state="translated">印刷したいときや、データの大きさを探したいときに便利です。</target>
        </trans-unit>
        <trans-unit id="af45a4b37483f2a06205c7d3d09277fb7f496321" translate="yes" xml:space="preserve">
          <source>They differ in how they behave if they have the same key as the default metadata. META_ADD will override the default value with its own. META_MERGE will merge its value with the default.</source>
          <target state="translated">これらは、デフォルトのメタデータと同じキーを持っている場合の挙動が異なります。META_ADDは、デフォルト値を独自の値で上書きします。META_MERGE は、その値をデフォルト値にマージします。</target>
        </trans-unit>
        <trans-unit id="38d5f7d4e163392c98f5f93a608be715596d63d6" translate="yes" xml:space="preserve">
          <source>They exist principally so that you can write code like:</source>
          <target state="translated">彼らは主に、あなたがコードを書くことができるように存在しています。</target>
        </trans-unit>
        <trans-unit id="1d5b76cad965b54d55da4f5003ea6633c3207e12" translate="yes" xml:space="preserve">
          <source>They look like they might have been meant to be the POSIX classes &lt;code&gt;[:alnum:]&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt;. If so, they should be written:</source>
          <target state="translated">それらは、POSIXクラス &lt;code&gt;[:alnum:]&lt;/code&gt; または &lt;code&gt;[:digit:]&lt;/code&gt; であることが意図されているように見えます。もしそうなら、それらは書かれるべきです：</target>
        </trans-unit>
        <trans-unit id="7317b86bbf49f550672235cb05f34f1bf614569a" translate="yes" xml:space="preserve">
          <source>They may be deprecated in future versions.</source>
          <target state="translated">これらは将来のバージョンでは非推奨となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9d9f866ec06430c109794c0b11daa6f4be4c1816" translate="yes" xml:space="preserve">
          <source>They may be expecting something completely different.</source>
          <target state="translated">全く違うものを期待しているのかもしれません。</target>
        </trans-unit>
        <trans-unit id="330c7e5216d53f5b33c24e5c7f8fd3d4ead54c44" translate="yes" xml:space="preserve">
          <source>They seem to be caused by broken system header files, and also other open source projects are seeing them. The following HP-UX patches should make the warnings go away:</source>
          <target state="translated">これらの警告は、壊れたシステムヘッダファイルが原因のようで、他のオープンソースプロジェクトでも見られています。以下の HP-UX パッチで警告が消えるはずです。</target>
        </trans-unit>
        <trans-unit id="b797d5622b1d1393375da6062407cd69c0ce1eae" translate="yes" xml:space="preserve">
          <source>They work somewhat like compiler directives (pragmata) in that they tend to affect the compilation of your program, and thus will usually work well only when used within a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. Most of these are lexically scoped, so an inner BLOCK may countermand them by saying:</source>
          <target state="translated">これらは、プログラムのコンパイルに影響を与える傾向があるという点で、コンパイラディレクティブ（プラグマ）のように機能します。そのため、通常、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 内で使用した場合、または &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 内で使用した場合にのみ正常に機能します。これらのほとんどはレキシカルにスコープされているため、内側のBLOCKは次のようにして対抗できます。</target>
        </trans-unit>
        <trans-unit id="0fbe1e3187d25099c55738d9668bd711bb597a03" translate="yes" xml:space="preserve">
          <source>They work somewhat like compiler directives (pragmata) in that they tend to affect the compilation of your program, and thus will usually work well only when used within a &lt;code&gt;use&lt;/code&gt;, or &lt;code&gt;no&lt;/code&gt;. Most of these are lexically scoped, so an inner BLOCK may countermand them by saying:</source>
          <target state="translated">彼らはあなたのプログラムのコンパイルに影響を与える傾向がありませんので、通常の範囲内で使用する場合にのみうまくいくように彼らはややコンパイラディレクティブ（プラグマ）のように動作し &lt;code&gt;use&lt;/code&gt; 、または &lt;code&gt;no&lt;/code&gt; 。これらのほとんどは字句スコープであるため、内部ブロックは次のように言ってそれらを打ち消す可能性があります。</target>
        </trans-unit>
        <trans-unit id="6abf5248bc6675a47a3988cb21c2af942a4be9d1" translate="yes" xml:space="preserve">
          <source>They works like the same name operators as theirs.</source>
          <target state="translated">彼らは彼らと同じ名前の演算子のように動作します。</target>
        </trans-unit>
        <trans-unit id="dd7133f0a4178555cc80821515a5b2265342ef9d" translate="yes" xml:space="preserve">
          <source>They're opcode specific, and occur less often than the public ones, so they're represented by short mnemonics instead of single-chars; see B::Op_private and</source>
          <target state="translated">これらはオペコード固有のもので、公開されているものよりも発生頻度が低いため、1文字ではなく短いニーモニックで表現されています;B::Op_private および</target>
        </trans-unit>
        <trans-unit id="0131651c3742a3954926cbf8ce6d20cf77a6751b" translate="yes" xml:space="preserve">
          <source>Things not effected by this flag</source>
          <target state="translated">このフラグの影響を受けないもの</target>
        </trans-unit>
        <trans-unit id="c1537a4a381e27d6bdd2214d8f21c4c16bc119e0" translate="yes" xml:space="preserve">
          <source>Things that are broken or just don't work quite right.</source>
          <target state="translated">壊れていたり、うまく機能しないもの。</target>
        </trans-unit>
        <trans-unit id="a528372aced54ab7da812bd13e4c896f3899419e" translate="yes" xml:space="preserve">
          <source>Things that are effected by this flag</source>
          <target state="translated">このフラグの影響を受けるもの</target>
        </trans-unit>
        <trans-unit id="1e84de00a451ba7e5c811ee4e926df7205dd8b28" translate="yes" xml:space="preserve">
          <source>Things that are formatter dependant</source>
          <target state="translated">フォーマッターに依存するもの</target>
        </trans-unit>
        <trans-unit id="731699b64ef1b2479598864f867653535a2b0bbe" translate="yes" xml:space="preserve">
          <source>Things that make Perl easier to learn: Unix experience, almost any kind of programming experience, an understanding of regular expressions, and the ability to understand other people's code. If there's something you need to do, then it's probably already been done, and a working example is usually available for free. Don't forget Perl modules, either. They're discussed in Part 3 of this FAQ, along with &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;CPAN&lt;/a&gt;, which is discussed in Part 2.</source>
          <target state="translated">Perlを学習しやすくするもの：Unixの経験、ほとんどすべての種類のプログラミング経験、正規表現の理解、他の人のコードを理解する能力。あなたがやらなければならないことがあるなら、それはおそらくすでに行われており、実用的なサンプルは通常無料で利用できます。 Perlモジュールも忘れないでください。これらは、このFAQのパート3で説明されています&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;。CPAN&lt;/a&gt;はパート2で説明されています。</target>
        </trans-unit>
        <trans-unit id="6bcc1ca5e0a5ecd67da294c2c8f1e99255fb0dfb" translate="yes" xml:space="preserve">
          <source>Things that make Perl easier to learn: Unix experience, almost any kind of programming experience, an understanding of regular expressions, and the ability to understand other people's code. If there's something you need to do, then it's probably already been done, and a working example is usually available for free. Don't forget Perl modules, either. They're discussed in Part 3 of this FAQ, along with &lt;a href=&quot;http://www.cpan.org/&quot;&gt;CPAN&lt;/a&gt;, which is discussed in Part 2.</source>
          <target state="translated">Perlの学習を容易にするもの：Unixの経験、ほぼすべての種類のプログラミングの経験、正規表現の理解、および他の人のコードを理解する能力。やらなければならないことがあれば、それはおそらくすでに行われており、実際の例は通常無料で入手できます。 Perlモジュールも忘れないでください。これらは、パート2で説明されている&lt;a href=&quot;http://www.cpan.org/&quot;&gt;CPAN&lt;/a&gt;とともに、このFAQのパート3で説明されています。</target>
        </trans-unit>
        <trans-unit id="d9717c58dca00ca4e0fdd51bb342bee53c9f4f98" translate="yes" xml:space="preserve">
          <source>Things that need to be done to improve this document.</source>
          <target state="translated">この文書を改善するために必要なこと</target>
        </trans-unit>
        <trans-unit id="8bbe6bf4aeb5dea432e939ae88abe2437f8000be" translate="yes" xml:space="preserve">
          <source>Things to take special care with, sometimes called WARNINGS.</source>
          <target state="translated">特に気をつけるべきことは、「警告」と呼ばれることもあります。</target>
        </trans-unit>
        <trans-unit id="f330d2b9426f91894c132eec7839a297e7c3f2bb" translate="yes" xml:space="preserve">
          <source>Think about reusability. Why waste brainpower on a one-shot when you might want to do something like it again? Consider generalizing your code. Consider writing a module or object class. Consider making your code run cleanly with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; (or &lt;b&gt;-w&lt;/b&gt;) in effect. Consider giving away your code. Consider changing your whole world view. Consider... oh, never mind.</source>
          <target state="translated">再利用性について考えてください。もう一度同じようなことをしたいと思うかもしれないのに、なぜワンショットで頭脳を無駄にするのですか？コードを一般化することを検討してください。モジュールまたはオブジェクトクラスの作成を検討してください。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; してコードをクリーンに実行し、警告（または&lt;b&gt;-w&lt;/b&gt;）を有効にすることを検討してください。コードを配布することを検討してください。全世界の見方を変えることを検討してください。考えてみてください&amp;hellip;ああ、気にしないでください。</target>
        </trans-unit>
        <trans-unit id="c82b5076931a791a0eeb9910a5bd8e3a5422353a" translate="yes" xml:space="preserve">
          <source>Think about reusability. Why waste brainpower on a one-shot when you might want to do something like it again? Consider generalizing your code. Consider writing a module or object class. Consider making your code run cleanly with &lt;code&gt;use strict&lt;/code&gt; and &lt;code&gt;use warnings&lt;/code&gt; in effect. Consider giving away your code. Consider changing your whole world view. Consider... oh, never mind.</source>
          <target state="translated">再利用性について考えてください。もう一度そのようなことをしたいと思うかもしれないのに、なぜワンショットで頭脳を無駄にするのですか？コードを一般化することを検討してください。モジュールまたはオブジェクトクラスの作成を検討してください。 &lt;code&gt;use strict&lt;/code&gt; に &lt;code&gt;use warnings&lt;/code&gt; を有効にして、コードをクリーンに実行することを検討してください。コードを配布することを検討してください。全世界観を変えることを検討してください。考えてみてください...ああ、気にしないでください。</target>
        </trans-unit>
        <trans-unit id="369cf00ca2016a53c53652dbdfad94b27946d096" translate="yes" xml:space="preserve">
          <source>Think carefully about whether OO is appropriate for your module. Gratuitous object orientation results in complex APIs which are difficult for the average module user to understand or use.</source>
          <target state="translated">OO がモジュールに適しているかどうかを慎重に考えてください。オブジェクトの方向性を重視すると、平均的なモジュールのユーザーが理解したり使用したりするのが困難な複雑なAPIになってしまいます。</target>
        </trans-unit>
        <trans-unit id="d05ca6e0d80ee8bcc4977d0ae97da44f7a9ad4e9" translate="yes" xml:space="preserve">
          <source>Think of these macros as working a bit like &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; in Perl to limit the scope of local variables.</source>
          <target state="translated">これらのマクロは、ローカル変数のスコープを制限するために、Perlの &lt;code&gt;{&lt;/code&gt; および &lt;code&gt;}&lt;/code&gt; のように機能すると考えてください。</target>
        </trans-unit>
        <trans-unit id="b798a2f7f99599171fc59b43924703f9a2be020d" translate="yes" xml:space="preserve">
          <source>Thinking of mixing &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and threads? Please lie down and wait until the feeling passes. Be aware that the semantics of &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; vary between platforms. For example, some Unix systems copy all the current threads into the child process, while others only copy the thread that called &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;. You have been warned!</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; とスレッドを混合することを考えていますか？横になった気分になるまでお待ちください。 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; のセマンティクスはプラットフォームによって異なることに注意してください。たとえば、一部のUnixシステムは現在のすべてのスレッドを子プロセスにコピーし、他のシステムは &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; を呼び出したスレッドのみをコピーします。警告されました！</target>
        </trans-unit>
        <trans-unit id="d855fc6f4fe4cadf88e9af157138a372400d46cf" translate="yes" xml:space="preserve">
          <source>Thinking of mixing &lt;code&gt;fork()&lt;/code&gt; and threads? Please lie down and wait until the feeling passes. Be aware that the semantics of &lt;code&gt;fork()&lt;/code&gt; vary between platforms. For example, some Unix systems copy all the current threads into the child process, while others only copy the thread that called &lt;code&gt;fork()&lt;/code&gt;. You have been warned!</source>
          <target state="translated">&lt;code&gt;fork()&lt;/code&gt; とスレッドの混合を考えていますか？横になって気持ちがなくなるまでお待ちください。 &lt;code&gt;fork()&lt;/code&gt; のセマンティクスはプラットフォームによって異なることに注意してください。たとえば、一部のUnixシステムは現在のすべてのスレッドを子プロセスにコピーしますが、他のシステムは &lt;code&gt;fork()&lt;/code&gt; を呼び出したスレッドのみをコピーします。あなたは警告されました！</target>
        </trans-unit>
        <trans-unit id="55ee5f16e1e054ccf1ec34b584008166d240354f" translate="yes" xml:space="preserve">
          <source>Third Edition, revised by J. C. Dumbreck. Oxford University Press.</source>
          <target state="translated">第三版、J.C.ダンブレック著。オックスフォード大学出版局</target>
        </trans-unit>
        <trans-unit id="b2cb87c02d6ed6f908d60b7b75a5f67020a27ac2" translate="yes" xml:space="preserve">
          <source>Third:</source>
          <target state="translated">Third:</target>
        </trans-unit>
        <trans-unit id="7971e6a051104074fdae0f02322417b6eb5695a2" translate="yes" xml:space="preserve">
          <source>This</source>
          <target state="translated">This</target>
        </trans-unit>
        <trans-unit id="b2ba5f429f54422412e8d8cc932f13b88c985b41" translate="yes" xml:space="preserve">
          <source>This &quot;in all contexts&quot; construction is very common, and can be abbreviated, using the 'fail' key. This sets both the &lt;code&gt;scalar&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt; hints to the same value:</source>
          <target state="translated">この「すべてのコンテキストで」の構成は非常に一般的であり、「fail」キーを使用して省略できます。これにより、 &lt;code&gt;scalar&lt;/code&gt; ヒントと &lt;code&gt;list&lt;/code&gt; ヒントの両方が同じ値に設定されます。</target>
        </trans-unit>
        <trans-unit id="3b8ab74e7f407ff0613b1e22c57e79a02a3a70ca" translate="yes" xml:space="preserve">
          <source>This 'cheat sheet' is a handy reference, meant for beginning Perl programmers. Not everything is mentioned, but 195 features may already be overwhelming.</source>
          <target state="translated">この「チートシート」は、Perl プログラマの初心者のための便利なリファレンスです。すべてが記載されているわけではありませんが、195の機能はすでに圧倒されているかもしれません。</target>
        </trans-unit>
        <trans-unit id="b87ead78f18a2a4de0a885f72703b5402a2fe039" translate="yes" xml:space="preserve">
          <source>This &lt;b&gt;DOES NOT&lt;/b&gt; affect context on other hubs, only the hub used by the context will be affected.</source>
          <target state="translated">これは他のハブのコンテキストには影響し&lt;b&gt;ませ&lt;/b&gt;ん。コンテキストで使用されるハブのみが影響を受けます。</target>
        </trans-unit>
        <trans-unit id="70790687de96ba2a981057f320692cde5f07c030" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;$coderef&lt;/code&gt; is called before the one specified via &lt;code&gt;filter_json_object&lt;/code&gt;, if any. It gets passed the single value in the JSON object. If it returns a single value, it will be inserted into the data structure. If it returns nothing (not even &lt;code&gt;undef&lt;/code&gt; but the empty list), the callback from &lt;code&gt;filter_json_object&lt;/code&gt; will be called next, as if no single-key callback were specified.</source>
          <target state="translated">この &lt;code&gt;$coderef&lt;/code&gt; は、 &lt;code&gt;filter_json_object&lt;/code&gt; で指定されたものの前に呼び出されます（存在する場合）。JSONオブジェクトの単一の値が渡されます。単一の値を返す場合は、データ構造に挿入されます。何も返さない場合（ &lt;code&gt;undef&lt;/code&gt; でなく、空のリスト）、単一キーのコールバックが指定されていないかのように、 &lt;code&gt;filter_json_object&lt;/code&gt; からのコールバックが次に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="449deebd32ed5eaf74d8aec8711aa290af1210b0" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; is somewhat like &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; found in C, in that it is the opposite of read. The wrapper for the perl &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function is called &lt;code&gt;format_write&lt;/code&gt; . However, whilst the C &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function returns the number of bytes written, this &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; function simply returns true if successful (like &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;). A more C-like &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; (see above).</source>
          <target state="translated">この &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; は、Cで見られる &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 似ていますが、読み取りの反対です。perl &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数のラッパーは &lt;code&gt;format_write&lt;/code&gt; と呼ばれます。ただし、Cの &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数は書き込まれたバイト数を返しますが、この &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 関数は（ &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; のように）成功した場合は単にtrueを返します。よりC風の &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; です（上記を参照）。</target>
        </trans-unit>
        <trans-unit id="7f5f153f1937141026057a558986308f5230af60" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;IO::Socket::INET&lt;/code&gt;-style argument is ignored, except if it is defined but false. See the &lt;code&gt;IO::Socket::INET&lt;/code&gt; INCOMPATIBILITES section below.</source>
          <target state="translated">この &lt;code&gt;IO::Socket::INET&lt;/code&gt; スタイルの引数は、定義されているがfalseの場合を除いて、無視されます。以下の &lt;code&gt;IO::Socket::INET&lt;/code&gt; INETINCOMPATIBILITESセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="809a4dea69e66cbb56a6927382a1c7747ff2b245" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;POSIX::SigAction&lt;/code&gt; object is intended for use with the &lt;code&gt;POSIX::sigaction()&lt;/code&gt; function.</source>
          <target state="translated">この &lt;code&gt;POSIX::SigAction&lt;/code&gt; オブジェクトは、 &lt;code&gt;POSIX::sigaction()&lt;/code&gt; 関数で使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="4dae482e8849607cb08d3169246c6cbb9eb47f40" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;write&lt;/code&gt; is somewhat like &lt;code&gt;write&lt;/code&gt; found in C, in that it is the opposite of read. The wrapper for the perl &lt;code&gt;write&lt;/code&gt; function is called &lt;code&gt;format_write&lt;/code&gt;. However, whilst the C &lt;code&gt;write&lt;/code&gt; function returns the number of bytes written, this &lt;code&gt;write&lt;/code&gt; function simply returns true if successful (like &lt;code&gt;print&lt;/code&gt;). A more C-like &lt;code&gt;write&lt;/code&gt; is &lt;code&gt;syswrite&lt;/code&gt; (see above).</source>
          <target state="translated">この &lt;code&gt;write&lt;/code&gt; 幾分似ている &lt;code&gt;write&lt;/code&gt; がリードの反対であるという点で、Cに見られます。perl &lt;code&gt;write&lt;/code&gt; 関数のラッパーは &lt;code&gt;format_write&lt;/code&gt; と呼ばれます。ただし、C &lt;code&gt;write&lt;/code&gt; 関数は書き込まれたバイト数を返しますが、この &lt;code&gt;write&lt;/code&gt; 関数は成功した場合は単にtrueを返します（ &lt;code&gt;print&lt;/code&gt; のように）。よりCに似た &lt;code&gt;write&lt;/code&gt; は &lt;code&gt;syswrite&lt;/code&gt; です（上記を参照）。</target>
        </trans-unit>
        <trans-unit id="8a5e4636d7ee396c2538c58facc6d68cb4eb415b" translate="yes" xml:space="preserve">
          <source>This CPAN module lets you create application-level DTrace probes written in Perl.</source>
          <target state="translated">この CPAN モジュールを使用すると、Perl で書かれたアプリケーションレベルの DTrace プローブを作成することができます。</target>
        </trans-unit>
        <trans-unit id="511e2864753cd52a1ebcc75d7881ce1d9fb8ec6b" translate="yes" xml:space="preserve">
          <source>This DBM filter allows you to choose the character encoding will be store in the DBM file. The usage is</source>
          <target state="translated">このDBMフィルタは、DBMファイルに格納する文字エンコーディングを選択することができます。使用法は</target>
        </trans-unit>
        <trans-unit id="8d6cf7bbaf015be1842a3503d362b5db206d9719" translate="yes" xml:space="preserve">
          <source>This DBM filter is used when interoperating with a C/C++ application that uses a C int as either the key and/or value in the DBM file.</source>
          <target state="translated">この DBM フィルタは、DBM ファイルのキーおよび/または値として C int を使用する C/C++アプリケーションと相互運用する際に使用されます。</target>
        </trans-unit>
        <trans-unit id="b9afd96c4f0113b4f4a0ca24ef6b7ce1c1eceace" translate="yes" xml:space="preserve">
          <source>This DBM filter will compress all data before it is written to the database and uncompressed it on reading.</source>
          <target state="translated">このDBMフィルタは、データベースに書き込まれる前の全てのデータを圧縮し、読み込み時に圧縮を解除します。</target>
        </trans-unit>
        <trans-unit id="b3c940c7a493363dfcc2ec46854ae2f8bf461ebc" translate="yes" xml:space="preserve">
          <source>This Filter will ensure that all data written to the DBM will be encoded in UTF-8.</source>
          <target state="translated">このフィルタは、DBM に書き込まれたすべてのデータが UTF-8 でエンコードされるようにします。</target>
        </trans-unit>
        <trans-unit id="fc3e8623db78291ea4659afa55c27a0af1b2fdc1" translate="yes" xml:space="preserve">
          <source>This IPv4-only function is provided largely for legacy reasons. Newly-written code should use getaddrinfo() or inet_pton() instead for IPv6 support.</source>
          <target state="translated">この IPv4 専用の関数は、主にレガシーな理由から提供されています。新しく書かれたコードでは、IPv6 サポートのために代わりに getaddrinfo()または inet_pton()を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a1b8940a7dbf27c2770dc1f730a7a76eb668b365" translate="yes" xml:space="preserve">
          <source>This IPv4-only function is provided largely for legacy reasons. Newly-written code should use getnameinfo() or inet_ntop() instead for IPv6 support.</source>
          <target state="translated">この IPv4 専用の関数は、主にレガシーな理由から提供されています。新しく書かれたコードでは、IPv6 サポートの代わりに getnameinfo()や inet_ntop()を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="86d1fee384e2c64930f89930b421f43ee54e6dc6" translate="yes" xml:space="preserve">
          <source>This List indicates the person(s) to contact concerning the distribution. The preferred form of the contact string is:</source>
          <target state="translated">このリストは、配信に関する連絡先を示しています。連絡先文字列の好ましい形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="722a81c183f099f4bcdf928fea77c08691faed91" translate="yes" xml:space="preserve">
          <source>This MGVTBL structure is set at compile-time in</source>
          <target state="translated">このMGVTBL構造体は、コンパイル時に</target>
        </trans-unit>
        <trans-unit id="1eec4cedd7f076095ac2a0ca9a9e96a3c88c0b97" translate="yes" xml:space="preserve">
          <source>This Map describes any files, directories, packages, and namespaces that are private to the packaging or implementation of the distribution and should be ignored by indexing or search tools. Note that this is a list of exclusions, and the spec does not define what to</source>
          <target state="translated">このマップには、ディストリビューションのパッケージや実装にとってプライベートなファイル、ディレクトリ、パッケージ、名前空間が記述されており、インデックス作成や検索ツールでは無視されるべきものです。これは除外事項のリストであり、仕様では何をすべきかを定義していないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7caefbceb3b0366d47f8a2872ed9d7c71305e207" translate="yes" xml:space="preserve">
          <source>This Map describes optional features with incremental prerequisites. Each key of the &lt;code&gt;optional_features&lt;/code&gt; Map is a String used to identify the feature and each value is a Map with additional information about the feature. Valid subkeys include:</source>
          <target state="translated">このマップは、増分前提条件を備えたオプション機能について説明しています。 &lt;code&gt;optional_features&lt;/code&gt; マップの各キーは、機能を識別するために使用される文字列であり、各値は、機能に関する追加情報を含むマップです。有効なサブキーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="afdaa79397a40333f189bcdc4086a9d759ea82a0" translate="yes" xml:space="preserve">
          <source>This Perl can't reset CRTL environ elements (%s)</source>
          <target state="translated">このPerlはCRTL環境要素(%s)をリセットできません。</target>
        </trans-unit>
        <trans-unit id="bb183f03494180e283020e26b8860c5c80cf5dab" translate="yes" xml:space="preserve">
          <source>This Perl can't set CRTL environ elements (%s=%s)</source>
          <target state="translated">このPerlはCRTL環境要素(%s=%s)を設定できません。</target>
        </trans-unit>
        <trans-unit id="b39321835728914af608511ebd3abfb95683e78c" translate="yes" xml:space="preserve">
          <source>This Perl has not been built with support for randomized hash key traversal but something called Perl_hv_rand_set().</source>
          <target state="translated">このPerlは、ランダム化されたハッシュキー探索をサポートしているのではなく、Perl_hv_rand_set()と呼ばれるもので構築されています。</target>
        </trans-unit>
        <trans-unit id="705edfac9681ecc4ad006397ee2bb051d4e6ffce" translate="yes" xml:space="preserve">
          <source>This Perl not built to support threads</source>
          <target state="translated">このPerlはスレッドをサポートするように構築されていません。</target>
        </trans-unit>
        <trans-unit id="d239471597c0b244a6c849bc4b21df8bfaf5b7db" translate="yes" xml:space="preserve">
          <source>This PerlIO layer opens a filehandle with a transparent encoding filter.</source>
          <target state="translated">このPerlIOレイヤは、透過的なエンコーディングフィルタでファイルハンドルを開きます。</target>
        </trans-unit>
        <trans-unit id="a75ec57aa7be5f3e457676aa78fd87835feef6b5" translate="yes" xml:space="preserve">
          <source>This README was written by Sherm Pendley &amp;lt;sherm@dot-app.org&amp;gt;, and subsequently updated by Dominic Dunlop &amp;lt;domo@computer.org&amp;gt; and Breno G. de Oliveira &amp;lt;garu@cpan.org&amp;gt;. The &quot;Starting From Scratch&quot; recipe was contributed by John Montbriand &amp;lt;montbriand@apple.com&amp;gt;.</source>
          <target state="translated">このREADMEは、Sherm Pendley &amp;lt;sherm@dot-app.org&amp;gt;によって作成され、その後Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;およびBreno G. de Oliveira &amp;lt;garu@cpan.org&amp;gt;によって更新されました。「ゼロから始める」レシピは、John Montbriand &amp;lt;montbriand@apple.com&amp;gt;によって提供されました。</target>
        </trans-unit>
        <trans-unit id="ebd95c4f5ef4e4618995d165e48685abb75f4895" translate="yes" xml:space="preserve">
          <source>This TODO</source>
          <target state="translated">このTODO</target>
        </trans-unit>
        <trans-unit id="65401762a1d1713b0f2418936baae5413a27fffb" translate="yes" xml:space="preserve">
          <source>This UTF8 flag is not visible in Perl scripts, exactly for the same reason you cannot (or rather, you</source>
          <target state="translated">この UTF8 フラグは Perl スクリプトでは表示されません。</target>
        </trans-unit>
        <trans-unit id="4052f785cdabbfe61b3039b9711ade7bde52e516" translate="yes" xml:space="preserve">
          <source>This a copy of the $md5 object. It is useful when you do not want to destroy the digests state, but need an intermediate value of the digest, e.g. when calculating digests iteratively on a continuous data stream. Example:</source>
          <target state="translated">これは $md5 オブジェクトのコピーです。ダイジェストの状態を破棄したくないが、ダイジェストの中間値が必要な場合、例えば連続的なデータストリームで反復的にダイジェストを計算する場合などに便利です。例えば、連続したデータストリームで反復的にダイジェストを計算する場合などです。</target>
        </trans-unit>
        <trans-unit id="1a5e99b1d24a191f2d8182b7f2daff87d3990749" translate="yes" xml:space="preserve">
          <source>This a perl class / module to enable you to use ARexx with your perlscript. Creating a function host or executing scripts in other hosts. The API is loosley modeled on the python arexx module supplied by with AmigaOS4.1</source>
          <target state="translated">これは、PerlスクリプトでARexxを使用できるようにするためのPerlクラス/モジュールです。関数ホストを作成したり、他のホストでスクリプトを実行したりすることができます。API は AmigaOS4.1 で提供されている python arexxx モジュールをベースにしています。</target>
        </trans-unit>
        <trans-unit id="a160f7af224910b6019387f0709ad781bada6850" translate="yes" xml:space="preserve">
          <source>This a perl class / module to enables you to use various low level Amiga features such as waiting on an Exec signal</source>
          <target state="translated">これは、実行信号の待ち受けなどの低レベルの Amiga 機能を使用できるようにする perl クラス/モジュールです。</target>
        </trans-unit>
        <trans-unit id="93d41ee6bf8db4bf77abd4b3d67925380ae0e1a1" translate="yes" xml:space="preserve">
          <source>This aborts parsing of the current document, by switching on the flag that indicates that EOF has been seen. In particularly drastic cases, you might want to do this. It's rather nicer than just calling &lt;code&gt;die&lt;/code&gt;!</source>
          <target state="translated">これにより、EOFが確認されたことを示すフラグがオンになり、現在のドキュメントの解析が中止されます。特に劇的なケースでは、これを実行することをお勧めします。単に &lt;code&gt;die&lt;/code&gt; と呼ぶよりはかなりいいです！</target>
        </trans-unit>
        <trans-unit id="80e3860a781a3958ead624c7605f67461e6feac0" translate="yes" xml:space="preserve">
          <source>This action at a distance can be confusing, so you should be careful with your use of weaken. You should weaken the reference in the variable that will go out of scope</source>
          <target state="translated">この距離でのアクションは混乱を招く可能性があるので、weakenの使い方には注意が必要です。範囲外になる変数の中の参照を弱める必要があります</target>
        </trans-unit>
        <trans-unit id="6a24d0142f914abb864cc53bd42fb39ecd311c30" translate="yes" xml:space="preserve">
          <source>This action at a distance, perhaps a large distance, can lead to Perl silently misinterpreting what you meant, so when you specify that you want extra checking by &lt;code&gt;use re 'strict'&lt;/code&gt;, this warning is generated. If you meant the character as a literal, simply confirm that to Perl by preceding the character with a backslash, or make it into a bracketed character class (like &lt;code&gt;[}]&lt;/code&gt;). If you meant it as closing a corresponding &lt;code&gt;[&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;, you'll need to look back through the pattern to find out why that isn't happening.</source>
          <target state="translated">離れた場所、おそらく大きな距離でのこのアクションは、Perlが意図したことを黙って誤解する可能性があるため、 &lt;code&gt;use re 'strict'&lt;/code&gt; 追加のチェックが必要であると指定すると、この警告が生成されます。文字をリテラルとして意味する場合は、文字の前に円記号を付けてPerlに確認するか、括弧で囲まれた文字クラス（ &lt;code&gt;[}]&lt;/code&gt; など）にします。対応する &lt;code&gt;[&lt;/code&gt; または &lt;code&gt;{&lt;/code&gt; を閉じることを意味する場合は、パターンを振り返って、それが発生しない理由を見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="bddc211ce6f51988dd46dcc142aadb4340b590dc" translate="yes" xml:space="preserve">
          <source>This adds a new excluded version. For example, you might use these three method calls:</source>
          <target state="translated">これにより、新しい除外バージョンが追加されます。例えば、以下の3つのメソッドコールを使用することができます。</target>
        </trans-unit>
        <trans-unit id="9b2561f6cd7d300e2bc3c36c86f010a9c3614953" translate="yes" xml:space="preserve">
          <source>This adds a new maximum version requirement. If the new requirement is redundant to the existing specification, this has no effect.</source>
          <target state="translated">これにより、新しい最大バージョン要件が追加されます。新しい要件が既存の仕様と重複している場合、これは何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="8012fe61f20e1a816c0a4a7242f87aff7c9fa563" translate="yes" xml:space="preserve">
          <source>This adds a new minimum version requirement. If the new requirement is redundant to the existing specification, this has no effect.</source>
          <target state="translated">これにより、新しい最小バージョン要件が追加されます。新しい要件が既存の仕様と重複している場合、これは何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="885dd09085650ee6eee0bbc42fb708bdc29aeb18" translate="yes" xml:space="preserve">
          <source>This adds your coderef as a follow-up to the root hub after Test2 is finished loading.</source>
          <target state="translated">これは、Test2のロードが終了した後、ルートハブのフォローアップとしてcoderefを追加します。</target>
        </trans-unit>
        <trans-unit id="31854231243bab283e1b65fbafa450794c35d551" translate="yes" xml:space="preserve">
          <source>This affects the &quot;udp&quot;, &quot;tcp&quot;, and &quot;syn&quot; protocols.</source>
          <target state="translated">これは、&quot;udp&quot;、&quot;tcp&quot;、&quot;syn&quot; プロトコルに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="c5505e253bfc6bced2ca4d4a2dc1f5c2494aeece" translate="yes" xml:space="preserve">
          <source>This affects the &lt;code&gt;CreateFile&lt;/code&gt; and &lt;code&gt;GetVolumeInformation&lt;/code&gt; calls.</source>
          <target state="translated">これは、 &lt;code&gt;CreateFile&lt;/code&gt; および &lt;code&gt;GetVolumeInformation&lt;/code&gt; 呼び出しに影響します。</target>
        </trans-unit>
        <trans-unit id="cddee3439343bde4e7f7a86c9eebcbe6c66c9384" translate="yes" xml:space="preserve">
          <source>This affects the &lt;code&gt;ReadFile&lt;/code&gt; and &lt;code&gt;WriteFile&lt;/code&gt; calls.</source>
          <target state="translated">これは、 &lt;code&gt;ReadFile&lt;/code&gt; および &lt;code&gt;WriteFile&lt;/code&gt; の呼び出しに影響します。</target>
        </trans-unit>
        <trans-unit id="873bbf87a172d66b10ad3b61904a0d639ca9b860" translate="yes" xml:space="preserve">
          <source>This allows Math::BigInt to correctly retrieve package globals from the subclass, like &lt;code&gt;$SubClass::precision&lt;/code&gt; . See t/Math/BigInt/Subclass.pm or t/Math/BigFloat/SubClass.pm completely functional subclass examples.</source>
          <target state="translated">これにより、Math :: BigIntは、 &lt;code&gt;$SubClass::precision&lt;/code&gt; ように、サブクラスからパッケージグローバルを正しく取得できます。t / Math / BigInt / Subclass.pmまたはt / Math / BigFloat / SubClass.pmの完全に機能するサブクラスの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="fa3309366ca565335ff8288304c30cc7b99e923e" translate="yes" xml:space="preserve">
          <source>This allows Math::BigInt to correctly retrieve package globals from the subclass, like &lt;code&gt;$SubClass::precision&lt;/code&gt;. See t/Math/BigInt/Subclass.pm or t/Math/BigFloat/SubClass.pm completely functional subclass examples.</source>
          <target state="translated">これにより、Math :: BigIntは、 &lt;code&gt;$SubClass::precision&lt;/code&gt; ようにサブクラスからパッケージグローバルを正しく取得できます。t / Math / BigInt /Subclass.pmまたはt / Math / BigFloat /SubClass.pmの完全に機能するサブクラスの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="55b11d71facfcee62095e950521946dac7a2b9c8" translate="yes" xml:space="preserve">
          <source>This allows a reference to a variable to be declared with &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, our &lt;code&gt;our&lt;/code&gt;, or localized with &lt;code&gt;local&lt;/code&gt;. It is intended mainly for use in conjunction with the &quot;refaliasing&quot; feature. See &lt;a href=&quot;perlref#Declaring-a-Reference-to-a-Variable&quot;&gt;&quot;Declaring a Reference to a Variable&quot; in perlref&lt;/a&gt; for examples.</source>
          <target state="translated">これにより、変数への参照を &lt;code&gt;my&lt;/code&gt; 、 &lt;code&gt;state&lt;/code&gt; 、our &lt;code&gt;our&lt;/code&gt; で宣言するか、 &lt;code&gt;local&lt;/code&gt; でローカライズすることができます。これは主に「リファリアシング」機能と組み合わせて使用​​することを目的としています。例について&lt;a href=&quot;perlref#Declaring-a-Reference-to-a-Variable&quot;&gt;は、perlrefの「変数への&lt;/a&gt;参照の宣言」を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d5501a126d7bcccb962537b6328418e9a9cd85d" translate="yes" xml:space="preserve">
          <source>This allows a user to setup a directory tree for some software with directories &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; and &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt; , and then the above example will allow the use of modules in the lib directory without knowing where the software tree is installed.</source>
          <target state="translated">これにより、ユーザーはディレクトリ &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; および &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt; を使用して一部のソフトウェアのディレクトリツリーを設定できます。上記の例では、ソフトウェアツリーがインストールされている場所を知らなくても、libディレクトリのモジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="27816f401d954ec072345f1b707e0f267b956d02" translate="yes" xml:space="preserve">
          <source>This allows a user to setup a directory tree for some software with directories &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; and &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt;, and then the above example will allow the use of modules in the lib directory without knowing where the software tree is installed.</source>
          <target state="translated">これにより、ユーザーはディレクトリ &lt;code&gt;&amp;lt;root&amp;gt;/bin&lt;/code&gt; および &lt;code&gt;&amp;lt;root&amp;gt;/lib&lt;/code&gt; を使用して一部のソフトウェアのディレクトリツリーを設定できます。上記の例では、ソフトウェアツリーがインストールされている場所を知らなくてもlibディレクトリ内のモジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="f2d1ac05408a326c089b0ec60746ba54464b2076" translate="yes" xml:space="preserve">
          <source>This allows for a more traditional use of sockatmark() as a procedural socket function. If your system does not support sockatmark(), the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; declaration will fail at compile time.</source>
          <target state="translated">これにより、手続き型ソケット関数として、sockatmark（）のより伝統的な使用が可能になります。システムがsockatmark（）をサポートしていない場合、 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 宣言はコンパイル時に失敗します。</target>
        </trans-unit>
        <trans-unit id="5c4bf55b527390af875f220a6a455b96b2cc2be5" translate="yes" xml:space="preserve">
          <source>This allows one to specify the</source>
          <target state="translated">これにより</target>
        </trans-unit>
        <trans-unit id="dd0d07d0d3a6167b29dae996bfd8a33bb4d04031" translate="yes" xml:space="preserve">
          <source>This allows the ability to provide an extra pointer (called the &quot;host&quot; environment) for all the system calls. This makes it possible for all the system stuff to maintain their own state, broken down into seven C structures. These are thin wrappers around the usual system calls (see</source>
          <target state="translated">これにより、すべてのシステムコールに余分なポインタ(ホスト環境と呼ばれる)を提供することができるようになります。これにより、7つのC言語の構造体に分解されたシステムのすべてのものが、それ自身の状態を維持することが可能になります。これらは通常のシステムコールの薄いラッパーです (</target>
        </trans-unit>
        <trans-unit id="f2d9de12c87f7e2eb33ce435c5af882982d468fe" translate="yes" xml:space="preserve">
          <source>This allows the engine to dupe its private data but also if necessary modify the final structure if it really must.</source>
          <target state="translated">これにより、エンジンはプライベートデータを複製することができますが、本当に必要であれば最終的な構造を変更することもできます。</target>
        </trans-unit>
        <trans-unit id="afb3f86b59b2eab9a83b014b190ee8244b9d77c6" translate="yes" xml:space="preserve">
          <source>This allows the programmer to look at the execution stack and variables to find out the cause of the exception. As the debugger is being invoked as the Perl interpreter is about to do a fatal exit, continuing the execution in debug mode is usually not practical.</source>
          <target state="translated">これにより、プログラマは実行スタックや変数を見て例外の原因を見つけることができます。Perl インタプリタが致命的な終了をしようとしているときにデバッガが起動されているので、デバッグモードで実行を続けることは通常実用的ではありません。</target>
        </trans-unit>
        <trans-unit id="0db2b07707171b33eaecb29767724fb7ef4d27b3" translate="yes" xml:space="preserve">
          <source>This allows the use of the &lt;code&gt;isa&lt;/code&gt; infix operator, which tests whether the scalar given by the left operand is an object of the class given by the right operand. See &lt;a href=&quot;perlop#Class-Instance-Operator&quot;&gt;&quot;Class Instance Operator&quot; in perlop&lt;/a&gt; for more details.</source>
          <target state="translated">これは、使用可能にする &lt;code&gt;isa&lt;/code&gt; 左オペランドで指定されたスカラーが右オペランドで指定されたクラスのオブジェクトであるかどうかをテスト中置演算子を、。詳細について&lt;a href=&quot;perlop#Class-Instance-Operator&quot;&gt;は、perlopの「クラスインスタンス演算子」を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="1baefaa51fc7ed599ce445dad500d37cb72bf43c" translate="yes" xml:space="preserve">
          <source>This allows you to add a prefix to the backup file, instead of (or in addition to) a suffix:</source>
          <target state="translated">これにより、バックアップファイルに接尾辞の代わりに(または接尾辞に加えて)接頭辞を追加することができます。</target>
        </trans-unit>
        <trans-unit id="08c156e263d5342084a6b014f45a9a0f0a51e994" translate="yes" xml:space="preserve">
          <source>This allows you to add callbacks that will trigger every time a context for this hub is released. The only argument to the sub will be the &lt;a href=&quot;Test2::API::Context&quot;&gt;Test2::API::Context&lt;/a&gt; instance that was released. These will run in reverse order.</source>
          <target state="translated">これにより、このハブのコンテキストが解放されるたびにトリガーされるコールバックを追加できます。サブへの唯一の引数は、リリースされた&lt;a href=&quot;Test2::API::Context&quot;&gt;Test2 :: API :: Context&lt;/a&gt;インスタンスになります。これらは逆の順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="c13b99696d30cbc25087da7c60f284a4111dd701" translate="yes" xml:space="preserve">
          <source>This allows you to add callbacks that will trigger every time a new context is created for the hub. The only argument to the sub will be the &lt;a href=&quot;Test2::API::Context&quot;&gt;Test2::API::Context&lt;/a&gt; instance that was created.</source>
          <target state="translated">これにより、ハブの新しいコンテキストが作成されるたびにトリガーされるコールバックを追加できます。サブへの唯一の引数は、作成された&lt;a href=&quot;Test2::API::Context&quot;&gt;Test2 :: API :: Context&lt;/a&gt;インスタンスになります。</target>
        </trans-unit>
        <trans-unit id="8c9c79134ff2ae5aa3b781af2dbc70121d4e03bb" translate="yes" xml:space="preserve">
          <source>This allows you to check that your test module is setting the correct value for $Test::Builder::Level and thus giving the correct file and line number when a test fails. It is calculated by looking at caller() and $Test::Builder::Level. It should count how many subroutines there are before jumping into the function you are testing. So for example in</source>
          <target state="translated">これにより、テストモジュールが $Test::Builder::Level に正しい値を設定しているかどうかをチェックすることができ、テストが失敗したときに正しいファイルと行番号を与えることができます。caller()と$Test::Builder::Levelを見て計算します。これは、テストしている関数にジャンプする前にサブルーチンがいくつあるかをカウントします。ですから、例えば</target>
        </trans-unit>
        <trans-unit id="3e47154414d862007ad5f643f15fef0b3978ca2c" translate="yes" xml:space="preserve">
          <source>This allows you to intermix your source code and your documentation text freely, as in</source>
          <target state="translated">これにより、以下のようにソースコードとドキュメントのテキストを自由に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="56e637a731a56d0d223f91be743e436a188835e3" translate="yes" xml:space="preserve">
          <source>This allows you to pass a reference to a scalar, in which the data will be stored:</source>
          <target state="translated">これにより、データが格納されるスカラへの参照を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="56546e50a57dfe022838ff689d536d5a9d34e4c4" translate="yes" xml:space="preserve">
          <source>This allows you to provide a UUID generator. If provided UUIDs will be attached to all events, hubs, and contexts. This is useful for storing, tracking, and linking these objects.</source>
          <target state="translated">これにより、UUID ジェネレータを提供することができます。提供された場合、UUIDはすべてのイベント、ハブ、およびコンテキストにアタッチされます。これは、これらのオブジェクトの保存、追跡、リンクに便利です。</target>
        </trans-unit>
        <trans-unit id="ae11cd12869687833116af8fabb9e16d79564d09" translate="yes" xml:space="preserve">
          <source>This allows you to specify &lt;code&gt;constants&lt;/code&gt; in your template. ie, they keys that are not allowed to be altered by the user. It pretty much allows you to keep all your &lt;code&gt;configurable&lt;/code&gt; data in one place; the &lt;code&gt;Params::Check&lt;/code&gt; template.</source>
          <target state="translated">これにより、テンプレートで &lt;code&gt;constants&lt;/code&gt; を指定できます。つまり、ユーザーが変更することを許可されていないキーです。ほぼすべての &lt;code&gt;configurable&lt;/code&gt; データを1か所に保持できます。 &lt;code&gt;Params::Check&lt;/code&gt; テンプレート。</target>
        </trans-unit>
        <trans-unit id="02527ae1bd59af5a043ac93acd05be3d0f9bb884" translate="yes" xml:space="preserve">
          <source>This allows you to update your local repository by pulling from &lt;code&gt;origin&lt;/code&gt;, which is faster and doesn't require you to authenticate, and to push your changes back with the &lt;code&gt;camel&lt;/code&gt; remote:</source>
          <target state="translated">これにより、 &lt;code&gt;origin&lt;/code&gt; からプルすることでローカルリポジトリを更新できます。これは、より高速で認証を必要とせず、 &lt;code&gt;camel&lt;/code&gt; リモートで変更をプッシュバックします。</target>
        </trans-unit>
        <trans-unit id="fb3de596529e48bc02f1d5b4c0a477a1da824e62" translate="yes" xml:space="preserve">
          <source>This allows your code to set hints without relying on &lt;code&gt;autodie&lt;/code&gt; and &lt;code&gt;autodie::hints&lt;/code&gt; being loaded, or even installed. In this way your code can do the right thing when &lt;code&gt;autodie&lt;/code&gt; is installed, but does not need to depend upon it to function.</source>
          <target state="translated">これにより、 &lt;code&gt;autodie&lt;/code&gt; および &lt;code&gt;autodie::hints&lt;/code&gt; ロード、またはインストールに依存することなく、コードでヒントを設定できます。このようにして、 &lt;code&gt;autodie&lt;/code&gt; がインストールされているときにコードは正しいことを実行できますが、機能するためにコードに依存する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ec9cd2ea84115168b54e6b0797c0f572af954da0" translate="yes" xml:space="preserve">
          <source>This almost definitely doesn't do what you expect:</source>
          <target state="translated">これはほぼ間違いなく期待通りにはなりません。</target>
        </trans-unit>
        <trans-unit id="5ba2015dbd8b7d90bb6da319e60421ccbe89f224" translate="yes" xml:space="preserve">
          <source>This also applies to integers that look like floating point constants:</source>
          <target state="translated">これは、浮動小数点定数のように見える整数にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="636185aa1476a4214e4b7454bccd1f721aa5d7e5" translate="yes" xml:space="preserve">
          <source>This also behaves similarly, but assigns to a lexical variable instead of to &lt;code&gt;$_&lt;/code&gt; :</source>
          <target state="translated">これも同様に動作しますが、 &lt;code&gt;$_&lt;/code&gt; ではなくレキシカル変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="40e97092dc934ec326d1ea3e202dbbdcd5300d45" translate="yes" xml:space="preserve">
          <source>This also behaves similarly, but assigns to a lexical variable instead of to &lt;code&gt;$_&lt;/code&gt;:</source>
          <target state="translated">これも同様に動作しますが、 &lt;code&gt;$_&lt;/code&gt; ではなく字句変数に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="cd00f9f641aead2aa10c5260267b8df1c16f1dcf" translate="yes" xml:space="preserve">
          <source>This also has a special use with XS AUTOLOAD subs. See &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;&quot;Autoloading with XSUBs&quot; in perlguts&lt;/a&gt;.</source>
          <target state="translated">これは、XSAUTOLOADサブで特別に使用されます。&lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;perlgutsの「XSUBを使用した自動ロード」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="77df2183cb5ed8fa6c016243494c2444f23d3c09" translate="yes" xml:space="preserve">
          <source>This also has a special use with XS AUTOLOAD subs. See &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;Autoloading with XSUBs in perlguts&lt;/a&gt;.</source>
          <target state="translated">これには、XS AUTOLOADサブルーチンの特別な使用法もあります。&lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;perlgutsでのXSUBによる自動ロードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3d548e6c0ea6757b5bd736b5e0dc177ac6e6019" translate="yes" xml:space="preserve">
          <source>This also has implications for the use of the SUPER:: qualifier (see &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;).</source>
          <target state="translated">これは、SUPER ::修飾子の使用にも影響します（&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f8da07f35c437fa97e844be13f7f26224b7e80d0" translate="yes" xml:space="preserve">
          <source>This also means it is a bad idea to check for some specific package, since the actual contents of $x might be something unexpected. Due to the transparent way of bignum &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; should not be necessary, anyway.</source>
          <target state="translated">これは、$ xの実際の内容が予期しないものになる可能性があるため、特定のパッケージを確認することは悪い考えであることも意味します。とにかく、bignumの透過的な方法により、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="49deec483222c26dba8014be17034c32d563f691" translate="yes" xml:space="preserve">
          <source>This also means it is a bad idea to check for some specific package, since the actual contents of $x might be something unexpected. Due to the transparent way of bignum &lt;code&gt;ref()&lt;/code&gt; should not be necessary, anyway.</source>
          <target state="translated">これは、$ xの実際の内容が予期しないものになる可能性があるため、特定のパッケージをチェックすることは悪い考えであることも意味します。bignumの透過的な方法のため、とにかく &lt;code&gt;ref()&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="9f046ba2ed5c45f32bb7d779ddd434216adcb9e9" translate="yes" xml:space="preserve">
          <source>This also means that a first argument hash reference now becomes the second argument:</source>
          <target state="translated">これはまた、第1引数のハッシュ参照が第2引数になることを意味します。</target>
        </trans-unit>
        <trans-unit id="53e0f20ff4a10e2905e391319be8b9814ea5ca78" translate="yes" xml:space="preserve">
          <source>This also returns the file format version. If the version is &quot;2.7&quot; then major would be 2 and minor would be 7. The minor element is missing for when major is less than 2.</source>
          <target state="translated">これはファイル形式のバージョンも返します。バージョンが &quot;2.7 &quot;であれば、メジャーは2、マイナーは7となります。メジャーが2未満の場合は、マイナー要素が欠落しています。</target>
        </trans-unit>
        <trans-unit id="61c52be3ac150c6eed66b2a1ead6f0d851e682d3" translate="yes" xml:space="preserve">
          <source>This also works for other subclasses, like Math::String.</source>
          <target state="translated">これは Math::String のような他のサブクラスでも動作します。</target>
        </trans-unit>
        <trans-unit id="8203581310d6a334ec8562f54f521a19e2fc01d8" translate="yes" xml:space="preserve">
          <source>This also works for ranges in &lt;code&gt;tr///&lt;/code&gt; starting in Perl v5.24.</source>
          <target state="translated">これは、Perlv5.24以降の &lt;code&gt;tr///&lt;/code&gt; 範囲でも機能します。</target>
        </trans-unit>
        <trans-unit id="8468a87cfa0204ff52a567b1eaf4b66d1ee547eb" translate="yes" xml:space="preserve">
          <source>This always means your main memory, not your disk. Clouding the issue is the fact that your machine may implement &lt;b&gt;virtual&lt;/b&gt; memory; that is, it will pretend that it has more memory than it really does, and it&amp;rsquo;ll use disk space to hold inactive bits. This can make it seem like you have a little more memory than you really do, but it&amp;rsquo;s not a substitute for real memory. The best thing that can be said about virtual memory is that it lets your performance degrade gradually rather than suddenly when you run out of real memory. But your program can die when you run out of virtual memory, too&amp;mdash;if you haven&amp;rsquo;t thrashed your disk to death first.</source>
          <target state="translated">これは常にディスクではなく、メインメモリを意味します。問題を曇らせるのは、マシンが&lt;b&gt;仮想&lt;/b&gt;メモリを実装している可能性があるという事実です。つまり、実際よりも多くのメモリがあるように見せかけ、ディスクスペースを使用して非アクティブなビットを保持します。これにより、実際よりも少し多くのメモリがあるように見えますが、実際のメモリの代わりにはなりません。仮想メモリについて言えることは、実際のメモリが不足したときに、突然ではなく徐々にパフォーマンスが低下することです。ただし、仮想メモリが足りなくなった場合も、最初にディスクをスラッシュしていない場合、プログラムが停止する可能性があります。</target>
        </trans-unit>
        <trans-unit id="295dde8c4391c2b969f714a71c16980aac7c0b67" translate="yes" xml:space="preserve">
          <source>This and &lt;code&gt;PERL_INT_MIN&lt;/code&gt;, &lt;code&gt;PERL_LONG_MAX&lt;/code&gt;, &lt;code&gt;PERL_LONG_MIN&lt;/code&gt;, &lt;code&gt;PERL_QUAD_MAX&lt;/code&gt;, &lt;code&gt;PERL_SHORT_MAX&lt;/code&gt;, &lt;code&gt;PERL_SHORT_MIN&lt;/code&gt;, &lt;code&gt;PERL_UCHAR_MAX&lt;/code&gt;, &lt;code&gt;PERL_UCHAR_MIN&lt;/code&gt;, &lt;code&gt;PERL_UINT_MAX&lt;/code&gt;, &lt;code&gt;PERL_ULONG_MAX&lt;/code&gt;, &lt;code&gt;PERL_ULONG_MIN&lt;/code&gt;, &lt;code&gt;PERL_UQUAD_MAX&lt;/code&gt;, &lt;code&gt;PERL_UQUAD_MIN&lt;/code&gt;, &lt;code&gt;PERL_USHORT_MAX&lt;/code&gt;, &lt;code&gt;PERL_USHORT_MIN&lt;/code&gt;, &lt;code&gt;PERL_QUAD_MIN&lt;/code&gt; give the largest and smallest number representable in the current platform in variables of the corresponding types.</source>
          <target state="translated">これと &lt;code&gt;PERL_INT_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_LONG_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_LONG_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_QUAD_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_SHORT_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_SHORT_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_UCHAR_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_UCHAR_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_UINT_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_ULONG_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_ULONG_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_UQUAD_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_UQUAD_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_USHORT_MAX&lt;/code&gt; 、 &lt;code&gt;PERL_USHORT_MIN&lt;/code&gt; 、 &lt;code&gt;PERL_QUAD_MIN&lt;/code&gt; 対応型の変数に、現在のプラットフォームで最大と最小の数の表現を与えます。</target>
        </trans-unit>
        <trans-unit id="165f78228b9bb880f61927fda978ad6714cce456" translate="yes" xml:space="preserve">
          <source>This anomaly stems from Perl's attempt to not disturb older programs that didn't use Unicode, along with Perl's desire to add Unicode support seamlessly. But the result turned out to not be seamless. (By the way, you can choose to be warned when things like this happen. See &lt;code&gt;&lt;a href=&quot;encoding/warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">この異常は、Unicodeをシームレスに追加したいというPerlの要望とともに、Unicodeを使用しない古いプログラムを妨害しないというPerlの試みに起因しています。しかし、結果はシームレスではありませんでした。（ちなみに、このようなことが起こったときに警告することを選択できます &lt;code&gt;&lt;a href=&quot;encoding/warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt; 参照してください。）</target>
        </trans-unit>
        <trans-unit id="a34b4613636352dc25268cf3fddbf1e4e87cbb09" translate="yes" xml:space="preserve">
          <source>This anomaly stems from Perl's attempt to not disturb older programs that didn't use Unicode, along with Perl's desire to add Unicode support seamlessly. But the result turned out to not be seamless. (By the way, you can choose to be warned when things like this happen. See &lt;code&gt;&lt;a href=&quot;encoding::warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">この異常は、Unicodeを使用していない古いプログラムを妨害しないというPerlの試みと、Unicodeサポートをシームレスに追加したいというPerlの願望に起因しています。しかし、結果はシームレスではないことが判明しました。（ちなみに、このようなことが起こったときに警告を表示するように選択できます &lt;code&gt;&lt;a href=&quot;encoding::warnings&quot;&gt;encoding::warnings&lt;/a&gt;&lt;/code&gt; 参照してください。）</target>
        </trans-unit>
        <trans-unit id="8c246570729105a65f6bd289985b0b62d1e1f94f" translate="yes" xml:space="preserve">
          <source>This appeared in perl 5.10.0. Anything matched left of &lt;code&gt;\K&lt;/code&gt; is not included in &lt;code&gt;$&amp;amp;&lt;/code&gt; , and will not be replaced if the pattern is used in a substitution. This lets you write &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; instead of &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; or &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt; .</source>
          <target state="translated">これはperl 5.10.0で登場しました。 &lt;code&gt;\K&lt;/code&gt; 左側に一致するものはすべて &lt;code&gt;$&amp;amp;&lt;/code&gt; に含まれず、パターンが置換で使用されている場合は置き換えられません。これにより、 &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; または &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt; 代わりに &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; を書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="bbd3493b1232a9c4de7dc8bb2c9b05a2159dd5ec" translate="yes" xml:space="preserve">
          <source>This appeared in perl 5.10.0. Anything matched left of &lt;code&gt;\K&lt;/code&gt; is not included in &lt;code&gt;$&amp;amp;&lt;/code&gt;, and will not be replaced if the pattern is used in a substitution. This lets you write &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; instead of &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; or &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt;.</source>
          <target state="translated">これはperl5.10.0で登場しました。 &lt;code&gt;\K&lt;/code&gt; 左側に一致するものはすべて、 &lt;code&gt;$&amp;amp;&lt;/code&gt; に含まれず、パターンが置換で使用された場合は置き換えられません。これにより、 &lt;code&gt;s/(PAT1) PAT2/${1}REPL/x&lt;/code&gt; または &lt;code&gt;s/(?&amp;lt;=PAT1) PAT2/REPL/x&lt;/code&gt; 代わりに &lt;code&gt;s/PAT1 \K PAT2/REPL/x&lt;/code&gt; を書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="7cbb4716327acfc3309af9888218e1b2879b1c27" translate="yes" xml:space="preserve">
          <source>This applies as well to &lt;a href=&quot;I18N::Langinfo&quot;&gt;I18N::Langinfo&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;I18N::Langinfo&quot;&gt;I18N :: Langinfoにも当てはまり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a9e79001ab117c0cf333336e9232ddbb9a00de3d" translate="yes" xml:space="preserve">
          <source>This applies equally to method names, parameter names, and anything else which is visible to the user (and most things that aren't!)</source>
          <target state="translated">これは、メソッド名、パラメータ名、その他ユーザーから見えるものにも同じように適用されます(ほとんどのものはそうではありません!)。</target>
        </trans-unit>
        <trans-unit id="70dd8476567c22ea231857d01ff4db7f81b73be8" translate="yes" xml:space="preserve">
          <source>This applies only to lexical variables, by the way. Dynamic variables continue to work as they have always worked. Closure is not something that most Perl programmers need trouble themselves about to begin with.</source>
          <target state="translated">ところで、これは語彙変数にのみ適用されます。動的変数は、これまでと同じように動作します。クロージャーは、ほとんどのPerlプログラマが最初から問題にするようなものではありません。</target>
        </trans-unit>
        <trans-unit id="4e13602141364999d0474f62de688119ccaf7274" translate="yes" xml:space="preserve">
          <source>This applies to the perlio system only. For versions before 5.7, &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; is equivalent to &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; .</source>
          <target state="translated">これはperlioシステムにのみ適用されます。5.7以前のバージョンでは、 &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; と等価である &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e11371aac7dd3f528873ed555dfe591da9dcfa07" translate="yes" xml:space="preserve">
          <source>This applies to the perlio system only. For versions before 5.7, &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; is equivalent to &lt;code&gt;PerlIO_findFILE()&lt;/code&gt;.</source>
          <target state="translated">これは、perlioシステムにのみ適用されます。5.7以前のバージョンでは、 &lt;code&gt;PerlIO_exportFILE()&lt;/code&gt; と等価である &lt;code&gt;PerlIO_findFILE()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88ab6b9c73082204ae0542a65f9bf2f5c23ef207" translate="yes" xml:space="preserve">
          <source>This approach also works for comparing hashes. Here we'll demonstrate two different answers:</source>
          <target state="translated">このアプローチはハッシュの比較にも有効です。ここでは2つの異なる答えを示します。</target>
        </trans-unit>
        <trans-unit id="e5cff3b77039edbd80551481c46e471aeea07633" translate="yes" xml:space="preserve">
          <source>This approach is useful if I need to convert my TAP based test results into some other representation. See TAP::Convert::TET (http://search.cpan.org/dist/TAP-Convert-TET/) for an example of this approach.</source>
          <target state="translated">このアプローチは、TAP ベースのテスト結果を他の表現に変換する必要がある場合に便利です。このアプローチの例については TAP::Convert::TET (http://search.cpan.org/dist/TAP-Convert-TET/)を参照してください。</target>
        </trans-unit>
        <trans-unit id="684f52e2ad132a8d50a850505a18c8cf67adca2e" translate="yes" xml:space="preserve">
          <source>This approach makes it comparatively easy to write code preprocessors without worrying about the form or contents of strings, regexes, etc.</source>
          <target state="translated">このアプローチにより、文字列や正規表現などの形式や内容を気にすることなく、比較的簡単にコードプリプロセッサを書くことができます。</target>
        </trans-unit>
        <trans-unit id="21941c4a2190129983b70fab8729b6e9162dfa7f" translate="yes" xml:space="preserve">
          <source>This approach of treating &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; like object methods calls doesn't work for the diamond operator. That's because it's a real operator, not just a function with a comma-less argument. Assuming you've been storing typeglobs in your structure as we did above, you can use the built-in function named &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; to read a record just as &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; does. Given the initialization shown above for @fd, this would work, but only because readline() requires a typeglob. It doesn't work with objects or strings, which might be a bug we haven't fixed yet.</source>
          <target state="translated">オブジェクトメソッドの呼び出しのように &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; を処理するこのアプローチは、diamondオペレーターでは機能しません。これは、それが実際の演算子であり、単なるコンマのない引数を持つ関数ではないためです。上記のように構造体にタイプグロブを格納していると仮定すると、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; と同じように、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; という名前の組み込み関数を使用してレコードを読み取ることができます。上記の@fdの初期化を考えると、これは機能しますが、readline（）がタイプグロブを必要とするためです。オブジェクトまたは文字列では動作しません。これは、まだ修正されていないバグの可能性があります。</target>
        </trans-unit>
        <trans-unit id="8f83a93621698a2bcf6c863d26ca6660360038ba" translate="yes" xml:space="preserve">
          <source>This approach of treating &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;printf&lt;/code&gt; like object methods calls doesn't work for the diamond operator. That's because it's a real operator, not just a function with a comma-less argument. Assuming you've been storing typeglobs in your structure as we did above, you can use the built-in function named &lt;code&gt;readline&lt;/code&gt; to read a record just as &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; does. Given the initialization shown above for @fd, this would work, but only because readline() requires a typeglob. It doesn't work with objects or strings, which might be a bug we haven't fixed yet.</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; と &lt;code&gt;printf&lt;/code&gt; をオブジェクトメソッド呼び出しのように扱うこのアプローチは、diamond演算子では機能しません。これは、コンマのない引数を持つ関数ではなく、実際の演算子であるためです。上記のようにtypeglobを構造体に格納していると仮定すると、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; と同じように、 &lt;code&gt;readline&lt;/code&gt; という名前の組み込み関数を使用してレコードを読み取ることができます。上記の@fdの初期化を考えると、これは機能しますが、readline（）がtypeglobを必要とするためです。オブジェクトや文字列では機能しません。これは、まだ修正されていないバグである可能性があります。</target>
        </trans-unit>
        <trans-unit id="5d9254d4c73a18d06483f51c6d39891d7febc4dc" translate="yes" xml:space="preserve">
          <source>This approach will preserve links in the installation without creating duplicate binaries.</source>
          <target state="translated">この方法では、重複するバイナリを作成することなく、インストール内のリンクを保持します。</target>
        </trans-unit>
        <trans-unit id="8edd7ed16ccf46b65b081f4b967d5eb2691395f1" translate="yes" xml:space="preserve">
          <source>This argument is &lt;b&gt;required&lt;/b&gt;. All other arguments are optional.</source>
          <target state="translated">この引数は&lt;b&gt;必須です&lt;/b&gt;。他のすべての引数はオプションです。</target>
        </trans-unit>
        <trans-unit id="f95f50481ff3516b07bb9d7865830ab6c1ff5648" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the beginnings of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$-[0]&lt;/code&gt; is the offset into the string of the beginning of the entire match. The</source>
          <target state="translated">この配列は、現在アクティブな動的スコープで最後に成功したサブマッチの開始のオフセットを保持します。 &lt;code&gt;$-[0]&lt;/code&gt; は、一致全体の先頭の文字列へのオフセットです。の</target>
        </trans-unit>
        <trans-unit id="e96381bdcc284e80585b7b54b1e289040c1f9efb" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the ends of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$+[0]&lt;/code&gt; is the offset into the string of the end of the entire match. This is the same value as what the &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; function returns when called on the variable that was matched against. The</source>
          <target state="translated">この配列は、現在アクティブな動的スコープで最後に成功したサブマッチの終了のオフセットを保持します。 &lt;code&gt;$+[0]&lt;/code&gt; は、一致全体の最後の文字列へのオフセットです。これは、照合された変数に対して呼び出されたときに &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; 関数が返すものと同じ値です。の</target>
        </trans-unit>
        <trans-unit id="7e3b87670db2d70a8b725b5f6afad0e3488c0499" translate="yes" xml:space="preserve">
          <source>This array holds the offsets of the ends of the last successful submatches in the currently active dynamic scope. &lt;code&gt;$+[0]&lt;/code&gt; is the offset into the string of the end of the entire match. This is the same value as what the &lt;code&gt;pos&lt;/code&gt; function returns when called on the variable that was matched against. The</source>
          <target state="translated">この配列は、現在アクティブな動的スコープで最後に成功したサブマッチの終了のオフセットを保持します。 &lt;code&gt;$+[0]&lt;/code&gt; は、一致全体の終わりの文字列へのオフセットです。これは、照合された変数で呼び出されたときに &lt;code&gt;pos&lt;/code&gt; 関数が返す値と同じです。ザ・</target>
        </trans-unit>
        <trans-unit id="de9df0444460b118bc16cc7a6647d43831c503da" translate="yes" xml:space="preserve">
          <source>This array of function pointers is a convenient place to hook into the compilation process. An XS module can put its own custom check function in place of any of the standard ones, to influence the compilation of a particular type of op. However, a custom check function must never fully replace a standard check function (or even a custom check function from another module). A module modifying checking must instead &lt;b&gt;wrap&lt;/b&gt; the preexisting check function. A custom check function must be selective about when to apply its custom behaviour. In the usual case where it decides not to do anything special with an op, it must chain the preexisting op function. Check functions are thus linked in a chain, with the core's base checker at the end.</source>
          <target state="translated">この関数ポインタの配列は、コンパイルプロセスにフックするのに便利な場所です。 XSモジュールは、標準のチェック関数の代わりに独自のカスタムチェック関数を配置して、特定のタイプのopのコンパイルに影響を与えることができます。ただし、カスタムチェック関数は、標準チェック関数（または別のモジュールのカスタムチェック関数）を完全に置き換えることはできません。チェックを変更するモジュールは、代わりに既存のチェック関数を&lt;b&gt;ラップ&lt;/b&gt;する必要があります。カスタムチェック関数は、カスタム動作をいつ適用するかについて選択的でなければなりません。 opで特別なことをしないと決定する通常のケースでは、既存のop関数をチェーンする必要があります。したがって、チェック関数はチェーンにリンクされ、コアのベースチェッカーが最後に配置されます。</target>
        </trans-unit>
        <trans-unit id="b8dc273368b99545f08bf93846a0eeb46f2d8f07" translate="yes" xml:space="preserve">
          <source>This article is about a little-known feature of Perl called</source>
          <target state="translated">この記事では、あまり知られていないPerlの機能である</target>
        </trans-unit>
        <trans-unit id="31e9f3bedf523d7ebb982ebf37f1569db684a386" translate="yes" xml:space="preserve">
          <source>This article originally appeared in</source>
          <target state="translated">この記事は元々</target>
        </trans-unit>
        <trans-unit id="290ae5b40be8703f5e688eadedc6451a7fcb95b4" translate="yes" xml:space="preserve">
          <source>This article originally appeared in The Perl Journal #11, and is copyright 1998 The Perl Journal. It appears courtesy of Jon Orwant and The Perl Journal. This document may be distributed under the same terms as Perl itself.</source>
          <target state="translated">この記事は The Perl Journal #11 に掲載されたもので、著作権は 1998 年の The Perl Journal にあります。Jon Orwant と The Perl Journal の提供です。この文書は Perl 自体と同じ条件で配布されています。</target>
        </trans-unit>
        <trans-unit id="8c193374e77ca7493defa36cbb4f120e07e0e033" translate="yes" xml:space="preserve">
          <source>This article points out cases where gettext (a common system for localizing software interfaces -- i.e., making them work in the user's language of choice) fails because of basic differences between human languages. This article then describes Maketext, a new system capable of correctly treating these differences.</source>
          <target state="translated">この記事では、gettext (ソフトウェアインターフェイスをローカライズするための一般的なシステム、つまりユーザーが選択した言語で動作させる)が人間の言語間の基本的な違いのために失敗するケースを指摘しています。この記事では、これらの違いを正しく扱うことができる新しいシステムである Maketext について説明しています。</target>
        </trans-unit>
        <trans-unit id="f5ced083e00b961f0ed9ea00cb4d87f96f2e0533" translate="yes" xml:space="preserve">
          <source>This assertion may be used as the condition in a</source>
          <target state="translated">このアサーションは</target>
        </trans-unit>
        <trans-unit id="0000b51c42222ffe097e200394d62769ca419cbc" translate="yes" xml:space="preserve">
          <source>This assumes that we saw the locale &quot;en_US.ISO8859-1&quot; using the commands discussed above. We decided to try that instead of the above faulty locale &quot;En_US&quot;--and in Cshish shells (&lt;b&gt;csh&lt;/b&gt;, &lt;b&gt;tcsh&lt;/b&gt;)</source>
          <target state="translated">これは、上記のコマンドを使用してロケール「en_US.ISO8859-1」を見たことを前提としています。上記の問題のあるロケール「En_US」の代わりに、Cshishシェル（&lt;b&gt;csh&lt;/b&gt;、&lt;b&gt;tcsh&lt;/b&gt;）で試してみることにしました。</target>
        </trans-unit>
        <trans-unit id="c0dee2f933f09058dd9bf3765b7f846ec57f52d7" translate="yes" xml:space="preserve">
          <source>This attribute is not a search parameter, but is used to report the result of &lt;code&gt;survey&lt;/code&gt; method, as discussed in the next section.</source>
          <target state="translated">この属性は検索パラメーターではありませんが、次のセクションで説明するように、 &lt;code&gt;survey&lt;/code&gt; 方法の結果を報告するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9c687ced37405f8cf67c894463cfe3d86f5b0e65" translate="yes" xml:space="preserve">
          <source>This attribute is used to specify names to be imported into the extension. It is currently only used by OS/2 and Win32.</source>
          <target state="translated">この属性は、拡張機能にインポートする名前を指定するために使用されます。現在のところOS/2とWin32でのみ使用されています。</target>
        </trans-unit>
        <trans-unit id="a3e8362900ead72447d5c4ebf2182285972d3847" translate="yes" xml:space="preserve">
          <source>This attribute is used to specify names to be imported into the extension. Takes a hash ref.</source>
          <target state="translated">この属性は、拡張モジュールにインポートする名前を指定するために使用されます。ハッシュ参照を取ります。</target>
        </trans-unit>
        <trans-unit id="1878c97024e58d679f418b8cab0863e53682e594" translate="yes" xml:space="preserve">
          <source>This attribute isn't overridden from &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;'s implementation. However, since we turn it on by default, it's worth mentioning here.</source>
          <target state="translated">この属性は、&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handle&lt;/a&gt;の実装からオーバーライドされません。ただし、デフォルトでオンになっているため、ここで言及する価値があります。</target>
        </trans-unit>
        <trans-unit id="767e4d21fb47d7f73037ece0977c12a97d29d46d" translate="yes" xml:space="preserve">
          <source>This attribute may be most useful when specified as a string on the command line: perl Makefile.PL EXCLUDE_EXT='Socket Safe'</source>
          <target state="translated">この属性は、コマンドラインで文字列として指定されている場合に最も便利です:perl Makefile.PL EXCLUDE_EXT='Socket Safe'</target>
        </trans-unit>
        <trans-unit id="79f89eca0caacc11c08af6c151f34570659a105e" translate="yes" xml:space="preserve">
          <source>This attribute may be most useful when specified as a string on the command line: perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'</source>
          <target state="translated">この属性は、コマンドラインで文字列として指定すると最も便利です:perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'</target>
        </trans-unit>
        <trans-unit id="f063de8522828eff3b84027f3f1f4329111a6d6f" translate="yes" xml:space="preserve">
          <source>This attribute means that every time this search sees a matching Pod file, it should call this callback routine. The routine is called with two parameters: the current file's filespec, and its pod name. (For example: &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; would be in &lt;code&gt;@_&lt;/code&gt; .)</source>
          <target state="translated">この属性は、この検索で​​一致するポッドファイルが見つかるたびに、このコールバックルーチンを呼び出す必要があることを意味します。このルーチンは、現在のファイルのファイル指定とそのポッド名の2つのパラメーターで呼び出されます。（例：（ &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; は &lt;code&gt;@_&lt;/code&gt; にあります。）</target>
        </trans-unit>
        <trans-unit id="b18ca20df7bd3e30c21736b41cee34c8a2b8e2a6" translate="yes" xml:space="preserve">
          <source>This attribute means that every time this search sees a matching Pod file, it should call this callback routine. The routine is called with two parameters: the current file's filespec, and its pod name. (For example: &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; would be in &lt;code&gt;@_&lt;/code&gt;.)</source>
          <target state="translated">この属性は、この検索で​​一致するポッドファイルが見つかるたびに、このコールバックルーチンを呼び出す必要があることを意味します。ルーチンは、現在のファイルのfilespecとそのポッド名の2つのパラメーターで呼び出されます。 （例：（ &lt;code&gt;(&quot;/etc/perljunk/File/Crunk.pm&quot;, &quot;File::Crunk&quot;)&lt;/code&gt; は &lt;code&gt;@_&lt;/code&gt; にあります。）</target>
        </trans-unit>
        <trans-unit id="d1d55a165f99ccc6289583795c82aceb24ceabae" translate="yes" xml:space="preserve">
          <source>This attribute's default value is false, meaning that no callback is called.</source>
          <target state="translated">この属性のデフォルト値は false で、コールバックが呼び出されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="bcee703f93ae24f2cb5be27baf6a28edef44800c" translate="yes" xml:space="preserve">
          <source>This attribute's default value is false; and normally you won't need to turn it on.</source>
          <target state="translated">この属性のデフォルト値は false で、通常はこの属性をオンにする必要はありません。</target>
        </trans-unit>
        <trans-unit id="56b03f0333e5f7d53de3d13aaa7c296581e96eb6" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a nonzero positive value, will make searches output (via &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;) notes about what they're doing as they do it. This option may be useful for debugging a pod-related module. This attribute's default value is zero, meaning that no &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; messages are produced. (Setting verbose to 1 turns on some messages, and setting it to 2 turns on even more messages, i.e., makes the following search(es) even more verbose than 1 would make them.)</source>
          <target state="translated">この属性は、ゼロ以外の正の値に設定されている場合、検索時に（ &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; を介して）ユーザーが何をしているかについてメモを出力します。このオプションは、ポッド関連モジュールのデバッグに役立つ場合があります。この属性のデフォルト値はゼロです。つまり、 &lt;code&gt;&lt;a href=&quot;../../functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; メッセージは生成されません。 （verboseを1に設定すると、一部のメッセージがオンになり、2に設定すると、さらに多くのメッセージがオンになります。つまり、次の検索では、1よりも詳細な検索が行われます。）</target>
        </trans-unit>
        <trans-unit id="0c5539e5a1f8b4ae98bcf6660273088727acad03" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a nonzero positive value, will make searches output (via &lt;code&gt;warn&lt;/code&gt;) notes about what they're doing as they do it. This option may be useful for debugging a pod-related module. This attribute's default value is zero, meaning that no &lt;code&gt;warn&lt;/code&gt; messages are produced. (Setting verbose to 1 turns on some messages, and setting it to 2 turns on even more messages, i.e., makes the following search(es) even more verbose than 1 would make them.)</source>
          <target state="translated">この属性をゼロ以外の正の値に設定すると、検索出力に（ &lt;code&gt;warn&lt;/code&gt; を介して）実行中の実行内容に関するメモが作成されます。このオプションは、ポッド関連モジュールのデバッグに役立つ場合があります。この属性のデフォルト値はゼロです。これは、 &lt;code&gt;warn&lt;/code&gt; メッセージが生成されないことを意味します。（verboseを1に設定すると一部のメッセージがオンになり、2に設定するとさらに多くのメッセージがオンになります。つまり、次の検索が1よりもさらに冗長になります。）</target>
        </trans-unit>
        <trans-unit id="9a5ab376fb5b92c88b226665b3b3189f69774bb5" translate="yes" xml:space="preserve">
          <source>This attribute, if set to a true value, means that searches should implicitly add perl's</source>
          <target state="translated">この属性は、真の値に設定されている場合、検索は暗黙のうちにPerlの</target>
        </trans-unit>
        <trans-unit id="cb9b1d7b2cb6a7fd551e138029c10c2929f9890c" translate="yes" xml:space="preserve">
          <source>This attribute, if set to true will send complaints to STDERR. The default value is false -- i.e., complaints do not go to STDERR.</source>
          <target state="translated">この属性をtrueに設定すると、苦情はSTDERRに送信されます。デフォルト値はfalseで、苦情はSTDERRには送信されません。</target>
        </trans-unit>
        <trans-unit id="b61204e83fba97c2ca8def6dbf1ab66670d89867" translate="yes" xml:space="preserve">
          <source>This attribute, if set to true, will suppress generation of an errata section. The default value is false -- i.e., an errata section will be generated.</source>
          <target state="translated">この属性をtrueに設定すると、正誤表セクションの生成を抑制します。デフォルト値は false --つまり、正誤表セクションが生成されます。</target>
        </trans-unit>
        <trans-unit id="571c6c575be741c0ccb3900f5d3e71326d82d454" translate="yes" xml:space="preserve">
          <source>This attribute, if set to true, will suppress reports of non-fatal error messages. The default value is false, meaning that complaints</source>
          <target state="translated">この属性をtrueに設定すると、致命的ではないエラーメッセージの報告を抑制します。デフォルト値は false です。</target>
        </trans-unit>
        <trans-unit id="a182f040f9812e41854866431a64ba79744c6637" translate="yes" xml:space="preserve">
          <source>This attribute, when set to a true value (and it is false by default) ignores any &quot;X&amp;lt;...&amp;gt;&quot; sequences in the document being parsed. Many formats don't actually use the content of these codes, so have no reason to process them.</source>
          <target state="translated">この属性をtrue値に設定すると（デフォルトではfalseになります）、解析対象のドキュメント内の「X &amp;lt;...&amp;gt;」シーケンスはすべて無視されます。多くのフォーマットは実際にはこれらのコードの内容を使用しないため、それらを処理する理由はありません。</target>
        </trans-unit>
        <trans-unit id="b434a6b0cc83e10e398b4286a85f3e17ab1066b8" translate="yes" xml:space="preserve">
          <source>This attribute, when set to a true value (and it is false by default) makes sure that only one event (or token, or node) will be created for any single contiguous sequence of text. For example, consider this somewhat contrived example:</source>
          <target state="translated">この属性は、真の値に設定されている場合(デフォルトでは偽です)、連続したテキストの単一のシーケンスに対して一つのイベント(またはトークン、またはノード)のみが作成されることを確実にします。例えば、次のような、ちょっと工夫された例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="2a15dcae492825f898078cd25d1654376a0c6156" translate="yes" xml:space="preserve">
          <source>This attribute, when set to a true value (it is false by default) will keep &lt;code&gt;=encoding&lt;/code&gt; and its content in the event structure. Most formats don't actually need to process the content of an &lt;code&gt;=encoding&lt;/code&gt; directive, even when this directive sets the encoding and the processor makes use of the encoding information. Indeed, it is possible to know the encoding without processing the directive content.</source>
          <target state="translated">この属性をtrue値（デフォルトではfalse）に設定 &lt;code&gt;=encoding&lt;/code&gt; と、= encodingとそのコンテンツがイベント構造に保持されます。ほとんどのフォーマットは、 &lt;code&gt;=encoding&lt;/code&gt; ディレクティブがエンコーディングを設定し、プロセッサがエンコーディング情報を利用する場合でも、実際には= encodingディレクティブのコンテンツを処理する必要はありません。実際、ディレクティブの内容を処理せずにエンコーディングを知ることは可能です。</target>
        </trans-unit>
        <trans-unit id="696114490e2efba39fd9f36eac6a38a5d07a8aca" translate="yes" xml:space="preserve">
          <source>This became fatal in Perl 5.32.</source>
          <target state="translated">これはPerl 5.32で致命的になりました。</target>
        </trans-unit>
        <trans-unit id="b39a84ee1b444ad72be8b273ce2aa43be2362f55" translate="yes" xml:space="preserve">
          <source>This behavior can be overridden by supplying your own set of files to search. PL_FILES accepts a hash ref, the key being the file to run and the value is passed in as the first argument when the PL file is run.</source>
          <target state="translated">この動作は、検索するファイルの独自のセットを指定することで上書きすることができます。PL_FILES はハッシュ値を受け取ります。キーは実行するファイルで、PL ファイルを実行する際の第一引数として値が渡されます。</target>
        </trans-unit>
        <trans-unit id="fa4bb1602ab15283bd3eccd436e14ac034642f38" translate="yes" xml:space="preserve">
          <source>This behavior is convenient, because we usually want to ignore newlines when we count and match characters in a line. Sometimes, however, we want to keep track of newlines. We might even want &lt;code&gt;'^'&lt;/code&gt; and &lt;code&gt;'$'&lt;/code&gt; to anchor at the beginning and end of lines within the string, rather than just the beginning and end of the string. Perl allows us to choose between ignoring and paying attention to newlines by using the &lt;code&gt;/s&lt;/code&gt; and &lt;code&gt;/m&lt;/code&gt; modifiers. &lt;code&gt;/s&lt;/code&gt; and &lt;code&gt;/m&lt;/code&gt; stand for single line and multi-line and they determine whether a string is to be treated as one continuous string, or as a set of lines. The two modifiers affect two aspects of how the regexp is interpreted: 1) how the &lt;code&gt;'.'&lt;/code&gt; character class is defined, and 2) where the anchors &lt;code&gt;'^'&lt;/code&gt; and &lt;code&gt;'$'&lt;/code&gt; are able to match. Here are the four possible combinations:</source>
          <target state="translated">1行の文字を数えて照合するときは通常、改行を無視する必要があるため、この動作は便利です。ただし、改行を追跡したい場合もあります。文字列の最初と最後だけでなく、文字列内の行の最初と最後に &lt;code&gt;'^'&lt;/code&gt; と &lt;code&gt;'$'&lt;/code&gt; を固定したい場合もあります。 Perlでは、 &lt;code&gt;/s&lt;/code&gt; および &lt;code&gt;/m&lt;/code&gt; 修飾子を使用して、改行を無視するか注意を払うかを選択できます。 &lt;code&gt;/s&lt;/code&gt; と &lt;code&gt;/m&lt;/code&gt; は単一行と複数行を表し、文字列を1つの連続した文字列として扱うか、行のセットとして扱うかを決定します。 2つの修飾子は、正規表現の解釈方法の2つの側面に影響を与えます。1） &lt;code&gt;'.'&lt;/code&gt; 文字クラスが定義され、2）アンカー &lt;code&gt;'^'&lt;/code&gt; と &lt;code&gt;'$'&lt;/code&gt; が一致できる場所。考えられる4つの組み合わせは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="31de598976c4af9df58fa731498e0e725fcefe91" translate="yes" xml:space="preserve">
          <source>This behavior is convenient, because we usually want to ignore newlines when we count and match characters in a line. Sometimes, however, we want to keep track of newlines. We might even want &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; to anchor at the beginning and end of lines within the string, rather than just the beginning and end of the string. Perl allows us to choose between ignoring and paying attention to newlines by using the &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; modifiers. &lt;code&gt;//s&lt;/code&gt; and &lt;code&gt;//m&lt;/code&gt; stand for single line and multi-line and they determine whether a string is to be treated as one continuous string, or as a set of lines. The two modifiers affect two aspects of how the regexp is interpreted: 1) how the &lt;code&gt;'.'&lt;/code&gt; character class is defined, and 2) where the anchors &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; are able to match. Here are the four possible combinations:</source>
          <target state="translated">この動作は便利です。通常、1行の文字を数えて一致させるときは改行を無視したいからです。ただし、改行を追跡したい場合もあります。私たちもお勧めします &lt;code&gt;^&lt;/code&gt; と &lt;code&gt;$&lt;/code&gt; いうだけで文字列の先頭と末尾よりも、文字列内の行の最初と最後にアンカーに。 Perlでは、 &lt;code&gt;//s&lt;/code&gt; および &lt;code&gt;//m&lt;/code&gt; 修飾子を使用して、改行を無視するか注意を払うかを選択できます。 &lt;code&gt;//s&lt;/code&gt; と &lt;code&gt;//m&lt;/code&gt; は単一行と複数行を表し、文字列を1つの連続文字列として処理するか、一連の行として処理するかを決定します。 2つの修飾子は、正規表現の解釈方法の2つの側面に影響を与えます。1） &lt;code&gt;'.'&lt;/code&gt; 文字クラスが定義されており、2）アンカー &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; が一致できる場所。考えられる4つの組み合わせは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3d6ebadd3063ef053971debc9b4e78f1e936126e" translate="yes" xml:space="preserve">
          <source>This behavior is more &quot;Do what I mean&quot; than in earlier Perls for most applications. But it catches fewer issues for code that needs to be strictly Unicode compliant. Therefore there is an additional mode of operation available to accommodate such code. This mode is enabled if a regular expression pattern is compiled within the lexical scope where the &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; warning class has been made fatal, say by:</source>
          <target state="translated">この動作は、ほとんどのアプリケーションで、以前のPerlの場合よりも「私の言っていることを実行する」ものです。ただし、Unicodeに厳密に準拠する必要があるコードでは、問題の検出数は少なくなります。したがって、そのようなコードに対応するために利用可能な追加の操作モードがあります。このモードは、 &lt;code&gt;&quot;non_unicode&quot;&lt;/code&gt; 警告クラスが致命的になっているレキシカルスコープ内で正規表現パターンがコンパイルされた場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="092eaaecfde2fe8092e286b99e012b8ea81cec11" translate="yes" xml:space="preserve">
          <source>This behavior of &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; is to be compatible with POSIX behavior and not traditional VMS behavior.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; この動作は、POSIXの動作と互換性があり、従来のVMSの動作とは互換性がありません。</target>
        </trans-unit>
        <trans-unit id="76845e7cfd2a36561cb45a7adf71017bb1774b07" translate="yes" xml:space="preserve">
          <source>This behavior of &lt;code&gt;unlink&lt;/code&gt; is to be compatible with POSIX behavior and not traditional VMS behavior.</source>
          <target state="translated">この &lt;code&gt;unlink&lt;/code&gt; 動作は、従来のVMSの動作ではなく、POSIXの動作と互換性があります。</target>
        </trans-unit>
        <trans-unit id="353b3ac3017572fed965aadb9e085377b2c9e20d" translate="yes" xml:space="preserve">
          <source>This behavior provides the semantic of lexical scoping, and is used in, for instance, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; pragma.</source>
          <target state="translated">この動作は、字句スコープのセマンティクスを提供し、たとえば &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; プラグマで使用されます。</target>
        </trans-unit>
        <trans-unit id="96dcd6333752f9f98479a9189f9fc8dc00af90ba" translate="yes" xml:space="preserve">
          <source>This behavior provides the semantic of lexical scoping, and is used in, for instance, the &lt;code&gt;use strict&lt;/code&gt; pragma.</source>
          <target state="translated">この動作は、字句スコープのセマンティクスを提供し、たとえば、 &lt;code&gt;use strict&lt;/code&gt; プラグマの使用で使用されます。</target>
        </trans-unit>
        <trans-unit id="902d9db5da6a9d0d90bec88dd7435e3d3036822b" translate="yes" xml:space="preserve">
          <source>This behaviour is identical to that of the actual compiler.</source>
          <target state="translated">この動作は実際のコンパイラと同じです。</target>
        </trans-unit>
        <trans-unit id="6e8dc928034c49a32a9b32094d6524d49150a39e" translate="yes" xml:space="preserve">
          <source>This behviour is copied inspired by &lt;code&gt;IO::Socket::INET&lt;/code&gt;; for more fine grained control over connection timeouts, consider performing a nonblocking connect directly.</source>
          <target state="translated">この動作は、 &lt;code&gt;IO::Socket::INET&lt;/code&gt; 触発されてコピーされています。接続タイムアウトをよりきめ細かく制御するには、ノンブロッキング接続を直接実行することを検討してください。</target>
        </trans-unit>
        <trans-unit id="6aea6026d60fc1fd0c7a4849c08ac16e1e32fc6e" translate="yes" xml:space="preserve">
          <source>This binds a &lt;a href=&quot;http://man.he.net/man3/dbm&quot;&gt;dbm(3)&lt;/a&gt;, &lt;a href=&quot;http://man.he.net/man3/ndbm&quot;&gt;ndbm(3)&lt;/a&gt;, &lt;a href=&quot;http://man.he.net/man3/sdbm&quot;&gt;sdbm(3)&lt;/a&gt;, &lt;a href=&quot;http://man.he.net/man3/gdbm&quot;&gt;gdbm(3)&lt;/a&gt;, or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;, the first argument is</source>
          <target state="translated">これにより、&lt;a href=&quot;http://man.he.net/man3/dbm&quot;&gt;dbm（3）&lt;/a&gt;、&lt;a href=&quot;http://man.he.net/man3/ndbm&quot;&gt;ndbm（3）&lt;/a&gt;、&lt;a href=&quot;http://man.he.net/man3/sdbm&quot;&gt;sdbm（3）&lt;/a&gt;、&lt;a href=&quot;http://man.he.net/man3/gdbm&quot;&gt;gdbm（3）&lt;/a&gt;、またはBerkeleyDBファイルがハッシュにバインドされます。HASHはハッシュの名前です。（通常の&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;とは異なり、最初の引数は</target>
        </trans-unit>
        <trans-unit id="fd9ffc9da0934423cf7a8b2a8167c734225e00ac" translate="yes" xml:space="preserve">
          <source>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, the first argument is</source>
          <target state="translated">これは、dbm（3）、ndbm（3）、sdbm（3）、gdbm（3）、またはBerkeley DBファイルをハッシュにバインドします。HASHはハッシュの名前です。（通常の &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; とは異なり、最初の引数は</target>
        </trans-unit>
        <trans-unit id="2616a24dba48e4df35dec143fa3cabdfd81fd386" translate="yes" xml:space="preserve">
          <source>This binds a dbm(3), ndbm(3), sdbm(3), gdbm(3), or Berkeley DB file to a hash. HASH is the name of the hash. (Unlike normal &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, the first argument is</source>
          <target state="translated">これは、dbm（3）、ndbm（3）、sdbm（3）、gdbm（3）、またはBerkeley DBファイルをハッシュにバインドします。HASHはハッシュの名前です。（通常の &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; とは異なり、最初の引数は</target>
        </trans-unit>
        <trans-unit id="a6324526e82c2b2028f79347525bf2bc78810ebd" translate="yes" xml:space="preserve">
          <source>This block modifies all the &lt;code&gt;.c&lt;/code&gt; files in the current directory, leaving a backup of the original data from each file in a new &lt;code&gt;.c.orig&lt;/code&gt; file.</source>
          <target state="translated">このブロックは、現在のディレクトリにあるすべての &lt;code&gt;.c&lt;/code&gt; ファイルを変更し、各ファイルの元のデータのバックアップを新しい &lt;code&gt;.c.orig&lt;/code&gt; ファイルに残します。</target>
        </trans-unit>
        <trans-unit id="ba453fd403a510bef4a413f0d9ec2dc3165244e0" translate="yes" xml:space="preserve">
          <source>This boilerplate uses the low-overhead &lt;code&gt;XSLoader&lt;/code&gt; if present; if used with an antique Perl which has no &lt;code&gt;XSLoader&lt;/code&gt; , it falls back to using &lt;code&gt;DynaLoader&lt;/code&gt; .</source>
          <target state="translated">このボイラープレートは、存在する場合は低オーバーヘッドの &lt;code&gt;XSLoader&lt;/code&gt; を使用します。 &lt;code&gt;XSLoader&lt;/code&gt; のない旧式の Perlで使用すると、 &lt;code&gt;DynaLoader&lt;/code&gt; の使用にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="ed948443998fb2b43bd30eac485b18baa935c1f0" translate="yes" xml:space="preserve">
          <source>This boilerplate uses the low-overhead &lt;code&gt;XSLoader&lt;/code&gt; if present; if used with an antique Perl which has no &lt;code&gt;XSLoader&lt;/code&gt;, it falls back to using &lt;code&gt;DynaLoader&lt;/code&gt;.</source>
          <target state="translated">このボイラープレートは、存在する場合、オーバーヘッドの &lt;code&gt;XSLoader&lt;/code&gt; 使用します。 &lt;code&gt;XSLoader&lt;/code&gt; を持たない旧式のPerlで使用すると、 &lt;code&gt;DynaLoader&lt;/code&gt; の使用にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="6ac1b6bd4290dbb1a12be2a600f9520d51970c2a" translate="yes" xml:space="preserve">
          <source>This breaks tests that do string comparison of TAP output.</source>
          <target state="translated">これは、TAP出力の文字列比較を行うテストを中断します。</target>
        </trans-unit>
        <trans-unit id="1469fe949bc40a4de2b7dea78ef9ae09eb5856f4" translate="yes" xml:space="preserve">
          <source>This brings up a very important lesson. Code has bugs. Tests are code. Ergo, tests have bugs. A failing test could mean a bug in the code, but don't discount the possibility that the test is wrong.</source>
          <target state="translated">これは非常に重要な教訓をもたらします。コードにはバグがある。テストはコードです したがって、テストにはバグがあります。テストの失敗はコードのバグを意味しますが、テストが間違っている可能性を無視してはいけません。</target>
        </trans-unit>
        <trans-unit id="090e5f02457ce14eed85483c0b931f07be2bd405" translate="yes" xml:space="preserve">
          <source>This bug only affects closures that are generated by the block but used afterwards. Lexical variables that are only used during the lifetime of the block's execution will take their individual values for each invocation, as normal.</source>
          <target state="translated">このバグは、ブロックによって生成された後に使用されるクロージャにのみ影響します。ブロックの実行期間中にのみ使用される語彙変数は、通常通り、呼び出しごとに個別の値を取ります。</target>
        </trans-unit>
        <trans-unit id="68e1e1f3b09649c408f4196cd0038c9420b69124" translate="yes" xml:space="preserve">
          <source>This bug was deprecated in Perl 5.004, has been rectified in Perl 5.28 by using method lookup only for methods' &lt;code&gt;AUTOLOAD&lt;/code&gt;s.</source>
          <target state="translated">このバグはPerl5.004で非推奨になり、Perl 5.28では、メソッドの &lt;code&gt;AUTOLOAD&lt;/code&gt; に対してのみメソッドルックアップを使用することで修正されました。</target>
        </trans-unit>
        <trans-unit id="3fb23a96de018295d436dfc71b478c2f496e60be" translate="yes" xml:space="preserve">
          <source>This bug was fixed in Perl 5.18, but may still trip you up if you are using older versions:</source>
          <target state="translated">このバグはPerl 5.18で修正されましたが、古いバージョンを使用している場合は、まだあなたを悩ませるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ca44502c3ed83912a6b5db8a967d8fd6b852bc6b" translate="yes" xml:space="preserve">
          <source>This bug will be rectified in future by using method lookup only for methods' &lt;code&gt;AUTOLOAD&lt;/code&gt; s. However, there is a significant base of existing code that may be using the old behavior. So, as an interim step, Perl currently issues an optional warning when non-methods use inherited &lt;code&gt;AUTOLOAD&lt;/code&gt; s.</source>
          <target state="translated">このバグは、メソッドの &lt;code&gt;AUTOLOAD&lt;/code&gt; に対してのみメソッドルックアップを使用することにより、将来的に修正される予定です。ただし、古い動作を使用している可能性がある既存のコードの重要なベースがあります。そのため、暫定的なステップとして、Perlは現在、メソッド以外が継承された &lt;code&gt;AUTOLOAD&lt;/code&gt; を使用するときにオプションの警告を発行しています。</target>
        </trans-unit>
        <trans-unit id="3151c00be9f916508bc5bf705b67d1e4b35d8229" translate="yes" xml:space="preserve">
          <source>This call extracts the next single substring that is a valid Perl quotelike operator (and removes it from $text):</source>
          <target state="translated">このコールは、Perl の有効なクオテル演算子である次の単一の部分文字列を抽出します (そして、それを $text から削除します)。</target>
        </trans-unit>
        <trans-unit id="ced21c2bd0a49aeaa42731431a2edf3632b44a97" translate="yes" xml:space="preserve">
          <source>This call will allow &lt;code&gt;--l&lt;/code&gt; and &lt;code&gt;--L&lt;/code&gt; for the length option, but requires a least &lt;code&gt;--hea&lt;/code&gt; and &lt;code&gt;--hei&lt;/code&gt; for the head and height options.</source>
          <target state="translated">この呼び出しは許可します &lt;code&gt;--l&lt;/code&gt; と &lt;code&gt;--L&lt;/code&gt; lengthオプションのために、しかし少なくとも必要で &lt;code&gt;--hea&lt;/code&gt; と &lt;code&gt;--hei&lt;/code&gt; ヘッドと高さのオプションのために。</target>
        </trans-unit>
        <trans-unit id="cc74026b11403dd05d9d70bf8ec94212f671778f" translate="yes" xml:space="preserve">
          <source>This callback is where Perl untaints its own capture variables under taint mode (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). See the &lt;code&gt;Perl_reg_numbered_buff_fetch&lt;/code&gt; function in</source>
          <target state="translated">このコールバックは、Perlが汚染モード（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）で独自のキャプチャ変数をuntaintingする場所です。 &lt;code&gt;Perl_reg_numbered_buff_fetch&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="34608b82ee2af981743bfaea1702ca89b064619d" translate="yes" xml:space="preserve">
          <source>This callback will always be invoked and this will happen for each result after one of the above callbacks is invoked. For example, if &lt;a href=&quot;../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is loaded, you could use the following to color your test output:</source>
          <target state="translated">このコールバックは常に呼び出され、これは上記のコールバックの1つが呼び出された後、結果ごとに発生します。たとえば、&lt;a href=&quot;../term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt;がロードされている場合、以下を使用してテスト出力に色を付けることができます。</target>
        </trans-unit>
        <trans-unit id="f9cffd244aaaaeed6cac7d9924c6db108cbddbfb" translate="yes" xml:space="preserve">
          <source>This callback will always be invoked and this will happen for each result after one of the above callbacks is invoked. For example, if &lt;a href=&quot;Term::ANSIColor&quot;&gt;Term::ANSIColor&lt;/a&gt; is loaded, you could use the following to color your test output:</source>
          <target state="translated">このコールバックは常に呼び出され、上記のコールバックのいずれかが呼び出された後、結果ごとに発生します。たとえば、&lt;a href=&quot;Term::ANSIColor&quot;&gt;Term :: ANSIColor&lt;/a&gt;がロードされている場合、次を使用してテスト出力に色を付けることができます。</target>
        </trans-unit>
        <trans-unit id="367b3e398988397a700bd743e801d4bc7d9d9445" translate="yes" xml:space="preserve">
          <source>This calls &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; with the SV_GMAGIC flag. See &lt;code&gt;&lt;a href=&quot;#sv_collxfrm_flags&quot;&gt;&quot;sv_collxfrm_flags&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これにより、SV_GMAGICフラグを &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; してsv_collxfrm_flagsが呼び出されます。 &lt;code&gt;&lt;a href=&quot;#sv_collxfrm_flags&quot;&gt;&quot;sv_collxfrm_flags&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="a84240a7c3c6fb058597f6d953d7900c399c1c57" translate="yes" xml:space="preserve">
          <source>This calls &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; with the SV_GMAGIC flag. See &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; .</source>
          <target state="translated">これは、SV_GMAGICフラグを &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; してsv_collxfrm_flagsを呼び出します。 &lt;code&gt;sv_collxfrm_flags&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e3061d1429b373972a7ca085f04de1fcdc079ed5" translate="yes" xml:space="preserve">
          <source>This calls the &lt;a href=&quot;http://man.he.net/man2/select&quot;&gt;select(2)&lt;/a&gt; syscall with the bit masks specified, which can be constructed using &lt;a href=&quot;#fileno-FILEHANDLE&quot;&gt;&lt;code&gt;fileno&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#vec-EXPR%2COFFSET%2CBITS&quot;&gt;&lt;code&gt;vec&lt;/code&gt;&lt;/a&gt;, along these lines:</source>
          <target state="translated">これにより、指定されたビットマスクを使用して&lt;a href=&quot;http://man.he.net/man2/select&quot;&gt;select（2）&lt;/a&gt; syscallが呼び出されます。これは、&lt;a href=&quot;#fileno-FILEHANDLE&quot;&gt; &lt;code&gt;fileno&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#vec-EXPR%2COFFSET%2CBITS&quot;&gt; &lt;code&gt;vec&lt;/code&gt; &lt;/a&gt;を使用して、次の行に沿って作成できます。</target>
        </trans-unit>
        <trans-unit id="5732bf6668134ab56787956038f1ef3e84c0d62a" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;bark&lt;/code&gt; method from class &lt;code&gt;Dog&lt;/code&gt; on an object of class &lt;code&gt;Tree&lt;/code&gt;, even if the two classes are completely unrelated. Use this with great care.</source>
          <target state="translated">これは、2つのクラスが完全に無関係であっても、クラス &lt;code&gt;Tree&lt;/code&gt; のオブジェクトのクラス &lt;code&gt;Dog&lt;/code&gt; から &lt;code&gt;bark&lt;/code&gt; メソッドを呼び出します。これは細心の注意を払って使用してください。</target>
        </trans-unit>
        <trans-unit id="86657828dc4b39c2a031e8feb96e30aa836f7063" translate="yes" xml:space="preserve">
          <source>This calls the select(2) syscall with the bit masks specified, which can be constructed using &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, along these lines:</source>
          <target state="translated">これは、次の行に沿って &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; を使用して構築できるビットマスクを指定して、select（2）syscallを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6030aab04889f87b188edddb787660db9b1b144a" translate="yes" xml:space="preserve">
          <source>This calls the select(2) syscall with the bit masks specified, which can be constructed using &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, along these lines:</source>
          <target state="translated">これは、次の行に沿って &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; を使用して構築できるビットマスクを指定して、select（2）syscallを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9bc12c1e6a592155ae29365e5d2b2a31283e6dd9" translate="yes" xml:space="preserve">
          <source>This can also be a problem with intermediate subprocesses in more complicated code, which will call waitpid() on all open filehandles during global destruction--in no predictable order.</source>
          <target state="translated">これは、より複雑なコードの中の中間サブプロセスでも問題になる可能性があり、グローバルな破壊中にすべての開いているファイルハンドルに対して waitpid()を呼び出します。</target>
        </trans-unit>
        <trans-unit id="62869b1f9b57cb9d79e8730408b0c95ddf4b16ac" translate="yes" xml:space="preserve">
          <source>This can also be called with a null first argument to indicate that &lt;code&gt;oldstash&lt;/code&gt; has been deleted.</source>
          <target state="translated">これをnullの最初の引数で &lt;code&gt;oldstash&lt;/code&gt; て、oldstashが削除されたことを示すこともできます。</target>
        </trans-unit>
        <trans-unit id="d43bae30188acac82d7e357353fabe7bc6c40a81" translate="yes" xml:space="preserve">
          <source>This can be accomplished by adding a repeat specifier to the option specification. Repeat specifiers are very similar to the &lt;code&gt;{...}&lt;/code&gt; repeat specifiers that can be used with regular expression patterns. For example, the above command line would be handled as follows:</source>
          <target state="translated">これは、オプション指定に繰り返し指定子を追加することで実現できます。繰り返し指定子は、正規表現パターンで使用できる &lt;code&gt;{...}&lt;/code&gt; 繰り返し指定子と非常によく似ています。たとえば、上記のコマンドラインは次のように処理されます。</target>
        </trans-unit>
        <trans-unit id="372e8345a480f344b8fa12b55e0c07a688e7200f" translate="yes" xml:space="preserve">
          <source>This can be accomplished with a destination routine:</source>
          <target state="translated">これは、デスティネーション・ルーチンで実現できます。</target>
        </trans-unit>
        <trans-unit id="464c830ff985dea25fcd843d007b91d51ce2d2e9" translate="yes" xml:space="preserve">
          <source>This can be called as an object method with no arguments, in which case the &lt;code&gt;facet_data()&lt;/code&gt; method will be called to get the facet data to be validated.</source>
          <target state="translated">これは、引数のないオブジェクトメソッドとして呼び出すことができます。その場合、 &lt;code&gt;facet_data()&lt;/code&gt; メソッドが呼び出され、検証されるファセットデータが取得されます。</target>
        </trans-unit>
        <trans-unit id="c3e3779b19d94c38ed3503cfda1db4bf067d5a3d" translate="yes" xml:space="preserve">
          <source>This can be conveniently combined with precalculation of keys as given above.</source>
          <target state="translated">これは、上記のようなキーの事前計算と便利に組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="9aa85730df925d52e0fdb1ee3b214c2aec4f3fb3" translate="yes" xml:space="preserve">
          <source>This can be especially useful when combined with the &lt;code&gt;sockhost_service&lt;/code&gt; or &lt;code&gt;peerhost_service&lt;/code&gt; methods.</source>
          <target state="translated">これは、 &lt;code&gt;sockhost_service&lt;/code&gt; または &lt;code&gt;peerhost_service&lt;/code&gt; メソッドと組み合わせると特に便利です。</target>
        </trans-unit>
        <trans-unit id="7cf76472161d915f784b473af79b1bc9fd8e3268" translate="yes" xml:space="preserve">
          <source>This can be used by subclasses to generate a starting facet data hashref. This will populate the hashref with the trace, meta, amnesty, and about facets. These facets are nearly always produced the same way for all events.</source>
          <target state="translated">これは、サブクラスが開始ファセットデータのハッシュrefを生成するために使用することができます。これはハッシュrefにトレース、メタ、アムネスティ、aboutの各ファセットを入力します。これらのファセットは、ほとんどの場合、すべてのイベントに対して同じ方法で生成されます。</target>
        </trans-unit>
        <trans-unit id="e45e565a182719c4b0dabf0a12cdb967109b4b28" translate="yes" xml:space="preserve">
          <source>This can be used even on systems that do not support forking, but this possibly allows code intended to read files to unexpectedly execute programs. If one can be sure that a particular program is a Perl script expecting filenames in @ARGV using the two-argument form of open() or the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator, the clever programmer can write something like this:</source>
          <target state="translated">これは、フォークをサポートしていないシステムでも使用できますが、ファイルを読み取ることを目的としたコードが予期せずプログラムを実行する可能性があります。特定のプログラムが、open（）または &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子の2つの引数形式を使用して、@ ARGVのファイル名を期待するPerlスクリプトであると確信できる場合、賢いプログラマーは次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="a0b4de28313d2cd5bd8f3c8a3bcc24922ad427d0" translate="yes" xml:space="preserve">
          <source>This can be used to add a callback that is called after all testing is done. This is too late to add additional results, the main use of this callback is to set the exit code.</source>
          <target state="translated">これは、すべてのテストが完了した後に呼び出されるコールバックを追加するために使用することができます。このコールバックの主な用途は終了コードを設定することです。</target>
        </trans-unit>
        <trans-unit id="f3ad3a6dca3eb7d856d39662d5cd0dcb078d6c2d" translate="yes" xml:space="preserve">
          <source>This can be used to add amnesty to this event. Amnesty only effects failing assertions in most cases, but some formatters may display them for passing assertions, or even non-assertions as well.</source>
          <target state="translated">これを使用して、このイベントにアムネスティを追加することができます。慰謝料はほとんどの場合、アサーションに失敗した場合にのみ効果がありますが、フォーマッタによってはアサーションを通過した場合やアサーション以外の場合にも表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="dee9c9bfb944617270087476daa04080c698fb3a" translate="yes" xml:space="preserve">
          <source>This can be used to change the</source>
          <target state="translated">これを使用して</target>
        </trans-unit>
        <trans-unit id="748558e1f1395a2c9a926433d579682f2842ae42" translate="yes" xml:space="preserve">
          <source>This can be used to change the encoding from this event onward.</source>
          <target state="translated">これは、このイベント以降のエンコーディングを変更するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d06a37a2d3a4148b6ee21e32af3a875ef2d651aa" translate="yes" xml:space="preserve">
          <source>This can be used to determine which branch of a pattern was matched without using a separate capture group for each branch, which in turn can result in a performance improvement, as perl cannot optimize &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; as efficiently as something like &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt; .</source>
          <target state="translated">これは、各ブランチに個別のキャプチャグループを使用せずに、パターンのどのブランチが一致したかを判断するために使用できます。これは、perlが &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt; と同じくらい効率的です。</target>
        </trans-unit>
        <trans-unit id="0743ccbc8c558ff3b1e6409093d7b93b4731ff66" translate="yes" xml:space="preserve">
          <source>This can be used to determine which branch of a pattern was matched without using a separate capture group for each branch, which in turn can result in a performance improvement, as perl cannot optimize &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; as efficiently as something like &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt;.</source>
          <target state="translated">これを使用すると、ブランチごとに個別のキャプチャグループを使用せずに、パターンのどのブランチが一致したかを判断できます。これにより、perlは &lt;code&gt;/(?:(x)|(y)|(z))/&lt;/code&gt; &lt;code&gt;/(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/&lt;/code&gt; ような効率。</target>
        </trans-unit>
        <trans-unit id="346fd0e78230a9b57890db54a4f1c29bc084f4d0" translate="yes" xml:space="preserve">
          <source>This can be used to disable auto-ending behavior for a hub. The auto-ending behavior is triggered by an end block and is used to cull IPC events, and output the final plan if the plan was 'NO PLAN'.</source>
          <target state="translated">これを使用して、ハブのオートエンディング動作を無効にすることができます。オートエンディング動作はエンドブロックによってトリガされ、IPCイベントをカリングし、プランが「NO PLAN」の場合は最終プランを出力するために使用されます。</target>
        </trans-unit>
        <trans-unit id="866129af074a2494eb93f1a1e7f5ceba61d1bdd7" translate="yes" xml:space="preserve">
          <source>This can be used to get/set the no_wait status. Waiting is turned on by default. Waiting will cause the parent process/thread to wait until all child processes and threads are finished before exiting. You will almost never want to turn this off.</source>
          <target state="translated">これは no_wait ステータスの取得/設定に使用できます。Waiting はデフォルトでオンになっています。待機中の場合、親プロセス/スレッドは、すべての子プロセスとスレッドが終了するまで待機してから終了します。これをオフにすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="c6b6a0827f222037bfd74f5afc449218b3d32dc4" translate="yes" xml:space="preserve">
          <source>This can be used to provide overridable configuration defaults:</source>
          <target state="translated">これは、オーバーライド可能な設定のデフォルトを提供するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4da1a803fb62b25b77cf251408452655ad68be2a" translate="yes" xml:space="preserve">
          <source>This can be used to reliably link multiple events created by the same tool. For instance a failing test like &lt;code&gt;ok(0, &quot;fail&quot;&lt;/code&gt; will generate 2 events, one being a &lt;a href=&quot;Test2::Event::Ok&quot;&gt;Test2::Event::Ok&lt;/a&gt;, the other being a &lt;a href=&quot;Test2::Event::Diag&quot;&gt;Test2::Event::Diag&lt;/a&gt;, both of these events are related having been created under the same context and by the same initial tool (though multiple tools may have been nested under the initial one).</source>
          <target state="translated">これを使用して、同じツールで作成された複数のイベントを確実にリンクできます。たとえば、 &lt;code&gt;ok(0, &quot;fail&quot;&lt;/code&gt; ような失敗したテストは2つのイベントを生成します。1つは&lt;a href=&quot;Test2::Event::Ok&quot;&gt;Test2 :: Event :: Ok&lt;/a&gt;で、もう1つは&lt;a href=&quot;Test2::Event::Diag&quot;&gt;Test2 :: Event :: Diag&lt;/a&gt;です。これらのイベントは両方とも作成されて関連しています。同じコンテキストで同じ初期ツールによって（ただし、複数のツールが初期ツールの下にネストされている場合があります）。</target>
        </trans-unit>
        <trans-unit id="6d94a2783d9c9eae4add9e504e9f74c8f2268eac" translate="yes" xml:space="preserve">
          <source>This can be used to remove a context acquire hook.</source>
          <target state="translated">これは、コンテキスト取得フックを削除するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="78bcfb4fcf149daa8d598288ab8cfd7c250fe9bc" translate="yes" xml:space="preserve">
          <source>This can be used to remove a context init hook.</source>
          <target state="translated">これは、コンテキストの init フックを削除するために使用できます。</target>
        </trans-unit>
        <trans-unit id="576301f79d31775925cb858d92533113a213c854" translate="yes" xml:space="preserve">
          <source>This can be used to remove a context release hook.</source>
          <target state="translated">これは、コンテキストリリースフックを削除するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7302fe67fb868f202093521caa858978f0b6a28c" translate="yes" xml:space="preserve">
          <source>This can be used to see the effect of/bugs in the various layers e.g.</source>
          <target state="translated">これは、様々なレイヤーの効果/バグを確認するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="574eac6f70577b288bd89928d8641a1fc45055d3" translate="yes" xml:space="preserve">
          <source>This can be used to send an &lt;a href=&quot;Test2::Event::Plan&quot;&gt;Test2::Event::Plan&lt;/a&gt; event. This event usually takes either a number of tests you expect to run. Optionally you can set the expected count to 0 and give the 'SKIP' directive with a reason to cause all tests to be skipped.</source>
          <target state="translated">これは、&lt;a href=&quot;Test2::Event::Plan&quot;&gt;Test2 :: Event :: Plan&lt;/a&gt;イベントを送信するために使用できます。このイベントは通常、実行する予定のいくつかのテストのいずれかを実行します。オプションで、予想されるカウントを0に設定し、すべてのテストをスキップする理由を指定して「SKIP」ディレクティブを指定できます。</target>
        </trans-unit>
        <trans-unit id="5bfa5c255aef0fa01c834c7ba10a888fee1030c4" translate="yes" xml:space="preserve">
          <source>This can be used to set the template for the IPC temp dir. The template should follow template specifications from &lt;a href=&quot;File::Temp&quot;&gt;File::Temp&lt;/a&gt;.</source>
          <target state="translated">これを使用して、IPC一時ディレクトリのテンプレートを設定できます。テンプレートは、&lt;a href=&quot;File::Temp&quot;&gt;File :: Tempの&lt;/a&gt;テンプレート仕様に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="20e14da8dfc2bfdf2f71fc590d8fe2a63e1000ea" translate="yes" xml:space="preserve">
          <source>This can be used to store bytes in the string component of the SV. Here the representation of the data is irrelevant to perl and the bytes themselves are just stored in the SV. It is assumed that the C variable is a pointer (the bytes are copied from that memory location). If the pointer is pointing to something that is represented by 8 bytes then those 8 bytes are stored in the SV (and length() will report a value of 8). This entry is similar to T_OPAQUE.</source>
          <target state="translated">これはSVの文字列コンポーネントにバイトを格納するために使用することができます。ここでは、データの表現はperlとは無関係で、バイト自体はSVに格納されているだけです。C変数はポインタであると仮定しています(バイトはそのメモリの場所からコピーされます)。ポインタが8バイトで表される何かを指している場合、その8バイトはSVに格納されます(そして、length()は8の値を報告します)。このエントリは T_OPAQUE と似ています。</target>
        </trans-unit>
        <trans-unit id="0410f2327d86bdf0fdae05f37687269ec62b9fe1" translate="yes" xml:space="preserve">
          <source>This can be used to store data from non-pointer types in the string part of an SV. It is similar to T_OPAQUEPTR except that the typemap retrieves the pointer directly rather than assuming it is being supplied. For example, if an integer is imported into Perl using T_OPAQUE rather than T_IV the underlying bytes representing the integer will be stored in the SV but the actual integer value will not be available. i.e. The data is opaque to perl.</source>
          <target state="translated">これは、SVの文字列部分にポインタではない型のデータを格納するために使用することができます。これは T_OPAQUEPTR と似ていますが、タイプマップがポインタを供給されていると仮定するのではなく、直接ポインタを取得する点が異なります。例えば、整数が T_IV ではなく T_OPAQUE を使用して Perl にインポートされた場合、その整数を表すバイトは SV に格納されますが、実際の整数値は利用できません。</target>
        </trans-unit>
        <trans-unit id="89bc9efe11bbc18be53fe6f2369d301f92011919" translate="yes" xml:space="preserve">
          <source>This can be useful when carrying out batch operations on multiple files that have both an input filename and output filename and the output file can be derived from the input filename. Examples of operations where this can be useful include, file renaming, file copying and file compression.</source>
          <target state="translated">これは、入力ファイル名と出力ファイル名の両方を持ち、出力ファイルが入力ファイル名から派生することができる複数のファイルでバッチ操作を実行するときに便利です。これが役に立つ操作の例としては、ファイルのリネーム、ファイルのコピー、ファイルの圧縮などがあります。</target>
        </trans-unit>
        <trans-unit id="7ee5530e46592bdd5b18c5d4e4adf9c1e149be67" translate="yes" xml:space="preserve">
          <source>This can easily be demonstrated by using a module, such as the Socket module, which uses eval &quot;...&quot; as part of an AUTOLOAD function. You can 'use' the module outside the compartment and share an (autoloaded) function with the compartment. If an autoload is triggered by code in the compartment, or by any code anywhere that is called by any means from the compartment, then the eval in the Socket module's AUTOLOAD function happens in the namespace of the compartment. Any variables created or used by the eval'd code are now under the control of the code in the compartment.</source>
          <target state="translated">これは、Socketモジュールのように、AUTOLOAD関数の一部としてeval &quot;...&quot;を使用するモジュールを使用することで簡単に示すことができます。コンパートメントの外でモジュールを「使用」して、コンパートメントと(オートロードされた)関数を共有することができます。オートロードがコンパートメント内のコード、またはコンパートメントから何らかの手段で呼び出される任意の場所のコードによってトリガされた場合、SocketモジュールのAUTOLOAD関数内のevalはコンパートメントの名前空間で発生します。eval'dコードによって作成された、または使用された変数は、コンパートメント内のコードの制御下にあります。</target>
        </trans-unit>
        <trans-unit id="aaf34cf4f37f54a5f64557a3e90c8cf5a33d7a99" translate="yes" xml:space="preserve">
          <source>This can fail to be unique if a process generates an id, calls exec, and does it again after the exec and it all happens in less than a second. It can also happen if the systems process id's cycle in less than a second allowing 2 different programs that use this generator to run with the same PID in less than a second. Both these cases are sufficiently unlikely. If you need universally unique ids, or ids that are unique in these conditions, look at &lt;a href=&quot;Data::UUID&quot;&gt;Data::UUID&lt;/a&gt;.</source>
          <target state="translated">プロセスがIDを生成し、execを呼び出し、execの後に再度実行すると、すべてが1秒未満で発生する場合、これは一意になりません。また、システムがIDのサイクルを1秒未満で処理し、このジェネレーターを使用する2つの異なるプログラムが同じPIDで1秒未満で実行できる場合にも発生する可能性があります。これらの両方のケースは十分にありそうにありません。ユニバーサルに一意のID、またはこれらの条件で一意のIDが必要な場合は、&lt;a href=&quot;Data::UUID&quot;&gt;Data :: UUIDを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="33eb1b5384e732b374fa6a2eb81b539c4ef372da" translate="yes" xml:space="preserve">
          <source>This can give a serious performance boost to your threaded program, since more than one thread will be executing at the same time. As a tradeoff, though, any of those nagging synchronization issues that might not have shown with basic kernel threads will appear with a vengeance.</source>
          <target state="translated">これにより、複数のスレッドが同時に実行されるため、スレッド化されたプログラムのパフォーマンスを大幅に向上させることができます。しかし、トレードオフとして、基本的なカーネルスレッドでは表示されなかったかもしれない厄介な同期化の問題が、復讐心を持って現れるでしょう。</target>
        </trans-unit>
        <trans-unit id="56f625d37a903c20859d631591a0773b6d672cf7" translate="yes" xml:space="preserve">
          <source>This can lead to some ambiguities. When &lt;code&gt;\N&lt;/code&gt; is not followed immediately by a left brace, Perl assumes the &lt;code&gt;[^\n]&lt;/code&gt; meaning. Also, if the braces form a valid quantifier such as &lt;code&gt;\N{3}&lt;/code&gt; or &lt;code&gt;\N{5,}&lt;/code&gt; , Perl assumes that this means to match the given quantity of non-newlines (in these examples, 3; and 5 or more, respectively). In all other case, where there is a &lt;code&gt;\N{&lt;/code&gt; and a matching &lt;code&gt;}&lt;/code&gt;, Perl assumes that a character name is desired.</source>
          <target state="translated">これにより、あいまいさが生じる可能性があります。 &lt;code&gt;\N&lt;/code&gt; 直後に左中括弧がない場合、Perlは &lt;code&gt;[^\n]&lt;/code&gt; 意味を想定します。また、中括弧が &lt;code&gt;\N{3}&lt;/code&gt; や &lt;code&gt;\N{5,}&lt;/code&gt; などの有効な量指定子を形成する場合、Perlはこれが非改行の指定された数量と一致することを意味すると想定します（これらの例では3、および5以上、それぞれ）。 &lt;code&gt;\N{&lt;/code&gt; と一致する &lt;code&gt;}&lt;/code&gt; が存在するその他すべての場合、Perlは文字名が必要であると想定します。</target>
        </trans-unit>
        <trans-unit id="723464c11a99a5463e5bccf086f2c836d4ccab19" translate="yes" xml:space="preserve">
          <source>This can lead to some ambiguities. When &lt;code&gt;\N&lt;/code&gt; is not followed immediately by a left brace, Perl assumes the &lt;code&gt;[^\n]&lt;/code&gt; meaning. Also, if the braces form a valid quantifier such as &lt;code&gt;\N{3}&lt;/code&gt; or &lt;code&gt;\N{5,}&lt;/code&gt;, Perl assumes that this means to match the given quantity of non-newlines (in these examples, 3; and 5 or more, respectively). In all other case, where there is a &lt;code&gt;\N{&lt;/code&gt; and a matching &lt;code&gt;}&lt;/code&gt;, Perl assumes that a character name is desired.</source>
          <target state="translated">これは、いくつかのあいまいさをもたらす可能性があります。 &lt;code&gt;\N&lt;/code&gt; 直後に左中括弧が続かない場合、Perlは &lt;code&gt;[^\n]&lt;/code&gt; 意味を想定します。また、中括弧が &lt;code&gt;\N{3}&lt;/code&gt; や &lt;code&gt;\N{5,}&lt;/code&gt; などの有効な数量詞を形成する場合、Perlは、これが指定された非改行の数（これらの例では、3;および5以上、それぞれ）。他のすべての場合、 &lt;code&gt;\N{&lt;/code&gt; と一致する &lt;code&gt;}&lt;/code&gt; がある場合、Perlは文字名が必要であると想定します。</target>
        </trans-unit>
        <trans-unit id="959b6fc0ff47607dd43aa724268206e3f29dd78b" translate="yes" xml:space="preserve">
          <source>This can lead to unexpected results. For example, a string's semantics can suddenly change if a code point above 255 is appended to it, which changes the rules from ASCII to Unicode. As an example, consider the following program and its output:</source>
          <target state="translated">これは予期せぬ結果をもたらす可能性があります。例えば、文字列に255以上のコードポイントが追加されると、文字列のセマンティクスが突然変更されることがあります。例として、以下のプログラムとその出力を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="85608589698ca117deecc9b9804cdf91bb5ea3e0" translate="yes" xml:space="preserve">
          <source>This can result from a bug in emx sprintf which was fixed in 0.9d fix 03.</source>
          <target state="translated">これは emx の sprintf のバグに起因する可能性があり、0.9d fix 03 で修正されました。</target>
        </trans-unit>
        <trans-unit id="a0068e1ff0325fa89c18995ccdfd4bec0d4d0e1c" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using a (non-gcc) vendor cc, this variable may contain a version for the compiler.</source>
          <target state="translated">これはヒントファイルか Configure で設定できます。(gcc 以外の)ベンダー cc を使用している場合、この変数にはコンパイラのバージョンが含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="b497dc3b646a186b11a326e1c1c02e389336f453" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using gcc, this is gcc, and if not, usually equal to cc, unimpressive, no? Some platforms, however, make good use of this by storing the flavor of the C compiler being used here. For example if using the Sun WorkShop suite, ccname will be &lt;code&gt;workshop&lt;/code&gt; .</source>
          <target state="translated">これは、ヒントファイルまたは構成によって設定できます。gccを使用している場合、これはgccです。そうでない場合、通常はccと同じですが、印象的ではありませんか。ただし、一部のプラットフォームでは、ここで使用されているCコンパイラのフレーバーを格納することにより、これをうまく利用しています。Sun WorkShopスイートを使用している場合たとえば、ccnameになります &lt;code&gt;workshop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="69cabf4ea065c9fd2da62cddd5444eb3ffe5f2f7" translate="yes" xml:space="preserve">
          <source>This can set either by hints files or by Configure. If using gcc, this is gcc, and if not, usually equal to cc, unimpressive, no? Some platforms, however, make good use of this by storing the flavor of the C compiler being used here. For example if using the Sun WorkShop suite, ccname will be &lt;code&gt;workshop&lt;/code&gt;.</source>
          <target state="translated">これは、ヒントファイルまたは構成によって設定できます。gccを使用している場合、これはgccであり、そうでない場合、通常はccに等しく、印象的ではありませんか？ただし、一部のプラットフォームでは、ここで使用されているCコンパイラのフレーバーを格納することでこれをうまく利用しています。Sun WorkShopスイートを使用している場合たとえば、ccnameになります &lt;code&gt;workshop&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a6e8fb26d6f44c6d09abe16fd5950ff26dfa1ef" translate="yes" xml:space="preserve">
          <source>This category includes</source>
          <target state="translated">このカテゴリには以下のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="268887449daa89d9e6e6591c09f61433e4f65428" translate="yes" xml:space="preserve">
          <source>This causes Attribute::Handlers to define the &lt;code&gt;Roo&lt;/code&gt; attribute in the package that imports the Tie::Me::Kangaroo:Down::Sport module.</source>
          <target state="translated">これにより、Attribute :: Handlers は、Tie :: Me :: Kangaroo：Down :: Sportモジュールをインポートするパッケージで &lt;code&gt;Roo&lt;/code&gt; 属性を定義します。</target>
        </trans-unit>
        <trans-unit id="102ace81a524208492f6e027d89b5645163151f6" translate="yes" xml:space="preserve">
          <source>This causes perl to load your module but does not import any symbols.</source>
          <target state="translated">これにより、Perl はモジュールをロードしますが、シンボルはインポートされません。</target>
        </trans-unit>
        <trans-unit id="c30feda4a3a3684c859a87888367dce95a5f76b5" translate="yes" xml:space="preserve">
          <source>This causes the redispatcher to only visit each distinct &lt;code&gt;method&lt;/code&gt; method once. That is, to skip any classes in the hierarchy that it has already visited during redispatch. So, for example, if the previous example were rewritten:</source>
          <target state="translated">これにより、再ディスパッチャはそれぞれの個別の &lt;code&gt;method&lt;/code&gt; メソッドを1回だけ訪問します。つまり、再ディスパッチ中にすでにアクセスした階層内のクラスをスキップします。したがって、たとえば、前の例が書き直された場合：</target>
        </trans-unit>
        <trans-unit id="592a0947cedbbcf96e6c431161a1536bd9ea5fd0" translate="yes" xml:space="preserve">
          <source>This certainly works on Android 8.1 (Oreo) at least...</source>
          <target state="translated">これは確かに少なくともAndroid 8.1(Oreo)では動作します...。</target>
        </trans-unit>
        <trans-unit id="582cc40cbf8b3547920ee86c914be4717f134b16" translate="yes" xml:space="preserve">
          <source>This change was made because it was found that various commercial tools like editors, or for things like source code control, had been written so that they would not handle program files that used these code points, effectively precluding their use almost entirely! And that was never the intent. They've always been meant to be usable within an application, or cooperating set of applications, at will.</source>
          <target state="translated">この変更が行われたのは、エディタやソースコード管理のようなもののための様々な商用ツールが、これらのコードポイントを使用するプログラムファイルを扱わないように書かれていることが判明したためで、事実上、ほとんど完全に使用できなくなってしまったのです。そして、それは決して意図したものではありませんでした。これらのツールは常に、アプリケーション内で、あるいはアプリケーションの協力関係の中で、自由に使えるようにすることを意図していました。</target>
        </trans-unit>
        <trans-unit id="70a94d66ba03d51816f1be0f440a820bbe8643da" translate="yes" xml:space="preserve">
          <source>This change was originally scheduled for 5.30, but was delayed until 5.32.</source>
          <target state="translated">この変更は当初5.30に予定されていましたが、5.32に延期されました。</target>
        </trans-unit>
        <trans-unit id="c679de889cc139bb514d15d08372653b38479f14" translate="yes" xml:space="preserve">
          <source>This changes the sentence to &quot;this is a SUcCess case.&quot;</source>
          <target state="translated">これは、&quot;this is a SUcCess case &quot;に文章を変更しています。</target>
        </trans-unit>
        <trans-unit id="806d9541617fb633252bc021124ba56dfb002ae1" translate="yes" xml:space="preserve">
          <source>This changes the string that this token holds. You probably won't need to do this.</source>
          <target state="translated">これは、このトークンが保持する文字列を変更します。おそらくこれを行う必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="1b4ce31991e674e8d238b692a9312c922759283b" translate="yes" xml:space="preserve">
          <source>This changes the tagname for this end-token object. You probably won't need to do this.</source>
          <target state="translated">これは、このエンドトークンオブジェクトのtagnameを変更します。おそらくこれを行う必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="05c1f4e6ea1fd867b5212d7916e4ce924dd15d97" translate="yes" xml:space="preserve">
          <source>This changes the tagname for this start-token object. You probably won't need to do this.</source>
          <target state="translated">これは、この start-token オブジェクトの tagname を変更します。おそらくこれを行う必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="642eb07575d1344323a97b06a777777ad1321fc4" translate="yes" xml:space="preserve">
          <source>This chart is sorted from slowest to fastest, and shows the percent speed difference between each pair of tests.</source>
          <target state="translated">このチャートは、遅いものから速いものへと並べ替えられており、各ペアのテストの速度差の割合を示しています。</target>
        </trans-unit>
        <trans-unit id="7da28c0924cf2fc297ae57e942274584c8adbeb4" translate="yes" xml:space="preserve">
          <source>This checks that every file listed in the .packlist actually exists. If an argument which evaluates to true is given, any missing files will be removed from the internal hash. The return value is a list of the missing files, which will be empty if they all exist.</source>
          <target state="translated">これは、.packlist にリストされているすべてのファイルが実際に存在するかどうかをチェックします。true と評価される引数が与えられた場合、欠落しているファイルは内部ハッシュから削除されます。返り値は欠落しているファイルのリストで、全てのファイルが存在する場合は空になります。</target>
        </trans-unit>
        <trans-unit id="f55eba663917d253b044988b2b6ee903ef6a93dc" translate="yes" xml:space="preserve">
          <source>This class (which is very small -- read the source) overrides Pod::Simple's _handle_element_start, _handle_text, and _handle_element_end methods so that parser events are turned into method calls. (Otherwise, this is a subclass of &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt; and inherits all its methods.)</source>
          <target state="translated">このクラス（非常に小さい-ソースを読み取ります）は、Pod :: Simpleの_handle_element_start、_handle_text、および_handle_element_endメソッドをオーバーライドして、パーサーイベントがメソッド呼び出しに変換されるようにします。（それ以外の場合、これは&lt;a href=&quot;../simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスであり、そのすべてのメソッドを継承します。）</target>
        </trans-unit>
        <trans-unit id="b03d667c22f13241e3a139f207cffaeb024c8e82" translate="yes" xml:space="preserve">
          <source>This class (which is very small -- read the source) overrides Pod::Simple's _handle_element_start, _handle_text, and _handle_element_end methods so that parser events are turned into method calls. (Otherwise, this is a subclass of &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; and inherits all its methods.)</source>
          <target state="translated">このクラス（非常に小さい-ソースを読み取る）は、Pod :: Simpleの_handle_element_start、_handle_text、および_handle_element_endメソッドをオーバーライドして、パーサーイベントがメソッド呼び出しに変換されるようにします。（それ以外の場合、これは&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスであり、そのすべてのメソッドを継承します。）</target>
        </trans-unit>
        <trans-unit id="494e46870d49e2dc3a5f9a64f75952ec99423e9a" translate="yes" xml:space="preserve">
          <source>This class defines several methods for setting (and, occasionally, reading) the contents of an object. With two exceptions (discussed at the end of this section), these attributes are just for controlling the way searches are carried out.</source>
          <target state="translated">このクラスは、オブジェクトの内容を設定する(場合によっては読み込む)ためのいくつかのメソッドを定義します。2つの例外 (このセクションの最後で説明します)を除いて、これらの属性は検索の実行方法を制御するためだけのものです。</target>
        </trans-unit>
        <trans-unit id="10596a84cc3ac1cc04ef71cd92099faf5ee0b3a2" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;Test2::Event&quot;&gt;Test2::Event&lt;/a&gt;.</source>
          <target state="translated">このクラスは&lt;a href=&quot;Test2::Event&quot;&gt;Test2 :: Eventを&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="2163bae8bf6b5d5c2d8787321d0be16cd6ab8a00" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;Test2::Event::Ok&quot;&gt;Test2::Event::Ok&lt;/a&gt;.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;Test2::Event::Ok&quot;&gt;Test2 :: Event :: Okを&lt;/a&gt;継承します。</target>
        </trans-unit>
        <trans-unit id="1d32aad8f8251ef1db7bcc4b8f3feb324d9d1213" translate="yes" xml:space="preserve">
          <source>This class is NOT a subclass of Pod::Simple::HTML (nor of bad old Pod::Html) -- although it uses Pod::Simple::HTML for doing the conversion of each document.</source>
          <target state="translated">このクラスはPod::Simple::HTMLのサブクラスではありません(古いPod::Htmlのサブクラスでもありません)--各ドキュメントの変換にPod::Simple::HTMLを使用していますが。</target>
        </trans-unit>
        <trans-unit id="b711767b4a974da1a1509d38f153220b0d62949c" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as RTF, good for viewing/printing in MSWord, WordPad/write.exe, TextEdit, etc.</source>
          <target state="translated">このクラスはPodをRTFに変換するフォーマッタで、MSWord、WordPad/write.exe、TextEditなどでの表示や印刷に適しています。</target>
        </trans-unit>
        <trans-unit id="138981ec5228a60a4f53dbf829b51f5efd9f8a75" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as XHTML validating HTML.</source>
          <target state="translated">このクラスは、Podを受け取り、それをXHTMLで検証するHTMLとしてレンダリングするフォーマッタです。</target>
        </trans-unit>
        <trans-unit id="3d4c24315ad07b2a992c0858db0b7be768d0cc0b" translate="yes" xml:space="preserve">
          <source>This class is a formatter that takes Pod and renders it as wrapped plaintext.</source>
          <target state="translated">このクラスは Pod を受け取り、それをラップされた平文としてレンダリングするフォーマッタです。</target>
        </trans-unit>
        <trans-unit id="abf165bcb49a87540f63e8d80594894213b097e7" translate="yes" xml:space="preserve">
          <source>This class is a stack of hooks to be called in the right order as scopes go away. The stack is only useful when inserted into &lt;code&gt;%^H&lt;/code&gt; and will pop hooks as their &quot;scope&quot; is popped. This is useful for uninstalling or reinstalling subs in a namespace as a pragma goes out of scope.</source>
          <target state="translated">このクラスは、スコープがなくなると正しい順序で呼び出されるフックのスタックです。スタックは &lt;code&gt;%^H&lt;/code&gt; に挿入された場合にのみ役立ち、「スコープ」がポップされるとフックがポップされます。これは、プラグマがスコープ外になるときに、名前空間内のサブをアンインストールまたは再インストールする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="62abaee97c33098880e266351ef2fc532bf53875" translate="yes" xml:space="preserve">
          <source>This class is an internal interface only.</source>
          <target state="translated">このクラスは内部インターフェースのみです。</target>
        </trans-unit>
        <trans-unit id="a096fe03bdd3c99f0e3aefd253d422021e7447e7" translate="yes" xml:space="preserve">
          <source>This class is for checking the syntactic validity of Pod. It works by basically acting like a simple-minded version of &lt;a href=&quot;Pod::Simple::Text&quot;&gt;Pod::Simple::Text&lt;/a&gt; that formats only the &quot;Pod Errors&quot; section (if Pod::Simple even generates one for the given document).</source>
          <target state="translated">このクラスは、ポッドの構文の妥当性をチェックするためのものです。これは基本的に、「ポッドエラー」セクションのみをフォーマットする&lt;a href=&quot;Pod::Simple::Text&quot;&gt;Pod :: Simple :: Textの単純&lt;/a&gt;なバージョンのように機能します（Pod :: Simpleが特定のドキュメントに対して1つも生成する場合）。</target>
        </trans-unit>
        <trans-unit id="5e43c4bd22a6b18d8bc78626e236eaa142e2b822" translate="yes" xml:space="preserve">
          <source>This class is for checking the syntactic validity of Pod. It works by basically acting like a simple-minded version of &lt;a href=&quot;text&quot;&gt;Pod::Simple::Text&lt;/a&gt; that formats only the &quot;Pod Errors&quot; section (if Pod::Simple even generates one for the given document).</source>
          <target state="translated">このクラスは、ポッドの構文の妥当性をチェックするためのものです。基本的には、「Pod &lt;a href=&quot;text&quot;&gt;:: Simple :: Text&lt;/a&gt;」の単純なバージョンのように機能し、「Podエラー」セクションのみをフォーマットします（Pod :: Simpleが指定されたドキュメントに対しても生成する場合）。</target>
        </trans-unit>
        <trans-unit id="9b791e36572b7d483165e52086de0aff10cad7ba" translate="yes" xml:space="preserve">
          <source>This class is for dumping, as text, the events gotten from parsing a Pod document. This class is of interest to people writing Pod formatters based on Pod::Simple. It is useful for seeing exactly what events you get out of some Pod that you feed in.</source>
          <target state="translated">このクラスは、Pod文書を解析して得られたイベントをテキストとしてダンプします。このクラスは、Pod::SimpleをベースにしたPodフォーマッタを書いている人に興味を持ってもらえるでしょう。フィードインしたPodからどのようなイベントを取得したかを正確に確認するのに便利です。</target>
        </trans-unit>
        <trans-unit id="a18cdad26fb8d235532c57fb43aa60327d80a50a" translate="yes" xml:space="preserve">
          <source>This class is for making an HTML rendering of a Pod document.</source>
          <target state="translated">PodドキュメントのHTMLレンダリングを作成するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="fd75675624091c3742f49bbeb8bbfb0c06a37c0a" translate="yes" xml:space="preserve">
          <source>This class is for using Pod::Simple to build a Pod processor -- but one that uses an interface based on a stream of token objects, instead of based on events.</source>
          <target state="translated">このクラスは Pod::Simple を使って Pod プロセッサを構築するためのクラスです。</target>
        </trans-unit>
        <trans-unit id="44761047bfaa4c6cc438e77b4bb92131ad714c01" translate="yes" xml:space="preserve">
          <source>This class is inspired by XML::Parser's &quot;Tree&quot; parsing-style, although it doesn't use exactly the same LoL format.</source>
          <target state="translated">このクラスは XML::Parser の &quot;Tree&quot; パーシングスタイルにインスパイアされています。</target>
        </trans-unit>
        <trans-unit id="a9698adab813e0c4fae21452c7598015f3935b3d" translate="yes" xml:space="preserve">
          <source>This class is not of interest to general users.</source>
          <target state="translated">このクラスは一般ユーザーには興味のないクラスです。</target>
        </trans-unit>
        <trans-unit id="2f2f6048d2f61aa8645bcc5ebd42e19fc8c8aea4" translate="yes" xml:space="preserve">
          <source>This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="translated">このクラスは、Pod::SimpleをベースにPodフォーマッタを書く人が興味を持つクラスです。</target>
        </trans-unit>
        <trans-unit id="f63f889f338653b4ee33eb44dc0ee1133ee852ae" translate="yes" xml:space="preserve">
          <source>This class is of interest to people writing a Pod processor/formatter.</source>
          <target state="translated">このクラスは、Podプロセッサ/フォーマッターを書いている人に興味を持ってもらえると思います。</target>
        </trans-unit>
        <trans-unit id="6dca4f8907e7dbb28751ea149d9af37422c91f32" translate="yes" xml:space="preserve">
          <source>This class is that parses Pod and dumps just the text content. It is mainly meant for use by the Pod::Simple test suite, but you may find some other use for it.</source>
          <target state="translated">このクラスはPodを解析してテキストの内容だけをダンプします。これは主にPod::Simpleテストスイートでの使用を意図していますが、他の用途があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5a51d38f10e103a9903a5853a79eae683ff646eb" translate="yes" xml:space="preserve">
          <source>This class is the workhorse of the &lt;a href=&quot;../../parser&quot;&gt;TAP::Parser&lt;/a&gt; system. Most TAP lines will be test lines and if &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt; , then you have a bunch of methods at your disposal.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;../../parser&quot;&gt;TAP :: Parser&lt;/a&gt;システムの主力です。ほとんどのTAP行はテスト行であり、 &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt; 場合、自由に使えるメソッドがたくさんあります。</target>
        </trans-unit>
        <trans-unit id="77ad00f96e4fc79112ecce425a98459f96769eb3" translate="yes" xml:space="preserve">
          <source>This class is the workhorse of the &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt; system. Most TAP lines will be test lines and if &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt;, then you have a bunch of methods at your disposal.</source>
          <target state="translated">このクラスは、&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parser&lt;/a&gt;システムの主力製品です。ほとんどのTAPラインはテストラインであり、 &lt;code&gt;$result-&amp;gt;is_test&lt;/code&gt; 場合、自由に使えるメソッドがたくさんあります。</target>
        </trans-unit>
        <trans-unit id="cb2f9188e79ee28d20f325b48fe2bf4717272a64" translate="yes" xml:space="preserve">
          <source>This class is used to bless perl subs so that they are invoked when they are destroyed. This is mostly useful for ensuring the code is invoked at end of scope. This module is not a part of autodie's public API.</source>
          <target state="translated">このクラスは、Perl サブが破棄されたときに呼び出されるように perl サブを祝福するために使用されます。これは、スコープの終了時にコードが確実に呼び出されるようにするのに便利です。このモジュールは autodie のパブリック API の一部ではありません。</target>
        </trans-unit>
        <trans-unit id="6f581c5cd9d5c7598c0dcb3ca6436c9bd821c2c4" translate="yes" xml:space="preserve">
          <source>This class might turn out to be a temporary solution, but MM won't go away.</source>
          <target state="translated">このクラスは一時的な解決策になるかもしれませんが、MMはなくならないでしょう。</target>
        </trans-unit>
        <trans-unit id="24195eb4cea8857a411b60273a35c873f422dbe0" translate="yes" xml:space="preserve">
          <source>This class provides the one constructor, called &lt;code&gt;new&lt;/code&gt; . It takes no parameters:</source>
          <target state="translated">このクラスは、 &lt;code&gt;new&lt;/code&gt; と呼ばれる1つのコンストラクターを提供します。パラメータは必要ありません。</target>
        </trans-unit>
        <trans-unit id="3cdd607371055ba28bceb9607eba0f99a8092ae1" translate="yes" xml:space="preserve">
          <source>This class provides the one constructor, called &lt;code&gt;new&lt;/code&gt;. It takes no parameters:</source>
          <target state="translated">このクラスは、 &lt;code&gt;new&lt;/code&gt; と呼ばれる1つのコンストラクターを提供します。パラメータは必要ありません。</target>
        </trans-unit>
        <trans-unit id="3b0678c7cdb712a22e1337039fd311842e231f0c" translate="yes" xml:space="preserve">
          <source>This class represents a subtest. This class is a subclass of &lt;a href=&quot;Test2::Event::Ok&quot;&gt;Test2::Event::Ok&lt;/a&gt;.</source>
          <target state="translated">このクラスはサブテストを表します。このクラスは、&lt;a href=&quot;Test2::Event::Ok&quot;&gt;Test2 :: Event :: Okの&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="548ad953daf93abd12a978fa239d01a039bfc535" translate="yes" xml:space="preserve">
          <source>This class returns a copy of its input, translated into Perl's internal encoding (UTF-8), and with all the non-Pod lines removed.</source>
          <target state="translated">このクラスは、Perl の内部エンコーディング (UTF-8)に翻訳された入力のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="0460fe0f3a1a52c6921164fb6520b6ae745aaf17" translate="yes" xml:space="preserve">
          <source>This class strives to return the Pod lines of the input completely unchanged, except for any necessary translation into Perl's internal encoding, and it makes no effort to return trailing spaces on lines; these likely will be stripped. If the input pod is well-formed with no warnings nor errors generated, the extracted pod should generate the same documentation when formatted by a Pod formatter as the original file does.</source>
          <target state="translated">このクラスは、Perlの内部エンコーディングへの変換が必要な場合を除いて、入力のPod行を完全に変更せずに返すように努めています。入力ポッドが警告もエラーも発生せずに整形されていれば、抽出されたポッドは、ポッドフォーマッタによって整形されたときに、元のファイルと同じドキュメントを生成するはずです。</target>
        </trans-unit>
        <trans-unit id="f30e23715125a3d5360cef7bf3e4022849622110" translate="yes" xml:space="preserve">
          <source>This class takes Pod and parses it, returning a parse tree made just of arrayrefs, and hashrefs, and strings.</source>
          <target state="translated">このクラスはPodを取得して解析し、arrayrefs、ハッシュレフ、文字列だけで構成された解析ツリーを返します。</target>
        </trans-unit>
        <trans-unit id="9dbee182dfa76d92a94c69cd0858c1622ac2f770" translate="yes" xml:space="preserve">
          <source>This client is more complicated than the two we've done so far, but if you're on a system that supports the powerful &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; call, the solution isn't that rough. Once you've made the connection to whatever service you'd like to chat with, call &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; to clone your process. Each of these two identical process has a very simple job to do: the parent copies everything from the socket to standard output, while the child simultaneously copies everything from standard input to the socket. To accomplish the same thing using just one process would be</source>
          <target state="translated">このクライアントは、これまでに行った2つよりも複雑ですが、強力な &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; 呼び出しをサポートするシステムを使用している場合、ソリューションはそれほど大雑把ではありません。チャットしたいサービスに接続したら、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; を呼び出してプロセスのクローンを作成します。これら2つの同一のプロセスはそれぞれ非常に単純な作業を行います。親はすべてをソケットから標準出力にコピーし、子は同時にすべてを標準入力からソケットにコピーします。1つのプロセスだけを使用して同じことを達成するには、</target>
        </trans-unit>
        <trans-unit id="bb7d2aab86d534bfc6e56a8de0ba001be898cbe5" translate="yes" xml:space="preserve">
          <source>This client is more complicated than the two we've done so far, but if you're on a system that supports the powerful &lt;code&gt;fork&lt;/code&gt; call, the solution isn't that rough. Once you've made the connection to whatever service you'd like to chat with, call &lt;code&gt;fork&lt;/code&gt; to clone your process. Each of these two identical process has a very simple job to do: the parent copies everything from the socket to standard output, while the child simultaneously copies everything from standard input to the socket. To accomplish the same thing using just one process would be</source>
          <target state="translated">このクライアントは、これまでに行った2つよりも複雑ですが、強力な &lt;code&gt;fork&lt;/code&gt; 呼び出しをサポートするシステムを使用している場合、解決策はそれほど大まかなものではありません。チャットしたいサービスに接続したら、 &lt;code&gt;fork&lt;/code&gt; を呼び出してプロセスのクローンを作成します。これら2つの同一のプロセスには、それぞれ非常に簡単な作業があります。親はソケットから標準出力にすべてをコピーし、子は標準入力からソケットにすべてを同時にコピーします。1つのプロセスだけを使用して同じことを達成するには、</target>
        </trans-unit>
        <trans-unit id="ceec53b2ebb7603eb9ee71d9bde01119b83707cb" translate="yes" xml:space="preserve">
          <source>This clones the repository and makes a local copy in the</source>
          <target state="translated">これはリポジトリをクローンし、ローカルコピーを</target>
        </trans-unit>
        <trans-unit id="53ac61605ac32344cb2fde8cb4e762d87b323ee2" translate="yes" xml:space="preserve">
          <source>This code has to jump through a few hoops to achieve this because</source>
          <target state="translated">このコードは、これを実現するために、いくつかのフープを飛び越えなければなりません。</target>
        </trans-unit>
        <trans-unit id="5330da17cfc7cfcf64aab224d5b574c934e7ac2c" translate="yes" xml:space="preserve">
          <source>This code heavily adapted from an early version of perl5db.pl attributable to Larry Wall and the Perl Porters.</source>
          <target state="translated">このコードは、Larry Wall と Perl Porters に帰属する perl5db.pl の初期バージョンから大幅に改作されています。</target>
        </trans-unit>
        <trans-unit id="20e0786f01d076b98983216819824cb18ece543e" translate="yes" xml:space="preserve">
          <source>This code is derived from software contributed to Berkeley by Guido van Rossum.</source>
          <target state="translated">このコードは、Guido van Rossum が Berkeley に貢献したソフトウェアに由来しています。</target>
        </trans-unit>
        <trans-unit id="847d9232033c7120d3555ace79f29fd71ad7ef18" translate="yes" xml:space="preserve">
          <source>This code is in Github in the CPAN.pm repository:</source>
          <target state="translated">このコードはgithubのCPAN.pmリポジトリにあります。</target>
        </trans-unit>
        <trans-unit id="11c4fc183eca8652881b1cb5b12c6ea249b79ebe" translate="yes" xml:space="preserve">
          <source>This code is intended for development only, and may not be portable even to all Unix variants. Also, it is an 80% solution, in that it isn't able to make all ops read only. Specifically it does not apply to op slabs belonging to &lt;code&gt;BEGIN&lt;/code&gt; blocks.</source>
          <target state="translated">このコードは開発専用であり、すべてのUnixバリアントに移植できるとは限りません。また、すべての操作を読み取り専用にすることができないという点で、80％のソリューションです。特に、 &lt;code&gt;BEGIN&lt;/code&gt; ブロックに属するop slabには適用されません。</target>
        </trans-unit>
        <trans-unit id="4a8e4db5444d8620ae9620bb90f970a958584613" translate="yes" xml:space="preserve">
          <source>This code is unusual in that it should have no content. That is, a processor may complain if it sees &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt;. Whether or not it complains, the</source>
          <target state="translated">このコードは、コンテンツが含まれていてはならないという点で珍しいものです。つまり、プロセッサは &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt; すると文句を言う可能性があります。それが文句を言うかどうかにかかわらず、</target>
        </trans-unit>
        <trans-unit id="443071b2d9d382ee44392d30a6c9cc6944390654" translate="yes" xml:space="preserve">
          <source>This code is unusual in that most formatters completely discard this code and its content. Other formatters will render it with invisible codes that can be used in building an index of the current document.</source>
          <target state="translated">このコードは、ほとんどのフォーマッタがこのコードとその内容を完全に破棄するという点で珍しいコードです。他のフォーマッタは、現在の文書のインデックスを作成する際に使用できる不可視のコードでこのコードをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="ed77ac1105bfebc895982f70abdb5f07d0f61471" translate="yes" xml:space="preserve">
          <source>This code is unusual is that it should have no content. That is, a processor may complain if it sees &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt; . Whether or not it complains, the</source>
          <target state="translated">このコードは異常であり、コンテンツが含まれていないはずです。つまり、 &lt;code&gt;Z&amp;lt;potatoes&amp;gt;&lt;/code&gt; すると、プロセッサは文句を言う可能性があります。それが不平を言うかどうかにかかわらず、</target>
        </trans-unit>
        <trans-unit id="9f748555f0c218e80f371f8622c90719bdf4c3e1" translate="yes" xml:space="preserve">
          <source>This code resides primarily in</source>
          <target state="translated">このコードは主に</target>
        </trans-unit>
        <trans-unit id="b4ca79218fad07abe234bb2cecfbf2b9daaa8186" translate="yes" xml:space="preserve">
          <source>This code tries to return a new SV (which contains the value 42) if it should return a real value, or undef otherwise. Instead it has returned a NULL pointer which, somewhere down the line, will cause a segmentation violation, bus error, or just weird results. Change the zero to &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; in the first line and all will be well.</source>
          <target state="translated">このコードは、実際の値を返す必要がある場合は新しいSV（値42を含む）を返すか、そうでない場合はundefを返します。代わりに、行のどこかで、セグメンテーション違反、バスエラー、または奇妙な結果を引き起こすNULLポインターを返しました。最初の行でゼロを &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; に変更すると、すべて正常になります。</target>
        </trans-unit>
        <trans-unit id="706270f16eed93ab30bcb6ac5dad9c206e0d53d4" translate="yes" xml:space="preserve">
          <source>This code will behave identically under both &lt;code&gt;IO::Socket::INET&lt;/code&gt; and &lt;code&gt;IO::Socket::IP&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;IO::Socket::INET&lt;/code&gt; と &lt;code&gt;IO::Socket::IP&lt;/code&gt; 両方で同じように動作します。</target>
        </trans-unit>
        <trans-unit id="6b0496da28a3ec6a32260558d3028edcf275c0a4" translate="yes" xml:space="preserve">
          <source>This combination of options may also be specified thus</source>
          <target state="translated">このオプションの組み合わせは、次のように指定することもできます。</target>
        </trans-unit>
        <trans-unit id="738a4e0887c40771b0a61f4f0df6d45e56b8d5cf" translate="yes" xml:space="preserve">
          <source>This combination performs the work of the legacy functions gethostbyname() and inet_ntoa().</source>
          <target state="translated">この組み合わせは、レガシー関数 gethostbyname()および inet_ntoa()の作業を実行します。</target>
        </trans-unit>
        <trans-unit id="72e5e8c3a2d9fab681c4b573c92998cd66dd340c" translate="yes" xml:space="preserve">
          <source>This command indicates that an item in a list begins here. Formatting codes are processed. The semantics of the (optional) text in the remainder of this paragraph are explained in the &lt;a href=&quot;#About-%3Dover...%3Dback-Regions&quot;&gt;&quot;About =over...=back Regions&quot;&lt;/a&gt; section, further below. Examples:</source>
          <target state="translated">このコマンドは、リスト内のアイテムがここから始まることを示します。書式設定コードが処理されます。この段落の残りの部分にある（オプションの）テキストのセマンティクスについては、以下の&lt;a href=&quot;#About-%3Dover...%3Dback-Regions&quot;&gt;「= over ... = backRegionsについて」&lt;/a&gt;セクションで説明しています。例：</target>
        </trans-unit>
        <trans-unit id="d728ee6330c55e20ceb083fe7c0710810e2932ca" translate="yes" xml:space="preserve">
          <source>This command indicates that an item in a list begins here. Formatting codes are processed. The semantics of the (optional) text in the remainder of this paragraph are explained in the &lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;About =over...=back Regions&lt;/a&gt; section, further below. Examples:</source>
          <target state="translated">このコマンドは、リスト内の項目がここから始まることを示しています。書式設定コードが処理されます。この段落の残りの部分の（オプションの）テキストのセマンティクスについては、以下の「&lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;= over ... = backリージョンについて」&lt;/a&gt;セクションで説明しています。例：</target>
        </trans-unit>
        <trans-unit id="4a355ff290cc8d5e2710e8069a06d654602bb061" translate="yes" xml:space="preserve">
          <source>This command indicates that the text in the remainder of the paragraph is a heading. That text may contain formatting codes. Examples:</source>
          <target state="translated">このコマンドは、段落の残りの部分のテキストが見出しであることを示します。そのテキストには書式コードが含まれている場合があります。例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="c6da60e4854fba0e9da1ba094a38fc435654e60e" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the end of the region begun by the most recent &quot;=over&quot; command. It permits no text after the &quot;=back&quot; command.</source>
          <target state="translated">このコマンドは、直近の &quot;=over&quot; コマンドで始まった領域の終了を示す。back&quot; コマンドの後にはテキストを書くことはできません。</target>
        </trans-unit>
        <trans-unit id="91bf180a009e30184b54f49645009694bbe3b151" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the start of a list/indent region. If there is any text following the &quot;=over&quot;, it must consist of only a nonzero positive numeral. The semantics of this numeral is explained in the &lt;a href=&quot;#About-%3Dover...%3Dback-Regions&quot;&gt;&quot;About =over...=back Regions&quot;&lt;/a&gt; section, further below. Formatting codes are not expanded. Examples:</source>
          <target state="translated">このコマンドは、これがリスト/インデント領域の開始であることを示します。「= over」の後にテキストがある場合は、ゼロ以外の正の数字のみで構成されている必要があります。この数字のセマンティクスは、以下の&lt;a href=&quot;#About-%3Dover...%3Dback-Regions&quot;&gt;「About = over ... = backRegions」&lt;/a&gt;セクションで説明されています。書式設定コードは展開されません。例：</target>
        </trans-unit>
        <trans-unit id="19be29c945bbd16c098b73b780bb343e863492ff" translate="yes" xml:space="preserve">
          <source>This command indicates that this is the start of a list/indent region. If there is any text following the &quot;=over&quot;, it must consist of only a nonzero positive numeral. The semantics of this numeral is explained in the &lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;About =over...=back Regions&lt;/a&gt; section, further below. Formatting codes are not expanded. Examples:</source>
          <target state="translated">このコマンドは、これがリスト/インデント領域の始まりであることを示しています。「= over」の後にテキストがある場合は、ゼロ以外の正の数字のみで構成する必要があります。この数字の意味は、以下の「&lt;a href=&quot;#About-%3dover...%3dback-Regions&quot;&gt;= over ... = backリージョンについて」&lt;/a&gt;セクションで説明されています。書式コードは拡張されません。例：</target>
        </trans-unit>
        <trans-unit id="7ff4d3408bd7bdb5ab335d1f0aa8564e21d93c8d" translate="yes" xml:space="preserve">
          <source>This command indicates that this line is the end of this previously started Pod block. If there is any text after &quot;=cut&quot; on the line, it must be ignored. Examples:</source>
          <target state="translated">このコマンドは、この行がこの前に開始されたPodブロックの終わりであることを示します。行内に&quot;=cut &quot;の後にテキストがある場合は、それを無視しなければなりません。例としては、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3f41d49fdd2a10822f19964c9959582847611ffe" translate="yes" xml:space="preserve">
          <source>This command indicates that this paragraph begins a Pod block. (If we are already in the middle of a Pod block, this command has no effect at all.) If there is any text in this command paragraph after &quot;=pod&quot;, it must be ignored. Examples:</source>
          <target state="translated">このコマンドは、この段落がPodブロックを開始することを示します。(すでにPodブロックの途中にある場合、このコマンドは全く効果がありません)。このコマンドの段落の中に&quot;=pod &quot;の後にテキストがある場合は無視しなければなりません。例としては、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8a99ea1513aed41e6edc9e12797ae7dfeaac42f6" translate="yes" xml:space="preserve">
          <source>This command is used for declaring the encoding of a document. Most users won't need this; but if your encoding isn't US-ASCII, then put a &lt;code&gt;=encoding &lt;i&gt;encodingname&lt;/i&gt;&lt;/code&gt; command very early in the document so that pod formatters will know how to decode the document. For</source>
          <target state="translated">このコマンドは、ドキュメントのエンコーディングを宣言するために使用されます。ほとんどのユーザーはこれを必要としません。ただし、エンコーディングがUS-ASCIIでない場合は、文書の非常に早い段階で &lt;code&gt;=encoding &lt;i&gt;encodingname&lt;/i&gt;&lt;/code&gt; コマンドを挿入して、ポッドフォーマッターが文書のデコード方法を認識できるようにします。ために</target>
        </trans-unit>
        <trans-unit id="57e6471f2b7a0cc0bc2732ccfe6cc2a1d67b9a5e" translate="yes" xml:space="preserve">
          <source>This command will fail only if you pass it an address in a domain the server directly delivers for, and that address does not exist.</source>
          <target state="translated">このコマンドは、サーバが直接配信するドメイン内のアドレスを渡した場合にのみ失敗し、そのアドレスが存在しない場合に失敗します。</target>
        </trans-unit>
        <trans-unit id="2f65eb1b23b31e9c4fc56a4656f09eda25784a44" translate="yes" xml:space="preserve">
          <source>This command will produce as output a description of the current state of the repository, including modified files and unignored untracked files, and in addition it will show things like what files have been staged for the next commit, and usually some useful information about how to change things. For instance the following:</source>
          <target state="translated">このコマンドは、変更されたファイルや無視されていないトラックされていないファイルを含む、リポジトリの現在の状態の説明を出力します。例えば以下のようになります。</target>
        </trans-unit>
        <trans-unit id="cc900c104077e4a6a7ca5f06e5d70661d00910f9" translate="yes" xml:space="preserve">
          <source>This command, which should occur early in the document (at least before any non-US-ASCII data!), declares that this document is encoded in the encoding</source>
          <target state="translated">このコマンドは、文書の早い段階で(少なくとも非US-ASCIIデータの前に)発生すべきであり、この文書がエンコーディングでエンコードされていることを宣言します。</target>
        </trans-unit>
        <trans-unit id="a044d113549cfc62bab49938c5d884a6268cf948" translate="yes" xml:space="preserve">
          <source>This commands provides a statistical overview over recent download activities. The data for this is collected in the YAML file &lt;code&gt;FTPstats.yml&lt;/code&gt; in your &lt;code&gt;cpan_home&lt;/code&gt; directory. If no YAML module is configured or YAML not installed, no stats are provided.</source>
          <target state="translated">このコマンドは、最近のダウンロードアクティビティに関する統計的な概要を提供します。このデータは、 &lt;code&gt;cpan_home&lt;/code&gt; ディレクトリのYAMLファイル &lt;code&gt;FTPstats.yml&lt;/code&gt; に収集されます。YAMLモジュールが構成されていないか、YAMLがインストールされていない場合、統計は提供されません。</target>
        </trans-unit>
        <trans-unit id="8ea20acdc8121360e07a3ca6ca2abb72ed9a4374" translate="yes" xml:space="preserve">
          <source>This compiler backend prints the internal OPs of a Perl program's syntax tree in one of several space-efficient text formats suitable for debugging the inner workings of perl or other compiler backends. It can print OPs in the order they appear in the OP tree, in the order they will execute, or in a text approximation to their tree structure, and the format of the information displayed is customizable. Its function is similar to that of perl's &lt;b&gt;-Dx&lt;/b&gt; debugging flag or the &lt;b&gt;B::Terse&lt;/b&gt; module, but it is more sophisticated and flexible.</source>
          <target state="translated">このコンパイラバックエンドは、Perlプログラムの構文ツリーの内部OPを、perlまたは他のコンパイラバックエンドの内部動作のデバッグに適した、スペース効率の高いテキスト形式の1つで出力します。OPツリーに表示される順序、実行される順序、またはツリー構造に近似したテキストでOPを印刷でき、表示される情報のフォーマットはカスタマイズ可能です。その機能は、perlの&lt;b&gt;-Dx&lt;/b&gt;デバッグフラグまたは&lt;b&gt;B :: &lt;/b&gt;&lt;b&gt;Terse&lt;/b&gt;モジュールの機能に似ていますが、より洗練され、柔軟です。</target>
        </trans-unit>
        <trans-unit id="66cedc315e88b39d6383c0d5ddbb722e7566fdc1" translate="yes" xml:space="preserve">
          <source>This compiler is typically run by the makefiles created by &lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; or by &lt;a href=&quot;Module::Build&quot;&gt;Module::Build&lt;/a&gt; or other Perl module build tools.</source>
          <target state="translated">このコンパイラは通常、&lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;によって作成されたメイクファイルによって、または&lt;a href=&quot;Module::Build&quot;&gt;Module :: Build&lt;/a&gt;または他のPerlモジュールビルドツールによって実行されます。</target>
        </trans-unit>
        <trans-unit id="49048e5c36c04df148e3cdcc3f896c82e8922e40" translate="yes" xml:space="preserve">
          <source>This compiler is typically run by the makefiles created by &lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; or by &lt;a href=&quot;http://search.cpan.org/perldoc/Module::Build&quot;&gt;Module::Build&lt;/a&gt; or other Perl module build tools.</source>
          <target state="translated">このコンパイラーは、通常、&lt;a href=&quot;extutils/makemaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;によって作成されたmakefile、または&lt;a href=&quot;http://search.cpan.org/perldoc/Module::Build&quot;&gt;Module :: Build&lt;/a&gt;またはその他のPerlモジュールビルドツールによって実行されます。</target>
        </trans-unit>
        <trans-unit id="bcbcc146e176c69e94f98d46491b2b165f6959c5" translate="yes" xml:space="preserve">
          <source>This completely resets the incremental parser, that is, after this call, it will be as if the parser had never parsed anything.</source>
          <target state="translated">これにより、インクリメンタルパーサが完全にリセットされます。</target>
        </trans-unit>
        <trans-unit id="811fc2387a18f3ccb2c99535bb74afa37f5a7e14" translate="yes" xml:space="preserve">
          <source>This condition is called a deadlock, and it occurs whenever two or more threads are trying to get locks on resources that the others own. Each thread will block, waiting for the other to release a lock on a resource. That never happens, though, since the thread with the resource is itself waiting for a lock to be released.</source>
          <target state="translated">この状態はデッドロックと呼ばれ、2 つ以上のスレッドが他のスレッドが所有するリソースのロックを取得しようとしているときに発生します。各スレッドはブロックして、他のスレッドがリソースのロックを解放するのを待ちます。しかし、リソースを持っているスレッド自身がロックが解放されるのを待っているので、そうなることはありません。</target>
        </trans-unit>
        <trans-unit id="faa53aa7f128fff59cd7dcb34623ce5e613b1979" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt; , which indicates that the compiler supports __builtin_choose_expr(x,y,z). This built-in function is analogous to the &lt;code&gt;x?y:z&lt;/code&gt; operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that was not chosen.</source>
          <target state="translated">これは条件付きで &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt; を定義します。これは、コンパイラが__builtin_choose_expr（x、y、z）をサポートすることを示します。この組み込み関数は、C の &lt;code&gt;x?y:z&lt;/code&gt; 演算子に似ていますが、返される式の型がプロモーションルールによって変更されない点が異なります。また、組み込み関数は、選択されなかった式を評価しません。</target>
        </trans-unit>
        <trans-unit id="32d20e57f63d06cdf92bb912dada7350665e3c8b" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt;, which indicates that the compiler supports __builtin_choose_expr(x,y,z). This built-in function is analogous to the &lt;code&gt;x?y:z&lt;/code&gt; operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that was not chosen.</source>
          <target state="translated">これは、 &lt;code&gt;HAS_BUILTIN_CHOOSE_EXPR&lt;/code&gt; を条件付きで定義します。これは、コンパイラが__builtin_choose_expr（x、y、z）をサポートしていることを示します。この組み込み関数は、返される式の型がプロモーションルールによって変更されないことを除いて、Cの &lt;code&gt;x?y:z&lt;/code&gt; 演算子に似ています。また、組み込み関数は、選択されなかった式を評価しません。</target>
        </trans-unit>
        <trans-unit id="8177d32c94f6808dc1bba5e1e003e2e654d1454a" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt; , which indicates that the compiler supports __builtin_expect(exp,c). You may use __builtin_expect to provide the compiler with branch prediction information.</source>
          <target state="translated">これは条件付きで &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt; を定義します。これは、コンパイラが__builtin_expect（exp、c）をサポートすることを示します。__builtin_expectを使用して、コンパイラに分岐予測情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="18781d872ee7a71c6a67e62943c1d602bc39dcb9" translate="yes" xml:space="preserve">
          <source>This conditionally defines &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt;, which indicates that the compiler supports __builtin_expect(exp,c). You may use __builtin_expect to provide the compiler with branch prediction information.</source>
          <target state="translated">これは、 &lt;code&gt;HAS_BUILTIN_EXPECT&lt;/code&gt; を条件付きで定義します。これは、コンパイラが__builtin_expect（exp、c）をサポートしていることを示します。__builtin_expectを使用して、コンパイラに分岐予測情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="3e85ff206a230f535cdc1e1b660d9e31b004675c" translate="yes" xml:space="preserve">
          <source>This construct cannot be used within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (or the &lt;code&gt;/l&lt;/code&gt; regex modifier).</source>
          <target state="translated">この構成は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; の範囲（または &lt;code&gt;/l&lt;/code&gt; 正規表現修飾子）内では使用できません。</target>
        </trans-unit>
        <trans-unit id="7feaf5d14c2affa83679ada3f6337ec8bf394406" translate="yes" xml:space="preserve">
          <source>This construct is a Perl expression.</source>
          <target state="translated">この構文は Perl 式です。</target>
        </trans-unit>
        <trans-unit id="f54050082dcc8b4fbf44ab08f61165f7a87bfb06" translate="yes" xml:space="preserve">
          <source>This construct is a complete Perl statement. (No semicolon should follow the closing brace.)</source>
          <target state="translated">この構文は完全なPerl文です。(終了中括弧の後にセミコロンをつけてはいけません)。</target>
        </trans-unit>
        <trans-unit id="9f08b82a682504266e85cc2574b23244cf7a9af7" translate="yes" xml:space="preserve">
          <source>This construct is non-capturing. You can add parentheses to</source>
          <target state="translated">この構文は非捕捉です。括弧を追加して</target>
        </trans-unit>
        <trans-unit id="f8fed69726a17c92a263e748b2d7fa3336a3e37f" translate="yes" xml:space="preserve">
          <source>This construct is useful when you want to capture one of a number of alternative matches.</source>
          <target state="translated">この構文は、複数の代替マッチのうちの1つをキャプチャしたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="89cfaa9b31ac24d949cb1a2ef0db748a527694e4" translate="yes" xml:space="preserve">
          <source>This construction is</source>
          <target state="translated">この工事は</target>
        </trans-unit>
        <trans-unit id="78c7683a763192abf9645014c7b058753006e735" translate="yes" xml:space="preserve">
          <source>This constructor lets its parent class do the actual object construction.</source>
          <target state="translated">このコンストラクタは、実際のオブジェクトの作成を親クラスに行わせます。</target>
        </trans-unit>
        <trans-unit id="221e3f3f658bcd2c65eb9bb5043326230edb5f59" translate="yes" xml:space="preserve">
          <source>This constructor returns a new HTTP::Tiny object. Valid attributes include:</source>
          <target state="translated">このコンストラクタは、新しい HTTP::Tiny オブジェクトを返します。有効な属性は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4bf27879428ff426e547cd9ab897b5c2de43f4ae" translate="yes" xml:space="preserve">
          <source>This constructs a language handle. You usually &lt;b&gt;don't&lt;/b&gt; call this directly, but instead let &lt;code&gt;get_handle&lt;/code&gt; find a language class to &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; and to then call -&amp;gt;new on.</source>
          <target state="translated">言語ハンドルを構築します。通常、これを直接呼び出すことは&lt;b&gt;ありません&lt;/b&gt;が、代わりに &lt;code&gt;get_handle&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; する言語クラスを検索させ、次に-&amp;gt; new onを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7de3cef882fe04932a0a01ad2c579e42f49a5693" translate="yes" xml:space="preserve">
          <source>This constructs a language handle. You usually &lt;b&gt;don't&lt;/b&gt; call this directly, but instead let &lt;code&gt;get_handle&lt;/code&gt; find a language class to &lt;code&gt;use&lt;/code&gt; and to then call -&amp;gt;new on.</source>
          <target state="translated">これにより、言語ハンドルが作成されます。通常、これを直接呼び出すことは&lt;b&gt;ありません&lt;/b&gt;が、代わりに &lt;code&gt;get_handle&lt;/code&gt; に &lt;code&gt;use&lt;/code&gt; する言語クラスを見つけさせてから、-&amp;gt; newonを呼び出します。</target>
        </trans-unit>
        <trans-unit id="753e5c4d4e4edeead3be592de94817a6410aff17" translate="yes" xml:space="preserve">
          <source>This contains a list of directories, separated by colons. The entire list is prepended to &lt;code&gt;@INC&lt;/code&gt; in one go. This:</source>
          <target state="translated">これには、コロンで区切られたディレクトリのリストが含まれています。リスト全体が &lt;code&gt;@INC&lt;/code&gt; 前に追加されます。この：</target>
        </trans-unit>
        <trans-unit id="81b45e36338257a29107f2604a1399d771205b40" translate="yes" xml:space="preserve">
          <source>This contains a space separated list of switches. We only consider the effects of &lt;code&gt;-M&lt;/code&gt; and &lt;code&gt;-I&lt;/code&gt; in this section.</source>
          <target state="translated">これには、スペースで区切られたスイッチのリストが含まれています。このセクションでは、 &lt;code&gt;-M&lt;/code&gt; と &lt;code&gt;-I&lt;/code&gt; の影響のみを考慮します。</target>
        </trans-unit>
        <trans-unit id="a3f30289e8821786015ec39ecff118638d73ac1e" translate="yes" xml:space="preserve">
          <source>This contains a textual description of the field.</source>
          <target state="translated">これには、フィールドのテキスト説明が含まれています。</target>
        </trans-unit>
        <trans-unit id="df9999edc7b466975d9df29327a002bca6f3a58f" translate="yes" xml:space="preserve">
          <source>This contains information about the event itself such as the event package name. The &lt;code&gt;details&lt;/code&gt; field for this facet is an overall summary of the event.</source>
          <target state="translated">これには、イベントパッケージ名など、イベント自体に関する情報が含まれます。このファセットの &lt;code&gt;details&lt;/code&gt; フィールドは、イベントの全体的な要約です。</target>
        </trans-unit>
        <trans-unit id="5e5ca9139234bfdd98010f7db0884779bff191ff" translate="yes" xml:space="preserve">
          <source>This contains the offset from the start of the file in hex.</source>
          <target state="translated">これは、ファイルの先頭からのオフセットを16進数で表したものです。</target>
        </trans-unit>
        <trans-unit id="3edc7f7dd753392a74ab3c329050e0ec08dcdba9" translate="yes" xml:space="preserve">
          <source>This controls how verbose to be during batch conversion, as far as notes to STDOUT (or whatever is &lt;code&gt;&lt;a href=&quot;../../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt;'d) about how the conversion is going. If 0, no progress information is printed. If 1 (the default value), some progress information is printed. Higher values print more information.</source>
          <target state="translated">これは、変換がどのように行われるかについてのSTDOUT（または &lt;code&gt;&lt;a href=&quot;../../functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; もの）へのメモに関する限り、バッチ変換中の冗長度を制御します。0の場合、進捗情報は出力されません。1（デフォルト値）の場合、いくつかの進行情報が出力されます。値を大きくすると、より多くの情報が印刷されます。</target>
        </trans-unit>
        <trans-unit id="e9775b2b0eddb211aedfd45019b3edf6207e64a9" translate="yes" xml:space="preserve">
          <source>This controls how verbose to be during batch conversion, as far as notes to STDOUT (or whatever is &lt;code&gt;select&lt;/code&gt;'d) about how the conversion is going. If 0, no progress information is printed. If 1 (the default value), some progress information is printed. Higher values print more information.</source>
          <target state="translated">これは、変換がどのように行われるかについてのSTDOUT（または &lt;code&gt;select&lt;/code&gt; もの）へのメモまで、バッチ変換中の冗長性を制御します。0の場合、進行状況情報は出力されません。1（デフォルト値）の場合、進行状況情報が出力されます。値が大きいほど、より多くの情報が出力されます。</target>
        </trans-unit>
        <trans-unit id="ff7a4f63a01fbc1cdd9d161f843ad25c0052f17f" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks if a dual-life core module has been deprecated. If this is set to true &lt;code&gt;check_install&lt;/code&gt; will return false to &lt;code&gt;uptodate&lt;/code&gt; , if a dual-life module is found to be loaded from &lt;code&gt;$Config{privlibexp}&lt;/code&gt;</source>
          <target state="translated">これは、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; がデュアルライフコアモジュールが廃止されているかどうかをチェックするかどうかを制御します。これがtrueに設定されている場合、デュアルライフモジュールが &lt;code&gt;$Config{privlibexp}&lt;/code&gt; からロードされていることが検出されると、 &lt;code&gt;check_install&lt;/code&gt; はfalseを &lt;code&gt;uptodate&lt;/code&gt; に返します。</target>
        </trans-unit>
        <trans-unit id="f473e55e3f05fdf8b7207839e3e128669c6830a4" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks if a dual-life core module has been deprecated. If this is set to true &lt;code&gt;check_install&lt;/code&gt; will return false to &lt;code&gt;uptodate&lt;/code&gt;, if a dual-life module is found to be loaded from &lt;code&gt;$Config{privlibexp}&lt;/code&gt;</source>
          <target state="translated">これは、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; がデュアルライフコアモジュールが非推奨になっているかどうかをチェックするかどうかを制御します。これがtrueに設定されている場合 &lt;code&gt;check_install&lt;/code&gt; する場合はfalseを返します &lt;code&gt;uptodate&lt;/code&gt; デュアルライフモジュールのロード元であることが判明した場合、 &lt;code&gt;$Config{privlibexp}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b4114328d4769af34ebf3741b18df472503df04" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks your &lt;code&gt;%INC&lt;/code&gt; hash to see if a module is available. By default, only &lt;code&gt;@INC&lt;/code&gt; is scanned to see if a module is physically on your filesystem, or available via an &lt;code&gt;@INC-hook&lt;/code&gt; . Setting this variable to &lt;code&gt;true&lt;/code&gt; will trust any entries in &lt;code&gt;%INC&lt;/code&gt; and return them for you.</source>
          <target state="translated">これは、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; が &lt;code&gt;%INC&lt;/code&gt; ハッシュをチェックしてモジュールが使用可能かどうかを確認するかどうかを制御します。デフォルトでは、唯一の &lt;code&gt;@INC&lt;/code&gt; は、モジュールがファイルシステム上に物理的であるかどうかを確認するためにスキャンされ、またはを介して利用可能 &lt;code&gt;@INC-hook&lt;/code&gt; 。この変数を &lt;code&gt;true&lt;/code&gt; に設定すると、 &lt;code&gt;%INC&lt;/code&gt; のすべてのエントリが信頼され、返されます。</target>
        </trans-unit>
        <trans-unit id="f4a2bb6249279fc9e40ac723ad2544e4cf6f2b93" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; checks your &lt;code&gt;%INC&lt;/code&gt; hash to see if a module is available. By default, only &lt;code&gt;@INC&lt;/code&gt; is scanned to see if a module is physically on your filesystem, or available via an &lt;code&gt;@INC-hook&lt;/code&gt;. Setting this variable to &lt;code&gt;true&lt;/code&gt; will trust any entries in &lt;code&gt;%INC&lt;/code&gt; and return them for you.</source>
          <target state="translated">これは、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; が &lt;code&gt;%INC&lt;/code&gt; ハッシュをチェックして、モジュールが使用可能かどうかを確認するかどうかを制御します。デフォルトでは、唯一の &lt;code&gt;@INC&lt;/code&gt; は、モジュールがファイルシステム上に物理的であるかどうかを確認するためにスキャンされ、またはを介して利用可能 &lt;code&gt;@INC-hook&lt;/code&gt; 。この変数を &lt;code&gt;true&lt;/code&gt; に設定すると、 &lt;code&gt;%INC&lt;/code&gt; のすべてのエントリが信頼され、それらが返されます。</target>
        </trans-unit>
        <trans-unit id="9c3ce0db041dad858d8e24ff2601618761d3793d" translate="yes" xml:space="preserve">
          <source>This controls whether &lt;code&gt;Module::Load::Conditional&lt;/code&gt; sanitises &lt;code&gt;@INC&lt;/code&gt; by removing &quot;&lt;code&gt;.&lt;/code&gt;&quot;. The current default setting is &lt;code&gt;0&lt;/code&gt;, but this may change in a future release.</source>
          <target state="translated">これは、「 &lt;code&gt;.&lt;/code&gt; 」を削除することにより、 &lt;code&gt;Module::Load::Conditional&lt;/code&gt; sanitised &lt;code&gt;@INC&lt;/code&gt; かどうかを制御します。現在のデフォルト設定は &lt;code&gt;0&lt;/code&gt; ですが、これは将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c4381fad7d89f422c37ccba3ee1b2f92eba8443" translate="yes" xml:space="preserve">
          <source>This controls whether IPC::Cmd will print any output from the commands to the screen or not. The default is 0.</source>
          <target state="translated">これは、IPC::Cmdがコマンドからの出力を画面に表示するかどうかを制御します。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="c156076360b54f8a8977c57dc77de47486be1ac3" translate="yes" xml:space="preserve">
          <source>This controls whether Module::Load::Conditional will issue warnings and explanations as to why certain things may have failed. If you set it to 0, Module::Load::Conditional will not output any warnings. The default is 0;</source>
          <target state="translated">これは、Module::Load::Conditional が、ある特定のことが失敗した理由について警告や説明を出力するかどうかを制御します。0 に設定すると、Module::Load::Conditional は警告を出力しません。デフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="b49fb12849ceb3c435af21ba21b9e8d24214fd70" translate="yes" xml:space="preserve">
          <source>This controls whether Module::Load::Conditional will try to parse (and eval) the version from the module you're trying to load.</source>
          <target state="translated">これは、Module::Load::Conditionalがロードしようとしているモジュールのバージョンを解析(およびeval)しようとするかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="d9aae25fb78fe9990ffb44145098a21f55aa720e" translate="yes" xml:space="preserve">
          <source>This controls whether Params::Check will issue warnings and explanations as to why certain things may have failed. If you set it to 0, Params::Check will not output any warnings.</source>
          <target state="translated">これは、Params::Check が警告や失敗した理由の説明を出力するかどうかを制御します。0 に設定した場合、Params::Check は警告を出力しません。</target>
        </trans-unit>
        <trans-unit id="a6e244d9b4c4b3e3b7164ac6b7f4cae7e7da9c75" translate="yes" xml:space="preserve">
          <source>This controls whether all output of a command should also be printed to STDOUT/STDERR or should only be trapped in buffers (NOTE: buffers require &lt;a href=&quot;IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; to be installed, or your system able to work with &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="translated">これは、コマンドのすべての出力をSTDOUT / STDERRに出力するか、バッファーにのみトラップするかを制御します（注：バッファーをインストールするには&lt;a href=&quot;IPC::Run&quot;&gt;IPC :: Run&lt;/a&gt;が必要であるか、システムが&lt;a href=&quot;IPC::Open3&quot;&gt;IPC :: Open3で&lt;/a&gt;動作できる必要があります）。</target>
        </trans-unit>
        <trans-unit id="8aa3d4d74657a46a0b2bcece8a25683b9b4d5103" translate="yes" xml:space="preserve">
          <source>This controls whether all output of a command should also be printed to STDOUT/STDERR or should only be trapped in buffers (NOTE: buffers require &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; to be installed, or your system able to work with &lt;a href=&quot;open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="translated">これは、コマンドのすべての出力をSTDOUT / STDERRにも出力するか、バッファーにのみトラップするかを制御します（注：バッファーには&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC :: Run&lt;/a&gt;をインストールする必要があります。または、システムで&lt;a href=&quot;open3&quot;&gt;IPC :: Open3&lt;/a&gt;を使用できます）。</target>
        </trans-unit>
        <trans-unit id="732d2e4b2658c0a2ec91db3c054e26236d0390f1" translate="yes" xml:space="preserve">
          <source>This controls whether imports the functions of a loaded modules to the caller package. The default is no importing any functions.</source>
          <target state="translated">これは、ロードされたモジュールの関数を呼び出し元のパッケージにインポートするかどうかを制御します。デフォルトでは、関数をインポートしないようになっています。</target>
        </trans-unit>
        <trans-unit id="eb78f49655da0a3543996010fb5198aba12c2274" translate="yes" xml:space="preserve">
          <source>This controls whether or not each HTML page is liable to have a little table of contents at the top (which we call an &quot;index&quot; for historical reasons). This is true by default.</source>
          <target state="translated">これは、各HTMLページが上部に小さな目次を持つ傾向があるかどうかを制御します(歴史的な理由から「インデックス」と呼んでいます)。これはデフォルトではtrueになっています。</target>
        </trans-unit>
        <trans-unit id="d18f8fcaf7759aa328d11a1f1e92e835b3d9557f" translate="yes" xml:space="preserve">
          <source>This controls whether warnings should be printed if a module failed to load. The default is to use the value of $Module::Load::Conditional::VERBOSE.</source>
          <target state="translated">これは、モジュールのロードに失敗した場合に警告を表示するかどうかを制御します。デフォルトでは、$Module::Load::Conditional::VERBOSE の値を使用します。</target>
        </trans-unit>
        <trans-unit id="4ff7f0c70685518180af334112b2fe58a44a4fdd" translate="yes" xml:space="preserve">
          <source>This copyright does not prohibit distribution of any version of Perl containing this extension under the terms of the GNU or Artistic licenses.</source>
          <target state="translated">この著作権は、この拡張子を含むPerlのどのバージョンの配布も、GNUライセンスまたはArtisticライセンスの条件の下で禁止するものではありません。</target>
        </trans-unit>
        <trans-unit id="e07ca9a36ef5f49f5e95795b2568b38574fd37e2" translate="yes" xml:space="preserve">
          <source>This corresponds to clearerr(), i.e., clears 'error' and (usually) 'eof' flags for the &quot;stream&quot;. Does not return a value.</source>
          <target state="translated">これは clearerr()に相当し、つまり、&quot;ストリーム&quot; の 'error' と (通常は)'eof' フラグをクリアします。値は返さない。</target>
        </trans-unit>
        <trans-unit id="a832f3c37512b00bc489449027088839617ff5af" translate="yes" xml:space="preserve">
          <source>This corresponds to feof(). Returns a true/false indication of whether the handle is at end of file. For terminal devices this may or may not be &quot;sticky&quot; depending on the implementation. The flag is cleared by PerlIO_seek(), or PerlIO_rewind().</source>
          <target state="translated">これは feof()に対応します。ハンドルがファイルの最後にあるかどうかの真偽を返します。端末デバイスの場合、これは実装によっては &quot;スティッキー &quot;になるかならないかの違いがあります。このフラグは、PerlIO_seek()またはPerlIO_rewind()によってクリアされます。</target>
        </trans-unit>
        <trans-unit id="baeb66e5af4f3d77be2f1ed10348f03a4ed016a5" translate="yes" xml:space="preserve">
          <source>This corresponds to ferror(). Returns a true/false indication of whether there has been an IO error on the handle.</source>
          <target state="translated">これは ferror()に対応しています。ハンドルに IO エラーがあったかどうかの真偽を返します。</target>
        </trans-unit>
        <trans-unit id="bb12a0ca3665432e7ae210e2f30b098e3c60f423" translate="yes" xml:space="preserve">
          <source>This corresponds to fflush(). Sends any buffered write data to the underlying file. If called with &lt;code&gt;NULL&lt;/code&gt; this may flush all open streams (or core dump with some USE_STDIO implementations). Calling on a handle open for read only, or on which last operation was a read of some kind may lead to undefined behaviour on some USE_STDIO implementations. The USE_PERLIO (layers) implementation tries to behave better: it flushes all open streams when passed &lt;code&gt;NULL&lt;/code&gt; , and attempts to retain data on read streams either in the buffer or by seeking the handle to the current logical position.</source>
          <target state="translated">これはfflush（）に対応します。バッファリングされた書き込みデータを基になるファイルに送信します。 &lt;code&gt;NULL&lt;/code&gt; を指定して呼び出すと、開いているすべてのストリーム（または一部のUSE_STDIO実装でのコアダンプ）がフラッシュされる可能性があります。読み取り専用で開いているハンドル、または最後の操作が何らかの読み取りであるハンドルを呼び出すと、一部のUSE_STDIO実装で未定義の動作が発生する可能性があります。 USE_PERLIO（レイヤー）実装は、より適切に動作しようとします。NULLが渡されると、開いているすべてのストリームをフラッシュし、読み取りストリームのデータをバッファーに保持するか、現在の論理位置へのハンドルを検索し &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d9dcb6de62439562f514cb79a1863a8cc7b8b20" translate="yes" xml:space="preserve">
          <source>This corresponds to fflush(). Sends any buffered write data to the underlying file. If called with &lt;code&gt;NULL&lt;/code&gt; this may flush all open streams (or core dump with some USE_STDIO implementations). Calling on a handle open for read only, or on which last operation was a read of some kind may lead to undefined behaviour on some USE_STDIO implementations. The USE_PERLIO (layers) implementation tries to behave better: it flushes all open streams when passed &lt;code&gt;NULL&lt;/code&gt;, and attempts to retain data on read streams either in the buffer or by seeking the handle to the current logical position.</source>
          <target state="translated">これはfflush（）に対応します。バッファリングされた書き込みデータを基になるファイルに送信します。 &lt;code&gt;NULL&lt;/code&gt; で呼び出された場合、これは開いているすべてのストリーム（または一部のUSE_STDIO実装のコアダンプ）をフラッシュする可能性があります。読み取り専用で開いているハンドルを呼び出すか、最後の操作が何らかの読み取りであった場合、一部のUSE_STDIO実装で未定義の動作が発生する可能性があります。 USE_PERLIO（層）の実装は、より良好に動作しようとする：渡されたときに開いているすべてのストリームをフラッシュ &lt;code&gt;NULL&lt;/code&gt; を、リード上のデータを保持しようとする試みは、バッファまたは現在の論理位置にハンドルを求めることにより、いずれかのストリーム。</target>
        </trans-unit>
        <trans-unit id="9e414890b7f22b1b4083f4007de6555d9d071db1" translate="yes" xml:space="preserve">
          <source>This corresponds to fileno(), note that on some platforms, the meaning of &quot;fileno&quot; may not match Unix. Returns -1 if the handle has no open descriptor associated with it.</source>
          <target state="translated">これは fileno()に対応していますが、プラットフォームによっては &quot;fileno&quot; の意味が Unix と一致しない場合があることに注意してください。ハンドルに関連するオープンディスクリプタがない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="5f4554adde4cea2591eaa99c7438bd7a745a0b3f" translate="yes" xml:space="preserve">
          <source>This corresponds to fseek(). Sends buffered write data to the underlying file, or discards any buffered read data, then positions the file descriptor as specified by &lt;b&gt;offset&lt;/b&gt; and &lt;b&gt;whence&lt;/b&gt; (sic). This is the correct thing to do when switching between read and write on the same handle (see issues with PerlIO_flush() above). Offset is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt; .</source>
          <target state="translated">これはfseek（）に対応します。バッファリングされた書き込みデータを基礎となるファイルに送信するか、バッファリングされた読み取りデータを破棄して&lt;b&gt;から&lt;/b&gt;、&lt;b&gt;offset&lt;/b&gt;と&lt;b&gt;whence&lt;/b&gt;（sic）で指定された&lt;b&gt;とおりに&lt;/b&gt;ファイル記述子を配置します。これは、同じハンドルで読み取りと書き込みを切り替えるときに行う正しいことです（上記のPerlIO_flush（）の問題を参照）。オフセットは、Perl構成値である &lt;code&gt;Off_t&lt;/code&gt; タイプであり、stdioの &lt;code&gt;off_t&lt;/code&gt; とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="9bd7cfe67b5d59fef2229cadd453ea0901b8f7eb" translate="yes" xml:space="preserve">
          <source>This corresponds to fseek(). Sends buffered write data to the underlying file, or discards any buffered read data, then positions the file descriptor as specified by &lt;b&gt;offset&lt;/b&gt; and &lt;b&gt;whence&lt;/b&gt; (sic). This is the correct thing to do when switching between read and write on the same handle (see issues with PerlIO_flush() above). Offset is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt;.</source>
          <target state="translated">これはfseek（）に対応します。バッファリングされた書き込みデータを基になるファイルに送信するか、バッファリングされた読み取りデータを破棄して&lt;b&gt;から&lt;/b&gt;、&lt;b&gt;offset&lt;/b&gt;および&lt;b&gt;whence&lt;/b&gt;（sic）で指定された&lt;b&gt;とおりに&lt;/b&gt;ファイル記述子を配置します。これは、同じハンドルで読み取りと書き込みを切り替えるときに行う正しいことです（上記のPerlIO_flush（）の問題を参照）。オフセットのタイプは &lt;code&gt;Off_t&lt;/code&gt; で、これはperlの構成値であり、stdioの &lt;code&gt;off_t&lt;/code&gt; と同じではない場合があります。</target>
        </trans-unit>
        <trans-unit id="dd9bee6b04c387fd0085a9f7aa8ff48a5f034283" translate="yes" xml:space="preserve">
          <source>This corresponds to ftell(). Returns the current file position, or (Off_t) -1 on error. May just return value system &quot;knows&quot; without making a system call or checking the underlying file descriptor (so use on shared file descriptors is not safe without a PerlIO_seek()). Return value is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt; .</source>
          <target state="translated">これはftell（）に対応します。現在のファイル位置、またはエラー時に（Off_t）-1を返します。システムコールを実行したり、基礎となるファイル記述子をチェックしたりせずに、システムが「知っている」値を返す場合があります（したがって、共有ファイル記述子での使用は、PerlIO_seek（）なしでは安全ではありません）。戻り値は、Perl構成値である &lt;code&gt;Off_t&lt;/code&gt; 型であり、stdioの &lt;code&gt;off_t&lt;/code&gt; とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="7e3cecdb4fa297b5ce6bf2a831e2cb59bd3601f2" translate="yes" xml:space="preserve">
          <source>This corresponds to ftell(). Returns the current file position, or (Off_t) -1 on error. May just return value system &quot;knows&quot; without making a system call or checking the underlying file descriptor (so use on shared file descriptors is not safe without a PerlIO_seek()). Return value is of type &lt;code&gt;Off_t&lt;/code&gt; which is a perl Configure value which may not be same as stdio's &lt;code&gt;off_t&lt;/code&gt;.</source>
          <target state="translated">これはftell（）に対応します。現在のファイル位置を返します。エラーの場合は（Off_t）-1を返します。システムコールを実行したり、基になるファイル記述子をチェックしたりせずに、システムが「認識している」値を返す場合があります（したがって、共有ファイル記述子での使用は、PerlIO_seek（）なしでは安全ではありません）。戻り値はタイプ &lt;code&gt;Off_t&lt;/code&gt; であり、これはperl構成値であり、stdioの &lt;code&gt;off_t&lt;/code&gt; と同じではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="a3583e8644f865d149cd4eb31d670f437a6e26eb" translate="yes" xml:space="preserve">
          <source>This corresponds to getc(). Despite the c in the name only byte range 0..0xFF is supported. Returns the character read or -1 (&lt;code&gt;EOF&lt;/code&gt; ) on error.</source>
          <target state="translated">これはgetc（）に対応します。名前のcにもかかわらず、バイト範囲0..0xFFのみがサポートされています。エラーが発生した場合、読み取った文字または-1（ &lt;code&gt;EOF&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="95c0f809b22c7c0dae9af22f03c13f59aaa59bfb" translate="yes" xml:space="preserve">
          <source>This corresponds to getc(). Despite the c in the name only byte range 0..0xFF is supported. Returns the character read or -1 (&lt;code&gt;EOF&lt;/code&gt;) on error.</source>
          <target state="translated">これはgetc（）に対応します。名前にcが含まれているにもかかわらず、バイト範囲0..0xFFのみがサポートされています。読み取った文字、またはエラーの場合は-1（ &lt;code&gt;EOF&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="e1cbd65b62177115f422eaf8fe4754328fbc6b9b" translate="yes" xml:space="preserve">
          <source>This corresponds to rewind(). It is usually defined as being</source>
          <target state="translated">rewind()に相当します。通常は次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="93c7ee35566034261e1234fcee65abc1e334abb8" translate="yes" xml:space="preserve">
          <source>This corresponds to setlinebuf(). Does not return a value. What constitutes a &quot;line&quot; is implementation dependent but usually means that writing &quot;\n&quot; flushes the buffer. What happens with things like &quot;this\nthat&quot; is uncertain. (Perl core uses it</source>
          <target state="translated">これは setlinebuf()に対応しています。値を返さない。何が &quot;line &quot;を構成するかは、実装に依存するが、通常は、&quot;\n &quot;を書くとバッファがフラッシュされることを意味する。this\nthat&quot; のようなものがどうなるかは不明です。(Perlコアはこれを使用しています。</target>
        </trans-unit>
        <trans-unit id="c130282a86007cfef5f589b0d598e97fc7e10899" translate="yes" xml:space="preserve">
          <source>This corresponds to tmpfile(), i.e., returns an anonymous PerlIO or NULL on error. The system will attempt to automatically delete the file when closed. On Unix the file is usually &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;-ed just after it is created so it does not matter how it gets closed. On other systems the file may only be deleted if closed via PerlIO_close() and/or the program exits via &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;. Depending on the implementation there may be &quot;race conditions&quot; which allow other processes access to the file, though in general it will be safer in this regard than ad. hoc. schemes.</source>
          <target state="translated">これはtmpfile（）に対応します。つまり、エラーの場合、匿名のPerlIOまたはNULLを返します。システムは、閉じたときにファイルを自動的に削除しようとします。 Unixでは、ファイルは通常、作成直後に &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; されるため、どのように閉じるかは関係ありません。他のシステムでは、ファイルはPerlIO_close（）を介して閉じられた場合やプログラムがexitを介して &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; 場合にのみ削除されます。実装によっては、他のプロセスがファイルにアクセスできるようにする「競合状態」が存在する場合がありますが、一般的には、この点ではadよりも安全です。ホック。スキーム。</target>
        </trans-unit>
        <trans-unit id="0510a97fbd4cfa5a066aad9bda9c89da0469e9d9" translate="yes" xml:space="preserve">
          <source>This corresponds to tmpfile(), i.e., returns an anonymous PerlIO or NULL on error. The system will attempt to automatically delete the file when closed. On Unix the file is usually &lt;code&gt;unlink&lt;/code&gt;-ed just after it is created so it does not matter how it gets closed. On other systems the file may only be deleted if closed via PerlIO_close() and/or the program exits via &lt;code&gt;exit&lt;/code&gt;. Depending on the implementation there may be &quot;race conditions&quot; which allow other processes access to the file, though in general it will be safer in this regard than ad. hoc. schemes.</source>
          <target state="translated">これはtmpfile（）に対応します。つまり、エラー時に匿名のPerlIOまたはNULLを返します。システムは、閉じられるとファイルを自動的に削除しようとします。 Unixでは、ファイルは通常、作成された直後に &lt;code&gt;unlink&lt;/code&gt; されるため、どのように閉じてもかまいません。他のシステムでは、PerlIO_close（）を介して閉じられた場合、および/またはプログラムがexitを介して &lt;code&gt;exit&lt;/code&gt; 場合にのみ、ファイルを削除できます。実装によっては、他のプロセスがファイルにアクセスできるようにする「競合状態」が存在する場合がありますが、一般的には、この点では広告よりも安全です。その場限り。スキーム。</target>
        </trans-unit>
        <trans-unit id="327b626f972edcc8578bc2302697191125c0290f" translate="yes" xml:space="preserve">
          <source>This corresponds to ungetc(). Note that arguments have been revised to have &quot;file&quot; first. Arranges that next read operation will return the byte &lt;b&gt;c&lt;/b&gt;. Despite the implied &quot;character&quot; in the name only values in the range 0..0xFF are defined. Returns the byte &lt;b&gt;c&lt;/b&gt; on success or -1 (&lt;code&gt;EOF&lt;/code&gt; ) on error. The number of bytes that can be &quot;pushed back&quot; may vary, only 1 character is certain, and then only if it is the last character that was read from the handle.</source>
          <target state="translated">これはungetc（）に対応します。引数は最初に「ファイル」を持つように修正されていることに注意してください。次の読み取り操作でバイト&lt;b&gt;c&lt;/b&gt;が返されるようにします。名前に暗黙の「文字」があるにもかかわらず、0..0xFFの範囲の値のみが定義されています。成功した場合はバイト&lt;b&gt;c&lt;/b&gt;を、エラーの場合は-1（ &lt;code&gt;EOF&lt;/code&gt; ）を返します。「プッシュバック」できるバイト数は変わる可能性があり、1文字だけが確実であり、それがハンドルから読み取られた最後の文字である場合に限られます。</target>
        </trans-unit>
        <trans-unit id="c9249d1b24ff827efbf0b09c581b3316583a595e" translate="yes" xml:space="preserve">
          <source>This corresponds to ungetc(). Note that arguments have been revised to have &quot;file&quot; first. Arranges that next read operation will return the byte &lt;b&gt;c&lt;/b&gt;. Despite the implied &quot;character&quot; in the name only values in the range 0..0xFF are defined. Returns the byte &lt;b&gt;c&lt;/b&gt; on success or -1 (&lt;code&gt;EOF&lt;/code&gt;) on error. The number of bytes that can be &quot;pushed back&quot; may vary, only 1 character is certain, and then only if it is the last character that was read from the handle.</source>
          <target state="translated">これはungetc（）に対応します。引数が改訂され、最初に「ファイル」が含まれるようになっていることに注意してください。次の読み取り操作でバイト&lt;b&gt;c&lt;/b&gt;が返されるように調整し&lt;b&gt;ます&lt;/b&gt;。名前には暗黙の「文字」が含まれていますが、0..0xFFの範囲の値のみが定義されています。成功した場合はバイト&lt;b&gt;c&lt;/b&gt;を返し、エラーの場合は-1（ &lt;code&gt;EOF&lt;/code&gt; ）を返します。「プッシュバック」できるバイト数は異なる場合があり、1文字のみが確実であり、ハンドルから読み取られた最後の文字である場合に限ります。</target>
        </trans-unit>
        <trans-unit id="d8f57342ffddc378f45e967d08a4b40a9028441d" translate="yes" xml:space="preserve">
          <source>This could, of course, be more legibly written with the &lt;code&gt;/x&lt;/code&gt; modifier, adding whitespace and comments. Here it is expanded, courtesy of Fred Curtis.</source>
          <target state="translated">もちろん、これは &lt;code&gt;/x&lt;/code&gt; 修飾子を使用してより読みやすく記述でき、空白とコメントが追加されます。ここでは、フレッド・カーティスの厚意により拡大されています。</target>
        </trans-unit>
        <trans-unit id="ac65bf824b65194ff0a99fd92e3e036111f8e8a9" translate="yes" xml:space="preserve">
          <source>This counterintuitive behavior has been fixed in perl v5.8.1.</source>
          <target state="translated">この不可解な動作は perl v5.8.1 で修正されています。</target>
        </trans-unit>
        <trans-unit id="ee88470233c1da8717b5bd9acaba39e40089d0b6" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;VMS::DCLsym&lt;/code&gt; object which can be used as a handle for later method calls. The single optional argument specifies the symbol table used by default in future method calls, in the same way as the optional argument to &lt;code&gt;tie&lt;/code&gt; described above.</source>
          <target state="translated">これにより、後のメソッド呼び出しのハンドルとして使用できる &lt;code&gt;VMS::DCLsym&lt;/code&gt; オブジェクトが作成されます。単一のオプションの引数は、オプションの引数と同様に、将来のメソッド呼び出しにデフォルトで使用されるシンボル・テーブルを指定 &lt;code&gt;tie&lt;/code&gt; 上述しました。</target>
        </trans-unit>
        <trans-unit id="1645aaa3f3c32e20d8c02b43f04eac07a2fcc5a3" translate="yes" xml:space="preserve">
          <source>This creates a CPAN::Meta::Merge object. It takes one mandatory named argument, &lt;code&gt;version&lt;/code&gt;, declaring the version of the meta-spec that must be used for the merge. It can optionally take an &lt;code&gt;extra_mappings&lt;/code&gt; argument that allows one to add additional merging functions for specific elements.</source>
          <target state="translated">これにより、CPAN :: Meta :: Mergeオブジェクトが作成されます。マージに使用する必要のあるメタスペックのバージョンを宣言する、1つの必須の名前付き引数 &lt;code&gt;version&lt;/code&gt; を取ります。オプションで &lt;code&gt;extra_mappings&lt;/code&gt; 引数を取り、特定の要素にマージ関数を追加することができます。</target>
        </trans-unit>
        <trans-unit id="4d26884badcfad89a2f88ee752f4bee54862ec7a" translate="yes" xml:space="preserve">
          <source>This creates a handler for the attribute &lt;code&gt;:Loud&lt;/code&gt; in the class LoudDecl. Thereafter, any subroutine declared with a &lt;code&gt;:Loud&lt;/code&gt; attribute in the class LoudDecl:</source>
          <target state="translated">これにより、LoudDeclクラスに &lt;code&gt;:Loud&lt;/code&gt; 属性のハンドラーが作成されます。その後、LoudDeclクラスの &lt;code&gt;:Loud&lt;/code&gt; 属性で宣言されたすべてのサブルーチン：</target>
        </trans-unit>
        <trans-unit id="8263a46fdb04b7977692de514f9404e4c18b81b5" translate="yes" xml:space="preserve">
          <source>This creates a local branch named &lt;code&gt;maint-5.005&lt;/code&gt;, which tracks the remote branch &lt;code&gt;origin/maint-5.005&lt;/code&gt;. Then you can pull, commit, merge and push as before.</source>
          <target state="translated">これにより、 &lt;code&gt;maint-5.005&lt;/code&gt; という名前のローカルブランチが作成され、リモートブランチの &lt;code&gt;origin/maint-5.005&lt;/code&gt; ます。次に、以前と同じように、プル、コミット、マージ、およびプッシュできます。</target>
        </trans-unit>
        <trans-unit id="9bc82066bd7f21b4bcc5fd329fc91ce1111d9d09" translate="yes" xml:space="preserve">
          <source>This creates a new batch converter. The method doesn't take parameters. To change the converter's attributes, use the &quot;ACCESSOR METHODS&quot;&quot; in &quot; below.</source>
          <target state="translated">これは新しいバッチコンバータを作成します。このメソッドはパラメータを取りません。コンバータの属性を変更するには、以下の&quot; &quot;の「ACCESSOR METHODS」を使用します。</target>
        </trans-unit>
        <trans-unit id="87fa03371108789e3d1ff265f81c30f8fb7e2b16" translate="yes" xml:space="preserve">
          <source>This creates a new thread (&lt;code&gt;$thr2&lt;/code&gt; ) that inherits the stack size from an existing thread (&lt;code&gt;$thr1&lt;/code&gt; ). This is shorthand for the following:</source>
          <target state="translated">これにより、既存のスレッド（ &lt;code&gt;$thr1&lt;/code&gt; ）からスタックサイズを継承する新しいスレッド（ &lt;code&gt;$thr2&lt;/code&gt; ）が作成されます。これは以下の略記です。</target>
        </trans-unit>
        <trans-unit id="47788aa7839e22479a971854bcf1abe7b0acfb25" translate="yes" xml:space="preserve">
          <source>This creates a new thread (&lt;code&gt;$thr2&lt;/code&gt;) that inherits the stack size from an existing thread (&lt;code&gt;$thr1&lt;/code&gt;). This is shorthand for the following:</source>
          <target state="translated">これにより、既存のスレッド（ &lt;code&gt;$thr1&lt;/code&gt; ）からスタックサイズを継承する新しいスレッド（ &lt;code&gt;$thr2&lt;/code&gt; ）が作成されます。これは、次の省略形です。</target>
        </trans-unit>
        <trans-unit id="c13be50d55b544b4c8283f535832e9b6392a885b" translate="yes" xml:space="preserve">
          <source>This creates a working sysroot that we can feed to Configure later.</source>
          <target state="translated">これにより、後で Configure にフィードすることができる作業用の sysroot が作成されます。</target>
        </trans-unit>
        <trans-unit id="0d5e9ac144b79f7c4865c5f4daf815fdb24b2e3d" translate="yes" xml:space="preserve">
          <source>This currently means that all code points in the sequence have been assigned by Unicode to be characters that aren't private use nor surrogate code points.</source>
          <target state="translated">これは現在のところ、シーケンス内のすべてのコードポイントが、私用でもサロゲートコードポイントでもない文字としてUnicodeによって割り当てられていることを意味しています。</target>
        </trans-unit>
        <trans-unit id="0ee76e6a741e92139c43f1e221ed11b509991786" translate="yes" xml:space="preserve">
          <source>This database type allows arbitrary key/value pairs to be stored in data files. This is equivalent to the functionality provided by other hashing packages like DBM, NDBM, ODBM, GDBM, and SDBM. Remember though, the files created using DB_HASH are not compatible with any of the other packages mentioned.</source>
          <target state="translated">このデータベースタイプでは、任意のキーと値のペアをデータファイルに格納することができます。これは、DBM,NDBM,ODBM,GDBM,SDBM のような他のハッシュパッケージが提供する機能と同等です。ただし、DB_HASH を使用して作成されたファイルは、他のどのパッケージとも互換性がないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="3807b81d9c773a6c5335f9e71e920114a654bcff" translate="yes" xml:space="preserve">
          <source>This debugger prints a number which increments for each statement encountered and waits for you to hit a newline before continuing to the next statement.</source>
          <target state="translated">このデバッガーは、各ステートメントが遭遇したときにインクリメントされた数値を表示し、次のステートメントに進む前に改行を押すのを待ちます。</target>
        </trans-unit>
        <trans-unit id="67c09da3f20ea7878643178c10aa0a6e33cc924b" translate="yes" xml:space="preserve">
          <source>This declares a block of tests that might be skipped, $how_many tests there are, $why and under what $condition to skip them. An example is the easiest way to illustrate:</source>
          <target state="translated">これは、スキップする可能性のあるテストのブロック、$how_many テストがあるか、$why と $conditioned の下でスキップするかどうかを宣言します。例は、最も簡単に説明する方法です。</target>
        </trans-unit>
        <trans-unit id="9e3fa8a7f8cc69e16dc88141cf1567bb93e3d7ad" translate="yes" xml:space="preserve">
          <source>This decomposition may be an intermediate one whose components are also decomposable. Use &lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="translated">この分解は、その成分も分解可能な中間分解である可能性があります。&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode :: Normalize&lt;/a&gt;を使用して、1つのステップで最終的な分解を取得します。</target>
        </trans-unit>
        <trans-unit id="44521e30f7e690cd5dc65c30814c4cee699cd60e" translate="yes" xml:space="preserve">
          <source>This decomposition may be an intermediate one whose components are also decomposable. Use &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="translated">この分解は、その成分も分解可能な中間の分解である可能性があります。&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalize&lt;/a&gt;を使用して、1つのステップで最終的な分解を取得します。</target>
        </trans-unit>
        <trans-unit id="97bd528541645ff3d464e572f5a4805e2ee9bc4c" translate="yes" xml:space="preserve">
          <source>This default can be overridden on a per-number basis by calling the &lt;code&gt;display_format&lt;/code&gt; method instead. As before, not supplying any argument returns the current display style for this number. Otherwise whatever you specify will be the new display style for</source>
          <target state="translated">このデフォルトは、代わりに &lt;code&gt;display_format&lt;/code&gt; メソッドを呼び出すことにより、数値ごとにオーバーライドできます。前と同様に、引数を指定しないと、この数値の現在の表示スタイルが返されます。それ以外の場合は、指定したものが新しい表示スタイルになります</target>
        </trans-unit>
        <trans-unit id="b13fed4037708b058149d6d54239c3578805f852" translate="yes" xml:space="preserve">
          <source>This demonstrates how &lt;code&gt;SUPER&lt;/code&gt; is resolved. Even though the object is blessed into the &lt;code&gt;C&lt;/code&gt; class, the &lt;code&gt;speak()&lt;/code&gt; method in the &lt;code&gt;B&lt;/code&gt; class can still call &lt;code&gt;SUPER::speak()&lt;/code&gt; and expect it to correctly look in the parent class of &lt;code&gt;B&lt;/code&gt; (i.e the class the method call is in), not in the parent class of &lt;code&gt;C&lt;/code&gt; (i.e. the class the object belongs to).</source>
          <target state="translated">これは、 &lt;code&gt;SUPER&lt;/code&gt; がどのように解決されるかを示しています。オブジェクトがに恵まれているにもかかわらず、 &lt;code&gt;C&lt;/code&gt; のクラス、 &lt;code&gt;speak()&lt;/code&gt; でメソッド &lt;code&gt;B&lt;/code&gt; のクラスはまだ呼び出すことができます &lt;code&gt;SUPER::speak()&lt;/code&gt; して、正しくの親クラスで見ることを期待 &lt;code&gt;B&lt;/code&gt; （つまりクラスメソッドの呼び出しが入っています）、 &lt;code&gt;C&lt;/code&gt; の親クラス（つまり、オブジェクトが属するクラス）にはありません。</target>
        </trans-unit>
        <trans-unit id="5a18b47e8bc86d748a4aab67a43edef686b92a3f" translate="yes" xml:space="preserve">
          <source>This depends on the tied hash's implementation of EXISTS(). For example, there isn't the concept of undef with hashes that are tied to DBM* files. It also means that exists() and defined() do the same thing with a DBM* file, and what they end up doing is not what they do with ordinary hashes.</source>
          <target state="translated">これは、紐付けられたハッシュの EXISTS()の実装に依存します。例えば、DBM*ファイルに紐付けられたハッシュには undef という概念はありません。また、exists()とdefined()はDBM*ファイルと同じことをしていることを意味し、それらが最終的に行うことは通常のハッシュで行うこととは異なります。</target>
        </trans-unit>
        <trans-unit id="9d4bc0de5af18f612ccd2a5cae826c99487fcbf8" translate="yes" xml:space="preserve">
          <source>This depends on which operating system your program is running on. In the case of Unix, the serial ports will be accessible through files in &lt;code&gt;/dev&lt;/code&gt; ; on other systems, device names will doubtless differ. Several problem areas common to all device interaction are the following:</source>
          <target state="translated">これは、プログラムが実行されているオペレーティングシステムによって異なります。Unixの場合、シリアルポートは &lt;code&gt;/dev&lt;/code&gt; 内のファイルを通じてアクセスできます。他のシステムでは、デバイス名は間違いなく異なります。すべてのデバイスの相互作用に共通するいくつかの問題領域は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="03ee5b714e2ad9827ab9f706d0156780edac87fe" translate="yes" xml:space="preserve">
          <source>This depends on which operating system your program is running on. In the case of Unix, the serial ports will be accessible through files in &lt;code&gt;/dev&lt;/code&gt;; on other systems, device names will doubtless differ. Several problem areas common to all device interaction are the following:</source>
          <target state="translated">これは、プログラムが実行されているオペレーティングシステムによって異なります。Unixの場合、シリアルポートには &lt;code&gt;/dev&lt;/code&gt; 内のファイルからアクセスできます。他のシステムでは、デバイス名は間違いなく異なります。すべてのデバイスの相互作用に共通するいくつかの問題領域は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5becff50f569cb27ece95ac48841bd7838bbbdf8" translate="yes" xml:space="preserve">
          <source>This describes all packages provided by this distribution. This information is used by distribution and automation mechanisms like PAUSE, CPAN, metacpan.org and search.cpan.org to build indexes saying in which distribution various packages can be found.</source>
          <target state="translated">この情報は、このディストリビューションが提供するすべてのパッケージを記述しています。この情報は、PAUSE,CPAN,metacpan.org,search.cpan.org などのディストリビューションや自動化機構が、 どのディストリビューションにどのようなパッケージがあるかを示すインデックスを作成するために利用されます。</target>
        </trans-unit>
        <trans-unit id="a20078d60a6a97424e04254a5fa4e6e526ad17dd" translate="yes" xml:space="preserve">
          <source>This describes the namespace layout for the Test2 ecosystem. Not all the namespaces listed here are part of the Test2 distribution, some are implemented in &lt;a href=&quot;Test2::Suite&quot;&gt;Test2::Suite&lt;/a&gt;.</source>
          <target state="translated">これは、Test2エコシステムの名前空間レイアウトについて説明しています。ここにリストされているすべての名前空間がTest2ディストリビューションの一部であるわけではなく、一部は&lt;a href=&quot;Test2::Suite&quot;&gt;Test2 :: Suiteに&lt;/a&gt;実装されています。</target>
        </trans-unit>
        <trans-unit id="d5829cc9fcaba21dee6f9d7f5a98f9ac945f1487" translate="yes" xml:space="preserve">
          <source>This description is not updated often (since 5.6.1?), see</source>
          <target state="translated">この記述は頻繁に更新されていません(5.6.1以降?</target>
        </trans-unit>
        <trans-unit id="d6d22f28f156ae5e9b48e8de5b3d3fde4d59d03e" translate="yes" xml:space="preserve">
          <source>This differs slightly from the &lt;code&gt;accept&lt;/code&gt; function in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;の &lt;code&gt;accept&lt;/code&gt; 関数とは少し異なります。</target>
        </trans-unit>
        <trans-unit id="20322d80a32c4020d9ededc57d341d0284daf471" translate="yes" xml:space="preserve">
          <source>This directive is supported with ANSI-type function declarations only.</source>
          <target state="translated">このディレクティブは ANSI 型の関数宣言でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="0bdb96acaa7aac7424045042159548f85c9ab53b" translate="yes" xml:space="preserve">
          <source>This directly modifies the stored filehandles, it does not create new ones.</source>
          <target state="translated">これは保存されているファイルハンドルを直接変更します。</target>
        </trans-unit>
        <trans-unit id="a18a04a1fb981c46cc90618271edcb18e99ed305" translate="yes" xml:space="preserve">
          <source>This directory contains dual-life modules where the CPAN module is canonical. Do not patch these modules directly! Changes to these modules should be submitted to the maintainer of the CPAN module. Once those changes are applied and released, the new version of the module will be incorporated into the core.</source>
          <target state="translated">このディレクトリには、CPAN モジュールが正規化されている dual-life モジュールが含まれています。これらのモジュールに直接パッチを当てないでください。これらのモジュールへの変更は、CPAN モジュールのメンテナに提出してください。これらの変更が適用されリリースされると、モジュールの新バージョンがコアに組み込まれます。</target>
        </trans-unit>
        <trans-unit id="8f5f151207fd145f47cd0f164782d7d714aa8988" translate="yes" xml:space="preserve">
          <source>This directory contains pure-Perl modules which are only released as part of the core. This directory contains</source>
          <target state="translated">このディレクトリには、コアの一部としてのみリリースされる純粋な Perl モジュールが含まれます。このディレクトリには</target>
        </trans-unit>
        <trans-unit id="ff88cb5fa00bc50f7151a1d4596e477618c8bcec" translate="yes" xml:space="preserve">
          <source>This directory is for dual-life modules where the blead source is canonical. Note that some modules in this directory may not yet have been released separately on CPAN. Modules under</source>
          <target state="translated">このディレクトリは、ブリードソースがカノニカルなデュアルライフモジュールのためのものです。このディレクトリにあるモジュールの中には、まだCPANで個別にリリースされていないものがあることに注意してください。以下のモジュール</target>
        </trans-unit>
        <trans-unit id="62002fdbbc82dfdecab897397921252b1a422691" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;BOOKSHELF&lt;/code&gt; .</source>
          <target state="translated">このディレクトリは &lt;code&gt;BOOKSHELF&lt;/code&gt; にある方が適切です。</target>
        </trans-unit>
        <trans-unit id="53f8085abd01c50ea807b424c7fb70d06b9d9336" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;BOOKSHELF&lt;/code&gt;.</source>
          <target state="translated">このディレクトリは &lt;code&gt;BOOKSHELF&lt;/code&gt; にある方がよいでしょう。</target>
        </trans-unit>
        <trans-unit id="333fd828a086a8d956340a5925aba972db5faa95" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt; . You need to have a working</source>
          <target state="translated">このディレクトリは &lt;code&gt;MANPATH&lt;/code&gt; 上にある方がよいでしょう。あなたは働く必要があります</target>
        </trans-unit>
        <trans-unit id="7a7d8abb15dd5ddcab335f051e15e631ee76c9a7" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt; . You need to have a working man to access these files.</source>
          <target state="translated">このディレクトリは &lt;code&gt;MANPATH&lt;/code&gt; 上にある方がよいでしょう。これらのファイルにアクセスするには、働く人が必要です。</target>
        </trans-unit>
        <trans-unit id="3bfbc8178767aed118a078c916238d08187f8c32" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt;. You need to have a working</source>
          <target state="translated">このディレクトリは &lt;code&gt;MANPATH&lt;/code&gt; 上にある必要があります。あなたは働く必要があります</target>
        </trans-unit>
        <trans-unit id="7f768384fb45192f416d43b226b88f4f7ac434db" translate="yes" xml:space="preserve">
          <source>This directory should better be on &lt;code&gt;MANPATH&lt;/code&gt;. You need to have a working man to access these files.</source>
          <target state="translated">このディレクトリは &lt;code&gt;MANPATH&lt;/code&gt; 上にある必要があります。これらのファイルにアクセスするには、働く人が必要です。</target>
        </trans-unit>
        <trans-unit id="efd449ffe16a462d28e76469ef21ea9f7d571513" translate="yes" xml:space="preserve">
          <source>This disables &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;&quot;Magic Autogeneration&quot;&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;#Magic-Autogeneration&quot;&gt;「MagicAutogeneration」が&lt;/a&gt;無効になります。</target>
        </trans-unit>
        <trans-unit id="170ad9fea04adcf28e5b84faabd5cf2954a187d9" translate="yes" xml:space="preserve">
          <source>This disables &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;Magic Autogeneration&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;#Magic-Autogeneration&quot;&gt;マジックの自動生成が&lt;/a&gt;無効になります。</target>
        </trans-unit>
        <trans-unit id="3b3a0993d47177782fe70afdd82bfb741c3d7395" translate="yes" xml:space="preserve">
          <source>This disables the poetry optimization, generating a compile-time error if you try to use a bareword identifier that's not a subroutine, unless it is a simple identifier (no colons) and that it appears in curly braces or on the left hand side of the &lt;code&gt;=&amp;gt;&lt;/code&gt; symbol.</source>
          <target state="translated">これにより、詩の最適化が無効になり、単純な識別子（コロンなし）でなく、中括弧または左側に表示されない限り、サブルーチンではないベアワード識別子を使用しようとするとコンパイル時エラーが生成されます &lt;code&gt;=&amp;gt;&lt;/code&gt; 記号。</target>
        </trans-unit>
        <trans-unit id="bbfb3ce32af84903cf3730d9cf51595fc0554060" translate="yes" xml:space="preserve">
          <source>This distribution directly accesses the hash keys in the &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; singleton. It also approaches the problem from the wrong angle, please consider using &lt;a href=&quot;Test2::Aggregate&quot;&gt;Test2::Aggregate&lt;/a&gt; for similar functionality and &lt;a href=&quot;Test2::Harness&quot;&gt;Test2::Harness&lt;/a&gt; which allows module preloading at the harness level.</source>
          <target state="translated">このディストリビューションは、&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builder&lt;/a&gt;シングルトンのハッシュキーに直接アクセスします。また、間違った角度から問題にアプローチします。同様の機能には&lt;a href=&quot;Test2::Aggregate&quot;&gt;Test2 :: Aggregate&lt;/a&gt;を使用し、ハーネスレベルでモジュールのプリロードを可能にする&lt;a href=&quot;Test2::Harness&quot;&gt;Test2 :: Harness&lt;/a&gt;を使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="a5b7ba8215c0f4757732a3f14c729963fc274aea" translate="yes" xml:space="preserve">
          <source>This doc</source>
          <target state="translated">このドキュメント</target>
        </trans-unit>
        <trans-unit id="34ff219b627159fe6cfa93920427dc7e601e7134" translate="yes" xml:space="preserve">
          <source>This document aims to provide an overview of the vast perl community, which is far too large and diverse to provide a detailed listing. If any specific niche has been forgotten, it is not meant as an insult but an omission for the sake of brevity.</source>
          <target state="translated">この文書は広大な perl コミュニティの概要を提供することを目的としています。特定のニッチが忘れ去られていたとしても、それは侮辱ではなく、簡潔さのために省略したものです。</target>
        </trans-unit>
        <trans-unit id="1ba7340d966579fbb753302864000cf7b2972014" translate="yes" xml:space="preserve">
          <source>This document assumes that the executable named &quot;perl&quot; is Perl version 5. Some systems may have installed Perl version 5 as &quot;perl5&quot;.</source>
          <target state="translated">このドキュメントでは、&quot;perl &quot;という名前の実行ファイルがPerlバージョン5であることを前提としています。システムによってはPerlバージョン5を &quot;perl5 &quot;としてインストールしている場合があります。</target>
        </trans-unit>
        <trans-unit id="3a2742d9b73b97368bfc5521e9515184f408ef85" translate="yes" xml:space="preserve">
          <source>This document assumes that you already understand the basics of Perl syntax, variable types, operators, and subroutine calls. If you don't understand these concepts yet, please read &lt;a href=&quot;perlintro&quot;&gt;perlintro&lt;/a&gt; first. You should also read the &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;, &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;, and &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt; documents.</source>
          <target state="translated">このドキュメントは、Perl構文、変数の型、演算子、およびサブルーチン呼び出しの基本をすでに理解していることを前提としています。これらの概念をまだ理解していない場合は、最初に&lt;a href=&quot;perlintro&quot;&gt;perlintro&lt;/a&gt;を読んでください。また、&lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt;、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;、および&lt;a href=&quot;perlsub&quot;&gt;perlsubの&lt;/a&gt;ドキュメントもお読みください。</target>
        </trans-unit>
        <trans-unit id="8f596bd16fedee538f262d0de64e96d996439fb3" translate="yes" xml:space="preserve">
          <source>This document attempts to describe how to use the Perl API, as well as to provide some info on the basic workings of the Perl core. It is far from complete and probably contains many errors. Please refer any questions or comments to the author below.</source>
          <target state="translated">このドキュメントは、Perl API の使い方や Perl コアの基本的な動作についての情報を提供することを目的としています。完全なものではなく、多くのエラーが含まれている可能性があります。質問やコメントがあれば、以下の作者までご連絡ください。</target>
        </trans-unit>
        <trans-unit id="7e01fbc0bc773f9d24734cb30bab33bda7d5f6af" translate="yes" xml:space="preserve">
          <source>This document attempts to describe the Perl Community's &quot;best practice&quot; for writing Perl modules. It extends the recommendations found in &lt;a href=&quot;perlstyle&quot;&gt;perlstyle&lt;/a&gt; , which should be considered required reading before reading this document.</source>
          <target state="translated">このドキュメントでは、PerlコミュニティのPerlモジュールを作成するための「ベストプラクティス」について説明します。これは&lt;a href=&quot;perlstyle&quot;&gt;perlstyle&lt;/a&gt;にある推奨事項を拡張したものであり、このドキュメントを読む前に必ず読む必要があると考えるべきです。</target>
        </trans-unit>
        <trans-unit id="bab11f45369409b96d7bf2180484dc0f685d2683" translate="yes" xml:space="preserve">
          <source>This document briefly describes Perl under Mac OS X.</source>
          <target state="translated">このドキュメントでは、Mac OS XでのPerlについて簡単に説明しています。</target>
        </trans-unit>
        <trans-unit id="083d82552ef9adb2b16dbbdc73ee6cb2d3adb7be" translate="yes" xml:space="preserve">
          <source>This document codifies the support and maintenance commitments that the Perl community should expect from Perl's developers:</source>
          <target state="translated">この文書は、Perl コミュニティが Perl の開発者に期待すべきサポートとメンテナンスの約束を成文化したものです。</target>
        </trans-unit>
        <trans-unit id="ee4356257bf892096131087eff39fae084e3b0fb" translate="yes" xml:space="preserve">
          <source>This document covers features supported by &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; (also known as &lt;code&gt;xsubpp&lt;/code&gt; ) 3.13_01.</source>
          <target state="translated">このドキュメントでは、 &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; （別名 &lt;code&gt;xsubpp&lt;/code&gt; ）3.13_01でサポートされている機能について説明します。</target>
        </trans-unit>
        <trans-unit id="6622e622368097560175e65713355ba452a435bc" translate="yes" xml:space="preserve">
          <source>This document covers features supported by &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; (also known as &lt;code&gt;xsubpp&lt;/code&gt;) 3.13_01.</source>
          <target state="translated">このドキュメントでは、 &lt;code&gt;ExtUtils::ParseXS&lt;/code&gt; （ &lt;code&gt;xsubpp&lt;/code&gt; とも呼ばれます）3.13_01でサポートされている機能について説明します。</target>
        </trans-unit>
        <trans-unit id="5d19d436c676e82c5de62fa2d93b31ad146ee5c7" translate="yes" xml:space="preserve">
          <source>This document defines a standard generic interface to the dynamic linking mechanisms available on many platforms. Its primary purpose is to implement automatic dynamic loading of Perl modules.</source>
          <target state="translated">この文書は、多くのプラットフォームで利用可能な動的リンク機構への標準的な汎用インターフェースを定義しています。その主な目的は、Perl モジュールの自動動的ロードを実装することです。</target>
        </trans-unit>
        <trans-unit id="f9a30c0ae237ad22360e4681ed6256da44062757" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Queue version 3.05</source>
          <target state="translated">この文書では、Thread::Queue バージョン 3.05 について説明します。</target>
        </trans-unit>
        <trans-unit id="672f477a960d9d97a53477316665e103fc6bcb55" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Queue version 3.14</source>
          <target state="translated">この文書では、Thread::Queue バージョン 3.14 について説明します。</target>
        </trans-unit>
        <trans-unit id="c32625e21916315b56d3d555dca5fa14529f5283" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Semaphore version 2.12</source>
          <target state="translated">この文書では Thread::Semaphore バージョン 2.12 について説明します。</target>
        </trans-unit>
        <trans-unit id="5e19eb2d41d244928aeeec5e1174bef98f47a6c8" translate="yes" xml:space="preserve">
          <source>This document describes Thread::Semaphore version 2.13</source>
          <target state="translated">この文書では Thread::Semaphore バージョン 2.13 について説明します。</target>
        </trans-unit>
        <trans-unit id="0a25c4c9828d0f58970f77b7ac6aa566b68c27f1" translate="yes" xml:space="preserve">
          <source>This document describes all backslash and escape sequences. After explaining the role of the backslash, it lists all the sequences that have a special meaning in Perl regular expressions (in alphabetical order), then describes each of them.</source>
          <target state="translated">この文書では、すべてのバックスラッシュとエスケープシーケンスについて説明します。バックスラッシュの役割を説明した後、Perl の正規表現で特別な意味を持つすべてのシーケンスを (アルファベット順に)リストアップし、それぞれについて説明しています。</target>
        </trans-unit>
        <trans-unit id="76ff3a8588f27b8cdd8cc7d51db810e080d05732" translate="yes" xml:space="preserve">
          <source>This document describes all of Perl's object-oriented (OO) features from the ground up. If you're just looking to write some object-oriented code of your own, you are probably better served by using one of the object systems from CPAN described in &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="translated">このドキュメントでは、Perlのオブジェクト指向（OO）機能のすべてをゼロから説明します。独自のオブジェクト指向コードを作成するだけの場合は、&lt;a href=&quot;perlootut&quot;&gt;perlootutで&lt;/a&gt;説明されているCPANのオブジェクトシステムのいずれかを使用するほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="50f134817136be6999dd57e5d22bbefe3d37d2f5" translate="yes" xml:space="preserve">
          <source>This document describes how Perl internally handles numeric values.</source>
          <target state="translated">このドキュメントでは、Perlが内部的にどのように数値を処理するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="013bbee9fd51be8302723130fd1f7000b8b03cb8" translate="yes" xml:space="preserve">
          <source>This document describes how to set up your host environment when attempting to build Perl for Android.</source>
          <target state="translated">このドキュメントでは、Android 用 Perl をビルドしようとする際のホスト環境の設定方法について説明します。</target>
        </trans-unit>
        <trans-unit id="8453dae2d904ec94b51a4ae275d589cad1fe0302" translate="yes" xml:space="preserve">
          <source>This document describes the behavior and implementation of the PerlIO abstraction described in &lt;a href=&quot;perlapio&quot;&gt;perlapio&lt;/a&gt; when &lt;code&gt;USE_PERLIO&lt;/code&gt; is defined.</source>
          <target state="translated">この文書では、行動とで説明したPerlIOを抽象化の実装について説明し&lt;a href=&quot;perlapio&quot;&gt;perlapio&lt;/a&gt;とき &lt;code&gt;USE_PERLIO&lt;/code&gt; が定義されています。</target>
        </trans-unit>
        <trans-unit id="a866d5af85544e7e4f21ddcd952a6d5892f7ea0f" translate="yes" xml:space="preserve">
          <source>This document describes the layout of the Perl source tree. If you're hacking on the Perl core, this will help you find what you're looking for.</source>
          <target state="translated">このドキュメントでは、Perl のソースツリーのレイアウトについて説明します。Perl のコアをハックしている場合、これは探しているものを見つけるのに役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="327aacce5b60fcb7f0492805932fe1dec841e5bb" translate="yes" xml:space="preserve">
          <source>This document describes threads version 2.01</source>
          <target state="translated">このドキュメントでは、スレッドのバージョン 2.01 について説明します。</target>
        </trans-unit>
        <trans-unit id="fa650f02e8b505bbf05cadb48d318189989235e1" translate="yes" xml:space="preserve">
          <source>This document describes threads version 2.25</source>
          <target state="translated">このドキュメントでは、スレッドのバージョン 2.25 について説明します。</target>
        </trans-unit>
        <trans-unit id="469ac48c0f559cb018049645e8c6431b0895b43b" translate="yes" xml:space="preserve">
          <source>This document describes threads::shared version 1.48</source>
          <target state="translated">このドキュメントでは threads::shared バージョン 1.48 について説明します。</target>
        </trans-unit>
        <trans-unit id="6bdb3bba8e288e79f3b2d24456bd5e0dd45bb944" translate="yes" xml:space="preserve">
          <source>This document describes threads::shared version 1.61</source>
          <target state="translated">このドキュメントでは threads::shared バージョン 1.61 について説明します。</target>
        </trans-unit>
        <trans-unit id="645bafb8d9dd20a3e1fad46cb6f3fa997de6c937" translate="yes" xml:space="preserve">
          <source>This document describes various features of FreeBSD that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">この文書では、Perl バージョン 5 (以下、Perl と略します)のコンパイルや実行に影響を与える FreeBSD の様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="321b1b1331ddd1b908bf07373d4048f86b3fa9c7" translate="yes" xml:space="preserve">
          <source>This document describes various features of HP's (formerly Compaq's, formerly Digital's) Unix operating system (Tru64) that will affect how Perl version 5 (hereafter just Perl) is configured, compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、単に Perl)の構成、コンパイル、および/または実行方法に影響を与える HP (旧 Compaq 社、旧 Digital 社)の Unix オペレーティング・システム (Tru64)のさまざまな機能について説明します。</target>
        </trans-unit>
        <trans-unit id="d268ac5a2d19120ce76c77eb58b90ecc6824f4a2" translate="yes" xml:space="preserve">
          <source>This document describes various features of HP's Unix operating system (HP-UX) that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、Perl)のコンパイルや実行方法に影響を与える HP の Unix オペレーティングシステム (HP-UX)の様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="2eba298a6bc6800370faf3fd81957d6c988953ae" translate="yes" xml:space="preserve">
          <source>This document describes various features of IBM's OS/400 operating system that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、Perl と略す)のコンパイルや実行方法に影響を与える IBM の OS/400 オペレーティングシステムの様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="1043854dc3d305d1c7397cad00b2c0693b02060a" translate="yes" xml:space="preserve">
          <source>This document describes various features of IBM's UNIX operating system AIX that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">この文書では、IBM の UNIX オペレーティングシステム AIX のさまざまな機能について説明します。</target>
        </trans-unit>
        <trans-unit id="0e732732feb0181fd46f9c9188d35cc9910b00cf" translate="yes" xml:space="preserve">
          <source>This document describes various features of Irix that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perlバージョン5(以下、Perl)のコンパイルや実行方法に影響を与えるIrixの様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="180f34cce99d47d99da56406605f0fb9ba8ddd90" translate="yes" xml:space="preserve">
          <source>This document describes various features of Linux that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、Perl と略す)のコンパイルや実行に影響を与える Linux の様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="cd165af2963c8b766b7c027487cbd05b923f2018" translate="yes" xml:space="preserve">
          <source>This document describes various features of OpenBSD that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、単に Perl)のコンパイルや実行方法に影響を与える OpenBSD の様々な機能について説明しています。</target>
        </trans-unit>
        <trans-unit id="bc5bdb1f6483dddcfcf934a3487da7243a97f3cc" translate="yes" xml:space="preserve">
          <source>This document describes various features of Sun's Solaris operating system that will affect how Perl version 5 (hereafter just perl) is compiled and/or runs. Some issues relating to the older SunOS 4.x are also discussed, though they may be out of date.</source>
          <target state="translated">この文書では、Perl バージョン 5 (以下、単に perl)のコンパイルや実行方法に影響を与える Sun の Solaris オペレーティングシステムのさまざまな機能について説明します。古い SunOS 4.x に関連するいくつかの問題についても、古いかもしれませんが議論されています。</target>
        </trans-unit>
        <trans-unit id="fedada57f7519909ad611f81430777abe7e58861" translate="yes" xml:space="preserve">
          <source>This document describes various features of Synology DSM operating system that will affect how Perl 5 (hereafter just Perl) is configured, compiled and/or runs. It has been compiled and verified by Johan Vromans for the Synology DS413 (QorIQ), with feedback from H.Merijn Brand (DS213, ARMv5tel and RS815, Intel Atom x64).</source>
          <target state="translated">このドキュメントでは、Perl 5 (以下、Perl)の設定、コンパイル、実行方法に影響を与える Synology DSM オペレーティングシステムのさまざまな機能について説明します。これは、H.Merijn Brand (DS213、ARMv5tel および RS815、Intel Atom x64)からのフィードバックを受けて、Synology DS413 (QorIQ)用に Johan Vromans によってコンパイルおよび検証されています。</target>
        </trans-unit>
        <trans-unit id="757712086ab3b4685f19333593ba82a0d48290a1" translate="yes" xml:space="preserve">
          <source>This document describes various features of the Symbian operating system that will affect how Perl version 5 (hereafter just Perl) is compiled and/or runs.</source>
          <target state="translated">このドキュメントでは、Perl バージョン 5 (以下、単に Perl)のコンパイルや実行の仕方に影響を与える Symbian オペレーティングシステムの様々な機能について説明します。</target>
        </trans-unit>
        <trans-unit id="fc69a8a87860da299a32df2a5c45e5d6bec2f8df" translate="yes" xml:space="preserve">
          <source>This document describes version 0.13 of encoding::warnings, released June 20, 2016.</source>
          <target state="translated">このドキュメントでは、2016年6月20日にリリースされたencoding::warningsのバージョン0.13について説明します。</target>
        </trans-unit>
        <trans-unit id="a4d121d0bfe8a3c1aa6015bd2c8760d53592dff9" translate="yes" xml:space="preserve">
          <source>This document describes version 0.18 of Locale::Maketext::Simple, released Septermber 8, 2006.</source>
          <target state="translated">この文書では、2006年9月8日にリリースされたLocale::Maketext::Simpleのバージョン0.18について説明します。</target>
        </trans-unit>
        <trans-unit id="5e0659e04f3d9f2056b337b0739a67684597732b" translate="yes" xml:space="preserve">
          <source>This document describes version 0.97 of Attribute::Handlers.</source>
          <target state="translated">このドキュメントでは、Attribute::Handlers のバージョン 0.97 について説明します。</target>
        </trans-unit>
        <trans-unit id="1605f5eccb40dc73f78c393c35eb29bd098cfb8f" translate="yes" xml:space="preserve">
          <source>This document describes version 1.0 of the</source>
          <target state="translated">この文書では</target>
        </trans-unit>
        <trans-unit id="2bf780daf1c016bbf9b8bf7bcea84f2fe69f237a" translate="yes" xml:space="preserve">
          <source>This document describes version 1.01 of Attribute::Handlers.</source>
          <target state="translated">このドキュメントでは、Attribute::Handlers のバージョン 1.01 について説明します。</target>
        </trans-unit>
        <trans-unit id="f171b9809b51bd5f94dba6d702fe833dee48017f" translate="yes" xml:space="preserve">
          <source>This document describes version 1.1 of the</source>
          <target state="translated">このドキュメントでは</target>
        </trans-unit>
        <trans-unit id="11f0cf5695cdecc42b0a56163e7c761e8f4e34ac" translate="yes" xml:space="preserve">
          <source>This document describes version 1.2 of the</source>
          <target state="translated">この文書では</target>
        </trans-unit>
        <trans-unit id="3fcccd87344b9b0105f05a1d3b78e62bdfe07a5e" translate="yes" xml:space="preserve">
          <source>This document describes version 1.3 of the</source>
          <target state="translated">この文書では</target>
        </trans-unit>
        <trans-unit id="06ad1cd2f74484f836eb1d92be8f1677db4c49d0" translate="yes" xml:space="preserve">
          <source>This document describes version 1.4 of the</source>
          <target state="translated">このドキュメントでは</target>
        </trans-unit>
        <trans-unit id="d70b159fef5698128cc2ba778d3b9f8c4402065a" translate="yes" xml:space="preserve">
          <source>This document describes version 2 of the CPAN distribution metadata specification, also known as the &quot;CPAN Meta Spec&quot;.</source>
          <target state="translated">本文書では、「CPAN メタ仕様」とも呼ばれる CPAN 配布メタデータ仕様のバージョン 2 について説明します。</target>
        </trans-unit>
        <trans-unit id="00291624b11a3514d125571e1eabaca275507a74" translate="yes" xml:space="preserve">
          <source>This document describes version 2.09 of File::Path, released 2013-01-17.</source>
          <target state="translated">このドキュメントでは、File::Path のバージョン 2.09 (2013-01-17 リリース)について説明します。</target>
        </trans-unit>
        <trans-unit id="e958fa3bffae7851375960acacad749b89480be8" translate="yes" xml:space="preserve">
          <source>This document differs from &lt;a href=&quot;perlnewmod&quot;&gt;perlnewmod&lt;/a&gt; in that it is a style guide rather than a tutorial on creating CPAN modules. It provides a checklist against which modules can be compared to determine whether they conform to best practice, without necessarily describing in detail how to achieve this.</source>
          <target state="translated">このドキュメントは、CPANモジュールの作成に関するチュートリアルではなく、スタイルガイドであるという点で&lt;a href=&quot;perlnewmod&quot;&gt;perlnewmod&lt;/a&gt;とは異なります。これは、どのようにモジュールを比較して、ベストプラクティスに準拠しているかを判断するためのチェックリストを提供しますが、これを達成する方法を詳細に説明する必要はありません。</target>
        </trans-unit>
        <trans-unit id="f6d0bfb69bb5025df2e411b7c26b2866134bc607" translate="yes" xml:space="preserve">
          <source>This document explains how Perl development works. It includes details about the Perl 5 Porters email list, the Perl repository, the Perl bug tracker, patch guidelines, and commentary on Perl development philosophy.</source>
          <target state="translated">このドキュメントでは、Perl の開発がどのように行われているかを説明しています。Perl 5 Porters メールリスト、Perl リポジトリ、Perl バグトラッカー、パッチガイドライン、Perl 開発哲学の解説などの詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="1c365d03a0d07def2d5f697a7dff266e86bfcaee" translate="yes" xml:space="preserve">
          <source>This document explains how Perl development works. It includes details about the Perl 5 Porters email list, the Perl repository, the Perlbug bug tracker, patch guidelines, and commentary on Perl development philosophy.</source>
          <target state="translated">このドキュメントでは、Perl の開発がどのように行われているかを説明しています。Perl 5 Porters メールリスト、Perl リポジトリ、Perlbug バグトラッカー、パッチガイドライン、Perl 開発哲学の解説などの詳細が含まれています。</target>
        </trans-unit>
        <trans-unit id="1a4e728f85569353c5be0c8060d949669e83dbf4" translate="yes" xml:space="preserve">
          <source>This document gives a condensed list of the features available in the POSIX module. Consult your operating system's manpages for general information on most features. Consult &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for functions which are noted as being identical or almost identical to Perl's builtin functions.</source>
          <target state="translated">このドキュメントは、POSIXモジュールで利用可能な機能の要約リストを提供します。ほとんどの機能の一般的な情報については、オペレーティングシステムのマンページを参照してください。Perlの組み込み関数と同一またはほぼ同一であると記載されている関数については、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;に問い合わせてください。</target>
        </trans-unit>
        <trans-unit id="448289ec7a46caaf1d68d5b7cd3ab508bea55402" translate="yes" xml:space="preserve">
          <source>This document gives a condensed list of the features available in the POSIX module. Consult your operating system's manpages for general information on most features. Consult &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for functions which are noted as being identical to Perl's builtin functions.</source>
          <target state="translated">このドキュメントは、POSIXモジュールで利用可能な機能の要約リストを提供します。ほとんどの機能に関する一般的な情報については、オペレーティングシステムのマンページを参照してください。ご相談&lt;a href=&quot;perlfunc&quot;&gt;はperlfunc&lt;/a&gt; Perlの組み込み機能と同一であるとして注目されている機能のために。</target>
        </trans-unit>
        <trans-unit id="b3a9755b0632840622eb25f31414e4542c2feca7" translate="yes" xml:space="preserve">
          <source>This document gives a general idea of Unicode and how to use Unicode in Perl. See &lt;a href=&quot;#Further-Resources&quot;&gt;&quot;Further Resources&quot;&lt;/a&gt; for references to more in-depth treatments of Unicode.</source>
          <target state="translated">このドキュメントでは、Unicodeの概要とPerlでのUnicodeの使用方法について説明します。Unicodeのより詳細な取り扱いについては、&lt;a href=&quot;#Further-Resources&quot;&gt;「その他のリソース」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2fce74951001e7bfa538197dd8bb5ec9f0e07bc5" translate="yes" xml:space="preserve">
          <source>This document gives a general idea of Unicode and how to use Unicode in Perl. See &lt;a href=&quot;#Further-Resources&quot;&gt;Further Resources&lt;/a&gt; for references to more in-depth treatments of Unicode.</source>
          <target state="translated">このドキュメントでは、Unicodeの一般的な考え方と、UnicodeをPerlで使用する方法について説明します。Unicodeのより詳細な処理の参照については、&lt;a href=&quot;#Further-Resources&quot;&gt;その他のリソース&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a55afa937d8de565fbacea117f04c55c4f3d03c" translate="yes" xml:space="preserve">
          <source>This document gives instructions for building Perl for RISC OS. It is complicated by the need to cross compile. There is a binary version of perl available from &lt;a href=&quot;http://www.cp15.org/perl/&quot;&gt;http://www.cp15.org/perl/&lt;/a&gt; which you may wish to use instead of trying to compile it yourself.</source>
          <target state="translated">このドキュメントでは、RISC OS用のPerlを構築する手順について説明します。クロスコンパイルする必要があるため、複雑です。&lt;a href=&quot;http://www.cp15.org/perl/&quot;&gt;http://www.cp15.org/perl/&lt;/a&gt;から入手できるperlのバイナリバージョンがあり、自分でコンパイルする代わりに使用することができます。</target>
        </trans-unit>
        <trans-unit id="15f232a362787f4ceadbadf19dad93be195a4a8a" translate="yes" xml:space="preserve">
          <source>This document gives you some suggestions about how to go about writing Perl modules, preparing them for distribution, and making them available via CPAN.</source>
          <target state="translated">このドキュメントでは、Perl モジュールの書き方、配布の準備、CPAN を通じて利用できるようにする方法について、いくつかの提案を提供しています。</target>
        </trans-unit>
        <trans-unit id="132f8081c1f83d30c54e1dd1f8a6c29026e0459f" translate="yes" xml:space="preserve">
          <source>This document has provided several way to go about identifying hot-spots, and checking whether any modifications have improved the runtime of the code.</source>
          <target state="translated">このドキュメントでは、ホットスポットを特定し、変更がコードの実行時間を改善したかどうかをチェックするためのいくつかの方法を提供しています。</target>
        </trans-unit>
        <trans-unit id="1d1186d2059259c57e212c2e5f26480c6a04dbbf" translate="yes" xml:space="preserve">
          <source>This document is about using Pod::Simple to write a Pod processor, generally a Pod formatter. If you just want to know about using an existing Pod formatter, instead see its documentation and see also the docs in &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、Pod :: Simpleを使用してポッドプロセッサ（通常はポッドフォーマッタ）を作成する方法について説明しています。既存のポッドフォーマッタの使用について知りたいだけの場合は、代わりにそのドキュメントを参照し、&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="2f9e9ade072c3d9b2906bfd078f37006fde1b348" translate="yes" xml:space="preserve">
          <source>This document is an attempt to shine some light on the guts of the regex engine and how it works. The regex engine represents a significant chunk of the perl codebase, but is relatively poorly understood. This document is a meagre attempt at addressing this situation. It is derived from the author's experience, comments in the source code, other papers on the regex engine, feedback on the perl5-porters mail list, and no doubt other places as well.</source>
          <target state="translated">このドキュメントは、regex エンジンの根幹とそれがどのように動作するのかに光を当てる試みです。regex エンジンは perl のコードベースのかなりの部分を占めていますが、 比較的よく理解されていません。このドキュメントは、この状況に対処するためのささやかな試みです。著者の経験、ソースコードのコメント、regex エンジンに関する他の論文、perl5-porters メーリングリストのフィードバック、そして間違いなく他の場所から得たものです。</target>
        </trans-unit>
        <trans-unit id="e2f799b102440b11497f30f8301310792802f29f" translate="yes" xml:space="preserve">
          <source>This document is authored and maintained by Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;.</source>
          <target state="translated">このドキュメントは、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;によって作成および管理されています。</target>
        </trans-unit>
        <trans-unit id="deb0c7f47e4494d30a1aab35b9ec321b01a2ec44" translate="yes" xml:space="preserve">
          <source>This document is available under the same terms as Perl itself. Code examples in all the perlfaq documents are in the public domain. Use them as you see fit (and at your own risk with no warranty from anyone).</source>
          <target state="translated">このドキュメントはPerl自体と同じ条件で利用可能です。すべての perlfaq ドキュメントのコード例はパブリックドメインにあります。お好きなように使ってください(誰からも保証されていないので、自己責任で)。</target>
        </trans-unit>
        <trans-unit id="3ad8de5a753a60df1918818ee7a3cda366409476" translate="yes" xml:space="preserve">
          <source>This document is broken into two sections; those methods that are most useful to the end-developer, and those methods for anyone wishing to subclass or get very familiar with &lt;code&gt;autodie::exception&lt;/code&gt;.</source>
          <target state="translated">このドキュメントは2つのセクションに分かれています。エンド開発者にとって最も有用なメソッド、およびサブクラス化するか、 &lt;code&gt;autodie::exception&lt;/code&gt; に精通したい人のためのメソッド。</target>
        </trans-unit>
        <trans-unit id="931cd9f92a3e4b725c73c5f241d6c52b01e63f35" translate="yes" xml:space="preserve">
          <source>This document is detailed notes on the Pod markup language. Most people will only have to read &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt; to know how to write in Pod, but this document may answer some incidental questions to do with parsing and rendering Pod.</source>
          <target state="translated">このドキュメントは、ポッドマークアップ言語に関する詳細なメモです。ほとんどの人は、ポッドでの記述方法を知るために&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;を読むだけで済みますが、このドキュメントでは、ポッドの解析とレンダリングに関する付随的な質問に回答する場合があります。</target>
        </trans-unit>
        <trans-unit id="030bf2a8075ca167ab3cef3833507c2f42453664" translate="yes" xml:space="preserve">
          <source>This document is distributed with the libnet distribution, and is also available on the libnet web page at</source>
          <target state="translated">このドキュメントは libnet ディストリビューションで配布されており、libnet のウェブページでも公開されています。</target>
        </trans-unit>
        <trans-unit id="bf5499e713f269332b5a031b1d5ec104878d26d5" translate="yes" xml:space="preserve">
          <source>This document is intended to give you a quick overview of the Perl programming language, along with pointers to further documentation. It is intended as a &quot;bootstrap&quot; guide for those who are new to the language, and provides just enough information for you to be able to read other peoples' Perl and understand roughly what it's doing, or write your own simple scripts.</source>
          <target state="translated">この文書は、Perl プログラミング言語の簡単な概要と、さらなる文書へのポインタを提供することを意図しています。また、他の人の Perl を読んで何をしているのかを大まかに理解したり、自分で簡単なスクリプトを書いたりできるようになるための十分な情報を提供しています。</target>
        </trans-unit>
        <trans-unit id="04d450fbf5761325924f000d871533277846798f" translate="yes" xml:space="preserve">
          <source>This document is maintained by Jan Dubois.</source>
          <target state="translated">この文書はJan Duboisによって管理されています。</target>
        </trans-unit>
        <trans-unit id="6ad1ca1a9c1e0e6df1be4b460cdb832dc533d65a" translate="yes" xml:space="preserve">
          <source>This document is meant to be a detailed but understandable treatment of the many different sorts of data structures you might want to develop. It should also serve as a cookbook of examples. That way, when you need to create one of these complex data structures, you can just pinch, pilfer, or purloin a drop-in example from here.</source>
          <target state="translated">この文書は、あなたが開発したいと思うかもしれない様々な種類のデータ構造について、詳細に、しかし理解しやすいように説明することを意図しています。また、例題のクックブックとしての役割も果たします。そうすれば、これらの複雑なデータ構造を作成する必要があるときに、ここからドロップインの例をつまんだり、盗み取ったり、盗み出したりすることができます。</target>
        </trans-unit>
        <trans-unit id="9bf997dd7f7e98ee160d1fffa9d041813ac9f4bb" translate="yes" xml:space="preserve">
          <source>This document is meant to help you to find out what constitutes portable Perl code. That way once you make a decision to write portably, you know where the lines are drawn, and you can stay within them.</source>
          <target state="translated">この文書は、何が移植性のある Perl コードを構成するのかを知るのに役立つことを目的としています。そうすれば、移植性のあるコードを書くことを決めたときに、どこに線が引かれているかを知ることができ、その線の範囲内に留まることができるようになります。</target>
        </trans-unit>
        <trans-unit id="9d9f3d95216c84aa89657f351bb6eefc71ea99a0" translate="yes" xml:space="preserve">
          <source>This document is provided in the hope that it will be useful, but without any warranty; without even the implied warranty of accuracy, authoritativeness, completeness, merchantability, or fitness for a particular purpose.</source>
          <target state="translated">この文書は、有用なものであることを期待して提供されていますが、正確性、権威性、完全性、商品性、特定の目的への適合性についての暗黙の保証もなく、いかなる保証もありません。</target>
        </trans-unit>
        <trans-unit id="c3a1d5c913f755b58160ddd4ac8b4f8158d38b0a" translate="yes" xml:space="preserve">
          <source>This document is the master document which records all written policies about how the Perl 5 Porters collectively develop and maintain the Perl core.</source>
          <target state="translated">この文書は、Perl 5 移植担当者がどのようにして Perl コアをまとめて開発し、維持するかについて書かれたすべてのポリシーを記録したマスター文書です。</target>
        </trans-unit>
        <trans-unit id="6445b4e91fdc1237d3a1bc4a31d98919bdef331e" translate="yes" xml:space="preserve">
          <source>This document lists the current and past experimental features in the perl core. Although all of these are documented with their appropriate topics, this succinct listing gives you an overview and basic facts about their status.</source>
          <target state="translated">この文書では、Perl コアの現在および過去の実験的な機能をリストアップしています。これらはすべて適切なトピックで文書化されていますが、 この簡潔なリストでは、それらの状態についての概要と基本的な事実を知ることができます。</target>
        </trans-unit>
        <trans-unit id="e04379014fdbc8385dc766fdec2dc2ab609657d0" translate="yes" xml:space="preserve">
          <source>This document may be distributed under the same terms as Perl itself.</source>
          <target state="translated">この文書は Perl 自体と同じ条件で配布されることがあります。</target>
        </trans-unit>
        <trans-unit id="68809e455146d4d0b2eb575625c0befbf01b3e91" translate="yes" xml:space="preserve">
          <source>This document may be incomplete in some respects.</source>
          <target state="translated">この文書は、一部不完全な点があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="0888583782e9e5c64acf12be9464dec48a946068" translate="yes" xml:space="preserve">
          <source>This document merely lists all available properties and does not attempt to explain what each property really means. There is a brief description of each Perl extension; see &lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;&quot;Other Properties&quot; in perlunicode&lt;/a&gt; for more information on these. There is some detail about Blocks, Scripts, General_Category, and Bidi_Class in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, but to find out about the intricacies of the official Unicode properties, refer to the Unicode standard. A good starting place is &lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、使用可能なすべてのプロパティを一覧表示するだけであり、各プロパティの実際の意味を説明するものではありません。各Perl拡張機能の簡単な説明があります。これらの詳細について&lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;は、perlunicodeの「その他のプロパティ」を&lt;/a&gt;参照してください。そこでのブロック、スクリプト、General_Category、およびBidi_Classに関するいくつかの詳細で&lt;a href=&quot;perlunicode&quot;&gt;はperlunicodeは&lt;/a&gt;、しかし、Unicode標準を参照して、公式のUnicodeプロパティの複雑さを知るために。出発点としては&lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;が適しています。</target>
        </trans-unit>
        <trans-unit id="d40e2bd179554762718d2c8f40e4558baafd8315" translate="yes" xml:space="preserve">
          <source>This document merely lists all available properties and does not attempt to explain what each property really means. There is a brief description of each Perl extension; see &lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;Other Properties in perlunicode&lt;/a&gt; for more information on these. There is some detail about Blocks, Scripts, General_Category, and Bidi_Class in &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, but to find out about the intricacies of the official Unicode properties, refer to the Unicode standard. A good starting place is &lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;.</source>
          <target state="translated">このドキュメントでは、利用可能なすべてのプロパティを一覧表示するだけで、各プロパティが実際に何を意味するかを説明することはしません。各Perl拡張の簡単な説明があります。これらの詳細について&lt;a href=&quot;perlunicode#Other-Properties&quot;&gt;は、perlunicodeの他のプロパティを&lt;/a&gt;参照してください。そこでのブロック、スクリプト、General_Category、およびBidi_Classに関するいくつかの詳細で&lt;a href=&quot;perlunicode&quot;&gt;はperlunicodeは&lt;/a&gt;、しかし、Unicode標準を参照して、公式のUnicodeプロパティの複雑さを知るために。良い出発点は&lt;a href=&quot;http://www.unicode.org/reports/tr44/&quot;&gt;http://www.unicode.org/reports/tr44/&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="69e6772a5d46653631303f536faddc78ecd15c3a" translate="yes" xml:space="preserve">
          <source>This document mostly explains the</source>
          <target state="translated">この文書では、ほとんどの場合、以下のように説明されています。</target>
        </trans-unit>
        <trans-unit id="a7ddd5955e611e8402df676dc922c52fe96687d9" translate="yes" xml:space="preserve">
          <source>This document needs a rewrite that separates the tutorial content from the reference content.</source>
          <target state="translated">このドキュメントでは、チュートリアルの内容とリファレンスの内容を分離するように書き直す必要があります。</target>
        </trans-unit>
        <trans-unit id="c5434f0b9e2b7cf484cc38556a1c3be222c03edd" translate="yes" xml:space="preserve">
          <source>This document provides a general overview of the capabilities and limitations of the fork() emulation. Note that the issues discussed here are not applicable to platforms where a real fork() is available and Perl has been configured to use it.</source>
          <target state="translated">このドキュメントでは、fork()エミュレーションの機能と制限についての一般的な概要を説明します。ここで議論されている問題は、実際の fork()が利用可能で、Perl がそれを使用するように設定されているプラットフォームには適用されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="93c5711ad21bddf8f27384e848494d1a512f01be" translate="yes" xml:space="preserve">
          <source>This document provides a reference for Perl's object orientation features. If you're looking for an introduction to object-oriented programming in Perl, please see &lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、Perlのオブジェクト指向機能のリファレンスを提供します。Perlでのオブジェクト指向プログラミングの紹介を探している場合は、&lt;a href=&quot;perlootut&quot;&gt;perlootut&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="46a94276417126d2ba57635546eac62791e072d3" translate="yes" xml:space="preserve">
          <source>This document provides an introduction to object-oriented programming in Perl. It begins with a brief overview of the concepts behind object oriented design. Then it introduces several different OO systems from &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org&quot;&gt;CPAN&lt;/a&gt; which build on top of what Perl provides.</source>
          <target state="translated">このドキュメントでは、Perlでのオブジェクト指向プログラミングの概要を説明します。まず、オブジェクト指向設計の背後にある概念の概要について説明します。次に、Perlが提供するものの上に構築された&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fsearch.cpan.org&quot;&gt;CPANの&lt;/a&gt;いくつかの異なるOOシステムを紹介します。</target>
        </trans-unit>
        <trans-unit id="32fbffb9ed2f7371e868fa4e9fc51a003e559b60" translate="yes" xml:space="preserve">
          <source>This document provides an introduction to object-oriented programming in Perl. It begins with a brief overview of the concepts behind object oriented design. Then it introduces several different OO systems from &lt;a href=&quot;https://www.cpan.org&quot;&gt;CPAN&lt;/a&gt; which build on top of what Perl provides.</source>
          <target state="translated">このドキュメントでは、Perlでのオブジェクト指向プログラミングの概要を説明します。それは、オブジェクト指向設計の背後にある概念の簡単な概要から始まります。次に、Perlが提供するものの上に構築された&lt;a href=&quot;https://www.cpan.org&quot;&gt;CPAN&lt;/a&gt;からのいくつかの異なるOOシステムを紹介します。</target>
        </trans-unit>
        <trans-unit id="6876a82e12e5ab947f419b2c224d987985e1ad19" translate="yes" xml:space="preserve">
          <source>This document provides an overview of how the Perl interpreter works at the level of C code, along with pointers to the relevant C source code files.</source>
          <target state="translated">このドキュメントでは、Perl インタプリタが C コードレベルでどのように動作するかの概要と、関連する C ソースコードファイルへのポインタを提供します。</target>
        </trans-unit>
        <trans-unit id="37c6cecf4b6aa297d30eab95a37418764fe60217" translate="yes" xml:space="preserve">
          <source>This document provides details on using git to develop Perl. If you are just interested in working on a quick patch, see &lt;a href=&quot;perlhack&quot;&gt;perlhack&lt;/a&gt; first. This document is intended for people who are regular contributors to Perl, including those with write access to the git repository.</source>
          <target state="translated">このドキュメントでは、gitを使用してPerlを開発する方法について詳しく説明します。クイックパッチの作成に興味がある場合は、最初に&lt;a href=&quot;perlhack&quot;&gt;perlhackを&lt;/a&gt;参照してください。このドキュメントは、gitリポジトリへの書き込みアクセス権を持つ人を含め、Perlに定期的に寄稿している人を対象としています。</target>
        </trans-unit>
        <trans-unit id="7278c04f4b33c2701db9eb4b58232b8395cf3c28" translate="yes" xml:space="preserve">
          <source>This document provides information about the portion of the Unicode database that deals with character properties, that is the portion that is defined on single code points. (&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;&quot;Other information in the Unicode data base&quot;&lt;/a&gt; below briefly mentions other data that Unicode provides.)</source>
          <target state="translated">このドキュメントは、文字プロパティを処理するUnicodeデータベースの部分、つまり単一のコードポイントで定義される部分に関する情報を提供します。（以下の&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;「Unicodeデータベースのその他の情報」では&lt;/a&gt;、Unicodeが提供するその他のデータについて簡単に説明しています。）</target>
        </trans-unit>
        <trans-unit id="98ef42b4ebd0391f6b1eb2c007891c9540cce7bb" translate="yes" xml:space="preserve">
          <source>This document provides information about the portion of the Unicode database that deals with character properties, that is the portion that is defined on single code points. (&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;Other information in the Unicode data base&lt;/a&gt; below briefly mentions other data that Unicode provides.)</source>
          <target state="translated">このドキュメントは、文字プロパティを処理するUnicodeデータベースの部分、つまり単一のコードポイントで定義される部分に関する情報を提供します。（以下&lt;a href=&quot;#Other-information-in-the-Unicode-data-base&quot;&gt;のUnicodeデータベースのその他の情報では&lt;/a&gt;、Unicodeが提供するその他のデータについて簡単に説明しています。）</target>
        </trans-unit>
        <trans-unit id="e7cfd37a5d8539271a047f292c9b12d8fd7d71db" translate="yes" xml:space="preserve">
          <source>This document reconstructs the history of the CPAN Meta Spec based on change logs, repository commit messages and the published HTML files. In some cases, particularly prior to version 1.2, the exact version when certain fields were introduced or changed is inconsistent between sources. When in doubt, the published HTML files for versions 1.0 to 1.4 as they existed when version 2 was developed are used as the definitive source.</source>
          <target state="translated">このドキュメントでは、変更ログ、リポジトリのコミットメッセージ、公開されているHTMLファイルに基づいて、CPANメタ仕様の歴史を再構築します。特にバージョン1.2以前では、特定のフィールドが導入または変更された正確なバージョンがソース間で矛盾している場合があります。疑問がある場合は、バージョン2が開発されたときに存在したバージョン1.0から1.4までの公開されたHTMLファイルが決定的なソースとして使用されます。</target>
        </trans-unit>
        <trans-unit id="b2a79746685de57fddf566ba23eb18f1694b69ba" translate="yes" xml:space="preserve">
          <source>This document serves as both a specification for anyone wishing to implement the DynaLoader for a new platform and as a guide for anyone wishing to use the DynaLoader directly in an application.</source>
          <target state="translated">このドキュメントは、新しいプラットフォームにDynaLoaderを実装したい人のための仕様書であり、アプリケーションでDynaLoaderを直接使いたい人のためのガイド書でもあります。</target>
        </trans-unit>
        <trans-unit id="4c2fd7fb88b1605d6c1c01cd882956329e66498d" translate="yes" xml:space="preserve">
          <source>This document takes you through a simple patch example.</source>
          <target state="translated">このドキュメントでは、簡単なパッチの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="482b84044bf12cbb74ce5534dc67232a2bb4bcd3" translate="yes" xml:space="preserve">
          <source>This document varies from difficult to understand to completely and utterly opaque. The wandering prose riddled with jargon is hard to fathom in several places.</source>
          <target state="translated">この文書は、理解しにくいものから、完全に不透明なものまで様々である。専門用語が散りばめられた流浪の散文は、いくつかの場所で理解するのが難しい。</target>
        </trans-unit>
        <trans-unit id="e494f5a4ef902fd5cb4de9dfa1a90e73e0fc46e2" translate="yes" xml:space="preserve">
          <source>This document walks through the creation of a small patch to Perl's C code. If you're just getting started with Perl core hacking, this will help you understand how it works.</source>
          <target state="translated">このドキュメントでは、Perl の C コードへの小さなパッチの作成について説明します。Perl のコアハッキングを始めたばかりの方には、これがどのように動作するのかを理解するのに役立つでしょう。</target>
        </trans-unit>
        <trans-unit id="6e368b4b82da174b5c34f4ad74472953966358bf" translate="yes" xml:space="preserve">
          <source>This document was created in February, 2011, and the last major revision was in February, 2013.</source>
          <target state="translated">この文書は2011年2月に作成され、最後の大幅な改訂は2013年2月に行われました。</target>
        </trans-unit>
        <trans-unit id="8a3b26fb452c67444e8240d5b8d2d39b95224d76" translate="yes" xml:space="preserve">
          <source>This document was last revised 8-DEC-2007, for Perl 5.10.0</source>
          <target state="translated">このドキュメントの最終更新日は 2007 年 7 月 8 日、Perl 5.10.0 です。</target>
        </trans-unit>
        <trans-unit id="2e05bb5aa5ec020b9cd05ba44bd1e5b7d8efd585" translate="yes" xml:space="preserve">
          <source>This document was last revised on 13-Oct-1998, for Perl 5.004, 5.005, and 5.6.0.</source>
          <target state="translated">この文書は、Perl 5.004,5.005,5.6.0用に1998年10月13日に最終改訂されました。</target>
        </trans-unit>
        <trans-unit id="e89c4ac20e63934f15f4f06f3bdf35dc35e9054b" translate="yes" xml:space="preserve">
          <source>This document was originally written by David Fiander for the 5.005 release of Perl.</source>
          <target state="translated">このドキュメントは元々、Perl の 5.005 リリースのために David Fiander によって書かれたものです。</target>
        </trans-unit>
        <trans-unit id="44116b950aea8406dc1d009e3e7e8df16d0f1901" translate="yes" xml:space="preserve">
          <source>This document was originally written by Nathan Torkington, and is maintained by the perl5-porters mailing list.</source>
          <target state="translated">このドキュメントは Nathan Torkington によって書かれたもので、 perl5-porters メーリングリストで管理されています。</target>
        </trans-unit>
        <trans-unit id="cb57f1783ae5d9d11a07aa4ee9a4142c141dd869" translate="yes" xml:space="preserve">
          <source>This document was originally written by Thomas Dorner for the 5.005 release of Perl.</source>
          <target state="translated">このドキュメントは、Perl の 5.005 リリースのために Thomas Dorner によって書かれたものです。</target>
        </trans-unit>
        <trans-unit id="8245e0ace1fc709b9c52b2d684fbab4d872b4b6b" translate="yes" xml:space="preserve">
          <source>This document was podified for the 5.005_03 release of Perl 11 March 1999.</source>
          <target state="translated">この文書は、1999年3月11日のPerlの5.005_03リリース用にポッド化されました。</target>
        </trans-unit>
        <trans-unit id="01c73c6cbc6ea7a7507692f73f286583700f23f4" translate="yes" xml:space="preserve">
          <source>This document was podified for the 5.6 release of perl 11 July 2000.</source>
          <target state="translated">この文書は、2000年7月11日のperl 5.6リリース用にポッド化されました。</target>
        </trans-unit>
        <trans-unit id="e3d3763f0de441b0bf953c53b8f14562b8c6d91b" translate="yes" xml:space="preserve">
          <source>This document was revised 09-October-1996 for Perl 5.003_7.</source>
          <target state="translated">この文書は、Perl 5.003_7用に1996年10月9日に改訂されました。</target>
        </trans-unit>
        <trans-unit id="1ae9aedfb6e910ab590ab6a48004a6cd92829aac" translate="yes" xml:space="preserve">
          <source>This document will help you Configure, build, test and install Perl on BS2000 in the POSIX subsystem.</source>
          <target state="translated">このドキュメントは、POSIXサブシステムのBS2000にPerlを設定、構築、テスト、インストールするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ecb2db0bdd80184dad93c70d1f7773c61d926757" translate="yes" xml:space="preserve">
          <source>This document will help you Configure, build, test and install Perl on OS/390 (aka z/OS) Unix System Services.</source>
          <target state="translated">このドキュメントでは、OS/390 (別名 z/OS)の Unix システムサービス上で Perl を設定、ビルド、テスト、インストールする方法を説明します。</target>
        </trans-unit>
        <trans-unit id="b14dd21b17eb4778756f16a28286f3080a5b52fc" translate="yes" xml:space="preserve">
          <source>This document will help you configure, make, test and install Perl on Cygwin. This document also describes features of Cygwin that will affect how Perl behaves at runtime.</source>
          <target state="translated">このドキュメントは、Cygwin上でPerlを設定、作成、テスト、インストールするのに役立ちます。このドキュメントでは、実行時のPerlの動作に影響を与えるCygwinの機能についても説明しています。</target>
        </trans-unit>
        <trans-unit id="4b25a8a1d43deec5996faad1ce1066a1b7f65307" translate="yes" xml:space="preserve">
          <source>This document will help you learn the best way to go about hacking on the Perl core C code. It covers common problems, debugging, profiling, and more.</source>
          <target state="translated">このドキュメントは、Perl のコア C コードをハッキングするための最良の方法を学ぶのに役立ちます。一般的な問題、デバッグ、プロファイリングなどをカバーしています。</target>
        </trans-unit>
        <trans-unit id="bb8154762cb7fc1e9eea1d2d14aa355d5fb6add7" translate="yes" xml:space="preserve">
          <source>This document will try to discuss what alternatives for the deprecated features are available.</source>
          <target state="translated">このドキュメントでは、非推奨の機能の代替案がどのようなものがあるかを議論します。</target>
        </trans-unit>
        <trans-unit id="7b1ceac6a2e862b1ba010e29c7ba5c554256d9b3" translate="yes" xml:space="preserve">
          <source>This documentation describes version 0.08.</source>
          <target state="translated">このドキュメントでは、バージョン 0.08 について説明します。</target>
        </trans-unit>
        <trans-unit id="bb13bb5cc25da0a84b0ee6fe56550c8fa997e8a4" translate="yes" xml:space="preserve">
          <source>This documentation is for people who want to download CPAN modules and install them on their own computer.</source>
          <target state="translated">このドキュメントは、CPANモジュールをダウンロードして自分のコンピュータにインストールしたい人のためのものです。</target>
        </trans-unit>
        <trans-unit id="f9807e2f281735ce8b4db75a087a60d39d5eaabb" translate="yes" xml:space="preserve">
          <source>This documentation is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはフリーソフトウェアです。</target>
        </trans-unit>
        <trans-unit id="4e1e03b9948de51dc9fc37899fb9224e953fca3a" translate="yes" xml:space="preserve">
          <source>This documentation is free; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはフリーです。Perl 自体と同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="cceba8951b48c0df6a7d7a78ae98404b2be1a5f6" translate="yes" xml:space="preserve">
          <source>This documentation is maintained as part of the podlators distribution. The current version is always available from its web site at &amp;lt;&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;&amp;gt;.</source>
          <target state="translated">このドキュメントは、ポッドレーターの配布の一部として維持されます。現在のバージョンは、常に&amp;lt; &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt; &amp;gt;のWebサイトから入手できます。</target>
        </trans-unit>
        <trans-unit id="14f1ce292bd49cd739fa4dcd484fe158f74b2d38" translate="yes" xml:space="preserve">
          <source>This documentation is maintained as part of the podlators distribution. The current version is always available from its web site at &lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;.</source>
          <target state="translated">このドキュメントは、podlatorsディストリビューションの一部として維持されています。現在のバージョンは、&lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https：//www.eyrie.org/~eagle/software/podlators/の&lt;/a&gt;Webサイトからいつでも入手できます。</target>
        </trans-unit>
        <trans-unit id="ee59b544a64dcf3a8c36474bf7a745c77abd72ed" translate="yes" xml:space="preserve">
          <source>This documentation provided by Tels &amp;lt;nospam-abuse@bloodgate.com&amp;gt; 2007.</source>
          <target state="translated">このドキュメントはTels &amp;lt;nospam-abuse@bloodgate.com&amp;gt; 2007によって提供されました。</target>
        </trans-unit>
        <trans-unit id="d579dc02247e710bddf4fd80263160b958f95883" translate="yes" xml:space="preserve">
          <source>This does a &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; check on the argument provided. The &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; of the argument must be the same as the &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; of the default value for this check to pass.</source>
          <target state="translated">これは、指定された引数に対して &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref()&lt;/a&gt;&lt;/code&gt; チェックを行います。 &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 引数のは同じでなければなりません &lt;code&gt;&lt;a href=&quot;../functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; を渡すには、このチェックのデフォルト値の。</target>
        </trans-unit>
        <trans-unit id="4b5cd3d183133e44d31dceabaeef24f14bc16309" translate="yes" xml:space="preserve">
          <source>This does a &lt;code&gt;ref()&lt;/code&gt; check on the argument provided. The &lt;code&gt;ref&lt;/code&gt; of the argument must be the same as the &lt;code&gt;ref&lt;/code&gt; of the default value for this check to pass.</source>
          <target state="translated">これにより、指定された引数に対して &lt;code&gt;ref()&lt;/code&gt; チェックが実行されます。 &lt;code&gt;ref&lt;/code&gt; 引数のは同じでなければなりません &lt;code&gt;ref&lt;/code&gt; を渡すには、このチェックのデフォルト値の。</target>
        </trans-unit>
        <trans-unit id="dd3d5cb2973c8eb59f68a70871cc8bd14d30329a" translate="yes" xml:space="preserve">
          <source>This does not check for subtypes or method overloading. Use &lt;code&gt;sv_isa_sv&lt;/code&gt; to verify an inheritance relationship in the same way as the &lt;code&gt;isa&lt;/code&gt; operator by respecting any &lt;code&gt;isa()&lt;/code&gt; method overloading; or &lt;code&gt;sv_derived_from_sv&lt;/code&gt; to test directly on the actual object type.</source>
          <target state="translated">これは、サブタイプやメソッドのオーバーロードをチェックしません。 &lt;code&gt;sv_isa_sv&lt;/code&gt; を使用して、 &lt;code&gt;isa()&lt;/code&gt; メソッドのオーバーロードを尊重することにより、 &lt;code&gt;isa&lt;/code&gt; 演算子と同じ方法で継承関係を検証します。または &lt;code&gt;sv_derived_from_sv&lt;/code&gt; を使用して、実際のオブジェクトタイプを直接テストします。</target>
        </trans-unit>
        <trans-unit id="fe9382125ff2c139dab5a2974252e8c96e13c1f7" translate="yes" xml:space="preserve">
          <source>This does not check if &lt;code&gt;&lt;a href=&quot;../functions/exists&quot;&gt;exists&lt;/a&gt; $brooklyn{tree}&lt;/code&gt; is true, it checks if it returns 1. Very different. Similar caveats exist for false and 0. In these cases, use &lt;code&gt;ok()&lt;/code&gt; .</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;../functions/exists&quot;&gt;exists&lt;/a&gt; $brooklyn{tree}&lt;/code&gt; が&lt;a href=&quot;../functions/exists&quot;&gt;存在する&lt;/a&gt;かどうかはチェックせず、1を返すかどうかをチェックします。非常に異なります。falseおよび0についても同様の警告が存在します。これらの場合は、 &lt;code&gt;ok()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="df9ee01c5bea640b9da990c541197d0b2c4c126f" translate="yes" xml:space="preserve">
          <source>This does not check if &lt;code&gt;exists $brooklyn{tree}&lt;/code&gt; is true, it checks if it returns 1. Very different. Similar caveats exist for false and 0. In these cases, use &lt;code&gt;ok()&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;exists $brooklyn{tree}&lt;/code&gt; かどうかをチェックしません$ brooklyn {tree}がtrueであるかどうかをチェックし、1を返すかどうかをチェックします。非常に異なります。falseと0についても同様の警告があります。これらの場合は、 &lt;code&gt;ok()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="dd20b2062f4585400f385fca7062f2de8bbcc3c0" translate="yes" xml:space="preserve">
          <source>This does not consult the local filesystem on Unix, Win32, OS/2 or Mac OS (Classic). It does consult the working environment for VMS (see &lt;a href=&quot;File::Spec::VMS#file_name_is_absolute&quot;&gt;&quot;file_name_is_absolute&quot; in File::Spec::VMS&lt;/a&gt;).</source>
          <target state="translated">これは、Unix、Win32、OS / 2、またはMac OS（クラシック）のローカルファイルシステムを参照しません。VMSの作業環境を参照&lt;a href=&quot;File::Spec::VMS#file_name_is_absolute&quot;&gt;します（File :: Spec :: VMSの「file_name_is_absolute」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="98a4bb476f64546166599da65496591b48105011" translate="yes" xml:space="preserve">
          <source>This does not consult the local filesystem on Unix, Win32, OS/2 or Mac OS (Classic). It does consult the working environment for VMS (see &lt;a href=&quot;vms#file_name_is_absolute&quot;&gt;file_name_is_absolute in File::Spec::VMS&lt;/a&gt;).</source>
          <target state="translated">これは、Unix、Win32、OS / 2、Mac OS（Classic）のローカルファイルシステムを調べません。VMSの作業環境を調べます（&lt;a href=&quot;vms#file_name_is_absolute&quot;&gt;File :: Spec :: VMSのfile_name_is_absoluteを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="05ba9e904da127ea409d891d030eef9da471aef5" translate="yes" xml:space="preserve">
          <source>This does not consult the local filesystem on Unix, Win32, OS/2, or Mac OS (Classic). It does consult the working environment for VMS (see &lt;a href=&quot;File::Spec::VMS#file_name_is_absolute&quot;&gt;&quot;file_name_is_absolute&quot; in File::Spec::VMS&lt;/a&gt;).</source>
          <target state="translated">これは、Unix、Win32、OS / 2、またはMac OS（クラシック）上のローカルファイルシステムを参照しません。VMSの作業環境を参照&lt;a href=&quot;File::Spec::VMS#file_name_is_absolute&quot;&gt;します（File :: Spec :: VMSの「file_name_is_absolute」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5567db63aec81d4f2bb7d5785e7a6d2074129096" translate="yes" xml:space="preserve">
          <source>This does not consult the local filesystem on Unix, Win32, OS/2, or Mac OS (Classic). It does consult the working environment for VMS (see &lt;a href=&quot;spec/vms#file_name_is_absolute&quot;&gt;file_name_is_absolute in File::Spec::VMS&lt;/a&gt;).</source>
          <target state="translated">これは、Unix、Win32、OS / 2、またはMac OS（クラシック）のローカルファイルシステムを調べません。VMSの作業環境を調べます（&lt;a href=&quot;spec/vms#file_name_is_absolute&quot;&gt;File :: Spec :: VMSのfile_name_is_absoluteを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c944650291e0fb3160694a6ec50737cfb06a9680" translate="yes" xml:space="preserve">
          <source>This does not create any methods for you, it just adds the &lt;code&gt;FOO&lt;/code&gt; constant.</source>
          <target state="translated">これはメソッドを作成せず、 &lt;code&gt;FOO&lt;/code&gt; 定数を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="0a35bcc864cbc531874ff7b69a1ed16eb2d6e952" translate="yes" xml:space="preserve">
          <source>This does not need an interpreter context, so the definition has no &lt;code&gt;pTHX&lt;/code&gt; , and it follows that callers don't use &lt;code&gt;aTHX&lt;/code&gt; . (See &lt;a href=&quot;#Background-and-PERL_IMPLICIT_CONTEXT&quot;&gt;Background and PERL_IMPLICIT_CONTEXT&lt;/a&gt;.)</source>
          <target state="translated">これはインタープリターコンテキストを必要としないため、定義には &lt;code&gt;pTHX&lt;/code&gt; がなく、呼び出し側は &lt;code&gt;aTHX&lt;/code&gt; を使用しません。（「&lt;a href=&quot;#Background-and-PERL_IMPLICIT_CONTEXT&quot;&gt;背景」および「PERL_IMPLICIT_CONTEXT&lt;/a&gt;」を参照してください。）</target>
        </trans-unit>
        <trans-unit id="c9d579d4202051060b7b7bc5b1e8166efc37986d" translate="yes" xml:space="preserve">
          <source>This does not work with object methods, however; all object methods have to be in the symbol table of some package to be found. See &lt;a href=&quot;perlref#Function-Templates&quot;&gt;&quot;Function Templates&quot; in perlref&lt;/a&gt; for something of a work-around to this.</source>
          <target state="translated">ただし、これはオブジェクトメソッドでは機能しません。すべてのオブジェクトメソッドは、検索されるパッケージのシンボルテーブルに含まれている必要があります。&lt;a href=&quot;perlref#Function-Templates&quot;&gt;これ&lt;/a&gt;に対する回避策については、perlrefの「関数テンプレート」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d5400494835955231d73bab6efd7d27c959f429" translate="yes" xml:space="preserve">
          <source>This does not work with object methods, however; all object methods have to be in the symbol table of some package to be found. See &lt;a href=&quot;perlref#Function-Templates&quot;&gt;Function Templates in perlref&lt;/a&gt; for something of a work-around to this.</source>
          <target state="translated">ただし、これはオブジェクトメソッドでは機能しません。すべてのオブジェクトメソッドは、検索するパッケージのシンボルテーブルにある必要があります。&lt;a href=&quot;perlref#Function-Templates&quot;&gt;これ&lt;/a&gt;に対する回避策については、perlrefの関数テンプレートを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d2225ec395dc726d6f789db247181b8752831a9" translate="yes" xml:space="preserve">
          <source>This does require you to read the entire archive in to memory first, since otherwise we wouldn't know what data to fill the copy with. (This means that you cannot use the class methods, including &lt;code&gt;iter&lt;/code&gt; on archives that have incompatible filetypes and still expect things to work).</source>
          <target state="translated">これを行うには、最初にアーカイブ全体をメモリに読み込む必要があります。そうしないと、コピーに書き込むデータがわからないためです。（これは、互換性のないファイルタイプがあり、まだ機能することを期待しているアーカイブの &lt;code&gt;iter&lt;/code&gt; を含め、クラスメソッドを使用できないことを意味します）。</target>
        </trans-unit>
        <trans-unit id="d695e6a31e5a4eec6a56e77d637d17eb575265f8" translate="yes" xml:space="preserve">
          <source>This does the same:</source>
          <target state="translated">これも同じです。</target>
        </trans-unit>
        <trans-unit id="dc02dd18bd8bcc4ec6d08efce5d8f98b8592ad09" translate="yes" xml:space="preserve">
          <source>This doesn't copy the underlying array:</source>
          <target state="translated">これは基になる配列をコピーしません。</target>
        </trans-unit>
        <trans-unit id="6a45cffcf59adcdd497d8553e6a4ac8aa27d7fd9" translate="yes" xml:space="preserve">
          <source>This doesn't do anything to your input, or to your output. It only influences the way your sources are read. You can use Unicode in string literals, in identifiers (but they still have to be &quot;word characters&quot; according to &lt;code&gt;\w&lt;/code&gt; ), and even in custom delimiters.</source>
          <target state="translated">これは、入力や出力には何もしません。これは、ソースの読み取り方法にのみ影響します。文字列リテラル、識別子（ただし、 &lt;code&gt;\w&lt;/code&gt; よると「単語文字」である必要があります）、およびカスタム区切り文字でもUnicodeを使用できます。</target>
        </trans-unit>
        <trans-unit id="12b7a18a1b05ee982fef7d28da1abc2f543dc36e" translate="yes" xml:space="preserve">
          <source>This doesn't do anything to your input, or to your output. It only influences the way your sources are read. You can use Unicode in string literals, in identifiers (but they still have to be &quot;word characters&quot; according to &lt;code&gt;\w&lt;/code&gt;), and even in custom delimiters.</source>
          <target state="translated">これは、入力または出力には何もしません。ソースの読み取り方法にのみ影響します。Unicodeは、文字列リテラル、識別子（ただし、 &lt;code&gt;\w&lt;/code&gt; よると「単語文字」である必要があります）、さらにはカスタム区切り文字でも使用できます。</target>
        </trans-unit>
        <trans-unit id="c08d4d18717ad728adb161ebb6ace72d574c3c92" translate="yes" xml:space="preserve">
          <source>This doesn't mean that a &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variable declared in a statically enclosing lexical scope would be invisible. Only dynamic scopes are cut off. For example, the &lt;code&gt;bumpx()&lt;/code&gt; function below has access to the lexical $x variable because both the &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; occurred at the same scope, presumably file scope.</source>
          <target state="translated">これは、静的に囲む字句スコープで宣言された &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数が非表示になることを意味するものではありません。動的スコープのみが切り取られます。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; の両方が同じスコープ（おそらくファイルスコープ）で発生したため、以下の &lt;code&gt;bumpx()&lt;/code&gt; 関数は字句$ x変数にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e3b62eb82fdb946fa7043b5f1daf9c10f822dc0f" translate="yes" xml:space="preserve">
          <source>This doesn't mean that a &lt;code&gt;my&lt;/code&gt; variable declared in a statically enclosing lexical scope would be invisible. Only dynamic scopes are cut off. For example, the &lt;code&gt;bumpx()&lt;/code&gt; function below has access to the lexical $x variable because both the &lt;code&gt;my&lt;/code&gt; and the &lt;code&gt;sub&lt;/code&gt; occurred at the same scope, presumably file scope.</source>
          <target state="translated">これは、静的に囲む字句スコープで宣言された &lt;code&gt;my&lt;/code&gt; 変数が非表示になるという意味ではありません。動的スコープのみが遮断されます。たとえば、以下の &lt;code&gt;bumpx()&lt;/code&gt; 関数は、 &lt;code&gt;my&lt;/code&gt; と &lt;code&gt;sub&lt;/code&gt; の両方が同じスコープ（おそらくファイルスコープ）で発生したため、字句の$ x変数にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f510646e09469823e3fdbdaaa6f4bdb12a95ec4e" translate="yes" xml:space="preserve">
          <source>This doesn't really improve the legibility of this example, but it's available in case you want it. Squashing the pattern down to the compact form, we have</source>
          <target state="translated">これではこの例の読みやすさはあまり向上しませんが、必要に応じて利用することができます。パターンをコンパクトな形に押し込めば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="e40a26e5ea83812803ea5b81ef047b1db82eff02" translate="yes" xml:space="preserve">
          <source>This doesn't work if you explicitly specify a loop variable, as in &lt;code&gt;for $item (@array)&lt;/code&gt; . You have to use the default variable &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;for $item (@array)&lt;/code&gt; ように、ループ変数を明示的に指定した場合、これは機能しません。デフォルトの変数 &lt;code&gt;$_&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="95e51f60aa318824f02d1eda227d14c25f989db1" translate="yes" xml:space="preserve">
          <source>This doesn't work if you explicitly specify a loop variable, as in &lt;code&gt;for $item (@array)&lt;/code&gt;. You have to use the default variable &lt;code&gt;$_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;for $item (@array)&lt;/code&gt; ように、ループ変数を明示的に指定した場合、これは機能しません。デフォルトの変数 &lt;code&gt;$_&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2c583421317d67ae6f6464366487994f4149ea1" translate="yes" xml:space="preserve">
          <source>This doesn't work so cleanly for varargs functions, though, as macros imply that the number of arguments is known in advance. Instead we either need to spell them out fully, passing &lt;code&gt;aTHX_&lt;/code&gt; as the first argument (the Perl core tends to do this with functions like Perl_warner), or use a context-free version.</source>
          <target state="translated">ただし、マクロは引数の数が事前にわかっていることを示唆しているため、これはvarargs関数ではそれほどうまく機能しません。代わりに、最初の引数として &lt;code&gt;aTHX_&lt;/code&gt; を渡して（PerlコアはPerl_warnerのような関数でこれを行う傾向がある）完全にスペルアウトするか、コンテキストフリーバージョンを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e02629217bd3e65d041e0afd10431e9bff745dcf" translate="yes" xml:space="preserve">
          <source>This dummy class exists to signal that the class inheriting it should be skipped when reporting exceptions from autodie. This is useful for utility classes like &lt;a href=&quot;Path::Tiny&quot;&gt;Path::Tiny&lt;/a&gt; that wish to report the location of where they were called on failure.</source>
          <target state="translated">このダミークラスは、autodieからの例外を報告するときに、それを継承するクラスをスキップする必要があることを通知するために存在します。これは、失敗時に呼び出された場所の場所を報告したい&lt;a href=&quot;Path::Tiny&quot;&gt;Path :: Tinyの&lt;/a&gt;ようなユーティリティクラスに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd35b5e520e91c0129daf21db3448c07f88b99cf" translate="yes" xml:space="preserve">
          <source>This effect can be demonstrated by setting up a test script with both forms, including a &lt;code&gt;debug()&lt;/code&gt; subroutine to emulate typical &lt;code&gt;logger()&lt;/code&gt; functionality.</source>
          <target state="translated">この効果は、典型的な &lt;code&gt;logger()&lt;/code&gt; 機能をエミュレートするための &lt;code&gt;debug()&lt;/code&gt; サブルーチンを含む両方の形式でテストスクリプトを設定することによって実証できます。</target>
        </trans-unit>
        <trans-unit id="fbe2310a8ff7d61c27678f186cd1f8d32e53b8ee" translate="yes" xml:space="preserve">
          <source>This effectively means that your source code behaves as if it were written in UTF-8 with &lt;code&gt;'use utf8&lt;/code&gt; ' in effect. So even if your editor only supports Shift_JIS, for example, you can still try examples in Chapter 15 of &lt;code&gt;Programming Perl, 3rd Ed.&lt;/code&gt;.</source>
          <target state="translated">これは、事実上、ソースコードが &lt;code&gt;'use utf8&lt;/code&gt; 」が有効なUTF-8で記述されているかのように動作することを意味します。たとえば、エディターがShift_JISのみをサポートしている場合でも、 &lt;code&gt;Programming Perl, 3rd Ed.&lt;/code&gt; 第15章の例を試すことができます。。</target>
        </trans-unit>
        <trans-unit id="2dec00720dbccd0f2c23e14f01bf267bdc96f79b" translate="yes" xml:space="preserve">
          <source>This effectively means that your source code behaves as if it were written in UTF-8 with &lt;code&gt;'use utf8&lt;/code&gt;' in effect. So even if your editor only supports Shift_JIS, for example, you can still try examples in Chapter 15 of &lt;code&gt;Programming Perl, 3rd Ed.&lt;/code&gt;.</source>
          <target state="translated">これは事実上、ソースコードが &lt;code&gt;'use utf8&lt;/code&gt; 」を有効にしてUTF-8で記述されているかのように動作することを意味します。したがって、たとえば、エディタがShift_JISのみをサポートしている場合でも、 &lt;code&gt;Programming Perl, 3rd Ed.&lt;/code&gt; のプログラミング第3版の第15章で例を試すことができます。。</target>
        </trans-unit>
        <trans-unit id="cdd4da3883eaa1f4535d75812114c437bcce2b57" translate="yes" xml:space="preserve">
          <source>This empty set of prereqs is useful for accumulating new prereqs before finally dumping the whole set into a structure or string.</source>
          <target state="translated">この空のprereqのセットは、最終的に構造体や文字列にセット全体をダンプする前に、新しいprereqを蓄積するのに便利です。</target>
        </trans-unit>
        <trans-unit id="19bf4c61bc03e7bbdfa7f772178436c7814ff1bf" translate="yes" xml:space="preserve">
          <source>This enables (or disables) all of the &lt;code&gt;indent&lt;/code&gt;, &lt;code&gt;space_before&lt;/code&gt; and &lt;code&gt;space_after&lt;/code&gt; (and in the future possibly more) flags in one call to generate the most readable (or most compact) form possible.</source>
          <target state="translated">これにより、1回の呼び出しですべての &lt;code&gt;indent&lt;/code&gt; 、 &lt;code&gt;space_before&lt;/code&gt; 、 &lt;code&gt;space_after&lt;/code&gt; （および将来的にはさらに多くの）フラグが有効（または無効）になり、可能な限り最も読みやすい（または最もコンパクトな）フォームが生成されます。</target>
        </trans-unit>
        <trans-unit id="f3a80c354b71b0daaada6c4b42d328f1e3ab3798" translate="yes" xml:space="preserve">
          <source>This enables a trace mode and is primarily for debugging bigint or Math::BigInt.</source>
          <target state="translated">これはトレースモードを有効にし、主に bigint や Math::BigInt をデバッグするためのものです。</target>
        </trans-unit>
        <trans-unit id="9c02cc31d70507771fd57c515a75adc482efe06a" translate="yes" xml:space="preserve">
          <source>This enables a trace mode and is primarily for debugging bignum or Math::BigInt/Math::BigFloat.</source>
          <target state="translated">これはトレースモードを有効にし、主に bignum または Math::BigInt/Math::BigFloat をデバッグするためのものです。</target>
        </trans-unit>
        <trans-unit id="cec63c166c07d8ad2b6a0564923160e4e6afd3a9" translate="yes" xml:space="preserve">
          <source>This enables aliasing via assignment to references:</source>
          <target state="translated">これにより、参照への代入によるエイリアシングが可能になります。</target>
        </trans-unit>
        <trans-unit id="f0c59e41b4a3df893d1d884cf9253595b11ba6fc" translate="yes" xml:space="preserve">
          <source>This enables debugging output when calling commandline utilities to fetch files. This also enables &lt;code&gt;Carp::longmess&lt;/code&gt; errors, instead of the regular &lt;code&gt;carp&lt;/code&gt; errors.</source>
          <target state="translated">これにより、コマンドラインユーティリティを呼び出してファイルをフェッチする際のデバッグ出力が可能になります。これにより、通常の &lt;code&gt;carp&lt;/code&gt; エラーではなく、 &lt;code&gt;Carp::longmess&lt;/code&gt; エラーも有効になります。</target>
        </trans-unit>
        <trans-unit id="79613693422bd25bf48f5f8810aa0da8bd572cf9" translate="yes" xml:space="preserve">
          <source>This enables declaration of subroutines via &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; sub foo&lt;/code&gt; , &lt;code&gt;state sub foo&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; sub foo&lt;/code&gt; syntax. See &lt;a href=&quot;perlsub#Lexical-Subroutines&quot;&gt;Lexical Subroutines in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">これは、経由して、サブルーチンの宣言を可能に &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; sub foo&lt;/code&gt; 、 &lt;code&gt;state sub foo&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; sub foo&lt;/code&gt; 構文。詳細については&lt;a href=&quot;perlsub#Lexical-Subroutines&quot;&gt;、perlsubの字句サブルーチン&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="80e1dcd9c198904d910331965aa69cd1ca8bccf4" translate="yes" xml:space="preserve">
          <source>This enables the programmer to do operations that combine functionalities that are available in the shell.</source>
          <target state="translated">これにより、プログラマはシェルで利用できる機能を組み合わせた操作を行うことができるようになります。</target>
        </trans-unit>
        <trans-unit id="e90120b49b0763003fb5ddee58d3021476d96c8e" translate="yes" xml:space="preserve">
          <source>This enables unpacking of subroutine arguments into lexical variables by syntax such as</source>
          <target state="translated">これにより、サブルーチンの引数を以下のような構文で辞書変数に展開することができます。</target>
        </trans-unit>
        <trans-unit id="b1b55e253e92ad7341b5b1784881c341c542cf5a" translate="yes" xml:space="preserve">
          <source>This entry can be used to store a C structure (the number of bytes to be copied is calculated using the C &lt;code&gt;sizeof&lt;/code&gt; function) and can be used as an alternative to T_PTRREF without having to worry about a memory leak (since Perl will clean up the SV).</source>
          <target state="translated">このエントリを使用してC構造体を保存し（コピーするバイト数はCの &lt;code&gt;sizeof&lt;/code&gt; 関数を使用して計算します）、メモリリークを心配する必要なくT_PTRREFの代わりに使用できます（PerlはSV）。</target>
        </trans-unit>
        <trans-unit id="a7bcaf8e2d3812b33c786936976ed8fae77f4ec3" translate="yes" xml:space="preserve">
          <source>This entry describes the bug tracking system for this distribution. It is a Map with the following valid keys:</source>
          <target state="translated">このエントリはこのディストリビューションのバグ追跡システムについて説明します。以下の有効なキーを持つマップです。</target>
        </trans-unit>
        <trans-unit id="f61acce6a24046d03b3ed1b4333f40651db8171b" translate="yes" xml:space="preserve">
          <source>This entry describes the source control repository for this distribution. It is a Map with the following valid keys:</source>
          <target state="translated">このエントリでは、このディストリビューションのソース管理リポジトリについて説明します。以下の有効なキーを持つ Map です。</target>
        </trans-unit>
        <trans-unit id="8661dce79cd9938b29ab6189f268d624e4b465ea" translate="yes" xml:space="preserve">
          <source>This entry is required and has the same structure as that of the &lt;code&gt;&lt;a href=&quot;#prereqs&quot;&gt;&quot;prereqs&quot;&lt;/a&gt;&lt;/code&gt; key. It provides a list of package requirements that must be satisfied for the feature to be supported or enabled.</source>
          <target state="translated">このエントリは必須であり、 &lt;code&gt;&lt;a href=&quot;#prereqs&quot;&gt;&quot;prereqs&quot;&lt;/a&gt;&lt;/code&gt; キーと同じ構造です。機能をサポートまたは有効にするために満たす必要のあるパッケージ要件のリストを提供します。</target>
        </trans-unit>
        <trans-unit id="2f3300c27110c85898913011cf397618813e91ac" translate="yes" xml:space="preserve">
          <source>This environment variable allows the user to specify custom color aliases that will be understood by color(), colored(), and colorvalid(). None of the other functions will be affected, and no new color constants will be created. The custom colors are aliases for existing color names; no new escape sequences can be introduced. Only alphanumerics, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; , and &lt;code&gt;-&lt;/code&gt; are allowed in alias names.</source>
          <target state="translated">この環境変数を使用すると、ユーザーはcolor（）、colored（）、colorvalid（）で認識されるカスタムカラーエイリアスを指定できます。他の関数は影響を受けず、新しい色定数は作成されません。カスタムカラーは、既存のカラー名のエイリアスです。新しいエスケープシーケンスを導入することはできません。英数字のみ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;_&lt;/code&gt; 、および &lt;code&gt;-&lt;/code&gt; はエイリアス名で使用できます。</target>
        </trans-unit>
        <trans-unit id="fe4e2bcc9ac8969fe47b9592f17295a43be470a9" translate="yes" xml:space="preserve">
          <source>This environment variable allows the user to specify custom color aliases that will be understood by color(), colored(), and colorvalid(). None of the other functions will be affected, and no new color constants will be created. The custom colors are aliases for existing color names; no new escape sequences can be introduced. Only alphanumerics, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and &lt;code&gt;-&lt;/code&gt; are allowed in alias names.</source>
          <target state="translated">この環境変数を使用すると、ユーザーは、color（）、colored（）、およびcolorvalid（）によって理解されるカスタムカラーエイリアスを指定できます。他の関数は影響を受けず、新しい色定数は作成されません。カスタムカラーは、既存のカラー名のエイリアスです。新しいエスケープシーケンスを導入することはできません。英数字のみ、 &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;_&lt;/code&gt; 、および &lt;code&gt;-&lt;/code&gt; はエイリアス名で使用できます。</target>
        </trans-unit>
        <trans-unit id="eeb4dcf1cb6c13fe396a4c4857e58d83a3e881a1" translate="yes" xml:space="preserve">
          <source>This environment variable is read and applied when the Term::ANSIColor module is loaded and is then subsequently ignored. Changes to ANSI_COLORS_ALIASES after the module is loaded will have no effect. See coloralias() for an equivalent facility that can be used at runtime.</source>
          <target state="translated">この環境変数は、Term::ANSIColor モジュールのロード時に読み込まれて適用され、その後は無視されます。モジュールがロードされた後に ANSI_COLORS_ALIASES を変更しても影響はありません。実行時に使用できる同等の機能については、coloralias()を参照してください。</target>
        </trans-unit>
        <trans-unit id="a56aa6c0940d68ef241fe55a79ac7479a8552c55" translate="yes" xml:space="preserve">
          <source>This environment variable, available starting in Perl v5.20, if set (to any value), tells Perl to not use the rest of the environment variables to initialize with. Instead, Perl uses whatever the current locale settings are. This is particularly useful in embedded environments, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;&quot;Using embedded Perl with POSIX locales&quot; in perlembed&lt;/a&gt;.</source>
          <target state="translated">この環境変数は、Perl v5.20以降で使用可能であり、（任意の値に）設定されている場合、初期化に使用する残りの環境変数を使用しないようにPerlに指示します。代わりに、Perlは現在のロケール設定が何であれ使用します。これは、組み込み環境で特に役立ちます&lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;。perlembedの「POSIXロケールでの組み込みPerlの使用」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="08e7401d917dc7c04b41058352f2e564e79feab2" translate="yes" xml:space="preserve">
          <source>This environment variable, available starting in Perl v5.20, if set (to any value), tells Perl to not use the rest of the environment variables to initialize with. Instead, Perl uses whatever the current locale settings are. This is particularly useful in embedded environments, see &lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;Using embedded Perl with POSIX locales in perlembed&lt;/a&gt;.</source>
          <target state="translated">Perl v5.20以降で使用可能なこの環境変数は、（任意の値に）設定されている場合、初期化に使用する残りの環境変数を使用しないようにPerlに指示します。代わりに、Perlは現在のロケール設定が何であれ使用します。これは、組み込み環境で特に役立ちます&lt;a href=&quot;perlembed#Using-embedded-Perl-with-POSIX-locales&quot;&gt;。perlembedのPOSIXロケールでの組み込みPerlの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d75c6a399680a576578e1b3ba02163c5eecb504" translate="yes" xml:space="preserve">
          <source>This error is generated when it is not possible to find the local definitions for error codes, due to the uncommon structure of the Synology file system.</source>
          <target state="translated">このエラーは、Synology ファイルシステムの構造が一般的ではないため、エラーコードのローカル定義を見つけることができない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="6ace5510a8ff1a4d0b9f61bb6ded0bf5e3670db9" translate="yes" xml:space="preserve">
          <source>This error was fixed in the Perl development git for version 5.19, commit 7a8f1212e5482613c8a5b0402528e3105b26ff24.</source>
          <target state="translated">このエラーは、Perl development git for version 5.19,commit 7a8f1212e5482613c8a5b0402528e3105b26ff24 で修正されました。</target>
        </trans-unit>
        <trans-unit id="01f9c0ecaa03744be9ea320c0c4f588e6b9faad8" translate="yes" xml:space="preserve">
          <source>This evaluates STRING as perl code inside the compartment.</source>
          <target state="translated">コンパートメント内のperlコードとしてSTRINGを評価します。</target>
        </trans-unit>
        <trans-unit id="8e88fee13fdd53ae93ae82bca131dd3e051006da" translate="yes" xml:space="preserve">
          <source>This evaluates the contents of file FILENAME inside the compartment. It uses the same rules as perl's built-in &lt;code&gt;do&lt;/code&gt; to locate the file, poossibly using &lt;code&gt;@INC&lt;/code&gt;.</source>
          <target state="translated">これにより、コンパートメント内のファイルFILENAMEの内容が評価されます。これは、perlの組み込みの &lt;code&gt;do&lt;/code&gt; と同じルールを使用してファイルを検索し、おそらく@INCを使用し &lt;code&gt;@INC&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85da3ed8e7eeed1d7664ca9b45804ed926dd64a7" translate="yes" xml:space="preserve">
          <source>This evaluates the contents of file FILENAME inside the compartment. See above documentation on the &lt;b&gt;reval&lt;/b&gt; method for further details.</source>
          <target state="translated">これは、コンパートメント内のファイルFILENAMEの内容を評価します。詳細については、上記の&lt;b&gt;reval&lt;/b&gt;メソッドに関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="668473c118073b55874da4472c5e05758203ab13" translate="yes" xml:space="preserve">
          <source>This evaluates to true if and only if the string in the variable &lt;code&gt;$foo&lt;/code&gt; contains somewhere in it, the sequence of characters &quot;a&quot;, &quot;b&quot;, then &quot;c&quot;. (The &lt;code&gt;=~ m&lt;/code&gt;, or match operator, is described in &lt;a href=&quot;perlop#m%2FPATTERN%2Fmsixpodualngc&quot;&gt;&quot;m/PATTERN/msixpodualngc&quot; in perlop&lt;/a&gt;.)</source>
          <target state="translated">これは、変数 &lt;code&gt;$foo&lt;/code&gt; 文字列のどこかに、文字「a」、「b」、「c」のシーケンスが含まれている場合にのみ、trueと評価されます。（ &lt;code&gt;=~ m&lt;/code&gt; &lt;a href=&quot;perlop#m%2FPATTERN%2Fmsixpodualngc&quot;&gt;〜m&lt;/a&gt;、または一致演算子は、perlopの「m / PATTERN / msixpodualngc」で説明されています。）</target>
        </trans-unit>
        <trans-unit id="eaa45a050a297698330cfd197242d66b5bc5b90b" translate="yes" xml:space="preserve">
          <source>This event has no data of its own. This event is sent out by the IPC system when the main process/thread is ready to end.</source>
          <target state="translated">このイベントには、それ自身のデータはありません。このイベントは、メインプロセス/スレッドが終了する準備ができたときにIPCシステムから送信されます。</target>
        </trans-unit>
        <trans-unit id="8fc04382ecbdf81e4f5caf52797a69b83c13dd83" translate="yes" xml:space="preserve">
          <source>This event is used if a TAP formatter wishes to set a version.</source>
          <target state="translated">このイベントは、TAPフォーマッタがバージョンを設定したい場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="c4d1039eeddc372ecb07a9ed65ed3a51b6d6ae64" translate="yes" xml:space="preserve">
          <source>This example added quite a few new concepts. We'll take them one at a time.</source>
          <target state="translated">この例では、かなり新しい概念が追加されています。これを一つずつ見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="b69f2ecf80918f850deb9506044c7c7d1e270ee4" translate="yes" xml:space="preserve">
          <source>This example does not include any retries and may consequently fail to contact a reachable host. The most prominent reason for this is congestion of the queues on the sending host if the number of hosts to contact is sufficiently large.</source>
          <target state="translated">この例ではリトライは一切含まれておらず、結果的に到達可能なホストへのコンタクトに失敗する可能性があります。この最も顕著な理由は、連絡すべきホストの数が十分に多い場合、送信側ホストのキューが混雑することです。</target>
        </trans-unit>
        <trans-unit id="45c8019ae57e341f2cf51b697b11f926ebc66d79" translate="yes" xml:space="preserve">
          <source>This example fails because &lt;code&gt;baz()&lt;/code&gt; refers to the package/global subroutine &lt;code&gt;baz&lt;/code&gt;, not the lexical subroutine currently being defined.</source>
          <target state="translated">この例は、 &lt;code&gt;baz()&lt;/code&gt; が現在定義されている字句サブルーチンではなく、パッケージ/グローバルサブルーチン &lt;code&gt;baz&lt;/code&gt; を参照しているため失敗します。</target>
        </trans-unit>
        <trans-unit id="90a572c629dcfb44919f712f7d6b779f25e5dfe2" translate="yes" xml:space="preserve">
          <source>This example is aborted at compile time as we use the attribute &quot;Test&quot; which isn't allowed. &lt;code&gt;MODIFY_CODE_ATTRIBUTES&lt;/code&gt; returns a list that contains a single element ('Test').</source>
          <target state="translated">許可されていない属性 &quot;Test&quot;を使用しているため、この例はコンパイル時に中止されます。 &lt;code&gt;MODIFY_CODE_ATTRIBUTES&lt;/code&gt; は、単一の要素（ 'Test'）を含むリストを返します。</target>
        </trans-unit>
        <trans-unit id="c0449bb1daa75d27783722f69c76968c08c60f04" translate="yes" xml:space="preserve">
          <source>This example is fairly trivial; for more complex cases and a deeper explanation, see the links in the &lt;a href=&quot;#SEE-ALSO&quot;&gt;&quot;SEE ALSO&quot;&lt;/a&gt; section.</source>
          <target state="translated">この例はかなり些細なものです。より複雑なケースとより詳細な説明については、&lt;a href=&quot;#SEE-ALSO&quot;&gt;「関連&lt;/a&gt;項目」セクションのリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="f90369b8f8beb64315ed6181cebf6923dd367b56" translate="yes" xml:space="preserve">
          <source>This example is fairly trivial; for more complex cases and a deeper explanation, see the links in the &lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt; section.</source>
          <target state="translated">この例はかなり簡単です。より複雑な例とより深い説明については、内のリンクを参照&lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSOのの&lt;/a&gt;セクションを。</target>
        </trans-unit>
        <trans-unit id="1253f47712d1828f7f774117d0efa3abf09df500" translate="yes" xml:space="preserve">
          <source>This example is fully equivalent with:</source>
          <target state="translated">と完全に等価です。</target>
        </trans-unit>
        <trans-unit id="4cd1eae4be0b88a312be5ff0a3c94c909b4f359b" translate="yes" xml:space="preserve">
          <source>This example is preferred over the previous one--even for Unix platforms--because now any &lt;code&gt;\015&lt;/code&gt; 's (&lt;code&gt;\cM&lt;/code&gt; 's) are stripped out (and there was much rejoicing).</source>
          <target state="translated">この例は、Unixプラットフォームの場合でも、以前の例よりも好まれています。なぜなら、今では &lt;code&gt;\015&lt;/code&gt; （ &lt;code&gt;\cM&lt;/code&gt; ）がすべて取り除かれている（そして、大いに喜ばれた）ためです。</target>
        </trans-unit>
        <trans-unit id="d2e7d74c2002e413e58575bcfceff5a6cc8e62bb" translate="yes" xml:space="preserve">
          <source>This example is preferred over the previous one--even for Unix platforms--because now any &lt;code&gt;\015&lt;/code&gt;'s (&lt;code&gt;\cM&lt;/code&gt;'s) are stripped out (and there was much rejoicing).</source>
          <target state="translated">この例は、Unixプラットフォームの場合でも、以前の例よりも優先されます。これは、 &lt;code&gt;\015&lt;/code&gt; （ &lt;code&gt;\cM&lt;/code&gt; ）が削除されているためです（そして多くの喜びがありました）。</target>
        </trans-unit>
        <trans-unit id="2155785b4684f8ca5810fa768aca5a675651e726" translate="yes" xml:space="preserve">
          <source>This example prints the mail domain name of the SMTP server known as mailhost:</source>
          <target state="translated">この例では、メールホストとして知られるSMTPサーバのメールドメイン名を表示します。</target>
        </trans-unit>
        <trans-unit id="5df3c7e69cf9c030621b9397e847c01645ddee17" translate="yes" xml:space="preserve">
          <source>This example requires the following typemap entry. Consult &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt; for more information about adding new typemaps for an extension.</source>
          <target state="translated">この例では、次のタイプマップエントリが必要です。拡張機能に新しいタイプマップを追加することについての詳細は、&lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41a9b74b00161dd5b470ab9ac8171979158c1d90" translate="yes" xml:space="preserve">
          <source>This example runs. At compile time &lt;code&gt;MODIFY_CODE_ATTRIBUTES&lt;/code&gt; is called. In that subroutine, we check if any attribute is disallowed and we return a list of these &quot;bad attributes&quot;.</source>
          <target state="translated">この例は実行されます。コンパイル時に &lt;code&gt;MODIFY_CODE_ATTRIBUTES&lt;/code&gt; が呼び出されます。そのサブルーチンでは、許可されていない属性があるかどうかを確認し、これらの「悪い属性」のリストを返します。</target>
        </trans-unit>
        <trans-unit id="f2a9ee1d0bad2acdbedd9aa3ec0be4c6a6a132f5" translate="yes" xml:space="preserve">
          <source>This example sends a single assertion, a note (comment for stdout in Test::Builder talk) and sets the plan to 1.</source>
          <target state="translated">この例では、1 つのアサーションとノート (Test::Builder talk の stdout に対するコメント)を送信し、プランを 1 に設定しています。</target>
        </trans-unit>
        <trans-unit id="8ff407d302a1d7afb3f758e29e8d54e23989741b" translate="yes" xml:space="preserve">
          <source>This example sends a small message to the postmaster at the SMTP server known as mailhost:</source>
          <target state="translated">この例では、メールホストとして知られるSMTPサーバのポストマスタに小さなメッセージを送信しています。</target>
        </trans-unit>
        <trans-unit id="78b434a9f3a15806251887966899fdd84de7d2e2" translate="yes" xml:space="preserve">
          <source>This example separates a text into fields which are quote delimited, curly bracketed, and anything else. The delimited and bracketed parts are also blessed to identify them (the &quot;anything else&quot; is unblessed):</source>
          <target state="translated">この例では、テキストを引用符で区切られたフィールド、中括弧で区切られたフィールド、その他のフィールドに分けています。区切りと括弧で区切られた部分は、それらを識別するためにも祝福されています(&quot;anything else &quot;は祝福されていません)。</target>
        </trans-unit>
        <trans-unit id="9dff0d51281eb7bf5e0a018b6b24fe9e35070941" translate="yes" xml:space="preserve">
          <source>This example shows how to create a database, add key/value pairs to the database, delete keys/value pairs and finally how to enumerate the contents of the database.</source>
          <target state="translated">この例では、データベースを作成し、データベースにキーと値のペアを追加し、キーと値のペアを削除し、最後にデータベースの内容を列挙する方法を示します。</target>
        </trans-unit>
        <trans-unit id="880ede3f528ae25983090ec0e0156cb403c63af8" translate="yes" xml:space="preserve">
          <source>This example shows rewriting weights. &lt;code&gt;rewrite&lt;/code&gt; is allowed to affect code points, weights, and the name.</source>
          <target state="translated">この例は、重みの書き換えを示しています。コードポイント、重み、および名前に影響を与える &lt;code&gt;rewrite&lt;/code&gt; が許可されています。</target>
        </trans-unit>
        <trans-unit id="780bd69540d0ebaeb9c9ed4a226f52e8bf4d6c92" translate="yes" xml:space="preserve">
          <source>This example shows two calls that should have the same effect:</source>
          <target state="translated">この例では、同じ効果を持つはずの2つの呼び出しを示しています。</target>
        </trans-unit>
        <trans-unit id="84ff60fe8d031f55c9709b2299fa816e68248930" translate="yes" xml:space="preserve">
          <source>This example takes a regular expression from the argument list and prints the lines of input that match it:</source>
          <target state="translated">この例では、引数リストから正規表現を取り出し、それにマッチする入力の行を印刷します。</target>
        </trans-unit>
        <trans-unit id="078e5feeaf68f01a2929c0090cee690d8ca945ea" translate="yes" xml:space="preserve">
          <source>This example treats the slightly modified contents of $directory as a hash. The modifications are that the keys</source>
          <target state="translated">この例では、$directory の内容を少し変更したものをハッシュとして扱います。変更点は、キーが</target>
        </trans-unit>
        <trans-unit id="98e05dd997bb9813bf387c2523a2ee3778ba728f" translate="yes" xml:space="preserve">
          <source>This example uses a code expression in a conditional to match a definite article, either 'the' in English or 'der|die|das' in German:</source>
          <target state="translated">この例では、英語では 'the'、ドイツ語では 'der|die|das' のいずれかの定冠詞にマッチするように、条件式の中でコード式を使用しています。</target>
        </trans-unit>
        <trans-unit id="3182dc73190402ea11b0ccf6d157df088acea2cb" translate="yes" xml:space="preserve">
          <source>This example uses a code expression in a conditional to match a definite article, either &lt;code&gt;'the'&lt;/code&gt; in English or &lt;code&gt;'der|die|das'&lt;/code&gt; in German:</source>
          <target state="translated">この例では、条件付きのコード式を使用して、英語の &lt;code&gt;'the'&lt;/code&gt; またはドイツ語の &lt;code&gt;'der|die|das'&lt;/code&gt; いずれかの定冠詞に一致させます。</target>
        </trans-unit>
        <trans-unit id="c87cae12f1868f49317dcbc2ec2e9d5385ba1820" translate="yes" xml:space="preserve">
          <source>This example will be used with the following Perl statements.</source>
          <target state="translated">この例では、以下のPerl文を使用します。</target>
        </trans-unit>
        <trans-unit id="f8787b73d75916a7f7029d06b65a57928067677b" translate="yes" xml:space="preserve">
          <source>This example will fail to recognize that an error occurred inside the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; . Here's why: the call_Subtract code got executed while perl was cleaning up temporaries when exiting the outer braced block, and because call_Subtract is implemented with</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; {}&lt;/code&gt; 内でエラーが発生したことを認識できません。理由は次のとおりです。外側のブレースブロックを終了するときにperlが一時をクリーンアップしているときに、call_Subtractコードが実行されました。</target>
        </trans-unit>
        <trans-unit id="72a47805dd0a8f6fcbe1140876fe6c6fdf98a8e4" translate="yes" xml:space="preserve">
          <source>This example will fail to recognize that an error occurred inside the &lt;code&gt;eval {}&lt;/code&gt;. Here's why: the call_Subtract code got executed while perl was cleaning up temporaries when exiting the outer braced block, and because call_Subtract is implemented with</source>
          <target state="translated">この例では、 &lt;code&gt;eval {}&lt;/code&gt; 内でエラーが発生したことを認識できません。その理由は次のとおりです。call_Subtractコードは、perlが外側のブレースブロックを終了するときに一時的なものをクリーンアップしているときに実行されました。</target>
        </trans-unit>
        <trans-unit id="3e706dc3b3a7c56333befa9c2c2082dd86f8994b" translate="yes" xml:space="preserve">
          <source>This example will set the time to midnight on the same date which &lt;code&gt;$t&lt;/code&gt; had previously. Allowed values for the &quot;to&quot; parameter are: &quot;year&quot;, &quot;quarter&quot;, &quot;month&quot;, &quot;day&quot;, &quot;hour&quot;, &quot;minute&quot; and &quot;second&quot;.</source>
          <target state="translated">この例では、 &lt;code&gt;$t&lt;/code&gt; が以前に持っていたのと同じ日付の深夜に時刻を設定します。「to」パラメーターに許可される値は、「year」、「quarter」、「month」、「day」、「hour」、「minute」、および「second」です。</target>
        </trans-unit>
        <trans-unit id="3f78c3b59ae95350e4323c3cb4c7f0dc6fda1338" translate="yes" xml:space="preserve">
          <source>This example works on many platforms that have a shell compatible with Bourne shell:</source>
          <target state="translated">この例は、ボーンシェルと互換性のあるシェルを持っている多くのプラットフォームで動作します。</target>
        </trans-unit>
        <trans-unit id="15d5f8da3c8eb09a121cb765eeca738ccef36a74" translate="yes" xml:space="preserve">
          <source>This experimental attribute, introduced in Perl 5.22, only applies to anonymous subroutines. It causes the subroutine to be called as soon as the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; expression is evaluated. The return value is captured and turned into a constant subroutine.</source>
          <target state="translated">Perl 5.22で導入されたこの実験的属性は、無名サブルーチンにのみ適用されます。 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 式が評価されるとすぐにサブルーチンが呼び出されます。戻り値がキャプチャされ、定数サブルーチンに変換されます。</target>
        </trans-unit>
        <trans-unit id="0326081879c6e23ef99277efab3cb0743f765db7" translate="yes" xml:space="preserve">
          <source>This experimental attribute, introduced in Perl 5.22, only applies to anonymous subroutines. It causes the subroutine to be called as soon as the &lt;code&gt;sub&lt;/code&gt; expression is evaluated. The return value is captured and turned into a constant subroutine.</source>
          <target state="translated">Perl 5.22で導入されたこの実験的な属性は、匿名サブルーチンにのみ適用されます。これにより、 &lt;code&gt;sub&lt;/code&gt; 式が評価されるとすぐにサブルーチンが呼び出されます。戻り値が取得され、定数サブルーチンに変換されます。</target>
        </trans-unit>
        <trans-unit id="b23c339cf7e806a89bf6a85ce94fd3c5b9e88336" translate="yes" xml:space="preserve">
          <source>This experimental feature has been added to begin to implement &lt;a href=&quot;https://www.unicode.org/reports/tr18/#Wildcard_Properties&quot;&gt;https://www.unicode.org/reports/tr18/#Wildcard_Properties&lt;/a&gt;. Using it will raise a (default-on) warning in the &lt;code&gt;experimental::uniprop_wildcards&lt;/code&gt; category. We reserve the right to change its operation as we gain experience.</source>
          <target state="translated">この実験的な機能は、&lt;a href=&quot;https://www.unicode.org/reports/tr18/#Wildcard_Properties&quot;&gt;https：//www.unicode.org/reports/tr18/#Wildcard_Propertiesの&lt;/a&gt;実装を開始するために追加されました。これを使用すると、 &lt;code&gt;experimental::uniprop_wildcards&lt;/code&gt; カテゴリで（デフォルトオンの）警告が発生します。当社は、経験を積むにつれてその運営を変更する権利を留保します。</target>
        </trans-unit>
        <trans-unit id="6660b28f752ff2775e494cee3716861f7ebee6fd" translate="yes" xml:space="preserve">
          <source>This exposes the VMS C library &lt;code&gt;realpath&lt;/code&gt; function where available. It will always return a Unix format specification.</source>
          <target state="translated">これにより、VMSCライブラリの &lt;code&gt;realpath&lt;/code&gt; 関数が利用可能な場合に公開されます。常にUnix形式の仕様を返します。</target>
        </trans-unit>
        <trans-unit id="c659fee685d6111f5eef41a4fc47f104c94d024f" translate="yes" xml:space="preserve">
          <source>This expression is actually equivalent to &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt; , due to the higher precedence of &lt;code&gt;==&lt;/code&gt; . This is probably not what you want. (If you really meant to write this, disable the warning, or, better, put the parentheses explicitly and write &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; の優先順位が高いため、この式は実際には &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt; と同等です。これはおそらくあなたが望むものではありません。（もし本当にこれを書くつもりなら、警告を無効にするか、もっと良いことに、括弧を明示的に入れて &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt; と書いてください）。</target>
        </trans-unit>
        <trans-unit id="2d1c58a809013f74370c233986b702d73e647e16" translate="yes" xml:space="preserve">
          <source>This expression is actually equivalent to &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt;, due to the higher precedence of &lt;code&gt;==&lt;/code&gt;. This is probably not what you want. (If you really meant to write this, disable the warning, or, better, put the parentheses explicitly and write &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; の優先順位が高いため、この式は実際には &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt; と同等です。これはおそらくあなたが望むものではありません。（本当にこれを書くつもりなら、警告を無効にするか、かっこを明示的に入れて &lt;code&gt;$x &amp;amp; ($y == 0)&lt;/code&gt; と書いてください）。</target>
        </trans-unit>
        <trans-unit id="3d95c2dd6bdf3facfce8eb7c29c42e8682159b3f" translate="yes" xml:space="preserve">
          <source>This extension is somewhat contrived. It is based on the code in the previous example. It calls the statfs function multiple times, accepting a reference to an array of filenames as input, and returning a reference to an array of hashes containing the data for each of the filesystems.</source>
          <target state="translated">この拡張子は、少々工夫されたものになっています。これは先ほどの例のコードに基づいています。statfs 関数を複数回呼び出し、入力としてファイル名の配列への参照を受け取り、それぞれのファイルシステムのデータを含むハッシュの配列への参照を返します。</target>
        </trans-unit>
        <trans-unit id="443c1ad31c99bd2962c1e14f9f6e565d7abce59c" translate="yes" xml:space="preserve">
          <source>This extension is very Unix-oriented (struct statfs and the statfs system call). If you are not running on a Unix system, you can substitute for statfs any other function that returns multiple values, you can hard-code values to be returned to the caller (although this will be a bit harder to test the error case), or you can simply not do this example. If you change the XSUB, be sure to fix the test cases to match the changes.</source>
          <target state="translated">この拡張モジュールは非常に Unix 向けです (statfs 構造体と statfs システムコール)。Unix システム上で動作していない場合は、複数の値を返す他の関数を statfs の代わりにすることもできますし、呼び出し元に返す値をハードコーディングすることもできます (エラーケースをテストするのが少し難しくなりますが)あるいは、単にこの例のようなことをしないこともできます。XSUB を変更した場合は、変更に合わせてテストケースを修正するようにしてください。</target>
        </trans-unit>
        <trans-unit id="2a17a99eab781fe118715bddd6eafc465e544bac" translate="yes" xml:space="preserve">
          <source>This facet appears in a list instead of being a single item.</source>
          <target state="translated">このファセットは、単一の項目ではなく、リストに表示されます。</target>
        </trans-unit>
        <trans-unit id="7adb2f888cd1ff1460814af89b1a8925569507cc" translate="yes" xml:space="preserve">
          <source>This facet can contain any random meta-data that has been attached to the event.</source>
          <target state="translated">このファセットには、イベントにアタッチされたランダムなメタデータを含めることができます。</target>
        </trans-unit>
        <trans-unit id="5f39ea5539b92284678be2bccf399a87e784a440" translate="yes" xml:space="preserve">
          <source>This facet contains information related to when and where the event was generated. This is how the test file and line number of a failure is known. This facet can also help you to tell if tests are related.</source>
          <target state="translated">このファセットには、いつ、どこでイベントが発生したかに関する情報が含まれています。このようにして、障害のテストファイルと行番号を知ることができます。このファセットは、テストが関連しているかどうかを知るのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="ea5933de4fce257c57230d3c2048dd56d25f8eec" translate="yes" xml:space="preserve">
          <source>This facet contains nested events and similar details for subtests. In this facet the &lt;code&gt;details&lt;/code&gt; field will typically be the name of the subtest.</source>
          <target state="translated">このファセットには、ネストされたイベントとサブテストの同様の詳細が含まれています。このファセットでは、 &lt;code&gt;details&lt;/code&gt; フィールドは通常、サブテストの名前になります。</target>
        </trans-unit>
        <trans-unit id="228901b4b4fd688562c63a9bfc644b29832273c3" translate="yes" xml:space="preserve">
          <source>This facet has information about the event, such as event package.</source>
          <target state="translated">このファセットは、イベントのパッケージなど、イベントに関する情報を持っています。</target>
        </trans-unit>
        <trans-unit id="261eefb058d9b8f210edf7e8b66786488a61cb53" translate="yes" xml:space="preserve">
          <source>This facet has the hash key &lt;code&gt;'errors'&lt;/code&gt;, and is a list of facets instead of a single item.</source>
          <target state="translated">このファセットにはハッシュキー &lt;code&gt;'errors'&lt;/code&gt; があり、単一の項目ではなくファセットのリストです。</target>
        </trans-unit>
        <trans-unit id="6d6b311bf3037d57366a4f7b75cd51fe95ab4943" translate="yes" xml:space="preserve">
          <source>This facet is a list type, you can add as many items as needed.</source>
          <target state="translated">このファセットはリスト型で、必要な数だけ項目を追加することができます。</target>
        </trans-unit>
        <trans-unit id="9038beb7c2b76255669cf565bb956421b6792189" translate="yes" xml:space="preserve">
          <source>This facet is used if an assertion was made. The &lt;code&gt;details&lt;/code&gt; field of this facet is the description of the assertion.</source>
          <target state="translated">このファセットは、アサーションが作成された場合に使用されます。このファセットの &lt;code&gt;details&lt;/code&gt; フィールドは、アサーションの説明です。</target>
        </trans-unit>
        <trans-unit id="de3db551858fe84100e4783720b6439f9bd8929d" translate="yes" xml:space="preserve">
          <source>This facet is used to dictate how the event should be rendered by the standard test2 rendering tools. If this facet is present then ONLY what is specified by it will be rendered. It is assumed that anything important or note-worthy will be present here, no other facets will be considered for rendering/display.</source>
          <target state="translated">このファセットは、標準の test2 レンダリングツールでイベントをどのようにレンダリングするかを指定するために使用されます。このファセットが存在する場合、指定されたものだけがレンダリングされます。ここに重要なものや注目すべきものがあると仮定され、他のファセットはレンダリング/表示のために考慮されません。</target>
        </trans-unit>
        <trans-unit id="5cf535cec4856d555110dfbc5a3f81213306c039" translate="yes" xml:space="preserve">
          <source>This facet is used to tell the &lt;a href=&quot;Test2::Event::Hub&quot;&gt;Test2::Event::Hub&lt;/a&gt; about special actions the event causes. Things like halting all testing, terminating the current test, etc. In this facet the &lt;code&gt;details&lt;/code&gt; field explains why any special action was taken.</source>
          <target state="translated">このファセットは、イベントが引き起こす特別なアクションについて&lt;a href=&quot;Test2::Event::Hub&quot;&gt;Test2 :: Event :: Hub&lt;/a&gt;に通知するために使用されます。すべてのテストを停止したり、現在のテストを終了したりするなど。このファセットでは、 &lt;code&gt;details&lt;/code&gt; フィールドに特別なアクションが実行された理由が説明されています。</target>
        </trans-unit>
        <trans-unit id="0fddc25c4dbd645a45a85fc8433a6f59b647f1be" translate="yes" xml:space="preserve">
          <source>This facet is used when an event contains other events, such as a subtest.</source>
          <target state="translated">このファセットは、イベントにサブテストなどの他のイベントが含まれている場合に使用されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
