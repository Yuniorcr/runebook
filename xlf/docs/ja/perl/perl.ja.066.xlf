<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="198821065f8114e37c282b1dc5e2e1e562fb79c1" translate="yes" xml:space="preserve">
          <source>This option takes a parameter that must be a reference to a sub. On entry to the sub the &lt;code&gt;$_&lt;/code&gt; variable will contain the name to be filtered. If no filename is available &lt;code&gt;$_&lt;/code&gt; will contain an empty string.</source>
          <target state="translated">このオプションは、サブルーチンへの参照でなければならないパラメーターを取ります。サブルーチンへの入り口で、 &lt;code&gt;$_&lt;/code&gt; 変数にはフィルターされる名前が含まれます。ファイル名がない場合、 &lt;code&gt;$_&lt;/code&gt; には空の文字列が含まれます。</target>
        </trans-unit>
        <trans-unit id="3c97397612f397cc9803106ff617ed57fcd7bbdd" translate="yes" xml:space="preserve">
          <source>This option was introduced to let you easily customize which</source>
          <target state="translated">このオプションが導入されたことで、簡単にカスタマイズできるようになりました。</target>
        </trans-unit>
        <trans-unit id="478ef92f533a2a64ed38715adae3641923596540" translate="yes" xml:space="preserve">
          <source>This option will uncompress the contents of &lt;code&gt;$string&lt;/code&gt; before processing the input file/buffer.</source>
          <target state="translated">このオプションは、入力ファイル/バッファーを処理する前に &lt;code&gt;$string&lt;/code&gt; の内容を解凍します。</target>
        </trans-unit>
        <trans-unit id="94e79c8cc707f4d220ebc5676b2e7c094b43e26e" translate="yes" xml:space="preserve">
          <source>This option, if set to a true value, suppresses the URL when anchor text is given, so this example would be formatted as just &lt;code&gt;foo&lt;/code&gt; . This can produce less cluttered output in cases where the URLs are not particularly important.</source>
          <target state="translated">このオプションをtrue値に設定すると、アンカーテキストが指定されたときにURLが抑制されるため、この例は &lt;code&gt;foo&lt;/code&gt; としてフォーマットされます。これにより、URLが特に重要ではない場合に、乱雑な出力を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="3c093990608ad560cd2156838664c1a41d4353f2" translate="yes" xml:space="preserve">
          <source>This option, if set to a true value, suppresses the URL when anchor text is given, so this example would be formatted as just &lt;code&gt;foo&lt;/code&gt;. This can produce less cluttered output in cases where the URLs are not particularly important.</source>
          <target state="translated">このオプションをtrue値に設定すると、アンカーテキストが指定されたときにURLが抑制されるため、この例は &lt;code&gt;foo&lt;/code&gt; としてフォーマットされます。これにより、URLが特に重要でない場合に、出力が乱雑になることが少なくなります。</target>
        </trans-unit>
        <trans-unit id="d73e8a9fe84394bb733d349d80f809abc0c71549" translate="yes" xml:space="preserve">
          <source>This overload was introduced in Perl 5.12.</source>
          <target state="translated">このオーバーロードは Perl 5.12 で導入されました。</target>
        </trans-unit>
        <trans-unit id="80f1948b993b572ddd0ded00367d4480f0e1a9dd" translate="yes" xml:space="preserve">
          <source>This overrides all the default install locations. Man pages, libraries, scripts, etc... MakeMaker will try to make an educated guess about where to place things under the new PREFIX based on your Config defaults. Failing that, it will fall back to a structure which should be sensible for your platform.</source>
          <target state="translated">これはデフォルトのインストール場所をすべて上書きします。マニュアルページ、ライブラリ、スクリプトなど。MakeMaker は Config のデフォルト設定に基づいて、新しい PREFIX の下に配置する場所を推測しようとします。それに失敗した場合は、あなたのプラットフォームに適した構造に戻ります。</target>
        </trans-unit>
        <trans-unit id="444e5337bdc60ac371985ae433717f80c0fb2273" translate="yes" xml:space="preserve">
          <source>This overrides the default behavior of &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; inside the newly created thread only.</source>
          <target state="translated">これは、新しく作成されたスレッド内でのみ、 &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; のデフォルトの動作をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="24a3ff23ecaa6a599f398f1b05a599f96ef89aff" translate="yes" xml:space="preserve">
          <source>This overrides the default behavior of &lt;code&gt;exit()&lt;/code&gt; inside the newly created thread only.</source>
          <target state="translated">これは、新しく作成されたスレッド内でのみ、 &lt;code&gt;exit()&lt;/code&gt; のデフォルトの動作をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="54817ecdea72dd0f8dad14e4e986821245f79bb0" translate="yes" xml:space="preserve">
          <source>This package &lt;code&gt;ISA&lt;/code&gt; IO::File, so that you can call IO::File methods on the handles returned by &lt;code&gt;vmsopen&lt;/code&gt; and &lt;code&gt;vmssysopen&lt;/code&gt;. The IO::File package is not initialized, however, until you actually call a method that VMS::Stdio doesn't provide. This is done to save startup time for users who don't wish to use the IO::File methods.</source>
          <target state="translated">このパッケージは &lt;code&gt;ISA&lt;/code&gt; IO ::ファイルは、あなたがによって返されたハンドル上のIO ::ファイルのメソッドを呼び出すことができ &lt;code&gt;vmsopen&lt;/code&gt; と &lt;code&gt;vmssysopen&lt;/code&gt; を。ただし、VMS :: Stdioが提供しないメソッドを実際に呼び出すまで、IO :: Fileパッケージは初期化されません。これは、IO :: Fileメソッドを使用したくないユーザーの起動時間を節約するために行われます。</target>
        </trans-unit>
        <trans-unit id="519b8612e911f1f56d7cf335d416b8b3e0b034ae" translate="yes" xml:space="preserve">
          <source>This package allows a tied hash to autoload its values on the first access, and to use the cached value on the following accesses.</source>
          <target state="translated">本パッケージでは、最初のアクセスで紐付けられたハッシュの値を自動ロードし、 次のアクセスでキャッシュされた値を使用することを可能にします。</target>
        </trans-unit>
        <trans-unit id="0dd12631c6783b870d8636d280593396cecef2aa" translate="yes" xml:space="preserve">
          <source>This package assumes your instances are blessed hashrefs, it will not work if that is not true. It will store all meta-data in the &lt;code&gt;_meta&lt;/code&gt; key on your objects hash. If your object makes use of the &lt;code&gt;_meta&lt;/code&gt; key in its underlying hash, then there is a conflict and you cannot use this package.</source>
          <target state="translated">このパッケージは、インスタンスが祝福されたハッシュ参照であることを前提としています。それが当てはまらない場合は機能しません。オブジェクトハッシュの &lt;code&gt;_meta&lt;/code&gt; キーにすべてのメタデータを保存します。オブジェクトが基になるハッシュで &lt;code&gt;_meta&lt;/code&gt; キーを使用している場合、競合が発生し、このパッケージを使用できません。</target>
        </trans-unit>
        <trans-unit id="27ef3cf0031676169d1650659bd8ca01863df483" translate="yes" xml:space="preserve">
          <source>This package exports all the functions necessary to write and/or verify testing tools. Using these building blocks you can begin writing test tools very quickly. You are also provided with tools that help you to test the tools you write.</source>
          <target state="translated">本パッケージは、テストツールの作成や検証に必要なすべての関数をエクスポートします。これらの構成要素を使用することで、テストツールを非常に早く書き始めることができます。また、作成したツールをテストするのに役立つツールも提供されています。</target>
        </trans-unit>
        <trans-unit id="24fee1df4d3c220048420e934bfa1571230d5dc6" translate="yes" xml:space="preserve">
          <source>This package gives Perl scripts access via VMS extensions to several C stdio operations not available through Perl's CORE I/O functions. The specific routines are described below. These functions are prototyped as unary operators, with the exception of &lt;code&gt;vmsopen&lt;/code&gt; and &lt;code&gt;vmssysopen&lt;/code&gt;, which can take any number of arguments, and &lt;code&gt;tmpnam&lt;/code&gt;, which takes none.</source>
          <target state="translated">このパッケージは、PerlスクリプトがVMS拡張機能を介して、PerlのCORE I / O関数では利用できないいくつかのCstdio操作にアクセスできるようにします。具体的なルーチンを以下に説明します。これらの関数は単項演算子としてプロトタイプ化されていますが、 &lt;code&gt;vmsopen&lt;/code&gt; と &lt;code&gt;vmssysopen&lt;/code&gt; は任意の数の引数を取ることができ、 &lt;code&gt;tmpnam&lt;/code&gt; は何も取りません。</target>
        </trans-unit>
        <trans-unit id="117523179eb4686be1091dc68328b55978f9a6f5" translate="yes" xml:space="preserve">
          <source>This package has an END block. This END block is responsible for setting the exit code based on the test results. This end block also calls the callbacks that can be added to this package.</source>
          <target state="translated">本パッケージには、END ブロックがあります。この END ブロックは、テスト結果に基づいて終了コードを設定する役割を担っています。また、このENDブロックは、このパッケージに追加できるコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="52216942838934faafa12f993b9e33de2dc6a37f" translate="yes" xml:space="preserve">
          <source>This package has been part of the perl core since perl 5.001. It has been released separately to CPAN so older installations can benefit from bug fixes.</source>
          <target state="translated">このパッケージは perl 5.001 以降の perl コアの一部です。CPAN には個別にリリースされているので、古いインストールでもバグ修正の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="a2c6b0ed0d74189431901579ee94937bb8d4ce64" translate="yes" xml:space="preserve">
          <source>This package has been part of the perl core since the first release of perl5. It has been released separately to CPAN so older installations can benefit from bug fixes.</source>
          <target state="translated">このパッケージは perl5 の最初のリリースから perl コアの一部です。CPAN には個別にリリースされているので、古いインストールでもバグ修正の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="8604a04f6b263dfa751e272224470b230a03d1e8" translate="yes" xml:space="preserve">
          <source>This package has the same copyright and license as the perl core.</source>
          <target state="translated">このパッケージは perl コアと同じ著作権とライセンスを持っています。</target>
        </trans-unit>
        <trans-unit id="5b6805fe29e54bd4efe3c6b5cfa333a68b6dd7e7" translate="yes" xml:space="preserve">
          <source>This package has the same copyright and license as the perl core:</source>
          <target state="translated">このパッケージは perl コアと同じ著作権とライセンスを持っています。</target>
        </trans-unit>
        <trans-unit id="3dd0926d44817739b9d6d9f6b9c878553eedc873" translate="yes" xml:space="preserve">
          <source>This package has the same functionality as CPAN.pm, but tries to prevent the usage of compiled extensions during its own execution. Its primary purpose is a rescue in case you upgraded perl and broke binary compatibility somehow.</source>
          <target state="translated">このパッケージは CPAN.pm と同じ機能を持っていますが、自身の実行中にコンパイルされた拡張機能が使用されるのを防ごうとします。主な目的は、Perl をアップグレードしてバイナリ互換性を壊してしまった場合の救済です。</target>
        </trans-unit>
        <trans-unit id="5ec260b88b13584e3875f1a95d421c8de3085165" translate="yes" xml:space="preserve">
          <source>This package is free software and is provided &quot;as is&quot; without express or implied warranty. It may be used, redistributed and/or modified under the same terms as Perl itself.</source>
          <target state="translated">本パッケージはフリーソフトウェアであり、明示または黙示の保証なしに「現状のまま」提供されます。Perl 自体と同じ条件で使用、再配布、改変することができます。</target>
        </trans-unit>
        <trans-unit id="8d169e6cde7a05a46328dee15bc92ea9fbd31c5a" translate="yes" xml:space="preserve">
          <source>This package is just a front end to some other packages. It's a stub to set up a common interface to the various ReadLine implementations found on CPAN (under the &lt;code&gt;Term::ReadLine::*&lt;/code&gt; namespace).</source>
          <target state="translated">このパッケージは、他のいくつかのパッケージのフロントエンドにすぎません。これは、CPAN（ &lt;code&gt;Term::ReadLine::*&lt;/code&gt; 名前空間の下）にあるさまざまなReadLine実装への共通インターフェースをセットアップするためのスタブです。</target>
        </trans-unit>
        <trans-unit id="b1ade6c9a8f018d0fad6780df5d177f32fbb0e0d" translate="yes" xml:space="preserve">
          <source>This package is meant as a base of Pod::Perldoc formatters, like &lt;a href=&quot;Pod::Perldoc::ToText&quot;&gt;Pod::Perldoc::ToText&lt;/a&gt;, &lt;a href=&quot;Pod::Perldoc::ToMan&quot;&gt;Pod::Perldoc::ToMan&lt;/a&gt;, etc.</source>
          <target state="translated">このパッケージは、&lt;a href=&quot;Pod::Perldoc::ToMan&quot;&gt;Pod :: &lt;/a&gt;&lt;a href=&quot;Pod::Perldoc::ToText&quot;&gt;Perldoc :: ToText&lt;/a&gt;、Pod :: Perldoc :: ToManなど、Pod :: Perldocフォーマッターのベースとして使用されます。</target>
        </trans-unit>
        <trans-unit id="ce76c6c4371370495517baf3705b461101fff8c7" translate="yes" xml:space="preserve">
          <source>This package is meant as a base of Pod::Perldoc formatters, like &lt;a href=&quot;totext&quot;&gt;Pod::Perldoc::ToText&lt;/a&gt;, &lt;a href=&quot;toman&quot;&gt;Pod::Perldoc::ToMan&lt;/a&gt;, etc.</source>
          <target state="translated">このパッケージは、&lt;a href=&quot;toman&quot;&gt;Pod :: &lt;/a&gt;&lt;a href=&quot;totext&quot;&gt;Perldoc :: ToText&lt;/a&gt;、Pod :: Perldoc :: ToManなどのPod :: Perldocフォーマッターのベースとして使用されます。</target>
        </trans-unit>
        <trans-unit id="9180a230452e68871f0598e03ac17371f08687f4" translate="yes" xml:space="preserve">
          <source>This package is still a work in progress. ;-)</source>
          <target state="translated">このパッケージはまだ作業中です。)</target>
        </trans-unit>
        <trans-unit id="e14216db6d6f543013d22d6e863cfe0d56fedf31" translate="yes" xml:space="preserve">
          <source>This package is used to generate classes based on hashrefs. Using this class will give you a &lt;code&gt;new()&lt;/code&gt; method, as well as generating accessors you request. Generated accessors will be getters, &lt;code&gt;set_ACCESSOR&lt;/code&gt; setters will also be generated for you. You also get constants for each accessor (all caps) which return the key into the hash for that accessor. Single inheritance is also supported.</source>
          <target state="translated">このパッケージは、ハッシュ参照に基づいてクラスを生成するために使用されます。このクラスを使用すると、 &lt;code&gt;new()&lt;/code&gt; メソッドが提供されるだけでなく、要求するアクセサーが生成されます。生成されるアクセサーはゲッターになり、 &lt;code&gt;set_ACCESSOR&lt;/code&gt; セッターも生成されます。また、各アクセサーの定数（すべて大文字）を取得して、そのアクセサーのハッシュにキーを返します。単一継承もサポートされています。</target>
        </trans-unit>
        <trans-unit id="5132ab88c97f356a0cb81785c11fd445555c2f78" translate="yes" xml:space="preserve">
          <source>This package lets you create and manipulate complex numbers. By default,</source>
          <target state="translated">このパッケージを使用すると、複素数を作成したり操作したりすることができます。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="a170bd1eff2041ac0d0ac79f2c0ec18d1fc8c0b5" translate="yes" xml:space="preserve">
          <source>This package lets you define a clear, and consistent way to allow third party tools to attach meta-data to your instances. If your object consumes this package, and imports its methods, then third party meta-data has a safe place to live.</source>
          <target state="translated">このパッケージを使用すると、サードパーティのツールがメタデータをインスタンスにアタッチできるように、明確で一貫性のある方法を定義することができます。オブジェクトがこのパッケージを消費し、そのメソッドをインポートすれば、サードパーティのメタデータは安全な場所に置かれます。</target>
        </trans-unit>
        <trans-unit id="c027490dcb5b2efb5529d5116c08443a95ca1c4a" translate="yes" xml:space="preserve">
          <source>This package provides routines to simplify conversion between VMS and Unix syntax when processing file specifications. This is useful when porting scripts designed to run under either OS, and also allows you to take advantage of conveniences provided by either syntax (</source>
          <target state="translated">本パッケージは、ファイル指定を処理する際に、VMS と Unix の構文間の変換を簡単にするルーチンを提供します。これは、どちらの OS でも動作するように設計されたスクリプトを移植する際に便利ですし、どちらかの構文が提供する便利な機能 (</target>
        </trans-unit>
        <trans-unit id="11a96a3b10a148099f0b7f72edfecfa081ed012b" translate="yes" xml:space="preserve">
          <source>This package represents what is expected in units of amnesty.</source>
          <target state="translated">このパッケージは、アムネスティの単位で期待されるものを表しています。</target>
        </trans-unit>
        <trans-unit id="733cf8ccc54fc2caec2b129c7f9c3b8fe256f776" translate="yes" xml:space="preserve">
          <source>This package supplies the following functions, all of which should be called as methods.</source>
          <target state="translated">本パッケージでは、以下の関数を提供しています。</target>
        </trans-unit>
        <trans-unit id="3cfaecafb317f7a283c4d709b1fe33fabf00ba94" translate="yes" xml:space="preserve">
          <source>This package variable is used by code which needs to generate random numbers (such as the &lt;a href=&quot;#shuffle&quot;&gt;&quot;shuffle&quot;&lt;/a&gt; and &lt;a href=&quot;#sample&quot;&gt;&quot;sample&quot;&lt;/a&gt; functions). If set to a CODE reference it provides an alternative to perl's builtin &lt;code&gt;rand()&lt;/code&gt; function. When a new random number is needed this function will be invoked with no arguments and is expected to return a floating-point value, of which only the fractional part will be used.</source>
          <target state="translated">このパッケージ変数は、乱数を生成する必要のあるコード（&lt;a href=&quot;#shuffle&quot;&gt;「シャッフル&lt;/a&gt;&lt;a href=&quot;#sample&quot;&gt;」&lt;/a&gt;関数や「サンプル」関数など）によって使用されます。CODE参照に設定すると、perlの組み込み &lt;code&gt;rand()&lt;/code&gt; 関数の代わりになります。新しい乱数が必要な場合、この関数は引数なしで呼び出され、浮動小数点値を返すことが期待されます。浮動小数点値のうち、小数部分のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="0502ae210c839a0d5612b4c49c9ee0a00914b58d" translate="yes" xml:space="preserve">
          <source>This packs &lt;code&gt;3*@buffer&lt;/code&gt; bytes, but it turns out that the size of &lt;code&gt;buffer_t&lt;/code&gt; is four times &lt;code&gt;BUFLEN&lt;/code&gt; ! The moral of the story is that the required alignment of a structure or array is propagated to the next higher level where we have to consider padding</source>
          <target state="translated">これは &lt;code&gt;3*@buffer&lt;/code&gt; バイトをパックしますが、 &lt;code&gt;buffer_t&lt;/code&gt; のサイズはBUFLENの 4倍であることが &lt;code&gt;BUFLEN&lt;/code&gt; ます！ストーリーの教訓は、構造または配列の必要な配置が、パディングを考慮する必要がある次のより高いレベルに伝播されることです。</target>
        </trans-unit>
        <trans-unit id="e53c590bd241b677c54acd7fcca9e80edc4d08e4" translate="yes" xml:space="preserve">
          <source>This packs &lt;code&gt;3*@buffer&lt;/code&gt; bytes, but it turns out that the size of &lt;code&gt;buffer_t&lt;/code&gt; is four times &lt;code&gt;BUFLEN&lt;/code&gt;! The moral of the story is that the required alignment of a structure or array is propagated to the next higher level where we have to consider padding</source>
          <target state="translated">これは &lt;code&gt;3*@buffer&lt;/code&gt; バイトをパックしますが、 &lt;code&gt;buffer_t&lt;/code&gt; のサイズはBUFLENの4倍であることが &lt;code&gt;BUFLEN&lt;/code&gt; ます。この話の教訓は、構造体または配列の必要な配置が、パディングを検討する必要がある次の上位レベルに伝播されることです。</target>
        </trans-unit>
        <trans-unit id="d6a4741dfc9d84d06564831e13aad41055715be9" translate="yes" xml:space="preserve">
          <source>This page assumes you already know things, like what a &quot;pattern&quot; is, and the basic syntax of using them. If you don't, see &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;.</source>
          <target state="translated">このページは、「パターン」とは何か、それらを使用するための基本的な構文など、すでに知っていることを前提としています。そうでない場合は、&lt;a href=&quot;perlretut&quot;&gt;perlretutを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="946e326f892b4b8b1ddce244173724cf9a7d1bb8" translate="yes" xml:space="preserve">
          <source>This page covers the very basics of understanding, creating and using regular expressions ('regexes') in Perl.</source>
          <target state="translated">このページでは、Perl の正規表現 ('regex')を理解し、作成し、使用するための非常に基本的なことを説明します。</target>
        </trans-unit>
        <trans-unit id="dce9886ab9b0a9a0def511caa51f7fe80e84aea2" translate="yes" xml:space="preserve">
          <source>This page describes the syntax of regular expressions in Perl.</source>
          <target state="translated">このページでは、Perlにおける正規表現の構文について説明します。</target>
        </trans-unit>
        <trans-unit id="317e90a756283c2e548a97a6d078f31d1baf3825" translate="yes" xml:space="preserve">
          <source>This page provides a basic tutorial on understanding, creating and using regular expressions in Perl. It serves as a complement to the reference page on regular expressions &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;. Regular expressions are an integral part of the &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; operators and so this tutorial also overlaps with &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt; and &lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;.</source>
          <target state="translated">このページでは、Perlでの正規表現の理解、作成、使用に関する基本的なチュートリアルを提供します。これは、正規表現&lt;a href=&quot;perlre&quot;&gt;perlreの&lt;/a&gt;リファレンスページを補足するものです。正規表現は &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 演算子の不可欠な部分であるため、このチュートリアルも&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;perlop&lt;/a&gt;および&lt;a href=&quot;functions/split&quot;&gt;splitの&lt;/a&gt;Regexp引用型演算子と重複しています。</target>
        </trans-unit>
        <trans-unit id="7d5a131e3270619460abdb9845cd688fb5a50600" translate="yes" xml:space="preserve">
          <source>This page provides a basic tutorial on understanding, creating and using regular expressions in Perl. It serves as a complement to the reference page on regular expressions &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;. Regular expressions are an integral part of the &lt;code&gt;m//&lt;/code&gt;, &lt;code&gt;s///&lt;/code&gt;, &lt;code&gt;qr//&lt;/code&gt; and &lt;code&gt;split&lt;/code&gt; operators and so this tutorial also overlaps with &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt; and &lt;a href=&quot;perlfunc#split&quot;&gt;&quot;split&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">このページでは、Perlでの正規表現の理解、作成、および使用に関する基本的なチュートリアルを提供します。これは、正規表現&lt;a href=&quot;perlre&quot;&gt;perlreの&lt;/a&gt;リファレンスページを補完するものとして機能します。正規表現は &lt;code&gt;m//&lt;/code&gt; 、 &lt;code&gt;s///&lt;/code&gt; 、 &lt;code&gt;qr//&lt;/code&gt; および &lt;code&gt;split&lt;/code&gt; 演算子の不可欠な部分であるため、このチュートリアルは&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;、perlopの&lt;/a&gt;&lt;a href=&quot;perlfunc#split&quot;&gt;「&lt;/a&gt;RegexpQuote-LikeOperators 」およびperlfuncの「split」とも重複しています。</target>
        </trans-unit>
        <trans-unit id="5dd11d6815b6bbd5757b2908c5f7f36d9fc65ef7" translate="yes" xml:space="preserve">
          <source>This parameter allows additional metadata to be stored in the ExtraField in the gzip header. An RFC 1952 compliant ExtraField consists of zero or more subfields. Each subfield consists of a two byte header followed by the subfield data.</source>
          <target state="translated">このパラメータは、追加のメタデータを gzip ヘッダの ExtraField に格納することを可能にする。RFC 1952 準拠の ExtraField は、0 個以上のサブフィールドで構成される。各サブフィールドは、2 バイトのヘッダとサブフィールドデータの後に続く 2 バイトのヘッダで構成されています。</target>
        </trans-unit>
        <trans-unit id="6c5f89c77abee951f08c51fc642a03fa6b870eac" translate="yes" xml:space="preserve">
          <source>This parameter controls the setting of a bit in the zip central header. It is used to signal that the data stored in the zip file/buffer is probably text.</source>
          <target state="translated">このパラメータは、zip の中央ヘッダのビットの設定を制御します。これは、zip ファイル/バッファに保存されているデータがおそらくテキストであることを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="f7ab5c8a3bc9a88a9534a62193fcda4a2a345ca3" translate="yes" xml:space="preserve">
          <source>This parameter controls the setting of the FLG.FTEXT bit in the gzip header. It is used to signal that the data stored in the gzip file/buffer is probably text.</source>
          <target state="translated">このパラメータは、gzip ヘッダの FLG.FTEXT ビットの設定を制御する。これは、gzip ファイル/バッファに格納されているデータがテキストであることを示すために使用される。</target>
        </trans-unit>
        <trans-unit id="1d135fdd7e0c9609625dc055c076f0bab706088f" translate="yes" xml:space="preserve">
          <source>This parameter defaults to 0.</source>
          <target state="translated">このパラメータの既定値は 0 です。</target>
        </trans-unit>
        <trans-unit id="a954f8a244020c9f424e9822cfad5459a2f5fec4" translate="yes" xml:space="preserve">
          <source>This parameter is ignored.</source>
          <target state="translated">このパラメータは無視されます。</target>
        </trans-unit>
        <trans-unit id="3095070e85d1a1b0788b86dc1c47569b11d0ecb4" translate="yes" xml:space="preserve">
          <source>This parameter is used to specify the ambient pragmas which are stored in the special hash %^H.</source>
          <target state="translated">このパラメータは、特別なハッシュ %^H に格納されているアンビエントプラ グマを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="aaafa45d95b04bd8c01708fb5fdd297ddbefc3b4" translate="yes" xml:space="preserve">
          <source>This parameter takes precedence over the &lt;code&gt;Local*&lt;/code&gt;, &lt;code&gt;Family&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Proto&lt;/code&gt; arguments.</source>
          <target state="translated">このパラメーターは、 &lt;code&gt;Local*&lt;/code&gt; 、 &lt;code&gt;Family&lt;/code&gt; 、 &lt;code&gt;Type&lt;/code&gt; 、および &lt;code&gt;Proto&lt;/code&gt; 引数よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="144cb2f166d202c7f6fa31b74b5f72c47f93cb09" translate="yes" xml:space="preserve">
          <source>This parameter takes precedence over the &lt;code&gt;Peer*&lt;/code&gt;, &lt;code&gt;Family&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Proto&lt;/code&gt; arguments.</source>
          <target state="translated">このパラメーターは、 &lt;code&gt;Peer*&lt;/code&gt; 、 &lt;code&gt;Family&lt;/code&gt; 、 &lt;code&gt;Type&lt;/code&gt; 、および &lt;code&gt;Proto&lt;/code&gt; 引数よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="e57f8e4024e58b80873e8cbfaa23d47d4d596bfc" translate="yes" xml:space="preserve">
          <source>This parameter works like &lt;code&gt;overrideCJK&lt;/code&gt; , so see there for examples.</source>
          <target state="translated">このパラメーターは &lt;code&gt;overrideCJK&lt;/code&gt; のように機能するので、例を参照してください。</target>
        </trans-unit>
        <trans-unit id="51565d89891bf2948d91c1cc64dabcc98c8f8a0a" translate="yes" xml:space="preserve">
          <source>This parameter works like &lt;code&gt;overrideCJK&lt;/code&gt;, so see there for examples.</source>
          <target state="translated">このパラメーターは &lt;code&gt;overrideCJK&lt;/code&gt; のように機能するため、例についてはこちらを参照してください。</target>
        </trans-unit>
        <trans-unit id="ac9494fe5df3170e77a2748f1c2b29eb01128b21" translate="yes" xml:space="preserve">
          <source>This pattern matches nothing and always fails. It can be used to force the engine to backtrack. It is equivalent to &lt;code&gt;(?!)&lt;/code&gt;, but easier to read. In fact, &lt;code&gt;(?!)&lt;/code&gt; gets optimised into &lt;code&gt;(*FAIL)&lt;/code&gt; internally.</source>
          <target state="translated">このパターンは何にも一致せず、常に失敗します。エンジンを強制的に後退させるために使用できます。 &lt;code&gt;(?!)&lt;/code&gt; と同じですが、読みやすくなっています。実際、 &lt;code&gt;(?!)&lt;/code&gt; は内部で &lt;code&gt;(*FAIL)&lt;/code&gt; に最適化されます。</target>
        </trans-unit>
        <trans-unit id="6fc6c7ad71aa7736bfa3c0da48319c974555eb05" translate="yes" xml:space="preserve">
          <source>This pattern matches nothing and always fails. It can be used to force the engine to backtrack. It is equivalent to &lt;code&gt;(?!)&lt;/code&gt;, but easier to read. In fact, &lt;code&gt;(?!)&lt;/code&gt; gets optimised into &lt;code&gt;(*FAIL)&lt;/code&gt; internally. You can provide an argument so that if the match fails because of this &lt;code&gt;FAIL&lt;/code&gt; directive the argument can be obtained from &lt;code&gt;$REGERROR&lt;/code&gt;.</source>
          <target state="translated">このパターンは何にも一致せず、常に失敗します。エンジンを強制的にバックトラックさせるために使用できます。 &lt;code&gt;(?!)&lt;/code&gt; と同等ですが、読みやすくなっています。実際、 &lt;code&gt;(?!)&lt;/code&gt; は内部で &lt;code&gt;(*FAIL)&lt;/code&gt; に最適化されます。この &lt;code&gt;FAIL&lt;/code&gt; ディレクティブが原因で一致が失敗した場合に、引数を &lt;code&gt;$REGERROR&lt;/code&gt; から取得できるように、引数を指定できます。</target>
        </trans-unit>
        <trans-unit id="9d7331a8c75f2ab7015003fc1a186b402d4f4b0f" translate="yes" xml:space="preserve">
          <source>This pattern matches nothing and causes the end of successful matching at the point at which the &lt;code&gt;(*ACCEPT)&lt;/code&gt; pattern was encountered, regardless of whether there is actually more to match in the string. When inside of a nested pattern, such as recursion, or in a subpattern dynamically generated via &lt;code&gt;(??{})&lt;/code&gt; , only the innermost pattern is ended immediately.</source>
          <target state="translated">このパターンは何にも一致せず、文字列内に実際に一致するものがまだあるかどうかに関係なく、 &lt;code&gt;(*ACCEPT)&lt;/code&gt; パターンが検出された時点で一致の終了を引き起こします。再帰などのネストされたパターンの内部、または &lt;code&gt;(??{})&lt;/code&gt; を介して動的に生成されたサブパターンでは、最も内側のパターンのみがすぐに終了します。</target>
        </trans-unit>
        <trans-unit id="67ca6793aa1baf492f23da59c43d48ed60e5c55a" translate="yes" xml:space="preserve">
          <source>This pattern matches nothing and causes the end of successful matching at the point at which the &lt;code&gt;(*ACCEPT)&lt;/code&gt; pattern was encountered, regardless of whether there is actually more to match in the string. When inside of a nested pattern, such as recursion, or in a subpattern dynamically generated via &lt;code&gt;(??{})&lt;/code&gt;, only the innermost pattern is ended immediately.</source>
          <target state="translated">このパターンは何にも一致せず、文字列に実際に一致するものがまだあるかどうかに関係なく、 &lt;code&gt;(*ACCEPT)&lt;/code&gt; パターンが検出された時点で正常な一致が終了します。再帰などのネストされたパターンの内部、または &lt;code&gt;(??{})&lt;/code&gt; を介して動的に生成されたサブパターンの内部では、最も内側のパターンのみがすぐに終了します。</target>
        </trans-unit>
        <trans-unit id="19f045887dd160fbc7bf52fef1325dee9e3b92d8" translate="yes" xml:space="preserve">
          <source>This perl distribution comes with a tremendous amount of documentation. To add these to the built-in manuals that come with Plan 9, from /sys/src/cmd/perl/5.00301 (adjust version appropriately) run:</source>
          <target state="translated">この perl ディストリビューションには、膨大な量のドキュメントが付属しています。Plan 9 に付属しているビルトインマニュアルに追加するには、/sys/src/cmd/perl/5.00301 (バージョンを適切に調整して)を実行してください。</target>
        </trans-unit>
        <trans-unit id="faaee2dbff571e442cc459d64235bf7e75251410" translate="yes" xml:space="preserve">
          <source>This phase is not called &quot;BEGIN&quot; to avoid confusion with &lt;code&gt;BEGIN&lt;/code&gt; -blocks, as those are executed during compile-time of any compilation unit, not just the top-level program. A new, localised compile-time entered at run-time, for example by constructs as &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; &quot;use SomeModule&quot;&lt;/code&gt; are not global interpreter phases, and therefore aren't reflected by &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; .</source>
          <target state="translated">このフェーズは、 &lt;code&gt;BEGIN&lt;/code&gt; ブロックとの混乱を避けるために「BEGIN」と呼ばれていません。これらのブロックは、トップレベルプログラムだけでなく、コンパイルユニットのコンパイル時に実行されるためです。たとえば &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; &quot;use SomeModule&quot;&lt;/code&gt; として構成によって実行時に入力される新しいローカライズされたコンパイル時間は、グローバルインタープリターフェーズではないため、 &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; は反映されません。</target>
        </trans-unit>
        <trans-unit id="5c6076111df5ac2088f7c60ba538962c1ba1518f" translate="yes" xml:space="preserve">
          <source>This phase is not called &quot;BEGIN&quot; to avoid confusion with &lt;code&gt;BEGIN&lt;/code&gt;-blocks, as those are executed during compile-time of any compilation unit, not just the top-level program. A new, localised compile-time entered at run-time, for example by constructs as &lt;code&gt;eval &quot;use SomeModule&quot;&lt;/code&gt; are not global interpreter phases, and therefore aren't reflected by &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt;.</source>
          <target state="translated">このフェーズは、最上位プログラムだけでなく、任意のコンパイルユニットのコンパイル時に実行されるため、 &lt;code&gt;BEGIN&lt;/code&gt; ブロックとの混同を避けるために「BEGIN」とは呼ばれません。実行時に入力された新しいローカライズされたコンパイル時。たとえば、 &lt;code&gt;eval &quot;use SomeModule&quot;&lt;/code&gt; としてコンストラクトによって入力されたものは、グローバルインタープリターフェーズではないため、 &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; は反映されません。</target>
        </trans-unit>
        <trans-unit id="38d412691b698918f3fb521b6c5dd0a3a033324a" translate="yes" xml:space="preserve">
          <source>This pipes &quot;foo&quot; to the &quot;less&quot; pager and prints &quot;bar&quot; on the console:</source>
          <target state="translated">これは &quot;foo&quot; を &quot;less&quot; ページャーにパイプし、コンソールに &quot;bar&quot; を表示します。</target>
        </trans-unit>
        <trans-unit id="aa4d6fbd955f7e5cef0d107f07af92fd7a485df2" translate="yes" xml:space="preserve">
          <source>This pipes &quot;foo&quot; to the pager and writes &quot;bar&quot; in the file &quot;blurch&quot;:</source>
          <target state="translated">これは &quot;foo &quot;をページャーにパイプして、&quot;bar &quot;をファイル &quot;blurch &quot;に書き込む。</target>
        </trans-unit>
        <trans-unit id="f5e952eb46ee9ecbd24ef00bffe49334d2cc3dad" translate="yes" xml:space="preserve">
          <source>This pipes &quot;foo\nbar\n&quot; to the less pager:</source>
          <target state="translated">これは、「foo\nbarn」を、ページャーの少ない方にパイプしている。</target>
        </trans-unit>
        <trans-unit id="9ef24b3495020011602b2e6eab8942a1d3d9b7c9" translate="yes" xml:space="preserve">
          <source>This port can also be built on IA64/AMD64 using:</source>
          <target state="translated">このポートは、IA64/AMD64を使用してIA64/AMD64上に構築することもできます。</target>
        </trans-unit>
        <trans-unit id="ca794b2a97ff2f3e9f3ab8b1358dfca57eef50e2" translate="yes" xml:space="preserve">
          <source>This port currently supports MakeMaker (the set of modules that is used to build extensions to perl). Therefore, you should be able to build and install most extensions found in the CPAN sites.</source>
          <target state="translated">このポートは現在、MakeMaker (Perl の拡張機能を構築するために使用されるモジュールのセット)をサポートしています。したがって、CPAN サイトにあるほとんどの拡張モジュールをビルドしてインストールすることができるはずです。</target>
        </trans-unit>
        <trans-unit id="793aa06cc8a67a48ad4353d4f7baf40b5e8a8732" translate="yes" xml:space="preserve">
          <source>This port fully supports MakeMaker (the set of modules that is used to build extensions to perl). Therefore, you should be able to build and install most extensions found in the CPAN sites. See &lt;a href=&quot;#Usage-Hints-for-Perl-on-Windows&quot;&gt;&quot;Usage Hints for Perl on Windows&quot;&lt;/a&gt; below for general hints about this.</source>
          <target state="translated">このポートは、MakeMaker（perlの拡張機能を構築するために使用されるモジュールのセット）を完全にサポートします。したがって、CPANサイトにあるほとんどの拡張機能をビルドしてインストールできるはずです。これに関する一般的なヒントについては、以下の&lt;a href=&quot;#Usage-Hints-for-Perl-on-Windows&quot;&gt;「WindowsでのPerlの使用上のヒント」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="da8d54e517da55f89f98bd5f4b007e4f6e30203a" translate="yes" xml:space="preserve">
          <source>This port fully supports MakeMaker (the set of modules that is used to build extensions to perl). Therefore, you should be able to build and install most extensions found in the CPAN sites. See &lt;a href=&quot;#Usage-Hints-for-Perl-on-Windows&quot;&gt;Usage Hints for Perl on Windows&lt;/a&gt; below for general hints about this.</source>
          <target state="translated">この移植版はMakeMaker（perlの拡張機能のビルドに使用される一連のモジュール）を完全にサポートしています。したがって、CPANサイトにあるほとんどの拡張機能をビルドしてインストールできるはずです。これに関する一般的なヒントについては、以下の&lt;a href=&quot;#Usage-Hints-for-Perl-on-Windows&quot;&gt;WindowsでのPerlの使用に関するヒントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eca5da1d69d15505d5dfe7b2200728b9e2a69857" translate="yes" xml:space="preserve">
          <source>This port of Perl also uses Unix-epoch date values internally. As long as you are dealing with ASCII character string representations of dates, this should not be an issue. The supported epoch is January 1, 1980 to January 17, 2038.</source>
          <target state="translated">Perl のこの移植版では、内部的に Unix-epoch の日付値も使用しています。ASCII 文字列による日付表現を扱う限り、これは問題ではありません。サポートされているエポックは 1980 年 1 月 1 日から 2038 年 1 月 17 日までです。</target>
        </trans-unit>
        <trans-unit id="3b59478e1d9adc5bbc9ae74efe6d7c2a8e595477" translate="yes" xml:space="preserve">
          <source>This port of Perl version 5 prefers Unix-style, slash-separated pathnames over OpenVOS-style greater-than-separated pathnames. OpenVOS-style pathnames should work in most contexts, but if you have trouble, replace all greater-than characters by slash characters. Because the slash character is used as a pathname delimiter, Perl cannot process OpenVOS pathnames containing a slash character in a directory or file name; these must be renamed.</source>
          <target state="translated">Perl バージョン 5 のこの移植版では、OpenVOS スタイルのgreater-than-separated パス名よりも Unix スタイルの slash-separated パス名が好まれています。OpenVOS スタイルのパス名はほとんどの文脈で動作するはずですが、問題がある場合は、すべてのgreater-than キ ャラクタをスラッシュ文字に置き換えてください。スラッシュ文字はパス名の区切り文字として使用されるため、Perl はディレクトリやファイル名にスラッシュ文字を含む OpenVOS パス名を処理することができません。</target>
        </trans-unit>
        <trans-unit id="5661c31774bac29706eeedad5ca0b82e3ef23fed" translate="yes" xml:space="preserve">
          <source>This port was originally contributed by Gary Ng around 5.003_24, and borrowed from the Hip Communications port that was available at the time. Various people have made numerous and sundry hacks since then.</source>
          <target state="translated">このポートはもともと Gary Ng が 5.003_24 頃に投稿したもので、当時利用可能だった Hip Communications のポートを借りたものです。それ以来、様々な人が様々なハックをしてきました。</target>
        </trans-unit>
        <trans-unit id="791faea88ef9fd32067c73f960fb805edbc087f6" translate="yes" xml:space="preserve">
          <source>This port will support dynamic loading, but it is not selected by default. If you would like to experiment with dynamic loading then be sure to specify -Dusedl in the arguments to the Configure script. See the comments in hints/os390.sh for more information on dynamic loading. If you build with dynamic loading then you will need to add the $archlibexp/CORE directory to your LIBPATH environment variable in order for perl to work. See the config.sh file for the value of $archlibexp. If in trying to use Perl you see an error message similar to:</source>
          <target state="translated">このポートはダイナミックロードをサポートしますが、デフォルトでは選択されていません。ダイナミックローディングを試したい場合は、 Configure スクリプトの引数に -Dusedl を指定してください。ダイナミックロードの詳細については hints/os390.sh のコメントを参照してください。ダイナミックローディングを使ってビルドした場合、perlが動作するためには$archlibexp/COREディレクトリをLIBPATH環境変数に追加する必要があります。archlibexpの値はconfig.shファイルを参照してください。Perlを使用しようとすると、次のようなエラーメッセージが表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="9ea06585be873f55abde4de83dd620970030f924" translate="yes" xml:space="preserve">
          <source>This pragma allows overloading of Perl's operators for a class. To overload built-in functions, see &lt;a href=&quot;perlsub#Overriding-Built-in-Functions&quot;&gt;&quot;Overriding Built-in Functions&quot; in perlsub&lt;/a&gt; instead.</source>
          <target state="translated">このプラグマにより、クラスに対するPerlの演算子のオーバーロードが可能になります。&lt;a href=&quot;perlsub#Overriding-Built-in-Functions&quot;&gt;組み込み&lt;/a&gt;関数をオーバーロードするには、代わりにperlsubの「組み込み関数のオーバーライド」を参照してください。</target>
        </trans-unit>
        <trans-unit id="66e0b9c8e30e0b67210d260345f05889e99ff243" translate="yes" xml:space="preserve">
          <source>This pragma allows overloading of Perl's operators for a class. To overload built-in functions, see &lt;a href=&quot;perlsub#Overriding-Built-in-Functions&quot;&gt;Overriding Built-in Functions in perlsub&lt;/a&gt; instead.</source>
          <target state="translated">このプラグマにより、クラスに対するPerlの演算子のオーバーロードが可能になります。&lt;a href=&quot;perlsub#Overriding-Built-in-Functions&quot;&gt;組み込み&lt;/a&gt;関数をオーバーロードするには、代わりにperlsubの組み込み関数のオーバーライドを参照してください。</target>
        </trans-unit>
        <trans-unit id="ca794d61d2dfe5a76e1bb77807f394d0b2d09964" translate="yes" xml:space="preserve">
          <source>This pragma allows you to declare constants at compile-time.</source>
          <target state="translated">このプラグマを使うと、コンパイル時に定数を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="2c01b8b1ad50eec7e989d0f266d4a4fc89f5d88b" translate="yes" xml:space="preserve">
          <source>This pragma allows you to lexically disable or enable overloading.</source>
          <target state="translated">このプラグマを使用すると、語彙的にオーバーロードを無効にしたり、有効にしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="c428d7745a523c21e13cd202bfe44587bda59ff5" translate="yes" xml:space="preserve">
          <source>This pragma also affects encoding of the 0x80..0xFF code point range: normally characters in that range are left as eight-bit bytes (unless they are combined with characters with code points 0x100 or larger, in which case all characters need to become UTF-8 encoded), but if the &lt;code&gt;encoding&lt;/code&gt; pragma is present, even the 0x80..0xFF range always gets UTF-8 encoded.</source>
          <target state="translated">このプラグマは0x80..0xFFコードポイント範囲のエンコードにも影響します。通常、その範囲の文字は8ビットバイトのままです（コードポイントが0x100以上の文字と組み合わされている場合を除く）。この場合、すべての文字がUTFになる必要があります。 -8エンコード）、ただし、 &lt;code&gt;encoding&lt;/code&gt; プラグマが存在する場合、0x80..0xFFの範囲でも常にUTF-8エンコードされます。</target>
        </trans-unit>
        <trans-unit id="d924aa9de8af230a322065eb09c25f0d879f8eac" translate="yes" xml:space="preserve">
          <source>This pragma arranges for all inputs from files to be translated into Unicode from the current locale as specified in the environment (see &lt;a href=&quot;#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot;&lt;/a&gt;), and all outputs to files to be translated back into the locale. (See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;). On a per-filehandle basis, you can instead use the &lt;a href=&quot;PerlIO::locale&quot;&gt;PerlIO::locale&lt;/a&gt; module, or the &lt;a href=&quot;Encode::Locale&quot;&gt;Encode::Locale&lt;/a&gt; module, both available from CPAN. The latter module also has methods to ease the handling of &lt;code&gt;ARGV&lt;/code&gt; and environment variables, and can be used on individual strings. If you know that all your locales will be UTF-8, as many are these days, you can use the &lt;a href=&quot;perlrun#-C-%5Bnumber%2Flist%5D&quot;&gt;&lt;b&gt;-C&lt;/b&gt;&lt;/a&gt; command line switch.</source>
          <target state="translated">このプラグマは、ファイルからのすべての入力が環境で指定されている現在のロケールからUnicodeに変換され（&lt;a href=&quot;#ENVIRONMENT&quot;&gt;「環境」を&lt;/a&gt;参照）、ファイルへのすべての出力がロケールに変換されるように調整します。 （&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照）。ファイルハンドルごとに、代わりに&lt;a href=&quot;PerlIO::locale&quot;&gt;PerlIO :: locale&lt;/a&gt;モジュールまたは&lt;a href=&quot;Encode::Locale&quot;&gt;Encode :: Locale&lt;/a&gt;モジュールを使用できます。どちらもCPANから入手できます。後者のモジュールには、 &lt;code&gt;ARGV&lt;/code&gt; と環境変数の処理を容易にするメソッドもあり、個々の文字列で使用できます。最近のように、すべてのロケールがUTF-8になることがわかっている場合は、&lt;a href=&quot;perlrun#-C-%5Bnumber%2Flist%5D&quot;&gt;&lt;b&gt;-C&lt;/b&gt;&lt;/a&gt;コマンドラインスイッチを使用できます。</target>
        </trans-unit>
        <trans-unit id="cd54481ef89d3dcd2f0d998cbd0de47400ae94c4" translate="yes" xml:space="preserve">
          <source>This pragma arranges for all inputs from files to be translated into Unicode from the current locale as specified in the environment (see &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt;), and all outputs to files to be translated back into the locale. (See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;). On a per-filehandle basis, you can instead use the &lt;a href=&quot;http://search.cpan.org/perldoc/PerlIO::locale&quot;&gt;PerlIO::locale&lt;/a&gt; module, or the &lt;a href=&quot;http://search.cpan.org/perldoc/Encode::Locale&quot;&gt;Encode::Locale&lt;/a&gt; module, both available from CPAN. The latter module also has methods to ease the handling of &lt;code&gt;ARGV&lt;/code&gt; and environment variables, and can be used on individual strings. If you know that all your locales will be UTF-8, as many are these days, you can use the &lt;a href=&quot;perlrun#-C&quot;&gt;-C&lt;/a&gt; command line switch.</source>
          <target state="translated">このプラグマは、ファイルからのすべての入力が環境で指定されている現在のロケールからUnicodeに変換されるように&lt;a href=&quot;#ENVIRONMENT&quot;&gt;調整し&lt;/a&gt;（環境を参照）、ファイルへのすべての出力をロケールに変換して戻します。 （&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照）。ファイルハンドルごとに、代わりに&lt;a href=&quot;http://search.cpan.org/perldoc/PerlIO::locale&quot;&gt;PerlIO :: locale&lt;/a&gt;モジュールまたは&lt;a href=&quot;http://search.cpan.org/perldoc/Encode::Locale&quot;&gt;Encode :: Locale&lt;/a&gt;モジュールを使用できます。どちらもCPANから入手できます。後者のモジュールには、 &lt;code&gt;ARGV&lt;/code&gt; および環境変数の処理を容易にするメソッドもあり、個々の文字列で使用できます。最近のように、すべてのロケールがUTF-8であることがわかっている場合は、&lt;a href=&quot;perlrun#-C&quot;&gt;-C&lt;/a&gt;コマンドラインスイッチを使用できます。</target>
        </trans-unit>
        <trans-unit id="37ed3079bf4bc6e6eae888371e167c272116e8dd" translate="yes" xml:space="preserve">
          <source>This pragma dates from the days when UTF-8-enabled editors were uncommon. But that was long ago, and the need for it is greatly diminished. That, coupled with the fact that it doesn't work with threads, along with other problems, (see &lt;a href=&quot;#BUGS&quot;&gt;&quot;BUGS&quot;&lt;/a&gt;) have led to its being deprecated. It is planned to remove this pragma in a future Perl version. New code should be written in UTF-8, and the &lt;code&gt;use utf8&lt;/code&gt; pragma used instead (see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt; for details). Old code should be converted to UTF-8, via something like the recipe in the &lt;a href=&quot;#SYNOPSIS&quot;&gt;&quot;SYNOPSIS&quot;&lt;/a&gt; (though this simple approach may require manual adjustments afterwards).</source>
          <target state="translated">このプラグマは、UTF-8対応のエディターが一般的ではなかった時代にさかのぼります。しかし、それはずっと前のことであり、その必要性は大幅に減少しています。それは、他の問題とともに、スレッドでは機能しないという事実と相まって（&lt;a href=&quot;#BUGS&quot;&gt;「バグ」を&lt;/a&gt;参照）、非推奨になりました。このプラグマは、将来のPerlバージョンで削除される予定です。新しいコードはUTF-8で記述し、代わりに &lt;code&gt;use utf8&lt;/code&gt; プラグマを使用する必要があります（詳細については、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;および&lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt;を参照してください）。古いコードは、&lt;a href=&quot;#SYNOPSIS&quot;&gt;「SYNOPSIS」の&lt;/a&gt;レシピのようなものを使用してUTF-8に変換する必要があります（ただし、この単純なアプローチでは、後で手動で調整する必要がある場合があります）。</target>
        </trans-unit>
        <trans-unit id="34db7e44f64dc2e33987c7fbd44c07e44789bfa8" translate="yes" xml:space="preserve">
          <source>This pragma dates from the days when UTF-8-enabled editors were uncommon. But that was long ago, and the need for it is greatly diminished. That, coupled with the fact that it doesn't work with threads, along with other problems, (see &lt;a href=&quot;#BUGS&quot;&gt;BUGS&lt;/a&gt;) have led to its being deprecated. It is planned to remove this pragma in a future Perl version. New code should be written in UTF-8, and the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; pragma used instead (see &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; and &lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt; for details). Old code should be converted to UTF-8, via something like the recipe in the &lt;a href=&quot;#SYNOPSIS&quot;&gt;SYNOPSIS&lt;/a&gt; (though this simple approach may require manual adjustments afterwards).</source>
          <target state="translated">このプラグマは、UTF-8対応のエディターが一般的でなかった時代にさかのぼります。しかし、それはずっと前のことであり、その必要性は大幅に減少しています。これは、他の問題と一緒にスレッドで動作しないという事実（&lt;a href=&quot;#BUGS&quot;&gt;バグを&lt;/a&gt;参照）と相まって、非推奨になりました。今後のPerlバージョンでは、このプラグマを削除する予定です。新しいコードはUTF-8で記述し、代わりに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; プラグマを使用する必要があります（詳細については、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;および&lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt;を参照してください）。&lt;a href=&quot;#SYNOPSIS&quot;&gt;SYNOPSIS&lt;/a&gt;のレシピのようなものを介して、古いコードをUTF-8に変換する必要があります（ただし、この単純なアプローチでは、後で手動での調整が必要になる場合があります）。</target>
        </trans-unit>
        <trans-unit id="4adb9dc70f3c9381053e6cf64fee4c07c531fe57" translate="yes" xml:space="preserve">
          <source>This pragma doesn't affect I/O. Nor does it change the internal representation of strings, only their interpretation. There are still several places where Unicode isn't fully supported, such as in filenames.</source>
          <target state="translated">このpragmaはI/Oには影響しません。また、文字列の内部表現を変更することもありません。ファイル名など、Unicodeが完全にサポートされていない場所がまだいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d0a1053bcb46765bc08bab8c76c7daf170b6ab41" translate="yes" xml:space="preserve">
          <source>This pragma doesn't work well with &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; because PerlIO does not get along very well with it. When &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; contains non-ASCII characters it prints funny or gets &quot;wide character warnings&quot;. To understand it, try the code below.</source>
          <target state="translated">このプラグマは、PerlIOがうまく機能しないため、 &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; うまく機能しません。とき &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; 非ASCII文字が含まれていることはおかしい印刷したり、「ワイド文字の警告」を取得します。それを理解するには、以下のコードを試してください。</target>
        </trans-unit>
        <trans-unit id="63bc5c639e862260de54994e4a3fd753cd2d30e7" translate="yes" xml:space="preserve">
          <source>This pragma doesn't work well with &lt;code&gt;format&lt;/code&gt; because PerlIO does not get along very well with it. When &lt;code&gt;format&lt;/code&gt; contains non-ASCII characters it prints funny or gets &quot;wide character warnings&quot;. To understand it, try the code below.</source>
          <target state="translated">このプラグマは、PerlIOがうまく機能しないため、 &lt;code&gt;format&lt;/code&gt; うまく機能しません。 &lt;code&gt;format&lt;/code&gt; に非ASCII文字が含まれている場合、面白い印刷をしたり、「ワイド文字の警告」を受け取ったりします。それを理解するには、以下のコードを試してください。</target>
        </trans-unit>
        <trans-unit id="842309da32a571cffd281160b3136685717f49db" translate="yes" xml:space="preserve">
          <source>This pragma first appeared in Perl v5.8.0. It has been enhanced in later releases as specified above.</source>
          <target state="translated">この pragma は Perl v5.8.0 で初めて登場しました。これは、上記のように後のリリースで強化されています。</target>
        </trans-unit>
        <trans-unit id="ea296547782279e5c0e53a333818543fc8821038" translate="yes" xml:space="preserve">
          <source>This pragma is used to enable a Perl script to be written in encodings that aren't strictly ASCII nor UTF-8. It translates all or portions of the Perl program script from a given encoding into UTF-8, and changes the PerlIO layers of &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; to the encoding specified.</source>
          <target state="translated">このプラグマは、Perlスクリプトを厳密にASCIIでもUTF-8でもないエンコーディングで記​​述できるようにするために使用されます。Perlプログラムスクリプトのすべてまたは一部を特定のエンコーディングからUTF-8に変換し、 &lt;code&gt;STDIN&lt;/code&gt; および &lt;code&gt;STDOUT&lt;/code&gt; の PerlIOレイヤーを指定されたエンコーディングに変更します。</target>
        </trans-unit>
        <trans-unit id="b2499dd223fe6da7fc3aa8e53b4286111a638895" translate="yes" xml:space="preserve">
          <source>This pragma lets you switch to the &quot;C3&quot; resolution order. In simple terms, &quot;C3&quot; order ensures that shared parent classes are never searched before child classes, so Perl will now search: &lt;code&gt;Child&lt;/code&gt; , &lt;code&gt;Father&lt;/code&gt; , &lt;code&gt;PaternalGrandparent&lt;/code&gt; , &lt;code&gt;Mother&lt;/code&gt;&lt;code&gt;MaternalGrandparent&lt;/code&gt; , and finally &lt;code&gt;SharedGreatGrandParent&lt;/code&gt; . Note however that this is not &quot;breadth-first&quot; searching: All the &lt;code&gt;Father&lt;/code&gt; ancestors (except the common ancestor) are searched before any of the &lt;code&gt;Mother&lt;/code&gt; ancestors are considered.</source>
          <target state="translated">このプラグマを使用すると、「C3」の解決順序に切り替えることができます。簡単に言うと、「C3」の順序により、共有親クラスが子クラスの前に検索されることがないため、Perlは次のように検索します： &lt;code&gt;Child&lt;/code&gt; 、 &lt;code&gt;Father&lt;/code&gt; 、 &lt;code&gt;PaternalGrandparent&lt;/code&gt; 、 &lt;code&gt;Mother&lt;/code&gt; &lt;code&gt;MaternalGrandparent&lt;/code&gt; 、そして最後に &lt;code&gt;SharedGreatGrandParent&lt;/code&gt; 。ただし、これは「幅優先」検索ではないことに注意してください。すべての &lt;code&gt;Father&lt;/code&gt; 祖先（共通の祖先を除く）は、 &lt;code&gt;Mother&lt;/code&gt; 祖先のいずれかが考慮される前に検索されます。</target>
        </trans-unit>
        <trans-unit id="2c6a561743b48f6917f3de6223e944d7c22b30aa" translate="yes" xml:space="preserve">
          <source>This pragma lets you switch to the &quot;C3&quot; resolution order. In simple terms, &quot;C3&quot; order ensures that shared parent classes are never searched before child classes, so Perl will now search: &lt;code&gt;Child&lt;/code&gt;, &lt;code&gt;Father&lt;/code&gt;, &lt;code&gt;PaternalGrandparent&lt;/code&gt;, &lt;code&gt;Mother&lt;/code&gt;&lt;code&gt;MaternalGrandparent&lt;/code&gt;, and finally &lt;code&gt;SharedGreatGrandParent&lt;/code&gt;. Note however that this is not &quot;breadth-first&quot; searching: All the &lt;code&gt;Father&lt;/code&gt; ancestors (except the common ancestor) are searched before any of the &lt;code&gt;Mother&lt;/code&gt; ancestors are considered.</source>
          <target state="translated">このプラグマを使用すると、「C3」解決順序に切り替えることができます。簡単に言うと、「C3」の順序により、共有の親クラスが子クラスの前に検索されることはないため、Perlは次のように検索します： &lt;code&gt;Child&lt;/code&gt; 、 &lt;code&gt;Father&lt;/code&gt; 、 &lt;code&gt;PaternalGrandparent&lt;/code&gt; 、 &lt;code&gt;Mother&lt;/code&gt; &lt;code&gt;MaternalGrandparent&lt;/code&gt; 、最後に &lt;code&gt;SharedGreatGrandParent&lt;/code&gt; 。ただし、これは「幅優先」検索ではないことに注意してください。すべての &lt;code&gt;Father&lt;/code&gt; 祖先（共通の祖先を除く）は、 &lt;code&gt;Mother&lt;/code&gt; 祖先が考慮される前に検索されます。</target>
        </trans-unit>
        <trans-unit id="7563cc6ded71ab7f47219e909773301db6c2d889" translate="yes" xml:space="preserve">
          <source>This pragma provides an easy and convenient way to enable or disable experimental features.</source>
          <target state="translated">このプラグマは、実験機能を有効にしたり無効にしたりするための簡単で便利な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="2063e0ed31e4ca83c59af99843b134e51c1d67ca" translate="yes" xml:space="preserve">
          <source>This pragma reflects early attempts to incorporate Unicode into perl and has since been superseded. It breaks encapsulation (i.e. it exposes the innards of how the perl executable currently happens to store a string), and use of this module for anything other than debugging purposes is strongly discouraged. If you feel that the functions here within might be useful for your application, this possibly indicates a mismatch between your mental model of Perl Unicode and the current reality. In that case, you may wish to read some of the perl Unicode documentation: &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;, &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt;, &lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">このプラグマは、PerlにUnicodeを組み込む初期の試みを反映しており、それ以来置き換えられています。カプセル化が解除され（つまり、現在Perl実行可能ファイルが文字列を格納する方法の内部が公開されています）、デバッグ以外の目的でこのモジュールを使用することは強くお勧めしません。ここにある関数がアプリケーションに役立つと思われる場合は、Perl Unicodeのメンタルモデルと現在の現実との不一致を示している可能性があります。その場合、いくつかのperl Unicodeドキュメントを読むことをお&lt;a href=&quot;perlunitut&quot;&gt;勧めし&lt;/a&gt;ます：&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;、perlunitut、&lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt;、&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17b8d23d839b79073aa5a07e1c3b5c9898bf0286" translate="yes" xml:space="preserve">
          <source>This pragma simplifies the maintenance of dual-life modules that will no longer be included in the Perl core in a future Perl release, but are still included currently.</source>
          <target state="translated">このプラグマは、将来のPerlリリースでPerlコアに含まれなくなるが、現在はまだ含まれているデュアルライフモジュールのメンテナンスを簡素化します。</target>
        </trans-unit>
        <trans-unit id="c260c6accbf395dcf89666ab18de9cc81ef025ab" translate="yes" xml:space="preserve">
          <source>This pragma tells the compiler to change the behaviour of the filetest permission operators, &lt;code&gt;-r&lt;/code&gt;&lt;code&gt;-w&lt;/code&gt;&lt;code&gt;-x&lt;/code&gt;&lt;code&gt;-R&lt;/code&gt;&lt;code&gt;-W&lt;/code&gt;&lt;code&gt;-X&lt;/code&gt; (see &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;).</source>
          <target state="translated">このプラグマは、filetestパーミッション演算子 &lt;code&gt;-r&lt;/code&gt; &lt;code&gt;-w&lt;/code&gt; &lt;code&gt;-x&lt;/code&gt; &lt;code&gt;-R&lt;/code&gt; &lt;code&gt;-W&lt;/code&gt; &lt;code&gt;-X&lt;/code&gt; の動作を変更するようコンパイラーに指示します（&lt;a href=&quot;perlfunc&quot;&gt;perlfuncを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2ef074ee97cc67ce380e960a125c4b931d1340ce" translate="yes" xml:space="preserve">
          <source>This pragma tells the compiler to change the behaviour of the filetest permission operators, &lt;code&gt;-r&lt;/code&gt;&lt;code&gt;-w&lt;/code&gt;&lt;code&gt;-x&lt;/code&gt;&lt;code&gt;-R&lt;/code&gt;&lt;code&gt;-W&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; (see &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;).</source>
          <target state="translated">このプラグマは、ファイルテスト許可演算子 &lt;code&gt;-r&lt;/code&gt; &lt;code&gt;-w&lt;/code&gt; &lt;code&gt;-x&lt;/code&gt; &lt;code&gt;-R&lt;/code&gt; &lt;code&gt;-W&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; （&lt;a href=&quot;perlfunc&quot;&gt;perlfuncを&lt;/a&gt;参照）の動作を変更するようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="221ed9ae1b0c79e2438890e0d6c973d357078c4b" translate="yes" xml:space="preserve">
          <source>This pragma tells the compiler to enable (or disable) the use of POSIX locales for built-in operations (for example, LC_CTYPE for regular expressions, LC_COLLATE for string comparison, and LC_NUMERIC for number formatting). Each &quot;use locale&quot; or &quot;no locale&quot; affects statements to the end of the enclosing BLOCK.</source>
          <target state="translated">このプラグマは、コンパイラに組み込み操作でPOSIXロケールを使用するかどうかを指定します (例えば、正規表現ではLC_CTYPE、文字列比較ではLC_COLLATE、数値フォーマットではLC_NUMERICなど)。それぞれの &quot;use locale &quot;または &quot;no locale &quot;は、それを囲むブロックの最後までの文に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="aeeaf592fadd170ef60bd36772264838afffed60" translate="yes" xml:space="preserve">
          <source>This pragma was created so you can explicitly tell Perl that operations executed within its scope are to use Unicode rules. More operations are affected with newer perls. See &lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;&quot;The &quot;Unicode Bug&quot;&quot;&lt;/a&gt;.</source>
          <target state="translated">このプラグマは、そのスコープ内で実行される操作がUnicodeルールを使用することをPerlに明示的に伝えることができるように作成されました。新しいperlsを使用すると、より多くの操作が影響を受けます。&lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;「「Unicodeバグ」」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e609830a837e5307b3fb39be2d58dc9501e3994d" translate="yes" xml:space="preserve">
          <source>This pragma was created so you can explicitly tell Perl that operations executed within its scope are to use Unicode rules. More operations are affected with newer perls. See &lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;The Unicode Bug&lt;/a&gt;.</source>
          <target state="translated">このプラグマは、そのスコープ内で実行される操作がUnicodeルールを使用することをPerlに明示的に通知できるように作成されました。新しいperlにより、より多くの操作が影響を受けます。&lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;Unicodeバグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c932803f2c5c4b2cf5c88433b729097c2569d39" translate="yes" xml:space="preserve">
          <source>This pragma will predeclare all the variables whose names are in the list, allowing you to use them under &lt;code&gt;use strict&lt;/code&gt;, and disabling any typo warnings for them.</source>
          <target state="translated">このプラグマは、名前がリストにあるすべての変数を事前に宣言し、 &lt;code&gt;use strict&lt;/code&gt; の下でそれらを使用できるようにし、それらのタイプミス警告を無効にします。</target>
        </trans-unit>
        <trans-unit id="700e6f2388b406cbe201cbb98323ed5f25c8d4b4" translate="yes" xml:space="preserve">
          <source>This pragma works just like the &lt;code&gt;strict&lt;/code&gt; pragma. This means that the scope of the warning pragma is limited to the enclosing block. It also means that the pragma setting will not leak across files (via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;). This allows authors to independently define the degree of warning checks that will be applied to their module.</source>
          <target state="translated">このプラグマは、 &lt;code&gt;strict&lt;/code&gt; プラグマと同じように機能します。これは、警告プラグマのスコープが外側のブロックに制限されていることを意味します。また、プラグマ設定が（ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; を介して）ファイル間でリークしないことも意味します。これにより、作成者は、モジュールに適用される警告チェックの程度を個別に定義できます。</target>
        </trans-unit>
        <trans-unit id="efd21a83903c74ae90d870a3df25547a1a2130d8" translate="yes" xml:space="preserve">
          <source>This pragma works just like the &lt;code&gt;strict&lt;/code&gt; pragma. This means that the scope of the warning pragma is limited to the enclosing block. It also means that the pragma setting will not leak across files (via &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt;). This allows authors to independently define the degree of warning checks that will be applied to their module.</source>
          <target state="translated">このプラグマは、 &lt;code&gt;strict&lt;/code&gt; プラグマと同じように機能します。これは、警告プラグマの範囲が囲んでいるブロックに限定されることを意味します。また、プラグマ設定がファイル間でリークしないことも意味します（ &lt;code&gt;use&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; を介して）。これにより、作成者はモジュールに適用される警告チェックの程度を個別に定義できます。</target>
        </trans-unit>
        <trans-unit id="30a2879d5d48273acab2ab3a9f22c1edf08032e3" translate="yes" xml:space="preserve">
          <source>This prints</source>
          <target state="translated">このプリント</target>
        </trans-unit>
        <trans-unit id="b6e212e7ef6ac1844cda369639e0440d069cad8b" translate="yes" xml:space="preserve">
          <source>This prints &quot;bar&quot; and writes &quot;foo&quot; into the file &quot;blurch&quot;:</source>
          <target state="translated">これは &quot;bar &quot;を表示し、&quot;foo &quot;をファイル &quot;blurch &quot;に書き込む。</target>
        </trans-unit>
        <trans-unit id="d54bfbbae93113b4950fc2d869fb4754b9ce7e99" translate="yes" xml:space="preserve">
          <source>This prints &quot;bar&quot; and writes &quot;foo&quot; to the file &quot;blurch&quot;:</source>
          <target state="translated">これは &quot;bar &quot;を表示し、&quot;foo &quot;をファイル &quot;blurch &quot;に書き出します。</target>
        </trans-unit>
        <trans-unit id="efd4b33e8216cea60a6219dc7e5bd98ac5e87040" translate="yes" xml:space="preserve">
          <source>This prints &quot;foo&quot; (&quot;bar&quot; disappears into nowhereland):</source>
          <target state="translated">これは &quot;foo&quot; を印刷します(&quot;bar&quot; はナウザーランドに消えてしまいます)。</target>
        </trans-unit>
        <trans-unit id="41ff0d603c865bec8366dedecbae0223cb1c3622" translate="yes" xml:space="preserve">
          <source>This prints &lt;code&gt;2.7&lt;/code&gt; .</source>
          <target state="translated">これは &lt;code&gt;2.7&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="5884fb8d5912977dd4b38b66daf68b4ce0bb0d83" translate="yes" xml:space="preserve">
          <source>This prints &lt;code&gt;2.7&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;2.7&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="bb91200cd90a472a1ae9cb007ac03043f56be426" translate="yes" xml:space="preserve">
          <source>This prints out the name and version of all modules used and then exits.</source>
          <target state="translated">これは、使用したすべてのモジュールの名前とバージョンを表示して終了します。</target>
        </trans-unit>
        <trans-unit id="0f904b0830f014f8a9104235a42d06c972150632" translate="yes" xml:space="preserve">
          <source>This prints out your environment like the &lt;a href=&quot;http://man.he.net/man1/printenv&quot;&gt;printenv(1)&lt;/a&gt; program, but in a different order:</source>
          <target state="translated">これにより、&lt;a href=&quot;http://man.he.net/man1/printenv&quot;&gt;printenv（1）&lt;/a&gt;プログラムのように環境が出力されますが、順序は異なります。</target>
        </trans-unit>
        <trans-unit id="f686232da2ac609974851dce432c4e1340ec7365" translate="yes" xml:space="preserve">
          <source>This prints out your environment like the printenv(1) program, but in a different order:</source>
          <target state="translated">これは printenv(1)プログラムと同じように環境をプリントアウトしますが、順番は異なります。</target>
        </trans-unit>
        <trans-unit id="04d447d63dbf460d4723e288297a46d354df3e2a" translate="yes" xml:space="preserve">
          <source>This prints two doublequotes:</source>
          <target state="translated">これはダブルクォートを2つ印刷します。</target>
        </trans-unit>
        <trans-unit id="345205710c1209079bdf05b4d146f25fe0a01f36" translate="yes" xml:space="preserve">
          <source>This prints:</source>
          <target state="translated">このプリント。</target>
        </trans-unit>
        <trans-unit id="468d6d44762bf30d6816e393a8ba4eeeb6a7be16" translate="yes" xml:space="preserve">
          <source>This probably does nothing.</source>
          <target state="translated">これではおそらく何もできない。</target>
        </trans-unit>
        <trans-unit id="d21d1db17e4be9e2f5e50a54879f0a7c98d4455f" translate="yes" xml:space="preserve">
          <source>This probably isn't as useful as you might think. Normally, you shouldn't need to.</source>
          <target state="translated">これはおそらく、あなたが思っているほど有用ではないでしょう。普通は必要ないはずです。</target>
        </trans-unit>
        <trans-unit id="341bfd19674c6dfeba3ffe584bfdf82c2776cb1e" translate="yes" xml:space="preserve">
          <source>This probably makes more sense for a human: enter a block, start a statement. Get the values of &lt;code&gt;$b&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt; , and add them together. Find &lt;code&gt;$a&lt;/code&gt; , and assign one to the other. Then leave.</source>
          <target state="translated">これはおそらく人間にとってより理にかなっています：ブロックに入り、ステートメントを開始します。 &lt;code&gt;$b&lt;/code&gt; と &lt;code&gt;$c&lt;/code&gt; の値を取得し、それらを加算します。 &lt;code&gt;$a&lt;/code&gt; を見つけ、一方を他方に割り当てます。その後、去ります。</target>
        </trans-unit>
        <trans-unit id="a4586de2c445b95b021af0b04d69fb01ba89d45c" translate="yes" xml:space="preserve">
          <source>This probably makes more sense for a human: enter a block, start a statement. Get the values of &lt;code&gt;$b&lt;/code&gt; and &lt;code&gt;$c&lt;/code&gt;, and add them together. Find &lt;code&gt;$a&lt;/code&gt;, and assign one to the other. Then leave.</source>
          <target state="translated">これはおそらく人間にとってより理にかなっています。ブロックに入り、ステートメントを開始します。 &lt;code&gt;$b&lt;/code&gt; と &lt;code&gt;$c&lt;/code&gt; の値を取得し、それらを合計します。 &lt;code&gt;$a&lt;/code&gt; を見つけて、一方を他方に割り当てます。それから去りなさい。</target>
        </trans-unit>
        <trans-unit id="d9d98988085b44026120bb435150bffabf68b9c3" translate="yes" xml:space="preserve">
          <source>This probably sounds a bit more confusing than it really is, so let's go through this program piece by piece and see what it does. (For those of you who might be trying to remember exactly what a prime number is, it's a number that's only evenly divisible by itself and 1.)</source>
          <target state="translated">このプログラムは、実際よりも少し混乱しているように聞こえるかもしれませんが、このプログラムが何をするのかを一つ一つ見ていきましょう。(素数とは何かを正確に覚えようとしている人のために、素数とはそれ自身と1で均等に割り切れる数のことです)</target>
        </trans-unit>
        <trans-unit id="8ac64410a0a0c80ce97774854ab9fa0ae7c24c64" translate="yes" xml:space="preserve">
          <source>This probing and the checks we performed have some limitations:</source>
          <target state="translated">このプロービングと実施したチェックには、いくつかの限界があります。</target>
        </trans-unit>
        <trans-unit id="e016023303c59d801c6e740a285fec3afa4a6473" translate="yes" xml:space="preserve">
          <source>This problem can usually be solved by making the inner subroutine anonymous, using the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; syntax. When inner anonymous subs that reference lexical subroutines in outer subroutines are created, they are automatically rebound to the current values of such lexical subs.</source>
          <target state="translated">この問題は通常、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 構文を使用して、内部のサブルーチンを匿名にすることで解決できます。外部サブルーチンで字句サブルーチンを参照する内部無名サブルーチンが作成されると、それらはそのような字句サブルーチンの現在の値に自動的に再バインドされます。</target>
        </trans-unit>
        <trans-unit id="b60e9bed0f73061b937a8fe5fecd9ad0d49454e0" translate="yes" xml:space="preserve">
          <source>This problem can usually be solved by making the inner subroutine anonymous, using the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; syntax. When inner anonymous subs that reference variables in outer subroutines are created, they are automatically rebound to the current values of such variables.</source>
          <target state="translated">この問題は通常、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt; {}&lt;/code&gt; 構文を使用して、内部のサブルーチンを匿名にすることで解決できます。外部サブルーチンで変数を参照する内部匿名サブルーチンが作成されると、それらはそのような変数の現在の値に自動的に再バインドされます。</target>
        </trans-unit>
        <trans-unit id="57123e780f962baab766839b9fcf02a5c2e726f1" translate="yes" xml:space="preserve">
          <source>This problem can usually be solved by making the inner subroutine anonymous, using the &lt;code&gt;sub {}&lt;/code&gt; syntax. When inner anonymous subs that reference lexical subroutines in outer subroutines are created, they are automatically rebound to the current values of such lexical subs.</source>
          <target state="translated">この問題は通常、 &lt;code&gt;sub {}&lt;/code&gt; 構文を使用して、内部サブルーチンを匿名にすることで解決できます。外部サブルーチンの字句サブルーチンを参照する内部匿名サブルーチンが作成されると、それらはそのような字句サブルーチンの現在の値に自動的にリバウンドされます。</target>
        </trans-unit>
        <trans-unit id="8b0f22c9ea1e13dec6b01b469b5a53003b6ea76c" translate="yes" xml:space="preserve">
          <source>This problem can usually be solved by making the inner subroutine anonymous, using the &lt;code&gt;sub {}&lt;/code&gt; syntax. When inner anonymous subs that reference variables in outer subroutines are created, they are automatically rebound to the current values of such variables.</source>
          <target state="translated">この問題は通常、 &lt;code&gt;sub {}&lt;/code&gt; 構文を使用して、内部サブルーチンを匿名にすることで解決できます。外部サブルーチンの変数を参照する内部匿名サブルーチンが作成されると、それらはそのような変数の現在の値に自動的にリバウンドされます。</target>
        </trans-unit>
        <trans-unit id="30e5c26de90551718f152502391c103ab788e07b" translate="yes" xml:space="preserve">
          <source>This problem usually involves one of the Perl built-ins that has the same name a Unix command that uses octal numbers as arguments on the command line. In this example, &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; on the command line knows that its first argument is octal because that's what it does:</source>
          <target state="translated">この問題は通常、コマンドラインの引数として8進数を使用するUnixコマンドと同じ名前のPerl組み込みの1つに関係しています。この例では、コマンドラインの &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; は、最初の引数が8進数であることを認識しています。</target>
        </trans-unit>
        <trans-unit id="d33a707f660fda2085139973d7ad824dc2ab179f" translate="yes" xml:space="preserve">
          <source>This problem usually involves one of the Perl built-ins that has the same name a Unix command that uses octal numbers as arguments on the command line. In this example, &lt;code&gt;chmod&lt;/code&gt; on the command line knows that its first argument is octal because that's what it does:</source>
          <target state="translated">この問題は通常、コマンドラインの引数として8進数を使用するUnixコマンドと同じ名前のPerlビルトインの1つに関係しています。この例では、コマンドラインの &lt;code&gt;chmod&lt;/code&gt; は、最初の引数が8進数であることを認識しています。これは、次のことを行うためです。</target>
        </trans-unit>
        <trans-unit id="78b6c2ab73ee787f434ee0ce1c24dc74fd9f5055" translate="yes" xml:space="preserve">
          <source>This problem was fixed in perl 5.004_05, so preventing it means upgrading your version of perl. ;)</source>
          <target state="translated">この問題は perl 5.004_05 で修正されたので、これを防ぐには perl のバージョンをアップグレードする必要があります。)</target>
        </trans-unit>
        <trans-unit id="149ef363e988711abf3a930d8381275df0baf405" translate="yes" xml:space="preserve">
          <source>This processes the lines in &lt;code&gt;@lines&lt;/code&gt; (where each list item must be a defined value, and must contain exactly one line of content -- so no items like &lt;code&gt;&quot;foo\nbar&quot;&lt;/code&gt; are allowed). The final &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is used to indicate the end of document being parsed.</source>
          <target state="translated">これは &lt;code&gt;@lines&lt;/code&gt; の行を処理します（各リストアイテムは定義された値である必要があり、コンテンツの1行だけを含む必要があるため、 &lt;code&gt;&quot;foo\nbar&quot;&lt;/code&gt; ようなアイテムは許可されません）。最後の &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は、解析されるドキュメントの終わりを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="688ef3f8e6f5eaf3a51865a695b77382ce66b228" translate="yes" xml:space="preserve">
          <source>This processes the lines in &lt;code&gt;@lines&lt;/code&gt; (where each list item must be a defined value, and must contain exactly one line of content -- so no items like &lt;code&gt;&quot;foo\nbar&quot;&lt;/code&gt; are allowed). The final &lt;code&gt;undef&lt;/code&gt; is used to indicate the end of document being parsed.</source>
          <target state="translated">これにより、 &lt;code&gt;@lines&lt;/code&gt; の行が処理されます（各リスト項目は定義された値である必要があり、コンテンツの1行だけが含まれている必要があるため、 &lt;code&gt;&quot;foo\nbar&quot;&lt;/code&gt; ような項目は許可されません）。最後の &lt;code&gt;undef&lt;/code&gt; は、解析されるドキュメントの終わりを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="6c20dce79362eb3c48b58c8e5bc86aad6133c323" translate="yes" xml:space="preserve">
          <source>This produces a patch based on the difference between blead and your current branch. It's important to make sure that blead is up to date before producing the diff, that's why we call &lt;code&gt;git pull&lt;/code&gt; first.</source>
          <target state="translated">これにより、bleadと現在のブランチの違いに基づいてパッチが作成されます。差分を生成する前にbleadが最新であることを確認することが重要です。その &lt;code&gt;git pull&lt;/code&gt; 最初にgit pullを呼び出します。</target>
        </trans-unit>
        <trans-unit id="5a3bf030e7bf490188072c702d468c0925c814bb" translate="yes" xml:space="preserve">
          <source>This produces the Perl docs online book &lt;code&gt;perl.INF&lt;/code&gt; . Install in on &lt;code&gt;BOOKSHELF&lt;/code&gt; path.</source>
          <target state="translated">これにより、Perl docsオンラインブック &lt;code&gt;perl.INF&lt;/code&gt; が生成されます。 &lt;code&gt;BOOKSHELF&lt;/code&gt; パスにインストールします。</target>
        </trans-unit>
        <trans-unit id="b1d23f3b834b32d7a55e6f86f555013820b4d006" translate="yes" xml:space="preserve">
          <source>This produces the Perl docs online book &lt;code&gt;perl.INF&lt;/code&gt;. Install in on &lt;code&gt;BOOKSHELF&lt;/code&gt; path.</source>
          <target state="translated">これにより、Perlドキュメントのオンラインブック &lt;code&gt;perl.INF&lt;/code&gt; が作成されます。 &lt;code&gt;BOOKSHELF&lt;/code&gt; パスにインストールします。</target>
        </trans-unit>
        <trans-unit id="7a75bb1a7c7847916a1dc3b67dbf0cb3e9f1aba1" translate="yes" xml:space="preserve">
          <source>This produces the default error string for the given exception,</source>
          <target state="translated">これは、与えられた例外のデフォルトのエラー文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="2c9c734dac073d3001ca1ea5f8fa8cfb8daa173b" translate="yes" xml:space="preserve">
          <source>This program is Copyright 1990,2015 by Johan Vromans. This program is free software; you can redistribute it and/or modify it under the terms of the Perl Artistic License or the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</source>
          <target state="translated">このプログラムの著作権は1990,2015 Johan Vromansに帰属します。このプログラムはフリーソフトウェアです。あなたは、Perl Artistic LicenseまたはFree Software Foundationによって公開されているGNU General Public Licenseのバージョン2、または(任意で)それ以降のバージョンのいずれかの条件の下で、これを再配布したり、変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="26f7f8dba51ed564d4c376a299ad1ccb7d59f62d" translate="yes" xml:space="preserve">
          <source>This program is designed to help you generate and send bug reports (and thank-you notes) about perl5 and the modules which ship with it.</source>
          <target state="translated">このプログラムは、Perl5 とそれに付属するモジュールに関するバグレポート (と感謝のメモ)を生成して送信するのに役立つように設計されています。</target>
        </trans-unit>
        <trans-unit id="95c0f8377730d3f4d0f475e508c5eeed353ea1d3" translate="yes" xml:space="preserve">
          <source>This program is designed to help you generate bug reports (and thank-you notes) about perl5 and the modules which ship with it.</source>
          <target state="translated">このプログラムは、Perl5 と同梱されているモジュールに関するバグレポート (と感謝のメモ)を作成するのに役立つように設計されています。</target>
        </trans-unit>
        <trans-unit id="04d3efb8a4ca3ef394388570fac127108dc6a9fe" translate="yes" xml:space="preserve">
          <source>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See either the GNU General Public License or the Artistic License for more details.</source>
          <target state="translated">このプログラムは有用であることを期待して配布されていますが、商品性や特定の目的への適合性についての暗黙の保証すらありません。詳細についてはGNU一般公衆利用許諾契約書または芸術的利用許諾契約書を参照してください。</target>
        </trans-unit>
        <trans-unit id="2cac2059d04ed459899445fb7d4adafed92ceb31" translate="yes" xml:space="preserve">
          <source>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</source>
          <target state="translated">このプログラムは有用であることを期待して配布されていますが、商品性や特定の目的への適合性についての暗黙の保証もなく、何の保証もありません。詳細はGNU一般公衆利用許諾書を参照してください。</target>
        </trans-unit>
        <trans-unit id="d8761e66f0aa0865d7b8a0fad53a385acc12de1d" translate="yes" xml:space="preserve">
          <source>This program is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose.</source>
          <target state="translated">このプログラムは、それが有用であることを期待して配布されていますが、いかなる保証もなく、商品性や特定の目的への適合性についての暗黙の保証もありません。</target>
        </trans-unit>
        <trans-unit id="2b736eab48b8800afefb519e32bdf619448f2254" translate="yes" xml:space="preserve">
          <source>This program is distributed under the Artistic License.</source>
          <target state="translated">このプログラムはArtistic Licenseの下で配布されています。</target>
        </trans-unit>
        <trans-unit id="d1d0a6a12423ce6569360d8955fb54c14fc9d18b" translate="yes" xml:space="preserve">
          <source>This program is distributed under the same terms as perl itself. See &lt;a href=&quot;http://perl.org/&quot;&gt;http://perl.org/&lt;/a&gt; or &lt;a href=&quot;http://cpan.org/&quot;&gt;http://cpan.org/&lt;/a&gt; for more info on that.</source>
          <target state="translated">このプログラムは、perl自体と同じ条件で配布されます。詳細については、&lt;a href=&quot;http://perl.org/&quot;&gt;http：//perl.org/&lt;/a&gt;または&lt;a href=&quot;http://cpan.org/&quot;&gt;http://cpan.org/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f880f2d75284047b0b3ca19e5c220c8ba58fc91" translate="yes" xml:space="preserve">
          <source>This program is distributed under the same terms as perl itself. See http://perl.org/ or http://cpan.org/ for more info on that.</source>
          <target state="translated">このプログラムは perl 自体と同じ条件で配布されています。詳しくは http://perl.org/または http://cpan.org/を参照してください。</target>
        </trans-unit>
        <trans-unit id="c09da468beec666c3faa34069fc9e34aec608126" translate="yes" xml:space="preserve">
          <source>This program is easy to understand. &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; is the standard way to invoke a perl program from the shell. &lt;code&gt;$regexp = &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;;&lt;/code&gt; saves the first command line argument as the regexp to be used, leaving the rest of the command line arguments to be treated as files. &lt;code&gt;while (&amp;lt;&amp;gt;)&lt;/code&gt; loops over all the lines in all the files. For each line, &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; if /$regexp/;&lt;/code&gt; prints the line if the regexp matches the line. In this line, both &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;/$regexp/&lt;/code&gt; use the default variable &lt;code&gt;$_&lt;/code&gt; implicitly.</source>
          <target state="translated">このプログラムは理解しやすいです。 &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; は、シェルからperlプログラムを呼び出す標準的な方法です。 &lt;code&gt;$regexp = &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;;&lt;/code&gt; 最初のコマンドライン引数を使用する正規表現として保存し、残りのコマンドライン引数をファイルとして扱います。 &lt;code&gt;while (&amp;lt;&amp;gt;)&lt;/code&gt; は、すべてのファイルのすべての行をループします。各ラインのために、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; if /$regexp/;&lt;/code&gt; 正規表現が行と一致する場合、行を出力します。この行では、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;/$regexp/&lt;/code&gt; 両方がデフォルトの変数 &lt;code&gt;$_&lt;/code&gt; 暗黙的に使用しています。</target>
        </trans-unit>
        <trans-unit id="f1261f166c54df8049e546eae1262e6a9cada525" translate="yes" xml:space="preserve">
          <source>This program is easy to understand. &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; is the standard way to invoke a perl program from the shell. &lt;code&gt;$regexp = shift;&lt;/code&gt; saves the first command line argument as the regexp to be used, leaving the rest of the command line arguments to be treated as files. &lt;code&gt;while (&amp;lt;&amp;gt;)&lt;/code&gt; loops over all the lines in all the files. For each line, &lt;code&gt;print if /$regexp/;&lt;/code&gt; prints the line if the regexp matches the line. In this line, both &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;/$regexp/&lt;/code&gt; use the default variable &lt;code&gt;$_&lt;/code&gt; implicitly.</source>
          <target state="translated">このプログラムは理解しやすいです。 &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; は、シェルからperlプログラムを呼び出す標準的な方法です。 &lt;code&gt;$regexp = shift;&lt;/code&gt; 最初のコマンドライン引数を使用する正規表現として保存し、残りのコマンドライン引数をファイルとして扱います。 &lt;code&gt;while (&amp;lt;&amp;gt;)&lt;/code&gt; は、すべてのファイルのすべての行をループします。各行について、 &lt;code&gt;print if /$regexp/;&lt;/code&gt; 正規表現が行と一致する場合、その行を出力します。この行では、 &lt;code&gt;print&lt;/code&gt; と &lt;code&gt;/$regexp/&lt;/code&gt; 両方がデフォルト変数 &lt;code&gt;$_&lt;/code&gt; 暗黙的に使用しています。</target>
        </trans-unit>
        <trans-unit id="b3f9820f4fcf840eefdc1fac524d68220274e583" translate="yes" xml:space="preserve">
          <source>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself</source>
          <target state="translated">このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="46aefc944a8368be1c5041bb6eeeeb6f411fe967" translate="yes" xml:space="preserve">
          <source>This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="ef7753908303851a8d71edec5d567bdf9359f255" translate="yes" xml:space="preserve">
          <source>This program is free software; you can redistribute it and/or modify it under the terms of either:</source>
          <target state="translated">このプログラムはフリーソフトウェアです。</target>
        </trans-unit>
        <trans-unit id="d232685400a50b411b31a9d8b5d5d46e7d1e5a7e" translate="yes" xml:space="preserve">
          <source>This program is free software; you can redistribute it and/or modify it under the terms of either: the GNU General Public License as published by the Free Software Foundation; or the Artistic License.</source>
          <target state="translated">このプログラムはフリーソフトウェアです。あなたは、フリーソフトウェア財団によって発行されたGNU一般公衆利用許諾書、または芸術的利用許諾書のいずれかの条件の下で、これを再配布したり、改変したりすることができます。</target>
        </trans-unit>
        <trans-unit id="eda486acda27bdf9cd66949e1266b5a78cb661d8" translate="yes" xml:space="preserve">
          <source>This program is free software; you may redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このプログラムはフリーソフトウェアです。Perlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="49a9ebce432bc6f7a5abfa1673ae23d082772d50" translate="yes" xml:space="preserve">
          <source>This program is maintained by the Perl 5 Porters. The CPAN distribution is maintained by S&amp;eacute;bastien Aperghis-Tramoni &amp;lt;</source>
          <target state="translated">このプログラムは、Perl 5ポーターによって管理されています。CPANディストリビューションはS&amp;eacute;bastienAperghis-Tramoni &amp;lt;</target>
        </trans-unit>
        <trans-unit id="d98f469a4bef1492cbd51567cf72d3226f5fb0a1" translate="yes" xml:space="preserve">
          <source>This program provides an easy way to send a thank-you message back to the authors and maintainers of perl. It's just</source>
          <target state="translated">このプログラムは、Perlの作者やメンテナに感謝のメッセージを送る簡単な方法を提供します。それは</target>
        </trans-unit>
        <trans-unit id="474e6c18a35ba4d4e6ef7db0a92aa1f2c8019fc7" translate="yes" xml:space="preserve">
          <source>This program uses the pipeline model to generate prime numbers. Each thread in the pipeline has an input queue that feeds numbers to be checked, a prime number that it's responsible for, and an output queue into which it funnels numbers that have failed the check. If the thread has a number that's failed its check and there's no child thread, then the thread must have found a new prime number. In that case, a new child thread is created for that prime and stuck on the end of the pipeline.</source>
          <target state="translated">このプログラムは、パイプラインモデルを使用して素数を生成します。パイプライン内の各スレッドは、チェック対象の素数を供給する入力キューと、そのスレッドが担当する素数、そしてチェックに失敗した素数を転送する出力キューを持っています。そのスレッドにチェックに失敗した数値があり、子スレッドが存在しない場合、そのスレッドは新しい素数を見つけたに違いありません。その場合、その素数のために新しい子スレッドが作成され、パイプラインの最後でスタックします。</target>
        </trans-unit>
        <trans-unit id="9bd07d758efadc42857a5a0bab51cd8a077edefd" translate="yes" xml:space="preserve">
          <source>This program will print only the line containing &quot;Bar&quot;. If the range operator is changed to &lt;code&gt;...&lt;/code&gt; , it will also print the &quot;Baz&quot; line.</source>
          <target state="translated">このプログラムは、「Bar」を含む行のみを印刷します。範囲演算子を &lt;code&gt;...&lt;/code&gt; に変更すると、「Baz」行も出力されます。</target>
        </trans-unit>
        <trans-unit id="30db2380e071100cd380f37fbfe50881aec4a9f3" translate="yes" xml:space="preserve">
          <source>This program will print only the line containing &quot;Bar&quot;. If the range operator is changed to &lt;code&gt;...&lt;/code&gt;, it will also print the &quot;Baz&quot; line.</source>
          <target state="translated">このプログラムは、「Bar」を含む行のみを出力します。範囲演算子を &lt;code&gt;...&lt;/code&gt; に変更すると、「Baz」行も出力されます。</target>
        </trans-unit>
        <trans-unit id="f91a32c34a450fa3aaeea5e09b4bf9753a0de2ef" translate="yes" xml:space="preserve">
          <source>This program will probably hang until you kill it. The only way it won't hang is if one of the two threads acquires both locks first. A guaranteed-to-hang version is more complicated, but the principle is the same.</source>
          <target state="translated">このプログラムは、おそらくあなたがそれを殺すまでハングします。ハングしない唯一の方法は、2 つのスレッドのうちの 1 つが先に両方のロックを取得した場合です。ハングが保証されたバージョンはより複雑ですが、原理は同じです。</target>
        </trans-unit>
        <trans-unit id="5342717fe0bceba26cbcb8fb4ec4c851e52a537d" translate="yes" xml:space="preserve">
          <source>This project was originated by the late Nick Ing-Simmons and later maintained by Dan Kogai</source>
          <target state="translated">このプロジェクトは、故Nick Ing-Simmons氏によって考案され、後にDan Kogai氏によってメンテナンスされました。</target>
        </trans-unit>
        <trans-unit id="9118e7dccf4093710a6ee14c8c47816f5d4b16b0" translate="yes" xml:space="preserve">
          <source>This property is always written in the compound form. For example, &lt;code&gt;\p{Bidi_Class:R}&lt;/code&gt; matches characters that are normally written right to left. Unlike the &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;&quot;General_Category&quot;&lt;/a&gt;&lt;/code&gt; property, this property can have more values added in a future Unicode release. Those listed above comprised the complete set for many Unicode releases, but others were added in Unicode 6.3; you can always find what the current ones are in &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;. And &lt;a href=&quot;https://www.unicode.org/reports/tr9/&quot;&gt;https://www.unicode.org/reports/tr9/&lt;/a&gt; describes how to use them.</source>
          <target state="translated">このプロパティは常に複合形式で記述されます。たとえば、 &lt;code&gt;\p{Bidi_Class:R}&lt;/code&gt; は、通常は右から左に書かれる文字と一致します。 &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;&quot;General_Category&quot;&lt;/a&gt;&lt;/code&gt; プロパティとは異なり、このプロパティには、将来のUnicodeリリースで追加される値を追加できます。上記のリストは多くのUnicodeリリースの完全なセットを構成していましたが、その他はUnicode6.3で追加されました。あなたはいつでも&lt;a href=&quot;perluniprops&quot;&gt;perlunipropsで&lt;/a&gt;現在のものが何であるかを見つけることができます。また、&lt;a href=&quot;https://www.unicode.org/reports/tr9/&quot;&gt;https：//www.unicode.org/reports/tr9/に&lt;/a&gt;それらの使用方法が記載されています。</target>
        </trans-unit>
        <trans-unit id="d353efbbda92520a2429ad4f8535f649667e5952" translate="yes" xml:space="preserve">
          <source>This property is always written in the compound form. For example, &lt;code&gt;\p{Bidi_Class:R}&lt;/code&gt; matches characters that are normally written right to left. Unlike the &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt;&lt;/code&gt; property, this property can have more values added in a future Unicode release. Those listed above comprised the complete set for many Unicode releases, but others were added in Unicode 6.3; you can always find what the current ones are in in &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;. And &lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt; describes how to use them.</source>
          <target state="translated">このプロパティは常に複合形式で記述されます。たとえば、 &lt;code&gt;\p{Bidi_Class:R}&lt;/code&gt; は、通常右から左に書かれる文字に一致します。 &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt;&lt;/code&gt; プロパティとは異なり、このプロパティには、将来のUnicodeリリースで追加される値が含まれる可能性があります。上記のリストは多くのUnicodeリリースの完全なセットを構成していましたが、Unicode 6.3で追加されたものもあります。&lt;a href=&quot;perluniprops&quot;&gt;perlunipropsで&lt;/a&gt;常に現在のものを見つけることができます。そして&lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt;はそれらの使い方を説明しています。</target>
        </trans-unit>
        <trans-unit id="9d34b69b565209c628e5e765cbc6639e949afb7e" translate="yes" xml:space="preserve">
          <source>This property is used when you need to know in what Unicode version(s) a character is.</source>
          <target state="translated">このプロパティは、ある文字がどの Unicode バージョンであるかを知る必要がある場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="ba740c0026c45f2093377326c9e21d5c765b2b70" translate="yes" xml:space="preserve">
          <source>This provides access to most of the Win32 GUI widgets from Perl. Obviously, it only runs under Win32, and uses native widgets. The Perl interface doesn't really follow the C interface: it's been made more Perlish, and the documentation is pretty good. More advanced stuff may require familiarity with the C Win32 APIs, or reference to MSDN.</source>
          <target state="translated">これはPerlからWin32 GUIウィジェットのほとんどにアクセスすることができます。明らかに、これは Win32 でのみ動作し、ネイティブのウィジェットを使用します。Perl のインターフェイスは C のインターフェイスを踏襲していません。より高度なものは、C の Win32 API に精通していたり、MSDN を参照したりする必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="05ed7360b5662052cf8df531a4821820675f5a90" translate="yes" xml:space="preserve">
          <source>This provides an alternate means to specify function names to be exported from the extension. Its value is a reference to an array of function names to be exported by the extension. These names are passed through unaltered to the linker options file.</source>
          <target state="translated">これは、拡張モジュールからエクスポートする関数名を指定するための代替手段を提供します。その値は、拡張モジュールからエクスポートされる関数名の配列への参照です。これらの名前は、リンカのオプションファイルにそのまま渡されます。</target>
        </trans-unit>
        <trans-unit id="b6d4501c0d8df55386bc41a04cfb00e365ded86e" translate="yes" xml:space="preserve">
          <source>This provides an alternate means to specify function names to be exported from the extension. Its value is a reference to an array of function names to be exported by the extension. These names are passed through unaltered to the linker options file. Specifying a value for the FUNCLIST attribute suppresses automatic generation of the bootstrap function for the package. To still create the bootstrap name you have to specify the package name in the DL_FUNCS hash:</source>
          <target state="translated">これは、拡張モジュールからエクスポートする関数名を指定するための代替手段を提供します。その値は、拡張モジュールからエクスポートされる関数名の配列への参照です。これらの名前は、リンカ・オプション・ファイルに変更されずに渡されます。FUNCLIST 属性に値を指定すると、パッケージのブートストラップ関数の自動生成を抑制します。ブートストラップ名を生成するには、DL_FUNCS ハッシュでパッケージ名を指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e5949eb8258f363515432b75a3130bd3950de7ae" translate="yes" xml:space="preserve">
          <source>This provides console orientated output formatting for &lt;a href=&quot;../../harness&quot;&gt;TAP::Harness&lt;/a&gt; when run with multiple &lt;a href=&quot;../../harness#jobs&quot;&gt;jobs in TAP::Harness&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;../../harness&quot;&gt;TAP :: Harness&lt;/a&gt;で複数の&lt;a href=&quot;../../harness#jobs&quot;&gt;ジョブを使用して&lt;/a&gt;実行したときに、TAP :: Harnessのコンソール指向の出力フォーマットが提供されます。</target>
        </trans-unit>
        <trans-unit id="5c754e200bc077c2bf6996a1253c57ba0690ec6b" translate="yes" xml:space="preserve">
          <source>This provides console orientated output formatting for &lt;a href=&quot;TAP::Harness&quot;&gt;TAP::Harness&lt;/a&gt; when run with multiple &lt;a href=&quot;TAP::Harness#jobs&quot;&gt;&quot;jobs&quot; in TAP::Harness&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;TAP::Harness&quot;&gt;TAP :: Harness&lt;/a&gt;で複数の&lt;a href=&quot;TAP::Harness#jobs&quot;&gt;「ジョブ」を使用して&lt;/a&gt;実行した場合に、TAP :: Harnessのコンソール指向の出力フォーマットが提供されます。</target>
        </trans-unit>
        <trans-unit id="9181d13c6755b2d2d5fcc68549a86008e0459f52" translate="yes" xml:space="preserve">
          <source>This provides console orientated output formatting for TAP::Harness.</source>
          <target state="translated">TAP::Harness のコンソール指向の出力フォーマットを提供します。</target>
        </trans-unit>
        <trans-unit id="cb848608e40dafbcfe04519def93d68a46db285b" translate="yes" xml:space="preserve">
          <source>This provides fairly low-level access to the Win32 System API calls dealing with files and directories.</source>
          <target state="translated">これは、ファイルやディレクトリを扱うWin32システムAPIコールへのかなり低レベルのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="d034d371e8adbdcae6dcc8b5f1035f643b009166" translate="yes" xml:space="preserve">
          <source>This provides file orientated output formatting for &lt;a href=&quot;../../harness&quot;&gt;TAP::Harness&lt;/a&gt;. It is particularly important when running with parallel tests, as it ensures that test results are not interleaved, even when run verbosely.</source>
          <target state="translated">これは&lt;a href=&quot;../../harness&quot;&gt;TAP :: Harnessに&lt;/a&gt;ファイル指向の出力フォーマットを提供します。並列テストで実行する場合は特に重要です。冗長に実行した場合でも、テスト結果がインターリーブされないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="41a1e8e2958aae247fdb0f251950cd9259ec4e20" translate="yes" xml:space="preserve">
          <source>This provides file orientated output formatting for &lt;a href=&quot;TAP::Harness&quot;&gt;TAP::Harness&lt;/a&gt;. It is particularly important when running with parallel tests, as it ensures that test results are not interleaved, even when run verbosely.</source>
          <target state="translated">これにより、&lt;a href=&quot;TAP::Harness&quot;&gt;TAP :: Harnessの&lt;/a&gt;ファイル指向の出力フォーマットが提供されます。並列テストで実行する場合は、詳細に実行した場合でもテスト結果がインターリーブされないようにするため、特に重要です。</target>
        </trans-unit>
        <trans-unit id="be3613f62ba727bb8044f064f871c5a2ffe96d89" translate="yes" xml:space="preserve">
          <source>This provides file orientated output formatting for TAP::Harness.</source>
          <target state="translated">TAP::Harness のファイル指向の出力フォーマットを提供します。</target>
        </trans-unit>
        <trans-unit id="e79f6eddf4d757dda9eee150d598652b5e165fe6" translate="yes" xml:space="preserve">
          <source>This provides the &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; token that returns a reference to the current subroutine or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; outside of a subroutine.</source>
          <target state="translated">これは、現在のサブルーチンへの参照、またはサブルーチン外の &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返す &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; トークンを提供します。</target>
        </trans-unit>
        <trans-unit id="3e44b62c4658b0866a101af4ad0e69174b50a666" translate="yes" xml:space="preserve">
          <source>This provides the &lt;code&gt;__SUB__&lt;/code&gt; token that returns a reference to the current subroutine or &lt;code&gt;undef&lt;/code&gt; outside of a subroutine.</source>
          <target state="translated">これにより、現在のサブルーチンへの参照またはサブルーチン外の &lt;code&gt;undef&lt;/code&gt; を返す &lt;code&gt;__SUB__&lt;/code&gt; トークンが提供されます。</target>
        </trans-unit>
        <trans-unit id="224c6e548e4884dfbdfe2ac071bf15dda7c825fc" translate="yes" xml:space="preserve">
          <source>This puts the executables in f:/perllib/bin. Manually move them to the &lt;code&gt;PATH&lt;/code&gt; , manually move the built</source>
          <target state="translated">これにより、実行可能ファイルがf：/ perllib / binに配置されます。手動でそれらを &lt;code&gt;PATH&lt;/code&gt; に移動し、ビルドされたものを手動で移動します</target>
        </trans-unit>
        <trans-unit id="0f078af34eb1808b4b8645c105ffb896a2e3287b" translate="yes" xml:space="preserve">
          <source>This puts the executables in f:/perllib/bin. Manually move them to the &lt;code&gt;PATH&lt;/code&gt;, manually move the built</source>
          <target state="translated">これにより、実行可能ファイルがf：/ perllib / binに配置されます。それらを手動で &lt;code&gt;PATH&lt;/code&gt; に移動し、手動でビルドを移動します</target>
        </trans-unit>
        <trans-unit id="d9a0cac7b723579ba6e539b4576a4997c5b49e8f" translate="yes" xml:space="preserve">
          <source>This read-only variable contains a reference to the last-read filehandle. This is set by &lt;code&gt;&amp;lt;HANDLE&amp;gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt;. This is the same handle that &lt;code&gt;$.&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; without arguments use. It is also the handle used when Perl appends &quot;, &amp;lt;STDIN&amp;gt; line 1&quot; to an error or warning message.</source>
          <target state="translated">この読み取り専用変数には、最後に読み取られたファイルハンドルへの参照が含まれています。これは、 &lt;code&gt;&amp;lt;HANDLE&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; によって設定されます。これは &lt;code&gt;$.&lt;/code&gt; と同じハンドルです。そして、 &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; 引数を使用せず。また、Perlがエラーメッセージまたは警告メッセージに「&amp;lt;STDIN&amp;gt; 1行目」を追加するときに使用されるハンドルでもあります。</target>
        </trans-unit>
        <trans-unit id="be43d29d7cb60d0bb5d93c01c4c8424abbd333f2" translate="yes" xml:space="preserve">
          <source>This read-only variable contains a reference to the last-read filehandle. This is set by &lt;code&gt;&amp;lt;HANDLE&amp;gt;&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;tell&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt; and &lt;code&gt;seek&lt;/code&gt;. This is the same handle that &lt;code&gt;$.&lt;/code&gt; and &lt;code&gt;tell&lt;/code&gt; and &lt;code&gt;eof&lt;/code&gt; without arguments use. It is also the handle used when Perl appends &quot;, &amp;lt;STDIN&amp;gt; line 1&quot; to an error or warning message.</source>
          <target state="translated">この読み取り専用変数には、最後に読み取られたファイルハンドルへの参照が含まれています。これは、 &lt;code&gt;&amp;lt;HANDLE&amp;gt;&lt;/code&gt; 、 &lt;code&gt;readline&lt;/code&gt; 、 &lt;code&gt;tell&lt;/code&gt; 、 &lt;code&gt;eof&lt;/code&gt; 、 &lt;code&gt;seek&lt;/code&gt; によって設定されます。これは &lt;code&gt;$.&lt;/code&gt; と同じハンドルです。そして、 &lt;code&gt;tell&lt;/code&gt; と &lt;code&gt;eof&lt;/code&gt; 引数を使用せず。これは、Perlがエラーまたは警告メッセージに「、&amp;lt;STDIN&amp;gt;行1」を追加するときに使用されるハンドルでもあります。</target>
        </trans-unit>
        <trans-unit id="36a8564c99d9b70452198f29efc00c01b42f3989" translate="yes" xml:space="preserve">
          <source>This readonly SV has a zero numeric value and a &lt;code&gt;&quot;0&quot;&lt;/code&gt; string value. It's similar to &lt;code&gt;&lt;a href=&quot;#PL_sv_no&quot;&gt;&quot;PL_sv_no&quot;&lt;/a&gt;&lt;/code&gt; except for its string value. Can be used as a cheap alternative to &lt;code&gt;mXPUSHi(0)&lt;/code&gt; for example. Always refer to this as &lt;code&gt;&amp;amp;PL_sv_zero&lt;/code&gt;. Introduced in 5.28.</source>
          <target state="translated">この読み取り専用SVには、ゼロの数値と &lt;code&gt;&quot;0&quot;&lt;/code&gt; 文字列値があります。文字列値を除いて、 &lt;code&gt;&lt;a href=&quot;#PL_sv_no&quot;&gt;&quot;PL_sv_no&quot;&lt;/a&gt;&lt;/code&gt; 似ています。たとえば、 &lt;code&gt;mXPUSHi(0)&lt;/code&gt; の安価な代替手段として使用できます。これを常に &lt;code&gt;&amp;amp;PL_sv_zero&lt;/code&gt; と呼びます。5.28で導入されました。</target>
        </trans-unit>
        <trans-unit id="2e9c374af25573cbb8a011c91df0b5de175403d9" translate="yes" xml:space="preserve">
          <source>This reads the Pod content of the file (or filehandle) that you specify, and processes it with that &lt;code&gt;$parser&lt;/code&gt; object, according to however &lt;code&gt;$parser&lt;/code&gt; 's class works, and according to whatever parser options you have set up for this &lt;code&gt;$parser&lt;/code&gt; object.</source>
          <target state="translated">これは、指定したファイル（またはファイルハンドル）のポッドコンテンツを読み取り、その &lt;code&gt;$parser&lt;/code&gt; オブジェクトで処理します。ただし、 &lt;code&gt;$parser&lt;/code&gt; のクラスは機能しますが、この &lt;code&gt;$parser&lt;/code&gt; オブジェクトに設定したパーサーオプションに応じて。</target>
        </trans-unit>
        <trans-unit id="a26e710e2e27380d631c3ef937b2b0240e77b996" translate="yes" xml:space="preserve">
          <source>This reads the Pod content of the file (or filehandle) that you specify, and processes it with that &lt;code&gt;$parser&lt;/code&gt; object, according to however &lt;code&gt;$parser&lt;/code&gt;'s class works, and according to whatever parser options you have set up for this &lt;code&gt;$parser&lt;/code&gt; object.</source>
          <target state="translated">これにより、指定したファイル（またはファイルハンドル）のポッドコンテンツが読み取られ、 &lt;code&gt;$parser&lt;/code&gt; のクラスが機能するかどうか、およびこの &lt;code&gt;$parser&lt;/code&gt; オブジェクトに設定したパーサーオプションに従って、その &lt;code&gt;$parser&lt;/code&gt; オブジェクトで処理されます。 。</target>
        </trans-unit>
        <trans-unit id="49bb05c8de9876d308efc2608bb9d89029538d52" translate="yes" xml:space="preserve">
          <source>This refers to a namespace declared with the Perl &lt;code&gt;package&lt;/code&gt; statement. In Perl, packages often have a version number property given by the &lt;code&gt;$VERSION&lt;/code&gt; variable in the namespace.</source>
          <target state="translated">これは、Perl &lt;code&gt;package&lt;/code&gt; ステートメントで宣言された名前空間を指します。Perlでは、パッケージには、名前空間の &lt;code&gt;$VERSION&lt;/code&gt; 変数によって指定されるバージョン番号プロパティが含まれていることがよくあります。</target>
        </trans-unit>
        <trans-unit id="b4ff270630232407257920d032001ef8966fbd15" translate="yes" xml:space="preserve">
          <source>This refers to a reusable library of code contained in a single file. Modules usually contain one or more packages and are often referred to by the name of a primary package that can be mapped to the file name. For example, one might refer to &lt;code&gt;File::Spec&lt;/code&gt; instead of</source>
          <target state="translated">これは、単一のファイルに含まれるコードの再利用可能なライブラリを指します。モジュールには通常、1つ以上のパッケージが含まれており、ファイル名にマップできるプライマリパッケージの名前で参照されることがよくあります。たとえば、代わりに &lt;code&gt;File::Spec&lt;/code&gt; 参照する場合があります。</target>
        </trans-unit>
        <trans-unit id="e8d7cb3ad9af8785004d6aea2c58d998c7c43122" translate="yes" xml:space="preserve">
          <source>This refers to a reusable library of code typically contained in a single file. Currently, we primarily talk of perl modules, but this specification should be open enough to apply to other languages as well (ex. python, ruby).</source>
          <target state="translated">これは、一般的に単一のファイルに含まれる再利用可能なコードのライブラリを指します。現在のところ、私たちは主に perl モジュールについて話していますが、この仕様は他の言語 (python,ruby など)にも適用できるように十分にオープンであるべきです。</target>
        </trans-unit>
        <trans-unit id="eced75506fbb27c39fc8e3e1e378940cf07d3648" translate="yes" xml:space="preserve">
          <source>This refers to a reusable library of code typically contained in a single file. Currently, we primarily talk of perl modules, but this specification should be open enough to apply to other languages as well (ex. python, ruby). Examples of modules are &lt;code&gt;Class::Container&lt;/code&gt;, &lt;code&gt;LWP::Simple&lt;/code&gt;, or &lt;code&gt;DBD::File&lt;/code&gt;.</source>
          <target state="translated">これは、通常、単一のファイルに含まれる再利用可能なコードのライブラリを指します。現在、私たちは主にperlモジュールについて話しますが、この仕様は他の言語（python、rubyなど）にも適用できるように十分にオープンである必要があります。モジュールの例は、 &lt;code&gt;Class::Container&lt;/code&gt; 、 &lt;code&gt;LWP::Simple&lt;/code&gt; 、または &lt;code&gt;DBD::File&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="738d39668fa39fd446be00455410afcfca770f3c" translate="yes" xml:space="preserve">
          <source>This refers to code that constructs a metadata data structure, serializes into a bytestream and/or writes it to disk.</source>
          <target state="translated">これは、メタデータのデータ構造を構築し、バイテストストリームにシリアライズし、ディスクに書き込むコードを指します。</target>
        </trans-unit>
        <trans-unit id="fdbb6deaa19e9a370f00c7ae0865d9d2054ba9d5" translate="yes" xml:space="preserve">
          <source>This refers to code that reads a metadata file, deserializes it into a data structure in memory, or interprets a data structure of metadata elements.</source>
          <target state="translated">メタデータファイルを読み込んだり、メモリ内のデータ構造にデシリアライズしたり、メタデータ要素のデータ構造を解釈したりするコードを指します。</target>
        </trans-unit>
        <trans-unit id="c31dda74f7214f2c1e1f0e262ad534c6710776eb" translate="yes" xml:space="preserve">
          <source>This regex from Benjamin Goldberg will add commas to numbers:</source>
          <target state="translated">Benjamin Goldbergによるこの正規表現は、数字にカンマを追加します。</target>
        </trans-unit>
        <trans-unit id="056a5755811e26e84ba66501ddc6e8aa83e0239e" translate="yes" xml:space="preserve">
          <source>This regexp covers a much more limited set of formats and constitutes the best practices for initializing version objects. Whether you choose to employ decimal or dotted-decimal for is a personal preference however.</source>
          <target state="translated">この正規表現は、より限定されたフォーマットのセットをカバーしており、バージョンオブジェクトを初期化するためのベストプラクティスを構成しています。10進法と10進法のどちらを採用するかは個人の好みによります。</target>
        </trans-unit>
        <trans-unit id="d63b86d7679f940ac8c61114c80aac9d0dbe5e33" translate="yes" xml:space="preserve">
          <source>This regexp covers all of the legal forms allowed under the current version string parser. This is not to say that all of these forms are recommended, and some of them can only be used when quoted.</source>
          <target state="translated">この正規表現は、現在のバージョンの文字列パーサで許可されているすべての形式をカバーしています。これは、これらのすべての形式が推奨されているわけではありませんし、 いくつかの形式は引用符で囲まれたときにしか使えません。</target>
        </trans-unit>
        <trans-unit id="ba5402a82ba706913f690e8b3975f67ccd9cac88" translate="yes" xml:space="preserve">
          <source>This regexp displays a common task: perform a case-insensitive match. Perl provides a way of avoiding all those brackets by simply appending an &lt;code&gt;'i'&lt;/code&gt; to the end of the match. Then &lt;code&gt;/[yY][eE][sS]/;&lt;/code&gt; can be rewritten as &lt;code&gt;/yes/i;&lt;/code&gt; . The &lt;code&gt;'i'&lt;/code&gt; stands for case-insensitive and is an example of a</source>
          <target state="translated">この正規表現は、大文字と小文字を区別しない一致を実行するという一般的なタスクを表示します。Perlは、一致の最後に &lt;code&gt;'i'&lt;/code&gt; を追加するだけで、これらのブラケットをすべて回避する方法を提供します。次に &lt;code&gt;/[yY][eE][sS]/;&lt;/code&gt; &lt;code&gt;/yes/i;&lt;/code&gt; 書き換えることができます。。 &lt;code&gt;'i'&lt;/code&gt; 大文字と小文字を区別しないの略で、Aの一例です</target>
        </trans-unit>
        <trans-unit id="3a214c88f7b6824fbb7ccf51b387a9a746e2ab88" translate="yes" xml:space="preserve">
          <source>This regexp displays a common task: perform a case-insensitive match. Perl provides a way of avoiding all those brackets by simply appending an &lt;code&gt;'i'&lt;/code&gt; to the end of the match. Then &lt;code&gt;/[yY][eE][sS]/;&lt;/code&gt; can be rewritten as &lt;code&gt;/yes/i;&lt;/code&gt;. The &lt;code&gt;'i'&lt;/code&gt; stands for case-insensitive and is an example of a</source>
          <target state="translated">この正規表現は、大文字と小文字を区別しない一致を実行するという一般的なタスクを表示します。Perlは、一致の最後に &lt;code&gt;'i'&lt;/code&gt; を追加するだけで、これらすべての括弧を回避する方法を提供します。次に &lt;code&gt;/[yY][eE][sS]/;&lt;/code&gt; &lt;code&gt;/yes/i;&lt;/code&gt; と書き直すことができます。。 &lt;code&gt;'i'&lt;/code&gt; 大文字と小文字を区別しないの略で、Aの一例です</target>
        </trans-unit>
        <trans-unit id="f039b2c10f0c743bc7161531bc5bb4ee7cf32e0f" translate="yes" xml:space="preserve">
          <source>This regexp matches at the earliest string position, &lt;code&gt;'T'&lt;/code&gt; . One might think that &lt;code&gt;e&lt;/code&gt; , being leftmost in the alternation, would be matched, but &lt;code&gt;r&lt;/code&gt; produces the longest string in the first quantifier.</source>
          <target state="translated">この正規表現は、最も早い文字列位置 &lt;code&gt;'T'&lt;/code&gt; で一致します。交互に左端にある &lt;code&gt;e&lt;/code&gt; が一致すると考えるかもしれませんが、 &lt;code&gt;r&lt;/code&gt; は最初の量指定子で最も長い文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="18bc3044ad1a70322cf6bfca75dfe2f27fadde89" translate="yes" xml:space="preserve">
          <source>This regexp matches at the earliest string position, &lt;code&gt;'T'&lt;/code&gt;. One might think that &lt;code&gt;'e'&lt;/code&gt;, being leftmost in the alternation, would be matched, but &lt;code&gt;'r'&lt;/code&gt; produces the longest string in the first quantifier.</source>
          <target state="translated">この正規表現は、最も早い文字列位置 &lt;code&gt;'T'&lt;/code&gt; で一致します。交互に左端にある &lt;code&gt;'e'&lt;/code&gt; は一致すると思われるかもしれませんが、 &lt;code&gt;'r'&lt;/code&gt; は最初の数量詞で最長の文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="b2afed8f05eefbd66a6b4b21a4dd6dc09f86be3d" translate="yes" xml:space="preserve">
          <source>This regexp without the &lt;code&gt;/x&lt;/code&gt; modifier is</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; 修飾子のないこの正規表現は</target>
        </trans-unit>
        <trans-unit id="a7d61ce1428d48124b4e47e558b037fdd3f04877" translate="yes" xml:space="preserve">
          <source>This registers warning categories for the given names and is primarily for use by the warnings::register pragma.</source>
          <target state="translated">これは、与えられた名前の警告カテゴリを登録し、主にwarnings::register pragmaによって使用されます。</target>
        </trans-unit>
        <trans-unit id="ac7da667100d67a773306ce2d3526ac0aaefa222" translate="yes" xml:space="preserve">
          <source>This release (5.14) uses &lt;code&gt;unix&lt;/code&gt; as the bottom layer on Win32, and so still uses the C compiler's numeric file descriptor routines. There is an experimental native &lt;code&gt;win32&lt;/code&gt; layer, which is expected to be enhanced and should eventually become the default under Win32.</source>
          <target state="translated">このリリース（5.14）では、Win32の最下層として &lt;code&gt;unix&lt;/code&gt; を使用しているため、Cコンパイラの数値ファイル記述子ルーチンが引き続き使用されます。実験的なネイティブの &lt;code&gt;win32&lt;/code&gt; レイヤーがあり、これは拡張される予定であり、最終的にはWin32のデフォルトになるはずです。</target>
        </trans-unit>
        <trans-unit id="e97366cc6c8c908874e040814cdab3c3ba7152dc" translate="yes" xml:space="preserve">
          <source>This release (5.30) uses &lt;code&gt;:unix&lt;/code&gt; as the bottom layer on Win32, and so still uses the C compiler's numeric file descriptor routines. There is an experimental native &lt;code&gt;:win32&lt;/code&gt; layer, which is expected to be enhanced and may eventually become the default under Win32.</source>
          <target state="translated">このリリース（5.30）は、Win32の最下層として &lt;code&gt;:unix&lt;/code&gt; を使用しているため、Cコンパイラの数値ファイル記述子ルーチンを引き続き使用します。実験的なネイティブ &lt;code&gt;:win32&lt;/code&gt; レイヤーがあります。これは拡張されることが期待されており、最終的にはWin32のデフォルトになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="08e93ba339b839f549405138c86c3e7a085e38a6" translate="yes" xml:space="preserve">
          <source>This release of Storable can be used on a newer version of Perl to serialize data which is not supported by earlier Perls. By default, Storable will attempt to do the right thing, by &lt;code&gt;croak()&lt;/code&gt; ing if it encounters data that it cannot deserialize. However, the defaults can be changed as follows:</source>
          <target state="translated">このリリースのStorableを新しいバージョンのPerlで使用すると、以前のPerlでサポートされていないデータをシリアル化できます。デフォルトでは、Storableは、逆シリアル化できないデータを検出した場合に &lt;code&gt;croak()&lt;/code&gt; を実行して、正しいことを試みます。ただし、デフォルトは次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="7ffdd0bf1fbd694aafba1b69b74908623d9b39e0" translate="yes" xml:space="preserve">
          <source>This release of Storable can be used on a newer version of Perl to serialize data which is not supported by earlier Perls. By default, Storable will attempt to do the right thing, by &lt;code&gt;croak()&lt;/code&gt;ing if it encounters data that it cannot deserialize. However, the defaults can be changed as follows:</source>
          <target state="translated">このリリースのStorableは、新しいバージョンのPerlで使用して、以前のPerlでサポートされていないデータをシリアル化できます。デフォルトでは、Storableは、逆シリアル化できないデータを検出した場合に &lt;code&gt;croak()&lt;/code&gt; を実行することにより、正しいことを実行しようとします。ただし、デフォルトは次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="224448a00c11022eb7a054d96b5b7887fe965764" translate="yes" xml:space="preserve">
          <source>This relied on &lt;code&gt;Test::Builder-&amp;gt;_try()&lt;/code&gt; which was a private method, documented as something nobody should use. This was fixed by using a different tool.</source>
          <target state="translated">これは、プライベートメソッドである &lt;code&gt;Test::Builder-&amp;gt;_try()&lt;/code&gt; 依存しており、誰も使用してはならないものとして文書化されています。これは、別のツールを使用して修正されました。</target>
        </trans-unit>
        <trans-unit id="1df9abd6e13cb17537a033c0a98a21365649ee63" translate="yes" xml:space="preserve">
          <source>This relies on the fact that uninitialized array elements are set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">これは、初期化されていない配列要素が &lt;code&gt;NULL&lt;/code&gt; に設定されているという事実に依存しています。</target>
        </trans-unit>
        <trans-unit id="2d1b77b3467fa5b58df05f447b8e32028382b1ea" translate="yes" xml:space="preserve">
          <source>This relies on the fact that uninitialized array elements are set to NULL.</source>
          <target state="translated">これは、初期化されていない配列要素が NULL に設定されていることに依存します。</target>
        </trans-unit>
        <trans-unit id="44ecfba29c712b60c9051df87b6cdce165f041c1" translate="yes" xml:space="preserve">
          <source>This removes the requirement for a given module from the object.</source>
          <target state="translated">これにより、オブジェクトから与えられたモジュールの要件が削除されます。</target>
        </trans-unit>
        <trans-unit id="9d7d55aad79de70107f3e8211b62fbf8c98570e5" translate="yes" xml:space="preserve">
          <source>This renders a print statement, which includes a call to the function. It's identical to rendering a file with a use call and that single statement, except for the filename which appears in the nextstate ops.</source>
          <target state="translated">これは、関数への呼び出しを含むprint文をレンダリングします。これは、nextstate opsに表示されるファイル名を除いては、use呼び出しと単一のステートメントを持つファイルをレンダリングするのと同じです。</target>
        </trans-unit>
        <trans-unit id="ea6f5b9409b135d9fd2914f5e9712bb211e3d415" translate="yes" xml:space="preserve">
          <source>This renders all functions in the B::Concise package with the source lines. It eschews the O framework so that the stashref can be passed directly to B::Concise::compile(). See -stash option for a more convenient way to render a package.</source>
          <target state="translated">これは、B::Conciseパッケージ内のすべての関数をソース行とともにレンダリングします。O フレームワークを省略し、 stashref を直接 B::Concise::compile()に渡すことができます。パッケージをレンダリングするより便利な方法については -stash オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="32554955438229712c4cac893fa9122a188f77ea" translate="yes" xml:space="preserve">
          <source>This replaces any read-only SV with a fresh SV and removes any magic.</source>
          <target state="translated">これは、読み取り専用のSVを新鮮なSVに置き換え、魔法を取り除きます。</target>
        </trans-unit>
        <trans-unit id="e348cbe59c03a2464d04a9305501c3c5773cd34e" translate="yes" xml:space="preserve">
          <source>This replaces any read-only SV with a fresh writable copy and removes any magic.</source>
          <target state="translated">これは、読み取り専用のSVを新しい書き込み可能なコピーに置き換え、魔法を取り除きます。</target>
        </trans-unit>
        <trans-unit id="4e89c15d6e7988885e07ca54d3050b10693c573d" translate="yes" xml:space="preserve">
          <source>This reports whether the VMS process has been set to a case tolerant state, and returns true when the process is in the traditional case tolerant mode and false when case sensitivity has been enabled for the process. It is intended for use by the File::Spec::VMS-&amp;gt;case_tolerant method only, and it is recommended that you only use File::Spec-&amp;gt;case_tolerant.</source>
          <target state="translated">これは、VMSプロセスが大文字と小文字を区別する状態に設定されているかどうかを報告し、プロセスが従来の大文字と小文字を区別するモードの場合はtrueを返し、大文字と小文字の区別がプロセスに対して有効になっている場合はfalseを返します。これは、File :: Spec :: VMS-&amp;gt; case_tolerantメソッドでのみ使用することを目的としており、File :: Spec-&amp;gt; case_tolerantのみを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="65869e50f6892b08c4cf7dcb78cc5963bf748c6b" translate="yes" xml:space="preserve">
          <source>This requires &lt;code&gt;perl-5.8&lt;/code&gt; or higher, compiled with &lt;code&gt;perlio&lt;/code&gt;</source>
          <target state="translated">これには &lt;code&gt;perlio&lt;/code&gt; でコンパイルされた &lt;code&gt;perl-5.8&lt;/code&gt; 以降が必要です</target>
        </trans-unit>
        <trans-unit id="cf4909d18f4323c37d07bae96a1d0080562f63f5" translate="yes" xml:space="preserve">
          <source>This requires require a 64-bit MIPS CPU (R8000, R10000, ...)</source>
          <target state="translated">これには64ビットMIPS CPU (R8000,R10000,....)が必要です。</target>
        </trans-unit>
        <trans-unit id="f7da7513031db644267fa4b13fabe99ed2a030c7" translate="yes" xml:space="preserve">
          <source>This restores one of the standard line-styles: &lt;code&gt;terse&lt;/code&gt; , &lt;code&gt;concise&lt;/code&gt; , &lt;code&gt;linenoise&lt;/code&gt; , &lt;code&gt;debug&lt;/code&gt; , &lt;code&gt;env&lt;/code&gt; , into effect. It also accepts style names previously defined with add_style().</source>
          <target state="translated">これにより、標準のラインスタイルの1つである &lt;code&gt;terse&lt;/code&gt; 、 &lt;code&gt;concise&lt;/code&gt; 、 &lt;code&gt;linenoise&lt;/code&gt; 、 &lt;code&gt;debug&lt;/code&gt; 、 &lt;code&gt;env&lt;/code&gt; が有効になります。また、以前にadd_style（）で定義されたスタイル名を受け入れます。</target>
        </trans-unit>
        <trans-unit id="36fc0f09fd582998b2f90539bd1668c94507a44b" translate="yes" xml:space="preserve">
          <source>This restores one of the standard line-styles: &lt;code&gt;terse&lt;/code&gt;, &lt;code&gt;concise&lt;/code&gt;, &lt;code&gt;linenoise&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt;, into effect. It also accepts style names previously defined with add_style().</source>
          <target state="translated">標準的なラインスタイルのこのリストアの1： &lt;code&gt;terse&lt;/code&gt; 、 &lt;code&gt;concise&lt;/code&gt; 、 &lt;code&gt;linenoise&lt;/code&gt; 、 &lt;code&gt;debug&lt;/code&gt; 、 &lt;code&gt;env&lt;/code&gt; 効果に、。また、add_style（）で以前に定義されたスタイル名も受け入れます。</target>
        </trans-unit>
        <trans-unit id="f0559182bda8492a3ca4dae9b14b73dc55291956" translate="yes" xml:space="preserve">
          <source>This restores the default behavior after you've changed it with '-main' (it's not normally needed). If no subroutine name/ref is given, main is rendered, regardless of this flag.</source>
          <target state="translated">これは、'-main'で変更した後のデフォルトの動作を復元します(通常は必要ありません)。サブルーチン名/参照が与えられていない場合は、このフラグに関係なくmainがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="f49545d47b4c2e67130feb223d7916803e2151e7" translate="yes" xml:space="preserve">
          <source>This restores the token object(s) to the front of the parser stream.</source>
          <target state="translated">これは、トークンオブジェクトをパーサストリームの先頭に復元します。</target>
        </trans-unit>
        <trans-unit id="bc16a591c72f30b96574184a49591c3cb8b3396e" translate="yes" xml:space="preserve">
          <source>This results in checking out the median commit between &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;perl-5.10.0&lt;/code&gt;. You can then run the bisecting process with:</source>
          <target state="translated">これにより、 &lt;code&gt;HEAD&lt;/code&gt; と &lt;code&gt;perl-5.10.0&lt;/code&gt; の間のコミットの中央値がチェックアウトされます。次に、次の方法で二等分プロセスを実行できます。</target>
        </trans-unit>
        <trans-unit id="abc61a1506f4a52166fcca29cd0724a61c00502b" translate="yes" xml:space="preserve">
          <source>This returns -1 if it is not possible to know.</source>
          <target state="translated">知ることができない場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="7c7a366a88c90193129d1a95d7e39c2f2c494051" translate="yes" xml:space="preserve">
          <source>This returns -1 if there is no way to check (assume yes)</source>
          <target state="translated">チェックする方法がない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="cc21f44beb4322ca69654d9019b9237853614328" translate="yes" xml:space="preserve">
          <source>This returns 0 if there are (most likely) no pending events.</source>
          <target state="translated">これは、保留中のイベントがない場合 (ほとんどの場合)には 0 を返します。</target>
        </trans-unit>
        <trans-unit id="8bd0398abb2c08261b0415684f65513126559e63" translate="yes" xml:space="preserve">
          <source>This returns 0 if there are no pending events.</source>
          <target state="translated">保留中のイベントがない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="9e5a3b4ddffecb8501f761fb971c3b2d6c7162bb" translate="yes" xml:space="preserve">
          <source>This returns 1 if there are (likely) pending events. Upon return it will reset, nothing else will be able to see that there were pending events.</source>
          <target state="translated">これは、保留中のイベントがある(可能性が高い)場合に1を返します。返された時点でリセットされ、保留中のイベントがあったことを知ることはできません。</target>
        </trans-unit>
        <trans-unit id="aa266181f0344e330298c3c78c5770ba393e0756" translate="yes" xml:space="preserve">
          <source>This returns 1 if there are pending events.</source>
          <target state="translated">保留中のイベントがある場合は1を返します。</target>
        </trans-unit>
        <trans-unit id="438306ebd9d1acbe91b86dc11907f9e6dab643b7" translate="yes" xml:space="preserve">
          <source>This returns NULL if the variable does not exist.</source>
          <target state="translated">変数が存在しない場合はNULLを返します。</target>
        </trans-unit>
        <trans-unit id="7a696a06774c6f3002eeb51ec2f2001513d53029" translate="yes" xml:space="preserve">
          <source>This returns a data structure containing the version requirements for a given module or undef if the given module has no requirements. This should not be used for version checks (see &lt;a href=&quot;#accepts_module&quot;&gt;&quot;accepts_module&quot;&lt;/a&gt; instead).</source>
          <target state="translated">これは、指定されたモジュールのバージョン要件を含むデータ構造を返します。指定されたモジュールに要件がない場合はundefを返します。これはバージョンチェックには使用しないでください（代わりに&lt;a href=&quot;#accepts_module&quot;&gt;「accepts_module」を&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="c37bfa051bc09e91f6aa8c8e068658f22a9b05b4" translate="yes" xml:space="preserve">
          <source>This returns a glob reference for the symbol table entry of VARNAME in the package of the compartment. VARNAME must be the &lt;b&gt;name&lt;/b&gt; of a variable without any leading type marker. For example:</source>
          <target state="translated">これは、コンパートメントのパッケージ内のVARNAMEのシンボルテーブルエントリのグロブ参照を返します。VARNAMEは、先行する型マーカーのない変数の&lt;b&gt;名前&lt;/b&gt;でなければなりません。例えば：</target>
        </trans-unit>
        <trans-unit id="4846a06785f0daaeee2213d80f23082c8fa4965c" translate="yes" xml:space="preserve">
          <source>This returns a handy stringified value of this object. This is useful for debugging, as in:</source>
          <target state="translated">これは、このオブジェクトの便利な文字列化された値を返します。のようにデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="ed3e8770a5f12bfd2e6e0013e9c81234e1f2fd4f" translate="yes" xml:space="preserve">
          <source>This returns a list of all facets that have been loaded using the &lt;code&gt;load_facet()&lt;/code&gt; method. This will not return any classes that have not been loaded, or have been loaded directly without a call to &lt;code&gt;load_facet()&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;load_facet()&lt;/code&gt; メソッドを使用してロードされたすべてのファセットのリストが返されます。これは、ロードされていないクラス、または &lt;code&gt;load_facet()&lt;/code&gt; を呼び出さずに直接ロードされたクラスを返しません。</target>
        </trans-unit>
        <trans-unit id="b1ea704d04f7c3ec75b7f4e64aa2fc6d627bedce" translate="yes" xml:space="preserve">
          <source>This returns a list of the elements of the op's aux data structure, or a null list if there is no aux. What will be returned depends on the object's type, but will typically be a collection of &lt;code&gt;B::IV&lt;/code&gt; , &lt;code&gt;B::GV&lt;/code&gt; , etc. objects. &lt;code&gt;cv&lt;/code&gt; is the &lt;code&gt;B::CV&lt;/code&gt; object representing the sub that the op is contained within.</source>
          <target state="translated">これは、opのauxデータ構造の要素のリストを返します。auxがない場合はnullリストを返します。返されるものはオブジェクトのタイプによって異なりますが、通常は &lt;code&gt;B::IV&lt;/code&gt; 、 &lt;code&gt;B::GV&lt;/code&gt; などのオブジェクトのコレクションです。 &lt;code&gt;cv&lt;/code&gt; は、opが含まれるサブルーチンを表す &lt;code&gt;B::CV&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="18b3e284330afc61e3a6c84779d9500461f4397e" translate="yes" xml:space="preserve">
          <source>This returns a list of the elements of the op's aux data structure, or a null list if there is no aux. What will be returned depends on the object's type, but will typically be a collection of &lt;code&gt;B::IV&lt;/code&gt;, &lt;code&gt;B::GV&lt;/code&gt;, etc. objects. &lt;code&gt;cv&lt;/code&gt; is the &lt;code&gt;B::CV&lt;/code&gt; object representing the sub that the op is contained within.</source>
          <target state="translated">これは、opのauxデータ構造の要素のリスト、またはauxがない場合はnullリストを返します。返されるものはオブジェクトのタイプによって異なりますが、通常は &lt;code&gt;B::IV&lt;/code&gt; 、 &lt;code&gt;B::GV&lt;/code&gt; などのオブジェクトのコレクションになります。 &lt;code&gt;cv&lt;/code&gt; は、opが含まれているサブを表す &lt;code&gt;B::CV&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="78c4d2eacb966527e478f0083cb85da673514051" translate="yes" xml:space="preserve">
          <source>This returns a list of the names of all the installed modules. The perl 'core' is given the special name 'Perl'.</source>
          <target state="translated">これは、インストールされているすべてのモジュールの名前のリストを返します。perlの'core'には特別な名前'Perl'が与えられます。</target>
        </trans-unit>
        <trans-unit id="14379e40e50bf7d9283b3df7b37c3928bd424f74" translate="yes" xml:space="preserve">
          <source>This returns a new CPAN::Meta::Requirements object. It takes an optional hash reference argument. Currently, only one key is supported:</source>
          <target state="translated">これは、新しいCPAN::Meta::Requirementsオブジェクトを返します。これはオプションのハッシュ参照引数を取ります。現在のところ、1つのキーのみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="531b8c5d5e45b476d43548e396af61e47ca0e014" translate="yes" xml:space="preserve">
          <source>This returns a new Feature object. The &lt;code&gt;%spec&lt;/code&gt; argument to the constructor should be the same as the value of the &lt;code&gt;optional_feature&lt;/code&gt; entry in the distmeta. It must contain entries for &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;prereqs&lt;/code&gt;.</source>
          <target state="translated">これにより、新しいFeatureオブジェクトが返されます。コンストラクターの &lt;code&gt;%spec&lt;/code&gt; 引数は、distmetaの &lt;code&gt;optional_feature&lt;/code&gt; エントリの値と同じである必要があります。 &lt;code&gt;description&lt;/code&gt; と &lt;code&gt;prereqs&lt;/code&gt; エントリが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="a39fe91e6096e4528d2eface949d54878f13adb3" translate="yes" xml:space="preserve">
          <source>This returns a new parser object, where</source>
          <target state="translated">これは新しいパーサオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="c0e359e0a6bfe07d5ae556f45550772e1dc21138" translate="yes" xml:space="preserve">
          <source>This returns a normal Perl scalar from $x. It is used automatically whenever a scalar is needed, for instance in array index operations.</source>
          <target state="translated">これは、$xから通常のPerlスカラを返します。これは、スカラが必要なとき、例えば配列のインデックス操作などで自動的に使用されます。</target>
        </trans-unit>
        <trans-unit id="39af602c2add0567b4eacfb622fe97070c79fecd" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash describing the requirements using the strings in the &lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; specification.</source>
          <target state="translated">これは、&lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN :: Meta :: Spec&lt;/a&gt;仕様の文字列を使用して要件を説明するハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="4bedda000844c8f0e165c8e9491e25dc6f787dac" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash which has short general category names (such as &lt;code&gt;Lu&lt;/code&gt; , &lt;code&gt;Nd&lt;/code&gt; , &lt;code&gt;Zs&lt;/code&gt; , &lt;code&gt;S&lt;/code&gt; ) as keys and long names (such as &lt;code&gt;UppercaseLetter&lt;/code&gt; , &lt;code&gt;DecimalNumber&lt;/code&gt; , &lt;code&gt;SpaceSeparator&lt;/code&gt; , &lt;code&gt;Symbol&lt;/code&gt; ) as values. The hash is reversible in case you need to go from the long names to the short names. The general category is the one returned from &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt; under the &lt;code&gt;category&lt;/code&gt; key.</source>
          <target state="translated">これは、キーとして短い一般カテゴリ名（ &lt;code&gt;Lu&lt;/code&gt; 、 &lt;code&gt;Nd&lt;/code&gt; 、 &lt;code&gt;Zs&lt;/code&gt; 、 &lt;code&gt;S&lt;/code&gt; など）を &lt;code&gt;SpaceSeparator&lt;/code&gt; 、値として長い名前（ &lt;code&gt;UppercaseLetter&lt;/code&gt; 、 &lt;code&gt;DecimalNumber&lt;/code&gt; 、SpaceSeparator、 &lt;code&gt;Symbol&lt;/code&gt; など）を持つハッシュへの参照を返します。長い名前から短い名前に移動する必要がある場合に備えて、ハッシュは元に戻すことができます。一般カテゴリは、 &lt;code&gt;category&lt;/code&gt; キーの下で&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）&lt;/a&gt;から返されるカテゴリです。</target>
        </trans-unit>
        <trans-unit id="039f30ebcd1468ad00dd473984fb486ddd84fa51" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash which has short general category names (such as &lt;code&gt;Lu&lt;/code&gt;, &lt;code&gt;Nd&lt;/code&gt;, &lt;code&gt;Zs&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;) as keys and long names (such as &lt;code&gt;UppercaseLetter&lt;/code&gt;, &lt;code&gt;DecimalNumber&lt;/code&gt;, &lt;code&gt;SpaceSeparator&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;) as values. The hash is reversible in case you need to go from the long names to the short names. The general category is the one returned from &lt;a href=&quot;#charinfo%28%29&quot;&gt;&quot;charinfo()&quot;&lt;/a&gt; under the &lt;code&gt;category&lt;/code&gt; key.</source>
          <target state="translated">これは、キーとして短い一般カテゴリ名（ &lt;code&gt;Lu&lt;/code&gt; 、 &lt;code&gt;Nd&lt;/code&gt; 、 &lt;code&gt;Zs&lt;/code&gt; 、 &lt;code&gt;S&lt;/code&gt; など）を &lt;code&gt;SpaceSeparator&lt;/code&gt; 、値として長い名前（ &lt;code&gt;UppercaseLetter&lt;/code&gt; 、 &lt;code&gt;DecimalNumber&lt;/code&gt; 、SpaceSeparator、 &lt;code&gt;Symbol&lt;/code&gt; など）を持つハッシュへの参照を返します。長い名前から短い名前に移動する必要がある場合に備えて、ハッシュは元に戻すことができます。一般カテゴリは、 &lt;code&gt;category&lt;/code&gt; キーの下の&lt;a href=&quot;#charinfo%28%29&quot;&gt;「charinfo（）」&lt;/a&gt;から返されるカテゴリです。</target>
        </trans-unit>
        <trans-unit id="88c58feecc3765e5c4080f925afe0ce2010395de" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash which has the short bidi (bidirectional) type names (such as &lt;code&gt;L&lt;/code&gt; , &lt;code&gt;R&lt;/code&gt; ) as keys and long names (such as &lt;code&gt;Left-to-Right&lt;/code&gt; , &lt;code&gt;Right-to-Left&lt;/code&gt; ) as values. The hash is reversible in case you need to go from the long names to the short names. The bidi type is the one returned from &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt; under the &lt;code&gt;bidi&lt;/code&gt; key. For the exact meaning of the various bidi classes the Unicode TR9 is recommended reading: &lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt; (as of Unicode 5.0.0)</source>
          <target state="translated">これは、短い双方向（双方向）タイプ名（ &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;R&lt;/code&gt; など）をキーとして、長い名前（ &lt;code&gt;Left-to-Right&lt;/code&gt; 、 &lt;code&gt;Right-to-Left&lt;/code&gt; ）を値として持つハッシュへの参照を返します。長い名前から短い名前に移動する必要がある場合に備えて、ハッシュは元に戻すことができます。双方向タイプから返されたものです&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）&lt;/a&gt;の下で &lt;code&gt;bidi&lt;/code&gt; キー。さまざまなBidiクラスの正確な意味については、Unicode TR9を読むことをお勧めし&lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;ます。http&lt;/a&gt;：//www.unicode.org/reports/tr9/（Unicode 5.0.0現在）</target>
        </trans-unit>
        <trans-unit id="48267796da0925cc66914e24ff7b670270826077" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash which has the short bidi (bidirectional) type names (such as &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;) as keys and long names (such as &lt;code&gt;Left-to-Right&lt;/code&gt;, &lt;code&gt;Right-to-Left&lt;/code&gt;) as values. The hash is reversible in case you need to go from the long names to the short names. The bidi type is the one returned from &lt;a href=&quot;#charinfo%28%29&quot;&gt;&quot;charinfo()&quot;&lt;/a&gt; under the &lt;code&gt;bidi&lt;/code&gt; key. For the exact meaning of the various bidi classes the Unicode TR9 is recommended reading: &lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http://www.unicode.org/reports/tr9/&lt;/a&gt; (as of Unicode 5.0.0)</source>
          <target state="translated">これは、キーとして短い双方向（双方向）タイプ名（ &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;R&lt;/code&gt; など）を持ち、値として長い名前（ &lt;code&gt;Left-to-Right&lt;/code&gt; 、 &lt;code&gt;Right-to-Left&lt;/code&gt; から左など）を持つハッシュへの参照を返します。長い名前から短い名前に移動する必要がある場合に備えて、ハッシュは元に戻すことができます。双方向タイプから返されたものです&lt;a href=&quot;#charinfo%28%29&quot;&gt;「（）charinfo」&lt;/a&gt;の下で &lt;code&gt;bidi&lt;/code&gt; のキー。さまざまなbidiクラスの正確な意味については、Unicode TR9を読むことをお勧めします：&lt;a href=&quot;http://www.unicode.org/reports/tr9/&quot;&gt;http&lt;/a&gt;：//www.unicode.org/reports/tr9/（Unicode 5.0.0以降）</target>
        </trans-unit>
        <trans-unit id="1e684e737bcd2717e8bbc64c2a24292cf8407953" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash whose keys are all the distinct Unicode (no Perl extension) properties, and whose values are the respective values for those properties for the input &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;.</source>
          <target state="translated">これは、キーがすべて個別のUnicode（Perl拡張なし）プロパティであり、値が入力&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」の&lt;/a&gt;プロパティのそれぞれの値であるハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="9b6e4381af622706d0b561391364ef549fe16051" translate="yes" xml:space="preserve">
          <source>This returns a reference to a hash whose keys are all the distinct Unicode (no Perl extension) properties, and whose values are the respective values for those properties for the input &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;.</source>
          <target state="translated">これは、キーがすべて個別のUnicode（Perl拡張ではない）プロパティであり、値が入力&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数の&lt;/a&gt;それらのプロパティのそれぞれの値であるハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="92aa49cb1c3f622edac6a155f13e38f83b6dfb08" translate="yes" xml:space="preserve">
          <source>This returns a scalar reference to the string that this token holds. This can be useful if you don't want to memory-copy the potentially large text value (well, as large as a paragraph or a verbatim block) as calling $token-&amp;gt;text would do.</source>
          <target state="translated">これは、このトークンが保持する文字列へのスカラー参照を返します。これは、$ token-&amp;gt; textを呼び出すのと同じように、潜在的に大きなテキスト値（段落または逐語的ブロックと同じ大きさ）をメモリコピーしたくない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="34145279dcfb22813c0a829b74bb6750ab581547" translate="yes" xml:space="preserve">
          <source>This returns a string containing the version requirements for a given module in the format described in &lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; or undef if the given module has no requirements. This should only be used for informational purposes such as error messages and should not be interpreted or used for comparison (see &lt;a href=&quot;#accepts_module&quot;&gt;&quot;accepts_module&quot;&lt;/a&gt; instead).</source>
          <target state="translated">これは、&lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN :: Meta :: Specで&lt;/a&gt;説明されている形式で、特定のモジュールのバージョン要件を含む文字列を返します。特定のモジュールに要件がない場合は、undefを返します。これは、エラーメッセージなどの情報提供のみを目的として使用する必要があり、解釈または比較のために使用しないでください（代わりに&lt;a href=&quot;#accepts_module&quot;&gt;「accepts_module」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2ab22c2c85c0520c74858caf823a5761f4144c2f" translate="yes" xml:space="preserve">
          <source>This returns a string of the form &quot;AUTHORID/TARBALL&quot;. If you want the full path and filename to this distribution on a CPAN mirror, then it is &lt;code&gt;.../authors/id/A/AU/AUTHORID/TARBALL&lt;/code&gt;.</source>
          <target state="translated">これは、「AUTHORID / TARBALL」の形式の文字列を返します。CPANミラーでこのディストリビューションへのフルパスとファイル名が必要な場合は、 &lt;code&gt;.../authors/id/A/AU/AUTHORID/TARBALL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ddd7e0058fbe245746ba269fcc6ddbdc3f189037" translate="yes" xml:space="preserve">
          <source>This returns a string reporting the $VERSION value from your module (and its classname) as well as the $VERSION value of Pod::Simple. Note that &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt; requires output formats (wherever possible) to note this detail in a comment in the output format. For example, for some kind of SGML output format:</source>
          <target state="translated">これにより、モジュール（およびそのクラス名）からの$ VERSION値と、Pod :: Simpleの$ VERSION値を報告する文字列が返されます。&lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;では、出力形式のコメントにこの詳細を書き留めるために、（可能な限り）出力形式が必要であることに注意してください。たとえば、ある種のSGML出力形式の場合：</target>
        </trans-unit>
        <trans-unit id="78d7fbfdd37ad836b426c426d9f57674d28b607c" translate="yes" xml:space="preserve">
          <source>This returns a textual representation of the object (likely to b useful for deparsing and debugging), or an empty string if the op type doesn't support this. &lt;code&gt;cv&lt;/code&gt; is the &lt;code&gt;B::CV&lt;/code&gt; object representing the sub that the op is contained within.</source>
          <target state="translated">これは、オブジェクトのテキスト表現（解析およびデバッグに役立つ可能性が高いb）を返すか、opタイプがこれをサポートしていない場合は空の文字列を返します。 &lt;code&gt;cv&lt;/code&gt; は、opが含まれるサブルーチンを表す &lt;code&gt;B::CV&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="589c10ddf68513d199db67a67a86aebabd06473d" translate="yes" xml:space="preserve">
          <source>This returns all the case foldings in the current version of Unicode in the form of a reference to a hash. Each key to the hash is the decimal representation of a Unicode character that has a casefold to other than itself. The casefold of a semi-colon is itself, so it isn't in the hash; likewise for a lowercase &quot;a&quot;, but there is an entry for a capital &quot;A&quot;. The hash value for each key is another hash, identical to what is returned by &lt;a href=&quot;#casefold%28%29&quot;&gt;&quot;casefold()&quot;&lt;/a&gt; if called with that code point as its argument. So the value &lt;code&gt;all_casefolds()-&amp;gt;{ord(&quot;A&quot;)}'&lt;/code&gt; is equivalent to &lt;code&gt;casefold(ord(&quot;A&quot;))&lt;/code&gt;;</source>
          <target state="translated">これにより、現在のバージョンのUnicodeのすべての大文字小文字の区別がハッシュへの参照の形式で返されます。ハッシュの各キーは、それ自体以外に大文字と小文字が区別されるUnicode文字の10進表現です。セミコロンの大文字小文字の区別はそれ自体であるため、ハッシュには含まれていません。小文字の「a」についても同様ですが、大文字の「A」のエントリがあります。各キーのハッシュ値は別のハッシュであり、そのコードポイントを引数として呼び出された場合に&lt;a href=&quot;#casefold%28%29&quot;&gt;「casefold（）」&lt;/a&gt;によって返されるものと同じです。したがって、値 &lt;code&gt;all_casefolds()-&amp;gt;{ord(&quot;A&quot;)}'&lt;/code&gt; は &lt;code&gt;casefold(ord(&quot;A&quot;))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="5163e24143304da0c24ab6f05ddab5463a924808" translate="yes" xml:space="preserve">
          <source>This returns all the case foldings in the current version of Unicode in the form of a reference to a hash. Each key to the hash is the decimal representation of a Unicode character that has a casefold to other than itself. The casefold of a semi-colon is itself, so it isn't in the hash; likewise for a lowercase &quot;a&quot;, but there is an entry for a capital &quot;A&quot;. The hash value for each key is another hash, identical to what is returned by &lt;a href=&quot;#casefold()&quot;&gt;casefold()&lt;/a&gt; if called with that code point as its argument. So the value &lt;code&gt;all_casefolds()-&amp;gt;{&lt;a href=&quot;../functions/ord&quot;&gt;ord&lt;/a&gt;(&quot;A&quot;)}'&lt;/code&gt; is equivalent to &lt;code&gt;casefold(&lt;a href=&quot;../functions/ord&quot;&gt;ord&lt;/a&gt;(&quot;A&quot;))&lt;/code&gt; ;</source>
          <target state="translated">これは、現在のバージョンのUnicodeのすべての大文字と小文字の折りたたみをハッシュへの参照の形式で返します。ハッシュの各キーは、それ自体以外の大文字と小文字を区別するUnicode文字の10進表記です。セミコロンのケースフォールドはそれ自体であるため、ハッシュには含まれません。小文字の &quot;a&quot;の場合も同様ですが、大文字の &quot;A&quot;のエントリがあります。各キーのハッシュ値は別のハッシュであり、そのコードポイントを引数として呼び出された場合に&lt;a href=&quot;#casefold()&quot;&gt;casefold（）&lt;/a&gt;によって返されるものと同じです。したがって、値 &lt;code&gt;all_casefolds()-&amp;gt;{&lt;a href=&quot;../functions/ord&quot;&gt;ord&lt;/a&gt;(&quot;A&quot;)}'&lt;/code&gt; は、 &lt;code&gt;casefold(&lt;a href=&quot;../functions/ord&quot;&gt;ord&lt;/a&gt;(&quot;A&quot;))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="b91ef374b2d4fc8d006452914a0d544355b3b1bb" translate="yes" xml:space="preserve">
          <source>This returns information about the input &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt; as a reference to a hash of fields as defined by the Unicode standard. If the &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt; is not assigned in the standard (i.e., has the general category &lt;code&gt;Cn&lt;/code&gt; meaning &lt;code&gt;Unassigned&lt;/code&gt;) or is a non-character (meaning it is guaranteed to never be assigned in the standard), &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">これは、Unicode標準で定義されているフィールドのハッシュへの参照として、入力された&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」&lt;/a&gt;に関する情報を返します。&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」&lt;/a&gt;が標準で割り当てられていない場合（つまり、一般カテゴリ &lt;code&gt;Cn&lt;/code&gt; が &lt;code&gt;Unassigned&lt;/code&gt; 意味する場合）または文字以外の場合（標準で割り当てられないことが保証されている場合）、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="cc96752d9a4198cd2cf54c44f2b3b5b10b6e33c5" translate="yes" xml:space="preserve">
          <source>This returns information about the input &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt; as a reference to a hash of fields as defined by the Unicode standard. If the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt; is not assigned in the standard (i.e., has the general category &lt;code&gt;Cn&lt;/code&gt; meaning &lt;code&gt;Unassigned&lt;/code&gt; ) or is a non-character (meaning it is guaranteed to never be assigned in the standard), &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">これは、Unicode標準で定義されているフィールドのハッシュへの参照として、入力&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数&lt;/a&gt;に関する情報を返します。場合は&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数は&lt;/a&gt;標準で割り当てられていない（つまり、一般的なカテゴリがある &lt;code&gt;Cn&lt;/code&gt; の意味 &lt;code&gt;Unassigned&lt;/code&gt; ）または（それが標準で割り当てられたことがないことが保証されるという意味）非文字で、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="720b1f4304617aafa21c73583795df1e0c36847e" translate="yes" xml:space="preserve">
          <source>This returns key/value pairs. The key is the module name, the value is the version number. If the installed version of the module is at or below the specified one then an upgrade is required for the module to work properly.</source>
          <target state="translated">これはキーと値のペアを返します。キーはモジュール名、値はバージョン番号です。モジュールのインストールされているバージョンが指定されたものと同じかそれ以下の場合は、 モジュールが正しく動作するためにアップグレードが必要です。</target>
        </trans-unit>
        <trans-unit id="d4b8690d330c57f118fa7767021e234753523c18" translate="yes" xml:space="preserve">
          <source>This returns key/value pairs. The key is the module name, the value is the version number. If the installed version of the module is at or below the specified one then an upgrade would be a good idea, but not strictly necessary.</source>
          <target state="translated">これはキーと値のペアを返します。キーはモジュール名、値はバージョン番号です。インストールされているモジュールのバージョンが指定されたものと同じかそれ以下の場合は、 アップグレードすることをお勧めしますが、厳密には必要ではありません。</target>
        </trans-unit>
        <trans-unit id="c8f9c7b3513420a38f5822d9d3cf20a8ca38b03e" translate="yes" xml:space="preserve">
          <source>This returns key/value pairs. The key is the module name, the value is the version number. If the installed version of the module is at or below the specified one then the module will not work. A newer version may work, but is not tested or verified.</source>
          <target state="translated">これはキーと値のペアを返します。キーはモジュール名、値はバージョン番号です。モジュールのインストールされているバージョンが指定されたものと同じかそれ以下の場合、モジュールは動作しません。新しいバージョンでも動作する可能性がありますが、テストや検証はされていません。</target>
        </trans-unit>
        <trans-unit id="69bdf5cea17e905e3d66cdc8ddc0f9c868e3cf58" translate="yes" xml:space="preserve">
          <source>This returns the (almost) locale-independent case folding of the character specified by the &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;. (Starting in Perl v5.16, the core function &lt;code&gt;fc()&lt;/code&gt; returns the &lt;code&gt;full&lt;/code&gt; mapping (described below) faster than this does, and for entire strings.)</source>
          <target state="translated">これは、&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」で&lt;/a&gt;指定された文字の（ほぼ）ロケールに依存しない大文字と小文字の区別を返します。（Perl v5.16以降、コア関数 &lt;code&gt;fc()&lt;/code&gt; は、これよりも高速に、文字列全体に対して &lt;code&gt;full&lt;/code&gt; マッピング（以下で説明）を返します。）</target>
        </trans-unit>
        <trans-unit id="eb91ab331ab9de210b4db7e921e9ff160732003a" translate="yes" xml:space="preserve">
          <source>This returns the (almost) locale-independent case folding of the character specified by the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;. (Starting in Perl v5.16, the core function &lt;code&gt;&lt;a href=&quot;../functions/fc&quot;&gt;fc()&lt;/a&gt;&lt;/code&gt; returns the &lt;code&gt;full&lt;/code&gt; mapping (described below) faster than this does, and for entire strings.)</source>
          <target state="translated">これは、&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数で&lt;/a&gt;指定された文字の、（ほとんど）ロケールに依存しない大文字小文字変換を返します。（Perl v5.16以降、コア関数 &lt;code&gt;&lt;a href=&quot;../functions/fc&quot;&gt;fc()&lt;/a&gt;&lt;/code&gt; は、これよりも高速に、文字列全体に対して &lt;code&gt;full&lt;/code&gt; マッピング（以下で説明）を返します。）</target>
        </trans-unit>
        <trans-unit id="91677229ee695edb8db59966a9bf52f69db7141f" translate="yes" xml:space="preserve">
          <source>This returns the ExtUtils::Packlist object for the specified module.</source>
          <target state="translated">指定したモジュールの ExtUtils::Packlist オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="dffc96fcce0657afd70270ea32ed9cfdcbbe0c11" translate="yes" xml:space="preserve">
          <source>This returns the arguments that should be used to construct the proper &lt;a href=&quot;Test2::EventFacet::Info&quot;&gt;Test2::EventFacet::Info&lt;/a&gt; structure.</source>
          <target state="translated">これにより、適切な&lt;a href=&quot;Test2::EventFacet::Info&quot;&gt;Test2 :: EventFacet :: Info&lt;/a&gt;構造を構築するために使用する必要のある引数が返されます。</target>
        </trans-unit>
        <trans-unit id="dc91311f7c5bdfc09fe1efb765e76b3d3c015ee2" translate="yes" xml:space="preserve">
          <source>This returns the count of Pod paragraphs seen so far.</source>
          <target state="translated">これまでに見たPodの段落の数を返します。</target>
        </trans-unit>
        <trans-unit id="ccaab350d04c0aa0ce59d8ea55f9203083f5944f" translate="yes" xml:space="preserve">
          <source>This returns the data structure used for tables by &lt;a href=&quot;Test2::EventFacet::Info&quot;&gt;Test2::EventFacet::Info&lt;/a&gt;.</source>
          <target state="translated">これにより、&lt;a href=&quot;Test2::EventFacet::Info&quot;&gt;Test2 :: EventFacet :: Info&lt;/a&gt;によってテーブルに使用されるデータ構造が返されます。</target>
        </trans-unit>
        <trans-unit id="91c8292002290e5d7ad79eff5f6aca62a17b0302" translate="yes" xml:space="preserve">
          <source>This returns the file format version as number. It is a string like &quot;2.007&quot;. This value is suitable for numeric comparisons.</source>
          <target state="translated">ファイルフォーマットのバージョンを数値で返します。2.007」のような文字列です。この値は数値比較に適しています。</target>
        </trans-unit>
        <trans-unit id="b28a3d3b844d30822d117ab98847259c42e20f28" translate="yes" xml:space="preserve">
          <source>This returns the file format version. It is a string like &quot;2.7&quot;.</source>
          <target state="translated">ファイルフォーマットのバージョンを返します。2.7 &quot;のような文字列です。</target>
        </trans-unit>
        <trans-unit id="88abd5e16e9b3ba61f0f89ea977172fa6b064d17" translate="yes" xml:space="preserve">
          <source>This returns the filename that this parser object was set to read from.</source>
          <target state="translated">このパーサオブジェクトが読み込むように設定されたファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="bccff29a1ac784a814e5e53a8041bdec5c902b0f" translate="yes" xml:space="preserve">
          <source>This returns the full path of the first occurrence to the file. Package names (eg 'A::B') are automatically converted to directory names in the selected directory. Additionally, '.pm', '.pl' and '.pod' are automatically appended to the search as required. (So, for example, under Unix, &quot;A::B&quot; is converted to &quot;somedir/A/B.pm&quot;, &quot;somedir/A/B.pod&quot;, or &quot;somedir/A/B.pl&quot;, as appropriate.)</source>
          <target state="translated">これは、ファイルへの最初の出現のフルパスを返します。パッケージ名 (例:'A::B')は自動的に選択されたディレクトリのディレクトリ名に変換されます。さらに、必要に応じて '.pm','.pl','.pod' が自動的に検索に付加されます。(例えば、Unixの場合、&quot;A::B &quot;は &quot;somedir/A/B.pm&quot;、&quot;somedir/A/B.pod&quot;、&quot;somedir/A/B.pl &quot;に変換されます)</target>
        </trans-unit>
        <trans-unit id="2a501f04d237b4afdc751c24d97b1564c6c9be99" translate="yes" xml:space="preserve">
          <source>This returns the function name as a string (e.g. &quot;PL_ppaddr[OP_ADD]&quot;, &quot;PL_ppaddr[OP_RV2AV]&quot;).</source>
          <target state="translated">これは、関数名を文字列として返します(例:&quot;PL_ppaddr[OP_ADD]&quot;,&quot;PL_ppaddr[OP_RV2AV]&quot;)。</target>
        </trans-unit>
        <trans-unit id="a6c7ba8cdf1911985e871524f867f03a73878f39" translate="yes" xml:space="preserve">
          <source>This returns the given noun form which is appropriate for the quantity &lt;code&gt;$number&lt;/code&gt; according to this language's conventions. &lt;code&gt;numerate&lt;/code&gt; is used internally by &lt;code&gt;quant&lt;/code&gt; to quantify nouns. Use it directly -- usually from bracket notation -- to avoid &lt;code&gt;quant&lt;/code&gt; 's implicit call to &lt;code&gt;numf&lt;/code&gt; and output of a numeric quantity.</source>
          <target state="translated">これは、この言語の規則に従って、数量 &lt;code&gt;$number&lt;/code&gt; に適した名詞形を返します。 &lt;code&gt;numerate&lt;/code&gt; は、名詞を数量化するために &lt;code&gt;quant&lt;/code&gt; によって内部的に使用されます。それを直接使用してください-通常、ブラケット表記から-避けるために、 &lt;code&gt;quant&lt;/code&gt; にの暗黙の呼び出し &lt;code&gt;numf&lt;/code&gt; と数値量の出力を。</target>
        </trans-unit>
        <trans-unit id="f3221ea44d138b99a98ddd26d5fa0b5a10d585e1" translate="yes" xml:space="preserve">
          <source>This returns the given noun form which is appropriate for the quantity &lt;code&gt;$number&lt;/code&gt; according to this language's conventions. &lt;code&gt;numerate&lt;/code&gt; is used internally by &lt;code&gt;quant&lt;/code&gt; to quantify nouns. Use it directly -- usually from bracket notation -- to avoid &lt;code&gt;quant&lt;/code&gt;'s implicit call to &lt;code&gt;numf&lt;/code&gt; and output of a numeric quantity.</source>
          <target state="translated">これにより、この言語の規則に従って数量 &lt;code&gt;$number&lt;/code&gt; に適した指定の名詞形式が返されます。 &lt;code&gt;numerate&lt;/code&gt; は、名詞を定量化するために &lt;code&gt;quant&lt;/code&gt; によって内部的に使用されます。直接（通常は &lt;code&gt;quant&lt;/code&gt; かっこ表記から）使用して、quantによる &lt;code&gt;numf&lt;/code&gt; の暗黙的な呼び出しと数値の出力を回避します。</target>
        </trans-unit>
        <trans-unit id="9ecd76e9b7635df85484a01189e6a2f492cf6d79" translate="yes" xml:space="preserve">
          <source>This returns the given number formatted nicely according to this language's conventions. Maketext's default method is mostly to just take the normal string form of the number (applying sprintf &quot;%G&quot; for only very large numbers), and then to add commas as necessary. (Except that we apply &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr/,./.,/&lt;/a&gt;&lt;/code&gt; if $language-&amp;gt;{'numf_comma'} is true; that's a bit of a hack that's useful for languages that express two million as &quot;2.000.000&quot; and not as &quot;2,000,000&quot;).</source>
          <target state="translated">これは、この言語の規則に従って適切にフォーマットされた指定の数値を返します。Maketextのデフォルトの方法は、通常、数値の通常の文字列形式（非常に大きな数値にのみsprintf &quot;％G&quot;を適用）を取り、必要に応じてコンマを追加することです。（$ language-&amp;gt; {'numf_comma'}がtrueの場合に &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr/,./.,/&lt;/a&gt;&lt;/code&gt; を適用することを除いて、これは200万を &quot;2.000.000&quot;として表現し、 &quot;としてではなく&quot;と表現する言語に役立つちょっとしたハックです2,000,000」）。</target>
        </trans-unit>
        <trans-unit id="05a83ab19e6c9cde5d56340c6947ca203501a3b8" translate="yes" xml:space="preserve">
          <source>This returns the given number formatted nicely according to this language's conventions. Maketext's default method is mostly to just take the normal string form of the number (applying sprintf &quot;%G&quot; for only very large numbers), and then to add commas as necessary. (Except that we apply &lt;code&gt;tr/,./.,/&lt;/code&gt; if $language-&amp;gt;{'numf_comma'} is true; that's a bit of a hack that's useful for languages that express two million as &quot;2.000.000&quot; and not as &quot;2,000,000&quot;).</source>
          <target state="translated">これにより、この言語の規則に従って適切にフォーマットされた指定の数値が返されます。Maketextのデフォルトの方法は、ほとんどの場合、通常の文字列形式の数値を使用し（非常に大きな数値にのみ、sprintf &quot;％G&quot;を適用します）、必要に応じてコンマを追加します。（$ language-&amp;gt; {'numf_comma'}がtrueの場合、 &lt;code&gt;tr/,./.,/&lt;/code&gt; を適用することを除いて、これは、200万を「2.000.000」として表現し、「」として表現しない言語に役立つちょっとしたハックです。 2,000,000 &quot;）。</target>
        </trans-unit>
        <trans-unit id="025fac90217d4ce617ea39a22bf3a99d01ca61a8" translate="yes" xml:space="preserve">
          <source>This returns the hashref that is the attribute set for this start-token. This is useful if (for example) you want to ask what all the attributes are -- you can just do &lt;code&gt;&lt;a href=&quot;../../functions/keys&quot;&gt;keys&lt;/a&gt; %{$token-&amp;gt;attr_hash}&lt;/code&gt;</source>
          <target state="translated">これは、この開始トークンに設定された属性であるハッシュ参照を返します。これは、（たとえば）すべての属性を確認したい場合に便利です。 &lt;code&gt;&lt;a href=&quot;../../functions/keys&quot;&gt;keys&lt;/a&gt; %{$token-&amp;gt;attr_hash}&lt;/code&gt; ％{$ token-&amp;gt; attr_hash}を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="5c00d82623e18153d6a353f47395dae6583b5a22" translate="yes" xml:space="preserve">
          <source>This returns the hashref that is the attribute set for this start-token. This is useful if (for example) you want to ask what all the attributes are -- you can just do &lt;code&gt;keys %{$token-&amp;gt;attr_hash}&lt;/code&gt;</source>
          <target state="translated">これにより、この開始トークンに設定された属性であるhashrefが返されます。これは、（たとえば）すべての属性が何であるかを尋ねたい場合に役立ちます- &lt;code&gt;keys %{$token-&amp;gt;attr_hash}&lt;/code&gt; 実行するだけです。</target>
        </trans-unit>
        <trans-unit id="26a1d54ba9e2a0e72117dea2ff05555485f06342" translate="yes" xml:space="preserve">
          <source>This returns the name of the associated .packlist file</source>
          <target state="translated">これは、関連する .packlist ファイルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="1e09dcd49b996b5c9c29c7bd188efbeaabae3afb" translate="yes" xml:space="preserve">
          <source>This returns the next token object (which will be of a subclass of &lt;a href=&quot;Pod::Simple::PullParserToken&quot;&gt;Pod::Simple::PullParserToken&lt;/a&gt;), or undef if the parser-stream has hit the end of the document.</source>
          <target state="translated">これにより、次のトークンオブジェクト（&lt;a href=&quot;Pod::Simple::PullParserToken&quot;&gt;Pod :: Simple :: PullParserTokenの&lt;/a&gt;サブクラスになります）が返されます。パーサーストリームがドキュメントの最後に到達した場合は、undefが返されます。</target>
        </trans-unit>
        <trans-unit id="8714a4ea9c89be9e02bb0a484046217a2fdc2659" translate="yes" xml:space="preserve">
          <source>This returns the next token object (which will be of a subclass of &lt;a href=&quot;pullparsertoken&quot;&gt;Pod::Simple::PullParserToken&lt;/a&gt;), or undef if the parser-stream has hit the end of the document.</source>
          <target state="translated">これは、次のトークンオブジェクト（&lt;a href=&quot;pullparsertoken&quot;&gt;Pod :: Simple :: PullParserTokenの&lt;/a&gt;サブクラスのオブジェクト）を返すか、パーサーストリームがドキュメントの最後に到達した場合はundefを返します。</target>
        </trans-unit>
        <trans-unit id="db9439ac80b35bc802acd8f20ce2c7390e307d09" translate="yes" xml:space="preserve">
          <source>This returns the op description from the global C PL_op_desc array (e.g. &quot;addition&quot; &quot;array deref&quot;).</source>
          <target state="translated">これは、グローバルな C PL_op_desc 配列(例:&quot;add&quot; &quot;array deref&quot;)から op の記述を返します。</target>
        </trans-unit>
        <trans-unit id="5681c12774f7d1547e4176d6eccb3ccd12074a1f" translate="yes" xml:space="preserve">
          <source>This returns the op name as a string (e.g. &quot;add&quot;, &quot;rv2av&quot;).</source>
          <target state="translated">これは op 名を文字列で返します (例:&quot;add&quot;,&quot;rv2av&quot;)。</target>
        </trans-unit>
        <trans-unit id="c03ab2186d312ee9f05759433ffaba12c8dd3636" translate="yes" xml:space="preserve">
          <source>This returns the potentially locale-dependent case mappings of the &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;. The mappings may be longer than a single code point (which the basic Unicode case mappings as returned by &lt;a href=&quot;#charinfo%28%29&quot;&gt;&quot;charinfo()&quot;&lt;/a&gt; never are).</source>
          <target state="translated">これにより、&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」の&lt;/a&gt;ロケールに依存する可能性のあるケースマッピングが返されます。マッピングは、単一のコードポイントよりも長くなる場合があります（&lt;a href=&quot;#charinfo%28%29&quot;&gt;「charinfo（）」&lt;/a&gt;によって返される基本的なUnicodeケースマッピングは決して長くありません）。</target>
        </trans-unit>
        <trans-unit id="7c24d1c30b8541d36722cb533fdf5d0b9d4b051d" translate="yes" xml:space="preserve">
          <source>This returns the potentially locale-dependent case mappings of the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;. The mappings may be longer than a single code point (which the basic Unicode case mappings as returned by &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt; never are).</source>
          <target state="translated">これは、&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数の&lt;/a&gt;ロケール依存のケースマッピングを返します。マッピングは、単一のコードポイントよりも長くなる場合があります（&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）&lt;/a&gt;によって返される基本的なUnicodeケースマッピングは決して長くありません）。</target>
        </trans-unit>
        <trans-unit id="64bc8ef0666e73530b9a3f2cd195ef738c2d8851" translate="yes" xml:space="preserve">
          <source>This returns the string form of the table if it was set, otherwise it returns the string &lt;code&gt;&quot;&amp;lt;TABLE NOT DISPLAYED&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">これにより、テーブルが設定されている場合は文字列形式が返され、設定されていない場合は文字列 &lt;code&gt;&quot;&amp;lt;TABLE NOT DISPLAYED&amp;gt;&quot;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="e407d9572ab9c5f99771767ba652986d36609117" translate="yes" xml:space="preserve">
          <source>This returns the tagname for this end-token object. For example, parsing a &quot;=head1 ...&quot; line will give you a start-token with the tagname of &quot;head1&quot;, token(s) for its content, and then an end-token with the tagname of &quot;head1&quot;.</source>
          <target state="translated">これは、このエンドトークンオブジェクトの tagname を返します。例えば、&quot;=head1 ....&quot; の行を解析すると、&quot;head1&quot; の tagname を持つ開始トークン、その内容を表すトークン、そして &quot;head1&quot; の tagname を持つエンドトークンが得られます。</target>
        </trans-unit>
        <trans-unit id="1457f9cf582cb43f3b8ece06b77a4a774ea5edd5" translate="yes" xml:space="preserve">
          <source>This returns the tagname for this start-token object. For example, parsing a &quot;=head1 ...&quot; line will give you a start-token with the tagname of &quot;head1&quot;, token(s) for its content, and then an end-token with the tagname of &quot;head1&quot;.</source>
          <target state="translated">これは、この start-token オブジェクトの tagname を返します。例えば、&quot;=head1 ....&quot; 行を解析すると、&quot;head1&quot; の tagname を持つスタートトークン、その内容を表すトークン、そして &quot;head1&quot; の tagname を持つエンドトークンが得られます。</target>
        </trans-unit>
        <trans-unit id="a92df26815537e43f9c0925776fd61d439836096" translate="yes" xml:space="preserve">
          <source>This returns the text that this token holds. For example, parsing C&amp;lt;foo&amp;gt; will return a C start-token, a text-token, and a C end-token. And if you want to get the &quot;foo&quot; out of the text-token, call &lt;code&gt;$token-&amp;gt;text&lt;/code&gt;</source>
          <target state="translated">これは、このトークンが保持するテキストを返します。たとえば、C &amp;lt;foo&amp;gt;を解析すると、Cの開始トークン、テキストトークン、Cの終了トークンが返されます。そして、テキストトークンから「foo」を取得したい場合は、 &lt;code&gt;$token-&amp;gt;text&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="37adaa267b32499cf66804411e8414b1ad1805e1" translate="yes" xml:space="preserve">
          <source>This returns the thread's context in the same manner as &lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;と同じ方法でスレッドのコンテキストを返します。</target>
        </trans-unit>
        <trans-unit id="cadb33aaeb1401584260a466e314c67532c002d6" translate="yes" xml:space="preserve">
          <source>This returns the thread's context in the same manner as &lt;a href=&quot;perlfunc#wantarray&quot;&gt;wantarray()&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;perlfunc#wantarray&quot;&gt;wantarray（）&lt;/a&gt;と同じ方法でスレッドのコンテキストを返します。</target>
        </trans-unit>
        <trans-unit id="e65fe0dbb6e214f3cd7dbd02a6dc6c382b0c30da" translate="yes" xml:space="preserve">
          <source>This returns the type of the token. This will be either the string &quot;start&quot;, the string &quot;text&quot;, or the string &quot;end&quot;.</source>
          <target state="translated">これはトークンの型を返します。これは文字列 &quot;start&quot;、文字列 &quot;text&quot;、または文字列 &quot;end&quot; のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="11b6f6f063cb5805a948af38969c126392d218a6" translate="yes" xml:space="preserve">
          <source>This returns the value of the</source>
          <target state="translated">の値を返します。</target>
        </trans-unit>
        <trans-unit id="58c9aa25d44f77824a03159b1475adf1a9714a16" translate="yes" xml:space="preserve">
          <source>This returns the value of the Unicode property given by the second parameter for the &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt; given by the first.</source>
          <target state="translated">これは、最初のパラメータで指定された&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」&lt;/a&gt;の2番目のパラメータで指定されたUnicodeプロパティの値を返します。</target>
        </trans-unit>
        <trans-unit id="6e7567ac847e3dd9703ee4f767f192a1f4433a0b" translate="yes" xml:space="preserve">
          <source>This returns the value of the Unicode property given by the second parameter for the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt; given by the first.</source>
          <target state="translated">これは、最初のパラメーターで指定された&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数の&lt;/a&gt; 2番目のパラメーターで指定されたUnicodeプロパティの値を返します。</target>
        </trans-unit>
        <trans-unit id="00254886c0f76de134b6342f6c209f119eee2c52" translate="yes" xml:space="preserve">
          <source>This returns the version number for the specified module.</source>
          <target state="translated">指定したモジュールのバージョン番号を返します。</target>
        </trans-unit>
        <trans-unit id="28cb21f0ce04fc34237dafa4d05afb66efd55c58" translate="yes" xml:space="preserve">
          <source>This returns the version of the Unicode Character Database, in other words, the version of the Unicode standard the database implements. The version is a string of numbers delimited by dots (&lt;code&gt;'.'&lt;/code&gt; ).</source>
          <target state="translated">これは、Unicode文字データベースのバージョン、つまりデータベースが実装するUnicode標準のバージョンを返します。バージョンは、ドット（ &lt;code&gt;'.'&lt;/code&gt; ）で区切られた数字のストリングです。</target>
        </trans-unit>
        <trans-unit id="a289cd11d045f8591acb29dd41933e8954d58596" translate="yes" xml:space="preserve">
          <source>This returns the version of the Unicode Character Database, in other words, the version of the Unicode standard the database implements. The version is a string of numbers delimited by dots (&lt;code&gt;'.'&lt;/code&gt;).</source>
          <target state="translated">これにより、Unicode文字データベースのバージョン、つまりデータベースが実装するUnicode標準のバージョンが返されます。バージョンは、ドット（ &lt;code&gt;'.'&lt;/code&gt; ）で区切られた数字の文字列です。</target>
        </trans-unit>
        <trans-unit id="0537cb9604bd46fdc53aedf1ef4d31156ea69d21" translate="yes" xml:space="preserve">
          <source>This returns true if &lt;code&gt;$parser&lt;/code&gt; has read from a source, and come to the end of that source.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; がソースから読み取り、そのソースの最後に到達した場合、これはtrueを返します。</target>
        </trans-unit>
        <trans-unit id="d892085e64119e5b73847e052d7936e4ec27fd45" translate="yes" xml:space="preserve">
          <source>This returns true if &lt;code&gt;$parser&lt;/code&gt; has read from a source, and has seen Pod content in it.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; がソースから読み取り、その中にポッドコンテンツを見た場合、これはtrueを返します。</target>
        </trans-unit>
        <trans-unit id="0b811ea00850392c2bee3b4f40af1e1b677b7142" translate="yes" xml:space="preserve">
          <source>This returns true only if there has been any real content seen for this document. Returns false in cases where the document contains content, but does not make use of any Pod markup.</source>
          <target state="translated">これは、このドキュメントに実際のコンテンツがあった場合にのみtrueを返します。ドキュメントにコンテンツが含まれていても、Podのマークアップを使用していない場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="e28605a00b749132376858f485353c17ca2a0f0d" translate="yes" xml:space="preserve">
          <source>This routine also returns a different number of arguments depending on the success or failure of the call to statfs. If there is an error, the error number is returned as a single-element array. If the call is successful, then a 7-element array is returned. Since only one argument is passed into this function, we need room on the stack to hold the 7 values which may be returned.</source>
          <target state="translated">このルーチンはまた、statfs の呼び出しの成否に応じて異なる数の引数を返します。エラーが発生した場合は、エラー番号が単一要素の配列として返されます。呼び出しが成功した場合は、7要素の配列が返されます。この関数に渡される引数は一つだけなので、返される可能性のある7つの値を保持するためにスタックに余裕を持たせる必要があります。</target>
        </trans-unit>
        <trans-unit id="5b820e747b00eb7161f8b3a6555a694bd263c329" translate="yes" xml:space="preserve">
          <source>This routine behaves identically to the final two forms. That is, it does not return &lt;b&gt;true&lt;/b&gt; if the code point has a decomposition consisting of another single code point, nor if its decomposition starts with a code point whose combining class is non-zero. Code points that meet either of these conditions should also not be produced by composition normalization, which is probably why you should use the &lt;code&gt;Full_Composition_Exclusion&lt;/code&gt; property instead, as shown above.</source>
          <target state="translated">このルーチンは、最後の2つのフォームと同じように動作します。つまり、コードポイントに別の単一のコードポイントで構成される分解がある場合、またはその分解が結合クラスがゼロ以外のコードポイントで始まる場合は、&lt;b&gt;trueを&lt;/b&gt;返しません。これらの条件のいずれかを満たすコードポイントは、コンポジションの正規化によっても生成されないはずです。そのため、上記のように、代わりに &lt;code&gt;Full_Composition_Exclusion&lt;/code&gt; プロパティを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6cbcd70e8dd9e2b5edee3c69038ed73e9a903ad" translate="yes" xml:space="preserve">
          <source>This routine checks to see what types of magic &lt;code&gt;sv&lt;/code&gt; has. If the mg_type field is an uppercase letter, then the mg_obj is copied to &lt;code&gt;nsv&lt;/code&gt; , but the mg_type field is changed to be the lowercase letter.</source>
          <target state="translated">このルーチンは、マジック &lt;code&gt;sv&lt;/code&gt; のタイプを確認します。mg_typeフィールドが大文字の場合、mg_objはnsvにコピーされ &lt;code&gt;nsv&lt;/code&gt; が、mg_typeフィールドは小文字に変更されます。</target>
        </trans-unit>
        <trans-unit id="e4ebc0f1624cad62f6320cad80e7fcee1daed490" translate="yes" xml:space="preserve">
          <source>This routine checks to see what types of magic &lt;code&gt;sv&lt;/code&gt; has. If the mg_type field is an uppercase letter, then the mg_obj is copied to &lt;code&gt;nsv&lt;/code&gt;, but the mg_type field is changed to be the lowercase letter.</source>
          <target state="translated">このルーチンは、魔法の &lt;code&gt;sv&lt;/code&gt; の種類を確認します。mg_typeフィールドが大文字の場合、mg_objはnsvにコピーされ &lt;code&gt;nsv&lt;/code&gt; が、mg_typeフィールドは小文字に変更されます。</target>
        </trans-unit>
        <trans-unit id="1147ded4271f3785411e40a784f62228ae86794d" translate="yes" xml:space="preserve">
          <source>This routine expects a single parameter--a reference to a subroutine or variable. It returns a list of attributes, which may be empty. If passed invalid arguments, it uses die() (via &lt;a href=&quot;carp&quot;&gt;Carp::croak&lt;/a&gt;) to raise a fatal exception. If it can find an appropriate package name for a class method lookup, it will include the results from a &lt;code&gt;FETCH_&lt;i&gt;type&lt;/i&gt;_ATTRIBUTES&lt;/code&gt; call in its return list, as described in &lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;&quot;Package-specific Attribute Handling&quot;&lt;/a&gt; below. Otherwise, only &lt;a href=&quot;#Built-in-Attributes&quot;&gt;built-in attributes&lt;/a&gt; will be returned.</source>
          <target state="translated">このルーチンは、単一のパラメーター（サブルーチンまたは変数への参照）を想定しています。空の可能性がある属性のリストを返します。無効な引数が渡された場合、die（）を使用して（&lt;a href=&quot;carp&quot;&gt;Carp :: croak&lt;/a&gt;を介して）致命的な例外を発生させます。クラスメソッドルックアップに適切なパッケージ名が見つかった場合、以下の&lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;「パッケージ固有の属性処理」で&lt;/a&gt;説明されているように、 &lt;code&gt;FETCH_&lt;i&gt;type&lt;/i&gt;_ATTRIBUTES&lt;/code&gt; 呼び出しの結果がリターンリストに含まれます。それ以外の場合は、&lt;a href=&quot;#Built-in-Attributes&quot;&gt;組み込み属性&lt;/a&gt;のみが返されます。</target>
        </trans-unit>
        <trans-unit id="156fe43e5f5152548ce6f33bee1b7f0723071b2f" translate="yes" xml:space="preserve">
          <source>This routine expects a single parameter--a reference to a subroutine or variable. It returns a list of attributes, which may be empty. If passed invalid arguments, it uses die() (via &lt;a href=&quot;carp&quot;&gt;Carp::croak&lt;/a&gt;) to raise a fatal exception. If it can find an appropriate package name for a class method lookup, it will include the results from a &lt;code&gt;FETCH_&lt;i&gt;type&lt;/i&gt;_ATTRIBUTES&lt;/code&gt; call in its return list, as described in &lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;Package-specific Attribute Handling&lt;/a&gt; below. Otherwise, only &lt;a href=&quot;#Built-in-Attributes&quot;&gt;built-in attributes&lt;/a&gt; will be returned.</source>
          <target state="translated">このルーチンは、単一のパラメーター（サブルーチンまたは変数への参照）を予期します。空の場合がある属性のリストを返します。無効な引数が渡された場合、（&lt;a href=&quot;carp&quot;&gt;Carp :: croak&lt;/a&gt;を介して）die（）を使用して致命的な例外を発生させます。以下の&lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;パッケージ固有の属性処理で&lt;/a&gt;説明されているように、クラスメソッドルックアップに適切なパッケージ名が見つかると、戻りリストに &lt;code&gt;FETCH_&lt;i&gt;type&lt;/i&gt;_ATTRIBUTES&lt;/code&gt; 呼び出しの結果が含まれます。それ以外の場合は、&lt;a href=&quot;#Built-in-Attributes&quot;&gt;組み込み属性&lt;/a&gt;のみが返されます。</target>
        </trans-unit>
        <trans-unit id="f1cbd8c6e15630953581b673b778fa0654a81555" translate="yes" xml:space="preserve">
          <source>This routine expects a single parameter--a reference to a subroutine or variable. It returns the built-in type of the referenced variable, ignoring any package into which it might have been blessed. This can be useful for determining the</source>
          <target state="translated">このルーチンは単一のパラメータ、つまりサブルーチンや変数への参照を期待しています。これは、参照された変数の組み込み型を返しますが、それが祝福されている可能性のあるパッケージは無視されます。これは</target>
        </trans-unit>
        <trans-unit id="a441bbdb5a22183756c86532b0bd8538c60db634" translate="yes" xml:space="preserve">
          <source>This routine is automatically used whenever a scalar is required:</source>
          <target state="translated">このルーチンは、スカラが必要なときに自動的に使用されます。</target>
        </trans-unit>
        <trans-unit id="9d5c36985c03c1b5c7bc41a618c507ece2116559" translate="yes" xml:space="preserve">
          <source>This routine is just a simple interface into GetOSVersion(). More specific or demanding situations should use that instead. Another option would be to use POSIX::uname(), however the latter appears to report only the OS family name and not the specific OS. In scalar context it returns just the ID.</source>
          <target state="translated">このルーチンは、GetOSVersion()への単純なインターフェイスに過ぎません。より特殊な状況や要求の厳しい状況では、代わりにそれを使うべきです。もう一つの選択肢は POSIX::uname()を使用することですが、後者は OS ファミリ名のみを報告し、特定の OS を報告しないようです。スカラコンテキストでは ID だけを返します。</target>
        </trans-unit>
        <trans-unit id="af05f40d5a349a9cf28386764e38317c02e23a0c" translate="yes" xml:space="preserve">
          <source>This routine provides word completion on the list of words in the array (or array ref).</source>
          <target state="translated">このルーチンは、配列(または配列ref)内の単語のリストに対する単語補完を提供します。</target>
        </trans-unit>
        <trans-unit id="a12916af343198cbe644e34418361cddb6245ff7" translate="yes" xml:space="preserve">
          <source>This routine returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the Unicode version being used is so early that it doesn't have this property.</source>
          <target state="translated">このルーチンは、使用されているUnicodeバージョンがこのプロパティを持たないほど早い場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3f4e8ad32963f7898d4d526c86c643ef2d8a5ac8" translate="yes" xml:space="preserve">
          <source>This routine returns &lt;code&gt;undef&lt;/code&gt; if the Unicode version being used is so early that it doesn't have this property.</source>
          <target state="translated">使用されているUnicodeバージョンが非常に早く、このプロパティがない場合、このルーチンは &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="101ceccec63478c5c011c3caa8244abb6108d41c" translate="yes" xml:space="preserve">
          <source>This routine returns a pointer to a &lt;code&gt;MAGIC&lt;/code&gt; structure stored in the SV. If the SV does not have that magical feature, &lt;code&gt;NULL&lt;/code&gt; is returned. If the SV has multiple instances of that magical feature, the first one will be returned. &lt;code&gt;mg_findext&lt;/code&gt; can be used to find a &lt;code&gt;MAGIC&lt;/code&gt; structure of an SV based on both its magic type and its magic virtual table:</source>
          <target state="translated">このルーチンは、SVに格納されている &lt;code&gt;MAGIC&lt;/code&gt; 構造へのポインターを返します。 SVにその魔法の機能がない場合、 &lt;code&gt;NULL&lt;/code&gt; が返されます。 SVにその魔法の機能の複数のインスタンスがある場合、最初のインスタンスが返されます。 &lt;code&gt;mg_findext&lt;/code&gt; を使用して、マジックタイプとマジック仮想テーブルの両方に基づいてSVの &lt;code&gt;MAGIC&lt;/code&gt; 構造を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="be064f7d7fc8c5c81c03e6f7693444f3da761d4d" translate="yes" xml:space="preserve">
          <source>This runs all the given</source>
          <target state="translated">これは、与えられた</target>
        </trans-unit>
        <trans-unit id="5f9d330768a086b11c3fee8aaebb21d2fcbcb969" translate="yes" xml:space="preserve">
          <source>This runs some basic sanity tests on the source tree and helps catch basic errors before you submit a patch.</source>
          <target state="translated">これにより、ソースツリー上で基本的なサニティーテストがいくつか実行され、パッチを提出する前に基本的なエラーをキャッチするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b456dbbb28104ac1fe79034d2719d013d951db2d" translate="yes" xml:space="preserve">
          <source>This safer version of &lt;a href=&quot;#chop&quot;&gt;chop&lt;/a&gt; removes any trailing string that corresponds to the current value of &lt;code&gt;$/&lt;/code&gt; (also known as $INPUT_RECORD_SEPARATOR in the &lt;code&gt;English&lt;/code&gt; module). It returns the total number of characters removed from all its arguments. It's often used to remove the newline from the end of an input record when you're worried that the final record may be missing its newline. When in paragraph mode (&lt;code&gt;$/ = ''&lt;/code&gt; ), it removes all trailing newlines from the string. When in slurp mode (&lt;code&gt;$/ = &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ) or fixed-length record mode (&lt;code&gt;$/&lt;/code&gt; is a reference to an integer or the like; see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;) chomp() won't remove anything. If VARIABLE is omitted, it chomps &lt;code&gt;$_&lt;/code&gt; . Example:</source>
          <target state="translated">この安全なバージョンの&lt;a href=&quot;#chop&quot;&gt;chop&lt;/a&gt;は、 &lt;code&gt;$/&lt;/code&gt; 現在の値（ &lt;code&gt;English&lt;/code&gt; モジュールでは$ INPUT_RECORD_SEPARATORとも呼ばれます）に対応する末尾の文字列を削除します。すべての引数から削除された文字の総数を返します。最終レコードで改行が欠落しているのではないかと心配しているときに、入力レコードの末尾から改行を削除するためによく使用されます。段落モード（ &lt;code&gt;$/ = ''&lt;/code&gt; ）の場合、文字列から末尾の改行をすべて削除します。 slurpモード（ &lt;code&gt;$/ = &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ）または固定長レコードモード（ &lt;code&gt;$/&lt;/code&gt; は整数などへの参照です&lt;a href=&quot;perlvar&quot;&gt;。perlvarを&lt;/a&gt;参照）の場合、chomp（）は何も削除しません。 VARIABLEが省略されている場合は、 &lt;code&gt;$_&lt;/code&gt; 。例：</target>
        </trans-unit>
        <trans-unit id="f11cb2092730214fd2c5570df1288f5c170ff762" translate="yes" xml:space="preserve">
          <source>This safer version of &lt;a href=&quot;#chop-VARIABLE&quot;&gt;&lt;code&gt;chop&lt;/code&gt;&lt;/a&gt; removes any trailing string that corresponds to the current value of &lt;a href=&quot;perlvar#%24%2F&quot;&gt;&lt;code&gt;$/&lt;/code&gt;&lt;/a&gt; (also known as &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; in the &lt;a href=&quot;english&quot;&gt;&lt;code&gt;English&lt;/code&gt;&lt;/a&gt; module). It returns the total number of characters removed from all its arguments. It's often used to remove the newline from the end of an input record when you're worried that the final record may be missing its newline. When in paragraph mode (&lt;code&gt;$/ = ''&lt;/code&gt;), it removes all trailing newlines from the string. When in slurp mode (&lt;code&gt;$/ = undef&lt;/code&gt;) or fixed-length record mode (&lt;a href=&quot;perlvar#%24%2F&quot;&gt;&lt;code&gt;$/&lt;/code&gt;&lt;/a&gt; is a reference to an integer or the like; see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;), &lt;a href=&quot;#chomp-VARIABLE&quot;&gt;&lt;code&gt;chomp&lt;/code&gt;&lt;/a&gt; won't remove anything. If VARIABLE is omitted, it chomps &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;. Example:</source>
          <target state="translated">このより安全なバージョンの&lt;a href=&quot;#chop-VARIABLE&quot;&gt; &lt;code&gt;chop&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;perlvar#%24%2F&quot;&gt; &lt;code&gt;$/&lt;/code&gt; &lt;/a&gt;現在の値（&lt;a href=&quot;english&quot;&gt; &lt;code&gt;English&lt;/code&gt; &lt;/a&gt;モジュールでは &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; とも呼ばれます）に対応する末尾の文字列をすべて削除します。すべての引数から削除された文字の総数を返します。最終レコードに改行がないのではないかと心配しているときに、入力レコードの末尾から改行を削除するためによく使用されます。段落モード（ &lt;code&gt;$/ = ''&lt;/code&gt; ）の場合、文字列から末尾の改行をすべて削除します。 slurpモード（ &lt;code&gt;$/ = undef&lt;/code&gt; ）または固定長レコードモード（&lt;a href=&quot;perlvar#%24%2F&quot;&gt; &lt;code&gt;$/&lt;/code&gt; &lt;/a&gt;は整数などへの参照です&lt;a href=&quot;perlvar&quot;&gt;。perlvarを&lt;/a&gt;参照）の場合、&lt;a href=&quot;#chomp-VARIABLE&quot;&gt; &lt;code&gt;chomp&lt;/code&gt; &lt;/a&gt;何も削除されません。VARIABLEを省略すると、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;チョップされます。例：</target>
        </trans-unit>
        <trans-unit id="ade7671cda06ea60596db7de673c42e7e9809682" translate="yes" xml:space="preserve">
          <source>This safer version of &lt;a href=&quot;chop&quot;&gt;chop&lt;/a&gt; removes any trailing string that corresponds to the current value of &lt;code&gt;$/&lt;/code&gt; (also known as $INPUT_RECORD_SEPARATOR in the &lt;code&gt;English&lt;/code&gt; module). It returns the total number of characters removed from all its arguments. It's often used to remove the newline from the end of an input record when you're worried that the final record may be missing its newline. When in paragraph mode (&lt;code&gt;$/ = ''&lt;/code&gt; ), it removes all trailing newlines from the string. When in slurp mode (&lt;code&gt;$/ = &lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ) or fixed-length record mode (&lt;code&gt;$/&lt;/code&gt; is a reference to an integer or the like; see &lt;a href=&quot;../perlvar&quot;&gt;perlvar&lt;/a&gt;) chomp() won't remove anything. If VARIABLE is omitted, it chomps &lt;code&gt;$_&lt;/code&gt; . Example:</source>
          <target state="translated">この安全なバージョンの&lt;a href=&quot;chop&quot;&gt;chop&lt;/a&gt;は、 &lt;code&gt;$/&lt;/code&gt; 現在の値（ &lt;code&gt;English&lt;/code&gt; モジュールでは$ INPUT_RECORD_SEPARATORとも呼ばれます）に対応する末尾の文字列を削除します。すべての引数から削除された文字の総数を返します。最終レコードで改行が欠落しているのではないかと心配しているときに、入力レコードの末尾から改行を削除するためによく使用されます。段落モード（ &lt;code&gt;$/ = ''&lt;/code&gt; ）の場合、文字列から末尾の改行をすべて削除します。 slurpモード（ &lt;code&gt;$/ = &lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ）または固定長レコードモード（ &lt;code&gt;$/&lt;/code&gt; は整数などへの参照です&lt;a href=&quot;../perlvar&quot;&gt;。perlvarを&lt;/a&gt;参照）の場合、chomp（）は何も削除しません。 VARIABLEが省略されている場合は、 &lt;code&gt;$_&lt;/code&gt; 。例：</target>
        </trans-unit>
        <trans-unit id="29322e1fae611c7a4ec6b18f01c0e5539c007dbe" translate="yes" xml:space="preserve">
          <source>This same method is available from pure perl via, &lt;code&gt;mro::method_changed_in(classname)&lt;/code&gt; .</source>
          <target state="translated">この同じメソッドは、 &lt;code&gt;mro::method_changed_in(classname)&lt;/code&gt; 介して純粋なperlから利用できます。</target>
        </trans-unit>
        <trans-unit id="3881ba4a6ee9c9f7a39f8b6e30cf077c3df62fb1" translate="yes" xml:space="preserve">
          <source>This same method is available from pure perl via, &lt;code&gt;mro::method_changed_in(classname)&lt;/code&gt;.</source>
          <target state="translated">これと同じメソッドは、 &lt;code&gt;mro::method_changed_in(classname)&lt;/code&gt; 介して純粋なperlから利用できます。</target>
        </trans-unit>
        <trans-unit id="e7a4db1ab47139698e5958a2175645481a1041ec" translate="yes" xml:space="preserve">
          <source>This says &lt;code&gt;$a&lt;/code&gt; is a reference (ROK), which points to another SV which is a PVAV, an array. The array has one element, element zero, which is another SV. The field &lt;code&gt;FILL&lt;/code&gt; above indicates the last element in the array, similar to &lt;code&gt;$#$a&lt;/code&gt; .</source>
          <target state="translated">これは、 &lt;code&gt;$a&lt;/code&gt; がPVAVである別のSVである配列を指す参照（ROK）であることを示しています。配列には1つの要素、要素0があり、これは別のSVです。上記のフィールド &lt;code&gt;FILL&lt;/code&gt; は、 &lt;code&gt;$#$a&lt;/code&gt; と同様に、配列の最後の要素を示します。</target>
        </trans-unit>
        <trans-unit id="9184d54b5dc37c9e6366802801d705be70172a95" translate="yes" xml:space="preserve">
          <source>This says &lt;code&gt;$a&lt;/code&gt; is a reference (ROK), which points to another SV which is a PVAV, an array. The array has one element, element zero, which is another SV. The field &lt;code&gt;FILL&lt;/code&gt; above indicates the last element in the array, similar to &lt;code&gt;$#$a&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;$a&lt;/code&gt; が参照（ROK）であり、PVAVである配列である別のSVを指していることを示しています。配列には1つの要素、要素0があり、これは別のSVです。上記のフィールド &lt;code&gt;FILL&lt;/code&gt; は、 &lt;code&gt;$#$a&lt;/code&gt; と同様に、配列の最後の要素を示します。</target>
        </trans-unit>
        <trans-unit id="036ebde834d76ddc89809412a48e08bc1aad5dd1" translate="yes" xml:space="preserve">
          <source>This says &lt;code&gt;$a&lt;/code&gt; is an SV, a scalar. The scalar is an IV, a number. Its reference count is 1. It has the &lt;code&gt;IOK&lt;/code&gt; flag set, meaning it is currently being evaluated as a number. Because IOK is set we look at the IV item to see what is in the scalar.</source>
          <target state="translated">これは、 &lt;code&gt;$a&lt;/code&gt; がSV、スカラーであることを示しています。スカラーはIV、数値です。その参照カウントは1です &lt;code&gt;IOK&lt;/code&gt; フラグが設定されています。つまり、現在数値として評価されています。IOKが設定されているので、IVアイテムを見て、スカラーの内容を確認します。</target>
        </trans-unit>
        <trans-unit id="2536195f9e270d7a0608ccd9b92c67b39acf3e86" translate="yes" xml:space="preserve">
          <source>This says &lt;code&gt;$a&lt;/code&gt; is an SV, a scalar. The scalar type is a PVIV, which is capable of holding an integer (IV) and/or a string (PV) value. The scalar's head is allocated at address 0xbe9a8, while the body is at 0xbc288. Its reference count is 1. It has the &lt;code&gt;POK&lt;/code&gt; flag set, meaning its current PV field is valid. Because POK is set we look at the PV item to see what is in the scalar. The \0 at the end indicate that this PV is properly NUL-terminated. Note that the IV field still contains its old numeric value, but because FLAGS doesn't have IOK set, we must ignore the IV item. CUR indicates the number of characters in the PV. LEN indicates the number of bytes allocated for the PV (at least one more than CUR, because LEN includes an extra byte for the end-of-string marker, then usually rounded up to some efficient allocation unit).</source>
          <target state="translated">これは、 &lt;code&gt;$a&lt;/code&gt; がSV、スカラーであることを示しています。スカラー型はPVIVであり、整数（IV）や文字列（PV）の値を保持できます。スカラの先頭はアドレス0xbe9a8に割り当てられ、本体は0xbc288に割り当てられます。その参照カウントは、それが持っている1です &lt;code&gt;POK&lt;/code&gt; をフラグセット。現在のPVフィールドが有効であることを意味します。POKが設定されているので、PVアイテムを見て、スカラーの内容を確認します。末尾の\ 0は、このPVが正しくNULで終了していることを示しています。IVフィールドにはまだ古い数値が含まれていますが、FLAGSにはIOKが設定されていないため、IV項目は無視する必要があります。CURはPVの文字数を示します。LENはPVに割り当てられたバイト数を示します（LENには文字列の終わりマーカー用の追加バイトが含まれるため、CURより少なくとも1つ多く、通常は効率的な割り当て単位に切り上げられます）。</target>
        </trans-unit>
        <trans-unit id="d4038eb2f65cf90ff5c5db0ff06612a08d942853" translate="yes" xml:space="preserve">
          <source>This says that records are delimited by the string &lt;code&gt;es&lt;/code&gt; . If the file contained the following data:</source>
          <target state="translated">これは、レコードが文字列 &lt;code&gt;es&lt;/code&gt; で区切られていることを示しています。ファイルに次のデータが含まれている場合：</target>
        </trans-unit>
        <trans-unit id="e7ff66ceeac2fbc00d45f5c00f7c3466cddbfb77" translate="yes" xml:space="preserve">
          <source>This says that records are delimited by the string &lt;code&gt;es&lt;/code&gt;. If the file contained the following data:</source>
          <target state="translated">これは、レコードが文字列 &lt;code&gt;es&lt;/code&gt; で区切られていることを示しています。ファイルに次のデータが含まれている場合：</target>
        </trans-unit>
        <trans-unit id="c3f732b3da7c2a158f6a684ddbc311ca908a5e5b" translate="yes" xml:space="preserve">
          <source>This says what packages are internal to Perl. &lt;code&gt;Carp&lt;/code&gt; will never report an error as being from a line in a package that is internal to Perl. For example:</source>
          <target state="translated">これは、どのパッケージがPerlの内部にあるかを示しています。 &lt;code&gt;Carp&lt;/code&gt; は、Perlの内部にあるパッケージの行からのものであるとエラーを報告することはありません。例えば：</target>
        </trans-unit>
        <trans-unit id="94c9a814257648d20b0d4f2bf7acb2782a18b6ea" translate="yes" xml:space="preserve">
          <source>This says which packages are internal to Perl's warning system. For generating a full stack backtrace this is the same as being internal to Perl, the stack backtrace will not start inside packages that are listed in &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; . But it is slightly different for the summary message generated by &lt;code&gt;carp&lt;/code&gt; or &lt;code&gt;croak&lt;/code&gt; . There errors will not be reported on any lines that are calling packages in &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; .</source>
          <target state="translated">これは、Perlの警告システムの内部にあるパッケージを示しています。完全なスタックバックトレースを生成する場合、これはPerlの内部と同じです。スタックバックトレースは、 &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; リストされているパッケージ内では開始されません。ただし、 &lt;code&gt;carp&lt;/code&gt; または &lt;code&gt;croak&lt;/code&gt; によって生成される要約メッセージの場合は少し異なります。 &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; パッケージを呼び出している行ではエラーは報告されません。</target>
        </trans-unit>
        <trans-unit id="84798169adfcecd51c1ec3874bbf65c79b20278e" translate="yes" xml:space="preserve">
          <source>This says which packages are internal to Perl's warning system. For generating a full stack backtrace this is the same as being internal to Perl, the stack backtrace will not start inside packages that are listed in &lt;code&gt;%Carp::CarpInternal&lt;/code&gt;. But it is slightly different for the summary message generated by &lt;code&gt;carp&lt;/code&gt; or &lt;code&gt;croak&lt;/code&gt;. There errors will not be reported on any lines that are calling packages in &lt;code&gt;%Carp::CarpInternal&lt;/code&gt;.</source>
          <target state="translated">これは、どのパッケージがPerlの警告システムの内部にあるかを示しています。完全なスタックバックトレースを生成する場合、これはPerlの内部にあるのと同じです。スタックバックトレースは、 &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; リストされているパッケージ内では開始されません。ただし、 &lt;code&gt;carp&lt;/code&gt; または &lt;code&gt;croak&lt;/code&gt; によって生成される要約メッセージでは少し異なります。 &lt;code&gt;%Carp::CarpInternal&lt;/code&gt; パッケージを呼び出している行ではエラーは報告されません。</target>
        </trans-unit>
        <trans-unit id="31106a1a20d4ea51da0f7d90c3fe4fb2b5ff8f01" translate="yes" xml:space="preserve">
          <source>This scenario will mostly be applicable to code that is meant to be called from within destructors, asynchronous callbacks, and signal handlers. In such situations, where the code being called has little relation to the surrounding dynamic context, the main program needs to be insulated from errors in the called code, even if they can't be handled intelligently. It may also be useful to do this with code for &lt;code&gt;__DIE__&lt;/code&gt; or &lt;code&gt;__WARN__&lt;/code&gt; hooks, and &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">このシナリオは主に、デストラクタ、非同期コールバック、およびシグナルハンドラー内から呼び出されるコードに適用されます。呼び出されるコードと周囲の動的コンテキストとの関係がほとんどないような状況では、メインプログラムを、呼び出されたコードのエラーから保護する必要があります（インテリジェントに処理できない場合でも）。 &lt;code&gt;__DIE__&lt;/code&gt; または &lt;code&gt;__WARN__&lt;/code&gt; フックのコードを使用してこれを行い、関数を &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; することも役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="36ac4667cace4096dfbe5b4c50d550b72cbd4224" translate="yes" xml:space="preserve">
          <source>This scenario will mostly be applicable to code that is meant to be called from within destructors, asynchronous callbacks, and signal handlers. In such situations, where the code being called has little relation to the surrounding dynamic context, the main program needs to be insulated from errors in the called code, even if they can't be handled intelligently. It may also be useful to do this with code for &lt;code&gt;__DIE__&lt;/code&gt; or &lt;code&gt;__WARN__&lt;/code&gt; hooks, and &lt;code&gt;tie&lt;/code&gt; functions.</source>
          <target state="translated">このシナリオは主に、デストラクタ、非同期コールバック、およびシグナルハンドラ内から呼び出されることを意図したコードに適用できます。呼び出されるコードが周囲の動的コンテキストとほとんど関係がないこのような状況では、メインプログラムは、インテリジェントに処理できない場合でも、呼び出されるコードのエラーから隔離する必要があります。 &lt;code&gt;__DIE__&lt;/code&gt; または &lt;code&gt;__WARN__&lt;/code&gt; フックのコードを使用してこれを実行し、関数を &lt;code&gt;tie&lt;/code&gt; することも役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="e1df3253c4ccef59169cb5ac31f3ae1f9a3a9a53" translate="yes" xml:space="preserve">
          <source>This script provides a command interface (not a shell) to CPAN. At the moment it uses CPAN.pm to do the work, but it is not a one-shot command runner for CPAN.pm.</source>
          <target state="translated">このスクリプトは CPAN へのコマンドインターフェイス (シェルではありません)を提供します。現時点ではCPAN.pmを使って作業を行いますが、CPAN.pmのワンショットコマンドランナーではありません。</target>
        </trans-unit>
        <trans-unit id="e17cbd723cbdc191dc4fdc562d2ff451e857ff96" translate="yes" xml:space="preserve">
          <source>This script shows how to override the default sorting algorithm that BTREE uses. Instead of using the normal lexical ordering, a case insensitive compare function will be used.</source>
          <target state="translated">このスクリプトは、BTREE が使用するデフォルトのソートアルゴリズムを上書きする方法を示します。通常の字句順の代わりに、大文字小文字を区別しない比較関数を使用します。</target>
        </trans-unit>
        <trans-unit id="af317b7379a832e3b0678b6eea769f242beb3e07" translate="yes" xml:space="preserve">
          <source>This script,</source>
          <target state="translated">この台本。</target>
        </trans-unit>
        <trans-unit id="86ea44fa36ed41d21548135cdfb2e7b1ad994fbc" translate="yes" xml:space="preserve">
          <source>This searches the directories given in</source>
          <target state="translated">で指定されたディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="cc448c949fa2502c3de5bd50cf25e079f49a973e" translate="yes" xml:space="preserve">
          <source>This section also applies to other overloaded math packages, like Math::String.</source>
          <target state="translated">このセクションは、Math::Stringのような他のオーバーロードされた数学パッケージにも適用されます。</target>
        </trans-unit>
        <trans-unit id="ef6d18fe35323b673cf86ded4be1699795588d00" translate="yes" xml:space="preserve">
          <source>This section applies fully to Perls starting with v5.22. Various caveats for earlier releases are in the &lt;a href=&quot;#Earlier-releases-caveats&quot;&gt;&quot;Earlier releases caveats&quot;&lt;/a&gt; subsection below.</source>
          <target state="translated">このセクションは、v5.22以降のPerlに完全に適用されます。以前のリリースに関するさまざまな警告は、以下の&lt;a href=&quot;#Earlier-releases-caveats&quot;&gt;「以前のリリースの警告」&lt;/a&gt;サブセクションにあります。</target>
        </trans-unit>
        <trans-unit id="be390d54ea95c83e1fca1268a1911351d2f7df4c" translate="yes" xml:space="preserve">
          <source>This section applies fully to Perls starting with v5.22. Various caveats for earlier releases are in the &lt;a href=&quot;#Earlier-releases-caveats&quot;&gt;Earlier releases caveats&lt;/a&gt; subsection below.</source>
          <target state="translated">このセクションは、v5.22以降のPerlに完全に適用されます。以前のリリースのさまざまな警告は、以下の「&lt;a href=&quot;#Earlier-releases-caveats&quot;&gt;以前のリリースの警告」&lt;/a&gt;サブセクションにあります。</target>
        </trans-unit>
        <trans-unit id="56dd90ab92335c6f36e8ed1d4a60c84c97df21db" translate="yes" xml:space="preserve">
          <source>This section concerns the lookahead and lookbehind assertions. First, a little background.</source>
          <target state="translated">このセクションでは、ルックヘッドアサーションとルックバックアサーションについて説明します。まず、少し背景を説明します。</target>
        </trans-unit>
        <trans-unit id="ab4a7c816ed65ffc082450cf0217f6cf1db2cf6e" translate="yes" xml:space="preserve">
          <source>This section deals with I/O and the &quot;f&quot; issues: filehandles, flushing, formats, and footers.</source>
          <target state="translated">このセクションでは、I/O と &quot;f&quot; の問題について説明します:ファイルハンドル、フラッシュ、フォーマット、フッター。</target>
        </trans-unit>
        <trans-unit id="c67dd2be244aa67b2c3982a2251efd0aba82da6e" translate="yes" xml:space="preserve">
          <source>This section deals with general Perl language issues that don't clearly fit into any of the other sections.</source>
          <target state="translated">このセクションでは、他のどのセクションにも明確に当てはまらない一般的なPerl言語の問題を扱います。</target>
        </trans-unit>
        <trans-unit id="4dacb0d5b8529783cda24f9a101a291fd790bb1b" translate="yes" xml:space="preserve">
          <source>This section deals with questions related to running web sites, sending and receiving email as well as general networking.</source>
          <target state="translated">このセクションでは、Webサイトの運営、メールの送受信、一般的なネットワーキングに関連する質問を扱います。</target>
        </trans-unit>
        <trans-unit id="b8c7e75fcfcb79fa2aefcfcb9d7bd00c769af0ac" translate="yes" xml:space="preserve">
          <source>This section defines an interface that allows in-memory compression using the</source>
          <target state="translated">このセクションでは、メモリ内圧縮を可能にするインターフェイスを定義します。</target>
        </trans-unit>
        <trans-unit id="07d89dd508bd9a1955f604c65746a72fe10cd652" translate="yes" xml:space="preserve">
          <source>This section defines an interface that allows in-memory uncompression using the</source>
          <target state="translated">このセクションでは、メモリ内で</target>
        </trans-unit>
        <trans-unit id="574b76a7c21f5d83dd373c1961cc34e2c0747c9f" translate="yes" xml:space="preserve">
          <source>This section defines the Version type, used by several fields in the CPAN Meta Spec.</source>
          <target state="translated">このセクションでは、CPANメタ仕様のいくつかのフィールドで使用されるバージョンタイプを定義する。</target>
        </trans-unit>
        <trans-unit id="3243853ef1a289c9e89d976c5c5c21cc63e5a678" translate="yes" xml:space="preserve">
          <source>This section defines the interface available that allows in-memory uncompression using the</source>
          <target state="translated">このセクションでは、メモリ内で</target>
        </trans-unit>
        <trans-unit id="8adf59417e2d7f3c501610b406a6fa8b838974b3" translate="yes" xml:space="preserve">
          <source>This section describes how JSON::PP maps Perl values to JSON values and vice versa. These mappings are designed to &quot;do the right thing&quot; in most circumstances automatically, preserving round-tripping characteristics (what you put in comes out as something equivalent).</source>
          <target state="translated">このセクションでは、JSON::PPがPerlの値をJSONの値にどのようにマッピングするか、またその逆も同様に説明します。これらのマッピングは、ほとんどの状況で自動的に「正しいことをする」ように設計されており、ラウンドトリップの特性(入れたものは等価なものとして出てきます)を維持しています。</target>
        </trans-unit>
        <trans-unit id="95a0852ba843f17dcbe1940f17029f381d5d77f9" translate="yes" xml:space="preserve">
          <source>This section describes the accuracy/precision handling in Math::Big* as it used to be and as it is now, complete with an explanation of all terms and abbreviations.</source>
          <target state="translated">このセクションでは、Math::Big*の精度/精度の処理について、すべての用語と略語の説明を含めて、以前と現在の処理について説明します。</target>
        </trans-unit>
        <trans-unit id="06b4644a1d0abd71307ee2e3605d7fc2e4535b4d" translate="yes" xml:space="preserve">
          <source>This section describes the accuracy/precision handling in Math::BigInt and Math::BigFloat as it used to be and as it is now, complete with an explanation of all terms and abbreviations.</source>
          <target state="translated">このセクションでは、Math::BigInt と Math::BigFloat の精度/精度の処理について、すべての用語と略語の説明を含めて、以前と現在の処理について説明します。</target>
        </trans-unit>
        <trans-unit id="ec789fa26c9d8dfd2479d175b7e934018d065eea" translate="yes" xml:space="preserve">
          <source>This section describes the re-implementation of the tmpnam() and tmpfile() functions described in &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; using the mkstemp() from this module.</source>
          <target state="translated">このセクションでは、このモジュールのmkstemp（）を使用して、&lt;a href=&quot;posix&quot;&gt;POSIXで&lt;/a&gt;説明されているtmpnam（）関数とtmpfile（）関数を再実装する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="39aef7a353c321f38285ab3f99461b24884c7fa4" translate="yes" xml:space="preserve">
          <source>This section describes the re-implementation of the tmpnam() and tmpfile() functions described in L</source>
          <target state="translated">この節では,L</target>
        </trans-unit>
        <trans-unit id="5b6ee285a0e0ef806b91b3b763a8498277e66885" translate="yes" xml:space="preserve">
          <source>This section describes the recommended interface for generating temporary files and directories.</source>
          <target state="translated">このセクションでは、一時ファイルとディレクトリを生成するための推奨インターフェースについて説明します。</target>
        </trans-unit>
        <trans-unit id="69aa90134b4dce1d696ebb05a6dbb67cf8770a91" translate="yes" xml:space="preserve">
          <source>This section describes the steps to be performed to build PerlCE. You may find additional information about building perl for WinCE at &lt;a href=&quot;http://perlce.sourceforge.net&quot;&gt;http://perlce.sourceforge.net&lt;/a&gt; and some pre-built binaries.</source>
          <target state="translated">このセクションでは、PerlCEを構築するために実行する手順について説明します。WinCE用のperlのビルドに関する追加情報は、&lt;a href=&quot;http://perlce.sourceforge.net&quot;&gt;http：//perlce.sourceforge.net&lt;/a&gt;といくつかのビルド済みのバイナリにあります。</target>
        </trans-unit>
        <trans-unit id="11f3d56c367a6b305dcc2c5edd92d44276e1ff5b" translate="yes" xml:space="preserve">
          <source>This section describes the steps to be performed to build a Perl NLM and other associated NLMs.</source>
          <target state="translated">ここでは、PerlのNLMとその他の関連するNLMを構築するために実行される手順を説明します。</target>
        </trans-unit>
        <trans-unit id="1019c06c85688bbdf3af5c6e3b95950cdf59effc" translate="yes" xml:space="preserve">
          <source>This section describes ways to call &lt;code&gt;open&lt;/code&gt; outside of best practices; you may encounter these uses in older code. Perl does not consider their use deprecated, exactly, but neither is it recommended in new code, for the sake of clarity and readability.</source>
          <target state="translated">このセクションでは、ベストプラクティスの範囲外で &lt;code&gt;open&lt;/code&gt; と呼ぶ方法について説明します。古いコードでこれらの使用法に遭遇する可能性があります。Perlは、それらの使用が非推奨であるとは正確には考えていませんが、明確さと読みやすさのために、新しいコードでは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="73c6a4b67a7eaa7527571d5faec72b4bfebc75e4" translate="yes" xml:space="preserve">
          <source>This section documents functions to manipulate CVs which are code-values, or subroutines. For more information, see &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、コード値またはサブルーチンであるCVを操作する関数について説明します。詳細については、&lt;a href=&quot;perlguts&quot;&gt;perlgutsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="33ac896f6350aabd5af3622467a85a4b6b744251" translate="yes" xml:space="preserve">
          <source>This section gives some details on all extensions that aren't just synonyms for compound-form Unicode properties (for those properties, you'll have to refer to the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr44&quot;&gt;Unicode Standard&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、複合形式のUnicodeプロパティの同義語ではないすべての拡張機能について詳しく説明します（これらのプロパティについては、&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr44&quot;&gt;Unicode標準&lt;/a&gt;を参照する必要があります）。</target>
        </trans-unit>
        <trans-unit id="9319fc0cf40bc57d3c32a473ab7229f4845e3419" translate="yes" xml:space="preserve">
          <source>This section gives some details on all extensions that aren't just synonyms for compound-form Unicode properties (for those properties, you'll have to refer to the &lt;a href=&quot;https://www.unicode.org/reports/tr44&quot;&gt;Unicode Standard&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、複合形式のUnicodeプロパティの同義語ではないすべての拡張機能について詳しく説明します（これらのプロパティについては、&lt;a href=&quot;https://www.unicode.org/reports/tr44&quot;&gt;Unicode標準&lt;/a&gt;を参照する必要があります）。</target>
        </trans-unit>
        <trans-unit id="954cb379e9610eb88d0cd37b6e5358601612440b" translate="yes" xml:space="preserve">
          <source>This section hopes to clarify how Perl handles quoted constructs. Although the most common reason to learn this is to unravel labyrinthine regular expressions, because the initial steps of parsing are the same for all quoting operators, they are all discussed together.</source>
          <target state="translated">このセクションでは、Perl が引用符で囲まれた構造体をどのように扱うかを明らかにしたいと考えています。これを学ぶ最も一般的な理由は、迷路のような正規表現を解くためですが、解析の初期ステップはすべてのクォート演算子で同じであるため、それらはすべて一緒に議論されています。</target>
        </trans-unit>
        <trans-unit id="536fa6406d989d8eb5028cec20788cbdc6568c11" translate="yes" xml:space="preserve">
          <source>This section is about functions (really macros) that classify characters into types, such as punctuation versus alphabetic, etc. Most of these are analogous to regular expression character classes. (See &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;&quot;POSIX Character Classes&quot; in perlrecharclass&lt;/a&gt;.) There are several variants for each class. (Not all macros have all variants; each item below lists the ones valid for it.) None are affected by &lt;code&gt;use bytes&lt;/code&gt;, and only the ones with &lt;code&gt;LC&lt;/code&gt; in the name are affected by the current locale.</source>
          <target state="translated">このセクションでは、文字を句読点とアルファベットなどのタイプに分類する関数（実際にはマクロ）について説明します。これらのほとんどは、正規表現の文字クラスに類似しています。（&lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;perlrecharclassの「POSIX文字クラス」を&lt;/a&gt;参照してください。）クラスごとにいくつかのバリアントがあります。（すべてのマクロにすべてのバリアントがあるわけではありません。以下の各項目に、そのマクロに有効なものがリストされています。） &lt;code&gt;use bytes&lt;/code&gt; の影響を受けるものはなく、名前に &lt;code&gt;LC&lt;/code&gt; が含まれるマクロのみが現在のロケールの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="7547891b2c07526eb3624e622a75bf7d7cccf2c6" translate="yes" xml:space="preserve">
          <source>This section is about functions (really macros) that classify characters into types, such as punctuation versus alphabetic, etc. Most of these are analogous to regular expression character classes. (See &lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;POSIX Character Classes in perlrecharclass&lt;/a&gt;.) There are several variants for each class. (Not all macros have all variants; each item below lists the ones valid for it.) None are affected by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; , and only the ones with &lt;code&gt;LC&lt;/code&gt; in the name are affected by the current locale.</source>
          <target state="translated">このセクションは、文字を句読点とアルファベットなどのタイプに分類する関数（実際にはマクロ）についてです。これらのほとんどは、正規表現文字クラスに類似しています。（&lt;a href=&quot;perlrecharclass#POSIX-Character-Classes&quot;&gt;perlrecharclassのPOSIX文字クラスを&lt;/a&gt;参照してください。）各クラスにはいくつかのバリアントがあります。（すべてのマクロにすべてのバリアントがあるわけではありません。以下の各項目に有効なものがあります。） &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; による影響はありません。現在のロケールによって影響を受けるのは、名前に &lt;code&gt;LC&lt;/code&gt; があるものだけです。</target>
        </trans-unit>
        <trans-unit id="e9ab2821650c93c09f64d44ff30564f17238787a" translate="yes" xml:space="preserve">
          <source>This section is also taken from JSON::XS.</source>
          <target state="translated">このセクションもJSON::XSから引用しています。</target>
        </trans-unit>
        <trans-unit id="ddeda1d72fad19d0a6a9f82fe55d9f33ab10382a" translate="yes" xml:space="preserve">
          <source>This section is intended to supplement and clarify the discussion in &lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;&quot;Command Paragraph&quot; in perlpod&lt;/a&gt;. These are the currently recognized Pod commands:</source>
          <target state="translated">このセクションは&lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;、perlpodの「コマンド段落」の&lt;/a&gt;説明を補足して明確にすることを目的としています。現在認識されているポッドコマンドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d919f2203b8f136316a99d5a21a115c2a5759b1a" translate="yes" xml:space="preserve">
          <source>This section is intended to supplement and clarify the discussion in &lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;Command Paragraph in perlpod&lt;/a&gt;. These are the currently recognized Pod commands:</source>
          <target state="translated">このセクションは&lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;、perlpodのコマンド段落&lt;/a&gt;の説明を補足し、明確にすることを目的としています。これらは現在認識されているポッドコマンドです。</target>
        </trans-unit>
        <trans-unit id="12d39af9317de3b208731a0e9f6172ef3ca0985f" translate="yes" xml:space="preserve">
          <source>This section is just an outline of some of the things code in a compartment might do (intentionally or unintentionally) which can have an effect outside the compartment.</source>
          <target state="translated">このセクションでは、コンパートメント内のコードがコンパートメント外に影響を及ぼす可能性のある(意図的または無意図的に)いくつかのことの概要を説明しています。</target>
        </trans-unit>
        <trans-unit id="afce53c6f9505fd215e3565d5b9cbd7590482493" translate="yes" xml:space="preserve">
          <source>This section is only necessary for those who want to write a compiler backend module that can be used via this module.</source>
          <target state="translated">このセクションは、このモジュールを経由して利用できるコンパイラバックエンドモジュールを書きたい人だけに必要です。</target>
        </trans-unit>
        <trans-unit id="1d2dead1ebaa9a0daf17a7735104700bab6a62c1" translate="yes" xml:space="preserve">
          <source>This section is only relevant if you want to use the &lt;code&gt;FOOBAR::DATA&lt;/code&gt; together with the &lt;b&gt;SelfLoader&lt;/b&gt;.</source>
          <target state="translated">このセクションは、 &lt;code&gt;FOOBAR::DATA&lt;/code&gt; を&lt;b&gt;SelfLoader&lt;/b&gt;とともに使用する場合にのみ関連します。</target>
        </trans-unit>
        <trans-unit id="6b8111cc382b6e222eab22ae8b7285382f21bba0" translate="yes" xml:space="preserve">
          <source>This section is surprisingly small because the rest of the FAQ is littered with answers involving regular expressions. For example, decoding a URL and checking whether something is a number can be handled with regular expressions, but those answers are found elsewhere in this document (in &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;: &quot;How do I decode or create those %-encodings on the web&quot; and &lt;a href=&quot;perlfaq4&quot;&gt;perlfaq4&lt;/a&gt;: &quot;How do I determine whether a scalar is a number/whole/integer/float&quot;, to be precise).</source>
          <target state="translated">FAQの残りの部分には正規表現に関する答えが散らばっているので、このセクションは驚くほど小さいです。たとえば、URLをデコードし、何かが数値であるかどうかを確認することは正規表現で処理できますが、それらの回答はこのドキュメントの他の場所にあります（&lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;：「Webでこれらの％エンコーディングをデコードまたは作成するには」および&lt;a href=&quot;perlfaq4&quot;&gt;perlfaq4&lt;/a&gt;：「スカラーが数値/整数/整数/浮動小数点数であるかどうかを正確に判断するにはどうすればよいですか。」</target>
        </trans-unit>
        <trans-unit id="e488b03478a9d4c34a486aa35881d2d7c336d0b6" translate="yes" xml:space="preserve">
          <source>This section is surprisingly small because the rest of the FAQ is littered with answers involving regular expressions. For example, decoding a URL and checking whether something is a number can be handled with regular expressions, but those answers are found elsewhere in this document (in perlfaq9 : &quot;How do I decode or create those %-encodings on the web&quot; and perlfaq4 : &quot;How do I determine whether a scalar is a number/whole/integer/float&quot;, to be precise).</source>
          <target state="translated">FAQの他の部分は正規表現を使った回答で埋め尽くされているので、このセクションは驚くほど小さくなっています。例えば、URL のデコードや数値かどうかのチェックは正規表現で処理できますが、それらの答えはこのドキュメントの他の場所にあります (正確には perlfaq9:&quot;How do I do I decode or create those %-encodings on the web&quot;,perlfaq4:&quot;How do I decide I know how I decide a scalar is a number/whole/integer/float &quot;にあります)。</target>
        </trans-unit>
        <trans-unit id="732c1a0656cc78e70f97a666a29ecd78fe5a04dd" translate="yes" xml:space="preserve">
          <source>This section is taken from JSON::XS almost verbatim. &lt;code&gt;encode_json&lt;/code&gt; and &lt;code&gt;decode_json&lt;/code&gt; are exported by default.</source>
          <target state="translated">このセクションは、JSON :: XSからほぼ逐語的に引用されています。 &lt;code&gt;encode_json&lt;/code&gt; と &lt;code&gt;decode_json&lt;/code&gt; はデフォルトでエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="94d687991685902a3cbba9421e6e5a504f1cdd17" translate="yes" xml:space="preserve">
          <source>This section is taken from JSON::XS.</source>
          <target state="translated">このセクションはJSON::XSから引用しています。</target>
        </trans-unit>
        <trans-unit id="94757c3cee869d3cff315104b19f6299d40770f6" translate="yes" xml:space="preserve">
          <source>This section of the FAQ answers questions about where to find source and documentation for Perl, support, and related matters.</source>
          <target state="translated">この FAQ のセクションでは、Perl のソースやドキュメント、サポート、および関連する事項についての質問に答えています。</target>
        </trans-unit>
        <trans-unit id="dd108d0d127c5d70473c9d7274a370ea63329739" translate="yes" xml:space="preserve">
          <source>This section of the FAQ answers questions related to manipulating numbers, dates, strings, arrays, hashes, and miscellaneous data issues.</source>
          <target state="translated">このセクションでは、数字、日付、文字列、配列、ハッシュ、雑多なデータの操作に関する質問に答えます。</target>
        </trans-unit>
        <trans-unit id="43d6c325f900a7d6a933d383734e7454f02fa808" translate="yes" xml:space="preserve">
          <source>This section of the FAQ answers questions related to programmer tools and programming support.</source>
          <target state="translated">このセクションでは、プログラマツールやプログラミングサポートに関する質問に答えています。</target>
        </trans-unit>
        <trans-unit id="8c63d2f74bc0df3e2938dcd3a6724a679f1d5b9f" translate="yes" xml:space="preserve">
          <source>This section of the FAQ answers very general, high-level questions about Perl.</source>
          <target state="translated">このセクションでは、Perlに関する非常に一般的で高レベルな質問に答えています。</target>
        </trans-unit>
        <trans-unit id="f91732cbb36111757913713f2dd27264f7f4075b" translate="yes" xml:space="preserve">
          <source>This section of the Perl FAQ covers questions involving operating system interaction. Topics include interprocess communication (IPC), control over the user-interface (keyboard, screen and pointing devices), and most anything else not related to data manipulation.</source>
          <target state="translated">Perl FAQ のこのセクションでは、オペレーティングシステムの相互作用に関する質問を扱っています。トピックには、プロセス間通信 (IPC)、ユーザインタフェース (キーボード、スクリーン、ポインティングデバイス)の制御、およびデータ操作に関係のないその他のほとんどのことが含まれます。</target>
        </trans-unit>
        <trans-unit id="d25ee711a891d2493e43b730a8ee5f38afba1662" translate="yes" xml:space="preserve">
          <source>This section only applies to you if you have existing data written out by Storable 2.02 or earlier on perl 5.6.0 or 5.6.1 on Unix or Linux which has been configured with 64 bit integer support (not the default) If you got a precompiled perl, rather than running Configure to build your own perl from source, then it almost certainly does not affect you, and you can stop reading now (unless you're curious). If you're using perl on Windows it does not affect you.</source>
          <target state="translated">このセクションは、Storable 2.02 以前の perl 5.6.0 や 5.6.1 で 64 ビット整数サポート (デフォルトではありません)で Storable 2.02 以前のデータを書き出している場合にのみ適用されます。 Configure を実行してソースから自分の perl をビルドするのではなく、プリコンパイルされた perl を手に入れた場合は、ほぼ確実に影響はありませんので、今すぐ読むのをやめても構いません (好奇心がない限り)。Windows で perl を使っているのであれば影響はありません。</target>
        </trans-unit>
        <trans-unit id="8ecf28b7a887ea07f287d9185e0392b617b15554" translate="yes" xml:space="preserve">
          <source>This section only considers the tagged value case: a tagged JSON object is encountered during decoding and &lt;code&gt;allow_tags&lt;/code&gt; is disabled, a parse error will result (as if tagged values were not part of the grammar).</source>
          <target state="translated">このセクションでは、タグ付き値の場合のみを考慮します。デコード中にタグ付きJSONオブジェクトが検出され、 &lt;code&gt;allow_tags&lt;/code&gt; が無効になると、解析エラーが発生します（タグ付き値が文法の一部ではないかのように）。</target>
        </trans-unit>
        <trans-unit id="df773f3e4810bcca716d1f76438458e235350349" translate="yes" xml:space="preserve">
          <source>This section tries to classify the supported encodings by their applicability for information exchange over the Internet and to choose the most suitable aliases to name them in the context of such communication.</source>
          <target state="translated">このセクションでは、インターネット上での情報交換のための適用可能性によってサポートされているエンコーディングを分類し、そのような通信の文脈でそれらの名前を付けるために最適なエイリアスを選択しようとします。</target>
        </trans-unit>
        <trans-unit id="9863e5d9d88cf88755191633db565f4fe6bf163c" translate="yes" xml:space="preserve">
          <source>This sends an &lt;a href=&quot;Test2::Event::Bail&quot;&gt;Test2::Event::Bail&lt;/a&gt; event. This event will completely terminate all testing.</source>
          <target state="translated">これにより、&lt;a href=&quot;Test2::Event::Bail&quot;&gt;Test2 :: Event :: Bail&lt;/a&gt;イベントが送信されます。このイベントにより、すべてのテストが完全に終了します。</target>
        </trans-unit>
        <trans-unit id="5b9a6489148fff3cc80ff958733f7f998b0b3cdf" translate="yes" xml:space="preserve">
          <source>This server accepts one of five different commands, sending output back to the client. Unlike most network servers, this one handles only one incoming client at a time. Multitasking servers are covered in Chapter 16 of the Camel.</source>
          <target state="translated">このサーバは、5 種類のコマンドのうちの 1 つを受け取り、出力をクライアントに送り返します。ほとんどのネットワークサーバとは異なり、このサーバは一度に1つの着信クライアントしか処理しません。マルチタスクサーバについては、キャメルの第16章で説明しています。</target>
        </trans-unit>
        <trans-unit id="ffb206fa8662fa49c173d5f9d350cc23a1d8b5c6" translate="yes" xml:space="preserve">
          <source>This server takes the trouble to clone off a child version via fork() for each incoming request. That way it can handle many requests at once, which you might not always want. Even if you don't fork(), the listen() will allow that many pending connections. Forking servers have to be particularly careful about cleaning up their dead children (called &quot;zombies&quot; in Unix parlance), because otherwise you'll quickly fill up your process table. The REAPER subroutine is used here to call waitpid() for any child processes that have finished, thereby ensuring that they terminate cleanly and don't join the ranks of the living dead.</source>
          <target state="translated">このサーバは、入ってくるリクエストごとに fork()を使って子バージョンをクローンします。このようにして、一度に多くのリクエストを処理することができます。fork()を行わなくても、listen()はそれだけ多くの保留中の接続を許可します。フォークサーバは、死んだ子(Unixの用語で &quot;ゾンビ &quot;と呼ばれています)の後始末に特に注意しなければなりません。REAPERサブルーチンは、終了した子プロセスのために waitpid()を呼び出すためにここで使われています。</target>
        </trans-unit>
        <trans-unit id="3c5ebe323e1cea15acbe8beafe841f6d123af5cf" translate="yes" xml:space="preserve">
          <source>This set of instructions is meant to describe a so-called &quot;native&quot; port of Perl to the Windows platform. This includes both 32-bit and 64-bit Windows operating systems. The resulting Perl requires no additional software to run (other than what came with your operating system). Currently, this port is capable of using one of the following compilers on the Intel x86 architecture:</source>
          <target state="translated">この一連の命令は、WindowsプラットフォームへのPerlのいわゆる「ネイティブ」移植を記述することを意図しています。これには、32 ビットと 64 ビットの両方の Windows オペレーティング・システムが含まれます。結果として得られる Perl は、追加のソフトウェアを必要とせずに実行することができます (オペレーティング・システムに付属のもの以外は)。現在、この移植版では、Intel x86 アーキテクチャ上で以下のコンパイラのいずれかを使用することができます。</target>
        </trans-unit>
        <trans-unit id="8777023fd72f0e0c5194df7056fed5f92ab1ed79" translate="yes" xml:space="preserve">
          <source>This sets &lt;code&gt;$\&lt;/code&gt; to newline and then sets &lt;code&gt;$/&lt;/code&gt; to the null character.</source>
          <target state="translated">これは &lt;code&gt;$\&lt;/code&gt; を改行に設定し、次に &lt;code&gt;$/&lt;/code&gt; をヌル文字に設定します。</target>
        </trans-unit>
        <trans-unit id="4549dd71bcce8b09d1c070ffac130c9cb9eed0b2" translate="yes" xml:space="preserve">
          <source>This sets a variable in op/numconvert.t.</source>
          <target state="translated">op/numconvert.t の変数を設定します。</target>
        </trans-unit>
        <trans-unit id="df79d9971c873dd56e1affe3565f833f5f4ef4be" translate="yes" xml:space="preserve">
          <source>This sets the</source>
          <target state="translated">を設定します。</target>
        </trans-unit>
        <trans-unit id="cc422551baf5bd378e1441e1ffd937104c35c5d0" translate="yes" xml:space="preserve">
          <source>This sets the accuracy for all math operations. The argument must be greater than or equal to zero. See Math::BigInt's bround() function for details.</source>
          <target state="translated">これは、すべての数学演算の精度を設定します。引数はゼロ以上でなければなりません。詳細は Math::BigInt の bround()関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b2057b585966ee5e34a71b1fcc4af8dffd8aef3" translate="yes" xml:space="preserve">
          <source>This sets the default per-thread stack size at the start of the application.</source>
          <target state="translated">これは、アプリケーションの開始時のデフォルトのスレッドごとのスタックサイズを設定します。</target>
        </trans-unit>
        <trans-unit id="d80f3ae97beba02bd7de41d9d2bef09e8032704e" translate="yes" xml:space="preserve">
          <source>This sets the filehandle that &lt;code&gt;$parser&lt;/code&gt; 's output will be written to. You can pass &lt;code&gt;*STDOUT&lt;/code&gt; or &lt;code&gt;*STDERR&lt;/code&gt; , otherwise you should probably do something like this:</source>
          <target state="translated">これは &lt;code&gt;$parser&lt;/code&gt; の出力が書き込まれるファイルハンドルを設定します。 &lt;code&gt;*STDOUT&lt;/code&gt; または &lt;code&gt;*STDERR&lt;/code&gt; を渡すことができます。そうでない場合は、おそらく次のようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="2f62f85bc91a48745c4461c85cd5655d80de88af" translate="yes" xml:space="preserve">
          <source>This sets the filehandle that &lt;code&gt;$parser&lt;/code&gt;'s output will be written to. You can pass &lt;code&gt;*STDOUT&lt;/code&gt; or &lt;code&gt;*STDERR&lt;/code&gt;, otherwise you should probably do something like this:</source>
          <target state="translated">これにより、 &lt;code&gt;$parser&lt;/code&gt; の出力が書き込まれるファイルハンドルが設定されます。 &lt;code&gt;*STDOUT&lt;/code&gt; または &lt;code&gt;*STDERR&lt;/code&gt; を渡すことができます。それ以外の場合は、おそらく次のようなことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="af102c7f2132a623b34e9347ca5e8597fbe36895" translate="yes" xml:space="preserve">
          <source>This sets the language code to tag this document as being in. By default, it is currently the value of the environment variable &lt;code&gt;RTFDEFLANG&lt;/code&gt; , or if that's not set, then the value 1033 (for US English).</source>
          <target state="translated">これにより、このドキュメントが存在するものとしてタグを付けるように言語コードが設定されます。デフォルトでは、これは現在、環境変数 &lt;code&gt;RTFDEFLANG&lt;/code&gt; の値です。設定されていない場合は、値1033（米国英語の場合）です。</target>
        </trans-unit>
        <trans-unit id="38b3389f1a148c762d20dbeefeec456038d65737" translate="yes" xml:space="preserve">
          <source>This sets the language code to tag this document as being in. By default, it is currently the value of the environment variable &lt;code&gt;RTFDEFLANG&lt;/code&gt;, or if that's not set, then the value 1033 (for US English).</source>
          <target state="translated">これにより、このドキュメントに存在するものとしてタグ付けする言語コードが設定されます。デフォルトでは、現在、環境変数 &lt;code&gt;RTFDEFLANG&lt;/code&gt; の値であるか、設定されていない場合は値1033（米国英語の場合）です。</target>
        </trans-unit>
        <trans-unit id="529a10bfb87aaa836949c559d932aa868d0ea517" translate="yes" xml:space="preserve">
          <source>This sets the precision for all math operations. The argument can be any integer. Negative values mean a fixed number of digits after the dot, and are &amp;lt;B&amp;gt;ignored&amp;lt;/B&amp;gt; since all operations happen in integer space. A positive value rounds to this digit left from the dot. 0 or 1 mean round to integer and are ignore like negative values.</source>
          <target state="translated">これにより、すべての数学演算の精度が設定されます。引数は任意の整数にすることができます。負の値はドットの後の固定桁数を意味し、すべての操作が整数空間で行われるため、&amp;lt;B&amp;gt;無視されます&amp;lt;/ B&amp;gt;。正の値は、ドットの左側のこの数字に丸めます。0または1は整数に丸めることを意味し、負の値のように無視されます。</target>
        </trans-unit>
        <trans-unit id="674e5733f608427771b5b90d6f64c3b452aa5b35" translate="yes" xml:space="preserve">
          <source>This sets the precision for all math operations. The argument can be any integer. Negative values mean a fixed number of digits after the dot, while a positive value rounds to this digit left from the dot. 0 or 1 mean round to integer. See Math::BigInt's bfround() function for details.</source>
          <target state="translated">これは、すべての数学演算の精度を設定します。引数には任意の整数を指定できます。負の値はドットの後の固定桁数を意味し、正の値はドットから左のこの桁に丸めます。0 または 1 は整数に丸めることを意味します。詳細は Math::BigInt の bfround()関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b5668a047104c30653c0804d67e484bf29d90cb" translate="yes" xml:space="preserve">
          <source>This sets the soft and hard limits to 10 and 20 seconds, respectively. After 10 seconds of time spent running on the CPU (not &quot;wall&quot; time), the process will be sent a signal (XCPU on some systems) which, if not trapped, will cause the process to terminate. If that signal is trapped, then after 10 more seconds (20 seconds in total) the process will be killed with a non-trappable signal.</source>
          <target state="translated">これは、ソフトリミットとハードリミットをそれぞれ10秒と20秒に設定します。CPU上で実行されている時間の10秒後(「壁」時間ではありません)、プロセスはシグナル(一部のシステムではXCPU)を送信しますが、これがトラップされていなければ、プロセスを終了させます。その信号がトラップされた場合、さらに10秒後(合計20秒後)に、プロセスはトラップされない信号で終了します。</target>
        </trans-unit>
        <trans-unit id="130c125b35cf3d3da34044cd207b5628dc2ffac8" translate="yes" xml:space="preserve">
          <source>This sets the string that &lt;code&gt;$parser&lt;/code&gt; 's output will be sent to, instead of any filehandle.</source>
          <target state="translated">これは、ファイルハンドルではなく、 &lt;code&gt;$parser&lt;/code&gt; の出力が送信される文字列を設定します。</target>
        </trans-unit>
        <trans-unit id="11dc24aa23b6cf452f77c63ea5e698909de49109" translate="yes" xml:space="preserve">
          <source>This sets the string that &lt;code&gt;$parser&lt;/code&gt;'s output will be sent to, instead of any filehandle.</source>
          <target state="translated">これにより、ファイルハンドルの代わりに、 &lt;code&gt;$parser&lt;/code&gt; の出力が送信される文字列が設定されます。</target>
        </trans-unit>
        <trans-unit id="6b4632ee2d247f3c071c82005711a1c83db25822" translate="yes" xml:space="preserve">
          <source>This sets the version required for the given module to</source>
          <target state="translated">これは、指定されたモジュールに必要なバージョンを</target>
        </trans-unit>
        <trans-unit id="ce02c4df1fe3dcc67a7d36b7b1e441cff60cc978" translate="yes" xml:space="preserve">
          <source>This sets what class is used for rendering the files. The default is &quot;Pod::Simple::HTML&quot;. If you set it to something else, it should probably be a subclass of Pod::Simple::HTML, and you should &lt;code&gt;&lt;a href=&quot;../../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; that class so that's it's loaded before Pod::Simple::HTMLBatch tries loading it.</source>
          <target state="translated">これにより、ファイルのレンダリングに使用するクラスが設定されます。デフォルトは「Pod :: Simple :: HTML」です。それを別のものに設定する場合、それはおそらくPod :: Simple :: HTMLのサブクラスである &lt;code&gt;&lt;a href=&quot;../../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、Pod :: Simple :: HTMLBatchがそれをロードする前にロードされるように、そのクラスを要求または &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="5cfda4b2fca350828dd5a1ac91438eac5b206248" translate="yes" xml:space="preserve">
          <source>This sets what class is used for rendering the files. The default is &quot;Pod::Simple::HTML&quot;. If you set it to something else, it should probably be a subclass of Pod::Simple::HTML, and you should &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;use&lt;/code&gt; that class so that's it's loaded before Pod::Simple::HTMLBatch tries loading it.</source>
          <target state="translated">これにより、ファイルのレンダリングに使用されるクラスが設定されます。デフォルトは「Pod :: Simple :: HTML」です。それを他の何かに設定する場合、それはおそらくPod :: Simple :: HTMLのサブクラスであるはずで &lt;code&gt;require&lt;/code&gt; 、Pod :: Simple :: HTMLBatchがそれをロードしようとする前にロードされるようにそのクラスを要求または &lt;code&gt;use&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="ec1e3d22ca8911a43038e77812f3f3938f114390" translate="yes" xml:space="preserve">
          <source>This sets what class is used for searching for the files. The default is &quot;Pod::Simple::Search&quot;. If you set it to something else, it should probably be a subclass of Pod::Simple::Search, and you should &lt;code&gt;&lt;a href=&quot;../../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; that class so that's it's loaded before Pod::Simple::HTMLBatch tries loading it.</source>
          <target state="translated">これにより、ファイルの検索に使用されるクラスが設定されます。デフォルトは「Pod :: Simple :: Search」です。それを別のものに設定する場合、それはおそらくPod :: Simple :: Searchのサブクラスである &lt;code&gt;&lt;a href=&quot;../../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、Pod :: Simple :: HTMLBatchがそれをロードする前にロードされるように、そのクラスを要求または &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="7237f6ff3ed8efb498d362dab04bc50228f211f0" translate="yes" xml:space="preserve">
          <source>This sets what class is used for searching for the files. The default is &quot;Pod::Simple::Search&quot;. If you set it to something else, it should probably be a subclass of Pod::Simple::Search, and you should &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;use&lt;/code&gt; that class so that's it's loaded before Pod::Simple::HTMLBatch tries loading it.</source>
          <target state="translated">これにより、ファイルの検索に使用されるクラスが設定されます。デフォルトは「Pod :: Simple :: Search」です。それを他の何かに設定する場合、それはおそらくPod :: Simple :: Searchのサブクラスであるはずで &lt;code&gt;require&lt;/code&gt; 、Pod :: Simple :: HTMLBatchがロードを試みる前にロードされるようにそのクラスを要求または &lt;code&gt;use&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="c9cf2efded42d8cb56f73f264ab95aef6e9febaa" translate="yes" xml:space="preserve">
          <source>This setting has currently no effect on tied hashes.</source>
          <target state="translated">この設定は、現在のところタイドハッシュには効果がありません。</target>
        </trans-unit>
        <trans-unit id="52c8e9c991aed7d8a50a93d4bed0eb71bffb9b06" translate="yes" xml:space="preserve">
          <source>This setting has no effect on &lt;code&gt;decode&lt;/code&gt;.</source>
          <target state="translated">この設定は &lt;code&gt;decode&lt;/code&gt; は影響しません。</target>
        </trans-unit>
        <trans-unit id="c8d1b9e8622b5f2ff4cb6a55e0533419d19af149" translate="yes" xml:space="preserve">
          <source>This setting has no effect when decoding JSON texts.</source>
          <target state="translated">この設定は、JSON テキストをデコードする際には何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="03e68aea7378a9d8770b734fa44395aeb3e883a4" translate="yes" xml:space="preserve">
          <source>This setting has no effect when decoding JSON texts. You will also most likely combine this setting with &lt;code&gt;space_after&lt;/code&gt;.</source>
          <target state="translated">この設定は、JSONテキストをデコードする場合には効果がありません。また、この設定を &lt;code&gt;space_after&lt;/code&gt; と組み合わせる可能性もあります。</target>
        </trans-unit>
        <trans-unit id="40822cd1e25ae559171a5c38a63f3fa78270123b" translate="yes" xml:space="preserve">
          <source>This setting needs to be in effect while Perl is built, but also when the programs are run.</source>
          <target state="translated">この設定は、Perlがビルドされている間だけでなく、プログラムが実行されている間も有効である必要があります。</target>
        </trans-unit>
        <trans-unit id="0ef0f761ac69580bceb47730cfb76aca36efdbeb" translate="yes" xml:space="preserve">
          <source>This shares the variable(s) in the argument list with the compartment. This is almost identical to exporting variables using the &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; module.</source>
          <target state="translated">これにより、引数リストの変数がコンパートメントと共有されます。これは、&lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;モジュールを使用した変数のエクスポートとほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="d152c0ad7d6bcbd14fe51b7170fea53d971e63b6" translate="yes" xml:space="preserve">
          <source>This shifts the burden of complexity off to the quant method. That method's parameters are: the numeric value it's going to use to quantify something; the Russian word it's going to quantify; and the parameter &quot;accusative&quot;, which you're using to mean that this sentence's syntax wants a noun in the accusative case there, although that quantification method may have to overrule, for grammatical reasons you may recall from the beginning of this article.</source>
          <target state="translated">これは複雑さの重荷を量子法に移すことになります。このメソッドのパラメータは、何かを定量化するために使用する数値、定量化するロシア語の単語、そして「アクセント」というパラメータです。</target>
        </trans-unit>
        <trans-unit id="6847db733d896a734ef92c2af3a111d1b507ced6" translate="yes" xml:space="preserve">
          <source>This should &lt;b&gt;ONLY&lt;/b&gt; be used on memory obtained using &lt;a href=&quot;#Newx&quot;&gt;&quot;Newx&quot;&lt;/a&gt; and friends.</source>
          <target state="translated">これは、&lt;a href=&quot;#Newx&quot;&gt;「Newx」&lt;/a&gt;とその仲間を使用して取得したメモリで&lt;b&gt;のみ&lt;/b&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d3464b620ba9f7ef03d81ee4683ae7ba242d757" translate="yes" xml:space="preserve">
          <source>This should &lt;b&gt;ONLY&lt;/b&gt; be used on memory obtained using &lt;a href=&quot;#Newx&quot;&gt;Newx&lt;/a&gt; and friends.</source>
          <target state="translated">これは、&lt;a href=&quot;#Newx&quot;&gt;Newx&lt;/a&gt;などを使用して取得したメモリで&lt;b&gt;のみ&lt;/b&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d79a68f01e1702d7ec1c9976d188db9c7f2aece8" translate="yes" xml:space="preserve">
          <source>This should allow read/write access to any files that are extracted from the zip file/buffer`.</source>
          <target state="translated">これにより、zip ファイル/バッファ`から抽出されたファイルへの読み書きアクセスが可能になるはずです。</target>
        </trans-unit>
        <trans-unit id="38a7ea1ad739ecad0857da6650e530f48bc66f62" translate="yes" xml:space="preserve">
          <source>This should be completely transparent to any applications written entirely in Perl (minus a few rarely encountered caveats given in the &lt;a href=&quot;#Multi-threaded&quot;&gt;&quot;Multi-threaded&quot;&lt;/a&gt; section). Information for XS module writers is given in &lt;a href=&quot;perlxs#Locale-aware-XS-code&quot;&gt;&quot;Locale-aware XS code&quot; in perlxs&lt;/a&gt;.</source>
          <target state="translated">これは、完全にPerlで記述されたアプリケーションに対して完全に透過的である必要があります（&lt;a href=&quot;#Multi-threaded&quot;&gt;「マルチスレッド」&lt;/a&gt;セクションに記載されている、めったに発生しない警告を除く）。 XSモジュールの作成者向けの情報は&lt;a href=&quot;perlxs#Locale-aware-XS-code&quot;&gt;、perlxsの「ロケール対応XSコード」に記載されてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b4bc0e6df3ccf75b9d4b22bada1e150f1c0bf5e1" translate="yes" xml:space="preserve">
          <source>This should be fixed already.</source>
          <target state="translated">これはすでに修正されているはずです。</target>
        </trans-unit>
        <trans-unit id="f1709f85224b4fc47c42955a5583dcda72fcf36e" translate="yes" xml:space="preserve">
          <source>This should be fixed.</source>
          <target state="translated">これは修正されるべきです。</target>
        </trans-unit>
        <trans-unit id="d375da43f6c63dd4302e9f62a049ebffa1351990" translate="yes" xml:space="preserve">
          <source>This should be interpreted as '&lt;code&gt;PVOP&lt;/code&gt; ' only. The &lt;code&gt;_OR_SVOP&lt;/code&gt; is because the only core &lt;code&gt;PVOP&lt;/code&gt; , &lt;code&gt;OP_TRANS&lt;/code&gt; , can sometimes be a &lt;code&gt;SVOP&lt;/code&gt; instead.</source>
          <target state="translated">これは「 &lt;code&gt;PVOP&lt;/code&gt; 」としてのみ解釈されます。 &lt;code&gt;_OR_SVOP&lt;/code&gt; はコアのみからである &lt;code&gt;PVOP&lt;/code&gt; 、 &lt;code&gt;OP_TRANS&lt;/code&gt; は、時々することができる &lt;code&gt;SVOP&lt;/code&gt; 代わり。</target>
        </trans-unit>
        <trans-unit id="55cb7fd92e54949da6a1f17f8e9cc521852ab737" translate="yes" xml:space="preserve">
          <source>This should be interpreted as '&lt;code&gt;PVOP&lt;/code&gt;' only. The &lt;code&gt;_OR_SVOP&lt;/code&gt; is because the only core &lt;code&gt;PVOP&lt;/code&gt;, &lt;code&gt;OP_TRANS&lt;/code&gt;, can sometimes be a &lt;code&gt;SVOP&lt;/code&gt; instead.</source>
          <target state="translated">これは「 &lt;code&gt;PVOP&lt;/code&gt; 」としてのみ解釈する必要があります。 &lt;code&gt;_OR_SVOP&lt;/code&gt; はコアのみからである &lt;code&gt;PVOP&lt;/code&gt; 、 &lt;code&gt;OP_TRANS&lt;/code&gt; は、時々することができる &lt;code&gt;SVOP&lt;/code&gt; 代わり。</target>
        </trans-unit>
        <trans-unit id="13a5db63688f7fa372582799c1bd3dfdaa3ba0cd" translate="yes" xml:space="preserve">
          <source>This should be replaced by the full path to your clang executable if it is not in your path.</source>
          <target state="translated">もしパスにない場合は、clang実行ファイルのフルパスで置き換えてください。</target>
        </trans-unit>
        <trans-unit id="87cbf40ae5f30dda5d9df6e6dea667727ea90c08" translate="yes" xml:space="preserve">
          <source>This should be set for non debug messages that are still important enough to show when a formatter is in quiet mode. A formatter should send these to STDOUT not STDERR, but should show them even in non-verbose mode.</source>
          <target state="translated">これは、フォーマッタがクワイエットモードにあるときに表示するのに十分に重要なデバッグ以外のメッセージに設定されるべきです。フォーマッタはこれらのメッセージをSTDERRではなくSTDOUTに送るべきですが、非冗長モードでも表示しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b5a95a55a5803d791f964bba2e2a1d75b4c88370" translate="yes" xml:space="preserve">
          <source>This should be the first thing you call in your test script. It declares your testing plan, how many there will be, if any of them should be allowed to fail, and so on.</source>
          <target state="translated">これはテストスクリプトで最初に呼び出すべきものです。これは、テスト計画を宣言するもので、何個のテストがあるのか、どれか一つでも失敗してはいけないのか、などを示します。</target>
        </trans-unit>
        <trans-unit id="c0f01ea79ad3c782b34e1c39edb42ab144bd80b0" translate="yes" xml:space="preserve">
          <source>This should build everything. Specifically, it will create perl.exe, perl522.dll at the perl toplevel, and various other extension dll's under the lib\auto directory. If the build fails for any reason, make sure you have done the previous steps correctly.</source>
          <target state="translated">これで全てがビルドされるはずです。具体的には、perl.exe、perl toplevelにあるperl522.dll、libautoディレクトリの下にある他の様々な拡張dllを作成します。何らかの理由でビルドに失敗した場合は、前の手順が正しく行われていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="3a62d97effee732e54e0d1504511279a90715573" translate="yes" xml:space="preserve">
          <source>This should build everything. Specifically, it will create perl.exe, perl532.dll at the perl toplevel, and various other extension dll's under the lib\auto directory. If the build fails for any reason, make sure you have done the previous steps correctly.</source>
          <target state="translated">これで全てが構築されるはずです。具体的には、perl.exe、perlトップレベルのperl532.dll、そしてlibautoディレクトリの下にある他の様々な拡張dllを作成します。何らかの理由でビルドに失敗した場合は、前のステップが正しく行われていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="30ba9060ffc1293bd461e0db035bb80a563a059f" translate="yes" xml:space="preserve">
          <source>This should build miniperl and then fail when it tries to run it.</source>
          <target state="translated">これはminiperlをビルドして、それを実行しようとすると失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="db496c0536d24209950a452554a51ec2ca77e58c" translate="yes" xml:space="preserve">
          <source>This should contain a URI where the exact terms of the license may be found.</source>
          <target state="translated">これは、ライセンスの正確な条件を見つけることができるURIを含むべきです。</target>
        </trans-unit>
        <trans-unit id="678375f3c34a52f1c875afc4e9a5d9d1a7cc959a" translate="yes" xml:space="preserve">
          <source>This should create an executable</source>
          <target state="translated">これは実行可能な</target>
        </trans-unit>
        <trans-unit id="0343ed053df7e2ae641054c461a6d9ef120ebfaa" translate="yes" xml:space="preserve">
          <source>This should match any sequences of characters that aren't &lt;code&gt;\xDF&lt;/code&gt; nor what &lt;code&gt;\xDF&lt;/code&gt; matches under &lt;code&gt;/i&lt;/code&gt;. &lt;code&gt;&quot;s&quot;&lt;/code&gt; isn't &lt;code&gt;\xDF&lt;/code&gt; , but Unicode says that &lt;code&gt;&quot;ss&quot;&lt;/code&gt; is what &lt;code&gt;\xDF&lt;/code&gt; matches under &lt;code&gt;/i&lt;/code&gt;. So which one &quot;wins&quot;? Do you fail the match because the string has &lt;code&gt;ss&lt;/code&gt; or accept it because it has an &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; followed by another &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;? Perl has chosen the latter. (See note in &lt;a href=&quot;#Bracketed-Character-Classes&quot;&gt;Bracketed Character Classes&lt;/a&gt; above.)</source>
          <target state="translated">これは、 &lt;code&gt;\xDF&lt;/code&gt; でも &lt;code&gt;/i&lt;/code&gt; の下で &lt;code&gt;\xDF&lt;/code&gt; 一致するものでもない文字シーケンスと一致する必要があります。 &lt;code&gt;&quot;s&quot;&lt;/code&gt; は &lt;code&gt;\xDF&lt;/code&gt; ではありませんが、Unicodeは &lt;code&gt;&quot;ss&quot;&lt;/code&gt; が &lt;code&gt;/i&lt;/code&gt; の下で &lt;code&gt;\xDF&lt;/code&gt; 一致するものであると述べています。では、どちらが「勝つ」のでしょうか。文字列に &lt;code&gt;ss&lt;/code&gt; が含まれているため一致に失敗しますか、それとも &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; の後に別 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; sが含まれているために文字列を受け入れますか？ Perlは後者を選択しました。 （上記の&lt;a href=&quot;#Bracketed-Character-Classes&quot;&gt;括弧付き文字クラスの&lt;/a&gt;注を参照してください。）</target>
        </trans-unit>
        <trans-unit id="eb02f2a8ec63111dfc588d8b17a8d6fb2096fcb5" translate="yes" xml:space="preserve">
          <source>This should match any sequences of characters that aren't &lt;code&gt;\xDF&lt;/code&gt; nor what &lt;code&gt;\xDF&lt;/code&gt; matches under &lt;code&gt;/i&lt;/code&gt;. &lt;code&gt;&quot;s&quot;&lt;/code&gt; isn't &lt;code&gt;\xDF&lt;/code&gt;, but Unicode says that &lt;code&gt;&quot;ss&quot;&lt;/code&gt; is what &lt;code&gt;\xDF&lt;/code&gt; matches under &lt;code&gt;/i&lt;/code&gt;. So which one &quot;wins&quot;? Do you fail the match because the string has &lt;code&gt;ss&lt;/code&gt; or accept it because it has an &lt;code&gt;s&lt;/code&gt; followed by another &lt;code&gt;s&lt;/code&gt;? Perl has chosen the latter. (See note in &lt;a href=&quot;#Bracketed-Character-Classes&quot;&gt;&quot;Bracketed Character Classes&quot;&lt;/a&gt; above.)</source>
          <target state="translated">これは、 &lt;code&gt;\xDF&lt;/code&gt; ではない文字のシーケンスにも、 &lt;code&gt;/i&lt;/code&gt; の下で &lt;code&gt;\xDF&lt;/code&gt; 一致するものにも一致する必要があります。 &lt;code&gt;&quot;s&quot;&lt;/code&gt; は &lt;code&gt;\xDF&lt;/code&gt; ではありませんが、Unicodeでは &lt;code&gt;&quot;ss&quot;&lt;/code&gt; は &lt;code&gt;\xDF&lt;/code&gt; が &lt;code&gt;/i&lt;/code&gt; の下で一致するものであるとしています。では、どちらが「勝つ」のでしょうか。文字列に &lt;code&gt;ss&lt;/code&gt; があるために一致に失敗しますか、それとも &lt;code&gt;s&lt;/code&gt; の後に別 &lt;code&gt;s&lt;/code&gt; sが続くためにそれを受け入れますか？ Perlは後者を選択しました。 （上記の&lt;a href=&quot;#Bracketed-Character-Classes&quot;&gt;「括弧で囲まれた文字クラス」の&lt;/a&gt;注を参照してください。）</target>
        </trans-unit>
        <trans-unit id="050396cf8762718cb34435af8d06d17eb8dd7bc6" translate="yes" xml:space="preserve">
          <source>This should not be used to supply default values for parameters. One would normally use this when a function parameter must be processed by another library function before it can be used. Default parameters are covered in the next section.</source>
          <target state="translated">これは、パラメータのデフォルト値を指定するために使用すべきではありません。通常、関数のパラメータを使用する前に他のライブラリ関数で処理しなければならない場合に使用します。デフォルトのパラメータについては次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="8b1ca7922101edcce2a492b3a6c129abd8a583e6" translate="yes" xml:space="preserve">
          <source>This should only be necessary if</source>
          <target state="translated">これは、以下の場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="598f32a1125324d2a241a1c920bc050b40fac3d7" translate="yes" xml:space="preserve">
          <source>This should rarely be necessary, as the Perl &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; function is to be used for things that Perl opened itself, even if it was a dup of a numeric descriptor as with &lt;code&gt;MHCONTEXT&lt;/code&gt; above. But if you really have to, you may be able to do this:</source>
          <target state="translated">Perlの &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt; 関数は、上記の &lt;code&gt;MHCONTEXT&lt;/code&gt; のように数値記述子のdupであっても、Perlがそれ自体を開いたものに使用されるため、これが必要になることはめったにありません。しかし、本当に必要な場合は、これを実行できる可能性があります。</target>
        </trans-unit>
        <trans-unit id="81e177911fc8ed26557ec26b5355ec1390d9f4d0" translate="yes" xml:space="preserve">
          <source>This should rarely be necessary, as the Perl &lt;code&gt;close()&lt;/code&gt; function is to be used for things that Perl opened itself, even if it was a dup of a numeric descriptor as with &lt;code&gt;MHCONTEXT&lt;/code&gt; above. But if you really have to, you may be able to do this:</source>
          <target state="translated">上記の &lt;code&gt;MHCONTEXT&lt;/code&gt; のように数値記述子の複製であったとしても、Perlがそれ自体を開いたものにPerl &lt;code&gt;close()&lt;/code&gt; 関数が使用されるため、これが必要になることはめったにありません。しかし、本当にそうしなければならない場合は、これを行うことができるかもしれません：</target>
        </trans-unit>
        <trans-unit id="4d79cf36faa3af81e4bd5bbe5c4a98d13ad84be9" translate="yes" xml:space="preserve">
          <source>This should return true if the driver works in the current environment. This should return false if it does not. This is a CLASS method.</source>
          <target state="translated">ドライバが現在の環境で動作する場合、これはtrueを返すべきです。動作しない場合は false を返すべきです。これは CLASS メソッドです。</target>
        </trans-unit>
        <trans-unit id="cf1ab6069990fc4ba153fc0e586880eb88157c07" translate="yes" xml:space="preserve">
          <source>This shows &lt;code&gt;$a&lt;/code&gt; is a reference pointing to an SV. That SV is a PVHV, a hash.</source>
          <target state="translated">これは、 &lt;code&gt;$a&lt;/code&gt; がSVを指す参照であることを示しています。そのSVはPVHV、ハッシュです。</target>
        </trans-unit>
        <trans-unit id="b7c7e9b83cb4841b6e6724c1f7e531bbbc2b68cb" translate="yes" xml:space="preserve">
          <source>This shows &lt;code&gt;$a&lt;/code&gt; is a reference pointing to an SV. That SV is a PVHV, a hash. Fields RITER and EITER are used by &lt;code&gt;&lt;a href=&quot;../functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;$a&lt;/code&gt; がSVを指す参照であることを示しています。そのSVはPVHV、ハッシュです。フィールドRITERおよびEITERは、 &lt;code&gt;&lt;a href=&quot;../functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="4544b90fccd9dc8117d7d96fcbc15a1ca629dfae" translate="yes" xml:space="preserve">
          <source>This shows that</source>
          <target state="translated">これは、次のことを示しています。</target>
        </trans-unit>
        <trans-unit id="d012fb20c34f9ef1051349030cb25501698029ec" translate="yes" xml:space="preserve">
          <source>This shows that there were changes to this document staged for commit, and that there were further changes in the working directory not yet staged. It also shows that there was an untracked file in the working directory, and as you can see shows how to change all of this. It also shows that there is one commit on the working branch &lt;code&gt;blead&lt;/code&gt; which has not been pushed to the &lt;code&gt;origin&lt;/code&gt; remote yet. &lt;b&gt;NOTE&lt;/b&gt;: This output is also what you see as a template if you do not provide a message to &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">これは、コミット用にステージングされたこのドキュメントに変更があり、まだステージングされていない作業ディレクトリにさらに変更があったことを示しています。また、作業ディレクトリに追跡されていないファイルがあったことも示しています。ご覧のとおり、これらすべてを変更する方法を示しています。また、 &lt;code&gt;origin&lt;/code&gt; リモートにまだプッシュされていない作業ブランチ &lt;code&gt;blead&lt;/code&gt; に1つのコミットがあることも示しています。&lt;b&gt;注&lt;/b&gt;：この出力は、 &lt;code&gt;git commit&lt;/code&gt; メッセージを提供しない場合にテンプレートとして表示されるものでもあります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b55aa05d72ea8d4828d039cb967e2a4c2c9f3f35" translate="yes" xml:space="preserve">
          <source>This shows that we have an SV which is a reference, which points at another SV. In this case that second SV is a PVMG, a blessed scalar. Because it is blessed it has the &lt;code&gt;OBJECT&lt;/code&gt; flag set. Note that an SV which holds a C pointer also has the &lt;code&gt;IOK&lt;/code&gt; flag set. The &lt;code&gt;STASH&lt;/code&gt; is set to the package name which this SV was blessed into.</source>
          <target state="translated">これは、別のSVを指す参照であるSVがあることを示しています。この場合、2番目のSVは、祝福されたスカラーであるPVMGです。祝福されているので、 &lt;code&gt;OBJECT&lt;/code&gt; フラグが設定されています。Cポインターを保持するSVにも &lt;code&gt;IOK&lt;/code&gt; フラグが設定されていることに注意してください。 &lt;code&gt;STASH&lt;/code&gt; は、このSVがに恵まれましたパッケージ名に設定されています。</target>
        </trans-unit>
        <trans-unit id="d6b36418bf4797a5df13199701553bd6ebeff202" translate="yes" xml:space="preserve">
          <source>This shows the sorts of output the &lt;code&gt;l&lt;/code&gt; command can produce:</source>
          <target state="translated">これは、 &lt;code&gt;l&lt;/code&gt; コマンドが生成できる出力の種類を示しています。</target>
        </trans-unit>
        <trans-unit id="220ae5d1e65680423ed0fee8d1ae71265a4673d1" translate="yes" xml:space="preserve">
          <source>This shows the variables used in the subroutine &lt;code&gt;clear_noremap&lt;/code&gt; . The variable &lt;code&gt;$ready_to_print&lt;/code&gt; is a my() (lexical) variable, &lt;b&gt;i&lt;/b&gt;ntroduced (first declared with my()) on line 1069, and used on line 1079. The variable &lt;code&gt;$&amp;amp;&lt;/code&gt; from the main package is used on 1086, and so on.</source>
          <target state="translated">これは、サブルーチン &lt;code&gt;clear_noremap&lt;/code&gt; で使用される変数を示しています。変数 &lt;code&gt;$ready_to_print&lt;/code&gt; 、（字句）変数私の（）である&lt;b&gt;私は&lt;/b&gt; ntroducedライン1069上で、ライン1079上で使用される変数（最初に私の（）で宣言された） &lt;code&gt;$&amp;amp;&lt;/code&gt; ようにメインパッケージからは、1086年に使用され、 。</target>
        </trans-unit>
        <trans-unit id="69445b30eafff7b7c0b6c3e36cb0b52aa8e5353f" translate="yes" xml:space="preserve">
          <source>This shows the variables used in the subroutine &lt;code&gt;clear_noremap&lt;/code&gt;. The variable &lt;code&gt;$ready_to_print&lt;/code&gt; is a my() (lexical) variable, &lt;b&gt;i&lt;/b&gt;ntroduced (first declared with my()) on line 1069, and used on line 1079. The variable &lt;code&gt;$&amp;amp;&lt;/code&gt; from the main package is used on 1086, and so on.</source>
          <target state="translated">これは、サブルーチン &lt;code&gt;clear_noremap&lt;/code&gt; で使用される変数を示しています。変数 &lt;code&gt;$ready_to_print&lt;/code&gt; 、（字句）変数私の（）である&lt;b&gt;私は&lt;/b&gt;ntroducedライン1069上で、ライン1079上で使用される変数（最初に私の（）で宣言された） &lt;code&gt;$&amp;amp;&lt;/code&gt; ようにメインパッケージからは、1086年に使用され、 。</target>
        </trans-unit>
        <trans-unit id="e3a1a612c118404300b4fc88e912d956be940f47" translate="yes" xml:space="preserve">
          <source>This shows us two libraries being updated and two being added, one of which has an undefined version in the right-hand side version.</source>
          <target state="translated">これを見ると、2つのライブラリが更新され、2つのライブラリが追加されていることがわかりますが、そのうちの1つは右側のバージョンに未定義のバージョンがあることがわかります。</target>
        </trans-unit>
        <trans-unit id="a9392876266258935c97915a0016be1ab3e077a8" translate="yes" xml:space="preserve">
          <source>This shows what a reference looks like when it references a simple scalar.</source>
          <target state="translated">これは、単純なスカラを参照したときの参照がどのように見えるかを示しています。</target>
        </trans-unit>
        <trans-unit id="62c1dd6d2092bdafabfdd27d34aabe7eb07a45cc" translate="yes" xml:space="preserve">
          <source>This shows what a reference to an array looks like.</source>
          <target state="translated">これは、配列への参照がどのように見えるかを示しています。</target>
        </trans-unit>
        <trans-unit id="5af0b0f40fa34ec87e6b5d92094f2a134fbd1781" translate="yes" xml:space="preserve">
          <source>This signifies that this entry should be replaced by the decompositions for all the code points whose decomposition is algorithmically calculated. (All of them are currently in one range and no others outside the range are likely to ever be added to Unicode; the &lt;code&gt;&quot;n&quot;&lt;/code&gt; format has this same entry.) These can be generated via the function &lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize::NFD()&lt;/a&gt;.</source>
          <target state="translated">これは、このエントリを、分解がアルゴリズムで計算されるすべてのコードポイントの分解に置き換える必要があることを意味します。（これらはすべて現在1つの範囲内にあり、範囲外の他のコードがUnicodeに追加される可能性はほとんどありません。 &lt;code&gt;&quot;n&quot;&lt;/code&gt; 形式にも同じエントリがあります。）これらは関数&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode :: Normalize :: NFD（ ）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19b0c298e2bbc25317cee46892abecba84a7892d" translate="yes" xml:space="preserve">
          <source>This signifies that this entry should be replaced by the decompositions for all the code points whose decomposition is algorithmically calculated. (All of them are currently in one range and no others outside the range are likely to ever be added to Unicode; the &lt;code&gt;&quot;n&quot;&lt;/code&gt; format has this same entry.) These can be generated via the function &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize::NFD()&lt;/a&gt;.</source>
          <target state="translated">これは、このエントリを、分解がアルゴリズムで計算されるすべてのコードポイントの分解に置き換える必要があることを示しています。（それらのすべては現在1つの範囲内にあり、範囲外の他のものがUnicodeに追加される可能性はほとんどありません。 &lt;code&gt;&quot;n&quot;&lt;/code&gt; 形式にはこれと同じエントリがあります。）これらは関数&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalize :: NFD（ ）&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a3ee18b62d8c4cf82c2682ec3f88357d163d3e8" translate="yes" xml:space="preserve">
          <source>This silent implicit decoding is known as &quot;upgrading&quot;. That may sound positive, but it's best to avoid it.</source>
          <target state="translated">この無言の暗黙のデコードを「アップグレード」といいます。肯定的に聞こえるかもしれませんが、避けた方がいいでしょう。</target>
        </trans-unit>
        <trans-unit id="75ceec87638702fc9211fcbb47c663ad2b557d5f" translate="yes" xml:space="preserve">
          <source>This simplifies the reverse operation as the number of repetitions can be unpacked with the &lt;code&gt;/&lt;/code&gt; code:</source>
          <target state="translated">これにより、繰り返しの回数を &lt;code&gt;/&lt;/code&gt; コードでアンパックできるため、逆の操作が簡単になります。</target>
        </trans-unit>
        <trans-unit id="c76a52e49b25fb93c5814da39f8a0ca4f090ec45" translate="yes" xml:space="preserve">
          <source>This simply calls &lt;code&gt;sv_magic&lt;/code&gt; and coerces the &lt;code&gt;gv&lt;/code&gt; argument into an &lt;code&gt;SV&lt;/code&gt; .</source>
          <target state="translated">これは単に &lt;code&gt;sv_magic&lt;/code&gt; を呼び出し、 &lt;code&gt;gv&lt;/code&gt; 引数を &lt;code&gt;SV&lt;/code&gt; に強制変換します。</target>
        </trans-unit>
        <trans-unit id="37a8b66b66bc575f562e00ecf205b1032d87cf22" translate="yes" xml:space="preserve">
          <source>This simply calls &lt;code&gt;sv_magic&lt;/code&gt; and coerces the &lt;code&gt;gv&lt;/code&gt; argument into an &lt;code&gt;SV&lt;/code&gt;.</source>
          <target state="translated">これは単に &lt;code&gt;sv_magic&lt;/code&gt; を呼び出し、 &lt;code&gt;gv&lt;/code&gt; 引数を &lt;code&gt;SV&lt;/code&gt; に強制します。</target>
        </trans-unit>
        <trans-unit id="15c5bc95dce18ddda2693ffc0b4a16e21790eea4" translate="yes" xml:space="preserve">
          <source>This simply evaluates any expression (&lt;code&gt;$got eq $expected&lt;/code&gt; is just a simple example) and uses that to determine if the test succeeded or failed. A true expression passes, a false one fails. Very simple.</source>
          <target state="translated">これは単に任意の式を評価し（ &lt;code&gt;$got eq $expected&lt;/code&gt; は単なる例です）、それを使用してテストが成功したか失敗したかを判断します。真の式は合格し、偽の式は失敗します。とても簡単です。</target>
        </trans-unit>
        <trans-unit id="3d969d8fe90ed0cdf3881a37bda779e5984f6b64" translate="yes" xml:space="preserve">
          <source>This simply passes the C representation of the Perl variable (an SV*) in and out of the XS layer. This can be used if the C code wants to deal directly with the Perl variable.</source>
          <target state="translated">これは単に Perl 変数(SV*)の C 表現を XS レイヤーの中に出し入れします。これは、C コードが Perl 変数を直接扱いたい場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="2e6d63f50f6edf8d1ca7caa25f784dd03a42ad6f" translate="yes" xml:space="preserve">
          <source>This simultaneously affects all threads of the program, so it may be problematic to use locales in threaded applications except where there is a single locale applicable to all threads.</source>
          <target state="translated">これはプログラムのすべてのスレッドに同時に影響するので、すべてのスレッドに適用できる単一のロケールがある場合を除いて、 スレッドアプリケーションでロケールを使用するのは問題があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="cd936fff6e8f9ae7642c5c6dc94b4b5fc101a895" translate="yes" xml:space="preserve">
          <source>This situation can happen, for example, in</source>
          <target state="translated">このような状況は、例えば</target>
        </trans-unit>
        <trans-unit id="39e7f436f0844c6bf989784164030c8f8ea5c91c" translate="yes" xml:space="preserve">
          <source>This software enables you to upgrade software on your computer and so is inherently dangerous because the newly installed software may contain bugs and may alter the way your computer works or even make it unusable. Please consider backing up your data before every upgrade.</source>
          <target state="translated">このソフトウェアを使用すると、コンピュータ上のソフトウェアをアップグレードすることができるため、新しくインストールされたソフトウェアにはバグが含まれている可能性があり、コンピュータの動作方法を変更したり、使用できなくなったりする可能性があるため、本質的に危険です。アップグレードのたびにデータをバックアップすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="95b86ac068430d7abe3629291f82ebff76fb040f" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 1996- by Andreas Koenig.</source>
          <target state="translated">このソフトウェアの著作権は (c)1996-Andreas Koenig に帰属します。</target>
        </trans-unit>
        <trans-unit id="dfe6bc95971d9555fd4a070b4a33ad4fd59cb09c" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 1997 - 2018 by Graham Barr &amp;amp; Dave Rolsky.</source>
          <target state="translated">このソフトウェアの著作権は（c）1997-2018 by Graham Barr＆DaveRolskyにあります。</target>
        </trans-unit>
        <trans-unit id="b21371f38c12dbc9248a71f0465727bfaee148a3" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2002 by Ilya Zakharevich.</source>
          <target state="translated">このソフトウェアの著作権はIlya Zakharevichによって(c)2002年です。</target>
        </trans-unit>
        <trans-unit id="3c8d4de71ea698d046dd2d94f72a8a7fd4559231" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2010 by Adam Kennedy.</source>
          <target state="translated">このソフトウェアの著作権はアダム・ケネディに帰属します。</target>
        </trans-unit>
        <trans-unit id="af578baff649ee012be86b76b46b21b70df94c94" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2010 by David Golden and Ricardo Signes.</source>
          <target state="translated">このソフトウェアの著作権は、David GoldenとRicardo Signesによるものです。</target>
        </trans-unit>
        <trans-unit id="e8bb5af5fa084e557d0f3cc7f0b45662d3a55d8f" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2010 by David Golden, Ricardo Signes, Adam Kennedy and Contributors.</source>
          <target state="translated">このソフトウェアの著作権は、David Golden,Ricardo Signes,Adam Kennedy and Contributorsによって(c)2010年に保護されています。</target>
        </trans-unit>
        <trans-unit id="e377a624f20232cdb4cb749fe2907f2c5ef396be" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2013 by Leon Timmermans.</source>
          <target state="translated">このソフトウェアの著作権は(c)2013年レオン・ティマーマンズに帰属します。</target>
        </trans-unit>
        <trans-unit id="67032da8813d4f4a0a08f93013ebb3760de4d75d" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2013 by Tim Jenness and the UK Particle Physics and Astronomy Research Council.</source>
          <target state="translated">このソフトウェアの著作権は(c)2013 Tim Jenness と英国素粒子物理学・天文学研究評議会に帰属します。</target>
        </trans-unit>
        <trans-unit id="ff5cf6253d3c58ee0e8370fe0b1014e17ef0f493" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2014 by Adam Kennedy and Contributors.</source>
          <target state="translated">このソフトウェアの著作権は(c)2014 by Adam Kennedy and Contributorsに帰属します。</target>
        </trans-unit>
        <trans-unit id="66f85f97c6d8584288b7cc1e27089a6848dac19e" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2016 by David Golden.</source>
          <target state="translated">このソフトウェアの著作権は、David Goldenが所有しています。</target>
        </trans-unit>
        <trans-unit id="d3e0edd840c94a8b44ae9918823591f4112c67a4" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2018 by Christian Hansen.</source>
          <target state="translated">このソフトウェアの著作権はクリスチャン・ハンセンに帰属します。</target>
        </trans-unit>
        <trans-unit id="9071214c3f60bf69bb79c3a0e0a801662f73777b" translate="yes" xml:space="preserve">
          <source>This software is copyright (c) 2019 by Tim Jenness and the UK Particle Physics and Astronomy Research Council.</source>
          <target state="translated">このソフトウェアの著作権は(c)2019 Tim Jennessと英国素粒子物理学・天文学研究評議会に帰属します。</target>
        </trans-unit>
        <trans-unit id="5fb28093815e879710a9bb0a4ef5d290c79e5b95" translate="yes" xml:space="preserve">
          <source>This software is free software and can be modified and distributed under the same terms as Perl itself.</source>
          <target state="translated">このソフトウェアはフリーソフトウェアであり、Perl 自体と同じ条件で改変して配布することができます。</target>
        </trans-unit>
        <trans-unit id="0dbd632224b5aa617ba78b7d9260ccc05095f469" translate="yes" xml:space="preserve">
          <source>This software is released under the MIT license cited below. Additionally, when this software is distributed with &lt;b&gt;Perl Kit, Version 5&lt;/b&gt;, you may also redistribute it and/or modify it under the same terms as Perl itself.</source>
          <target state="translated">このソフトウェアは、下記のMITライセンスでリリースされています。さらに、このソフトウェアが&lt;b&gt;Perl Kit、Version 5&lt;/b&gt;と共に配布されている場合、Perl自体と同じ条件で再配布または変更することもできます。</target>
        </trans-unit>
        <trans-unit id="b8cc7587a3592d000978422dcd1052715c6866c6" translate="yes" xml:space="preserve">
          <source>This software pattern is so widely applicable that Attribute::Handlers provides a way to automate it: specifying &lt;code&gt;'autotie'&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Attribute::Handlers&lt;/code&gt; statement. So, the cycling example, could also be written:</source>
          <target state="translated">このソフトウェアパターンは非常に広く適用できるため、Attribute :: &lt;code&gt;'autotie'&lt;/code&gt; それを自動化する方法を提供します。つまり、 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Attribute::Handlers&lt;/code&gt; Handlersステートメントで'autotie'を指定します。したがって、サイクリングの例は次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="d91e373183a0a3faaf1f65e220cc6670b2950cfc" translate="yes" xml:space="preserve">
          <source>This software pattern is so widely applicable that Attribute::Handlers provides a way to automate it: specifying &lt;code&gt;'autotie'&lt;/code&gt; in the &lt;code&gt;use Attribute::Handlers&lt;/code&gt; statement. So, the cycling example, could also be written:</source>
          <target state="translated">このソフトウェアパターンは非常に広く適用できるため、Attribute :: &lt;code&gt;'autotie'&lt;/code&gt; それを自動化する方法を提供します。useAttribute &lt;code&gt;use Attribute::Handlers&lt;/code&gt; Handlersステートメントで「autotie」を指定します。したがって、サイクリングの例は、次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="89832468782e8e99834462aa8eda8b90c2a987a8" translate="yes" xml:space="preserve">
          <source>This somewhat unpredictable behavior can be avoided with the &quot;bitwise&quot; feature, new in Perl 5.22. You can enable it via &lt;code&gt;use feature 'bitwise'&lt;/code&gt; or &lt;code&gt;use v5.28&lt;/code&gt;. Before Perl 5.28, it used to emit a warning in the &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; category. Under this feature, the four standard bitwise operators (&lt;code&gt;~ | &amp;amp; ^&lt;/code&gt;) are always numeric. Adding a dot after each operator (&lt;code&gt;~. |. &amp;amp;. ^.&lt;/code&gt;) forces it to treat its operands as strings:</source>
          <target state="translated">このやや予測不可能な動作は、Perl5.22の新機能である「ビット単位」機能で回避できます。 &lt;code&gt;use feature 'bitwise'&lt;/code&gt; を介して有効にするか &lt;code&gt;use v5.28&lt;/code&gt; ます。Perl 5.28より前は、 &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; カテゴリで警告を発していました。この機能では、4つの標準ビット演算子（ &lt;code&gt;~ | &amp;amp; ^&lt;/code&gt; ）は常に数値です。各演算子（ &lt;code&gt;~. |. &amp;amp;. ^.&lt;/code&gt; ）の後にドットを追加すると、オペランドが文字列として扱われるようになります。</target>
        </trans-unit>
        <trans-unit id="8e4e18e30d88ab31167f2d6596e06fcdc6dfcfae" translate="yes" xml:space="preserve">
          <source>This somewhat unpredictable behavior can be avoided with the experimental &quot;bitwise&quot; feature, new in Perl 5.22. You can enable it via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'bitwise'&lt;/code&gt; . By default, it will warn unless the &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; warnings category has been disabled. (&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; experimental 'bitwise'&lt;/code&gt; will enable the feature and disable the warning.) Under this feature, the four standard bitwise operators (&lt;code&gt;~ | &amp;amp; ^&lt;/code&gt;) are always numeric. Adding a dot after each operator (&lt;code&gt;~. |. &amp;amp;. ^.&lt;/code&gt; ) forces it to treat its operands as strings:</source>
          <target state="translated">このやや予測不可能な動作は、Perl 5.22の新機能である実験的な「ビット単位」機能で回避できます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'bitwise'&lt;/code&gt; 有効にできます。デフォルトでは、 &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; 警告カテゴリが無効にされていない限り警告します。 （ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; experimental 'bitwise'&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;と、この機能が有効になり、警告が無効になります。）この機能では、4つの標準のビット演算子（ &lt;code&gt;~ | &amp;amp; ^&lt;/code&gt; ）は常に数値です。各演算子（ &lt;code&gt;~. |. &amp;amp;. ^.&lt;/code&gt; ）の後にドットを追加すると、演算子を強制的に文字列として扱います。</target>
        </trans-unit>
        <trans-unit id="c23e7895c905e61a802fac11e961fcc5116c44d1" translate="yes" xml:space="preserve">
          <source>This sort of code can be a real eyesore to read, as well as being very sensitive to typos, and it's much clearer to dereference the variable explicitly. We're side-stepping the issue of working with object-oriented programming techniques to encapsulate variable access via methods, only accessible through an object. Here we're just discussing the technical implementation of choice, and whether this has an effect on performance. We can see whether this dereferencing operation, has any overhead by putting comparative code in a file and running a &lt;code&gt;Benchmark&lt;/code&gt; test.</source>
          <target state="translated">この種のコードは、タイプミスに非常に敏感であるだけでなく、読むのが本当に目障りになる可能性があり、変数を明示的に逆参照する方がはるかに明確です。オブジェクト指向プログラミング手法を使用して、メソッドを介した変数アクセスをカプセル化し、オブジェクトを介してのみアクセスできるようにするという問題を回避しています。ここでは、選択した技術的な実装と、これがパフォーマンスに影響するかどうかについて説明します。ファイルに比較コードを入れて &lt;code&gt;Benchmark&lt;/code&gt; テストを実行することにより、この逆参照操作にオーバーヘッドがあるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="30f7b19aa0a9a6b3365d27ee63f89751c7ffa5a4" translate="yes" xml:space="preserve">
          <source>This special value becomes JSON null.</source>
          <target state="translated">この特別な値はJSONのnullになります。</target>
        </trans-unit>
        <trans-unit id="a97c4e8f1d7ea6446c4098759acfa71805444e34" translate="yes" xml:space="preserve">
          <source>This special variable is correctly set to the pseudo-process ID. It can be used to identify pseudo-processes within a particular session. Note that this value is subject to recycling if any pseudo-processes are launched after others have been wait()-ed on.</source>
          <target state="translated">この特別な変数には、疑似プロセスIDが正しく設定されています。これは、特定のセッション内の疑似プロセスを識別するために使用できます。他の疑似プロセスが wait()された後に起動された場合、この値は再利用される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d6c4aceca7fa6325a5de35ebe0aa5f8ca9090348" translate="yes" xml:space="preserve">
          <source>This specifies a search for library &lt;code&gt;gl&lt;/code&gt; as before. If that search fails to find the library, it looks at the next item in the list. The &lt;code&gt;:nosearch&lt;/code&gt; flag will prevent searching for the libraries that follow, so it simply returns the value as &lt;code&gt;-Ld:\mesalibs -lmesa -luser32&lt;/code&gt;, since GCC can use that value as is with its linker.</source>
          <target state="translated">これは、以前と同様にライブラリ &lt;code&gt;gl&lt;/code&gt; の検索を指定します。その検索でライブラリが見つからない場合は、リスト内の次のアイテムが検索されます。 &lt;code&gt;:nosearch&lt;/code&gt; それは単に値を返すので、フラグは、続くライブラリの検索を防ぐことができます &lt;code&gt;-Ld:\mesalibs -lmesa -luser32&lt;/code&gt; そのリンカーであるとしてGCCがその値を使用することができるので、。</target>
        </trans-unit>
        <trans-unit id="15c61edb09c43955982bc45d6acb4f0c4af7b4ab" translate="yes" xml:space="preserve">
          <source>This specifies an option to call the formatter &lt;b&gt;w&lt;/b&gt;ith. For example, &lt;code&gt;-w textsize:15&lt;/code&gt; will call &lt;code&gt;$formatter-&amp;gt;textsize(15)&lt;/code&gt; on the formatter object before it is used to format the object. For this to be valid, the formatter class must provide such a method, and the value you pass should be valid. (So if &lt;code&gt;textsize&lt;/code&gt; expects an integer, and you do &lt;code&gt;-w textsize:big&lt;/code&gt;, expect trouble.)</source>
          <target state="translated">これは、フォーマッタを呼び出すためのオプションを指定する&lt;b&gt;wは&lt;/b&gt; i番目を。たとえば、 &lt;code&gt;-w textsize:15&lt;/code&gt; は、オブジェクトのフォーマットに使用される前に、フォーマッターオブジェクトで &lt;code&gt;$formatter-&amp;gt;textsize(15)&lt;/code&gt; を呼び出します。これを有効にするには、フォーマッタクラスがそのようなメソッドを提供し、渡した値が有効である必要があります。（ &lt;code&gt;textsize&lt;/code&gt; が整数を期待している場合、 &lt;code&gt;-w textsize:big&lt;/code&gt; を実行すると、問題が発生します。）</target>
        </trans-unit>
        <trans-unit id="68a43776b3796bfc1e7b13ea689fcb5185c15c99" translate="yes" xml:space="preserve">
          <source>This specifies code that should be called when a code line is seen (i.e., a line outside of the Pod). Normally this is undef, meaning that no code should be called. If you provide a routine, it should start out like this:</source>
          <target state="translated">これは、コード行(つまりPodの外側の行)を見たときに呼び出されるべきコードを指定します。通常、これはundefで、呼び出されるべきコードがないことを意味します。ルーチンを提供する場合は、このように始まるはずです。</target>
        </trans-unit>
        <trans-unit id="14a814b946e54a59ba68d016b5b039bbdb959679" translate="yes" xml:space="preserve">
          <source>This specifies that the director &quot;somedir&quot; is the input. (This can be an absolute or relative path, it doesn't matter.)</source>
          <target state="translated">これは、ディレクタ &quot;somedir &quot;が入力であることを指定する。(これは絶対パスでも相対パスでも構わない。)</target>
        </trans-unit>
        <trans-unit id="6e3a29e95276948f0b11420f703cc3aaddffd6ef" translate="yes" xml:space="preserve">
          <source>This specifies that the input directories are the items in the arrayref &lt;code&gt;\@dirs&lt;/code&gt; .</source>
          <target state="translated">これは、入力ディレクトリがarrayref &lt;code&gt;\@dirs&lt;/code&gt; アイテムであることを指定します。</target>
        </trans-unit>
        <trans-unit id="1655aff188e0c2a28c8b5f646e8ad62ec66c5897" translate="yes" xml:space="preserve">
          <source>This specifies that the input directories are the items in the arrayref &lt;code&gt;\@dirs&lt;/code&gt;.</source>
          <target state="translated">これは、入力ディレクトリがarrayref &lt;code&gt;\@dirs&lt;/code&gt; 内のアイテムであることを指定します。</target>
        </trans-unit>
        <trans-unit id="63679666659be8466fb9bd4dddfdca5063fd3f26" translate="yes" xml:space="preserve">
          <source>This specifies that the output is not to be sent to a pager, but is to be sent directly to STDOUT.</source>
          <target state="translated">これは、出力をページャーに送るのではなく、直接 STDOUT に送ることを指定する。</target>
        </trans-unit>
        <trans-unit id="b1a8fe6a04c1ca76ee22b76d1682c8136ef9711f" translate="yes" xml:space="preserve">
          <source>This specifies that the output is to be sent neither to a pager nor to STDOUT, but is to be saved to the specified filename. Example: &lt;code&gt;perldoc -oLaTeX -dtextwrapdocs.tex Text::Wrap&lt;/code&gt;</source>
          <target state="translated">これは、出力がポケットベルにもSTDOUTにも送信されないが、指定されたファイル名に保存されることを指定します。例： &lt;code&gt;perldoc -oLaTeX -dtextwrapdocs.tex Text::Wrap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="45d4b28c13ac9c0ec2726a96f6188b8beab502af" translate="yes" xml:space="preserve">
          <source>This specifies that you want Perldoc to try using a Pod-formatting class for the output format that you specify. For example: &lt;code&gt;-oman&lt;/code&gt; . This is actually just a wrapper around the &lt;code&gt;-M&lt;/code&gt; switch; using &lt;code&gt;-o&lt;i&gt;formatname&lt;/i&gt;&lt;/code&gt; just looks for a loadable class by adding that format name (with different capitalizations) to the end of different classname prefixes.</source>
          <target state="translated">これは、Perldocに、指定した出力形式のポッド形式クラスを使用してみるように指定します。例： &lt;code&gt;-oman&lt;/code&gt; 。これは実際には &lt;code&gt;-M&lt;/code&gt; スイッチの単なるラッパーです。 &lt;code&gt;-o&lt;i&gt;formatname&lt;/i&gt;&lt;/code&gt; を使用すると、異なるクラス名の接頭辞の末尾にそのフォーマット名（大文字と小文字の区別が異なる）を追加することにより、ロード可能なクラスが検索されます。</target>
        </trans-unit>
        <trans-unit id="010d97695be94f0fec9f8d59b9e5f92e8321d055" translate="yes" xml:space="preserve">
          <source>This specifies that you want Perldoc to try using a Pod-formatting class for the output format that you specify. For example: &lt;code&gt;-oman&lt;/code&gt;. This is actually just a wrapper around the &lt;code&gt;-M&lt;/code&gt; switch; using &lt;code&gt;-o&lt;i&gt;formatname&lt;/i&gt;&lt;/code&gt; just looks for a loadable class by adding that format name (with different capitalizations) to the end of different classname prefixes.</source>
          <target state="translated">これは、指定した出力形式にPod形式のクラスを使用してPerldocで試行することを指定します。例： &lt;code&gt;-oman&lt;/code&gt; 。これは実際には &lt;code&gt;-M&lt;/code&gt; スイッチの単なるラッパーです。 &lt;code&gt;-o&lt;i&gt;formatname&lt;/i&gt;&lt;/code&gt; を使用すると、異なるクラス名プレフィックスの末尾にそのフォーマット名（大文字と小文字が異なる）を追加することにより、ロード可能なクラスを検索するだけです。</target>
        </trans-unit>
        <trans-unit id="9e4b01265a71898dfb9f81df9b68ddce9ce51346" translate="yes" xml:space="preserve">
          <source>This specifies that you want the HTML output to go into the current directory.</source>
          <target state="translated">これは、HTML出力をカレントディレクトリに移動させたい場合に指定します。</target>
        </trans-unit>
        <trans-unit id="2ae7a3e343e7bbeb0dfb1ab04a69a9932581a88b" translate="yes" xml:space="preserve">
          <source>This specifies that you want the HTML output to go into the directory 'somedir'. (This can be an absolute or relative path, it doesn't matter.)</source>
          <target state="translated">これは、HTML出力を'somedir'ディレクトリに移動させたいことを指定します。(これは絶対パスでも相対パスでも構いません。)</target>
        </trans-unit>
        <trans-unit id="e7729b553095fc163c271a3e43dbeb5e583f17f6" translate="yes" xml:space="preserve">
          <source>This specifies that you want the dirs &quot;somedir&quot;, &quot;someother&quot;, and &quot;also&quot; scanned, just as if you'd passed the arrayref &lt;code&gt;[qw( somedir someother also)]&lt;/code&gt; . Note that a &quot;:&quot;-separator is normal under Unix, but Under MSWin, you'll need &lt;code&gt;'somedir;someother;also'&lt;/code&gt; instead, since the pathsep on MSWin is &quot;;&quot; instead of &quot;:&quot;. (And</source>
          <target state="translated">これは、arrayref &lt;code&gt;[qw( somedir someother also)]&lt;/code&gt; 渡した場合と同じように、dirs &quot;somedir&quot;、 &quot;someother&quot;、および &quot;also&quot;もスキャンすることを指定します。&quot;：&quot;区切り文字はUnixでは通常ですが &lt;code&gt;'somedir;someother;also'&lt;/code&gt; では、MSWinのパスセップが &quot;;&quot;であるため、代わりに'somedir; someother; also'が必要になることに注意してください。の代わりに &quot;：&quot;。（そして</target>
        </trans-unit>
        <trans-unit id="4d5774ca5649a7d9fa31c36d1f9fa10a02babb34" translate="yes" xml:space="preserve">
          <source>This specifies that you want the dirs &quot;somedir&quot;, &quot;someother&quot;, and &quot;also&quot; scanned, just as if you'd passed the arrayref &lt;code&gt;[qw( somedir someother also)]&lt;/code&gt;. Note that a &quot;:&quot;-separator is normal under Unix, but Under MSWin, you'll need &lt;code&gt;'somedir;someother;also'&lt;/code&gt; instead, since the pathsep on MSWin is &quot;;&quot; instead of &quot;:&quot;. (And</source>
          <target state="translated">これは、arrayref &lt;code&gt;[qw( somedir someother also)]&lt;/code&gt; 渡した場合と同様に、dirs &quot;somedir&quot;、 &quot;someother&quot;、および &quot;also&quot;をスキャンすることを指定します。「：」-区切り文字はUnixでは正常ですが &lt;code&gt;'somedir;someother;also'&lt;/code&gt; では、MSWinのpathsepが「;」であるため、代わりに「somedir; someother; also」が必要になることに注意してください。の代わりに &quot;：&quot;。（そして</target>
        </trans-unit>
        <trans-unit id="b8852ab4d60e276583c1dd4292c015bb068208e6" translate="yes" xml:space="preserve">
          <source>This specifies the module that you want to try using for formatting the pod. The class must at least provide a &lt;code&gt;parse_from_file&lt;/code&gt; method. For example: &lt;code&gt;perldoc -MPod::Perldoc::ToChecker&lt;/code&gt; .</source>
          <target state="translated">これは、ポッドのフォーマットに使用するモジュールを指定します。クラスは少なくとも &lt;code&gt;parse_from_file&lt;/code&gt; メソッドを提供する必要があります。例： &lt;code&gt;perldoc -MPod::Perldoc::ToChecker&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9860d4fcf1674e2b5833d10a9182c9c5be14d26" translate="yes" xml:space="preserve">
          <source>This specifies the module that you want to try using for formatting the pod. The class must at least provide a &lt;code&gt;parse_from_file&lt;/code&gt; method. For example: &lt;code&gt;perldoc -MPod::Perldoc::ToChecker&lt;/code&gt;.</source>
          <target state="translated">これは、ポッドのフォーマットに使用するモジュールを指定します。クラスは、少なくとも &lt;code&gt;parse_from_file&lt;/code&gt; メソッドを提供する必要があります。例： &lt;code&gt;perldoc -MPod::Perldoc::ToChecker&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be95e643e0441d56be0f4bdb53c658cbf47d5fc4" translate="yes" xml:space="preserve">
          <source>This specifies what string should be put at the beginning of the contents page. The default is a string more or less like this:</source>
          <target state="translated">これは、コンテンツページの先頭にどのような文字列を置くかを指定します。デフォルトは以下のような文字列です。</target>
        </trans-unit>
        <trans-unit id="9c8f94ea33d23c19ce77204a84bf9dc0e745ad73" translate="yes" xml:space="preserve">
          <source>This specifies what string should be put at the end of the contents page. The default is a string more or less like this:</source>
          <target state="translated">これは、コンテンツページの最後にどのような文字列を置くかを指定します。デフォルトは以下のような文字列です。</target>
        </trans-unit>
        <trans-unit id="6917d9958e46c59dbadffa0d75ffc8ead9eeb027" translate="yes" xml:space="preserve">
          <source>This specifies where to find a YAML file of test scheduling rules. If not provided, it looks for a default file to use. It first checks for a file given in the &lt;code&gt;HARNESS_RULESFILE&lt;/code&gt; environment variable, then it checks for</source>
          <target state="translated">これは、テストスケジュールルールのYAMLファイルの場所を指定します。指定しない場合は、使用するデフォルトのファイルを探します。最初に &lt;code&gt;HARNESS_RULESFILE&lt;/code&gt; 環境変数で指定されたファイルをチェックし、次に</target>
        </trans-unit>
        <trans-unit id="ad18b67d60ebc32fa32a162a7cf995a9a7c75509" translate="yes" xml:space="preserve">
          <source>This stack stores the values that regular perl code is operating on, usually intermediate values of expressions within a statement. The stack itself is formed of an array of SV pointers.</source>
          <target state="translated">このスタックは、通常のPerlコードが操作している値、通常は文の中の式の中間値を格納します。スタック自体は SV ポインタの配列で形成されています。</target>
        </trans-unit>
        <trans-unit id="c702c584a5b241344dd398527ce50b4bfbe9b63e" translate="yes" xml:space="preserve">
          <source>This stage is controlled by the macro &lt;code&gt;SIZE_ONLY&lt;/code&gt; being set.</source>
          <target state="translated">このステージは、設定されるマクロ &lt;code&gt;SIZE_ONLY&lt;/code&gt; によって制御されます。</target>
        </trans-unit>
        <trans-unit id="bad4c7bd6149d53fef7284ef08f67b09b3206bd8" translate="yes" xml:space="preserve">
          <source>This statement is not a legal contract. This statement is not a legal document in any way, shape, or form. Perl is distributed under the GNU Public License and under the Artistic License; those are the precise legal terms. This statement isn't about the law or licenses. It's about community, mutual respect, trust, and good-faith cooperation.</source>
          <target state="translated">本声明は法的契約ではありません。この声明は、いかなる方法、形、形式においても法的文書ではありません。PerlはGNUパブリック・ライセンスと芸術的ライセンスの下で配布されています。この声明は法律やライセンスについてのものではありません。コミュニティ、相互尊重、信頼、誠意ある協力についてです。</target>
        </trans-unit>
        <trans-unit id="5a98c55935426becf715b954b892501f79db080b" translate="yes" xml:space="preserve">
          <source>This statement should at least appear in the README file. You may also wish to include it in a Copying file and your source files. Remember to include the other words in addition to the Copyright.</source>
          <target state="translated">この記述は、少なくともREADMEファイルに記載されているはずです。また、コピーファイルやソースファイルにも含めるとよいでしょう。また、Copyright以外の文言も忘れずに入れてください。</target>
        </trans-unit>
        <trans-unit id="5584a0e56dfda5fbec4748cd6a50bc455909922d" translate="yes" xml:space="preserve">
          <source>This step is listed for completeness only. Since it does not change semantics, details of this step are not documented and are subject to change without notice. This step is performed over the finite automaton that was generated during the previous pass.</source>
          <target state="translated">このステップは完全性を確保するためだけに記載されています。このステップはセマンティクスを変更しないので、このステップの詳細は文書化されておらず、予告なく変更される可能性があります。このステップは、前のパスで生成された有限オートマトンに対して実行されます。</target>
        </trans-unit>
        <trans-unit id="54c5eb8ed193c34bf7512d41b140b26cac84363b" translate="yes" xml:space="preserve">
          <source>This step is the last one for all constructs except regular expressions, which are processed further.</source>
          <target state="translated">このステップは、正規表現以外のすべてのコンストラクタについては最後のステップであり、さらに処理が行われます。</target>
        </trans-unit>
        <trans-unit id="821b4588528e230329db6b553dfd4048a67b80be" translate="yes" xml:space="preserve">
          <source>This still doesn't guarantee that a real person is answering your prompts or reading your output.</source>
          <target state="translated">これでも、本物の人間があなたのプロンプトに答えたり、あなたのアウトプットを読んだりしていることを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="a7c9161f97b6f8900f13bf7304c1db4d0488adaf" translate="yes" xml:space="preserve">
          <source>This stores the number of eval groups in the pattern. This is used for security purposes when embedding compiled regexes into larger patterns with &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、パターン内の評価グループの数を格納します。これは、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 使用して、コンパイルされた正規表現をより大きなパターンに埋め込むときのセキュリティ上の目的で使用されます。</target>
        </trans-unit>
        <trans-unit id="fc862416697ee8a2c0658635a4952465e7e9a208" translate="yes" xml:space="preserve">
          <source>This stores the number of eval groups in the pattern. This is used for security purposes when embedding compiled regexes into larger patterns with &lt;code&gt;qr//&lt;/code&gt;.</source>
          <target state="translated">これにより、評価グループの数がパターンに格納されます。これは、コンパイルされた正規表現を &lt;code&gt;qr//&lt;/code&gt; より大きなパターンに埋め込むときに、セキュリティの目的で使用されます。</target>
        </trans-unit>
        <trans-unit id="fc38633b5aabfda04a32707218d9bef85297337b" translate="yes" xml:space="preserve">
          <source>This strategy can employ a network connection. As such it would be computationally expensive.</source>
          <target state="translated">この戦略は、ネットワーク接続を使用することができます。そのため、計算コストが高くなります。</target>
        </trans-unit>
        <trans-unit id="55b6f7ba63a618224a4b898bcbb27d9706c30d52" translate="yes" xml:space="preserve">
          <source>This string tells Perl to consult the CRTL's internal &lt;code&gt;environ&lt;/code&gt; array of key-value pairs, using</source>
          <target state="translated">この文字列は、次を使用して、キーと値のペアのCRTLの内部 &lt;code&gt;environ&lt;/code&gt; 配列を調べるようにPerlに指示します</target>
        </trans-unit>
        <trans-unit id="7ae6448a0aa9566553b6817c071e02a343cc087d" translate="yes" xml:space="preserve">
          <source>This struct typedef</source>
          <target state="translated">この構造体の typedef</target>
        </trans-unit>
        <trans-unit id="f1bc15138286b1a37e209e8a6243ffb9f2ea5373" translate="yes" xml:space="preserve">
          <source>This structure is used for handling data structures that the regex engine needs to handle specially during a clone or free operation on the compiled product. Each element in the data array has a corresponding element in the what array. During compilation regops that need special structures stored will add an element to each array using the add_data() routine and then store the index in the regop.</source>
          <target state="translated">この構造体は、コンパイルされた製品のクローンやフリー操作の際に正規表現エンジンが特別に処理する必要があるデータ構造を処理するために使用されます。データ配列の各要素は、what配列に対応する要素を持ちます。コンパイル中に、特別な構造体を格納する必要があるレゴップは、add_data()ルーチンを使用して各配列に要素を追加し、そのインデックスをレゴップに格納します。</target>
        </trans-unit>
        <trans-unit id="313e4efa9f1c4a624d38d9de85969d28133dcf4f" translate="yes" xml:space="preserve">
          <source>This stuff if needed to allow me to play with other ways of monitoring the test results.</source>
          <target state="translated">必要に応じて他の方法でテスト結果をモニターして遊ぶことができます。</target>
        </trans-unit>
        <trans-unit id="d78d4b0d4925694b27ab08d1c6e58334dc8e28bc" translate="yes" xml:space="preserve">
          <source>This style of commenting has been largely superseded by the raw, freeform commenting that is allowed with the &lt;code&gt;//x&lt;/code&gt; modifier.</source>
          <target state="translated">このコメントスタイルは、 &lt;code&gt;//x&lt;/code&gt; 修飾子で許可されている生の自由形式のコメントによってほとんど取って代わられました。</target>
        </trans-unit>
        <trans-unit id="057805a7554b8dd392dcf60ed8e3b1750c015cb9" translate="yes" xml:space="preserve">
          <source>This style of commenting has been largely superseded by the raw, freeform commenting that is allowed with the &lt;code&gt;/x&lt;/code&gt; modifier.</source>
          <target state="translated">このスタイルのコメントは、 &lt;code&gt;/x&lt;/code&gt; 修飾子で許可される生の自由形式のコメントに大幅に取って代わられました。</target>
        </trans-unit>
        <trans-unit id="9149446c6e172d289bce208ab7502a726c607dbb" translate="yes" xml:space="preserve">
          <source>This subkey gives the integer</source>
          <target state="translated">このサブキーは整数</target>
        </trans-unit>
        <trans-unit id="97f344b018a57310e7df154cc09c4a4c8ffc8347" translate="yes" xml:space="preserve">
          <source>This subroutine accepts a new style name and three style arguments as above, and creates, registers, and selects the newly named style. It is an error to re-add a style; call set_style_standard() to switch between several styles.</source>
          <target state="translated">本サブルーチンは、上記のように新しいスタイル名と3つのスタイル引数を受け取り、新しく命名されたスタイルを作成、登録、選択します。スタイルを再度追加するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="d4edd10fd3d7f6f2e8552ea6e5bfd25a981a931d" translate="yes" xml:space="preserve">
          <source>This subroutine produces a standard help message, derived from the program's POD section SYNOPSIS using &lt;a href=&quot;../pod/usage&quot;&gt;Pod::Usage&lt;/a&gt;. It takes the same arguments as VersionMessage(). In particular, you cannot tie it directly to an option, e.g.:</source>
          <target state="translated">このサブルーチンは、&lt;a href=&quot;../pod/usage&quot;&gt;Pod :: Usageを使用&lt;/a&gt;してプログラムのPODセクションSYNOPSISから派生した標準のヘルプメッセージを生成します。VersionMessage（）と同じ引数を取ります。特に、次のように直接オプションに関連付けることはできません。</target>
        </trans-unit>
        <trans-unit id="9b889ca4ce29aee9a3861172160f0fc1f9aa54f8" translate="yes" xml:space="preserve">
          <source>This subroutine produces a standard help message, derived from the program's POD section SYNOPSIS using &lt;a href=&quot;Pod::Usage&quot;&gt;Pod::Usage&lt;/a&gt;. It takes the same arguments as VersionMessage(). In particular, you cannot tie it directly to an option, e.g.:</source>
          <target state="translated">このサブルーチンは、&lt;a href=&quot;Pod::Usage&quot;&gt;Pod :: Usageを使用&lt;/a&gt;してプログラムのPODセクションSYNOPSISから派生した標準のヘルプメッセージを生成します。VersionMessage（）と同じ引数を取ります。特に、オプションに直接結び付けることはできません。例：</target>
        </trans-unit>
        <trans-unit id="5689fa040b7fc66f95972afdb83490d423250c81" translate="yes" xml:space="preserve">
          <source>This subroutine provides a standard version message. Its argument can be:</source>
          <target state="translated">本サブルーチンは標準バージョンメッセージを提供します。引数には以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="8ecee5dd8e0a61ddae4c3d45c386aa7954dd0f33" translate="yes" xml:space="preserve">
          <source>This subroutine will add commas to your number:</source>
          <target state="translated">このサブルーチンは、カンマを数字に追加します。</target>
        </trans-unit>
        <trans-unit id="f33530c08d2ea0b801b43fac5cff8bb563110c57" translate="yes" xml:space="preserve">
          <source>This succeeds if the &quot;martian&quot; character GX is in the string, and fails otherwise. If you don't like using (?&amp;lt;!), a zero-width negative look-behind assertion, you can replace (?&amp;lt;![A-Z]) with (?:^|[^A-Z]).</source>
          <target state="translated">これは、「martian」文字GXがストリング内にある場合は成功し、そうでない場合は失敗します。ゼロ幅の否定後読みアサーション（？&amp;lt;！）を使用したくない場合は、（？&amp;lt;！[AZ]）を（？：^ | [^ AZ]）に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="85a98330f72d7fa29e768ec7aa2344fb1a20cbca" translate="yes" xml:space="preserve">
          <source>This suppresses printing of VMS status messages to SYS$OUTPUT and SYS$ERROR if Perl terminates with an error status, and allows programs that are expecting &quot;unix-style&quot; Perl to avoid having to parse VMS error messages. It does not suppress any messages from Perl itself, just the messages generated by DCL after Perl exits. The DCL symbol $STATUS will still have the termination status, but with a high-order bit set:</source>
          <target state="translated">これは、Perlがエラー状態で終了した場合に、SYS$OUTPUTとSYS$ERRORへのVMSステータスメッセージの印刷を抑制し、&quot;unixスタイル &quot;のPerlを期待しているプログラムがVMSエラーメッセージを解析する必要がないようにします。これはPerl自体からのメッセージを抑制するものではなく、Perlが終了した後にDCLによって生成されたメッセージだけを抑制します。DCL シンボル $STATUS は終了ステータスを持ちますが、高次ビットが設定されています。</target>
        </trans-unit>
        <trans-unit id="a73c08f06f0acf42846845d03633aa9b47905a33" translate="yes" xml:space="preserve">
          <source>This surprising autovivification in what does not at first--or even second--glance appear to be an lvalue context may be fixed in a future release.</source>
          <target state="translated">一見、あるいは二見しただけではlvalueコンテキストであるように見えないものでのこの驚くべき自進化は、将来のリリースで修正されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e56b6634af06492105c8150cce8eec38c642722a" translate="yes" xml:space="preserve">
          <source>This switch causes Perl to dump core after compiling your program. You can then in theory take this core dump and turn it into an executable file by using the</source>
          <target state="translated">このスイッチにより、Perl はプログラムをコンパイルした後にコアダンプを行います。その後、理論的には、このコアダンプを実行ファイルに変換するには</target>
        </trans-unit>
        <trans-unit id="cdeac32803cbaac383dc34d3e5d5f188b61766f8" translate="yes" xml:space="preserve">
          <source>This switch really just enables the global &lt;code&gt;$^W&lt;/code&gt; variable; normally, the lexically scoped &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma is preferred. You can disable or promote into fatal errors specific warnings using &lt;code&gt;__WARN__&lt;/code&gt; hooks, as described in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; and &lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;. See also &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; and &lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt;. A fine-grained warning facility is also available if you want to manipulate entire classes of warnings; see &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">このスイッチは、実際にはグローバル &lt;code&gt;$^W&lt;/code&gt; 変数を有効にするだけです。通常、レキシカルスコープの &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマが推奨されます。&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;と&lt;a href=&quot;functions/warn&quot;&gt;warnで&lt;/a&gt;説明されているように、__ &lt;code&gt;__WARN__&lt;/code&gt; フックを使用して、特定の警告を無効にするか、致命的なエラーに昇格させることができます。&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;と&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt;も参照してください。警告のクラス全体を操作したい場合は、きめ細かい警告機能も利用できます。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1eec8c1e53eca861ae72403ed034c71d15de36a4" translate="yes" xml:space="preserve">
          <source>This switch really just enables the global &lt;code&gt;$^W&lt;/code&gt; variable; normally, the lexically scoped &lt;code&gt;use warnings&lt;/code&gt; pragma is preferred. You can disable or promote into fatal errors specific warnings using &lt;code&gt;__WARN__&lt;/code&gt; hooks, as described in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; and &lt;a href=&quot;perlfunc#warn&quot;&gt;&quot;warn&quot; in perlfunc&lt;/a&gt;. See also &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; and &lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt;. A fine-grained warning facility is also available if you want to manipulate entire classes of warnings; see &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">このスイッチは、実際にはグローバル &lt;code&gt;$^W&lt;/code&gt; 変数を有効にするだけです。通常、字句スコープの &lt;code&gt;use warnings&lt;/code&gt; プラグマが推奨されます。&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;および&lt;a href=&quot;perlfunc#warn&quot;&gt;perlfuncの「警告」で&lt;/a&gt;説明されているように、__ &lt;code&gt;__WARN__&lt;/code&gt; フックを使用して、特定の警告を無効にするか、致命的なエラーに昇格させることができます。&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;および&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt;も参照してください。警告のクラス全体を操作する場合は、きめ細かい警告機能も利用できます。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b9aace5953cb75e0bd50c74f57a0b38f9c0103c2" translate="yes" xml:space="preserve">
          <source>This symbol conditionally defines the symbol &lt;code&gt;BSD&lt;/code&gt; when running on a &lt;code&gt;BSD&lt;/code&gt; system.</source>
          <target state="translated">このシンボルは、 &lt;code&gt;BSD&lt;/code&gt; システムで実行するときに条件付きでシンボル &lt;code&gt;BSD&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="9dffb9b12a2139e8c4c666d76c2bbb94b410515d" translate="yes" xml:space="preserve">
          <source>This symbol contains the type of pointer returned by mmap() (and simultaneously the type of the first argument). It can be &lt;code&gt;void *&lt;/code&gt; or &lt;code&gt;caddr_t&lt;/code&gt; .</source>
          <target state="translated">このシンボルには、mmap（）によって返されるポインターのタイプ（および同時に最初の引数のタイプ）が含まれています。 &lt;code&gt;void *&lt;/code&gt; または &lt;code&gt;caddr_t&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="82fb35656fbf4e4b9cf3733e209ae82b04049909" translate="yes" xml:space="preserve">
          <source>This symbol contains the type of pointer returned by mmap() (and simultaneously the type of the first argument). It can be &lt;code&gt;void *&lt;/code&gt; or &lt;code&gt;caddr_t&lt;/code&gt;.</source>
          <target state="translated">この記号には、mmap（）によって返されるポインターのタイプ（および同時に最初の引数のタイプ）が含まれます。 &lt;code&gt;void *&lt;/code&gt; または &lt;code&gt;caddr_t&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="e78cc593a5e3d5f9580ef534ee09e8fe0d641140" translate="yes" xml:space="preserve">
          <source>This symbol contains the type of pointer returned by shmat(). It can be &lt;code&gt;void *&lt;/code&gt; or &lt;code&gt;char *&lt;/code&gt; .</source>
          <target state="translated">このシンボルには、shmat（）によって返されるポインターのタイプが含まれています。 &lt;code&gt;void *&lt;/code&gt; または &lt;code&gt;char *&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="784f8163b2c96f5e1ad2d33b1877166fe69ae941" translate="yes" xml:space="preserve">
          <source>This symbol contains the type of pointer returned by shmat(). It can be &lt;code&gt;void *&lt;/code&gt; or &lt;code&gt;char *&lt;/code&gt;.</source>
          <target state="translated">この記号には、shmat（）によって返されるポインターのタイプが含まれています。 &lt;code&gt;void *&lt;/code&gt; または &lt;code&gt;char *&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="584f3ba36a4f3dda7bd8acb2eea24bb10daa748c" translate="yes" xml:space="preserve">
          <source>This symbol is defined if using the &lt;code&gt;FILE_ptr&lt;/code&gt; macro as an lvalue to increase the pointer by n has the side effect of decreasing the value of File_cnt(fp) by n.</source>
          <target state="translated">このシンボルは、 &lt;code&gt;FILE_ptr&lt;/code&gt; マクロをlvalueとして使用してポインターをnずつ増やす場合、File_cnt（fp）の値をnだけ減らすという副作用がある場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="0683919acfce603ad7685e97943788fb4e37c119" translate="yes" xml:space="preserve">
          <source>This symbol is defined if using the &lt;code&gt;FILE_ptr&lt;/code&gt; macro as an lvalue to increase the pointer by n leaves File_cnt(fp) unchanged.</source>
          <target state="translated">このシンボルは、 &lt;code&gt;FILE_ptr&lt;/code&gt; マクロを左辺値として使用してポインターをnずつ増やす場合に定義され、File_cnt（fp）は変更されません。</target>
        </trans-unit>
        <trans-unit id="93f9dcbec7fb63d67f75a0e1d4dc9ae41d2b59f2" translate="yes" xml:space="preserve">
          <source>This symbol is set to &lt;code&gt;struct direct&lt;/code&gt; or &lt;code&gt;struct dirent&lt;/code&gt; depending on whether dirent is available or not. You should use this pseudo type to portably declare your directory entries.</source>
          <target state="translated">このシンボルは、direntが使用可能かどうかに応じて、 &lt;code&gt;struct direct&lt;/code&gt; または &lt;code&gt;struct dirent&lt;/code&gt; に設定されます。この疑似タイプを使用して、ディレクトリエントリを移植可能に宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac5221df55c0b6f88cbdccf1d492a80ec8b042ec" translate="yes" xml:space="preserve">
          <source>This symbol reflects the patchlevel, if available. Will usually come from the</source>
          <target state="translated">このシンボルはパッチレベルを反映しています。通常は</target>
        </trans-unit>
        <trans-unit id="b709a76faa1011cf3f1c524bd59100484a2a8c2a" translate="yes" xml:space="preserve">
          <source>This symbol will be defined if the C compiler supports fpos64_t.</source>
          <target state="translated">このシンボルは、Cコンパイラがfpos64_tをサポートしている場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="343c9a95f0e1882d7b8de9c8d965312cb38ddb59" translate="yes" xml:space="preserve">
          <source>This symbol will be defined if the C compiler supports int64_t.</source>
          <target state="translated">このシンボルは、Cコンパイラがint64_tをサポートしている場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="9fabec6c07d2b2eb93287e97cce2db59d9d91ab9" translate="yes" xml:space="preserve">
          <source>This symbol will be defined if the C compiler supports off64_t.</source>
          <target state="translated">このシンボルは、Cコンパイラがoff64_tをサポートしている場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="425b3d025cac3f927d48be352caec0255a6ff1f6" translate="yes" xml:space="preserve">
          <source>This symbol will be defined if the C compiler supports ptrdiff_t.</source>
          <target state="translated">このシンボルは、C コンパイラが ptrdiff_t をサポートしている場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="8b08c311a150e9da2b658a2599a4ffb33ccacd56" translate="yes" xml:space="preserve">
          <source>This symbol will be defined if the C compiler supports socklen_t.</source>
          <target state="translated">このシンボルは、C コンパイラが socklen_t をサポートしている場合に定義されます。</target>
        </trans-unit>
        <trans-unit id="025aea88f0880f5a01a7cfa41a1296fe3bb5e473" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, indicates that the malloc_good_size routine is available for use.</source>
          <target state="translated">このシンボルが定義されている場合、malloc_good_size ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="8a656f9000aaa7b4a0b80166141d60895ed70146" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, indicates that the malloc_size routine is available for use.</source>
          <target state="translated">このシンボルが定義されている場合、malloc_size ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="9f16a25b173530b121560b8b39634ea26912b006" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, indicates that the system provides a prototype for the modfl() function. Otherwise, it is up to the program to supply one. C99 says it should be long double modfl(long double, long double *);</source>
          <target state="translated">このシンボルが定義されている場合、システムが modfl()関数のプロトタイプを提供していることを示します。そうでなければ、それを提供するかどうかはプログラム次第です。C99ではlong double modfl(long double,long double *)となっています。</target>
        </trans-unit>
        <trans-unit id="46fd1ea7339001ddcefcaaf1e70c3783b77303d2" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, indicates that the system stores the variable argument list datatype, va_list, in a format that cannot be copied by simple assignment, so that some other means must be used when copying is required. As such systems vary in their provision (or non-provision) of copying mechanisms,</source>
          <target state="translated">このシンボルが定義されている場合、システムが変数の引数リストのデータ型であるva_listを単純な代入ではコピーできない形式で格納していることを示しています。このように、システムはコピー機構の提供(または提供しない)に違いがあります。</target>
        </trans-unit>
        <trans-unit id="33cfc6c8458868fdba1853ad63d6a5ab248c80dd" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, indicates that we can use _NSGetExecutablePath and realpath to get a full path for the executable, and hence convert $^X to an absolute path.</source>
          <target state="translated">このシンボルが定義されている場合、_NSGetExecutablePath と realpath を使用して実行ファイルのフルパスを取得し、$^X を絶対パスに変換できることを示します。</target>
        </trans-unit>
        <trans-unit id="c755fed5c388f41a69a9c083b151ea18f5a79b60" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, indicates to the C program that it should include &amp;lt;xlocale.h&amp;gt; to get uselocale() and its friends</source>
          <target state="translated">このシンボルは、定義されている場合、uselocale（）とそのフレンドを取得するために&amp;lt;xlocale.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="46cca9096a2b0dd91e445763521373111ae6cf7d" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, tells how many mantissa bits there are in double precision floating point format. Note that this is usually &lt;code&gt;DBL_MANT_DIG&lt;/code&gt; minus one, since with the standard &lt;code&gt;IEEE&lt;/code&gt; 754 formats &lt;code&gt;DBL_MANT_DIG&lt;/code&gt; includes the implicit bit which doesn't really exist.</source>
          <target state="translated">この記号は、定義されている場合、倍精度浮動小数点形式の仮数ビットの数を示します。これが通常であることに注意してください &lt;code&gt;DBL_MANT_DIG&lt;/code&gt; 標準であるため、マイナス1 &lt;code&gt;IEEE&lt;/code&gt; 754形式 &lt;code&gt;DBL_MANT_DIG&lt;/code&gt; が本当に存在していない暗黙のビットを含みます。</target>
        </trans-unit>
        <trans-unit id="60cda7b3100613ca1663cb55bf36b335f38c04e0" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, tells how many mantissa bits there are in long double precision floating point format. Note that this can be &lt;code&gt;LDBL_MANT_DIG&lt;/code&gt; minus one, since &lt;code&gt;LDBL_MANT_DIG&lt;/code&gt; can include the &lt;code&gt;IEEE&lt;/code&gt; 754 implicit bit. The common x86-style 80-bit long double does not have an implicit bit.</source>
          <target state="translated">この記号は、定義されている場合、長い倍精度浮動小数点形式の仮数ビットの数を示します。これができることに注意してください &lt;code&gt;LDBL_MANT_DIG&lt;/code&gt; いるので、マイナス1 &lt;code&gt;LDBL_MANT_DIG&lt;/code&gt; を含むことができ、 &lt;code&gt;IEEE&lt;/code&gt; 754暗黙のビットを。一般的なx86スタイルの80ビットlongdoubleには、暗黙的なビットはありません。</target>
        </trans-unit>
        <trans-unit id="1e5579cd2141da02375bbc1afc9cdf3e216d16eb" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, tells that fflush(&lt;code&gt;NULL&lt;/code&gt; ) correctly flushes all pending stdio output without side effects. In particular, on some platforms calling fflush(&lt;code&gt;NULL&lt;/code&gt; ) *still* corrupts &lt;code&gt;STDIN&lt;/code&gt; if it is a pipe.</source>
          <target state="translated">このシンボルが定義されている場合、fflush（ &lt;code&gt;NULL&lt;/code&gt; ）は、保留中のすべてのstdio出力を副作用なしに正しくフラッシュすることを示します。特に、一部のプラットフォームでは、fflush（ &lt;code&gt;NULL&lt;/code&gt; ）を呼び出すと、パイプである場合でも &lt;code&gt;STDIN&lt;/code&gt; が破壊されます。</target>
        </trans-unit>
        <trans-unit id="864f27e3d5797754ededc663f882621f2b6e62f1" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, tells that fflush(&lt;code&gt;NULL&lt;/code&gt;) correctly flushes all pending stdio output without side effects. In particular, on some platforms calling fflush(&lt;code&gt;NULL&lt;/code&gt;) *still* corrupts &lt;code&gt;STDIN&lt;/code&gt; if it is a pipe.</source>
          <target state="translated">このシンボルは、定義されている場合、fflush（ &lt;code&gt;NULL&lt;/code&gt; ）が副作用なしにすべての保留中のstdio出力を正しくフラッシュすることを示します。特に、一部のプラットフォームでは、fflush（ &lt;code&gt;NULL&lt;/code&gt; ）を呼び出すと、 &lt;code&gt;STDIN&lt;/code&gt; がパイプの場合は*それでも*破損します。</target>
        </trans-unit>
        <trans-unit id="345492b736fde856a18832ea228dc15b7f57e1fd" translate="yes" xml:space="preserve">
          <source>This symbol, if defined, tells that to flush all pending stdio output one must loop through all the stdio file handles stored in an array and fflush them. Note that if fflushNULL is defined, fflushall will not even be probed for and will be left undefined.</source>
          <target state="translated">このシンボルが定義されている場合、保留中のすべての stdio 出力をフラッシュするためには、配列に格納されているすべての stdio ファイルハンドルをループして、それらをフラッシュしなければならないことを教えてくれます。fflushNULL が定義されている場合、fflushall はプローブされず未定義のままになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dcd9bfb79795353183cc954075073576d42a4a96" translate="yes" xml:space="preserve">
          <source>This syntax can be used with any class or object method:</source>
          <target state="translated">この構文は、任意のクラスまたはオブジェクトメソッドで使用できます。</target>
        </trans-unit>
        <trans-unit id="361a88cbd3ef11a7c4b058ea6f65a1768cf1bf06" translate="yes" xml:space="preserve">
          <source>This syntax make the caret a special character inside a bracketed character class, but only if it is the first character of the class. So if you want the caret as one of the characters to match, either escape the caret or else don't list it first.</source>
          <target state="translated">この構文は、カレットをカッコ付き文字クラスの中の特殊文字にしますが、カレットがクラスの最初の文字である場合に限ります。そのため、キャレットをマッチする文字の一つにしたい場合は、キャレットをエスケープするか、キャレットを最初にリストアップしないようにします。</target>
        </trans-unit>
        <trans-unit id="cf8882c6e41ea0e436011545b6eac42846ae64e6" translate="yes" xml:space="preserve">
          <source>This syntax must be enabled with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'postderef'&lt;/code&gt; . It is experimental, and will warn by default unless &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings
'experimental::postderef'&lt;/code&gt; is in effect.</source>
          <target state="translated">この構文は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'postderef'&lt;/code&gt; で有効にする必要があります。これは実験的なものであり、 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'experimental::postderef'&lt;/code&gt; &lt;a href=&quot;functions/no&quot;&gt;という&lt;/a&gt;警告が有効でない限り、デフォルトで警告します。</target>
        </trans-unit>
        <trans-unit id="2448d5ee0ab20cace7d0d694356cb8b018b6fff7" translate="yes" xml:space="preserve">
          <source>This syntax must be enabled with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'refaliasing'&lt;/code&gt; . It is experimental, and will warn by default unless &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings
'experimental::refaliasing'&lt;/code&gt; is in effect.</source>
          <target state="translated">この構文は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'refaliasing'&lt;/code&gt; で有効にする必要があります。これは実験的なものであり、 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'experimental::refaliasing'&lt;/code&gt; &lt;a href=&quot;functions/no&quot;&gt;という&lt;/a&gt;警告が有効でない限り、デフォルトで警告します。</target>
        </trans-unit>
        <trans-unit id="287e0462bd1d909a19c1388821cda96b1374549b" translate="yes" xml:space="preserve">
          <source>This syntax must be enabled with &lt;code&gt;use feature 'refaliasing'&lt;/code&gt;. It is experimental, and will warn by default unless &lt;code&gt;no warnings 'experimental::refaliasing'&lt;/code&gt; is in effect.</source>
          <target state="translated">この構文は、 &lt;code&gt;use feature 'refaliasing'&lt;/code&gt; で有効にする必要があります。これは実験的なものであり &lt;code&gt;no warnings 'experimental::refaliasing'&lt;/code&gt; が有効になっていない限り、デフォルトで警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="17f3dce1b8ffb69288b5e7233eedf50e51bf6d28" translate="yes" xml:space="preserve">
          <source>This table should give some indication on the relative speed of different algorithms. It is sorted by throughput based on a benchmark done with of some implementations of this API:</source>
          <target state="translated">この表は、異なるアルゴリズムの相対的な速度を示すものです。この表は、この API のいくつかの実装で行われたベンチマークに基づいて、 スループットでソートされています。</target>
        </trans-unit>
        <trans-unit id="dd4da486347f5d466977ce9a1a1aa8289c5632b1" translate="yes" xml:space="preserve">
          <source>This table summarizes the mapping of the encodings set up by the &lt;code&gt;Encode::Locale&lt;/code&gt; module:</source>
          <target state="translated">この表は、 &lt;code&gt;Encode::Locale&lt;/code&gt; モジュールによって設定されたエンコーディングのマッピングをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="61e7d00a447b322e0b6281e41be210174353561f" translate="yes" xml:space="preserve">
          <source>This tag holds groups of assorted specialist opcodes that don't warrant having optags defined for them.</source>
          <target state="translated">このタグは、オプタグを定義する必要がない専門家のオプコードをまとめて保持しています。</target>
        </trans-unit>
        <trans-unit id="4b596b3ecff7c84a2d9f652cda2f444e71a7c9fa" translate="yes" xml:space="preserve">
          <source>This tag holds opcodes related to loading modules and getting information about calling environment and args.</source>
          <target state="translated">このタグには、モジュールの読み込みや呼び出し環境や引数の情報を取得するためのオペコードが格納されています。</target>
        </trans-unit>
        <trans-unit id="04ae009bf5132dad193828814ac61d5405735292" translate="yes" xml:space="preserve">
          <source>This tag is simply a bucket for opcodes that are unlikely to be used via a tag name but need to be tagged for completeness and documentation.</source>
          <target state="translated">このタグは、タグ名を介して使用される可能性は低いが、完全性と文書化のためにタグ付けが必要なオペコードのための単純なバケツです。</target>
        </trans-unit>
        <trans-unit id="2f05cedd800de4070129a2009cffd984beb3db08" translate="yes" xml:space="preserve">
          <source>This takes a list of operator names and returns the corresponding list of operator descriptions.</source>
          <target state="translated">これは、演算子名のリストを受け取り、対応する演算子の説明のリストを返します。</target>
        </trans-unit>
        <trans-unit id="7c7d2a6226efbfa63a2425be94ed3ca13dcfd261" translate="yes" xml:space="preserve">
          <source>This takes a list of strings (which are presumed to be language-tags; strings that aren't, are ignored); and after each one, this function inserts super-ordinate forms that don't already appear in the list. The original list, plus these insertions, is returned.</source>
          <target state="translated">この関数は,文字列のリスト(言語タグであると推定されますが,言語タグでない文字列は無視されます)を受け取り,それぞれのリストの後に,リストに既に存在しない超従属形を挿入します.元のリストにこれらの挿入を加えたものが返されます.</target>
        </trans-unit>
        <trans-unit id="13fd8ee50911015c2027466ceb16f127d689e9d2" translate="yes" xml:space="preserve">
          <source>This takes a locale name (like &quot;en&quot;, &quot;en_US&quot;, or &quot;en_US.ISO8859-1&quot;) and maps it to a language tag. If it's not mappable (as with, notably, &quot;C&quot; and &quot;POSIX&quot;), this returns empty-list in a list context, or undef in a scalar context.</source>
          <target state="translated">これはロケール名 (例えば &quot;en&quot;,&quot;en_US&quot;,&quot;en_US.ISO8859-1&quot;)を受け取り、それを言語タグにマッピングします。(特に &quot;C&quot; や &quot;POSIX&quot; のように)マッピングできない場合は、リストコンテキストでは空リストを、 スカラコンテキストでは undef を返します。</target>
        </trans-unit>
        <trans-unit id="bec8c5f2b922f1fda3abe6ef42f1ed85d0f41b3d" translate="yes" xml:space="preserve">
          <source>This takes an optional parameter, the name of a .packlist. If the file exists, it will be opened and the contents of the file will be read. The new() method returns a reference to a hash. This hash holds an entry for each line in the .packlist. In the case of old-style .packlists, the value associated with each key is undef. In the case of new-style .packlists, the value associated with each key is a hash containing the key=value pairs following the filename in the .packlist.</source>
          <target state="translated">これはオプションのパラメータで、.packlistの名前を取ります。ファイルが存在する場合は、そのファイルがオープンされ、ファイルの内容が読み込まれます。new()メソッドは、ハッシュへの参照を返します。このハッシュは .packlist の各行のエントリを保持します。古いスタイルの .packlists の場合、各キーに関連付けられた値は undef です。新しいスタイルの .packlists の場合、各キーに関連付けられた値は、.packlist のファイル名の後に続く key=value のペアを含むハッシュとなります。</target>
        </trans-unit>
        <trans-unit id="cc773e12adc99441c781ca39ab744dcff4457a5a" translate="yes" xml:space="preserve">
          <source>This takes an optional parameter, the name of the .packlist to be read. If no file is specified, the .packlist specified to new() will be read. If the .packlist does not exist, Carp::croak will be called.</source>
          <target state="translated">これはオプションのパラメータで、読み込む.packlistの名前を指定します。ファイルが指定されていない場合は、new()で指定した .packlist が読み込まれます。.packlist が存在しない場合は、Carp::croak が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1a1bc9e2453dd25ae8b25a05301cb1b80e688d4f" translate="yes" xml:space="preserve">
          <source>This takes an optional parameter, the name of the .packlist to be written. If no file is specified, the .packlist specified to new() will be overwritten.</source>
          <target state="translated">これはオプションのパラメータで、書き込まれる.packlistの名前を取ります。ファイルが指定されていない場合は、new()で指定された .packlist が上書きされます。</target>
        </trans-unit>
        <trans-unit id="71c865c7274d3c7e5bfe698effd4f04214f7cd15" translate="yes" xml:space="preserve">
          <source>This takes name/value pairs that effect how the test is run.</source>
          <target state="translated">これは、テストの実行方法に影響を与える名前と値のペアを取ります。</target>
        </trans-unit>
        <trans-unit id="cc76b10f19749554379a021ff3eedaa58c818a23" translate="yes" xml:space="preserve">
          <source>This takes one mandatory parameter, the name of a module. It checks that all the files listed in the modules .packlist actually exist, and returns a list of any missing files. If an optional second argument which evaluates to true is given any missing files will be removed from the .packlist</source>
          <target state="translated">これは、モジュールの名前という一つの必須パラメータを取ります。これは、モジュールの .packlist にリストされているすべてのファイルが実際に存在するかどうかをチェックし、 不足しているファイルのリストを返します。オプションの第二引数にtrueを指定すると、不足しているファイルは.packlistから削除されます。</target>
        </trans-unit>
        <trans-unit id="5b5d51a829067c0f74043220e1f7dc0a082fd9a1" translate="yes" xml:space="preserve">
          <source>This takes one mandatory parameter, the name of a module. It returns a list of all the directories from the package. Additional parameters are allowed. The first is one of the strings &quot;prog&quot;, &quot;doc&quot; or &quot;all&quot;, to select either just program directories, just manual directories or all directories. The remaining parameters are a list of directories. The directories returned will be restricted to those under the specified directories. This method returns only the leaf directories that contain files from the specified module.</source>
          <target state="translated">これは必須のパラメータであるモジュール名を受け取ります。パッケージ内のすべてのディレクトリのリストを返します。追加のパラメータを指定することができます。最初のパラメータは、&quot;prog&quot;、&quot;doc&quot;、&quot;all &quot;のいずれかの文字列で、プログラムディレクトリのみ、マニュアルディレクトリのみ、またはすべてのディレクトリのいずれかを選択します。残りのパラメータはディレクトリのリストです。返されるディレクトリは、指定されたディレクトリの下にあるものに制限されます。このメソッドは、指定されたモジュールのファイルを含むリーフディレクトリのみを返します。</target>
        </trans-unit>
        <trans-unit id="d2af5c7a635840c9a764106b51edcb4ae7965f15" translate="yes" xml:space="preserve">
          <source>This takes one mandatory parameter, the name of a module. It returns a list of all the filenames from the package. To obtain a list of core perl files, use the module name 'Perl'. Additional parameters are allowed. The first is one of the strings &quot;prog&quot;, &quot;doc&quot; or &quot;all&quot;, to select either just program files, just manual files or all files. The remaining parameters are a list of directories. The filenames returned will be restricted to those under the specified directories.</source>
          <target state="translated">これは必須のパラメータであるモジュール名を受け取ります。パッケージのすべてのファイル名のリストを返します。コアの perl ファイルのリストを取得するには、モジュール名 'Perl' を使用します。追加のパラメータを指定することができます。最初のパラメータは &quot;prog&quot;、&quot;doc&quot;、&quot;all &quot;のいずれかの文字列で、プログラムファイルのみ、マニュアルファイルのみ、またはすべてのファイルを選択します。残りのパラメータはディレクトリのリストです。返されるファイル名は、指定されたディレクトリの下にあるものに制限されます。</target>
        </trans-unit>
        <trans-unit id="c87f6895af9c38d5c250f2c66fe4725760f823f0" translate="yes" xml:space="preserve">
          <source>This takes optional named parameters. Without parameters, this searches for all the installed .packlists on the system using information from &lt;code&gt;%Config::Config&lt;/code&gt; and the default module search paths &lt;code&gt;@INC&lt;/code&gt; . The packlists are read using the &lt;a href=&quot;packlist&quot;&gt;ExtUtils::Packlist&lt;/a&gt; module.</source>
          <target state="translated">これはオプションの名前付きパラメーターを取ります。パラメータがない場合、これは &lt;code&gt;%Config::Config&lt;/code&gt; からの情報とデフォルトのモジュール検索パス &lt;code&gt;@INC&lt;/code&gt; を使用して、システムにインストールされているすべての.packlistsを検索します。パックリストは、&lt;a href=&quot;packlist&quot;&gt;ExtUtils :: Packlist&lt;/a&gt;モジュールを使用して読み取られます。</target>
        </trans-unit>
        <trans-unit id="af5e8e4c803265793609442c474430cf073a9f84" translate="yes" xml:space="preserve">
          <source>This takes optional named parameters. Without parameters, this searches for all the installed .packlists on the system using information from &lt;code&gt;%Config::Config&lt;/code&gt; and the default module search paths &lt;code&gt;@INC&lt;/code&gt;. The packlists are read using the &lt;a href=&quot;ExtUtils::Packlist&quot;&gt;ExtUtils::Packlist&lt;/a&gt; module.</source>
          <target state="translated">これは、オプションの名前付きパラメーターを取ります。パラメータがない場合、これは &lt;code&gt;%Config::Config&lt;/code&gt; からの情報とデフォルトのモジュール検索パス &lt;code&gt;@INC&lt;/code&gt; を使用して、システムにインストールされているすべての.packlistを検索します。パックリストは、&lt;a href=&quot;ExtUtils::Packlist&quot;&gt;ExtUtils :: Packlist&lt;/a&gt;モジュールを使用して読み取られます。</target>
        </trans-unit>
        <trans-unit id="ac00ded61272ff3715863e3d3dc5ed285ce52be5" translate="yes" xml:space="preserve">
          <source>This takes the hashref from &lt;code&gt;facet_data()&lt;/code&gt; and blesses each facet into the proper &lt;code&gt;Test2::EventFacet::*&lt;/code&gt; subclass. If no class can be found for any given facet it will be passed along unchanged.</source>
          <target state="translated">これにより、 &lt;code&gt;facet_data()&lt;/code&gt; からhashrefが取得され、各ファセットが適切な &lt;code&gt;Test2::EventFacet::*&lt;/code&gt; サブクラスに祝福されます。特定のファセットのクラスが見つからない場合は、変更されずに渡されます。</target>
        </trans-unit>
        <trans-unit id="0811a32d0bc5998774816ef12efb4252ce7381da" translate="yes" xml:space="preserve">
          <source>This talk of parameters and arbitrary complexity is just another way to say that an entry in a phrasebook is what in a programming language would be called a &quot;function&quot;. Just so you don't miss it, this is the crux of this article:</source>
          <target state="translated">このパラメータと任意の複雑さの話は、フレーズブックのエントリがプログラミング言語では「関数」と呼ばれるものだということを言いたいだけの別の方法です。見逃さないように、これがこの記事の核心です。</target>
        </trans-unit>
        <trans-unit id="9a03ab8b368c68d278641fea23e27727f8dbba74" translate="yes" xml:space="preserve">
          <source>This target is stubbed out. Not sure why.</source>
          <target state="translated">このターゲットはスタブアウトしています。理由は不明</target>
        </trans-unit>
        <trans-unit id="fab4c4b22d474c11e9a11868afc03c97140845f1" translate="yes" xml:space="preserve">
          <source>This technique is most useful when you have a project that uses a lot of third-party modules. You can define all your possible hints in one-place. This can even be in a sub-class of autodie. For example:</source>
          <target state="translated">このテクニックは、サードパーティ製のモジュールを多く使用するプロジェクトがある場合に最も便利です。可能性のあるすべてのヒントを一箇所で定義することができます。これは autodie のサブクラスにもできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f1ca50a85da91c16a0a908f36c57ff992ef7c02c" translate="yes" xml:space="preserve">
          <source>This technique of separation of the glue part from the workhorse part has obvious tradeoffs: if you want to change a Perl interface, you need to change two places in your code. However, it removes a lot of clutter, and makes the workhorse part independent from idiosyncrasies of Perl calling convention. (In fact, there is nothing Perl-specific in the above description, a different version of &lt;b&gt;xsubpp&lt;/b&gt; might have translated this to TCL glue or Python glue as well.)</source>
          <target state="translated">接着剤部分を主力部分から分離するこの手法には、明らかなトレードオフがあります。Perlインターフェースを変更したい場合は、コードの2つの場所を変更する必要があります。しかし、それは多くの混乱を取り除き、主力部分をPerl呼び出し規約の特異性から独立させます。（実際、上記の説明にはPerl固有のものは何もありません。異なるバージョンの&lt;b&gt;xsubpp&lt;/b&gt;がこれをTCLグルーまたはPythonグルーにも変換した可能性があります。）</target>
        </trans-unit>
        <trans-unit id="579494abf777c1edad219e4e3e72f24bade80f1c" translate="yes" xml:space="preserve">
          <source>This technique was popular for a while (and was recommended in Damian Conway's</source>
          <target state="translated">このテクニックは一時期流行っていました(ダミアン・コンウェイの</target>
        </trans-unit>
        <trans-unit id="5e8f5ce6d67f7bf4b479db2dfff968206c152d0a" translate="yes" xml:space="preserve">
          <source>This tells the compiler to use integer operations from here to the end of the enclosing BLOCK. On many machines, this doesn't matter a great deal for most computations, but on those without floating point hardware, it can make a big difference in performance.</source>
          <target state="translated">これはコンパイラに、ここから囲んだブロックの最後まで整数演算を使用するように指示します。多くのマシンでは、これはほとんどの計算では重要ではありませんが、浮動小数点ハードウェアがないマシンでは、パフォーマンスに大きな違いが出てきます。</target>
        </trans-unit>
        <trans-unit id="661943b2ace4b2cbd0e7c782744a83d712cb4bd1" translate="yes" xml:space="preserve">
          <source>This tells the parser that you accept additional formatting codes, beyond just the standard ones (I B C L F S X, plus the two weird ones you don't actually see in the parse tree, Z and E). For example, to also accept codes &quot;N&quot;, &quot;R&quot;, and &quot;W&quot;:</source>
          <target state="translated">これは、パーサに、標準のフォーマットコード(I B C L F S X)に加えて、パースツリーには表示されない2つの奇妙なコード(ZとE)を受け入れていることを伝えます。例えば、コード &quot;N&quot;,&quot;R&quot;,&quot;W&quot; も受け入れます。</target>
        </trans-unit>
        <trans-unit id="5c227c573c801b67ab844d5a781ca2d861b5ad11" translate="yes" xml:space="preserve">
          <source>This test harness is the same as &lt;a href=&quot;../harness&quot;&gt;TAP::Harness&lt;/a&gt;, but test results are output in color. Passing tests are printed in green. Failing tests are in red. Skipped tests are blue on a white background and TODO tests are printed in white.</source>
          <target state="translated">このテストハーネスは&lt;a href=&quot;../harness&quot;&gt;TAP :: Harness&lt;/a&gt;と同じですが、テスト結果はカラーで出力されます。合格したテストは緑色で印刷されます。失敗したテストは赤字です。スキップされたテストは白地に青で表示され、TODOテストは白で印刷されます。</target>
        </trans-unit>
        <trans-unit id="5aeeba01de86baa7b8993aef4f94514bdbb7f537" translate="yes" xml:space="preserve">
          <source>This test harness is the same as &lt;a href=&quot;TAP::Harness&quot;&gt;TAP::Harness&lt;/a&gt;, but test results are output in color. Passing tests are printed in green. Failing tests are in red. Skipped tests are blue on a white background and TODO tests are printed in white.</source>
          <target state="translated">このテストハーネスは&lt;a href=&quot;TAP::Harness&quot;&gt;TAP :: Harness&lt;/a&gt;と同じですが、テスト結果はカラーで出力されます。合格したテストは緑色で印刷されます。失敗したテストは赤で表示されます。スキップされたテストは白地に青で、TODOテストは白で印刷されます。</target>
        </trans-unit>
        <trans-unit id="56c5da5399251bb5e1db8f624c5839bd6c16417b" translate="yes" xml:space="preserve">
          <source>This test not coming out ok could indicate that you have in fact installed a bLuRfle.pm module or that the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; &quot; require \&quot;$module_name.pm\&quot;; &quot;&lt;/code&gt; test may give misleading results with your installation of perl. If yours is the latter case then please let the author know.</source>
          <target state="translated">このテストがうまくいかない場合は、実際にbLuRfle.pmモジュールがインストールされているか、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; &quot; require \&quot;$module_name.pm\&quot;; &quot;&lt;/code&gt; テストがperlのインストールで誤解を招く結果をもたらす可能性があることを示している可能性があります。あなたが後者の場合は、作者に知らせてください。</target>
        </trans-unit>
        <trans-unit id="f1a47c3ed2c720af6cbbff7d8f1fba90981d6cf7" translate="yes" xml:space="preserve">
          <source>This test not coming out ok could indicate that you have in fact installed a bLuRfle.pm module or that the &lt;code&gt;eval &quot; require \&quot;$module_name.pm\&quot;; &quot;&lt;/code&gt; test may give misleading results with your installation of perl. If yours is the latter case then please let the author know.</source>
          <target state="translated">このテストがうまくいかない場合は、実際にbLuRfle.pmモジュールをインストールしたか、 &lt;code&gt;eval &quot; require \&quot;$module_name.pm\&quot;; &quot;&lt;/code&gt; テストでperlのインストールで誤解を招く結果が生じる可能性があります。後者の場合は、作者に知らせてください。</target>
        </trans-unit>
        <trans-unit id="d7779eb97d1704eb5b38f4af625c19d04da87929" translate="yes" xml:space="preserve">
          <source>This third program fails to run because &lt;code&gt;$&amp;amp;&lt;/code&gt; is tainted: it is the result of a match involving &lt;code&gt;\w&lt;/code&gt; while &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;$&amp;amp;&lt;/code&gt; が汚染されているため、この3番目のプログラムは実行に失敗します。これは、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;が有効なときに、 &lt;code&gt;\w&lt;/code&gt; を含む一致の結果です。</target>
        </trans-unit>
        <trans-unit id="d68ad58afc351b6be0d95c3d8369561b57239182" translate="yes" xml:space="preserve">
          <source>This third program fails to run because &lt;code&gt;$&amp;amp;&lt;/code&gt; is tainted: it is the result of a match involving &lt;code&gt;\w&lt;/code&gt; while &lt;code&gt;use locale&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;$&amp;amp;&lt;/code&gt; が汚染されているため、この3番目のプログラムは実行に失敗します。これは、 &lt;code&gt;use locale&lt;/code&gt; が有効なときに &lt;code&gt;\w&lt;/code&gt; が関係する一致の結果です。</target>
        </trans-unit>
        <trans-unit id="1dae3d33db186460fb270be827c017862ed6f4c9" translate="yes" xml:space="preserve">
          <source>This thread can change the locale all it wants and it won't affect any other thread, except any that also have been switched to the global locale. This means that a multi-threaded application can have a single thread using an alien library without a problem; but no more than a single thread can be so-occupied. Bad results likely will happen.</source>
          <target state="translated">このスレッドは好きなだけロケールを変更することができ、グローバルロケールに切り替えられたスレッド以外の他のスレッドには影響を与えません。つまり、マルチスレッドのアプリケーションでは、1 つのスレッドがエイリアンライブラリを使用していても問題はありませんが、 1 つのスレッドを占有することはできません。悪い結果になる可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="a3af2bc97cd9f37316fc3da9caf4914a2a7462bf" translate="yes" xml:space="preserve">
          <source>This threshold can be changed from 100, by recompiling the</source>
          <target state="translated">このしきい値は</target>
        </trans-unit>
        <trans-unit id="e43eef0f764abc7110894418223db6c40d531f70" translate="yes" xml:space="preserve">
          <source>This throws an exception at the frame (filename and line number where errors should be reported).</source>
          <target state="translated">これは、フレーム(エラーが報告されるべきファイル名と行番号)に例外をスローします。</target>
        </trans-unit>
        <trans-unit id="2a47e3515c81e527144a0c9b60fab0d504885832" translate="yes" xml:space="preserve">
          <source>This tie class has chosen to return an error rather than raising an exception if its constructor should fail. While this is how dbmopen() works, other classes may well not wish to be so forgiving. It checks the global variable &lt;code&gt;$^W&lt;/code&gt; to see whether to emit a bit of noise anyway.</source>
          <target state="translated">このタイクラスは、コンストラクタが失敗した場合に例外を発生させるのではなく、エラーを返すことを選択しました。これがdbmopen（）の動作方法ですが、他のクラスはそれほど寛容になりたくないでしょう。グローバル変数 &lt;code&gt;$^W&lt;/code&gt; をチェックして、とにかく少しノイズを放出するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="65215d2823f33c6578d2c1ee584a26f404ed972a" translate="yes" xml:space="preserve">
          <source>This time only two filters have been used -- we only need to manipulate the contents of the key, so it wasn't necessary to install any value filters.</source>
          <target state="translated">今回は2つのフィルターを使用しただけで、キーの内容を操作するだけなので、値のフィルターを設置する必要はありませんでした。</target>
        </trans-unit>
        <trans-unit id="ce475e5b88de267f8c35364dcce4ac0349ad1b9f" translate="yes" xml:space="preserve">
          <source>This time only two filters have been used; we only need to manipulate the contents of the key, so it wasn't necessary to install any value filters.</source>
          <target state="translated">今回は2つのフィルターを使用しただけで、キーの内容を操作するだけなので、値フィルターを設置する必要はありませんでした。</target>
        </trans-unit>
        <trans-unit id="33080a774d1683a847960294bf99870a610d6d24" translate="yes" xml:space="preserve">
          <source>This time we get the right answer:</source>
          <target state="translated">今回は正解が出ました。</target>
        </trans-unit>
        <trans-unit id="de132ff4c4de4a8dae8876bdea9d65e3845d2e34" translate="yes" xml:space="preserve">
          <source>This time we have got all the key/value pairs, including the multiple values associated with the key &lt;code&gt;Wall&lt;/code&gt; .</source>
          <target state="translated">今回は、キー &lt;code&gt;Wall&lt;/code&gt; に関連付けられた複数の値を含む、すべてのキーと値のペアを取得しました。</target>
        </trans-unit>
        <trans-unit id="dc46887a2d3ce4b75ca14523b77c1875e5b5f923" translate="yes" xml:space="preserve">
          <source>This time we have got all the key/value pairs, including the multiple values associated with the key &lt;code&gt;Wall&lt;/code&gt;.</source>
          <target state="translated">今回は、キー &lt;code&gt;Wall&lt;/code&gt; に関連付けられた複数の値を含む、すべてのキーと値のペアを取得しました。</target>
        </trans-unit>
        <trans-unit id="549daec07a3febc80783db85efb5cb76a1300cf5" translate="yes" xml:space="preserve">
          <source>This time we've decided to blow up (raise an exception) if the renice fails--there's no place for us to return an error otherwise, and it's probably the right thing to do.</source>
          <target state="translated">今回は、レニースが失敗した場合には吹き飛ばす(例外を発生させる)ことにしました--そうしないとエラーを返す場所がないので、そうするのが正しいかもしれません。</target>
        </trans-unit>
        <trans-unit id="e8220bb1a44581d2e3ca1f66709b3d28e4dca5ce" translate="yes" xml:space="preserve">
          <source>This time whenever &lt;code&gt;CallSavedSub1&lt;/code&gt; gets called it will execute the Perl subroutine &lt;code&gt;joe&lt;/code&gt; (assuming it exists) rather than &lt;code&gt;fred&lt;/code&gt; as was originally requested in the call to &lt;code&gt;SaveSub1&lt;/code&gt; .</source>
          <target state="translated">今回は &lt;code&gt;CallSavedSub1&lt;/code&gt; が呼び出されるたびに、SaveSub1の呼び出しで最初に要求された &lt;code&gt;fred&lt;/code&gt; ではなく、Perlサブルーチン &lt;code&gt;joe&lt;/code&gt; （存在する場合）を &lt;code&gt;SaveSub1&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9585799a0bb025c0fc2a5fb468e2e0510621cfe4" translate="yes" xml:space="preserve">
          <source>This time whenever &lt;code&gt;CallSavedSub1&lt;/code&gt; gets called it will execute the Perl subroutine &lt;code&gt;joe&lt;/code&gt; (assuming it exists) rather than &lt;code&gt;fred&lt;/code&gt; as was originally requested in the call to &lt;code&gt;SaveSub1&lt;/code&gt;.</source>
          <target state="translated">いつでもこの時間 &lt;code&gt;CallSavedSub1&lt;/code&gt; はそれがPerlのサブルーチン実行されます呼び出される &lt;code&gt;joe&lt;/code&gt; がするのではなく（それが存在すると仮定） &lt;code&gt;fred&lt;/code&gt; 元々の呼び出しで要求されたよう &lt;code&gt;SaveSub1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f97f664a05e05836532f171c31abc8294dc4fa2e" translate="yes" xml:space="preserve">
          <source>This timeout prevents CPAN from hanging when trying to parse a pathologically coded $VERSION from a module.</source>
          <target state="translated">このタイムアウトは、モジュールから病理学的にコード化された$VERSIONを解析しようとしたときにCPANがハングアップするのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="818cb77ceebe03d7349ba167c3cce5e948a3bb9b" translate="yes" xml:space="preserve">
          <source>This tip has been brought to you by Nick Ing-Simmons and Stas Bekman.</source>
          <target state="translated">このヒントはNick Ing-SimmonsとStas Bekmanによってもたらされました。</target>
        </trans-unit>
        <trans-unit id="d27a6342f3cf97c393debaf5d2880083dadfb79d" translate="yes" xml:space="preserve">
          <source>This toggle lets you turn off the abort logic for the hub. When this is toggled to true &lt;b&gt;you&lt;/b&gt; are responsible for ensuring no additional events are generated.</source>
          <target state="translated">このトグルを使用すると、ハブのアボートロジックをオフにできます。これをtrueに切り替えられたとき&lt;b&gt;、あなたは&lt;/b&gt;追加のイベントが生成されません確実にする責任があります。</target>
        </trans-unit>
        <trans-unit id="1ad35df16ed4d238965d8000164af0c76d6be400" translate="yes" xml:space="preserve">
          <source>This token is only available under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; or the &quot;current_sub&quot; feature. See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;.</source>
          <target state="translated">このトークンは、下にのみ使用できます &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; または「current_sub」機能。&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="35716269721e35aed3ed9931d09baf8957f4a7d8" translate="yes" xml:space="preserve">
          <source>This token is only available under &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; or the &quot;current_sub&quot; feature. See &lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt;.</source>
          <target state="translated">このトークンは、下にのみ使用できます &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; または「current_sub」機能。&lt;a href=&quot;../feature&quot;&gt;機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f8782e676913565f7b95bd8b849e9d4513a4cab5" translate="yes" xml:space="preserve">
          <source>This token is only available under &lt;code&gt;use v5.16&lt;/code&gt; or the &lt;a href=&quot;feature#The-%27current_sub%27-feature&quot;&gt;&lt;code&gt;&quot;current_sub&quot;&lt;/code&gt; feature&lt;/a&gt;. See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;.</source>
          <target state="translated">このトークンは、 &lt;code&gt;use v5.16&lt;/code&gt; または&lt;a href=&quot;feature#The-%27current_sub%27-feature&quot;&gt; &lt;code&gt;&quot;current_sub&quot;&lt;/code&gt; 機能を&lt;/a&gt;使用している場合にのみ使用できます。&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9a442863544084141507fc6b9cc253372f4528af" translate="yes" xml:space="preserve">
          <source>This token tells &lt;b&gt;sigtrap&lt;/b&gt; to install handlers for all subsequently listed signals. This is the default behavior.</source>
          <target state="translated">このトークンは、後にリストされているすべてのシグナルのハンドラーをインストールするように&lt;b&gt;sigtrap&lt;/b&gt;に指示します。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="563416938874462a6a3a7e213b018a4bbf3569b4" translate="yes" xml:space="preserve">
          <source>This token tells &lt;b&gt;sigtrap&lt;/b&gt; to install handlers only for subsequently listed signals which aren't already trapped or ignored.</source>
          <target state="translated">このトークンは、&lt;b&gt;sigtrapに&lt;/b&gt;、まだトラップされていないか無視されていない、後でリストされているシグナルに対してのみハンドラーをインストールするように指示します。</target>
        </trans-unit>
        <trans-unit id="0c3e36d66e90a38e2c172eb5380aff092f3d8aff" translate="yes" xml:space="preserve">
          <source>This tool is most useful when you want to return the value you get from calling a function that needs to see the current context:</source>
          <target state="translated">このツールは、現在のコンテキストを見る必要がある関数を呼び出して得た値を返したい場合に最も便利です。</target>
        </trans-unit>
        <trans-unit id="dbef2365e83f0b66bb2b5afb7a58a64a398a46f8" translate="yes" xml:space="preserve">
          <source>This tool isn't appropriate for reporting bugs in any version prior to Perl 5.0.</source>
          <target state="translated">このツールはPerl 5.0以前のバージョンのバグ報告には適していません。</target>
        </trans-unit>
        <trans-unit id="5b1f48f2009eaba595386dfcdaf2125e0a97a308" translate="yes" xml:space="preserve">
          <source>This tool will hide a context for the provided block of code. This means any tools run inside the block will get a completely new context if they acquire one. The new context will be inherited by tools nested below the one that acquired it.</source>
          <target state="translated">このツールは、指定されたコードブロックのコンテキストを非表示にします。つまり、ブロック内で実行されているツールがコンテキストを取得した場合、全く新しいコンテキストを取得することになります。新しいコンテキストは、それを取得したツールの下にあるネストしたツールに継承されます。</target>
        </trans-unit>
        <trans-unit id="88cd36d63ba450353c54dc7196ff92a040ad99b2" translate="yes" xml:space="preserve">
          <source>This translates as &quot;set &lt;code&gt;TARG&lt;/code&gt; to 10, push a pointer to &lt;code&gt;TARG&lt;/code&gt; onto the stack; set &lt;code&gt;TARG&lt;/code&gt; to 20, push a pointer to &lt;code&gt;TARG&lt;/code&gt; onto the stack&quot;. At the end of the operation, the stack does not contain the values 10 and 20, but actually contains two pointers to &lt;code&gt;TARG&lt;/code&gt; , which we have set to 20.</source>
          <target state="translated">これは、変換「セット &lt;code&gt;TARG&lt;/code&gt; 10へのポインタプッシュ &lt;code&gt;TARG&lt;/code&gt; をスタックに、設定 &lt;code&gt;TARG&lt;/code&gt; を 20に、へのポインタプッシュ &lt;code&gt;TARG&lt;/code&gt; をスタックに」。操作の最後に、スタックには値10と20が含まれていませんが、実際には、20に設定した &lt;code&gt;TARG&lt;/code&gt; への2つのポインターが含まれています。</target>
        </trans-unit>
        <trans-unit id="b327555f1c252fbe229268edcab000a9e602b1a9" translate="yes" xml:space="preserve">
          <source>This translates as &quot;set &lt;code&gt;TARG&lt;/code&gt; to 10, push a pointer to &lt;code&gt;TARG&lt;/code&gt; onto the stack; set &lt;code&gt;TARG&lt;/code&gt; to 20, push a pointer to &lt;code&gt;TARG&lt;/code&gt; onto the stack&quot;. At the end of the operation, the stack does not contain the values 10 and 20, but actually contains two pointers to &lt;code&gt;TARG&lt;/code&gt;, which we have set to 20.</source>
          <target state="translated">これは、「 &lt;code&gt;TARG&lt;/code&gt; を10に設定し、TARGへのポインターをスタックにプッシュします &lt;code&gt;TARG&lt;/code&gt; を20に設定すると、 &lt;code&gt;TARG&lt;/code&gt; へのポインターをスタックにプッシュします」と &lt;code&gt;TARG&lt;/code&gt; されます。操作の最後に、スタックには値10と20は含まれていませんが、実際には、20に設定した &lt;code&gt;TARG&lt;/code&gt; への2つのポインターが含まれています。</target>
        </trans-unit>
        <trans-unit id="ba94eb90171beedcd9bec6456a8694f27844f356" translate="yes" xml:space="preserve">
          <source>This transport contacts a remote SMTP server over TCP. It optionally uses SSL and can authenticate to the server via SASL.</source>
          <target state="translated">このトランスポートは、TCPを介してリモートSMTPサーバーに連絡する。オプションでSSLを使用し、SASLを介してサーバに認証することができます。</target>
        </trans-unit>
        <trans-unit id="e40f9d55c5ee498252f4f99087dcea386954252b" translate="yes" xml:space="preserve">
          <source>This transport contacts a remote SMTP server over TCP. It optionally uses TLS or SSL and can authenticate to the server via SASL.</source>
          <target state="translated">このトランスポートは、TCPを介してリモートSMTPサーバーに連絡する。オプションでTLSまたはSSLを使用し、SASL経由でサーバを認証することができます。</target>
        </trans-unit>
        <trans-unit id="c5f84e699be8b82423bdf0c8efc71c8b6cffc002" translate="yes" xml:space="preserve">
          <source>This tree has 5 nodes (one per &lt;code&gt;TYPE&lt;/code&gt; specifier), only 3 of them are not optimized away (one per number in the left column). The immediate children of the given node correspond to &lt;code&gt;{}&lt;/code&gt; pairs on the same level of indentation, thus this listing corresponds to the tree:</source>
          <target state="translated">このツリーには5つのノード（ &lt;code&gt;TYPE&lt;/code&gt; 指定子ごとに1つ）があり、そのうち3つだけが最適化されていません（左側の列の数値ごとに1つ）。指定されたノードの直接の子は、同じレベルのインデントの &lt;code&gt;{}&lt;/code&gt; ペアに対応するため、このリストはツリーに対応します。</target>
        </trans-unit>
        <trans-unit id="10bdb23da270b66c79801ca69744614d31056771" translate="yes" xml:space="preserve">
          <source>This tries loading classes based on the language-tags you give (like &lt;code&gt;(&quot;en-US&quot;, &quot;sk&quot;, &quot;kon&quot;, &quot;es-MX&quot;, &quot;ja&quot;, &quot;i-klingon&quot;)&lt;/code&gt; , and for the first class that succeeds, returns YourProjClass::</source>
          <target state="translated">これは、指定した言語タグに基づいてクラスをロードしようとします（ &lt;code&gt;(&quot;en-US&quot;, &quot;sk&quot;, &quot;kon&quot;, &quot;es-MX&quot;, &quot;ja&quot;, &quot;i-klingon&quot;)&lt;/code&gt; 。最初の成功したクラスは、YourProjClass ::を返します</target>
        </trans-unit>
        <trans-unit id="babb439fd1f2025fd1dc37240e930742af072a8e" translate="yes" xml:space="preserve">
          <source>This tries loading classes based on the language-tags you give (like &lt;code&gt;(&quot;en-US&quot;, &quot;sk&quot;, &quot;kon&quot;, &quot;es-MX&quot;, &quot;ja&quot;, &quot;i-klingon&quot;)&lt;/code&gt;, and for the first class that succeeds, returns YourProjClass::</source>
          <target state="translated">これは、指定した言語タグ &lt;code&gt;(&quot;en-US&quot;, &quot;sk&quot;, &quot;kon&quot;, &quot;es-MX&quot;, &quot;ja&quot;, &quot;i-klingon&quot;)&lt;/code&gt; に基づいてクラスをロードしようとします。成功したクラスは、YourProjClassを返します::</target>
        </trans-unit>
        <trans-unit id="2350736fbbdb09c3e03af560458218f7c39a0887" translate="yes" xml:space="preserve">
          <source>This tries to get the title string out of $parser, by getting some tokens, and scanning them for the title, and then ungetting them so that you can process the token-stream from the beginning.</source>
          <target state="translated">これは、いくつかのトークンを取得して、それをスキャンしてタイトルの文字列を $parser から取得しようとし、トークンストリームを最初から処理できるように、それらをアンゲットします。</target>
        </trans-unit>
        <trans-unit id="a7a0a5100eb7d660c79e344156a06e5739ae3e99" translate="yes" xml:space="preserve">
          <source>This turns</source>
          <target state="translated">これは</target>
        </trans-unit>
        <trans-unit id="2c43b29369b0643df2b475c636f7ba4a7760104c" translate="yes" xml:space="preserve">
          <source>This tutorial assumes that the make program that Perl is configured to use is called &lt;code&gt;make&lt;/code&gt; . Instead of running &quot;make&quot; in the examples that follow, you may have to substitute whatever make program Perl has been configured to use. Running &lt;b&gt;perl -V:make&lt;/b&gt; should tell you what it is.</source>
          <target state="translated">このチュートリアルでは、Perlが使用するように設定されていることをmakeプログラムが呼び出されることを前提として &lt;code&gt;make&lt;/code&gt; 。以下の例で「make」を実行する代わりに、Perlが使用するように構成されているmakeプログラムを置き換える必要がある場合があります。&lt;b&gt;perl -V：makeを&lt;/b&gt;実行すると、それが何であるかがわかります。</target>
        </trans-unit>
        <trans-unit id="99b5d150876f05176f523c02a4521b0203e2d731" translate="yes" xml:space="preserve">
          <source>This tutorial assumes that the make program that Perl is configured to use is called &lt;code&gt;make&lt;/code&gt;. Instead of running &quot;make&quot; in the examples that follow, you may have to substitute whatever make program Perl has been configured to use. Running &lt;b&gt;perl -V:make&lt;/b&gt; should tell you what it is.</source>
          <target state="translated">このチュートリアルでは、Perlが使用するように構成されているmakeプログラムが &lt;code&gt;make&lt;/code&gt; と呼ばれることを前提としています。以下の例で「make」を実行する代わりに、Perlが使用するように構成されているmakeプログラムを置き換える必要がある場合があります。&lt;b&gt;perl -V：makeを&lt;/b&gt;実行すると、それが何であるかがわかります。</target>
        </trans-unit>
        <trans-unit id="8c02c1e1c4554cfc38ab4519576c46376d729f42" translate="yes" xml:space="preserve">
          <source>This tutorial can still be used on such a system. The XSUB build mechanism will check the system and build a dynamically-loadable library if possible, or else a static library and then, optionally, a new statically-linked executable with that static library linked in.</source>
          <target state="translated">このチュートリアルは、そのようなシステムでも使用できます。XSUB のビルド機構はシステムをチェックし、可能であれば動的にロード可能なライブラリをビルドします。</target>
        </trans-unit>
        <trans-unit id="042a6a29ffea342487866bd18b2ff67e8550a4e6" translate="yes" xml:space="preserve">
          <source>This tutorial describes the use of Perl interpreter threads (sometimes referred to as</source>
          <target state="translated">このチュートリアルでは、Perl インタープリタ スレッド (</target>
        </trans-unit>
        <trans-unit id="584c62ddbbc858e85333edcc1d7b6494d833b45b" translate="yes" xml:space="preserve">
          <source>This tutorial flattens the learning curve by discussing regular expression concepts, along with their notation, one at a time and with many examples. The first part of the tutorial will progress from the simplest word searches to the basic regular expression concepts. If you master the first part, you will have all the tools needed to solve about 98% of your needs. The second part of the tutorial is for those comfortable with the basics and hungry for more power tools. It discusses the more advanced regular expression operators and introduces the latest cutting-edge innovations.</source>
          <target state="translated">このチュートリアルでは、正規表現の概念とその表記法を、一度に一つずつ、そして多くの例を挙げて説明することで、学習曲線をフラットにします。チュートリアルの最初の部分では、最も簡単な単語検索から基本的な正規表現の概念へと進んでいきます。最初のパートをマスターすれば、あなたのニーズの約98%を解決するために必要なすべてのツールを手に入れることができます。チュートリアルの第2部は、基本的なことに慣れていて、より強力なツールを求めている人のためのものです。このチュートリアルでは、より高度な正規表現演算子について議論し、最新の最先端の技術革新を紹介します。</target>
        </trans-unit>
        <trans-unit id="09418d1e9dc1ccd649181b2ae1d0e9cc30227030" translate="yes" xml:space="preserve">
          <source>This tutorial speaks in rather absolute terms, and provides only a limited view of the wealth of character string related features that Perl has to offer. For most projects, this information will probably suffice.</source>
          <target state="translated">このチュートリアルでは、Perl が提供する豊富な文字列関連の機能についての限定的な見解を提供しています。ほとんどのプロジェクトでは、この情報で十分でしょう。</target>
        </trans-unit>
        <trans-unit id="5a1babab3f5740242709a97dfef0170b83cfd116" translate="yes" xml:space="preserve">
          <source>This tutorial starts with very simple examples and becomes more complex, with each new example adding new features. Certain concepts may not be completely explained until later in the tutorial in order to slowly ease the reader into building extensions.</source>
          <target state="translated">このチュートリアルでは、非常にシンプルな例から始まり、新しい例が増えるごとに新しい機能が追加され、より複雑になっていきます。ある種の概念は、読者が徐々に拡張機能の構築に慣れていくのを助けるために、チュートリアルの後半まで完全に説明されない場合があります。</target>
        </trans-unit>
        <trans-unit id="513743e90a808d724cf722e256c18c6a577aed36" translate="yes" xml:space="preserve">
          <source>This tutorial was written from a Unix point of view. Where I know them to be otherwise different for other platforms (e.g. Win32), I will list them. If you find something that was missed, please let me know.</source>
          <target state="translated">このチュートリアルはUnixの観点から書かれています。他のプラットフォーム (例:Win32)と異なることがわかっている場合は、それらを列挙します。もし見落としているものがあれば、私に知らせてください。</target>
        </trans-unit>
        <trans-unit id="2d3bc7e20dd6d03170372006d4bcd471be2b1a05" translate="yes" xml:space="preserve">
          <source>This tutorial will educate the reader on the steps involved in creating a Perl extension. The reader is assumed to have access to &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; and &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルでは、Perl拡張機能の作成に関連する手順について読者に説明します。読者は&lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;、&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;、&lt;a href=&quot;perlxs&quot;&gt;perlxsに&lt;/a&gt;アクセスできると想定されています。</target>
        </trans-unit>
        <trans-unit id="73d6133ba18859a5eaedd64f01ef459aa33a4f61" translate="yes" xml:space="preserve">
          <source>This ucfirst form of #var generates a tag-value form of itself for display; it converts '#Var' into a 'Var =&amp;gt; #var' style, which is then handled as described above. (Imp-note: #Vars cannot be used for conditional-fills, because the =&amp;gt; #var transform is done after the check for #Var's value).</source>
          <target state="translated">このucfirst形式の#varは、表示用にそれ自体のタグ値形式を生成します。これは、 '＃Var'を 'Var =&amp;gt; #var'スタイルに変換し、上記のように処理されます。（インプノート：#Varの値のチェック後に=&amp;gt; #var変換が行われるため、＃Varは条件付きフィルに使用できません）。</target>
        </trans-unit>
        <trans-unit id="e1c48ccdb02bacfa9c7db277adb42c2586c3c859" translate="yes" xml:space="preserve">
          <source>This unloading is usually necessary when embedding a shared-object perl (e.g. one configured with -Duseshrplib) within a larger application, and the perl interpreter is created and destroyed several times within the lifetime of the application. In this case it is possible that the system dynamic linker will unload and then subsequently reload the shared libperl without relocating any references to it from any files DynaLoaded by the previous incarnation of the interpreter. As a result, any shared objects opened by DynaLoader may point to a now invalid 'ghost' of the libperl shared object, causing apparently random memory corruption and crashes. This behaviour is most commonly seen when using Apache and mod_perl built with the APXS mechanism.</source>
          <target state="translated">このアンロードは通常、共有オブジェクト perl (例えば -Duseshrplib で設定された perl)をより大きなアプリケーション内に埋め込む場合に必要となり、Perl インタプリタはアプリケーションの寿命の間に何度か作成・破棄されます。この場合、システム・ダイナミック・リンカは、インタープリタの前のインカネーションによってDynaLoadedされたファイルから共有されたlibperlへの参照を再配置することなく、アンロードし、その後、共有されたlibperlを再ロードする可能性があります。その結果、DynaLoaderによって開かれた共有オブジェクトは、libperl共有オブジェクトの無効な「ゴースト」を指すことがあり、明らかにランダムなメモリ破壊やクラッシュを引き起こします。この挙動は、APXS メカニズムで構築された Apache や mod_perl を使用している場合に最もよく見られます。</target>
        </trans-unit>
        <trans-unit id="1b13f3deb5370e5675a9d76c565d42ae5d602f71" translate="yes" xml:space="preserve">
          <source>This usage is deprecated, because the behavior is likely to change in a future version of Perl.</source>
          <target state="translated">Perl の将来のバージョンで動作が変更される可能性があるため、この使用法は非推奨です。</target>
        </trans-unit>
        <trans-unit id="f8cc0202ec780bce218b4e5dcccd13c92cdafc61" translate="yes" xml:space="preserve">
          <source>This usage was deprecated and as of Perl 5.32 is no longer allowed.</source>
          <target state="translated">この使用法は非推奨となり、Perl 5.32では許可されなくなりました。</target>
        </trans-unit>
        <trans-unit id="f8628227b2034eb7bb5d1a38319f1096e92570eb" translate="yes" xml:space="preserve">
          <source>This usage was deprecated, and as of Perl 5.32 is no longer allowed, making it possible to change the behavior in the future.</source>
          <target state="translated">この使用法は非推奨となり、Perl 5.32では許可されなくなり、将来的には動作を変更することが可能となりました。</target>
        </trans-unit>
        <trans-unit id="f2bf7571677624aefcaac6c0acb5fa38635561cd" translate="yes" xml:space="preserve">
          <source>This use of &lt;code&gt;my()&lt;/code&gt; in a false conditional has been deprecated since Perl 5.10, and it will become a fatal error in Perl 5.30.</source>
          <target state="translated">誤った条件での &lt;code&gt;my()&lt;/code&gt; のこの使用は、 Perl 5.10以降非推奨になり、Perl5.30では致命的なエラーになります。</target>
        </trans-unit>
        <trans-unit id="dbb7ee3adb793d7785e44f4cd1c475bc562072ff" translate="yes" xml:space="preserve">
          <source>This use of &lt;code&gt;my()&lt;/code&gt; in a false conditional was deprecated beginning in Perl 5.10 and became a fatal error in Perl 5.30.</source>
          <target state="translated">誤った条件での &lt;code&gt;my()&lt;/code&gt; のこの使用は、 Perl 5.10で非推奨になり、Perl5.30で致命的なエラーになりました。</target>
        </trans-unit>
        <trans-unit id="0fa749e21deac96525cb24d3358da4f7fb5f0d24" translate="yes" xml:space="preserve">
          <source>This use of my() in false conditional is no longer allowed</source>
          <target state="translated">false 条件での my()の使用は許可されなくなりました。</target>
        </trans-unit>
        <trans-unit id="d8b6fb62901deb9e84ba258e77b4c4979b396131" translate="yes" xml:space="preserve">
          <source>This used to provide support for the old 5.005 threading module. It now does nothing.</source>
          <target state="translated">これは古い 5.005 スレッディングモジュールのサポートを提供していました。今は何もしていません。</target>
        </trans-unit>
        <trans-unit id="ad74ce7c330e222ac3a23c23df9097ca9cc782c1" translate="yes" xml:space="preserve">
          <source>This uses &lt;code&gt;[...]&lt;/code&gt; notation to create a new anonymous array, and &lt;code&gt;$aref2&lt;/code&gt; is assigned a reference to the new array. The new array is initialized with the contents of the array referred to by &lt;code&gt;$aref1&lt;/code&gt; .</source>
          <target state="translated">これは &lt;code&gt;[...]&lt;/code&gt; 表記を使用して新しい無名配列を作成し、 &lt;code&gt;$aref2&lt;/code&gt; は新しい配列への参照が割り当てられます。新しい配列は、 &lt;code&gt;$aref1&lt;/code&gt; によって参照される配列の内容で初期化されます。</target>
        </trans-unit>
        <trans-unit id="f780e61f5be8b67d8a73b7a70cd2de66ca725d92" translate="yes" xml:space="preserve">
          <source>This uses &lt;code&gt;[...]&lt;/code&gt; notation to create a new anonymous array, and &lt;code&gt;$aref2&lt;/code&gt; is assigned a reference to the new array. The new array is initialized with the contents of the array referred to by &lt;code&gt;$aref1&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;[...]&lt;/code&gt; 表記を使用して新しい匿名配列を作成し、 &lt;code&gt;$aref2&lt;/code&gt; は新しい配列への参照が割り当てられます。新しい配列は、 &lt;code&gt;$aref1&lt;/code&gt; によって参照される配列の内容で初期化されます。</target>
        </trans-unit>
        <trans-unit id="0ec25d0bdb752659175b1040a999aeb2b6d490b8" translate="yes" xml:space="preserve">
          <source>This uses a comment character so that we can distinguish a &lt;code&gt;set&lt;/code&gt; value (from a previous</source>
          <target state="translated">これはコメント文字を使用するので、 &lt;code&gt;set&lt;/code&gt; 値（前の値と</target>
        </trans-unit>
        <trans-unit id="cc1cad67a921e3eb4640eba7ead1b7740937eea5" translate="yes" xml:space="preserve">
          <source>This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt; .</source>
          <target state="translated">これは、 &lt;code&gt;POSIX::open&lt;/code&gt; 呼び出すことによって取得されるようなファイル記述子を使用します。</target>
        </trans-unit>
        <trans-unit id="ef0715f911bf2d7dde414c04ee4f2d77679374e6" translate="yes" xml:space="preserve">
          <source>This uses file descriptors such as those obtained by calling &lt;code&gt;POSIX::open&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;POSIX::open&lt;/code&gt; 呼び出して取得したようなファイル記述子を使用します。</target>
        </trans-unit>
        <trans-unit id="eb8309f8b6f133836961834b1a77c15524062381" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;LIB$FID_TO_NAME&lt;/code&gt; run-time library call to find the name of the primary link to a file, and returns the filename in VMS format. This function is not available on non-VMS systems.</source>
          <target state="translated">これは、 &lt;code&gt;LIB$FID_TO_NAME&lt;/code&gt; ランタイムライブラリ呼び出しを使用してファイルへのプライマリリンクの名前を検索し、ファイル名をVMS形式で返します。この機能は、VMS以外のシステムでは使用できません。</target>
        </trans-unit>
        <trans-unit id="1c7665ba2d9d5783e7fcf462d2624ff87c082afc" translate="yes" xml:space="preserve">
          <source>This uses the git protocol (port 9418).</source>
          <target state="translated">これは、git プロトコル (ポート 9418)を使用しています。</target>
        </trans-unit>
        <trans-unit id="4f46aaaf1565e8957012263096fadaa9a048c4d5" translate="yes" xml:space="preserve">
          <source>This utility allows you to apply pattern matching to &lt;b&gt;the contents&lt;/b&gt; of files contained in a tar archive. You might use this to identify all files in an archive which contain lines matching the specified pattern and either print out the pathnames or extract the files.</source>
          <target state="translated">このユーティリティを使用すると、tarアーカイブに含まれるファイル&lt;b&gt;の内容&lt;/b&gt;にパターンマッチングを適用できます。これを使用して、指定したパターンに一致する行を含むアーカイブ内のすべてのファイルを識別し、パス名を出力するか、ファイルを抽出することができます。</target>
        </trans-unit>
        <trans-unit id="5a9ad1aba7c9a639b483b1f8f929290363dd11bd" translate="yes" xml:space="preserve">
          <source>This utility is designed to write a Makefile for an extension module from a Makefile.PL. It is based on the Makefile.SH model provided by Andy Dougherty and the perl5-porters.</source>
          <target state="translated">このユーティリティは、Makefile.PLから拡張モジュール用のMakefileを書くためのものです。Andy Doughertyによって提供されたMakefile.SHモデルとperl5-portersに基づいています。</target>
        </trans-unit>
        <trans-unit id="b24b7df29646f7c014772e5059f3068df5bbacbd" translate="yes" xml:space="preserve">
          <source>This utility takes a list of libraries in the form &lt;code&gt;-llib1 -llib2
-llib3&lt;/code&gt; and returns lines suitable for inclusion in an extension Makefile. Extra library paths may be included with the form &lt;code&gt;-L/another/path&lt;/code&gt; this will affect the searches for all subsequent libraries.</source>
          <target state="translated">このユーティリティは、 &lt;code&gt;-llib1 -llib2 -llib3&lt;/code&gt; の形式でライブラリのリストを取得し、拡張Makefileに含めるのに適した行を返します。 &lt;code&gt;-L/another/path&lt;/code&gt; という形式で追加のライブラリパスを含めることができます。これは、後続のすべてのライブラリの検索に影響します。</target>
        </trans-unit>
        <trans-unit id="b766c16803f46a0ae895c110a4b6edf915519f91" translate="yes" xml:space="preserve">
          <source>This utility will read *.pl files (given as parameters) and write corresponding *.pm files. The pl2pm utilities does the following:</source>
          <target state="translated">このユーティリティは、(パラメータとして与えられた)*.pl ファイルを読み込み、対応する *.pm ファイルを書き込みます。pl2pm ユーティリティは以下のようなことを行います。</target>
        </trans-unit>
        <trans-unit id="a410c695becbafd5bc2593139ba56b80c63242e8" translate="yes" xml:space="preserve">
          <source>This utility, that comes with the &lt;code&gt;Digest::SHA&lt;/code&gt; module, is used to print or verify SHA checksums.</source>
          <target state="translated">&lt;code&gt;Digest::SHA&lt;/code&gt; モジュールに付属するこのユーティリティは、SHAチェックサムを出力または検証するために使用されます。</target>
        </trans-unit>
        <trans-unit id="3f272981cac4ae61e9e9e8d75fb4dc12762de509" translate="yes" xml:space="preserve">
          <source>This value can be adjusted to reduce security checking if required. The value is only relevant when &lt;code&gt;safe_level&lt;/code&gt; is set to MEDIUM or higher.</source>
          <target state="translated">この値は、必要に応じてセキュリティチェックを減らすために調整できます。この値は、 &lt;code&gt;safe_level&lt;/code&gt; がMEDIUM以上に設定されている場合にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="fa4ff7242b8a2fd67b36df12914e2cc6d1af606d" translate="yes" xml:space="preserve">
          <source>This value can be adjusted to reduce security checking if required. The value is only relevant when C</source>
          <target state="translated">必要に応じて、この値を調整してセキュリティチェックを減らすことができます。この値は、C</target>
        </trans-unit>
        <trans-unit id="cdc136e48e274a6f45986365041835b0a320611a" translate="yes" xml:space="preserve">
          <source>This value may be set when embedding for full cleanup.</source>
          <target state="translated">この値は、フルクリーンアップのためにエンベッディングを行う場合に設定することができます。</target>
        </trans-unit>
        <trans-unit id="7591c615f6c14e41979e1eaadb2f09a869a865a0" translate="yes" xml:space="preserve">
          <source>This value overrides any &lt;code&gt;stack_size&lt;/code&gt; parameter given to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads&lt;/code&gt; . Its primary purpose is to permit setting the per-thread stack size for legacy threaded applications.</source>
          <target state="translated">この値 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads&lt;/code&gt; スレッドを使用するために指定されたすべての &lt;code&gt;stack_size&lt;/code&gt; パラメータを上書きします。その主な目的は、レガシースレッドアプリケーションのスレッドごとのスタックサイズを設定できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="c8d10aaff4c3d6cbb1dc6581ac92ed77de4530c0" translate="yes" xml:space="preserve">
          <source>This value overrides any &lt;code&gt;stack_size&lt;/code&gt; parameter given to &lt;code&gt;use threads&lt;/code&gt;. Its primary purpose is to permit setting the per-thread stack size for legacy threaded applications.</source>
          <target state="translated">この値 &lt;code&gt;use threads&lt;/code&gt; を使用するために指定された &lt;code&gt;stack_size&lt;/code&gt; パラメーターをオーバーライドします。その主な目的は、レガシースレッドアプリケーションのスレッドごとのスタックサイズを設定できるようにすることです。</target>
        </trans-unit>
        <trans-unit id="f89d32d5d5695a0582f22913b8f68fcff2f07a33" translate="yes" xml:space="preserve">
          <source>This variable (and the corresponding &lt;code&gt;array_base&lt;/code&gt; feature and &lt;a href=&quot;arybase&quot;&gt;arybase&lt;/a&gt; module) allowed changing the base for array and string indexing operations.</source>
          <target state="translated">この変数（および対応する &lt;code&gt;array_base&lt;/code&gt; 機能と&lt;a href=&quot;arybase&quot;&gt;arybase&lt;/a&gt;モジュール）により、配列と文字列のインデックス作成操作のベースを変更できました。</target>
        </trans-unit>
        <trans-unit id="41ecf008113019e40a6e54f73ff5a98b48282c9e" translate="yes" xml:space="preserve">
          <source>This variable (default is 1) controls whether to enforce the contents of $^E to start with &lt;code&gt;SYS0003&lt;/code&gt; -like id. If set to 0, then the string value of $^E is what is available from the OS/2 message file. (Some messages in this file have an &lt;code&gt;SYS0003&lt;/code&gt; -like id prepended, some not.)</source>
          <target state="translated">この変数（デフォルトは1）は、$ ^ Eの内容を &lt;code&gt;SYS0003&lt;/code&gt; のようなIDで開始するように強制するかどうかを制御します。0に設定されている場合、$ ^ Eの文字列値は、OS / 2メッセージファイルから取得できるものです。（このファイルの一部のメッセージには、 &lt;code&gt;SYS0003&lt;/code&gt; のようなIDが前に付いているものと、ないものがあります。）</target>
        </trans-unit>
        <trans-unit id="0e88ea105d4b7ad833e8f62738de77591c442f12" translate="yes" xml:space="preserve">
          <source>This variable (default is 1) controls whether to enforce the contents of $^E to start with &lt;code&gt;SYS0003&lt;/code&gt;-like id. If set to 0, then the string value of $^E is what is available from the OS/2 message file. (Some messages in this file have an &lt;code&gt;SYS0003&lt;/code&gt;-like id prepended, some not.)</source>
          <target state="translated">この変数（デフォルトは1）は、$ ^ Eの内容を &lt;code&gt;SYS0003&lt;/code&gt; のようなIDで開始するように強制するかどうかを制御します。0に設定されている場合、$ ^ Eの文字列値は、OS / 2メッセージファイルから入手できる値です。（このファイルの一部のメッセージには、 &lt;code&gt;SYS0003&lt;/code&gt; のようなIDが付加されていますが、そうでないものもあります。）</target>
        </trans-unit>
        <trans-unit id="16732492f2d070676c6f99bbc0efae47b95f7071" translate="yes" xml:space="preserve">
          <source>This variable bears the symbol value to be used during open() or fcntl() to turn on non-blocking I/O for a file descriptor. If you wish to switch between blocking and non-blocking, you may try ioctl(&lt;code&gt;FIOSNBIO&lt;/code&gt; ) instead, but that is only supported by some devices.</source>
          <target state="translated">この変数は、open（）またはfcntl（）でファイル記述子の非ブロッキングI / Oをオンにするために使用されるシンボル値を保持します。ブロッキングとノンブロッキングを切り替えたい場合は、代わりにioctl（ &lt;code&gt;FIOSNBIO&lt;/code&gt; ）を試すことができますが、これは一部のデバイスでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="15ff3c0604e1d75a5342996d8934873f8d50aeb1" translate="yes" xml:space="preserve">
          <source>This variable bears the symbol value to be used during open() or fcntl() to turn on non-blocking I/O for a file descriptor. If you wish to switch between blocking and non-blocking, you may try ioctl(&lt;code&gt;FIOSNBIO&lt;/code&gt;) instead, but that is only supported by some devices.</source>
          <target state="translated">この変数には、ファイル記述子の非ブロッキングI / Oをオンにするためにopen（）またはfcntl（）中に使用されるシンボル値が含まれています。ブロッキングと非ブロッキングを切り替えたい場合は、代わりにioctl（ &lt;code&gt;FIOSNBIO&lt;/code&gt; ）を試すことができますが、これは一部のデバイスでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="cca2eeea3350d961dcaad04aa855c2a1f247bac2" translate="yes" xml:space="preserve">
          <source>This variable bears the symbolic errno code set by read() when no data is present on the file and non-blocking I/O was enabled (otherwise, read() blocks naturally).</source>
          <target state="translated">この変数は、ファイルにデータが存在せず、ノンブロッキングI/Oが有効な場合 (そうでなければ、read()は自然にブロックします)に read()で設定されたシンボリック errno コードを保持します。</target>
        </trans-unit>
        <trans-unit id="248382abe33b16964803e73f6ecfb34faabcc93f" translate="yes" xml:space="preserve">
          <source>This variable can be used to determine whether the Perl interpreter executing a script is in the right range of versions:</source>
          <target state="translated">この変数は、スクリプトを実行するPerlインタープリタのバージョンが正しい範囲にあるかどうかを判断するために使用できます。</target>
        </trans-unit>
        <trans-unit id="dfea1020f3dea68d67242c313286038f4a0d0e35" translate="yes" xml:space="preserve">
          <source>This variable can be used to establish a fallthrough for the cases where nm fails to find a symbol. If usenm is false or usenm is true and mistrustnm is false, this variable has no effect. If usenm is true and mistrustnm is &lt;code&gt;compile&lt;/code&gt; , a test program will be compiled to try to find any symbol that can't be located via nm lookup. If mistrustnm is &lt;code&gt;run&lt;/code&gt; , the test program will be run as well as being compiled.</source>
          <target state="translated">この変数は、nmがシンボルを検出できない場合のフォールスルーを確立するために使用できます。usenmがfalseであるか、usenmがtrueでmistrustnmがfalseの場合、この変数は効果がありません。usenmがtrueで、mistrustnmが &lt;code&gt;compile&lt;/code&gt; の場合、テストプログラムがコンパイルされ、nmルックアップでは見つけられないシンボルを見つけようとします。mistrustnmを &lt;code&gt;run&lt;/code&gt; と、テストプログラムが実行されるだけでなく、コンパイルも行われます。</target>
        </trans-unit>
        <trans-unit id="4b3e9ceee71cdc320b5939b5ceda3cad1b31e64c" translate="yes" xml:space="preserve">
          <source>This variable can be used to establish a fallthrough for the cases where nm fails to find a symbol. If usenm is false or usenm is true and mistrustnm is false, this variable has no effect. If usenm is true and mistrustnm is &lt;code&gt;compile&lt;/code&gt;, a test program will be compiled to try to find any symbol that can't be located via nm lookup. If mistrustnm is &lt;code&gt;run&lt;/code&gt;, the test program will be run as well as being compiled.</source>
          <target state="translated">この変数は、nmがシンボルを見つけられなかった場合のフォールスルーを確立するために使用できます。usenmがfalseの場合、またはusenmがtrueでmistrustnmがfalseの場合、この変数は効果がありません。usenmがtrueで、mistrustnmが &lt;code&gt;compile&lt;/code&gt; 場合、テストプログラムがコンパイルされ、nmルックアップでは見つからないシンボルを見つけようとします。mistrustnmが &lt;code&gt;run&lt;/code&gt; と、テストプログラムが実行され、コンパイルされます。</target>
        </trans-unit>
        <trans-unit id="4b0fbadd8567e78cf31399e6a2260ad4aafcd61e" translate="yes" xml:space="preserve">
          <source>This variable combines api_revision, api_version, and api_subversion in a format such as 5.6.1 (or 5_6_1) suitable for use as a directory name. This is filesystem dependent.</source>
          <target state="translated">この変数は、5.6.1 (または5_6_1)のような形式で api_revision,api_version,api_subversion を組み合わせたもので、ディレクトリ名として使用するのに適しています。これはファイルシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="3a2c3f8de756634885e7def1800fcfd4dd0d57a3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defined &lt;code&gt;PERL_VENDORARCH&lt;/code&gt; .</source>
          <target state="translated">この変数は条件付きで定義された &lt;code&gt;PERL_VENDORARCH&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0b791466461b0141a9f42bfce168d808b632ccd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defined &lt;code&gt;PERL_VENDORARCH&lt;/code&gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PERL_VENDORARCH&lt;/code&gt; を定義しました。</target>
        </trans-unit>
        <trans-unit id="efd929c3d0bcbeeec8636fa669401d4e86c870d3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;ARCHLIB&lt;/code&gt; to hold the pathname of architecture-dependent library files for $package. If $archlib is the same as $privlib, then this is set to undef.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;ARCHLIB&lt;/code&gt; を定義して、$ packageのアーキテクチャー依存のライブラリファイルのパス名を保持します。$ archlibが$ privlibと同じ場合、これはundefに設定されます。</target>
        </trans-unit>
        <trans-unit id="ef97d2a231904adfc4265eba4006701690eed6ca" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;CAN_VAPROTO&lt;/code&gt; on systems supporting prototype declaration of functions with a variable number of arguments. See also prototype.</source>
          <target state="translated">この変数は、可変数の引数を持つ関数のプロトタイプ宣言をサポートするシステムで条件付きで &lt;code&gt;CAN_VAPROTO&lt;/code&gt; を定義します。プロトタイプも参照してください。</target>
        </trans-unit>
        <trans-unit id="980485e36e7b05790618d387e3c7b5f9dffdd4ab" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;CASTNEG&lt;/code&gt; , which indicates whether the C compiler can cast negative float to unsigned.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;CASTNEG&lt;/code&gt; を定義します。これは、Cコンパイラが負の浮動小数点を符号なしにキャストできるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="e6c288a30b9263a34f361a5d921f5d74655c9671" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;CASTNEG&lt;/code&gt;, which indicates whether the C compiler can cast negative float to unsigned.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;CASTNEG&lt;/code&gt; を定義します。これは、Cコンパイラが負のfloatをunsignedにキャストできるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="6a2c21b1fb400d236c7f8b93084483db1894c446" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;CHARVSPRINTF&lt;/code&gt; if this system has vsprintf returning type (char*). The trend seems to be to declare it as &quot;int vsprintf()&quot;.</source>
          <target state="translated">この変数が条件付きで &lt;code&gt;CHARVSPRINTF&lt;/code&gt; を定義するのは、このシステムにvsprintf戻りタイプ（char *）がある場合です。「int vsprintf（）」と宣言する傾向にあるようです。</target>
        </trans-unit>
        <trans-unit id="5078955ce08b58cadcdb20d3c38df82d26ee60ff" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;CTERMID&lt;/code&gt; if ctermid() is available to generate filename for terminal.</source>
          <target state="translated">端末のファイル名を生成するためにctermid（）が使用可能な場合、この変数は条件付きで &lt;code&gt;CTERMID&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="978df228f8d800c08979baf4f0b9bb0fc46ebfa9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;DIRNAMLEN&lt;/code&gt; , which indicates to the C program that the length of directory entry names is provided by a d_namelen field.</source>
          <target state="translated">この変数は &lt;code&gt;DIRNAMLEN&lt;/code&gt; を条件付きで定義します。これは、Cプログラムに対して、ディレクトリエントリ名の長さがd_namelenフィールドによって提供されることを示します。</target>
        </trans-unit>
        <trans-unit id="dc998e2c8c6e574860ee6fbf06818e7c667f7aa2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;DIRNAMLEN&lt;/code&gt;, which indicates to the C program that the length of directory entry names is provided by a d_namelen field.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;DIRNAMLEN&lt;/code&gt; を定義します。これは、ディレクトリエントリ名の長さがd_namelenフィールドによって提供されることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="df3c72fff3ec53eb910b33c4d8de7ba859b22249" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;DLSYM_NEEDS_UNDERSCORE&lt;/code&gt; , which indicates that we need to prepend an underscore to the symbol name before calling dlsym().</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;DLSYM_NEEDS_UNDERSCORE&lt;/code&gt; を定義します。これは、dlsym（）を呼び出す前に、シンボル名の前に下線を付ける必要があることを示しています。</target>
        </trans-unit>
        <trans-unit id="8582344f9c7c22d7833d9ec106477884283a6de7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;DLSYM_NEEDS_UNDERSCORE&lt;/code&gt;, which indicates that we need to prepend an underscore to the symbol name before calling dlsym().</source>
          <target state="translated">この変数は、 &lt;code&gt;DLSYM_NEEDS_UNDERSCORE&lt;/code&gt; を条件付きで定義します。これは、dlsym（）を呼び出す前に、シンボル名の前にアンダースコアを追加する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="49b013eda5d273dde0c71244769fe3ad52ab910f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;EBCDIC&lt;/code&gt; if this system uses &lt;code&gt;EBCDIC&lt;/code&gt; encoding.</source>
          <target state="translated">このシステムが &lt;code&gt;EBCDIC&lt;/code&gt; エンコードを使用する場合、この変数は条件付きで &lt;code&gt;EBCDIC&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="95f5847b07ee6a0574affcb0afba6691ba0cb5dc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;EOF_NONBLOCK&lt;/code&gt; if &lt;code&gt;EOF&lt;/code&gt; can be seen when reading from a non-blocking I/O source.</source>
          <target state="translated">この変数は、非ブロッキングI / Oソースからの読み取り時に &lt;code&gt;EOF&lt;/code&gt; が見られる場合、条件付きで &lt;code&gt;EOF_NONBLOCK&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="0af8dac12168ddb05c87d99076fc3d364dbfc497" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;GRPASSWD&lt;/code&gt; , which indicates that struct group in &amp;lt;grp.h&amp;gt; contains gr_passwd.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;GRPASSWD&lt;/code&gt; を定義します。これは、&amp;lt;grp.h&amp;gt;の構造体グループにgr_passwdが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="cca67ae13cb5b5216b026f087e4c9cd2724e9abd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;GRPASSWD&lt;/code&gt;, which indicates that struct group in &amp;lt;grp.h&amp;gt; contains gr_passwd.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;GRPASSWD&lt;/code&gt; を定義します。これは、&amp;lt;grp.h&amp;gt;の構造体グループにgr_passwdが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="e239460b32f067f0e57a573c2a38cc269c4e8cf6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_DEPRECATED&lt;/code&gt; , which indicates that &lt;code&gt;GCC&lt;/code&gt; can handle the attribute for marking deprecated APIs</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HASATTRIBUTE_DEPRECATED&lt;/code&gt; を定義します。これは、 &lt;code&gt;GCC&lt;/code&gt; が非推奨APIをマークするための属性を処理できることを示します</target>
        </trans-unit>
        <trans-unit id="8a3ce902111f1fb6ddfbb032a62404920f5f0a69" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_DEPRECATED&lt;/code&gt;, which indicates that &lt;code&gt;GCC&lt;/code&gt; can handle the attribute for marking deprecated APIs</source>
          <target state="translated">この変数は、 &lt;code&gt;HASATTRIBUTE_DEPRECATED&lt;/code&gt; を条件付きで定義します。これは、 &lt;code&gt;GCC&lt;/code&gt; が非推奨のAPIをマークするための属性を処理できることを示します。</target>
        </trans-unit>
        <trans-unit id="096a4e7335c9e97171f7b50c60f3c4f1d139650c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_FORMAT&lt;/code&gt; , which indicates the C compiler can check for printf-like formats.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_FORMAT&lt;/code&gt; を定義します。これは、Cコンパイラがprintfのような形式をチェックできることを示します。</target>
        </trans-unit>
        <trans-unit id="f0f60c4dd5eeeaebaa985d1b6354c9a991633b8e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_FORMAT&lt;/code&gt;, which indicates the C compiler can check for printf-like formats.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HASATTRIBUTE_FORMAT&lt;/code&gt; を定義します。これは、Cコンパイラがprintfのような形式をチェックできることを示します。</target>
        </trans-unit>
        <trans-unit id="0fc32aff59b98aa4940aa65546e2ce2f0bae5f6b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_MALLOC&lt;/code&gt; , which indicates the C compiler can understand functions as having malloc-like semantics.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_MALLOC&lt;/code&gt; を定義します。これは、Cコンパイラが関数をmallocのようなセマンティクスを持つものとして理解できることを示します。</target>
        </trans-unit>
        <trans-unit id="bf5374f94e92fd1cc3e01675dd69dfccafafe1cf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_MALLOC&lt;/code&gt;, which indicates the C compiler can understand functions as having malloc-like semantics.</source>
          <target state="translated">この変数は、 &lt;code&gt;HASATTRIBUTE_MALLOC&lt;/code&gt; を条件付きで定義します。これは、Cコンパイラが関数をmallocのようなセマンティクスを持つものとして理解できることを示します。</target>
        </trans-unit>
        <trans-unit id="cc77040e22d8dbd38fd3bdef2b4c807ff2648d0f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_NONNULL&lt;/code&gt; , which indicates that the C compiler can know that certain arguments must not be &lt;code&gt;NULL&lt;/code&gt; , and will check accordingly at compile time.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_NONNULL&lt;/code&gt; を定義します。これは、Cコンパイラが特定の引数が &lt;code&gt;NULL&lt;/code&gt; であってはならないことを認識でき、コンパイル時に適宜チェックすることを示します。</target>
        </trans-unit>
        <trans-unit id="0d008cebd99a9203bb4aed19e68f0fe934a519a6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_NONNULL&lt;/code&gt;, which indicates that the C compiler can know that certain arguments must not be &lt;code&gt;NULL&lt;/code&gt;, and will check accordingly at compile time.</source>
          <target state="translated">この変数は、 &lt;code&gt;HASATTRIBUTE_NONNULL&lt;/code&gt; を条件付きで定義します。これは、Cコンパイラが特定の引数が &lt;code&gt;NULL&lt;/code&gt; であってはならないことを認識でき、コンパイル時にそれに応じてチェックすることを示します。</target>
        </trans-unit>
        <trans-unit id="c1ca1b192eaeeef39ff342721f49f9732f5c25b0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_NORETURN&lt;/code&gt; , which indicates that the C compiler can know that certain functions are guaranteed never to return.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_NORETURN&lt;/code&gt; を定義します。これは、Cコンパイラが特定の関数が決して戻らないことが保証されていることを認識できることを示します。</target>
        </trans-unit>
        <trans-unit id="db7d6ff22150607f2faf6e212132ffd7e2e815da" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_NORETURN&lt;/code&gt;, which indicates that the C compiler can know that certain functions are guaranteed never to return.</source>
          <target state="translated">この変数は、 &lt;code&gt;HASATTRIBUTE_NORETURN&lt;/code&gt; を条件付きで定義します。これは、Cコンパイラーが、特定の関数が決して返されないことが保証されていることを認識できることを示します。</target>
        </trans-unit>
        <trans-unit id="35f0cde07593cb535b92fefc63eb7d81d46fe8bb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_PURE&lt;/code&gt; , which indicates that the C compiler can know that certain functions are &lt;code&gt;pure&lt;/code&gt; functions, meaning that they have no side effects, and only rely on function input</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_PURE&lt;/code&gt; を定義します。これは、Cコンパイラが特定の関数が &lt;code&gt;pure&lt;/code&gt; 関数であることを認識できることを示します。つまり、これらの関数には副作用がなく、関数の入力のみに依存します</target>
        </trans-unit>
        <trans-unit id="17b724553d5b8a923ac88e7dad14f63c4b3879af" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_PURE&lt;/code&gt;, which indicates that the C compiler can know that certain functions are &lt;code&gt;pure&lt;/code&gt; functions, meaning that they have no side effects, and only rely on function input</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_PURE&lt;/code&gt; を定義します。これは、Cコンパイラが特定の関数が &lt;code&gt;pure&lt;/code&gt; 関数であることを認識できることを示します。つまり、副作用がなく、関数入力のみに依存します。</target>
        </trans-unit>
        <trans-unit id="420fa8e106aa6be346627e32f034151a52362ffe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_UNUSED&lt;/code&gt; , which indicates that the C compiler can know that certain variables and arguments may not always be used, and to not throw warnings if they don't get used.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASATTRIBUTE_UNUSED&lt;/code&gt; を定義します。これは、Cコンパイラが特定の変数と引数が常に使用されるとは限らないことを認識し、使用されなくても警告をスローしないことを示します。</target>
        </trans-unit>
        <trans-unit id="dd8f83fc842425448043adda2ad084876969855e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_UNUSED&lt;/code&gt;, which indicates that the C compiler can know that certain variables and arguments may not always be used, and to not throw warnings if they don't get used.</source>
          <target state="translated">この変数は、 &lt;code&gt;HASATTRIBUTE_UNUSED&lt;/code&gt; を条件付きで定義します。これは、Cコンパイラーが、特定の変数と引数が常に使用されるとは限らないことを認識し、使用されない場合に警告をスローしないことを示します。</target>
        </trans-unit>
        <trans-unit id="ddcad35f0c318736909295f4f6cd964d37f1a53f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_WARN_UNUSED_RESULT&lt;/code&gt; , which indicates that the C compiler can know that certain functions have a return values that must not be ignored, such as malloc() or open().</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HASATTRIBUTE_WARN_UNUSED_RESULT&lt;/code&gt; を定義します。これは、Cコンパイラが、malloc（）やopen（）などの特定の関数に無視してはならない戻り値があることを認識できることを示します。</target>
        </trans-unit>
        <trans-unit id="b236732aa4e34a009b54dcede2dfd55e746dc6ee" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HASATTRIBUTE_WARN_UNUSED_RESULT&lt;/code&gt;, which indicates that the C compiler can know that certain functions have a return values that must not be ignored, such as malloc() or open().</source>
          <target state="translated">この変数は、 &lt;code&gt;HASATTRIBUTE_WARN_UNUSED_RESULT&lt;/code&gt; を条件付きで定義します。これは、Cコンパイラが、malloc（）やopen（）などの特定の関数が無視してはならない戻り値を持っていることを認識できることを示します。</target>
        </trans-unit>
        <trans-unit id="4f215b234b46ef7c56eb723ad08f919ae0a7c950" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_ACCESS&lt;/code&gt; if the access() system call is available to check for access permissions using real IDs.</source>
          <target state="translated">この変数は、実際のIDを使用してアクセス許可をチェックするためにaccess（）システムコールが使用可能な場合、条件付きで &lt;code&gt;HAS_ACCESS&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="79fed26f317480a67e604252b89c9e7cd20f70a5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_BUILTIN_ADD_OVERFLOW&lt;/code&gt;, which indicates that the compiler supports __builtin_add_overflow(x,y,&amp;amp;z) for safely adding x and y into z while checking for overflow.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_BUILTIN_ADD_OVERFLOW&lt;/code&gt; を条件付きで定義します。これは、コンパイラがオーバーフローをチェックしながらxとyをzに安全に追加するために__builtin_add_overflow（x、y、＆z）をサポートすることを示します。</target>
        </trans-unit>
        <trans-unit id="a6ffb21d9b86f1027201a5668c38e081eccafe1d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_BUILTIN_MUL_OVERFLOW&lt;/code&gt;, which indicates that the compiler supports __builtin_mul_overflow(x,y,&amp;amp;z) for safely multiplying x and y into z while checking for overflow.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_BUILTIN_MUL_OVERFLOW&lt;/code&gt; を条件付きで定義します。これは、コンパイラが__builtin_mul_overflow（x、y、＆z）をサポートして、オーバーフローをチェックしながらxとyをzに安全に乗算することを示します。</target>
        </trans-unit>
        <trans-unit id="45b292063a7933d4c21b5fe0bdc942a12c561f5a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_BUILTIN_SUB_OVERFLOW&lt;/code&gt;, which indicates that the compiler supports __builtin_sub_overflow(x,y,&amp;amp;z) for safely subtracting y from x into z while checking for overflow.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_BUILTIN_SUB_OVERFLOW&lt;/code&gt; を条件付きで定義します。これは、コンパイラーが__builtin_sub_overflow（x、y、＆z）をサポートして、オーバーフローをチェックしながらxからzにyを安全に減算することを示します。</target>
        </trans-unit>
        <trans-unit id="7c105d4e6058827fec8056bf20316718cbab9faa" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_CLOSEDIR&lt;/code&gt; if closedir() is available.</source>
          <target state="translated">closedir（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_CLOSEDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="8654218934b9b6758432460c578cc5a644b91d92" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_ENDHOSTENT&lt;/code&gt; if endhostent() is available to close whatever was being used for host queries.</source>
          <target state="translated">ホストのクエリに使用されていたものをすべて閉じるためにendhostent（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_ENDHOSTENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="79e5c8edfd4691e1b4f25bb1c714fe1507e829f4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_ENDNETENT&lt;/code&gt; if endnetent() is available to close whatever was being used for network queries.</source>
          <target state="translated">この変数は、endnetent（）を使用してネットワーククエリに使用されていたものをすべて閉じることができる場合に、条件付きで &lt;code&gt;HAS_ENDNETENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="23979ba16f9e3dd7409c1aeb4d7d4d5911e864e5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_ENDPROTOENT&lt;/code&gt; if endprotoent() is available to close whatever was being used for protocol queries.</source>
          <target state="translated">この変数は、endprotoent（）を使用してプロトコルクエリに使用されていたものを閉じることができる場合に、条件付きで &lt;code&gt;HAS_ENDPROTOENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="1f85023e116dfb459bcb6c6b9ea107e1880da801" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_ENDSERVENT&lt;/code&gt; if endservent() is available to close whatever was being used for service queries.</source>
          <target state="translated">この変数は、サービスクエリに使用されていたものをすべて閉じるためにendservent（）を使用できる場合、条件付きで &lt;code&gt;HAS_ENDSERVENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="9026ce557a983587089262cdc30c657f39523536" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_FEGETROUND&lt;/code&gt; if fegetround() is available to get the floating point rounding mode.</source>
          <target state="translated">この変数は、fegetround（）を使用して浮動小数点丸めモードを取得できる場合、条件付きで &lt;code&gt;HAS_FEGETROUND&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="a5695e9822f626cc75613841b734f1880b97e1cd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_FGETPOS&lt;/code&gt; if fgetpos() is available to get the file position indicator.</source>
          <target state="translated">この変数は、fgetpos（）がファイル位置インジケーターを取得できる場合、条件付きで &lt;code&gt;HAS_FGETPOS&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="ecd11d67113d55076e38c3f87fbec174b96046c1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_FLOCK&lt;/code&gt; if flock() is available to do file locking.</source>
          <target state="translated">この変数は、flock（）がファイルのロックを行うために使用できる場合、 &lt;code&gt;HAS_FLOCK&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="d12df32e7c3e2769df2173cc4aeba55819c508b3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_FPGETROUND&lt;/code&gt; if fpgetround() is available to get the floating point rounding mode.</source>
          <target state="translated">fpgetround（）を使用して浮動小数点丸めモードを取得できる場合、この変数は条件付きで &lt;code&gt;HAS_FPGETROUND&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="7caed5a67bbd1068f15dc1afc8a52fbcbb8a3a6c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_FSETPOS&lt;/code&gt; if fsetpos() is available to set the file position indicator.</source>
          <target state="translated">fsetpos（）を使用してファイル位置インジケーターを設定できる場合、この変数は条件付きで &lt;code&gt;HAS_FSETPOS&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="4ca1f26e1ee2a6d6b7bcc20d2c601de0d8652782" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETESPWNAM&lt;/code&gt; if getespwnam() is available to retrieve enhanced (shadow) password entries by name.</source>
          <target state="translated">getespwnam（）を使用して拡張（シャドウ）パスワードエントリを名前で取得できる場合、この変数は条件付きで &lt;code&gt;HAS_GETESPWNAM&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="523b849ed0e10fbdf244f4e8cd77184e7b2e7e2e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETHOSTENT&lt;/code&gt; if gethostent() is available to look up host names in some data base or another.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS_GETHOSTENT&lt;/code&gt; を gethostent（）がいくつかのデータベースまたは別のホスト名を検索するために利用可能である場合。</target>
        </trans-unit>
        <trans-unit id="c477102d11cefe29ba1af921e3e01940cce25886" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETNETENT&lt;/code&gt; if getnetent() is available to look up network names in some data base or another.</source>
          <target state="translated">この変数は、getnetent（）を使用してデータベースなどのネットワーク名を検索できる場合、 &lt;code&gt;HAS_GETNETENT&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="3dd4221c56df17e7463336ebb61e6a0a59685106" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETPAGESIZE&lt;/code&gt; if getpagesize() is available to get the system page size.</source>
          <target state="translated">getpagesize（）を使用してシステムページサイズを取得できる場合、この変数は条件付きで &lt;code&gt;HAS_GETPAGESIZE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="008f90e9dce5e248f0a062499f460cbfe1316a70" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETPGRP&lt;/code&gt; if getpgrp() is available to get the current process group.</source>
          <target state="translated">現在のプロセスグループを取得するためにgetpgrp（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_GETPGRP&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="466f30d3944227e178d079578b5e186c11b86479" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETPRIORITY&lt;/code&gt; if getpriority() is available to get a process's priority.</source>
          <target state="translated">この変数は、プロセスの優先順位を取得するためにgetpriority（）が使用可能な場合、条件付きで &lt;code&gt;HAS_GETPRIORITY&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="f8a60b1d5d8d846ce3f5e6fe4d7b072471b5e6c6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETPROTOENT&lt;/code&gt; if getprotoent() is available to look up protocols in some data base or another.</source>
          <target state="translated">この変数は、getprotoent（）がいくつかのデータベースまたは別のデータベースでプロトコルを検索できる場合、条件付きで &lt;code&gt;HAS_GETPROTOENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="703bdebcae3a9b18831e785584b8e179d8f5569d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETPRPWNAM&lt;/code&gt; if getprpwnam() is available to retrieve protected (shadow) password entries by name.</source>
          <target state="translated">この変数は、getprpwnam（）を使用して、保護された（シャドウ）パスワードエントリを名前で取得できる場合に、 &lt;code&gt;HAS_GETPRPWNAM&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="d470dbda91b75051a9116195c5471b4cc0a994bc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETSERVENT&lt;/code&gt; if getservent() is available to look up network services in some data base or another.</source>
          <target state="translated">この変数は、getservent（）がいくつかのデータベースまたは別のデータベースでネットワークサービスを検索できる場合、条件付きで &lt;code&gt;HAS_GETSERVENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="8f1532a01e5d8ec8dbefe92231b99738657124d6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_GETSPNAM&lt;/code&gt; if getspnam() is available to retrieve SysV shadow password entries by name.</source>
          <target state="translated">この変数は、getspnam（）がSysVシャドウパスワードエントリを名前で取得できる場合に、条件付きで &lt;code&gt;HAS_GETSPNAM&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="cfad68a688a0a88c6b15faed3a855ee7ed81db88" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_HTONL&lt;/code&gt; if htonl() and its friends are available to do network order byte swapping.</source>
          <target state="translated">htonl（）とそのフレンドがネットワークオーダーバイトスワップを実行できる場合、この変数は条件付きで &lt;code&gt;HAS_HTONL&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="36ae55fc8ab6d9db052670febb9d6c73ffc9c7fe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_HYPOT&lt;/code&gt; if hypot is available for numerically stable hypotenuse function.</source>
          <target state="translated">この変数は、hypotが数値的に安定した斜辺関数に使用できる場合、条件付きで &lt;code&gt;HAS_HYPOT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="1c8f906308fe5425fd5dc9fc6c65283219211f28" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_INDEX&lt;/code&gt; if index() and rindex() are available for string searching.</source>
          <target state="translated">この変数は、index（）およびrindex（）が文字列検索に使用できる場合、条件付きで &lt;code&gt;HAS_INDEX&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="f58665b1066bffd31d93be9865becf02e07fbc33" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_LINK&lt;/code&gt; if link() is available to create hard links.</source>
          <target state="translated">link（）を使用してハードリンクを作成できる場合、この変数は条件付きで &lt;code&gt;HAS_LINK&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="f7aaa9b5790c7fed2f4557a1b76230d9dee2b872" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_LOCALECONV&lt;/code&gt; if localeconv() is available for numeric and monetary formatting conventions.</source>
          <target state="translated">この変数は、localeconv（）が数値および通貨のフォーマット規則で使用可能な場合、条件付きで &lt;code&gt;HAS_LOCALECONV&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="a3c4adc80b08fec49de9e85a9758844bbed93d4f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_LOCKF&lt;/code&gt; if lockf() is available to do file locking.</source>
          <target state="translated">この変数は、lockf（）を使用してファイルのロックを行うことができる場合に、条件付きで &lt;code&gt;HAS_LOCKF&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="a3309e731f7ec54de80f5709f885fa11f752d281" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_LONG_DOUBLE&lt;/code&gt; if the long double type is supported.</source>
          <target state="translated">long double型がサポートされている場合、この変数は条件付きで &lt;code&gt;HAS_LONG_DOUBLE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="f96dc22b2fabc7d6becfede8302b062283c67511" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_LONG_LONG&lt;/code&gt; if the long long type is supported.</source>
          <target state="translated">long long型がサポートされている場合、この変数は条件付きで &lt;code&gt;HAS_LONG_LONG&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="bde46e5f10d187a1e49089e8f14937e758db8660" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_LSTAT&lt;/code&gt; if lstat() is available to do file stats on symbolic links.</source>
          <target state="translated">lstat（）がシンボリックリンクのファイル統計を実行できる場合、この変数は条件付きで &lt;code&gt;HAS_LSTAT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="9c29d2f5108f120fc070de1998bbec52bcea01c7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_MADVISE&lt;/code&gt; if madvise() is available to map a file into memory.</source>
          <target state="translated">&lt;code&gt;HAS_MADVISE&lt;/code&gt; （）を使用してファイルをメモリにマップできる場合、この変数は条件付きでHAS_MADVISEを定義します。</target>
        </trans-unit>
        <trans-unit id="a0176dd527685bd6e90190916167c20eaf54f9cf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_MKOSTEMP&lt;/code&gt; if mkostemp() is available to exclusively create and open a uniquely named (with a suffix) temporary file.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS_MKOSTEMP&lt;/code&gt; をmkostemp（）が独占的に作成し、一意の名前（接尾辞）の一時ファイルを開くことが利用可能な場合。</target>
        </trans-unit>
        <trans-unit id="9773977cefbb09ffe9bf40f7bdd75aa66788128d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_MMAP&lt;/code&gt; if mmap() is available to map a file into memory.</source>
          <target state="translated">mmap（）を使用してファイルをメモリにマップできる場合、この変数は条件付きで &lt;code&gt;HAS_MMAP&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="e49a09fbe97831dedb0097fc04c353ecd4fdc497" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_MPROTECT&lt;/code&gt; if mprotect() is available to modify the access protection of a memory mapped file.</source>
          <target state="translated">メモリ保護されたファイルのアクセス保護を変更するためにmprotect（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_MPROTECT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="d39b4760c4a7ddea99da224cda29212d2ef99aed" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_MSYNC&lt;/code&gt; if msync() is available to synchronize a mapped file.</source>
          <target state="translated">マップされたファイルを同期するためにmsync（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_MSYNC&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="542bb319608c7eec938e5b98398f37ee190044a7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_MUNMAP&lt;/code&gt; if munmap() is available to unmap a region mapped by mmap().</source>
          <target state="translated">mmap（）によってマップされた領域をマップ &lt;code&gt;HAS_MUNMAP&lt;/code&gt; するためにmunmap（）が使用可能な場合、この変数は条件付きでHAS_MUNMAPを定義します。</target>
        </trans-unit>
        <trans-unit id="02d3878b96b9be7c2121b2227ea0c924b133a4a0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_NAN&lt;/code&gt; if nan() is available to generate NaN.</source>
          <target state="translated">この変数は、nan（）がNaNの生成に使用できる場合、 &lt;code&gt;HAS_NAN&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="8ac0a1512388c05f6e3f6942497c27a45e8e3efe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_NANOSLEEP&lt;/code&gt; if nanosleep() is available to sleep with 1E-9 sec accuracy.</source>
          <target state="translated">nanosleep（）が &lt;code&gt;HAS_NANOSLEEP&lt;/code&gt; 秒の精度でスリープできる場合、この変数は条件付きでHAS_NANOSLEEPを定義します。</target>
        </trans-unit>
        <trans-unit id="4b6ab26a7e66c25dc87e4ed8365e14b5b776d611" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_NEARBYINT&lt;/code&gt; if nearbyint() is available to return the integral value closest to (according to the current rounding mode) to x.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS_NEARBYINT&lt;/code&gt; を nearbyint（）はxに（現在の丸めモードに従って）に最も近い整数値を返すために利用可能である場合。</target>
        </trans-unit>
        <trans-unit id="9de8df4ca9d3107d7b5e197ebc2f8b56f2a456de" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_NEXTAFTER&lt;/code&gt; if nextafter() is available to return the next machine representable double from x in direction y.</source>
          <target state="translated">この変数は、nextafter（）がxからy方向の次のマシン表現可能なdoubleを返すために使用できる場合、条件付きで &lt;code&gt;HAS_NEXTAFTER&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="09cc9884f832b1e2f2ad4607b97076420d46d665" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_NEXTTOWARD&lt;/code&gt; if nexttoward() is available to return the next machine representable long double from x in direction y.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS_NEXTTOWARD&lt;/code&gt; を nexttoward（）はy方向にxから長い二次機械表現を返すために利用可能である場合。</target>
        </trans-unit>
        <trans-unit id="e84d3a1694bc236dbf1d7993a1d2c9255724da86" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_PTHREAD_ATTR_SETSCOPE&lt;/code&gt; if pthread_attr_setscope() is available to set the contention scope attribute of a thread attribute object.</source>
          <target state="translated">この変数は、pthread_attr_setscope（）を使用してスレッド属性オブジェクトの競合スコープ属性を設定できる場合、条件付きで &lt;code&gt;HAS_PTHREAD_ATTR_SETSCOPE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="ca9e53f6ec390b98dfba5bb4f284367970f8d262" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_READDIR&lt;/code&gt; if readdir() is available to read directory entries.</source>
          <target state="translated">readdir（）がディレクトリエントリの読み取りに使用できる場合、この変数は条件付きで &lt;code&gt;HAS_READDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="c772ddc21b6658b7802061d88a44caa292765ab3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_REWINDDIR&lt;/code&gt; if rewinddir() is available.</source>
          <target state="translated">rewinddir（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_REWINDDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="102609636e6adf43c7c619fd51b5305af390db97" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_RMDIR&lt;/code&gt; if rmdir() is available to remove directories.</source>
          <target state="translated">rmdir（）を使用してディレクトリを削除できる場合、この変数は条件付きで &lt;code&gt;HAS_RMDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="887794d99137721bdeb0c86f2844b40ead019692" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SEEKDIR&lt;/code&gt; if seekdir() is available.</source>
          <target state="translated">seekdir（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SEEKDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="eabab054867a6e7a1fda52591f68108f354fff8a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SELECT&lt;/code&gt; if select() is available to select active file descriptors. A &amp;lt;sys/time.h&amp;gt; inclusion may be necessary for the timeout field.</source>
          <target state="translated">この変数は、select（）を使用してアクティブなファイル記述子を選択できる場合に、 &lt;code&gt;HAS_SELECT&lt;/code&gt; を条件付きで定義します。タイムアウトフィールドに&amp;lt;sys / time.h&amp;gt;を含める必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="bc33f5c99454e91ae2ee5c0078387d95e7d2e9a2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETHOSTENT&lt;/code&gt; if sethostent() is available.</source>
          <target state="translated">sethostent（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETHOSTENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="75151e22ebcabc154ea71d8ff2b10a358ed030a2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETLOCALE&lt;/code&gt; if setlocale() is available to handle locale-specific ctype implementations.</source>
          <target state="translated">ロケール固有のctype実装を処理するためにsetlocale（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETLOCALE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="3d673facbb75d108913e27f1a2486a73d55d0236" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETNETENT&lt;/code&gt; if setnetent() is available.</source>
          <target state="translated">setnetent（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETNETENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="7914dcc37c31303f3da0f6e201df5d765f8aa85c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETPGRP&lt;/code&gt; if setpgrp() is available to set the current process group.</source>
          <target state="translated">現在のプロセスグループを設定するためにsetpgrp（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_SETPGRP&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="2002a17a2c2a55f6f40172b2b8fb58d5b76cdd2a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETPRIORITY&lt;/code&gt; if setpriority() is available to set a process's priority.</source>
          <target state="translated">プロセスの優先順位を設定するためにsetpriority（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETPRIORITY&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="3c631092c3030de3575c0a7a87bf0eb17b021238" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETPROTOENT&lt;/code&gt; if setprotoent() is available.</source>
          <target state="translated">setprotoent（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETPROTOENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="0f78400a8b12f8656f01ebbdf5086223548e1e83" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETREGID&lt;/code&gt; if setregid() is available to change the real and effective gid of the current process.</source>
          <target state="translated">現在のプロセスの実際の有効なGIDを変更するためにsetregid（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_SETREGID&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="30c69bd63c2acea93583c8f9220b4a879c50d781" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETRESGID&lt;/code&gt; if setresgid() is available to change the real, effective and saved gid of the current process.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS_SETRESGID&lt;/code&gt; を setresgid場合（）の実、現在のプロセスの効果的かつ保存GIDを変更するために利用可能です。</target>
        </trans-unit>
        <trans-unit id="35485f4098b6c1c258054bdb628277a4ccf112e2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETREUID&lt;/code&gt; if setresuid() is available to change the real, effective and saved uid of the current process.</source>
          <target state="translated">現在のプロセスの実際の有効な保存されたuidを変更するためにsetresuid（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETREUID&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="aba8a0bc40989a1ca38df2aae3c387f371d5192b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETREUID&lt;/code&gt; if setreuid() is available to change the real and effective uid of the current process.</source>
          <target state="translated">現在のプロセスの実際の有効なuidを変更するためにsetreuid（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_SETREUID&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="eb6783028c86e7bf10a2b92123734f47a7944fac" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETSERVENT&lt;/code&gt; if setservent() is available.</source>
          <target state="translated">setservent（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SETSERVENT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="56d4df6b62a7f4a67414b6f9ecb8ddad65efc719" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETSID&lt;/code&gt; if setsid() is available to set the process group &lt;code&gt;ID&lt;/code&gt; .</source>
          <target state="translated">この変数は、setsid（）を使用してプロセスグループ &lt;code&gt;ID&lt;/code&gt; を設定できる場合に、条件付きで &lt;code&gt;HAS_SETSID&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="7ef408c79ac243069730beb417294ee15f89a8da" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SETSID&lt;/code&gt; if setsid() is available to set the process group &lt;code&gt;ID&lt;/code&gt;.</source>
          <target state="translated">この変数は、setsid（）を使用してプロセスグループ &lt;code&gt;ID&lt;/code&gt; を設定できる場合、 &lt;code&gt;HAS_SETSID&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="a53a8b438b669e85e8dac90bda9a163f72b38dcd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SIGPROCMASK&lt;/code&gt; if sigprocmask() is available to examine or change the signal mask of the calling process.</source>
          <target state="translated">sigprocmask（）を使用して呼び出しプロセスのシグナルマスクを検査または変更できる場合、この変数は条件付きで &lt;code&gt;HAS_SIGPROCMASK&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="fedaa514d1228b3cb8d459d4c50ec34f00f6ac02" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SOCKET&lt;/code&gt; , which indicates that the &lt;code&gt;BSD&lt;/code&gt; socket interface is supported.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_SOCKET&lt;/code&gt; を定義します。これは、 &lt;code&gt;BSD&lt;/code&gt; ソケットインターフェースがサポートされていることを示します。</target>
        </trans-unit>
        <trans-unit id="d90f4b16cfc328489f9f3e006e37192e3670ab4a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SOCKET&lt;/code&gt;, which indicates that the &lt;code&gt;BSD&lt;/code&gt; socket interface is supported.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_SOCKET&lt;/code&gt; を定義します。これは、 &lt;code&gt;BSD&lt;/code&gt; ソケットインターフェイスがサポートされていることを示します。</target>
        </trans-unit>
        <trans-unit id="5acf41a0b06778d8de2ab0c3e21b6db83e6e1a26" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_STAT&lt;/code&gt; if stat() is available to get file status.</source>
          <target state="translated">この変数は、stat（）を使用してファイルのステータスを取得できる場合、 &lt;code&gt;HAS_STAT&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="104dec5b82fbc045989fe3c8c4ef8fa75c373740" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_STRCHR&lt;/code&gt; if strchr() and strrchr() are available for string searching.</source>
          <target state="translated">strchr（）とstrrchr（）が文字列検索に使用できる場合、この変数は条件付きで &lt;code&gt;HAS_STRCHR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="66c65e480ececd2a54e0b9068f9890c68b2b94ad" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_STRCOLL&lt;/code&gt; if strcoll() is available to compare strings using collating information.</source>
          <target state="translated">strcoll（）が照合情報を使用して文字列を比較できる場合、この変数は条件付きで &lt;code&gt;HAS_STRCOLL&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="b82eb75e3b5d7a021a62e68340d85ee6ee407d5d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_STRERROR&lt;/code&gt; if strerror() is available to translate error numbers to strings.</source>
          <target state="translated">エラー番号を文字列に変換するためにstrerror（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_STRERROR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="157fd2966246701c1e0fd97cb121f370d5243dfd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_STRXFRM&lt;/code&gt; if strxfrm() is available to transform strings.</source>
          <target state="translated">文字列の変換にstrxfrm（）を使用できる場合、この変数は条件付きで &lt;code&gt;HAS_STRXFRM&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="f665cc4a3804d1cfbb21ea5e1e553f34ba0001f3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SYSCALL&lt;/code&gt; if syscall() is available call arbitrary system calls.</source>
          <target state="translated">この変数は、syscall（）が任意のシステムコールを呼び出すことができる場合に条件付きで &lt;code&gt;HAS_SYSCALL&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="76958e03c19c57ba5daadf788ceb559703fda4a7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SYSTEM&lt;/code&gt; if system() is available to issue a shell command.</source>
          <target state="translated">この変数は、system（）がシェルコマンドを発行できる場合、 &lt;code&gt;HAS_SYSTEM&lt;/code&gt; を条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="fba0f75ab5519c316f7379166065cac7a0fa0f08" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SYS_ERRLIST&lt;/code&gt; if sys_errlist[] is available to translate error numbers to strings.</source>
          <target state="translated">エラー番号を文字列に変換するためにsys_errlist []が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_SYS_ERRLIST&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="3133e51b2626aefa90c83a60c2bc07b45364f9d8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_SYS_ERRNOLIST&lt;/code&gt; if sys_errnolist[] is available to translate error numbers to the symbolic name.</source>
          <target state="translated">sys_errnolist []を使用してエラー番号をシンボリック名に変換できる場合、この変数は条件付きで &lt;code&gt;HAS_SYS_ERRNOLIST&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="3b6cc938eb6588fef7831af7c25c38df6b393dba" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TELLDIR&lt;/code&gt; if telldir() is available.</source>
          <target state="translated">この変数は、telldir（）が使用可能な場合、条件付きで &lt;code&gt;HAS_TELLDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="13376d783be11f279f6a31e5dca53c18c5518beb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TM_TM_GMTOFF&lt;/code&gt; , which indicates indicates to the C program that the struct tm has the tm_gmtoff field.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_TM_TM_GMTOFF&lt;/code&gt; を定義します。これは、struct tmにtm_gmtoffフィールドがあることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="1086cb9c5e3f467454832b8b12812058cd92e06e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TM_TM_GMTOFF&lt;/code&gt;, which indicates to the C program that the struct tm has the tm_gmtoff field.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_TM_TM_GMTOFF&lt;/code&gt; を条件付きで定義します。これは、構造体tmにtm_gmtoffフィールドがあることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="a5fdffc25ffd7e4584eb45e68410699ffcf4500b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TM_TM_ZONE&lt;/code&gt; , which indicates indicates to the C program that the struct tm has the tm_zone field.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_TM_TM_ZONE&lt;/code&gt; を定義します。これは、struct tmにtm_zoneフィールドがあることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="c04ef66c28333bfa29c16eb97a4f1bf1a07a865b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TM_TM_ZONE&lt;/code&gt;, which indicates to the C program that the struct tm has the tm_zone field.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_TM_TM_ZONE&lt;/code&gt; を条件付きで定義します。これは、構造体tmにtm_zoneフィールドがあることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="56c5c15d4eddf8d206488d6739d6fd8de91eb4bc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TRUNCATE&lt;/code&gt; if truncate() is available to truncate files.</source>
          <target state="translated">ファイルを切り捨てるためにtruncate（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_TRUNCATE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="e2b911e2460cf128e44ed370b2980c2209097f87" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_TZNAME&lt;/code&gt; if tzname[] is available to access timezone names.</source>
          <target state="translated">tzname []がタイムゾーン名にアクセスできる場合、この変数は条件付きで &lt;code&gt;HAS_TZNAME&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="0d2899983d1ce6900d5663872bcf0fe4bc31fe25" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_UNION_SEMUN&lt;/code&gt; if the union semun is defined by including &amp;lt;sys/sem.h&amp;gt;.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS_UNION_SEMUN&lt;/code&gt; を組合semunのは&amp;lt;sys / sem.h&amp;gt;含めることによって定義されている場合。</target>
        </trans-unit>
        <trans-unit id="9dbad1c6f722a7fb60b2580c6825a89a0875ea78" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_USLEEP&lt;/code&gt; if usleep() is available to do high granularity sleeps.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_USLEEP&lt;/code&gt; を定義し、usleep（）を使用して高精度のスリープを実行できます。</target>
        </trans-unit>
        <trans-unit id="62fcdd3f292691fc949ae90083b1d7e19d396383" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_USTAT&lt;/code&gt; if ustat() is available to query file system statistics by dev_t.</source>
          <target state="translated">ustat（）がdev_tによるファイルシステム統計のクエリに使用できる場合、この変数は条件付きで &lt;code&gt;HAS_USTAT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="e6da30a5484ed0715193a06b75bbdc0f387b14b5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS_WAITPID&lt;/code&gt; if waitpid() is available to wait for child process.</source>
          <target state="translated">子プロセスを待機するためにwaitpid（）が使用可能な場合、この変数は条件付きで &lt;code&gt;HAS_WAITPID&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="ea1ebdb3e07eb3cfa8774547eb7eca99b9cbda6a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;HAS__FWALK&lt;/code&gt; if _fwalk() is available to apply a function to all the file handles.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;HAS__FWALK&lt;/code&gt; を _fwalk（）は、すべてのファイルハンドルに関数を適用するために利用可能な場合。</target>
        </trans-unit>
        <trans-unit id="ccfbe62640f2e7f4d3f434546f57dde1c801c589" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_DIRENT&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;dirent.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_DIRENT&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;dirent.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="a9a787f2a18f3b44e560a5f3940cd8e2d3a4e477" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_DIRENT&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;dirent.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_DIRENT&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;dirent.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="b09b17b8feebed4fb31ad1053dd929b31fc1552d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_NETINET_IN&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;netinet/in.h&amp;gt;. Otherwise, you may try &amp;lt;sys/in.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_NETINET_IN&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;netinet / in.h&amp;gt;を含める必要があることを示します。それ以外の場合は、&amp;lt;sys / in.h&amp;gt;を試してください。</target>
        </trans-unit>
        <trans-unit id="6229f1fa60966db3808987381a186cc7f8635df8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_NETINET_IN&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;netinet/in.h&amp;gt;. Otherwise, you may try &amp;lt;sys/in.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_NETINET_IN&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;netinet /in.h&amp;gt;を含める必要があることを示します。それ以外の場合は、&amp;lt;sys /in.h&amp;gt;を試すことができます。</target>
        </trans-unit>
        <trans-unit id="18545a27b23f4ec408fe168cb07019ddd52aeb9d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_PWD&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;pwd.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_PWD&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;pwd.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="bb803936d76c5aab724f9475cc78845aadf9c816" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_PWD&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;pwd.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_PWD&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;pwd.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="3999885997764e29fe1e4dcd432c1a48f0dbd137" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_QUADMATH&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;quadmath.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_QUADMATH&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;quadmath.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="84ed6ce0c86d5ff27c690b2ddda9c899654179c0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_QUADMATH&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;quadmath.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_QUADMATH&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;quadmath.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="2a59b19169614e1208d6a92cb8cd08ec908a8e0b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_IN&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;sys/in.h&amp;gt; instead of &amp;lt;netinet/in.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_IN&lt;/code&gt; を定義します。これは、&amp;lt;netinet / in.h&amp;gt;ではなく&amp;lt;sys / in.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="03b21042961935fbfbefec3a909d5794f5de25f0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_IN&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;sys/in.h&amp;gt; instead of &amp;lt;netinet/in.h&amp;gt;.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;I_SYS_IN&lt;/code&gt; を定義します。これは、Cプログラムに対して、&amp;lt;netinet /in.h&amp;gt;ではなく&amp;lt;sys / in.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="b72fad23f2686fa8a3b7ba796dba5e928d3c1193" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_SELECT&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;sys/select.h&amp;gt; in order to get the definition of struct timeval.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_SELECT&lt;/code&gt; を定義します。これは、struct timevalの定義を取得するために&amp;lt;sys / select.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="be7898505b9471576bb5b430ec24e9c34c7b1a55" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_SELECT&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;sys/select.h&amp;gt; in order to get the definition of struct timeval.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_SELECT&lt;/code&gt; を定義します。これは、structtimevalの定義を取得するために&amp;lt;sys / select.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="46b3e1dfb1e11c227d687db5d0baaa2e450457de" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_SOCKIO&lt;/code&gt; to indicate to the C program that socket ioctl codes may be found in &amp;lt;sys/sockio.h&amp;gt; instead of &amp;lt;sys/ioctl.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_SOCKIO&lt;/code&gt; を定義して、ソケットioctlコードが&amp;lt;sys / ioctl.h&amp;gt;ではなく&amp;lt;sys / sockio.h&amp;gt;にあることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="abc49b9ac08dff6a9f6857ae04835d4e61d8c3d9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_TIME&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;sys/time.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_TIME&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;sys / time.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="a05fce4796eb0a468ac066cc59e0a4dc57538112" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_TIME&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;sys/time.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_TIME&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;sys /time.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="134ce192071bcaa440fc2e6dd10833f44f8a3750" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_TIME_KERNEL&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;sys/time.h&amp;gt; with &lt;code&gt;KERNEL&lt;/code&gt; defined.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;I_SYS_TIME_KERNEL&lt;/code&gt; とそれは&amp;lt;sys / TIME.H&amp;gt;含めるべきであることCプログラムに示し、 &lt;code&gt;KERNEL&lt;/code&gt; 定義されています。</target>
        </trans-unit>
        <trans-unit id="f179c336e76408f1f071c7e6f1d598b7e1ea26ef" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_TIME_KERNEL&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;sys/time.h&amp;gt; with &lt;code&gt;KERNEL&lt;/code&gt; defined.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;I_SYS_TIME_KERNEL&lt;/code&gt; を定義します。これは、 &lt;code&gt;KERNEL&lt;/code&gt; 定義された&amp;lt;sys /time.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="939cb7b0620edee4edc61983e7278fc31a5c1093" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_UN&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;sys/un.h&amp;gt; to get &lt;code&gt;UNIX&lt;/code&gt; domain socket definitions.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_UN&lt;/code&gt; を定義します。これは、 &lt;code&gt;UNIX&lt;/code&gt; ドメインソケット定義を取得するために&amp;lt;sys / un.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="9ff1d57c77149a8f8965a9ee33bf60883847c53e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_UN&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;sys/un.h&amp;gt; to get &lt;code&gt;UNIX&lt;/code&gt; domain socket definitions.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_UN&lt;/code&gt; を定義します。これは、 &lt;code&gt;UNIX&lt;/code&gt; ドメインソケット定義を取得するために&amp;lt;sys /un.h&amp;gt;を含める必要があることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="d05b60d3b34826e6947a78549014fc461f91e426" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_WAIT&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;sys/wait.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_WAIT&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;sys / wait.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="f8afd487363c7052289252816c4039d5e7259ee5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_SYS_WAIT&lt;/code&gt;, which indicates to the C program that it should include &amp;lt;sys/wait.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_SYS_WAIT&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;sys /wait.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="cbee00fea0a0e43a823409e3c9ea7ecbe6db0995" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_TIME&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;time.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_TIME&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;time.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="5e26138c57947cb8f890b9cb6f5d5a73c355cb2b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;I_VARARGS&lt;/code&gt; , which indicates to the C program that it should include &amp;lt;varargs.h&amp;gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;I_VARARGS&lt;/code&gt; を定義します。これは、Cプログラムに&amp;lt;varargs.h&amp;gt;を含める必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="adacd8529d588003400a218d9efa8778e7c5a4a0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;LONG_DOUBLE_STYLE_IEEE&lt;/code&gt; if the long double is any of the &lt;code&gt;IEEE&lt;/code&gt; 754 style long doubles: &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_STD&lt;/code&gt;, &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_EXTENDED&lt;/code&gt;, &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE&lt;/code&gt;.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;LONG_DOUBLE_STYLE_IEEE&lt;/code&gt; を長い二のいずれかである場合 &lt;code&gt;IEEE&lt;/code&gt; ：754スタイル長いダブルス &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_STD&lt;/code&gt; 、 &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_EXTENDED&lt;/code&gt; 、 &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f34f3c21fd0b8ede657c0701ed24331b130440cd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE&lt;/code&gt; if the long double is the 128-bit &lt;code&gt;IEEE&lt;/code&gt; 754 double-double.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_DOUBLEDOUBLE&lt;/code&gt; を長くダブル128ビットである場合 &lt;code&gt;IEEE&lt;/code&gt; 754ダブルダブル。</target>
        </trans-unit>
        <trans-unit id="756980c20db36fe0dd46d4db8127dd1afbfcd959" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_EXTENDED&lt;/code&gt; if the long double is the 80-bit &lt;code&gt;IEEE&lt;/code&gt; 754 extended precision. Note that despite the &lt;code&gt;extended&lt;/code&gt; this is less than the &lt;code&gt;std&lt;/code&gt;, since thisis an extension of the double precision.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_EXTENDED&lt;/code&gt; 長い二重80ビットである場合 &lt;code&gt;IEEE&lt;/code&gt; 754拡張精度。これは倍精度の拡張であるため、 &lt;code&gt;extended&lt;/code&gt; ているにもかかわらず、これは &lt;code&gt;std&lt;/code&gt; よりも小さいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="83aa1379dea829947822c99c195a810d06bb4a38" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_STD&lt;/code&gt; if the long double is the 128-bit &lt;code&gt;IEEE&lt;/code&gt; 754.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;LONG_DOUBLE_STYLE_IEEE_STD&lt;/code&gt; を長い二重が128ビットである場合 &lt;code&gt;IEEE&lt;/code&gt; 754。</target>
        </trans-unit>
        <trans-unit id="ce75ff7631bbaf803d0ace7a33143e12192218ef" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;LONG_DOUBLE_STYLE_VAX&lt;/code&gt; if the long double is the 128-bit &lt;code&gt;VAX&lt;/code&gt; format H.</source>
          <target state="translated">long doubleが128ビット &lt;code&gt;VAX&lt;/code&gt; 形式Hの場合、この変数は条件付きで &lt;code&gt;LONG_DOUBLE_STYLE_VAX&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="58139b2e3b281a9a118c344ae314fa19f7ef819b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;MYMALLOC&lt;/code&gt; in case other parts of the source want to take special action if &lt;code&gt;MYMALLOC&lt;/code&gt; is used. This may include different sorts of profiling or error detection.</source>
          <target state="translated">この変数は、 &lt;code&gt;MYMALLOC&lt;/code&gt; が使用されている場合にソースの他の部分が特別なアクションを実行したい場合に &lt;code&gt;MYMALLOC&lt;/code&gt; 、条件付きでMYMALLOCを定義します。これには、さまざまな種類のプロファイリングまたはエラー検出が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="2c8fdadfdd30950a7b700d396be77876a6f4c5f5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; . It is set to undef when &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; is empty.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; を定義します。 &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; が空の場合は、undefに設定されます。</target>
        </trans-unit>
        <trans-unit id="7b135860345eb1cb4ecb8f5dbf25f3b80d9663cd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt;. It is set to undef when &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; is empty.</source>
          <target state="translated">この変数は、 &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; を条件付きで定義します。 &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; が空の場合、undefに設定されます。</target>
        </trans-unit>
        <trans-unit id="4ff46e0082d05a29ab6252efc4bd771d18d5878f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_OTHERLIBDIRS&lt;/code&gt; , which contains a colon-separated set of paths for the perl binary to include in @&lt;code&gt;INC&lt;/code&gt; . See also otherlibdirs.</source>
          <target state="translated">この変数は、 &lt;code&gt;PERL_OTHERLIBDIRS&lt;/code&gt; を条件付きで定義します。これには、@ &lt;code&gt;INC&lt;/code&gt; に含めるperlバイナリのパスをコロンで区切ったセットが含まれます。otherlibdirsも参照してください。</target>
        </trans-unit>
        <trans-unit id="792edce2f8757d59c45987f57e7fea3d6b286f1e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_OTHERLIBDIRS&lt;/code&gt;, which contains a colon-separated set of paths for the perl binary to include in @&lt;code&gt;INC&lt;/code&gt;. See also otherlibdirs.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PERL_OTHERLIBDIRS&lt;/code&gt; を定義します。これには、@ &lt;code&gt;INC&lt;/code&gt; に含めるperlバイナリのコロンで区切られたパスのセットが含まれます。otherlibdirsも参照してください。</target>
        </trans-unit>
        <trans-unit id="caef6d2331c84b17275d3f9012789c819b377ba9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_VENDORBIN&lt;/code&gt; .</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;PERL_VENDORBIN&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="5d76f60666c8aecb525e5906ff962481dc318171" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_VENDORBIN&lt;/code&gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PERL_VENDORBIN&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="533111c8d8f10b6751abb6a1a0088f4c19073d3e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_VENDORLIB&lt;/code&gt; .</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;PERL_VENDORLIB&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="871a0cb0554ef284df45b5e6ac6f30c717bd50ad" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_VENDORLIB&lt;/code&gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PERL_VENDORLIB&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="177a5dd44b77ca5ced87275d19c31e96d16bc7b0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_VENDORSCRIPT&lt;/code&gt; .</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;PERL_VENDORSCRIPT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="7969ccc81d5cd924a862496e98d359f5c4fdb7ba" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PERL_VENDORSCRIPT&lt;/code&gt;.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PERL_VENDORSCRIPT&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="6cc9c3d91fb6f28bed8329dae1d992b2ddc3b88b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PRINTF_FORMAT_NULL_OK&lt;/code&gt; , which indicates the C compiler allows printf-like formats to be null.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;PRINTF_FORMAT_NULL_OK&lt;/code&gt; を定義します。これは、Cコンパイラがprintfのような形式をnullにできることを示します。</target>
        </trans-unit>
        <trans-unit id="a63de281be650d131b0dada057dda3c788db87bb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PRINTF_FORMAT_NULL_OK&lt;/code&gt;, which indicates the C compiler allows printf-like formats to be null.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;PRINTF_FORMAT_NULL_OK&lt;/code&gt; を定義します。これは、Cコンパイラがprintfのような形式をnullにすることを許可することを示します。</target>
        </trans-unit>
        <trans-unit id="1b45d18a0fa0b9cd91b944a53b1e7323f8adc333" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWAGE&lt;/code&gt; , which indicates that struct passwd contains pw_age.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWAGE&lt;/code&gt; を定義します。これは、struct passwdにpw_ageが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="8f93b894ca294b4b089fefb4c8e130735fcaeb5c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWAGE&lt;/code&gt;, which indicates that struct passwd contains pw_age.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWAGE&lt;/code&gt; を定義します。これは、structpasswdにpw_ageが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="6b184e19c4dcc5f872f5344f6afc9d5aa8890c36" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWCHANGE&lt;/code&gt; , which indicates that struct passwd contains pw_change.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWCHANGE&lt;/code&gt; を定義します。これは、struct passwdにpw_changeが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="8441cd9467c256bdc9b09035b7b1876a361955b4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWCHANGE&lt;/code&gt;, which indicates that struct passwd contains pw_change.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWCHANGE&lt;/code&gt; を定義します。これは、structpasswdにpw_changeが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="da5fb50ace415a9312b25c289ac7ee228f0dd1f8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWCLASS&lt;/code&gt; , which indicates that struct passwd contains pw_class.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWCLASS&lt;/code&gt; を定義します。これは、struct passwdにpw_classが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="bf37296a4f626e5d681b9f335125151376abd8ce" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWCLASS&lt;/code&gt;, which indicates that struct passwd contains pw_class.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWCLASS&lt;/code&gt; を定義します。これは、structpasswdにpw_classが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="9f567085df536f85d28a3794c7c79c2f135c39fc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWCOMMENT&lt;/code&gt; , which indicates that struct passwd contains pw_comment.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWCOMMENT&lt;/code&gt; を定義します。これは、struct passwdにpw_commentが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="d446c0dd2bd7215acf1c8d761e1c367d9b022427" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWCOMMENT&lt;/code&gt;, which indicates that struct passwd contains pw_comment.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWCOMMENT&lt;/code&gt; を定義します。これは、structpasswdにpw_commentが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="2223305749b21469a0762164dc8dc0df3aaa8c7f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWEXPIRE&lt;/code&gt; , which indicates that struct passwd contains pw_expire.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWEXPIRE&lt;/code&gt; を定義します。これは、struct passwdにpw_expireが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="9992e4d0615a9aacf641f7f53cfe12ded3beec47" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWEXPIRE&lt;/code&gt;, which indicates that struct passwd contains pw_expire.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWEXPIRE&lt;/code&gt; を定義します。これは、structpasswdにpw_expireが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="ebf2af3d9e7342f5f1fe442fb4ba6590cba3aeaf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWGECOS&lt;/code&gt; , which indicates that struct passwd contains pw_gecos.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWGECOS&lt;/code&gt; を定義します。これは、構造体passwdにpw_gecosが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="3b8016818095e885888a0aca57a1a20c790843e4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWGECOS&lt;/code&gt;, which indicates that struct passwd contains pw_gecos.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWGECOS&lt;/code&gt; を定義します。これは、structpasswdにpw_gecosが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="e4df7b4ce4ecdac74c8fac53257d7c54e9e2b1d2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWPASSWD&lt;/code&gt; , which indicates that struct passwd contains pw_passwd.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWPASSWD&lt;/code&gt; を定義します。これは、構造体passwdにpw_passwdが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="abe328a44bbcae89a29efb7320b5f4698e2f3a19" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWPASSWD&lt;/code&gt;, which indicates that struct passwd contains pw_passwd.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWPASSWD&lt;/code&gt; を定義します。これは、structpasswdにpw_passwdが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="f6f5c85237fcc07cb2101d49b94de63960320aab" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWQUOTA&lt;/code&gt; , which indicates that struct passwd contains pw_quota.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWQUOTA&lt;/code&gt; を定義します。これは、構造体passwdにpw_quotaが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="9226e8f3babf511a24917282807de2e020e40767" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;PWQUOTA&lt;/code&gt;, which indicates that struct passwd contains pw_quota.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;PWQUOTA&lt;/code&gt; を定義します。これは、structpasswdにpw_quotaが含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="d7b4b9ba5cff92bc6dcdb8d6c8455ba666662fc3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;SETLOCALE_ACCEPTS_ANY_LOCALE_NAME&lt;/code&gt; if setlocale() accepts any locale name.</source>
          <target state="translated">setlocale（）が任意のロケール名を受け入れる場合、この変数は条件付きで &lt;code&gt;SETLOCALE_ACCEPTS_ANY_LOCALE_NAME&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="8e6dc66871cca735678df0954175fa95cf018eb7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;SETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; if setuid scripts can be secure. This test looks in</source>
          <target state="translated">この変数は、setuidスクリプトが安全である場合、条件付きで &lt;code&gt;SETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; を定義します。このテストは</target>
        </trans-unit>
        <trans-unit id="81f004e1abf850968e0e52c15f9f6cad13d862f0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;SITEARCH&lt;/code&gt; to hold the pathname of architecture-dependent library files for $package. If $sitearch is the same as $archlib, then this is set to undef.</source>
          <target state="translated">この変数は、 &lt;code&gt;SITEARCH&lt;/code&gt; を条件付きで定義して、$ packageのアーキテクチャー依存のライブラリファイルのパス名を保持します。$ sitearchが$ archlibと同じ場合、これはundefに設定されます。</target>
        </trans-unit>
        <trans-unit id="8b1027f2dc2d15c75eedea147e9dd18e08a6014d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;STDCHAR&lt;/code&gt; to be the type of char used in</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;STDCHAR&lt;/code&gt; を、</target>
        </trans-unit>
        <trans-unit id="f33764730e4076b75f7a54ca0311a31df43bbaae" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;STDIO_CNT_LVALUE&lt;/code&gt; if the &lt;code&gt;FILE_cnt&lt;/code&gt; macro can be used as an lvalue.</source>
          <target state="translated">この変数は、 &lt;code&gt;FILE_cnt&lt;/code&gt; マクロを左辺値として使用できる場合、条件付きで &lt;code&gt;STDIO_CNT_LVALUE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="0e69f3a8bd1de18db50aaf0b9ef5033e3dafd978" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;STDIO_PTR_LVALUE&lt;/code&gt; if the &lt;code&gt;FILE_ptr&lt;/code&gt; macro can be used as an lvalue.</source>
          <target state="translated">この変数は、 &lt;code&gt;FILE_ptr&lt;/code&gt; マクロを左辺値として使用できる場合、条件付きで &lt;code&gt;STDIO_PTR_LVALUE&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="d7bc8c4e73c6aaa4fc8b7bd3db1eed9675bd50c1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_BSD_GETPGRP&lt;/code&gt; if getpgrp needs one arguments whereas &lt;code&gt;USG&lt;/code&gt; one needs none.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;USE_BSD_GETPGRP&lt;/code&gt; をのgetpgrpが、一方、1つの引数を必要とする場合 &lt;code&gt;USG&lt;/code&gt; 1人のニーズなし。</target>
        </trans-unit>
        <trans-unit id="4cb9da0f1f2c05f27c0a4f7de8f8706f136adf70" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_BSD_SETPGRP&lt;/code&gt; if setpgrp needs two arguments whereas &lt;code&gt;USG&lt;/code&gt; one needs none. See also d_setpgid for a &lt;code&gt;POSIX&lt;/code&gt; interface.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;USE_BSD_SETPGRP&lt;/code&gt; を定義します。setpgrpに 2つの引数が必要であるのに対し、 &lt;code&gt;USG&lt;/code&gt; には必要ない場合です。 &lt;code&gt;POSIX&lt;/code&gt; インターフェースについては、d_setpgidも参照してください。</target>
        </trans-unit>
        <trans-unit id="f057b25789e3d0c0c978f875ab711fef26822396" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_IOCNOTTY&lt;/code&gt; to indicate that the ioctl() call with &lt;code&gt;TIOCNOTTY&lt;/code&gt; should be used to void tty association. Otherwise (on &lt;code&gt;USG&lt;/code&gt; probably), it is enough to close the standard file descriptors and do a setpgrp().</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;USE_IOCNOTTY&lt;/code&gt; を有するのioctl（）呼び出したことを示すために &lt;code&gt;TIOCNOTTY&lt;/code&gt; が空隙TTYアソシエーションに使用されるべきです。それ以外の場合（おそらく &lt;code&gt;USG&lt;/code&gt; では）、標準のファイル記述子を閉じてsetpgrp（）を実行するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="c86f9683041fce14f0acc7f22e22cb66e7ecf21d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_SEMCTL_SEMID_DS&lt;/code&gt; , which indicates that struct semid_ds * is to be used for semctl &lt;code&gt;IPC_STAT&lt;/code&gt; .</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;USE_SEMCTL_SEMID_DS&lt;/code&gt; を定義します。これは、semictl &lt;code&gt;IPC_STAT&lt;/code&gt; に semid_ds *が使用されることを示します。</target>
        </trans-unit>
        <trans-unit id="1109513dd38439e5fff1a28d882ff5dff7ec9cbf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_SEMCTL_SEMID_DS&lt;/code&gt;, which indicates that struct semid_ds * is to be used for semctl &lt;code&gt;IPC_STAT&lt;/code&gt;.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;USE_SEMCTL_SEMID_DS&lt;/code&gt; を構造体たsemid_dsが*のsemctlに使用されることを示す、 &lt;code&gt;IPC_STAT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="165216a22f48262f27b72dd85b30d1c442227e08" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_SEMCTL_SEMUN&lt;/code&gt; , which indicates that union semun is to be used for semctl &lt;code&gt;IPC_STAT&lt;/code&gt; .</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;USE_SEMCTL_SEMUN&lt;/code&gt; を定義します。これは、union semunがsemctl &lt;code&gt;IPC_STAT&lt;/code&gt; に使用されることを示します。</target>
        </trans-unit>
        <trans-unit id="e4aafdea14d415917179c68732185373f4c70028" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_SEMCTL_SEMUN&lt;/code&gt;, which indicates that union semun is to be used for semctl &lt;code&gt;IPC_STAT&lt;/code&gt;.</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;USE_SEMCTL_SEMUN&lt;/code&gt; 組合semunがのsemctlに使用されることを示し、 &lt;code&gt;IPC_STAT&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d946a174db1c59c6d451a81dd08b793b70e50298" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_STAT_BLOCKS&lt;/code&gt; if this system has a stat structure declaring st_blksize and st_blocks.</source>
          <target state="translated">この変数が条件付きで &lt;code&gt;USE_STAT_BLOCKS&lt;/code&gt; を定義するのは、このシステムにst_blksizeおよびst_blocksを宣言するstat構造がある場合です。</target>
        </trans-unit>
        <trans-unit id="4f2a34f2d97a9448f367a3e7dc94f6a98d0c8541" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_STDIO_BASE&lt;/code&gt; if this system has a &lt;code&gt;FILE&lt;/code&gt; structure declaring a usable _base field (or equivalent) in</source>
          <target state="translated">この変数が &lt;code&gt;USE_STDIO_BASE&lt;/code&gt; を条件付きで定義するのは、このシステムに、使用可能な_baseフィールド（または同等のもの）を宣言する &lt;code&gt;FILE&lt;/code&gt; 構造がある場合です。</target>
        </trans-unit>
        <trans-unit id="884014009e45fc4b799369297408405b825f05ec" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;USE_STDIO_PTR&lt;/code&gt; if this system has a &lt;code&gt;FILE&lt;/code&gt; structure declaring usable _ptr and _cnt fields (or equivalent) in</source>
          <target state="translated">この変数が、 &lt;code&gt;USE_STDIO_PTR&lt;/code&gt; を条件付きで定義します。このシステムに、使用可能な_ptrおよび_cntフィールド（または同等のもの）を宣言する &lt;code&gt;FILE&lt;/code&gt; 構造がある場合</target>
        </trans-unit>
        <trans-unit id="e2ce6f3e2ba733cc080d545a7f5345eaada6b53b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;VOIDSIG&lt;/code&gt; if this system declares &quot;void (*signal(...))()&quot; in</source>
          <target state="translated">この変数は、条件付きで定義 &lt;code&gt;VOIDSIG&lt;/code&gt; を、このシステムは「無効（*信号（...））（）」内を宣言している場合</target>
        </trans-unit>
        <trans-unit id="c1b1eb5455ff0e45585c738f286f73520d2bda4a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines &lt;code&gt;VOID_CLOSEDIR&lt;/code&gt; if closedir() does not return a value.</source>
          <target state="translated">closedir（）が値を返さない場合、この変数は条件付きで &lt;code&gt;VOID_CLOSEDIR&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="f67d5b9663b7f0f671bc57d6208cef2ecf39a7bd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines CASTI32, which indicates whether the C compiler can cast large floats to 32-bit ints.</source>
          <target state="translated">この変数は条件付きでCASTI32を定義し、Cコンパイラがラージフロートを32ビットイントにキャストできるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="01b443cab6a6f837f35bbd4a8391036b60139696" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines HAS_ACCEPT4 if accept4() is available to accept socket connections.</source>
          <target state="translated">この変数は、ソケット接続を受け入れるために accept4()が利用可能な場合、条件付きで HAS_ACCEPT4 を定義します。</target>
        </trans-unit>
        <trans-unit id="1e0e56548eb03f6bba0bfbdaf1893bfedf8b743e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines HAS_DUP2 if dup2() is available to duplicate file descriptors.</source>
          <target state="translated">この変数は、ファイルディスクリプタを複製するために dup2()が利用可能な場合、条件付きで HAS_DUP2 を定義します。</target>
        </trans-unit>
        <trans-unit id="b26b7adde106aa6278ad18ec71be8d927043d6fd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines HAS_DUP3 if dup3() is available to duplicate file descriptors.</source>
          <target state="translated">この変数は、ファイルディスクリプタを複製するために dup3()が利用可能な場合、条件付きで HAS_DUP3 を定義します。</target>
        </trans-unit>
        <trans-unit id="439c57e77afcdbc973932168c0d12a970d487a4f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines HAS_LC_MONETARY_2008 if libc has the international currency locale rules from &lt;code&gt;POSIX&lt;/code&gt; 1003.1-2008.</source>
          <target state="translated">libcに &lt;code&gt;POSIX&lt;/code&gt; 1003.1-2008の国際通貨ロケールルールがある場合、この変数は条件付きでHAS_LC_MONETARY_2008を定義します。</target>
        </trans-unit>
        <trans-unit id="3d55d58456df494116e8e08588b498d9a5a4a48d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines d_dbl_dig if this system's header files provide &lt;code&gt;DBL_DIG&lt;/code&gt; , which is the number of significant digits in a double precision number.</source>
          <target state="translated">このシステムのヘッダーファイルが &lt;code&gt;DBL_DIG&lt;/code&gt; を提供する場合、この変数は条件付きでd_dbl_digを定義します。これは、倍精度数の有効桁数であるDBL_DIGです。</target>
        </trans-unit>
        <trans-unit id="26943f542b57e3d665241442f5609c91f668a2bc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines d_ldbl_dig if this system's header files provide &lt;code&gt;LDBL_DIG&lt;/code&gt; , which is the number of significant digits in a long double precision number.</source>
          <target state="translated">このシステムのヘッダーファイルが &lt;code&gt;LDBL_DIG&lt;/code&gt; を提供する場合、この変数は条件付きでd_ldbl_digを定義します。LDBL_DIG は、長い倍精度数の有効桁数です。</target>
        </trans-unit>
        <trans-unit id="0899cdd5463edd7d47e779f47e9d996e29a1d596" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines d_ldbl_dig if this system's header files provide &lt;code&gt;LDBL_DIG&lt;/code&gt;, which is the number of significant digits in a long double precision number.</source>
          <target state="translated">この変数は、このシステムのヘッダーファイルが &lt;code&gt;LDBL_DIG&lt;/code&gt; を提供する場合、条件付きでd_ldbl_digを定義します。これは、長い倍精度数の有効桁数です。</target>
        </trans-unit>
        <trans-unit id="41d4367b100c21704ff1afa07d5fcbbbff3622b5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines pthread_create_joinable. undef if</source>
          <target state="translated">この変数は条件付きで pthread_create_joinable を定義します。</target>
        </trans-unit>
        <trans-unit id="4e65c9696692a1039d19a96f88bbb8715e74549c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;CHSIZE&lt;/code&gt; symbol, which indicates to the C program that the chsize() routine is available to truncate files. You might need a -lx to get this routine.</source>
          <target state="translated">この変数は、 &lt;code&gt;CHSIZE&lt;/code&gt; シンボルを条件付きで定義します。これは、ファイルを切り捨てるためにchsize（）ルーチンが使用可能であることをCプログラムに示します。このルーチンを取得するには、-lxが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="846b0e7427992bb9738c034b084170cbd17a9268" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;CRYPT&lt;/code&gt; symbol, which indicates to the C program that the crypt() routine is available to encrypt passwords and the like.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;CRYPT&lt;/code&gt; シンボルを定義します。これは、crypt（）ルーチンがパスワードなどを暗号化するために使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="357bf08dc30645376499e133bedc6c5b51689b15" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;CSH&lt;/code&gt; symbol, which indicates to the C program that the C-shell exists.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;CSH&lt;/code&gt; シンボルを定義します。これは、CプログラムにCシェルが存在することを示します。</target>
        </trans-unit>
        <trans-unit id="e54e9f341c505bb1d2ec118651994c8e65d0f811" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;FCNTL_CAN_LOCK&lt;/code&gt; symbol and indicates whether file locking with fcntl() works.</source>
          <target state="translated">この変数は、 &lt;code&gt;FCNTL_CAN_LOCK&lt;/code&gt; シンボルを条件付きで定義し、fcntl（）によるファイルロックが機能するかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="02d3adba206dca72cb969c2114087d914736e57e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;FLEXFILENAMES&lt;/code&gt; symbol, which indicates that the system supports filenames longer than 14 characters.</source>
          <target state="translated">この変数は、 &lt;code&gt;FLEXFILENAMES&lt;/code&gt; シンボルを条件付きで定義します。これは、システムが14文字を超えるファイル名をサポートすることを示します。</target>
        </trans-unit>
        <trans-unit id="b6165df6dc3c074b8386cff10673ed582f2313bf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HASCONST&lt;/code&gt; symbol, which indicates to the C program that this C compiler knows about the const type.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HASCONST&lt;/code&gt; シンボルを定義します。これは、このCコンパイラーがconstタイプについて知っていることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="514ce51d44fd8efc6f22a726ff2d864524dc5927" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HASVOLATILE&lt;/code&gt; symbol, which indicates to the C program that this C compiler knows about the volatile declaration.</source>
          <target state="translated">この変数は &lt;code&gt;HASVOLATILE&lt;/code&gt; シンボルを条件付きで定義します。これは、このCコンパイラが揮発性宣言について知っていることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="3baa45e96d482436f92754c7ebdc6a73550f0eae" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ACCESSX&lt;/code&gt; symbol, which indicates to the C program that the accessx() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ACCESSX&lt;/code&gt; シンボルを定義します。これは、accessx（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="12a76ff5170c955de143e03f08fd4db9b4437e7b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ACOSH&lt;/code&gt; symbol, which indicates to the C program that the acosh() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ACOSH&lt;/code&gt; シンボルを条件付きで定義します。これは、acosh（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="3bbc6bd18282fbbaa0a5df512d46d448872f79f0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_AINTL&lt;/code&gt; symbol, which indicates to the C program that the aintl() routine is available. If copysignl is also present we can emulate modfl.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_AINTL&lt;/code&gt; シンボルを条件付きで定義します。これは、aintl（）ルーチンが使用可能であることをCプログラムに示します。copysignlも存在する場合は、modflをエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="ac4f3fc539e3b11a8b62b87684564e56d5832bdb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ALARM&lt;/code&gt; symbol, which indicates to the C program that the alarm() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ALARM&lt;/code&gt; シンボルを定義します。これは、alarm（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="393748ad8a6e58564f59c88a5a65a0fccff40956" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ASCTIME_R&lt;/code&gt; symbol, which indicates to the C program that the asctime_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ASCTIME_R&lt;/code&gt; シンボルを条件付きで定義します。これは、asctime_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="e6240de5e54fe3a786d797ae169f9a039181d8e9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ASINH&lt;/code&gt; symbol, which indicates to the C program that the asinh() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ASINH&lt;/code&gt; シンボルを条件付きで定義します。これは、asinh（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="968fc15f09fb64edc7440ecd0aed6b099eb7c13a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ATANH&lt;/code&gt; symbol, which indicates to the C program that the atanh() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ATANH&lt;/code&gt; シンボルを定義します。これは、Cプログラムにatanh（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="0b6ee241d9266a7948fd72b86cd3046b1822d99c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ATOLF&lt;/code&gt; symbol, which indicates to the C program that the atolf() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ATOLF&lt;/code&gt; シンボルを条件付きで定義します。これは、atolf（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="7f44fe9ea95c9ae1f907047c17022ef03aa1acbb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ATOLL&lt;/code&gt; symbol, which indicates to the C program that the atoll() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ATOLL&lt;/code&gt; シンボルを定義します。これは、atoll（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="d5e0162b328b8a9b754dac6231795ba2f27a65bb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_BACKTRACE&lt;/code&gt; symbol, which indicates to the C program that the backtrace() routine is available to get a stack trace.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_BACKTRACE&lt;/code&gt; シンボルを条件付きで定義します。これは、スタックトレースを取得するためにbacktrace（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="e96fa08dff1194cea11b6b542d4bb635e9998fe7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_BCMP&lt;/code&gt; symbol if the bcmp() routine is available to compare strings.</source>
          <target state="translated">文字列を比較するためにbcmp（）ルーチンを使用できる場合、この変数は条件付きで &lt;code&gt;HAS_BCMP&lt;/code&gt; シンボルを定義します。</target>
        </trans-unit>
        <trans-unit id="2c3a347a1f168f38f12b42fec82e5a9d4a71e447" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_BCOPY&lt;/code&gt; symbol if the bcopy() routine is available to copy strings.</source>
          <target state="translated">この変数は、bcopy（）ルーチンを使用して文字列をコピーできる場合に、条件付きで &lt;code&gt;HAS_BCOPY&lt;/code&gt; シンボルを定義します。</target>
        </trans-unit>
        <trans-unit id="fe7d21ac1bac028a9a4864da166ebd5752380e71" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_BZERO&lt;/code&gt; symbol if the bzero() routine is available to set memory to 0.</source>
          <target state="translated">この変数は、bzero（）ルーチンがメモリを0に設定できる場合に、 &lt;code&gt;HAS_BZERO&lt;/code&gt; シンボルを条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="6ca90016e7f6abf49f24d5147f764f4e266fad51" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CBRT&lt;/code&gt; symbol, which indicates to the C program that the cbrt() (cube root) function is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_CBRT&lt;/code&gt; シンボルを条件付きで定義します。これは、cbrt（）（キューブルート）関数が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="9190489c62bb031470f6a8b4f7cd7a1825719930" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CHOWN&lt;/code&gt; symbol, which indicates to the C program that the chown() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_CHOWN&lt;/code&gt; シンボルを定義します。これは、chown（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="ab782a1830d8f2fd000403d6b221d923f1975987" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CHROOT&lt;/code&gt; symbol, which indicates to the C program that the chroot() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_CHROOT&lt;/code&gt; シンボルを条件付きで定義します。これは、chroot（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="32e6c736a6ca4ad0fe4ee89e271bd5cc262bc051" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CLASS&lt;/code&gt; symbol, which indicates to the C program that the class() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_CLASS&lt;/code&gt; シンボルを定義します。これは、class（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="a075a89328697cbb603b70b3c6d8d110f118b481" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CLEARENV&lt;/code&gt; symbol, which indicates to the C program that the clearenv () routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_CLEARENV&lt;/code&gt; シンボルを定義します。これは、clearenv（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="74f77f33bb77370820b1492e4169ae2248f4c8c7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_COPYSIGN&lt;/code&gt; symbol, which indicates to the C program that the copysign() routine is available.</source>
          <target state="translated">この変数は &lt;code&gt;HAS_COPYSIGN&lt;/code&gt; シンボルを条件付きで定義します。これは、copysign（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="98b66499ba2e3361546a98261177f15a6de1a0f6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_COPYSIGNL&lt;/code&gt; symbol, which indicates to the C program that the copysignl() routine is available. If aintl is also present we can emulate modfl.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_COPYSIGNL&lt;/code&gt; シンボルを定義します。これは、copysignl（）ルーチンが使用可能であることをCプログラムに示します。aintlも存在する場合は、modflをエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="df0f6e4346afa66f63cca26a76d791fade6366c0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CRYPT_R&lt;/code&gt; symbol, which indicates to the C program that the crypt_r() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_CRYPT_R&lt;/code&gt; シンボルを定義します。これは、crypt_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="953edbb919ba277a0602d4f2fae83655b7094d65" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CTERMID_R&lt;/code&gt; symbol, which indicates to the C program that the ctermid_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_CTERMID_R&lt;/code&gt; シンボルを条件付きで定義します。これは、ctermid_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="88f0e31c279f299ee13d676f3280ed80bdc1ec78" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CTIME_R&lt;/code&gt; symbol, which indicates to the C program that the ctime_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_CTIME_R&lt;/code&gt; シンボルを条件付きで定義します。これは、ctime_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="f94152d7278e725fe89c658a702df792c385b802" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_CUSERID&lt;/code&gt; symbol, which indicates to the C program that the cuserid() routine is available to get character login names.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_CUSERID&lt;/code&gt; シンボルを条件付きで定義します。これは、cuserid（）ルーチンが文字のログイン名を取得できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="ce2c192cea1c48bf6a95dcfd9e173ca30310cf0e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DBMINIT_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the dbminit() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_DBMINIT_PROTO&lt;/code&gt; シンボルを条件付きで定義します。これは、システムがdbminit（）関数のプロトタイプを提供することをCプログラムに示します。それ以外の場合は、プログラムが提供します。</target>
        </trans-unit>
        <trans-unit id="9f277ae3e34118b1fe4f7a94827507d1e32928ea" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DIFFTIME&lt;/code&gt; symbol, which indicates to the C program that the difftime() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_DIFFTIME&lt;/code&gt; シンボルを条件付きで定義します。これは、difftime（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="a13740603c74d16121c0903202111151cb13d77c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DIRFD&lt;/code&gt; constant, which indicates to the C program that dirfd() is available to return the file descriptor of a directory stream.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_DIRFD&lt;/code&gt; 定数を条件付きで定義します。これは、dirfd（）がディレクトリストリームのファイル記述子を返すために使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="87bbbc4e9449012cc05f3e6c9ced36d1a9bc5f01" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DIR_DD_FD&lt;/code&gt; symbol, which indicates that the &lt;code&gt;DIR&lt;/code&gt; directory stream type contains a member variable called dd_fd.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_DIR_DD_FD&lt;/code&gt; シンボルを条件付きで定義します。これは、 &lt;code&gt;DIR&lt;/code&gt; ディレクトリストリームタイプにdd_fdというメンバー変数が含まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="ca28447a8986907b62f8a42e124cc4cf1327b826" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DLADDR&lt;/code&gt; symbol, which indicates to the C program that the dladdr() routine is available to get a stack trace.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_DLADDR&lt;/code&gt; シンボルを条件付きで定義します。これは、スタックトレースを取得するためにdladdr（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="44450e1cdbf629ec9119c59c9f90d2b874b7e95d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DLERROR&lt;/code&gt; symbol, which indicates to the C program that the dlerror() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_DLERROR&lt;/code&gt; シンボルを定義します。これは、Cプログラムにdlerror（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="ed1d2043eb098d6534774a50acff39bfc0910625" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DLOPEN&lt;/code&gt; symbol, which indicates to the C program that the dlopen() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_DLOPEN&lt;/code&gt; シンボルを定義します。これは、dlopen（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="da5e762f36d24957c21350e93040120e9b2b637e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_DUPLOCALE&lt;/code&gt; symbol, which indicates to the C program that the duplocale() routine is available to duplicate a locale object.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_DUPLOCALE&lt;/code&gt; シンボルを条件付きで定義します。これは、ロケールオブジェクトを複製するためにduplocale（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="feae0a63aaa2182b296fd904e1c563d6c234cfec" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_EACCESS&lt;/code&gt; symbol, which indicates to the C program that the eaccess() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_EACCESS&lt;/code&gt; シンボルを定義します。これは、eaccess（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="fc59246a386f8974acd05f0aa4d2f594daee00df" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDGRENT&lt;/code&gt; symbol, which indicates to the C program that the endgrent() routine is available for sequential access of the group database.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ENDGRENT&lt;/code&gt; シンボルを定義します。これは、endgrent（）ルーチンがグループデータベースの順次アクセスに使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="c3521391643a5fa8000971d289ffbc808252e90e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDGRENT_R&lt;/code&gt; symbol, which indicates to the C program that the endgrent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ENDGRENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、endgrent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="8ceecbf6a76e7908e513f849eb1de5b3d245fac5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDHOSTENT_R&lt;/code&gt; symbol, which indicates to the C program that the endhostent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ENDHOSTENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、endhostent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="85d098e6acbbd799d64738081bddb484d9041c70" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDNETENT_R&lt;/code&gt; symbol, which indicates to the C program that the endnetent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ENDNETENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、endnetent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="416322d92948c65411d0e4d7da6d1b4fcb72938b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDPROTOENT_R&lt;/code&gt; symbol, which indicates to the C program that the endprotoent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ENDPROTOENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、endprotoent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="93b579b440342c900503cc17debbb4a84724f3f2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDPWENT&lt;/code&gt; symbol, which indicates to the C program that the endpwent() routine is available for sequential access of the passwd database.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ENDPWENT&lt;/code&gt; シンボルを定義します。これは、endpwent（）ルーチンがpasswdデータベースの順次アクセスに使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="5fd0311a9220d51e48d013d60dc59e4fb98646e5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDPWENT_R&lt;/code&gt; symbol, which indicates to the C program that the endpwent_r() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ENDPWENT_R&lt;/code&gt; シンボルを定義します。これは、endpwent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="1975eb77352c3791983498df03109baa693a8003" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ENDSERVENT_R&lt;/code&gt; symbol, which indicates to the C program that the endservent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ENDSERVENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、endservent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="b18c6ff2e894197a9996c9fa5fb041fb1da60ebb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ERF&lt;/code&gt; symbol, which indicates to the C program that the erf() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ERF&lt;/code&gt; シンボルを定義します。これは、erf（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="11cfc319c8768f753a10806f70be842234f0d8c6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ERFC&lt;/code&gt; symbol, which indicates to the C program that the erfc() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ERFC&lt;/code&gt; シンボルを定義します。これは、erfc（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="607d8c09f8852e64deb233f04ab669fe416307e5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FAST_STDIO&lt;/code&gt; symbol, which indicates to the C program that the &quot;fast stdio&quot; is available to manipulate the stdio buffers directly.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FAST_STDIO&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、「高速stdio」がstdioバッファーを直接操作できることを示します。</target>
        </trans-unit>
        <trans-unit id="4ccef8ea96652d985074f68d669458feccd5e889" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FCHDIR&lt;/code&gt; symbol, which indicates to the C program that the fchdir() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FCHDIR&lt;/code&gt; シンボルを条件付きで定義します。これは、fchdir（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="2b2fd22f810dafdb7f08dee5c7b2267e8ea89ef0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FCHMOD&lt;/code&gt; symbol, which indicates to the C program that the fchmod() routine is available to change mode of opened files.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FCHMOD&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、fchmod（）ルーチンが開いているファイルのモードを変更できることを示します。</target>
        </trans-unit>
        <trans-unit id="b106888c38a0833e62ad3d18b096af53fba36f85" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FCHMODAT&lt;/code&gt; symbol, which indicates the &lt;code&gt;POSIX&lt;/code&gt; fchmodat() function is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;POSIX&lt;/code&gt; fchmodat（）関数が使用可能であることを示す &lt;code&gt;HAS_FCHMODAT&lt;/code&gt; シンボルを条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="9c49735af970135b28a3d9f02063c62ac7d11452" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FCHOWN&lt;/code&gt; symbol, which indicates to the C program that the fchown() routine is available to change ownership of opened files.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FCHOWN&lt;/code&gt; シンボルを条件付きで定義します。これは、開いているファイルの所有権を変更するためにfchown（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="f77965caac290b89da17681f28495b9f8fdfe67f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FCNTL&lt;/code&gt; symbol, and indicates whether the fcntl() function exists</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FCNTL&lt;/code&gt; シンボルを条件付きで定義し、fcntl（）関数が存在するかどうかを示します</target>
        </trans-unit>
        <trans-unit id="cee857783e2b5506137b733e1de2e80aa525f2cc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FDCLOSE&lt;/code&gt; symbol, which indicates to the C program that the fdclose() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FDCLOSE&lt;/code&gt; シンボルを定義します。これは、fdclose（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="a2fcb0bfc83505fad937da436d307c0c9ada3232" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FDIM&lt;/code&gt; symbol, which indicates to the C program that the fdim() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FDIM&lt;/code&gt; シンボルを条件付きで定義します。これは、fdim（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="11e2724a5c3ae4b7f0de83cc60d5928d8a3f4d81" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FINITE&lt;/code&gt; symbol, which indicates to the C program that the finite() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_FINITE&lt;/code&gt; シンボルを定義します。これは、Cプログラムにfinite（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="0caf0447193e8dd99c3be264377abad5f070779b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FINITEL&lt;/code&gt; symbol, which indicates to the C program that the finitel() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_FINITEL&lt;/code&gt; シンボルを定義します。これはCプログラムにfinitel（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="ef6f0d37edde2d9b9e3068f863ad72dfd028852d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FLOCK_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the flock() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FLOCK_PROTO&lt;/code&gt; シンボルを条件付きで定義します。これは、システムがflock（）関数のプロトタイプを提供することをCプログラムに示します。それ以外の場合は、プログラムが提供します。</target>
        </trans-unit>
        <trans-unit id="b7230abc643d63b3ff949047a34fa476fec01c89" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FMA&lt;/code&gt; symbol, which indicates to the C program that the fma() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FMA&lt;/code&gt; シンボルを条件付きで定義します。これは、fma（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="fe2ccccffbf8d2f15aa401771663c24fe0ef72b5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FMAX&lt;/code&gt; symbol, which indicates to the C program that the fmax() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FMAX&lt;/code&gt; シンボルを条件付きで定義します。これは、fmax（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="3df9fdbc0ab5f9af76565f047d2b383854350a70" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FMIN&lt;/code&gt; symbol, which indicates to the C program that the fmin() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FMIN&lt;/code&gt; シンボルを条件付きで定義します。これは、fmin（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="4c07c14ce41ab8f9b9c87417a26676cf07833635" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FORK&lt;/code&gt; symbol, which indicates to the C program that the fork() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FORK&lt;/code&gt; シンボルを条件付きで定義します。これは、fork（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="c926988df26ecaa58ebdfaa007ae97cb94e0a26e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FPATHCONF&lt;/code&gt; symbol, which indicates to the C program that the pathconf() routine is available to determine file-system related limits and options associated with a given open file descriptor.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_FPATHCONF&lt;/code&gt; シンボルを定義します。これは、Cプログラムに対して、指定されたオープンファイル記述子に関連付けられたファイルシステム関連の制限とオプションを決定するためにpathconf（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="9bbd2019de42dcc3e64e59b2a0a5d922b5b1d74e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FPCLASS&lt;/code&gt; symbol, which indicates to the C program that the fpclass() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FPCLASS&lt;/code&gt; シンボルを定義します。これは、fpclass（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="d5fe50cfedd8bbd389632006ec016bddca06ada9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FPCLASSIFY&lt;/code&gt; symbol, which indicates to the C program that the fpclassify() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FPCLASSIFY&lt;/code&gt; シンボルを定義します。これは、fpclassify（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="917f1d97f54623a4d5b664a0773e1e59567c63fe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FPCLASSL&lt;/code&gt; symbol, which indicates to the C program that the fpclassl() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FPCLASSL&lt;/code&gt; シンボルを定義します。これは、fpclassl（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="7d55b5137fd8aae7bd0294444ae3398b83ef2eb0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FP_CLASS&lt;/code&gt; symbol, which indicates to the C program that the fp_class() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_FP_CLASS&lt;/code&gt; シンボルを定義します。これは、fp_class（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="b4998906b4a9ccf7bdee0f004832d674aa7bbd9a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FP_CLASSIFY&lt;/code&gt; symbol, which indicates to the C program that the fp_classify() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FP_CLASSIFY&lt;/code&gt; シンボルを定義します。これは、fp_classify（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="41f0ce9e1b9e64ce9cd583c93400552f4e5a6a52" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FP_CLASSL&lt;/code&gt; symbol, which indicates to the C program that the fp_classl() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FP_CLASSL&lt;/code&gt; シンボルを定義します。これは、fp_classl（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="3413f93599429afe464b8d3f686c3db466d81209" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FREELOCALE&lt;/code&gt; symbol, which indicates to the C program that the freelocale() routine is available to deallocates the resources associated with a locale object.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FREELOCALE&lt;/code&gt; シンボルを条件付きで定義します。これは、ロケールオブジェクトに関連付けられたリソースの割り当てを解除するためにfreelocale（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="9a718ac3558705993c3b67243a1457d9b8addbd1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FREXPL&lt;/code&gt; symbol, which indicates to the C program that the frexpl() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FREXPL&lt;/code&gt; シンボルを定義します。これは、frexpl（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="80c041b61a3854b0c9acdcab50bfa3457a568fcc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FSEEKO&lt;/code&gt; symbol, which indicates to the C program that the fseeko() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FSEEKO&lt;/code&gt; シンボルを条件付きで定義します。これは、fseeko（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="4051a12dce9cc656f7cd21a6c5cca4ada63aa004" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FSTATFS&lt;/code&gt; symbol, which indicates to the C program that the fstatfs() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FSTATFS&lt;/code&gt; シンボルを条件付きで定義します。これは、fstatfs（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="376e9454716c971bba83efc24ced69d3a6928836" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FSTATVFS&lt;/code&gt; symbol, which indicates to the C program that the fstatvfs() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FSTATVFS&lt;/code&gt; シンボルを条件付きで定義します。これは、fstatvfs（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="435d2dacb00d4fba9f51b8f56fc86f2e5cd1c130" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FSYNC&lt;/code&gt; symbol, which indicates to the C program that the fsync() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FSYNC&lt;/code&gt; シンボルを条件付きで定義します。これは、fsync（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="3d1a5f264f0ada9a48dfb15cda9ab839d11e60e6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FTELLO&lt;/code&gt; symbol, which indicates to the C program that the ftello() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_FTELLO&lt;/code&gt; シンボルを定義します。これは、ftello（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="4064b0e9f22fe23434bd0ec738f58649333e1d6f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FTIME&lt;/code&gt; symbol, which indicates that the ftime() routine exists. The ftime() routine is basically a sub-second accuracy clock.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FTIME&lt;/code&gt; シンボルを条件付きで定義します。これは、ftime（）ルーチンが存在することを示します。ftime（）ルーチンは、基本的に1秒未満の精度の時計です。</target>
        </trans-unit>
        <trans-unit id="993d1a28d890386a8f56af4b9e1e99b1a4831c24" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_FUTIMES&lt;/code&gt; symbol, which indicates to the C program that the futimes() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_FUTIMES&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対してfutimes（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="430e1b55a3f8e2489975bca6250ad0a05f75ddda" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GAI_STRERROR&lt;/code&gt; symbol if the gai_strerror() routine is available and can be used to translate error codes returned by getaddrinfo() into human readable strings.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GAI_STRERROR&lt;/code&gt; （）ルーチンが使用可能な場合、HAS_GAI_STRERRORシンボルを条件付きで定義し、getaddrinfo（）によって返されるエラーコードを人間が読める文字列に変換するために使用できます。</target>
        </trans-unit>
        <trans-unit id="43ac0e0e1a1e5f5c73c1a3d69bc5a74620bbdbac" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETADDRINFO&lt;/code&gt; symbol, which indicates to the C program that the getaddrinfo() function is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_GETADDRINFO&lt;/code&gt; シンボルを定義します。これは、getaddrinfo（）関数が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="7cc91f8b53047d998123d92a6d27f96f7dfebc76" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETCWD&lt;/code&gt; symbol, which indicates to the C program that the getcwd() routine is available to get the current working directory.</source>
          <target state="translated">この変数は &lt;code&gt;HAS_GETCWD&lt;/code&gt; シンボルを条件付きで定義します。これは、現在の作業ディレクトリを取得するためにgetcwd（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="e7004f7e14bed6afec5bd1f4a037a94dbc84c28f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETFSSTAT&lt;/code&gt; symbol, which indicates to the C program that the getfsstat() routine is available.</source>
          <target state="translated">この変数は &lt;code&gt;HAS_GETFSSTAT&lt;/code&gt; シンボルを条件付きで定義します。これは、getfsstat（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="2938f1d0c5a29f26cd258b1d2d58005964b3f928" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETGRENT&lt;/code&gt; symbol, which indicates to the C program that the getgrent() routine is available for sequential access of the group database.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_GETGRENT&lt;/code&gt; シンボルを定義します。これは、Cプログラムに対して、グループデータベースへの順次アクセスにgetgrent（）ルーチンが使用できることを示します。</target>
        </trans-unit>
        <trans-unit id="09573807a7f9ee202cbace6d8d9b71d9e084b114" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETGRENT_R&lt;/code&gt; symbol, which indicates to the C program that the getgrent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETGRENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムにgetgrent_r（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="ffdee0c89f8e16f98534bde8ff72861b068f14e2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETGRGID_R&lt;/code&gt; symbol, which indicates to the C program that the getgrgid_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETGRGID_R&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、getgrgid_r（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="030e0d1f9c9ec5d5113cadafdb1d46cca6636eba" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETGRNAM_R&lt;/code&gt; symbol, which indicates to the C program that the getgrnam_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETGRNAM_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getgrnam_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="5df49eaa2617f7f95ae5a3bfea499bb49b6e147a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETGROUPS&lt;/code&gt; symbol, which indicates to the C program that the getgroups() routine is available to get the list of process groups.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETGROUPS&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、プロセスグループのリストを取得するためにgetgroups（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="800265a52655b0eed9fc30b1377171be6fe75acb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOSTBYADDR&lt;/code&gt; symbol, which indicates to the C program that the gethostbyaddr() routine is available to look up hosts by their &lt;code&gt;IP&lt;/code&gt; addresses.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOSTBYADDR&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、gethostbyaddr（）ルーチンが &lt;code&gt;IP&lt;/code&gt; アドレスでホストを検索できることを示します。</target>
        </trans-unit>
        <trans-unit id="3ea6fb7457d69ab022ea88e866995c66dd82da32" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOSTBYADDR_R&lt;/code&gt; symbol, which indicates to the C program that the gethostbyaddr_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOSTBYADDR_R&lt;/code&gt; シンボルを条件付きで定義します。これは、gethostbyaddr_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="f6e8e21dbcc61a6d007e0d9229782dc31b5d46a2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOSTBYNAME&lt;/code&gt; symbol, which indicates to the C program that the gethostbyname() routine is available to look up host names in some data base or other.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOSTBYNAME&lt;/code&gt; シンボルを条件付きで定義します。これは、gethostbyname（）ルーチンがデータベースなどのホスト名を検索できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="4bf98ecfa6e8572b6387b8b2c890ea9af37d6e48" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOSTBYNAME_R&lt;/code&gt; symbol, which indicates to the C program that the gethostbyname_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOSTBYNAME_R&lt;/code&gt; シンボルを条件付きで定義します。これは、gethostbyname_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="8ab2674e64e01f9d704936c384471673343e5f6d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOSTENT_R&lt;/code&gt; symbol, which indicates to the C program that the gethostent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOSTENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、gethostent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="b5275b5b15c84ca1128b06be5161f949867399a1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOSTNAME&lt;/code&gt; symbol, which indicates to the C program that the gethostname() routine may be used to derive the host name.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOSTNAME&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに、ホスト名を取得するためにgethostname（）ルーチンを使用できることを示します。</target>
        </trans-unit>
        <trans-unit id="db277869ea8d6e46267e65bb1f91f362288123a2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETHOST_PROTOS&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various gethost*() functions. See also</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETHOST_PROTOS&lt;/code&gt; シンボルを条件付きで定義します。これは、&amp;lt;netdb.h&amp;gt;がさまざまなgethost *（）関数のプロトタイプを提供することをCプログラムに示します。こちらもご覧ください</target>
        </trans-unit>
        <trans-unit id="6911ca40dacf0175aa25657133be0fd097867be4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETITIMER&lt;/code&gt; symbol, which indicates to the C program that the getitimer() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETITIMER&lt;/code&gt; シンボルを条件付きで定義します。これは、getitimer（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="f04b4d71f3b0d33d951527806b9faa1b90d89c13" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETLOGIN&lt;/code&gt; symbol, which indicates to the C program that the getlogin() routine is available to get the login name.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETLOGIN&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、getlogin（）ルーチンがログイン名を取得できることを示します。</target>
        </trans-unit>
        <trans-unit id="cf1e0fa70097167eda24ba22a85cbfefb047a83b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETLOGIN_R&lt;/code&gt; symbol, which indicates to the C program that the getlogin_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETLOGIN_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getlogin_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="3040c09147f006139a9558f8a311da05ada71cc3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETMNT&lt;/code&gt; symbol, which indicates to the C program that the getmnt() routine is available to retrieve one or more mount info blocks by filename.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETMNT&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、getmnt（）ルーチンがファイル名で1つ以上のマウント情報ブロックを取得できることを示します。</target>
        </trans-unit>
        <trans-unit id="df153c694674c9eb98ea57c25cde4b2529e93311" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETMNTENT&lt;/code&gt; symbol, which indicates to the C program that the getmntent() routine is available to iterate through mounted files to get their mount info.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_GETMNTENT&lt;/code&gt; シンボルを定義します。これは、マウントされたファイルを繰り返し処理してマウント情報を取得するためにgetmntent（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="998b35a864ca7293bfdbdc5a68d5a152a1d7c29e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNAMEINFO&lt;/code&gt; symbol, which indicates to the C program that the getnameinfo() function is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETNAMEINFO&lt;/code&gt; シンボルを条件付きで定義します。これは、getnameinfo（）関数が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="8474869224bdf2ca0fc35d392c15a984241143e3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNETBYADDR&lt;/code&gt; symbol, which indicates to the C program that the getnetbyaddr() routine is available to look up networks by their &lt;code&gt;IP&lt;/code&gt; addresses.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_GETNETBYADDR&lt;/code&gt; シンボルを定義します。これは、Cプログラムに対して、getnetbyaddr（）ルーチンが &lt;code&gt;IP&lt;/code&gt; アドレスでネットワークを検索できることを示します。</target>
        </trans-unit>
        <trans-unit id="f75e54ebc6a22f2ef91ec6d724d333f9d033387c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNETBYADDR_R&lt;/code&gt; symbol, which indicates to the C program that the getnetbyaddr_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETNETBYADDR_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getnetbyaddr_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="6b5ef841b8644e4d43f32175f64b87de38e60b50" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNETBYNAME&lt;/code&gt; symbol, which indicates to the C program that the getnetbyname() routine is available to look up networks by their names.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETNETBYNAME&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、getnetbyname（）ルーチンがネットワークを名前で検索できることを示します。</target>
        </trans-unit>
        <trans-unit id="721c47b838e08cebc4dfc525ba1a86bef8ed22b8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNETBYNAME_R&lt;/code&gt; symbol, which indicates to the C program that the getnetbyname_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETNETBYNAME_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getnetbyname_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="5e1f8d2dc25f66de5fe6af8a19d35c75f17a5000" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNETENT_R&lt;/code&gt; symbol, which indicates to the C program that the getnetent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETNETENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムにgetnetent_r（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="bceed1c7ecb752248dae3627ddd88c982cb3b42e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETNET_PROTOS&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various getnet*() functions. See also</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETNET_PROTOS&lt;/code&gt; シンボルを条件付きで定義します。これは、&amp;lt;netdb.h&amp;gt;がさまざまなgetnet *（）関数のプロトタイプを提供することをCプログラムに示します。こちらもご覧ください</target>
        </trans-unit>
        <trans-unit id="7aa9f35159df360d21bd577eca2bcbf715c7998d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPGID&lt;/code&gt; symbol, which indicates to the C program that the getpgid(pid) function is available to get the process group id.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_GETPGID&lt;/code&gt; シンボルを定義します。これは、Cプログラムに対して、プロセスグループIDを取得するためにgetpgid（pid）関数が使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="04f375e83ea7b8de60cfb2691530d1bc9774418d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPPID&lt;/code&gt; symbol, which indicates to the C program that the getppid() routine is available to get the parent process &lt;code&gt;ID&lt;/code&gt; .</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_GETPPID&lt;/code&gt; シンボルを定義します。これは、getppid（）ルーチンを使用して親プロセス &lt;code&gt;ID&lt;/code&gt; を取得できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="bd53aba7859e8609cee2c8eef7587e2855275107" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPPID&lt;/code&gt; symbol, which indicates to the C program that the getppid() routine is available to get the parent process &lt;code&gt;ID&lt;/code&gt;.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPPID&lt;/code&gt; シンボルを条件付きで定義します。これは、親プロセス &lt;code&gt;ID&lt;/code&gt; を取得するためにgetppid（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="7a78c1d0e9007adf39f8c4627cff4de19b836276" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPROTOBYNAME&lt;/code&gt; symbol, which indicates to the C program that the getprotobyname() routine is available to look up protocols by their name.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPROTOBYNAME&lt;/code&gt; シンボルを条件付きで定義します。これは、getprotobyname（）ルーチンがプロトコルを名前で検索できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="94ee0c74e30f9d4b71ac73fae7e719b93f83ff28" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPROTOBYNAME_R&lt;/code&gt; symbol, which indicates to the C program that the getprotobyname_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPROTOBYNAME_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getprotobyname_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="89d5b6b59bfef172f96bfa6cc53c69ec52250783" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPROTOBYNUMBER&lt;/code&gt; symbol, which indicates to the C program that the getprotobynumber() routine is available to look up protocols by their number.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPROTOBYNUMBER&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、getprotobynumber（）ルーチンがプロトコルを番号で検索できることを示します。</target>
        </trans-unit>
        <trans-unit id="368c95f7c37edd3f397895e63f2b56a7b2a21f03" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPROTOBYNUMBER_R&lt;/code&gt; symbol, which indicates to the C program that the getprotobynumber_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPROTOBYNUMBER_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getprotobynumber_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="d05bd546cb9ce10a4ef01cbbaaa2e5620cb6fb98" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPROTOENT_R&lt;/code&gt; symbol, which indicates to the C program that the getprotoent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPROTOENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getprotoent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="f547c005ea9729c6769bbf465f8db85dfc630fb1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPROTO_PROTOS&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various getproto*() functions. See also</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPROTO_PROTOS&lt;/code&gt; シンボルを条件付きで定義します。これは、&amp;lt;netdb.h&amp;gt;がさまざまなgetproto *（）関数のプロトタイプを提供することをCプログラムに示します。こちらもご覧ください</target>
        </trans-unit>
        <trans-unit id="eaee5a550cc6a07f34637bc2870d60dbfb57bba0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPWENT&lt;/code&gt; symbol, which indicates to the C program that the getpwent() routine is available for sequential access of the passwd database.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_GETPWENT&lt;/code&gt; シンボルを定義します。これは、Cプログラムに対して、getpwent（）ルーチンがpasswdデータベースの順次アクセスに使用できることを示します。</target>
        </trans-unit>
        <trans-unit id="0cfeae59d099abce81836530d715a51913eaf2a9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPWENT_R&lt;/code&gt; symbol, which indicates to the C program that the getpwent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPWENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムにgetpwent_r（）ルーチンが使用可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="9275e131831690787dbdc11f7dfcedfb8c9f2eda" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPWNAM_R&lt;/code&gt; symbol, which indicates to the C program that the getpwnam_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPWNAM_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getpwnam_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="8827a97094e26a9a854d28073049c8082dc5d239" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETPWUID_R&lt;/code&gt; symbol, which indicates to the C program that the getpwuid_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETPWUID_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getpwuid_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="ddc4a151da38a54d4688d4389e590a62e281759b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSERVBYNAME&lt;/code&gt; symbol, which indicates to the C program that the getservbyname() routine is available to look up services by their name.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSERVBYNAME&lt;/code&gt; シンボルを条件付きで定義します。これは、getservbyname（）ルーチンがサービスを名前で検索できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="f63223f218d82f595643d54737913a982ed89b01" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSERVBYNAME_R&lt;/code&gt; symbol, which indicates to the C program that the getservbyname_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSERVBYNAME_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getservbyname_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="2233b0d3a5dbbbc8649c940b930ca9249fb21aa0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSERVBYPORT&lt;/code&gt; symbol, which indicates to the C program that the getservbyport() routine is available to look up services by their port.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSERVBYPORT&lt;/code&gt; シンボルを条件付きで定義します。これは、ポートによってサービスを検索するためにgetservbyport（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="e47e4595e0b65cee2c0cb9c76e2aaaffe9e90733" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSERVBYPORT_R&lt;/code&gt; symbol, which indicates to the C program that the getservbyport_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSERVBYPORT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getservbyport_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="07df398a34922beccb5e215e721d52f31b38b932" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSERVENT_R&lt;/code&gt; symbol, which indicates to the C program that the getservent_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSERVENT_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getservent_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="08eec3a50cec026084bfb933ad487f92365051f3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSERV_PROTOS&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;netdb.h&amp;gt; supplies prototypes for the various getserv*() functions. See also</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSERV_PROTOS&lt;/code&gt; シンボルを条件付きで定義します。これは、&amp;lt;netdb.h&amp;gt;がさまざまなgetserv *（）関数のプロトタイプを提供することをCプログラムに示します。こちらもご覧ください</target>
        </trans-unit>
        <trans-unit id="6ee9b27273c95fe6af664a46ca2e4b018eb2a3bb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETSPNAM_R&lt;/code&gt; symbol, which indicates to the C program that the getspnam_r() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETSPNAM_R&lt;/code&gt; シンボルを条件付きで定義します。これは、getspnam_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="e672430eb4f4b23e7c8ea71a0d9547945979104c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GETTIMEOFDAY&lt;/code&gt; symbol, which indicates that the gettimeofday() system call exists (to obtain a sub-second accuracy clock). You should probably include &amp;lt;sys/resource.h&amp;gt;.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_GETTIMEOFDAY&lt;/code&gt; シンボルを条件付きで定義します。これは、gettimeofday（）システムコールが存在することを示します（1 秒未満の精度のクロックを取得するため）。おそらく&amp;lt;sys / resource.h&amp;gt;をインクルードする必要があります。</target>
        </trans-unit>
        <trans-unit id="84fced701ac1d8972ad41c237d19c362f2099ca2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_GMTIME_R&lt;/code&gt; symbol, which indicates to the C program that the gmtime_r() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_GMTIME_R&lt;/code&gt; シンボルを定義します。これは、gmtime_r（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="1fd3c7d3ad1a3dfa9df8edc33011f70a34e07812" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_HASMNTOPT&lt;/code&gt; symbol, which indicates to the C program that the hasmntopt() routine is available to query the mount options of file systems.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_HASMNTOPT&lt;/code&gt; シンボルを条件付きで定義します。これは、hasmntopt（）ルーチンがファイルシステムのマウントオプションを照会できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="00e5a920dcdf38a72d0e1f65eec67c25b8f6b02e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ILOGB&lt;/code&gt; symbol, which indicates to the C program that the ilogb() routine is available for extracting the exponent of double x as a signed integer.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ILOGB&lt;/code&gt; シンボルを定義します。これは、ilogb（）ルーチンがdouble xの指数を符号付き整数として抽出できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="08c0b5bc5432877b8453b37bdcbcd6004c0f3533" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ILOGBL&lt;/code&gt; symbol, which indicates to the C program that the ilogbl() routine is available for extracting the exponent of long double x as a signed integer. If scalbnl is also present we can emulate frexpl.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ILOGBL&lt;/code&gt; シンボルを定義します。これは、ilogbl（）ルーチンがlong double xの指数を符号付き整数として抽出できることをCプログラムに示します。scalbnlも存在する場合は、frexplをエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="d7a6e67ac883b1040cb0eb3aa3cd89d5352feb93" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_INETNTOP&lt;/code&gt; symbol, which indicates to the C program that the inet_ntop() function is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_INETNTOP&lt;/code&gt; シンボルを条件付きで定義します。これは、inet_ntop（）関数が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="22502f98a24d835efbc320660dd0c293f19ac278" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_INETPTON&lt;/code&gt; symbol, which indicates to the C program that the inet_pton() function is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_INETPTON&lt;/code&gt; シンボルを条件付きで定義します。これは、inet_pton（）関数が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="ff67d886f79098d9924c2d3ff3d0db78ccef4ffe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_INET_ATON&lt;/code&gt; symbol, which indicates to the C program that the inet_aton() function is available to parse &lt;code&gt;IP&lt;/code&gt; address &lt;code&gt;dotted-quad&lt;/code&gt; strings.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_INET_ATON&lt;/code&gt; シンボルを条件付きで定義します。これは、Cプログラムに対して、inet_aton（）関数が &lt;code&gt;IP&lt;/code&gt; アドレスの &lt;code&gt;dotted-quad&lt;/code&gt; 文字列の解析に使用できることを示します。</target>
        </trans-unit>
        <trans-unit id="ab41c4767757cf5520d581b43402f2b69d925446" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_IP_MREQ&lt;/code&gt; symbol, which indicates the availability of a struct ip_mreq.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_IP_MREQ&lt;/code&gt; シンボルを定義します。これは、struct ip_mreqの可用性を示します。</target>
        </trans-unit>
        <trans-unit id="55f85ff4272b951d973813125721ee335bf64458" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_IP_MREQ_SOURCE&lt;/code&gt; symbol, which indicates the availability of a struct ip_mreq_source.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_IP_MREQ_SOURCE&lt;/code&gt; シンボルを定義します。これは、struct ip_mreq_sourceの可用性を示します。</target>
        </trans-unit>
        <trans-unit id="72388a4f1ba17b3fd0e62b5152d323f4548da870" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISASCII&lt;/code&gt; constant, which indicates to the C program that isascii() is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISASCII&lt;/code&gt; 定数を定義し、isascii（）が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="5a5c21b2a9944da065cad96d5e707e6c815182d3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISBLANK&lt;/code&gt; constant, which indicates to the C program that isblank() is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISBLANK&lt;/code&gt; 定数を定義し、isblank（）が使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="fcfef1f9f54abc2b109ba1f21e62b9cb30d767cd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISFINITE&lt;/code&gt; symbol, which indicates to the C program that the isfinite() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISFINITE&lt;/code&gt; シンボルを定義します。これは、isfinite（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="b52552318ae18b7d8b2396ea779d84538ec17c45" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISFINITEL&lt;/code&gt; symbol, which indicates to the C program that the isfinitel() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ISFINITEL&lt;/code&gt; シンボルを条件付きで定義し、isfinitel（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="5cd5f09b0af60ecfb75127a22d7e1ee2c772c023" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISINF&lt;/code&gt; symbol, which indicates to the C program that the isinf() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISINF&lt;/code&gt; シンボルを定義します。これは、isinf（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="a94a2b2142e85325054f5f4823ba6b83d8fa642a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISINFL&lt;/code&gt; symbol, which indicates to the C program that the isinfl() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISINFL&lt;/code&gt; シンボルを定義します。これは、isinfl（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="e264280a9cf9d3d86b3d9d38e5fb7995161a3146" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISLESS&lt;/code&gt; symbol, which indicates to the C program that the isless() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_ISLESS&lt;/code&gt; シンボルを定義します。これは、isless（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="4fd09d1b06bd7c7d728ac0ffd960b30379c4a768" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISNAN&lt;/code&gt; symbol, which indicates to the C program that the isnan() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISNAN&lt;/code&gt; シンボルを定義します。これは、isnan（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="0ae4b6ae907fe92bcc5cb3aa1a2e0540e4b58a60" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISNANL&lt;/code&gt; symbol, which indicates to the C program that the isnanl() routine is available.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_ISNANL&lt;/code&gt; シンボルを定義します。これは、isnanl（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="94a6de8a4e8a40a43a72c3936b6277b9b9b82512" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ISNORMAL&lt;/code&gt; symbol, which indicates to the C program that the isnormal() routine is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;HAS_ISNORMAL&lt;/code&gt; シンボルを条件付きで定義し、isnormal（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="9461c7ba3e2b8bec7df67bc8c282aae74033fc39" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_KILLPG&lt;/code&gt; symbol, which indicates to the C program that the killpg() routine is available to kill process groups.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_KILLPG&lt;/code&gt; シンボルを定義します。これは、killpg（）ルーチンがプロセスグループを強制終了するために使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="274a3e469317759be16452a214542288c6b937a7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_LCHOWN&lt;/code&gt; symbol, which indicates to the C program that the lchown() routine is available to operate on a symbolic link (instead of following the link).</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_LCHOWN&lt;/code&gt; シンボルを定義します。これは、lchown（）ルーチンがシンボリックリンク（リンクをたどるのではなく）での操作に使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="0f56859453fc1d27f3f17bb37fc0a2d155502907" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_LDEXPL&lt;/code&gt; symbol, which indicates to the C program that the ldexpl() routine is available.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_LDEXPL&lt;/code&gt; シンボルを定義します。これは、ldexpl（）ルーチンが使用可能であることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="a37d8cf4a0848f3d9bb4cc5545717c3e60e45b64" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_LGAMMA&lt;/code&gt; symbol, which indicates to the C program that the lgamma() routine is available for the log gamma function. See also d_tgamma and d_lgamma_r.</source>
          <target state="translated">この変数は、条件付きで &lt;code&gt;HAS_LGAMMA&lt;/code&gt; シンボルを定義します。これは、Cプログラムに対して、lgamma（）ルーチンが対数ガンマ関数で使用できることを示します。d_tgammaおよびd_lgamma_rも参照してください。</target>
        </trans-unit>
        <trans-unit id="5b284947de52d44afb16de832ba8c676b549a69b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_LGAMMA_R&lt;/code&gt; symbol, which indicates to the C program that the lgamma_r() routine is available for the log gamma function, without using the global signgam variable.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_LGAMMA_R&lt;/code&gt; シンボルを定義します。これは、グローバルsigngam変数を使用せずに、ログガンマ関数にlgamma_r（）ルーチンが使用できることをCプログラムに示します。</target>
        </trans-unit>
        <trans-unit id="30fc562f2935f09f17639cc31ad06d2ee83886f0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_LINKAT&lt;/code&gt; symbol, which indicates the &lt;code&gt;POSIX&lt;/code&gt; linkat() function is available.</source>
          <target state="translated">この変数は、 &lt;code&gt;POSIX&lt;/code&gt; linkat（）関数が使用可能であることを示す &lt;code&gt;HAS_LINKAT&lt;/code&gt; シンボルを条件付きで定義します。</target>
        </trans-unit>
        <trans-unit id="ffb5213a88acb50acec17dbb6c54f9e6a79439a1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_LLRINT&lt;/code&gt; symbol, which indicates to the C program that the llrint() routine is available to return the long long value closest to (according to the current rounding mode) to x.</source>
          <target state="translated">この変数は条件付きで &lt;code&gt;HAS_LLRINT&lt;/code&gt; シンボルを定義します。これは、llrint（）ルーチンが（現在の丸めモードに従って）xに最も近いlong long値を返すために使用できることをCプログラムに示します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
