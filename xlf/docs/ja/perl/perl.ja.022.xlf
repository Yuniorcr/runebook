<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="d34178e964cf584fdf5806f55c96a0bc4853575e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt; blocks are run just after the unit which defined them has been compiled. The main program file and each module it loads are compilation units, as are string &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;s, run-time code compiled using the &lt;code&gt;(?{ })&lt;/code&gt; construct in a regex, calls to &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; FILE&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; FILE&lt;/code&gt; , and code after the &lt;code&gt;-e&lt;/code&gt; switch on the command line.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; ブロックは、それらを定義したユニットがコンパイルされた直後に実行されます。メインプログラムファイルと、各モジュールそれ負荷はとして文字列であり、コンパイル単位である &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を使用してコンパイルされたS、ランタイム・コード &lt;code&gt;(?{ })&lt;/code&gt; 正規表現で構築をするための呼び出し &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; FILE&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; FILE&lt;/code&gt; した後、及びコード &lt;code&gt;-e&lt;/code&gt; コマンドラインで切り替えます。</target>
        </trans-unit>
        <trans-unit id="d0b34c789eb4701c037da956f420b7e815dbc83a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt; blocks are run just after the unit which defined them has been compiled. The main program file and each module it loads are compilation units, as are string &lt;code&gt;eval&lt;/code&gt;s, run-time code compiled using the &lt;code&gt;(?{ })&lt;/code&gt; construct in a regex, calls to &lt;code&gt;do FILE&lt;/code&gt;, &lt;code&gt;require FILE&lt;/code&gt;, and code after the &lt;code&gt;-e&lt;/code&gt; switch on the command line.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; ブロックは、それらを定義したユニットがコンパイルされた直後に実行されます。メインプログラムファイルと、各モジュールそれ負荷はとして文字列であり、コンパイル単位である &lt;code&gt;eval&lt;/code&gt; を使用してコンパイルされたS、ランタイム・コード &lt;code&gt;(?{ })&lt;/code&gt; 正規表現で構築物を、の呼び出し &lt;code&gt;do FILE&lt;/code&gt; 、 &lt;code&gt;require FILE&lt;/code&gt; した後、及びコード &lt;code&gt;-e&lt;/code&gt; コマンドラインをオンにします。</target>
        </trans-unit>
        <trans-unit id="993680698e7847eec1247ae490639ce741c5d46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt; and &lt;code&gt;INIT&lt;/code&gt; code blocks are useful to catch the transition between the compilation phase and the execution phase of the main program.</source>
          <target state="translated">&lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、および &lt;code&gt;INIT&lt;/code&gt; コードブロックは、メインプログラムのコンパイルフェーズと実行フェーズの間の遷移をキャッチするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="29082300972578ac172b3bcf60b3baedc1711b19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNIVERSAL&lt;/code&gt; is the base class from which all blessed references inherit. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UNIVERSAL&lt;/code&gt; は、blessされたすべての参照が継承する基本クラスです。&lt;a href=&quot;perlobj&quot;&gt;perlobjを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="40ee2201428c064e4abefc93cea2f5adb84494a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UNIVERSAL&lt;/code&gt; provides the following methods:</source>
          <target state="translated">&lt;code&gt;UNIVERSAL&lt;/code&gt; は、以下のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="48bcc00e56d5f4d3ae407316df106ebd67bb3cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-16&lt;/code&gt; support in any software you're going to be using/interoperating with has probably been less tested then &lt;code&gt;UTF-8&lt;/code&gt; support</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 使用/相互運用する予定のソフトウェアでのUTF-16サポートは、 &lt;code&gt;UTF-8&lt;/code&gt; サポートよりもテストが少ない可能性があります。</target>
        </trans-unit>
        <trans-unit id="6668e1349203a01e97d9d0c7131694668cceca2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; coded data seamlessly passes traditional command piping (&lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;more&lt;/code&gt;, etc.) while &lt;code&gt;UTF-16&lt;/code&gt; coded data is likely to cause confusion (with its zero bytes, for example)</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 符号化されたデータは、シームレスに、伝統的なコマンド配管（通過 &lt;code&gt;cat&lt;/code&gt; 、 &lt;code&gt;more&lt;/code&gt; ながら、など） &lt;code&gt;UTF-16&lt;/code&gt; 符号化データが原因の混乱を可能性がある（そのゼロバイトで、例えば）</target>
        </trans-unit>
        <trans-unit id="8236e4ed6563ca685881ecd85fb5fbeb9a8352ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is internally known as &lt;code&gt;utf-8-strict&lt;/code&gt; . The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; は内部的に &lt;code&gt;utf-8-strict&lt;/code&gt; として知られています。チュートリアルでは、utf8が実際に内部で使用されている場合でも、一貫してUTF-8を使用します。これは、区別が難しい場合があり、ほとんど関係がないためです。</target>
        </trans-unit>
        <trans-unit id="155fb80f2152bf4ffcfd5f143e6e7654fb7aa8b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is internally known as &lt;code&gt;utf-8-strict&lt;/code&gt;. The tutorial uses UTF-8 consistently, even where utf8 is actually used internally, because the distinction can be hard to make, and is mostly irrelevant.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; は、内部的には &lt;code&gt;utf-8-strict&lt;/code&gt; として知られています。チュートリアルでは、utf8が実際に内部で使用されている場合でも、UTF-8を一貫して使用します。これは、区別が難しい場合があり、ほとんど関係がないためです。</target>
        </trans-unit>
        <trans-unit id="3f8de8fd8fcf48c479a5f2548a2ea84553cbb55d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is the official standard. &lt;code&gt;utf8&lt;/code&gt; is Perl's way of being liberal in what it accepts. If you have to communicate with things that aren't so liberal, you may want to consider using &lt;code&gt;UTF-8&lt;/code&gt; . If you have to communicate with things that are too liberal, you may have to use &lt;code&gt;utf8&lt;/code&gt; . The full explanation is in &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; は公式の標準です。 &lt;code&gt;utf8&lt;/code&gt; は、Perlが受け入れることを自由にする方法です。それほど自由でないものと通信する必要がある場合は、 &lt;code&gt;UTF-8&lt;/code&gt; の使用を検討してください。あまりにも自由度の &lt;code&gt;utf8&lt;/code&gt; ものと通信する必要がある場合は、utf8を使用する必要があります。完全な説明は&lt;a href=&quot;encode&quot;&gt;Encodeにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac5912852fa9a734f9b95a1101aa81c0d3a5bec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-8&lt;/code&gt; is the official standard. &lt;code&gt;utf8&lt;/code&gt; is Perl's way of being liberal in what it accepts. If you have to communicate with things that aren't so liberal, you may want to consider using &lt;code&gt;UTF-8&lt;/code&gt;. If you have to communicate with things that are too liberal, you may have to use &lt;code&gt;utf8&lt;/code&gt;. The full explanation is in &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;&quot;UTF-8 vs. utf8 vs. UTF8&quot; in Encode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; が公式の標準です。 &lt;code&gt;utf8&lt;/code&gt; は、Perlが受け入れるものを自由に扱う方法です。それほどリベラルではないものと通信する必要がある場合は、 &lt;code&gt;UTF-8&lt;/code&gt; の使用を検討することをお勧めします。リベラルすぎるものと通信する必要がある場合は、 &lt;code&gt;utf8&lt;/code&gt; を使用する必要があります。完全な説明は&lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;、Encodeの「UTF-8vs。utf8vs.UTF8」にあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9648b8e1ece55e870da0fa029a2d05ec2a1a49ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; and &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; both indicate a too short sequence. The difference is that &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; indicates always that there is an error, while &lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; means that an incomplete sequence was looked at. If no other flags are present, it means that the sequence was valid as far as it went. Depending on the application, this could mean one of three things:</source>
          <target state="translated">&lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; と &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; は、どちらもシーケンスが短すぎることを示しています。違いは、 &lt;code&gt;UTF8_GOT_NON_CONTINUATION&lt;/code&gt; は常にエラーがあることを示し、UTF8_GOT_SHORTは不完全なシーケンスが &lt;code&gt;UTF8_GOT_SHORT&lt;/code&gt; ことを意味することです。他のフラグが存在しない場合は、シーケンスが実行された限り有効であったことを意味します。アプリケーションに応じて、これは次の3つのいずれかを意味する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3c5ad314dc68bfcf9c5118562765d9026038fdea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Big5&lt;/code&gt; provides &lt;code&gt;weightBig5()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's big5han ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Big5&lt;/code&gt; は &lt;code&gt;weightBig5()&lt;/code&gt; を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、CLDRのbig5hanの順序でCJK統合漢字を調整します。</target>
        </trans-unit>
        <trans-unit id="bda35f95559414b24b0f7588f4920e637e99eecb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::GB2312&lt;/code&gt; provides &lt;code&gt;weightGB2312()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's gb2312han ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::GB2312&lt;/code&gt; は &lt;code&gt;weightGB2312()&lt;/code&gt; を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、CLDRのgb2312hanの順序でCJK統合漢字を調整します。</target>
        </trans-unit>
        <trans-unit id="50b93d61a2bcdb017d1da4cb4a7e3de0c0b6f57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::JISX0208&lt;/code&gt; provides &lt;code&gt;weightJISX0208()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of 6355 kanji (CJK Unified Ideographs) in the JIS X 0208 order.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::JISX0208&lt;/code&gt; は &lt;code&gt;weightJISX0208()&lt;/code&gt; を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、JIS X 0208の順序で6355漢字（CJK統合漢字）を調整します。</target>
        </trans-unit>
        <trans-unit id="57bd2e4df2dcc667d23fa9130f85c3c4fe05e14b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Korean&lt;/code&gt; provides &lt;code&gt;weightKorean()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's Korean ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Korean&lt;/code&gt; は &lt;code&gt;weightKorean()&lt;/code&gt; を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、CLDRの韓国語の順序でCJK統合漢字を調整します。</target>
        </trans-unit>
        <trans-unit id="fcdd09d4d7986483cdb514ee8d55c84344ad28e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Pinyin&lt;/code&gt; provides &lt;code&gt;weightPinyin()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's pinyin ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Pinyin&lt;/code&gt; は &lt;code&gt;weightPinyin()&lt;/code&gt; を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、CLDRの拼音の順序でCJK統合漢字を調整します。</target>
        </trans-unit>
        <trans-unit id="ffbba643a43bc8fa99d423cd8af99518aa199ed0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Stroke&lt;/code&gt; provides &lt;code&gt;weightStroke()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's stroke ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Stroke&lt;/code&gt; は &lt;code&gt;weightStroke()&lt;/code&gt; を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、CLDRのストローク順序の順序でCJK統合漢字を調整します。</target>
        </trans-unit>
        <trans-unit id="08cad4d3162f98026817fba4d323f45f7e7e8acc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::CJK::Zhuyin&lt;/code&gt; provides &lt;code&gt;weightZhuyin()&lt;/code&gt;, that is adequate for &lt;code&gt;overrideCJK&lt;/code&gt; of &lt;code&gt;Unicode::Collate&lt;/code&gt; and makes tailoring of CJK Unified Ideographs in the order of CLDR's zhuyin (bopomofo) ordering.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::CJK::Zhuyin&lt;/code&gt; &lt;code&gt;weightZhuyin()&lt;/code&gt; はweightZhuyin（）を提供し &lt;code&gt;overrideCJK&lt;/code&gt; は、 &lt;code&gt;Unicode::Collate&lt;/code&gt; overrideCJKに適切であり、CLDRの注音（ボポモフォ）の順序でCJK統合漢字を調整します。</target>
        </trans-unit>
        <trans-unit id="da0ed2cdd1ac72f2bf3f9e083bf202dcf2c866fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; is a subclass of &lt;code&gt;Unicode::Collate&lt;/code&gt; and methods other than &lt;code&gt;new&lt;/code&gt; are inherited from &lt;code&gt;Unicode::Collate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; は &lt;code&gt;Unicode::Collate&lt;/code&gt; サブクラスであり、 &lt;code&gt;new&lt;/code&gt; 以外のメソッドは &lt;code&gt;Unicode::Collate&lt;/code&gt; から継承されます。</target>
        </trans-unit>
        <trans-unit id="d7a0fc4be9864abfdfe213f730a836cf153d3d57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unix&lt;/code&gt; has a few filetypes that aren't supported on other platforms, like &lt;code&gt;Win32&lt;/code&gt; . If we encounter a &lt;code&gt;hardlink&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; we'll just try to make a copy of the original file, rather than throwing an error.</source>
          <target state="translated">&lt;code&gt;Unix&lt;/code&gt; には、 &lt;code&gt;Win32&lt;/code&gt; などの他のプラットフォームではサポートされていないファイルタイプがいくつかあります。 &lt;code&gt;hardlink&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; 発生した場合は、エラーをスローするのではなく、元のファイルのコピーを作成しようとします。</target>
        </trans-unit>
        <trans-unit id="a182b7c96cc889f6bd8227eeff8484aa3820a3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unix&lt;/code&gt; has a few filetypes that aren't supported on other platforms, like &lt;code&gt;Win32&lt;/code&gt;. If we encounter a &lt;code&gt;hardlink&lt;/code&gt; or &lt;code&gt;symlink&lt;/code&gt; we'll just try to make a copy of the original file, rather than throwing an error.</source>
          <target state="translated">&lt;code&gt;Unix&lt;/code&gt; には、 &lt;code&gt;Win32&lt;/code&gt; などの他のプラットフォームではサポートされていないファイルタイプがいくつかあります。 &lt;code&gt;hardlink&lt;/code&gt; または &lt;code&gt;symlink&lt;/code&gt; 発生した場合は、エラーをスローするのではなく、元のファイルのコピーを作成しようとします。</target>
        </trans-unit>
        <trans-unit id="6d74c9b056759689807d86e862d255692b030b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VEOF&lt;/code&gt;&lt;code&gt;VEOL&lt;/code&gt;&lt;code&gt;VERASE&lt;/code&gt;&lt;code&gt;VINTR&lt;/code&gt;&lt;code&gt;VKILL&lt;/code&gt;&lt;code&gt;VQUIT&lt;/code&gt;&lt;code&gt;VSUSP&lt;/code&gt;&lt;code&gt;VSTART&lt;/code&gt;&lt;code&gt;VSTOP&lt;/code&gt;&lt;code&gt;VMIN&lt;/code&gt;&lt;code&gt;VTIME&lt;/code&gt;&lt;code&gt;NCCS&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;VEOF&lt;/code&gt;&lt;code&gt;VEOL&lt;/code&gt;&lt;code&gt;VERASE&lt;/code&gt;&lt;code&gt;VINTR&lt;/code&gt;&lt;code&gt;VKILL&lt;/code&gt;&lt;code&gt;VQUIT&lt;/code&gt;&lt;code&gt;VSUSP&lt;/code&gt;&lt;code&gt;VSTART&lt;/code&gt;&lt;code&gt;VSTOP&lt;/code&gt;&lt;code&gt;VMIN&lt;/code&gt;&lt;code&gt;VTIME&lt;/code&gt;&lt;code&gt;NCCS&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e64ceff700bffb9b0e49ed00840d8567272b98d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VERSION&lt;/code&gt; can be called as either a class (static) method or an object method.</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; は、クラス（静的）メソッドまたはオブジェクトメソッドとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="53e5c5bf9414f45f9ee6cd495857a6d0af8135b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VERSION&lt;/code&gt; will return the value of the variable &lt;code&gt;$VERSION&lt;/code&gt; in the package the object is blessed into. If &lt;code&gt;REQUIRE&lt;/code&gt; is given then it will do a comparison and die if the package version is not greater than or equal to &lt;code&gt;REQUIRE&lt;/code&gt; , or if either &lt;code&gt;$VERSION&lt;/code&gt; or &lt;code&gt;REQUIRE&lt;/code&gt; is not a &quot;lax&quot; version number (as defined by the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module).</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; は、オブジェクトが祝福されているパッケージの変数 &lt;code&gt;$VERSION&lt;/code&gt; 値を返します。場合 &lt;code&gt;REQUIRE&lt;/code&gt; 与えられ、それは比較を行いますと、パッケージのバージョンがより大きくないか等しい場合死ぬ &lt;code&gt;REQUIRE&lt;/code&gt; 、またはいずれかの場合は &lt;code&gt;$VERSION&lt;/code&gt; または &lt;code&gt;REQUIRE&lt;/code&gt; （で定義されていない「緩い」バージョン番号である&lt;a href=&quot;version&quot;&gt;バージョンの&lt;/a&gt;モジュール）。</target>
        </trans-unit>
        <trans-unit id="325270b8b61d72ca064d946a7eaba60462295b3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VERSION&lt;/code&gt; will return the value of the variable &lt;code&gt;$VERSION&lt;/code&gt; in the package the object is blessed into. If &lt;code&gt;REQUIRE&lt;/code&gt; is given then it will do a comparison and die if the package version is not greater than or equal to &lt;code&gt;REQUIRE&lt;/code&gt;, or if either &lt;code&gt;$VERSION&lt;/code&gt; or &lt;code&gt;REQUIRE&lt;/code&gt; is not a &quot;lax&quot; version number (as defined by the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module).</source>
          <target state="translated">&lt;code&gt;VERSION&lt;/code&gt; は、オブジェクトが祝福されているパッケージ内の変数 &lt;code&gt;$VERSION&lt;/code&gt; 値を返します。場合 &lt;code&gt;REQUIRE&lt;/code&gt; 与えられ、それは比較を行いますと、パッケージのバージョンがより大きくないか等しい場合死ぬ &lt;code&gt;REQUIRE&lt;/code&gt; 、またはいずれかの場合は &lt;code&gt;$VERSION&lt;/code&gt; または &lt;code&gt;REQUIRE&lt;/code&gt; （で定義されていない「緩い」バージョン番号である&lt;a href=&quot;version&quot;&gt;バージョンの&lt;/a&gt;モジュール）。</target>
        </trans-unit>
        <trans-unit id="d09d07e4d00536d5b65342f6fda4e06e40de674a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WEXITSTATUS(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns the normal exit status of the child process (only meaningful if &lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; is true)</source>
          <target state="translated">&lt;code&gt;WEXITSTATUS(${^CHILD_ERROR_NATIVE})&lt;/code&gt; は、子プロセスの通常の終了ステータスを返します &lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; がtrueの場合にのみ意味があります）</target>
        </trans-unit>
        <trans-unit id="ba14e82200cc3ea888304902d4a8a4dbe69a35f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WHICH&lt;/code&gt; can be any of &lt;code&gt;PRIO_PROCESS&lt;/code&gt;, &lt;code&gt;PRIO_PGRP&lt;/code&gt; or &lt;code&gt;PRIO_USER&lt;/code&gt; imported from &lt;a href=&quot;posix#RESOURCE-CONSTANTS&quot;&gt;&quot;RESOURCE CONSTANTS&quot; in POSIX&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;WHICH&lt;/code&gt; は、のいずれかとすることができる &lt;code&gt;PRIO_PROCESS&lt;/code&gt; 、 &lt;code&gt;PRIO_PGRP&lt;/code&gt; または &lt;code&gt;PRIO_USER&lt;/code&gt; から輸入&lt;a href=&quot;posix#RESOURCE-CONSTANTS&quot;&gt;POSIXの「RESOURCE定数を」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50caa072d18e392639ac8cbf2652792fc96e056a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process exited normally (&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; or by falling off the end of &lt;code&gt;main()&lt;/code&gt; )</source>
          <target state="translated">&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; 子プロセスが（正常終了した場合に真を返す &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; または終了脱落によって &lt;code&gt;main()&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3c429b7be20772ea3ed8789304f68e213333fbd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process exited normally (&lt;code&gt;exit()&lt;/code&gt; or by falling off the end of &lt;code&gt;main()&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;WIFEXITED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; は、子プロセスが正常に終了した場合（ &lt;code&gt;exit()&lt;/code&gt; または &lt;code&gt;main()&lt;/code&gt; の終わりから外れた場合）にtrueを返します）</target>
        </trans-unit>
        <trans-unit id="4a10acdd8d4b5cbcaa19166a65359a79e72c10ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFEXITED&lt;/code&gt;&lt;code&gt;WEXITSTATUS&lt;/code&gt;&lt;code&gt;WIFSIGNALED&lt;/code&gt;&lt;code&gt;WTERMSIG&lt;/code&gt;&lt;code&gt;WIFSTOPPED&lt;/code&gt;&lt;code&gt;WSTOPSIG&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WIFEXITED&lt;/code&gt;&lt;code&gt;WEXITSTATUS&lt;/code&gt;&lt;code&gt;WIFSIGNALED&lt;/code&gt;&lt;code&gt;WTERMSIG&lt;/code&gt;&lt;code&gt;WIFSTOPPED&lt;/code&gt;&lt;code&gt;WSTOPSIG&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="913c2440e3192214324c69c5042c74731bd768ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process terminated because of a signal</source>
          <target state="translated">&lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; シグナルのために子プロセスが終了した場合、WIFSIGNALED（$ {^ CHILD_ERROR_NATIVE}）はtrueを返します</target>
        </trans-unit>
        <trans-unit id="d31cf55751c90a24957243f3a757494178f490f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process is currently stopped (can happen only if you specified the WUNTRACED flag to &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; は、子プロセスが現在停止している場合はtrueを返します（ &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt; に WUNTRACEDフラグを指定した場合にのみ発生します）</target>
        </trans-unit>
        <trans-unit id="2f5c7480a044543eb0b27617a59e1b6eadff4585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns true if the child process is currently stopped (can happen only if you specified the WUNTRACED flag to &lt;code&gt;waitpid()&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; は、子プロセスが現在停止している場合にtrueを返します（ &lt;code&gt;waitpid()&lt;/code&gt; にWUNTRACEDフラグを指定した場合にのみ発生する可能性があります）</target>
        </trans-unit>
        <trans-unit id="5e0ae9473f56b8cede4edc36cb20deb25c332b79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WNOHANG&lt;/code&gt;&lt;code&gt;WUNTRACED&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WNOHANG&lt;/code&gt;&lt;code&gt;WUNTRACED&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5c862071bd5aa21d5d7f098f0f89e7235360ec4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WSAEINTR&lt;/code&gt;&lt;code&gt;WSAEBADF&lt;/code&gt;&lt;code&gt;WSAEACCES&lt;/code&gt;&lt;code&gt;WSAEFAULT&lt;/code&gt;&lt;code&gt;WSAEINVAL&lt;/code&gt;&lt;code&gt;WSAEMFILE&lt;/code&gt;&lt;code&gt;WSAEWOULDBLOCK&lt;/code&gt;&lt;code&gt;WSAEINPROGRESS&lt;/code&gt;&lt;code&gt;WSAEALREADY&lt;/code&gt;&lt;code&gt;WSAENOTSOCK&lt;/code&gt;&lt;code&gt;WSAEDESTADDRREQ&lt;/code&gt;&lt;code&gt;WSAEMSGSIZE&lt;/code&gt;&lt;code&gt;WSAEPROTOTYPE&lt;/code&gt;&lt;code&gt;WSAENOPROTOOPT&lt;/code&gt;&lt;code&gt;WSAEPROTONOSUPPORT&lt;/code&gt;&lt;code&gt;WSAESOCKTNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEOPNOTSUPP&lt;/code&gt;&lt;code&gt;WSAEPFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEAFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEADDRINUSE&lt;/code&gt;&lt;code&gt;WSAEADDRNOTAVAIL&lt;/code&gt;&lt;code&gt;WSAENETDOWN&lt;/code&gt;&lt;code&gt;WSAENETUNREACH&lt;/code&gt;&lt;code&gt;WSAENETRESET&lt;/code&gt;&lt;code&gt;WSAECONNABORTED&lt;/code&gt;&lt;code&gt;WSAECONNRESET&lt;/code&gt;&lt;code&gt;WSAENOBUFS&lt;/code&gt;&lt;code&gt;WSAEISCONN&lt;/code&gt;&lt;code&gt;WSAENOTCONN&lt;/code&gt;&lt;code&gt;WSAESHUTDOWN&lt;/code&gt;&lt;code&gt;WSAETOOMANYREFS&lt;/code&gt;&lt;code&gt;WSAETIMEDOUT&lt;/code&gt;&lt;code&gt;WSAECONNREFUSED&lt;/code&gt;&lt;code&gt;WSAELOOP&lt;/code&gt;&lt;code&gt;WSAENAMETOOLONG&lt;/code&gt;&lt;code&gt;WSAEHOSTDOWN&lt;/code&gt;&lt;code&gt;WSAEHOSTUNREACH&lt;/code&gt;&lt;code&gt;WSAENOTEMPTY&lt;/code&gt;&lt;code&gt;WSAEPROCLIM&lt;/code&gt;&lt;code&gt;WSAEUSERS&lt;/code&gt;&lt;code&gt;WSAEDQUOT&lt;/code&gt;&lt;code&gt;WSAESTALE&lt;/code&gt;&lt;code&gt;WSAEREMOTE&lt;/code&gt;&lt;code&gt;WSAEDISCON&lt;/code&gt;&lt;code&gt;WSAENOMORE&lt;/code&gt;&lt;code&gt;WSAECANCELLED&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROCTABLE&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROVIDER&lt;/code&gt;&lt;code&gt;WSAEPROVIDERFAILEDINIT&lt;/code&gt;&lt;code&gt;WSAEREFUSED&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;WSAEINTR&lt;/code&gt;&lt;code&gt;WSAEBADF&lt;/code&gt;&lt;code&gt;WSAEACCES&lt;/code&gt;&lt;code&gt;WSAEFAULT&lt;/code&gt;&lt;code&gt;WSAEINVAL&lt;/code&gt;&lt;code&gt;WSAEMFILE&lt;/code&gt;&lt;code&gt;WSAEWOULDBLOCK&lt;/code&gt;&lt;code&gt;WSAEINPROGRESS&lt;/code&gt;&lt;code&gt;WSAEALREADY&lt;/code&gt;&lt;code&gt;WSAENOTSOCK&lt;/code&gt;&lt;code&gt;WSAEDESTADDRREQ&lt;/code&gt;&lt;code&gt;WSAEMSGSIZE&lt;/code&gt;&lt;code&gt;WSAEPROTOTYPE&lt;/code&gt;&lt;code&gt;WSAENOPROTOOPT&lt;/code&gt;&lt;code&gt;WSAEPROTONOSUPPORT&lt;/code&gt;&lt;code&gt;WSAESOCKTNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEOPNOTSUPP&lt;/code&gt;&lt;code&gt;WSAEPFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEAFNOSUPPORT&lt;/code&gt;&lt;code&gt;WSAEADDRINUSE&lt;/code&gt;&lt;code&gt;WSAEADDRNOTAVAIL&lt;/code&gt;&lt;code&gt;WSAENETDOWN&lt;/code&gt;&lt;code&gt;WSAENETUNREACH&lt;/code&gt;&lt;code&gt;WSAENETRESET&lt;/code&gt;&lt;code&gt;WSAECONNABORTED&lt;/code&gt;&lt;code&gt;WSAECONNRESET&lt;/code&gt;&lt;code&gt;WSAENOBUFS&lt;/code&gt;&lt;code&gt;WSAEISCONN&lt;/code&gt;&lt;code&gt;WSAENOTCONN&lt;/code&gt;&lt;code&gt;WSAESHUTDOWN&lt;/code&gt;&lt;code&gt;WSAETOOMANYREFS&lt;/code&gt;&lt;code&gt;WSAETIMEDOUT&lt;/code&gt;&lt;code&gt;WSAECONNREFUSED&lt;/code&gt;&lt;code&gt;WSAELOOP&lt;/code&gt;&lt;code&gt;WSAENAMETOOLONG&lt;/code&gt;&lt;code&gt;WSAEHOSTDOWN&lt;/code&gt;&lt;code&gt;WSAEHOSTUNREACH&lt;/code&gt;&lt;code&gt;WSAENOTEMPTY&lt;/code&gt;&lt;code&gt;WSAEPROCLIM&lt;/code&gt;&lt;code&gt;WSAEUSERS&lt;/code&gt;&lt;code&gt;WSAEDQUOT&lt;/code&gt;&lt;code&gt;WSAESTALE&lt;/code&gt;&lt;code&gt;WSAEREMOTE&lt;/code&gt;&lt;code&gt;WSAEDISCON&lt;/code&gt;&lt;code&gt;WSAENOMORE&lt;/code&gt;&lt;code&gt;WSAECANCELLED&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROCTABLE&lt;/code&gt;&lt;code&gt;WSAEINVALIDPROVIDER&lt;/code&gt;&lt;code&gt;WSAEPROVIDERFAILEDINIT&lt;/code&gt;&lt;code&gt;WSAEREFUSED&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6b1ff61466d78e7b46ba9478c03225a6e4901f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WSTOPSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns the signal the child process was stopped for (only meaningful if &lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; is true)</source>
          <target state="translated">&lt;code&gt;WSTOPSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; は、子プロセスが停止されたシグナルを返します（ &lt;code&gt;WIFSTOPPED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; がtrueの場合にのみ意味があります）</target>
        </trans-unit>
        <trans-unit id="6fce0cd0fb21ad8f415dada694b22cfb2560526f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WTERMSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; returns the signal the child process terminated for (only meaningful if &lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; is true)</source>
          <target state="translated">&lt;code&gt;WTERMSIG(${^CHILD_ERROR_NATIVE})&lt;/code&gt; は、子プロセスが終了したシグナルを返します（ &lt;code&gt;WIFSIGNALED(${^CHILD_ERROR_NATIVE})&lt;/code&gt; がtrueの場合にのみ意味があります）</target>
        </trans-unit>
        <trans-unit id="9280239300b5e2da4b3afad680afacc165216bc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WriteFile&lt;/code&gt; takes one optional argument. When called with one argument, it expects to be passed a filename. When called with no arguments, it defaults to the filename</source>
          <target state="translated">&lt;code&gt;WriteFile&lt;/code&gt; はオプションの引数を1つ取ります。引数を1つ指定して呼び出すと、ファイル名が渡されることが期待されます。引数なしで呼び出されると、デフォルトでファイル名になります</target>
        </trans-unit>
        <trans-unit id="1f09964bf66b2f253d1d0b56951b3810e5d395ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X&amp;lt;topic name&amp;gt;&lt;/code&gt; -- an index entry</source>
          <target state="translated">&lt;code&gt;X&amp;lt;topic name&amp;gt;&lt;/code&gt; -インデックスエントリ</target>
        </trans-unit>
        <trans-unit id="4bc2f93eb05588029257a866afb2ec29cefadaab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;XXX&lt;/code&gt; To do: Since compatibility can depend on compile time options (such as bincompat, longlong, etc.) it should (perhaps) be set by Configure, but currently it isn't. Currently, we read a hard-wired value from</source>
          <target state="translated">&lt;code&gt;XXX&lt;/code&gt; To do：互換性はコンパイル時のオプション（bincompat、longlongなど）に依存する可能性があるため、（おそらく）Configureで設定する必要がありますが、現在はそうではありません。現在、ハードワイヤード値を</target>
        </trans-unit>
        <trans-unit id="1d73e9513462d0441d882a14aedf29b4d48f493f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Y&lt;/code&gt; or &lt;code&gt;N&lt;/code&gt; designating if</source>
          <target state="translated">&lt;code&gt;Y&lt;/code&gt; または &lt;code&gt;N&lt;/code&gt; は、</target>
        </trans-unit>
        <trans-unit id="27c11c80d0abef9d58bbbf93ce2d9bb6be27b7d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Z&amp;lt;&amp;gt;&lt;/code&gt; -- a null (zero-effect) formatting code</source>
          <target state="translated">&lt;code&gt;Z&amp;lt;&amp;gt;&lt;/code&gt; -null（ゼロ効果）フォーマットコード</target>
        </trans-unit>
        <trans-unit id="63907946795eb9d983c7251fc87f03561c9ef960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Zip64&lt;/code&gt; will be automatically set, as needed, if working with the one-shot interface when the input is either a filename or a scalar reference.</source>
          <target state="translated">&lt;code&gt;Zip64&lt;/code&gt; 入力がファイル名またはスカラー参照のいずれかである場合にワンショットインターフェイスを使用する場合、Zip64は必要に応じて自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="9c080ff6a40a2d784f921c0451433798850e94e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[ ITEMS ]&lt;/code&gt; makes a new, anonymous array, and returns a reference to that array. &lt;code&gt;{ ITEMS }&lt;/code&gt; makes a new, anonymous hash, and returns a reference to that hash.</source>
          <target state="translated">&lt;code&gt;[ ITEMS ]&lt;/code&gt; 新しい匿名配列を作成し、その配列への参照を返します。 &lt;code&gt;{ ITEMS }&lt;/code&gt; は新しい匿名ハッシュを作成し、そのハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="1e197e33c6ccb5f4067a4525a2143eb1d616cb64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:ascii:]]&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;[[:ascii:]]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f37bb18db43b263ed54e8b3969a3b7847ffee7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[[:ascii:]]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[[:ascii:]]&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="2cfa2d0098181bbefe03441d8231e81eb9677e4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\A&lt;/code&gt; only matches at the beginning of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\A/&lt;/code&gt; is equivalent to &lt;code&gt;/^/&lt;/code&gt; . However, if the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/^/&lt;/code&gt; matches internal newlines, but the meaning of &lt;code&gt;/\A/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\A&lt;/code&gt; matches at the beginning of the string regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\A&lt;/code&gt; は文字列の先頭でのみ一致します。場合は &lt;code&gt;/m&lt;/code&gt; の修飾子が使用されていない場合、 &lt;code&gt;/\A/&lt;/code&gt; に相当します &lt;code&gt;/^/&lt;/code&gt; 。ただし、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されている場合、 &lt;code&gt;/^/&lt;/code&gt; 内部の改行に一致しますが、 &lt;code&gt;/\A/&lt;/code&gt; 意味は &lt;code&gt;/m&lt;/code&gt; 修飾子によって変更されません。 &lt;code&gt;\A&lt;/code&gt; は、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されているかどうかに関係なく、文字列の先頭で一致します。</target>
        </trans-unit>
        <trans-unit id="e50f906321e007a37b63b827ace3fa35f352a0f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\A&lt;/code&gt; only matches at the beginning of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\A/&lt;/code&gt; is equivalent to &lt;code&gt;/^/&lt;/code&gt;. However, if the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/^/&lt;/code&gt; matches internal newlines, but the meaning of &lt;code&gt;/\A/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\A&lt;/code&gt; matches at the beginning of the string regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\A&lt;/code&gt; は、文字列の先頭でのみ一致します。場合は &lt;code&gt;/m&lt;/code&gt; の修飾子が使用されていない場合、 &lt;code&gt;/\A/&lt;/code&gt; に相当します &lt;code&gt;/^/&lt;/code&gt; 。ただし、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されている場合、 &lt;code&gt;/^/&lt;/code&gt; 内部改行に一致しますが、 &lt;code&gt;/\A/&lt;/code&gt; 意味は &lt;code&gt;/m&lt;/code&gt; 修飾子によって変更されません。 &lt;code&gt;\A&lt;/code&gt; は、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されているかどうかに関係なく、文字列の先頭で一致します。</target>
        </trans-unit>
        <trans-unit id="6f53fba386e9c1d0f782db562212650e214f36ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\D&lt;/code&gt; is a negated &lt;code&gt;\d&lt;/code&gt;; it represents any other character than a digit, or &lt;code&gt;[^\d]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\D&lt;/code&gt; は否定された &lt;code&gt;\d&lt;/code&gt; です; 数字以外の文字、または &lt;code&gt;[^\d]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fef23e4d1b4ae86eeb209dd5770450d03008a5b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\F&lt;/code&gt; can be used to casefold all characters following, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. It provides the functionality similar to the &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;\F&lt;/code&gt; を使用して、次の &lt;code&gt;\E&lt;/code&gt; またはパターンの最後までのすべての文字を大文字にすることができます。 &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; 関数と同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="365839803ed113e88d1e4c38934367dd708136e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\F&lt;/code&gt; can be used to casefold all characters following, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. It provides the functionality similar to the &lt;code&gt;fc&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;\F&lt;/code&gt; を使用して、次の &lt;code&gt;\E&lt;/code&gt; またはパターンの終わりまでのすべての文字を大文字と小文字を区別できます。 &lt;code&gt;fc&lt;/code&gt; 関数と同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="29175559120891c17a696d6942f87d50d6868998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; is also invaluable in processing fixed-length records with regexps. Suppose we have a snippet of coding region DNA, encoded as base pair letters &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; and we want to find all the stop codons &lt;code&gt;TGA&lt;/code&gt; . In a coding region, codons are 3-letter sequences, so we can think of the DNA snippet as a sequence of 3-letter records. The naive regexp</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; は、正規表現を使用した固定長レコードの処理にも非常に役立ちます。塩基対文字 &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; としてエンコードされたコーディング領域DNAのスニペットがあり、すべてのストップコドン &lt;code&gt;TGA&lt;/code&gt; を見つけたいとします。コード領域では、コドンは3文字のシーケンスなので、DNAスニペットは3文字のレコードのシーケンスと考えることができます。素朴な正規表現</target>
        </trans-unit>
        <trans-unit id="1dd50305d5ec65e04a41dcb9f7d034a715808afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; is also invaluable in processing fixed-length records with regexps. Suppose we have a snippet of coding region DNA, encoded as base pair letters &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; and we want to find all the stop codons &lt;code&gt;TGA&lt;/code&gt;. In a coding region, codons are 3-letter sequences, so we can think of the DNA snippet as a sequence of 3-letter records. The naive regexp</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; は、正規表現を使用して固定長レコードを処理する場合にも非常に役立ちます。塩基対文字 &lt;code&gt;ATCGTTGAAT...&lt;/code&gt; としてエンコードされたコーディング領域DNAのスニペットがあり、すべての停止コドン &lt;code&gt;TGA&lt;/code&gt; を検索するとします。コード領域では、コドンは3文字の配列であるため、DNAスニペットは3文字のレコードの配列と考えることができます。素朴な正規表現</target>
        </trans-unit>
        <trans-unit id="bc01fdb07dcb48f3990f7e9986cc181c1d1aa3c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; is usually used only in combination with the &lt;code&gt;/g&lt;/code&gt; modifier. If the &lt;code&gt;/g&lt;/code&gt; modifier is used and the match is done in scalar context, Perl remembers where in the source string the last match ended, and the next time, it will start the match from where it ended the previous time.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; は通常、 &lt;code&gt;/g&lt;/code&gt; 修飾子との組み合わせでのみ使用されます。場合 &lt;code&gt;/g&lt;/code&gt; の修飾子が使用され、一致がスカラコンテキストで実行され、Perlはどこ最後のマッチが終了したソース文字列、および次回で覚えて、それが前回終了した場所から試合を開始します。</target>
        </trans-unit>
        <trans-unit id="fab760e95f43824629065b7030ad07437049f251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\G&lt;/code&gt; matches the point where the previous match on that string ended, or the beginning of that string if there was no previous match.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; は、その文字列での以前の一致が終了した点、または以前の一致がなかった場合はその文字列の先頭と一致します。</target>
        </trans-unit>
        <trans-unit id="caee3f50983ee96aea6298365c6e4a735aeffd91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; , and &lt;code&gt;\Q&lt;/code&gt; can stack, in which case you need one &lt;code&gt;\E&lt;/code&gt; for each. For example:</source>
          <target state="translated">&lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\F&lt;/code&gt; 、および &lt;code&gt;\Q&lt;/code&gt; はスタックできます。その場合、それぞれに1つの &lt;code&gt;\E&lt;/code&gt; が必要です。例えば：</target>
        </trans-unit>
        <trans-unit id="5909711f4ae861799ae1fae7c311412305b8ff53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\F&lt;/code&gt;, and &lt;code&gt;\Q&lt;/code&gt; can stack, in which case you need one &lt;code&gt;\E&lt;/code&gt; for each. For example:</source>
          <target state="translated">&lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\F&lt;/code&gt; 、および &lt;code&gt;\Q&lt;/code&gt; はスタックできます。その場合、それぞれに1つの &lt;code&gt;\E&lt;/code&gt; が必要です。例えば：</target>
        </trans-unit>
        <trans-unit id="88b715a8c878ff64b76422f5de0db4d867e6df23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt; , available starting in v5.12, like the dot, matches any character that is not a newline. The difference is that &lt;code&gt;\N&lt;/code&gt; is not influenced by the</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 、v5.12以降、ドットと同様に、改行ではないすべての文字に一致します。違いは、 &lt;code&gt;\N&lt;/code&gt; が影響を受けないことです。</target>
        </trans-unit>
        <trans-unit id="80779fa1da204f29defd5bf097dbba87c9107e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt; within a bracketed character class must be of the forms &lt;code&gt;\N{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; or &lt;code&gt;\N{U+&lt;i&gt;hex char&lt;/i&gt;}&lt;/code&gt;, and NOT be the form that matches non-newlines, for the same reason that a dot &lt;code&gt;.&lt;/code&gt; inside a bracketed character class loses its special meaning: it matches nearly anything, which generally isn't what you want to happen.</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; 括弧で囲まれた文字クラス内の\ Nは、 &lt;code&gt;\N{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; または &lt;code&gt;\N{U+&lt;i&gt;hex char&lt;/i&gt;}&lt;/code&gt; の形式である必要があり、ドットと同じ理由で、改行以外と一致する形式であってはなりません &lt;code&gt;.&lt;/code&gt; 括弧で囲まれた文字クラス内では、その特別な意味が失われます。ほとんどすべてに一致しますが、これは通常、発生したいことではありません。</target>
        </trans-unit>
        <trans-unit id="e6d81a41dd89c6b0d1f649e117d863c99956c556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt;, available starting in v5.12, like the dot, matches any character that is not a newline. The difference is that &lt;code&gt;\N&lt;/code&gt; is not influenced by the</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; ドットのように、v5.12以降で使用可能な\ Nは、改行ではないすべての文字に一致します。違いは、 &lt;code&gt;\N&lt;/code&gt; は影響を受けないことです</target>
        </trans-unit>
        <trans-unit id="69b5f532beea0b3b2b86d420fa419b0ed4b659f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N&lt;/code&gt;, like the period, matches any character but &lt;code&gt;&quot;\n&quot;&lt;/code&gt;, but it does so regardless of whether the modifier &lt;code&gt;/s&lt;/code&gt; is in effect.</source>
          <target state="translated">&lt;code&gt;\N&lt;/code&gt; は、ピリオドと同様に、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 以外の任意の文字と一致しますが、修飾子 &lt;code&gt;/s&lt;/code&gt; が有効であるかどうかに関係なく一致します。</target>
        </trans-unit>
        <trans-unit id="2706754019f77a1fbbc94bb64673d2224cda545c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\N{U+&lt;i&gt;hexadecimal number&lt;/i&gt;}&lt;/code&gt; means the Unicode character whose Unicode code point is</source>
          <target state="translated">&lt;code&gt;\N{U+&lt;i&gt;hexadecimal number&lt;/i&gt;}&lt;/code&gt; は、Unicodeコードポイントが</target>
        </trans-unit>
        <trans-unit id="3d883253a04efed05a5ba1744b87b2c80c0e4bf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; are actually part of double-quotish syntax, and not part of regexp syntax proper. They will work if they appear in a regular expression embedded directly in a program, but not when contained in a string that is interpolated in a pattern.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、 &lt;code&gt;\E&lt;/code&gt; は実際には二重引用符構文の一部であり、正規表現構文の一部ではありません。これらは、プログラムに直接埋め込まれた正規表現に含まれている場合は機能しますが、パターンに補間された文字列に含まれている場合は機能しません。</target>
        </trans-unit>
        <trans-unit id="b7ed1242ac7474e94b7458c0ba21e510aab5efa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; (possibly paired with &lt;code&gt;\E&lt;/code&gt; ) are converted to corresponding Perl constructs. Thus, &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; is converted to &lt;code&gt;$foo . (&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;(&quot;baz&quot; . $bar))&lt;/code&gt; internally. The other escape sequences such as &lt;code&gt;\200&lt;/code&gt; and &lt;code&gt;\t&lt;/code&gt; and backslashed characters such as &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\-&lt;/code&gt; are replaced with appropriate expansions.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\F&lt;/code&gt; （おそらく &lt;code&gt;\E&lt;/code&gt; とペアになっている）は対応するPerl構成に変換されます。したがって、 &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; は &lt;code&gt;$foo . (&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;(&quot;baz&quot; . $bar))&lt;/code&gt; 変換されます。 （quotemeta（ &quot;baz&quot;。$ bar））内部的に。 &lt;code&gt;\200&lt;/code&gt; や &lt;code&gt;\t&lt;/code&gt; などの他のエスケープシーケンスと、 &lt;code&gt;\\&lt;/code&gt; や &lt;code&gt;\-&lt;/code&gt; などのバックスラッシュ文字は、適切な展開で置き換えられます。</target>
        </trans-unit>
        <trans-unit id="ad0b64315a3fe9c58415fa16564b8e316472bbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; is used to quote (disable) pattern metacharacters, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. &lt;code&gt;\Q&lt;/code&gt; adds a backslash to any character that could have special meaning to Perl. In the ASCII range, it quotes every character that isn't a letter, digit, or underscore. See &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt; for details on what gets quoted for non-ASCII code points. Using this ensures that any character between &lt;code&gt;\Q&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; will be matched literally, not interpreted as a metacharacter by the regex engine.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; は、次の &lt;code&gt;\E&lt;/code&gt; またはパターンの終わりまでのパターンメタ文字を引用（無効）するために使用されます。 &lt;code&gt;\Q&lt;/code&gt; は、Perlにとって特別な意味を持つ可能性のある文字にバックスラッシュを追加します。ASCII範囲では、文字、数字、アンダースコア以外のすべての文字を引用符で囲みます。非ASCIIコードポイントで引用されるものの詳細については&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;を参照してください。これを使用すると、 &lt;code&gt;\Q&lt;/code&gt; と &lt;code&gt;\E&lt;/code&gt; 間のすべての文字が文字どおりに一致し、正規表現エンジンによってメタ文字として解釈されなくなります。</target>
        </trans-unit>
        <trans-unit id="b2d3b5ecfda1f481831379606005c6fdc0235a92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt; is used to quote (disable) pattern metacharacters, up to the next &lt;code&gt;\E&lt;/code&gt; or the end of the pattern. &lt;code&gt;\Q&lt;/code&gt; adds a backslash to any character that could have special meaning to Perl. In the ASCII range, it quotes every character that isn't a letter, digit, or underscore. See &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;&quot;quotemeta&quot; in perlfunc&lt;/a&gt; for details on what gets quoted for non-ASCII code points. Using this ensures that any character between &lt;code&gt;\Q&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; will be matched literally, not interpreted as a metacharacter by the regex engine.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; は、次の &lt;code&gt;\E&lt;/code&gt; またはパターンの終わりまでのパターンメタ文字を引用（無効化）するために使用されます。 &lt;code&gt;\Q&lt;/code&gt; は、Perlにとって特別な意味を持つ可能性のある文字に円記号を追加します。 ASCII範囲では、文字、数字、またはアンダースコア以外のすべての文字を引用符で囲みます。参照してください&lt;a href=&quot;perlfunc#quotemeta&quot;&gt;perlfuncの中で「quotemetaを」&lt;/a&gt;非ASCIIコードポイントのために引用されます何の詳細については。これを使用すると、 &lt;code&gt;\Q&lt;/code&gt; と &lt;code&gt;\E&lt;/code&gt; 間のすべての文字が文字通り一致し、正規表現エンジンによってメタ文字として解釈されなくなります。</target>
        </trans-unit>
        <trans-unit id="c9799ed12cbfcbc248ce704b4b60109bd99ced67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt; are actually part of double-quotish syntax, and not part of regexp syntax proper. They will work if they appear in a regular expression embedded directly in a program, but not when contained in a string that is interpolated in a pattern.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\E&lt;/code&gt; は、実際には二重引用符の構文の一部であり、正規表現構文の一部ではありません。これらは、プログラムに直接埋め込まれた正規表現に含まれている場合は機能しますが、パターンに補間された文字列に含まれている場合は機能しません。</target>
        </trans-unit>
        <trans-unit id="31b2da020c4ab183ef1012c1e82d0c6206ed9968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\Q&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\F&lt;/code&gt; (possibly paired with &lt;code&gt;\E&lt;/code&gt;) are converted to corresponding Perl constructs. Thus, &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; is converted to &lt;code&gt;$foo . (quotemeta(&quot;baz&quot; . $bar))&lt;/code&gt; internally. The other escape sequences such as &lt;code&gt;\200&lt;/code&gt; and &lt;code&gt;\t&lt;/code&gt; and backslashed characters such as &lt;code&gt;\\&lt;/code&gt; and &lt;code&gt;\-&lt;/code&gt; are replaced with appropriate expansions.</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\F&lt;/code&gt; （おそらく &lt;code&gt;\E&lt;/code&gt; とペアになっている）は、対応するPerl構造に変換されます。したがって、 &lt;code&gt;&quot;$foo\Qbaz$bar&quot;&lt;/code&gt; は &lt;code&gt;$foo . (quotemeta(&quot;baz&quot; . $bar))&lt;/code&gt; 変換されます。（quotemeta（ &quot;baz&quot;。$ bar））内部的に。 &lt;code&gt;\200&lt;/code&gt; や &lt;code&gt;\t&lt;/code&gt; などの他のエスケープシーケンス、および &lt;code&gt;\\&lt;/code&gt; や &lt;code&gt;\-&lt;/code&gt; などのバックスラッシュ文字は、適切な展開に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="96fdb89c706826e363f4d1a15c85386d62762386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\R&lt;/code&gt; matches a</source>
          <target state="translated">&lt;code&gt;\R&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="8ffa61af84fa5204640b2d3a9297ad766cd2302f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\R&lt;/code&gt; matches anything that can be considered a newline under Unicode rules. It can match a multi-character sequence. It cannot be used inside a bracketed character class; use &lt;code&gt;\v&lt;/code&gt; instead (vertical whitespace). It uses the platform's native character set, and does not consider any locale that may otherwise be in use. Details are discussed in &lt;a href=&quot;perlrebackslash&quot;&gt;perlrebackslash&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\R&lt;/code&gt; は、Unicodeルールの下で改行と見なせるものに一致します。複数文字のシーケンスに一致させることができます。括弧で囲まれた文字クラス内では使用できません。使用 &lt;code&gt;\v&lt;/code&gt; の代わりに（縦方向の空白）。プラットフォームのネイティブ文字セットを使用し、他の方法で使用されている可能性のあるロケールは考慮しません。詳細は&lt;a href=&quot;perlrebackslash&quot;&gt;perlrebackslashで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="a06cae4c5b667f92e564253136f924fbd5c999da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\S&lt;/code&gt; is a negated &lt;code&gt;\s&lt;/code&gt;; it represents any non-whitespace character &lt;code&gt;[^\s]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\S&lt;/code&gt; は否定された &lt;code&gt;\s&lt;/code&gt; です; 空白以外の文字を表します &lt;code&gt;[^\s]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9219cc84269298f3472b27e9a771ce07439ec14c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\W&lt;/code&gt; is a negated &lt;code&gt;\w&lt;/code&gt;; it represents any non-word character &lt;code&gt;[^\w]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\W&lt;/code&gt; は否定された &lt;code&gt;\w&lt;/code&gt; です; 単語以外の文字を表します &lt;code&gt;[^\w]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c079457c2c94c9296bb94d74fe70faff7c8e990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\X&lt;/code&gt; is an abbreviation for a character class that comprises a Unicode</source>
          <target state="translated">&lt;code&gt;\X&lt;/code&gt; は、Unicodeを構成する文字クラスの略語です。</target>
        </trans-unit>
        <trans-unit id="55e23bb607e060dee7b3f1229c353a21e48fea15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\X&lt;/code&gt; matches quite well what normal (non-Unicode-programmer) usage would consider a single character. As an example, consider a G with some sort of diacritic mark, such as an arrow. There is no such single character in Unicode, but one can be composed by using a G followed by a Unicode &quot;COMBINING UPWARDS ARROW BELOW&quot;, and would be displayed by Unicode-aware software as if it were a single character.</source>
          <target state="translated">&lt;code&gt;\X&lt;/code&gt; 、通常の（非Unicodeプログラマーの）使用法で単一の文字と見なされるものと非常によく一致します。例として、矢印など、ある種の分音記号の付いたGについて考えてみましょう。Unicodeにはそのような単一文字はありませんが、Gに続いてUnicode &quot;下向き矢印を組み合わせ&quot;を使用して構成でき、Unicode対応のソフトウェアによって単一文字のように表示されます。</target>
        </trans-unit>
        <trans-unit id="34d7b3ea79034dbcabd4d97597212e6ab2de3c37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; . This matches a boundary between a word character and a non-word character &lt;code&gt;\w\W&lt;/code&gt; or &lt;code&gt;\W\w&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 。これは、単語文字と非単語文字 &lt;code&gt;\w\W&lt;/code&gt; または &lt;code&gt;\W\w&lt;/code&gt; 間の境界に一致します。</target>
        </trans-unit>
        <trans-unit id="d75241b44033641bce1ae791eaa2652fadc31474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; and &lt;code&gt;\B&lt;/code&gt; assume there's a non-word character before the beginning and after the end of the source string; so &lt;code&gt;\b&lt;/code&gt; will match at the beginning (or end) of the source string if the source string begins (or ends) with a word character. Otherwise, &lt;code&gt;\B&lt;/code&gt; will match.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; と &lt;code&gt;\B&lt;/code&gt; は、ソース文字列の最初と最後の前に単語以外の文字があると想定しています。したがって、ソース文字列が単語文字で始まる（または終わる）場合、 &lt;code&gt;\b&lt;/code&gt; はソース文字列の最初（または最後）で一致します。それ以外の場合は、 &lt;code&gt;\B&lt;/code&gt; が一致します。</target>
        </trans-unit>
        <trans-unit id="6dc4a462570407b89d8c1b47db7b8c34eb82f528" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; is the backspace character only inside a character class. Outside a character class, &lt;code&gt;\b&lt;/code&gt; alone is a word-character/non-word-character boundary, and &lt;code&gt;\b{}&lt;/code&gt; is some other type of boundary.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; は、文字クラス内のみのバックスペース文字です。文字クラスの外では、 &lt;code&gt;\b&lt;/code&gt; だけが単語文字/非単語文字の境界であり、 &lt;code&gt;\b{}&lt;/code&gt; は他のタイプの境界です。</target>
        </trans-unit>
        <trans-unit id="7c4c255a44ab388eea9df94821b04725a1eb1239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between a word (something matched by &lt;code&gt;\w&lt;/code&gt; ) and a non-word character (&lt;code&gt;\W&lt;/code&gt; ); &lt;code&gt;\B&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b&lt;/code&gt; doesn't match. To get better word matching of natural language text, see \b{wb} below.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 直後に &lt;code&gt;&quot;{&quot;&lt;/code&gt; が続かない場合、単語（ &lt;code&gt;\w&lt;/code&gt; 一致するもの）と単語以外の文字（ &lt;code&gt;\W&lt;/code&gt; ）の間の任意の場所で一致します。 &lt;code&gt;\B&lt;/code&gt; 直後に &lt;code&gt;&quot;{&quot;&lt;/code&gt; がない場合は、 &lt;code&gt;\b&lt;/code&gt; が一致しない文字間の任意の場所で一致します。自然言語テキストの単語マッチングを改善するには、以下の\ b {wb}を参照してください。</target>
        </trans-unit>
        <trans-unit id="02a3a101dc7c6ce41ce7dac0f8acb2a72c03768d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between a word (something matched by &lt;code&gt;\w&lt;/code&gt;) and a non-word character (&lt;code&gt;\W&lt;/code&gt;); &lt;code&gt;\B&lt;/code&gt; when not immediately followed by a &lt;code&gt;&quot;{&quot;&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b&lt;/code&gt; doesn't match. To get better word matching of natural language text, see &lt;a href=&quot;#%5Cb%7Bwb%7D&quot;&gt;&quot;\b{wb}&quot;&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 直後に &lt;code&gt;&quot;{&quot;&lt;/code&gt; 続かない場合は、単語（ &lt;code&gt;\w&lt;/code&gt; と一致するもの）と単語以外の文字（ &lt;code&gt;\W&lt;/code&gt; ）の間の任意の場所で一致します。 &lt;code&gt;\B&lt;/code&gt; 直後に &lt;code&gt;&quot;{&quot;&lt;/code&gt; 続かない場合は、 &lt;code&gt;\b&lt;/code&gt; が一致しない文字間の任意の場所で一致します。自然言語テキストの単語マッチングを改善するには、以下の&lt;a href=&quot;#%5Cb%7Bwb%7D&quot;&gt;「\ b {wb}」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9cb1f2f5a9aaa3621bb6a3914daee2f66d97c91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b&lt;/code&gt;. This matches a boundary between a word character and a non-word character &lt;code&gt;\w\W&lt;/code&gt; or &lt;code&gt;\W\w&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;\b&lt;/code&gt; 。これは、単語文字と非単語文字 &lt;code&gt;\w\W&lt;/code&gt; または &lt;code&gt;\W\w&lt;/code&gt; 間の境界に一致します。</target>
        </trans-unit>
        <trans-unit id="5781002df3a961ccd9eb514485a027a250771de9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b{...}&lt;/code&gt; , available starting in v5.22, matches a boundary (between two characters, or before the first character of the string, or after the final character of the string) based on the Unicode rules for the boundary type specified inside the braces. The currently known boundary types are given a few paragraphs below. &lt;code&gt;\B{...}&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b{...}&lt;/code&gt; of the same type doesn't match.</source>
          <target state="translated">&lt;code&gt;\b{...}&lt;/code&gt; v5.22以降で使用可能な\ b {...}は、境界タイプのUnicodeルールに基づいて、境界（2文字の間、または文字列の最初の文字の前、または文字列の最後の文字の後）に一致します。中括弧の中に指定されています。現在知られている境界タイプは、以下の段落に示されています。 &lt;code&gt;\B{...}&lt;/code&gt; は、同じタイプの &lt;code&gt;\b{...}&lt;/code&gt; が一致しない文字間の任意の場所で一致します。</target>
        </trans-unit>
        <trans-unit id="5254c153c7a9a13ecdcba15f421c507a50c055a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b{...}&lt;/code&gt;, available starting in v5.22, matches a boundary (between two characters, or before the first character of the string, or after the final character of the string) based on the Unicode rules for the boundary type specified inside the braces. The boundary types are given a few paragraphs below. &lt;code&gt;\B{...}&lt;/code&gt; matches at any place between characters where &lt;code&gt;\b{...}&lt;/code&gt; of the same type doesn't match.</source>
          <target state="translated">&lt;code&gt;\b{...}&lt;/code&gt; 、v5.22以降で使用可能であり、境界タイプのUnicode規則に基づいて、境界（2文字間、文字列の最初の文字の前、または文字列の最後の文字の後）に一致します。中括弧内で指定されます。境界タイプは、以下のいくつかの段落に示されています。 &lt;code&gt;\B{...}&lt;/code&gt; は、同じタイプの &lt;code&gt;\b{...}&lt;/code&gt; が一致しない文字間の任意の場所で一致します。</target>
        </trans-unit>
        <trans-unit id="78d397b8738e99fa32effd6fc49a759f69d58d18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\b{gcb}&lt;/code&gt; or &lt;code&gt;\b{g}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\b{gcb}&lt;/code&gt; または &lt;code&gt;\b{g}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e43fb282e8b27b2619badf10578d9a503c1e675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\c&lt;/code&gt; is used to denote a control character; the character following &lt;code&gt;\c&lt;/code&gt; determines the value of the construct. For example the value of &lt;code&gt;\cA&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt;, and the value of &lt;code&gt;\cb&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(2)&lt;/a&gt;&lt;/code&gt;, etc. The gory details are in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;Regexp Quote-Like Operators in perlop&lt;/a&gt;. A complete list of what &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt;, etc. means for ASCII and EBCDIC platforms is in &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;OPERATOR DIFFERENCES in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; は制御文字を示すために使用されます。 &lt;code&gt;\c&lt;/code&gt; 続く文字は、構成の値を決定します。たとえば、 &lt;code&gt;\cA&lt;/code&gt; の値は &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt; で、 &lt;code&gt;\cb&lt;/code&gt; の値は &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(2)&lt;/a&gt;&lt;/code&gt; などです。詳細は&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;、perlopのRegexp引用型演算子にあり&lt;/a&gt;ます。ASCIIおよびEBCDICプラットフォームでの &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(1)&lt;/a&gt;&lt;/code&gt; などの意味の完全なリストは&lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;、perlebcdicのOPERATOR DIFFERENCESにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7f8369187d869841fa9df7d04e998ab51ca1871a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\c&lt;/code&gt; is used to denote a control character; the character following &lt;code&gt;\c&lt;/code&gt; determines the value of the construct. For example the value of &lt;code&gt;\cA&lt;/code&gt; is &lt;code&gt;chr(1)&lt;/code&gt;, and the value of &lt;code&gt;\cb&lt;/code&gt; is &lt;code&gt;chr(2)&lt;/code&gt;, etc. The gory details are in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt;. A complete list of what &lt;code&gt;chr(1)&lt;/code&gt;, etc. means for ASCII and EBCDIC platforms is in &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;&quot;OPERATOR DIFFERENCES&quot; in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; は、制御文字を示すために使用されます。 &lt;code&gt;\c&lt;/code&gt; 続く文字は、構成の値を決定します。たとえば、 &lt;code&gt;\cA&lt;/code&gt; の値は &lt;code&gt;chr(1)&lt;/code&gt; であり、 &lt;code&gt;\cb&lt;/code&gt; の値は &lt;code&gt;chr(2)&lt;/code&gt; など&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;です&lt;/a&gt;。厄介な詳細はperlopの「RegexpQuote-LikeOperators」にあります。ASCIIおよびEBCDICプラットフォームでの &lt;code&gt;chr(1)&lt;/code&gt; などの意味の完全なリストは&lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;、perlebcdicの「OPERATORDIFFERENCES」にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4b703fe9d5ec022fd6b34eba05b9bfd296c7a519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d&lt;/code&gt; matches a digit, not just &lt;code&gt;[0-9]&lt;/code&gt; but also digits from non-roman scripts</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 、 &lt;code&gt;[0-9]&lt;/code&gt; だけでなく、ローマ字以外のスクリプトの数字にも一致します</target>
        </trans-unit>
        <trans-unit id="11a0ca0d9ef67cf04ea6ca6b5bd701f43d0336bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\d&lt;/code&gt; matches a single character considered to be a decimal</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 、小数と見なされる単一の文字に一致します</target>
        </trans-unit>
        <trans-unit id="428b825cb343a5c9509774542fc16bc60189535f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (starting in Perl 5.10.0) is used for relative addressing. (It can be written as &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt;.) It refers to the</source>
          <target state="translated">&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; （Perl 5.10.0以降）は相対アドレス指定に使用されます。（ &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; と書くことができます。）</target>
        </trans-unit>
        <trans-unit id="5d621328865d134486d37d521b1b45ba19a42975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (starting in Perl 5.10.0) is used for relative addressing. (It can be written as &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt;.) It refers to the</source>
          <target state="translated">&lt;code&gt;\g-&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; （Perl 5.10.0以降）は相対アドレス指定に使用されます。（ &lt;code&gt;\g{-&lt;i&gt;N&lt;/i&gt;}&lt;/code&gt; と書くことができます。）これは、</target>
        </trans-unit>
        <trans-unit id="ad3328b2720f5bc3f94fe796543159d6af46703a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g1&lt;/code&gt; , &lt;code&gt;\g2&lt;/code&gt; ,... Backreferences are simply matching variables that can be used</source>
          <target state="translated">&lt;code&gt;\g1&lt;/code&gt; 、 &lt;code&gt;\g2&lt;/code&gt; 、...後方参照は、使用できる変数に一致するだけです</target>
        </trans-unit>
        <trans-unit id="e147c50c59c0f13ef05885d480813a22104b20ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g1&lt;/code&gt;, &lt;code&gt;\g2&lt;/code&gt;,... Backreferences are simply matching variables that can be used</source>
          <target state="translated">&lt;code&gt;\g1&lt;/code&gt; 、 &lt;code&gt;\g2&lt;/code&gt; 、...後方参照は、使用できる変数と一致するだけです。</target>
        </trans-unit>
        <trans-unit id="c33ee556e38924ce3e6215adbca979c4cfab3cbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; (starting in Perl 5.10.0) can be used to back refer to a named capture group, dispensing completely with having to think about capture buffer positions.</source>
          <target state="translated">&lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; （Perl 5.10.0以降）を使用すると、名前付きキャプチャグループを逆参照でき、キャプチャバッファの位置を考慮する必要がまったくなくなります。</target>
        </trans-unit>
        <trans-unit id="3acb4bd92904b84995c318e676ce7b840ab01ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\h&lt;/code&gt; matches any character considered horizontal whitespace; this includes the platform's space and tab characters and several others listed in the table below. &lt;code&gt;\H&lt;/code&gt; matches any character not considered horizontal whitespace. They use the platform's native character set, and do not consider any locale that may otherwise be in use.</source>
          <target state="translated">&lt;code&gt;\h&lt;/code&gt; は水平空白と見なされる任意の文字に一致します。これには、プラットフォームのスペースとタブ文字、および下の表にリストされている他のいくつかが含まれます。 &lt;code&gt;\H&lt;/code&gt; は、水平空白と見なされない任意の文字に一致します。それらはプラットフォームのネイティブ文字セットを使用し、他の方法で使用されている可能性のあるロケールは考慮しません。</target>
        </trans-unit>
        <trans-unit id="f48e53b9236a29c7807d180f9e942a8de2e93b26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\n&lt;/code&gt; matches a logical newline. Perl converts between &lt;code&gt;\n&lt;/code&gt; and your OS's native newline character when reading from or writing to text files.</source>
          <target state="translated">&lt;code&gt;\n&lt;/code&gt; 論理改行と一致します。Perlは、テキストファイルの読み取りまたは書き込み時に、 &lt;code&gt;\n&lt;/code&gt; とOSのネイティブ改行文字の間で変換を行います。</target>
        </trans-unit>
        <trans-unit id="bbb9812a2f255e06ab4f64b927320bb9082a1028" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; (where &lt;code&gt;P&lt;/code&gt; is a single letter) and &lt;code&gt;\p{Property}&lt;/code&gt; are used to match a character that matches the given Unicode property; properties include things like &quot;letter&quot;, or &quot;thai character&quot;. Capitalizing the sequence to &lt;code&gt;\PP&lt;/code&gt; and &lt;code&gt;\P{Property}&lt;/code&gt; make the sequence match a character that doesn't match the given Unicode property. For more details, see &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;&quot;Backslash sequences&quot; in perlrecharclass&lt;/a&gt; and &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;&quot;Unicode Character Properties&quot; in perlunicode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; （ &lt;code&gt;P&lt;/code&gt; は1文字）と &lt;code&gt;\p{Property}&lt;/code&gt; は、指定されたUnicodeプロパティに一致する文字を一致させるために使用されます。プロパティには、「文字」や「タイ文字」などが含まれます。シーケンスを &lt;code&gt;\PP&lt;/code&gt; および &lt;code&gt;\P{Property}&lt;/code&gt; 大文字にすると、シーケンスは、指定されたUnicodeプロパティと一致しない文字と一致します。詳細については、&lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;perlrecharclassの「バックスラッシュシーケンス」&lt;/a&gt;およびperlunicodeの&lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;「Unicode文字プロパティ」を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c47a61f1d11f4dbc31ff29f399c1b03054d85480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; (where &lt;code&gt;P&lt;/code&gt; is a single letter) and &lt;code&gt;\p{Property}&lt;/code&gt; are used to match a character that matches the given Unicode property; properties include things like &quot;letter&quot;, or &quot;thai character&quot;. Capitalizing the sequence to &lt;code&gt;\PP&lt;/code&gt; and &lt;code&gt;\P{Property}&lt;/code&gt; make the sequence match a character that doesn't match the given Unicode property. For more details, see &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;Backslash sequences in perlrecharclass&lt;/a&gt; and &lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;Unicode Character Properties in perlunicode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; （ &lt;code&gt;P&lt;/code&gt; は1文字）と &lt;code&gt;\p{Property}&lt;/code&gt; を使用して、特定のUnicodeプロパティと一致する文字を照合します。プロパティには、「文字」や「タイ文字」などが含まれます。シーケンスを &lt;code&gt;\PP&lt;/code&gt; および &lt;code&gt;\P{Property}&lt;/code&gt; 大文字化すると、シーケンスは、指定されたUnicodeプロパティと一致しない文字と一致します。詳細については、&lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;perlrecharclassのバックスラッシュシーケンス&lt;/a&gt;およびperlunicodeの&lt;a href=&quot;perlunicode#Unicode-Character-Properties&quot;&gt;Unicode文字プロパティを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d84c55ace76e1ff0519f5aac6666720a80072bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; and &lt;code&gt;\p{Prop}&lt;/code&gt; are character classes to match characters that fit given Unicode properties. One letter property names can be used in the &lt;code&gt;\pP&lt;/code&gt; form, with the property name following the &lt;code&gt;\p&lt;/code&gt; , otherwise, braces are required. When using braces, there is a single form, which is just the property name enclosed in the braces, and a compound form which looks like &lt;code&gt;\p{name=value}&lt;/code&gt; , which means to match if the property &quot;name&quot; for the character has that particular &quot;value&quot;. For instance, a match for a number can be written as &lt;code&gt;/\pN/&lt;/code&gt; or as &lt;code&gt;/\p{Number}/&lt;/code&gt; , or as &lt;code&gt;/\p{Number=True}/&lt;/code&gt; . Lowercase letters are matched by the property</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; と &lt;code&gt;\p{Prop}&lt;/code&gt; は、特定のUnicodeプロパティに適合する文字と一致する文字クラスです。 1文字のプロパティ名は &lt;code&gt;\pP&lt;/code&gt; フォームで使用でき、プロパティ名は &lt;code&gt;\p&lt;/code&gt; 後に続きます。それ以外の場合は、中括弧が必要です。中かっこを使用する場合、中かっこで囲まれたプロパティ名だけの単一のフォームと、 &lt;code&gt;\p{name=value}&lt;/code&gt; ような複合フォームがあります。これは、文字のプロパティ「名前」がその特定の「価値」。たとえば、数値の一致は &lt;code&gt;/\pN/&lt;/code&gt; または &lt;code&gt;/\p{Number}/&lt;/code&gt; 、または &lt;code&gt;/\p{Number=True}/&lt;/code&gt; として記述できます。小文字はプロパティに一致します</target>
        </trans-unit>
        <trans-unit id="098dbbc62b16ee5d92c2a2b0fc0e6743a9b88819" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\pP&lt;/code&gt; and &lt;code&gt;\p{Prop}&lt;/code&gt; are character classes to match characters that fit given Unicode properties. One letter property names can be used in the &lt;code&gt;\pP&lt;/code&gt; form, with the property name following the &lt;code&gt;\p&lt;/code&gt;, otherwise, braces are required. When using braces, there is a single form, which is just the property name enclosed in the braces, and a compound form which looks like &lt;code&gt;\p{name=value}&lt;/code&gt;, which means to match if the property &quot;name&quot; for the character has that particular &quot;value&quot;. For instance, a match for a number can be written as &lt;code&gt;/\pN/&lt;/code&gt; or as &lt;code&gt;/\p{Number}/&lt;/code&gt;, or as &lt;code&gt;/\p{Number=True}/&lt;/code&gt;. Lowercase letters are matched by the property</source>
          <target state="translated">&lt;code&gt;\pP&lt;/code&gt; および &lt;code&gt;\p{Prop}&lt;/code&gt; は、指定されたUnicodeプロパティに適合する文字に一致する文字クラスです。 &lt;code&gt;\pP&lt;/code&gt; 形式では、1文字のプロパティ名を使用できます。プロパティ名は &lt;code&gt;\p&lt;/code&gt; 後に続きます。それ以外の場合は、中かっこが必要です。中かっこを使用する場合、中かっこで囲まれたプロパティ名だけの単一のフォームと、 &lt;code&gt;\p{name=value}&lt;/code&gt; ような複合フォームがあります。これは、文字のプロパティ「name」がその特定の「値」。たとえば、数値の一致は &lt;code&gt;/\pN/&lt;/code&gt; または &lt;code&gt;/\p{Number}/&lt;/code&gt; 、または &lt;code&gt;/\p{Number=True}/&lt;/code&gt; として記述できます。小文字はプロパティと一致します</target>
        </trans-unit>
        <trans-unit id="85149b0f3a91ea78c71d331abbaa6fc18476f335" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{Blank}&lt;/code&gt; and &lt;code&gt;\p{HorizSpace}&lt;/code&gt; are synonyms.</source>
          <target state="translated">&lt;code&gt;\p{Blank}&lt;/code&gt; と &lt;code&gt;\p{HorizSpace}&lt;/code&gt; は同義語です。</target>
        </trans-unit>
        <trans-unit id="25c9fecf27d0a09b0629761f6ae905625678010b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{PosixPunct}&lt;/code&gt; and &lt;code&gt;[[:punct:]]&lt;/code&gt; in the ASCII range match all non-controls, non-alphanumeric, non-space characters: &lt;code&gt;[-!&quot;#$%&amp;amp;'()*+,./:;&amp;lt;=&amp;gt;?@[\\\]^_`{|}~]&lt;/code&gt; (although if a locale is in effect, it could alter the behavior of &lt;code&gt;[[:punct:]]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;\p{PosixPunct}&lt;/code&gt; および &lt;code&gt;[[:punct:]]&lt;/code&gt; punct ：]]は、ASCII範囲内で、コントロール、英数字、スペース以外のすべての文字に一致します。 &lt;code&gt;[-!&quot;#$%&amp;amp;'()*+,./:;&amp;lt;=&amp;gt;?@[\\\]^_`{|}~]&lt;/code&gt; （ロケールが有効な場合、 &lt;code&gt;[[:punct:]]&lt;/code&gt; の動作を変更する可能性があります）。</target>
        </trans-unit>
        <trans-unit id="755edd19d42bc00d2d42f52db8c39e41d61b74f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; and &lt;code&gt;\p{Space}&lt;/code&gt; match identically starting with Perl v5.18. In earlier versions, these differ only in that in non-locale matching, &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; did not match the vertical tab, &lt;code&gt;\cK&lt;/code&gt; . Same for the two ASCII-only range forms.</source>
          <target state="translated">&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; と &lt;code&gt;\p{Space}&lt;/code&gt; 、Perl v5.18から同じように一致します。以前のバージョンでは、これらはロケール以外のマッチングで &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; が垂直タブ &lt;code&gt;\cK&lt;/code&gt; 一致しなかった点でのみ異なります。ASCIIのみの2つの範囲形式についても同じです。</target>
        </trans-unit>
        <trans-unit id="ee6e8fa4e9c9641c6848540794bf24bd1ff86f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; and &lt;code&gt;\p{Space}&lt;/code&gt; match identically starting with Perl v5.18. In earlier versions, these differ only in that in non-locale matching, &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; did not match the vertical tab, &lt;code&gt;\cK&lt;/code&gt;. Same for the two ASCII-only range forms.</source>
          <target state="translated">&lt;code&gt;\p{XPerlSpace}&lt;/code&gt; と &lt;code&gt;\p{Space}&lt;/code&gt; 、Perlv5.18以降同じように一致します。以前のバージョンでは、これらは非ロケール一致でのみ異なり、 &lt;code&gt;\p{XPerlSpace}&lt;/code&gt; は垂直タブ &lt;code&gt;\cK&lt;/code&gt; 一致しませんでした。2つのASCIIのみの範囲形式についても同じです。</target>
        </trans-unit>
        <trans-unit id="40bf92acce79d5b5002afaba6916dbd6bb155338" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; and (under Unicode rules) &lt;code&gt;[[:punct:]]&lt;/code&gt;, match what &lt;code&gt;\p{PosixPunct}&lt;/code&gt; matches in the ASCII range, plus what &lt;code&gt;\p{Punct}&lt;/code&gt; matches. This is different than strictly matching according to &lt;code&gt;\p{Punct}&lt;/code&gt; . Another way to say it is that if Unicode rules are in effect, &lt;code&gt;[[:punct:]]&lt;/code&gt; matches all characters that Unicode considers punctuation, plus all ASCII-range characters that Unicode considers symbols.</source>
          <target state="translated">&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; （Unicodeのルールの下で）と &lt;code&gt;[[:punct:]]&lt;/code&gt; 、内容と一致 &lt;code&gt;\p{PosixPunct}&lt;/code&gt; ASCIIの範囲で一致し、プラス何 &lt;code&gt;\p{Punct}&lt;/code&gt; 一致します。これは、 &lt;code&gt;\p{Punct}&lt;/code&gt; による厳密な一致とは異なります。別の言い方をすると、Unicodeルールが有効な場合、 &lt;code&gt;[[:punct:]]&lt;/code&gt; は、Unicodeが句読点と見なすすべての文字と、Unicodeが記号と見なすすべてのASCII範囲の文字に一致します。</target>
        </trans-unit>
        <trans-unit id="218f42f116c5754d91ca08dc27a0759faa30d3d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; and (under Unicode rules) &lt;code&gt;[[:punct:]]&lt;/code&gt;, match what &lt;code&gt;\p{PosixPunct}&lt;/code&gt; matches in the ASCII range, plus what &lt;code&gt;\p{Punct}&lt;/code&gt; matches. This is different than strictly matching according to &lt;code&gt;\p{Punct}&lt;/code&gt;. Another way to say it is that if Unicode rules are in effect, &lt;code&gt;[[:punct:]]&lt;/code&gt; matches all characters that Unicode considers punctuation, plus all ASCII-range characters that Unicode considers symbols.</source>
          <target state="translated">&lt;code&gt;\p{XPosixPunct}&lt;/code&gt; （Unicodeのルールの下で）と &lt;code&gt;[[:punct:]]&lt;/code&gt; 、内容と一致 &lt;code&gt;\p{PosixPunct}&lt;/code&gt; ASCIIの範囲で一致し、プラス何 &lt;code&gt;\p{Punct}&lt;/code&gt; 一致します。これは、 &lt;code&gt;\p{Punct}&lt;/code&gt; による厳密な一致とは異なります。別の言い方をすれば、Unicodeルールが有効な場合、 &lt;code&gt;[[:punct:]]&lt;/code&gt; は、Unicodeが句読点と見なすすべての文字と、Unicodeが記号と見なすすべてのASCII範囲の文字に一致します。</target>
        </trans-unit>
        <trans-unit id="cf3cef3a5e22571510fa5a04adc6bd52e2e9e07c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches [\t\n\f\r ] and, starting in Perl v5.18, the vertical tab, &lt;code&gt;\cK&lt;/code&gt; . (See note &lt;code&gt;[1]&lt;/code&gt; below for a discussion of this.) Note that this list doesn't include the non-breaking space.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; [\ t \ n \ f \ r]に一致し、Perl v5.18以降では垂直タブ &lt;code&gt;\cK&lt;/code&gt; ます。（これの説明については、下の注 &lt;code&gt;[1]&lt;/code&gt; を参照してください。）このリストには非改行スペースが含まれていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="899af5f086bd5390390892789adbfc29fa69cfb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches [\t\n\f\r ] and, starting in Perl v5.18, the vertical tab, &lt;code&gt;\cK&lt;/code&gt;. (See note &lt;code&gt;[1]&lt;/code&gt; below for a discussion of this.) Note that this list doesn't include the non-breaking space.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; [\ t \ n \ f \ r]と一致し、Perl v5.18以降、垂直タブ &lt;code&gt;\cK&lt;/code&gt; ます。（これについては、以下の注 &lt;code&gt;[1]&lt;/code&gt; を参照してください。）このリストには、改行なしスペースが含まれていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4e3e843f9e7609a6b386f439f2b807f775b93a6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches a whitespace character, the set &lt;code&gt;[\ \t\r\n\f]&lt;/code&gt; and others</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; は空白文字、セット &lt;code&gt;[\ \t\r\n\f]&lt;/code&gt; などに一致します</target>
        </trans-unit>
        <trans-unit id="41ad191b59c68476309e8cdff37277905b3d644e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches any single character considered whitespace.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; は、空白と見なされる任意の1文字に一致します。</target>
        </trans-unit>
        <trans-unit id="164846db6b825e570c0d7edc2e8e99d0a8cd9c3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches exactly the characters shown with an &quot;s&quot; column in the table below.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; は、以下の表の「s」列で示されている文字と完全に一致します。</target>
        </trans-unit>
        <trans-unit id="dfe6b3493a7e126712936240780ab43a7647b5c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches exactly the code points above 255 shown with an &quot;s&quot; column in the table below.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; は、以下の表の「s」列で示される255を超えるコードポイントと完全に一致します。</target>
        </trans-unit>
        <trans-unit id="53c42afe9cf980295f6ccaddc4816a2d0390a04f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\s&lt;/code&gt; matches whatever the locale considers to be whitespace.</source>
          <target state="translated">&lt;code&gt;\s&lt;/code&gt; は、ロケールが空白と見なしたものと一致します。</target>
        </trans-unit>
        <trans-unit id="e17398607beae9e16f5d507bd2de1c2792253d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\v&lt;/code&gt; matches any character considered vertical whitespace; this includes the platform's carriage return and line feed characters (newline) plus several other characters, all listed in the table below. &lt;code&gt;\V&lt;/code&gt; matches any character not considered vertical whitespace. They use the platform's native character set, and do not consider any locale that may otherwise be in use.</source>
          <target state="translated">&lt;code&gt;\v&lt;/code&gt; は、垂直方向の空白と見なされる任意の文字に一致します。これには、プラットフォームのキャリッジリターンとラインフィード文字（改行）に加えて、以下の表にリストされているその他のいくつかの文字が含まれます。 &lt;code&gt;\V&lt;/code&gt; は、垂直方向の空白と見なされない任意の文字に一致します。それらはプラットフォームのネイティブ文字セットを使用し、他の方法で使用されている可能性のあるロケールは考慮しません。</target>
        </trans-unit>
        <trans-unit id="e84d6b7c93d52f35bcd484412e96304ddb465e55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; can be used to match a Japanese ideograph, for instance; and &lt;code&gt;[[:digit:]]&lt;/code&gt; a Bengali number.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; は、たとえば日本語の表意文字に一致させるために使用できます。そして、 &lt;code&gt;[[:digit:]]&lt;/code&gt; ベンガル番号。</target>
        </trans-unit>
        <trans-unit id="12b56560fcb8e649f2853269006af953eb9769e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; is a character class that matches any single</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; は、任意の1つに一致する文字クラスです</target>
        </trans-unit>
        <trans-unit id="48cb702e25188808179cd08641633cb28eaa0eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches [a-zA-Z0-9_].</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; [a-zA-Z0-9_]に一致します。</target>
        </trans-unit>
        <trans-unit id="a751c502830d54a0d9d3ca25fa6632bc343a71c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches a word character (alphanumeric or &lt;code&gt;'_'&lt;/code&gt;), not just &lt;code&gt;[0-9a-zA-Z_]&lt;/code&gt; but also digits and characters from non-roman scripts</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;[0-9a-zA-Z_]&lt;/code&gt; だけでなく、ローマ字以外の文字の数字や文字も含む単語文字（英数字または &lt;code&gt;'_'&lt;/code&gt; ）に一致します</target>
        </trans-unit>
        <trans-unit id="a2fd3f12a256fac6c8c475c41016b746e332589d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches exactly what &lt;code&gt;\p{Word}&lt;/code&gt; matches.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; マッチまさに &lt;code&gt;\p{Word}&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="fbdee4d0daab297bf0961e4ccefe2a5955a8d76f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches the 63 characters [a-zA-Z0-9_].</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; は63文字[a-zA-Z0-9_]に一致します。</target>
        </trans-unit>
        <trans-unit id="eb954d084b4018682f968a2007d9fb696787dd4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches the platform's native underscore character plus whatever the locale considers to be alphanumeric.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; は、プラットフォームのネイティブアンダースコア文字に加えて、ロケールが英数字と見なすものに一致します。</target>
        </trans-unit>
        <trans-unit id="1175cf96f88bb9109cfcdb274bab554078c0da6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\w&lt;/code&gt; matches the same as &lt;code&gt;\p{Word}&lt;/code&gt; matches in this range. That is, it matches Thai letters, Greek letters, etc. This includes connector punctuation (like the underscore) which connect two words together, or diacritics, such as a &lt;code&gt;COMBINING TILDE&lt;/code&gt; and the modifier letters, which are generally used to add auxiliary markings to letters.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; は、この範囲の &lt;code&gt;\p{Word}&lt;/code&gt; 一致と同じです。つまり、タイ語の文字、ギリシャ語の文字などに一致します。これには、2つの単語を接続するコネクタの句読点（アンダースコアなど）や、通常、補助的なマーキングを追加するために使用される &lt;code&gt;COMBINING TILDE&lt;/code&gt; や修飾文字などの発音区別符号が含まれます。手紙。</target>
        </trans-unit>
        <trans-unit id="fdf252af84459ebbc3355f5052e1c483febc2e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\x{}&lt;/code&gt; and &lt;code&gt;\o{}&lt;/code&gt; can also be used to specify code points at compile time in double-quotish strings, but, for backward compatibility with older Perls, the same rules apply as with &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; for code points less than 256.</source>
          <target state="translated">&lt;code&gt;\x{}&lt;/code&gt; と &lt;code&gt;\o{}&lt;/code&gt; を使用して、コンパイル時に二重引用符で囲まれた文字列でコードポイントを指定することもできますが、古いPerlとの下位互換性のために、256未満のコードポイントには &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; と同じ規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="76c959405321ee93f9b650cda58480e255b74a80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\x{}&lt;/code&gt; and &lt;code&gt;\o{}&lt;/code&gt; can also be used to specify code points at compile time in double-quotish strings, but, for backward compatibility with older Perls, the same rules apply as with &lt;code&gt;chr()&lt;/code&gt; for code points less than 256.</source>
          <target state="translated">&lt;code&gt;\x{}&lt;/code&gt; および &lt;code&gt;\o{}&lt;/code&gt; を使用して、コンパイル時にダブルクォート文字列でコードポイントを指定することもできますが、古いPerlとの下位互換性のために、256未満のコードポイントの &lt;code&gt;chr()&lt;/code&gt; と同じルールが適用されます。。</target>
        </trans-unit>
        <trans-unit id="5fe4cad9ff217e9c6a9d88999a2c91a4805e6cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; match at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\Z/&lt;/code&gt; is equivalent to &lt;code&gt;/$/&lt;/code&gt; ; that is, it matches at the end of the string, or one before the newline at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/$/&lt;/code&gt; matches at internal newlines, but the meaning of &lt;code&gt;/\Z/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\Z&lt;/code&gt; matches at the end of the string (or just before a trailing newline) regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; と &lt;code&gt;\Z&lt;/code&gt; は文字列の最後で一致します。場合は &lt;code&gt;/m&lt;/code&gt; の修飾子が使用されていない場合、 &lt;code&gt;/\Z/&lt;/code&gt; と等価です &lt;code&gt;/$/&lt;/code&gt; ;つまり、文字列の最後、または文字列の最後の改行の前で一致します。場合は &lt;code&gt;/m&lt;/code&gt; の修飾子が使用され、その後、 &lt;code&gt;/$/&lt;/code&gt; 内部改行で一致しますが、の意味 &lt;code&gt;/\Z/&lt;/code&gt; によって変更されません &lt;code&gt;/m&lt;/code&gt; の修飾子。 &lt;code&gt;\Z&lt;/code&gt; は、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されているかどうかに関係なく、文字列の最後（または末尾の改行の直前）で一致します。</target>
        </trans-unit>
        <trans-unit id="624cd6975bec00d59c30751190892372b771ed6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; match at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier isn't used, then &lt;code&gt;/\Z/&lt;/code&gt; is equivalent to &lt;code&gt;/$/&lt;/code&gt;; that is, it matches at the end of the string, or one before the newline at the end of the string. If the &lt;code&gt;/m&lt;/code&gt; modifier is used, then &lt;code&gt;/$/&lt;/code&gt; matches at internal newlines, but the meaning of &lt;code&gt;/\Z/&lt;/code&gt; isn't changed by the &lt;code&gt;/m&lt;/code&gt; modifier. &lt;code&gt;\Z&lt;/code&gt; matches at the end of the string (or just before a trailing newline) regardless whether the &lt;code&gt;/m&lt;/code&gt; modifier is used.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; と &lt;code&gt;\Z&lt;/code&gt; は文字列の最後で一致します。場合は &lt;code&gt;/m&lt;/code&gt; の修飾子が使用されていない場合、 &lt;code&gt;/\Z/&lt;/code&gt; と等価です &lt;code&gt;/$/&lt;/code&gt; ;つまり、文字列の最後、または文字列の最後の改行の前に一致します。場合は &lt;code&gt;/m&lt;/code&gt; の修飾子が使用され、その後、 &lt;code&gt;/$/&lt;/code&gt; 内部改行で一致しますが、の意味 &lt;code&gt;/\Z/&lt;/code&gt; によって変更されません &lt;code&gt;/m&lt;/code&gt; の修飾子。 &lt;code&gt;\Z&lt;/code&gt; は、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されているかどうかに関係なく、文字列の最後（または末尾の改行の直前）で一致します。</target>
        </trans-unit>
        <trans-unit id="38f47b559e51c9cb06b7531b5b8a212ee7a07836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; is just like &lt;code&gt;\Z&lt;/code&gt; , except that it does not match before a trailing newline. &lt;code&gt;\z&lt;/code&gt; matches at the end of the string only, regardless of the modifiers used, and not just before a newline. It is how to anchor the match to the true end of the string under all conditions.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; は &lt;code&gt;\Z&lt;/code&gt; と同じですが、末尾の改行の前では一致しません。 &lt;code&gt;\z&lt;/code&gt; は、使用される修飾子に関係なく、改行の直前ではなく、文字列の末尾のみに一致します。これは、すべての条件下で文字列の最後に一致を固定する方法です。</target>
        </trans-unit>
        <trans-unit id="0dddfca295a15998343d3e2118aed035cd1b453e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\z&lt;/code&gt; is just like &lt;code&gt;\Z&lt;/code&gt;, except that it does not match before a trailing newline. &lt;code&gt;\z&lt;/code&gt; matches at the end of the string only, regardless of the modifiers used, and not just before a newline. It is how to anchor the match to the true end of the string under all conditions.</source>
          <target state="translated">&lt;code&gt;\z&lt;/code&gt; は &lt;code&gt;\Z&lt;/code&gt; と同じですが、末尾の改行の前に一致しない点が異なります。 &lt;code&gt;\z&lt;/code&gt; は、使用される修飾子に関係なく、改行の直前ではなく、文字列の最後でのみ一致します。これは、すべての条件下で一致を文字列の真の終わりに固定する方法です。</target>
        </trans-unit>
        <trans-unit id="a3a70aedbc9fae24b3656fb271fb5a35b52ef808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;]&lt;/code&gt; is the offset of the start of the substring matched by</source>
          <target state="translated">&lt;code&gt;]&lt;/code&gt; は、一致する部分文字列の開始のオフセットです。</target>
        </trans-unit>
        <trans-unit id="e1d7f97ecc73edc5732b4917233d89a3115636be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in regular expression patterns are supposed to match all these, but don't. These characters also don't, but should, affect &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;code&gt;$.&lt;/code&gt; , and script line numbers.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 正規表現パターンの^と &lt;code&gt;$&lt;/code&gt; は、これらすべてに一致するはずですが、一致しません。これらの文字も &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;code&gt;$.&lt;/code&gt; は影響しませんが、影響します。、およびスクリプトの行番号。</target>
        </trans-unit>
        <trans-unit id="86ae5c851c3a1cc84b8441895b384c4179ba8046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in regular expression patterns are supposed to match all these, but don't. These characters also don't, but should, affect &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;code&gt;$.&lt;/code&gt;, and script line numbers.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 正規表現パターンの^と &lt;code&gt;$&lt;/code&gt; は、これらすべてに一致するはずですが、一致しません。これらの文字も &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;code&gt;$.&lt;/code&gt; は影響しませんが、影響するはずです。、およびスクリプトの行番号。</target>
        </trans-unit>
        <trans-unit id="fb2224dcf7ebf0b526271854823f3d301837385c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_PC_LINK_MAX&lt;/code&gt;&lt;code&gt;_PC_MAX_CANON&lt;/code&gt;&lt;code&gt;_PC_MAX_INPUT&lt;/code&gt;&lt;code&gt;_PC_NAME_MAX&lt;/code&gt;&lt;code&gt;_PC_NO_TRUNC&lt;/code&gt;&lt;code&gt;_PC_PATH_MAX&lt;/code&gt;&lt;code&gt;_PC_PIPE_BUF&lt;/code&gt;&lt;code&gt;_PC_VDISABLE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_PC_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_PC_LINK_MAX&lt;/code&gt;&lt;code&gt;_PC_MAX_CANON&lt;/code&gt;&lt;code&gt;_PC_MAX_INPUT&lt;/code&gt;&lt;code&gt;_PC_NAME_MAX&lt;/code&gt;&lt;code&gt;_PC_NO_TRUNC&lt;/code&gt;&lt;code&gt;_PC_PATH_MAX&lt;/code&gt;&lt;code&gt;_PC_PIPE_BUF&lt;/code&gt;&lt;code&gt;_PC_VDISABLE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63011a4008ee629a0f26075a9a743d3b2b2ede8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_POSIX_ARG_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHILD_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_POSIX_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_POSIX_LINK_MAX&lt;/code&gt;&lt;code&gt;_POSIX_MAX_CANON&lt;/code&gt;&lt;code&gt;_POSIX_MAX_INPUT&lt;/code&gt;&lt;code&gt;_POSIX_NAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NO_TRUNC&lt;/code&gt;&lt;code&gt;_POSIX_OPEN_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PATH_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PIPE_BUF&lt;/code&gt;&lt;code&gt;_POSIX_SAVED_IDS&lt;/code&gt;&lt;code&gt;_POSIX_SSIZE_MAX&lt;/code&gt;&lt;code&gt;_POSIX_STREAM_MAX&lt;/code&gt;&lt;code&gt;_POSIX_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_VDISABLE&lt;/code&gt;&lt;code&gt;_POSIX_VERSION&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_POSIX_ARG_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHILD_MAX&lt;/code&gt;&lt;code&gt;_POSIX_CHOWN_RESTRICTED&lt;/code&gt;&lt;code&gt;_POSIX_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_POSIX_LINK_MAX&lt;/code&gt;&lt;code&gt;_POSIX_MAX_CANON&lt;/code&gt;&lt;code&gt;_POSIX_MAX_INPUT&lt;/code&gt;&lt;code&gt;_POSIX_NAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_POSIX_NO_TRUNC&lt;/code&gt;&lt;code&gt;_POSIX_OPEN_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PATH_MAX&lt;/code&gt;&lt;code&gt;_POSIX_PIPE_BUF&lt;/code&gt;&lt;code&gt;_POSIX_SAVED_IDS&lt;/code&gt;&lt;code&gt;_POSIX_SSIZE_MAX&lt;/code&gt;&lt;code&gt;_POSIX_STREAM_MAX&lt;/code&gt;&lt;code&gt;_POSIX_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_POSIX_VDISABLE&lt;/code&gt;&lt;code&gt;_POSIX_VERSION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d0338a6cffd158f71c4a073e1191fe24d695975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_SC_ARG_MAX&lt;/code&gt;&lt;code&gt;_SC_CHILD_MAX&lt;/code&gt;&lt;code&gt;_SC_CLK_TCK&lt;/code&gt;&lt;code&gt;_SC_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_SC_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_SC_OPEN_MAX&lt;/code&gt;&lt;code&gt;_SC_PAGESIZE&lt;/code&gt;&lt;code&gt;_SC_SAVED_IDS&lt;/code&gt;&lt;code&gt;_SC_STREAM_MAX&lt;/code&gt;&lt;code&gt;_SC_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_SC_VERSION&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_SC_ARG_MAX&lt;/code&gt;&lt;code&gt;_SC_CHILD_MAX&lt;/code&gt;&lt;code&gt;_SC_CLK_TCK&lt;/code&gt;&lt;code&gt;_SC_JOB_CONTROL&lt;/code&gt;&lt;code&gt;_SC_NGROUPS_MAX&lt;/code&gt;&lt;code&gt;_SC_OPEN_MAX&lt;/code&gt;&lt;code&gt;_SC_PAGESIZE&lt;/code&gt;&lt;code&gt;_SC_SAVED_IDS&lt;/code&gt;&lt;code&gt;_SC_STREAM_MAX&lt;/code&gt;&lt;code&gt;_SC_TZNAME_MAX&lt;/code&gt;&lt;code&gt;_SC_VERSION&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c4507a34314e4717b1cc2380be0c570f4cf8cc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DATA__&lt;/code&gt; , &lt;code&gt;__END__&lt;/code&gt; , &lt;code&gt;and&lt;/code&gt; , &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt; , &lt;code&gt;until&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;xor&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__DATA__&lt;/code&gt; 、 &lt;code&gt;__END__&lt;/code&gt; 、 &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;cmp&lt;/code&gt; 、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;elsif&lt;/code&gt; 、 &lt;code&gt;eq&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;foreach&lt;/code&gt; の、 &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;ge&lt;/code&gt; 、 &lt;code&gt;given&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;gt&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;le&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;lt&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;ne&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;unless&lt;/code&gt; 、 &lt;code&gt;until&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;when&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;xor&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ac8079a493704c080d46e2cca7389fdc1d58946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;dump&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qr&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;say&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;dump&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;my&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;our&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qr&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;say&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f436bfdadc0a4193ec468e3af9c90fc24e2967c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DIE__&lt;/code&gt; /&lt;code&gt;__WARN__&lt;/code&gt; handlers are very special in one respect: they may be called to report (probable) errors found by the parser. In such a case the parser may be in inconsistent state, so any attempt to evaluate Perl code from such a handler will probably result in a segfault. This means that warnings or errors that result from parsing Perl should be used with extreme caution, like this:</source>
          <target state="translated">&lt;code&gt;__DIE__&lt;/code&gt; / &lt;code&gt;__WARN__&lt;/code&gt; ハンドラーは、1つの点で非常に特殊です。パーサーによって検出された（可能性のある）エラーを報告するために呼び出される場合があります。このような場合、パーサーは一貫性のない状態になる可能性があるため、そのようなハンドラーからPerlコードを評価しようとすると、おそらくsegfaultが発生します。つまり、Perlの解析から生じる警告またはエラーは、次のように細心の注意を払って使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b9456911678627db4da96f2529e10a2ad6d37dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__DIE__&lt;/code&gt;/&lt;code&gt;__WARN__&lt;/code&gt; handlers are very special in one respect: they may be called to report (probable) errors found by the parser. In such a case the parser may be in inconsistent state, so any attempt to evaluate Perl code from such a handler will probably result in a segfault. This means that warnings or errors that result from parsing Perl should be used with extreme caution, like this:</source>
          <target state="translated">&lt;code&gt;__DIE__&lt;/code&gt; / &lt;code&gt;__WARN__&lt;/code&gt; ハンドラーは、1つの点で非常に特殊です。パーサーによって検出された（可能性のある）エラーを報告するために呼び出される場合があります。このような場合、パーサーは一貫性のない状態にある可能性があるため、そのようなハンドラーからPerlコードを評価しようとすると、おそらくセグメンテーション違反が発生します。つまり、Perlの解析に起因する警告またはエラーは、次のように細心の注意を払って使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5d0b679130382dce8fe2a86280667432e82e672" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_fieldhash&lt;/code&gt; is the internal function used to create field hashes. It takes two arguments, a hashref and a mode. If the mode is boolean false, the hash is not changed but tested if it is a field hash. If the hash isn't a field hash the return value is boolean false. If it is, the return value indicates the mode of field hash. When called with a boolean true mode, it turns the given hash into a field hash of this mode, returning the mode of the created field hash. &lt;code&gt;_fieldhash&lt;/code&gt; does not erase the given hash.</source>
          <target state="translated">&lt;code&gt;_fieldhash&lt;/code&gt; は、フィールドハッシュの作成に使用される内部関数です。hashrefとモードの2つの引数を取ります。モードがブール値falseの場合、ハッシュは変更されませんが、フィールドハッシュであるかどうかがテストされます。ハッシュがフィールドハッシュでない場合、戻り値はブール値のfalseです。そうである場合、戻り値はフィールドハッシュのモードを示します。ブールtrueモードで呼び出されると、指定されたハッシュをこのモードのフィールドハッシュに変換し、作成されたフィールドハッシュのモードを返します。 &lt;code&gt;_fieldhash&lt;/code&gt; は、指定されたハッシュを消去しません。</target>
        </trans-unit>
        <trans-unit id="2e8e054b1c07b425b270bb9c7e13c794d2d9092f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;`&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;`&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="aa85beb7344aca10b8cc8699807de44f549b3521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;``&lt;/code&gt; and pipe-&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; do not work under DOS.</source>
          <target state="translated">&lt;code&gt;``&lt;/code&gt; とpipe- &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; はDOSでは動作しません。</target>
        </trans-unit>
        <trans-unit id="2bdd809918440b8fcbcd0e948d96987513362e99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;``&lt;/code&gt; and pipe-&lt;code&gt;open&lt;/code&gt; do not work under DOS.</source>
          <target state="translated">&lt;code&gt;``&lt;/code&gt; とパイプ &lt;code&gt;open&lt;/code&gt; はDOSでは機能しません。</target>
        </trans-unit>
        <trans-unit id="8e8938480285fe7482d06df8890143549cb42503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; = match 'a' 0 or more times, i.e., any number of times</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; = 'a'に0回以上、つまり任意の回数一致</target>
        </trans-unit>
        <trans-unit id="21b92f8e0d8dad1b0caf50f135db9b635632e760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; means: match 'a' 0 or more times, i.e., any number of times</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; は、「a」に0回以上、つまり任意の回数だけ一致することを意味します。</target>
        </trans-unit>
        <trans-unit id="f3ca7559101ce7ae9003fe0fcdfc72bd09f589b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 0 or more times,</source>
          <target state="translated">&lt;code&gt;a*&lt;/code&gt; は、 &lt;code&gt;'a'&lt;/code&gt; 0回以上一致することを意味します。</target>
        </trans-unit>
        <trans-unit id="5ab7362646f1c360bc9715cbf44b1a07df61dc33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*?&lt;/code&gt; means: match 'a' 0 or more times, i.e., any number of times, but as few times as possible</source>
          <target state="translated">&lt;code&gt;a*?&lt;/code&gt; 意味：「a」を0回以上、つまり任意の回数、ただしできるだけ少ない回数で一致させます</target>
        </trans-unit>
        <trans-unit id="82581292c96ab4ca634a840738db2ae15f10b364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a*?&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 0 or more times,</source>
          <target state="translated">&lt;code&gt;a*?&lt;/code&gt; 意味： &lt;code&gt;'a'&lt;/code&gt; 0回以上一致し、</target>
        </trans-unit>
        <trans-unit id="53ca230acfe7cf51016cf1f4619d8d0fb5d9ddc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; = match 'a' 1 or more times, i.e., at least once</source>
          <target state="translated">&lt;code&gt;a+&lt;/code&gt; =「a」に1回以上一致、つまり少なくとも1回一致</target>
        </trans-unit>
        <trans-unit id="57839f788d53642fe08867e5699ec952e95d5a35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; means: match 'a' 1 or more times, i.e., at least once</source>
          <target state="translated">&lt;code&gt;a+&lt;/code&gt; は、「a」に1回以上、つまり少なくとも1回一致することを意味します。</target>
        </trans-unit>
        <trans-unit id="b52db27e1bf1a298f6c2fec4c1555cb45de1273c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 1 or more times,</source>
          <target state="translated">&lt;code&gt;a+&lt;/code&gt; は、 &lt;code&gt;'a'&lt;/code&gt; 1回以上一致することを意味します。</target>
        </trans-unit>
        <trans-unit id="07e81ca192d31fdf9434c5f46dda1eb5e709a3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+?&lt;/code&gt; means: match 'a' 1 or more times, i.e., at least once, but as few times as possible</source>
          <target state="translated">&lt;code&gt;a+?&lt;/code&gt; つまり、「a」に1回以上一致します。つまり、少なくとも1回、ただし可能な限り数回一致します。</target>
        </trans-unit>
        <trans-unit id="845574760c8db8566f430ffa9647822edd5003c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a+?&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 1 or more times,</source>
          <target state="translated">&lt;code&gt;a+?&lt;/code&gt; 意味： &lt;code&gt;'a'&lt;/code&gt; 1回以上一致し、</target>
        </trans-unit>
        <trans-unit id="5abe405e15c76b256da476c55e02d7cd0a2d157a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.out&lt;/code&gt; -style build</source>
          <target state="translated">&lt;code&gt;a.out&lt;/code&gt; スタイルのビルド</target>
        </trans-unit>
        <trans-unit id="35dd9ca1d0d88ad1a96375ce9b702e755846541d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.out&lt;/code&gt;-style build</source>
          <target state="translated">&lt;code&gt;a.out&lt;/code&gt; スタイルのビルド</target>
        </trans-unit>
        <trans-unit id="230edf66068099823e9804e4de860018cd863dad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?&lt;/code&gt; = match 'a' 1 or 0 times</source>
          <target state="translated">&lt;code&gt;a?&lt;/code&gt; =「a」に1回または0回一致</target>
        </trans-unit>
        <trans-unit id="9da27773f632fe6532ea60454a7e99563c5df049" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?&lt;/code&gt; means: match 'a' 1 or 0 times</source>
          <target state="translated">&lt;code&gt;a?&lt;/code&gt; 意味：「a」に1回または0回一致</target>
        </trans-unit>
        <trans-unit id="7d837c40b361a1b0e068afb77ac8901111672b8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a?&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 1 or 0 times</source>
          <target state="translated">&lt;code&gt;a?&lt;/code&gt; 意味： &lt;code&gt;'a'&lt;/code&gt; 1回または0回一致する</target>
        </trans-unit>
        <trans-unit id="d95b02ff02305f1ba01c669bd763805726d17747" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a??&lt;/code&gt; means: match 'a' 0 or 1 times. Try 0 first, then 1.</source>
          <target state="translated">&lt;code&gt;a??&lt;/code&gt; つまり、「a」に0回または1回一致します。最初に0、次に1を試してください</target>
        </trans-unit>
        <trans-unit id="3f5ee01f6638a46ec4227de038a3818c92264fe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a??&lt;/code&gt; means: match &lt;code&gt;'a'&lt;/code&gt; 0 or 1 times. Try 0 first, then 1.</source>
          <target state="translated">&lt;code&gt;a??&lt;/code&gt; 意味： &lt;code&gt;'a'&lt;/code&gt; 0回または1回一致させます。最初に0を試し、次に1を試します。</target>
        </trans-unit>
        <trans-unit id="d6f5437673cd5bd4b3828d004ecfdf8a717e1140" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;agent&lt;/code&gt; &amp;mdash; A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If &lt;code&gt;agent&lt;/code&gt; &amp;mdash; ends in a space character, the default user-agent string is appended.</source>
          <target state="translated">&lt;code&gt;agent&lt;/code&gt; &amp;mdash;ユーザーエージェント文字列（デフォルトは「HTTP-Tiny / $ VERSION」）。 &lt;code&gt;agent&lt;/code&gt; &amp;mdash;がスペース文字で終わる場合、デフォルトのユーザーエージェント文字列が追加されます。</target>
        </trans-unit>
        <trans-unit id="40fc80bf6fcacd730498ea7c90f9cf90dcfb60ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt; , &lt;code&gt;AUTOLOAD&lt;/code&gt; , &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , &lt;code&gt;cmp&lt;/code&gt; , &lt;code&gt;CORE&lt;/code&gt; , &lt;code&gt;__DATA__&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;DESTROY&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/elseif&quot;&gt;elseif&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt; , &lt;code&gt;END&lt;/code&gt; , &lt;code&gt;__END__&lt;/code&gt; , &lt;code&gt;eq&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; , &lt;code&gt;ge&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;gt&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; , &lt;code&gt;le&lt;/code&gt; , &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;ne&lt;/code&gt; , &lt;code&gt;not&lt;/code&gt; , &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;UNITCHECK&lt;/code&gt; , &lt;code&gt;unless&lt;/code&gt; , &lt;code&gt;until&lt;/code&gt; , &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;xor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;AUTOLOAD&lt;/code&gt; 、 &lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;cmp&lt;/code&gt; 、 &lt;code&gt;CORE&lt;/code&gt; 、 &lt;code&gt;__DATA__&lt;/code&gt; 、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;DESTROY&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/elseif&quot;&gt;elseif&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;elsif&lt;/code&gt; 、 &lt;code&gt;END&lt;/code&gt; 、 &lt;code&gt;__END__&lt;/code&gt; 、 &lt;code&gt;eq&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;foreach&lt;/code&gt; の、 &lt;code&gt;ge&lt;/code&gt; 、 &lt;code&gt;given&lt;/code&gt; 、 &lt;code&gt;gt&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; 、 &lt;code&gt;le&lt;/code&gt; 、 &lt;code&gt;lt&lt;/code&gt; 、 &lt;code&gt;ne&lt;/code&gt; 、 &lt;code&gt;not&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; 、 &lt;code&gt;unless&lt;/code&gt; 、 &lt;code&gt;until&lt;/code&gt; 、 &lt;code&gt;when&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;xor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5ba6e6c064f75fd46dc68781fbd7e30ef75f65c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;AUTOLOAD&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;CORE&lt;/code&gt;, &lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;INIT&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;AUTOLOAD&lt;/code&gt;, &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;CORE&lt;/code&gt;, &lt;code&gt;__DATA__&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;DESTROY&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;elseif&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;END&lt;/code&gt;, &lt;code&gt;__END__&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;ge&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;INIT&lt;/code&gt;, &lt;code&gt;le&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;ne&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;UNITCHECK&lt;/code&gt;, &lt;code&gt;unless&lt;/code&gt;, &lt;code&gt;until&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a730339d13b6dfc5b68c65a3de6e0fc8a3004b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ansi16&lt;/code&gt; through &lt;code&gt;ansi255&lt;/code&gt;, as aliases for the &lt;code&gt;rgb&lt;/code&gt; and &lt;code&gt;grey&lt;/code&gt; colors, and the corresponding &lt;code&gt;on_ansi&lt;/code&gt; names and &lt;code&gt;ANSI&lt;/code&gt; and &lt;code&gt;ON_ANSI&lt;/code&gt; constants were added in Term::ANSIColor 4.06, included in Perl 5.25.7.</source>
          <target state="translated">&lt;code&gt;ansi16&lt;/code&gt; &lt;code&gt;rgb&lt;/code&gt; および &lt;code&gt;grey&lt;/code&gt; エイリアスとしてのansi16から &lt;code&gt;ansi255&lt;/code&gt; 、および対応する &lt;code&gt;on_ansi&lt;/code&gt; 名と &lt;code&gt;ANSI&lt;/code&gt; および &lt;code&gt;ON_ANSI&lt;/code&gt; 定数が、Perl5.25.7に含まれるTerm :: ANSIColor4.06に追加されました。</target>
        </trans-unit>
        <trans-unit id="237ce529899dd468665989ad0de897e59c5ea0d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;anyinflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 予期します。</target>
        </trans-unit>
        <trans-unit id="7ac0ab28f5ff68d86ee5d0ef5fa75665ecf352d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyinflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを必要とします（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8a199cbe1000a9f2232c1b768205f8a71916e5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyuncompress&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;anyuncompress&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 予期します。</target>
        </trans-unit>
        <trans-unit id="31f7ade2046429d24fa7160a950e7d33814b0b63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyuncompress&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;anyuncompress&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを必要とします（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="90bc2e19b99e66854df10c6d2fbab2bff562ade5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argc&lt;/code&gt; and &lt;code&gt;argv&lt;/code&gt; supply a set of command-line arguments to the Perl interpreter, as would normally be passed to the &lt;code&gt;main&lt;/code&gt; function of a C program. &lt;code&gt;argv[argc]&lt;/code&gt; must be null. These arguments are where the script to parse is specified, either by naming a script file or by providing a script in a &lt;code&gt;-e&lt;/code&gt; option. If &lt;a href=&quot;perlvar#%240&quot;&gt;&lt;code&gt;$0&lt;/code&gt;&lt;/a&gt; will be written to in the Perl interpreter, then the argument strings must be in writable memory, and so mustn't just be string constants.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; と &lt;code&gt;argv&lt;/code&gt; は、通常Cプログラムの &lt;code&gt;main&lt;/code&gt; 関数に渡されるように、一連のコマンドライン引数をPerlインタープリターに提供します。 &lt;code&gt;argv[argc]&lt;/code&gt; はnullでなければなりません。これらの引数は、スクリプトファイルに名前を付けるか、 &lt;code&gt;-e&lt;/code&gt; オプションでスクリプトを指定することにより、解析するスクリプトを指定する場所です。Perlインタープリターで&lt;a href=&quot;perlvar#%240&quot;&gt; &lt;code&gt;$0&lt;/code&gt; &lt;/a&gt;が書き込まれる場合、引数文字列は書き込み可能なメモリ内にある必要があるため、文字列定数だけではありません。</target>
        </trans-unit>
        <trans-unit id="594b23475e0e1b9413cc86129d116de9c7483b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argc&lt;/code&gt; is the number of args (in addition to $self) to pass to the method.</source>
          <target state="translated">&lt;code&gt;argc&lt;/code&gt; は、メソッドに渡す引数（$ selfに加えて）の数です。</target>
        </trans-unit>
        <trans-unit id="505e15e930b4bc514b93c1cfe1a341934396366a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrayDepth&lt;/code&gt;, &lt;code&gt;hashDepth&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;arrayDepth&lt;/code&gt;, &lt;code&gt;hashDepth&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b9598ca1d453d19423eb15b8ff0422182e407fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array_base&lt;/code&gt; - allow the use of &lt;code&gt;$[&lt;/code&gt; to change the starting index of &lt;code&gt;@array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;array_base&lt;/code&gt; -の使用許可 &lt;code&gt;$[&lt;/code&gt; の開始インデックス変更する &lt;code&gt;@array&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="eecb8a104e58709e3b9705ed1f8707f7f5de3bcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias for &lt;code&gt;as_int()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; の別名である &lt;code&gt;as_int()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01e55f32d5564665acf56907988f94adcc97855a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias for &lt;code&gt;as_int()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; の別名である &lt;code&gt;as_int()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f96c96a7f64071f26b5a17951cc68865a282d2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias to &lt;code&gt;as_int()&lt;/code&gt;. &lt;code&gt;as_number&lt;/code&gt; was introduced in v1.22, while &lt;code&gt;as_int()&lt;/code&gt; was introduced in v1.68.</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; のエイリアスです &lt;code&gt;as_int()&lt;/code&gt; 。 &lt;code&gt;as_number&lt;/code&gt; はv1.22で導入され、 &lt;code&gt;as_int()&lt;/code&gt; はv1.68で導入されました。</target>
        </trans-unit>
        <trans-unit id="3d961a102b3d98060a65c3134d4e3d1aa8466353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;as_number()&lt;/code&gt; is an alias to this method. &lt;code&gt;as_number&lt;/code&gt; was introduced in v1.22, while &lt;code&gt;as_int()&lt;/code&gt; was only introduced in v1.68.</source>
          <target state="translated">&lt;code&gt;as_number()&lt;/code&gt; は、このメソッドのエイリアスです。 &lt;code&gt;as_number&lt;/code&gt; はv1.22で導入されましたが、 &lt;code&gt;as_int()&lt;/code&gt; はv1.68でのみ導入されました。</target>
        </trans-unit>
        <trans-unit id="71746fcdf6fe99a0ad5a137467eb6e68086bdb69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous sub, and so must have a semi-colon after the closing brace. Like &lt;code&gt;Thread-&amp;amp;gt;new&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; returns a thread object.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; はスレッドを作成し、直後のブロックを実行します。このブロックは匿名サブとして扱われるため、右中括弧の後にセミコロンが必要です。 &lt;code&gt;Thread-&amp;amp;gt;new&lt;/code&gt; と同様に、 &lt;code&gt;async&lt;/code&gt; はスレッドオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="4ba0ddb0d8e6b435990a0ead91a242e7776f8136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous sub, and so must have a semi-colon after the closing brace. Like &lt;code&gt;Thread-&amp;gt;new&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt; returns a thread object.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; は、その直後のブロックを実行するスレッドを作成します。このブロックは匿名のサブとして扱われるため、閉じ中括弧の後にセミコロンを付ける必要があります。 &lt;code&gt;Thread-&amp;gt;new&lt;/code&gt; と同様に、 &lt;code&gt;async&lt;/code&gt; はスレッドオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="8f0efd0ea8940854ffa84069ded342e116934964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous subroutine, and so must have a semicolon after the closing brace. Like &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; returns a</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; はスレッドを作成し、直後のブロックを実行します。このブロックは無名サブルーチンとして扱われるため、右中括弧の後にセミコロンが必要です。 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; と同様に、 &lt;code&gt;async&lt;/code&gt; はaを返します</target>
        </trans-unit>
        <trans-unit id="c76c25874f5f4c53d86f76f24c8b58e617286e17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt; creates a thread to execute the block immediately following it. This block is treated as an anonymous subroutine, and so must have a semicolon after the closing brace. Like &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt; returns a</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; は、その直後のブロックを実行するスレッドを作成します。このブロックは匿名サブルーチンとして扱われるため、閉じ中括弧の後にセミコロンを付ける必要があります。同様 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; 、 &lt;code&gt;async&lt;/code&gt; 返すA</target>
        </trans-unit>
        <trans-unit id="386d7ab5826c9a6c629f35748fdbfe0d620acdb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attrs&lt;/code&gt; supplies attributes to be applied the subroutine. A handful of attributes take effect by built-in means, being applied to &lt;code&gt;PL_compcv&lt;/code&gt; immediately when seen. Other attributes are collected up and attached to the subroutine by this route. &lt;code&gt;attrs&lt;/code&gt; may be null to supply no attributes, or point to a &lt;code&gt;const&lt;/code&gt; op for a single attribute, or point to a &lt;code&gt;list&lt;/code&gt; op whose children apart from the &lt;code&gt;pushmark&lt;/code&gt; are &lt;code&gt;const&lt;/code&gt; ops for one or more attributes. Each &lt;code&gt;const&lt;/code&gt; op must be a string, giving the attribute name optionally followed by parenthesised arguments, in the manner in which attributes appear in Perl source. The attributes will be applied to the sub by this function. &lt;code&gt;attrs&lt;/code&gt; is consumed by this function.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; は、サブルーチンに適用される属性を提供します。いくつかの属性は組み込みの手段によって有効になり、表示されるとすぐに &lt;code&gt;PL_compcv&lt;/code&gt; に適用されます。他の属性は、このルートによって収集され、サブルーチンにアタッチされます。 &lt;code&gt;attrs&lt;/code&gt; には属性、またはポイントを供給しないためにnullになることもある &lt;code&gt;const&lt;/code&gt; への単一の属性、またはポイントのOP &lt;code&gt;list&lt;/code&gt; 以外から子供OP &lt;code&gt;pushmark&lt;/code&gt; ある &lt;code&gt;const&lt;/code&gt; の1つ以上の属性についてオプス。各 &lt;code&gt;const&lt;/code&gt; opは文字列である必要があり、Perlソースで属性が表示される方法で、属性名の後に括弧で囲まれた引数をオプションで指定します。属性は、この関数によってサブに適用されます。 &lt;code&gt;attrs&lt;/code&gt; はこの関数によって消費されます。</target>
        </trans-unit>
        <trans-unit id="20e239fdae6920d9515de44e7fcc79dd92cfa709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_help&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_help&lt;/code&gt; は、呼び出し側プログラムが &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; ステートメントで2.32より高いバージョン番号を明示的に指定した場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="15046591e9456a06fe2fca89490693922c130301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_help&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_help&lt;/code&gt; 呼び出し側プログラムが &lt;code&gt;use&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; ステートメントで2.32より大きいバージョン番号を明示的に指定した場合、auto_helpが有効になります。</target>
        </trans-unit>
        <trans-unit id="44063872f18d367e632a96d4c2413f4a5756f7e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_version&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_version&lt;/code&gt; は、呼び出し側プログラムが &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; ステートメントで2.32より高いバージョン番号を明示的に指定した場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="4a74561dc358511e7fd16173d3a37bd02a6dccc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_version&lt;/code&gt; will be enabled if the calling program explicitly specified a version number higher than 2.32 in the &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;auto_version&lt;/code&gt; は、呼び出し側プログラムが &lt;code&gt;use&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; ステートメントで2.32より大きいバージョン番号を明示的に指定した場合に有効になります。</target>
        </trans-unit>
        <trans-unit id="1347f069f43387e1b93d21850e69034397cebbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autobundle&lt;/code&gt; writes a bundle file into the &lt;code&gt;$CPAN::Config-&amp;gt;{cpan_home}/Bundle&lt;/code&gt; directory. The file contains a list of all modules that are both available from CPAN and currently installed within @INC. Duplicates of each distribution are suppressed. The name of the bundle file is based on the current date and a counter, e.g.</source>
          <target state="translated">&lt;code&gt;autobundle&lt;/code&gt; はバンドルファイルを &lt;code&gt;$CPAN::Config-&amp;gt;{cpan_home}/Bundle&lt;/code&gt; ディレクトリに書き込みます。このファイルには、CPANから入手でき、現在@INCにインストールされているすべてのモジュールのリストが含まれています。各分布の重複は抑制されます。バンドルファイルの名前は、現在の日付とカウンターに基づいています。たとえば、</target>
        </trans-unit>
        <trans-unit id="8c7e7ae5f16a14cbcac229ca9b12c6c3b27e362b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoderef&lt;/code&gt; - allow push, each, keys, and other built-ins on references.</source>
          <target state="translated">&lt;code&gt;autoderef&lt;/code&gt; -参照のプッシュ、それぞれ、キー、およびその他の組み込みを許可します。</target>
        </trans-unit>
        <trans-unit id="8340269df63e967accad5f4e76ab74dd450f63e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie::skip&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;autodie::skip&lt;/code&gt; 代わりにautodie :: skip。</target>
        </trans-unit>
        <trans-unit id="24b650573b7b7b2cbf42f22f273aca6f48d4d98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; can be enabled for all of Perl's built-ins, including &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; with:</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; など、Perlのすべての組み込みで有効にできます。</target>
        </trans-unit>
        <trans-unit id="a09b6de086f61d0a65534bde69dd283b4e2d788f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; can be enabled for all of Perl's built-ins, including &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; with:</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; は、 &lt;code&gt;system&lt;/code&gt; と &lt;code&gt;exec&lt;/code&gt; を含むPerlのすべての組み込みで有効にできます。</target>
        </trans-unit>
        <trans-unit id="92fad0431ea3a38aae4174e77bf5178a3d0e649d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; may not work correctly if used inside a file with a name that looks like a string eval, such as</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; 次のように、文字列evalのような名前のファイル内で使用すると、autodieが正しく機能しない場合があります。</target>
        </trans-unit>
        <trans-unit id="454c5cd48c87ed2210f01705090343cf6b8e7234" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; performs no checking of called context to determine whether to throw an exception; the explicitness of error handling with &lt;code&gt;autodie&lt;/code&gt; is a deliberate feature.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; は、呼び出されたコンテキストのチェックを実行せず、例外をスローするかどうかを決定します。 &lt;code&gt;autodie&lt;/code&gt; によるエラー処理の明示性は、意図的な機能です。</target>
        </trans-unit>
        <trans-unit id="0db3f5b6429d1ec4bd262f8ef515af9dd0c28044" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; provides a passive interface to allow you to declare hints for your module. These hints will be found and used by &lt;code&gt;autodie&lt;/code&gt; if it is loaded, but otherwise have no effect (or dependencies) without autodie. To set these, your module needs to declare that it</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; は、モジュールのヒントを宣言できるようにするパッシブインターフェイスを提供します。これらのヒントは、ロードされて &lt;code&gt;autodie&lt;/code&gt; 場合はautodieによって検出および使用されますが、それ以外の場合は、autodieなしでは効果（または依存関係）はありません。これらを設定するには、モジュールがそれを宣言する必要があります</target>
        </trans-unit>
        <trans-unit id="f72fbd0d22196753cef72e3aaeff8f62e055b88f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; uses the &lt;a href=&quot;IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; module to change &lt;code&gt;system&lt;/code&gt;. See its documentation for further information.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; は、&lt;a href=&quot;IPC::System::Simple&quot;&gt;IPC :: System :: Simple&lt;/a&gt;モジュールを使用してシステムを変更し &lt;code&gt;system&lt;/code&gt; 。詳細については、そのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c0331eb04d953ce3ea3a3439a3951a3642b45368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autodie&lt;/code&gt; uses the &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; module to change &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;. See its documentation for further information.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; は&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::System::Simple&quot;&gt;IPC :: System :: Simple&lt;/a&gt;モジュールを使用してシステムを変更し &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0e6a31e9af4af180479c7899fb188e9a03c0bf8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoftp&lt;/code&gt; is a program that can retrieve, send, or list files via the FTP protocol in a non-interactive manner.</source>
          <target state="translated">&lt;code&gt;autoftp&lt;/code&gt; は、非対話的な方法でFTPプロトコルを介してファイルを取得、送信、または一覧表示できるプログラムです。</target>
        </trans-unit>
        <trans-unit id="2bc7ee78e0a3ef2c6ca2c0dc57cbee30b57d77f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; imports the default functions automatically, but &lt;code&gt;load&lt;/code&gt; do not import any functions.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; はデフォルトの関数を自動的にインポートしますが、 &lt;code&gt;load&lt;/code&gt; は関数をインポートしません。</target>
        </trans-unit>
        <trans-unit id="232241e3903140051e2046c8f6440d532e004aca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; is usable under &lt;code&gt;&lt;a href=&quot;../functions/begin&quot;&gt;BEGIN{};&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../functions/begin&quot;&gt;BEGIN{};&lt;/a&gt;&lt;/code&gt; 使用できます。。</target>
        </trans-unit>
        <trans-unit id="e24e49bd446fae2d8a274e067f35727fbe6cf233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoload&lt;/code&gt; is usable under &lt;code&gt;BEGIN{};&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;autoload&lt;/code&gt; は &lt;code&gt;BEGIN{};&lt;/code&gt; 使用できます。。</target>
        </trans-unit>
        <trans-unit id="3895a69d42fb934afc4c8b2a1c096fa7c3b874a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;av_fetch&lt;/code&gt; and the corresponding hash functions &lt;code&gt;hv_fetch&lt;/code&gt; and &lt;code&gt;hv_fetch_ent&lt;/code&gt; actually return an undefined mortal value whose magic has been initialized using &lt;code&gt;mg_copy&lt;/code&gt; . Note the value so returned does not need to be deallocated, as it is already mortal. [MAYCHANGE] But you will need to call &lt;code&gt;mg_get()&lt;/code&gt; on the returned value in order to actually invoke the perl level &quot;FETCH&quot; method on the underlying TIE object. Similarly, you may also call &lt;code&gt;mg_set()&lt;/code&gt; on the return value after possibly assigning a suitable value to it using &lt;code&gt;sv_setsv&lt;/code&gt; , which will invoke the &quot;STORE&quot; method on the TIE object. [/MAYCHANGE]</source>
          <target state="translated">&lt;code&gt;av_fetch&lt;/code&gt; および対応するハッシュ関数 &lt;code&gt;hv_fetch&lt;/code&gt; および &lt;code&gt;hv_fetch_ent&lt;/code&gt; は、実際には &lt;code&gt;mg_copy&lt;/code&gt; を使用してマジックが初期化された未定義の致命的な値を返します。返された値はすでに致命的であるため、割り当てを解除する必要はありません。 [MAYCHANGE]ただし、基になるTIEオブジェクトでPerlレベルの「FETCH」メソッドを実際に呼び出すには、戻り値で &lt;code&gt;mg_get()&lt;/code&gt; を呼び出す必要があります。同様に、あなたも呼び出すこと &lt;code&gt;mg_set()&lt;/code&gt; おそらく使用してそこに適切な値を代入した後、戻り値に &lt;code&gt;sv_setsv&lt;/code&gt; TIEオブジェクトに対して「STORE」メソッドを呼び出します。 [/ MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="44a90e091fe36f583c32fdbf611cdbf4b367267d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;av_fetch&lt;/code&gt; and the corresponding hash functions &lt;code&gt;hv_fetch&lt;/code&gt; and &lt;code&gt;hv_fetch_ent&lt;/code&gt; actually return an undefined mortal value whose magic has been initialized using &lt;code&gt;mg_copy&lt;/code&gt;. Note the value so returned does not need to be deallocated, as it is already mortal. [MAYCHANGE] But you will need to call &lt;code&gt;mg_get()&lt;/code&gt; on the returned value in order to actually invoke the perl level &quot;FETCH&quot; method on the underlying TIE object. Similarly, you may also call &lt;code&gt;mg_set()&lt;/code&gt; on the return value after possibly assigning a suitable value to it using &lt;code&gt;sv_setsv&lt;/code&gt;, which will invoke the &quot;STORE&quot; method on the TIE object. [/MAYCHANGE]</source>
          <target state="translated">&lt;code&gt;av_fetch&lt;/code&gt; および対応するハッシュ関数 &lt;code&gt;hv_fetch&lt;/code&gt; および &lt;code&gt;hv_fetch_ent&lt;/code&gt; は、実際には、mg_copyを使用してマジックが初期化された未定義の致命的な値を &lt;code&gt;mg_copy&lt;/code&gt; ます。そのように返された値はすでに致命的であるため、割り当てを解除する必要がないことに注意してください。 [MAYCHANGE]ただし、基になるTIEオブジェクトでperlレベルの「FETCH」メソッドを実際に呼び出すには、戻り値に対して &lt;code&gt;mg_get()&lt;/code&gt; を呼び出す必要があります。同様に、あなたも呼び出すこと &lt;code&gt;mg_set()&lt;/code&gt; おそらく使用してそこに適切な値を代入した後、戻り値に &lt;code&gt;sv_setsv&lt;/code&gt; TIEオブジェクトに対して「STORE」メソッドを呼び出します。 [/ MAYCHANGE]</target>
        </trans-unit>
        <trans-unit id="370ecf3fa40e8e270cd9e8d46abf508006b8748f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times, as many times as possible, and don't give anything up. &lt;code&gt;a?+&lt;/code&gt; is short for &lt;code&gt;a{0,1}+&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a{n,m}+&lt;/code&gt; は、少なくとも &lt;code&gt;n&lt;/code&gt; 回、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 回以下、可能な限り多く一致し、何もあきらめないことを意味します。 &lt;code&gt;a?+&lt;/code&gt; は &lt;code&gt;a{0,1}+&lt;/code&gt; 略</target>
        </trans-unit>
        <trans-unit id="1ae130a0ed68c92222592fa86f1895a7e988c6c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;m&lt;/code&gt; times, as many times as possible, and don't give anything up. &lt;code&gt;a?+&lt;/code&gt; is short for &lt;code&gt;a{0,1}+&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a{n,m}+&lt;/code&gt; は、 &lt;code&gt;n&lt;/code&gt; 回以上、 &lt;code&gt;m&lt;/code&gt; 回以下、可能な限り一致し、何も諦めないことを意味します。 &lt;code&gt;a?+&lt;/code&gt; は &lt;code&gt;a{0,1}+&lt;/code&gt; 略です</target>
        </trans-unit>
        <trans-unit id="85e375a004d6e03b949adf214a1f3c21deb80331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; = match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; =少なくとも &lt;code&gt;n&lt;/code&gt; 回一致しますが、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 回以下です。</target>
        </trans-unit>
        <trans-unit id="0fe113abe8bdde84607c26df4f6e9a7a76262ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; = match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;m&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; =少なくとも &lt;code&gt;n&lt;/code&gt; 回一致しますが、 &lt;code&gt;m&lt;/code&gt; 回以下です。</target>
        </trans-unit>
        <trans-unit id="dc66155533b942e5ab8f7ec970fd9b80f6477f47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; 手段：少なくとも試合 &lt;code&gt;n&lt;/code&gt; 倍ではなく、より多く &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 倍。</target>
        </trans-unit>
        <trans-unit id="5b055a491eac57ec668a2f9d193ea3b24ff90d2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but not more than &lt;code&gt;m&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;a{n,m}&lt;/code&gt; は、次のことを意味します。少なくとも &lt;code&gt;n&lt;/code&gt; 回一致しますが、 &lt;code&gt;m&lt;/code&gt; 回以下です。</target>
        </trans-unit>
        <trans-unit id="2e5c7c3b0091b46feced5840b89ec76e6c84ecde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}?&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; times, as few times as possible</source>
          <target state="translated">&lt;code&gt;a{n,m}?&lt;/code&gt; 意味：少なくとも &lt;code&gt;n&lt;/code&gt; 回、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; 回以下、できるだけ少ない回数一致</target>
        </trans-unit>
        <trans-unit id="d5c2ac0fbfcd05ee2c63a5f902268a4d61c84e09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,m}?&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, not more than &lt;code&gt;m&lt;/code&gt; times, as few times as possible</source>
          <target state="translated">&lt;code&gt;a{n,m}?&lt;/code&gt; 意味：少なくとも &lt;code&gt;n&lt;/code&gt; 回、 &lt;code&gt;m&lt;/code&gt; 回以下、可能な限り少ない回数一致する</target>
        </trans-unit>
        <trans-unit id="c2b5ef56170764cdecbc0d347e679c1d12841cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but as many times as possible, and don't give anything up. &lt;code&gt;a*+&lt;/code&gt; is short for &lt;code&gt;a{0,}+&lt;/code&gt; and &lt;code&gt;a++&lt;/code&gt; is short for &lt;code&gt;a{1,}+&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;a{n,}+&lt;/code&gt; は、少なくとも &lt;code&gt;n&lt;/code&gt; 回一致しますが、できるだけ多く一致し、何もあきらめないことを意味します。 &lt;code&gt;a*+&lt;/code&gt; は &lt;code&gt;a{0,}+&lt;/code&gt; 略であり &lt;code&gt;a++&lt;/code&gt; は &lt;code&gt;a{1,}+&lt;/code&gt; 略です。</target>
        </trans-unit>
        <trans-unit id="88b4985e9406ac84c6a9bc0a09eb0c7779e2dfda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}+&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but as many times as possible, and don't give anything up. &lt;code&gt;a*+&lt;/code&gt; is short for &lt;code&gt;a{0,}+&lt;/code&gt; and &lt;code&gt;a++&lt;/code&gt; is short for &lt;code&gt;a{1,}+&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a{n,}+&lt;/code&gt; は、少なくとも &lt;code&gt;n&lt;/code&gt; 回一致しますが、できるだけ多く一致し、何もあきらめないことを意味します。 &lt;code&gt;a*+&lt;/code&gt; のための短い &lt;code&gt;a{0,}+&lt;/code&gt; および &lt;code&gt;a++&lt;/code&gt; のための短い &lt;code&gt;a{1,}+&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b2e64ab97f56cca83c147d8db97bd5f38b759239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}&lt;/code&gt; = match at least &lt;code&gt;n&lt;/code&gt; or more times</source>
          <target state="translated">&lt;code&gt;a{n,}&lt;/code&gt; =少なくとも &lt;code&gt;n&lt;/code&gt; 回以上一致</target>
        </trans-unit>
        <trans-unit id="55d47f9ce037822c6fc7d0cc1f2af2151924474e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; or more times</source>
          <target state="translated">&lt;code&gt;a{n,}&lt;/code&gt; は、少なくとも &lt;code&gt;n&lt;/code&gt; 回以上一致することを意味します</target>
        </trans-unit>
        <trans-unit id="4796e3b46c1c24af1a67d6416b09b75dcbb56116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n,}?&lt;/code&gt; means: match at least &lt;code&gt;n&lt;/code&gt; times, but as few times as possible</source>
          <target state="translated">&lt;code&gt;a{n,}?&lt;/code&gt; 意味：少なくとも &lt;code&gt;n&lt;/code&gt; 回一致しますが、可能な限り少なく一致します</target>
        </trans-unit>
        <trans-unit id="e98166d002c5d2230a03efe89288ff0c20693e55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}+&lt;/code&gt; means: match exactly &lt;code&gt;n&lt;/code&gt; times. It is just there for notational consistency.</source>
          <target state="translated">&lt;code&gt;a{n}+&lt;/code&gt; は、正確に &lt;code&gt;n&lt;/code&gt; 回一致することを意味します。表記の一貫性のためにあります。</target>
        </trans-unit>
        <trans-unit id="aff6bf2bdc74bd6dd9dac4febf280883951ce36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}&lt;/code&gt; = match exactly &lt;code&gt;n&lt;/code&gt; times</source>
          <target state="translated">&lt;code&gt;a{n}&lt;/code&gt; =正確に &lt;code&gt;n&lt;/code&gt; 回一致</target>
        </trans-unit>
        <trans-unit id="488e096629b1696be9c45608edaf6f60d2af36fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}&lt;/code&gt; means: match exactly &lt;code&gt;n&lt;/code&gt; times</source>
          <target state="translated">&lt;code&gt;a{n}&lt;/code&gt; は、正確に &lt;code&gt;n&lt;/code&gt; 回一致することを意味します</target>
        </trans-unit>
        <trans-unit id="cca987a62d500844e024a8db45998e5cb0a2b3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a{n}?&lt;/code&gt; means: match exactly &lt;code&gt;n&lt;/code&gt; times. Because we match exactly &lt;code&gt;n&lt;/code&gt; times, &lt;code&gt;a{n}?&lt;/code&gt; is equivalent to &lt;code&gt;a{n}&lt;/code&gt; and is just there for notational consistency.</source>
          <target state="translated">&lt;code&gt;a{n}?&lt;/code&gt; つまり、正確に &lt;code&gt;n&lt;/code&gt; 回一致します。正確に &lt;code&gt;n&lt;/code&gt; 回一致するため、 &lt;code&gt;a{n}?&lt;/code&gt; &lt;code&gt;a{n}&lt;/code&gt; と同等であり、表記の一貫性のためにあります。</target>
        </trans-unit>
        <trans-unit id="9f0b21f37b253e85a0595d1e8980ee852b5acc4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_version_hook&lt;/code&gt; -- if provided, when a version cannot be parsed into a version object, this code reference will be called with the invalid version string as first argument, and the module name as second argument. It must return a valid version object.</source>
          <target state="translated">&lt;code&gt;bad_version_hook&lt;/code&gt; -指定されている場合、バージョンをバージョンオブジェクトに解析できない場合、このコード参照は、無効なバージョン文字列を最初の引数として、モジュール名を2番目の引数として呼び出されます。有効なバージョンオブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="f52c5653f4696bd55e9f87cb851ed5b97df1c68e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bailout&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;bailout&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="85746857608dedc350be9624fa95666d17cbadec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;base&lt;/code&gt; will also initialize the fields if one of the base classes has it. Multiple inheritance of fields is &lt;b&gt;NOT&lt;/b&gt; supported, if two or more base classes each have inheritable fields the 'base' pragma will croak. See &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; for a description of this feature.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; 基底クラスの1つは、それを持っている場合も、フィールドを初期化します。フィールドの多重継承はサポートされてい&lt;b&gt;ません&lt;/b&gt;。2つ以上の基本クラスにそれぞれ継承可能なフィールドがある場合、 'base'プラグマが鳴ります。この機能の説明については、&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a49870f1dbf6685e5c25e3fe1a1f02ddb9994bc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseex&lt;/code&gt; is the error message or object. If it is a reference, it will be used as-is. Otherwise it is used as a string, and if it does not end with a newline then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;baseex&lt;/code&gt; は、エラーメッセージまたはオブジェクトです。参照の場合はそのまま使用します。それ以外の場合は文字列として使用され、改行で終わらない場合は、&lt;a href=&quot;#mess_sv&quot;&gt;「mess_sv」で&lt;/a&gt;説明されているように、コード内の現在の場所を示す形で拡張されます。</target>
        </trans-unit>
        <trans-unit id="191bfc9558f7a150df37f22495b9090b9cec45da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseex&lt;/code&gt; is the error message or object. If it is a reference, it will be used as-is. Otherwise it is used as a string, and if it does not end with a newline then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;mess_sv&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;baseex&lt;/code&gt; はエラーメッセージまたはオブジェクトです。参照の場合は、そのまま使用されます。それ以外の場合は、文字列として使用され、改行で終わっていない場合は、&lt;a href=&quot;#mess_sv&quot;&gt;mess_svで&lt;/a&gt;説明されているように、コード内の現在の場所を示すもので拡張されます。</target>
        </trans-unit>
        <trans-unit id="4b66a2dfa7d8acaa040a7d0a40556f020987bdaa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;basemsg&lt;/code&gt; is the initial message or object. If it is a reference, it will be used as-is and will be the result of this function. Otherwise it is used as a string, and if it already ends with a newline, it is taken to be complete, and the result of this function will be the same string. If the message does not end with a newline, then a segment such as &lt;code&gt;at
foo.pl line 37&lt;/code&gt; will be appended, and possibly other clauses indicating the current state of execution. The resulting message will end with a dot and a newline.</source>
          <target state="translated">&lt;code&gt;basemsg&lt;/code&gt; は初期メッセージまたはオブジェクトです。参照の場合はそのまま使用され、この関数の結果になります。それ以外の場合は文字列として使用され、すでに改行で終わっている場合は、それが完了したと見なされ、この関数の結果は同じ文字列になります。メッセージが改行で終わっていない場合、 &lt;code&gt;at foo.pl line 37&lt;/code&gt; などのセグメントが追加され、現在の実行状態を示す他の句が追加される場合があります。結果のメッセージはドットと改行で終わります。</target>
        </trans-unit>
        <trans-unit id="1cb5487d902affd230109c249c6cfd2461d057fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;basename()&lt;/code&gt; returns the last level of a filepath even if the last level is clearly directory. In effect, it is acting like &lt;code&gt;&lt;a href=&quot;../functions/pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; for paths. This differs from &lt;code&gt;fileparse()&lt;/code&gt; 's behaviour.</source>
          <target state="translated">&lt;code&gt;basename()&lt;/code&gt; は、最終レベルが明らかにディレクトリである場合でも、ファイルパスの最終レベルを返します。実際には、パスの &lt;code&gt;&lt;a href=&quot;../functions/pop&quot;&gt;pop()&lt;/a&gt;&lt;/code&gt; のように動作します。これは &lt;code&gt;fileparse()&lt;/code&gt; の動作とは異なります。</target>
        </trans-unit>
        <trans-unit id="481b1743fd918f442200d9ffe7f48dbe81189cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;basename()&lt;/code&gt; returns the last level of a filepath even if the last level is clearly directory. In effect, it is acting like &lt;code&gt;pop()&lt;/code&gt; for paths. This differs from &lt;code&gt;fileparse()&lt;/code&gt;'s behaviour.</source>
          <target state="translated">&lt;code&gt;basename()&lt;/code&gt; は、最後のレベルが明らかにディレクトリであっても、ファイルパスの最後のレベルを返します。事実上、パスの &lt;code&gt;pop()&lt;/code&gt; のように機能します。これは、 &lt;code&gt;fileparse()&lt;/code&gt; の動作とは異なります。</target>
        </trans-unit>
        <trans-unit id="c350e4c9f21cb0a1a08b12c3f3a234fd3306d7d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; is just a thin wrapper around various modules of the Math::BigInt family. Think of it as the head of the family, who runs the shop, and orders the others to do the work.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; は、Math :: BigIntファミリーのさまざまなモジュールの薄いラッパーです。それは、店を経営し、他の人に仕事をするように命じる家族の長であると考えてください。</target>
        </trans-unit>
        <trans-unit id="d9ef559a5aee4fc6060476dc9dce6429a54a1fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; overrides these routines with versions that can also handle big integer values. Under Perl prior to version v5.9.4, however, this will not happen unless you specifically ask for it with the two import tags &quot;hex&quot; and &quot;oct&quot; - and then it will be global and cannot be disabled inside a scope with &quot;no bigint&quot;:</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; は、これらのルーチンを、big integer値も処理できるバージョンでオーバーライドします。ただし、バージョンv5.9.4より前のPerlでは、2つのインポートタグ「hex」と「oct」で具体的に要求しない限り、これは発生しません。その後、グローバルになり、「no」でスコープ内で無効にすることはできません。 bigint &quot;：</target>
        </trans-unit>
        <trans-unit id="77855777212dc0e61b0deaffae594983ca8d2546" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; は、整数リテラルと浮動小数点リテラルの処理をオーバーロードし、それらを&lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigInt&lt;/a&gt;オブジェクトに変換することで機能します。</target>
        </trans-unit>
        <trans-unit id="9648bd882ff18dacc401ac93a3cbc5bdbf4c9d3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigint&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; は、整数リテラルと浮動小数点リテラルの処理をオーバーロードし、それらを&lt;a href=&quot;math/bigint&quot;&gt;Math :: BigInt&lt;/a&gt;オブジェクトに変換することで機能します。</target>
        </trans-unit>
        <trans-unit id="e67fd9272e03c0fff199bea83aa5f87ef9db2f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bignum&lt;/code&gt; is just a thin wrapper around various modules of the Math::BigInt family. Think of it as the head of the family, who runs the shop, and orders the others to do the work.</source>
          <target state="translated">&lt;code&gt;bignum&lt;/code&gt; は、Math :: BigIntファミリーのさまざまなモジュールの薄いラッパーです。それは、店を経営し、他の人に仕事をするように命じる家族の長であると考えてください。</target>
        </trans-unit>
        <trans-unit id="6dce9e30bbfb12ce58e81b2b758a61886ed75fa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bignum&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;Math::BigFloat&quot;&gt;Math::BigFloat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bignum&lt;/code&gt; に変換し、過負荷に整数の取り扱いと小数点リテラル浮動作品&lt;a href=&quot;Math::BigInt&quot;&gt;数学:: BigIntの&lt;/a&gt;か、&lt;a href=&quot;Math::BigFloat&quot;&gt;数学::ビッグフロートは、&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="4484da561486fa621b4d5b400e117645932edd50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bignum&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;math/bigfloat&quot;&gt;Math::BigFloat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bignum&lt;/code&gt; に変換し、過負荷に整数の取り扱いと小数点リテラル浮動作品&lt;a href=&quot;math/bigint&quot;&gt;数学:: BigIntの&lt;/a&gt;か、&lt;a href=&quot;math/bigfloat&quot;&gt;数学::ビッグフロートは、&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0997be7992ad036fe88c07a1a2c5ae3b3d710948" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigrat&lt;/code&gt; is just a thin wrapper around various modules of the Math::BigInt family. Think of it as the head of the family, who runs the shop, and orders the others to do the work.</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; は、Math :: BigIntファミリーのさまざまなモジュールの薄いラッパーです。それは、店を経営し、他の人に仕事をするように命じる家族の長であると考えてください。</target>
        </trans-unit>
        <trans-unit id="31610ed7d713b997c6fc0c581db5b312ee95d486" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigrat&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;Math::BigRat&quot;&gt;Math::BigRat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; は、それらを変換し、整数の取り扱いの過負荷と小数点リテラルを浮動することで動作&lt;a href=&quot;Math::BigInt&quot;&gt;の数学:: BigIntの&lt;/a&gt;か、&lt;a href=&quot;Math::BigRat&quot;&gt;数学:: BigRatは&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f1cc1a07b43faefb3cad91d623e619dcf6f61922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bigrat&lt;/code&gt; works by overloading handling of integer and floating point literals, converting them to &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; or &lt;a href=&quot;math/bigrat&quot;&gt;Math::BigRat&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; は、それらを変換し、整数の取り扱いの過負荷と小数点リテラルを浮動することで動作&lt;a href=&quot;math/bigint&quot;&gt;の数学:: BigIntの&lt;/a&gt;か、&lt;a href=&quot;math/bigrat&quot;&gt;数学:: BigRatは&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="4c21de8e7500902adaf01a3b784729b7ecd719ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binmode&lt;/code&gt; accepts one optional parameter, which is the layer to be passed on to the &lt;code&gt;binmode&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; は、 &lt;code&gt;binmode&lt;/code&gt; 呼び出しに渡されるレイヤーである1つのオプションのパラメーターを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5e783c908b4a308a204b7ce2483e8ec429148213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binmode&lt;/code&gt; sets &lt;code&gt;binmode&lt;/code&gt; on the underlying &lt;code&gt;IO&lt;/code&gt; object, as documented in &lt;code&gt;perldoc -f binmode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; をのセット &lt;code&gt;binmode&lt;/code&gt; を根本的に &lt;code&gt;IO&lt;/code&gt; のオブジェクト、に記載されているように &lt;code&gt;perldoc -f binmode&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61f80f2e5367f2767803da654200383c339903fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bitwise&lt;/code&gt; - allow the new stringwise bit operators</source>
          <target state="translated">&lt;code&gt;bitwise&lt;/code&gt; -新しい文字列単位のビット演算子を許可します</target>
        </trans-unit>
        <trans-unit id="c6b6c07a71f5686ac19cd9774ee11d986397deac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bless&lt;/code&gt;, &lt;code&gt;blessed&lt;/code&gt;, and &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bless&lt;/code&gt; 、 &lt;code&gt;blessed&lt;/code&gt; 、および &lt;code&gt;ref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="10db204f6c1bcb2f5fdc7fee81a4199ba0a57f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blocking&lt;/code&gt; will return the value of the previous setting, or the current setting if &lt;code&gt;BOOL&lt;/code&gt; is not given.</source>
          <target state="translated">&lt;code&gt;blocking&lt;/code&gt; は、以前の設定の値、または &lt;code&gt;BOOL&lt;/code&gt; が指定されていない場合は現在の設定の値を返します。</target>
        </trans-unit>
        <trans-unit id="f9c9b344df6b3d92130baeb97d1162148eeccf12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bmodpow&lt;/code&gt; also supports negative exponents.</source>
          <target state="translated">&lt;code&gt;bmodpow&lt;/code&gt; は負の指数もサポートします。</target>
        </trans-unit>
        <trans-unit id="cf87ddfc025679a4d593ab2adfc2fee4551858ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bnorm()&lt;/code&gt; on a BigInt object is now effectively a no-op, since the numbers are always stored in normalized form. If passed a string, creates a BigInt object from the input.</source>
          <target state="translated">&lt;code&gt;bnorm()&lt;/code&gt; 数値は常に正規化された形式で保存されるため、BigIntオブジェクトのbnorm（）は事実上何もしないようになりました。文字列を渡した場合、入力からBigIntオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b4162c471db6a86a9b946348362a41973f1acb4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bpow()&lt;/code&gt; (and the rounding functions) now modifies the first argument and returns it, unlike the old code which left it alone and only returned the result. This is to be consistent with &lt;code&gt;badd()&lt;/code&gt; etc. The first three modifies $x, the last one won't:</source>
          <target state="translated">&lt;code&gt;bpow()&lt;/code&gt; （および丸め関数）は、最初の引数を変更して返すようになりました。これは、それをそのままにして結果のみを返す古いコードとは異なります。これは &lt;code&gt;badd()&lt;/code&gt; などと一貫性を保つためです。最初の3つは$ xを変更しますが、最後の3つは変更しません。</target>
        </trans-unit>
        <trans-unit id="798cacd9e526afca183dccd1f959cca59d152f9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bpow()&lt;/code&gt; (and the rounding functions) now modifies the first argument and returns it, unlike the old code which left it alone and only returned the result. This is to be consistent with &lt;code&gt;badd()&lt;/code&gt; etc. The first three will modify $x, the last one won't:</source>
          <target state="translated">&lt;code&gt;bpow()&lt;/code&gt; （および丸め関数）は、最初の引数を変更して返すようになりました。これは、そのままにして結果のみを返していた古いコードとは異なります。これは &lt;code&gt;badd()&lt;/code&gt; などとの整合性を保つためです。最初の3つは$ xを変更し、最後の1つは変更しません。</target>
        </trans-unit>
        <trans-unit id="849aa8872c1c17a134807b61340d2432f9319b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bpow()&lt;/code&gt; now modifies the first argument, unlike the old code which left it alone and only returned the result. This is to be consistent with &lt;code&gt;badd()&lt;/code&gt; etc. The first will modify $x, the second one won't:</source>
          <target state="translated">&lt;code&gt;bpow()&lt;/code&gt; が最初の引数を変更するようになりました。これは、それをそのままにして結果のみを返した古いコードとは異なります。これは &lt;code&gt;badd()&lt;/code&gt; などとの整合性を保つためです。1つ目は$ xを変更し、2つ目は変更しません。</target>
        </trans-unit>
        <trans-unit id="a80a75fc2d5e34cc7d42f63e584e793a52a18a8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;__FILE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;__LINE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;__PACKAGE__&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/evalbytes&quot;&gt;evalbytes&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;__FILE__&lt;/code&gt; FILE __、 &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;__LINE__&lt;/code&gt; &lt;code&gt;__PACKAGE__&lt;/code&gt; __、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、__ PACKAGE __、 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d37b9dd4d4b04a787d223ae6bcbe782e25d34036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; is available only if you enable the experimental &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature or use the &lt;code&gt;CORE::&lt;/code&gt; prefix. The &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature also enables the &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; statements, which are documented in &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt;. The &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature is enabled automatically with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; (or higher) declaration in the current scope. In Perl v5.14 and earlier, &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; required the &lt;code&gt;&quot;switch&quot;&lt;/code&gt; feature, like the other keywords.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; は、試験的な &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 機能を有効にするか、 &lt;code&gt;CORE::&lt;/code&gt; プレフィックスを使用する場合にのみ使用できます。 &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 機能も有効に &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;given&lt;/code&gt; と &lt;code&gt;when&lt;/code&gt; に文書化されている文、&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;perlsynでswitch文&lt;/a&gt;。 &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 機能を用いて自動的に有効になり &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.10&lt;/code&gt; 現在のスコープ内の（またはそれ以上）の宣言。 Perl v5.14以前で &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 、他のキーワードと同様に、引き続き &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 機能が必要です。</target>
        </trans-unit>
        <trans-unit id="9c0c24e8a494482705a4281d9651a49d0ed492fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsearch()&lt;/code&gt; not supplied. For doing binary search on wordlists, see &lt;a href=&quot;Search::Dict&quot;&gt;Search::Dict&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bsearch()&lt;/code&gt; は提供されていません。ワードリストでバイナリ検索を実行するには、&lt;a href=&quot;Search::Dict&quot;&gt;Search :: Dictを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d28a27314909fae3508f8ed1164a5ec5399fbac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsearch()&lt;/code&gt; not supplied. For doing binary search on wordlists, see &lt;a href=&quot;search/dict&quot;&gt;Search::Dict&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bsearch()&lt;/code&gt; が提供されていません。単語リストのバイナリ検索については、&lt;a href=&quot;search/dict&quot;&gt;Search :: Dictを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c0363f4ea35e1c639b600e344e40421943c6fc8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsqrt()&lt;/code&gt; returns the square root truncated to an integer.</source>
          <target state="translated">&lt;code&gt;bsqrt()&lt;/code&gt; は、整数に切り捨てられた平方根を返します。</target>
        </trans-unit>
        <trans-unit id="dc1b1c495b5749e6b5ca6c410c06a5dadd577616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bsqrt()&lt;/code&gt; works only good if the result is a big integer, e.g. the square root of 144 is 12, but from 12 the square root is 3, regardless of rounding mode. The reason is that the result is always truncated to an integer.</source>
          <target state="translated">&lt;code&gt;bsqrt()&lt;/code&gt; は、結果が大きな整数である場合にのみ機能します。たとえば、144の平方根は12ですが、12からの平方根は、丸めモードに関係なく3です。その理由は、結果が常に整数に切り捨てられるためです。</target>
        </trans-unit>
        <trans-unit id="e6f4bf676cc3a699b15481fc4a058909b15b5eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bunzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;bunzip2&lt;/code&gt; は、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 少なくとも2つのパラメーターを想定しています。</target>
        </trans-unit>
        <trans-unit id="10729fb23cd747af7b8a893586b2811efe1265c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bunzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;bunzip2&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターが必要です（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="aa1289eb7503b5143976f8e66e1ad335db6fef90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes2str&lt;/code&gt; may be used as an alias for &lt;code&gt;decode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bytes2str&lt;/code&gt; は、 &lt;code&gt;decode&lt;/code&gt; のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="b47b055b13026beadfc746983011dadb9ab6a7eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes::length()&lt;/code&gt; is admittedly handy if you need to know the &lt;b&gt;byte length&lt;/b&gt; of a Perl scalar. But a more modern way is:</source>
          <target state="translated">&lt;code&gt;bytes::length()&lt;/code&gt; は、Perlスカラーの&lt;b&gt;バイト長&lt;/b&gt;を知る必要がある場合に明らかに便利です。しかし、より現代的な方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="80f379583e71a36acd14cfcdac38bda86a7df34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes::substr()&lt;/code&gt; does not work as an</source>
          <target state="translated">&lt;code&gt;bytes::substr()&lt;/code&gt; はとして機能しません</target>
        </trans-unit>
        <trans-unit id="e79e566033f6f8c25d3096a1053f32dc8e50d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;bzip2&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 予期します。</target>
        </trans-unit>
        <trans-unit id="d6feed4079636ffa0babf642233a4e45624b7769" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bzip2&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;bzip2&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターが必要です（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0c814516cc2d759e7d3157d53c1fbf37fa67a461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_cc&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_cc&lt;/code&gt; フィールド値</target>
        </trans-unit>
        <trans-unit id="afb399b427b2bc07d4aad0c9ddb246210f218065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_cflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_cflag&lt;/code&gt; フィールド値</target>
        </trans-unit>
        <trans-unit id="695ddbb31e07202aa85c70bfeef73b32b2bcbf33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_iflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_iflag&lt;/code&gt; フィールド値</target>
        </trans-unit>
        <trans-unit id="ad78af9e16e140b0e1106aa00db5da80627d1e33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_lflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_lflag&lt;/code&gt; フィールド値</target>
        </trans-unit>
        <trans-unit id="e7c939558c1553fa1f8bed0d585516c7250dbd25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c_oflag&lt;/code&gt; field values</source>
          <target state="translated">&lt;code&gt;c_oflag&lt;/code&gt; フィールド値</target>
        </trans-unit>
        <trans-unit id="8b53f1266a06652ab4c19a127fb6358e6d1bc2de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can&lt;/code&gt; cannot know whether an object will be able to provide a method through AUTOLOAD (unless the object's class has overridden &lt;code&gt;can&lt;/code&gt; appropriately), so a return value of</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; （オブジェクトのクラスをオーバーライドしていない限り、オブジェクトがAUTOLOADを通してメソッドを提供することができるであろうかどうかを知ることができない &lt;code&gt;can&lt;/code&gt; 、適切に）、これの戻り値</target>
        </trans-unit>
        <trans-unit id="dfd77132ceb27f8ce6ebaf76ddb70f3498008f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can&lt;/code&gt; checks if the object or class has a method called &lt;code&gt;METHOD&lt;/code&gt; . If it does, then it returns a reference to the sub. If it does not, then it returns</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; オブジェクトまたはクラスに &lt;code&gt;METHOD&lt;/code&gt; というメソッドがあるかどうかを確認できます。含まれている場合は、サブルーチンへの参照を返します。そうでない場合は、戻ります</target>
        </trans-unit>
        <trans-unit id="518e9d2b8d4a6dec7e1bf8b236e463e2975de7e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can&lt;/code&gt; checks if the object or class has a method called &lt;code&gt;METHOD&lt;/code&gt;. If it does, then it returns a reference to the sub. If it does not, then it returns</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; オブジェクトまたはクラスに &lt;code&gt;METHOD&lt;/code&gt; というメソッドがあるかどうかを確認できます。含まれている場合は、サブへの参照を返します。そうでない場合は、</target>
        </trans-unit>
        <trans-unit id="4425b178b213ffd266cc097cac94373284912ece" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_load&lt;/code&gt; keeps its results in a cache, so it will not load the same module twice, nor will it attempt to load a module that has already failed to load before. By default, &lt;code&gt;can_load&lt;/code&gt; will check its cache, but you can override that by setting &lt;code&gt;nocache&lt;/code&gt; to true.</source>
          <target state="translated">&lt;code&gt;can_load&lt;/code&gt; は結果をキャッシュに保持するため、同じモジュールを2回ロードしたり、以前にロードに失敗したモジュールをロードしたりすることはありません。デフォルトでは、 &lt;code&gt;can_load&lt;/code&gt; はそのキャッシュをチェックしますが、 &lt;code&gt;nocache&lt;/code&gt; をtrueに設定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="80eef2d6b11e6af56916a4d9fed0cb49b43cc441" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_load&lt;/code&gt; takes the following arguments:</source>
          <target state="translated">&lt;code&gt;can_load&lt;/code&gt; は次の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="8c301228074969b093786c28df06529f261955aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_load&lt;/code&gt; will take a list of modules, optionally with version numbers and determine if it is able to load them. If it can load *ALL* of them, it will. If one or more are unloadable, none will be loaded.</source>
          <target state="translated">&lt;code&gt;can_load&lt;/code&gt; は、オプションでバージョン番号を含むモジュールのリストを取得し、それらをロードできるかどうかを判断します。それらの*すべて*をロードできる場合は、ロードします。1つ以上がアンロードできない場合、何もロードされません。</target>
        </trans-unit>
        <trans-unit id="a478303bf076c83556297908a48dd42d425490d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_run&lt;/code&gt; takes only one argument: the name of a binary you wish to locate. &lt;code&gt;can_run&lt;/code&gt; works much like the unix binary &lt;code&gt;which&lt;/code&gt; or the bash command &lt;code&gt;type&lt;/code&gt; , which scans through your path, looking for the requested binary.</source>
          <target state="translated">&lt;code&gt;can_run&lt;/code&gt; は引数を1つだけ取ります。つまり、検索したいバイナリの名前です。 &lt;code&gt;can_run&lt;/code&gt; は、要求されたバイナリを探してパスをスキャンするunixバイナリ &lt;code&gt;which&lt;/code&gt; またはbashコマンド &lt;code&gt;type&lt;/code&gt; 同様に機能します。</target>
        </trans-unit>
        <trans-unit id="4c713ea52c968b6131449303769d26a672774869" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;can_run&lt;/code&gt; takes only one argument: the name of a binary you wish to locate. &lt;code&gt;can_run&lt;/code&gt; works much like the unix binary &lt;code&gt;which&lt;/code&gt; or the bash command &lt;code&gt;type&lt;/code&gt;, which scans through your path, looking for the requested binary.</source>
          <target state="translated">&lt;code&gt;can_run&lt;/code&gt; は、検索するバイナリの名前という1つの引数のみを取ります。 &lt;code&gt;can_run&lt;/code&gt; は、パスをスキャンして要求されたバイナリを探すunixバイナリ &lt;code&gt;which&lt;/code&gt; またはbashコマンド &lt;code&gt;type&lt;/code&gt; とよく似ています。</target>
        </trans-unit>
        <trans-unit id="ebc99e95e5b60b47d7f6807a79b190e2a3f9be43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change()&lt;/code&gt; handles &lt;code&gt;long_contraction&lt;/code&gt; explicitly only. If &lt;code&gt;long_contraction&lt;/code&gt; is not specified in &lt;code&gt;change()&lt;/code&gt; , even though &lt;code&gt;UCA_Version&lt;/code&gt; is changed, &lt;code&gt;long_contraction&lt;/code&gt; will not be changed.</source>
          <target state="translated">&lt;code&gt;change()&lt;/code&gt; は、 &lt;code&gt;long_contraction&lt;/code&gt; を明示的にのみ処理します。場合 &lt;code&gt;long_contraction&lt;/code&gt; がで指定されていない &lt;code&gt;change()&lt;/code&gt; にもかかわらず、 &lt;code&gt;UCA_Version&lt;/code&gt; が変更され、 &lt;code&gt;long_contraction&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="6b12455f5010981a7caf03ee723a0131c5689a75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change()&lt;/code&gt; handles &lt;code&gt;long_contraction&lt;/code&gt; explicitly only. If &lt;code&gt;long_contraction&lt;/code&gt; is not specified in &lt;code&gt;change()&lt;/code&gt;, even though &lt;code&gt;UCA_Version&lt;/code&gt; is changed, &lt;code&gt;long_contraction&lt;/code&gt; will not be changed.</source>
          <target state="translated">&lt;code&gt;change()&lt;/code&gt; は、 &lt;code&gt;long_contraction&lt;/code&gt; のみを明示的に処理します。場合 &lt;code&gt;long_contraction&lt;/code&gt; がで指定されていない &lt;code&gt;change()&lt;/code&gt; にもかかわらず、 &lt;code&gt;UCA_Version&lt;/code&gt; が変更され、 &lt;code&gt;long_contraction&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="fd64d856a574f3533b0b14b407870b871d3428ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charblocks()&lt;/code&gt; returns a reference to a hash with the known block names as the keys, and the code point ranges (see &lt;a href=&quot;#charblock%28%29&quot;&gt;&quot;charblock()&quot;&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charblocks()&lt;/code&gt; は、既知のブロック名をキーとして、コードポイント範囲（&lt;a href=&quot;#charblock%28%29&quot;&gt;「charblock（）」を&lt;/a&gt;参照）を値として持つハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="f558974fb9e8f6fa2958daad656d8e76c141ee94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charblocks()&lt;/code&gt; returns a reference to a hash with the known block names as the keys, and the code point ranges (see &lt;a href=&quot;#charblock()&quot;&gt;charblock()&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charblocks()&lt;/code&gt; は、既知のブロック名をキーとして、コードポイントの範囲（&lt;a href=&quot;#charblock()&quot;&gt;charblock（）を&lt;/a&gt;参照）を値として持つハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="f837d8bad7cfec5d4bd3123e3e4f4763462fd63b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charnames::string_vianame()&lt;/code&gt; was introduced in v5.14. Prior to that, &lt;code&gt;charnames::vianame()&lt;/code&gt; should work, but only if the argument is of the form &lt;code&gt;&quot;U+...&quot;&lt;/code&gt; . Your best bet there for runtime Unicode by character name is probably:</source>
          <target state="translated">&lt;code&gt;charnames::string_vianame()&lt;/code&gt; はv5.14で導入されました。それ以前は、 &lt;code&gt;charnames::vianame()&lt;/code&gt; は機能するはずですが、引数が &lt;code&gt;&quot;U+...&quot;&lt;/code&gt; の形式である場合に限られます。文字名によるランタイムUnicodeの最善策は、おそらく次のとおりです。</target>
        </trans-unit>
        <trans-unit id="303cbcdfbfc51ae434dd13ddc4e0d249896c36b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charnames::string_vianame()&lt;/code&gt; was introduced in v5.14. Prior to that, &lt;code&gt;charnames::vianame()&lt;/code&gt; should work, but only if the argument is of the form &lt;code&gt;&quot;U+...&quot;&lt;/code&gt;. Your best bet there for runtime Unicode by character name is probably:</source>
          <target state="translated">&lt;code&gt;charnames::string_vianame()&lt;/code&gt; はv5.14で導入されました。それ以前は、 &lt;code&gt;charnames::vianame()&lt;/code&gt; が機能するはずですが、引数が &lt;code&gt;&quot;U+...&quot;&lt;/code&gt; 形式である場合に限ります。文字名によるランタイムUnicodeの最善の策は、おそらく次のとおりです。</target>
        </trans-unit>
        <trans-unit id="367ccda5de213efa8e6de896b82a1a539bd095da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charscripts()&lt;/code&gt; returns a reference to a hash with the known script names as the keys, and the code point ranges (see &lt;a href=&quot;#charscript%28%29&quot;&gt;&quot;charscript()&quot;&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charscripts()&lt;/code&gt; は、既知のスクリプト名をキーとして、コードポイント範囲（&lt;a href=&quot;#charscript%28%29&quot;&gt;「charscript（）」を&lt;/a&gt;参照）を値として持つハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="ead2be91e2308e7b32a2e10b2c8928960675c93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charscripts()&lt;/code&gt; returns a reference to a hash with the known script names as the keys, and the code point ranges (see &lt;a href=&quot;#charscript()&quot;&gt;charscript()&lt;/a&gt;) as the values.</source>
          <target state="translated">&lt;code&gt;charscripts()&lt;/code&gt; は、既知のスクリプト名をキーとして、コードポイントの範囲（&lt;a href=&quot;#charscript()&quot;&gt;charscript（）を&lt;/a&gt;参照）を値として持つハッシュへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="a194b4aab45221d04d6645b5c82186f03345b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;chown&lt;/code&gt;, &lt;code&gt;chroot&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;symlink&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;, &lt;code&gt;utime&lt;/code&gt;, &lt;code&gt;-X&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chmod&lt;/code&gt;, &lt;code&gt;chown&lt;/code&gt;, &lt;code&gt;chroot&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rename&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;symlink&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;, &lt;code&gt;utime&lt;/code&gt;, &lt;code&gt;-X&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf9d4908831f89243a57108c98d8f05e40e1deab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chomp&lt;/code&gt;, &lt;code&gt;chop&lt;/code&gt;, &lt;code&gt;defined&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chdir&lt;/code&gt;, &lt;code&gt;chomp&lt;/code&gt;, &lt;code&gt;chop&lt;/code&gt;, &lt;code&gt;defined&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;eof&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;truncate&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61c2d5d27e775d5bf2acdbed6ec527b752b22f7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check&lt;/code&gt; takes a list of arguments, as follows:</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; は、次のように引数のリストを取ります。</target>
        </trans-unit>
        <trans-unit id="61a6a6f073c5f32501789dfae5a4e3b8efb86cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check&lt;/code&gt; will return when it fails, or a hashref with lowercase keys of parsed arguments when it succeeds.</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; 失敗するとcheckが返され、成功すると解析された引数の小文字のキーを持つハッシュリファレンスが返されます。</target>
        </trans-unit>
        <trans-unit id="7bc394e8518231d46cc35fa58854fec4567f4a31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check_install&lt;/code&gt; allows you to verify if a certain module is installed or not. You may call it with the following arguments:</source>
          <target state="translated">&lt;code&gt;check_install&lt;/code&gt; を使用すると、特定のモジュールがインストールされているかどうかを確認できます。次の引数を指定して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2a75a5bd66390a72de974d7ef911d9b417527a2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chr()&lt;/code&gt; must be given an EBCDIC code number argument to yield a desired character return value on an EBCDIC platform. For example:</source>
          <target state="translated">&lt;code&gt;chr()&lt;/code&gt; EBCDICプラットフォームで目的の文字戻り値を生成するには、chr（）にEBCDICコード番号引数を指定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="10c9412671604351afd83ac42dacea6431fa59b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chr()&lt;/code&gt;, &lt;code&gt;ord()&lt;/code&gt;, &lt;code&gt;substr()&lt;/code&gt;, &lt;code&gt;index()&lt;/code&gt; and &lt;code&gt;rindex()&lt;/code&gt; behave similarly.</source>
          <target state="translated">&lt;code&gt;chr()&lt;/code&gt; 、 &lt;code&gt;ord()&lt;/code&gt; 、 &lt;code&gt;substr()&lt;/code&gt; 、 &lt;code&gt;index()&lt;/code&gt; 、および &lt;code&gt;rindex()&lt;/code&gt; は同様に動作します。</target>
        </trans-unit>
        <trans-unit id="5b6fc696fb8f44c377c8dffe5ed97242d9663724" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ckflags&lt;/code&gt; is a bitset, in which only the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit currently has a defined meaning (for which see above). All other bits should be clear.</source>
          <target state="translated">&lt;code&gt;ckflags&lt;/code&gt; はビット &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; であり、現在CALL_CHECKER_REQUIRE_GVビットのみが定義された意味を持っています（上記を参照）。他のすべてのビットはクリアする必要があります。</target>
        </trans-unit>
        <trans-unit id="40f4747e95e85b4a1c67cb7b51c9949e228f03f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clear&lt;/code&gt; clears the current in-memory archive. This effectively gives you a 'blank' object, ready to be filled again. Note that &lt;code&gt;clear&lt;/code&gt; only has effect on the object, not the underlying tarfile.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; は、現在のメモリ内アーカイブをクリアします。これにより、実質的に「空白の」オブジェクトが得られ、再び塗りつぶす準備ができます。 &lt;code&gt;clear&lt;/code&gt; はオブジェクトにのみ影響し、基礎となるtarfileには影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8b1ff99d5c7ed83e6f2dcc9a357801da554024fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmp&lt;/code&gt; and</source>
          <target state="translated">&lt;code&gt;cmp&lt;/code&gt; および</target>
        </trans-unit>
        <trans-unit id="3dbfc6b5ac858f99cbcc4507d320823e6f6fa5ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cmpthese&lt;/code&gt; can also be passed the data structure that timethese() returns:</source>
          <target state="translated">&lt;code&gt;cmpthese&lt;/code&gt; には、timethese（）が返すデータ構造を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="88b7a2613718eb73647eecdfe075d3be2ed24da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;collect_pod&lt;/code&gt; is a optional boolean argument that determines whether POD data is collected and stored for reference. POD data is not collected by default. POD headings are always collected.</source>
          <target state="translated">&lt;code&gt;collect_pod&lt;/code&gt; は、PODデータを収集して参照用に保存するかどうかを決定する、オプションのブール引数です。デフォルトでは、PODデータは収集されません。PODの見出しは常に収集されます。</target>
        </trans-unit>
        <trans-unit id="cb5332ff0a73638efd42ab63fc32fe9bd7dbabeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;comment&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;comment&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="af6a5aaf7404876ed305ccda400e6d0a215f75ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compactDump&lt;/code&gt;, &lt;code&gt;veryCompact&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;compactDump&lt;/code&gt;, &lt;code&gt;veryCompact&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1da23c990c0b340d65a11e6c4dd9a9fbcf9e8cbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compexcl()&lt;/code&gt; is included for backwards compatibility, but as of Perl 5.12 and more modern Unicode versions, for most purposes it is probably more convenient to use one of the following instead:</source>
          <target state="translated">&lt;code&gt;compexcl()&lt;/code&gt; は下位互換性のために含まれていますが、Perl 5.12以降の最新のUnicodeバージョンでは、ほとんどの場合、代わりに次のいずれかを使用する方が便利です。</target>
        </trans-unit>
        <trans-unit id="86a708da1901bbb301c133e94da37987c89cff89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cond_signal&lt;/code&gt; will normally generate a warning if you attempt to use it on an unlocked variable. On the rare occasions where doing this may be sensible, you can suppress the warning with:</source>
          <target state="translated">&lt;code&gt;cond_signal&lt;/code&gt; ロックされていない変数でcond_signalを使用しようとすると、通常、警告が生成されます。これを行うのが賢明であるまれな状況では、次のようにして警告を抑制できます。</target>
        </trans-unit>
        <trans-unit id="096889c63611c83b225ce2ede691d1f2be6bc5be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cons&lt;/code&gt; - This option is ignored, since the failover mechanism will drop down to the console automatically if all other media fail.</source>
          <target state="translated">&lt;code&gt;cons&lt;/code&gt; -他のすべてのメディアに障害が発生した場合、フェイルオーバーメカニズムが自動的にコンソールにドロップダウンするため、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="ccf34562306a2add3d0f9fffd0dcebc556cdc8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const_attr&lt;/code&gt; - allow the :const attribute on subs</source>
          <target state="translated">&lt;code&gt;const_attr&lt;/code&gt; -潜水艦の：const属性を許可します</target>
        </trans-unit>
        <trans-unit id="0fe8f921f3f9ebaaa79e3f8dc4dbc81789cde77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;content&lt;/code&gt; &amp;mdash; A scalar to include as the body of the request OR a code reference that will be called iteratively to produce the body of the request</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; &amp;mdash;リクエストの本文として含めるスカラーまたはリクエストの本文を生成するために繰り返し呼び出されるコード参照</target>
        </trans-unit>
        <trans-unit id="f7c670ca5f082b8bfcb9d79e037f8aad33c25a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;content&lt;/code&gt; &amp;mdash; The body of the response. If the response does not have any content or if a data callback is provided to consume the response body, this will be the empty string</source>
          <target state="translated">&lt;code&gt;content&lt;/code&gt; &amp;mdash;応答の本文。応答にコンテンツがない場合、または応答本文を使用するためにデータコールバックが提供されている場合、これは空の文字列になります</target>
        </trans-unit>
        <trans-unit id="5293347d474b74e679c0c8d8acc423646a13b60d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; has some mechanisms to protect you if you do cause a context to persist beyond the scope in which it was obtained. In practice you should not rely on these protections, and they are fairly noisy with warnings.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; には、コンテキストが取得されたスコープを超えて永続化する場合に、ユーザーを保護するためのメカニズムがいくつかあります。実際には、これらの保護に頼るべきではなく、警告でかなりうるさいです。</target>
        </trans-unit>
        <trans-unit id="a08e95c0960fcde197f4415ccb8265611c6ebc18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie_jar&lt;/code&gt; &amp;mdash; An instance of &lt;a href=&quot;HTTP::CookieJar&quot;&gt;HTTP::CookieJar&lt;/a&gt; &amp;mdash; or equivalent class that supports the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;cookie_header&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;cookie_jar&lt;/code&gt; -のインスタンス&lt;a href=&quot;HTTP::CookieJar&quot;&gt;HTTP ::をCookieJar&lt;/a&gt; -またはサポート同等クラス &lt;code&gt;add&lt;/code&gt; と &lt;code&gt;cookie_header&lt;/code&gt; 方法を</target>
        </trans-unit>
        <trans-unit id="b45a4c8bee9a24fa02b0048a41bb38158983a350" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak()&lt;/code&gt; only when your module absolutely cannot figure out what to do. (&lt;code&gt;croak()&lt;/code&gt; is a better version of &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; for use within modules, which reports its errors from the perspective of the caller. See &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; for details of &lt;code&gt;croak()&lt;/code&gt; , &lt;code&gt;carp()&lt;/code&gt; and other useful routines.)</source>
          <target state="translated">&lt;code&gt;croak()&lt;/code&gt; は、モジュールが何をすべきかまったく理解できない場合にのみ使用してください。（ &lt;code&gt;croak()&lt;/code&gt; は、モジュール内で使用するための &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; のより優れたバージョンであり、呼び出し側から見たエラーを報告します &lt;code&gt;croak()&lt;/code&gt; 、 &lt;code&gt;carp()&lt;/code&gt; およびその他の便利なルーチンの詳細については、&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="3eff87280ab028320576494ad606b509973528c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak()&lt;/code&gt; only when your module absolutely cannot figure out what to do. (&lt;code&gt;croak()&lt;/code&gt; is a better version of &lt;code&gt;die()&lt;/code&gt; for use within modules, which reports its errors from the perspective of the caller. See &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; for details of &lt;code&gt;croak()&lt;/code&gt;, &lt;code&gt;carp()&lt;/code&gt; and other useful routines.)</source>
          <target state="translated">&lt;code&gt;croak()&lt;/code&gt; モジュールが何をすべきかを完全に理解できない場合にのみcroak（）。（ &lt;code&gt;croak()&lt;/code&gt; は、モジュール内で使用するための &lt;code&gt;die()&lt;/code&gt; のより良いバージョンであり、呼び出し元の観点からエラーを報告します &lt;code&gt;croak()&lt;/code&gt; 、 &lt;code&gt;carp()&lt;/code&gt; 、およびその他の便利なルーチンの詳細については、&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="f6b8a9015ad51073a532bf2517dde18f5bf47fd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak&lt;/code&gt; s on error.</source>
          <target state="translated">&lt;code&gt;croak&lt;/code&gt; エラー時にcroak s。</target>
        </trans-unit>
        <trans-unit id="043b01e1b87e6d38097e84b5fabb99178f74e5c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;croak&lt;/code&gt;s on error.</source>
          <target state="translated">&lt;code&gt;croak&lt;/code&gt; エラー時に鳴きます。</target>
        </trans-unit>
        <trans-unit id="36abc39484041a3f0447981e6bf653e5088681e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cuserid&lt;/code&gt; [POSIX.1-1988]</source>
          <target state="translated">&lt;code&gt;cuserid&lt;/code&gt; [POSIX.1-1988]</target>
        </trans-unit>
        <trans-unit id="3f481b6f09b03efdc76158927658d21de33362c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cygserver&lt;/code&gt; (&lt;code&gt;use IPC::SysV&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;cygserver&lt;/code&gt; (&lt;code&gt;use IPC::SysV&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="d0dde23af6c8093917aed5e9b5c89f44d6c944ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dMY_CXT&lt;/code&gt; may be quite expensive to calculate, and to avoid the overhead of invoking it in each function it is possible to pass the declaration onto other functions using the &lt;code&gt;aMY_CXT&lt;/code&gt; /&lt;code&gt;pMY_CXT&lt;/code&gt; macros, eg</source>
          <target state="translated">&lt;code&gt;dMY_CXT&lt;/code&gt; は計算に非常にコストがかかる可能性があり、各関数でそれを呼び出すオーバーヘッドを回避するために、 &lt;code&gt;aMY_CXT&lt;/code&gt; / &lt;code&gt;pMY_CXT&lt;/code&gt; マクロを使用して他の関数に宣言を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e4a63dc7a30dddaaa715074fdef2d6ceba7f15ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dMY_CXT&lt;/code&gt; may be quite expensive to calculate, and to avoid the overhead of invoking it in each function it is possible to pass the declaration onto other functions using the &lt;code&gt;aMY_CXT&lt;/code&gt;/&lt;code&gt;pMY_CXT&lt;/code&gt; macros, eg</source>
          <target state="translated">&lt;code&gt;dMY_CXT&lt;/code&gt; は計算にかなりの費用がかかる可能性があり、各関数で &lt;code&gt;aMY_CXT&lt;/code&gt; を呼び出すオーバーヘッドを回避するために、aMY_CXT / &lt;code&gt;pMY_CXT&lt;/code&gt; マクロを使用して宣言を他の関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4109496804f1ccff0cccb7a3ca87fce4ed59e63f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dTHR&lt;/code&gt; was introduced in perl 5.005 to support the older thread model. The older thread model now uses the &lt;code&gt;THX&lt;/code&gt; mechanism to pass context pointers around, so &lt;code&gt;dTHR&lt;/code&gt; is not useful any more. Perl 5.6.0 and later still have it for backward source compatibility, but it is defined to be a no-op.</source>
          <target state="translated">&lt;code&gt;dTHR&lt;/code&gt; 古いスレッドモデルをサポートするために、dTHRはperl 5.005で導入されました。古いスレッドモデルは、コンテキストポインターを渡すために &lt;code&gt;THX&lt;/code&gt; メカニズムを使用するようになったため、 &lt;code&gt;dTHR&lt;/code&gt; はもう役に立ちません。Perl 5.6.0以降では、下位ソースとの互換性のためにこれがまだありますが、何もしないように定義されています。</target>
        </trans-unit>
        <trans-unit id="184b83c9bdd4160a6f19f8a87fdd37ff4439be00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data_callback&lt;/code&gt; &amp;mdash; A code reference that will be called for each chunks of the response body received.</source>
          <target state="translated">&lt;code&gt;data_callback&lt;/code&gt; &amp;mdash;受信した応答本文のチャンクごとに呼び出されるコード参照。</target>
        </trans-unit>
        <trans-unit id="29ceaf96a959f0ab255fc37f7042654f8b20ff9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decode&lt;/code&gt; will not be affected in any way.</source>
          <target state="translated">&lt;code&gt;decode&lt;/code&gt; は一切影響を受けません。</target>
        </trans-unit>
        <trans-unit id="ead45fe5123d73507a0666226aa4b62056b56233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; behaves exactly like &lt;code&gt;when(1 == 1)&lt;/code&gt; , which is to say that it always matches.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; は &lt;code&gt;when(1 == 1)&lt;/code&gt; とまったく同じように動作します。つまり、常に一致します。</target>
        </trans-unit>
        <trans-unit id="a06f18d30284f6d44f03247eaa672884455fdd2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; behaves exactly like &lt;code&gt;when(1 == 1)&lt;/code&gt;, which is to say that it always matches.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; は &lt;code&gt;when(1 == 1)&lt;/code&gt; とまったく同じように動作します。つまり、常に一致します。</target>
        </trans-unit>
        <trans-unit id="ad68f7d290433009d56d45688f048a290bc76143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default_headers&lt;/code&gt; &amp;mdash; A hashref of default headers to apply to requests</source>
          <target state="translated">&lt;code&gt;default_headers&lt;/code&gt; &amp;mdash;リクエストに適用するデフォルトヘッダーのハッシュリファレンス</target>
        </trans-unit>
        <trans-unit id="4e4008378ece0030f25890322578641b9c803138" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defer&lt;/code&gt; , &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;discard&lt;/code&gt; , and &lt;code&gt;autodefer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;defer&lt;/code&gt; 、 &lt;code&gt;flush&lt;/code&gt; 、 &lt;code&gt;discard&lt;/code&gt; 、および &lt;code&gt;autodefer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1c2104168e369e8fabf33105315025902f2e03c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;discard&lt;/code&gt;, and &lt;code&gt;autodefer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;defer&lt;/code&gt; 、 &lt;code&gt;flush&lt;/code&gt; 、 &lt;code&gt;discard&lt;/code&gt; 、および &lt;code&gt;autodefer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="84b466c384022ad6a6c0ee4613433ddf76214dd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;deflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 予期します。</target>
        </trans-unit>
        <trans-unit id="ceceb616a766b6f9d05c9cf3776a9455b1010d42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;deflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを必要とします（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1dbe4b40b78522ef59ec6c73489a586461d9b98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;del_count&lt;/code&gt; is the number of nodes to delete. If zero, no nodes are deleted. If -1 or greater than or equal to the number of remaining kids, all remaining kids are deleted.</source>
          <target state="translated">&lt;code&gt;del_count&lt;/code&gt; は、削除するノードの数です。ゼロの場合、ノードは削除されません。-1以上の残りの子の数の場合、残りのすべての子が削除されます。</target>
        </trans-unit>
        <trans-unit id="557a8972e18c8311f342ad928d9daccc79114ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detach()&lt;/code&gt; can also be called as a class method to allow a thread to detach itself:</source>
          <target state="translated">&lt;code&gt;detach()&lt;/code&gt; は、スレッドがそれ自体を切り離すことを可能にするクラスメソッドとして呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="666fcacf663b1020377f259716313e99a0eb4f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detach&lt;/code&gt; tells a thread that it is never going to be joined i.e. that all traces of its existence can be removed once it stops running. Errors in detached threads will not be visible anywhere - if you want to catch them, you should use $SIG{__DIE__} or something like that.</source>
          <target state="translated">&lt;code&gt;detach&lt;/code&gt; は、スレッドが参加しないことをスレッドに通知します。つまり、実行が停止すると、スレッドの存在のすべてのトレースを削除できます。切り離されたスレッドのエラーはどこにも表示されません-それらをキャッチしたい場合は、$ SIG {__ DIE__}またはそのようなものを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed21b3a7df5531dd2a26c649db73afbe33d707ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detail()&lt;/code&gt; is an alias to the &lt;code&gt;details&lt;/code&gt; facet field for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;detail()&lt;/code&gt; は、下位互換性のための &lt;code&gt;details&lt;/code&gt; ファセットフィールドのエイリアスです。</target>
        </trans-unit>
        <trans-unit id="63c706946d64e27cf97e29790209d2503e94a440" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;die&lt;/code&gt; will force the native VMS exit status to be an SS$_ABORT code if neither of the $! or $? status values are ones that would cause the native status to be interpreted as being what VMS classifies as SEVERE_ERROR severity for DCL error handling.</source>
          <target state="translated">&lt;code&gt;die&lt;/code&gt; $！のどちらでもない場合、dieはネイティブVMSの終了ステータスをSS $ _ABORTコードに強制します。または$？ステータス値は、ネイティブステータスがDCLエラー処理のSEVERE_ERROR重大度としてVMSが分類するものとして解釈される原因となる値です。</target>
        </trans-unit>
        <trans-unit id="661b85004cec88114e1166343b36ceb5260be457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do './stat.pl'&lt;/code&gt; is largely like</source>
          <target state="translated">&lt;code&gt;do './stat.pl'&lt;/code&gt; はおおむね</target>
        </trans-unit>
        <trans-unit id="28deeed6e04a81a7b1b3d5f9280331de50a5fa35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;do BLOCK&lt;/code&gt; 行う</target>
        </trans-unit>
        <trans-unit id="d15b8c42099321a9dbc082b929829cf8884cb2c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;done_testing()&lt;/code&gt; is, in effect, used when you'd want to use &lt;code&gt;no_plan&lt;/code&gt; , but safer. You'd use it like so:</source>
          <target state="translated">&lt;code&gt;done_testing()&lt;/code&gt; は、実際には、 &lt;code&gt;no_plan&lt;/code&gt; を使用したい場合に使用されますが、より安全です。次のように使用します。</target>
        </trans-unit>
        <trans-unit id="93aecb7cbc419e0b6c443a22d048d6c94926bc80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;done_testing()&lt;/code&gt; is, in effect, used when you'd want to use &lt;code&gt;no_plan&lt;/code&gt;, but safer. You'd use it like so:</source>
          <target state="translated">&lt;code&gt;done_testing()&lt;/code&gt; は、事実上、 &lt;code&gt;no_plan&lt;/code&gt; を使用したい場合に使用されますが、より安全です。あなたはそれを次のように使うでしょう：</target>
        </trans-unit>
        <trans-unit id="96ac2e7a1323e3e95635e4b26ab827cf6f59afef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dprofpp&lt;/code&gt; will produce some quite detailed reporting on the activity of the &lt;code&gt;wordmatch&lt;/code&gt; program. The wallclock, user and system, times are at the top of the analysis, and after this are the main columns defining which define the report. Check the &lt;code&gt;dprofpp&lt;/code&gt; docs for details of the many options it supports.</source>
          <target state="translated">&lt;code&gt;dprofpp&lt;/code&gt; は、 &lt;code&gt;wordmatch&lt;/code&gt; プログラムのアクティビティに関するかなり詳細なレポートを作成します。壁時計、ユーザー、システムの時間は分析の一番上にあり、その後はレポートを定義する主要な列を定義します。サポートされている多くのオプションの詳細については、 &lt;code&gt;dprofpp&lt;/code&gt; のドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="698546fdd428508dc98fcd9f8400a97d365533e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encode_language_tag&lt;/code&gt; returns undef if given anything other than a formally valid language tag.</source>
          <target state="translated">&lt;code&gt;encode_language_tag&lt;/code&gt; は、正式に有効な言語タグ以外のものが指定された場合、undefを返します。</target>
        </trans-unit>
        <trans-unit id="4644e1dff58efff563e5617be7b3a2a308bb228b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encoding&lt;/code&gt; is assumed to be an &lt;code&gt;Encode&lt;/code&gt; object, on entry the PV of &lt;code&gt;sv&lt;/code&gt; is assumed to be octets in that encoding, and &lt;code&gt;sv&lt;/code&gt; will be converted into Unicode (and UTF-8).</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; は &lt;code&gt;Encode&lt;/code&gt; オブジェクトであると見なされ、エントリ時に &lt;code&gt;sv&lt;/code&gt; のPVはそのエンコーディングのオクテットであると見 &lt;code&gt;sv&lt;/code&gt; 、svはUnicode（およびUTF-8）に変換されます。</target>
        </trans-unit>
        <trans-unit id="1e8d497bcf36f684076d940db11c02fdb241dc56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encoding&lt;/code&gt; is assumed to be an &lt;code&gt;Encode&lt;/code&gt; object, the PV of &lt;code&gt;ssv&lt;/code&gt; is assumed to be octets in that encoding and decoding the input starts from the position which &lt;code&gt;(PV + *offset)&lt;/code&gt; pointed to. &lt;code&gt;dsv&lt;/code&gt; will be concatenated with the decoded UTF-8 string from &lt;code&gt;ssv&lt;/code&gt;. Decoding will terminate when the string &lt;code&gt;tstr&lt;/code&gt; appears in decoding output or the input ends on the PV of &lt;code&gt;ssv&lt;/code&gt;. The value which &lt;code&gt;offset&lt;/code&gt; points will be modified to the last input position on &lt;code&gt;ssv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; は &lt;code&gt;Encode&lt;/code&gt; オブジェクトであると想定され、 &lt;code&gt;ssv&lt;/code&gt; のPVはオクテットであると想定され、入力のエンコーディングとデコーディングは &lt;code&gt;(PV + *offset)&lt;/code&gt; 指している位置から始まります。 &lt;code&gt;dsv&lt;/code&gt; は、 &lt;code&gt;ssv&lt;/code&gt; からデコードされたUTF-8文字列と連結されます。文字列 &lt;code&gt;tstr&lt;/code&gt; がデコード出力に現れるか、入力が &lt;code&gt;ssv&lt;/code&gt; のPVで終了すると、デコードは終了します。 &lt;code&gt;offset&lt;/code&gt; ポイントが &lt;code&gt;ssv&lt;/code&gt; の最後の入力位置に変更される値。</target>
        </trans-unit>
        <trans-unit id="51fbe3f0825cfe73fe04528e4db975b00a52f6e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt; are scoping ops, and their job is to perform any housekeeping every time you enter and leave a block: lexical variables are tidied up, unreferenced variables are destroyed, and so on. Every program will have those first three lines: &lt;code&gt;leave&lt;/code&gt; is a list, and its children are all the statements in the block. Statements are delimited by &lt;code&gt;nextstate&lt;/code&gt; , so a block is a collection of &lt;code&gt;nextstate&lt;/code&gt; ops, with the ops to be performed for each statement being the children of &lt;code&gt;nextstate&lt;/code&gt; . &lt;code&gt;enter&lt;/code&gt; is a single op which functions as a marker.</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; と &lt;code&gt;leave&lt;/code&gt; はスコープopsであり、ブロックの開始と終了のたびにハウスキーピングを実行するのが仕事です。字句変数は整理され、参照されていない変数は破棄されます。すべてのプログラムには、最初の3行があります &lt;code&gt;leave&lt;/code&gt; はリストで、その子はすべてブロック内のステートメントです。ステートメントは &lt;code&gt;nextstate&lt;/code&gt; で区切られているため、ブロックは &lt;code&gt;nextstate&lt;/code&gt; opsのコレクションであり、各ステートメントに対して実行されるopsは &lt;code&gt;nextstate&lt;/code&gt; の子です。 &lt;code&gt;enter&lt;/code&gt; は、マーカーとして機能する単一のopです。</target>
        </trans-unit>
        <trans-unit id="e62a268f7e0b4e07691bd53126566c52f96fd283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt; are scoping ops, and their job is to perform any housekeeping every time you enter and leave a block: lexical variables are tidied up, unreferenced variables are destroyed, and so on. Every program will have those first three lines: &lt;code&gt;leave&lt;/code&gt; is a list, and its children are all the statements in the block. Statements are delimited by &lt;code&gt;nextstate&lt;/code&gt;, so a block is a collection of &lt;code&gt;nextstate&lt;/code&gt; ops, with the ops to be performed for each statement being the children of &lt;code&gt;nextstate&lt;/code&gt;. &lt;code&gt;enter&lt;/code&gt; is a single op which functions as a marker.</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; と &lt;code&gt;leave&lt;/code&gt; はスコープ操作であり、ブロックに出入りするたびにハウスキーピングを実行することが彼らの仕事です。字句変数が整理され、参照されていない変数が破棄されます。すべてのプログラムには、最初の3行があります &lt;code&gt;leave&lt;/code&gt; はリストであり、その子はブロック内のすべてのステートメントです。ステートメントは &lt;code&gt;nextstate&lt;/code&gt; で区切られているため、ブロックは &lt;code&gt;nextstate&lt;/code&gt; opsのコレクションであり、各ステートメントに対して実行されるopsは &lt;code&gt;nextstate&lt;/code&gt; の子です。 &lt;code&gt;enter&lt;/code&gt; は、マーカーとして機能する単一の操作です。</target>
        </trans-unit>
        <trans-unit id="648391c4210cab349da16e1ff376040829af58eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt; specifies a set of environment variables that will be used by this Perl interpreter. If non-null, it must point to a null-terminated array of environment strings. If null, the Perl interpreter will use the environment supplied by the &lt;code&gt;environ&lt;/code&gt; global variable.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; は、このPerlインタープリターによって使用される環境変数のセットを指定します。null以外の場合は、nullで終了する環境文字列の配列を指している必要があります。nullの場合、Perlインタープリターは &lt;code&gt;environ&lt;/code&gt; グローバル変数によって提供される環境を使用します。</target>
        </trans-unit>
        <trans-unit id="66996551ac21df55b2bc452ee7dc1f32731364d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;equal&lt;/code&gt; tests whether two thread objects represent the same thread and returns true if they do.</source>
          <target state="translated">&lt;code&gt;equal&lt;/code&gt; は、2つのスレッドオブジェクトが同じスレッドを表すかどうかをテストし、表す場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="e24b23b819e56dad7d90e5a9ceb7af6412558ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval BLOCK&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;eval BLOCK&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="1e984f3706aa5038760690eeba859e2db477c4f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; in all its forms is used to execute a little Perl program, trapping any errors encountered so they don't crash the calling program.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; すべての形式のevalは、小さなPerlプログラムを実行するために使用され、発生したエラーをトラップして、呼び出し元のプログラムをクラッシュさせないようにします。</target>
        </trans-unit>
        <trans-unit id="1dadf8642958e7d1245426d45e425e26d43b8550" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt;ed strings (when accessible) are considered to be filenames: &lt;code&gt;f (eval 7)&lt;/code&gt; and &lt;code&gt;f eval 7\b&lt;/code&gt; access the body of the 7th &lt;code&gt;eval&lt;/code&gt;ed string (in the order of execution). The bodies of the currently executed &lt;code&gt;eval&lt;/code&gt; and of &lt;code&gt;eval&lt;/code&gt;ed strings that define subroutines are saved and thus accessible.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 文字列（アクセス可能な場合）はファイル名と見なされます &lt;code&gt;f (eval 7)&lt;/code&gt; および &lt;code&gt;f eval 7\b&lt;/code&gt; は、7番目の &lt;code&gt;eval&lt;/code&gt; れた文字列の本体に（実行順に）アクセスします。現在実行の体 &lt;code&gt;eval&lt;/code&gt; との &lt;code&gt;eval&lt;/code&gt; のサブルーチンを定義編文字列が保存されるので、アクセス可能です。</target>
        </trans-unit>
        <trans-unit id="0256dbe29caeaa86a1eb795ffc2729a2a5b7219f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt;ed strings are compiled in the package in which the eval() was compiled. (Assignments to &lt;code&gt;$SIG{}&lt;/code&gt;, however, assume the signal handler specified is in the &lt;code&gt;main&lt;/code&gt; package. Qualify the signal handler name if you wish to have a signal handler in a package.) For an example, examine</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; された文字列は、eval（）がコンパイルされたパッケージにコンパイルされます。（ただし、 &lt;code&gt;$SIG{}&lt;/code&gt; への割り当ては、指定されたシグナルハンドラーが &lt;code&gt;main&lt;/code&gt; パッケージにあることを前提としています。パッケージにシグナルハンドラーを含める場合は、シグナルハンドラー名を修飾します。）例として、</target>
        </trans-unit>
        <trans-unit id="e4d705110bcea9e4e4300cef1535c4cf468db00f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval_pv&lt;/code&gt; is used to compile the anonymous subroutine, which will be the return value as well (read more about &lt;code&gt;eval_pv&lt;/code&gt; in &lt;a href=&quot;perlapi#eval_pv&quot;&gt;&quot;eval_pv&quot; in perlapi&lt;/a&gt;). Once this code reference is in hand, it can be mixed in with all the previous examples we've shown.</source>
          <target state="translated">&lt;code&gt;eval_pv&lt;/code&gt; は、匿名サブルーチンをコンパイルするために使用されます。これは、戻り値にもなります（&lt;a href=&quot;perlapi#eval_pv&quot;&gt;perlapiの「eval_pv」でeval_pvの&lt;/a&gt;詳細を &lt;code&gt;eval_pv&lt;/code&gt; してください）。このコードリファレンスが手元にあると、これまでに示したすべての例と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="dce2d19eb1b9a11a41c8b0d6eda83832900f64ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval_pv&lt;/code&gt; is used to compile the anonymous subroutine, which will be the return value as well (read more about &lt;code&gt;eval_pv&lt;/code&gt; in &lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pv in perlapi&lt;/a&gt;). Once this code reference is in hand, it can be mixed in with all the previous examples we've shown.</source>
          <target state="translated">&lt;code&gt;eval_pv&lt;/code&gt; は匿名のサブルーチンをコンパイルするために使用されます。これは戻り値にもなります（&lt;a href=&quot;perlapi#eval_pv&quot;&gt;perlapiのeval_pvのeval_pvの&lt;/a&gt;詳細を &lt;code&gt;eval_pv&lt;/code&gt; してください）。このコード参照を取得したら、これまでに示したすべての例と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="c51683fd64ab48d3812924b1c50b14489246e459" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;evalbytes&lt;/code&gt; is like string &lt;code&gt;eval&lt;/code&gt;, but operating on a byte stream that is not UTF-8 encoded. Details are at &lt;a href=&quot;perlfunc#evalbytes-EXPR&quot;&gt;&quot;evalbytes EXPR&quot; in perlfunc&lt;/a&gt;. Without a &lt;code&gt;use feature 'evalbytes'&lt;/code&gt; nor a &lt;code&gt;use v5.16&lt;/code&gt; (or higher) declaration in the current scope, you can still access it by instead writing &lt;code&gt;CORE::evalbytes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;evalbytes&lt;/code&gt; は文字列 &lt;code&gt;eval&lt;/code&gt; に似ていますが、UTF-8でエンコードされていないバイトストリームで動作します。詳細は&lt;a href=&quot;perlfunc#evalbytes-EXPR&quot;&gt;、perlfuncの「evalbytesEXPR」にあり&lt;/a&gt;ます。なしで &lt;code&gt;use feature 'evalbytes'&lt;/code&gt; も &lt;code&gt;use v5.16&lt;/code&gt; （またはそれ以上）現在のスコープで宣言、あなたはまだ代わりに書き込むことによってアクセスすることができ &lt;code&gt;CORE::evalbytes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="179018de7994d8b6f7b55507310a9615bad0e417" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expect: &amp;lt;array&amp;gt;&lt;/code&gt; is a short notation for this &lt;code&gt;eexpect&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;expect: &amp;lt;array&amp;gt;&lt;/code&gt; は、この &lt;code&gt;eexpect&lt;/code&gt; の短い表記です：</target>
        </trans-unit>
        <trans-unit id="74b965e6bf6e28d59b48d2bde20f57fce49e6c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extensions&lt;/code&gt; (optional)</source>
          <target state="translated">&lt;code&gt;extensions&lt;/code&gt; （オプション）</target>
        </trans-unit>
        <trans-unit id="deecc348c11dde7ab1e03c51382e2279d9a03d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extproc&lt;/code&gt; on the first line</source>
          <target state="translated">&lt;code&gt;extproc&lt;/code&gt; 1行目のextproc</target>
        </trans-unit>
        <trans-unit id="19dbee10355caceed0f77948f5b13c6093e8c93f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_archive&lt;/code&gt; will return a list of files it extracted. If the archive extraction fails for any reason, &lt;code&gt;extract_archive&lt;/code&gt; will return false. Please use the &lt;code&gt;error&lt;/code&gt; method to find the cause of the failure.</source>
          <target state="translated">&lt;code&gt;extract_archive&lt;/code&gt; は、抽出したファイルのリストを返します。何らかの理由でアーカイブの抽出が失敗した場合、 &lt;code&gt;extract_archive&lt;/code&gt; はfalseを返します。 &lt;code&gt;error&lt;/code&gt; メソッドを使用して、失敗の原因を見つけてください。</target>
        </trans-unit>
        <trans-unit id="ca87326018240d68425ad1527419ad3fb2334b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; encountered a closing bracket where none was expected.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 、 &lt;code&gt;extract_quotelike&lt;/code&gt; 、または &lt;code&gt;extract_codeblock&lt;/code&gt; が、予期されていない閉じブラケットを検出しました。</target>
        </trans-unit>
        <trans-unit id="72a77e28ef0d2e144274c8fbd24790f3d60b8b70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found a valid bracket delimiter, but it was the wrong species. This usually indicates a nesting error, but may indicate incorrect quoting or escaping.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 、 &lt;code&gt;extract_quotelike&lt;/code&gt; 、または &lt;code&gt;extract_codeblock&lt;/code&gt; が有効なブラケット区切り文字を見つけましたが、それは間違った種でした。これは通常、ネストエラーを示しますが、誤った引用またはエスケープを示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="f1c61a56ae758be3198ca7d3e691e7f13c95604c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; , &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; ran out of characters in the text before closing one or more levels of nested brackets.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; ネストされたブラケットの1つ以上のレベルを閉じる前に、extract_bracketed、 &lt;code&gt;extract_quotelike&lt;/code&gt; 、または &lt;code&gt;extract_codeblock&lt;/code&gt; がテキストの文字を使い果たしました。</target>
        </trans-unit>
        <trans-unit id="bfcf9f5f74cb5d8d60170baf76820bbca368d16b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; attempted to match an embedded quoted substring, but failed to find a closing quote to match it.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; は、埋め込まれた引用部分文字列を照合しようとしましたが、それに一致する終了引用符を見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="bfae41ac82a57d25a5fa6795b1393b8584c13411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; extracts a balanced-bracket-delimited substring (using any one (or more) of the user-specified delimiter brackets: '(..)', '{..}', '[..]', or '&amp;lt;..&amp;gt;'). Optionally it will also respect quoted unbalanced brackets (see below).</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; は、バランスブラケットで区切られた部分文字列を抽出します（ユーザー指定の区切りブラケットの1つ（または複数）を使用します： '（..）'、 '{..}'、 '[..]'、または '&amp;lt;。 。&amp;gt; '）。必要に応じて、引用符で囲まれた大括弧も尊重します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="833ede635970a6e5a4797a94bd40b236c96804f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; was expecting a particular kind of bracket at the start of the text, and didn't find it.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; または &lt;code&gt;extract_codeblock&lt;/code&gt; は、テキストの先頭に特定の種類のブラケットが必要でしたが、見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="4a45731bb5aa248616cdb9fafdf56e8d940bf269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt;, &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; encountered a closing bracket where none was expected.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 、 &lt;code&gt;extract_quotelike&lt;/code&gt; 、またはextract_codeblockで、予期されていなかった閉じ括弧が &lt;code&gt;extract_codeblock&lt;/code&gt; ました。</target>
        </trans-unit>
        <trans-unit id="74d590e5fca928736e4fae37f9e6f0f84bdee1c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt;, &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found a valid bracket delimiter, but it was the wrong species. This usually indicates a nesting error, but may indicate incorrect quoting or escaping.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 、 &lt;code&gt;extract_quotelike&lt;/code&gt; 、または &lt;code&gt;extract_codeblock&lt;/code&gt; が有効なブラケット区切り文字を検出しましたが、それは間違った種でした。これは通常、ネストエラーを示しますが、誤った引用またはエスケープを示している場合があります。</target>
        </trans-unit>
        <trans-unit id="ddee3801248709ac16da6636768868acf2620266" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_bracketed&lt;/code&gt;, &lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; ran out of characters in the text before closing one or more levels of nested brackets.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 、 &lt;code&gt;extract_quotelike&lt;/code&gt; 、または &lt;code&gt;extract_codeblock&lt;/code&gt; は、ネストされたブラケットの1つ以上のレベルを閉じる前に、テキスト内の文字を使い果たしました。</target>
        </trans-unit>
        <trans-unit id="36f0769606e5c4df36d78fd7ab228e7c6b52a6d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; attempts to recognize and extract a balanced bracket delimited substring that may contain unbalanced brackets inside Perl quotes or quotelike operations. That is, &lt;code&gt;extract_codeblock&lt;/code&gt; is like a combination of &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; and &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; は、Perl引用符またはquotelike操作内に不平衡括弧が含まれている可能性がある、平衡括弧で区切られた部分文字列を認識して抽出しようとします。つまり、 &lt;code&gt;extract_codeblock&lt;/code&gt; は &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; と &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; の組み合わせに似ています。</target>
        </trans-unit>
        <trans-unit id="4da43577dc402673868ed17831e422f8eccde828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; attempts to recognize and extract a balanced bracket delimited substring that may contain unbalanced brackets inside Perl quotes or quotelike operations. That is, &lt;code&gt;extract_codeblock&lt;/code&gt; is like a combination of &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; and &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; は、Perlの引用符または引用符のような操作内に不均衡な角かっこが含まれている可能性のある、バランスの取れた角かっこで区切られた部分文字列を認識して抽出しようとします。つまり、 &lt;code&gt;extract_codeblock&lt;/code&gt; は、 &lt;code&gt;&quot;extract_bracketed&quot;&lt;/code&gt; と &lt;code&gt;&quot;extract_quotelike&quot;&lt;/code&gt; 組み合わせのようなものです。</target>
        </trans-unit>
        <trans-unit id="694f659fbf30e806d0fa08eafebb27223e5e1129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; failed to find a closing bracket to match the outermost opening bracket.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; は、最も外側の開始ブラケットと一致する終了ブラケットを見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="2f9d1a3929e3f32a4e394299c676fec1e2f105c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; failed to find any of the outermost opening brackets that were specified.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; は、指定された最も外側の開き角括弧を見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="8bdacc14c0fedd54fcae38c1a59283dd12b5836e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; or &lt;code&gt;extract_quotelike&lt;/code&gt; found one of the quotelike operators &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; followed by only one block.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; または &lt;code&gt;extract_quotelike&lt;/code&gt; は、quotelike演算子 &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; のいずれかと、それに続く1つのブロックのみを検出しました。</target>
        </trans-unit>
        <trans-unit id="f6a92eacd39bc7f787944a3b9917dfa9f9b5ec41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; or &lt;code&gt;extract_quotelike&lt;/code&gt; found one of the quotelike operators &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; followed by only one block.</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; または &lt;code&gt;extract_quotelike&lt;/code&gt; は、quotelike演算子 &lt;code&gt;s&lt;/code&gt; 、 &lt;code&gt;tr&lt;/code&gt; 、または &lt;code&gt;y&lt;/code&gt; のいずれかが見つかり、その後に1つのブロックのみが続きます。</target>
        </trans-unit>
        <trans-unit id="2826adf3635e5637db1b98091d6fce40bd4513f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; takes the same initial three parameters as &lt;code&gt;extract_bracketed&lt;/code&gt; : a text to process, a set of delimiter brackets to look for, and a prefix to match first. It also takes an optional fourth parameter, which allows the outermost delimiter brackets to be specified separately (see below).</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; は同じ初期の三つのパラメータ取り &lt;code&gt;extract_bracketed&lt;/code&gt; を探すために、プロセスにテキスト、区切り文字のブラケットのセットを、そしてプレフィックスが最初に一致します：。また、オプションの4番目のパラメーターを使用します。これにより、最も外側の区切りブラケットを個別に指定できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="f5cda6d68a0151b9aacc663e55ec28d4b940acf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_codeblock&lt;/code&gt; takes the same initial three parameters as &lt;code&gt;extract_bracketed&lt;/code&gt;: a text to process, a set of delimiter brackets to look for, and a prefix to match first. It also takes an optional fourth parameter, which allows the outermost delimiter brackets to be specified separately (see below).</source>
          <target state="translated">&lt;code&gt;extract_codeblock&lt;/code&gt; は同じ初期の三つのパラメータ取り &lt;code&gt;extract_bracketed&lt;/code&gt; を探すために、プロセスにテキスト、区切り文字のブラケットのセットを、そしてプレフィックスが最初に一致します：。また、オプションの4番目のパラメーターを取ります。これにより、最も外側の区切り文字ブラケットを個別に指定できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="da20ba6f0882f09698a1ff177d4124f0036f0383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_delimited&lt;/code&gt; takes up to four scalars (the input text, the delimiters, a prefix pattern to be skipped, and any escape characters) and extracts the initial substring of the text that is appropriately delimited. If the delimiter string has multiple characters, the first one encountered in the text is taken to delimit the substring. The third argument specifies a prefix pattern that is to be skipped (but must be present!) before the substring is extracted. The final argument specifies the escape character to be used for each delimiter.</source>
          <target state="translated">&lt;code&gt;extract_delimited&lt;/code&gt; は最大4つのスカラー（入力テキスト、区切り文字、スキップされるプレフィックスパターン、およびエスケープ文字）を取り、適切に区切られたテキストの最初の部分文字列を抽出します。区切り文字列に複数の文字が含まれている場合、テキスト内で最初に見つかった文字が、部分文字列を区切るために使用されます。3番目の引数は、部分文字列が抽出される前にスキップされる（ただし、存在する必要があります！）プレフィックスパターンを指定します。最後の引数は、各区切り文字に使用されるエスケープ文字を指定します。</target>
        </trans-unit>
        <trans-unit id="9a4b075e70a63982d5b04d16716a200671436a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; and &quot;here documents&quot;</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; および &quot;hereドキュメント&quot;</target>
        </trans-unit>
        <trans-unit id="5c7ff486ca0937ffab3f029877d80d0f77ca3ff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; attempts to recognize, extract, and segment any one of the various Perl quotes and quotelike operators (see</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は、さまざまなPerl引用符およびquotelike演算子のいずれかを認識、抽出、およびセグメント化しようとします（参照</target>
        </trans-unit>
        <trans-unit id="e49376bba1a57bb121a86f40bd906f99d7e393b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; attempts to recognize, extract, and segment any one of the various Perl quotes and quotelike operators (see &lt;a href=&quot;http://man.he.net/man3/perlop&quot;&gt;perlop(3)&lt;/a&gt;) Nested backslashed delimiters, embedded balanced bracket delimiters (for the quotelike operators), and trailing modifiers are all caught. For example, in:</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は、さまざまなPerlの引用符と引用符のような演算子のいずれかを認識、抽出、およびセグメント化しようとします（&lt;a href=&quot;http://man.he.net/man3/perlop&quot;&gt;perlop（3）を&lt;/a&gt;参照）。例：</target>
        </trans-unit>
        <trans-unit id="c59ff49a4b5f6ba09b71fdea263cb8784806bf34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; can successfully extract &quot;here documents&quot; from an input string, but with an important caveat in list contexts.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は、入力文字列から「ヒアドキュメント」を正常に抽出できますが、リストコンテキストには重要な警告があります。</target>
        </trans-unit>
        <trans-unit id="eb113a6f5a0b8ca2853b562185e3dd6bf68a942d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; didn't find one of the quotelike operators &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; at the start of the substring it was extracting.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は、それが抽出していた部分文字列の先頭にquotelike演算子 &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; の 1つを見つけませんでした。</target>
        </trans-unit>
        <trans-unit id="3a30762562d768e35f6aede04f00e83c3be02aab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; didn't find one of the quotelike operators &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; at the start of the substring it was extracting.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は、抽出した部分文字列の先頭で、quotelike演算子 &lt;code&gt;q&lt;/code&gt; 、 &lt;code&gt;qq&lt;/code&gt; 、 &lt;code&gt;qw&lt;/code&gt; 、 &lt;code&gt;qx&lt;/code&gt; 、 &lt;code&gt;s&lt;/code&gt; 、 &lt;code&gt;tr&lt;/code&gt; 、または &lt;code&gt;y&lt;/code&gt; のいずれかを検出しませんでした。</target>
        </trans-unit>
        <trans-unit id="639f29c8f92e2cdfb541e8edc25037e7eac4fd9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found one of the quotelike operators &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; without a suitable block after it.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; または &lt;code&gt;extract_codeblock&lt;/code&gt; は、適切なブロックなしで、引用のような演算子 &lt;code&gt;&lt;a href=&quot;../functions/q&quot;&gt;q&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/qw&quot;&gt;qw&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/qx&quot;&gt;qx&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; のいずれかを検出しました。</target>
        </trans-unit>
        <trans-unit id="d7b0db775ac5b5ea6f3ac5b6f63eeb7043731821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; or &lt;code&gt;extract_codeblock&lt;/code&gt; found one of the quotelike operators &lt;code&gt;q&lt;/code&gt;, &lt;code&gt;qq&lt;/code&gt;, &lt;code&gt;qw&lt;/code&gt;, &lt;code&gt;qx&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;tr&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; without a suitable block after it.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; または &lt;code&gt;extract_codeblock&lt;/code&gt; は、引用符のような演算子 &lt;code&gt;q&lt;/code&gt; 、 &lt;code&gt;qq&lt;/code&gt; 、 &lt;code&gt;qw&lt;/code&gt; 、 &lt;code&gt;qx&lt;/code&gt; 、 &lt;code&gt;s&lt;/code&gt; 、 &lt;code&gt;tr&lt;/code&gt; 、または &lt;code&gt;y&lt;/code&gt; のいずれかが見つかり、その後に適切なブロックがありません。</target>
        </trans-unit>
        <trans-unit id="39ce38c6b480941e81870d18e2d86b4e985230f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; takes two arguments: the text to be processed and a prefix to be matched at the very beginning of the text. If no prefix is specified, optional whitespace is the default. If no text is given, &lt;code&gt;$_&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は2つの引数を取ります。処理されるテキストと、テキストの最初に一致するプレフィックスです。プレフィックスが指定されていない場合、オプションの空白がデフォルトです。テキストが指定されていない場合、 &lt;code&gt;$_&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="5cd291985f40d2410dcdccea5aef6741ed9a4c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_quotelike&lt;/code&gt; was unable to find a closing delimiter to match the one that opened the quote-like operation.</source>
          <target state="translated">&lt;code&gt;extract_quotelike&lt;/code&gt; は、引用のような操作を開いた区切り文字と一致する終了区切り文字を見つけることができませんでした。</target>
        </trans-unit>
        <trans-unit id="ab932311516affb26a779abd90bbf158ec7ed4da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; did not find a suitable opening tag (after any specified prefix was removed).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; が適切な開始タグを見つけられませんでした（指定された接頭辞が削除された後）。</target>
        </trans-unit>
        <trans-unit id="d49b4a8e3f85ed5cd73910afb7ee2c747a5c1b85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; extracts and segments text between (balanced) specified tags.</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; は、（バランスのとれた）指定されたタグ間でテキストを抽出およびセグメント化します。</target>
        </trans-unit>
        <trans-unit id="637bdb2768eba3ece0f28cf5c91285d816ae9df3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; found a nested opening tag that was not matched by a corresponding nested closing tag (and the failure mode was not &quot;MAX&quot; or &quot;PARA&quot;).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; は、対応するネストされた終了タグと一致しないネストされた開始タグを見つけました（そして、失敗モードは「MAX」でも「PARA」でもありませんでした）。</target>
        </trans-unit>
        <trans-unit id="907d9c187b04ce8805d54962d6f295d6dafa82c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; found a nested tag that appeared in the &quot;reject&quot; list (and the failure mode was not &quot;MAX&quot; or &quot;PARA&quot;).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; は、「reject」リストに表示されているネストされたタグを検出しました（障害モードは「MAX」または「PARA」ではありませんでした）。</target>
        </trans-unit>
        <trans-unit id="2c6e6b22bc490e070f19db3dd2c598898377ca76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; matched the specified opening tag and tried to modify the matched text to produce a matching closing tag (because none was specified). It failed to generate the closing tag, almost certainly because the opening tag did not start with a bracket of some kind.</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; は指定された開始タグと一致し、一致するテキストを変更して一致する終了タグを作成しようとしました（何も指定されていなかったため）。ほぼ間違いなく、開始タグが何らかのブラケットで始まっていなかったため、終了タグを生成できませんでした。</target>
        </trans-unit>
        <trans-unit id="618b7e2d79570afb079bf76fc8475883cfbcb511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_tagged&lt;/code&gt; reached the end of the text without finding a closing tag to match the original opening tag (and the failure mode was not &quot;MAX&quot; or &quot;PARA&quot;).</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; は、元の開始タグと一致する終了タグを見つけることなくテキストの終わりに達しました（そして、失敗モードは「MAX」でも「PARA」でもありませんでした）。</target>
        </trans-unit>
        <trans-unit id="dc8016033fd7e7766b06e4030e83ba977c1f1697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_variable&lt;/code&gt; extracts any valid Perl variable or variable-involved expression, including scalars, arrays, hashes, array accesses, hash look-ups, method calls through objects, subroutine calls through subroutine references, etc.</source>
          <target state="translated">&lt;code&gt;extract_variable&lt;/code&gt; は、スカラー、配列、ハッシュ、配列アクセス、ハッシュルックアップ、オブジェクトによるメソッド呼び出し、サブルーチン参照によるサブルーチン呼び出しなど、有効なPerl変数または変数に関係する式を抽出します。</target>
        </trans-unit>
        <trans-unit id="9b44e96da00224d0d2ec78bc381db1051d7b97be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_variable&lt;/code&gt; found a '$', '@', or '%' indicating a variable, but that character was not followed by a legal Perl identifier.</source>
          <target state="translated">&lt;code&gt;extract_variable&lt;/code&gt; は、変数を示す「$」、「@」、または「％」を検出しましたが、その文字の後には正当なPerl識別子が続きませんでした。</target>
        </trans-unit>
        <trans-unit id="73dce7208a693c0dcdcc44097a9a03bc9f5f50c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract_variable&lt;/code&gt; was expecting one of '$', '@', or '%' at the start of a variable, but didn't find any of them.</source>
          <target state="translated">&lt;code&gt;extract_variable&lt;/code&gt; は、変数の先頭に「$」、「@」、または「％」のいずれかを予期していましたが、それらのいずれも見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="20f94a649b0ac6110d4b4e974451200d805dd893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facet_data()&lt;/code&gt;&lt;b&gt;MUST NOT&lt;/b&gt; bless the data it returns, the main hashref, and nested facet hashrefs &lt;b&gt;MUST&lt;/b&gt; be bare, though items contained within each facet may be blessed. The data returned by this method &lt;b&gt;should&lt;/b&gt; also be copies of the internal data in order to prevent accidental state modification.</source>
          <target state="translated">&lt;code&gt;facet_data()&lt;/code&gt; &lt;b&gt;してはいけません&lt;/b&gt;が返すデータ、主ハッシュリファレンス、およびネストされたファセットハッシュリファレンスを祝福&lt;b&gt;しなければならない&lt;/b&gt;各ファセット内に含まれるアイテムを祝福することができるものの、裸です。このメソッドによって返されるデータも、偶発的な状態変更を防ぐために、内部データのコピーである&lt;b&gt;必要が&lt;/b&gt;あります。</target>
        </trans-unit>
        <trans-unit id="2c207b36e130877d93d86cdcf28960f660fef059" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;facets()&lt;/code&gt; takes the data from &lt;code&gt;facet_data()&lt;/code&gt; and blesses it into the &lt;code&gt;Test2::EventFacet::*&lt;/code&gt; packages. This is rarely used however, the EventFacet packages are primarily for convenience and documentation. The EventFacet classes are not used at all internally, instead the raw data is used.</source>
          <target state="translated">&lt;code&gt;facets()&lt;/code&gt; からデータを受け取り &lt;code&gt;facet_data()&lt;/code&gt; にそれをして祝福 &lt;code&gt;Test2::EventFacet::*&lt;/code&gt; パッケージ。これはめったに使用されませんが、EventFacetパッケージは主に利便性とドキュメント化のためのものです。EventFacetクラスは内部ではまったく使用されず、代わりに生データが使用されます。</target>
        </trans-unit>
        <trans-unit id="f7183702bf36011a80e32e87169e8ae3121aaff7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fdopen&lt;/code&gt; is like an ordinary &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; except that its first parameter is not a filename but rather a file handle name, an IO::Handle object, or a file descriptor number. (For the documentation of the &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; method, see &lt;a href=&quot;file&quot;&gt;IO::File&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;fdopen&lt;/code&gt; は、最初のパラメーターがファイル名ではなく、ファイルハンドル名、IO :: Handleオブジェクト、またはファイル記述子番号であることを除いて、通常の &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 似ています。（ &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; メソッドのドキュメントについては、&lt;a href=&quot;file&quot;&gt;IO :: Fileを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="ba238f8e74bf4f53dc4869a9be342bb73099fd15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fdopen&lt;/code&gt; is like an ordinary &lt;code&gt;open&lt;/code&gt; except that its first parameter is not a filename but rather a file handle name, an IO::Handle object, or a file descriptor number. (For the documentation of the &lt;code&gt;open&lt;/code&gt; method, see &lt;a href=&quot;IO::File&quot;&gt;IO::File&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;fdopen&lt;/code&gt; は、最初のパラメーターがファイル名ではなく、ファイルハンドル名、IO :: Handleオブジェクト、またはファイル記述子番号であることを除いて、通常の &lt;code&gt;open&lt;/code&gt; 似ています。（ &lt;code&gt;open&lt;/code&gt; メソッドのドキュメントについては、&lt;a href=&quot;IO::File&quot;&gt;IO :: Fileを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="d03fc961bee53ba972305eb9fb700a55c4e14e62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fill_mstats($buf)&lt;/code&gt; is a much cheaper call (both speedwise and memory-wise) which collects the statistic into $buf in machine-readable form. At a later moment you may need to call &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; to use this information to fill %hash.</source>
          <target state="translated">&lt;code&gt;fill_mstats($buf)&lt;/code&gt; は、統計情報を機械可読形式で$ bufに収集する（速度的にもメモリ的にも）はるかに安価な呼び出しです。後で &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; この情報を使用して％hashを埋めるためにmstats2hash（$ buf、％hash）を呼び出す必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="a7e5d4f5538cc74799b8419786d322d044582dea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find()&lt;/code&gt; does a depth-first search over the given &lt;code&gt;@directories&lt;/code&gt; in the order they are given. For each file or directory found, it calls the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; subroutine. (See below for details on how to use the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function). Additionally, for each directory found, it will &lt;code&gt;&lt;a href=&quot;../functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; into that directory and continue the search, invoking the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function on each file or subdirectory in the directory.</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; は、指定された &lt;code&gt;@directories&lt;/code&gt; を指定された順序で縦型検索します。見つかったファイルまたはディレクトリごとに、 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; サブルーチンを呼び出します。（ &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数の使用方法の詳細については、以下を参照してください）。さらに、見つかったディレクトリごとに、そのディレクトリに &lt;code&gt;&lt;a href=&quot;../functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; して検索を続行し、ディレクトリ内の各ファイルまたはサブディレクトリで &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ecdfb26abf3b15965a5901fd7cf35ec4653a258c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find()&lt;/code&gt; does a depth-first search over the given &lt;code&gt;@directories&lt;/code&gt; in the order they are given. For each file or directory found, it calls the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; subroutine. (See below for details on how to use the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function). Additionally, for each directory found, it will &lt;code&gt;chdir()&lt;/code&gt; into that directory and continue the search, invoking the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function on each file or subdirectory in the directory.</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; は、指定された &lt;code&gt;@directories&lt;/code&gt; を指定された順序で深さ優先探索を実行します。見つかったファイルまたはディレクトリごとに、 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; サブルーチンを呼び出します。（ &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数の使用方法の詳細については、以下を参照してください）。さらに、見つかったディレクトリごとに、そのディレクトリに &lt;code&gt;chdir()&lt;/code&gt; して検索を続行し、ディレクトリ内の各ファイルまたはサブディレクトリで &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e26ed17cfa2816485cbc28d5fbb0568e82932f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finddepth()&lt;/code&gt; works just like &lt;code&gt;find()&lt;/code&gt; except that it invokes the &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function for a directory</source>
          <target state="translated">&lt;code&gt;finddepth()&lt;/code&gt; は、ディレクトリの &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数を呼び出すことを除いて、 &lt;code&gt;find()&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="29620a24a0df648a414eb9cf851d4bf4806d6e4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; allows only &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt; , which allows for trailing non-numeric text on an otherwise successful</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt; のみを許可します。これにより、それ以外の場合は成功した非数値テキストを追跡できます</target>
        </trans-unit>
        <trans-unit id="7171c0330153fbec23956fd5954483c8d49fec81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; allows only &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt;, which allows for trailing non-numeric text on an otherwise successful</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は &lt;code&gt;PERL_SCAN_TRAILING&lt;/code&gt; のみを許可します。これにより、他の方法で成功した場合に数値以外のテキストを追跡できます。</target>
        </trans-unit>
        <trans-unit id="614a8eed1e0bbdcf6096b1e5784e3dc7f58643a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; can be set to &lt;code&gt;SVf_UTF8&lt;/code&gt; if &lt;code&gt;name&lt;/code&gt; is a UTF-8 string, or the return value of SvUTF8(sv). It can also take the &lt;code&gt;GV_ADDMULTI&lt;/code&gt; flag, which means to pretend that the GV has been seen before (i.e., suppress &quot;Used once&quot; warnings).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; がUTF-8文字列の場合、フラグは &lt;code&gt;SVf_UTF8&lt;/code&gt; に設定できます。または、SvUTF8（sv）の戻り値に設定できます。また、 &lt;code&gt;GV_ADDMULTI&lt;/code&gt; フラグを受け取ることもできます。これは、GVが以前に見られたふりをすることを意味します（つまり、「一度使用した」警告を抑制します）。</target>
        </trans-unit>
        <trans-unit id="aaeb70073109db72816d4b058f24b70066251071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; can be set to SVf_UTF8 if &lt;code&gt;name&lt;/code&gt; is a UTF8 string, or the return value of SvUTF8(sv). It can also take the GV_ADDMULTI flag, which means to pretend that the GV has been seen before (i.e., suppress &quot;Used once&quot; warnings).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;name&lt;/code&gt; がUTF8文字列の場合はSVf_UTF8に設定でき、SvUTF8（sv）の戻り値は設定できます。また、GV_ADDMULTIフラグを取得することもできます。これは、GVが以前に見られたように見せかけることを意味します（つまり、「一度だけ使用」の警告を抑制します）。</target>
        </trans-unit>
        <trans-unit id="af26d30e7c49fe5fc911e7d99c64282995d4a35f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; gives the eight bits of &lt;code&gt;op_flags&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op and, shifted up eight bits, the eight bits of &lt;code&gt;op_private&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op, except that (in both cases) some bits will be set automatically.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;leaveloop&lt;/code&gt; opの8ビットの &lt;code&gt;op_flags&lt;/code&gt; を提供し、8ビット上にシフトすると、leaveloop opの8ビットの &lt;code&gt;op_private&lt;/code&gt; を提供し &lt;code&gt;leaveloop&lt;/code&gt; 。ただし、（どちらの場合も）一部のビットは自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="6d63eaae2e4ad0abf234a638df832de5d65b2c05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; gives the eight bits of &lt;code&gt;op_flags&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op and, shifted up eight bits, the eight bits of &lt;code&gt;op_private&lt;/code&gt; for the &lt;code&gt;leaveloop&lt;/code&gt; op, except that (in both cases) some bits will be set automatically. &lt;code&gt;debuggable&lt;/code&gt; is currently unused and should always be 1. &lt;code&gt;has_my&lt;/code&gt; can be supplied as true to force the loop body to be enclosed in its own scope.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;leaveloop&lt;/code&gt; opの8ビットの &lt;code&gt;op_flags&lt;/code&gt; を提供し、8ビット上にシフトすると、leaveloop opの8ビットの &lt;code&gt;op_private&lt;/code&gt; を提供し &lt;code&gt;leaveloop&lt;/code&gt; 。ただし、（どちらの場合も）一部のビットは自動的に設定されます。 &lt;code&gt;debuggable&lt;/code&gt; は現在使用されて &lt;code&gt;has_my&lt;/code&gt; ず、常に1である必要があります。has_myをtrueとして指定すると、ループ本体を強制的に独自のスコープで囲むことができます。</target>
        </trans-unit>
        <trans-unit id="c2b88293d06ab0496f44e00df866b365eed7013a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; should not have bits set other than &lt;code&gt;SVf_UTF8&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;SVf_UTF8&lt;/code&gt; 以外のビットを設定しないでください。</target>
        </trans-unit>
        <trans-unit id="65e3f0cb7744b6ea7a16d5b8162ae81c50f936d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush&lt;/code&gt; causes perl to flush any buffered data at the perlio api level. Any unread data in the buffer will be discarded, and any unwritten data will be written to the underlying file descriptor. Returns &quot;0 but true&quot; on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; により、perlはバッファリングされたデータをperlio apiレベルでフラッシュします。バッファー内の未読データはすべて破棄され、未書き込みデータは基礎となるファイル記述子に書き込まれます。成功した場合は「0 but true」を返し、エラーの場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="91e1b1bbf7facbe29fb8a23eea44f2865198a992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush&lt;/code&gt; causes perl to flush any buffered data at the perlio api level. Any unread data in the buffer will be discarded, and any unwritten data will be written to the underlying file descriptor. Returns &quot;0 but true&quot; on success, &lt;code&gt;undef&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; を使用すると、perlはバッファリングされたデータをperlioapiレベルでフラッシュします。バッファ内の未読データはすべて破棄され、未書き込みデータは基になるファイル記述子に書き込まれます。成功した場合は「 &lt;code&gt;undef&lt;/code&gt; 」を返し、エラーの場合はundefを返します。</target>
        </trans-unit>
        <trans-unit id="8e9905682a79a998de7ff1e83caeeafa645f241b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flush_cache(function)&lt;/code&gt; will flush out the caches, discarding</source>
          <target state="translated">&lt;code&gt;flush_cache(function)&lt;/code&gt; はキャッシュをフラッシュして破棄します</target>
        </trans-unit>
        <trans-unit id="3b5d6c6cb2f1fedfbb1c398cf830e60872b2d25d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==0&lt;/code&gt; causes File::Find to die if any file is about to be processed a second time.</source>
          <target state="translated">&lt;code&gt;follow_skip==0&lt;/code&gt; を指定すると、ファイルが2回目に処理されるときにFile :: Findが停止します。</target>
        </trans-unit>
        <trans-unit id="245a14cc849e45d0f21aa3c6a45e6687f9b1b64a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==1&lt;/code&gt; , which is the default, causes all files which are neither directories nor symbolic links to be ignored if they are about to be processed a second time. If a directory or a symbolic link are about to be processed a second time, File::Find dies.</source>
          <target state="translated">&lt;code&gt;follow_skip==1&lt;/code&gt; はデフォルトであり、ディレクトリまたはシンボリックリンクではないすべてのファイルが、2回目に処理されるときに無視されます。ディレクトリまたはシンボリックリンクが2回目に処理されようとしている場合、File :: Findは終了します。</target>
        </trans-unit>
        <trans-unit id="026104b97f9533b4576c52cb6c4fc5b33b90adb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==1&lt;/code&gt;, which is the default, causes all files which are neither directories nor symbolic links to be ignored if they are about to be processed a second time. If a directory or a symbolic link are about to be processed a second time, File::Find dies.</source>
          <target state="translated">&lt;code&gt;follow_skip==1&lt;/code&gt; デフォルトであるfollow_skip == 1を使用すると、ディレクトリでもシンボリックリンクでもないすべてのファイルが、2回目に処理される場合に無視されます。ディレクトリまたはシンボリックリンクが2回処理されようとしている場合、File :: Findは停止します。</target>
        </trans-unit>
        <trans-unit id="08a84133d805b081624353f19b1e15e4f4f2316a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;follow_skip==2&lt;/code&gt; causes File::Find to ignore any duplicate files and directories but to proceed normally otherwise.</source>
          <target state="translated">&lt;code&gt;follow_skip==2&lt;/code&gt; と、File :: Findは重複するファイルとディレクトリを無視しますが、それ以外の場合は通常どおり続行します。</target>
        </trans-unit>
        <trans-unit id="b488c92ca6be1e23d4299b935b09ca768ca7bd88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="af037f92dbe22f9677ccba3af252180c69239c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; probably won't do what you expect if VAR is a tied or other special variable. Don't do that either.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; は、VARが結合変数またはその他の特別な変数である場合、おそらく期待どおりに動作しません。それもしないでください。</target>
        </trans-unit>
        <trans-unit id="c77ca2a6b9d0be9c729a47c07b760579edd1d389" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fork()&lt;/code&gt; failures in io_* tests</source>
          <target state="translated">&lt;code&gt;fork()&lt;/code&gt; io_ *テストでのfork（）の失敗</target>
        </trans-unit>
        <trans-unit id="3a4a74a3423620b717e8515966c608ea94d077f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_to()&lt;/code&gt; returns the length of the converted string in octets on success, and &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;from_to()&lt;/code&gt; は、成功すると変換文字列の長さをオクテットで返し、エラーの場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="672d95b5197c0899f13971854b9235675a12d726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_to()&lt;/code&gt; returns the length of the converted string in octets on success, and &lt;code&gt;undef&lt;/code&gt; on error.</source>
          <target state="translated">&lt;code&gt;from_to()&lt;/code&gt; は、成功した場合は変換された文字列の長さをオクテットで返し、エラーの場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ee56073a87e8cb2ec407581f4115873a117f0638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_delimited_pat&lt;/code&gt; may also be called with an optional second argument, which specifies the &quot;escape&quot; character(s) to be used for each delimiter. For example to match a Pascal-style string (where ' is the delimiter and '' is a literal ' within the string):</source>
          <target state="translated">&lt;code&gt;gen_delimited_pat&lt;/code&gt; は、オプションの2番目の引数を指定して呼び出すこともできます。これは、各区切り文字に使用される「エスケープ」文字を指定します。たとえば、Pascalスタイルの文字列（ 'は区切り文字、' 'は文字列内のリテラル'です）に一致させるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6a3889013df238b89a769a62665a92aecb6580a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_extract_tagged&lt;/code&gt; generates a new anonymous subroutine which extracts text between (balanced) specified tags. In other words, it generates a function identical in function to &lt;code&gt;extract_tagged&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gen_extract_tagged&lt;/code&gt; は、指定された（バランスのとれた）タグの間のテキストを抽出する新しい無名サブルーチンを生成します。つまり、 &lt;code&gt;extract_tagged&lt;/code&gt; と同じ関数を生成します。</target>
        </trans-unit>
        <trans-unit id="9bbf5657fac9df51b50196a5452cc515e378127f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_extract_tagged&lt;/code&gt; generates a new anonymous subroutine which extracts text between (balanced) specified tags. In other words, it generates a function identical in function to &lt;code&gt;extract_tagged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_extract_tagged&lt;/code&gt; は、（バランスのとれた）指定されたタグ間のテキストを抽出する新しい匿名サブルーチンを生成します。つまり、 &lt;code&gt;extract_tagged&lt;/code&gt; と機能が同じ関数を生成します。</target>
        </trans-unit>
        <trans-unit id="94fc46087afc34909f3ff50b3a35f51dd87159b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; downloads a distribution file and untars or unzips it, &lt;code&gt;make&lt;/code&gt; builds it, &lt;code&gt;test&lt;/code&gt; runs the test suite, and &lt;code&gt;install&lt;/code&gt; installs it.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; ダウンロードに配布ファイルとuntarsするか、それを解凍、 &lt;code&gt;make&lt;/code&gt; がそれを構築し、 &lt;code&gt;test&lt;/code&gt; テストスイートを実行し、 &lt;code&gt;install&lt;/code&gt; てインストールします。</target>
        </trans-unit>
        <trans-unit id="d351e786b644f3f2b7497656e40ab3f1597c2ae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_boolean_values&lt;/code&gt; will return both &lt;code&gt;$false&lt;/code&gt; and &lt;code&gt;$true&lt;/code&gt; values, or the empty list when they are set to the default.</source>
          <target state="translated">&lt;code&gt;get_boolean_values&lt;/code&gt; は、 &lt;code&gt;$false&lt;/code&gt; と &lt;code&gt;$true&lt;/code&gt; 両方の値を返すか、デフォルトに設定されている場合は空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="597f829bafddc48835ebea8c700b577d34cea8b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of the list of classes it will try using. Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_language_classes&lt;/code&gt; , which currently returns an empty list, &lt;code&gt;()&lt;/code&gt; . By setting this to some value (namely, the name of a loadable language class), you can be sure that &lt;code&gt;get_handle&lt;/code&gt; will always manage to construct a language handle.</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; は、これの戻り値を、使用しようとするクラスのリストの最後に追加します。このメソッドをオーバーライドしない限り、プロジェクトクラスはLocale :: Maketextの &lt;code&gt;fallback_language_classes&lt;/code&gt; を継承します。これは現在空のリスト &lt;code&gt;()&lt;/code&gt; を返します。これをある値（つまり、ロード可能な言語クラスの名前）に設定することで、 &lt;code&gt;get_handle&lt;/code&gt; が常に言語ハンドルを構築できるようになります。</target>
        </trans-unit>
        <trans-unit id="22ee173dd1f9b2a3f3bb6edc486372896578d7ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of the list of classes it will try using. Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_language_classes&lt;/code&gt;, which currently returns an empty list, &lt;code&gt;()&lt;/code&gt;. By setting this to some value (namely, the name of a loadable language class), you can be sure that &lt;code&gt;get_handle&lt;/code&gt; will always manage to construct a language handle.</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; は、これの戻り値を、使用しようとするクラスのリストの最後に追加します。このメソッドをオーバーライドしない限り、プロジェクトクラスはLocale :: Maketextの &lt;code&gt;fallback_language_classes&lt;/code&gt; を継承します。これは、現在空のリスト &lt;code&gt;()&lt;/code&gt; を返します。これをある値（つまり、ロード可能な言語クラスの名前）に設定することにより、 &lt;code&gt;get_handle&lt;/code&gt; が常に言語ハンドルを構築できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="07d51dfcba73441795cbac2c1e95e837ccfcfefe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of whatever list of languages you pass &lt;code&gt;get_handle&lt;/code&gt; . Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_languages&lt;/code&gt; , which currently returns &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt; . (&quot;i-default&quot; is defined in RFC 2277).</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; は、この戻り値を、 &lt;code&gt;get_handle&lt;/code&gt; を渡した言語のリストの最後に追加します。このメソッドをオーバーライドしない限り、プロジェクトクラスはLocale :: Maketextの &lt;code&gt;fallback_languages&lt;/code&gt; を継承します。これは現在 &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt; 返します。（「i-default」はRFC 2277で定義されています）。</target>
        </trans-unit>
        <trans-unit id="d8695d8032fc674b78a2595bf473473eea2d50cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_handle&lt;/code&gt; appends the return value of this to the end of whatever list of languages you pass &lt;code&gt;get_handle&lt;/code&gt;. Unless you override this method, your project class will inherit Locale::Maketext's &lt;code&gt;fallback_languages&lt;/code&gt;, which currently returns &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt;. (&quot;i-default&quot; is defined in RFC 2277).</source>
          <target state="translated">&lt;code&gt;get_handle&lt;/code&gt; はあなたが合格言語のどんなリストの最後に、このの戻り値を追加し &lt;code&gt;get_handle&lt;/code&gt; 。このメソッドをオーバーライドしない限り、プロジェクトクラスはLocale :: Maketextの &lt;code&gt;fallback_languages&lt;/code&gt; を継承します。これは、現在 &lt;code&gt;('i-default', 'en', 'en-US')&lt;/code&gt; 返します。（「i-default」はRFC 2277で定義されています）。</target>
        </trans-unit>
        <trans-unit id="d5a63aa356061956451266a1a4014ccae3657913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gflags&lt;/code&gt; is a bitset passed into &lt;code&gt;cv_get_call_checker_flags&lt;/code&gt;, in which only the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit currently has a defined meaning (for which see above). All other bits should be clear.</source>
          <target state="translated">&lt;code&gt;gflags&lt;/code&gt; は、 &lt;code&gt;cv_get_call_checker_flags&lt;/code&gt; に渡されるビット &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; であり、現在、CALL_CHECKER_REQUIRE_GVビットのみが定義された意味を持っています（上記を参照）。他のすべてのビットはクリアする必要があります。</target>
        </trans-unit>
        <trans-unit id="e3b6200f87d8690cdac1f4cd712e3e4cb1d3352b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git help bisect&lt;/code&gt; has much more information on how you can tweak your binary searches.</source>
          <target state="translated">&lt;code&gt;git help bisect&lt;/code&gt; には、バイナリ検索を微調整する方法に関する詳細情報があります。</target>
        </trans-unit>
        <trans-unit id="cf569ccd5c0de9aae2bc67f8d6ef04eaf70c3485" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; only supports &lt;code&gt;git://&lt;/code&gt; style urls.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; は &lt;code&gt;git://&lt;/code&gt; スタイルのURL のみをサポートします。</target>
        </trans-unit>
        <trans-unit id="d8268d82cd8cca36bfee8e5f93d5ca671bace665" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;git&lt;/code&gt; provides a built-in way to determine which commit should be blamed for introducing a given bug. &lt;code&gt;git bisect&lt;/code&gt; performs a binary search of history to locate the first failing commit. It is fast, powerful and flexible, but requires some setup and to automate the process an auxiliary shell script is needed.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; は、特定のバグを導入したことでどのコミットを非難すべきかを判断するための組み込みの方法を提供します。 &lt;code&gt;git bisect&lt;/code&gt; は、履歴のバイナリ検索を実行して、最初に失敗したコミットを見つけます。これは高速で強力かつ柔軟ですが、いくつかのセットアップが必要であり、プロセスを自動化するには補助シェルスクリプトが必要です。</target>
        </trans-unit>
        <trans-unit id="3fc088f44c39e54fa76b55bd407e420ecf8e1449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;glob&lt;/code&gt; (aka the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;glob&lt;/code&gt; （別名 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f85aa8588ef6572feba5f3f7196b55f9be2ff8a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gnu_compat&lt;/code&gt; controls whether &lt;code&gt;--opt=&lt;/code&gt; is allowed, and what it should do. Without &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; gives an error. With &lt;code&gt;gnu_compat&lt;/code&gt; , &lt;code&gt;--opt=&lt;/code&gt; will give option &lt;code&gt;opt&lt;/code&gt; and empty value. This is the way GNU getopt_long() does it.</source>
          <target state="translated">&lt;code&gt;gnu_compat&lt;/code&gt; は、 &lt;code&gt;--opt=&lt;/code&gt; が許可されるかどうか、およびそれが何をすべきかを制御します。 &lt;code&gt;gnu_compat&lt;/code&gt; がない場合、-- &lt;code&gt;--opt=&lt;/code&gt; はエラーを出します。 &lt;code&gt;gnu_compat&lt;/code&gt; 、 &lt;code&gt;--opt=&lt;/code&gt; オプション与える &lt;code&gt;opt&lt;/code&gt; と空の値を。これは、GNU getopt_long（）が行う方法です。</target>
        </trans-unit>
        <trans-unit id="1fb0e41171264b2fcf37c5326ff38ff8093328b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gnu_compat&lt;/code&gt; controls whether &lt;code&gt;--opt=&lt;/code&gt; is allowed, and what it should do. Without &lt;code&gt;gnu_compat&lt;/code&gt;, &lt;code&gt;--opt=&lt;/code&gt; gives an error. With &lt;code&gt;gnu_compat&lt;/code&gt;, &lt;code&gt;--opt=&lt;/code&gt; will give option &lt;code&gt;opt&lt;/code&gt; and empty value. This is the way GNU getopt_long() does it.</source>
          <target state="translated">&lt;code&gt;gnu_compat&lt;/code&gt; は、 &lt;code&gt;--opt=&lt;/code&gt; を許可するかどうかとその処理を制御します。 &lt;code&gt;gnu_compat&lt;/code&gt; がないと、 &lt;code&gt;--opt=&lt;/code&gt; はエラーになります。 &lt;code&gt;gnu_compat&lt;/code&gt; 、 &lt;code&gt;--opt=&lt;/code&gt; オプション与える &lt;code&gt;opt&lt;/code&gt; と空の値を。これは、GNU getopt_long（）が行う方法です。</target>
        </trans-unit>
        <trans-unit id="da23eeb6ab9c230c23432ea70d9c9e7b965fbe5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gunzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gunzip&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 想定しています。</target>
        </trans-unit>
        <trans-unit id="2c9ace767cb2b2374e63f5abf0af97e52a9d9d8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gunzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;gunzip&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを想定しています（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="19b8e8c4b2f2968447ed1a4e47f9c92d6075290d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gv&lt;/code&gt; is the scalar to be converted.</source>
          <target state="translated">&lt;code&gt;gv&lt;/code&gt; は変換されるスカラーです。</target>
        </trans-unit>
        <trans-unit id="29db96deb265ac3c7d7d0953f53bc03ef4c2f394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gzip&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5da4c82cd1e22cff5477e13c973e757d29f5ee30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;gzip&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターが必要です（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e485962ec7928cc06b861622e567d3b05cbb64fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt; &amp;mdash; A hashref containing headers to include with the request. If the value for a header is an array reference, the header will be output multiple times with each value in the array. These headers over-write any default headers.</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt; &amp;mdash;リクエストに含めるヘッダーを含むhashref。ヘッダーの値が配列参照の場合、ヘッダーは配列内の各値とともに複数回出力されます。これらのヘッダーは、デフォルトのヘッダーを上書きします。</target>
        </trans-unit>
        <trans-unit id="fc1d4418109cbb26543d41a26530b027814f6656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt; &amp;mdash; A hashref of header fields. All header field names will be normalized to be lower case. If a header is repeated, the value will be an arrayref; it will otherwise be a scalar string containing the value</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt; &amp;mdash;ヘッダーフィールドのハッシュ参照。すべてのヘッダーフィールド名は、小文字になるように正規化されます。ヘッダーが繰り返される場合、値はarrayrefになります。それ以外の場合は、値を含むスカラー文字列になります</target>
        </trans-unit>
        <trans-unit id="40e77ef19371ab42dd3ee159db29ed1de58b556a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; will get you into the documentation, but here are the most useful commands:</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; ドキュメントにアクセスできますが、最も役立つコマンドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f33ba501199bdab9a127e2b1f7b1b40f51678514" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; - sets the hostname to send the messages to. Defaults to the local host.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; -にメッセージを送信するためにホスト名を設定します。デフォルトはローカルホストです。</target>
        </trans-unit>
        <trans-unit id="4e594d75a523d0b29a6964865cae46c3baf58a2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_proxy&lt;/code&gt; &amp;mdash; URL of a proxy server to use for HTTP connections (default is &lt;code&gt;$ENV{http_proxy}&lt;/code&gt; &amp;mdash; if set)</source>
          <target state="translated">&lt;code&gt;http_proxy&lt;/code&gt; &amp;mdash; HTTP接続に使用するプロキシサーバーのURL（デフォルトは &lt;code&gt;$ENV{http_proxy}&lt;/code&gt; &amp;mdash;設定されている場合）</target>
        </trans-unit>
        <trans-unit id="e5895745da68f010ab6aec5d542142c34e2b7b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;https_proxy&lt;/code&gt; &amp;mdash; URL of a proxy server to use for HTTPS connections (default is &lt;code&gt;$ENV{https_proxy}&lt;/code&gt; &amp;mdash; if set)</source>
          <target state="translated">&lt;code&gt;https_proxy&lt;/code&gt; &amp;mdash; HTTPS接続に使用するプロキシサーバーのURL（デフォルトは &lt;code&gt;$ENV{https_proxy}&lt;/code&gt; &amp;mdash;設定されている場合）</target>
        </trans-unit>
        <trans-unit id="49c02ec2bc6d085cd003b0ab590c3cedf46f1d70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i!&lt;/code&gt; and &lt;code&gt;I!&lt;/code&gt; are also allowed, but only for completeness' sake: they are identical to &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;i!&lt;/code&gt; そして &lt;code&gt;I!&lt;/code&gt; も許可されていますが、これは完全を期すためです。これらは &lt;code&gt;i&lt;/code&gt; および &lt;code&gt;I&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6dde773a6381ea57f8b793ad51ce4b833a11dc40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i!&lt;/code&gt; and &lt;code&gt;I!&lt;/code&gt; are also allowed, but only for completeness' sake: they are identical to &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;i!&lt;/code&gt; そして &lt;code&gt;I!&lt;/code&gt; 許可されていますが、完全を期すためだけです。これらは &lt;code&gt;i&lt;/code&gt; および &lt;code&gt;I&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="38745558cff56e73757d72d93d0e833b8ab829ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id()&lt;/code&gt; also uses a caching technique that makes it faster when the id of an object is requested often, but slower if it is needed only once or twice.</source>
          <target state="translated">&lt;code&gt;id()&lt;/code&gt; は、オブジェクトのIDが頻繁に要求される場合は速くなるキャッシング手法も使用しますが、1回または2回のみ必要な場合は遅くなります。</target>
        </trans-unit>
        <trans-unit id="1014df6f9393ccdb9b982a8f0cdabec78db82f15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; executes the statement once</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ステートメントを1回実行する場合</target>
        </trans-unit>
        <trans-unit id="eb7b50383640c576cc08e55940c0c7707ec58e55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import()&lt;/code&gt; also sets the &lt;code&gt;exported_to()&lt;/code&gt; attribute of your builder to be the caller of the &lt;code&gt;import()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;import()&lt;/code&gt; も設定します &lt;code&gt;exported_to()&lt;/code&gt; の呼び出し元であるためにあなたのビルダーの属性を &lt;code&gt;import()&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="b896458be3e65959268ad7eb2dbf0a7972aba118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import_extra()&lt;/code&gt; is called by &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt;. It provides an opportunity for you to add behaviors to your module based on its import list.</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; によって呼び出されます。インポートリストに基づいてモジュールに動作を追加する機会を提供します。</target>
        </trans-unit>
        <trans-unit id="f483cc5110be6dfd3ea84e7481c93d23c9b2cfbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import_extra()&lt;/code&gt; is called by &lt;code&gt;import()&lt;/code&gt;. It provides an opportunity for you to add behaviors to your module based on its import list.</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; は &lt;code&gt;import()&lt;/code&gt; によって呼び出されます。インポートリストに基づいてモジュールに動作を追加する機会を提供します。</target>
        </trans-unit>
        <trans-unit id="bf041671b0859bae0d069d4abdaaec3333d3078b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;inflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 想定しています。</target>
        </trans-unit>
        <trans-unit id="e0f527451c4c09e71909bf3e5ee9143eaa7dc55c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;inflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを必要とします（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3558f4a652411d66d86103524bc11a04a66d749f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert&lt;/code&gt; is the first of a chain of nodes to be inserted in place of the nodes. If &lt;code&gt;NULL&lt;/code&gt;, no nodes are inserted.</source>
          <target state="translated">&lt;code&gt;insert&lt;/code&gt; は、ノードの代わりに挿入されるノードのチェーンの最初のものです。 &lt;code&gt;NULL&lt;/code&gt; の場合、ノードは挿入されません。</target>
        </trans-unit>
        <trans-unit id="dd51f04bea97ece8157da9d1a364211a462e769c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int()&lt;/code&gt; returns (at least for Perl v5.7.1 and up) another Math::BigInt, not a Perl scalar:</source>
          <target state="translated">&lt;code&gt;int()&lt;/code&gt; は（少なくともPerl v5.7.1以降では）Perlスカラーではなく別のMath :: BigIntを返します。</target>
        </trans-unit>
        <trans-unit id="71a7ef622103e498c3f87e97051142dd1bd19ab4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intsize&lt;/code&gt;, &lt;code&gt;longsize&lt;/code&gt;, &lt;code&gt;ptrsize&lt;/code&gt;, &lt;code&gt;nvsize&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;intsize&lt;/code&gt;, &lt;code&gt;longsize&lt;/code&gt;, &lt;code&gt;ptrsize&lt;/code&gt;, &lt;code&gt;nvsize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a48e2284b44cc7c2c571d6415bc1d2a1c3a3bad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iosock&lt;/code&gt; is a very limited &lt;a href=&quot;../io/socket/inet&quot;&gt;IO::Socket::INET&lt;/a&gt; based mechanism for retrieving &lt;code&gt;http&lt;/code&gt; schemed urls. It doesn't follow redirects for instance.</source>
          <target state="translated">&lt;code&gt;iosock&lt;/code&gt; は、 &lt;code&gt;http&lt;/code&gt; スキームのURL を取得するための非常に限定された&lt;a href=&quot;../io/socket/inet&quot;&gt;IO :: Socket :: INET&lt;/a&gt;ベースのメカニズムです。たとえば、リダイレクトに従いません。</target>
        </trans-unit>
        <trans-unit id="0dbd4c2804b7173533ec0bb2e4bcaf5ac3324b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iosock&lt;/code&gt; is a very limited &lt;a href=&quot;IO::Socket::INET&quot;&gt;IO::Socket::INET&lt;/a&gt; based mechanism for retrieving &lt;code&gt;http&lt;/code&gt; schemed urls. It doesn't follow redirects for instance.</source>
          <target state="translated">&lt;code&gt;iosock&lt;/code&gt; は、 &lt;code&gt;http&lt;/code&gt; スキーム化されたURLを取得するための非常に限定された&lt;a href=&quot;IO::Socket::INET&quot;&gt;IO :: Socket :: INET&lt;/a&gt;ベースのメカニズムです。たとえば、リダイレクトには従いません。</target>
        </trans-unit>
        <trans-unit id="f75f4cb95b2a1340b2264c404136042989b18f8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_deeply()&lt;/code&gt; can do that better and with diagnostics.</source>
          <target state="translated">&lt;code&gt;is_deeply()&lt;/code&gt; は、診断を使用して、より適切に実行できます。</target>
        </trans-unit>
        <trans-unit id="fa45eb9c353e9becb0910ea19cd26aa2cc1efcb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_deeply()&lt;/code&gt; compares the dereferenced values of references, the references themselves (except for their type) are ignored. This means aspects such as blessing and ties are not considered &quot;different&quot;.</source>
          <target state="translated">&lt;code&gt;is_deeply()&lt;/code&gt; は、参照の間接参照された値を比較し、参照自体（タイプを除く）は無視されます。つまり、祝福や絆などの側面は「異なる」とは見なされません。</target>
        </trans-unit>
        <trans-unit id="3ac9608b72d885f105d8ded955f2852bb1f4026f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_deeply()&lt;/code&gt; currently has very limited handling of function reference and globs. It merely checks if they have the same referent. This may improve in the future.</source>
          <target state="translated">&lt;code&gt;is_deeply()&lt;/code&gt; は現在、関数参照とグロブの処理が非常に制限されています。それらが同じ指示対象を持っているかどうかをチェックするだけです。これは将来的に改善される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fc0cb7e93ec296bf828a3ee1cf8be61d7fd1fa20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_indexable($package)&lt;/code&gt; or &lt;code&gt;is_indexable()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;is_indexable($package)&lt;/code&gt; または &lt;code&gt;is_indexable()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fee01bdd14b870e8f587577165aaba8174b5f56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_loaded&lt;/code&gt; tells you if &lt;code&gt;PACKAGE&lt;/code&gt; has been marked as loaded yet. &lt;code&gt;PACKAGE&lt;/code&gt; can be a bareword or string.</source>
          <target state="translated">&lt;code&gt;is_loaded&lt;/code&gt; は、 &lt;code&gt;PACKAGE&lt;/code&gt; がロード済みとしてマークされているかどうかを通知します。 &lt;code&gt;PACKAGE&lt;/code&gt; は、ベアワードまたは文字列にすることができます。</target>
        </trans-unit>
        <trans-unit id="908cf7f802a6484de1a86d6a37939c96ffeeea32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_negative()&lt;/code&gt; is an alias for &lt;code&gt;is_neg()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;is_negative()&lt;/code&gt; の別名である &lt;code&gt;is_neg()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00a89aa2da974da0bd80f4ecc1bc689f4a5b20cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_negative()&lt;/code&gt; is an alias for &lt;code&gt;is_neg()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_negative()&lt;/code&gt; の別名である &lt;code&gt;is_neg()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="57e24bd0e67b03038233cb69159892773438e44e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_our&lt;/code&gt; indicates that the name to check is an 'our' declaration.</source>
          <target state="translated">&lt;code&gt;is_our&lt;/code&gt; は、チェックする名前が「our」宣言であることを示します。</target>
        </trans-unit>
        <trans-unit id="da7b72a6911cc56de693b87d7cfcdd8872eb161b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_our&lt;/code&gt; indicates that the name to check is an &lt;code&gt;&quot;our&quot;&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;is_our&lt;/code&gt; は、チェックする名前が &lt;code&gt;&quot;our&quot;&lt;/code&gt; 宣言であることを示します。</target>
        </trans-unit>
        <trans-unit id="83a514d3b918898f19b078949b55c4b50405311f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_positive()&lt;/code&gt; and &lt;code&gt;is_negative()&lt;/code&gt; are aliases to &lt;code&gt;is_pos()&lt;/code&gt; and &lt;code&gt;is_neg()&lt;/code&gt; , respectively. &lt;code&gt;is_positive()&lt;/code&gt; and &lt;code&gt;is_negative()&lt;/code&gt; were introduced in v1.36, while &lt;code&gt;is_pos()&lt;/code&gt; and &lt;code&gt;is_neg()&lt;/code&gt; were only introduced in v1.68.</source>
          <target state="translated">&lt;code&gt;is_positive()&lt;/code&gt; および &lt;code&gt;is_negative()&lt;/code&gt; にエイリアスされ &lt;code&gt;is_pos()&lt;/code&gt; と &lt;code&gt;is_neg()&lt;/code&gt; 、それぞれ。 &lt;code&gt;is_positive()&lt;/code&gt; および &lt;code&gt;is_negative()&lt;/code&gt; はv1.36で導入されましたが、 &lt;code&gt;is_pos()&lt;/code&gt; および &lt;code&gt;is_neg()&lt;/code&gt; はv1.68でのみ導入されました。</target>
        </trans-unit>
        <trans-unit id="36dbe9a547bda60465b84e97fa8c4255f94a0b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_positive()&lt;/code&gt; is an alias for &lt;code&gt;is_pos()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;is_positive()&lt;/code&gt; の別名である &lt;code&gt;is_pos()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b45717725a93f97c98ac885f9335033581a7488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_positive()&lt;/code&gt; is an alias for &lt;code&gt;is_pos()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_positive()&lt;/code&gt; の別名である &lt;code&gt;is_pos()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7ebfddb80039ad6fdcb40b1907d93271e7168e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_shared&lt;/code&gt; checks if the specified variable is shared or not. If shared, returns the variable's internal ID (similar to &lt;code&gt;refaddr()&lt;/code&gt; (see &lt;a href=&quot;../scalar/util&quot;&gt;Scalar::Util&lt;/a&gt;). Otherwise, returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_shared&lt;/code&gt; は、指定された変数が共有されているかどうかを確認します。共有されている場合、変数の内部IDを返します（ &lt;code&gt;refaddr()&lt;/code&gt; に似ています（&lt;a href=&quot;../scalar/util&quot;&gt;Scalar :: Utilを&lt;/a&gt;参照）。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1ea930a53c7c204137f02e24dcafe61cde400408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_shared&lt;/code&gt; checks if the specified variable is shared or not. If shared, returns the variable's internal ID (similar to &lt;code&gt;refaddr()&lt;/code&gt; (see &lt;a href=&quot;Scalar::Util&quot;&gt;Scalar::Util&lt;/a&gt;). Otherwise, returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is_shared&lt;/code&gt; は、指定された変数が共有されているかどうかを確認します。共有されている場合は、変数の内部IDを返します（ &lt;code&gt;refaddr()&lt;/code&gt; と同様です（&lt;a href=&quot;Scalar::Util&quot;&gt;Scalar :: Utilを&lt;/a&gt;参照）。それ以外の場合は、 &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1bd3e625f9dccecad6923a6b9bcad7bcf170e05e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isa&lt;/code&gt; methods behave appropriately).</source>
          <target state="translated">&lt;code&gt;isa&lt;/code&gt; メソッドは適切に動作します）。</target>
        </trans-unit>
        <trans-unit id="e786fb8e004ccf42441c2bae194809a7fa5f68ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterator_factory_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;iterator_factory_class&lt;/code&gt; は、&lt;a href=&quot;#new&quot;&gt;「new」で&lt;/a&gt;説明されているようにカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="05461b3d98ad64340381f43af6ab96dfd13c6be0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterator_factory_class&lt;/code&gt; can be customized, as described in &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;iterator_factory_class&lt;/code&gt; は、&lt;a href=&quot;#new&quot;&gt;newで&lt;/a&gt;説明されているようにカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="9d7fdef8ee5f35a68781b987a4bd55b551b5e336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;join()&lt;/code&gt; does three things: it waits for a thread to exit, cleans up after it, and returns any data the thread may have produced. But what if you're not interested in the thread's return values, and you don't really care when the thread finishes? All you want is for the thread to get cleaned up after when it's done.</source>
          <target state="translated">&lt;code&gt;join()&lt;/code&gt; は、スレッドが終了するのを待機し、スレッドが終了した後にクリーンアップし、スレッドが生成した可能性のあるデータを返すという3つのことを行います。しかし、スレッドの戻り値に関心がなく、スレッドがいつ終了するかを本当に気にしない場合はどうでしょうか。必要なのは、スレッドが完了した後にクリーンアップすることだけです。</target>
        </trans-unit>
        <trans-unit id="82f600d5a5ec1c47fef7c4bad5c4b07ebc4ec7f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;join&lt;/code&gt; waits for a thread to end and returns any values the thread exited with. &lt;code&gt;join&lt;/code&gt; will block until the thread has ended, though it won't block if the thread has already terminated.</source>
          <target state="translated">&lt;code&gt;join&lt;/code&gt; はスレッドが終了するのを待ち、スレッドが終了した値を返します。 &lt;code&gt;join&lt;/code&gt; は、スレッドが終了するまでブロックしますが、スレッドがすでに終了している場合はブロックしません。</target>
        </trans-unit>
        <trans-unit id="7caa9a76fe0a2484851b25ef43baeabc279b7cf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_alive&lt;/code&gt; &amp;mdash; Whether to reuse the last connection (if for the same scheme, host and port) (defaults to 1)</source>
          <target state="translated">&lt;code&gt;keep_alive&lt;/code&gt; &amp;mdash;最後の接続を再利用するかどうか（同じスキーム、ホスト、およびポートの場合）（デフォルトは1）</target>
        </trans-unit>
        <trans-unit id="c5239c2a7e96ba60463f277c06ec272bfc1e133d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill('KILL', ...)&lt;/code&gt; can be used to terminate a pseudo-process by passing it the ID returned by fork(). The outcome of kill on a pseudo-process is unpredictable and it should not be used except under dire circumstances, because the operating system may not guarantee integrity of the process resources when a running thread is terminated. The process which implements the pseudo-processes can be blocked and the Perl interpreter hangs. Note that using &lt;code&gt;kill('KILL', ...)&lt;/code&gt; on a pseudo-process() may typically cause memory leaks, because the thread that implements the pseudo-process does not get a chance to clean up its resources.</source>
          <target state="translated">&lt;code&gt;kill('KILL', ...)&lt;/code&gt; を使用して、fork（）によって返されたIDを渡すことにより、疑似プロセスを終了できます。疑似プロセスでのkillの結果は予測できず、実行中のスレッドが終了したときにオペレーティングシステムがプロセスリソースの整合性を保証しない可能性があるため、悲惨な状況を除いて使用しないでください。疑似プロセスを実装するプロセスがブロックされ、Perlインタープリターがハングする可能性があります。疑似プロセスを実装するスレッドはリソースをクリーンアップする機会がないため、疑似プロセス（）で &lt;code&gt;kill('KILL', ...)&lt;/code&gt; を使用すると、通常、メモリリークが発生する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0eef3dae065531bba805f7320fe343d9e413e353" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill('TERM', ...)&lt;/code&gt; can also be used on pseudo-processes, but the signal will not be delivered while the pseudo-process is blocked by a system call, e.g. waiting for a socket to connect, or trying to read from a socket with no data available. Starting in Perl 5.14 the parent process will not wait for children to exit once they have been signalled with &lt;code&gt;kill('TERM', ...)&lt;/code&gt; to avoid deadlock during process exit. You will have to explicitly call waitpid() to make sure the child has time to clean-up itself, but you are then also responsible that the child is not blocking on I/O either.</source>
          <target state="translated">&lt;code&gt;kill('TERM', ...)&lt;/code&gt; は疑似プロセスでも使用できますが、ソケットの接続を待機したり、読み取りを試みたりするなど、システムコールによって疑似プロセスがブロックされている間は、シグナルは配信されません。利用可能なデータがないソケットから。Perl 5.14以降、プロセス終了時のデッドロックを回避するために &lt;code&gt;kill('TERM', ...)&lt;/code&gt; 通知された後、親プロセスは子が終了するのを待機しません。子が自分自身をクリーンアップする時間を確保するために、waitpid（）を明示的に呼び出す必要がありますが、子がI / Oをブロックしていないことにも責任があります。</target>
        </trans-unit>
        <trans-unit id="6539369a23b2286b09807225af454e166df5f9af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt; flags enabled</source>
          <target state="translated">&lt;code&gt;latin1&lt;/code&gt; または &lt;code&gt;ascii&lt;/code&gt; フラグが有効</target>
        </trans-unit>
        <trans-unit id="76e5d23ad52b94ac87ccff8d84b8e8122490c818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexical_subs&lt;/code&gt; - allow the use of lexical subroutines.</source>
          <target state="translated">&lt;code&gt;lexical_subs&lt;/code&gt; -字句サブルーチンの使用を許可します。</target>
        </trans-unit>
        <trans-unit id="d0fd51fe978af46143ef7e476cf8a91d754f9403" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexical_topic&lt;/code&gt; - allow the use of lexical &lt;code&gt;$_&lt;/code&gt; via &lt;code&gt;my $_&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lexical_topic&lt;/code&gt; - &lt;code&gt;my $_&lt;/code&gt; 介して字句 &lt;code&gt;$_&lt;/code&gt; 使用を許可します。</target>
        </trans-unit>
        <trans-unit id="778b80cfdd673f8fb55921afdf3d3a38219c358b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib&lt;/code&gt; is maintained by the perl5-porters. Please direct any questions to the canonical mailing list. Anything that is applicable to the CPAN release can be sent to its maintainer, though.</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; はperl5-portersによって管理されています。質問がある場合は正規のメーリングリストに送ってください。ただし、CPANリリースに適用できるものはすべて、メンテナに送信できます。</target>
        </trans-unit>
        <trans-unit id="a79ceaa8331c46467666b58e2fedd38e6ff4a586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib&lt;/code&gt; will warn about this. The sole exceptions are files with the &lt;code&gt;.par&lt;/code&gt; extension which are intended to be used as libraries.</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; はこれについて警告します。唯一の例外は、ライブラリとして使用することを目的とした &lt;code&gt;.par&lt;/code&gt; 拡張子を持つファイルです。</target>
        </trans-unit>
        <trans-unit id="7dbdb4f0306520f7abe5482b14dfce7a7aa50e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_handlers&lt;/code&gt; will attempt to load the &lt;code&gt;MySourceHandler&lt;/code&gt; class by looking in &lt;code&gt;@INC&lt;/code&gt; for it in this order:</source>
          <target state="translated">&lt;code&gt;load_handlers&lt;/code&gt; は、次の順序で &lt;code&gt;@INC&lt;/code&gt; を調べて &lt;code&gt;MySourceHandler&lt;/code&gt; クラスをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="347f0b37a026018219924f60ce1e17db3ba49ed4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local($x)&lt;/code&gt; saves away the old value of the global variable &lt;code&gt;$x&lt;/code&gt; and assigns a new value for the duration of the subroutine</source>
          <target state="translated">&lt;code&gt;local($x)&lt;/code&gt; は、グローバル変数 &lt;code&gt;$x&lt;/code&gt; の古い値を保存し、サブルーチンの期間中、新しい値を割り当てます。</target>
        </trans-unit>
        <trans-unit id="7fc21d0f7a4117a8fe63729506522a787886c5b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_address&lt;/code&gt; &amp;mdash; The local IP address to bind to</source>
          <target state="translated">&lt;code&gt;local_address&lt;/code&gt; &amp;mdash;バインドするローカルIPアドレス</target>
        </trans-unit>
        <trans-unit id="781e302076091acf759d87fc441e0a784931b032" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeconv()&lt;/code&gt; takes no arguments, and returns &lt;b&gt;a reference to&lt;/b&gt; a hash. The keys of this hash are variable names for formatting, such as &lt;code&gt;decimal_point&lt;/code&gt; and &lt;code&gt;thousands_sep&lt;/code&gt; . The values are the corresponding, er, values. See &lt;a href=&quot;posix#localeconv&quot;&gt;localeconv in POSIX&lt;/a&gt; for a longer example listing the categories an implementation might be expected to provide; some provide more and others fewer. You don't need an explicit &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , because &lt;code&gt;localeconv()&lt;/code&gt; always observes the current locale.</source>
          <target state="translated">&lt;code&gt;localeconv()&lt;/code&gt; は引数を取らず、ハッシュ&lt;b&gt;へ&lt;/b&gt;の&lt;b&gt;参照を&lt;/b&gt;返します。このハッシュのキーは、以下のようなフォーマットするための変数名、ある &lt;code&gt;decimal_point&lt;/code&gt; や &lt;code&gt;thousands_sep&lt;/code&gt; 。値は対応するer値です。実装が提供すると予想されるカテゴリをリストするより長い例については&lt;a href=&quot;posix#localeconv&quot;&gt;、POSIXのlocaleconvを&lt;/a&gt;参照してください。提供するものと提供しないものがあります。 &lt;code&gt;localeconv()&lt;/code&gt; は常に現在のロケールを監視するため、明示的な &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="3f66fab5460d4dc9728ad1ba256d520cd78b6a49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localeconv()&lt;/code&gt; takes no arguments, and returns &lt;b&gt;a reference to&lt;/b&gt; a hash. The keys of this hash are variable names for formatting, such as &lt;code&gt;decimal_point&lt;/code&gt; and &lt;code&gt;thousands_sep&lt;/code&gt;. The values are the corresponding, er, values. See &lt;a href=&quot;posix#localeconv&quot;&gt;&quot;localeconv&quot; in POSIX&lt;/a&gt; for a longer example listing the categories an implementation might be expected to provide; some provide more and others fewer. You don't need an explicit &lt;code&gt;use locale&lt;/code&gt;, because &lt;code&gt;localeconv()&lt;/code&gt; always observes the current locale.</source>
          <target state="translated">&lt;code&gt;localeconv()&lt;/code&gt; は引数をとらず、ハッシュ&lt;b&gt;へ&lt;/b&gt;の&lt;b&gt;参照を&lt;/b&gt;返します。このハッシュのキーは、以下のようなフォーマットするための変数名、ある &lt;code&gt;decimal_point&lt;/code&gt; や &lt;code&gt;thousands_sep&lt;/code&gt; 。値は、対応するerの値です。実装が提供すると予想されるカテゴリをリストしたより長い例については&lt;a href=&quot;posix#localeconv&quot;&gt;、POSIXの「localeconv」を&lt;/a&gt;参照してください。提供するものが多いものと少ないものがあります。 &lt;code&gt;localeconv()&lt;/code&gt; は常に現在のロケールを監視するため、明示的に &lt;code&gt;use locale&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="8d0f45c80463df0b85e5ba5ab579ddd13fc8d375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localtime&lt;/code&gt; has the same range as &lt;a href=&quot;#gmtime&quot;&gt;&quot;gmtime&quot;&lt;/a&gt;, but because time zone rules change, its accuracy for historical and future times may degrade but usually by no more than an hour.</source>
          <target state="translated">&lt;code&gt;localtime&lt;/code&gt; の範囲は&lt;a href=&quot;#gmtime&quot;&gt;「gmtime」&lt;/a&gt;と同じですが、タイムゾーンのルールが変更されるため、過去および将来の時刻の精度が低下する可能性がありますが、通常は1時間以内です。</target>
        </trans-unit>
        <trans-unit id="2a5a8604c9701ff564566be832ebca55c49fc48f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock()&lt;/code&gt; blocks the thread until the variable being locked is available. When &lt;code&gt;lock()&lt;/code&gt; returns, your thread can be sure that no other thread can lock that variable until the block containing the lock exits.</source>
          <target state="translated">&lt;code&gt;lock()&lt;/code&gt; は、ロックされている変数が使用可能になるまでスレッドをブロックします。 &lt;code&gt;lock()&lt;/code&gt; を返す、あなたのスレッドは、他のスレッドがロック終了を含むブロックまで、その変数をロックすることはできないことを確認することができます。</target>
        </trans-unit>
        <trans-unit id="09118e18715d2d6315b0a6dadf4317baf4a851d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; follows references exactly</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; は参照に正確に従います</target>
        </trans-unit>
        <trans-unit id="1e9281d382b272fae184a0276036a0f570f6c161" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; places a &lt;b&gt;advisory&lt;/b&gt; lock on a variable until the lock goes out of scope. If the variable is locked by another thread, the &lt;code&gt;lock&lt;/code&gt; call will block until it's available. Multiple calls to &lt;code&gt;lock&lt;/code&gt; by the same thread from within dynamically nested scopes are safe -- the variable will remain locked until the outermost lock on the variable goes out of scope.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 置か&lt;b&gt;諮問&lt;/b&gt;ロックがスコープから外れるまで変数のロックを。変数が別のスレッドによってロックされている場合、 &lt;code&gt;lock&lt;/code&gt; 呼び出しは使用可能になるまでブロックされます。動的にネストされたスコープ内から同じスレッドで &lt;code&gt;lock&lt;/code&gt; する複数の呼び出しは安全です。変数の最も外側のロックがスコープから外れるまで、変数はロックされたままになります。</target>
        </trans-unit>
        <trans-unit id="39ab05ea94c87b62ab35478b213c751ba976e63e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; places a lock on a variable until the lock goes out of scope.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; は、ロックがスコープ外になるまで変数にロックを設定します。</target>
        </trans-unit>
        <trans-unit id="3d252978807d4a7ce13ddf9824c30a75650ac4c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loop&lt;/code&gt; is an optional preconstructed &lt;code&gt;enterloop&lt;/code&gt; op to use in the loop; if it is null then a suitable op will be constructed automatically. &lt;code&gt;expr&lt;/code&gt; supplies the loop's controlling expression. &lt;code&gt;block&lt;/code&gt; supplies the main body of the loop, and &lt;code&gt;cont&lt;/code&gt; optionally supplies a &lt;code&gt;continue&lt;/code&gt; block that operates as a second half of the body. All of these optree inputs are consumed by this function and become part of the constructed op tree.</source>
          <target state="translated">&lt;code&gt;loop&lt;/code&gt; は、ループで使用するオプションの事前構築された &lt;code&gt;enterloop&lt;/code&gt; opです。nullの場合、適切なopが自動的に作成されます。 &lt;code&gt;expr&lt;/code&gt; は、ループの制御式を提供します。 &lt;code&gt;block&lt;/code&gt; はループの本体を提供し、 &lt;code&gt;cont&lt;/code&gt; はオプションで本体の後半として動作する &lt;code&gt;continue&lt;/code&gt; ブロックを提供します。これらのoptree入力はすべて、この関数によって消費され、構築されたopツリーの一部になります。</target>
        </trans-unit>
        <trans-unit id="ea4a29ff759286dc4a0d846a54fba072c0f2b509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lseek()&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek()&lt;/a&gt;&lt;/code&gt; only work with files opened in binary mode.</source>
          <target state="translated">&lt;code&gt;lseek()&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/sysseek&quot;&gt;sysseek()&lt;/a&gt;&lt;/code&gt; は、バイナリモードで開かれたファイルでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="7b60fd594e78546a6d22f780ff2e2a2c8b8234c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lseek()&lt;/code&gt;, &lt;code&gt;tell()&lt;/code&gt; and &lt;code&gt;sysseek()&lt;/code&gt; only work with files opened in binary mode.</source>
          <target state="translated">&lt;code&gt;lseek()&lt;/code&gt; 、 &lt;code&gt;tell()&lt;/code&gt; 、および &lt;code&gt;sysseek()&lt;/code&gt; は、バイナリモードで開かれたファイルでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="883ccb60af102a63dca29d53e2d458e06fa1f4e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lynx&lt;/code&gt; can only fetch remote files by dumping its contents to &lt;code&gt;STDOUT&lt;/code&gt; , which we in turn capture. If that content is a 'custom' error file (like, say, a &lt;code&gt;404 handler&lt;/code&gt;), you will get that contents instead.</source>
          <target state="translated">&lt;code&gt;lynx&lt;/code&gt; は、その内容を &lt;code&gt;STDOUT&lt;/code&gt; にダンプすることによってリモートファイルのみをフェッチできます。そのコンテンツが「カスタム」エラーファイル（たとえば、 &lt;code&gt;404 handler&lt;/code&gt; ）である場合、代わりにそのコンテンツを取得します。</target>
        </trans-unit>
        <trans-unit id="ca8181bd7507b944c5da73ef1d60cb5b9183b0f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lynx&lt;/code&gt; can only fetch remote files by dumping its contents to &lt;code&gt;STDOUT&lt;/code&gt;, which we in turn capture. If that content is a 'custom' error file (like, say, a &lt;code&gt;404 handler&lt;/code&gt;), you will get that contents instead.</source>
          <target state="translated">&lt;code&gt;lynx&lt;/code&gt; は、その内容を &lt;code&gt;STDOUT&lt;/code&gt; にダンプすることによってのみリモートファイルをフェッチでき、STDOUTはそれをキャプチャします。そのコンテンツが「カスタム」エラーファイル（たとえば、 &lt;code&gt;404 handler&lt;/code&gt; ）の場合、代わりにそのコンテンツを取得します。</target>
        </trans-unit>
        <trans-unit id="a63d1cb13b2e2d34f317b472c81b8bed46501684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m''&lt;/code&gt;, the pattern of &lt;code&gt;s'''&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;m''&lt;/code&gt; 、 &lt;code&gt;s'''&lt;/code&gt; パターン</target>
        </trans-unit>
        <trans-unit id="f18d18bb4566b22549963c5fa12983047cd227b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m/pattern/msixpogcdualn&lt;/code&gt; searches a string for a pattern match, applying the given options.</source>
          <target state="translated">&lt;code&gt;m/pattern/msixpogcdualn&lt;/code&gt; は、指定されたオプションを適用して、文字列でパターン一致を検索します。</target>
        </trans-unit>
        <trans-unit id="b6908309921cfb034efc3e4069f56b25e3fb5b8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m?pattern?&lt;/code&gt; is like &lt;code&gt;m/pattern/&lt;/code&gt; but matches only once. No alternate delimiters can be used. Must be reset with reset().</source>
          <target state="translated">&lt;code&gt;m?pattern?&lt;/code&gt; &lt;code&gt;m/pattern/&lt;/code&gt; 似ていますが、1回だけ一致します。代替の区切り文字は使用できません。reset（）でリセットする必要があります。</target>
        </trans-unit>
        <trans-unit id="385b785dc276da4cc64862fa5145b732ada18a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab61daddd4de3c593af044da2e2d7ce6201973b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make&lt;/code&gt;, however, failed with output (excerpted) like this:</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; ただし、makeは次のような出力（抜粋）で失敗しました。</target>
        </trans-unit>
        <trans-unit id="d886031ca39127136a93f5c58154011b1571ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the group ownership of created directories to the symbolic name [group], but &lt;code&gt;&lt;a href=&quot;../functions/getgrnam&quot;&gt;getgrnam&lt;/a&gt;&lt;/code&gt; did not return the corresponding numeric gid. The directory will be created, but group ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; は、作成されたディレクトリのグループ所有権をシンボリック名[グループ]に与えるように指示されましたが、 &lt;code&gt;&lt;a href=&quot;../functions/getgrnam&quot;&gt;getgrnam&lt;/a&gt;&lt;/code&gt; は対応する数値gidを返しませんでした。ディレクトリは作成されますが、グループの所有権は変更されません。</target>
        </trans-unit>
        <trans-unit id="58791d691818b086bac47e6b8fe80f3a3d7fc75e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the group ownership of created directories to the symbolic name [group], but &lt;code&gt;getgrnam&lt;/code&gt; did not return the corresponding numeric gid. The directory will be created, but group ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; は、作成されたディレクトリのグループ所有権をシンボリック名[group]に与えるように指示されましたが、 &lt;code&gt;getgrnam&lt;/code&gt; は対応する数値gidを返しませんでした。ディレクトリは作成されますが、グループの所有権は変更されません。</target>
        </trans-unit>
        <trans-unit id="3237359a6cb04586bfde967ca0039e3278fe9e70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the ownership of created directories to the symbolic name [owner], but &lt;code&gt;&lt;a href=&quot;../functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt; did not return the corresponding numeric uid. The directory will be created, but ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; は、作成されたディレクトリの所有権をシンボリック名[所有者]に与えるように指示されましたが、 &lt;code&gt;&lt;a href=&quot;../functions/getpwnam&quot;&gt;getpwnam&lt;/a&gt;&lt;/code&gt; は対応する数値uidを返しませんでした。ディレクトリは作成されますが、所有権は変更されません。</target>
        </trans-unit>
        <trans-unit id="0eb8e4fce86b24625447f0fee5c1f2f51f994fc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was instructed to give the ownership of created directories to the symbolic name [owner], but &lt;code&gt;getpwnam&lt;/code&gt; did not return the corresponding numeric uid. The directory will be created, but ownership will not be changed.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; は、作成されたディレクトリの所有権をシンボリック名[owner]に与えるように指示されましたが、 &lt;code&gt;getpwnam&lt;/code&gt; は対応する数値uidを返しませんでした。ディレクトリは作成されますが、所有権は変更されません。</target>
        </trans-unit>
        <trans-unit id="1fc7e268861ebf6c487de7b9a430854e30e76cb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was not given any paths to create. This message is only emitted if the routine is called with the traditional interface. The modern interface will remain silent if given nothing to do.</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; には、作成するパスが指定されていません。このメッセージは、ルーチンが従来のインターフェースで呼び出された場合にのみ出力されます。何もしなければ、最新のインターフェースは無音のままです。</target>
        </trans-unit>
        <trans-unit id="2e443672231a8aa8a3a54538e9ff5974e9e3a2dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was unable to create the path. Probably some sort of permissions error at the point of departure or insufficient resources (such as free inodes on Unix).</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; はパスを作成できませんでした。おそらく、出発点でのある種のパーミッションエラーまたは不十分なリソース（Unix上の無料のiノードなど）。</target>
        </trans-unit>
        <trans-unit id="2755c6f5063eb2e334da849c0ce6318b9f39c061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_path&lt;/code&gt; was unable to create the path. Probably some sort of permissions error at the point of departure, or insufficient resources (such as free inodes on Unix).</source>
          <target state="translated">&lt;code&gt;make_path&lt;/code&gt; がパスを作成できませんでした。おそらく、出発の時点で何らかの許可エラーが発生しているか、リソースが不十分です（Unixの空きiノードなど）。</target>
        </trans-unit>
        <trans-unit id="07a8fe35478388c546b0d41c18eefc372419fd9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maketext&lt;/code&gt; and other methods to do with accessing %Lexicon data for a given language handle.</source>
          <target state="translated">&lt;code&gt;maketext&lt;/code&gt; および指定された言語ハンドルの％Lexiconデータへのアクセスに関連するその他のメソッド。</target>
        </trans-unit>
        <trans-unit id="8d3d67fea62a065d10c5926428fdebd26c6a5f56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mantissa()&lt;/code&gt; and &lt;code&gt;exponent()&lt;/code&gt; return the said parts of the BigInt such that:</source>
          <target state="translated">&lt;code&gt;mantissa()&lt;/code&gt; および &lt;code&gt;exponent()&lt;/code&gt; は、BigIntの次の部分を返します。</target>
        </trans-unit>
        <trans-unit id="8b922a1e8b8a437e6a25aad879f34f0de9830b8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mask&lt;/code&gt; is recognised as an alias for this parameter.</source>
          <target state="translated">&lt;code&gt;mask&lt;/code&gt; は、このパラメーターのエイリアスとして認識されます。</target>
        </trans-unit>
        <trans-unit id="2cdbbfa91b28de49c104d6b9af4f6f87846706f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;matches&lt;/code&gt; is used to determine whether a given exception matches a particular role.</source>
          <target state="translated">&lt;code&gt;matches&lt;/code&gt; は、特定の例外が特定の役割に一致するかどうかを判断するために使用されます。</target>
        </trans-unit>
        <trans-unit id="735db1093393eee079ae5f4991770e04f6968586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_redirect&lt;/code&gt; &amp;mdash; Maximum number of redirects allowed (defaults to 5)</source>
          <target state="translated">&lt;code&gt;max_redirect&lt;/code&gt; &amp;mdash;許可されるリダイレクトの最大数（デフォルトは5）</target>
        </trans-unit>
        <trans-unit id="aeee7b55442af72793e10221eaf9fc76d8f198ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_size&lt;/code&gt; &amp;mdash; Maximum response size in bytes (only when not using a data callback). If defined, responses larger than this will return an exception.</source>
          <target state="translated">&lt;code&gt;max_size&lt;/code&gt; &amp;mdash;バイト単位の最大応答サイズ（データコールバックを使用しない場合のみ）。定義されている場合、これより大きい応答は例外を返します。</target>
        </trans-unit>
        <trans-unit id="03355b926946894926cfadae3a6b81818310b791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memoize&lt;/code&gt; knows that if the normalized version of the arguments is the same for two argument lists, then it can safely look up the value that it computed for one argument list and return it as the result of calling the function with the other argument list, even if the argument lists look different.</source>
          <target state="translated">&lt;code&gt;memoize&lt;/code&gt; は、引数の正規化されたバージョンが2つの引数リストで同じである場合、1つの引数リストに対して計算した値を安全に検索し、他の引数リストで関数を呼び出した結果としてそれを返すことができることを知っています。引数リストが異なる場合。</target>
        </trans-unit>
        <trans-unit id="638289935cbe995e57c2ecbf17c23e84ccb8dd5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; uses various strategies to combine different elements of the CPAN::Meta objects. The following strategies can be used with the extra_mappings argument of &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; は、さまざまな戦略を使用して、CPAN :: Metaオブジェクトのさまざまな要素を組み合わせます。次の戦略は、 &lt;code&gt;new&lt;/code&gt; のextra_mappings引数で使用できます。</target>
        </trans-unit>
        <trans-unit id="588d0d71e67f680f937b2933e4e80482741a6b27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meth&lt;/code&gt; is the name of the method to call.</source>
          <target state="translated">&lt;code&gt;meth&lt;/code&gt; は呼び出すメソッドの名前です。</target>
        </trans-unit>
        <trans-unit id="712fb23828e7aa39570d1c187a557f284fbccd22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mg_freeext(sv, how, NULL)&lt;/code&gt; is equivalent to &lt;code&gt;mg_free_type(sv, how)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mg_freeext(sv, how, NULL)&lt;/code&gt; と等価である &lt;code&gt;mg_free_type(sv, how)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c382bf574ac941794f4ceb11f1a7cf0a554b70e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;miniperl -MCross -MConfig -we 1&lt;/code&gt; should run okay, and it will provide right</source>
          <target state="translated">&lt;code&gt;miniperl -MCross -MConfig -we 1&lt;/code&gt; は正常に実行され、正しく提供されます</target>
        </trans-unit>
        <trans-unit id="4fffeff3899ad34654b8fd715931df104143ede2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minlen&lt;/code&gt;&lt;code&gt;minlenret&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;minlen&lt;/code&gt;&lt;code&gt;minlenret&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7ff8f6ef90463a78a4980b3e772f012f8f89756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minlenret&lt;/code&gt; is the minimum length (in characters) of the string that would be found in $&amp;amp; after a match.</source>
          <target state="translated">&lt;code&gt;minlenret&lt;/code&gt; は、一致後に$＆で検出される文字列の最小長（文字数）です。</target>
        </trans-unit>
        <trans-unit id="6bbd4a399f25a390cfec881966b0de3c042c6005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;rmdir&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa93a538eb746e066effec46888283ca286ffddb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; may have the values &lt;code&gt;deterministic&lt;/code&gt; for the case where all questions come in the order written down and &lt;code&gt;anyorder&lt;/code&gt; for the case where the questions may come in any order. The default mode is &lt;code&gt;deterministic&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; には、すべての質問が書かれた順序で来る場合の &lt;code&gt;deterministic&lt;/code&gt; 的な値と、質問が任意の順序で来る可能性のある場合の &lt;code&gt;anyorder&lt;/code&gt; がある値があります。デフォルトのモードは &lt;code&gt;deterministic&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e1fa5e0cf856c0cfac64557627a7bf6ca8e2afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my($x)&lt;/code&gt; creates a new variable that is only visible in the current subroutine. This is done at compile-time, so it is called lexical or static scoping. my() always affects private variables, also called lexical variables or (improperly) static(ly scoped) variables.</source>
          <target state="translated">&lt;code&gt;my($x)&lt;/code&gt; は、現在のサブルーチンでのみ表示される新しい変数を作成します。これはコンパイル時に行われるため、字句スコープまたは静的スコープと呼ばれます。 my（）は常に、字句変数または（不適切に）静的（スコープが限定された）変数とも呼ばれるプライベート変数に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="3be2cea04198936ddec55cc82c2731dab3af0258" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my()&lt;/code&gt; and &lt;code&gt;local()&lt;/code&gt; give list context to the right hand side of &lt;code&gt;=&lt;/code&gt;. The &amp;lt;$fh&amp;gt; read operation, like so many of Perl's functions and operators, can tell which context it was called in and behaves appropriately. In general, the scalar() function can help. This function does nothing to the data itself (contrary to popular myth) but rather tells its argument to behave in whatever its scalar fashion is. If that function doesn't have a defined scalar behavior, this of course doesn't help you (such as with sort()).</source>
          <target state="translated">&lt;code&gt;my()&lt;/code&gt; と &lt;code&gt;local()&lt;/code&gt; は、 &lt;code&gt;=&lt;/code&gt; の右側にリストコンテキストを与えます。&amp;lt;$ fh&amp;gt;読み取り操作は、多くのPerlの関数や演算子と同様に、呼び出されたコンテキストを認識し、適切に動作します。一般に、scalar（）関数が役立ちます。この関数は、（一般的な神話とは異なり）データ自体には何もしませんが、スカラー形式が何であれ、その引数に動作するように指示します。その関数に定義されたスカラー動作がない場合、これはもちろん役に立ちません（sort（）など）。</target>
        </trans-unit>
        <trans-unit id="a3f6bd4829fd2ba12633873148c47d9a80090bdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my&lt;/code&gt; variables are scoped to the current block, not to the current function. If you write &lt;code&gt;{my $x;} $x;&lt;/code&gt;, the second &lt;code&gt;$x&lt;/code&gt; does not refer to the one declared inside the block.</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; 変数は、現在の関数ではなく、現在のブロックにスコープされています。 &lt;code&gt;{my $x;} $x;&lt;/code&gt; と書くと 、2番目の &lt;code&gt;$x&lt;/code&gt; は、ブロック内で宣言されたものを参照していません。</target>
        </trans-unit>
        <trans-unit id="71b07f3d996d9ac376632ed1fb891e52a9c59c4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_perl&lt;/code&gt; points to the Perl interpreter that is to parse the script. It must have been previously created through the use of &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; and &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;. &lt;code&gt;xsinit&lt;/code&gt; points to a callback function that will be called to set up the ability for this Perl interpreter to load XS extensions, or may be null to perform no such setup.</source>
          <target state="translated">&lt;code&gt;my_perl&lt;/code&gt; は、スクリプトを解析するPerlインタープリターを指します。以前に&lt;a href=&quot;#perl_alloc&quot;&gt;「perl_alloc」&lt;/a&gt;と&lt;a href=&quot;#perl_construct&quot;&gt;「perl_construct」を&lt;/a&gt;使用して作成されている必要があります。 &lt;code&gt;xsinit&lt;/code&gt; は、このPerlインタープリターがXS拡張機能をロードする機能をセットアップするために呼び出されるコールバック関数を指します。または、そのようなセットアップを実行しない場合はnullの場合があります。</target>
        </trans-unit>
        <trans-unit id="e31baaedd01c699e3021af78994eb9360ab9836b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_perl&lt;/code&gt; points to the Perl interpreter. It must have been previously created through the use of &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; and &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;, and initialised through &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt;. This function should not be called if &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt; returned a non-zero value, indicating a failure in initialisation or compilation.</source>
          <target state="translated">&lt;code&gt;my_perl&lt;/code&gt; はPerlインタープリターを指します。これは、以前を使用して作成されている必要があります&lt;a href=&quot;#perl_alloc&quot;&gt;「perl_alloc」&lt;/a&gt;と&lt;a href=&quot;#perl_construct&quot;&gt;「perl_construct」&lt;/a&gt;、およびを通じて初期化&lt;a href=&quot;#perl_parse&quot;&gt;「perl_parse」&lt;/a&gt;。&lt;a href=&quot;#perl_parse&quot;&gt;「perl_parse」&lt;/a&gt;がゼロ以外の値を返し、初期化またはコンパイルの失敗を示している場合は、この関数を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="1947b5fb6cb99db3b3240eacc1379b1a337b2c5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_perl&lt;/code&gt; points to the Perl interpreter. It must have been previously created through the use of &lt;a href=&quot;#perl_alloc&quot;&gt;&quot;perl_alloc&quot;&lt;/a&gt; and &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;. It may have been initialised through &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt;, and may have been used through &lt;a href=&quot;#perl_run&quot;&gt;&quot;perl_run&quot;&lt;/a&gt; and other means. This function should be called for any Perl interpreter that has been constructed with &lt;a href=&quot;#perl_construct&quot;&gt;&quot;perl_construct&quot;&lt;/a&gt;, even if subsequent operations on it failed, for example if &lt;a href=&quot;#perl_parse&quot;&gt;&quot;perl_parse&quot;&lt;/a&gt; returned a non-zero value.</source>
          <target state="translated">&lt;code&gt;my_perl&lt;/code&gt; はPerlインタープリターを指します。以前に&lt;a href=&quot;#perl_alloc&quot;&gt;「perl_alloc」&lt;/a&gt;と&lt;a href=&quot;#perl_construct&quot;&gt;「perl_construct」を&lt;/a&gt;使用して作成されている必要があります。&lt;a href=&quot;#perl_parse&quot;&gt;「perl_parse」&lt;/a&gt;を介して初期化された可能性があり、&lt;a href=&quot;#perl_run&quot;&gt;「perl_run」&lt;/a&gt;およびその他の手段を介して使用された可能性があります。この関数は、&lt;a href=&quot;#perl_parse&quot;&gt;「perl_parse」&lt;/a&gt;がゼロ以外の値を返した場合など、後続の操作が失敗した場合でも、&lt;a href=&quot;#perl_construct&quot;&gt;「perl_construct」&lt;/a&gt;で構築されたすべてのPerlインタープリターに対して呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="77a292f2351d2499cb4d3956fe35448489fd6cf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_popen&lt;/code&gt; uses</source>
          <target state="translated">&lt;code&gt;my_popen&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="fe304a6dc30cae0afd16e8b92b6cd1cd7ce95c7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcat()&lt;/code&gt; appends string &lt;code&gt;src&lt;/code&gt; to the end of &lt;code&gt;dst&lt;/code&gt; . It will append at most &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; characters. It will then &lt;code&gt;NUL&lt;/code&gt; -terminate, unless &lt;code&gt;size&lt;/code&gt; is 0 or the original &lt;code&gt;dst&lt;/code&gt; string was longer than &lt;code&gt;size&lt;/code&gt; (in practice this should not happen as it means that either &lt;code&gt;size&lt;/code&gt; is incorrect or that &lt;code&gt;dst&lt;/code&gt; is not a proper &lt;code&gt;NUL&lt;/code&gt; -terminated string).</source>
          <target state="translated">&lt;code&gt;my_strlcat()&lt;/code&gt; は、文字列 &lt;code&gt;src&lt;/code&gt; を &lt;code&gt;dst&lt;/code&gt; の末尾に追加します。 &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; 文字のサイズで追加されます。次に、 &lt;code&gt;size&lt;/code&gt; が0 でないか、元の &lt;code&gt;dst&lt;/code&gt; 文字列が &lt;code&gt;size&lt;/code&gt; よりも長い場合を除き、 &lt;code&gt;NUL&lt;/code&gt; で終了します（実際には、 &lt;code&gt;size&lt;/code&gt; が正しくないか、 &lt;code&gt;dst&lt;/code&gt; が &lt;code&gt;NUL&lt;/code&gt; で終了する適切な文字列ではないため、これは発生しません）。</target>
        </trans-unit>
        <trans-unit id="f1af893d16b0d24596b5c31d0490c98a1626dcfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcat()&lt;/code&gt; appends string &lt;code&gt;src&lt;/code&gt; to the end of &lt;code&gt;dst&lt;/code&gt;. It will append at most &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; characters. It will then &lt;code&gt;NUL&lt;/code&gt;-terminate, unless &lt;code&gt;size&lt;/code&gt; is 0 or the original &lt;code&gt;dst&lt;/code&gt; string was longer than &lt;code&gt;size&lt;/code&gt; (in practice this should not happen as it means that either &lt;code&gt;size&lt;/code&gt; is incorrect or that &lt;code&gt;dst&lt;/code&gt; is not a proper &lt;code&gt;NUL&lt;/code&gt;-terminated string).</source>
          <target state="translated">&lt;code&gt;my_strlcat()&lt;/code&gt; は、文字列 &lt;code&gt;src&lt;/code&gt; を &lt;code&gt;dst&lt;/code&gt; の末尾に追加します。最大 &lt;code&gt;size - strlen(dst) - 1&lt;/code&gt; 文字を追加します。次に、 &lt;code&gt;size&lt;/code&gt; が0であるか、元の &lt;code&gt;dst&lt;/code&gt; 文字列が &lt;code&gt;size&lt;/code&gt; よりも長い場合を除いて、 &lt;code&gt;NUL&lt;/code&gt; で終了します（実際には、 &lt;code&gt;size&lt;/code&gt; が正しくないか、 &lt;code&gt;dst&lt;/code&gt; が適切な &lt;code&gt;NUL&lt;/code&gt; で終了する文字列ではないため、これは発生しないはずです）。</target>
        </trans-unit>
        <trans-unit id="cdedecbe5c820473f669d0af506ce2015ddd5193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcpy()&lt;/code&gt; copies up to &lt;code&gt;size - 1&lt;/code&gt; characters from the string &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt; , &lt;code&gt;NUL&lt;/code&gt; -terminating the result if &lt;code&gt;size&lt;/code&gt; is not 0.</source>
          <target state="translated">&lt;code&gt;my_strlcpy()&lt;/code&gt; は、最大 &lt;code&gt;size - 1&lt;/code&gt; 文字を文字列 &lt;code&gt;src&lt;/code&gt; から &lt;code&gt;dst&lt;/code&gt; にコピーします。 &lt;code&gt;size&lt;/code&gt; が0でない場合、結果は &lt;code&gt;NUL&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="c49e5ae33724b1666c685d2e7a72b62073255c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strlcpy()&lt;/code&gt; copies up to &lt;code&gt;size - 1&lt;/code&gt; characters from the string &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;, &lt;code&gt;NUL&lt;/code&gt;-terminating the result if &lt;code&gt;size&lt;/code&gt; is not 0.</source>
          <target state="translated">&lt;code&gt;my_strlcpy()&lt;/code&gt; までのコピー &lt;code&gt;size - 1&lt;/code&gt; の文字列から文字 &lt;code&gt;src&lt;/code&gt; に &lt;code&gt;dst&lt;/code&gt; 、 &lt;code&gt;NUL&lt;/code&gt; があれば、結果を-terminating &lt;code&gt;size&lt;/code&gt; 0ではありません。</target>
        </trans-unit>
        <trans-unit id="b1ec8d3fbd253d28a1634c761ae477719ded646f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;my_strnlen()&lt;/code&gt; computes the length of the string, up to &lt;code&gt;maxlen&lt;/code&gt; characters. It will never attempt to address more than &lt;code&gt;maxlen&lt;/code&gt; characters, making it suitable for use with strings that are not guaranteed to be NUL-terminated.</source>
          <target state="translated">&lt;code&gt;my_strnlen()&lt;/code&gt; は、 &lt;code&gt;maxlen&lt;/code&gt; 文字までの文字列の長さを計算します。 &lt;code&gt;maxlen&lt;/code&gt; を超える文字をアドレス指定しようとすることはないため、NULで終了することが保証されていない文字列での使用に適しています。</target>
        </trans-unit>
        <trans-unit id="7c4001332f8ab98ef832acfc949829d1eb7d7cb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to represent signed 16-/32-bit integers in big-/little-endian order. This is portable only when all platforms sharing packed data use the same binary representation for signed integers; for example, when all platforms use two's-complement representation.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、 &lt;code&gt;V&lt;/code&gt; は &lt;code&gt;!&lt;/code&gt; 符号付き16/32ビット整数をビッグ/リトルエンディアン順で表す修飾子。これは、パックされたデータを共有するすべてのプラットフォームが符号付き整数に同じバイナリ表現を使用する場合にのみ移植可能です。たとえば、すべてのプラットフォームが2の補数表現を使用する場合です。</target>
        </trans-unit>
        <trans-unit id="0844e932cd53e139fa2cf155e2c24b47a2e370a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to represent signed 16-/32-bit integers in big-/little-endian order. This is portable only when all platforms sharing packed data use the same binary representation for signed integers; for example, when all platforms use two's-complement representation.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; は &lt;code&gt;!&lt;/code&gt; を受け入れます。符号付き16/32ビット整数をビッグ/リトルエンディアンの順序で表す修飾子。これは、パックされたデータを共有するすべてのプラットフォームが符号付き整数に同じバイナリ表現を使用する場合にのみ移植可能です。たとえば、すべてのプラットフォームが2の補数表現を使用する場合です。</target>
        </trans-unit>
        <trans-unit id="ee6a21fed22915a331be3383e5b5b4032f977a5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; give the name. The name must be unqualified; that is, it must not include the package name. If &lt;code&gt;gv&lt;/code&gt; is a stash element, it is the caller's responsibility to ensure that the name passed to this function matches the name of the element. If it does not match, perl's internal bookkeeping will get out of sync.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;len&lt;/code&gt; が名前を与えます。名前は無修飾である必要があります。つまり、パッケージ名を含めることはできません。場合 &lt;code&gt;gv&lt;/code&gt; スタッシュ要素である、この関数に渡された名前は、要素の名前と一致することを確実にするために、呼び出し側の責任です。一致しない場合、perlの内部簿記は同期しなくなります。</target>
        </trans-unit>
        <trans-unit id="505efe65fc0e388dda45d46fcc78a224697b6312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namegv&lt;/code&gt; may not actually be a GV. For efficiency, perl may pass a CV or other SV instead. Whatever is passed can be used as the first argument to &lt;a href=&quot;#cv_name&quot;&gt;&quot;cv_name&quot;&lt;/a&gt;. You can force perl to pass a GV by including &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; in the &lt;code&gt;ckflags&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;namegv&lt;/code&gt; は実際にはGVではない場合があります。効率のために、perlは代わりにCVまたは他のSVを渡すことができます。渡されたものは&lt;a href=&quot;#cv_name&quot;&gt;すべて&lt;/a&gt;、「cv_name」の最初の引数として使用できます。 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; に &lt;code&gt;ckflags&lt;/code&gt; を含めることにより、perlにGVを強制的に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="65dcbed646c24c8b29a7a565d322acb0ec423da0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namegv&lt;/code&gt; may not actually be a GV. If the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit is clear in &lt;code&gt;*ckflags_p&lt;/code&gt;, it is permitted to pass a CV or other SV instead, anything that can be used as the first argument to &lt;a href=&quot;#cv_name&quot;&gt;&quot;cv_name&quot;&lt;/a&gt;. If the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit is set in &lt;code&gt;*ckflags_p&lt;/code&gt; then the check function requires &lt;code&gt;namegv&lt;/code&gt; to be a genuine GV.</source>
          <target state="translated">&lt;code&gt;namegv&lt;/code&gt; は実際にはGVではない場合があります。 &lt;code&gt;*ckflags_p&lt;/code&gt; で &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; ビットがクリアされている場合、代わりにCVまたは他のSVを渡すことが許可されます。これは、&lt;a href=&quot;#cv_name&quot;&gt;「cv_name」の&lt;/a&gt;最初の引数として使用できるものです。場合 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; のビットがセットされて &lt;code&gt;*ckflags_p&lt;/code&gt; その後、チェック機能が必要です &lt;code&gt;namegv&lt;/code&gt; を本物GVします。</target>
        </trans-unit>
        <trans-unit id="1da77eb1fcc99f55a77cfa3187a8be6d00b79f88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;namepv&lt;/code&gt;/&lt;code&gt;namelen&lt;/code&gt; specify the variable's name, including leading sigil. If &lt;code&gt;typestash&lt;/code&gt; is non-null, the name is for a typed lexical, and this identifies the type. If &lt;code&gt;ourstash&lt;/code&gt; is non-null, it's a lexical reference to a package variable, and this identifies the package. The following flags can be OR'ed together:</source>
          <target state="translated">&lt;code&gt;namepv&lt;/code&gt; / &lt;code&gt;namelen&lt;/code&gt; は、先頭の印章を含む変数の名前を指定します。 &lt;code&gt;typestash&lt;/code&gt; がnull以外の場合、名前は型付きレキシカルの名前であり、これにより型が識別されます。 &lt;code&gt;ourstash&lt;/code&gt; がnull以外の場合、それはパッケージ変数への字句参照であり、これはパッケージを識別します。次のフラグはORで結合できます。</target>
        </trans-unit>
        <trans-unit id="e95c68737e4cdbac2fa96320e25fc1fa20440782" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ndelay&lt;/code&gt; - Open the connection immediately (normally, the connection is opened when the first message is logged).</source>
          <target state="translated">&lt;code&gt;ndelay&lt;/code&gt; -すぐに接続を開きます（通常、最初のメッセージがログに記録されたときに接続が開かれます）。</target>
        </trans-unit>
        <trans-unit id="7953c406c8ff699f7523d2c0fa454774e594fafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new()&lt;/code&gt; is a synonym for &lt;code&gt;create()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;new()&lt;/code&gt; は &lt;code&gt;create()&lt;/code&gt; の同義語です。</target>
        </trans-unit>
        <trans-unit id="246e4e12c5e8b7fc27f98e6de494470349960771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new()&lt;/code&gt; is a synonym for &lt;code&gt;create()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new()&lt;/code&gt; は &lt;code&gt;create()&lt;/code&gt; の同義語です。</target>
        </trans-unit>
        <trans-unit id="da2a9ff681510122f5292361c80d05ba72747aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; creates a new semaphore, and initializes its count to the specified number (which must be an integer). If no number is specified, the semaphore's count defaults to 1.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; は新しいセマフォを作成し、そのカウントを指定された数（整数でなければなりません）に初期化します。番号が指定されていない場合、セマフォの数はデフォルトで1になります。</target>
        </trans-unit>
        <trans-unit id="efedbfabb0d57daca4e55f1c80323100b61e0eb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; is the constructor for &lt;code&gt;IO::Dir&lt;/code&gt; objects. It accepts one optional argument which, if given, &lt;code&gt;new&lt;/code&gt; will pass to &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; は &lt;code&gt;IO::Dir&lt;/code&gt; オブジェクトのコンストラクタです。これは、オプションの引数を1つ受け入れます。この引数を指定すると、 &lt;code&gt;new&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="3c47c2969ff9b3b9f7bd94f334a283572d1c7f86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; is the constructor for &lt;code&gt;IO::Dir&lt;/code&gt; objects. It accepts one optional argument which, if given, &lt;code&gt;new&lt;/code&gt; will pass to &lt;code&gt;open&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; は、 &lt;code&gt;IO::Dir&lt;/code&gt; オブジェクトのコンストラクターです。オプションの引数を1つ受け入れます。指定された場合、 &lt;code&gt;new&lt;/code&gt; は &lt;code&gt;open&lt;/code&gt; に渡されます</target>
        </trans-unit>
        <trans-unit id="35ebed1aa25ba5c1ac9f9e4c204e2addbac198e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt; starts a new thread of execution in the referenced subroutine. The optional list is passed as parameters to the subroutine. Execution continues in both the subroutine and the code after the &lt;code&gt;new&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; は、参照されるサブルーチンで新しい実行スレッドを開始します。オプションのリストは、パラメーターとしてサブルーチンに渡されます。 &lt;code&gt;new&lt;/code&gt; 呼び出しの後、サブルーチンとコードの両方で実行が継続されます。</target>
        </trans-unit>
        <trans-unit id="6d41331a192901f578b387cab4cc0d24438aec85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_ok()&lt;/code&gt;&lt;code&gt;note()&lt;/code&gt; and &lt;code&gt;explain()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;new_ok()&lt;/code&gt; &lt;code&gt;note()&lt;/code&gt; および &lt;code&gt;explain()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7152783cf0f9c5159afb5dc6873309aa1eacea66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no bytes&lt;/code&gt; can be used to reverse the effect of &lt;code&gt;use bytes&lt;/code&gt; within the current lexical scope.</source>
          <target state="translated">&lt;code&gt;no bytes&lt;/code&gt; 現在の字句スコープ内の &lt;code&gt;use bytes&lt;/code&gt; の効果を元に戻すために使用できるバイトはありません。</target>
        </trans-unit>
        <trans-unit id="a26c54b2961967f48d7aafce8700f53ea0a4ade3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no feature 'unicode_strings'&lt;/code&gt; tells the compiler to use the traditional Perl rules wherein the native character set rules is used unless it is clear to Perl that Unicode is desired. This can lead to some surprises when the behavior suddenly changes. (See &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;&quot;The &quot;Unicode Bug&quot;&quot; in perlunicode&lt;/a&gt; for details.) For this reason, if you are potentially using Unicode in your program, the &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; subpragma is &lt;b&gt;strongly&lt;/b&gt; recommended.</source>
          <target state="translated">&lt;code&gt;no feature 'unicode_strings'&lt;/code&gt; は、Unicodeが必要であることがPerlに明らかでない限り、ネイティブ文字セット規則が使用される従来のPerl規則を使用するようにコンパイラーに指示します。これは、動作が突然変化したときにいくつかの驚きにつながる可能性があります。（詳細については&lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;、perlunicodeの「Unicodeバグ」&lt;/a&gt;を参照してください。）このため、プログラムでUnicodeを使用している可能性がある場合は、 &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; サブプラグマを使用することを&lt;b&gt;強く&lt;/b&gt;お勧めします。</target>
        </trans-unit>
        <trans-unit id="37881fef53e1354528db97e9719ec39121a9bfd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no feature&lt;/code&gt; with no features specified will reset to the default group. To disable</source>
          <target state="translated">&lt;code&gt;no feature&lt;/code&gt; が指定されていない機能を持つには、デフォルトグループにリセットされます。無効にするには</target>
        </trans-unit>
        <trans-unit id="dec3d04f34da29bde4052794af89e457120eb309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; will turn off the effect of &lt;code&gt;use re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; for the given flags.</source>
          <target state="translated">&lt;code&gt;no re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; は、指定されたフラグに対して &lt;code&gt;use re '/&lt;i&gt;flags&lt;/i&gt;'&lt;/code&gt; を使用する効果をオフにします。</target>
        </trans-unit>
        <trans-unit id="1028ecddd058bf1fc3c87c0a21533cf8523a0ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_proxy&lt;/code&gt; &amp;mdash; List of domain suffixes that should not be proxied. Must be a comma-separated string or an array reference. (default is &lt;code&gt;$ENV{no_proxy}&lt;/code&gt; &amp;mdash;)</source>
          <target state="translated">&lt;code&gt;no_proxy&lt;/code&gt; &amp;mdash;プロキシされるべきではないドメインサフィックスのリスト。カンマ区切りの文字列または配列参照である必要があります。（デフォルトは &lt;code&gt;$ENV{no_proxy}&lt;/code&gt; &amp;mdash;）</target>
        </trans-unit>
        <trans-unit id="a92dfd8fef1985419787a429944b6929b7d15145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noeol&lt;/code&gt; - When set to true, no end of line character (&lt;code&gt;\n&lt;/code&gt; ) will be appended to the message. This can be useful for some buggy syslog daemons.</source>
          <target state="translated">&lt;code&gt;noeol&lt;/code&gt; -trueに設定すると、行末文字（ &lt;code&gt;\n&lt;/code&gt; ）はメッセージに追加されません。これは、バグの多いsyslogデーモンに役立ちます。</target>
        </trans-unit>
        <trans-unit id="cb0a6b6ffe1f8acfe1a779ce54faf3e76c8e41b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noeol&lt;/code&gt; - When set to true, no end of line character (&lt;code&gt;\n&lt;/code&gt;) will be appended to the message. This can be useful for some syslog daemons. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.29.</source>
          <target state="translated">&lt;code&gt;noeol&lt;/code&gt; -trueに設定すると、行末文字（ &lt;code&gt;\n&lt;/code&gt; ）はメッセージに追加されません。これは、一部のsyslogデーモンに役立つ場合があります。 &lt;code&gt;Sys::Syslog&lt;/code&gt; 追加されました。</target>
        </trans-unit>
        <trans-unit id="a7da13afac64a19ada71fa128b3727ac19b9a817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nofatal&lt;/code&gt; - When set to true, &lt;code&gt;openlog()&lt;/code&gt; and &lt;code&gt;syslog()&lt;/code&gt; will only emit warnings instead of dying if the connection to the syslog can't be established.</source>
          <target state="translated">&lt;code&gt;nofatal&lt;/code&gt; -trueに設定すると、 &lt;code&gt;openlog()&lt;/code&gt; と &lt;code&gt;syslog()&lt;/code&gt; は、syslogへの接続を確立できない場合に、死ぬ代わりに警告を発するだけです。</target>
        </trans-unit>
        <trans-unit id="ca122e6abeda68819afe86c5366b7c3712efdf56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nofatal&lt;/code&gt; - When set to true, &lt;code&gt;openlog()&lt;/code&gt; and &lt;code&gt;syslog()&lt;/code&gt; will only emit warnings instead of dying if the connection to the syslog can't be established. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.15.</source>
          <target state="translated">&lt;code&gt;nofatal&lt;/code&gt; -trueに設定すると、 &lt;code&gt;openlog()&lt;/code&gt; と &lt;code&gt;syslog()&lt;/code&gt; は、syslogへの接続を確立できない場合に停止するのではなく、警告のみを発行します。 &lt;code&gt;Sys::Syslog&lt;/code&gt; 追加されました。</target>
        </trans-unit>
        <trans-unit id="6d145b40dff849bfb7be76022f83e7b4e1ab3e8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonul&lt;/code&gt; - When set to true, no &lt;code&gt;NUL&lt;/code&gt; character (&lt;code&gt;\0&lt;/code&gt; ) will be appended to the message. This can be useful for some buggy syslog daemons.</source>
          <target state="translated">&lt;code&gt;nonul&lt;/code&gt; -trueに設定すると、 &lt;code&gt;NUL&lt;/code&gt; 文字（ &lt;code&gt;\0&lt;/code&gt; ）はメッセージに追加されません。これは、バグの多いsyslogデーモンに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dc012306f72212eaa59d4c933f581373eb5695b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonul&lt;/code&gt; - When set to true, no &lt;code&gt;NUL&lt;/code&gt; character (&lt;code&gt;\0&lt;/code&gt;) will be appended to the message. This can be useful for some syslog daemons. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.29.</source>
          <target state="translated">&lt;code&gt;nonul&lt;/code&gt; -trueに設定すると、メッセージに &lt;code&gt;NUL&lt;/code&gt; 文字（ &lt;code&gt;\0&lt;/code&gt; ）は追加されません。これは、一部のsyslogデーモンに役立つ場合があります。 &lt;code&gt;Sys::Syslog&lt;/code&gt; 追加されました。</target>
        </trans-unit>
        <trans-unit id="23eced03bcdab870ab9edcbe9dc4bb03fa8ec64e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normal&lt;/code&gt; is a string like &quot;ToLower&quot; which means the swash %utf8::ToLower.</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; は、 &quot;ToLower&quot;のような文字列で、スワッシュ％utf8 :: ToLowerを意味します。</target>
        </trans-unit>
        <trans-unit id="e54ce6f923598d61f4c291c2231596a77ff50261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalization&lt;/code&gt; is performed after &lt;code&gt;preprocess&lt;/code&gt; (if defined).</source>
          <target state="translated">&lt;code&gt;normalization&lt;/code&gt; は、 &lt;code&gt;preprocess&lt;/code&gt; （定義されている場合）の後に実行されます。</target>
        </trans-unit>
        <trans-unit id="6c787cbcd0d732de5ebfc6c56bc124a3d88f16c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalize&lt;/code&gt; and other some functions: on request.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; およびその他のいくつかの機能：リクエストに応じて。</target>
        </trans-unit>
        <trans-unit id="f38203e290e1449681c9a41b7d479b27b8df21db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nowait&lt;/code&gt; - Don't wait for child processes that may have been created while logging the message. (The GNU C library does not create a child process, so this option has no effect on Linux.)</source>
          <target state="translated">&lt;code&gt;nowait&lt;/code&gt; -メッセージのロギング中に作成された可能性のある子プロセスを待ちません。（GNU Cライブラリは子プロセスを作成しないため、このオプションはLinuxには影響しません。）</target>
        </trans-unit>
        <trans-unit id="4694888bc88f2c3c8dc0bbded8e50a8bc2b38846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nparens&lt;/code&gt; , &lt;code&gt;lastparen&lt;/code&gt; , and &lt;code&gt;lastcloseparen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;nparens&lt;/code&gt; 、 &lt;code&gt;lastparen&lt;/code&gt; 、および &lt;code&gt;lastcloseparen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52be97add4ff2683463a744b45fdd5976f903fed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nparens&lt;/code&gt;, &lt;code&gt;lastparen&lt;/code&gt;, and &lt;code&gt;lastcloseparen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;nparens&lt;/code&gt; 、 &lt;code&gt;lastparen&lt;/code&gt; 、および &lt;code&gt;lastcloseparen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8104bc44857c778695c79d0d1e8b5b9a2c1281a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num()&lt;/code&gt; returns the numeric value of the input Unicode string; or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it doesn't think the entire string has a completely valid, safe numeric value.</source>
          <target state="translated">&lt;code&gt;num()&lt;/code&gt; は、入力Unicode文字列の数値を返します。または、文字列全体が完全に有効で安全な数値であると考えない場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="143ac08b13ce4ad3b7dad5ef00e10449159ff968" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num()&lt;/code&gt; returns the numeric value of the input Unicode string; or &lt;code&gt;undef&lt;/code&gt; if it doesn't think the entire string has a completely valid, safe numeric value. If called with an optional second parameter, a reference to a scalar, &lt;code&gt;num()&lt;/code&gt; will set the scalar to the length of any valid initial substring; or to 0 if none.</source>
          <target state="translated">&lt;code&gt;num()&lt;/code&gt; は、入力されたUnicode文字列の数値を返します。または、文字列全体が完全に有効で安全な数値を持っているとは思わない場合は &lt;code&gt;undef&lt;/code&gt; 。オプションの2番目のパラメーター &lt;code&gt;num()&lt;/code&gt; スカラーへの参照）を指定して呼び出された場合、num（）はスカラーを有効な初期部分文字列の長さに設定します。ない場合は0に。</target>
        </trans-unit>
        <trans-unit id="3a7b6da46d3ad3066f3c734bb010fb7646c3f1c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num&lt;/code&gt; errs on the side of safety, and there may be valid strings of decimal digits that it doesn't recognize. Note that Unicode defines a number of &quot;digit&quot; characters that aren't &quot;decimal digit&quot; characters. &quot;Decimal digits&quot; have the property that they have a positional value, i.e., there is a units position, a 10's position, a 100's, etc, AND they are arranged in Unicode in blocks of 10 contiguous code points. The Chinese digits, for example, are not in such a contiguous block, and so Unicode doesn't view them as decimal digits, but merely digits, and so &lt;code&gt;\d&lt;/code&gt; will not match them. A single-character string containing one of these digits will have its decimal value returned by &lt;code&gt;num&lt;/code&gt; , but any longer string containing only these digits will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;num&lt;/code&gt; は安全性の面でエラーとなり、認識できない10進数の有効な文字列が存在する可能性があります。 Unicodeは、「10進数字」文字ではない「数字」文字の数を定義することに注意してください。 「10進数」には、位置の値があるという特性があります。つまり、ユニットの位置、10の位置、100の位置などがあり、それらはUnicodeで10の連続するコードポイントのブロックに配置されます。たとえば、中国の数字はそのような連続したブロックにないため、Unicodeはそれらを10進数字としてではなく、単なる数字として表示します。したがって、 &lt;code&gt;\d&lt;/code&gt; はそれらに一致しません。これらの数字のいずれかを含む1文字の文字列は、 &lt;code&gt;num&lt;/code&gt; によって返される10進数値を持ちます。ただし、これらの数字のみを含む長い文字列は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2b32e68b8130281ee35f097f4391a4cff47007bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;num&lt;/code&gt; errs on the side of safety, and there may be valid strings of decimal digits that it doesn't recognize. Note that Unicode defines a number of &quot;digit&quot; characters that aren't &quot;decimal digit&quot; characters. &quot;Decimal digits&quot; have the property that they have a positional value, i.e., there is a units position, a 10's position, a 100's, etc, AND they are arranged in Unicode in blocks of 10 contiguous code points. The Chinese digits, for example, are not in such a contiguous block, and so Unicode doesn't view them as decimal digits, but merely digits, and so &lt;code&gt;\d&lt;/code&gt; will not match them. A single-character string containing one of these digits will have its decimal value returned by &lt;code&gt;num&lt;/code&gt;, but any longer string containing only these digits will return &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;num&lt;/code&gt; は安全性の面で誤りがあり、認識できない有効な10進数の文字列が存在する可能性があります。 Unicodeは、「10進数」文字ではない「数字」文字の数を定義していることに注意してください。 「10進数」には、位置値があるという特性があります。つまり、単位位置、10の位置、100の位置などがあり、Unicodeで10個の連続するコードポイントのブロックに配置されます。たとえば、中国語の数字はそのような連続したブロックにないため、Unicodeはそれらを10進数としてではなく、単なる数字として表示します。したがって、 &lt;code&gt;\d&lt;/code&gt; はそれらと一致しません。これらの数字の1つを含む1文字の文字列では、10進値が &lt;code&gt;num&lt;/code&gt; によって返されます。ただし、これらの数字のみを含む長い文字列は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="be874a64ffa774adf425ae056b0282a20c6623c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;o debug&lt;/code&gt; without an argument lists the valid package names and the current set of packages in debugging mode. &lt;code&gt;o debug&lt;/code&gt; has built-in completion support.</source>
          <target state="translated">&lt;code&gt;o debug&lt;/code&gt; 引数なしのデバッグは、有効なパッケージ名とデバッグモードの現在のパッケージセットをリストします。 &lt;code&gt;o debug&lt;/code&gt; には組み込みのサポートが組み込まれています。</target>
        </trans-unit>
        <trans-unit id="209f16e359fcd3b6ba3b8313e7009d000c6c97f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;off&lt;/code&gt; must be non-negative.</source>
          <target state="translated">&lt;code&gt;off&lt;/code&gt; は負でない必要があります。</target>
        </trans-unit>
        <trans-unit id="d9ee9e272a7f7d5aba509cf3d9269033834525fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;off&lt;/code&gt; must be non-positive.</source>
          <target state="translated">&lt;code&gt;off&lt;/code&gt; は非正でなければなりません。</target>
        </trans-unit>
        <trans-unit id="466246a0ea0bcd1da5e37ea4ea93b6e2eb95b97a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok()&lt;/code&gt; is given an expression (in this case &lt;code&gt;$foo eq $bar&lt;/code&gt; ). If it's true, the test passed. If it's false, it didn't. That's about it.</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; には式が与えられます（この場合は &lt;code&gt;$foo eq $bar&lt;/code&gt; ）。それが本当であれば、テストは合格です。それが偽の場合、そうではありませんでした。それだけです。</target>
        </trans-unit>
        <trans-unit id="af31a705cde9721fcbca5948bef10e2333a178e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok()&lt;/code&gt; is given an expression (in this case &lt;code&gt;$foo eq $bar&lt;/code&gt;). If it's true, the test passed. If it's false, it didn't. That's about it.</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; には式（この場合は &lt;code&gt;$foo eq $bar&lt;/code&gt; ）が与えられます。それが本当なら、テストは合格しました。それが間違っている場合、そうではありませんでした。それについてです。</target>
        </trans-unit>
        <trans-unit id="23ab5a47d8307c5982472639709641b589ddb9e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok()&lt;/code&gt; prints out either &quot;ok&quot; or &quot;not ok&quot; along with a test number (it keeps track of that for you).</source>
          <target state="translated">&lt;code&gt;ok()&lt;/code&gt; は、「ok」または「not ok」をテスト番号とともに出力します（テスト番号が記録されます）。</target>
        </trans-unit>
        <trans-unit id="02f0e19d76f2346c39f954fb30c54feae693b547" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt; 's special handing of strings which look like they might be regexes can also cause unexpected behavior. An innocent:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; の正規表現のように見える文字列の特別な処理も、予期しない動作を引き起こす可能性があります。無実：</target>
        </trans-unit>
        <trans-unit id="b9453067bce99ddb6c0b34c1ad76b7773aa72eb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt; 's use of string &lt;code&gt;eq&lt;/code&gt; can sometimes cause odd problems when comparing numbers, especially if you're casting a string to a number:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; で文字列 &lt;code&gt;eq&lt;/code&gt; を使用すると、特に文字列を数値にキャストする場合に、数値を比較するときに奇妙な問題が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="c66df15d1b7a6f4eb10c201fd544c892f039b887" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt;'s special handing of strings which look like they might be regexes can also cause unexpected behavior. An innocent:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; の正規表現のように見える文字列の特別な処理も、予期しない動作を引き起こす可能性があります。無実：</target>
        </trans-unit>
        <trans-unit id="0cfa5c97305499145ba41c92e0d7854dbfd6d33e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ok(...)&lt;/code&gt;'s use of string &lt;code&gt;eq&lt;/code&gt; can sometimes cause odd problems when comparing numbers, especially if you're casting a string to a number:</source>
          <target state="translated">&lt;code&gt;ok(...)&lt;/code&gt; の文字列 &lt;code&gt;eq&lt;/code&gt; の使用は、特に文字列を数値にキャストしている場合、数値を比較するときに奇妙な問題を引き起こすことがあります。</target>
        </trans-unit>
        <trans-unit id="7a6826999eb95521e6d8d3b9f0c51592f03d979f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onfail&lt;/code&gt; hook might be used simply to print out the version of your package and/or how to report problems. It might also be used to generate extremely sophisticated diagnostics for a particularly bizarre test failure. However it's not a panacea. Core dumps or other unrecoverable errors prevent the &lt;code&gt;onfail&lt;/code&gt; hook from running. (It is run inside an &lt;code&gt;END&lt;/code&gt; block.) Besides, &lt;code&gt;onfail&lt;/code&gt; is probably over-kill in most cases. (Your test code should be simpler than the code it is testing, yes?)</source>
          <target state="translated">&lt;code&gt;onfail&lt;/code&gt; フックは、パッケージのバージョンおよび/または問題を報告する方法を出力するためだけに使用される場合があります。また、特に奇妙なテストの失敗に対して非常に高度な診断を生成するために使用することもできます。しかし、それは万能薬ではありません。コアダンプまたはその他の回復不可能なエラーにより、 &lt;code&gt;onfail&lt;/code&gt; フックが実行されません。（ &lt;code&gt;END&lt;/code&gt; ブロック内で実行されます。）また、 &lt;code&gt;onfail&lt;/code&gt; は、ほとんどの場合、おそらくやりすぎです。（テストコードは、テストするコードよりも単純である必要がありますか？）</target>
        </trans-unit>
        <trans-unit id="8f088836ce0fde68df7eee4d30bfbe00374a2996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open FH, &quot;-|&quot;&lt;/code&gt;, in other words, opening pipes to itself.</source>
          <target state="translated">&lt;code&gt;open FH, &quot;-|&quot;&lt;/code&gt; 言い換えれば、それ自体にパイプを開くことです。</target>
        </trans-unit>
        <trans-unit id="f3ffe39b6fc765d2c5dd23b3d8fe3f83a8a2cd05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open()&lt;/code&gt; ignores this variable (and the default layers) when called with 3 arguments and explicit layers are specified. Indirect calls to these functions via modules like &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt; are not affected as they occur in a different lexical scope. Directory handles such as opened by &lt;code&gt;opendir()&lt;/code&gt; are not currently affected.</source>
          <target state="translated">&lt;code&gt;open()&lt;/code&gt; は、3つの引数を指定して呼び出され、明示的なレイヤーが指定されている場合、この変数（およびデフォルトのレイヤー）を無視します。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handle&lt;/a&gt;などのモジュールを介したこれらの関数への間接呼び出しは、異なる字句スコープで発生するため、影響を受けません。 &lt;code&gt;opendir()&lt;/code&gt; によって開かれるなどのディレクトリハンドルは、現在影響を受けません。</target>
        </trans-unit>
        <trans-unit id="5e22ef4d238b8913182581bd4c36483578c9a28e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; accepts one, two or three parameters. With one parameter, it is just a front end for the built-in &lt;code&gt;open&lt;/code&gt; function. With two or three parameters, the first parameter is a filename that may include whitespace or other special characters, and the second parameter is the open mode, optionally followed by a file permission value.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; は、1つ、2つ、または3つのパラメーターを受け入れます。1つのパラメーターで、組み込みの &lt;code&gt;open&lt;/code&gt; 関数のフロントエンドにすぎません。2つまたは3つのパラメーターを使用する場合、最初のパラメーターは空白またはその他の特殊文字を含むファイル名であり、2番目のパラメーターはオープンモードであり、オプションでファイル許可値が続きます。</target>
        </trans-unit>
        <trans-unit id="731e105522272d59aee11be93bacdc1e634f424a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; takes two arguments. The first is the name of the file to open and the second is the open mode. The mode can be anything acceptable to &lt;a href=&quot;Compress::Zlib&quot;&gt;Compress::Zlib&lt;/a&gt; and by extension anything acceptable to</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; は2つの引数を取ります。1つ目は開くファイルの名前で、2つ目はオープンモードです。モードは、&lt;a href=&quot;Compress::Zlib&quot;&gt;Compress :: Zlibに&lt;/a&gt;受け入れられるものであれば何でもかまいません。ひいては、受け入れられるものなら何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="f09da5e2afa2630c81481fae033003b0e56465a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, &lt;code&gt;opendir&lt;/code&gt;, &lt;code&gt;sysopen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt;, &lt;code&gt;opendir&lt;/code&gt;, &lt;code&gt;sysopen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="155f0eaaf34c1ec0b370e6041e98b86611585735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optype&lt;/code&gt; should be an opcode indicating the type of operation that the pad entry is to support. This doesn't affect operational semantics, but is used for debugging.</source>
          <target state="translated">&lt;code&gt;optype&lt;/code&gt; は、パッドエントリがサポートする操作のタイプを示すオペコードである必要があります。これは操作的意味論には影響しませんが、デバッグに使用されます。</target>
        </trans-unit>
        <trans-unit id="f6cb592938f64645a65fb717b7ef6050e2ffefe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ord()&lt;/code&gt; will return EBCDIC code number values on an EBCDIC platform. For example:</source>
          <target state="translated">&lt;code&gt;ord()&lt;/code&gt; は、EBCDICプラットフォームでEBCDICコード番号の値を返します。例えば：</target>
        </trans-unit>
        <trans-unit id="cc7349d9655c667539e75d17a6e784d90202513f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;os2_stat&lt;/code&gt; special-cases</source>
          <target state="translated">&lt;code&gt;os2_stat&lt;/code&gt; 特殊ケース</target>
        </trans-unit>
        <trans-unit id="054fe1a81b97f07c540d64d60a64f4af0bb07c47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;our&lt;/code&gt; subroutines</source>
          <target state="translated">&lt;code&gt;our&lt;/code&gt; サブルーチン</target>
        </trans-unit>
        <trans-unit id="0ae20ae53e9337f9b303890d15d0d3b627b7ddae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overrideOut&lt;/code&gt; can perform it algorithmically. This parameter works like &lt;code&gt;overrideCJK&lt;/code&gt; , so see there for examples.</source>
          <target state="translated">&lt;code&gt;overrideOut&lt;/code&gt; はそれをアルゴリズム的に実行できます。このパラメーターは &lt;code&gt;overrideCJK&lt;/code&gt; のように機能するので、例を参照してください。</target>
        </trans-unit>
        <trans-unit id="c34a051850d5e5b37bbb57119a0f770afe423277" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overrideOut&lt;/code&gt; can perform it algorithmically. This parameter works like &lt;code&gt;overrideCJK&lt;/code&gt;, so see there for examples.</source>
          <target state="translated">&lt;code&gt;overrideOut&lt;/code&gt; はそれをアルゴリズム的に実行できます。このパラメーターは &lt;code&gt;overrideCJK&lt;/code&gt; のように機能するため、例についてはこちらを参照してください。</target>
        </trans-unit>
        <trans-unit id="018daadf3e8c264d84f963dafe9df6707fe0f4db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; contains the pointer to the UTF-8 string encoding the character that is being converted. This routine assumes that the character at &lt;code&gt;p&lt;/code&gt; is well-formed.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; には、変換される文字をエンコードするUTF-8文字列へのポインタが含まれます。このルーチンは、 &lt;code&gt;p&lt;/code&gt; の文字が整形式であることを前提としています。</target>
        </trans-unit>
        <trans-unit id="c11c698ac9fefb8ffaa9a6b715e3d39e29a9a669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pTHX_&lt;/code&gt; is one of a number of macros (in</source>
          <target state="translated">&lt;code&gt;pTHX_&lt;/code&gt; は、いくつかのマクロ（</target>
        </trans-unit>
        <trans-unit id="57a1669a25a493393b0012e07977a3873f7b6b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; are two functions for transforming data according to a user-defined template, between the guarded way Perl stores values and some well-defined representation as might be required in the environment of a Perl program. Unfortunately, they're also two of the most misunderstood and most often overlooked functions that Perl provides. This tutorial will demystify them for you.</source>
          <target state="translated">&lt;code&gt;pack&lt;/code&gt; と &lt;code&gt;unpack&lt;/code&gt; は、Perlが値を格納する保護された方法と、Perlプログラムの環境で必要となる可能性のある明確に定義された表現との間で、ユーザー定義のテンプレートに従ってデータを変換するための2つの関数です。残念ながら、これらはPerlが提供する最も誤解され、最も見過ごされがちな機能の2つでもあります。このチュートリアルでは、それらをわかりやすく説明します。</target>
        </trans-unit>
        <trans-unit id="9201b2c58a06704aec378eb824713ef3409725ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package Foo VERSION&lt;/code&gt; is also checked for. The first version declaration found is used, but this may change as it differs from how Perl does it.</source>
          <target state="translated">&lt;code&gt;package Foo VERSION&lt;/code&gt; もチェックされます。見つかった最初のバージョン宣言が使用されますが、Perlの方法とは異なるため、これは変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="0ccf88eb3a10e91884da8fd743ed1839362f4282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; is the parent node of the sibling chain. It may passed as &lt;code&gt;NULL&lt;/code&gt; if the splicing doesn't affect the first or last op in the chain.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; は、兄弟チェーンの親ノードです。スプライシングがチェーンの最初または最後の操作に影響を与えない場合は、 &lt;code&gt;NULL&lt;/code&gt; として渡される可能性があります。</target>
        </trans-unit>
        <trans-unit id="379c431d9679f0fc2a97bd40d54e5841f92e2796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent&lt;/code&gt; points to the rest of the &lt;code&gt;refcounted_he&lt;/code&gt; chain to be attached to the new &lt;code&gt;refcounted_he&lt;/code&gt;. This function takes ownership of one reference to &lt;code&gt;parent&lt;/code&gt;, and returns one reference to the new &lt;code&gt;refcounted_he&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; は、新しい &lt;code&gt;refcounted_he&lt;/code&gt; にアタッチされる &lt;code&gt;refcounted_he&lt;/code&gt; チェーンの残りの部分を指します。この関数は、 &lt;code&gt;parent&lt;/code&gt; への1つの参照の所有権を取得し、新しい &lt;code&gt;refcounted_he&lt;/code&gt; への1つの参照を返します。</target>
        </trans-unit>
        <trans-unit id="c2417866550bcf9c7016549d6b067e3913e71d22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pat&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; are a sprintf-style format pattern and encapsulated argument list, respectively. These are used to generate a string message. If the message does not end with a newline, then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pat&lt;/code&gt; と &lt;code&gt;args&lt;/code&gt; は、それぞれsprintfスタイルのフォーマットパターンとカプセル化された引数リストです。これらは、文字列メッセージを生成するために使用されます。メッセージが改行で終わっていない場合は、&lt;a href=&quot;#mess_sv&quot;&gt;「mess_sv」で&lt;/a&gt;説明されているように、コード内の現在の場所を示す形でメッセージが拡張されます。</target>
        </trans-unit>
        <trans-unit id="dc595ac7a8786ad6d7a447f65fc9b523ab4209c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pat&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; are a sprintf-style format pattern and encapsulated argument list. These are used to generate a string message. If the message does not end with a newline, then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;&quot;mess_sv&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pat&lt;/code&gt; と &lt;code&gt;args&lt;/code&gt; は、sprintfスタイルのフォーマットパターンであり、カプセル化された引数リストです。これらは、文字列メッセージを生成するために使用されます。メッセージが改行で終わっていない場合は、&lt;a href=&quot;#mess_sv&quot;&gt;「mess_sv」で&lt;/a&gt;説明されているように、コード内の現在の場所を示す形でメッセージが拡張されます。</target>
        </trans-unit>
        <trans-unit id="5576100284e538d6e57d1d31b55e0b0abbd897e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pat&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; are a sprintf-style format pattern and encapsulated argument list. These are used to generate a string message. If the message does not end with a newline, then it will be extended with some indication of the current location in the code, as described for &lt;a href=&quot;#mess_sv&quot;&gt;mess_sv&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;pat&lt;/code&gt; および &lt;code&gt;args&lt;/code&gt; は、sprintfスタイルのフォーマットパターンおよびカプセル化された引数リストです。これらは文字列メッセージを生成するために使用されます。メッセージが改行で終わっていない場合は、&lt;a href=&quot;#mess_sv&quot;&gt;mess_svで&lt;/a&gt;説明されているように、コード内の現在の場所を示す何らかのメッセージで拡張されます。</target>
        </trans-unit>
        <trans-unit id="cad345d37c7dffa7c8f4f00e258549543dd5b66f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - equivalent to &lt;code&gt;$stream_location&lt;/code&gt; , sets the stream location. Defaults to standard Unix location, or &lt;code&gt;_PATH_LOG&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -に相当 &lt;code&gt;$stream_location&lt;/code&gt; 、ストリームの位置を設定します。デフォルトは標準のUnixロケーション、または &lt;code&gt;_PATH_LOG&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3fc6e62bba2086e4237ad6cc1a42a60f5fcb785e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - equivalent to &lt;code&gt;$stream_location&lt;/code&gt;, sets the stream location. Defaults to standard Unix location, or &lt;code&gt;_PATH_LOG&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -に相当 &lt;code&gt;$stream_location&lt;/code&gt; 、ストリームの位置を設定します。デフォルトは標準のUnixの場所、または &lt;code&gt;_PATH_LOG&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d2b3947fbb2cde48071637c1ce2c9e11e4a635a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pattern&lt;/code&gt; would match if anchored at the given position, and it matches</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 指定された位置にアンカーされている場合、パターンは一致し、一致します</target>
        </trans-unit>
        <trans-unit id="4c0897f276ad7729fd94fc3034bc703086540690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;peer&lt;/code&gt; &amp;mdash; Override host resolution and force all connections to go only to a specific peer address, regardless of the URL of the request. This will include any redirections! This options should be used with extreme caution (e.g. debugging or very special circumstances). It can be given as either a scalar or a code reference that will receive the hostname and whose response will be taken as the address.</source>
          <target state="translated">&lt;code&gt;peer&lt;/code&gt; &amp;mdash;ホストの解決をオーバーライドし、リクエストのURLに関係なく、すべての接続を特定のピアアドレスにのみ送信するように強制します。これにはリダイレクトが含まれます！このオプションは、細心の注意を払って使用する必要があります（たとえば、デバッグや非常に特殊な状況）。これは、ホスト名を受け取り、その応答がアドレスとして扱われるスカラーまたはコード参照として指定できます。</target>
        </trans-unit>
        <trans-unit id="2c80fd8c8f76edfb1295d8c13bd88d5a82fdd6e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perl_clone&lt;/code&gt; takes these flags as parameters:</source>
          <target state="translated">&lt;code&gt;perl_clone&lt;/code&gt; は、これらのフラグをパラメーターとして受け取ります。</target>
        </trans-unit>
        <trans-unit id="363c3b041828e47609537312596fa6f5289a7cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perl_parse&lt;/code&gt; is actually a wrapper around &lt;code&gt;S_parse_body&lt;/code&gt; , as defined in</source>
          <target state="translated">&lt;code&gt;perl_parse&lt;/code&gt; は、実際のラッパです &lt;code&gt;S_parse_body&lt;/code&gt; で定義されているように、</target>
        </trans-unit>
        <trans-unit id="db5ef3e7bb38cef785d8a05800afe7ac86d72bfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perl_parse&lt;/code&gt; is actually a wrapper around &lt;code&gt;S_parse_body&lt;/code&gt;, as defined in</source>
          <target state="translated">&lt;code&gt;perl_parse&lt;/code&gt; は、実際のラッパです &lt;code&gt;S_parse_body&lt;/code&gt; で定義されているように、</target>
        </trans-unit>
        <trans-unit id="f98336dcec32bd23880560249be78854ad195f7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; also searches directories specified by the &lt;code&gt;PERL5LIB&lt;/code&gt; (or &lt;code&gt;PERLLIB&lt;/code&gt; if &lt;code&gt;PERL5LIB&lt;/code&gt; is not defined) and &lt;code&gt;PATH&lt;/code&gt; environment variables. (The latter is so that embedded pods for executables, such as &lt;code&gt;perldoc&lt;/code&gt; itself, are available.)</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; は、 &lt;code&gt;PERL5LIB&lt;/code&gt; （または &lt;code&gt;PERL5LIB&lt;/code&gt; が定義されていない場合は &lt;code&gt;PERLLIB&lt;/code&gt; ）と &lt;code&gt;PATH&lt;/code&gt; 環境変数で指定されたディレクトリも検索します。（後者は、 &lt;code&gt;perldoc&lt;/code&gt; 自体などの実行可能ファイルの埋め込みポッドが使用できるようにするためです。）</target>
        </trans-unit>
        <trans-unit id="845299ed0481bf59a19162b1d7d0d6134de3b1f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; is also a useful tool for browsing information contained in the documentation, especially in conjunction with a pager like &lt;code&gt;less&lt;/code&gt; (recent versions of which have Windows support). You may have to set the PAGER environment variable to use a specific pager. &quot;perldoc -f foo&quot; will print information about the perl operator &quot;foo&quot;.</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; は、ドキュメントに含まれる情報を閲覧するための便利なツールでもあり、特に &lt;code&gt;less&lt;/code&gt; のようなポケットベル（最近のバージョンではWindowsをサポートしています）と組み合わせて使用​​すると便利です。特定のポケットベルを使用するには、PAGER環境変数を設定する必要がある場合があります。「perldoc -f foo」は、perl演算子「foo」に関する情報を出力します。</target>
        </trans-unit>
        <trans-unit id="08ef34f009dc3c8dfa646a2efd211a1e35cb6acf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; will use, in order of preference, the pager defined in &lt;code&gt;PERLDOC_PAGER&lt;/code&gt; , &lt;code&gt;MANPAGER&lt;/code&gt; , or &lt;code&gt;PAGER&lt;/code&gt; before trying to find a pager on its own. (&lt;code&gt;MANPAGER&lt;/code&gt; is not used if &lt;code&gt;perldoc&lt;/code&gt; was told to display plain text or unformatted pod.)</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; は、優先順位 &lt;code&gt;PERLDOC_PAGER&lt;/code&gt; 、 &lt;code&gt;MANPAGER&lt;/code&gt; 、MANPAGER、または &lt;code&gt;PAGER&lt;/code&gt; で定義されたページャーを使用してから、それ自体でページャーを見つけようとします。（ &lt;code&gt;perldoc&lt;/code&gt; がプレーンテキストまたはフォーマットされていないポッドを表示するように指示された場合、 &lt;code&gt;MANPAGER&lt;/code&gt; は使用されません。）</target>
        </trans-unit>
        <trans-unit id="cd549af6c14da6fe8e46fcc76ca0b3c072f19abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perldoc&lt;/code&gt; will use, in order of preference, the pager defined in &lt;code&gt;PERLDOC_PAGER&lt;/code&gt;, &lt;code&gt;MANPAGER&lt;/code&gt;, or &lt;code&gt;PAGER&lt;/code&gt; before trying to find a pager on its own. (&lt;code&gt;MANPAGER&lt;/code&gt; is not used if &lt;code&gt;perldoc&lt;/code&gt; was told to display plain text or unformatted pod.)</source>
          <target state="translated">&lt;code&gt;perldoc&lt;/code&gt; は、 &lt;code&gt;PERLDOC_PAGER&lt;/code&gt; 、 &lt;code&gt;MANPAGER&lt;/code&gt; 、または &lt;code&gt;PAGER&lt;/code&gt; で定義されたページャーを優先順に使用してから、それ自体でページャーを検索しようとします。（ &lt;code&gt;perldoc&lt;/code&gt; がプレーンテキストまたはフォーマットされていないポッドを表示するように指示された場合、 &lt;code&gt;MANPAGER&lt;/code&gt; は使用されません。）</target>
        </trans-unit>
        <trans-unit id="2849be26c68f462d616e31ee18a116b7064450b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perror&lt;/code&gt; - Write the message to standard error output as well to the system log (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22).</source>
          <target state="translated">&lt;code&gt;perror&lt;/code&gt; -メッセージを標準エラー出力とシステムログ（ &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22で追加）に書き込みます。</target>
        </trans-unit>
        <trans-unit id="49676e81e4f423a3b3f261058e81e4680c24804d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perror&lt;/code&gt; - Write the message to standard error output as well to the system log. Added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.22.</source>
          <target state="translated">&lt;code&gt;perror&lt;/code&gt; -メッセージを標準エラー出力とシステムログに書き込みます。 &lt;code&gt;Sys::Syslog&lt;/code&gt; 追加されました。</target>
        </trans-unit>
        <trans-unit id="1c7d63b44a36159d8e1d4d4335b3daf634e99588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pid&lt;/code&gt; - Include PID with each message.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; -各メッセージにPIDを含めます。</target>
        </trans-unit>
        <trans-unit id="809c4b7facc3eb780b2058815a2dcb35dc65ca46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;plan&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;plan&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="fdb276cbb4ba5fc7d3b0e940bad1ed0150bce045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; - sets the TCP or UDP port to connect to. Defaults to the first standard syslog port available on the system.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; -に接続するためにTCPやUDPポートを設定します。デフォルトは、システムで使用可能な最初の標準syslogポートです。</target>
        </trans-unit>
        <trans-unit id="baac547aeaff5393799b5b0cafcc4eaeb65a4579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postderef&lt;/code&gt; - allow the use of postfix dereferencing expressions, including in interpolating strings</source>
          <target state="translated">&lt;code&gt;postderef&lt;/code&gt; -文字列の補間を含め、postfix逆参照式の使用を許可します</target>
        </trans-unit>
        <trans-unit id="81ec803c3dc008a3da16774edaa8dc9ffe50879f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postok&lt;/code&gt; will return</source>
          <target state="translated">&lt;code&gt;postok&lt;/code&gt; が戻ります</target>
        </trans-unit>
        <trans-unit id="2d01a0fab20d0ff1f998f75c0cb1da085f4f2052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pragma&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;pragma&lt;/code&gt; メソッド</target>
        </trans-unit>
        <trans-unit id="826665825a05ce6bea816703958f3affe8424f0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision()&lt;/code&gt; sets or gets the global or local precision, aka at which digit before or after the dot to round all results. A set global precision also applies to all newly created numbers!</source>
          <target state="translated">&lt;code&gt;precision()&lt;/code&gt; は、グローバルまたはローカルの精度を設定または取得します。これは、すべての結果を丸めるための、ドットの前または後の桁のことです。設定されたグローバル精度は、新しく作成されたすべての数値にも適用されます。</target>
        </trans-unit>
        <trans-unit id="7976cc4186db8951c059e488dda4302f51af45d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precomp&lt;/code&gt;&lt;code&gt;prelen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;precomp&lt;/code&gt;&lt;code&gt;prelen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a05fc7c2ec9c9f8d0b33a7a4310351fcbd1f41e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix&lt;/code&gt; means: where to install the resulting perl library. Giving correct prefix you may avoid the need to specify &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; , see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; は、結果のperlライブラリをインストールする場所を意味します。ユーザーが指定する必要が回避することができる正しい接頭辞を与える &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; を参照してください&lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIXを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1f60f3b80a6c51144983ea914c0cd0a4c743661" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix&lt;/code&gt; means: where to install the resulting perl library. Giving correct prefix you may avoid the need to specify &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt;, see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;&quot;&lt;code&gt;PERLLIB_PREFIX&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; は、結果のperlライブラリをインストールする場所を意味します。正しいプレフィックスを &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; 、PERLLIB_PREFIXを指定する必要がなくなる場合があります。&lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;「 &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; 」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0aaf8a737c0d23218299cfdec2230f7a8f0c080c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pregexec()&lt;/code&gt; is the main entry point for running a regex. It contains support for initialising the regex interpreter's state, running &lt;code&gt;re_intuit_start()&lt;/code&gt; if needed, and running the interpreter on the string from various start positions as needed. When it is necessary to use the regex interpreter &lt;code&gt;pregexec()&lt;/code&gt; calls &lt;code&gt;regtry()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;pregexec()&lt;/code&gt; は、正規表現を実行するための主要なエントリポイントです。これには、正規表現インタープリターの状態の初期化、必要に応じて &lt;code&gt;re_intuit_start()&lt;/code&gt; の実行、および必要に応じてさまざまな開始位置からストリングに対してインタープリターを実行するためのサポートが含まれています。regexインタープリターを使用する必要がある場合、 &lt;code&gt;pregexec()&lt;/code&gt; は &lt;code&gt;regtry()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="cff59e34d92eb388384f7cee854ef39563b37c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pregexec()&lt;/code&gt; is the main entry point for running a regex. It contains support for initialising the regex interpreter's state, running &lt;code&gt;re_intuit_start()&lt;/code&gt; if needed, and running the interpreter on the string from various start positions as needed. When it is necessary to use the regex interpreter &lt;code&gt;pregexec()&lt;/code&gt; calls &lt;code&gt;regtry()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pregexec()&lt;/code&gt; は、正規表現を実行するための主要なエントリポイントです。正規表現インタープリターの状態を初期化し、必要に応じて &lt;code&gt;re_intuit_start()&lt;/code&gt; を実行し、必要に応じてさまざまな開始位置から文字列に対してインタープリターを実行するためのサポートが含まれています。正規表現インタープリターを使用する必要がある場合、 &lt;code&gt;pregexec()&lt;/code&gt; は &lt;code&gt;regtry()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5650857d710e489383ebef502cde7faf3c94b385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess&lt;/code&gt; is performed before &lt;code&gt;normalization&lt;/code&gt; (if defined).</source>
          <target state="translated">&lt;code&gt;preprocess&lt;/code&gt; は、 &lt;code&gt;normalization&lt;/code&gt; 前に実行されます（定義されている場合）。</target>
        </trans-unit>
        <trans-unit id="27df3d04b2fd880e0c0f8504356cc9a3aee349a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does know about the Perl extensions to Unicode properties, such as &lt;code&gt;Any&lt;/code&gt; and &lt;code&gt;XPosixAlpha&lt;/code&gt; , and the single form equivalents to Unicode properties such as &lt;code&gt;XDigit&lt;/code&gt; , &lt;code&gt;Greek&lt;/code&gt; , &lt;code&gt;In_Greek&lt;/code&gt; , and &lt;code&gt;Is_Greek&lt;/code&gt; . The final example demonstrates that the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix is recognized for these extensions; it is needed to resolve ambiguities. For example, &lt;code&gt;prop_aliases('lc')&lt;/code&gt; returns the list &lt;code&gt;(&lt;a href=&quot;../functions/lc&quot;&gt;lc&lt;/a&gt;, Lowercase_Mapping)&lt;/code&gt; , but &lt;code&gt;prop_aliases('islc')&lt;/code&gt; returns &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; . This is because &lt;code&gt;islc&lt;/code&gt; is a Perl extension which is short for &lt;code&gt;General_Category=Cased Letter&lt;/code&gt; . The lists returned for the Perl extensions will not include the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix (whether or not the input had it) unless needed to resolve ambiguities, as shown in the &lt;code&gt;&quot;islc&quot;&lt;/code&gt; example, where the returned list had one element containing &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; , and the other without.</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; は、 &lt;code&gt;Any&lt;/code&gt; や &lt;code&gt;XPosixAlpha&lt;/code&gt; などのUnicodeプロパティに対するPerl拡張機能、および &lt;code&gt;XDigit&lt;/code&gt; 、 &lt;code&gt;Greek&lt;/code&gt; 、 &lt;code&gt;In_Greek&lt;/code&gt; 、および &lt;code&gt;Is_Greek&lt;/code&gt; などのUnicodeプロパティに対応する単一のフォームを認識しています。最後の例は、 &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; 接頭辞がこれらの拡張機能で認識されることを示しています。あいまいさを解決するために必要です。たとえば、 &lt;code&gt;prop_aliases('lc')&lt;/code&gt; はリスト &lt;code&gt;(&lt;a href=&quot;../functions/lc&quot;&gt;lc&lt;/a&gt;, Lowercase_Mapping)&lt;/code&gt; &lt;code&gt;prop_aliases('islc')&lt;/code&gt; 返しますが、prop_aliases（ 'islc'）は &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 返します。これは、ある &lt;code&gt;islc&lt;/code&gt; &lt;code&gt;General_Category=Cased Letter&lt;/code&gt; の短縮形であるPerl拡張です。返されたリストに &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; を含む要素が1 &lt;code&gt;&quot;islc&quot;&lt;/code&gt; 例に示されているように、あいまいさを解決する必要がない限り、Perl拡張に対して返されるリストには &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; 接頭辞が含まれません（入力にそれがあったかどうかは関係ありません）。、および他のなし。</target>
        </trans-unit>
        <trans-unit id="6745986d559f8896e412c863591b2be2488937a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does know about the Perl extensions to Unicode properties, such as &lt;code&gt;Any&lt;/code&gt; and &lt;code&gt;XPosixAlpha&lt;/code&gt;, and the single form equivalents to Unicode properties such as &lt;code&gt;XDigit&lt;/code&gt;, &lt;code&gt;Greek&lt;/code&gt;, &lt;code&gt;In_Greek&lt;/code&gt;, and &lt;code&gt;Is_Greek&lt;/code&gt;. The final example demonstrates that the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix is recognized for these extensions; it is needed to resolve ambiguities. For example, &lt;code&gt;prop_aliases('lc')&lt;/code&gt; returns the list &lt;code&gt;(lc, Lowercase_Mapping)&lt;/code&gt;, but &lt;code&gt;prop_aliases('islc')&lt;/code&gt; returns &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt;. This is because &lt;code&gt;islc&lt;/code&gt; is a Perl extension which is short for &lt;code&gt;General_Category=Cased Letter&lt;/code&gt;. The lists returned for the Perl extensions will not include the &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; prefix (whether or not the input had it) unless needed to resolve ambiguities, as shown in the &lt;code&gt;&quot;islc&quot;&lt;/code&gt; example, where the returned list had one element containing &lt;code&gt;&quot;Is_&quot;&lt;/code&gt;, and the other without.</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; は、 &lt;code&gt;Any&lt;/code&gt; や &lt;code&gt;XPosixAlpha&lt;/code&gt; などのUnicodeプロパティに対するPerl拡張機能と、 &lt;code&gt;XDigit&lt;/code&gt; 、 &lt;code&gt;Greek&lt;/code&gt; 、 &lt;code&gt;In_Greek&lt;/code&gt; 、Is_GreekなどのUnicodeプロパティに相当する単一形式 &lt;code&gt;Is_Greek&lt;/code&gt; ます。最後の例は、これらの拡張子に対して &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; プレフィックスが認識されることを示しています。あいまいさを解決するために必要です。たとえば、 &lt;code&gt;prop_aliases('lc')&lt;/code&gt; はリスト &lt;code&gt;(lc, Lowercase_Mapping)&lt;/code&gt; &lt;code&gt;prop_aliases('islc')&lt;/code&gt; 返しますが、prop_aliases（ 'islc'）は &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 返します。これは、 &lt;code&gt;islc&lt;/code&gt; がPerl拡張機能であるためです。 &lt;code&gt;General_Category=Cased Letter&lt;/code&gt; 。Perl拡張機能に対して返されるリストには、 &lt;code&gt;&quot;islc&quot;&lt;/code&gt; 例に示すように、あいまいさを解決する必要がない限り、 &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; プレフィックスは含まれません（入力にプレフィックスがあるかどうかは関係ありません） &lt;code&gt;&quot;Is_&quot;&lt;/code&gt; 、および他のなし。</target>
        </trans-unit>
        <trans-unit id="84247d6d8b5f4deb4e612831eb63153e1c94e8c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those. Likewise for Perl internal properties, with the exception of &quot;Perl_Decimal_Digit&quot; which it does know about (and which is documented below in &lt;a href=&quot;#prop_invmap()&quot;&gt;prop_invmap()&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出された場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。同様に、Perlの内部プロパティについても、Perlの知っている &quot;Perl_Decimal_Digit&quot;を除きます（これは、以下の&lt;a href=&quot;#prop_invmap()&quot;&gt;prop_invmap（）に&lt;/a&gt;記載されています）。</target>
        </trans-unit>
        <trans-unit id="7953418e303ebec2e000b3657eaba392401f0f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those. Likewise for Perl internal properties, with the exception of &quot;Perl_Decimal_Digit&quot; which it does know about (and which is documented below in &lt;a href=&quot;#prop_invmap%28%29&quot;&gt;&quot;prop_invmap()&quot;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;prop_aliases&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出されると &lt;code&gt;undef&lt;/code&gt; を返します。Perlの内部プロパティについても同様ですが、知っている「Perl_Decimal_Digit」（および以下の&lt;a href=&quot;#prop_invmap%28%29&quot;&gt;「prop_invmap（）」に&lt;/a&gt;記載されています）を除きます。</target>
        </trans-unit>
        <trans-unit id="aaf618289fe95f5c6591702e1bf3bea4922c7495" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invlist&lt;/code&gt; does not know about any user-defined nor Perl internal-only properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invlist&lt;/code&gt; はユーザー定義のプロパティもPerlの内部のみのプロパティも認識せず、これらのいずれかで呼び出された場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1638bd6528e8315c734f262e578bda41a74ac380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invlist&lt;/code&gt; does not know about any user-defined nor Perl internal-only properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invlist&lt;/code&gt; は、ユーザー定義のプロパティもPerlの内部専用プロパティも認識せず、それらのいずれかで呼び出された場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9f5aeeb87bafc369250d5ed39e16fa0a2f0af855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invlist&lt;/code&gt; returns an inversion list (described below) that defines all the code points for the binary Unicode property (or &quot;property=value&quot; pair) given by the input parameter string:</source>
          <target state="translated">&lt;code&gt;prop_invlist&lt;/code&gt; は、入力パラメーター文字列によって指定されたバイナリUnicodeプロパティ（または &quot;property = value&quot;ペア）のすべてのコードポイントを定義する反転リスト（以下で説明）を返します。</target>
        </trans-unit>
        <trans-unit id="fa989c8b4b5a95be8ec4aa8facd791849d814072" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出された場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f434f40fc0c8cfb7f61886611000f3ab0f7f5797" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出されると &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="46b5d2b41a100d477c28d52672a39b5906a388f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; is called with the name of the desired property. The name is loosely matched, meaning that differences in case, white-space, hyphens, and underscores are not meaningful (except for the trailing underscore in the old-form grandfathered-in property &lt;code&gt;&quot;L_&quot;&lt;/code&gt; , which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt; , or even better, &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; は、目的のプロパティの名前で呼び出されます。名前は大まかに一致しています。つまり、大文字、小文字、ハイフン、およびアンダースコアの違いは意味がありません（古い形式の &lt;code&gt;&quot;L_&quot;&lt;/code&gt; プロパティ&quot;L_&quot;の末尾のアンダースコアは除きますが、 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; と書く方が適切です）。、またはさらに良い、 &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="703bfeb4db55845afb59c57463ce2882efc9ee21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; is called with the name of the desired property. The name is loosely matched, meaning that differences in case, white-space, hyphens, and underscores are not meaningful (except for the trailing underscore in the old-form grandfathered-in property &lt;code&gt;&quot;L_&quot;&lt;/code&gt;, which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt;, or even better, &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; は、目的のプロパティの名前で呼び出されます。名前は大まかに一致しています。つまり、大文字と小文字、空白、ハイフン、アンダースコアの違いは意味がありません（古い形式の &lt;code&gt;&quot;L_&quot;&lt;/code&gt; 権プロパティ「L_」の末尾の下線を除き、 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; と表記する方が適切です）。、またはさらに良いことに、 &lt;code&gt;&quot;Gc=LC&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3074dd56d5e2ce626fd458ce5170ea74b97c7854" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_invmap&lt;/code&gt; is used to get the complete mapping definition for a property, in the form of an inversion map. An inversion map consists of two parallel arrays. One is an ordered list of code points that mark range beginnings, and the other gives the value (or mapping) that all code points in the corresponding range have.</source>
          <target state="translated">&lt;code&gt;prop_invmap&lt;/code&gt; は、反転マップの形式で、プロパティの完全なマッピング定義を取得するために使用されます。反転マップは、2つの並列配列で構成されています。1つは範囲の始まりを示すコードポイントの順序付きリストで、もう1つは対応する範囲のすべてのコードポイントが持つ値（またはマッピング）を示します。</target>
        </trans-unit>
        <trans-unit id="65de781e7dc1c905cffccb28d15af3c75f99eaef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_value_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_value_aliases&lt;/code&gt; はユーザー定義のプロパティを認識していないため、これらのプロパティのいずれかで呼び出されると &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d87971a864bcd8a658d6ec337955f9b90543f14b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_value_aliases&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_value_aliases&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出された場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="13aedd3349055ca063b2a3be5fc3130232f4fe52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_values&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_values&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出された場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aa6a8976393f856a6612e00a4cc756fe33e448f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prop_values&lt;/code&gt; does not know about any user-defined properties, and will return &lt;code&gt;undef&lt;/code&gt; if called with one of those.</source>
          <target state="translated">&lt;code&gt;prop_values&lt;/code&gt; はユーザー定義のプロパティを認識せず、それらのいずれかで呼び出された場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0ddc272f36f5e49350c5abcefb9763e22470ad34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proto&lt;/code&gt; specifies the protocol to use when doing a ping. The current choices are &quot;tcp&quot;, &quot;udp&quot;, &quot;icmp&quot;, &quot;icmpv6&quot;, &quot;stream&quot;, &quot;syn&quot;, or &quot;external&quot;. The default is &quot;tcp&quot;.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; は、pingを実行するときに使用するプロトコルを指定します。現在の選択肢は、「tcp」、「udp」、「icmp」、「icmpv6」、「stream」、「syn」、または「external」です。デフォルトは「tcp」です。</target>
        </trans-unit>
        <trans-unit id="6f4d3b7247a55fb61841c2cd9220df8051e3eff0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proto&lt;/code&gt; specifies the subroutine's prototype, unless one is supplied as an attribute (see below). If &lt;code&gt;proto&lt;/code&gt; is null, then the subroutine will not have a prototype. If &lt;code&gt;proto&lt;/code&gt; is non-null, it must point to a &lt;code&gt;const&lt;/code&gt; op whose value is a string, and the subroutine will have that string as its prototype. If a prototype is supplied as an attribute, the attribute takes precedence over &lt;code&gt;proto&lt;/code&gt;, but in that case &lt;code&gt;proto&lt;/code&gt; should preferably be null. In any case, &lt;code&gt;proto&lt;/code&gt; is consumed by this function.</source>
          <target state="translated">&lt;code&gt;proto&lt;/code&gt; は、属性として指定されていない限り、サブルーチンのプロトタイプを指定します（以下を参照）。 &lt;code&gt;proto&lt;/code&gt; がnullの場合、サブルーチンにはプロトタイプがありません。 &lt;code&gt;proto&lt;/code&gt; がnull以外の場合、値が文字列である &lt;code&gt;const&lt;/code&gt; opを指している必要があり、サブルーチンはその文字列をプロトタイプとして持ちます。プロトタイプが属性として提供されている場合、属性は &lt;code&gt;proto&lt;/code&gt; よりも優先されますが、その場合、 &lt;code&gt;proto&lt;/code&gt; はnullであることが望ましいです。いずれにせよ、 &lt;code&gt;proto&lt;/code&gt; はこの関数によって消費されます。</target>
        </trans-unit>
        <trans-unit id="025e4acec1a7e67356fe238218a8a736c87f0ad8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protocol&lt;/code&gt; - If this field exists, it is the protocol of the response such as HTTP/1.0 or HTTP/1.1</source>
          <target state="translated">&lt;code&gt;protocol&lt;/code&gt; -このフィールドが存在する場合は、HTTP /1.0やHTTP / 1.1などの応答のプロトコルです。</target>
        </trans-unit>
        <trans-unit id="e345aaf2d0965411b10af684de0165f324819cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protosv&lt;/code&gt; supplies the subroutine prototype to be applied to the call, or indicates that there is no prototype. It may be a normal scalar, in which case if it is defined then the string value will be used as a prototype, and if it is undefined then there is no prototype. Alternatively, for convenience, it may be a subroutine object (a &lt;code&gt;CV*&lt;/code&gt; that has been cast to &lt;code&gt;SV*&lt;/code&gt;), of which the prototype will be used if it has one. The prototype (or lack thereof) supplied, in whichever form, does not need to match the actual callee referenced by the op tree.</source>
          <target state="translated">&lt;code&gt;protosv&lt;/code&gt; は、呼び出しに適用されるサブルーチンプロトタイプを提供するか、プロトタイプがないことを示します。通常のスカラーである可能性があります。その場合、定義されている場合は文字列値がプロトタイプとして使用され、定義されていない場合はプロトタイプはありません。あるいは、便宜上、それはサブルーチンオブジェクト（ &lt;code&gt;SV*&lt;/code&gt; キャストされた &lt;code&gt;CV*&lt;/code&gt; *）である場合があり、プロトタイプがあればそれが使用されます。提供されるプロトタイプ（またはその欠如）は、どちらの形式でも、opツリーによって参照される実際の呼び出し先と一致する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ff45ab6432c237367d478b2fc2feb55b5064d36b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protosv&lt;/code&gt; supplies the subroutine prototype to be applied to the call. It may be a normal defined scalar, of which the string value will be used. Alternatively, for convenience, it may be a subroutine object (a &lt;code&gt;CV*&lt;/code&gt; that has been cast to &lt;code&gt;SV*&lt;/code&gt;) which has a prototype. The prototype supplied, in whichever form, does not need to match the actual callee referenced by the op tree.</source>
          <target state="translated">&lt;code&gt;protosv&lt;/code&gt; は、呼び出しに適用されるサブルーチンプロトタイプを提供します。これは通常の定義済みスカラーである可能性があり、その文字列値が使用されます。あるいは、便宜上、プロトタイプを持つサブルーチンオブジェクト（ &lt;code&gt;SV*&lt;/code&gt; キャストされた &lt;code&gt;CV*&lt;/code&gt; *）の場合もあります。提供されるプロトタイプは、どちらの形式でも、opツリーによって参照される実際の呼び出し先と一致する必要はありません。</target>
        </trans-unit>
        <trans-unit id="bda9cda944e40e411f22f900e42edf69ce3fb4e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy&lt;/code&gt; &amp;mdash; URL of a generic proxy server for both HTTP and HTTPS connections (default is &lt;code&gt;$ENV{all_proxy}&lt;/code&gt; &amp;mdash; if set)</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; &amp;mdash; HTTP接続とHTTPS接続の両方の汎用プロキシサーバーのURL（デフォルトは &lt;code&gt;$ENV{all_proxy}&lt;/code&gt; &amp;mdash;設定されている場合）</target>
        </trans-unit>
        <trans-unit id="dd4cc0a06278943ac41398dc99f108f246fb54a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, and &lt;code&gt;splice&lt;/code&gt; cannot be deferred. When you perform one of these operations, any deferred data is written to the file and the operation is performed immediately. This may change in a future version.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;shift&lt;/code&gt; 、 &lt;code&gt;unshift&lt;/code&gt; 、および &lt;code&gt;splice&lt;/code&gt; は延期できません。これらの操作のいずれかを実行すると、遅延データがファイルに書き込まれ、操作がすぐに実行されます。これは将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="afae59394fcb0c2c8ba7fce697eedb4d4f7b0ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr/pattern/msixpodualn&lt;/code&gt; lets you store a regex in a variable, or pass one around. Modifiers as for &lt;code&gt;m//&lt;/code&gt;, and are stored within the regex.</source>
          <target state="translated">&lt;code&gt;qr/pattern/msixpodualn&lt;/code&gt; を使用すると、正規表現を変数に格納したり、正規表現を渡したりできます。 &lt;code&gt;m//&lt;/code&gt; 修飾子、および正規表現内に格納されます。</target>
        </trans-unit>
        <trans-unit id="8acb95a5fba19d0ac89c9aa75acbca0f4c389ed0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr&lt;/code&gt; must return a compiled regexp, or a ref to a compiled regexp (such as &lt;code&gt;qr//&lt;/code&gt; returns), and any further overloading on the return value will be ignored.</source>
          <target state="translated">&lt;code&gt;qr&lt;/code&gt; は、コンパイルされた正規表現、またはコンパイルされた正規表現への参照（ &lt;code&gt;qr//&lt;/code&gt; 返すなど）を返す必要があり、戻り値に対するそれ以上のオーバーロードは無視されます。</target>
        </trans-unit>
        <trans-unit id="e332d3a9c72cce75d77414d7900c29b799b64b26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quadmath_format_needed()&lt;/code&gt; returns true if the &lt;code&gt;format&lt;/code&gt; string seems to contain at least one non-Q-prefixed &lt;code&gt;%[efgaEFGA]&lt;/code&gt; format specifier, or returns false otherwise.</source>
          <target state="translated">&lt;code&gt;quadmath_format_needed()&lt;/code&gt; は、 &lt;code&gt;format&lt;/code&gt; 文字列にQプレフィックスのない &lt;code&gt;%[efgaEFGA]&lt;/code&gt; フォーマット指定子が少なくとも1つ含まれていると思われる場合はtrueを返し、そうでない場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="fbf0fb739653e12e7a6a4c395c0a5d42c93032d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quadmath_format_valid()&lt;/code&gt; checks that the intended single spec looks sane: begins with &lt;code&gt;%&lt;/code&gt;, has only one &lt;code&gt;%&lt;/code&gt;, ends with &lt;code&gt;[efgaEFGA]&lt;/code&gt;, and has &lt;code&gt;Q&lt;/code&gt; before it. This is not a full &quot;printf syntax check&quot;, just the basics.</source>
          <target state="translated">&lt;code&gt;quadmath_format_valid()&lt;/code&gt; は、単一のスペックルックスが正気意図していることを確認：で始まる &lt;code&gt;%&lt;/code&gt; 、一つだけ持っている &lt;code&gt;%&lt;/code&gt; を、で終わる &lt;code&gt;[efgaEFGA]&lt;/code&gt; を、と持っている &lt;code&gt;Q&lt;/code&gt; をその前に。これは完全な「printf構文チェック」ではなく、基本的なものです。</target>
        </trans-unit>
        <trans-unit id="a3d83b784fb7fbf828698d133f5d9df87ff65ca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quadmath_snprintf()&lt;/code&gt; is very strict about its &lt;code&gt;format&lt;/code&gt; string and will fail, returning -1, if the format is invalid. It accepts exactly one format spec.</source>
          <target state="translated">&lt;code&gt;quadmath_snprintf()&lt;/code&gt; はその &lt;code&gt;format&lt;/code&gt; 文字列について非常に厳密であり、フォーマットが無効な場合は失敗し、-1を返します。正確に1つのフォーマット仕様を受け入れます。</target>
        </trans-unit>
        <trans-unit id="30c062a836b2a17ba1fed01a1ef5000f0f504308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;HighBit&lt;/code&gt;, &lt;code&gt;undefPrint&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;HighBit&lt;/code&gt;, &lt;code&gt;undefPrint&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e20f11d061f309c8e06e804fa973c7cd62bdffd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quotemeta()&lt;/code&gt; and &lt;code&gt;\Q&lt;/code&gt; are fully described in &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;&quot;quotemeta&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;quotemeta()&lt;/code&gt; と &lt;code&gt;\Q&lt;/code&gt; は&lt;a href=&quot;perlfunc#quotemeta&quot;&gt;、perlfuncの「quotemeta」で&lt;/a&gt;詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="7f5c4503b427b56019a1f3a486ec67152a932298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qx//&lt;/code&gt; can also be called like a function with &lt;a href=&quot;perlfunc#readpipe&quot;&gt;&quot;readpipe&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;qx//&lt;/code&gt; は&lt;a href=&quot;perlfunc#readpipe&quot;&gt;、perlfuncの「readpipe」を使用し&lt;/a&gt;た関数のように呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="95d2317779e8d3054fa2ce4aa172a9af30ee26ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qx&lt;/code&gt; (aka the backtick operator), &lt;code&gt;system&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;qx&lt;/code&gt; （別名バッククォート演算子）、 &lt;code&gt;system&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b59a52af9bb8b07d9a7e6951db46bf17370248d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rand($x)&lt;/code&gt; returns a number such that &lt;code&gt;0 &amp;lt;= rand($x) &amp;lt; $x&lt;/code&gt;. Thus what you want to have perl figure out is a random number in the range from 0 to the difference between your</source>
          <target state="translated">&lt;code&gt;rand($x)&lt;/code&gt; は、 &lt;code&gt;0 &amp;lt;= rand($x) &amp;lt; $x&lt;/code&gt; ような数値を返します。したがって、perlに把握させたいのは、0からの差までの範囲の乱数です。</target>
        </trans-unit>
        <trans-unit id="48fe37f0dcf25b4c9fbcdaa8fe00af0106f0a081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawdeflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;rawdeflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 予期します。</target>
        </trans-unit>
        <trans-unit id="3de78f1b73590498b86947f2d769c7f1f2a64a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawdeflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;rawdeflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを必要とします（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0e8c618e9a88333bd82066b9c07a4093fb94d4fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;rawinflate&lt;/code&gt; は、少なくとも2つのパラメータ &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 想定しています。</target>
        </trans-unit>
        <trans-unit id="6900770c7e3e9b0d226402924902ef0da9d825e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rawinflate&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;rawinflate&lt;/code&gt; は、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターを想定しています（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="be3e1d0c526ec4f08f4256e3d160e1ce60b273a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re_intuit_start()&lt;/code&gt; is responsible for handling start points and no-match optimisations as determined by the results of the analysis done by &lt;code&gt;study_chunk()&lt;/code&gt; (and described in &lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;&quot;Peep-hole Optimisation and Analysis&quot;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;re_intuit_start()&lt;/code&gt; は、 &lt;code&gt;study_chunk()&lt;/code&gt; によって実行された分析の結果（および&lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;「のぞき穴の最適化と分析」で&lt;/a&gt;説明）によって決定される開始点と不一致の最適化の処理を担当します。</target>
        </trans-unit>
        <trans-unit id="5b1f960c44856903d77b260a19d1e06dab18de4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re_intuit_start()&lt;/code&gt; is responsible for handling start points and no-match optimisations as determined by the results of the analysis done by &lt;code&gt;study_chunk()&lt;/code&gt; (and described in &lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;Peep-hole Optimisation and Analysis&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;re_intuit_start()&lt;/code&gt; は、 &lt;code&gt;study_chunk()&lt;/code&gt; によって行われた分析の結果によって決定された（そして、「&lt;a href=&quot;#Peep-hole-Optimisation-and-Analysis&quot;&gt;のぞき穴の最適化と分析」で&lt;/a&gt;説明されている）開始点と不一致最適化の処理を担当します。</target>
        </trans-unit>
        <trans-unit id="e9879c08ced97a0fc27f0387bd62c459097f0631" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;re_strict&lt;/code&gt; - enables strict mode in regular expressions</source>
          <target state="translated">&lt;code&gt;re_strict&lt;/code&gt; -正規表現で厳密モードを有効にします</target>
        </trans-unit>
        <trans-unit id="dc4d6f0e0e943c5446c9b9802362a19e836e3f0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read()&lt;/code&gt; reads characters and returns the number of characters. &lt;code&gt;seek()&lt;/code&gt; and &lt;code&gt;tell()&lt;/code&gt; operate on byte counts, as does &lt;code&gt;sysseek()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read()&lt;/code&gt; は文字を読み取り、文字数を返します。 &lt;code&gt;seek()&lt;/code&gt; と &lt;code&gt;tell()&lt;/code&gt; は、 &lt;code&gt;sysseek()&lt;/code&gt; と同様に、バイトカウントで動作します。</target>
        </trans-unit>
        <trans-unit id="c22e31c7f0f9aa65c05ce98460ad154ac12527a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readdir&lt;/code&gt;, &lt;code&gt;readlink&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;readdir&lt;/code&gt;, &lt;code&gt;readlink&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6225c296acfc5e3b5f6f0c2e8719d05816704086" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;readme&lt;/code&gt; displays the README file of the associated distribution. &lt;code&gt;Look&lt;/code&gt; gets and untars (if not yet done) the distribution file, changes to the appropriate directory and opens a subshell process in that directory. &lt;code&gt;perldoc&lt;/code&gt; displays the module's pod documentation in html or plain text format.</source>
          <target state="translated">&lt;code&gt;readme&lt;/code&gt; は、関連するディストリビューションのREADMEファイルを表示します。 &lt;code&gt;Look&lt;/code&gt; は配布ファイルを取得および解凍（まだ行っていない場合）し、適切なディレクトリに変更して、そのディレクトリでサブシェルプロセスを開きます。 &lt;code&gt;perldoc&lt;/code&gt; は、モジュールのポッドドキュメントをhtmlまたはプレーンテキスト形式で表示します。</target>
        </trans-unit>
        <trans-unit id="616eedbf531a925f329a14e071a3cf7f343db86b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rearrange&lt;/code&gt; and &lt;code&gt;hangul_terminator&lt;/code&gt; parameters are neglected. &lt;code&gt;katakana_before_hiragana&lt;/code&gt; and &lt;code&gt;upper_before_lower&lt;/code&gt; don't affect matching and searching, as it doesn't matter whether greater or less.</source>
          <target state="translated">&lt;code&gt;rearrange&lt;/code&gt; および &lt;code&gt;hangul_terminator&lt;/code&gt; パラメーターは無視されます。 &lt;code&gt;katakana_before_hiragana&lt;/code&gt; と &lt;code&gt;upper_before_lower&lt;/code&gt; はそれが大きいかどうかを以下の問題ではないとして、マッチングや検索には影響しません。</target>
        </trans-unit>
        <trans-unit id="b71d1e85a9f87ede8f1c8dcd7a1c4f81e4492184" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason&lt;/code&gt; &amp;mdash; The response phrase returned by the server</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; &amp;mdash;サーバーから返された応答フレーズ</target>
        </trans-unit>
        <trans-unit id="7088a75b0ffcb8196d5342cb6b0d84db9b2c212b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recallCommand&lt;/code&gt;, &lt;code&gt;ShellBang&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;recallCommand&lt;/code&gt;, &lt;code&gt;ShellBang&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2031053d2f73cf50b46dd9d6bf80b7fe5eefaa91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redirects&lt;/code&gt; If this field exists, it is an arrayref of response hash references from redirects in the same order that redirections occurred. If it does not exist, then no redirections occurred.</source>
          <target state="translated">&lt;code&gt;redirects&lt;/code&gt; このフィールドが存在する場合、リダイレクトが発生したのと同じ順序でリダイレクトからの応答ハッシュ参照のarrayrefです。存在しない場合、リダイレクトは発生していません。</target>
        </trans-unit>
        <trans-unit id="c5b051b18f244f32b477dab470c052b7ab042e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refaliasing&lt;/code&gt; - allow aliasing via &lt;code&gt;\$x = \$y&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;refaliasing&lt;/code&gt; - &lt;code&gt;\$x = \$y&lt;/code&gt; エイリアシングを許可する</target>
        </trans-unit>
        <trans-unit id="32262b67d0cac610b2102229a9b0152387e6b973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg()&lt;/code&gt; is the start of the parse process. It is responsible for parsing an arbitrary chunk of pattern up to either the end of the string, or the first closing parenthesis it encounters in the pattern. This means it can be used to parse the top-level regex, or any section inside of a grouping parenthesis. It also handles the &quot;special parens&quot; that perl's regexes have. For instance when parsing &lt;code&gt;/x(?:foo)y/&lt;/code&gt;, &lt;code&gt;reg()&lt;/code&gt; will at one point be called to parse from the &quot;?&quot; symbol up to and including the &quot;)&quot;.</source>
          <target state="translated">&lt;code&gt;reg()&lt;/code&gt; は、解析プロセスの開始です。文字列の終わり、またはパターン内で最初に検出された閉じ括弧のいずれかまで、パターンの任意のチャンクを解析する役割を果たします。これは、最上位の正規表現、またはグループ化括弧内の任意のセクションを解析するために使用できることを意味します。また、perlの正規表現が持つ「特別な親」も処理します。たとえば、 &lt;code&gt;/x(?:foo)y/&lt;/code&gt; を解析する場合、 &lt;code&gt;reg()&lt;/code&gt; は、ある時点で「？」から解析するために呼び出されます。 「）」までの記号。</target>
        </trans-unit>
        <trans-unit id="5a7e3a62ac5d117a96b72d8dcabc1b9d96e467f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reg()&lt;/code&gt; is the start of the parse process. It is responsible for parsing an arbitrary chunk of pattern up to either the end of the string, or the first closing parenthesis it encounters in the pattern. This means it can be used to parse the top-level regex, or any section inside of a grouping parenthesis. It also handles the &quot;special parens&quot; that perl's regexes have. For instance when parsing &lt;code&gt;/x(?:foo)y/&lt;/code&gt;&lt;code&gt;reg()&lt;/code&gt; will at one point be called to parse from the &quot;?&quot; symbol up to and including the &quot;)&quot;.</source>
          <target state="translated">&lt;code&gt;reg()&lt;/code&gt; は解析プロセスの開始です。文字列の終わりまで、またはパターンで遭遇する最初の閉じ括弧まで、パターンの任意のチャンクを解析する必要があります。これは、最上位の正規表現、またはグループ化括弧内の任意のセクションを解析するために使用できることを意味します。また、perlの正規表現が持つ「特別な括弧」も処理します。たとえば、 &lt;code&gt;/x(?:foo)y/&lt;/code&gt; &lt;code&gt;reg()&lt;/code&gt; を解析する場合、ある時点で「？」から解析するために呼び出されます「）」までの記号。</target>
        </trans-unit>
        <trans-unit id="0c957111983f253e3076925e4631813db6c2822e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regbranch()&lt;/code&gt; in turn calls &lt;code&gt;regpiece()&lt;/code&gt; which handles &quot;things&quot; followed by a quantifier. In order to parse the &quot;things&quot;, &lt;code&gt;regatom()&lt;/code&gt; is called. This is the lowest level routine, which parses out constant strings, character classes, and the various special symbols like &lt;code&gt;$&lt;/code&gt; . If &lt;code&gt;regatom()&lt;/code&gt; encounters a &quot;(&quot; character it in turn calls &lt;code&gt;reg()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;regbranch()&lt;/code&gt; は、「もの」を処理する &lt;code&gt;regpiece()&lt;/code&gt; を呼び出し、その後に数量詞が続きます。「もの」を解析するために、 &lt;code&gt;regatom()&lt;/code&gt; が呼び出されます。これは最低レベルのルーチンで、定数文字列、文字クラス、および &lt;code&gt;$&lt;/code&gt; などのさまざまな特殊記号を解析します。場合 &lt;code&gt;regatom()&lt;/code&gt; 「（」文字を検出することが順番に呼び出し、 &lt;code&gt;reg()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7f8fbab91692448d1ed9c47ed3f28aba84fad77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regbranch()&lt;/code&gt; in turn calls &lt;code&gt;regpiece()&lt;/code&gt; which handles &quot;things&quot; followed by a quantifier. In order to parse the &quot;things&quot;, &lt;code&gt;regatom()&lt;/code&gt; is called. This is the lowest level routine, which parses out constant strings, character classes, and the various special symbols like &lt;code&gt;$&lt;/code&gt;. If &lt;code&gt;regatom()&lt;/code&gt; encounters a &quot;(&quot; character it in turn calls &lt;code&gt;reg()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;regbranch()&lt;/code&gt; は、「things」とそれに続く数量詞を処理する &lt;code&gt;regpiece()&lt;/code&gt; を呼び出します。「もの」を解析するために、 &lt;code&gt;regatom()&lt;/code&gt; が呼び出されます。これは、定数文字列、文字クラス、および &lt;code&gt;$&lt;/code&gt; などのさまざまな特殊記号を解析する最低レベルのルーチンです。場合 &lt;code&gt;regatom()&lt;/code&gt; 「（」文字を検出することが順番に呼び出し、 &lt;code&gt;reg()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02eebbd56aa29755a9b8438c1a1a34663c687bfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regex_sets&lt;/code&gt; - allow extended bracketed character classes in regexps</source>
          <target state="translated">&lt;code&gt;regex_sets&lt;/code&gt; -正規表現で括弧で囲まれた拡張文字クラスを許可します</target>
        </trans-unit>
        <trans-unit id="0e0285a40e365527c3360c8043442411516f88d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regmatch&lt;/code&gt; is the main &quot;recursive loop&quot; of the interpreter. It is basically a giant switch statement that implements a state machine, where the possible states are the regops themselves, plus a number of additional intermediate and failure states. A few of the states are implemented as subroutines but the bulk are inline code.</source>
          <target state="translated">&lt;code&gt;regmatch&lt;/code&gt; はインタプリタの主要な「再帰ループ」です。これは基本的に、状態マシンを実装する巨大なスイッチステートメントであり、可能な状態は、レゴップ自体と、いくつかの追加の中間状態と障害状態です。いくつかの状態はサブルーチンとして実装されていますが、大部分はインラインコードです。</target>
        </trans-unit>
        <trans-unit id="34320379070d5c0b4b993f583fcab86440065756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regnode_1&lt;/code&gt; structures have the same header, followed by a single four-byte argument; &lt;code&gt;regnode_2&lt;/code&gt; structures contain two two-byte arguments instead:</source>
          <target state="translated">&lt;code&gt;regnode_1&lt;/code&gt; 構造体には同じヘッダーがあり、その後に単一の4バイトの引数が続きます。 &lt;code&gt;regnode_2&lt;/code&gt; 構造体には、代わりに2つの2バイト引数が含まれています。</target>
        </trans-unit>
        <trans-unit id="e4dba4a9bca93381c17cd610e0197a487dcb2427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regnode_string&lt;/code&gt; structures, used for literal strings, follow the header with a one-byte length and then the string data. Strings are padded on the end with zero bytes so that the total length of the node is a multiple of four bytes:</source>
          <target state="translated">&lt;code&gt;regnode_string&lt;/code&gt; 構造体は、リテラル文字列に使用され、ヘッダーの後に1バイトの長さ、続いて文字列データが続きます。ノードの全長が4バイトの倍数になるように、文字列の末尾には0バイトが埋め込まれます。</target>
        </trans-unit>
        <trans-unit id="e47b82a6ae23398c73ac5e31fc2c21109ab1136e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regnode_string&lt;/code&gt; structures, used for literal strings, follow the header with a one-byte length and then the string data. Strings are padded on the tail end with zero bytes so that the total length of the node is a multiple of four bytes:</source>
          <target state="translated">&lt;code&gt;regnode_string&lt;/code&gt; リテラル文字列に使用されるregnode_string構造体は、ヘッダーの後に1バイトの長さで続き、次に文字列データが続きます。ノードの全長が4バイトの倍数になるように、文字列の末尾には0バイトが埋め込まれます。</target>
        </trans-unit>
        <trans-unit id="8da61c4024c5fde5d0d5083c10881096ea875b8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regtry()&lt;/code&gt; is the entry point into the regex interpreter. It expects as arguments a pointer to a &lt;code&gt;regmatch_info&lt;/code&gt; structure and a pointer to a string. It returns an integer 1 for success and a 0 for failure. It is basically a set-up wrapper around &lt;code&gt;regmatch()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;regtry()&lt;/code&gt; は、正規表現インタプリタへのエントリポイントです。引数として、 &lt;code&gt;regmatch_info&lt;/code&gt; 構造体へのポインタと文字列へのポインタを想定しています。成功した場合は整数1、失敗した場合は0を返します。これは基本的に &lt;code&gt;regmatch()&lt;/code&gt; のセットアップラッパーです。</target>
        </trans-unit>
        <trans-unit id="6ccbb08535479a243005d71982c034d77a82adda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regtry()&lt;/code&gt; is the entry point into the regex interpreter. It expects as arguments a pointer to a &lt;code&gt;regmatch_info&lt;/code&gt; structure and a pointer to a string. It returns an integer 1 for success and a 0 for failure. It is basically a set-up wrapper around &lt;code&gt;regmatch()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;regtry()&lt;/code&gt; は、正規表現インタープリターへのエントリポイントです。引数として、 &lt;code&gt;regmatch_info&lt;/code&gt; 構造体へのポインターと文字列へのポインターを想定しています。成功の場合は整数1を返し、失敗の場合は0を返します。これは基本的に、 &lt;code&gt;regmatch()&lt;/code&gt; のセットアップラッパーです。</target>
        </trans-unit>
        <trans-unit id="756a74a73b044c834db8626f057853b231e20123" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree()&lt;/code&gt;'s behaviour may be tuned by an optional hashref appearing as the last parameter on the call. If an empty string is passed to &lt;code&gt;remove_tree&lt;/code&gt;, an error will occur.</source>
          <target state="translated">&lt;code&gt;remove_tree()&lt;/code&gt; の動作は、呼び出しの最後のパラメーターとして表示されるオプションのhashrefによって調整できます。空の文字列が &lt;code&gt;remove_tree&lt;/code&gt; に渡されると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d191563625501cd0dd042566cf3df9fdb6af17ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; , after having deleted everything and restored the permissions of a directory, was unable to chdir back to the parent. The program halts to avoid a race condition from occurring.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、すべてを削除してディレクトリの権限を復元した後、chdirを親に戻すことができませんでした。プログラムは、競合状態の発生を回避するために停止します。</target>
        </trans-unit>
        <trans-unit id="0e30094b13da141ed1e37ede35a62255c66728a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; , after having deleted everything in a directory, attempted to restore its permissions to the original state but failed. The directory may wind up being left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、ディレクトリ内のすべてを削除した後、権限を元の状態に復元しようとしましたが失敗しました。ディレクトリは取り残される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae7b650aa563617f4ec9fe94e5aa32c051a39081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to change the permissions on the current directory to ensure that subsequent unlinkings would not run into problems, but was unable to do so. The permissions remain as they were, and the program will carry on, doing the best it can.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、現在のディレクトリの権限を変更して、その後のリンク解除で問題が発生しないようにしましたが、実行できませんでした。権限はそのままで、プログラムは引き続き最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="95bc3df474e248a2e04291479bd3fa33e8cd5330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to determine the initial directory by calling &lt;code&gt;Cwd::getcwd&lt;/code&gt; , but the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; が &lt;code&gt;Cwd::getcwd&lt;/code&gt; 呼び出して初期ディレクトリを特定しようとしましたが、なんらかの理由で呼び出しが失敗しました。何も削除する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="62def726fb82f655a702cd2c3581e60db5288319" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to determine the initial directory by calling &lt;code&gt;Cwd::getcwd&lt;/code&gt;, but the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、 &lt;code&gt;Cwd::getcwd&lt;/code&gt; 呼び出して初期ディレクトリを判別しようとしましたが、何らかの理由で呼び出しが失敗しました。何も削除しようとはしません。</target>
        </trans-unit>
        <trans-unit id="0c6ce072680f1019c3f3f85b4a8ee961eafa33e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to force the permissions of a file to ensure it could be deleted, but failed to do so. It will, however, still attempt to unlink the file.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、ファイルを確実に削除できるようにファイルの権限を強制しようとしましたが、削除できませんでした。ただし、ファイルのリンクを解除しようとします。</target>
        </trans-unit>
        <trans-unit id="97c03af431f1ab44b99d8b5b8fc841f1d6a8b1b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to remove a directory, but failed. This may be because some objects that were unable to be removed remain in the directory, or it could be a permissions issue. The directory will be left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; はディレクトリを削除しようとしましたが、失敗しました。これは、削除できなかった一部のオブジェクトがディレクトリに残っているか、権限の問題である可能性があります。ディレクトリは残されます。</target>
        </trans-unit>
        <trans-unit id="49be99d75fc1d4ab8517776a2c9c7bb74ae38eb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to remove a directory, but failed. This may because some objects that were unable to be removed remain in the directory, or a permissions issue. The directory will be left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; がディレクトリを削除しようとしましたが、失敗しました。これは、削除できなかった一部のオブジェクトがディレクトリに残っているか、権限の問題が原因である可能性があります。ディレクトリは残されます。</target>
        </trans-unit>
        <trans-unit id="e7616985ed5b969eec07392de1388ed772d59985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to set the working directory in order to begin deleting the objects therein, but was unsuccessful. This is usually a permissions issue. The routine will continue to delete other things, but this directory will be left intact.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、その中のオブジェクトの削除を開始するために作業ディレクトリを設定しようとしましたが、失敗しました。これは通常、権限の問題です。ルーチンは他のものを削除し続けますが、このディレクトリはそのまま残ります。</target>
        </trans-unit>
        <trans-unit id="721db6f7a6d0b1be4b6b64fdeb2aa4c3fac630d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to stat the initial directory (after having successfully obtained its name via &lt;code&gt;getcwd&lt;/code&gt; ), however, the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; が（ &lt;code&gt;getcwd&lt;/code&gt; を介してその名前を正常に取得した後で）初期ディレクトリをstatしようとしましたが、何らかの理由で呼び出しが失敗しました。何も削除する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="5ad6e37f9ee24026c6891f8ea8cad5b065fcc2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; attempted to stat the initial directory (after having successfully obtained its name via &lt;code&gt;getcwd&lt;/code&gt;), however, the call failed for some reason. No attempt will be made to delete anything.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は（ &lt;code&gt;getcwd&lt;/code&gt; を介して名前を正常に取得した後）初期ディレクトリを統計しようとしましたが、何らかの理由で呼び出しが失敗しました。何も削除しようとはしません。</target>
        </trans-unit>
        <trans-unit id="9e2cfce733e90f2119a65972900f218ea1224963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; failed to remove a file. Probably a permissions issue.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; がファイルの削除に失敗しました。おそらく権限の問題です。</target>
        </trans-unit>
        <trans-unit id="7780e89fe07af9e10d0c6e4dc374ef9437694de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; recorded the device and inode of a directory, and then moved into it. It then performed a &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; on the current directory and detected that the device and inode were no longer the same. As this is at the heart of the race condition problem, the program will die at this point.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、デバイスとディレクトリのiノードを記録してから、そこに移動しました。次に、現在のディレクトリで &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; を実行し、デバイスとiノードが同じではなくなったことを検出しました。これは競合状態の問題の中心にあるため、プログラムはこの時点で終了します。</target>
        </trans-unit>
        <trans-unit id="0c1ce908a28184dec15f73c4d24f75d1ae429287" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; recorded the device and inode of a directory, and then moved into it. It then performed a &lt;code&gt;stat&lt;/code&gt; on the current directory and detected that the device and inode were no longer the same. As this is at the heart of the race condition problem, the program will die at this point.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、ディレクトリのデバイスとiノードを記録してから、そこに移動しました。次に、現在のディレクトリで &lt;code&gt;stat&lt;/code&gt; を実行し、デバイスとiノードが同じではなくなったことを検出しました。これが競合状態の問題の中心であるため、プログラムはこの時点で終了します。</target>
        </trans-unit>
        <trans-unit id="7c936a52751bd20d0155292a8ba2362d698dcd12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; tried to read the contents of the directory in order to acquire the names of the directory entries to be unlinked, but was unsuccessful. This is usually a permissions issue. The program will continue, but the files in this directory will remain after the call.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、リンク解除するディレクトリエントリの名前を取得するためにディレクトリの内容を読み取ろうとしましたが、失敗しました。これは通常、権限の問題です。プログラムは続行しますが、このディレクトリ内のファイルは呼び出し後も残ります。</target>
        </trans-unit>
        <trans-unit id="b0893a833dba2da63d1689754e9baa173690a309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; was unable to stat the parent directory after have returned from the child. Since there is no way of knowing if we returned to where we think we should be (by comparing device and inode) the only way out is to &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; 子から戻った後、remove_treeは親ディレクトリをstatできませんでした。（deviceとinodeを比較して）本来あるべき場所に戻ったかどうかを知る方法はないので、唯一の方法は &lt;code&gt;croak&lt;/code&gt; することです。</target>
        </trans-unit>
        <trans-unit id="fcc95caadd39c701babb53aed7cf4e82983752f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt; was unable to stat the parent directory after having returned from the child. Since there is no way of knowing if we returned to where we think we should be (by comparing device and inode) the only way out is to &lt;code&gt;croak&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、子から戻った後、親ディレクトリを統計できませんでした。（デバイスとiノードを比較することによって）本来あるべき場所に戻ったかどうかを知る方法がないため、唯一の方法は &lt;code&gt;croak&lt;/code&gt; だけです。</target>
        </trans-unit>
        <trans-unit id="49c7739d189f502724359c79e96830844cc603dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt;, after having deleted everything and restored the permissions of a directory, was unable to chdir back to the parent. The program halts to avoid a race condition from occurring.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、すべてを削除してディレクトリのアクセス許可を復元した後、chdirで親に戻すことができませんでした。競合状態が発生しないように、プログラムは停止します。</target>
        </trans-unit>
        <trans-unit id="e916929195c589fedc7fa6f3a273954aeac14e7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_tree&lt;/code&gt;, after having deleted everything in a directory, attempted to restore its permissions to the original state but failed. The directory may wind up being left behind.</source>
          <target state="translated">&lt;code&gt;remove_tree&lt;/code&gt; は、ディレクトリ内のすべてを削除した後、そのアクセス許可を元の状態に復元しようとしましたが、失敗しました。ディレクトリが取り残される可能性があります。</target>
        </trans-unit>
        <trans-unit id="1ea1c7944247d6ffcb61ad07a6ffe54b513d1812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; has special additional dark magic: if you invoke your &lt;code&gt;require&lt;/code&gt; replacement as &lt;code&gt;require Foo::Bar&lt;/code&gt;, it will actually receive the argument &lt;code&gt;&quot;Foo/Bar.pm&quot;&lt;/code&gt; in @_. See &lt;a href=&quot;perlfunc#require&quot;&gt;&quot;require&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 特別な追加暗いの魔法を持っている：あなた、あなたの起動した場合 &lt;code&gt;require&lt;/code&gt; として、交換 &lt;code&gt;require Foo::Bar&lt;/code&gt; 、それが実際の引数を受け取ることになります &lt;code&gt;&quot;Foo/Bar.pm&quot;&lt;/code&gt; @_インチ &lt;a href=&quot;perlfunc#require&quot;&gt;perlfuncの「require」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fd69d2d3e18f341cf60a46af272519b5c3cf1a79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require_ok&lt;/code&gt; will guess whether the input is a module name or a filename.</source>
          <target state="translated">&lt;code&gt;require_ok&lt;/code&gt; は、入力がモジュール名かファイル名かを推測します。</target>
        </trans-unit>
        <trans-unit id="8505e44467f89d3c5f13e3b0f5be5320e0760bab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requires&lt;/code&gt; can tell you what other modules a particular module requires. This is particularly useful when you're intending to write a module for public release and are listing its prerequisites.</source>
          <target state="translated">&lt;code&gt;requires&lt;/code&gt; 特定のモジュールが必要とする他のどのようなモジュールを伝えることができます。これは、公開リリース用のモジュールを作成する予定で、その前提条件をリストしている場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="d7622f99d032d83f40f152407bc369319dc35bc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requires&lt;/code&gt; takes but one argument: the name of a module. It will then first check if it can actually load this module, and return undef if it can't. Otherwise, it will return a list of modules and pragmas that would have been loaded on the module's behalf.</source>
          <target state="translated">&lt;code&gt;requires&lt;/code&gt; 引数は1つだけです。モジュールの名前です。次に、最初に実際にこのモジュールをロードできるかどうかをチェックし、ロードできない場合はundefを返します。それ以外の場合は、モジュールの代わりにロードされたモジュールとプラグマのリストを返します。</target>
        </trans-unit>
        <trans-unit id="6e6e70e552e6b050c1d411581b7b701935fc2d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve_alias()&lt;/code&gt; does not need &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode::Alias&lt;/code&gt; ; it can be imported via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(resolve_alias)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;resolve_alias()&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode::Alias&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;必要はありません。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode qw(resolve_alias)&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;インポートできます。</target>
        </trans-unit>
        <trans-unit id="6e6ee4d86f14b41f2347416cb6fbd72c3ea8b481" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolve_alias()&lt;/code&gt; does not need &lt;code&gt;use Encode::Alias&lt;/code&gt;; it can be imported via &lt;code&gt;use Encode qw(resolve_alias)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;resolve_alias()&lt;/code&gt; は &lt;code&gt;use Encode::Alias&lt;/code&gt; 必要はありません。 &lt;code&gt;use Encode qw(resolve_alias)&lt;/code&gt; を使用してインポートできます。</target>
        </trans-unit>
        <trans-unit id="2ec72b98ab29e9376244e1a028463dfab7884f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;result_class&lt;/code&gt; (optional)</source>
          <target state="translated">&lt;code&gt;result_class&lt;/code&gt; （オプション）</target>
        </trans-unit>
        <trans-unit id="72ca88a64ac36a768e80f1c263135396e20389ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rewind&lt;/code&gt; resets the current position of the specified file handle to the beginning of the file. It's really just a convenience method equivalent in effect to &lt;code&gt;seek($fh,0,0)&lt;/code&gt;. It returns a true value if successful, and &lt;code&gt;undef&lt;/code&gt; if it fails.</source>
          <target state="translated">&lt;code&gt;rewind&lt;/code&gt; は、指定されたファイルハンドルの現在の位置をファイルの先頭にリセットします。これは、実際には、 &lt;code&gt;seek($fh,0,0)&lt;/code&gt; と同等の便利なメソッドです。成功した場合はtrue値を返し、失敗した場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d808ac5985f7e78ab592ddff0b507312a4763996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rmscopy&lt;/code&gt; is VMS specific and cannot be exported; it must be referenced by its full name, e.g.:</source>
          <target state="translated">&lt;code&gt;rmscopy&lt;/code&gt; はVMS固有であり、エクスポートできません。フルネームで参照する必要があります。例：</target>
        </trans-unit>
        <trans-unit id="4d220ebd3516c866a42a58737ac32f73d7b60593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rmsexpand&lt;/code&gt; on success will produce a name that fits in a 255 byte buffer, which is required for parameters passed to the DCL interpreter.</source>
          <target state="translated">&lt;code&gt;rmsexpand&lt;/code&gt; が成功すると、255バイトのバッファーに収まる名前が生成されます。これは、DCLインタープリターに渡されるパラメーターに必要です。</target>
        </trans-unit>
        <trans-unit id="df7605f60079f8f1dc12ac3bd7e4a4ddde112eae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rmtree&lt;/code&gt; and &lt;code&gt;remove_tree&lt;/code&gt; will not work with multithreaded applications due to its use of &lt;code&gt;chdir&lt;/code&gt;. At this time, no warning or error is generated in this situation. You will certainly encounter unexpected results.</source>
          <target state="translated">&lt;code&gt;rmtree&lt;/code&gt; と &lt;code&gt;remove_tree&lt;/code&gt; は、 &lt;code&gt;chdir&lt;/code&gt; を使用しているため、マルチスレッドアプリケーションでは機能しません。現時点では、この状況では警告やエラーは生成されません。あなたは確かに予期しない結果に遭遇するでしょう。</target>
        </trans-unit>
        <trans-unit id="409864670ba5b3a51d91aefad2f1baba7ffb1971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; takes 4 arguments:</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; は4つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="6e5e870ed1d46dfd7cef6254dbdde44232014c54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; will return a simple &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; when called in scalar context. In list context, you will be returned a list of the following items:</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; は、スカラーコンテキストで呼び出されると、単純な &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返します。リストのコンテキストでは、次のアイテムのリストが返されます。</target>
        </trans-unit>
        <trans-unit id="71adfc24f9d2e25fb176cec5e34573530b5011a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run&lt;/code&gt; will try to execute your command using the following logic:</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; は、次のロジックを使用してコマンドを実行しようとします。</target>
        </trans-unit>
        <trans-unit id="61bf1af5a461bb65504ae6074130c8cb94c99510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_forked&lt;/code&gt; is designed to survive and successfully terminate almost any long running task, even a fork bomb in case your system has the resources to survive during given timeout.</source>
          <target state="translated">&lt;code&gt;run_forked&lt;/code&gt; は、ほぼすべての長時間実行タスクを存続させて正常に終了するように設計されています。これは、所定のタイムアウト中にシステムが存続するリソースがある場合でも、フォーク爆弾です。</target>
        </trans-unit>
        <trans-unit id="dc5d98ab787a66354808b7b8789a0245cef29116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_forked&lt;/code&gt; is used to execute some program or a coderef, optionally feed it with some input, get its return code and output (both stdout and stderr into separate buffers). In addition, it allows to terminate the program if it takes too long to finish.</source>
          <target state="translated">&lt;code&gt;run_forked&lt;/code&gt; は、プログラムまたはコード参照を実行するために使用されます。オプションで、プログラムに入力を与え、その戻りコードと出力を取得します（stdoutとstderrの両方を別々のバッファーに入れます）。さらに、終了に時間がかかりすぎる場合は、プログラムを終了できます。</target>
        </trans-unit>
        <trans-unit id="420efc1f7e2a39e2d481baf8e0b32a892ee30985" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run_forked&lt;/code&gt; will return a HASHREF with the following keys:</source>
          <target state="translated">&lt;code&gt;run_forked&lt;/code&gt; は、次のキーを持つHASHREFを返します。</target>
        </trans-unit>
        <trans-unit id="2ffbf4e9e54a9897056a3f4cba8e11fe42ef030b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s/pattern/replacement/msixpogcedual&lt;/code&gt; substitutes matches of 'pattern' with 'replacement'. Modifiers as for &lt;code&gt;m//&lt;/code&gt;, with two additions:</source>
          <target state="translated">&lt;code&gt;s/pattern/replacement/msixpogcedual&lt;/code&gt; は、「pattern」の一致を「replacement」に置き換えます。 &lt;code&gt;m//&lt;/code&gt; に関する修飾子、2つの追加：</target>
        </trans-unit>
        <trans-unit id="d6532d404d405df3e3e80f6cf86d34916835c1ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; must be after or equal to &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; は &lt;code&gt;start&lt;/code&gt; 以降である必要があります。</target>
        </trans-unit>
        <trans-unit id="bca13c13725c8021829e1d9c9d0e16b479e48be9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; must be before or equal to &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; は &lt;code&gt;end&lt;/code&gt; の前または等しい必要があります。</target>
        </trans-unit>
        <trans-unit id="44468ed2da13e6b0326d22ae098610e252ce2bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;same_language_tag&lt;/code&gt; works by just seeing whether &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; is the same as &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;same_language_tag&lt;/code&gt; はちょうどかどうかを見ることによって動作します &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; 同じである &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="549db5722367437213a1dc3c58ec222287aa16f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;same_language_tag&lt;/code&gt; works by just seeing whether &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; is the same as &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;same_language_tag&lt;/code&gt; はちょうどかどうかを見ることによって動作します &lt;code&gt;encode_language_tag($lang1)&lt;/code&gt; 同じである &lt;code&gt;encode_language_tag($lang2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56eb36ce4645c802df1270fcfeea6fea69a3f470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;say()&lt;/code&gt; acts just like &lt;code&gt;print()&lt;/code&gt; except $\ will be localized to &lt;code&gt;\n&lt;/code&gt; so you need do nothing special to handle &lt;code&gt;say()&lt;/code&gt; in &lt;code&gt;PRINT()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;say()&lt;/code&gt; は &lt;code&gt;print()&lt;/code&gt; と同じように機能しますが、 $ \が &lt;code&gt;\n&lt;/code&gt; ローカライズされるため、 &lt;code&gt;PRINT()&lt;/code&gt; で &lt;code&gt;say()&lt;/code&gt; を処理するために特別なことをする必要はありません。</target>
        </trans-unit>
        <trans-unit id="1f0e2afe2ef50aa67d8d4951eafeeaff281449ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scalar reverse()&lt;/code&gt; reverses by character rather than by byte.</source>
          <target state="translated">&lt;code&gt;scalar reverse()&lt;/code&gt; は、バイトではなく文字で反転します。</target>
        </trans-unit>
        <trans-unit id="9775e76df105754a2894401b2cc225239eed703d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search_invlist&lt;/code&gt; is used to search an inversion list returned by &lt;code&gt;prop_invlist&lt;/code&gt; or &lt;code&gt;prop_invmap&lt;/code&gt; for a particular &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;. &lt;code&gt;undef&lt;/code&gt; is returned if the code point is not found in the inversion list (this happens only when it is not a legal &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt;, or is less than the list's first element). A warning is raised in the first instance.</source>
          <target state="translated">&lt;code&gt;search_invlist&lt;/code&gt; は、 &lt;code&gt;prop_invlist&lt;/code&gt; または &lt;code&gt;prop_invmap&lt;/code&gt; によって返された反転リストで特定の&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」&lt;/a&gt;を検索するために使用されます。 &lt;code&gt;undef&lt;/code&gt; は、コードポイントが反転リストに見つからない場合に返されます（これは、正当な&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」&lt;/a&gt;ではない場合、またはリストの最初の要素よりも小さい場合にのみ発生します）。最初に警告が発生します。</target>
        </trans-unit>
        <trans-unit id="d48e38b365ce4bf6a3953fa6b04bb2ccda99aa7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search_invlist&lt;/code&gt; is used to search an inversion list returned by &lt;code&gt;prop_invlist&lt;/code&gt; or &lt;code&gt;prop_invmap&lt;/code&gt; for a particular &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned if the code point is not found in the inversion list (this happens only when it is not a legal &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;, or is less than the list's first element). A warning is raised in the first instance.</source>
          <target state="translated">&lt;code&gt;search_invlist&lt;/code&gt; は、 &lt;code&gt;prop_invlist&lt;/code&gt; または &lt;code&gt;prop_invmap&lt;/code&gt; によって返された反転リストから特定の&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数&lt;/a&gt;を検索するために使用されます。コードポイントが反転リストに見つからない場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます（これは、コードポイントが有効な&lt;a href=&quot;#code-point-argument&quot;&gt;引数&lt;/a&gt;でないか、リストの最初の要素よりも小さい場合にのみ発生します）。最初に警告が発生します。</target>
        </trans-unit>
        <trans-unit id="f0a8f69cac4c41cf105bf7401f5fffbc32923e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;select&lt;/code&gt; is a static method, that is you call it with the package name like &lt;code&gt;new&lt;/code&gt;. &lt;code&gt;READ&lt;/code&gt;, &lt;code&gt;WRITE&lt;/code&gt; and &lt;code&gt;EXCEPTION&lt;/code&gt; are either &lt;code&gt;undef&lt;/code&gt; or &lt;code&gt;IO::Select&lt;/code&gt; objects. &lt;code&gt;TIMEOUT&lt;/code&gt; is optional and has the same effect as for the core select call.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; は静的メソッドです。つまり、 &lt;code&gt;new&lt;/code&gt; のようなパッケージ名で呼び出します。 &lt;code&gt;READ&lt;/code&gt; 、 &lt;code&gt;WRITE&lt;/code&gt; 、および &lt;code&gt;EXCEPTION&lt;/code&gt; は、 &lt;code&gt;undef&lt;/code&gt; または &lt;code&gt;IO::Select&lt;/code&gt; オブジェクトのいずれかです。 &lt;code&gt;TIMEOUT&lt;/code&gt; はオプションであり、コア選択呼び出しの場合と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="9e70016d81c26851fdc1268a308e2475dcb72857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; accepts either a stat object, as returned by the &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; method, or a list of</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; メソッドによって返されるstatオブジェクト、または</target>
        </trans-unit>
        <trans-unit id="5223afef6e1c6aea2ac19f7b51152375c25bd386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; accepts either a stat object, as returned by the &lt;code&gt;stat&lt;/code&gt; method, or a list of</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は、 &lt;code&gt;stat&lt;/code&gt; メソッドによって返されるstatオブジェクト、またはのリストのいずれかを受け入れます。</target>
        </trans-unit>
        <trans-unit id="c710408719efbb408db55c8531da370f8ff3d836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; structure associated with the message queue.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は、メッセージキューに関連付けられている &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 構造体の次の値を設定します。</target>
        </trans-unit>
        <trans-unit id="ed728d4e7f99edf863813e9844924ed524fa1809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; structure associated with the semaphore set.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は、セマフォセットに関連付けられた &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 構造体の次の値を設定します。</target>
        </trans-unit>
        <trans-unit id="99ae188a2af52b6d7409745617183138a71114cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;stat&lt;/code&gt; structure associated with the message queue.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は、メッセージキューに関連付けられた &lt;code&gt;stat&lt;/code&gt; 構造の次の値を設定します。</target>
        </trans-unit>
        <trans-unit id="6c430521619281049c53f3dce3f5848f9b3b73b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; will set the following values of the &lt;code&gt;stat&lt;/code&gt; structure associated with the semaphore set.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は、セマフォセットに関連付けられた &lt;code&gt;stat&lt;/code&gt; 構造の次の値を設定します。</target>
        </trans-unit>
        <trans-unit id="c1d152a9c3ab9b89b16e2ee46596cf4f0fc19888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setlogsock($sock_type, $stream_location)&lt;/code&gt; (added in Perl 5.004_02)</source>
          <target state="translated">&lt;code&gt;setlogsock($sock_type, $stream_location)&lt;/code&gt; （Perl 5.004_02で追加）</target>
        </trans-unit>
        <trans-unit id="583013ce20407688d7c0e999267ffc67b0502e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setlogsock($sock_type, $stream_location, $sock_timeout)&lt;/code&gt; (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.25)</source>
          <target state="translated">&lt;code&gt;setlogsock($sock_type, $stream_location, $sock_timeout)&lt;/code&gt; （ &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.25で追加）</target>
        </trans-unit>
        <trans-unit id="87975c40147558f5f2ec4bebf437a9d770df0f75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setlogsock(\%options)&lt;/code&gt; (added in &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.28)</source>
          <target state="translated">&lt;code&gt;setlogsock(\%options)&lt;/code&gt; （ &lt;code&gt;Sys::Syslog&lt;/code&gt; 0.28で追加）</target>
        </trans-unit>
        <trans-unit id="f63809e33adb9f81d5272829313f7ce53ea0505c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setpriority&lt;/code&gt; and &lt;code&gt;getpriority&lt;/code&gt; are not compatible with earlier ports by Andreas Kaiser. See &lt;code&gt;&quot;setpriority, getpriority&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setpriority&lt;/code&gt; と &lt;code&gt;getpriority&lt;/code&gt; は、AndreasKaiserによる以前のポートと互換性がありません。 &lt;code&gt;&quot;setpriority, getpriority&quot;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="2bf698e71179f95e287e17aca75aec29afcab647" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setpriority&lt;/code&gt;, &lt;code&gt;getpriority&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;setpriority&lt;/code&gt;, &lt;code&gt;getpriority&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bd0c1e5dd9ea33cf369c7adb90355be92008a07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share()&lt;/code&gt; allows you to &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; and &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; without giving any error message. But the &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; or &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; shared, causing the error &quot;lock can only be used on shared values&quot; to occur when you attempt to &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($hashref-&amp;gt;{key})&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($arrayref-&amp;gt;[idx])&lt;/a&gt;&lt;/code&gt; in another thread.</source>
          <target state="translated">&lt;code&gt;share()&lt;/code&gt; を使用すると、エラーメッセージを表示せずに、 &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; およびshare（$ arrayref-&amp;gt; [idx]）を使用できます。しかし、 &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; または &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; されて&lt;b&gt;いない&lt;/b&gt;エラーの原因となって、共有あなたがしようとしたときに発生する「ロックは唯一の共通の価値観で使用することができ、」 &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($hashref-&amp;gt;{key})&lt;/a&gt;&lt;/code&gt; または別のスレッドで &lt;code&gt;&lt;a href=&quot;../functions/lock&quot;&gt;lock($arrayref-&amp;gt;[idx])&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c6f2fdb2df98877bd6f8ae7cd61329aad3b830e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share()&lt;/code&gt; allows you to &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; and &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; without giving any error message. But the &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; or &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; shared, causing the error &quot;lock can only be used on shared values&quot; to occur when you attempt to &lt;code&gt;lock($hashref-&amp;gt;{key})&lt;/code&gt; or &lt;code&gt;lock($arrayref-&amp;gt;[idx])&lt;/code&gt; in another thread.</source>
          <target state="translated">&lt;code&gt;share()&lt;/code&gt; を使用すると、エラーメッセージを表示せずに &lt;code&gt;share($hashref-&amp;gt;{key})&lt;/code&gt; と &lt;code&gt;share($arrayref-&amp;gt;[idx])&lt;/code&gt; を実行できます。しかし、 &lt;code&gt;$hashref-&amp;gt;{key}&lt;/code&gt; または &lt;code&gt;$arrayref-&amp;gt;[idx]&lt;/code&gt; されて&lt;b&gt;いない&lt;/b&gt;エラーの原因となって、共有あなたがしようとしたときに発生する「ロックは唯一の共通の価値観で使用することができ、」 &lt;code&gt;lock($hashref-&amp;gt;{key})&lt;/code&gt; または別のスレッドで &lt;code&gt;lock($arrayref-&amp;gt;[idx])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81400b21c44e81d3c85b6d25672fdb393b6c9649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share&lt;/code&gt; takes a variable and marks it as shared:</source>
          <target state="translated">&lt;code&gt;share&lt;/code&gt; は変数を受け取り、それを共有としてマークします。</target>
        </trans-unit>
        <trans-unit id="7b5f83dec6e18c4adabc00639c9878d8824925ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;share&lt;/code&gt; will return the shared rvalue, but always as a reference.</source>
          <target state="translated">&lt;code&gt;share&lt;/code&gt; は共有された右辺値を返しますが、常に参照として返します。</target>
        </trans-unit>
        <trans-unit id="ce12ad32c52f4a291a29b41a4671200a88ca0b1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared_clone&lt;/code&gt; takes a reference, and returns a shared version of its argument, performing a deep copy on any non-shared elements. Any shared elements in the argument are used as is (i.e., they are not cloned).</source>
          <target state="translated">&lt;code&gt;shared_clone&lt;/code&gt; は参照を取り、その引数の共有バージョンを返し、非共有要素に対してディープコピーを実行します。引数の共有要素はそのまま使用されます（つまり、複製されません）。</target>
        </trans-unit>
        <trans-unit id="88260b4ec0de821010e9a0a312a183095afd1ad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signalLevel&lt;/code&gt;, &lt;code&gt;warnLevel&lt;/code&gt;, &lt;code&gt;dieLevel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;signalLevel&lt;/code&gt;, &lt;code&gt;warnLevel&lt;/code&gt;, &lt;code&gt;dieLevel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b0c4d06136111a386d2b4203fa99ebc9d89ada4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;signatures&lt;/code&gt; - allow subroutine signatures (for named arguments)</source>
          <target state="translated">&lt;code&gt;signatures&lt;/code&gt; -サブルーチン署名を許可します（名前付き引数用）</target>
        </trans-unit>
        <trans-unit id="30a908f874fe3ace52e6aab214508c8fd2542bd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;smartmatch&lt;/code&gt; - allow the use of &lt;code&gt;~~&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;smartmatch&lt;/code&gt; - &lt;code&gt;~~&lt;/code&gt; の使用を許可します</target>
        </trans-unit>
        <trans-unit id="8658f86d4777991376871c792874bcf7ea900b4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;special&lt;/code&gt; is a string, normally &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt; . &lt;code&gt;NULL&lt;/code&gt; means to not use any special mappings; &lt;code&gt;&quot;&quot;&lt;/code&gt; means to use the special mappings. Values other than these two are treated as the name of the hash containing the special mappings, like &lt;code&gt;&quot;utf8::ToSpecLower&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;special&lt;/code&gt; は文字列で、通常は &lt;code&gt;NULL&lt;/code&gt; または &lt;code&gt;&quot;&quot;&lt;/code&gt; です。 &lt;code&gt;NULL&lt;/code&gt; は、特別なマッピングを使用しないことを意味します。 &lt;code&gt;&quot;&quot;&lt;/code&gt; は、特別なマッピングを使用することを意味します。これら2つ以外の値は、 &lt;code&gt;&quot;utf8::ToSpecLower&quot;&lt;/code&gt; ような特別なマッピングを含むハッシュの名前として扱われます。</target>
        </trans-unit>
        <trans-unit id="afd56f6fe104f2fc631089f285a812aa6fe50322" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split /regex/, string&lt;/code&gt; splits &lt;code&gt;string&lt;/code&gt; into a list of substrings and returns that list. The regex determines the character sequence that &lt;code&gt;string&lt;/code&gt; is split with respect to. For example, to split a string into words, use</source>
          <target state="translated">&lt;code&gt;split /regex/, string&lt;/code&gt; 分割 &lt;code&gt;string&lt;/code&gt; リストその部分文字列を返すのリストに。正規表現は、文字 &lt;code&gt;string&lt;/code&gt; が分割される文字シーケンスを決定します。たとえば、文字列を単語に分割するには、</target>
        </trans-unit>
        <trans-unit id="da4c96f14b329fe16bad75b1f046bad021a838c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splitOnLastStarter()&lt;/code&gt; should be called with a pre-normalized parameter &lt;code&gt;$normalized&lt;/code&gt; , that is in the same form as &lt;code&gt;$form&lt;/code&gt; you want.</source>
          <target state="translated">&lt;code&gt;splitOnLastStarter()&lt;/code&gt; は、正規化前のパラメーター &lt;code&gt;$normalized&lt;/code&gt; で呼び出す必要があります。これは、目的の &lt;code&gt;$form&lt;/code&gt; と同じ形式です。</target>
        </trans-unit>
        <trans-unit id="8beef4cc5d29a6d5ad8b96d76357f9686085a8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;splitOnLastStarter()&lt;/code&gt; should be called with a pre-normalized parameter &lt;code&gt;$normalized&lt;/code&gt;, that is in the same form as &lt;code&gt;$form&lt;/code&gt; you want.</source>
          <target state="translated">&lt;code&gt;splitOnLastStarter()&lt;/code&gt; は、事前に正規化されたパラメーター &lt;code&gt;$normalized&lt;/code&gt; 使用して呼び出す必要があります。これは、必要な &lt;code&gt;$form&lt;/code&gt; と同じ形式です。</target>
        </trans-unit>
        <trans-unit id="05ad3d7e63ac0b923f42fda199d17cb36805c894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split_command&lt;/code&gt; will return a series of @cmds each processing part of the args. Collectively they will process all the arguments. Each individual line in @cmds will not be longer than the $self-&amp;gt;max_exec_len being careful to take into account macro expansion.</source>
          <target state="translated">&lt;code&gt;split_command&lt;/code&gt; は、引数の各処理部分である一連の@cmdsを返します。彼らは集合的にすべての議論を処理します。@cmdsの個々の行は、マクロの展開を考慮に入れて注意しながら$ self-&amp;gt; max_exec_lenより長くなることはありません。</target>
        </trans-unit>
        <trans-unit id="df7e33590ee18899069cc6cb7e5e1a3b180d3b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; is the node preceding the first node to be spliced. Node(s) following it will be deleted, and ops will be inserted after it. If it is &lt;code&gt;NULL&lt;/code&gt;, the first node onwards is deleted, and nodes are inserted at the beginning.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; は、スプライスされる最初のノードの前のノードです。その後のノードは削除され、その後にopsが挿入されます。もしそうであれば &lt;code&gt;NULL&lt;/code&gt; 、以降最初のノードが削除され、ノードが先頭に挿入されます。</target>
        </trans-unit>
        <trans-unit id="9992eebbce269337eb7319fad7e4bae82773d69d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stash&lt;/code&gt; is the parent stash/package, if any.</source>
          <target state="translated">&lt;code&gt;stash&lt;/code&gt; は、存在する場合、親stash /パッケージです。</target>
        </trans-unit>
        <trans-unit id="442fca8656f150edfde3e5013ba8d6ad88bb942b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;state &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 対 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="194270003754ace4d214d73b56dfc0757735e5ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state sub&lt;/code&gt; vs &lt;code&gt;my sub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;state sub&lt;/code&gt; 対 &lt;code&gt;my sub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e85d873b3bc435bca89449147842f21071d9602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;state&lt;/code&gt; variables were introduced in Perl 5.10.</source>
          <target state="translated">&lt;code&gt;state&lt;/code&gt; 変数はPerl5.10で導入されました。</target>
        </trans-unit>
        <trans-unit id="cec3fb10dc556b8a200f91b68a1f1978d91a6823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt; &amp;mdash; The HTTP status code of the response</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; &amp;mdash;応答のHTTPステータスコード</target>
        </trans-unit>
        <trans-unit id="ba8a29a29201132badc9fd27134fdf17ce04a300" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str2bytes&lt;/code&gt; may be used as an alias for &lt;code&gt;encode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;str2bytes&lt;/code&gt; は、 &lt;code&gt;encode&lt;/code&gt; のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="9f9a328ccbc35b2b8e9066fa880a1d90d69b6a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict 'subs'&lt;/code&gt; , with Perl 5.6.1, erroneously permitted to use an unquoted compound identifier (e.g. &lt;code&gt;Foo::Bar&lt;/code&gt; ) as a hash key (before &lt;code&gt;=&amp;gt;&lt;/code&gt; or inside curlies), but without forcing it always to a literal string.</source>
          <target state="translated">&lt;code&gt;strict 'subs'&lt;/code&gt; は、Perl 5.6.1では、引用符で囲まれていない複合識別子（例： &lt;code&gt;Foo::Bar&lt;/code&gt; ）をハッシュキーとして（ &lt;code&gt;=&amp;gt;&lt;/code&gt; または内部のカーリーの前に）使用することが誤って許可されていますが、常にリテラル文字列に強制しません。</target>
        </trans-unit>
        <trans-unit id="b3b8f269ae4845105b8f57708804986163c25e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict 'subs'&lt;/code&gt;, with Perl 5.6.1, erroneously permitted to use an unquoted compound identifier (e.g. &lt;code&gt;Foo::Bar&lt;/code&gt;) as a hash key (before &lt;code&gt;=&amp;gt;&lt;/code&gt; or inside curlies), but without forcing it always to a literal string.</source>
          <target state="translated">&lt;code&gt;strict 'subs'&lt;/code&gt; は、Perl 5.6.1で、引用符で囲まれていない複合識別子（ &lt;code&gt;Foo::Bar&lt;/code&gt; ）をハッシュキー（ &lt;code&gt;=&amp;gt;&lt;/code&gt; の前またはカーリー内）として使用することを誤って許可しましたが、常にリテラル文字列に強制することはありませんでした。</target>
        </trans-unit>
        <trans-unit id="84a318f24d8bab6a75e045b750d78d7dd84307fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strtod&lt;/code&gt; respects any POSIX &lt;code&gt;setlocale()&lt;/code&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt; settings, regardless of whether or not it is called from Perl code that is within the scope of &lt;code&gt;use locale&lt;/code&gt;. Prior to Perl 5.28, or when operating in a non thread-safe environment, it should not be used in a threaded application unless it's certain that the underlying locale is C or POSIX. This is because it otherwise changes the locale, which globally affects all threads simultaneously.</source>
          <target state="translated">&lt;code&gt;strtod&lt;/code&gt; は、 &lt;code&gt;use locale&lt;/code&gt; 範囲内にあるPerlコードから呼び出されたかどうかに関係なく、POSIX &lt;code&gt;setlocale()&lt;/code&gt; &lt;code&gt;LC_NUMERIC&lt;/code&gt; 設定を尊重します。Perl 5.28より前、またはスレッドセーフでない環境で動作している場合は、基になるロケールがCまたはPOSIXであることが確実でない限り、スレッド化されたアプリケーションで使用しないでください。これは、ロケールが変更され、すべてのスレッドに同時にグローバルに影響するためです。</target>
        </trans-unit>
        <trans-unit id="e7d0dc79bd558fb009a4a67ce8058c54beea585e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strtod&lt;/code&gt; respects any POSIX &lt;code&gt;setlocale()&lt;/code&gt;&lt;code&gt;LC_TIME&lt;/code&gt; settings, regardless of whether or not it is called from Perl code that is within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;strtod&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; localeのスコープ内にあるPerlコードから呼び出されたかどうかに関係なく、POSIX &lt;code&gt;setlocale()&lt;/code&gt; &lt;code&gt;LC_TIME&lt;/code&gt; 設定を尊重します。</target>
        </trans-unit>
        <trans-unit id="e6c9831d319071b95082e8dc2f29b6eca1f78c11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strtol&lt;/code&gt; should respect any POSIX</source>
          <target state="translated">&lt;code&gt;strtol&lt;/code&gt; はPOSIXを尊重する必要があります</target>
        </trans-unit>
        <trans-unit id="07d9fc447173aa1507860d93adda713683bb7035" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt; always creates a constructor called &lt;code&gt;new&lt;/code&gt; . That constructor may take a list of initializers for the various elements of the new struct.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; は常に &lt;code&gt;new&lt;/code&gt; というコンストラクタを作成します。そのコンストラクターは、新しい構造体のさまざまな要素の初期化子のリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="4588f880e95ab5093116d0d4a6242c2e9115a856" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt; always creates a constructor called &lt;code&gt;new&lt;/code&gt;. That constructor may take a list of initializers for the various elements of the new struct.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; は、常に &lt;code&gt;new&lt;/code&gt; というコンストラクターを作成します。そのコンストラクターは、新しい構造体のさまざまな要素の初期化子のリストを取得する場合があります。</target>
        </trans-unit>
        <trans-unit id="3422bf47e22c738697fbe6e62d2577b16012d3b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strxfrm()&lt;/code&gt; takes a string and maps it into a transformed string for use in char-by-char comparisons against other transformed strings during collation. &quot;Under the hood&quot;, locale-affected Perl comparison operators call &lt;code&gt;strxfrm()&lt;/code&gt; for both operands, then do a char-by-char comparison of the transformed strings. By calling &lt;code&gt;strxfrm()&lt;/code&gt; explicitly and using a non locale-affected comparison, the example attempts to save a couple of transformations. But in fact, it doesn't save anything: Perl magic (see &lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;&quot;Magic Variables&quot; in perlguts&lt;/a&gt;) creates the transformed version of a string the first time it's needed in a comparison, then keeps this version around in case it's needed again. An example rewritten the easy way with &lt;code&gt;cmp&lt;/code&gt; runs just about as fast. It also copes with null characters embedded in strings; if you call &lt;code&gt;strxfrm()&lt;/code&gt; directly, it treats the first null it finds as a terminator. Don't expect the transformed strings it produces to be portable across systems--or even from one revision of your operating system to the next. In short, don't call &lt;code&gt;strxfrm()&lt;/code&gt; directly: let Perl do it for you.</source>
          <target state="translated">&lt;code&gt;strxfrm()&lt;/code&gt; は文字列を受け取り、それを変換された文字列にマップして、照合中に他の変換された文字列との文字ごとの比較に使用します。 「 &lt;code&gt;strxfrm()&lt;/code&gt; 」では、ロケールの影響を受けるPerl比較演算子は、両方のオペランドに対してstrxfrm（）を呼び出し、変換された文字列の文字ごとの比較を行います。 &lt;code&gt;strxfrm()&lt;/code&gt; を明示的に呼び出し、ロケールの影響を受けない比較を使用することにより、この例ではいくつかの変換を保存しようとします。しかし実際には、何も保存されません&lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;。Perlマジック&lt;/a&gt;（perlgutsの「マジック変数」を参照）は、比較で最初に必要になったときに文字列の変換バージョンを作成し、再び必要になった場合に備えてこのバージョンを保持します。 &lt;code&gt;cmp&lt;/code&gt; で簡単な方法を書き直した例ほぼ同じ速さで実行されます。また、文字列に埋め込まれたnull文字にも対応します。 &lt;code&gt;strxfrm()&lt;/code&gt; を直接呼び出すと、最初に見つかったnullをターミネーターとして扱います。生成される変換された文字列がシステム間で、またはオペレーティングシステムのあるリビジョンから次のリビジョンに移植可能であると期待しないでください。つまり、 &lt;code&gt;strxfrm()&lt;/code&gt; を直接呼び出さないでください。Perlに任せてください。</target>
        </trans-unit>
        <trans-unit id="55f3f10d3365e07935bc666c63b8354aa30d2606" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strxfrm()&lt;/code&gt; takes a string and maps it into a transformed string for use in char-by-char comparisons against other transformed strings during collation. &quot;Under the hood&quot;, locale-affected Perl comparison operators call &lt;code&gt;strxfrm()&lt;/code&gt; for both operands, then do a char-by-char comparison of the transformed strings. By calling &lt;code&gt;strxfrm()&lt;/code&gt; explicitly and using a non locale-affected comparison, the example attempts to save a couple of transformations. But in fact, it doesn't save anything: Perl magic (see &lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;Magic Variables in perlguts&lt;/a&gt;) creates the transformed version of a string the first time it's needed in a comparison, then keeps this version around in case it's needed again. An example rewritten the easy way with &lt;code&gt;cmp&lt;/code&gt; runs just about as fast. It also copes with null characters embedded in strings; if you call &lt;code&gt;strxfrm()&lt;/code&gt; directly, it treats the first null it finds as a terminator. don't expect the transformed strings it produces to be portable across systems--or even from one revision of your operating system to the next. In short, don't call &lt;code&gt;strxfrm()&lt;/code&gt; directly: let Perl do it for you.</source>
          <target state="translated">&lt;code&gt;strxfrm()&lt;/code&gt; は文字列を取得し、照合中に他の変換された文字列とのchar-by-char比較で使用するために変換された文字列にマップします。 「 &lt;code&gt;strxfrm()&lt;/code&gt; 」では、ロケールの影響を受けるPerl比較演算子が両方のオペランドに対してstrxfrm（）を呼び出してから、変換された文字列を文字ごとに比較します。 &lt;code&gt;strxfrm()&lt;/code&gt; を明示的に呼び出し、ロケールに影響されない比較を使用することにより、この例では、いくつかの変換を保存しようとします。しかし、実際には何も保存されません&lt;a href=&quot;perlguts#Magic-Variables&quot;&gt;。Perl&lt;/a&gt;マジック（perlgutsのMagic Variablesを参照）は、比較で初めて必要になったときに文字列の変換されたバージョンを作成し、再び必要になった場合に備えてこのバージョンを保持します。 &lt;code&gt;cmp&lt;/code&gt; で簡単に書き直した例ほぼ同じ速度で実行されます。また、文字列に埋め込まれたnull文字にも対応します。 &lt;code&gt;strxfrm()&lt;/code&gt; を直接呼び出すと、最初に見つかったnullをターミネータとして扱います。変換された文字列がシステム間で移植可能であるとは期待しないでください。オペレーティングシステムのリビジョン間でさえも移植可能です。つまり、 &lt;code&gt;strxfrm()&lt;/code&gt; を直接呼び出さないでください。Perlに任せてください。</target>
        </trans-unit>
        <trans-unit id="eae013383db419ee7073c6ec936d1ee516677026" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subbeg&lt;/code&gt;&lt;code&gt;sublen&lt;/code&gt;&lt;code&gt;saved_copy&lt;/code&gt;&lt;code&gt;suboffset&lt;/code&gt;&lt;code&gt;subcoffset&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;subbeg&lt;/code&gt;&lt;code&gt;sublen&lt;/code&gt;&lt;code&gt;saved_copy&lt;/code&gt;&lt;code&gt;suboffset&lt;/code&gt;&lt;code&gt;subcoffset&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bbbc9ec3becb0729e14cb1a39b889ca48e69af5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subtest()&lt;/code&gt; runs the &amp;amp;code as its own little test with its own plan and its own result. The main test counts this as a single test using the result of the whole subtest to determine if its ok or not ok.</source>
          <target state="translated">&lt;code&gt;subtest()&lt;/code&gt; は、独自の計画と独自の結果を持つ独自の小さなテストとして＆codeを実行します。メインテストでは、サブテスト全体の結果を使用して、これが単一のテストとしてカウントされ、問題がないかどうかが判断されます。</target>
        </trans-unit>
        <trans-unit id="40bfa9180cd766541f95ecd65e0c84670fed2bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subtest&lt;/code&gt; also, and optionally, accepts arguments which will be passed to the subtests reference.</source>
          <target state="translated">&lt;code&gt;subtest&lt;/code&gt; また、オプションで、サブテスト参照に渡される引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="3d7e26bf7c2983b065b13497648ff49834a4e28e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt; &amp;mdash; Boolean indicating whether the operation returned a 2XX status code</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; &amp;mdash;操作が2XXステータスコードを返したかどうかを示すブール値</target>
        </trans-unit>
        <trans-unit id="53945fe0e229f2a3d9e218abb1d550e5ef4cb623" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; , or &lt;code&gt;fatal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; 、または &lt;code&gt;fatal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e91ef20313244695042fbdb9523a597b0812cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;fatal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; 、または &lt;code&gt;fatal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5edbfcf499afde359ec82161688eeb181e0cc64e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;summary&lt;/code&gt; prints the summary report after all tests are run. The first argument is an aggregate to summarise. An optional second argument may be set to a true value to indicate that the summary is being output as a result of an interrupted test run.</source>
          <target state="translated">&lt;code&gt;summary&lt;/code&gt; は、すべてのテストが実行された後に要約レポートを出力します。最初の引数は要約する集約です。オプションの2番目の引数は、中断されたテスト実行の結果として要約が出力されていることを示すためにtrue値に設定できます。</target>
        </trans-unit>
        <trans-unit id="b7d76fa49c169f566fa1c1da718f1e7b2ad5c1be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt; , &lt;code&gt;av&lt;/code&gt; , &lt;code&gt;hv&lt;/code&gt; , etc. represent variables of their respective types.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 、 &lt;code&gt;av&lt;/code&gt; 、 &lt;code&gt;hv&lt;/code&gt; などは、それぞれのタイプの変数を表します。</target>
        </trans-unit>
        <trans-unit id="40e738adb0309ebb6a8435f716aa40a76e770938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt; and &lt;code&gt;mg&lt;/code&gt; are the tied thingy and the tie magic.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; と &lt;code&gt;mg&lt;/code&gt; は引き分けのものであり、引き分けの魔法です。</target>
        </trans-unit>
        <trans-unit id="fd7ac714e7e858b4bd36af6eb630a83e9e72f3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt; optionally supplies the variable that will be aliased to each item in turn; if null, it defaults to &lt;code&gt;$_&lt;/code&gt;. &lt;code&gt;expr&lt;/code&gt; supplies the list of values to iterate over. &lt;code&gt;block&lt;/code&gt; supplies the main body of the loop, and &lt;code&gt;cont&lt;/code&gt; optionally supplies a &lt;code&gt;continue&lt;/code&gt; block that operates as a second half of the body. All of these optree inputs are consumed by this function and become part of the constructed op tree.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; は、オプションで、各アイテムに順番にエイリアスされる変数を提供します。nullの場合、デフォルトで &lt;code&gt;$_&lt;/code&gt; ます。 &lt;code&gt;expr&lt;/code&gt; は、反復する値のリストを提供します。 &lt;code&gt;block&lt;/code&gt; はループの本体を提供し、 &lt;code&gt;cont&lt;/code&gt; はオプションで本体の後半として動作する &lt;code&gt;continue&lt;/code&gt; ブロックを提供します。これらのoptree入力はすべて、この関数によって消費され、構築されたopツリーの一部になります。</target>
        </trans-unit>
        <trans-unit id="333f519f07c55ae031f435eafb31d68db181893e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv&lt;/code&gt;, &lt;code&gt;av&lt;/code&gt;, &lt;code&gt;hv&lt;/code&gt;, etc. represent variables of their respective types.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 、 &lt;code&gt;av&lt;/code&gt; 、 &lt;code&gt;hv&lt;/code&gt; などは、それぞれのタイプの変数を表します。</target>
        </trans-unit>
        <trans-unit id="f6186b5a2d793323ec197d8a7ba5e492ded38439" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_newmortal()&lt;/code&gt; creates an SV (with the undefined value) whose sole reference is mortal. &lt;code&gt;sv_mortalcopy()&lt;/code&gt; creates an xV whose value is a copy of a supplied xV and whose sole reference is mortal. &lt;code&gt;sv_2mortal()&lt;/code&gt; mortalises an existing xV reference: it transfers ownership of a reference from the caller to the temps stack. Because &lt;code&gt;sv_newmortal&lt;/code&gt; gives the new SV no value, it must normally be given one via &lt;code&gt;sv_setpv&lt;/code&gt;, &lt;code&gt;sv_setiv&lt;/code&gt;, etc. :</source>
          <target state="translated">&lt;code&gt;sv_newmortal()&lt;/code&gt; は、唯一の参照がmortalであるSV（未定義の値）を作成します。 &lt;code&gt;sv_mortalcopy()&lt;/code&gt; は、値が指定されたxVのコピーであり、唯一の参照がmortalであるxVを作成します。 &lt;code&gt;sv_2mortal()&lt;/code&gt; は、既存のxV参照を破棄します。参照の所有権を呼び出し元から一時スタックに転送します。ので &lt;code&gt;sv_newmortal&lt;/code&gt; は、新しいSVに何も値を与えていない、それは通常を通じて1を与えられなければならない &lt;code&gt;sv_setpv&lt;/code&gt; 、 &lt;code&gt;sv_setiv&lt;/code&gt; など、：</target>
        </trans-unit>
        <trans-unit id="a9c898bb2d89a58d12a4afd52693893972cc7118" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt; , and &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; 、 &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt; 、および &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; は、この関数の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="29e86afca5e89be112747e7c177a4d9e70c992e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_utf8_upgrade&lt;/code&gt;, &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt;, and &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; are implemented in terms of this function.</source>
          <target state="translated">&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; 、 &lt;code&gt;sv_utf8_upgrade_nomg&lt;/code&gt; 、および &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; は、この関数の観点から実装されています。</target>
        </trans-unit>
        <trans-unit id="157cb2f67b5c943efab75ae716b270926cd23e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_vsetpvfn&lt;/code&gt; is an analogue of &lt;code&gt;vsprintf&lt;/code&gt; , but it allows you to specify either a pointer to a variable argument list or the address and length of an array of SVs. The last argument points to a boolean; on return, if that boolean is true, then locale-specific information has been used to format the string, and the string's contents are therefore untrustworthy (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). This pointer may be NULL if that information is not important. Note that this function requires you to specify the length of the format.</source>
          <target state="translated">&lt;code&gt;sv_vsetpvfn&lt;/code&gt; は &lt;code&gt;vsprintf&lt;/code&gt; に類似していますが、可変引数リストへのポインター、またはSVの配列のアドレスと長さを指定できます。最後の引数はブール値を指しています。戻り時に、そのブール値がtrueの場合、ロケール固有の情報が文字列のフォーマットに使用されているため、文字列の内容は信頼できません（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）。その情報が重要でない場合、このポインタはNULLになることがあります。この関数では、フォーマットの長さを指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="45b0e4532eab3f4685ffc68239603f95fffd5e78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sv_vsetpvfn&lt;/code&gt; is an analogue of &lt;code&gt;vsprintf&lt;/code&gt;, but it allows you to specify either a pointer to a variable argument list or the address and length of an array of SVs. The last argument points to a boolean; on return, if that boolean is true, then locale-specific information has been used to format the string, and the string's contents are therefore untrustworthy (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). This pointer may be NULL if that information is not important. Note that this function requires you to specify the length of the format.</source>
          <target state="translated">&lt;code&gt;sv_vsetpvfn&lt;/code&gt; は &lt;code&gt;vsprintf&lt;/code&gt; に類似していますが、可変引数リストへのポインター、またはSVの配列のアドレスと長さのいずれかを指定できます。最後の引数はブール値を指します。戻り時に、そのブール値がtrueの場合、ロケール固有の情報が文字列のフォーマットに使用されているため、文字列の内容は信頼できません（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）。その情報が重要でない場合、このポインターはNULLになる可能性があります。この関数では、フォーマットの長さを指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6192b1f9a09d1e08c5d741af54f3f7df0fea1f0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swashp&lt;/code&gt; is a pointer to the swash to use.</source>
          <target state="translated">&lt;code&gt;swashp&lt;/code&gt; は、使用するスワッシュへのポインターです。</target>
        </trans-unit>
        <trans-unit id="aef4e35b1afe3553efb4b712e9852e7aa7d3f53a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; - allow the use of &lt;code&gt;~~&lt;/code&gt;, given, and when</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; - &lt;code&gt;~~&lt;/code&gt; 、与えられた、そしていつの使用を許可します</target>
        </trans-unit>
        <trans-unit id="df2da7c9c32ace5dff26064e81dc2ec6cc09498f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync&lt;/code&gt; synchronizes a file's in-memory state with that on the physical medium. &lt;code&gt;sync&lt;/code&gt; does not operate at the perlio api level, but operates on the file descriptor (similar to sysread, sysseek and systell). This means that any data held at the perlio api level will not be synchronized. To synchronize data that is buffered at the perlio api level you must use the flush method. &lt;code&gt;sync&lt;/code&gt; is not implemented on all platforms. Returns &quot;0 but true&quot; on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; for an invalid handle. See</source>
          <target state="translated">&lt;code&gt;sync&lt;/code&gt; は、ファイルのメモリ内の状態を物理メディア上の状態と同期します。 &lt;code&gt;sync&lt;/code&gt; はperlio apiレベルでは動作しませんが、ファイル記述子で動作します（sysread、sysseek、systellと同様）。つまり、perlio apiレベルで保持されているデータは同期されません。perlio apiレベルでバッファーされたデータを同期するには、flushメソッドを使用する必要があります。 &lt;code&gt;sync&lt;/code&gt; はすべてのプラットフォームに実装されているわけではありません。返し、成功時に「0だが真」 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を、エラー時に &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 無効なハンドルのために。見る</target>
        </trans-unit>
        <trans-unit id="641ae46752b733268d4ff91c13386322a2ff65db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync&lt;/code&gt; synchronizes a file's in-memory state with that on the physical medium. &lt;code&gt;sync&lt;/code&gt; does not operate at the perlio api level, but operates on the file descriptor (similar to sysread, sysseek and systell). This means that any data held at the perlio api level will not be synchronized. To synchronize data that is buffered at the perlio api level you must use the flush method. &lt;code&gt;sync&lt;/code&gt; is not implemented on all platforms. Returns &quot;0 but true&quot; on success, &lt;code&gt;undef&lt;/code&gt; on error, &lt;code&gt;undef&lt;/code&gt; for an invalid handle. See &lt;a&gt;fsync(3c)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;sync&lt;/code&gt; は、ファイルのメモリ内の状態を物理メディア上の状態と同期します。 &lt;code&gt;sync&lt;/code&gt; はperlioapiレベルでは動作しませんが、ファイル記述子（sysread、sysseek、およびsystellと同様）で動作します。これは、perlioapiレベルで保持されているデータが同期されないことを意味します。 perlio apiレベルでバッファリングされているデータを同期するには、flushメソッドを使用する必要があります。 &lt;code&gt;sync&lt;/code&gt; はすべてのプラットフォームに実装されているわけではありません。成功した場合は「 &lt;code&gt;undef&lt;/code&gt; 」を返し、エラーの場合は &lt;code&gt;undef&lt;/code&gt; を返し、無効なハンドルの場合はundefを返します。&lt;a&gt;fsync（3c）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f52732e5ca5d6dc1f9d7a73b47a336dd75ae0832" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sysread()&lt;/code&gt; and &lt;code&gt;syswrite()&lt;/code&gt; should not be used on file handles with character encoding layers, they behave badly, and that behaviour has been deprecated since perl 5.24.</source>
          <target state="translated">&lt;code&gt;sysread()&lt;/code&gt; および &lt;code&gt;syswrite()&lt;/code&gt; は、文字エンコード層のあるファイルハンドルでは使用しないでください。これらの動作は不適切であり、この動作はperl5.24以降非推奨になっています。</target>
        </trans-unit>
        <trans-unit id="a7a1d988b5d966d66bda631776a131bc7766695f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;system&lt;/code&gt; also provides direct control over whether shell wildcard processing may take place, whereas backticks do not.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; は、シェルワイルドカード処理を実行できるかどうかを直接制御することもできますが、バックティックは実行しません。</target>
        </trans-unit>
        <trans-unit id="8dae47b8de1a6666d5c99c3d891e28c5d893f5b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;talk&lt;/code&gt; is a reference to an array that contains alternating questions and answers. Questions are regular expressions and answers are literal strings. The Expect module watches the stream from the execution of the external program (&lt;code&gt;perl Makefile.PL&lt;/code&gt; , &lt;code&gt;perl
Build.PL&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; , etc.).</source>
          <target state="translated">&lt;code&gt;talk&lt;/code&gt; は、交互の質問と回答を含む配列への参照です。質問は正規表現であり、回答はリテラル文字列です。Expectモジュールは、外部プログラム（ &lt;code&gt;perl Makefile.PL&lt;/code&gt; 、 &lt;code&gt;perl Build.PL&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; など）の実行からストリームを監視します。</target>
        </trans-unit>
        <trans-unit id="5a08a149b1432446a1f11c65976e031610a41451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="0ad3f8e851285dfbe4f6b91f450bb2505e866a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test_fail&lt;/code&gt; exists as a convenience function that can be called instead. It takes one argument, the offset from the current line that the line that causes the fail is on.</source>
          <target state="translated">&lt;code&gt;test_fail&lt;/code&gt; は、代わりに呼び出すことができる便利な関数として存在します。1つの引数、現在の行からのオフセットを取得します。これは、失敗の原因となっている行がオンになっていることです。</target>
        </trans-unit>
        <trans-unit id="90da6b1102889759293d832aa8ea25d7abcef86c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;threads-&amp;gt;list()&lt;/code&gt; returns a list of thread objects, one for each thread that's currently running and not detached. Handy for a number of things, including cleaning up at the end of your program (from the main Perl thread, of course):</source>
          <target state="translated">&lt;code&gt;threads-&amp;gt;list()&lt;/code&gt; は、現在実行されていて切り離されていないスレッドごとに1つずつ、スレッドオブジェクトのリストを返します。プログラムの最後でのクリーンアップ（もちろん、メインのPerlスレッドからのクリーンアップ）を含む、多くのことに便利です。</target>
        </trans-unit>
        <trans-unit id="01a84580d195b2879df6edd3b9fb211e6bd1e201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tick&lt;/code&gt;, &lt;code&gt;quoteHighBit&lt;/code&gt;, &lt;code&gt;printUndef&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tick&lt;/code&gt;, &lt;code&gt;quoteHighBit&lt;/code&gt;, &lt;code&gt;printUndef&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37fe7f59563dbe7257cc9d61b178eb076121ea2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tid()&lt;/code&gt; is a thread object method that returns the thread ID of the thread the object represents. Thread IDs are integers, with the main thread in a program being 0. Currently Perl assigns a unique TID to every thread ever created in your program, assigning the first thread to be created a TID of 1, and increasing the TID by 1 for each new thread that's created. When used as a class method, &lt;code&gt;threads-&amp;gt;tid()&lt;/code&gt; can be used by a thread to get its own TID.</source>
          <target state="translated">&lt;code&gt;tid()&lt;/code&gt; は、オブジェクトが表すスレッドのスレッドIDを返すスレッドオブジェクトメソッドです。スレッドIDは整数であり、プログラムのメインスレッドは0です。現在、Perlは、プログラムでこれまでに作成されたすべてのスレッドに一意のTIDを割り当て、作成される最初のスレッドに1のTIDを割り当て、TIDを1ずつ増やします作成された新しいスレッド。クラスメソッドとして使用する場合、 &lt;code&gt;threads-&amp;gt;tid()&lt;/code&gt; を使用して、独自のTIDを取得できます。</target>
        </trans-unit>
        <trans-unit id="3e5a788348d8864316119440464ae18df37f7eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="81be08d630009f1394c690c301f7f5a7b2339e69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timelocal()&lt;/code&gt; and &lt;code&gt;timegm()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; および &lt;code&gt;timegm()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="15042c572a01150cfb24fe4943a335ce4853ab16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timelocal_modern()&lt;/code&gt; and &lt;code&gt;timegm_modern()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timelocal_modern()&lt;/code&gt; および &lt;code&gt;timegm_modern()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d00ab1ec67e662b179958a94aeba2124bbb15e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timelocal_nocheck()&lt;/code&gt; and &lt;code&gt;timegm_nocheck()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;timelocal_nocheck()&lt;/code&gt; および &lt;code&gt;timegm_nocheck()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="47bf99f23525fe65db8d003f48ed26cc136216f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; &amp;mdash; Request timeout in seconds (default is 60) If a socket open, read or write takes longer than the timeout, an exception is thrown.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; &amp;mdash;秒単位の要求タイムアウト（デフォルトは60）ソケットのオープン、読み取り、または書き込みにタイムアウトよりも長い時間がかかる場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="fa1f26ad06e5c0601fee78fd543cafca65d09238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; - equivalent to &lt;code&gt;$sock_timeout&lt;/code&gt; , sets the socket timeout in seconds. Defaults to 0 on all systems except Mac OS X where it is set to 0.25 sec.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; -に相当 &lt;code&gt;$sock_timeout&lt;/code&gt; 、秒単位でソケットのタイムアウトを設定します。0.25秒に設定されているMac OS Xを除くすべてのシステムのデフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="0d40ed8263db69f63f85252a957f6a1923552655" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; - equivalent to &lt;code&gt;$sock_timeout&lt;/code&gt;, sets the socket timeout in seconds. Defaults to 0 on all systems except Mac OS X where it is set to 0.25 sec.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; -に相当 &lt;code&gt;$sock_timeout&lt;/code&gt; 、秒単位でソケットのタイムアウトを設定します。0.25秒に設定されているMacOS Xを除くすべてのシステムで、デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="1223429184be3c4a3e3dbe7bc07b1c04c106dc15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; denotes a timeout in seconds. Floating-point timeouts are OK. With &lt;code&gt;mode=deterministic&lt;/code&gt; , the timeout denotes the timeout per question; with &lt;code&gt;mode=anyorder&lt;/code&gt; it denotes the timeout per byte received from the stream or questions.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; は、秒単位のタイムアウトを示します。浮動小数点タイムアウトは問題ありません。で &lt;code&gt;mode=deterministic&lt;/code&gt; 、タイムアウトは質問ごとにタイムアウトを示し、で &lt;code&gt;mode=anyorder&lt;/code&gt; それはストリームまたは質問から受信したバイト当たりのタイムアウトを示しています。</target>
        </trans-unit>
        <trans-unit id="dd0df4bd3a02dfe65598daa77dcdc6e0c0b22412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todo()&lt;/code&gt; is about finding the right package to look for &lt;code&gt;$TODO&lt;/code&gt; in. It's pretty good at guessing the right package to look at. It first looks for the caller based on &lt;code&gt;$Level + 1&lt;/code&gt; , since &lt;code&gt;todo()&lt;/code&gt; is usually called inside a test function. As a last resort it will use &lt;code&gt;exported_to()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;todo()&lt;/code&gt; は、 &lt;code&gt;$TODO&lt;/code&gt; を探すための適切なパッケージを見つけることです。調べるべき適切なパッケージを推測するのは非常に優れています。それに基づいて、発信者のための最初のルックス &lt;code&gt;$Level + 1&lt;/code&gt; 以降、 &lt;code&gt;todo()&lt;/code&gt; 通常、テスト関数の内部で呼ばれています。最後の手段として、 &lt;code&gt;exported_to()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9f258b2d9b8d09d9fae8fc22e4845c2a47b1ddb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todo()&lt;/code&gt; is about finding the right package to look for &lt;code&gt;$TODO&lt;/code&gt; in. It's pretty good at guessing the right package to look at. It first looks for the caller based on &lt;code&gt;$Level + 1&lt;/code&gt;, since &lt;code&gt;todo()&lt;/code&gt; is usually called inside a test function. As a last resort it will use &lt;code&gt;exported_to()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;todo()&lt;/code&gt; は、 &lt;code&gt;$TODO&lt;/code&gt; を探すのに適切なパッケージを見つけることです。見るのに適切なパッケージを推測するのはかなり得意です。それに基づいて、発信者のための最初のルックス &lt;code&gt;$Level + 1&lt;/code&gt; 以降、 &lt;code&gt;todo()&lt;/code&gt; 通常、テスト関数の内部で呼ばれています。最後の手段として、 &lt;code&gt;exported_to()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="480a9cfa214732ba9a24ba357b41b6de49286344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;todo_output&lt;/code&gt; is used instead of &lt;code&gt;failure_output()&lt;/code&gt; for the diagnostics of a failing TODO test. These will not be seen by the user.</source>
          <target state="translated">&lt;code&gt;todo_output&lt;/code&gt; は、失敗したTODOテストの診断に、failure_output &lt;code&gt;failure_output()&lt;/code&gt; 代わりに使用されます。これらはユーザーには表示されません。</target>
        </trans-unit>
        <trans-unit id="63b5f25eda63530af4b5b7de433395a3f0e3e276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tr///&lt;/code&gt;, &lt;code&gt;y///&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tr///&lt;/code&gt;, &lt;code&gt;y///&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e3ddec8a45eeda13fb91eb0ae8954551ddba8e30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trailer_callback&lt;/code&gt; &amp;mdash; A code reference that will be called if it exists to provide a hashref of trailing headers (only used with chunked transfer-encoding)</source>
          <target state="translated">&lt;code&gt;trailer_callback&lt;/code&gt; &amp;mdash;末尾ヘッダーのハッシュ参照を提供するために存在する場合に呼び出されるコード参照（チャンク転送エンコーディングでのみ使用）</target>
        </trans-unit>
        <trans-unit id="45f6fa502080435164a069d25ad4e047384a776b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; - equivalent to &lt;code&gt;$sock_type&lt;/code&gt; , selects the socket type (or &quot;mechanism&quot;). An array reference can be passed to specify several mechanisms to try, in the given order.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; -に相当 &lt;code&gt;$sock_type&lt;/code&gt; 、ソケットタイプ（または「メカニズム」）を選択します。配列参照を渡して、試行するいくつかのメカニズムを指定の順序で指定できます。</target>
        </trans-unit>
        <trans-unit id="f30209a9c17c2698d845377a2869740567d6669e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; - equivalent to &lt;code&gt;$sock_type&lt;/code&gt;, selects the socket type (or &quot;mechanism&quot;). An array reference can be passed to specify several mechanisms to try, in the given order.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; -に相当 &lt;code&gt;$sock_type&lt;/code&gt; 、ソケットタイプ（または「メカニズム」）を選択します。配列参照を渡して、試行するいくつかのメカニズムを指定された順序で指定できます。</target>
        </trans-unit>
        <trans-unit id="201b469f2e38039b039595a7bfd410577149a7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; , where it is equivalent to 1 (or 45, which here is equivalent).</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 、1と同等（または45、ここでは同等）。</target>
        </trans-unit>
        <trans-unit id="47456dc4ed8c495bfa1ec258b5fe33359e7ae949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, where it is equivalent to 1 (or 45, which here is equivalent).</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 、ここで1（または45、ここでは同等）に相当します。</target>
        </trans-unit>
        <trans-unit id="904baef9244a9061ba1e5baaa7bde6857e2dd419" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt; is always treated as numeric, and in particular is changed to &lt;code&gt;0&lt;/code&gt; before incrementing (so that a post-increment of an undef value will return &lt;code&gt;0&lt;/code&gt; rather than &lt;code&gt;undef&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; は常に数値として扱われ、特にインクリメントする前に &lt;code&gt;0&lt;/code&gt; に変更されます（したがって、undef値のポストインクリメントはundefではなく &lt;code&gt;0&lt;/code&gt; を返し &lt;code&gt;undef&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d344aa8d59bc6d9dc9bc4053bff6b659ec168c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt; only ever matches another &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; は、別のundefとのみ一致し &lt;code&gt;undef&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14c4c57a89d245b76f4faa55818a7b4b4128be79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt; will only ever match &lt;code&gt;undef&lt;/code&gt;. So you can test a value against &lt;code&gt;undef&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; はundefとのみ一致し &lt;code&gt;undef&lt;/code&gt; 。したがって、次のように &lt;code&gt;undef&lt;/code&gt; に対して値をテストできます。</target>
        </trans-unit>
        <trans-unit id="fd3ff8b5f0a042c50be93a5729b5b85e516c3d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;, indicating that no prefs files remain to be found</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; は、設定ファイルがまだ見つからないことを示します</target>
        </trans-unit>
        <trans-unit id="57cc6e1b81814a09169f200f225fe6bcb63529d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;, which is a valid scalar), the original deserialised hash will be inserted. This setting can slow down decoding considerably.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; 有効なスカラーであるundef）、元の逆シリアル化されたハッシュが挿入されます。この設定により、デコードが大幅に遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="53b4d96f2f281815a4c230e88fda03f84150f077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;-ing a &lt;code&gt;Tie::File&lt;/code&gt; array element just blanks out the corresponding record in the file. When you read it back again, you'll get the empty string, so the supposedly-&lt;code&gt;undef&lt;/code&gt;'ed value will be defined. Similarly, if you have &lt;code&gt;autochomp&lt;/code&gt; disabled, then</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; &lt;code&gt;Tie::File&lt;/code&gt; 配列要素を定義解除すると、ファイル内の対応するレコードが空白になります。もう一度読み返すと、空の文字列が返されるので、おそらく &lt;code&gt;undef&lt;/code&gt; の値が定義されます。同様に、 &lt;code&gt;autochomp&lt;/code&gt; 無効にしている場合は、</target>
        </trans-unit>
        <trans-unit id="dedf861fafa961a23cfda13ddd6f5764ed4cc713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undef&lt;/code&gt;. The value of the macro is not needed.</source>
          <target state="translated">&lt;code&gt;undef&lt;/code&gt; 。マクロの値は必要ありません。</target>
        </trans-unit>
        <trans-unit id="04aeee1dcd5104050c34c9167c016f0abab6c44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unicode_eval&lt;/code&gt; changes the behavior of plain string &lt;code&gt;eval&lt;/code&gt; to work more consistently, especially in the Unicode world. Certain (mis)behaviors couldn't be changed without breaking some things that had come to rely on them, so the feature can be enabled and disabled. Details are at &lt;a href=&quot;perlfunc#Under-the-%22unicode_eval%22-feature&quot;&gt;&quot;Under the &quot;unicode_eval&quot; feature&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;unicode_eval&lt;/code&gt; は、特にUnicodeの世界で、より一貫して機能するようにプレーン文字列 &lt;code&gt;eval&lt;/code&gt; の動作を変更します。特定の（誤った）動作は、それらに依存するようになったいくつかのことを壊さずに変更できないため、機能を有効または無効にすることができます。詳細は&lt;a href=&quot;perlfunc#Under-the-%22unicode_eval%22-feature&quot;&gt;、perlfuncの「unicode_eval」機能の下にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d894b0dfce17a1497005852b9dfd4d7177a5014d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unixify&lt;/code&gt; on the resulting file specification may not result in the original Unix file specification, so programs should not plan to convert a file specification from Unix to VMS and then back to Unix again after modification of the components.</source>
          <target state="translated">&lt;code&gt;unixify&lt;/code&gt; 結果のファイル仕様をunixifyすると、元のUnixファイル仕様にならない場合があるため、プログラムは、ファイル仕様をUnixからVMSに変換し、コンポーネントの変更後に再びUnixに戻すことを計画しないでください。</target>
        </trans-unit>
        <trans-unit id="74ef1be18f87901f5ccbe85addef0901d51f67cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unknown&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;unknown&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="4f83ff1d4682685cbd2f8afa49310d2e61c28282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlink&lt;/code&gt; will delete a file if at all possible, even if it requires changing file protection (though it won't try to change the protection of the parent directory). You can tell whether you've got explicit delete access to a file by using the &lt;code&gt;VMS::Filespec::candelete&lt;/code&gt; operator. For instance, in order to delete only files to which you have delete access, you could say something like</source>
          <target state="translated">&lt;code&gt;unlink&lt;/code&gt; は、ファイル保護の変更が必要な場合でも、可能な限りファイルを削除します（ただし、親ディレクトリの保護を変更しようとはしません）。 &lt;code&gt;VMS::Filespec::candelete&lt;/code&gt; 演算子を使用して、ファイルへの明示的な削除アクセス権があるかどうかを確認できます。たとえば、削除アクセス権を持つファイルのみを削除するには、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="467b41679413c9a8fc738c593b15964285b5346c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlink&lt;/code&gt; will delete the highest version of a file only; in order to delete all versions, you need to say</source>
          <target state="translated">&lt;code&gt;unlink&lt;/code&gt; すると、ファイルの最新バージョンのみが削除されます。すべてのバージョンを削除するには、次のように言う必要があります</target>
        </trans-unit>
        <trans-unit id="8613fe9e8f4b7f5c053abd048c52ac7b66243a9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unmemoize&lt;/code&gt; accepts a reference to, or the name of a previously memoized function, and undoes whatever it did to provide the memoized version in the first place, including making the name refer to the unmemoized version if appropriate. It returns a reference to the unmemoized version of the function.</source>
          <target state="translated">&lt;code&gt;unmemoize&lt;/code&gt; は、以前にメモ化された関数への参照または名前を受け入れ、最初にメモ化バージョンを提供するために行った処理を元に戻します。関数のメモ化されていないバージョンへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="d37e0040afc632f6d7e9f0edcbcd7999ecda8585" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unwrapped|made|tested successfully&lt;/code&gt; or something similar. Another situation where CPAN refuses to act is an &lt;code&gt;install&lt;/code&gt; if the corresponding &lt;code&gt;test&lt;/code&gt; was not successful.</source>
          <target state="translated">&lt;code&gt;unwrapped|made|tested successfully&lt;/code&gt; または類似のもの。CPANが動作を拒否するもう1つの状況は、対応する &lt;code&gt;test&lt;/code&gt; が成功しなかった場合の &lt;code&gt;install&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c76e8afb9eb470c6542de95c6fdb923fa4e1dc22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;unzip&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a141367ed9e8db70d8a48598a73de00d6074b349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unzip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;unzip&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターが必要です（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e5e5dfa01f20adda70ae490b1d7ced48e4188740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; &amp;mdash; URL that provided the response. This is the URL of the request unless there were redirections, in which case it is the last URL queried in a redirection chain</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; &amp;mdash;応答を提供したURL。これは、リダイレクトがない限り、リクエストのURLです。リダイレクトがあった場合は、リダイレクトチェーンで最後にクエリされたURLです。</target>
        </trans-unit>
        <trans-unit id="775adf7a055e6dd04a94860178a8c7033a66114b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use VERSION&lt;/code&gt; also lexically enables all features available in the requested version as defined by the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; pragma, disabling any features not in the requested version's feature bundle. See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;. Similarly, if the specified Perl version is greater than or equal to 5.12.0, strictures are enabled lexically as with &lt;a href=&quot;strict&quot;&gt;&lt;code&gt;use strict&lt;/code&gt;&lt;/a&gt;. Any explicit use of &lt;code&gt;use strict&lt;/code&gt; or &lt;code&gt;no strict&lt;/code&gt; overrides &lt;code&gt;use VERSION&lt;/code&gt;, even if it comes before it. Later use of &lt;code&gt;use VERSION&lt;/code&gt; will override all behavior of a previous &lt;code&gt;use VERSION&lt;/code&gt;, possibly removing the &lt;code&gt;strict&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt; added by &lt;code&gt;use VERSION&lt;/code&gt;. &lt;code&gt;use VERSION&lt;/code&gt; does not load the</source>
          <target state="translated">&lt;code&gt;use VERSION&lt;/code&gt; は、&lt;a href=&quot;feature&quot;&gt;機能&lt;/a&gt;プラグマで定義されているように、要求されたバージョンで使用可能なすべての機能を字句的に有効にし、要求されたバージョンの機能バンドルにない機能を無効にします。&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照してください。同様に、指定されたPerlバージョンが5.12.0以上の場合、strictureはusestrictと同様に字句的に有効になり&lt;a href=&quot;strict&quot;&gt; &lt;code&gt;use strict&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;use strict&lt;/code&gt; を明示的に使用する場合、または &lt;code&gt;no strict&lt;/code&gt; オーバーライドを &lt;code&gt;use VERSION&lt;/code&gt; ない場合は、その前にある場合でもVERSIONを使用します。後で使用 &lt;code&gt;use VERSION&lt;/code&gt; を使用すると、以前に &lt;code&gt;use VERSION&lt;/code&gt; すべての動作が上書きされ、によって追加された &lt;code&gt;strict&lt;/code&gt; &lt;code&gt;feature&lt;/code&gt; が削除される可能性があります。 &lt;code&gt;use VERSION&lt;/code&gt; 。 &lt;code&gt;use VERSION&lt;/code&gt; しても、</target>
        </trans-unit>
        <trans-unit id="717c117d37180baef4adfbf000524727bc507192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use bytes&lt;/code&gt; is usually a failed attempt to do something useful. Just forget about it.</source>
          <target state="translated">&lt;code&gt;use bytes&lt;/code&gt; は通常、何か有用なことをしようとして失敗した試みです。忘れてよ。</target>
        </trans-unit>
        <trans-unit id="0aa38eb6ffe74b5abdd43e2e0ac5b726882991ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use encoding ...&lt;/code&gt; is not thread-safe (i.e., do not use in threaded applications).</source>
          <target state="translated">&lt;code&gt;use encoding ...&lt;/code&gt; はスレッドセーフではありません（つまり、スレッド化されたアプリケーションでは使用しないでください）。</target>
        </trans-unit>
        <trans-unit id="a6f2b56f1c9a3044d97aa218ad8aea7f7b9cdf18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'fc'&lt;/code&gt; tells the compiler to enable the &lt;code&gt;fc&lt;/code&gt; function, which implements Unicode casefolding.</source>
          <target state="translated">&lt;code&gt;use feature 'fc'&lt;/code&gt; feature'fc 'は、Unicodeの大文字小文字の区別を実装する &lt;code&gt;fc&lt;/code&gt; 関数を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="14e16745836f5ce127bfa2bfd2cc3af2cfefa548" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'say'&lt;/code&gt; tells the compiler to enable the Perl 6 style &lt;code&gt;say&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;use feature 'say'&lt;/code&gt; 、Perl6スタイルの &lt;code&gt;say&lt;/code&gt; 関数を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="d2a96afe18265d9e679f00d2a3490fb1e880a320" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'state'&lt;/code&gt; tells the compiler to enable &lt;code&gt;state&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;use feature 'state'&lt;/code&gt; は、コンパイラに &lt;code&gt;state&lt;/code&gt; 変数を有効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="f19eba9a202b007212807a12e2c4702f09b892a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'switch'&lt;/code&gt; tells the compiler to enable the Perl 6 given/when construct.</source>
          <target state="translated">&lt;code&gt;use feature 'switch'&lt;/code&gt; は、Perl6のgiven / when構文を有効にするようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="43b1d8b49d90ed7714df07f45c6118bdb1fefaf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; tells the compiler to use Unicode rules in all string operations executed within its scope (unless they are also within the scope of either &lt;code&gt;use locale&lt;/code&gt; or &lt;code&gt;use bytes&lt;/code&gt;). The same applies to all regular expressions compiled within the scope, even if executed outside it. It does not change the internal representation of strings, but only how they are interpreted.</source>
          <target state="translated">&lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; （彼らはいずれかの範囲内にある場合を除き、その範囲内で実行されるすべての文字列操作でUnicodeのルールを使用するようにコンパイラ指示する &lt;code&gt;use locale&lt;/code&gt; または &lt;code&gt;use bytes&lt;/code&gt; ）。スコープ外で実行された場合でも、スコープ内でコンパイルされたすべての正規表現に同じことが当てはまります。文字列の内部表現は変更されませんが、文字列の解釈方法のみが変更されます。</target>
        </trans-unit>
        <trans-unit id="be49598767088a16f67d8e865b1d6de66c06090b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use re 'debug'&lt;/code&gt; enables you to see the gory details of how the Perl regular expression engine works. In order to understand this typically voluminous output, one must not only have some idea about how regular expression matching works in general, but also know how Perl's regular expressions are internally compiled into an automaton. These matters are explored in some detail in &lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;&quot;Debugging Regular Expressions&quot; in perldebguts&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;use re 'debug'&lt;/code&gt; re'debug 'を使用すると、Perl正規表現エンジンがどのように機能するかについての厄介な詳細を確認できます。この通常大量の出力を理解するには、正規表現のマッチングが一般的にどのように機能するかを理解するだけでなく、Perlの正規表現が内部でオートマトンにコンパイルされる方法も知っている必要があります。これらの問題については&lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;、perldebgutsの「正規表現のデバッグ」で&lt;/a&gt;詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="fc1e6e58c1c375445799dfd763325680eeb68f86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use utf8&lt;/code&gt; still needed to enable &lt;a href=&quot;#Unicode-Encodings&quot;&gt;UTF-8&lt;/a&gt; in scripts</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; スクリプトで&lt;a href=&quot;#Unicode-Encodings&quot;&gt;UTF-8&lt;/a&gt;を有効にするために引き続き必要なutf8を使用する</target>
        </trans-unit>
        <trans-unit id="3ef69911d7fdf83a2eb4ad2b4a9ebf4ca7e75fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use utf8&lt;/code&gt; wasn't implicitly declared so you have to &lt;code&gt;use utf8&lt;/code&gt; to do</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; は暗黙的に宣言されていない &lt;code&gt;use utf8&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="578368502634d503139789b27f785f7a4040cb4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;use&lt;/code&gt; a Perl module if a condition holds</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 条件が成立する場合はPerlモジュールを使用する</target>
        </trans-unit>
        <trans-unit id="7ba4443e83dc26256681811989a51344cf04a795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt; and &lt;code&gt;uid&lt;/code&gt; are aliases of &lt;code&gt;owner&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; と &lt;code&gt;uid&lt;/code&gt; は &lt;code&gt;owner&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="db9006160e92aa365d9ee98dad3ea083afe695fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;user&lt;/code&gt; and &lt;code&gt;uid&lt;/code&gt; are aliases of &lt;code&gt;owner&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;user&lt;/code&gt; と &lt;code&gt;uid&lt;/code&gt; は、 &lt;code&gt;owner&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="61f1ed7e3d101e35e8cb1464b06fde105ee5daff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ustrp&lt;/code&gt; is a pointer to the character buffer to put the conversion result to. &lt;code&gt;lenp&lt;/code&gt; is a pointer to the length of the result.</source>
          <target state="translated">&lt;code&gt;ustrp&lt;/code&gt; は、変換結果を格納する文字バッファーへのポインターです。 &lt;code&gt;lenp&lt;/code&gt; は結果の長さへのポインタです。</target>
        </trans-unit>
        <trans-unit id="8bd04fa099b83f91457c14073be07a2b7a9907c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::encode&lt;/code&gt; is like &lt;code&gt;utf8::upgrade&lt;/code&gt; , but the UTF8 flag is cleared. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for more on the UTF8 flag and the C API functions &lt;code&gt;sv_utf8_upgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_downgrade&lt;/code&gt; , &lt;code&gt;sv_utf8_encode&lt;/code&gt; , and &lt;code&gt;sv_utf8_decode&lt;/code&gt; , which are wrapped by the Perl functions &lt;code&gt;utf8::upgrade&lt;/code&gt; , &lt;code&gt;utf8::downgrade&lt;/code&gt; , &lt;code&gt;utf8::encode&lt;/code&gt; and &lt;code&gt;utf8::decode&lt;/code&gt; . Also, the functions utf8::is_utf8, utf8::valid, utf8::encode, utf8::decode, utf8::upgrade, and utf8::downgrade are actually internal, and thus always available, without a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; utf8&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;utf8::encode&lt;/code&gt; は &lt;code&gt;utf8::upgrade&lt;/code&gt; に似ていますが、UTF8フラグはクリアされています。参照してください&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照してください&lt;/a&gt; UTF8フラグの詳細についてをし、C API関数は &lt;code&gt;sv_utf8_upgrade&lt;/code&gt; 、 &lt;code&gt;sv_utf8_downgrade&lt;/code&gt; 、 &lt;code&gt;sv_utf8_encode&lt;/code&gt; 、および &lt;code&gt;sv_utf8_decode&lt;/code&gt; Perlの関数によってラップされ、 &lt;code&gt;utf8::upgrade&lt;/code&gt; 、 &lt;code&gt;utf8::downgrade&lt;/code&gt; 、 &lt;code&gt;utf8::encode&lt;/code&gt; と &lt;code&gt;utf8::decode&lt;/code&gt; 。また、関数utf8 :: is_utf8、utf8 :: valid、utf8 :: encode、utf8 :: decode、utf8 :: upgrade、およびutf8 :: downgradeは実際には内部にある &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; utf8&lt;/code&gt; 、require utf8ステートメントなしで常に使用できます。</target>
        </trans-unit>
        <trans-unit id="314672849dfbf9b9ebb5a47602618e0588d51913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::encode&lt;/code&gt; is like &lt;code&gt;utf8::upgrade&lt;/code&gt;, but the UTF8 flag is cleared. See &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, and the C API functions &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_upgrade&quot;&gt;sv_utf8_upgrade&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_downgrade&quot;&gt;&quot;sv_utf8_downgrade&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_encode&quot;&gt;&quot;sv_utf8_encode&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_decode&quot;&gt;&quot;sv_utf8_decode&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, which are wrapped by the Perl functions &lt;code&gt;utf8::upgrade&lt;/code&gt;, &lt;code&gt;utf8::downgrade&lt;/code&gt;, &lt;code&gt;utf8::encode&lt;/code&gt; and &lt;code&gt;utf8::decode&lt;/code&gt;. Also, the functions &lt;code&gt;utf8::is_utf8&lt;/code&gt;, &lt;code&gt;utf8::valid&lt;/code&gt;, &lt;code&gt;utf8::encode&lt;/code&gt;, &lt;code&gt;utf8::decode&lt;/code&gt;, &lt;code&gt;utf8::upgrade&lt;/code&gt;, and &lt;code&gt;utf8::downgrade&lt;/code&gt; are actually internal, and thus always available, without a &lt;code&gt;require utf8&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;utf8::encode&lt;/code&gt; は &lt;code&gt;utf8::upgrade&lt;/code&gt; に似ていますが、UTF8フラグがクリアされます。参照&lt;a href=&quot;perlunicode&quot;&gt;はperlunicodeを&lt;/a&gt;、そしてC API関数は &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_upgrade&quot;&gt;sv_utf8_upgrade&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_downgrade&quot;&gt;&quot;sv_utf8_downgrade&quot; in perlapi&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_encode&quot;&gt;&quot;sv_utf8_encode&quot; in perlapi&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;perlapi#sv_utf8_decode&quot;&gt;&quot;sv_utf8_decode&quot; in perlapi&lt;/a&gt;&lt;/code&gt; Perlの関数によってラップされ、 &lt;code&gt;utf8::upgrade&lt;/code&gt; 、 &lt;code&gt;utf8::downgrade&lt;/code&gt; 、 &lt;code&gt;utf8::encode&lt;/code&gt; および &lt;code&gt;utf8::decode&lt;/code&gt; 。また、関数 &lt;code&gt;utf8::is_utf8&lt;/code&gt; 、 &lt;code&gt;utf8::valid&lt;/code&gt; 、 &lt;code&gt;utf8::encode&lt;/code&gt; 、 &lt;code&gt;utf8::decode&lt;/code&gt; 、 &lt;code&gt;utf8::upgrade&lt;/code&gt; 、および &lt;code&gt;utf8::downgrade&lt;/code&gt; 実際には内部である &lt;code&gt;require utf8&lt;/code&gt; ステートメントなしで常に使用できます。</target>
        </trans-unit>
        <trans-unit id="5c0f365565ea0f61a34ffea2e594515494b47b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; および &lt;code&gt;utf8::native_to_unicode()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="322d02f8ccba9a276f3a31a9c308a4604cffd341" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; is used so that the Perl code is portable to EBCDIC platforms. You can omit it if you're</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; を使用して、PerlコードをEBCDICプラットフォームに移植できるようにします。あなたがしている場合は、それを省略できます</target>
        </trans-unit>
        <trans-unit id="bed6a550355dcf622a3f0f64161c1780b07934df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8&lt;/code&gt; controls whether the JSON text created by &lt;code&gt;encode&lt;/code&gt; (and expected by &lt;code&gt;decode&lt;/code&gt;) is UTF-8 encoded or not, while &lt;code&gt;latin1&lt;/code&gt; and &lt;code&gt;ascii&lt;/code&gt; only control whether &lt;code&gt;encode&lt;/code&gt; escapes character values outside their respective codeset range. Neither of these flags conflict with each other, although some combinations make less sense than others.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; は、 &lt;code&gt;encode&lt;/code&gt; によって作成された（そして &lt;code&gt;decode&lt;/code&gt; によって期待される）JSONテキストがUTF-8でエンコードされるかどうかを制御し &lt;code&gt;latin1&lt;/code&gt; 、latin1と &lt;code&gt;ascii&lt;/code&gt; は、 &lt;code&gt;encode&lt;/code&gt; がそれぞれのコードセット範囲外の文字値をエスケープするかどうかのみを制御します。これらのフラグはどちらも互いに競合しませんが、組み合わせによっては他の組み合わせよりも意味がありません。</target>
        </trans-unit>
        <trans-unit id="b33702a1264871bd0f65d056d75eef0c8add3f98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8&lt;/code&gt; flag disabled</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; フラグが無効</target>
        </trans-unit>
        <trans-unit id="9e2347ffa560fd355d58edc7dc62ab06f88d3e71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utf8&lt;/code&gt; flag enabled</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; フラグが有効</target>
        </trans-unit>
        <trans-unit id="8e2ca2030a09ee21c736f85339947d800c4bc9e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the scalar value to store for this key. &lt;code&gt;value&lt;/code&gt; is copied by this function, which thus does not take ownership of any reference to it, and later changes to the scalar will not be reflected in the value visible in the &lt;code&gt;refcounted_he&lt;/code&gt;. Complex types of scalar will not be stored with referential integrity, but will be coerced to strings. &lt;code&gt;value&lt;/code&gt; may be either null or &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; to indicate that no value is to be associated with the key; this, as with any non-null value, takes precedence over the existence of a value for the key further along the chain.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; は、このキーに格納するスカラー値です。 &lt;code&gt;value&lt;/code&gt; はこの関数によってコピーされるため、この関数への参照の所有権は取得されず、後でスカラーに変更が加えられても、 &lt;code&gt;refcounted_he&lt;/code&gt; に表示される値には反映されません。複雑なタイプのスカラーは参照整合性で格納されませんが、文字列に強制変換されます。 &lt;code&gt;value&lt;/code&gt; はnullまたは &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; のいずれかであり、値がキーに関連付けられないことを示します。これは、null以外の値と同様に、チェーンのさらに先にあるキーの値の存在よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="b8887e9f6da99c9e54f474e1c8e4528efba33e13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is the scalar value to store for this key. &lt;code&gt;value&lt;/code&gt; is copied by this function, which thus does not take ownership of any reference to it, and later changes to the scalar will not be reflected in the value visible in the cop hints hash. Complex types of scalar will not be stored with referential integrity, but will be coerced to strings.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; は、このキーに格納するスカラー値です。 &lt;code&gt;value&lt;/code&gt; はこの関数によってコピーされるため、この関数への参照の所有権は取得されず、後でスカラーに変更が加えられても、copヒントハッシュに表示される値には反映されません。複雑なタイプのスカラーは参照整合性で格納されませんが、文字列に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="2456e01d09f8a12420ae40af42332b053f7c264a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vec&lt;/code&gt; views its string argument as a sequence of bits. A string containing a code point over 0xFF is nonsensical. This usage is deprecated in Perl 5.28, and was removed in Perl 5.32.</source>
          <target state="translated">&lt;code&gt;vec&lt;/code&gt; は、文字列引数をビットのシーケンスと見なします。0xFFを超えるコードポイントを含む文字列は無意味です。この使用法はPerl5.28で非推奨になり、Perl5.32で削除されました。</target>
        </trans-unit>
        <trans-unit id="0cfd635c57ecac1d51dc11cad357b4c3a79fac0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verify_SSL&lt;/code&gt; &amp;mdash; A boolean that indicates whether to validate the SSL certificate of an &lt;code&gt;https&lt;/code&gt; &amp;mdash; connection (default is false)</source>
          <target state="translated">&lt;code&gt;verify_SSL&lt;/code&gt; &amp;mdash; &lt;code&gt;https&lt;/code&gt; のSSL証明書を検証するかどうかを示すブール値&amp;mdash;接続（デフォルトはfalse）</target>
        </trans-unit>
        <trans-unit id="d0f01183b1a1f7dd216a740e1f42d689e51a1b7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt; -- Indicates the desired specification version (e.g. &quot;1.0&quot;, &quot;1.1&quot; ... &quot;1.4&quot;, &quot;2&quot;). Defaults to the latest version of the CPAN Meta Spec.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; -目的の仕様バージョンを示します（例： &quot;1.0&quot;、 &quot;1.1&quot; ... &quot;1.4&quot;、 &quot;2&quot;）。デフォルトは最新バージョンのCPANメタスペックです。</target>
        </trans-unit>
        <trans-unit id="4becaf3941402b9ca744e200b8de0784426b345e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vmsify&lt;/code&gt; on the resulting file specification may not result in the original VMS file specification, so programs should not plan to convert a file specification from VMS to Unix and then back to VMS again after modification.</source>
          <target state="translated">&lt;code&gt;vmsify&lt;/code&gt; 結果のファイル仕様のvmsifyは、元のVMSファイル仕様にならない可能性があるため、プログラムは、ファイル仕様をVMSからUnixに変換し、変更後に再びVMSに戻すことを計画しないでください。</target>
        </trans-unit>
        <trans-unit id="11ec83e2e9ef7c3f580ec8c19b91c726b07fd6f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; . This practice is now deprecated, and may be not supported at some future version. Use the return value &lt;code&gt;SV *&lt;/code&gt; in such cases. (Currently &lt;code&gt;xsubpp&lt;/code&gt; contains some heuristic code which tries to disambiguate between &quot;truly-void&quot; and &quot;old-practice-declared-as-void&quot; functions. Hence your code is at mercy of this heuristics unless you use &lt;code&gt;SV *&lt;/code&gt; as return value.)</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 。この方法は現在廃止されており、将来のバージョンではサポートされなくなる可能性があります。そのような場合は、戻り値 &lt;code&gt;SV *&lt;/code&gt; を使用してください。（現在、 &lt;code&gt;xsubpp&lt;/code&gt; には、 &quot;truly-void&quot;関数と &quot;old-practice-declared-as-void&quot;関数を明確にするためのヒューリスティックコードが含まれています。そのため、戻り値として &lt;code&gt;SV *&lt;/code&gt; を使用しない限り、コードはこのヒューリスティックを利用できます。）</target>
        </trans-unit>
        <trans-unit id="1d1d1a26482e5914160e7c9dae08ae2ac89d54e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt;. This practice is now deprecated, and may be not supported at some future version. Use the return value &lt;code&gt;SV *&lt;/code&gt; in such cases. (Currently &lt;code&gt;xsubpp&lt;/code&gt; contains some heuristic code which tries to disambiguate between &quot;truly-void&quot; and &quot;old-practice-declared-as-void&quot; functions. Hence your code is at mercy of this heuristics unless you use &lt;code&gt;SV *&lt;/code&gt; as return value.)</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 。この方法は現在非推奨であり、将来のバージョンではサポートされない可能性があります。このような場合は、戻り値 &lt;code&gt;SV *&lt;/code&gt; を使用してください。（現在、 &lt;code&gt;xsubpp&lt;/code&gt; には、「truly-void」関数と「old-practice-declared-as-void」関数を明確にしようとするヒューリスティックコードが含まれています。したがって、戻り値として &lt;code&gt;SV *&lt;/code&gt; を使用しない限り、コードはこのヒューリスティックに翻弄されます。）</target>
        </trans-unit>
        <trans-unit id="88a6c93919cd34815869f280cd8b84f1065ac630" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warn()&lt;/code&gt; or &lt;code&gt;carp()&lt;/code&gt; a message to STDERR.</source>
          <target state="translated">&lt;code&gt;warn()&lt;/code&gt; または &lt;code&gt;carp()&lt;/code&gt; はSTDERRへのメッセージです。</target>
        </trans-unit>
        <trans-unit id="3b4bda69ddbb085c5edb8604f61fe1eebd17ca61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;what&lt;/code&gt; and &lt;code&gt;op_name&lt;/code&gt; are used in any warning.</source>
          <target state="translated">&lt;code&gt;what&lt;/code&gt; と &lt;code&gt;op_name&lt;/code&gt; は警告で使用されます。</target>
        </trans-unit>
        <trans-unit id="e091f4a7021829a7a3620da2c2a10b4eed1eec79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeats the statement</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; ステートメントを繰り返しながら</target>
        </trans-unit>
        <trans-unit id="906db552d87a0ee4629c6f29180b89745fa23b64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;win32_perlio&lt;/code&gt; - allows the use of the :win32 IO layer.</source>
          <target state="translated">&lt;code&gt;win32_perlio&lt;/code&gt; -：win32IOレイヤーの使用を許可します。</target>
        </trans-unit>
        <trans-unit id="50ccd06f1dd27edc527ebd4684db2ea14ab08f07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrap()&lt;/code&gt; compresses trailing whitespace into one newline, and &lt;code&gt;fill()&lt;/code&gt; deletes all trailing whitespace.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; は末尾の空白を1つの改行に圧縮し、 &lt;code&gt;fill()&lt;/code&gt; はすべての末尾の空白を削除します。</target>
        </trans-unit>
        <trans-unit id="3ec46baadad1061a82a3fe84c7b3bdcb20c88b10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrapped&lt;/code&gt;&lt;code&gt;wraplen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;wrapped&lt;/code&gt;&lt;code&gt;wraplen&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf9f7426eb12c72cfe1066d3cb1703d1a365da78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writemain()&lt;/code&gt; takes an argument list of directories containing archive libraries that relate to perl modules and should be linked into a new perl binary. It writes a corresponding</source>
          <target state="translated">&lt;code&gt;writemain()&lt;/code&gt; は、perlモジュールに関連し、新しいperlバイナリにリンクする必要があるアーカイブライブラリを含むディレクトリの引数リストを取ります。対応する</target>
        </trans-unit>
        <trans-unit id="a72e7abf95992836126047e9bceb660c62707d38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;writemain()&lt;/code&gt; takes an argument list of zero or more directories containing archive libraries that relate to perl modules and should be linked into a new perl binary. It writes a corresponding</source>
          <target state="translated">&lt;code&gt;writemain()&lt;/code&gt; は、perlモジュールに関連し、新しいperlバイナリにリンクする必要があるアーカイブライブラリを含む0個以上のディレクトリの引数リストを取ります。対応する書き込み</target>
        </trans-unit>
        <trans-unit id="af4899d555a14c4548680da3fdcd57d8b2f3cbfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to act as alignment commands: they jump forward or back to the closest position aligned at a multiple of &lt;code&gt;count&lt;/code&gt; characters. For example, to &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; a C structure like</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; は &lt;code&gt;!&lt;/code&gt; を受け入れます 位置合わせコマンドとして機能する修飾子：複数の &lt;code&gt;count&lt;/code&gt; 文字に位置合わせされた最も近い位置に前後にジャンプします。たとえば、次のようなC構造を&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt;するには</target>
        </trans-unit>
        <trans-unit id="1585b59da49174f182f412bb70b4355173d36595" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; accept the &lt;code&gt;!&lt;/code&gt; modifier to act as alignment commands: they jump forward or back to the closest position aligned at a multiple of &lt;code&gt;count&lt;/code&gt; characters. For example, to pack() or unpack() a C structure like</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; は &lt;code&gt;!&lt;/code&gt; 整列コマンドとして機能する修飾子：それらは、複数の &lt;code&gt;count&lt;/code&gt; 文字で整列された最も近い位置に前後にジャンプします。たとえば、次のようなC構造体をpack（）またはunpack（）するには</target>
        </trans-unit>
        <trans-unit id="7e4cad6d660d7f4a7c0baea9ffb828f6306a6484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means &quot;skip a byte&quot; when &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;ing; when &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;ing, it means &quot;introduce a null byte&quot; - that's probably not what you mean if you're dealing with plain text.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 時に「バイトをスキップする」ことを意味します。 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; するときは、「nullバイトを導入する」ことを意味します。プレーンテキストを処理している場合は、おそらくそうではありません。</target>
        </trans-unit>
        <trans-unit id="1949a962fd727fc6380668963f686ebb3a36d981" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means &quot;skip a byte&quot; when &lt;code&gt;unpack&lt;/code&gt;ing; when &lt;code&gt;pack&lt;/code&gt;ing, it means &quot;introduce a null byte&quot; - that's probably not what you mean if you're dealing with plain text.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;unpack&lt;/code&gt; 時に「バイトをスキップ」することを意味します。 &lt;code&gt;pack&lt;/code&gt; するとき、それは「ヌルバイトを導入する」ことを意味します-プレーンテキストを扱っている場合、それはおそらくあなたが意味することではありません。</target>
        </trans-unit>
        <trans-unit id="e1dc3716ea8b4a3c4500628aaf4e0c7696cd52fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xsinit()&lt;/code&gt; uses the xsi_* functions to generate most of its code.</source>
          <target state="translated">&lt;code&gt;xsinit()&lt;/code&gt; は、xsi_ *関数を使用して、そのコードのほとんどを生成します。</target>
        </trans-unit>
        <trans-unit id="128b946d69152a1f151c55bf6ce61c0c49ec7ac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xsubpp&lt;/code&gt; variables and internal functions</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; 変数と内部関数</target>
        </trans-unit>
        <trans-unit id="c0a014552c003a1e76f63cc934b125b95e0ed6d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyparse&lt;/code&gt; , the parser, lives in</source>
          <target state="translated">&lt;code&gt;yyparse&lt;/code&gt; パーサーであるyyparseは</target>
        </trans-unit>
        <trans-unit id="e1bd2c7f4ad0b95dac90b8f9dccee5e2723b0111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyparse&lt;/code&gt;, the parser, lives in</source>
          <target state="translated">&lt;code&gt;yyparse&lt;/code&gt; パーサーであるyyparseはに住んでいます</target>
        </trans-unit>
        <trans-unit id="86a8316320772d083e312e9c2712b98b8a990576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; では、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; および &lt;code&gt;$output_filename_or_reference&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53fde9627e4f5d3ddafe17173f4ac0adc9d93ec3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; expects at least two parameters, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; and zero or more optional parameters (see &lt;a href=&quot;#Optional-Parameters&quot;&gt;&quot;Optional Parameters&quot;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; には、少なくとも2つのパラメーター、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; と &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 、および0個以上のオプションのパラメーターが必要です（&lt;a href=&quot;#Optional-Parameters&quot;&gt;「オプションのパラメーター」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="aa9997ee07cb992ab27678e726038881ca04b2d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt; starts both hash references and blocks, so &lt;code&gt;map { ...&lt;/code&gt; could be either the start of map BLOCK LIST or map EXPR, LIST. Because Perl doesn't look ahead for the closing &lt;code&gt;}&lt;/code&gt; it has to take a guess at which it's dealing with based on what it finds just after the &lt;code&gt;{&lt;/code&gt;. Usually it gets it right, but if it doesn't it won't realize something is wrong until it gets to the &lt;code&gt;}&lt;/code&gt; and encounters the missing (or unexpected) comma. The syntax error will be reported close to the &lt;code&gt;}&lt;/code&gt;, but you'll need to change something near the &lt;code&gt;{&lt;/code&gt; such as using a unary &lt;code&gt;+&lt;/code&gt; or semicolon to give Perl some help:</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt; はハッシュ参照とブロックの両方を開始するため、 &lt;code&gt;map { ...&lt;/code&gt; はマップBLOCK LISTの開始またはマップEXPR、LISTのいずれかになります。Perlが閉じられるのを先読みしないので &lt;code&gt;}&lt;/code&gt; それはそれだけで後に見つかったものに基づいて扱っていますこれで推測を取るために持っています &lt;code&gt;{&lt;/code&gt; 。通常は正常に動作しますが、正常に動作しない場合は、 &lt;code&gt;}&lt;/code&gt; に到達して、不足している（または予期しない）カンマに遭遇するまで、何かが間違っていることに気づきません。構文エラーは &lt;code&gt;}&lt;/code&gt; の近くで報告されますが、Perlにいくつかの助けを与えるには、単項 &lt;code&gt;+&lt;/code&gt; またはセミコロンを使用するなど、 &lt;code&gt;{&lt;/code&gt; の近くで何かを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="0cd290126c35f35fc479ffe56d6b6254d337e17d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;}&lt;/code&gt;, then Perl uses the translations of</source>
          <target state="translated">&lt;code&gt;}&lt;/code&gt; 、その後、Perlはの翻訳を使用し</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="6094cc9ff960a73a386684d75df1b2bb88685e24" translate="yes" xml:space="preserve">
          <source>= -1, something interesting happens when it encounters an invalid character.</source>
          <target state="translated">= -1、無効な文字に遭遇したときに興味深いことが起こります。</target>
        </trans-unit>
        <trans-unit id="95c890966f60daadce1620989a28ff084f43d99b" translate="yes" xml:space="preserve">
          <source>= 1. When</source>
          <target state="translated">= 1.いつ</target>
        </trans-unit>
        <trans-unit id="10deb21dfe010a9b190b8fab61389604b35082cd" translate="yes" xml:space="preserve">
          <source>= Encode::FB_HTMLCREF)</source>
          <target state="translated">= Encode::FB_HTMLCREF)</target>
        </trans-unit>
        <trans-unit id="6e18d4d666804ece9ce8365c94263f7a8e5f6c98" translate="yes" xml:space="preserve">
          <source>= Encode::FB_PERLQQ)</source>
          <target state="translated">= Encode::FB_PERLQQ)</target>
        </trans-unit>
        <trans-unit id="ccb3d0f118188166d4957f38ffdec132d7c720d9" translate="yes" xml:space="preserve">
          <source>= Encode::FB_XMLCREF)</source>
          <target state="translated">= Encode::FB_XMLCREF)</target>
        </trans-unit>
        <trans-unit id="ce244797a5393c0d083ac5c5cd677ded6dd73fb4" translate="yes" xml:space="preserve">
          <source>= [alias value]</source>
          <target state="translated">= [エイリアス値]</target>
        </trans-unit>
        <trans-unit id="eaa5194c11bd01ab12e097ce99731d72f37c02c6" translate="yes" xml:space="preserve">
          <source>== 1.3</source>
          <target state="translated">== 1.3</target>
        </trans-unit>
        <trans-unit id="a7ebfe1c30e34e4f20325b1f93f5044c1926e1ed" translate="yes" xml:space="preserve">
          <source>=back doesn't take any parameters, but you said =back</source>
          <target state="translated">= backはパラメータを取りませんが、あなたは= backと言いました</target>
        </trans-unit>
        <trans-unit id="3812f8c5ebf6f7d3279508d78200275c68d4125d" translate="yes" xml:space="preserve">
          <source>=back without =over</source>
          <target state="translated">=戻る=オーバーなし</target>
        </trans-unit>
        <trans-unit id="2b7b65cb3ebd5ea6ad9a8426f1b32e5a4f6d3d3f" translate="yes" xml:space="preserve">
          <source>=begin</source>
          <target state="translated">=begin</target>
        </trans-unit>
        <trans-unit id="4d79569dbfe21a79189226f4869b7ea13a4ee892" translate="yes" xml:space="preserve">
          <source>=begin without a target?</source>
          <target state="translated">=ターゲットなしで開始しますか？</target>
        </trans-unit>
        <trans-unit id="525cfb869c22e44fe640e7deffdfbcf3a81ac5a5" translate="yes" xml:space="preserve">
          <source>=cut found outside a pod block.</source>
          <target state="translated">=ポッドブロックの外側でカットが見つかりました。</target>
        </trans-unit>
        <trans-unit id="86f96a5fee4cc895a4f10ae462b41be3e191aa8a" translate="yes" xml:space="preserve">
          <source>=end</source>
          <target state="translated">=end</target>
        </trans-unit>
        <trans-unit id="a9247d8da17206c58d355978136b2d317b17f236" translate="yes" xml:space="preserve">
          <source>=for without a target?</source>
          <target state="translated">=ターゲットなしの場合？</target>
        </trans-unit>
        <trans-unit id="41a39a2fe941bc076bdccd939ab48a37eae4767c" translate="yes" xml:space="preserve">
          <source>=head</source>
          <target state="translated">=head</target>
        </trans-unit>
        <trans-unit id="0e4b392e21d1de949bac9b0aee0a7c137af80689" translate="yes" xml:space="preserve">
          <source>=item has no contents</source>
          <target state="translated">=アイテムに内容がありません</target>
        </trans-unit>
        <trans-unit id="f531fb2fa54f44cc2ce6bd625537e0c6da8e2acb" translate="yes" xml:space="preserve">
          <source>=over is the last thing in the document?!</source>
          <target state="translated">=以上はドキュメントの最後のものですか？！</target>
        </trans-unit>
        <trans-unit id="35bb543dbcda97babdf2a89c6106c60ddb02fc24" translate="yes" xml:space="preserve">
          <source>=over on line</source>
          <target state="translated">=オンライン上</target>
        </trans-unit>
        <trans-unit id="240bb3121b98782679e3097abdefad1a5776163f" translate="yes" xml:space="preserve">
          <source>=over should be: '=over' or '=over positive_number'</source>
          <target state="translated">= overは次のようになります： '= over'または '= overpositive_number'</target>
        </trans-unit>
        <trans-unit id="5deab936208074df56367974c408aedaeeae3ccb" translate="yes" xml:space="preserve">
          <source>=pod directives shouldn't be over one line long! Ignoring all</source>
          <target state="translated">= podディレクティブは1行を超えてはいけません！すべて無視する</target>
        </trans-unit>
        <trans-unit id="7dd648593099ecae45709a4626d725e1810fbd4b" translate="yes" xml:space="preserve">
          <source>?....?= . The parts that RFC 2047 forbids to encode are left as is and long lines are folded within 76 bytes per line.</source>
          <target state="translated">？....？=。RFC 2047がエンコードを禁止する部分はそのまま残され、長い行は1行あたり76バイト以内で折り返されます。</target>
        </trans-unit>
        <trans-unit id="d1366a3067fee46eb14eef8f2f316e5f38df3c4f" translate="yes" xml:space="preserve">
          <source>?:\JUST_ADD\view.exe</source>
          <target state="translated">?:\JUST_ADD\view.exe</target>
        </trans-unit>
        <trans-unit id="b79900189f259297171d1e45127a682acacd788e" translate="yes" xml:space="preserve">
          <source>?=),</source>
          <target state="translated">?=),</target>
        </trans-unit>
        <trans-unit id="b2bb6d4e8459b319a09e5016032a5674f0a79ce5" translate="yes" xml:space="preserve">
          <source>?pattern?</source>
          <target state="translated">?pattern?</target>
        </trans-unit>
        <trans-unit id="4975709a996fa9b7e1ddb66e5180bce67c8d47ae" translate="yes" xml:space="preserve">
          <source>@+</source>
          <target state="translated">@+</target>
        </trans-unit>
        <trans-unit id="ce4580a08b328e135e8ec88a9d66dd4a93b8a8e8" translate="yes" xml:space="preserve">
          <source>@-</source>
          <target state="translated">@-</target>
        </trans-unit>
        <trans-unit id="754891735fac8c3066a07c36d22a346ee1c40ce8" translate="yes" xml:space="preserve">
          <source>@ARG</source>
          <target state="translated">@ARG</target>
        </trans-unit>
        <trans-unit id="ff2c17be6bd781f95fdd0bd9610749034c81b62d" translate="yes" xml:space="preserve">
          <source>@ARGS</source>
          <target state="translated">@ARGS</target>
        </trans-unit>
        <trans-unit id="1fe7c7755c50a190c523c3b1fcb23fe7a59fb1d9" translate="yes" xml:space="preserve">
          <source>@ARGV</source>
          <target state="translated">@ARGV</target>
        </trans-unit>
        <trans-unit id="f9dae5e61c647f83e0f197da0f3c40b160b62b37" translate="yes" xml:space="preserve">
          <source>@CARP_NOT</source>
          <target state="translated">@CARP_NOT</target>
        </trans-unit>
        <trans-unit id="ad2f81672f5d55e6e410552c159a1082a8356487" translate="yes" xml:space="preserve">
          <source>@DB::args</source>
          <target state="translated">@DB::args</target>
        </trans-unit>
        <trans-unit id="e0df44f8992230085a70d4f0818bc9554a496358" translate="yes" xml:space="preserve">
          <source>@DB::dbline</source>
          <target state="translated">@DB::dbline</target>
        </trans-unit>
        <trans-unit id="d2679734ab2cc1a1383b43572c627a2a4a786046" translate="yes" xml:space="preserve">
          <source>@EXPORT</source>
          <target state="translated">@EXPORT</target>
        </trans-unit>
        <trans-unit id="935219ed0644ee8e535456d71cde263f06c07d6f" translate="yes" xml:space="preserve">
          <source>@F</source>
          <target state="translated">@F</target>
        </trans-unit>
        <trans-unit id="39bf41a4cd083c6ae641220a6f38628a92b8c395" translate="yes" xml:space="preserve">
          <source>@INC</source>
          <target state="translated">@INC</target>
        </trans-unit>
        <trans-unit id="aea913a438cedea020e13eccaab58993130508dc" translate="yes" xml:space="preserve">
          <source>@ISA</source>
          <target state="translated">@ISA</target>
        </trans-unit>
        <trans-unit id="86e1dd598d092bf5b80c27bd2b6ae9c16e5e0c7d" translate="yes" xml:space="preserve">
          <source>@LAST_MATCH_END</source>
          <target state="translated">@LAST_MATCH_END</target>
        </trans-unit>
        <trans-unit id="f583b3cef6a6f01f053f249151fd446d413e0372" translate="yes" xml:space="preserve">
          <source>@LAST_MATCH_START</source>
          <target state="translated">@LAST_MATCH_START</target>
        </trans-unit>
        <trans-unit id="8ad7a99208be11331312728e281eba7694f68521" translate="yes" xml:space="preserve">
          <source>@Type_Order</source>
          <target state="translated">@Type_Order</target>
        </trans-unit>
        <trans-unit id="dee27aa9c706f064e962a3f3512b8abd08138be2" translate="yes" xml:space="preserve">
          <source>@_</source>
          <target state="translated">@_</target>
        </trans-unit>
        <trans-unit id="42d68da353f4ee79e3d0efb49913bbbc2bfb30e2" translate="yes" xml:space="preserve">
          <source>@a is an array with three elements, and each one is a reference to another array.</source>
          <target state="translated">@aは3つの要素を持つ配列であり、それぞれが別の配列への参照です。</target>
        </trans-unit>
        <trans-unit id="adf32768466829ecfdd11f5e83805fb15ad821b6" translate="yes" xml:space="preserve">
          <source>@bool_or_empty = $e-&amp;gt;global</source>
          <target state="translated">@bool_or_empty = $e-&amp;gt;global</target>
        </trans-unit>
        <trans-unit id="f5aaaa33622fe7cf15aa704511ebf7554d9e1555" translate="yes" xml:space="preserve">
          <source>@classes = $e-&amp;gt;FACET_TYPES()</source>
          <target state="translated">@classes = $e-&amp;gt;FACET_TYPES()</target>
        </trans-unit>
        <trans-unit id="21a86fc8bd3666cc1290cb0c02f063d0f0c5d455" translate="yes" xml:space="preserve">
          <source>@classes = Test2::Event-&amp;gt;FACET_TYPES()</source>
          <target state="translated">@classes = Test2::Event-&amp;gt;FACET_TYPES()</target>
        </trans-unit>
        <trans-unit id="a9827d0a65193417d4fa8b6a9aa912ea1f04e305" translate="yes" xml:space="preserve">
          <source>@ctx = $md5-&amp;gt;context</source>
          <target state="translated">@ctx = $md5-&amp;gt;context</target>
        </trans-unit>
        <trans-unit id="2b77365339fd60f4f7b9dc5e67d7bc301973ddce" translate="yes" xml:space="preserve">
          <source>@dl_library_path</source>
          <target state="translated">@dl_library_path</target>
        </trans-unit>
        <trans-unit id="0b43abc97824c06b15af6b73f75f3917997f9c60" translate="yes" xml:space="preserve">
          <source>@dl_library_path is initialised to hold the list of 'normal' directories (</source>
          <target state="translated">@dl_library_pathは、「通常の」ディレクトリのリストを保持するように初期化されます（</target>
        </trans-unit>
        <trans-unit id="9f0e33f7f6545d4dff610e53e6f0b71945335437" translate="yes" xml:space="preserve">
          <source>@dl_library_path should also be initialised with any other directories that can be determined from the environment at runtime (such as LD_LIBRARY_PATH for SunOS).</source>
          <target state="translated">@dl_library_pathは、実行時に環境から判別できる他のディレクトリ（SunOSのLD_LIBRARY_PATHなど）でも初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="daf7b1b2d89fc478ca04c0a7e85ecc11fb240ad7" translate="yes" xml:space="preserve">
          <source>@dl_librefs</source>
          <target state="translated">@dl_librefs</target>
        </trans-unit>
        <trans-unit id="15a8f1a478c081e49040591f8d8a7f42c88ac449" translate="yes" xml:space="preserve">
          <source>@dl_modules</source>
          <target state="translated">@dl_modules</target>
        </trans-unit>
        <trans-unit id="437544024eb7d70c6f42757950b2a94cd83916e2" translate="yes" xml:space="preserve">
          <source>@dl_require_symbols</source>
          <target state="translated">@dl_require_symbols</target>
        </trans-unit>
        <trans-unit id="45769939e624f551921b77e0dca5fb8dcb247e29" translate="yes" xml:space="preserve">
          <source>@dl_resolve_using</source>
          <target state="translated">@dl_resolve_using</target>
        </trans-unit>
        <trans-unit id="f8106890b4ff0b0b473007492009d3c775e7220f" translate="yes" xml:space="preserve">
          <source>@dl_shared_objects</source>
          <target state="translated">@dl_shared_objects</target>
        </trans-unit>
        <trans-unit id="749a8fa7c771df5d761814a312cd22538deb3176" translate="yes" xml:space="preserve">
          <source>@drivers = test2_ipc_drivers()</source>
          <target state="translated">@drivers = test2_ipc_drivers()</target>
        </trans-unit>
        <trans-unit id="cb768ba2f4343df04d65b54e1e44a3adc7c75128" translate="yes" xml:space="preserve">
          <source>@errors = $e-&amp;gt;validate_facet_data(%params);</source>
          <target state="translated">@errors = $e-&amp;gt;validate_facet_data(%params);</target>
        </trans-unit>
        <trans-unit id="2403555a23c2936510d043a0b009358f7d5bafa3" translate="yes" xml:space="preserve">
          <source>@errors = $e-&amp;gt;validate_facet_data();</source>
          <target state="translated">@errors = $e-&amp;gt;validate_facet_data();</target>
        </trans-unit>
        <trans-unit id="7c99e5f673dab141d07b5c87f1e12b763a22b7a7" translate="yes" xml:space="preserve">
          <source>@errors = $e-&amp;gt;validate_facet_data(\%facets, %params);</source>
          <target state="translated">@errors = $e-&amp;gt;validate_facet_data(\%facets, %params);</target>
        </trans-unit>
        <trans-unit id="9d30f6e44aeb339351d84ebd7b1884475b877654" translate="yes" xml:space="preserve">
          <source>@errors = Test2::Event-&amp;gt;validate_facet_data(%params);</source>
          <target state="translated">@errors = Test2::Event-&amp;gt;validate_facet_data(%params);</target>
        </trans-unit>
        <trans-unit id="27eac66c830b57faa08b90a583c5a9254e21460d" translate="yes" xml:space="preserve">
          <source>@errors = Test2::Event-&amp;gt;validate_facet_data(\%facets, %params);</source>
          <target state="translated">@errors = Test2::Event-&amp;gt;validate_facet_data(\%facets, %params);</target>
        </trans-unit>
        <trans-unit id="b55dd52d8b6eddbc15cc8f30ba9623fcc805828c" translate="yes" xml:space="preserve">
          <source>@events = $ipc-&amp;gt;cull($hid)</source>
          <target state="translated">@events = $ ipc-&amp;gt; cul（$ hidden）</target>
        </trans-unit>
        <trans-unit id="8084a2ae39ff7cb9d811f1712dc1602a663ee9e4" translate="yes" xml:space="preserve">
          <source>@formatters = test2_formatters()</source>
          <target state="translated">@formatters = test2_formatters()</target>
        </trans-unit>
        <trans-unit id="c2c4bdd65f5d5393c4b65063b2f6d490d0ed9481" translate="yes" xml:space="preserve">
          <source>@hubs = $stack-&amp;gt;all</source>
          <target state="translated">@hubs = $stack-&amp;gt;all</target>
        </trans-unit>
        <trans-unit id="62e174ab278b42b42f4292927ee5370df64f9370" translate="yes" xml:space="preserve">
          <source>@int_or_empty = $e-&amp;gt;terminate</source>
          <target state="translated">@int_or_empty = $e-&amp;gt;terminate</target>
        </trans-unit>
        <trans-unit id="c13ba7c337ace12468d7413245c28893a95eaa72" translate="yes" xml:space="preserve">
          <source>@list = $class-&amp;gt;Test2::Util::HashBase::attr_list()</source>
          <target state="translated">@list = $class-&amp;gt;Test2::Util::HashBase::attr_list()</target>
        </trans-unit>
        <trans-unit id="15e60d5d52bb406bfa3ad86f61d6ecec4e535528" translate="yes" xml:space="preserve">
          <source>@list = Test2::Util::HashBase::attr_list($class)</source>
          <target state="translated">@list = Test2::Util::HashBase::attr_list($class)</target>
        </trans-unit>
        <trans-unit id="c50e636a2b33daee08498b2ec237c8cf65cae7cb" translate="yes" xml:space="preserve">
          <source>@list = requires( MODULE );</source>
          <target state="translated">@list = require（MODULE）;</target>
        </trans-unit>
        <trans-unit id="0b0562e456636b39bfe73900954fa1570225ecc1" translate="yes" xml:space="preserve">
          <source>@list = test2_list_context_acquire_callbacks()</source>
          <target state="translated">@list = test2_list_context_acquire_callbacks()</target>
        </trans-unit>
        <trans-unit id="a17cd013fc295d9e892c7cc1b5b85f22fc71e42a" translate="yes" xml:space="preserve">
          <source>@list = test2_list_context_init_callbacks()</source>
          <target state="translated">@list = test2_list_context_init_callbacks()</target>
        </trans-unit>
        <trans-unit id="a572837e26cb97b7ebbd08a4152e27c673ddc55d" translate="yes" xml:space="preserve">
          <source>@list = test2_list_context_release_callbacks()</source>
          <target state="translated">@list = test2_list_context_release_callbacks()</target>
        </trans-unit>
        <trans-unit id="ad9240e5c70594cb2051ed4f4f418585863cd7d0" translate="yes" xml:space="preserve">
          <source>@list = test2_list_exit_callbacks()</source>
          <target state="translated">@list = test2_list_exit_callbacks()</target>
        </trans-unit>
        <trans-unit id="a67aa2e57876f6c06b83b6205d552dc9dbe3c942" translate="yes" xml:space="preserve">
          <source>@list = test2_list_post_load_callbacks()</source>
          <target state="translated">@list = test2_list_post_load_callbacks()</target>
        </trans-unit>
        <trans-unit id="b630c5fabe7c03aee28faeca7dbc849609efe5de" translate="yes" xml:space="preserve">
          <source>@list = test2_list_pre_subtest_callbacks()</source>
          <target state="translated">@list = test2_list_pre_subtest_callbacks()</target>
        </trans-unit>
        <trans-unit id="ea639b29e92b8ed3a63688b25f32407745db27b0" translate="yes" xml:space="preserve">
          <source>@optype</source>
          <target state="translated">@optype</target>
        </trans-unit>
        <trans-unit id="2b5fee7ea42b8b01c834815b53c906e15aa53eaf" translate="yes" xml:space="preserve">
          <source>@os_flavor is the style of operating system this is, usually corresponding to the MM_*.pm file we're using.</source>
          <target state="translated">@os_flavorは、これが使用しているオペレーティングシステムのスタイルで、通常は使用しているMM _ *。pmファイルに対応しています。</target>
        </trans-unit>
        <trans-unit id="afb0f810173e11fd936bc2500d009de431bffbf7" translate="yes" xml:space="preserve">
          <source>@plan = $e-&amp;gt;sets_plan</source>
          <target state="translated">@plan = $e-&amp;gt;sets_plan</target>
        </trans-unit>
        <trans-unit id="334c8ab27f10d0374b95344a707e26226f7fa18c" translate="yes" xml:space="preserve">
          <source>@results is an array of test result hashes.</source>
          <target state="translated">@resultsは、テスト結果ハッシュの配列です。</target>
        </trans-unit>
        <trans-unit id="23ad7cdc98082f9250ec3afd4e2caed14f583e94" translate="yes" xml:space="preserve">
          <source>@specialsv_name</source>
          <target state="translated">@specialsv_name</target>
        </trans-unit>
        <trans-unit id="bce99a33d22d4c2dffd2eeac8a8e4c5d9894b283" translate="yes" xml:space="preserve">
          <source>@suffixes work as in &lt;code&gt;fileparse()&lt;/code&gt; except all regex metacharacters are quoted.</source>
          <target state="translated">@suffixesは、すべての正規表現メタ文字が引用符で囲まれていることを除いて、 &lt;code&gt;fileparse()&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="317b12ea1477d9e9b136839fa7ac896988adc6ac" translate="yes" xml:space="preserve">
          <source>@test_files</source>
          <target state="translated">@test_files</target>
        </trans-unit>
        <trans-unit id="2563b52b2c674ef6e847cc65202d47f3d3604f00" translate="yes" xml:space="preserve">
          <source>@test_libs are run in alphabetical order.</source>
          <target state="translated">@test_libsはアルファベット順に実行されます。</target>
        </trans-unit>
        <trans-unit id="33c41cdd560e2632c4cb6a1fb1bf4b8576d6aa71" translate="yes" xml:space="preserve">
          <source>@{^CAPTURE}</source>
          <target state="translated">@{^CAPTURE}</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="313a7fe99a568a50c330c2db6c46b2f1743f3e95" translate="yes" xml:space="preserve">
          <source>A &quot;balanced-bracket-delimited substring&quot; is a substring bounded by matched brackets, such that any other (left or right) delimiter bracket</source>
          <target state="translated">バランスのとれた括弧で区切られた部分文字列」とは、マッチした括弧で区切られた部分文字列のことで、他の(左または右の)区切り文字の括弧があっても、そのような括弧で区切られた部分文字列のことです。</target>
        </trans-unit>
        <trans-unit id="f251b2b1824e87d1320c2c41c33a42711d82807a" translate="yes" xml:space="preserve">
          <source>A &quot;delimiter bracket&quot; is a bracket in list of delimiters passed as &lt;code&gt;extract_bracketed&lt;/code&gt; 's second argument. Delimiter brackets are specified by giving either the left or right (or both!) versions of the required bracket(s). Note that the order in which two or more delimiter brackets are specified is not significant.</source>
          <target state="translated">「区切り括弧」は、 &lt;code&gt;extract_bracketed&lt;/code&gt; の2番目の引数として渡される区切り記号のリスト内の括弧です。区切り括弧は、必要な括弧の左または右（または両方）バージョンを指定することによって指定されます。2つ以上の区切り括弧が指定される順序は重要ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="526fbc5865ea8795168a507fd915095cce0c32be" translate="yes" xml:space="preserve">
          <source>A &quot;delimiter bracket&quot; is a bracket in list of delimiters passed as &lt;code&gt;extract_bracketed&lt;/code&gt;'s second argument. Delimiter brackets are specified by giving either the left or right (or both!) versions of the required bracket(s). Note that the order in which two or more delimiter brackets are specified is not significant.</source>
          <target state="translated">「区切り文字ブラケット」は、 &lt;code&gt;extract_bracketed&lt;/code&gt; の2番目の引数として渡される区切り文字のリスト内のブラケットです。区切り文字ブラケットは、必要なブラケットの左または右（または両方！）バージョンを指定することによって指定されます。2つ以上の区切り文字ブラケットを指定する順序は重要ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe875008ceb9916a221027985bdd7156792bab2e" translate="yes" xml:space="preserve">
          <source>A &quot;drive&quot; that does not have a file system. This can be a drive letter that hasn't been defined or a drive letter assigned to a partition that hasn't been formatted yet.</source>
          <target state="translated">ファイルシステムを持たない「ドライブ」。これは、定義されていないドライブレターや、まだフォーマットされていないパーティションに割り当てられたドライブレターになります。</target>
        </trans-unit>
        <trans-unit id="8b2d100a2729032ea387e666018839a1da0e8c93" translate="yes" xml:space="preserve">
          <source>A &quot;layer&quot; is composed of two parts:</source>
          <target state="translated">レイヤー」は2つの部分から構成されています。</target>
        </trans-unit>
        <trans-unit id="756b059631bfde6d82f3c717b79716728efe722a" translate="yes" xml:space="preserve">
          <source>A &quot;macro&quot; 1 signals that the constant is always defined, so the &lt;code&gt;#if&lt;/code&gt; /&lt;code&gt;#endif&lt;/code&gt; test is omitted.</source>
          <target state="translated">「マクロ」1は、定数が常に定義されていることを示すため、 &lt;code&gt;#if&lt;/code&gt; / &lt;code&gt;#endif&lt;/code&gt; テストは省略されます。</target>
        </trans-unit>
        <trans-unit id="93bdc8ebabd9b8481383b7e876c2d37c090ff594" translate="yes" xml:space="preserve">
          <source>A &quot;macro&quot; 1 signals that the constant is always defined, so the &lt;code&gt;#if&lt;/code&gt;/&lt;code&gt;#endif&lt;/code&gt; test is omitted.</source>
          <target state="translated">「マクロ」1は、定数が常に定義されていることを示すため、 &lt;code&gt;#if&lt;/code&gt; / ＃ &lt;code&gt;#endif&lt;/code&gt; テストは省略されます。</target>
        </trans-unit>
        <trans-unit id="1cb023ba582a7a015faea89ec15dc62641da6a16" translate="yes" xml:space="preserve">
          <source>A &quot;picture&quot; line giving the format for one output line.</source>
          <target state="translated">1つの出力行のフォーマットを与える &quot;ピクチャ &quot;行。</target>
        </trans-unit>
        <trans-unit id="15236a61eccb3430b3222ecc1658fa660d7fb563" translate="yes" xml:space="preserve">
          <source>A &quot;ram disk&quot; or memory-resident virtual file system used for high-speed access to small amounts of temporary file space.</source>
          <target state="translated">少量の一時的なファイルスペースに高速にアクセスするために使用される「ラムディスク」またはメモリ常駐型の仮想ファイルシステム。</target>
        </trans-unit>
        <trans-unit id="4bc2e7f2e34238799324926fcafe5bd02066c9e0" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;constructor&amp;rdquo; for a &lt;b&gt;referent&lt;/b&gt; that isn&amp;rsquo;t really an &lt;b&gt;object&lt;/b&gt;, like an anonymous array or a hash (or a sonata, for that matter). For example, a pair of braces acts as a composer for a hash, and a pair of brackets acts as a composer for an array. See the section &amp;ldquo;Creating References&amp;rdquo; in Camel chapter 8, &amp;ldquo;References&amp;rdquo;.</source>
          <target state="translated">匿名の配列やハッシュ（さらに言えば、ソナタ）のような、実際には&lt;b&gt;オブジェクト&lt;/b&gt;ではない&lt;b&gt;指示対象の&lt;/b&gt;「コンストラクタ」。たとえば、中括弧のペアはハッシュのコンポーザーとして機能し、大括弧のペアは配列のコンポーザーとして機能します。Camelの第8章「リファレンス」の「リファレンスの作成」のセクションを参照してください。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5775eb71cdc3ede48fee03da70ab6b5ce985e619" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;page&amp;rdquo; from the manuals, typically accessed via the</source>
          <target state="translated">マニュアルの「ページ」。通常、</target>
        </trans-unit>
        <trans-unit id="6a5409d36bd9ef539cfe14ba7c067e7ccfc9c3b3" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;pointer value&amp;rdquo;, which is Perl Internals Talk for a &lt;code&gt;char*&lt;/code&gt; .</source>
          <target state="translated">「ポインタ値」。これは、 &lt;code&gt;char*&lt;/code&gt; Perl Internals Talkです。</target>
        </trans-unit>
        <trans-unit id="ef91c8339eba64aba8bfb16207fcf550f326e17c" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;pointer value&amp;rdquo;, which is Perl Internals Talk for a &lt;code&gt;char*&lt;/code&gt;.</source>
          <target state="translated">「ポインタ値」。これは、 &lt;code&gt;char*&lt;/code&gt; のPerlInternalsTalkです。</target>
        </trans-unit>
        <trans-unit id="34a072b3ed907a60cfcde96be105ecbc6bbfc2bd" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;version&amp;rdquo; or &amp;ldquo;vector&amp;rdquo; &lt;b&gt;string&lt;/b&gt; specified with a &lt;code&gt;v&lt;/code&gt; followed by a series of decimal integers in dot notation, for instance, &lt;code&gt;v1.20.300.4000&lt;/code&gt; . Each number turns into a &lt;b&gt;character&lt;/b&gt; with the specified ordinal value. (The &lt;code&gt;v&lt;/code&gt; is optional when there are at least three integers.)</source>
          <target state="translated">ドット表記の一連の10進整数が後に続く &lt;code&gt;v&lt;/code&gt; で指定された「バージョン」または「ベクトル」&lt;b&gt;文字列&lt;/b&gt;。たとえば、 &lt;code&gt;v1.20.300.4000&lt;/code&gt; 。各数値は、指定された序数値を持つ&lt;b&gt;文字に&lt;/b&gt;変わります。（少なくとも3つの整数がある場合、 &lt;code&gt;v&lt;/code&gt; はオプションです。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f44fbc3181b1ca1a0035e4d075bfe5736c6c89a4" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;version&amp;rdquo; or &amp;ldquo;vector&amp;rdquo; &lt;b&gt;string&lt;/b&gt; specified with a &lt;code&gt;v&lt;/code&gt; followed by a series of decimal integers in dot notation, for instance, &lt;code&gt;v1.20.300.4000&lt;/code&gt;. Each number turns into a &lt;b&gt;character&lt;/b&gt; with the specified ordinal value. (The &lt;code&gt;v&lt;/code&gt; is optional when there are at least three integers.)</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; で指定された「バージョン」または「ベクトル」&lt;b&gt;文字列の&lt;/b&gt;後にドット表記の一連の10進整数が続きます（例： &lt;code&gt;v1.20.300.4000&lt;/code&gt; )。各数値は、指定された序数を持つ&lt;b&gt;文字に&lt;/b&gt;変わります。（少なくとも3つの整数がある場合、 &lt;code&gt;v&lt;/code&gt; はオプションです。）&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="9b175ccd55b8cb24fce37d2a53ada08e5f179945" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;wildcard&amp;rdquo; match on &lt;b&gt;filenames&lt;/b&gt;. See the &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;b&gt;ファイル名の&lt;/b&gt;「ワイルドカード」一致。 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="0f35ef12127d73c5a356b6b9c82b522f5ce5d165" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;wildcard&amp;rdquo; match on &lt;b&gt;filenames&lt;/b&gt;. See the &lt;code&gt;glob&lt;/code&gt; function.</source>
          <target state="translated">&lt;b&gt;ファイル名の&lt;/b&gt;「ワイルドカード」一致。 &lt;code&gt;glob&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="785d257f2e5d0030320c5f3a55e4dd08614b8fda" translate="yes" xml:space="preserve">
          <source>A '=cut' directive found in the middle of non-POD</source>
          <target state="translated">非 POD の途中にある '=cut' ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="084adee5c9094841f2603af0ff0ac058d61aaa79" translate="yes" xml:space="preserve">
          <source>A 'my $pack_lexical' statement makes the variable $pack_lexical local _only_ to the file up to the &lt;code&gt;__DATA__&lt;/code&gt; token. Subroutines declared elsewhere _cannot_ see these types of variables, just as if you declared subroutines in the package but in another file, they cannot see these variables.</source>
          <target state="translated">'my $ pack_lexical'ステートメントは、変数を$ pack_lexical local _only_から &lt;code&gt;__DATA__&lt;/code&gt; トークンまでのファイルにします。他の場所で宣言されたサブルーチンは、これらのタイプの変数を見ることができません_パッケージでサブルーチンを宣言したかのように、別のファイルでこれらの変数を見ることができません。</target>
        </trans-unit>
        <trans-unit id="fd982dc10b95832dad0fd4ffab7cc84fc2034769" translate="yes" xml:space="preserve">
          <source>A (discouraged from use) synonym is &lt;code&gt;isALNUMC&lt;/code&gt; (where the &lt;code&gt;C&lt;/code&gt; suffix means this corresponds to the C language alphanumeric definition). Also there are the variants &lt;code&gt;isALNUMC_A&lt;/code&gt;, &lt;code&gt;isALNUMC_L1&lt;/code&gt;&lt;code&gt;isALNUMC_LC&lt;/code&gt;, and &lt;code&gt;isALNUMC_LC_uvchr&lt;/code&gt;.</source>
          <target state="translated">（使用をお勧めしない）同義語は &lt;code&gt;isALNUMC&lt;/code&gt; です（ &lt;code&gt;C&lt;/code&gt; サフィックスは、これがC言語の英数字の定義に対応することを意味します）。また、バリアント &lt;code&gt;isALNUMC_A&lt;/code&gt; 、 &lt;code&gt;isALNUMC_L1&lt;/code&gt; &lt;code&gt;isALNUMC_LC&lt;/code&gt; 、および &lt;code&gt;isALNUMC_LC_uvchr&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="ededfcca2c8bd4e7eb6351a42ed32e72537533cd" translate="yes" xml:space="preserve">
          <source>A (file)glob evaluates its (embedded) argument only when it is starting a new list. All values must be read before it will start over. In list context, this isn't important because you automatically get them all anyway. However, in scalar context the operator returns the next value each time it's called, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; when the list has run out. As with filehandle reads, an automatic &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; is generated when the glob occurs in the test part of a &lt;code&gt;while&lt;/code&gt; , because legal glob returns (for example, a file called</source>
          <target state="translated">（ファイル）globは、新しいリストを開始するときにのみ、その（埋め込み）引数を評価します。最初からやり直す前に、すべての値を読み取る必要があります。リストのコンテキストでは、とにかくすべてを自動的に取得するため、これは重要ではありません。ただし、スカラーコンテキストでは、演算子は呼び出されるたびに次の値を返すか、リストがなくなると &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。ファイルハンドルは、読み出しと同様に、自動 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; グロブは、試験部に発生した場合に生成される &lt;code&gt;while&lt;/code&gt; 法的グロブ戻る（例えば、ファイルが呼ばれるので、</target>
        </trans-unit>
        <trans-unit id="f613941228a4b2edbfa60c354ef431255d44d42e" translate="yes" xml:space="preserve">
          <source>A (file)glob evaluates its (embedded) argument only when it is starting a new list. All values must be read before it will start over. In list context, this isn't important because you automatically get them all anyway. However, in scalar context the operator returns the next value each time it's called, or &lt;code&gt;undef&lt;/code&gt; when the list has run out. As with filehandle reads, an automatic &lt;code&gt;defined&lt;/code&gt; is generated when the glob occurs in the test part of a &lt;code&gt;while&lt;/code&gt;, because legal glob returns (for example, a file called</source>
          <target state="translated">（file）globは、新しいリストを開始するときにのみ、その（埋め込み）引数を評価します。最初からやり直す前に、すべての値を読み取る必要があります。リストのコンテキストでは、とにかくすべてを自動的に取得するため、これは重要ではありません。ただし、スカラーコンテキストでは、演算子は呼び出されるたびに次の値を返すか、リストがなくなると &lt;code&gt;undef&lt;/code&gt; を返します。ファイルハンドルの読み取りと同様に、有効なglobが返されるため、 &lt;code&gt;while&lt;/code&gt; テスト部分でglobが発生すると、自動 &lt;code&gt;defined&lt;/code&gt; が生成されます（たとえば、</target>
        </trans-unit>
        <trans-unit id="cc6e3b905b08fc1fe3e1757559d1f8c510fb5e73" translate="yes" xml:space="preserve">
          <source>A (very) lightweight introduction in the use of the perl debugger, and a pointer to existing, deeper sources of information on the subject of debugging perl programs.</source>
          <target state="translated">perl デバッガの使用法についての (非常に)軽快な紹介と、perl プログラムのデバッグに関する既存のより深い情報源へのポインタです。</target>
        </trans-unit>
        <trans-unit id="4b33de80b0daa04de9d0537f91968aca3441bb5a" translate="yes" xml:space="preserve">
          <source>A *</source>
          <target state="translated">A *</target>
        </trans-unit>
        <trans-unit id="61ac1d8d5b46f4c8322e0f808eeb9e2cdf4d41ab" translate="yes" xml:space="preserve">
          <source>A 64-bit native application will run much more efficiently on Itanium hardware.</source>
          <target state="translated">64ビットネイティブアプリケーションは、Itaniumハードウェア上でより効率的に動作します。</target>
        </trans-unit>
        <trans-unit id="3898ac399c4bda023fcfcb7cda3f39d85b95f13a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#my-VARLIST&quot;&gt;&lt;code&gt;my&lt;/code&gt;&lt;/a&gt; declares the listed variables to be local (lexically) to the enclosing block, file, or &lt;a href=&quot;#eval-EXPR&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="translated">&lt;a href=&quot;#my-VARLIST&quot;&gt; &lt;code&gt;my&lt;/code&gt; &lt;/a&gt;リストされた変数を囲むブロック、ファイル、またはに（字句）ローカルであることを宣言します&lt;a href=&quot;#eval-EXPR&quot;&gt; &lt;code&gt;eval&lt;/code&gt; を&lt;/a&gt;。複数の変数がリストされている場合は、リストを括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="4f93189e72cc0f75abc0b3834c32b379484b25ed" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;DB_File&lt;/b&gt; wrapper that has the ability to lock and unlock the database while it is being used. Avoids the tie-before-flock problem by simply re-tie-ing the database when you get or drop a lock. Because of the flexibility in dropping and re-acquiring the lock in the middle of a session, this can be massaged into a system that will work with long updates and/or reads if the application follows the hints in the POD documentation.</source>
          <target state="translated">A &lt;b&gt;はDB_Fileを&lt;/b&gt;ロックする能力を有し、それが使用されている間、データベースのロックを解除するラッパー。ロックを取得または削除するときにデータベースを再結合するだけで、結合前の結合の問題を回避します。セッションの途中でロックをドロップおよび再取得する柔軟性のため、これは、アプリケーションがPODドキュメントのヒントに従っている場合に、長い更新や読み取りで機能するシステムに組み込むことができます。</target>
        </trans-unit>
        <trans-unit id="1b51e848321e977ce5d13c2818c175d0f41effb3" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;DB_File&lt;/b&gt; wrapper which creates copies of the database file for read access, so that you have a kind of a multiversioning concurrent read system. However, updates are still serial. Use for databases where reads may be lengthy and consistency problems may occur.</source>
          <target state="translated">読み取りアクセス用のデータベースファイルのコピーを作成する&lt;b&gt;DB_File&lt;/b&gt;ラッパー。これにより、一種のマルチバージョン対応の同時読み取りシステムが得られます。ただし、更新は引き続きシリアルです。読み取りに時間がかかり、整合性の問題が発生する可能性があるデータベースに使用します。</target>
        </trans-unit>
        <trans-unit id="a028dc9e0b2f7388284cb78c959a40269b50fa27" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;Pod parser&lt;/b&gt; is a module meant for parsing Pod (regardless of whether this involves calling callbacks or building a parse tree or directly formatting it). A &lt;b&gt;Pod formatter&lt;/b&gt; (or &lt;b&gt;Pod translator&lt;/b&gt;) is a module or program that converts Pod to some other format (HTML, plaintext, TeX, PostScript, RTF). A &lt;b&gt;Pod processor&lt;/b&gt; might be a formatter or translator, or might be a program that does something else with the Pod (like counting words, scanning for index points, etc.).</source>
          <target state="translated">A &lt;b&gt;ポッドパーサーは&lt;/b&gt;（関係なく、これはコールバックを呼び出すか、パースツリーを構築するか、直接それをフォーマットする必要かどうかの）ポッドを解析するためのものモジュールです。A &lt;b&gt;ポッドフォーマッタ&lt;/b&gt;（又は&lt;b&gt;ポッドトランスレータは&lt;/b&gt;）モジュールまたはプログラムであるいくつかの他の形式（HTML、平文、テキサス州、ポストスクリプト、RTF）に変換ポッド。A &lt;b&gt;ポッドプロセッサは、&lt;/b&gt;フォーマッタや翻訳者であるかもしれない、またはポッド（などの計数言葉、インデックスポイントのスキャン、など）で何か他のものを行うプログラムであるかもしれません。</target>
        </trans-unit>
        <trans-unit id="75e0b45072c8738547ff8a165f7f145bc64c09c0" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;bit shift&lt;/b&gt; that divides a number by some power of 2.</source>
          <target state="translated">&lt;b&gt;ビットシフト&lt;/b&gt; 2の一部力によって数を分割します。</target>
        </trans-unit>
        <trans-unit id="12a4a3ed2cee1e69194024985900709da0279c32" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;bit shift&lt;/b&gt; that multiplies the number by some power of 2.</source>
          <target state="translated">数値に2の累乗を乗算する&lt;b&gt;ビットシフト&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="835a63b1a5a99de9e5e4d92a77a7c97441fd9cb5" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;blank line&lt;/b&gt; is a line consisting entirely of zero or more spaces (ASCII 32) or tabs (ASCII 9), and terminated by a newline or end-of-file. A &lt;b&gt;non-blank line&lt;/b&gt; is a line containing one or more characters other than space or tab (and terminated by a newline or end-of-file).</source>
          <target state="translated">&lt;b&gt;ブランク行が&lt;/b&gt;完全にゼロ以上のスペース（ASCII 32）またはタブ（ASCII 9）からなる線であり、改行またはファイルの終わりによって終了します。&lt;b&gt;非空白行が&lt;/b&gt;（と改行またはファイルの終わりで終了）、スペースまたはタブ以外の1つの以上の文字を含む行です。</target>
        </trans-unit>
        <trans-unit id="3728bf609a9f402c616e07291d2f146bcd65679f" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;character class&lt;/b&gt; allows a set of possible characters, rather than just a single character, to match at a particular point in a regex. Character classes are denoted by brackets &lt;code&gt;[...]&lt;/code&gt; , with the set of characters to be possibly matched inside. Here are some examples:</source>
          <target state="translated">&lt;b&gt;文字クラスは、&lt;/b&gt;正規表現内の特定の点で一致し、むしろちょうど単一の文字よりも、可能な文字の集合を可能にします。文字クラスは括弧 &lt;code&gt;[...]&lt;/code&gt; で示され、文字のセットは内部で一致する可能性があります。ここではいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="88667454d168bdf07729fef4c08a10e0dab39990" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;character class&lt;/b&gt; allows a set of possible characters, rather than just a single character, to match at a particular point in a regex. There are a number of different types of character classes, but usually when people use this term, they are referring to the type described in this section, which are technically called &quot;Bracketed character classes&quot;, because they are denoted by brackets &lt;code&gt;[...]&lt;/code&gt;, with the set of characters to be possibly matched inside. But we'll drop the &quot;bracketed&quot; below to correspond with common usage. Here are some examples of (bracketed) character classes:</source>
          <target state="translated">&lt;b&gt;文字クラスは、&lt;/b&gt;正規表現内の特定の点で一致し、むしろちょうど単一の文字よりも、可能な文字の集合を可能にします。文字クラスにはさまざまな種類がありますが、通常、この用語を使用する場合は、このセクションで説明する種類を指します。これらは、括弧で示されるため、技術的には「括弧で囲まれた文字クラス」と呼ばれます &lt;code&gt;[...]&lt;/code&gt; 、内部で一致する可能性のある文字のセット。ただし、一般的な使用法に対応するために、以下の「括弧付き」を削除します。 （括弧で囲まれた）文字クラスの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="669c2da4b19c631926975e69d3d84a786a63080d" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;character&lt;/b&gt; or &lt;b&gt;string&lt;/b&gt; that keeps two surrounding strings from being confused with each other. The &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; function works on separators. Not to be confused with &lt;b&gt;delimiters&lt;/b&gt; or &lt;b&gt;terminators&lt;/b&gt;. The &amp;ldquo;or&amp;rdquo; in the previous sentence separated the two alternatives.</source>
          <target state="translated">周囲の2つの文字列が互いに混同されないようにする&lt;b&gt;文字&lt;/b&gt;または&lt;b&gt;文字列&lt;/b&gt;。 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 機能は、セパレータ上で動作します。&lt;b&gt;デリミタ&lt;/b&gt;や&lt;b&gt;ターミネータ&lt;/b&gt;と混同しないでください。前の文の「or」は、2つの選択肢を分けていました。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
