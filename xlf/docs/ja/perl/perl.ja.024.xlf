<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="5b5f076887ce0597a3fa01a1ea06dacb7c8fe5ad" translate="yes" xml:space="preserve">
          <source>A string representing a selection list for sections to be printed when -verbose is set to 99, e.g. &lt;code&gt;&quot;NAME|SYNOPSIS|DESCRIPTION|VERSION&quot;&lt;/code&gt; .</source>
          <target state="translated">-verboseが99に設定されている場合に印刷されるセクションの選択リストを表す文字列（例： &lt;code&gt;&quot;NAME|SYNOPSIS|DESCRIPTION|VERSION&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="308056f61edbce292af89589357f11ee44fd726d" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched as a prefix (which is to be skipped). If omitted, optional whitespace is skipped.</source>
          <target state="translated">接頭辞としてマッチさせたいパターンを指定した文字列 (省略する)。省略した場合は、オプションの空白はスキップされます。</target>
        </trans-unit>
        <trans-unit id="e9bc4f6bfc82a7d474c7f1ed6bc1a706c74a685f" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched as the opening tag. If the pattern string is omitted (or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) then a pattern that matches any standard XML tag is used.</source>
          <target state="translated">開始タグとして照合するパターンを指定する文字列。パターン文字列が省略されている（または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; である）場合、標準のXMLタグに一致するパターンが使用されます。</target>
        </trans-unit>
        <trans-unit id="dfa783b3ec2bd497248d1e337a89db649190c94f" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched as the opening tag. If the pattern string is omitted (or &lt;code&gt;undef&lt;/code&gt;) then a pattern that matches any standard XML tag is used.</source>
          <target state="translated">開始タグとして照合するパターンを指定する文字列。パターン文字列が省略されている（または &lt;code&gt;undef&lt;/code&gt; ）場合、任意の標準XMLタグに一致するパターンが使用されます。</target>
        </trans-unit>
        <trans-unit id="048410179c1d880e31b42e6134fee925ec940ae9" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched at the closing tag. If the pattern string is omitted (or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) then the closing tag is constructed by inserting a &lt;code&gt;/&lt;/code&gt; after any leading bracket characters in the actual opening tag that was matched (</source>
          <target state="translated">終了タグで照合するパターンを指定する文字列。パターン文字列が省略されている（または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; である）場合、終了タグは、一致した実際の開始タグ内の先行ブラケット文字の後に &lt;code&gt;/&lt;/code&gt; を挿入することによって構築されます（</target>
        </trans-unit>
        <trans-unit id="e5788a69c88b131396f814045cc6b53ce0cc3890" translate="yes" xml:space="preserve">
          <source>A string specifying a pattern to be matched at the closing tag. If the pattern string is omitted (or &lt;code&gt;undef&lt;/code&gt;) then the closing tag is constructed by inserting a &lt;code&gt;/&lt;/code&gt; after any leading bracket characters in the actual opening tag that was matched (</source>
          <target state="translated">終了タグで照合するパターンを指定する文字列。パターン文字列が省略されている（または &lt;code&gt;undef&lt;/code&gt; ）場合、終了タグは、一致した実際の開始タグの先頭の角かっこ文字の後に &lt;code&gt;/&lt;/code&gt; を挿入することによって作成されます（</target>
        </trans-unit>
        <trans-unit id="4ddc15672e491fc997c3e75cb530fdf3735fbd3c" translate="yes" xml:space="preserve">
          <source>A string that can suppress Perl's warning about failed locale settings at startup. Failure can occur if the locale support in the operating system is lacking (broken) in some way--or if you mistyped the name of a locale when you set up your environment. If this environment variable is absent, or has a value other than &quot;0&quot; or &quot;&quot;, Perl will complain about locale setting failures.</source>
          <target state="translated">起動時のロケール設定の失敗に関するPerlの警告を抑制するための文字列。失敗は、オペレーティングシステムのロケールサポートが何らかの形で不足している (壊れている)場合や、環境設定時にロケール名を間違えた場合に起こります。この環境変数が存在しない場合や、&quot;0 &quot;や&quot;&quot;以外の値を持っている場合、Perl はロケール設定の失敗を訴えます。</target>
        </trans-unit>
        <trans-unit id="a2db67434e3c04d01083072b7b914ae53b6902d9" translate="yes" xml:space="preserve">
          <source>A string to be processed (&lt;code&gt;$_&lt;/code&gt; if the string is omitted or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">処理する文字列（文字列が省略されている場合、または &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合は &lt;code&gt;$_&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8e5b03d931e2204b8a3d04d2a7f5abbae4ae2b0b" translate="yes" xml:space="preserve">
          <source>A string to be processed (&lt;code&gt;$_&lt;/code&gt; if the string is omitted or &lt;code&gt;undef&lt;/code&gt;)</source>
          <target state="translated">処理される文字列（文字列が省略されているか &lt;code&gt;undef&lt;/code&gt; の場合は &lt;code&gt;$_&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6e51f4c9fde9edecc0936ad5478d06f35a15c4b1" translate="yes" xml:space="preserve">
          <source>A string which is (possibly) interpolated and then executed as a system command with</source>
          <target state="translated">(おそらく)補間された文字列で、システムコマンドとして</target>
        </trans-unit>
        <trans-unit id="9e71c5ca1dc6ef7670b395665e5d81dc1d113fc0" translate="yes" xml:space="preserve">
          <source>A string which is (possibly) interpolated and then executed as a system command, via</source>
          <target state="translated">(おそらく)補間され、システムコマンドとして実行される文字列。</target>
        </trans-unit>
        <trans-unit id="b7d502174d30a5e3436227bfef788bb331c8da57" translate="yes" xml:space="preserve">
          <source>A string with escapes for double-quotes and backslashes.</source>
          <target state="translated">ダブルクォートとバックスラッシュをエスケープした文字列。</target>
        </trans-unit>
        <trans-unit id="541174c6780e47b0b7c46aee134212a478513335" translate="yes" xml:space="preserve">
          <source>A string with no brackety calls, like this:</source>
          <target state="translated">こんな感じのワキガのないストリングス。</target>
        </trans-unit>
        <trans-unit id="91e95b380bb6e68f8d92ebbea2146b404a9530ac" translate="yes" xml:space="preserve">
          <source>A string.</source>
          <target state="translated">文字列です。</target>
        </trans-unit>
        <trans-unit id="f332e2ab827e7ad888e10e40f020c6f2638261a6" translate="yes" xml:space="preserve">
          <source>A subclass for in-memory extracted file from Archive::Tar</source>
          <target state="translated">Archive::Tar のメモリ内展開ファイルのサブクラス</target>
        </trans-unit>
        <trans-unit id="abd458b754cc911d966797f7f9e904a5bf421ea9" translate="yes" xml:space="preserve">
          <source>A subclass of Pod::Simple::PullParser should define a &lt;code&gt;run&lt;/code&gt; method that calls &lt;code&gt;$token = $parser-&amp;gt;get_token&lt;/code&gt; to pull tokens.</source>
          <target state="translated">Pod :: Simple :: PullParserのサブクラスは、 &lt;code&gt;$token = $parser-&amp;gt;get_token&lt;/code&gt; をプルするために$ token = $ parser-&amp;gt; get_tokenを呼び出す &lt;code&gt;run&lt;/code&gt; メソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="6da5549484c85ec07cefefac0b04929e1e4b68b4" translate="yes" xml:space="preserve">
          <source>A subdirectory</source>
          <target state="translated">サブディレクトリ</target>
        </trans-unit>
        <trans-unit id="f3c131323abddd429496c2a4e94519d28ee7cce1" translate="yes" xml:space="preserve">
          <source>A subform of &quot;Eskimo&quot;.</source>
          <target state="translated">エスキモー」のサブフォーム。</target>
        </trans-unit>
        <trans-unit id="2185f5ee89fe302e7bad5c0ce031b9136fe1881e" translate="yes" xml:space="preserve">
          <source>A subpattern &lt;b&gt;assertion&lt;/b&gt; matching the &lt;b&gt;null string&lt;/b&gt; between &lt;b&gt;characters&lt;/b&gt;.</source>
          <target state="translated">サブパターン&lt;b&gt;アサーション&lt;/b&gt;一致する&lt;b&gt;ヌル文字列&lt;/b&gt;間の&lt;b&gt;文字を&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="dcb76fdf91425256508047ecf8357fd1c432b0b3" translate="yes" xml:space="preserve">
          <source>A subroutine declaration or definition may have a list of attributes associated with it. If such an attribute list is present, it is broken up at space or colon boundaries and treated as though a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attributes&lt;/code&gt; had been seen. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; for details about what attributes are currently supported. Unlike the limitation with the obsolescent &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attrs&lt;/code&gt; , the &lt;code&gt;sub : ATTRLIST&lt;/code&gt; syntax works to associate the attributes with a pre-declaration, and not just with a subroutine definition.</source>
          <target state="translated">サブルーチンの宣言または定義には、属性のリストが関連付けられている場合があります。そのような属性リストが存在する場合、それはスペースまたはコロンの境界で分割され、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attributes&lt;/code&gt; が見られたかのように扱われます。参照は&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;の属性は、現在サポートされているかについての詳細は。旧式の制限とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; attrs&lt;/code&gt; 、 &lt;code&gt;sub : ATTRLIST&lt;/code&gt; 構文は、事前に宣言した属性を関連付けるだけではなく、サブルーチンの定義として動作します。</target>
        </trans-unit>
        <trans-unit id="99cebddb12f55a27302430e67378ac046d2c1eea" translate="yes" xml:space="preserve">
          <source>A subroutine declaration or definition may have a list of attributes associated with it. If such an attribute list is present, it is broken up at space or colon boundaries and treated as though a &lt;code&gt;use attributes&lt;/code&gt; had been seen. See &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; for details about what attributes are currently supported. Unlike the limitation with the obsolescent &lt;code&gt;use attrs&lt;/code&gt;, the &lt;code&gt;sub : ATTRLIST&lt;/code&gt; syntax works to associate the attributes with a pre-declaration, and not just with a subroutine definition.</source>
          <target state="translated">サブルーチンの宣言または定義には、属性のリストが関連付けられている場合があります。そのような属性リストが存在する場合、それはスペースまたはコロンの境界で分割され、 &lt;code&gt;use attributes&lt;/code&gt; が見られたかのように扱われます。参照は&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;の属性は、現在サポートされているかについての詳細は。旧式の制限とは異なり、 &lt;code&gt;use attrs&lt;/code&gt; 、 &lt;code&gt;sub : ATTRLIST&lt;/code&gt; 構文は、事前に宣言した属性を関連付けるだけではなく、サブルーチンの定義として動作します。</target>
        </trans-unit>
        <trans-unit id="d523fe66bca5199af0174d9a0e394a363dbbca6f" translate="yes" xml:space="preserve">
          <source>A subroutine may be called using an explicit &lt;code&gt;&amp;amp;&lt;/code&gt; prefix. The &lt;code&gt;&amp;amp;&lt;/code&gt; is optional in modern Perl, as are parentheses if the subroutine has been predeclared. The &lt;code&gt;&amp;amp;&lt;/code&gt; is</source>
          <target state="translated">サブルーチンは、明示的な &lt;code&gt;&amp;amp;&lt;/code&gt; 接頭辞を使用して呼び出すことができます。 &lt;code&gt;&amp;amp;&lt;/code&gt; 最近のPerlでオプションである、として、サブルーチンがあらかじめ宣言されている場合は、括弧です。 &lt;code&gt;&amp;amp;&lt;/code&gt; IS</target>
        </trans-unit>
        <trans-unit id="8248b9acb1464596db08abf7a96c03fe64a833e0" translate="yes" xml:space="preserve">
          <source>A subroutine reference to be run at the end of the test script, if any of the tests fail. See &lt;a href=&quot;#ONFAIL&quot;&gt;&quot;ONFAIL&quot;&lt;/a&gt;.</source>
          <target state="translated">いずれかのテストが失敗した場合に、テストスクリプトの最後に実行されるサブルーチン参照。&lt;a href=&quot;#ONFAIL&quot;&gt;「ONFAIL」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="472af3789d6b7cf851a695ddbea3171cb9f6d23e" translate="yes" xml:space="preserve">
          <source>A subroutine reference to be run at the end of the test script, if any of the tests fail. See &lt;a href=&quot;#ONFAIL&quot;&gt;ONFAIL&lt;/a&gt;.</source>
          <target state="translated">いずれかのテストが失敗した場合に、テストスクリプトの最後に実行されるサブルーチン参照。&lt;a href=&quot;#ONFAIL&quot;&gt;ONFAILを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3a8138bb418c6dab14df47bdb5b98c794bb069d9" translate="yes" xml:space="preserve">
          <source>A subroutine stub (or forward declaration) looks like</source>
          <target state="translated">サブルーチンのスタブ(または前方宣言)は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5c6644152e307dff88d95b419866126c49ada182" translate="yes" xml:space="preserve">
          <source>A substitution can do this for you. For a single line, you want to replace all the leading or trailing whitespace with nothing. You can do that with a pair of substitutions:</source>
          <target state="translated">置換でこれを行うことができます。1行の場合、先頭または末尾の空白をすべて何もないものに置き換えたいとします。これは一対の置換で行うことができます。</target>
        </trans-unit>
        <trans-unit id="c348ffb20315d847f6359bc6cf9c39166e27bc60" translate="yes" xml:space="preserve">
          <source>A substring &lt;b&gt;captured&lt;/b&gt; by a subpattern within unadorned parentheses in a &lt;b&gt;regex&lt;/b&gt;. Backslashed decimal numbers (&lt;code&gt;\1&lt;/code&gt; , &lt;code&gt;\2&lt;/code&gt; , etc.) later in the same pattern refer back to the corresponding subpattern in the current match. Outside the pattern, the numbered variables (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , etc.) continue to refer to these same values, as long as the pattern was the last successful match of the current &lt;b&gt;dynamic scope&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;正規表現&lt;/b&gt;内の修飾&lt;b&gt;さ&lt;/b&gt;れていない括弧内のサブパターンによって&lt;b&gt;キャプチャさ&lt;/b&gt;れた部分文字列。後で同じパターンのバックスラッシュ付き10進数（ &lt;code&gt;\1&lt;/code&gt; 、 &lt;code&gt;\2&lt;/code&gt; など）は、現在の一致の対応するサブパターンを参照します。パターンの外では、番号付き変数（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; など）は、パターンが現在の&lt;b&gt;動的スコープ&lt;/b&gt;で最後に成功した一致である限り、これらの同じ値を参照し続け&lt;b&gt;ます&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="daaa383ddb585e6ea73f1cbfe236bb8b4da61e98" translate="yes" xml:space="preserve">
          <source>A substring &lt;b&gt;captured&lt;/b&gt; by a subpattern within unadorned parentheses in a &lt;b&gt;regex&lt;/b&gt;. Backslashed decimal numbers (&lt;code&gt;\1&lt;/code&gt;, &lt;code&gt;\2&lt;/code&gt;, etc.) later in the same pattern refer back to the corresponding subpattern in the current match. Outside the pattern, the numbered variables (&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, etc.) continue to refer to these same values, as long as the pattern was the last successful match of the current &lt;b&gt;dynamic scope&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;正規表現&lt;/b&gt;内の装飾&lt;b&gt;さ&lt;/b&gt;れていない括弧内のサブパターンによって&lt;b&gt;キャプチャさ&lt;/b&gt;れたサブストリング。同じパターンの後でバックスラッシュされた10進数（ &lt;code&gt;\1&lt;/code&gt; 、 &lt;code&gt;\2&lt;/code&gt; など）は、現在の一致の対応するサブパターンを参照します。パターンの外側では、パターンが現在の&lt;b&gt;動的スコープの&lt;/b&gt;最後の成功した一致である限り、番号付き変数（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; など）はこれらの同じ値を参照し続け&lt;b&gt;ます&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="315d0303e3aef241562f12b55669ceb9dfe96eb1" translate="yes" xml:space="preserve">
          <source>A subtest may call &lt;code&gt;skip_all&lt;/code&gt; . No tests will be run, but the subtest is considered a skip.</source>
          <target state="translated">サブテストは &lt;code&gt;skip_all&lt;/code&gt; を呼び出すことができます。テストは実行されませんが、サブテストはスキップと見なされます。</target>
        </trans-unit>
        <trans-unit id="f748083200a82ad373df61839abe0f808219917c" translate="yes" xml:space="preserve">
          <source>A subtest may call &lt;code&gt;skip_all&lt;/code&gt;. No tests will be run, but the subtest is considered a skip.</source>
          <target state="translated">サブテストは &lt;code&gt;skip_all&lt;/code&gt; を呼び出す場合があります。テストは実行されませんが、サブテストはスキップと見なされます。</target>
        </trans-unit>
        <trans-unit id="37458279bba72a238643fe5627f2676bd36cfdcd" translate="yes" xml:space="preserve">
          <source>A subtest of the</source>
          <target state="translated">のサブテスト</target>
        </trans-unit>
        <trans-unit id="ddbd7203825cf4784baaa474ee9dd57475c72727" translate="yes" xml:space="preserve">
          <source>A subtlety of the parsing process means that a regex like &lt;code&gt;/foo/&lt;/code&gt; is originally parsed into an alternation with a single branch. It is only afterwards that the optimiser converts single branch alternations into the simpler form.</source>
          <target state="translated">解析プロセスの微妙さは、 &lt;code&gt;/foo/&lt;/code&gt; ような正規表現が最初に単一の分岐を持つ代替に解析されることを意味します。その後、オプティマイザが単一の分岐の交互をより単純な形式に変換します。</target>
        </trans-unit>
        <trans-unit id="ca8ecc01810919d80818935b434bfbed09194445" translate="yes" xml:space="preserve">
          <source>A sufficiently complicated module using XS would have both Perl code (defined in</source>
          <target state="translated">XSを使用した十分に複雑なモジュールは、Perlのコード(</target>
        </trans-unit>
        <trans-unit id="ec7ba027499434cb4ad8ba5cfec6aea4c41ca3a7" translate="yes" xml:space="preserve">
          <source>A superset of stdio's &lt;code&gt;ungetc()&lt;/code&gt; . Should arrange for future reads to see the bytes in &lt;code&gt;vbuf&lt;/code&gt; . If there is no obviously better implementation then &lt;code&gt;PerlIOBase_unread()&lt;/code&gt; provides the function by pushing a &quot;fake&quot; &quot;pending&quot; layer above the calling layer.</source>
          <target state="translated">stdioの &lt;code&gt;ungetc()&lt;/code&gt; のスーパーセット。今後の読み取りで &lt;code&gt;vbuf&lt;/code&gt; のバイトを確認できるように準備する必要があります。明らかにより良い実装がない場合、 &lt;code&gt;PerlIOBase_unread()&lt;/code&gt; は、「偽の」「保留中の」層を呼び出し側の層の上にプッシュすることによって機能を提供します。</target>
        </trans-unit>
        <trans-unit id="f4c52ed44dcfe3669b2e0f81a285d105620f4890" translate="yes" xml:space="preserve">
          <source>A superset of stdio's &lt;code&gt;ungetc()&lt;/code&gt;. Should arrange for future reads to see the bytes in &lt;code&gt;vbuf&lt;/code&gt;. If there is no obviously better implementation then &lt;code&gt;PerlIOBase_unread()&lt;/code&gt; provides the function by pushing a &quot;fake&quot; &quot;pending&quot; layer above the calling layer.</source>
          <target state="translated">stdioの &lt;code&gt;ungetc()&lt;/code&gt; のスーパーセット。 &lt;code&gt;vbuf&lt;/code&gt; のバイトを確認するために、将来の読み取りを手配する必要があります。明らかに優れた実装がない場合、 &lt;code&gt;PerlIOBase_unread()&lt;/code&gt; は、呼び出し側レイヤーの上に「偽の」「保留中」のレイヤーをプッシュすることによって関数を提供します。</target>
        </trans-unit>
        <trans-unit id="98f5e38ca1ab11480faa9e1beadc0882ff7204ae" translate="yes" xml:space="preserve">
          <source>A synonym for &lt;a href=&quot;#grok_numeric_radix&quot;&gt;&quot;grok_numeric_radix&quot;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#grok_numeric_radix&quot;&gt;「grok_numeric_radix」の&lt;/a&gt;同義語</target>
        </trans-unit>
        <trans-unit id="c626abd78031b8aca6600ea0c2440d7fd00d78cd" translate="yes" xml:space="preserve">
          <source>A synonym for abs_path().</source>
          <target state="translated">abs_path()の同義語。</target>
        </trans-unit>
        <trans-unit id="e1b37e0c283299b17772ecb39d63c354cb1c21a5" translate="yes" xml:space="preserve">
          <source>A synopsis of the common uses of the module</source>
          <target state="translated">モジュールの一般的な使用法の概要</target>
        </trans-unit>
        <trans-unit id="cbedc357c1a8c0f556eb0ada80454f902c9b0495" translate="yes" xml:space="preserve">
          <source>A syntactic construct consisting of a sequence of Perl &lt;b&gt;statements&lt;/b&gt; that is delimited by braces. The &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; statements are defined in terms of</source>
          <target state="translated">中括弧で区切られた一連のPerl &lt;b&gt;ステートメント&lt;/b&gt;で構成される構文構造。 &lt;code&gt;if&lt;/code&gt; と &lt;code&gt;while&lt;/code&gt; 文はで定義されています</target>
        </trans-unit>
        <trans-unit id="ad7124750e36065dd8c98d176b7da5958dc7cdde" translate="yes" xml:space="preserve">
          <source>A syntactic construct representing a comma- separated list of expressions, evaluated to produce a &lt;b&gt;list value&lt;/b&gt;. Each &lt;b&gt;expression&lt;/b&gt; in a</source>
          <target state="translated">コンマで区切られた式のリストを表す構文構造。評価されて&lt;b&gt;リスト値&lt;/b&gt;を生成し&lt;b&gt;ます&lt;/b&gt;。それぞれ&lt;b&gt;の式&lt;/b&gt; Aで</target>
        </trans-unit>
        <trans-unit id="7291be1f4b56b7d225866ff464ea491e8b919184" translate="yes" xml:space="preserve">
          <source>A system that algorithmically writes code for you in a high-level language. See also &lt;b&gt;code generator&lt;/b&gt;.</source>
          <target state="translated">高水準言語でアルゴリズムに従ってコードを作成するシステム。&lt;b&gt;コードジェネレータ&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="87ef544f16a30a02ca093ea233165dcf6ff6a52e" translate="yes" xml:space="preserve">
          <source>A system that writes code for you in a low-level language, such as code to implement the backend of a compiler. See &lt;b&gt;program generator&lt;/b&gt;.</source>
          <target state="translated">コンパイラーのバックエンドを実装するコードなど、低レベル言語でコードを作成するシステム。&lt;b&gt;プログラムジェネレータを&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="57d745713dbf91df8c6f9ba2a699dab6d83ae07a" translate="yes" xml:space="preserve">
          <source>A template may be specified either with a leading template or with a TEMPLATE argument.</source>
          <target state="translated">テンプレートは、先頭のテンプレートを指定するか、TEMPLATE引数を指定するかのいずれかで指定することができます。</target>
        </trans-unit>
        <trans-unit id="becc5a1b25927d1909dc38d940b77e72a5cc23a0" translate="yes" xml:space="preserve">
          <source>A template used in &lt;b&gt;pattern matching&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;パターンマッチングで&lt;/b&gt;使用されるテンプレート。</target>
        </trans-unit>
        <trans-unit id="460ed5b4079db2b66835c9fa0b74f3db75b6b725" translate="yes" xml:space="preserve">
          <source>A temporary failure occurred during name resolution. The operation may be successful if it is retried later.</source>
          <target state="translated">名前解決中に一時的な障害が発生しました。後で再試行すれば、この操作は成功する可能性があります。</target>
        </trans-unit>
        <trans-unit id="36377f90ac483d31142c52a673f24ea229719c46" translate="yes" xml:space="preserve">
          <source>A temporary holding location for data. Data that are &lt;b&gt;Block buffering&lt;/b&gt; means that the data is passed on to its destination whenever the buffer is full. &lt;b&gt;Line buffering&lt;/b&gt; means that it&amp;rsquo;s passed on whenever a complete line is received. &lt;b&gt;Command buffering&lt;/b&gt; means that it&amp;rsquo;s passed every time you do a &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; command (or equivalent). If your output is unbuffered, the system processes it one byte at a time without the use of a holding area. This can be rather inefficient.</source>
          <target state="translated">データの一時的な保持場所。データがされている&lt;b&gt;ブロックがバッファリングする&lt;/b&gt;バッファがいっぱいになったときに、データがその宛先に渡されることを意味します。&lt;b&gt;行バッファリングと&lt;/b&gt;は、完全な行が受信されるたびに渡されることを意味します。&lt;b&gt;コマンドバッファリング&lt;/b&gt;とは、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; コマンド（または同等のコマンド）を実行するたびに渡されることを意味します。出力がバッファリングされていない場合、システムは保持領域を使用せずに一度に1バイトずつ処理します。これはかなり非効率的です。</target>
        </trans-unit>
        <trans-unit id="d02e4e224456aef53b6a5261e669756881433c31" translate="yes" xml:space="preserve">
          <source>A temporary holding location for data. Data that are &lt;b&gt;Block buffering&lt;/b&gt; means that the data is passed on to its destination whenever the buffer is full. &lt;b&gt;Line buffering&lt;/b&gt; means that it&amp;rsquo;s passed on whenever a complete line is received. &lt;b&gt;Command buffering&lt;/b&gt; means that it&amp;rsquo;s passed every time you do a &lt;code&gt;print&lt;/code&gt; command (or equivalent). If your output is unbuffered, the system processes it one byte at a time without the use of a holding area. This can be rather inefficient.</source>
          <target state="translated">データの一時的な保持場所。データがされている&lt;b&gt;ブロックがバッファリングする&lt;/b&gt;バッファがいっぱいになったときに、データがその宛先に渡されることを意味します。&lt;b&gt;ラインバッファリングと&lt;/b&gt;は、完全なラインが受信されるたびに渡されることを意味します。&lt;b&gt;コマンドバッファリング&lt;/b&gt;とは、 &lt;code&gt;print&lt;/code&gt; コマンド（または同等のコマンド）を実行するたびに渡されることを意味します。出力がバッファリングされていない場合、システムは保持領域を使用せずに一度に1バイトずつ処理します。これはかなり非効率的です。</target>
        </trans-unit>
        <trans-unit id="f18ef7078604acdbaf428768e9818f7cd824fdb3" translate="yes" xml:space="preserve">
          <source>A temporary value scheduled to die when the current statement finishes.</source>
          <target state="translated">現在のステートメントが終了したときに終了するようにスケジュールされた一時的な値。</target>
        </trans-unit>
        <trans-unit id="4fcd07f97a40c6345fdc7ef192c1a8b71aed7321" translate="yes" xml:space="preserve">
          <source>A test broke because it depended on Scalar::Util not being loaded. Test2 loads Scalar::Util. The test was updated to load Test2 after checking Scalar::Util's load status.</source>
          <target state="translated">Scalar::Utilがロードされていないことに依存していたため、テストが中断されました。Test2 は Scalar::Util をロードします。テストは、Scalar::Utilのロード状態を確認した後、Test2をロードするように更新されました。</target>
        </trans-unit>
        <trans-unit id="65b58ce0e330b75ba737dac3ce554a8e833edf70" translate="yes" xml:space="preserve">
          <source>A test script can then compare the input and output to make sure they are the expected values. When only an input or output function is provided the function will be named after the typemap entry and have either '_IN' or '_OUT' appended.</source>
          <target state="translated">テスト・スクリプトは、入力と出力を比較して、それらが期待された値であることを確認します。入力または出力関数のみが提供されている場合、関数の名前はタイプマップエントリの後に付けられ、 '_IN' または '_OUT' が付加されます。</target>
        </trans-unit>
        <trans-unit id="ffdb74e7322377b29b9419a20386899c648854d4" translate="yes" xml:space="preserve">
          <source>A test worked around a now-fixed planning bug. There is no need to upgrade if you have an old version installed. New versions install fine if you want them.</source>
          <target state="translated">テストでは、現在修正されている計画的なバグを回避して作業を行いました。古いバージョンがインストールされている場合は、アップグレードの必要はありません。新しいバージョンがインストールされていても問題ありません。</target>
        </trans-unit>
        <trans-unit id="be309ca808fdd70439ad47732767ff0fa5bc7488" translate="yes" xml:space="preserve">
          <source>A text &lt;b&gt;file&lt;/b&gt; that is a program intended to be &lt;b&gt;executed&lt;/b&gt; directly rather than &lt;b&gt;compiled&lt;/b&gt; to another form of file before &lt;b&gt;execution&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;実行&lt;/b&gt;前に別の形式のファイルに&lt;b&gt;コンパイル&lt;/b&gt;するのではなく、直接&lt;b&gt;実行&lt;/b&gt;することを目的としたプログラムであるテキスト&lt;b&gt;ファイル&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="69f7603a0e21614f40b6c5bdc945d53c623ea439" translate="yes" xml:space="preserve">
          <source>A third argument is also passed to the handler, which contains a copy of the raw binary contents of the &lt;code&gt;siginfo&lt;/code&gt; structure: if a system has some non-POSIX fields, this third argument is where to &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; them from.</source>
          <target state="translated">3番目の引数もハンドラーに渡されます。これには、 &lt;code&gt;siginfo&lt;/code&gt; 構造のバイナリの生の内容のコピーが含まれます。システムにPOSIX以外のフィールドがある場合、この3番目の引数はそれらを &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; する場所です。</target>
        </trans-unit>
        <trans-unit id="32c2d3b6b4b2f2038155a957dfc51bdf39a45fb2" translate="yes" xml:space="preserve">
          <source>A third argument is also passed to the handler, which contains a copy of the raw binary contents of the &lt;code&gt;siginfo&lt;/code&gt; structure: if a system has some non-POSIX fields, this third argument is where to &lt;code&gt;unpack()&lt;/code&gt; them from.</source>
          <target state="translated">3番目の引数もハンドラーに渡されます。ハンドラーには、 &lt;code&gt;siginfo&lt;/code&gt; 構造の生のバイナリコンテンツのコピーが含まれています。システムにPOSIX以外のフィールドがある場合、この3番目の引数はそれらを &lt;code&gt;unpack()&lt;/code&gt; する場所です。</target>
        </trans-unit>
        <trans-unit id="6401a363806a46dc3a276adc43e53feeed2b394c" translate="yes" xml:space="preserve">
          <source>A third style of bundling allows only values to be bundled with options. It can be enabled with:</source>
          <target state="translated">3 番目のバンドルのスタイルでは、値のみをオプションにバンドルすることができます。で有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="7390c57e18948db2c7311e3d6392b36faa8ca560" translate="yes" xml:space="preserve">
          <source>A thorough reference to &lt;code&gt;open&lt;/code&gt; follows. For a gentler introduction to the basics of &lt;code&gt;open&lt;/code&gt;, see also the &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; manual page.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; への完全な参照は次のとおりです。 &lt;code&gt;open&lt;/code&gt; の基本についてのより穏やかな紹介については、&lt;a href=&quot;perlopentut&quot;&gt;perlopentutの&lt;/a&gt;マニュアルページも参照してください。</target>
        </trans-unit>
        <trans-unit id="ec67162265d799cee7ba073ea5ae61361a099a71" translate="yes" xml:space="preserve">
          <source>A thread is a flow of control through a program with a single execution point.</source>
          <target state="translated">スレッドとは、単一の実行ポイントを持つプログラムを制御する流れのことです。</target>
        </trans-unit>
        <trans-unit id="e05fa4d94d725ab6d1467a08643ac53ed8a48ab5" translate="yes" xml:space="preserve">
          <source>A thread terminated in some manner other than just returning from its entry point function, or by using &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; . For example, the thread may have terminated because of an error, or by using &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エントリポイント関数から単に戻る以外の方法で、または &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; を使用してスレッドが終了しました。たとえば、エラーが原因で、または &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を使用してスレッドが終了した可能性があります。</target>
        </trans-unit>
        <trans-unit id="51ac91275952e664bda6e199578add8b9d972807" translate="yes" xml:space="preserve">
          <source>A thread terminated in some manner other than just returning from its entry point function, or by using &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt;. For example, the thread may have terminated because of an error, or by using &lt;code&gt;die&lt;/code&gt;.</source>
          <target state="translated">スレッドは、エントリポイント関数から戻る以外の方法で、または &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; を使用して終了しました。たとえば、エラーが原因で、または &lt;code&gt;die&lt;/code&gt; を使用してスレッドが終了した可能性があります。</target>
        </trans-unit>
        <trans-unit id="d5f8dc4f0e564ede193fccb0795b819fd8f8f455" translate="yes" xml:space="preserve">
          <source>A tied hash can have any semantics at all. It is typically tied to an on-disk database, so that cached values are stored in the database and retrieved from it again when needed, and the disk file typically persists after your program has exited. See &lt;code&gt;perltie&lt;/code&gt; for more complete details about &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">tieされたハッシュは、すべてのセマンティクスを持つことができます。通常、これはディスク上のデータベースに関連付けられているため、キャッシュされた値はデータベースに格納され、必要に応じてデータベースから再度取得されます。また、ディスクファイルは通常、プログラムの終了後も保持されます。 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; の詳細については、 &lt;code&gt;perltie&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b8ea0564fcf5384920d8ee2daa66e116f59b8821" translate="yes" xml:space="preserve">
          <source>A tied hash can have any semantics at all. It is typically tied to an on-disk database, so that cached values are stored in the database and retrieved from it again when needed, and the disk file typically persists after your program has exited. See &lt;code&gt;perltie&lt;/code&gt; for more complete details about &lt;code&gt;tie&lt;/code&gt;.</source>
          <target state="translated">結び付けられたハッシュは、すべてのセマンティクスを持つことができます。通常、これはディスク上のデータベースに関連付けられているため、キャッシュされた値はデータベースに保存され、必要に応じてデータベースから再度取得されます。ディスクファイルは通常、プログラムが終了した後も保持されます。 &lt;code&gt;tie&lt;/code&gt; 詳細については、 &lt;code&gt;perltie&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="88fb398954c23d545a218b6f24145de7bcc79c9d" translate="yes" xml:space="preserve">
          <source>A token in a programming language, such as a number or &lt;b&gt;string&lt;/b&gt;, that gives you an actual &lt;b&gt;value&lt;/b&gt; instead of merely representing possible values as a &lt;b&gt;variable&lt;/b&gt; does.</source>
          <target state="translated">&lt;b&gt;変数の&lt;/b&gt;ように単に可能な値を表すのではなく、実際の&lt;b&gt;値&lt;/b&gt;を提供する数値や&lt;b&gt;文字列&lt;/b&gt;などのプログラミング言語のトークン。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="49a82ac17323d56d44189291d63111e25b7240b2" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;anyinflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」の解凍を実行するために、トップレベルの関数 &lt;code&gt;anyinflate&lt;/code&gt; が提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d29bd38bb8619e697991b75f7b05d15001a0b12c" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;anyinflate&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数 &lt;code&gt;anyinflate&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="87c7fedbb8115b85609fa9659aa296d9a84a6510" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;anyuncompress&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位の関数 &lt;code&gt;anyuncompress&lt;/code&gt; は、バッファやファイル間で「ワンショット」の圧縮解除を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="3e9ee68461a1d97ac1d9a01a7954547eccc561e8" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;anyuncompress&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数 &lt;code&gt;anyuncompress&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e389addc6410d492c7bd5a5e3cf1e11884bdfd29" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;bunzip2&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位の関数 &lt;code&gt;bunzip2&lt;/code&gt; は、バッファーやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="493740e1a612413aadafd7b1301bbf610832c573" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;bunzip2&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数 &lt;code&gt;bunzip2&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb0024f5a7eefa6e10161c1ed9db11d9ebbc931e" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;bzip2&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;bzip2&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c37a0d1ee81cf00099658284d063416ebb99ad67" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;bzip2&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、最上位の関数 &lt;code&gt;bzip2&lt;/code&gt; が提供されています。圧縮プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェイス」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="565743b74071fd71d3b79fbb653796a00d3b13c8" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;deflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;deflate&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bff82540911c024ca186615e4403dd05a0cf4f35" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;deflate&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、最上位の関数 &lt;code&gt;deflate&lt;/code&gt; が提供されています。圧縮プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェイス」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9810b58473f41aaf89cef15b62322dda3e22aea6" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;gunzip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位関数の &lt;code&gt;gunzip&lt;/code&gt; は、バッファやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7badb6377fd4b8b2d62f64ab74c751ff2fd93c67" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;gunzip&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数である &lt;code&gt;gunzip&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6e391619962954b4fb420d746dbc210bda397a8" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;gzip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位関数の &lt;code&gt;gzip&lt;/code&gt; は、バッファーやファイル間で「ワンショット」圧縮を実行するために提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6030f52309ef00261ec0f923b10f4c609bd43290" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;gzip&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、最上位の関数 &lt;code&gt;gzip&lt;/code&gt; が提供されています。圧縮プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェイス」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="cb09dcc8a8a7122c93016ac58ef7ca78f87815eb" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;inflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">トップレベルの関数 &lt;code&gt;inflate&lt;/code&gt; は、バッファやファイル間で「ワンショット」の圧縮解除を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="593396a26d871d3ccd3e4c4d01083746e0688751" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;inflate&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数 &lt;code&gt;inflate&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6ff8dd50fc057dd45574766e64ed1ef729e4475" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;rawdeflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;rawdeflate&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e07f7aa9b2e11715d969e7d7de3a8f095d0510a4" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;rawdeflate&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、最上位の関数 &lt;code&gt;rawdeflate&lt;/code&gt; が提供されています。圧縮プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェイス」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="da007ab4cef02cbdbebe645067fd56f8debb93a1" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;rawinflate&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">トップレベルの関数 &lt;code&gt;rawinflate&lt;/code&gt; は、バッファーやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="181a224cf55cf1a34703cf3c62787fd4f2cb1b27" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;rawinflate&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数 &lt;code&gt;rawinflate&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="522a8c4c8a64b09e73f7b19d33d186f1963c38ba" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;unzip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">最上位の関数 &lt;code&gt;unzip&lt;/code&gt; は、バッファやファイル間で「ワンショット」の解凍を実行するために提供されています。解凍プロセスのより詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b46148d3eace9f217f2c5cb71de1e5b53c2eb0a6" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;unzip&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; uncompression between buffers and/or files. For finer control over the uncompression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」解凍を実行するために、最上位の関数 &lt;code&gt;unzip&lt;/code&gt; が提供されています。解凍プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェース」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="cf0562aa58382ee4296c753a78a1efd86d792dc1" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;zip&lt;/code&gt; , is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;OO Interface&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、トップレベルの関数 &lt;code&gt;zip&lt;/code&gt; が提供されています。圧縮プロセスの詳細な制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;OOインターフェイスの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="7d1de9f7e19cbe1751454358d979d818197cd4c0" translate="yes" xml:space="preserve">
          <source>A top-level function, &lt;code&gt;zip&lt;/code&gt;, is provided to carry out &quot;one-shot&quot; compression between buffers and/or files. For finer control over the compression process, see the &lt;a href=&quot;#OO-Interface&quot;&gt;&quot;OO Interface&quot;&lt;/a&gt; section.</source>
          <target state="translated">バッファやファイル間で「ワンショット」圧縮を実行するために、最上位の関数 &lt;code&gt;zip&lt;/code&gt; が提供されています。圧縮プロセスのより細かい制御については、&lt;a href=&quot;#OO-Interface&quot;&gt;「OOインターフェイス」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8b8620967b93bad58d8aa8f79801bf38881ee8c9" translate="yes" xml:space="preserve">
          <source>A totally different approach is to create a hash of function references.</source>
          <target state="translated">全く異なるアプローチは、関数参照のハッシュを作成することです。</target>
        </trans-unit>
        <trans-unit id="980ba3b61619e7f53950a6b31a7df9b45b72edfd" translate="yes" xml:space="preserve">
          <source>A trailing colon is added automatically to the resulting path, to denote a directory.</source>
          <target state="translated">結果のパスには、ディレクトリを示すために、末尾のコロンが自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="7b8da94bbc0623b636921b1bb640e93b774abc6e" translate="yes" xml:space="preserve">
          <source>A translation-concealed rooted logical name that contains Perl and the logical device for the @INC path on VMS only. Other logical names that affect Perl on VMS include PERLSHR, PERL_ENV_TABLES, and SYS$TIMEZONE_DIFFERENTIAL, but are optional and discussed further in &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt; and in</source>
          <target state="translated">PerlとVMS上の@INCパスの論理デバイスのみを含む、変換が隠されたルート論理名。VMS上のPerlに影響を与えるその他の論理名には、PERLSHR、PERL_ENV_TABLES、およびSYS $ TIMEZONE_DIFFERENTIALが含まれますが、オプションであり、&lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt;および</target>
        </trans-unit>
        <trans-unit id="2dde805e9629b528928f950f1faf5f6602f0b7c5" translate="yes" xml:space="preserve">
          <source>A trivial application of this mechanism is to implement options that are related to each other. For example:</source>
          <target state="translated">このメカニズムの些細なアプリケーションは、互いに関連するオプションを実装することです。例えば</target>
        </trans-unit>
        <trans-unit id="a063d28faa82402e5b2d3d1ed31d0f1ad9c9dea3" translate="yes" xml:space="preserve">
          <source>A tutorial about writing really basic tests</source>
          <target state="translated">本当に基本的なテストの書き方についてのチュートリアル</target>
        </trans-unit>
        <trans-unit id="e89f1de21c226b59a1d42d1a18c10afa08b69645" translate="yes" xml:space="preserve">
          <source>A twice as long string of lowercase hexadecimal digits.</source>
          <target state="translated">小文字の16進数の2倍の長さの文字列。</target>
        </trans-unit>
        <trans-unit id="d607f495a88ea6528e8578b9888418a4ffea3288" translate="yes" xml:space="preserve">
          <source>A type definition in the C and C++ languages.</source>
          <target state="translated">C言語およびC++言語での型定義。</target>
        </trans-unit>
        <trans-unit id="b268ce7d38ddd4cca20a237c3776e2eb1ce567ea" translate="yes" xml:space="preserve">
          <source>A typeglob may be dereferenced the same way a reference can, because the dereference syntax always indicates the type of reference desired. So &lt;code&gt;${*foo}&lt;/code&gt; and &lt;code&gt;${\$foo}&lt;/code&gt; both indicate the same scalar variable.</source>
          <target state="translated">逆参照構文は常に必要な参照のタイプを示すため、型グロブは参照と同じ方法で逆参照することができます。したがって、 &lt;code&gt;${*foo}&lt;/code&gt; と &lt;code&gt;${\$foo}&lt;/code&gt; どちらも同じスカラー変数を示します。</target>
        </trans-unit>
        <trans-unit id="0bd7e8fb31d877d634438bee94398cae29fcf8b9" translate="yes" xml:space="preserve">
          <source>A typical %Lexicon entry is meant to signify a phrase, taking some number (0 or more) of parameters. An entry is meant to be accessed by via a string</source>
          <target state="translated">典型的な %Lexicon エントリは、いくつかの数 (0 またはそれ以上)のパラメータを取り、フレーズを示すことを意味します。エントリは、文字列</target>
        </trans-unit>
        <trans-unit id="93815fb778bd83a6e1edff66afe56d2943dfbc74" translate="yes" xml:space="preserve">
          <source>A typical context stack pushing can be found in &lt;code&gt;pp_entersub&lt;/code&gt;; the following shows a simplified and stripped-down example of a non-XS call, along with comments showing roughly what each function does.</source>
          <target state="translated">典型的なコンテキストスタックプッシュは &lt;code&gt;pp_entersub&lt;/code&gt; にあります。以下に、XS以外の呼び出しの簡略化された簡略化された例と、各関数の機能を大まかに示すコメントを示します。</target>
        </trans-unit>
        <trans-unit id="8cc65df0ae9490ead8aa8320483d71f0467ec4f8" translate="yes" xml:space="preserve">
          <source>A typical example is:</source>
          <target state="translated">典型的な例としては</target>
        </trans-unit>
        <trans-unit id="c800528a6e2ea28289c5fcbc08ec77553e110ecf" translate="yes" xml:space="preserve">
          <source>A typical invocation of &lt;a href=&quot;h2xs&quot;&gt;h2xs&lt;/a&gt; for a pure Perl module is:</source>
          <target state="translated">純粋なPerlモジュールの典型的な&lt;a href=&quot;h2xs&quot;&gt;h2xsの&lt;/a&gt;呼び出しは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="74d9b7c164412a45025b12444007449586d960a8" translate="yes" xml:space="preserve">
          <source>A typical module using &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt; starts like this:</source>
          <target state="translated">&lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt;を使用する一般的なモジュールは次のように始まります。</target>
        </trans-unit>
        <trans-unit id="42c5cd07f5670bfc29c548d8b58ba2ec35dd0a0d" translate="yes" xml:space="preserve">
          <source>A typical one is the version number of your OS specific module. (ie. MM_Unix_VERSION or MM_VMS_VERSION).</source>
          <target state="translated">典型的なものは、OS固有のモジュールのバージョン番号です(例えば MM_Unix_VERSION や MM_VMS_VERSION)。(例えば MM_Unix_VERSION や MM_VMS_VERSION)。</target>
        </trans-unit>
        <trans-unit id="11ed3b2a4b5cffbd69ae6d23ab2fd650fceaafba" translate="yes" xml:space="preserve">
          <source>A typical use of &lt;code&gt;gen_delimited_pat&lt;/code&gt; would be to build special purpose tags for &lt;code&gt;extract_tagged&lt;/code&gt; . For example, to properly ignore &quot;empty&quot; XML elements (which might contain quoted strings):</source>
          <target state="translated">&lt;code&gt;gen_delimited_pat&lt;/code&gt; 一般的な用途は、 &lt;code&gt;extract_tagged&lt;/code&gt; の特別な目的のタグを作成することです。たとえば、「空の」XML要素（引用符で囲まれた文字列を含む場合がある）を適切に無視するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d65643eaa341a620d95fa5e5dc282d3f90a8a53b" translate="yes" xml:space="preserve">
          <source>A typical use of &lt;code&gt;gen_delimited_pat&lt;/code&gt; would be to build special purpose tags for &lt;code&gt;extract_tagged&lt;/code&gt;. For example, to properly ignore &quot;empty&quot; XML elements (which might contain quoted strings):</source>
          <target state="translated">&lt;code&gt;gen_delimited_pat&lt;/code&gt; 一般的な使用法は、 &lt;code&gt;extract_tagged&lt;/code&gt; の特別な目的のタグを作成することです。たとえば、「空の」XML要素（引用符で囲まれた文字列が含まれている可能性があります）を適切に無視するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="5f737b1553f7b6183bb539125409a9e3f04fb617" translate="yes" xml:space="preserve">
          <source>A typical use of the returned seed is for a test program which has too many combinations to test comprehensively in the time available to it each run. It can test a random subset each time, and should there be a failure, log the seed used for that run so that it can later be used to reproduce the same results.</source>
          <target state="translated">返されたシードの典型的な使用法は、テストプログラムを実行するたびに利用可能な時間内に総合的にテストするにはあまりにも多くの組み合わせを持つテストプログラムのためのものです。毎回ランダムなサブセットをテストすることができ、失敗があった場合には、後で同じ結果を再現するために使用できるように、その実行に使用されたシードをログに記録します。</target>
        </trans-unit>
        <trans-unit id="0f2661e4e43f0aa25c0ad72f03a98747c0242a3a" translate="yes" xml:space="preserve">
          <source>A typical use would be in the destructors of a class hierarchy, as illustrated in the SYNOPSIS above. Each class in the hierarchy has a DESTROY method that performs some class-specific action and then redispatches the call up the hierarchy. As a result, when an object of class S is destroyed, the destructors of</source>
          <target state="translated">典型的な使用法は、上記の SYNOPSIS で示されているように、クラス階層のデストラクタにあるでしょう。階層内の各クラスには DESTROY メソッドがあり、クラス固有のアクションを実行して、階層の呼び出しをリディスパッチします。その結果、クラス S のオブジェクトが破壊されると</target>
        </trans-unit>
        <trans-unit id="51560cf43fd833f1ac94f4446b3a3eeb2bb8e520" translate="yes" xml:space="preserve">
          <source>A typical use would be in the destructors of a class hierarchy, as illustrated in the synopsis above. Each class in the hierarchy has a DESTROY method that performs some class-specific action and then redispatches the call up the hierarchy. As a result, when an object of class D is destroyed, the destructors of</source>
          <target state="translated">典型的な使用法は、上記のシノプシスで説明したように、クラス階層のデストラクタにあるでしょう。階層内の各クラスは DESTROY メソッドを持っており、クラス固有のアクションを実行し、階層の呼び出しをリディスパッチします。その結果、クラスDのオブジェクトが破壊されると</target>
        </trans-unit>
        <trans-unit id="7966b50132f33654989f9cc4d535a23f71af99df" translate="yes" xml:space="preserve">
          <source>A typical way to define a collation element table without any file of table:</source>
          <target state="translated">テーブルのファイルを持たずに照合要素のテーブルを定義する典型的な方法です。</target>
        </trans-unit>
        <trans-unit id="a7f9b84aae166f2ccc479317d7790aeb3b37e035" translate="yes" xml:space="preserve">
          <source>A unique (for the test job) identifier for the event.</source>
          <target state="translated">イベントの一意な(テストジョブ用の)識別子。</target>
        </trans-unit>
        <trans-unit id="ef22865cf4abb8e03f585fab66316610e54ceffa" translate="yes" xml:space="preserve">
          <source>A useful construct you might consider using is:</source>
          <target state="translated">あなたが使用することを検討するかもしれない有用な構成は、です。</target>
        </trans-unit>
        <trans-unit id="c66028a80a3f2cbd725150b289e7fb5dace10a6d" translate="yes" xml:space="preserve">
          <source>A useful idiom for &lt;code&gt;lex&lt;/code&gt; -like scanners is &lt;code&gt;/\G.../gc&lt;/code&gt; . You can combine several regexps like this to process a string part-by-part, doing different actions depending on which regexp matched. Each regexp tries to match where the previous one leaves off.</source>
          <target state="translated">&lt;code&gt;lex&lt;/code&gt; のようなスキャナーに役立つイディオムは &lt;code&gt;/\G.../gc&lt;/code&gt; です。このような複数の正規表現を組み合わせて、文字列を部分ごとに処理し、一致する正規表現に応じて異なるアクションを実行できます。各正規表現は、前の正規表現が終了したところと一致しようとします。</target>
        </trans-unit>
        <trans-unit id="1c822ecfcb927260c8676a672de6aa8120d59332" translate="yes" xml:space="preserve">
          <source>A useful idiom for &lt;code&gt;lex&lt;/code&gt;-like scanners is &lt;code&gt;/\G.../gc&lt;/code&gt;. You can combine several regexps like this to process a string part-by-part, doing different actions depending on which regexp matched. Each regexp tries to match where the previous one leaves off.</source>
          <target state="translated">&lt;code&gt;lex&lt;/code&gt; のようなスキャナーの便利なイディオムは &lt;code&gt;/\G.../gc&lt;/code&gt; です。このような複数の正規表現を組み合わせて、文字列をパーツごとに処理し、一致した正規表現に応じて異なるアクションを実行できます。各正規表現は、前の正規表現が中断した場所と一致しようとします。</target>
        </trans-unit>
        <trans-unit id="6c232601ef6ab32c7a06536b5534313e59c1adfb" translate="yes" xml:space="preserve">
          <source>A useful variation of the above is the target &lt;code&gt;testdb&lt;/code&gt; . It runs the test under the Perl debugger (see &lt;a href=&quot;../perldebug&quot;&gt;perldebug&lt;/a&gt;). If the file</source>
          <target state="translated">上記の便利なバリエーションは、ターゲット &lt;code&gt;testdb&lt;/code&gt; です。Perlデバッガーの下でテストを実行します（&lt;a href=&quot;../perldebug&quot;&gt;perldebugを&lt;/a&gt;参照）。ファイル</target>
        </trans-unit>
        <trans-unit id="9a4629e764504e5d714343e7f665ac8cbd7a6361" translate="yes" xml:space="preserve">
          <source>A useful variation of the above is the target &lt;code&gt;testdb&lt;/code&gt;. It runs the test under the Perl debugger (see &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;). If the file</source>
          <target state="translated">上記の便利なバリエーションは、ターゲット &lt;code&gt;testdb&lt;/code&gt; です。Perlデバッガーの下でテストを実行します（&lt;a href=&quot;perldebug&quot;&gt;perldebugを&lt;/a&gt;参照）。ファイルの場合</target>
        </trans-unit>
        <trans-unit id="260c8a8479b809c6dd9a69c354f54517ffc43b32" translate="yes" xml:space="preserve">
          <source>A user ID. Often used in the context of &lt;b&gt;file&lt;/b&gt; or &lt;b&gt;process&lt;/b&gt; ownership.</source>
          <target state="translated">ユーザーID。多くの場合、&lt;b&gt;ファイル&lt;/b&gt;または&lt;b&gt;プロセスの&lt;/b&gt;所有権のコンテキストで使用され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="c3c861709ec338f51d30ce5477159ff491c5825e" translate="yes" xml:space="preserve">
          <source>A user of Perl does not normally need to know nor care how Perl happens to encode its internal strings, but it becomes relevant when outputting Unicode strings to a stream without a PerlIO layer (one with the &quot;default&quot; encoding). In such a case, the raw bytes used internally (the native character set or UTF-8, as appropriate for each string) will be used, and a &quot;Wide character&quot; warning will be issued if those strings contain a character beyond 0x00FF.</source>
          <target state="translated">Perl のユーザは通常、Perl が内部文字列をどのようにエンコードするかを知る必要も気にする必要もありませんが、PerlIO レイヤ(「デフォルト」のエンコーディングを持つもの)のないストリームに Unicode 文字列を出力する場合には、それが重要になります。そのような場合、内部的に使用される生のバイト(ネイティブ文字セットまたは UTF-8、各文字列に適したもの)が使用され、それらの文字列に 0x00FF を超える文字が含まれている場合には「ワイド文字」警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="58e51e01dfdc97593c823ef9c32c82bf5b645a0e" translate="yes" xml:space="preserve">
          <source>A user-defined &lt;b&gt;type&lt;/b&gt;, implemented in Perl via a &lt;b&gt;package&lt;/b&gt; that provides (either directly or by inheritance) &lt;b&gt;methods&lt;/b&gt; (that is, &lt;b&gt;subroutines&lt;/b&gt;) to handle &lt;b&gt;instances&lt;/b&gt; of the class (its &lt;b&gt;objects&lt;/b&gt;). See also &lt;b&gt;inheritance&lt;/b&gt;.</source>
          <target state="translated">クラス（その&lt;b&gt;オブジェクト&lt;/b&gt;）の&lt;b&gt;インスタンス&lt;/b&gt;を処理&lt;b&gt;するメソッド&lt;/b&gt;（つまり、&lt;b&gt;サブルーチン&lt;/b&gt;）を（直接または継承によって）提供する&lt;b&gt;パッケージ&lt;/b&gt;を介してPerlで実装されたユーザー定義&lt;b&gt;型&lt;/b&gt;。&lt;b&gt;継承&lt;/b&gt;も参照してください。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="049b62081eecdd58978da0961ea176048425ca09" translate="yes" xml:space="preserve">
          <source>A user-defined subroutine call or a method invocation.</source>
          <target state="translated">ユーザー定義のサブルーチン呼び出しまたはメソッド呼び出し。</target>
        </trans-unit>
        <trans-unit id="0655aa7eaac426bb455567c21c49258161952382" translate="yes" xml:space="preserve">
          <source>A utility function that returns the line number that the function was called on. You can pass it an offset which will be added to the result. This is very useful for working out the correct text of diagnostic functions that contain line numbers.</source>
          <target state="translated">関数が呼び出された行番号を返すユーティリティ関数です。結果に加算されるオフセットを渡すことができます。これは、行番号を含む診断関数の正しいテキストを調べるのに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="62abf9744bbb54e44124db26e468de26dab74a60" translate="yes" xml:space="preserve">
          <source>A value indicating whether unmatched substrings (see below) within the text should be skipped or returned as fields. If the value is true, such substrings are skipped. Otherwise, they are returned.</source>
          <target state="translated">テキスト内のマッチしない部分文字列(下記参照)をスキップするか、フィールドとして返すかを示す値。この値が真の場合、そのような部分文字列はスキップされます。そうでなければ、それらは返されます。</target>
        </trans-unit>
        <trans-unit id="9cb7aeb0b53152f8df982c234ecceb419398cf71" translate="yes" xml:space="preserve">
          <source>A value that happens to be a &lt;b&gt;scalar&lt;/b&gt; as opposed to a &lt;b&gt;list&lt;/b&gt;.</source>
          <target state="translated">たまたま&lt;b&gt;リストで&lt;/b&gt;はなく&lt;b&gt;スカラー&lt;/b&gt;である値。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1e971228dd4d3b2de042f3e955105fd62424ff5a" translate="yes" xml:space="preserve">
          <source>A value that indicates the current Perl interpreter's phase. Possible values include &lt;code&gt;PERL_PHASE_CONSTRUCT&lt;/code&gt;, &lt;code&gt;PERL_PHASE_START&lt;/code&gt;, &lt;code&gt;PERL_PHASE_CHECK&lt;/code&gt;, &lt;code&gt;PERL_PHASE_INIT&lt;/code&gt;, &lt;code&gt;PERL_PHASE_RUN&lt;/code&gt;, &lt;code&gt;PERL_PHASE_END&lt;/code&gt;, and &lt;code&gt;PERL_PHASE_DESTRUCT&lt;/code&gt;.</source>
          <target state="translated">現在のPerlインタープリターのフェーズを示す値。可能な値には、 &lt;code&gt;PERL_PHASE_CONSTRUCT&lt;/code&gt; 、 &lt;code&gt;PERL_PHASE_START&lt;/code&gt; 、 &lt;code&gt;PERL_PHASE_CHECK&lt;/code&gt; 、 &lt;code&gt;PERL_PHASE_INIT&lt;/code&gt; 、 &lt;code&gt;PERL_PHASE_RUN&lt;/code&gt; 、 &lt;code&gt;PERL_PHASE_END&lt;/code&gt; 、および &lt;code&gt;PERL_PHASE_DESTRUCT&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="6cfc7b273de973b6dc0aacfe92aeb280b49228f1" translate="yes" xml:space="preserve">
          <source>A value that is either &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;true&lt;/b&gt;または&lt;b&gt;falseの&lt;/b&gt;いずれかの値。</target>
        </trans-unit>
        <trans-unit id="a8f81a2763e41d6e30e66f64538647929ee6a4a5" translate="yes" xml:space="preserve">
          <source>A variable whose value is the name of another variable or subroutine. By &lt;b&gt;dereferencing&lt;/b&gt; the first variable, you can get at the second one. Symbolic references are illegal under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; .</source>
          <target state="translated">値が別の変数またはサブルーチンの名前である変数。&lt;b&gt;逆参照&lt;/b&gt;最初の変数を、あなたは、第1に取得することができます。シンボリック参照は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; 下では違法です。</target>
        </trans-unit>
        <trans-unit id="95fd27453c9995852c3689cce9903262d89f1b17" translate="yes" xml:space="preserve">
          <source>A variable whose value is the name of another variable or subroutine. By &lt;b&gt;dereferencing&lt;/b&gt; the first variable, you can get at the second one. Symbolic references are illegal under &lt;code&gt;use strict &quot;refs&quot;&lt;/code&gt;.</source>
          <target state="translated">値が別の変数またはサブルーチンの名前である変数。最初の変数を&lt;b&gt;逆参照&lt;/b&gt;することにより、2番目の変数を取得できます。シンボリック参照は、 &lt;code&gt;use strict &quot;refs&quot;&lt;/code&gt; は違法です。</target>
        </trans-unit>
        <trans-unit id="ca6ffd45b1cb28ce9dd386af1f375ee5391518d5" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;save_item&lt;/code&gt; which takes multiple arguments via an array &lt;code&gt;sarg&lt;/code&gt; of &lt;code&gt;SV*&lt;/code&gt; of length &lt;code&gt;maxsarg&lt;/code&gt; .</source>
          <target state="translated">バリアント &lt;code&gt;save_item&lt;/code&gt; 配列を介して複数の引数を取る &lt;code&gt;sarg&lt;/code&gt; の &lt;code&gt;SV*&lt;/code&gt; 長さの &lt;code&gt;maxsarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fa8d9d2a392198522660733895422043b7a1e1c" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;save_item&lt;/code&gt; which takes multiple arguments via an array &lt;code&gt;sarg&lt;/code&gt; of &lt;code&gt;SV*&lt;/code&gt; of length &lt;code&gt;maxsarg&lt;/code&gt;.</source>
          <target state="translated">バリアント &lt;code&gt;save_item&lt;/code&gt; 配列を介して複数の引数を取る &lt;code&gt;sarg&lt;/code&gt; の &lt;code&gt;SV*&lt;/code&gt; 長さの &lt;code&gt;maxsarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ccb1828da7b95bb5a049529fa23b72700a0cdfc" translate="yes" xml:space="preserve">
          <source>A venerable Stream EDitor from which Perl derives some of its ideas.</source>
          <target state="translated">Perl のアイデアの一部を派生させた由緒ある Stream EDitor。</target>
        </trans-unit>
        <trans-unit id="695b604bb0917e749e0123615e9c577cb0315edf" translate="yes" xml:space="preserve">
          <source>A venerable typesetting language from which Perl derives the name of its &lt;code&gt;$%&lt;/code&gt; variable and which is secretly used in the production of Camel books.</source>
          <target state="translated">Perlが &lt;code&gt;$%&lt;/code&gt; 変数の名前を派生し、キャメルの本の制作で密かに使用されている由緒ある組版言語。</target>
        </trans-unit>
        <trans-unit id="c02ac9d5e79aa52379337adc725d78150bf24188" translate="yes" xml:space="preserve">
          <source>A verbatim paragraph is distinguished by having its first character be a space or a tab. (And commonly, all its lines begin with spaces and/or tabs.) It should be reproduced exactly, with tabs assumed to be on 8-column boundaries. There are no special formatting codes, so you can't italicize or anything like that. A \ means \, and nothing else.</source>
          <target state="translated">冗長段落は、その最初の文字がスペースかタブであることで区別される。(そして一般的には、すべての行がスペースやタブで始まることが多いです。)タブは8カラムの境界線上にあると仮定して、正確に再現しなければなりません。特別な書式コードはありませんので、イタリック体にするとか、そんなことはできません。A \ は、他の何もないことを意味します。</target>
        </trans-unit>
        <trans-unit id="22c613333ba591340aa305c94a11a4461a68dd5e" translate="yes" xml:space="preserve">
          <source>A version number without an operator is equivalent to specifying a minimum (&lt;code&gt;&amp;gt;=&lt;/code&gt;). Extra whitespace is allowed.</source>
          <target state="translated">演算子のないバージョン番号は、最小値（ &lt;code&gt;&amp;gt;=&lt;/code&gt; ）を指定することと同じです。追加の空白は許可されます。</target>
        </trans-unit>
        <trans-unit id="b4ee89b787aaa148bf4a7c02399965cde2c89e83" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;SvPV&lt;/code&gt; which guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once. Only use this if &lt;code&gt;sv&lt;/code&gt; is an expression with side effects, otherwise use the more efficient &lt;code&gt;SvPV&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; を一度だけ評価することを保証する &lt;code&gt;SvPV&lt;/code&gt; のバージョン。これは、 &lt;code&gt;sv&lt;/code&gt; が副作用のある式である場合にのみ使用します。それ以外の場合は、より効率的な &lt;code&gt;SvPV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="90ef07f614e457f605b2b47a6d2def401106c68e" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;SvPV&lt;/code&gt; which guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once. Only use this if &lt;code&gt;sv&lt;/code&gt; is an expression with side effects, otherwise use the more efficient &lt;code&gt;SvPV&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; を1回だけ評価することを保証する &lt;code&gt;SvPV&lt;/code&gt; のバージョン。 &lt;code&gt;sv&lt;/code&gt; が副作用のある式である場合にのみこれを使用し、そうでない場合はより効率的な &lt;code&gt;SvPV&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="800c2c1c70843eecf0d954a2a74fcb4ffc03b783" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepv()&lt;/code&gt; /&lt;code&gt;savepvn()&lt;/code&gt; which gets the string to duplicate from the passed in SV using &lt;code&gt;SvPV()&lt;/code&gt;</source>
          <target state="translated">バージョン &lt;code&gt;savepv()&lt;/code&gt; / &lt;code&gt;savepvn()&lt;/code&gt; 使用してSVに渡さから重複する文字列を取得 &lt;code&gt;SvPV()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="89a4a2fa99f32dbf2c67191e1f912497d7b97772" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepv()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads.</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savepv()&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="ddb24d04582a4cc50d29e68434c725f208123c3e" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepv()&lt;/code&gt;/&lt;code&gt;savepvn()&lt;/code&gt; which gets the string to duplicate from the passed in SV using &lt;code&gt;SvPV()&lt;/code&gt;</source>
          <target state="translated">バージョン &lt;code&gt;savepv()&lt;/code&gt; / &lt;code&gt;savepvn()&lt;/code&gt; 使用してSVに渡さから重複する文字列を取得 &lt;code&gt;SvPV()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="565845504b0795e27ee455abaf7db0dd0b76d6ff" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepvn()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads. (With the specific difference that a &lt;code&gt;NULL&lt;/code&gt; pointer is not acceptable)</source>
          <target state="translated">スレッド間で共有されるメモリに重複する文字列を割り当てる &lt;code&gt;savepvn()&lt;/code&gt; のバージョン。（ &lt;code&gt;NULL&lt;/code&gt; ポインターは受け入れられないという特定の違いがあります）</target>
        </trans-unit>
        <trans-unit id="5d7f6a9127b04f3a28923aa726cf029e923caeca" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepvn()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads. (With the specific difference that a NULL pointer is not acceptable)</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savepvn()&lt;/code&gt; のバージョン。（NULLポインターは受け入れられないという特定の違いがあります）</target>
        </trans-unit>
        <trans-unit id="d9a7ac8d6bb6f23e5af260b2b68521de71f4974c" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savepvs()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads.</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savepvs()&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="f84e0230ffdad6c151bf74824e07538ecfccd8ed" translate="yes" xml:space="preserve">
          <source>A version of &lt;code&gt;savesharedpv()&lt;/code&gt; which allocates the duplicate string in memory which is shared between threads.</source>
          <target state="translated">スレッド間で共有されるメモリ内の重複文字列を割り当てる &lt;code&gt;savesharedpv()&lt;/code&gt; のバージョン。</target>
        </trans-unit>
        <trans-unit id="8ab5e633d2c66281cffd9c60de281036938368fe" translate="yes" xml:space="preserve">
          <source>A very complete generic buffering layer which provides the whole of PerlIO API. It is also intended to be used as a &quot;base class&quot; for other layers. (For example its &lt;code&gt;Read()&lt;/code&gt; method is implemented in terms of the &lt;code&gt;Get_cnt()&lt;/code&gt; /&lt;code&gt;Get_ptr()&lt;/code&gt; /&lt;code&gt;Set_ptrcnt()&lt;/code&gt; methods).</source>
          <target state="translated">PerlIO API全体を提供する非常に完全な汎用バッファリング層。また、他のレイヤーの「基本クラス」として使用することも目的としています。 （たとえば、その &lt;code&gt;Read()&lt;/code&gt; メソッドは、 &lt;code&gt;Get_cnt()&lt;/code&gt; / &lt;code&gt;Get_ptr()&lt;/code&gt; / &lt;code&gt;Set_ptrcnt()&lt;/code&gt; メソッドの観点から実装されています）。</target>
        </trans-unit>
        <trans-unit id="25e6348d550a8b48765f27b13660bf1212dac2ba" translate="yes" xml:space="preserve">
          <source>A very complete generic buffering layer which provides the whole of PerlIO API. It is also intended to be used as a &quot;base class&quot; for other layers. (For example its &lt;code&gt;Read()&lt;/code&gt; method is implemented in terms of the &lt;code&gt;Get_cnt()&lt;/code&gt;/&lt;code&gt;Get_ptr()&lt;/code&gt;/&lt;code&gt;Set_ptrcnt()&lt;/code&gt; methods).</source>
          <target state="translated">PerlIOAPI全体を提供する非常に完全な汎用バッファリングレイヤー。また、他のレイヤーの「基本クラス」として使用することも目的としています。（たとえば、その &lt;code&gt;Read()&lt;/code&gt; メソッドは &lt;code&gt;Get_cnt()&lt;/code&gt; / &lt;code&gt;Get_ptr()&lt;/code&gt; / &lt;code&gt;Set_ptrcnt()&lt;/code&gt; メソッドの観点から実装されています）。</target>
        </trans-unit>
        <trans-unit id="cff43b9c47bd071d2d320e539e7c2ec5b836b1af" translate="yes" xml:space="preserve">
          <source>A very large and constantly evolving language with several alternative and largely incompatible syntaxes, in which anyone can define anything any way they choose, and usually do. Speakers of this language think it&amp;rsquo;s easy to learn because it&amp;rsquo;s so easily twisted to one&amp;rsquo;s own ends, but dialectical differences make tribal intercommunication nearly impossible, and travelers are often reduced to a pidgin-like subset of the language. To be universally understood, a Unix shell programmer must spend years of study in the art. Many have abandoned this discipline and now communicate via an Esperanto-like language called Perl.</source>
          <target state="translated">非常に大規模で常に進化する言語であり、いくつかの代替構文とほぼ互換性のない構文を使用します。この構文では、だれでも、選択した方法で何でも定義でき、通常はそうです。この言語の話者は、自分の目的に合わせて簡単にねじれるので、習得は簡単だと考えていますが、弁証法の違いにより、部族間の相互コミュニケーションはほとんど不可能になり、旅行者はしばしば、ピジンのような言語のサブセットに削減されます。普遍的に理解されるためには、Unixシェルプログラマーは、この分野で長年の研究を費やさなければなりません。多くの人がこの分野を放棄し、今ではPerlと呼ばれるエスペラントのような言語を介して通信しています。</target>
        </trans-unit>
        <trans-unit id="b75485a79ff1cabe11e71e2c78ee68045837b121" translate="yes" xml:space="preserve">
          <source>A very thin wrapper around Config.pm so MakeMaker is easier to test.</source>
          <target state="translated">Config.pm の非常に薄いラッパーで、MakeMaker のテストを容易にします。</target>
        </trans-unit>
        <trans-unit id="d78336a8aa6af1a7a3b8d0aa36c1d974ee9b4017" translate="yes" xml:space="preserve">
          <source>A void* pointing to an engine-defined data structure. The Perl engine uses the &lt;code&gt;regexp_internal&lt;/code&gt; structure (see &lt;a href=&quot;perlreguts#Base-Structures&quot;&gt;&quot;Base Structures&quot; in perlreguts&lt;/a&gt;) but a custom engine should use something else.</source>
          <target state="translated">エンジン定義のデータ構造を指すvoid *。Perlエンジンは &lt;code&gt;regexp_internal&lt;/code&gt; 構造（perlregutsの&lt;a href=&quot;perlreguts#Base-Structures&quot;&gt;「基本構造」を参照&lt;/a&gt;）を使用しますが、カスタムエンジンは別のものを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3816dce510c914716ac16326960ce66f1b1eab28" translate="yes" xml:space="preserve">
          <source>A void* pointing to an engine-defined data structure. The Perl engine uses the &lt;code&gt;regexp_internal&lt;/code&gt; structure (see &lt;a href=&quot;perlreguts#Base-Structures&quot;&gt;Base Structures in perlreguts&lt;/a&gt;) but a custom engine should use something else.</source>
          <target state="translated">エンジン定義のデータ構造を指すvoid *。Perlエンジンは &lt;code&gt;regexp_internal&lt;/code&gt; 構造（perlregutsの&lt;a href=&quot;perlreguts#Base-Structures&quot;&gt;基本構造を参照&lt;/a&gt;）を使用しますが、カスタムエンジンは他のものを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="199fcb36f761477b8bc11025866dc8da66f59cd6" translate="yes" xml:space="preserve">
          <source>A walled off area that&amp;rsquo;s not supposed to affect beyond its walls. You let kids play in the sandbox instead of running in the road. See Camel chapter 20, &amp;ldquo;Security&amp;rdquo;.</source>
          <target state="translated">壁を越えて影響を与えることは想定されていない壁に囲まれた領域。子供たちが道路を走るのではなく、サンドボックスで遊ぶことができます。Camelの第20章「セキュリティ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="52bce4e77f028ccf4be5e2732e6cc0cda9d45ce4" translate="yes" xml:space="preserve">
          <source>A warning is issued if an attempt is made to register an operator not found above.</source>
          <target state="translated">上記の見つからない演算子を登録しようとすると警告が発せられます。</target>
        </trans-unit>
        <trans-unit id="a18ef0b74f65545d966263b3d3c2472e8453a59c" translate="yes" xml:space="preserve">
          <source>A warning is printed if more than one POD file with the same POD name is found, e.g.</source>
          <target state="translated">同じPOD名のPODファイルが2つ以上見つかると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="700f87e210bceec8357a7b2e426634dd3d25de48" translate="yes" xml:space="preserve">
          <source>A well-defined sequence of steps, explained clearly enough that even a computer could do them.</source>
          <target state="translated">コンピュータでもできるほど明確に説明された一連の手順。</target>
        </trans-unit>
        <trans-unit id="69583ba800841309993f3cd8027c2138231fdd98" translate="yes" xml:space="preserve">
          <source>A whiz-bang hardware gizmo (like a disk or tape drive or a modem or a joystick or a mouse) attached to your computer, which the &lt;b&gt;operating system&lt;/b&gt; tries to make look like a &lt;b&gt;file&lt;/b&gt; (or a bunch of files). Under Unix, these fake files tend to live in the</source>
          <target state="translated">コンピューターに接続されたハードディスクギズモ（ディスクまたはテープドライブ、モデム、ジョイスティック、マウスなど）。&lt;b&gt;オペレーティングシステム&lt;/b&gt;が&lt;b&gt;ファイル&lt;/b&gt;（または&lt;b&gt;ファイル&lt;/b&gt;の束）のように見せかけます。Unixでは、これらの偽のファイルは、</target>
        </trans-unit>
        <trans-unit id="90dbb683e595bd8a442976ee525366f34cadb549" translate="yes" xml:space="preserve">
          <source>A word boundary (&lt;code&gt;\b&lt;/code&gt; ) is a spot between two characters that has a &lt;code&gt;\w&lt;/code&gt; on one side of it and a &lt;code&gt;\W&lt;/code&gt; on the other side of it (in either order), counting the imaginary characters off the beginning and end of the string as matching a &lt;code&gt;\W&lt;/code&gt; . (Within character classes &lt;code&gt;\b&lt;/code&gt; represents backspace rather than a word boundary, just as it normally does in any double-quoted string.) The &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; are just like &quot;^&quot; and &quot;$&quot;, except that they won't match multiple times when the &lt;code&gt;/m&lt;/code&gt; modifier is used, while &quot;^&quot; and &quot;$&quot; will match at every internal line boundary. To match the actual end of the string and not ignore an optional trailing newline, use &lt;code&gt;\z&lt;/code&gt; .</source>
          <target state="translated">単語の境界（ &lt;code&gt;\b&lt;/code&gt; ）は2つの文字間のスポットです &lt;code&gt;\w&lt;/code&gt; それとの一方の側の &lt;code&gt;\W&lt;/code&gt; （いずれかの順序で）それの反対側には、の始まりと終わりをオフ架空の文字を数え、 &lt;code&gt;\W&lt;/code&gt; 一致する文字列。 （文字クラス内では、 &lt;code&gt;\b&lt;/code&gt; は、通常、二重引用符で囲まれた文字列と同様に、単語の境界ではなくバックスペースを表します。） &lt;code&gt;\A&lt;/code&gt; と &lt;code&gt;\Z&lt;/code&gt; は、 &quot;^&quot;と &quot;$&quot;に似ていますが、 &lt;code&gt;/m&lt;/code&gt; 修飾子が使用されている場合は複数回一致しますが、「^」と「$」はすべての内部行境界で一致します。文字列の実際の終わりに一致し、オプションの末尾の改行を無視しないようにするには、使用する &lt;code&gt;\z&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39e1413576078848906e46e67f29b3c0eeaa0472" translate="yes" xml:space="preserve">
          <source>A word boundary (&lt;code&gt;\b&lt;/code&gt;) is a spot between two characters that has a &lt;code&gt;\w&lt;/code&gt; on one side of it and a &lt;code&gt;\W&lt;/code&gt; on the other side of it (in either order), counting the imaginary characters off the beginning and end of the string as matching a &lt;code&gt;\W&lt;/code&gt;. (Within character classes &lt;code&gt;\b&lt;/code&gt; represents backspace rather than a word boundary, just as it normally does in any double-quoted string.) The &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\Z&lt;/code&gt; are just like &lt;code&gt;&quot;^&quot;&lt;/code&gt; and &lt;code&gt;&quot;$&quot;&lt;/code&gt;, except that they won't match multiple times when the &lt;code&gt;/m&lt;/code&gt; modifier is used, while &lt;code&gt;&quot;^&quot;&lt;/code&gt; and &lt;code&gt;&quot;$&quot;&lt;/code&gt; will match at every internal line boundary. To match the actual end of the string and not ignore an optional trailing newline, use &lt;code&gt;\z&lt;/code&gt;.</source>
          <target state="translated">単語の境界（ &lt;code&gt;\b&lt;/code&gt; ）は、一方の側に &lt;code&gt;\w&lt;/code&gt; 、もう一方の側に &lt;code&gt;\W&lt;/code&gt; が（いずれかの順序で）ある2つの文字間のスポットであり、架空の文字を最初と最後から数えます。 &lt;code&gt;\W&lt;/code&gt; 一致する文字列。 （文字クラス内では、 &lt;code&gt;\b&lt;/code&gt; は、二重引用符で囲まれた文字列で通常行われるように、単語の境界ではなくバックスペースを表します。） &lt;code&gt;\A&lt;/code&gt; と &lt;code&gt;\Z&lt;/code&gt; は、 &lt;code&gt;&quot;^&quot;&lt;/code&gt; と &lt;code&gt;&quot;$&quot;&lt;/code&gt; と同じですが、そうでない点が異なります。 &lt;code&gt;/m&lt;/code&gt; 修飾子を使用すると、 &lt;code&gt;&quot;^&quot;&lt;/code&gt; と &lt;code&gt;&quot;$&quot;&lt;/code&gt; 複数回一致します。すべての内部線境界で一致します。文字列の実際の終わりに一致し、オプションの末尾の改行を無視しないようにするには、 &lt;code&gt;\z&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="b9f5130c323d4b84b2e0887ec7513db659cf437f" translate="yes" xml:space="preserve">
          <source>A word on terminology: I shall use the term</source>
          <target state="translated">用語について一言。私はこの用語を使用します。</target>
        </trans-unit>
        <trans-unit id="b1c5343ffbdad1e7ce4b8c849341bcb5442f07e1" translate="yes" xml:space="preserve">
          <source>A word sufficiently ambiguous to be deemed illegal under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'subs'&lt;/code&gt; . In the absence of that stricture, a bareword is treated as if quotes were around it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'subs'&lt;/code&gt; 下で違法と見なされるほどあいまいな単語。その制限がない場合、引用符がその周りにあるかのように、裸語が扱われます。</target>
        </trans-unit>
        <trans-unit id="855daaf204247906f61907b818bcf2ad84c811cf" translate="yes" xml:space="preserve">
          <source>A word sufficiently ambiguous to be deemed illegal under &lt;code&gt;use strict 'subs'&lt;/code&gt;. In the absence of that stricture, a bareword is treated as if quotes were around it.</source>
          <target state="translated">&lt;code&gt;use strict 'subs'&lt;/code&gt; と違法と見なされるほどあいまいな単語。その制限がない場合、ベアワードは引用符がその周りにあるかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="310f40f7f3f90c12a6b195eedcb48c5f8026ea77" translate="yes" xml:space="preserve">
          <source>A word that has no other interpretation in the grammar will be treated as if it were a quoted string. These are known as &quot;barewords&quot;. As with filehandles and labels, a bareword that consists entirely of lowercase letters risks conflict with future reserved words, and if you use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; switch, Perl will warn you about any such words. Perl limits barewords (like identifiers) to about 250 characters. Future versions of Perl are likely to eliminate these arbitrary limitations.</source>
          <target state="translated">文法で他の解釈がない単語は、引用符で囲まれた文字列であるかのように扱われます。これらは「ベアワード」として知られています。ファイルハンドルやラベルと同じく、小文字だけからなる裸の単語は将来の予約語とぶつかる危険、あなたが使用している場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマや&lt;b&gt;-w&lt;/b&gt;スイッチを、Perlはそのような言葉について警告します。Perlは、ベアワード（識別子など）を約250文字に制限しています。Perlの将来のバージョンでは、これらの恣意的な制限がなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ff8af98833234cb11c9ca0881ff5f7ec34953efb" translate="yes" xml:space="preserve">
          <source>A word that has no other interpretation in the grammar will be treated as if it were a quoted string. These are known as &quot;barewords&quot;. As with filehandles and labels, a bareword that consists entirely of lowercase letters risks conflict with future reserved words, and if you use the &lt;code&gt;use warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; switch, Perl will warn you about any such words. Perl limits barewords (like identifiers) to about 250 characters. Future versions of Perl are likely to eliminate these arbitrary limitations.</source>
          <target state="translated">文法に他の解釈がない単語は、引用符で囲まれた文字列であるかのように扱われます。これらは「ベアワード」として知られています。ファイルハンドルやラベルと同様に、完全に小文字で構成されるベアワードは、将来の予約語と競合するリスクがあり &lt;code&gt;use warnings&lt;/code&gt; 。usewarningsプラグマまたは&lt;b&gt;-w&lt;/b&gt;スイッチを使用すると、Perlはそのような単語について警告します。 Perlは、ベアワード（識別子など）を約250文字に制限しています。 Perlの将来のバージョンでは、これらの恣意的な制限がなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="41517852ad5f31fc26a5aada0fdb82adad0543c7" translate="yes" xml:space="preserve">
          <source>A word with a specific, built-in meaning to a &lt;b&gt;compiler&lt;/b&gt;, such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt;. In many languages (not Perl), it&amp;rsquo;s illegal to use reserved words to name anything else. (Which is why they&amp;rsquo;re reserved, after all.) In Perl, you just can&amp;rsquo;t use them to name &lt;b&gt;labels&lt;/b&gt; or &lt;b&gt;filehandles&lt;/b&gt;. Also called &amp;ldquo;keywords&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; など、&lt;b&gt;コンパイラー&lt;/b&gt;に固有の組み込みの意味を持つ単語。多くの言語（Perlではない）では、予約語を使用して他の名前を付けることは違法です。（結局のところ、それらが予約されている理由です。）Perlでは、&lt;b&gt;ラベル&lt;/b&gt;や&lt;b&gt;ファイルハンドル&lt;/b&gt;に名前を&lt;b&gt;付ける&lt;/b&gt;ためにそれらを使用することはできません。「キーワード」とも呼ばれます。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8fdc573142b1f0ebed1c128d43b036415ea32660" translate="yes" xml:space="preserve">
          <source>A word with a specific, built-in meaning to a &lt;b&gt;compiler&lt;/b&gt;, such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt;. In many languages (not Perl), it&amp;rsquo;s illegal to use reserved words to name anything else. (Which is why they&amp;rsquo;re reserved, after all.) In Perl, you just can&amp;rsquo;t use them to name &lt;b&gt;labels&lt;/b&gt; or &lt;b&gt;filehandles&lt;/b&gt;. Also called &amp;ldquo;keywords&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; や &lt;code&gt;delete&lt;/code&gt; など、&lt;b&gt;コンパイラにとって&lt;/b&gt;特定の組み込みの意味を持つ単語。多くの言語（Perlではない）では、予約語を使用して他の名前を付けることは違法です。（結局のところ、これらが予約されているのはそのためです。）Perlでは、&lt;b&gt;ラベル&lt;/b&gt;や&lt;b&gt;ファイルハンドル&lt;/b&gt;に名前を&lt;b&gt;付ける&lt;/b&gt;ためにそれらを使用することはできません。「キーワード」とも呼ばれます。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="435e32d3ce964aedd25193932afab04e1daf13f7" translate="yes" xml:space="preserve">
          <source>A work-around is the following:</source>
          <target state="translated">回避策としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="07daf0448b91b826afed53a20124ecc976475c82" translate="yes" xml:space="preserve">
          <source>A workaround for this is to call the constants once in a &lt;code&gt;BEGIN&lt;/code&gt; block:</source>
          <target state="translated">これの回避策は、 &lt;code&gt;BEGIN&lt;/code&gt; ブロックで定数を1回呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="c5d091eede565087a31db8b62e48d4dd20b23599" translate="yes" xml:space="preserve">
          <source>A working knowledge of XSUB programming is incredibly useful for core hacking; XSUBs use techniques drawn from the PP code, the portion of the guts that actually executes a Perl program. It's a lot gentler to learn those techniques from simple examples and explanation than from the core itself.</source>
          <target state="translated">XSUBは、Perlプログラムを実際に実行するガットの部分であるPPコードから引き出されたテクニックを使用します。XSUB は PP コードから引き出された技術を使用していますが、これは Perl プログラムを実際に実行するガットの部分です。</target>
        </trans-unit>
        <trans-unit id="ecdab41b6d91aa8f615325452505a14f3756b711" translate="yes" xml:space="preserve">
          <source>A wrapper around ExtUtils::Install::uninstall(). Warns that uninstallation is deprecated and doesn't actually perform the uninstallation.</source>
          <target state="translated">ExtUtils::Install::uninstall()のラッパーです。アンインストールが非推奨であることを警告し、実際にはアンインストールを実行しません。</target>
        </trans-unit>
        <trans-unit id="779181d83e8b08c1257aaf544b122220cecb13f5" translate="yes" xml:space="preserve">
          <source>A wrapper for &lt;a href=&quot;dbi&quot;&gt;DBI&lt;/a&gt;&lt;code&gt;fetchrow_array&lt;/code&gt; and &lt;code&gt;fetchrow_hashref&lt;/code&gt;</source>
          <target state="translated">ラッパー&lt;a href=&quot;dbi&quot;&gt;DBIの&lt;/a&gt; &lt;code&gt;fetchrow_array&lt;/code&gt; と &lt;code&gt;fetchrow_hashref&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b1bd466739a9d9dd8c4b1931d422a782c699350" translate="yes" xml:space="preserve">
          <source>A wrapper for &lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI&lt;/a&gt;&lt;code&gt;fetchrow_array&lt;/code&gt; and &lt;code&gt;fetchrow_hashref&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/DBI&quot;&gt;DBI &lt;/a&gt; &lt;code&gt;fetchrow_array&lt;/code&gt; および &lt;code&gt;fetchrow_hashref&lt;/code&gt; のラッパー</target>
        </trans-unit>
        <trans-unit id="7aa0ebdb78cb0f32df6917cb0846a920af961e2a" translate="yes" xml:space="preserve">
          <source>A wrapper for the C library &lt;a href=&quot;http://man.he.net/man2/signal&quot;&gt;signal(2)&lt;/a&gt;. Don't use the latter, as the Perl version knows things that interact with the rest of the perl interpreter.</source>
          <target state="translated">Cライブラリ&lt;a href=&quot;http://man.he.net/man2/signal&quot;&gt;signal（2）の&lt;/a&gt;ラッパー。Perlバージョンはperlインタープリターの残りの部分と相互作用するものを知っているので、後者を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="cd24954e4fcb535256ddd1580f43c63d6ef0dc01" translate="yes" xml:space="preserve">
          <source>A wrapper for the C library &lt;a href=&quot;http://man.he.net/man3/exit&quot;&gt;exit(3)&lt;/a&gt;, honoring what &lt;a href=&quot;perlapi#PL_exit_flags&quot;&gt;&quot;PL_exit_flags&quot; in perlapi&lt;/a&gt; say to do.</source>
          <target state="translated">&lt;a href=&quot;perlapi#PL_exit_flags&quot;&gt;perlapiの「PL_exit_flags」が&lt;/a&gt;行うことを尊重するCライブラリ&lt;a href=&quot;http://man.he.net/man3/exit&quot;&gt;exit（3）&lt;/a&gt;のラッパー。</target>
        </trans-unit>
        <trans-unit id="3a6acce12e33a751306269659eff02f266708760" translate="yes" xml:space="preserve">
          <source>A wrapper for the C library &lt;a href=&quot;http://man.he.net/man3/setenv&quot;&gt;setenv(3)&lt;/a&gt;. Don't use the latter, as the perl version has desirable safeguards</source>
          <target state="translated">Cライブラリ&lt;a href=&quot;http://man.he.net/man3/setenv&quot;&gt;setenv（3）の&lt;/a&gt;ラッパー。Perlバージョンには望ましい保護手段があるため、後者は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="1d7f5dea12f6359a6636612f15ad99428ef6c1b4" translate="yes" xml:space="preserve">
          <source>A wrapper for the combination of &lt;code&gt;normalize()&lt;/code&gt; and &lt;code&gt;splitOnLastStarter()&lt;/code&gt; . Note that &lt;code&gt;$unprocessed&lt;/code&gt; will be modified as a side-effect.</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; と &lt;code&gt;splitOnLastStarter()&lt;/code&gt; の組み合わせのラッパー。 &lt;code&gt;$unprocessed&lt;/code&gt; は副作用として変更されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="581d4a42c18609254d680720f0843e56fec5a482" translate="yes" xml:space="preserve">
          <source>A wrapper for the combination of &lt;code&gt;normalize()&lt;/code&gt; and &lt;code&gt;splitOnLastStarter()&lt;/code&gt;. Note that &lt;code&gt;$unprocessed&lt;/code&gt; will be modified as a side-effect.</source>
          <target state="translated">&lt;code&gt;normalize()&lt;/code&gt; と &lt;code&gt;splitOnLastStarter()&lt;/code&gt; の組み合わせのラッパー。 &lt;code&gt;$unprocessed&lt;/code&gt; は、副作用として変更されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9a971835f0cc905c4c81e0e15a1789f5da379aa1" translate="yes" xml:space="preserve">
          <source>A wrapper of pack_sockaddr_in() or unpack_sockaddr_in(). In list context, unpacks its argument and returns a list consisting of the port and IP address. In scalar context, packs its port and IP address arguments as a &lt;code&gt;sockaddr_in&lt;/code&gt; and returns it.</source>
          <target state="translated">pack_sockaddr_in（）またはunpack_sockaddr_in（）のラッパー。リストコンテキストでは、引数をアンパックし、ポートとIPアドレスで構成されるリストを返します。スカラーコンテキストでは、ポートとIPアドレスの引数を &lt;code&gt;sockaddr_in&lt;/code&gt; としてパックし、それを返します。</target>
        </trans-unit>
        <trans-unit id="7da94d0b3d719c597383180b871afe1e809e7e59" translate="yes" xml:space="preserve">
          <source>A wrapper of pack_sockaddr_in6() or unpack_sockaddr_in6(). In list context, unpacks its argument according to unpack_sockaddr_in6(). In scalar context, packs its arguments according to pack_sockaddr_in6().</source>
          <target state="translated">pack_sockaddr_in6()または unpack_sockaddr_in6()のラッパー。リストコンテキストでは、その引数を unpack_sockaddr_in6()に従って展開します。スカラコンテキストでは、引数を pack_sockaddr_in6()に従ってパックします。</target>
        </trans-unit>
        <trans-unit id="53a1600cfdb74295cdddc3a0923b5ac6c8e36129" translate="yes" xml:space="preserve">
          <source>A wrapper of pack_sockaddr_un() or unpack_sockaddr_un(). In a list context, unpacks its argument and returns a list consisting of the pathname. In a scalar context, packs its pathname as a &lt;code&gt;sockaddr_un&lt;/code&gt; and returns it.</source>
          <target state="translated">pack_sockaddr_un（）またはunpack_sockaddr_un（）のラッパー。リストコンテキストでは、引数をアンパックし、パス名で構成されるリストを返します。スカラーコンテキストでは、パス名を &lt;code&gt;sockaddr_un&lt;/code&gt; としてパックし、それを返します。</target>
        </trans-unit>
        <trans-unit id="7fe6b1e666d9c00f78d39c2310ecc107997b967e" translate="yes" xml:space="preserve">
          <source>A zero is represented and returned as &lt;code&gt;0E1&lt;/code&gt; , &lt;b&gt;not&lt;/b&gt;&lt;code&gt;0E0&lt;/code&gt; (after Knuth).</source>
          <target state="translated">ゼロは &lt;code&gt;0E1&lt;/code&gt; では&lt;b&gt;なく&lt;/b&gt; &lt;code&gt;0E0&lt;/code&gt; として表され、返されます（Knuthの後）。</target>
        </trans-unit>
        <trans-unit id="779899a127457434de92416389106f3b75e672b1" translate="yes" xml:space="preserve">
          <source>A zero return value of &amp;amp;Time::HiRes::d_hires_stat means that Time::HiRes::stat is a no-op passthrough for CORE::stat() (and likewise for lstat), and therefore the timestamps will stay integers. The same thing will happen if the filesystem does not do subsecond timestamps, even if the &amp;amp;Time::HiRes::d_hires_stat is non-zero.</source>
          <target state="translated">＆Time :: HiRes :: d_hires_statのゼロの戻り値は、Time :: HiRes :: statがCORE :: stat（）のno-opパススルーであることを意味し（したがって、lstatの場合も同様）、タイムスタンプは整数のままです。＆Time :: HiRes :: d_hires_statがゼロ以外であっても、ファイルシステムが1秒未満のタイムスタンプを行わない場合、同じことが起こります。</target>
        </trans-unit>
        <trans-unit id="8e38756e4b48f666771b0184686ead868d8da345" translate="yes" xml:space="preserve">
          <source>A zero-width negative look-ahead assertion. For example &lt;code&gt;/foo(?!bar)/&lt;/code&gt; matches any occurrence of &quot;foo&quot; that isn't followed by &quot;bar&quot;. Note however that look-ahead and look-behind are NOT the same thing. You cannot use this for look-behind.</source>
          <target state="translated">ゼロ幅の否定先読みアサーション。たとえば、 &lt;code&gt;/foo(?!bar)/&lt;/code&gt; は、「bar」が後に続かない「foo」の出現に一致します。ただし、先読みと後読みは同じものではないことに注意してください。これを後読みに使用することはできません。</target>
        </trans-unit>
        <trans-unit id="d3ff01c027bf2326d7c975449071a13cc0fdc9c3" translate="yes" xml:space="preserve">
          <source>A zero-width negative look-behind assertion. For example &lt;code&gt;/(?&amp;lt;!bar)foo/&lt;/code&gt; matches any occurrence of &quot;foo&quot; that does not follow &quot;bar&quot;. Works only for fixed-width look-behind.</source>
          <target state="translated">ゼロ幅の否定後読みアサーション。たとえば、 &lt;code&gt;/(?&amp;lt;!bar)foo/&lt;/code&gt; は、「bar」の後に続かない「foo」の出現に一致します。固定幅の後読みに対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="9ea740ba11b545f6656aa2b6204bfb6a25c281c3" translate="yes" xml:space="preserve">
          <source>A zero-width negative lookahead assertion. For example &lt;code&gt;/foo(?!bar)/&lt;/code&gt; matches any occurrence of &quot;foo&quot; that isn't followed by &quot;bar&quot;. Note however that lookahead and lookbehind are NOT the same thing. You cannot use this for lookbehind.</source>
          <target state="translated">ゼロ幅の負の先読みアサーション。たとえば、 &lt;code&gt;/foo(?!bar)/&lt;/code&gt; は、「bar」が後に続かない「foo」の出現に一致します。ただし、先読みと後読みは同じものではないことに注意してください。これを後読みに使用することはできません。</target>
        </trans-unit>
        <trans-unit id="4af952bb5746f173cd5ec48d2be9d1fb0c6c2cf0" translate="yes" xml:space="preserve">
          <source>A zero-width negative lookbehind assertion. For example &lt;code&gt;/(?&amp;lt;!bar)foo/&lt;/code&gt; matches any occurrence of &quot;foo&quot; that does not follow &quot;bar&quot;.</source>
          <target state="translated">ゼロ幅の負のルックビハインドアサーション。たとえば、 &lt;code&gt;/(?&amp;lt;!bar)foo/&lt;/code&gt; は、「bar」に続かない「foo」の出現に一致します。</target>
        </trans-unit>
        <trans-unit id="31c71ae629ab72f59da90b044b041a0f3f38fe68" translate="yes" xml:space="preserve">
          <source>A zero-width positive look-ahead assertion. For example, &lt;code&gt;/\w+(?=\t)/&lt;/code&gt; matches a word followed by a tab, without including the tab in &lt;code&gt;$&amp;amp;&lt;/code&gt; .</source>
          <target state="translated">ゼロ幅の肯定先読みアサーション。たとえば、 &lt;code&gt;/\w+(?=\t)/&lt;/code&gt; は &lt;code&gt;$&amp;amp;&lt;/code&gt; にタブを含めずに、単語の後にタブが続く単語に一致します。</target>
        </trans-unit>
        <trans-unit id="65fa5c05e8082d01af830ede3afa1f43dd6607a8" translate="yes" xml:space="preserve">
          <source>A zero-width positive look-behind assertion. For example, &lt;code&gt;/(?&amp;lt;=\t)\w+/&lt;/code&gt; matches a word that follows a tab, without including the tab in &lt;code&gt;$&amp;amp;&lt;/code&gt; . Works only for fixed-width look-behind.</source>
          <target state="translated">ゼロ幅のポジティブ後読みアサーション。たとえば、 &lt;code&gt;/(?&amp;lt;=\t)\w+/&lt;/code&gt; は、タブを &lt;code&gt;$&amp;amp;&lt;/code&gt; に含めずに、タブに続く単語に一致します。固定幅の後読みに対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="30b0a1f1290a40ce4c34b1a48caac8b2804ff4f2" translate="yes" xml:space="preserve">
          <source>A zero-width positive lookahead assertion. For example, &lt;code&gt;/\w+(?=\t)/&lt;/code&gt; matches a word followed by a tab, without including the tab in &lt;code&gt;$&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">ゼロ幅の正の先読みアサーション。たとえば、 &lt;code&gt;/\w+(?=\t)/&lt;/code&gt; は、 &lt;code&gt;$&amp;amp;&lt;/code&gt; にタブを含めずに、単語の後にタブが続くものと一致します。</target>
        </trans-unit>
        <trans-unit id="d28325040f8a3f4d54ca2bb7d5a5858383bdcefb" translate="yes" xml:space="preserve">
          <source>A zero-width positive lookbehind assertion. For example, &lt;code&gt;/(?&amp;lt;=\t)\w+/&lt;/code&gt; matches a word that follows a tab, without including the tab in &lt;code&gt;$&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">ゼロ幅のポジティブルックビハインドアサーション。たとえば、 &lt;code&gt;/(?&amp;lt;=\t)\w+/&lt;/code&gt; は、タブを &lt;code&gt;$&amp;amp;&lt;/code&gt; に含めずに、タブに続く単語に一致します。</target>
        </trans-unit>
        <trans-unit id="dc0b9a147f28bb32361995feee47c5144b67bc3c" translate="yes" xml:space="preserve">
          <source>A. Compilation</source>
          <target state="translated">A.コンパイル</target>
        </trans-unit>
        <trans-unit id="34bdd106971288a6d920c5cf05705981d574d0c4" translate="yes" xml:space="preserve">
          <source>A. DECOMPRESS</source>
          <target state="translated">A.デコプレス</target>
        </trans-unit>
        <trans-unit id="8cdc3d01fbdde773bb6fbc3d8e1178b07d33f1a6" translate="yes" xml:space="preserve">
          <source>A. Sinan Unur &amp;lt;nanis@cpan.org&amp;gt;</source>
          <target state="translated">A. Sinan Unur &amp;lt;nanis@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1ff759f92b74a05e1658516dbd8457b5a3483f7c" translate="yes" xml:space="preserve">
          <source>ABBREVIATIONS</source>
          <target state="translated">ABBREVIATIONS</target>
        </trans-unit>
        <trans-unit id="673a41f0cf51b17cfeaeef5b1ad0748f98430d4f" translate="yes" xml:space="preserve">
          <source>ABOUT EXTENDING POD</source>
          <target state="translated">エクステンディングポッドについて</target>
        </trans-unit>
        <trans-unit id="dd2cb5069032eb76d119d2ed0164eb2a9e7c70ab" translate="yes" xml:space="preserve">
          <source>ABOUT LANGUAGE TAGS</source>
          <target state="translated">言語タグについて</target>
        </trans-unit>
        <trans-unit id="848db58438feb5d786eb1289cbafc6268e9d9307" translate="yes" xml:space="preserve">
          <source>ABOUT LOWERCASING</source>
          <target state="translated">ローワーキャッシングについて</target>
        </trans-unit>
        <trans-unit id="0bdf7f8075cb4fb7b28aefb1a128e561b3a0c204" translate="yes" xml:space="preserve">
          <source>ABOUT UNICODE PLAINTEXT LANGUAGE TAGS</source>
          <target state="translated">UNICODE PLAINTEXT LANGUAGE TAGSについて</target>
        </trans-unit>
        <trans-unit id="e29c6cbd184a79deb8c1a9f477b3e3ad1f42e851" translate="yes" xml:space="preserve">
          <source>ABSTRACT</source>
          <target state="translated">ABSTRACT</target>
        </trans-unit>
        <trans-unit id="ff2cd7d6f125611b5a0abcf6463bc5622a042c1c" translate="yes" xml:space="preserve">
          <source>ABSTRACT_FROM</source>
          <target state="translated">ABSTRACT_FROM</target>
        </trans-unit>
        <trans-unit id="8e85cf5fbe6cfb533ae13301a76848fd25437a12" translate="yes" xml:space="preserve">
          <source>ACCESS</source>
          <target state="translated">ACCESS</target>
        </trans-unit>
        <trans-unit id="5250769dfb1b93d9576c113491830191c4db1d11" translate="yes" xml:space="preserve">
          <source>ACCESSING ZIP FILES</source>
          <target state="translated">ZIP ファイルへのアクセス</target>
        </trans-unit>
        <trans-unit id="fcc3d0a1b75c8feef5b7b1c653cf0ea340c392c6" translate="yes" xml:space="preserve">
          <source>ACCESSOR METHODS</source>
          <target state="translated">ACCESSOR METHODS</target>
        </trans-unit>
        <trans-unit id="60a7c20aebd64a886444bdd90a1b11f97a4a1e06" translate="yes" xml:space="preserve">
          <source>ACCESSORS</source>
          <target state="translated">ACCESSORS</target>
        </trans-unit>
        <trans-unit id="0d1e087885abb46b2e3a63da5ea3eb3f1e982bbe" translate="yes" xml:space="preserve">
          <source>ACCURACY AND PRECISION</source>
          <target state="translated">正確さと正確さ</target>
        </trans-unit>
        <trans-unit id="0ba6c220aaa591706073278a9ad280fa2fd653a4" translate="yes" xml:space="preserve">
          <source>ACCURACY and PRECISION</source>
          <target state="translated">正確さと正確さ</target>
        </trans-unit>
        <trans-unit id="2cdc7ae734b454aa9217c09256c5559e6d697319" translate="yes" xml:space="preserve">
          <source>ACKNOWLEDGEMENTS</source>
          <target state="translated">ACKNOWLEDGEMENTS</target>
        </trans-unit>
        <trans-unit id="923060090571fbfd68775d7a6ad521d2f148ca46" translate="yes" xml:space="preserve">
          <source>ACKNOWLEDGMENTS</source>
          <target state="translated">ACKNOWLEDGMENTS</target>
        </trans-unit>
        <trans-unit id="44d15b33e9bdfa8cf1ced5727e4a50f9110eab0b" translate="yes" xml:space="preserve">
          <source>ADDITIONAL FUNCTIONS</source>
          <target state="translated">追加機能</target>
        </trans-unit>
        <trans-unit id="377c8694e808f226461dfc561f7463499e97731b" translate="yes" xml:space="preserve">
          <source>ADDITIONAL LIBRARIES</source>
          <target state="translated">追加ライブラリー</target>
        </trans-unit>
        <trans-unit id="97b832ba91bb860f61c453123e346196e469e726" translate="yes" xml:space="preserve">
          <source>ADDR should be &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless you really know what you're doing.</source>
          <target state="translated">ADDRは、何をしているのか本当に理解していない限り、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; にする必要があります。</target>
        </trans-unit>
        <trans-unit id="ec352bbc9125a2290bb41af189c87fa5a48ccde5" translate="yes" xml:space="preserve">
          <source>ADDR should be &lt;code&gt;undef&lt;/code&gt; unless you really know what you're doing.</source>
          <target state="translated">自分が何をしているのかを本当に理解していない限り、ADDRは &lt;code&gt;undef&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="55ecbd212eaf4944bfe6cc43f71cd52a01caf60b" translate="yes" xml:space="preserve">
          <source>ADDRESSES</source>
          <target state="translated">ADDRESSES</target>
        </trans-unit>
        <trans-unit id="64ec98c40972fdf68514c8da070992ffcab12ce8" translate="yes" xml:space="preserve">
          <source>ADVANCED METHODS</source>
          <target state="translated">高度な方法</target>
        </trans-unit>
        <trans-unit id="afb2b77214c93a1bf72d1a922cac35289d58c3c4" translate="yes" xml:space="preserve">
          <source>ADVISORY LOCKING</source>
          <target state="translated">アドバイスロック</target>
        </trans-unit>
        <trans-unit id="97e745db372f952a45b14d78a0e017557b75da5f" translate="yes" xml:space="preserve">
          <source>AFS users</source>
          <target state="translated">エーエフエスユーザー</target>
        </trans-unit>
        <trans-unit id="aedfd73052985c2f41211e623add2af653060807" translate="yes" xml:space="preserve">
          <source>AFTER</source>
          <target state="translated">AFTER</target>
        </trans-unit>
        <trans-unit id="496da957ccecd43014881eeb7de2e7be00a8b83f" translate="yes" xml:space="preserve">
          <source>AF_INET, AF_INET6, AF_UNIX, ...</source>
          <target state="translated">AF_INET,AF_INET6,AF_UNIX,...</target>
        </trans-unit>
        <trans-unit id="38f79606c8b9ff7b459aef84fa34e37fb3f18a07" translate="yes" xml:space="preserve">
          <source>AHHHHHHH!!!! NOT TESTING! Anything but testing! Beat me, whip me, send me to Detroit, but don't make me write tests!</source>
          <target state="translated">AHHHHHHHHHH!!!! NOT TESTING! テスト以外の何でも!殴って 鞭打って デトロイトに送ってくれ でもテストは書かせないでくれ!</target>
        </trans-unit>
        <trans-unit id="7cd735bc88414abeac25ef102606e6871aeba944" translate="yes" xml:space="preserve">
          <source>AIX</source>
          <target state="translated">AIX</target>
        </trans-unit>
        <trans-unit id="8270308dd6281a640520a3b86d9717dc1578cb66" translate="yes" xml:space="preserve">
          <source>AIX 4.2 and extensions using C++ with statics</source>
          <target state="translated">AIX 4.2 と C++を使用したスタティックな拡張機能</target>
        </trans-unit>
        <trans-unit id="cc22d23e0b7ef1b2efab2cb46a1e42c8fa854e52" translate="yes" xml:space="preserve">
          <source>AIX 5L 5.3 documentation on syslog, &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm&quot;&gt;http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm&lt;/a&gt;</source>
          <target state="translated">syslog上のAIX 5L 5.3のドキュメント、&lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf2/syslog.htm&quot;&gt;http：//publib.boulder.ibm.com/infocenter/pseries/v5r3/index.jsp？topic = / com.ibm.aix.basetechref / doc / basetrf2 / syslog.htm&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bbc183716848102da5675f12c481c22f2bbe872f" translate="yes" xml:space="preserve">
          <source>AIX specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の AIX 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="b844fff26ef204487899d430c3a31df1b5cc17d0" translate="yes" xml:space="preserve">
          <source>AIX supports dynamically loadable objects as well as shared libraries. Shared libraries by convention end with the suffix .a, which is a bit misleading, as an archive can contain static as well as dynamic members. For Perl dynamically loaded objects we use the .so suffix also used on many other platforms.</source>
          <target state="translated">AIX は共有ライブラリだけでなく、動的にロード可能なオブジェクトもサポートしています。共有ライブラリの末尾には.aという接尾辞がついていますが、これは少し誤解を招きやすいです。Perl の動的にロードされたオブジェクトには、他の多くのプラットフォームで使用されている .so という接尾辞を使用しています。</target>
        </trans-unit>
        <trans-unit id="3537445adaca536cab2a7686d43dc5160e9a6779" translate="yes" xml:space="preserve">
          <source>AI_CANONNAME</source>
          <target state="translated">AI_CANONNAME</target>
        </trans-unit>
        <trans-unit id="4620c46aeacbc229eafc938539c71b493eb24304" translate="yes" xml:space="preserve">
          <source>AI_NUMERICHOST</source>
          <target state="translated">AI_NUMERICHOST</target>
        </trans-unit>
        <trans-unit id="09260387d29750af08963df2cc73f983c3e0f300" translate="yes" xml:space="preserve">
          <source>AI_PASSIVE</source>
          <target state="translated">AI_PASSIVE</target>
        </trans-unit>
        <trans-unit id="c930119fca1aaac13c47275f88a8f54f317dcf6d" translate="yes" xml:space="preserve">
          <source>ALIASES</source>
          <target state="translated">ALIASES</target>
        </trans-unit>
        <trans-unit id="6b42874e3cd20771d93096ec5ce36307a1f2ba14" translate="yes" xml:space="preserve">
          <source>ALL</source>
          <target state="translated">ALL</target>
        </trans-unit>
        <trans-unit id="3311a8d976d7aae7ce8e194719b592e7d83f6ff7" translate="yes" xml:space="preserve">
          <source>ALTERING OR REMOVING EVENTS</source>
          <target state="translated">イベントの変更・削除</target>
        </trans-unit>
        <trans-unit id="241f8a691bf6294c40554b54ad6e99801b55d29b" translate="yes" xml:space="preserve">
          <source>ALTERNATIVE: It may be desirable to present to the user which features depend on which modules so they can make an informed decision about which recommended modules to install.</source>
          <target state="translated">他の方法:どの機能がどのモジュールに依存しているかをユーザに提示することで、どのモジュールをインストールするかを十分な情報に基づいて決定できるようにすることが望ましいかもしれません。</target>
        </trans-unit>
        <trans-unit id="212ac4dd3c12194a505f91dc67c3c92083d6b847" translate="yes" xml:space="preserve">
          <source>ALTERNATIVES</source>
          <target state="translated">ALTERNATIVES</target>
        </trans-unit>
        <trans-unit id="a4406ec237fefa2186cbfcb898374ca2b35f123f" translate="yes" xml:space="preserve">
          <source>ANCHORS</source>
          <target state="translated">ANCHORS</target>
        </trans-unit>
        <trans-unit id="c2f934cb8cab6c1b3af0d4f2fdd824eabafb6bf4" translate="yes" xml:space="preserve">
          <source>AND</source>
          <target state="translated">AND</target>
        </trans-unit>
        <trans-unit id="f00aef29ec0d70fa98911d7d5c3619473dc02a1d" translate="yes" xml:space="preserve">
          <source>ANOTHER STEP SIDEWAYS</source>
          <target state="translated">ANOTHER STEP SIDEWAYS</target>
        </trans-unit>
        <trans-unit id="dc8b5a685a1f3dfa4a578835317ceecf19e71828" translate="yes" xml:space="preserve">
          <source>ANSI C prototypes</source>
          <target state="translated">ANSI Cプロトタイプ</target>
        </trans-unit>
        <trans-unit id="85c85842fa779a9f5e25a53ba642bca5f47b5048" translate="yes" xml:space="preserve">
          <source>ANSI_COLORS_ALIASES</source>
          <target state="translated">ANSI_COLORS_ALIASES</target>
        </trans-unit>
        <trans-unit id="e21a704282760d26b7a89f6a75aa39bcbdea5155" translate="yes" xml:space="preserve">
          <source>ANSI_COLORS_DISABLED</source>
          <target state="translated">ANSI_COLORS_DISABLED</target>
        </trans-unit>
        <trans-unit id="dfbdf15f452a4b9784443e1ff8b670a57ee46040" translate="yes" xml:space="preserve">
          <source>API CHANGES</source>
          <target state="translated">API変更</target>
        </trans-unit>
        <trans-unit id="4f15dd61e10f028874d8ba2639996e9123298e0e" translate="yes" xml:space="preserve">
          <source>API Listing originally by Dean Roehrich &amp;lt;roehrich@cray.com&amp;gt;.</source>
          <target state="translated">Dean Roehrich &amp;lt;roehrich@cray.com&amp;gt;によるAPIリスト。</target>
        </trans-unit>
        <trans-unit id="df325db8b77f500b6cdf947d62422aad373e0aea" translate="yes" xml:space="preserve">
          <source>API Methods</source>
          <target state="translated">APIメソッド</target>
        </trans-unit>
        <trans-unit id="8454ac15101bc16638e3fcbf0a95ef8d316e2b31" translate="yes" xml:space="preserve">
          <source>API documentation corrected and extended by Peter John Acklam, &amp;lt;pjacklam@online.no&amp;gt;</source>
          <target state="translated">Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;によって修正および拡張されたAPIドキュメント</target>
        </trans-unit>
        <trans-unit id="277a0cf94bbf499b3b1ef2e01755b635f3035e77" translate="yes" xml:space="preserve">
          <source>API optional methods</source>
          <target state="translated">APIオプションメソッド</target>
        </trans-unit>
        <trans-unit id="9062babed18f073234a690694e7bfa973c074eed" translate="yes" xml:space="preserve">
          <source>API should be understandable by the average programmer</source>
          <target state="translated">APIは一般的なプログラマーが理解できるようにする必要がある</target>
        </trans-unit>
        <trans-unit id="0dd3839d0c79b29685b54d3a4a1e4fbc6f050c94" translate="yes" xml:space="preserve">
          <source>API version</source>
          <target state="translated">APIバージョン</target>
        </trans-unit>
        <trans-unit id="a7438834ae98ed5eab86e235ece4b52b96a7675f" translate="yes" xml:space="preserve">
          <source>API version 1</source>
          <target state="translated">APIバージョン1</target>
        </trans-unit>
        <trans-unit id="a0960ab95be5d294c9ff103e037a981d112d54d9" translate="yes" xml:space="preserve">
          <source>API version 2</source>
          <target state="translated">APIバージョン2</target>
        </trans-unit>
        <trans-unit id="f6db2b825c2703e26c1c6b659f77956e578c5caf" translate="yes" xml:space="preserve">
          <source>ARGS</source>
          <target state="translated">ARGS</target>
        </trans-unit>
        <trans-unit id="d2a8b4f2260ca5da9545853c3c2e9c5c0777a776" translate="yes" xml:space="preserve">
          <source>ARGUMENT</source>
          <target state="translated">ARGUMENT</target>
        </trans-unit>
        <trans-unit id="253fb8ce8cc421dd2ece69eec435a50b11f94cfb" translate="yes" xml:space="preserve">
          <source>ARGUMENTS</source>
          <target state="translated">ARGUMENTS</target>
        </trans-unit>
        <trans-unit id="e34e974046ac7d5ed443828e19c1c6fd0873d9c4" translate="yes" xml:space="preserve">
          <source>ARGUMENTS:</source>
          <target state="translated">ARGUMENTS:</target>
        </trans-unit>
        <trans-unit id="3669288cabd0e6c21385584c21cb897733b8578f" translate="yes" xml:space="preserve">
          <source>ARGV</source>
          <target state="translated">ARGV</target>
        </trans-unit>
        <trans-unit id="58f29c4a3f70f6c5783cb6f812b7570e0f5a35fa" translate="yes" xml:space="preserve">
          <source>ARGVOUT</source>
          <target state="translated">ARGVOUT</target>
        </trans-unit>
        <trans-unit id="3e36d1ca2adf5962801ee67544d6b213480d0743" translate="yes" xml:space="preserve">
          <source>ARRAY</source>
          <target state="translated">ARRAY</target>
        </trans-unit>
        <trans-unit id="394961b04a3b6a1f6d02500eeded58332d3e595d" translate="yes" xml:space="preserve">
          <source>ARRAYREF [</source>
          <target state="translated">ARRAYREF [...</target>
        </trans-unit>
        <trans-unit id="fdac805b3b41ae0fbcc577f93532803e87b2d665" translate="yes" xml:space="preserve">
          <source>ARRAYREF]</source>
          <target state="translated">ARRAYREF]</target>
        </trans-unit>
        <trans-unit id="939f4f9b79e0d63ec8eb10a421a9e30ccdc8ba12" translate="yes" xml:space="preserve">
          <source>ARRAYS OF ARRAYS</source>
          <target state="translated">ARRAYS OF ARRAYS</target>
        </trans-unit>
        <trans-unit id="a25c873f10f6ead60f25f2f80304660b76114969" translate="yes" xml:space="preserve">
          <source>ARRAYS OF HASHES</source>
          <target state="translated">ハッシュの列</target>
        </trans-unit>
        <trans-unit id="33001c4a5e6064950ba3947c2ff95e716a4daff7" translate="yes" xml:space="preserve">
          <source>ARRAYelt</source>
          <target state="translated">ARRAYelt</target>
        </trans-unit>
        <trans-unit id="3a850a34d309cd690354487cdf0537837ddb2c56" translate="yes" xml:space="preserve">
          <source>AS FUNCTIONS</source>
          <target state="translated">関数として</target>
        </trans-unit>
        <trans-unit id="62deab43d3dc43d1e1820db6e88541fd9e1d178d" translate="yes" xml:space="preserve">
          <source>AS METHODS</source>
          <target state="translated">AS METHODS</target>
        </trans-unit>
        <trans-unit id="54523fd188916df915063049c7391f98e0ecb17d" translate="yes" xml:space="preserve">
          <source>AS/400 Perl information at &lt;a href=&quot;http://as400.rochester.ibm.com/&quot;&gt;http://as400.rochester.ibm.com/&lt;/a&gt; as well as on CPAN in the</source>
          <target state="translated">AS / 400 Perl情報（&lt;a href=&quot;http://as400.rochester.ibm.com/&quot;&gt;http://as400.rochester.ibm.com/&lt;/a&gt;およびCPANにあります）</target>
        </trans-unit>
        <trans-unit id="94090230b1f8c256f7ac5dc5a70bd3b20ee4ff15" translate="yes" xml:space="preserve">
          <source>ASCII</source>
          <target state="translated">ASCII</target>
        </trans-unit>
        <trans-unit id="095009cc6353c09fd2d522eaac28b52d2906738f" translate="yes" xml:space="preserve">
          <source>ASCII Rules versus Unicode Rules</source>
          <target state="translated">ASCII規則対Unicode規則</target>
        </trans-unit>
        <trans-unit id="05b06e21b242818c80ba48f1806ad24f7869b69b" translate="yes" xml:space="preserve">
          <source>ASCII is a 7 bit encoding, but bytes have 8 bits in them. The 128 extra characters have different meanings depending on the locale. Absent a locale, currently these extra characters are generally considered to be unassigned, and this has presented some problems. This has being changed starting in 5.12 so that these characters can be considered to be Latin-1 (ISO-8859-1).</source>
          <target state="translated">ASCIIは7ビットのエンコーディングですが、バイトは8ビットです。128の余分な文字は、ロケールによって意味が異なります。ロケールがない場合、現在のところこれらの余分な文字は一般的に未割り当てとみなされており、これがいくつかの問題を引き起こしていました。これは5.12から変更され、これらの文字はLatin-1 (ISO-8859-1)とみなされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d77e7b08ca6fa993505fba8c81b3ac5f801abc6f" translate="yes" xml:space="preserve">
          <source>ASCII rules are used for the case change. The lowercase of any character outside the ASCII range is the character itself.</source>
          <target state="translated">大文字小文字の変更にはASCIIルールを使用します。ASCIIの範囲外の文字の小文字は、その文字そのものです。</target>
        </trans-unit>
        <trans-unit id="2265708eb994626faa95764187a1c4bc94aeb6df" translate="yes" xml:space="preserve">
          <source>ASCII_TO_NEED</source>
          <target state="translated">ASCII_TO_NEED</target>
        </trans-unit>
        <trans-unit id="933aa69818a860a8e89d214ed12386c4c9be9be4" translate="yes" xml:space="preserve">
          <source>AT&amp;amp;T 3b1</source>
          <target state="translated">AT＆T 3b1</target>
        </trans-unit>
        <trans-unit id="4fb35c7230a646597450a190cacb284a7107da13" translate="yes" xml:space="preserve">
          <source>ATTRIBUTES</source>
          <target state="translated">ATTRIBUTES</target>
        </trans-unit>
        <trans-unit id="ece7d85b8cf901827daa3241607fc8b13d846059" translate="yes" xml:space="preserve">
          <source>ATTRIBUTION</source>
          <target state="translated">ATTRIBUTION</target>
        </trans-unit>
        <trans-unit id="8b61f8355a2ccf4ace40fd469d2de5233617a66b" translate="yes" xml:space="preserve">
          <source>AUTHOR</source>
          <target state="translated">AUTHOR</target>
        </trans-unit>
        <trans-unit id="57dab403a72cbeaee26142a3b342afaf3f988255" translate="yes" xml:space="preserve">
          <source>AUTHOR AND COPYRIGHT</source>
          <target state="translated">著者と著作権</target>
        </trans-unit>
        <trans-unit id="612f07ef18eeaf3398b36342703c907f1f498930" translate="yes" xml:space="preserve">
          <source>AUTHOR and COPYRIGHT</source>
          <target state="translated">著者と著作権</target>
        </trans-unit>
        <trans-unit id="d5195f9e1e4e9d40c97901347bc70f8c519bf1be" translate="yes" xml:space="preserve">
          <source>AUTHOR, COPYRIGHT AND LICENSE</source>
          <target state="translated">著者、著作権およびライセンス</target>
        </trans-unit>
        <trans-unit id="41d9cfc9cdf402f68e3f8ff8a8e41c4254e5f24e" translate="yes" xml:space="preserve">
          <source>AUTHOR, COPYRIGHT, AND LICENSE</source>
          <target state="translated">著者、著作権、ライセンス</target>
        </trans-unit>
        <trans-unit id="dad57a4c245a8007c90257aef0514c8b6a0f600c" translate="yes" xml:space="preserve">
          <source>AUTHORS</source>
          <target state="translated">AUTHORS</target>
        </trans-unit>
        <trans-unit id="10ca6d2dbfbe263ce3d2447e713540dbee649dd1" translate="yes" xml:space="preserve">
          <source>AUTHORS &amp;amp; ACKNOWLEDGEMENTS</source>
          <target state="translated">著者と謝辞</target>
        </trans-unit>
        <trans-unit id="85e022793224f31daf1d3314f296447a1c347850" translate="yes" xml:space="preserve">
          <source>AUTHORS / CONTRIBUTORS</source>
          <target state="translated">著者・協力者</target>
        </trans-unit>
        <trans-unit id="14d07abb959cf3e3fd8f53cf02fd844e461b3f7b" translate="yes" xml:space="preserve">
          <source>AUTHORS AND CONTRIBUTORS</source>
          <target state="translated">著者と協力者</target>
        </trans-unit>
        <trans-unit id="36cf502fc37ab4d36ef92580de3d24ac259c8d44" translate="yes" xml:space="preserve">
          <source>AUTHORS EMERITUS</source>
          <target state="translated">オーサーズ・エメリタス</target>
        </trans-unit>
        <trans-unit id="4a70fded9361d1a1ecef0893e232626c6b2b54fd" translate="yes" xml:space="preserve">
          <source>AUTHORS, CONTRIBUTORS AND REVIEWERS</source>
          <target state="translated">著者、寄稿者、評論家</target>
        </trans-unit>
        <trans-unit id="a7c000e8a87845b58cc629ac11fab313f86076cc" translate="yes" xml:space="preserve">
          <source>AUTO LEXICONS</source>
          <target state="translated">オートレキシコン</target>
        </trans-unit>
        <trans-unit id="ba657d4270e0ee84198dc3f12f7f53cb0c332d2f" translate="yes" xml:space="preserve">
          <source>AUTOLOAD</source>
          <target state="translated">AUTOLOAD</target>
        </trans-unit>
        <trans-unit id="43af5166b3e71bcdd670318e774158ceaf10a942" translate="yes" xml:space="preserve">
          <source>AUTOLOADER</source>
          <target state="translated">AUTOLOADER</target>
        </trans-unit>
        <trans-unit id="886a23f1067d5ffd81046b592349f27bd44a8216" translate="yes" xml:space="preserve">
          <source>AUTOLOADed Constants</source>
          <target state="translated">AUTOLOADされた定数</target>
        </trans-unit>
        <trans-unit id="6ed729d5c732a41eb08d03f6337c79a35aa1083c" translate="yes" xml:space="preserve">
          <source>AUX</source>
          <target state="translated">AUX</target>
        </trans-unit>
        <trans-unit id="20ab2d9088d2ab458d63ed3bd729fda9297db5a4" translate="yes" xml:space="preserve">
          <source>AV</source>
          <target state="translated">AV</target>
        </trans-unit>
        <trans-unit id="68570adadeeae5fdaad94d20b4200b8cf0e0c4f0" translate="yes" xml:space="preserve">
          <source>AVAILABILITY</source>
          <target state="translated">AVAILABILITY</target>
        </trans-unit>
        <trans-unit id="9669bc4871af0ed7e9d16166bb30c227929eda52" translate="yes" xml:space="preserve">
          <source>AVAILABLE FEATURES</source>
          <target state="translated">利用可能な機能</target>
        </trans-unit>
        <trans-unit id="302ba7dc5c280998e54c1d7ee821e9c0c27afd54" translate="yes" xml:space="preserve">
          <source>AVs and HVs are more complicated, but SVs are by far the most common variable type being thrown around. Having seen something of how we manipulate these, let's go on and look at how the op tree is constructed.</source>
          <target state="translated">AV や HV はもっと複雑ですが、SV は最も一般的な変数型です。これらをどのように操作するかを見てきましたが、次に op ツリーがどのように構築されているかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="97658a3aca1866999e545fb8e0d412280826a4d3" translate="yes" xml:space="preserve">
          <source>AVs, HVs and undefined values</source>
          <target state="translated">AV、HV、未定義値</target>
        </trans-unit>
        <trans-unit id="0938888fe01a59a31e6903705824b94517ab98d0" translate="yes" xml:space="preserve">
          <source>Abandon the tmp in the current pad at offset &lt;code&gt;po&lt;/code&gt; and replace with a new one.</source>
          <target state="translated">現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; のtmpを破棄し、新しいものと交換します。</target>
        </trans-unit>
        <trans-unit id="1ca83b983f42527b4fed4dd004cb7ec8d4f4a6f6" translate="yes" xml:space="preserve">
          <source>Abandon the tmp in the current pad at offset po and replace with a new one.</source>
          <target state="translated">現在のパッドの tmp をオフセット po で破棄し、新しい tmp に置き換えます。</target>
        </trans-unit>
        <trans-unit id="57c67b6004d41befa99fa526f57a6625af549efe" translate="yes" xml:space="preserve">
          <source>Abbrev - create an abbreviation table from a list</source>
          <target state="translated">Abbrev-リストから略語表を作成する</target>
        </trans-unit>
        <trans-unit id="807c421ac798eb9fc0d4cfcfce62f4a8d8412f16" translate="yes" xml:space="preserve">
          <source>Abc-shell can also launch programs via the #! syntax at the start of the program file, it's best use the form #!SDK:Local/C/perl so that the AmigaOS shell may also find perl in the same way. AmigaOS requires the script bit to be set for this to work</source>
          <target state="translated">Abc-shellはプログラムファイルの開始時に#!構文を使ってプログラムを起動することもできます。AmigaOSでは、これを動作させるためにスクリプトビットが設定されている必要があります。</target>
        </trans-unit>
        <trans-unit id="b58dff4b5e1845452d9882830cd3982aa792f290" translate="yes" xml:space="preserve">
          <source>Abigail &amp;lt;abigail@abigail.be&amp;gt;, Charles Bailey &amp;lt;bailey@newman.upenn.edu&amp;gt;, Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;, Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;, Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;, Thomas Dorner &amp;lt;Thomas.Dorner@start.de&amp;gt;, Andy Dougherty &amp;lt;doughera@lafayette.edu&amp;gt;, Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;, Neale Ferguson &amp;lt;neale@vma.tabnsw.com.au&amp;gt;, David J. Fiander &amp;lt;davidf@mks.com&amp;gt;, Paul Green &amp;lt;Paul.Green@stratus.com&amp;gt;, M.J.T. Guy &amp;lt;mjtg@cam.ac.uk&amp;gt;, Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;, Luther Huffman &amp;lt;lutherh@stratcom.com&amp;gt;, Nick Ing-Simmons &amp;lt;nick@ing-simmons.net&amp;gt;, Andreas J. K&amp;ouml;nig &amp;lt;a.koenig@mind.de&amp;gt;, Markus Laker &amp;lt;mlaker@contax.co.uk&amp;gt;, Andrew M. Langmead &amp;lt;aml@world.std.com&amp;gt;, Lukas Mai &amp;lt;l.mai@web.de&amp;gt;, Larry Moore &amp;lt;ljmoore@freespace.net&amp;gt;, Paul Moore &amp;lt;Paul.Moore@uk.origin-it.com&amp;gt;, Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;, Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;, Philip Newton &amp;lt;pne@cpan.org&amp;gt;, Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;, Tom Phoenix &amp;lt;rootbeer@teleport.com&amp;gt;, Andr&amp;eacute; Pirard &amp;lt;A.Pirard@ulg.ac.be&amp;gt;, Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;, Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;, Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;, Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;, Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;, Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;, Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;, John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;</source>
          <target state="translated">Abigail &amp;lt;abigail@abigail.be&amp;gt;、Charles Bailey &amp;lt;bailey@newman.upenn.edu&amp;gt;、Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;、Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;、Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt; 、Thomas Dorner &amp;lt;Thomas.Dorner@start.de&amp;gt;、Andy Dougherty &amp;lt;doughera@lafayette.edu&amp;gt;、Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;、Neale Ferguson &amp;lt;neale@vma.tabnsw.com.au&amp;gt;、DavidJ。 Fiander &amp;lt;davidf@mks.com&amp;gt;、Paul Green &amp;lt;Paul.Green@stratus.com&amp;gt;、MJT Guy &amp;lt;mjtg@cam.ac.uk&amp;gt;、Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;、Luther Huffman &amp;lt;lutherh @stratcom。 com&amp;gt;、Nick Ing-Simmons &amp;lt;nick@ing-simmons.net&amp;gt;、AndreasJ.K&amp;ouml;nig&amp;lt;a.koenig@mind.de&amp;gt;、Markus Laker &amp;lt;mlaker@contax.co.uk&amp;gt;、Andrew M. Langmead &amp;lt;aml @ world.std.com&amp;gt;、Lukas Mai &amp;lt;l.mai@web.de&amp;gt;、Larry Moore &amp;lt;ljmoore@freespace.net&amp;gt;、Paul Moore &amp;lt;Paul。Moore@uk.origin-it.com&amp;gt;、Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;、Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;、Philip Newton &amp;lt;pne@cpan.org&amp;gt;、Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt; 、Tom Phoenix &amp;lt;rootbeer@teleport.com&amp;gt;、Andr&amp;eacute;Pirard&amp;lt;A.Pirard@ulg.ac.be&amp;gt;、Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt; 、Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat @ frii .com&amp;gt;、John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;Andr&amp;eacute;Pirard&amp;lt;A.Pirard@ulg.ac.be&amp;gt;、Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、 Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw @ qslネット&amp;gt;Andr&amp;eacute;Pirard&amp;lt;A.Pirard@ulg.ac.be&amp;gt;、Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、 Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw @ qslネット&amp;gt;</target>
        </trans-unit>
        <trans-unit id="953787278f84160153e00df3d74bff332f0acc7b" translate="yes" xml:space="preserve">
          <source>Abigail &amp;lt;abigail@foad.org&amp;gt;, Charles Bailey &amp;lt;bailey@newman.upenn.edu&amp;gt;, Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;, Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;, Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;, Thomas Dorner &amp;lt;Thomas.Dorner@start.de&amp;gt;, Andy Dougherty &amp;lt;doughera@lafayette.edu&amp;gt;, Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;, Neale Ferguson &amp;lt;neale@vma.tabnsw.com.au&amp;gt;, David J. Fiander &amp;lt;davidf@mks.com&amp;gt;, Paul Green &amp;lt;Paul.Green@stratus.com&amp;gt;, M.J.T. Guy &amp;lt;mjtg@cam.ac.uk&amp;gt;, Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;, Luther Huffman &amp;lt;lutherh@stratcom.com&amp;gt;, Nick Ing-Simmons &amp;lt;nick@ing-simmons.net&amp;gt;, Andreas J. K&amp;ouml;nig &amp;lt;a.koenig@mind.de&amp;gt;, Markus Laker &amp;lt;mlaker@contax.co.uk&amp;gt;, Andrew M. Langmead &amp;lt;aml@world.std.com&amp;gt;, Larry Moore &amp;lt;ljmoore@freespace.net&amp;gt;, Paul Moore &amp;lt;Paul.Moore@uk.origin-it.com&amp;gt;, Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;, Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;, Philip Newton &amp;lt;pne@cpan.org&amp;gt;, Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;, Tom Phoenix &amp;lt;rootbeer@teleport.com&amp;gt;, Andr&amp;eacute; Pirard &amp;lt;A.Pirard@ulg.ac.be&amp;gt;, Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;, Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;, Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;, Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;, Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;, Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;, Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;, John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;</source>
          <target state="translated">Abigail &amp;lt;abigail@foad.org&amp;gt;、Charles Bailey &amp;lt;bailey@newman.upenn.edu&amp;gt;、Graham Barr &amp;lt;gbarr@pobox.com&amp;gt;、Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;、Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt; 、Thomas Dorner &amp;lt;Thomas.Dorner@start.de&amp;gt;、Andy Dougherty &amp;lt;doughera@lafayette.edu&amp;gt;、Dominic Dunlop &amp;lt;domo@computer.org&amp;gt;、Neale Ferguson &amp;lt;neale@vma.tabnsw.com.au&amp;gt;、David J. Fiander &amp;lt;davidf@mks.com&amp;gt;、Paul Green &amp;lt;Paul.Green@stratus.com&amp;gt;、MJT Guy &amp;lt;mjtg@cam.ac.uk&amp;gt;、Jarkko Hietaniemi &amp;lt;jhi@iki.fi&amp;gt;、Luther Huffman &amp;lt;lutherh @ stratcom。 com&amp;gt;、Nick Ing-Simmons &amp;lt;nick@ing-simmons.net&amp;gt;、Andreas J.K&amp;ouml;nig&amp;lt;a.koenig@mind.de&amp;gt;、Markus Laker &amp;lt;mlaker@contax.co.uk&amp;gt;、Andrew M. Langmead &amp;lt;aml @ world.std.com&amp;gt;、Larry Moore &amp;lt;ljmoore@freespace.net&amp;gt;、Paul Moore &amp;lt;Paul.Moore@uk.origin-it.com&amp;gt;、Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;、Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;、Philip Newton &amp;lt;pne@cpan.org&amp;gt;、Gary Ng &amp;lt;71564.1743@CompuServe.COM&amp;gt;、Tom Phoenix &amp;lt;rootbeer@teleport.com&amp;gt;、 Andr&amp;eacute;Pirard &amp;lt;A.Pirard@ulg.ac.be&amp;gt;、Peter Prymmer &amp;lt;pvhp@forte.com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、 Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw @ qsl。ネット&amp;gt;com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com &amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;com&amp;gt;、Hugo van der Sanden &amp;lt;hv@crypt0.demon.co.uk&amp;gt;、Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;、Paul J. Schinder &amp;lt;schinder@pobox.com&amp;gt;、Michael G Schwern &amp;lt;schwern@pobox.com &amp;gt;、Dan Sugalski &amp;lt;dan@sidhe.org&amp;gt;、Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;、John Malmberg &amp;lt;wb8tyw@qsl.net&amp;gt;</target>
        </trans-unit>
        <trans-unit id="272ef4d46b3c0dabd3e502b3dc11c532d79932f2" translate="yes" xml:space="preserve">
          <source>Able to serve as an &lt;b&gt;lvalue&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;左辺値&lt;/b&gt;として機能できます。</target>
        </trans-unit>
        <trans-unit id="a3f9c8141ea275b67bac5cb6c2da96e6b983db25" translate="yes" xml:space="preserve">
          <source>Abort the current data transfer.</source>
          <target state="translated">現在のデータ転送を中止します。</target>
        </trans-unit>
        <trans-unit id="ef50c92d523e6a7f82af2cdf35a1ad71804df1e4" translate="yes" xml:space="preserve">
          <source>Aborts a system shutdown (started by the InitiateSystemShutdown function) on the specified MACHINE.</source>
          <target state="translated">指定されたマシン上でシステム・シャットダウン(InitiateSystemShutdown 関数で開始)をアボートします。</target>
        </trans-unit>
        <trans-unit id="f7989aafbbb3a9f050ae7d85ebd582349680eb97" translate="yes" xml:space="preserve">
          <source>About =over...=back Regions</source>
          <target state="translated">について =over...=back 地域</target>
        </trans-unit>
        <trans-unit id="5766587271d36ba046e7fb9efb21f9b7e662efb7" translate="yes" xml:space="preserve">
          <source>About Compiler Versions of Irix</source>
          <target state="translated">Irixのコンパイラバージョンについて</target>
        </trans-unit>
        <trans-unit id="bcf14899785f94972e5296a53e65daa2fad1f95c" translate="yes" xml:space="preserve">
          <source>About Data Paragraphs and &quot;=begin/=end&quot; Regions</source>
          <target state="translated">データ段落と&quot;=begin/=end &quot;地域について</target>
        </trans-unit>
        <trans-unit id="f134fee2fd6f61ab2515d5dfb15b7bc4b2f583f5" translate="yes" xml:space="preserve">
          <source>About L&amp;lt;...&amp;gt; Codes</source>
          <target state="translated">L &amp;lt;...&amp;gt;コードについて</target>
        </trans-unit>
        <trans-unit id="e5cab81ecabd091128b2d7c9329cceb43c780d87" translate="yes" xml:space="preserve">
          <source>About Perl</source>
          <target state="translated">Perlについて</target>
        </trans-unit>
        <trans-unit id="20348f0cd91058ac758340303c3ce91495980768" translate="yes" xml:space="preserve">
          <source>About filehandles</source>
          <target state="translated">ファイルハンドルについて</target>
        </trans-unit>
        <trans-unit id="2bb268c52f27a73602478b866c73dabd9577e8f6" translate="yes" xml:space="preserve">
          <source>About modes</source>
          <target state="translated">モードについて</target>
        </trans-unit>
        <trans-unit id="027e45f66497afa47c6fd09d682b0e1e7a6cedb2" translate="yes" xml:space="preserve">
          <source>Above the optimizer section is the list of</source>
          <target state="translated">オプティマイザーセクションの上には</target>
        </trans-unit>
        <trans-unit id="6d3fc598c606132c619a12609173fe6e49201e22" translate="yes" xml:space="preserve">
          <source>Absolute referencing</source>
          <target state="translated">絶対参照</target>
        </trans-unit>
        <trans-unit id="d79da395b5d7a09c6439a5f2660d8c568186ab7e" translate="yes" xml:space="preserve">
          <source>Abstract</source>
          <target state="translated">Abstract</target>
        </trans-unit>
        <trans-unit id="fd1c863c80384ee83334b3b3ad71ce0af37947bc" translate="yes" xml:space="preserve">
          <source>Abstract base class for harness output delegate</source>
          <target state="translated">ハーネス出力デリゲートのための抽象基底クラス</target>
        </trans-unit>
        <trans-unit id="fc6cd410f445b57f3e0f74f4d7cfaf1d465c09ec" translate="yes" xml:space="preserve">
          <source>Abstract method</source>
          <target state="translated">抽象的な方法</target>
        </trans-unit>
        <trans-unit id="3782c0ad3a39a0cddf59f8a4587a6ac1e53f9c97" translate="yes" xml:space="preserve">
          <source>Acceptance of these code points is a Perl extension, and you should expect that nothing other than Perl can handle them; Perl itself on EBCDIC platforms before v5.24 does not handle them.</source>
          <target state="translated">これらのコードポイントの受け入れは Perl の拡張であり、Perl 以外では扱えないと思ってください。</target>
        </trans-unit>
        <trans-unit id="becdf5f42e43b7273698e72d5f4213f7c0a68cc4" translate="yes" xml:space="preserve">
          <source>Accepted before Perl 5.20.0. The Socket library is now primarily maintained on CPAN, rather than in the perl core.</source>
          <target state="translated">Perl 5.20.0 より前に受け入れられました。Socket ライブラリは、Perl コアではなく、主に CPAN でメンテナンスされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4dd1bc893614ac8f9bec65c912481578e5103c07" translate="yes" xml:space="preserve">
          <source>Accepted features</source>
          <target state="translated">受け入れられた機能</target>
        </trans-unit>
        <trans-unit id="56a28ff20a71c3e8ac9c196f290eef557747b624" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.20.0</source>
          <target state="translated">Perl 5.20.0 で受け入れ</target>
        </trans-unit>
        <trans-unit id="1576bf43d8822dbdd55b1f1ab39311d28be28187" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.22.0</source>
          <target state="translated">Perl 5.22.0 で受け入れ</target>
        </trans-unit>
        <trans-unit id="675dec52d56b1b7035fe24d4e72f28a346a787af" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.8.0</source>
          <target state="translated">Perl 5.8.0 で受け入れ</target>
        </trans-unit>
        <trans-unit id="90c2a9a8eb85f455955167b397c89e9d89539a74" translate="yes" xml:space="preserve">
          <source>Accepted in Perl 5.8.1</source>
          <target state="translated">Perl 5.8.1 で受け入れ</target>
        </trans-unit>
        <trans-unit id="8a68651daaebc69bcbc1b07f1e106b12188deb49" translate="yes" xml:space="preserve">
          <source>Accepting a patch</source>
          <target state="translated">パッチの受け入れ</target>
        </trans-unit>
        <trans-unit id="ad21c5596b645ba9637173674a45823b09fa37af" translate="yes" xml:space="preserve">
          <source>Accepts a hashref with the following key/value pairs:</source>
          <target state="translated">以下のキーと値のペアを持つハッシュリフを受け取ります。</target>
        </trans-unit>
        <trans-unit id="3cab88715458f5eb0aafb0a8b41682d6e4711e8a" translate="yes" xml:space="preserve">
          <source>Accepts a scalar value or array ref of scalar values indicating which paths to allowed libraries should be included if Perl tests are executed. Naturally, this only makes sense in the context of tests written in Perl.</source>
          <target state="translated">Perl テストが実行された場合に、許可されたライブラリへのパスが含まれるべきであることを示すスカラー値またはスカラー値の配列 ref を受け取ります。当然ながら、これは Perl で書かれたテストのコンテキストでのみ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="fd709042dcc776319515489b90b122d3454c0825" translate="yes" xml:space="preserve">
          <source>Accepts a scalar value or array ref of scalar values indicating which switches should be included if Perl tests are executed. Naturally, this only makes sense in the context of tests written in Perl.</source>
          <target state="translated">Perl テストが実行された場合に、どのスイッチが含まれるべきかを示すスカラー値またはスカラー値の配列 ref を受け取ります。当然ながら、これは Perl で書かれたテストのコンテキストでのみ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="410a58b5c50383c8e3e3efac6ca6d02323a2e404" translate="yes" xml:space="preserve">
          <source>Accepts a version object and returns the normalized floating point representation. Call like:</source>
          <target state="translated">バージョンオブジェクトを受け取り、正規化された浮動小数点表現を返します。のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="6925cd73aca9469cc1ca4115afb36b07a4f628be" translate="yes" xml:space="preserve">
          <source>Accepts a version object and returns the normalized string representation. Call like:</source>
          <target state="translated">バージョンオブジェクトを受け取り、正規化された文字列表現を返します。のように呼び出します。</target>
        </trans-unit>
        <trans-unit id="2dc796d2ce674a48fb65979328ffb56b5f53f1a2" translate="yes" xml:space="preserve">
          <source>Accepts an array of &lt;code&gt;@tests&lt;/code&gt; to be run. This should generally be the names of test files, but this is not required. Each element in &lt;code&gt;@tests&lt;/code&gt; will be passed to &lt;code&gt;TAP::Parser::new()&lt;/code&gt; as a &lt;code&gt;source&lt;/code&gt; . See &lt;a href=&quot;parser&quot;&gt;TAP::Parser&lt;/a&gt; for more information.</source>
          <target state="translated">実行する &lt;code&gt;@tests&lt;/code&gt; の配列を受け入れます。通常、これはテストファイルの名前ですが、必須ではありません。 &lt;code&gt;@tests&lt;/code&gt; の各要素は、 &lt;code&gt;source&lt;/code&gt; として &lt;code&gt;TAP::Parser::new()&lt;/code&gt; 渡されます。詳細については、&lt;a href=&quot;parser&quot;&gt;TAP :: Parser&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="153201ceff12f9d62f4b764e4eec8629fe65e3ae" translate="yes" xml:space="preserve">
          <source>Accepts an array of &lt;code&gt;@tests&lt;/code&gt; to be run. This should generally be the names of test files, but this is not required. Each element in &lt;code&gt;@tests&lt;/code&gt; will be passed to &lt;code&gt;TAP::Parser::new()&lt;/code&gt; as a &lt;code&gt;source&lt;/code&gt;. See &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt; for more information.</source>
          <target state="translated">実行する &lt;code&gt;@tests&lt;/code&gt; の配列を受け入れます。これは通常、テストファイルの名前である必要がありますが、必須ではありません。 &lt;code&gt;@tests&lt;/code&gt; の各要素は、 &lt;code&gt;source&lt;/code&gt; として &lt;code&gt;TAP::Parser::new()&lt;/code&gt; 渡されます。詳細については、&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parser&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="415cae88d4078bbe8d508015c3671569a70c4e7e" translate="yes" xml:space="preserve">
          <source>Accepts an incoming socket connect, just as &lt;a href=&quot;http://man.he.net/man2/accept&quot;&gt;accept(2)&lt;/a&gt; does. Returns the packed address if it succeeded, false otherwise. See the example in &lt;a href=&quot;perlipc#Sockets%3A-Client%2FServer-Communication&quot;&gt;&quot;Sockets: Client/Server Communication&quot; in perlipc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://man.he.net/man2/accept&quot;&gt;accept（2）と&lt;/a&gt;同様に、着信ソケット接続を受け入れます。成功した場合はパックされたアドレスを返し、成功しなかった場合はfalseを返します。&lt;a href=&quot;perlipc#Sockets%3A-Client%2FServer-Communication&quot;&gt;perlipcの「ソケット：クライアント/サーバー通信」&lt;/a&gt;の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="2eb4b3520f8d8fe3fca980121310995272cd8962" translate="yes" xml:space="preserve">
          <source>Accepts an incoming socket connect, just as accept(2) does. Returns the packed address if it succeeded, false otherwise. See the example in &lt;a href=&quot;../perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;Sockets: Client/Server Communication in perlipc&lt;/a&gt;.</source>
          <target state="translated">accept（2）と同様に、着信ソケット接続を受け入れます。成功した場合はパックされたアドレスを返し、そうでない場合はfalseを返します。&lt;a href=&quot;../perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;ソケット&lt;/a&gt;の例：perlipcのクライアント/サーバー通信を参照してください。</target>
        </trans-unit>
        <trans-unit id="9fa11f18dc906995a6c93c465d60382e345c0a77" translate="yes" xml:space="preserve">
          <source>Accepts an incoming socket connect, just as accept(2) does. Returns the packed address if it succeeded, false otherwise. See the example in &lt;a href=&quot;perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;Sockets: Client/Server Communication in perlipc&lt;/a&gt;.</source>
          <target state="translated">accept（2）と同様に、着信ソケット接続を受け入れます。成功した場合はパックされたアドレスを返し、そうでない場合はfalseを返します。&lt;a href=&quot;perlipc#Sockets%3a-Client%2fServer-Communication&quot;&gt;ソケット&lt;/a&gt;の例：perlipcのクライアント/サーバー通信を参照してください。</target>
        </trans-unit>
        <trans-unit id="37a976454ef0a6eae01758cd57c59bf29e52a50c" translate="yes" xml:space="preserve">
          <source>Accepts targets for &lt;code&gt;=begin/=for/=end&lt;/code&gt; sections of the POD.</source>
          <target state="translated">PODの &lt;code&gt;=begin/=for/=end&lt;/code&gt; セクションのターゲットを受け入れます。</target>
        </trans-unit>
        <trans-unit id="cede5a1af37a1d62c15ab2a9566e9d886f5d7670" translate="yes" xml:space="preserve">
          <source>Accepts targets for &lt;code&gt;=begin/=for/=end&lt;/code&gt; sections that should be parsed as POD. For details, see &lt;a href=&quot;../perlpodspec#About-Data-Paragraphs&quot;&gt;About Data Paragraphs in perlpodspec&lt;/a&gt;.</source>
          <target state="translated">PODとして解析する必要がある &lt;code&gt;=begin/=for/=end&lt;/code&gt; セクションのターゲットを受け入れます。詳細については、「&lt;a href=&quot;../perlpodspec#About-Data-Paragraphs&quot;&gt;Perlpodspecのデータパラグラフについて&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="851ea1edc0df28d0ff8f9f27b6a32617e9a9daf8" translate="yes" xml:space="preserve">
          <source>Accepts targets for &lt;code&gt;=begin/=for/=end&lt;/code&gt; sections that should be parsed as POD. For details, see &lt;a href=&quot;perlpodspec#About-Data-Paragraphs&quot;&gt;&quot;About Data Paragraphs&quot; in perlpodspec&lt;/a&gt;.</source>
          <target state="translated">PODとして解析する必要がある &lt;code&gt;=begin/=for/=end&lt;/code&gt; セクションのターゲットを受け入れます。詳細については、&lt;a href=&quot;perlpodspec#About-Data-Paragraphs&quot;&gt;perlpodspecの「データ段落&lt;/a&gt;について」を参照してください。</target>
        </trans-unit>
        <trans-unit id="97988ce7469a2ec04985afb61d994b1c11cd933b" translate="yes" xml:space="preserve">
          <source>Access =&amp;gt; $sAccess</source>
          <target state="translated">アクセス=&amp;gt; $ sAccess</target>
        </trans-unit>
        <trans-unit id="f6af85a2542ec066bdb276d6d663ab04f9bea612" translate="yes" xml:space="preserve">
          <source>Access =&amp;gt; $uAccess</source>
          <target state="translated">アクセス=&amp;gt; $ uAccess</target>
        </trans-unit>
        <trans-unit id="7e56694c4d8d029e1bdf7a642cc8826a85758929" translate="yes" xml:space="preserve">
          <source>Access Perl configuration information</source>
          <target state="translated">Perl の設定情報にアクセスする</target>
        </trans-unit>
        <trans-unit id="8347e5dd48478a10f6aa983449d4b21d1a1af03b" translate="yes" xml:space="preserve">
          <source>Access and Printing</source>
          <target state="translated">アクセスと印刷</target>
        </trans-unit>
        <trans-unit id="6e5e899f8f49475c30613c0d5e03d1268e31be2c" translate="yes" xml:space="preserve">
          <source>Access and Printing of a HASH OF ARRAYS</source>
          <target state="translated">ハッシュオブアレーズのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="0a3d910a71354dc1a13d0c6e24e7384a561b0108" translate="yes" xml:space="preserve">
          <source>Access and Printing of a HASH OF HASHES</source>
          <target state="translated">ハッシュオブハッシュのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="7eae78c7526db834fa9958c243fe41a5cb62ea03" translate="yes" xml:space="preserve">
          <source>Access and Printing of an ARRAY OF ARRAYS</source>
          <target state="translated">array of arrraysのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="5c93728a9e35642c958c51c0f97be500a59df202" translate="yes" xml:space="preserve">
          <source>Access and Printing of an ARRAY OF HASHES</source>
          <target state="translated">アレイオブハッシュのアクセスと印刷</target>
        </trans-unit>
        <trans-unit id="f42ea96011d2554db1787fd6d4c92a4571864cb4" translate="yes" xml:space="preserve">
          <source>Access methods correspond to the underlying C macros for field access, usually with the leading &quot;class indication&quot; prefix removed (Sv, Av, Hv, ...). The leading prefix is only left in cases where its removal would cause a clash in method name. For example, &lt;code&gt;GvREFCNT&lt;/code&gt; stays as-is since its abbreviation would clash with the &quot;superclass&quot; method &lt;code&gt;REFCNT&lt;/code&gt; (corresponding to the C function &lt;code&gt;SvREFCNT&lt;/code&gt; ).</source>
          <target state="translated">アクセスメソッドは、フィールドアクセスの基本的なCマクロに対応し、通常は先頭の「クラス表示」プレフィックスが削除されています（Sv、Av、Hvなど）。先頭のプレフィックスは、その削除によってメソッド名の衝突が発生する場合にのみ残されます。たとえば、 &lt;code&gt;GvREFCNT&lt;/code&gt; は、「スーパークラス」メソッド &lt;code&gt;REFCNT&lt;/code&gt; （C関数 &lt;code&gt;SvREFCNT&lt;/code&gt; に対応）と競合するため、そのままです。</target>
        </trans-unit>
        <trans-unit id="9efb96c27e44ebf09b5de1315ff44057610d7071" translate="yes" xml:space="preserve">
          <source>Access methods correspond to the underlying C macros for field access, usually with the leading &quot;class indication&quot; prefix removed (Sv, Av, Hv, ...). The leading prefix is only left in cases where its removal would cause a clash in method name. For example, &lt;code&gt;GvREFCNT&lt;/code&gt; stays as-is since its abbreviation would clash with the &quot;superclass&quot; method &lt;code&gt;REFCNT&lt;/code&gt; (corresponding to the C function &lt;code&gt;SvREFCNT&lt;/code&gt;).</source>
          <target state="translated">アクセス方法は、フィールドアクセスの基礎となるCマクロに対応し、通常、先頭の「クラス表示」プレフィックスが削除されます（Sv、Av、Hvなど）。先頭のプレフィックスは、削除するとメソッド名が衝突する場合にのみ残されます。たとえば、 &lt;code&gt;GvREFCNT&lt;/code&gt; は、その省略形が「スーパークラス」メソッド &lt;code&gt;REFCNT&lt;/code&gt; （C関数 &lt;code&gt;SvREFCNT&lt;/code&gt; に対応）と衝突するため、現状のままです。</target>
        </trans-unit>
        <trans-unit id="add7e6bb00f6c276fc0702f5d9311fd702f4d0cd" translate="yes" xml:space="preserve">
          <source>Access methods correspond to the underlying C structure field names, with the leading &quot;class indication&quot; prefix (&lt;code&gt;&quot;op_&quot;&lt;/code&gt; ) removed.</source>
          <target state="translated">アクセスメソッドは、基礎となるC構造体フィールド名に対応し、先頭の「クラス表示」プレフィックス（ &lt;code&gt;&quot;op_&quot;&lt;/code&gt; ）が削除されています。</target>
        </trans-unit>
        <trans-unit id="82922d6d239bf81a906ba51a449f669156de40f1" translate="yes" xml:space="preserve">
          <source>Access methods correspond to the underlying C structure field names, with the leading &quot;class indication&quot; prefix (&lt;code&gt;&quot;op_&quot;&lt;/code&gt;) removed.</source>
          <target state="translated">アクセスメソッドは、基になるC構造体のフィールド名に対応し、先頭の「クラス表示」プレフィックス（ &lt;code&gt;&quot;op_&quot;&lt;/code&gt; ）が削除されています。</target>
        </trans-unit>
        <trans-unit id="9396a41f14cddbeb41d4b7aa1b84d15e3d72d6c2" translate="yes" xml:space="preserve">
          <source>Access permissions are mapped onto VOS access-control list changes. (VOS)</source>
          <target state="translated">アクセス許可は、VOSのアクセス制御リストの変更にマッピングされます。(VOS)</target>
        </trans-unit>
        <trans-unit id="4c6d1814a4ba9c61a3ee7ec315197dda1812fb41" translate="yes" xml:space="preserve">
          <source>Access the SV at offset &lt;code&gt;po&lt;/code&gt; in the saved current pad in the given context block structure (can be used as an lvalue).</source>
          <target state="translated">指定されたコンテキストブロック構造で保存された現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; でSVにアクセスします（左辺値として使用できます）。</target>
        </trans-unit>
        <trans-unit id="cf06121dd11c83b8ba81397ecad6cc2b95e65336" translate="yes" xml:space="preserve">
          <source>Access the SV at offset po in the saved current pad in the given context block structure (can be used as an lvalue).</source>
          <target state="translated">指定されたコンテキストブロック構造体に保存されている現在のパッドのオフセット po にある SV にアクセスします(lvalue として使用できます)。</target>
        </trans-unit>
        <trans-unit id="2cb44963f6bed203bb471252102ea353cd9644e0" translate="yes" xml:space="preserve">
          <source>Access the lines of a disk file via a Perl array</source>
          <target state="translated">Perl の配列を使ってディスクファイルの行にアクセスする</target>
        </trans-unit>
        <trans-unit id="dfa61e115e0e8ce23ca07250a4a3499d896cdbc1" translate="yes" xml:space="preserve">
          <source>Access to Unicode character names and named character sequences; also define character names</source>
          <target state="translated">Unicode 文字名と名前付き文字列へのアクセス;文字名の定義も可能</target>
        </trans-unit>
        <trans-unit id="3f2a46103156b0b5a62f34c4352c1666092f35bc" translate="yes" xml:space="preserve">
          <source>Access to lexicals that change over time--like those in the &lt;code&gt;for&lt;/code&gt; loop above, basically aliases to elements from the surrounding lexical scopes-- only works with anonymous subs, not with named subroutines. Generally said, named subroutines do not nest properly and should only be declared in the main package scope.</source>
          <target state="translated">時間の経過とともに変化するレキシカルへのアクセス（上記の &lt;code&gt;for&lt;/code&gt; ループのように、基本的には周囲のレキシカルスコープからの要素へのエイリアス）は、匿名サブルーチンでのみ機能し、名前付きサブルーチンでは機能しません。一般的に言って、名前付きサブルーチンは適切にネストせず、メインパッケージスコープでのみ宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bc448fbe13d49ff8ac45ad2ec5aee25fed2364d" translate="yes" xml:space="preserve">
          <source>Accessing .tar.Z files</source>
          <target state="translated">.tar.Zファイルへのアクセス</target>
        </trans-unit>
        <trans-unit id="c5656ffc833d5bac0703673d7cf0135c7d41a0d7" translate="yes" xml:space="preserve">
          <source>Accessing Formatting Internals</source>
          <target state="translated">書式設定の内部へのアクセス</target>
        </trans-unit>
        <trans-unit id="1370d87d951a33ab05354cde2d7a32967a2dbeb2" translate="yes" xml:space="preserve">
          <source>Accessing documentation</source>
          <target state="translated">ドキュメントへのアクセス</target>
        </trans-unit>
        <trans-unit id="e54a40f7d6dbbb802431fdba39190e9b3cbe3ecd" translate="yes" xml:space="preserve">
          <source>Accessing socket options</source>
          <target state="translated">ソケットオプションへのアクセス</target>
        </trans-unit>
        <trans-unit id="ee8cacdba63cbccd984c19db609590e2c60f68e6" translate="yes" xml:space="preserve">
          <source>Accessor functions are available for all existing object hash keys and should be used instead of directly accessing the internal hash keys. The reason for this is that Math::BigInt itself has a pluggable interface which permits it to support different storage methods.</source>
          <target state="translated">アクセサ関数は、既存のすべてのオブジェクトのハッシュキーに対して利用可能であり、内部のハッシュキーに直接アクセスするのではなく、使用すべきです。その理由は、Math::BigInt 自体が異なるストレージメソッドをサポートすることを可能にするプラグ可能なインターフェースを持っているからです。</target>
        </trans-unit>
        <trans-unit id="f5b0e226ed894764db92e76b6c1f1203c0b805bb" translate="yes" xml:space="preserve">
          <source>Accessors</source>
          <target state="translated">Accessors</target>
        </trans-unit>
        <trans-unit id="e401a3944ad3f6376d340de647f40b7e6ced2483" translate="yes" xml:space="preserve">
          <source>According to the &lt;b&gt;Test::More&lt;/b&gt; documentation, it is recommended to run &lt;code&gt;use_ok()&lt;/code&gt; inside a &lt;code&gt;BEGIN&lt;/code&gt; block, so functions are exported at compile-time and prototypes are properly honored.</source>
          <target state="translated">&lt;b&gt;Test :: Moreの&lt;/b&gt;ドキュメントによると、 &lt;code&gt;BEGIN&lt;/code&gt; ブロック内で &lt;code&gt;use_ok()&lt;/code&gt; を実行することをお勧めします。これにより、関数はコンパイル時にエクスポートされ、プロトタイプが適切に尊重されます。</target>
        </trans-unit>
        <trans-unit id="c22eaa0601273fc83a6938a3e6df6517eb7bf99a" translate="yes" xml:space="preserve">
          <source>Accuracy (significant digits)</source>
          <target state="translated">精度(有効桁</target>
        </trans-unit>
        <trans-unit id="4bc2c6535b52b04314dc544d8a82eac93deb00cf" translate="yes" xml:space="preserve">
          <source>Accuracy A</source>
          <target state="translated">精度A</target>
        </trans-unit>
        <trans-unit id="938afbd35a75ae9b5871a66f02d0250f1479aaac" translate="yes" xml:space="preserve">
          <source>Accuracy vs. Precision</source>
          <target state="translated">精度と精度</target>
        </trans-unit>
        <trans-unit id="3e804ac1bc11e330fa5eacd1be133ab843f79bee" translate="yes" xml:space="preserve">
          <source>Accustomed &lt;b&gt;awk&lt;/b&gt; users should take special note of the following:</source>
          <target state="translated">慣れている&lt;b&gt;awk&lt;/b&gt;ユーザーは、次のことに特に注意してください。</target>
        </trans-unit>
        <trans-unit id="082af44e6d89682179d27fdfd34277a7e0c2c9af" translate="yes" xml:space="preserve">
          <source>Acknowledgement</source>
          <target state="translated">Acknowledgement</target>
        </trans-unit>
        <trans-unit id="b0ebcfe59f276beb7f6238d812ac61ce48d3d9c0" translate="yes" xml:space="preserve">
          <source>Acknowledgements</source>
          <target state="translated">Acknowledgements</target>
        </trans-unit>
        <trans-unit id="5d9540ff93a75d47409d6a0aa37491da117ecdf8" translate="yes" xml:space="preserve">
          <source>Acknowledgments</source>
          <target state="translated">Acknowledgments</target>
        </trans-unit>
        <trans-unit id="708327daa641b57f7797d675f864c6465f65ebf5" translate="yes" xml:space="preserve">
          <source>Acorn RISC OS</source>
          <target state="translated">どんぐりRISCOS</target>
        </trans-unit>
        <trans-unit id="8661bdb9b88159cdbca0d1b472228de45e5e9630" translate="yes" xml:space="preserve">
          <source>Actions in current file (keys are line numbers). The values are strings that have the sprintf(3) format &lt;code&gt;(&quot;%s\000%s&quot;, breakcondition, actioncode)&lt;/code&gt; .</source>
          <target state="translated">現在のファイル内のアクション（キーは行番号です）。値は、sprintf（3）形式 &lt;code&gt;(&quot;%s\000%s&quot;, breakcondition, actioncode)&lt;/code&gt; 文字列です。</target>
        </trans-unit>
        <trans-unit id="7fcdbe2472b2255ea44bd3cae717a9eebf9b772b" translate="yes" xml:space="preserve">
          <source>Actions in current file (keys are line numbers). The values are strings that have the sprintf(3) format &lt;code&gt;(&quot;%s\000%s&quot;, breakcondition, actioncode)&lt;/code&gt;.</source>
          <target state="translated">現在のファイルのアクション（キーは行番号です）。値は、sprintf（3）形式 &lt;code&gt;(&quot;%s\000%s&quot;, breakcondition, actioncode)&lt;/code&gt; 文字列です。</target>
        </trans-unit>
        <trans-unit id="74456291abea501ae7538be3d3218d24479cf1b8" translate="yes" xml:space="preserve">
          <source>Actions, watch variables, stack traces etc.: on the TODO list.</source>
          <target state="translated">アクション、ウォッチ変数、スタックトレースなど:TODOリストにある。</target>
        </trans-unit>
        <trans-unit id="0e67e479302a0fbdd5f8f5323bb053fb5c4640b0" translate="yes" xml:space="preserve">
          <source>ActiveState's cross-platform (as of October 2004, that's Windows, Linux, and Solaris), multi-language IDE has Perl support, including a regular expression debugger and remote debugging.</source>
          <target state="translated">ActiveState のクロスプラットフォーム (2004 年 10 月現在、Windows、Linux、Solaris)、多言語 IDE は Perl をサポートしており、正規表現デバッガやリモートデバッグなどの機能を備えています。</target>
        </trans-unit>
        <trans-unit id="3c54dc62dfe34bf8e3127c0ce1e38a91208c3d94" translate="yes" xml:space="preserve">
          <source>Acts like &lt;code&gt;FB_PERLQQ&lt;/code&gt; but U+</source>
          <target state="translated">&lt;code&gt;FB_PERLQQ&lt;/code&gt; のように機能しますが、U +</target>
        </trans-unit>
        <trans-unit id="3e5206894de994df5b433d801d3d018a747731e7" translate="yes" xml:space="preserve">
          <source>Acts like &lt;code&gt;pathify&lt;/code&gt;, but insures the returned path uses Unix syntax.</source>
          <target state="translated">&lt;code&gt;pathify&lt;/code&gt; のように機能しますが、返されるパスがUnix構文を使用することを保証します。</target>
        </trans-unit>
        <trans-unit id="25e47aa6fb1a8cefdd723523afa78155b3ebed86" translate="yes" xml:space="preserve">
          <source>Acts like &lt;code&gt;pathify&lt;/code&gt;, but insures the returned path uses VMS syntax.</source>
          <target state="translated">&lt;code&gt;pathify&lt;/code&gt; のように機能しますが、返されるパスがVMS構文を使用することを保証します。</target>
        </trans-unit>
        <trans-unit id="548322587aa8642fc346684844907ab3ffec74e4" translate="yes" xml:space="preserve">
          <source>Actual math is done by using the class defined with &lt;code&gt;with =&amp;gt; Class;&lt;/code&gt; (which defaults to BigInts) to represent the mantissa and exponent.</source>
          <target state="translated">実際の計算は &lt;code&gt;with =&amp;gt; Class;&lt;/code&gt; 定義されたクラスを使用して行われます。（デフォルトはBigInts）、仮数と指数を表します。</target>
        </trans-unit>
        <trans-unit id="defa153aecf01309cb026d878c1991031baa4a07" translate="yes" xml:space="preserve">
          <source>Actually &lt;code&gt;Term::ReadLine&lt;/code&gt; can use some other package, that will support a richer set of commands.</source>
          <target state="translated">実際、 &lt;code&gt;Term::ReadLine&lt;/code&gt; は他のパッケージを使用でき、より豊富なコマンドセットをサポートします。</target>
        </trans-unit>
        <trans-unit id="3803c01d8a976c5bf1f723681cc4bf39bad12043" translate="yes" xml:space="preserve">
          <source>Actually Perl will not</source>
          <target state="translated">実際にはPerlは</target>
        </trans-unit>
        <trans-unit id="795eded018f6ab011486134b18f32e5ab2a7c100" translate="yes" xml:space="preserve">
          <source>Actually performs the output check testing the tests, comparing the data (with &lt;code&gt;eq&lt;/code&gt; ) that we have captured from &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt; against what was declared with &lt;code&gt;test_out&lt;/code&gt; and &lt;code&gt;test_err&lt;/code&gt; .</source>
          <target state="translated">実際にテストをテストする出力チェックを実行し、&lt;a href=&quot;../builder&quot;&gt;Test :: Builder&lt;/a&gt;からキャプチャしたデータ（ &lt;code&gt;eq&lt;/code&gt; を使用）を &lt;code&gt;test_out&lt;/code&gt; および &lt;code&gt;test_err&lt;/code&gt; で宣言されたものと比較します。</target>
        </trans-unit>
        <trans-unit id="9ce626e0ac60b7664d00caf1f10ac16f4d3c195a" translate="yes" xml:space="preserve">
          <source>Actually performs the output check testing the tests, comparing the data (with &lt;code&gt;eq&lt;/code&gt;) that we have captured from &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; against what was declared with &lt;code&gt;test_out&lt;/code&gt; and &lt;code&gt;test_err&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builder&lt;/a&gt;からキャプチャしたデータ（ &lt;code&gt;eq&lt;/code&gt; を使用）を &lt;code&gt;test_out&lt;/code&gt; および &lt;code&gt;test_err&lt;/code&gt; で宣言されたものと比較して、テストをテストする出力チェックを実際に実行します。</target>
        </trans-unit>
        <trans-unit id="6f88040d5de372b8d0dd6ff348f68d75945e5e13" translate="yes" xml:space="preserve">
          <source>Actually, Apple does not follow the Unicode NFD standard since not all character ranges are decomposed. The claim is that this avoids problems with round trip conversions from old Mac text encodings. See &lt;a href=&quot;Encode::UTF8Mac&quot;&gt;Encode::UTF8Mac&lt;/a&gt; for details.</source>
          <target state="translated">実際、すべての文字範囲が分解されているわけではないため、AppleはUnicodeNFD標準に準拠していません。これにより、古いMacテキストエンコーディングからのラウンドトリップ変換の問題が回避されるという主張があります。詳細については、&lt;a href=&quot;Encode::UTF8Mac&quot;&gt;Encode :: UTF8Mac&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5e55c0ee05ca269c1127b8a0393a10c58d229a08" translate="yes" xml:space="preserve">
          <source>Actually, on Mac OS, the &lt;code&gt;getcwd()&lt;/code&gt; , &lt;code&gt;fastgetcwd()&lt;/code&gt; and &lt;code&gt;fastcwd()&lt;/code&gt; functions are all aliases for the &lt;code&gt;cwd()&lt;/code&gt; function, which, on Mac OS, calls `pwd`. Likewise, the &lt;code&gt;abs_path()&lt;/code&gt; function is an alias for &lt;code&gt;fast_abs_path()&lt;/code&gt; .</source>
          <target state="translated">実際には、Mac OSの上、 &lt;code&gt;getcwd()&lt;/code&gt; 、 &lt;code&gt;fastgetcwd()&lt;/code&gt; と &lt;code&gt;fastcwd()&lt;/code&gt; 関数は、のために、すべての別名である &lt;code&gt;cwd()&lt;/code&gt; 、Mac OSでは、 `pwd`は呼び出す関数、。同様に、 &lt;code&gt;abs_path()&lt;/code&gt; 関数は &lt;code&gt;fast_abs_path()&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="2f828efd7d8d25d8d2437834055d546543161b8e" translate="yes" xml:space="preserve">
          <source>Actually, on Mac OS, the &lt;code&gt;getcwd()&lt;/code&gt;, &lt;code&gt;fastgetcwd()&lt;/code&gt; and &lt;code&gt;fastcwd()&lt;/code&gt; functions are all aliases for the &lt;code&gt;cwd()&lt;/code&gt; function, which, on Mac OS, calls `pwd`. Likewise, the &lt;code&gt;abs_path()&lt;/code&gt; function is an alias for &lt;code&gt;fast_abs_path()&lt;/code&gt;.</source>
          <target state="translated">実際には、Mac OSの上、 &lt;code&gt;getcwd()&lt;/code&gt; 、 &lt;code&gt;fastgetcwd()&lt;/code&gt; と &lt;code&gt;fastcwd()&lt;/code&gt; 関数は、のために、すべての別名である &lt;code&gt;cwd()&lt;/code&gt; 、Mac OSでは、 `pwd`は呼び出す関数、。同様に、 &lt;code&gt;abs_path()&lt;/code&gt; 関数は &lt;code&gt;fast_abs_path()&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="db3073222c40a74ba3591ee6ba65b3b3cd91207d" translate="yes" xml:space="preserve">
          <source>Actually, the log output of</source>
          <target state="translated">実際には、ログ出力の</target>
        </trans-unit>
        <trans-unit id="64a640de411740b3998c2d6a6e47de7a59b836d2" translate="yes" xml:space="preserve">
          <source>Actually, the log output of &lt;a href=&quot;http://man.he.net/man1/pod2ipf&quot;&gt;pod2ipf(1)&lt;/a&gt; during the step 6 gives a very detailed info about which modules are loaded from which place; so you may use it as an additional verification tool.</source>
          <target state="translated">実際、ステップ6での&lt;a href=&quot;http://man.he.net/man1/pod2ipf&quot;&gt;pod2ipf（1）&lt;/a&gt;のログ出力は、どのモジュールがどの場所からロードされたかについての非常に詳細な情報を提供します。したがって、追加の検証ツールとして使用できます。</target>
        </trans-unit>
        <trans-unit id="af7244e5a9d564e8f0d5e7e9d10e38f4ccd63f70" translate="yes" xml:space="preserve">
          <source>Actually, they don't. All C operators that Perl copies have the same precedence in Perl as they do in C. The problem is with operators that C doesn't have, especially functions that give a list context to everything on their right, eg. print, chmod, exec, and so on. Such functions are called &quot;list operators&quot; and appear as such in the precedence table in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">実際にはそうではありません。PerlがコピーするすべてのC演算子は、PerlでもCと同じ優先順位を持っています。問題は、Cにない演算子、特に右側のすべてにリストコンテキストを与える関数にあります。print、chmod、execなど。このような関数は「リスト演算子」と呼ばれ、&lt;a href=&quot;perlop&quot;&gt;perlopの&lt;/a&gt;優先順位表にそのように表示されます。</target>
        </trans-unit>
        <trans-unit id="07d8d521acda78914bf8936bc58119c26500077c" translate="yes" xml:space="preserve">
          <source>Actually, this was generated by a particular set of options. You can control the formatting of each column, whether you prefer wide or fat, hex or decimal, leading zeroes or whatever.</source>
          <target state="translated">実は、これは特定のオプションのセットによって生成されたものです。各列の書式設定を制御できます、幅広か太いか、16進数か10進数か、先頭のゼロか何かを好むかどうかなどです。</target>
        </trans-unit>
        <trans-unit id="053a69cc613575e54728e4468a4f2f77a1d85f37" translate="yes" xml:space="preserve">
          <source>Adam Kennedy</source>
          <target state="translated">アダムケネディ</target>
        </trans-unit>
        <trans-unit id="860c250cdfa0ae37812255641a707082591aa037" translate="yes" xml:space="preserve">
          <source>Adam Kennedy &amp;lt;adamk@cpan.org&amp;gt;</source>
          <target state="translated">Adam Kennedy &amp;lt;adamk@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="26df0dc623b688e391494fde447ffec8a4ad7688" translate="yes" xml:space="preserve">
          <source>Adam Kennedy pointed out that &lt;code&gt;exit()&lt;/code&gt; causes problems on Windows where this script ends up with a .bat extension</source>
          <target state="translated">Adam Kennedyは、 &lt;code&gt;exit()&lt;/code&gt; がWindowsで問題を引き起こし、このスクリプトが.bat拡張子で終わることを指摘しました。</target>
        </trans-unit>
        <trans-unit id="59df5078ee8230620699668c2d6c69e2d9333374" translate="yes" xml:space="preserve">
          <source>Adam Kennedy pointed out that exit() causes problems on Windows where this script ends up with a .bat extension</source>
          <target state="translated">アダム・ケネディは、 exit()は Windows 上でこのスクリプトが .bat の拡張子で終わる問題を引き起こすと指摘しています。</target>
        </trans-unit>
        <trans-unit id="1e2354baf0563b5f6691f5eeff3c433c1c0e8b12" translate="yes" xml:space="preserve">
          <source>Adam Kennedy wrote &lt;a href=&quot;YAML::Tiny&quot;&gt;YAML::Tiny&lt;/a&gt; which provided the template and many of the YAML matching regular expressions for this module.</source>
          <target state="translated">&lt;a href=&quot;YAML::Tiny&quot;&gt;AdamKennedy&lt;/a&gt;がYAML :: Tinyを作成しました。これは、このモジュールのテンプレートとYAMLマッチング正規表現の多くを提供します。</target>
        </trans-unit>
        <trans-unit id="1a5c118dabaa69a69c89ab79443c5334f9b230a2" translate="yes" xml:space="preserve">
          <source>Adam Kennedy wrote &lt;a href=&quot;http://search.cpan.org/perldoc/YAML::Tiny&quot;&gt;YAML::Tiny&lt;/a&gt; which provided the template and many of the YAML matching regular expressions for this module.</source>
          <target state="translated">Adam Kennedyが作成した&lt;a href=&quot;http://search.cpan.org/perldoc/YAML::Tiny&quot;&gt;YAML :: Tiny&lt;/a&gt;は、このモジュールのテンプレートと多くのYAMLマッチング正規表現を提供しました。</target>
        </trans-unit>
        <trans-unit id="87ca31f47d6b4fa489a87a9623f9489457ae7a2d" translate="yes" xml:space="preserve">
          <source>Adapted from Sys::Hostname by David Sundstrom &amp;lt;</source>
          <target state="translated">DavidSundstromによるSys :: Hostnameからの適合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="71fa483aae87548852e70b6939f5558689bdd714" translate="yes" xml:space="preserve">
          <source>Adapted from a suggestion by Dan Muey</source>
          <target state="translated">Dan Muey氏の提案に基づくものです。</target>
        </trans-unit>
        <trans-unit id="61cc55aa0453184734c3fa0b621eda6fa874bd83" translate="yes" xml:space="preserve">
          <source>Add</source>
          <target state="translated">Add</target>
        </trans-unit>
        <trans-unit id="bac28a1890b03ac016be9f9de8d1c17394eeee83" translate="yes" xml:space="preserve">
          <source>Add '#line' declarations to the output based on the line and file locations of the original code.</source>
          <target state="translated">元のコードの行とファイルの位置に基づいて、出力に「#line」宣言を追加します。</target>
        </trans-unit>
        <trans-unit id="c4e7cfdfcf41d796fe22ef22535d39bf89e10e73" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the hyperlinks (as defined by &lt;code&gt;L&amp;lt;&amp;gt;&lt;/code&gt; ) of the current POD. They consist of a 2-item array: line number and &lt;code&gt;Pod::Hyperlink&lt;/code&gt; object.</source>
          <target state="translated">現在のPODの（引数が指定されている場合）追加し、（ &lt;code&gt;L&amp;lt;&amp;gt;&lt;/code&gt; 定義されている）ハイパーリンクを取得します。これらは、2項目の配列（行番号と &lt;code&gt;Pod::Hyperlink&lt;/code&gt; オブジェクト）で構成されています。</target>
        </trans-unit>
        <trans-unit id="593bc3c347e611284226398e8eb5446a2cdf167c" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the index entries (as defined by &lt;code&gt;X&amp;lt;&amp;gt;&lt;/code&gt; ) of the current POD. They consist of plain text, each piece of whitespace is collapsed to a single blank.</source>
          <target state="translated">（引数が指定されている場合）追加し、現在のPODの（ &lt;code&gt;X&amp;lt;&amp;gt;&lt;/code&gt; 定義されている）インデックスエントリを取得します。それらはプレーンテキストで構成され、空白の各部分は1つの空白に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="1fe12bc15fbb10fe94bc372bbfe93ad381dc4d9d" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the index entries (as defined by &lt;code&gt;X&amp;lt;&amp;gt;&lt;/code&gt;) of the current POD. They consist of plain text, each piece of whitespace is collapsed to a single blank.</source>
          <target state="translated">（引数が指定されている場合）現在のPODのインデックスエントリ（ &lt;code&gt;X&amp;lt;&amp;gt;&lt;/code&gt; 定義されている）を追加および取得します。それらはプレーンテキストで構成され、空白の各部分は1つの空白に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="7205abf0d37c1a800710d7689075b8b7e0097f10" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the nodes (as defined by &lt;code&gt;=headX&lt;/code&gt; and &lt;code&gt;=item&lt;/code&gt; ) of the current POD. The nodes are returned in the order of their occurrence. They consist of plain text, each piece of whitespace is collapsed to a single blank.</source>
          <target state="translated">（引数が指定されている場合）追加し、現在のPOD のノード（ &lt;code&gt;=headX&lt;/code&gt; および &lt;code&gt;=item&lt;/code&gt; で定義されている）を取得します。ノードは発生順に返されます。それらはプレーンテキストで構成され、空白の各部分は1つの空白に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="e9849254645fc0214d84ddc69b97e054d149bcbc" translate="yes" xml:space="preserve">
          <source>Add (if argument specified) and retrieve the nodes (as defined by &lt;code&gt;=headX&lt;/code&gt; and &lt;code&gt;=item&lt;/code&gt;) of the current POD. The nodes are returned in the order of their occurrence. They consist of plain text, each piece of whitespace is collapsed to a single blank.</source>
          <target state="translated">（引数が指定されている場合）現在のPODのノード（ &lt;code&gt;=headX&lt;/code&gt; および &lt;code&gt;=item&lt;/code&gt; で定義されている）を追加および取得します。ノードは発生順に返されます。それらはプレーンテキストで構成され、空白の各部分は1つの空白に折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="874122d1d027ce488479a1cec7aca152094478e4" translate="yes" xml:space="preserve">
          <source>Add .USESHELL target for dmake.</source>
          <target state="translated">dmakeに.USESHELLターゲットを追加しました。</target>
        </trans-unit>
        <trans-unit id="d7fd295b806f9c0832ab6e0fa24fc58d699dd9d2" translate="yes" xml:space="preserve">
          <source>Add .err files corresponding to each .c file.</source>
          <target state="translated">各.cファイルに対応する.errファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="74231505113c8782edaa10ddf555c5da9d24dda6" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;#TERMINOLOGY&quot;&gt;&quot;TERMINOLOGY&quot;&lt;/a&gt; section to explain certain terms that may be ambiguous.</source>
          <target state="translated">&lt;a href=&quot;#TERMINOLOGY&quot;&gt;「TERMINOLOGY」&lt;/a&gt;セクションを追加して、あいまいな可能性のある特定の用語を説明します。</target>
        </trans-unit>
        <trans-unit id="a2071ab1226f891c60e567774af03d596514feaf" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;#keywords&quot;&gt;&quot;keywords&quot;&lt;/a&gt; field as a means to aid searching distributions.</source>
          <target state="translated">分布の検索を支援する手段として&lt;a href=&quot;#keywords&quot;&gt;「キーワード」&lt;/a&gt;フィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="971e44a3c3bfac911c7f36aa74a2becf0b62b98e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;index&lt;/code&gt; field as a compliment to &lt;a href=&quot;#no_index&quot;&gt;&quot;no_index&quot;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#no_index&quot;&gt;「no_index」&lt;/a&gt;への補足として &lt;code&gt;index&lt;/code&gt; フィールドを追加します</target>
        </trans-unit>
        <trans-unit id="ea6a5860866c436fec9d4ae108b1b47657c1c2fa" translate="yes" xml:space="preserve">
          <source>Add Collate Transform magic to an SV if it doesn't already have it. If the flags contain &lt;code&gt;SV_GMAGIC&lt;/code&gt;, it handles get-magic.</source>
          <target state="translated">照合変換魔法がまだない場合は、SVに追加します。フラグに &lt;code&gt;SV_GMAGIC&lt;/code&gt; が含まれている場合は、get-magicを処理します。</target>
        </trans-unit>
        <trans-unit id="c4281d681d2b8d4904dd68ad15e4dae704a1bf89" translate="yes" xml:space="preserve">
          <source>Add Collate Transform magic to an SV if it doesn't already have it. If the flags contain SV_GMAGIC, it handles get-magic.</source>
          <target state="translated">Collate Transformマジックがまだない場合、SVにCollate Transformマジックを追加します。フラグに SV_GMAGIC が含まれている場合は、get-magic を処理します。</target>
        </trans-unit>
        <trans-unit id="047c96ad9c325d237f1a6a46bb8af3410dff2f9a" translate="yes" xml:space="preserve">
          <source>Add MAXLINELENGTH for dmake before all the constants are output.</source>
          <target state="translated">すべての定数が出力される前に、dmakeにMAXLINELENGTHを追加します。</target>
        </trans-unit>
        <trans-unit id="94f0a7f38a5195aa6f33946dfa8058f9d2a857a9" translate="yes" xml:space="preserve">
          <source>Add MM_Unix_VERSION.</source>
          <target state="translated">MM_Unix_VERSIONを追加しました。</target>
        </trans-unit>
        <trans-unit id="eca289eb94f4122a1cb7f5b2bdff3d6769040fa8" translate="yes" xml:space="preserve">
          <source>Add MM_Win32_VERSION.</source>
          <target state="translated">MM_Win32_VERSIONを追加しました。</target>
        </trans-unit>
        <trans-unit id="8460c3bd39da428c04164ab6f8557a6dee2cb9dc" translate="yes" xml:space="preserve">
          <source>Add Netware macros initialized above to the Makefile.</source>
          <target state="translated">上記で初期化したNetwareマクロをMakefileに追加します。</target>
        </trans-unit>
        <trans-unit id="b10d0c59d7d5f8f07519cfec5e7d10053270677d" translate="yes" xml:space="preserve">
          <source>Add Netware macros.</source>
          <target state="translated">ネットウェアのマクロを追加します。</target>
        </trans-unit>
        <trans-unit id="7a597e48edd2e108c64afde5e11638f77279428f" translate="yes" xml:space="preserve">
          <source>Add PERL_VMS, MM_VMS_REVISION and MM_VMS_VERSION.</source>
          <target state="translated">PERL_VMS、MM_VMS_REVISION、MM_VMS_VERSIONを追加。</target>
        </trans-unit>
        <trans-unit id="93d51f351ca51a56a5dbfcfefb634460272d4f03" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;TYPEMAP&lt;/code&gt; entry to the typemap.</source>
          <target state="translated">&lt;code&gt;TYPEMAP&lt;/code&gt; エントリをタイプマップに追加します。</target>
        </trans-unit>
        <trans-unit id="fb8b21b933335774c30773ac556f87eff4a5d7e6" translate="yes" xml:space="preserve">
          <source>Add a TAP::Parser to the multiplexer. &lt;code&gt;$stash&lt;/code&gt; is an optional opaque reference that will be returned from &lt;code&gt;&lt;a href=&quot;../../functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; along with the parser and the next result.</source>
          <target state="translated">マルチプレクサにTAP :: Parserを追加します。 &lt;code&gt;$stash&lt;/code&gt; は、パーサーおよび次の結果とともに &lt;code&gt;&lt;a href=&quot;../../functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; から返されるオプションの不透明な参照です。</target>
        </trans-unit>
        <trans-unit id="271cdeec599cca9e4b5c13aee063b654b7004d0b" translate="yes" xml:space="preserve">
          <source>Add a TAP::Parser to the multiplexer. &lt;code&gt;$stash&lt;/code&gt; is an optional opaque reference that will be returned from &lt;code&gt;next&lt;/code&gt; along with the parser and the next result.</source>
          <target state="translated">TAP :: Parserをマルチプレクサに追加します。 &lt;code&gt;$stash&lt;/code&gt; はオプションの不透明な参照であり、パーサーと次の結果とともに &lt;code&gt;next&lt;/code&gt; から返されます。</target>
        </trans-unit>
        <trans-unit id="9b79cb95223b1cd3ab37a1947c8b10858f53f09a" translate="yes" xml:space="preserve">
          <source>Add a callback that will be called every time a context is released. The callback will receive the released context as its only argument.</source>
          <target state="translated">コンテキストがリリースされるたびに呼び出されるコールバックを追加します。コールバックは、リリースされたコンテキストを唯一の引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="2b1d47693ec8eb3c1137e6c1d276ef0c253e2906" translate="yes" xml:space="preserve">
          <source>Add a callback that will be called every time a new context is created. The callback will receive the newly created context as its only argument.</source>
          <target state="translated">新しいコンテキストが作成されるたびに呼び出されるコールバックを追加します。コールバックは、新しく作成されたコンテキストを唯一の引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="4041e46a5d6433fdece7a493dd0a395d2127824f" translate="yes" xml:space="preserve">
          <source>Add a callback that will be called every time a subtest is going to be run. The callback will receive the subtest name, coderef, and any arguments.</source>
          <target state="translated">サブテストが実行されるたびに呼び出されるコールバックを追加します。コールバックはサブテスト名、coderef、引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="d62fdd818bdb4717eace512402ac80e7984a5c51" translate="yes" xml:space="preserve">
          <source>Add a callback that will be called every time someone tries to acquire a context. It gets a single argument, a reference of the hash of parameters being used the construct the context. This is your chance to change the parameters by directly altering the hash.</source>
          <target state="translated">誰かがコンテキストを取得しようとするたびに呼び出されるコールバックを追加します。これは単一の引数で、コンテキストを構築するために使用されるパラメータのハッシュを参照します。これは、ハッシュを直接変更することでパラメータを変更するチャンスです。</target>
        </trans-unit>
        <trans-unit id="ad6cf519ff304b377e1026e19deb600993cefe39" translate="yes" xml:space="preserve">
          <source>Add a callback that will be called every time someone tries to acquire a context. This will be called on EVERY call to &lt;code&gt;context()&lt;/code&gt;. It gets a single argument, a reference to the hash of parameters being used the construct the context. This is your chance to change the parameters by directly altering the hash.</source>
          <target state="translated">誰かがコンテキストを取得しようとするたびに呼び出されるコールバックを追加します。これは、 &lt;code&gt;context()&lt;/code&gt; を呼び出すたびに呼び出されます。単一の引数を取得します。これは、コンテキストを構成するために使用されているパラメーターのハッシュへの参照です。これは、ハッシュを直接変更することによってパラメーターを変更するチャンスです。</target>
        </trans-unit>
        <trans-unit id="b76112279c4d7bc08a8f88058538f47580626a20" translate="yes" xml:space="preserve">
          <source>Add a callback that will be called when Test2 is finished loading. This means the callback will be run once, the first time a context is obtained. If Test2 has already finished loading then the callback will be run immediately.</source>
          <target state="translated">Test2のロードが終了したときに呼び出されるコールバックを追加します。つまり、コールバックは、最初にコンテキストを取得したときに一度だけ実行されます。Test2 の読み込みがすでに終了している場合は、コールバックはすぐに実行されます。</target>
        </trans-unit>
        <trans-unit id="6c9a55f0f275296ddc5fae317fffb28dd8faf3e9" translate="yes" xml:space="preserve">
          <source>Add a context init callback. Subs are called every time a context is created. Subs get the newly created context as their only argument.</source>
          <target state="translated">コンテキストの init コールバックを追加します。コンテキストが作成されるたびにサブスクリプトが呼び出されます。サブは、新しく作成されたコンテキストを唯一の引数として取得します。</target>
        </trans-unit>
        <trans-unit id="92a9d15f510d34d9b2e6669f1f7ddc09f3797c7e" translate="yes" xml:space="preserve">
          <source>Add a context release callback. Subs are called every time a context is released. Subs get the released context as their only argument. These callbacks should not call release on the context.</source>
          <target state="translated">コンテキスト解放コールバックを追加します。コンテキストがリリースされるたびにサブスクリプトが呼び出されます。サブはリリースされたコンテキストを唯一の引数として取得します。これらのコールバックは、コンテキスト上でリリースを呼び出すべきではありません。</target>
        </trans-unit>
        <trans-unit id="9047e2284dc63577e7faf2c89a8809b765789014" translate="yes" xml:space="preserve">
          <source>Add a filter to filter stack for the database, &lt;code&gt;$db&lt;/code&gt; . The three formats vary only in whether they apply to the DBM key, the DBM value or both.</source>
          <target state="translated">フィルターを追加して、データベース &lt;code&gt;$db&lt;/code&gt; スタックをフィルターします。3つの形式は、DBMキー、DBM値、またはその両方に適用されるかどうかのみが異なります。</target>
        </trans-unit>
        <trans-unit id="bdf9eb84aa78037b25d26e93ea6cdce8aea560bd" translate="yes" xml:space="preserve">
          <source>Add a filter to filter stack for the database, &lt;code&gt;$db&lt;/code&gt;. The three formats vary only in whether they apply to the DBM key, the DBM value or both.</source>
          <target state="translated">データベースのフィルタースタック &lt;code&gt;$db&lt;/code&gt; フィルターを追加します。3つの形式は、DBMキー、DBM値、またはその両方に適用されるかどうかのみが異なります。</target>
        </trans-unit>
        <trans-unit id="c38d7316ecf7229664ad9222ed91f94becc25544" translate="yes" xml:space="preserve">
          <source>Add a formatter to the list. Last formatter added is used at initialization. If this is called after initialization a warning will be issued.</source>
          <target state="translated">リストにフォーマッタを追加します。最後に追加されたフォーマッタは初期化時に使用されます。初期化後に呼び出された場合は警告が発生します。</target>
        </trans-unit>
        <trans-unit id="4c67e221c9600dff222d68e72c24b75b35131a9f" translate="yes" xml:space="preserve">
          <source>Add a formatter. The most recently added formatter will become the global one during initialization. If a formatter is added after initialization has occurred a warning will be generated:</source>
          <target state="translated">フォーマッタを追加します。最近追加されたフォーマッタは、初期化中にグローバルなものになります。初期化が行われた後にフォーマッタが追加された場合は、警告が発生します。</target>
        </trans-unit>
        <trans-unit id="8ccc393bac52be3d964bfe9d752d1239af48b643" translate="yes" xml:space="preserve">
          <source>Add a global watch-expression. Whenever a watched global changes the debugger will stop and display the old and new values.</source>
          <target state="translated">グローバルウォッチ式を追加します。ウォッチされたグローバルが変更されるたびに、デバッガは停止し、古い値と新しい値を表示します。</target>
        </trans-unit>
        <trans-unit id="53d906e02ac64f82dea46944febfd026f128fa47" translate="yes" xml:space="preserve">
          <source>Add a new item to the cache. Without arguments, this method returns a list of all cache elements.</source>
          <target state="translated">新しいアイテムをキャッシュに追加します。引数を指定しない場合、このメソッドはすべてのキャッシュ要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="a7863f951963cec6a01e64fc9352ec7f1fe9c51d" translate="yes" xml:space="preserve">
          <source>Add a node (or a list of nodes) to the document's node list. Note that the order is kept, i.e. start with the first node and end with the last. If no argument is given, the current list of nodes is returned in the same order the nodes have been added. A node can be any scalar, but usually is a pair of node string and unique id for the &lt;code&gt;find_node&lt;/code&gt; method to work correctly.</source>
          <target state="translated">ノード（またはノードのリスト）をドキュメントのノードリストに追加します。順序が維持されることに注意してください。つまり、最初のノードから始まり、最後のノードで終わります。引数を指定しない場合、ノードの現在のリストは、ノードが追加されたのと同じ順序で返されます。ノードは任意のスカラーにすることができますが、通常は、 &lt;code&gt;find_node&lt;/code&gt; メソッドが正しく機能するためのノード文字列と一意のIDのペアです。</target>
        </trans-unit>
        <trans-unit id="046e6f32f7f8535671af5b7c0861397ffbbc2a30" translate="yes" xml:space="preserve">
          <source>Add a post-load callback. If &lt;code&gt;load()&lt;/code&gt; has already been called then the callback will be immediately executed. If &lt;code&gt;load()&lt;/code&gt; has not been called then the callback will be stored and executed later when &lt;code&gt;load()&lt;/code&gt; is called.</source>
          <target state="translated">ロード後のコールバックを追加します。場合は &lt;code&gt;load()&lt;/code&gt; すでにその後、呼び出されているコールバックが直ちに実行されます。 &lt;code&gt;load()&lt;/code&gt; が呼び出されていない場合、コールバックは後で &lt;code&gt;load()&lt;/code&gt; が呼び出されたときに保存および実行されます。</target>
        </trans-unit>
        <trans-unit id="db33b0fd6386c3654a2e1eada103554324a64291" translate="yes" xml:space="preserve">
          <source>Add a pre-subtest callback. Subs are called every time a subtest is going to be run. Subs get the subtest name, coderef, and any arguments.</source>
          <target state="translated">サブテスト前のコールバックを追加します。サブテストが実行されるたびにサブテストが呼び出されます。サブテストは、サブテスト名、coderef、および任意の引数を取得します。</target>
        </trans-unit>
        <trans-unit id="db481968c59a6adf87aa66b0a382f55c4cfeb499" translate="yes" xml:space="preserve">
          <source>Add a pretty-printer method to the module</source>
          <target state="translated">モジュールに pretty-printer メソッドを追加する</target>
        </trans-unit>
        <trans-unit id="b48e494719a297be81c5a3a9a30374bc318e93d9" translate="yes" xml:space="preserve">
          <source>Add a signal to a SigSet object.</source>
          <target state="translated">シグナルをSigSetオブジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="abc744015695856d4c128987382f3ede0cf9f0fd" translate="yes" xml:space="preserve">
          <source>Add a sub to the stack. The sub will be called once the current compile-time &quot;scope&quot; is left. Multiple hooks can be added per scope</source>
          <target state="translated">スタックにサブを追加します。サブは、現在のコンパイル時の「スコープ」が残っていれば呼び出されます。スコープごとに複数のフックを追加することができます</target>
        </trans-unit>
        <trans-unit id="70b454679f6454970d507782ded710647bf0cf50" translate="yes" xml:space="preserve">
          <source>Add additional meta tags here, or blocks of inline CSS or JavaScript (wrapped in the appropriate tags).</source>
          <target state="translated">ここに追加のメタタグを追加するか、インラインのCSSやJavaScriptのブロックを追加します(適切なタグでラップされています)。</target>
        </trans-unit>
        <trans-unit id="d05603b01199af8d7cec368f69949fd361e906cb" translate="yes" xml:space="preserve">
          <source>Add alternative proposal to the &lt;a href=&quot;#recommends&quot;&gt;&quot;recommends&quot;&lt;/a&gt; field.</source>
          <target state="translated">&lt;a href=&quot;#recommends&quot;&gt;「推奨事項」&lt;/a&gt;フィールドに代替提案を追加します。</target>
        </trans-unit>
        <trans-unit id="3ecfadad24f90f268420ef8859f572907f4ebd35" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;INPUT&lt;/code&gt; entry to the typemap.</source>
          <target state="translated">タイプマップに &lt;code&gt;INPUT&lt;/code&gt; エントリを追加します。</target>
        </trans-unit>
        <trans-unit id="eb0881f49c67243a319f84b547be8360e6690ed3" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;OUTPUT&lt;/code&gt; entry to the typemap. Works exactly the same as &lt;code&gt;add_inputmap&lt;/code&gt;.</source>
          <target state="translated">タイプマップに &lt;code&gt;OUTPUT&lt;/code&gt; エントリを追加します。 &lt;code&gt;add_inputmap&lt;/code&gt; とまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="6f36ef6ed11003d4ee946d87afa944c63fd757d6" translate="yes" xml:space="preserve">
          <source>Add an IPC driver to the list. The most recently added IPC driver will become the global one during initialization. If a driver is added after initialization has occurred a warning will be generated:</source>
          <target state="translated">IPC ドライバをリストに追加します。最近追加されたIPCドライバは、初期化時にグローバルなものになります。初期化後にドライバが追加された場合、警告が発生します。</target>
        </trans-unit>
        <trans-unit id="9a293399a4e50374fc3bc665d292143e00f55dce" translate="yes" xml:space="preserve">
          <source>Add an IPC driver to the list. This will add the driver to the start of the list.</source>
          <target state="translated">IPC ドライバをリストに追加します。これにより、リストの先頭にドライバが追加されます。</target>
        </trans-unit>
        <trans-unit id="97aac284feaa85ca8cb91bcc63adaf65d2ec487a" translate="yes" xml:space="preserve">
          <source>Add an action (Perl command) to happen before every debugger prompt. A multi-line command may be entered by backwhacking the newlines.</source>
          <target state="translated">すべてのデバッガプロンプトの前にアクション (Perl コマンド)を追加します。複数行のコマンドは、改行をバックワックすることで入力することができます。</target>
        </trans-unit>
        <trans-unit id="8abdf94b4d37de8dda8c5f5f2c3f6875f8d6cc2b" translate="yes" xml:space="preserve">
          <source>Add an action (debugger command) to happen before every debugger prompt. A multi-line command may be entered, if you can guess how: see above.</source>
          <target state="translated">すべてのデバッガプロンプトの前にアクション (デバッガコマンド)を追加します。複数行のコマンドを入力することができます。</target>
        </trans-unit>
        <trans-unit id="b360d12a8c74ac3399385ff08d839994a5e14d6f" translate="yes" xml:space="preserve">
          <source>Add an exit callback. This callback will be called by &lt;code&gt;set_exit()&lt;/code&gt;.</source>
          <target state="translated">終了コールバックを追加します。このコールバックは &lt;code&gt;set_exit()&lt;/code&gt; によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f54d96a7a4eeff516086a73ed0f2969f141d74af" translate="yes" xml:space="preserve">
          <source>Add an index entry (or a list of them) to the document's index list. Note that the order is kept, i.e. start with the first node and end with the last. If no argument is given, the current list of index entries is returned in the same order the entries have been added. An index entry can be any scalar, but usually is a pair of string and unique id.</source>
          <target state="translated">ドキュメントのインデックスリストにインデックス項目(またはそのリスト)を追加します。つまり、最初のノードから始まり、最後のノードで終わるという順序が保たれることに注意してください。引数を指定しなかった場合は、現在のインデックスエントリのリストが、エントリが追加されたのと同じ順番で返されます。インデックスエントリは任意のスカラ値を指定できますが、通常は文字列と一意のidのペアです。</target>
        </trans-unit>
        <trans-unit id="5616f22797b70b920c0fa62b5c1b757dfad0f607" translate="yes" xml:space="preserve">
          <source>Add any user-visible changes since the last release to your</source>
          <target state="translated">前回のリリース以降にユーザーから見える形で変更された内容を</target>
        </trans-unit>
        <trans-unit id="590b7a309d0f6d30b6eb1e4e5ab86b934b9e4cae" translate="yes" xml:space="preserve">
          <source>Add blib/* directories to @INC</source>
          <target state="translated">INCにblib/*ディレクトリを追加</target>
        </trans-unit>
        <trans-unit id="169a520f5b682ca9f865299c14fd2b5069cb099b" translate="yes" xml:space="preserve">
          <source>Add comments to the code explaining what you are testing for.</source>
          <target state="translated">何のためにテストしているのかを説明するために、コードにコメントを追加します。</target>
        </trans-unit>
        <trans-unit id="de73e94e79dc3842d720fa32f69c99c36f54b7ec" translate="yes" xml:space="preserve">
          <source>Add data to hash when needed</source>
          <target state="translated">必要に応じてハッシュにデータを追加</target>
        </trans-unit>
        <trans-unit id="feb3fc6fc0c77a11d7269c731b48b816c468c95b" translate="yes" xml:space="preserve">
          <source>Add flock() emulation using IDOS-&amp;gt;LockRecord thanks to Tony Cook for the suggestion.</source>
          <target state="translated">提案してくれたTonyCookに感謝し、IDOS-&amp;gt; LockRecordを使用してflock（）エミュレーションを追加します。</target>
        </trans-unit>
        <trans-unit id="c921fe11e2046d24652b8326a08d772aaf68c1c3" translate="yes" xml:space="preserve">
          <source>Add handling of NIL: to afstat()</source>
          <target state="translated">afstat()に NIL:の取り扱いを追加。</target>
        </trans-unit>
        <trans-unit id="18c78e5255c3f304ba94a974b8fe59d440463b52" translate="yes" xml:space="preserve">
          <source>Add proposal for &lt;code&gt;auto_regenerate&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;auto_regenerate&lt;/code&gt; フィールドの提案を追加します。</target>
        </trans-unit>
        <trans-unit id="1cac8cfdc9bc441ce91f87d33692898aa9f930b0" translate="yes" xml:space="preserve">
          <source>Add proposal for a &lt;code&gt;requires_build_tools&lt;/code&gt; field.</source>
          <target state="translated">以下のための提案を追加 &lt;code&gt;requires_build_tools&lt;/code&gt; のフィールド。</target>
        </trans-unit>
        <trans-unit id="72d8179b381afab6c39843333e65697de042456c" translate="yes" xml:space="preserve">
          <source>Add the following to the end of Mytest.xs:</source>
          <target state="translated">Mytest.xsの最後に以下を追加します。</target>
        </trans-unit>
        <trans-unit id="9f9a937939c6d51d4a74436ba1cd4f9a4a86f81c" translate="yes" xml:space="preserve">
          <source>Add the list of handles to the &lt;code&gt;IO::Select&lt;/code&gt; object. It is these values that will be returned when an event occurs. &lt;code&gt;IO::Select&lt;/code&gt; keeps these values in a cache which is indexed by the &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; of the handle, so if more than one handle with the same &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; is specified then only the last one is cached.</source>
          <target state="translated">ハンドルのリストを &lt;code&gt;IO::Select&lt;/code&gt; オブジェクトに追加します。イベントが発生したときに返されるのはこれらの値です。 &lt;code&gt;IO::Select&lt;/code&gt; は、これらの値を、ハンドルの &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; によってインデックスが付けられたキャッシュに保持するため、同じ &lt;code&gt;&lt;a href=&quot;../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; を持つ複数のハンドルが指定されている場合、最後のハンドルのみがキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="f4567144045299065c0165e151f58f272a347489" translate="yes" xml:space="preserve">
          <source>Add the list of handles to the &lt;code&gt;IO::Select&lt;/code&gt; object. It is these values that will be returned when an event occurs. &lt;code&gt;IO::Select&lt;/code&gt; keeps these values in a cache which is indexed by the &lt;code&gt;fileno&lt;/code&gt; of the handle, so if more than one handle with the same &lt;code&gt;fileno&lt;/code&gt; is specified then only the last one is cached.</source>
          <target state="translated">ハンドルのリストを &lt;code&gt;IO::Select&lt;/code&gt; オブジェクトに追加します。イベントが発生したときに返されるのはこれらの値です。 &lt;code&gt;IO::Select&lt;/code&gt; は、これらの値をハンドルのファイル &lt;code&gt;fileno&lt;/code&gt; によってインデックス付けされたキャッシュに保持するため、同じ &lt;code&gt;fileno&lt;/code&gt; 持つ複数のハンドルが指定された場合、最後のハンドルのみがキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="19f0b9a66897495c95aa10ee537c78ed856fd477" translate="yes" xml:space="preserve">
          <source>Add to your standard heading the following line:</source>
          <target state="translated">標準の見出しに次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="08fc6af7d08fe5cff7ab3490908c8640f386f6f4" translate="yes" xml:space="preserve">
          <source>AddSubtract</source>
          <target state="translated">AddSubtract</target>
        </trans-unit>
        <trans-unit id="3d6444577bf119188b692f7bca855faa55a2401d" translate="yes" xml:space="preserve">
          <source>Added 'configure_requires' prerequisite type</source>
          <target state="translated">configure_requires' 前提条件タイプを追加</target>
        </trans-unit>
        <trans-unit id="a64389ac9912e7d874e9b87db88fd58e122c0a0c" translate="yes" xml:space="preserve">
          <source>Added 'description' field for a longer description of the distribution</source>
          <target state="translated">ディストリビューションのより長い説明のための'description'フィールドを追加</target>
        </trans-unit>
        <trans-unit id="1aa6cacba4287823c21f5d5fd2353063c1ac8e55" translate="yes" xml:space="preserve">
          <source>Added 'keywords' field</source>
          <target state="translated">キーワード」フィールドを追加</target>
        </trans-unit>
        <trans-unit id="0e9df52fa1aa964d76c90813e2eab9d3c259770e" translate="yes" xml:space="preserve">
          <source>Added 'license_uri' field</source>
          <target state="translated">license_uri' フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="836b1a4388e88eeef5b74e9af391dd06f54dc0ee" translate="yes" xml:space="preserve">
          <source>Added 'no_index' field and deprecated 'private' field. 'no_index' subkeys include 'file', 'dir', 'package' and 'namespace'</source>
          <target state="translated">no_index' フィールドを追加し、非推奨の 'private' フィールドを追加しました。no_index' サブキーには 'file'、'dir'、'package'、'namespace' が含まれます。</target>
        </trans-unit>
        <trans-unit id="6a7fc17196989ffd6c55efc59972b7c53f7a3074" translate="yes" xml:space="preserve">
          <source>Added 'no_index' subkey 'directory' and removed 'dir' to match actual usage in the wild</source>
          <target state="translated">サブキー 'no_index' に 'directory' を追加し、'dir' を削除した。</target>
        </trans-unit>
        <trans-unit id="7b01f92f459037312156b80744af7b20b7e23dc2" translate="yes" xml:space="preserve">
          <source>Added 'optional_features' field as an alternate under 'recommends'. Includes 'description', 'requires', 'build_requires', 'conflicts', 'requires_packages', 'requires_os' and 'excluded_os' as valid subkeys</source>
          <target state="translated">recommended' の下に 'optional_features' フィールドを追加しました。有効なサブキーとして 'description'、'requires'、'build_requires'、'conflicts'、'requires_packages'、'requires_os' および 'excluded_os' が追加されました。</target>
        </trans-unit>
        <trans-unit id="089abe8a28d09c43e8df68d5ec8f1f94d55fc4ae" translate="yes" xml:space="preserve">
          <source>Added 'private' field</source>
          <target state="translated">プライベート」フィールドを追加</target>
        </trans-unit>
        <trans-unit id="fdbb2058f98214a8d0241c7078a64d1d419ff315" translate="yes" xml:space="preserve">
          <source>Added 'provides' field</source>
          <target state="translated">提供する」フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="bdaa02362b8a343ff6228234d4ebd21baae0da33" translate="yes" xml:space="preserve">
          <source>Added 'release_status' field to indicate stable, testing or unstable status to provide hints to indexers</source>
          <target state="translated">インデックス作成者にヒントを提供するため、安定状態、テスト状態、不安定状態を示す 'release_status' フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="4fe305328f9e4d7c6ec73fba7119f6482115cd60" translate="yes" xml:space="preserve">
          <source>Added 'resources' field with subkeys 'homepage', 'license', and 'bugtracker'</source>
          <target state="translated">サブキー 'homepage'、'license'、'bugtracker' を持つ 'resources' フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="e144afdecf936badd362db9d94925954fc2bd138" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;#abstract&quot;&gt;&quot;abstract&quot;&lt;/a&gt;, &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;requires_packages&lt;/code&gt;, &lt;code&gt;requires_os&lt;/code&gt;, &lt;code&gt;excludes_os&lt;/code&gt;, and &lt;a href=&quot;#no_index&quot;&gt;&quot;no_index&quot;&lt;/a&gt; fields.</source>
          <target state="translated">追加されました&lt;a href=&quot;#abstract&quot;&gt;&quot;抽象的&quot;&lt;/a&gt;、 &lt;code&gt;configure&lt;/code&gt; 、 &lt;code&gt;requires_packages&lt;/code&gt; 、 &lt;code&gt;requires_os&lt;/code&gt; 、 &lt;code&gt;excludes_os&lt;/code&gt; 、および&lt;a href=&quot;#no_index&quot;&gt;&quot;NO_INDEX&quot;&lt;/a&gt;フィールド。</target>
        </trans-unit>
        <trans-unit id="f63a9f5b36cd2185deceb95d3838a3926221e452" translate="yes" xml:space="preserve">
          <source>Added &lt;a href=&quot;#configure_requires&quot;&gt;&quot;configure_requires&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#configure_requires&quot;&gt;「configure_requires」を&lt;/a&gt;追加しました。</target>
        </trans-unit>
        <trans-unit id="91872b27306847166639d5e97330092ac7f4702a" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;generation&lt;/code&gt;, &lt;code&gt;authored_by&lt;/code&gt; fields.</source>
          <target state="translated">&lt;code&gt;generation&lt;/code&gt; 、 &lt;code&gt;authored_by&lt;/code&gt; フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="0a13f7aff584c83ebd1f9e84aae7b2d05d441e1f" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;gztell&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gztell&lt;/code&gt; を追加しました。</target>
        </trans-unit>
        <trans-unit id="9d4e868f6631cb6b06a89e903757a8fcec841335" translate="yes" xml:space="preserve">
          <source>Added &lt;code&gt;gztell&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gztell&lt;/code&gt; を追加しました。</target>
        </trans-unit>
        <trans-unit id="ce4b7af5325c29b096cd0fa09b8e779e19ca7f6b" translate="yes" xml:space="preserve">
          <source>Added Amiga::Exec module with support for Wait() and AmigaOS signal numbers.</source>
          <target state="translated">Wait()と AmigaOS のシグナル番号をサポートする Amiga::Exec モジュールを追加。</target>
        </trans-unit>
        <trans-unit id="690a903901c99f8294efdf7dfc5b9fb2e1a30517" translate="yes" xml:space="preserve">
          <source>Added a 'repository' subkey to 'resources'</source>
          <target state="translated">リポジトリ」サブキーを「リソース」に追加しました。</target>
        </trans-unit>
        <trans-unit id="1529d69cfb2ad95dc93ff6b487c63438f267d03b" translate="yes" xml:space="preserve">
          <source>Added and deprecated the &lt;a href=&quot;#private&quot;&gt;&quot;private&quot;&lt;/a&gt; field.</source>
          <target state="translated">&lt;a href=&quot;#private&quot;&gt;「private」&lt;/a&gt;フィールドが追加され、非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="a7467424ca435e045670d53563f164da161e1c7c" translate="yes" xml:space="preserve">
          <source>Added formal specification and usage guide instead of just example</source>
          <target state="translated">単なる例示ではなく、正式な仕様と使用法を追加しました。</target>
        </trans-unit>
        <trans-unit id="1095a22478b4b66c2ae56250f944a8bfc247cdff" translate="yes" xml:space="preserve">
          <source>Added in perl 5.18.0, this flag indicates that a regular expression might perform an operation that would interfere with inplace substitution. For instance it might contain lookbehind, or assign to non-magical variables (such as $REGMARK and $REGERROR) during matching. &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; will skip certain optimisations when this is set.</source>
          <target state="translated">perl 5.18.0で追加されたこのフラグは、正規表現がインプレース置換を妨げる操作を実行する可能性があることを示します。たとえば、照合の際に後読みが含まれていたり、マジック以外の変数（$ REGMARKや$ REGERRORなど）に割り当てられている場合があります。これが設定されている場合、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; は特定の最適化をスキップします。</target>
        </trans-unit>
        <trans-unit id="277baaafd4042af758d6c63f3238b401fdd8bfc3" translate="yes" xml:space="preserve">
          <source>Added in perl 5.18.0, this flag indicates that a regular expression might perform an operation that would interfere with inplace substitution. For instance it might contain lookbehind, or assign to non-magical variables (such as $REGMARK and $REGERROR) during matching. &lt;code&gt;s///&lt;/code&gt; will skip certain optimisations when this is set.</source>
          <target state="translated">perl 5.18.0で追加されたこのフラグは、正規表現がインプレース置換を妨げる操作を実行する可能性があることを示します。たとえば、ルックビハインドが含まれている場合や、マッチング中に非魔法の変数（$ REGMARKや$ REGERRORなど）に割り当てられる場合があります。 &lt;code&gt;s///&lt;/code&gt; これが設定されている場合、特定の最適化をスキップします。</target>
        </trans-unit>
        <trans-unit id="b1d56423c29f7196bca0ef1618ba2dd3e888861c" translate="yes" xml:space="preserve">
          <source>Added in perl 5.22, this method returns the B::REGEXP associated with the op. While PMOPs do not actually have &lt;code&gt;pmregexp&lt;/code&gt; fields under threaded builds, this method returns the regexp under threads nonetheless, for convenience.</source>
          <target state="translated">perl 5.22で追加されたこのメソッドは、オペレーションに関連付けられたB :: REGEXPを返します。PMOPは、スレッド化されたビルドでは実際には &lt;code&gt;pmregexp&lt;/code&gt; フィールドを持ちませんが、このメソッドは、便宜上、スレッドで正規表現を返します。</target>
        </trans-unit>
        <trans-unit id="f51a6b7957e9c7cb904dc99843449a531ea1b689" translate="yes" xml:space="preserve">
          <source>Added in version 2.134.</source>
          <target state="translated">バージョン2.134で追加されました。</target>
        </trans-unit>
        <trans-unit id="6b91664e6fd3b4816eccf4d391f086ad14efff2a" translate="yes" xml:space="preserve">
          <source>Added link to latest version of this specification on CPAN.</source>
          <target state="translated">CPANに本仕様の最新版へのリンクを追加しました。</target>
        </trans-unit>
        <trans-unit id="6bcf643636b7398a8e0e54e9c9fc1d9273c2b5e2" translate="yes" xml:space="preserve">
          <source>Added more YAML rationale articles.</source>
          <target state="translated">YAMLの根拠記事を追加しました。</target>
        </trans-unit>
        <trans-unit id="33305109558673a1c9c69c1f25a4c2df594e30a8" translate="yes" xml:space="preserve">
          <source>Added required 'abstract' field</source>
          <target state="translated">必須の'abstract'フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="af726294af9dc1265c8d0f3857527e7304abd333" translate="yes" xml:space="preserve">
          <source>Added required 'author' field</source>
          <target state="translated">必須の'author'フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="e7866b1d9634973b54410fb3b09a8870c6e12c54" translate="yes" xml:space="preserve">
          <source>Added required 'meta-spec' field to define 'version' (and 'url') of the CPAN Meta Spec used for metadata</source>
          <target state="translated">メタデータに使用されるCPANメタスペックの「バージョン」(および「URL」)を定義するために必須の「meta-spec」フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="bd2cc0964d8a12be83f56ab3950ae68e29c591b1" translate="yes" xml:space="preserve">
          <source>Added section &lt;a href=&quot;#VERSION-SPECIFICATIONS&quot;&gt;&quot;VERSION SPECIFICATIONS&quot;&lt;/a&gt;.</source>
          <target state="translated">セクション&lt;a href=&quot;#VERSION-SPECIFICATIONS&quot;&gt;「バージョン仕様」を&lt;/a&gt;追加しました。</target>
        </trans-unit>
        <trans-unit id="aef233fbd4347044329187d2b8f1ce4f52792b2d" translate="yes" xml:space="preserve">
          <source>Added support for 'develop' phase for requirements for maintaining a list of authoring tools</source>
          <target state="translated">オーサリングツールのリストを維持するための要件に「開発」フェーズのサポートを追加</target>
        </trans-unit>
        <trans-unit id="4067cf30df05475c0b1f2362ec92ff1b94229189" translate="yes" xml:space="preserve">
          <source>Added the &quot;==&quot; operator to the list of supported version-checking operators.</source>
          <target state="translated">サポートされているバージョンチェック演算子のリストに&quot;==&quot;演算子を追加しました。</target>
        </trans-unit>
        <trans-unit id="e23a873d3fc017deb2d7810db7b45a18d9b23384" translate="yes" xml:space="preserve">
          <source>Added the &lt;a href=&quot;#dynamic_config&quot;&gt;&quot;dynamic_config&quot;&lt;/a&gt; field, which was missing from the initial version.</source>
          <target state="translated">初期バージョンから欠落していた&lt;a href=&quot;#dynamic_config&quot;&gt;「dynamic_config」&lt;/a&gt;フィールドを追加しました。</target>
        </trans-unit>
        <trans-unit id="c21ca5e20439791dc77b0976300391ca4c56a8d6" translate="yes" xml:space="preserve">
          <source>Added version range specifications for prerequisites</source>
          <target state="translated">前提条件のバージョン範囲の仕様を追加</target>
        </trans-unit>
        <trans-unit id="2ba88f457f4acc695f5bcc5b53d0aed8e9a2a045" translate="yes" xml:space="preserve">
          <source>Adder</source>
          <target state="translated">Adder</target>
        </trans-unit>
        <trans-unit id="6d548b5512a4a3be1ad17c320cc40231db228d55" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;\W*&lt;/code&gt; at either end to eliminate what is to be ignored, we already have the full pattern:</source>
          <target state="translated">無視されるものを排除するためにどちらかの端に &lt;code&gt;\W*&lt;/code&gt; を追加すると、すでに完全なパターンがあります。</target>
        </trans-unit>
        <trans-unit id="75c6e513c1fb807d0884fb4286f8d06fe79494da" translate="yes" xml:space="preserve">
          <source>Adding a Copyright Notice.</source>
          <target state="translated">著作権表示を追加します。</target>
        </trans-unit>
        <trans-unit id="303fa6167f30afc58e107870ab55bef298f595d5" translate="yes" xml:space="preserve">
          <source>Adding a Perl interpreter to your C program</source>
          <target state="translated">C プログラムに Perl インタプリタを追加する</target>
        </trans-unit>
        <trans-unit id="3494708836bea1e13cb2fb34de6c0bb041485662" translate="yes" xml:space="preserve">
          <source>Adding a colon &quot;:&quot; or empty string &quot;&quot; to a path at</source>
          <target state="translated">でのパスにコロン &quot;:&quot; または空文字列 &quot;&quot; を追加します。</target>
        </trans-unit>
        <trans-unit id="a53e4c0ef202bbd1f27920e920bc75f378ee45c9" translate="yes" xml:space="preserve">
          <source>Adding directories to @INC</source>
          <target state="translated">ディレクトリを@INCに追加する</target>
        </trans-unit>
        <trans-unit id="32ef945c8ba780a6b4dd45ed8eb3b208531a653f" translate="yes" xml:space="preserve">
          <source>Adding hints to your module</source>
          <target state="translated">モジュールにヒントを追加する</target>
        </trans-unit>
        <trans-unit id="ba2cfa47677f2dc11ab18dec23c28080c249d55d" translate="yes" xml:space="preserve">
          <source>Adding libraries</source>
          <target state="translated">ライブラリの追加</target>
        </trans-unit>
        <trans-unit id="b8ef134eb6c634200333aedff61c4a77cc1d0006" translate="yes" xml:space="preserve">
          <source>Adding new core tests</source>
          <target state="translated">新しいコアテストの追加</target>
        </trans-unit>
        <trans-unit id="b80f8c556c16b44d25bfbabc5e3f14bb1ae5d40d" translate="yes" xml:space="preserve">
          <source>Adding non-comment stuff after #endif or #else</source>
          <target state="translated">endifや#elseの後にコメント以外のものを追加する</target>
        </trans-unit>
        <trans-unit id="65ffd7a09837afed5bf94ab1e1f31e15cc6844fb" translate="yes" xml:space="preserve">
          <source>Adding, deprecating, or removing core features</source>
          <target state="translated">コア機能の追加、非推奨、または削除</target>
        </trans-unit>
        <trans-unit id="dd881a1fe5170572b503d70ad2a1b006df408296" translate="yes" xml:space="preserve">
          <source>Adding, deprecating, removing, or upgrading core or dual-life modules</source>
          <target state="translated">コアまたはデュアルライフモジュールの追加、非推奨、削除、またはアップグレード</target>
        </trans-unit>
        <trans-unit id="aa19c6fc6789672e5ea06b36cec0c6ea7c8038fa" translate="yes" xml:space="preserve">
          <source>Adding, removing, or significantly changing documentation in the</source>
          <target state="translated">のドキュメントの追加、削除、または大幅な変更。</target>
        </trans-unit>
        <trans-unit id="1d418e4d86845beab5da12aea1ba94a51ff3bc29" translate="yes" xml:space="preserve">
          <source>Addition of &lt;code&gt;gzseek&lt;/code&gt; to provide a restricted &lt;code&gt;&lt;a href=&quot;../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">制限された &lt;code&gt;&lt;a href=&quot;../functions/seek&quot;&gt;seek&lt;/a&gt;&lt;/code&gt; インターフェイスを提供するための &lt;code&gt;gzseek&lt;/code&gt; の追加。</target>
        </trans-unit>
        <trans-unit id="6552e79b6f2eba5d2c1c59df8b89aa7a3c1b078e" translate="yes" xml:space="preserve">
          <source>Addition of &lt;code&gt;gzseek&lt;/code&gt; to provide a restricted &lt;code&gt;seek&lt;/code&gt; interface.</source>
          <target state="translated">制限付き &lt;code&gt;seek&lt;/code&gt; インターフェイスを提供するための &lt;code&gt;gzseek&lt;/code&gt; の追加。</target>
        </trans-unit>
        <trans-unit id="c4dffe7b821c26dcbff0441f525605b623db0150" translate="yes" xml:space="preserve">
          <source>Additional Perl modules</source>
          <target state="translated">その他のPerlモジュール</target>
        </trans-unit>
        <trans-unit id="21cbac17404588ed0f4a75e1ba94b2723810229c" translate="yes" xml:space="preserve">
          <source>Additional allowable exit values can be supplied as an optional first argument to autodying &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">追加の許容終了値は、自動染色 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; オプションの最初の引数として指定できます。</target>
        </trans-unit>
        <trans-unit id="f48107467db8714a6cbff8faff6baadd1f1ad23c" translate="yes" xml:space="preserve">
          <source>Additional allowable exit values can be supplied as an optional first argument to autodying &lt;code&gt;system&lt;/code&gt;:</source>
          <target state="translated">追加の許容終了値は、自動染色 &lt;code&gt;system&lt;/code&gt; へのオプションの最初の引数として指定できます。</target>
        </trans-unit>
        <trans-unit id="95fcc23a5989c1d4707ef062b9c48e30e43e8eea" translate="yes" xml:space="preserve">
          <source>Additional arbitrary HTML tags for the header of the document. The default value is just a content type header tag:</source>
          <target state="translated">文書のヘッダのための追加の任意の HTML タグ。デフォルト値はコンテンツタイプのヘッダータグだけです。</target>
        </trans-unit>
        <trans-unit id="d31c04c6385ec69608dc7b1dbfd4b8783d00f7f6" translate="yes" xml:space="preserve">
          <source>Additional beginning whitespace (beyond what preceded the delimiter) will be preserved:</source>
          <target state="translated">区切り文字の前の空白を超えた追加の先頭の空白は保存されます。</target>
        </trans-unit>
        <trans-unit id="93ccf6b3b0fed7eda8c1cf492ae71f85cc3c2416" translate="yes" xml:space="preserve">
          <source>Additional behaviors can be added to your &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; method by overriding &lt;code&gt;import_extra()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; をオーバーライドすることにより、追加の動作を &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; メソッドに追加できます。</target>
        </trans-unit>
        <trans-unit id="fda1dbde949fe80b65f11ed406dd46d7077f6407" translate="yes" xml:space="preserve">
          <source>Additional behaviors can be added to your &lt;code&gt;import()&lt;/code&gt; method by overriding &lt;code&gt;import_extra()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;import_extra()&lt;/code&gt; をオーバーライドすることで、 &lt;code&gt;import()&lt;/code&gt; メソッドに追加の動作を追加できます。</target>
        </trans-unit>
        <trans-unit id="b69974bf6d56e57936d88d6a5f708b80a863eea6" translate="yes" xml:space="preserve">
          <source>Additional code by Yves Orton.</source>
          <target state="translated">イヴ・オルトンの追加コード</target>
        </trans-unit>
        <trans-unit id="07c4a7582a6b085c26b5bc77e2d781374f6214f8" translate="yes" xml:space="preserve">
          <source>Additional context-dependent optimizations are performed at this time. Since at this moment the compile tree contains back-references (via &quot;thread&quot; pointers), nodes cannot be free()d now. To allow optimized-away nodes at this stage, such nodes are null()ified instead of free()ing (i.e. their type is changed to OP_NULL).</source>
          <target state="translated">この時点で、追加のコンテキスト依存の最適化が実行されます。この時点では、コンパイルツリーには (「スレッド」ポインタを介した)後方参照が含まれているため、ノードを free()d することはできません。この段階で最適化された離脱ノードを許可するために、そのようなノードは free()ing の代わりに null()ified されます (つまり、ノードの型は OP_NULL に変更されます)。</target>
        </trans-unit>
        <trans-unit id="31fd46d11c3bbe73ad92eebf33f7553ded695d16" translate="yes" xml:space="preserve">
          <source>Additional contributions by The Perl 5 Porters.</source>
          <target state="translated">The Perl 5 Portersによる追加の貢献。</target>
        </trans-unit>
        <trans-unit id="65d277fbf8e91201355e93559429e2b46f057ea7" translate="yes" xml:space="preserve">
          <source>Additional flags to specify to C preprocessor when scanning header for function declarations. Writes these options in the generated</source>
          <target state="translated">関数宣言のためにヘッダをスキャンする際に、Cプリプロセッサに指定する追加のフラグ。これらのオプションを生成された</target>
        </trans-unit>
        <trans-unit id="8fab7fe5b84df4c38b3df13c3aab585166d6f79c" translate="yes" xml:space="preserve">
          <source>Additional flags:</source>
          <target state="translated">旗を追加しました。</target>
        </trans-unit>
        <trans-unit id="224b8dd98beb03b9721f84cf4768d8e500e8a1d7" translate="yes" xml:space="preserve">
          <source>Additional functions not exported by default:</source>
          <target state="translated">デフォルトではエクスポートされない追加機能</target>
        </trans-unit>
        <trans-unit id="c00e0d54188b0a52cda35b7ee1e5c81c6e17488d" translate="yes" xml:space="preserve">
          <source>Additional linker arguments to be considered.</source>
          <target state="translated">考慮すべき追加のリンカー引数。</target>
        </trans-unit>
        <trans-unit id="c75d2357555d61500cb561ea756aab492ce04979" translate="yes" xml:space="preserve">
          <source>Additional lowercase attributes</source>
          <target state="translated">小文字属性の追加</target>
        </trans-unit>
        <trans-unit id="62669130426d053245d54e15329b7bbb244bddc3" translate="yes" xml:space="preserve">
          <source>Additional methods that are provided are:</source>
          <target state="translated">提供される追加のメソッドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c9f0c499a9f295c841e5042dc5fcae68b2718736" translate="yes" xml:space="preserve">
          <source>Additional modules:</source>
          <target state="translated">モジュールを追加しました。</target>
        </trans-unit>
        <trans-unit id="5cb0cfaa4bee3834bdbab722883416b06bf0e1b8" translate="yes" xml:space="preserve">
          <source>Additional option files may be specified with the &lt;code&gt;--rc&lt;/code&gt; option. Default option file processing is disabled by the &lt;code&gt;--norc&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--rc&lt;/code&gt; オプションで追加のオプションファイルを指定できます。 &lt;code&gt;--norc&lt;/code&gt; オプションにより、デフォルトのオプションファイル処理は無効になります。</target>
        </trans-unit>
        <trans-unit id="a9910904f4a1f818c8f8c0fa7217add5b79e193c" translate="yes" xml:space="preserve">
          <source>Additional supported functions</source>
          <target state="translated">追加サポート機能</target>
        </trans-unit>
        <trans-unit id="62f57b1281983cef6c2785663a1426c055f3a73b" translate="yes" xml:space="preserve">
          <source>Additional thanks to: Edward Avis / Mattia Barbon / Tom Christiansen / Gerrit Haase / Gurusamy Sarathy / Jarkko Hietaniemi (again) / Nikola Knezevic / John Kominetz / Nick Ing-Simmons / Tassilo von Parseval / H. Dieter Pearcey / Slaven Rezic / Eric Roode / Peter Scott / Peter Somu / Autrijus Tang (again) / Tels (again) / Juerd Waalboer / Todd Rinaldo</source>
          <target state="translated">追加の感謝の意を表します。Edward Avis/Mattia Barbon/Tom Christiansen/Gerrit Haase/Gurusamy Sarathy/Jarkko Hietaniemi (再び)/Nikola Knezevic/John Kominetz/Nick Ing-Simmons/Tassilo von Parseval/H.Dieter Pearcey/Slaven Rezic/Eric Roode/Peter Scott/Peter Somu/Autrijus Tang (再び)/Tels (再び)/Juerd Waalboer/Todd Rinaldo</target>
        </trans-unit>
        <trans-unit id="2e074cb542b7d40047c757dcbf8e58304de85a1f" translate="yes" xml:space="preserve">
          <source>Additionally &lt;a href=&quot;#weaken&quot;&gt;&quot;weaken&quot;&lt;/a&gt; and &lt;a href=&quot;#isweak&quot;&gt;&quot;isweak&quot;&lt;/a&gt; which are</source>
          <target state="translated">さらに、&lt;a href=&quot;#isweak&quot;&gt;「弱い&lt;/a&gt;&lt;a href=&quot;#weaken&quot;&gt;」&lt;/a&gt;と「弱い」は</target>
        </trans-unit>
        <trans-unit id="0faa935c5b1efc0ef2a1c52135455cd6a03aa947" translate="yes" xml:space="preserve">
          <source>Additionally &lt;a href=&quot;#weaken&quot;&gt;weaken&lt;/a&gt; and &lt;a href=&quot;#isweak&quot;&gt;isweak&lt;/a&gt; which are</source>
          <target state="translated">さらに、&lt;a href=&quot;#weaken&quot;&gt;弱く&lt;/a&gt;、&lt;a href=&quot;#isweak&quot;&gt;弱い&lt;/a&gt;です</target>
        </trans-unit>
        <trans-unit id="670b1ddc67f6054d3b05d014236af978c695794a" translate="yes" xml:space="preserve">
          <source>Additionally,</source>
          <target state="translated">Additionally,</target>
        </trans-unit>
        <trans-unit id="d13e57a8614451ac86ee80ef497567c6c1217ddd" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;reg()&lt;/code&gt; is responsible for parsing the one or more branches from the pattern, and for &quot;finishing them off&quot; by correctly setting their next pointers. In order to do the parsing, it repeatedly calls out to &lt;code&gt;regbranch()&lt;/code&gt; , which is responsible for handling up to the first &lt;code&gt;|&lt;/code&gt; symbol it sees.</source>
          <target state="translated">さらに、 &lt;code&gt;reg()&lt;/code&gt; は、パターンからの1つまたは複数のブランチを解析し、次のポインターを正しく設定することによって「それらを終了する」責任があります。解析を行うために、最初の処理までの処理を担当する &lt;code&gt;regbranch()&lt;/code&gt; を繰り返し呼び出します &lt;code&gt;|&lt;/code&gt; 見えるシンボル。</target>
        </trans-unit>
        <trans-unit id="bbe8dc06a5770f240c4afba81e88ad8d5991f28b" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;reg()&lt;/code&gt; is responsible for parsing the one or more branches from the pattern, and for &quot;finishing them off&quot; by correctly setting their next pointers. In order to do the parsing, it repeatedly calls out to &lt;code&gt;regbranch()&lt;/code&gt;, which is responsible for handling up to the first &lt;code&gt;|&lt;/code&gt; symbol it sees.</source>
          <target state="translated">さらに、 &lt;code&gt;reg()&lt;/code&gt; は、パターンから1つ以上のブランチを解析し、次のポインターを正しく設定することによって「それらを終了」する役割を果たします。解析を行うために、最初の &lt;code&gt;|&lt;/code&gt; までの処理を担当する &lt;code&gt;regbranch()&lt;/code&gt; を繰り返し呼び出します。それが見るシンボル。</target>
        </trans-unit>
        <trans-unit id="e0e807bcf6cc2e8c544c361c110388bef7a27722" translate="yes" xml:space="preserve">
          <source>Additionally, extra colons can be used to control formatting. A trailing colon suppresses the linefeed and terminator &quot;;&quot;, allowing you to embed queries into shell commands. (mnemonic: PATH separator &quot;:&quot;.)</source>
          <target state="translated">さらに、余分なコロンを使用してフォーマットを制御することができます。最後のコロンは、行送りとターミネータ &quot;;&quot; を抑制し、シェルコマンドにクエリを埋め込むことができます。(ニーモニック:PATH セパレータ &quot;:&quot;)</target>
        </trans-unit>
        <trans-unit id="de6bbc1e5f3a3539ae55f22169f7f3d830032c5c" translate="yes" xml:space="preserve">
          <source>Additionally, for more complicated requirements, the specification supports a list of versions, each of which may be optionally preceded by a relational operator.</source>
          <target state="translated">さらに、より複雑な要件のために、この仕様はバージョンのリストをサポートしており、それぞれのバージョンの前には任意でリレーショナル演算子を付けることができます。</target>
        </trans-unit>
        <trans-unit id="e495cf9a286350e9c50957cc8351f8f292fd0e8c" translate="yes" xml:space="preserve">
          <source>Additionally, if the &lt;code&gt;h_errno&lt;/code&gt; variable is supported in C, its value is returned via &lt;code&gt;$?&lt;/code&gt; if any &lt;code&gt;gethost*()&lt;/code&gt; function fails.</source>
          <target state="translated">さらに、Cで &lt;code&gt;h_errno&lt;/code&gt; 変数がサポートされている場合、その値は &lt;code&gt;$?&lt;/code&gt; を介して返されます。いずれの場合 &lt;code&gt;gethost*()&lt;/code&gt; 関数が失敗しました。</target>
        </trans-unit>
        <trans-unit id="f146d2cdc65cbc8a75b0db4de74950e484d62ea3" translate="yes" xml:space="preserve">
          <source>Additionally, if the identifier is preceded by a sigil -- that is, if the identifier is part of a variable name -- it may optionally be enclosed in braces.</source>
          <target state="translated">さらに、識別子の前に sigil が付いている場合、つまり、識別子が変数名の一部である場合は、中括弧で囲むことができます。</target>
        </trans-unit>
        <trans-unit id="de325e0c3cf0c3d9113392e69ca77df0f19293fa" translate="yes" xml:space="preserve">
          <source>Additionally, if you quote your initializer, then the quoted value that goes &lt;b&gt;in&lt;/b&gt; will be exactly what comes &lt;b&gt;out&lt;/b&gt; when your $VERSION is printed (stringified). If you do not quote your value, Perl's normal numeric handling comes into play and you may not get back what you were expecting.</source>
          <target state="translated">あなたの初期化子を引用する場合はさらに、その後、行く引用された値&lt;b&gt;には&lt;/b&gt;来て正確に何でしょう&lt;b&gt;アウト&lt;/b&gt;（文字列化）あなたの$ VERSIONが印刷されたとき。値を引用しないと、Perlの通常の数値処理が機能し、期待したものに戻らない可能性があります。</target>
        </trans-unit>
        <trans-unit id="0a9aa35376d4ff22f823726940db699aadebfdc8" translate="yes" xml:space="preserve">
          <source>Additionally, implementations of the standard &lt;a href=&quot;../posix&quot;&gt;POSIX&lt;/a&gt; tmpnam() and tmpfile() functions are provided if required.</source>
          <target state="translated">さらに、必要に応じて、標準の&lt;a href=&quot;../posix&quot;&gt;POSIX&lt;/a&gt; tmpnam（）およびtmpfile（）関数の実装が提供されます。</target>
        </trans-unit>
        <trans-unit id="efb04423e282453ef73b22b8dc7638d920d2d0ae" translate="yes" xml:space="preserve">
          <source>Additionally, implementations of the standard &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; tmpnam() and tmpfile() functions are provided if required.</source>
          <target state="translated">さらに、必要に応じて、標準の&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; tmpnam（）およびtmpfile（）関数の実装が提供されます。</target>
        </trans-unit>
        <trans-unit id="ec069a599a9fe7b608d8c7621218dba9e34959bc" translate="yes" xml:space="preserve">
          <source>Additionally, it will create META.yml and META.json module meta-data file in the distdir and add this to the distdir's MANIFEST. You can shut this behavior off with the NO_META flag.</source>
          <target state="translated">さらに、META.yml と META.json モジュールのメタデータファイルを distdir に作成し、これを distdir の MANIFEST に追加します。NO_META フラグでこの動作を止めることができます。</target>
        </trans-unit>
        <trans-unit id="cf43615b098124e15c13f1b6cb0b15882811c299" translate="yes" xml:space="preserve">
          <source>Additionally, on Solaris 8 and 9 you also need:</source>
          <target state="translated">さらに、Solaris 8および9では必要です。</target>
        </trans-unit>
        <trans-unit id="803c31494436506f0b3634581565d9fa52a9d93a" translate="yes" xml:space="preserve">
          <source>Additionally, on Windows NT not all the fields returned by stat() can be compared. For example, the &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;rdev&lt;/code&gt; fields seem to be different. Also, it seems that the size of the file returned by stat() does not always agree, with &lt;code&gt;stat(FH)&lt;/code&gt; being more accurate than &lt;code&gt;stat(filename)&lt;/code&gt;, presumably because of caching issues even when using autoflush (this is usually overcome by waiting a while after writing to the tempfile before attempting to &lt;code&gt;unlink0&lt;/code&gt; it).</source>
          <target state="translated">さらに、Windows NTでは、stat（）によって返されるすべてのフィールドを比較できるわけではありません。たとえば、 &lt;code&gt;dev&lt;/code&gt; フィールドと &lt;code&gt;rdev&lt;/code&gt; フィールドは異なっているようです。また、stat（）によって返されるファイルのサイズが常に一致するとは限らないようです。おそらく、自動フラッシュを使用している場合でもキャッシュの問題が原因で、 &lt;code&gt;stat(FH)&lt;/code&gt; の方が &lt;code&gt;stat(filename)&lt;/code&gt; よりも正確です（これは通常、待機することで解決されます） &lt;code&gt;unlink0&lt;/code&gt; だ後、リンクを解除する前にしばらくの間）。</target>
        </trans-unit>
        <trans-unit id="fdcb47de4e9258bc110d7122692a049db6fbb22a" translate="yes" xml:space="preserve">
          <source>Additionally, on Windows NT not all the fields returned by stat() can be compared. For example, the C</source>
          <target state="translated">さらに、Windows NT では stat()が返すすべてのフィールドを比較できるわけではありません。例えば、C</target>
        </trans-unit>
        <trans-unit id="51fffd62248577e35b4f056a4c962f40c15d81d6" translate="yes" xml:space="preserve">
          <source>Additionally, quoting rules for the end-of-string identifier are unrelated to Perl's quoting rules. &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq()&lt;/a&gt;&lt;/code&gt;, and the like are not supported in place of &lt;code&gt;''&lt;/code&gt; and &lt;code&gt;&quot;&quot;&lt;/code&gt; , and the only interpolation is for backslashing the quoting character:</source>
          <target state="translated">さらに、文字列の終わりの識別子の引用規則は、Perlの引用規則とは無関係です。 &lt;code&gt;&lt;a href=&quot;functions/q&quot;&gt;q()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq()&lt;/a&gt;&lt;/code&gt; などは、 &lt;code&gt;''&lt;/code&gt; および &lt;code&gt;&quot;&quot;&lt;/code&gt; の代わりにサポートされていません。唯一の補間は、引用文字のバックスラッシュです。</target>
        </trans-unit>
        <trans-unit id="412534d3423be2e1898577d3de74a34b369a730e" translate="yes" xml:space="preserve">
          <source>Additionally, quoting rules for the end-of-string identifier are unrelated to Perl's quoting rules. &lt;code&gt;q()&lt;/code&gt;, &lt;code&gt;qq()&lt;/code&gt;, and the like are not supported in place of &lt;code&gt;''&lt;/code&gt; and &lt;code&gt;&quot;&quot;&lt;/code&gt;, and the only interpolation is for backslashing the quoting character:</source>
          <target state="translated">さらに、文字列の終わりの識別子の引用規則は、Perlの引用規則とは無関係です。 &lt;code&gt;''&lt;/code&gt; および &lt;code&gt;&quot;&quot;&lt;/code&gt; の代わりに &lt;code&gt;q()&lt;/code&gt; 、 &lt;code&gt;qq()&lt;/code&gt; などはサポートされておらず、唯一の補間は引用符文字をバックスラッシュするためのものです。</target>
        </trans-unit>
        <trans-unit id="60224bb897c08e69d3d354606005d24af0b374cd" translate="yes" xml:space="preserve">
          <source>Additionally, the following still works:</source>
          <target state="translated">さらに、以下のようにしても動作します。</target>
        </trans-unit>
        <trans-unit id="03aa6ebb82309c10827e49e960c12581e1baf1dc" translate="yes" xml:space="preserve">
          <source>Additionally, the type of each element is determined from the type of the array. If the array uses type &lt;code&gt;intArray *&lt;/code&gt; xsubpp will automatically work out that it contains variables of type &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; and use that typemap entry to perform the copy of each element. All pointer '*' and 'Array' tags are removed from the name to determine the subtype.</source>
          <target state="translated">さらに、各要素のタイプは、配列のタイプから決定されます。配列がタイプ &lt;code&gt;intArray *&lt;/code&gt; xsubppを使用している場合、xsubppは、タイプが &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; の変数を含むことを自動的に計算し、そのタイプマップエントリを使用して各要素のコピーを実行します。すべてのポインター '*'および 'Array'タグは、サブタイプを判別するために名前から削除されます。</target>
        </trans-unit>
        <trans-unit id="6c41af612d6b40d25dade58353a32d15c36d10a4" translate="yes" xml:space="preserve">
          <source>Additionally, the type of each element is determined from the type of the array. If the array uses type &lt;code&gt;intArray *&lt;/code&gt; xsubpp will automatically work out that it contains variables of type &lt;code&gt;int&lt;/code&gt; and use that typemap entry to perform the copy of each element. All pointer '*' and 'Array' tags are removed from the name to determine the subtype.</source>
          <target state="translated">さらに、各要素のタイプは、配列のタイプから決定されます。配列が &lt;code&gt;intArray *&lt;/code&gt; 型を使用する場合* xsubppは、 &lt;code&gt;int&lt;/code&gt; 型の変数が含まれていることを自動的に判断し、その型マップエントリを使用して各要素のコピーを実行します。サブタイプを決定するために、すべてのポインター「*」および「配列」タグが名前から削除されます。</target>
        </trans-unit>
        <trans-unit id="07fc9a7d294284f6e102c0fc684f637e2ecfc37a" translate="yes" xml:space="preserve">
          <source>Additionally, there is now &lt;code&gt;UNI_DISPLAY_BACKSPACE&lt;/code&gt; which allows &lt;code&gt;\b&lt;/code&gt; for a backspace, but only when &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; also is set.</source>
          <target state="translated">さらに、バックスペースに &lt;code&gt;\b&lt;/code&gt; を許可する &lt;code&gt;UNI_DISPLAY_BACKSPACE&lt;/code&gt; がありますが、 &lt;code&gt;UNI_DISPLAY_BACKSLASH&lt;/code&gt; も設定されている場合に限ります。</target>
        </trans-unit>
        <trans-unit id="5b8c86e3562fdf5c9d82a5e93b3d4cafa347de77" translate="yes" xml:space="preserve">
          <source>Additionally, unless the &lt;code&gt;safe&lt;/code&gt; parameter is set (or the third parameter in the traditional interface is TRUE), should a &lt;code&gt;remove_tree&lt;/code&gt; be interrupted, files that were originally in read-only mode may now have their permissions set to a read-write (or &quot;delete OK&quot;) mode.</source>
          <target state="translated">さらに、 &lt;code&gt;safe&lt;/code&gt; パラメータが設定されていない限り（または従来のインターフェースの3番目のパラメータがTRUEである場合）、 &lt;code&gt;remove_tree&lt;/code&gt; が中断された場合、元々読み取り専用モードであったファイルの権限が読み取り/書き込み（または「削除OK &quot;）モード。</target>
        </trans-unit>
        <trans-unit id="ec0f027d3baa565712bd5dc0ad0e80af4eb514d9" translate="yes" xml:space="preserve">
          <source>Additionally, you can enable and disable categories of warnings. You turn off the categories you want to ignore and you can still get other categories of warnings. See &lt;a href=&quot;perllexwarn&quot;&gt;perllexwarn&lt;/a&gt; for the complete details, including the category names and hierarchy.</source>
          <target state="translated">さらに、警告のカテゴリを有効または無効にすることができます。無視するカテゴリをオフにしても、他のカテゴリの警告を受け取ることができます。カテゴリ名や階層などの詳細については、&lt;a href=&quot;perllexwarn&quot;&gt;perllexwarn&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3f10369c70dcbc4071416e4238c5876b81c9796c" translate="yes" xml:space="preserve">
          <source>Additionally, you might want to provide the following two globals to allow auto-upgrading and auto-downgrading to work correctly:</source>
          <target state="translated">さらに、自動アップグレードと自動ダウングレー ドが正しく動作するように、以下の 2 つのグローバルを指定するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="0595fe59d92f01dd8f2cab1ee0be7afe3d67ccd0" translate="yes" xml:space="preserve">
          <source>Additionaly, on Solaris 8 and 9 you also need:</source>
          <target state="translated">加えて、Solaris 8 と 9 では、必要なものがあります。</target>
        </trans-unit>
        <trans-unit id="bf73559c41806dc25286227ff308976c154c29de" translate="yes" xml:space="preserve">
          <source>Additive Operators</source>
          <target state="translated">加法演算子</target>
        </trans-unit>
        <trans-unit id="15668d6e15430dae7c65fa496b4f2aa5393ff6b7" translate="yes" xml:space="preserve">
          <source>Address family constants used by the socket address structures, to pass to such functions as inet_pton() or getaddrinfo(), or are returned by such functions as sockaddr_family().</source>
          <target state="translated">ソケットアドレス構造体で使用されるアドレスファミリ定数で、inet_pton()や getaddrinfo()などの関数に渡すか、 sockaddr_family()などの関数から返される。</target>
        </trans-unit>
        <trans-unit id="ea43855ac57d81369dea84cf8dd61beb0a92ab13" translate="yes" xml:space="preserve">
          <source>Address to send copy of report to when sending report by mail. Defaults to the address of the local perl administrator (recorded when perl was built).</source>
          <target state="translated">レポートをメールで送信する際に、レポートのコピーを送信するアドレス。デフォルトはローカルのperl管理者のアドレス(perlがビルドされたときに記録された)。</target>
        </trans-unit>
        <trans-unit id="398491e08f855e6e51bbd01773f98e6f34b68ef0" translate="yes" xml:space="preserve">
          <source>Address to send copy of report to. Defaults to the address of the local perl administrator (recorded when perl was built).</source>
          <target state="translated">レポートのコピーを送信するアドレス。デフォルトはローカルのperl管理者のアドレス(perlがビルドされたときに記録された)。</target>
        </trans-unit>
        <trans-unit id="b175bc4484e38539ad4d908d25e38cc037576a19" translate="yes" xml:space="preserve">
          <source>Address to send the report to instead of saving to a file.</source>
          <target state="translated">ファイルに保存するのではなく、レポートを送信するアドレスを指定します。</target>
        </trans-unit>
        <trans-unit id="866089dee6e89f6a5b436348a98fb9411f98472d" translate="yes" xml:space="preserve">
          <source>Address to send the report to. Defaults to &lt;b&gt;perlbug@perl.org&lt;/b&gt;.</source>
          <target state="translated">レポートの送信先のアドレス。デフォルトは&lt;b&gt;perlbug@perl.org&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="6b59857dd57932d5d50e4861a06a2080338435ed" translate="yes" xml:space="preserve">
          <source>Address-of operator. (But see the &lt;code&gt;&quot;\&quot;&lt;/code&gt; operator for taking a reference.)</source>
          <target state="translated">アドレス演算子。（ただし、参照については &lt;code&gt;&quot;\&quot;&lt;/code&gt; 演算子を参照してください。）</target>
        </trans-unit>
        <trans-unit id="875b1b8e40002002efb28f1a8fa46b6af7e34564" translate="yes" xml:space="preserve">
          <source>AddressSanitizer</source>
          <target state="translated">AddressSanitizer</target>
        </trans-unit>
        <trans-unit id="720546a46914bdc348b07d8d18a6b57bacd973ae" translate="yes" xml:space="preserve">
          <source>AddressSanitizer (&quot;ASan&quot;) consists of a compiler instrumentation module and a run-time &lt;code&gt;malloc&lt;/code&gt; library. ASan is available for a variety of architectures, operating systems, and compilers (see project link below). It checks for unsafe memory usage, such as use after free and buffer overflow conditions, and is fast enough that you can easily compile your debugging or optimized perl with it. Modern versions of ASan check for memory leaks by default on most platforms, otherwise (e.g. x86_64 OS X) this feature can be enabled via &lt;code&gt;ASAN_OPTIONS=detect_leaks=1&lt;/code&gt;.</source>
          <target state="translated">AddressSanitizer（ &quot;ASan&quot;）は、コンパイラインストルメンテーションモジュールとランタイム &lt;code&gt;malloc&lt;/code&gt; ライブラリで構成されています。ASanは、さまざまなアーキテクチャ、オペレーティングシステム、およびコンパイラで使用できます（以下のプロジェクトリンクを参照）。解放後の使用やバッファオーバーフロー状態など、安全でないメモリ使用量をチェックし、デバッグや最適化されたperlを簡単にコンパイルできるほど高速です。最新バージョンのASanは、ほとんどのプラットフォームでデフォルトでメモリリークをチェックします。それ以外の場合（x86_64 OS Xなど）、この機能は &lt;code&gt;ASAN_OPTIONS=detect_leaks=1&lt;/code&gt; で有効にできます。</target>
        </trans-unit>
        <trans-unit id="97d2869e530035313b88d71ffdc660bf28a9cf95" translate="yes" xml:space="preserve">
          <source>AddressSanitizer is a clang and gcc extension, included in clang since v3.1 and gcc since v4.8. It checks illegal heap pointers, global pointers, stack pointers and use after free errors, and is fast enough that you can easily compile your debugging or optimized perl with it. It does not check memory leaks though. AddressSanitizer is available for Linux, Mac OS X and soon on Windows.</source>
          <target state="translated">AddressSanitizerはclangとgccの拡張機能で、clangはv3.1から、gccはv4.8から含まれています。不正なヒープポインタ、グローバルポインタ、スタックポインタ、フリーエラー後の使用をチェックします。ただし、メモリリークはチェックしません。AddressSanitizerはLinux、Mac OS X、そして近々Windowsでも利用可能です。</target>
        </trans-unit>
        <trans-unit id="f7a02385815ee9f53e4e4bdfc174f0a5de504071" translate="yes" xml:space="preserve">
          <source>AddressSanitizer will ignore functions listed in the &lt;code&gt;asan_ignore&lt;/code&gt; file. (This file should contain a short explanation of why each of the functions is listed.)</source>
          <target state="translated">AddressSanitizerは、 &lt;code&gt;asan_ignore&lt;/code&gt; ファイルにリストされている関数を無視します。（このファイルには、各関数がリストされている理由の簡単な説明が含まれている必要があります。）</target>
        </trans-unit>
        <trans-unit id="5be2ead2a35ea3568e7d0a94958a446ce541ca7c" translate="yes" xml:space="preserve">
          <source>Adds $y to $x and returns the result.</source>
          <target state="translated">x に $y を加算し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="975fc2f37ec74ac4dc4429c1af7095af2a49e10a" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;#line&lt;/code&gt; directives to the C output so error messages will look like they came from the original XS file. Default is true.</source>
          <target state="translated">&lt;code&gt;#line&lt;/code&gt; ディレクティブをC出力に追加して、エラーメッセージが元のXSファイルから送信されたように見えるようにします。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="14f679936dccdbe9d754f57ef3015e396a6c5718" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; to the C code. Default is false.</source>
          <target state="translated">Cコードに &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; を追加します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="9fbaf45d7bbf38840f610cf2fa4335deddb3f4a7" translate="yes" xml:space="preserve">
          <source>Adds a list of items onto the end of the queue.</source>
          <target state="translated">アイテムのリストをキューの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="ec725714a66d8e380fad7b545ed61fc8b85dbabf" translate="yes" xml:space="preserve">
          <source>Adds a name to a stash's internal list of effective names. See &lt;code&gt;&lt;a href=&quot;#hv_ename_delete&quot;&gt;&quot;hv_ename_delete&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">stashの有効な名前の内部リストに名前を追加します。 &lt;code&gt;&lt;a href=&quot;#hv_ename_delete&quot;&gt;&quot;hv_ename_delete&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="973f265e0df96f52e35c5a95591ee9281a6a4277" translate="yes" xml:space="preserve">
          <source>Adds a name to a stash's internal list of effective names. See &lt;code&gt;hv_ename_delete&lt;/code&gt; .</source>
          <target state="translated">stashの有効な名前の内部リストに名前を追加します。 &lt;code&gt;hv_ename_delete&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e689b98670881df4701aa3dac263f404709c80f2" translate="yes" xml:space="preserve">
          <source>Adds an action (Perl command) to happen after the prompt when you've just given a command to return to executing the script. A multi-line command may be entered by backslashing the newlines.</source>
          <target state="translated">プロンプトの後に、スクリプトの実行に戻るためのコマンドを入力したときに発生するアクション (Perl コマンド)を追加します。複数行のコマンドは、バックスラッシュで改行して入力することができます。</target>
        </trans-unit>
        <trans-unit id="6f66738644531c5b87f8955ebdca5064179de491" translate="yes" xml:space="preserve">
          <source>Adds an entry to an existing</source>
          <target state="translated">既存の</target>
        </trans-unit>
        <trans-unit id="0de7670702a5255a31f66440c4b7be5b815e4074" translate="yes" xml:space="preserve">
          <source>Adds directives to point C preprocessor to the right place when handling #include &amp;lt;sys/foo.h&amp;gt; directives. Also constructs CC command line a bit differently than MM_Unix method.</source>
          <target state="translated">#include &amp;lt;sys / foo.h&amp;gt;ディレクティブを処理するときに、Cプリプロセッサーを適切な場所にポイントするディレクティブを追加します。また、CCコマンドラインをMM_Unixメソッドとは少し異なる方法で構築します。</target>
        </trans-unit>
        <trans-unit id="57db6ceb50b20e26da1bd06687e1abc05f545a8e" translate="yes" xml:space="preserve">
          <source>Adds exception handling stubs to the C code.</source>
          <target state="translated">Cコードに例外処理のスタブを追加します。</target>
        </trans-unit>
        <trans-unit id="75f4dd4f96db4d1994f4da6375a60458e7848772" translate="yes" xml:space="preserve">
          <source>Adds exception handling stubs to the C code. Default is false.</source>
          <target state="translated">例外処理のスタブを C コードに追加します。デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="08e35eb9eb9d94e801f674df113993ee8f45e75c" translate="yes" xml:space="preserve">
          <source>Adds magic to a hash. See &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハッシュに魔法を追加します。 &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="4af44986ac261800435ec27f11809711c0f2176e" translate="yes" xml:space="preserve">
          <source>Adds magic to a hash. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">ハッシュに魔法を追加します。 &lt;code&gt;sv_magic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="30db45551b4c37d676e3abf84ca96116307108ed" translate="yes" xml:space="preserve">
          <source>Adds magic to an SV, upgrading it if necessary. Applies the supplied &lt;code&gt;vtable&lt;/code&gt; and returns a pointer to the magic added.</source>
          <target state="translated">SVに魔法を追加し、必要に応じてアップグレードします。提供された &lt;code&gt;vtable&lt;/code&gt; を適用し、追加されたマジックへのポインターを返します。</target>
        </trans-unit>
        <trans-unit id="5d4c5e94cf59f9802d65e1e2f74c4b0b68104c99" translate="yes" xml:space="preserve">
          <source>Adds magic to an SV, upgrading it if necessary. Applies the supplied vtable and returns a pointer to the magic added.</source>
          <target state="translated">SV にマジックを追加し、必要に応じてアップグレードします。与えられた vtable を適用し、追加されたマジックへのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="28665dcfafc5d1482673492d1c1b2b0ccfb32625" translate="yes" xml:space="preserve">
          <source>Adds magic to an SV. First upgrades &lt;code&gt;sv&lt;/code&gt; to type &lt;code&gt;SVt_PVMG&lt;/code&gt; if necessary, then adds a new magic item of type &lt;code&gt;how&lt;/code&gt; to the head of the magic list.</source>
          <target state="translated">SVに魔法を追加します。最初のアップグレードは &lt;code&gt;sv&lt;/code&gt; 入力する &lt;code&gt;SVt_PVMG&lt;/code&gt; を必要に応じて、そのタイプの新しい魔法のアイテム追加 &lt;code&gt;how&lt;/code&gt; 魔法のリストの先頭に。</target>
        </trans-unit>
        <trans-unit id="542cadc025698f26c94694489350a3b0f8078ab7" translate="yes" xml:space="preserve">
          <source>Adds the UTF-8 representation of the native code point &lt;code&gt;uv&lt;/code&gt; to the end of the string &lt;code&gt;d&lt;/code&gt; ; &lt;code&gt;d&lt;/code&gt; should have at least &lt;code&gt;UVCHR_SKIP(uv)+1&lt;/code&gt; (up to &lt;code&gt;UTF8_MAXBYTES+1&lt;/code&gt; ) free bytes available. The return value is the pointer to the byte after the end of the new character. In other words,</source>
          <target state="translated">ネイティブコードポイント &lt;code&gt;uv&lt;/code&gt; のUTF-8表現を文字列 &lt;code&gt;d&lt;/code&gt; の末尾に追加します。 &lt;code&gt;d&lt;/code&gt; には、少なくとも &lt;code&gt;UVCHR_SKIP(uv)+1&lt;/code&gt; （最大 &lt;code&gt;UTF8_MAXBYTES+1&lt;/code&gt; ）の使用可能な空きバイトが必要です。戻り値は、新しい文字の終わりの後のバイトへのポインタです。言い換えると、</target>
        </trans-unit>
        <trans-unit id="ce163b2b2d4c6598625a233d6a9cfb6206d4b8ba" translate="yes" xml:space="preserve">
          <source>Adds the UTF-8 representation of the native code point &lt;code&gt;uv&lt;/code&gt; to the end of the string &lt;code&gt;d&lt;/code&gt;; &lt;code&gt;d&lt;/code&gt; should have at least &lt;code&gt;UVCHR_SKIP(uv)+1&lt;/code&gt; (up to &lt;code&gt;UTF8_MAXBYTES+1&lt;/code&gt;) free bytes available. The return value is the pointer to the byte after the end of the new character. In other words,</source>
          <target state="translated">ネイティブコードポイント &lt;code&gt;uv&lt;/code&gt; のUTF-8表現を文字列 &lt;code&gt;d&lt;/code&gt; の末尾に追加します。 &lt;code&gt;d&lt;/code&gt; には、少なくとも &lt;code&gt;UVCHR_SKIP(uv)+1&lt;/code&gt; （最大 &lt;code&gt;UTF8_MAXBYTES+1&lt;/code&gt; ）の空きバイトが使用可能である必要があります。戻り値は、新しい文字の終了後のバイトへのポインタです。言い換えると、</target>
        </trans-unit>
        <trans-unit id="05920eaea07a3bf7b3235f61833114608d265ccb" translate="yes" xml:space="preserve">
          <source>Adds the list of items to the queue at the specified index position (0 is the head of the list). Any existing items at and beyond that position are pushed back past the newly added items:</source>
          <target state="translated">指定されたインデックス位置 (0 がリストの先頭)に、項目のリストをキューに追加します。その位置以降の既存のアイテムは、新しく追加されたアイテムの前に押し戻されます。</target>
        </trans-unit>
        <trans-unit id="0e0d3dac3482cf17fed1b9381fe12a1473ad738e" translate="yes" xml:space="preserve">
          <source>Adds the standard Module prologue lines</source>
          <target state="translated">標準的なモジュールのプロローグ行を追加します。</target>
        </trans-unit>
        <trans-unit id="e8de0b7636a50e6e023d32d6c6819a0178b632ba" translate="yes" xml:space="preserve">
          <source>Adds the supplied opset to the current opmask. Note that there is currently</source>
          <target state="translated">指定した opset を現在の opmask に追加します。現在のところ</target>
        </trans-unit>
        <trans-unit id="ad3dde36a3137b653e95b59ad8f34b7ac4e19623" translate="yes" xml:space="preserve">
          <source>Adjust the read pointer and count of bytes to match &lt;code&gt;ptr&lt;/code&gt; and/or &lt;code&gt;cnt&lt;/code&gt; . The application (or layer above) must ensure they are consistent. (Checking is allowed by the paranoid.)</source>
          <target state="translated">読み取りポインタとバイト数を調整して、 &lt;code&gt;ptr&lt;/code&gt; や &lt;code&gt;cnt&lt;/code&gt; と一致させます。アプリケーション（またはその上のレイヤー）は、それらの整合性を確保する必要があります。（チェックは偏執狂によって許可されています。）</target>
        </trans-unit>
        <trans-unit id="bfb3f75d00aa48b9559d9821194371bf47ab39b5" translate="yes" xml:space="preserve">
          <source>Adjust the read pointer and count of bytes to match &lt;code&gt;ptr&lt;/code&gt; and/or &lt;code&gt;cnt&lt;/code&gt;. The application (or layer above) must ensure they are consistent. (Checking is allowed by the paranoid.)</source>
          <target state="translated">読み取りポインタとバイト数を調整して、 &lt;code&gt;ptr&lt;/code&gt; や &lt;code&gt;cnt&lt;/code&gt; に一致させます。アプリケーション（または上のレイヤー）は、それらが一貫していることを確認する必要があります。（チェックは妄想によって許可されます。）</target>
        </trans-unit>
        <trans-unit id="02eff1841c4085ce501a79933ae5da5167e9d1b8" translate="yes" xml:space="preserve">
          <source>Adjusting the system clock (either manually or by services like ntp) may cause problems, especially for long running programs that assume a monotonously increasing time (note that all platforms do not adjust time as gracefully as UNIX ntp does). For example in Win32 (and derived platforms like Cygwin and MinGW) the Time::HiRes::time() may temporarily drift off from the system clock (and the original time()) by up to 0.5 seconds. Time::HiRes will notice this eventually and recalibrate. Note that since Time::HiRes 1.77 the clock_gettime(CLOCK_MONOTONIC) might help in this (in case your system supports CLOCK_MONOTONIC).</source>
          <target state="translated">システムクロックを(手動またはntpのようなサービスで)調整すると問題が発生する可能性があります。例えば、Win32(およびCygwinやMinGWなどの派生プラットフォーム)では、Time::HiRes::time()が一時的にシステムクロック(および元のtime())から0.5秒までずれてしまうことがあります。Time::HiResは最終的にこれに気付き、再調整します。Time::HiRes 1.77以降では、clock_gettime(CLOCK_MONOTONIC)がこの場合に役立つかもしれないことに注意してください(お使いのシステムがCLOCK_MONOTONICをサポートしている場合)。</target>
        </trans-unit>
        <trans-unit id="e8d0942ed6347577c01feddee9c6edaf4ffde5a8" translate="yes" xml:space="preserve">
          <source>Adjustments are made for Borland's quirks needing -L to come first.</source>
          <target state="translated">ボーランドのクセには-Lが先に来るように調整されています。</target>
        </trans-unit>
        <trans-unit id="b8be3d1264310c3b8c848d4b90d5206179a40cc4" translate="yes" xml:space="preserve">
          <source>Administration</source>
          <target state="translated">Administration</target>
        </trans-unit>
        <trans-unit id="1eda23758be9e36e5e0d2a6a87de584aaca0193f" translate="yes" xml:space="preserve">
          <source>Administrator</source>
          <target state="translated">Administrator</target>
        </trans-unit>
        <trans-unit id="e6a9cb58c1721e13f0512658aa83841944c325f3" translate="yes" xml:space="preserve">
          <source>Admittedly, it's a little silly to use the curlies in this case, but the BLOCK can contain any arbitrary expression, in particular, subscripted expressions:</source>
          <target state="translated">確かに、この場合にカーリーを使うのは少し馬鹿げていますが、blockには任意の式、特に添え字式を入れることができます。</target>
        </trans-unit>
        <trans-unit id="3f189252acfcc32504fd3bc24de8b377486842c5" translate="yes" xml:space="preserve">
          <source>Adrian Howard</source>
          <target state="translated">エイドリアン・ハワード</target>
        </trans-unit>
        <trans-unit id="96731dbaea6a5720dd33b64dc334ff765eec736a" translate="yes" xml:space="preserve">
          <source>Advanced Features</source>
          <target state="translated">高度な機能</target>
        </trans-unit>
        <trans-unit id="64e04a8cbc4193de6f65fd1544695b7f543269ac" translate="yes" xml:space="preserve">
          <source>Advanced Possibilities</source>
          <target state="translated">高度な可能性</target>
        </trans-unit>
        <trans-unit id="a79e7b92e71c562343b0e0c5c252eadade25490c" translate="yes" xml:space="preserve">
          <source>Advanced Semaphores</source>
          <target state="translated">高度なセマフォ</target>
        </trans-unit>
        <trans-unit id="0d7049ed333121f6ad65eac902c5a2d1cec948e8" translate="yes" xml:space="preserve">
          <source>Advanced Topics</source>
          <target state="translated">先進的なトピック</target>
        </trans-unit>
        <trans-unit id="bf4a7a601b6308a708d2d443ffbc2bef624ad7f8" translate="yes" xml:space="preserve">
          <source>Advanced methods</source>
          <target state="translated">高度な方法</target>
        </trans-unit>
        <trans-unit id="d9df49ea7247202f690510939185a43595241825" translate="yes" xml:space="preserve">
          <source>Affects screen appearance of the command line (see &lt;a href=&quot;Term::ReadLine&quot;&gt;Term::ReadLine&lt;/a&gt;). There is currently no way to disable these, which can render some output illegible on some displays, or with some pagers. This is considered a bug.</source>
          <target state="translated">コマンドラインの画面の外観に影響します（&lt;a href=&quot;Term::ReadLine&quot;&gt;Term :: ReadLineを&lt;/a&gt;参照）。現在、これらを無効にする方法はありません。これにより、一部のディスプレイや一部のポケットベルで一部の出力が判読できなくなる可能性があります。これはバグと見なされます。</target>
        </trans-unit>
        <trans-unit id="5646362e1c7206c24de0aa69540a4070b9eef4ad" translate="yes" xml:space="preserve">
          <source>Affects screen appearance of the command line (see &lt;a href=&quot;term/readline&quot;&gt;Term::ReadLine&lt;/a&gt;). There is currently no way to disable these, which can render some output illegible on some displays, or with some pagers. This is considered a bug.</source>
          <target state="translated">コマンドラインの画面表示に影響します（&lt;a href=&quot;term/readline&quot;&gt;Term :: ReadLineを&lt;/a&gt;参照）。現在、これらを無効にする方法はありません。これにより、一部のディスプレイまたは一部のページャーで一部の出力が読みにくくなる場合があります。これはバグと見なされます。</target>
        </trans-unit>
        <trans-unit id="7ac09ae75b5fa764eed3b6f049863915415754f4" translate="yes" xml:space="preserve">
          <source>Affects the printing of messages upon entry and exit from subroutines. If &lt;code&gt;frame &amp;amp; 2&lt;/code&gt; is false, messages are printed on entry only. (Printing on exit might be useful if interspersed with other messages.)</source>
          <target state="translated">サブルーチンの開始時と終了時のメッセージの印刷に影響します。 &lt;code&gt;frame &amp;amp; 2&lt;/code&gt; がfalseの場合、メッセージは入力時にのみ印刷されます。（出口での印刷は、他のメッセージが散在している場合に役立つことがあります。）</target>
        </trans-unit>
        <trans-unit id="1d35114b8f34bf6224a46dac8d98b4ed3594b7f5" translate="yes" xml:space="preserve">
          <source>Africa</source>
          <target state="translated">Africa</target>
        </trans-unit>
        <trans-unit id="79ba5e1b3f99abfd54ef8d839ba12bd2ac4d79cb" translate="yes" xml:space="preserve">
          <source>After</source>
          <target state="translated">After</target>
        </trans-unit>
        <trans-unit id="5e27cc6169c8e48bde18cf63d6d83809f2b8a134" translate="yes" xml:space="preserve">
          <source>After &lt;a href=&quot;#each-HASH&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; has returned all entries from the hash or array, the next call to &lt;a href=&quot;#each-HASH&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; returns the empty list in list context and &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; in scalar context; the next call following</source>
          <target state="translated">後&lt;a href=&quot;#each-HASH&quot;&gt; &lt;code&gt;each&lt;/code&gt; &lt;/a&gt;の次の呼び出し、ハッシュや配列からすべてのエントリを返した&lt;a href=&quot;#each-HASH&quot;&gt; &lt;code&gt;each&lt;/code&gt; &lt;/a&gt;リストコンテキストとに戻るに空のリストを&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; を&lt;/a&gt;スカラーコンテキストでは、次の呼び出し</target>
        </trans-unit>
        <trans-unit id="87099a71e0044f05a4ae4680480a6ca9151bafd1" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Math::BigFloat ':constant'&lt;/code&gt; all the floating point constants in the given scope are converted to &lt;code&gt;Math::BigFloat&lt;/code&gt; . This conversion happens at compile time.</source>
          <target state="translated">後 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Math::BigFloat ':constant'&lt;/code&gt; 指定されたスコープ内のすべての浮動小数点定数はに変換されている &lt;code&gt;Math::BigFloat&lt;/code&gt; 。この変換はコンパイル時に行われます。</target>
        </trans-unit>
        <trans-unit id="809e579562da8a6c62758fa5638ee2d5856559cc" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Math::BigInt ':constant'&lt;/code&gt; all the &lt;b&gt;integer&lt;/b&gt; decimal, hexadecimal and binary constants in the given scope are converted to &lt;code&gt;Math::BigInt&lt;/code&gt; . This conversion happens at compile time.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Math::BigInt ':constant'&lt;/code&gt; &lt;a href=&quot;../functions/use&quot;&gt;使用した&lt;/a&gt;後、指定されたスコープ内のすべての&lt;b&gt;整数の&lt;/b&gt; 10進数、16進数、および2進定数が &lt;code&gt;Math::BigInt&lt;/code&gt; 変換されます。この変換はコンパイル時に行われます。</target>
        </trans-unit>
        <trans-unit id="dc94e5687372ef5e696852ffc210ec8b3418a842" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; has returned all entries from the hash or array, the next call to &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; returns the empty list in list context and &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context; the next call following</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; がハッシュまたは配列からすべてのエントリを返した後、次に &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 呼び出すと、リストコンテキストでは空のリストが返され、スカラーコンテキストでは &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。次の呼び出し</target>
        </trans-unit>
        <trans-unit id="655e7d0919e193463d83e3f9f9d5abefb149c7ea" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; has returned all entries from the hash or array, the next call to &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; returns the empty list in list context and &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context; the next call following</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; がハッシュまたは配列からすべてのエントリを返した後、次に &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 呼び出すと、リストコンテキストでは空のリストが返され、スカラーコンテキストでは &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。次の呼び出し</target>
        </trans-unit>
        <trans-unit id="e46798ad4d049ac6cc5760809be00336e1d1b9b6" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;use Math::BigFloat ':constant'&lt;/code&gt; all the floating point constants in the given scope are converted to &lt;code&gt;Math::BigFloat&lt;/code&gt;. This conversion happens at compile time.</source>
          <target state="translated">&lt;code&gt;use Math::BigFloat ':constant'&lt;/code&gt; 後、指定されたスコープ内のすべての浮動小数点定数が &lt;code&gt;Math::BigFloat&lt;/code&gt; 変換されます。この変換はコンパイル時に行われます。</target>
        </trans-unit>
        <trans-unit id="4a5b2a2330b7b8678df243047f65b93b3e2a46bc" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;use Math::BigInt ':constant'&lt;/code&gt; all the &lt;b&gt;integer&lt;/b&gt; decimal, hexadecimal and binary constants in the given scope are converted to &lt;code&gt;Math::BigInt&lt;/code&gt;. This conversion happens at compile time.</source>
          <target state="translated">&lt;code&gt;use Math::BigInt ':constant'&lt;/code&gt; 後、指定されたスコープ内のすべての&lt;b&gt;整数の&lt;/b&gt;10進数、16進数、および2進数の定数が &lt;code&gt;Math::BigInt&lt;/code&gt; 変換されます。この変換はコンパイル時に行われます。</target>
        </trans-unit>
        <trans-unit id="7a43cbb4995a282f39330c5379623f425850e587" translate="yes" xml:space="preserve">
          <source>After CPAN RT #36136 (&lt;a href=&quot;https://rt.cpan.org/Ticket/Display.html?id=36136&quot;&gt;https://rt.cpan.org/Ticket/Display.html?id=36136&lt;/a&gt;)</source>
          <target state="translated">CPAN RT＃36136の後（&lt;a href=&quot;https://rt.cpan.org/Ticket/Display.html?id=36136&quot;&gt;https://rt.cpan.org/Ticket/Display.html?id=36136&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="1d724f064157a1afcae77bb02216759e4c7bf880" translate="yes" xml:space="preserve">
          <source>After a match against some variable &lt;code&gt;$var&lt;/code&gt; :</source>
          <target state="translated">いくつかの変数 &lt;code&gt;$var&lt;/code&gt; 一致した後：</target>
        </trans-unit>
        <trans-unit id="a0a346767abcc70b84fbc11dca21132f94bd0d42" translate="yes" xml:space="preserve">
          <source>After a match against some variable &lt;code&gt;$var&lt;/code&gt;:</source>
          <target state="translated">いくつかの変数 &lt;code&gt;$var&lt;/code&gt; 一致後：</target>
        </trans-unit>
        <trans-unit id="11d9dfb79da5f263a331eb311ab5576afc42a4b9" translate="yes" xml:space="preserve">
          <source>After a proper &lt;code&gt;POSIX::setlocale()&lt;/code&gt; call, and within the scope of a &lt;code&gt;use locale&lt;/code&gt; form that includes numerics, Perl obeys the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale information, which controls an application's idea of how numbers should be formatted for human readability. In most implementations the only effect is to change the character used for the decimal point--perhaps from &quot;.&quot; to &quot;,&quot;. The functions aren't aware of such niceties as thousands separation and so on. (See &lt;a href=&quot;#The-localeconv-function&quot;&gt;&quot;The localeconv function&quot;&lt;/a&gt; if you care about these things.)</source>
          <target state="translated">適切な &lt;code&gt;POSIX::setlocale()&lt;/code&gt; 呼び出しの後、数値を含む &lt;code&gt;use locale&lt;/code&gt; 形式の使用の範囲内で、Perlは &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール情報に従います。これは、人間が読みやすいように数値をフォーマットする方法に関するアプリケーションの考え方を制御します。ほとんどの実装では、唯一の効果は小数点に使用される文字を変更することです-おそらく「。」から。 「、」へ。関数は、数千の分離などの優れた点を認識していません。 （これらのことに&lt;a href=&quot;#The-localeconv-function&quot;&gt;関心がある場合は、「localeconv関数」を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="b84c3333b0e2cfaba4160f029890fe89d06d1d06" translate="yes" xml:space="preserve">
          <source>After a proper &lt;code&gt;POSIX::setlocale()&lt;/code&gt; call, and within the scope of of a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes numerics, Perl obeys the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale information, which controls an application's idea of how numbers should be formatted for human readability. In most implementations the only effect is to change the character used for the decimal point--perhaps from &quot;.&quot; to &quot;,&quot;. The functions aren't aware of such niceties as thousands separation and so on. (See &lt;a href=&quot;#The-localeconv-function&quot;&gt;The localeconv function&lt;/a&gt; if you care about these things.)</source>
          <target state="translated">適切な &lt;code&gt;POSIX::setlocale()&lt;/code&gt; 呼び出しの後、数値を含む &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; フォームのスコープ内で、Perlは &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール情報に従います。ほとんどの実装では、唯一の効果は、おそらく「。」から、小数点に使用される文字を変更することです。「、」に。関数は、何千もの分離などの優れた機能を認識していません。（これらについて気に&lt;a href=&quot;#The-localeconv-function&quot;&gt;する&lt;/a&gt;場合は、localeconv関数を参照してください。）</target>
        </trans-unit>
        <trans-unit id="1775073c0fe50242e57a96b412a98f0e94cc679a" translate="yes" xml:space="preserve">
          <source>After a successful compilation, you'll be able to use</source>
          <target state="translated">コンパイルが成功したら</target>
        </trans-unit>
        <trans-unit id="2e40e98b07f6b8de8575ba117b518f3063ffd7d8" translate="yes" xml:space="preserve">
          <source>After a successful send with &lt;code&gt;$to&lt;/code&gt;, further calls to &lt;code&gt;send&lt;/code&gt; on an unconnected socket without &lt;code&gt;$to&lt;/code&gt; will send to the same address, and &lt;code&gt;$to&lt;/code&gt; will be used as the result of &lt;a href=&quot;IO::Socket#peername&quot;&gt;&quot;peername&quot; in IO::Socket&lt;/a&gt;.</source>
          <target state="translated">とに成功し、送信後 &lt;code&gt;$to&lt;/code&gt; 、さらに通話をするために &lt;code&gt;send&lt;/code&gt; せずに接続されていないソケットに &lt;code&gt;$to&lt;/code&gt; 同じアドレスに送信されます、そして &lt;code&gt;$to&lt;/code&gt; の結果として使用される&lt;a href=&quot;IO::Socket#peername&quot;&gt;IO ::ソケットで「ピア名」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f087a68cf0ba68c94dea17e31581c5258e5a685a" translate="yes" xml:space="preserve">
          <source>After all, the best thing about this pragma is that you don't have to resort to \x{....} just to spell your name in a native encoding. So feel free to put your strings in your encoding in quotes and regexes.</source>
          <target state="translated">結局のところ、このpragmaの一番の利点は、ネイティブエンコーディングで自分の名前を綴るためだけに \x{....}に頼る必要がないということです。ですから、エンコーディングの文字列は引用符や正規表現で自由に記述してください。</target>
        </trans-unit>
        <trans-unit id="7593ddf636c03d07a5c407ca6961ab2d5ad931e8" translate="yes" xml:space="preserve">
          <source>After an environment variable is tied, merely use it like a normal variable. You may access its value</source>
          <target state="translated">環境変数が紐付けられた後は、通常の変数と同じように使用するだけです。その値にアクセスするには</target>
        </trans-unit>
        <trans-unit id="755e56a66bf3563f2fb9151f704977af6151c9b5" translate="yes" xml:space="preserve">
          <source>After an extension has been built and before it is installed it may be desirable to test it bypassing &lt;code&gt;make test&lt;/code&gt; . By adding</source>
          <target state="translated">拡張機能がビルドされた後、インストールされる前に、 &lt;code&gt;make test&lt;/code&gt; をバイパスしてテストすることが望ましい場合があります。追加することにより</target>
        </trans-unit>
        <trans-unit id="304be73f457497da9b044b938bde3acc398b9d4c" translate="yes" xml:space="preserve">
          <source>After an extension has been built and before it is installed it may be desirable to test it bypassing &lt;code&gt;make test&lt;/code&gt;. By adding</source>
          <target state="translated">拡張機能が構築された後、インストールされる前に、maketestをバイパスし &lt;code&gt;make test&lt;/code&gt; することが望ましい場合があります。追加することにより</target>
        </trans-unit>
        <trans-unit id="82f653c370563b01ec9f101f2aaad77e03914b8a" translate="yes" xml:space="preserve">
          <source>After command line parsing the following attributes reflect the values of the corresponding command line switches. They may be altered before calling &lt;code&gt;run&lt;/code&gt; .</source>
          <target state="translated">コマンドラインの解析後、次の属性は、対応するコマンドラインスイッチの値を反映しています。 &lt;code&gt;run&lt;/code&gt; を呼び出す前に変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="0c132e008fbe1fb312b65ecf008e8f7d599a2076" translate="yes" xml:space="preserve">
          <source>After command line parsing the following attributes reflect the values of the corresponding command line switches. They may be altered before calling &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="translated">コマンドライン解析後、次の属性は対応するコマンドラインスイッチの値を反映します。 &lt;code&gt;run&lt;/code&gt; を呼び出す前に変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="5e251b544ae28a039470aaf55a5b7b59f40f8190" translate="yes" xml:space="preserve">
          <source>After each &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;d file is compiled, but before it is executed, &lt;code&gt;DB::postponed(*{&quot;_&amp;lt;$filename&quot;})&lt;/code&gt; is called if the subroutine &lt;code&gt;DB::postponed&lt;/code&gt; exists. Here, the $filename is the expanded name of the &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;d file, as found in the values of %INC.</source>
          <target state="translated">それぞれの &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; dファイルがコンパイルされた後、それが実行される前に、サブルーチン &lt;code&gt;DB::postponed&lt;/code&gt; が存在する場合、 &lt;code&gt;DB::postponed(*{&quot;_&amp;lt;$filename&quot;})&lt;/code&gt; が呼び出されます。ここで、$ filenameは、％INCの値にある &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; dファイルの拡張名です。</target>
        </trans-unit>
        <trans-unit id="2e3674642d4245a266e59b17c4b1e94d7c037d9a" translate="yes" xml:space="preserve">
          <source>After each &lt;code&gt;require&lt;/code&gt;d file is compiled, but before it is executed, &lt;code&gt;DB::postponed(*{&quot;_&amp;lt;$filename&quot;})&lt;/code&gt; is called if the subroutine &lt;code&gt;DB::postponed&lt;/code&gt; exists. Here, the $filename is the expanded name of the &lt;code&gt;require&lt;/code&gt;d file, as found in the values of %INC.</source>
          <target state="translated">それぞれの後 &lt;code&gt;require&lt;/code&gt; Dファイルがコンパイルされ、それが実行される前に、 &lt;code&gt;DB::postponed(*{&quot;_&amp;lt;$filename&quot;})&lt;/code&gt; サブルーチン場合に呼び出される &lt;code&gt;DB::postponed&lt;/code&gt; 存在します。ここでは、$ファイル名はの拡張名である &lt;code&gt;require&lt;/code&gt; ％INCの値に見られるような、Dファイルを。</target>
        </trans-unit>
        <trans-unit id="e73cebac8df604a03fa2c93d2c658b08259d94b6" translate="yes" xml:space="preserve">
          <source>After each subroutine &lt;code&gt;subname&lt;/code&gt; is compiled, the existence of &lt;code&gt;$DB::postponed{subname}&lt;/code&gt; is checked. If this key exists, &lt;code&gt;DB::postponed(subname)&lt;/code&gt; is called if the &lt;code&gt;DB::postponed&lt;/code&gt; subroutine also exists.</source>
          <target state="translated">各サブルーチンの &lt;code&gt;subname&lt;/code&gt; がコンパイルされた後、 &lt;code&gt;$DB::postponed{subname}&lt;/code&gt; がチェックされます。このキーが存在し、 &lt;code&gt;DB::postponed(subname)&lt;/code&gt; は、 &lt;code&gt;DB::postponed&lt;/code&gt; サブルーチンも存在する場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e09c67a58e395afd52ffb2f20be8dce115f5694f" translate="yes" xml:space="preserve">
          <source>After each such removal you need to rerun the &lt;code&gt;Makefile.PL&lt;/code&gt; /&lt;code&gt;make&lt;/code&gt; process; usually this procedure converges soon. (But be sure to convert all the necessary external C libraries from</source>
          <target state="translated">そのような各削除の後、 &lt;code&gt;Makefile.PL&lt;/code&gt; / &lt;code&gt;make&lt;/code&gt; プロセスを再実行する必要があります。通常、この手順はすぐに収束します。（ただし、必要なすべての外部Cライブラリを</target>
        </trans-unit>
        <trans-unit id="a3a3a61b98b00b6b4e7a4b525c38605f6954e6af" translate="yes" xml:space="preserve">
          <source>After each such removal you need to rerun the &lt;code&gt;Makefile.PL&lt;/code&gt;/&lt;code&gt;make&lt;/code&gt; process; usually this procedure converges soon. (But be sure to convert all the necessary external C libraries from</source>
          <target state="translated">このような削除を行うたびに、 &lt;code&gt;Makefile.PL&lt;/code&gt; / &lt;code&gt;make&lt;/code&gt; プロセスを再実行する必要があります。通常、この手順はすぐに収束します。（ただし、必要なすべての外部Cライブラリを</target>
        </trans-unit>
        <trans-unit id="eb84d48b7946333a20d799fbde5105dfdef9cef8" translate="yes" xml:space="preserve">
          <source>After extracting the archive you copy the whole directory tree to your EBCDIC filesystem. &lt;b&gt;This time you use I/O-conversion&lt;/b&gt;:</source>
          <target state="translated">アーカイブを抽出したら、ディレクトリツリー全体をEBCDICファイルシステムにコピーします。&lt;b&gt;今回はI / O変換を使用します&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="19dac0c58c8882858862b2f71b6cf8f32d646112" translate="yes" xml:space="preserve">
          <source>After having failed to remove a directory, &lt;code&gt;remove_tree&lt;/code&gt; was unable to restore its permissions from a permissive state back to a possibly more restrictive setting. (Permissions given in octal).</source>
          <target state="translated">ディレクトリの削除に失敗した後、 &lt;code&gt;remove_tree&lt;/code&gt; は、そのアクセス許可を許可状態からより制限的な設定に戻すことができませんでした。（許可は8進数で与えられます）。</target>
        </trans-unit>
        <trans-unit id="82bcd3184999ba561b43a537f2cc4ce40931101a" translate="yes" xml:space="preserve">
          <source>After having failed to remove a file, &lt;code&gt;remove_tree&lt;/code&gt; was also unable to restore the permissions on the file to a possibly less permissive setting. (Permissions given in octal).</source>
          <target state="translated">ファイルの削除に失敗した後、 &lt;code&gt;remove_tree&lt;/code&gt; は、ファイルのアクセス許可を、許容度の低い設定に復元することもできませんでした。（許可は8進数で与えられます）。</target>
        </trans-unit>
        <trans-unit id="23dac87df7f1fec6e0cffc03d2d5c4ff05ad76e5" translate="yes" xml:space="preserve">
          <source>After having this in the first part of .xs file, the &quot;Perl glue&quot; part becomes as simple as</source>
          <target state="translated">これを .xs ファイルの最初の部分に入れておくと、&quot;Perl glue&quot; の部分は次のように簡単になります。</target>
        </trans-unit>
        <trans-unit id="2a05093cdd7b4cafe419584a2ca96b5327589ac9" translate="yes" xml:space="preserve">
          <source>After importing this module, when you use localtime or gmtime in a scalar context, rather than getting an ordinary scalar string representing the date and time, you get a Time::Piece object, whose stringification happens to produce the same effect as the localtime and gmtime functions. There is also a new() constructor provided, which is the same as localtime(), except when passed a Time::Piece object, in which case it's a copy constructor. The following methods are available on the object:</source>
          <target state="translated">このモジュールをインポートした後、スカラコンテキストでlocaltimeやgmtimeを使用すると、日付と時刻を表す普通のスカラ文字列ではなく、Time::Pieceオブジェクトが得られ、その文字列化はlocaltimeやgmtime関数と同じ効果をもたらします。また、new()コンストラクタも用意されており、これはlocaltime()と同じですが、Time::Pieceオブジェクトを渡した場合はコピーコンストラクタになります。オブジェクトには以下のメソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="989e7c432fe7873dedca66b4efcb012930902467" translate="yes" xml:space="preserve">
          <source>After initialisation @dl_library_path can be manipulated by an application using push and unshift before calling dl_findfile(). Unshift can be used to add directories to the front of the search order either to save search time or to override libraries with the same name in the 'normal' directories.</source>
          <target state="translated">初期化後、dl_findfile()を呼び出す前にアプリケーションが push と unshift を使って @dl_library_path を操作することができます。unshift は、検索時間を節約するために、あるいは「通常の」ディレクトリ内の同名のライブラリをオーバーライドするために、ディレクトリを検索順序の先頭に追加するために使用できます。</target>
        </trans-unit>
        <trans-unit id="384ec4e8afa39c03a7ec5ccae79ea44f50b98953" translate="yes" xml:space="preserve">
          <source>After installation &amp;amp; testing processes will stabilize, information will be more precise.</source>
          <target state="translated">インストールとテストのプロセスが安定すると、情報はより正確になります。</target>
        </trans-unit>
        <trans-unit id="2fb4a06d67a8330d3fbde3ddb1645d723c7e519d" translate="yes" xml:space="preserve">
          <source>After installing cpan-mac, drop the module archive on the &lt;b&gt;untarzipme&lt;/b&gt; droplet, which will decompress and unpack for you.</source>
          <target state="translated">cpan-macをインストールした後、モジュールアーカイブを&lt;b&gt;untarzipme&lt;/b&gt;ドロップレットにドロップします。これにより、解凍および解凍されます。</target>
        </trans-unit>
        <trans-unit id="664cd686db2128a0a7a7f2b1ff03293801e0cf2e" translate="yes" xml:space="preserve">
          <source>After loading all typemap files or modules, it will merge them in the specified order and dump the result as an embeddable typemap.</source>
          <target state="translated">すべてのタイプマップファイルやモジュールをロードした後、指定した順番でマージし、その結果を埋め込み可能なタイプマップとしてダンプします。</target>
        </trans-unit>
        <trans-unit id="ebf5ce736aa7d823aae94b0fbadad820a15f7f86" translate="yes" xml:space="preserve">
          <source>After locating your program, Perl compiles the entire program to an internal form. If there are any compilation errors, execution of the program is not attempted. (This is unlike the typical shell script, which might run part-way through before finding a syntax error.)</source>
          <target state="translated">プログラムが見つかると、Perl はプログラム全体を内部形式にコンパイルします。コンパイルエラーがあった場合、プログラムの実行は試みられません。(これは典型的なシェルスクリプトとは異なり、構文エラーが見つかる前に途中で実行される可能性があります)。</target>
        </trans-unit>
        <trans-unit id="1f14adfb2016d61c246f44ef48217385e9787764" translate="yes" xml:space="preserve">
          <source>After much staring at the same piece of code and not seeing the wood for the trees for some time, we get a cup of coffee and try another approach. That is, we bring in the cavalry by giving perl the '&lt;b&gt;-d&lt;/b&gt;' switch on the command line:</source>
          <target state="translated">同じコードをじっくりと見つめ、しばらくの間、木の森を見なかった後、コーヒーを飲み、別のアプローチを試します。つまり、コマンドラインでperlに「&lt;b&gt;-d&lt;/b&gt;」スイッチを指定して、騎兵を取り込みます。</target>
        </trans-unit>
        <trans-unit id="2d5f14aa259693520ef9c62e9c5bcba015ca36fc" translate="yes" xml:space="preserve">
          <source>After normal processing of &lt;code&gt;-I&lt;/code&gt; switches from the command line, all the &lt;code&gt;-I&lt;/code&gt; switches in &lt;code&gt;PERL5OPT&lt;/code&gt; are extracted. They are processed from left to right instead of from right to left. Also note that while whitespace is allowed between a &lt;code&gt;-I&lt;/code&gt; and its directory on the command line, it is not allowed in &lt;code&gt;PERL5OPT&lt;/code&gt;.</source>
          <target state="translated">コマンドラインからの &lt;code&gt;-I&lt;/code&gt; スイッチの通常の処理の後、 &lt;code&gt;PERL5OPT&lt;/code&gt; のすべての &lt;code&gt;-I&lt;/code&gt; スイッチが抽出されます。それらは、右から左ではなく、左から右に処理されます。また、コマンドラインの &lt;code&gt;-I&lt;/code&gt; とそのディレクトリの間には空白が許可されていますが、 &lt;code&gt;PERL5OPT&lt;/code&gt; では許可されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="18a0e77e891c78ca559c5ae3cd50b454d32a350f" translate="yes" xml:space="preserve">
          <source>After normal processing of &lt;code&gt;-M&lt;/code&gt; switches from the command line, all the &lt;code&gt;-M&lt;/code&gt; switches in &lt;code&gt;PERL5OPT&lt;/code&gt; are extracted. They are processed from left to right,</source>
          <target state="translated">コマンドラインからの &lt;code&gt;-M&lt;/code&gt; スイッチの通常の処理の後、 &lt;code&gt;PERL5OPT&lt;/code&gt; のすべての &lt;code&gt;-M&lt;/code&gt; スイッチが抽出されます。それらは左から右に処理され、</target>
        </trans-unit>
        <trans-unit id="88dec92da58c74e4620b3cd18d97733f553fa72c" translate="yes" xml:space="preserve">
          <source>After parsing the TAP, there are many methods available to let you dig through the results and determine what is meaningful to you.</source>
          <target state="translated">TAPを解析した後、結果を掘り下げて自分にとって何が意味のあることなのかを判断させるための方法がたくさんあります。</target>
        </trans-unit>
        <trans-unit id="b702243123830daddfd7ae611e2d0a89f36745c6" translate="yes" xml:space="preserve">
          <source>After parsing, this method returns any warnings encountered during the parsing process.</source>
          <target state="translated">解析後、このメソッドは解析中に発生した警告を返します。</target>
        </trans-unit>
        <trans-unit id="cebf2b23cf8d6511ea00c15fa6633daadf530471" translate="yes" xml:space="preserve">
          <source>After positional parameters, additional arguments may be captured in a slurpy parameter. The simplest form of this is just an array variable:</source>
          <target state="translated">位置パラメータの後には、追加の引数をスラスラとしたパラメータで捕捉することができます。これの最も単純な形式は、単なる配列変数です。</target>
        </trans-unit>
        <trans-unit id="79faa591ef4aa9c1048ecde8617caf4bb4f6e42f" translate="yes" xml:space="preserve">
          <source>After processing of the error using</source>
          <target state="translated">を使用してエラー処理を行った後</target>
        </trans-unit>
        <trans-unit id="de441b5d72f77ccdab32c953f236dc0929b26bfe" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; explaining how to use &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; we can write this Perl function copying a file to standard output:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; の使用方法を説明する&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;を読んだ後、ファイルを標準出力にコピーするこのPerl関数を書くことができます：</target>
        </trans-unit>
        <trans-unit id="f4adb1e6f911a20c20bb1e25698cad848af9e465" translate="yes" xml:space="preserve">
          <source>After reading &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; explaining how to use &lt;code&gt;syscall&lt;/code&gt; we can write this Perl function copying a file to standard output:</source>
          <target state="translated">&lt;code&gt;syscall&lt;/code&gt; の使用方法を説明する&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;を読んだ後、ファイルを標準出力にコピーするこのPerl関数を書くことができます。</target>
        </trans-unit>
        <trans-unit id="79b88eddec153e8e34fbe3804e13971f48b0d9e3" translate="yes" xml:space="preserve">
          <source>After reading this document, you ought to read &lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt; too, then &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;.</source>
          <target state="translated">このドキュメントを読んだ&lt;a href=&quot;perlunifaq&quot;&gt;後&lt;/a&gt;は、perlunifaqも読んでから、&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;も読んでください。</target>
        </trans-unit>
        <trans-unit id="bde067e2f6a70b830351def3b30472931261a063" translate="yes" xml:space="preserve">
          <source>After that,</source>
          <target state="translated">その後のことです。</target>
        </trans-unit>
        <trans-unit id="7b937cd1c6408a87d424cf360c608a4cc3ea4ec3" translate="yes" xml:space="preserve">
          <source>After that, if the function is called in void context, it will simply return without doing anything further. This can be used to add more text in as many chunks as you want.</source>
          <target state="translated">その後、関数がvoidコンテキストで呼び出された場合は、それ以上何もせずに単純に戻ります。これを利用して、必要なだけのチャンクでテキストを追加することができます。</target>
        </trans-unit>
        <trans-unit id="33a6f21294ecc8bfb003384c79fe3378bc362230" translate="yes" xml:space="preserve">
          <source>After the call to &lt;code&gt;inflate&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inflate&lt;/code&gt; 呼び出しの後</target>
        </trans-unit>
        <trans-unit id="82f20576e0d7a55f07ad388dd8a48aef5935809c" translate="yes" xml:space="preserve">
          <source>After the compile tree for a subroutine (or for an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or a file) is created, an additional pass over the code is performed. This pass is neither top-down or bottom-up, but in the execution order (with additional complications for conditionals). Optimizations performed at this stage are subject to the same restrictions as in the pass 2.</source>
          <target state="translated">サブルーチン（または &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; またはファイル）のコンパイルツリーが作成された後、コードに対する追加のパスが実行されます。このパスはトップダウンでもボトムアップでもありませんが、実行順です（条件文の場合はさらに複雑になります）。この段階で実行される最適化には、パス2と同じ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="f910f23b6624c5903e97e3142db0b72e45cd1efc" translate="yes" xml:space="preserve">
          <source>After the compile tree for a subroutine (or for an &lt;code&gt;eval&lt;/code&gt; or a file) is created, an additional pass over the code is performed. This pass is neither top-down or bottom-up, but in the execution order (with additional complications for conditionals). Optimizations performed at this stage are subject to the same restrictions as in the pass 2.</source>
          <target state="translated">サブルーチン（または &lt;code&gt;eval&lt;/code&gt; またはファイル）のコンパイルツリーが作成された後、コードに対する追加のパスが実行されます。このパスはトップダウンでもボトムアップでもありませんが、実行順序です（条件文の複雑さが増します）。この段階で実行される最適化には、パス2と同じ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="030398b98f864699ff503816f85c07e82cf00fe5" translate="yes" xml:space="preserve">
          <source>After the match fails at the letter &lt;code&gt;a&lt;/code&gt; , perl resets &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; and the next match on the same string starts at the beginning.</source>
          <target state="translated">文字 &lt;code&gt;a&lt;/code&gt; で一致が失敗すると、perlは &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; をリセットし、同じ文字列の次の一致が最初から始まります。</target>
        </trans-unit>
        <trans-unit id="44718c4e9c72836902f7acc35cf27ebe46d1c162" translate="yes" xml:space="preserve">
          <source>After the match fails at the letter &lt;code&gt;a&lt;/code&gt;, perl resets &lt;code&gt;pos()&lt;/code&gt; and the next match on the same string starts at the beginning.</source>
          <target state="translated">文字 &lt;code&gt;a&lt;/code&gt; で一致が失敗した後、perlは &lt;code&gt;pos()&lt;/code&gt; をリセットし、同じ文字列での次の一致が最初から始まります。</target>
        </trans-unit>
        <trans-unit id="293c71dbddf34e425e567a76e0a301441dc6a8bc" translate="yes" xml:space="preserve">
          <source>After the rc file is read, the debugger reads the &lt;code&gt;$ENV{PERLDB_OPTS}&lt;/code&gt; environment variable and parses this as the remainder of a &quot;O ...&quot; line as one might enter at the debugger prompt. You may place the initialization options &lt;code&gt;TTY&lt;/code&gt; , &lt;code&gt;noTTY&lt;/code&gt; , &lt;code&gt;ReadLine&lt;/code&gt; , and &lt;code&gt;NonStop&lt;/code&gt; there.</source>
          <target state="translated">rcファイルが読み取られると、デバッガーは &lt;code&gt;$ENV{PERLDB_OPTS}&lt;/code&gt; 環境変数を読み取り、デバッガーのプロンプトで入力される可能性があるため、これを「O ...」行の残りとして解析します。初期化オプション &lt;code&gt;TTY&lt;/code&gt; 、 &lt;code&gt;noTTY&lt;/code&gt; 、 &lt;code&gt;ReadLine&lt;/code&gt; 、および &lt;code&gt;NonStop&lt;/code&gt; をそこに配置できます。</target>
        </trans-unit>
        <trans-unit id="60a827bfb9302456ecc7d7f0aaf91ba51ce11408" translate="yes" xml:space="preserve">
          <source>After the rc file is read, the debugger reads the &lt;code&gt;$ENV{PERLDB_OPTS}&lt;/code&gt; environment variable and parses this as the remainder of a &quot;O ...&quot; line as one might enter at the debugger prompt. You may place the initialization options &lt;code&gt;TTY&lt;/code&gt;, &lt;code&gt;noTTY&lt;/code&gt;, &lt;code&gt;ReadLine&lt;/code&gt;, and &lt;code&gt;NonStop&lt;/code&gt; there.</source>
          <target state="translated">rcファイルが読み取られた後、デバッガーは &lt;code&gt;$ENV{PERLDB_OPTS}&lt;/code&gt; 環境変数を読み取り、デバッガープロンプトで入力する可能性のある「O ...」行の残りとしてこれを解析します。初期化オプション &lt;code&gt;TTY&lt;/code&gt; 、 &lt;code&gt;noTTY&lt;/code&gt; 、 &lt;code&gt;ReadLine&lt;/code&gt; 、および &lt;code&gt;NonStop&lt;/code&gt; をそこに配置できます。</target>
        </trans-unit>
        <trans-unit id="9d1ae6b4dd14750a8aa5ca6bb9188a3898fd5425" translate="yes" xml:space="preserve">
          <source>After the rc file is read, the debugger reads the PERLDB_OPTS environment variable and uses it to set debugger options. The contents of this variable are treated as if they were the argument of an &lt;code&gt;o ...&lt;/code&gt; debugger command (q.v. in &lt;a href=&quot;perldebug#Configurable-Options&quot;&gt;&quot;Configurable Options&quot; in perldebug&lt;/a&gt;).</source>
          <target state="translated">rcファイルが読み取られた後、デバッガーはPERLDB_OPTS環境変数を読み取り、それを使用してデバッガーオプションを設定します。この変数の内容は、 &lt;code&gt;o ...&lt;/code&gt; デバッガコマンド（&lt;a href=&quot;perldebug#Configurable-Options&quot;&gt;perldebugの「構成可能なオプション」の&lt;/a&gt;qv）の引数であるかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="e899e5cdac5e0e6b4bee21b7339405a7360957f3" translate="yes" xml:space="preserve">
          <source>After the rc file is read, the debugger reads the PERLDB_OPTS environment variable and uses it to set debugger options. The contents of this variable are treated as if they were the argument of an &lt;code&gt;o ...&lt;/code&gt; debugger command (q.v. in &lt;a href=&quot;perldebug#Configurable-Options&quot;&gt;Configurable Options in perldebug&lt;/a&gt;).</source>
          <target state="translated">rcファイルが読み取られた後、デバッガーはPERLDB_OPTS環境変数を読み取り、それを使用してデバッガーオプションを設定します。この変数の内容は、それらが &lt;code&gt;o ...&lt;/code&gt; デバッガーコマンド（&lt;a href=&quot;perldebug#Configurable-Options&quot;&gt;perldebugの構成可能オプションの&lt;/a&gt; qv）の引数であるかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="5914d10f08f8ac8f77b44277a2b9190d62853c27" translate="yes" xml:space="preserve">
          <source>After the time-limited ban has been lifted, a third instance of unacceptable behavior will result in a further public warning. A fourth or subsequent instance will result in an indefinite ban. The rationale is that, in the face of an apparent refusal to change behavior, we must protect other community members from future unacceptable actions. The moderators may choose to lift an indefinite ban if the person in question affirms they will not transgress again.</source>
          <target state="translated">期限付きの禁止令が解除された後、3回目の容認できない行為があった場合は、さらに公開警告が行われます。4回目以降の行為は無期限の禁止措置となります。これは、明らかに行動を変えようとしない場合、他のコミュニティメンバーを将来の容認できない行動から保護しなければならないからです。司会者は、問題の人物が二度と違反をしないことを確認した場合、無期限の禁止令を解除することができます。</target>
        </trans-unit>
        <trans-unit id="48e96da87f1b22f4a662b486f469bd089c2d194f" translate="yes" xml:space="preserve">
          <source>After this you can direct your browser the file</source>
          <target state="translated">この後、あなたはあなたのブラウザにファイルを指示することができます</target>
        </trans-unit>
        <trans-unit id="047aa94c055cd198e88e38eec23f2d3fb520f816" translate="yes" xml:space="preserve">
          <source>After this you can either copy Perl from your operating system media (you will need at least the /System/Library/Perl and /usr/bin/perl), or rebuild Perl from the source code with &lt;code&gt;Configure -Dprefix=/usr
-Duseshrplib&lt;/code&gt; NOTE: the &lt;code&gt;-Dprefix=/usr&lt;/code&gt; to replace the system Perl works much better with Perl 5.8.1 and later, in Perl 5.8.0 the settings were not quite right.</source>
          <target state="translated">この後、オペレーティングシステムメディアからPerlをコピーするか（少なくとも/ System / Library / Perlおよび/ usr / bin / perlが必要です）、 &lt;code&gt;Configure -Dprefix=/usr -Duseshrplib&lt;/code&gt; 使用してソースコードからPerlを再構築します。注：システムを置き換える &lt;code&gt;-Dprefix=/usr&lt;/code&gt; Perlは、Perl 5.8.1以降でより適切に機能します。Perl5.8.0では、設定が正しくありませんでした。</target>
        </trans-unit>
        <trans-unit id="afc63f5dda4ecced4f5f45482623e56ea1f306ab" translate="yes" xml:space="preserve">
          <source>After you have built perl using the Configure script, ensure that you have modify and default write permission to &lt;code&gt;&amp;gt;system&amp;gt;ported&lt;/code&gt; and all subdirectories. Then type</source>
          <target state="translated">Configureスクリプトを使用してperlをビルドした後、 &lt;code&gt;&amp;gt;system&amp;gt;ported&lt;/code&gt; およびすべてのサブディレクトリに対する変更およびデフォルトの書き込み権限があることを確認してください。次に入力します</target>
        </trans-unit>
        <trans-unit id="8aca2e8c01b81a07c6eb69c26b8265b8e7beb0f1" translate="yes" xml:space="preserve">
          <source>After you installed the components you needed and updated the</source>
          <target state="translated">必要なコンポーネントをインストールし、更新した後に</target>
        </trans-unit>
        <trans-unit id="d33c7c8e8c88b02eadf2fda47995324b6f5d61c5" translate="yes" xml:space="preserve">
          <source>Afterwards, implicit upgrading of high-bit bytes will raise a warning. Ex.: &lt;code&gt;Bytes implicitly upgraded into wide characters as iso-8859-1 at - line 7&lt;/code&gt;.</source>
          <target state="translated">その後、上位ビットバイトを暗黙的にアップグレードすると警告が発生します。例： &lt;code&gt;Bytes implicitly upgraded into wide characters as iso-8859-1 at - line 7&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="61179f6b3dda7b5ee08dd7ce8f69dddb876677ab" translate="yes" xml:space="preserve">
          <source>Again assuming the existence of the &lt;code&gt;tree&lt;/code&gt; database</source>
          <target state="translated">再び、 &lt;code&gt;tree&lt;/code&gt; データベースの存在を想定します。</target>
        </trans-unit>
        <trans-unit id="7c2b707160e59a8a50ca98c9028a92309952c8b9" translate="yes" xml:space="preserve">
          <source>Again like &lt;code&gt;cond_wait&lt;/code&gt; , waking up and reacquiring the lock are not atomic, and you should always check your desired condition after this function returns. Since the timeout is an absolute value, however, it does not have to be recalculated with each pass:</source>
          <target state="translated">再び &lt;code&gt;cond_wait&lt;/code&gt; と同様に、ロックの起動と再取得はアトミックではないため、この関数が戻った後は、常に必要な状態を確認する必要があります。ただし、タイムアウトは絶対値であるため、パスごとに再計算する必要はありません。</target>
        </trans-unit>
        <trans-unit id="80ceb6ccb0e00ef82fa454c0b81cfff6cc81ecb4" translate="yes" xml:space="preserve">
          <source>Again like &lt;code&gt;cond_wait&lt;/code&gt;, waking up and reacquiring the lock are not atomic, and you should always check your desired condition after this function returns. Since the timeout is an absolute value, however, it does not have to be recalculated with each pass:</source>
          <target state="translated">ここでも &lt;code&gt;cond_wait&lt;/code&gt; と同様に、ロックのウェイクアップと再取得はアトミックではないため、この関数が戻った後は常に目的の条件を確認する必要があります。ただし、タイムアウトは絶対値であるため、パスごとに再計算する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ca8570b68f5ed102e2eaf1b90efb62ece24d489e" translate="yes" xml:space="preserve">
          <source>Again, for elementary pieces there is no such question, since at most one match at a given position is possible. This section describes the notion of better/worse for combining operators. In the description below &lt;code&gt;&quot;S&quot;&lt;/code&gt; and &lt;code&gt;&quot;T&quot;&lt;/code&gt; are regular subexpressions.</source>
          <target state="translated">繰り返しになりますが、エレメンタリーピースの場合、特定の位置で最大1つの一致が可能であるため、そのような質問はありません。このセクションでは、演算子を組み合わせるための良い/悪いの概念について説明します。以下の説明では、 &lt;code&gt;&quot;S&quot;&lt;/code&gt; と &lt;code&gt;&quot;T&quot;&lt;/code&gt; は通常の部分式です。</target>
        </trans-unit>
        <trans-unit id="f1807d38160980407aafc2417f04ad9be3af89ae" translate="yes" xml:space="preserve">
          <source>Again, for elementary pieces there is no such question, since at most one match at a given position is possible. This section describes the notion of better/worse for combining operators. In the description below &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; are regular subexpressions.</source>
          <target state="translated">繰り返しになりますが、基本的な部分については、与えられた位置で最大1つの一致が可能であるため、そのような質問はありません。このセクションでは、結合演算子の良い/悪いという概念について説明します。以下の説明では、 &lt;code&gt;S&lt;/code&gt; と &lt;code&gt;T&lt;/code&gt; は正規の部分式です。</target>
        </trans-unit>
        <trans-unit id="5f5a18a4eff39b7d1528cf15b17087b5d8251fa1" translate="yes" xml:space="preserve">
          <source>Again, if you already have the data in memory or want to avoid the complexity of the above, you can use sv_setpvn().</source>
          <target state="translated">繰り返しになりますが、すでにメモリにデータがある場合や、上記のような複雑さを避けたい場合は sv_setpvn()を使うことができます。</target>
        </trans-unit>
        <trans-unit id="cf8e2e1b9b0e08a7a42ff9da61e6daf28394e96e" translate="yes" xml:space="preserve">
          <source>Again, the PERL_DL_NONLAZY thing.</source>
          <target state="translated">またしてもperl_dl_nonlazyの件。</target>
        </trans-unit>
        <trans-unit id="cc9355813d20c04f9885340bd38f5820f772f6ef" translate="yes" xml:space="preserve">
          <source>Again, the result is a string, now containing 2 bytes. If you print this string (which is, generally, not recommended) you might see &lt;code&gt;ON&lt;/code&gt; or &lt;code&gt;NO&lt;/code&gt; (depending on your system's byte ordering) - or something entirely different if your computer doesn't use ASCII character encoding. Unpacking &lt;code&gt;$ps&lt;/code&gt; with the same template returns the original integer value:</source>
          <target state="translated">繰り返しますが、結果は文字列で、2バイトが含まれています。この文字列を印刷する場合（これは一般的には推奨されません）、 &lt;code&gt;ON&lt;/code&gt; または &lt;code&gt;NO&lt;/code&gt; （システムのバイト順によって異なります）、またはコンピューターがASCII文字エンコードを使用していない場合はまったく異なるものが表示されることがあります。同じテンプレートで &lt;code&gt;$ps&lt;/code&gt; をアンパックすると、元の整数値が返されます。</target>
        </trans-unit>
        <trans-unit id="1336fb8f59fe4c2604eb97dc0557c0ec454667ba" translate="yes" xml:space="preserve">
          <source>Again, the same rule about having a valid invocand applies -- use an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; block or &lt;code&gt;blessed&lt;/code&gt; if you need to be extra paranoid.</source>
          <target state="translated">繰り返しになりますが、有効なinvocandを持つことに関する同じルールが適用されます- 特別な偏執狂が必要な場合は、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ブロックを使用するか、 &lt;code&gt;blessed&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="260a43f1a79644923915e467df41ceec66107f79" translate="yes" xml:space="preserve">
          <source>Again, the same rule about having a valid invocand applies -- use an &lt;code&gt;eval&lt;/code&gt; block or &lt;code&gt;blessed&lt;/code&gt; if you need to be extra paranoid.</source>
          <target state="translated">繰り返しになりますが、有効な発声者を持つことについての同じルールが適用されます-余分な妄想が必要な場合は、 &lt;code&gt;eval&lt;/code&gt; ブロックを使用するか、 &lt;code&gt;blessed&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="af48945727ba41522de6c011f314a4b843601653" translate="yes" xml:space="preserve">
          <source>Again, there is a distinction between omitting LIST (&lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; called with no arguments) and an explicit empty LIST &lt;code&gt;()&lt;/code&gt; (&lt;a href=&quot;#import-LIST&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; not called). Note that there is no comma after VERSION!</source>
          <target state="translated">繰り返しますが、LISTを省略する（引数なしで&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;呼び出される）ことと、明示的な空のLIST &lt;code&gt;()&lt;/code&gt; （&lt;a href=&quot;#import-LIST&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt;が呼び出されない）には違いがあります。VERSIONの後にコンマがないことに注意してください！</target>
        </trans-unit>
        <trans-unit id="f032390a780d79dd005854d30b600a71dcbdee7e" translate="yes" xml:space="preserve">
          <source>Again, there is a distinction between omitting LIST (&lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; called with no arguments) and an explicit empty LIST &lt;code&gt;()&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; not called). Note that there is no comma after VERSION!</source>
          <target state="translated">繰り返しますが、リストの省略（ &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; は引数なしで呼び出されます）と明示的な空のリスト &lt;code&gt;()&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; は呼び出されません）の間には違いがあります。VERSIONの後にはカンマがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="150579942e699af9662ec748d7e74bb724b4dd49" translate="yes" xml:space="preserve">
          <source>Again, there is a distinction between omitting LIST (&lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; called with no arguments) and an explicit empty LIST &lt;code&gt;()&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; not called). Note that there is no comma after VERSION!</source>
          <target state="translated">繰り返しますが、リストの省略（ &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; は引数なしで呼び出されます）と明示的な空のリスト &lt;code&gt;()&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; は呼び出されません）の間には違いがあります。VERSIONの後にはカンマがないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="245e36d26002b84ee14a1352ac81744d3ee557bd" translate="yes" xml:space="preserve">
          <source>Again, this allows for very dynamic code.</source>
          <target state="translated">繰り返しになりますが、これにより非常に動的なコードが可能になります。</target>
        </trans-unit>
        <trans-unit id="b538a15a09c26e00740fa45cdf77f8fdb9a0d9a7" translate="yes" xml:space="preserve">
          <source>Again, this procedure should not be absolutely smooth. Some &lt;code&gt;Makefile.PL&lt;/code&gt; 's in subdirectories may be buggy, and would not run as &quot;child&quot; scripts. The interdependency of modules can strike you; however, since non-XS modules are already installed, the prerequisites of most modules have a very good chance to be present.</source>
          <target state="translated">繰り返しますが、この手順は完全にスムーズであってはなりません。サブディレクトリ内のいくつかの &lt;code&gt;Makefile.PL&lt;/code&gt; はバグがある可能性があり、「子」スクリプトとして実行されません。モジュールの相互依存関係があなたを襲う可能性があります。ただし、非XSモジュールがすでにインストールされているため、ほとんどのモジュールの前提条件が存在する可能性が非常に高くなります。</target>
        </trans-unit>
        <trans-unit id="1d9afbd965216a5dfe321083c08133da31ca4ac4" translate="yes" xml:space="preserve">
          <source>Again, this procedure should not be absolutely smooth. Some &lt;code&gt;Makefile.PL&lt;/code&gt;'s in subdirectories may be buggy, and would not run as &quot;child&quot; scripts. The interdependency of modules can strike you; however, since non-XS modules are already installed, the prerequisites of most modules have a very good chance to be present.</source>
          <target state="translated">繰り返しますが、この手順は完全にスムーズであってはなりません。サブディレクトリ内の一部の &lt;code&gt;Makefile.PL&lt;/code&gt; はバグがある可能性があり、「子」スクリプトとして実行されません。モジュールの相互依存性はあなたを襲う可能性があります。ただし、非XSモジュールはすでにインストールされているため、ほとんどのモジュールの前提条件が存在する可能性が非常に高くなります。</target>
        </trans-unit>
        <trans-unit id="d29cd93346e769552a8195aadabaa89c166d289b" translate="yes" xml:space="preserve">
          <source>Again, this should be a last resort only. Ideally, this should never happen, and every possible effort at cooperation and compromise should be made before doing this. If it does prove necessary to fork a module for the overall health of Perl, proper credit must be given to the original author in perpetuity and the decision should be constantly re-evaluated to see if a remerging of the two branches is possible down the road.</source>
          <target state="translated">繰り返しになりますが、これは最後の手段でしかありません。理想的には、これは決して起こってはならないことであり、これを行う前に、協力と妥協のためのあらゆる可能な努力がなされるべきです。Perl の全体的な健全性のためにモジュールをフォークする必要があることが判明した場合、原著者には永続的に適切な信用が与えられなければなりませんし、将来的に 2 つのブランチの再結合が可能かどうかを確認するために、その決定は常に再評価されるべきです。</target>
        </trans-unit>
        <trans-unit id="3a830cc268120c6d62fd1503dae1fe4595320a8c" translate="yes" xml:space="preserve">
          <source>Aggregate TAP::Parser results</source>
          <target state="translated">TAP::Parserの結果を集計</target>
        </trans-unit>
        <trans-unit id="c99323987b877f0729176ba94246c79d0ffee75d" translate="yes" xml:space="preserve">
          <source>Ah, but what if you wanted a</source>
          <target state="translated">ああ、でも、あなたが欲しがっていたのは</target>
        </trans-unit>
        <trans-unit id="357530061e8b631cc6eb25b6b21e6efa53ba5694" translate="yes" xml:space="preserve">
          <source>Aha. &lt;code&gt;$ical-&amp;gt;day&lt;/code&gt; returned 16, but we expected 17. A quick check shows that the code is working fine, we made a mistake when writing the tests. Change it to:</source>
          <target state="translated">あは。 &lt;code&gt;$ical-&amp;gt;day&lt;/code&gt; は16を返しましたが、17を期待していました。簡単なチェックでコードが正常に機能していることがわかりました。テストの作成時にミスをしました。次のように変更します。</target>
        </trans-unit>
        <trans-unit id="d1f92d7475bbcca0ddd4c10b283202094097cb17" translate="yes" xml:space="preserve">
          <source>Alabama</source>
          <target state="translated">Alabama</target>
        </trans-unit>
        <trans-unit id="fc54c7321882850cd59ca3c898a45a1866c62d48" translate="yes" xml:space="preserve">
          <source>Alan Burlison &amp;lt;Alan.Burlison@uk.sun.com&amp;gt;</source>
          <target state="translated">アラン・バーリソン&amp;lt;Alan.Burlison@uk.sun.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="23d7203c5a6f71d67327de67fa96591289ea39aa" translate="yes" xml:space="preserve">
          <source>Alan Gardner &amp;lt;gardner@pythian.com&amp;gt;</source>
          <target state="translated">アランガードナー&amp;lt;gardner@pythian.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="28819c4f1ea8b8ef6efc038b761b2ce064e6ebed" translate="yes" xml:space="preserve">
          <source>Alas, however simple this may appear, underneath it's a much more elaborate construct than meets the eye!</source>
          <target state="translated">このように、私たちは、あなたがそれを行うことができるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="60deebc91420b65bfc5133938fc33e7af7cddcdc" translate="yes" xml:space="preserve">
          <source>Albeit this is apt to be confusing: As a consequence of the length being implied by the string's length, a number after pack code &lt;code&gt;p&lt;/code&gt; is a repeat count, not a length as after &lt;code&gt;P&lt;/code&gt; .</source>
          <target state="translated">これは混乱を招きがちですが、文字列の長さによって長さが暗示される結果として、パックコード &lt;code&gt;p&lt;/code&gt; の後の数は繰り返し数であり、 &lt;code&gt;P&lt;/code&gt; の後の長さではありません。</target>
        </trans-unit>
        <trans-unit id="df23ae23f5f2f6c9c33e5c8be5f1d9b8ccdf8644" translate="yes" xml:space="preserve">
          <source>Albeit this is apt to be confusing: As a consequence of the length being implied by the string's length, a number after pack code &lt;code&gt;p&lt;/code&gt; is a repeat count, not a length as after &lt;code&gt;P&lt;/code&gt;.</source>
          <target state="translated">これは紛らわしい傾向がありますが、長さが文字列の長さによって暗示される結果として、パックコード &lt;code&gt;p&lt;/code&gt; の後の数は繰り返しカウントであり、 &lt;code&gt;P&lt;/code&gt; の後の長さではありません。</target>
        </trans-unit>
        <trans-unit id="488de67835b3659103e122692a6a41abad7cc229" translate="yes" xml:space="preserve">
          <source>Alessandro Ghedini &amp;lt;al3xbio@gmail.com&amp;gt;</source>
          <target state="translated">Alessandro Ghedini &amp;lt;al3xbio@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="08b652678025d31c86fae074be585e578cd5712b" translate="yes" xml:space="preserve">
          <source>Alex Vandiver</source>
          <target state="translated">アレックス・バンダイバー</target>
        </trans-unit>
        <trans-unit id="c375d17736d5ba75bae4628bbac2b8464ec67f67" translate="yes" xml:space="preserve">
          <source>Alex Waugh &amp;lt;alex@alexwaugh.com&amp;gt;</source>
          <target state="translated">アレックスウォー&amp;lt;alex@alexwaugh.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="98410e18a5313b84b52dba6923f79fa84662fc78" translate="yes" xml:space="preserve">
          <source>Algorithmic Complexity Attacks</source>
          <target state="translated">アルゴリズムの複雑さへの攻撃</target>
        </trans-unit>
        <trans-unit id="880e348dcb112fd7762be969b0a0f638889a7979" translate="yes" xml:space="preserve">
          <source>Alias 'great_circle_bearing' for 'great_circle_direction' is also available.</source>
          <target state="translated">また、'great_circle_direction'のエイリアス'great_circle_bearing'も用意されています。</target>
        </trans-unit>
        <trans-unit id="0898ef4b9ee98efd06a1a0a5dfd90a367c2cd721" translate="yes" xml:space="preserve">
          <source>Alias definitions to encodings</source>
          <target state="translated">エンコーディングへのエイリアス定義</target>
        </trans-unit>
        <trans-unit id="2fd22032741764f6c7a3440c32bd355222cc06c7" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;accept_codes&quot;&gt;accept_codes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;accept_codes&quot;&gt;accept_codesの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="32561c689bd0872a58b1ef016b46a3306d05158a" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;accept_targets&quot;&gt;accept_targets&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;accept_targets&quot;&gt;accept_targetsの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="81a5ee4924b19ec7ec50c6564857d6e16abb3950" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;accept_targets_as_text&quot;&gt;accept_targets_as_text&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;accept_targets_as_text&quot;&gt;accept_targets_as_textの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="38f722ea341fc11c96b38a2a9a95013e2024c780" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;http://search.cpan.org/perldoc/accept_codes&quot;&gt;accept_codes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/accept_codes&quot;&gt;accept_codesの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="f3ca2b4415e7c30e7f132f19403b5bffd02f19e2" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;http://search.cpan.org/perldoc/accept_targets&quot;&gt;accept_targets&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/accept_targets&quot;&gt;accept_targetsの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="90cb0f686347b95e9bf9ac20dee8ecef9cc3e7cc" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;http://search.cpan.org/perldoc/accept_targets_as_text&quot;&gt;accept_targets_as_text&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/accept_targets_as_text&quot;&gt;accept_targets_as_textの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="d8a37b728f269336ef2b0d916cf56f8cff9a7dab" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;http://search.cpan.org/perldoc/unaccept_codes&quot;&gt;unaccept_codes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/unaccept_codes&quot;&gt;unaccept_codesの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="55942451ef5112cddaa2996d9b3ade198613f3aa" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;http://search.cpan.org/perldoc/unaccept_directives&quot;&gt;unaccept_directives&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/unaccept_directives&quot;&gt;unaccept_directivesの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="fc63b361fbc74519b267bcb5465524b93139434d" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;http://search.cpan.org/perldoc/unaccept_targets&quot;&gt;unaccept_targets&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/unaccept_targets&quot;&gt;unaccept_targetsの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="f57ee5c11f9123d120a1be6cb516c33a71d9d9b4" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;unaccept_codes&quot;&gt;unaccept_codes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unaccept_codes&quot;&gt;unaccept_codesの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="57a077c1a7056873f59d1abe4f1a810b70548d85" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;unaccept_directives&quot;&gt;unaccept_directives&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unaccept_directives&quot;&gt;unaccept_directivesの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="b1570978e3e8ee8b4e62f46b1edb2f40542fb2c9" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;unaccept_targets&quot;&gt;unaccept_targets&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;unaccept_targets&quot;&gt;unaccept_targetsの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="74c2c2daa5f5a0797029a2454513a78581202693" translate="yes" xml:space="preserve">
          <source>Alias overloading</source>
          <target state="translated">エイリアスのオーバーロード</target>
        </trans-unit>
        <trans-unit id="f57cd105a2d625b230e3773e4d9ad4fd8007e4e8" translate="yes" xml:space="preserve">
          <source>Aliases are added either by the use of anonymous hashes:</source>
          <target state="translated">エイリアスは匿名ハッシュを使用して追加されます。</target>
        </trans-unit>
        <trans-unit id="a04d03e091eed69bf0cabdf08f34999597a31b63" translate="yes" xml:space="preserve">
          <source>Aliases have no effect on the return value of uncolor().</source>
          <target state="translated">エイリアスは uncolor()の戻り値に影響を与えません。</target>
        </trans-unit>
        <trans-unit id="bde3b653ba60660ff94a6811c58e93a5bf93107d" translate="yes" xml:space="preserve">
          <source>Aliases must begin with a character that is alphabetic. After that, each may contain any combination of word (&lt;code&gt;\w&lt;/code&gt; ) characters, SPACE (U+0020), HYPHEN-MINUS (U+002D), LEFT PARENTHESIS (U+0028), RIGHT PARENTHESIS (U+0029), and NO-BREAK SPACE (U+00A0). These last three should never have been allowed in names, and are retained for backwards compatibility only; NO-BREAK SPACE IS currently deprecated and scheduled for removal in Perl v5.26; the other two may also be deprecated and removed in future releases of Perl, so don't use them for new names. (More precisely, the first character of a name you specify must be something that matches all of &lt;code&gt;\p{ID_Start}&lt;/code&gt; , &lt;code&gt;\p{Alphabetic}&lt;/code&gt; , and &lt;code&gt;\p{Gc=Letter}&lt;/code&gt; . This makes sure it is what any reasonable person would view as an alphabetic character. And, the continuation characters that match &lt;code&gt;\w&lt;/code&gt; must also match &lt;code&gt;\p{ID_Continue}&lt;/code&gt; .) Starting with Perl v5.18, any Unicode characters meeting the above criteria may be used; prior to that only Latin1-range characters were acceptable.</source>
          <target state="translated">エイリアスはアルファベットの文字で始まる必要があります。その後、それぞれに単語（ &lt;code&gt;\w&lt;/code&gt; ）文字、スペース（U + 0020）、ハイフンマイナス（U + 002D）、左括弧（U + 0028）、右括弧（U + 0029）、およびNOの任意の組み合わせを含めることができます-BREAK SPACE（U + 00A0）。これらの最後の3つは名前に使用できませんでした。下位互換性のためにのみ保持されています。ブレークなしスペースは現在非推奨であり、Perl v5.26での削除が予定されています。他の2つもPerlの将来のリリースで非推奨になり削除される可能性があるため、新しい名前に使用しないでください。 （より正確には、指定する名前の最初の文字は、 &lt;code&gt;\p{ID_Start}&lt;/code&gt; 、 &lt;code&gt;\p{Alphabetic}&lt;/code&gt; 、および &lt;code&gt;\p{Gc=Letter}&lt;/code&gt; すべてに一致するものである必要があります。これは、合理的な人がアルファベット文字と見なすものであることを確認します。また、 &lt;code&gt;\w&lt;/code&gt; 一致する継続文字は &lt;code&gt;\p{ID_Continue}&lt;/code&gt; も一致する必要があります。Perlv5.18以降では、上記の基準を満たす任意のUnicode文字を使用できます。それ以前は、Latin1範囲の文字のみが受け入れられていました。</target>
        </trans-unit>
        <trans-unit id="0fcc98867dee3ff48ba5340d53b05e4438818a3a" translate="yes" xml:space="preserve">
          <source>Aliases must begin with a character that is alphabetic. After that, each may contain any combination of word (&lt;code&gt;\w&lt;/code&gt;) characters, SPACE (U+0020), HYPHEN-MINUS (U+002D), LEFT PARENTHESIS (U+0028), and RIGHT PARENTHESIS (U+0029). These last two should never have been allowed in names, and are retained for backwards compatibility only, and may be deprecated and removed in future releases of Perl, so don't use them for new names. (More precisely, the first character of a name you specify must be something that matches all of &lt;code&gt;\p{ID_Start}&lt;/code&gt;, &lt;code&gt;\p{Alphabetic}&lt;/code&gt;, and &lt;code&gt;\p{Gc=Letter}&lt;/code&gt;. This makes sure it is what any reasonable person would view as an alphabetic character. And, the continuation characters that match &lt;code&gt;\w&lt;/code&gt; must also match &lt;code&gt;\p{ID_Continue}&lt;/code&gt;.) Starting with Perl v5.18, any Unicode characters meeting the above criteria may be used; prior to that only Latin1-range characters were acceptable.</source>
          <target state="translated">エイリアスはアルファベットの文字で始まる必要があります。その後、それぞれに単語（ &lt;code&gt;\w&lt;/code&gt; ）文字、スペース（U + 0020）、ハイフンマイナス（U + 002D）、左括弧（U + 0028）、および右括弧（U + 0029）の任意の組み合わせを含めることができます。これらの最後の2つは名前で許可されるべきではなく、下位互換性のためにのみ保持され、Perlの将来のリリースで非推奨になり、削除される可能性があるため、新しい名前には使用しないでください。 （より正確には、指定する名前の最初の文字は、 &lt;code&gt;\p{ID_Start}&lt;/code&gt; 、 &lt;code&gt;\p{Alphabetic}&lt;/code&gt; 、および &lt;code&gt;\p{Gc=Letter}&lt;/code&gt; すべてに一致するものでなければなりません。これにより、合理的な人なら誰でもそれが確実になります。英字として表示し、 &lt;code&gt;\w&lt;/code&gt; 一致する継続文字 &lt;code&gt;\p{ID_Continue}&lt;/code&gt; とも一致する必要があります。）Perl v5.18以降、上記の条件を満たす任意のUnicode文字を使用できます。それ以前は、Latin1範囲の文字のみが受け入れられていました。</target>
        </trans-unit>
        <trans-unit id="1e1e3bd44efd8fb4bdd5fb525cf0426565ed96d8" translate="yes" xml:space="preserve">
          <source>Aliasing via reference is experimental</source>
          <target state="translated">リファレンスを介したエイリアシングは実験的</target>
        </trans-unit>
        <trans-unit id="91f975513dec5dd8e68b29fb075833bd77c269b1" translate="yes" xml:space="preserve">
          <source>Alignment, Take 2</source>
          <target state="translated">アライメント、テイク2</target>
        </trans-unit>
        <trans-unit id="a1ea8b54954e0fde287940a149a033befa43e6c8" translate="yes" xml:space="preserve">
          <source>Alignment, Take 3</source>
          <target state="translated">アライメント、テイク3</target>
        </trans-unit>
        <trans-unit id="6a72085653e4c5be8c7640c868ef787cbcf063d1" translate="yes" xml:space="preserve">
          <source>All</source>
          <target state="translated">All</target>
        </trans-unit>
        <trans-unit id="c0a3337aa85112ce1c8489ed0e15d622a157e478" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;--sources&lt;/code&gt; are combined into a hash, and passed to &lt;a href=&quot;TAP::Harness#new&quot;&gt;&quot;new&quot; in TAP::Harness&lt;/a&gt;'s &lt;code&gt;sources&lt;/code&gt; parameter.</source>
          <target state="translated">すべての &lt;code&gt;--sources&lt;/code&gt; はハッシュに結合され、&lt;a href=&quot;TAP::Harness#new&quot;&gt;TAP :: Harness&lt;/a&gt;の &lt;code&gt;sources&lt;/code&gt; パラメーターで「new」に渡されます。</target>
        </trans-unit>
        <trans-unit id="764199267e4fee8134969e2bb73e632b952ebdb3" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;--sources&lt;/code&gt; are combined into a hash, and passed to &lt;a href=&quot;tap/harness#new&quot;&gt;new in TAP::Harness&lt;/a&gt;'s &lt;code&gt;sources&lt;/code&gt; parameter.</source>
          <target state="translated">すべての &lt;code&gt;--sources&lt;/code&gt; はハッシュに結合され、&lt;a href=&quot;tap/harness#new&quot;&gt;新しいTAP :: Harness&lt;/a&gt;の &lt;code&gt;sources&lt;/code&gt; パラメータに渡されます。</target>
        </trans-unit>
        <trans-unit id="f52d6e40e6d60dfb65b7ff9829f21ad743f4c4af" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;Digest::&lt;/code&gt; modules provide the same programming interface. A functional interface for simple use, as well as an object oriented interface that can handle messages of arbitrary length and which can read files directly.</source>
          <target state="translated">すべての &lt;code&gt;Digest::&lt;/code&gt; モジュールは同じプログラミングインターフェイスを提供します。シンプルな使用のための機能的なインターフェイス、および任意の長さのメッセージを処理でき、ファイルを直接読み取ることができるオブジェクト指向のインターフェイス。</target>
        </trans-unit>
        <trans-unit id="0b4ba3097ed57d834b19bb582934af5c146d48ec" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;TAP::*&lt;/code&gt; objects inherit from &lt;a href=&quot;TAP::Object&quot;&gt;TAP::Object&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;TAP::*&lt;/code&gt; オブジェクトは&lt;a href=&quot;TAP::Object&quot;&gt;TAP :: Object&lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="457b3764fb61bab63f516bcecf7b3d7be10ba056" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;TAP::*&lt;/code&gt; objects inherit from &lt;a href=&quot;object&quot;&gt;TAP::Object&lt;/a&gt;.</source>
          <target state="translated">すべての &lt;code&gt;TAP::*&lt;/code&gt; オブジェクトは&lt;a href=&quot;object&quot;&gt;TAP :: Object&lt;/a&gt;から継承します。</target>
        </trans-unit>
        <trans-unit id="5afc429b1453c07f0d0baef120b89dcb6d31ac74" translate="yes" xml:space="preserve">
          <source>All I want to do is append a small amount of text to the end of a file. Do I still have to use locking?</source>
          <target state="translated">ファイルの最後に少量のテキストを追加したいだけです。それでもロックを使用する必要がありますか?</target>
        </trans-unit>
        <trans-unit id="364f430073ddd95c184ef6908813da97f63c8227" translate="yes" xml:space="preserve">
          <source>All NULs, returns, and newlines are removed from the result.</source>
          <target state="translated">すべての NUL、リターン、および改行は結果から削除されます。</target>
        </trans-unit>
        <trans-unit id="3357b46fb83adc9becdcce6c42b795ffab969cd7" translate="yes" xml:space="preserve">
          <source>All Perl applications that make use of the script will need to be changed (slightly) if the script is converted into a module. Is it worth it unless you plan to make other changes at the same time?</source>
          <target state="translated">スクリプトを使用するすべての Perl アプリケーションは、スクリプトがモジュールに変換された場合、(少しだけ)変更する必要があります。同時に他の変更を行う予定がない限り、その価値はあるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="c0556d5f4ef8cf5b2d75a71a511d88da552691b2" translate="yes" xml:space="preserve">
          <source>All Perl module files have the extension</source>
          <target state="translated">すべてのPerlモジュールファイルには拡張子</target>
        </trans-unit>
        <trans-unit id="c9df8c5103a954885f4c9cd5391cce1f658e5378" translate="yes" xml:space="preserve">
          <source>All Perl source filters are implemented as Perl classes and have the same basic structure as the example above.</source>
          <target state="translated">すべてのPerlソースフィルタはPerlクラスとして実装されており、基本的な構造は上記の例と同じです。</target>
        </trans-unit>
        <trans-unit id="a24109cbe749713ab37960e5621fab63c25af84c" translate="yes" xml:space="preserve">
          <source>All SVs that contain strings should be terminated with a &lt;code&gt;NUL&lt;/code&gt; character. If it is not &lt;code&gt;NUL&lt;/code&gt; -terminated there is a risk of core dumps and corruptions from code which passes the string to C functions or system calls which expect a &lt;code&gt;NUL&lt;/code&gt; -terminated string. Perl's own functions typically add a trailing &lt;code&gt;NUL&lt;/code&gt; for this reason. Nevertheless, you should be very careful when you pass a string stored in an SV to a C function or system call.</source>
          <target state="translated">文字列を含むすべてのSVは、 &lt;code&gt;NUL&lt;/code&gt; 文字で終了する必要があります。 &lt;code&gt;NUL&lt;/code&gt; で終了していない場合、CUL関数に文字列を渡すコードや、 &lt;code&gt;NUL&lt;/code&gt; で終了する文字列を期待するシステムコールからコアダンプや破損が発生する危険があります。このため、Perl独自の関数は通常、末尾に &lt;code&gt;NUL&lt;/code&gt; を追加します。それでも、SVに格納されている文字列をC関数またはシステムコールに渡すときは、十分に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="811244b951b8c0eb98e3e07cd16b2604bbbc05a1" translate="yes" xml:space="preserve">
          <source>All SVs that contain strings should be terminated with a &lt;code&gt;NUL&lt;/code&gt; character. If it is not &lt;code&gt;NUL&lt;/code&gt;-terminated there is a risk of core dumps and corruptions from code which passes the string to C functions or system calls which expect a &lt;code&gt;NUL&lt;/code&gt;-terminated string. Perl's own functions typically add a trailing &lt;code&gt;NUL&lt;/code&gt; for this reason. Nevertheless, you should be very careful when you pass a string stored in an SV to a C function or system call.</source>
          <target state="translated">文字列を含むすべてのSVは、 &lt;code&gt;NUL&lt;/code&gt; 文字で終了する必要があります。 &lt;code&gt;NUL&lt;/code&gt; で終了していない場合、文字列をC関数に渡すコードまたは &lt;code&gt;NUL&lt;/code&gt; で終了する文字列を予期するシステムコールから、コアダンプや破損のリスクがあります。 Perl自身の関数は通常、この理由で末尾の &lt;code&gt;NUL&lt;/code&gt; を追加します。それでも、SVに格納されている文字列をC関数またはシステムコールに渡すときは、十分に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="48a5c9b581d8c7b87b13529ddc2ea4756cd71725" translate="yes" xml:space="preserve">
          <source>All Solaris documentation is available on-line at &lt;a href=&quot;http://docs.sun.com/&quot;&gt;http://docs.sun.com/&lt;/a&gt;.</source>
          <target state="translated">すべてのSolarisのドキュメントは、&lt;a href=&quot;http://docs.sun.com/&quot;&gt;http：//docs.sun.com/&lt;/a&gt;からオンラインで入手できます。</target>
        </trans-unit>
        <trans-unit id="02a6fc4950c3ff395602f4e234c32b98fa8bbb9b" translate="yes" xml:space="preserve">
          <source>All Unicode-defined character properties may be written in these compound forms of &lt;code&gt;\p{&lt;i&gt;property&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;}&lt;/code&gt; or &lt;code&gt;\p{&lt;i&gt;property&lt;/i&gt;:&lt;i&gt;value&lt;/i&gt;}&lt;/code&gt;, but Perl provides some additional properties that are written only in the single form, as well as single-form short-cuts for all binary properties and certain others described below, in which you may omit the property name and the equals or colon separator.</source>
          <target state="translated">すべてのUnicode定義の文字プロパティは、 &lt;code&gt;\p{&lt;i&gt;property&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;}&lt;/code&gt; または &lt;code&gt;\p{&lt;i&gt;property&lt;/i&gt;:&lt;i&gt;value&lt;/i&gt;}&lt;/code&gt; これらの複合形式で記述できますが、Perlは単一形式だけでなく、すべてのバイナリプロパティと、以下で説明する特定のその他のプロパティのショートカットを作成します。ここでは、プロパティ名と等号またはコロン区切り文字を省略できます。</target>
        </trans-unit>
        <trans-unit id="824a27b5a0842833d945bd7311a2e5202945d5f2" translate="yes" xml:space="preserve">
          <source>All above are #define'd to stdio functions or are trivial wrapper functions which call stdio. In this case</source>
          <target state="translated">上記のすべての関数は #define されて stdio 関数になっているか、あるいは stdio を呼び出している些細なラッパー関数になっています。この場合</target>
        </trans-unit>
        <trans-unit id="480b6099af5b199261a0cc5b0a69906525b8aab5" translate="yes" xml:space="preserve">
          <source>All are zero-width assertions.</source>
          <target state="translated">すべてゼロ幅のアサーションです。</target>
        </trans-unit>
        <trans-unit id="ea4147392f071907aee8241573927949a9171c29" translate="yes" xml:space="preserve">
          <source>All arguments are optional. If the escape characters are not specified, every delimiter is escaped with a backslash (&lt;code&gt;\&lt;/code&gt; ). If the prefix is not specified, the pattern &lt;code&gt;'\s*'&lt;/code&gt; - optional whitespace - is used. If the delimiter set is also not specified, the set &lt;code&gt;/[&quot;'`]/&lt;/code&gt; is used. If the text to be processed is not specified either, &lt;code&gt;$_&lt;/code&gt; is used.</source>
          <target state="translated">すべての引数はオプションです。エスケープ文字が指定されていない場合、すべての区切り文字はバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）でエスケープされます。プレフィックスが指定されていない場合、パターン &lt;code&gt;'\s*'&lt;/code&gt; （オプションの空白）が使用されます。区切り文字セットも指定されていない場合は、セット &lt;code&gt;/[&quot;'`]/&lt;/code&gt; が使用され、処理されるテキストも指定されていない場合は、 &lt;code&gt;$_&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="0181edbc9494b74d89dc3b19084803fb4f26c83d" translate="yes" xml:space="preserve">
          <source>All arguments are optional. If the escape characters are not specified, every delimiter is escaped with a backslash (&lt;code&gt;\&lt;/code&gt;). If the prefix is not specified, the pattern &lt;code&gt;'\s*'&lt;/code&gt; - optional whitespace - is used. If the delimiter set is also not specified, the set &lt;code&gt;/[&quot;'`]/&lt;/code&gt; is used. If the text to be processed is not specified either, &lt;code&gt;$_&lt;/code&gt; is used.</source>
          <target state="translated">すべての引数はオプションです。エスケープ文字が指定されていない場合、すべての区切り文字は円記号（ &lt;code&gt;\&lt;/code&gt; ）でエスケープされます。プレフィックスが指定されていない場合は、パターン &lt;code&gt;'\s*'&lt;/code&gt; （オプションの空白）が使用されます。区切り文字セットも指定されていない場合は、セット &lt;code&gt;/[&quot;'`]/&lt;/code&gt; が使用されます。処理されるテキストも指定されていない場合は、 &lt;code&gt;$_&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="9ae556487b52756ee168bee18fdadcf299ff8eb4" translate="yes" xml:space="preserve">
          <source>All arguments passed to &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; are passed onto &lt;code&gt;Your::Module-&amp;gt;builder-&amp;gt;plan()&lt;/code&gt; with the exception of &lt;code&gt;import =&amp;gt;[qw(things to import)]&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import()&lt;/a&gt;&lt;/code&gt; に渡されるすべての引数は、 &lt;code&gt;import =&amp;gt;[qw(things to import)]&lt;/code&gt; 除き、 &lt;code&gt;Your::Module-&amp;gt;builder-&amp;gt;plan()&lt;/code&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="fdbd10dc9e3c80b9ba924c94c8cb38d914c05e64" translate="yes" xml:space="preserve">
          <source>All arguments passed to &lt;code&gt;import()&lt;/code&gt; are passed onto &lt;code&gt;Your::Module-&amp;gt;builder-&amp;gt;plan()&lt;/code&gt; with the exception of &lt;code&gt;import =&amp;gt;[qw(things to import)]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;import()&lt;/code&gt; に渡されるすべての引数は、 &lt;code&gt;import =&amp;gt;[qw(things to import)]&lt;/code&gt; を除いて、 &lt;code&gt;Your::Module-&amp;gt;builder-&amp;gt;plan()&lt;/code&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="b2e982744f4ac0300218d6f294863226187db18a" translate="yes" xml:space="preserve">
          <source>All arguments passed to the &lt;b&gt;new()&lt;/b&gt; constructor will be treated as key/value pairs in a hash-table. The newly constructed object will be initialized by copying the contents of the given hash-table (which may have been empty). The &lt;b&gt;new()&lt;/b&gt; constructor for this class and all of its subclasses returns a blessed reference to the initialized object (hash-table).</source>
          <target state="translated">&lt;b&gt;new（）&lt;/b&gt;コンストラクターに渡されるすべての引数は、ハッシュテーブルでキーと値のペアとして扱われます。新しく作成されたオブジェクトは、指定されたハッシュテーブル（空の可能性があります）の内容をコピーすることによって初期化されます。このクラスとそのすべてのサブクラスの&lt;b&gt;new（）&lt;/b&gt;コンストラクターは、初期化されたオブジェクト（ハッシュテーブル）へのblessされた参照を返します。</target>
        </trans-unit>
        <trans-unit id="ec83cba8a792f2692f5daa6167d2d16a27e37ea4" translate="yes" xml:space="preserve">
          <source>All arguments to bootstrap() are passed to the module's bootstrap function. The default code generated by</source>
          <target state="translated">bootstrap()へのすべての引数は、モジュールのブートストラップ関数に渡されます。によって生成されたデフォルトのコードは</target>
        </trans-unit>
        <trans-unit id="0afa74976449293b4a190730ab23181cbe3c7232" translate="yes" xml:space="preserve">
          <source>All binary formats in IEEE 754-2008 are accepted. For convenience, som aliases are recognized: &quot;half&quot; for &quot;binary16&quot;, &quot;single&quot; for &quot;binary32&quot;, &quot;double&quot; for &quot;binary64&quot;, &quot;quadruple&quot; for &quot;binary128&quot;, &quot;octuple&quot; for &quot;binary256&quot;, and &quot;sexdecuple&quot; for &quot;binary512&quot;.</source>
          <target state="translated">IEEE 754-2008 のすべてのバイナリ形式が受け入れられます。便宜上、いくつかのエイリアスが認識されます。&quot;binary16 &quot;は &quot;half&quot;、&quot;binary32 &quot;は &quot;single&quot;、&quot;binary64 &quot;は &quot;double&quot;、&quot;binary128 &quot;は &quot;quadruple&quot;、&quot;binary256 &quot;は &quot;octuple&quot;、&quot;binary512 &quot;は &quot;sexdecuple &quot;のようなエイリアスが認められています。</target>
        </trans-unit>
        <trans-unit id="0641330064a33946ad2abf69443076e60a765bfc" translate="yes" xml:space="preserve">
          <source>All bytes in a multi-byte UTF-8 character will have the high bit set, so you can test if you need to do something special with this character like this (the &lt;code&gt;UTF8_IS_INVARIANT()&lt;/code&gt; is a macro that tests whether the byte is encoded as a single byte even in UTF-8):</source>
          <target state="translated">マルチバイトUTF-8文字のすべてのバイトには高ビットが設定されているため、この文字でこのような特別な何かを行う必要があるかどうかをテストできます（ &lt;code&gt;UTF8_IS_INVARIANT()&lt;/code&gt; は、バイトが次のようにエンコードされているかどうかをテストするマクロです： UTF-8でも1バイト）：</target>
        </trans-unit>
        <trans-unit id="590dee2e50eabc45f58681f49c28cfb5697f75ac" translate="yes" xml:space="preserve">
          <source>All characters in the sequence come from the Common script and/or the Inherited script and/or a single other script.</source>
          <target state="translated">シーケンス内のすべての文字は、共通スクリプトおよび/または継承スクリプトおよび/または他の一つのスクリプトから来ています。</target>
        </trans-unit>
        <trans-unit id="3518d33b42f2dc03b1a9ce5a7bf1630a8c432554" translate="yes" xml:space="preserve">
          <source>All classes automatically inherit from the &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt; class, which is built-in to the Perl core. This class provides a number of methods, all of which can be called on either a class or an object. You can also choose to override some of these methods in your class. If you do so, we recommend that you follow the built-in semantics described below.</source>
          <target state="translated">すべてのクラスは、Perlコアに組み込まれている&lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt;クラスから自動的に継承します。このクラスはいくつかのメソッドを提供し、それらはすべてクラスまたはオブジェクトで呼び出すことができます。クラスでこれらのメソッドの一部をオーバーライドすることもできます。その場合は、以下で説明する組み込みのセマンティクスに従うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="01913ce43f34cc16d63eaaa24a00e403aac3c548" translate="yes" xml:space="preserve">
          <source>All classes inherit from the &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt; class implicitly. The &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt; class is implemented by the Perl core, and provides several default methods, such as &lt;code&gt;isa()&lt;/code&gt; , &lt;code&gt;can()&lt;/code&gt; , and &lt;code&gt;VERSION()&lt;/code&gt; . The &lt;code&gt;UNIVERSAL&lt;/code&gt; class will</source>
          <target state="translated">すべてのクラスは&lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt;クラスを暗黙的に継承します。&lt;a href=&quot;universal&quot;&gt;ユニバーサル&lt;/a&gt;クラスは、Perlのコアによって実現され、のようないくつかのデフォルトの方法、提供された &lt;code&gt;isa()&lt;/code&gt; 、 &lt;code&gt;can()&lt;/code&gt; 、および &lt;code&gt;VERSION()&lt;/code&gt; 。 &lt;code&gt;UNIVERSAL&lt;/code&gt; のクラスの意志</target>
        </trans-unit>
        <trans-unit id="3d8786449350954bfaf5ebc4e26abe8061ed8466" translate="yes" xml:space="preserve">
          <source>All classes inherit from the &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt; class implicitly. The &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt; class is implemented by the Perl core, and provides several default methods, such as &lt;code&gt;isa()&lt;/code&gt;, &lt;code&gt;can()&lt;/code&gt;, and &lt;code&gt;VERSION()&lt;/code&gt;. The &lt;code&gt;UNIVERSAL&lt;/code&gt; class will</source>
          <target state="translated">すべてのクラスは、暗黙的に&lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt;クラスから継承します。&lt;a href=&quot;universal&quot;&gt;ユニバーサル&lt;/a&gt;クラスは、Perlのコアによって実現され、のようないくつかのデフォルトの方法、提供された &lt;code&gt;isa()&lt;/code&gt; 、 &lt;code&gt;can()&lt;/code&gt; 、および &lt;code&gt;VERSION()&lt;/code&gt; 。 &lt;code&gt;UNIVERSAL&lt;/code&gt; のクラスの意志</target>
        </trans-unit>
        <trans-unit id="d7ed55b8e4e0eb9f903d01566d45c62ffc547221" translate="yes" xml:space="preserve">
          <source>All code points that would be matched by this are matched by either &quot;Script_Extensions=Katakana&quot; or &quot;Script_Extensions=Hiragana&quot;</source>
          <target state="translated">これによってマッチするすべてのコードポイントは、 「Script_Extensions=カタカナ」か「Script_Extensions=ひらがな」のいずれかでマッチします。</target>
        </trans-unit>
        <trans-unit id="68b93a9f8c08d5ea78bcf3b0d94efaeadf4ebfe0" translate="yes" xml:space="preserve">
          <source>All command paragraphs (which are typically only one line long) start with &quot;=&quot;, followed by an identifier, followed by arbitrary text that the command can use however it pleases. Currently recognized commands are</source>
          <target state="translated">すべてのコマンドの段落(通常は1行のみの長さ)は&quot;=&quot;で始まり、識別子が続き、その後に任意のテキストが続き、コマンドが好きなように使うことができます。現在認識されているコマンドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1de072221a4c4b45ef17376165aefcc6117f7cbb" translate="yes" xml:space="preserve">
          <source>All contributors are credited (by name and email address) in the AUTHORS file, which is part of the perl distribution, as well as the Git commit history.</source>
          <target state="translated">すべての貢献者は、Git のコミット履歴と同様に、perl ディストリビューションの一部である AUTHORS ファイルに (名前とメールアドレスで)クレジットされています。</target>
        </trans-unit>
        <trans-unit id="7bb1791a22508fb25f0ae8abd390beff83b2b84d" translate="yes" xml:space="preserve">
          <source>All cp* are also available as ibm-*, ms-*, and windows-* . See also &lt;a href=&quot;http://czyborra.com/charsets/codepages.html&quot;&gt;http://czyborra.com/charsets/codepages.html&lt;/a&gt;.</source>
          <target state="translated">すべてのcp *は、ibm- *、ms- *、およびwindows- *としても使用できます。&lt;a href=&quot;http://czyborra.com/charsets/codepages.html&quot;&gt;http://czyborra.com/charsets/codepages.html&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="982b67a682c875ad11cfce0a29c201661fc04837" translate="yes" xml:space="preserve">
          <source>All data in Perl is a scalar, an array of scalars, or a hash of scalars. A scalar may contain one single value in any of three different flavors: a number, a string, or a reference. In general, conversion from one form to another is transparent. Although a scalar may not directly hold multiple values, it may contain a reference to an array or hash which in turn contains multiple values.</source>
          <target state="translated">Perl のすべてのデータはスカラ、スカラの配列、またはスカラのハッシュです。スカラは、数値、文字列、参照の3つの異なる形式のいずれかで1つの値を含むことができます。一般的に,ある形式から別の形式への変換は透過的である.スカラは複数の値を直接保持することはできませんが,配列やハッシュへの参照を含むことができます.</target>
        </trans-unit>
        <trans-unit id="ed2d650047726f656af3f0a2c3d91d2c0b337ee7" translate="yes" xml:space="preserve">
          <source>All decimal digits in the sequence come from the same block of 10 consecutive digits.</source>
          <target state="translated">シーケンス内のすべての10進数は、連続する10桁の同じブロックから来ています。</target>
        </trans-unit>
        <trans-unit id="69c2eb01381ceb109c37169bc1329fc48f7a2dca" translate="yes" xml:space="preserve">
          <source>All decryption filters work on the principle of &quot;security through obscurity.&quot; Regardless of how well you write a decryption filter and how strong your encryption algorithm is, anyone determined enough can retrieve the original source code. The reason is quite simple - once the decryption filter has decrypted the source back to its original form, fragments of it will be stored in the computer's memory as Perl parses it. The source might only be in memory for a short period of time, but anyone possessing a debugger, skill, and lots of patience can eventually reconstruct your program.</source>
          <target state="translated">すべての復号化フィルタは 「不明瞭さによるセキュリティ」の原則に基づいて動作する 復号化フィルタをどれだけうまく書けていても、暗号化アルゴリズムがどれだけ強力であっても、十分な判断力があれば誰でも元のソースコードを取り出すことができます。その理由は非常に単純です。一旦復号化フィルタがソースを元の形に復号化すると、Perl が解析する際にその断片がコンピュータのメモリに保存されます。ソースは短期間しかメモリに保存されないかもしれませんが、デバッガとスキルと忍耐力があれば、誰でも最終的にはプログラムを再構築することができます。</target>
        </trans-unit>
        <trans-unit id="ba741a80f2a14355d94b77c4ceb115a27afc7f18" translate="yes" xml:space="preserve">
          <source>All defaults for Configure can be used.</source>
          <target state="translated">Configure のすべてのデフォルトを使用することができます。</target>
        </trans-unit>
        <trans-unit id="acfa01600fe34368d13dbcac106b2c8f27f49465" translate="yes" xml:space="preserve">
          <source>All development releases of perl since 5.9.0 are covered.</source>
          <target state="translated">5.9.0以降のPerlの開発リリースはすべてカバーしています。</target>
        </trans-unit>
        <trans-unit id="df049cfa442a524a56259811400e36eee4811c18" translate="yes" xml:space="preserve">
          <source>All diagnostic output is sent to &lt;code&gt;STDERR&lt;/code&gt; .</source>
          <target state="translated">すべての診断出力は &lt;code&gt;STDERR&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="64e79b552ae9079b9dfb00241c55031cd0a6d511" translate="yes" xml:space="preserve">
          <source>All diagnostic output is sent to &lt;code&gt;STDERR&lt;/code&gt;.</source>
          <target state="translated">すべての診断出力は &lt;code&gt;STDERR&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="93306c0ef9fe5f266a659b8a075c1bae7f08ce4e" translate="yes" xml:space="preserve">
          <source>All dollar signs must be doubled in the $perl_code if you expect them to be interpreted normally, otherwise it will be considered a make macro. Also remember to quote make macros else it might be used as a bareword. For example:</source>
          <target state="translated">すべてのドル記号が正常に解釈されることを期待している場合、$perl_code内のすべてのドル記号は2倍にしなければなりません。また、make マクロを引用符で囲むことを忘れないでください。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7a1f8634b122edec02ff5f85c8a73c5f24ae4096" translate="yes" xml:space="preserve">
          <source>All environment vars must be stored in HKLM\Environment as strings. They are read at process startup.</source>
          <target state="translated">すべての環境変数は、文字列として HKLM\Environment に格納されなければならない。それらはプロセスの起動時に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="92b87396d02d1c058e99dc606debd7ebb31b0abf" translate="yes" xml:space="preserve">
          <source>All error reporting is done with exceptions (die'ing).</source>
          <target state="translated">すべてのエラー報告は例外(ダイイング)で行われます。</target>
        </trans-unit>
        <trans-unit id="aad7b02bc36afcc3c6ccb34581d934b2eb922003" translate="yes" xml:space="preserve">
          <source>All exports are optional.</source>
          <target state="translated">すべての輸出はオプションです。</target>
        </trans-unit>
        <trans-unit id="75a6a1a25e95f80ccec351dcecf8848cf88b4a03" translate="yes" xml:space="preserve">
          <source>All exports are optional. You must specify subs to import.</source>
          <target state="translated">すべてのエクスポートはオプションです。インポートするサブを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a4598089b44f88002de1104436e43b04446e3730" translate="yes" xml:space="preserve">
          <source>All exports are optional. You need to list which ones you want at import time:</source>
          <target state="translated">すべてのエクスポートはオプションです。インポート時に必要なものをリストアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="7a3f297670f9579dd31a61d74a21533ee88a594f" translate="yes" xml:space="preserve">
          <source>All features that combine Unicode and I/O also require using the new PerlIO feature. Almost all Perl 5.8 platforms do use PerlIO, though: you can see whether yours is by running &quot;perl -V&quot; and looking for &lt;code&gt;useperlio=define&lt;/code&gt; .</source>
          <target state="translated">UnicodeとI / Oを組み合わせるすべての機能でも、新しいPerlIO機能を使用する必要があります。ただし、ほとんどすべてのPerl 5.8プラットフォームはPerlIOを使用しますが、「perl -V」を実行して &lt;code&gt;useperlio=define&lt;/code&gt; を検索することで、自分のプラットフォームかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="663418839693a934f145e368b817368ec9da8457" translate="yes" xml:space="preserve">
          <source>All features that combine Unicode and I/O also require using the new PerlIO feature. Almost all Perl 5.8 platforms do use PerlIO, though: you can see whether yours is by running &quot;perl -V&quot; and looking for &lt;code&gt;useperlio=define&lt;/code&gt;.</source>
          <target state="translated">UnicodeとI / Oを組み合わせるすべての機能でも、新しいPerlIO機能を使用する必要があります。ただし、ほとんどすべてのPerl 5.8プラットフォームはPerlIOを使用し &lt;code&gt;useperlio=define&lt;/code&gt; 。「perl-V」を実行し、useperlio = defineを探すことで、自分のものかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="ad80d55320f9dffac4aa0255715379a201879293" translate="yes" xml:space="preserve">
          <source>All file tests (&lt;code&gt;-f&lt;/code&gt; , &lt;code&gt;-d&lt;/code&gt; ) except for &lt;code&gt;-t&lt;/code&gt; , which defaults to STDIN. See &lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; を除くすべてのファイルテスト（ &lt;code&gt;-f&lt;/code&gt; 、 &lt;code&gt;-d&lt;/code&gt; ）。デフォルトはSTDINです。&lt;a href=&quot;functions/-x&quot;&gt;-Xを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="2b3536b700bffdda6d1f615511ebd63b36d79bc4" translate="yes" xml:space="preserve">
          <source>All file tests (&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-d&lt;/code&gt;) except for &lt;code&gt;-t&lt;/code&gt;, which defaults to STDIN. See &lt;a href=&quot;perlfunc#-X&quot;&gt;&quot;-X&quot; in perlfunc&lt;/a&gt;</source>
          <target state="translated">デフォルトがSTDINである &lt;code&gt;-t&lt;/code&gt; を除くすべてのファイルテスト（ &lt;code&gt;-f&lt;/code&gt; 、 &lt;code&gt;-d&lt;/code&gt; ）。&lt;a href=&quot;perlfunc#-X&quot;&gt;perlfuncの「-X」を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="08be6efb337bd6c91da1907b6a743dc9f1f57549" translate="yes" xml:space="preserve">
          <source>All files are stored internally as &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects. Please consult the &lt;a href=&quot;Archive::Tar::File&quot;&gt;Archive::Tar::File&lt;/a&gt; documentation for details.</source>
          <target state="translated">すべてのファイルは、 &lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトとして内部的に保存されます。詳細については、&lt;a href=&quot;Archive::Tar::File&quot;&gt;Archive :: Tar :: Fileの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="815b16d15ecd8197f8c89531e6b38bdaa59c037d" translate="yes" xml:space="preserve">
          <source>All files are stored internally as &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects. Please consult the &lt;a href=&quot;tar/file&quot;&gt;Archive::Tar::File&lt;/a&gt; documentation for details.</source>
          <target state="translated">すべてのファイルは &lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトとして内部的に保存されます。詳細は&lt;a href=&quot;tar/file&quot;&gt;Archive :: Tar :: Fileの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f073482fc073c0918a2379dd16dc7865e1091f64" translate="yes" xml:space="preserve">
          <source>All files that match any regular expression in a file</source>
          <target state="translated">ファイル内の任意の正規表現にマッチするすべてのファイル</target>
        </trans-unit>
        <trans-unit id="cfa975a72f5514a96c923193276bf554b250a3e3" translate="yes" xml:space="preserve">
          <source>All files used by the program or function, normally presented as a list, and what it uses them for. File names should be enclosed in F&amp;lt;&amp;gt;. It's particularly important to document files that will be potentially modified.</source>
          <target state="translated">プログラムまたは関数によって使用されるすべてのファイル。通常はリストとして表示され、それらが何のために使用されるかを示します。ファイル名はF &amp;lt;&amp;gt;で囲む必要があります。変更される可能性のあるファイルを文書化することは特に重要です。</target>
        </trans-unit>
        <trans-unit id="a2dd9a73e29796f6b2de6625428d9204a9270fdb" translate="yes" xml:space="preserve">
          <source>All filter methods return the existing filter, if present, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if not.</source>
          <target state="translated">すべてのフィルターメソッドは、存在する場合は既存のフィルターを返し、存在しない場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4139db9439a578bf12cb959a5143dbafa321c592" translate="yes" xml:space="preserve">
          <source>All filter methods return the existing filter, if present, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in not.</source>
          <target state="translated">すべてのフィルターメソッドは、存在する場合は既存のフィルターを返し、存在しない場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="60b28d5e793ebb6f4e7dabaca1fb381c7f91a2f1" translate="yes" xml:space="preserve">
          <source>All filter methods return the existing filter, if present, or &lt;code&gt;undef&lt;/code&gt; if not.</source>
          <target state="translated">すべてのフィルターメソッドは、既存のフィルターが存在する場合はそれを返し、存在しない場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f258f594dcd790bdcd378df3365ecaddd9a85f4a" translate="yes" xml:space="preserve">
          <source>All filter methods return the existing filter, if present, or &lt;code&gt;undef&lt;/code&gt; in not.</source>
          <target state="translated">すべてのフィルターメソッドは、既存のフィルターが存在する場合はそれを返し、存在しない場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="311ff967643c4d237a819b285dc4b5880471f22d" translate="yes" xml:space="preserve">
          <source>All forms of the pragma enable use of the following 3 functions:</source>
          <target state="translated">すべての形式のpragmaは、以下の3つの関数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="74749eec650dc1a9457b607830f24533a5ba9c1c" translate="yes" xml:space="preserve">
          <source>All four routines return the number of arguments that the subroutine returned on the Perl stack.</source>
          <target state="translated">4つのルーチンはすべて、サブルーチンがPerlスタック上で返した引数の数を返します。</target>
        </trans-unit>
        <trans-unit id="5e2132ad2da2d7aa2f6043aad2cc1232db0e47df" translate="yes" xml:space="preserve">
          <source>All functions have the following rules to decide what it thinks you want:</source>
          <target state="translated">すべての機能は、それがあなたが欲しいと思うものを決定するために、次のようなルールを持っています。</target>
        </trans-unit>
        <trans-unit id="7a4768442025565f5f815b90b4d35c19d4f3c9c1" translate="yes" xml:space="preserve">
          <source>All functions return 1 on success, 0 on failure. $! will be set if an error was encountered.</source>
          <target state="translated">すべての関数は成功すると1を返し、失敗すると0を返します。エラーが発生した場合は、$!</target>
        </trans-unit>
        <trans-unit id="6ff8d7d6682320cce258b48a2cf6142f6da6f3bb" translate="yes" xml:space="preserve">
          <source>All functions that are capable of creating filehandles (open(), opendir(), pipe(), socketpair(), sysopen(), socket(), and accept()) automatically create an anonymous filehandle if the handle passed to them is an uninitialized scalar variable. This allows the constructs such as &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $fh, ...)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $fh,...)&lt;/code&gt; to be used to create filehandles that will conveniently be closed automatically when the scope ends, provided there are no other references to them. This largely eliminates the need for typeglobs when opening filehandles that must be passed around, as in the following example:</source>
          <target state="translated">ファイルハンドルを作成できるすべての関数（open（）、opendir（）、pipe（）、socketpair（）、sysopen（）、socket（）、accept（））は、渡されたハンドルが初期化されていないスカラー変数。これにより、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $fh, ...)&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $fh,...)&lt;/code&gt; などのコンストラクトを使用して、他に参照がなければ、スコープが終了したときに自動的に閉じるファイルハンドルを作成できます。彼らへ。これにより、次の例のように、受け渡しが必要なファイルハンドルを開くときにタイプグロブが不要になります。</target>
        </trans-unit>
        <trans-unit id="aaf8b5a1c33d35dc738f6386586e46de8c383c2d" translate="yes" xml:space="preserve">
          <source>All functions that are capable of creating filehandles (open(), opendir(), pipe(), socketpair(), sysopen(), socket(), and accept()) automatically create an anonymous filehandle if the handle passed to them is an uninitialized scalar variable. This allows the constructs such as &lt;code&gt;open(my $fh, ...)&lt;/code&gt; and &lt;code&gt;open(local $fh,...)&lt;/code&gt; to be used to create filehandles that will conveniently be closed automatically when the scope ends, provided there are no other references to them. This largely eliminates the need for typeglobs when opening filehandles that must be passed around, as in the following example:</source>
          <target state="translated">ファイルハンドルを作成できるすべての関数（open（）、opendir（）、pipe（）、socketpair（）、sysopen（）、socket（）、accept（））は、渡されたハンドルが次の場合、自動的に匿名ファイルハンドルを作成します。初期化されていないスカラー変数。これにより、 &lt;code&gt;open(my $fh, ...)&lt;/code&gt; や &lt;code&gt;open(local $fh,...)&lt;/code&gt; を使用して、スコープが終了したときに自動的に閉じられるファイルハンドルを作成できます。ただし、他に参照がない場合は彼らへ。これにより、次の例のように、渡す必要のあるファイルハンドルを開くときにtypeglobが不要になります。</target>
        </trans-unit>
        <trans-unit id="d065cb3e4cae07d77952f2b16264cb466cd1342a" translate="yes" xml:space="preserve">
          <source>All functions, unless otherwise noted, return a true value for success and a false value for failure and set &lt;code&gt;$^E&lt;/code&gt; on failure.</source>
          <target state="translated">すべての関数は、特に明記されていない限り、成功の場合はtrue値を返し、失敗の場合はfalse値を返し、失敗すると &lt;code&gt;$^E&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="8c0ff391fcad9c66a86b68973a78df205636b6ef" translate="yes" xml:space="preserve">
          <source>All information required to &quot;attach&quot; back to the shared resource object &lt;b&gt;must&lt;/b&gt; be contained &lt;b&gt;only&lt;/b&gt; in the &lt;code&gt;STORABLE_freeze&lt;/code&gt; return string. Otherwise, &lt;code&gt;STORABLE_freeze&lt;/code&gt; behaves as normal for &lt;code&gt;STORABLE_attach&lt;/code&gt; classes.</source>
          <target state="translated">共有リソースオブジェクトに「アタッチ」するために必要なすべての情報は、 &lt;code&gt;STORABLE_freeze&lt;/code&gt; 戻り文字列に&lt;b&gt;のみ&lt;/b&gt;含まれている&lt;b&gt;必要&lt;/b&gt;が&lt;b&gt;あり&lt;/b&gt;ます。それ以外の場合、 &lt;code&gt;STORABLE_freeze&lt;/code&gt; は &lt;code&gt;STORABLE_attach&lt;/code&gt; クラスの場合と同じように動作します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0ca38b7907bcdd63b3829617b4fa2da1157cda75" translate="yes" xml:space="preserve">
          <source>All inputs to WriteMakefile are Unicode characters, not just octets. EUMM seeks to handle all of these correctly. It is currently still not possible to portably use Unicode characters in module names, because this requires Perl to handle Unicode filenames, which is not yet the case on Windows.</source>
          <target state="translated">WriteMakefileへの入力はすべてUnicode文字であり、オクテットだけではありません。EUMM はこれらすべてを正しく扱おうとしています。モジュール名にUnicode文字を移植的に使用することは現在のところできません。</target>
        </trans-unit>
        <trans-unit id="d69ebadb686cb973f8c2cd133297ec1e0e33a51b" translate="yes" xml:space="preserve">
          <source>All invokes of</source>
          <target state="translated">のすべての呼び出し</target>
        </trans-unit>
        <trans-unit id="f7db4f7b59a73b241c425f0ac85ea3bc659ec79e" translate="yes" xml:space="preserve">
          <source>All length 0 or length 1 sequences are script runs.</source>
          <target state="translated">すべての長さ0または長さ1のシーケンスはスクリプト実行です。</target>
        </trans-unit>
        <trans-unit id="4ffd0a2ad25e2bbb80e9fa8d007272b04eac86d9" translate="yes" xml:space="preserve">
          <source>All list elements are numeric and come straight out of the C `struct tm'. &lt;code&gt;$sec&lt;/code&gt; , &lt;code&gt;$min&lt;/code&gt; , and &lt;code&gt;$hour&lt;/code&gt; are the seconds, minutes, and hours of the specified time.</source>
          <target state="translated">すべてのリスト要素は数値であり、Cのstruct tmから直接取得されます。 &lt;code&gt;$sec&lt;/code&gt; 、 &lt;code&gt;$min&lt;/code&gt; 、および &lt;code&gt;$hour&lt;/code&gt; は、指定された時刻の秒、分、および時間です。</target>
        </trans-unit>
        <trans-unit id="ff95eeb5b6dd6e265f0285a8d4265ffdc105283d" translate="yes" xml:space="preserve">
          <source>All list elements are numeric and come straight out of the C `struct tm'. &lt;code&gt;$sec&lt;/code&gt;, &lt;code&gt;$min&lt;/code&gt;, and &lt;code&gt;$hour&lt;/code&gt; are the seconds, minutes, and hours of the specified time.</source>
          <target state="translated">すべてのリスト要素は数値であり、Cの `struct tm 'から直接取得されます。 &lt;code&gt;$sec&lt;/code&gt; 、 &lt;code&gt;$min&lt;/code&gt; 、および &lt;code&gt;$hour&lt;/code&gt; は、指定された時間の秒、分、および時間です。</target>
        </trans-unit>
        <trans-unit id="b0cbbd027f9d74998550632f8f717d3b9830f840" translate="yes" xml:space="preserve">
          <source>All memory meant to be used with the Perl API functions should be manipulated using the macros described in this section. The macros provide the necessary transparency between differences in the actual malloc implementation that is used within perl.</source>
          <target state="translated">Perl API 関数で使用されるすべてのメモリは、このセクションで説明されているマクロを使用して操作しなければなりません。このマクロは、Perl 内で使用される実際の malloc 実装の違いの間に必要な透明性を提供します。</target>
        </trans-unit>
        <trans-unit id="9a9e166f6a8a9986486a965b0218230a1bd88001" translate="yes" xml:space="preserve">
          <source>All methods provided are accessible in a programmer style and in an interactive shell style.</source>
          <target state="translated">提供されるすべてのメソッドは、プログラマスタイルと対話型シェルスタイルでアクセス可能です。</target>
        </trans-unit>
        <trans-unit id="1459ac0067a9be1ca453815893a04263c9ab6fda" translate="yes" xml:space="preserve">
          <source>All modules should be tested before distribution (using &quot;make disttest&quot;), and the tests should also be available to people installing the modules (using &quot;make test&quot;). For Module::Build you would use the &lt;code&gt;make test&lt;/code&gt; equivalent &lt;code&gt;perl Build test&lt;/code&gt; .</source>
          <target state="translated">すべてのモジュールは配布前にテストする必要があり（ &quot;make disttest&quot;を使用）、テストはモジュールをインストールするユーザーも利用できるようにする必要があります（ &quot;make test&quot;を使用）。Module :: Buildの場合、 &lt;code&gt;make test&lt;/code&gt; 相当の &lt;code&gt;perl Build test&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5be4c20a61c35592e0ce3783fe22b0e2f54e4b4b" translate="yes" xml:space="preserve">
          <source>All modules should be tested before distribution (using &quot;make disttest&quot;), and the tests should also be available to people installing the modules (using &quot;make test&quot;). For Module::Build you would use the &lt;code&gt;make test&lt;/code&gt; equivalent &lt;code&gt;perl Build test&lt;/code&gt;.</source>
          <target state="translated">すべてのモジュールは配布前にテストする必要があり（「makedisttest」を使用）、モジュールをインストールする人もテストを利用できるようにする必要があります（「maketest」を使用）。モジュール::ビルドのためには、使用する &lt;code&gt;make test&lt;/code&gt; と同等 &lt;code&gt;perl Build test&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45a75ffb3c37d77e5c140116de26483a43d3e7a6" translate="yes" xml:space="preserve">
          <source>All objects belong to a specific class. For example, our</source>
          <target state="translated">すべてのオブジェクトは特定のクラスに属します。例えば、私たちの</target>
        </trans-unit>
        <trans-unit id="2c7cf8e7b7dd53d3724b40007e6f359fb761d4a2" translate="yes" xml:space="preserve">
          <source>All objects that are involved in -Dusedl builds should be compiled for this, probably by adding to all ccflags</source>
          <target state="translated">Dusedl のビルドに関与するすべてのオブジェクトは、おそらくすべての ccflags に追加することで、このためにコンパイルされなければなりません。</target>
        </trans-unit>
        <trans-unit id="155cadaa1628d8233a6288abc54bd74a4bddfdeb" translate="yes" xml:space="preserve">
          <source>All of &lt;code&gt;-I&lt;/code&gt;, &lt;code&gt;PERL5LIB&lt;/code&gt; and &lt;code&gt;use lib&lt;/code&gt; will also prepend arch and version subdirs if they are present</source>
          <target state="translated">&lt;code&gt;-I&lt;/code&gt; 、 &lt;code&gt;PERL5LIB&lt;/code&gt; 、および &lt;code&gt;use lib&lt;/code&gt; はすべて、archおよびversionサブディレクトリが存在する場合はそれらの先頭にも追加されます。</target>
        </trans-unit>
        <trans-unit id="758a43e77b8dfcfe840782d07ab7ccfb64e67a82" translate="yes" xml:space="preserve">
          <source>All of Perl's internal functions which will be exposed to the outside world are prefixed by &lt;code&gt;Perl_&lt;/code&gt; so that they will not conflict with XS functions or functions used in a program in which Perl is embedded. Similarly, all global variables begin with &lt;code&gt;PL_&lt;/code&gt; . (By convention, static functions start with &lt;code&gt;S_&lt;/code&gt; .)</source>
          <target state="translated">外部の世界に公開されるすべてのPerlの内部関数には、 &lt;code&gt;Perl_&lt;/code&gt; が前に付いているため、XS関数や、Perlが組み込まれているプログラムで使用される関数と競合しません。同様に、すべてのグローバル変数は &lt;code&gt;PL_&lt;/code&gt; で始まります。（慣例により、静的関数は &lt;code&gt;S_&lt;/code&gt; で始まります。）</target>
        </trans-unit>
        <trans-unit id="fdd02658f6f1cef4bb236db4f900317afb2e1336" translate="yes" xml:space="preserve">
          <source>All of Perl's internal functions which will be exposed to the outside world are prefixed by &lt;code&gt;Perl_&lt;/code&gt; so that they will not conflict with XS functions or functions used in a program in which Perl is embedded. Similarly, all global variables begin with &lt;code&gt;PL_&lt;/code&gt;. (By convention, static functions start with &lt;code&gt;S_&lt;/code&gt;.)</source>
          <target state="translated">外部に公開されるPerlのすべての内部関数には、XS関数またはPerlが組み込まれているプログラムで使用される関数と競合しないように、接頭辞が &lt;code&gt;Perl_&lt;/code&gt; になっています。同様に、すべてのグローバル変数は &lt;code&gt;PL_&lt;/code&gt; で始まります。（慣例により、静的関数は &lt;code&gt;S_&lt;/code&gt; で始まります。）</target>
        </trans-unit>
        <trans-unit id="f0201779d13335d0611380b1efaab78cf7d99ae8" translate="yes" xml:space="preserve">
          <source>All of Perl's source code is kept centrally in a Git repository at</source>
          <target state="translated">Perl のソースコードはすべて、Git リポジトリに一元管理されています。</target>
        </trans-unit>
        <trans-unit id="b835c5375c66baf3942c89d1ed7e134430d5d528" translate="yes" xml:space="preserve">
          <source>All of the above special cases can occasionally cause some problems. See &lt;a href=&quot;#BUGS-and-CAVEATS&quot;&gt;&quot;BUGS and CAVEATS&quot;&lt;/a&gt;.</source>
          <target state="translated">上記の特殊なケースはすべて、問題を引き起こす場合があります。&lt;a href=&quot;#BUGS-and-CAVEATS&quot;&gt;「バグと警告」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f5c3cc30932079fdea98918bb1694882d908dc3a" translate="yes" xml:space="preserve">
          <source>All of the above special cases can occasionally cause some problems. See &lt;a href=&quot;#BUGS-and-CAVEATS&quot;&gt;BUGS and CAVEATS&lt;/a&gt;.</source>
          <target state="translated">上記の特殊なケースはすべて、時々いくつかの問題を引き起こす可能性があります。&lt;a href=&quot;#BUGS-and-CAVEATS&quot;&gt;バグと警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e963123ae4ee166de73fb6fa8c1a51e4336a12f5" translate="yes" xml:space="preserve">
          <source>All of the above.</source>
          <target state="translated">上記の全てを</target>
        </trans-unit>
        <trans-unit id="0e73d4a25ee89208a71c06aba4a44554f2676c3f" translate="yes" xml:space="preserve">
          <source>All of the core documentation intended for end users lives in</source>
          <target state="translated">エンドユーザーを対象としたコアドキュメントはすべて、以下の場所にあります。</target>
        </trans-unit>
        <trans-unit id="c9818c2268912a790c38afb3337fdbd1be57190f" translate="yes" xml:space="preserve">
          <source>All of the following &lt;code&gt;SvREFCNT_inc&lt;/code&gt;* are optimized versions of &lt;code&gt;SvREFCNT_inc&lt;/code&gt;, and can be replaced with &lt;code&gt;SvREFCNT_inc&lt;/code&gt;.</source>
          <target state="translated">以下のすべての &lt;code&gt;SvREFCNT_inc&lt;/code&gt; は*のバージョンに最適化された &lt;code&gt;SvREFCNT_inc&lt;/code&gt; を、と置き換えることができる &lt;code&gt;SvREFCNT_inc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bb2fabac85e17c62678907ad7293e4a29bfd44a" translate="yes" xml:space="preserve">
          <source>All of the following SvREFCNT_inc* macros are optimized versions of SvREFCNT_inc, and can be replaced with SvREFCNT_inc.</source>
          <target state="translated">以下の SvREFCNT_inc*マクロはすべて,SvREFCNT_inc の最適化版であり,SvREFCNT_inc で置き換えることができます.</target>
        </trans-unit>
        <trans-unit id="82ef093e61dfa9c43730994ceca5ef32106472a3" translate="yes" xml:space="preserve">
          <source>All of the following have helped. Bug reports, patches, (im)moral support, or just words of encouragement have all been forthcoming.</source>
          <target state="translated">以下のすべてが助けになっています。バグレポート、パッチ、(im)道徳的なサポート、あるいは励ましの言葉など、すべてが提供されています。</target>
        </trans-unit>
        <trans-unit id="7491564d89215b867c8e0fd7859217a07aea983b" translate="yes" xml:space="preserve">
          <source>All of the following print &quot;ok&quot; or &quot;not ok&quot; depending on if the test succeeded or failed. They all also return true or false, respectively.</source>
          <target state="translated">以下のすべては、テストが成功したか失敗したかに応じて、&quot;ok &quot;または &quot;not ok &quot;を表示します。また、これらはすべて、それぞれ真または偽を返します。</target>
        </trans-unit>
        <trans-unit id="7b5b6c4bb9f864698edd88f10cead8ae59c894bd" translate="yes" xml:space="preserve">
          <source>All of the preceding examples are true whether or not the input value is quoted. The important feature is that the input value contains only a single decimal. See also &lt;a href=&quot;#Alpha-Versions&quot;&gt;&quot;Alpha Versions&quot;&lt;/a&gt;.</source>
          <target state="translated">上記の例はすべて、入力値が引用符で囲まれているかどうかに関係なく当てはまります。重要な機能は、入力値に小数点以下1桁しか含まれていないことです。&lt;a href=&quot;#Alpha-Versions&quot;&gt;「アルファバージョン」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3b9d747c65bc72fcf845faeccec19d3166662ec7" translate="yes" xml:space="preserve">
          <source>All of the routines are available for export, though none are exported by default. All of the constants used by &lt;code&gt;vmssysopen&lt;/code&gt; to specify access modes are exported by default. The routines are associated with the Exporter tag FUNCTIONS, and the constants are associated with the Exporter tag CONSTANTS, so you can more easily choose what you'd like to import:</source>
          <target state="translated">すべてのルーチンをエクスポートできますが、デフォルトではエクスポートされません。アクセスモードを指定するために &lt;code&gt;vmssysopen&lt;/code&gt; によって使用されるすべての定数は、デフォルトでエクスポートされます。ルーチンはExporterタグFUNCTIONSに関連付けられており、定数はExporterタグCONSTANTSに関連付けられているため、インポートするものをより簡単に選択できます。</target>
        </trans-unit>
        <trans-unit id="41e3b701113b5066b37e3af11d04cea9cb6499ec" translate="yes" xml:space="preserve">
          <source>All of these functions will croak on read-only scalars (see the previous section for more on those).</source>
          <target state="translated">これらの関数はすべて,読み取り専用のスカラで動作します(これらについては前のセクションを参照してください).</target>
        </trans-unit>
        <trans-unit id="4ff83273a3484775dac4d0e13bc9dfb2d37a34a0" translate="yes" xml:space="preserve">
          <source>All of these interact with or use &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt; which is worth understanding the basics of when building a website in Perl (there is a lot of useful &lt;a href=&quot;http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fsearch%3fq%3dplack%253A%253Amiddleware&quot;&gt;Plack::Middleware&lt;/a&gt;).</source>
          <target state="translated">これらはすべて、&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;と相互作用または使用しており、PerlでWebサイトを構築するときの基本を理解する価値があります（便利な&lt;a href=&quot;http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fsearch%3fq%3dplack%253A%253Amiddleware&quot;&gt;Plack :: Middlewareが&lt;/a&gt;たくさんあります）。</target>
        </trans-unit>
        <trans-unit id="3afc762b9492fbc5a363157430531c61246ff071" translate="yes" xml:space="preserve">
          <source>All of these interact with or use &lt;a href=&quot;plack&quot;&gt;Plack&lt;/a&gt; which is worth understanding the basics of when building a website in Perl (there is a lot of useful &lt;a href=&quot;https://metacpan.org/search?q=plack%3A%3Amiddleware&quot;&gt;Plack::Middleware&lt;/a&gt;).</source>
          <target state="translated">これらはすべて、PerlでWebサイトを構築する際の基本を理解する価値のある&lt;a href=&quot;plack&quot;&gt;Plack&lt;/a&gt;と相互作用するか、Plackを使用します（便利な&lt;a href=&quot;https://metacpan.org/search?q=plack%3A%3Amiddleware&quot;&gt;Plack ::ミドルウェアが&lt;/a&gt;たくさんあります）。</target>
        </trans-unit>
        <trans-unit id="d7bd34b9f55dae4ebdd141f2d4462b30406b5d33" translate="yes" xml:space="preserve">
          <source>All of these recipes assume that you have put &quot;use CPAN&quot; at the top of your program.</source>
          <target state="translated">これらのレシピはすべて、プログラムのトップに「使用CPAN」を入れたことを前提にしています。</target>
        </trans-unit>
        <trans-unit id="669764792c2fd17c1b68c9548896f6adc424fb5e" translate="yes" xml:space="preserve">
          <source>All of this is especially useful when perl is embedded in some other program, where output to STDOUT and STDERR may have to be redirected in some special way. See nvi and the Apache module for examples.</source>
          <target state="translated">これらはすべて、perl が他のプログラムに組み込まれている場合に特に便利です。例については nvi と Apache モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="f9469b3540381c36cb61f1bd013bbc92d5d1e0fa" translate="yes" xml:space="preserve">
          <source>All of this occurs in the routine &lt;code&gt;study_chunk()&lt;/code&gt; which uses a special structure &lt;code&gt;scan_data_t&lt;/code&gt; to store the analysis that it has performed, and does the &quot;peep-hole&quot; optimisations as it goes.</source>
          <target state="translated">これはすべて、特別な構造体 &lt;code&gt;scan_data_t&lt;/code&gt; を使用して、実行した分析を保存し、「のぞき穴」最適化を実行するルーチン &lt;code&gt;study_chunk()&lt;/code&gt; で発生します。</target>
        </trans-unit>
        <trans-unit id="52f1e1f474a63fabc7410cc13bd34f20b84caea7" translate="yes" xml:space="preserve">
          <source>All of those strange functions with</source>
          <target state="translated">との奇妙な機能のすべてが</target>
        </trans-unit>
        <trans-unit id="bd329654decca432a697c3105f88903a2261a243" translate="yes" xml:space="preserve">
          <source>All open handles are dup()-ed in pseudo-processes, so that closing any handles in one process does not affect the others. See below for some limitations.</source>
          <target state="translated">開いているハンドルはすべて擬似プロセス内で dup()されているので、あるプロセス内でハンドルを閉じても他のプロセスには影響を与えません。いくつかの制限事項については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="f714b09d9b62651db015cac63428a3e648501bda" translate="yes" xml:space="preserve">
          <source>All operations above are performed simultaneously, left to right.</source>
          <target state="translated">上記の操作は、左から右へ、すべて同時に行われます。</target>
        </trans-unit>
        <trans-unit id="2c5dee63173bc6728f471c2ffbe6ede7b9622657" translate="yes" xml:space="preserve">
          <source>All operators (including basic math operations) are overloaded if you declare your big floating point numbers as</source>
          <target state="translated">大きな浮動小数点数を</target>
        </trans-unit>
        <trans-unit id="47240c2bd1c42148438e132fbe97c4470bd81a8b" translate="yes" xml:space="preserve">
          <source>All operators (including basic math operations) are overloaded if you declare your big integers as</source>
          <target state="translated">大規模な整数を</target>
        </trans-unit>
        <trans-unit id="8aea450e6db040db0c87b5e94c4f04af81589adb" translate="yes" xml:space="preserve">
          <source>All operators (including basic math operations) are overloaded. Integer and floating-point constants are created as proper BigInts or BigFloats, respectively.</source>
          <target state="translated">すべての演算子(基本的な数学演算を含む)はオーバーロードされます。整数定数と浮動小数点定数は、それぞれ適切なBigIntsまたはBigFloatsとして作成されます。</target>
        </trans-unit>
        <trans-unit id="97e8744f2aba4f4c5299d3315f0e922fa7662452" translate="yes" xml:space="preserve">
          <source>All operators (including basic math operations) except the range operator &lt;code&gt;..&lt;/code&gt; are overloaded. Integer constants are created as proper BigInts.</source>
          <target state="translated">範囲演算子 &lt;code&gt;..&lt;/code&gt; を除くすべての演算子（基本的な数学演算を含む）はオーバーロードされます。整数定数は適切なBigIntsとして作成されます。</target>
        </trans-unit>
        <trans-unit id="d94d5908e53102da28ed793d2b7b1e3aac035e25" translate="yes" xml:space="preserve">
          <source>All options are passed either via the &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement, or via an explicit &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">すべてのオプションは、 &lt;code&gt;&lt;a href=&quot;../../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ステートメントまたは明示的な &lt;code&gt;&lt;a href=&quot;../../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; を介して渡されます。</target>
        </trans-unit>
        <trans-unit id="bb3a0e914f49235b08bf29fac5ca41e98d183a0b" translate="yes" xml:space="preserve">
          <source>All options are passed either via the &lt;code&gt;use&lt;/code&gt; statement, or via an explicit &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">すべてのオプションは、 &lt;code&gt;use&lt;/code&gt; ステートメントまたは明示的な &lt;code&gt;import&lt;/code&gt; を介して渡されます。</target>
        </trans-unit>
        <trans-unit id="6af1c2304a59b49a5e4c4bb3624f5d7d2569e662" translate="yes" xml:space="preserve">
          <source>All other arguments are optional and should correspond to filehandles to read from or the names of input files containing POD sections. A file name of &quot;&quot;, &quot;-&quot; or &quot;&amp;lt;&amp;amp;STDIN&quot; will be interpreted to mean standard input (which is the default if no arguments are given).</source>
          <target state="translated">他のすべての引数はオプションであり、読み取るファイルハンドルまたはPODセクションを含む入力ファイルの名前に対応している必要があります。「」、「-」、または「&amp;lt;＆STDIN」のファイル名は、標準入力を意味すると解釈されます（引数が指定されていない場合のデフォルト）。</target>
        </trans-unit>
        <trans-unit id="7f44679a6de4260413fa97b63aefa6bbb62b1b1f" translate="yes" xml:space="preserve">
          <source>All other code points corresponding to Unicode characters, including private use and those yet to be assigned, are never considered malformed and never warn.</source>
          <target state="translated">私用やまだ割り当てられていないものも含めて、Unicode キ ャ ラ ク タ に対応する他のすべての コ ー ド 点は、 決して不正な形である と は見なされず、 警告 さ れることもありません。</target>
        </trans-unit>
        <trans-unit id="9abb59ed9447dcd04c7f87e709793152669bc13e" translate="yes" xml:space="preserve">
          <source>All other errors may be trapped using the modern interface, otherwise they will be &lt;code&gt;carp&lt;/code&gt; ed about. Program execution will not be halted.</source>
          <target state="translated">他のすべてのエラーは、そうでなければなり、近代的なインタフェースを使用して捕捉することが可能 &lt;code&gt;carp&lt;/code&gt; について編。プログラムの実行は停止されません。</target>
        </trans-unit>
        <trans-unit id="faec86b55acacba2c827ed96c30e6b30d931267e" translate="yes" xml:space="preserve">
          <source>All other errors may be trapped using the modern interface, otherwise they will be &lt;code&gt;carp&lt;/code&gt;ed about. Program execution will not be halted.</source>
          <target state="translated">他のすべてのエラーは、そうでなければなり、近代的なインタフェースを使用して捕捉することが可能 &lt;code&gt;carp&lt;/code&gt; について編。プログラムの実行は停止されません。</target>
        </trans-unit>
        <trans-unit id="87f6ed6f32251cf3d91bc227de27a29b35179c3f" translate="yes" xml:space="preserve">
          <source>All other implemented styles of rounding attempt to round to the &quot;nearest digit.&quot; If the digit D immediately to the right of the rounding place (skipping the decimal point) is greater than 5, the number is incremented at the rounding place (possibly causing a cascade of incrementation): e.g. when rounding to units, 0.9 rounds to 1, and -19.9 rounds to -20. If D &amp;lt; 5, the number is similarly truncated at the rounding place: e.g. when rounding to units, 0.4 rounds to 0, and -19.4 rounds to -19.</source>
          <target state="translated">他のすべての実装された丸めスタイルは、「最も近い数字」に丸めようとします。丸め位置のすぐ右側にある数字D（小数点をスキップ）が5より大きい場合、数値は丸め位置で増分されます（増分のカスケードが発生する可能性があります）。たとえば、単位に丸める場合、0.9は1に丸められます。 、-19.9は-20に丸められます。 D &amp;lt;5の場合、数値は丸めの場所で同様に切り捨てられます。たとえば、単位に丸める場合、0.4は0に丸められ、-19.4は-19に丸められます。</target>
        </trans-unit>
        <trans-unit id="7dae17a178b56f669108181e39b9ef2af831e579" translate="yes" xml:space="preserve">
          <source>All other keys are ignored.</source>
          <target state="translated">他のすべてのキーは無視されます。</target>
        </trans-unit>
        <trans-unit id="8a9098d06193e15bfd29247a605d0c677298968e" translate="yes" xml:space="preserve">
          <source>All other locale-senstive functions automatically use the per-thread locale, if that is turned on, and failing that, the global locale. Thus calls to &lt;code&gt;setlocale&lt;/code&gt; are ineffective on POSIX systems for the current thread if that thread is using a per-thread locale. If perl is compiled for single-thread operation, it does not use the per-thread functions, so &lt;code&gt;setlocale&lt;/code&gt; does work as expected.</source>
          <target state="translated">他のすべてのロケール依存関数は、スレッドごとのロケールがオンになっている場合は自動的に使用し、それがオンになっていない場合はグローバルロケールを使用します。したがって、現在のスレッドがスレッドごとのロケールを使用している場合、そのスレッドのPOSIXシステムでは &lt;code&gt;setlocale&lt;/code&gt; の呼び出しは無効です。perlがシングルスレッド操作用にコンパイルされている場合、perlはスレッドごとの関数を使用しないため、 &lt;code&gt;setlocale&lt;/code&gt; は期待どおりに機能します。</target>
        </trans-unit>
        <trans-unit id="0673283fae5e4cb931ef195f174d0d6b1d1f68b5" translate="yes" xml:space="preserve">
          <source>All other methods upgrade themselves only when one (or all) of their arguments are of the class mentioned in $upgrade (This might change in later versions to a more sophisticated scheme):</source>
          <target state="translated">他のすべてのメソッドは、引数のひとつ (あるいはすべて)が $upgrade で指定したクラスのものである場合にのみ、自分自身をアップグレードします (これは後のバージョンでは、より洗練されたスキームに変更されるかもしれません)。</target>
        </trans-unit>
        <trans-unit id="cb6f2dfb3c6acf62470099509a2f6f369a6ffdf7" translate="yes" xml:space="preserve">
          <source>All other methods upgrade themselves only when one (or all) of their arguments are of the class mentioned in $upgrade.</source>
          <target state="translated">他のすべてのメソッドは、引数のひとつ (またはすべて)が $upgrade で指定したクラスのものである場合にのみ、自分自身をアップグレードします。</target>
        </trans-unit>
        <trans-unit id="5e2040cfcc351c3e2d5a5185b8c874a98a40126c" translate="yes" xml:space="preserve">
          <source>All other object methods and overloaded functions can be directly inherited from the parent class.</source>
          <target state="translated">他のすべてのオブジェクトメソッドとオーバーロードされた関数は、親クラスから直接継承することができます。</target>
        </trans-unit>
        <trans-unit id="b83a0c68243d6a9c451b88def8620109da8b38fe" translate="yes" xml:space="preserve">
          <source>All other parameters that control the content of the gzip header will be ignored if this parameter is set to 1.</source>
          <target state="translated">このパラメータが1に設定されている場合、 gzipヘッダの内容を制御する他のすべてのパラメータは無視される。</target>
        </trans-unit>
        <trans-unit id="7dd23b69265fff0580e5c7fca763ddf4369a2041" translate="yes" xml:space="preserve">
          <source>All other return values (including the list of the single zero, and the list containing a single empty string) are considered successful. However, real-world code isn't always that easy. Perhaps the code you're working with returns a string containing the word &quot;FAIL&quot; upon failure, or a two element list containing &lt;code&gt;(undef, &quot;human error message&quot;)&lt;/code&gt;. To make autodie work with these sorts of subroutines, we have the</source>
          <target state="translated">他のすべての戻り値（単一のゼロのリスト、および単一の空の文字列を含むリストを含む）は成功したと見なされます。ただし、実際のコードは必ずしも簡単ではありません。おそらく、使用しているコードは、失敗時に「FAIL」という単語を含む文字列、または &lt;code&gt;(undef, &quot;human error message&quot;)&lt;/code&gt; を含む2つの要素のリストを返します。これらの種類のサブルーチンで自動ダイを機能させるために、</target>
        </trans-unit>
        <trans-unit id="057550e163f77ce1c2c84330009e1ed5dc21c76b" translate="yes" xml:space="preserve">
          <source>All other strings are invalid in the license field.</source>
          <target state="translated">他のすべての文字列は、ライセンス フィールドでは無効です。</target>
        </trans-unit>
        <trans-unit id="28d480a546a9a634515a6d0068d74dcc0f65e580" translate="yes" xml:space="preserve">
          <source>All other subdirectories of</source>
          <target state="translated">の他のすべてのサブディレクトリ</target>
        </trans-unit>
        <trans-unit id="3d4278880bd5d7c0f0659132769c668b6b97349d" translate="yes" xml:space="preserve">
          <source>All output is to STDERR.</source>
          <target state="translated">全ての出力はSTDERRになります。</target>
        </trans-unit>
        <trans-unit id="b9ddaef3946cbe872210302e8ceafb627dfba699" translate="yes" xml:space="preserve">
          <source>All parameters to &lt;code&gt;context&lt;/code&gt; are optional.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; へのすべてのパラメーターはオプションです。</target>
        </trans-unit>
        <trans-unit id="6c37ee1b0941f972f146000c72b7c3b6715243db" translate="yes" xml:space="preserve">
          <source>All possible messages the program can print out and what they mean. You may wish to follow the same documentation style as the Perl documentation; see perldiag(1) for more details (and look at the POD source as well).</source>
          <target state="translated">プログラムが出力できるすべての可能性のあるメッセージとその意味。詳細は perldiag(1)を参照してください (POD のソースも参照してください)。</target>
        </trans-unit>
        <trans-unit id="604e2a22c32db1e7a6f30a5a33e18c36a9822954" translate="yes" xml:space="preserve">
          <source>All printable characters, which is the set of all graphical characters plus those whitespace characters which are not also controls.</source>
          <target state="translated">すべての印刷可能な文字は、すべてのグラフィカルな文字とコントロールではない空白文字のセットです。</target>
        </trans-unit>
        <trans-unit id="5f0cb252127c0b51324ce6af0cb1b37825719005" translate="yes" xml:space="preserve">
          <source>All questions related to building for WinCE devices could be asked in</source>
          <target state="translated">WinCE デバイスの構築に関連するすべての質問は、以下で行うことができます。</target>
        </trans-unit>
        <trans-unit id="c9e683a0de1e5a544a3bb7d54d6d9928ee9237a9" translate="yes" xml:space="preserve">
          <source>All references to line numbers by the program (warnings, errors, ...) will treat the &lt;code&gt;#!&lt;/code&gt; line as the first line. Thus a warning on the 2nd line of the program, which is on the 100th line in the file will be reported as line 2, not as line 100. This can be overridden by using the &lt;code&gt;#line&lt;/code&gt; directive. (See &lt;a href=&quot;perlsyn#Plain-Old-Comments-%28Not%21%29&quot;&gt;&quot;Plain Old Comments (Not!)&quot; in perlsyn&lt;/a&gt;)</source>
          <target state="translated">プログラムによる行番号へのすべての参照（警告、エラーなど）は、 &lt;code&gt;#!&lt;/code&gt; を扱います。最初の行として行。したがって、ファイルの100行目にあるプログラムの2行目の警告は、100行目ではなく2行目として報告されます。これは、 &lt;code&gt;#line&lt;/code&gt; lineディレクティブを使用してオーバーライドできます。 （&lt;a href=&quot;perlsyn#Plain-Old-Comments-%28Not%21%29&quot;&gt;perlsynの「PlainOld Comments（Not！）」を&lt;/a&gt;参照してください）</target>
        </trans-unit>
        <trans-unit id="af228b0481468b2f1d341e2655d2bfbf46fb813b" translate="yes" xml:space="preserve">
          <source>All references to line numbers by the program (warnings, errors, ...) will treat the &lt;code&gt;#!&lt;/code&gt; line as the first line. Thus a warning on the 2nd line of the program, which is on the 100th line in the file will be reported as line 2, not as line 100. This can be overridden by using the &lt;code&gt;#line&lt;/code&gt; directive. (See &lt;a href=&quot;perlsyn#Plain-Old-Comments-(Not!)&quot;&gt;Plain Old Comments (Not!) in perlsyn&lt;/a&gt;)</source>
          <target state="translated">プログラムによる行番号へのすべての参照（警告、エラーなど）は、 &lt;code&gt;#!&lt;/code&gt; 最初の行として行。したがって、プログラムの2行目（ファイルの100行目）の警告は、100行目ではなく2行目として報告されます。これは、 &lt;code&gt;#line&lt;/code&gt; line ディレクティブを使用してオーバーライドできます。（&lt;a href=&quot;perlsyn#Plain-Old-Comments-(Not!)&quot;&gt;perlsynのPlain Old Comments（Not！）を参照&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e60ba7561109a1c032c7ac0364a6dfa0ffa088bc" translate="yes" xml:space="preserve">
          <source>All results share some common attributes:</source>
          <target state="translated">すべての結果は、いくつかの共通の属性を持っています。</target>
        </trans-unit>
        <trans-unit id="3639ec0f50b0f9a9a60809dc558a8b5d72fef67b" translate="yes" xml:space="preserve">
          <source>All rights reserved.</source>
          <target state="translated">すべての権利は留保されています。</target>
        </trans-unit>
        <trans-unit id="1a067ae12ba3c0d999a29e551f40bb7142e1e1b0" translate="yes" xml:space="preserve">
          <source>All rounding functions take as a second parameter a rounding mode from one of the following: 'even', 'odd', '+inf', '-inf', 'zero', 'trunc' or 'common'.</source>
          <target state="translated">すべての丸め関数は、2 番目のパラメータとして、以下のいずれかの丸めモードを取ります。even'、'odd'、'+inf'、'-inf'、'zero'、'trunc'、'common'のいずれかです。</target>
        </trans-unit>
        <trans-unit id="2b331c6fdc80ccf345de0513f8a62b9eab6492a7" translate="yes" xml:space="preserve">
          <source>All routines expect to be given real or complex numbers. Don't attempt to use BigFloat, since Perl has currently no rule to disambiguate a '+' operation (for instance) between two overloaded entities.</source>
          <target state="translated">すべてのルーチンは、実数または複素数が与えられることを期待しています。現在のところ、Perlには、2つのオーバーロードされた実体間の'+'演算(例えば)を曖昧さをなくすルールがないので、BigFloatを使用しようとしないでください。</target>
        </trans-unit>
        <trans-unit id="e55cf27d1ee5fe9a7d51e12a991cd2052b26c3ef" translate="yes" xml:space="preserve">
          <source>All single forms are Perl extensions; a few compound forms are as well, and are noted as such.</source>
          <target state="translated">単一の形式はすべて Perl の拡張で、いくつかの複合形式も同様で、そのように表記されています。</target>
        </trans-unit>
        <trans-unit id="47270bc8154b38c6bf8c6928d77cd1d441578544" translate="yes" xml:space="preserve">
          <source>All stable releases of perl since 5.6.0 are covered.</source>
          <target state="translated">5.6.0 以降の perl の安定版リリースをすべてカバーしています。</target>
        </trans-unit>
        <trans-unit id="eab81422eaa753ceb04583bd0ca24dcc4c83f889" translate="yes" xml:space="preserve">
          <source>All subpatterns, either delivered as a list-context result or as &lt;code&gt;$1&lt;/code&gt;</source>
          <target state="translated">リストコンテキストの結果として、または &lt;code&gt;$1&lt;/code&gt; として配信されるすべてのサブパターン</target>
        </trans-unit>
        <trans-unit id="48589ddd875d011fdf990744a29e7ccd3465ffa6" translate="yes" xml:space="preserve">
          <source>All subsequent characters can be letters, numbers (0-9), hyphens (-), underscores (_), colons (:), and periods (.).</source>
          <target state="translated">後続のすべての文字は、文字、数字 (0-9)、ハイフン (-)、アンダースコア (_)、コロン (:)、ピリオド (.)です。</target>
        </trans-unit>
        <trans-unit id="42ba1038004475ab41cd7a5ef01656aad2449ad3" translate="yes" xml:space="preserve">
          <source>All systems use the virtual &lt;code&gt;&quot;\n&quot;&lt;/code&gt; to represent a line terminator, called a &quot;newline&quot;. There is no such thing as an unvarying, physical newline character. It is only an illusion that the operating system, device drivers, C libraries, and Perl all conspire to preserve. Not all systems read &lt;code&gt;&quot;\r&quot;&lt;/code&gt; as ASCII CR and &lt;code&gt;&quot;\n&quot;&lt;/code&gt; as ASCII LF. For example, on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed, and on systems without a line terminator, printing &lt;code&gt;&quot;\n&quot;&lt;/code&gt; might emit no actual data. In general, use &lt;code&gt;&quot;\n&quot;&lt;/code&gt; when you mean a &quot;newline&quot; for your system, but use the literal ASCII when you need an exact character. For example, most networking protocols expect and prefer a CR+LF (&lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; or &lt;code&gt;&quot;\cM\cJ&quot;&lt;/code&gt; ) for line terminators, and although they often accept just &lt;code&gt;&quot;\012&quot;&lt;/code&gt; , they seldom tolerate just &lt;code&gt;&quot;\015&quot;&lt;/code&gt; . If you get in the habit of using &lt;code&gt;&quot;\n&quot;&lt;/code&gt; for networking, you may be burned some day.</source>
          <target state="translated">すべてのシステムは仮想 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を使用して、「改行」と呼ばれる行末記号を表します。変化しない物理的な改行文字などはありません。オペレーティングシステム、デバイスドライバー、Cライブラリ、Perlが共存して共存しているのは幻想にすぎません。すべてのシステムが &lt;code&gt;&quot;\r&quot;&lt;/code&gt; をASCII CRとして読み取り、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; をASCII LFとして読み取るわけではありません。たとえば、往年の古代Mac（MacOS Xより前）では、これらは逆転していました。ラインターミネータのないシステムでは、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 印刷しても実際のデータが出力されない場合がありました。一般に、システムの「改行」を意味する場合は &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 使用しますが、正確な文字が必要な場合はリテラルASCIIを使用します。例えば、ほとんどのネットワークプロトコルはCR + LFを期待し、優先します（ &lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; または &lt;code&gt;&quot;\cM\cJ&quot;&lt;/code&gt; ）行終端記号の場合、 &lt;code&gt;&quot;\012&quot;&lt;/code&gt; だけを受け入れることが多いが、 &lt;code&gt;&quot;\015&quot;&lt;/code&gt; だけを許容することはめったにない。ネットワーキングに &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を使用する習慣をつけると、いつかやけどをする可能性があります。</target>
        </trans-unit>
        <trans-unit id="00abc5a8d9f5478ddf4c1b41afc80f5d39c110db" translate="yes" xml:space="preserve">
          <source>All systems use the virtual &lt;code&gt;&quot;\n&quot;&lt;/code&gt; to represent a line terminator, called a &quot;newline&quot;. There is no such thing as an unvarying, physical newline character. It is only an illusion that the operating system, device drivers, C libraries, and Perl all conspire to preserve. Not all systems read &lt;code&gt;&quot;\r&quot;&lt;/code&gt; as ASCII CR and &lt;code&gt;&quot;\n&quot;&lt;/code&gt; as ASCII LF. For example, on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed, and on systems without a line terminator, printing &lt;code&gt;&quot;\n&quot;&lt;/code&gt; might emit no actual data. In general, use &lt;code&gt;&quot;\n&quot;&lt;/code&gt; when you mean a &quot;newline&quot; for your system, but use the literal ASCII when you need an exact character. For example, most networking protocols expect and prefer a CR+LF (&lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; or &lt;code&gt;&quot;\cM\cJ&quot;&lt;/code&gt;) for line terminators, and although they often accept just &lt;code&gt;&quot;\012&quot;&lt;/code&gt;, they seldom tolerate just &lt;code&gt;&quot;\015&quot;&lt;/code&gt;. If you get in the habit of using &lt;code&gt;&quot;\n&quot;&lt;/code&gt; for networking, you may be burned some day.</source>
          <target state="translated">すべてのシステムは、仮想 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を使用して、「改行」と呼ばれる行末記号を表します。不変の物理的な改行文字のようなものはありません。オペレーティングシステム、デバイスドライバー、Cライブラリ、およびPerlがすべて共謀して保存しているのは幻想にすぎません。すべてのシステムが &lt;code&gt;&quot;\r&quot;&lt;/code&gt; をASCIICRとして読み取り、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; をASCIILFとして読み取るわけではありません。たとえば、昔のMac（MacOS Xより前）では、これらは逆になっており、ラインターミネータのないシステムでは、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を出力しても実際のデータが出力されない場合があります。一般に、システムの「改行」を意味する場合は &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 使用しますが、正確な文字が必要な場合はリテラルASCIIを使用します。例えば、ほとんどのネットワークプロトコルは、CR + LF（ &lt;code&gt;&quot;\015\012&quot;&lt;/code&gt; または &lt;code&gt;&quot;\cM\cJ&quot;&lt;/code&gt; ）、ラインターミネータの場合、 &lt;code&gt;&quot;\012&quot;&lt;/code&gt; だけを受け入れることがよくありますが、 &lt;code&gt;&quot;\015&quot;&lt;/code&gt; だけを許容することはめったにありません。ネットワークに &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を使用する習慣を身に付けた場合、いつかやけどを負う可能性があります。</target>
        </trans-unit>
        <trans-unit id="fb8ea7b6eceda9fa2e8d1025a7231d980eabe21a" translate="yes" xml:space="preserve">
          <source>All test functions take a name argument. It's optional, but highly suggested that you use it.</source>
          <target state="translated">すべてのテスト関数は名前の引数を取ります。これは任意ですが、使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="08563314f6fd252cfab4add5f5d112e141d01e88" translate="yes" xml:space="preserve">
          <source>All tests are run in scalar context. So this:</source>
          <target state="translated">すべてのテストはスカラーコンテキストで実行されます。だからこれは</target>
        </trans-unit>
        <trans-unit id="9e1df8eee4a1033ecd0a19707416e97c2ada1eab" translate="yes" xml:space="preserve">
          <source>All tests should succeed (with some of them skipped). If you have the same version of Perl installed, it is crucial that you have &lt;code&gt;.&lt;/code&gt; early in your LIBPATH (or in BEGINLIBPATH), otherwise your tests will most probably test the wrong version of Perl.</source>
          <target state="translated">すべてのテストが成功するはずです（一部のテストはスキップされます）。同じバージョンのPerlがインストールされている場合は、それが重要です &lt;code&gt;.&lt;/code&gt; LIBPATH（またはBEGINLIBPATH）の早い段階で、それ以外の場合、テストはおそらく間違ったバージョンのPerlをテストします。</target>
        </trans-unit>
        <trans-unit id="525c6957ea6de35e124ab99764227b6cdf29f16d" translate="yes" xml:space="preserve">
          <source>All tests were conducted on the oldest supported AIX technology level with the latest support package applied. If the tested AIX version is out of support (AIX 4.3.3, 5.1, 5.2) then the last available support level was used.</source>
          <target state="translated">すべてのテストは、最新のサポートパッケージを適用した、最も古いサポートされているAIXテクノロジーレベルで実施されました。テストされたAIXバージョンがサポートされていない場合(AIX 4.3.3.3、5.1、5.2)、最後に利用可能なサポートレベルが使用されました。</target>
        </trans-unit>
        <trans-unit id="39ef06ab79291a214e8f7d5dbacda492f3f9bc96" translate="yes" xml:space="preserve">
          <source>All the</source>
          <target state="translated">すべての</target>
        </trans-unit>
        <trans-unit id="6adc75ada238ccb6959bf3be512aa6c8d041cf3e" translate="yes" xml:space="preserve">
          <source>All the DLLs built with the current versions of Perl have ID strings identifying the name of the extension, its version, and the version of Perl required for this DLL. Run &lt;code&gt;bldlevel DLL-name&lt;/code&gt; to find this info.</source>
          <target state="translated">現在のバージョンのPerlで構築されたすべてのDLLには、拡張機能の名前、そのバージョン、およびこのDLLに必要なPerlのバージョンを識別するID文字列があります。この情報を見つけるには、 &lt;code&gt;bldlevel DLL-name&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4e1fe3c41d4a92f980feaffab352908a5ae600b4" translate="yes" xml:space="preserve">
          <source>All the above</source>
          <target state="translated">上記のすべて</target>
        </trans-unit>
        <trans-unit id="bf0f04a776f7c27f1c272831fed2f282bc5d62df" translate="yes" xml:space="preserve">
          <source>All the above &quot;don't&quot;:s may look daunting, and they are, but the key is to degrade gracefully if one cannot reach the particular network service one wants. Croaking or hanging do not look very professional.</source>
          <target state="translated">上記のすべての「しないでください」は、大変なことのように見えるかもしれませんが、重要なのは、特定のネットワークサービスに到達できない場合には、優雅に劣化させることです。唸ったり、ぶら下がったりするのは、非常にプロフェッショナルには見えません。</target>
        </trans-unit>
        <trans-unit id="4b15325c472386a4b2fcce8cfa22d048d90743b2" translate="yes" xml:space="preserve">
          <source>All the above operations</source>
          <target state="translated">上記のすべての操作</target>
        </trans-unit>
        <trans-unit id="18c65db4629a7b0de1b15db2854f6c3f0396dc3a" translate="yes" xml:space="preserve">
          <source>All the advice contained in this document has been gleaned from extensive conversations with experienced CPAN authors and users. Every piece of advice given here is the result of previous mistakes. This information is here to help you avoid the same mistakes and the extra work that would inevitably be required to fix them.</source>
          <target state="translated">本書に記載されているすべてのアドバイスは、経験豊富なCPANの著者やユーザーとの広範な会話から得られたものです。ここに記載されているアドバイスはすべて、過去に犯した間違いの結果です。この情報は、同じ過ちを犯したり、それを修正するために必然的に必要となる余計な作業を避けるために提供されています。</target>
        </trans-unit>
        <trans-unit id="035cec5a0531d1b6a2296cd59ca2814d6d18a1bb" translate="yes" xml:space="preserve">
          <source>All the binary operators left associate; &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; is higher precedence than the others, which all have equal precedence. The unary operator right associates, and has highest precedence. Thus this follows the normal Perl precedence rules for logical operators. Use parentheses to override the default precedence and associativity.</source>
          <target state="translated">すべての二項演算子は関連付けられたままです。 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; は他のすべてよりも優先順位が高く、すべて同じ優先順位です。単項演算子の権利は関連付けられ、最高の優先順位を持ちます。したがって、これは論理演算子の通常のPerl優先規則に従います。括弧を使用して、デフォルトの優先順位と結合性をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="3bed0ace25439f430502aa7b5d45bad3c074e505" translate="yes" xml:space="preserve">
          <source>All the block scope types share a common base, which corresponds to &lt;code&gt;CXt_BLOCK&lt;/code&gt;. This stores the old values of various scope-related variables like &lt;code&gt;PL_curpm&lt;/code&gt;, as well as information about the current scope, such as &lt;code&gt;gimme&lt;/code&gt;. On scope exit, the old variables are restored.</source>
          <target state="translated">すべてのブロックスコープタイプは、 &lt;code&gt;CXt_BLOCK&lt;/code&gt; に対応する共通ベースを共有します。これには、 &lt;code&gt;PL_curpm&lt;/code&gt; などのさまざまなスコープ関連変数の古い値と、 &lt;code&gt;gimme&lt;/code&gt; などの現在のスコープに関する情報が格納されます。スコープの終了時に、古い変数が復元されます。</target>
        </trans-unit>
        <trans-unit id="a6d917ce9244febe094ff576631bcd960c5f5696" translate="yes" xml:space="preserve">
          <source>All the common mathematical functions defined on real numbers that are extended to complex numbers share that same property of working</source>
          <target state="translated">複素数に拡張された実数上で定義されたすべての一般的な数学関数は,同じ性質を持っています.</target>
        </trans-unit>
        <trans-unit id="c39940047cd8d69a382c58b19f467066fdda2d58" translate="yes" xml:space="preserve">
          <source>All the common operations that can be performed on a real number have been defined to work on complex numbers as well, and are merely</source>
          <target state="translated">実数に対して実行できるすべての一般的な操作は複素数に対しても動作するように定義されており、単に</target>
        </trans-unit>
        <trans-unit id="db007a143c6d593324e3d9c9ba86712c556ce380" translate="yes" xml:space="preserve">
          <source>All the constants defined in &lt;a href=&quot;dbopen&quot;&gt;dbopen&lt;/a&gt; for use in the flags parameters in the methods defined below are also available. Refer to the Berkeley DB documentation for the precise meaning of the flags values.</source>
          <target state="translated">以下で定義されているメソッドのflagsパラメーターで使用するために&lt;a href=&quot;dbopen&quot;&gt;dbopen&lt;/a&gt;で定義されているすべての定数も使用できます。フラグ値の正確な意味については、BerkeleyDBのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="af40a4a3889be35304f9f526d3725dd711506782" translate="yes" xml:space="preserve">
          <source>All the constants defined in &lt;a href=&quot;http://search.cpan.org/perldoc/dbopen&quot;&gt;dbopen&lt;/a&gt; for use in the flags parameters in the methods defined below are also available. Refer to the Berkeley DB documentation for the precise meaning of the flags values.</source>
          <target state="translated">以下で定義されているメソッドのフラグパラメータで使用するために&lt;a href=&quot;http://search.cpan.org/perldoc/dbopen&quot;&gt;dbopen&lt;/a&gt;で定義されているすべての定数も使用できます。フラグ値の正確な意味については、Berkeley DBのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="90dde32e9abf15d2dcbf6ab5b218367d1761ce60" translate="yes" xml:space="preserve">
          <source>All the data uses to generate the &lt;code&gt;%Extensions&lt;/code&gt; hash is already present in the &lt;code&gt;Config&lt;/code&gt; module, but not in such a convenient format to quickly reference.</source>
          <target state="translated">&lt;code&gt;%Extensions&lt;/code&gt; ハッシュを生成するために使用するすべてのデータは、 &lt;code&gt;Config&lt;/code&gt; モジュールにすでに存在していますが、すばやく参照するのに便利な形式ではありません。</target>
        </trans-unit>
        <trans-unit id="0d00162e91300896732fceff8f7c85a986709fae" translate="yes" xml:space="preserve">
          <source>All the examples so far have shown objects based on a blessed hash. However, it's possible to bless any type of data structure or referent, including scalars, globs, and subroutines. You may see this sort of thing when looking at code in the wild.</source>
          <target state="translated">これまでのすべての例は、祝福されたハッシュに基づいたオブジェクトを示しています。しかし、スカラ、グロブ、サブルーチンなど、あらゆるタイプのデータ構造や参照元を祝福することが可能です。野生のコードを見ていると、このようなものを目にすることがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f288780205f670aaf71d07523bf6fc9a50b071fd" translate="yes" xml:space="preserve">
          <source>All the exportable functions are listed below -- you're free to import only some, or none at all. By default, none are imported. If you say:</source>
          <target state="translated">エクスポート可能な関数はすべて以下のリストにありますが、一部だけをインポートすることも、全くインポートしないことも自由です。デフォルトでは、何もインポートされません。もしあなたが</target>
        </trans-unit>
        <trans-unit id="43419a516d44de92566e7a60ec2e03f7ca89325e" translate="yes" xml:space="preserve">
          <source>All the functionality for this class has been moved to &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt;.</source>
          <target state="translated">このクラスのすべての機能は、&lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2 :: EventFacet :: Traceに&lt;/a&gt;移動されました。</target>
        </trans-unit>
        <trans-unit id="8180d8d25bc965560b9cb924a878e4aa18900134" translate="yes" xml:space="preserve">
          <source>All the functions are exported. There is no reason not to do this since the entire purpose is for testing Perl. Namespace pollution will be limited to the test script.</source>
          <target state="translated">すべての関数がエクスポートされます。全ての目的はPerlのテストなので、これをしない理由はありません。名前空間の汚染はテストスクリプトに限定されます。</target>
        </trans-unit>
        <trans-unit id="9454c3cf6a190b5a295b972d4fa8fdee1a65e24b" translate="yes" xml:space="preserve">
          <source>All the functions defined in &lt;a href=&quot;dbopen&quot;&gt;dbopen&lt;/a&gt; are available except for close() and dbopen() itself. The &lt;b&gt;DB_File&lt;/b&gt; method interface to the supported functions have been implemented to mirror the way Berkeley DB works whenever possible. In particular note that:</source>
          <target state="translated">close（）とdbopen（）自体を除いて、&lt;a href=&quot;dbopen&quot;&gt;dbopenで&lt;/a&gt;定義されているすべての関数を使用できます。サポートされている関数への&lt;b&gt;DB_File&lt;/b&gt;メソッドインターフェイスは、可能な限りBerkeleyDBの動作方法を反映するように実装されています。特に注意してください：</target>
        </trans-unit>
        <trans-unit id="dc02c5d731db84c233601bd3b09aab07385ecc22" translate="yes" xml:space="preserve">
          <source>All the functions defined in &lt;a href=&quot;http://search.cpan.org/perldoc/dbopen&quot;&gt;dbopen&lt;/a&gt; are available except for close() and dbopen() itself. The &lt;b&gt;DB_File&lt;/b&gt; method interface to the supported functions have been implemented to mirror the way Berkeley DB works whenever possible. In particular note that:</source>
          <target state="translated">close（）とdbopen（）自体を除いて、&lt;a href=&quot;http://search.cpan.org/perldoc/dbopen&quot;&gt;dbopenで&lt;/a&gt;定義されているすべての関数を使用できます。サポートされている関数への&lt;b&gt;DB_File&lt;/b&gt;メソッドインターフェースが実装され、Berkeley DBの動作を可能な限り反映します。特に次のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="85af2ce50ee2f541004fc9d53df5f4d00e80abb3" translate="yes" xml:space="preserve">
          <source>All the functions may be imported using the &lt;code&gt;:ALL&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;:ALL&lt;/code&gt; タグを使用して、すべての関数をインポートできます。</target>
        </trans-unit>
        <trans-unit id="e17de002dfef54a49f116af6d04ace151f1db1a1" translate="yes" xml:space="preserve">
          <source>All the functions return an integer. This is a count of the number of items returned by the Perl subroutine. The actual items returned by the subroutine are stored on the Perl stack.</source>
          <target state="translated">すべての関数は整数を返します。これはPerlのサブルーチンが返した項目の数をカウントしたものです。実際にサブルーチンによって返された項目はPerlスタックに格納されます。</target>
        </trans-unit>
        <trans-unit id="52532a7385f2fd6662a92f143b996eb16f224ae0" translate="yes" xml:space="preserve">
          <source>All the gzip headers defined in RFC 1952 can be created using this module.</source>
          <target state="translated">RFC 1952 で定義されているすべての gzip ヘッダは、このモジュールを使って作成することができます。</target>
        </trans-unit>
        <trans-unit id="51037cd1e5bef0efdf785304da29a37a7b0cdc06" translate="yes" xml:space="preserve">
          <source>All the modules and switches just described can be used in v5.20 with just plain &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , and, should the input locales not be UTF-8, you'll get the less than ideal behavior, described below, that you get with pre-v5.16 Perls, or when you use the locale pragma without the &lt;code&gt;:not_characters&lt;/code&gt; parameter in v5.16 and v5.18. If you are using exclusively UTF-8 locales in v5.20 and higher, the rest of this section does not apply to you.</source>
          <target state="translated">今説明したすべてのモジュールとスイッチは、v5.20で単純な &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; で使用できます。入力ロケールがUTF-8でない場合は、preで得られる以下の理想的な動作が得られません。 -v5.16 Perl、またはv5.16およびv5.18で &lt;code&gt;:not_characters&lt;/code&gt; パラメーターなしでロケールプラグマを使用する場合。v5.20以降でUTF-8ロケールのみを使用している場合、このセクションの残りの部分は適用されません。</target>
        </trans-unit>
        <trans-unit id="23a7427a0c93da04ca9f121cb6df7f21a70360e5" translate="yes" xml:space="preserve">
          <source>All the modules and switches just described can be used in v5.20 with just plain &lt;code&gt;use locale&lt;/code&gt;, and, should the input locales not be UTF-8, you'll get the less than ideal behavior, described below, that you get with pre-v5.16 Perls, or when you use the locale pragma without the &lt;code&gt;:not_characters&lt;/code&gt; parameter in v5.16 and v5.18. If you are using exclusively UTF-8 locales in v5.20 and higher, the rest of this section does not apply to you.</source>
          <target state="translated">今説明したすべてのモジュールとスイッチは、v5.20で単純な &lt;code&gt;use locale&lt;/code&gt; で使用できます。また、入力ロケールがUTF-8でない場合は、以下で説明する、preで得られる理想的とは言えない動作が発生します。 -v5.16 Perl、またはv5.16およびv5.18で &lt;code&gt;:not_characters&lt;/code&gt; パラメーターなしでロケールプラグマを使用する場合。v5.20以降でUTF-8ロケールのみを使用している場合、このセクションの残りの部分は適用されません。</target>
        </trans-unit>
        <trans-unit id="6bcfac1e4c22e90a7b2f875c6b72f2c0d403c1be" translate="yes" xml:space="preserve">
          <source>All the operators which need an argument in the integer format treat the argument as in modular arithmetic, e.g., &lt;code&gt;mod 2**32&lt;/code&gt; on a 32-bit architecture. &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt; &quot;%u&quot;, -1&lt;/code&gt; therefore provides the same result as &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt; &quot;%u&quot;, ~0&lt;/code&gt; .</source>
          <target state="translated">整数形式の引数を必要とするすべての演算子は、引数をモジュラー演算のように扱います。たとえば、32ビットアーキテクチャでは &lt;code&gt;mod 2**32&lt;/code&gt; です。したがって &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt; &quot;%u&quot;, -1&lt;/code&gt; &lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt; &quot;％u&quot;、-1は、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt; &quot;%u&quot;, ~0&lt;/code&gt; と同じ結果を提供します。</target>
        </trans-unit>
        <trans-unit id="a94aac67d589e0f8e1d0781724ece6b565784e0e" translate="yes" xml:space="preserve">
          <source>All the operators which need an argument in the integer format treat the argument as in modular arithmetic, e.g., &lt;code&gt;mod 2**32&lt;/code&gt; on a 32-bit architecture. &lt;code&gt;sprintf &quot;%u&quot;, -1&lt;/code&gt; therefore provides the same result as &lt;code&gt;sprintf &quot;%u&quot;, ~0&lt;/code&gt;.</source>
          <target state="translated">整数形式の引数を必要とするすべての演算子は、引数をモジュラー算術の場合と同様に扱います。たとえば、32ビットアーキテクチャの &lt;code&gt;mod 2**32&lt;/code&gt; です。したがって &lt;code&gt;sprintf &quot;%u&quot;, -1&lt;/code&gt; は、 &lt;code&gt;sprintf &quot;%u&quot;, ~0&lt;/code&gt; と同じ結果を提供します。</target>
        </trans-unit>
        <trans-unit id="dd418ef6a96f4eda4f1d57d08d07998ad0cc52e2" translate="yes" xml:space="preserve">
          <source>All the other escapes accepted by normal bracketed character classes are accepted here as well.</source>
          <target state="translated">通常の括弧付きキャラクタークラスで認められている他のエスケープは、ここでも認められています。</target>
        </trans-unit>
        <trans-unit id="a4fb9683d7bd9f1429d51b7805c318a33084783c" translate="yes" xml:space="preserve">
          <source>All the other macros which will be used in this example require you to have used this macro.</source>
          <target state="translated">この例で使用する他のすべてのマクロは、このマクロを使用している必要があります。</target>
        </trans-unit>
        <trans-unit id="dc1e1a6dd9bac655e5e0e61898ff5ebe0c2ee966" translate="yes" xml:space="preserve">
          <source>All the other methods are from &lt;a href=&quot;File::Spec::Unix&quot;&gt;File::Spec::Unix&lt;/a&gt;.</source>
          <target state="translated">他のすべてのメソッドは&lt;a href=&quot;File::Spec::Unix&quot;&gt;File :: Spec :: Unixからのもの&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="b08b2f77f4eeb817def95bb1cac60c09fd5e4ffe" translate="yes" xml:space="preserve">
          <source>All the others are scalar types, that is, things that can be bound to a &lt;code&gt;$&lt;/code&gt; variable. For these, the internal types are mostly orthogonal to types in the Perl language.</source>
          <target state="translated">その他はすべてスカラー型、つまり &lt;code&gt;$&lt;/code&gt; 変数にバインドできるものです。これらの場合、内部型はほとんどがPerl言語の型と直交しています。</target>
        </trans-unit>
        <trans-unit id="813e0349f99be3e1ec9a99a0d6e9329cddd2f012" translate="yes" xml:space="preserve">
          <source>All the properties that begin with &lt;code&gt;\p&lt;/code&gt; (and its inverse &lt;code&gt;\P&lt;/code&gt; ) are actually character classes that are Unicode-aware. There are dozens of them, see &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\p&lt;/code&gt; （およびその逆の &lt;code&gt;\P&lt;/code&gt; ）で始まるすべてのプロパティは、実際にはUnicode対応の文字クラスです。それらは数十あります&lt;a href=&quot;perluniprops&quot;&gt;。perlunipropsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5506ac6e7a7d731b7f67a3eafd003d6df2cdc5ce" translate="yes" xml:space="preserve">
          <source>All the properties that begin with &lt;code&gt;\p&lt;/code&gt; (and its inverse &lt;code&gt;\P&lt;/code&gt;) are actually character classes that are Unicode-aware. There are dozens of them, see &lt;a href=&quot;perluniprops&quot;&gt;perluniprops&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\p&lt;/code&gt; （およびその逆の &lt;code&gt;\P&lt;/code&gt; ）で始まるすべてのプロパティは、実際にはUnicode対応の文字クラスです。それらは数十あります&lt;a href=&quot;perluniprops&quot;&gt;。perlunipropsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0b65a75a2da1466ad79df3a0e8287f617c933054" translate="yes" xml:space="preserve">
          <source>All the sequences and escapes</source>
          <target state="translated">すべてのシーケンスとエスケープ</target>
        </trans-unit>
        <trans-unit id="6f5a47adb9e53e6ad59a65ed39b02f84d8f84ac1" translate="yes" xml:space="preserve">
          <source>All the supported functions should be called as methods, i.e., either as</source>
          <target state="translated">サポートされているすべての関数は、メソッドとして呼ばれなければなりません。</target>
        </trans-unit>
        <trans-unit id="7e345efa9c5194482201d78c3449d77663639ae8" translate="yes" xml:space="preserve">
          <source>All the talk in the world is useless without an implementation. In almost every case, the person or people who argue for a new feature will be expected to be the ones who implement it. Porters capable of coding new features have their own agendas, and are not available to implement your (possibly good) idea.</source>
          <target state="translated">世の中のすべての話は、実装がなければ意味がありません。ほとんどすべての場合において、新機能を主張する人や人々は、それを実装する人であることが期待されます。新しい機能をコーディングすることができるポータは、それぞれのアジェンダを持っていて、あなたの(おそらく良い)アイデアを実装することができません。</target>
        </trans-unit>
        <trans-unit id="93180c67bca739c994123a24439e25749e44ef95" translate="yes" xml:space="preserve">
          <source>All the tests will run but those that failed most recently will be run first. If no tests have failed since I started saving state all tests will run in their normal order. This combines full test coverage with early notification of failures.</source>
          <target state="translated">すべてのテストが実行されますが、最近失敗したものが最初に実行されます。状態の保存を開始してからテストが失敗していない場合は、すべてのテストが通常の順序で実行されます。これは、完全なテストカバレッジと失敗の早期通知を兼ね備えています。</target>
        </trans-unit>
        <trans-unit id="8a484c468483007c96c3a2efbbc829000cb69672" translate="yes" xml:space="preserve">
          <source>All the usual warnings about file locking apply here. In particular, note that file locking in Perl is &lt;b&gt;advisory&lt;/b&gt;, which means that holding a lock will not prevent anyone else from reading, writing, or erasing the file; it only prevents them from getting another lock at the same time. Locks are analogous to green traffic lights: If you have a green light, that does not prevent the idiot coming the other way from plowing into you sideways; it merely guarantees to you that the idiot does not also have a green light at the same time.</source>
          <target state="translated">ここでは、ファイルロックに関する通常の警告がすべて適用されます。特に、Perlでのファイルロックは&lt;b&gt;助言&lt;/b&gt;であることに注意してください。つまり、ロックを保持しても、他のユーザーによるファイルの読み取り、書き込み、または消去が妨げられることはありません。それらが同時に別のロックを取得するのを防ぐだけです。ロックは緑の信号機に似ています。緑の信号灯があっても、逆方向に馬鹿が横に侵入するのを防ぐことはできません。それはあなたに馬鹿が同時に青信号も持っていないことをあなたに保証するだけです。</target>
        </trans-unit>
        <trans-unit id="7e349ac65c026bbc32c4eb141cc9c0c2c6c1c9d7" translate="yes" xml:space="preserve">
          <source>All the work of numeric conversion is done in %subr and num(). Of course, %subr is not complete, it contains only operators used in the example below. Here is the extra-credit question: why do we need an explicit recursion in num()? (Answer is at the end of this section.)</source>
          <target state="translated">数値変換のすべての作業は %subr と num()で行われます。もちろん、%subrは完全ではなく、以下の例で使用されている演算子のみを含んでいます。ここで、余計な質問があります:なぜ num()で明示的な再帰が必要なのか? (答えはこのセクションの最後にあります。)</target>
        </trans-unit>
        <trans-unit id="0f15e65c6cfe10e49621033c9085af7927a8ea20" translate="yes" xml:space="preserve">
          <source>All these commands are callable via method interface and have names which conform to standard conventions with the leading &lt;code&gt;rl_&lt;/code&gt; stripped.</source>
          <target state="translated">これらのすべてのコマンドは、メソッドインターフェイスを介して &lt;code&gt;rl_&lt;/code&gt; ができ、先頭のrl_を取り除いた標準の規則に準拠した名前が付けられています。</target>
        </trans-unit>
        <trans-unit id="aef6bfec15b0c3e7aaddd8cd3a9fa0eb60d81533" translate="yes" xml:space="preserve">
          <source>All these flags require &lt;b&gt;-DDEBUGGING&lt;/b&gt; when you compile the Perl executable (but see &lt;code&gt;:opd&lt;/code&gt; in &lt;a href=&quot;Devel::Peek&quot;&gt;Devel::Peek&lt;/a&gt; or &lt;a href=&quot;re#%27debug%27-mode&quot;&gt;&quot;'debug' mode&quot; in re&lt;/a&gt; which may change this). See the</source>
          <target state="translated">これらのフラグはすべて、Perl実行可能ファイルをコンパイルするときに&lt;b&gt;-DDEBUGGINGを&lt;/b&gt;必要とします（ただし、これを変更する可能性があるのは、&lt;a href=&quot;Devel::Peek&quot;&gt;Devel :: Peekの&lt;/a&gt; &lt;code&gt;:opd&lt;/code&gt; または&lt;a href=&quot;re#%27debug%27-mode&quot;&gt;reの「デバッグ」モードを&lt;/a&gt;参照してください）。を参照してください</target>
        </trans-unit>
        <trans-unit id="1a68fff09705709c0c5d238842991f6619aad537" translate="yes" xml:space="preserve">
          <source>All these flags require &lt;b&gt;-DDEBUGGING&lt;/b&gt; when you compile the Perl executable (but see &lt;code&gt;:opd&lt;/code&gt; in &lt;a href=&quot;devel/peek&quot;&gt;Devel::Peek&lt;/a&gt; or &lt;a href=&quot;re#'debug'-mode&quot;&gt;'debug' mode in re&lt;/a&gt; which may change this). See the</source>
          <target state="translated">これらのフラグはすべて、Perl実行可能ファイルをコンパイルするときに&lt;b&gt;-DDEBUGGINGを&lt;/b&gt;必要とします（ただし、&lt;a href=&quot;devel/peek&quot;&gt;Devel :: Peekの&lt;/a&gt; &lt;code&gt;:opd&lt;/code&gt; またはこれを変更する可能性のある&lt;a href=&quot;re#'debug'-mode&quot;&gt;reの「デバッグ」モードを&lt;/a&gt;参照してください）。を参照してください</target>
        </trans-unit>
        <trans-unit id="4fa65daee4b35c0bdf01aba1673c1bba399f82d9" translate="yes" xml:space="preserve">
          <source>All these lines will have the same effect on the state of the $md5 object:</source>
          <target state="translated">これらの行はすべて、$md5オブジェクトの状態に同じ効果をもたらします。</target>
        </trans-unit>
        <trans-unit id="9bcd9b22dce2b631b5e9d54d48830f4469977758" translate="yes" xml:space="preserve">
          <source>All these variables have no effect on a newer Perl which supports the relevant feature.</source>
          <target state="translated">これらの変数はすべて、関連する機能をサポートしている新しい Perl には影響しません。</target>
        </trans-unit>
        <trans-unit id="75179ef80cbabbf7cf9ad45aff86010dedc268e1" translate="yes" xml:space="preserve">
          <source>All this obviously requires a way for the Perl internal functions to be either subroutines taking some kind of structure as the first argument, or subroutines taking nothing as the first argument. To enable these two very different ways of building the interpreter, the Perl source (as it does in so many other situations) makes heavy use of macros and subroutine naming conventions.</source>
          <target state="translated">これは明らかに、Perlの内部関数が何らかの構造体を第一引数に取るサブルーチンか、何も第一引数に取らないサブルーチンのどちらかになるようにする必要があります。これら2つの全く異なる方法でインタプリタを構築できるようにするために、Perlのソースでは(他の多くの状況でそうであるように)マクロとサブルーチンの命名規則を多用しています。</target>
        </trans-unit>
        <trans-unit id="05bb57d634b2fcc45dc9babcad96740ee2e8f313" translate="yes" xml:space="preserve">
          <source>All this should be handled automatically by the hints file, if requested.</source>
          <target state="translated">このすべての処理は、要求された場合、ヒントファイルによって自動的に処理されるべきです。</target>
        </trans-unit>
        <trans-unit id="7381ecad8164c50156cc34405ade99393869ea97" translate="yes" xml:space="preserve">
          <source>All those functions (red(), blue(), green(), etc.) appear to be separate, but the real code in the closure actually was compiled only once.</source>
          <target state="translated">これらの関数(red()、blue()、green()など)はすべて別のもののように見えますが、クロージャ内の実際のコードは実際には一度だけコンパイルされました。</target>
        </trans-unit>
        <trans-unit id="1eb3cfb093a32021b17dfa327362fe2a1ecb7499" translate="yes" xml:space="preserve">
          <source>All threads blocking on &lt;code&gt;dequeue()&lt;/code&gt; calls will be unblocked with any remaining items in the queue and/or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; being returned. Any subsequent calls to &lt;code&gt;dequeue()&lt;/code&gt; will behave like &lt;code&gt;dequeue_nb()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;dequeue()&lt;/code&gt; 呼び出しでブロックされているすべてのスレッドはブロック解除され、キューに残っているアイテムや &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。以降の &lt;code&gt;dequeue()&lt;/code&gt; の呼び出しは、 &lt;code&gt;dequeue_nb()&lt;/code&gt; のように動作します。</target>
        </trans-unit>
        <trans-unit id="5e0480f424427ee699ec4c6e37478b9b28b96374" translate="yes" xml:space="preserve">
          <source>All threads blocking on &lt;code&gt;dequeue()&lt;/code&gt; calls will be unblocked with any remaining items in the queue and/or &lt;code&gt;undef&lt;/code&gt; being returned. Any subsequent calls to &lt;code&gt;dequeue()&lt;/code&gt; will behave like &lt;code&gt;dequeue_nb()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dequeue()&lt;/code&gt; 呼び出しでブロックされているすべてのスレッドはブロックが解除され、キュー内の残りのアイテムや &lt;code&gt;undef&lt;/code&gt; が返されます。その後の &lt;code&gt;dequeue()&lt;/code&gt; の呼び出しは、 &lt;code&gt;dequeue_nb()&lt;/code&gt; のように動作します。</target>
        </trans-unit>
        <trans-unit id="31b59027aac85c24edba2402c4b5479124b0b5b8" translate="yes" xml:space="preserve">
          <source>All three APIs &lt;code&gt;fill_mstats($buf)&lt;/code&gt; , &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; , and &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; are designed to allocate no memory if used</source>
          <target state="translated">3つのすべてのAPI &lt;code&gt;fill_mstats($buf)&lt;/code&gt; 、 &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; 、および &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; は、使用してもメモリを割り当てないように設計されています</target>
        </trans-unit>
        <trans-unit id="41286ac523d18ad20149b16f2b604b3802d50a45" translate="yes" xml:space="preserve">
          <source>All three APIs &lt;code&gt;fill_mstats($buf)&lt;/code&gt;, &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt;, and &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; are designed to allocate no memory if used</source>
          <target state="translated">3つの &lt;code&gt;fill_mstats($buf)&lt;/code&gt; 、 &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; 、および &lt;code&gt;mstats2hash($buf, %hash)&lt;/code&gt; はすべて、使用された場合にメモリを割り当てないように設計されています</target>
        </trans-unit>
        <trans-unit id="93f405b3f1113c619eaa3ff8cf11a04161308e3b" translate="yes" xml:space="preserve">
          <source>All three types, namely &lt;code&gt;configure_requires&lt;/code&gt; , &lt;code&gt;build_requires&lt;/code&gt; , and &lt;code&gt;requires&lt;/code&gt; are supported in the way specified in the META.yml specification. The current implementation</source>
          <target state="translated">すべての3つのタイプ、すなわち &lt;code&gt;configure_requires&lt;/code&gt; 、 &lt;code&gt;build_requires&lt;/code&gt; 、および &lt;code&gt;requires&lt;/code&gt; META.yml仕様で指定された方法でサポートされています。現在の実装</target>
        </trans-unit>
        <trans-unit id="e69868d20db4582400a5d6cd9bcd656e5299ed1b" translate="yes" xml:space="preserve">
          <source>All variants of Unix, Mac OS (old and new), and Stream_LF files on VMS use a single character to end each line in the external representation of text (even though that single character is CARRIAGE RETURN on old, pre-Darwin flavors of Mac OS, and is LINE FEED on Unix and most VMS files). In other systems like OS/2, DOS, and the various flavors of MS-Windows, your program sees a &lt;code&gt;\n&lt;/code&gt; as a simple &lt;code&gt;\cJ&lt;/code&gt; , but what's stored in text files are the two characters &lt;code&gt;\cM\cJ&lt;/code&gt; . That means that if you don't use binmode() on these systems, &lt;code&gt;\cM\cJ&lt;/code&gt; sequences on disk will be converted to &lt;code&gt;\n&lt;/code&gt; on input, and any &lt;code&gt;\n&lt;/code&gt; in your program will be converted back to &lt;code&gt;\cM\cJ&lt;/code&gt; on output. This is what you want for text files, but it can be disastrous for binary files.</source>
          <target state="translated">Unix、Mac OS（古いものと新しいもの）、およびVMS上のStream_LFファイルのすべてのバリアントは、テキストの外部表現の各行を終了するために単一の文字を使用します（その単一の文字は、古い、Darwin以前のMacのバージョンではCARRIAGE RETURNです。 OS、およびUnixおよびほとんどのVMSファイルではLINE FEEDです）。 OS / 2、DOS、およびMS-Windowsのさまざまな種類のような他のシステムでは、プログラムは &lt;code&gt;\n&lt;/code&gt; を単純な &lt;code&gt;\cJ&lt;/code&gt; ますが、テキストファイルに格納されるのは2つの文字 &lt;code&gt;\cM\cJ&lt;/code&gt; です。つまり、これらのシステムでbinmode（）を使用しない場合、ディスク上の &lt;code&gt;\cM\cJ&lt;/code&gt; シーケンスは入力時に &lt;code&gt;\n&lt;/code&gt; に変換され、プログラム内のすべての &lt;code&gt;\n&lt;/code&gt; は &lt;code&gt;\cM\cJ&lt;/code&gt; 変換されます。出力時。これはテキストファイルに必要なことですが、バイナリファイルには悲惨な場合があります。</target>
        </trans-unit>
        <trans-unit id="2225a59f0929103c1700eff0727135f74b745f47" translate="yes" xml:space="preserve">
          <source>All variants of Unix, Mac OS (old and new), and Stream_LF files on VMS use a single character to end each line in the external representation of text (even though that single character is CARRIAGE RETURN on old, pre-Darwin flavors of Mac OS, and is LINE FEED on Unix and most VMS files). In other systems like OS/2, DOS, and the various flavors of MS-Windows, your program sees a &lt;code&gt;\n&lt;/code&gt; as a simple &lt;code&gt;\cJ&lt;/code&gt;, but what's stored in text files are the two characters &lt;code&gt;\cM\cJ&lt;/code&gt;. That means that if you don't use &lt;a href=&quot;#binmode-FILEHANDLE%2C-LAYER&quot;&gt;&lt;code&gt;binmode&lt;/code&gt;&lt;/a&gt; on these systems, &lt;code&gt;\cM\cJ&lt;/code&gt; sequences on disk will be converted to &lt;code&gt;\n&lt;/code&gt; on input, and any &lt;code&gt;\n&lt;/code&gt; in your program will be converted back to &lt;code&gt;\cM\cJ&lt;/code&gt; on output. This is what you want for text files, but it can be disastrous for binary files.</source>
          <target state="translated">VMS上のUnix、Mac OS（新旧）、およびStream_LFファイルのすべてのバリアントは、テキストの外部表現の各行を終了するために1文字を使用します（その1文字はMacの古いダーウィン以前のフレーバーではキャリッジリターンですがOSであり、UnixおよびほとんどのVMSファイルではLINE FEEDです）。 OS / 2、DOS、およびMS-Windowsのさまざまなフレーバーなどの他のシステムでは、プログラムは &lt;code&gt;\n&lt;/code&gt; を単純な &lt;code&gt;\cJ&lt;/code&gt; ますが、テキストファイルに格納されるのは2文字の &lt;code&gt;\cM\cJ&lt;/code&gt; です。つまり、これらのシステムで&lt;a href=&quot;#binmode-FILEHANDLE%2C-LAYER&quot;&gt; &lt;code&gt;binmode&lt;/code&gt; &lt;/a&gt;を使用しない場合、ディスク上の &lt;code&gt;\cM\cJ&lt;/code&gt; シーケンスは入力時に &lt;code&gt;\n&lt;/code&gt; に変換され、プログラム内の &lt;code&gt;\n&lt;/code&gt; はすべて &lt;code&gt;\cM\cJ&lt;/code&gt; 変換されます。出力時。これはテキストファイルに必要なものですが、バイナリファイルには悲惨な結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="ad579c08df3b605d9bcdf2dd854aada4ff50f1d7" translate="yes" xml:space="preserve">
          <source>All warnings are enabled in a block by either of these:</source>
          <target state="translated">これらのいずれかでブロック内のすべての警告が有効になります。</target>
        </trans-unit>
        <trans-unit id="ac638dedbe9b121696313ec4c1b744224313d7b2" translate="yes" xml:space="preserve">
          <source>All warnings from these class elements are fatal, as well as some practices that don't currently warn. For example you cannot say</source>
          <target state="translated">これらのクラス要素からの警告はすべて致命的なものであり、現在は警告しないいくつかのプラクティスも同様です。例えば、以下のようなことはできません。</target>
        </trans-unit>
        <trans-unit id="370cb67fce7c69dd6b28a7668dbdd050522c81c2" translate="yes" xml:space="preserve">
          <source>All we send is -nologo to nmake to prevent it from printing its damned banner.</source>
          <target state="translated">nologoをnmakeに送るだけで、バナーが印刷されないようにしてくれます。</target>
        </trans-unit>
        <trans-unit id="89ae61e8070c7c0925079d83f7934e0eb3357598" translate="yes" xml:space="preserve">
          <source>All writes should be appends.</source>
          <target state="translated">書き込みはすべて追記してください。</target>
        </trans-unit>
        <trans-unit id="d673c2e10445ecd4d4244da3c2339308139938ca" translate="yes" xml:space="preserve">
          <source>All you need to be able to use this is a C compiler than generates BSD/GCC-style stabs. The &lt;b&gt;-g&lt;/b&gt; option on native BSD compilers and GCC should get this for you.</source>
          <target state="translated">これを使用するために必要なのは、BSD / GCCスタイルのスタブを生成するCコンパイラだけです。ネイティブBSDコンパイラとGCC の&lt;b&gt;-g&lt;/b&gt;オプションは、これを取得するはずです。</target>
        </trans-unit>
        <trans-unit id="3703c85b2e19a742cbffc3e68e850016eb81f530" translate="yes" xml:space="preserve">
          <source>All you need to do is post a short summary of the module, its purpose and interfaces. A few lines on each of the main methods is probably enough. (If you post the whole module it might be ignored by busy people - generally the very people you want to read it!)</source>
          <target state="translated">あなたがすべきことは、モジュール、その目的、インターフェイスの簡単な要約を投稿することです。それぞれの主要なメソッドについて数行で十分でしょう。(モジュール全体を投稿すると、忙しい人たちに無視されてしまうかもしれません-一般的には、あなたが読みたいと思っている人たちそのものです!)</target>
        </trans-unit>
        <trans-unit id="42dd47aab008353520f505d14f8982da5b7ec66c" translate="yes" xml:space="preserve">
          <source>All you need to do is turn on caching outside of the lexicon hash itself like so:</source>
          <target state="translated">必要なのは、このようにレキシコンハッシュ自体の外でキャッシングをオンにすることだけです。</target>
        </trans-unit>
        <trans-unit id="97cf0e2918a9254a0eafa0498166116f753c3eef" translate="yes" xml:space="preserve">
          <source>All-in-one interface</source>
          <target state="translated">オールインワンインターフェース</target>
        </trans-unit>
        <trans-unit id="7f586dbbf90de4b682fc6ca0175b6fbbe492b948" translate="yes" xml:space="preserve">
          <source>Allison Randal &lt;code&gt;allison@perl.org&lt;/code&gt;</source>
          <target state="translated">アリソン・ランダル &lt;code&gt;allison@perl.org&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fee78bc0546aa696412ff85a7bc963fbc9ca7d4" translate="yes" xml:space="preserve">
          <source>Allocate (if not already done so) the read buffer for this layer and return pointer to it. Return NULL on failure.</source>
          <target state="translated">このレイヤーの読み込みバッファを確保し(まだ確保していない場合)、そのポインタを返します。失敗した場合は NULL を返します。</target>
        </trans-unit>
        <trans-unit id="3b2ee334827d425691fcbfb9ca0bc34e49168fb9" translate="yes" xml:space="preserve">
          <source>Allocates a new Perl interpreter. See &lt;a href=&quot;perlembed&quot;&gt;perlembed&lt;/a&gt;.</source>
          <target state="translated">新しいPerlインタープリターを割り当てます。&lt;a href=&quot;perlembed&quot;&gt;perlembedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="df4156e41da421b335c923f2c42bc1eecd5696b9" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad (via &lt;a href=&quot;#pad_alloc&quot;&gt;&quot;pad_alloc&quot;&lt;/a&gt;) for an anonymous function that is lexically scoped inside the currently-compiling function. The function &lt;code&gt;func&lt;/code&gt; is linked into the pad, and its &lt;code&gt;CvOUTSIDE&lt;/code&gt; link to the outer scope is weakened to avoid a reference loop.</source>
          <target state="translated">現在コンパイル中の関数内で&lt;a href=&quot;#pad_alloc&quot;&gt;レキシカル&lt;/a&gt;スコープが設定されている無名関数に、現在コンパイル中のパッド内の場所を（&quot;pad_alloc&quot;を介して）割り当てます。関数 &lt;code&gt;func&lt;/code&gt; はパッドにリンクされており、参照ループを回避するために、外部スコープへの &lt;code&gt;CvOUTSIDE&lt;/code&gt; リンクが弱められています。</target>
        </trans-unit>
        <trans-unit id="204757b0500eb920f73e23856bcfacd06d0f5f77" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad (via &lt;a href=&quot;#pad_alloc&quot;&gt;pad_alloc&lt;/a&gt;) for an anonymous function that is lexically scoped inside the currently-compiling function. The function</source>
          <target state="translated">現在コンパイル中の関数内で&lt;a href=&quot;#pad_alloc&quot;&gt;レキシカル&lt;/a&gt;にスコープ指定された無名関数のために、（pad_allocを介して）現在コンパイル中のパッド内の場所を割り当てます。関数</target>
        </trans-unit>
        <trans-unit id="a1b524487958fec05073f1d9fd025a1a4c0c42d8" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad (via &lt;a href=&quot;perlapi#pad_alloc&quot;&gt;&quot;pad_alloc&quot; in perlapi&lt;/a&gt;) and then stores a name for that entry. &lt;code&gt;name&lt;/code&gt; is adopted and becomes the name entry; it must already contain the name string. &lt;code&gt;typestash&lt;/code&gt; and &lt;code&gt;ourstash&lt;/code&gt; and the &lt;code&gt;padadd_STATE&lt;/code&gt; flag get added to &lt;code&gt;name&lt;/code&gt;. None of the other processing of &lt;a href=&quot;perlapi#pad_add_name_pvn&quot;&gt;&quot;pad_add_name_pvn&quot; in perlapi&lt;/a&gt; is done. Returns the offset of the allocated pad slot.</source>
          <target state="translated">現在コンパイル中のパッドに（&lt;a href=&quot;perlapi#pad_alloc&quot;&gt;perlapiの &quot;pad_alloc&quot;を&lt;/a&gt;介して）場所を割り当て、そのエントリの名前を格納します。 &lt;code&gt;name&lt;/code&gt; が採用され、名前エントリになります。すでに名前文字列が含まれている必要があります。 &lt;code&gt;typestash&lt;/code&gt; と &lt;code&gt;ourstash&lt;/code&gt; 、および &lt;code&gt;padadd_STATE&lt;/code&gt; フラグが &lt;code&gt;name&lt;/code&gt; に追加されます。&lt;a href=&quot;perlapi#pad_add_name_pvn&quot;&gt;perlapi&lt;/a&gt;での「pad_add_name_pvn」の他の処理は実行されません。割り当てられたパッドスロットのオフセットを返します。</target>
        </trans-unit>
        <trans-unit id="cbc8fd0f139e1ed3d083e8bda55cb3c680701f85" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad (via &lt;a href=&quot;perlapi#pad_alloc&quot;&gt;pad_alloc in perlapi&lt;/a&gt;) and then stores a name for that entry.</source>
          <target state="translated">現在コンパイル中のパッドに場所を割り当て（&lt;a href=&quot;perlapi#pad_alloc&quot;&gt;perlapiのpad_allocを使用&lt;/a&gt;）、そのエントリの名前を格納します。</target>
        </trans-unit>
        <trans-unit id="5c5b44a37c6737cadc335e0a4b7b826b48bad95f" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad for a named lexical variable. Stores the name and other metadata in the name part of the pad, and makes preparations to manage the variable's lexical scoping. Returns the offset of the allocated pad slot.</source>
          <target state="translated">現在コンパイル中のパッド内に、名前付きの字句変数のための場所を割り当てます。名前とその他のメタデータをパッドの名前部分に格納し、その変数の字句型スコーピングを管理するための準備を行います。割り当てられたパッドスロットのオフセットを返します。</target>
        </trans-unit>
        <trans-unit id="b7b59f013b83c5b7e66a9f56292d13c76f0cfbe1" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad, returning the offset of the allocated pad slot. No name is initially attached to the pad slot.</source>
          <target state="translated">現在コンパイル中のパッドに場所を割り当て、割り当てられたパッドスロットのオフセットを返します。パッドスロットには初期状態では名前は付けられていません。</target>
        </trans-unit>
        <trans-unit id="84242aa2ca41f95ab1ff81fab259e5cc74e97a0b" translate="yes" xml:space="preserve">
          <source>Allocates a place in the currently-compiling pad, returning the offset of the allocated pad slot. No name is initially attached to the pad slot. &lt;code&gt;tmptype&lt;/code&gt; is a set of flags indicating the kind of pad entry required, which will be set in the value SV for the allocated pad entry:</source>
          <target state="translated">現在コンパイル中のパッドに場所を割り当て、割り当てられたパッドスロットのオフセットを返します。最初はパッドスロットに名前が付けられていません。 &lt;code&gt;tmptype&lt;/code&gt; は、必要なパッドエントリの種類を示すフラグのセットであり、割り当てられたパッドエントリの値SVに設定されます。</target>
        </trans-unit>
        <trans-unit id="1b5c021aee14bea734803bc4262d3ac794a7f664" translate="yes" xml:space="preserve">
          <source>Allocation</source>
          <target state="translated">Allocation</target>
        </trans-unit>
        <trans-unit id="88c27f89af81badc5ef765d8b9d7ceca7c8b95fa" translate="yes" xml:space="preserve">
          <source>Allocation too large: %x</source>
          <target state="translated">割り当てが大きすぎます。</target>
        </trans-unit>
        <trans-unit id="2e2f6a9fe9c75300156ed8faa2846a84de58e28c" translate="yes" xml:space="preserve">
          <source>Allow &lt;code&gt;+&lt;/code&gt; to start options. Default is enabled unless environment variable POSIXLY_CORRECT has been set, in which case &lt;code&gt;getopt_compat&lt;/code&gt; is disabled.</source>
          <target state="translated">許可 &lt;code&gt;+&lt;/code&gt; オプションを開始します。環境変数POSIXLY_CORRECTが設定されていない限り、デフォルトは有効です。その場合、 &lt;code&gt;getopt_compat&lt;/code&gt; は無効になります。</target>
        </trans-unit>
        <trans-unit id="0469f1df12a2c7b2c199e00126b0c41472541bb8" translate="yes" xml:space="preserve">
          <source>Allow archives to be passed in as string</source>
          <target state="translated">アーカイブを文字列として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a59030efa024b93a6e819c9cb26054addbab292b" translate="yes" xml:space="preserve">
          <source>Allow option names to be abbreviated to uniqueness. Default is enabled unless environment variable POSIXLY_CORRECT has been set, in which case &lt;code&gt;auto_abbrev&lt;/code&gt; is disabled.</source>
          <target state="translated">オプション名を一意性に短縮できるようにします。環境変数POSIXLY_CORRECTが設定されていない限り、デフォルトは有効です。その場合、 &lt;code&gt;auto_abbrev&lt;/code&gt; は無効になります。</target>
        </trans-unit>
        <trans-unit id="d0f866ca3f963d4349430b9a74345aafdac1f116" translate="yes" xml:space="preserve">
          <source>Allow third party tools to safely attach meta-data</source>
          <target state="translated">サードパーティのツールがメタデータを安全に添付できるようにする</target>
        </trans-unit>
        <trans-unit id="daa78d2843413d350c8af8e2659c80ab1cc32bed" translate="yes" xml:space="preserve">
          <source>Allowing &quot;.&quot; as a version delimiter is simply incompatible with determining whether a pathname is in VMS format or in Unix format with extended file syntax. There is no way to know whether &quot;perl-5.8.6&quot; is a Unix &quot;perl-5.8.6&quot; or a VMS &quot;perl-5.8;6&quot; when passing it to unixify() or vmsify().</source>
          <target state="translated">バージョンの区切り文字として &quot;.&quot; を許可することは、パス名が VMS 形式なのか Unix 形式なのかを判断することとは単に互換性がありません。unixify()や vmsify()に渡しても &quot;woman.8.6.6&quot; が Unix の &quot;woman.8.6.6&quot; なのか VMS の &quot;woman.8.6;6&quot; なのかを知る方法はありません。</target>
        </trans-unit>
        <trans-unit id="c408189be3311ef544fc6916d88f93932d6bdffc" translate="yes" xml:space="preserve">
          <source>Allowing this could have security implications, as a malicious tar archive could alter or replace any file the extracting user has permissions to. Therefor, the default is to not allow insecure extractions.</source>
          <target state="translated">これを許可すると、悪意のある tar アーカイブが、抽出したユーザが権限を持っているファイルを変更したり置き換えたりする可能性があるため、セキュリティ上の意味合いがあるかもしれません。そのため、デフォルトでは安全でない抽出を許可しないようになっています。</target>
        </trans-unit>
        <trans-unit id="ddbc44ff2a879d62f5a15a25c82d1c43a6e19ca9" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of &lt;a href=&quot;../perlpod#Formatting-Codes&quot;&gt;Formatting Codes in perlpod&lt;/a&gt;. This can be used to implement user-defined codes.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; &lt;a href=&quot;../perlpod#Formatting-Codes&quot;&gt;がperlpod&lt;/a&gt;のフォーマットコードのリストを受け入れることを許可します。これは、ユーザー定義コードを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="74d0313a91b25e6669e15800af03ecffb23d0e60" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;&quot;Formatting Codes&quot; in perlpod&lt;/a&gt;. This can be used to implement user-defined codes.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;がperlpodの「フォーマットコード」の&lt;/a&gt;リストを受け入れることを許可します。これは、ユーザー定義のコードを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="101aab8a8afb357465320bb5f121a4ac661795be" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of directives for &lt;a href=&quot;../perlpod#Verbatim-Paragraph&quot;&gt;Verbatim Paragraph in perlpod&lt;/a&gt;. A directive is the label of a &lt;a href=&quot;../perlpod#Command-Paragraph&quot;&gt;Command Paragraph in perlpod&lt;/a&gt;. This can be used to implement user-defined directives.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; &lt;a href=&quot;../perlpod#Verbatim-Paragraph&quot;&gt;がperlpodのVerbatim Paragraph&lt;/a&gt;のディレクティブのリストを受け入れることを許可します。ディレクティブは、&lt;a href=&quot;../perlpod#Command-Paragraph&quot;&gt;perlpodのコマンド段落の&lt;/a&gt;ラベルです。これは、ユーザー定義のディレクティブを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="c183b94856ce8e866ce5e58e72276cd992ab0cc9" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of directives for &lt;a href=&quot;perlpod#Verbatim-Paragraph&quot;&gt;&quot;Verbatim Paragraph&quot; in perlpod&lt;/a&gt;. A directive is the label of a &lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;&quot;Command Paragraph&quot; in perlpod&lt;/a&gt;. This can be used to implement user-defined directives.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; &lt;a href=&quot;perlpod#Verbatim-Paragraph&quot;&gt;がperlpodの「VerbatimParagraph」&lt;/a&gt;のディレクティブのリストを受け入れることを許可します。ディレクティブは、&lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;perlpodの「コマンド段落」の&lt;/a&gt;ラベルです。これは、ユーザー定義のディレクティブを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="f2a410a266e9f220f21c4f8d80b7768daa7e08ef" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of directives for data paragraphs. A directive is the label of a &lt;a href=&quot;../perlpod#Command-Paragraph&quot;&gt;Command Paragraph in perlpod&lt;/a&gt;. A data paragraph is one delimited by &lt;code&gt;=begin/=for/=end&lt;/code&gt; directives. This can be used to implement user-defined directives.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; がデータ段落のディレクティブのリストを受け入れることを許可します。ディレクティブは、&lt;a href=&quot;../perlpod#Command-Paragraph&quot;&gt;perlpodのコマンド段落の&lt;/a&gt;ラベルです。データ段落は、 &lt;code&gt;=begin/=for/=end&lt;/code&gt; ディレクティブで区切られた段落です。これは、ユーザー定義のディレクティブを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="689b3259aa6ee42171e8ca85552dc69d81a2e636" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of directives for data paragraphs. A directive is the label of a &lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;&quot;Command Paragraph&quot; in perlpod&lt;/a&gt;. A data paragraph is one delimited by &lt;code&gt;=begin/=for/=end&lt;/code&gt; directives. This can be used to implement user-defined directives.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; がデータ段落のディレクティブのリストを受け入れることを許可します。ディレクティブは、&lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;perlpodの「コマンド段落」の&lt;/a&gt;ラベルです。データ段落は、 &lt;code&gt;=begin/=for/=end&lt;/code&gt; ディレクティブで区切られた段落です。これは、ユーザー定義のディレクティブを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="0abf6fb24aebd1865d65a4df47fe30a801298ce2" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of directives for processed paragraphs. A directive is the label of a &lt;a href=&quot;../perlpod#Command-Paragraph&quot;&gt;Command Paragraph in perlpod&lt;/a&gt;. A processed paragraph is also known as &lt;a href=&quot;../perlpod#Ordinary-Paragraph&quot;&gt;Ordinary Paragraph in perlpod&lt;/a&gt;. This can be used to implement user-defined directives.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; が処理済み段落のディレクティブのリストを受け入れることを許可します。ディレクティブは、&lt;a href=&quot;../perlpod#Command-Paragraph&quot;&gt;perlpodのコマンド段落の&lt;/a&gt;ラベルです。処理された段落は&lt;a href=&quot;../perlpod#Ordinary-Paragraph&quot;&gt;、Perlpod&lt;/a&gt;では通常段落とも呼ばれます。これは、ユーザー定義のディレクティブを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="8f5ef2e6771c903e2304c0c6130bf86ed3190914" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;$parser&lt;/code&gt; to accept a list of directives for processed paragraphs. A directive is the label of a &lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;&quot;Command Paragraph&quot; in perlpod&lt;/a&gt;. A processed paragraph is also known as &lt;a href=&quot;perlpod#Ordinary-Paragraph&quot;&gt;&quot;Ordinary Paragraph&quot; in perlpod&lt;/a&gt;. This can be used to implement user-defined directives.</source>
          <target state="translated">&lt;code&gt;$parser&lt;/code&gt; が処理された段落のディレクティブのリストを受け入れることを許可します。ディレクティブは、&lt;a href=&quot;perlpod#Command-Paragraph&quot;&gt;perlpodの「コマンド段落」の&lt;/a&gt;ラベルです。処理された段落は&lt;a href=&quot;perlpod#Ordinary-Paragraph&quot;&gt;、perlpodでは「通常の段落」&lt;/a&gt;とも呼ばれます。これは、ユーザー定義のディレクティブを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="a3735b17f2c2eb4921645bcf6a4d22392282447c" translate="yes" xml:space="preserve">
          <source>Allows a pre-existing extension directory to be overwritten.</source>
          <target state="translated">既存の拡張子ディレクトリを上書きできるようにします。</target>
        </trans-unit>
        <trans-unit id="4b9153c7965fe5ac4319d07a3a1e17ae8bc10ce3" translate="yes" xml:space="preserve">
          <source>Allows an extension to be created for a header even if that header is not found in standard include directories.</source>
          <target state="translated">そのヘッダが標準のインクルードディレクトリにない場合でも、そのヘッダのための拡張機能を作成できるようにします。</target>
        </trans-unit>
        <trans-unit id="bcec857e4ee66e587abdab964de9867354784a70" translate="yes" xml:space="preserve">
          <source>Allows files [but not directories] to be moved between file systems by copying the &lt;code&gt;$sOldName&lt;/code&gt; file data and some attributes to &lt;code&gt;$sNewName&lt;/code&gt; and then deleting &lt;code&gt;$sOldName&lt;/code&gt;. If this bit is not set [or if &lt;code&gt;$sOldName&lt;/code&gt; denotes a directory] and &lt;code&gt;$sNewName&lt;/code&gt; refers to a different file system than &lt;code&gt;$sOldName&lt;/code&gt;, then &lt;code&gt;MoveFileEx&lt;/code&gt; will fail.</source>
          <target state="translated">ファイル[ではなく、ディレクトリ]をコピーして、ファイルシステム間で移動することができます &lt;code&gt;$sOldName&lt;/code&gt; にファイルデータといくつかの属性を &lt;code&gt;$sNewName&lt;/code&gt; してから削除 &lt;code&gt;$sOldName&lt;/code&gt; 。このビットが設定されていない場合は、[場合は &lt;code&gt;$sOldName&lt;/code&gt; ディレクトリを表し]と &lt;code&gt;$sNewName&lt;/code&gt; より異なるファイルシステムを指し &lt;code&gt;$sOldName&lt;/code&gt; 、その後、 &lt;code&gt;MoveFileEx&lt;/code&gt; は失敗します。</target>
        </trans-unit>
        <trans-unit id="daf02b11ffbf9506236d387546a93a50fc62cc0a" translate="yes" xml:space="preserve">
          <source>Allows files and directories to be moved to the Trashcan/Recycle Bin (where they may later be restored if necessary) if the operating system supports such functionality. This feature may one day be made available directly in &lt;code&gt;File::Path&lt;/code&gt; .</source>
          <target state="translated">オペレーティングシステムがそのような機能をサポートしている場合、ファイルとディレクトリをゴミ箱/ごみ箱（後で必要に応じて復元できる場所）に移動できます。この機能はいつか &lt;code&gt;File::Path&lt;/code&gt; 直接利用できるようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="4cb22b8db2618111bfbd2c865fb5ccd86bacea3b" translate="yes" xml:space="preserve">
          <source>Allows files and directories to be moved to the Trashcan/Recycle Bin (where they may later be restored if necessary) if the operating system supports such functionality. This feature may one day be made available directly in &lt;code&gt;File::Path&lt;/code&gt;.</source>
          <target state="translated">オペレーティングシステムがそのような機能をサポートしている場合、ファイルとディレクトリをごみ箱/ごみ箱に移動できるようにします（必要に応じて後で復元できます）。この機能は、いつか &lt;code&gt;File::Path&lt;/code&gt; 直接利用できるようになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="36d9306aba93d39c5e49dee7ed3073ab03b67160" translate="yes" xml:space="preserve">
          <source>Allows mainstream access.</source>
          <target state="translated">主流のアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="559ebf2a9218f8c70716cdc11eee2f4b586a5213" translate="yes" xml:space="preserve">
          <source>Allows multiple concatenated compressed streams to be treated as a single compressed stream. Decompression will stop once either the end of the file/buffer is reached, an error is encountered (premature eof, corrupt compressed data) or the end of a stream is not immediately followed by the start of another stream.</source>
          <target state="translated">複数の連結された圧縮ストリームを 1 つの圧縮ストリームとして扱うことができます。ファイル/バッファの終端に達した場合、エラーが発生した場合 (早期の eof、圧縮データの破損)、またはストリームの終端がすぐに別のストリームの開始に続いていない場合、伸長は停止します。</target>
        </trans-unit>
        <trans-unit id="7e5261df1ca0e4f1432538fbf7dfbe931383691e" translate="yes" xml:space="preserve">
          <source>Allows newName to be used as an alias for ENCODING. ENCODING may be either the name of an encoding or an encoding object (as described in &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;).</source>
          <target state="translated">ENCODINGのエイリアスとしてnewNameを使用できるようにします。ENCODINGは、エンコードの名前またはエンコードオブジェクトのいずれかです（&lt;a href=&quot;../encode&quot;&gt;Encodeで&lt;/a&gt;説明）。</target>
        </trans-unit>
        <trans-unit id="4bde81d715f5b99bcfab0870892bd353123e4037" translate="yes" xml:space="preserve">
          <source>Allows newName to be used as an alias for ENCODING. ENCODING may be either the name of an encoding or an encoding object (as described in &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;).</source>
          <target state="translated">newNameをENCODINGのエイリアスとして使用できるようにします。ENCODINGは、エンコーディングの名前またはエンコーディングオブジェクトのいずれかです（&lt;a href=&quot;encode&quot;&gt;Encodeで&lt;/a&gt;説明されています）。</target>
        </trans-unit>
        <trans-unit id="25ad1ed959ffd436db5eb39db9c139500cedca08" translate="yes" xml:space="preserve">
          <source>Allows one or more writers.</source>
          <target state="translated">1人以上のライターを許可します。</target>
        </trans-unit>
        <trans-unit id="fb055bc3bc4cb26c4e9f20094313100a4445739c" translate="yes" xml:space="preserve">
          <source>Allows put/write services using sequential record access mode to occur at any point in the file, truncating the file at that point.</source>
          <target state="translated">シーケンシャルレコードアクセスモードを使用した put/write サービスがファイル内の任意のポイントで発生し、そのポイントでファイルを切り捨てることを可能にします。</target>
        </trans-unit>
        <trans-unit id="76b238c6a405ca46725f72efca71d3c55969afb7" translate="yes" xml:space="preserve">
          <source>Allows source endpoint verification to be enabled or disabled. This is useful for those remote destinations with multiples interfaces where the response may not originate from the same endpoint that the original destination endpoint was sent to. This only affects udp and icmp protocol pings.</source>
          <target state="translated">ソースエンドポイントの検証を有効または無効にすることができます。これは、複数のインターフェイスを持つリモートデスティネーションで、レスポンスが元のデスティネーションのエンドポイントが送信されたのと同じエンドポイントから発信されていない場合に便利です。これは udp および icmp プロトコルの ping にのみ影響します。</target>
        </trans-unit>
        <trans-unit id="99ef43d5cf353c0a40b7ebb05028a37d2a089bf4" translate="yes" xml:space="preserve">
          <source>Allows the device's media to be locked or unlocked. &lt;code&gt;$opOutBuf&lt;/code&gt; should be &lt;code&gt;[]&lt;/code&gt;. &lt;code&gt;$pInBuf&lt;/code&gt; should be a &lt;code&gt;PREVENT_MEDIA_REMOVAL&lt;/code&gt; data structure, which is simply an integer containing a boolean value:</source>
          <target state="translated">デバイスのメディアをロックまたはロック解除できるようにします。 &lt;code&gt;$opOutBuf&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; である必要があります。 &lt;code&gt;$pInBuf&lt;/code&gt; は、 &lt;code&gt;PREVENT_MEDIA_REMOVAL&lt;/code&gt; データ構造である必要があります。これは、ブール値を含む単純な整数です。</target>
        </trans-unit>
        <trans-unit id="216f93af2f31cbc4d87ad71fb2a6974460271a8c" translate="yes" xml:space="preserve">
          <source>Allows users to delete.</source>
          <target state="translated">ユーザーの削除を許可します。</target>
        </trans-unit>
        <trans-unit id="a891c57f96709d16d1ec61f6f410ed213b624dc8" translate="yes" xml:space="preserve">
          <source>Allows users to read.</source>
          <target state="translated">ユーザーが読めるようにします。</target>
        </trans-unit>
        <trans-unit id="b0edc3cbaffc6df1795dfc34edcb443538e117ac" translate="yes" xml:space="preserve">
          <source>Allows users to update.</source>
          <target state="translated">ユーザーが更新できるようにします。</target>
        </trans-unit>
        <trans-unit id="885369750bdc4ecd0e0864b13fd3e9c0c578c8db" translate="yes" xml:space="preserve">
          <source>Allows users to write.</source>
          <target state="translated">ユーザーに書き込みを許可します。</target>
        </trans-unit>
        <trans-unit id="b46332805263e8790df0747eb20b444ed87a43b7" translate="yes" xml:space="preserve">
          <source>Allows you to both load one or more modules, while setting up inheritance from those modules at the same time. Mostly similar in effect to</source>
          <target state="translated">1つ以上のモジュールをロードしながら、それらのモジュールからの継承を同時に設定することができます。とほとんど似たような効果があります。</target>
        </trans-unit>
        <trans-unit id="c9da0fc905ccf60ade5ca9f7c49a801a55f4a1c8" translate="yes" xml:space="preserve">
          <source>Allows you to both load one or more modules, while setting up inheritance from those modules at the same time. Roughly similar in effect to</source>
          <target state="translated">1つ以上のモジュールをロードしながら、それらのモジュールからの継承を同時に設定することができます。とほぼ同様の効果があります。</target>
        </trans-unit>
        <trans-unit id="22f08aec036591ac3a4e81d90d5af18a1bd7db2a" translate="yes" xml:space="preserve">
          <source>Allows you to choose the character encoding will be store in the DBM file.</source>
          <target state="translated">DBMファイルに格納する文字エンコーディングを選択します。</target>
        </trans-unit>
        <trans-unit id="dab85f86a937e724bd3f8c905ebc9700e2dbc47d" translate="yes" xml:space="preserve">
          <source>Allows you to write your script in non-ASCII and non-UTF-8</source>
          <target state="translated">非ASCIIおよび非UTF-8でスクリプトを書くことができます。</target>
        </trans-unit>
        <trans-unit id="dce4c63a4fe0fe7df493313e47b4aaa4d8491416" translate="yes" xml:space="preserve">
          <source>Almost all properties are immune to case-insensitive matching. That is, adding a &lt;code&gt;/i&lt;/code&gt; regular expression modifier does not change what they match. There are two sets that are affected. The first set is &lt;code&gt;Uppercase_Letter&lt;/code&gt; , &lt;code&gt;Lowercase_Letter&lt;/code&gt; , and &lt;code&gt;Titlecase_Letter&lt;/code&gt; , all of which match &lt;code&gt;Cased_Letter&lt;/code&gt; under &lt;code&gt;/i&lt;/code&gt; matching. And the second set is &lt;code&gt;Uppercase&lt;/code&gt; , &lt;code&gt;Lowercase&lt;/code&gt; , and &lt;code&gt;Titlecase&lt;/code&gt; , all of which match &lt;code&gt;Cased&lt;/code&gt; under &lt;code&gt;/i&lt;/code&gt; matching. This set also includes its subsets &lt;code&gt;PosixUpper&lt;/code&gt; and &lt;code&gt;PosixLower&lt;/code&gt; both of which under &lt;code&gt;/i&lt;/code&gt; match &lt;code&gt;PosixAlpha&lt;/code&gt; . (The difference between these sets is that some things, such as Roman numerals, come in both upper and lower case so they are &lt;code&gt;Cased&lt;/code&gt; , but aren't considered letters, so they aren't &lt;code&gt;Cased_Letter&lt;/code&gt; 's.)</source>
          <target state="translated">ほとんどすべてのプロパティは、大文字と小文字を区別しないマッチングの影響を受けません。つまり、 &lt;code&gt;/i&lt;/code&gt; 正規表現修飾子を追加しても、一致するものは変更されません。影響を受けるセットは2つあります。最初のセットである &lt;code&gt;Uppercase_Letter&lt;/code&gt; 、 &lt;code&gt;Lowercase_Letter&lt;/code&gt; 、及び &lt;code&gt;Titlecase_Letter&lt;/code&gt; 一致すべては、 &lt;code&gt;Cased_Letter&lt;/code&gt; を下 &lt;code&gt;/i&lt;/code&gt; マッチング。そして第二のセットは &lt;code&gt;Uppercase&lt;/code&gt; 、 &lt;code&gt;Lowercase&lt;/code&gt; 、および &lt;code&gt;Titlecase&lt;/code&gt; 一致すべては、 &lt;code&gt;Cased&lt;/code&gt; の下 &lt;code&gt;/i&lt;/code&gt; マッチング。このセットには、 &lt;code&gt;PosixUpper&lt;/code&gt; および &lt;code&gt;PosixLower&lt;/code&gt; のサブセットも含まれます。 &lt;code&gt;/i&lt;/code&gt; &lt;code&gt;PosixAlpha&lt;/code&gt; と一致します。 （これらのセットの違いは、ローマ数字など、大文字と小文字の両方が含まれるため &lt;code&gt;Cased&lt;/code&gt; であるが、文字とは見なされないため &lt;code&gt;Cased_Letter&lt;/code&gt; ではないことです。）</target>
        </trans-unit>
        <trans-unit id="038ae65882d3a2fe4f693af91d367090a422911d" translate="yes" xml:space="preserve">
          <source>Almost all properties are immune to case-insensitive matching. That is, adding a &lt;code&gt;/i&lt;/code&gt; regular expression modifier does not change what they match. There are two sets that are affected. The first set is &lt;code&gt;Uppercase_Letter&lt;/code&gt;, &lt;code&gt;Lowercase_Letter&lt;/code&gt;, and &lt;code&gt;Titlecase_Letter&lt;/code&gt;, all of which match &lt;code&gt;Cased_Letter&lt;/code&gt; under &lt;code&gt;/i&lt;/code&gt; matching. And the second set is &lt;code&gt;Uppercase&lt;/code&gt;, &lt;code&gt;Lowercase&lt;/code&gt;, and &lt;code&gt;Titlecase&lt;/code&gt;, all of which match &lt;code&gt;Cased&lt;/code&gt; under &lt;code&gt;/i&lt;/code&gt; matching. This set also includes its subsets &lt;code&gt;PosixUpper&lt;/code&gt; and &lt;code&gt;PosixLower&lt;/code&gt; both of which under &lt;code&gt;/i&lt;/code&gt; match &lt;code&gt;PosixAlpha&lt;/code&gt;. (The difference between these sets is that some things, such as Roman numerals, come in both upper and lower case so they are &lt;code&gt;Cased&lt;/code&gt;, but aren't considered letters, so they aren't &lt;code&gt;Cased_Letter&lt;/code&gt;'s.)</source>
          <target state="translated">ほとんどすべてのプロパティは、大文字と小文字を区別しないマッチングの影響を受けません。つまり、 &lt;code&gt;/i&lt;/code&gt; 正規表現修飾子を追加しても、一致するものは変更されません。影響を受けるセットは2つあります。最初のセットである &lt;code&gt;Uppercase_Letter&lt;/code&gt; 、 &lt;code&gt;Lowercase_Letter&lt;/code&gt; 、及び &lt;code&gt;Titlecase_Letter&lt;/code&gt; 一致すべては、 &lt;code&gt;Cased_Letter&lt;/code&gt; を下 &lt;code&gt;/i&lt;/code&gt; マッチング。そして第二のセットは &lt;code&gt;Uppercase&lt;/code&gt; 、 &lt;code&gt;Lowercase&lt;/code&gt; 、および &lt;code&gt;Titlecase&lt;/code&gt; 一致すべては、 &lt;code&gt;Cased&lt;/code&gt; の下 &lt;code&gt;/i&lt;/code&gt; マッチング。このセットには、サブセット &lt;code&gt;PosixUpper&lt;/code&gt; と &lt;code&gt;PosixLower&lt;/code&gt; も含まれています。どちらも &lt;code&gt;/i&lt;/code&gt; の下にあります。 &lt;code&gt;PosixAlpha&lt;/code&gt; に一致します。 （これらのセット間の違いはあるので、そのようなローマ数字のようないくつかのものは、上下両方の場合に来ることがある &lt;code&gt;Cased&lt;/code&gt; 、彼らはないので、文字と見なされない &lt;code&gt;Cased_Letter&lt;/code&gt; さん）。</target>
        </trans-unit>
        <trans-unit id="e26025e2ac0ac02421707ba70eeed5ab6641b4e6" translate="yes" xml:space="preserve">
          <source>Almost definitely only useful to people hacking on the offsets part of the debug engine.</source>
          <target state="translated">ほぼ間違いなく、デバッグエンジンのオフセット部分をハックする人にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="38d90c72fc98727ed772fa67692cb8b8e8e09948" translate="yes" xml:space="preserve">
          <source>Along the same lines, just because you</source>
          <target state="translated">同じ線に沿って、単にあなたが</target>
        </trans-unit>
        <trans-unit id="bfe689be701eb0f2bfb705a857c3ee07252b9d77" translate="yes" xml:space="preserve">
          <source>Along with the Perl interpreter itself, the Perl distribution installs a range of utilities on your system. There are also several utilities which are used by the Perl distribution itself as part of the install process. This document exists to list all of these utilities, explain what they are for and provide pointers to each module's documentation, if appropriate.</source>
          <target state="translated">Perl インタプリタ自体と一緒に、Perl ディストリビューションはシステム上に様々なユーティリ ティをインストールします。また、Perl ディストリビューション自体がインストールプロセスの一部として使用するユーティリ ティもいくつかあります。このドキュメントは、これらのユーティリティをすべてリストアップし、それらが何のために使われているのかを説明し、必要に応じて各モジュールのドキュメントへのポインタを提供するために存在しています。</target>
        </trans-unit>
        <trans-unit id="4a1d8165f9108b98ce92f1ef1ce011a72e3b1d99" translate="yes" xml:space="preserve">
          <source>Alpha (7.2 and later)</source>
          <target state="translated">アルファ (7.2 以降)</target>
        </trans-unit>
        <trans-unit id="11e18d2ae9ad5a7899fdd3214dec5b3e21bea356" translate="yes" xml:space="preserve">
          <source>Alpha Status</source>
          <target state="translated">アルファステータス</target>
        </trans-unit>
        <trans-unit id="18ffbc668a2b6a3556c2c52abe1122c215a8f600" translate="yes" xml:space="preserve">
          <source>Alpha Versions</source>
          <target state="translated">アルファバージョン</target>
        </trans-unit>
        <trans-unit id="e9e4db05fa3da393c5842e003969195c59714caf" translate="yes" xml:space="preserve">
          <source>Alphabetical Listing of Perl Functions</source>
          <target state="translated">Perl関数のアルファベット順リスト</target>
        </trans-unit>
        <trans-unit id="80fccab3dfff9e36d82c59e9e04d5dad46135ca5" translate="yes" xml:space="preserve">
          <source>Alphabetical Listing of Win32 Functions</source>
          <target state="translated">Win32関数のアルファベット順リスト</target>
        </trans-unit>
        <trans-unit id="35100f76a7dd5f19974c02f54724529e98b1eb3a" translate="yes" xml:space="preserve">
          <source>Alphabetical index of Unicode characters</source>
          <target state="translated">Unicode文字のアルファベットインデックス</target>
        </trans-unit>
        <trans-unit id="834177335506d3ec099968dc2393bf176b00318d" translate="yes" xml:space="preserve">
          <source>Also Perl gives access to various C library functions through the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module. Some of those functions are always affected by the current locale. For example, &lt;code&gt;POSIX::strftime()&lt;/code&gt; uses &lt;code&gt;LC_TIME&lt;/code&gt; ; &lt;code&gt;POSIX::strtod()&lt;/code&gt; uses &lt;code&gt;LC_NUMERIC&lt;/code&gt; ; &lt;code&gt;POSIX::strcoll()&lt;/code&gt; and &lt;code&gt;POSIX::strxfrm()&lt;/code&gt; use &lt;code&gt;LC_COLLATE&lt;/code&gt; ; and character classification functions like &lt;code&gt;POSIX::isalnum()&lt;/code&gt; use &lt;code&gt;LC_CTYPE&lt;/code&gt; . All such functions will behave according to the current underlying locale, even if that locale isn't exposed to Perl space.</source>
          <target state="translated">また、Perlは&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールを通じてさまざまなCライブラリ関数へのアクセスを提供します。これらの関数の一部は、常に現在のロケールの影響を受けます。たとえば、 &lt;code&gt;POSIX::strftime()&lt;/code&gt; は &lt;code&gt;LC_TIME&lt;/code&gt; を使用します。 &lt;code&gt;POSIX::strtod()&lt;/code&gt; は &lt;code&gt;LC_NUMERIC&lt;/code&gt; を使用します。 &lt;code&gt;POSIX::strcoll()&lt;/code&gt; および &lt;code&gt;POSIX::strxfrm()&lt;/code&gt; は &lt;code&gt;LC_COLLATE&lt;/code&gt; を使用します。 &lt;code&gt;POSIX::isalnum()&lt;/code&gt; ような文字分類関数は &lt;code&gt;LC_CTYPE&lt;/code&gt; を使用します。そのような関数はすべて、そのロケールがPerlスペースに公開されていなくても、現在の基本的なロケールに従って動作します。</target>
        </trans-unit>
        <trans-unit id="806708a695d3bd3532b34e82cf3ce83d314474cc" translate="yes" xml:space="preserve">
          <source>Also Perl gives access to various C library functions through the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module. Some of those functions are always affected by the current locale. For example, &lt;code&gt;POSIX::strftime()&lt;/code&gt; uses &lt;code&gt;LC_TIME&lt;/code&gt;; &lt;code&gt;POSIX::strtod()&lt;/code&gt; uses &lt;code&gt;LC_NUMERIC&lt;/code&gt;; &lt;code&gt;POSIX::strcoll()&lt;/code&gt; and &lt;code&gt;POSIX::strxfrm()&lt;/code&gt; use &lt;code&gt;LC_COLLATE&lt;/code&gt;. All such functions will behave according to the current underlying locale, even if that locale isn't exposed to Perl space.</source>
          <target state="translated">また、Perlは、&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールを介してさまざまなCライブラリ関数へのアクセスを提供します。これらの関数の一部は、常に現在のロケールの影響を受けます。たとえば、 &lt;code&gt;POSIX::strftime()&lt;/code&gt; は &lt;code&gt;LC_TIME&lt;/code&gt; を使用します。 &lt;code&gt;POSIX::strtod()&lt;/code&gt; は &lt;code&gt;LC_NUMERIC&lt;/code&gt; を使用します; &lt;code&gt;POSIX::strcoll()&lt;/code&gt; および &lt;code&gt;POSIX::strxfrm()&lt;/code&gt; は &lt;code&gt;LC_COLLATE&lt;/code&gt; を使用します。そのような関数はすべて、そのロケールがPerlスペースに公開されていなくても、現在の基になるロケールに従って動作します。</target>
        </trans-unit>
        <trans-unit id="80beb22d4bec02699379f749d87a910462f32ef7" translate="yes" xml:space="preserve">
          <source>Also add the following code segment to Mytest.t while incrementing the &quot;9&quot; tests to &quot;11&quot;:</source>
          <target state="translated">また、&quot;9 &quot;テストを &quot;11 &quot;にインクリメントしながら、以下のコードセグメントをMytest.tに追加します。</target>
        </trans-unit>
        <trans-unit id="66aac698dcfc875f49b6e4c3fd8ffd4424837a0d" translate="yes" xml:space="preserve">
          <source>Also available in the CPAN &lt;a href=&quot;Unicode::CaseFold&quot;&gt;Unicode::CaseFold&lt;/a&gt; module, the new &lt;code&gt;fc&lt;/code&gt; &amp;ldquo;foldcase&amp;rdquo; function from v5.16 grants access to the same Unicode casefolding as the &lt;code&gt;/i&lt;/code&gt; pattern modifier has always used:</source>
          <target state="translated">CPAN &lt;a href=&quot;Unicode::CaseFold&quot;&gt;Unicode :: CaseFold&lt;/a&gt;モジュールでも利用可能で、v5.16の新しい &lt;code&gt;fc&lt;/code&gt; 「foldcase」関数は、 &lt;code&gt;/i&lt;/code&gt; パターン修飾子が常に使用していたものと同じUnicodeケースフォールディングへのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="ac140b9c3d4faf5ff89331ade5065ee26ad2ce5b" translate="yes" xml:space="preserve">
          <source>Also available in the CPAN &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::CaseFold&quot;&gt;Unicode::CaseFold&lt;/a&gt; module, the new &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; &amp;ldquo;foldcase&amp;rdquo; function from v5.16 grants access to the same Unicode casefolding as the &lt;code&gt;/i&lt;/code&gt; pattern modifier has always used:</source>
          <target state="translated">CPAN &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::CaseFold&quot;&gt;Unicode :: CaseFold&lt;/a&gt;モジュールでも利用できる、v5.16の新しい &lt;code&gt;&lt;a href=&quot;functions/fc&quot;&gt;fc&lt;/a&gt;&lt;/code&gt; &amp;ldquo; foldcase&amp;rdquo;関数は、 &lt;code&gt;/i&lt;/code&gt; パターン修飾子が常に使用していたのと同じUnicodeのケースフォールディングへのアクセスを許可します。</target>
        </trans-unit>
        <trans-unit id="46cd58b57422283c68d064857c29c9de3e394325" translate="yes" xml:space="preserve">
          <source>Also change</source>
          <target state="translated">また、変更</target>
        </trans-unit>
        <trans-unit id="c0abeeb67d5f473db892c8e04d0607c1def48eaa" translate="yes" xml:space="preserve">
          <source>Also compare &lt;code&gt;SAVEMORTALIZESV&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SAVEMORTALIZESV&lt;/code&gt; も比較してください。</target>
        </trans-unit>
        <trans-unit id="ec1353ed582dbdd3a8cc64f4bfa77fcc41799879" translate="yes" xml:space="preserve">
          <source>Also compare &lt;code&gt;SAVEMORTALIZESV&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SAVEMORTALIZESV&lt;/code&gt; も比較してください。</target>
        </trans-unit>
        <trans-unit id="05e4ad005c5681ba47d1d566b8e0cb49ffb2ad43" translate="yes" xml:space="preserve">
          <source>Also consider this valid structure:</source>
          <target state="translated">この有効な構造も考慮してください。</target>
        </trans-unit>
        <trans-unit id="a7b339961adc2d21b9a876670a45b1f1d855a3be" translate="yes" xml:space="preserve">
          <source>Also create a file mylib.c that looks like this:</source>
          <target state="translated">また、以下のようなファイルmylib.cを作成します。</target>
        </trans-unit>
        <trans-unit id="c401faba028e376c88469287989685e42d637510" translate="yes" xml:space="preserve">
          <source>Also floating point numbers have endianness. Usually (but not always) this agrees with the integer endianness. Even though most platforms these days use the IEEE 754 binary format, there are differences, especially if the long doubles are involved. You can see the &lt;code&gt;Config&lt;/code&gt; variables &lt;code&gt;doublekind&lt;/code&gt; and &lt;code&gt;longdblkind&lt;/code&gt; (also &lt;code&gt;doublesize&lt;/code&gt; , &lt;code&gt;longdblsize&lt;/code&gt; ): the &quot;kind&quot; values are enums, unlike &lt;code&gt;byteorder&lt;/code&gt; .</source>
          <target state="translated">また、浮動小数点数にはエンディアンがあります。通常（常にではありませんが）、これは整数のエンディアンと一致します。最近のほとんどのプラットフォームはIEEE 754バイナリ形式を使用していますが、特に長いdoubleが含まれる場合は違いがあります。 &lt;code&gt;Config&lt;/code&gt; 変数 &lt;code&gt;doublekind&lt;/code&gt; と &lt;code&gt;longdblkind&lt;/code&gt; （これも &lt;code&gt;doublesize&lt;/code&gt; 、 &lt;code&gt;longdblsize&lt;/code&gt; ）を確認できます。「kind」値は、 &lt;code&gt;byteorder&lt;/code&gt; とは異なり、列挙型です。</target>
        </trans-unit>
        <trans-unit id="379626cc299d524fecb163de196b94d66c798488" translate="yes" xml:space="preserve">
          <source>Also floating point numbers have endianness. Usually (but not always) this agrees with the integer endianness. Even though most platforms these days use the IEEE 754 binary format, there are differences, especially if the long doubles are involved. You can see the &lt;code&gt;Config&lt;/code&gt; variables &lt;code&gt;doublekind&lt;/code&gt; and &lt;code&gt;longdblkind&lt;/code&gt; (also &lt;code&gt;doublesize&lt;/code&gt;, &lt;code&gt;longdblsize&lt;/code&gt;): the &quot;kind&quot; values are enums, unlike &lt;code&gt;byteorder&lt;/code&gt;.</source>
          <target state="translated">また、浮動小数点数にはエンディアンがあります。通常（常にではありませんが）、これは整数のエンディアンと一致します。最近のほとんどのプラットフォームはIEEE754バイナリ形式を使用していますが、特に長いdoubleが含まれている場合は、違いがあります。 &lt;code&gt;Config&lt;/code&gt; 変数 &lt;code&gt;doublekind&lt;/code&gt; および &lt;code&gt;longdblkind&lt;/code&gt; （また、 &lt;code&gt;doublesize&lt;/code&gt; 、 &lt;code&gt;longdblsize&lt;/code&gt; ）を確認できます。「kind」値は、 &lt;code&gt;byteorder&lt;/code&gt; とは異なり列挙型です。</target>
        </trans-unit>
        <trans-unit id="d6a0632d09aa67f7c933563807a5dc4e1be43b5e" translate="yes" xml:space="preserve">
          <source>Also good for one-liners:</source>
          <target state="translated">ワンライナーにも最適です。</target>
        </trans-unit>
        <trans-unit id="801a4731c98561cdcf16aa86d636dfa32a54b0ca" translate="yes" xml:space="preserve">
          <source>Also keep around the old $(SAY) macro in case somebody's using it.</source>
          <target state="translated">また、誰かが使っている場合に備えて、古い $(SAY)マクロも保管しておきましょう。</target>
        </trans-unit>
        <trans-unit id="2c84ea90ff2c682d2dfed6ff8b041df2e7877e52" translate="yes" xml:space="preserve">
          <source>Also like the &quot;strict&quot; pragma, if there is more than one instance of the &lt;code&gt;warnings&lt;/code&gt; pragma in a given scope the cumulative effect is additive.</source>
          <target state="translated">また、「strict」プラグマと同様に、特定のスコープ内に &lt;code&gt;warnings&lt;/code&gt; プラグマのインスタンスが複数ある場合、累積的な効果は付加的です。</target>
        </trans-unit>
        <trans-unit id="8b1ee43d27cd54e3a73fd0b027a7a33d6ab24281" translate="yes" xml:space="preserve">
          <source>Also make sure that you have</source>
          <target state="translated">また、あなたが持っていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="40bb5340e74c1ea8c0aff8ce399c268adda872b8" translate="yes" xml:space="preserve">
          <source>Also make sure you read &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;&quot;BUGS AND CAVEATS&quot;&lt;/a&gt; below for the known limitations of this port.</source>
          <target state="translated">また、このポートの既知の制限については、以下の&lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;「バグと警告」&lt;/a&gt;を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="ccf329915f222131778e86ee9fd087f89f391e81" translate="yes" xml:space="preserve">
          <source>Also make sure you read &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;BUGS AND CAVEATS&lt;/a&gt; below for the known limitations of this port.</source>
          <target state="translated">また、このポートの既知の制限については、以下の&lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;バグと警告&lt;/a&gt;を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="fe06cc0daccf4654b8c81c8f1faee5e0b7783c69" translate="yes" xml:space="preserve">
          <source>Also no attention is paid to &lt;code&gt;\c\&lt;/code&gt; (multichar control char syntax) during this search. Thus the second &lt;code&gt;\&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq/\c\/&lt;/a&gt;&lt;/code&gt; is interpreted as a part of &lt;code&gt;\/&lt;/code&gt;, and the following &lt;code&gt;/&lt;/code&gt; is not recognized as a delimiter. Instead, use &lt;code&gt;\034&lt;/code&gt; or &lt;code&gt;\x1c&lt;/code&gt; at the end of quoted constructs.</source>
          <target state="translated">また、この検索中は &lt;code&gt;\c\&lt;/code&gt; （multichar制御文字構文）は考慮されません。こうして第 &lt;code&gt;\&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq/\c\/&lt;/a&gt;&lt;/code&gt; の一部として解釈され &lt;code&gt;\/&lt;/code&gt; 、および次 &lt;code&gt;/&lt;/code&gt; 区切り文字として認識されません。代わりに、引用符で囲まれた構成要素の最後に &lt;code&gt;\034&lt;/code&gt; または &lt;code&gt;\x1c&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="b4748c09ad60564220ae82641c3695fd5eb7b587" translate="yes" xml:space="preserve">
          <source>Also no attention is paid to &lt;code&gt;\c\&lt;/code&gt; (multichar control char syntax) during this search. Thus the second &lt;code&gt;\&lt;/code&gt; in &lt;code&gt;qq/\c\/&lt;/code&gt; is interpreted as a part of &lt;code&gt;\/&lt;/code&gt;, and the following &lt;code&gt;/&lt;/code&gt; is not recognized as a delimiter. Instead, use &lt;code&gt;\034&lt;/code&gt; or &lt;code&gt;\x1c&lt;/code&gt; at the end of quoted constructs.</source>
          <target state="translated">また、この検索中は &lt;code&gt;\c\&lt;/code&gt; （multichar control char構文）には注意が払われません。こうして第 &lt;code&gt;\&lt;/code&gt; で &lt;code&gt;qq/\c\/&lt;/code&gt; の一部として解釈され &lt;code&gt;\/&lt;/code&gt; 、および次 &lt;code&gt;/&lt;/code&gt; 区切り文字として認識されません。代わりに、引用符で囲まれた構成の最後に &lt;code&gt;\034&lt;/code&gt; または &lt;code&gt;\x1c&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="73a9b46957654b20ec65fb83845a1d68f2c4bbed" translate="yes" xml:space="preserve">
          <source>Also note that</source>
          <target state="translated">また、以下の点にも注意してください。</target>
        </trans-unit>
        <trans-unit id="674fbb1e5f8c5ba4d4b18a90ede292ece92dabf5" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; passes command line arguments to &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;, which doesn't necessarily interpret them as file names. See &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; for possible security implications.</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; はコマンドライン引数を&lt;a href=&quot;functions/open&quot;&gt;openに&lt;/a&gt;渡すため、必ずしもファイル名として解釈されるわけではありません。考えられるセキュリティの影響については、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6e76aeddde8e8e63ee64b7f772d9f3c1b3f62e2a" translate="yes" xml:space="preserve">
          <source>Also note that &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; passes command line arguments to &lt;a href=&quot;perlfunc#open&quot;&gt;&quot;open&quot; in perlfunc&lt;/a&gt;, which doesn't necessarily interpret them as file names. See &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; for possible security implications.</source>
          <target state="translated">また、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; はコマンドライン引数を&lt;a href=&quot;perlfunc#open&quot;&gt;perlfuncの &quot;open&quot;に&lt;/a&gt;渡しますが、これは必ずしもファイル名として解釈されるとは限りません。考えられるセキュリティへの影響については、&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="93e48d832329c669ef467acfbb855710b1f11c32" translate="yes" xml:space="preserve">
          <source>Also note that in order to be compatible with the shell command, &lt;code&gt;basename()&lt;/code&gt; does not strip off a suffix if it is identical to the remaining characters in the filename.</source>
          <target state="translated">また、シェルコマンドとの互換性を保つために、 &lt;code&gt;basename()&lt;/code&gt; は、ファイル名の残りの文字と同じである場合、サフィックスを削除しません。</target>
        </trans-unit>
        <trans-unit id="6d4f64c4ffda1e49198c526880412a3685e89bbb" translate="yes" xml:space="preserve">
          <source>Also note that in some platforms trying to use the infinity in arithmetic operations may result in Perl crashing because using an infinity causes SIGFPE or its moral equivalent to be sent. The way to ignore this is</source>
          <target state="translated">また、いくつかのプラットフォームでは、算術演算で無限大を使おうとすると、無限大を使うと SIGFPE やその道徳的な等価物が送られてくるため、Perl がクラッシュする可能性があることに注意してください。これを無視する方法は</target>
        </trans-unit>
        <trans-unit id="e93493c0471e07df3c4c3cbce58bbf69cdead50b" translate="yes" xml:space="preserve">
          <source>Also note that non-STD file handles remain unaffected. Use &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; to change the layers of those.</source>
          <target state="translated">また、非STDファイルハンドルは影響を受けないことに注意してください。これらのレイヤーを変更するには、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="65a1eea4a01332917c07c49aead459f12a5fb083" translate="yes" xml:space="preserve">
          <source>Also note that non-STD file handles remain unaffected. Use &lt;code&gt;use open&lt;/code&gt; or &lt;code&gt;binmode&lt;/code&gt; to change the layers of those.</source>
          <target state="translated">また、STD以外のファイルハンドルは影響を受けないことに注意してください。それらのレイヤーを変更するには、 &lt;code&gt;binmode&lt;/code&gt; またはbinmodeを使用し &lt;code&gt;use open&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8343e14f16aa3f23ee42ee984961cfee3da48f48" translate="yes" xml:space="preserve">
          <source>Also note that the &lt;code&gt;sv_set*()&lt;/code&gt; and &lt;code&gt;sv_cat*()&lt;/code&gt; functions described earlier do &lt;b&gt;not&lt;/b&gt; invoke 'set' magic on their targets. This must be done by the user either by calling the &lt;code&gt;SvSETMAGIC()&lt;/code&gt; macro after calling these functions, or by using one of the &lt;code&gt;sv_set*_mg()&lt;/code&gt; or &lt;code&gt;sv_cat*_mg()&lt;/code&gt; functions. Similarly, generic C code must call the &lt;code&gt;SvGETMAGIC()&lt;/code&gt; macro to invoke any 'get' magic if they use an SV obtained from external sources in functions that don't handle magic. See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for a description of these functions. For example, calls to the &lt;code&gt;sv_cat*()&lt;/code&gt; functions typically need to be followed by &lt;code&gt;SvSETMAGIC()&lt;/code&gt; , but they don't need a prior &lt;code&gt;SvGETMAGIC()&lt;/code&gt; since their implementation handles 'get' magic.</source>
          <target state="translated">また、 &lt;code&gt;sv_set*()&lt;/code&gt; および &lt;code&gt;sv_cat*()&lt;/code&gt; 関数は、ターゲットに対して「設定」マジックを呼び出さ&lt;b&gt;ない&lt;/b&gt;ことに注意してください。これは、ユーザーがこれらの関数を呼び出した後に &lt;code&gt;SvSETMAGIC()&lt;/code&gt; マクロを呼び出すか、 &lt;code&gt;sv_set*_mg()&lt;/code&gt; または &lt;code&gt;sv_cat*_mg()&lt;/code&gt; 関数のいずれかを使用して行う必要があります。同様に、ジェネリックCコードは、マジックを処理しない関数で外部ソースから取得したSVを使用する場合、 &lt;code&gt;SvGETMAGIC()&lt;/code&gt; マクロを呼び出して「取得」マジックを呼び出す必要があります。これらの関数の説明については&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。たとえば、通常は &lt;code&gt;sv_cat*()&lt;/code&gt; 関数の呼び出しの後に &lt;code&gt;SvSETMAGIC()&lt;/code&gt; を実行する必要があります、しかし、それらの実装は「取得」マジックを処理するため、事前の &lt;code&gt;SvGETMAGIC()&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="04a13d83ef82898f68f016497d3a4a1f1464818f" translate="yes" xml:space="preserve">
          <source>Also note that the &lt;code&gt;sv_set*()&lt;/code&gt; and &lt;code&gt;sv_cat*()&lt;/code&gt; functions described earlier do &lt;b&gt;not&lt;/b&gt; invoke 'set' magic on their targets. This must be done by the user either by calling the &lt;code&gt;SvSETMAGIC()&lt;/code&gt; macro after calling these functions, or by using one of the &lt;code&gt;sv_set*_mg()&lt;/code&gt; or &lt;code&gt;sv_cat*_mg()&lt;/code&gt; functions. Similarly, generic C code must call the &lt;code&gt;SvGETMAGIC()&lt;/code&gt; macro to invoke any 'get' magic if they use an SV obtained from external sources in functions that don't handle magic. See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for a description of these functions. For example, calls to the &lt;code&gt;sv_cat*()&lt;/code&gt; functions typically need to be followed by &lt;code&gt;SvSETMAGIC()&lt;/code&gt;, but they don't need a prior &lt;code&gt;SvGETMAGIC()&lt;/code&gt; since their implementation handles 'get' magic.</source>
          <target state="translated">また、注目すべきこと &lt;code&gt;sv_set*()&lt;/code&gt; と &lt;code&gt;sv_cat*()&lt;/code&gt; 関数は、以前に行う説明し&lt;b&gt;ていない&lt;/b&gt;彼らのターゲットに「SET」の魔法を呼び出します。これは、これらの関数を呼び出した後に &lt;code&gt;SvSETMAGIC()&lt;/code&gt; マクロを呼び出すか、 &lt;code&gt;sv_set*_mg()&lt;/code&gt; または &lt;code&gt;sv_cat*_mg()&lt;/code&gt; 関数のいずれかを使用して、ユーザーが行う必要があります。同様に、汎用Cコードは、マジックを処理しない関数で外部ソースから取得したSVを使用する場合、 &lt;code&gt;SvGETMAGIC()&lt;/code&gt; マクロを呼び出して「get」マジックを呼び出す必要があります。これらの関数の説明については、&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。たとえば、 &lt;code&gt;sv_cat*()&lt;/code&gt; 関数の呼び出しの後には、通常、 &lt;code&gt;SvSETMAGIC()&lt;/code&gt; が続く必要があります。、ただし、実装は「get」マジックを処理するため、事前の &lt;code&gt;SvGETMAGIC()&lt;/code&gt; は必要ありません。</target>
        </trans-unit>
        <trans-unit id="e7be1aad912cf4ad5fcf4064cf6ab4309ca326be" translate="yes" xml:space="preserve">
          <source>Also note that the bval option only allows you to specify a single byte as a delimiter.</source>
          <target state="translated">また、bval オプションは、デリミタとして 1 バイトしか指定できないことにも注意してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
