<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="77df0281a5c47be5d00ae61a57ff00e23d9d5e5b" translate="yes" xml:space="preserve">
          <source>EXPORTABLE FUNCTIONS</source>
          <target state="translated">拡張性の高い機能</target>
        </trans-unit>
        <trans-unit id="22d0596dab83a0920d66ad899d3e61f47464b88e" translate="yes" xml:space="preserve">
          <source>EXPORTABLE VARIABLES</source>
          <target state="translated">移植可能な変数</target>
        </trans-unit>
        <trans-unit id="43aade251566381046f1d9dd6f51422fde3c0fbd" translate="yes" xml:space="preserve">
          <source>EXPORTED FUNCTIONS</source>
          <target state="translated">エクスポートされた関数</target>
        </trans-unit>
        <trans-unit id="8b30e3050a39fae8e0c617ff76ab8d47b5f0b044" translate="yes" xml:space="preserve">
          <source>EXPORTED SYMBOLS</source>
          <target state="translated">EXPORTED SYMBOLS</target>
        </trans-unit>
        <trans-unit id="e9e012170f2df7cb18fa26019e2b46cbf4a91319" translate="yes" xml:space="preserve">
          <source>EXPORTS</source>
          <target state="translated">EXPORTS</target>
        </trans-unit>
        <trans-unit id="7b479848a0ec11ad7c3ba1025f3ac20068015bb9" translate="yes" xml:space="preserve">
          <source>EXPORTS (by request only)</source>
          <target state="translated">EXPORTS(リクエストのみ</target>
        </trans-unit>
        <trans-unit id="6b6562ec1f5d1b67f0bbd288b913382cd128ba1e" translate="yes" xml:space="preserve">
          <source>EXPORT_LIST: name of a file that is passed to linker to define symbols to be exported.</source>
          <target state="translated">EXPORT_LIST:エクスポートするシンボルを定義するためにリンカに渡されるファイル名。</target>
        </trans-unit>
        <trans-unit id="a6fc3ffe71e48b679d9c5609def42ab3c69aa49f" translate="yes" xml:space="preserve">
          <source>EXPORT_OK</source>
          <target state="translated">EXPORT_OK</target>
        </trans-unit>
        <trans-unit id="f817892a6b7b040f6bf499b1ab6645711184a4f1" translate="yes" xml:space="preserve">
          <source>EXPR</source>
          <target state="translated">EXPR</target>
        </trans-unit>
        <trans-unit id="62af5da98ccf954a1bd12d8422eab969d058949e" translate="yes" xml:space="preserve">
          <source>EXPR is executed as a system command. The collected standard output of the command is returned. In scalar context, it comes back as a single (potentially multi-line) string. In list context, returns a list of lines (however you've defined lines with &lt;a href=&quot;perlvar#%24%2F&quot;&gt;&lt;code&gt;$/&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;)). This is the internal function implementing the &lt;code&gt;qx/EXPR/&lt;/code&gt; operator, but you can use it directly. The &lt;code&gt;qx/EXPR/&lt;/code&gt; operator is discussed in more detail in &lt;a href=&quot;perlop#qx%2FSTRING%2F&quot;&gt;&quot;&lt;code&gt;qx/&lt;i&gt;STRING&lt;/i&gt;/&lt;/code&gt;&quot; in perlop&lt;/a&gt;. If EXPR is omitted, uses &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">EXPRはシステムコマンドとして実行されます。収集されたコマンドの標準出力が返されます。スカラーコンテキストでは、単一の（場合によっては複数行の）文字列として返されます。リストコンテキストでは、行のリストを返します（ただし、&lt;a href=&quot;perlvar#%24%2F&quot;&gt; &lt;code&gt;$/&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;english&quot;&gt;英語では&lt;/a&gt; &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; で行を定義しました）。これは &lt;code&gt;qx/EXPR/&lt;/code&gt; 演算子を実装する内部関数ですが、直接使用することもできます。 &lt;code&gt;qx/EXPR/&lt;/code&gt; 演算子は、より詳細に説明されている&lt;a href=&quot;perlop#qx%2FSTRING%2F&quot;&gt;&quot; &lt;/a&gt; &lt;code&gt;qx/&lt;i&gt;STRING&lt;/i&gt;/&lt;/code&gt; &lt;i&gt;STRING&lt;/i&gt; /はperlopで&quot;。 EXPRを省略した場合は、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;使用します。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="3499643610f3dd44dae6eb02d7fed2d648b428d9" translate="yes" xml:space="preserve">
          <source>EXPR is executed as a system command. The collected standard output of the command is returned. In scalar context, it comes back as a single (potentially multi-line) string. In list context, returns a list of lines (however you've defined lines with &lt;code&gt;$/&lt;/code&gt; or &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; ). This is the internal function implementing the &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; operator, but you can use it directly. The &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; operator is discussed in more detail in &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt;. If EXPR is omitted, uses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">EXPRはシステムコマンドとして実行されます。収集されたコマンドの標準出力が返されます。スカラーのコンテキストでは、単一の（複数行になる可能性がある）文字列として返されます。リストコンテキストでは、行のリストを返します（ただし、 &lt;code&gt;$/&lt;/code&gt; または &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; 行を定義しました）。これは &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; 演算子を実装する内部関数ですが、直接使用できます。 &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; 演算子は、で詳しく説明されて&lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;はperlopにI / O演算子&lt;/a&gt;。 EXPRが省略されている場合は、 &lt;code&gt;$_&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="f586c420e6eaf4cfbda37e4566d4c88b6984ca54" translate="yes" xml:space="preserve">
          <source>EXPR is executed as a system command. The collected standard output of the command is returned. In scalar context, it comes back as a single (potentially multi-line) string. In list context, returns a list of lines (however you've defined lines with &lt;code&gt;$/&lt;/code&gt; or &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; ). This is the internal function implementing the &lt;code&gt;&lt;a href=&quot;qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; operator, but you can use it directly. The &lt;code&gt;&lt;a href=&quot;qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; operator is discussed in more detail in &lt;a href=&quot;../perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt;. If EXPR is omitted, uses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">EXPRはシステムコマンドとして実行されます。収集されたコマンドの標準出力が返されます。スカラーのコンテキストでは、単一の（複数行になる可能性がある）文字列として返されます。リストコンテキストでは、行のリストを返します（ただし、 &lt;code&gt;$/&lt;/code&gt; または &lt;code&gt;$INPUT_RECORD_SEPARATOR&lt;/code&gt; 行を定義しました）。これは &lt;code&gt;&lt;a href=&quot;qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; 演算子を実装する内部関数ですが、直接使用できます。 &lt;code&gt;&lt;a href=&quot;qx&quot;&gt;qx/EXPR/&lt;/a&gt;&lt;/code&gt; 演算子は、で詳しく説明されて&lt;a href=&quot;../perlop#I%2fO-Operators&quot;&gt;はperlopにI / O演算子&lt;/a&gt;。 EXPRが省略されている場合は、 &lt;code&gt;$_&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="891bbd450e125f5b1ee12d035ddc1a7eef7a872c" translate="yes" xml:space="preserve">
          <source>EXPRESSION</source>
          <target state="translated">EXPRESSION</target>
        </trans-unit>
        <trans-unit id="6f64d0b0e54fcf9769746a65fbf9b2ecb163ee70" translate="yes" xml:space="preserve">
          <source>EXTEND</source>
          <target state="translated">EXTEND</target>
        </trans-unit>
        <trans-unit id="105f8f5f3c21e49b28c3216ab6b37ce1503d78bf" translate="yes" xml:space="preserve">
          <source>EXTEND this, count</source>
          <target state="translated">エクステンド</target>
        </trans-unit>
        <trans-unit id="b4a4d24b33941bccd86ff7ba0c19dc15933e36a4" translate="yes" xml:space="preserve">
          <source>EXTENDED CONSTRUCTS</source>
          <target state="translated">拡張工事</target>
        </trans-unit>
        <trans-unit id="b070e356144357fb71137b31e2e89f09d2f73b53" translate="yes" xml:space="preserve">
          <source>EXTERN.h</source>
          <target state="translated">EXTERN.h</target>
        </trans-unit>
        <trans-unit id="92f627e6114fde8ec8e85f5dc7eb0d8548926fd9" translate="yes" xml:space="preserve">
          <source>EXTERNAL</source>
          <target state="translated">EXTERNAL</target>
        </trans-unit>
        <trans-unit id="21d7721c8d41e278d11d43cf30b3f64d4c13b7f4" translate="yes" xml:space="preserve">
          <source>EXTRA</source>
          <target state="translated">EXTRA</target>
        </trans-unit>
        <trans-unit id="13ae0f4e98553c4041bca1bd5b70b21a5aa6d865" translate="yes" xml:space="preserve">
          <source>EXTRALIBS</source>
          <target state="translated">EXTRALIBS</target>
        </trans-unit>
        <trans-unit id="3633746b067241666bc462dcfe7a24ff23a8db68" translate="yes" xml:space="preserve">
          <source>Each</source>
          <target state="translated">Each</target>
        </trans-unit>
        <trans-unit id="64713135c29a168f621e3cd6c59750f2ec3360d2" translate="yes" xml:space="preserve">
          <source>Each &quot;=over&quot; ... &quot;=back&quot; region should be one of the following:</source>
          <target state="translated">各&quot;=over&quot; ...&quot;=back &quot;領域は、以下のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="8573b03d1dbd851733546c18897b586541b26327" translate="yes" xml:space="preserve">
          <source>Each &lt;b&gt;File&lt;/b&gt; section reports on a single file. Each &lt;b&gt;Subroutine&lt;/b&gt; section reports on a single subroutine apart from the special cases &quot;(definitions)&quot; and &quot;(main)&quot;. These report, respectively, on subroutine definitions found by the initial symbol table walk and on the main part of the program or module external to all subroutines.</source>
          <target state="translated">各&lt;b&gt;File&lt;/b&gt;セクションは、単一のファイルについて報告します。各&lt;b&gt;サブルーチン&lt;/b&gt;セクションは、特殊なケースである &quot;（definitions）&quot;と &quot;（main）&quot;を除いて、単一のサブルーチンについて報告します。これらはそれぞれ、初期シンボルテーブルウォークによって検出されたサブルーチン定義と、すべてのサブルーチンの外部にあるプログラムまたはモジュールの主要部分について報告します。</target>
        </trans-unit>
        <trans-unit id="c3f67868071b09e484f931abe029f1f8f7b5dc16" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;--$source-option&lt;/code&gt; option must specify a key/value pair separated by an &lt;code&gt;=&lt;/code&gt; . If an option can take multiple values, just specify it multiple times, as with the &lt;code&gt;extensions=&lt;/code&gt; examples above. If the option should be a hash reference, specify the value as a second pair separated by a &lt;code&gt;=&lt;/code&gt; , as in the &lt;code&gt;pset=&lt;/code&gt; examples above (escape &lt;code&gt;=&lt;/code&gt; with a backslash).</source>
          <target state="translated">各 &lt;code&gt;--$source-option&lt;/code&gt; オプションは、 &lt;code&gt;=&lt;/code&gt; で区切られたキーと値のペアを指定する必要があります。オプションが複数の値を取ることができる場合は、上記の &lt;code&gt;extensions=&lt;/code&gt; 例のように、それを複数回指定するだけです。オプションがハッシュ参照である必要がある場合は、上記の &lt;code&gt;pset=&lt;/code&gt; 例（エスケープ &lt;code&gt;=&lt;/code&gt; バックスラッシュ付き）のように、a &lt;code&gt;=&lt;/code&gt; で区切られた2番目のペアとして値を指定します。</target>
        </trans-unit>
        <trans-unit id="72aa1e6906c5ec0ac410f03e5bee3a9d52fb4bb1" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;--$source-option&lt;/code&gt; option must specify a key/value pair separated by an &lt;code&gt;=&lt;/code&gt;. If an option can take multiple values, just specify it multiple times, as with the &lt;code&gt;extensions=&lt;/code&gt; examples above. If the option should be a hash reference, specify the value as a second pair separated by a &lt;code&gt;=&lt;/code&gt;, as in the &lt;code&gt;pset=&lt;/code&gt; examples above (escape &lt;code&gt;=&lt;/code&gt; with a backslash).</source>
          <target state="translated">各 &lt;code&gt;--$source-option&lt;/code&gt; オプションは、 &lt;code&gt;=&lt;/code&gt; で区切られたキーと値のペアを指定する必要があります。オプションが複数の値を取ることができる場合は、上記の &lt;code&gt;extensions=&lt;/code&gt; 例のように、複数回指定するだけです。オプションをハッシュ参照にする必要がある場合は、上記の &lt;code&gt;pset=&lt;/code&gt; 例のように（エスケープ &lt;code&gt;=&lt;/code&gt; バックスラッシュ付き）、a &lt;code&gt;=&lt;/code&gt; で区切られた2番目のペアとして値を指定します。</target>
        </trans-unit>
        <trans-unit id="114f01b386e99faf35799463e66245b3c628986d" translate="yes" xml:space="preserve">
          <source>Each C type is represented by an entry in the typemap file that is responsible for converting perl variables (SV, AV, HV, CV, etc.) to and from that type. The following sections list all XS types that come with perl by default.</source>
          <target state="translated">それぞれの C 型はタイプマップファイルのエントリで表され、 perl 変数 (SV,AV,HV,CV など)をその型との間で変換する役割を果たします。以下のセクションでは、デフォルトで perl に付属している全ての XS 型をリストアップしています。</target>
        </trans-unit>
        <trans-unit id="45fe11f5c5ad8666badf6e1b74648061569fd2e9" translate="yes" xml:space="preserve">
          <source>Each CV has a pointer, &lt;code&gt;CvOUTSIDE()&lt;/code&gt; , to its lexically enclosing CV (if any). Because pointers to anonymous sub prototypes are stored in &lt;code&gt;&amp;amp;&lt;/code&gt; pad slots, it is a possible to get a circular reference, with the parent pointing to the child and vice-versa. To avoid the ensuing memory leak, we do not increment the reference count of the CV pointed to by &lt;code&gt;CvOUTSIDE&lt;/code&gt; in the</source>
          <target state="translated">各CVには、字句的に囲むCV（存在する場合）へのポインター &lt;code&gt;CvOUTSIDE()&lt;/code&gt; があります。匿名サブプロトタイプへのポインターは &lt;code&gt;&amp;amp;&lt;/code&gt; スロットに格納されるため、親が子を指し、逆も同様に循環参照を取得することが可能です。続くメモリリークを回避するために、 &lt;code&gt;CvOUTSIDE&lt;/code&gt; が指すCVの参照カウントをインクリメントしません。</target>
        </trans-unit>
        <trans-unit id="0a552f3c9f394752d19b918c33b1679413791b25" translate="yes" xml:space="preserve">
          <source>Each CV has a pointer, &lt;code&gt;CvOUTSIDE()&lt;/code&gt;, to its lexically enclosing CV (if any). Because pointers to anonymous sub prototypes are stored in &lt;code&gt;&amp;amp;&lt;/code&gt; pad slots, it is a possible to get a circular reference, with the parent pointing to the child and vice-versa. To avoid the ensuing memory leak, we do not increment the reference count of the CV pointed to by &lt;code&gt;CvOUTSIDE&lt;/code&gt; in the</source>
          <target state="translated">各CVには、字句的に囲むCV（存在する場合）へのポインター &lt;code&gt;CvOUTSIDE()&lt;/code&gt; があります。匿名のサブプロトタイプへのポインタは &lt;code&gt;&amp;amp;&lt;/code&gt; padスロットに格納されているため、親が子を指している、またはその逆の循環参照を取得することができます。その後のメモリリークを回避するために、 &lt;code&gt;CvOUTSIDE&lt;/code&gt; が指すCVの参照カウントをインクリメントしません。</target>
        </trans-unit>
        <trans-unit id="877f690dc448228c6c71438f034057615156195d" translate="yes" xml:space="preserve">
          <source>Each INPUT or OUTPUT typemap entry is a double-quoted Perl string that will be evaluated in the presence of certain variables to get the final C code for mapping a certain C type.</source>
          <target state="translated">INPUTまたはOUTPUT型マップの各エントリは、二重引用符で囲まれたPerlの文字列で、特定の変数の存在下で評価され、特定のC型をマッピングするための最終的なCコードを取得します。</target>
        </trans-unit>
        <trans-unit id="fb013f151204036ffe28cd6f1b7420c85313acfd" translate="yes" xml:space="preserve">
          <source>Each NAME is assumed to be in the calling package. See share_from for an alternative method (which &lt;code&gt;share&lt;/code&gt; uses).</source>
          <target state="translated">各NAMEは呼び出し元のパッケージにあると想定されます。別の方法（ &lt;code&gt;share&lt;/code&gt; が使用）については、share_fromを参照してください。</target>
        </trans-unit>
        <trans-unit id="5c9985ee57f0e8b2c8e51c7278e3d4c3d9b47d87" translate="yes" xml:space="preserve">
          <source>Each NAME must be the &lt;b&gt;name&lt;/b&gt; of a non-lexical variable, typically with the leading type identifier included. A bareword is treated as a function name.</source>
          <target state="translated">各NAMEは非レキシカル変数の&lt;b&gt;名前&lt;/b&gt;である必要があり、通常は先頭の型識別子が含まれています。ベアワードは関数名として扱われます。</target>
        </trans-unit>
        <trans-unit id="2d1afe9f64b8afc5ff5d1587bde457161df361bb" translate="yes" xml:space="preserve">
          <source>Each array &lt;code&gt;@{&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; holds the lines of $filename for a file compiled by Perl. The same is also true for &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed strings that contain subroutines, or which are currently being executed. The $filename for &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed strings looks like &lt;code&gt;(&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 34)&lt;/code&gt; .</source>
          <target state="translated">各配列 &lt;code&gt;@{&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; は、Perlによってコンパイルされたファイルの$ filenameの行を保持します。同じことは、サブルーチンを含む、または現在実行されている &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 文字列にも当てはまります。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 文字列の$ filenameは &lt;code&gt;(&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 34)&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="4542f557bdf7a70f332f8c5d8d58355f058485ae" translate="yes" xml:space="preserve">
          <source>Each array &lt;code&gt;@{&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; holds the lines of $filename for a file compiled by Perl. The same is also true for &lt;code&gt;eval&lt;/code&gt;ed strings that contain subroutines, or which are currently being executed. The $filename for &lt;code&gt;eval&lt;/code&gt;ed strings looks like &lt;code&gt;(eval 34)&lt;/code&gt;.</source>
          <target state="translated">各配列 &lt;code&gt;@{&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; は、Perlによってコンパイルされたファイルの$ filenameの行を保持します。同じことが、サブルーチンを含む、または現在実行されている &lt;code&gt;eval&lt;/code&gt; 文字列にも当てはまります。 &lt;code&gt;eval&lt;/code&gt; 文字列の$ filenameは &lt;code&gt;(eval 34)&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="83f0c2f3d8605c13877f68e54dd82f6341b8fae0" translate="yes" xml:space="preserve">
          <source>Each class can define its &lt;b&gt;attributes&lt;/b&gt;. When we instantiate an object, we assign values to those attributes. For example, every &lt;code&gt;File&lt;/code&gt; object has a path. Attributes are sometimes called &lt;b&gt;properties&lt;/b&gt;.</source>
          <target state="translated">各クラスはその&lt;b&gt;属性&lt;/b&gt;を定義できます。オブジェクトをインスタンス化するとき、それらの属性に値を割り当てます。たとえば、すべての &lt;code&gt;File&lt;/code&gt; オブジェクトにはパスがあります。属性は&lt;b&gt;プロパティ&lt;/b&gt;と呼ばれることもあり&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="64bf8b278b40ceb1457596f928446c91560cdf44" translate="yes" xml:space="preserve">
          <source>Each compartment has an associated &quot;operator mask&quot;. Recall that perl code is compiled into an internal format before execution. Evaluating perl code (e.g. via &quot;eval&quot; or &quot;do 'file'&quot;) causes the code to be compiled into an internal format and then, provided there was no error in the compilation, executed. Code evaluated in a compartment compiles subject to the compartment's operator mask. Attempting to evaluate code in a compartment which contains a masked operator will cause the compilation to fail with an error. The code will not be executed.</source>
          <target state="translated">各コンパートメントには関連する「演算子マスク」があります。perlのコードは実行前に内部フォーマットにコンパイルされることを思い出してください。perlのコードを評価する(例:&quot;eval &quot;や &quot;do 'file'&quot;を使って)と、コードは内部フォーマットにコンパイルされ、コンパイルにエラーがなければ実行されます。コンパートメント内で評価されたコードは、コンパートメントの演算子マスクに従ってコンパイルされます。マスクされた演算子を含むコンパートメント内のコードを評価しようとすると、コンパイルがエラーで失敗します。コードは実行されません。</target>
        </trans-unit>
        <trans-unit id="c6c4ed2bbcee866615b18a5377b47f14999fe9bd" translate="yes" xml:space="preserve">
          <source>Each context entry is labelled with a context type, &lt;code&gt;cx_type&lt;/code&gt;. Typical context types are &lt;code&gt;CXt_SUB&lt;/code&gt;, &lt;code&gt;CXt_EVAL&lt;/code&gt; etc., as well as &lt;code&gt;CXt_BLOCK&lt;/code&gt; and &lt;code&gt;CXt_NULL&lt;/code&gt; which represent a basic scope (as pushed by &lt;code&gt;pp_enter&lt;/code&gt;) and a sort block. The type determines which part of the context union are valid.</source>
          <target state="translated">各コンテキストエントリには、コンテキストタイプ &lt;code&gt;cx_type&lt;/code&gt; のラベルが付いています。一般的なコンテキストタイプは、 &lt;code&gt;CXt_SUB&lt;/code&gt; 、 &lt;code&gt;CXt_EVAL&lt;/code&gt; など、および基本スコープ（ &lt;code&gt;pp_enter&lt;/code&gt; によってプッシュされる）とソートブロックを表す &lt;code&gt;CXt_BLOCK&lt;/code&gt; と &lt;code&gt;CXt_NULL&lt;/code&gt; です。タイプは、コンテキスト共用体のどの部分が有効かを決定します。</target>
        </trans-unit>
        <trans-unit id="035a2860cc641f9a6aba917e368a923359692185" translate="yes" xml:space="preserve">
          <source>Each element in the struct data has an accessor method, which is used to assign to the element and to fetch its value. The default accessor can be overridden by declaring a &lt;code&gt;&lt;a href=&quot;../functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; of the same name in the package. (See Example 2.)</source>
          <target state="translated">構造体データの各要素には、要素への割り当てとその値のフェッチに使用されるアクセサメソッドがあります。パッケージ内で同じ名前の &lt;code&gt;&lt;a href=&quot;../functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; を宣言することにより、デフォルトのアクセサーをオーバーライドできます。 （例2を参照してください。）</target>
        </trans-unit>
        <trans-unit id="79c8cb706f1fcfacc217858c7c85ae02ae2f4052" translate="yes" xml:space="preserve">
          <source>Each element in the struct data has an accessor method, which is used to assign to the element and to fetch its value. The default accessor can be overridden by declaring a &lt;code&gt;sub&lt;/code&gt; of the same name in the package. (See Example 2.)</source>
          <target state="translated">構造体データの各要素にはアクセサメソッドがあり、要素に割り当ててその値をフェッチするために使用されます。パッケージ内で同じ名前の &lt;code&gt;sub&lt;/code&gt; を宣言することにより、デフォルトのアクセサーをオーバーライドできます。（例2を参照してください。）</target>
        </trans-unit>
        <trans-unit id="fd1373d9ec88c46f95e3a35afb96af5418baf7f3" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;%!&lt;/code&gt; has a true value only if &lt;code&gt;$!&lt;/code&gt; is set to that value. For example, &lt;code&gt;$!{ENOENT}&lt;/code&gt; is true if and only if the current value of &lt;code&gt;$!&lt;/code&gt; is &lt;code&gt;ENOENT&lt;/code&gt; ; that is, if the most recent error was &quot;No such file or directory&quot; (or its moral equivalent: not all operating systems give that exact error, and certainly not all languages). To check if a particular key is meaningful on your system, use &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;
$!{the_key}&lt;/code&gt; ; for a list of legal keys, use &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt; %!&lt;/code&gt; . See &lt;a href=&quot;errno&quot;&gt;Errno&lt;/a&gt; for more information, and also see &lt;a href=&quot;#%24!&quot;&gt;$!&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;%!&lt;/code&gt; の各要素 場合にのみ、真の価値を持って &lt;code&gt;$!&lt;/code&gt; その値に設定されます。たとえば、 &lt;code&gt;$!{ENOENT}&lt;/code&gt; は、現在の値 &lt;code&gt;$!&lt;/code&gt; の場合にのみtrueになります。ある &lt;code&gt;ENOENT&lt;/code&gt; は、つまり、最新のエラーが「そのようなファイルまたはディレクトリはありません」（またはその道徳的に同等のもの）であった場合、すべてのオペレーティングシステムがその正確なエラーを提供するわけではなく、すべての言語がそうであるとは限りません。特定のキーがシステムで意味があるかどうかを確認するには、 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $!{the_key}&lt;/code&gt; 使用します。有効なキーのリストについては、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt; %!&lt;/code&gt; 使用してください。。詳細については、&lt;a href=&quot;errno&quot;&gt;Errno&lt;/a&gt;を参照してください&lt;a href=&quot;#%24!&quot;&gt;。&lt;/a&gt;また、$！も参照してください。。</target>
        </trans-unit>
        <trans-unit id="e3f755ecf95a73dbcb1fefb62d992d2bd88e203f" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;%!&lt;/code&gt; has a true value only if &lt;code&gt;$!&lt;/code&gt; is set to that value. For example, &lt;code&gt;$!{ENOENT}&lt;/code&gt; is true if and only if the current value of &lt;code&gt;$!&lt;/code&gt; is &lt;code&gt;ENOENT&lt;/code&gt;; that is, if the most recent error was &quot;No such file or directory&quot; (or its moral equivalent: not all operating systems give that exact error, and certainly not all languages). The specific true value is not guaranteed, but in the past has generally been the numeric value of &lt;code&gt;$!&lt;/code&gt;. To check if a particular key is meaningful on your system, use &lt;code&gt;exists $!{the_key}&lt;/code&gt;; for a list of legal keys, use &lt;code&gt;keys %!&lt;/code&gt;. See &lt;a href=&quot;errno&quot;&gt;Errno&lt;/a&gt; for more information, and also see &lt;a href=&quot;#%24%21&quot;&gt;&quot;$!&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;%!&lt;/code&gt; の各要素 &lt;code&gt;$!&lt;/code&gt; の場合にのみ真の値があります。その値に設定されます。たとえば、 &lt;code&gt;$!{ENOENT}&lt;/code&gt; は、現在の &lt;code&gt;$!&lt;/code&gt; の値である場合にのみtrueになります。ある &lt;code&gt;ENOENT&lt;/code&gt; は、つまり、最新のエラーが「そのようなファイルまたはディレクトリはありません」（またはその道徳的同等物：すべてのオペレーティングシステムがその正確なエラーを出すわけではなく、確かにすべての言語ではない）であった場合。特定の真の値は保証されていませんが、過去には一般的に &lt;code&gt;$!&lt;/code&gt; 数値でした！。特定のキーがシステムで意味があるかどうかを確認するには、 &lt;code&gt;exists $!{the_key}&lt;/code&gt; ;を使用します。有効なキーのリストについては、 &lt;code&gt;keys %!&lt;/code&gt; 使用してください。。詳細については、&lt;a href=&quot;errno&quot;&gt;Errno&lt;/a&gt;を参照してください。また、&lt;a href=&quot;#%24%21&quot;&gt;「$！」&lt;/a&gt;も参照してください。。</target>
        </trans-unit>
        <trans-unit id="06a2d451f571f682ca87c1d143e9cc5d9cc9752a" translate="yes" xml:space="preserve">
          <source>Each element of the &lt;code&gt;@tests&lt;/code&gt; array is either:</source>
          <target state="translated">&lt;code&gt;@tests&lt;/code&gt; 配列の各要素は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="d55ab66461652be4398995f0bc7395b92cdadc85" translate="yes" xml:space="preserve">
          <source>Each element on the right-hand side must be a reference to a datum of the right type. Parentheses immediately surrounding an array (and possibly also &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;) will make each element of the array an alias to the corresponding scalar referenced on the right-hand side:</source>
          <target state="translated">右側の各要素は、正しいタイプのデータムへの参照である必要があります。配列（および場合によっては &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; ）を直接囲む括弧は、配列の各要素を、右側で参照される対応するスカラーのエイリアスにします。</target>
        </trans-unit>
        <trans-unit id="73d053df17de770313a9997b0c6b33ddac74a8d7" translate="yes" xml:space="preserve">
          <source>Each element on the right-hand side must be a reference to a datum of the right type. Parentheses immediately surrounding an array (and possibly also &lt;code&gt;my&lt;/code&gt;/&lt;code&gt;state&lt;/code&gt;/&lt;code&gt;our&lt;/code&gt;/&lt;code&gt;local&lt;/code&gt;) will make each element of the array an alias to the corresponding scalar referenced on the right-hand side:</source>
          <target state="translated">右側の各要素は、適切なタイプのデータへの参照である必要があります。配列（および場合によっては &lt;code&gt;my&lt;/code&gt; / &lt;code&gt;state&lt;/code&gt; / &lt;code&gt;our&lt;/code&gt; / &lt;code&gt;local&lt;/code&gt; ）を直接囲む括弧は、配列の各要素を、右側で参照される対応するスカラーのエイリアスにします。</target>
        </trans-unit>
        <trans-unit id="4684b159123c6d2eb2be5f3fb5fb6b32cbd2c836" translate="yes" xml:space="preserve">
          <source>Each element's type can be scalar, array, hash, or class.</source>
          <target state="translated">各要素の型はスカラ、配列、ハッシュ、クラスのいずれかです。</target>
        </trans-unit>
        <trans-unit id="4a18db593068986b02fcc2822d10b93bd6ae4e04" translate="yes" xml:space="preserve">
          <source>Each engine is supposed to provide access to a constant structure of the following format:</source>
          <target state="translated">各エンジンは、以下の形式の定数構造体へのアクセスを提供することになっています。</target>
        </trans-unit>
        <trans-unit id="df21f7171545bb80d42912cbb46608328ace6052" translate="yes" xml:space="preserve">
          <source>Each field in a picture line starts with either &quot;@&quot; (at) or &quot;^&quot; (caret), indicating what we'll call, respectively, a &quot;regular&quot; or &quot;special&quot; field. The choice of pad characters determines whether a field is textual or numeric. The tilde operators are not part of a field. Let's look at the various possibilities in detail.</source>
          <target state="translated">画像行の各フィールドは &quot;@&quot; (アット)または &quot;^&quot; (キャレット)で始まり、それぞれ &quot;通常の&quot; または &quot;特別な&quot; フィールドと呼ぶことにします。パッド文字の選択によって、フィールドがテキストか数値かが決まります。チルダ演算子はフィールドの一部ではありません。様々な可能性を詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="e86751063b4744e62f491d3c6500569d32c72d11" translate="yes" xml:space="preserve">
          <source>Each filehandle in Perl counts the number of lines that have been read from it. (Depending on the value of &lt;code&gt;$/&lt;/code&gt; , Perl's idea of what constitutes a line may not match yours.) When a line is read from a filehandle (via &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; ), or when &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek()&lt;/a&gt;&lt;/code&gt; is called on it, &lt;code&gt;$.&lt;/code&gt; becomes an alias to the line counter for that filehandle.</source>
          <target state="translated">Perlの各ファイルハンドルは、そこから読み取られた行数をカウントします。（ &lt;code&gt;$/&lt;/code&gt; の値によっては、行を構成するものについてのPerlの考えはあなたの行と一致しない場合があります。）行がファイルハンドルから（ &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; を介して）読み取られるとき、または &lt;code&gt;&lt;a href=&quot;functions/tell&quot;&gt;tell()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek()&lt;/a&gt;&lt;/code&gt; がそれを呼びました、 &lt;code&gt;$.&lt;/code&gt; そのファイルハンドルの行カウンターのエイリアスになります。</target>
        </trans-unit>
        <trans-unit id="8e57c60a3cb6708806cfdda0d69fc8cd46dd15f5" translate="yes" xml:space="preserve">
          <source>Each filehandle in Perl counts the number of lines that have been read from it. (Depending on the value of &lt;code&gt;$/&lt;/code&gt;, Perl's idea of what constitutes a line may not match yours.) When a line is read from a filehandle (via &lt;code&gt;readline()&lt;/code&gt; or &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;), or when &lt;code&gt;tell()&lt;/code&gt; or &lt;code&gt;seek()&lt;/code&gt; is called on it, &lt;code&gt;$.&lt;/code&gt; becomes an alias to the line counter for that filehandle.</source>
          <target state="translated">Perlの各ファイルハンドルは、そこから読み取られた行数をカウントします。（ &lt;code&gt;$/&lt;/code&gt; の値によっては、行を構成するものに関するPerlの考えがあなたの考えと一致しない場合があります。）行がファイルハンドルから読み取られるとき（ &lt;code&gt;readline()&lt;/code&gt; または &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; を介して）、または &lt;code&gt;tell()&lt;/code&gt; または &lt;code&gt;seek()&lt;/code&gt; がそれを呼びました、 &lt;code&gt;$.&lt;/code&gt; そのファイルハンドルのラインカウンターのエイリアスになります。</target>
        </trans-unit>
        <trans-unit id="31a9624b1b717a0ce3347c2a7723ee1a1d25abab" translate="yes" xml:space="preserve">
          <source>Each handle can be an &lt;code&gt;IO::Handle&lt;/code&gt; object, an integer or an array reference where the first element is an &lt;code&gt;IO::Handle&lt;/code&gt; or an integer.</source>
          <target state="translated">各ハンドルは、 &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクト、整数または配列参照にすることができ、最初の要素は &lt;code&gt;IO::Handle&lt;/code&gt; または整数です。</target>
        </trans-unit>
        <trans-unit id="c1d7462289e4cec1a7aa1fe4c855d903202ec597" translate="yes" xml:space="preserve">
          <source>Each hash &lt;code&gt;%{&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; contains breakpoints and actions keyed by line number. Individual entries (as opposed to the whole hash) are settable. Perl only cares about Boolean true here, although the values used by</source>
          <target state="translated">各ハッシュ &lt;code&gt;%{&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; は、ブレークポイントと、行番号をキーとするアクションが含まれています。（ハッシュ全体ではなく）個々のエントリを設定できます。Perlはここではブール値trueのみを考慮しますが、</target>
        </trans-unit>
        <trans-unit id="62cc45eed91752b51404de9ea925a035fb43cbad" translate="yes" xml:space="preserve">
          <source>Each id must be unique within the document.</source>
          <target state="translated">各 ID は文書内で一意でなければなりません。</target>
        </trans-unit>
        <trans-unit id="667975ad4758db6be064d162ec07e954e503457b" translate="yes" xml:space="preserve">
          <source>Each individual compressed data stream is read until the logical end-of-file is reached. Then &lt;code&gt;nextStream&lt;/code&gt; is called. This will skip to the start of the next compressed data stream and clear the end-of-file flag.</source>
          <target state="translated">個々の圧縮データストリームは、論理的なファイルの終わりに到達するまで読み取られます。次に &lt;code&gt;nextStream&lt;/code&gt; が呼び出されます。これにより、次の圧縮データストリームの先頭にスキップし、ファイルの終わりフラグをクリアします。</target>
        </trans-unit>
        <trans-unit id="18f2cec26478e04f9b7de7d10fcbddee95e58d2c" translate="yes" xml:space="preserve">
          <source>Each initializer is a pair of values:</source>
          <target state="translated">各イニシャライザは値のペアです。</target>
        </trans-unit>
        <trans-unit id="16164820a467e235638c757ccfe00052f4c79b5f" translate="yes" xml:space="preserve">
          <source>Each is a reference to an array of hostnames (in order of preference), which should be used for the given protocol</source>
          <target state="translated">それぞれが、指定されたプロトコルで使用されるホスト名の配列 (優先順位の高い順)への参照です。</target>
        </trans-unit>
        <trans-unit id="d29b86c40a3e654b348fa005424d750255213988" translate="yes" xml:space="preserve">
          <source>Each is an instance of a class with the following methods:</source>
          <target state="translated">それぞれが以下のメソッドを持つクラスのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="f0eab90b97db650ebd8f6bc0b1085529dd6f2a05" translate="yes" xml:space="preserve">
          <source>Each key is the property name in its longest, most descriptive form. The values are what &lt;a href=&quot;#charprop%28%29&quot;&gt;&quot;charprop()&quot;&lt;/a&gt; would return.</source>
          <target state="translated">各キーは、最も長く、最もわかりやすい形式のプロパティ名です。値は&lt;a href=&quot;#charprop%28%29&quot;&gt;「charprop（）」&lt;/a&gt;が返すものです。</target>
        </trans-unit>
        <trans-unit id="c7c5e455da6b08e4d8e8bc9f42db356fdab7233a" translate="yes" xml:space="preserve">
          <source>Each key is the property name in its longest, most descriptive form. The values are what &lt;a href=&quot;#charprop()&quot;&gt;charprop()&lt;/a&gt; would return.</source>
          <target state="translated">各キーは、最も長く、最も説明的な形式のプロパティ名です。値は、&lt;a href=&quot;#charprop()&quot;&gt;charprop（）&lt;/a&gt;が戻すものです。</target>
        </trans-unit>
        <trans-unit id="47492265b46ae806bb067e9b524f132422627a4f" translate="yes" xml:space="preserve">
          <source>Each letter may optionally be followed by a number indicating the repeat count. A numeric repeat count may optionally be enclosed in brackets, as in &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;C[80]&quot;, @arr)&lt;/code&gt; . The repeat count gobbles that many values from the LIST when used with all format types other than &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;A&lt;/code&gt; , &lt;code&gt;Z&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;B&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;H&lt;/code&gt; , &lt;code&gt;@&lt;/code&gt; , &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;X&lt;/code&gt; , and &lt;code&gt;P&lt;/code&gt; , where it means something else, described below. Supplying a &lt;code&gt;*&lt;/code&gt; for the repeat count instead of a number means to use however many items are left, except for:</source>
          <target state="translated">各文字の後には、オプションで繰り返し回数を示す数字を付けることができます。数値の繰り返し数は、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;C[80]&quot;, @arr)&lt;/code&gt; ように、オプションで角括弧で囲むことができます。繰り返しカウントは &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;Z&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;H&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、以外のすべてのフォーマットタイプで使用されると、リストからの多くの値を取り除きます &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;P&lt;/code&gt; であり、以下で説明する別の意味です。供給 &lt;code&gt;*&lt;/code&gt; を 数の代わりに繰り返し数を使用すると、次の場合を除いて、多くのアイテムが使用されます。</target>
        </trans-unit>
        <trans-unit id="f1b93edbbeb731023c3dcd7b867f87661f785306" translate="yes" xml:space="preserve">
          <source>Each letter may optionally be followed by a number indicating the repeat count. A numeric repeat count may optionally be enclosed in brackets, as in &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;C[80]&quot;, @arr)&lt;/code&gt; . The repeat count gobbles that many values from the LIST when used with all format types other than &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;A&lt;/code&gt; , &lt;code&gt;Z&lt;/code&gt; , &lt;code&gt;b&lt;/code&gt; , &lt;code&gt;B&lt;/code&gt; , &lt;code&gt;h&lt;/code&gt; , &lt;code&gt;H&lt;/code&gt; , &lt;code&gt;@&lt;/code&gt; , &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;X&lt;/code&gt; , and &lt;code&gt;P&lt;/code&gt; , where it means something else, described below. Supplying a &lt;code&gt;*&lt;/code&gt; for the repeat count instead of a number means to use however many items are left, except for:</source>
          <target state="translated">各文字の後には、オプションで繰り返し回数を示す数字を付けることができます。数値の繰り返し数は、 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;C[80]&quot;, @arr)&lt;/code&gt; ように、オプションで角括弧で囲むことができます。繰り返しカウントは &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;Z&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;H&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、以外のすべてのフォーマットタイプで使用されると、リストからの多くの値を取り除きます &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;P&lt;/code&gt; であり、以下で説明する別の意味です。供給 &lt;code&gt;*&lt;/code&gt; を 数の代わりに繰り返し数を使用すると、次の場合を除いて、多くのアイテムが使用されます。</target>
        </trans-unit>
        <trans-unit id="0ed7a060f431ab2cc494847effa3cd5278eb7c4f" translate="yes" xml:space="preserve">
          <source>Each letter may optionally be followed by a number indicating the repeat count. A numeric repeat count may optionally be enclosed in brackets, as in &lt;code&gt;pack(&quot;C[80]&quot;, @arr)&lt;/code&gt;. The repeat count gobbles that many values from the LIST when used with all format types other than &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;P&lt;/code&gt;, where it means something else, described below. Supplying a &lt;code&gt;*&lt;/code&gt; for the repeat count instead of a number means to use however many items are left, except for:</source>
          <target state="translated">オプションで、各文字の後に繰り返し回数を示す数字を続けることができます。 &lt;code&gt;pack(&quot;C[80]&quot;, @arr)&lt;/code&gt; 数値の繰り返し回数をオプションで角かっこで囲むことができます。繰り返し回数は &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;Z&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;H&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、以外のすべてのフォーマットタイプで使用すると、LISTからその多くの値を取得します &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;P&lt;/code&gt; 。これは、以下で説明する他の意味です。供給 &lt;code&gt;*&lt;/code&gt; 代わりに、しかし、多くのアイテムを使用するには、数手段の繰り返し回数については、を除いて、残されています。</target>
        </trans-unit>
        <trans-unit id="0ca2b686ea513abcdcd81b004dc80b72da247c37" translate="yes" xml:space="preserve">
          <source>Each locale key is a reference to a hash that has the form above, and gives the casing rules for that particular locale, which take precedence over the locale-independent ones when in that locale.</source>
          <target state="translated">各ロケールキーは、上記の形式のハッシュへの参照であり、特定のロケールでのケーシングルールを提供します。</target>
        </trans-unit>
        <trans-unit id="b81c66f6a67c62b4046a77844c9acd84b539087f" translate="yes" xml:space="preserve">
          <source>Each method returns the old value of the &lt;code&gt;IO::Handle&lt;/code&gt; attribute. The methods each take an optional EXPR, which, if supplied, specifies the new value for the &lt;code&gt;IO::Handle&lt;/code&gt; attribute in question. If not supplied, most methods do nothing to the current value--except for &lt;code&gt;autoflush()&lt;/code&gt; , which will assume a 1 for you, just to be different.</source>
          <target state="translated">各メソッドは、 &lt;code&gt;IO::Handle&lt;/code&gt; 属性の古い値を返します。各メソッドはオプションのEXPRを受け取ります。EXPRは、指定された場合、問題の &lt;code&gt;IO::Handle&lt;/code&gt; 属性の新しい値を指定します。指定されていない場合、ほとんどのメソッドは現在の値に対して何もしません &lt;code&gt;autoflush()&lt;/code&gt; は例外です。</target>
        </trans-unit>
        <trans-unit id="549fa064c8357d58112301aba532e091511a4996" translate="yes" xml:space="preserve">
          <source>Each method returns the old value of the &lt;code&gt;IO::Handle&lt;/code&gt; attribute. The methods each take an optional EXPR, which, if supplied, specifies the new value for the &lt;code&gt;IO::Handle&lt;/code&gt; attribute in question. If not supplied, most methods do nothing to the current value--except for &lt;code&gt;autoflush()&lt;/code&gt;, which will assume a 1 for you, just to be different.</source>
          <target state="translated">各メソッドは、 &lt;code&gt;IO::Handle&lt;/code&gt; 属性の古い値を返します。各メソッドはオプションのEXPRを取ります。これは、指定されている場合、問題の &lt;code&gt;IO::Handle&lt;/code&gt; 属性の新しい値を指定します。指定されていない場合、ほとんどのメソッドは現在の値に対して何もしません。ただし、 &lt;code&gt;autoflush()&lt;/code&gt; は1と見なされますが、これは異なります。</target>
        </trans-unit>
        <trans-unit id="0a408a79f13c6ec4a0cd81e57c787564393f289b" translate="yes" xml:space="preserve">
          <source>Each name-type pair declares one element of the struct. Each element name will be defined as an accessor method unless a method by that name is explicitly defined; in the latter case, a warning is issued if the warning flag (&lt;b&gt;-w&lt;/b&gt;) is set.</source>
          <target state="translated">名前とタイプの各ペアは、構造体の1つの要素を宣言します。各要素名は、その名前のメソッドが明示的に定義されていない限り、アクセサーメソッドとして定義されます。後者の場合、警告フラグ（&lt;b&gt;-w&lt;/b&gt;）が設定されていると警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="bea2fa8177204a00acbe330d65cd373309740d46" translate="yes" xml:space="preserve">
          <source>Each of the &lt;code&gt;$section_spec&lt;/code&gt; arguments should be a section specification as described in &lt;a href=&quot;#SECTION-SPECIFICATIONS&quot;&gt;SECTION SPECIFICATIONS&lt;/a&gt;. The section specifications are parsed by this method and the resulting regular expressions are stored in the invoking object.</source>
          <target state="translated">各 &lt;code&gt;$section_spec&lt;/code&gt; に記載された引数は、セクション指定する必要があります&lt;a href=&quot;#SECTION-SPECIFICATIONS&quot;&gt;SECTION仕様&lt;/a&gt;。セクション指定はこのメソッドによって解析され、結果の正規表現は呼び出し元のオブジェクトに格納されます。</target>
        </trans-unit>
        <trans-unit id="9af6792ba1f44d7cb824f7440960f3ef5c01b6ba" translate="yes" xml:space="preserve">
          <source>Each of the POSIX classes matches exactly the same as their ASCII-range counterparts.</source>
          <target state="translated">POSIXクラスのそれぞれは、ASCII範囲の対応するものと全く同じです。</target>
        </trans-unit>
        <trans-unit id="be167c32ebe292b1abf425a82a9d67c142fdc9a5" translate="yes" xml:space="preserve">
          <source>Each of the argument lists above comes out of the &lt;code&gt;normalize_f&lt;/code&gt; function looking exactly the same, like this:</source>
          <target state="translated">上記の各引数リストは、次のように、まったく同じに見える &lt;code&gt;normalize_f&lt;/code&gt; 関数から取得されます。</target>
        </trans-unit>
        <trans-unit id="93679dc7d627c4c7a6a3897712645c4450ba1379" translate="yes" xml:space="preserve">
          <source>Each of the commands that produce listings of modules (&lt;code&gt;r&lt;/code&gt; , &lt;code&gt;autobundle&lt;/code&gt; , &lt;code&gt;u&lt;/code&gt; ) also return a list of the IDs of all modules within the list.</source>
          <target state="translated">モジュールのリストを生成する各コマンド（ &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;autobundle&lt;/code&gt; 、 &lt;code&gt;u&lt;/code&gt; ）も、リスト内のすべてのモジュールのIDのリストを返します。</target>
        </trans-unit>
        <trans-unit id="36a145ce6b55d2eacd4e152e8b778cb0812f1b4c" translate="yes" xml:space="preserve">
          <source>Each of the elementary pieces of regular expressions which were described before (such as &lt;code&gt;ab&lt;/code&gt; or &lt;code&gt;\Z&lt;/code&gt; ) could match at most one substring at the given position of the input string. However, in a typical regular expression these elementary pieces are combined into more complicated patterns using combining operators &lt;code&gt;ST&lt;/code&gt; , &lt;code&gt;S|T&lt;/code&gt; , &lt;code&gt;S*&lt;/code&gt; etc. (in these examples &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; are regular subexpressions).</source>
          <target state="translated">前に説明した正規表現の各基本要素（ &lt;code&gt;ab&lt;/code&gt; や &lt;code&gt;\Z&lt;/code&gt; ）は、入力文字列の特定の位置で最大1つの部分文字列に一致する可能性があります。ただし、典型的な正規表現では、これらの基本要素は、結合演算子 &lt;code&gt;ST&lt;/code&gt; 、 &lt;code&gt;S|T&lt;/code&gt; 、 &lt;code&gt;S*&lt;/code&gt; などを使用してより複雑なパターンに結合されます（これらの例では、 &lt;code&gt;S&lt;/code&gt; と &lt;code&gt;T&lt;/code&gt; は正規の部分式です）。</target>
        </trans-unit>
        <trans-unit id="c1f94498db7cafa14ac711805deae194684f4e3e" translate="yes" xml:space="preserve">
          <source>Each of the elementary pieces of regular expressions which were described before (such as &lt;code&gt;ab&lt;/code&gt; or &lt;code&gt;\Z&lt;/code&gt;) could match at most one substring at the given position of the input string. However, in a typical regular expression these elementary pieces are combined into more complicated patterns using combining operators &lt;code&gt;ST&lt;/code&gt;, &lt;code&gt;S|T&lt;/code&gt;, &lt;code&gt;S*&lt;/code&gt;</source>
          <target state="translated">前に説明した正規表現の基本部分（ &lt;code&gt;ab&lt;/code&gt; や &lt;code&gt;\Z&lt;/code&gt; ）のそれぞれは、入力文字列の指定された位置で最大1つの部分文字列に一致する可能性があります。ただし、一般的な正規表現では、これらの基本部分は、結合演算子 &lt;code&gt;ST&lt;/code&gt; 、 &lt;code&gt;S|T&lt;/code&gt; 、 &lt;code&gt;S*&lt;/code&gt; を使用してより複雑なパターンに結合されます。</target>
        </trans-unit>
        <trans-unit id="bf85de30bb2350d06139ae6bc58a79af96a26e97" translate="yes" xml:space="preserve">
          <source>Each of the following invocations of &lt;code&gt;pod2usage()&lt;/code&gt; will print a message of &quot;Syntax error.&quot; (followed by a newline) to &lt;code&gt;STDERR&lt;/code&gt; , immediately followed by just the &quot;SYNOPSIS&quot; section (also printed to &lt;code&gt;STDERR&lt;/code&gt; ) and will exit with a status of 2:</source>
          <target state="translated">以下の &lt;code&gt;pod2usage()&lt;/code&gt; の呼び出しごとに、「構文エラー」のメッセージが出力されます。（改行が続く） &lt;code&gt;STDERR&lt;/code&gt; に続き、直後に「SYNOPSIS」セクション（ &lt;code&gt;STDERR&lt;/code&gt; にも出力されます）が続き、ステータス2で終了します。</target>
        </trans-unit>
        <trans-unit id="c471e82fa0389f6962922185f6c1c022a3af5d32" translate="yes" xml:space="preserve">
          <source>Each of the following invocations of &lt;code&gt;pod2usage()&lt;/code&gt; will print a message of &quot;Syntax error.&quot; (followed by a newline) to &lt;code&gt;STDERR&lt;/code&gt;, immediately followed by just the &quot;SYNOPSIS&quot; section (also printed to &lt;code&gt;STDERR&lt;/code&gt;) and will exit with a status of 2:</source>
          <target state="translated">以下の &lt;code&gt;pod2usage()&lt;/code&gt; の呼び出しはそれぞれ、「構文エラー」のメッセージを出力します。 （改行が続く） &lt;code&gt;STDERR&lt;/code&gt; 、即座に（も印刷だけの「形式」の項に続く &lt;code&gt;STDERR&lt;/code&gt; ）と2の状態で終了します。</target>
        </trans-unit>
        <trans-unit id="da247936c8bb95b82240dfbb57e8459e5c728eb2" translate="yes" xml:space="preserve">
          <source>Each of the following invocations of &lt;code&gt;pod2usage()&lt;/code&gt; will print just the &quot;SYNOPSIS&quot; section to &lt;code&gt;STDERR&lt;/code&gt; and will exit with a status of 2:</source>
          <target state="translated">次の &lt;code&gt;pod2usage()&lt;/code&gt; の呼び出しはそれぞれ、「SYNOPSIS」セクションだけを &lt;code&gt;STDERR&lt;/code&gt; に出力し、ステータス2で終了します。</target>
        </trans-unit>
        <trans-unit id="c3bf15a510b108560bc55f9dc642118c67f04409" translate="yes" xml:space="preserve">
          <source>Each of the following invocations of &lt;code&gt;pod2usage()&lt;/code&gt; will print the &quot;SYNOPSIS&quot; section and any &quot;OPTIONS&quot; and/or &quot;ARGUMENTS&quot; sections to &lt;code&gt;STDOUT&lt;/code&gt; and will exit with a status of 1:</source>
          <target state="translated">以下の &lt;code&gt;pod2usage()&lt;/code&gt; の各呼び出しは、「SYNOPSIS」セクションと「OPTIONS」および/または「ARGUMENTS」セクションを &lt;code&gt;STDOUT&lt;/code&gt; に出力し、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="8a8549150e98bb7d0199412efeddf54defc2c85f" translate="yes" xml:space="preserve">
          <source>Each of the following invocations of &lt;code&gt;pod2usage()&lt;/code&gt; will print the entire manual page to &lt;code&gt;STDOUT&lt;/code&gt; and will exit with a status of 1:</source>
          <target state="translated">次の &lt;code&gt;pod2usage()&lt;/code&gt; の呼び出しはすべて、マニュアルページ全体を &lt;code&gt;STDOUT&lt;/code&gt; に出力し、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="159291495d574283955b7dd83a0159a4cbe57ab7" translate="yes" xml:space="preserve">
          <source>Each of the following methods will return the total number of corresponding tests if called in scalar context. If called in list context, returns the descriptions of the parsers which contain the corresponding tests (see &lt;code&gt;add&lt;/code&gt; for an explanation of description.</source>
          <target state="translated">以下の各メソッドは、スカラーコンテキストで呼び出された場合、対応するテストの総数を返します。リストコンテキストで呼び出された場合、対応するテストを含むパーサーの説明を返します（説明の説明については、 &lt;code&gt;add&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="b4805d0a6e23a882a6f379f5e1aaffac33d67fcd" translate="yes" xml:space="preserve">
          <source>Each of the functions will now be discussed in turn.</source>
          <target state="translated">これから、それぞれの機能について順番に説明していきます。</target>
        </trans-unit>
        <trans-unit id="cf8ee854b23795d139b708dbd25340dc64f25e5b" translate="yes" xml:space="preserve">
          <source>Each of the functions will return</source>
          <target state="translated">各関数は</target>
        </trans-unit>
        <trans-unit id="67d949b14cef9bc96632c4a26c1317dd5c052479" translate="yes" xml:space="preserve">
          <source>Each of the integer pack codes &lt;code&gt;sSlLqQ&lt;/code&gt; results in a fixed number of bytes, no matter where you execute your program. This may be useful for some applications, but it does not provide for a portable way to pass data structures between Perl and C programs (bound to happen when you call XS extensions or the Perl function &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt;), or when you read or write binary files. What you'll need in this case are template codes that depend on what your local C compiler compiles when you code &lt;code&gt;short&lt;/code&gt; or &lt;code&gt;unsigned long&lt;/code&gt; , for instance. These codes and their corresponding byte lengths are shown in the table below. Since the C standard leaves much leeway with respect to the relative sizes of these data types, actual values may vary, and that's why the values are given as expressions in C and Perl. (If you'd like to use values from &lt;code&gt;%Config&lt;/code&gt; in your program you have to import it with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; .)</source>
          <target state="translated">整数パックコード &lt;code&gt;sSlLqQ&lt;/code&gt; のそれぞれは、プログラムを実行する場所に関係なく、固定バイト数になります。これは一部のアプリケーションでは役立つかもしれませんが、PerlとCプログラム間でデータ構造を渡すためのポータブルな方法を提供していません（XS拡張機能またはPerl関数 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; を呼び出すと発生します）、またはバイナリファイルを読み書きするとき。この場合に必要なのは、 &lt;code&gt;short&lt;/code&gt; または &lt;code&gt;unsigned long&lt;/code&gt; をコーディングするときにローカルCコンパイラがコンパイルする内容に依存するテンプレートコードです。、 例えば。これらのコードとそれに対応するバイト長を以下の表に示します。 C標準では、これらのデータ型の相対的なサイズに関してかなりの余裕があるため、実際の値は異なる場合があり、そのため、値はCおよびPerlで式として指定されます。 （あなたがからの値を使用したい場合は &lt;code&gt;%Config&lt;/code&gt; ]をあなたのプログラムにあなたがそれをインポートする必要が &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="6060e81492ddf46249708e305af675d2cd8e4300" translate="yes" xml:space="preserve">
          <source>Each of the integer pack codes &lt;code&gt;sSlLqQ&lt;/code&gt; results in a fixed number of bytes, no matter where you execute your program. This may be useful for some applications, but it does not provide for a portable way to pass data structures between Perl and C programs (bound to happen when you call XS extensions or the Perl function &lt;code&gt;syscall&lt;/code&gt;), or when you read or write binary files. What you'll need in this case are template codes that depend on what your local C compiler compiles when you code &lt;code&gt;short&lt;/code&gt; or &lt;code&gt;unsigned long&lt;/code&gt;, for instance. These codes and their corresponding byte lengths are shown in the table below. Since the C standard leaves much leeway with respect to the relative sizes of these data types, actual values may vary, and that's why the values are given as expressions in C and Perl. (If you'd like to use values from &lt;code&gt;%Config&lt;/code&gt; in your program you have to import it with &lt;code&gt;use Config&lt;/code&gt;.)</source>
          <target state="translated">各整数パックコード &lt;code&gt;sSlLqQ&lt;/code&gt; は、プログラムの実行場所に関係なく、固定バイト数になります。これは一部のアプリケーションでは役立つ場合がありますが、PerlプログラムとCプログラム間でデータ構造を渡すための移植可能な方法（XS拡張機能またはPerl関数 &lt;code&gt;syscall&lt;/code&gt; を呼び出すときに発生するはずです）、またはバイナリファイルの読み取りまたは書き込みを提供しません。 。この場合に必要なのは、 &lt;code&gt;short&lt;/code&gt; または &lt;code&gt;unsigned long&lt;/code&gt; をコーディングするときにローカルCコンパイラがコンパイルする内容に依存するテンプレートコードです。、 例えば。これらのコードとそれに対応するバイト長を次の表に示します。 C標準では、これらのデータ型の相対的なサイズに関してかなりの余裕があるため、実際の値は異なる場合があります。そのため、値はCおよびPerlで式として指定されます。 （プログラムで &lt;code&gt;%Config&lt;/code&gt; の値を使用する場合は、 &lt;code&gt;use Config&lt;/code&gt; を使用してインポートする必要があります。）</target>
        </trans-unit>
        <trans-unit id="35d0d0049982558d7e176e2f3ab3ea596bc6e428" translate="yes" xml:space="preserve">
          <source>Each of the methods below (except config(), accuracy() and precision()) accepts three additional parameters. These arguments &lt;code&gt;$A&lt;/code&gt; , &lt;code&gt;$P&lt;/code&gt; and &lt;code&gt;$R&lt;/code&gt; are &lt;code&gt;accuracy&lt;/code&gt; , &lt;code&gt;precision&lt;/code&gt; and &lt;code&gt;round_mode&lt;/code&gt; . Please see the section about &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;ACCURACY and PRECISION&lt;/a&gt; for more information.</source>
          <target state="translated">以下の各メソッド（config（）、accuracy（）およびprecision（）を除く）は、3つの追加パラメーターを受け入れます。これらの引数 &lt;code&gt;$A&lt;/code&gt; 、 &lt;code&gt;$P&lt;/code&gt; 、および &lt;code&gt;$R&lt;/code&gt; は、 &lt;code&gt;accuracy&lt;/code&gt; 、 &lt;code&gt;precision&lt;/code&gt; 、および &lt;code&gt;round_mode&lt;/code&gt; です。詳細については、&lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;精度と精度&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2d2b46938dbf24928125c2dd236a1a486381e417" translate="yes" xml:space="preserve">
          <source>Each of the methods below (except config(), accuracy() and precision()) accepts three additional parameters. These arguments &lt;code&gt;$A&lt;/code&gt;, &lt;code&gt;$P&lt;/code&gt; and &lt;code&gt;$R&lt;/code&gt; are &lt;code&gt;accuracy&lt;/code&gt;, &lt;code&gt;precision&lt;/code&gt; and &lt;code&gt;round_mode&lt;/code&gt;. Please see the section about &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;&quot;ACCURACY and PRECISION&quot;&lt;/a&gt; for more information.</source>
          <target state="translated">以下の各メソッド（config（）、accuracy（）、precision（）を除く）は、3つの追加パラメーターを受け入れます。これらの引数 &lt;code&gt;$A&lt;/code&gt; 、 &lt;code&gt;$P&lt;/code&gt; 、および &lt;code&gt;$R&lt;/code&gt; は、 &lt;code&gt;accuracy&lt;/code&gt; 、 &lt;code&gt;precision&lt;/code&gt; 、および &lt;code&gt;round_mode&lt;/code&gt; です。詳細については、&lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;「精度と精度」&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="69bb55af40d1c4ccf668c4ee509cae7b3650aeb0" translate="yes" xml:space="preserve">
          <source>Each of the methods works identically, and is used to install (or uninstall) a single DBM Filter. The only difference between them is the place that the filter is installed.</source>
          <target state="translated">それぞれの方法は同一のものを使用しており、DBMフィルター1枚をインストール(またはアンインストール)するために使用します。両者の違いは、フィルターをインストールする場所だけです。</target>
        </trans-unit>
        <trans-unit id="d70d3afe0fc2fcaf924f4e6c71f92047845119e3" translate="yes" xml:space="preserve">
          <source>Each of the targets is created only once (but see &lt;a href=&quot;#Scratchpads-and-recursion&quot;&gt;&quot;Scratchpads and recursion&quot;&lt;/a&gt; below), and when an opcode needs to put an integer, a double, or a string on stack, it just sets the corresponding parts of its</source>
          <target state="translated">各ターゲットは1回だけ作成され（ただし、以下の&lt;a href=&quot;#Scratchpads-and-recursion&quot;&gt;「スクラッチパッドと再帰」を&lt;/a&gt;参照）、オペコードが整数、倍精度浮動小数点数、または文字列をスタックに配置する必要がある場合は、その対応する部分を設定するだけです。</target>
        </trans-unit>
        <trans-unit id="deb52f34c0e7c886d38c077a6693f8fac31c72b2" translate="yes" xml:space="preserve">
          <source>Each of the targets is created only once (but see &lt;a href=&quot;#Scratchpads-and-recursion&quot;&gt;Scratchpads and recursion&lt;/a&gt; below), and when an opcode needs to put an integer, a double, or a string on stack, it just sets the corresponding parts of its</source>
          <target state="translated">各ターゲットは1回だけ作成されます（ただし、以下の&lt;a href=&quot;#Scratchpads-and-recursion&quot;&gt;スクラッチパッドと再帰を&lt;/a&gt;参照）。オペコードが整数、倍精度浮動小数点数、または文字列をスタックに配置する必要がある場合、対応する部分を設定するだけです。</target>
        </trans-unit>
        <trans-unit id="61645526a5f8cc5b5b38c365e573e3b9ce2a363a" translate="yes" xml:space="preserve">
          <source>Each of these areas will be discussed in the following sections.</source>
          <target state="translated">これらの各領域については、以下の項目で説明します。</target>
        </trans-unit>
        <trans-unit id="4a7e0927366cb3008e3cb582f1225e023afb76ec" translate="yes" xml:space="preserve">
          <source>Each of these functions are called without arguments and return the absolute path of the current working directory.</source>
          <target state="translated">これらの関数はそれぞれ引数なしで呼び出され、現在の作業ディレクトリの絶対パスを返します。</target>
        </trans-unit>
        <trans-unit id="fb6c26bfd690fb609fa0a362b968489c94f785d7" translate="yes" xml:space="preserve">
          <source>Each of these input objects are described in further detail in the sections which follow.</source>
          <target state="translated">これらの入力オブジェクトのそれぞれについては、以下のセクションでさらに詳細に説明します。</target>
        </trans-unit>
        <trans-unit id="cd0ac943df3c5c0919c257e9e2ba53e934e28e43" translate="yes" xml:space="preserve">
          <source>Each of these methods may modify the first input argument, except</source>
          <target state="translated">これらのメソッドのそれぞれは、最初の入力引数を変更することができます。</target>
        </trans-unit>
        <trans-unit id="94636e821462a702e9dcf821156451ce10166f58" translate="yes" xml:space="preserve">
          <source>Each of these methods may modify the first input argument.</source>
          <target state="translated">これらの各メソッドは、最初の入力引数を変更することができます。</target>
        </trans-unit>
        <trans-unit id="1fd6321d309f67bf764c8af9cff581fae0812fa5" translate="yes" xml:space="preserve">
          <source>Each of these nodes represents an op, a fundamental operation inside the Perl core. The code which implements each operation can be found in the</source>
          <target state="translated">これらのノードはそれぞれ op を表し、Perl コア内の基本的な操作を表しています。各操作を実装したコードは</target>
        </trans-unit>
        <trans-unit id="eb5de442d3b4d44516edecf88d3338777e703e96" translate="yes" xml:space="preserve">
          <source>Each of these objects may be replaced by calling one of these parser methods:</source>
          <target state="translated">これらのオブジェクトのそれぞれは、これらのパーサメソッドのいずれかを呼び出すことで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="33d6b2a3cedc47a8c8496247740303b046f066c7" translate="yes" xml:space="preserve">
          <source>Each of these options is optional; you can include some, all, or none of them.</source>
          <target state="translated">これらのオプションはそれぞれ任意です。</target>
        </trans-unit>
        <trans-unit id="b15a1940399791f7b94602b4451362ab540da911" translate="yes" xml:space="preserve">
          <source>Each of these routines accepts a file specification in either VMS or Unix syntax, and returns the converted file specification, or &lt;code&gt;undef&lt;/code&gt; if an error occurs. The conversions are, for the most part, simply string manipulations; the routines do not check the details of syntax (e.g. that only legal characters are used). There is one exception: when running under VMS, conversions from VMS syntax use the $PARSE service to expand specifications, so illegal syntax, or a relative directory specification which extends above the tope of the current directory path (e.g [---.foo] when in dev:[dir.sub]) will cause errors. In general, any legal file specification will be converted properly, but garbage input tends to produce garbage output.</source>
          <target state="translated">これらの各ルーチンは、VMSまたはUnix構文のいずれかのファイル仕様を受け入れ、変換されたファイル仕様を返すか、エラーが発生した場合は &lt;code&gt;undef&lt;/code&gt; を返します。変換は、ほとんどの場合、単なる文字列操作です。ルーチンは構文の詳細をチェックしません（たとえば、有効な文字のみが使用されます）。例外が1つあります。VMSで実行する場合、VMS構文からの変換では、$ PARSEサービスを使用して仕様を拡張するため、不正な構文、または現在のディレクトリパスのトップを超える相対ディレクトリ仕様（例：[---。foo ] dev：[dir.sub]）の場合、エラーが発生します。一般に、正当なファイル仕様は適切に変換されますが、ガベージ入力はガベージ出力を生成する傾向があります。</target>
        </trans-unit>
        <trans-unit id="86b7bd343bf185137324ab08afba721e66b470a2" translate="yes" xml:space="preserve">
          <source>Each of these routines is prototyped as taking a single scalar argument, so you can use them as unary operators in complex expressions (as long as you don't use the &lt;code&gt;&amp;amp;&lt;/code&gt; form of subroutine call, which bypasses prototype checking).</source>
          <target state="translated">これらの各ルーチンは、単一のスカラー引数を取るものとしてプロトタイプ化されているため、複雑な式で単項演算子として使用できます（プロトタイプチェックをバイパスする &lt;code&gt;&amp;amp;&lt;/code&gt; 形式のサブルーチン呼び出しを使用しない場合）。</target>
        </trans-unit>
        <trans-unit id="33fde8ca981b648a0a7df0eccad95608e9bb268d" translate="yes" xml:space="preserve">
          <source>Each op is preceded by two pointers: one points to the next op in the slab, and the other points to the slab that owns it. The next-op pointer is needed so that Perl can iterate over a slab and free all its ops. (Op structures are of different sizes, so the slab's ops can't merely be treated as a dense array.) The slab pointer is needed for accessing a reference count on the slab: when the last op on a slab is freed, the slab itself is freed.</source>
          <target state="translated">各オペの前には2つのポインタがあります。1つはスラブ内の次のオペを指し、もう1つはそれを所有するスラブを指します。次のオペのポインタは、Perlがスラブを反復処理してそのオペをすべて解放するために必要です。(op構造は異なるサイズのため、スラブのopを単に密な配列として扱うことはできません)。スラブの最後のオペが解放されると、スラブ自体が解放されます。</target>
        </trans-unit>
        <trans-unit id="d1f0b67ca5c809a794efbf846b5f11a39a783c34" translate="yes" xml:space="preserve">
          <source>Each operand is considered in a modified scalar context, the modification being that array and hash variables are passed by reference to the operator, which implicitly dereferences them. Both elements of each pair are the same:</source>
          <target state="translated">各オペランドは,スカラコンテキストを変更したものとみなされます.変更点は,配列とハッシュ変数が演算子への参照によって渡され,暗黙的にそれらを参照解除するということです.各ペアの両方の要素は同じです.</target>
        </trans-unit>
        <trans-unit id="76254c26642feac52117b7e65ad2b643499a9d47" translate="yes" xml:space="preserve">
          <source>Each operator has both a terse name (its opname) and a more verbose or recognisable descriptive name. The opdesc function can be used to return a list of descriptions for a list of operators.</source>
          <target state="translated">各演算子には、簡潔な名前 (opname)と、より冗長な、あるいは認識しやすい記述名の両方があります。opdesc関数を使用すると、演算子のリストに対する記述のリストを返すことができます。</target>
        </trans-unit>
        <trans-unit id="0ffccbf8d7d785427858064bfe414c9a343b8478" translate="yes" xml:space="preserve">
          <source>Each option specifier consists of two parts: the name specification and the argument specification.</source>
          <target state="translated">各オプション指定子は、名前指定と引数指定の2つの部分から構成されています。</target>
        </trans-unit>
        <trans-unit id="49dbe9df44df46422e8ed79c89a972f7e0a049b6" translate="yes" xml:space="preserve">
          <source>Each package contains a special array called &lt;code&gt;@ISA&lt;/code&gt; . The &lt;code&gt;@ISA&lt;/code&gt; array contains a list of that class's parent classes, if any. This array is examined when Perl does method resolution, which we will cover later.</source>
          <target state="translated">各パッケージには、 &lt;code&gt;@ISA&lt;/code&gt; と呼ばれる特別な配列が含まれています。 &lt;code&gt;@ISA&lt;/code&gt; のいずれかの場合、配列は、そのクラスの親クラスのリストが含まれています。この配列は、Perlがメソッド解決を行うときに検査されます。これについては後で説明します。</target>
        </trans-unit>
        <trans-unit id="ddf57d8082b4349ec2c54b6a8bdc282825375550" translate="yes" xml:space="preserve">
          <source>Each package contains a special array called &lt;code&gt;@ISA&lt;/code&gt; which contains a list of that class's parent classes, if any. This array is simply a list of scalars, each of which is a string that corresponds to a package name. The array is examined when Perl does method resolution, which is covered in &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">各パッケージには、 &lt;code&gt;@ISA&lt;/code&gt; という特別な配列が含まれています。この配列には、そのクラスの親クラス（存在する場合）のリストが含まれています。この配列は単なるスカラーのリストであり、各スカラーはパッケージ名に対応する文字列です。配列は、Perlがメソッド解決を行うときに調べられます。これは&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="9236fa90d77c1443c1fcc30f0eb2e90c48b3b452" translate="yes" xml:space="preserve">
          <source>Each package contains a special array called &lt;code&gt;@ISA&lt;/code&gt;. The &lt;code&gt;@ISA&lt;/code&gt; array contains a list of that class's parent classes, if any. This array is examined when Perl does method resolution, which we will cover later.</source>
          <target state="translated">各パッケージには、 &lt;code&gt;@ISA&lt;/code&gt; と呼ばれる特別な配列が含まれています。 &lt;code&gt;@ISA&lt;/code&gt; のいずれかの場合、配列は、そのクラスの親クラスのリストが含まれています。この配列は、Perlがメソッド解決を行うときに調べられます。これについては後で説明します。</target>
        </trans-unit>
        <trans-unit id="fd56746947dceb1b1ebf83666e64df3d893f0573" translate="yes" xml:space="preserve">
          <source>Each pair is an array reference with two elements - namely the</source>
          <target state="translated">各ペアは、2つの要素、すなわち</target>
        </trans-unit>
        <trans-unit id="79339b4554cd8ab3b93700df12bacff7c6d9a530" translate="yes" xml:space="preserve">
          <source>Each pathname that is a directory that matches the pattern has a slash appended.</source>
          <target state="translated">パターンに一致するディレクトリである各パス名にはスラッシュが付加されています。</target>
        </trans-unit>
        <trans-unit id="20b56d27482026f6b453dfe18f7f652ebd744ed0" translate="yes" xml:space="preserve">
          <source>Each plugin should register itself by providing the following structure</source>
          <target state="translated">各プラグインは、以下の構造を提供することで自分自身を登録しなければなりません。</target>
        </trans-unit>
        <trans-unit id="4bc675eeb53212d68aff2215974b513fa9d0ff3e" translate="yes" xml:space="preserve">
          <source>Each programmer will, of course, have his or her own preferences in regards to formatting, but there are some general guidelines that will make your programs easier to read, understand, and maintain.</source>
          <target state="translated">もちろん、各プログラマはフォーマットに関して自分の好みを持っていますが、あなたのプログラムを読みやすく、理解しやすく、メンテナンスしやすくするための一般的なガイドラインがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="e2d7e5e3cbcd85e0f15e433073f3c09c16649807" translate="yes" xml:space="preserve">
          <source>Each pseudo-process maintains its own virtual environment. Modifications to %ENV affect the virtual environment, and are only visible within that pseudo-process, and in any processes (or pseudo-processes) launched from it.</source>
          <target state="translated">各疑似プロセスは、それ自身の仮想環境を維持します。ENV への変更は仮想環境に影響を与え、その疑似プロセス内と、そこから起動されたプロセス (または疑似プロセス)内でのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="25a97b930031adadf111787667688ded94505539" translate="yes" xml:space="preserve">
          <source>Each pseudo-process maintains its own virtual idea of the current directory. Modifications to the current directory using chdir() are only visible within that pseudo-process, and in any processes (or pseudo-processes) launched from it. All file and directory accesses from the pseudo-process will correctly map the virtual working directory to the real working directory appropriately.</source>
          <target state="translated">各疑似プロセスは、カレントディレクトリの仮想的なアイデアを保持します。chdir()を使用したカレントディレクトリへの変更は、その疑似プロセス内でのみ、そして疑似プロセスから起動されたプロセス(または疑似プロセス)内でのみ表示されます。疑似プロセスからのすべてのファイルやディレクトリへのアクセスは、仮想の作業ディレクトリを実際の作業ディレクトリに正しくマッピングします。</target>
        </trans-unit>
        <trans-unit id="8f4f1268e7fb63f76b0f62897f0f8014b138b792" translate="yes" xml:space="preserve">
          <source>Each result bit is based on the least-significant bit of the corresponding input character, i.e., on &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord($char)%2&lt;/a&gt;&lt;/code&gt;. In particular, characters &lt;code&gt;&quot;0&quot;&lt;/code&gt; and &lt;code&gt;&quot;1&quot;&lt;/code&gt; generate bits 0 and 1, as do characters &lt;code&gt;&quot;\000&quot;&lt;/code&gt; and &lt;code&gt;&quot;\001&quot;&lt;/code&gt; .</source>
          <target state="translated">各結果ビットは、対応する入力文字の最下位ビット、つまり &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord($char)%2&lt;/a&gt;&lt;/code&gt; 基づいています。特に、文字 &lt;code&gt;&quot;0&quot;&lt;/code&gt; と &lt;code&gt;&quot;1&quot;&lt;/code&gt; はビット0と1を生成し、文字 &lt;code&gt;&quot;\000&quot;&lt;/code&gt; と &lt;code&gt;&quot;\001&quot;&lt;/code&gt; 同様です。</target>
        </trans-unit>
        <trans-unit id="abf39ff7c44d3c8c17f0be2056a001c031f6f08e" translate="yes" xml:space="preserve">
          <source>Each result bit is based on the least-significant bit of the corresponding input character, i.e., on &lt;code&gt;&lt;a href=&quot;ord&quot;&gt;ord($char)%2&lt;/a&gt;&lt;/code&gt;. In particular, characters &lt;code&gt;&quot;0&quot;&lt;/code&gt; and &lt;code&gt;&quot;1&quot;&lt;/code&gt; generate bits 0 and 1, as do characters &lt;code&gt;&quot;\000&quot;&lt;/code&gt; and &lt;code&gt;&quot;\001&quot;&lt;/code&gt; .</source>
          <target state="translated">各結果ビットは、対応する入力文字の最下位ビット、つまり &lt;code&gt;&lt;a href=&quot;ord&quot;&gt;ord($char)%2&lt;/a&gt;&lt;/code&gt; 基づいています。特に、文字 &lt;code&gt;&quot;0&quot;&lt;/code&gt; と &lt;code&gt;&quot;1&quot;&lt;/code&gt; はビット0と1を生成し、文字 &lt;code&gt;&quot;\000&quot;&lt;/code&gt; と &lt;code&gt;&quot;\001&quot;&lt;/code&gt; 同様です。</target>
        </trans-unit>
        <trans-unit id="f1993b5736422a8ea772061042ca6c62dead2e8c" translate="yes" xml:space="preserve">
          <source>Each result bit is based on the least-significant bit of the corresponding input character, i.e., on &lt;code&gt;ord($char)%2&lt;/code&gt;. In particular, characters &lt;code&gt;&quot;0&quot;&lt;/code&gt; and &lt;code&gt;&quot;1&quot;&lt;/code&gt; generate bits 0 and 1, as do characters &lt;code&gt;&quot;\000&quot;&lt;/code&gt; and &lt;code&gt;&quot;\001&quot;&lt;/code&gt;.</source>
          <target state="translated">各結果ビットは、対応する入力文字の最下位ビット、つまり &lt;code&gt;ord($char)%2&lt;/code&gt; 基づいています。特に、文字 &lt;code&gt;&quot;0&quot;&lt;/code&gt; と &lt;code&gt;&quot;1&quot;&lt;/code&gt; はビット0と1を生成し、文字 &lt;code&gt;&quot;\000&quot;&lt;/code&gt; と &lt;code&gt;&quot;\001&quot;&lt;/code&gt; 同様です。</target>
        </trans-unit>
        <trans-unit id="1801d81c7323468b4de78bc480016b6092b96d8e" translate="yes" xml:space="preserve">
          <source>Each result fetched is a result object of a different type. There are common methods to each result object and different types may have methods unique to their type. Sometimes a type method may be overridden in a subclass, but its use is guaranteed to be identical.</source>
          <target state="translated">フェッチされた各結果は、異なるタイプの結果オブジェクトです。各結果オブジェクトには共通のメソッドがあり、異なる型にはその型に固有のメソッドがある場合があります。場合によっては、型のメソッドがサブクラスでオーバーライドされることもありますが、その使用は同一であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="4e19bf2bd96e365232fc6a017a9d4e2f9f8f058b" translate="yes" xml:space="preserve">
          <source>Each result returned is a &lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP::Parser::Result&lt;/a&gt; subclass, referred to as</source>
          <target state="translated">返される各結果は、&lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="fca0f4c2c0d0f6d5b588e090e9018c1d20041904" translate="yes" xml:space="preserve">
          <source>Each result returned is a &lt;a href=&quot;parser/result&quot;&gt;TAP::Parser::Result&lt;/a&gt; subclass, referred to as</source>
          <target state="translated">返される各結果は、&lt;a href=&quot;parser/result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;サブクラスであり、</target>
        </trans-unit>
        <trans-unit id="ce5b6f7b029d0c88c7f3bdd0a0914e98b5dca329" translate="yes" xml:space="preserve">
          <source>Each result returned is a subclass of &lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP::Parser::Result&lt;/a&gt;. See that module and related classes for more information on how to use them.</source>
          <target state="translated">返される各結果は、&lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP :: Parser :: Resultの&lt;/a&gt;サブクラスです。それらの使用方法の詳細については、そのモジュールと関連クラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0a1f92895a8d5d3bca2a476a0ec322b95e7589a" translate="yes" xml:space="preserve">
          <source>Each result returned is a subclass of &lt;a href=&quot;parser/result&quot;&gt;TAP::Parser::Result&lt;/a&gt;. See that module and related classes for more information on how to use them.</source>
          <target state="translated">返される各結果は、&lt;a href=&quot;parser/result&quot;&gt;TAP :: Parser :: Resultの&lt;/a&gt;サブクラスです。それらの使用方法の詳細については、そのモジュールと関連クラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="8f5ef808a290d77bcb78c1a52baf58c7827e311b" translate="yes" xml:space="preserve">
          <source>Each scalar &lt;code&gt;${&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; contains &lt;code&gt;&quot;_&amp;lt;$filename&quot;&lt;/code&gt; . This is also the case for evaluated strings that contain subroutines, or which are currently being executed. The $filename for &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed strings looks like &lt;code&gt;(&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 34)&lt;/code&gt; .</source>
          <target state="translated">各スカラー &lt;code&gt;${&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; は &lt;code&gt;&quot;_&amp;lt;$filename&quot;&lt;/code&gt; が含まれます。これは、サブルーチンを含む、または現在実行中の評価された文字列の場合にも当てはまります。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 文字列の$ filenameは &lt;code&gt;(&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; 34)&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="ccc94bfc366f53a70874613dffa08986828d80a8" translate="yes" xml:space="preserve">
          <source>Each scalar &lt;code&gt;${&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; contains &lt;code&gt;&quot;_&amp;lt;$filename&quot;&lt;/code&gt;. This is also the case for evaluated strings that contain subroutines, or which are currently being executed. The $filename for &lt;code&gt;eval&lt;/code&gt;ed strings looks like &lt;code&gt;(eval 34)&lt;/code&gt;.</source>
          <target state="translated">各スカラー &lt;code&gt;${&quot;_&amp;lt;$filename&quot;}&lt;/code&gt; は &lt;code&gt;&quot;_&amp;lt;$filename&quot;&lt;/code&gt; が含まれています。これは、サブルーチンを含む、または現在実行されている評価済み文字列にも当てはまります。 &lt;code&gt;eval&lt;/code&gt; 文字列の$ filenameは &lt;code&gt;(eval 34)&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="0b759249474717644d66332dcc04eba32c6b818f" translate="yes" xml:space="preserve">
          <source>Each semaphore has a counter attached to it. By default, semaphores are created with the counter set to one, &lt;code&gt;down()&lt;/code&gt; decrements the counter by one, and &lt;code&gt;up()&lt;/code&gt; increments by one. However, we can override any or all of these defaults simply by passing in different values:</source>
          <target state="translated">各セマフォにはカウンタが付いています。デフォルトでは、セマフォはカウンターを1に設定して作成され、 &lt;code&gt;down()&lt;/code&gt; はカウンターを1ずつ減らし、 &lt;code&gt;up()&lt;/code&gt; は1ずつ増やします。ただし、異なる値を渡すだけで、これらのデフォルトの一部またはすべてを上書きできます。</target>
        </trans-unit>
        <trans-unit id="9e3598640cb6381c253bcf070a1e62dc7e9d0823" translate="yes" xml:space="preserve">
          <source>Each step is of the form &lt;code&gt;n &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;&lt;/code&gt;, with &lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt; the part of the string matched and &lt;code&gt;&amp;lt;y&amp;gt;&lt;/code&gt; the part not yet matched. The &lt;code&gt;|  1:  STAR&lt;/code&gt; says that Perl is at line number 1 in the compilation list above. See &lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;Debugging Regular Expressions in perldebguts&lt;/a&gt; for much more detail.</source>
          <target state="translated">各ステップの形式は &lt;code&gt;n &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;&lt;/code&gt; で、 &lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt; はストリングの一部が一致し、 &lt;code&gt;&amp;lt;y&amp;gt;&lt;/code&gt; はまだ一致していない部分です。 &lt;code&gt;| 1: STAR&lt;/code&gt; は、Perlが上記のコンパイルリストの行番号1にあると述べています。詳細について&lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;は、perldebguts&lt;/a&gt;での正規表現のデバッグを参照してください。</target>
        </trans-unit>
        <trans-unit id="621b92ce1167d60ce7eabc3bf97a2ce373df3b42" translate="yes" xml:space="preserve">
          <source>Each step is of the form &lt;code&gt;n &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;&lt;/code&gt;, with &lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt; the part of the string matched and &lt;code&gt;&amp;lt;y&amp;gt;&lt;/code&gt; the part not yet matched. The &lt;code&gt;| 1: STAR&lt;/code&gt; says that Perl is at line number 1 in the compilation list above. See &lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;&quot;Debugging Regular Expressions&quot; in perldebguts&lt;/a&gt; for much more detail.</source>
          <target state="translated">各ステップの形式は &lt;code&gt;n &amp;lt;x&amp;gt; &amp;lt;y&amp;gt;&lt;/code&gt; で、 &lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt; は文字列の一部が一致し、 &lt;code&gt;&amp;lt;y&amp;gt;&lt;/code&gt; はまだ一致していません。 &lt;code&gt;| 1: STAR&lt;/code&gt; は、Perlが上記のコンパイルリストの1行目にあると言っています。詳細について&lt;a href=&quot;perldebguts#Debugging-Regular-Expressions&quot;&gt;は、perldebgutsの「正規表現のデバッグ」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f223fa7c50954c6826a1fdb18aaf28328cfda343" translate="yes" xml:space="preserve">
          <source>Each test can be given a little descriptive name as the second argument to &lt;code&gt;ok()&lt;/code&gt;.</source>
          <target state="translated">各テストには、 &lt;code&gt;ok()&lt;/code&gt; の2番目の引数として少しわかりやすい名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="4bdc8ff98493a9f7ade9d6296926319855358f97" translate="yes" xml:space="preserve">
          <source>Each thread (except the main thread) is started using the C locale. The main thread is started like all other Perl programs; see &lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot; in perllocale&lt;/a&gt;. You can switch locales in any thread as often as you like.</source>
          <target state="translated">各スレッド（メインスレッドを除く）は、Cロケールを使用して開始されます。メインスレッドは他のすべてのPerlプログラムと同じように開始されます。&lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;perllocaleの「ENVIRONMENT」を&lt;/a&gt;参照してください。任意のスレッドでロケールを何度でも切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="e3defe21495aad5ab5041830fd4fe29198a67142" translate="yes" xml:space="preserve">
          <source>Each time &lt;code&gt;$finder-&amp;gt;next&lt;/code&gt; is called, the iterator returns one of two possible values:</source>
          <target state="translated">たびに &lt;code&gt;$finder-&amp;gt;next&lt;/code&gt; 呼び出されると、反復子は、2つの値のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="54bbe29b947a5618329ec98194ec80f8aabe46b6" translate="yes" xml:space="preserve">
          <source>Each type of section can appear an arbitrary number of times and does not have to appear at all. For example, a typemap may commonly lack &lt;code&gt;INPUT&lt;/code&gt; and &lt;code&gt;OUTPUT&lt;/code&gt; sections if all it needs to do is associate additional C types with core XS types like T_PTROBJ. Lines that start with a hash &lt;code&gt;#&lt;/code&gt; are considered comments and ignored in the &lt;code&gt;TYPEMAP&lt;/code&gt; section, but are considered significant in &lt;code&gt;INPUT&lt;/code&gt; and &lt;code&gt;OUTPUT&lt;/code&gt; . Blank lines are generally ignored.</source>
          <target state="translated">セクションの各タイプは、任意の回数表示でき、まったく表示する必要はありません。たとえば、追加のC型をT_PTROBJのようなコアXS型に関連付ける必要がある場合、タイプマップには一般に &lt;code&gt;INPUT&lt;/code&gt; セクションと &lt;code&gt;OUTPUT&lt;/code&gt; セクションがない場合があります。ハッシュ &lt;code&gt;#&lt;/code&gt; で始まる行はコメントと見なされ、 &lt;code&gt;TYPEMAP&lt;/code&gt; セクションでは無視されますが、 &lt;code&gt;INPUT&lt;/code&gt; および &lt;code&gt;OUTPUT&lt;/code&gt; では重要と見なされます。空白行は通常無視されます。</target>
        </trans-unit>
        <trans-unit id="b8ab41b525aa7b7c38e4e3da5cf8193e961a308c" translate="yes" xml:space="preserve">
          <source>Each type of section can appear an arbitrary number of times and does not have to appear at all. For example, a typemap may commonly lack &lt;code&gt;INPUT&lt;/code&gt; and &lt;code&gt;OUTPUT&lt;/code&gt; sections if all it needs to do is associate additional C types with core XS types like T_PTROBJ. Lines that start with a hash &lt;code&gt;#&lt;/code&gt; are considered comments and ignored in the &lt;code&gt;TYPEMAP&lt;/code&gt; section, but are considered significant in &lt;code&gt;INPUT&lt;/code&gt; and &lt;code&gt;OUTPUT&lt;/code&gt;. Blank lines are generally ignored.</source>
          <target state="translated">各タイプのセクションは任意の回数表示でき、まったく表示する必要はありません。たとえば、追加のCタイプをT_PTROBJなどのコアXSタイプに関連付けるだけでよい場合、タイプマップには通常、 &lt;code&gt;INPUT&lt;/code&gt; セクションと &lt;code&gt;OUTPUT&lt;/code&gt; セクションがない場合があります。ハッシュ &lt;code&gt;#&lt;/code&gt; で始まる行はコメントと見なされ、 &lt;code&gt;TYPEMAP&lt;/code&gt; セクションでは無視されますが、 &lt;code&gt;INPUT&lt;/code&gt; と &lt;code&gt;OUTPUT&lt;/code&gt; では重要と見なされます。空白行は通常無視されます。</target>
        </trans-unit>
        <trans-unit id="c99826defe1aa3e0e7dfa632ce9b50c12211fd46" translate="yes" xml:space="preserve">
          <source>Each typedef has specific routines that manipulate the various data types.</source>
          <target state="translated">各typedefには、様々なデータ型を操作する特定のルーチンがあります。</target>
        </trans-unit>
        <trans-unit id="a786e808038f24779f10721b5785e1d471731d02" translate="yes" xml:space="preserve">
          <source>Each value in the results list will be a hash reference containing the following fields:</source>
          <target state="translated">結果リストの各値は、以下のフィールドを含むハッシュ参照となります。</target>
        </trans-unit>
        <trans-unit id="d6fa3b1f2df46de4d0da0473d7f7df5be8fdd538" translate="yes" xml:space="preserve">
          <source>Each version of Perl comes with the documentation that was current at the time of release. This poses a problem for content such as book lists. There are probably very nice books published after this list was included in your Perl release, and you can check the latest released version at &lt;a href=&quot;http://perldoc.perl.org/perlbook.html&quot;&gt;http://perldoc.perl.org/perlbook.html&lt;/a&gt; .</source>
          <target state="translated">Perlの各バージョンには、リリース時の最新のドキュメントが付属しています。これは、本のリストなどのコンテンツに問題を引き起こします。このリストがあなたのPerlリリースに含まれた後に発行された非常に素晴らしい本がおそらくあります、そしてあなたは&lt;a href=&quot;http://perldoc.perl.org/perlbook.html&quot;&gt;http://perldoc.perl.org/perlbook.htmlで&lt;/a&gt;最新リリースされたバージョンをチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="a017204ca793ea63195213655418d18b5e46cf36" translate="yes" xml:space="preserve">
          <source>Earlier Mac OS X releases (10.2 &quot;Jaguar&quot; and older) did not include a completely thread-safe libc, so threading is not fully supported. Also, earlier releases included a buggy libdb, so some of the DB_File tests are known to fail on those releases.</source>
          <target state="translated">以前の Mac OS X リリース (10.2 &quot;Jaguar&quot; およびそれ以前)では、完全にスレッドセーフな libc が含まれていなかったため、スレッド処理は完全にサポートされていません。また、以前のリリースにはバグの多い libdb が含まれていたため、 DB_File テストのいくつかはそれらのリリースで失敗することが知られています。</target>
        </trans-unit>
        <trans-unit id="a252186ae05a758597f2268019d7fe33e7216333" translate="yes" xml:space="preserve">
          <source>Earlier releases caveats</source>
          <target state="translated">先行リリースの注意事項</target>
        </trans-unit>
        <trans-unit id="8144bf937e246b0c3995f39e74e8340a0ff57aa1" translate="yes" xml:space="preserve">
          <source>Earlier than Perl 5.10, you have a bit of work to do. You want to avoid compiling a regular expression every time you want to match it. In this example, perl must recompile the regular expression for every iteration of the &lt;code&gt;foreach&lt;/code&gt; loop since it has no way to know what &lt;code&gt;$pattern&lt;/code&gt; will be:</source>
          <target state="translated">Perl 5.10より前のバージョンでは、やることが少しあります。一致させるたびに正規表現をコンパイルしないようにします。この例では、 &lt;code&gt;$pattern&lt;/code&gt; が何であるかを知る方法がないため、perlは &lt;code&gt;foreach&lt;/code&gt; ループのすべての反復で正規表現を再コンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="2412eca1a81df7ff0f1d8fd57bf151a2e60cb6ee" translate="yes" xml:space="preserve">
          <source>Earlier versions of Perl accepted almost all the 6.1 names. These were most extensively documented in the v5.14 version of this pod: &lt;a href=&quot;http://perldoc.perl.org/5.14.0/charnames.html#ALIASES&quot;&gt;http://perldoc.perl.org/5.14.0/charnames.html#ALIASES&lt;/a&gt;.</source>
          <target state="translated">以前のバージョンのPerlは、6.1のほとんどすべての名前を受け入れました。これらは、このポッドのv5.14バージョンで最も広範囲に文書化されていました：&lt;a href=&quot;http://perldoc.perl.org/5.14.0/charnames.html#ALIASES&quot;&gt;http&lt;/a&gt; ://perldoc.perl.org/5.14.0/charnames.html#ALIASES 。</target>
        </trans-unit>
        <trans-unit id="041f750894a2130f024fa1d40c0e0cb8140d53b7" translate="yes" xml:space="preserve">
          <source>Earlier versions of Storable would immediately croak if they encountered a file with a higher internal version number than the reading Storable knew about. Internal version numbers are increased each time new data types (such as restricted hashes) are added to the vocabulary of the file format. This meant that a newer Storable module had no way of writing a file readable by an older Storable, even if the writer didn't store newer data types.</source>
          <target state="translated">以前のバージョンの Storable は、Storable が知っている読み物よりも高い内部バージョン番号を持つファイルに遭遇すると、すぐに泣き出してしまいました。内部バージョン番号は、新しいデータ型(制限付きハッシュなど)がファイルフォーマットの語彙に追加されるたびに増加します。これは、新しいデータ型を格納していなくても、新しいStorableモジュールが古いStorableで読めるファイルを書くことができないことを意味していました。</target>
        </trans-unit>
        <trans-unit id="e4b297dbcd2a6bb824d7c2a7ee2008800dedb8e3" translate="yes" xml:space="preserve">
          <source>Earlier, we mentioned that the &lt;code&gt;File&lt;/code&gt; class's &lt;code&gt;last_mod_time&lt;/code&gt; accessor could return a &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; object. This is a perfect example of composition. We could go even further, and make the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; accessors return objects as well. The &lt;code&gt;File&lt;/code&gt; class would then be &lt;b&gt;composed&lt;/b&gt; of several other objects.</source>
          <target state="translated">前に、 &lt;code&gt;File&lt;/code&gt; クラスの &lt;code&gt;last_mod_time&lt;/code&gt; アクセサーが&lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;オブジェクトを返す可能性があることを説明しました。これは作曲の完璧な例です。さらに進んで、 &lt;code&gt;path&lt;/code&gt; アクセサーと &lt;code&gt;content&lt;/code&gt; アクセサーにオブジェクトを返すようにすることもできます。その場合、 &lt;code&gt;File&lt;/code&gt; クラスは他のいくつかのオブジェクトで&lt;b&gt;構成され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="641edf650debd12f3350ba77247f6ae399c9cef3" translate="yes" xml:space="preserve">
          <source>Earlier, we mentioned that the &lt;code&gt;File&lt;/code&gt; class's &lt;code&gt;last_mod_time&lt;/code&gt; accessor could return a &lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt; object. This is a perfect example of composition. We could go even further, and make the &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; accessors return objects as well. The &lt;code&gt;File&lt;/code&gt; class would then be &lt;b&gt;composed&lt;/b&gt; of several other objects.</source>
          <target state="translated">以前、 &lt;code&gt;File&lt;/code&gt; クラスの &lt;code&gt;last_mod_time&lt;/code&gt; アクセサーが&lt;a href=&quot;http://search.cpan.org/perldoc/DateTime&quot;&gt;DateTime&lt;/a&gt;オブジェクトを返す可能性があることを述べました。これは作曲の完璧な例です。さらに進んで、 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;content&lt;/code&gt; アクセサーにオブジェクトを返すようにすることもできます。 &lt;code&gt;File&lt;/code&gt; クラスには、次のようになり&lt;b&gt;成る&lt;/b&gt;いくつかの他のオブジェクトの。</target>
        </trans-unit>
        <trans-unit id="0f33a9394c2fcd538084772b52d2341a61de3e00" translate="yes" xml:space="preserve">
          <source>Early Perl versions worked on some EBCDIC machines, but the last known version that ran on EBCDIC was v5.8.7, until v5.22, when the Perl core again works on z/OS. Theoretically, it could work on OS/400 or Siemens' BS2000 (or their successors), but this is untested. In v5.22 and 5.24, not all the modules found on CPAN but shipped with core Perl work on z/OS.</source>
          <target state="translated">初期のPerlのバージョンはいくつかのEBCDICマシンで動作しましたが、EBCDIC上で動作する最後のバージョンはv5.8.7で、Perlコアが再びz/OS上で動作するv5.22まででした。理論的には、OS/400やSiemensのBS2000(またはそれらの後継機)でも動作する可能性がありますが、これは未検証です。v5.22 と 5.24 では、CPAN で見つかったすべてのモジュールが z/OS で動作するわけではありませんが、Perl コアに同梱されています。</target>
        </trans-unit>
        <trans-unit id="1e2d95ddabd105e29656829184c35d2859c555dc" translate="yes" xml:space="preserve">
          <source>Early Perl versions worked on some EBCDIC machines, but the last known version that ran on EBCDIC was v5.8.7, until v5.22, when the Perl core again works on z/OS. Theoretically, it could work on OS/400 or Siemens' BS2000 (or their successors), but this is untested. In v5.22, not all the modules found on CPAN but shipped with core Perl work on z/OS.</source>
          <target state="translated">初期のPerlのバージョンはいくつかのEBCDICマシンで動作しましたが、EBCDIC上で動作する最後のバージョンはv5.8.7で、Perlコアが再びz/OS上で動作するv5.22まででした。理論的には、OS/400やSiemensのBS2000(またはその後継機)でも動作する可能性がありますが、これは未検証です。v5.22では、CPAN上で見つかったすべてのモジュールがz/OS上で動作するわけではありませんが、Perlコアに同梱されています。</target>
        </trans-unit>
        <trans-unit id="59b164194e7edb2e85034e9b78794d560a716b37" translate="yes" xml:space="preserve">
          <source>Ease testing test modules built with Test::Builder</source>
          <target state="translated">Test::Builder で構築されたテストモジュールのテストを容易にする</target>
        </trans-unit>
        <trans-unit id="dae7ef5eb7ee790d1fea0c60a9c1de322881c27f" translate="yes" xml:space="preserve">
          <source>Easier to test new testing tools.</source>
          <target state="translated">新しいテストツールのテストが容易になります。</target>
        </trans-unit>
        <trans-unit id="7a188f6f02161d17a281a3ef192ea2346304b188" translate="yes" xml:space="preserve">
          <source>Easily interact with CPAN from the command line</source>
          <target state="translated">コマンドラインからCPANを簡単に操作できます。</target>
        </trans-unit>
        <trans-unit id="45fc6c80b5f40c599a9996e4565f6c3c0441f578" translate="yes" xml:space="preserve">
          <source>Eclipse</source>
          <target state="translated">Eclipse</target>
        </trans-unit>
        <trans-unit id="995f14f2d2d8a63a7a9da7579e9e95a2acf52319" translate="yes" xml:space="preserve">
          <source>Ed Avis</source>
          <target state="translated">エド・エイビス</target>
        </trans-unit>
        <trans-unit id="9b2f1a6097a83d57a9f13c69653ee867428c4309" translate="yes" xml:space="preserve">
          <source>Ed Avis &amp;lt;eda@linux01.wcl.local&amp;gt;</source>
          <target state="translated">エドエイビス&amp;lt;eda@linux01.wcl.local&amp;gt;</target>
        </trans-unit>
        <trans-unit id="00837140532ce93fe6f2a0b0f08779867c4ee055" translate="yes" xml:space="preserve">
          <source>Ed J &amp;lt;mohawk2@users.noreply.github.com&amp;gt;</source>
          <target state="translated">Ed J &amp;lt;mohawk2@users.noreply.github.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="528c45b93e145146f93473cbaa4675f9b54b16c1" translate="yes" xml:space="preserve">
          <source>Edgar &quot;Trizor&quot; Bering &amp;lt;trizor@gmail.com&amp;gt;</source>
          <target state="translated">Edgar &quot;Trizor&quot; Bering &amp;lt;trizor@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1f7a7e23b64ce5747c4a63c4739d2a868d6ca53c" translate="yes" xml:space="preserve">
          <source>Edit the GNUmakefile, makefile.mk (or Makefile, if you're using nmake) and change the values of INST_DRV and INST_TOP. You can also enable various build flags. These are explained in the makefiles.</source>
          <target state="translated">GNUmakefile の makefile.mk (nmake を使っている場合は Makefile)を編集し、 INST_DRV と INST_TOP の値を変更します。また、様々なビルドフラグを有効にすることもできます。これらについてはmakefileで説明しています。</target>
        </trans-unit>
        <trans-unit id="e76b3763dae70623eb55885995406de6279fdb6e" translate="yes" xml:space="preserve">
          <source>Edit the Makefile.PL file so that the corresponding line looks like this:</source>
          <target state="translated">対応する行が以下のようになるように、Makefile.PLファイルを編集します。</target>
        </trans-unit>
        <trans-unit id="f7940347fff54108cd46081728a5cf85408a717b" translate="yes" xml:space="preserve">
          <source>Edit the files generated. You don't have to if you have no time AND no intention to give it to someone else. But it is a good idea to edit the pod and to add more tests.</source>
          <target state="translated">生成されたファイルを編集します。時間がなくて誰かに渡すつもりがなければ、編集する必要はありません。しかし、ポッドを編集して、より多くのテストを追加するのは良いアイデアです。</target>
        </trans-unit>
        <trans-unit id="954ea018e0a987091c4440d55ba64f48e0cccfe8" translate="yes" xml:space="preserve">
          <source>Edit the makefile.mk (or Makefile, if you're using nmake) and change the values of INST_DRV and INST_TOP. You can also enable various build flags. These are explained in the makefiles.</source>
          <target state="translated">makefile.mk (nmake を使っている場合は Makefile)を編集して INST_DRV と INST_TOP の値を変更します。また、様々なビルドフラグを有効にすることができます。これらについてはmakefileで説明しています。</target>
        </trans-unit>
        <trans-unit id="b93bb818c85552f3fcd19e172c258ef9c6aad22d" translate="yes" xml:space="preserve">
          <source>Editor Support for Debugging</source>
          <target state="translated">エディタによるデバッグのサポート</target>
        </trans-unit>
        <trans-unit id="68575b9eb0c3bb98d30a72178c5ff21f9fae81f0" translate="yes" xml:space="preserve">
          <source>Editor to use.</source>
          <target state="translated">使用するエディタ。</target>
        </trans-unit>
        <trans-unit id="77cd7c3d29d911531fb7afe572b99c8c5ba4e8b7" translate="yes" xml:space="preserve">
          <source>Editorial adjustments by Gurusamy Sarathy &amp;lt;gsar@ActiveState.com&amp;gt;</source>
          <target state="translated">グルサミーサラシーによる編集上の調整&amp;lt;gsar@ActiveState.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e5b26fe0f2ccbc86d51353217407910ecc40ac72" translate="yes" xml:space="preserve">
          <source>Edward Zborowski &amp;lt;ed@rubensteintech.com&amp;gt;</source>
          <target state="translated">エドワード・ズボロウスキー&amp;lt;ed@rubensteintech.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="73be54c86084c8c273a09c1c9821e5a9131296dd" translate="yes" xml:space="preserve">
          <source>Effect:</source>
          <target state="translated">Effect:</target>
        </trans-unit>
        <trans-unit id="8117456b097c6d57fb7d1f1dab282a3702937b2f" translate="yes" xml:space="preserve">
          <source>Efficient removal of characters from the beginning of the string buffer. &lt;code&gt;SvPOK(sv)&lt;/code&gt;, or at least &lt;code&gt;SvPOKp(sv)&lt;/code&gt;, must be true and &lt;code&gt;ptr&lt;/code&gt; must be a pointer to somewhere inside the string buffer. &lt;code&gt;ptr&lt;/code&gt; becomes the first character of the adjusted string. Uses the &lt;code&gt;OOK&lt;/code&gt; hack. On return, only &lt;code&gt;SvPOK(sv)&lt;/code&gt; and &lt;code&gt;SvPOKp(sv)&lt;/code&gt; among the &lt;code&gt;OK&lt;/code&gt; flags will be true.</source>
          <target state="translated">文字列バッファの先頭から文字を効率的に削除します。 &lt;code&gt;SvPOK(sv)&lt;/code&gt; 、または少なくとも &lt;code&gt;SvPOKp(sv)&lt;/code&gt; はtrueである必要があり、 &lt;code&gt;ptr&lt;/code&gt; は文字列バッファ内のどこかへのポインタである必要があります。 &lt;code&gt;ptr&lt;/code&gt; は、調整された文字列の最初の文字になります。 &lt;code&gt;OOK&lt;/code&gt; ハックを使用します。戻ると、 &lt;code&gt;OK&lt;/code&gt; フラグの中で &lt;code&gt;SvPOK(sv)&lt;/code&gt; と &lt;code&gt;SvPOKp(sv)&lt;/code&gt; のみが真になります。</target>
        </trans-unit>
        <trans-unit id="8b7ac9002bbe557a0e89e8f9ac76410e740b68c3" translate="yes" xml:space="preserve">
          <source>Efficient removal of characters from the beginning of the string buffer. SvPOK(sv), or at least SvPOKp(sv), must be true and the &lt;code&gt;ptr&lt;/code&gt; must be a pointer to somewhere inside the string buffer. The &lt;code&gt;ptr&lt;/code&gt; becomes the first character of the adjusted string. Uses the &quot;OOK hack&quot;. On return, only SvPOK(sv) and SvPOKp(sv) among the OK flags will be true.</source>
          <target state="translated">文字列バッファの先頭から文字を効率的に削除します。SvPOK（sv）、または少なくともSvPOKp（sv）はtrueでなければならず、 &lt;code&gt;ptr&lt;/code&gt; は文字列バッファ内のどこかへのポインタでなければなりません。 &lt;code&gt;ptr&lt;/code&gt; が調整した文字列の最初の文字になります。「OOKハック」を使用します。戻ったとき、OKフラグの中でSvPOK（sv）とSvPOKp（sv）だけが真になります。</target>
        </trans-unit>
        <trans-unit id="f18b25f084ce81b950168aedca18f94cb1425062" translate="yes" xml:space="preserve">
          <source>Efficiently compute time from local and GMT time</source>
          <target state="translated">ローカル時間とGMT時間から時間を効率的に計算</target>
        </trans-unit>
        <trans-unit id="654f6a3bdd1d9e4bdcf155781a2de9b4ed80c132" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;IO::String&lt;/code&gt; or &lt;code&gt;perlio&lt;/code&gt; support is needed to support writing stringified archives. Currently, &lt;code&gt;perlio&lt;/code&gt; is the preferred method, if available.</source>
          <target state="translated">文字列化されたアーカイブの書き込みをサポートするには、 &lt;code&gt;IO::String&lt;/code&gt; または &lt;code&gt;perlio&lt;/code&gt; のいずれかのサポートが必要です。現在、 &lt;code&gt;perlio&lt;/code&gt; が推奨される方法です（可能な場合）。</target>
        </trans-unit>
        <trans-unit id="85dba161f5ca6a960a7dc8fa1039724a8c09cad4" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (starting in Perl 5.10.0), or &lt;code&gt;\&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; (old-style) where</source>
          <target state="translated">どちらの &lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; 、または（Perlの5.10.0で始まる） &lt;code&gt;\&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; （古いスタイル）</target>
        </trans-unit>
        <trans-unit id="52f049aa56476852e6a153929348eb18e7bf1459" translate="yes" xml:space="preserve">
          <source>Either a named or anonymous pipe.</source>
          <target state="translated">名前のついたパイプか匿名のパイプのどちらかです。</target>
        </trans-unit>
        <trans-unit id="cb02a27773229541ab59b1944bd46b1d5a6ebed2" translate="yes" xml:space="preserve">
          <source>Either a regular &lt;b&gt;assignment&lt;/b&gt; or a compound &lt;b&gt;operator&lt;/b&gt; composed of an ordinary assignment and some other operator, that changes the value of a variable in place; that is, relative to its old value. For example, &lt;code&gt;$a += 2&lt;/code&gt; adds &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;$a&lt;/code&gt; .</source>
          <target state="translated">通常の&lt;b&gt;代入、&lt;/b&gt;または通常の代入とその他の演算&lt;b&gt;子で&lt;/b&gt;構成される複合&lt;b&gt;演算子の&lt;/b&gt;いずれかで、変数の値を変更します。つまり、その古い値に関連しています。たとえば、 &lt;code&gt;$a += 2&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; を &lt;code&gt;$a&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="0dd3a0e7d7fd04d60cdb8e08fb04cc78c683756e" translate="yes" xml:space="preserve">
          <source>Either a regular &lt;b&gt;assignment&lt;/b&gt; or a compound &lt;b&gt;operator&lt;/b&gt; composed of an ordinary assignment and some other operator, that changes the value of a variable in place; that is, relative to its old value. For example, &lt;code&gt;$a += 2&lt;/code&gt; adds &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;$a&lt;/code&gt;.</source>
          <target state="translated">通常の&lt;b&gt;代入、&lt;/b&gt;または通常の代入と他の演算&lt;b&gt;子で&lt;/b&gt;構成される複合&lt;b&gt;演算子の&lt;/b&gt;いずれかで、変数の値を変更します。つまり、古い値と比較して。たとえば、 &lt;code&gt;$a += 2&lt;/code&gt; 追加さ &lt;code&gt;2&lt;/code&gt; に &lt;code&gt;$a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="281cd0fa078fd4c1ba948d728426cec878f64c16" translate="yes" xml:space="preserve">
          <source>Either assimilate new technologies, or build bridges to them.</source>
          <target state="translated">新しい技術を同化するか、新しい技術への橋渡しをするか。</target>
        </trans-unit>
        <trans-unit id="616b8deb9c86ed3074fc60088a26151e3856d891" translate="yes" xml:space="preserve">
          <source>Either form above will work. This will return a list of attributes defined on the object. This list is returned in the attribute definition order, parent class attributes are listed before subclass attributes. Duplicate attributes will be removed before the list is returned.</source>
          <target state="translated">上記のどちらの形式でも動作します。これは、オブジェクトに定義された属性のリストを返します。このリストは属性の定義順に返され、親クラスの属性はサブクラスの属性の前にリストされます。重複した属性はリストが返される前に削除されます。</target>
        </trans-unit>
        <trans-unit id="2577d609c330867bbdb6a4c63c0df0f3f5ae7cc8" translate="yes" xml:space="preserve">
          <source>Either have an argumentless =over, or have its argument a strictly positive number.</source>
          <target state="translated">引数のない=overを持つか、その引数が厳密に正の数であるかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="66b1d548fa9375ac8cee4b6bb3288cae52feda67" translate="yes" xml:space="preserve">
          <source>Either not implemented or a no-op. (Android)</source>
          <target state="translated">実装されていないのか、それともダメなのか。(Android)</target>
        </trans-unit>
        <trans-unit id="9fd8e33d6202aef3ccb0a1588e2309a6eeaf7193" translate="yes" xml:space="preserve">
          <source>Either of &lt;code&gt;LocalService&lt;/code&gt; or &lt;code&gt;PeerService&lt;/code&gt; (or their &lt;code&gt;...Port&lt;/code&gt; synonyms) can be either a service name, a decimal number, or a string containing both a service name and number, in a form such as</source>
          <target state="translated">どちらか &lt;code&gt;LocalService&lt;/code&gt; のか &lt;code&gt;PeerService&lt;/code&gt; （またはその &lt;code&gt;...Port&lt;/code&gt; 同義語）、サービス名、進数、またはこのような形で、サービス名と番号の両方を含む文字列のいずれかになります</target>
        </trans-unit>
        <trans-unit id="a6aadb20634080f518a8887a688da9b1fee48d93" translate="yes" xml:space="preserve">
          <source>Either of the above forms of &quot;layer&quot; specifications can be made the default for a lexical scope with the &lt;code&gt;use open ...&lt;/code&gt; pragma. See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;.</source>
          <target state="translated">上記の形式の「レイヤー」仕様のいずれかを、 &lt;code&gt;use open ...&lt;/code&gt; pragmaを使用してレキシカルスコープのデフォルトにすることができます。&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c47f17b2cb7b7674bb2cbd89473a3cd6f362bf48" translate="yes" xml:space="preserve">
          <source>Either of the following will work instead:</source>
          <target state="translated">以下のいずれかが代わりに機能します。</target>
        </trans-unit>
        <trans-unit id="e5a6a14049fff21a602c284699a2c9fbe3ca6693" translate="yes" xml:space="preserve">
          <source>Either single-quote your strings, or (preferably) use forward slashes. Since all DOS and Windows versions since something like MS-DOS 2.0 or so have treated &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; the same in a path, you might as well use the one that doesn't clash with Perl--or the POSIX shell, ANSI C and C++, awk, Tcl, Java, or Python, just to mention a few. POSIX paths are more portable, too.</source>
          <target state="translated">文字列を単一引用符で囲むか、（できれば）スラッシュを使用します。MS-DOS 2.0のようなもの以降のすべてのDOSおよびWindowsバージョンは、パスで &lt;code&gt;/&lt;/code&gt; と &lt;code&gt;\&lt;/code&gt; を同じに扱っているので、Perlと競合しないもの、またはPOSIXシェル、ANSI C、およびC ++、awk、Tcl、Java、またはPython。POSIXパスもより移植性があります。</target>
        </trans-unit>
        <trans-unit id="a48425d47cea1024da1aa0b5eb56b9a2e8f4b87c" translate="yes" xml:space="preserve">
          <source>Either stringify the structure yourself (no fun), or else get the MLDBM (which uses Data::Dumper) module from CPAN and layer it on top of either DB_File or GDBM_File. You might also try DBM::Deep, but it can be a bit slow.</source>
          <target state="translated">構造体を自分で文字列化するか(面白くない)、CPANからMLDBM(Data::Dumperを使う)モジュールを入手して、DB_FileかGDBM_Fileのどちらかの上に重ねるかのどちらかです。DBM::Deepを試すのもいいかもしれませんが、少し時間がかかります。</target>
        </trans-unit>
        <trans-unit id="f91179ba5041e3cd11279b2a09e8c8dafe42d600" translate="yes" xml:space="preserve">
          <source>Either the 5.006001 or the 5.6.1 format is acceptable.</source>
          <target state="translated">5.006001または5.6.1形式のどちらでも構いません。</target>
        </trans-unit>
        <trans-unit id="f3046bc2658fc9703b653ff4f645f1c7f4b09d3a" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; flag will warn you when you use an array slice with a single index.</source>
          <target state="translated">単一のインデックスを持つ配列スライスを使用すると、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;フラグのいずれかで警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="175fe2f08cb303f8f8870d3f7cd0357b5f36d7a6" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;use warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; flag will warn you when you use an array slice with a single index.</source>
          <target state="translated">単一のインデックスを持つ配列スライスを使用すると、 &lt;code&gt;use warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;フラグのいずれかが警告を表示します。</target>
        </trans-unit>
        <trans-unit id="906b6fd14fb2f43afa53be4e9384438767144648" translate="yes" xml:space="preserve">
          <source>Either the &lt;code&gt;warnings::warn&lt;/code&gt; or &lt;code&gt;warnings::warnif&lt;/code&gt; function should be used to actually display the warnings message. This is because they can make use of the feature that allows warnings to be escalated into fatal errors. So in this case</source>
          <target state="translated">警告メッセージを実際に表示するには、 &lt;code&gt;warnings::warn&lt;/code&gt; または &lt;code&gt;warnings::warnif&lt;/code&gt; 関数を使用する必要があります。これは、警告を致命的なエラーにエスカレートできる機能を利用できるためです。したがって、この場合</target>
        </trans-unit>
        <trans-unit id="0780376e7962816fa4ff7b6a652f65ef6eadb7db" translate="yes" xml:space="preserve">
          <source>Either use parentheses or the high-precedence variant of the operator.</source>
          <target state="translated">括弧を使用するか、演算子の上位バリアントを使用します。</target>
        </trans-unit>
        <trans-unit id="ac2efacdb85d4049866934d48a775a119bbac29d" translate="yes" xml:space="preserve">
          <source>Either way, the implementation isn't going to generate results larger than the size of the integer type Perl was built with (32 bits or 64 bits).</source>
          <target state="translated">いずれにしても、Perlがビルドした整数型のサイズ(32ビットまたは64ビット)よりも大きな結果を生成することはありません。</target>
        </trans-unit>
        <trans-unit id="a6479b4a431808cf309ed8137f781bb957df27d9" translate="yes" xml:space="preserve">
          <source>Either you don't have more than one line in the string you're looking at (probably), or else you aren't using the correct modifier(s) on your pattern (possibly).</source>
          <target state="translated">あなたが見ている文字列の中に複数の行がないか(おそらく)、パターンに正しい修飾子を使っていないか(おそらく)のどちらかです。</target>
        </trans-unit>
        <trans-unit id="e153f909edaedd24892df1d401944b8821af0128" translate="yes" xml:space="preserve">
          <source>Elapsed Real Time</source>
          <target state="translated">経過時間</target>
        </trans-unit>
        <trans-unit id="e45775ed8dae80c63b3497b4ea826a44ca2dea3f" translate="yes" xml:space="preserve">
          <source>Elapsed returns a &lt;a href=&quot;../../benchmark&quot;&gt;Benchmark&lt;/a&gt; object that represents the running time of the aggregated tests. In order for &lt;code&gt;elapsed&lt;/code&gt; to be valid you must call &lt;code&gt;start&lt;/code&gt; before running the tests and &lt;code&gt;stop&lt;/code&gt; immediately afterwards.</source>
          <target state="translated">Elapsedは、集約されたテストの実行時間を表す&lt;a href=&quot;../../benchmark&quot;&gt;Benchmark&lt;/a&gt;オブジェクトを返します。ためには &lt;code&gt;elapsed&lt;/code&gt; を呼び出す必要があります有効にするには &lt;code&gt;start&lt;/code&gt; テストを実行する前に &lt;code&gt;stop&lt;/code&gt; 、その後すぐに。</target>
        </trans-unit>
        <trans-unit id="2fb6b6b80655efc89d39c9e3dbc4f534ad641e2d" translate="yes" xml:space="preserve">
          <source>Elapsed returns a &lt;a href=&quot;benchmark&quot;&gt;Benchmark&lt;/a&gt; object that represents the running time of the aggregated tests. In order for &lt;code&gt;elapsed&lt;/code&gt; to be valid you must call &lt;code&gt;start&lt;/code&gt; before running the tests and &lt;code&gt;stop&lt;/code&gt; immediately afterwards.</source>
          <target state="translated">Elapsedは、集約されたテストの実行時間を表す&lt;a href=&quot;benchmark&quot;&gt;ベンチマーク&lt;/a&gt;オブジェクトを返します。 &lt;code&gt;elapsed&lt;/code&gt; が有効であるためには、テストを実行する前に &lt;code&gt;start&lt;/code&gt; を呼び出し、直後に &lt;code&gt;stop&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="685684a16f4001786549b1ab800e18b9d9c7dce4" translate="yes" xml:space="preserve">
          <source>Electronic mail address of the perl5 administrator.</source>
          <target state="translated">perl5管理者の電子メールアドレス。</target>
        </trans-unit>
        <trans-unit id="0206d29187ee24de18ffe8c7060208c783959fc1" translate="yes" xml:space="preserve">
          <source>Electronic mail address of the person who ran Configure. This can be used by units that require the user's e-mail, like</source>
          <target state="translated">Configureを実行した人の電子メールアドレス。のように、ユーザーの電子メールを必要とするユニットで使用することができます。</target>
        </trans-unit>
        <trans-unit id="fb92ce1ec6eee388978bf1476ef4da0f49ddc2f4" translate="yes" xml:space="preserve">
          <source>Element Types and Accessor Methods</source>
          <target state="translated">要素の種類とアクセッサの方法</target>
        </trans-unit>
        <trans-unit id="56be9d95047d3837a8e260ecf6fab5aa5091179f" translate="yes" xml:space="preserve">
          <source>Eliminate the macros in the output to the MMS/MMK file.</source>
          <target state="translated">MMS/MMKファイルへの出力のマクロを削除します。</target>
        </trans-unit>
        <trans-unit id="0043730cfa58902fc1eb2bab5c9cf7b854c601fd" translate="yes" xml:space="preserve">
          <source>Eliminates any information in the type-ahead buffer on a read from the terminal.</source>
          <target state="translated">端末からの読み込み時に、型先バッファ内の情報を消去します。</target>
        </trans-unit>
        <trans-unit id="372fe5af53dfb10b96df623d9727deb1110a3dd2" translate="yes" xml:space="preserve">
          <source>Email any corrections or questions to me.</source>
          <target state="translated">訂正や質問があれば、私にメールしてください。</target>
        </trans-unit>
        <trans-unit id="2f6c017bc97bb2714dd0b54f8c31090aba3e0c32" translate="yes" xml:space="preserve">
          <source>Email::Sender::Transport::SMTP</source>
          <target state="translated">Email::Sender::Transport::SMTP</target>
        </trans-unit>
        <trans-unit id="f4fe0960af2e7da0a8e6abd0220f7fb9ccfc0f82" translate="yes" xml:space="preserve">
          <source>Email::Sender::Transport::Sendmail</source>
          <target state="translated">Email::Sender::Transport::Sendmail</target>
        </trans-unit>
        <trans-unit id="a5bcdc422fa0c0f86b08b10ed2c448b54076951e" translate="yes" xml:space="preserve">
          <source>Embedded Code Execution Frequency</source>
          <target state="translated">組込みコード実行頻度</target>
        </trans-unit>
        <trans-unit id="1c0d431f261d9feabca2f4bf0f5d2be5226959da" translate="yes" xml:space="preserve">
          <source>Embedded Ctrl-As (octal 001) in the input will be mapped to spaces on output, due to an internal implementation detail.</source>
          <target state="translated">入力に埋め込まれたCtrl-As(8進数001)は、内部実装の詳細により、出力のスペースにマップされます。</target>
        </trans-unit>
        <trans-unit id="b65de96935df088746b85b44766bded2aa4a92cf" translate="yes" xml:space="preserve">
          <source>Embedded modifiers can also turn off any modifiers already present by using,</source>
          <target state="translated">埋め込みモディファイアを使用することで、すでに存在するモディファイアをオフにすることもできます。</target>
        </trans-unit>
        <trans-unit id="036d707633278129886b9180244ca67da739555e" translate="yes" xml:space="preserve">
          <source>Embedded modifiers can also turn off any modifiers already present by using, e.g., &lt;code&gt;(?-i)&lt;/code&gt;. Modifiers can also be combined into a single expression, e.g., &lt;code&gt;(?s-i)&lt;/code&gt; turns on single line mode and turns off case insensitivity.</source>
          <target state="translated">埋め込まれた修飾子は、たとえば &lt;code&gt;(?-i)&lt;/code&gt; を使用して、すでに存在する修飾子をオフにすることもできます。修飾子を組み合わせて単一の式にすることもでき &lt;code&gt;(?s-i)&lt;/code&gt; たとえば、（？si）は単一行モードをオンにし、大文字と小文字の区別をオフにします。</target>
        </trans-unit>
        <trans-unit id="609e053d4c0081ee95d3a87942874703d9f5ab55" translate="yes" xml:space="preserve">
          <source>Embedded modifiers can have two important advantages over the usual modifiers. Embedded modifiers allow a custom set of modifiers for</source>
          <target state="translated">埋め込みモディファイアには、通常のモディファイアに比べて2つの重要な利点があります。埋め込みモディファイアは、以下のようなカスタムモディファイアのセットを可能にします。</target>
        </trans-unit>
        <trans-unit id="7b8b1388248a7771ad7a19db052c3e57cdc37002" translate="yes" xml:space="preserve">
          <source>Embedded modifiers can have two important advantages over the usual modifiers. Embedded modifiers allow a custom set of modifiers to</source>
          <target state="translated">埋め込みモディファイアには、通常のモディファイアに比べて2つの重要な利点があります。埋め込みモディファイアは、カスタムモディファイアのセットを</target>
        </trans-unit>
        <trans-unit id="77fff13bcd07ad216d2d3e4a9dc81f2e17688911" translate="yes" xml:space="preserve">
          <source>Embedded modifiers may also be added to a non-capturing grouping. &lt;code&gt;(?i-m:regexp)&lt;/code&gt; is a non-capturing grouping that matches &lt;code&gt;regexp&lt;/code&gt; case insensitively and turns off multi-line mode.</source>
          <target state="translated">埋め込み修飾子は、非キャプチャグループに追加することもできます。 &lt;code&gt;(?i-m:regexp)&lt;/code&gt; は、 &lt;code&gt;regexp&lt;/code&gt; 大文字と小文字を区別せずに一致し、複数行モードをオフにする非キャプチャグループです。</target>
        </trans-unit>
        <trans-unit id="b92d8665944f4979bd50de8585ed3b0fd45dfa5f" translate="yes" xml:space="preserve">
          <source>Embedding Functions</source>
          <target state="translated">埋め込み機能</target>
        </trans-unit>
        <trans-unit id="dfab320700daa38157038d3e70e9093fcfa26c1f" translate="yes" xml:space="preserve">
          <source>Embedding Perl inside a 64-bit application.</source>
          <target state="translated">64ビットアプリケーション内にPerlを埋め込む。</target>
        </trans-unit>
        <trans-unit id="0694b8bb0407da0c117f25cc81dd5d48908ff82d" translate="yes" xml:space="preserve">
          <source>Embedding Perl under Win32</source>
          <target state="translated">Win32でPerlを埋め込む</target>
        </trans-unit>
        <trans-unit id="9cbcae97b606ebda37a4c9c0051aab393c7f7d13" translate="yes" xml:space="preserve">
          <source>Embedding Pods in Perl Modules</source>
          <target state="translated">Perl モジュールへのポッドの埋め込み</target>
        </trans-unit>
        <trans-unit id="3332088412158a65b80fc73f2172f27d8031dce4" translate="yes" xml:space="preserve">
          <source>Embedding comments and modifiers in a regular expression</source>
          <target state="translated">コメントと修飾子を正規表現に埋め込む</target>
        </trans-unit>
        <trans-unit id="2f84d71eabfb2db471c3906b955c997d8f2ea42c" translate="yes" xml:space="preserve">
          <source>Emboldened by this, you dive into the second phrase that your software needs to output: &quot;Your query matched 10 files in 4 directories.&quot;. You notice that if you want to treat phrases as indivisible, as the gettext manual wisely advises, you need four cases now, instead of two, to cover the permutations of singular and plural on the two items, $dir_count and $file_count. So you try this:</source>
          <target state="translated">これによって強化された、あなたのソフトウェアが出力する必要がある2つ目のフレーズに飛び込みます。&quot;あなたのクエリは、4つのディレクトリにある10個のファイルにマッチしました。フレーズを不可分なものとして扱いたい場合、gettext のマニュアルが賢明にアドバイスしているように、2つのアイテム、$dir_count と $file_count の単数形と複数形の組み合わせをカバーするために、2つのケースではなく4つのケースが必要になっていることに気がつきました。そこで、次のようにしてみましょう。</target>
        </trans-unit>
        <trans-unit id="4f7beea65f566b123cc3fc19969be422b43965af" translate="yes" xml:space="preserve">
          <source>Emit the popular wake-on-lan magic udp packet to wake up a local device. See also &lt;a href=&quot;Net::Wake&quot;&gt;Net::Wake&lt;/a&gt;, but this has the mac address as 1st arg. &lt;code&gt;$host&lt;/code&gt; should be the local gateway. Without it will broadcast.</source>
          <target state="translated">人気のあるwake-on-lanマジックUDPパケットを発行して、ローカルデバイスをウェイクアップします。&lt;a href=&quot;Net::Wake&quot;&gt;Net :: Wake&lt;/a&gt;も参照してください。ただし、これには1番目の引数としてMACアドレスがあります。 &lt;code&gt;$host&lt;/code&gt; はローカルゲートウェイである必要があります。それなしで放送されます。</target>
        </trans-unit>
        <trans-unit id="5b1ebe53d6ccd7815c61ce7589f6b78c18dd612d" translate="yes" xml:space="preserve">
          <source>Emits a warning, usually by printing it to &lt;code&gt;STDERR&lt;/code&gt;. &lt;code&gt;warn&lt;/code&gt; interprets its operand LIST in the same way as &lt;code&gt;die&lt;/code&gt;, but is slightly different in what it defaults to when LIST is empty or makes an empty string. If it is empty and &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt; already contains an exception value then that value is used after appending &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt;. If it is empty and &lt;code&gt;$@&lt;/code&gt; is also empty then the string &lt;code&gt;&quot;Warning: Something's wrong&quot;&lt;/code&gt; is used.</source>
          <target state="translated">通常、 &lt;code&gt;STDERR&lt;/code&gt; に出力することにより、警告を発行します。 &lt;code&gt;warn&lt;/code&gt; は、オペランドLISTを &lt;code&gt;die&lt;/code&gt; と同じように解釈しますが、LISTが空の場合、または空の文字列を作成する場合のデフォルトの設定が少し異なります。空で、&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;すでに例外値が含まれている場合は、 &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; 追加した後にその値が使用されます。空で &lt;code&gt;$@&lt;/code&gt; も空の場合、文字列 &lt;code&gt;&quot;Warning: Something's wrong&quot;&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="44d5d024243158295b0b17ef00bb9b23203d9360" translate="yes" xml:space="preserve">
          <source>EmojiSources.txt</source>
          <target state="translated">EmojiSources.txt</target>
        </trans-unit>
        <trans-unit id="182fa8e51f2878e5ebff39e46c9563939a1274d1" translate="yes" xml:space="preserve">
          <source>Empty (?) without any modifiers in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現に修飾子がない空（？）。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="00ea7a43c3020a563e25bd1eedc14c28db07661d" translate="yes" xml:space="preserve">
          <source>Empty \%c in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現で\％cを空にします。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="482c748a5823d75ff12d9a6680ae909964eacc76" translate="yes" xml:space="preserve">
          <source>Empty \%c{}</source>
          <target state="translated">Empty †Empty †Empty †Empty</target>
        </trans-unit>
        <trans-unit id="c45054945a8770b05f8103d2a4a0bb1b804cbf85" translate="yes" xml:space="preserve">
          <source>Empty \%c{} in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の空の\％c {}; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="abbe29d0eda029ba0d774099d16a176aaf760777" translate="yes" xml:space="preserve">
          <source>Empty parts of the file/buffer will have NULL (0x00) bytes written to them.</source>
          <target state="translated">ファイル/バッファの空の部分には、NULL (0x00)バイトが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="bd4ef1b6c1ef24f987c292a748ebade1052ce4dc" translate="yes" xml:space="preserve">
          <source>Empty strings as well as other illegal numbers results in 'NaN'.</source>
          <target state="translated">空文字列やその他の不正な数字は「NaN」となります。</target>
        </trans-unit>
        <trans-unit id="b78fcf2b7184ff747f91ac2d4e85304d73a66a8f" translate="yes" xml:space="preserve">
          <source>Emptying a file of existing contents, either automatically when opening a file for writing or explicitly via the &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">既存のコンテンツのファイルを空にする。ファイルを書き込み用に開くときに自動的に、または &lt;code&gt;&lt;a href=&quot;functions/truncate&quot;&gt;truncate&lt;/a&gt;&lt;/code&gt; 関数を介して明示的に。</target>
        </trans-unit>
        <trans-unit id="f60475c9fb8f070699dc0b6997447641f41933fa" translate="yes" xml:space="preserve">
          <source>Emptying a file of existing contents, either automatically when opening a file for writing or explicitly via the &lt;code&gt;truncate&lt;/code&gt; function.</source>
          <target state="translated">書き込み用にファイルを開くときに自動的に、または &lt;code&gt;truncate&lt;/code&gt; 機能を介して明示的に、既存のコンテンツのファイルを空にします。</target>
        </trans-unit>
        <trans-unit id="a3810839f51735c2952e4638769a72e1f188779e" translate="yes" xml:space="preserve">
          <source>Emulate low-level math with BigInt code</source>
          <target state="translated">BigIntコードで低レベルの数学をエミュレート</target>
        </trans-unit>
        <trans-unit id="eaff5ce9fb66a8294a29b4afda7fa93b8fb7b74b" translate="yes" xml:space="preserve">
          <source>Emulated using multiple interpreters. See &lt;a href=&quot;perlfork&quot;&gt;perlfork&lt;/a&gt;. (Win32)</source>
          <target state="translated">複数のインタープリターを使用してエミュレートされます。&lt;a href=&quot;perlfork&quot;&gt;perlforkを&lt;/a&gt;参照してください。（Win32）</target>
        </trans-unit>
        <trans-unit id="a7b07a2e86e21bbe02318bb5339e9e3819d02d9c" translate="yes" xml:space="preserve">
          <source>Emulated using synchronization functions such that it can be interrupted by &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt;, and limited to a maximum of 4294967 seconds, approximately 49 days. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; によって中断されるように同期関数を使用してエミュレートされ、最大4294967秒、約49日に制限されます。（Win32）</target>
        </trans-unit>
        <trans-unit id="2fab2548b326a0aed3bd44319bab854e6c0cf455" translate="yes" xml:space="preserve">
          <source>Emulated using timers that must be explicitly polled whenever Perl wants to dispatch &quot;safe signals&quot; and therefore cannot interrupt blocking system calls. (Win32)</source>
          <target state="translated">Perl が &quot;安全なシグナル&quot; をディスパッチしたいときはいつでも明示的にポーリングされなければならないタイマーを使用してエミュレートされ、そのためブロッキングシステムの呼び出しを中断することはできません。(Win32)</target>
        </trans-unit>
        <trans-unit id="9b1e45abf8f6f88976507fbf984db8d99aa517be" translate="yes" xml:space="preserve">
          <source>Emulates Unix &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; (which considers &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt; 1&lt;/code&gt; to indicate an error) by mapping the &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;SS$_ABORT&lt;/code&gt; (&lt;code&gt;44&lt;/code&gt; ). This behavior may be overridden with the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'exit'&lt;/code&gt; . As with the CRTL's &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; function, &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt; 0&lt;/code&gt; is also mapped to an exit status of &lt;code&gt;SS$_NORMAL&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt; ); this mapping cannot be overridden. Any other argument to &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; is used directly as Perl's exit status. On VMS, unless the future POSIX_EXIT mode is enabled, the exit code should always be a valid VMS exit code and not a generic number. When the POSIX_EXIT mode is enabled, a generic number will be encoded in a method compatible with the C library _POSIX_EXIT macro so that it can be decoded by other programs, particularly ones written in C, like the GNV package. (VMS)</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; を &lt;code&gt;SS$_ABORT&lt;/code&gt; （ &lt;code&gt;44&lt;/code&gt; ）にマッピングすることにより、Unixの &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; をエミュレートします（ &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt; 1&lt;/code&gt; はエラーを示すと見なされます）。この動作は、プラグマ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'exit'&lt;/code&gt; vmsish 'exit'でオーバーライドできます。CRTLの &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; 関数と同様に、 &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit&lt;/a&gt; 0&lt;/code&gt; 0も &lt;code&gt;SS$_NORMAL&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）の終了ステータスにマップされます。このマッピングは上書きできません。 &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; への他の引数Perlの終了ステータスとして直接使用されます。VMSでは、将来のPOSIX_EXITモードが有効になっていない限り、終了コードは常に有効なVMS終了コードであり、一般的な番号ではありません。POSIX_EXITモードが有効な場合、一般的な数値はCライブラリの_POSIX_EXITマクロと互換性のあるメソッドでエンコードされ、他のプログラム、特にGNVパッケージなどのCで記述されたプログラムでデコードできるようになります。（VMS）</target>
        </trans-unit>
        <trans-unit id="2c857b36dcd15d79dca987f0a21532d5543740f0" translate="yes" xml:space="preserve">
          <source>Emulation is provided for &lt;code&gt;runtests&lt;/code&gt; and &lt;code&gt;execute_tests&lt;/code&gt; but the pluggable 'Straps' interface that previous versions of &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt; supported is not reproduced here. Straps is now available as a stand alone module: &lt;a href=&quot;Test::Harness::Straps&quot;&gt;Test::Harness::Straps&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;runtests&lt;/code&gt; と &lt;code&gt;execute_tests&lt;/code&gt; にはエミュレーションが提供されていますが、以前のバージョンの&lt;a href=&quot;Test::Harness&quot;&gt;Test :: Harnessが&lt;/a&gt;サポートしていたプラグ可能な「Straps」インターフェースはここでは再現されていません。ストラップは、スタンドアロンモジュールとして利用できるようになりました：&lt;a href=&quot;Test::Harness::Straps&quot;&gt;Test :: Harness :: Straps&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a8694061aed01e45167cf3a5722aa921d3e6ee71" translate="yes" xml:space="preserve">
          <source>Emulation is provided for &lt;code&gt;runtests&lt;/code&gt; and &lt;code&gt;execute_tests&lt;/code&gt; but the pluggable 'Straps' interface that previous versions of &lt;a href=&quot;harness&quot;&gt;Test::Harness&lt;/a&gt; supported is not reproduced here. Straps is now available as a stand alone module: &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Harness::Straps&quot;&gt;Test::Harness::Straps&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;runtests&lt;/code&gt; と &lt;code&gt;execute_tests&lt;/code&gt; にはエミュレーションが提供されていますが、以前のバージョンの&lt;a href=&quot;harness&quot;&gt;Test :: Harnessが&lt;/a&gt;サポートしていたプラグ可能な「ストラップ」インターフェースは、ここでは再現されません。ストラップはスタンドアロンのモジュールとして利用可能になりました：&lt;a href=&quot;http://search.cpan.org/perldoc/Test::Harness::Straps&quot;&gt;Test :: Harness :: Straps&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c3201c23058080f5cca7ba534770368c083d322" translate="yes" xml:space="preserve">
          <source>Enable DUMP and all execute options. Equivalent to:</source>
          <target state="translated">DUMPとすべての実行オプションを有効にします。に相当します。</target>
        </trans-unit>
        <trans-unit id="3519927c57abd6568424c455930c1e3320ae7f4f" translate="yes" xml:space="preserve">
          <source>Enable DUMP and all non-extra execute options. Equivalent to:</source>
          <target state="translated">DUMPおよびすべての非エクストラ実行オプションを有効にします。に相当します。</target>
        </trans-unit>
        <trans-unit id="3687b13f8be99eb4a1bd7121c185ac6fb0233a5d" translate="yes" xml:space="preserve">
          <source>Enable Verbose mode</source>
          <target state="translated">冗長モードを有効にする</target>
        </trans-unit>
        <trans-unit id="7bb7295d3b950c4331c9fe377d6496cd34ea08ee" translate="yes" xml:space="preserve">
          <source>Enable all options at once except OFFSETS, OFFSETSDBG and BUFFERS. (To get every single option without exception, use both ALL and EXTRA.)</source>
          <target state="translated">OFFSETS、OFFSETSDBG、BUFFERS以外のすべてのオプションを一度に有効にします。(例外なくすべてのオプションを取得するには、ALLとEXTRAの両方を使用します)。</target>
        </trans-unit>
        <trans-unit id="605ee0c2cc03659c524ca183e1ce55b5400e895c" translate="yes" xml:space="preserve">
          <source>Enable all options at once except OFFSETS, OFFSETSDBG, BUFFERS, WILDCARD, and DUMP_PRE_OPTIMIZE. (To get every single option without exception, use both ALL and EXTRA, or starting in 5.30 on a &lt;code&gt;-DDEBUGGING&lt;/code&gt;-enabled perl interpreter, use the &lt;b&gt;-Drv&lt;/b&gt; command-line switches.)</source>
          <target state="translated">OFFSETS、OFFSETSDBG、BUFFERS、WILDCARD、およびDUMP_PRE_OPTIMIZEを除くすべてのオプションを一度に有効にします。（例外なくすべてのオプションを取得するには、ALLとEXTRAの両方を使用するか、 &lt;code&gt;-DDEBUGGING&lt;/code&gt; 対応のperlインタープリターで5.30以降、&lt;b&gt;-Drv&lt;/b&gt;コマンドラインスイッチを使用します。）</target>
        </trans-unit>
        <trans-unit id="7c54f50dbe8b1d2b9d4279a847b1af1e242ac5db" translate="yes" xml:space="preserve">
          <source>Enable caching of timings for the null loop. The time taken for COUNT rounds of the null loop will be calculated only once for each different COUNT used.</source>
          <target state="translated">NULLループのタイミングのキャッシングを有効にします。NULLループのCOUNTラウンドにかかる時間は、使用されるCOUNTが異なるごとに1回だけ計算されます。</target>
        </trans-unit>
        <trans-unit id="af34a92294247e0324cf9cb4ab7591c0157d3cc4" translate="yes" xml:space="preserve">
          <source>Enable debugging of offsets information. This emits copious amounts of trace information and doesn't mesh well with other debug options.</source>
          <target state="translated">オフセット情報のデバッグを有効にします。これは膨大な量のトレース情報を放出し、他のデバッグオプションとうまく噛み合わない。</target>
        </trans-unit>
        <trans-unit id="b22eafe66ff9363c232181834545b3e27fc24dda" translate="yes" xml:space="preserve">
          <source>Enable debugging of start-point optimisations.</source>
          <target state="translated">スタートポイント最適化のデバッグを有効にします。</target>
        </trans-unit>
        <trans-unit id="b1ed4094a3f33fb70b77d3ab5d3985c70cad2408" translate="yes" xml:space="preserve">
          <source>Enable debugging of states in the engine.</source>
          <target state="translated">エンジンの状態のデバッグを有効にします。</target>
        </trans-unit>
        <trans-unit id="6cc2f783a9f51a88860f66f38bb6654412ccd3b7" translate="yes" xml:space="preserve">
          <source>Enable debugging of the \G modifier.</source>
          <target state="translated">G 修飾子のデバッグを有効にする。</target>
        </trans-unit>
        <trans-unit id="8b1fc985774fbcf866da54c3c69b513cb35f440c" translate="yes" xml:space="preserve">
          <source>Enable debugging of the recursion stack in the engine. Enabling or disabling this option automatically does the same for debugging states as well. This output from this can be quite large.</source>
          <target state="translated">エンジンの再帰スタックのデバッグを有効にします。このオプションを有効にしたり無効にしたりすると、自動的にデバッグ状態についても同じことが行われます。この出力は非常に大きくなることがあります。</target>
        </trans-unit>
        <trans-unit id="ed7bfb6f5b63e62332ddfc6bbbaf1f7a2a0d576b" translate="yes" xml:space="preserve">
          <source>Enable debugging output.</source>
          <target state="translated">デバッグ出力を有効にします。</target>
        </trans-unit>
        <trans-unit id="139048524bc56f6e0f7692e0183c038f5bfd94d8" translate="yes" xml:space="preserve">
          <source>Enable debugging the capture group storage during match. Warning, this can potentially produce extremely large output.</source>
          <target state="translated">マッチ中のキャプチャグループストレージのデバッグを有効にします。警告、これは非常に大きな出力を生成する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d009cb1e8dd02879690564369c53161c26ba761e" translate="yes" xml:space="preserve">
          <source>Enable enhanced TRIE debugging. Enhances both TRIEE and TRIEC.</source>
          <target state="translated">強化されたTRIEデバッグを有効にします。TRIEE と TRIEC の両方を強化します。</target>
        </trans-unit>
        <trans-unit id="ef5eb4e7b2447bf19044b39ea2e195cd6618fd76" translate="yes" xml:space="preserve">
          <source>Enable enhanced optimisation debugging and start-point optimisations. Probably not useful except when debugging the regexp engine itself.</source>
          <target state="translated">最適化のデバッグとスタートポイントの最適化を強化します。おそらく、正規表現エンジン自体をデバッグする場合を除いては有用ではないでしょう。</target>
        </trans-unit>
        <trans-unit id="07e248f2e2b8869e02ee4bbd9a3b445fa1e02104" translate="yes" xml:space="preserve">
          <source>Enable new features</source>
          <target state="translated">新しい機能を有効にする</target>
        </trans-unit>
        <trans-unit id="82441ac52d9ab4a30896d0bdffedf2a9be220d10" translate="yes" xml:space="preserve">
          <source>Enable recognition of &lt;code&gt;IN&lt;/code&gt; , &lt;code&gt;OUT_LIST&lt;/code&gt; and &lt;code&gt;INOUT_LIST&lt;/code&gt; declarations. Default is true.</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; 、 &lt;code&gt;OUT_LIST&lt;/code&gt; および &lt;code&gt;INOUT_LIST&lt;/code&gt; 宣言の認識を有効にします。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="fdedc1b60d005db3c310868a2b39cafdd59a5eb1" translate="yes" xml:space="preserve">
          <source>Enable recognition of &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;OUT_LIST&lt;/code&gt; and &lt;code&gt;INOUT_LIST&lt;/code&gt; declarations. Default is true.</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; 、 &lt;code&gt;OUT_LIST&lt;/code&gt; 、および &lt;code&gt;INOUT_LIST&lt;/code&gt; 宣言の認識を有効にします。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="a04f3ebaeb9867e3812b1e018ab387d5924f7ef6" translate="yes" xml:space="preserve">
          <source>Enable recognition of ANSI-like descriptions of function signature. Default is true.</source>
          <target state="translated">関数シグネチャのANSIライクな記述の認識を有効にします。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="8fa85b7034e330ca755a5c73c63b76397e087c71" translate="yes" xml:space="preserve">
          <source>Enable simple signal handling</source>
          <target state="translated">シンプルな信号処理を可能にする</target>
        </trans-unit>
        <trans-unit id="3c3a9e686f47a71d2d2bd49c91054de061662284" translate="yes" xml:space="preserve">
          <source>Enable the breakpoint so it will stop the execution of the program.</source>
          <target state="translated">ブレークポイントを有効にして、プログラムの実行を停止させます。</target>
        </trans-unit>
        <trans-unit id="4a2a1634a6a3ef06d28edb649a7e0d6a7bf8554f" translate="yes" xml:space="preserve">
          <source>Enable the dumping of the compiled pattern before the optimization phase.</source>
          <target state="translated">最適化フェーズの前にコンパイルされたパターンのダンプを有効にします。</target>
        </trans-unit>
        <trans-unit id="dcd4f88c7522d41d4cd111539c1b1db699d331e1" translate="yes" xml:space="preserve">
          <source>Enable the options enabled by &quot;All&quot;, plus STATE, TRIEC, and TRIEM.</source>
          <target state="translated">すべて」で有効になっているオプションに加えて、STATE、TRIEC、およびTRIEMを有効にします。</target>
        </trans-unit>
        <trans-unit id="6607ef3ad5faa3d582896ad07ab9785dae90ca8e" translate="yes" xml:space="preserve">
          <source>Enable this option if you wish all spawned processes to be killed if the initially spawned process (the parent) is killed or dies without waiting for child processes.</source>
          <target state="translated">最初にスポーンされたプロセス (親プロセス)が殺されるか、子プロセスを待たずに死ぬ場合に、スポーンされたすべてのプロセスが殺されるようにしたい場合は、このオプションを有効にします。</target>
        </trans-unit>
        <trans-unit id="b7b7c90b9b4e4815dd4d9b7ad285d70eda8ebb7d" translate="yes" xml:space="preserve">
          <source>Enable/disable UTF-8 (or UTF-EBCDIC) in source code</source>
          <target state="translated">ソースコードでUTF-8(またはUTF-EBCDIC)を有効/無効にする</target>
        </trans-unit>
        <trans-unit id="80acee2f67ff4da70c6002b5a0e094b4d2f31c43" translate="yes" xml:space="preserve">
          <source>Enables all warnings regardless of &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; or &lt;code&gt;$^W&lt;/code&gt; . See &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">かかわらず、すべての警告を有効にし &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; や &lt;code&gt;$^W&lt;/code&gt; 。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7b9030574fd9ae227a9d9bdb446332c94bd2ab62" translate="yes" xml:space="preserve">
          <source>Enables all warnings regardless of &lt;code&gt;no warnings&lt;/code&gt; or &lt;code&gt;$^W&lt;/code&gt;. See &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">警告 &lt;code&gt;no warnings&lt;/code&gt; または &lt;code&gt;$^W&lt;/code&gt; 関係なく、すべての警告を有効にします。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1089d1ea88536805f57559da91fba3d7a2761ecb" translate="yes" xml:space="preserve">
          <source>Enables certain optimizations. The only optimization that is currently affected is the use of</source>
          <target state="translated">特定の最適化を有効にします。現在のところ影響を受ける唯一の最適化は</target>
        </trans-unit>
        <trans-unit id="c2846984fdcc8df09665bcc109bb5474af315f7d" translate="yes" xml:space="preserve">
          <source>Enables or disable debugging by setting the &lt;code&gt;$Benchmark::Debug&lt;/code&gt; flag:</source>
          <target state="translated">&lt;code&gt;$Benchmark::Debug&lt;/code&gt; フラグを設定して、デバッグを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="9d480a633ce9bb7aa941c3d98a4cbb4d5ac2bf6a" translate="yes" xml:space="preserve">
          <source>Enables output related to the optimisation phase of compilation.</source>
          <target state="translated">コンパイルの最適化フェーズに関連する出力を有効にします。</target>
        </trans-unit>
        <trans-unit id="8017ccdfaea2ad3f4aa3c94d96674940233700a6" translate="yes" xml:space="preserve">
          <source>Enables use of the prompt specified by pmt=usr-prmpt on input from the terminal.</source>
          <target state="translated">ターミナルからの入力に対して pmt=usr-prmpt で指定されたプロンプトの使用を有効にします。</target>
        </trans-unit>
        <trans-unit id="e55c00ee236233e66b2d47bad2c1ced81c03c99b" translate="yes" xml:space="preserve">
          <source>Enabling &lt;code&gt;bundling_values&lt;/code&gt; will disable the other two styles of bundling.</source>
          <target state="translated">bundling_values &lt;code&gt;bundling_values&lt;/code&gt; 有効にすると、他の2つのスタイルのバンドリングが無効になります。</target>
        </trans-unit>
        <trans-unit id="b18f32d5490f57e3f4e0f875c588a069b00f5590" translate="yes" xml:space="preserve">
          <source>Enabling the &lt;code&gt;utf8&lt;/code&gt; pragma has the following effect:</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; プラグマを有効にすると、次の効果があります。</target>
        </trans-unit>
        <trans-unit id="7fe2071dd005ed63dfae111e383f15806253aa16" translate="yes" xml:space="preserve">
          <source>Enabling this option will allow single-character options to be bundled. To distinguish bundles from long option names, long options</source>
          <target state="translated">こ のオプシ ョ ンを有効にする と 、 1 文字のオプシ ョ ンをバ ン ド ル化す る こ と が可能にな り ます。バンドルを長いオプシ ョ ン名と区別するために、 長いオプシ ョ ン名</target>
        </trans-unit>
        <trans-unit id="867d7c3018e88764391a8a8cad25d71d6020f155" translate="yes" xml:space="preserve">
          <source>Encapsulation</source>
          <target state="translated">Encapsulation</target>
        </trans-unit>
        <trans-unit id="2059232562a427f990749c23a8c8ebdde1b9014d" translate="yes" xml:space="preserve">
          <source>Encapsulation is important for several reasons. First, it allows you to separate the public API from the private implementation. This means you can change that implementation without breaking the API.</source>
          <target state="translated">カプセル化が重要な理由はいくつかあります。第一に、パブリック API とプライベート実装を分離することができます。これは、API を壊すことなくその実装を変更できることを意味します。</target>
        </trans-unit>
        <trans-unit id="782e817cf07d938d62f7f0517e130f19ec6b4cf1" translate="yes" xml:space="preserve">
          <source>Encode</source>
          <target state="translated">Encode</target>
        </trans-unit>
        <trans-unit id="e276943b90499b3ae3cf8000afe6554906eb7f6a" translate="yes" xml:space="preserve">
          <source>Encode - character encodings in Perl</source>
          <target state="translated">Encode-Perl での文字エンコーディング</target>
        </trans-unit>
        <trans-unit id="3c5a64c26d9e551da565d681ba9a9c2bc735a49c" translate="yes" xml:space="preserve">
          <source>Encode Implementation Base Class</source>
          <target state="translated">エンコード実装基底クラス</target>
        </trans-unit>
        <trans-unit id="39e91613c24a80edc94f024f6bfb3382d7e896d8" translate="yes" xml:space="preserve">
          <source>Encode a scalar, hash reference or array reference as YAML.</source>
          <target state="translated">スカラ、ハッシュ参照、配列参照をYAMLとしてエンコードします。</target>
        </trans-unit>
        <trans-unit id="a78fa70f2287f5b23c037b4b8025fba5e083909c" translate="yes" xml:space="preserve">
          <source>Encode aliases &lt;code&gt;GB2312&lt;/code&gt; to &lt;code&gt;euc-cn&lt;/code&gt; in full agreement with IANA registration. &lt;code&gt;cp936&lt;/code&gt; is supported separately.</source>
          <target state="translated">IANA登録に完全に同意して、エイリアス &lt;code&gt;GB2312&lt;/code&gt; を &lt;code&gt;euc-cn&lt;/code&gt; にエンコードします。 &lt;code&gt;cp936&lt;/code&gt; は個別にサポートされています。</target>
        </trans-unit>
        <trans-unit id="09bb3342b0d46392bfdbf9d685c504c20ab444c4" translate="yes" xml:space="preserve">
          <source>Encode aliases &lt;code&gt;KS_C_5601-1987&lt;/code&gt; to &lt;code&gt;cp949&lt;/code&gt; to reflect this common misusage.</source>
          <target state="translated">この一般的な誤用を反映するために、エイリアス &lt;code&gt;KS_C_5601-1987&lt;/code&gt; を &lt;code&gt;cp949&lt;/code&gt; にエンコードします。</target>
        </trans-unit>
        <trans-unit id="53b3896738d8cf6b15e5278f1369de611febee2e" translate="yes" xml:space="preserve">
          <source>Encode and decode according to the base64 scheme for &quot;URL applications&quot; [1]. This is a variant of the base64 encoding which does not use padding, does not break the string into multiple lines and use the characters &quot;-&quot; and &quot;_&quot; instead of &quot;+&quot; and &quot;/&quot; to avoid using reserved URL characters.</source>
          <target state="translated">URLアプリケーション」[1]のためのbase64スキームに従ってエンコードとデコードを行います。これは、パディングを使用せず、文字列を複数行に分割せず、予約された URL 文字の使用を避けるために &quot;+&quot; と &quot;/&quot; の代わりに &quot;-&quot; と &quot;_&quot; を使用する base64 エンコーディングの変形です。</target>
        </trans-unit>
        <trans-unit id="3d01d8346257820c445f334ba81d16daa9f20915" translate="yes" xml:space="preserve">
          <source>Encode consists of a collection of modules whose details are too extensive to fit in one document. This one itself explains the top-level APIs and general topics at a glance. For other topics and more details, see the documentation for these modules:</source>
          <target state="translated">Encodeは、1つのドキュメントに収まりきらないほど詳細なモジュールの集合体で構成されています。このモジュール自体は、トップレベルの API と一般的なトピックを一目で説明しています。他のトピックや詳細については、これらのモジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="90f9c590e83b0f216769d26a64108ee3d5af71e4" translate="yes" xml:space="preserve">
          <source>Encode converts from the beginning to \x7E, leaving \xe3 in the buffer because it is invalid (partial character).</source>
          <target state="translated">Encodeでは、最初から\x7Eに変換し、無効(部分文字)なのでバッファに\xe3を残しています。</target>
        </trans-unit>
        <trans-unit id="5888dafc03b9c4595a9ef704f5d312540bc3c184" translate="yes" xml:space="preserve">
          <source>Encode data by calling the encode_base64() function. The first argument is the byte string to encode. The second argument is the line-ending sequence to use. It is optional and defaults to &quot;\n&quot;. The returned encoded string is broken into lines of no more than 76 characters each and it will end with $eol unless it is empty. Pass an empty string as second argument if you do not want the encoded string to be broken into lines.</source>
          <target state="translated">encode_base64()関数を呼び出してデータをエンコードします。最初の引数はエンコードするバイト文字列です。第二引数は、使用する改行シーケンスです。これはオプションで、デフォルトは &quot;\n&quot; です。返されるエンコードされた文字列は、それぞれ76文字以内の行に分割され、 空でない限り$eolで終わります。エンコードされた文字列を行に分割したくない場合は、 空の文字列を第二引数に渡してください。</target>
        </trans-unit>
        <trans-unit id="41b574dce061d3c694f8cd7218cbb982019874dd" translate="yes" xml:space="preserve">
          <source>Encode method takes a scalar string as its input and uses &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;strict UTF-8&lt;/a&gt; encoder for encoding it to UTF-8 bytes. Then a sequence of UTF-8 bytes is encoded into MIME encoded-words (&lt;code&gt;MIME-Header&lt;/code&gt; and &lt;code&gt;MIME-B&lt;/code&gt; use a Base64 variant while &lt;code&gt;MIME-Q&lt;/code&gt; uses a Quoted-Printable variant) where each MIME encoded-word is limited to 75 characters. MIME encoded-words are separated by &lt;code&gt;CRLF SPACE&lt;/code&gt; and joined to one output string. Output string is suitable for unstructured field body of the email header.</source>
          <target state="translated">Encodeメソッドは、入力としてスカラー文字列を受け取り、&lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;厳密なUTF-8&lt;/a&gt;エンコーダーを使用してUTF-8バイトにエンコードします。次に、UTF-8バイトのシーケンスがMIMEエンコードワードにエンコードされます（ &lt;code&gt;MIME-Header&lt;/code&gt; と &lt;code&gt;MIME-B&lt;/code&gt; はBase64バリアントを使用し、 &lt;code&gt;MIME-Q&lt;/code&gt; はQuoted-Printableバリアントを使用します）。ここで、各MIMEエンコードワードは75文字に制限されています。MIMEエンコードされた単語は、 &lt;code&gt;CRLF SPACE&lt;/code&gt; で区切られ、1つの出力文字列に結合されます。出力文字列は、電子メールヘッダーの非構造化フィールド本文に適しています。</target>
        </trans-unit>
        <trans-unit id="c1878d2d011ae54a82ea1609093ac6e764e131f0" translate="yes" xml:space="preserve">
          <source>Encode separately supports &lt;code&gt;Big5&lt;/code&gt; and &lt;code&gt;cp950&lt;/code&gt;.</source>
          <target state="translated">Encodeは、 &lt;code&gt;Big5&lt;/code&gt; と &lt;code&gt;cp950&lt;/code&gt; を個別にサポートします。</target>
        </trans-unit>
        <trans-unit id="18f5b904d93724daaede7a0f5d5a6e265bb69f88" translate="yes" xml:space="preserve">
          <source>Encode separately supports &lt;code&gt;Shift_JIS&lt;/code&gt; and &lt;code&gt;cp932&lt;/code&gt;.</source>
          <target state="translated">エンコードは、 &lt;code&gt;Shift_JIS&lt;/code&gt; と &lt;code&gt;cp932&lt;/code&gt; を個別にサポートします。</target>
        </trans-unit>
        <trans-unit id="ceff1e1e1923f02a7939b507f33300e3a696eaa2" translate="yes" xml:space="preserve">
          <source>Encode up to 1.86 internally used &quot;local $_&quot; to implement this older form. But consider the code below;</source>
          <target state="translated">1.86までのエンコードは、この古い形式を実装するために内部的に &quot;ローカル$_&quot;を使用していました。しかし、以下のコードを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="dec95d5717280ac4e0be7dcb9e6fc7bc4a47ecee" translate="yes" xml:space="preserve">
          <source>Encode uses the Unicode Character Map (UCM) format for source character mappings. This format is used by IBM's ICU package and was adopted by Nick Ing-Simmons for use with the Encode module. Since UCM is more flexible than Tcl's Encoding Map and far more user-friendly, this is the recommended format for Encode now.</source>
          <target state="translated">Encode はソース文字マッピングに Unicode Character Map (UCM)フォーマットを使用します。このフォーマットはIBMのICUパッケージで使用されており、Encodeモジュールで使用するためにNick Ing-Simmonsによって採用されました。UCMはTclのEncoding Mapよりも柔軟性が高く、はるかにユーザーフレンドリーなので、これは現在Encodeに推奨されているフォーマットです。</target>
        </trans-unit>
        <trans-unit id="5d2cad9401edfbef92e75be01cb40c4e9ecc4cf6" translate="yes" xml:space="preserve">
          <source>Encode::Alias</source>
          <target state="translated">Encode::Alias</target>
        </trans-unit>
        <trans-unit id="552324ae1eb023be362415291b1291f3f52556a7" translate="yes" xml:space="preserve">
          <source>Encode::Alias - alias definitions to encodings</source>
          <target state="translated">Encode::Alias-エンコーディングへのエイリアス定義</target>
        </trans-unit>
        <trans-unit id="cc91ef6d8b4186209599d785324e380db05af545" translate="yes" xml:space="preserve">
          <source>Encode::Byte</source>
          <target state="translated">Encode::Byte</target>
        </trans-unit>
        <trans-unit id="d4b97f8bcca673137fe3a8c4311fa29b1376a129" translate="yes" xml:space="preserve">
          <source>Encode::Byte - Single Byte Encodings</source>
          <target state="translated">Encode::Byte-シングルバイトエンコーディング</target>
        </trans-unit>
        <trans-unit id="930606b772f93c8896784219cc491d7a0cee7e76" translate="yes" xml:space="preserve">
          <source>Encode::Byte -- Extended ASCII</source>
          <target state="translated">Encode::Byte --拡張 ASCII</target>
        </trans-unit>
        <trans-unit id="34f240792605e5eac4a6580e33ee29dcc7a428c2" translate="yes" xml:space="preserve">
          <source>Encode::Byte implements most single-byte encodings except for Symbols and EBCDIC. The following encodings are based on single-byte encodings implemented as extended ASCII. Most of them map \x80-\xff (upper half) to non-ASCII characters.</source>
          <target state="translated">Encode::Byte は、Symbols と EBCDIC を除くほとんどのシングルバイトエンコーディングを実装しています。以下のエンコーディングは、拡張ASCIIとして実装されたシングルバイトエンコーディングに基づいています。それらのほとんどは、上半分の\x80-\xffを非ASCII文字にマッピングしています。</target>
        </trans-unit>
        <trans-unit id="8da29f26c3e55351d546a404e8b09b53f82affc8" translate="yes" xml:space="preserve">
          <source>Encode::CJKConstants</source>
          <target state="translated">Encode::CJKConstants</target>
        </trans-unit>
        <trans-unit id="97376755cadc9b08ac2bdcffa80b5c4759e6f7df" translate="yes" xml:space="preserve">
          <source>Encode::CJKConstants.pm -- Internally used by Encode::??::ISO_2022_*</source>
          <target state="translated">Encode::CJKConstants.pm --Encode:?</target>
        </trans-unit>
        <trans-unit id="44fea5bddc6721fb4b956554b9d88900826d60c7" translate="yes" xml:space="preserve">
          <source>Encode::CN</source>
          <target state="translated">Encode::CN</target>
        </trans-unit>
        <trans-unit id="40f3392265131b672490757c292c084a525d4184" translate="yes" xml:space="preserve">
          <source>Encode::CN - China-based Chinese Encodings</source>
          <target state="translated">Encode::CN-中国ベースの中国語エンコーディング</target>
        </trans-unit>
        <trans-unit id="56aaed97f5a41017265e5458630887666002ff6b" translate="yes" xml:space="preserve">
          <source>Encode::CN -- Continental China</source>
          <target state="translated">エンコード::CN --中国大陸</target>
        </trans-unit>
        <trans-unit id="207660f321fc12762f2e79b28e35fbb26736a3e7" translate="yes" xml:space="preserve">
          <source>Encode::CN::HZ</source>
          <target state="translated">Encode::CN::HZ</target>
        </trans-unit>
        <trans-unit id="622d7b0a21ca0c1a08d6dda20da0057e0358570c" translate="yes" xml:space="preserve">
          <source>Encode::CN::HZ -- internally used by Encode::CN</source>
          <target state="translated">Encode::CN::HZ --Encode::CN によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="b24bb381f68ba02b49c4c2cd2767f183910da09e" translate="yes" xml:space="preserve">
          <source>Encode::Config</source>
          <target state="translated">Encode::Config</target>
        </trans-unit>
        <trans-unit id="0b7c024127a98fc8be2586eade5f76bc22701aab" translate="yes" xml:space="preserve">
          <source>Encode::Config -- internally used by Encode</source>
          <target state="translated">Encode::Config --内部的には Encode によって使用されます。</target>
        </trans-unit>
        <trans-unit id="2a8ba6ae9bd0735a827d283930aa3dc28cd2cae3" translate="yes" xml:space="preserve">
          <source>Encode::EBCDIC</source>
          <target state="translated">Encode::EBCDIC</target>
        </trans-unit>
        <trans-unit id="3b31a7154f7c03e9be274aacce1e4dc5a66d5ec6" translate="yes" xml:space="preserve">
          <source>Encode::EBCDIC - EBCDIC Encodings</source>
          <target state="translated">Encode::EBCDIC-EBCDIC エンコーディング</target>
        </trans-unit>
        <trans-unit id="a0fb1479e2e68a75a05e36aff16d787758a1778e" translate="yes" xml:space="preserve">
          <source>Encode::Encoder</source>
          <target state="translated">Encode::Encoder</target>
        </trans-unit>
        <trans-unit id="3bfd37620385e094ff5d1811f8a5aaf8e5a7a125" translate="yes" xml:space="preserve">
          <source>Encode::Encoder -- Object Oriented Encoder</source>
          <target state="translated">Encode::Encode --オブジェクト指向エンコーダ</target>
        </trans-unit>
        <trans-unit id="4551a7e4c9181d379ae1288237c1ebecccd59bb8" translate="yes" xml:space="preserve">
          <source>Encode::Encoding</source>
          <target state="translated">Encode::Encoding</target>
        </trans-unit>
        <trans-unit id="932dfcdaef25e880e85283d712d29f239746970b" translate="yes" xml:space="preserve">
          <source>Encode::Encoding - Encode Implementation Base Class</source>
          <target state="translated">Encode::Encoding-エンコード実装基底クラス</target>
        </trans-unit>
        <trans-unit id="77662ad703615bf25ca69905bb6db23d72296bb9" translate="yes" xml:space="preserve">
          <source>Encode::GSM0338</source>
          <target state="translated">Encode::GSM0338</target>
        </trans-unit>
        <trans-unit id="ede01420f58b4c2565b3da82244d84c95da5b4af" translate="yes" xml:space="preserve">
          <source>Encode::GSM0338 -- ESTI GSM 03.38 Encoding</source>
          <target state="translated">Encode::GSM0338 --ESTI GSM 03.38 エンコーディング</target>
        </trans-unit>
        <trans-unit id="e93ed447e10d95864f0386c026ec121cd47c60ab" translate="yes" xml:space="preserve">
          <source>Encode::Guess</source>
          <target state="translated">Encode::Guess</target>
        </trans-unit>
        <trans-unit id="8b1b151431a67a55222cbbcf0270cd834cbd2d46" translate="yes" xml:space="preserve">
          <source>Encode::Guess -- Guesses encoding from data</source>
          <target state="translated">Encode::Guess --データからエンコーディングを推測する</target>
        </trans-unit>
        <trans-unit id="f460e270f104cac10b54ab28764ae1739d32a63f" translate="yes" xml:space="preserve">
          <source>Encode::Guess does not work on EBCDIC platforms.</source>
          <target state="translated">Encode::Guess は EBCDIC プラットフォームでは動作しません。</target>
        </trans-unit>
        <trans-unit id="8030a57667933f97cc9c39195dbf244e622a18a0" translate="yes" xml:space="preserve">
          <source>Encode::Guess enables you to guess in what encoding a given data is encoded, or at least tries to.</source>
          <target state="translated">Encode::Guess は、与えられたデータがどのようなエンコーディングでエンコードされているかを推測したり、少なくとも推測しようとしたりすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="4c76dcf9e721cd63d6b7c64ae9ac390cd36bca44" translate="yes" xml:space="preserve">
          <source>Encode::Guess-&amp;gt;add_suspects</source>
          <target state="translated">Encode::Guess-&amp;gt;add_suspects</target>
        </trans-unit>
        <trans-unit id="e5a679cb789609bd6b4f6bc29c3c93aa2af2b209" translate="yes" xml:space="preserve">
          <source>Encode::Guess-&amp;gt;guess($data)</source>
          <target state="translated">Encode::Guess-&amp;gt;guess($data)</target>
        </trans-unit>
        <trans-unit id="91b94bb51243fdcafbdb22a3d3b975f9b8695d1d" translate="yes" xml:space="preserve">
          <source>Encode::Guess-&amp;gt;set_suspects</source>
          <target state="translated">Encode::Guess-&amp;gt;set_suspects</target>
        </trans-unit>
        <trans-unit id="a0735b72517ca9ff3c7f14337ef1ad3eeea0e3f0" translate="yes" xml:space="preserve">
          <source>Encode::HanExtra -- More Chinese via CPAN</source>
          <target state="translated">Encode::HanExtra --CPANを介してより多くの中国語</target>
        </trans-unit>
        <trans-unit id="3f9eb31f93d16c6f8ad3ca48a91dab8c5071fe46" translate="yes" xml:space="preserve">
          <source>Encode::JIS2K -- JIS X 0213 encodings via CPAN</source>
          <target state="translated">Encode::JIS2K --CPAN による JIS X 0213 エンコーディング</target>
        </trans-unit>
        <trans-unit id="e37ee0e2e550bc3634d116c838f3ba94375b8c47" translate="yes" xml:space="preserve">
          <source>Encode::JP</source>
          <target state="translated">Encode::JP</target>
        </trans-unit>
        <trans-unit id="341afac777ffb0b1e52b3a6aa26c1fcd31687ea1" translate="yes" xml:space="preserve">
          <source>Encode::JP - Japanese Encodings</source>
          <target state="translated">Encode::JP-日本語エンコーディング</target>
        </trans-unit>
        <trans-unit id="4d2ce26abda0dd0d175937050c97398037e5cc87" translate="yes" xml:space="preserve">
          <source>Encode::JP -- Japan</source>
          <target state="translated">エンコード::JP --日本</target>
        </trans-unit>
        <trans-unit id="1e6a27be2a727bdf7e4a113a80bef5ed7da8c32a" translate="yes" xml:space="preserve">
          <source>Encode::JP::H2Z</source>
          <target state="translated">Encode::JP::H2Z</target>
        </trans-unit>
        <trans-unit id="61c842d29f655e9a02cc88f2dfe176c79b0a7ccb" translate="yes" xml:space="preserve">
          <source>Encode::JP::H2Z -- internally used by Encode::JP::2022_JP*</source>
          <target state="translated">Encode::JP::H2Z --Encode::JP::2022_JP*によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="57d3b7cea6d80534a4eab96981ae8b12e91a572d" translate="yes" xml:space="preserve">
          <source>Encode::JP::JIS7</source>
          <target state="translated">Encode::JP::JIS7</target>
        </trans-unit>
        <trans-unit id="728d78512ef0e5fd10db6af9228f9f55491f142e" translate="yes" xml:space="preserve">
          <source>Encode::JP::JIS7 -- internally used by Encode::JP</source>
          <target state="translated">Encode::JP::JIS7 --Encode::JP によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="9292d6d6d6c3d612ab88b4d0a9b44cce420ff5ea" translate="yes" xml:space="preserve">
          <source>Encode::KR</source>
          <target state="translated">Encode::KR</target>
        </trans-unit>
        <trans-unit id="32eef4f01d06c098fb548d1006c901f52a812e7e" translate="yes" xml:space="preserve">
          <source>Encode::KR - Korean Encodings</source>
          <target state="translated">Encode::KR-韓国語エンコーディング</target>
        </trans-unit>
        <trans-unit id="1af58b45e5ddb5840265bad145aa164eaffbeea7" translate="yes" xml:space="preserve">
          <source>Encode::KR -- Korea</source>
          <target state="translated">エンコード::KR --韓国</target>
        </trans-unit>
        <trans-unit id="adea371ce7b9ff3c3566f35ac1420ac2e2ede009" translate="yes" xml:space="preserve">
          <source>Encode::KR::2022_KR</source>
          <target state="translated">Encode::KR::2022_KR</target>
        </trans-unit>
        <trans-unit id="3976fa623737771006bbaafdf23430529728651d" translate="yes" xml:space="preserve">
          <source>Encode::KR::2022_KR -- internally used by Encode::KR</source>
          <target state="translated">Encode::KR::2022_KR --Encode::KR によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="e9d431857fb2daca858cf0e24708414e6076d14b" translate="yes" xml:space="preserve">
          <source>Encode::MIME::Header</source>
          <target state="translated">Encode::MIME::Header</target>
        </trans-unit>
        <trans-unit id="f2030bc40a6a13ab85bce58de044a451e0f2022a" translate="yes" xml:space="preserve">
          <source>Encode::MIME::Header -- MIME 'B' and 'Q' header encoding</source>
          <target state="translated">Encode::MIME::Header --MIME 'B' および 'Q' ヘッダーエンコーディング</target>
        </trans-unit>
        <trans-unit id="8d4bde122083dca41ec16dc22bc309e1ca8f4388" translate="yes" xml:space="preserve">
          <source>Encode::MIME::Header -- MIME encoding for an unstructured email header</source>
          <target state="translated">Encode::MIME::Header --構造化されていない電子メールヘッダのための MIME エンコーディング</target>
        </trans-unit>
        <trans-unit id="660e24530b4b214dbcf404910cce6c40e5661246" translate="yes" xml:space="preserve">
          <source>Encode::MIME::NAME -- internally used by Encode</source>
          <target state="translated">Encode::MIME::NAME --Encode によって内部的に使用される</target>
        </trans-unit>
        <trans-unit id="5f4e8291cc2cc181fac6cfb29c5aaebe19ffe8d7" translate="yes" xml:space="preserve">
          <source>Encode::MIME::Name</source>
          <target state="translated">Encode::MIME::Name</target>
        </trans-unit>
        <trans-unit id="28fab0785bc684a2a52d97e53a66b49d5527d9be" translate="yes" xml:space="preserve">
          <source>Encode::PerlIO</source>
          <target state="translated">Encode::PerlIO</target>
        </trans-unit>
        <trans-unit id="41a3b8bb23e3f7b5138303897788011e915cffdf" translate="yes" xml:space="preserve">
          <source>Encode::PerlIO -- a detailed document on Encode and PerlIO</source>
          <target state="translated">Encode::PerlIO --Encode と PerlIO の詳細なドキュメント</target>
        </trans-unit>
        <trans-unit id="ecd20dbfc849a216b8ec8f0aae8d9f22755869e7" translate="yes" xml:space="preserve">
          <source>Encode::Supported</source>
          <target state="translated">Encode::Supported</target>
        </trans-unit>
        <trans-unit id="eb0c5a3a273c3a4c4ad776ddaca0c86b8236ef3c" translate="yes" xml:space="preserve">
          <source>Encode::Supported -- Encodings supported by Encode</source>
          <target state="translated">Encode::Supported --Encode がサポートするエンコーディング</target>
        </trans-unit>
        <trans-unit id="617dc5e07f69ab0016776f02fcae4aa5417d4cf3" translate="yes" xml:space="preserve">
          <source>Encode::Symbol</source>
          <target state="translated">Encode::Symbol</target>
        </trans-unit>
        <trans-unit id="305d6a4ecfbcb83575125920205199ebfad9ecbc" translate="yes" xml:space="preserve">
          <source>Encode::Symbol - Symbol Encodings</source>
          <target state="translated">Encode::Symbol-シンボルエンコーディング</target>
        </trans-unit>
        <trans-unit id="246710749ac240e0889edf0116d38bdff86ae7a9" translate="yes" xml:space="preserve">
          <source>Encode::Symbols</source>
          <target state="translated">Encode::Symbols</target>
        </trans-unit>
        <trans-unit id="7353083e24fd78826faff9ec9dd3ca1f0abfeb68" translate="yes" xml:space="preserve">
          <source>Encode::TW</source>
          <target state="translated">Encode::TW</target>
        </trans-unit>
        <trans-unit id="169a69c17f2e47c33a2090f250bc6f54465bac9c" translate="yes" xml:space="preserve">
          <source>Encode::TW - Taiwan-based Chinese Encodings</source>
          <target state="translated">Encode::TW-台湾ベースの中国語エンコーディング</target>
        </trans-unit>
        <trans-unit id="0a45467a524b47a94315245ccf968b728241554a" translate="yes" xml:space="preserve">
          <source>Encode::TW -- Taiwan</source>
          <target state="translated">エンコード::TW --台湾</target>
        </trans-unit>
        <trans-unit id="f419db0e193bdb95ad1bf1d32e4308acad0add9f" translate="yes" xml:space="preserve">
          <source>Encode::Unicode</source>
          <target state="translated">Encode::Unicode</target>
        </trans-unit>
        <trans-unit id="2ba2c8325c871771b84294002113cdbbccea72d4" translate="yes" xml:space="preserve">
          <source>Encode::Unicode -- Various Unicode Transformation Formats</source>
          <target state="translated">Encode::Unicode --さまざまな Unicode 変換フォーマット</target>
        </trans-unit>
        <trans-unit id="510f299bed8b57aaad0840b1977677d5faf52278" translate="yes" xml:space="preserve">
          <source>Encode::Unicode -- other Unicode encodings</source>
          <target state="translated">Encode::Unicode --その他の Unicode エンコーディング</target>
        </trans-unit>
        <trans-unit id="24e91aa87151df83dcd6a084acf2bef4fbe28cca" translate="yes" xml:space="preserve">
          <source>Encode::Unicode::UTF7</source>
          <target state="translated">Encode::Unicode::UTF7</target>
        </trans-unit>
        <trans-unit id="46189c892fa791248c9e1697ba2bd11d7d60c2a5" translate="yes" xml:space="preserve">
          <source>Encode::Unicode::UTF7 -- UTF-7 encoding</source>
          <target state="translated">Encode::Unicode::UTF7 --UTF-7 エンコーディング</target>
        </trans-unit>
        <trans-unit id="89d34727747f027f9d8e6303c1a70b2655a0c0fe" translate="yes" xml:space="preserve">
          <source>Encode::decode(&quot;Guess&quot; ...)</source>
          <target state="translated">Encode::decode(&quot;推測&quot; ...)</target>
        </trans-unit>
        <trans-unit id="0ca2ce49b12c2ee816a410523ba091dc693a60d6" translate="yes" xml:space="preserve">
          <source>Encodes a scalar, hash reference or array reference as YAMLish.</source>
          <target state="translated">スカラ、ハッシュ参照、配列参照をYAMLishとしてエンコードします。</target>
        </trans-unit>
        <trans-unit id="225ac8da293afbab880950db9793bf5ef9a811e8" translate="yes" xml:space="preserve">
          <source>Encodes the invocand as a byte string in the given format as specified in IEEE 754-2008. Note that the encoded value is the nearest possible representation of the value. This value might not be exactly the same as the value in the invocand.</source>
          <target state="translated">インボキャンドを IEEE 754-2008 で指定されたフォーマットでバイト文字列としてエンコードします。エンコードされた値は、値の最も近い表現であることに注意してください。この値は、インボカンドの値と完全に同じではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="f4c840f47e19e39ed11ebf36e763d836813b7799" translate="yes" xml:space="preserve">
          <source>Encodes the scalar value</source>
          <target state="translated">スカラ値をエンコードします。</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="8febd2fa21d6fa8e1d3dfe269d8ca87dc204d2c3" translate="yes" xml:space="preserve">
          <source>Encoding Classification (by Anton Tagunov and Dan Kogai)</source>
          <target state="translated">符号化分類(アントン・タグノフとダン・コガイによる</target>
        </trans-unit>
        <trans-unit id="f33835dcaa05ba53de2779ac501c0b636ae0c061" translate="yes" xml:space="preserve">
          <source>Encoding Names</source>
          <target state="translated">名前の符号化</target>
        </trans-unit>
        <trans-unit id="e649a0b553388aa0aefbd82d8b0f0d1a27873465" translate="yes" xml:space="preserve">
          <source>Encoding and decoding of base64 strings</source>
          <target state="translated">base64 文字列のエンコードとデコード</target>
        </trans-unit>
        <trans-unit id="6b77915998634f10773a65ebf127633caa0903b3" translate="yes" xml:space="preserve">
          <source>Encoding and decoding of quoted-printable strings</source>
          <target state="translated">引用符付き印刷可能な文字列の符号化と復号化</target>
        </trans-unit>
        <trans-unit id="a998510992fa4d69263beacea1ddcc7415077441" translate="yes" xml:space="preserve">
          <source>Encoding handling assumes that PerlIO is available and does not work properly if it isn't. The &lt;code&gt;utf8&lt;/code&gt; option is therefore not supported unless Perl is built with PerlIO support.</source>
          <target state="translated">エンコーディング処理は、PerlIOが利用可能であると想定し、そうでない場合は適切に機能しません。 &lt;code&gt;utf8&lt;/code&gt; PerlはPerlIOをサポートして構築されていない限り、オプションは、したがって、サポートされていません。</target>
        </trans-unit>
        <trans-unit id="04cfa3e7800a4d240dc7f677c9407b294c248bcf" translate="yes" xml:space="preserve">
          <source>Encoding layer</source>
          <target state="translated">符号化層</target>
        </trans-unit>
        <trans-unit id="b9782d5b4b9e78ce07208ac3d1921ad180cd2fcb" translate="yes" xml:space="preserve">
          <source>Encoding names</source>
          <target state="translated">エンコーディング名</target>
        </trans-unit>
        <trans-unit id="680e8d978db89c29bc9f5396c102c8ec2731a094" translate="yes" xml:space="preserve">
          <source>Encoding names are case insensitive. White space in names is ignored. In addition, an encoding may have aliases. Each encoding has one &quot;canonical&quot; name. The &quot;canonical&quot; name is chosen from the names of the encoding by picking the first in the following sequence (with a few exceptions).</source>
          <target state="translated">エンコード名は大文字と小文字を区別しません。名前の空白は無視されます。さらに、エンコーディングはエイリアスを持つことができます。各エンコーディングには 1 つの &quot;canonical&quot; な名前があります。この &quot;canonical &quot;な名前は、エンコーディングの名前の中から、以下の順序で最初のものを選ぶことで選ばれます (いくつかの例外を除いて)。</target>
        </trans-unit>
        <trans-unit id="01cbaf646f7cdfb7eb0fbb21f815c71c722e02c1" translate="yes" xml:space="preserve">
          <source>Encoding via PerlIO</source>
          <target state="translated">PerlIOによるエンコード</target>
        </trans-unit>
        <trans-unit id="46fade9210aeab4b837cd79bdf4256d2a5f65faf" translate="yes" xml:space="preserve">
          <source>Encoding vs. Charset -- terminology</source>
          <target state="translated">エンコード対文字セット --用語解説</target>
        </trans-unit>
        <trans-unit id="27e06c1fc55b2907153074d333e66853227f2028" translate="yes" xml:space="preserve">
          <source>Encodings are categorized and implemented in several different modules but you don't have to &lt;code&gt;use Encode::XX&lt;/code&gt; to make them available for most cases. Encode.pm will automatically load those modules on demand.</source>
          <target state="translated">エンコーディングはいくつかの異なるモジュールに分類および実装されていますが、ほとんどの場合、 &lt;code&gt;use Encode::XX&lt;/code&gt; を使用できるようにするためにEncode :: XXを使用する必要はありません。Encode.pmは、これらのモジュールをオンデマンドで自動的にロードします。</target>
        </trans-unit>
        <trans-unit id="bcc5b05d5a707cb27dff01159bcf1a3ca6a46e7c" translate="yes" xml:space="preserve">
          <source>Encodings supported by Encode</source>
          <target state="translated">Encodeでサポートされているエンコーディング</target>
        </trans-unit>
        <trans-unit id="f136f667340e5f4c44804d0073e50a60db219512" translate="yes" xml:space="preserve">
          <source>Encrypted communication channel</source>
          <target state="translated">暗号化された通信チャネル</target>
        </trans-unit>
        <trans-unit id="2c4ae224ac38c50705eb255694dceb50337fe4c9" translate="yes" xml:space="preserve">
          <source>End of File. Sometimes used metaphorically as the terminating string of a &lt;b&gt;here document&lt;/b&gt;.</source>
          <target state="translated">ファイルの終わり。&lt;b&gt;ヒアドキュメントの&lt;/b&gt;終了文字列として比喩的に使用されることもあり&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="e61fae84390da1a34c4b2fbd657622d5073292c7" translate="yes" xml:space="preserve">
          <source>End of file.</source>
          <target state="translated">ファイルの終わりです。</target>
        </trans-unit>
        <trans-unit id="d1e4562e3c175d8468bb1a01a7952bd0d3b259e1" translate="yes" xml:space="preserve">
          <source>End the sending of data to the remote server. This is done by ensuring that the data already sent ends with CRLF then sending '.CRLF' to end the transmission. Once this data has been sent &lt;code&gt;dataend&lt;/code&gt; calls &lt;code&gt;response&lt;/code&gt; and returns true if &lt;code&gt;response&lt;/code&gt; returns CMD_OK.</source>
          <target state="translated">リモートサーバーへのデータの送信を終了します。これは、すでに送信されたデータがCRLFで終了することを確認してから、「。CRLF」を送信して送信を終了することによって行われます。このデータが送信されると、 &lt;code&gt;dataend&lt;/code&gt; は &lt;code&gt;response&lt;/code&gt; を呼び出し、 &lt;code&gt;response&lt;/code&gt; がCMD_OKを返す場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="5b395d065aa5966c6da16e4b8c501ca68c3ecd37" translate="yes" xml:space="preserve">
          <source>End-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserからのエンドトークン</target>
        </trans-unit>
        <trans-unit id="8676dbbd19637e0c1604c4bcd69f9208a03cfa1a" translate="yes" xml:space="preserve">
          <source>End.U</source>
          <target state="translated">End.U</target>
        </trans-unit>
        <trans-unit id="d1787011d64eb206cd1d2b206a7e53314fc2df0d" translate="yes" xml:space="preserve">
          <source>Ends a try block. See &lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;&quot;Exception Handling&quot; in perlguts&lt;/a&gt;.</source>
          <target state="translated">tryブロックを終了します。&lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;perlgutsの「例外処理」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f4d04612cae76dda50e81f179859b4b712ba14ff" translate="yes" xml:space="preserve">
          <source>Ends a try block. See &lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;Exception Handling in perlguts&lt;/a&gt;.</source>
          <target state="translated">tryブロックを終了します。&lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;perlgutsでの例外処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ea2083617805ed93273c46ed0c4792fa3da7a0b" translate="yes" xml:space="preserve">
          <source>Enforce type integrity if required</source>
          <target state="translated">必要に応じて型の整合性を強制する</target>
        </trans-unit>
        <trans-unit id="286ca1647ce3f25ee107c4a9d50837ecd6b2a964" translate="yes" xml:space="preserve">
          <source>Enforcing redispatch</source>
          <target state="translated">リディスパッチの実施</target>
        </trans-unit>
        <trans-unit id="a1681854c9f0debb40072c691fd6f403e3a9401c" translate="yes" xml:space="preserve">
          <source>Enginsite</source>
          <target state="translated">Enginsite</target>
        </trans-unit>
        <trans-unit id="649df08a448ee3fa90f3746baaf6b0907df42c91" translate="yes" xml:space="preserve">
          <source>English</source>
          <target state="translated">English</target>
        </trans-unit>
        <trans-unit id="256aa1d5dab6cf2100434b619aada1a930ae7c7d" translate="yes" xml:space="preserve">
          <source>English ('en') is</source>
          <target state="translated">英語('en')は</target>
        </trans-unit>
        <trans-unit id="7aa949020d6b22aac250e3885290aa830dd72a15" translate="yes" xml:space="preserve">
          <source>English - use nice English (or awk) names for ugly punctuation variables</source>
          <target state="translated">英語-醜い句読点変数には素敵な英語名 (または awk)を使用します。</target>
        </trans-unit>
        <trans-unit id="34afa6db1cf569bd02a3ffe4f7e6036f1798a631" translate="yes" xml:space="preserve">
          <source>English.pm</source>
          <target state="translated">English.pm</target>
        </trans-unit>
        <trans-unit id="99343727bceed607c32f483621540aee48471580" translate="yes" xml:space="preserve">
          <source>Enough of the definition talk! Let's have a few examples.</source>
          <target state="translated">定義の話はもういい!いくつか例を挙げてみましょう。</target>
        </trans-unit>
        <trans-unit id="d899ea5401439c93a0c8f86febf8bb8f4f088e5d" translate="yes" xml:space="preserve">
          <source>Ensure that colons marking targets are preceded by space, in order to distinguish the target delimiter from a colon appearing as part of a filespec.</source>
          <target state="translated">ファイルスペックの一部として現れるコロンとターゲットの区切り文字を区別するために、ターゲットをマークするコロンの前にスペースがあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="8988a13726c59d935ea79d755d1455be0fc83772" translate="yes" xml:space="preserve">
          <source>Ensure that you know what \b really does: it's the boundary between a word character, \w, and something that isn't a word character. That thing that isn't a word character might be \W, but it can also be the start or end of the string.</source>
          <target state="translated">\bの本当の意味を知っていることを確認しましょう:それは、単語文字、\wと単語文字ではない何かの境界線です。その単語文字ではないものは、「\W」かもしれないけど、文字列の始まりや終わりにもなりうるのよ。</target>
        </trans-unit>
        <trans-unit id="8680a11001e2d2163c0b3f5d95efb035f3fa7b03" translate="yes" xml:space="preserve">
          <source>Ensure you're following the latest advice</source>
          <target state="translated">最新のアドバイスに従っていることを確認する</target>
        </trans-unit>
        <trans-unit id="21287dbbbfc03a6ee27ae105b87e32fa291261eb" translate="yes" xml:space="preserve">
          <source>Ensure your module works under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;-w&lt;/code&gt;</source>
          <target state="translated">モジュールが &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; および &lt;code&gt;-w&lt;/code&gt; で機能することを確認します。</target>
        </trans-unit>
        <trans-unit id="ee84d37b57aec0c02ba775d818a3471f6da99fba" translate="yes" xml:space="preserve">
          <source>Ensure your module works under &lt;code&gt;use strict&lt;/code&gt; and &lt;code&gt;-w&lt;/code&gt;</source>
          <target state="translated">モジュールが &lt;code&gt;use strict&lt;/code&gt; および &lt;code&gt;-w&lt;/code&gt; を使用して動作することを確認します</target>
        </trans-unit>
        <trans-unit id="3137a5d79c4479978038346bf282e1d45e0aa011" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;MoveFileEx&lt;/code&gt; won't return until the operation has finished and been flushed to disk. This is not supported under Windows 95. Only affects file renames to another file system, forcing a buffer flush at the end of the copy operation.</source>
          <target state="translated">ことを保証 &lt;code&gt;MoveFileEx&lt;/code&gt; は、操作が完了すると、ディスクにフラッシュされてまでは戻りません。これはWindows95ではサポートされていません。別のファイルシステムへのファイルの名前変更にのみ影響し、コピー操作の最後にバッファフラッシュを強制します。</target>
        </trans-unit>
        <trans-unit id="7f974b332a5fa28c86d4229cace8185f73744894" translate="yes" xml:space="preserve">
          <source>Ensures that sv is a SVt_PV and that its SvCUR is 0, and that it is properly null terminated. Equivalent to sv_setpvs(&quot;&quot;), but more efficient.</source>
          <target state="translated">sv が SVt_PV であり、その SvCUR が 0 であり、適切に NULL 終端されていることを確認します。sv_setpvs(&quot;&quot;)と同等ですが、より効率的です。</target>
        </trans-unit>
        <trans-unit id="1279af9b58018ff33488efc0656bb62fda8db44f" translate="yes" xml:space="preserve">
          <source>Enter interactive mode by running</source>
          <target state="translated">を実行してインタラクティブモードに入ります。</target>
        </trans-unit>
        <trans-unit id="74eb99da3b9ba3df5f4be61ae4522068a9b27d10" translate="yes" xml:space="preserve">
          <source>Entire arrays (and slices of arrays and hashes) are denoted by '@', which works much as the word &quot;these&quot; or &quot;those&quot; does in English, in that it indicates multiple values are expected.</source>
          <target state="translated">配列全体 (および配列やハッシュのスライス)は '@' で表されます。これは英語の &quot;these&quot; や &quot;these&quot; と同じように機能し、複数の値が予想されることを示します。</target>
        </trans-unit>
        <trans-unit id="d245bbc8252b0b71ede0a2f949fc5b29d829fd5d" translate="yes" xml:space="preserve">
          <source>Entire hashes are denoted by '%':</source>
          <target state="translated">ハッシュ全体は '%' で表されます。</target>
        </trans-unit>
        <trans-unit id="4f918189cf78ab84f6519ba2dcb57f2ae316f72b" translate="yes" xml:space="preserve">
          <source>Entries cannot be plain object files, as many Win32 compilers will not handle object files in the place of libraries.</source>
          <target state="translated">多くの Win32 コンパイラはライブラリの代わりにオブジェクトファイルを扱わないので、エントリはプレーンなオブジェクトファイルにはできません。</target>
        </trans-unit>
        <trans-unit id="673fba8e1fb3916663891e031f77ca1343408944" translate="yes" xml:space="preserve">
          <source>Entries in &lt;code&gt;$potential_libs&lt;/code&gt; beginning with a colon and followed by alphanumeric characters are treated as flags. Unknown flags will be ignored.</source>
          <target state="translated">コロンで始まり、その後に英数字が続く &lt;code&gt;$potential_libs&lt;/code&gt; エントリは、フラグとして扱われます。不明なフラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="a95d99085680ef5c64c2fe5754604ba2f596d896" translate="yes" xml:space="preserve">
          <source>Entries such as:</source>
          <target state="translated">などのエントリーがあります。</target>
        </trans-unit>
        <trans-unit id="8d07f7a288d3779719c1509961105704b61f4cef" translate="yes" xml:space="preserve">
          <source>Entry in the INPUT section of a typemap</source>
          <target state="translated">タイプマップのINPUTセクションのエントリ</target>
        </trans-unit>
        <trans-unit id="237fc607826e845da2eb03390fed5a45c866b715" translate="yes" xml:space="preserve">
          <source>Entry in the OUTPUT section of a typemap</source>
          <target state="translated">タイプマップのOUTPUTセクションのエントリ</target>
        </trans-unit>
        <trans-unit id="81a846de6d38920893fe50bf678fb10abc3847e2" translate="yes" xml:space="preserve">
          <source>Entry in the TYPEMAP section of a typemap</source>
          <target state="translated">タイプマップのTYPEMAPセクションのエントリ</target>
        </trans-unit>
        <trans-unit id="f211ac2a755354cfc7e79a205b52eb23e2f010b1" translate="yes" xml:space="preserve">
          <source>Entware-ng comes with a precompiled 5.24.1 (June 2017) that allowes building shared XS code. Note that this installation does &lt;b&gt;not&lt;/b&gt; use a site_perl folder. The available &lt;code&gt;cpan&lt;/code&gt; works. If all required development packages are installed too, also for XS.</source>
          <target state="translated">Entware-ngには、共有XSコードの構築を可能にするプリコンパイル済み5.24.1（2017年6月）が付属しています。このインストールではsite_perlフォルダーを使用し&lt;b&gt;ない&lt;/b&gt;ことに注意してください。利用可能な &lt;code&gt;cpan&lt;/code&gt; は動作します。XSの場合も、必要なすべての開発パッケージがインストールされている場合。</target>
        </trans-unit>
        <trans-unit id="a2562690818adae41c773c584b6f6c09ebb4d39c" translate="yes" xml:space="preserve">
          <source>Env</source>
          <target state="translated">Env</target>
        </trans-unit>
        <trans-unit id="fbbe5fa808eea7f4c74b5ba16db47dab460bc3b9" translate="yes" xml:space="preserve">
          <source>Env - perl module that imports environment variables as scalars or arrays</source>
          <target state="translated">Env-環境変数をスカラーや配列としてインポートする perl モジュール</target>
        </trans-unit>
        <trans-unit id="ec072bba7befaa68af710fe3549eb0491d7badd1" translate="yes" xml:space="preserve">
          <source>Environment Variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="e19f8816c6f7ccbb7d40a44b81def1ffb731d4e0" translate="yes" xml:space="preserve">
          <source>Environment for Compiling perl on Solaris</source>
          <target state="translated">Solaris上でperlをコンパイルするための環境</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="c7e160747cc9ac3da385ca9f9c1cb6f2e6810dff" translate="yes" xml:space="preserve">
          <source>Environment variables that the program cares about, normally presented as a list using &lt;code&gt;=over&lt;/code&gt; , &lt;code&gt;=item&lt;/code&gt; , and &lt;code&gt;=back&lt;/code&gt; . For example:</source>
          <target state="translated">プログラムが関係する環境変数。通常、 &lt;code&gt;=item&lt;/code&gt; &lt;code&gt;=over&lt;/code&gt; 、= item、 &lt;code&gt;=back&lt;/code&gt; を使用したリストとして表示されます。例えば：</target>
        </trans-unit>
        <trans-unit id="047031c84702987a532453c9aba009b3c909ceb6" translate="yes" xml:space="preserve">
          <source>Environment variables that the program cares about, normally presented as a list using &lt;code&gt;=over&lt;/code&gt;, &lt;code&gt;=item&lt;/code&gt;, and &lt;code&gt;=back&lt;/code&gt;. For example:</source>
          <target state="translated">プログラムが気にする環境変数。通常、 &lt;code&gt;=item&lt;/code&gt; &lt;code&gt;=over&lt;/code&gt; 、= item、および &lt;code&gt;=back&lt;/code&gt; を使用してリストとして表示されます。例えば：</target>
        </trans-unit>
        <trans-unit id="59ed6121898e672a267f0f15674f039aebf49694" translate="yes" xml:space="preserve">
          <source>Environment variables to be set during the command</source>
          <target state="translated">コマンド中に設定する環境変数</target>
        </trans-unit>
        <trans-unit id="ec3aedc215415465ba248c2b745d070af96045ef" translate="yes" xml:space="preserve">
          <source>Eof</source>
          <target state="translated">Eof</target>
        </trans-unit>
        <trans-unit id="7264243f4aeaaab7fbb98bd7afd5e953b5900f7b" translate="yes" xml:space="preserve">
          <source>Equality Operators</source>
          <target state="translated">平等演算子</target>
        </trans-unit>
        <trans-unit id="f6a4eb155ac0505cd34f3102780f106892d4662a" translate="yes" xml:space="preserve">
          <source>Equivalence between Decimal and Dotted-Decimal Versions</source>
          <target state="translated">10進法と10進法の等価性</target>
        </trans-unit>
        <trans-unit id="1cfd756767e68de5473421aba90c9077344def28" translate="yes" xml:space="preserve">
          <source>Equivalent examples:</source>
          <target state="translated">等価の例。</target>
        </trans-unit>
        <trans-unit id="c61e2265d123d76133484971263eb3576ac59dd9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;$octets = encode(&quot;utf8&quot;, $string)&lt;/code&gt; . The characters in $string are encoded in Perl's internal format, and the result is returned as a sequence of octets. Because all possible characters in Perl have a (loose, not strict) UTF-8 representation, this function cannot fail.</source>
          <target state="translated">&lt;code&gt;$octets = encode(&quot;utf8&quot;, $string)&lt;/code&gt; 同等です。$ stringの文字はPerlの内部形式でエンコードされ、結果はオクテットのシーケンスとして返されます。Perlで使用可能なすべての文字は（厳密ではなく、緩い）UTF-8表現を持っているため、この関数は失敗できません。</target>
        </trans-unit>
        <trans-unit id="2e78d6f894c7d9e2878d9273592738107eb000e0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;$octets = encode(&quot;utf8&quot;, $string)&lt;/code&gt;. The characters in $string are encoded in Perl's internal format, and the result is returned as a sequence of octets. Because all possible characters in Perl have a (loose, not strict) utf8 representation, this function cannot fail.</source>
          <target state="translated">&lt;code&gt;$octets = encode(&quot;utf8&quot;, $string)&lt;/code&gt; 同等です。 $ stringの文字は、Perlの内部形式でエンコードされ、結果はオクテットのシーケンスとして返されます。 Perlで可能なすべての文字は（厳密ではなく緩い）utf8表現を持っているため、この関数は失敗することはありません。</target>
        </trans-unit>
        <trans-unit id="a263a53c5879a617814d231b90b810689cbeec78" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;$string = decode(&quot;utf8&quot;, $octets [, CHECK])&lt;/code&gt; . The sequence of octets represented by $octets is decoded from UTF-8 into a sequence of logical characters. Because not all sequences of octets are valid UTF-8, it is quite possible for this function to fail. For CHECK, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;Handling Malformed Data&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$string = decode(&quot;utf8&quot;, $octets [, CHECK])&lt;/code&gt; 同等です。$ octetsで表されるオクテットのシーケンスは、UTF-8から論理文字のシーケンスにデコードされます。オクテットのすべてのシーケンスが有効なUTF-8であるとは限らないため、この関数が失敗する可能性は十分にあります。チェックについては、&lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;不正なデータの処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="98fe51deeaa55823d52414f5281c460f4be56e6e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;$string = decode(&quot;utf8&quot;, $octets [, CHECK])&lt;/code&gt;. The sequence of octets represented by $octets is decoded from (loose, not strict) utf8 into a sequence of logical characters. Because not all sequences of octets are valid not strict utf8, it is quite possible for this function to fail. For CHECK, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;&quot;Handling Malformed Data&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$string = decode(&quot;utf8&quot;, $octets [, CHECK])&lt;/code&gt; 同等です。$ octetsで表されるオクテットのシーケンスは、utf8から（厳密ではなく緩い）論理文字のシーケンスにデコードされます。オクテットのすべてのシーケンスが厳密なutf8ではなく有効であるとは限らないため、この関数が失敗する可能性は十分にあります。CHECKについては、&lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;「不正な形式のデータの処理」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="032e60eb7c99d19d4d7f40467e50e02c1b3b3e31" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;(x) - 1&lt;/code&gt; , but more precise for small argument values [C99].</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;(x) - 1&lt;/code&gt; と同等ですが、引数の値が小さい場合はより正確になります[C99]。</target>
        </trans-unit>
        <trans-unit id="48506d548803ae745c6c6681b3b6b358f76d6d1f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;(1 + x)&lt;/code&gt; , but more stable results for small argument values [C99].</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;(1 + x)&lt;/code&gt; と同等ですが、引数値が小さい場合の結果がより安定します[C99]。</target>
        </trans-unit>
        <trans-unit id="22c30bad53a9801aa2549ef28438b22b8be2db3e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; FILEHANDLE &lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;(FORMAT, LIST)&lt;/code&gt; , except that &lt;code&gt;$\&lt;/code&gt; (the output record separator) is not appended. The FORMAT and the LIST are actually parsed as a single list. The first argument of the list will be interpreted as the &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; format. This means that &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf(@_)&lt;/a&gt;&lt;/code&gt; will use &lt;code&gt;$_[0]&lt;/code&gt; as the format. See &lt;a href=&quot;#sprintf-FORMAT%2c-LIST&quot;&gt;sprintf&lt;/a&gt; for an explanation of the format argument. If &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; for &lt;code&gt;LC_NUMERIC&lt;/code&gt; Look for this throught pod is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale setting. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$\&lt;/code&gt; （出力レコード区切り記号）が追加されないことを除いて &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; FILEHANDLE &lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;(FORMAT, LIST)&lt;/code&gt; &lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; FILEHANDLE &lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;（FORMAT、LIST）と同等です。 FORMATとLISTは、実際には単一のリストとして解析されます。リストの最初の引数は、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 形式として解釈されます。つまり、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf(@_)&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;$_[0]&lt;/code&gt; をフォーマットとして使用します。format引数の説明については、&lt;a href=&quot;#sprintf-FORMAT%2c-LIST&quot;&gt;sprintf&lt;/a&gt;を参照してください。場合は &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ロケールのための &lt;code&gt;LC_NUMERIC&lt;/code&gt; このthroughtポッド探しが有効とPOSIX ::のsetlocale（）が呼び出された中で、フォーマットされた浮動小数点数で小数点の区切り文字に使用する文字は、に影響されます &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール設定。&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;と&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="200de086c8cd5535e67b47001e5f819da8109f8f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;functions/sqrt&quot;&gt;sqrt&lt;/a&gt;(x * x + y * y)&lt;/code&gt; except more stable on very large or very small arguments [C99].</source>
          <target state="translated">非常に大きいまたは非常に小さい引数でより安定していることを除いて、 &lt;code&gt;&lt;a href=&quot;functions/sqrt&quot;&gt;sqrt&lt;/a&gt;(x * x + y * y)&lt;/code&gt; 同等です[C99]。</target>
        </trans-unit>
        <trans-unit id="0f1d23c2683b2580eee5762a2646e2cfdbd51243" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; FILEHANDLE &lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;(FORMAT, LIST)&lt;/code&gt; , except that &lt;code&gt;$\&lt;/code&gt; (the output record separator) is not appended. The FORMAT and the LIST are actually parsed as a single list. The first argument of the list will be interpreted as the &lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; format. This means that &lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf(@_)&lt;/a&gt;&lt;/code&gt; will use &lt;code&gt;$_[0]&lt;/code&gt; as the format. See &lt;a href=&quot;#sprintf-FORMAT%2c-LIST&quot;&gt;sprintf&lt;/a&gt; for an explanation of the format argument. If &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; for &lt;code&gt;LC_NUMERIC&lt;/code&gt; Look for this throught pod is in effect and POSIX::setlocale() has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale setting. See &lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;../posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$\&lt;/code&gt; （出力レコード区切り記号）が追加されないことを除いて &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; FILEHANDLE &lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;(FORMAT, LIST)&lt;/code&gt; &lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; FILEHANDLE &lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;（FORMAT、LIST）と同等です。 FORMATとLISTは、実際には単一のリストとして解析されます。リストの最初の引数は、 &lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 形式として解釈されます。つまり、 &lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf(@_)&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;$_[0]&lt;/code&gt; をフォーマットとして使用します。format引数の説明については、&lt;a href=&quot;#sprintf-FORMAT%2c-LIST&quot;&gt;sprintf&lt;/a&gt;を参照してください。場合は &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ロケールのための &lt;code&gt;LC_NUMERIC&lt;/code&gt; このthroughtポッド探しが有効とPOSIX ::のsetlocale（）が呼び出された中で、フォーマットされた浮動小数点数で小数点の区切り文字に使用する文字は、に影響されます &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール設定。&lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;と&lt;a href=&quot;../posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="756e8875e122c06649638568056dc5b432d11a8e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;exp(x) - 1&lt;/code&gt;, but more precise for small argument values [C99].</source>
          <target state="translated">&lt;code&gt;exp(x) - 1&lt;/code&gt; と同等ですが、引数値が小さい場合はより正確になります[C99]。</target>
        </trans-unit>
        <trans-unit id="3c725f59de42f50ead6905d172ab4b7ba28d808a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;log(1 + x)&lt;/code&gt;, but more stable results for small argument values [C99].</source>
          <target state="translated">&lt;code&gt;log(1 + x)&lt;/code&gt; と同等ですが、引数値が小さい場合はより安定した結果になります[C99]。</target>
        </trans-unit>
        <trans-unit id="3145a78dd9afcf2f738531a37fc2117722087949" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;print FILEHANDLE sprintf(FORMAT, LIST)&lt;/code&gt;, except that &lt;a href=&quot;perlvar#%24%5C&quot;&gt;&lt;code&gt;$\&lt;/code&gt;&lt;/a&gt; (the output record separator) is not appended. The FORMAT and the LIST are actually parsed as a single list. The first argument of the list will be interpreted as the &lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/a&gt; format. This means that &lt;code&gt;printf(@_)&lt;/code&gt; will use &lt;code&gt;$_[0]&lt;/code&gt; as the format. See &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;sprintf&lt;/a&gt; for an explanation of the format argument. If &lt;code&gt;use locale&lt;/code&gt; (including &lt;code&gt;use locale ':not_characters'&lt;/code&gt;) is in effect and &lt;a href=&quot;posix#setlocale&quot;&gt;&lt;code&gt;POSIX::setlocale&lt;/code&gt;&lt;/a&gt; has been called, the character used for the decimal separator in formatted floating-point numbers is affected by the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale setting. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlvar#%24%5C&quot;&gt; &lt;code&gt;$\&lt;/code&gt; &lt;/a&gt;（出力レコード区切り文字）が追加されないことを除いて &lt;code&gt;print FILEHANDLE sprintf(FORMAT, LIST)&lt;/code&gt; と同等です。 FORMATとLISTは、実際には単一のリストとして解析されます。リストの最初の引数は、&lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;printf&lt;/code&gt; &lt;/a&gt;形式として解釈されます。これは、 &lt;code&gt;printf(@_)&lt;/code&gt; がフォーマットとして &lt;code&gt;$_[0]&lt;/code&gt; を使用することを意味します。format引数の説明については、&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;sprintf&lt;/a&gt;を参照してください。場合 &lt;code&gt;use locale&lt;/code&gt; （含む &lt;code&gt;use locale ':not_characters'&lt;/code&gt; ）効果である&lt;a href=&quot;posix#setlocale&quot;&gt; &lt;code&gt;POSIX::setlocale&lt;/code&gt; &lt;/a&gt;と呼ばれている、フォーマットされた浮動小数点数で小数点の区切り文字に使用する文字は、によって影響さ &lt;code&gt;LC_NUMERIC&lt;/code&gt; ロケール設定。&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;および&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c8b67359eada935d408cfee6f1b32b93eb73c3ef" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sqrt(x * x + y * y)&lt;/code&gt; except more stable on very large or very small arguments [C99].</source>
          <target state="translated">非常に大きいまたは非常に小さい引数でより安定していることを除いて、 &lt;code&gt;sqrt(x * x + y * y)&lt;/code&gt; 同等です[C99]。</target>
        </trans-unit>
        <trans-unit id="a8b647b2f27ee1659c31db9d984b63f0b9e63a18" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sv_setsv(sv, &amp;amp;PL_sv_undef)&lt;/code&gt;, but more efficient. Doesn't handle set magic.</source>
          <target state="translated">&lt;code&gt;sv_setsv(sv, &amp;amp;PL_sv_undef)&lt;/code&gt; と同等ですが、より効率的です。セットマジックを処理しません。</target>
        </trans-unit>
        <trans-unit id="8d4e0dc744110e721ecf88197993cbcc2b45d001" translate="yes" xml:space="preserve">
          <source>Equivalent to Perl code &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $gv&lt;/code&gt; .</source>
          <target state="translated">Perlコード &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $gv&lt;/code&gt; 相当します。</target>
        </trans-unit>
        <trans-unit id="3ac49f4bdd12fc964afb5f8290211f9aa65a79c7" translate="yes" xml:space="preserve">
          <source>Equivalent to Perl code &lt;code&gt;local $gv&lt;/code&gt;.</source>
          <target state="translated">Perlコード &lt;code&gt;local $gv&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="876fc7d247587a71d98917cb3c3453fd65fea359" translate="yes" xml:space="preserve">
          <source>Equivalent to running mktemp() with $dir/$prefixXXXXXXXX (using unix file convention as an example)</source>
          <target state="translated">mktemp()を $dir/$prefixXXXXXXXXXXXX で実行するのと同等 (例として unix のファイル規約を使用)</target>
        </trans-unit>
        <trans-unit id="4dba35bcd4ac839e52783da10b5058566f3e3b91" translate="yes" xml:space="preserve">
          <source>Equivalent to specifying a DIR of &quot;File::Spec-&amp;gt;tmpdir&quot;, writing the file into the same temporary directory as would be used if no template was specified at all.</source>
          <target state="translated">「File :: Spec-&amp;gt; tmpdir」のDIRを指定するのと同じで、テンプレートがまったく指定されていない場合に使用されるのと同じ一時ディレクトリにファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="bb3d71a18fde90428e21cf7d4198ea242cfa57c5" translate="yes" xml:space="preserve">
          <source>Equivalent to the &lt;a href=&quot;#-C-%5Bnumber%2Flist%5D&quot;&gt;-C&lt;/a&gt; command-line switch. Note that this is not a boolean variable. Setting this to &lt;code&gt;&quot;1&quot;&lt;/code&gt; is not the right way to &quot;enable Unicode&quot; (whatever that would mean). You can use &lt;code&gt;&quot;0&quot;&lt;/code&gt; to &quot;disable Unicode&quot;, though (or alternatively unset PERL_UNICODE in your shell before starting Perl). See the description of the &lt;a href=&quot;#-C-%5Bnumber%2Flist%5D&quot;&gt;-C&lt;/a&gt; switch for more information.</source>
          <target state="translated">&lt;a href=&quot;#-C-%5Bnumber%2Flist%5D&quot;&gt;-C&lt;/a&gt;コマンドラインスイッチと同等です。これはブール変数ではないことに注意してください。これを &lt;code&gt;&quot;1&quot;&lt;/code&gt; 設定することは、「 Unicodeを有効にする」ための正しい方法ではありません（それが意味するものは何でも）。ただし、 &lt;code&gt;&quot;0&quot;&lt;/code&gt; を使用して「 Unicodeを無効にする」ことはできます（または、Perlを起動する前にシェルでPERL_UNICODEの設定を解除します）。詳細については、&lt;a href=&quot;#-C-%5Bnumber%2Flist%5D&quot;&gt;-C&lt;/a&gt;スイッチの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="a667e4f94596d8444896d0c578ec8dad154ae9ae" translate="yes" xml:space="preserve">
          <source>Equivalent to the &lt;b&gt;-C&lt;/b&gt; command-line switch. Note that this is not a boolean variable. Setting this to &lt;code&gt;&quot;1&quot;&lt;/code&gt; is not the right way to &quot;enable Unicode&quot; (whatever that would mean). You can use &lt;code&gt;&quot;0&quot;&lt;/code&gt; to &quot;disable Unicode&quot;, though (or alternatively unset PERL_UNICODE in your shell before starting Perl). See the description of the &lt;b&gt;-C&lt;/b&gt; switch for more information.</source>
          <target state="translated">&lt;b&gt;-C&lt;/b&gt;コマンドラインスイッチと同等です。これはブール変数ではないことに注意してください。これを &lt;code&gt;&quot;1&quot;&lt;/code&gt; 設定することは、「 Unicodeを有効にする」ための正しい方法ではありません（意味が何であれ）。ただし、 &lt;code&gt;&quot;0&quot;&lt;/code&gt; を使用して「 Unicodeを無効にする」こともできます（または、Perlを起動する前にシェルでPERL_UNICODEの設定を解除します）。詳細については、&lt;b&gt;-C&lt;/b&gt;スイッチの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="d371f28bfea1e852f448381bb4f0bdfccaa7149e" translate="yes" xml:space="preserve">
          <source>Equivalent to:</source>
          <target state="translated">同等です。</target>
        </trans-unit>
        <trans-unit id="7cc25c4fa96172ec73030c6c0f3dc9c51687c491" translate="yes" xml:space="preserve">
          <source>Equivalents of</source>
          <target state="translated">の等価物</target>
        </trans-unit>
        <trans-unit id="7ebcf33d0a14ddb91ad477ae52a7af6de25e76c9" translate="yes" xml:space="preserve">
          <source>Er, that's it.</source>
          <target state="translated">えーと、それだけです。</target>
        </trans-unit>
        <trans-unit id="0256add701298dc7a17e42cc9eb936d630438581" translate="yes" xml:space="preserve">
          <source>Erases one character. Defined by</source>
          <target state="translated">1文字を消去します。定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7c24401b7c6f89af67334e697241400ad5298e5f" translate="yes" xml:space="preserve">
          <source>Erases the current input. Defined by</source>
          <target state="translated">現在の入力を消去します。定義されている</target>
        </trans-unit>
        <trans-unit id="2bfde103fe0a2fc7c857d2e77fed8dacf0bc3d48" translate="yes" xml:space="preserve">
          <source>Eric L. Brine,</source>
          <target state="translated">エリック・L・ブライン</target>
        </trans-unit>
        <trans-unit id="b5b196c5d2b8bc0f57dd78e558fed28f0a83be47" translate="yes" xml:space="preserve">
          <source>Eric Wilhelm &amp;lt;ewilhelm@cpan.org&amp;gt;</source>
          <target state="translated">エリックウィルヘルム&amp;lt;ewilhelm@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a3053d2e8a81cd1d9716eddc9ced731b4c51383d" translate="yes" xml:space="preserve">
          <source>Eric Wilhelm @ &amp;lt;ewilhelm at cpan dot org&amp;gt;</source>
          <target state="translated">Eric Wilhelm @ &amp;lt;cpan dot orgのewilhelm&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d8bf3fea74cb51ac9ebccafa9b5bfc9e28b1c902" translate="yes" xml:space="preserve">
          <source>Errno</source>
          <target state="translated">Errno</target>
        </trans-unit>
        <trans-unit id="76cf9c662cbb85bc782a4c519361391afd6f8281" translate="yes" xml:space="preserve">
          <source>Errno - System errno constants</source>
          <target state="translated">Errno-システムの errno 定数</target>
        </trans-unit>
        <trans-unit id="27356fe30834096ffaeafbce7b977e0f80915dea" translate="yes" xml:space="preserve">
          <source>Erroneous numbering of =item numbers; they need to ascend consecutively.</source>
          <target state="translated">アイテム番号の番号付けが間違っています。</target>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="6cc16f28f695995f841e32ad9be43613256395fe" translate="yes" xml:space="preserve">
          <source>Error Checking</source>
          <target state="translated">エラーチェック</target>
        </trans-unit>
        <trans-unit id="ecbd14ea4e6e17d8a2dc17467fb021874d4a82c9" translate="yes" xml:space="preserve">
          <source>Error Variables</source>
          <target state="translated">エラー変数</target>
        </trans-unit>
        <trans-unit id="cfb1de7f5665b658bcddfda7619c881aef88520a" translate="yes" xml:space="preserve">
          <source>Error checking is, as usual, left as an exercise for the reader.</source>
          <target state="translated">エラーチェックは、いつものように読者のための演習として残しています。</target>
        </trans-unit>
        <trans-unit id="da4e40dd69c1ef29292868ee52af685e14566b19" translate="yes" xml:space="preserve">
          <source>Error checking, as always, has been left as an exercise for the reader.</source>
          <target state="translated">エラーチェックは、いつものように、読者のための演習として残しています。</target>
        </trans-unit>
        <trans-unit id="deb19663fe1130ad1a6752c882ecbce1fa91037d" translate="yes" xml:space="preserve">
          <source>Error converting file specification %s</source>
          <target state="translated">ファイル指定 %s の変換エラー</target>
        </trans-unit>
        <trans-unit id="3e1fae3d7127b124ae1e94579e5dd51376530e7b" translate="yes" xml:space="preserve">
          <source>Error handling and messages</source>
          <target state="translated">エラー処理とメッセージ</target>
        </trans-unit>
        <trans-unit id="34660817ebc668307d6b9b58b072f03bc4a8634d" translate="yes" xml:space="preserve">
          <source>Error handling is still a work in progress. If the program encounters a problem reading a zip file it is likely to terminate with an unhelpful error message.</source>
          <target state="translated">エラー処理はまだ作業中です。プログラムが zip ファイルの読み込みに問題が発生した場合は、 役に立たないエラーメッセージを表示して終了する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8bb7b0a0be7d85a55ee74f50c125415c68cb8808" translate="yes" xml:space="preserve">
          <source>Error information specific to the current operating system. At the moment, this differs from &lt;code&gt;$!&lt;/code&gt; under only VMS, OS/2, and Win32 (and for MacPerl). On all other platforms, &lt;code&gt;$^E&lt;/code&gt; is always just the same as &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">現在のオペレーティングシステムに固有のエラー情報。現時点では、これは &lt;code&gt;$!&lt;/code&gt; とは異なります。VMS、OS / 2、Win32（およびMacPerl）でのみです。他のすべてのプラットフォームでは、 &lt;code&gt;$^E&lt;/code&gt; は常に &lt;code&gt;$!&lt;/code&gt; と同じです！。</target>
        </trans-unit>
        <trans-unit id="f630bce8e4480d279f4c43b7f93e39940eec25e0" translate="yes" xml:space="preserve">
          <source>Error information specific to the current operating system. At the moment, this differs from &lt;code&gt;&lt;a href=&quot;#%24%21&quot;&gt;&quot;$!&quot;&lt;/a&gt;&lt;/code&gt; under only VMS, OS/2, and Win32 (and for MacPerl). On all other platforms, &lt;code&gt;$^E&lt;/code&gt; is always just the same as &lt;code&gt;$!&lt;/code&gt;.</source>
          <target state="translated">現在のオペレーティングシステムに固有のエラー情報。現時点では、これは &lt;code&gt;&lt;a href=&quot;#%24%21&quot;&gt;&quot;$!&quot;&lt;/a&gt;&lt;/code&gt; とは異なります。VMS、OS / 2、およびWin32（およびMacPerlの場合）のみ。他のすべてのプラットフォームでは、 &lt;code&gt;$^E&lt;/code&gt; は常に &lt;code&gt;$!&lt;/code&gt; と同じです！。</target>
        </trans-unit>
        <trans-unit id="915cf7d6fb5fed9ebc1249138f0ba313553fae0a" translate="yes" xml:space="preserve">
          <source>Error message &quot;No error definitions found&quot;.</source>
          <target state="translated">エラーメッセージ「エラー定義が見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="36186555ca5a85354d834f18239bd5446de015bb" translate="yes" xml:space="preserve">
          <source>Error message text from the last failed DynaLoader function. Note that, similar to errno in unix, a successful function call does not reset this message.</source>
          <target state="translated">最後に失敗したDynaLoader関数のエラーメッセージ。unix の errno と同様に、関数の呼び出しに成功してもこのメッセージはリセットされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="50134ffbfcda43f0c3168aa2876061d57b69c6ae" translate="yes" xml:space="preserve">
          <source>Error results (warning and fatal) contain:</source>
          <target state="translated">エラー結果(警告と致命的な)が含まれています。</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="e722317f0272c736783202d0439c1a84302bd3c9" translate="yes" xml:space="preserve">
          <source>Errors in rendering (non-existent function-name, non-existent coderef) are written to the STDOUT, or wherever you've set it via walk_output().</source>
          <target state="translated">レンダリング中のエラー (存在しない関数名、存在しない coderef)は、STDOUT または walk_output()で設定した場所に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="da8460251cea0573bc6a64a9a743976f334f7752" translate="yes" xml:space="preserve">
          <source>Errors set by Winsock functions are now put directly into &lt;code&gt;$^E&lt;/code&gt;, and the relevant &lt;code&gt;WSAE*&lt;/code&gt; error codes are now exported from the &lt;a href=&quot;errno&quot;&gt;Errno&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; modules for testing this against.</source>
          <target state="translated">Winsock関数によって設定されたエラーが &lt;code&gt;$^E&lt;/code&gt; に直接入れられるようになり、関連する &lt;code&gt;WSAE*&lt;/code&gt; エラーコードが&lt;a href=&quot;errno&quot;&gt;Errno&lt;/a&gt;および&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールからエクスポートされて、これをテストできるようになりました。</target>
        </trans-unit>
        <trans-unit id="0934c88916cf6f7537fb99e4833669f3818f9855" translate="yes" xml:space="preserve">
          <source>Errors using the various *style* calls, and bad args to walk_output(), result in die(). Use an eval if you wish to catch these errors and continue processing.</source>
          <target state="translated">様々な *style*呼び出しや walk_output()への不正な引数を使用したエラーは die()の結果となります。これらのエラーをキャッチして処理を続けたい場合は eval を使用してください。</target>
        </trans-unit>
        <trans-unit id="2a3a3e693d223668963c1734745a9c3d61b5507c" translate="yes" xml:space="preserve">
          <source>Eryq (</source>
          <target state="translated">エリック(</target>
        </trans-unit>
        <trans-unit id="a7b714d8f396c877eacf7d3ad661cfe313a3efe9" translate="yes" xml:space="preserve">
          <source>Escape backslashes (&lt;code&gt;\&lt;/code&gt;) in prototype strings.</source>
          <target state="translated">プロトタイプ文字列のバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）をエスケープします。</target>
        </trans-unit>
        <trans-unit id="aa094bf265d4ea86b5f894d7a380cedfb2baed9e" translate="yes" xml:space="preserve">
          <source>Escape sequences</source>
          <target state="translated">脱出シーケンス</target>
        </trans-unit>
        <trans-unit id="a95db9b35f0577a2b6c8dd20cb8afa6149f7b7b9" translate="yes" xml:space="preserve">
          <source>Escapes a given code source name (typically a file name but can also be a command that was read from) so that double-quotes and backslashes are escaped.</source>
          <target state="translated">与えられたコードのソース名 (通常はファイル名ですが、読み込まれたコマンドであっても構いません)をエスケープし、ダブルクォートとバックスラッシュがエスケープされるようにします。</target>
        </trans-unit>
        <trans-unit id="afa6da9272c9b7871ca718b60455b77d2d266044" translate="yes" xml:space="preserve">
          <source>Escapes all &lt;code&gt;$&lt;/code&gt; so they are not interpreted as make variables.</source>
          <target state="translated">すべての &lt;code&gt;$&lt;/code&gt; をエスケープして、make変数として解釈されないようにします。</target>
        </trans-unit>
        <trans-unit id="d630054693cd8886f832682006b6bb07e97c811d" translate="yes" xml:space="preserve">
          <source>Escapes at most the first &quot;count&quot; chars of pv and puts the results into dsv such that the size of the escaped string will not exceed &quot;max&quot; chars and will not contain any incomplete escape sequences. The number of bytes escaped will be returned in the STRLEN *escaped parameter if it is not null. When the dsv parameter is null no escaping actually occurs, but the number of bytes that would be escaped were it not null will be calculated.</source>
          <target state="translated">エスケープされた文字列のサイズが &quot;max &quot;文字を超えないように、また不完全なエスケープシーケンスが含まれないように、pvの最初の &quot;count &quot;文字を最大でエスケープし、結果をdsvに格納します。エスケープされたバイト数は、STRLEN *escapedパラメータがNULLでない場合に返されます。dsvパラメータがNULLの場合、実際にはエスケープは行われませんが、NULLでない場合にエスケープされたバイト数が計算されます。</target>
        </trans-unit>
        <trans-unit id="e9331784f47985d4023ae09824ecf12ebdf39d50" translate="yes" xml:space="preserve">
          <source>Escapes at most the first &lt;code&gt;count&lt;/code&gt; chars of &lt;code&gt;pv&lt;/code&gt; and puts the results into &lt;code&gt;dsv&lt;/code&gt; such that the size of the escaped string will not exceed &lt;code&gt;max&lt;/code&gt; chars and will not contain any incomplete escape sequences. The number of bytes escaped will be returned in the &lt;code&gt;STRLEN *escaped&lt;/code&gt; parameter if it is not null. When the &lt;code&gt;dsv&lt;/code&gt; parameter is null no escaping actually occurs, but the number of bytes that would be escaped were it not null will be calculated.</source>
          <target state="translated">最大で &lt;code&gt;pv&lt;/code&gt; の最初の &lt;code&gt;count&lt;/code&gt; 文字をエスケープし、エスケープされた文字列のサイズが &lt;code&gt;max&lt;/code&gt; &lt;code&gt;dsv&lt;/code&gt; 超えず、不完全なエスケープシーケンスが含まれないように、結果をdsvに入れます。エスケープされたバイト数は、nullでない場合、 &lt;code&gt;STRLEN *escaped&lt;/code&gt; パラメーターに返されます。とき &lt;code&gt;dsv&lt;/code&gt; パラメータには、実際にはnullをエスケープされていない発生しますが、エスケープされますバイトの数は、それnullが計算されますされませんでした。</target>
        </trans-unit>
        <trans-unit id="b73daf05e61c2f4ceabfe0f8dc9e8bd0fe087922" translate="yes" xml:space="preserve">
          <source>Escapes stray &lt;code&gt;$&lt;/code&gt; so they are not interpreted as make variables.</source>
          <target state="translated">エスケープは &lt;code&gt;$&lt;/code&gt; を外すので、make変数として解釈されません。</target>
        </trans-unit>
        <trans-unit id="92b417d4a5ce0ac686aeee5640af004624297a4e" translate="yes" xml:space="preserve">
          <source>Especially &lt;a href=&quot;bignum&quot;&gt;bignum&lt;/a&gt;.</source>
          <target state="translated">特に&lt;a href=&quot;bignum&quot;&gt;bignum&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51e6f8fb1216de07279b7184fe32486c4afcbbd5" translate="yes" xml:space="preserve">
          <source>Especially &lt;a href=&quot;bigrat&quot;&gt;bigrat&lt;/a&gt; as in &lt;code&gt;perl -Mbigrat -le 'print 1/3+1/4'&lt;/code&gt; .</source>
          <target state="translated">特に&lt;a href=&quot;bigrat&quot;&gt;bigrat&lt;/a&gt;のように &lt;code&gt;perl -Mbigrat -le 'print 1/3+1/4'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bcd99d9147aed607626e5d2c3fbf27fa8eaba872" translate="yes" xml:space="preserve">
          <source>Especially &lt;a href=&quot;bigrat&quot;&gt;bigrat&lt;/a&gt; as in &lt;code&gt;perl -Mbigrat -le 'print 1/3+1/4'&lt;/code&gt; and &lt;a href=&quot;bignum&quot;&gt;bignum&lt;/a&gt; as in &lt;code&gt;perl -Mbignum -le 'print sqrt(2)'&lt;/code&gt; .</source>
          <target state="translated">特に&lt;a href=&quot;bigrat&quot;&gt;bigrat&lt;/a&gt;のように &lt;code&gt;perl -Mbigrat -le 'print 1/3+1/4'&lt;/code&gt; と&lt;a href=&quot;bignum&quot;&gt;BIGNUMを&lt;/a&gt;同様 &lt;code&gt;perl -Mbignum -le 'print sqrt(2)'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5485ef59e2abd6d9fec5641c427b8c1a89ee861e" translate="yes" xml:space="preserve">
          <source>Essentially this is the same as the &lt;code&gt;__LINE__&lt;/code&gt; macro, but the &lt;code&gt;line_num(+3)&lt;/code&gt; idiom is arguably nicer.</source>
          <target state="translated">基本的に、これは &lt;code&gt;__LINE__&lt;/code&gt; マクロと同じですが、 &lt;code&gt;line_num(+3)&lt;/code&gt; イディオムは間違いなく優れています。</target>
        </trans-unit>
        <trans-unit id="0c6dff48b0f039b109420e87e1e42abbab8710f8" translate="yes" xml:space="preserve">
          <source>Establish an ISA relationship with base classes at compile time</source>
          <target state="translated">コンパイル時に基底クラスとISAの関係を確立する</target>
        </trans-unit>
        <trans-unit id="576347ec826f38428d8c8a6f8ec4acb2bceab911" translate="yes" xml:space="preserve">
          <source>Europe</source>
          <target state="translated">Europe</target>
        </trans-unit>
        <trans-unit id="aa9b05a82a74755dccc358002821ca69d31c5e54" translate="yes" xml:space="preserve">
          <source>European Computer Manufacturers Association &lt;a href=&quot;http://www.ecma.ch&quot;&gt;http://www.ecma.ch&lt;/a&gt;</source>
          <target state="translated">欧州コンピュータ製造業者協会&lt;a href=&quot;http://www.ecma.ch&quot;&gt;http://www.ecma.ch&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0309a3b568036fa350070f80c5e87dff1124fc90" translate="yes" xml:space="preserve">
          <source>Eval the codeblock, return success or failure, and the error message. This code protects $@ and $!, they will be restored by the end of the run. This code also temporarily blocks $SIG{DIE} handlers.</source>
          <target state="translated">コードブロックを評価し、成功または失敗、エラーメッセージを返します。このコードは$@と$!を保護し、実行終了時には元に戻ります。このコードはまた、$sig{die}ハンドラを一時的にブロックします。</target>
        </trans-unit>
        <trans-unit id="57720a74163f29f2034ea0831d9223b2072fcf53" translate="yes" xml:space="preserve">
          <source>Eval-group in insecure regular expression</source>
          <target state="translated">安全でない正規表現の評価グループ</target>
        </trans-unit>
        <trans-unit id="3de6a23b74739863fdcb66dba07f712f221ab630" translate="yes" xml:space="preserve">
          <source>Eval-group not allowed at runtime, use re 'eval' in regex m/%s/</source>
          <target state="translated">実行時に評価グループが許可されていない場合、regex m/%s/でre 'eval'を使用してください。</target>
        </trans-unit>
        <trans-unit id="c9fc4317afc6d18f75173c8034624de946965f7e" translate="yes" xml:space="preserve">
          <source>Eval-group not allowed, use re 'eval' in regex m/%s/</source>
          <target state="translated">評価グループは許可されていません。</target>
        </trans-unit>
        <trans-unit id="15622021802352824cd00f0a03614ec0fdf9d50b" translate="yes" xml:space="preserve">
          <source>Evaluates EXPR and exits immediately with that value. Example:</source>
          <target state="translated">EXPRを評価し、その値で直ちに終了します。例。</target>
        </trans-unit>
        <trans-unit id="c44b93a0add3946a941d2db7675bb524bcd7719a" translate="yes" xml:space="preserve">
          <source>Evaluates its expression in list context and dumps out the result in a pretty-printed fashion. Nested data structures are printed out recursively, unlike the real &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; function in Perl. When dumping hashes, you'll probably prefer 'x \%h' rather than 'x %h'. See &lt;a href=&quot;dumpvalue&quot;&gt;Dumpvalue&lt;/a&gt; if you'd like to do this yourself.</source>
          <target state="translated">リストのコンテキストでその式を評価し、きれいに印刷された方法で結果をダンプします。Perlの実際の &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 機能とは異なり、ネストされたデータ構造は再帰的に印刷されます。ハッシュをダンプするときは、 'x％h'よりも 'x \％h'を優先するでしょう。これを自分で行う場合は、&lt;a href=&quot;dumpvalue&quot;&gt;Dumpvalueを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a5bd312d1ed9e2d998f61c992d1949d05f3189c8" translate="yes" xml:space="preserve">
          <source>Evaluates its expression in list context and dumps out the result in a pretty-printed fashion. Nested data structures are printed out recursively, unlike the real &lt;code&gt;print&lt;/code&gt; function in Perl. When dumping hashes, you'll probably prefer 'x \%h' rather than 'x %h'. See &lt;a href=&quot;dumpvalue&quot;&gt;Dumpvalue&lt;/a&gt; if you'd like to do this yourself.</source>
          <target state="translated">リストコンテキストでその式を評価し、きれいに印刷された方法で結果をダンプします。ネストされたデータ構造は、Perlの実際の &lt;code&gt;print&lt;/code&gt; 関数とは異なり、再帰的に印刷されます。ハッシュをダンプするときは、おそらく「x％h」よりも「x \％h」を好むでしょう。これを自分で行いたい場合は、&lt;a href=&quot;dumpvalue&quot;&gt;Dumpvalueを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1ac54d42c3ebf7c1eb1985e5c37def23568be458" translate="yes" xml:space="preserve">
          <source>Evaluates the BLOCK or EXPR for each element of LIST (locally setting &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; to each element) and composes a list of the results of each such evaluation. Each element of LIST may produce zero, one, or more elements in the generated list, so the number of elements in the generated list may differ from that in LIST. In scalar context, returns the total number of elements so generated. In list context, returns the generated list.</source>
          <target state="translated">LISTの各要素のBLOCKまたはEXPRを評価し（各要素にローカルで&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;を設定）、そのような各評価の結果のリストを作成します。LISTの各要素は、生成されたリストに0、1、または複数の要素を生成する可能性があるため、生成されたリストの要素の数はLISTの要素の数と異なる場合があります。スカラーコンテキストでは、そのように生成された要素の総数を返します。リストコンテキストでは、生成されたリストを返します。</target>
        </trans-unit>
        <trans-unit id="0c6b463c629f711f381a6e44374ee5717c9b5851" translate="yes" xml:space="preserve">
          <source>Evaluates the BLOCK or EXPR for each element of LIST (locally setting &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; to each element) and returns the list value consisting of those elements for which the expression evaluated to true. In scalar context, returns the number of times the expression was true.</source>
          <target state="translated">LISTの各要素のBLOCKまたはEXPRを評価し（各要素にローカルで&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;を設定）、式がtrueと評価された要素で構成されるリスト値を返します。スカラーコンテキストでは、式がtrueであった回数を返します。</target>
        </trans-unit>
        <trans-unit id="9eee27e1be9e7d28580a29bfa24323cac2b1efa9" translate="yes" xml:space="preserve">
          <source>Evaluates the BLOCK or EXPR for each element of LIST (locally setting &lt;code&gt;$_&lt;/code&gt; to each element) and returns the list value composed of the results of each such evaluation. In scalar context, returns the total number of elements so generated. Evaluates BLOCK or EXPR in list context, so each element of LIST may produce zero, one, or more elements in the returned value.</source>
          <target state="translated">LISTの各要素のBLOCKまたはEXPRを評価し（ &lt;code&gt;$_&lt;/code&gt; を各要素にローカルに設定）、そのような各評価の結果で構成されるリスト値を返します。スカラーコンテキストでは、生成された要素の総数を返します。リストコンテキストでBLOCKまたはEXPRを評価するため、LISTの各要素は、戻り値に0、1、またはそれ以上の要素を生成する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e159565a978e2dbd25deef6d431807eb47abbd14" translate="yes" xml:space="preserve">
          <source>Evaluates the BLOCK or EXPR for each element of LIST (locally setting &lt;code&gt;$_&lt;/code&gt; to each element) and returns the list value consisting of those elements for which the expression evaluated to true. In scalar context, returns the number of times the expression was true.</source>
          <target state="translated">LISTの各要素のBLOCKまたはEXPRを評価し（ローカルで &lt;code&gt;$_&lt;/code&gt; を各要素に設定）、式がtrueと評価された要素で構成されるリスト値を返します。スカラーコンテキストでは、式が真であった回数を返します。</target>
        </trans-unit>
        <trans-unit id="cf5a5afbdf639c60540cb29b1afb8482a4c27513" translate="yes" xml:space="preserve">
          <source>Evaluates the hash in scalar context and returns the result.</source>
          <target state="translated">スカラコンテキストでハッシュを評価し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="adb27bcd152d36bb6aa40c050f7aa6bc064a148c" translate="yes" xml:space="preserve">
          <source>Evaluates the hash in scalar context and returns the result. Handles magic when the hash is tied.</source>
          <target state="translated">ハッシュをスカラコンテキストで評価し、結果を返します。ハッシュが結ばれている場合はマジックを扱います。</target>
        </trans-unit>
        <trans-unit id="4e9ac4c1ee356b0a19d18eecf82ac765b9101304" translate="yes" xml:space="preserve">
          <source>Evaluates the passed SV. Result handling is done the same as for &lt;code&gt;call_sv()&lt;/code&gt; etc.</source>
          <target state="translated">渡されたSVを評価します。結果の処理は、 &lt;code&gt;call_sv()&lt;/code&gt; などの場合と同じように行われます。</target>
        </trans-unit>
        <trans-unit id="808c33dddbb9e00ae9c3a4845059fe43368d7b0a" translate="yes" xml:space="preserve">
          <source>Evaluates to 0xFFFD, the code point of the Unicode REPLACEMENT CHARACTER</source>
          <target state="translated">Unicode REPLACEMENT CHARACTERのコードポイントである0xFFFDを評価します。</target>
        </trans-unit>
        <trans-unit id="48c62a6c57ccf104ad2d41815aed270108351d20" translate="yes" xml:space="preserve">
          <source>Evaluates to 1 if the byte &lt;code&gt;c&lt;/code&gt; represents the same character when encoded in UTF-8 as when not; otherwise evaluates to 0. UTF-8 invariant characters can be copied as-is when converting to/from UTF-8, saving time.</source>
          <target state="translated">バイト &lt;code&gt;c&lt;/code&gt; がUTF-8でエンコードされたときとそうでないときと同じ文字を表す場合、1と評価されます。それ以外の場合は0と評価されます。UTF-8との間で変換するときにUTF-8不変文字をそのままコピーできるため、時間を節約できます。</target>
        </trans-unit>
        <trans-unit id="100562c78d7cbca55f4722b4014576ae868df4e3" translate="yes" xml:space="preserve">
          <source>Evaluates to 1 if the representation of code point &lt;code&gt;cp&lt;/code&gt; is the same whether or not it is encoded in UTF-8; otherwise evaluates to 0. UTF-8 invariant characters can be copied as-is when converting to/from UTF-8, saving time. &lt;code&gt;cp&lt;/code&gt; is Unicode if above 255; otherwise is platform-native.</source>
          <target state="translated">コードポイント &lt;code&gt;cp&lt;/code&gt; の表現が、UTF-8でエンコードされているかどうかに関係なく同じである場合、1と評価されます。それ以外の場合は0と評価されます。UTF-8との間で変換するときにUTF-8不変文字をそのままコピーできるため、時間を節約できます。255を超える場合、 &lt;code&gt;cp&lt;/code&gt; はUnicodeです。それ以外の場合はプラットフォームネイティブです。</target>
        </trans-unit>
        <trans-unit id="8bb14ed1a5da1a7d197c5bfa2c110468f119a341" translate="yes" xml:space="preserve">
          <source>Evaluates to TRUE if the plain locale pragma without a parameter (&lt;code&gt;use locale&lt;/code&gt;) is in effect.</source>
          <target state="translated">パラメータのないプレーンロケールプラグマ（ &lt;code&gt;use locale&lt;/code&gt; ）が有効な場合、TRUEと評価されます。</target>
        </trans-unit>
        <trans-unit id="47f226763df7ae244c2d5731a8cec87c6ad68b9c" translate="yes" xml:space="preserve">
          <source>Evaluates to TRUE if, when compiling a perl program (including an &lt;code&gt;eval&lt;/code&gt;) if the plain locale pragma without a parameter (&lt;code&gt;use locale&lt;/code&gt;) is in effect.</source>
          <target state="translated">perlプログラム（ &lt;code&gt;eval&lt;/code&gt; を含む）をコンパイルするときに、パラメーターのないプレーンロケールプラグマ（ &lt;code&gt;use locale&lt;/code&gt; ）が有効な場合、TRUEと評価されます。</target>
        </trans-unit>
        <trans-unit id="f195a4b1422deea528999a2aea4d2e3abe0a2cb0" translate="yes" xml:space="preserve">
          <source>Evaluates to TRUE if, when executing a perl program (including an &lt;code&gt;eval&lt;/code&gt;) if the plain locale pragma without a parameter (&lt;code&gt;use locale&lt;/code&gt;) is in effect.</source>
          <target state="translated">perlプログラム（ &lt;code&gt;eval&lt;/code&gt; を含む）を実行するときに、パラメーターのないプレーンロケールプラグマ（ &lt;code&gt;use locale&lt;/code&gt; ）が有効な場合、TRUEと評価されます。</target>
        </trans-unit>
        <trans-unit id="0b7efdaaae8c2d5acf037415de9e55f35d46853a" translate="yes" xml:space="preserve">
          <source>Evaluates to a list of the words extracted out of</source>
          <target state="translated">抽出された単語のリストに評価します。</target>
        </trans-unit>
        <trans-unit id="d65f4596e5b21853db6815029e47b4d12178eb0e" translate="yes" xml:space="preserve">
          <source>Evaluates to non-zero if the first few bytes of the string starting at &lt;code&gt;s&lt;/code&gt; and looking no further than &lt;code&gt;e - 1&lt;/code&gt; are well-formed UTF-8 that represents one of the Unicode non-character code points; otherwise it evaluates to 0. If non-zero, the value gives how many bytes starting at &lt;code&gt;s&lt;/code&gt; comprise the code point's representation.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; で始まり、 &lt;code&gt;e - 1&lt;/code&gt; を超えない文字列の最初の数バイトが、Unicodeの文字以外のコードポイントの1つを表す整形式のUTF-8である場合、ゼロ以外と評価されます。それ以外の場合は0と評価されます。ゼロ以外の場合、値は &lt;code&gt;s&lt;/code&gt; で始まるバイト数がコードポイントの表現を構成することを示します。</target>
        </trans-unit>
        <trans-unit id="e2ba361513dd4325cee403415d7567ac05c0deb6" translate="yes" xml:space="preserve">
          <source>Evaluates to non-zero if the first few bytes of the string starting at &lt;code&gt;s&lt;/code&gt; and looking no further than &lt;code&gt;e - 1&lt;/code&gt; are well-formed UTF-8 that represents one of the Unicode surrogate code points; otherwise it evaluates to 0. If non-zero, the value gives how many bytes starting at &lt;code&gt;s&lt;/code&gt; comprise the code point's representation.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; で始まり、 &lt;code&gt;e - 1&lt;/code&gt; を超えない文字列の最初の数バイトが、Unicodeサロゲートコードポイントの1つを表す整形式のUTF-8である場合、ゼロ以外と評価されます。それ以外の場合は0と評価されます。ゼロ以外の場合、値は &lt;code&gt;s&lt;/code&gt; で始まるバイト数がコードポイントの表現を構成することを示します。</target>
        </trans-unit>
        <trans-unit id="e0b4e5bdfedcccceafa909bcd677f735ead45367" translate="yes" xml:space="preserve">
          <source>Evaluates to non-zero if the first few bytes of the string starting at &lt;code&gt;s&lt;/code&gt; and looking no further than &lt;code&gt;e - 1&lt;/code&gt; are well-formed UTF-8 that represents some Unicode code point completely acceptable for open interchange between all applications; otherwise it evaluates to 0. If non-zero, the value gives how many bytes starting at &lt;code&gt;s&lt;/code&gt; comprise the code point's representation. Any bytes remaining before &lt;code&gt;e&lt;/code&gt;, but beyond the ones needed to form the first code point in &lt;code&gt;s&lt;/code&gt;, are not examined.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; で始まり、 &lt;code&gt;e - 1&lt;/code&gt; 以下の文字列の最初の数バイトが整形式のUTF-8である場合、ゼロ以外と評価されます。これは、すべてのアプリケーション間のオープン交換に完全に受け入れられるUnicodeコードポイントを表します。それ以外の場合は0と評価されます。ゼロ以外の場合、値は &lt;code&gt;s&lt;/code&gt; で始まるバイト数がコードポイントの表現を構成することを示します。 &lt;code&gt;e&lt;/code&gt; の前に残っているが、 &lt;code&gt;s&lt;/code&gt; の最初のコードポイントを形成するために必要なバイトを超えているバイトは検査されません。</target>
        </trans-unit>
        <trans-unit id="394362d7a28197545d54a3464886ae1b442e8f27" translate="yes" xml:space="preserve">
          <source>Evaluates to non-zero if the first few bytes of the string starting at &lt;code&gt;s&lt;/code&gt; and looking no further than &lt;code&gt;e - 1&lt;/code&gt; are well-formed UTF-8 that represents some Unicode non-surrogate code point; otherwise it evaluates to 0. If non-zero, the value gives how many bytes starting at &lt;code&gt;s&lt;/code&gt; comprise the code point's representation. Any bytes remaining before &lt;code&gt;e&lt;/code&gt;, but beyond the ones needed to form the first code point in &lt;code&gt;s&lt;/code&gt;, are not examined.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; で始まり、 &lt;code&gt;e - 1&lt;/code&gt; を超えない文字列の最初の数バイトが、Unicodeの非代理コードポイントを表す整形式のUTF-8である場合、ゼロ以外と評価されます。それ以外の場合は0と評価されます。ゼロ以外の場合、値は &lt;code&gt;s&lt;/code&gt; で始まるバイト数がコードポイントの表現を構成することを示します。 &lt;code&gt;e&lt;/code&gt; の前に残っているが、 &lt;code&gt;s&lt;/code&gt; の最初のコードポイントを形成するために必要なバイトを超えているバイトは検査されません。</target>
        </trans-unit>
        <trans-unit id="3c5579ca82ad3ea408feb922437fb3356d093b24" translate="yes" xml:space="preserve">
          <source>Evaluates to non-zero if the first few bytes of the string starting at &lt;code&gt;s&lt;/code&gt; and looking no further than &lt;code&gt;e - 1&lt;/code&gt; are well-formed UTF-8, as extended by Perl, that represents some code point, subject to the restrictions given by &lt;code&gt;flags&lt;/code&gt;; otherwise it evaluates to 0. If non-zero, the value gives how many bytes starting at &lt;code&gt;s&lt;/code&gt; comprise the code point's representation. Any bytes remaining before &lt;code&gt;e&lt;/code&gt;, but beyond the ones needed to form the first code point in &lt;code&gt;s&lt;/code&gt;, are not examined.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; で始まり、 &lt;code&gt;e - 1&lt;/code&gt; 以下の文字列の最初の数バイトがPerlによって拡張された整形式のUTF-8である場合、ゼロ以外と評価されます。これは、 &lt;code&gt;flags&lt;/code&gt; によって与えられる制限に従って、コードポイントを表します。;それ以外の場合は0と評価されます。ゼロ以外の場合、値は &lt;code&gt;s&lt;/code&gt; で始まるバイト数がコードポイントの表現を構成することを示します。 &lt;code&gt;e&lt;/code&gt; の前に残っているが、 &lt;code&gt;s&lt;/code&gt; の最初のコードポイントを形成するために必要なバイトを超えているバイトは検査されません。</target>
        </trans-unit>
        <trans-unit id="b70279dc7ca9469f018e588c174a215d906087c5" translate="yes" xml:space="preserve">
          <source>Evaluates to non-zero if the first few bytes of the string starting at &lt;code&gt;s&lt;/code&gt; and looking no further than &lt;code&gt;e - 1&lt;/code&gt; are well-formed UTF-8, as extended by Perl, that represents some code point; otherwise it evaluates to 0. If non-zero, the value gives how many bytes starting at &lt;code&gt;s&lt;/code&gt; comprise the code point's representation. Any bytes remaining before &lt;code&gt;e&lt;/code&gt;, but beyond the ones needed to form the first code point in &lt;code&gt;s&lt;/code&gt;, are not examined.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; で始まり、 &lt;code&gt;e - 1&lt;/code&gt; を超えない文字列の最初の数バイトが、Perlによって拡張された整形式のUTF-8であり、コードポイントを表す場合、ゼロ以外と評価されます。それ以外の場合は0と評価されます。ゼロ以外の場合、値は &lt;code&gt;s&lt;/code&gt; で始まるバイト数がコードポイントの表現を構成することを示します。 &lt;code&gt;e&lt;/code&gt; の前に残っているが、 &lt;code&gt;s&lt;/code&gt; の最初のコードポイントを形成するために必要なバイトを超えているバイトは検査されません。</target>
        </trans-unit>
        <trans-unit id="11f4958a116f001f9e79787b5473e92c45467956" translate="yes" xml:space="preserve">
          <source>Evaluating a Perl statement from your C program</source>
          <target state="translated">C プログラムから Perl 文を評価する</target>
        </trans-unit>
        <trans-unit id="fdfaa902629988731ecf820e3310a76ecb105be5" translate="yes" xml:space="preserve">
          <source>Evaluating perl code (e.g. via &quot;eval&quot; or &quot;do 'file'&quot;) causes the code to be compiled into an internal format and then, provided there was no error in the compilation, executed. The internal format is based on many distinct</source>
          <target state="translated">perlのコードを評価する(例:&quot;eval &quot;や &quot;do 'file'&quot;で)と、コードは内部フォーマットにコンパイルされ、コンパイルにエラーがなければ実行されます。内部フォーマットは、多くの異なる</target>
        </trans-unit>
        <trans-unit id="e1f930d87a7c101ffac9391f41733ff5b3321f0a" translate="yes" xml:space="preserve">
          <source>Even &lt;code&gt;$x += 5&lt;/code&gt; or &lt;code&gt;$x++&lt;/code&gt; are not guaranteed to be atomic.</source>
          <target state="translated">でも、 &lt;code&gt;$x += 5&lt;/code&gt; または &lt;code&gt;$x++&lt;/code&gt; 原子であることが保証されていません。</target>
        </trans-unit>
        <trans-unit id="459a068431296abdc9a0ee020cbb72e87da92588" translate="yes" xml:space="preserve">
          <source>Even after they stabilize, some tests may fail.</source>
          <target state="translated">安定しても、テストによっては失敗することもあります。</target>
        </trans-unit>
        <trans-unit id="1dd817d2a76ad639afa2f373c6b0e32abc7df4b3" translate="yes" xml:space="preserve">
          <source>Even if a certain letter is tailored, its equivalent would not always tailored as well as it. For example, even though W is tailored, fullwidth W (&lt;code&gt;U+FF37&lt;/code&gt;), W with acute (&lt;code&gt;U+1E82&lt;/code&gt;), etc. are not tailored. The result may depend on whether source strings are normalized or not, and whether decomposed or composed. Thus &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt; is less preferred.</source>
          <target state="translated">特定の文字が仕立てられたとしても、それに相当するものが必ずしもそれと同じように仕立てられるとは限りません。たとえば、Wが調整されていても、全角W（ &lt;code&gt;U+FF37&lt;/code&gt; ）、アキュート付きW（ &lt;code&gt;U+1E82&lt;/code&gt; ）などは調整されません。結果は、ソース文字列が正規化されているかどうか、および分解されているか合成されているかによって異なります。したがって、 &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt; はあまり好ましくありません。</target>
        </trans-unit>
        <trans-unit id="014c0223d524d2f9046bd74912b924b926ef1dba" translate="yes" xml:space="preserve">
          <source>Even if a module is thread-safe, it doesn't mean that the module is optimized to work well with threads. A module could possibly be rewritten to utilize the new features in threaded Perl to increase performance in a threaded environment.</source>
          <target state="translated">モジュールがスレッドセーフであっても、そのモジュールがスレッドとうまく動作するように最適化されているとは限りません。スレッド環境でのパフォーマンスを向上させるために、スレッド Perl の新機能を利用するようにモジュールを書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="ea9410fd8b85c13558ab2ec195f440b39ef94e1e" translate="yes" xml:space="preserve">
          <source>Even if a prototype is available at compile time, the body of the subroutine is not (it hasn't been &lt;code&gt;AUTOLOAD&lt;/code&gt; ed yet). perl needs to examine both the &lt;code&gt;()&lt;/code&gt; prototype and the body of a subroutine at compile time to detect that it can safely replace calls to that subroutine with the constant value.</source>
          <target state="translated">コンパイル時にプロトタイプが利用可能であっても、サブルーチンの本体は利用できません（まだ &lt;code&gt;AUTOLOAD&lt;/code&gt; されていません）。perlは、コンパイル時に &lt;code&gt;()&lt;/code&gt; プロトタイプとサブルーチンの本体の両方を調べて、そのサブルーチンへの呼び出しを定数値で安全に置き換えることができることを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="732edb0c232306cf9f713f481702d02637baa9d1" translate="yes" xml:space="preserve">
          <source>Even if a prototype is available at compile time, the body of the subroutine is not (it hasn't been &lt;code&gt;AUTOLOAD&lt;/code&gt;ed yet). perl needs to examine both the &lt;code&gt;()&lt;/code&gt; prototype and the body of a subroutine at compile time to detect that it can safely replace calls to that subroutine with the constant value.</source>
          <target state="translated">プロトタイプがコンパイル時に利用可能であっても、サブルーチンの本体は利用できません（まだ &lt;code&gt;AUTOLOAD&lt;/code&gt; されていません）。perlは、コンパイル時に &lt;code&gt;()&lt;/code&gt; プロトタイプとサブルーチンの本体の両方を調べて、そのサブルーチンへの呼び出しを定数値で安全に置き換えることができることを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="6e9d9a1a7409534a2957addc0cb2ac7a35e101e4" translate="yes" xml:space="preserve">
          <source>Even if no</source>
          <target state="translated">なくても</target>
        </trans-unit>
        <trans-unit id="9a52563c6b228851d7bd722e9df68900d397ecd2" translate="yes" xml:space="preserve">
          <source>Even if there are no groupings in a regexp, it is still possible to find out what exactly matched in a string. If you use them, Perl will set &lt;code&gt;$`&lt;/code&gt; to the part of the string before the match, will set &lt;code&gt;$&amp;amp;&lt;/code&gt; to the part of the string that matched, and will set &lt;code&gt;$'&lt;/code&gt; to the part of the string after the match. An example:</source>
          <target state="translated">正規表現にグループがない場合でも、文字列内で正確に一致するものを見つけることは可能です。それらを使用すると、Perlは &lt;code&gt;$`&lt;/code&gt; を一致前の文字列の部分に設定し、 &lt;code&gt;$&amp;amp;&lt;/code&gt; を一致した文字列の部分に設定し、 &lt;code&gt;$'&lt;/code&gt; を一致後の文字列の部分に設定します。例：</target>
        </trans-unit>
        <trans-unit id="d0239289e914ec51bf43e7158f9d72ad004bea40" translate="yes" xml:space="preserve">
          <source>Even if you aren't in doubt, consider the mental welfare of the person who has to maintain the code after you, and who will probably put parentheses in the wrong place.</source>
          <target state="translated">疑っていなくても、あなたの後にコードをメンテナンスしなければならない人の精神的な福祉を考えて、おそらく間違った場所にカッコを入れることになるでしょう。</target>
        </trans-unit>
        <trans-unit id="2698b39349f79453a318cb744bc9cc6aed1c6f70" translate="yes" xml:space="preserve">
          <source>Even if you don't currently make use of the API interface, it is still worth reading it.</source>
          <target state="translated">現在APIインターフェイスを利用していなくても、一読の価値はあります。</target>
        </trans-unit>
        <trans-unit id="7c8671eab5d7a940c940da36a9cbcdd6d20bec94" translate="yes" xml:space="preserve">
          <source>Even if you don't want to modify an array, this mechanism is useful for passing multiple arrays in a single LIST, because normally the LIST mechanism will merge all the array values so that you can't extract out the individual arrays. For more on typeglobs, see &lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;&quot;Typeglobs and Filehandles&quot; in perldata&lt;/a&gt;.</source>
          <target state="translated">配列を変更したくない場合でも、このメカニズムは、単一のLISTで複数の配列を渡す場合に役立ちます。通常、LISTメカニズムはすべての配列値をマージするため、個々の配列を抽出することはできません。&lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;typeglobsの&lt;/a&gt;詳細については、perldataの「TypeglobsとFilehandles」を参照してください。</target>
        </trans-unit>
        <trans-unit id="11193f6fb31e4425ba4f294d83acb0ef83b5308c" translate="yes" xml:space="preserve">
          <source>Even if you don't want to modify an array, this mechanism is useful for passing multiple arrays in a single LIST, because normally the LIST mechanism will merge all the array values so that you can't extract out the individual arrays. For more on typeglobs, see &lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;Typeglobs and Filehandles in perldata&lt;/a&gt;.</source>
          <target state="translated">配列を変更したくない場合でも、このメカニズムは単一のLISTで複数の配列を渡すのに役立ちます。通常、LISTメカニズムはすべての配列値をマージして、個々の配列を抽出できないためです。&lt;a href=&quot;perldata#Typeglobs-and-Filehandles&quot;&gt;タイプ&lt;/a&gt;グロブの詳細については、「perldataのタイプグロブとファイルハンドル」を参照してください。</target>
        </trans-unit>
        <trans-unit id="704c6dd5d66c1d05562f24b58fe540e4c1622bbc" translate="yes" xml:space="preserve">
          <source>Even in a pattern that is interpolated and compiled at run-time, literal code blocks will be compiled once, at perl compile time; the following prints &quot;ABCD&quot;:</source>
          <target state="translated">ランタイムに補間されてコンパイルされるパターンでも、リテラルコードブロックはPerlのコンパイル時に一度だけコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="f9a57fec05cf4b4012f5962aa352266b10461d68" translate="yes" xml:space="preserve">
          <source>Even more drastic example of a process-scope change is &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot()&lt;/a&gt;&lt;/code&gt;: the root directory of all the threads changes, and no thread can undo it (as opposed to &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">プロセススコープの変更のさらに抜本的な例は、 &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot()&lt;/a&gt;&lt;/code&gt; です。すべてのスレッドのルートディレクトリが変更され、（ &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; とは対照的に）どのスレッドもそれを元に戻すことはできません。</target>
        </trans-unit>
        <trans-unit id="d47488f3c7fd4b4fcceda28125544a987450d2a0" translate="yes" xml:space="preserve">
          <source>Even more drastic example of a process-scope change is &lt;code&gt;chroot()&lt;/code&gt;: the root directory of all the threads changes, and no thread can undo it (as opposed to &lt;code&gt;chdir()&lt;/code&gt;).</source>
          <target state="translated">プロセススコープの変更のさらに抜本的な例は &lt;code&gt;chroot()&lt;/code&gt; です。すべてのスレッドのルートディレクトリが変更され、（ &lt;code&gt;chdir()&lt;/code&gt; とは対照的に）スレッドはそれを元に戻すことができません。</target>
        </trans-unit>
        <trans-unit id="fba46823e424c4e147c0d6ca9c73a6300bf0908c" translate="yes" xml:space="preserve">
          <source>Even numbered minor versions (5.14, 5.16, 5.18) are production versions, and odd numbered minor versions (5.15, 5.17, 5.19) are development versions. Unless you want to try out an experimental feature, you probably never want to install a development version of Perl.</source>
          <target state="translated">偶数のマイナーバージョン(5.14,5.16,5.18)は製品版、奇数のマイナーバージョン(5.15,5.17,5.19)は開発版です。実験的な機能を試したい場合を除いて、開発版のPerlをインストールすることはないでしょう。</target>
        </trans-unit>
        <trans-unit id="985c32669ab9bb43127ab9478cdf373b1b43c14e" translate="yes" xml:space="preserve">
          <source>Even the fallback for &lt;code&gt;decode&lt;/code&gt; must return octets, which are then decoded with the character encoding that &lt;code&gt;decode&lt;/code&gt; accepts. So for example if you wish to decode octets as UTF-8, and use ISO-8859-15 as a fallback for bytes that are not valid UTF-8, you could write</source>
          <target state="translated">&lt;code&gt;decode&lt;/code&gt; のフォールバックでもオクテットを返す必要があります。オクテットは、 &lt;code&gt;decode&lt;/code&gt; 受け入れる文字エンコーディングでデコードされます。たとえば、オクテットをUTF-8としてデコードし、有効なUTF-8ではないバイトのフォールバックとしてISO-8859-15を使用する場合は、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="899cce7279e173a144c83044ba4c75852234efbb" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;dog&lt;/code&gt; is the first alternative in the second regex, &lt;code&gt;cat&lt;/code&gt; is able to match earlier in the string.</source>
          <target state="translated">にもかかわらず、 &lt;code&gt;dog&lt;/code&gt; 二正規表現の最初の選択肢である、 &lt;code&gt;cat&lt;/code&gt; 文字列で、以前にマッチすることができます。</target>
        </trans-unit>
        <trans-unit id="491ac4fd5a527c06bb95d6b29c3d2ceec9e2c0d4" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;dog&lt;/code&gt; is the first alternative in the second regexp, &lt;code&gt;cat&lt;/code&gt; is able to match earlier in the string.</source>
          <target state="translated">にもかかわらず、 &lt;code&gt;dog&lt;/code&gt; 二正規表現の最初の選択肢である、 &lt;code&gt;cat&lt;/code&gt; 文字列で、以前にマッチすることができます。</target>
        </trans-unit>
        <trans-unit id="9e410bea532f43017a3bc057208bf28febe91829" translate="yes" xml:space="preserve">
          <source>Even though HP-UX 10.20 and 11.00 are not actively maintained by HP anymore, updates for the HP ANSI C compiler are still available from time to time, and it might be advisable to see if updates are applicable. At the moment of writing, the latests available patches for 11.00 that should be applied are PHSS_35098, PHSS_35175, PHSS_35100, PHSS_33036, and PHSS_33902). If you have a SUM account, you can use it to search for updates/patches. Enter &quot;ANSI&quot; as keyword.</source>
          <target state="translated">HP-UX 10.20 と 11.00 は HP によって積極的にメンテナンスされていませんが、HP ANSI C コンパイラのアップデートはまだ時々利用可能ですので、アップデートが適用されるかどうかを確認することをお勧めします。この記事を書いている時点で、適用すべき 11.00 の最新の利用可能なパッチは、PHSS_35098、PHSS_35175、PHSS_35100、PHSS_33036、および PHSS_33902 です。)SUMアカウントを持っている場合は、それを使ってアップデート/パッチを検索することができます。キーワードとして「ANSI」と入力します。</target>
        </trans-unit>
        <trans-unit id="66ef75af64ac05e5f42a2e25f67b5dd40dad7f74" translate="yes" xml:space="preserve">
          <source>Even though VOS allows the slash character to appear in object names, because the VOS port of Perl interprets it as a pathname delimiting character, VOS files, directories, or links whose names contain a slash character cannot be processed. Such files must be renamed before they can be processed by Perl.</source>
          <target state="translated">VOSではオブジェクト名にスラッシュ文字を使用することができますが、PerlのVOSポートではパス名の区切り文字として解釈されるため、名前にスラッシュ文字が含まれているVOSファイル、ディレクトリ、リンクは処理できません。このようなファイルは、Perl で処理する前に名前を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="cdd82719baf99cfe9734df3eaad725f4efdb196d" translate="yes" xml:space="preserve">
          <source>Even though a reference may be declared as a constant, the reference may point to data which may be changed, as this code shows.</source>
          <target state="translated">参照が定数として宣言されていても、このコードが示すように、参照は変更される可能性のあるデータを指すことがあります。</target>
        </trans-unit>
        <trans-unit id="6c1ced7503a24a96a968e8abe517680e11868256" translate="yes" xml:space="preserve">
          <source>Even though it doesn't do much, it is still preferable to writing your own classes from scratch.</source>
          <target state="translated">大したことがなくても、一から自分で授業を書いていく方が好ましいです。</target>
        </trans-unit>
        <trans-unit id="5d86d002ba38ad23c3e6f35071476718335949c5" translate="yes" xml:space="preserve">
          <source>Even though it looks as though they're the same method calls (uid), they aren't, because a &lt;code&gt;File::stat&lt;/code&gt; object is different from a &lt;code&gt;User::pwent&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;File::stat&lt;/code&gt; オブジェクトは &lt;code&gt;User::pwent&lt;/code&gt; オブジェクトとは異なるため、同じメソッド呼び出し（uid）のように見えますが、同じではありません。</target>
        </trans-unit>
        <trans-unit id="6dc6e1961fe501af8f7b8e43fd427c0320c933fd" translate="yes" xml:space="preserve">
          <source>Even though some of this section may not be understandable to you on first reading, we think it's important enough to highlight some of the gotchas before delving further, so here goes:</source>
          <target state="translated">このセクションの一部は、最初に読んだときには理解できないかもしれませんが、さらに掘り下げていく前に、いくつかのゲッチャを強調することは十分に重要だと考えていますので、以下にご紹介します。</target>
        </trans-unit>
        <trans-unit id="a15d3a1eac0736a5f4619bbd0fabeec7d4b2fc07" translate="yes" xml:space="preserve">
          <source>Even though these two matches might be thought of as complements, until v5.20 they were so only on Unicode code points.</source>
          <target state="translated">この2つのマッチは補完と思われるかもしれませんが、v5.20まではUnicodeのコードポイントのみを使っていました。</target>
        </trans-unit>
        <trans-unit id="763ed71064b10dfe0eadc8f471bf100bdbc4763d" translate="yes" xml:space="preserve">
          <source>Even though with normal text files a &quot;\n&quot; will do the trick, there is still no unified scheme for terminating a line that is portable between Unix, DOS/Win, and Macintosh, except to terminate</source>
          <target state="translated">通常のテキストファイルでは &quot;\n&quot; で済むとしても、Unix、DOS/Win、Macintosh の間で移植可能な行を終了させるための統一された方式はまだありません。</target>
        </trans-unit>
        <trans-unit id="4630d8c85d1750185c25d65fe850b66a19d12625" translate="yes" xml:space="preserve">
          <source>Even though you started with a completely empty hash, after that call to &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; you've created the structure you needed to check for &lt;code&gt;key3&lt;/code&gt; :</source>
          <target state="translated">完全に空のハッシュから始めたにもかかわらず、 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; への呼び出しの後、 &lt;code&gt;key3&lt;/code&gt; をチェックするために必要な構造を作成しました：</target>
        </trans-unit>
        <trans-unit id="65c079978ec4f4cfbd582b4959b8aaf4fe2b2dbe" translate="yes" xml:space="preserve">
          <source>Even though you started with a completely empty hash, after that call to &lt;code&gt;exists&lt;/code&gt; you've created the structure you needed to check for &lt;code&gt;key3&lt;/code&gt;:</source>
          <target state="translated">完全に空のハッシュから始めたとしても、その呼び出しが &lt;code&gt;exists&lt;/code&gt; 後、 &lt;code&gt;key3&lt;/code&gt; をチェックするために必要な構造を作成しました。</target>
        </trans-unit>
        <trans-unit id="08c088010f5560d49366ca00a6983df9e83535cb" translate="yes" xml:space="preserve">
          <source>Even when on a single platform (if you can call Unix a single platform), remember not to count on the existence or the contents of particular system-specific files or directories, like</source>
          <target state="translated">シングルプラットフォーム上であっても (Unix をシングルプラットフォームと呼ぶことができるのであれば)、以下のような特定のシステム固有のファイルやディレクトリの存在や内容をあてにしないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="1602f4d9817a3dceaa33d17e6c176137283825a5" translate="yes" xml:space="preserve">
          <source>Even with all this work, regexp matching happens remarkably fast. To speed things up, Perl compiles the regexp into a compact sequence of opcodes that can often fit inside a processor cache. When the code is executed, these opcodes can then run at full throttle and search very quickly.</source>
          <target state="translated">このような作業を行っても、正規表現のマッチングは驚くほど高速に行われます。これを高速化するために、Perlは正規表現をプロセッサのキャッシュ内に収まるようなコンパクトな一連のオペコードにコンパイルしています。コードが実行されると、これらのオペコードはフルスロットルで実行され、非常に高速に検索されます。</target>
        </trans-unit>
        <trans-unit id="35946850beee8b541477d17361e646c61666892c" translate="yes" xml:space="preserve">
          <source>Even with the latest version of Perl, it is known that certain constructs with threads may result in warning messages concerning leaked scalars or unreferenced scalars. However, such warnings are harmless, and may safely be ignored.</source>
          <target state="translated">Perl の最新バージョンでも、スレッドを使用した特定のコンストラクタでは、漏洩したスカラや参照されていないスカラに関する警告メッセージが表示されることが知られています。しかし、このような警告は無害であり、安全に無視することができます。</target>
        </trans-unit>
        <trans-unit id="878e531bfbade13b1bab65a888ae7d4bdc1140e8" translate="yes" xml:space="preserve">
          <source>Event Log</source>
          <target state="translated">イベントログ</target>
        </trans-unit>
        <trans-unit id="d3032d704e23194c50435cf4a6371b080589c4eb" translate="yes" xml:space="preserve">
          <source>Event driven.</source>
          <target state="translated">イベントドリブン。</target>
        </trans-unit>
        <trans-unit id="1d1394956111c7856f6f7f78713d6c0aa968cc8b" translate="yes" xml:space="preserve">
          <source>Event for TAP version.</source>
          <target state="translated">TAP版のイベント。</target>
        </trans-unit>
        <trans-unit id="cb79b9266fc643c28f6d3ecc5b6b3731a8786707" translate="yes" xml:space="preserve">
          <source>Event for a simple failed assertion</source>
          <target state="translated">単純な失敗したアサーションのためのイベント</target>
        </trans-unit>
        <trans-unit id="fcd541c73c6d801e12ef6ab2a2ef6eeb8678fe31" translate="yes" xml:space="preserve">
          <source>Event for a simple passing assertion</source>
          <target state="translated">単純な通過アサーションのためのイベント</target>
        </trans-unit>
        <trans-unit id="1cbb1e51381ea5f156ee24e974d0e8c3d15bb5e6" translate="yes" xml:space="preserve">
          <source>Event for subtest types</source>
          <target state="translated">サブテストタイプのイベント</target>
        </trans-unit>
        <trans-unit id="fa125b31576ec16d1e191efd5ca768b2aa4efa32" translate="yes" xml:space="preserve">
          <source>Event package name.</source>
          <target state="translated">イベントパッケージ名。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="3cece53956ddc248529397d0c65ecaab5ebb07b6" translate="yes" xml:space="preserve">
          <source>Events live under this namespace. It is considered acceptable for third party distributions to add new event types in this namespace.</source>
          <target state="translated">イベントはこの名前空間の下に存在します。サードパーティのディストリビューションがこの名前空間に新しいイベントタイプを追加することは許容されると考えられています。</target>
        </trans-unit>
        <trans-unit id="50edb0cf580f75f4a0fea837a24e96eb1cff3aca" translate="yes" xml:space="preserve">
          <source>Events use this facet when they need to set the plan.</source>
          <target state="translated">イベントは、計画を設定する必要があるときにこのファセットを使用します。</target>
        </trans-unit>
        <trans-unit id="98b8ce2e1404f72b01628a7fbd8afce9a0ca4416" translate="yes" xml:space="preserve">
          <source>Events within a buffered subtest may or may not be sent to the formatter as they happen. If a formatter fails to specify then the default is to &lt;b&gt;NOT SEND&lt;/b&gt; the events as they are generated, instead the formatter can pull them from the &lt;code&gt;subevents&lt;/code&gt; attribute.</source>
          <target state="translated">バッファリングされたサブテスト内のイベントは、発生時にフォーマッタに送信される場合と送信されない場合があります。フォーマッターが指定に失敗した場合、デフォルトでは、生成されたイベントを&lt;b&gt;送信&lt;/b&gt;し&lt;b&gt;ない&lt;/b&gt;でください。代わりに、フォーマッターは &lt;code&gt;subevents&lt;/code&gt; 属性からイベントをプルできます。</target>
        </trans-unit>
        <trans-unit id="c4538af23a815bef65c32e32809e639186875a9f" translate="yes" xml:space="preserve">
          <source>Eventually, with better documentation and possible some cleanup, this could be part of &lt;code&gt;ExtUtils::Typemaps&lt;/code&gt;.</source>
          <target state="translated">最終的には、より良いドキュメントと可能なクリーンアップにより、これは &lt;code&gt;ExtUtils::Typemaps&lt;/code&gt; 一部になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d002601ef62e11979d8b7c94cd10d54da0d3a8e1" translate="yes" xml:space="preserve">
          <source>Ever wanted to know what a regex looked like? You'll need perl compiled with the DEBUGGING flag for this one:</source>
          <target state="translated">正規表現がどのようなものか知りたいと思ったことはありませんか?このためにはDEBUGGINGフラグをつけてコンパイルされたPerlが必要です。</target>
        </trans-unit>
        <trans-unit id="d845fa7f9ca71d8879b9cc1aee98930cd966bdbd" translate="yes" xml:space="preserve">
          <source>Every CPAN module has a bug tracker set up in RT, &lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org&lt;/a&gt;. You can submit bugs to RT either through its web interface or by email. To email a bug report, send it to bug-&amp;lt;distribution-name&amp;gt;@rt.cpan.org . For example, if you wanted to report a bug in &lt;a href=&quot;Business::ISBN&quot;&gt;Business::ISBN&lt;/a&gt;, you could send a message to bug-Business-ISBN@rt.cpan.org .</source>
          <target state="translated">すべてのCPANモジュールには、RT（&lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org）&lt;/a&gt;で設定されたバグトラッカーがあります。バグは、Webインターフェイスまたは電子メールでRTに送信できます。バグレポートを電子メールで送信するには、バグレポートをbug- &amp;lt;distribution-name&amp;gt; @ rt.cpan.orgに送信してください。たとえば、&lt;a href=&quot;Business::ISBN&quot;&gt;Business :: ISBNの&lt;/a&gt;バグを報告する場合は、bug- Business-ISBN @ rt.cpan.orgにメッセージを送信できます。</target>
        </trans-unit>
        <trans-unit id="3fc9126b1847307a5366bc653e3a3467f58a3dfa" translate="yes" xml:space="preserve">
          <source>Every CPAN module has a bug tracker set up in RT, &lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org&lt;/a&gt;. You can submit bugs to RT either through its web interface or by email. To email a bug report, send it to bug-&amp;lt;distribution-name&amp;gt;@rt.cpan.org . For example, if you wanted to report a bug in &lt;a href=&quot;http://search.cpan.org/perldoc/Business::ISBN&quot;&gt;Business::ISBN&lt;/a&gt;, you could send a message to bug-Business-ISBN@rt.cpan.org .</source>
          <target state="translated">すべてのCPANモジュールには、RT &lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.orgに&lt;/a&gt;バグトラッカーが設定されています。バグをRTに送信するには、Webインターフェイスまたは電子メールを使用します。バグレポートを電子メールで送信するには、それをbug- &amp;lt;distribution-name&amp;gt; @ rt.cpan.orgに送信してください。たとえば、&lt;a href=&quot;http://search.cpan.org/perldoc/Business::ISBN&quot;&gt;Business :: ISBNの&lt;/a&gt;バグを報告する場合は、メッセージをbug-Business-ISBN@rt.cpan.orgに送信できます。</target>
        </trans-unit>
        <trans-unit id="b8dc7000ca1bb13ca17faed27406eccbd7bcf88b" translate="yes" xml:space="preserve">
          <source>Every Makefile.PL is run by perl in a separate process. Likewise we run 'make' and 'make install' in separate processes. If you have any parameters (e.g. PREFIX, UNINST or the like) you want to pass to the calls, please specify them here.</source>
          <target state="translated">すべての Makefile.PL は perl によって別のプロセスで実行されます。同様に、'make'と'make install'も別々のプロセスで実行します。呼び出しに渡したいパラメータ(例:PREFIX,UNINST など)があれば、ここで指定してください。</target>
        </trans-unit>
        <trans-unit id="5243f64d154762b9f500ff300bf1242e41c19e00" translate="yes" xml:space="preserve">
          <source>Every Unicode character is assigned a general category, which is the &quot;most usual categorization of a character&quot; (from &lt;a href=&quot;http://www.unicode.org/reports/tr44&quot;&gt;http://www.unicode.org/reports/tr44&lt;/a&gt;).</source>
          <target state="translated">すべてのUnicode文字には、「文字の最も一般的な分類」である一般的なカテゴリが割り当てられます（&lt;a href=&quot;http://www.unicode.org/reports/tr44&quot;&gt;http://www.unicode.org/reports/tr44&lt;/a&gt;から）。</target>
        </trans-unit>
        <trans-unit id="44bc5eca50d1bb33525106b332f679e0c37967c9" translate="yes" xml:space="preserve">
          <source>Every Unicode character is assigned a general category, which is the &quot;most usual categorization of a character&quot; (from &lt;a href=&quot;https://www.unicode.org/reports/tr44&quot;&gt;https://www.unicode.org/reports/tr44&lt;/a&gt;).</source>
          <target state="translated">すべてのUnicode文字には、「文字の最も一般的な分類」である一般的なカテゴリが割り当てられます（&lt;a href=&quot;https://www.unicode.org/reports/tr44&quot;&gt;https://www.unicode.org/reports/tr44&lt;/a&gt;から）。</target>
        </trans-unit>
        <trans-unit id="2fe5013abe724619f4b95c9d05a2b40a50dbbb59" translate="yes" xml:space="preserve">
          <source>Every YAML document represents a single hash reference. The valid keys in this hash are as follows:</source>
          <target state="translated">すべてのYAMLドキュメントは単一のハッシュ参照を表します。このハッシュの有効なキーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="302f7ff33fa3b90fdd2132b2697fb84f8705e874" translate="yes" xml:space="preserve">
          <source>Every YAML file may contain arbitrary documents according to the YAML specification, and every document is treated as an entity that can specify the treatment of a single distribution.</source>
          <target state="translated">すべてのYAMLファイルにはYAML仕様に従って任意のドキュメントが含まれている可能性があり、すべてのドキュメントは1つの配布物の扱いを指定できる実体として扱われます。</target>
        </trans-unit>
        <trans-unit id="08580b590313edf277a406f46fd0c846e6d3947e" translate="yes" xml:space="preserve">
          <source>Every case has a specific application and one or more exceptions, and there is no replacement for running a few tests and finding out which method works best for your particular environment, this is why writing optimal code is not an exact science, and why we love using Perl so much - TMTOWTDI.</source>
          <target state="translated">すべてのケースには特定のアプリケーションと1つ以上の例外があり、いくつかのテストを実行して、どのメソッドが特定の環境に最適に動作するかを見つけるための代替はありません。</target>
        </trans-unit>
        <trans-unit id="5d3966578fbc31ddc5c9c823b10c9d09c4de1eb0" translate="yes" xml:space="preserve">
          <source>Every code point can be represented by more than one possible syntactically valid UTF-8 sequence. Early on, both Unicode and Perl considered any of these to be valid, but now, all sequences longer than the shortest possible one are considered to be malformed.</source>
          <target state="translated">すべてのコードポイントは、構文的に有効な UTF-8 シーケンスで表現することができます。初期の頃は、Unicode と Perl の両方でこれらのいずれかが有効であると考えられていましたが、現在では、可能な限り最短のものよりも長いシーケンスはすべてマルフォームであると考えられています。</target>
        </trans-unit>
        <trans-unit id="e844c7ea0f1cedd3ae0259a6817d00e2a02c10f0" translate="yes" xml:space="preserve">
          <source>Every developer publishing modules on CPAN needs a CPAN ID. Visit &lt;code&gt;&lt;a href=&quot;http://pause.perl.org/&quot;&gt;http://pause.perl.org/&lt;/a&gt;&lt;/code&gt;, select &quot;Request PAUSE Account&quot;, and wait for your request to be approved by the PAUSE administrators.</source>
          <target state="translated">CPANでモジュールを公開するすべての開発者には、CPAN IDが必要です。 &lt;code&gt;&lt;a href=&quot;http://pause.perl.org/&quot;&gt;http://pause.perl.org/&lt;/a&gt;&lt;/code&gt; にアクセスし、[PAUSEアカウントのリクエスト]を選択して、PAUSE管理者によるリクエストの承認を待ちます。</target>
        </trans-unit>
        <trans-unit id="e4befbeaf4f0b8eb62e07538a8708d75b3c87445" translate="yes" xml:space="preserve">
          <source>Every element in an arrayref directly below a 'par' key is eligible to be run in parallel, while vavalues directly below a 'seq' key must be run in sequence.</source>
          <target state="translated">par' キーの直下にある arrayref のすべての要素は並列に実行することができますが、'seq' キーの直下にある vavalues は順番に実行しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e1c563b6d35c0f4b5118e9474a1d4ce3c52e7bcc" translate="yes" xml:space="preserve">
          <source>Every element node in the parse tree is represented by an arrayref of the form: &lt;code&gt;[ &lt;i&gt;elementname&lt;/i&gt;, \%attributes, &lt;i&gt;...subnodes...&lt;/i&gt; ]&lt;/code&gt;. See the example tree dump in the Synopsis, above.</source>
          <target state="translated">解析ツリーのすべての要素ノードは、 &lt;code&gt;[ &lt;i&gt;elementname&lt;/i&gt;, \%attributes, &lt;i&gt;...subnodes...&lt;/i&gt; ]&lt;/code&gt; という形式のarrayrefで表されます。上記の概要のツリーダンプの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6134bc0f6fbba39ed1a9d9da08c6587b9ff61665" translate="yes" xml:space="preserve">
          <source>Every line here (apart from the braces, of course) contains a macro. The first line sets up the function declaration as Perl expects for PP code; line 3 sets up variable declarations for the argument stack and the target, the return value of the operation. Finally, it tries to see if the addition operation is overloaded; if so, the appropriate subroutine is called.</source>
          <target state="translated">ここでは、(もちろん中括弧を除いて)すべての行にマクロが含まれています。1行目はPerlがPPコードに期待しているように関数宣言を設定し、3行目は引数スタックと演算の戻り値であるターゲットの変数宣言を設定します。最後に、加算演算がオーバーロードされているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="9871a7eb268ef840aca89ae1947284ed4718351a" translate="yes" xml:space="preserve">
          <source>Every line here (apart from the braces, of course) contains a macro. The first line sets up the function declaration as Perl expects for PP code; line 3 sets up variable declarations for the argument stack and the target, the return value of the operation. Line 4 tries to see if the addition operation is overloaded; if so, the appropriate subroutine is called.</source>
          <target state="translated">ここでは、(もちろん中括弧を除いて)すべての行にマクロが含まれています。3行目は、引数スタックと演算の戻り値であるターゲットの変数宣言を設定します。4行目では、加算操作がオーバーロードされているかどうかを確認し、オーバーロードされている場合は適切なサブルーチンを呼び出します。</target>
        </trans-unit>
        <trans-unit id="16573fbf6c4df85710f7971d1598380405b3cf7c" translate="yes" xml:space="preserve">
          <source>Every single tool in the chain from this, to &lt;code&gt;ok&lt;/code&gt;, to anything &lt;code&gt;ok&lt;/code&gt; calls needs to increment the &lt;code&gt;$Level&lt;/code&gt; variable. When an error occurs Test::Builder will do a trace to the stack frame determined by &lt;code&gt;$Level&lt;/code&gt;, and report that file+line as the one where the error occurred. If you or any other tool you use forgets to set &lt;code&gt;$Level&lt;/code&gt; then errors will be reported to the wrong place.</source>
          <target state="translated">&lt;code&gt;ok&lt;/code&gt; 、 &lt;code&gt;ok&lt;/code&gt; 呼び出しまでのチェーン内のすべてのツールは、 &lt;code&gt;$Level&lt;/code&gt; 変数をインクリメントする必要があります。エラーが発生すると、Test :: Builderは、 &lt;code&gt;$Level&lt;/code&gt; によって決定されたスタックフレームへのトレースを実行し、そのファイルと行をエラーが発生したものとして報告します。あなたまたはあなたが使用する他のツールが &lt;code&gt;$Level&lt;/code&gt; 設定を忘れた場合、エラーは間違った場所に報告されます。</target>
        </trans-unit>
        <trans-unit id="a07a9740c8c1d7a3f895cbb42b5e873e7ccb12fd" translate="yes" xml:space="preserve">
          <source>Every source stream is associated with only one file.</source>
          <target state="translated">すべてのソースストリームは、1つのファイルのみに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="5b61ca48fb706399cd7458bb7c44f76e50b97e70" translate="yes" xml:space="preserve">
          <source>Every text node in the tree is represented by a simple (non-ref) string scalar. So you can test &lt;code&gt;&lt;a href=&quot;../../functions/ref&quot;&gt;ref($node)&lt;/a&gt;&lt;/code&gt; to see whether you have an element node or just a text node.</source>
          <target state="translated">ツリー内のすべてのテキストノードは、単純な（非ref）文字列スカラーで表されます。したがって、 &lt;code&gt;&lt;a href=&quot;../../functions/ref&quot;&gt;ref($node)&lt;/a&gt;&lt;/code&gt; をテストして、要素ノードがあるのか​​、テキストノードしかないのかを確認できます。</target>
        </trans-unit>
        <trans-unit id="4b4dd92417b29f82a4df6cf833806102b2032c12" translate="yes" xml:space="preserve">
          <source>Every text node in the tree is represented by a simple (non-ref) string scalar. So you can test &lt;code&gt;ref($node)&lt;/code&gt; to see whether you have an element node or just a text node.</source>
          <target state="translated">ツリー内のすべてのテキストノードは、単純な（非参照）文字列スカラーで表されます。したがって、 &lt;code&gt;ref($node)&lt;/code&gt; をテストして、要素ノードがあるのか​​、テキストノードしかないのかを確認できます。</target>
        </trans-unit>
        <trans-unit id="f280cfdb5544f17d8056c7b9960291300e70ff8a" translate="yes" xml:space="preserve">
          <source>Every variable type has its own namespace, as do several non-variable identifiers. This means that you can, without fear of conflict, use the same name for a scalar variable, an array, or a hash--or, for that matter, for a filehandle, a directory handle, a subroutine name, a format name, or a label. This means that $foo and @foo are two different variables. It also means that &lt;code&gt;$foo[1]&lt;/code&gt; is a part of @foo, not a part of $foo. This may seem a bit weird, but that's okay, because it is weird.</source>
          <target state="translated">すべての変数型には、いくつかの非変数識別子と同様に、独自の名前空間があります。つまり、競合を恐れずに、スカラー変数、配列、またはハッシュに同じ名前を使用できます。つまり、ファイルハンドル、ディレクトリハンドル、サブルーチン名、フォーマット名、またはラベル。つまり、$ fooと@fooは2つの異なる変数です。これは、 &lt;code&gt;$foo[1]&lt;/code&gt; が@fooの一部ではなく、@ fooの一部であることも意味します。これは少し奇妙に見えるかもしれませんが、それは奇妙なので大丈夫です。</target>
        </trans-unit>
        <trans-unit id="c6b180367788582d4ac065b82e10c88a1c69b113" translate="yes" xml:space="preserve">
          <source>Every version of perl has some number of features present but considered &quot;experimental.&quot; For much of the life of Perl 5, this was only a designation found in the documentation. Starting in Perl v5.10.0, and more aggressively in v5.18.0, experimental features were placed behind pragmata used to enable the feature and disable associated warnings.</source>
          <target state="translated">Perl のすべてのバージョンは、いくつかの機能を持っていますが、&quot;実験的 &quot;とみなされています。Perl 5 のほとんどの期間、これはドキュメントに記載されている名称でしかありませんでした。Perl v5.10.0 から始まり、v5.18.0 ではより積極的に、実験的な機能は機能を有効にしたり、関連する警告を無効にしたりするためのプラグマタの後ろに配置されました。</target>
        </trans-unit>
        <trans-unit id="88a304f3d76dc1d9d113e9e43b3de43a63253440" translate="yes" xml:space="preserve">
          <source>Everyone needs compound data structures, and in Perl the way you get them is with references. There are four important rules for managing references: Two for making references and two for using them. Once you know these rules you can do most of the important things you need to do with references.</source>
          <target state="translated">誰もが複合データ構造を必要としており、Perlではそれらを取得する方法は参照を使用しています。参照を管理するための4つの重要なルールがあります。2 つは参照を作成するためのもので、2 つは参照を使用するためのものです。これらのルールを知っていれば、参照を使って行う必要がある重要なことのほとんどを行うことができます。</target>
        </trans-unit>
        <trans-unit id="d9f3a853f21ee670feb2d57d64386bb213e70924" translate="yes" xml:space="preserve">
          <source>Everything is exported by default</source>
          <target state="translated">デフォルトではすべてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="821563e027b1aef4013748dd378d74e1f89659aa" translate="yes" xml:space="preserve">
          <source>Everything that comes with the official</source>
          <target state="translated">公式に付属しているものは全て</target>
        </trans-unit>
        <trans-unit id="f760e16023bf894abde8086e9d7f6c930e923eae" translate="yes" xml:space="preserve">
          <source>Evolution</source>
          <target state="translated">Evolution</target>
        </trans-unit>
        <trans-unit id="be9e0b5a60df791db5db8c0c5ce8e708153692fd" translate="yes" xml:space="preserve">
          <source>Exact name value matching means you have to specify case, hyphens, underscores, and spaces precisely in the name you want. Loose matching follows the Unicode rules &lt;a href=&quot;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&quot;&gt;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&lt;/a&gt;, where these are mostly irrelevant. Except for a few outlier character names, these are the same rules as are already used for any other &lt;code&gt;\p{...}&lt;/code&gt; property.</source>
          <target state="translated">正確な名前と値の一致は、大文字と小文字、ハイフン、アンダースコア、およびスペースを必要な名前で正確に指定する必要があることを意味します。緩いマッチングは、Unicodeルール&lt;a href=&quot;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&quot;&gt;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2に&lt;/a&gt;従いますが、これらはほとんど関係ありません。いくつかの外れ値の文字名を除いて、これらは他の &lt;code&gt;\p{...}&lt;/code&gt; プロパティにすでに使用されているものと同じルールです。</target>
        </trans-unit>
        <trans-unit id="d7b6ebbed9d8b46f1eee90eb921f0ea47e548b03" translate="yes" xml:space="preserve">
          <source>Exact version of acceptance unclear, but no later than Perl 5.18.</source>
          <target state="translated">受け入れの正確なバージョンは不明ですが、Perl 5.18 以降ではありません。</target>
        </trans-unit>
        <trans-unit id="e38657e86225451957dba5ba0d3e55c8be9b8de9" translate="yes" xml:space="preserve">
          <source>Exactly equivalent to &lt;code&gt;Perl_croak(aTHX_ &quot;%s&quot;, PL_no_modify)&lt;/code&gt; , but generates terser object code than using &lt;code&gt;Perl_croak&lt;/code&gt; . Less code used on exception code paths reduces CPU cache pressure.</source>
          <target state="translated">正確に相当 &lt;code&gt;Perl_croak(aTHX_ &quot;%s&quot;, PL_no_modify)&lt;/code&gt; が、使用するよりterserオブジェクトコード生成 &lt;code&gt;Perl_croak&lt;/code&gt; を。例外コードパスで使用されるコードが少ないほど、CPUキャッシュの負荷が軽減されます。</target>
        </trans-unit>
        <trans-unit id="1def74e4170191cc1ecc96e344d4615200db8d79" translate="yes" xml:space="preserve">
          <source>Exactly equivalent to &lt;code&gt;Perl_croak(aTHX_ &quot;%s&quot;, PL_no_modify)&lt;/code&gt;, but generates terser object code than using &lt;code&gt;Perl_croak&lt;/code&gt;. Less code used on exception code paths reduces CPU cache pressure.</source>
          <target state="translated">正確に相当 &lt;code&gt;Perl_croak(aTHX_ &quot;%s&quot;, PL_no_modify)&lt;/code&gt; が、使用するよりterserオブジェクトコード生成 &lt;code&gt;Perl_croak&lt;/code&gt; を。例外コードパスで使用されるコードが少ないほど、CPUキャッシュの負荷が軽減されます。</target>
        </trans-unit>
        <trans-unit id="6053d16ee562b64ba170e6e47fc5857d6aeb0497" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;&quot;gv_fetchmeth_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;「gv_fetchmeth_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="dd790b9a98470795c376e22181e112aefbda6acd" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;&quot;gv_fetchmeth_pvn&quot;&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;「gv_fetchmeth_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="6c8b76dc891dae007ee34c3cafc01118a9a75f9f" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;とまったく同じですが、文字列と長さのペアの代わりに、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="108d410dddfe12b3ba82a3d3c5aded251e31ceaa" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;とまったく同じですが、文字列/長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="70cd839834c4360be38cc8d256d0d20412f0b989" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;&quot;gv_fetchmeth_pvn_autoload&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;「gv_fetchmeth_pvn_autoload」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="11580dd84621e2b64c36cda28026ace99fe93821" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;&quot;gv_fetchmeth_pvn_autoload&quot;&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;「gv_fetchmeth_pvn_autoload」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="752e1ac766f2cea599a309e02440f40a97bb8d75" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;gv_fetchmeth_pvn_autoload&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;gv_fetchmeth_pvn_autoload&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="a2b3eb60980e277cbebb6619993b224a080d7c7e" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;gv_fetchmeth_pvn_autoload&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn_autoload&quot;&gt;gv_fetchmeth_pvn_autoload&lt;/a&gt;とまったく同じですが、文字列/長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="0d559e98d13b3a163a9ac6d26cc159b061a846ce" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_add_name_pvn&quot;&gt;&quot;pad_add_name_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_add_name_pvn&quot;&gt;「pad_add_name_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="241177ff9d4a9c2896853e85618eb16dd97a70c1" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_add_name_pvn&quot;&gt;&quot;pad_add_name_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_add_name_pvn&quot;&gt;「pad_add_name_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="6ca8fa3e370c992adee4f86a24ca37067ce4aaf2" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_add_name_pvn&quot;&gt;&quot;pad_add_name_pvn&quot;&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_add_name_pvn&quot;&gt;「pad_add_name_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="2fed67a8755ba4f29f90415a63203b5925d94458" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_add_name_pvn&quot;&gt;pad_add_name_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_add_name_pvn&quot;&gt;pad_add_name_pvn&lt;/a&gt;とまったく同じですが、文字列/長さのペアの代わりにリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="08b5afa04635fafa6b86d20073dca412668556d2" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_add_name_pvn&quot;&gt;pad_add_name_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_add_name_pvn&quot;&gt;pad_add_name_pvn&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="2ec05cc4ebe9d68aa94cb00389e8f5276b127226" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_add_name_pvn&quot;&gt;pad_add_name_pvn&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_add_name_pvn&quot;&gt;pad_add_name_pvn&lt;/a&gt;とまったく同じですが、文字列/長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="721fb60df3440b2db377705e79d6aa33255046e5" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_findmy_pvn&quot;&gt;&quot;pad_findmy_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_findmy_pvn&quot;&gt;「pad_findmy_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="858cd1e7a5bd641a77589913581d976a28b686b2" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_findmy_pvn&quot;&gt;&quot;pad_findmy_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_findmy_pvn&quot;&gt;「pad_findmy_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="94c2f18b7b484bc1bcc0d307015d1cb3e5fc9527" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_findmy_pvn&quot;&gt;&quot;pad_findmy_pvn&quot;&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_findmy_pvn&quot;&gt;「pad_findmy_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="1fc43c20a7b147a5aa429b8bfb5b2198f1bee606" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_findmy_pvn&quot;&gt;pad_findmy_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_findmy_pvn&quot;&gt;pad_findmy_pvn&lt;/a&gt;とまったく同じですが、文字列と長さのペアの代わりにリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="1f5dc14f0356699ed601763f5b30ea66b583f929" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_findmy_pvn&quot;&gt;pad_findmy_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_findmy_pvn&quot;&gt;pad_findmy_pvn&lt;/a&gt;とまったく同じですが、文字列と長さのペアの代わりに、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="381384c344ba8cf1c452502a4a84edc8e962e04a" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#pad_findmy_pvn&quot;&gt;pad_findmy_pvn&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#pad_findmy_pvn&quot;&gt;pad_findmy_pvn&lt;/a&gt;とまったく同じですが、文字列/長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="18d3309cb57d37bd7fd350ad135bb897c6c3caec" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#sv_derived_from_pv&quot;&gt;&quot;sv_derived_from_pv&quot;&lt;/a&gt;, but doesn't take a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;a href=&quot;#sv_derived_from_pv&quot;&gt;「sv_valent_from_pv」&lt;/a&gt;とまったく同じですが、 &lt;code&gt;flags&lt;/code&gt; パラメーターを取りません。</target>
        </trans-unit>
        <trans-unit id="f7e2d16336a0ca2ee4b68d73a469a9a7d8cd8bf4" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#sv_derived_from_pv&quot;&gt;sv_derived_from_pv&lt;/a&gt;, but doesn't take a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;a href=&quot;#sv_derived_from_pv&quot;&gt;sv_derived_from_pv&lt;/a&gt;とまったく同じですが、 &lt;code&gt;flags&lt;/code&gt; パラメータを取りません。</target>
        </trans-unit>
        <trans-unit id="3b2c74334223dd3188d999503340448a8a7e5fef" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;&quot;sv_derived_from_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;「sv_different_from_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="4ba2fef806c19d8e36b1b9aa042130a5d1188a1f" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;&quot;sv_derived_from_pvn&quot;&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair. This is the advised form.</source>
          <target state="translated">&lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;「sv_different_from_pvn」&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、SVの形式で名前文字列を取ります。これはアドバイスされたフォームです。</target>
        </trans-unit>
        <trans-unit id="0ca422a64172952765c1b42b368f2ea1d836ab7e" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;sv_derived_from_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;sv_derived_from_pvn&lt;/a&gt;とまったく同じですが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="89c565bb719c5d7bd5d0a569932a9c743f646c23" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;sv_derived_from_pvn&lt;/a&gt;, but takes the name string in the form of an SV instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#sv_derived_from_pvn&quot;&gt;sv_derived_from_pvn&lt;/a&gt;とまったく同じですが、文字列/長さのペアではなく、SVの形式で名前文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="f536be833f98474874e14c0022645d10cd4c4708" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;code&gt;XopENTRY(XopENTRY(Perl_custom_op_xop(aTHX_ o), which)&lt;/code&gt; but more efficient. The</source>
          <target state="translated">&lt;code&gt;XopENTRY(XopENTRY(Perl_custom_op_xop(aTHX_ o), which)&lt;/code&gt; まったく同じですが、より効率的です。</target>
        </trans-unit>
        <trans-unit id="ed85a2d94251cb3b70317fcac3c7aa7dfac953f8" translate="yes" xml:space="preserve">
          <source>Exactly like &lt;code&gt;XopENTRY(XopENTRY(Perl_custom_op_xop(aTHX_ o), which)&lt;/code&gt; but more efficient. The &lt;code&gt;which&lt;/code&gt; parameter is identical to &lt;a href=&quot;#XopENTRY&quot;&gt;&quot;XopENTRY&quot;&lt;/a&gt;.</source>
          <target state="translated">正確等 &lt;code&gt;XopENTRY(XopENTRY(Perl_custom_op_xop(aTHX_ o), which)&lt;/code&gt; が、より効率的。 &lt;code&gt;which&lt;/code&gt; と同一であるパラメータ&lt;a href=&quot;#XopENTRY&quot;&gt;「XopENTRY」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="91cb14ad58a1b4462086f211195165ae13adba9c" translate="yes" xml:space="preserve">
          <source>Exactly like C:</source>
          <target state="translated">まさにCのようだ。</target>
        </trans-unit>
        <trans-unit id="7525b0bc0e061494669779471f34623f62998790" translate="yes" xml:space="preserve">
          <source>Exactly what the</source>
          <target state="translated">まさに</target>
        </trans-unit>
        <trans-unit id="738aaf2dccc78981e8b455dca2a194bd2ca3770c" translate="yes" xml:space="preserve">
          <source>Exactly what were the failed locale settings varies. In the above the settings were that the LC_ALL was &quot;En_US&quot; and the LANG had no value. This error means that Perl detected that you and/or your operating system supplier and/or system administrator have set up the so-called locale system but Perl could not use those settings. This was not dead serious, fortunately: there is a &quot;default locale&quot; called &quot;C&quot; that Perl can and will use, and the script will be run. Before you really fix the problem, however, you will get the same error message each time you run Perl. How to really fix the problem can be found in &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; section &lt;b&gt;LOCALE PROBLEMS&lt;/b&gt;.</source>
          <target state="translated">失敗したロケール設定は正確に異なります。上記の設定では、LC_ALLは &quot;En_US&quot;で、LANGには値がありませんでした。このエラーは、Perlがあなたやオペレーティングシステムサプライヤー、システム管理者がいわゆるロケールシステムをセットアップしたことを検出したが、Perlがそれらの設定を使用できなかったことを意味します。幸いなことに、これはそれほど深刻ではありませんでした。Perlが使用でき、使用する「C」と呼ばれる「デフォルトロケール」があり、スクリプトが実行されます。ただし、実際に問題を修正する前に、Perlを実行するたびに同じエラーメッセージが表示されます。問題を本当に修正する方法は&lt;a href=&quot;perllocale&quot;&gt;perllocaleの&lt;/a&gt;セクション&lt;b&gt;LOCALE PROBLEMSにあり&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d8b6b2bbc7b58a995a5244483a44038c0c9b80cc" translate="yes" xml:space="preserve">
          <source>Examine signals that are blocked and pending. This uses &lt;code&gt;POSIX::SigSet&lt;/code&gt; objects for the &lt;code&gt;sigset&lt;/code&gt; argument. Consult your system's &lt;code&gt;sigpending&lt;/code&gt; manpage for details.</source>
          <target state="translated">ブロックされ保留中のシグナルを調べます。これは、使用しています &lt;code&gt;POSIX::SigSet&lt;/code&gt; ためにオブジェクト &lt;code&gt;sigset&lt;/code&gt; 引数。詳細については、システムの &lt;code&gt;sigpending&lt;/code&gt; マンページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9cc359cbd82e941e0ce6d56fc00bde6962483e78" translate="yes" xml:space="preserve">
          <source>Examines an op, which is expected to identify a subroutine at runtime, and attempts to determine at compile time which subroutine it identifies. This is normally used during Perl compilation to determine whether a prototype can be applied to a function call.</source>
          <target state="translated">実行時にサブルーチンを識別すると予想される op を検査し、コンパイル時にどのサブルーチンを識別するかを判断しようとします。これは通常、関数呼び出しにプロトタイプを適用できるかどうかを判断するためにPerlのコンパイル時に使用されます。</target>
        </trans-unit>
        <trans-unit id="2816ec163840831fe4101935d11468555274d9b0" translate="yes" xml:space="preserve">
          <source>Examines an op, which is expected to identify a subroutine at runtime, and attempts to determine at compile time which subroutine it identifies. This is normally used during Perl compilation to determine whether a prototype can be applied to a function call. &lt;code&gt;cvop&lt;/code&gt; is the op being considered, normally an &lt;code&gt;rv2cv&lt;/code&gt; op. A pointer to the identified subroutine is returned, if it could be determined statically, and a null pointer is returned if it was not possible to determine statically.</source>
          <target state="translated">実行時にサブルーチンを識別することが期待されるopを調べ、コンパイル時にどのサブルーチンを識別するかを決定しようとします。これは通常、Perlのコンパイル中に、プロトタイプを関数呼び出しに適用できるかどうかを判断するために使用されます。 &lt;code&gt;cvop&lt;/code&gt; は検討中の操作であり、通常は &lt;code&gt;rv2cv&lt;/code&gt; 操作です。静的に判別できた場合は、識別されたサブルーチンへのポインターが返され、静的に判別できなかった場合は、ヌルポインターが返されます。</target>
        </trans-unit>
        <trans-unit id="ce88b50818f0436a7682c61cd164aaafa21bdd4b" translate="yes" xml:space="preserve">
          <source>Examines the value of EXPR, expecting it to be a reference, and returns a string giving information about the reference and the type of referent. If EXPR is not specified, &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">EXPRの値を調べて、それが参照であることを期待し、参照と参照対象のタイプに関する情報を提供する文字列を返します。EXPRが指定されていない場合、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="21009b11f09e3868b5cd364062bd16a01cd87baf" translate="yes" xml:space="preserve">
          <source>Examining internal data structures with the &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; 関数を使用した内部データ構造の調査</target>
        </trans-unit>
        <trans-unit id="1f9b5ae7207832dd1764b8c81e77154d27039133" translate="yes" xml:space="preserve">
          <source>Examining internal data structures with the &lt;code&gt;dump&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;dump&lt;/code&gt; 関数を使用した内部データ構造の調査</target>
        </trans-unit>
        <trans-unit id="3e9d648412ff129c07a7aa241744818aaa63c13b" translate="yes" xml:space="preserve">
          <source>Examining internal data structures with the dump functions</source>
          <target state="translated">ダンプ機能を使った内部データ構造の検証</target>
        </trans-unit>
        <trans-unit id="f25587ebeed31098679dd0a945296052447509f8" translate="yes" xml:space="preserve">
          <source>Examining the tree</source>
          <target state="translated">木を調べる</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="3ee687a4836f2979219916954f4addd8522f2875" translate="yes" xml:space="preserve">
          <source>Example - a Hexadecimal Handle</source>
          <target state="translated">例-16進数ハンドル</target>
        </trans-unit>
        <trans-unit id="6dcd3f46d09547b62bf07ba9b2943c95d53ddae3" translate="yes" xml:space="preserve">
          <source>Example 1</source>
          <target state="translated">例1</target>
        </trans-unit>
        <trans-unit id="d64751054e2d27b855282a556af039128d434ede" translate="yes" xml:space="preserve">
          <source>Example 1: A simple filter.</source>
          <target state="translated">例1:シンプルなフィルターです。</target>
        </trans-unit>
        <trans-unit id="1c56ea49918b9baed94cf4bc0ee9f324efc8841a" translate="yes" xml:space="preserve">
          <source>Example 2</source>
          <target state="translated">例2</target>
        </trans-unit>
        <trans-unit id="c9ff53c2379b7cde740f23e7a5efd8af7e83e70f" translate="yes" xml:space="preserve">
          <source>Example 2: Using the context</source>
          <target state="translated">例2:コンテキストの使用</target>
        </trans-unit>
        <trans-unit id="fbf4dab701189a344fa5ab06d7b87c11a74e3da0" translate="yes" xml:space="preserve">
          <source>Example 3</source>
          <target state="translated">例3</target>
        </trans-unit>
        <trans-unit id="93fa8f292e6f2e8759c24edf270a2f53c96a1766" translate="yes" xml:space="preserve">
          <source>Example 3: Using the context within the filter</source>
          <target state="translated">例3:フィルタ内でのコンテキストの使用</target>
        </trans-unit>
        <trans-unit id="39e8f452734bc5ce3b169811da6ab1984a676dbf" translate="yes" xml:space="preserve">
          <source>Example 4: Using filter_del</source>
          <target state="translated">例 4:filter_del の使用</target>
        </trans-unit>
        <trans-unit id="82dd29f8b1cca5a0b9d8a8b5b47aff607b15559f" translate="yes" xml:space="preserve">
          <source>Example Distroprefs Files</source>
          <target state="translated">Distroprefs ファイルの例</target>
        </trans-unit>
        <trans-unit id="1a2aefe8979aba9b8da50d2227d60de10fe393b6" translate="yes" xml:space="preserve">
          <source>Example corrected to show map of maps instead of list of maps (though descriptive text said 'map' even in v1.3)</source>
          <target state="translated">マップのリストではなくマップのマップを表示するように例を修正 (v1.3でも説明文には「マップ」と書かれていましたが)</target>
        </trans-unit>
        <trans-unit id="a1479866f8111c0730b394a4d0e54b9686736ec4" translate="yes" xml:space="preserve">
          <source>Example hints</source>
          <target state="translated">例題のヒント</target>
        </trans-unit>
        <trans-unit id="8c67a372e04bf6d9b9e0054bc94bbe354f79d761" translate="yes" xml:space="preserve">
          <source>Example implementation might be:</source>
          <target state="translated">実装例としては、以下のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="65cdc590a56f144422e8ab9d8551b4654f6b8393" translate="yes" xml:space="preserve">
          <source>Example of use of &lt;code&gt;%m&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;%m&lt;/code&gt; の使用例：</target>
        </trans-unit>
        <trans-unit id="1e6115c04f6e10d5d5d6b87e30e1b6023acf08e4" translate="yes" xml:space="preserve">
          <source>Example of use of &lt;code&gt;%m&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;%m&lt;/code&gt; の使用例：</target>
        </trans-unit>
        <trans-unit id="ec471d84b36457f0d9d75c03377c9e3cd5f3de93" translate="yes" xml:space="preserve">
          <source>Example of use:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="ea87c9b65b6478fdd7882c8529d632b267f39539" translate="yes" xml:space="preserve">
          <source>Example similar to MAN1PODS.</source>
          <target state="translated">MAN1PODSと似たような例</target>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="6f46925524d1c01021e97594cd0f9813ff23d01d" translate="yes" xml:space="preserve">
          <source>Example wrapper function, using a custom stacktrace:</source>
          <target state="translated">カスタムスタックトレースを使用したラッパー関数の例。</target>
        </trans-unit>
        <trans-unit id="917f746ede8d074c95df4b99d59d955a898465de" translate="yes" xml:space="preserve">
          <source>Example, convert all JSON objects into the integer 5:</source>
          <target state="translated">例:すべてのJSONオブジェクトを整数5に変換します。</target>
        </trans-unit>
        <trans-unit id="38a0b26277d048bcac5dd947ecabce4cb52276c3" translate="yes" xml:space="preserve">
          <source>Example, decode JSON objects of the form &lt;code&gt;{ &quot;__widget__&quot; =&amp;gt; &amp;lt;id&amp;gt; }&lt;/code&gt; into the corresponding &lt;code&gt;$WIDGET{&amp;lt;id&amp;gt;}&lt;/code&gt; object:</source>
          <target state="translated">例： &lt;code&gt;{ &quot;__widget__&quot; =&amp;gt; &amp;lt;id&amp;gt; }&lt;/code&gt; の形式のJSONオブジェクトを対応する &lt;code&gt;$WIDGET{&amp;lt;id&amp;gt;}&lt;/code&gt; オブジェクトにデコードします。</target>
        </trans-unit>
        <trans-unit id="7278e6c050b8c04dedcbda9af1550657a42fb4fe" translate="yes" xml:space="preserve">
          <source>Example, decode UTF-32LE-encoded JSON:</source>
          <target state="translated">例:UTF-32LEでエンコードされたJSONをデコードします。</target>
        </trans-unit>
        <trans-unit id="bfdc025886948570c6fbbadab1e6327c7c909d59" translate="yes" xml:space="preserve">
          <source>Example, encode a Perl scalar as JSON value without enabled &lt;code&gt;allow_nonref&lt;/code&gt;, resulting in an error:</source>
          <target state="translated">&lt;code&gt;allow_nonref&lt;/code&gt; 、allow_nonrefを有効にせずにPerlスカラーをJSON値としてエンコードすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="8ed5be0c52bbf20defd0c9e845ecf60ed4c32045" translate="yes" xml:space="preserve">
          <source>Example, output UTF-16BE-encoded JSON:</source>
          <target state="translated">例:UTF-16BEでエンコードされたJSONを出力します。</target>
        </trans-unit>
        <trans-unit id="70eed4e935f1e0e0b91352974e074471d01f2095" translate="yes" xml:space="preserve">
          <source>Example, space_before and indent disabled, space_after enabled:</source>
          <target state="translated">例:space_beforeとindentは無効、space_afterは有効。</target>
        </trans-unit>
        <trans-unit id="b78e4fad7b27510e9dff599bdcd34d99787fce83" translate="yes" xml:space="preserve">
          <source>Example, space_before enabled, space_after and indent disabled:</source>
          <target state="translated">例:space_beforeが有効、space_afterが無効、インデントが無効。</target>
        </trans-unit>
        <trans-unit id="21504e5520a63c06708e793261e7989f6e598670" translate="yes" xml:space="preserve">
          <source>Example.pm</source>
          <target state="translated">Example.pm</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="2f9aab2ce8a7f69580f3ffba5062983af60212df" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;0.16&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;0.16&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9d1b656e9d62a39986b515e970fb598d7c6a0a28" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d065a1b59988aa6c329900c3cada65931aeef53b" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;Module-Build&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;Module-Build&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="723a51aade7b3dfa260aa71d4fea09d109817345" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;Module::Build version 0.16&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;Module::Build version 0.16&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fcb81d7d81b9c7defbedc3997e69a4b739f84df6" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;module&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="118e06607524b497bf1e00dd9542fcda25763c44" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;perl&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;perl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cad6ecdc1416c4a99a21cafbb2b565e4a7ce52ac" translate="yes" xml:space="preserve">
          <source>Example: Altering Concise Renderings</source>
          <target state="translated">例.簡潔なレンダリングの変更</target>
        </trans-unit>
        <trans-unit id="e9234fbd94650af302f3c53c866ca9eab6d98b89" translate="yes" xml:space="preserve">
          <source>Example: At the command prompt Type &quot;nmake nwinstall&quot;. This will install NetWare Perl on the NetWare Server. Similarly, if you type &quot;nmake install&quot;, this will cause the binaries to be installed on the local machine. (Typically under the c:\perl folder)</source>
          <target state="translated">例。コマンドプロンプトで「nmake nwinstall」と入力します。これにより、NetWare Perl が NetWare サーバにインストールされます。同様に、&quot;nmake install &quot;と入力すると、ローカルマシンにバイナリがインストールされます。(通常は c:perl フォルダの下にあります)</target>
        </trans-unit>
        <trans-unit id="24e5d3a101404316459c21180a1f55d046da675c" translate="yes" xml:space="preserve">
          <source>Example: Encode::ROT13</source>
          <target state="translated">例 Encode::ROT13</target>
        </trans-unit>
        <trans-unit id="d0830c89a9652382868513b8862db0a3cc84254e" translate="yes" xml:space="preserve">
          <source>Example: Parse some JSON arrays/objects in a given string and return them.</source>
          <target state="translated">例。与えられた文字列の中のいくつかのJSON配列/オブジェクトを解析し、それらを返します。</target>
        </trans-unit>
        <trans-unit id="0721ccbd9aaee85c90df176a3976ea110912494f" translate="yes" xml:space="preserve">
          <source>Example: The following code</source>
          <target state="translated">例:以下のようなコードがあります。以下のコード</target>
        </trans-unit>
        <trans-unit id="57772da1cf0c7d363a78ec1c7ba403554cdf5105" translate="yes" xml:space="preserve">
          <source>Example: You can execute the following on the command prompt.</source>
          <target state="translated">例です。コマンドプロンプトで以下を実行します。</target>
        </trans-unit>
        <trans-unit id="f2749017763b820ec8a5aab014519f7d7e9831d5" translate="yes" xml:space="preserve">
          <source>Example: base64 transcoder</source>
          <target state="translated">例:base64トランスコーダ</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="1d7dd2b19077ebadaa57d2f6ba2c64d87037ae05" translate="yes" xml:space="preserve">
          <source>Examples (assuming an ASCII platform)</source>
          <target state="translated">例(ASCIIプラットフォームを想定</target>
        </trans-unit>
        <trans-unit id="47370b8eea1efa5172e76cf237bd26e7f736ebd6" translate="yes" xml:space="preserve">
          <source>Examples for converting:</source>
          <target state="translated">変換の例。</target>
        </trans-unit>
        <trans-unit id="386c7abd2323831ffe2716ae79487fcd14a21d5e" translate="yes" xml:space="preserve">
          <source>Examples for rounding:</source>
          <target state="translated">丸めの例。</target>
        </trans-unit>
        <trans-unit id="49d15bdd087c216bc7ae6d4ea03d99c8cec52e40" translate="yes" xml:space="preserve">
          <source>Examples in documentation should be illustrative of the concept they're explaining. Sometimes, the best way to show how a language feature works is with a small program the reader can run without modification. More often, examples will consist of a snippet of code containing only the &quot;important&quot; bits. The definition of &quot;important&quot; varies from snippet to snippet. Sometimes it's important to declare &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; , initialize all variables and fully catch every error condition. More often than not, though, those things obscure the lesson the example was intended to teach.</source>
          <target state="translated">ドキュメントの例は、彼らが説明している概念を説明するものでなければなりません。言語機能がどのように機能するかを示す最良の方法は、読者が修正なしで実行できる小さなプログラムを使用することです。多くの場合、例は「重要な」ビットのみを含むコードのスニペットで構成されます。 「重要」の定義はスニペットによって異なります。時にはそれが宣言することが重要です &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; 、すべての変数を初期化し、完全にすべてのエラー条件をキャッチ。しかし、多くの場合、これらのことは、例が教えることを意図したレッスンを不明瞭にします。</target>
        </trans-unit>
        <trans-unit id="d11119ca6453ac0e54148249adca86e00f07f1e8" translate="yes" xml:space="preserve">
          <source>Examples in documentation should be illustrative of the concept they're explaining. Sometimes, the best way to show how a language feature works is with a small program the reader can run without modification. More often, examples will consist of a snippet of code containing only the &quot;important&quot; bits. The definition of &quot;important&quot; varies from snippet to snippet. Sometimes it's important to declare &lt;code&gt;use strict&lt;/code&gt; and &lt;code&gt;use warnings&lt;/code&gt;, initialize all variables and fully catch every error condition. More often than not, though, those things obscure the lesson the example was intended to teach.</source>
          <target state="translated">ドキュメントの例は、説明している概念を説明するものでなければなりません。場合によっては、言語機能がどのように機能するかを示す最良の方法は、リーダーが変更なしで実行できる小さなプログラムを使用することです。多くの場合、例は「重要な」ビットのみを含むコードのスニペットで構成されます。「重要」の定義はスニペットごとに異なります。 &lt;code&gt;use strict&lt;/code&gt; を宣言して &lt;code&gt;use warnings&lt;/code&gt; を使用し、すべての変数を初期化し、すべてのエラー状態を完全にキャッチすることが重要な場合があります。しかし、多くの場合、これらのことは、例が教えることを意図したレッスンをあいまいにします。</target>
        </trans-unit>
        <trans-unit id="a591376177b86768f6394133fb691d5a829d17d6" translate="yes" xml:space="preserve">
          <source>Examples of invalid syntax:</source>
          <target state="translated">無効な構文の例。</target>
        </trans-unit>
        <trans-unit id="0d4621bd6639238b0ab788dd2cc321e39c7fc192" translate="yes" xml:space="preserve">
          <source>Examples of legal names are '$foo' for a scalar, '@foo' for an array, '%foo' for a hash, '&amp;amp;foo' or 'foo' for a subroutine and '*foo' for a glob (i.e. all symbol table entries associated with &quot;foo&quot;, including scalar, array, hash, sub and filehandle).</source>
          <target state="translated">正当な名前の例は、スカラーの場合は「$ foo」、配列の場合は「@foo」、ハッシュの場合は「％foo」、サブルーチンの場合は「＆foo」または「foo」、グロブの場合は「* foo」です。 &quot;foo&quot;に関連付けられたシンボルテーブルエントリ（スカラー、配列、ハッシュ、サブ、ファイルハンドルを含む）。</target>
        </trans-unit>
        <trans-unit id="d7c5ae33ac348a4d6e7614da1b0d7da380e1b269" translate="yes" xml:space="preserve">
          <source>Examples of use</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="1a5dea85313337dc5454525e91430329e3b9eb0f" translate="yes" xml:space="preserve">
          <source>Examples of valid syntax (even though the attributes are unknown):</source>
          <target state="translated">有効な構文の例(属性が不明でも)。</target>
        </trans-unit>
        <trans-unit id="45b39bd436c5d9cd8f4ca9dd2c7eb59c66eb58b2" translate="yes" xml:space="preserve">
          <source>Examples section another documentation provided by John Heidemann &amp;lt;johnh@ISI.EDU&amp;gt;</source>
          <target state="translated">例セクションJohn Heidemann &amp;lt;johnh@ISI.EDU&amp;gt;が提供する別のドキュメント</target>
        </trans-unit>
        <trans-unit id="628a5608e1a43ca4bfb86500d847d49e2edd6c80" translate="yes" xml:space="preserve">
          <source>Examples where callbacks are necessary include</source>
          <target state="translated">コールバックが必要な例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="f98a53c84b8d27c6aba2afa49d1eb4984f22de98" translate="yes" xml:space="preserve">
          <source>Examples: &quot;[_1]&quot; and &quot;[,_1]&quot;, which are synonymous; and &quot;&lt;code&gt;[,ID-(,_4,-,_2,)]&lt;/code&gt; &quot;, which compiles as &lt;code&gt;&lt;a href=&quot;../functions/join&quot;&gt;join&lt;/a&gt; &quot;&quot;, &quot;ID-(&quot;, $_[4], &quot;-&quot;, $_[2], &quot;)&quot;&lt;/code&gt; .</source>
          <target state="translated">例：「[_1]」と「[、_1]」は同義語です。および &lt;code&gt;[,ID-(,_4,-,_2,)]&lt;/code&gt; &quot;、これは &lt;code&gt;&lt;a href=&quot;../functions/join&quot;&gt;join&lt;/a&gt; &quot;&quot;, &quot;ID-(&quot;, $_[4], &quot;-&quot;, $_[2], &quot;)&quot;&lt;/code&gt; としてコンパイル&quot; &quot;、&quot; ID-（ &quot;、$ _ [4]、&quot;-&quot;、$ _ [2]、&quot;） &quot;。</target>
        </trans-unit>
        <trans-unit id="0be9a5482bf17e8c5fe99a02aec7a8cea84f74f4" translate="yes" xml:space="preserve">
          <source>Examples: &quot;[_1]&quot; and &quot;[,_1]&quot;, which are synonymous; and &quot;&lt;code&gt;[,ID-(,_4,-,_2,)]&lt;/code&gt;&quot;, which compiles as &lt;code&gt;join &quot;&quot;, &quot;ID-(&quot;, $_[4], &quot;-&quot;, $_[2], &quot;)&quot;&lt;/code&gt;.</source>
          <target state="translated">例：同義語である「[_1]」と「[、_1]」。および &quot; &lt;code&gt;[,ID-(,_4,-,_2,)]&lt;/code&gt; &quot;は、 &lt;code&gt;join &quot;&quot;, &quot;ID-(&quot;, $_[4], &quot;-&quot;, $_[2], &quot;)&quot;&lt;/code&gt; ID-（&quot;、$ _ [4]、 &quot;-&quot;、$ _ [2]、 &quot;）&quot;としてコンパイルされます。。</target>
        </trans-unit>
        <trans-unit id="fc4e742ff692e5060c86af7b99c37b81006ce99b" translate="yes" xml:space="preserve">
          <source>Except &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; , &lt;b&gt;Unicode::Normalize&lt;/b&gt; is required (see also &lt;b&gt;CAVEAT&lt;/b&gt;).</source>
          <target state="translated">&lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; 除き、&lt;b&gt;Unicode :: Normalize&lt;/b&gt;が必要です（&lt;b&gt;CAVEAT&lt;/b&gt;も&lt;b&gt;参照&lt;/b&gt;）。</target>
        </trans-unit>
        <trans-unit id="750b06c4e20cd4bb5392f789eb453ec81bdf0ee9" translate="yes" xml:space="preserve">
          <source>Except &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt;, &lt;b&gt;Unicode::Normalize&lt;/b&gt; is required (see also &lt;b&gt;CAVEAT&lt;/b&gt;).</source>
          <target state="translated">&lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt; 除いて、&lt;b&gt;Unicode :: Normalize&lt;/b&gt;が必要です（&lt;b&gt;CAVEAT&lt;/b&gt;も&lt;b&gt;参照&lt;/b&gt;）。</target>
        </trans-unit>
        <trans-unit id="d9a44f67c097a553bfa410868c60dd16cabf490e" translate="yes" xml:space="preserve">
          <source>Except being faster.</source>
          <target state="translated">速くなったことを除けば。</target>
        </trans-unit>
        <trans-unit id="6f7f15d16385003ab5d07150052df64664c66bff" translate="yes" xml:space="preserve">
          <source>Except for &lt;a href=&quot;#The-Basics&quot;&gt;&quot;The Basics&quot;&lt;/a&gt; section, this page assumes you are familiar with regular expression basics, like what is a &quot;pattern&quot;, what does it look like, and how it is basically used. For a reference on how they are used, plus various examples of the same, see discussions of &lt;code&gt;m//&lt;/code&gt;, &lt;code&gt;s///&lt;/code&gt;, &lt;code&gt;qr//&lt;/code&gt; and &lt;code&gt;&quot;??&quot;&lt;/code&gt; in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt;.</source>
          <target state="translated">このページでは、&lt;a href=&quot;#The-Basics&quot;&gt;「基本」&lt;/a&gt;セクションを除いて、「パターン」とは何か、どのように見えるか、基本的にどのように使用されるかなど、正規表現の基本に精通していることを前提としています。それらの使用方法のリファレンス、およびそのさまざまな例については、 &lt;code&gt;m//&lt;/code&gt; 、 &lt;code&gt;s///&lt;/code&gt; 、 &lt;code&gt;qr//&lt;/code&gt; 、および &lt;code&gt;&quot;??&quot;&lt;/code&gt; 説明を参照してください。中に&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;はperlopで「正規表現の引用ライク演算子」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26b1235f5e6dc422681dc01e8714586f7ad38364" translate="yes" xml:space="preserve">
          <source>Except for &lt;code&gt;FILTER_ONLY code =&amp;gt; &lt;a href=&quot;../functions/sub&quot;&gt;sub&lt;/a&gt; {...}&lt;/code&gt; , each of the component filters is called repeatedly, once for each component found in the source code.</source>
          <target state="translated">&lt;code&gt;FILTER_ONLY code =&amp;gt; &lt;a href=&quot;../functions/sub&quot;&gt;sub&lt;/a&gt; {...}&lt;/code&gt; 除いて、各コンポーネントフィルターは、ソースコードで見つかった各コンポーネントに対して1回繰り返し呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4893191369665d6053617936c829c46737cadf4b" translate="yes" xml:space="preserve">
          <source>Except for &lt;code&gt;FILTER_ONLY code =&amp;gt; sub {...}&lt;/code&gt;, each of the component filters is called repeatedly, once for each component found in the source code.</source>
          <target state="translated">&lt;code&gt;FILTER_ONLY code =&amp;gt; sub {...}&lt;/code&gt; 除いて、各コンポーネントフィルタは、ソースコードで見つかったコンポーネントごとに1回ずつ、繰り返し呼び出されます。</target>
        </trans-unit>
        <trans-unit id="21a10e7180b4b8a76ea58d012850b5f1c4bcb634" translate="yes" xml:space="preserve">
          <source>Except importing the functions, 'autoload' is same as 'load'.</source>
          <target state="translated">関数をインポートする以外は、オートロードはロードと同じです。</target>
        </trans-unit>
        <trans-unit id="18f4bd6df6292a6b95734ee2a00973430550afe7" translate="yes" xml:space="preserve">
          <source>Except specifing the package and quoting module name, 'autoload_remote' is same as 'load_remote'.</source>
          <target state="translated">autoload_remote はパッケージの指定とモジュール名の引用以外は load_remote と同じです。</target>
        </trans-unit>
        <trans-unit id="16e04cb1bb937a46789e35dba24fd14a5feb954d" translate="yes" xml:space="preserve">
          <source>Except specifing the package and quoting module name, 'load_remote' is same as 'load'.</source>
          <target state="translated">パッケージを指定してモジュール名を引用する以外は、load_remoteはloadと同じです。</target>
        </trans-unit>
        <trans-unit id="f55cf6c06e02d10efcfcfb37efbd0c881f531275" translate="yes" xml:space="preserve">
          <source>Excepting those listed above, we're currently unable to guarantee that B::Deparse will produce a pragma at the correct point in the program. (Specifically, pragmas at the beginning of a block often appear right before the start of the block instead.) Since the effects of pragmas are often lexically scoped, this can mean that the pragma holds sway over a different portion of the program than in the input file.</source>
          <target state="translated">上記のものを除いて、現在のところ、B::Deparseがプログラムの正しい位置でプラグマを生成することを保証することはできません(具体的には、ブロックの先頭にあるプラグマは、ブロックの開始直前に現れることが多いです)。(具体的には、ブロックの先頭にあるプラ グマは、ブロックの先頭の直前に現れることが多い)。プラグマの効果はしばしば語彙的にスコープされているので、これはプラグマが入力ファイルとは異なるプログラムの部分に影響を及ぼすことを意味します。</target>
        </trans-unit>
        <trans-unit id="20788aa11834509830be30396b88f6404f087e8c" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
          <target state="translated">例外処理</target>
        </trans-unit>
        <trans-unit id="826f288dbfc038dead10724f69465c1bfe17a68f" translate="yes" xml:space="preserve">
          <source>Exception Handling (simple) Macros</source>
          <target state="translated">例外処理 (簡単な)マクロ</target>
        </trans-unit>
        <trans-unit id="c63dbeff42b8bdcfbb58c593ff1bf6b1c3d8a3ca" translate="yes" xml:space="preserve">
          <source>Exception class used by</source>
          <target state="translated">が使用する例外クラス</target>
        </trans-unit>
        <trans-unit id="e4a349dc2d7ddd050d57ee72af0506a4a2b31cc9" translate="yes" xml:space="preserve">
          <source>Exception event</source>
          <target state="translated">例外イベント</target>
        </trans-unit>
        <trans-unit id="fa345b763368fc4f9065828d77e9729e19d258cc" translate="yes" xml:space="preserve">
          <source>Exception handing</source>
          <target state="translated">例外的な手渡し</target>
        </trans-unit>
        <trans-unit id="3ab46cd93f74baf3da5f557d5f2997aae41ff3b1" translate="yes" xml:space="preserve">
          <source>Exceptions from &lt;code&gt;max_size&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt; or other errors will result in a pseudo-HTTP status code of 599 and a reason of &quot;Internal Exception&quot;. The content field in the response will contain the text of the exception.</source>
          <target state="translated">&lt;code&gt;max_size&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; 、またはその他のエラーからの例外は、599の疑似HTTPステータスコードと「内部例外」の理由になります。応答のコンテンツフィールドには、例外のテキストが含まれます。</target>
        </trans-unit>
        <trans-unit id="d504b2a99c5e1f8d7e7350318f686e5cbee7a60e" translate="yes" xml:space="preserve">
          <source>Exceptions from autodying functions.</source>
          <target state="translated">オートボディ機能の例外。</target>
        </trans-unit>
        <trans-unit id="1242bf8dd433a51fa4c19b0e3a208b834c9fc265" translate="yes" xml:space="preserve">
          <source>Exceptions from autodying system().</source>
          <target state="translated">autodying system()からの例外。</target>
        </trans-unit>
        <trans-unit id="48741c44a476b90391e45eac22eeaa9b0d399fee" translate="yes" xml:space="preserve">
          <source>Exceptions produced by the &lt;code&gt;autodie&lt;/code&gt; pragma are members of the &lt;a href=&quot;autodie/exception&quot;&gt;autodie::exception&lt;/a&gt; class. The preferred way to work with these exceptions under Perl 5.10 is as follows:</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; プラグマによって生成される例外は、&lt;a href=&quot;autodie/exception&quot;&gt;autodie :: exception&lt;/a&gt;クラスのメンバーです。Perl 5.10でこれらの例外を処理する好ましい方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="53d59c8491a17793e5a74a9328b1458c0ce10dc9" translate="yes" xml:space="preserve">
          <source>Exceptions produced by the &lt;code&gt;autodie&lt;/code&gt; pragma are members of the &lt;a href=&quot;autodie::exception&quot;&gt;autodie::exception&lt;/a&gt; class. The preferred way to work with these exceptions under Perl 5.10 is as follows:</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; プラグマによって生成される例外は、&lt;a href=&quot;autodie::exception&quot;&gt;autodie :: exception&lt;/a&gt;クラスのメンバーです。Perl 5.10でこれらの例外を処理するための推奨される方法は、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5986414d0fc4bb9c4ee5d8198af90a5eb243568c" translate="yes" xml:space="preserve">
          <source>Exceptions, error return codes, exit statuses, and errno settings. Typically used for function or module documentation; program documentation uses DIAGNOSTICS instead. The general rule of thumb is that errors printed to &lt;code&gt;STDOUT&lt;/code&gt; or &lt;code&gt;STDERR&lt;/code&gt; and intended for the end user are documented in DIAGNOSTICS while errors passed internal to the calling program and intended for other programmers are documented in ERRORS. When documenting a function that sets errno, a full list of the possible errno values should be given here.</source>
          <target state="translated">例外、エラー戻りコード、終了ステータス、およびerrno設定。通常、関数またはモジュールのドキュメントに使用されます。プログラムのドキュメントでは、代わりにDIAGNOSTICSを使用しています。一般的な経験則では、 &lt;code&gt;STDOUT&lt;/code&gt; または &lt;code&gt;STDERR&lt;/code&gt; に出力され、エンドユーザー向けのエラーはDIAGNOSTICSに文書化され、呼び出しプログラムの内部に渡され、他のプログラマ向けのエラーはERRORSに文書化されます。 errnoを設定する関数を文書化する場合、考えられるerrno値の完全なリストをここに示す必要があります。</target>
        </trans-unit>
        <trans-unit id="3e8ef9fa750a38a235f6f5db2c10f6d27bcf66b2" translate="yes" xml:space="preserve">
          <source>Excessive pride, the sort of thing for which Zeus zaps you. Also the quality that makes you write (and maintain) programs that other people won&amp;rsquo;t want to say bad things about. Hence, the third great virtue of a programmer. See also &lt;b&gt;laziness&lt;/b&gt; and &lt;b&gt;impatience&lt;/b&gt;.</source>
          <target state="translated">ゼウスがあなたを驚かせるような、過度のプライド。また、他の人が悪いことを言いたくないプログラムを作成（および維持）できる品質。したがって、プログラマーの3番目の大きな利点です。&lt;b&gt;怠惰&lt;/b&gt;と&lt;b&gt;焦り&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a5d912f09e4af174aa651a0745dc7cd68fcf8fd2" translate="yes" xml:space="preserve">
          <source>Excessively long &amp;lt;&amp;gt; operator</source>
          <target state="translated">過度に長い&amp;lt;&amp;gt;演算子</target>
        </trans-unit>
        <trans-unit id="1ff53c1a7c6e7525075531f3d6b8357745fac262" translate="yes" xml:space="preserve">
          <source>Exchanging signed integers between different platforms works only when all platforms store them in the same format. Most platforms store signed integers in two's-complement notation, so usually this is not an issue.</source>
          <target state="translated">異なるプラットフォーム間での符号付き整数の交換は、すべてのプラットフォームが同じ形式で保存している場合にのみ機能します。ほとんどのプラットフォームでは、符号付き整数を 2 の補数記法で格納しているので、通常はこれは問題になりません。</target>
        </trans-unit>
        <trans-unit id="6d598c708e755dc53aa35c070da1bc37864ef85e" translate="yes" xml:space="preserve">
          <source>Exclude the given routine and its descendants from the profile.</source>
          <target state="translated">指定されたルーチンとその子孫をプロファイルから除外します。</target>
        </trans-unit>
        <trans-unit id="712815e07d58e914b686a30fadb75309ce36dd4f" translate="yes" xml:space="preserve">
          <source>Excommunicated</source>
          <target state="translated">Excommunicated</target>
        </trans-unit>
        <trans-unit id="ce52f407fe57f7ce5f94a6ed1047c07eafabc89f" translate="yes" xml:space="preserve">
          <source>Executables for Perl utilities</source>
          <target state="translated">Perl ユーティリティの実行ファイル</target>
        </trans-unit>
        <trans-unit id="6a8a72f8f7694a401a32218abd4406ae1d283fcc" translate="yes" xml:space="preserve">
          <source>Executables for gzip, zip, and VMStar:</source>
          <target state="translated">gzip、zip、VMStar の実行ファイル。</target>
        </trans-unit>
        <trans-unit id="58de6b665842567beab85d292c3b5870de1c65ae" translate="yes" xml:space="preserve">
          <source>Execute a regexp. The arguments are</source>
          <target state="translated">正規表現を実行します。引数は</target>
        </trans-unit>
        <trans-unit id="bac595ee7bf88de92060cce1abba1b3d844e6519" translate="yes" xml:space="preserve">
          <source>Execute command as a Perl statement. A trailing semicolon will be supplied. If the Perl statement would otherwise be confused for a Perl debugger, use a leading semicolon, too.</source>
          <target state="translated">Perl 文としてコマンドを実行します。最後にセミコロンを付けます。Perl 文が Perl デバッガと混同される場合は、先頭のセミコロンも使用してください。</target>
        </trans-unit>
        <trans-unit id="ec1ff77553768eb52e9d8af54796c7b0bfee25e2" translate="yes" xml:space="preserve">
          <source>Execute related options</source>
          <target state="translated">関連オプションの実行</target>
        </trans-unit>
        <trans-unit id="e45a9d6764cd8a4584e5070807ab16a657d631e8" translate="yes" xml:space="preserve">
          <source>Execute the following commands:</source>
          <target state="translated">以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="1c456233f2824914a52bfceba7c1ea3f220aec8f" translate="yes" xml:space="preserve">
          <source>Execute the given C code and print its results. &lt;b&gt;WARNING&lt;/b&gt;: Perl makes heavy use of macros, and</source>
          <target state="translated">指定されたCコードを実行し、その結果を出力します。&lt;b&gt;警告&lt;/b&gt;：Perlはマクロを多用しています。</target>
        </trans-unit>
        <trans-unit id="9ac88dd7c0b19c435fb63cfe3bac19cbfc350e4d" translate="yes" xml:space="preserve">
          <source>Execute the provided install script from shell or via its icon.</source>
          <target state="translated">シェルまたはそのアイコンからインストールスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="061e9bcfa95dc9f2f39332fda78eedc474b39569" translate="yes" xml:space="preserve">
          <source>Execute this statement for a hint about where to find CORE:</source>
          <target state="translated">CORE がどこにあるかのヒントを得るために、この文を実行します。</target>
        </trans-unit>
        <trans-unit id="a79b5094cc2990d328a2ac30ea62e13817dec0a0" translate="yes" xml:space="preserve">
          <source>Executes a &lt;code&gt;GET&lt;/code&gt; request for the URL and saves the response body to the file name provided. The URL must have unsafe characters escaped and international domain names encoded. If the file already exists, the request will include an &lt;code&gt;If-Modified-Since&lt;/code&gt; header with the modification timestamp of the file. You may specify a different &lt;code&gt;If-Modified-Since&lt;/code&gt; header yourself in the &lt;code&gt;$options-&amp;gt;{headers}&lt;/code&gt; hash.</source>
          <target state="translated">URLの &lt;code&gt;GET&lt;/code&gt; 要求を実行し、指定されたファイル名に応答本文を保存します。URLには、安全でない文字をエスケープし、国際ドメイン名をエンコードする必要があります。ファイルがすでに存在する場合、リクエストには、ファイルの変更タイムスタンプを含む &lt;code&gt;If-Modified-Since&lt;/code&gt; ヘッダーが含まれます。 &lt;code&gt;$options-&amp;gt;{headers}&lt;/code&gt; ハッシュで、別の &lt;code&gt;If-Modified-Since&lt;/code&gt; ヘッダーを自分で指定できます。</target>
        </trans-unit>
        <trans-unit id="a2aff22989bc6aeac5d6cd7864aab55a4f7fed20" translate="yes" xml:space="preserve">
          <source>Executes an HTTP request of the given method type ('GET', 'HEAD', 'POST', 'PUT', etc.) on the given URL. The URL must have unsafe characters escaped and international domain names encoded.</source>
          <target state="translated">指定された URL 上で、指定されたメソッドタイプ ('GET','HEAD','POST','PUT',など)の HTTP リクエストを実行します。URL は安全でない文字をエスケープし、国際的なドメイン名をエンコードしなければなりません。</target>
        </trans-unit>
        <trans-unit id="574f52d839fd11f8f8f4c4d0ddacf0528556159a" translate="yes" xml:space="preserve">
          <source>Executing a postponed regular expression 50 times without consuming any input string will result in a fatal error. The maximum depth is compiled into perl, so changing it requires a custom build.</source>
          <target state="translated">後回しにされた正規表現を入力文字列を一切消費せずに50回実行すると致命的なエラーになります。最大深度はperlにコンパイルされているので、変更するにはカスタムビルドが必要です。</target>
        </trans-unit>
        <trans-unit id="92a60b45df076860f644e5d058a8c446b0d5be54" translate="yes" xml:space="preserve">
          <source>Executing a postponed regular expression too many times without consuming any input string will also result in a fatal error. The depth at which that happens is compiled into perl, so it can be changed with a custom build.</source>
          <target state="translated">延期された正規表現を入力文字列を一切消費せずに何度も実行すると、致命的なエラーにもなります。このようなことが起こる深さはperlにコンパイルされているので、カスタムビルドで変更することができます。</target>
        </trans-unit>
        <trans-unit id="6d525b71568c2d982f46feb96b332bedcdc6e4a0" translate="yes" xml:space="preserve">
          <source>Execution</source>
          <target state="translated">Execution</target>
        </trans-unit>
        <trans-unit id="13709dfa0128b531e84d0b60f2a2419c6bf04dbf" translate="yes" xml:space="preserve">
          <source>Execution of END blocks</source>
          <target state="translated">ENDブロックの実行</target>
        </trans-unit>
        <trans-unit id="675e718a6b33ba2b7929f770db612d9a80f9b87e" translate="yes" xml:space="preserve">
          <source>Execution of a regex generally involves two phases, the first being finding the start point in the string where we should match from, and the second being running the regop interpreter.</source>
          <target state="translated">一般的に正規表現の実行には2つのフェーズがあり、1つ目は文字列の中からマッチすべき開始点を見つけること、2つ目はregopインタプリタを実行することです。</target>
        </trans-unit>
        <trans-unit id="119f08e3cf8da3d7fe34ab1131df979eb14179b1" translate="yes" xml:space="preserve">
          <source>Execution of any &lt;code&gt;CHECK&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;code&gt;CHECK&lt;/code&gt; ブロックの実行。</target>
        </trans-unit>
        <trans-unit id="0603019ab35ef11320acde0ed06d6533404cfee9" translate="yes" xml:space="preserve">
          <source>Execution of any &lt;code&gt;END&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;code&gt;END&lt;/code&gt; ブロックの実行。</target>
        </trans-unit>
        <trans-unit id="f4f82800233d6c7223698c2e187aa3ccc7d2dc01" translate="yes" xml:space="preserve">
          <source>Execution of the interpreter itself used to be recursive, but thanks to the efforts of Dave Mitchell in the 5.9.x development track, that has changed: now an internal stack is maintained on the heap and the routine is fully iterative. This can make it tricky as the code is quite conservative about what state it stores, with the result that two consecutive lines in the code can actually be running in totally different contexts due to the simulated recursion.</source>
          <target state="translated">インタプリタの実行自体は以前は再帰的でしたが、5.9.x 開発トラックの Dave Mitchell 氏の努力により、これが変更されました。これは、コードがどのような状態を保存するかについて非常に保守的であるためにトリッキーになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4e9f10726faddb4d512801b20f95c6f56436cea8" translate="yes" xml:space="preserve">
          <source>Exercises the C function of the same name in scalar context. Returns the same SV that the C function returns.</source>
          <target state="translated">同名のC関数をスカラコンテキストで実行します.C関数が返すものと同じSVを返します。</target>
        </trans-unit>
        <trans-unit id="4dc06ef2194671cce285095b6f928f8f2f608822" translate="yes" xml:space="preserve">
          <source>Exercises the C function of the same name. Returns nothing.</source>
          <target state="translated">同名のC関数を実行します。戻り値は何もありません。</target>
        </trans-unit>
        <trans-unit id="248b9fcc2702356b63c40509208ebb73f559ce07" translate="yes" xml:space="preserve">
          <source>Exhaustive information on the topic of references can be found in &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;, &lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt;, &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; and &lt;a href=&quot;perldsc&quot;&gt;perldsc&lt;/a&gt;.</source>
          <target state="translated">参照のトピックに関する&lt;a href=&quot;perlreftut&quot;&gt;包括的な&lt;/a&gt;情報は、perlreftut、&lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt;、&lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;、および&lt;a href=&quot;perldsc&quot;&gt;perldscにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="76b5089ada110a0136449f09bf11c2275168e2c5" translate="yes" xml:space="preserve">
          <source>Existing 32 bit apps are properly known as LP32, i.e. Longs and Pointers are 32 bit. 64-bit apps are more properly known as LP64. The discriminating feature of a LP64 bit app is its ability to utilise a 64-bit address space. It is perfectly possible to have a LP32 bit app that supports both 64-bit integers (long long) and largefiles (&amp;gt; 2GB), and this is the default for perl-5.6.0.</source>
          <target state="translated">既存の32ビットアプリはLP32として正しく知られています。つまり、Longとポインターは32ビットです。64ビットアプリは、LP64としてより適切に知られています。LP64ビットアプリの特徴的な機能は、64ビットアドレス空間を利用できることです。64ビット整数（long long）とlargefiles（&amp;gt; 2GB）の両方をサポートするLP32ビットアプリを作成することは完全に可能であり、これはperl-5.6.0のデフォルトです。</target>
        </trans-unit>
        <trans-unit id="3ce132dcaab82a474dd839ab951c3eef1631d645" translate="yes" xml:space="preserve">
          <source>Existing syntax and semantics should only be marked for destruction in very limited circumstances. If they are believed to be very rarely used, stand in the way of actual improvement to the Perl language or perl interpreter, and if affected code can be easily updated to continue working, they may be considered for removal. When in doubt, caution dictates that we will favor backward compatibility. When a feature is deprecated, a statement of reasoning describing the decision process will be posted, and a link to it will be provided in the relevant perldelta documents.</source>
          <target state="translated">既存の構文やセマンティクスは、非常に限られた状況でのみ削除の対象となるべきです。滅多に使用されないと考えられ、Perl 言語や perl インタプリタの実際の改善の妨げになり、影響を受けたコードを簡単に更新して動作を継続できる場合は、削除を検討することがあります。疑わしい場合は、注意が必要なので、下位互換性を優先します。ある機能が非推奨とされた場合、その決定プロセスを説明する理由が掲示され、関連する perldelta ドキュメントの中にその理由へのリンクが提供されます。</target>
        </trans-unit>
        <trans-unit id="6d9d19533b0fbf724f69a3d7a99a413b54990645" translate="yes" xml:space="preserve">
          <source>Exit Code</source>
          <target state="translated">終了コード</target>
        </trans-unit>
        <trans-unit id="45d746a8ea75007a4818f4a9a13d84ba46bc8da2" translate="yes" xml:space="preserve">
          <source>Exiting eval via %s</source>
          <target state="translated">s で eval を終了する</target>
        </trans-unit>
        <trans-unit id="cc760fc51ed4d60f1f58db324e3b3ab5637ff7f6" translate="yes" xml:space="preserve">
          <source>Exiting format via %s</source>
          <target state="translated">s でフォーマットを終了します。</target>
        </trans-unit>
        <trans-unit id="9d6b6283c09f2fd4cd4d37232a60ec674d66805a" translate="yes" xml:space="preserve">
          <source>Exiting pseudo-block via %s</source>
          <target state="translated">疑似ブロックを %s で終了します。</target>
        </trans-unit>
        <trans-unit id="08a99dd93f7907c63d9f314a53349298ea450b60" translate="yes" xml:space="preserve">
          <source>Exiting subroutine via %s</source>
          <target state="translated">サブルーチンを %s で終了します。</target>
        </trans-unit>
        <trans-unit id="eedf12ff192cfbfe7957d4a6c26105640adbff0b" translate="yes" xml:space="preserve">
          <source>Exiting substitution via %s</source>
          <target state="translated">置換を %s で終了します。</target>
        </trans-unit>
        <trans-unit id="d71626cd31b069ac3980d7ed6a6abb80f71225a3" translate="yes" xml:space="preserve">
          <source>Exits</source>
          <target state="translated">Exits</target>
        </trans-unit>
        <trans-unit id="bc031d65eaef8ccada69a0c994a430a53a41354d" translate="yes" xml:space="preserve">
          <source>Exotic Templates</source>
          <target state="translated">エキゾチックなテンプレート</target>
        </trans-unit>
        <trans-unit id="2c6c990ee216fb59d7ad72ee8d28ebcceeb5a21e" translate="yes" xml:space="preserve">
          <source>Expand and unexpand tabs like unix expand(1) and unexpand(1)</source>
          <target state="translated">unix の expand(1)や unexpand(1)のようなタブの展開と非展開。</target>
        </trans-unit>
        <trans-unit id="2b116400884e9dbc3a5bf5fe94b7d6faa8b0dd38" translate="yes" xml:space="preserve">
          <source>Expand conventional syntax constructions into equivalent ones that expose their internal operation.</source>
          <target state="translated">従来の構文構文を、その内部操作を公開する等価な構文に拡張します。</target>
        </trans-unit>
        <trans-unit id="a24145087edc62ad61c2e0e0ed9777002b6b1d94" translate="yes" xml:space="preserve">
          <source>Expand double-quoted strings into the corresponding combinations of concatenation, uc, ucfirst, lc, lcfirst, quotemeta, and join. For instance, print</source>
          <target state="translated">二重引用符で囲まれた文字列を、連結、uc、ucfirst、lc、lcfirst、quotemeta、joinの対応する組み合わせに展開します。例えば、次のように印刷します。</target>
        </trans-unit>
        <trans-unit id="a3cec9741cec0dca8594001a6d2ea842476ee2ac" translate="yes" xml:space="preserve">
          <source>Expand patterns that start with '~' to user name home directories.</source>
          <target state="translated">'~'で始まるパターンをユーザー名のホームディレクトリに展開します。</target>
        </trans-unit>
        <trans-unit id="6b6e1cee8dd20e696133457bd5f5a86ddd470c1e" translate="yes" xml:space="preserve">
          <source>Expanding on these:</source>
          <target state="translated">これらを拡大していく。</target>
        </trans-unit>
        <trans-unit id="8fc5537d5aa41a3bee835484d8a71db89d04af82" translate="yes" xml:space="preserve">
          <source>Expands MM[KS]/Make macros in a text string, using the contents of identically named elements of &lt;code&gt;%$self&lt;/code&gt; , and returns the result as a file specification in Unix syntax.</source>
          <target state="translated">&lt;code&gt;%$self&lt;/code&gt; の同じ名前の要素の内容を使用して、テキスト文字列のMM [KS] / Makeマクロを展開し、Unix構文でファイル指定として結果を返します。</target>
        </trans-unit>
        <trans-unit id="bb3eba70260caae42d2a56d669b04a37e9fa0e09" translate="yes" xml:space="preserve">
          <source>Expands MM[KS]/Make macros in a text string, using the contents of identically named elements of &lt;code&gt;%$self&lt;/code&gt;, and returns the result as a file specification in Unix syntax.</source>
          <target state="translated">&lt;code&gt;%$self&lt;/code&gt; の同じ名前の要素の内容を使用して、MM [KS] / Makeマクロをテキスト文字列で展開し、結果をUnix構文のファイル仕様として返します。</target>
        </trans-unit>
        <trans-unit id="4f5783f703e4997395da1ed4bfbdfa29354401cb" translate="yes" xml:space="preserve">
          <source>Expands a message, intended for the user, to include an indication of the current location in the code, if the message does not already appear to be complete.</source>
          <target state="translated">ユーザー向けのメッセージを展開し、メッセージがまだ完了していないようであれば、コード内の現在地の表示を含むようにします。</target>
        </trans-unit>
        <trans-unit id="acbbc593d8399af8ae3b5c591c83e4cbee77c103" translate="yes" xml:space="preserve">
          <source>Expands the character buffer in the SV so that it has room for the indicated number of bytes (remember to reserve space for an extra trailing &lt;code&gt;NUL&lt;/code&gt; character). Calls &lt;code&gt;sv_grow&lt;/code&gt; to perform the expansion if necessary. Returns a pointer to the character buffer. SV must be of type &amp;gt;= &lt;code&gt;SVt_PV&lt;/code&gt;. One alternative is to call &lt;code&gt;sv_grow&lt;/code&gt; if you are not sure of the type of SV.</source>
          <target state="translated">SVの文字バッファーを拡張して、指定されたバイト数のスペースを確保します（追加の末尾の &lt;code&gt;NUL&lt;/code&gt; 文字用にスペースを予約することを忘れないでください）。必要に応じて、 &lt;code&gt;sv_grow&lt;/code&gt; を呼び出して拡張を実行します。文字バッファへのポインタを返します。SVはタイプ&amp;gt; = &lt;code&gt;SVt_PV&lt;/code&gt; である必要があります。SVのタイプがわからない場合は、 &lt;code&gt;sv_grow&lt;/code&gt; を呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="adde8be1848474c5303345a29bcef52bb4a7e17d" translate="yes" xml:space="preserve">
          <source>Expands the character buffer in the SV so that it has room for the indicated number of bytes (remember to reserve space for an extra trailing &lt;code&gt;NUL&lt;/code&gt; character). Calls &lt;code&gt;sv_grow&lt;/code&gt; to perform the expansion if necessary. Returns a pointer to the character buffer. SV must be of type &amp;gt;= SVt_PV. One alternative is to call &lt;code&gt;sv_grow&lt;/code&gt; if you are not sure of the type of SV.</source>
          <target state="translated">SVの文字バッファーを拡張して、指定されたバイト数のスペースを確保します（追加の末尾の &lt;code&gt;NUL&lt;/code&gt; 文字のためにスペースを予約することを忘れないでください）。必要に応じて、 &lt;code&gt;sv_grow&lt;/code&gt; を呼び出して拡張を実行します。文字バッファへのポインタを返します。SVは、SVt_PVタイプ以上でなければなりません。1つの方法は、SVのタイプがわからない場合に &lt;code&gt;sv_grow&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="e07f45c58aaef41c3cc48eff8856e3deb378b3c7" translate="yes" xml:space="preserve">
          <source>Expands the character buffer in the SV. If necessary, uses &lt;code&gt;sv_unref&lt;/code&gt; and upgrades the SV to &lt;code&gt;SVt_PV&lt;/code&gt; . Returns a pointer to the character buffer. Use the &lt;code&gt;SvGROW&lt;/code&gt; wrapper instead.</source>
          <target state="translated">SVの文字バッファーを拡張します。必要に応じて、 &lt;code&gt;sv_unref&lt;/code&gt; を使用して、SVを &lt;code&gt;SVt_PV&lt;/code&gt; にアップグレードします。文字バッファへのポインタを返します。代わりに &lt;code&gt;SvGROW&lt;/code&gt; ラッパーを使用してください。</target>
        </trans-unit>
        <trans-unit id="bdfec9c6e27c21de38d0ad42245bca4c56a0db95" translate="yes" xml:space="preserve">
          <source>Expands the character buffer in the SV. If necessary, uses &lt;code&gt;sv_unref&lt;/code&gt; and upgrades the SV to &lt;code&gt;SVt_PV&lt;/code&gt;. Returns a pointer to the character buffer. Use the &lt;code&gt;SvGROW&lt;/code&gt; wrapper instead.</source>
          <target state="translated">SVの文字バッファを拡張します。必要に応じて、 &lt;code&gt;sv_unref&lt;/code&gt; を使用し、SVを &lt;code&gt;SVt_PV&lt;/code&gt; にアップグレードします。文字バッファへのポインタを返します。代わりに &lt;code&gt;SvGROW&lt;/code&gt; ラッパーを使用してください。</target>
        </trans-unit>
        <trans-unit id="53b55719b11400ab3946110ac0b6da5f10e36cb7" translate="yes" xml:space="preserve">
          <source>Expands_On_NFC</source>
          <target state="translated">Expands_On_NFC</target>
        </trans-unit>
        <trans-unit id="6067c08bd93995f39d3f36483e3f4ef3039e3007" translate="yes" xml:space="preserve">
          <source>Expands_On_NFD</source>
          <target state="translated">Expands_On_NFD</target>
        </trans-unit>
        <trans-unit id="5df7d510e0afb51aa87d43b92bcf880d99423548" translate="yes" xml:space="preserve">
          <source>Expands_On_NFKC</source>
          <target state="translated">Expands_On_NFKC</target>
        </trans-unit>
        <trans-unit id="cc2ac673ebfc4ca4115add5e1d8491f6e16313e9" translate="yes" xml:space="preserve">
          <source>Expands_On_NFKD</source>
          <target state="translated">Expands_On_NFKD</target>
        </trans-unit>
        <trans-unit id="60ad5e3c5be34af787f1a5a9f57ebcde8c336258" translate="yes" xml:space="preserve">
          <source>Expected '=item</source>
          <target state="translated">期待される '=item</target>
        </trans-unit>
        <trans-unit id="4cf0de321b4edfe39f598e66ba458f32fd64da99" translate="yes" xml:space="preserve">
          <source>Expected '=item *'</source>
          <target state="translated">期待される '=item *'</target>
        </trans-unit>
        <trans-unit id="777c7b4c3fe35b49213cdaeefc6c1268989f5da0" translate="yes" xml:space="preserve">
          <source>Expecting a single value is not quite the same as knowing that there will be one. If someone modified</source>
          <target state="translated">1つの値を期待することは、1つの値があることを知っていることとは全く同じではありません。誰かが</target>
        </trans-unit>
        <trans-unit id="64185a4c949e7204414cf46ff03bc3f1606cbf77" translate="yes" xml:space="preserve">
          <source>Expecting close bracket in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現に閉じ括弧が必要です。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="65287be72b978ac388e5b50adfdc25bcb62b5804" translate="yes" xml:space="preserve">
          <source>Expecting interpolated extended charclass in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現で補間された拡張charclassを期待しています。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="bf72e88f58634dcb4936f677084e0a00acfdd002" translate="yes" xml:space="preserve">
          <source>Expects an anonymous hash of name =&amp;gt; value pairs. Same rules apply for names as in &lt;code&gt;new&lt;/code&gt; . If no argument is supplied, will return the &quot;seen&quot; list of name =&amp;gt; value pairs, in a list context. Otherwise, returns the object itself.</source>
          <target state="translated">名前=&amp;gt;値のペアの匿名ハッシュが必要です。 &lt;code&gt;new&lt;/code&gt; と同じ規則が名前に適用されます。引数が指定されていない場合、名前=&amp;gt;値のペアの &quot;seen&quot;リストをリストコンテキストで返します。それ以外の場合は、オブジェクト自体を返します。</target>
        </trans-unit>
        <trans-unit id="4d7959ebdbd1eb9b37094b35dddbe6785e49b443" translate="yes" xml:space="preserve">
          <source>Expects an anonymous hash of name =&amp;gt; value pairs. Same rules apply for names as in &lt;code&gt;new&lt;/code&gt;. If no argument is supplied, will return the &quot;seen&quot; list of name =&amp;gt; value pairs, in a list context. Otherwise, returns the object itself.</source>
          <target state="translated">名前=&amp;gt;値のペアの匿名ハッシュが必要です。 &lt;code&gt;new&lt;/code&gt; と同じルールが名前に適用されます。引数が指定されていない場合、リストコンテキストで名前=&amp;gt;値のペアの「表示された」リストを返します。それ以外の場合は、オブジェクト自体を返します。</target>
        </trans-unit>
        <trans-unit id="cc66b53e07eb3ff24ec3024a45e5d4fb318685f8" translate="yes" xml:space="preserve">
          <source>Experimental %s on scalar is now forbidden</source>
          <target state="translated">スカラの実験 %s は現在禁止されています</target>
        </trans-unit>
        <trans-unit id="04b17e379ead5f797c5aa37eb9dc9a107df81896" translate="yes" xml:space="preserve">
          <source>Experimental Details on given and when</source>
          <target state="translated">与えられたときの実験の細部</target>
        </trans-unit>
        <trans-unit id="f6f74c01abe74837a83d80a82742b5139aa6cefe" translate="yes" xml:space="preserve">
          <source>Experimental Support for Sun Studio Compilers for Linux OS</source>
          <target state="translated">Linux OS用Sun Studioコンパイラの実験的サポート</target>
        </trans-unit>
        <trans-unit id="7e049d90ac73798a976f271b4843fd29805765d5" translate="yes" xml:space="preserve">
          <source>Experimental aliasing via reference not enabled</source>
          <target state="translated">リファレンスによる実験的エイリアシングが有効になっていない</target>
        </trans-unit>
        <trans-unit id="9e15651ca047ada36f7efb9c2f8e000cd639262b" translate="yes" xml:space="preserve">
          <source>Experimental features made easy</source>
          <target state="translated">簡単にできる実験機能</target>
        </trans-unit>
        <trans-unit id="ed2ea169fad6a1c0c998398ba26a1941a42d9f93" translate="yes" xml:space="preserve">
          <source>Experimental features must be experimental in two stable releases before being marked non-experimental. Experimental features will only have their experimental status revoked when they no longer have any design-changing bugs open against them and when they have remained unchanged in behavior for the entire length of a development cycle. In other words, a feature present in v5.20.0 may be marked no longer experimental in v5.22.0 if and only if its behavior is unchanged throughout all of v5.21.</source>
          <target state="translated">実験的な機能は、非実験的とマークされる前の安定版リリースの2回で実験的な状態になっていなければなりません。実験的な機能が実験的な状態で取り消されるのは、デザインを変更するバグが存在しなくなり、開発サイクルの全期間にわたって挙動に変化がない場合に限られます。言い換えれば、v5.20.0 に存在していた機能が、v5.21 の開発期間中ずっと挙動が変わっていない場合に限り、v5.22.0 では実験的ではないとマークされます。</target>
        </trans-unit>
        <trans-unit id="812cee3839ce593c6e7f8fb81f34a218fc92295b" translate="yes" xml:space="preserve">
          <source>Experimental implementation to deal with optional_features from META.yml. Still needs coordination with installer software and currently works only for META.yml declaring &lt;code&gt;dynamic_config=0&lt;/code&gt; . Use with caution.</source>
          <target state="translated">META.ymlのoptional_featuresを処理する実験的な実装。依然としてインストーラーソフトウェアとの調整が必要で、現在は &lt;code&gt;dynamic_config=0&lt;/code&gt; を宣言するMETA.ymlに対してのみ機能します。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="134ab6b7ca3f00324871d474fd88846598632c3d" translate="yes" xml:space="preserve">
          <source>Experimental subroutine signatures not enabled</source>
          <target state="translated">実験用サブルーチンのシグネチャが有効になっていない</target>
        </trans-unit>
        <trans-unit id="b1a2e6bb257f27dcbf131f0e4c5090288b803bfa" translate="yes" xml:space="preserve">
          <source>Experimental support for using Intel C++ Compiler has been added. Edit win32/Makefile and pick the correct CCTYPE for the Visual C that Intel C was installed into. Also uncomment __ICC to enable Intel C on Visual C support. To set up the build enviroment, from the Start Menu run IA-32 Visual Studio 20__ mode or Intel 64 Visual Studio 20__ mode as appropriate. Then run nmake as usually in that prompt box.</source>
          <target state="translated">Intel C++コンパイラの実験的なサポートが追加されました。win32/Makefile を編集して、Intel C がインストールされている Visual C の正しい CCTYPE を選択してください。また、Visual C サポート上で Intel C を有効にするには、__ICC のコメントを外してください。ビルド環境をセットアップするには、スタートメニューからIA-32 Visual Studio 20__モードまたはIntel 64 Visual Studio 20__モードを実行します。次に、プロンプト・ボックスで通常のように nmake を実行します。</target>
        </trans-unit>
        <trans-unit id="910b0326198fc0d6a945d746fbbbc76ed369e62f" translate="yes" xml:space="preserve">
          <source>Experimental support for using Intel C++ Compiler has been added. Edit win32/Makefile and pick the correct CCTYPE for the Visual C that Intel C was installed into. Also uncomment __ICC to enable Intel C on Visual C support. To set up the build environment, from the Start Menu run IA-32 Visual Studio 20__ mode or Intel 64 Visual Studio 20__ mode as appropriate. Then run nmake as usually in that prompt box.</source>
          <target state="translated">Intel C++コンパイラの実験的なサポートが追加されました。win32/Makefile を編集して、Intel C がインストールされている Visual C の正しい CCTYPE を選択してください。また、Visual C サポートでインテル C を有効にするには、__ICC のコメントを外してください。ビルド環境をセットアップするには、スタートメニューからIA-32 Visual Studio 20__モードまたはIntel 64 Visual Studio 20__モードを実行します。次に、プロンプト・ボックスで通常のように nmake を実行します。</target>
        </trans-unit>
        <trans-unit id="512d10cc80bbcc4b910ab34f44eacc0c8a8cab5b" translate="yes" xml:space="preserve">
          <source>Explain how to make a valid fh without going through open()(i.e. apply a layer). For example if the file is not opened through perl, but we want to get back a fh, like it was opened by Perl.</source>
          <target state="translated">open()を経由せずに(つまりレイヤーを適用せずに)有効な fh を作る方法を説明してください。例えば、ファイルが perl で開かれていないが、Perl で開かれたような fh を取得したい場合。</target>
        </trans-unit>
        <trans-unit id="c3c57a0034753db204133ffc1a0baecdf062f580" translate="yes" xml:space="preserve">
          <source>Explanation of the error, or the error itself (such as an exception). In perl exceptions may be blessed objects, so this field may contain a blessed object.</source>
          <target state="translated">エラーの説明、またはエラーそのもの(例外など)。perlでは例外は祝福されたオブジェクトになることがあるので、このフィールドには祝福されたオブジェクトが含まれているかもしれません。</target>
        </trans-unit>
        <trans-unit id="bd7eb7e15c45c52322c743748d0912cc8c1637a0" translate="yes" xml:space="preserve">
          <source>Explicit blessing to '' (assuming package main)</source>
          <target state="translated">'' への明示的な祝福 (main パッケージを想定)</target>
        </trans-unit>
        <trans-unit id="0ae3abeefc2986f2eb842d3cd9632c0a0316ad1f" translate="yes" xml:space="preserve">
          <source>Explicit context</source>
          <target state="translated">明示的なコンテキスト</target>
        </trans-unit>
        <trans-unit id="04ff6c95ad88a6e349a482b76bfc08416f18ea96" translate="yes" xml:space="preserve">
          <source>Explicitly forces no carriage control.</source>
          <target state="translated">キャリッジコントロールを明示的に強制しない。</target>
        </trans-unit>
        <trans-unit id="d2d335bbeeb032574984b5eec4fdf9e2563d5abb" translate="yes" xml:space="preserve">
          <source>Explicitly using the &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;SAVETMPS&lt;/code&gt; --&lt;code&gt;FREETMPS&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; pairing</source>
          <target state="translated">&lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;SAVETMPS&lt;/code&gt; - &lt;code&gt;FREETMPS&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; ペアリングを明示的に使用する</target>
        </trans-unit>
        <trans-unit id="6e87a66444e923290e00f1a8b43474c974953b7a" translate="yes" xml:space="preserve">
          <source>Explicitly using the &lt;code&gt;ENTER&lt;/code&gt;/&lt;code&gt;SAVETMPS&lt;/code&gt;--&lt;code&gt;FREETMPS&lt;/code&gt;/&lt;code&gt;LEAVE&lt;/code&gt; pairing</source>
          <target state="translated">&lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;SAVETMPS&lt;/code&gt; - &lt;code&gt;FREETMPS&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; ペアリングを明示的に使用する</target>
        </trans-unit>
        <trans-unit id="d165ee97f26b031b938fc12621899c47ca3e7175" translate="yes" xml:space="preserve">
          <source>Exponentiation</source>
          <target state="translated">Exponentiation</target>
        </trans-unit>
        <trans-unit id="f3e4fadb9e370a1e2c0c622c01fc8c77daf93a2c" translate="yes" xml:space="preserve">
          <source>Export</source>
          <target state="translated">Export</target>
        </trans-unit>
        <trans-unit id="b04b1d43c804b579fc2179b2b3b449ae1560ae80" translate="yes" xml:space="preserve">
          <source>Export tags defined</source>
          <target state="translated">定義されたタグのエクスポート</target>
        </trans-unit>
        <trans-unit id="a10fabb79509133b618928fd32456dad097bd96f" translate="yes" xml:space="preserve">
          <source>Exportable Functions</source>
          <target state="translated">エクスポート可能な機能</target>
        </trans-unit>
        <trans-unit id="087b5b3729015829a7b8d0086f8e5125870ab2b2" translate="yes" xml:space="preserve">
          <source>Exportable Methods</source>
          <target state="translated">エクスポート可能なメソッド</target>
        </trans-unit>
        <trans-unit id="3fb8ab7d4fdb770897f754d6218d2ea74b86ecf3" translate="yes" xml:space="preserve">
          <source>Exportable constants</source>
          <target state="translated">エクスポート可能な定数</target>
        </trans-unit>
        <trans-unit id="60fa04392e9fbe49aa17d919da35cd7332fea185" translate="yes" xml:space="preserve">
          <source>Exported utility variables</source>
          <target state="translated">エクスポートされたユーティリティ変数</target>
        </trans-unit>
        <trans-unit id="0cd84bdcb23e59371516a9290d82778263ec9c7c" translate="yes" xml:space="preserve">
          <source>Exporter</source>
          <target state="translated">Exporter</target>
        </trans-unit>
        <trans-unit id="e3272220a019edf889f502d8e939100dd7ba6db5" translate="yes" xml:space="preserve">
          <source>Exporter - Implements default import method for modules</source>
          <target state="translated">Exporter-モジュールのデフォルトのインポート方法をインプリメントする</target>
        </trans-unit>
        <trans-unit id="9677334ff1544480ffd2a9303280ab252a694823" translate="yes" xml:space="preserve">
          <source>Exporter guts</source>
          <target state="translated">輸出業者の根性</target>
        </trans-unit>
        <trans-unit id="733f73993629cd5a5a17865554f4f49f3a533105" translate="yes" xml:space="preserve">
          <source>Exporter has a special method, 'export_to_level' which is used in situations where you can't directly call Exporter's import method. The export_to_level method looks like:</source>
          <target state="translated">Exporterには「export_to_level」という特別なメソッドがあり、Exporterのインポートメソッドを直接呼び出すことができない場合に使用します。export_to_levelメソッドは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e3e659931fe986137a62058f2b4abcef03d65202" translate="yes" xml:space="preserve">
          <source>Exporter.pm</source>
          <target state="translated">Exporter.pm</target>
        </trans-unit>
        <trans-unit id="dc76f5ce6b0b38a5f000b46176cc35b9cb43b24a" translate="yes" xml:space="preserve">
          <source>Exporter::Heavy</source>
          <target state="translated">Exporter::Heavy</target>
        </trans-unit>
        <trans-unit id="1d1140249dd08a40f776c20b9ddd54b5796c4a08" translate="yes" xml:space="preserve">
          <source>Exporter::Heavy - Exporter guts</source>
          <target state="translated">Exporter::Heavy-エクスポーターガッツ</target>
        </trans-unit>
        <trans-unit id="5212c627287d01ea51f61b228d900e6e7aa1a003" translate="yes" xml:space="preserve">
          <source>Exporting Without Inheriting from Exporter</source>
          <target state="translated">輸出者から継承せずに輸出する</target>
        </trans-unit>
        <trans-unit id="b76a470ae357815e917068bbc5728a8478edaac1" translate="yes" xml:space="preserve">
          <source>Exporting Without Using Exporter's import Method</source>
          <target state="translated">エクスポータのインポート方法を使わずにエクスポートする</target>
        </trans-unit>
        <trans-unit id="1b7c31e16f36f853e2c6c57c0f5c8d014a8558d8" translate="yes" xml:space="preserve">
          <source>Exporting variables is not a good idea. They can change under the hood, provoking horrible effects at-a-distance that are too hard to track and to fix. Trust me: they are not worth it.</source>
          <target state="translated">変数をエクスポートするのは良い考えではありません。それらは、ボンネットの中で変化することがあり、追跡したり修正したりするのがあまりにも困難な、遠く離れた場所での恐ろしい効果を引き起こす可能性があります。私を信じてください:それらには価値はありません。</target>
        </trans-unit>
        <trans-unit id="071e64c7e24a9d0c7e9058c9548f279b0db62c55" translate="yes" xml:space="preserve">
          <source>Exporting your new function</source>
          <target state="translated">新しい関数のエクスポート</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="78a2a7642c638f47b6ed7502eab44ca9b2bee2ca" translate="yes" xml:space="preserve">
          <source>Exports all the test functions:</source>
          <target state="translated">すべてのテスト関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="0cf2ed8b53d5a014c877f2053b8b2d2b823e37e6" translate="yes" xml:space="preserve">
          <source>Exports in this section are not commonly needed. These all have the 'test2_' prefix to help ensure they stand out. You should look at the &lt;a href=&quot;#MAIN-API-EXPORTS&quot;&gt;&quot;MAIN API EXPORTS&quot;&lt;/a&gt; section before looking here. This section is one where &quot;Great power comes with great responsibility&quot;. It is possible to break things badly if you are not careful with these.</source>
          <target state="translated">このセクションのエクスポートは、通常は必要ありません。これらはすべて、目立つように「test2_」プレフィックスが付いています。ここを見る前に、&lt;a href=&quot;#MAIN-API-EXPORTS&quot;&gt;「メインAPIエクスポート」&lt;/a&gt;セクションを確認する必要があります。このセクションは、「大きな力には大きな責任が伴う」セクションです。これらに注意しないと、物事をひどく壊す可能性があります。</target>
        </trans-unit>
        <trans-unit id="1a78d15b2b917cc03293d31b108e05ce4d52026f" translate="yes" xml:space="preserve">
          <source>Exports pollute the namespace of the module user. If you must export try to use &lt;code&gt;@EXPORT_OK&lt;/code&gt; in preference to &lt;code&gt;@EXPORT&lt;/code&gt; and avoid short or common symbol names to reduce the risk of name clashes.</source>
          <target state="translated">エクスポートは、モジュールユーザーの名前空間を汚染します。あなたが使用してみてくださいをエクスポートする必要がある場合は &lt;code&gt;@EXPORT_OK&lt;/code&gt; に優先して &lt;code&gt;@EXPORT&lt;/code&gt; と短いまたは共通のシンボル名を避ける名前の衝突の危険性を低減します。</target>
        </trans-unit>
        <trans-unit id="19680f4d8bc35c089321258ed1726974e515bb01" translate="yes" xml:space="preserve">
          <source>Exports pollute the namespace of the module user. If you must export try to use @EXPORT_OK in preference to @EXPORT and avoid short or common names to reduce the risk of name clashes.</source>
          <target state="translated">エクスポートはモジュールユーザの名前空間を汚染します。どうしてもエクスポートしなければならない場合は、@EXPORT よりも @EXPORT_OK を使用し、名前の衝突のリスクを減らすために短い名前や一般的な名前は避けてください。</target>
        </trans-unit>
        <trans-unit id="991118c2b6b3c16c0bc4bf38a36f6ec2aa05622c" translate="yes" xml:space="preserve">
          <source>Expose the individual bytes of characters</source>
          <target state="translated">文字の個々のバイトを公開する</target>
        </trans-unit>
        <trans-unit id="b67fdeebc6a730537832b31cf1e590434ac7ad11" translate="yes" xml:space="preserve">
          <source>Exposes the POSIX function getcwd(3) or re-implements it if it's not available.</source>
          <target state="translated">POSIX 関数 getcwd(3)を公開するか、利用できない場合は再実装します。</target>
        </trans-unit>
        <trans-unit id="30e13c3f2f4b6a85ea0443e9079e6877bde86d9e" translate="yes" xml:space="preserve">
          <source>Expressing the command as a list</source>
          <target state="translated">コマンドをリストで表現する</target>
        </trans-unit>
        <trans-unit id="848bbebe9b69edd539cf121a71439bdfe81b397c" translate="yes" xml:space="preserve">
          <source>Expressions like this are useful in conditionals:</source>
          <target state="translated">このような表現は条件式で便利です。</target>
        </trans-unit>
        <trans-unit id="130f8cc58ed68e3a1fe427428482f60dc97e9301" translate="yes" xml:space="preserve">
          <source>Ext/Ension</source>
          <target state="translated">Ext/Ension</target>
        </trans-unit>
        <trans-unit id="ae4a822ac4b76bc07804416206c3daa608046771" translate="yes" xml:space="preserve">
          <source>ExtUtils</source>
          <target state="translated">ExtUtils</target>
        </trans-unit>
        <trans-unit id="8adb87135c238343780172ae48188681cf370acf" translate="yes" xml:space="preserve">
          <source>ExtUtils::CBuilder</source>
          <target state="translated">ExtUtils::CBuilder</target>
        </trans-unit>
        <trans-unit id="0dd29c2a17cfd9dc6e5beb4505e91940187682bf" translate="yes" xml:space="preserve">
          <source>ExtUtils::CBuilder - Compile and link C code for Perl modules</source>
          <target state="translated">ExtUtils::CBuilder-Perl モジュール用の C コードのコンパイルとリンク</target>
        </trans-unit>
        <trans-unit id="de9e9dbbe64dfc1f06076f5b598c40c5b97a4f07" translate="yes" xml:space="preserve">
          <source>ExtUtils::CBuilder is maintained as part of the Perl 5 core. Please submit any bug reports via the</source>
          <target state="translated">ExtUtils::CBuilder は Perl 5 コアの一部としてメンテナンスされています。バグレポートは</target>
        </trans-unit>
        <trans-unit id="6d9aae08362d79c65318eda6627f0ab746bbee95" translate="yes" xml:space="preserve">
          <source>ExtUtils::CBuilder::Platform::Windows</source>
          <target state="translated">ExtUtils::CBuilder::Platform::Windows</target>
        </trans-unit>
        <trans-unit id="ec8f2943e4d10ff3dad921becf4700a9c605fc5f" translate="yes" xml:space="preserve">
          <source>ExtUtils::CBuilder::Platform::Windows - Builder class for Windows platforms</source>
          <target state="translated">ExtUtils::CBuilder::Platform::Windows-Windows プラットフォーム用ビルダークラス</target>
        </trans-unit>
        <trans-unit id="0f5f8c4e317cb9e14dbc99f8c4725e7101d063e0" translate="yes" xml:space="preserve">
          <source>ExtUtils::Command</source>
          <target state="translated">ExtUtils::Command</target>
        </trans-unit>
        <trans-unit id="13685feaf020782447b9941746d4b335bddf0883" translate="yes" xml:space="preserve">
          <source>ExtUtils::Command - utilities to replace common UNIX commands in Makefiles etc.</source>
          <target state="translated">ExtUtils::Command-Makefile などで一般的な UNIX コマンドを置き換えるユーティリティ。</target>
        </trans-unit>
        <trans-unit id="1e0e65de42d77495693723755508f19700283291" translate="yes" xml:space="preserve">
          <source>ExtUtils::Command::MM</source>
          <target state="translated">ExtUtils::Command::MM</target>
        </trans-unit>
        <trans-unit id="57baedd89a659e1e0ecff540830bcf69ebde4c0c" translate="yes" xml:space="preserve">
          <source>ExtUtils::Command::MM - Commands for the MM's to use in Makefiles</source>
          <target state="translated">ExtUtils::Command::MM-Makefile で使用する MM のコマンド</target>
        </trans-unit>
        <trans-unit id="e8520d9305bb1b6b30673860c2a9fc7e0bb43af7" translate="yes" xml:space="preserve">
          <source>ExtUtils::Command::MM encapsulates code which would otherwise have to be done with large &quot;one&quot; liners.</source>
          <target state="translated">ExtUtils::Command::MM は、大きな &quot;one&quot; ライナーを使用しなければならないコードをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="01aca525aa3b0d3504eab62f629ea7ae316a1df9" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant</source>
          <target state="translated">ExtUtils::Constant</target>
        </trans-unit>
        <trans-unit id="eb53ab587c5df3bac6d41d873980d0a80f5c155a" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant - generate XS code to import C header constants</source>
          <target state="translated">ExtUtils::Constant-C ヘッダ定数をインポートするための XS コードを生成する</target>
        </trans-unit>
        <trans-unit id="2bfb67938397e6eb325051359a5d323e79a220d8" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant facilitates generating C and XS wrapper code to allow perl modules to AUTOLOAD constants defined in C library header files. It is principally used by the &lt;code&gt;h2xs&lt;/code&gt; utility, on which this code is based. It doesn't contain the routines to scan header files to extract these constants.</source>
          <target state="translated">ExtUtils :: Constantは、CおよびXSラッパーコードの生成を容易にし、PerlモジュールがCライブラリヘッダーファイルで定義された定数をAUTOLOADできるようにします。これは主に、このコードのベースとなっている &lt;code&gt;h2xs&lt;/code&gt; ユーティリティによって使用されます。これらの定数を抽出するためにヘッダーファイルをスキャンするルーチンは含まれていません。</target>
        </trans-unit>
        <trans-unit id="66069119c4474ce5db2c00c2fc5c7ebe74e509d3" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Base</source>
          <target state="translated">ExtUtils::Constant::Base</target>
        </trans-unit>
        <trans-unit id="a5a92bf27fd8a70fb8d0d04675721591091d31a8" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Base - base class for ExtUtils::Constant objects</source>
          <target state="translated">ExtUtils::Constant::Base-ExtUtils::Constant オブジェクトの基底クラス</target>
        </trans-unit>
        <trans-unit id="37d28c0e096d851a074af795694f3e4ed605e4fe" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Base exports no subroutines. The following methods are available</source>
          <target state="translated">ExtUtils::Constant::Base はサブルーチンをエクスポートしません。以下のメソッドが利用可能です。</target>
        </trans-unit>
        <trans-unit id="cc85f41228edcbb25fda849b24e857773037224e" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Base provides a base implementation of methods to generate C code to give fast constant value lookup by named string. Currently it's mostly used ExtUtils::Constant::XS, which generates the lookup code for the constant() subroutine found in many XS modules.</source>
          <target state="translated">ExtUtils::Constant::Base は、名前付き文字列による高速な定数値検索を行うための C コードを生成するメソッドの基本的な実装を提供します。現在は ExtUtils::Constant::XS が主に使用されており、多くの XS モジュールで見られる constant()サブルーチンのルックアップコードを生成しています。</target>
        </trans-unit>
        <trans-unit id="01123cf69ee0503631a353722ce7083ea5078bc4" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Utils</source>
          <target state="translated">ExtUtils::Constant::Utils</target>
        </trans-unit>
        <trans-unit id="eb7021c674be1dbbac0f5d2f00a2ee805361885c" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Utils - helper functions for ExtUtils::Constant</source>
          <target state="translated">ExtUtils::Constant::Utils-ExtUtils::Constant のヘルパー関数</target>
        </trans-unit>
        <trans-unit id="88fa01ca987de7b887a3c79f4e501e05801215f9" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::Utils packages up utility subroutines used by ExtUtils::Constant, ExtUtils::Constant::Base and derived classes. All its functions are explicitly exportable.</source>
          <target state="translated">ExtUtils::Constant::Utils は、ExtUtils::Constant、ExtUtils::Constant::Base および派生クラスで使用されるユーティリティーサブルーチンをパッケージ化したものです。すべての関数は明示的にエクスポート可能です。</target>
        </trans-unit>
        <trans-unit id="691e427f212f20f1a4e97a292f83b191a9330664" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::XS</source>
          <target state="translated">ExtUtils::Constant::XS</target>
        </trans-unit>
        <trans-unit id="7b304383401bf8b504f1c4575e883635046c55a8" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::XS - generate C code for XS modules' constants.</source>
          <target state="translated">ExtUtils::Constant::XS-XS モジュールの定数用の C コードを生成します。</target>
        </trans-unit>
        <trans-unit id="a134fe12059f0bb9cd89ef6f92c5ae2e9810c57e" translate="yes" xml:space="preserve">
          <source>ExtUtils::Constant::XS overrides ExtUtils::Constant::Base to generate C code for XS modules' constants.</source>
          <target state="translated">ExtUtils::Constant::XS は、XS モジュールの定数用の C コードを生成するために ExtUtils::Constant::Base をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="5fb8ee5bc96080dc35b8c113dc4ab7e19f1f7f22" translate="yes" xml:space="preserve">
          <source>ExtUtils::Embed</source>
          <target state="translated">ExtUtils::Embed</target>
        </trans-unit>
        <trans-unit id="939f083947624f21f9b736c75a4f6438e18f6655" translate="yes" xml:space="preserve">
          <source>ExtUtils::Embed - Utilities for embedding Perl in C/C++ applications</source>
          <target state="translated">ExtUtils::Embed-C/C++アプリケーションに Perl を埋め込むためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="66d1280ba3865302835b81bea028e8fe495e808d" translate="yes" xml:space="preserve">
          <source>ExtUtils::Install</source>
          <target state="translated">ExtUtils::Install</target>
        </trans-unit>
        <trans-unit id="e1917ee01b8bd661c56eb9ac792b975c3df2f5a1" translate="yes" xml:space="preserve">
          <source>ExtUtils::Install - install files from here to there</source>
          <target state="translated">ExtUtils::Install-ファイルをあちこちにインストールする</target>
        </trans-unit>
        <trans-unit id="b703bea959a592e6e8e04477edfce4ad8bd309c6" translate="yes" xml:space="preserve">
          <source>ExtUtils::Installed</source>
          <target state="translated">ExtUtils::Installed</target>
        </trans-unit>
        <trans-unit id="3984de1657750a05991b5ea96245f59313691aaf" translate="yes" xml:space="preserve">
          <source>ExtUtils::Installed - Inventory management of installed modules</source>
          <target state="translated">ExtUtils::Installed-インストールされたモジュールのインベントリ管理</target>
        </trans-unit>
        <trans-unit id="b02212efafd95acf708fbde6c1ea9a18a4ebc3b3" translate="yes" xml:space="preserve">
          <source>ExtUtils::Installed provides a standard way to find out what core and module files have been installed. It uses the information stored in .packlist files created during installation to provide this information. In addition it provides facilities to classify the installed files and to extract directory information from the .packlist files.</source>
          <target state="translated">ExtUtils::Installed は、どのコアファイルやモジュールファイルがインストールされているかを調べるための標準的な方法を提供します。インストール中に作成された .packlist ファイルに保存されている情報を使用して、この情報を提供します。さらに、インストールされたファイルを分類したり、.packlist ファイルからディレクトリ情報を抽出したりする機能も提供します。</target>
        </trans-unit>
        <trans-unit id="42c25bbd2df5e46fa299efe94a0a5ec1d56bc561" translate="yes" xml:space="preserve">
          <source>ExtUtils::Liblist</source>
          <target state="translated">ExtUtils::Liblist</target>
        </trans-unit>
        <trans-unit id="1c444f69f6d944829dae0bfb3cb19187e41f4b3d" translate="yes" xml:space="preserve">
          <source>ExtUtils::Liblist - determine libraries to use and how to use them</source>
          <target state="translated">ExtUtils::Liblist-使用するライブラリとその使用方法を決定する</target>
        </trans-unit>
        <trans-unit id="d6d8f29d2d6c812d8608b7eecff6b50d5b23bb32" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM</source>
          <target state="translated">ExtUtils::MM</target>
        </trans-unit>
        <trans-unit id="d9944867a30cc09571228059a446b44834907174" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM - OS adjusted ExtUtils::MakeMaker subclass</source>
          <target state="translated">ExtUtils::MM-OS が調整された ExtUtils::MakeMaker サブクラス</target>
        </trans-unit>
        <trans-unit id="8e1a56d427b6cdce97fbab94a739a6369e0e5125" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM is a subclass of &lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt; which automatically chooses the appropriate OS specific subclass for you (ie. &lt;a href=&quot;ExtUtils::MM_Unix&quot;&gt;ExtUtils::MM_Unix&lt;/a&gt;, etc...).</source>
          <target state="translated">ExtUtils :: MMは&lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils :: MakeMakerの&lt;/a&gt;サブクラスであり、適切なOS固有のサブクラス（&lt;a href=&quot;ExtUtils::MM_Unix&quot;&gt;ExtUtils :: MM_Unix&lt;/a&gt;など）を自動的に選択します。</target>
        </trans-unit>
        <trans-unit id="db5ed850a839f5d75d47dcc96cd13b3666aca25d" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM is a subclass of ExtUtils::MakeMaker which automatically chooses the appropriate OS specific subclass for you (ie. ExtUils::MM_Unix, etc...).</source>
          <target state="translated">ExtUtils::MM は ExtUtils::MakeMaker のサブクラスで、適切な OS 固有のサブクラス(ExtUils::MM_Unix など)を自動的に選択します。</target>
        </trans-unit>
        <trans-unit id="f20ad18d2cdfe05b996f3064f2baa9077e90198e" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_AIX</source>
          <target state="translated">ExtUtils::MM_AIX</target>
        </trans-unit>
        <trans-unit id="e2c65ab01c23a32d98e8b4e3a0d77782b9a1b0c7" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_AIX - AIX specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_AIX-ExtUtils::MM_Unix の AIX 固有のサブクラス。</target>
        </trans-unit>
        <trans-unit id="82f6a9462d97b2eeba15d489f4c29f1201ca8139" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Any</source>
          <target state="translated">ExtUtils::MM_Any</target>
        </trans-unit>
        <trans-unit id="28e6e24f25939bb77bd8b0e8b5c1b5591ab0a63a" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Any - Platform-agnostic MM methods</source>
          <target state="translated">ExtUtils::MM_Any-プラットフォームに依存しない MM メソッド</target>
        </trans-unit>
        <trans-unit id="f1beb9206779be8013b3e4a60d1eb3c845414417" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Any is a subclass of &lt;a href=&quot;File::Spec&quot;&gt;File::Spec&lt;/a&gt;. The methods noted here override File::Spec.</source>
          <target state="translated">ExtUtils :: MM_Anyは&lt;a href=&quot;File::Spec&quot;&gt;File :: Specの&lt;/a&gt;サブクラスです。ここに記載されているメソッドは、File :: Specをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="a4017c7fd6c6b1a7382d3693845441ec57607400" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Any is a subclass of File::Spec. The methods noted here override File::Spec.</source>
          <target state="translated">ExtUtils::MM_Any は File::Spec のサブクラスです。ここに記載されているメソッドは、File::Spec をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="a07e79b177dfcc3d173d4e96906fb19054e96233" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Any is a superclass for the ExtUtils::MM_* set of modules. It contains methods which are either inherently cross-platform or are written in a cross-platform manner.</source>
          <target state="translated">ExtUtils::MM_Any は、ExtUtils::MM_*モジュールセットのスーパークラスです。本質的にクロスプラットフォームであるか、クロスプラットフォームで書かれたメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="01e79daa480a30aec67c1c77b38113a2fa75acb1" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_BeOS</source>
          <target state="translated">ExtUtils::MM_BeOS</target>
        </trans-unit>
        <trans-unit id="ff7047e18f778da31bd8596ebbae3ca3c16815a1" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_BeOS - methods to override UN*X behaviour in ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_BeOS-ExtUtils::MakeMaker の UN*X 動作をオーバーライドするメソッド</target>
        </trans-unit>
        <trans-unit id="32f54e4d1cdff9fa869169ffbe48a1f8a6442f8d" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Cygwin</source>
          <target state="translated">ExtUtils::MM_Cygwin</target>
        </trans-unit>
        <trans-unit id="26a23a31e9ae337b30e976cee9bfe04ee8714af5" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Cygwin - methods to override UN*X behaviour in ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_Cygwin-ExtUtils::MakeMaker の UN*X 動作をオーバーライドするメソッド</target>
        </trans-unit>
        <trans-unit id="83b34173b4084fe7b0f1b8e7080f5e44721c1652" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_DOS</source>
          <target state="translated">ExtUtils::MM_DOS</target>
        </trans-unit>
        <trans-unit id="ce09d2a78829bfe3f6e4a91c1fda8bf736e91cd1" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_DOS - DOS specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_DOS-ExtUtils::MM_Unix の DOS 固有のサブクラスです。</target>
        </trans-unit>
        <trans-unit id="95c4b06cdebc87ea8f0b490c31911c2d3a160085" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Darwin</source>
          <target state="translated">ExtUtils::MM_Darwin</target>
        </trans-unit>
        <trans-unit id="ce3594f7f3d66367be8d04f9a60ed3e5b23e61ae" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Darwin - special behaviors for OS X</source>
          <target state="translated">ExtUtils::MM_Darwin-OS X 用の特別な動作</target>
        </trans-unit>
        <trans-unit id="a35d39f1996d06db96e0eb3bc7581c9d1bb37583" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_MacOS</source>
          <target state="translated">ExtUtils::MM_MacOS</target>
        </trans-unit>
        <trans-unit id="a75ee91bd51d22344f5f01dea69463550d1b77f8" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_MacOS - once produced Makefiles for MacOS Classic</source>
          <target state="translated">ExtUtils::MM_MacOS-MacOS Classic 用の Makefiles を作成したことがあります。</target>
        </trans-unit>
        <trans-unit id="05b1c57f6a3a8d6a042ca608dff6a349761c8182" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_NW5</source>
          <target state="translated">ExtUtils::MM_NW5</target>
        </trans-unit>
        <trans-unit id="c8c1829d86b2c857e5650f081f857c1eaf86f3e8" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_NW5 - methods to override UN*X behaviour in ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_NW5-ExtUtils::MakeMaker の UN*X 挙動をオーバーライドするメソッド</target>
        </trans-unit>
        <trans-unit id="e0950761db3807deb0218887807e7b7bff1a358b" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_OS2</source>
          <target state="translated">ExtUtils::MM_OS2</target>
        </trans-unit>
        <trans-unit id="9c18e1ac0450cd34c6460b2c5c7a1220fbf998b2" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_OS2-ExtUtils::MakeMaker の UN*X 動作をオーバーライドするメソッド</target>
        </trans-unit>
        <trans-unit id="9754f9a33576ee28f994ec3ff4f6032e292d0ec1" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_QNX</source>
          <target state="translated">ExtUtils::MM_QNX</target>
        </trans-unit>
        <trans-unit id="5c959f779c55270f8bb8da4da99da8c51701f934" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_QNX - QNX specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_QNX-ExtUtils::MM_Unix の QNX 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="d9cffc939c33c81ae491e577ff7a0f67f32115db" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_UWIN</source>
          <target state="translated">ExtUtils::MM_UWIN</target>
        </trans-unit>
        <trans-unit id="392dbc1b30426cf86e8bbd0156b4353d7aae576c" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_UWIN - U/WIN specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_UWIN-ExtUtils::MM_Unix の U/Win 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="6b69e4024267a17dfff2456177fce03e32e171de" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix</target>
        </trans-unit>
        <trans-unit id="c828df98d7850f84de0cbb81d4e4596caa76f94a" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Unix - methods used by ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_Unix-ExtUtils::MakeMaker が使用するメソッド</target>
        </trans-unit>
        <trans-unit id="2f00201cd4f3a6fbb76802bb39ac7a005b8f24e3" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Unix. This is a temporary solution.</source>
          <target state="translated">ExtUtils::MM_Unixです。これは一時的な解決策です。</target>
        </trans-unit>
        <trans-unit id="5bbe314072fa79cbbe64e27d3c034cb7ecbc2df1" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_VMS</source>
          <target state="translated">ExtUtils::MM_VMS</target>
        </trans-unit>
        <trans-unit id="c328e4aa3661448cfc600baf641ce3b368446553" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_VMS - methods to override UN*X behaviour in ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_VMS-ExtUtils::MakeMaker の UN*X 動作をオーバーライドするメソッド</target>
        </trans-unit>
        <trans-unit id="cbf6a31d4b30a3697a77d880951a740af6fe002e" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_VOS</source>
          <target state="translated">ExtUtils::MM_VOS</target>
        </trans-unit>
        <trans-unit id="248c1927adaa54c68b53917bcd12ca60bc242150" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_VOS - VOS specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_VOS-ExtUtils::MM_Unix の VOS 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="01b2b6f5d2a1e4c4ed0f2cb32046a9a5d606a04c" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Win32</source>
          <target state="translated">ExtUtils::MM_Win32</target>
        </trans-unit>
        <trans-unit id="31634682156707a3a92d7105825df2529eb4f747" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Win32 - methods to override UN*X behaviour in ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MM_Win32-ExtUtils::MakeMaker の UN*X 動作をオーバーライドするメソッド</target>
        </trans-unit>
        <trans-unit id="dd4f189a6328e4d51489c48940b1b07f49808b7b" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Win95</source>
          <target state="translated">ExtUtils::MM_Win95</target>
        </trans-unit>
        <trans-unit id="ef84388c3c22f4aa37ab1ec6dcdd24ddaa801da4" translate="yes" xml:space="preserve">
          <source>ExtUtils::MM_Win95 - method to customize MakeMaker for Win9X</source>
          <target state="translated">ExtUtils::MM_Win95-Win9X 用の MakeMaker をカスタマイズするためのメソッド</target>
        </trans-unit>
        <trans-unit id="2eeeaab10b029e1825f471249451e612175f476c" translate="yes" xml:space="preserve">
          <source>ExtUtils::MY</source>
          <target state="translated">ExtUtils::MY</target>
        </trans-unit>
        <trans-unit id="a29677c3a7812ab9e27275d7d315711580baa3c5" translate="yes" xml:space="preserve">
          <source>ExtUtils::MY - ExtUtils::MakeMaker subclass for customization</source>
          <target state="translated">ExtUtils::MY-カスタマイズ用の ExtUtils::MakeMaker サブクラス</target>
        </trans-unit>
        <trans-unit id="8c6225988b72e5033c42e6301547dce425e25ee5" translate="yes" xml:space="preserve">
          <source>ExtUtils::MY is a subclass of &lt;a href=&quot;ExtUtils::MM&quot;&gt;ExtUtils::MM&lt;/a&gt;. Its provided in your Makefile.PL for you to add and override MakeMaker functionality.</source>
          <target state="translated">ExtUtils :: MYは、&lt;a href=&quot;ExtUtils::MM&quot;&gt;ExtUtils :: MMの&lt;/a&gt;サブクラスです。MakeMaker機能を追加およびオーバーライドするためにMakefile.PLで提供されます。</target>
        </trans-unit>
        <trans-unit id="077ce2e66cf34d26fc93548b5aa4b0a365551ad3" translate="yes" xml:space="preserve">
          <source>ExtUtils::MY is a subclass of ExtUtils::MM. Its provided in your Makefile.PL for you to add and override MakeMaker functionality.</source>
          <target state="translated">ExtUtils::MY は ExtUtils::MM のサブクラスです。MakeMaker の機能を追加したり、オーバーライドしたりするために、Makefile.PL で提供されています。</target>
        </trans-unit>
        <trans-unit id="a8d99fc9d222321dd1dd6e7c9d39239d74c92fb3" translate="yes" xml:space="preserve">
          <source>ExtUtils::MY might turn out to be a temporary solution, but MY won't go away.</source>
          <target state="translated">ExtUtils::MYは一時的な解決策になるかもしれませんが、MYは消えません。</target>
        </trans-unit>
        <trans-unit id="6da8b7232afb53dfdcd9b1c4dde891781d5ce223" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker</source>
          <target state="translated">ExtUtils::MakeMaker</target>
        </trans-unit>
        <trans-unit id="b8052cbade448d159716f320bb8b7066c1c35927" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker (EUMM) is object oriented. Each directory below the current directory that contains a Makefile.PL is treated as a separate object. This makes it possible to write an unlimited number of Makefiles with a single invocation of WriteMakefile().</source>
          <target state="translated">ExtUtils::MakeMaker(EUMM)はオブジェクト指向です。Makefile.PL を含むカレントディレクトリ以下の各ディレクトリは、個別のオブジェクトとして扱われます。これにより、WriteMakefile()の一回の呼び出しで無制限に Makefile を書き込むことが可能になります。</target>
        </trans-unit>
        <trans-unit id="6ea38d2404e8bb2fe915619afea85f24fef8c2cc" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker - Create a module Makefile</source>
          <target state="translated">ExtUtils::MakeMaker-モジュール Makefile を作成する</target>
        </trans-unit>
        <trans-unit id="e6df2289ed559a450ea26d00c0d0e4cee5508740" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker subclass for customization</source>
          <target state="translated">カスタマイズのための ExtUtils::MakeMaker サブクラス</target>
        </trans-unit>
        <trans-unit id="c60c158c602a516f81a6ae9bca65b474a071fe74" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::Config</source>
          <target state="translated">ExtUtils::MakeMaker::Config</target>
        </trans-unit>
        <trans-unit id="d3014ef697f5ada430bc56427a7b9caae4e6e02c" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::Config - Wrapper around Config.pm</source>
          <target state="translated">ExtUtils::MakeMaker::Config-Config.pm のラッパー</target>
        </trans-unit>
        <trans-unit id="9ccd57b3ecc86c99f88666a4cbfa65fcc3d9511f" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::FAQ</source>
          <target state="translated">ExtUtils::MakeMaker::FAQ</target>
        </trans-unit>
        <trans-unit id="30461ff8ef34cae5ca5dc88e0a98e8273138112a" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::FAQ - Frequently Asked Questions About MakeMaker</source>
          <target state="translated">ExtUtils::MakeMaker::FAQ-MakeMaker に関するよくある質問</target>
        </trans-unit>
        <trans-unit id="51e7eb76f593803326b81c0b7eddf02ecc2dca1f" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::Locale</source>
          <target state="translated">ExtUtils::MakeMaker::Locale</target>
        </trans-unit>
        <trans-unit id="95b89cbe7015202586c4481ef682b645c3e89ac2" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::Locale - bundled Encode::Locale</source>
          <target state="translated">ExtUtils::MakeMaker::Locale-バンドルされた Encode::Locale</target>
        </trans-unit>
        <trans-unit id="c91ea2c313a203d7ca441511bcd463e56db95e2e" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::Tutorial</source>
          <target state="translated">ExtUtils::MakeMaker::Tutorial</target>
        </trans-unit>
        <trans-unit id="a40c04994e7a37e13af27331a991a5aa646c9b73" translate="yes" xml:space="preserve">
          <source>ExtUtils::MakeMaker::Tutorial - Writing a module with MakeMaker</source>
          <target state="translated">ExtUtils::MakeMaker::チュートリアル-MakeMaker でモジュールを書く</target>
        </trans-unit>
        <trans-unit id="b357eaa10f6891f76e970ffb5f2bf93f495e4a17" translate="yes" xml:space="preserve">
          <source>ExtUtils::Manifest</source>
          <target state="translated">ExtUtils::Manifest</target>
        </trans-unit>
        <trans-unit id="c2882ccdd5737a1b3d2f4dc3d31014e58dd46653" translate="yes" xml:space="preserve">
          <source>ExtUtils::Manifest - Utilities to write and check a MANIFEST file</source>
          <target state="translated">ExtUtils::Manifest-MANIFEST ファイルの書き込みとチェックのためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="3226afa87ddca4ba7171d22b9f2b78d098b58f76" translate="yes" xml:space="preserve">
          <source>ExtUtils::Manifest - utilities to write and check a MANIFEST file</source>
          <target state="translated">ExtUtils::Manifest-MANIFEST ファイルの書き込みとチェックのためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="5668766f97bcd05c6bdb7c965133d9727537b625" translate="yes" xml:space="preserve">
          <source>ExtUtils::Manifest exports no functions by default. The following are exported on request</source>
          <target state="translated">ExtUtils::Manifest はデフォルトでは関数をエクスポートしません。以下はリクエストに応じてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="bdbe036be435e29a3c3c98d79b72ee067d6d642d" translate="yes" xml:space="preserve">
          <source>ExtUtils::Manifest exports no functions by default. The following are exported on request:</source>
          <target state="translated">ExtUtils::Manifest はデフォルトでは関数をエクスポートしません。以下はリクエストに応じてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="3d683dc5b10b650f60d4d9d340eeb5154c9725c7" translate="yes" xml:space="preserve">
          <source>ExtUtils::Miniperl</source>
          <target state="translated">ExtUtils::Miniperl</target>
        </trans-unit>
        <trans-unit id="a62bb061ae9acdfb750b378b1f62a97de2f7165a" translate="yes" xml:space="preserve">
          <source>ExtUtils::Miniperl - write the C code for miniperlmain.c and perlmain.c</source>
          <target state="translated">ExtUtils::Miniperl-miniperlmain.c と perlmain.c の C コードを書く</target>
        </trans-unit>
        <trans-unit id="9fc3f091d177ebdf88e70a7d90d1a0e96a9ebda2" translate="yes" xml:space="preserve">
          <source>ExtUtils::Miniperl - write the C code for perlmain.c</source>
          <target state="translated">ExtUtils::Miniperl-perlmain.c の C コードを書く</target>
        </trans-unit>
        <trans-unit id="1c32c7f84e8dc881e25db6f6d50706131d6d8758" translate="yes" xml:space="preserve">
          <source>ExtUtils::Mkbootstrap</source>
          <target state="translated">ExtUtils::Mkbootstrap</target>
        </trans-unit>
        <trans-unit id="bbfa5e60d2823fa64c959ef9034364b18eddc3e9" translate="yes" xml:space="preserve">
          <source>ExtUtils::Mkbootstrap - make a bootstrap file for use by DynaLoader</source>
          <target state="translated">ExtUtils::Mkbootstrap-DynaLoader で使用するブートストラップファイルを作成する</target>
        </trans-unit>
        <trans-unit id="6719b923f8e283bd552384bd5af81cadfef85883" translate="yes" xml:space="preserve">
          <source>ExtUtils::Mksymlists</source>
          <target state="translated">ExtUtils::Mksymlists</target>
        </trans-unit>
        <trans-unit id="15ab523f4d3c60af2d551125aa18471a39d07e7c" translate="yes" xml:space="preserve">
          <source>ExtUtils::Mksymlists - write linker options files for dynamic extension</source>
          <target state="translated">ExtUtils::Mksymlists-動的拡張子用のリンカオプションファイルを書き込む</target>
        </trans-unit>
        <trans-unit id="dac17ac78f3539cbb386b1e56ee2b529662e80e5" translate="yes" xml:space="preserve">
          <source>ExtUtils::Packlist</source>
          <target state="translated">ExtUtils::Packlist</target>
        </trans-unit>
        <trans-unit id="2fd0b32af3911843b6577751529d4515df509939" translate="yes" xml:space="preserve">
          <source>ExtUtils::Packlist - manage .packlist files</source>
          <target state="translated">ExtUtils::Packlist-.packlist ファイルの管理</target>
        </trans-unit>
        <trans-unit id="b6cb6e0433e264b8d9ae4674f7b9ee20c7cc9a0e" translate="yes" xml:space="preserve">
          <source>ExtUtils::Packlist provides a standard way to manage .packlist files. Functions are provided to read and write .packlist files. The original .packlist format is a simple list of absolute pathnames, one per line. In addition, this package supports an extended format, where as well as a filename each line may contain a list of attributes in the form of a space separated list of key=value pairs. This is used by the installperl script to differentiate between files and links, for example.</source>
          <target state="translated">ExtUtils::Packlist は、.packlist ファイルを管理するための標準的な方法を提供します。.packlist ファイルを読み書きするための関数が提供されています。オリジナルの .packlist 形式は、1 行に 1 つの絶対パス名の単純なリストです。さらに、本パッケージは拡張フォーマットをサポートしており、各行にはファイル名の他に、スペースで区切られた key=value のペアのリストの形で属性のリストを含むことができます。これは installperl スクリプトで、例えばファイルとリンクを区別するために使われます。</target>
        </trans-unit>
        <trans-unit id="c27f6826e3e72b1481e238cd590b927b9a8c7674" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS</source>
          <target state="translated">ExtUtils::ParseXS</target>
        </trans-unit>
        <trans-unit id="a0bc42ea6560aea10d0d6a20cba29d9f0d9456c6" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS - converts Perl XS code into C code</source>
          <target state="translated">ExtUtils::ParseXS-Perl XS コードを C コードに変換する</target>
        </trans-unit>
        <trans-unit id="03159689beb1e83556a0d792cc8509ee6422dca5" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS::Constants</source>
          <target state="translated">ExtUtils::ParseXS::Constants</target>
        </trans-unit>
        <trans-unit id="cf5795919350a424f2fdddb099257f73945e1a05" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS::Constants - Initialization values for some globals</source>
          <target state="translated">ExtUtils::ParseXS::Constants-一部のグローバルの初期化値</target>
        </trans-unit>
        <trans-unit id="34afc1a15abc59a30f0d297ced64f7e5d7089b18" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS::Eval</source>
          <target state="translated">ExtUtils::ParseXS::Eval</target>
        </trans-unit>
        <trans-unit id="b114f3881b5796ad889d6328dec9b5e233d60f40" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS::Eval - Clean package to evaluate code in</source>
          <target state="translated">ExtUtils::ParseXS::Eval-内部のコードを評価するためのクリーンなパッケージ</target>
        </trans-unit>
        <trans-unit id="fd75ce4683a9aa22ba6c700ca353d47d601b2384" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS::Utilities</source>
          <target state="translated">ExtUtils::ParseXS::Utilities</target>
        </trans-unit>
        <trans-unit id="92bd9c932412ce4f8422b75c6801374ed24acdf2" translate="yes" xml:space="preserve">
          <source>ExtUtils::ParseXS::Utilities - Subroutines used with ExtUtils::ParseXS</source>
          <target state="translated">ExtUtils::ParseXS::ユーティリティー-ExtUtils::ParseXS で使用するサブルーチン</target>
        </trans-unit>
        <trans-unit id="244cbf4be92c60aff1ddbf35e6ab53db17abecdd" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps</source>
          <target state="translated">ExtUtils::Typemaps</target>
        </trans-unit>
        <trans-unit id="d3f0982ef48a7ff5c4bec28af01b2fc9c1b9e324" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps - Read/Write/Modify Perl/XS typemap files</source>
          <target state="translated">ExtUtils::Typemaps-Perl/XS タイプマップファイルの読み書き/変更</target>
        </trans-unit>
        <trans-unit id="10f91cda6d284fa20124d5451bc24b51143532bb" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::Cmd</source>
          <target state="translated">ExtUtils::Typemaps::Cmd</target>
        </trans-unit>
        <trans-unit id="795fa4eef7e8ecb9427bfc09a6b1dcc43d73ee93" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::Cmd - Quick commands for handling typemaps</source>
          <target state="translated">ExtUtils::Typemaps::Cmd-タイプマップを扱うためのクイックコマンド</target>
        </trans-unit>
        <trans-unit id="fd9969ccb534d5e151d4ccb9e73ab988320ed4b6" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::InputMap</source>
          <target state="translated">ExtUtils::Typemaps::InputMap</target>
        </trans-unit>
        <trans-unit id="c325c829d365d7d7a6812090290f7b83b3596b1c" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::InputMap - Entry in the INPUT section of a typemap</source>
          <target state="translated">ExtUtils::Typemaps::InputMap-タイプマップの INPUT セクションのエントリ</target>
        </trans-unit>
        <trans-unit id="237c9b6dbebb9b4ed396f0dce6a67fb3af72515a" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::OutputMap</source>
          <target state="translated">ExtUtils::Typemaps::OutputMap</target>
        </trans-unit>
        <trans-unit id="661bb31eef11ca983e8d0917113f95b3a60d7add" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::OutputMap - Entry in the OUTPUT section of a typemap</source>
          <target state="translated">ExtUtils::Typemaps::OutputMap-タイプマップの OUTPUT セクションのエントリ</target>
        </trans-unit>
        <trans-unit id="6feaee53a536421bc2b64881bb22fc287b99e2b4" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::Type</source>
          <target state="translated">ExtUtils::Typemaps::Type</target>
        </trans-unit>
        <trans-unit id="42aba54068b70ea208aa1cd601ae498fb974dba4" translate="yes" xml:space="preserve">
          <source>ExtUtils::Typemaps::Type - Entry in the TYPEMAP section of a typemap</source>
          <target state="translated">ExtUtils::Typemaps::Type-タイプマップの TYPEMAP セクションのエントリ</target>
        </trans-unit>
        <trans-unit id="973e953fd629b20b4ca87588491035c2a7556141" translate="yes" xml:space="preserve">
          <source>ExtUtils::XSSymSet</source>
          <target state="translated">ExtUtils::XSSymSet</target>
        </trans-unit>
        <trans-unit id="f716c096c97d144856a93624d2a5d5bd094c5cae" translate="yes" xml:space="preserve">
          <source>ExtUtils::XSSymSet - keep sets of symbol names palatable to the VMS linker</source>
          <target state="translated">ExtUtils::XSSymSet-VMS リンカが使いやすいシンボル名のセットを保持します。</target>
        </trans-unit>
        <trans-unit id="f01cb2601da9ca9e6f049c24d0b16efdb7998074" translate="yes" xml:space="preserve">
          <source>ExtUtils::testlib</source>
          <target state="translated">ExtUtils::testlib</target>
        </trans-unit>
        <trans-unit id="c819a99ea2471502c8a0521252e569cacdf6e150" translate="yes" xml:space="preserve">
          <source>ExtUtils::testlib - add blib/* directories to @INC</source>
          <target state="translated">ExtUtils::testlib-blib/*ディレクトリを @INC に追加します。</target>
        </trans-unit>
        <trans-unit id="1a8525beca2f4f9e103dd4931ef378f407141d6e" translate="yes" xml:space="preserve">
          <source>Extend File Glob to Allow Input and Output Files</source>
          <target state="translated">ファイルグロブを拡張して入出力ファイルを許可する</target>
        </trans-unit>
        <trans-unit id="82d26601ba012fb977fae11b9393fa91fb289790" translate="yes" xml:space="preserve">
          <source>Extend your pattern's legibility by permitting whitespace and comments. Details in &lt;a href=&quot;#%2Fx-and-%2Fxx&quot;&gt;&quot;/x and /xx&quot;&lt;/a&gt;</source>
          <target state="translated">空白とコメントを許可することにより、パターンの読みやすさを拡張します。&lt;a href=&quot;#%2Fx-and-%2Fxx&quot;&gt;「/ xおよび/ xx」の&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="fab77626f5cddcb8bbb657382d4af81d5cdf9048" translate="yes" xml:space="preserve">
          <source>Extend your pattern's legibility by permitting whitespace and comments. Details in &lt;a href=&quot;#%2fx&quot;&gt;/x&lt;/a&gt;</source>
          <target state="translated">空白とコメントを許可することにより、パターンの読みやすさを拡張します。&lt;a href=&quot;#%2fx&quot;&gt;/ xの&lt;/a&gt;詳細</target>
        </trans-unit>
        <trans-unit id="1d44d230ea6fe0935f3b1482cff787c6266b3d3b" translate="yes" xml:space="preserve">
          <source>Extended &lt;code&gt;expect&lt;/code&gt; . This is a hash reference with four allowed keys, &lt;code&gt;mode&lt;/code&gt; , &lt;code&gt;timeout&lt;/code&gt; , &lt;code&gt;reuse&lt;/code&gt; , and &lt;code&gt;talk&lt;/code&gt; .</source>
          <target state="translated">拡張 &lt;code&gt;expect&lt;/code&gt; 。これは、4つの許可されたキー、 &lt;code&gt;mode&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; 、 &lt;code&gt;reuse&lt;/code&gt; 、および &lt;code&gt;talk&lt;/code&gt; ハッシュ参照です。</target>
        </trans-unit>
        <trans-unit id="efc98640815d67fe8a62500e0c5368b07039dddc" translate="yes" xml:space="preserve">
          <source>Extended Bracketed Character Classes</source>
          <target state="translated">拡張ブラケット文字クラス</target>
        </trans-unit>
        <trans-unit id="08ad66702e505f4acfeb7ef02a28aef2a444692f" translate="yes" xml:space="preserve">
          <source>Extended Grapheme Clusters (Logical characters)</source>
          <target state="translated">拡張グラフェンクラスター(論理文字</target>
        </trans-unit>
        <trans-unit id="b408f65a0dc6251545ba8a1cae00a09cef180586" translate="yes" xml:space="preserve">
          <source>Extended Patterns</source>
          <target state="translated">拡張パターン</target>
        </trans-unit>
        <trans-unit id="5acbb8b9cc41fceabb939a9490161468292c9ddc" translate="yes" xml:space="preserve">
          <source>Extended Unix Character. See ISO-2022.</source>
          <target state="translated">Extended Unix Character (拡張Unix文字)。ISO-2022 を参照。</target>
        </trans-unit>
        <trans-unit id="57638586a902beff6d532df64e0c7307238ec6d1" translate="yes" xml:space="preserve">
          <source>Extended description and discussion of the program or functions, or the body of the documentation for man pages that document something else. If particularly long, it's a good idea to break this up into subsections &lt;code&gt;=head2&lt;/code&gt; directives like:</source>
          <target state="translated">プログラムまたは関数の詳細な説明とディスカッション、または何か他のものをドキュメント化しているマニュアルページのドキュメントの本文。特に長い場合は、これを次のようなサブセクション &lt;code&gt;=head2&lt;/code&gt; ディレクティブに分割することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e1eee637af0775263c15116e6a9a092f2dd1ed43" translate="yes" xml:space="preserve">
          <source>Extended integer, Perl style. This can be either an optional leading plus or minus sign, followed by a sequence of digits, or an octal string (a zero, optionally followed by '0', '1', .. '7'), or a hexadecimal string (&lt;code&gt;0x&lt;/code&gt; followed by '0' .. '9', 'a' .. 'f', case insensitive), or a binary string (&lt;code&gt;0b&lt;/code&gt; followed by a series of '0' and '1').</source>
          <target state="translated">拡張整数、Perlスタイル。これは、オプションの先行正符号または負符号、その後に続く一連の数字、または8進文字列（ゼロ、オプションで '0'、 '1'、.. '7'が続く）、または16進文字列（ &lt;code&gt;0x&lt;/code&gt; の後に '0' .. '9'、 'a' .. 'f'、大文字と小文字を区別しない）、またはバイナリ文字列（ &lt;code&gt;0b&lt;/code&gt; の後に一連の '0'と '1'が続く）。</target>
        </trans-unit>
        <trans-unit id="7f8a27621bd1b83106ef3b26b5852eb1064f0fc5" translate="yes" xml:space="preserve">
          <source>Extended processing of command line options</source>
          <target state="translated">コマンドラインオプションの拡張処理</target>
        </trans-unit>
        <trans-unit id="5db438e4dc97c2c680eb06228229b5484c1bdab3" translate="yes" xml:space="preserve">
          <source>Extending and Embedding Test::More</source>
          <target state="translated">テストの拡張と埋め込み::More</target>
        </trans-unit>
        <trans-unit id="8093cc064296db81eb0f5514264d7ee6d955b145" translate="yes" xml:space="preserve">
          <source>Extending it to csh patterns is left as an exercise to the reader.</source>
          <target state="translated">それを csh パターンに拡張することは、読者への演習として残されています。</target>
        </trans-unit>
        <trans-unit id="4e50bd25f128e6a96c634dc99854b32ea96ab716" translate="yes" xml:space="preserve">
          <source>Extending your Extension</source>
          <target state="translated">拡張機能の拡張</target>
        </trans-unit>
        <trans-unit id="4f8331dd312ba43f266e8a83a2d73cbbbec52b3f" translate="yes" xml:space="preserve">
          <source>Extension Layers</source>
          <target state="translated">拡張レイヤ</target>
        </trans-unit>
        <trans-unit id="7e80c98508d4f62822b0432554091a536a41d48e" translate="yes" xml:space="preserve">
          <source>Extension Modules</source>
          <target state="translated">拡張モジュール</target>
        </trans-unit>
        <trans-unit id="bd951e4e9e05b88a206b50063022ae727663d6c9" translate="yes" xml:space="preserve">
          <source>Extension based on</source>
          <target state="translated">に基づく拡張</target>
        </trans-unit>
        <trans-unit id="c6f2131d44d90eead55c47a30930686fccd53dcc" translate="yes" xml:space="preserve">
          <source>Extension based on .h and .c files</source>
          <target state="translated">.h および .c ファイルに基づく拡張子</target>
        </trans-unit>
        <trans-unit id="67518e197246f71238efe738515b0409050e6007" translate="yes" xml:space="preserve">
          <source>Extension based on _.h_ and _.c_ files</source>
          <target state="translated">.h_と _.c_ファイルをベースにした拡張機能</target>
        </trans-unit>
        <trans-unit id="4711cbf045a57cbff83b6f9f271bd795fbb6b53d" translate="yes" xml:space="preserve">
          <source>Extension methods</source>
          <target state="translated">拡張方法</target>
        </trans-unit>
        <trans-unit id="cce4d271f69e77a8f0acdb625f0076753f28069c" translate="yes" xml:space="preserve">
          <source>Extension modules are written in C (or a mix of Perl and C). They are usually dynamically loaded into Perl if and when you need them, but may also be linked in statically. Supported extension modules include Socket, Fcntl, and POSIX.</source>
          <target state="translated">拡張モジュールは C 言語で書かれています (または Perl と C 言語のミックス)。通常、必要に応じて Perl に動的にロードされますが、静的にリンクされることもあります。サポートされている拡張モジュールには、Socket、Fcntl、POSIXがあります。</target>
        </trans-unit>
        <trans-unit id="60ffce38ec556078960f77c6601f9f4334d9b141" translate="yes" xml:space="preserve">
          <source>Extension modules can also hook into the Perl parser to define new kinds of compound statements. These are introduced by a keyword which the extension recognizes, and the syntax following the keyword is defined entirely by the extension. If you are an implementor, see &lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;&quot;PL_keyword_plugin&quot; in perlapi&lt;/a&gt; for the mechanism. If you are using such a module, see the module's documentation for details of the syntax that it defines.</source>
          <target state="translated">拡張モジュールは、Perlパーサーにフックして、新しい種類の複合ステートメントを定義することもできます。これらは拡張機能が認識するキーワードによって導入され、キーワードに続く構文は完全に拡張機能によって定義されます。実装者の場合、メカニズムについては&lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;perlapiの「PL_keyword_plugin」を&lt;/a&gt;参照してください。このようなモジュールを使用している場合、モジュールが定義する構文の詳細については、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d5c486c72e2c41ab9d29ece60988b5356674e74f" translate="yes" xml:space="preserve">
          <source>Extension modules can also hook into the Perl parser to define new kinds of compound statements. These are introduced by a keyword which the extension recognizes, and the syntax following the keyword is defined entirely by the extension. If you are an implementor, see &lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;PL_keyword_plugin in perlapi&lt;/a&gt; for the mechanism. If you are using such a module, see the module's documentation for details of the syntax that it defines.</source>
          <target state="translated">拡張モジュールは、Perlパーサーにフックして、新しい種類の複合ステートメントを定義することもできます。これらは拡張機能が認識するキーワードによって導入され、キーワードに続く構文は拡張機能によって完全に定義されます。実装者の場合、メカニズムについては&lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;perlapiのPL_keyword_pluginを&lt;/a&gt;参照してください。そのようなモジュールを使用している場合は、モジュールが定義する構文の詳細について、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b6efb310f19bf6564f19089c880a0a0d87286db9" translate="yes" xml:space="preserve">
          <source>Extension modules can also hook into the Perl parser to define new kinds of keyword-headed expression. These may look like functions, but may also look completely different. The syntax following the keyword is defined entirely by the extension. If you are an implementor, see &lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;&quot;PL_keyword_plugin&quot; in perlapi&lt;/a&gt; for the mechanism. If you are using such a module, see the module's documentation for details of the syntax that it defines.</source>
          <target state="translated">拡張モジュールは、Perlパーサーにフックして、新しい種類のキーワード見出し式を定義することもできます。これらは関数のように見えるかもしれませんが、完全に異なって見えるかもしれません。キーワードに続く構文は、拡張子によって完全に定義されます。実装者の場合、メカニズムについては&lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;perlapiの「PL_keyword_plugin」を&lt;/a&gt;参照してください。このようなモジュールを使用している場合、モジュールが定義する構文の詳細については、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="17db2bf16378aa10db2e67a8c2600f3a25122fec" translate="yes" xml:space="preserve">
          <source>Extension modules can also hook into the Perl parser to define new kinds of keyword-headed expression. These may look like functions, but may also look completely different. The syntax following the keyword is defined entirely by the extension. If you are an implementor, see &lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;PL_keyword_plugin in perlapi&lt;/a&gt; for the mechanism. If you are using such a module, see the module's documentation for details of the syntax that it defines.</source>
          <target state="translated">拡張モジュールは、Perlパーサーにフックして、新しい種類のキーワードヘッド式を定義することもできます。これらは関数のように見えるかもしれませんが、まったく異なるように見えるかもしれません。キーワードに続く構文は、拡張機能によって完全に定義されています。実装者の場合、メカニズムについては&lt;a href=&quot;perlapi#PL_keyword_plugin&quot;&gt;perlapiのPL_keyword_pluginを&lt;/a&gt;参照してください。そのようなモジュールを使用している場合は、モジュールが定義する構文の詳細について、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="translated">Extensions</target>
        </trans-unit>
        <trans-unit id="6e975483dac372a5ca9dfd4b8e5e57b37a1180dd" translate="yes" xml:space="preserve">
          <source>Extensions and XS are, in theory, buildable by anyone using free tools. In practice, many don't, as users of the Acorn platform are used to binary distributions. MakeMaker does run, but no available make currently copes with MakeMaker's makefiles; even if and when this should be fixed, the lack of a Unix-like shell will cause problems with makefile rules, especially lines of the form &lt;code&gt;cd
sdbm &amp;amp;&amp;amp; make all&lt;/code&gt; , and anything using quoting.</source>
          <target state="translated">拡張機能とXSは、理論的には無料のツールを使用して誰でもビルドできます。Acornプラットフォームのユーザーはバイナリディストリビューションに慣れているため、実際にはそうではありません。MakeMakerは動作しますが、現在利用可能なmakeはMakeMakerのmakefileに対応していません。これを修正する必要がある場合でも、Unixのようなシェルがないと、makefileルールで問題が発生し、特に &lt;code&gt;cd sdbm &amp;amp;&amp;amp; make all&lt;/code&gt; 形式の行、および引用符を使用するすべての問題が発生します。</target>
        </trans-unit>
        <trans-unit id="23912b80f63053ec1a446ffda41e3d5c9d541b79" translate="yes" xml:space="preserve">
          <source>Extensions and XS are, in theory, buildable by anyone using free tools. In practice, many don't, as users of the Acorn platform are used to binary distributions. MakeMaker does run, but no available make currently copes with MakeMaker's makefiles; even if and when this should be fixed, the lack of a Unix-like shell will cause problems with makefile rules, especially lines of the form &lt;code&gt;cd sdbm &amp;amp;&amp;amp; make all&lt;/code&gt;, and anything using quoting.</source>
          <target state="translated">拡張機能とXSは、理論的には、無料のツールを使用して誰でも構築できます。実際には、Acornプラットフォームのユーザーはバイナリ配布に慣れているため、多くの人はそうしません。MakeMakerは実行されますが、現在、MakeMakerのmakefileに対応する利用可能なmakeはありません。これを修正する必要がある場合でも、Unixライクなシェルがないため、makefileルール、特に &lt;code&gt;cd sdbm &amp;amp;&amp;amp; make all&lt;/code&gt; の形式の行、および引用符を使用するすべての問題が発生します。</target>
        </trans-unit>
        <trans-unit id="f8be19ac765682f953ef7dfbb23fec79e7869c76" translate="yes" xml:space="preserve">
          <source>Extensions may be built either using the contents of the perl source directory tree or from the installed perl library. The recommended way is to build extensions after you have run 'make install' on perl itself. You can do that in any directory on your hard disk that is not below the perl source tree. The support for extensions below the ext directory of the perl distribution is only good for the standard extensions that come with perl.</source>
          <target state="translated">拡張機能は、perlのソースディレクトリツリーの内容を使用するか、インストールされたperlライブラリからビルドすることができます。推奨される方法は、perl 自体で 'make install' を実行した後に拡張機能をビルドすることです。これは、ハードディスク上の perl ソースツリー以下ではないディレクトリで行うことができます。perl ディストリビューションの ext ディレクトリ以下の拡張機能のサポートは、 perl に付属する標準の拡張機能にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="fd1105050ae42d352634f9a22fd2cfbe7c3340ac" translate="yes" xml:space="preserve">
          <source>Extensions.U</source>
          <target state="translated">Extensions.U</target>
        </trans-unit>
        <trans-unit id="8e77bd8de5230e7d94a54f34b54e4ee866ebaf07" translate="yes" xml:space="preserve">
          <source>External Subroutines (XS)</source>
          <target state="translated">外部サブルーチン(XS)</target>
        </trans-unit>
        <trans-unit id="fe58f6fb5713c9d9970ba20c8c7e99ac12d8ebd1" translate="yes" xml:space="preserve">
          <source>External scripts may be called by their basename. Perl will try the same extensions as when processing &lt;b&gt;-S&lt;/b&gt; command-line switch.</source>
          <target state="translated">外部スクリプトは、ベース名で呼び出すことができます。Perlは、&lt;b&gt;-S&lt;/b&gt;コマンドラインスイッチを処理するときと同じ拡張を試みます。</target>
        </trans-unit>
        <trans-unit id="ac98225101654b1670f972aaf6165f07d86a4dc2" translate="yes" xml:space="preserve">
          <source>External scripts starting with &lt;code&gt;#!&lt;/code&gt; or &lt;code&gt;extproc &lt;/code&gt; will be executed directly, without calling the shell, by calling the program specified on the rest of the first line.</source>
          <target state="translated">&lt;code&gt;#!&lt;/code&gt; で始まる外部スクリプト または &lt;code&gt;extproc &lt;/code&gt; は、シェルを呼び出さずに、最初の行の残りの部分で指定されたプログラムを呼び出すことにより、直接実行されます。</target>
        </trans-unit>
        <trans-unit id="26bf182753057236397eb723fd4891db5f117a3e" translate="yes" xml:space="preserve">
          <source>External subroutines (XSUBs) that maintain their own global state may not work correctly. Such XSUBs will either need to maintain locks to protect simultaneous access to global data from different pseudo-processes, or maintain all their state on the Perl symbol table, which is copied naturally when fork() is called. A callback mechanism that provides extensions an opportunity to clone their state will be provided in the near future.</source>
          <target state="translated">自分自身のグローバルな状態を維持する外部サブルーチン(XSUB)は正しく動作しない場合があります。そのような XSUB は、異なる疑似プロセスからのグローバルデータへの同時アクセスを保護するためにロックを維持するか、あるいは fork()が呼ばれたときに自然にコピーされる Perl のシンボルテーブル上にすべての状態を維持する必要があります。近い将来、拡張機能に状態を複製する機会を提供するコールバック機構が提供される予定です。</target>
        </trans-unit>
        <trans-unit id="fc2399f06f4a8800f1e9f8c63e75b404573137c6" translate="yes" xml:space="preserve">
          <source>Extname</source>
          <target state="translated">Extname</target>
        </trans-unit>
        <trans-unit id="38bd9c2b38d963363075f657df2649a5a865d34f" translate="yes" xml:space="preserve">
          <source>Extra RECNO Methods</source>
          <target state="translated">エクストラレックノメソッド</target>
        </trans-unit>
        <trans-unit id="080170d5c582217b07d6b630ccf123361bce391b" translate="yes" xml:space="preserve">
          <source>Extra arguments given to &lt;code&gt;subtest&lt;/code&gt; are passed to the callback. For example:</source>
          <target state="translated">&lt;code&gt;subtest&lt;/code&gt; 与えられた追加の引数は、コールバックに渡されます。例えば：</target>
        </trans-unit>
        <trans-unit id="f428c72b95856a35d58cb6523d1d9bf0d7e2e713" translate="yes" xml:space="preserve">
          <source>Extra debugging of how tries execute.</source>
          <target state="translated">トライの実行方法のデバッグを追加しました。</target>
        </trans-unit>
        <trans-unit id="642e34f2d2485598d6a1289983f49ac33667a504" translate="yes" xml:space="preserve">
          <source>Extra debugging options</source>
          <target state="translated">追加のデバッグオプション</target>
        </trans-unit>
        <trans-unit id="8d0f7f868e14cfcf2986def25df2bc4196200327" translate="yes" xml:space="preserve">
          <source>Extra layers can be inserted to process the data as it flows through. This was the driving need for including the scheme in perl 5.7.0+ - we needed a mechanism to allow data to be translated between perl's internal encoding (conceptually at least Unicode as UTF-8), and the &quot;native&quot; format used by the system. This is provided by the &quot;:encoding(xxxx)&quot; layer which typically sits above the buffering layer.</source>
          <target state="translated">余分なレイヤーを挿入して、データが流れるときに処理することができます。これが perl 5.7.0+にこのスキームを含めるための原動力でした-私たちは、Perl の内部エンコーディング (概念的には少なくとも UTF-8 としての Unicode)とシステムで使用される &quot;ネイティブ&quot; フォーマットの間でデータを変換できるメカニズムが必要でした。これは &quot;:encoding(xxxx)&quot; 層によって提供され、通常はバッファリング層の上にあります。</target>
        </trans-unit>
        <trans-unit id="678bd1bdccc15e114b793e04d18d631885eca63c" translate="yes" xml:space="preserve">
          <source>Extract delimited text sequences from strings.</source>
          <target state="translated">文字列から区切り文字列を抽出します。</target>
        </trans-unit>
        <trans-unit id="7254948dbbd318f1e97d0a1eeb40a1eb2d41c79b" translate="yes" xml:space="preserve">
          <source>Extract it like this</source>
          <target state="translated">このように抽出します。</target>
        </trans-unit>
        <trans-unit id="05a2f0e61aa11822c7799b10cf19bd9f231551af" translate="yes" xml:space="preserve">
          <source>Extract it to a spaceless path but not into the perl build source. Don't extract it into the same directory as celib. Make a copy of the &quot;wince-arm-pocket-wce300&quot; folder and rename the copy to &quot;wince-arm-pocket-wce400&quot;. This is a hack so we can build a CE 4.0 binary by linking in CE 3.0 ARM asm; the linker doesn't care. Windows Mobile/WinCE are backwards compatible with machine code like Desktop Windows.</source>
          <target state="translated">perlのビルドソースには入れず、スペースのないパスに展開してください。celibと同じディレクトリに展開しない。wince-arm-pocket-wce300」フォルダのコピーを作って、「wince-arm-pocket-wce400」にリネームします。これはハックなので、CE 3.0 ARM asmでリンクしてCE 4.0のバイナリをビルドすることができます;リンカは気にしません。Windows Mobile/WinCEはDesktop Windowsのようにマシンコードとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="7749ca362c5039000e30519eec908556e69a793e" translate="yes" xml:space="preserve">
          <source>Extract it to a spaceless path but not into the perl build source. I call this directory &quot;celib-palm-3.0&quot; but in the GitHub snapshot it will be called &quot;celib-master&quot;. Make a copy of the &quot;wince-arm-pocket-wce300-release&quot; folder and rename the copy to &quot;wince-arm-pocket-wce400&quot;. This is a hack so we can build a CE 4.0 binary by linking in CE 3.0 ARM asm; the linker doesn't care. Windows Mobile/WinCE are backwards compatible with machine code like Desktop Windows.</source>
          <target state="translated">perlのビルドソースには入れず、スペースのないパスに展開します。私はこのディレクトリを &quot;celib-palm-3.0 &quot;と呼んでいますが、GitHubのスナップショットでは &quot;celib-master &quot;と呼ばれています。wince-arm-pocket-wce300-release」フォルダのコピーを作り、「wince-arm-pocket-wce400」にリネームします。これはハックなので、CE 3.0 ARM asmでリンクしてCE 4.0のバイナリをビルドすることができます;リンカは気にしません。Windows Mobile/WinCEはDesktop Windowsのようにマシンコードとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="6a5aa60c177bb5d75235a8c111f9e4b6cea8ac1c" translate="yes" xml:space="preserve">
          <source>Extract selected sections of POD from input</source>
          <target state="translated">入力からPODの選択されたセクションを抽出</target>
        </trans-unit>
        <trans-unit id="48348ed6315b959bdb6c19c5f46693033fe9a289" translate="yes" xml:space="preserve">
          <source>Extract this object, optionally to an alternative name.</source>
          <target state="translated">このオブジェクトを抽出します。</target>
        </trans-unit>
        <trans-unit id="700d36da6316894ea4553b7a4764bc2e9b2ffb63" translate="yes" xml:space="preserve">
          <source>Extracted from core distribution for publishing on the CPAN by S&amp;eacute;bastien Aperghis-Tramoni &amp;lt;sebastien (at) aperghis.net&amp;gt;.</source>
          <target state="translated">CPANで公開するためにS&amp;eacute;bastienAperghis-Tramoni &amp;lt;sebastien（at）aperghis.net&amp;gt;によってコアディストリビューションから抽出されました。</target>
        </trans-unit>
        <trans-unit id="8d01377458bb164941cbab45b0257bce76f2aaf1" translate="yes" xml:space="preserve">
          <source>Extracting Version Numbers from Perl Modules</source>
          <target state="translated">Perl モジュールからバージョン番号を抽出する</target>
        </trans-unit>
        <trans-unit id="33342b226b64c6cbc40d180e3ba186ad44a5f06f" translate="yes" xml:space="preserve">
          <source>Extracting matches</source>
          <target state="translated">マッチの抽出</target>
        </trans-unit>
        <trans-unit id="16e9f64b08e09da9325dc889d58611a8376664da" translate="yes" xml:space="preserve">
          <source>Extracts a substring out of EXPR and returns it. First character is at offset zero. If OFFSET is negative, starts that far back from the end of the string. If LENGTH is omitted, returns everything through the end of the string. If LENGTH is negative, leaves that many characters off the end of the string.</source>
          <target state="translated">EXPRから部分文字列を抽出して返します。最初の文字はオフセットゼロから始まる。OFFSETが負の値の場合、文字列の末尾からそれだけ後ろの方から開始します。LENGTHが省略された場合は、文字列の最後までのすべての文字を返します。LENGTHが負の場合、文字列の最後からそれだけの文字を残す。</target>
        </trans-unit>
        <trans-unit id="7e02013b2bc8b8b15efdd928d9932b054c7620a2" translate="yes" xml:space="preserve">
          <source>Extracts the contents of the tar file. The first argument can either be the name of the tar file to create or a reference to an open file handle (e.g. a GLOB reference). All relative paths in the tar file will be created underneath the current working directory.</source>
          <target state="translated">tar ファイルの内容を抽出します。最初の引数には、作成する tar ファイルの名前か、開いているファイルハンドルへの参照 (例:GLOB 参照)を指定します。tar ファイル内のすべての相対パスは、現在の作業ディレクトリの下に作成されます。</target>
        </trans-unit>
        <trans-unit id="885f6e090c877a36591aaa902dd00c6dd7b9efec" translate="yes" xml:space="preserve">
          <source>Extras.U</source>
          <target state="translated">Extras.U</target>
        </trans-unit>
        <trans-unit id="f680827447f98b26a0af418fbc0405801d7796f6" translate="yes" xml:space="preserve">
          <source>Extremely high code points were never specified in any standard, and require an extension to UTF-8 to express, which Perl does. It is likely that programs written in something other than Perl would not be able to read files that contain these; nor would Perl understand files written by something that uses a different extension. For these reasons, there is a separate set of flags that can warn and/or disallow these extremely high code points, even if other above-Unicode ones are accepted. They are the &lt;code&gt;UNICODE_WARN_PERL_EXTENDED&lt;/code&gt; and &lt;code&gt;UNICODE_DISALLOW_PERL_EXTENDED&lt;/code&gt; flags. For more information see &lt;a href=&quot;#UTF8_GOT_PERL_EXTENDED&quot;&gt;&quot;&lt;code&gt;UTF8_GOT_PERL_EXTENDED&lt;/code&gt;&quot;&lt;/a&gt;. Of course &lt;code&gt;UNICODE_DISALLOW_SUPER&lt;/code&gt; will treat all above-Unicode code points, including these, as malformations. (Note that the Unicode standard considers anything above 0x10FFFF to be illegal, but there are standards predating it that allow up to 0x7FFF_FFFF (2**31 -1))</source>
          <target state="translated">非常に高いコードポイントはどの標準でも指定されておらず、Perlが行うように表現するにはUTF-8への拡張が必要です。 Perl以外で書かれたプログラムは、これらを含むファイルを読み取ることができない可能性があります。また、Perlは、異なる拡張子を使用する何かによって書かれたファイルを理解しません。これらの理由から、他の上記のUnicodeのものが受け入れられたとしても、これらの非常に高いコードポイントを警告および/または禁止することができるフラグの別個のセットがあります。これらは、 &lt;code&gt;UNICODE_WARN_PERL_EXTENDED&lt;/code&gt; フラグと &lt;code&gt;UNICODE_DISALLOW_PERL_EXTENDED&lt;/code&gt; フラグです。詳細については、&lt;a href=&quot;#UTF8_GOT_PERL_EXTENDED&quot;&gt;「 &lt;code&gt;UTF8_GOT_PERL_EXTENDED&lt;/code&gt; 」を&lt;/a&gt;参照してください。もちろん &lt;code&gt;UNICODE_DISALLOW_SUPER&lt;/code&gt; 上記のすべてのUnicodeコードポイント（これらを含む）を奇形として扱います。 （Unicode標準は0x10FFFFを超えるものはすべて違法であると見なしますが、それより前の標準では最大0x7FFF_FFFF（2 ** 31 -1）を許可することに注意してください）</target>
        </trans-unit>
        <trans-unit id="b1a686562152550b10f6394ec5f13fc276de5710" translate="yes" xml:space="preserve">
          <source>Extremely high code points were never specified in any standard, and require an extension to UTF-8 to express, which Perl does. It is likely that programs written in something other than Perl would not be able to read files that contain these; nor would Perl understand files written by something that uses a different extension. For these reasons, there is a separate set of flags that can warn and/or disallow these extremely high code points, even if other above-Unicode ones are accepted. They are the &lt;code&gt;UTF8_WARN_PERL_EXTENDED&lt;/code&gt; and &lt;code&gt;UTF8_DISALLOW_PERL_EXTENDED&lt;/code&gt; flags. For more information see &lt;a href=&quot;#UTF8_GOT_PERL_EXTENDED&quot;&gt;&quot;&lt;code&gt;UTF8_GOT_PERL_EXTENDED&lt;/code&gt;&quot;&lt;/a&gt;. Of course &lt;code&gt;UTF8_DISALLOW_SUPER&lt;/code&gt; will treat all above-Unicode code points, including these, as malformations. (Note that the Unicode standard considers anything above 0x10FFFF to be illegal, but there are standards predating it that allow up to 0x7FFF_FFFF (2**31 -1))</source>
          <target state="translated">非常に高いコードポイントはどの標準でも指定されておらず、Perlが行うように表現するにはUTF-8への拡張が必要です。 Perl以外で書かれたプログラムは、これらを含むファイルを読み取ることができない可能性があります。また、Perlは、異なる拡張子を使用する何かによって書かれたファイルを理解しません。これらの理由から、他の上記のUnicodeのものが受け入れられたとしても、これらの非常に高いコードポイントを警告および/または禁止することができるフラグの別個のセットがあります。これらは、 &lt;code&gt;UTF8_WARN_PERL_EXTENDED&lt;/code&gt; フラグと &lt;code&gt;UTF8_DISALLOW_PERL_EXTENDED&lt;/code&gt; フラグです。詳細については、&lt;a href=&quot;#UTF8_GOT_PERL_EXTENDED&quot;&gt;「 &lt;code&gt;UTF8_GOT_PERL_EXTENDED&lt;/code&gt; 」を&lt;/a&gt;参照してください。もちろん &lt;code&gt;UTF8_DISALLOW_SUPER&lt;/code&gt; 上記のすべてのUnicodeコードポイント（これらを含む）を奇形として扱います。 （Unicode標準は0x10FFFFを超えるものはすべて違法であると見なしますが、それより前の標準では最大0x7FFF_FFFF（2 ** 31 -1）を許可することに注意してください）</target>
        </trans-unit>
        <trans-unit id="42f25b6a320c5687fd271f37b1ee97e7d69228f2" translate="yes" xml:space="preserve">
          <source>Extremely similar to open2(), open3() spawns the given $cmd and connects CHLD_OUT for reading from the child, CHLD_IN for writing to the child, and CHLD_ERR for errors. If CHLD_ERR is false, or the same file descriptor as CHLD_OUT, then STDOUT and STDERR of the child are on the same filehandle (this means that an autovivified lexical cannot be used for the STDERR filehandle, see SYNOPSIS). The CHLD_IN will have autoflush turned on.</source>
          <target state="translated">open2()と非常によく似ている open3()は、指定した $cmd を生成し、CHLD_OUT は子プロセスからの読み込み、CHLD_IN は子プロセスへの書き込み、CHLD_ERR はエラーを検出します。CHLD_ERR が false の場合、あるいは CHLD_OUT と同じファイル記述子の場合は、子の STDOUT と STDERR が同じファイルハンドル上にあります (これは、STDERR ファイルハンドルに autovivified lexical を使用できないことを意味します。)CHLD_INではオートフラッシュがオンになります。</target>
        </trans-unit>
        <trans-unit id="92eb55a6ceeed67d784ed90769a2d53fa3c77acb" translate="yes" xml:space="preserve">
          <source>Extremely similar to open2(), open3() spawns the given command and connects $chld_out for reading from the child, $chld_in for writing to the child, and $chld_err for errors. If $chld_err is false, or the same file descriptor as $chld_out, then STDOUT and STDERR of the child are on the same filehandle. This means that an autovivified lexical cannot be used for the STDERR filehandle, but gensym from &lt;a href=&quot;symbol&quot;&gt;Symbol&lt;/a&gt; can be used to vivify a new glob reference, see &lt;a href=&quot;#SYNOPSIS&quot;&gt;&quot;SYNOPSIS&quot;&lt;/a&gt;. The $chld_in will have autoflush turned on.</source>
          <target state="translated">open2（）と非常によく似ており、open3（）は指定されたコマンドを生成し、子からの読み取り用に$ chld_out、子への書き込み用に$ chld_in、エラー用に$ chld_errを接続します。$ chld_errがfalseの場合、または$ chld_outと同じファイル記述子の場合、子のSTDOUTとSTDERRは同じファイルハンドル上にあります。これは、自動化されたレキシカルをSTDERRファイルハンドルに使用できないことを意味しますが、&lt;a href=&quot;symbol&quot;&gt;Symbolの&lt;/a&gt;gensymを使用して、新しいglob参照を活性化できます。&lt;a href=&quot;#SYNOPSIS&quot;&gt;「&lt;/a&gt; SYNOPSIS 」を参照してください。$ chld_inでは自動フラッシュがオンになります。</target>
        </trans-unit>
        <trans-unit id="d2122187dffca50e0b79b010ea05ebfa6a4d1181" translate="yes" xml:space="preserve">
          <source>Extshortname</source>
          <target state="translated">Extshortname</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="ade1d38216915151ba7db0ce62f3199d7bf8e743" translate="yes" xml:space="preserve">
          <source>F:/bin</source>
          <target state="translated">F:/bin</target>
        </trans-unit>
        <trans-unit id="16a6231368962f338e8f37dfc91ca30753938154" translate="yes" xml:space="preserve">
          <source>FACET FIELDS</source>
          <target state="translated">ファセットフィールド</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3f8b9d0d8f1563ce34d8f76abc9faf53ac55bb32" translate="yes" xml:space="preserve">
          <source>FAQs, tricks and tips for &lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils::MakeMaker&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ExtUtils::MakeMaker&quot;&gt;ExtUtils :: MakeMaker&lt;/a&gt;に関するFAQ、トリック、ヒント。</target>
        </trans-unit>
        <trans-unit id="65569c995a4785c8ee0ddac72f9a5d5496ad6056" translate="yes" xml:space="preserve">
          <source>FAQs, tricks and tips for &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt; に関するFAQ、トリック、ヒント。</target>
        </trans-unit>
        <trans-unit id="dec5a3344b6b1da0ebe322bd0a2dfc8eb4528955" translate="yes" xml:space="preserve">
          <source>FATAL errors will cause the program to halt (&lt;code&gt;croak&lt;/code&gt; ), since the problem is so severe that it would be dangerous to continue. (This can always be trapped with &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, but it's not a good idea. Under the circumstances, dying is the best thing to do).</source>
          <target state="translated">致命的なエラーが発生すると、プログラムが停止（ &lt;code&gt;croak&lt;/code&gt; ）します。問題が深刻であるため、続行するのは危険だからです。（これは常に &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; でトラップされる可能性がありますが、それは良い考えではありません。状況下では、死ぬことが最善の方法です）。</target>
        </trans-unit>
        <trans-unit id="6b6f2d1eafcc9e88114df946d6ac19bc0f376a0c" translate="yes" xml:space="preserve">
          <source>FATAL errors will cause the program to halt (&lt;code&gt;croak&lt;/code&gt;), since the problem is so severe that it would be dangerous to continue. (This can always be trapped with &lt;code&gt;eval&lt;/code&gt;, but it's not a good idea. Under the circumstances, dying is the best thing to do).</source>
          <target state="translated">問題が非常に深刻で続行するのは危険であるため、致命的なエラーが発生すると、プログラムが停止します（ &lt;code&gt;croak&lt;/code&gt; ）。（これは常に &lt;code&gt;eval&lt;/code&gt; でトラップされる可能性がありますが、それは良い考えではありません。状況下では、死ぬことが最善の方法です）。</target>
        </trans-unit>
        <trans-unit id="69754788a4c6beb4ec0ff140aa5c158dca3bfa2a" translate="yes" xml:space="preserve">
          <source>FB_CROAK</source>
          <target state="translated">FB_CROAK</target>
        </trans-unit>
        <trans-unit id="b626cf33b4a041c5ce4d521b41bf3a7b58bd485d" translate="yes" xml:space="preserve">
          <source>FB_DEFAULT</source>
          <target state="translated">FB_DEFAULT</target>
        </trans-unit>
        <trans-unit id="757934dd26eb29cb3152a5f387ec3d2edb168405" translate="yes" xml:space="preserve">
          <source>FB_PERLQQ FB_HTMLCREF FB_XMLCREF</source>
          <target state="translated">FB_PERLQQ FB_HTMLCREF FB_XMLCREF</target>
        </trans-unit>
        <trans-unit id="0a74cbd8c5cb0982de1a9bcfa6850e000455346d" translate="yes" xml:space="preserve">
          <source>FB_QUIET</source>
          <target state="translated">FB_QUIET</target>
        </trans-unit>
        <trans-unit id="0dd7f31fe0e5f67c669f4440fb273121e4c806e4" translate="yes" xml:space="preserve">
          <source>FB_WARN</source>
          <target state="translated">FB_WARN</target>
        </trans-unit>
        <trans-unit id="8e8b3f3bb48e9f1566f046dd9abec5d58654f4a5" translate="yes" xml:space="preserve">
          <source>FCNTL</source>
          <target state="translated">FCNTL</target>
        </trans-unit>
        <trans-unit id="47dadeeeb2bc9f5421eaa6bbbe50810a393d4c66" translate="yes" xml:space="preserve">
          <source>FEATURE BUNDLES</source>
          <target state="translated">フィーチャー バンドル</target>
        </trans-unit>
        <trans-unit id="ec8e87c2f7d4da8aaca114d6270ea98cb522428f" translate="yes" xml:space="preserve">
          <source>FEATURES = less-&amp;gt;of()</source>
          <target state="translated">機能= less-&amp;gt; of（）</target>
        </trans-unit>
        <trans-unit id="489edc9160737f1f5321c8439e0d90f85d95108c" translate="yes" xml:space="preserve">
          <source>FEEDBACK</source>
          <target state="translated">FEEDBACK</target>
        </trans-unit>
        <trans-unit id="a721f50a7a690a4a15e9a37c997197a6892fe7c1" translate="yes" xml:space="preserve">
          <source>FETCH</source>
          <target state="translated">FETCH</target>
        </trans-unit>
        <trans-unit id="a36834b47beb7b8fa9cc177881caffbc9273b059" translate="yes" xml:space="preserve">
          <source>FETCH this</source>
          <target state="translated">フェッチ</target>
        </trans-unit>
        <trans-unit id="c2b96ae35c4cdaf0d5015e044df05ffbf062155e" translate="yes" xml:space="preserve">
          <source>FETCH this, index</source>
          <target state="translated">FETCH this,index</target>
        </trans-unit>
        <trans-unit id="0f0417b5bc981c089adeff175d8d240c193a1c5f" translate="yes" xml:space="preserve">
          <source>FETCH this, key</source>
          <target state="translated">これをフェッチ、キー</target>
        </trans-unit>
        <trans-unit id="c895bf1dc50f257bb516434bac2edbda6ee48875" translate="yes" xml:space="preserve">
          <source>FETCHSIZE and STORESIZE are used to provide &lt;code&gt;$#array&lt;/code&gt; and equivalent &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt; access.</source>
          <target state="translated">FETCHSIZEおよびSTORESIZEは、 &lt;code&gt;$#array&lt;/code&gt; および同等の &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt; アクセスを提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9a55d444e2f42ff3332a7b20892e03b42c0dde45" translate="yes" xml:space="preserve">
          <source>FETCHSIZE and STORESIZE are used to provide &lt;code&gt;$#array&lt;/code&gt; and equivalent &lt;code&gt;scalar(@array)&lt;/code&gt; access.</source>
          <target state="translated">FETCHSIZEとSTORESIZEは、 &lt;code&gt;$#array&lt;/code&gt; および同等の &lt;code&gt;scalar(@array)&lt;/code&gt; アクセスを提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="655cf3f775d1131bb1cd13d50dcc9384058c7e74" translate="yes" xml:space="preserve">
          <source>FETCHSIZE returned a negative value</source>
          <target state="translated">FETCHSIZE は負の値を返しました。</target>
        </trans-unit>
        <trans-unit id="ffdae04b785f3e9a65f525eb253a77d31047f28b" translate="yes" xml:space="preserve">
          <source>FETCHSIZE this</source>
          <target state="translated">フェッチサイズ</target>
        </trans-unit>
        <trans-unit id="845bc45b1b1e5326c244df2ee7648f3ddd776170" translate="yes" xml:space="preserve">
          <source>FETCH_</source>
          <target state="translated">FETCH_</target>
        </trans-unit>
        <trans-unit id="05cf9a52ee9997400d322323b2f4f5f087799c04" translate="yes" xml:space="preserve">
          <source>FIELDS</source>
          <target state="translated">FIELDS</target>
        </trans-unit>
        <trans-unit id="07c257b16606b468b4287bbfd069963fcb6c04a5" translate="yes" xml:space="preserve">
          <source>FIFO</source>
          <target state="translated">FIFO</target>
        </trans-unit>
        <trans-unit id="3f799155fde6a8df0e53471e8ebc22e51aee5205" translate="yes" xml:space="preserve">
          <source>FIFO (named pipe).</source>
          <target state="translated">FIFO(名前付きパイプ)。</target>
        </trans-unit>
        <trans-unit id="b4915d3a7ef82abdf96f2b5042452a69b2ea344c" translate="yes" xml:space="preserve">
          <source>FILE</source>
          <target state="translated">FILE</target>
        </trans-unit>
        <trans-unit id="188699dbc4f938b6c1d493b9b4e73beaae160b4d" translate="yes" xml:space="preserve">
          <source>FILE may contain Unicode characters outside the system codepage. Once the file has been created you can use Win32::GetANSIPathName() to get a name that can be passed to system calls and external programs.</source>
          <target state="translated">FILE には、システムコードページ以外の Unicode 文字が含まれている場合があります。ファイルが作成されたら、Win32::GetANSIPathName()を使用して、システムコールや外部プログラムに渡すことができる名前を取得することができます。</target>
        </trans-unit>
        <trans-unit id="1037b28078b931a2bcf7381d1504e913f7749ea4" translate="yes" xml:space="preserve">
          <source>FILEGV</source>
          <target state="translated">FILEGV</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
