<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="55a77b36211d3d02a45104bff8d76788cd986acc" translate="yes" xml:space="preserve">
          <source>You can get commercial support of Perl if you wish, although for most users the informal support will more than suffice. See the answer to &quot;Where can I buy a commercial version of Perl?&quot; for more information.</source>
          <target state="translated">ほとんどのユーザにとっては非公式なサポートで十分ですが、希望すればPerlの商用サポートを受けることができます。詳細については、&quot;どこでPerlの商用版を購入できますか?&quot;を参照してください。</target>
        </trans-unit>
        <trans-unit id="83877e131c38375e988c7edf4defa59ad28286ba" translate="yes" xml:space="preserve">
          <source>You can get gzip from &lt;a href=&quot;ftp://prep.ai.mit.edu/pub/gnu/&quot;&gt;ftp://prep.ai.mit.edu/pub/gnu/&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ftp://prep.ai.mit.edu/pub/gnu/&quot;&gt;ftp://prep.ai.mit.edu/pub/gnu/&lt;/a&gt;からgzipを取得できます</target>
        </trans-unit>
        <trans-unit id="5cc7caff36ea8191fb948cb25382a0802d8b70e3" translate="yes" xml:space="preserve">
          <source>You can get gzip from &lt;a href=&quot;http://www.s390.ibm.com/products/oe/bpxqp1.html&quot;&gt;http://www.s390.ibm.com/products/oe/bpxqp1.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.s390.ibm.com/products/oe/bpxqp1.html&quot;&gt;http://www.s390.ibm.com/products/oe/bpxqp1.html&lt;/a&gt;からgzipを取得できます</target>
        </trans-unit>
        <trans-unit id="ceb45063df183ed03ff063ebe2021495fbb9baff" translate="yes" xml:space="preserve">
          <source>You can get into trouble if you use constants in a context which automatically quotes barewords (as is true for any subroutine call). For example, you can't say &lt;code&gt;$hash{CONSTANT}&lt;/code&gt; because &lt;code&gt;CONSTANT&lt;/code&gt; will be interpreted as a string. Use &lt;code&gt;$hash{CONSTANT()}&lt;/code&gt; or &lt;code&gt;$hash{+CONSTANT}&lt;/code&gt; to prevent the bareword quoting mechanism from kicking in. Similarly, since the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator quotes a bareword immediately to its left, you have to say &lt;code&gt;CONSTANT() =&amp;gt; 'value'&lt;/code&gt; (or simply use a comma in place of the big arrow) instead of &lt;code&gt;CONSTANT =&amp;gt; 'value'&lt;/code&gt; .</source>
          <target state="translated">自動的にベアワードを引用するコンテキストで定数を使用すると、問題が発生する可能性があります（すべてのサブルーチン呼び出しに当てはまります）。たとえば、 &lt;code&gt;CONSTANT&lt;/code&gt; は文字列として解釈されるため、 &lt;code&gt;$hash{CONSTANT}&lt;/code&gt; とは言えません。使用 &lt;code&gt;$hash{CONSTANT()}&lt;/code&gt; または &lt;code&gt;$hash{+CONSTANT}&lt;/code&gt; に蹴りからのメカニズムを引用裸の単語を防止する。同様に、以降 &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子は、そのすぐ左に裸の単語を引用し、あなたが言っている &lt;code&gt;CONSTANT() =&amp;gt; 'value'&lt;/code&gt; &lt;code&gt;CONSTANT =&amp;gt; 'value'&lt;/code&gt; 代わりにvalue '（または単に大きな矢印の代わりにカンマを使用）。</target>
        </trans-unit>
        <trans-unit id="e6872803f70582536909b7aa8df4da94cd4d37a4" translate="yes" xml:space="preserve">
          <source>You can have an environment variable PERL_INSTALL_ROOT set which will be prepended as a directory to each installed file (and directory).</source>
          <target state="translated">環境変数PERL_INSTALL_ROOTを設定しておくと、インストールされた各ファイル(およびディレクトリ)にディレクトリとして前置されるようになります。</target>
        </trans-unit>
        <trans-unit id="fa58ede728fa900b2be53c5925b3b4ff8069c044" translate="yes" xml:space="preserve">
          <source>You can ignore [pad]THXx when browsing the Perl headers/sources. Those are strictly for use within the core. Extensions and embedders need only be aware of [pad]THX.</source>
          <target state="translated">Perl のヘッダ/ソースを閲覧する際には、[pad]THXx を無視しても構いません。これらは厳密にはコア内で使用するためのものです。拡張機能やエンベッダーは [pad]THX を意識する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0a479cb9681a1cb4f6cbb2bcf71ac6471f5092e" translate="yes" xml:space="preserve">
          <source>You can imagine how bad things would be if, for example, the SYS$MANAGER or SYS$SYSTEM logical names were deleted.</source>
          <target state="translated">例えば、SYS$MANAGERやSYS$SYSTEMの論理名が削除されたら、どれだけ悪いことになるか想像できます。</target>
        </trans-unit>
        <trans-unit id="2157dc8c06b7685edcc449748ab0e77243e5a157" translate="yes" xml:space="preserve">
          <source>You can immediately see a slightly different focus to the subroutine profiling modules, and we start to see exactly which line of code is taking the most time. That regex line is looking a bit suspicious, for example. Remember that these tools are supposed to be used together, there is no single best way to profile your code, you need to use the best tools for the job.</source>
          <target state="translated">すぐにサブルーチンプロファイリングモジュールの焦点が少し変わったことがわかり、どのコードのどの行に最も時間がかかっているかが正確にわかります。例えば、あの正規表現の行はちょっと怪しいですね。これらのツールは一緒に使うものであり、コードのプロファイリングには一つのベストな方法があるわけではありません。</target>
        </trans-unit>
        <trans-unit id="01ccbef4b59df5e513c51a0c19924a7a01e4981e" translate="yes" xml:space="preserve">
          <source>You can import &lt;code&gt;:pushpop&lt;/code&gt; and maintain a stack of colors using PUSHCOLOR, POPCOLOR, and LOCALCOLOR. PUSHCOLOR takes the attribute string that starts its argument and pushes it onto a stack of attributes. POPCOLOR removes the top of the stack and restores the previous attributes set by the argument of a prior PUSHCOLOR. LOCALCOLOR surrounds its argument in a PUSHCOLOR and POPCOLOR so that the color resets afterward.</source>
          <target state="translated">&lt;code&gt;:pushpop&lt;/code&gt; をインポートし、PUSHCOLOR、POPCOLOR、およびLOCALCOLORを使用して色のスタックを維持できます。 PUSHCOLORは引数を開始する属性文字列を取り、それを属性のスタックにプッシュします。 POPCOLORはスタックの最上位を削除し、前のPUSHCOLORの引数によって設定された以前の属性を復元します。 LOCALCOLORは引数をPUSHCOLORおよびPOPCOLORで囲み、後で色がリセットされるようにします。</target>
        </trans-unit>
        <trans-unit id="7225c37bbdccefc8a70c019da87c9b8dea7a6b29" translate="yes" xml:space="preserve">
          <source>You can import all the great circle formulas by</source>
          <target state="translated">以下の方法で、すべての大円式をインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="6ccdd2eb8d7e6ad6ca52482a2893e8ad5920726c" translate="yes" xml:space="preserve">
          <source>You can import radial coordinate conversion functions by using the &lt;code&gt;:radial&lt;/code&gt; tag:</source>
          <target state="translated">&lt;code&gt;:radial&lt;/code&gt; タグを使用して、ラジアル座標変換関数をインポートできます。</target>
        </trans-unit>
        <trans-unit id="a747eb56defc25ea65ac8c773f590bb69f4cf6d4" translate="yes" xml:space="preserve">
          <source>You can import symbolic mode constants (&lt;code&gt;S_IF*&lt;/code&gt; ) and functions (&lt;code&gt;S_IS*&lt;/code&gt; ) from the Fcntl module:</source>
          <target state="translated">Fcntlモジュールからシンボリックモード定数（ &lt;code&gt;S_IF*&lt;/code&gt; ）および関数（ &lt;code&gt;S_IS*&lt;/code&gt; ）をインポートできます。</target>
        </trans-unit>
        <trans-unit id="c7c8f6c731717afeb2f914b548c9389d16df04b0" translate="yes" xml:space="preserve">
          <source>You can include one underscore between any two digits.</source>
          <target state="translated">任意の2桁の間にアンダースコアを1つ入れることができます。</target>
        </trans-unit>
        <trans-unit id="06780cff3747acdd27c6cb36674311a1b2286d47" translate="yes" xml:space="preserve">
          <source>You can instead write</source>
          <target state="translated">代わりに以下のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="c4bd7d42db9b74a8aac6c0368becb036004d4652" translate="yes" xml:space="preserve">
          <source>You can intermix &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; matches with &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\G.../g&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;\G&lt;/code&gt; is a zero-width assertion that matches the exact position where the previous &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt;, if any, left off. Without the &lt;code&gt;/g&lt;/code&gt; modifier, the &lt;code&gt;\G&lt;/code&gt; assertion still anchors at &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; as it was at the start of the operation (see &lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;), but the match is of course only attempted once. Using &lt;code&gt;\G&lt;/code&gt; without &lt;code&gt;/g&lt;/code&gt; on a target string that has not previously had a &lt;code&gt;/g&lt;/code&gt; match applied to it is the same as using the &lt;code&gt;\A&lt;/code&gt; assertion to match the beginning of the string. Note also that, currently, &lt;code&gt;\G&lt;/code&gt; is only properly supported when anchored at the very beginning of the pattern.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; 一致を &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\G.../g&lt;/a&gt;&lt;/code&gt; と混在させることができます。ここで、 &lt;code&gt;\G&lt;/code&gt; は、前の &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; がある場合は、それが終了した正確な位置と一致するゼロ幅のアサーションです。 &lt;code&gt;/g&lt;/code&gt; 修飾子がなくても、 &lt;code&gt;\G&lt;/code&gt; アサーションは操作の開始時と同じように &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; に固定されます（&lt;a href=&quot;functions/pos&quot;&gt;posを&lt;/a&gt;参照）。ただし、一致はもちろん一度だけ試行されます。以前に &lt;code&gt;/g&lt;/code&gt; 一致が適用されていないターゲット文字列で &lt;code&gt;/g&lt;/code&gt; なしで &lt;code&gt;\G&lt;/code&gt; を使用することは、 &lt;code&gt;\A&lt;/code&gt; アサーションを使用して文字列の先頭と一致することと同じです。現在、 &lt;code&gt;\G&lt;/code&gt; パターンの最初にアンカーされている場合にのみ適切にサポートされます。</target>
        </trans-unit>
        <trans-unit id="83b86b2d839c827310b20f3c55919cf18f3acb03" translate="yes" xml:space="preserve">
          <source>You can inversely compute the destination if you know the starting point, direction, and distance:</source>
          <target state="translated">出発点、方向、距離がわかれば、目的地を逆算することができます。</target>
        </trans-unit>
        <trans-unit id="0dfc74f0d7463fa46580b22cd874ca59538b399a" translate="yes" xml:space="preserve">
          <source>You can list opcodes by names, or use a tag name; see &lt;a href=&quot;opcode#Predefined-Opcode-Tags&quot;&gt;Predefined Opcode Tags in Opcode&lt;/a&gt;.</source>
          <target state="translated">オペコードを名前でリストするか、タグ名を使用できます。&lt;a href=&quot;opcode#Predefined-Opcode-Tags&quot;&gt;Opcodeの事前定義されたOpcodeタグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="001468774175cba071073df8732faf49990cd65b" translate="yes" xml:space="preserve">
          <source>You can load a custom &lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Parser::Formatter&quot;&gt;TAP::Parser::Formatter&lt;/a&gt;:</source>
          <target state="translated">カスタム&lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Parser::Formatter&quot;&gt;TAP :: Parser :: Formatterを&lt;/a&gt;ロードできます。</target>
        </trans-unit>
        <trans-unit id="97cc72d3ba21acacd11a8df6beb891397824853a" translate="yes" xml:space="preserve">
          <source>You can load custom &lt;a href=&quot;tap/parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s, to change the way the parser interprets particular</source>
          <target state="translated">カスタム&lt;a href=&quot;tap/parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;をロードして、パーサーが特定の方法を解釈する方法を変更できます</target>
        </trans-unit>
        <trans-unit id="864c8cc598c8e4c08f636d6accb98e4216dd8dc6" translate="yes" xml:space="preserve">
          <source>You can log in to the bug tracking system and comment on existing bug reports. If you have additional information regarding an existing bug, please add it. This will help the porters fix the bug.</source>
          <target state="translated">バグ追跡システムにログインして、既存のバグ報告にコメントすることができます。既存のバグに関する追加情報があれば、追加してください。これは移植者がバグを修正するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="70b967da2737530b2ccb33fdb14ce4b355858a95" translate="yes" xml:space="preserve">
          <source>You can look into using the &lt;code&gt;DB_File&lt;/code&gt; module and &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie()&lt;/a&gt;&lt;/code&gt; using the &lt;code&gt;$DB_BTREE&lt;/code&gt; hash bindings as documented in &lt;a href=&quot;db_file#In-Memory-Databases&quot;&gt;In Memory Databases in DB_File&lt;/a&gt;. The &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie::IxHash&lt;/a&gt; module from CPAN might also be instructive. Although this does keep your hash sorted, you might not like the slowdown you suffer from the tie interface. Are you sure you need to do this? :)</source>
          <target state="translated">&lt;code&gt;DB_File&lt;/code&gt; モジュールの使用と、DB_Fileの&lt;a href=&quot;db_file#In-Memory-Databases&quot;&gt;メモリ内データベースに&lt;/a&gt;記載されている &lt;code&gt;$DB_BTREE&lt;/code&gt; ハッシュバインディングを使用した &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie()&lt;/a&gt;&lt;/code&gt; を調べることができます。CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie :: IxHash&lt;/a&gt;モジュールも参考になるかもしれません。これはハッシュをソートしたままにしますが、tieインターフェースの影響を受ける速度低下が気に入らない場合があります。これを実行する必要がありますか？:)</target>
        </trans-unit>
        <trans-unit id="d03c6c46e2fd91fc95b867e10fbdca9429550351" translate="yes" xml:space="preserve">
          <source>You can make references to anything, including scalars, functions, and other references.</source>
          <target state="translated">スカラー、関数、その他の参照を含めて、何でも参照することができます。</target>
        </trans-unit>
        <trans-unit id="f238aab29e64ee5c9b032d4d04c0ab30c79c6501" translate="yes" xml:space="preserve">
          <source>You can make the while loop a lot shorter with this suggestion from Benjamin Goldberg:</source>
          <target state="translated">Benjamin Goldberg氏の提案でwhileループを大幅に短くすることができます。</target>
        </trans-unit>
        <trans-unit id="0ec5f2b2db5f7957e7b186e607473a4a56ae2fd0" translate="yes" xml:space="preserve">
          <source>You can make your configuration changes permanent by calling the command &lt;code&gt;o conf commit&lt;/code&gt; . Alternatively set the &lt;code&gt;auto_commit&lt;/code&gt; variable to true by running &lt;code&gt;o conf init auto_commit&lt;/code&gt; and answering the following question with yes.</source>
          <target state="translated">コマンド &lt;code&gt;o conf commit&lt;/code&gt; を呼び出すことで、設定の変更を永続的にすることができます。または、 &lt;code&gt;o conf init auto_commit&lt;/code&gt; を実行し、次の質問にyesと答えて、 &lt;code&gt;auto_commit&lt;/code&gt; 変数をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="2011dcb658fe55c431da3ed5067e6f4bf4528970" translate="yes" xml:space="preserve">
          <source>You can mimic class subtraction using lookahead. For example, what UTS#18 might write as</source>
          <target state="translated">ルックヘッドを使ってクラスの減算を真似ることができます。例えば、UTS#18では以下のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="3461cd371c3715543776c435145f8478a0ac6ec8" translate="yes" xml:space="preserve">
          <source>You can mock TTY input to debugger by adding arbitrary commands to @DB::typeahead. For example, your</source>
          <target state="translated">DB::typeahead に任意のコマンドを追加することで、デバッガへの TTY 入力をモックすることができます。例えば</target>
        </trans-unit>
        <trans-unit id="cf9cef6663d4cd69a19179eacb290a6dcc1e8352" translate="yes" xml:space="preserve">
          <source>You can modify &lt;code&gt;@ARGV&lt;/code&gt; before the first &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; as long as the array ends up containing the list of filenames you really want. Line numbers (&lt;code&gt;$.&lt;/code&gt; ) continue as though the input were one big happy file. See the example in &lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt; for how to reset line numbers on each file.</source>
          <target state="translated">配列に最終的に必要なファイル名のリストが含まれている限り、最初の &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; の前に &lt;code&gt;@ARGV&lt;/code&gt; を変更できます。入力が1つの大きな幸せなファイルであるかのように、行番号（ &lt;code&gt;$.&lt;/code&gt; ）が続きます。各ファイルの行番号をリセットする方法については、&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="4c8a419c4027fffc2a00680692cdd50042e9d07e" translate="yes" xml:space="preserve">
          <source>You can modify the 'commands' for example to hardwire an absolute path by e.g.</source>
          <target state="translated">コマンド」を変更して、例えば絶対パスをハードワイヤリングすることができます。</target>
        </trans-unit>
        <trans-unit id="3de41be22b6a5efcacf396fbce08b0572f97fd60" translate="yes" xml:space="preserve">
          <source>You can only declare autoties for types &lt;code&gt;&quot;SCALAR&quot;&lt;/code&gt; , &lt;code&gt;&quot;ARRAY&quot;&lt;/code&gt; , and &lt;code&gt;&quot;HASH&quot;&lt;/code&gt; . They're the only things (apart from typeglobs -- which are not declarable) that Perl can tie.</source>
          <target state="translated">autotiesは、タイプ &lt;code&gt;&quot;SCALAR&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ARRAY&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;HASH&quot;&lt;/code&gt; に対してのみ宣言できます。これらは、Perlがタイで結びつけることができる唯一のもの（宣言型ではないタイプグロブは別として）です。</target>
        </trans-unit>
        <trans-unit id="48d6492d8d5c8ebf50c4b6f0278c97639e62301c" translate="yes" xml:space="preserve">
          <source>You can only obtain this using an alias, and Getopt::Long of at least version 2.13.</source>
          <target state="translated">これを取得するには、エイリアスと、少なくともバージョン 2.13 以上の Getopt::Long を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0ce5924582aac2aa9ee7cd1ad99c9e8ff1e6ecea" translate="yes" xml:space="preserve">
          <source>You can only use the elliptical statement to stand in for a complete statement. These examples of how the ellipsis works:</source>
          <target state="translated">楕円形の文は、完全な文のために立ち上がるためにのみ使用することができます。楕円文がどのように機能するのか、これらの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="9cae8654bfe063f888826b48470927a2c30f96cd" translate="yes" xml:space="preserve">
          <source>You can open a file for input or output using the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; function. It's documented in extravagant detail in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;, but in short:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 関数を使用して、入力または出力用にファイルを開くことができます。それは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;と&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;で贅沢な詳細で文書化されていますが、簡単に言えば：</target>
        </trans-unit>
        <trans-unit id="ce96504bc4965bb9a6b5d98ed74131b7aef0ff79" translate="yes" xml:space="preserve">
          <source>You can override predefined aliases by simply applying define_alias(). The new alias is always evaluated first, and when necessary, define_alias() flushes the internal cache to make the new definition available.</source>
          <target state="translated">define_alias()を適用するだけで、定義済みのエイリアスを上書きすることができます。新しいエイリアスは常に最初に評価され、必要に応じて define_alias()は内部キャッシュをフラッシュして新しい定義を利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="ef785435f6086fb9fd6b00d9def6f92017001719" translate="yes" xml:space="preserve">
          <source>You can override the default and build a shared libperl if you wish (Configure ... -Duseshrplib).</source>
          <target state="translated">必要に応じて、デフォルトを上書きして共有の libperl をビルドすることができます (Configure ...-Duseshrplib)。</target>
        </trans-unit>
        <trans-unit id="97ed2e27db33bd8f090672fcd70380db3caec730" translate="yes" xml:space="preserve">
          <source>You can override this by giving extra arguments; see below.</source>
          <target state="translated">追加の引数を与えることで、これをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="73f74d7cb907a2b7504c7060b4ad0ec87a6506fe" translate="yes" xml:space="preserve">
          <source>You can override this by passing the desired rounding mode as parameter to &lt;code&gt;as_number()&lt;/code&gt; :</source>
          <target state="translated">これをオーバーライドするには、目的の丸めモードをパラメーターとして &lt;code&gt;as_number()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="92b4dbfc185a430ad159257351a9ef1b4f3e946a" translate="yes" xml:space="preserve">
          <source>You can pass an argument to your plugin by appending an &lt;code&gt;=&lt;/code&gt; after the plugin name, eg &lt;code&gt;-PMyPlugin=foo&lt;/code&gt; . You can pass multiple arguments using commas:</source>
          <target state="translated">プラグインに引数を渡すには、プラグイン名の後に &lt;code&gt;=&lt;/code&gt; を追加します（例： &lt;code&gt;-PMyPlugin=foo&lt;/code&gt; )。コンマを使用して複数の引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="577ba47f8467272240629f611eeec9e04fdaf1e6" translate="yes" xml:space="preserve">
          <source>You can pass arguments to your plugin by appending &lt;code&gt;=arg1,arg2,etc&lt;/code&gt; to the plugin name:</source>
          <target state="translated">プラグイン名に &lt;code&gt;=arg1,arg2,etc&lt;/code&gt; を追加することで、プラグインに引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d9b26d7e57483cd1ed4bf2659755481a3ca93653" translate="yes" xml:space="preserve">
          <source>You can pick up prebuilt binaries for Solaris from &lt;a href=&quot;http://www.sunfreeware.com/&quot;&gt;http://www.sunfreeware.com/&lt;/a&gt;, &lt;a href=&quot;http://www.blastwave.org&quot;&gt;http://www.blastwave.org&lt;/a&gt;, ActiveState &lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;, and &lt;a href=&quot;http://www.perl.com/&quot;&gt;http://www.perl.com/&lt;/a&gt; under the Binaries list at the top of the page. There are probably other sources as well. Please note that these sites are under the control of their respective owners, not the perl developers.</source>
          <target state="translated">あなたはからSolaris用のビルド済みのバイナリを拾うことができ&lt;a href=&quot;http://www.sunfreeware.com/&quot;&gt;http://www.sunfreeware.com/&lt;/a&gt;、&lt;a href=&quot;http://www.blastwave.org&quot;&gt;http://www.blastwave.org&lt;/a&gt;、ActiveStateの&lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;、と&lt;a href=&quot;http://www.perl.com/&quot;&gt;のhttp：//www.perl&lt;/a&gt;ページ上部のバイナリリストの下にある.com /。おそらく他のソースもあるでしょう。これらのサイトは、perl開発者ではなく、それぞれの所有者の管理下にあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="afad181efc494d271a3d1339fc4bea9100125dd3" translate="yes" xml:space="preserve">
          <source>You can preallocate space for a hash by assigning to the keys() function. This rounds up the allocated buckets to the next power of two:</source>
          <target state="translated">keys()関数に代入することで、ハッシュのためのスペースを事前に確保することができます。これは、割り当てられたバケットを次の 2 の累乗に丸めます。</target>
        </trans-unit>
        <trans-unit id="6ece78405c91977c16dd3a742419b856c5fd5394" translate="yes" xml:space="preserve">
          <source>You can probably expect your users to be able to guess that they can request less CPU or memory or just &quot;less&quot; overall.</source>
          <target state="translated">ユーザーが少ないCPUやメモリを要求できるか、全体的に「少ない」だけだと推測できるのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="2bb56a3e59af78b8d5da4daff16effef12d060e2" translate="yes" xml:space="preserve">
          <source>You can provide this layer when &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;ing the file:</source>
          <target state="translated">ファイルを &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ときに、このレイヤーを提供できます。</target>
        </trans-unit>
        <trans-unit id="87d0d59bd2621cca1e6ec0d854420947ec5a4ec5" translate="yes" xml:space="preserve">
          <source>You can put a &lt;code&gt;+&lt;/code&gt; in front of the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; to indicate that you want both read and write access to the file; thus &lt;code&gt;+&amp;lt;&lt;/code&gt; is almost always preferred for read/write updates--the &lt;code&gt;+&amp;gt;&lt;/code&gt; mode would clobber the file first. You can't usually use either read-write mode for updating textfiles, since they have variable-length records. See the &lt;b&gt;-i&lt;/b&gt; switch in &lt;a href=&quot;../perlrun&quot;&gt;perlrun&lt;/a&gt; for a better approach. The file is created with permissions of &lt;code&gt;0666&lt;/code&gt; modified by the process's &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; の前に &lt;code&gt;+&lt;/code&gt; を付けて、ファイルへの読み取りアクセスと書き込みアクセスの両方が必要であることを示すことができます。したがって、読み取り/書き込みの更新には &lt;code&gt;+&amp;lt;&lt;/code&gt; がほとんど常に推奨されます。 &lt;code&gt;+&amp;gt;&lt;/code&gt; モードでは、最初にファイルが上書きされます。テキストファイルは可変長レコードを持っているため、テキストファイルの更新には通常、どちらの読み取り/書き込みモードも使用できません。より良いアプローチについては、&lt;a href=&quot;../perlrun&quot;&gt;perlrun&lt;/a&gt;の&lt;b&gt;-i&lt;/b&gt;スイッチを参照してください。ファイルは、プロセスの &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 値によって変更された &lt;code&gt;0666&lt;/code&gt; の権限で作成されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a5c78cfaaebb70f40ad0f93e0301fba4283c243b" translate="yes" xml:space="preserve">
          <source>You can put a &lt;code&gt;+&lt;/code&gt; in front of the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; to indicate that you want both read and write access to the file; thus &lt;code&gt;+&amp;lt;&lt;/code&gt; is almost always preferred for read/write updates--the &lt;code&gt;+&amp;gt;&lt;/code&gt; mode would clobber the file first. You can't usually use either read-write mode for updating textfiles, since they have variable-length records. See the &lt;b&gt;-i&lt;/b&gt; switch in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for a better approach. The file is created with permissions of &lt;code&gt;0666&lt;/code&gt; modified by the process's &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; の前に &lt;code&gt;+&lt;/code&gt; を付けて、ファイルへの読み取りアクセスと書き込みアクセスの両方が必要であることを示すことができます。したがって、読み取り/書き込みの更新には &lt;code&gt;+&amp;lt;&lt;/code&gt; がほとんど常に推奨されます。 &lt;code&gt;+&amp;gt;&lt;/code&gt; モードでは、最初にファイルが上書きされます。テキストファイルは可変長レコードを持っているため、テキストファイルの更新には通常、どちらの読み取り/書き込みモードも使用できません。より良いアプローチについては、&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;の&lt;b&gt;-i&lt;/b&gt;スイッチを参照してください。ファイルは、プロセスの &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 値によって変更された &lt;code&gt;0666&lt;/code&gt; の権限で作成されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7c8c4f9eec7c5f71cbfe88cf0f5ec847885d12d2" translate="yes" xml:space="preserve">
          <source>You can put any backslash sequence character class (with the exception of &lt;code&gt;\N&lt;/code&gt; and &lt;code&gt;\R&lt;/code&gt; ) inside a bracketed character class, and it will act just as if you had put all characters matched by the backslash sequence inside the character class. For instance, &lt;code&gt;[a-f\d]&lt;/code&gt; matches any decimal digit, or any of the lowercase letters between 'a' and 'f' inclusive.</source>
          <target state="translated">括弧で囲まれた文字クラス内に任意のバックスラッシュシーケンス文字クラス（ &lt;code&gt;\N&lt;/code&gt; と &lt;code&gt;\R&lt;/code&gt; 除く）を置くことができ、バックスラッシュシーケンスと一致するすべての文字を文字クラス内に置いたかのように動作します。たとえば、 &lt;code&gt;[a-f\d]&lt;/code&gt; 、任意の10進数、または 'a'と 'f'の間の小文字のいずれかに一致します。</target>
        </trans-unit>
        <trans-unit id="a88a6953f485e8c5fc3aeb601fd219de754900f0" translate="yes" xml:space="preserve">
          <source>You can read from an open filehandle using the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator. In scalar context it reads a single line from the filehandle, and in list context it reads the whole file in, assigning each line to an element of the list:</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子を使用して、開いているファイルハンドルから読み取ることができます。スカラーコンテキストではファイルハンドルから1行を読み取り、リストコンテキストではファイル全体を読み取り、各行をリストの要素に割り当てます。</target>
        </trans-unit>
        <trans-unit id="91ab2ef6e453973e41443b71f9d3e34175e99630" translate="yes" xml:space="preserve">
          <source>You can read more about profiling in</source>
          <target state="translated">プロファイリングについての詳細は</target>
        </trans-unit>
        <trans-unit id="00f2324bbf3536a80f241b597db331417bcbe8c1" translate="yes" xml:space="preserve">
          <source>You can redistribute and/or modify this document under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはPerlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="d7dc0e1fc9ad5b87e77bf63d3f4081648cdf49ca" translate="yes" xml:space="preserve">
          <source>You can request that the flock() constants (LOCK_SH, LOCK_EX, LOCK_NB and LOCK_UN) be provided by using the tag &lt;code&gt;:&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; . See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="translated">あなたは群れ（）定数（LOCK_SH、LOCK_EX、LOCK_NBとLOCK_UN）はタグを使用して提供されることを要求することができます &lt;code&gt;:&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 。&lt;a href=&quot;exporter&quot;&gt;エクスポーターを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e9f4701466ab8780e7a2b0e9f2a17e8d0b7017d5" translate="yes" xml:space="preserve">
          <source>You can request that the old constants (FAPPEND, FASYNC, FCREAT, FDEFER, FEXCL, FNDELAY, FNONBLOCK, FSYNC, FTRUNC) be provided for compatibility reasons by using the tag &lt;code&gt;:Fcompat&lt;/code&gt; . For new applications the newer versions of these constants are suggested (O_APPEND, O_ASYNC, O_CREAT, O_DEFER, O_EXCL, O_NDELAY, O_NONBLOCK, O_SYNC, O_TRUNC).</source>
          <target state="translated">&lt;code&gt;:Fcompat&lt;/code&gt; タグを使用すると、互換性の理由から古い定数（FAPPEND、FASYNC、FCREAT、FDEFER、FEXCL、FNDELAY、FNONBLOCK、FSYNC、FTRUNC）を提供するように要求できます。新しいアプリケーションでは、これらの定数の新しいバージョンが推奨されます（O_APPEND、O_ASYNC、O_CREAT、O_DEFER、O_EXCL、O_NDELAY、O_NONBLOCK、O_SYNC、O_TRUNC）。</target>
        </trans-unit>
        <trans-unit id="caaaaed5194349d7e53889bf69ba7c88d167c7d9" translate="yes" xml:space="preserve">
          <source>You can reset this cache by assigning an empty hashref to it, or individually remove keys.</source>
          <target state="translated">このキャッシュをリセットするには、空のハッシュリフを割り当てるか、個別にキーを削除します。</target>
        </trans-unit>
        <trans-unit id="c4fc671bd928d082df8dcbc4d77c81ac14538200" translate="yes" xml:space="preserve">
          <source>You can retrieve the result via -&amp;gt;data but usually you don't have to because the stringify operator (&quot;&quot;) is overridden to do exactly that.</source>
          <target state="translated">結果は-&amp;gt; dataを介して取得できますが、文字列化演算子（ &quot;&quot;）がオーバーライドされて正確に実行されるため、通常は不要です。</target>
        </trans-unit>
        <trans-unit id="1bc6861c31e761832a97f33e3f90e04d306eb3ee" translate="yes" xml:space="preserve">
          <source>You can return the</source>
          <target state="translated">を返すことができます。</target>
        </trans-unit>
        <trans-unit id="c5203f3ceab8b6b9bc7b6ca2deddcda6d494d3e9" translate="yes" xml:space="preserve">
          <source>You can run a command in the background with:</source>
          <target state="translated">でバックグラウンドでコマンドを実行することができます。</target>
        </trans-unit>
        <trans-unit id="c92356e98ca4379f9b92a2bcc41db6e953218853" translate="yes" xml:space="preserve">
          <source>You can run all the tests with the following commands:</source>
          <target state="translated">以下のコマンドですべてのテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="dab3a450deb8a8c4cd405b2e23f88d23efbbf2ec" translate="yes" xml:space="preserve">
          <source>You can run an individual test by a command similar to</source>
          <target state="translated">と似たようなコマンドで個別のテストを実行することができます。</target>
        </trans-unit>
        <trans-unit id="7019e534322025bbdc3a56a0ada6decc0fac6688" translate="yes" xml:space="preserve">
          <source>You can run into similar problems when you store &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; or &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; into AVs or HVs. Trying to modify such elements will give you the following error:</source>
          <target state="translated">&lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; または &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; をAVまたはHVに格納すると、同様の問題が発生する可能性があります。このような要素を変更しようとすると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="48a3f2e45a171b8580b9277e027aa9cbf304aecf" translate="yes" xml:space="preserve">
          <source>You can run part of the test suite by hand by using one of the following commands from the</source>
          <target state="translated">テストスイートの一部を手作業で実行するには、次のコマンドのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="9677002a55994cfb79edd644465223dc6f275627" translate="yes" xml:space="preserve">
          <source>You can safely ignore the line about &quot;prototyping behavior&quot; - it is explained in &lt;a href=&quot;perlxs#The-PROTOTYPES%3a-Keyword&quot;&gt;The PROTOTYPES: Keyword in perlxs&lt;/a&gt;.</source>
          <target state="translated">「プロトタイピング動作」に関する行は無視してかまいません。これについては&lt;a href=&quot;perlxs#The-PROTOTYPES%3a-Keyword&quot;&gt;、PROTOTYPES：キーワードin perlxsで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="00bbb0e9f9b7d267fed175221358a00b2882f0e8" translate="yes" xml:space="preserve">
          <source>You can safely replace &lt;code&gt;isa&lt;/code&gt; with &lt;code&gt;DOES&lt;/code&gt; (although the converse is not true).</source>
          <target state="translated">&lt;code&gt;isa&lt;/code&gt; を &lt;code&gt;DOES&lt;/code&gt; で安全に置き換えることができます（ただし、逆は当てはまりません）。</target>
        </trans-unit>
        <trans-unit id="f3c22b7008ae62adff98ca02982c07c25fd7ebcc" translate="yes" xml:space="preserve">
          <source>You can say &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; and &lt;code&gt;*foo{NAME}&lt;/code&gt; to find out what name and package the *foo symbol table entry comes from. This may be useful in a subroutine that gets passed typeglobs as arguments:</source>
          <target state="translated">あなたが言うことができます &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; や &lt;code&gt;*foo{NAME}&lt;/code&gt; 何名を見つけると* fooのシンボルテーブルエントリはから来てパッケージ化します。これは、型グロブを引数として渡すサブルーチンで役立ちます。</target>
        </trans-unit>
        <trans-unit id="1966e0b952d6a25db96c9f73b3f341a3e54cf712" translate="yes" xml:space="preserve">
          <source>You can say &lt;code&gt;BEGIN { $Exporter::Verbose=1 }&lt;/code&gt; to see how the specifications are being processed and what is actually being imported into modules.</source>
          <target state="translated">&lt;code&gt;BEGIN { $Exporter::Verbose=1 }&lt;/code&gt; と言うと、仕様がどのように処理され、実際にモジュールに何がインポートされているかを確認できます。</target>
        </trans-unit>
        <trans-unit id="0ffa8d04bb2be838b7be17e141561b51ef27dbcb" translate="yes" xml:space="preserve">
          <source>You can search CPAN on &lt;a href=&quot;http://metacpan.org&quot;&gt;http://metacpan.org&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt;.</source>
          <target state="translated">CPANは&lt;a href=&quot;http://metacpan.org&quot;&gt;http://metacpan.org&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/で&lt;/a&gt;検索できます。</target>
        </trans-unit>
        <trans-unit id="decda746759f350cc820cd1383e913824bf2e767" translate="yes" xml:space="preserve">
          <source>You can search for &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; related bug reports at &lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt;. If needed submit any new bugs, problems, patches, etc. to: &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threads&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;関連のバグレポートは、&lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http：//rt.cpan.org/Public/で&lt;/a&gt;検索できます。必要に応じて、新しいバグ、問題、パッチなどを&lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threadsに&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="802f6c1f9273b694e1c0cdbd6edb66de5f11d6b4" translate="yes" xml:space="preserve">
          <source>You can see from the above that the effect of &lt;code&gt;unicode_strings&lt;/code&gt; increased over several Perl releases. (And Perl's support for Unicode continues to improve; it's best to use the latest available release in order to get the most complete and accurate results possible.) Note that &lt;code&gt;unicode_strings&lt;/code&gt; is automatically chosen if you &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher.</source>
          <target state="translated">上記から、いくつかのPerlリリースで &lt;code&gt;unicode_strings&lt;/code&gt; の効果が増加していることがわかります。（PerlによるUnicodeのサポートは改善され続けています。可能な限り完全で正確な結果を得るには、利用可能な最新のリリースを使用するのが最善です。） &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 以降を&lt;a href=&quot;functions/use&quot;&gt;使用している&lt;/a&gt;場合は、 &lt;code&gt;unicode_strings&lt;/code&gt; が自動的に選択されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="169f5a8ded36f882f89340ed4481186781ecd0dd" translate="yes" xml:space="preserve">
          <source>You can see this with the following:</source>
          <target state="translated">これは以下のようなもので見ることができます。</target>
        </trans-unit>
        <trans-unit id="a30453af312489e18bd58825504c04b5c3c816c5" translate="yes" xml:space="preserve">
          <source>You can see whether your Perl was built with PerlIO by running &lt;code&gt;perl -V&lt;/code&gt; and looking for the &lt;code&gt;useperlio=&lt;/code&gt; line. If &lt;code&gt;useperlio&lt;/code&gt; is &lt;code&gt;define&lt;/code&gt; , you have PerlIO; otherwise you don't.</source>
          <target state="translated">PerlがPerlIOでビルドされたかどうかを確認するには、 &lt;code&gt;perl -V&lt;/code&gt; を実行し、 &lt;code&gt;useperlio=&lt;/code&gt; 行を探します。 &lt;code&gt;useperlio&lt;/code&gt; が &lt;code&gt;define&lt;/code&gt; の場合、PerlIOがあります。そうでなければあなたはしません。</target>
        </trans-unit>
        <trans-unit id="1d64238a1676682fd78cc68f5aa21599974d313a" translate="yes" xml:space="preserve">
          <source>You can see which (or neither) threading flavour you have by running &lt;code&gt;perl -V&lt;/code&gt; and looking at the &lt;code&gt;Platform&lt;/code&gt; section. If you have &lt;code&gt;useithreads=define&lt;/code&gt; you have ithreads, if you have &lt;code&gt;use5005threads=define&lt;/code&gt; you have 5.005 threads. If you have neither, you don't have any thread support built in. If you have both, you are in trouble.</source>
          <target state="translated">&lt;code&gt;perl -V&lt;/code&gt; を実行して &lt;code&gt;Platform&lt;/code&gt; セクションを確認することで、どの（またはどちらでもない）スレッドの種類を確認できます。あなたが持っている場合は &lt;code&gt;useithreads=define&lt;/code&gt; あなたが持っている場合は、iスレッドを持っている &lt;code&gt;use5005threads=define&lt;/code&gt; あなたは5.005スレッドを持っています。どちらもない場合、スレッドサポートは組み込まれていません。両方ある場合、問題が発生します。</target>
        </trans-unit>
        <trans-unit id="8dc1d6869249a32d7f829c0b3a5e051d9383488b" translate="yes" xml:space="preserve">
          <source>You can see why the arrows are important. Without them, we would have had to write &lt;code&gt;${$a[1]}[2]&lt;/code&gt; instead of &lt;code&gt;$a[1][2]&lt;/code&gt; . For three-dimensional arrays, they let us write &lt;code&gt;$x[2][3][5]&lt;/code&gt; instead of the unreadable &lt;code&gt;${${$x[2]}[3]}[5]&lt;/code&gt; .</source>
          <target state="translated">矢印が重要な理由がわかります。それらがなければ、 &lt;code&gt;${$a[1]}[2]&lt;/code&gt; 代わりに &lt;code&gt;$a[1][2]&lt;/code&gt; {$ a [1]} [2]を書かなければならなかっただろう。3次元配列の場合、読み取り不可能な &lt;code&gt;${${$x[2]}[3]}[5]&lt;/code&gt; 代わりに &lt;code&gt;$x[2][3][5]&lt;/code&gt; 書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="b46ad3852d414e337d72bbed36bfa27c57b29adc" translate="yes" xml:space="preserve">
          <source>You can set and query each of these options interactively in the cpan shell with the &lt;code&gt;o conf&lt;/code&gt; or the &lt;code&gt;o conf init&lt;/code&gt; command as specified below.</source>
          <target state="translated">以下のように &lt;code&gt;o conf&lt;/code&gt; または &lt;code&gt;o conf init&lt;/code&gt; コマンドを使用して、cpanシェルでこれらの各オプションをインタラクティブに設定および照会できます。</target>
        </trans-unit>
        <trans-unit id="16508b3f102bc9307eda4b040c0235215ac4aad7" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; elements to set the POSIX realtime signal handlers, use &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; on the elements, and use &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; to find out how many POSIX realtime signals there are available &lt;code&gt;(SIGRTMAX - SIGRTMIN + 1&lt;/code&gt; , the &lt;code&gt;SIGRTMAX&lt;/code&gt; is a valid POSIX realtime signal).</source>
          <target state="translated">あなたは、設定することができます &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; 、POSIXリアルタイムシグナルハンドラを設定するための要素を使用し &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; 要素の上に、利用 &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; 上 &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; 利用可能であるどのように多くのPOSIXリアルタイムシグナルを見つけるために &lt;code&gt;(SIGRTMAX - SIGRTMIN + 1&lt;/code&gt; 、 &lt;code&gt;SIGRTMAX&lt;/code&gt; は有効なPOSIXリアルタイム信号です）。</target>
        </trans-unit>
        <trans-unit id="3f6da332e187deef2beadbe770ab6beeaee593c3" translate="yes" xml:space="preserve">
          <source>You can set the values of the &lt;code&gt;%SIG&lt;/code&gt; hash to be the functions you want to handle the signal. After perl catches the signal, it looks in &lt;code&gt;%SIG&lt;/code&gt; for a key with the same name as the signal, then calls the subroutine value for that key.</source>
          <target state="translated">&lt;code&gt;%SIG&lt;/code&gt; ハッシュの値を、信号を処理する関数に設定できます。perlがシグナルをキャッチすると、 &lt;code&gt;%SIG&lt;/code&gt; でシグナルと同じ名前のキーを探し、そのキーのサブルーチン値を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bee1469992dc1b9c8f0b603349904e7ab865deb8" translate="yes" xml:space="preserve">
          <source>You can set the variable &lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; to 1, if you want to force File::Find to always stat directories. This was used for file systems that do not have an &lt;code&gt;nlink&lt;/code&gt; count matching the number of sub-directories. Examples are ISO-9660 (CD-ROM), AFS, HPFS (OS/2 file system), FAT (DOS file system) and a couple of others.</source>
          <target state="translated">変数 &lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; を1に設定して、File :: Findが常にディレクトリをstatするようにすることができます。これは、サブディレクトリの数と一致する &lt;code&gt;nlink&lt;/code&gt; カウントを持たないファイルシステムに使用されていました。たとえば、ISO-9660（CD-ROM）、AFS、HPFS（OS / 2ファイルシステム）、FAT（DOSファイルシステム）などです。</target>
        </trans-unit>
        <trans-unit id="5472b025e4a5169aacbf87f4ca700aef907769b9" translate="yes" xml:space="preserve">
          <source>You can set these attributes on the parser object before you call &lt;code&gt;parse_file&lt;/code&gt; (or a similar method) on it:</source>
          <target state="translated">&lt;code&gt;parse_file&lt;/code&gt; （または同様のメソッド）を呼び出す前に、パーサーオブジェクトにこれらの属性を設定できます。</target>
        </trans-unit>
        <trans-unit id="d11091c76638b6f543204cac0351812864021173" translate="yes" xml:space="preserve">
          <source>You can set these with cereg.exe, a (remote) registry editor or via the PerlIDE.</source>
          <target state="translated">これらの設定は、cereg.exe、(リモートの)レジストリエディタ、またはPerlIDE経由で行うことができます。</target>
        </trans-unit>
        <trans-unit id="a45d7d92f838159f25ad37c4eba92cfbf985fe7f" translate="yes" xml:space="preserve">
          <source>You can set this in your &lt;code&gt;CPAN.pm&lt;/code&gt; configuration so modules automatically install in your private library directory when you use the CPAN.pm shell:</source>
          <target state="translated">これを &lt;code&gt;CPAN.pm&lt;/code&gt; 構成で設定して、CPAN.pmシェルを使用するときにモジュールがプライベートライブラリディレクトリに自動的にインストールされるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="30390221c1f07dd9de6ff3b92b3e83f72d1fc24c" translate="yes" xml:space="preserve">
          <source>You can sometimes</source>
          <target state="translated">時々、あなたは</target>
        </trans-unit>
        <trans-unit id="7db7fa33c434550059625aa8e8d2392ae86f8c71" translate="yes" xml:space="preserve">
          <source>You can specify a character class, by enclosing a list of characters in &lt;code&gt;[]&lt;/code&gt; , which will match any character from the list. If the first character after the &quot;[&quot; is &quot;^&quot;, the class matches any character not in the list. Within a list, the &quot;-&quot; character specifies a range, so that &lt;code&gt;a-z&lt;/code&gt; represents all characters between &quot;a&quot; and &quot;z&quot;, inclusive. If you want either &quot;-&quot; or &quot;]&quot; itself to be a member of a class, put it at the start of the list (possibly after a &quot;^&quot;), or escape it with a backslash. &quot;-&quot; is also taken literally when it is at the end of the list, just before the closing &quot;]&quot;. (The following all specify the same class of three characters: &lt;code&gt;[-az]&lt;/code&gt; , &lt;code&gt;[az-]&lt;/code&gt; , and &lt;code&gt;[a\-z]&lt;/code&gt; . All are different from &lt;code&gt;[a-z]&lt;/code&gt; , which specifies a class containing twenty-six characters, even on EBCDIC-based character sets.) Also, if you try to use the character classes &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;\W&lt;/code&gt; , &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt; , &lt;code&gt;\d&lt;/code&gt; , or &lt;code&gt;\D&lt;/code&gt; as endpoints of a range, the &quot;-&quot; is understood literally.</source>
          <target state="translated">文字のリストを &lt;code&gt;[]&lt;/code&gt; で囲むことにより、文字クラスを指定できます。これは、リストの任意の文字と一致します。 「[」の後の最初の文字が「^」の場合、クラスはリストにない任意の文字と一致します。リスト内では、「-」文字は範囲を指定するため、 &lt;code&gt;a-z&lt;/code&gt; は「a」から「z」までのすべての文字を表します。 「-」または「]」自体をクラスのメンバーにしたい場合は、リストの先頭（おそらく「^」の後ろ）に置くか、バックスラッシュでエスケープします。 &quot;-&quot;は、リストの最後で、最後の &quot;]&quot;の直前にある場合にも、文字どおりに解釈されます。 （以下はすべて、3つの文字の同じクラスを指定します： &lt;code&gt;[-az]&lt;/code&gt; 、 &lt;code&gt;[az-]&lt;/code&gt; 、および &lt;code&gt;[a\-z]&lt;/code&gt; 。 &lt;code&gt;[a-z]&lt;/code&gt; とはすべて異なります、これはEBCDICベースの文字セットでも26文字を含むクラスを指定します。）また、文字クラス &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;\W&lt;/code&gt; 、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\S&lt;/code&gt; 、 &lt;code&gt;\d&lt;/code&gt; 、または &lt;code&gt;\D&lt;/code&gt; をエンドポイントとして使用する場合範囲の「-」は文字通り理解されます。</target>
        </trans-unit>
        <trans-unit id="26fab1522afd0e2727fdb333919185675d766a45" translate="yes" xml:space="preserve">
          <source>You can specify a precision (for numeric conversions) or a maximum width (for string conversions) by specifying a &lt;code&gt;.&lt;/code&gt; followed by a number. For floating-point formats except &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; , this specifies how many places right of the decimal point to show (the default being 6). For example:</source>
          <target state="translated">を指定して、精度（数値変換の場合）または最大幅（文字列変換の場合）を指定でき &lt;code&gt;.&lt;/code&gt; 数字が続きます。 &lt;code&gt;g&lt;/code&gt; および &lt;code&gt;G&lt;/code&gt; を除く浮動小数点形式の場合、これは小数点の右側に表示する桁数を指定します（デフォルトは6）。例えば：</target>
        </trans-unit>
        <trans-unit id="d7117f36d5a9b63e0e2af83d4187313124e5bec9" translate="yes" xml:space="preserve">
          <source>You can specify a series of alternatives for a pattern using &quot;|&quot; to separate them, so that &lt;code&gt;fee|fie|foe&lt;/code&gt; will match any of &quot;fee&quot;, &quot;fie&quot;, or &quot;foe&quot; in the target string (as would &lt;code&gt;f(e|i|o)e&lt;/code&gt;). The first alternative includes everything from the last pattern delimiter (&quot;(&quot;, &quot;(?:&quot;, etc. or the beginning of the pattern) up to the first &quot;|&quot;, and the last alternative contains everything from the last &quot;|&quot; to the next closing pattern delimiter. That's why it's common practice to include alternatives in parentheses: to minimize confusion about where they start and end.</source>
          <target state="translated">&quot;|&quot;を使用して、パターンの一連の選択肢を指定できます それらを分離して、 &lt;code&gt;fee|fie|foe&lt;/code&gt; がターゲット文字列の「fee」、「fie」、または「foe」のいずれかに一致するようにします（ &lt;code&gt;f(e|i|o)e&lt;/code&gt; 同様）。最初の選択肢には、最後のパターン区切り文字（ &quot;（&quot;、 &quot;（?:&quot;など、またはパターンの先頭）から最初の &quot;|&quot;までのすべてが含まれ、最後の選択肢には、最後の &quot;|&quot;からのすべてが含まれます。そのため、括弧の中に代替を含めるのが一般的な方法です：開始位置と終了位置の混乱を最小限に抑えるためです。</target>
        </trans-unit>
        <trans-unit id="2c0acf2a3cfcada005163c068fb15aa1f1ca963b" translate="yes" xml:space="preserve">
          <source>You can specify several classes to try by joining them with commas or semicolons, as in &lt;code&gt;-MTk::SuperPod;Tk::Pod&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-MTk::SuperPod;Tk::Pod&lt;/code&gt; ように、コンマまたはセミコロンで結合することにより、いくつかのクラスを指定して試すことができます。</target>
        </trans-unit>
        <trans-unit id="1590cfec6710042ae4b201c340cadca79997b8f8" translate="yes" xml:space="preserve">
          <source>You can stop using AutoLoader by simply</source>
          <target state="translated">AutoLoaderの使用を停止するには、次のようにしてください。</target>
        </trans-unit>
        <trans-unit id="1eb2363990bc861a2294e72254c60f889449d2d6" translate="yes" xml:space="preserve">
          <source>You can switch encodings on an already opened stream by using &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt;; see &lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; を使用して、すでに開いているストリームのエンコーディングを切り替えることができます。&lt;a href=&quot;functions/binmode&quot;&gt;binmodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad4a77a592ef4f50bebb75551ecc777ec47349e4" translate="yes" xml:space="preserve">
          <source>You can switch locales as often as you wish at run time with the &lt;code&gt;POSIX::setlocale()&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;POSIX::setlocale()&lt;/code&gt; 関数を使用すると、実行時にロケールを何度でも切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="d35fb0ec3f2c6e87bec34d10cff3e1fa0aa39f99" translate="yes" xml:space="preserve">
          <source>You can test for these with Perl's &lt;b&gt;-S&lt;/b&gt; file test:</source>
          <target state="translated">Perlの&lt;b&gt;-S&lt;/b&gt;ファイルテストでこれらをテストできます。</target>
        </trans-unit>
        <trans-unit id="33cabbc3e6b78a04641195c801755295c5b1770a" translate="yes" xml:space="preserve">
          <source>You can test out changing these variables temporarily, and if the new settings seem to help, put those settings into your shell startup files. Consult your local documentation for the exact details. For Bourne-like shells (&lt;b&gt;sh&lt;/b&gt;, &lt;b&gt;ksh&lt;/b&gt;, &lt;b&gt;bash&lt;/b&gt;, &lt;b&gt;zsh&lt;/b&gt;):</source>
          <target state="translated">これらの変数を一時的に変更してテストし、新しい設定が役立つと思われる場合は、それらの設定をシェルの起動ファイルに入れます。正確な詳細については、ローカルのドキュメントを参照してください。Bourneのようなシェル（&lt;b&gt;sh&lt;/b&gt;、&lt;b&gt;ksh&lt;/b&gt;、&lt;b&gt;bash&lt;/b&gt;、&lt;b&gt;zsh&lt;/b&gt;）の場合：</target>
        </trans-unit>
        <trans-unit id="9aef87ade0298c8e39a512c631e34755f8d99a1d" translate="yes" xml:space="preserve">
          <source>You can test whether an SV is using copy-on-write with &lt;code&gt;SvIsCOW(sv)&lt;/code&gt; .</source>
          <target state="translated">SVが &lt;code&gt;SvIsCOW(sv)&lt;/code&gt; でコピーオンライトを使用しているかどうかをテストできます。</target>
        </trans-unit>
        <trans-unit id="bb7b765496cd5db87bb4e9bf905826761c1ac026" translate="yes" xml:space="preserve">
          <source>You can therefore save time by reusing this object as follows;</source>
          <target state="translated">そのため、以下のようにこのオブジェクトを再利用することで時間を節約することができます。</target>
        </trans-unit>
        <trans-unit id="9025bea13f42c28d6d27d405ef555cfdfb67e0c5" translate="yes" xml:space="preserve">
          <source>You can think of &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;typeof&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;typeof&lt;/code&gt; 演算子と考えることができます。</target>
        </trans-unit>
        <trans-unit id="cf104869dd9c15f6376b764dcf7d585d45ca8039" translate="yes" xml:space="preserve">
          <source>You can think of &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;typeof&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;typeof&lt;/code&gt; 演算子と考えることができます。</target>
        </trans-unit>
        <trans-unit id="728882433c08d9f5799a415b920db42fb16d9b1c" translate="yes" xml:space="preserve">
          <source>You can think of a module as the fundamental unit of reusable Perl code; see &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details. Whenever anyone creates a chunk of Perl code that they think will be useful to the world, they register as a Perl developer at &lt;a href=&quot;http://www.cpan.org/modules/04pause.html&quot;&gt;http://www.cpan.org/modules/04pause.html&lt;/a&gt; so that they can then upload their code to the CPAN. The CPAN is the Comprehensive Perl Archive Network and can be accessed at &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; , and searched at &lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt; .</source>
          <target state="translated">モジュールは、再利用可能なPerlコードの基本的な単位と考えることができます。詳細は&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。世界に役立つと思われるPerlコードのチャンクを誰かが作成するたびに、&lt;a href=&quot;http://www.cpan.org/modules/04pause.html&quot;&gt;http：&lt;/a&gt; //www.cpan.org/modules/04pause.htmlでPerl開発者として登録し、コードをCPAN。CPANは包括的なPerlのアーカイブネットワークであり、アクセスが可能で&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;、及びで検索&lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="969f96d8ec4df0c71d177e6b1625408e665ae979" translate="yes" xml:space="preserve">
          <source>You can tie the cache tables to any sort of tied hash that you want to, as long as it supports &lt;code&gt;TIEHASH&lt;/code&gt; , &lt;code&gt;FETCH&lt;/code&gt; , &lt;code&gt;STORE&lt;/code&gt; , and &lt;code&gt;EXISTS&lt;/code&gt; . For example,</source>
          <target state="translated">キャッシュテーブルは、 &lt;code&gt;TIEHASH&lt;/code&gt; 、 &lt;code&gt;FETCH&lt;/code&gt; 、 &lt;code&gt;STORE&lt;/code&gt; 、および &lt;code&gt;EXISTS&lt;/code&gt; をサポートしている限り、任意の種類の結合ハッシュに結合できます。例えば、</target>
        </trans-unit>
        <trans-unit id="5dff5882ff33a85a3a95fb0e709084606bfc8485" translate="yes" xml:space="preserve">
          <source>You can try using encryption via source filters (Filter::* from CPAN, or Filter::Util::Call and Filter::Simple since Perl 5.8). But crackers might be able to decrypt it. You can try using the byte code compiler and interpreter described below, but crackers might be able to de-compile it. You can try using the native-code compiler described below, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (this is true of every language, not just Perl).</source>
          <target state="translated">ソースフィルタ(CPANのFilter::*やPerl 5.8以降のFilter::Util::CallやFilter::Simple)を使って暗号化を試してみてください。しかし、クラッカーに解読されてしまうかもしれません。後述のバイトコードコンパイラとインタプリタを使ってみてください。後述のネイティブコードコンパイラを使ってみてもいいですが、クラッカーは逆コンパイルできるかもしれません。これらは、あなたのコードを盗み見しようとする人にとっては、難易度の差はありますが、どれも確実にコードを隠すことはできません (これは Perl に限らず、すべての言語に当てはまります)。</target>
        </trans-unit>
        <trans-unit id="bd149095683892a2c8050e33a089a96e4ba58ba3" translate="yes" xml:space="preserve">
          <source>You can try using encryption via source filters (Starting from Perl 5.8 the Filter::Simple and Filter::Util::Call modules are included in the standard distribution), but any decent programmer will be able to decrypt it. You can try using the byte code compiler and interpreter described later in &lt;a href=&quot;perlfaq3&quot;&gt;perlfaq3&lt;/a&gt;, but the curious might still be able to de-compile it. You can try using the native-code compiler described later, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (true of every language, not just Perl).</source>
          <target state="translated">ソースフィルターを介して暗号化を使用することもできます（Perl 5.8以降、Filter :: SimpleおよびFilter :: Util :: Callモジュールは標準ディストリビューションに含まれています）。ただし、適切なプログラマであれば暗号化を解除できます。後で&lt;a href=&quot;perlfaq3&quot;&gt;perlfaq3&lt;/a&gt;で説明するバイトコードコンパイラとインタープリタを使用してみることができますが、好奇心旺盛な人はそれを逆コンパイルできるかもしれません。後で説明するネイティブコードコンパイラを使用してみることもできますが、クラッカーが逆アセンブルできる場合があります。これらは、コードを取得したい人々にさまざまな程度の困難をもたらしますが、それを明確に隠すことはできません（Perlだけでなく、すべての言語に当てはまります）。</target>
        </trans-unit>
        <trans-unit id="2b09b812e89e288611a3620bc913b5b1b0fe4650" translate="yes" xml:space="preserve">
          <source>You can turn off that eagerness-to-help by declaring an attribute handler with the keyword &lt;code&gt;RAWDATA&lt;/code&gt; . For example:</source>
          <target state="translated">キーワード &lt;code&gt;RAWDATA&lt;/code&gt; を使用して属性ハンドラーを宣言することにより、その熱意をオフにすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="b5701868a13c5d43cf7a782ca599e3f4284f18bb" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#(%3f%23text)&quot;&gt;(?#text)&lt;/a&gt; to create a comment that ends earlier than the end of the current line, but &lt;code&gt;text&lt;/code&gt; also can't contain the closing delimiter unless escaped with a backslash.</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;#(%3f%23text)&quot;&gt;（？の#text）&lt;/a&gt;その両端以前の現在の行の末尾よりもコメントを作成するには、しかし、 &lt;code&gt;text&lt;/code&gt; バックスラッシュでエスケープしない限り、また終了区切り文字を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="6d944fb3215d0dd16d4105b924d26c8f26a00944" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#prop_values()&quot;&gt;prop_values()&lt;/a&gt; to find out if a given property is one which has a restricted set of values, and if so, what those values are. But usually each value actually has several synonyms. For example, in Unicode binary properties,</source>
          <target state="translated">&lt;a href=&quot;#prop_values()&quot;&gt;prop_values（）&lt;/a&gt;を使用して、指定されたプロパティが制限された値のセットを持つプロパティであるかどうかを確認でき、そうである場合、それらの値は何かを確認できます。ただし、通常、各値には実際には複数の同義語があります。たとえば、Unicodeバイナリプロパティでは、</target>
        </trans-unit>
        <trans-unit id="b53d0563bc5da053955b9d3b7d437fbd188f8795" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://search.cpan.org/perldoc/Number::Format&quot;&gt;Number::Format&lt;/a&gt; to separate places in a number. It handles locale information for those of you who want to insert full stops instead (or anything else that they want to use, really).</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Number::Format&quot;&gt;Number :: Format&lt;/a&gt;を使用して、数字の場所を区切ることができます。代わりにフルストップを挿入したい人（または実際に使用したいもの）のロケール情報を処理します。</target>
        </trans-unit>
        <trans-unit id="49f5dd665c5e9d2b71ecb4caa05c28940c8fc3d9" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://search.cpan.org/perldoc/URI::Find&quot;&gt;URI::Find&lt;/a&gt; to extract URLs from an arbitrary text document.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/URI::Find&quot;&gt;URI :: Find&lt;/a&gt;を使用して、任意のテキストドキュメントからURLを抽出できます。</target>
        </trans-unit>
        <trans-unit id="7fe2956ea1b7c9e1e517ba013b7204dc28c702c8" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;-C0&lt;/b&gt; (or &lt;code&gt;&quot;0&quot;&lt;/code&gt; for &lt;code&gt;PERL_UNICODE&lt;/code&gt; ) to explicitly disable all the above Unicode features.</source>
          <target state="translated">あなたが使用することができます&lt;b&gt;-C0&lt;/b&gt;（または &lt;code&gt;&quot;0&quot;&lt;/code&gt; ため &lt;code&gt;PERL_UNICODE&lt;/code&gt; 明示的に無効にする）すべてのUnicode上記いただけます。</target>
        </trans-unit>
        <trans-unit id="8820cb36e9b0a2ef9812096c3ae47e4337e70f22" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;-w optionname&lt;/code&gt; (without a value) as shorthand for &lt;code&gt;-w optionname:&lt;i&gt;TRUE&lt;/i&gt;&lt;/code&gt;. This is presumably useful in cases of on/off features like: &lt;code&gt;-w page_numbering&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-w optionname&lt;/code&gt; （値なし）を &lt;code&gt;-w optionname:&lt;i&gt;TRUE&lt;/i&gt;&lt;/code&gt; の省略形として使用できます。これはおそらく &lt;code&gt;-w page_numbering&lt;/code&gt; のようなオン/オフ機能の場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b34722383d4a6c958172dfe61f02074274ede7a9" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; without parentheses to locate the end of each input file, in case you want to append to each file, or reset line numbering (see example in &lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;).</source>
          <target state="translated">括弧なしで &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; を使用して、各ファイルに追加したり、行番号をリセットしたりする場合（&lt;a href=&quot;functions/eof&quot;&gt;eofの&lt;/a&gt;例を参照）、各入力ファイルの終わりを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="7509178f0cc142ffa6970d993aa78a311665535a" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; if the columns are separated by whitespace or some other delimiter, as long as whitespace or the delimiter cannot appear as part of the data.</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 列が空白限り、空白や他のいくつかの区切り文字で区切られていたり、区切り文字がデータの一部として表示することができない場合。</target>
        </trans-unit>
        <trans-unit id="207bd81996c41f563d70786505a61f566bf7c9d1" translate="yes" xml:space="preserve">
          <source>You can use Andreas Koenig's CPAN module ( &lt;a href=&quot;http://www.cpan.org/modules/by-module/CPAN&quot;&gt;http://www.cpan.org/modules/by-module/CPAN&lt;/a&gt; ) to automate the following steps, from DECOMPRESS through INSTALL.</source>
          <target state="translated">Andreas KoenigのCPANモジュール（&lt;a href=&quot;http://www.cpan.org/modules/by-module/CPAN&quot;&gt;http://www.cpan.org/modules/by-module/CPAN&lt;/a&gt;）を使用して、DECOMPRESSからINSTALLまでの次の手順を自動化できます。</target>
        </trans-unit>
        <trans-unit id="1a4fa2e9a279c718478efb15dbd58f3963c395b2" translate="yes" xml:space="preserve">
          <source>You can use Perl's somewhat exotic &lt;code&gt;..&lt;/code&gt; operator (documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;):</source>
          <target state="translated">Perlのややエキゾチックな &lt;code&gt;..&lt;/code&gt; 演算子を使用できます（&lt;a href=&quot;perlop&quot;&gt;perlopに&lt;/a&gt;文書化されています）。</target>
        </trans-unit>
        <trans-unit id="0352c7c82515615be31fde318d8a078c0a2c1a97" translate="yes" xml:space="preserve">
          <source>You can use a leading underscore to indicate that a variable or function should not be used outside the package that defined it.</source>
          <target state="translated">変数や関数を定義したパッケージの外で使用してはいけないことを示すために、先頭のアンダースコアを使用することができます。</target>
        </trans-unit>
        <trans-unit id="388231cbd33477282c1e5dc7ff7aa725ad26b114" translate="yes" xml:space="preserve">
          <source>You can use a string as if it were a reference. If you use the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; as an array reference, it's taken to be a reference to the array &lt;code&gt;@foo&lt;/code&gt; . This is called a</source>
          <target state="translated">文字列を参照であるかのように使用できます。文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; を配列参照として使用する場合、それは配列 &lt;code&gt;@foo&lt;/code&gt; への参照と見なされます。これは</target>
        </trans-unit>
        <trans-unit id="adc3bc3485dafe6de0835e8cb890731728d4f233" translate="yes" xml:space="preserve">
          <source>You can use an &quot;=&quot; instead of the &quot;:&quot;, as in: &lt;code&gt;-w textsize=15&lt;/code&gt; . This might be more (or less) convenient, depending on what shell you use.</source>
          <target state="translated">&lt;code&gt;-w textsize=15&lt;/code&gt; のように、「：」の代わりに「=」を使用できます。使用するシェルによっては、これはより便利な場合と便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="659b448e1309e418ec405468f01e562189ac5581" translate="yes" xml:space="preserve">
          <source>You can use an alternative library to drive Math::BigInt. See the section &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;MATH LIBRARY&lt;/a&gt; for more information.</source>
          <target state="translated">代替ライブラリを使用して、Math :: BigIntを駆動できます。詳細については、「&lt;a href=&quot;#MATH-LIBRARY&quot;&gt;数学ライブラリ&lt;/a&gt;」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f7c7a81f2a96d58e5477ffb42832551e4a65a1ae" translate="yes" xml:space="preserve">
          <source>You can use and redistribute this document under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはPerlと同じ条件で使用したり、再配布したりすることができます。</target>
        </trans-unit>
        <trans-unit id="02346143e059d2c6966f5b1da988acae6f664ce7" translate="yes" xml:space="preserve">
          <source>You can use another collation element table if desired.</source>
          <target state="translated">必要に応じて、別の照合要素テーブルを使用することができます。</target>
        </trans-unit>
        <trans-unit id="80ffd7e86ab2f265c3b1b5af5301c88022dfacbd" translate="yes" xml:space="preserve">
          <source>You can use any combination of the methods from none to all four.</source>
          <target state="translated">なしから4つの方法まで、任意の組み合わせで使用することができます。</target>
        </trans-unit>
        <trans-unit id="727cc3b9105721ca57e170521deb86b9cfbaaa16" translate="yes" xml:space="preserve">
          <source>You can use any combination of the methods, from none, to all four.</source>
          <target state="translated">どれも使わない方法から4つすべての方法まで、任意の組み合わせで使用することができます。</target>
        </trans-unit>
        <trans-unit id="6cf084acc213926a976c0b6e7b2d7ff58c8a1c98" translate="yes" xml:space="preserve">
          <source>You can use formatting codes in ordinary paragraphs, for &lt;b&gt;bold&lt;/b&gt;,</source>
          <target state="translated">&lt;b&gt;太字の&lt;/b&gt;場合は、通常の段落でフォーマットコードを使用できます。</target>
        </trans-unit>
        <trans-unit id="7b0f4d35c03dc40ee00f05e56f139894c4c251ca" translate="yes" xml:space="preserve">
          <source>You can use it as follows:</source>
          <target state="translated">以下のような使い方ができます。</target>
        </trans-unit>
        <trans-unit id="cfbc7862683635b53050e53b7defa0eddc13b749" translate="yes" xml:space="preserve">
          <source>You can use more than one source filter on a single file. Similarly, you can reuse the same filter in as many files as you like.</source>
          <target state="translated">1 つのファイルに複数のソースフィルタを使用することができます。同様に、同じフィルターを好きなだけ多くのファイルで再利用することができます。</target>
        </trans-unit>
        <trans-unit id="cb2c65d2dbc0740833a918a76d1bf6977975706a" translate="yes" xml:space="preserve">
          <source>You can use parentheses for functions' arguments or omit them according to your personal taste. They are only required occasionally to clarify issues of precedence.</source>
          <target state="translated">関数の引数には括弧を使用してもよいし、個人的な好みに応じて省略してもよい。括弧は、優先順位の問題を明確にするために時々必要になるだけです。</target>
        </trans-unit>
        <trans-unit id="78045ec633e87e0c82678bcb8abea9b50b38e139" translate="yes" xml:space="preserve">
          <source>You can use that same structure to count the entries any way that you like. If you want the count of the keys with vowels in them, you just test for that instead:</source>
          <target state="translated">同じ構造を使用して、好きな方法でエントリを数えることができます。母音を含むキーの数を数えたい場合は、代わりにそれをテストしてください。</target>
        </trans-unit>
        <trans-unit id="264d904732b18badb8f8af0ee614fe938cb62fd3" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;http://search.cpan.org/perldoc/File::Random&quot;&gt;File::Random&lt;/a&gt; module which provides a function for that algorithm:</source>
          <target state="translated">そのアルゴリズムに関数を提供する&lt;a href=&quot;http://search.cpan.org/perldoc/File::Random&quot;&gt;File :: Random&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="12dc43addaceb3325735b42235a5db7b043fe8e8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ANSIScreen&quot;&gt;Term::ANSIScreen&lt;/a&gt; module to get the special sequence. Import the &lt;code&gt;cls&lt;/code&gt; function (or the &lt;code&gt;:screen&lt;/code&gt; tag):</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Term::ANSIScreen&quot;&gt;Term :: ANSIScreen&lt;/a&gt;モジュールを使用して、特別なシーケンスを取得できます。 &lt;code&gt;cls&lt;/code&gt; 関数（または &lt;code&gt;:screen&lt;/code&gt; タグ）をインポートします。</target>
        </trans-unit>
        <trans-unit id="5e45dc25f4fd438a13c8ce07a9424e43bd367039" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;http://search.cpan.org/perldoc/Time::JulianDay&quot;&gt;Time::JulianDay&lt;/a&gt; module available on CPAN. Ensure that you really want to find a Julian day, though, as many people have different ideas about Julian days (see &lt;a href=&quot;http://www.hermetic.ch/cal_stud/jdn.htm&quot;&gt;http://www.hermetic.ch/cal_stud/jdn.htm&lt;/a&gt; for instance):</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;http://search.cpan.org/perldoc/Time::JulianDay&quot;&gt;タイム::ユリウス通日の&lt;/a&gt; CPANで利用可能なモジュールを。ただし、多くの人がユリウス日について異なる考えを持っているので、本当にユリウス日を見つけたいと思うようにして&lt;a href=&quot;http://www.hermetic.ch/cal_stud/jdn.htm&quot;&gt;ください&lt;/a&gt;（たとえば、http：//www.hermetic.ch/cal_stud/jdn.htmを参照してください）。</target>
        </trans-unit>
        <trans-unit id="ba1788ef1bedfa0514aebf9080742800f7823493" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;time/piece&quot;&gt;Time::Piece&lt;/a&gt; module, part of the Standard Library, which can convert a date/time to a Julian Day:</source>
          <target state="translated">標準ライブラリの一部である&lt;a href=&quot;time/piece&quot;&gt;Time :: Piece&lt;/a&gt;モジュールを使用して、日付/時刻をユリウス日に変換できます。</target>
        </trans-unit>
        <trans-unit id="19bff3f43fe0160ae5712a54b49b7225e08cf437" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; variable to detect if you are currently in the global destruction phase:</source>
          <target state="translated">&lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; 変数を使用して、現在グローバル破壊フェーズにあるかどうかを検出できます。</target>
        </trans-unit>
        <trans-unit id="c3b01f73c25a67d7de0988508e3d6a08d549191f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; keyword to fall through from one case to the next:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; キーワードを使用して、あるケースから次のケースに進むことができます。</target>
        </trans-unit>
        <trans-unit id="0512ec103381f142d5cd53ad55c41fe8a57f36b8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $array[$idx]&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $hash{key}&lt;/code&gt; constructs to delete a composite type entry for the current block and restore it when it ends. They return the array/hash value before the localization, which means that they are respectively equivalent to</source>
          <target state="translated">あなたが使用することができ &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $array[$idx]&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $hash{key}&lt;/code&gt; 現在のブロックのための複合型エントリを削除し、それが終了したときにそれを復元するために構築物。これらはローカライズ前に配列/ハッシュ値を返します。つまり、それぞれ次と同等です。</target>
        </trans-unit>
        <trans-unit id="e75c67446fa3d94c780e921da6acd4affb168a6f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; built-in function in scalar context to find out have many entries you have in a hash:</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; 内蔵の機能スカラコンテキストであなたはハッシュを持っている多くのエントリを持っている見つけるために：</target>
        </trans-unit>
        <trans-unit id="32a43fdc7d4ed02e813e0075b65927b5536f01d4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; functions to reset &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;. To simply reset the iterator used by &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; without doing anything else, use one of them in void context:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 関数を使用して、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; をリセットできます。何もせずに、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 使用するイテレータを単にリセットするには、voidコンテキストでそれらの1つを使用します。</target>
        </trans-unit>
        <trans-unit id="91d95a3ba11b677c44eabfc4c39139686174c03a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;END&lt;/code&gt; block to simulate &lt;code&gt;atexit()&lt;/code&gt; . Each package's &lt;code&gt;END&lt;/code&gt; block is called when the program or thread ends. See the &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; manpage for more details about &lt;code&gt;END&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;code&gt;END&lt;/code&gt; ブロックを使用して &lt;code&gt;atexit()&lt;/code&gt; をシミュレートできます。各パッケージの &lt;code&gt;END&lt;/code&gt; ブロックは、プログラムまたはスレッドが終了すると呼び出されます。 &lt;code&gt;END&lt;/code&gt; ブロックの詳細については、&lt;a href=&quot;perlmod&quot;&gt;perlmodの&lt;/a&gt;マンページを参照してください。</target>
        </trans-unit>
        <trans-unit id="23320d34367d7c8e19c4f3b2648a39107aaceafc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;Text::Soundex&lt;/code&gt; module. If you want to do fuzzy or close matching, you might also try the &lt;a href=&quot;http://search.cpan.org/perldoc/String::Approx&quot;&gt;String::Approx&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Metaphone&quot;&gt;Text::Metaphone&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Text::DoubleMetaphone&quot;&gt;Text::DoubleMetaphone&lt;/a&gt; modules.</source>
          <target state="translated">&lt;code&gt;Text::Soundex&lt;/code&gt; モジュールを使用できます。あなたがあいまいまたは近いマッチングを行いたい場合は、あなたも試してみてください&lt;a href=&quot;http://search.cpan.org/perldoc/String::Approx&quot;&gt;文字列::約&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Text::Metaphone&quot;&gt;テキスト:: Metaphoneの&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Text::DoubleMetaphone&quot;&gt;テキスト:: DoubleMetaphoneというの&lt;/a&gt;モジュールを。</target>
        </trans-unit>
        <trans-unit id="488d88c32abab4c7103bc8a9f7d995aca32467c4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;UNIVERSAL&lt;/code&gt; class (see &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt;). However, please be very careful to consider the consequences of doing this: adding methods to every object is very likely to have unintended consequences. If possible, it would be better to have all your object inherit from some common base class, or to use an object system like Moose that supports roles.</source>
          <target state="translated">&lt;code&gt;UNIVERSAL&lt;/code&gt; クラスを使用できます（&lt;a href=&quot;universal&quot;&gt;UNIVERSALを&lt;/a&gt;参照）。ただし、これを行うことの結果を慎重に検討してください。すべてのオブジェクトにメソッドを追加すると、意図しない結果になる可能性が非常に高くなります。可能であれば、すべてのオブジェクトをいくつかの共通の基本クラスから継承するか、Mooseのようなロールをサポートするオブジェクトシステムを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9e82c1f5d6a6827f8e16779cc47df9c04d7d8adc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;\[]&lt;/code&gt; backslash group notation to specify more than one allowed argument type. For example:</source>
          <target state="translated">&lt;code&gt;\[]&lt;/code&gt; バックスラッシュグループ表記を使用して、許可される引数の型を複数指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="29a5b3337e458ba95bc1ff4b8a89d182c9528c72" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;break&lt;/code&gt; keyword to break out of the enclosing &lt;code&gt;given&lt;/code&gt; block. Every &lt;code&gt;when&lt;/code&gt; block is implicitly ended with a &lt;code&gt;break&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; キーワードを使用して、囲まれた &lt;code&gt;given&lt;/code&gt; ブロックから抜け出すことができます。すべての &lt;code&gt;when&lt;/code&gt; ブロックは暗黙的に &lt;code&gt;break&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="a4e6268ce8a22314d30cc236ac406a7320d8f9ec" translate="yes" xml:space="preserve">
          <source>You can use the Configure script in non-interactive mode too. When I built my</source>
          <target state="translated">非インタラクティブモードでもConfigureスクリプトを使うことができます。私が</target>
        </trans-unit>
        <trans-unit id="a88ac92f15e86bfef2bc330f6e37cbdfaa5d2949" translate="yes" xml:space="preserve">
          <source>You can use the POSIX character class syntax &lt;code&gt;/[[:alpha:]]/&lt;/code&gt; documented in &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlre&quot;&gt;perlreに&lt;/a&gt;記載されているPOSIX文字クラス構文 &lt;code&gt;/[[:alpha:]]/&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e278d58c9ab507fbb7f9453e431896c65ad5fd6f" translate="yes" xml:space="preserve">
          <source>You can use the SDK by exporting some additions to Perl's 'ccflags' and '..flags' config variables:</source>
          <target state="translated">Perl の 'ccflags' と '..flags' の設定変数にいくつかの追加をエクスポートすることで、SDK を使用することができます。</target>
        </trans-unit>
        <trans-unit id="dcba1d434e18427e8484e54d9e14e5566e79c6d1" translate="yes" xml:space="preserve">
          <source>You can use the builtin &lt;code&gt;&lt;a href=&quot;functions/getc&quot;&gt;getc()&lt;/a&gt;&lt;/code&gt; function for most filehandles, but it won't (easily) work on a terminal device. For STDIN, either use the Term::ReadKey module from CPAN or use the sample code in &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;.</source>
          <target state="translated">ほとんどのファイルハンドルに組み込みの &lt;code&gt;&lt;a href=&quot;functions/getc&quot;&gt;getc()&lt;/a&gt;&lt;/code&gt; 関数を使用できますが、ターミナルデバイスでは（簡単に）機能しません。STDINの場合は、CPANのTerm :: ReadKeyモジュールを使用するか、&lt;a href=&quot;functions/getc&quot;&gt;getcの&lt;/a&gt;サンプルコードを使用します。</target>
        </trans-unit>
        <trans-unit id="ad23301638fa59a074f7b5a830adc451b7882aec" translate="yes" xml:space="preserve">
          <source>You can use the debugger's &lt;code&gt;x&lt;/code&gt; command to dump out complex data structures. For example, given the assignment to $AoA above, here's the debugger output:</source>
          <target state="translated">デバッガーの &lt;code&gt;x&lt;/code&gt; コマンドを使用して、複雑なデータ構造をダンプできます。たとえば、上記の$ AoAへの割り当てがある場合、デバッガーの出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c95e7176a4cdb8eb19d859ce523240b91e0d516f" translate="yes" xml:space="preserve">
          <source>You can use the following types of values for allow:</source>
          <target state="translated">allowには以下のタイプの値を使用することができます。</target>
        </trans-unit>
        <trans-unit id="3ce0a691bebd0b371247224bb7f78a55fdff48f0" translate="yes" xml:space="preserve">
          <source>You can use the four-argument form of sysread to continually add to a buffer. After you add to the buffer, you check if you have a complete line (using your regular expression).</source>
          <target state="translated">バッファに継続的に追加するために、sysreadの4つの引数形式を使うことができます。バッファに追加した後、(正規表現を使って)完全な行があるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="da343e9c661b7d9b54a6aef1473ed8a755544823" translate="yes" xml:space="preserve">
          <source>You can use the shareware Winzip ( &lt;a href=&quot;http://www.winzip.com&quot;&gt;http://www.winzip.com&lt;/a&gt; ) to decompress and unpack modules.</source>
          <target state="translated">シェアウェアのWinzip（&lt;a href=&quot;http://www.winzip.com&quot;&gt;http://www.winzip.com&lt;/a&gt;）を使用して、モジュールを解凍および解凍できます。</target>
        </trans-unit>
        <trans-unit id="29131242da6a21b6f2efd67a20aaa973ec754794" translate="yes" xml:space="preserve">
          <source>You can use the substitution operator to find pairs of characters (or runs of characters) and replace them with a single instance. In this substitution, we find a character in &lt;code&gt;(.)&lt;/code&gt;. The memory parentheses store the matched character in the back-reference &lt;code&gt;\g1&lt;/code&gt; and we use that to require that the same thing immediately follow it. We replace that part of the string with the character in &lt;code&gt;$1&lt;/code&gt; .</source>
          <target state="translated">置換演算子を使用して、文字のペア（または文字の連続）を検索し、それらを単一のインスタンスに置き換えることができます。この置換では、 &lt;code&gt;(.)&lt;/code&gt; 文字が見つかります。メモリの括弧は一致した文字を後方参照 &lt;code&gt;\g1&lt;/code&gt; 格納します。これを使用して、直後に同じことを要求します。文字列のその部分を &lt;code&gt;$1&lt;/code&gt; 文字に置き換えます。</target>
        </trans-unit>
        <trans-unit id="b56ec6ea26f22e6bec1d13c6dc597e46c1853d2d" translate="yes" xml:space="preserve">
          <source>You can use the substr() function as an lvalue, in which case EXPR must itself be an lvalue. If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it. To keep the string the same length, you may need to pad or chop your value using &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">substr（）関数を左辺値として使用できます。この場合、EXPR自体は左辺値でなければなりません。LENGTHよりも短いものを割り当てると、文字列は短くなり、LENGTHよりも長いものを割り当てると、文字列はそれに合わせて大きくなります。文字列を同じ長さにするには、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; を使用して値をパディングまたはチョップする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="5696279d1bd6b651a532c13cf176bc61670cde27" translate="yes" xml:space="preserve">
          <source>You can use the substr() function as an lvalue, in which case EXPR must itself be an lvalue. If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it. To keep the string the same length, you may need to pad or chop your value using &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">substr（）関数を左辺値として使用できます。この場合、EXPR自体は左辺値でなければなりません。LENGTHよりも短いものを割り当てると、文字列は短くなり、LENGTHよりも長いものを割り当てると、文字列はそれに合わせて大きくなります。文字列を同じ長さにするには、 &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; を使用して値をパディングまたはチョップする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="cfeed36c7e84bfafbf0ea57f25867379b77f770c" translate="yes" xml:space="preserve">
          <source>You can use the tainted() function of the Scalar::Util module, available from CPAN (or included with Perl since release 5.8.0). See also &lt;a href=&quot;perlsec#Laundering-and-Detecting-Tainted-Data&quot;&gt;Laundering and Detecting Tainted Data in perlsec&lt;/a&gt;.</source>
          <target state="translated">CPANから入手できる（またはリリース5.8.0以降のPerlに含まれている）Scalar :: Utilモジュールのtainted（）関数を使用できます。&lt;a href=&quot;perlsec#Laundering-and-Detecting-Tainted-Data&quot;&gt;perlsecでの汚染データのロンダリングと検出&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="09d2af0acba58841da7d114d861e093a90573f8a" translate="yes" xml:space="preserve">
          <source>You can use these macros if you call code that may croak, but you need to do some cleanup before giving control back to Perl. For example:</source>
          <target state="translated">これらのマクロを使用することができますが、Perl に制御を返す前にクリーンアップを行う必要がある場合には、これらのコードを呼び出すことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8d60246dfc629fa2c767c2383b114af7d8fad4bc" translate="yes" xml:space="preserve">
          <source>You can use this as a shortcut to determine whether &lt;code&gt;Archive::Tar&lt;/code&gt; will do what you think before passing compressed archives to its &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">これをショートカットとして使用して、圧縮されたアーカイブを &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; メソッドに渡す前に、 &lt;code&gt;Archive::Tar&lt;/code&gt; が思い通りに動作するかどうかを判断できます。</target>
        </trans-unit>
        <trans-unit id="a2583bc76f12f41a833e44f457c707f446ecc90f" translate="yes" xml:space="preserve">
          <source>You can use this class as the base class for a Pod formatter/processor.</source>
          <target state="translated">このクラスは、Podフォーマッタ/プロセッサのベースクラスとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="ddc269b809151a32259fd4bfb2f0eaf592a60142" translate="yes" xml:space="preserve">
          <source>You can use this subroutine to get and set the traversal mask for a specific hash. Setting the mask ensures that a given hash will produce the same key order. &lt;b&gt;Note&lt;/b&gt; that this does &lt;b&gt;not&lt;/b&gt; guarantee that &lt;b&gt;two&lt;/b&gt; hashes will produce the same key order for the same hash seed and traversal mask, items that collide into one bucket may have different orders regardless of this setting.</source>
          <target state="translated">このサブルーチンを使用して、特定のハッシュのトラバーサルマスクを取得および設定できます。マスクを設定すると、特定のハッシュが同じキー順序を生成することが保証されます。これは、&lt;b&gt;2つの&lt;/b&gt;ハッシュが同じハッシュシードとトラバーサルマスクに対して同じキーの順序を生成することを保証するものでは&lt;b&gt;ない&lt;/b&gt;ことに&lt;b&gt;注意し&lt;/b&gt;て&lt;b&gt;ください&lt;/b&gt;。1つのバケットに衝突するアイテムは、この設定に関係なく異なる順序になる場合があります。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4e57a6a3e1ac0e576a34f1deb9cbe35e8438d88f" translate="yes" xml:space="preserve">
          <source>You can use this to find out whether two handles refer to the same underlying descriptor:</source>
          <target state="translated">これを使用して、2 つのハンドルが同じ基礎となる記述子を参照しているかどうかを調べることができます。</target>
        </trans-unit>
        <trans-unit id="e2f6df83e5ac1b378170dbde8b31e8b10cee41f6" translate="yes" xml:space="preserve">
          <source>You can use this to print out all the variables in a package, for instance. The standard but antiquated</source>
          <target state="translated">これを使って、例えばパッケージ内のすべての変数を印刷することができます。標準ではありますが、時代遅れの</target>
        </trans-unit>
        <trans-unit id="b6fe2602c37d36cd939b3f2966e9882c1457b54a" translate="yes" xml:space="preserve">
          <source>You can use whitespace and the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator to lay them out more nicely:</source>
          <target state="translated">空白と &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子を使用して、より適切にレイアウトできます。</target>
        </trans-unit>
        <trans-unit id="2a2d95bc6981ab5724b117c21adf2c42ff1324ac" translate="yes" xml:space="preserve">
          <source>You can watch Perl's regular expression engine at work to verify for yourself if Perl is recompiling a regular expression. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re
'debug'&lt;/code&gt; pragma (comes with Perl 5.005 and later) shows the details. With Perls before 5.6, you should see &lt;code&gt;re&lt;/code&gt; reporting that its compiling the regular expression on each iteration. With Perl 5.6 or later, you should only see &lt;code&gt;re&lt;/code&gt; report that for the first iteration.</source>
          <target state="translated">Perlの正規表現エンジンの動作を見て、Perlが正規表現を再コンパイルしているかどうかを確認できます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'debug'&lt;/code&gt; プラグマ（後にはPerl 5.005と付属しています）の詳細を示しています。Perlが5.6より前の場合は、反復ごとに正規表現をコンパイルすることを &lt;code&gt;re&lt;/code&gt; 報告しているはずです。Perl 5.6以降では、最初の反復の &lt;code&gt;re&lt;/code&gt; レポートのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="b95a7534126966a35fdb290a82cc3eb90110d990" translate="yes" xml:space="preserve">
          <source>You can work around the first case by using the fully qualified name (&lt;code&gt;$Package::FOO&lt;/code&gt; ) where you need a local value, or by overriding it by saying &lt;code&gt;*FOO = *Package::FOO&lt;/code&gt; in your script.</source>
          <target state="translated">最初のケースは、ローカル値が必要な完全修飾名（ &lt;code&gt;$Package::FOO&lt;/code&gt; ）を使用するか、スクリプトで &lt;code&gt;*FOO = *Package::FOO&lt;/code&gt; と指定してオーバーライドすることで回避できます。</target>
        </trans-unit>
        <trans-unit id="74896a00006c71879750ed85d659cbff45ee1a05" translate="yes" xml:space="preserve">
          <source>You can write this by hand or generate it with 'make manifest'.</source>
          <target state="translated">これを手書きで書くか、'make manifest'で生成します。</target>
        </trans-unit>
        <trans-unit id="b1c2fce28dbd805f8d7a870a949b6c5834632bf2" translate="yes" xml:space="preserve">
          <source>You can write this more briefly using a grep, which does the same thing.</source>
          <target state="translated">これをもっと簡単に書くと、grepを使っても同じことができます。</target>
        </trans-unit>
        <trans-unit id="abb98a8eca7d1aa69e5a0eb195e9e9713bd18c72" translate="yes" xml:space="preserve">
          <source>You can write your regular expressions just like someone on an ASCII platform would do. But keep in mind that using octal or hex notation to specify a particular code point will give you the character that the EBCDIC code page natively maps to it. (This is also true of all double-quoted strings.) If you want to write portably, just use the &lt;code&gt;\N{U+...}&lt;/code&gt; notation everywhere where you would have used &lt;code&gt;\x{...}&lt;/code&gt; , and don't use octal notation at all.</source>
          <target state="translated">ASCIIプラットフォームの誰かがするように、正規表現を書くことができます。ただし、8進または16進表記を使用して特定のコードポイントを指定すると、EBCDICコードページがネイティブにマッピングする文字が得られることに注意してください。（これはすべての二重引用符で囲まれた文字列にも当てはまります。）移植性のある方法で書き込みたい場合は、 &lt;code&gt;\N{U+...}&lt;/code&gt; 表記を &lt;code&gt;\x{...}&lt;/code&gt; を使用していたすべての場所で使用してください。 8進数表記を使用してください。</target>
        </trans-unit>
        <trans-unit id="62834a834066a3093a80c93ec315493101e7f82e" translate="yes" xml:space="preserve">
          <source>You can't disambiguate that by saying &lt;code&gt;\{1}000&lt;/code&gt; , whereas you can fix it with &lt;code&gt;${1}000&lt;/code&gt;. The operation of interpolation should not be confused with the operation of matching a backreference. Certainly they mean two different things on the</source>
          <target state="translated">&lt;code&gt;\{1}000&lt;/code&gt; と言ってもそれを明確にすることはできませんが、 &lt;code&gt;${1}000&lt;/code&gt; 修正できます。補間の操作は、後方参照を照合する操作と混同しないでください。確かに彼らは2つの異なることを意味します</target>
        </trans-unit>
        <trans-unit id="b18683b4b76072abbee71a6881cdb8bc575df90f" translate="yes" xml:space="preserve">
          <source>You can't have a hash whose values are arrays; hash values can only be scalars. We're stuck with that. But a single reference can refer to an entire array, and references are scalars, so you can have a hash of references to arrays, and it'll act a lot like a hash of arrays, and it'll be just as useful as a hash of arrays.</source>
          <target state="translated">ハッシュの値が配列であるハッシュを持つことはできません。ハッシュ値はスカラ値にしかなりません。しかし、単一の参照は配列全体を参照することができますし、参照はスカラなので、配列への参照のハッシュを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d10d9e535268b6be7a5edad8c961bf0a3eba1a2f" translate="yes" xml:space="preserve">
          <source>You can't prevent people from sending your script bad data. Even if you add some client-side checks, people may disable them or bypass them completely. For instance, someone might use a module such as &lt;a href=&quot;http://search.cpan.org/perldoc/LWP&quot;&gt;LWP&lt;/a&gt; to submit to your web site. If you want to prevent data that try to use SQL injection or other sorts of attacks (and you should want to), you have to not trust any data that enter your program.</source>
          <target state="translated">不正なデータがスクリプトから送信されるのを防ぐことはできません。クライアント側のチェックをいくつか追加しても、人々はそれらを無効にするか完全にバイパスするかもしれません。たとえば、誰かが&lt;a href=&quot;http://search.cpan.org/perldoc/LWP&quot;&gt;LWP&lt;/a&gt;などのモジュールを使用してWebサイトに送信する場合があります。 SQLインジェクションまたは他の種類の攻撃を使用しようとするデータを防止したい場合（そして、必要な場合）、プログラムに入るデータを信頼する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8673b45bcf51a92e5bbd4f8ac4117b4afa807acf" translate="yes" xml:space="preserve">
          <source>You can't produce a tied constant by giving a tied scalar as the value. References to tied variables, however, can be used as constants without any problems.</source>
          <target state="translated">タイドスカラを値として与えても、タイド定数を生成することはできません。しかし、結び付けられた変数への参照は問題なく定数として使用できます。</target>
        </trans-unit>
        <trans-unit id="37d171546c154312737dfd62e998eea96bcef04d" translate="yes" xml:space="preserve">
          <source>You can't store GLOB, FORMLINE, REGEXP, etc.... If you can define semantics for those operations, feel free to enhance Storable so that it can deal with them.</source>
          <target state="translated">GLOB、FORMLINE、REGEXPなどは格納できません。これらの操作のセマンティクスを定義できるのであれば、Storableがそれらの操作に対応できるように自由に拡張してください。</target>
        </trans-unit>
        <trans-unit id="e0c681bde3f10285d1065419cbcfdfe8d15a0638" translate="yes" xml:space="preserve">
          <source>You can't take the address of anything, although a similar operator in Perl is the backslash, which creates a reference.</source>
          <target state="translated">何かのアドレスを取ることはできませんが、Perl の類似した演算子にバックスラッシュがあり、参照を作成します。</target>
        </trans-unit>
        <trans-unit id="3d03f47a54efdf6a567386eabfcea4dcbcebbcab" translate="yes" xml:space="preserve">
          <source>You can't use a reference to an array or hash in quite the same way that you would a real array or hash. For C or C++ programmers unused to distinguishing between arrays and pointers to the same, this can be confusing. If so, just think of it as the difference between a structure and a pointer to a structure.</source>
          <target state="translated">配列やハッシュへの参照は、実際の配列やハッシュと全く同じように使うことはできません。配列とポインタの区別に慣れていないCやC++プログラマーにとっては、これは混乱を招くでしょう。その場合は、構造体と構造体へのポインタの違いと考えてください。</target>
        </trans-unit>
        <trans-unit id="f88b12efd9288b17ac8ba038151b3170bc987f73" translate="yes" xml:space="preserve">
          <source>You can't. Some use the UTF8 flag for this, but that's misuse, and makes well behaved modules like Data::Dumper look bad. The flag is useless for this purpose, because it's off when an 8 bit encoding (by default ISO-8859-1) is used to store the string.</source>
          <target state="translated">できません。このためにUTF8フラグを使っている人もいますが、これは誤用であり、Data::Dumperのような振る舞いの良いモジュールを悪く見せてしまいます。このフラグは、文字列を格納するのに8ビットエンコーディング(デフォルトではISO-8859-1)が使われている場合にはオフになっているので、この目的には意味がありません。</target>
        </trans-unit>
        <trans-unit id="2fd8f1486a5edc4ee6dd1a50f986e5205ada1304" translate="yes" xml:space="preserve">
          <source>You can't. This is because UTF-8 data is stored in bytes just like non-UTF-8 data. The Unicode character 200, (&lt;code&gt;0xC8&lt;/code&gt; for you hex types) capital E with a grave accent, is represented by the two bytes &lt;code&gt;v196.172&lt;/code&gt; . Unfortunately, the non-Unicode string &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(196).chr(172)&lt;/a&gt;&lt;/code&gt; has that byte sequence as well. So you can't tell just by looking -- this is what makes Unicode input an interesting problem.</source>
          <target state="translated">できません。これは、UTF-8データが非UTF-8データと同様にバイト単位で格納されるためです。重大なアクセントのあるUnicode文字200（16進数タイプの場合は &lt;code&gt;0xC8&lt;/code&gt; ）の大文字Eは、2バイト &lt;code&gt;v196.172&lt;/code&gt; で表されます。残念ながら、非Unicode文字列 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(196).chr(172)&lt;/a&gt;&lt;/code&gt; にもそのバイトシーケンスがあります。したがって、見ただけではわかりません。これが、Unicode入力を興味深い問題にしている理由です。</target>
        </trans-unit>
        <trans-unit id="e5a4ed4ed782a30731e5ac82f99a95d222b188b0" translate="yes" xml:space="preserve">
          <source>You can't. You need to imitate the &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; call (see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for sample code) and then have a signal handler for the INT signal that passes the signal on to the subprocess. Or you can check for it:</source>
          <target state="translated">できません。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 呼び出し（サンプルコードについては&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照）を模倣し、シグナルをサブプロセスに渡すINTシグナルのシグナルハンドラーを用意する必要があります。または、それを確認することができます：</target>
        </trans-unit>
        <trans-unit id="969f4cfd26924af3983dcc03e66552409285562e" translate="yes" xml:space="preserve">
          <source>You can, of course, declare separate handlers for these types as well (but you'll need to specify &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt; warnings 'redefine'&lt;/code&gt; to do it quietly):</source>
          <target state="translated">もちろん、これらのタイプに個別のハンドラーを宣言することもできます（ただし、静かに行うには &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt; warnings 'redefine'&lt;/code&gt; しないように指定する必要があります）。</target>
        </trans-unit>
        <trans-unit id="74374dec5e50007a2bb85f4a7c8771f4686fdade" translate="yes" xml:space="preserve">
          <source>You cannot Configure Perl to use long doubles unless you have at least Tru64 V5.0, the long double support simply wasn't functional enough before that. Perl's Configure will override attempts to use the long doubles (you can notice this by Configure finding out that the modfl() function does not work as it should).</source>
          <target state="translated">少なくとも Tru64 V5.0 を持っていない限り、Perl を設定して長いダブルスを使用することはできません。Perl の Configure は長い倍数を使用しようとする試みをオーバーライドします (modfl()関数が本来あるべきように動作しないことを Configure が発見することで、これに気づくことができます)。</target>
        </trans-unit>
        <trans-unit id="d8bdeec288ef204b43d051952afe1296036c485c" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;format_formfeed()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;format_formfeed()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="206c72a8b7cef7a32a6db021ff310a9ca6c22c22" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;format_line_break_characters()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;format_line_break_characters()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be794aed40b9701358348d087034d06f390762c7" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;input_record_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;input_record_separator()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0e9632f1b73e717ca255777fe1c2f39799e45e4a" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;output_field_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;output_field_separator()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9f3ec65172d98e67d60dc40971034bddc7747e9" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;output_record_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;output_record_separator()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9134fa5f451fb01a8e6eeae9f39b7f5a89fc7ce" translate="yes" xml:space="preserve">
          <source>You cannot change the ordering once the database has been created. Thus you must use the same compare function every time you access the database.</source>
          <target state="translated">データベースが作成されると、順序を変更することはできません。したがって、データベースにアクセスするたびに同じ比較関数を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9e33a69a0160e97c284c6f83bf69b3911fb50910" translate="yes" xml:space="preserve">
          <source>You cannot currently get the precision from a specified number, but it is intended that this will be possible in the future, for example using &lt;code&gt;.*2$&lt;/code&gt;:</source>
          <target state="translated">現在、指定した番号からの精度を得ることができないが、将来的に可能になることを意図している、例えば使用 &lt;code&gt;.*2$&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9a19723c24ab74fcf1cad038cc364f2eed15903b" translate="yes" xml:space="preserve">
          <source>You cannot discern from mere inspection which builtins are unary operators (like chop() and chdir()) and which are list operators (like print() and unlink()). (Unless prototyped, user-defined subroutines can &lt;b&gt;only&lt;/b&gt; be list operators, never unary ones.) See &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">ビルトインが単項演算子（chop（）やchdir（）など）であるか、リスト演算子（print（）やunlink（）など）であるかは、単なる検査では識別できません。（プロトタイプ化されたユーザー定義のサブルーチンでない限り、リスト演算子&lt;b&gt;のみで&lt;/b&gt;あり、単項演算子ではありません。）&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;および&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab137c3fb7d6e07844b33eb499911ea797677bd5" translate="yes" xml:space="preserve">
          <source>You cannot easily tie a multilevel data structure (such as a hash of hashes) to a dbm file. The first problem is that all but GDBM and Berkeley DB have size limitations, but beyond that, you also have problems with how references are to be represented on disk. One experimental module that does partially attempt to address this need is the MLDBM module. Check your nearest CPAN site as described in &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for source code to MLDBM.</source>
          <target state="translated">マルチレベルのデータ構造（ハッシュのハッシュなど）をdbmファイルに簡単に関連付けることはできません。最初の問題は、GDBMとBerkeley DBを除くすべてにサイズ制限があることですが、それを超えると、参照がディスク上でどのように表現されるかにも問題があります。このニーズに部分的に対処しようとする実験的なモジュールの1つがMLDBMモジュールです。MLDBMへのソースコードについては、&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;で説明されているように、最寄りのCPANサイトを確認してください。</target>
        </trans-unit>
        <trans-unit id="38213a95a75072574eb5ab9364f983653ee56ffc" translate="yes" xml:space="preserve">
          <source>You cannot easily tie a multilevel data structure (such as a hash of hashes) to a dbm file. The first problem is that all but GDBM and Berkeley DB have size limitations, but beyond that, you also have problems with how references are to be represented on disk. One module that does attempt to address this need is DBM::Deep. Check your nearest CPAN site as described in &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for source code. Note that despite its name, DBM::Deep does not use dbm. Another earlier attempt at solving the problem is MLDBM, which is also available on the CPAN, but which has some fairly serious limitations.</source>
          <target state="translated">マルチレベルのデータ構造（ハッシュのハッシュなど）をdbmファイルに簡単に関連付けることはできません。最初の問題は、GDBMとBerkeley DBを除くすべてにサイズ制限があることですが、それを超えると、参照がディスク上でどのように表現されるかにも問題があります。このニーズに対処しようとする1つのモジュールは、DBM :: Deepです。ソースコードについては、&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;で説明されているように、最寄りのCPANサイトを確認してください。その名前にもかかわらず、DBM :: Deepはdbmを使用しないことに注意してください。問題を解決するための以前の別の試みはMLDBMです。これはCPANでも利用できますが、かなり深刻な制限があります。</target>
        </trans-unit>
        <trans-unit id="54808a204fe862b1dfa25e752a892b2a04ab63bf" translate="yes" xml:space="preserve">
          <source>You cannot get stack frame information or in any fashion debug functions that were not compiled by Perl, such as those from C or C++ extensions.</source>
          <target state="translated">C や C++の拡張機能など、Perl でコンパイルされていない関数のスタックフレーム情報やデバッグ関数を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="b370a3f9299c4f8abb35adc5b9b2b86568a00bc8" translate="yes" xml:space="preserve">
          <source>You cannot lock the individual elements of a container variable:</source>
          <target state="translated">コンテナ変数の個々の要素をロックすることはできません。</target>
        </trans-unit>
        <trans-unit id="f2b8b7a26c050e538a292ea22f61da0581625210" translate="yes" xml:space="preserve">
          <source>You cannot portably &quot;stack&quot; cpp directives. For example in the above you need two separate BURGLE() #defines, one for each #ifdef branch.</source>
          <target state="translated">cpp ディレクティブを移植的に &quot;スタック&quot; することはできません。例えば、上の例では、2つのBURGLE()#defineが必要です。</target>
        </trans-unit>
        <trans-unit id="b918f134e01ab04a493d865bacd0ad2555d6eed0" translate="yes" xml:space="preserve">
          <source>You cannot set $RS to a pattern, only a string.</source>
          <target state="translated">RS をパターンに設定することはできません。</target>
        </trans-unit>
        <trans-unit id="891970fccef081510b98291902ea82121168e7ae" translate="yes" xml:space="preserve">
          <source>You cannot tie this routine directly to an option, e.g.:</source>
          <target state="translated">このルーチンをオプションに直接結びつけることはできません。</target>
        </trans-unit>
        <trans-unit id="2d9b5eae243979aa930fce2644c85c94e98e03e5" translate="yes" xml:space="preserve">
          <source>You cannot use &lt;b&gt;-i&lt;/b&gt; to create directories or to strip extensions from files.</source>
          <target state="translated">&lt;b&gt;-i&lt;/b&gt;を使用してディレクトリを作成したり、ファイルから拡張子を取り除くことはできません。</target>
        </trans-unit>
        <trans-unit id="3d40633e0023663f60f6c6868c36efce9e85c50a" translate="yes" xml:space="preserve">
          <source>You compare the sort keys using a binary comparison and get the result of the comparison of the strings using UCA.</source>
          <target state="translated">ソートキーを二値比較で比較し、UCAを使って文字列を比較した結果を取得します。</target>
        </trans-unit>
        <trans-unit id="794fe9a7963db4b15645c3e75175ca30a42e7c02" translate="yes" xml:space="preserve">
          <source>You could also exclude &lt;code&gt;LC_NUMERIC&lt;/code&gt; , if you don't need it, by</source>
          <target state="translated">&lt;code&gt;LC_NUMERIC&lt;/code&gt; を除外することもできます（不要な場合）。</target>
        </trans-unit>
        <trans-unit id="63946de92748533808fd29d4342bd54a0ec7a953" translate="yes" xml:space="preserve">
          <source>You could also have used the existing block property names:</source>
          <target state="translated">既存のブロックプロパティ名を使用することもできました。</target>
        </trans-unit>
        <trans-unit id="eaa54d59d0ed5e55dbc530f16d131415959a1711" translate="yes" xml:space="preserve">
          <source>You could also investigate the can() method in the UNIVERSAL class (part of the standard perl distribution).</source>
          <target state="translated">また、UNIVERSAL クラス (標準 perl ディストリビューションの一部)の can()メソッドを調査することもできます。</target>
        </trans-unit>
        <trans-unit id="802dff37470d190b2a864a13c708bc5907b98d91" translate="yes" xml:space="preserve">
          <source>You could also just know all the perl errors, and although there are some people who may know all of them, you probably don't. However, they all should be in the &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; manpage. If you don't find the error in there, it probably isn't a perl error.</source>
          <target state="translated">また、すべてのperlエラーを知ることもできます。すべてのエラーを知っている人もいますが、あなたは知らないかもしれません。ただし、これらはすべて&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;マンページにあるはずです。そこにエラーが見つからない場合、それはおそらくperlエラーではありません。</target>
        </trans-unit>
        <trans-unit id="80d2dd3ba7c4c2069cf58261b6aaeb6dcd467d24" translate="yes" xml:space="preserve">
          <source>You could also write a single get/set method using an optional argument:</source>
          <target state="translated">オプションの引数を使って、単一のget/setメソッドを書くこともできます。</target>
        </trans-unit>
        <trans-unit id="8444b9fc7a3ed8d2fa7659ffde996510ee7f1f46" translate="yes" xml:space="preserve">
          <source>You could build a web site using &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt; and your own code, but for anything other than a very basic web site, using a web framework (that uses &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;) is a better option.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;と独自のコードを使用してWebサイトを構築できますが、非常に基本的なWebサイト以外の場合は、（&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;を使用する）Webフレームワークを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2158ae7a8b9ea3f34a07fb0e90c3b98892665dc8" translate="yes" xml:space="preserve">
          <source>You could conceivably do both.</source>
          <target state="translated">両方できるかもしれない</target>
        </trans-unit>
        <trans-unit id="49073618f97078f446e251732bebc1a46a9b86b9" translate="yes" xml:space="preserve">
          <source>You could do the memoization yourself, by rewriting the function, like this:</source>
          <target state="translated">こんな感じで関数を書き換えれば、自分でメモ書きをすることができます。</target>
        </trans-unit>
        <trans-unit id="a8bc28868b949ea5a73ffcd10a5a6d7af5c6ab02" translate="yes" xml:space="preserve">
          <source>You could do this:</source>
          <target state="translated">こんなこともできるんですね。</target>
        </trans-unit>
        <trans-unit id="9e128ecfca5b0e265baad327ad431d782e5e7ffc" translate="yes" xml:space="preserve">
          <source>You could edit that header yourself to remove that last '/', or you might note that Language Environment (LE) APAR PQ39997 describes the problem and PTF's UQ46272 and UQ46271 are the (R8 at least) fixes and apply them. If left unattended that syntax error will turn up as an inability for Perl to build its &quot;Socket&quot; extension.</source>
          <target state="translated">あるいは、言語環境 (LE)APAR PQ39997 に問題が記述されていて、 PTF の UQ46272 と UQ46271 が (少なくとも R8 の)修正プログラムであることに注意して、それらを適用することができるかもしれません。この構文エラーを放置しておくと、Perl が &quot;Socket&quot; 拡張モジュールをビルドできないことが判明します。</target>
        </trans-unit>
        <trans-unit id="3e7ad6be7d9fb2b01433fa3be5444bc3be8a1d7d" translate="yes" xml:space="preserve">
          <source>You could instead do lookups on $wanted with:</source>
          <target state="translated">代わりに $wanted で検索することができます。</target>
        </trans-unit>
        <trans-unit id="457f8e624ad1da28bfb9cf34b1f79dc6623d16da" translate="yes" xml:space="preserve">
          <source>You could just store all your dates as a number and then subtract. Life isn't always that simple though.</source>
          <target state="translated">すべての日付を数字として保存してから引き算することができます。人生はいつもそんな単純なものではありません。</target>
        </trans-unit>
        <trans-unit id="c19f6ab6291cf9eaf2e211ed563b35ea9ac437b5" translate="yes" xml:space="preserve">
          <source>You could open the document in a web browser, and change the character set or character encoding until you can visually confirm that all characters look the way they should.</source>
          <target state="translated">Web ブラウザでドキュメントを開き、すべての文字が本来あるべき姿に見えることを目視で確認できるようになるまで、文字セットや文字エンコーディングを変更することができます。</target>
        </trans-unit>
        <trans-unit id="2a20c232c667e613d02f2b4874878f40bc6c28f2" translate="yes" xml:space="preserve">
          <source>You could write the last two using the &lt;code&gt;-u&lt;/code&gt; and &lt;code&gt;-d&lt;/code&gt; operators. Commonly available &lt;code&gt;S_IF*&lt;/code&gt; constants are:</source>
          <target state="translated">最後の2つは、 &lt;code&gt;-u&lt;/code&gt; および &lt;code&gt;-d&lt;/code&gt; 演算子を使用して記述できます。一般的に利用可能な &lt;code&gt;S_IF*&lt;/code&gt; 定数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2516f9cbf3f3333565923611bf8e4c6225451c64" translate="yes" xml:space="preserve">
          <source>You create the queue with &lt;code&gt;Thread::Queue-&amp;gt;new()&lt;/code&gt; . Then you can add lists of scalars onto the end with &lt;code&gt;enqueue()&lt;/code&gt; , and pop scalars off the front of it with &lt;code&gt;dequeue()&lt;/code&gt; . A queue has no fixed size, and can grow as needed to hold everything pushed on to it.</source>
          <target state="translated">キューは &lt;code&gt;Thread::Queue-&amp;gt;new()&lt;/code&gt; 作成します。次に、 &lt;code&gt;enqueue()&lt;/code&gt; を使用してスカラーのリストを最後に追加し、 &lt;code&gt;dequeue()&lt;/code&gt; を使用してスカラーの先頭からポップします。キューには固定サイズがなく、プッシュされたすべてを保持するために必要に応じて拡張できます。</target>
        </trans-unit>
        <trans-unit id="dede4110b8ccb447bd7101130015f76cda530da1" translate="yes" xml:space="preserve">
          <source>You currently don't need to instantiate a factory in order to use it.</source>
          <target state="translated">現在のところ、ファクトリーを使用するためにインスタンス化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="94aa24e74566493da77121fdf1cf79a43455f271" translate="yes" xml:space="preserve">
          <source>You did not run &lt;code&gt;omflibs&lt;/code&gt; . See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;omflibs&lt;/code&gt; を実行していません。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="351e72fc696e530c4b98b81dced35a153aee9b73" translate="yes" xml:space="preserve">
          <source>You did try the &lt;b&gt;-w&lt;/b&gt; switch, didn't you?</source>
          <target state="translated">&lt;b&gt;-w&lt;/b&gt;スイッチを試しましたか？</target>
        </trans-unit>
        <trans-unit id="88ae653a2469feaccaacebc0c4775e33fd1da464" translate="yes" xml:space="preserve">
          <source>You do need to be careful with the logical names representing process-permanent files, such as &lt;code&gt;SYS$INPUT&lt;/code&gt; and &lt;code&gt;SYS$OUTPUT&lt;/code&gt; . The translations for these logical names are prepended with a two-byte binary value (0x1B 0x00) that needs to be stripped off if you want to use it. (In previous versions of Perl it wasn't possible to get the values of these logical names, as the null byte acted as an end-of-string marker)</source>
          <target state="translated">&lt;code&gt;SYS$INPUT&lt;/code&gt; や &lt;code&gt;SYS$OUTPUT&lt;/code&gt; などのプロセス永続ファイルを表す論理名には注意する必要があります。これらの論理名の変換には、2バイトのバイナリ値（0x1B 0x00）が前に付加されます。これを使用する場合は、削除する必要があります。（以前のバージョンのPerlでは、nullバイトが文字列の終わりマーカーとして機能していたため、これらの論理名の値を取得することはできませんでした）</target>
        </trans-unit>
        <trans-unit id="058b0924bf8d4ec16b563bbf0577363645a7bf62" translate="yes" xml:space="preserve">
          <source>You do not call &lt;code&gt;setlogsock&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;setlogsock&lt;/code&gt; を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="0688f744612cb917b09a1848a221dbc87e7927a1" translate="yes" xml:space="preserve">
          <source>You do not have MT-safe</source>
          <target state="translated">MTセーフを持っていない</target>
        </trans-unit>
        <trans-unit id="2e1ca2f68a9ba2ef298384c1d65396bc3e584c1e" translate="yes" xml:space="preserve">
          <source>You do not have to override methods shown below unless you have to.</source>
          <target state="translated">以下に示すメソッドは、必要がない限りオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="d463f5c40ea27790902d715d5582fd331f2a8862" translate="yes" xml:space="preserve">
          <source>You do this by using &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; and replacing your &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;s with &lt;code&gt;carp&lt;/code&gt; s. If you need to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, say &lt;code&gt;croak&lt;/code&gt; instead. However, keep &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in place for your sanity checks - where it really is your module at fault.</source>
          <target state="translated">これを行うには、&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;を使用して &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;carp&lt;/code&gt; に置き換えます。 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 必要がある場合は、代わりに &lt;code&gt;croak&lt;/code&gt; と言ってください。ただし、健全性チェックのために &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 状態を維持します。これは、実際に障害のあるモジュールです。</target>
        </trans-unit>
        <trans-unit id="005e9bdc4a22cadca7bbf603665f85ba87cfef2b" translate="yes" xml:space="preserve">
          <source>You don't actually</source>
          <target state="translated">あなたは実際には</target>
        </trans-unit>
        <trans-unit id="27b09323fd0303316a1e04f47208b954d9880846" translate="yes" xml:space="preserve">
          <source>You don't actually &quot;trap&quot; a control character. Instead, that character generates a signal which is sent to your terminal's currently foregrounded process group, which you then trap in your process. Signals are documented in &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; and the section on &quot;Signals&quot; in the Camel.</source>
          <target state="translated">実際には制御文字を「トラップ」するわけではありません。代わりに、その文字は、端末の現在フォアグラウンドのプロセスグループに送信される信号を生成し、それをプロセスにトラップします。シグナルは&lt;a href=&quot;perlipc#Signals&quot;&gt;、Perlipcのシグナル&lt;/a&gt;とラクダの「シグナル」のセクションに記載されています。</target>
        </trans-unit>
        <trans-unit id="9b1e2e036145d009e379c1e58f4e8404e4bb7c5f" translate="yes" xml:space="preserve">
          <source>You don't have to check for &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on the return from &lt;code&gt;&lt;a href=&quot;fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt;. Like &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;, it maps a &lt;code&gt;0&lt;/code&gt; return from the system call into &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; in Perl. This string is true in boolean context and &lt;code&gt;0&lt;/code&gt; in numeric context. It is also exempt from the normal &lt;b&gt;-w&lt;/b&gt; warnings on improper numeric conversions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt; からの戻りで &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; を確認する必要はありません。 &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; と同様に、Perl &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; システムコールからの &lt;code&gt;0&lt;/code&gt; の戻りを「0 but true」にマッピングします。この文字列は、ブールコンテキストではtrue 、数値コンテキストでは &lt;code&gt;0&lt;/code&gt; です。また、不適切な数値変換に関する通常の&lt;b&gt;-w&lt;/b&gt;警告も免除されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="91e28b8dde4eef2778828dc13bbb504ddd8429b3" translate="yes" xml:space="preserve">
          <source>You don't have to check for &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on the return from &lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt;. Like &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;, it maps a &lt;code&gt;0&lt;/code&gt; return from the system call into &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; in Perl. This string is true in boolean context and &lt;code&gt;0&lt;/code&gt; in numeric context. It is also exempt from the normal &lt;b&gt;-w&lt;/b&gt; warnings on improper numeric conversions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt; からの戻りで &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; を確認する必要はありません。 &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; と同様に、Perl &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; システムコールからの &lt;code&gt;0&lt;/code&gt; の戻りを「0 but true」にマッピングします。この文字列は、ブールコンテキストではtrue 、数値コンテキストでは &lt;code&gt;0&lt;/code&gt; です。また、不適切な数値変換に関する通常の&lt;b&gt;-w&lt;/b&gt;警告も免除されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3317a455934bcb4f5310b2ce1e13684a7b6884c6" translate="yes" xml:space="preserve">
          <source>You don't have to close FILEHANDLE if you are immediately going to do another &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; on it, because &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; closes it for you. (See &lt;a href=&quot;#open-FILEHANDLE&quot;&gt;open&lt;/a&gt;.) However, an explicit &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on an input file resets the line counter (&lt;code&gt;$.&lt;/code&gt; ), while the implicit close done by &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; does not.</source>
          <target state="translated">あなたはすぐに別のやろうとしている場合は、近いFILEHANDLEする必要はありません &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ているため、それを &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、あなたのために閉じて。（&lt;a href=&quot;#open-FILEHANDLE&quot;&gt;openを&lt;/a&gt;参照してください。）ただし、入力ファイルを明示的に &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; と、行カウンター（ &lt;code&gt;$.&lt;/code&gt; ）がリセットされ &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; が、openによって行われる暗黙的なクローズはリセットされません。</target>
        </trans-unit>
        <trans-unit id="d144697260e1beed6903444902a55fc7aceb423c" translate="yes" xml:space="preserve">
          <source>You don't have to close FILEHANDLE if you are immediately going to do another &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; on it, because &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; closes it for you. (See &lt;a href=&quot;#open-FILEHANDLE&quot;&gt;open&lt;/a&gt;.) However, an explicit &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on an input file resets the line counter (&lt;code&gt;$.&lt;/code&gt; ), while the implicit close done by &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; does not.</source>
          <target state="translated">あなたはすぐに別のやろうとしている場合は、近いFILEHANDLEする必要はありません &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ているため、それを &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、あなたのために閉じて。（&lt;a href=&quot;#open-FILEHANDLE&quot;&gt;openを&lt;/a&gt;参照してください。）ただし、入力ファイルを明示的に &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; と、行カウンター（ &lt;code&gt;$.&lt;/code&gt; ）がリセットされ &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; が、openによって行われる暗黙的なクローズはリセットされません。</target>
        </trans-unit>
        <trans-unit id="ada37b6245f195e4fcd7aa6724d9b314782b9989" translate="yes" xml:space="preserve">
          <source>You don't have to do anything new in your extension to get this; since the Perl library provides Perl_get_context(), it will all just work.</source>
          <target state="translated">Perl ライブラリは Perl_get_context()を提供しているので、これを得るために拡張機能で何か新しいことをする必要はありません。</target>
        </trans-unit>
        <trans-unit id="0afa6281a85d9c8f0451db68d3408cd7d6bba6a9" translate="yes" xml:space="preserve">
          <source>You don't have to do this all on the command line, though, there are a few GUI options out there. The nice thing about these is you can wave a mouse over a variable and a dump of its data will appear in an appropriate window, or in a popup balloon, no more tiresome typing of 'x $varname' :-)</source>
          <target state="translated">コマンドラインですべてを行う必要はありませんが、いくつかのGUIオプションがあります。これらの良いところは、変数の上でマウスを振ると、そのデータのダンプが適切なウィンドウに表示されるか、ポップアップバルーンに表示され、'x $varname' と入力するのが面倒でなくなることです :-)</target>
        </trans-unit>
        <trans-unit id="bc3f5455b30ee7863f96aa530c94393c0cafca20" translate="yes" xml:space="preserve">
          <source>You don't have to enclose POSIX class names inside double brackets, hence both of the following work:</source>
          <target state="translated">POSIXクラス名を二重括弧で囲む必要はありません。</target>
        </trans-unit>
        <trans-unit id="229ae092ed53a2ce77c4892afb43389969fbd9bc" translate="yes" xml:space="preserve">
          <source>You don't have to use \b to match words though. You can look for non-word characters surrounded by word characters. These strings match the pattern /\b'\b/.</source>
          <target state="translated">b」を使わなくてもいいんだよ。単語に囲まれた単語以外の文字列を探すことができるんだ。これらの文字列は、/\b'\b/のパターンと一致します。</target>
        </trans-unit>
        <trans-unit id="21cad750fa1f143b35b4124baa7518d27d8319c9" translate="yes" xml:space="preserve">
          <source>You don't have to worry about finding or paying for Perl; it's freely available and several popular operating systems come with Perl. Community support in places such as Perlmonks ( &lt;a href=&quot;http://www.perlmonks.com&quot;&gt;http://www.perlmonks.com&lt;/a&gt; ) and the various Perl mailing lists ( &lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt; ) means that you can usually get quick answers to your problems.</source>
          <target state="translated">Perlの検索や支払いについて心配する必要はありません。それは自由に利用でき、人気のあるいくつかのオペレーティングシステムにはPerlが付属しています。Perlmonks（&lt;a href=&quot;http://www.perlmonks.com&quot;&gt;http://www.perlmonks.com&lt;/a&gt;）やさまざまなPerlメーリングリスト（&lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt;）などの場所でのコミュニティサポートにより、通常は問題に対する迅速な回答を得ることができます。</target>
        </trans-unit>
        <trans-unit id="8365eeff3d04c895cb1076cf6e1217da1d00d04f" translate="yes" xml:space="preserve">
          <source>You don't just have to match on fixed strings. In fact, you can match on just about anything you could dream of by using more complex regular expressions. These are documented at great length in &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;, but for the meantime, here's a quick cheat sheet:</source>
          <target state="translated">固定文字列で一致する必要はありません。実際、より複雑な正規表現を使用することで、夢に見たあらゆるものと一致させることができます。これらは&lt;a href=&quot;perlre&quot;&gt;perlreに詳細に記載&lt;/a&gt;されていますが、それまでの間、クイックチートシートを次に示します。</target>
        </trans-unit>
        <trans-unit id="6fa3f4f65b9497a1fe4774a26aaf551f58ec3c5f" translate="yes" xml:space="preserve">
          <source>You don't need to have /usr/ucb/ in your PATH to build perl. If you want /usr/ucb/ in your PATH anyway, make sure that /usr/ucb/ is NOT in your PATH before the directory containing the right C compiler.</source>
          <target state="translated">perl をビルドするのに /usr/ucb/が PATH にある必要はありません。もし /usr/ucb/を PATH に入れたいのであれば、正しい C コンパイラのあるディレクトリの前に /usr/ucb/がないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="e40dd09143f7def3dc81d2ff9344d2600d1d1ae7" translate="yes" xml:space="preserve">
          <source>You don't really have to count them yourself, though, since Perl already does that with the &lt;code&gt;$.&lt;/code&gt; variable, which is the current line number from the last filehandle read:</source>
          <target state="translated">ただし、Perlはすでに &lt;code&gt;$.&lt;/code&gt; しているため、自分で数える必要はありません。変数。これは、最後に読み取られたファイルハンドルからの現在の行番号です。</target>
        </trans-unit>
        <trans-unit id="b24e0508e2da733e0f794e663fee88bb39a1e25a" translate="yes" xml:space="preserve">
          <source>You don't skip tests which are failing because there's a bug in your program, or for which you don't yet have code written. For that you use TODO. Read on.</source>
          <target state="translated">プログラムにバグがあるために失敗しているテストや、まだコードが書かれていないテストをスキップすることはありません。そのためにTODOを使います。続きを読んでください。</target>
        </trans-unit>
        <trans-unit id="710a0707d7d6991623d26d4226d9c4d860f3f7d5" translate="yes" xml:space="preserve">
          <source>You forgot to check &lt;code&gt;$?&lt;/code&gt; to see whether the program even ran correctly. Even if you wrote</source>
          <target state="translated">&lt;code&gt;$?&lt;/code&gt; をチェックするのを忘れましたか？プログラムが正しく実行されたかどうかを確認します。書いても</target>
        </trans-unit>
        <trans-unit id="fc90d9f18467dae7f984c44b04f6fed62e49d3b4" translate="yes" xml:space="preserve">
          <source>You get two references to the same array. If you modify &lt;code&gt;$aref1-&amp;gt;[23]&lt;/code&gt; and then look at &lt;code&gt;$aref2-&amp;gt;[23]&lt;/code&gt; you'll see the change.</source>
          <target state="translated">同じ配列への2つの参照を取得します。あなたが変更する場合 &lt;code&gt;$aref1-&amp;gt;[23]&lt;/code&gt; 、その後を見て &lt;code&gt;$aref2-&amp;gt;[23]&lt;/code&gt; あなたは、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="d8e5e5638bed24bad2d4ab312bfe1360cb8707ce" translate="yes" xml:space="preserve">
          <source>You have a data file that expresses greetings in different languages. Its format is &quot;[language tag]=[how to say 'Hello']&quot;, like:</source>
          <target state="translated">挨拶を異なる言語で表現したデータファイルがあります。フォーマットは「[言語タグ]=[How to say 'Hello']」のようになっています。</target>
        </trans-unit>
        <trans-unit id="afbb6b8d64f8b4b3f378ab57026bdb8753122fdc" translate="yes" xml:space="preserve">
          <source>You have a piece of data on which many different operations are applied.</source>
          <target state="translated">多くの異なる操作が適用されているデータを持っています。</target>
        </trans-unit>
        <trans-unit id="f8eed8b91591afe605349a4edd81010c1b4133d5" translate="yes" xml:space="preserve">
          <source>You have a very old pdksh. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">非常に古いpdkshがあります。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0763fc81d3cd7a4189100a79a22596558a167896" translate="yes" xml:space="preserve">
          <source>You have an older version of</source>
          <target state="translated">の古いバージョンをお持ちの方は</target>
        </trans-unit>
        <trans-unit id="72b9024251b30a14c45724d6bbd90abab3f232a3" translate="yes" xml:space="preserve">
          <source>You have been warned already in &lt;a href=&quot;#Selecting-What-to-Export&quot;&gt;Selecting What to Export&lt;/a&gt; to not export:</source>
          <target state="translated">&lt;a href=&quot;#Selecting-What-to-Export&quot;&gt;エクスポート&lt;/a&gt;しないものを選択するですでに警告されています：</target>
        </trans-unit>
        <trans-unit id="43dfe62727996603d47468da8d91c958abc24b74" translate="yes" xml:space="preserve">
          <source>You have created an XSUB interface to an application's C API.</source>
          <target state="translated">アプリケーションのC APIへのXSUBインターフェースを作成しました。</target>
        </trans-unit>
        <trans-unit id="c236e9b8bd9523c45d8e12fd36ee9331405ecbff" translate="yes" xml:space="preserve">
          <source>You have defined an END handler for an attribute that is being applied to a lexical variable. Since the variable may not be available during END this won't happen.</source>
          <target state="translated">辞書変数に適用されている属性のENDハンドラを定義しました。ENDの間、変数は利用できないかもしれないので、これは起こらないでしょう。</target>
        </trans-unit>
        <trans-unit id="717f15e5bfd4a04630296d7e18d1dc4a8563c670" translate="yes" xml:space="preserve">
          <source>You have set the &lt;code&gt;WindowBits&lt;/code&gt; parameter to &lt;code&gt;-MAX_WBITS&lt;/code&gt; in the constructor for this object, i.e. you are uncompressing a raw deflated data stream (RFC 1951).</source>
          <target state="translated">あなたが設定した &lt;code&gt;WindowBits&lt;/code&gt; のにパラメータ &lt;code&gt;-MAX_WBITS&lt;/code&gt; をこのオブジェクトのコンストラクタで、つまりあなたは、生の収縮したデータストリーム（RFC 1951）を解凍しています。</target>
        </trans-unit>
        <trans-unit id="522d08a79de6280adc20232939d047a4cc891b57" translate="yes" xml:space="preserve">
          <source>You have the choice to set the config variable &lt;code&gt;scan_cache&lt;/code&gt; to &lt;code&gt;never&lt;/code&gt; . Then you must clean it up yourself. The other possible values, &lt;code&gt;atstart&lt;/code&gt; and &lt;code&gt;atexit&lt;/code&gt; clean up the build directory when you start (or more precisely, after the first extraction into the build directory) or exit the CPAN shell, respectively. If you never start up the CPAN shell, you probably also have to clean up the build directory yourself.</source>
          <target state="translated">設定変数 &lt;code&gt;scan_cache&lt;/code&gt; を &lt;code&gt;never&lt;/code&gt; に設定することもできます。次に、自分でクリーンアップする必要があります。他の可能な値である &lt;code&gt;atstart&lt;/code&gt; と &lt;code&gt;atexit&lt;/code&gt; は、開始時（またはより正確には、最初のビルドディレクトリへの抽出後）またはCPANシェルを終了するときに、それぞれビルドディレクトリをクリーンアップします。CPANシェルを起動しない場合は、ビルドディレクトリも自分でクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="b2deb6a8cd98a82f2aaaef2ec6bec5741ef832ea" translate="yes" xml:space="preserve">
          <source>You have the same problem with &lt;a href=&quot;time/local&quot;&gt;Time::Local&lt;/a&gt;, which will give the wrong answer for those same special cases:</source>
          <target state="translated">&lt;a href=&quot;time/local&quot;&gt;Time :: Local&lt;/a&gt;にも同じ問題があり、同じ特殊な場合に間違った答えが返されます。</target>
        </trans-unit>
        <trans-unit id="d93e439cde6acc82e52bf85fad48553b810a706b" translate="yes" xml:space="preserve">
          <source>You have to be prepared to &quot;reap&quot; the child process when it finishes.</source>
          <target state="translated">子どものプロセスが終わったときに「刈り取る」ということを覚悟しなければなりません。</target>
        </trans-unit>
        <trans-unit id="7bc9963f1adfa43aa2eba732c53b836ac12c4562" translate="yes" xml:space="preserve">
          <source>You have to decide whether you want to use string or numeric comparisons.</source>
          <target state="translated">文字列比較と数値比較のどちらを使用するかを決めなければなりません。</target>
        </trans-unit>
        <trans-unit id="4cf51b08c425e59c5631231a092f6037897d07c7" translate="yes" xml:space="preserve">
          <source>You have to decide whether your array has numeric or string indices.</source>
          <target state="translated">配列のインデックスが数値か文字列かを決めなければなりません。</target>
        </trans-unit>
        <trans-unit id="a73461591d1d0c0412d08a5e1e1cc7e69b28c7fe" translate="yes" xml:space="preserve">
          <source>You have to have Pod::Simple::RTF installed (from the Pod::Simple dist), or this module won't work.</source>
          <target state="translated">Pod::Simple::RTFがインストールされていないと(Pod::Simple distから)、このモジュールは動作しません。</target>
        </trans-unit>
        <trans-unit id="58b51a173ef28ef95718c75aa4bacf0fb0ef7258" translate="yes" xml:space="preserve">
          <source>You have to have installed Pod::Simple::XMLOutStream (from the Pod::Simple dist), or this class won't work.</source>
          <target state="translated">Pod::Simple::XMLOutStreamを(Pod::Simple distから)インストールしていないと、このクラスは動作しません。</target>
        </trans-unit>
        <trans-unit id="f9f9dbede53dcc87c8a6c2c35d9ae17a92119e03" translate="yes" xml:space="preserve">
          <source>You have to have installed Tk::Pod first, or this class won't load.</source>
          <target state="translated">最初にTk::Podをインストールしておかないと、このクラスは読み込まれません。</target>
        </trans-unit>
        <trans-unit id="95bfc19d25cce1034c6f167e8df494025bec3f1c" translate="yes" xml:space="preserve">
          <source>You have to have two hex digits after a braceless &lt;code&gt;\x&lt;/code&gt; (use a leading zero to make two). These restrictions are to lower the incidence of typos causing the class to not match what you thought it would.</source>
          <target state="translated">ブレースレス &lt;code&gt;\x&lt;/code&gt; 後に2桁の16進数が必要です（2を作るには先行ゼロを使用します）。これらの制限は、誤字の発生率を低くして、クラスがあなたが思っていたものと一致しないようにすることです。</target>
        </trans-unit>
        <trans-unit id="c268b51167b66309dd9d49ba2a2c249b1b287fa0" translate="yes" xml:space="preserve">
          <source>You have to keep track of N yourself. For example, let's say you want to change the fifth occurrence of &lt;code&gt;&quot;whoever&quot;&lt;/code&gt; or &lt;code&gt;&quot;whomever&quot;&lt;/code&gt; into &lt;code&gt;&quot;whosoever&quot;&lt;/code&gt; or &lt;code&gt;&quot;whomsoever&quot;&lt;/code&gt; , case insensitively. These all assume that $_ contains the string to be altered.</source>
          <target state="translated">自分でNを追跡する必要があります。たとえば、あなたがの第五の発生変更したいとしましょう &lt;code&gt;&quot;whoever&quot;&lt;/code&gt; または &lt;code&gt;&quot;whomever&quot;&lt;/code&gt; に &lt;code&gt;&quot;whosoever&quot;&lt;/code&gt; または &lt;code&gt;&quot;whomsoever&quot;&lt;/code&gt; 小文字を区別せずに、ケースを。これらはすべて、$ _に変更する文字列が含まれていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="ac02203046e578344330c6d8542449742080d451" translate="yes" xml:space="preserve">
          <source>You have to run this program by hand; it's not run as part of the Perl installation.</source>
          <target state="translated">このプログラムは手作業で実行する必要があり、Perl のインストールの一部としては実行されません。</target>
        </trans-unit>
        <trans-unit id="64c3798560849a7dba79bf1106dd1dedfd652114" translate="yes" xml:space="preserve">
          <source>You have tried to use one of the &lt;code&gt;-rwxRWX&lt;/code&gt; filetests with &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;
filetest 'access'&lt;/code&gt; in effect. &lt;code&gt;File::stat&lt;/code&gt; will ignore the pragma, and just use the information in the &lt;code&gt;mode&lt;/code&gt; member as usual.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; filetest 'access'が有効な状態で &lt;code&gt;-rwxRWX&lt;/code&gt; ファイルテストの1つを使用しようとしました。 &lt;code&gt;File::stat&lt;/code&gt; はプラグマを無視し、 &lt;code&gt;mode&lt;/code&gt; メンバーの情報を通常どおり使用します。</target>
        </trans-unit>
        <trans-unit id="f298d6edd85361a4fe69a118c738c5c6d1ac6519" translate="yes" xml:space="preserve">
          <source>You just can't, okay? Instead, put all the specifications together with commas between them in a single &lt;code&gt;ATTR(&lt;i&gt;specification&lt;/i&gt;)&lt;/code&gt;.</source>
          <target state="translated">できませんいいですか 代わりに、すべての仕様を1つの &lt;code&gt;ATTR(&lt;i&gt;specification&lt;/i&gt;)&lt;/code&gt; コンマを入れてまとめます。</target>
        </trans-unit>
        <trans-unit id="afbf451f9422303960f49b456d9bb760406138be" translate="yes" xml:space="preserve">
          <source>You likely need to figure out how this multi-byte character got mixed up with your single-byte locale (or perhaps you thought you had a UTF-8 locale, but Perl disagrees).</source>
          <target state="translated">このマルチバイト文字がシングルバイトロケールとどのように混ざってしまったのかを知る必要があるでしょう (あるいは、UTF-8 ロケールだと思っていたが、Perl がそれに同意しなかったのかもしれません)。</target>
        </trans-unit>
        <trans-unit id="b36efc02e455a878d40bce54d0800047ed5ce051" translate="yes" xml:space="preserve">
          <source>You may (and usually should) use the three-argument form of open to specify I/O layers (sometimes referred to as &quot;disciplines&quot;) to apply to the handle that affect how the input and output are processed (see &lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt; and &lt;a href=&quot;../perlio&quot;&gt;PerlIO&lt;/a&gt; for more details). For example:</source>
          <target state="translated">openの3つの引数形式を使用してI / Oレイヤー（「規律」と呼ばれることもあります）を指定して、入出力の処理方法に影響を与えるハンドルに適用することができます（通常使用する必要があります）（&lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt;および&lt;a href=&quot;../perlio&quot;&gt;PerlIO&lt;/a&gt; for詳細）。例えば：</target>
        </trans-unit>
        <trans-unit id="f4242caecdd2a41134c434e48293066c09a61129" translate="yes" xml:space="preserve">
          <source>You may (and usually should) use the three-argument form of open to specify I/O layers (sometimes referred to as &quot;disciplines&quot;) to apply to the handle that affect how the input and output are processed (see &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; and &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for more details). For example:</source>
          <target state="translated">openの3つの引数形式を使用してI / Oレイヤー（「規律」と呼ばれることもあります）を指定して、入出力の処理方法に影響を与えるハンドルに適用することができます（通常使用する必要があります）（&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;および&lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for詳細）。例えば：</target>
        </trans-unit>
        <trans-unit id="9e56389d96587e792278e4c558eb5807976007cf" translate="yes" xml:space="preserve">
          <source>You may access the repository over the web. This allows you to browse the tree, see recent commits, subscribe to RSS feeds for the changes, search for particular commits and more. You may access it at &lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.git&lt;/a&gt;. A mirror of the repository is found at &lt;a href=&quot;https://github.com/Perl/perl5&quot;&gt;https://github.com/Perl/perl5&lt;/a&gt;.</source>
          <target state="translated">ウェブ経由でリポジトリにアクセスできます。これにより、ツリーの閲覧、最近のコミットの確認、変更のRSSフィードの購読、特定のコミットの検索などが可能になります。&lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.gitから&lt;/a&gt;アクセスできます。リポジトリのミラーは&lt;a href=&quot;https://github.com/Perl/perl5&quot;&gt;https://github.com/Perl/perl5にあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d839e720ae2e7bff2fab5b0520b346cd44ca6b4d" translate="yes" xml:space="preserve">
          <source>You may add other methods to the UNIVERSAL class via Perl or XS code. You do not need to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; UNIVERSAL&lt;/code&gt; to make these methods available to your program (and you should not do so).</source>
          <target state="translated">PerlまたはXSコードを介してUNIVERSALクラスに他のメソッドを追加できます。これらのメソッドをプログラムで使用できるようにする &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; UNIVERSAL&lt;/code&gt; を使用する必要はありません（そうしないでください）。</target>
        </trans-unit>
        <trans-unit id="100a6f059c39fc4530e46957891e388f20cf1052" translate="yes" xml:space="preserve">
          <source>You may also choose to assign the strings &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; or &lt;code&gt;&quot;DEFAULT&quot;&lt;/code&gt; as the handler, in which case Perl will try to discard the signal or do the default thing.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; または &lt;code&gt;&quot;DEFAULT&quot;&lt;/code&gt; をハンドラーとして割り当てることを選択することもできます。その場合、Perlはシグナルを破棄するか、デフォルトの処理を試みます。</target>
        </trans-unit>
        <trans-unit id="daa282ce292ff54483ba2ce846a92dc96f9168dc" translate="yes" xml:space="preserve">
          <source>You may also examine the &quot;safe&quot; flag on the output action object which is filled in when given as the third parameter to &lt;code&gt;POSIX::sigaction()&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;POSIX::sigaction()&lt;/code&gt; への3番目のパラメーターとして指定されたときに入力される出力アクションオブジェクトの「安全な」フラグを調べることもできます。</target>
        </trans-unit>
        <trans-unit id="01c5b9373dd2d19d42f55fdae95d97ea20dd07a1" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;gr_&lt;/code&gt; . Thus, &lt;code&gt;$group_obj-&amp;gt;gid()&lt;/code&gt; corresponds to $gr_gid if you import the fields. Array references are available as regular array variables, so &lt;code&gt;@{ $group_obj-&amp;gt;members() }&lt;/code&gt; would be simply @gr_members.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。（これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;gr_&lt;/code&gt; で指定された変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$group_obj-&amp;gt;gid()&lt;/code&gt; は$ gr_gidに対応します。配列参照は通常の配列変数として使用できるため、 &lt;code&gt;@{ $group_obj-&amp;gt;members() }&lt;/code&gt; は単に@gr_membersになります。</target>
        </trans-unit>
        <trans-unit id="fa4935199f235ba2f0cd0a1d49e3ac1a3bbd011f" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;h_&lt;/code&gt; . Thus, &lt;code&gt;$host_obj-&amp;gt;name()&lt;/code&gt; corresponds to $h_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $host_obj-&amp;gt;aliases()
}&lt;/code&gt; would be simply @h_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;h_&lt;/code&gt; で指定された変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$host_obj-&amp;gt;name()&lt;/code&gt; は$ h_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $host_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@h_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="60ec160f76fcfc38cc73d96c90a7ce874d6384c9" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;n_&lt;/code&gt; . Thus, &lt;code&gt;$net_obj-&amp;gt;name()&lt;/code&gt; corresponds to $n_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $net_obj-&amp;gt;aliases()
}&lt;/code&gt; would be simply @n_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先頭に &lt;code&gt;n_&lt;/code&gt; を付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$net_obj-&amp;gt;name()&lt;/code&gt; は$ n_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば、 &lt;code&gt;@{ $net_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@n_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="cd8189e5c613aac0e23d3c0670ed3ce2f5ae13db" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;p_&lt;/code&gt; . Thus, &lt;code&gt;$proto_obj-&amp;gt;name()&lt;/code&gt; corresponds to $p_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $proto_obj-&amp;gt;aliases()
}&lt;/code&gt; would be simply @p_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;p_&lt;/code&gt; で指定された変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$proto_obj-&amp;gt;name()&lt;/code&gt; は$ p_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $proto_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@p_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="25ca76eb17a2cf86a0c57fdc15c696e88b6cf4c9" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;pw_&lt;/code&gt; in front their method names. Thus, &lt;code&gt;$passwd_obj-&amp;gt;shell&lt;/code&gt; corresponds to $pw_shell if you import the fields.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、メソッド名の前に &lt;code&gt;pw_&lt;/code&gt; を前に付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$passwd_obj-&amp;gt;shell&lt;/code&gt; は$ pw_shellに対応します。</target>
        </trans-unit>
        <trans-unit id="274d859e81c068db4c48efa8f50c77493ca5cdbd" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;s_&lt;/code&gt; . Thus, &lt;code&gt;$serv_obj-&amp;gt;name()&lt;/code&gt; corresponds to $s_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $serv_obj-&amp;gt;aliases()}&lt;/code&gt; would be simply @s_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;s_&lt;/code&gt; で名前が付けられた変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$serv_obj-&amp;gt;name()&lt;/code&gt; は$ s_nameに対応します。配列参照は通常の配列変数として利用できるため、たとえば、 &lt;code&gt;@{ $serv_obj-&amp;gt;aliases()}&lt;/code&gt; は単に@s_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="447198c5b98b7b54155b70c415358589d509c62e" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;tm_&lt;/code&gt; in front their method names. Thus, &lt;code&gt;$tm_obj-&amp;gt;mday()&lt;/code&gt; corresponds to $tm_mday if you import the fields.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。（これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、メソッド名の前に &lt;code&gt;tm_&lt;/code&gt; を前に付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$tm_obj-&amp;gt;mday()&lt;/code&gt; は$ tm_mdayに対応します。</target>
        </trans-unit>
        <trans-unit id="5c856054dbb9356054cca7ccfef163a998ceb55f" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your stat() and lstat() functions.) Access these fields as variables named with a preceding &lt;code&gt;st_&lt;/code&gt; in front their method names. Thus, &lt;code&gt;$stat_obj-&amp;gt;dev()&lt;/code&gt; corresponds to $st_dev if you import the fields.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。（これにより、stat（）関数とlstat（）関数がオーバーライドされることに注意してください。）これらのフィールドには、メソッド名の前に &lt;code&gt;st_&lt;/code&gt; を前に付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$stat_obj-&amp;gt;dev()&lt;/code&gt; は$ st_devに対応します。</target>
        </trans-unit>
        <trans-unit id="a6b6b26fcc9879eca82e69c4a67570540fca4ae9" translate="yes" xml:space="preserve">
          <source>You may also need to apply the patches supplied with the binary distribution of perl. It also makes sense to look on the perl5-porters mailing list for the latest OS/2-related patches (see &lt;a href=&quot;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&quot;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&lt;/a&gt;). Such patches usually contain strings &lt;code&gt;/os2/&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt; , so it makes sense looking for these strings.</source>
          <target state="translated">また、perlのバイナリディストリビューションで提供されるパッチを適用する必要がある場合もあります。また、perl5-portersメーリングリストで最新のOS / 2関連のパッチを探すことも意味があります（&lt;a href=&quot;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&quot;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/を参照&lt;/a&gt;）。このようなパッチには通常、文字列 &lt;code&gt;/os2/&lt;/code&gt; および &lt;code&gt;patch&lt;/code&gt; が含まれているため、これらの文字列を探すのは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="6aa8495c9efa1eb6aea78e6cd751529d33d7b29e" translate="yes" xml:space="preserve">
          <source>You may also need to comment out the &lt;code&gt;DELAYLOAD = ...&lt;/code&gt; line in the Makefile if you're using VC++ 6.0 without the latest service pack and the linker reports an internal error.</source>
          <target state="translated">最新のサービスパックなしでVC ++ 6.0を使用していて、リンカーが内部エラーを報告する場合は、Makefileの &lt;code&gt;DELAYLOAD = ...&lt;/code&gt; 行をコメント化する必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="2c64c3fbfbcaace5918da128791239c43cdf19d2" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; to check whether subroutine &lt;code&gt;&amp;amp;func&lt;/code&gt; has ever been defined. The return value is unaffected by any forward declarations of &lt;code&gt;&amp;amp;func&lt;/code&gt; . A subroutine that is not defined may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;../perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; を使用して、サブルーチン &lt;code&gt;&amp;amp;func&lt;/code&gt; が定義されたことがあるかどうかを確認することもできます。戻り値は、 &lt;code&gt;&amp;amp;func&lt;/code&gt; の前方宣言の影響を受けません。定義されていないサブルーチンでも呼び出し可能である可能性があります。そのパッケージには、最初に呼び出されたときに存在するようにする &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;../perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="172f346295165efa4fd86444269a98fd3b778c01" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; to check whether subroutine &lt;code&gt;&amp;amp;func&lt;/code&gt; has ever been defined. The return value is unaffected by any forward declarations of &lt;code&gt;&amp;amp;func&lt;/code&gt; . A subroutine that is not defined may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; を使用して、サブルーチン &lt;code&gt;&amp;amp;func&lt;/code&gt; が定義されたことがあるかどうかを確認することもできます。戻り値は、 &lt;code&gt;&amp;amp;func&lt;/code&gt; の前方宣言の影響を受けません。定義されていないサブルーチンでも呼び出し可能である可能性があります。そのパッケージには、最初に呼び出されたときに存在するようにする &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b5f7479dd4b17df91be39e0264b553fbc922288" translate="yes" xml:space="preserve">
          <source>You may also use backticks to invoke a DCL subprocess, whose output is used as the return value of the expression. The string between the backticks is handled as if it were the argument to the &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; operator (see below). In this case, Perl will wait for the subprocess to complete before continuing.</source>
          <target state="translated">バックティックを使用してDCLサブプロセスを呼び出すこともできます。DCLサブプロセスの出力は、式の戻り値として使用されます。バックティックの間の文字列は、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; オペレータの引数であるかのように処理されます（以下を参照）。この場合、Perlはサブプロセスが完了するのを待ってから続行します。</target>
        </trans-unit>
        <trans-unit id="5448f65c98891197c6cecbe08ead986b82724f17" translate="yes" xml:space="preserve">
          <source>You may also use dmake. See &lt;a href=&quot;#Make&quot;&gt;Make&lt;/a&gt; above on how to get it.</source>
          <target state="translated">dmakeを使用することもできます。取得方法については、上記の&lt;a href=&quot;#Make&quot;&gt;Makeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3196fa8d2ff4d6ac1033b15a7916441466060e42" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt; module (part of the standard perl distribution), but be warned that it has a different order of arguments from &lt;a href=&quot;ipc/open2&quot;&gt;IPC::Open2&lt;/a&gt; (see &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="translated">あなたはまた、使用することができます&lt;a href=&quot;ipc/open3&quot;&gt;IPC ::のopen3の&lt;/a&gt;モジュール（標準Perl配布の一部）が、それはからの引数の異なる順序があることを警告する&lt;a href=&quot;ipc/open2&quot;&gt;IPC :: Open2を&lt;/a&gt;（参照&lt;a href=&quot;ipc/open3&quot;&gt;IPC ::のopen3を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6b7ef88e606ea55cb21f76eea0e0de1fb7b9db2f" translate="yes" xml:space="preserve">
          <source>You may also want to look at one other option for building a perl that will work on Windows: the README.cygwin file, which give a different set of rules to build a perl for Windows. This method will probably enable you to build a more Unix-compatible perl, but you will also need to download and use various other build-time and run-time support software described in that file.</source>
          <target state="translated">Windows上で動作するperlをビルドするためのもう一つのオプション、README.cygwinファイルを見てみるのもいいかもしれません。この方法では、おそらくよりUnixと互換性のあるperlをビルドすることができるでしょうが、そのファイルに記載されている他の様々なビルドタイムやランタイムサポートソフトウェアをダウンロードして使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="47d8e5afa5f51ce60391c15623a30d357b47dac4" translate="yes" xml:space="preserve">
          <source>You may also want to override the &lt;b&gt;begin_input()&lt;/b&gt; and &lt;b&gt;end_input()&lt;/b&gt; methods for your subclass (to perform any needed per-file and/or per-document initialization or cleanup).</source>
          <target state="translated">サブクラスの&lt;b&gt;begin_input（）&lt;/b&gt;および&lt;b&gt;end_input（）&lt;/b&gt;メソッドをオーバーライドすることもできます（必要なファイルごとまたはドキュメントごとの初期化またはクリーンアップを実行するため）。</target>
        </trans-unit>
        <trans-unit id="fad70035f3a1b89b3667a331878011a9d50cf74f" translate="yes" xml:space="preserve">
          <source>You may also want to read over the source for &lt;code&gt;File::Findgrep&lt;/code&gt; and its constituent modules -- they are a complete (if small) example application that uses Maketext.</source>
          <target state="translated">また、 &lt;code&gt;File::Findgrep&lt;/code&gt; とその構成モジュールのソースを読むこともできます。これらは、Maketextを使用する完全な（小さい場合の）サンプルアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="32c591edfbc105cf26f618c0c72cc57761fceff2" translate="yes" xml:space="preserve">
          <source>You may also wish to discuss with the translators the question of how to relate different subforms of the same language tag, considering how this reacts with &lt;code&gt;get_handle&lt;/code&gt; 's treatment of these. For example, if a user accepts interfaces in &quot;en, fr&quot;, and you have interfaces available in &quot;en-US&quot; and &quot;fr&quot;, what should they get? You may wish to resolve this by establishing that &quot;en&quot; and &quot;en-US&quot; are effectively synonymous, by having one class zero-derive from the other.</source>
          <target state="translated">これが &lt;code&gt;get_handle&lt;/code&gt; の処理とどのように反応するかを考慮して、同じ言語タグの異なるサブフォームを関連付ける方法についての質問を翻訳者と話し合うこともできます。たとえば、ユーザーが「en、fr」でインターフェースを受け入れ、「en-US」と「fr」で使用可能なインターフェースがある場合、何を取得する必要がありますか？ 「en」と「en-US」が実質的に同義であることを確立することにより、1つのクラスを他からゼロ派生させることで、これを解決することができます。</target>
        </trans-unit>
        <trans-unit id="05003e2911012bca46d826b18714273b702cbb78" translate="yes" xml:space="preserve">
          <source>You may also, in the Bourne shell tradition, specify an EXPR beginning with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, in which case the rest of the string is interpreted as the name of a filehandle (or file descriptor, if numeric) to be duped (as &lt;code&gt;dup(2)&lt;/code&gt; ) and opened. You may use &lt;code&gt;&amp;amp;&lt;/code&gt; after &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;+&amp;gt;&lt;/code&gt;, &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt; , and &lt;code&gt;+&amp;lt;&lt;/code&gt; . The mode you specify should match the mode of the original filehandle. (Duping a filehandle does not take into account any existing contents of IO buffers.) If you use the three-argument form, then you can pass either a number, the name of a filehandle, or the normal &quot;reference to a glob&quot;.</source>
          <target state="translated">Bourneシェルの伝統では、 &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まるEXPRを指定することもできます。この場合、文字列の残りの部分は、複製されるファイルハンドル（または数値の場合はファイル記述子）の名前として解釈されます（ &lt;code&gt;dup(2)&lt;/code&gt; ）とオープン。 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;+&amp;gt;&lt;/code&gt; 、 &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;+&amp;lt;&lt;/code&gt; の後に＆を使用できます。指定するモードは、元のファイルハンドルのモードと一致する必要があります。 （ファイルハンドルを複製しても、IOバッファーの既存の内容は考慮されません。）3つの引数の形式を使用する場合、数値、ファイルハンドルの名前、または通常の「グロブへの参照」のいずれかを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="1c5fc563eb0d1fd26ae839cfa02427332324573f" translate="yes" xml:space="preserve">
          <source>You may ask whether one of these was implemented on the system Perl was built on by asking the importable &lt;code&gt;pw_has&lt;/code&gt; function about them. This function returns true if all parameters are supported fields on the build platform, false if one or more were not, and raises an exception if you asked about a field that Perl never knows how to provide. Parameters may be in a space-separated string, or as separate arguments. If you pass no parameters, the function returns the list of &lt;code&gt;struct pwd&lt;/code&gt; fields supported by your build platform's C library, as a list in list context, or a space-separated string in scalar context. Note that just because your C library had a field doesn't necessarily mean that it's fully implemented on that system.</source>
          <target state="translated">これらの1つが、Perlが構築されたシステムに実装されているかどうかを、インポート可能な &lt;code&gt;pw_has&lt;/code&gt; 関数に尋ねることで確認できます。この関数は、すべてのパラメーターがビルドプラットフォームでサポートされているフィールドである場合はtrueを返し、1つ以上がサポートされていない場合はfalseを返し、Perlが提供する方法を知らないフィールドについて質問した場合は例外を発生させます。パラメータは、スペースで区切られた文字列、または個別の引数として指定できます。パラメータを渡さない場合、関数は、ビルドプラットフォームのCライブラリでサポートされている &lt;code&gt;struct pwd&lt;/code&gt; フィールドのリストを、リストコンテキストのリストとして、またはスカラーコンテキストのスペース区切りの文字列として返します。 Cライブラリにフィールドがあったからといって、必ずしもそのシステムに完全に実装されているとは限らないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="56003b76083072e5d28f4c38591744948d360c03" translate="yes" xml:space="preserve">
          <source>You may at this point want to consider whether your base class (Projname::L10N), from which all lexicons inherit from (Projname::L10N::en, Projname::L10N::es, etc.), should be an _AUTO lexicon. It may be true that in theory, all needed messages will be in each language class; but in the presumably unlikely or &quot;impossible&quot; case of lookup failure, you should consider whether your program should throw an exception, emit text in English (or whatever your project's first language is), or some more complex solution as described in the section &quot;Controlling Lookup Failure&quot;, above.</source>
          <target state="translated">この時点で、基底クラス(Projname::L10N)が_AUTOレキシコンであるべきかどうかを検討したくなるかもしれません。理論的には、必要なメッセージはすべて各言語クラスにあることは事実かもしれません。しかし、検索に失敗した場合には、プログラムが例外を投げるか、英語(またはプロジェクトの第一言語が何であれ)でテキストを出力するか、上記の「検索失敗の制御」のセクションで説明されているように、より複雑な解決策を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="00dd50349ec2812a0e8ba87a508b17b844d30458" translate="yes" xml:space="preserve">
          <source>You may be able to figure out what's going wrong using the Perl debugger. For information about how to use the debugger &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;.</source>
          <target state="translated">Perlデバッガーを使用して、何が問題になっているのかを理解できる場合があります。デバッガー&lt;b&gt;perldoc &lt;/b&gt;&lt;a href=&quot;perldebug&quot;&gt;perldebugの&lt;/a&gt;使用方法については。</target>
        </trans-unit>
        <trans-unit id="538c1768e7dd08c154327dd9d81d8469210ac3b8" translate="yes" xml:space="preserve">
          <source>You may be mixing the Tru64 cc/ar/ld with the GNU gcc/ar/ld. That may work, but sometimes it doesn't (your gcc or GNU utils may have been compiled for an incompatible OS release).</source>
          <target state="translated">Tru64 cc/ar/ld と GNU gcc/ar/ld を混合している可能性があります。これはうまくいくかもしれませんが、うまくいかないこともあります (あなたの gcc や GNU utils は、互換性のない OS リリース用にコンパイルされているかもしれません)。</target>
        </trans-unit>
        <trans-unit id="569474da0977b8a6d57c606d4bf816045d439deb" translate="yes" xml:space="preserve">
          <source>You may be more comfortable with the Perl version of that:</source>
          <target state="translated">その辺のPerl版の方が快適かもしれません。</target>
        </trans-unit>
        <trans-unit id="a2c2934cf1eab265e83a97c11bed16b38a8b5801" translate="yes" xml:space="preserve">
          <source>You may be presented with strings in any of these equivalent forms. There is currently nothing in Perl 5 that ignores the differences. So you'll have to specially hanlde it. The usual advice is to convert your inputs to &lt;code&gt;NFD&lt;/code&gt; before processing further.</source>
          <target state="translated">これらの同等の形式の文字列が表示される場合があります。現在、Perl 5には違いを無視するものはありません。だから、特別にそれを処理する必要があります。通常のアドバイスは、さらに処理する前に入力を &lt;code&gt;NFD&lt;/code&gt; に変換することです。</target>
        </trans-unit>
        <trans-unit id="58f64d73709bb7f46995ccc9ddf584cf761fc186" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;can&lt;/code&gt; as a class (static) method or an object method.</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; はクラス（静的）メソッドまたはオブジェクトメソッドとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8cf034da6832021586a2104fbbd0c08a1605f5bc" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;hv_delete&lt;/code&gt; or &lt;code&gt;hv_delete_ent&lt;/code&gt; on the hash entry that the iterator currently points to, without losing your place or invalidating your iterator. Note that in this case the current entry is deleted from the hash with your iterator holding the last reference to it. Your iterator is flagged to free the entry on the next call to &lt;code&gt;hv_iternext&lt;/code&gt; , so you must not discard your iterator immediately else the entry will leak - call &lt;code&gt;hv_iternext&lt;/code&gt; to trigger the resource deallocation.</source>
          <target state="translated">場所を失うことなく、イテレータを無効にすることなく、イテレータが現在指しているハッシュエントリで &lt;code&gt;hv_delete&lt;/code&gt; または &lt;code&gt;hv_delete_ent&lt;/code&gt; を呼び出すことができます。この場合、現在のエントリはハッシュから削除され、イテレータは最後の参照を保持しています。イテレータには次の &lt;code&gt;hv_iternext&lt;/code&gt; の呼び出しでエントリを解放するフラグが設定されているため、イテレータをすぐに破棄しないでください。破棄すると、エントリがリークします &lt;code&gt;hv_iternext&lt;/code&gt; を呼び出してリソースの割り当て解除をトリガーします。</target>
        </trans-unit>
        <trans-unit id="9be40ceb1a7306a76b520e9584d2eca0a12452f8" translate="yes" xml:space="preserve">
          <source>You may change the pager which is used via &lt;code&gt;o pager=...&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;o pager=...&lt;/code&gt; コマンドで使用するページャーを変更できます。</target>
        </trans-unit>
        <trans-unit id="8d0d219cb50b9b95de99bdba2a6790e3027b1988" translate="yes" xml:space="preserve">
          <source>You may choose one of six different protocols to use for the ping. The &quot;tcp&quot; protocol is the default. Note that a live remote host may still fail to be pingable by one or more of these protocols. For example, www.microsoft.com is generally alive but not &quot;icmp&quot; pingable.</source>
          <target state="translated">pingに使用する6つの異なるプロトコルのうちの1つを選択することができます。tcp&quot; プロトコルがデフォルトです。ライブのリモートホストは、これらのプロトコルのうちの 1 つ以上で ping 可能であることに失敗する可能性があることに注意してください。例えば、www.microsoft.com は一般的には生きていますが、&quot;icmp&quot; は ping 可能ではありません。</target>
        </trans-unit>
        <trans-unit id="5b9386b09cdd1212e7410c2ab62737e2149c7f2b" translate="yes" xml:space="preserve">
          <source>You may create a shared library that refers to another library, which may be either an archive library or a shared library. If this second library is a shared library, this is called a &quot;dependent library&quot;. The dependent library's name is recorded in the main shared library, but it is not linked into the shared library. Instead, it is loaded when the main shared library is loaded. This can cause problems if you build an extension on one system and move it to another system where the libraries may not be located in the same place as on the first system.</source>
          <target state="translated">別のライブラリを参照する共有ライブラリを作成することができますが、そのライブラリはアーカイブライブラリでも共有ライブラリでもどちらでも構いません。この2つ目のライブラリが共有ライブラリの場合、これを「従属ライブラリ」と呼びます。依存ライブラリの名前はメインの共有ライブラリに記録されますが、共有ライブラリにリンクされているわけではありません。その代わり、メインの共有ライブラリが読み込まれたときに読み込まれます。これは、あるシステムで拡張機能を構築して、最初のシステムと同じ場所にライブラリが配置されていない可能性がある別のシステムに移動した場合に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c69978ae72909c6a0d4c9ce7bda602f4029ade9" translate="yes" xml:space="preserve">
          <source>You may declare &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables at the outermost scope of a file to hide any such identifiers from the world outside that file. This is similar in spirit to C's static variables when they are used at the file level. To do this with a subroutine requires the use of a closure (an anonymous function that accesses enclosing lexicals). If you want to create a private subroutine that cannot be called from outside that block, it can declare a lexical variable containing an anonymous sub reference:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数をファイルの最も外側のスコープで宣言して、そのような識別子をそのファイルの外の世界から隠すことができます。これは、Cレベルの静的変数をファイルレベルで使用する場合の精神と似ています。サブルーチンでこれを行うには、クロージャー（囲んでいる語彙にアクセスする無名関数）を使用する必要があります。そのブロックの外部から呼び出せないプライベートサブルーチンを作成する場合は、無名のサブ参照を含むレキシカル変数を宣言できます。</target>
        </trans-unit>
        <trans-unit id="4c485e566982c516f185802a5bb8005684c87aaf" translate="yes" xml:space="preserve">
          <source>You may do &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads qw(yield)&lt;/code&gt; , and then just use &lt;code&gt;yield()&lt;/code&gt; in your code.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads qw(yield)&lt;/code&gt; 使用して、コードで &lt;code&gt;yield()&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;こともできます。</target>
        </trans-unit>
        <trans-unit id="ad59ee540ee6c5334c4114152f24df062a49e4a1" translate="yes" xml:space="preserve">
          <source>You may encounter the following warning message at Perl startup:</source>
          <target state="translated">Perlの起動時に以下のような警告メッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="294037a277c0cf3bb9e6ace3733986ce5d32b057" translate="yes" xml:space="preserve">
          <source>You may find it helpful to have a &quot;macro dictionary&quot;, which you can produce by saying &lt;code&gt;cpp -dM perl.c | &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; . Even then,</source>
          <target state="translated">&lt;code&gt;cpp -dM perl.c | &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; と言って作成できる「マクロ辞書」があると便利です。並べ替え。その時でさえ、</target>
        </trans-unit>
        <trans-unit id="972b606b3734fb1680ed24e777ce569b72a6f320" translate="yes" xml:space="preserve">
          <source>You may find it helpful to use letter case to indicate the scope or nature of a variable. For example:</source>
          <target state="translated">変数の範囲や性質を示すために大文字小文字を使うと便利です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c25f48a1ca763d34150d8bac8dc30aeefcd980b5" translate="yes" xml:space="preserve">
          <source>You may get a bus error core dump from the op/pwent or op/grent tests. If compiled with -g you will see a stack trace much like the following:</source>
          <target state="translated">op/pwent や op/grent テストからバスエラーのコアダンプが得られるかもしれません。g でコンパイルした場合、以下のようなスタックトレースが表示されます。</target>
        </trans-unit>
        <trans-unit id="108b6e50ab8abc6a709ca1e727e6115ff077c1f8" translate="yes" xml:space="preserve">
          <source>You may get a warning when doing a threaded build:</source>
          <target state="translated">スレッドビルドを行うと警告が表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="22f1e826336ce72e185bd16ea03c1b6430323fa0" translate="yes" xml:space="preserve">
          <source>You may have an optional comma before the closing parenthesis of a list literal, so that you can say:</source>
          <target state="translated">リストリテラルの閉じ括弧の前に任意のカンマを入れておくと、こう言えるようになります。</target>
        </trans-unit>
        <trans-unit id="94ced856f582ad7ad5a45cb74870b4f4ae27ed8b" translate="yes" xml:space="preserve">
          <source>You may have to add extra libraries as well. Which ones? Perhaps those printed by</source>
          <target state="translated">余分なライブラリも追加する必要があるかもしれません。どれですか?おそらく</target>
        </trans-unit>
        <trans-unit id="adc5eceb43ab39f0721310d8a087b92c4cf96e19" translate="yes" xml:space="preserve">
          <source>You may have to re-read this entire section a few times...</source>
          <target state="translated">このセクション全体を何度か読み直す必要があるかもしれません...</target>
        </trans-unit>
        <trans-unit id="9e568be51255384d52fb1c41217e7d274f15f0ca" translate="yes" xml:space="preserve">
          <source>You may ignore the error message for the first element of the archive (this doesn't look like a tar archive / skipping to next file...), it's only the directory which will be created automatically anyway.</source>
          <target state="translated">アーカイブの最初の要素のエラーメッセージは無視しても構いません(これはtarアーカイブ/次のファイルへのスキップのようには見えません...)。</target>
        </trans-unit>
        <trans-unit id="927c6b1abd9425ad341215fb99d87b72f734b089" translate="yes" xml:space="preserve">
          <source>You may intersperse documentation and Perl code within the .pm file. In fact, if you want to use method autoloading, you must do this, as the comment inside the .pm file explains.</source>
          <target state="translated">.pm ファイルの中にドキュメントと Perl のコードを混在させても構いません。実際、もしメソッドのオートローディングを使いたいのであれば、.pm ファイル内のコメントで説明されているように、これをしなければなりません。</target>
        </trans-unit>
        <trans-unit id="b911c24edf96323dfee0b5a16ac2655f93ba03e8" translate="yes" xml:space="preserve">
          <source>You may lock arrays and hashes as well as scalars. Locking an array, though, will not block subsequent locks on array elements, just lock attempts on the array itself.</source>
          <target state="translated">スカラだけでなく、配列やハッシュをロックすることもできます。しかし、配列をロックしても配列の要素に対する後続のロックはブロックされず、配列自体をロックしようとするだけです。</target>
        </trans-unit>
        <trans-unit id="00344360ec287bdb5274fbd2e88953a8065f329a" translate="yes" xml:space="preserve">
          <source>You may look into the file</source>
          <target state="translated">ファイルを調べることができます。</target>
        </trans-unit>
        <trans-unit id="9516dc740ae77942efcf6e8fd80e5504a8b1fd26" translate="yes" xml:space="preserve">
          <source>You may mail your bug reports (be sure to include full configuration information as output by the myconfig program in the perl source tree, or by &lt;code&gt;perl -V&lt;/code&gt; ) to perlbug@perl.org . If you've succeeded in compiling perl, the &lt;a href=&quot;perlbug&quot;&gt;perlbug&lt;/a&gt; script in the</source>
          <target state="translated">バグレポート（perlソースツリーのmyconfigプログラムまたは &lt;code&gt;perl -V&lt;/code&gt; による出力として、完全な構成情報を必ず含めてください）をperlbug@perl.orgにメールで送信できます。あなたは、perlのコンパイルに成功した場合&lt;a href=&quot;perlbug&quot;&gt;perlbugの&lt;/a&gt;でスクリプトを</target>
        </trans-unit>
        <trans-unit id="9b598b6ebd49a9a2c8435acfea60cd639dc39cf9" translate="yes" xml:space="preserve">
          <source>You may need the following GNU programs in order to install perl:</source>
          <target state="translated">perlをインストールするには、以下のGNUプログラムが必要かもしれません。</target>
        </trans-unit>
        <trans-unit id="65000230f7491853635f8932fbc750e90e8f3c2d" translate="yes" xml:space="preserve">
          <source>You may need to be</source>
          <target state="translated">必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="64a7e3cbbe6d605d5c662e6d4594cef6c6e25ffe" translate="yes" xml:space="preserve">
          <source>You may need to carry out some system configuration tasks before running the Configure script for Perl.</source>
          <target state="translated">Perl 用の Configure スクリプトを実行する前に、いくつかのシステム設定タスクを実行する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d10056deec90cd668c3f12e0f304b01dde73621d" translate="yes" xml:space="preserve">
          <source>You may need to make this change to scripts written for a Unix system which expect that after a call to &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, no files with the names passed to &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; will exist. (Note: This can be changed at compile time; if you &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; and &lt;code&gt;$Config{'d_unlink_all_versions'}&lt;/code&gt; is &lt;code&gt;define&lt;/code&gt; , then &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; will delete all versions of a file on the first call.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; を呼び出した後、unlinkに渡された名前のファイルが存在しないことを期待するUnixシステム用に記述されたスクリプトに、この変更を加える必要がある場合があり &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 。（注：これは、コンパイル時に変更することができます。あなたがいる場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; し、 &lt;code&gt;$Config{'d_unlink_all_versions'}&lt;/code&gt; ある &lt;code&gt;define&lt;/code&gt; 、その後、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 最初の呼び出し上のファイルのすべてのバージョンを削除します。）</target>
        </trans-unit>
        <trans-unit id="3ec14405f03df7cdb78bb123848d4a14d07a8d45" translate="yes" xml:space="preserve">
          <source>You may not (usefully) use a reference as the key to a hash. It will be converted into a string:</source>
          <target state="translated">参照をハッシュのキーとして使用することは(便利なことに)できません。これは文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="d8a434e0ce88a99bf8a5488e4b0fad4981c52cd7" translate="yes" xml:space="preserve">
          <source>You may not even need to write the module. Check whether it's already been done in Perl, and avoid re-inventing the wheel unless you have a good reason.</source>
          <target state="translated">モジュールを書く必要がないかもしれません。Perlですでに行われているかどうかを確認し、よほどの理由がない限り、車輪の再発明は避けてください。</target>
        </trans-unit>
        <trans-unit id="936986b9e470ced1f7fdf65dd9ad838a32d13386" translate="yes" xml:space="preserve">
          <source>You may not use data derived from outside your program to affect something else outside your program--at least, not by accident. All command line arguments, environment variables, locale information (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), results of certain system calls (&lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt;, the variable of &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread()&lt;/a&gt;&lt;/code&gt;, the messages returned by &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv()&lt;/a&gt;&lt;/code&gt;, the password, gcos and shell fields returned by the &lt;code&gt;getpwxxx()&lt;/code&gt; calls), and all file input are marked as &quot;tainted&quot;. Tainted data may not be used directly or indirectly in any command that invokes a sub-shell, nor in any command that modifies files, directories, or processes, &lt;b&gt;with the following exceptions&lt;/b&gt;:</source>
          <target state="translated">プログラムの外部から派生したデータを使用して、少なくとも偶然ではなく、プログラムの外部の何かに影響を与えることはできません。すべてのコマンドライン引数、環境変数、ロケール情報（参照&lt;a href=&quot;perllocale&quot;&gt;はperllocaleを&lt;/a&gt;）、特定のシステムコールの結果（ &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt; 、の変数 &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread()&lt;/a&gt;&lt;/code&gt; によって返されたメッセージ &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv()&lt;/a&gt;&lt;/code&gt; パスワード、GCOSとシェル &lt;code&gt;getpwxxx()&lt;/code&gt; 呼び出しによって返されるフィールド）、およびすべてのファイル入力は「汚染」としてマークされます。汚染されたデータは、サブシェルを呼び出すコマンドや、ファイル、ディレクトリ、プロセスを変更するコマンドでは、直接的または間接的に使用できません。&lt;b&gt;ただし、次の例外があります&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="656cab64db0943d80c2c347bdd21c8a07c645dc2" translate="yes" xml:space="preserve">
          <source>You may once in a while try a &quot;make microperl&quot; to see whether we can still compile Perl with just the bare minimum of interfaces. (See README.micro.)</source>
          <target state="translated">たまには &quot;make microperl&quot; を試してみて、最低限のインターフェースだけでPerlをコンパイルできるかどうかを確認してみてください。(README.microを参照してください。)</target>
        </trans-unit>
        <trans-unit id="67acb9777380059ff280be22d8c3f8940dae8cc7" translate="yes" xml:space="preserve">
          <source>You may or may not choose to follow this usage. But never write &quot;PERL&quot;, because perl is not an acronym.</source>
          <target state="translated">この用法に従うかどうかは自由です。しかし、perlは頭文字ではないので、perlとは絶対に書いてはいけません。</target>
        </trans-unit>
        <trans-unit id="613fbbe8af8f9b1517992c7dc5a2a0283f5a8c13" translate="yes" xml:space="preserve">
          <source>You may override this as you like; Maketext doesn't use it for anything.</source>
          <target state="translated">これを好きなように上書きすることができます;Maketext はこれを何にも使いません。</target>
        </trans-unit>
        <trans-unit id="471b54cb9da3fd2429477493f77011df7439603d" translate="yes" xml:space="preserve">
          <source>You may run into memory limits, in which case you should use the -Xmx option:</source>
          <target state="translated">メモリ制限がある場合は、-Xmx オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b87668ec2b109de55eff18c1a93548bfc928cdb" translate="yes" xml:space="preserve">
          <source>You may see a message about errors while extracting</source>
          <target state="translated">抽出中にエラーに関するメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="567b2cee3d4edcc53c5dd10d0ae801a480e80721" translate="yes" xml:space="preserve">
          <source>You may see some messages during Configure that seem suspicious.</source>
          <target state="translated">Configure中に不審なメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="3d40b88fd93e71db6719630cc623bcd6de5e08cd" translate="yes" xml:space="preserve">
          <source>You may see the term &quot;invariant&quot; character or code point. This simply means that the character has the same numeric value and representation when encoded in UTF-8 (or UTF-EBCDIC) as when not. (Note that this is a very different concept from &lt;a href=&quot;#The-13-variant-characters&quot;&gt;The 13 variant characters&lt;/a&gt; mentioned above. Careful prose will use the term &quot;UTF-8 invariant&quot; instead of just &quot;invariant&quot;, but most often you'll see just &quot;invariant&quot;.) For example, the ordinal value of &quot;A&quot; is 193 in most EBCDIC code pages, and also is 193 when encoded in UTF-EBCDIC. All UTF-8 (or UTF-EBCDIC) variant code points occupy at least two bytes when encoded in UTF-8 (or UTF-EBCDIC); by definition, the UTF-8 (or UTF-EBCDIC) invariant code points are exactly one byte whether encoded in UTF-8 (or UTF-EBCDIC), or not. (By now you see why people typically just say &quot;UTF-8&quot; when they also mean &quot;UTF-EBCDIC&quot;. For the rest of this document, we'll mostly be casual about it too.) In ASCII UTF-8, the code points corresponding to the lowest 128 ordinal numbers (0 - 127: the ASCII characters) are invariant. In UTF-EBCDIC, there are 160 invariant characters. (If you care, the EBCDIC invariants are those characters which have ASCII equivalents, plus those that correspond to the C1 controls (128 - 159 on ASCII platforms).)</source>
          <target state="translated">「不変」の文字またはコードポイントが表示される場合があります。これは単に、UTF-8（またはUTF-EBCDIC）でエンコードされた場合とそうでない場合とで、文字の数値および表現が同じであることを意味します。 （これは&lt;a href=&quot;#The-13-variant-characters&quot;&gt;13のバリアントキャラクター&lt;/a&gt;とは非常に異なる概念です。上記の通り。注意深い散文では、単に「不変」ではなく「UTF-8不変」という用語を使用しますが、ほとんどの場合、「不変」とだけ表示されます。たとえば、「A」の序数値は、ほとんどのEBCDICコードページで193です。また、UTF-EBCDICでエンコードすると193になります。すべてのUTF-8（またはUTF-EBCDIC）バリアントコードポイントは、UTF-8（またはUTF-EBCDIC）でエンコードされた場合、少なくとも2バイトを占有します。定義により、UTF-8（またはUTF-EBCDIC）不変コードポイントは、UTF-8（またはUTF-EBCDIC）でエンコードされているかどうかに関係なく、正確に1バイトです。 （これまでに、「UTF-EBCDIC」も意味するのに、通常「UTF-8」とだけ言う理由がわかります。このドキュメントの残りの部分では、ほとんどの場合、それについても気軽に説明します。）ASCII UTF-8では、最小の128序数（0-127：ASCII文字）に対応するコードポイントは不変です。UTF-EBCDICでは、160の不変文字があります。 （必要に応じて、EBCDIC不変条件は、ASCIIに対応する文字と、C1コントロール（ASCIIプラットフォームでは128〜159）に対応する文字です。）</target>
        </trans-unit>
        <trans-unit id="fa093d809cde8bd253ba564171319f316c1ecb65" translate="yes" xml:space="preserve">
          <source>You may set the &lt;code&gt;dw_size&lt;/code&gt; option to limit the amount of data that can be saved in the deferred write buffer. This limit may not exceed the total memory limit. For example, if you set &lt;code&gt;dw_size&lt;/code&gt; to 1000 and &lt;code&gt;memory&lt;/code&gt; to 2500, that means that no more than 1000 bytes of deferred writes will be saved up. The space available for the read cache will vary, but it will always be at least 1500 bytes (if the deferred write buffer is full) and it could grow as large as 2500 bytes (if the deferred write buffer is empty.)</source>
          <target state="translated">あなたは設定でき &lt;code&gt;dw_size&lt;/code&gt; 延期ライト・バッファに保存できるデータの量を制限するためのオプションを。この制限は、合計メモリ制限を超えることはできません。たとえば、 &lt;code&gt;dw_size&lt;/code&gt; を1000に設定し、 &lt;code&gt;memory&lt;/code&gt; を2500に設定した場合、延期された書き込みの1000バイト以下が保存されます。読み取りキャッシュに使用可能なスペースはさまざまですが、少なくとも1500バイト（据え置き書き込みバッファーがいっぱいの場合）であり、2500バイトまで大きくなる可能性があります（据え置き書き込みバッファーが空の場合）。</target>
        </trans-unit>
        <trans-unit id="fbe802847d2e9437afa3772a7f3ed12ac0cb75f5" translate="yes" xml:space="preserve">
          <source>You may use any combination of these three values 'SUCCESS','FAILURE','DELAY' in the anonymous array reference as defined by RFC3461 (see &lt;a href=&quot;http://www.ietf.org/rfc/rfc3461.txt&quot;&gt;http://www.ietf.org/rfc/rfc3461.txt&lt;/a&gt; for more information. Note: quotations in this topic from same.).</source>
          <target state="translated">RFC3461（詳細については、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3461.txt&quot;&gt;http：&lt;/a&gt; //www.ietf.org/rfc/rfc3461.txtを参照）で定義されている匿名配列参照で、これら3つの値「SUCCESS」、「FAILURE」、「DELAY」の任意の組み合わせを使用できます。注：このトピックの引用は同じです。）</target>
        </trans-unit>
        <trans-unit id="3726ab64bc777be024735266d80e288f34e7bd83" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;mv&lt;/code&gt; alias for this function in the same way that you may use the &lt;code&gt;cp&lt;/code&gt; alias for &lt;code&gt;copy&lt;/code&gt; .</source>
          <target state="translated">あなたは使用すること &lt;code&gt;mv&lt;/code&gt; は、使用するのと同じように、この関数のエイリアスを &lt;code&gt;cp&lt;/code&gt; のエイリアスを &lt;code&gt;copy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9368b724095114d596f9a9bbd047855f785492a1" translate="yes" xml:space="preserve">
          <source>You may use the syntax &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; File::Copy &quot;cp&quot;&lt;/code&gt; to get at the &lt;code&gt;cp&lt;/code&gt; alias for this function. The syntax is</source>
          <target state="translated">構文 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; File::Copy &quot;cp&quot;&lt;/code&gt; を使用して、この関数の &lt;code&gt;cp&lt;/code&gt; エイリアスを取得できます。構文は</target>
        </trans-unit>
        <trans-unit id="2ef4fe61a399da32f9cc97283defa049459439a2" translate="yes" xml:space="preserve">
          <source>You may want to configure something like</source>
          <target state="translated">のような設定をするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="274166c866cd17a4a70da3e9dd16359e3df50e0e" translate="yes" xml:space="preserve">
          <source>You may want to use the &lt;code&gt;&lt;a href=&quot;perlrecharclass#Digits&quot;&gt;/\d/&lt;/a&gt;&lt;/code&gt; construct instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;perlrecharclass#Digits&quot;&gt;/\d/&lt;/a&gt;&lt;/code&gt; 構成を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="3d3a0b34238678a39ac71745f1262bf0f4700e24" translate="yes" xml:space="preserve">
          <source>You may want to use the &lt;code&gt;&lt;a href=&quot;perlrecharclass#Whitespace&quot;&gt;/\s/&lt;/a&gt;&lt;/code&gt; construct instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;perlrecharclass#Whitespace&quot;&gt;/\s/&lt;/a&gt;&lt;/code&gt; 構成を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="30ce0fc76dee65d768e8b8edbb86d17b3ec69cef" translate="yes" xml:space="preserve">
          <source>You may want to use the &lt;code&gt;&lt;a href=&quot;perlrecharclass#Word-characters&quot;&gt;/\w/&lt;/a&gt;&lt;/code&gt; construct instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;perlrecharclass#Word-characters&quot;&gt;/\w/&lt;/a&gt;&lt;/code&gt; 構成を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="599db7e90374e2462ae43e1deb74b5ede6e00ac9" translate="yes" xml:space="preserve">
          <source>You may wish to put your version of perl in the PATH of all users by changing the link</source>
          <target state="translated">リンクを変更して、あなたのバージョンのperlをすべてのユーザのPATHに置くことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a667970ef9d2de2018d0cc9d89b6040168c92e68" translate="yes" xml:space="preserve">
          <source>You might also be interested in using the &lt;a href=&quot;benchmark&quot;&gt;Benchmark&lt;/a&gt; to measure and compare code snippets.</source>
          <target state="translated">また、&lt;a href=&quot;benchmark&quot;&gt;ベンチマーク&lt;/a&gt;を使用してコードスニペットを測定および比較することもできます。</target>
        </trans-unit>
        <trans-unit id="f2fb8d4423459616a83c78e11c0c6368281abff5" translate="yes" xml:space="preserve">
          <source>You might also find it more fun to use the standard &lt;a href=&quot;tie/file&quot;&gt;Tie::File&lt;/a&gt; module, or the &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; module's &lt;code&gt;$DB_RECNO&lt;/code&gt; bindings, which allow you to tie an array to a file so that accessing an element of the array actually accesses the corresponding line in the file.</source>
          <target state="translated">また、標準の&lt;a href=&quot;tie/file&quot;&gt;Tie :: File&lt;/a&gt;モジュール、または&lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;モジュールの &lt;code&gt;$DB_RECNO&lt;/code&gt; バインディングを使用すると、配列の要素にアクセスすることで実際にファイル。</target>
        </trans-unit>
        <trans-unit id="e08469744ffe89846f236eef2581143171c3fbcd" translate="yes" xml:space="preserve">
          <source>You might also have loaded that from a function:</source>
          <target state="translated">関数から読み込んだこともあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="95a16ffa9a148d97aba69dab68818a05442a9c0f" translate="yes" xml:space="preserve">
          <source>You might also see the terms &lt;b&gt;getter&lt;/b&gt; and &lt;b&gt;setter&lt;/b&gt;. These are two types of accessors. A getter gets the attribute's value, while a setter sets it. Another term for a setter is &lt;b&gt;mutator&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;getter&lt;/b&gt;および&lt;b&gt;setter&lt;/b&gt;という用語も表示される場合があります。これらは2種類のアクセサです。ゲッターは属性の値を取得し、セッターはそれを設定します。セッターの別の用語は&lt;b&gt;ミューテーターです&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a6f4008d05ac5a7684642f452fcea99bbe63649d" translate="yes" xml:space="preserve">
          <source>You might also think of closure as a way to write a subroutine template without using eval(). Here's a small example of how closures work:</source>
          <target state="translated">eval()を使わずにサブルーチンのテンプレートを書く方法としてクロージャを考えることもできるかもしれません。ここでは、クロージャがどのように動作するかの小さな例を示します。</target>
        </trans-unit>
        <trans-unit id="b07a183cbfa7c2c5ada23e1358bb836c0036ff82" translate="yes" xml:space="preserve">
          <source>You might also want to check out &lt;a href=&quot;perlfaq8#How-do-I-keep-my-own-module%2flibrary-directory%3f&quot;&gt;How do I keep my own module/library directory? in perlfaq8&lt;/a&gt;.</source>
          <target state="translated">また&lt;a href=&quot;perlfaq8#How-do-I-keep-my-own-module%2flibrary-directory%3f&quot;&gt;、自分のモジュール/ライブラリディレクトリをどのように保持&lt;/a&gt;するかを確認することもできます。perlfaq8で。</target>
        </trans-unit>
        <trans-unit id="c9d50c5088a6a6db1dd16f71b5a0b7ad311259d2" translate="yes" xml:space="preserve">
          <source>You might also want to employ anonymous functions for simple signal handlers:</source>
          <target state="translated">また、単純なシグナルハンドラには匿名関数を使用するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="c4f0a4c3456aabab2b8397ba18c3d239195efdd9" translate="yes" xml:space="preserve">
          <source>You might also want to have GNU groff for OS/390 installed before running the &quot;make install&quot; step for Perl.</source>
          <target state="translated">また、Perlの &quot;make install &quot;ステップを実行する前に、GNU groff for OS/390をインストールしておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="2fa0f7304d269ada4e265c5dcd91a35489923597" translate="yes" xml:space="preserve">
          <source>You might also want to trap any errors by wrapping an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; block around the whole thing.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ブロックを全体にラップして、エラーをトラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="ae14caefeb104abfd32e1ac4b08ddaa6c43442c2" translate="yes" xml:space="preserve">
          <source>You might be tempted to think that deferred writing is like transactions, with &lt;code&gt;flush&lt;/code&gt; as &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;discard&lt;/code&gt; as &lt;code&gt;rollback&lt;/code&gt; , but it isn't, so don't.</source>
          <target state="translated">遅延書き込みはトランザクションのようであり、 &lt;code&gt;flush&lt;/code&gt; が &lt;code&gt;commit&lt;/code&gt; 、 &lt;code&gt;discard&lt;/code&gt; が &lt;code&gt;rollback&lt;/code&gt; であると考えたくなるかもしれませんが、そうではありません。</target>
        </trans-unit>
        <trans-unit id="eadb7f27713b1af6126dec14d8fa3f25be31b545" translate="yes" xml:space="preserve">
          <source>You might be tempted to use &lt;code&gt;$#array + 1&lt;/code&gt; to tell you how many items there are in an array. Don't bother. As it happens, using &lt;code&gt;@array&lt;/code&gt; where Perl expects to find a scalar value (&quot;in scalar context&quot;) will give you the number of elements in the array:</source>
          <target state="translated">&lt;code&gt;$#array + 1&lt;/code&gt; を使用して、配列内の項目の数を通知したくなるかもしれません。気にしないでください。偶然にも、Perlがスカラー値（ &quot;スカラーコンテキスト内&quot;）を見つけることを期待している場所で &lt;code&gt;@array&lt;/code&gt; を使用すると、配列内の要素の数がわかります。</target>
        </trans-unit>
        <trans-unit id="cdd5e43c44200a95eaa3aa45d374b3ef4d1b96c7" translate="yes" xml:space="preserve">
          <source>You might consider using just Math::BigInt or Math::BigFloat, since they allow you finer control over what get's done in which module/space. For instance, simple loop counters will be Math::BigInts under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bignum;&lt;/code&gt; and this is slower than keeping them as Perl scalars:</source>
          <target state="translated">Math :: BigIntまたはMath :: BigFloatだけを使用することを検討してください。これにより、どのモジュール/スペースで何が行われるかをより細かく制御できます。たとえば、単純なループカウンターは、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bignum;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;いるときにMath :: BigIntsになります。これは、Perlスカラーとして保持するよりも遅くなります。</target>
        </trans-unit>
        <trans-unit id="602086881bebd3c9c81540dfd1686b9dc1e9a7c1" translate="yes" xml:space="preserve">
          <source>You might expect this to output &quot;12&quot;. In fact, it prints &quot;&amp;lt;&quot;: the ASCII result of treating &quot;|&quot; as a bitwise string operator - that is, the result of treating the operands as the strings &quot;4&quot; and &quot;8&quot; rather than numbers. The fact that numify (&lt;code&gt;0+&lt;/code&gt; ) is implemented but stringify (&lt;code&gt;&quot;&quot;&lt;/code&gt; ) isn't makes no difference since the latter is simply autogenerated from the former.</source>
          <target state="translated">あなたはこれが「12」を出力すると期待するかもしれません。実際、「&amp;lt;」を出力します：「|」を処理したASCII結果 ビット単位の文字列演算子として、つまり、オペランドを数値ではなく文字列「4」と「8」として扱った結果。numify（ &lt;code&gt;0+&lt;/code&gt; ）は実装されていますがstringify（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）は実装されていませんが、後者は前者から単純に自動生成されるため、違いはありません。</target>
        </trans-unit>
        <trans-unit id="ec2b6e72cccd9ea401a92e1c584d3ce729f0ed23" translate="yes" xml:space="preserve">
          <source>You might find these links useful:</source>
          <target state="translated">これらのリンクが役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="7041884103fb3be2206f9857bdd3e655cde0bf34" translate="yes" xml:space="preserve">
          <source>You might have expected test 3 to fail because it seems to a more general purpose version of test 1. The important difference between them is that test 3 contains a quantifier (&lt;code&gt;\D*&lt;/code&gt; ) and so can use backtracking, whereas test 1 will not. What's happening is that you've asked &quot;Is it true that at the start of $x, following 0 or more non-digits, you have something that's not 123?&quot; If the pattern matcher had let &lt;code&gt;\D*&lt;/code&gt; expand to &quot;ABC&quot;, this would have caused the whole pattern to fail.</source>
          <target state="translated">テスト3は、テスト1のより汎用的なバージョンのように見えるため、失敗することが予想された可能性があります。これらの重要な違いは、テスト3には数量詞（ &lt;code&gt;\D*&lt;/code&gt; ）が含まれているため、バックトラッキングを使用できますが、テスト1はそうではありません。何が起こっているのですか？「$ xの始めに、0以上の非数字に続いて、123ではないものがあるというのは本当ですか？」パターンマッチャーが &lt;code&gt;\D*&lt;/code&gt; を &quot;ABC&quot;に拡張させた場合、これによりパターン全体が失敗しました。</target>
        </trans-unit>
        <trans-unit id="f5bd0f9bdd3b3f8f6c3d7920cb7c553cce6d6284" translate="yes" xml:space="preserve">
          <source>You might like to read Mark Jason Dominus's &quot;Suffering From Buffering&quot; at &lt;a href=&quot;http://perl.plover.com/FAQs/Buffering.html&quot;&gt;http://perl.plover.com/FAQs/Buffering.html&lt;/a&gt; .</source>
          <target state="translated">Mark Jason Dominusの &quot;Suffering From Buffering&quot;（&lt;a href=&quot;http://perl.plover.com/FAQs/Buffering.html&quot;&gt;http://perl.plover.com/FAQs/Buffering.html）&lt;/a&gt;を読んでください。</target>
        </trans-unit>
        <trans-unit id="d5e0af742e5a24576127c7192de3da3f64667af3" translate="yes" xml:space="preserve">
          <source>You might like to use &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; to read in a program configuration file. Manual error checking can be done this way:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; を使用してプログラム構成ファイルを読み取ることができます。手動エラーチェックは次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="ea3e43e35b42104c2dfdbbb81763643be691010c" translate="yes" xml:space="preserve">
          <source>You might like to use &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; to read in a program configuration file. Manual error checking can be done this way:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; を使用してプログラム構成ファイルを読み取ることができます。手動エラーチェックは次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="052100b20ac103ab19054e70ed9a9d17e374ebf5" translate="yes" xml:space="preserve">
          <source>You might love it. You might feel that everyone else needs it. But there might not actually be any real demand for it out there. If you're unsure about the demand your module will have, consider sending out feelers on the &lt;code&gt;comp.lang.perl.modules&lt;/code&gt; newsgroup, or as a last resort, ask the modules list at &lt;code&gt;modules@perl.org&lt;/code&gt; . Remember that this is a closed list with a very long turn-around time - be prepared to wait a good while for a response from them.</source>
          <target state="translated">あなたはそれを愛するかもしれません。他の誰もがそれを必要としていると感じるかもしれません。しかし、実際にはそれに対する実際の需要はないかもしれません。モジュールの需要がわからない場合は、 &lt;code&gt;comp.lang.perl.modules&lt;/code&gt; ニュースグループに報告者を送ることを検討するか、最後の手段として、modules &lt;code&gt;modules@perl.org&lt;/code&gt; モジュールリストを確認してください。これは非常に長いターンアラウンドタイムの​​クローズドリストであることを忘れないでください-それらからの応答を待つ間、準備をしてください。</target>
        </trans-unit>
        <trans-unit id="169bde04d58834aed9e29a6302664c4d13ccbcd6" translate="yes" xml:space="preserve">
          <source>You might not need all the power of XS. The Inline::C module lets you put C code directly in your Perl source. It handles all the magic to make it work. You still have to learn at least some of the perl API but you won't have to deal with the complexity of the XS support files.</source>
          <target state="translated">XS のすべての機能を必要としないかもしれません。Inline::Cモジュールを使うと、C言語のコードを直接Perlのソースに入れることができます。それを動作させるためのすべてのマジックを処理します。少なくともPerl APIの一部を学ぶ必要がありますが、XSのサポートファイルの複雑さに悩まされる必要はありません。</target>
        </trans-unit>
        <trans-unit id="3b031c43f33840adc70b02de47a8fd1daefabaa6" translate="yes" xml:space="preserve">
          <source>You might notice several familiar Perl concepts in this collection of ACM columns from Jon Bentley. The similarity to the title of the major Perl book (which came later) is not completely accidental:</source>
          <target state="translated">Jon BentleyによるACMのコラム集で、いくつかのおなじみのPerlの概念に気づくかもしれません。(後から来た)メジャーな Perl の本のタイトルとの類似性は、完全に偶然ではありません。</target>
        </trans-unit>
        <trans-unit id="66fdf1bb9d02362c3ab6fa3feaa38bdbfcec77f8" translate="yes" xml:space="preserve">
          <source>You might notice that you could use backticks for much the same effect as opening a pipe for reading:</source>
          <target state="translated">あなたはあなたが読むためのパイプを開くのとほぼ同じ効果のためにバックティックを使用することができることに気づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="42704287df9412e9063781246ba069342cd72b32" translate="yes" xml:space="preserve">
          <source>You might notice this when each of the elements of &lt;code&gt;@array&lt;/code&gt; end with a newline. You expect to print one element per line, but notice that every line after the first is indented:</source>
          <target state="translated">&lt;code&gt;@array&lt;/code&gt; の各要素が改行で終わる場合、これに気付くでしょう。1行に1つの要素を出力することを期待していますが、最初の行の後のすべての行がインデントされていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e3ccde21cef99ed04d4c1fb15da658aad8223bd5" translate="yes" xml:space="preserve">
          <source>You might prefer to go on to &lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt; instead of &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;; it discusses lists of lists and multidimensional arrays in detail. After that, you should move on to &lt;a href=&quot;perldsc&quot;&gt;perldsc&lt;/a&gt;; it's a Data Structure Cookbook that shows recipes for using and printing out arrays of hashes, hashes of arrays, and other kinds of data.</source>
          <target state="translated">&lt;a href=&quot;perllol&quot;&gt;perlrefの&lt;/a&gt;代わりに&lt;a href=&quot;perlref&quot;&gt;perllol&lt;/a&gt;を使用することをお勧めします。リストのリストと多次元配列について詳しく説明します。その後、&lt;a href=&quot;perldsc&quot;&gt;perldscに&lt;/a&gt;移動する必要があります。これは、ハッシュの配列、配列のハッシュ、およびその他の種類のデータを使用および出力するためのレシピを示すデータ構造クックブックです。</target>
        </trans-unit>
        <trans-unit id="a6310ecb45c68b753610be852acb876a80aa3c10" translate="yes" xml:space="preserve">
          <source>You might relate this to a fictional 'Translate' module:</source>
          <target state="translated">これを架空の「翻訳」モジュールに関連づけることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="13ab2e65d93fb0059f6f55ed6a75f22913178d96" translate="yes" xml:space="preserve">
          <source>You might remember &lt;code&gt;ok() or diag()&lt;/code&gt; with the mnemonic &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;() or
&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;()&lt;/code&gt; .</source>
          <target state="translated">ニーモニック &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;() or &lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;()&lt;/code&gt; （）または &lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;（）で &lt;code&gt;ok() or diag()&lt;/code&gt; を覚えているかもしれません。</target>
        </trans-unit>
        <trans-unit id="37d4864369383102be2440cd5c5cb4b7987e528b" translate="yes" xml:space="preserve">
          <source>You might sometimes see reference to Rule 1 and Rule 2. Larry's power as Supreme Court is expressed in The Rules:</source>
          <target state="translated">ルール1とルール2への言及を時々目にすることがあるかもしれません。ラリーの最高裁判所としての力は、The Rulesで表現されています。</target>
        </trans-unit>
        <trans-unit id="f5b7d1197bc89948add2ed3f352d319d84d2e28b" translate="yes" xml:space="preserve">
          <source>You might try &lt;a href=&quot;encode/guess&quot;&gt;Encode::Guess&lt;/a&gt;, but it has a number of limitations.</source>
          <target state="translated">&lt;a href=&quot;encode/guess&quot;&gt;Encode :: Guessを&lt;/a&gt;試すこともできますが、いくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="193b85d5b4fe0e90a0d9c66d7d0b78036e923063" translate="yes" xml:space="preserve">
          <source>You might want to do the same thing for expressing key bindings or the like (since hardwiring &quot;q&quot; as the binding for the function that quits a screen/menu/program is useful only if your language happens to associate &quot;q&quot; with &quot;quit&quot;!)</source>
          <target state="translated">キーバインディングなどの表現についても同じことをした方がいいかもしれません(画面/メニュー/プログラムを終了させる関数のバインディングとして &quot;q &quot;をハードワイヤリングするのは、あなたの言語が &quot;q &quot;と &quot;quit &quot;を関連付けている場合にのみ有用です!)。</target>
        </trans-unit>
        <trans-unit id="b5d495d915ce638287be04e211dc9e03d5ac46bf" translate="yes" xml:space="preserve">
          <source>You might want to keep these desktop references close by your keyboard:</source>
          <target state="translated">これらのデスクトップリファレンスをキーボードのそばに置いておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="0d1eb54f95a4e04b463b84dfe6de9e8067695824" translate="yes" xml:space="preserve">
          <source>You might wonder why &lt;code&gt;'.'&lt;/code&gt; matches everything but &lt;code&gt;&quot;\n&quot;&lt;/code&gt; - why not every character? The reason is that often one is matching against lines and would like to ignore the newline characters. For instance, while the string &lt;code&gt;&quot;\n&quot;&lt;/code&gt; represents one line, we would like to think of it as empty. Then</source>
          <target state="translated">なぜ &lt;code&gt;'.'&lt;/code&gt; なのか不思議に思うかもしれません。 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 以外のすべてに一致-なぜすべての文字ではないのですか？その理由は、多くの場合、行と照合していて、改行文字を無視したいからです。たとえば、文字列 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; は1行を表しますが、空であると考えます。その後</target>
        </trans-unit>
        <trans-unit id="e851d081cca3db1538b95133dfa4e2591e66b038" translate="yes" xml:space="preserve">
          <source>You must Configure perl with</source>
          <target state="translated">perl を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c18657846c86f19718177ea80036f400e403ff68" translate="yes" xml:space="preserve">
          <source>You must be triply conscious of cross-platform concerns. This usually boils down to using &lt;a href=&quot;file/spec&quot;&gt;File::Spec&lt;/a&gt;, avoiding things like &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; unless absolutely necessary, and not assuming that a given character has a particular ordinal value (code point) or that its UTF-8 representation is composed of particular bytes.</source>
          <target state="translated">クロスプラットフォームの問題については三重に意識している必要があります。これは通常、&lt;a href=&quot;file/spec&quot;&gt;File :: Specの&lt;/a&gt;使用に帰着し、絶対に必要な場合を除いて &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; （）などを回避し、特定の文字が特定の序数値（コードポイント）を持っている、またはそのUTF-8表現が構成されていると想定しません特定のバイトの。</target>
        </trans-unit>
        <trans-unit id="8daf2a31e4062052794994fb1a77c6bf915b4376" translate="yes" xml:space="preserve">
          <source>You must call &lt;code&gt;plan(...)&lt;/code&gt; once and only once. You should call it in a &lt;code&gt;BEGIN {...}&lt;/code&gt; block, like so:</source>
          <target state="translated">&lt;code&gt;plan(...)&lt;/code&gt; は 1回だけ呼び出す必要があります。次のように、 &lt;code&gt;BEGIN {...}&lt;/code&gt; ブロックで呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="0d9b102a51e636379025c1716da72ec7158d144f" translate="yes" xml:space="preserve">
          <source>You must have a plan.</source>
          <target state="translated">計画を立てなければなりません。</target>
        </trans-unit>
        <trans-unit id="f323bd128da70502b49397ad0f7c4f483197be9e" translate="yes" xml:space="preserve">
          <source>You must have a project base class, which you load, and which you then use as the first argument in the call to YourProjClass-&amp;gt;get_handle(...). It should derive (whether directly or indirectly) from Locale::Maketext. It &lt;b&gt;doesn't matter&lt;/b&gt; how you name this class, although assuming this is the localization component of your Super Mega Program, good names for your project class might be SuperMegaProgram::Localization, SuperMegaProgram::L10N, SuperMegaProgram::I18N, SuperMegaProgram::International, or even SuperMegaProgram::Languages or SuperMegaProgram::Messages.</source>
          <target state="translated">ロードし、YourProjClass-&amp;gt; get_handle（...）への呼び出しの最初の引数として使用するプロジェクト基本クラスが必要です。Locale :: Maketextから（直接的または間接的に）派生する必要があります。このクラスの名前はどのように指定&lt;b&gt;してもかまいません&lt;/b&gt;が、これはスーパーメガプログラムのローカリゼーションコンポーネントであると想定していますが、プロジェクトクラスの適切な名前は、SuperMegaProgram :: Localization、SuperMegaProgram :: L10N、SuperMegaProgram :: I18N、SuperMegaProgram ::などです。インターナショナル、またはSuperMegaProgram :: LanguagesまたはSuperMegaProgram :: Messages。</target>
        </trans-unit>
        <trans-unit id="739cc975a787be41633b91aa5de71e36b127ddec" translate="yes" xml:space="preserve">
          <source>You must install the &lt;code&gt;Expect&lt;/code&gt; module to use &lt;code&gt;eexpect&lt;/code&gt; . CPAN.pm does not install it for you.</source>
          <target state="translated">&lt;code&gt;eexpect&lt;/code&gt; を使用するには、 &lt;code&gt;Expect&lt;/code&gt; モジュールをインストールする必要があります。CPAN.pmはそれをインストールしません。</target>
        </trans-unit>
        <trans-unit id="72fde4fbc93c4a749f9096aea6d3bd9a70e80b1d" translate="yes" xml:space="preserve">
          <source>You must install the &lt;code&gt;Expect&lt;/code&gt; module to use &lt;code&gt;expect&lt;/code&gt; . CPAN.pm does not install it for you.</source>
          <target state="translated">&lt;code&gt;expect&lt;/code&gt; を使用するには、 &lt;code&gt;Expect&lt;/code&gt; モジュールをインストールする必要があります。CPAN.pmはそれをインストールしません。</target>
        </trans-unit>
        <trans-unit id="4490a879ca5d596cdf1f67e2681afb5d54f17c52" translate="yes" xml:space="preserve">
          <source>You must make sure that any paths and path components are properly surrounded with double-quotes if they contain spaces. For example, &lt;code&gt;$potential_libs&lt;/code&gt; could be (literally):</source>
          <target state="translated">パスとパスコンポーネントにスペースが含まれている場合は、二重引用符で適切に囲む必要があります。たとえば、 &lt;code&gt;$potential_libs&lt;/code&gt; は（文字通り）次のようになります。</target>
        </trans-unit>
        <trans-unit id="30c4fd5a99a25cad991844e3c5c4f7509fd399a0" translate="yes" xml:space="preserve">
          <source>You must open your files before you print to them.</source>
          <target state="translated">印刷する前にファイルを開く必要があります。</target>
        </trans-unit>
        <trans-unit id="45897939488bd63d927112e2ca64e2fec16238a0" translate="yes" xml:space="preserve">
          <source>You must override the abstract methods as noted above.</source>
          <target state="translated">上記のように抽象メソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="2aa81922480ed45c435c4cf0c99c4c4aba3634fc" translate="yes" xml:space="preserve">
          <source>You must use &lt;code&gt;elsif&lt;/code&gt; rather than &lt;code&gt;else if&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;else if&lt;/code&gt; は、 &lt;code&gt;elsif&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="39c7a78d87a43f543e7180d2370d441ee16c546b" translate="yes" xml:space="preserve">
          <source>You must use an ANSI C compiler to build perl. Perl can be compiled with either Sun's add-on C compiler or with gcc. The C compiler that shipped with SunOS4 will not do.</source>
          <target state="translated">Perl をビルドするには ANSI C コンパイラを使用する必要があります。Perl は Sun のアドオン C コンパイラか gcc でコンパイルできます。SunOS4に同梱されているCコンパイラではコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="c168b8ed4e8b351eba14fd33d598861cf2969e22" translate="yes" xml:space="preserve">
          <source>You must yourself do any alignment or padding by inserting, for example, enough &lt;code&gt;&quot;x&quot;&lt;/code&gt; es while packing. There is no way for pack() and unpack() to know where characters are going to or coming from, so they handle their output and input as flat sequences of characters.</source>
          <target state="translated">たとえば、パッキング中に十分な &lt;code&gt;&quot;x&quot;&lt;/code&gt; esを挿入することにより、位置合わせまたはパディングを自分で行う必要があります。pack（）とunpack（）は、文字がどこに行き来するかを知る方法がないため、出力と入力を文字のフラットシーケンスとして処理します。</target>
        </trans-unit>
        <trans-unit id="495ba80801ecf71f6944f8f06ac3f6b0ec33f568" translate="yes" xml:space="preserve">
          <source>You need a &quot;make&quot; program to build the sources. If you are using Visual C++ or the Windows SDK tools, nmake will work. Builds using the gcc need dmake.</source>
          <target state="translated">ソースをビルドするには、&quot;make &quot;プログラムが必要です。Visual C++や Windows SDK ツールを使用している場合は、nmake が動作します。gcc を使ったビルドには dmake が必要です。</target>
        </trans-unit>
        <trans-unit id="384c0cf5619a59f9ce19e0cd720b3f9bfb700b5a" translate="yes" xml:space="preserve">
          <source>You need a separate perl executable</source>
          <target state="translated">別の perl 実行ファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="aa34c474feea2ebcd51fe52bc61e21c7aa534d7c" translate="yes" xml:space="preserve">
          <source>You need an installed and working gccsdk cross compiler &lt;a href=&quot;http://gccsdk.riscos.info/&quot;&gt;http://gccsdk.riscos.info/&lt;/a&gt; and REXEN &lt;a href=&quot;http://www.cp15.org/programming/&quot;&gt;http://www.cp15.org/programming/&lt;/a&gt;</source>
          <target state="translated">インストールされ、動作するgccsdkクロスコンパイラ&lt;a href=&quot;http://gccsdk.riscos.info/&quot;&gt;http://gccsdk.riscos.info/&lt;/a&gt;およびREXEN &lt;a href=&quot;http://www.cp15.org/programming/&quot;&gt;http://www.cp15.org/programming/&lt;/a&gt;が必要です。</target>
        </trans-unit>
        <trans-unit id="4caefc1d4e2631b1200ec354d43fce32735ee7c7" translate="yes" xml:space="preserve">
          <source>You need at the very least AmigaOS version 2.0. Recommended is version 3.1.</source>
          <target state="translated">最低でもAmigaOSのバージョン2.0が必要です。推奨はバージョン3.1です。</target>
        </trans-unit>
        <trans-unit id="5333f88ac5bf8fd24e224f0d8051b5fec4dfc6b5" translate="yes" xml:space="preserve">
          <source>You need the Unix emulation for AmigaOS, whose most important part is &lt;b&gt;ixemul.library&lt;/b&gt;. For a minimum setup, get the latest versions of the following packages from the Aminet archives ( &lt;a href=&quot;http://www.aminet.net/~aminet/&quot;&gt;http://www.aminet.net/~aminet/&lt;/a&gt; ):</source>
          <target state="translated">AmigaOSのUnixエミュレーションが必要&lt;b&gt;です&lt;/b&gt;。その最も重要な部分は&lt;b&gt;ixemul.library&lt;/b&gt;です。最小限のセットアップでは、Aminetアーカイブ（&lt;a href=&quot;http://www.aminet.net/~aminet/&quot;&gt;http://www.aminet.net/~aminet/&lt;/a&gt;）から次のパッケージの最新バージョンを入手してください。</target>
        </trans-unit>
        <trans-unit id="46e89c73cbc6b5dd39fd756e0f6110a1446e5be5" translate="yes" xml:space="preserve">
          <source>You need the following files to build perl (or add new modules):</source>
          <target state="translated">perlをビルドする(または新しいモジュールを追加する)ためには、以下のファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="9f9c012bcf4380f633cf4f7379c24b96c60ecb4b" translate="yes" xml:space="preserve">
          <source>You need to add either braces or blanks to disambiguate.</source>
          <target state="translated">曖昧さを解消するには、中括弧または空白を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="cd33ddce78ff1c7340f83b621a3b3b7072ee0d07" translate="yes" xml:space="preserve">
          <source>You need to apply the patches in</source>
          <target state="translated">でパッチを適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e3349f1cb25ac13b86ae16e145a0b5decd29f3c" translate="yes" xml:space="preserve">
          <source>You need to correct all the entries which look like file paths (they currently start with &lt;code&gt;f:/&lt;/code&gt;).</source>
          <target state="translated">ファイルパスのように見えるすべてのエントリを修正する必要があります（現在は &lt;code&gt;f:/&lt;/code&gt; で始まります）。</target>
        </trans-unit>
        <trans-unit id="ac623d9d2638d8e7b4db69f0dfe7d1ff10e6b5e8" translate="yes" xml:space="preserve">
          <source>You need to create a local file or directory handle or a local function.</source>
          <target state="translated">ローカルのファイルやディレクトリのハンドルやローカル関数を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="f1f5eb114f0c20a6807ea82566cc5f87d3a50a5b" translate="yes" xml:space="preserve">
          <source>You need to fetch the latest perl source (including developers releases). With some probability it is located in</source>
          <target state="translated">最新のPerlソース(開発者のリリースを含む)を取得する必要があります。ある程度の確率で</target>
        </trans-unit>
        <trans-unit id="965f03aeeab996c747b3c012ec9e65e74625b61a" translate="yes" xml:space="preserve">
          <source>You need to give a global variable a temporary value, especially $_.</source>
          <target state="translated">グローバル変数に一時的な値を与える必要があります。</target>
        </trans-unit>
        <trans-unit id="4566431899ec1f0737bac24e93a9db0aa49d528e" translate="yes" xml:space="preserve">
          <source>You need to have the latest &lt;b&gt;ixemul&lt;/b&gt; (Unix emulation for Amiga) from Aminet.</source>
          <target state="translated">&lt;b&gt;Aminet&lt;/b&gt;の最新の&lt;b&gt;ixemul&lt;/b&gt;（AmigaのUNIXエミュレーション）が必要です。</target>
        </trans-unit>
        <trans-unit id="a7ac6e008f84ae7c7059b678b8182fe611763a32" translate="yes" xml:space="preserve">
          <source>You need to have the latest EMX development environment, the full GNU tool suite (gawk renamed to awk, and GNU</source>
          <target state="translated">最新のEMX開発環境、完全なGNUツールスイート(gawkがawkに改名され、GNU</target>
        </trans-unit>
        <trans-unit id="f0226c50fdff6c76ac2211b429b8387e73ade57a" translate="yes" xml:space="preserve">
          <source>You need to have zlib 1.2.1 or better if you want to use the &lt;code&gt;-Merge&lt;/code&gt; option with &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; , &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; and &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-Merge&lt;/code&gt; オプションを &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; 、 &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; 、および &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; 使用する場合は、zlib 1.2.1以降が必要です。</target>
        </trans-unit>
        <trans-unit id="f7d2bb828dde58ca4350b2c6d38a82848f926212" translate="yes" xml:space="preserve">
          <source>You need to make sure your script is executable, is accessible by the user CGI is running the script under (which is probably not the user account you tested it under), does not rely on any environment variables (like PATH) from the user it isn't running under, and isn't in a location where the CGI server can't find it, basically, more or less. Please see the following for more information:</source>
          <target state="translated">スクリプトが実行可能であること、CGI がスクリプトを実行しているユーザ (おそらくテストしたユーザアカウントではないでしょう)からアクセス可能であること、実行していないユーザからの環境変数 (PATH など)に依存していないこと、CGI サーバが見つけられない場所にないこと、基本的には多かれ少なかれ確認する必要があります。詳しくは以下をご覧ください。</target>
        </trans-unit>
        <trans-unit id="28dffbeaeb79cbefc3a6182c3945facf9e0c58d9" translate="yes" xml:space="preserve">
          <source>You need to pass references to these objects. See &lt;a href=&quot;perlsub#Pass-by-Reference&quot;&gt;Pass by Reference in perlsub&lt;/a&gt; for this particular question, and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; for information on references.</source>
          <target state="translated">これらのオブジェクトへの参照を渡す必要があります。この特定の質問について&lt;a href=&quot;perlsub#Pass-by-Reference&quot;&gt;はperlsubの&lt;/a&gt;「Pass by Reference」を、リファレンスについては「&lt;a href=&quot;perlref&quot;&gt;perlref」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3725b76142cf0ba93578fc0f4b37b143a50c105" translate="yes" xml:space="preserve">
          <source>You need to perform the same general operations on related types of data, but with slight variations depending on the specific type of data the operations are applied to.</source>
          <target state="translated">関連するタイプのデータに対しても同じ一般的な操作を行う必要がありますが、操作が適用される特定のタイプのデータによって若干の違いがあります。</target>
        </trans-unit>
        <trans-unit id="eca7b2277d21c0c8eb2a5172b673ea24b48da4eb" translate="yes" xml:space="preserve">
          <source>You need to use &lt;code&gt;sv_magicext&lt;/code&gt; to add magic to SvREADONLY SVs and also to add more than one instance of the same 'how'.</source>
          <target state="translated">&lt;code&gt;sv_magicext&lt;/code&gt; を使用してSvREADONLY SVにマジックを追加し、同じ 'how'の複数のインスタンスを追加する必要もあります。</target>
        </trans-unit>
        <trans-unit id="48a3262ccbefb20acd592d55306e17827a38c688" translate="yes" xml:space="preserve">
          <source>You now have better understanding of what a source filter is, and you might even have a possible use for them. If you feel like playing with source filters but need a bit of inspiration, here are some extra features you could add to the Debug filter.</source>
          <target state="translated">これでソースフィルタとは何かがよく理解できたでしょうし、ソースフィルタを使う可能性も出てきたかもしれません。ソースフィルタをいじってみたいけど、もう少しインスピレーションが欲しいという方のために、デバッグフィルタに追加できる機能をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="73cbac231eb90b456375cc000b5becdd4bf8f684" translate="yes" xml:space="preserve">
          <source>You probably cannot fix the thing that runs perl, but you can change how perl outputs its warnings by defining a custom warning and die functions.</source>
          <target state="translated">perlを動かすものを修正することはおそらくできないでしょうが、カスタムの警告関数やdie関数を定義することで、perlが警告を出力する方法を変更することができます。</target>
        </trans-unit>
        <trans-unit id="c42726aad22724c022f0c559e39f4d6e8477c11a" translate="yes" xml:space="preserve">
          <source>You probably cannot mix &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; calls, because &lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; is often implemented using &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; は多くの場合 &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; を使用して実装されるため、おそらく &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 呼び出しを混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="15661abf22e3cef9f933847127ca80cfb4161e88" translate="yes" xml:space="preserve">
          <source>You probably cannot mix &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; calls, because &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; is often implemented using &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; は多くの場合 &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; を使用して実装されるため、おそらく &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 呼び出しを混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="c6ea02ffa42491538c740d65bba124e60d5ff937" translate="yes" xml:space="preserve">
          <source>You probably expect this code to print the equivalent of</source>
          <target state="translated">おそらく、このコードは</target>
        </trans-unit>
        <trans-unit id="d62ac8cab5911278724664b4481b34fb6ef41dfa" translate="yes" xml:space="preserve">
          <source>You probably meant to use &lt;code&gt;$]&lt;/code&gt; instead. &lt;code&gt;$[&lt;/code&gt; is the base for indexing arrays. &lt;code&gt;$]&lt;/code&gt; is the Perl version number in decimal.</source>
          <target state="translated">代わりに &lt;code&gt;$]&lt;/code&gt; を使用するつもりでした。 &lt;code&gt;$[&lt;/code&gt; は配列のインデックス付けのベースです。 &lt;code&gt;$]&lt;/code&gt; は、Perlのバージョン番号（10進数）です。</target>
        </trans-unit>
        <trans-unit id="fd777891ad8556771da5ce520e6dfb0017006c11" translate="yes" xml:space="preserve">
          <source>You probably shouldn't rely upon the &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; being podded out forever. Not all pod translators are well-behaved in this regard, and perhaps the compiler will become pickier.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; が永久にポッドアウトされることに依存すべきではありません。この点に関して、すべてのポッドトランスレーターが適切に動作するわけではなく、おそらくコンパイラーがより厳格になるでしょう。</target>
        </trans-unit>
        <trans-unit id="f7e43d034a25f1af2139047ca7966917ab4cd1dd" translate="yes" xml:space="preserve">
          <source>You probably want to use one of the assortment of wrappers, such as &lt;code&gt;SvSetSV&lt;/code&gt; , &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; , &lt;code&gt;SvSetMagicSV&lt;/code&gt; and &lt;code&gt;SvSetMagicSV_nosteal&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SvSetSV&lt;/code&gt; 、 &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; 、 &lt;code&gt;SvSetMagicSV&lt;/code&gt; 、SvSetMagicSV_nostealなどのラッパーの種類のいずれかを使用したい場合があり &lt;code&gt;SvSetMagicSV_nosteal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d6ef8cdce7f3fb77e02bca3307aceacf65c4aa9" translate="yes" xml:space="preserve">
          <source>You probably wrote something like this:</source>
          <target state="translated">こんなことを書いたんでしょうね。</target>
        </trans-unit>
        <trans-unit id="39ad4b4dd2e75230f3579c0483b312257f0274c5" translate="yes" xml:space="preserve">
          <source>You really need GNU make to compile this. GNU make ships by default with QNX 4.23, but you can get it from quics for earlier versions.</source>
          <target state="translated">これをコンパイルするには GNU make が必要です。GNU make はデフォルトで QNX 4.23 と一緒に出荷されますが、それ以前のバージョンの場合は quics から入手できます。</target>
        </trans-unit>
        <trans-unit id="e91eff73482d2359765ffe5506e4ead5d70a7574" translate="yes" xml:space="preserve">
          <source>You really probably want to be using &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; instead, because &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; isn't what most people think of as &quot;local&quot;. See &lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; はほとんどの人が「ローカル」と考えているものではないので &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; あなたはおそらく私の代わりに本当に使用したいと思うでしょう。詳細については&lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;、perlsubのmy（）によるプライベート変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab88c992626b72f6894fc343016d386fe947c5ce" translate="yes" xml:space="preserve">
          <source>You really probably want to be using &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; instead, because &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; isn't what most people think of as &quot;local&quot;. See &lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; はほとんどの人が「ローカル」と考えているものではないので &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; あなたはおそらく私の代わりに本当に使用したいと思うでしょう。詳細については&lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;、perlsubのmy（）によるプライベート変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d15f62d6aa63d728245cd3284fc083f9f68cff93" translate="yes" xml:space="preserve">
          <source>You see, if you call pstruct by its other incybernation, c2ph, you have a code generator that translates C code into perl code! Well, structure and union declarations at least, but that's quite a bit.</source>
          <target state="translated">ご覧のように、もしあなたがpstructを他のインサイバネーションであるc2phで呼ぶならば、Cのコードをperlのコードに変換するコードジェネレータを手に入れたことになります。まあ、少なくとも構造体とユニオンの宣言はそうですが、それはかなりのものです。</target>
        </trans-unit>
        <trans-unit id="95f74aa64cd2ea580871d2847f70b2776302bedc" translate="yes" xml:space="preserve">
          <source>You should also &quot;register&quot; your op with the Perl interpreter so that it can produce sensible error and warning messages. Since it is possible to have multiple custom ops within the one &quot;logical&quot; op type &lt;code&gt;OP_CUSTOM&lt;/code&gt; , Perl uses the value of &lt;code&gt;o-&amp;gt;op_ppaddr&lt;/code&gt; to determine which custom op it is dealing with. You should create an &lt;code&gt;XOP&lt;/code&gt; structure for each ppaddr you use, set the properties of the custom op with &lt;code&gt;XopENTRY_set&lt;/code&gt; , and register the structure against the ppaddr using &lt;code&gt;Perl_custom_op_register&lt;/code&gt; . A trivial example might look like:</source>
          <target state="translated">また、opをPerlインタープリターに「登録」して、賢明なエラーおよび警告メッセージを生成できるようにする必要もあります。 1つの「論理」opタイプ &lt;code&gt;OP_CUSTOM&lt;/code&gt; 内に複数のカスタムopを含めることができるため、Perlは &lt;code&gt;o-&amp;gt;op_ppaddr&lt;/code&gt; の値を使用して、処理するカスタムopを決定します。あなたは、作成する必要があり &lt;code&gt;XOP&lt;/code&gt; の、あなたが使用する各ppaddrための構造を持つカスタムOPのプロパティ設定 &lt;code&gt;XopENTRY_set&lt;/code&gt; を、そして使用してppaddrに対する構造登録 &lt;code&gt;Perl_custom_op_register&lt;/code&gt; を。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="8cd501f21ed6c5e9d05fc6e18329636984dc10c8" translate="yes" xml:space="preserve">
          <source>You should also check out the Frequently Asked Questions list in comp.unix.* for things like this: the answer is essentially the same. It's very system-dependent. Here's one solution that works on BSD systems:</source>
          <target state="translated">comp.unix.*の「よくある質問」リストをチェックしてみてください。答えは基本的に同じです。BSD システム上で動作する解決策があります。</target>
        </trans-unit>
        <trans-unit id="f04dff0eea092cd0ec8988c859db7bf95d5caa53" translate="yes" xml:space="preserve">
          <source>You should also check your modules, and upgrade them if necessary. For example, HTML::Entities requires version &amp;gt;= 1.32 to function correctly, even though the changelog is silent about this.</source>
          <target state="translated">また、モジュールを確認し、必要に応じてアップグレードする必要があります。たとえば、HTML :: Entitiesが正しく機能するためには、変更ログに何も書かれていないにもかかわらず、バージョン1.32以上が必要です。</target>
        </trans-unit>
        <trans-unit id="1bf271b2d5721f863cabe314c6f3ea53dab9ccef" translate="yes" xml:space="preserve">
          <source>You should also look at &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;も確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2a8e7bc27f2427aec43e373a1d93fb28c7dab24" translate="yes" xml:space="preserve">
          <source>You should also take a look at &lt;a href=&quot;perlmodstyle&quot;&gt;perlmodstyle&lt;/a&gt; for best practices in making a module.</source>
          <target state="translated">モジュールを作成する際のベストプラクティスについては、&lt;a href=&quot;perlmodstyle&quot;&gt;perlmodstyle&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="50caca8ed03bfd57a516ccc3b6dfa215ef520713" translate="yes" xml:space="preserve">
          <source>You should also try to get feedback from people who are already familiar with the module's application domain and the CPAN naming system. Authors of similar modules, or modules with similar names, may be a good place to start, as are community sites like &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perlmonks.org&quot;&gt;Perl Monks&lt;/a&gt;.</source>
          <target state="translated">また、モジュールのアプリケーションドメインとCPANネーミングシステムに既に精通しているユーザーからのフィードバックを得るようにしてください。&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perlmonks.org&quot;&gt;Perl Monksの&lt;/a&gt;ようなコミュニティサイトと同様に、類似のモジュールの作成者、または類似の名前のモジュールを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6748d5917300372787fdc7a9ff0a6b3a57b1d0d9" translate="yes" xml:space="preserve">
          <source>You should always support a &lt;code&gt;HASH&lt;/code&gt; argument to &lt;code&gt;TIEHASH&lt;/code&gt; that ties the underlying cache so that the user can specify that the cache is also persistent or that it has some other interesting semantics. The example above demonstrates how to do this, as does &lt;code&gt;Memoize::Expire&lt;/code&gt; .</source>
          <target state="translated">ユーザーは、キャッシュも永続的であるか、または他の興味深いセマンティクスを持っていることをユーザーが指定できるように、基になるキャッシュを &lt;code&gt;TIEHASH&lt;/code&gt; するTIEHASHへの &lt;code&gt;HASH&lt;/code&gt; 引数を常にサポートする必要があります。上記の例は、 &lt;code&gt;Memoize::Expire&lt;/code&gt; と同様に、これを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3be69763ec9a168e71d6a325f5feb839520bece8" translate="yes" xml:space="preserve">
          <source>You should attempt older code to fully use</source>
          <target state="translated">を完全に使用するには、古いコードを試す必要があります。</target>
        </trans-unit>
        <trans-unit id="2aa5702baea4b6cbbf8baf7ed5e04e20725d5137" translate="yes" xml:space="preserve">
          <source>You should be aware that it is unsupported, and is not claimed to be fit for any purpose. If your system allows installation of arbitrary locales, you may find the definitions useful as they are, or as a basis for the development of your own locales.</source>
          <target state="translated">これはサポートされておらず、いかなる目的にも適合するとは主張されていないことに注意すべきです。お使いのシステムが任意のロケールのインストールを許可している場合、定義はそのままでも、独自のロケールを開発するための基礎としても、役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="e3162405a76386caaa175c4a5b3c2a85402c9c86" translate="yes" xml:space="preserve">
          <source>You should be careful about creating mortal variables. Strange things can happen if you make the same value mortal within multiple contexts, or if you make a variable mortal multiple times. Thinking of &quot;Mortalization&quot; as deferred &lt;code&gt;SvREFCNT_dec&lt;/code&gt; should help to minimize such problems. For example if you are passing an SV which you</source>
          <target state="translated">モータル変数の作成には注意が必要です。複数のコンテキスト内で同じ値を致命的にする場合、または可変の致命的な値を複数回作成する場合、奇妙なことが発生する可能性があります。「 &lt;code&gt;SvREFCNT_dec&lt;/code&gt; 」を据え置きのSvREFCNT_decと考えると、このような問題を最小限に抑えることができます。たとえば、SVを渡す場合、</target>
        </trans-unit>
        <trans-unit id="f75000df91bba9bce6bbc0dce623bb898fe50b2f" translate="yes" xml:space="preserve">
          <source>You should be very careful when modifying the default values of most special variables described in this document. In most cases you want to localize these variables before changing them, since if you don't, the change may affect other modules which rely on the default values of the special variables that you have changed. This is one of the correct ways to read the whole file at once:</source>
          <target state="translated">このドキュメントで説明されているほとんどの特別な変数のデフォルト値を変更するときは、非常に注意が必要です。そうしないと、変更した特殊変数のデフォルト値に依存している他のモジュールに影響を与える可能性があるからです。これは、ファイル全体を一度に読み込む正しい方法の一つです。</target>
        </trans-unit>
        <trans-unit id="949c1f70059f0d92507bf8500b354d7dab533cd7" translate="yes" xml:space="preserve">
          <source>You should by now have had a look at &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, which tells you about Perl's internal variable types: SVs, HVs, AVs and the rest. If not, do that now.</source>
          <target state="translated">これで、&lt;a href=&quot;perlguts&quot;&gt;Perlgutsを&lt;/a&gt;確認できました。Perlgutsは、Perlの内部変数タイプ（SV、HV、AV、その他）について説明しています。そうでない場合は、今すぐ実行してください。</target>
        </trans-unit>
        <trans-unit id="1de8c82aa4b462c346cc4f7308a916f25f4fef57" translate="yes" xml:space="preserve">
          <source>You should have received a copy of the GNU General Public License along with this library program; it should be in the file &lt;code&gt;COPYING&lt;/code&gt; . If not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA</source>
          <target state="translated">このライブラリプログラムとともに、GNU General Public Licenseのコピーを受け取っているはずです。ファイル &lt;code&gt;COPYING&lt;/code&gt; にある必要があります。そうでない場合は、Free Software Foundation、Inc.、51 Franklin Street、Fifth Floor、Boston、MA 02110-1301、USAまでご連絡ください。</target>
        </trans-unit>
        <trans-unit id="e47e81623eb986394886e54e85f1183c3a98df4e" translate="yes" xml:space="preserve">
          <source>You should in general be leery of using functions that could potentially return lists in scalar context without explicitly stating such. This would be clearer to the casual reader:</source>
          <target state="translated">スカラコンテキストでリストを返す可能性のある関数を明示的に記述せずに使うことは、一般的には注意が必要です。この方がカジュアルな読者にはわかりやすいでしょう。</target>
        </trans-unit>
        <trans-unit id="f07911b4c8d126039388d13cb35130da1027b105" translate="yes" xml:space="preserve">
          <source>You should make a module out of any code that you think is going to be useful to others. Anything that's likely to fill a hole in the communal library and which someone else can slot directly into their program. Any part of your code which you can isolate and extract and plug into something else is a likely candidate.</source>
          <target state="translated">他の人に役立ちそうなコードからモジュールを作るべきです。共同ライブラリの穴を埋めてくれそうなもので、他の誰かが自分のプログラムに直接挿入できるものなら何でもいいのです。あなたのコードのどの部分も、分離して抽出して他の何かに差し込むことができるものが候補になります。</target>
        </trans-unit>
        <trans-unit id="040633d0da585780031086722446751b04946152" translate="yes" xml:space="preserve">
          <source>You should neither care about nor depend on the internal representation; it might change without notice. Use &lt;b&gt;ONLY&lt;/b&gt; method calls like &lt;code&gt;$x-&amp;gt;sign();&lt;/code&gt; instead relying on the internal representation.</source>
          <target state="translated">内部表現を気にしたり、依存したりしないでください。予告なく変更される場合があります。 &lt;code&gt;$x-&amp;gt;sign();&lt;/code&gt; ようなメソッド呼び出し&lt;b&gt;のみを&lt;/b&gt;使用します。代わりに、内部表現に依存しています。</target>
        </trans-unit>
        <trans-unit id="8e48507edb3519e34f20c7e3d955b48a4ed82ad2" translate="yes" xml:space="preserve">
          <source>You should normally only add directories to @INC. If you need to delete directories from @INC take care to only delete those which you added yourself or which you are certain are not needed by other modules in your script. Other modules may have added directories which they need for correct operation.</source>
          <target state="translated">通常は @INC にディレクトリを追加するだけです。INC からディレクトリを削除する必要がある場合は、自分で追加したもの、またはスクリプト内の他のモジュールが必要としないと確信したものだけを削除するように注意してください。他のモジュールが正しく動作させるために必要なディレクトリを追加しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="693cc772a08fe2cee68cbfc24c2a6625d73c01c6" translate="yes" xml:space="preserve">
          <source>You should not depend on the internal format, all accesses must go through accessor methods. E.g. looking at $x-&amp;gt;{sign} is not a bright idea since there is no guaranty that the object in question has such a hashkey, nor is a hash underneath at all.</source>
          <target state="translated">内部形式に依存するべきではありません。すべてのアクセスは、アクセサメソッドを経由する必要があります。たとえば、$ x-&amp;gt; {sign}を見るのは良い考えではありません。問題のオブジェクトがそのようなハッシュキーを持っているという保証も、その下のハッシュもまったく保証されていないからです。</target>
        </trans-unit>
        <trans-unit id="d13d5397797f2275509831750bfac02171b7d4f3" translate="yes" xml:space="preserve">
          <source>You should not depend on the internal format, all accesses must go through accessor methods. E.g. looking at $x-&amp;gt;{sign} is not a good idea since there is no guaranty that the object in question has such a hash key, nor is a hash underneath at all.</source>
          <target state="translated">内部形式に依存するべきではありません。すべてのアクセスは、アクセサメソッドを経由する必要があります。たとえば、$ x-&amp;gt; {sign}を見るのは良い考えではありません。問題のオブジェクトがそのようなハッシュキーを持っていることや、その下のハッシュがまったく保証されていないためです。</target>
        </trans-unit>
        <trans-unit id="6e8d21cc64f2bc1e9d1ef661a62db1a121e53da8" translate="yes" xml:space="preserve">
          <source>You should not even &lt;b&gt;want&lt;/b&gt; to use</source>
          <target state="translated">あなたも使い&lt;b&gt;たく&lt;/b&gt;ない</target>
        </trans-unit>
        <trans-unit id="675338533405ed3338eef5ef4ee169f82f2ec7e6" translate="yes" xml:space="preserve">
          <source>You should not use perl's malloc if you are building with gcc. There are reports of core dumps, especially in the PDL module. The problem appears to go away under -DDEBUGGING, so it has been difficult to track down. Sun's compiler appears to be okay with or without perl's malloc. [XXX further investigation is needed here.]</source>
          <target state="translated">gccでビルドする場合はperlのmallocは使わない方がいいです。特にPDLモジュールでコアダンプが発生するという報告があります。この問題は -DDEBUGGING で解決するように見えるので、追跡するのに苦労しています。Sunのコンパイラはperlのmallocの有無に関わらず問題ないようです。ここではさらに調査が必要です。</target>
        </trans-unit>
        <trans-unit id="13af3135f590e4077444d490629ef8daddd658bc" translate="yes" xml:space="preserve">
          <source>You should note that, if it is necessary to store the SV (&lt;code&gt;name&lt;/code&gt; in the example above) which corresponds to the Perl subroutine so that it can be used later in the program, it not enough just to store a copy of the pointer to the SV. Say the code above had been like this:</source>
          <target state="translated">プログラムで後で使用できるようにPerlサブルーチンに対応するSV（上記の例では &lt;code&gt;name&lt;/code&gt; を格納する必要がある場合、ポインタへのポインタのコピーを格納するだけでは不十分であることに注意してください。 SV。上記のコードが次のようであったとしましょう：</target>
        </trans-unit>
        <trans-unit id="30d7be701b66af4a13ce23ca4f4637ef46685c93" translate="yes" xml:space="preserve">
          <source>You should probably be using lexical variables anyway, although the issue is the same here:</source>
          <target state="translated">ここでも問題は同じですが、どうせなら語彙変数を使うべきでしょう。</target>
        </trans-unit>
        <trans-unit id="54112594f7721aec0b526a825c8c553a794597d2" translate="yes" xml:space="preserve">
          <source>You should say</source>
          <target state="translated">と言うべきです。</target>
        </trans-unit>
        <trans-unit id="5ae04df28b1ca8233ad4f14017b75003d4a4c0fc" translate="yes" xml:space="preserve">
          <source>You should seldom if ever use &lt;code&gt;0644&lt;/code&gt; as argument to &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, because that takes away the user's option to have a more permissive umask. Better to omit it. See the perlfunc(1) entry on &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; for more on this.</source>
          <target state="translated">あなたはめったに今までに使用してはならない場合は &lt;code&gt;0644&lt;/code&gt; を引数として &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; でそれはより寛大のumaskを持っているユーザーの選択肢を奪うので、。省略した方がいいです。詳細については、 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; のperlfunc（1）エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="a5da0398cef906098b3aedb900161f9013fc9dbe" translate="yes" xml:space="preserve">
          <source>You should seldom if ever use &lt;code&gt;0644&lt;/code&gt; as argument to &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, because that takes away the user's option to have a more permissive umask. Better to omit it. See the perlfunc(1) entry on &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; for more on this.</source>
          <target state="translated">あなたはめったに今までに使用してはならない場合は &lt;code&gt;0644&lt;/code&gt; を引数として &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; でそれはより寛大のumaskを持っているユーザーの選択肢を奪うので、。省略した方がいいです。詳細については、 &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; のperlfunc（1）エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="93291955e6753d9b28d9290f1f843ab314e860d1" translate="yes" xml:space="preserve">
          <source>You should take great pains to try to pass the function the type of variable it wants, when possible. It will save you a lot of trouble in the long run.</source>
          <target state="translated">可能であれば、関数が望む変数の型を関数に渡すように努力すべきです。そうすることで、長い目で見れば多くのトラブルを避けることができます。</target>
        </trans-unit>
        <trans-unit id="12e9cbf7ef859529e7aa6ad559377e6f6b1073a2" translate="yes" xml:space="preserve">
          <source>You should think long and hard about why you need everything loaded at once. It's just not a scalable solution.</source>
          <target state="translated">なぜ一度にすべてをロードする必要があるのか、じっくりと考えるべきです。それはスケーラブルなソリューションではないだけです。</target>
        </trans-unit>
        <trans-unit id="60692fdbea6181558282af5a09ad1a91226b0568" translate="yes" xml:space="preserve">
          <source>You should use</source>
          <target state="translated">を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6151ee9c13ae718ea297cb2924721c23869b50eb" translate="yes" xml:space="preserve">
          <source>You should use the &lt;b&gt;-T&lt;/b&gt; flag to enable taint checking (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;) even if we aren't running setuid or setgid. This is always a good idea for servers or any program run on behalf of someone else (like CGI scripts), because it lessens the chances that people from the outside will be able to compromise your system.</source>
          <target state="translated">setuidまたはsetgidを実行していない場合でも、&lt;b&gt;-T&lt;/b&gt;フラグを使用して汚染チェック（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）を有効にする必要があります。これは、サーバーまたは他の誰かに代わって実行されるプログラム（CGIスクリプトなど）にとって常に良いアイデアです。これは、外部の人がシステムを危険にさらす可能性を減らすためです。</target>
        </trans-unit>
        <trans-unit id="c6b52a2caf001c41f2fbe0900c81a2862fac3a04" translate="yes" xml:space="preserve">
          <source>You should use this</source>
          <target state="translated">これを使うべきです。</target>
        </trans-unit>
        <trans-unit id="f980030e1ddd6415377ab007be132a7835310a08" translate="yes" xml:space="preserve">
          <source>You should use this option if you are using UTF-16 and others which linefeed is not $/.</source>
          <target state="translated">UTF-16などで改行が$/ではない場合は、このオプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="db384f65b44d08a41642068cf25462a07360e950" translate="yes" xml:space="preserve">
          <source>You should usually be able to ignore this and just use the module without thinking about deferring. However, special applications may require fine control over which writes are deferred, or may require that all writes be immediate. To disable the autodeferment feature, use</source>
          <target state="translated">通常はこれを無視して、遅延について考えずにモジュールを使用することができるはずです。しかし、特殊なアプリケーションでは、どの書き込みを延期するかを細かく制御する必要があるかもしれませんし、すべての書き込みを即時に行う必要があるかもしれません。自動保存機能を無効にするには</target>
        </trans-unit>
        <trans-unit id="962a252e8053766a043aa7e45b2c62a450a0683c" translate="yes" xml:space="preserve">
          <source>You shouldn't have to care. But you may if your Perl is before 5.14.0 or you haven't specified &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
5.012&lt;/code&gt; (or higher) because otherwise the rules for the code points in the range 128 to 255 are different depending on whether the string they are contained within is in Unicode or not. (See &lt;a href=&quot;perlunicode#When-Unicode-Does-Not-Happen&quot;&gt;When Unicode Does Not Happen in perlunicode&lt;/a&gt;.)</source>
          <target state="translated">あなたは気にする必要はありません。しかし、あなたはあなたかもしれPerlは5.14.0の前にあるか、指定しなかった場合は &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; （またはそれ以上）のためかどうか、文字列に応じて異なっている128〜255の範囲のコードポイントのためのそれ以外のルールそれらはUnicodeであるかどうかに含まれます。（&lt;a href=&quot;perlunicode#When-Unicode-Does-Not-Happen&quot;&gt;Unicodeがperlunicodeで発生しない場合を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="a8856a657ecb3d97a5c46abba56a556f46cc66ed" translate="yes" xml:space="preserve">
          <source>You shouldn't need to set this variable, since File::Find should now detect such file systems on-the-fly and switch itself to using stat. This works even for parts of your file system, like a mounted CD-ROM.</source>
          <target state="translated">File::Find はその場でそのようなファイルシステムを検出し、stat を使用するように切り替えるので、この変数を設定する必要はありません。これは、マウントされたCD-ROMのようなファイルシステムの一部に対しても動作します。</target>
        </trans-unit>
        <trans-unit id="07632dfd399f0ee08d2dcc1bc356caea0fb1fc3a" translate="yes" xml:space="preserve">
          <source>You shouldn't worry about what this format is, because conversion is automatically done when you decode or encode.</source>
          <target state="translated">デコードやエンコードをすると自動的に変換が行われるので、このフォーマットが何なのか気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="1bf2aae490ef3108185dddeac7ace7d36d9b8359" translate="yes" xml:space="preserve">
          <source>You specified a character that has the given plainer way of writing it, and which is also portable to platforms running with different character sets.</source>
          <target state="translated">与えられた平易な書き方を持ち、異なるキャラクターセットで動作するプラットフォームにも移植可能なキャラクターを指定したのですね。</target>
        </trans-unit>
        <trans-unit id="ba1446898cf703a433f10e50053c48b7c4bd65ea" translate="yes" xml:space="preserve">
          <source>You specify the parameters that will be passed into the XSUB on the line(s) after you declare the function's return value and name. Each input parameter line starts with optional whitespace, and may have an optional terminating semicolon.</source>
          <target state="translated">関数の戻り値と名前を宣言した後の行で、XSUBに渡されるパラメータを指定します。各入力パラメータの行は、オプションの空白で始まり、オプションのセミコロンで終わることもあります。</target>
        </trans-unit>
        <trans-unit id="5e23d741eb164f1a1d95de07ecc25c6899dd796b" translate="yes" xml:space="preserve">
          <source>You spend lots and lots of money on dedicated hardware, but this is bound to get you talked about.</source>
          <target state="translated">専用ハードにはたくさんのお金をかけているのに、これは話題になるに違いない。</target>
        </trans-unit>
        <trans-unit id="e47578a3d656799aa6fd209dfd66ed644e50edb2" translate="yes" xml:space="preserve">
          <source>You then can run the test(s) from your test suite that call &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt;. At this point the output of &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt; is safely captured by &lt;a href=&quot;tester&quot;&gt;Test::Builder::Tester&lt;/a&gt; rather than being interpreted as real test output.</source>
          <target state="translated">次に、&lt;a href=&quot;../builder&quot;&gt;Test :: Builder&lt;/a&gt;を呼び出すテストスイートからテストを実行できます。この時点で、&lt;a href=&quot;../builder&quot;&gt;Test :: Builderの&lt;/a&gt;出力は、実際のテスト出力として解釈されるのではなく、&lt;a href=&quot;tester&quot;&gt;Test :: Builder :: Tester&lt;/a&gt;によって安全にキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="89f392c3f60b78b930a2c99b682f5745b402f97b" translate="yes" xml:space="preserve">
          <source>You tried to use a negative time argument.</source>
          <target state="translated">否定的な時間論を使おうとしたんですね。</target>
        </trans-unit>
        <trans-unit id="215da501a4d763185822fdec5710086fea4dd9c5" translate="yes" xml:space="preserve">
          <source>You use an old version of GNU make. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">古いバージョンのGNU makeを使用している。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="220275358a49875c3abbea24e2340553d9cb4444" translate="yes" xml:space="preserve">
          <source>You use the &lt;code&gt;\G&lt;/code&gt; anchor to start the next match on the same string where the last match left off. The regular expression engine cannot skip over any characters to find the next match with this anchor, so &lt;code&gt;\G&lt;/code&gt; is similar to the beginning of string anchor, &lt;code&gt;^&lt;/code&gt;. The &lt;code&gt;\G&lt;/code&gt; anchor is typically used with the &lt;code&gt;g&lt;/code&gt; flag. It uses the value of &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; as the position to start the next match. As the match operator makes successive matches, it updates &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; with the position of the next character past the last match (or the first character of the next match, depending on how you like to look at it). Each string has its own &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; アンカーを使用して、最後の一致が終了した同じ文字列で次の一致を開始します。正規表現エンジンは、このアンカーとの次の一致を見つけるために文字をスキップすることはできないため、 &lt;code&gt;\G&lt;/code&gt; は文字列アンカーの先頭 &lt;code&gt;^&lt;/code&gt; に似ています。 &lt;code&gt;\G&lt;/code&gt; アンカーは、典型的には、一緒に使用され &lt;code&gt;g&lt;/code&gt; フラグ。次の一致を開始する位置として &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; の値を使用します。一致演算子は連続して一致するため、最後の一致を過ぎた次の文字の位置（または、見方によっては次の一致の最初の文字 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; の位置でpos（）を更新します。各文字列には独自の &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; 値があります。</target>
        </trans-unit>
        <trans-unit id="fc28690a1164ffed63384fc9d48573f0201b1c8c" translate="yes" xml:space="preserve">
          <source>You use the utime() function documented in &lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;. By way of example, here's a little program that copies the read and write times from its first argument to all the rest of them.</source>
          <target state="translated">あなたには文書化さUTIME（）関数を使用&lt;a href=&quot;functions/utime&quot;&gt;UTIMEを&lt;/a&gt;。例として、最初の引数から残りのすべての引数に読み取り時間と書き込み時間をコピーする小さなプログラムを次に示します。</target>
        </trans-unit>
        <trans-unit id="6636b861a3b2aa1c111b3f0b60ae946532727186" translate="yes" xml:space="preserve">
          <source>You usually can use the value of &lt;code&gt;$^X&lt;/code&gt; to re-invoke an independent copy of the same perl that is currently running, e.g.,</source>
          <target state="translated">通常、 &lt;code&gt;$^X&lt;/code&gt; 値を使用して、現在実行中の同じperlの独立したコピーを再度呼び出すことができます。たとえば、</target>
        </trans-unit>
        <trans-unit id="aa6e6cfea08fbea7a5de694a45b0570deb9eda14" translate="yes" xml:space="preserve">
          <source>You usually can't. Memory allocated to lexicals (i.e. my() variables) cannot be reclaimed or reused even if they go out of scope. It is reserved in case the variables come back into scope. Memory allocated to global variables can be reused (within your program) by using undef() and/or delete().</source>
          <target state="translated">通常はできません。レキシカル(つまりmy()変数)に割り当てられたメモリは、スコープ外に出ても再利用や再利用はできません。変数がスコープに戻ってきたときのために予約されています。グローバル変数に割り当てられたメモリは、 undef()や delete()を使用することで (プログラム内で)再利用することができます。</target>
        </trans-unit>
        <trans-unit id="654d5925759821a41f7b319f6f5acce1580b7e6a" translate="yes" xml:space="preserve">
          <source>You want to temporarily change just one element of an array or hash.</source>
          <target state="translated">配列やハッシュの1つの要素だけを一時的に変更したい場合。</target>
        </trans-unit>
        <trans-unit id="2ba6881210a4041e425c0b40054f89e605a3c752" translate="yes" xml:space="preserve">
          <source>You will also need to be able to connect over the Internet to the public key servers, like pgp.mit.edu, and their port 11731 (the HKP protocol).</source>
          <target state="translated">また、pgp.mit.eduのような公開鍵サーバとそのポート11731(HKPプロトコル)にインターネット経由で接続できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c62030728cb5bac5bc525932491c14ac0a7adf6d" translate="yes" xml:space="preserve">
          <source>You will also need to download the &quot;Platform SDK&quot; (the &quot;Core SDK&quot; and &quot;MDAC SDK&quot; components are required) for header files, libraries and rc.exe, and &quot;.NET Framework SDK&quot; for more libraries and nmake.exe. Note that the latter (which also includes the free compiler and linker) requires the &quot;.NET Framework Redistributable&quot; to be installed first. This can be downloaded and installed separately, but is included in the &quot;Visual C++ Toolkit 2003&quot; anyway.</source>
          <target state="translated">また、ヘッダファイル、ライブラリ、rc.exe用の「Platform SDK」(「Core SDK」と「MDAC SDK」のコンポーネントが必要)と、より多くのライブラリとnmake.exe用の「.NET Framework SDK」をダウンロードする必要があります。後者(これはまた、無料のコンパイラとリンカが含まれています)は、最初にインストールする必要があることに注意してください&quot; .NET Framework Redistributable&quot;。これは別々にダウンロードしてインストールすることができますが、とにかく &quot;Visual C++Toolkit 2003 &quot;に含まれています。</target>
        </trans-unit>
        <trans-unit id="356f5d0daa70748f28cbf7166d4f341295254619" translate="yes" xml:space="preserve">
          <source>You will also need to download the &quot;Windows SDK&quot; (the &quot;Core SDK&quot; and &quot;MDAC SDK&quot; components are required) for more header files and libraries.</source>
          <target state="translated">また、より多くのヘッダファイルやライブラリを入手するためには、「Windows SDK」(「Core SDK」と「MDAC SDK」のコンポーネントが必要です)をダウンロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="a1a5cfadaa899360662110efdf3739aae4dbc6c1" translate="yes" xml:space="preserve">
          <source>You will encounter this particular error message when you have the &lt;code&gt;strict 'subs'&lt;/code&gt; pragma (or the full strict pragma) in your script. Consider this script:</source>
          <target state="translated">スクリプトに &lt;code&gt;strict 'subs'&lt;/code&gt; プラグマ（または完全なstrictプラグマ）がある場合、この特定のエラーメッセージが表示されます。次のスクリプトについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="9ef82421bf1d6104efddfdc8565b14c0ddc86aec" translate="yes" xml:space="preserve">
          <source>You will find this behavior is slightly different from that of &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handlers (which don't suppress the error text, but can instead call &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; again to change it).</source>
          <target state="translated">この動作は &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーの動作とは少し異なります（エラーテキストは抑制されませんが、代わりにもう一度 &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を呼び出して変更できます）。</target>
        </trans-unit>
        <trans-unit id="7d85e118af6c81732006143a60990cead4fa03d5" translate="yes" xml:space="preserve">
          <source>You will find this behavior is slightly different from that of &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handlers (which don't suppress the error text, but can instead call &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; again to change it).</source>
          <target state="translated">この動作は &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーの動作とは少し異なります（エラーテキストは抑制されませんが、代わりにもう一度 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を呼び出して変更できます）。</target>
        </trans-unit>
        <trans-unit id="c01bddfdbad27a7674a351ac148e02cb61a266a6" translate="yes" xml:space="preserve">
          <source>You will get this error message when one of the parameters in the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call is wrong. Unfortunately there are quite a few parameters to get wrong, so it can be difficult to figure out which one it is.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 呼び出しのパラメーターの1つが間違っていると、このエラーメッセージが表示されます。残念ながら、誤解を招くパラメーターがかなりあるため、どちらが適切かを判断するのは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="b306755ccc7dd24d9d304eb11d95322f9c7d1c36" translate="yes" xml:space="preserve">
          <source>You will have to make sure that CCTYPE is set correctly and that CCHOME points to wherever you installed your compiler.</source>
          <target state="translated">CCTYPEが正しく設定されていることと、CCHOMEがコンパイラをインストールした場所を指していることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="b8d67b6a7548006b180c9c0aa7f1777391e8e3f6" translate="yes" xml:space="preserve">
          <source>You will need a copy of Git for your computer. You can fetch a copy of the repository using the git protocol:</source>
          <target state="translated">お使いのコンピュータにGitのコピーが必要です。git プロトコルを使ってリポジトリのコピーを取得することができます。</target>
        </trans-unit>
        <trans-unit id="7a0e1442c7d674a64133a4ac5cbad0b8f84016fe" translate="yes" xml:space="preserve">
          <source>You will need perl version 5.005_03 or newer.</source>
          <target state="translated">perl のバージョン 5.005_03 以降が必要です。</target>
        </trans-unit>
        <trans-unit id="c20642cf215c3811e3976c0a074a0bc8e167607f" translate="yes" xml:space="preserve">
          <source>You will need the packages mentioned in</source>
          <target state="translated">で述べたパッケージが必要になります。</target>
        </trans-unit>
        <trans-unit id="125a7a338622da6411e41d9bf9ce7dc1495ae8ff" translate="yes" xml:space="preserve">
          <source>You will need to have Module::Signature installed, which in turn requires that you have at least one of Crypt::OpenPGP module or the command-line</source>
          <target state="translated">Module::Signature がインストールされている必要がありますが、そのためには Crypt::OpenPGP モジュールかコマンドラインの</target>
        </trans-unit>
        <trans-unit id="26225667638a5ef1fac02d60146f2f3c0e15d299" translate="yes" xml:space="preserve">
          <source>You will need to open every other filehandle on your own. Although there are many variants, the most common way to call Perl's open() function is with three arguments and one return value:</source>
          <target state="translated">他のすべてのファイルハンドルを自分で開く必要があります。多くのバリエーションがありますが、Perl の open()関数を呼び出す最も一般的な方法は、3 つの引数と 1 つの戻り値です。</target>
        </trans-unit>
        <trans-unit id="ced186b3bff5ac2b886750a50b53e155abe57dbc" translate="yes" xml:space="preserve">
          <source>You will probably find these modifiers even more useful if you have to deal with big- or little-endian C structures. Be sure to read &lt;a href=&quot;#Packing-and-Unpacking-C-Structures&quot;&gt;Packing and Unpacking C Structures&lt;/a&gt; for more on that.</source>
          <target state="translated">ビッグエンディアンまたはリトルエンディアンのC構造体を処理する必要がある場合は、これらの修飾子がさらに役立つはずです。詳細については、&lt;a href=&quot;#Packing-and-Unpacking-C-Structures&quot;&gt;C構造体のパックとアンパックを&lt;/a&gt;必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="299bf5b3f1c12a5c613500fd1bf200a8e448ae9f" translate="yes" xml:space="preserve">
          <source>You will see a message about errors while extracting</source>
          <target state="translated">抽出中にエラーに関するメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="d4ae5109d0174e4b426288bcd1b8e77508718bce" translate="yes" xml:space="preserve">
          <source>You will sometimes see older books or documentation mention &quot;blessing a reference&quot; or describe an object as a &quot;blessed reference&quot;, but this is incorrect. It isn't the reference that is blessed as an object; it's the thing the reference refers to (i.e. the referent).</source>
          <target state="translated">古い本や文書で「参照を祝福する」と書いてあったり、オブジェクトを「祝福された参照」と表現しているのを見かけることがありますが、これは正しくありません。オブジェクトとして祝福されているのは参照ではなく、参照が参照しているもの (すなわち参照元)です。</target>
        </trans-unit>
        <trans-unit id="e797714a16ef1ab3d51adb0398a2351cdb2d4869" translate="yes" xml:space="preserve">
          <source>You would do</source>
          <target state="translated">あなたならできる</target>
        </trans-unit>
        <trans-unit id="6a39b437275322e4ded1326f66b7e094ff120686" translate="yes" xml:space="preserve">
          <source>You would do well to understand that the TIEARRAY and TIEHASH interfaces are mere sugar to invoke some perl method calls while using the uniform hash and array syntax. The use of this sugar imposes some overhead (typically about two to four extra opcodes per FETCH/STORE operation, in addition to the creation of all the mortal variables required to invoke the methods). This overhead will be comparatively small if the TIE methods are themselves substantial, but if they are only a few statements long, the overhead will not be insignificant.</source>
          <target state="translated">TIEARRAY と TIEHASH インターフェースは、統一されたハッシュと配列構文を使用しながら、Perl のメソッド呼び出しを呼び出すための単なる糖質であることを理解しておいた方が良いでしょう。この糖を使用することで、いくつかのオーバーヘッドが発生します(通常、メソッドを呼び出すために必要なすべての死すべき変数の生成に加えて、FETCH/STORE操作ごとに約2〜4個の余分なオペコードが発生します)。このオーバーヘッドは、TIEメソッドがそれ自体が実質的なものであれば比較的小さくなりますが、数文の長さであれば、オーバーヘッドは取るに足らないものではありません。</target>
        </trans-unit>
        <trans-unit id="d4ff63e38580a86bc4e960e615187745a0cf46e6" translate="yes" xml:space="preserve">
          <source>You would tell &lt;code&gt;Memoize&lt;/code&gt; to use this normalizer this way:</source>
          <target state="translated">このノーマライザを次のように使用するよう &lt;code&gt;Memoize&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="26052a9c2b555b8c00fe517ca714ea40b56ea28f" translate="yes" xml:space="preserve">
          <source>You would think passing files to an XS is difficult, with all the typeglobs and stuff. Well, it isn't.</source>
          <target state="translated">XSにファイルを渡すのは難しいと思うでしょう。しかし、そうではありません。</target>
        </trans-unit>
        <trans-unit id="97f37569bdb5c4ba52eeb6c3306265613993e5ff" translate="yes" xml:space="preserve">
          <source>You'll also find that &lt;code&gt;foreach&lt;/code&gt; loop used to create a topicalizer and a switch:</source>
          <target state="translated">また、トポラライザーとスイッチを作成するために使用された &lt;code&gt;foreach&lt;/code&gt; ループが見つかります。</target>
        </trans-unit>
        <trans-unit id="5e9bf36ecbd53fc8e26acf6fb90205c1b5356d3c" translate="yes" xml:space="preserve">
          <source>You'll also have to choose the appropriate library directory (</source>
          <target state="translated">また、適切なライブラリディレクトリを選択する必要があります (</target>
        </trans-unit>
        <trans-unit id="d14f9a4e84e4a65a6fcadc471d3775e2d2026c66" translate="yes" xml:space="preserve">
          <source>You'll also need to add the following code to the top of the .xs file, just after the include of &quot;XSUB.h&quot;:</source>
          <target state="translated">また、.xsファイルの先頭、&quot;XSUB.h &quot;のインクルードの直後に以下のコードを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="067d0f39aaa002449de130921826b00edd6e52d4" translate="yes" xml:space="preserve">
          <source>You'll also see code that does this without a temporary variable, as in</source>
          <target state="translated">また、以下のように一時変数を使わずにこれを行うコードも見られます。</target>
        </trans-unit>
        <trans-unit id="e76c883ffb7e9e13e48b98bafcbb6fa1aa675b80" translate="yes" xml:space="preserve">
          <source>You'll be in trouble. Those should (in 99.8% of the cases) be the simpler and more direct:</source>
          <target state="translated">困ったことになります。それらは(99.8%のケースで)よりシンプルで直接的なものであるべきです。</target>
        </trans-unit>
        <trans-unit id="f885bd4b3bb53aff3bed3dec0b066248d1576a12" translate="yes" xml:space="preserve">
          <source>You'll have to catch the SIGCHLD signal, and possibly SIGPIPE too. SIGCHLD is sent when the backgrounded process finishes. SIGPIPE is sent when you write to a filehandle whose child process has closed (an untrapped SIGPIPE can cause your program to silently die). This is not an issue with &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system(&quot;cmd&amp;amp;&quot;)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SIGCHLDシグナルと、場合によってはSIGPIPEもキャッチする必要があります。SIGCHLDは、バックグラウンド処理が完了すると送信されます。SIGPIPEは、子プロセスが閉じているファイルハンドルに書き込むときに送信されます（トラップされていないSIGPIPEにより、プログラムがサイレントで終了する可能性があります）。これは &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system(&quot;cmd&amp;amp;&quot;)&lt;/a&gt;&lt;/code&gt; の問題ではありません。</target>
        </trans-unit>
        <trans-unit id="2c26c7e5ed49de9efc0c0dba307a9def27936a34" translate="yes" xml:space="preserve">
          <source>You'll have to choose the appropriate compiler (</source>
          <target state="translated">適切なコンパイラを選択する必要があります (</target>
        </trans-unit>
        <trans-unit id="e62d384e427e6ef82a853693fc0380e3a4a6bcdd" translate="yes" xml:space="preserve">
          <source>You'll know your submission has been processed when you receive an email from our ticket tracking system. This email will give you a ticket number. Once your patch has made it to the ticket tracking system, it will also be sent to the perl5-porters@perl.org list.</source>
          <target state="translated">チケット追跡システムからメールが届くと、応募が処理されたことがわかります。このメールにはチケット番号が記載されています。あなたのパッチがチケット追跡システムに送られると、perl5-porters@perl.org リストにも送られます。</target>
        </trans-unit>
        <trans-unit id="feea2270863ca6e9573aba26122b77d4eeb6b2e7" translate="yes" xml:space="preserve">
          <source>You'll need the &lt;code&gt;nmake&lt;/code&gt; utility, available at &lt;a href=&quot;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&quot;&gt;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&lt;/a&gt; or dmake, available on CPAN. &lt;a href=&quot;http://search.cpan.org/dist/dmake/&quot;&gt;http://search.cpan.org/dist/dmake/&lt;/a&gt;</source>
          <target state="translated">CPANから入手できる&lt;a href=&quot;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&quot;&gt;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&lt;/a&gt;またはdmakeから入手できる &lt;code&gt;nmake&lt;/code&gt; ユーティリティが必要です。&lt;a href=&quot;http://search.cpan.org/dist/dmake/&quot;&gt;http://search.cpan.org/dist/dmake/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d98bbda9e4101a6a3cc3bbb0d325b9faa857f4a3" translate="yes" xml:space="preserve">
          <source>You'll want to do that in your Perl source tree so the debugger can read the source code. You should see the copyright message, followed by the prompt.</source>
          <target state="translated">デバッガがソースコードを読めるように、Perl のソースツリーでこれを行いたいと思うでしょう。copyright のメッセージが表示され、その後にプロンプトが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="43eea0417aae56c41dd79afb85423b61a36ecf9b" translate="yes" xml:space="preserve">
          <source>You're confusing the purpose of &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; and backticks (``). &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; runs a command and returns exit status information (as a 16 bit value: the low 7 bits are the signal the process died from, if any, and the high 8 bits are the actual exit value). Backticks (``) run a command and return what it sent to STDOUT.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; とバックティック（ ``）の目的を混乱させています。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; はコマンドを実行し、終了ステータス情報を返します（16ビット値：下位7ビットはプロセスが終了した場合のシグナルであり、上位8ビットは実際の終了値です）。バックティック（ ``）はコマンドを実行し、送信したものをSTDOUTに返します。</target>
        </trans-unit>
        <trans-unit id="0067a9abf52f5d5adc52730de693ce9354a17edf" translate="yes" xml:space="preserve">
          <source>You're encouraged to create self-tests for your module to ensure it's working as intended on the myriad platforms Perl supports; if you upload your module to CPAN, a host of testers will build your module and send you the results of the tests. Again, &lt;code&gt;module-starter&lt;/code&gt; and &lt;code&gt;h2xs&lt;/code&gt; provide a test framework which you can extend - you should do something more than just checking your module will compile. &lt;a href=&quot;test/simple&quot;&gt;Test::Simple&lt;/a&gt; and &lt;a href=&quot;test/more&quot;&gt;Test::More&lt;/a&gt; are good places to start when writing a test suite.</source>
          <target state="translated">Perlがサポートする無数のプラットフォームでモジュールが意図したとおりに機能することを確認するために、モジュールのセルフテストを作成することをお勧めします。モジュールをCPANにアップロードすると、多数のテスターがモジュールを作成し、テストの結果を送信します。繰り返しますが、 &lt;code&gt;module-starter&lt;/code&gt; と &lt;code&gt;h2xs&lt;/code&gt; は、拡張可能なテストフレームワークを提供します。モジュールがコンパイルされることを確認するだけではなく、何かを行う必要があります。&lt;a href=&quot;test/simple&quot;&gt;Test :: Simple&lt;/a&gt;と&lt;a href=&quot;test/more&quot;&gt;Test :: More&lt;/a&gt;は、テストスイートを作成する際の出発点として最適です。</target>
        </trans-unit>
        <trans-unit id="1465c23d6a9abbc69d7c02001d0a261855c5206d" translate="yes" xml:space="preserve">
          <source>You're probably trying to convert a string to a number, which Perl only converts as a decimal number. When Perl converts a string to a number, it ignores leading spaces and zeroes, then assumes the rest of the digits are in base 10:</source>
          <target state="translated">おそらく、文字列を数値に変換しようとしているのでしょうが、Perl は 10 進数としてしか変換しません。Perlが文字列を数値に変換するとき、先頭のスペースとゼロを無視して、残りの桁が10進数であると仮定します。</target>
        </trans-unit>
        <trans-unit id="f32dee0623a34d25e555f7bd9fe977163f048dfb" translate="yes" xml:space="preserve">
          <source>You're still out of luck if you need to keep track of decaying protons though.</source>
          <target state="translated">でも、減衰する陽子を追跡する必要があるなら、あなたはまだ運がありません。</target>
        </trans-unit>
        <trans-unit id="4522acbd81c14b3349dda685727b4174a91c46c1" translate="yes" xml:space="preserve">
          <source>You're unlikely to ever need to construct an object of this class for yourself, but if you want to, call &lt;code&gt;Pod::Simple::PullParserEndToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt; )&lt;/code&gt;</source>
          <target state="translated">このクラスのオブジェクトを自分で作成する必要はほとんどありませんが、必要に応じて、 &lt;code&gt;Pod::Simple::PullParserEndToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt; )&lt;/code&gt; &lt;i&gt;tagname&lt;/i&gt;）を呼び出します。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="13c2c796fe95a445a68ec254f6e70e50cbdb3db7" translate="yes" xml:space="preserve">
          <source>You're unlikely to ever need to construct an object of this class for yourself, but if you want to, call &lt;code&gt;Pod::Simple::PullParserStartToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt;, &lt;i&gt;attrhash&lt;/i&gt; )&lt;/code&gt;</source>
          <target state="translated">このクラスのオブジェクトを自分で構築する必要はほとんどありませんが、必要に応じて、 &lt;code&gt;Pod::Simple::PullParserStartToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt;, &lt;i&gt;attrhash&lt;/i&gt; )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63fdd43345f7726cfc85c93addac87c77eec8e6e" translate="yes" xml:space="preserve">
          <source>You're unlikely to ever need to construct an object of this class for yourself, but if you want to, call &lt;code&gt;Pod::Simple::PullParserTextToken-&amp;gt;new( &lt;i&gt;text&lt;/i&gt; )&lt;/code&gt;</source>
          <target state="translated">このクラスのオブジェクトを自分で構築する必要はほとんどありませんが、必要に応じて、 &lt;code&gt;Pod::Simple::PullParserTextToken-&amp;gt;new( &lt;i&gt;text&lt;/i&gt; )&lt;/code&gt; &lt;i&gt;text&lt;/i&gt;）を呼び出し&lt;i&gt;ます。&lt;/i&gt;&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="244e1e138ccb1ddf345dc218bc4eb88a0d9affd5" translate="yes" xml:space="preserve">
          <source>You've asked &lt;code&gt;Fatal&lt;/code&gt; to replace a subroutine, but it's not a Perl built-in, and &lt;code&gt;Fatal&lt;/code&gt; couldn't find it as a regular subroutine. It either doesn't exist or has not yet been defined.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; にサブルーチンを置き換えるように依頼しましたが、これはPerlの組み込みではなく、 &lt;code&gt;Fatal&lt;/code&gt; はそれを通常のサブルーチンとして見つけることができませんでした。存在しないか、まだ定義されていません。</target>
        </trans-unit>
        <trans-unit id="e40be2d06acbdf1af8b44d624778687fbb9e49ee" translate="yes" xml:space="preserve">
          <source>You've asked &lt;code&gt;Fatal&lt;/code&gt; to try and replace a subroutine which does not exist, or has not yet been defined.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; に、存在しない、またはまだ定義されていないサブルーチンを置き換えてみるように依頼しました。</target>
        </trans-unit>
        <trans-unit id="b50e18d238da3dcc7957f257361d12bcaab56e61" translate="yes" xml:space="preserve">
          <source>You've called &lt;code&gt;Fatal&lt;/code&gt; with an argument that doesn't look like a subroutine name, nor a switch that this version of Fatal understands.</source>
          <target state="translated">あなたは呼んでいる &lt;code&gt;Fatal&lt;/code&gt; サブルーチン名のように見えない引数、また致命的なのこのバージョンが理解できるスイッチ付き。</target>
        </trans-unit>
        <trans-unit id="dcf998c7dc1a2b4fcde7c406f8c5df0a1daf51ce" translate="yes" xml:space="preserve">
          <source>You've found a bug in &lt;code&gt;Fatal&lt;/code&gt; . Please report it using the &lt;code&gt;perlbug&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; のバグを見つけました。 &lt;code&gt;perlbug&lt;/code&gt; コマンドを使用して報告してください。</target>
        </trans-unit>
        <trans-unit id="475fb69a6a2555d09a61f2284d19f582455e0ff5" translate="yes" xml:space="preserve">
          <source>You've insisted on hints for user-subroutines, either by pre-pending a &lt;code&gt;!&lt;/code&gt; to the subroutine name itself, or earlier in the list of arguments to &lt;code&gt;autodie&lt;/code&gt; . However the subroutine in question does not have any hints available.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; を前に付けて、ユーザーサブルーチンのヒントを主張しました。サブルーチン名自体、または &lt;code&gt;autodie&lt;/code&gt; の引数リストの前の部分に追加します。ただし、問題のサブルーチンにはヒントがありません。</target>
        </trans-unit>
        <trans-unit id="3c13a053a1a459196298d76dc68f54350a5781eb" translate="yes" xml:space="preserve">
          <source>You've probably seen shuffling algorithms that work using splice, randomly picking another element to swap the current element with</source>
          <target state="translated">スプライスを使って動作するシャッフルアルゴリズムを見たことがあるでしょう。</target>
        </trans-unit>
        <trans-unit id="4f7734dcac6827c63f3c8f78e3f70fe360dc90d8" translate="yes" xml:space="preserve">
          <source>You've tried to use &lt;code&gt;Fatal&lt;/code&gt; on a Perl built-in that can't be overridden, such as &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, which means that &lt;code&gt;Fatal&lt;/code&gt; can't help you, although some other modules might. See the &lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt; section of this documentation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; など、上書きできないPerl組み込みで &lt;code&gt;Fatal&lt;/code&gt; を使用しようとしました。これは、他の一部のモジュールがそうであっても、 &lt;code&gt;Fatal&lt;/code&gt; が役に立たないことを意味します。このドキュメントの「&lt;a href=&quot;#SEE-ALSO&quot;&gt;関連&lt;/a&gt;項目」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="770547bed3b38328c9ebe9f8750573476f6753ff" translate="yes" xml:space="preserve">
          <source>Young and free of legacy weight, providing a lightweight and easy to learn API. Has a growing addon ecosystem. It is best used for smaller projects and very easy to learn for beginners.</source>
          <target state="translated">若くてレガシーな重さから解放され、軽量で学習しやすいAPIを提供しています。成長しているアドオンエコシステムを持っています。小規模なプロジェクトに最適で、初心者には非常に簡単に学習できます。</target>
        </trans-unit>
        <trans-unit id="3c6f85b02933dd53061abea03a23ce712a1c9139" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; is most probably working just fine. It's the numbers that aren't quite what you think.</source>
          <target state="translated">あなたの &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; はおそらくうまく機能しています。それはあなたが考えているものとはかなり違う数字です。</target>
        </trans-unit>
        <trans-unit id="df53f54d51a07584d7be09d83850a7da9c15786b" translate="yes" xml:space="preserve">
          <source>Your basic test. Pass if &lt;code&gt;$test&lt;/code&gt; is true, fail if $test is false. Just like Test::Simple's &lt;code&gt;ok()&lt;/code&gt; .</source>
          <target state="translated">あなたの基本的なテスト。場合パス &lt;code&gt;$test&lt;/code&gt; 真である$テストがfalseの場合、失敗します。Test :: Simpleの &lt;code&gt;ok()&lt;/code&gt; と同じように。</target>
        </trans-unit>
        <trans-unit id="b237ec1c8f3c84ff91c26a3b96b070c2410531e4" translate="yes" xml:space="preserve">
          <source>Your best bet is to use the single argument form:</source>
          <target state="translated">あなたの最善の策は、単一の引数形式を使用することです。</target>
        </trans-unit>
        <trans-unit id="30a923bd50861e3e1f2796d154bd6dcc6842fa55" translate="yes" xml:space="preserve">
          <source>Your choice:</source>
          <target state="translated">あなたの選択です。</target>
        </trans-unit>
        <trans-unit id="2240cd19d3c19a8cd0a6388378dc061fa17be90f" translate="yes" xml:space="preserve">
          <source>Your commit message should describe what part of the Perl core you're changing and what you expect your patch to do.</source>
          <target state="translated">コミットメッセージには、Perl のコアのどの部分を変更するのか、そしてパッチに何を期待するのかを記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="9f522992b80d434f30bfc99a44403ac7ea5d333f" translate="yes" xml:space="preserve">
          <source>Your commit message should describe why the change you are making is important. When someone looks at your change in six months or six years, your intent should be clear.</source>
          <target state="translated">コミットメッセージでは、なぜあなたが行う変更が重要なのかを説明しなければなりません。6ヶ月後、6年後に誰かがあなたの変更を見たとき、あなたの意図は明確でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0e92f837de5ea84ed03360a4aeae41a080276983" translate="yes" xml:space="preserve">
          <source>Your current &lt;b&gt;directory&lt;/b&gt;, from which relative pathnames are interpreted by the &lt;b&gt;operating system&lt;/b&gt;. The operating system knows your current directory because you told it with a &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt;, or because you started out in the place where your parent &lt;b&gt;process&lt;/b&gt; was when you were born.</source>
          <target state="translated">相対パス名が&lt;b&gt;オペレーティングシステム&lt;/b&gt;によって解釈される現在の&lt;b&gt;ディレクトリ&lt;/b&gt;。現在のディレクトリは、 &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; を使用して指示したため、または生まれたときに親&lt;b&gt;プロセス&lt;/b&gt;があった場所から開始したため、オペレーティングシステムは知っています。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d9200ca79b7b623bd2d92209c7c88d5edf0f0d25" translate="yes" xml:space="preserve">
          <source>Your custom type should then be picked up automatically by the &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt;.</source>
          <target state="translated">その後、カスタムタイプは&lt;a href=&quot;../parser&quot;&gt;TAP :: Parser&lt;/a&gt;によって自動的に取得されます。</target>
        </trans-unit>
        <trans-unit id="8e7f0615cde01baf7008f00eb9c075025028921a" translate="yes" xml:space="preserve">
          <source>Your distribution &lt;b&gt;must&lt;/b&gt; have a &lt;code&gt;NAME&lt;/code&gt; .</source>
          <target state="translated">お使いのディストリビューションは、&lt;b&gt;必要があります&lt;/b&gt;持っている &lt;code&gt;NAME&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="df70fd54c497020a59006e2165eb78aadc748605" translate="yes" xml:space="preserve">
          <source>Your first try should probably be the &lt;a href=&quot;text/balanced&quot;&gt;Text::Balanced&lt;/a&gt; module, which is in the Perl standard library since Perl 5.8. It has a variety of functions to deal with tricky text. The &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; module can also help by providing canned patterns you can use.</source>
          <target state="translated">最初の試みは、おそらく&lt;a href=&quot;text/balanced&quot;&gt;Text :: Balanced&lt;/a&gt;モジュールであるはずです。これは、Perl 5.8以降のPerl標準ライブラリにあります。トリッキーなテキストを処理するためのさまざまな機能があります。&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;正規表現::一般的な&lt;/a&gt;モジュールは、あなたが使用することができます缶詰パターンを提供することでも助けることができます。</target>
        </trans-unit>
        <trans-unit id="880f6f429e2d63ef4a94f9a2206ede8287e74da3" translate="yes" xml:space="preserve">
          <source>Your interfaces should be understandable by an average Perl programmer. The following guidelines may help you judge whether your API is sufficiently straightforward:</source>
          <target state="translated">あなたのインターフェイスは、平均的なPerlプログラマーが理解できるものでなければなりません。以下のガイドラインは、あなたの API が十分にわかりやすいかどうかを判断するのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="d26baf198cb18edde520e205142e25037414abf9" translate="yes" xml:space="preserve">
          <source>Your internet domain name</source>
          <target state="translated">あなたのインターネットドメイン名</target>
        </trans-unit>
        <trans-unit id="c8e05b300242eb52ca20c1b662ee525c5256fe27" translate="yes" xml:space="preserve">
          <source>Your interpreter doesn't know how to communicate with these extensions on its own. A little glue will help. Up until now you've been calling</source>
          <target state="translated">あなたのインタープリタは、これらの拡張機能との通信方法を知らないのです。少しの接着剤があれば大丈夫です。今までは</target>
        </trans-unit>
        <trans-unit id="926b6183d26bfd81c7f17ff04a868dae347149ae" translate="yes" xml:space="preserve">
          <source>Your mileage may vary...</source>
          <target state="translated">走行距離が異なる場合があります...</target>
        </trans-unit>
        <trans-unit id="60a065094064545ff1123708e618e1b6cf8cbd1c" translate="yes" xml:space="preserve">
          <source>Your mileage will vary. If in any doubt &lt;b&gt;do not use it&lt;/b&gt;.</source>
          <target state="translated">あなたの走行距離は異なります。疑わしい場合&lt;b&gt;は使用しないでください&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="c8a47834f473426f773c0b79429bd305f3db3ac9" translate="yes" xml:space="preserve">
          <source>Your module may be object oriented (OO) or not, or it may have both kinds of interfaces available. There are pros and cons of each technique, which should be considered when you design your API.</source>
          <target state="translated">モジュールはオブジェクト指向 (OO)である場合もあれば、そうでない場合もありますし、両方の種類のインターフェイスが利用可能な場合もあります。それぞれのテクニックには長所と短所があり、APIを設計する際に考慮すべきです。</target>
        </trans-unit>
        <trans-unit id="4936a62e724ff21109fff06e820adf4197164d03" translate="yes" xml:space="preserve">
          <source>Your module should also include a README file describing the module and giving pointers to further information (website, author email).</source>
          <target state="translated">あなたのモジュールには、モジュールを記述し、詳細情報(ウェブサイト、著者の電子メール)へのポインタを提供するREADMEファイルも含める必要があります。</target>
        </trans-unit>
        <trans-unit id="290b95e5d44851668b2e9d3e7d74fdc415789c4e" translate="yes" xml:space="preserve">
          <source>Your module should have a clearly defined scope which is no longer than a single sentence. Can your module be broken down into a family of related modules?</source>
          <target state="translated">あなたのモジュールは、明確に定義された範囲を持っていなければなりませんが、それは一文以上の長さではありません。あなたのモジュールは、関連するモジュールのファミリーに分解できますか?</target>
        </trans-unit>
        <trans-unit id="8348552a40cd77a386588c2671c4e766e50a33bd" translate="yes" xml:space="preserve">
          <source>Your module should include documentation aimed at Perl developers. You should use Perl's &quot;plain old documentation&quot; (POD) for your general technical documentation, though you may wish to write additional documentation (white papers, tutorials, etc) in some other format. You need to cover the following subjects:</source>
          <target state="translated">あなたのモジュールには、Perl の開発者向けのドキュメントを含めるべきです。一般的な技術文書にはPerlの「古い文書」(POD)を使うべきですが、他の形式で追加の文書(ホワイトペーパー、チュートリアルなど)を書きたいと思うかもしれません。以下のテーマをカバーする必要があります。</target>
        </trans-unit>
        <trans-unit id="861d9c806a8066b7b2265b2640dfe765fcbec7fa" translate="yes" xml:space="preserve">
          <source>Your module should run successfully under the strict pragma and should run without generating any warnings. Your module should also handle taint-checking where appropriate, though this can cause difficulties in many cases.</source>
          <target state="translated">あなたのモジュールは厳格なプラグマの下で正常に実行され、警告を発生させることなく実行されるべきです。多くの場合、これは困難を引き起こす可能性がありますが、モジュールは適切な場合には、 汚染物質のチェックも行うべきです。</target>
        </trans-unit>
        <trans-unit id="55948057c1f1e500efb989c6858ac749bffed2dd" translate="yes" xml:space="preserve">
          <source>Your module will be part of a developer's toolkit. It will not, in itself, form the &lt;b&gt;entire&lt;/b&gt; toolkit. It's tempting to add extra features until your code is a monolithic system rather than a set of modular building blocks.</source>
          <target state="translated">モジュールは開発者のツールキットの一部になります。それ自体では&lt;b&gt;、&lt;/b&gt;ツールキット&lt;b&gt;全体を&lt;/b&gt;形成しません。コードがモジュラービルディングブロックのセットではなくモノリシックシステムになるまで、追加の機能を追加したくなります。</target>
        </trans-unit>
        <trans-unit id="ad14f196f53d1d71d675a079baed8e60dbe25d0c" translate="yes" xml:space="preserve">
          <source>Your name for distributing the package with the version number included. This is used by 'make dist' to name the resulting archive file.</source>
          <target state="translated">パッケージを配布する際に使用する名前で、バージョン番号が含まれています。これは 'make dist' が結果のアーカイブファイルに名前を付ける際に使用します。</target>
        </trans-unit>
        <trans-unit id="175b500be69da19db3c39bbbb8f52b905fefd909" translate="yes" xml:space="preserve">
          <source>Your naming should be consistent. For instance, it's better to have:</source>
          <target state="translated">ネーミングは一貫性のあるものにしましょう。例えば、あった方がいいですね。</target>
        </trans-unit>
        <trans-unit id="f42ef3040bfea4a52c4a41099b15560c160072e6" translate="yes" xml:space="preserve">
          <source>Your new toolkit</source>
          <target state="translated">新しいツールキット</target>
        </trans-unit>
        <trans-unit id="ab842b2beec604e1059561d157771750a66116bd" translate="yes" xml:space="preserve">
          <source>Your patch may be returned with requests for changes, or requests for more detailed explanations about your fix.</source>
          <target state="translated">あなたのパッチは、変更の要求や、あなたの修正についてのより詳細な説明の要求とともに返却されることがあります。</target>
        </trans-unit>
        <trans-unit id="1fe050a844b774ad50502f71e6d05cbaaefcd33b" translate="yes" xml:space="preserve">
          <source>Your programs can use the Config module to check whether threads are enabled. If your program can't run without them, you can say something like:</source>
          <target state="translated">プログラムは Config モジュールを使ってスレッドが有効になっているかどうかをチェックすることができます。もしあなたのプログラムがスレッドなしで実行できない場合は、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="3998dbed349b6ee91c59e7ad32be8eef4f4d5eba" translate="yes" xml:space="preserve">
          <source>Your return address. The program will ask you to confirm its default if you don't use this option.</source>
          <target state="translated">あなたのリターンアドレスです。このオプションを使用しない場合、プログラムはデフォルトの確認を求めてきます。</target>
        </trans-unit>
        <trans-unit id="b4ef3a10fbcdb1f56987b1c90e4c788bb1481b23" translate="yes" xml:space="preserve">
          <source>Your script will declare a skip with the reason why you skipped and exit immediately with a zero (success). See &lt;a href=&quot;harness&quot;&gt;Test::Harness&lt;/a&gt; for details.</source>
          <target state="translated">スクリプトはスキップを宣言し、スキップした理由をゼロ（成功）ですぐに終了します。詳細については、&lt;a href=&quot;harness&quot;&gt;Test :: Harness&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ffadff849a0704c5040d7dc21528967305be780" translate="yes" xml:space="preserve">
          <source>Your system documentation for &lt;code&gt;clock&lt;/code&gt; , &lt;code&gt;clock_gettime&lt;/code&gt; , &lt;code&gt;clock_getres&lt;/code&gt; , &lt;code&gt;clock_nanosleep&lt;/code&gt; , &lt;code&gt;clock_settime&lt;/code&gt; , &lt;code&gt;getitimer&lt;/code&gt; , &lt;code&gt;gettimeofday&lt;/code&gt; , &lt;code&gt;setitimer&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ualarm&lt;/code&gt; .</source>
          <target state="translated">お使いのシステムのドキュメント &lt;code&gt;clock&lt;/code&gt; 、 &lt;code&gt;clock_gettime&lt;/code&gt; 、 &lt;code&gt;clock_getres&lt;/code&gt; 、 &lt;code&gt;clock_nanosleep&lt;/code&gt; 、 &lt;code&gt;clock_settime&lt;/code&gt; 、 &lt;code&gt;getitimer&lt;/code&gt; 、 &lt;code&gt;gettimeofday&lt;/code&gt; の、 &lt;code&gt;setitimer&lt;/code&gt; が、 &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;ualarm&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="f45278c990de17bddc07886e62872d5705e84df2" translate="yes" xml:space="preserve">
          <source>Your system may also have man pages installed for those modules, in which case you can probably just use the man(1) command.</source>
          <target state="translated">あなたのシステムには、それらのモジュール用の man ページがインストールされているかもしれませんが、その場合は man(1)コマンドを使うことができるでしょう。</target>
        </trans-unit>
        <trans-unit id="f67311ed40fd91017f49e031b08d5e66ea348e7f" translate="yes" xml:space="preserve">
          <source>Your system may use lockfiles to control multiple access. Make sure you follow the correct protocol. Unpredictable behavior can result from multiple processes reading from one device.</source>
          <target state="translated">お使いのシステムでは、ロックファイルを使用して複数のアクセスを制御している可能性があります。正しいプロトコルに従ってください。1つのデバイスから複数のプロセスが読み込まれた場合、予測できない動作が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="69b78ca3bd9762db3a1f2fc87f8707247fab00ca" translate="yes" xml:space="preserve">
          <source>Your terminal expects ISO-8859-1 (yes/no)?</source>
          <target state="translated">お使いの端末はISO-8859-1を期待していますか?</target>
        </trans-unit>
        <trans-unit id="eb27aa8afa0df31a742a7c36ee000dde7a333d59" translate="yes" xml:space="preserve">
          <source>Your test suite additions should generally follow these guidelines (courtesy of Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;):</source>
          <target state="translated">テストスイートの追加は、一般に次のガイドラインに従う必要があります（Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;提供）。</target>
        </trans-unit>
        <trans-unit id="6757bbaa3e59b9eae8d3358f1cb54cb3839ec256" translate="yes" xml:space="preserve">
          <source>Your text string will be sent using the bytes in Perl's internal format. In some cases, Perl will warn you that you're doing something wrong, with a friendly warning:</source>
          <target state="translated">あなたのテキスト文字列は、Perl の内部フォーマットのバイトを使用して送信されます。場合によっては、Perl はあなたが何か間違ったことをしていることをフレンドリーな警告で警告します。</target>
        </trans-unit>
        <trans-unit id="e6fdf4d82698552aa3b04fea17dd3738278fad63" translate="yes" xml:space="preserve">
          <source>Your version number for distributing the package. This defaults to 0.1.</source>
          <target state="translated">パッケージを配布するためのバージョン番号です。デフォルトは 0.1 です。</target>
        </trans-unit>
        <trans-unit id="6470a2f4b416b0ce03b530f9156d5bf0649ff6c9" translate="yes" xml:space="preserve">
          <source>Your version number for the .xs file of this package. This defaults to the value of the VERSION attribute.</source>
          <target state="translated">このパッケージの .xs ファイルのバージョン番号。デフォルトは VERSION 属性の値です。</target>
        </trans-unit>
        <trans-unit id="f943e56eab4587790a7d8e3702190e81dcdaf111" translate="yes" xml:space="preserve">
          <source>YourModule.pm</source>
          <target state="translated">YourModule.pm</target>
        </trans-unit>
        <trans-unit id="a032b09d002bfec745ff9618af85165922efa0c5" translate="yes" xml:space="preserve">
          <source>YourPackage.pm</source>
          <target state="translated">YourPackage.pm</target>
        </trans-unit>
        <trans-unit id="96b451942b04b66df98082b51a96fd9c21c979e6" translate="yes" xml:space="preserve">
          <source>YourPackage.xs</source>
          <target state="translated">YourPackage.xs</target>
        </trans-unit>
        <trans-unit id="3a63a963c11724e54297328f1cd01fab7cc056fb" translate="yes" xml:space="preserve">
          <source>YourProjClass-&amp;gt;fallback_language_classes()</source>
          <target state="translated">YourProjClass-&amp;gt;fallback_language_classes()</target>
        </trans-unit>
        <trans-unit id="93d7ab614acf51e6ed84bd194c23c002e0bc546a" translate="yes" xml:space="preserve">
          <source>YourProjClass-&amp;gt;fallback_languages()</source>
          <target state="translated">YourProjClass-&amp;gt;fallback_languages()</target>
        </trans-unit>
        <trans-unit id="98d44898a77a54f7718ada94977059bdfaa937a9" translate="yes" xml:space="preserve">
          <source>Yuval Kogman &amp;lt;nothingmuch@woobling.org&amp;gt;</source>
          <target state="translated">Yuval Kogman &amp;lt;nothingmuch@woobling.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="cf3031c81c2a11248f63acc5b78e4d34caa6f6e1" translate="yes" xml:space="preserve">
          <source>Yves Orton suggested and helped for making &lt;code&gt;Sys::Syslog&lt;/code&gt; use the native event logger under Win32 systems.</source>
          <target state="translated">Yves Ortonは、Win32システムで &lt;code&gt;Sys::Syslog&lt;/code&gt; がネイティブイベントロガーを使用することを提案および支援しました。</target>
        </trans-unit>
        <trans-unit id="909f99a779adb66a76fc53ab56c7dd1caf35d0fd" translate="yes" xml:space="preserve">
          <source>Z</source>
          <target state="translated">Z</target>
        </trans-unit>
        <trans-unit id="f2fd2a56c54b7c37d0d9f4b109a0de518f12a9a8" translate="yes" xml:space="preserve">
          <source>Zeus for Windows is another Win32 multi-language editor/IDE that comes with support for Perl.</source>
          <target state="translated">Zeus for Windowsは、PerlをサポートするWin32の多言語エディタ/IDEです。</target>
        </trans-unit>
        <trans-unit id="db104e2c14625f90e76e1788e4a37b936ee652b6" translate="yes" xml:space="preserve">
          <source>Zlib Library Version Support</source>
          <target state="translated">Zlib ライブラリのバージョンサポート</target>
        </trans-unit>
        <trans-unit id="1e5c2f367f02e47a8c160cda1cd9d91decbac441" translate="yes" xml:space="preserve">
          <source>[</source>
          <target state="translated">[</target>
        </trans-unit>
        <trans-unit id="fd2a987f8fd28617d0641e26e1ee23e3f1c471fb" translate="yes" xml:space="preserve">
          <source>[.Foo.Bar]</source>
          <target state="translated">[.Foo.Bar]</target>
        </trans-unit>
        <trans-unit id="4b6373280a08e827a1ab5c68abe6349dceef8925" translate="yes" xml:space="preserve">
          <source>[.Lib.Auto.</source>
          <target state="translated">[.Lib.Auto.</target>
        </trans-unit>
        <trans-unit id="630f50e0cd8cffab6e0a142979fe618389586858" translate="yes" xml:space="preserve">
          <source>[.pod]</source>
          <target state="translated">[.pod]</target>
        </trans-unit>
        <trans-unit id="0cf7207af93f70e6c641ba1e90b8e15f86916573" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;http://en.wikipedia.org/wiki/Base64#URL_applications&quot;&gt;http://en.wikipedia.org/wiki/Base64#URL_applications&lt;/a&gt;</source>
          <target state="translated">[1] &lt;a href=&quot;http://en.wikipedia.org/wiki/Base64#URL_applications&quot;&gt;http://en.wikipedia.org/wiki/Base64#URL_applications&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d6819c355b216edc67b6c6a8c6dab5509cee1376" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;http://perl.plover.com/Rx/paper/&quot;&gt;http://perl.plover.com/Rx/paper/&lt;/a&gt;</source>
          <target state="translated">[1] &lt;a href=&quot;http://perl.plover.com/Rx/paper/&quot;&gt;http://perl.plover.com/Rx/paper/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f4bcc9cdddccdc2ae22d3c3454a7739be0e29b10" translate="yes" xml:space="preserve">
          <source>[2] &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;</source>
          <target state="translated">[2] &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b002b78bc12a3ff6e29895fae1de731a69f453ae" translate="yes" xml:space="preserve">
          <source>[&lt;b&gt;-help&lt;/b&gt;] [&lt;b&gt;-man&lt;/b&gt;] [&lt;b&gt;-exit&lt;/b&gt;</source>
          <target state="translated">[ &lt;b&gt;-help&lt;/b&gt; ] [ &lt;b&gt;-man&lt;/b&gt; ] [ &lt;b&gt;-exit&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b0275f738749aa6cac8eb913cf57b88a87e7251a" translate="yes" xml:space="preserve">
          <source>[= =] and [. .]</source>
          <target state="translated">[= =]および[。。]</target>
        </trans-unit>
        <trans-unit id="afca1504bc2e3c3044d29b9874e85f36958af894" translate="yes" xml:space="preserve">
          <source>[Building/installing modules]</source>
          <target state="translated">[モジュールの構築/インストール]</target>
        </trans-unit>
        <trans-unit id="1c6555677db9746d71e639d2861c450df21a423a" translate="yes" xml:space="preserve">
          <source>[INTERNAL] Test whether</source>
          <target state="translated">[内部]テストするかどうか</target>
        </trans-unit>
        <trans-unit id="3e3a19400d8a2d90d0db0e1989c48275083a979d" translate="yes" xml:space="preserve">
          <source>[INTERNAL] Tests whether the UTF8 flag is turned on in the</source>
          <target state="translated">[内部] UTF8フラグがオンになっているかどうかをテストします</target>
        </trans-unit>
        <trans-unit id="22eb99e5f093e515d3af9067fe7ea86722b6bbf1" translate="yes" xml:space="preserve">
          <source>[INTERNAL] Turns the</source>
          <target state="translated">[社内向け]</target>
        </trans-unit>
        <trans-unit id="009b33a0528361398d9c707d1795bc4cfafeac38" translate="yes" xml:space="preserve">
          <source>[If you have the recommended version of bash for DJGPP, this is already done for you.]</source>
          <target state="translated">[DJGPPに推奨されるバージョンのbashがある場合、これはすでに行われています。]</target>
        </trans-unit>
        <trans-unit id="5af5c7f45b299c973fea5c4dcd0294b1e6234199" translate="yes" xml:space="preserve">
          <source>[If you have the recommended versions of djdev, shell utilities and gawk, all these are already done for you, and you will not need to do anything.]</source>
          <target state="translated">[djdev、シェルユーティリティ、およびgawkの推奨バージョンがある場合、これらはすべてすでに行われているため、何もする必要はありません。]</target>
        </trans-unit>
        <trans-unit id="f3b3a575af1d23fed1f5628631ec3936ffe0f6d1" translate="yes" xml:space="preserve">
          <source>[Installing/building perl]</source>
          <target state="translated">[perlのインストール/ビルド]</target>
        </trans-unit>
        <trans-unit id="5d1e8f7d83caac3b34475dd7d9e3096070d95629" translate="yes" xml:space="preserve">
          <source>[MAYCHANGE] In other words, the array or hash fetch/store functions don't really fetch and store actual values in the case of tied arrays and hashes. They merely call &lt;code&gt;mg_copy&lt;/code&gt; to attach magic to the values that were meant to be &quot;stored&quot; or &quot;fetched&quot;. Later calls to &lt;code&gt;mg_get&lt;/code&gt; and &lt;code&gt;mg_set&lt;/code&gt; actually do the job of invoking the TIE methods on the underlying objects. Thus the magic mechanism currently implements a kind of lazy access to arrays and hashes.</source>
          <target state="translated">[MAYCHANGE]言い換えると、配列またはハッシュのフェッチ/ストア関数は、結合された配列とハッシュの場合、実際の値を実際にフェッチおよび格納しません。それらは単に &lt;code&gt;mg_copy&lt;/code&gt; を呼び出して、「格納」または「フェッチ」することを意図された値にマジックを付加します。後で &lt;code&gt;mg_get&lt;/code&gt; および &lt;code&gt;mg_set&lt;/code&gt; を呼び出すと、実際には基本となるオブジェクトでTIEメソッドが呼び出されます。したがって、魔法のメカニズムは現在、配列とハッシュへの一種の遅延アクセスを実装しています。</target>
        </trans-unit>
        <trans-unit id="2c69f013a0c0b9f7ed975da9c912abcf0653290a" translate="yes" xml:space="preserve">
          <source>[NEWVAL]</source>
          <target state="translated">[NEWVAL]</target>
        </trans-unit>
        <trans-unit id="4f834c241d7bdeabf113279ffdacebc7dc88459c" translate="yes" xml:space="preserve">
          <source>[Some of this answer was contributed by Kenneth Albanowski.]</source>
          <target state="translated">[この回答の一部は、Kenneth Albanowskiによって提供されました。]</target>
        </trans-unit>
        <trans-unit id="e9c2c8715a2a88d854204445ba9c4d5016aa0191" translate="yes" xml:space="preserve">
          <source>[This function has been largely superseded by the &lt;a href=&quot;#tie-VARIABLE%2cCLASSNAME%2cLIST&quot;&gt;tie&lt;/a&gt; function.]</source>
          <target state="translated">[この機能は主に&lt;a href=&quot;#tie-VARIABLE%2cCLASSNAME%2cLIST&quot;&gt;tie&lt;/a&gt;関数に置き換えられました。]</target>
        </trans-unit>
        <trans-unit id="b1c00ee4c595ea64bb97d342fb1c568e80ba451b" translate="yes" xml:space="preserve">
          <source>[This function has been largely superseded by the &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; function.]</source>
          <target state="translated">[この機能は主に &lt;code&gt;&lt;a href=&quot;functions/untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; 機能に取って代わられました。]</target>
        </trans-unit>
        <trans-unit id="3b25169a6ac2e6f9178110c63d21693ee54fec41" translate="yes" xml:space="preserve">
          <source>[This function has been largely superseded by the &lt;code&gt;&lt;a href=&quot;untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; function.]</source>
          <target state="translated">[この機能は主に &lt;code&gt;&lt;a href=&quot;untie&quot;&gt;untie&lt;/a&gt;&lt;/code&gt; 機能に取って代わられました。]</target>
        </trans-unit>
        <trans-unit id="466698b7c92675c3f06ae6b2691207f2e8b24913" translate="yes" xml:space="preserve">
          <source>[This section provides a short overview only...]</source>
          <target state="translated">[このセクションでは、短い概要のみを提供します...]</target>
        </trans-unit>
        <trans-unit id="68ecc94bfa207a245a096cc2d83887da582b2e04" translate="yes" xml:space="preserve">
          <source>[This section still under construction. Ignore everything here. Post no bills. Everything not permitted is forbidden.]</source>
          <target state="translated">[このセクションはまだ作成中です。ここではすべてを無視します。手形を投稿しません。許可されていないものはすべて禁止されています。]</target>
        </trans-unit>
        <trans-unit id="69f3514fe4449506ca2c5d0bbc28b3f3698032b0" translate="yes" xml:space="preserve">
          <source>[Well, it was in</source>
          <target state="translated">[まあ、それはあった</target>
        </trans-unit>
        <trans-unit id="88f04dbeb1493ee12988be863cfacc3c7afc777a" translate="yes" xml:space="preserve">
          <source>[linebreak]</source>
          <target state="translated">[linebreak]</target>
        </trans-unit>
        <trans-unit id="434d82c910fba2a895a5be59050f05f00a371e10" translate="yes" xml:space="preserve">
          <source>[r,t]</source>
          <target state="translated">[r,t]</target>
        </trans-unit>
        <trans-unit id="6018e494126b314973d815b3477ee1c68ccc6d49" translate="yes" xml:space="preserve">
          <source>[space][space]</source>
          <target state="translated">[space][space]</target>
        </trans-unit>
        <trans-unit id="cb559588de140bc32d992097ac9c98f627da21d3" translate="yes" xml:space="preserve">
          <source>\D is a negated \d; it represents any character but a digit</source>
          <target state="translated">\ Dは否定された\ dです。数字以外の任意の文字を表す</target>
        </trans-unit>
        <trans-unit id="6f370d6af4556227e5ea557e0c0431081559d1a3" translate="yes" xml:space="preserve">
          <source>\D is a negated \d; it represents any other character than a digit, or [^\d]</source>
          <target state="translated">\ Dは否定された\ dです。数字以外の文字を表す、または[^ \ d]</target>
        </trans-unit>
        <trans-unit id="483707e791c24bf4f182daf8d06032f62bf516af" translate="yes" xml:space="preserve">
          <source>\N</source>
          <target state="translated">\N</target>
        </trans-unit>
        <trans-unit id="4b60caece8e9624e4c91f3da6482cbb9fa5912e3" translate="yes" xml:space="preserve">
          <source>\N, like the period, matches any character but &quot;\n&quot;, but it does so regardless of whether the modifier &lt;code&gt;//s&lt;/code&gt; is in effect.</source>
          <target state="translated">\ Nはピリオドと同様に、「\ n」以外の任意の文字に一致しますが、修飾子 &lt;code&gt;//s&lt;/code&gt; が有効かどうかに関係なく一致します。</target>
        </trans-unit>
        <trans-unit id="5201358bd3798962465786e1340b8d798eb0da66" translate="yes" xml:space="preserve">
          <source>\S is a negated \s; it represents any non-whitespace character</source>
          <target state="translated">\ Sは否定された\ sです。空白以外の文字を表します</target>
        </trans-unit>
        <trans-unit id="2aaa2b30524de7ddb035b2ae4eda9d942f299a65" translate="yes" xml:space="preserve">
          <source>\S is a negated \s; it represents any non-whitespace character [^\s]</source>
          <target state="translated">\ Sは否定された\ sです。空白以外の文字[^ \ s]を表します</target>
        </trans-unit>
        <trans-unit id="133129d31f2a64079b4ceec9832484853084047e" translate="yes" xml:space="preserve">
          <source>\W is a negated \w; it represents any non-word character</source>
          <target state="translated">\ Wは否定された\ wです。単語以外の文字を表します</target>
        </trans-unit>
        <trans-unit id="2f560e92ebecb72c198e33822a82e6e5d9a8c550" translate="yes" xml:space="preserve">
          <source>\W is a negated \w; it represents any non-word character [^\w]</source>
          <target state="translated">\ Wは否定された\ wです。単語以外の文字を表します[^ \ w]</target>
        </trans-unit>
        <trans-unit id="ddc0294fd2b2565335d9fa242ca21ab1de388250" translate="yes" xml:space="preserve">
          <source>\d is a digit and represents</source>
          <target state="translated">\ dは数字であり、</target>
        </trans-unit>
        <trans-unit id="97c6b30e873b86cfc47d930fe4d9ba2652595791" translate="yes" xml:space="preserve">
          <source>\d matches a digit, not just [0-9] but also digits from non-roman scripts</source>
          <target state="translated">\ dは、[0-9]だけでなく、ローマ字以外のスクリプトの数字にも一致します</target>
        </trans-unit>
        <trans-unit id="ef7e6794ca9c6a06b54b66f279237fb8daaaeea8" translate="yes" xml:space="preserve">
          <source>\n</source>
          <target state="translated">\n</target>
        </trans-unit>
        <trans-unit id="7b4662d5c71b2e001cf94c995515942d7af18900" translate="yes" xml:space="preserve">
          <source>\s is a whitespace character and represents</source>
          <target state="translated">\ sは空白文字であり、</target>
        </trans-unit>
        <trans-unit id="34a39001363ef5f5ff61ce5c0f19ca73473f1c4c" translate="yes" xml:space="preserve">
          <source>\s matches a whitespace character, the set [\ \t\r\n\f] and others</source>
          <target state="translated">\ sは空白文字、セット[\ \ t \ r \ n \ f]などに一致します</target>
        </trans-unit>
        <trans-unit id="5b2fc8d661205bb1347d335b86f497e98283eb99" translate="yes" xml:space="preserve">
          <source>\w is a word character (alphanumeric or _) and represents</source>
          <target state="translated">\ wは単語文字（英数字または_）であり、</target>
        </trans-unit>
        <trans-unit id="9dec4b43c57ccafde6f9f014b8fdbdc6ad78db44" translate="yes" xml:space="preserve">
          <source>\w matches a word character (alphanumeric or _), not just [0-9a-zA-Z_] but also digits and characters from non-roman scripts</source>
          <target state="translated">\ wは、[0-9a-zA-Z_]だけでなく、ローマ字以外のスクリプトの数字や文字も含む単語文字（英数字または_）に一致します</target>
        </trans-unit>
        <trans-unit id="3ae3339d3df42bd81574a61520ae7ec1b26f3f20" translate="yes" xml:space="preserve">
          <source>\xXX</source>
          <target state="translated">\xXX</target>
        </trans-unit>
        <trans-unit id="4ff447b8ef42ca51fa6fb287bed8d40f49be58f1" translate="yes" xml:space="preserve">
          <source>]</source>
          <target state="translated">]</target>
        </trans-unit>
        <trans-unit id="5270612a32d634db637d354ac0c6c3ea3a691c4e" translate="yes" xml:space="preserve">
          <source>] ...]</source>
          <target state="translated">] ...]</target>
        </trans-unit>
        <trans-unit id="7ba1b0d7168057117598130b4cf4913ce7a6d1dd" translate="yes" xml:space="preserve">
          <source>] [</source>
          <target state="translated">] [</target>
        </trans-unit>
        <trans-unit id="e5f96af2d25deb494bcf280fcc22ad9c64b0b550" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;--&lt;/b&gt; ] [</source>
          <target state="translated">] [ &lt;b&gt;-&lt;/b&gt; ] [</target>
        </trans-unit>
        <trans-unit id="7837a05d80f9d4246db05db7739ac9da350692ee" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-A&lt;/b&gt; ] [ &lt;b&gt;-ok&lt;/b&gt; | &lt;b&gt;-okay&lt;/b&gt; | &lt;b&gt;-nok&lt;/b&gt; | &lt;b&gt;-nokay&lt;/b&gt; ]</source>
          <target state="translated">] [ &lt;b&gt;-A&lt;/b&gt; ] [ &lt;b&gt;-ok&lt;/b&gt; | &lt;b&gt;-大丈夫&lt;/b&gt; | &lt;b&gt;-nok&lt;/b&gt; | &lt;b&gt;-いいえ&lt;/b&gt; ]</target>
        </trans-unit>
        <trans-unit id="5d5d86b624a368f240fc8ef717bfac5763b684cc" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-F&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-F&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fa5aee76641c8374c4a3bb363faca409d18cd95d" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-M&lt;/b&gt;[&lt;b&gt;-&lt;/b&gt;]</source>
          <target state="translated">] [ &lt;b&gt;-M&lt;/b&gt; [ &lt;b&gt;-&lt;/b&gt; ]</target>
        </trans-unit>
        <trans-unit id="fe33edc3b5acacf101538a5199d8ef6004372824" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-b&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-b&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d91a8c76a043075cdd5f57b8dc8dd020742dc547" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-c&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-c&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4088d7468ddaef6b6676933981d369aadcae05a4" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-e&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-e&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d446bd20cd4f210e32dddf0953007e6f2d1b5053" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-f&lt;/b&gt; ] [ &lt;b&gt;-C [&lt;i&gt;number/list&lt;/i&gt;] &lt;/b&gt;] [ &lt;b&gt;-S&lt;/b&gt; ] [ &lt;b&gt;-x&lt;/b&gt;[</source>
          <target state="translated">] [ &lt;b&gt;-f&lt;/b&gt; ] [ &lt;b&gt;-C [ &lt;i&gt;番号/リスト&lt;/i&gt; ]&lt;/b&gt; ] [ &lt;b&gt;-S&lt;/b&gt; ] [ &lt;b&gt;-x&lt;/b&gt; [</target>
        </trans-unit>
        <trans-unit id="aca1a0eb03ef6c4968553072034eeee79bad305b" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-l&lt;/b&gt;[</source>
          <target state="translated">] [ &lt;b&gt;-l&lt;/b&gt; [</target>
        </trans-unit>
        <trans-unit id="f481bbb7a3ba5ecc6ab5d2ec8921b0caad222177" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-m&lt;/b&gt;[&lt;b&gt;-&lt;/b&gt;]</source>
          <target state="translated">] [ &lt;b&gt;-m&lt;/b&gt; [ &lt;b&gt;-&lt;/b&gt; ]</target>
        </trans-unit>
        <trans-unit id="7be946169865caf0b4ad4e1c551c97f832b6089b" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-r&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-r&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3b371bc5f1731a182afaca0f4c21e6e42f754174" translate="yes" xml:space="preserve">
          <source>] [ &lt;b&gt;-s&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-s&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1cab1fd629b30db28801a88fb200dff0c7358250" translate="yes" xml:space="preserve">
          <source>] [ &lt;code&gt;,&lt;/code&gt; [</source>
          <target state="translated">] [ &lt;code&gt;,&lt;/code&gt; [</target>
        </trans-unit>
        <trans-unit id="60ce1ac427ca955aba7df5e26e666a0cbcdc2f9a" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--date&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--date&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="d95dd25605574b2c81782f8507419949dc89534a" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--errors&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--errors&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="fbbc117050d9385ff235a1dc760a3b8dfa0999cc" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--fixed&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--fixed&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="a9250074a5445bcf8eef004dc71ec67ecb9c809b" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--fixedbold&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--fixedbold&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="d7f9db810e921cd28d21cd440fca4722b8d4bf69" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--fixedbolditalic&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--fixedbolditalic&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="aa2fbdd948dba01a46110fa01725308ca2ef5a08" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--fixeditalic&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--fixeditalic&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="6fe77b356c6468bc7d92a318ad6bc1146c2e9172" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--name&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--name&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="39d7370445bc798950f647a09f55cf0aa24d1af4" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--nourls&lt;/b&gt;] [&lt;b&gt;--official&lt;/b&gt;] [&lt;b&gt;--quotes&lt;/b&gt;=</source>
          <target state="translated">] [ &lt;b&gt;--nourls&lt;/b&gt; ] [ &lt;b&gt;--official&lt;/b&gt; ] [ &lt;b&gt;--quotes&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="3ec1ee1005b040af6eed1e1fb1b89be01226d9ce" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--nourls&lt;/b&gt;] [&lt;b&gt;--stderr&lt;/b&gt;] [&lt;b&gt;-w&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;--nourls&lt;/b&gt; ] [ &lt;b&gt;--stderr&lt;/b&gt; ] [ &lt;b&gt;-w&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fc864e3beb0db82da5fea274b5d83179e2d64279" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--release&lt;/b&gt;[=</source>
          <target state="translated">] [ &lt;b&gt;--release&lt;/b&gt; [=</target>
        </trans-unit>
        <trans-unit id="039bb11ec7e8c6197572dde03eb7f6b45f6c8aa6" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;--stderr&lt;/b&gt;] [&lt;b&gt;--utf8&lt;/b&gt;] [&lt;b&gt;--verbose&lt;/b&gt;] [</source>
          <target state="translated">] [ &lt;b&gt;--stderr&lt;/b&gt; ] [ &lt;b&gt;--utf8&lt;/b&gt; ] [ &lt;b&gt;--verbose&lt;/b&gt; ] [</target>
        </trans-unit>
        <trans-unit id="a4b5a58dd7ad938ef0e7ae582da7c0d873b1c242" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;-formatter&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-formatter&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3fea5aca88ab916f93ed287dace98a76f7c143b9" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;-i&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-i&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="53f6bda63d23372157c365e9965c7ef45e33a277" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;-output&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-output&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="18e0dd56af29c5174edbefe6f7085682dda6e116" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;-pathlist&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-pathlist&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="22e124d430902d5c5221cf1c7cf4da237a26222d" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;-q&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-q&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0fde4e5d48f00a1e501ad8fe7e8926bde75175b1" translate="yes" xml:space="preserve">
          <source>] [&lt;b&gt;-verbose&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;-verbose&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e725a8e5ac100bccc71bd3fa100f49857c67db06" translate="yes" xml:space="preserve">
          <source>] ] &lt;code&gt;}&lt;/code&gt;.</source>
          <target state="translated">]] &lt;code&gt;}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="840af7de6cad4319ff4be78eacfb9c5acf43cf39" translate="yes" xml:space="preserve">
          <source>] ] [ &lt;b&gt;-0&lt;/b&gt;[</source>
          <target state="translated">]] [ &lt;b&gt;-0&lt;/b&gt; [</target>
        </trans-unit>
        <trans-unit id="9bd44ceffbf549e2ad098d1002b1d677b7d0aa0b" translate="yes" xml:space="preserve">
          <source>] ] [ &lt;b&gt;-D&lt;/b&gt;[</source>
          <target state="translated">]] [ &lt;b&gt;-D&lt;/b&gt; [</target>
        </trans-unit>
        <trans-unit id="7bb86a5d6f5da412edc5fa8d69ccfe2ff581bca6" translate="yes" xml:space="preserve">
          <source>] ] [ &lt;b&gt;-I&lt;/b&gt;</source>
          <target state="translated">]] [ &lt;b&gt;-I&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="598e07f95f029fa4f2ce352acaf2288c664b4b76" translate="yes" xml:space="preserve">
          <source>] ] [ &lt;b&gt;-cw&lt;/b&gt; ] [ &lt;b&gt;-d&lt;/b&gt;[&lt;b&gt;t&lt;/b&gt;][:</source>
          <target state="translated">]] [ &lt;b&gt;-cw&lt;/b&gt; ] [ &lt;b&gt;-d&lt;/b&gt; [ &lt;b&gt;t&lt;/b&gt; ] [：</target>
        </trans-unit>
        <trans-unit id="9db4a34f3f65d57a976aae91bae6f7bcb0835f01" translate="yes" xml:space="preserve">
          <source>] ] [ &lt;b&gt;-i&lt;/b&gt;[</source>
          <target state="translated">]] [ &lt;b&gt;-i&lt;/b&gt; [</target>
        </trans-unit>
        <trans-unit id="9d460c5f4d3c2477cabad0ac755529bb24fc2217" translate="yes" xml:space="preserve">
          <source>] ] [ &lt;b&gt;-pna&lt;/b&gt; ] [ &lt;b&gt;-F&lt;/b&gt;</source>
          <target state="translated">]] [ &lt;b&gt;-pna&lt;/b&gt; ] [ &lt;b&gt;-F&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fc8d2ac6bf0f644f728f5f8cfc8080a8f51efa0e" translate="yes" xml:space="preserve">
          <source>] ] [ [&lt;b&gt;-e&lt;/b&gt;|&lt;b&gt;-E&lt;/b&gt;]</source>
          <target state="translated">]] [[ &lt;b&gt;-e&lt;/b&gt; | &lt;b&gt;-E&lt;/b&gt; ]</target>
        </trans-unit>
        <trans-unit id="9a7dbaad3cf2aa9abf7389e31afb732d6e15865c" translate="yes" xml:space="preserve">
          <source>]. I.e., &quot;_1&quot; becomes with $_[1], and &quot;_-3&quot; is interpreted as $_[-3] (in which case @_ should have at least three elements in it). Note that $_[0] is the language handle, and is typically not named directly.</source>
          <target state="translated">]。つまり、「_ 1」は$ _ [1]になり、「_- 3」は$ _ [-3]として解釈されます（この場合、@ _には少なくとも3つの要素が必要です）。$ _ [0]は言語ハンドルであり、通常は直接名前が付けられないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3fad04c26433591d23451512c23642ef92daf2c6" translate="yes" xml:space="preserve">
          <source>]...</source>
          <target state="translated">]...</target>
        </trans-unit>
        <trans-unit id="36407ed3b603d0dfcd1bd6d50bc3fd8861d8d53f" translate="yes" xml:space="preserve">
          <source>][&lt;b&gt;,-p&lt;/b&gt;][&lt;b&gt;,-q&lt;/b&gt;][&lt;b&gt;,-l&lt;/b&gt;] [&lt;b&gt;,-s&lt;/b&gt;</source>
          <target state="translated">] [ &lt;b&gt;、-p&lt;/b&gt; ] [ &lt;b&gt;、-q&lt;/b&gt; ] [ &lt;b&gt;、-l&lt;/b&gt; ] [ &lt;b&gt;、-s&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a9030ca5cbcfd3f3b2ec230506e50fbd3cb2d7e0" translate="yes" xml:space="preserve">
          <source>][&lt;b&gt;,-x&lt;/b&gt;</source>
          <target state="translated">][&lt;b&gt;,-x&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8755a99ada779c83177a95e225a5063fe7499c98" translate="yes" xml:space="preserve">
          <source>]] [&lt;b&gt;--section&lt;/b&gt;=</source>
          <target state="translated">]] [ &lt;b&gt;--section&lt;/b&gt; =</target>
        </trans-unit>
        <trans-unit id="52fd940d0f74d5bee59eaa7c4f0549763254e747" translate="yes" xml:space="preserve">
          <source>_AUTHORS_</source>
          <target state="translated">_AUTHORS_</target>
        </trans-unit>
        <trans-unit id="6b18f91a4d56bcb4195d01326c1707f269dca59a" translate="yes" xml:space="preserve">
          <source>_FFFE and 0x</source>
          <target state="translated">_FFFEおよび0x</target>
        </trans-unit>
        <trans-unit id="9ab76b9bb5c2c00731a6298f38a4cee313b768d1" translate="yes" xml:space="preserve">
          <source>_FFFF), all non-shortest encodings, etc.</source>
          <target state="translated">_FFFF）、すべての最短以外のエンコーディングなど</target>
        </trans-unit>
        <trans-unit id="335f29be57bcf11c73c32f1eb934a4263c82062e" translate="yes" xml:space="preserve">
          <source>_MANIFEST_</source>
          <target state="translated">_MANIFEST_</target>
        </trans-unit>
        <trans-unit id="95a35cef151f823296dfad3b7387390964178aff" translate="yes" xml:space="preserve">
          <source>_PDF_ files</source>
          <target state="translated">_PDF_ファイル</target>
        </trans-unit>
        <trans-unit id="a004e5d824ef48686abd54ae20b660d4a2c545c5" translate="yes" xml:space="preserve">
          <source>_Really_ Symbolic Calculator</source>
          <target state="translated">_Really_ Symbolic Calculator</target>
        </trans-unit>
        <trans-unit id="544b04467d0a8ee1a845e4b919a57d9da6144a5e" translate="yes" xml:space="preserve">
          <source>__DATA__</source>
          <target state="translated">__DATA__</target>
        </trans-unit>
        <trans-unit id="c7919376414e8b09a0411c19eee34a71902436cc" translate="yes" xml:space="preserve">
          <source>__DATA__, __END__, and the FOOBAR::DATA filehandle.</source>
          <target state="translated">__DATA __、__ END__、およびFOOBAR :: DATAファイルハンドル。</target>
        </trans-unit>
        <trans-unit id="ce8a6e08bc25f2ef37956e900401265cf56138c8" translate="yes" xml:space="preserve">
          <source>__END__</source>
          <target state="translated">__END__</target>
        </trans-unit>
        <trans-unit id="9d5d8995523b8b8951428baa81ea663ff0bd2c77" translate="yes" xml:space="preserve">
          <source>__FILE__</source>
          <target state="translated">__FILE__</target>
        </trans-unit>
        <trans-unit id="a51b95694c81c92580bff6f580f8e200ecf86661" translate="yes" xml:space="preserve">
          <source>__LINE__</source>
          <target state="translated">__LINE__</target>
        </trans-unit>
        <trans-unit id="04bd40a79312fa43a624aef25ac864c0770871a3" translate="yes" xml:space="preserve">
          <source>__PACKAGE__</source>
          <target state="translated">__PACKAGE__</target>
        </trans-unit>
        <trans-unit id="b0563c4fda49219aeb921efb5a63d4cff221a59b" translate="yes" xml:space="preserve">
          <source>__SUB__</source>
          <target state="translated">__SUB__</target>
        </trans-unit>
        <trans-unit id="aba4564d3c1fb21ecf21279947a269bfd72d5448" translate="yes" xml:space="preserve">
          <source>__int64</source>
          <target state="translated">__int64</target>
        </trans-unit>
        <trans-unit id="3485357323ef68368533ee148f92fcc38f19f972" translate="yes" xml:space="preserve">
          <source>_bgcd()</source>
          <target state="translated">_bgcd()</target>
        </trans-unit>
        <trans-unit id="3cde53170729285b62e4195015718cc3fccd9d47" translate="yes" xml:space="preserve">
          <source>_control87(3)</source>
          <target state="translated">_control87(3)</target>
        </trans-unit>
        <trans-unit id="ff4fbe22558273c6659ff3e79e3859bcae2f877b" translate="yes" xml:space="preserve">
          <source>_digit($obj, 0)</source>
          <target state="translated">_digit（$ obj、0）</target>
        </trans-unit>
        <trans-unit id="25fb2a539a78bedeb7219e53f2b8469577c24022" translate="yes" xml:space="preserve">
          <source>_digit(123, -1)</source>
          <target state="translated">_digit（123、-1）</target>
        </trans-unit>
        <trans-unit id="a23c4cef0829fb103be12bd8e5048bf513e4694f" translate="yes" xml:space="preserve">
          <source>_perl.exe_</source>
          <target state="translated">_perl.exe_</target>
        </trans-unit>
        <trans-unit id="2f72a716af3238025dd4229dd58b83bc8629ac38" translate="yes" xml:space="preserve">
          <source>_perl_.exe_</source>
          <target state="translated">_perl_.exe_</target>
        </trans-unit>
        <trans-unit id="5991d513b9abe99f11e9b16c8256e4e9e06ca2ba" translate="yes" xml:space="preserve">
          <source>_perl__.exe_</source>
          <target state="translated">_perl__.exe_</target>
        </trans-unit>
        <trans-unit id="2db94965490eada37ae5ff14a1e0846dbe050e7c" translate="yes" xml:space="preserve">
          <source>_perl___.exe_</source>
          <target state="translated">_perl___.exe_</target>
        </trans-unit>
        <trans-unit id="1fdbb463b8aba017e1e17708622b828c0a70d691" translate="yes" xml:space="preserve">
          <source>_prove</source>
          <target state="translated">_prove</target>
        </trans-unit>
        <trans-unit id="998aae22ec5a43bf133ffb2d411823f4c8a72a20" translate="yes" xml:space="preserve">
          <source>_proverc</source>
          <target state="translated">_proverc</target>
        </trans-unit>
        <trans-unit id="be410059a97a4524ce3b914f3e9c9e407663c029" translate="yes" xml:space="preserve">
          <source>_read</source>
          <target state="translated">_read</target>
        </trans-unit>
        <trans-unit id="8f67b7c018384a0d10f9d2b4577d0c0658bc078a" translate="yes" xml:space="preserve">
          <source>_stdlib.h_ functions</source>
          <target state="translated">_stdlib.h_関数</target>
        </trans-unit>
        <trans-unit id="d4086139b290958ed25f5bd7a1ff3d730dcf31a9" translate="yes" xml:space="preserve">
          <source>_sub()</source>
          <target state="translated">_sub()</target>
        </trans-unit>
        <trans-unit id="ab1aafd933e3c1f34b78838ca464fabb2cd4e4ef" translate="yes" xml:space="preserve">
          <source>_utf8_off</source>
          <target state="translated">_utf8_off</target>
        </trans-unit>
        <trans-unit id="17db770cf15f37a3c9f4bbc8584367bfd333dd75" translate="yes" xml:space="preserve">
          <source>_utf8_on</source>
          <target state="translated">_utf8_on</target>
        </trans-unit>
        <trans-unit id="349a2cf958187a837c3aed60aca5ce84a2ba8f78" translate="yes" xml:space="preserve">
          <source>`Memoizing' a function makes it faster by trading space for time. It does this by caching the return values of the function in a table. If you call the function again with the same arguments, &lt;code&gt;memoize&lt;/code&gt; jumps in and gives you the value out of the table, instead of letting the function compute the value all over again.</source>
          <target state="translated">関数の「メモ化」は、時間とスペースを交換することで、より速くなります。これは、関数の戻り値をテーブルにキャッシュすることによって行われます。同じ引数を使用して関数を再度呼び出す場合は、関数に値をもう一度計算させるのではなく、 &lt;code&gt;memoize&lt;/code&gt; ジャンプしてテーブルから値を取得します。</target>
        </trans-unit>
        <trans-unit id="97a327decd1b5a73620456539cf89766d09acb8c" translate="yes" xml:space="preserve">
          <source>`` and pipe-open do not work under DOS.</source>
          <target state="translated">``およびpipe-openはDOSでは機能しません。</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="049537f8ff01227a5296e1d4f8184a98a3f6ecb6" translate="yes" xml:space="preserve">
          <source>a &lt;b&gt;-u&lt;/b&gt; flag to make it unbuffered. But very few commands are designed to operate over pipes, so this seldom works unless you yourself wrote the program on the other end of the double-ended pipe.</source>
          <target state="translated">バッファリングを解除する&lt;b&gt;-u&lt;/b&gt;フラグ。しかし、パイプを介して動作するように設計されているコマンドはほとんどないため、両端パイプの反対側でプログラムを自分で作成しない限り、これはほとんど機能しません。</target>
        </trans-unit>
        <trans-unit id="29515f80a90ad15c4d7bd700ddff82308e27f071" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;DESTROY&lt;/code&gt; method), which the call to &lt;code&gt;EVERY::LAST::Destroy&lt;/code&gt; in the inherited destructor then correctly picks up.</source>
          <target state="translated">A &lt;code&gt;DESTROY&lt;/code&gt; への呼び出し方法）、 &lt;code&gt;EVERY::LAST::Destroy&lt;/code&gt; 正しくその後、継承されたデストラクタでピックアップを。</target>
        </trans-unit>
        <trans-unit id="5b4991d0075936f9dd187e536d33c94e2aa27450" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;new&lt;/code&gt; method), which the call to &lt;code&gt;EVERY::LAST::Init&lt;/code&gt; in the inherited constructor then correctly picks up.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; の呼び出し方法）、 &lt;code&gt;EVERY::LAST::Init&lt;/code&gt; 継承されたコンストラクタでは、その後、正常にピックアップします。</target>
        </trans-unit>
        <trans-unit id="c969393479d626630230a3b33439fab76b06b48e" translate="yes" xml:space="preserve">
          <source>a PREFIX was given as an argument to WriteMakefile() it will set it to the $new_prefix + $default. This is for systems whose file layouts don't neatly fit into our ideas of prefixes.</source>
          <target state="translated">PREFIXがWriteMakefile()の引数として与えられた場合は、 $new_prefix+$defaultに設定されます。これは、ファイルのレイアウトが私たちの考えているプレフィックスにうまくフィットしないシステムのためのものです。</target>
        </trans-unit>
        <trans-unit id="1e7f6022e597b2747e658cd9274fe1392855ea63" translate="yes" xml:space="preserve">
          <source>a Pod block with a &quot;=cut&quot; command. In that case, the Pod processor must halt parsing of the input file, and must by default emit a warning.</source>
          <target state="translated">を使用して、&quot;=cut &quot;コマンドを使用してPodブロックを作成した場合には、入力ファイルの解析を停止しなければなりません。この場合、Podプロセッサは入力ファイルの解析を停止し、デフォルトで警告を発しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a295228fd9bd780a4f55d14f8063050501961916" translate="yes" xml:space="preserve">
          <source>a blank (read: empty) line, with the single exception of the file start, which is also starting a paragraph. That means that especially a command (e.g. &lt;code&gt;=head1&lt;/code&gt; )</source>
          <target state="translated">空白（読み取り：空）の行。ただし、ファイルの開始（段落も開始する）を除いて、つまり、特にコマンド（ &lt;code&gt;=head1&lt;/code&gt; など）</target>
        </trans-unit>
        <trans-unit id="75c1385dc7bf5ab285efa7812871a616728a97fa" translate="yes" xml:space="preserve">
          <source>a blank line.</source>
          <target state="translated">空白の行。</target>
        </trans-unit>
        <trans-unit id="23d9744ba98ffa764233c38e2d3604f3b2d4a76e" translate="yes" xml:space="preserve">
          <source>a bytestream and should not be treated as such. This makes using I/O mechanisms with internal buffering like stdio (i.e. print() and friends) especially cumbersome. Use syswrite(), or better send(), like in the example below.</source>
          <target state="translated">はバイストリームであり、そのように扱うべきではありません。これにより、stdio のような内部バッファリングを持つ I/O メカニズム (すなわち print()や friends)を使用することが特に面倒になります。以下の例のように、syswrite()か send()を使用してください。</target>
        </trans-unit>
        <trans-unit id="633f7c37ae295810943767d3bf2df992ec0feaea" translate="yes" xml:space="preserve">
          <source>a call to &lt;code&gt;SvPV()&lt;/code&gt; or one of its variants, in case any call to string overloading updates the internal UTF-8 encoding flag.</source>
          <target state="translated">呼び出し &lt;code&gt;SvPV()&lt;/code&gt; またはその変異体の一つは、ケース内の文字列のオーバーロードへの呼び出しは、内部UTF-8コードフラグを更新します。</target>
        </trans-unit>
        <trans-unit id="3db5176b71e2550579d05b0d599c0802a2e9855b" translate="yes" xml:space="preserve">
          <source>a call to SvPV() or one of its variants, in case any call to string overloading updates the internal flag.</source>
          <target state="translated">文字列オーバーロードの呼び出しで内部フラグが更新された場合に備えて、SvPV()またはその亜種の一つを呼び出します。</target>
        </trans-unit>
        <trans-unit id="8e150fc9a00a9d6aba574abf6b3ddaf310665b85" translate="yes" xml:space="preserve">
          <source>a caller (that is, if we're in a subroutine or &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;) and the undefined value otherwise. caller never returns XS subs and they are skipped. The next pure perl sub will appear instead of the XS sub in caller's return values. In list context, caller returns</source>
          <target state="translated">呼び出し元（つまり、サブルーチンまたは &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; にいる場合）、それ以外の場合は未定義の値。呼び出し元はXSサブルーチンを返すことはなく、スキップされます。次の純粋なperlサブは、呼び出し元の戻り値のXSサブの代わりに表示されます。リストのコンテキストでは、呼び出し元は戻ります</target>
        </trans-unit>
        <trans-unit id="27f90951a846aad1e51cfa906ae9aae15befd397" translate="yes" xml:space="preserve">
          <source>a caller (that is, if we're in a subroutine or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;) and the undefined value otherwise. caller never returns XS subs and they are skipped. The next pure perl sub will appear instead of the XS sub in caller's return values. In list context, caller returns</source>
          <target state="translated">呼び出し元（つまり、サブルーチンまたは &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; にいる場合）、それ以外の場合は未定義の値。呼び出し元はXSサブルーチンを返すことはなく、スキップされます。次の純粋なperlサブは、呼び出し元の戻り値のXSサブの代わりに表示されます。リストのコンテキストでは、呼び出し元は戻ります</target>
        </trans-unit>
        <trans-unit id="98a69b7d014f4c34538d96daa513e20ae3249ccf" translate="yes" xml:space="preserve">
          <source>a character</source>
          <target state="translated">一字</target>
        </trans-unit>
        <trans-unit id="4d30a63fe6161c410a2de8ef976b935b79ebde5a" translate="yes" xml:space="preserve">
          <source>a directory which the extensions Perl library module passes to the DynaLoader when asking it to map the shareable image, or</source>
          <target state="translated">拡張PerlライブラリモジュールがDynaLoaderに共有可能なイメージのマッピングを依頼する際に渡すディレクトリ。</target>
        </trans-unit>
        <trans-unit id="d53e127062317983028dd489e9754291d72caa45" translate="yes" xml:space="preserve">
          <source>a dummy implementation.</source>
          <target state="translated">ダミーの実装です。</target>
        </trans-unit>
        <trans-unit id="607bd3e7b2e3b5390e3bf8ef6a8b9efe50dc7299" translate="yes" xml:space="preserve">
          <source>a failure of the OS/2 API call, having some workarounds coded).</source>
          <target state="translated">OS/2 APIコールの失敗で、いくつかの回避策がコード化されています)。</target>
        </trans-unit>
        <trans-unit id="f2f9eb42b04a6bb70eb81a0ae0a802e7347d6301" translate="yes" xml:space="preserve">
          <source>a filehandle, even though it looks like one). DBNAME is the name of the database (without the</source>
          <target state="translated">のように見えても、ファイルハンドルではありません)。DBNAMEはデータベースの名前です(</target>
        </trans-unit>
        <trans-unit id="d89a37a0200dc0b35d04809afbc53cbf5901983a" translate="yes" xml:space="preserve">
          <source>a function, and precedence doesn't matter. Otherwise it's a list operator or unary operator, and precedence does matter. Whitespace between the function and left parenthesis doesn't count, so sometimes you need to be careful:</source>
          <target state="translated">のような関数であれば、優先順位は関係ありません。それ以外の場合はリスト演算子か単項演算子で、優先順位は関係ありません。関数と左括弧の間の空白はカウントされないので、時々注意が必要です。</target>
        </trans-unit>
        <trans-unit id="42d8657e92871e593008c5368345a46e3ebc4eac" translate="yes" xml:space="preserve">
          <source>a hard reference. If you use it as a reference, it'll be treated as a symbolic reference. That is, the value of the scalar is taken to be the</source>
          <target state="translated">難しい参照です。参照として使う場合は シンボリックな参照として扱われます つまり、スカラーの値は</target>
        </trans-unit>
        <trans-unit id="b47a8f555bfc4607fa743152b516f486d86995c9" translate="yes" xml:space="preserve">
          <source>a leading &quot;:&quot;. Empty portions are returned as empty string ''.</source>
          <target state="translated">を先頭の &quot;:&quot; で指定します。空の部分は空の文字列 '' として返されます。</target>
        </trans-unit>
        <trans-unit id="c3ead9f1232af179bcf0c56760a744aa581fa638" translate="yes" xml:space="preserve">
          <source>a long time ago, and some people got used to our funny spelling, and so just as with &lt;code&gt;HTTP_REFERER&lt;/code&gt; &amp;rsquo;s own missing letter, our weird spelling has stuck around.</source>
          <target state="translated">ずっと前に、何人かの人々は私たちの面白いスペルに慣れました、そしてそれで &lt;code&gt;HTTP_REFERER&lt;/code&gt; 自身の欠けている文字と同じように、私たちの奇妙なスペルが行き詰まっています。</target>
        </trans-unit>
        <trans-unit id="c5ab2e702917e9fab9c642c3876da1a3b4538ce1" translate="yes" xml:space="preserve">
          <source>a mergesort, which happens to be stable, will be employed anyway. Note that</source>
          <target state="translated">のような安定したマージソートが採用されます。このことに注意してください。</target>
        </trans-unit>
        <trans-unit id="02537a2b811222631d1996c38165a9255a043dba" translate="yes" xml:space="preserve">
          <source>a noun (i.e., saying how much of it there is, while giving the correct form of it). The behavior of this method is handy for English and a few other Western European languages, and you should override it for languages where it's not suitable. You can feel free to read the source, but the current implementation is basically as this pseudocode describes:</source>
          <target state="translated">名詞を指定します (つまり、正しい形を与えながら、どのくらいの量があるかを言います)。このメソッドの動作は英語といくつかの他の西ヨーロッパの言語では便利です。ソースを読むのは自由ですが、現在の実装は基本的にはこの疑似コードに記述されている通りです。</target>
        </trans-unit>
        <trans-unit id="cbaad0f8fdd1c074dd23e8663bc741bba26c0e9b" translate="yes" xml:space="preserve">
          <source>a number &lt;code&gt;OS_MAJOR + 0.001 * OS_MINOR&lt;/code&gt; .</source>
          <target state="translated">数値 &lt;code&gt;OS_MAJOR + 0.001 * OS_MINOR&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20b1aa3e6979f290ef40d1e602b1d7ee858c53e5" translate="yes" xml:space="preserve">
          <source>a parse error.</source>
          <target state="translated">を使用してエラーを解析します。</target>
        </trans-unit>
        <trans-unit id="36958640033ae606fe1d0a4aeb5cf8119f6964e4" translate="yes" xml:space="preserve">
          <source>a particular place, in combination with non-linguistic location-specific information such as what currency is used there. Locales</source>
          <target state="translated">特定の場所を、その場所で使用されている通貨などの非言語的な場所固有の情報と組み合わせて表示します。ロケール</target>
        </trans-unit>
        <trans-unit id="427679a88e71c9d05f75a15acaaf64e423868907" translate="yes" xml:space="preserve">
          <source>a posteriori</source>
          <target state="translated">事後的</target>
        </trans-unit>
        <trans-unit id="a7361da6063a7ceef198f250842e89b36593b797" translate="yes" xml:space="preserve">
          <source>a reference to a &lt;code&gt;Pod::Paragraph&lt;/code&gt; object which contains further information about the paragraph (see &lt;a href=&quot;inputobjects&quot;&gt;Pod::InputObjects&lt;/a&gt; for details).</source>
          <target state="translated">段落に関する詳細情報を含む &lt;code&gt;Pod::Paragraph&lt;/code&gt; オブジェクトへの参照（詳細は&lt;a href=&quot;inputobjects&quot;&gt;Pod :: InputObjects&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="c80e050c47afd7c7439491b82841365aa5c3f43a" translate="yes" xml:space="preserve">
          <source>a reference to a &lt;code&gt;Pod::Paragraph&lt;/code&gt; object which contains further information about the paragraph command (see &lt;a href=&quot;inputobjects&quot;&gt;Pod::InputObjects&lt;/a&gt; for details).</source>
          <target state="translated">段落コマンドに関する詳細情報を含む &lt;code&gt;Pod::Paragraph&lt;/code&gt; オブジェクトへの参照（詳細については、&lt;a href=&quot;inputobjects&quot;&gt;Pod :: InputObjects&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="f1cf41b67f8ac934bdb1895a8415ee32895dafcf" translate="yes" xml:space="preserve">
          <source>a reference to the subroutine;</source>
          <target state="translated">サブルーチンへの参照。</target>
        </trans-unit>
        <trans-unit id="c10bb3ae2e9e12614dc451b112b763b0e4c6ea09" translate="yes" xml:space="preserve">
          <source>a reference to the symbol table entry (typeglob) containing the subroutine;</source>
          <target state="translated">サブルーチンを含むシンボルテーブルエントリ(typeglob)への参照。</target>
        </trans-unit>
        <trans-unit id="716ec8e228f41268238a19d64c81add7c59efa1b" translate="yes" xml:space="preserve">
          <source>a regex:</source>
          <target state="translated">という正規表現を使用しています。</target>
        </trans-unit>
        <trans-unit id="ff9123773c3af11dc4fc6c1bb3d5deb9aca9a8cf" translate="yes" xml:space="preserve">
          <source>a regexp and backreferences &lt;code&gt;\g1&lt;/code&gt; , &lt;code&gt;\g2&lt;/code&gt; ,... only</source>
          <target state="translated">正規表現と後方参照 &lt;code&gt;\g1&lt;/code&gt; 、 &lt;code&gt;\g2&lt;/code&gt; 、...のみ</target>
        </trans-unit>
        <trans-unit id="01acfa70c00b2c40814c6e8e07848ca1e6071adc" translate="yes" xml:space="preserve">
          <source>a regexp. This is a really nice feature; what matches later in a regexp is made to depend on what matched earlier in the regexp. Suppose we wanted to look for doubled words in a text, like 'the the'. The following regexp finds all 3-letter doubles with a space in between:</source>
          <target state="translated">の再正規表現にマッチします。これはとても良い機能です。再帰検索で後からマッチするものは、再帰検索の前にマッチしたものに依存するようになります。例えば、'the the'のような二重語の単語を探したいとします。次の正規表現は、スペースを挟んだ3文字のダブルスをすべて検索します。</target>
        </trans-unit>
        <trans-unit id="479e514b0897fdfb8d6718c16ce953228a292ea2" translate="yes" xml:space="preserve">
          <source>a regexp; not doing so may lead to surprising and unsatisfactory results.</source>
          <target state="translated">そうしないと、意外な結果や満足のいかない結果になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8430d6aa05798e9ad31cc9f0f4c419ec21ff77ea" translate="yes" xml:space="preserve">
          <source>a simple word</source>
          <target state="translated">一言</target>
        </trans-unit>
        <trans-unit id="e941e8088e0ee725d5a1331bbb15c1f7fa4f3cdd" translate="yes" xml:space="preserve">
          <source>a string of Perl statements.</source>
          <target state="translated">Perl文の文字列。</target>
        </trans-unit>
        <trans-unit id="76ca2e58b13a0c692067763da1d921195c362fc6" translate="yes" xml:space="preserve">
          <source>a string of octal digits. See also &lt;a href=&quot;#oct&quot;&gt;oct&lt;/a&gt;, if all you have is a string.</source>
          <target state="translated">8進数の文字列。文字列だけの場合は、&lt;a href=&quot;#oct&quot;&gt;oct&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f83ace0c428bcd5408c51dfef2ab5e8998435bd7" translate="yes" xml:space="preserve">
          <source>a string of octal digits. See also &lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt;, if all you have is a string.</source>
          <target state="translated">8進数の文字列。文字列だけの場合は、&lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b3166c6d48bdc27e53a55abb43985ea1756a1268" translate="yes" xml:space="preserve">
          <source>a subroutine reference.</source>
          <target state="translated">サブルーチン参照。</target>
        </trans-unit>
        <trans-unit id="04f0c4b1fd780f4be3730ec3c5d7dfd8c9451073" translate="yes" xml:space="preserve">
          <source>a thread:</source>
          <target state="translated">一本の糸。</target>
        </trans-unit>
        <trans-unit id="fe6d7479ae4200c3a6f4997fc5801bb9889aa1b5" translate="yes" xml:space="preserve">
          <source>a whitespace character.)</source>
          <target state="translated">空白文字)を使用しています。</target>
        </trans-unit>
        <trans-unit id="78ecd65792fd338affd06e9d02fd8d0820236817" translate="yes" xml:space="preserve">
          <source>a) How do I verify that an email address is correctly formatted?</source>
          <target state="translated">a)メールアドレスが正しくフォーマットされていることを確認するには?</target>
        </trans-unit>
        <trans-unit id="1ee08278869a8bdd3842c22f817ca34ed228cb42" translate="yes" xml:space="preserve">
          <source>a+bi</source>
          <target state="translated">a+bi</target>
        </trans-unit>
        <trans-unit id="81541b7da471dd2332c53aedfa2bdfe3a4665452" translate="yes" xml:space="preserve">
          <source>a-f (or A-F, case doesn't matter). Each hexadecimal digit represents four bits, or half a byte. &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; 0x..., &quot;\n&quot;&lt;/code&gt; will show a hexadecimal number in decimal, and &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt; &quot;%x\n&quot;, $decimal&lt;/code&gt; will show a decimal number in hexadecimal. If you have just the &quot;hex digits&quot; of a hexadecimal number, you can use the &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">af（またはAF、大文字小文字は関係ありません）。各16進数字は4ビット、つまり半バイトを表します。 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; 0x..., &quot;\n&quot;&lt;/code&gt; は16進数を10進数で表示し、 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt; &quot;%x\n&quot;, $decimal&lt;/code&gt; は10進数を16進数で表示します。16進数の「16進数」だけがある場合は、 &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex()&lt;/a&gt;&lt;/code&gt; 関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="ed5e8e851dceeb90b5c2b37a81b2ad11ae340d95" translate="yes" xml:space="preserve">
          <source>a.out-style build</source>
          <target state="translated">A.アウトスタイルビルド</target>
        </trans-unit>
        <trans-unit id="5780daf6db0b013dbf82807c9f85abba683b0820" translate="yes" xml:space="preserve">
          <source>about</source>
          <target state="translated">about</target>
        </trans-unit>
        <trans-unit id="8f203a021dc29f479a81bd2dd69f4ea2898f02f6" translate="yes" xml:space="preserve">
          <source>about all the dependencies, so you should make sure that anything is up-to-date, say, by doing</source>
          <target state="translated">を実行して、すべての依存関係が最新であることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="9fbb397449fabe7370de4e726a586750c0e025d4" translate="yes" xml:space="preserve">
          <source>above</source>
          <target state="translated">above</target>
        </trans-unit>
        <trans-unit id="3f8528380c147f9aa2206094f2404301d5bc3dbf" translate="yes" xml:space="preserve">
          <source>above is set up automatically during the build to a correct value on the builder machine, but is overridable at runtime,</source>
          <target state="translated">上記の値はビルド中に自動的にビルダマシン上で正しい値に設定されますが、実行時にはオーバーライド可能です。</target>
        </trans-unit>
        <trans-unit id="82451b41fd7878180b6aa2b54e369cbec4e8032c" translate="yes" xml:space="preserve">
          <source>abs</source>
          <target state="translated">abs</target>
        </trans-unit>
        <trans-unit id="a239a7dbad7ea85832efb23e90576b2dd038b7a1" translate="yes" xml:space="preserve">
          <source>abs VALUE</source>
          <target state="translated">アブス値</target>
        </trans-unit>
        <trans-unit id="415190d7a2135efc9f152a71915dffbe7a71529a" translate="yes" xml:space="preserve">
          <source>abs, alarm, chomp, chop, chr, chroot, cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc, lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf, quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only), rmdir, say, sin, split (for its second argument), sqrt, stat, study, uc, ucfirst, unlink, unpack.</source>
          <target state="translated">abs,alarm,chomp,chop,chr,chroot,cos,defined,eval,evalbytes,exp,fc,glob,hex,int,lc,lcfirst,length,log,lstat,mkdir,oct,ord,pos,print,printf,quotemeta.readlink,readpipe,ref,require,reverse (スカラコンテキストのみ),rmdir,say,sin,split (第二引数の場合),sqrt,stat,study,uc,ucfirst,unlink,unpack.</target>
        </trans-unit>
        <trans-unit id="5e8fc1f161ebdf02ac9d2d940aca4c69e7ddd903" translate="yes" xml:space="preserve">
          <source>abs_path and friends</source>
          <target state="translated">abs_path とその友人</target>
        </trans-unit>
        <trans-unit id="a4694021c8d1356f5760adc6ce253b54e2f437f0" translate="yes" xml:space="preserve">
          <source>absolute. This decision was made due to portability reasons. Since &lt;code&gt;File::Spec-&amp;gt;catdir()&lt;/code&gt; returns relative paths on all other operating systems, it will now also follow this convention on Mac OS. Note that this may break some existing scripts.</source>
          <target state="translated">絶対の。この決定は、移植性の理由により行われました。以来 &lt;code&gt;File::Spec-&amp;gt;catdir()&lt;/code&gt; 他のすべてのオペレーティング・システム上の相対パスを返し、それは今もMac OSで、この規則に従います。これにより、一部の既存のスクリプトが壊れる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="eb40247beed3ba10597c7fdb55272d4608c34191" translate="yes" xml:space="preserve">
          <source>absolute. This decision was made due to portability reasons. Since &lt;code&gt;File::Spec-&amp;gt;catfile()&lt;/code&gt; returns relative paths on all other operating systems, it will now also follow this convention on Mac OS. Note that this may break some existing scripts.</source>
          <target state="translated">絶対の。この決定は、移植性の理由により行われました。以来 &lt;code&gt;File::Spec-&amp;gt;catfile()&lt;/code&gt; 他のすべてのオペレーティング・システム上の相対パスを返し、それは今もMac OSで、この規則に従います。これにより、一部の既存のスクリプトが壊れる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="75eebe6521e20b7f9388d31918b564655eac99ce" translate="yes" xml:space="preserve">
          <source>absolutely cannot wait for the fix to be made upstream, released to CPAN and copied to blead, you must add (or update) a &lt;code&gt;CUSTOMIZED&lt;/code&gt; entry in the</source>
          <target state="translated">絶対に追加（または更新）しなければならない、CPANにリリースされ、bleadにコピーし、上流に作られる修正を待つことができない &lt;code&gt;CUSTOMIZED&lt;/code&gt; のエントリを</target>
        </trans-unit>
        <trans-unit id="7a532dc15a911b9b9181922abf6ced9885b401e9" translate="yes" xml:space="preserve">
          <source>accent-insensitive Unicode sort</source>
          <target state="translated">アクセント不感応ユニコードソート</target>
        </trans-unit>
        <trans-unit id="e586a9d31c9053af08de34074e1d2e2b09839079" translate="yes" xml:space="preserve">
          <source>accent-insensitive comparisons</source>
          <target state="translated">アクセントによらない比較</target>
        </trans-unit>
        <trans-unit id="fc8cc4afa9fee369f0ce78c3b97600f87cf033b7" translate="yes" xml:space="preserve">
          <source>accent-insensitive locale comparisons</source>
          <target state="translated">アクセント不感応ロケール比較</target>
        </trans-unit>
        <trans-unit id="5fb801f2f30ac5b8a6671f1d04a959a51fc1671e" translate="yes" xml:space="preserve">
          <source>accept</source>
          <target state="translated">accept</target>
        </trans-unit>
        <trans-unit id="ae12c11f3760218cae63851a278652cd3eaea3b8" translate="yes" xml:space="preserve">
          <source>accept NEWSOCKET,GENERICSOCKET</source>
          <target state="translated">NEWSOCKET、GENERICSOCKETを受け入れる</target>
        </trans-unit>
        <trans-unit id="5fc8d440432f0b7db9d7569d2e82bb54a31bbead" translate="yes" xml:space="preserve">
          <source>accept_targets_as_html</source>
          <target state="translated">accept_targets_as_html</target>
        </trans-unit>
        <trans-unit id="67dff9ee8056247422bb2cdd74c074036da47a0c" translate="yes" xml:space="preserve">
          <source>accessing</source>
          <target state="translated">accessing</target>
        </trans-unit>
        <trans-unit id="de3a63299e5e19ed22af733ce3c9c55e72ad3106" translate="yes" xml:space="preserve">
          <source>accessor function for the &quot;safe signals&quot; flag of a SigAction object; see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for general information on safe (a.k.a. &quot;deferred&quot;) signals. If you wish to handle a signal safely, use this accessor to set the &quot;safe&quot; flag in the &lt;code&gt;POSIX::SigAction&lt;/code&gt; object:</source>
          <target state="translated">SigActionオブジェクトの「安全な信号」フラグのアクセサ関数。安全な（別名「据え置き」）シグナルの一般情報については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。シグナルを安全に処理したい場合は、このアクセサーを使用して、 &lt;code&gt;POSIX::SigAction&lt;/code&gt; オブジェクトに「safe」フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="130627c716765ea3404bece5800d80aa45677b23" translate="yes" xml:space="preserve">
          <source>accessor functions to get/set the values of a SigAction object.</source>
          <target state="translated">SigAction オブジェクトの値を取得/設定するためのアクセサ関数です。</target>
        </trans-unit>
        <trans-unit id="b7f71f41bfbef50f02bf886cf865af8975cb5786" translate="yes" xml:space="preserve">
          <source>accidentally</source>
          <target state="translated">accidentally</target>
        </trans-unit>
        <trans-unit id="3959b939e5424783c493f42cf465f2662e1abbe0" translate="yes" xml:space="preserve">
          <source>acosec</source>
          <target state="translated">acosec</target>
        </trans-unit>
        <trans-unit id="94cd96ac8391252b0d7300cdaef80570e8f1939f" translate="yes" xml:space="preserve">
          <source>acosech</source>
          <target state="translated">acosech</target>
        </trans-unit>
        <trans-unit id="c8be89c327cde8b860df98308b35887bdf811326" translate="yes" xml:space="preserve">
          <source>acot</source>
          <target state="translated">acot</target>
        </trans-unit>
        <trans-unit id="b5aa292058ce240d98a24e0ca78c79be934f0018" translate="yes" xml:space="preserve">
          <source>acotan</source>
          <target state="translated">acotan</target>
        </trans-unit>
        <trans-unit id="299176f2fa0007084d06d47b1d722326f90b487a" translate="yes" xml:space="preserve">
          <source>acotanh</source>
          <target state="translated">acotanh</target>
        </trans-unit>
        <trans-unit id="eef264f7031ee0d55b786c83a83d07ec29a99714" translate="yes" xml:space="preserve">
          <source>acsc</source>
          <target state="translated">acsc</target>
        </trans-unit>
        <trans-unit id="742151db90a3d5f8f47cde2a0573ae956bba7225" translate="yes" xml:space="preserve">
          <source>action&quot; or &quot;manu-</source>
          <target state="translated">アクション」または「マニュ</target>
        </trans-unit>
        <trans-unit id="2bb6b986c5d6fb26dd9dd1054b545ce022371b0c" translate="yes" xml:space="preserve">
          <source>active</source>
          <target state="translated">active</target>
        </trans-unit>
        <trans-unit id="50f46198a1bd51840547aee34fc045921e43d4c6" translate="yes" xml:space="preserve">
          <source>actual</source>
          <target state="translated">actual</target>
        </trans-unit>
        <trans-unit id="5e9b6a0946d93d3600096c34f7b9c6d8f4af95ac" translate="yes" xml:space="preserve">
          <source>actually made it back to</source>
          <target state="translated">に戻ってきました</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="1d1b3b51172716d0cb050801b8fab16ebc7d7185" translate="yes" xml:space="preserve">
          <source>add_bits</source>
          <target state="translated">add_bits</target>
        </trans-unit>
        <trans-unit id="8bab9844d8f1c6dd4567678a3d4228ce8b501259" translate="yes" xml:space="preserve">
          <source>add_bits($data, $nbits)</source>
          <target state="translated">add_bits($data,$nbits)</target>
        </trans-unit>
        <trans-unit id="93ac08fbb73a3cad19b1e009a5e2b9a0a78a5e4b" translate="yes" xml:space="preserve">
          <source>add_bits()</source>
          <target state="translated">add_bits()</target>
        </trans-unit>
        <trans-unit id="64dea38af51fbf2c8ff3ee6ea4af6ed53003ace2" translate="yes" xml:space="preserve">
          <source>add_callback ()</source>
          <target state="translated">追加コールバック</target>
        </trans-unit>
        <trans-unit id="94d0e78aca0adb443be5d146e1dac8975ed16903" translate="yes" xml:space="preserve">
          <source>add_style ()</source>
          <target state="translated">追加スタイル</target>
        </trans-unit>
        <trans-unit id="c3805175370d19c334b59f45b87343b9f2b7f5e1" translate="yes" xml:space="preserve">
          <source>addition</source>
          <target state="translated">addition</target>
        </trans-unit>
        <trans-unit id="c662180230cad14787d4ab7e77aa08681ce783fa" translate="yes" xml:space="preserve">
          <source>address</source>
          <target state="translated">address</target>
        </trans-unit>
        <trans-unit id="91ea4e7b6b94343d715c7982210567115655cb20" translate="yes" xml:space="preserve">
          <source>adds a new name for a control character.</source>
          <target state="translated">制御文字に新しい名前を追加します。</target>
        </trans-unit>
        <trans-unit id="9c677b000cbca8edd8a283feb5874aa9705fe891" translate="yes" xml:space="preserve">
          <source>adds it automatically when building a program. However, when accessing an executable as a normal file (e.g.,</source>
          <target state="translated">はプログラムを構築する際に自動的に追加します。しかし、通常のファイルとして実行ファイルにアクセスする場合(例えば</target>
        </trans-unit>
        <trans-unit id="095c0c5ecd4727ed55c8b2fdc7688091189d0cae" translate="yes" xml:space="preserve">
          <source>adds the line to the history of input, from where it can be used if the actual &lt;code&gt;&lt;a href=&quot;../functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; is present.</source>
          <target state="translated">入力の履歴に行を追加します。実際の &lt;code&gt;&lt;a href=&quot;../functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; が存在する場合はそこから使用できます。</target>
        </trans-unit>
        <trans-unit id="b0b7161ec6ad88575ef86bb08f43a11d9469dba1" translate="yes" xml:space="preserve">
          <source>adecimal.</source>
          <target state="translated">adecimal.</target>
        </trans-unit>
        <trans-unit id="b144ec6dfdab55ae2963bf4c782c7e4157019ffd" translate="yes" xml:space="preserve">
          <source>adminaddress</source>
          <target state="translated">adminaddress</target>
        </trans-unit>
        <trans-unit id="916a530bfc75fe948657d7b5108d40fc2508c596" translate="yes" xml:space="preserve">
          <source>advised to follow this introduction with more information from the full Perl manual, the table of contents to which can be found in &lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;perltoc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;perltoc&lt;/a&gt;にある目次の一覧である完全なPerlマニュアルからの詳細情報で、この紹介に従うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="aab93e8e3796f91139b951be5ef4c63e4b3fdff0" translate="yes" xml:space="preserve">
          <source>affect normal access to a variable. (Locks on subs are different, and covered in a bit.) If you really,</source>
          <target state="translated">は、変数への通常のアクセスに影響を与えます。(サブシステム上のロックは異なり、少しだけカバーされています。)本当にあなたがするならば。</target>
        </trans-unit>
        <trans-unit id="d16b511453d6e723e850460d0b087be14fb56fb1" translate="yes" xml:space="preserve">
          <source>afs.U</source>
          <target state="translated">afs.U</target>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="translated">after</target>
        </trans-unit>
        <trans-unit id="1a8a978377842aa511fbb5bb66f929228650a830" translate="yes" xml:space="preserve">
          <source>after a &lt;b&gt;failure&lt;/b&gt;:</source>
          <target state="translated">&lt;b&gt;失敗&lt;/b&gt;後：</target>
        </trans-unit>
        <trans-unit id="2391217343165dbdcc1e85432eaed6f2d40232f2" translate="yes" xml:space="preserve">
          <source>after the first line of wrap(). This is not a most effective implementation, one may consider</source>
          <target state="translated">を wrap()の最初の行の後に追加します。これは最も効果的な実装ではありません。</target>
        </trans-unit>
        <trans-unit id="d501db092c38ad8292690be746bddff30bdd42c1" translate="yes" xml:space="preserve">
          <source>after which you may use either</source>
          <target state="translated">その後、次のいずれかを使用することができます。</target>
        </trans-unit>
        <trans-unit id="d237158794ce68f8acfcb27dbb3524b7d367bc44" translate="yes" xml:space="preserve">
          <source>after you made your modifications.</source>
          <target state="translated">修正した後に</target>
        </trans-unit>
        <trans-unit id="0de616ced95f0b022d2889588dcde62712d64ff3" translate="yes" xml:space="preserve">
          <source>again, and run</source>
          <target state="translated">再度、走って</target>
        </trans-unit>
        <trans-unit id="80ece22ca1db999b834ed949964a66789d2cf76d" translate="yes" xml:space="preserve">
          <source>against the previous and current perls to see what difference it has made, and whether anything else has slowed down as a consequence.</source>
          <target state="translated">を以前の Perl と現在の Perl とで比較して、どのような違いがあったのか、またその結果として他の何かが遅くなったのかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f1525d2f1de4ff409ccb719b4f0bd276a7bb7c21" translate="yes" xml:space="preserve">
          <source>agree on the type of reference and also on the organization of data within the object body. Failure to agree on the type results in immediate death when the wrong method tries to access an object. Failure to agree on data organization may lead to one class trampling over the data of another.</source>
          <target state="translated">は、参照の型とオブジェクト本体内のデータの構成に同意しなければなりません。型についての合意に失敗すると、間違ったメソッドがオブジェクトにアクセスしようとしたときに即死してしまいます。データの構成に同意しないと、あるクラスが別のクラスのデータを踏みにじることになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="73468898c9988e2f9e409b93e8bff16eaa79c0ba" translate="yes" xml:space="preserve">
          <source>alarm</source>
          <target state="translated">alarm</target>
        </trans-unit>
        <trans-unit id="05d57bf3c2063c1b5c9e035ba1e89e203c424841" translate="yes" xml:space="preserve">
          <source>alarm SECONDS</source>
          <target state="translated">アラーム秒</target>
        </trans-unit>
        <trans-unit id="605bec3b3bc4303313aa3e75ef5affbb28a79c75" translate="yes" xml:space="preserve">
          <source>albeit with substitutions such as &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/LATIN//&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/VULGAR//&lt;/a&gt;&lt;/code&gt; in all cases; &lt;code&gt;s/CAPITAL LETTER//&lt;/code&gt; in some cases; and &lt;code&gt;s/SMALL LETTER ([A-Z])/\l$1/&lt;/code&gt; in some other cases. Controls are listed using their Unicode 6.2 abbreviations. The differences between the 0037 and 1047 sets are flagged with &lt;code&gt;**&lt;/code&gt; . The differences between the 1047 and POSIX-BC sets are flagged with &lt;code&gt;##.&lt;/code&gt; All &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; numbers listed are decimal. If you would rather see this table listing octal values, then run the table (that is, the pod source text of this document, since this recipe may not work with a pod2_other_format translation) through:</source>
          <target state="translated">すべてのケースで &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/LATIN//&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s/VULGAR//&lt;/a&gt;&lt;/code&gt; などの置換を使用しますが、 &lt;code&gt;s/CAPITAL LETTER//&lt;/code&gt; 場合によっては;そして &lt;code&gt;s/SMALL LETTER ([A-Z])/\l$1/&lt;/code&gt; いくつかの他の場合です。コントロールは、Unicode 6.2の略語を使用してリストされています。セット0037と1047の違いには &lt;code&gt;**&lt;/code&gt; のフラグが付けられます。 1047セットとPOSIX-BCセットの違いには、 &lt;code&gt;##.&lt;/code&gt; フラグが付けられています。すべての &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord()&lt;/a&gt;&lt;/code&gt; 記載されている数字は小数点です。この表に8進数の値が表示されているのを確認したい場合は、次のように表を実行します（つまり、このレシピはpod2_other_format変換では機能しないため、このドキュメントのpodソーステキスト）。</target>
        </trans-unit>
        <trans-unit id="3b21e0f54dca09308ec896c51cda4f9ca4dd91a4" translate="yes" xml:space="preserve">
          <source>aliases</source>
          <target state="translated">aliases</target>
        </trans-unit>
        <trans-unit id="3d30739d4c2f9e4b4a11180a7c3327f3e52fd8d3" translate="yes" xml:space="preserve">
          <source>alignbytes.U</source>
          <target state="translated">alignbytes.U</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="509fd71434fbe53c02bb286882f845078ef5ee17" translate="yes" xml:space="preserve">
          <source>all compressed data to the output data stream.</source>
          <target state="translated">すべての圧縮されたデータを出力データストリームに出力します。</target>
        </trans-unit>
        <trans-unit id="8130249f3817c584cba8ad27e67056edd1c31fac" translate="yes" xml:space="preserve">
          <source>all its ancestor classes. (This is because the idea of &quot;class data&quot; isn't directly implemented in Perl, but is instead left to individual class-systems to implement as they see fit..)</source>
          <target state="translated">クラスデータは、その祖先のすべてのクラスのデータを含んでいます。(これは、&quot;クラスデータ &quot;という概念がPerlでは直接実装されていないためで、その代わりに個々のクラスシステムに任されています。)</target>
        </trans-unit>
        <trans-unit id="8cc5040f7ad90d3df578f4dce7d48b395ac1b9d9" translate="yes" xml:space="preserve">
          <source>all of the help</source>
          <target state="translated">ばんのう</target>
        </trans-unit>
        <trans-unit id="7d7ebf534a4b32567ce1f6b72446d3e09f27b240" translate="yes" xml:space="preserve">
          <source>all other versions of the module you're installing</source>
          <target state="translated">インストールしているモジュールの他のすべてのバージョンの</target>
        </trans-unit>
        <trans-unit id="de05e27afdc59b4d9bbeeae86d35f670cdbf6280" translate="yes" xml:space="preserve">
          <source>all remaining lines from is this way:</source>
          <target state="translated">からの残りの行はすべてこのようになります。</target>
        </trans-unit>
        <trans-unit id="f966b162e6dd45e46a9c1021ad48d8c4e414675d" translate="yes" xml:space="preserve">
          <source>all the subroutines are called in a list context.</source>
          <target state="translated">すべてのサブルーチンはリストコンテキストで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="78d2c8306e2172f468ed7da94e5e7fdd772dd33e" translate="yes" xml:space="preserve">
          <source>all uncompressed data to the output data stream.</source>
          <target state="translated">すべての非圧縮データを出力データストリームに出力します。</target>
        </trans-unit>
        <trans-unit id="e6543caf79edcee1b041e9193f69e17c853ef1f4" translate="yes" xml:space="preserve">
          <source>all with optional leading and trailing zeros and/or spaces. Additionally, numbers are allowed to have an underscore between any two digits.</source>
          <target state="translated">すべての数字は、オプションで先頭と末尾のゼロおよび/またはスペースを使用します。さらに、数字は任意の2桁の間にアンダースコアを入れることができます。</target>
        </trans-unit>
        <trans-unit id="acff2f4d1898df7e94ecaebad18831a97e4519ff" translate="yes" xml:space="preserve">
          <source>all_target</source>
          <target state="translated">all_target</target>
        </trans-unit>
        <trans-unit id="12b42e096b7bca3af7ec1c5ba1a6445e520a72d8" translate="yes" xml:space="preserve">
          <source>allkeys.txt</source>
          <target state="translated">allkeys.txt</target>
        </trans-unit>
        <trans-unit id="78c9d45e7d52c660866b311227728fee1dfd5e6c" translate="yes" xml:space="preserve">
          <source>allocates some memory and constructs a Perl interpreter, along these lines:</source>
          <target state="translated">はいくつかのメモリを確保し、これらの行に沿って Perl インタプリタを構築します。</target>
        </trans-unit>
        <trans-unit id="4ac387a6f0f3e93209827552db5ced03710025ff" translate="yes" xml:space="preserve">
          <source>allow suppressing all such STDERR output, and instead allow an option for reporting errors/warnings in some other way, whether by triggering a callback, or noting errors in some attribute of the document object, or some similarly unobtrusive mechanism -- or even by appending a &quot;Pod Errors&quot; section to the end of the parsed form of the document.</source>
          <target state="translated">このようなSTDERRの出力をすべて抑制し、その代わりに、コールバックをトリガーしたり、ドキュメントオブジェクトの属性のエラーを表示したり、あるいは目立たないような仕組みでエラーや警告を報告するオプションを許可するか、あるいは、解析されたドキュメントの最後に &quot;Pod Errors &quot;セクションを追加することを許可します。</target>
        </trans-unit>
        <trans-unit id="eb4eaf28d97cf6eeb14d04f7a34316c390474dbc" translate="yes" xml:space="preserve">
          <source>allow( $test_me, \@criteria );</source>
          <target state="translated">allow($test_me,@criteria ).</target>
        </trans-unit>
        <trans-unit id="023f8167a0ccb01c809eb2dc9a66997533fa1ae8" translate="yes" xml:space="preserve">
          <source>allowed if $pat is a precompiled regular expression, even if $pat contains &lt;code&gt;(?{ ... })&lt;/code&gt; assertions or &lt;code&gt;(??{ ... })&lt;/code&gt; subexpressions.</source>
          <target state="translated">$ patが &lt;code&gt;(?{ ... })&lt;/code&gt; アサーションまたは &lt;code&gt;(??{ ... })&lt;/code&gt; サブ表現を含む場合でも、$ patがプリコンパイルされた正規表現である場合に許可されます。</target>
        </trans-unit>
        <trans-unit id="4301b689bb097155e3bb6d16044296e9269b5529" translate="yes" xml:space="preserve">
          <source>allows Perl to do unsafe operations. Currently the only &quot;unsafe&quot; operations are attempting to unlink directories while running as superuser and running setuid programs with fatal taint checks turned into warnings. Note that warnings must be enabled along with this option to actually</source>
          <target state="translated">は Perl が安全でない操作を行うことを可能にします。現在のところ、「安全でない」操作は、スーパーユーザとして実行中にディレクトリのリンクを解除しようとすることと、致命的な汚染チェックを警告に変えた setuid プログラムを実行することだけです。実際には、警告を有効にするには、このオプションを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="132c35f7c02912ac7c614dd2a393fc9375c90687" translate="yes" xml:space="preserve">
          <source>allows the &lt;code&gt;:default&lt;/code&gt; list from a particular version to be used. This provides the convenience of using the default methods, but the surety that no behavioral changes will occur if the &lt;code&gt;autodie&lt;/code&gt; module is upgraded.</source>
          <target state="translated">特定のバージョンの &lt;code&gt;:default&lt;/code&gt; リストを使用できるようにします。これにより、デフォルトの方法を使用するのに便利ですが、 &lt;code&gt;autodie&lt;/code&gt; モジュールがアップグレードされた場合に動作の変更が発生しないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="423d437bbbc6bb7d398c30b28e10d75c03e10783" translate="yes" xml:space="preserve">
          <source>allows you to refer to special variables (like &lt;code&gt;$/&lt;/code&gt; ) with names (like $RS), as though they were in &lt;b&gt;awk&lt;/b&gt;; see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details.</source>
          <target state="translated">それらが&lt;b&gt;awkにある&lt;/b&gt;かのように、名前（$ RSなど）で特殊変数（ &lt;code&gt;$/&lt;/code&gt; ）を参照できます。詳細は&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f9e2ef61def87209ec2dd5c8efef68de53d4aef6" translate="yes" xml:space="preserve">
          <source>almost</source>
          <target state="translated">almost</target>
        </trans-unit>
        <trans-unit id="f5f5592352120c7c5dd3e80cd891b2a35cc0756a" translate="yes" xml:space="preserve">
          <source>along with #including</source>
          <target state="translated">と一緒に</target>
        </trans-unit>
        <trans-unit id="f84474a16e6ac5b152e8cf62a4c115b6109f018b" translate="yes" xml:space="preserve">
          <source>alphabetic</source>
          <target state="translated">alphabetic</target>
        </trans-unit>
        <trans-unit id="b859ef3e26b0a8f0f8e5984aa4d45230ec4e08bc" translate="yes" xml:space="preserve">
          <source>already exist</source>
          <target state="translated">存する</target>
        </trans-unit>
        <trans-unit id="34879e54886ec3a6f952c7af1d444870828e03e7" translate="yes" xml:space="preserve">
          <source>already-existing</source>
          <target state="translated">already-existing</target>
        </trans-unit>
        <trans-unit id="09706c418809f1f4cfda992435ca1438eddaaeed" translate="yes" xml:space="preserve">
          <source>also</source>
          <target state="translated">also</target>
        </trans-unit>
        <trans-unit id="53ed2e1b9d4ccdc537294ab308f9c5d1e151cf60" translate="yes" xml:space="preserve">
          <source>also creates the prototyping header files for the internal functions, generates the documentation and a lot of other bits and pieces. It's important that when you add a new function to the core or change an existing one, you change the data in the table in</source>
          <target state="translated">また、内部関数のプロトタイピングヘッダファイルを作成し、ドキュメントを作成し、他の多くの断片を作成します。コアに新しい関数を追加したり、既存の関数を変更したりするときには</target>
        </trans-unit>
        <trans-unit id="4298c06d3073002d95a1081fb801b4a99c5de328" translate="yes" xml:space="preserve">
          <source>also exists). Cygwin does not require a</source>
          <target state="translated">も存在します)。Cygwinは</target>
        </trans-unit>
        <trans-unit id="2ce647c4199231c5e08b22c4a1f2a2b4b84f2e7b" translate="yes" xml:space="preserve">
          <source>also includes the platform's native underscore character, no matter what the locale is.</source>
          <target state="translated">また、ロケールに関係なく、プラットフォームのネイティブのアンダースコア文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="17b130cdba41303da201c9df43f19e9e6a5a45ad" translate="yes" xml:space="preserve">
          <source>also provides a number of &lt;code&gt;PerlIOBase_xxxx()&lt;/code&gt; functions which are intended to be used in the table slots of classes which do not need to do anything special for a particular method.</source>
          <target state="translated">また、特定のメソッドに対して特別なことを行う必要のないクラスのテーブルスロットで使用することを目的とした多数の &lt;code&gt;PerlIOBase_xxxx()&lt;/code&gt; 関数も提供します。</target>
        </trans-unit>
        <trans-unit id="edb013a0b027689799b6d3bb946b0380fa2999b8" translate="yes" xml:space="preserve">
          <source>alter the interpretation of nested formatting codes, meaning that the following four example lines are identical in meaning:</source>
          <target state="translated">は、ネストされた書式設定コードの解釈を変更し、以下の4つの例の行が同じ意味を持つことを意味します。</target>
        </trans-unit>
        <trans-unit id="370d1bb1966aad5766de7d85dcf3b3cc7341ab95" translate="yes" xml:space="preserve">
          <source>alternation</source>
          <target state="translated">alternation</target>
        </trans-unit>
        <trans-unit id="c78b3591272b10760192271aec607cc2988dcb68" translate="yes" xml:space="preserve">
          <source>although without duplicating any side effects that dereferencing the lvalue might trigger, such as from &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie()&lt;/a&gt;&lt;/code&gt;. Other assignment operators work similarly. The following are recognized:</source>
          <target state="translated">ただし、 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie()&lt;/a&gt;&lt;/code&gt; のように、左辺値を逆参照するとトリガーされる可能性のある副作用を複製しない場合。他の代入演算子も同様に機能します。以下が認識されます：</target>
        </trans-unit>
        <trans-unit id="6656018ac96d0295d887ff2893ba9af66ae16af2" translate="yes" xml:space="preserve">
          <source>always</source>
          <target state="translated">always</target>
        </trans-unit>
        <trans-unit id="fb980e8b0c064246b90fe9981d818b33511ba028" translate="yes" xml:space="preserve">
          <source>always be called &lt;code&gt;my_cxt_t&lt;/code&gt; . The other &lt;code&gt;CXT*&lt;/code&gt; macros assume the existence of the &lt;code&gt;my_cxt_t&lt;/code&gt; typedef name.</source>
          <target state="translated">常に &lt;code&gt;my_cxt_t&lt;/code&gt; と呼ばれます。他の &lt;code&gt;CXT*&lt;/code&gt; マクロは、 &lt;code&gt;my_cxt_t&lt;/code&gt; typedef名の存在を前提としています。</target>
        </trans-unit>
        <trans-unit id="9e7cc664880363e8a6f8dd216803f53660c055a7" translate="yes" xml:space="preserve">
          <source>ambient_pragmas</source>
          <target state="translated">ambient_pragmas</target>
        </trans-unit>
        <trans-unit id="75a14d5aecfa0926099831db837cd6a62fe95561" translate="yes" xml:space="preserve">
          <source>amed character.</source>
          <target state="translated">amedのキャラクター。</target>
        </trans-unit>
        <trans-unit id="de73eac0c305038f0437bc6a1f994a5a4379ed28" translate="yes" xml:space="preserve">
          <source>an</source>
          <target state="translated">an</target>
        </trans-unit>
        <trans-unit id="8f91a7d4c013d689792014cce41cfca93df8643f" translate="yes" xml:space="preserve">
          <source>an arrayref of CPAN::Distroprefs::Pref objects</source>
          <target state="translated">CPAN::Distroprefs::Pref オブジェクトの配列ref</target>
        </trans-unit>
        <trans-unit id="1fd4e0318cb46a3d9d16dba83e533928a4e2874e" translate="yes" xml:space="preserve">
          <source>an embedded newline, so it doesn't remove it. This pattern still removes the newline at the end of the string:</source>
          <target state="translated">には改行が埋め込まれているので、改行は削除されません。このパターンでは、文字列の最後にある改行は削除されます。</target>
        </trans-unit>
        <trans-unit id="419fb031bbb1d3bd852934c637cbdadfffbdbcd6" translate="yes" xml:space="preserve">
          <source>an entire array or an entire hash (or to just about anything else). Names are one kind of reference that you're already familiar with. Think of the President of the United States: a messy, inconvenient bag of blood and bones. But to talk about him, or to represent him in a computer program, all you need is the easy, convenient scalar string &quot;Barack Obama&quot;.</source>
          <target state="translated">配列全体、あるいはハッシュ全体 (あるいは他の何にでも)を参照することができます。名前は、あなたがすでによく知っている参照の一種です。アメリカ合衆国大統領のことを考えてみてください:血と骨が混ざった厄介で不便な袋です。しかし、彼について話したり、コンピュータプログラムで彼を表現したりするために必要なのは、簡単で便利なスカラー文字列「バラク・オバマ」だけです。</target>
        </trans-unit>
        <trans-unit id="2130df2147e633640bd9a0d05e6d376dee6ccd2f" translate="yes" xml:space="preserve">
          <source>an error has occurred, the return value will always be 0.</source>
          <target state="translated">エラーが発生した場合、戻り値は常に0になります。</target>
        </trans-unit>
        <trans-unit id="753f0741a207012aea84c4e049df342c160b9190" translate="yes" xml:space="preserve">
          <source>an error has occurred, the return value will be 1 and the value on the top of the stack will be</source>
          <target state="translated">エラーが発生した場合、戻り値は 1 になり、スタックの先頭にある値は</target>
        </trans-unit>
        <trans-unit id="409ef8643f1d521a89ca1a0c3155c4a711f5a647" translate="yes" xml:space="preserve">
          <source>an error to register the same object multiple times with varying sets of hashrefs. Any hashrefs that are not registered yet will be added, others ignored.</source>
          <target state="translated">同じオブジェクトをハッシュレットのセットを変えて複数回登録するとエラーになります。まだ登録されていないハッシュレットは追加され、他のハッシュレットは無視されます。</target>
        </trans-unit>
        <trans-unit id="f7cb42641753796859e397b207b75ba5bcc045ca" translate="yes" xml:space="preserve">
          <source>an integer within [-9, +9]), this is called</source>
          <target state="translated">9,+9]内の整数)、これは</target>
        </trans-unit>
        <trans-unit id="f06df609aed50661247cc6ec96c1599c193c3ec4" translate="yes" xml:space="preserve">
          <source>anchor</source>
          <target state="translated">anchor</target>
        </trans-unit>
        <trans-unit id="04f99c29e783f9cb4ae84f58faccd00a818b9492" translate="yes" xml:space="preserve">
          <source>anchor_items</source>
          <target state="translated">anchor_items</target>
        </trans-unit>
        <trans-unit id="68694b44e6f48917189ec5e4ceb1c0fef7ef80b9" translate="yes" xml:space="preserve">
          <source>anchored fixed string</source>
          <target state="translated">錨付き固定紐</target>
        </trans-unit>
        <trans-unit id="43c00fd1688ea15081e7af4c5f2652c8c8653500" translate="yes" xml:space="preserve">
          <source>anchorify</source>
          <target state="translated">anchorify</target>
        </trans-unit>
        <trans-unit id="f3ef6e09da1f05d18d52776cc5fea65e3b316091" translate="yes" xml:space="preserve">
          <source>anchorname</source>
          <target state="translated">anchorname</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="41f7d9aafc306017d119acf70705c827d97696a7" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.)</source>
          <target state="translated">および&lt;a href=&quot;encode&quot;&gt;エンコードします&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="1e7b3b70ce0b7269aa85ddea66ae89e1b660b6b7" translate="yes" xml:space="preserve">
          <source>and &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;, or &lt;a href=&quot;perlfaq5&quot;&gt;perlfaq5&lt;/a&gt;, &quot;How do I flush/unbuffer an output filehandle? Why must I do this?&quot;):</source>
          <target state="translated">そして、&lt;a href=&quot;functions/select&quot;&gt;選択し&lt;/a&gt;、または&lt;a href=&quot;perlfaq5&quot;&gt;perlfaq5&lt;/a&gt;）、「どうすれば、出力ファイルハンドルバッファー解除フラッシュ/なぜ私はこれを行う必要がありますか？」：</target>
        </trans-unit>
        <trans-unit id="016f4b3a6b408b7434c9c8addd29fcfb251b75bc" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;$default&lt;/code&gt; is 0.</source>
          <target state="translated">そして &lt;code&gt;$default&lt;/code&gt; 0です。</target>
        </trans-unit>
        <trans-unit id="79e3a95c66eb0995a5b17cf160488513cd9c4836" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;$status&lt;/code&gt; will contain the</source>
          <target state="translated">そして &lt;code&gt;$status&lt;/code&gt; 含まれています</target>
        </trans-unit>
        <trans-unit id="fb55aba7e200d190a26516edaeb1e8c8f871d671" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;$status&lt;/code&gt; will hold the</source>
          <target state="translated">そして &lt;code&gt;$status&lt;/code&gt; 保持されます</target>
        </trans-unit>
        <trans-unit id="f7a05a7c74e5456a922f33cfd811202c94bfd7a6" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;$status&lt;/code&gt; will hold the a</source>
          <target state="translated">そして &lt;code&gt;$status&lt;/code&gt; Aを開催します</target>
        </trans-unit>
        <trans-unit id="faf11d208a41db985f49c9f628222cbd33a1d444" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;$status&lt;/code&gt; will hold the exact</source>
          <target state="translated">そして、 &lt;code&gt;$status&lt;/code&gt; 正確を開催します</target>
        </trans-unit>
        <trans-unit id="311c8c621fca6c1133276b3546a71e41872cd5b3" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; myint;&lt;/code&gt; is</source>
          <target state="translated">そして &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; myint;&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="fe56ad1fd6916544bd67d364c47ef22b8722997c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;Archive::Tar&lt;/code&gt; will call &lt;code&gt;Cwd::cwd()&lt;/code&gt; internally again.</source>
          <target state="translated">そして &lt;code&gt;Archive::Tar&lt;/code&gt; は再び内部的に &lt;code&gt;Cwd::cwd()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="aeba6e0c46a5c93c432546b879e4bda2afa3e55c" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;Perl_dump_all&lt;/code&gt; , which dumps all the subroutines in the stash and the op tree of the main root.</source>
          <target state="translated">また、 &lt;code&gt;Perl_dump_all&lt;/code&gt; は、スタッシュ内のすべてのサブルーチンとメインルートのopツリーをダンプします。</target>
        </trans-unit>
        <trans-unit id="24b1d9fb54b19f2a4bf7a0a575b93e2448d41ac7" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;asynch_read_if&lt;/code&gt; could look like this</source>
          <target state="translated">そして &lt;code&gt;asynch_read_if&lt;/code&gt; はこのようになります</target>
        </trans-unit>
        <trans-unit id="52260a6c12657e7cd53ed4aeda42476a80ffde69" translate="yes" xml:space="preserve">
          <source>and C</source>
          <target state="translated">とC</target>
        </trans-unit>
        <trans-unit id="ce624d2a956a4c4fdd87bb0d4c8b8565acc10eb6" translate="yes" xml:space="preserve">
          <source>and CRT DLL. I know no advantages of this executable over &lt;code&gt;perl.exe&lt;/code&gt; , but it cannot fork() at all. Well, one advantage is that the build process is not so convoluted as with &lt;code&gt;perl.exe&lt;/code&gt; .</source>
          <target state="translated">およびCRT DLL。この実行可能ファイルが &lt;code&gt;perl.exe&lt;/code&gt; より優れていることはわかりませんが、fork（）はまったくできません。1つの利点は、ビルドプロセスが &lt;code&gt;perl.exe&lt;/code&gt; ほど複雑ではないことです。</target>
        </trans-unit>
        <trans-unit id="d2f78e98c292b6edbfc33a84d6b47bc8f258f6d2" translate="yes" xml:space="preserve">
          <source>and Configure will give up.</source>
          <target state="translated">とConfigureは諦めます。</target>
        </trans-unit>
        <trans-unit id="e6601ba493fd802e8c69e73fa3178575540d2f6c" translate="yes" xml:space="preserve">
          <source>and Mark Adler</source>
          <target state="translated">とマーク・アドラー</target>
        </trans-unit>
        <trans-unit id="86d575fb0f5c883349b5a7f286abb3edbe3207c7" translate="yes" xml:space="preserve">
          <source>and Perl knows that it has to invoke the PerlIOAPR_open() method implemented by the APR layer.</source>
          <target state="translated">そして、Perl は、APR 層によって実装された PerlIOAPR_open()メソッドを呼び出さなければならないことを知っています。</target>
        </trans-unit>
        <trans-unit id="e32c9b9186aa8e9288a2accdf939a5bb0683c0cb" translate="yes" xml:space="preserve">
          <source>and UNIX, &lt;code&gt;$gzerrno&lt;/code&gt; should only be used to check for the presence of</source>
          <target state="translated">UNIXの場合、 &lt;code&gt;$gzerrno&lt;/code&gt; は存在の確認にのみ使用してください</target>
        </trans-unit>
        <trans-unit id="dce6c6da0aef880545eedbf05f807b0628611184" translate="yes" xml:space="preserve">
          <source>and UTF-16 is the name of the encoding that embraces them.</source>
          <target state="translated">とUTF-16はそれらを包含するエンコーディングの名前です。</target>
        </trans-unit>
        <trans-unit id="c3a319360d3cdf3729627355f1ee1dd75a51847e" translate="yes" xml:space="preserve">
          <source>and ad hoc &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; $test ? &quot;ok 42\n&quot; : &quot;not ok 42\n&quot;&lt;/code&gt; . The decision of which to use depends on what part of the test suite you're working on. This is a measure to prevent a high-level failure (such as Config.pm breaking) from causing basic functionality tests to fail.</source>
          <target state="translated">そして臨時の &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; $test ? &quot;ok 42\n&quot; : &quot;not ok 42\n&quot;&lt;/code&gt; 。どちらを使用するかは、テストスイートのどの部分に取り組んでいるかによって異なります。これは、高レベルの障害（Config.pmの破損など）によって基本的な機能テストが失敗するのを防ぐための対策です。</target>
        </trans-unit>
        <trans-unit id="1759eff6deec8639c809421ad0c28a76e0ef5cae" translate="yes" xml:space="preserve">
          <source>and also $Config::Config{'scriptdir'}</source>
          <target state="translated">また、$Config::Config{'scriptdir'}も同様です。</target>
        </trans-unit>
        <trans-unit id="092a598de52599e5ea26b086e728adfcb8a8f87b" translate="yes" xml:space="preserve">
          <source>and also how strings are parsed by &lt;code&gt;POSIX::strtod()&lt;/code&gt; as numbers:</source>
          <target state="translated">また、文字列が &lt;code&gt;POSIX::strtod()&lt;/code&gt; によって数値として解析される方法：</target>
        </trans-unit>
        <trans-unit id="53d3cfa28bbb90ed936aa07f73ce71dbef9ab3f7" translate="yes" xml:space="preserve">
          <source>and are now removed.</source>
          <target state="translated">と削除されました。</target>
        </trans-unit>
        <trans-unit id="d7e49eb1b589da099384cdd5bcb2b002b2679a4a" translate="yes" xml:space="preserve">
          <source>and as</source>
          <target state="translated">として</target>
        </trans-unit>
        <trans-unit id="f930cc83716047f99549b196c0f6ea5f5c50196e" translate="yes" xml:space="preserve">
          <source>and auxiliary ones</source>
          <target state="translated">と補助的なもの</target>
        </trans-unit>
        <trans-unit id="0e8dd9b894bf299a78c91001723d0325159a6a91" translate="yes" xml:space="preserve">
          <source>and basic block profiling with gcc, see the latest GNU CC manual. As of gcc 4.8, this is at &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Intro&quot;&gt;http://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Intro&lt;/a&gt;</source>
          <target state="translated">gccを使用した基本的なブロックプロファイリングについては、最新のGNU CCマニュアルを参照してください。gcc 4.8以降、これは&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Intro&quot;&gt;http://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Introにあります。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67ac2d9e2193d40fc9c92b85950de3190240ebb3" translate="yes" xml:space="preserve">
          <source>and be sure to also set the environment variable _C89_CCMODE=1 (exporting _C89_CCMODE=1 is also a good idea for users of GNU make).</source>
          <target state="translated">また、環境変数_C89_CCMODE=1も必ず設定するようにしてください(GNU makeのユーザーにとっては、_C89_CCMODE=1をエクスポートするのも良いアイデアです)。</target>
        </trans-unit>
        <trans-unit id="cce2b5ee15547d8411b108ac01a1af3d3a13be3a" translate="yes" xml:space="preserve">
          <source>and belong to the user running the program:</source>
          <target state="translated">であり、プログラムを実行しているユーザーに属しています。</target>
        </trans-unit>
        <trans-unit id="68c1df893d3dfe1344316c80822ce4982fc34977" translate="yes" xml:space="preserve">
          <source>and by default output is displayed inline.</source>
          <target state="translated">で、デフォルトでは出力がインラインで表示されます。</target>
        </trans-unit>
        <trans-unit id="9d972577906aa2c316e9c360f92a8897dc203b61" translate="yes" xml:space="preserve">
          <source>and by definition, the solution is noted</source>
          <target state="translated">と定義されており、解は</target>
        </trans-unit>
        <trans-unit id="31788a27790e7797ed6a059ba1faefdb6a39e6a9" translate="yes" xml:space="preserve">
          <source>and call</source>
          <target state="translated">と呼ぶ</target>
        </trans-unit>
        <trans-unit id="2b74bf70fe4b516f104f35b9ee09019d1d9b9441" translate="yes" xml:space="preserve">
          <source>and call it with &lt;code&gt;perl dangerous.pl 'rm -rfv *|'&lt;/code&gt; , it actually opens a pipe, executes the &lt;code&gt;rm&lt;/code&gt; command and reads &lt;code&gt;rm&lt;/code&gt; 's output from that pipe. If you want all items in &lt;code&gt;@ARGV&lt;/code&gt; to be interpreted as file names, you can use the module &lt;code&gt;ARGV::readonly&lt;/code&gt; from CPAN, or use the double bracket:</source>
          <target state="translated">そして、 &lt;code&gt;perl dangerous.pl 'rm -rfv *|'&lt;/code&gt; それを呼び出します 、実際にパイプを開き、 &lt;code&gt;rm&lt;/code&gt; コマンドを実行して、そのパイプから &lt;code&gt;rm&lt;/code&gt; の出力を読み取ります。 &lt;code&gt;@ARGV&lt;/code&gt; 内のすべてのアイテムをファイル名として解釈する場合は、CPANからモジュール &lt;code&gt;ARGV::readonly&lt;/code&gt; を使用するか、二重括弧を使用できます。</target>
        </trans-unit>
        <trans-unit id="cdadfa4e29a3387e757303b12e15c9ac8ce26389" translate="yes" xml:space="preserve">
          <source>and calling &lt;code&gt;Perl_mro_register&lt;/code&gt; :</source>
          <target state="translated">そして &lt;code&gt;Perl_mro_register&lt;/code&gt; を呼び出します：</target>
        </trans-unit>
        <trans-unit id="2dd76bc4189d4946771f4e716aa51df3f1240631" translate="yes" xml:space="preserve">
          <source>and choose your favorite parameters. After a few downloads running the &lt;code&gt;hosts&lt;/code&gt; command will probably assist you in choosing the best mirror sites.</source>
          <target state="translated">お好みのパラメータを選択してください。数回のダウンロードの後、 &lt;code&gt;hosts&lt;/code&gt; コマンドを実行すると、おそらく最良のミラーサイトを選択するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a8c3f91d52eab0005bf1821357c56257522b3d7e" translate="yes" xml:space="preserve">
          <source>and concatenate it to</source>
          <target state="translated">に連結して</target>
        </trans-unit>
        <trans-unit id="2ff89dcb837ced149fb6b5224ee21778d994fc8a" translate="yes" xml:space="preserve">
          <source>and continuing to the first nul. These octets are interpreted as either UTF-8 or Latin-1, according to whether the &lt;code&gt;LEX_STUFF_UTF8&lt;/code&gt; flag is set in</source>
          <target state="translated">そして最初のヌルに続きます。これらのオクテットは、 &lt;code&gt;LEX_STUFF_UTF8&lt;/code&gt; フラグが設定されているかどうかに応じて、UTF-8またはLatin-1として解釈されます。</target>
        </trans-unit>
        <trans-unit id="3b4b74100dbb60dc7d23a3f17b465ea647875121" translate="yes" xml:space="preserve">
          <source>and correct anything wrong you find there. I do not expect it is needed anywhere.</source>
          <target state="translated">そしてそこで間違っていることを見つけたら修正してください。どこでも必要とされるとは思っていません</target>
        </trans-unit>
        <trans-unit id="c0554b9855c1b4a6c0834e79b079617190a40bcb" translate="yes" xml:space="preserve">
          <source>and dies. Therefore the SunOS 4.1 hints file explicitly sets the ld to be</source>
          <target state="translated">と死んでしまいます。そのため、SunOS 4.1 のヒントファイルでは、ld を明示的に</target>
        </trans-unit>
        <trans-unit id="c349b5535bebf3c0ad16ae9e94907ffd5cecb983" translate="yes" xml:space="preserve">
          <source>and divines whether they passed or failed based on their output to STDOUT (details above). It prints out each individual test which failed along with a summary report and a how long it all took.</source>
          <target state="translated">を使用して、STDOUT への出力に基づいて合否を判定します (詳細は上記)。これは、失敗した個々のテストをサマリーレポートと所要時間とともにプリントアウトします。</target>
        </trans-unit>
        <trans-unit id="a5fd741bd9f2a58aedde00aa2b92b647f2b4c3d7" translate="yes" xml:space="preserve">
          <source>and doing a bunch of messy heuristics on the resulting</source>
          <target state="translated">で、結果として得られた</target>
        </trans-unit>
        <trans-unit id="79a24dfc42595a13dbd8f77aa55520c5f2654ac8" translate="yes" xml:space="preserve">
          <source>and earlier, the default setting is based on whether or not $prefix contains the string &lt;code&gt;perl&lt;/code&gt; .</source>
          <target state="translated">以前のバージョンでは、デフォルト設定は$ prefixに文字列 &lt;code&gt;perl&lt;/code&gt; が含まれているかどうかに基づいています。</target>
        </trans-unit>
        <trans-unit id="ca01c68b157f542551615a222bf4d40f1c92ab92" translate="yes" xml:space="preserve">
          <source>and ending at</source>
          <target state="translated">で終わり</target>
        </trans-unit>
        <trans-unit id="edc511aaa0ea9a61210a5a9707c8841bf5cc309d" translate="yes" xml:space="preserve">
          <source>and even</source>
          <target state="translated">ましてや</target>
        </trans-unit>
        <trans-unit id="883426c92d8b38847917d43ce3dd00b6254d2bed" translate="yes" xml:space="preserve">
          <source>and expect C to be B, because the bearing constantly changes when going from A to B (except in some special case like the meridians or the circles of latitudes) and in great_circle_destination() one gives a &lt;b&gt;constant&lt;/b&gt; bearing to follow.</source>
          <target state="translated">そして、CがBであることを期待します。なぜなら、AからBに移動するときは常に方位が変化し（子午線や緯度の円などの特別な場合を除く）、great_circle_destination（）で&lt;b&gt;一定の&lt;/b&gt;方位が続くためです。</target>
        </trans-unit>
        <trans-unit id="3ee040c85734bc842f7986baed3ad3d4c7a277c5" translate="yes" xml:space="preserve">
          <source>and extension authors. If your extension is dynamically loaded, DynaLoader creates</source>
          <target state="translated">と拡張機能の作者を指定します。拡張機能が動的にロードされている場合、DynaLoaderは</target>
        </trans-unit>
        <trans-unit id="d176fa9bd5235077e8d5cc1dc829719336ead81b" translate="yes" xml:space="preserve">
          <source>and fields. So far, the functions of &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; are unaware of any classes, which I consider a feature. Therefore &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; doesn't address the serialization problems.</source>
          <target state="translated">とフィールド。これまでのところ、 &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; の関数はクラスを認識していません。したがって、 &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; はシリアル化の問題に対処しません。</target>
        </trans-unit>
        <trans-unit id="6420fc98ccacfbcabdd1358ce52dbb2f18c3b757" translate="yes" xml:space="preserve">
          <source>and for &lt;code&gt;_&lt;/code&gt; to explicitly populate the object using the unexported and undocumented populate() function with CORE::stat():</source>
          <target state="translated">また、 &lt;code&gt;_&lt;/code&gt; は、CORE :: stat（）を使用して、エクスポートおよびドキュメント化されていないPopulate（）関数を使用してオブジェクトを明示的に設定します。</target>
        </trans-unit>
        <trans-unit id="9ecd2684e5d35794eb09b10452dc598bb0f3ca39" translate="yes" xml:space="preserve">
          <source>and for writing:</source>
          <target state="translated">と書くために。</target>
        </trans-unit>
        <trans-unit id="c07a028d906529efcbd2ee19e8498ca6b129b522" translate="yes" xml:space="preserve">
          <source>and from Latin-1 code points to EBCDIC code points</source>
          <target state="translated">とLatin-1のコードポイントからEBCDICのコードポイントへ</target>
        </trans-unit>
        <trans-unit id="3f19bd785ca0e403ace13135f2e7d2f6fda0fce7" translate="yes" xml:space="preserve">
          <source>and get &lt;code&gt;&quot;mu&lt;/code&gt; &amp;szlig;&lt;code&gt;&quot;&lt;/code&gt; in &lt;code&gt;$match&lt;/code&gt; , since &lt;code&gt;&quot;mu&lt;/code&gt; &amp;szlig;&lt;code&gt;&quot;&lt;/code&gt; is primary equal to &lt;code&gt;&quot;M&lt;/code&gt; &amp;uuml;&lt;code&gt;SS&quot;&lt;/code&gt; .</source>
          <target state="translated">そして、get &lt;code&gt;&quot;mu&lt;/code&gt; &amp;szlig; &lt;code&gt;&quot;&lt;/code&gt; で &lt;code&gt;$match&lt;/code&gt; するので、 &lt;code&gt;&quot;mu&lt;/code&gt; &amp;szlig; &lt;code&gt;&quot;&lt;/code&gt; に等しい主である &lt;code&gt;&quot;M&lt;/code&gt; &amp;uuml; &lt;code&gt;SS&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17094f04dd71da09c7e552c076f1634e82049f36" translate="yes" xml:space="preserve">
          <source>and have it work portably.</source>
          <target state="translated">とポータビリティで動作させることができます。</target>
        </trans-unit>
        <trans-unit id="a5a8ee21b9af7088e79e9b68f8de88da612fb525" translate="yes" xml:space="preserve">
          <source>and have some pending arguments such as header-file names. This is ok:</source>
          <target state="translated">で、ヘッダファイル名のようないくつかの保留中の引数を持っています。これはOKです。</target>
        </trans-unit>
        <trans-unit id="d2a6339505fec77b2c331da5c4ce78372f108fa3" translate="yes" xml:space="preserve">
          <source>and hence print:</source>
          <target state="translated">そして、それゆえに印刷されます。</target>
        </trans-unit>
        <trans-unit id="43fb62ee614e6b7e422fd695927ade0aa52a2d8a" translate="yes" xml:space="preserve">
          <source>and here is a C function to call it</source>
          <target state="translated">これを呼び出すためのC言語の関数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5091999bd97a90f1245944c2fb5cff579789d3a7" translate="yes" xml:space="preserve">
          <source>and here is a C function to call it.</source>
          <target state="translated">で、それを呼び出すためのC言語の関数がここにあります。</target>
        </trans-unit>
        <trans-unit id="9b815eb7a25ba6650e8aed21b42d3225c5665f92" translate="yes" xml:space="preserve">
          <source>and if a method-name was given, it is invoked as:</source>
          <target state="translated">として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cc0088cffc94d4cfc5e772584e99d2d2392934ec" translate="yes" xml:space="preserve">
          <source>and if you want to compress each file one at a time, this will do the trick</source>
          <target state="translated">で、各ファイルを一度に一つずつ圧縮したい場合は、このようにします。</target>
        </trans-unit>
        <trans-unit id="99ebfac46815750e967685ef0c045d72e263a9e9" translate="yes" xml:space="preserve">
          <source>and in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633f5443d1716f6d61c0fc8d8b08ec73cf1d7a57" translate="yes" xml:space="preserve">
          <source>and in:</source>
          <target state="translated">とインしています。</target>
        </trans-unit>
        <trans-unit id="1d0130f8a3921bc892b37851ce6cc11bad75e4c1" translate="yes" xml:space="preserve">
          <source>and is</source>
          <target state="translated">であり</target>
        </trans-unit>
        <trans-unit id="ebbea3f118453a1b7e7d79408e6db651a9e30122" translate="yes" xml:space="preserve">
          <source>and is invoked when you say</source>
          <target state="translated">と言うときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7ecd6605c858a1a66d6b614d96b36273cffaf756" translate="yes" xml:space="preserve">
          <source>and is now removed.</source>
          <target state="translated">と削除されました。</target>
        </trans-unit>
        <trans-unit id="73402b7701fac32d16b3ff7c74498b1589d19a23" translate="yes" xml:space="preserve">
          <source>and is sought only in the current directory.</source>
          <target state="translated">と表示され、現在のディレクトリにのみ求められます。</target>
        </trans-unit>
        <trans-unit id="15dd7cf5f3a3a46ccd4b8609412b5d9ec3d381ec" translate="yes" xml:space="preserve">
          <source>and is typically used to test whether a particular extension is available.</source>
          <target state="translated">で、通常は特定の拡張機能が利用可能かどうかをテストするために使用されます。</target>
        </trans-unit>
        <trans-unit id="040dda9958c7c671c9590ef80fa78defd13909d5" translate="yes" xml:space="preserve">
          <source>and is used like this:</source>
          <target state="translated">とこのように使われています。</target>
        </trans-unit>
        <trans-unit id="7a0762f239de965ed45f319d1c0a1eb571367472" translate="yes" xml:space="preserve">
          <source>and it always croaks on error.</source>
          <target state="translated">そして、それはいつもエラーで鳴きます。</target>
        </trans-unit>
        <trans-unit id="37328fc9c48882c8dd3a9ee9675314c5a2fe5451" translate="yes" xml:space="preserve">
          <source>and it is called thusly</source>
          <target state="translated">こう呼ばれています。</target>
        </trans-unit>
        <trans-unit id="30dae0c952d8a4bc4211df4fa02a32b80f898a03" translate="yes" xml:space="preserve">
          <source>and it will print:</source>
          <target state="translated">と表示され、印刷されます。</target>
        </trans-unit>
        <trans-unit id="92f48e8870b365babea517ca9b817b451b407aad" translate="yes" xml:space="preserve">
          <source>and it would import the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; override. But if they said</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; オーバーライドをインポートします。しかし彼らが言ったら</target>
        </trans-unit>
        <trans-unit id="c15e27e77f8641be998c0928e2456baabe13d2d3" translate="yes" xml:space="preserve">
          <source>and look for 'undef' to find the unsupported APIs (or from Perl use Config).</source>
          <target state="translated">と'undef'を探して、サポートされていないAPIを見つけてください(またはPerlからConfigを使用してください)。</target>
        </trans-unit>
        <trans-unit id="d0408bb76ba414190a2d1aabc2693a0c0369eb0d" translate="yes" xml:space="preserve">
          <source>and managing the</source>
          <target state="translated">を管理し</target>
        </trans-unit>
        <trans-unit id="6d7251c76d8c565a4c8c07c1d963ea078e2097d6" translate="yes" xml:space="preserve">
          <source>and never returns</source>
          <target state="translated">一度も帰ってこない</target>
        </trans-unit>
        <trans-unit id="ffbc147df069ca6800db6b624cd3c1abcb34c6b3" translate="yes" xml:space="preserve">
          <source>and no matter which sort of shell it's called from, the Perl program will read from the file</source>
          <target state="translated">で、どのような種類のシェルから呼び出されたとしても、Perl プログラムはファイルから</target>
        </trans-unit>
        <trans-unit id="2f3522d8409fab2c8bd7a9a935e5958b1545b923" translate="yes" xml:space="preserve">
          <source>and not</source>
          <target state="translated">ではなく</target>
        </trans-unit>
        <trans-unit id="aece363ea57b99203cb8486606d46afddab39c93" translate="yes" xml:space="preserve">
          <source>and not worry about whether the subscripts are reserved words. In the rare event that you do wish to do something like</source>
          <target state="translated">と、添え字が予約語かどうかを気にする必要はありません。のようなことをしたい場合がまれにあります。</target>
        </trans-unit>
        <trans-unit id="90867a465b6b8e0350b0a553fb9bdc04f2f044ec" translate="yes" xml:space="preserve">
          <source>and notify &amp;lt;modules@perl.org&amp;gt;.</source>
          <target state="translated">&amp;lt;modules@perl.org&amp;gt;に通知してください。</target>
        </trans-unit>
        <trans-unit id="4fe6790d00afd2e85336f040031f25d3b71777a0" translate="yes" xml:space="preserve">
          <source>and omit the second call to &lt;code&gt;A::foo&lt;/code&gt; (since it would not be distinct from the first call to &lt;code&gt;A::foo&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;A::foo&lt;/code&gt; への2番目の呼び出しは省略します（最初の &lt;code&gt;A::foo&lt;/code&gt; 呼び出しと区別されないため）。</target>
        </trans-unit>
        <trans-unit id="adeced66d67fcec42518c7d43125b26bcafca512" translate="yes" xml:space="preserve">
          <source>and on &lt;code&gt;PATH&lt;/code&gt; . To find arguments for these scripts Perl uses a different algorithm than</source>
          <target state="translated">と &lt;code&gt;PATH&lt;/code&gt; に。これらのスクリプトの引数を見つけるために、Perlは別のアルゴリズムを使用しています</target>
        </trans-unit>
        <trans-unit id="2af9cc5d9a90aea15c856967222ce6dfd62554a0" translate="yes" xml:space="preserve">
          <source>and on already open streams, use &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">すでに開いているストリームでは、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5c28d75bfe8ef3f77376f1de537f6ababec7c8f5" translate="yes" xml:space="preserve">
          <source>and one can inspect the value in debugger using all the possible methods.</source>
          <target state="translated">で、デバッガでは、可能な限りのメソッドを使って値を検査することができます。</target>
        </trans-unit>
        <trans-unit id="9e3a44de13daa4279c477d6ae9ad2ae6048934f2" translate="yes" xml:space="preserve">
          <source>and only &lt;a href=&quot;perlvar#%24ERRNO&quot;&gt;$!&lt;/a&gt; and &lt;a href=&quot;perlvar#%24EXTENDED_OS_ERROR&quot;&gt;$^E&lt;/a&gt; will be locale aware. Everything else is unaffected.</source>
          <target state="translated">そしてたったの&lt;a href=&quot;perlvar#%24ERRNO&quot;&gt;$！&lt;/a&gt;そして、&lt;a href=&quot;perlvar#%24EXTENDED_OS_ERROR&quot;&gt;$ ^ Eは&lt;/a&gt;承知ロケールになります。他のすべては影響を受けません。</target>
        </trans-unit>
        <trans-unit id="3dfb4545fb1273b004ecd4b9a59f733f64c1cedd" translate="yes" xml:space="preserve">
          <source>and only if the condition is true. &lt;code&gt;unless&lt;/code&gt; is the opposite, it executes the statement</source>
          <target state="translated">条件が真の場合のみ。反対で &lt;code&gt;unless&lt;/code&gt; 、それはステートメントを実行します</target>
        </trans-unit>
        <trans-unit id="45c260afb98f09cfba9f5207fc8117fcdbcb8feb" translate="yes" xml:space="preserve">
          <source>and only the first of these match:</source>
          <target state="translated">と、これらの最初の試合だけが一致しています。</target>
        </trans-unit>
        <trans-unit id="32e3341449eff9e33d610a484aa1f31d028b2c36" translate="yes" xml:space="preserve">
          <source>and optimizing the final combined regexp.</source>
          <target state="translated">と、最終的に結合された正規表現を最適化します。</target>
        </trans-unit>
        <trans-unit id="899fcac99a7dec6812e6bf7aee73eeaf10908c82" translate="yes" xml:space="preserve">
          <source>and other auto-generated files.</source>
          <target state="translated">などの自動生成されたファイルを使用しています。</target>
        </trans-unit>
        <trans-unit id="c684acd53848e74a7154abad5efe0e096b7463d3" translate="yes" xml:space="preserve">
          <source>and part</source>
          <target state="translated">と一部</target>
        </trans-unit>
        <trans-unit id="d67e5dc377fc2536598e164820c52f727da6d6ab" translate="yes" xml:space="preserve">
          <source>and pass &lt;code&gt;$buf&lt;/code&gt; to your send routine. Some protocols demand that the count should include the length of the count itself: then just add 4 to the data length. (But make sure to read &lt;a href=&quot;#Lengths-and-Widths&quot;&gt;Lengths and Widths&lt;/a&gt; before you really code this!)</source>
          <target state="translated">&lt;code&gt;$buf&lt;/code&gt; を送信ルーチンに渡します。一部のプロトコルでは、カウントにカウント自体の長さを含める必要があります。データ長に4を追加するだけです。（しかし、これを実際にコーディングする前に、&lt;a href=&quot;#Lengths-and-Widths&quot;&gt;長さと幅&lt;/a&gt;を必ず読んでください！）</target>
        </trans-unit>
        <trans-unit id="d58ccce831f8e9123bc9e80b9e66f8248b980f4c" translate="yes" xml:space="preserve">
          <source>and process time (in UNIX-like systems the sum of</source>
          <target state="translated">と処理時間(UNIX系のシステムでは</target>
        </trans-unit>
        <trans-unit id="3fd6226fa225944b6194d79ef250caae14aa04c4" translate="yes" xml:space="preserve">
          <source>and produces results. If you need to customize its behaviour you should probably familiarize yourself with the source first. Enough lecturing.</source>
          <target state="translated">と結果を出します。その動作をカスタマイズする必要がある場合は、最初にソースに精通している必要があります。説教はもういいでしょう。</target>
        </trans-unit>
        <trans-unit id="bc18719ba2c64a9b71c32941b959a3b37a8e9ccb" translate="yes" xml:space="preserve">
          <source>and programs into</source>
          <target state="translated">とプログラムに</target>
        </trans-unit>
        <trans-unit id="04b3f3eb12446afa59ba04e34128aaa73360c8fb" translate="yes" xml:space="preserve">
          <source>and puts the</source>
          <target state="translated">を入れて</target>
        </trans-unit>
        <trans-unit id="1050864b9d5630870510b4c5ed9d494b62e3e1ac" translate="yes" xml:space="preserve">
          <source>and recompile perl</source>
          <target state="translated">で、Perlを再コンパイルします。</target>
        </trans-unit>
        <trans-unit id="04dc98e6e6ecb08df2b06a8c82f091b8669d8771" translate="yes" xml:space="preserve">
          <source>and return a list anyway. If so, then only the last element of the list will be returned.</source>
          <target state="translated">を使用して、とにかくリストを返します。そうすると、リストの最後の要素だけが返されます。</target>
        </trans-unit>
        <trans-unit id="bea3ea10f617b4820cdc83a6257e4c5d2c2ed531" translate="yes" xml:space="preserve">
          <source>and returns a sequence of octets.</source>
          <target state="translated">を返し、オクテットのシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="69bdd065458a753e9be3338a81aee1403915b245" translate="yes" xml:space="preserve">
          <source>and returns this:</source>
          <target state="translated">で、これを返します。</target>
        </trans-unit>
        <trans-unit id="05a85acb845c8558aabbfdc75bce2f31eacc6f3d" translate="yes" xml:space="preserve">
          <source>and runs it through the pager specified in &lt;code&gt;$CPAN::Config-&amp;gt;{pager}&lt;/code&gt; .</source>
          <target state="translated">そして、それを &lt;code&gt;$CPAN::Config-&amp;gt;{pager}&lt;/code&gt; 指定されたページャーを介して実行します。</target>
        </trans-unit>
        <trans-unit id="88b01bfc16080bd793c508ce92be40c54c4e0d32" translate="yes" xml:space="preserve">
          <source>and see whether they list something resembling these</source>
          <target state="translated">に似たものをリストアップしているかどうかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="9407dd89aa838f3db9bc1ee001171ae499cdf58c" translate="yes" xml:space="preserve">
          <source>and send a line of data to it this way:</source>
          <target state="translated">で、このようにデータの行を送信します。</target>
        </trans-unit>
        <trans-unit id="834b5f4699ca8ef5bed1ec71205174ca1aa071f2" translate="yes" xml:space="preserve">
          <source>and should never be used lightly.</source>
          <target state="translated">と軽々しく使ってはいけません。</target>
        </trans-unit>
        <trans-unit id="cc72a00bf5f82a31e19586f8d5648eeb9609f807" translate="yes" xml:space="preserve">
          <source>and so on.</source>
          <target state="translated">といったようなことを言っています。</target>
        </trans-unit>
        <trans-unit id="9db3feda6610247fb93d16581c9f1e324a0dc3ce" translate="yes" xml:space="preserve">
          <source>and so on. Note how the trailing sub-version is automatically stripped from the version.</source>
          <target state="translated">といったようにしています。最後のサブバージョンがバージョンから自動的に取り除かれていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b888a2f960617a6f6c366d202b424cbea99cdde" translate="yes" xml:space="preserve">
          <source>and some C to call it</source>
          <target state="translated">と、それを呼ぶためにいくつかのC</target>
        </trans-unit>
        <trans-unit id="a1e18734fb68f76855ac9d83f86033f89bcb6297" translate="yes" xml:space="preserve">
          <source>and someone has been calling it with an array or expression returning a list:</source>
          <target state="translated">と誰かがリストを返す配列や式で呼び出していました。</target>
        </trans-unit>
        <trans-unit id="c88d797f97ab7980940e6fbc2a0b1b0f03bf45ed" translate="yes" xml:space="preserve">
          <source>and start with this template:</source>
          <target state="translated">で、このテンプレートから始めます。</target>
        </trans-unit>
        <trans-unit id="60a1a53956f7f1b07c9ff7e2cf048e0d61cf0aff" translate="yes" xml:space="preserve">
          <source>and still have it work under all the modes Perl could have been compiled with.</source>
          <target state="translated">でコンパイルされたPerlのすべてのモードで動作するようにしています。</target>
        </trans-unit>
        <trans-unit id="b93c07a562c2c0c86991f560b275725c74228f04" translate="yes" xml:space="preserve">
          <source>and suffix of C&amp;lt;.dat&amp;gt; would generate a file similar to F</source>
          <target state="translated">C &amp;lt;.dat&amp;gt;のサフィックスは、Fと同様のファイルを生成します</target>
        </trans-unit>
        <trans-unit id="58b0b8a5933189f91ce79bd5aaa4c4a91a53f4c2" translate="yes" xml:space="preserve">
          <source>and symbolic sub references</source>
          <target state="translated">およびシンボリックサブ参照</target>
        </trans-unit>
        <trans-unit id="c8bd05940ef361af618d2f58d8ef228c2dc1eee1" translate="yes" xml:space="preserve">
          <source>and that the default flags are kept in a global C variable &lt;code&gt;default_flags&lt;/code&gt; . Suppose that you want to create an interface which is called as</source>
          <target state="translated">また、デフォルトのフラグはグローバルC変数 &lt;code&gt;default_flags&lt;/code&gt; に保持されます。次のように呼び出されるインターフェースを作成するとします。</target>
        </trans-unit>
        <trans-unit id="97ed4c8cfdc4058f64674afafa62d45ea754ba4b" translate="yes" xml:space="preserve">
          <source>and that will set this class as the default formatter to run when you do &lt;code&gt;perldoc whatever&lt;/code&gt; .</source>
          <target state="translated">そして、このクラスは、 &lt;code&gt;perldoc whatever&lt;/code&gt; を実行したときに実行されるデフォルトのフォーマッターとして設定されます。</target>
        </trans-unit>
        <trans-unit id="38d402cb5ba5ced669d83f33b900f232ec58d72a" translate="yes" xml:space="preserve">
          <source>and the</source>
          <target state="translated">そして、その</target>
        </trans-unit>
        <trans-unit id="d6a3e1044d78ff80b32d4053c48546a54399bb4a" translate="yes" xml:space="preserve">
          <source>and the (compiled)</source>
          <target state="translated">と(コンパイルされた)</target>
        </trans-unit>
        <trans-unit id="7709e2962fcebb7a32dface22926131efe462333" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;&quot;-&quot;&lt;/code&gt; shouldn't be the first character. If you want to be hypercorrect, stay case-insensitive and within the 8.3 naming convention (all the files and directories have to be unique within one directory if their names are lowercased and truncated to eight characters before the &lt;code&gt;.&lt;/code&gt;, if any, and to three characters after the &lt;code&gt;.&lt;/code&gt;, if any). (And do not use &lt;code&gt;.&lt;/code&gt;s in directory names.)</source>
          <target state="translated">そして、 &lt;code&gt;&quot;-&quot;&lt;/code&gt; の最初の文字であってはなりません。ハイパーコレクトにしたい場合は、大文字と小文字を区別せず、8.3命名規則の範囲内にしてください（すべてのファイルとディレクトリは、名前が小文字の場合は1つのディレクトリ内で一意でなければならず、存在する場合は &lt;code&gt;.&lt;/code&gt; &lt;code&gt;.&lt;/code&gt; 後の文字（ある場合）。（そして、使用しないでください &lt;code&gt;.&lt;/code&gt; sのディレクトリ名に。）</target>
        </trans-unit>
        <trans-unit id="4d66f33f291aa497e1fbb1cea751208ffbc34985" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;S_IF*&lt;/code&gt; functions are</source>
          <target state="translated">そして &lt;code&gt;S_IF*&lt;/code&gt; 機能があります</target>
        </trans-unit>
        <trans-unit id="2942a15e2cfe5df5d7b4806203036ff2059365fd" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;build&lt;/code&gt; of the &lt;code&gt;prereqs&lt;/code&gt; field of your</source>
          <target state="translated">そして、 &lt;code&gt;build&lt;/code&gt; の &lt;code&gt;prereqs&lt;/code&gt; あなたのフィールド</target>
        </trans-unit>
        <trans-unit id="ab5709809a705fe3cbf34a47d36a8f9e3b151b2f" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;configure&lt;/code&gt; of the &lt;code&gt;prereqs&lt;/code&gt; field of your</source>
          <target state="translated">そして、 &lt;code&gt;configure&lt;/code&gt; の &lt;code&gt;prereqs&lt;/code&gt; あなたのフィールド</target>
        </trans-unit>
        <trans-unit id="02c4a9e6fa1ed7552c9cc696dccfac8693bb8d07" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;padadd_STATE&lt;/code&gt; flag get added to</source>
          <target state="translated">そして &lt;code&gt;padadd_STATE&lt;/code&gt; フラグが追加されます</target>
        </trans-unit>
        <trans-unit id="3e4685b36d5a4d2703e2682160eabe2135a107d7" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;runtime&lt;/code&gt; of the &lt;code&gt;prereqs&lt;/code&gt; field of your</source>
          <target state="translated">そして、 &lt;code&gt;runtime&lt;/code&gt; の &lt;code&gt;prereqs&lt;/code&gt; あなたのフィールド</target>
        </trans-unit>
        <trans-unit id="25ff9d2e379f8fa04204de9723f370d19f946094" translate="yes" xml:space="preserve">
          <source>and the &lt;code&gt;test&lt;/code&gt; of the &lt;code&gt;prereqs&lt;/code&gt; field of your</source>
          <target state="translated">そして &lt;code&gt;test&lt;/code&gt; の &lt;code&gt;prereqs&lt;/code&gt; あなたのフィールドに</target>
        </trans-unit>
        <trans-unit id="ad51d3bef464cc47afa473cbf58e8f411acbad00" translate="yes" xml:space="preserve">
          <source>and the B part would be serialized by the engine. In &lt;code&gt;STORABLE_thaw&lt;/code&gt; , you would get back the reference to the B' object, deserialized for you.</source>
          <target state="translated">B部分はエンジンによってシリアル化されます。では &lt;code&gt;STORABLE_thaw&lt;/code&gt; 、あなたはあなたのためにデシリアライズさB」オブジェクトへの参照を、取り戻すでしょう。</target>
        </trans-unit>
        <trans-unit id="147f20996051af5faf516917523025a59c3b1223" translate="yes" xml:space="preserve">
          <source>and the anonymous sub used with a</source>
          <target state="translated">と一緒に使われている匿名のサブ</target>
        </trans-unit>
        <trans-unit id="be7ddd8a1c2d20b11344c530e59b1a76ec5867c2" translate="yes" xml:space="preserve">
          <source>and the assignments to &lt;code&gt;@ISA&lt;/code&gt; and &lt;code&gt;@EXPORT_OK&lt;/code&gt; happen immediately, leaving no room for something to get awry or just plain wrong.</source>
          <target state="translated">とに割り当て &lt;code&gt;@ISA&lt;/code&gt; と &lt;code&gt;@EXPORT_OK&lt;/code&gt; はゆがんまたは単純に間違っを取得するために何かの余地を残していない、すぐに起こります。</target>
        </trans-unit>
        <trans-unit id="ec3881e38f6bc29241523880e8b6087893781e29" translate="yes" xml:space="preserve">
          <source>and the code for rpcb_gettime() can be rewritten as</source>
          <target state="translated">のコードは次のように書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="d0b288947e39526d473e38a00227523ed22a3b40" translate="yes" xml:space="preserve">
          <source>and the context and data stacks, as shown by &lt;code&gt;-Dstv&lt;/code&gt; , look like:</source>
          <target state="translated">&lt;code&gt;-Dstv&lt;/code&gt; で示されるコンテキストとデータスタックは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="0053caf8d86bff52b61e0db6e20570501321030d" translate="yes" xml:space="preserve">
          <source>and the decoding is</source>
          <target state="translated">であり、復号化は</target>
        </trans-unit>
        <trans-unit id="6db487f2363f1808733e361f4f9ef6e4c29bac55" translate="yes" xml:space="preserve">
          <source>and the dual-life modules are in</source>
          <target state="translated">であり、デュアルライフモジュールは</target>
        </trans-unit>
        <trans-unit id="701a5fbfcd6a3d0bfbaa14dc1799d0bcc3687760" translate="yes" xml:space="preserve">
          <source>and the first argument of myref() will be a reference to a scalar, an array, a hash, a code, or a glob.</source>
          <target state="translated">で、myref()の第一引数はスカラ、配列、ハッシュ、コード、グロブへの参照になります。</target>
        </trans-unit>
        <trans-unit id="41644e439068ccf4dd12a38456eb1c0abd4f9ac4" translate="yes" xml:space="preserve">
          <source>and the following code will read the hexdump in and convert it on the fly back into bytes:</source>
          <target state="translated">で、次のコードはhexdumpを読み込んで、その場でバイトに変換してくれます。</target>
        </trans-unit>
        <trans-unit id="50b6d807bc1aa40041d0aec64ce2f373303ab28d" translate="yes" xml:space="preserve">
          <source>and the latter should be used for consistency.</source>
          <target state="translated">と後者は整合性のために使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a319d5d5f1db6ffbf62ebbd0eae703d0f1b20336" translate="yes" xml:space="preserve">
          <source>and the method form of &lt;code&gt;isa&lt;/code&gt; for the second:</source>
          <target state="translated">そして二番目の &lt;code&gt;isa&lt;/code&gt; のメソッド形式：</target>
        </trans-unit>
        <trans-unit id="d51a49fa5c4b18f00dbcb9d665d43c1102906852" translate="yes" xml:space="preserve">
          <source>and the newer &lt;a href=&quot;concise&quot;&gt;B::Concise&lt;/a&gt;, &lt;a href=&quot;terse&quot;&gt;B::Terse&lt;/a&gt;.</source>
          <target state="translated">そして、新しい&lt;a href=&quot;concise&quot;&gt;B :: Concise&lt;/a&gt;、&lt;a href=&quot;terse&quot;&gt;B :: Terse&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0101ea36f11aa234346b21c12169ca0fa18afce9" translate="yes" xml:space="preserve">
          <source>and the numeric value of $c becomes 5. However, after calling</source>
          <target state="translated">を呼び出すと、$cの数値が5になります。しかし</target>
        </trans-unit>
        <trans-unit id="59496338c48bb851d2fcd377f515a4eb8426caa1" translate="yes" xml:space="preserve">
          <source>and the old 5.005 style threading, or for that matter, to most other threading systems out there, is that by default, no data is shared. When a new Perl thread is created, all the data associated with the current thread is copied to the new thread, and is subsequently private to that new thread! This is similar in feel to what happens when a Unix process forks, except that in this case, the data is just copied to a different part of memory within the same process rather than a real fork taking place.</source>
          <target state="translated">と、古い 5.005 スタイルのスレッディング、つまり他のほとんどのスレッディングシステムでは、デフォルトではデータは共有されません。新しい Perl スレッドが作成されると、現在のスレッドに関連付けられたすべてのデータが新しいスレッドにコピーされ、その後、その新しいスレッドに対してプライベートになります。これは、Unix プロセスがフォークするときに起こることに似ていますが、この場合は、実際にフォークが行われるのではなく、同じプロセス内の別のメモリにデータがコピーされるだけです。</target>
        </trans-unit>
        <trans-unit id="f98e525fd3fa23c9c2e46620627a8148db25bb3f" translate="yes" xml:space="preserve">
          <source>and the process defaults to expand the filespec) and pass the rest of &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;'s argument to it as parameters. If the token has no file type, and matches a file with null type, then an attempt is made to determine whether the file is an executable image which should be invoked using &lt;code&gt;MCR&lt;/code&gt; or a text file which should be passed to DCL as a command procedure.</source>
          <target state="translated">プロセスはデフォルトでfilespecを展開し、残りの &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; の引数をパラメーターとして渡します。トークンにファイルタイプがなく、ヌルタイプのファイルと一致する場合、ファイルが &lt;code&gt;MCR&lt;/code&gt; を使用して呼び出す必要のある実行可能イメージであるか、コマンドプロシージャとしてDCLに渡す必要があるテキストファイルであるかを判断する試みが行われます。 。</target>
        </trans-unit>
        <trans-unit id="ddacafb3c506d7d636313e8cd8381b88b300fc0f" translate="yes" xml:space="preserve">
          <source>and the process defaults, and if successful, the resulting file is invoked via &lt;code&gt;MCR&lt;/code&gt; . This allows you to invoke an image directly simply by passing the file specification to &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, a common Unixish idiom. If the token has no file type, and matches a file with null type, then an attempt is made to determine whether the file is an executable image which should be invoked using &lt;code&gt;MCR&lt;/code&gt; or a text file which should be passed to DCL as a command procedure.</source>
          <target state="translated">プロセスがデフォルトになり、成功した場合、結果のファイルは &lt;code&gt;MCR&lt;/code&gt; を介して呼び出されます。これにより、ファイル仕様を一般的なUnixのイディオムである &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; に渡すだけで、イメージを直接呼び出すことができます。トークンにファイルタイプがなく、ヌルタイプのファイルと一致する場合、ファイルが &lt;code&gt;MCR&lt;/code&gt; を使用して呼び出す必要がある実行可能イメージであるか、コマンドプロシージャとしてDCLに渡す必要があるテキストファイルであるかを判断する試みが行われます。 。</target>
        </trans-unit>
        <trans-unit id="01a7d35d5fca09ca87a957bce5a8e41bd9acadb8" translate="yes" xml:space="preserve">
          <source>and the repeat count is obtained by popping off the last element from the stack. The</source>
          <target state="translated">で、リピート数はスタックから最後の要素をポップオフすることで得られます。のように、スタックから最後の要素をポップオフすることで、リピート回数が得られます。</target>
        </trans-unit>
        <trans-unit id="ffb8c286d177a7fde4b96ec8e58df11a57708992" translate="yes" xml:space="preserve">
          <source>and the result is not what you likely expected. No warnings are generated. If you do string &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;'s within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , you should instead change the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; line to do something like:</source>
          <target state="translated">結果は予想したものとは異なります。警告は生成されません。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; ロケールの範囲内で文字列 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; を実行する場合は、代わりに次のように &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 行を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="5826e275e51e2f92c417012d26e57183b67ddebf" translate="yes" xml:space="preserve">
          <source>and the second as</source>
          <target state="translated">として、2つ目は</target>
        </trans-unit>
        <trans-unit id="4b0c54cf5e55bcce5334c4fb8936e4b45df4be44" translate="yes" xml:space="preserve">
          <source>and the variable is only assigned if the condition is false. In Perl, you need parentheses:</source>
          <target state="translated">で、条件が false の場合にのみ変数が代入されます。Perlでは括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="b195225fa7acc0b96c9d796bff6aa32f9bf25de1" translate="yes" xml:space="preserve">
          <source>and their source code:</source>
          <target state="translated">とそのソースコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="a357a0b3b6bb01e41a042b584904f6b12375f3f1" translate="yes" xml:space="preserve">
          <source>and then</source>
          <target state="translated">而して</target>
        </trans-unit>
        <trans-unit id="a89a3626b8565f1e4fe93595aa23beb07a814bdf" translate="yes" xml:space="preserve">
          <source>and then &lt;code&gt;make install&lt;/code&gt; directly in the subshell.</source>
          <target state="translated">そして、サブシェルに直接 &lt;code&gt;make install&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="c057b91530af5ff3d52f001fe2897560766773fd" translate="yes" xml:space="preserve">
          <source>and then I can use it as:</source>
          <target state="translated">として使うことができます。</target>
        </trans-unit>
        <trans-unit id="7ee1c36bc806d74c955b8deeab5a71a91290b0b4" translate="yes" xml:space="preserve">
          <source>and then at the end add a subroutine (which will override the pre-existing subroutine). Remember to use a tab character to indent the line beginning with &quot;cd&quot;!</source>
          <target state="translated">を追加し、最後にサブルーチンを追加します(既存のサブルーチンを上書きします)。cd &quot;で始まる行をタブ文字でインデントすることを忘れないでください!</target>
        </trans-unit>
        <trans-unit id="ab0d506f35fd3822d193cc9360b63e031c3942f4" translate="yes" xml:space="preserve">
          <source>and then calls the compiled value, and returns that. (I.e., if $key looks like bracket notation, $compiled is a sub, and we return &amp;amp;{$compiled}(@params); but if $key is just a plain string, we just return that.)</source>
          <target state="translated">そして、コンパイルされた値を呼び出し、それを返します。（つまり、$ keyがブラケット表記のように見える場合、$ compiledはサブルーチンであり、＆{$ compiled}（@ params）;を返しますが、$ keyが単なる文字列の場合は、それを返します。）</target>
        </trans-unit>
        <trans-unit id="44a3152294c4111f2c746a317f7528eba26af20d" translate="yes" xml:space="preserve">
          <source>and then compile Perl. The places where fchdir() is used have alternatives for systems that do not have fchdir() available.</source>
          <target state="translated">を実行してから Perl をコンパイルしてください。fchdir()が使われている場所には、fchdir()が利用できないシステムのための代替手段があります。</target>
        </trans-unit>
        <trans-unit id="9b2df89c641d69f45a815efca5beef7560ca9a0a" translate="yes" xml:space="preserve">
          <source>and then just answer client requests for language $wanted by just looking up</source>
          <target state="translated">を検索するだけで、クライアントからの $wanted 言語のリクエストに答えることができます。</target>
        </trans-unit>
        <trans-unit id="8b1640f57029d1835984f3af20d2191014b99ddf" translate="yes" xml:space="preserve">
          <source>and then only hard references will be allowed for the rest of the enclosing block. An inner block may countermand that with</source>
          <target state="translated">を使用して、それ以外の囲い込みブロックではハード参照のみが許可されます。内側のブロックは</target>
        </trans-unit>
        <trans-unit id="451e30567469e8b460f1d3bc5414c41a6638cddf" translate="yes" xml:space="preserve">
          <source>and then re-compiling and installing. (&lt;code&gt;%Config&lt;/code&gt; is available from the Config module).</source>
          <target state="translated">その後、再コンパイルしてインストールします。（ &lt;code&gt;%Config&lt;/code&gt; はConfigモジュールから入手できます）。</target>
        </trans-unit>
        <trans-unit id="a0240abc49e91dec760c37658ba9b71575aed0e0" translate="yes" xml:space="preserve">
          <source>and then restart the debugger using the &lt;code&gt;R&lt;/code&gt; command (if possible). One can use &lt;code&gt;b
compile subname&lt;/code&gt; for the same purpose.</source>
          <target state="translated">次に、 &lt;code&gt;R&lt;/code&gt; コマンドを使用してデバッガーを再起動します（可能な場合）。同じ目的で &lt;code&gt;b compile subname&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="dbf31119ed47c5f8b69e18f4d5f705e1c96574bd" translate="yes" xml:space="preserve">
          <source>and then there's</source>
          <target state="translated">而して</target>
        </trans-unit>
        <trans-unit id="353ea5311f06d213fb4274ba5a999ecceb56a41b" translate="yes" xml:space="preserve">
          <source>and then use pax.</source>
          <target state="translated">と言ってパックスを使います。</target>
        </trans-unit>
        <trans-unit id="48126773317a746d38788a830d1f700877f824cc" translate="yes" xml:space="preserve">
          <source>and there are currently 32 types. These different structures contain pointers to various routines that perform additional actions depending on which function is being called.</source>
          <target state="translated">であり、現在32種類の型があります。これらの異なる構造体には、呼び出された関数に応じて追加のアクションを実行する様々なルーチンへのポインタが含まれています。</target>
        </trans-unit>
        <trans-unit id="125d179aee3f08c5f3f28753f2a610fce93912ec" translate="yes" xml:space="preserve">
          <source>and these</source>
          <target state="translated">そしてこれら</target>
        </trans-unit>
        <trans-unit id="e1493a3f0807b6f38cd28b6afc4496c286e444bc" translate="yes" xml:space="preserve">
          <source>and these conditions now hold; changes in caps:</source>
          <target state="translated">そして、これらの条件は現在も維持されています。</target>
        </trans-unit>
        <trans-unit id="634f4431e19540e83429c99c727415ca241cf810" translate="yes" xml:space="preserve">
          <source>and they need renamed to this</source>
          <target state="translated">そして、彼らはこれに名前を変更する必要があります</target>
        </trans-unit>
        <trans-unit id="c08d7693095dbd2bcba2f2bba00e5c933e696272" translate="yes" xml:space="preserve">
          <source>and things will Just Work.</source>
          <target state="translated">と、物事はジャスト・ワークになります。</target>
        </trans-unit>
        <trans-unit id="13d6234dafca22c495f68d2e93ffa91530cf4576" translate="yes" xml:space="preserve">
          <source>and this all reduces to one string internally. Likewise, if you say</source>
          <target state="translated">となり、これはすべて内部的には一つの文字列に還元されます。同様に</target>
        </trans-unit>
        <trans-unit id="54d316122df54908b330dbe67e0eb1a7496b2e8d" translate="yes" xml:space="preserve">
          <source>and this is the C function</source>
          <target state="translated">であり、これがC関数</target>
        </trans-unit>
        <trans-unit id="b0b7cef2e136b9167abea8c18920b79278779cc6" translate="yes" xml:space="preserve">
          <source>and this is the equivalent skeleton for the</source>
          <target state="translated">の等価スケルトンであり、これは</target>
        </trans-unit>
        <trans-unit id="6eebd24f36d63aecef99cba57072fffe82f277ba" translate="yes" xml:space="preserve">
          <source>and this is what it outputs:</source>
          <target state="translated">で、これが出力されます。</target>
        </trans-unit>
        <trans-unit id="fd12e4da86b9aadfbb2734c8e5f1bee5da3b93ce" translate="yes" xml:space="preserve">
          <source>and this to write compress files, if you have the &lt;code&gt;compress&lt;/code&gt; program available</source>
          <target state="translated">&lt;code&gt;compress&lt;/code&gt; プログラムを使用できる場合は、これで圧縮ファイルを書き込みます</target>
        </trans-unit>
        <trans-unit id="e2c2bf67a7935e18e359ad79d84198585a4af3bd" translate="yes" xml:space="preserve">
          <source>and this with &lt;code&gt;gunzip&lt;/code&gt;</source>
          <target state="translated">そしてこれは &lt;code&gt;gunzip&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="d39dfbea4e5b4447637693f64c38ebc1f8116f81" translate="yes" xml:space="preserve">
          <source>and thus the North American servers happen to be listed between the European and the South American sites.</source>
          <target state="translated">このように、北米のサーバーは、ヨーロッパと南米のサイトの間にリストされています。</target>
        </trans-unit>
        <trans-unit id="cb400c328bbed62df7bf2a79424df0971a9b0060" translate="yes" xml:space="preserve">
          <source>and to convert it back:</source>
          <target state="translated">と変換して戻すことができます。</target>
        </trans-unit>
        <trans-unit id="389eab738d2c24825aaf583e6d4e7e90f7197558" translate="yes" xml:space="preserve">
          <source>and to make a subroutine visible to other packages in the same scope:</source>
          <target state="translated">と、同じスコープ内の他のパッケージからサブルーチンを見えるようにするためのものです。</target>
        </trans-unit>
        <trans-unit id="217975290eb70597845ac22d0c9eaec6ba4f2b06" translate="yes" xml:space="preserve">
          <source>and to pop the return value out. Take a deep breath...</source>
          <target state="translated">と、戻り値をポップアウトしてみましょう。深呼吸して...</target>
        </trans-unit>
        <trans-unit id="f2f253ad479c1e47993bd311d49420fc3740b03a" translate="yes" xml:space="preserve">
          <source>and to prevent the filter's being turned off in any way:</source>
          <target state="translated">と、フィルターが何らかの方法でオフになるのを防ぐために。</target>
        </trans-unit>
        <trans-unit id="f457722dbced2bf2ae91cbfea945e31146a31b39" translate="yes" xml:space="preserve">
          <source>and to set CCHOME, CCINCDIR and CCLIBDIR as per the environment setup above.</source>
          <target state="translated">を設定し、上記の環境設定通りにCCHOME、CCINCDIR、CCLIBDIRを設定します。</target>
        </trans-unit>
        <trans-unit id="d2fe6dcb8f246d2fce35f742575fa001821e5680" translate="yes" xml:space="preserve">
          <source>and tries again, since it's customary to have file types on all files under VMS.</source>
          <target state="translated">と再度試してみると、VMSの下ではすべてのファイルにファイルタイプがあるのが通例なので。</target>
        </trans-unit>
        <trans-unit id="3b1648c7e0ac8e95616dae97bc077625fd8d6af2" translate="yes" xml:space="preserve">
          <source>and uncomment the relevant variables near the end of the file.</source>
          <target state="translated">で、ファイルの最後近くにある関連する変数をアンコメントしてください。</target>
        </trans-unit>
        <trans-unit id="cfcf943d2393a6f28d49e0ffac0815fd27da0bf6" translate="yes" xml:space="preserve">
          <source>and uncomment the struct.</source>
          <target state="translated">で、struct のコメントを外します。</target>
        </trans-unit>
        <trans-unit id="9e6562a3babb41524cb81f0cde70dfef28222be8" translate="yes" xml:space="preserve">
          <source>and under Win32, the approximately equivalent:</source>
          <target state="translated">とWin32の下では、ほぼ同等です。</target>
        </trans-unit>
        <trans-unit id="46d5ca958aec010c55ad2c03e5821dac149faf98" translate="yes" xml:space="preserve">
          <source>and use the &lt;code&gt;TIOCNOTTY&lt;/code&gt; ioctl() on it instead. See tty(4) for details.</source>
          <target state="translated">代わりに &lt;code&gt;TIOCNOTTY&lt;/code&gt; ioctl（）を使用してください。詳細については、tty（4）を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f14a6780c851ae104f1481fc1a9906cf9782249" translate="yes" xml:space="preserve">
          <source>and wait:</source>
          <target state="translated">と待ってください。</target>
        </trans-unit>
        <trans-unit id="69c07c00f94d0c5b0709bf9c6938ba419bdf55e3" translate="yes" xml:space="preserve">
          <source>and when compiling the POSIX extension</source>
          <target state="translated">とPOSIX拡張をコンパイルする際に</target>
        </trans-unit>
        <trans-unit id="6ee8bc7f7f274956ec858de1f58858d8da87dae0" translate="yes" xml:space="preserve">
          <source>and will work on any list:</source>
          <target state="translated">と、どのようなリストでも動作します。</target>
        </trans-unit>
        <trans-unit id="56f643ea045d7d28116e861b4f87f762cdd48385" translate="yes" xml:space="preserve">
          <source>and you are attempting to remove an ancestor, such as</source>
          <target state="translated">のように、先祖を削除しようとしている場合は</target>
        </trans-unit>
        <trans-unit id="675d70b7c962e8ca4b793a761fbb9992623d3828" translate="yes" xml:space="preserve">
          <source>and you can create well-formed Unicode with</source>
          <target state="translated">で整形した Unicode を作成することができます。</target>
        </trans-unit>
        <trans-unit id="9c639a2ec15edc09ca8e02e951acf39319cc8f44" translate="yes" xml:space="preserve">
          <source>and you want to Export symbol &lt;code&gt;$A::b&lt;/code&gt; back to the module that called package A. Since Exporter relies on the import method to work, via inheritance, as it stands Exporter::import() will never get called. Instead, say the following:</source>
          <target state="translated">シンボル &lt;code&gt;$A::b&lt;/code&gt; をエクスポートしてパッケージAを呼び出したモジュールに戻したいとします。Exporter:: import（）が呼び出されることはないので、Exporterは継承を介してimportメソッドに依存しているため、機能します。代わりに、次のように言ってください。</target>
        </trans-unit>
        <trans-unit id="622cd26503fac9383fb718bed2b3ddba040f7083" translate="yes" xml:space="preserve">
          <source>and you want to produce an output like this, with each country mentioned once, and then an alphabetical list of the cities in that country:</source>
          <target state="translated">で、このような出力を作成したい場合は、それぞれの国が一度だけ言及され、その国の都市のアルファベット順のリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="4c1468c599d605484919b48473553ef4293085c5" translate="yes" xml:space="preserve">
          <source>and you're done.</source>
          <target state="translated">と言って終わりです。</target>
        </trans-unit>
        <trans-unit id="b0adec687e3ab4fff14b5efa8b7087cfcfe80d04" translate="yes" xml:space="preserve">
          <source>and/or</source>
          <target state="translated">and/or</target>
        </trans-unit>
        <trans-unit id="9f29ab58f3ce583beed68be5f3bf29542855d9de" translate="yes" xml:space="preserve">
          <source>angles being equal to</source>
          <target state="translated">拮抗</target>
        </trans-unit>
        <trans-unit id="03f6df04819f61a4ed7725f72fc3f5557572193e" translate="yes" xml:space="preserve">
          <source>angles.</source>
          <target state="translated">angles.</target>
        </trans-unit>
        <trans-unit id="0a92fab3230134cca6eadd9898325b9b2ae67998" translate="yes" xml:space="preserve">
          <source>anonymous</source>
          <target state="translated">anonymous</target>
        </trans-unit>
        <trans-unit id="f3939ccfbbc78c50725aff277833f2cbdd31e9da" translate="yes" xml:space="preserve">
          <source>anonymous subroutine.)</source>
          <target state="translated">匿名サブルーチン)</target>
        </trans-unit>
        <trans-unit id="14ccf9a789edbcad8533f0e8977c70173ff9dfa6" translate="yes" xml:space="preserve">
          <source>anonymous@</source>
          <target state="translated">anonymous@</target>
        </trans-unit>
        <trans-unit id="b7c8ffb8fbc67c171328e0e8f643694e8e61b335" translate="yes" xml:space="preserve">
          <source>another</source>
          <target state="translated">another</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
