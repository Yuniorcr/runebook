<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="0e07d4919d304923f37fe1dc7b33e0707c964ce0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;s&lt;/code&gt; does not point to a well-formed UTF-8 character and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) to -1. If those warnings are off, the computed value if well-defined (or the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt;) is the next possible position in &lt;code&gt;s&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;perlapi#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot; in perlapi&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">場合は &lt;code&gt;s&lt;/code&gt; が有効になっている整形UTF8文字とUTF8の警告を指していない、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されて &lt;code&gt;retlen&lt;/code&gt; が-1 NULLではありません）。これらの警告がオフの場合、計算値は、明確に定義されている場合（またはUnicode置換文字は、そうでない場合は）静かに返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されている &lt;code&gt;retlen&lt;/code&gt; になるよう（NULLでない） &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）であります不正な形式ではない文字を開始する可能性 &lt;code&gt;s&lt;/code&gt; あるs内の次の可能な位置。参照&lt;a href=&quot;perlapi#utf8n_to_uvchr&quot;&gt;はperlapiで「utf8n_to_uvchr」&lt;/a&gt;置換文字が返されたときの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="344a52db4b11baa26a523460842709ff1b386ede" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;s&lt;/code&gt; points to one of the detected malformations, and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; doesn't point to NULL) to -1. If those warnings are off, the computed value if well-defined (or the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt;) is the next possible position in &lt;code&gt;s&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;perlapi#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot; in perlapi&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">もし &lt;code&gt;s&lt;/code&gt; 検出された奇形のいずれかを指し、UTF8警告は、有効になっているゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; が（あれば設定されている &lt;code&gt;retlen&lt;/code&gt; が-1 NULLをポイントしません）。これらの警告がオフの場合、計算値は、明確に定義されている場合（またはUnicode置換文字は、そうでない場合は）静かに返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されている &lt;code&gt;retlen&lt;/code&gt; になるよう（NULLでない） &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）であります不正な形式ではない文字を開始する可能性 &lt;code&gt;s&lt;/code&gt; あるs内の次の可能な位置。参照&lt;a href=&quot;perlapi#utf8n_to_uvchr&quot;&gt;はperlapiで「utf8n_to_uvchr」&lt;/a&gt;置換文字が返されたときの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="8ee7a15600127f4d0959a8f8bcd7fe929dc1bb55" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;s&lt;/code&gt; points to one of the detected malformations, and UTF8 warnings are enabled, zero is returned and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't &lt;code&gt;NULL&lt;/code&gt;) to -1. If those warnings are off, the computed value if well-defined (or the Unicode REPLACEMENT CHARACTER, if not) is silently returned, and &lt;code&gt;*retlen&lt;/code&gt; is set (if &lt;code&gt;retlen&lt;/code&gt; isn't NULL) so that (&lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt;) is the next possible position in &lt;code&gt;s&lt;/code&gt; that could begin a non-malformed character. See &lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;&quot;utf8n_to_uvchr&quot;&lt;/a&gt; for details on when the REPLACEMENT CHARACTER is returned.</source>
          <target state="translated">もし &lt;code&gt;s&lt;/code&gt; 検出奇形、およびUTF8の警告のいずれかの点が有効にされ、ゼロが返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されている &lt;code&gt;retlen&lt;/code&gt; がない &lt;code&gt;NULL&lt;/code&gt; ）-1。これらの警告がオフの場合、計算値は、明確に定義されている場合（またはUnicode置換文字は、そうでない場合は）静かに返され、 &lt;code&gt;*retlen&lt;/code&gt; は（場合に設定されている &lt;code&gt;retlen&lt;/code&gt; になるよう（NULLでない） &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;*retlen&lt;/code&gt; ）であります不正な形式ではない文字を開始する可能性 &lt;code&gt;s&lt;/code&gt; あるs内の次の可能な位置。参照&lt;a href=&quot;#utf8n_to_uvchr&quot;&gt;「utf8n_to_uvchr」&lt;/a&gt;置換文字が返されたときの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="ba0fe2f6810522d3880f034d6ed2e0c1aaeec082" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;set_locale()&lt;/code&gt; fails for some reason (for example, an attempt to set to a locale unknown to the system), the locale for the category is not changed, and the function returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set_locale()&lt;/code&gt; が何らかの理由（たとえば、システムに不明なロケールに設定しようとしたなど）で失敗した場合、カテゴリのロケールは変更されず、関数は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="00fbad40868135a15b1b3119d64c803fbf76e3ec" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;setlocale()&lt;/code&gt; fails for some reason (for example, an attempt to set to a locale unknown to the system), the locale for the category is not changed, and the function returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setlocale()&lt;/code&gt; が何らかの理由で失敗した場合（たとえば、システムに不明なロケールに設定しようとした場合）、カテゴリのロケールは変更されず、関数は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7def84ba14c7da181889f798540180404e1bc96d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;setmagic&lt;/code&gt; is false then no set magic will be called on the new (empty) SV. This typically means that assignment will soon follow (e.g. &lt;code&gt;'local $x = $y'&lt;/code&gt;), and that will handle the magic.</source>
          <target state="translated">&lt;code&gt;setmagic&lt;/code&gt; がfalseの場合、新しい（空の）SVでsetmagicは呼び出されません。これは通常、割り当てがすぐに続くことを意味し（たとえば、 &lt;code&gt;'local $x = $y'&lt;/code&gt; ）、それが魔法を処理します。</target>
        </trans-unit>
        <trans-unit id="6f1f3673ad86da277d3ff5d2cf4aee1d0694c871" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;split&lt;/code&gt; is invoked as &lt;code&gt;split ' '&lt;/code&gt; or with no arguments (which really means &lt;code&gt;split(' ', $_)&lt;/code&gt;, see &lt;a href=&quot;perlfunc#split&quot;&gt;split&lt;/a&gt;), Perl will set this flag. The regex engine can then check for it and set the SKIPWHITE and WHITE extflags. To do this, the Perl engine does:</source>
          <target state="translated">&lt;code&gt;split&lt;/code&gt; が &lt;code&gt;split ' '&lt;/code&gt; として呼び出された場合、または引数なしで呼び出された場合（つまり、 &lt;code&gt;split(' ', $_)&lt;/code&gt; 、&lt;a href=&quot;perlfunc#split&quot;&gt;splitを&lt;/a&gt;参照）、Perlはこのフラグを設定します。次に、正規表現エンジンはそれをチェックし、SKIPWHITEおよびWHITEextflagsを設定できます。これを行うために、Perlエンジンは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="6d3fb59ce22521f54bad3dad454399653c576366" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start_color&lt;/code&gt; is non-null then it will be inserted after the opening quote (if there is one) but before the escaped text. If &lt;code&gt;end_color&lt;/code&gt; is non-null then it will be inserted after the escaped text but before any quotes or ellipses.</source>
          <target state="translated">&lt;code&gt;start_color&lt;/code&gt; がnull以外の場合、開始引用符（存在する場合）の後、エスケープされたテキストの前に挿入されます。 &lt;code&gt;end_color&lt;/code&gt; がnull以外の場合、エスケープされたテキストの後、引用符または省略記号の前に挿入されます。</target>
        </trans-unit>
        <trans-unit id="f49431f91057c4dbcea93169afee875e80cb6ef1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sv&lt;/code&gt; already is UTF-8 (or if it is not &lt;code&gt;POK&lt;/code&gt;), or if &lt;code&gt;encoding&lt;/code&gt; is not a reference, nothing is done to &lt;code&gt;sv&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not an &lt;code&gt;Encode::XS&lt;/code&gt; Encoding object, bad things will happen. (See</source>
          <target state="translated">場合 &lt;code&gt;sv&lt;/code&gt; すでにUTF-8である（またはそうでない場合 &lt;code&gt;POK&lt;/code&gt; ）、または場合 &lt;code&gt;encoding&lt;/code&gt; リファレンスではない、何もに行われない &lt;code&gt;sv&lt;/code&gt; 。場合 &lt;code&gt;encoding&lt;/code&gt; ない &lt;code&gt;Encode::XS&lt;/code&gt; エンコーディングオブジェクト、悪い事が起こります。（見る</target>
        </trans-unit>
        <trans-unit id="04ffb889ba3672c819c8ebc2556d3ca7f2216415" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sv&lt;/code&gt; is not already magical, Perl uses the &lt;code&gt;SvUPGRADE&lt;/code&gt; macro to convert &lt;code&gt;sv&lt;/code&gt; to type &lt;code&gt;SVt_PVMG&lt;/code&gt; . Perl then continues by adding new magic to the beginning of the linked list of magical features. Any prior entry of the same type of magic is deleted. Note that this can be overridden, and multiple instances of the same type of magic can be associated with an SV.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; がまだ魔法でない場合、Perlは &lt;code&gt;SvUPGRADE&lt;/code&gt; マクロを使用して &lt;code&gt;sv&lt;/code&gt; を &lt;code&gt;SVt_PVMG&lt;/code&gt; 型に変換します。次にPerlは、魔法の機能のリンクされたリストの先頭に新しい魔法を追加します。同じ種類のマジックの以前のエントリは削除されます。これは上書き可能であり、同じタイプのマジックの複数のインスタンスをSVに関連付けることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4ab681f247e800a443c2ee4cb6d285861bd3cf7e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sv&lt;/code&gt; is not already magical, Perl uses the &lt;code&gt;SvUPGRADE&lt;/code&gt; macro to convert &lt;code&gt;sv&lt;/code&gt; to type &lt;code&gt;SVt_PVMG&lt;/code&gt;. Perl then continues by adding new magic to the beginning of the linked list of magical features. Any prior entry of the same type of magic is deleted. Note that this can be overridden, and multiple instances of the same type of magic can be associated with an SV.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; がまだ魔法ではない場合、Perlは &lt;code&gt;SvUPGRADE&lt;/code&gt; マクロを使用して &lt;code&gt;sv&lt;/code&gt; をタイプ &lt;code&gt;SVt_PVMG&lt;/code&gt; に変換します。次に、Perlは、魔法の機能のリンクリストの先頭に新しい魔法を追加することによって続行します。同じタイプの魔法の以前のエントリはすべて削除されます。これはオーバーライドでき、同じタイプの魔法の複数のインスタンスをSVに関連付けることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dbc4779d92424b9ed1e872ef029dc61c2a85f827" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sv&lt;/code&gt; is the target of a weak reference then it returns the back references structure associated with the sv; otherwise return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; が弱参照のターゲットである場合、svに関連付けられた後方参照構造を返します。それ以外の場合は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6f965fbaf23253043bd3c46cbaac3045ccac1cd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;system&lt;/code&gt; is specified as an argument to &lt;code&gt;autodie&lt;/code&gt;, then it uses &lt;a href=&quot;IPC::System::Simple&quot;&gt;IPC::System::Simple&lt;/a&gt; to do the heavy lifting. See the description of that module for more information.</source>
          <target state="translated">&lt;code&gt;autodie&lt;/code&gt; の引数として &lt;code&gt;system&lt;/code&gt; が指定されている場合は、&lt;a href=&quot;IPC::System::Simple&quot;&gt;IPC :: System :: Simple&lt;/a&gt;を使用して手間のかかる作業を行います。詳細については、そのモジュールの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="e0b89db42e4e190758019494213d834ead62fc5b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;tgtsv&lt;/code&gt; is non-null then the string will be written into that SV (overwriting existing content) and it will be returned. If &lt;code&gt;tgtsv&lt;/code&gt; is a null pointer then the string will be written into a new mortal SV which will be returned.</source>
          <target state="translated">&lt;code&gt;tgtsv&lt;/code&gt; がnull以外の場合、文字列はそのSVに書き込まれ（既存のコンテンツを上書き）、返されます。場合 &lt;code&gt;tgtsv&lt;/code&gt; がNULLポインタである、文字列が返される新しい死すSVに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="c5c3008df77cfa39eeaefce991da14fbe22117ea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;u1&lt;/code&gt; is true, the string &lt;code&gt;s1&lt;/code&gt; is assumed to be in UTF-8-encoded Unicode; otherwise it is assumed to be in native 8-bit encoding. Correspondingly for &lt;code&gt;u2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt; .</source>
          <target state="translated">場合 &lt;code&gt;u1&lt;/code&gt; 真である、文字列 &lt;code&gt;s1&lt;/code&gt; が UTF-8でエンコードされたUnicodeであると仮定されます。それ以外の場合は、ネイティブの8ビットエンコーディングであると見なされます。 &lt;code&gt;s2&lt;/code&gt; に関して &lt;code&gt;u2&lt;/code&gt; に対応して。</target>
        </trans-unit>
        <trans-unit id="f5369cdc9e4df17df0fab9c265cc2a668b2d5adb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;u1&lt;/code&gt; is true, the string &lt;code&gt;s1&lt;/code&gt; is assumed to be in UTF-8-encoded Unicode; otherwise it is assumed to be in native 8-bit encoding. Correspondingly for &lt;code&gt;u2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;u1&lt;/code&gt; 真である、文字列 &lt;code&gt;s1&lt;/code&gt; がUTF-8でエンコードされたUnicodeであると仮定されます。それ以外の場合は、ネイティブの8ビットエンコーディングであると見なされます。 &lt;code&gt;s2&lt;/code&gt; に関して &lt;code&gt;u2&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="ff7ae9da7000e2b33b5ec7b9b74b0d3b4543ad4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;undef&lt;/code&gt; (not a string &lt;code&gt;&quot;undef&quot;&lt;/code&gt;) is passed explicitly as the value for this key, any normalization is not carried out (this may make tailoring easier if any normalization is not desired). Under &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt;, only contiguous contractions are resolved; e.g. even if &lt;code&gt;A-ring&lt;/code&gt; (and &lt;code&gt;A-ring-cedilla&lt;/code&gt;) is ordered after &lt;code&gt;Z&lt;/code&gt;, &lt;code&gt;A-cedilla-ring&lt;/code&gt; would be primary equal to &lt;code&gt;A&lt;/code&gt;. In this point, &lt;code&gt;(normalization =&amp;gt; undef, preprocess =&amp;gt; sub { NFD(shift) })&lt;/code&gt;&lt;b&gt;is not&lt;/b&gt; equivalent to &lt;code&gt;(normalization =&amp;gt; 'NFD')&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;undef&lt;/code&gt; （文字列ではありません &lt;code&gt;&quot;undef&quot;&lt;/code&gt; ）は、このキーの値として明示的に渡され、任意の正規化は、（任意の正規化が望まれていない場合、これは簡単に仕立てにすること）が行われていません。下 &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt; 、唯一の連続収縮が解決されます。場合でも、例えば、 &lt;code&gt;A-ring&lt;/code&gt; （及び &lt;code&gt;A-ring-cedilla&lt;/code&gt; ）後に順序付けられている &lt;code&gt;Z&lt;/code&gt; は、 &lt;code&gt;A-cedilla-ring&lt;/code&gt; 等しい一次であろう &lt;code&gt;A&lt;/code&gt; 。この点で、 &lt;code&gt;(normalization =&amp;gt; undef, preprocess =&amp;gt; sub { NFD(shift) })&lt;/code&gt; &lt;b&gt;は&lt;/b&gt; &lt;code&gt;(normalization =&amp;gt; 'NFD')&lt;/code&gt; と同等で&lt;b&gt;はありません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="1772452ed00715f0d1bcb6cc8461b97a45b8aa33" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;undef&lt;/code&gt; is passed explicitly as the value for this key, no file is read (but you can define collation elements via &lt;code&gt;entry&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;undef&lt;/code&gt; このキーの値として明示的に渡され、何のファイルが読み込まれません（ただし、経由で照合要素を定義することができ &lt;code&gt;entry&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1540dc791175456aa90cb4fef436e0dad501ecf8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;undef&lt;/code&gt; is passed explicitly as the value for this key, weight for Hangul syllables is treated as undefined without decomposition into Hangul Jamo. But definition of weight for Hangul syllables in &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; is still valid.</source>
          <target state="translated">場合 &lt;code&gt;undef&lt;/code&gt; このキーの値として明示的に渡され、ハングル音節の重みは、ハングルの字母に分解することなく、未定義として扱われます。ただし、 &lt;code&gt;table&lt;/code&gt; または &lt;code&gt;entry&lt;/code&gt; ハングル音節の重みの定義は引き続き有効です。</target>
        </trans-unit>
        <trans-unit id="87a9ff2f9d0e73da828c40d03f80e90b35d67f88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;use Devel::Peek&lt;/code&gt; directive has a &lt;code&gt;:opd=FLAGS&lt;/code&gt; argument, this switches on debugging of opcode dispatch. &lt;code&gt;FLAGS&lt;/code&gt; should be a combination of &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, and &lt;code&gt;P&lt;/code&gt; (see &lt;a href=&quot;perlrun#-Dletters&quot;&gt;&lt;b&gt;-D&lt;/b&gt; flags in perlrun&lt;/a&gt;).</source>
          <target state="translated">場合は &lt;code&gt;use Devel::Peek&lt;/code&gt; ディレクティブがあり &lt;code&gt;:opd=FLAGS&lt;/code&gt; 引数を、これはオペコード派遣のデバッグに切り替わります。 &lt;code&gt;FLAGS&lt;/code&gt; は、 &lt;code&gt;s&lt;/code&gt; 、 &lt;code&gt;t&lt;/code&gt; 、および &lt;code&gt;P&lt;/code&gt; の組み合わせである必要があります（&lt;a href=&quot;perlrun#-Dletters&quot;&gt;perlrunの&lt;/a&gt;&lt;b&gt;-D&lt;/b&gt;フラグを参照）。</target>
        </trans-unit>
        <trans-unit id="8e67b351362fc2288e4d85d1df0a7cb4397d6517" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;use bytes&lt;/code&gt; is in effect:</source>
          <target state="translated">&lt;code&gt;use bytes&lt;/code&gt; が有効な場合：</target>
        </trans-unit>
        <trans-unit id="b63d1c4b73014a212e1adcb7458310fbabfcada8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;use integer&lt;/code&gt; (see &lt;a href=&quot;#Integer-Arithmetic&quot;&gt;&quot;Integer Arithmetic&quot;&lt;/a&gt;) is in force then signed C integers are used (</source>
          <target state="translated">場合 &lt;code&gt;use integer&lt;/code&gt; （参照&lt;a href=&quot;#Integer-Arithmetic&quot;&gt;「整数算術」&lt;/a&gt;）力である、次に署名されたC整数が使用されます（</target>
        </trans-unit>
        <trans-unit id="055cb8f0eb7094e6bf1d58d9d0a382f3cec04e19" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;utf8&lt;/code&gt; is disabled, then the result is also correctly encoded in those character sets (as both are proper subsets of Unicode, meaning that a Unicode string with all character values &amp;lt; 256 is the same thing as a ISO-8859-1 string, and a Unicode string with all character values &amp;lt; 128 is the same thing as an ASCII string in Perl).</source>
          <target state="translated">場合は &lt;code&gt;utf8&lt;/code&gt; 無効になっている、そして結果も正しく、両方のは、Unicodeの適切なサブセットであるように、すべての文字の値を持つUnicode文字列&amp;lt;256は、ISO-8859-1文字列と同じものであることを意味し、（それらの文字セットでエンコードされており、すべての文字値が128未満のUnicode文字列は、PerlのASCII文字列と同じです）。</target>
        </trans-unit>
        <trans-unit id="91b6b629aef61b3ce3a48a95ca6e7795616126f3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;utf8&lt;/code&gt; is enabled, you still get a correct UTF-8-encoded string, regardless of these flags, just some more characters will be escaped using &lt;code&gt;\uXXXX&lt;/code&gt; then before.</source>
          <target state="translated">場合は &lt;code&gt;utf8&lt;/code&gt; 有効になっている、あなたはまだ正しいUTF-8でエンコードされた文字列を取得し、関係なく、これらのフラグの、ちょうどいくつかのより多くの文字が使用してエスケープされます &lt;code&gt;\uXXXX&lt;/code&gt; 前に、その後。</target>
        </trans-unit>
        <trans-unit id="ac03d59f846f562239a0cc40bb258a33efc729e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;uv&lt;/code&gt; is a Unicode surrogate code point and &lt;code&gt;UNICODE_WARN_SURROGATE&lt;/code&gt; is set, the function will raise a warning, provided UTF8 warnings are enabled. If instead &lt;code&gt;UNICODE_DISALLOW_SURROGATE&lt;/code&gt; is set, the function will fail and return NULL. If both flags are set, the function will both warn and return NULL.</source>
          <target state="translated">場合は &lt;code&gt;uv&lt;/code&gt; Unicodeのサロゲートコードポイントであると &lt;code&gt;UNICODE_WARN_SURROGATE&lt;/code&gt; がセットされ、機能がUTF8の警告が有効になっている提供、警告を発生させます。代わりに &lt;code&gt;UNICODE_DISALLOW_SURROGATE&lt;/code&gt; が設定されている場合、関数は失敗し、NULLを返します。両方のフラグが設定されている場合、関数は警告とNULLの両方を返します。</target>
        </trans-unit>
        <trans-unit id="fcb599464a46f537e87d3017df24f3e8e2283ffd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;uv&lt;/code&gt; is a Unicode surrogate code point and UNICODE_WARN_SURROGATE is set, the function will raise a warning, provided UTF8 warnings are enabled. If instead UNICODE_DISALLOW_SURROGATE is set, the function will fail and return NULL. If both flags are set, the function will both warn and return NULL.</source>
          <target state="translated">場合は &lt;code&gt;uv&lt;/code&gt; UnicodeのサロゲートコードポイントであるとUNICODE_WARN_SURROGATEが設定され、機能がUTF8の警告が有効になっている提供、警告を発生させます。代わりにUNICODE_DISALLOW_SURROGATEが設定されている場合、関数は失敗し、NULLを返します。両方のフラグが設定されている場合、関数は警告とNULLの両方を返します。</target>
        </trans-unit>
        <trans-unit id="0c44318124964ccd942d87918bc5a4d0e5a866fa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;val&lt;/code&gt; is true, do not print any errors/warnings.</source>
          <target state="translated">場合 &lt;code&gt;val&lt;/code&gt; が真である、任意のエラー/警告を表示しません。</target>
        </trans-unit>
        <trans-unit id="ae30129230a55488ef814c14253472811e67904d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;value&lt;/code&gt; in</source>
          <target state="translated">もし &lt;code&gt;value&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="02c3454635e56b23178636e2bb6aec32fcd96776" translate="yes" xml:space="preserve">
          <source>If @DynaLoader::dl_resolve_using contains &lt;code&gt;-L*&lt;/code&gt; or &lt;code&gt;-l*&lt;/code&gt; entries then Mkbootstrap will automatically add a dl_findfile() call to the generated &lt;code&gt;*.bs&lt;/code&gt; file.</source>
          <target state="translated">@DynaLoader :: dl_resolve_usingに &lt;code&gt;-L*&lt;/code&gt; または &lt;code&gt;-l*&lt;/code&gt; エントリーが含まれている場合、Mkbootstrapは自動的にdl_findfile（）呼び出しを生成された &lt;code&gt;*.bs&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="203a87ac5779da1d943be09c716f0304a892b601" translate="yes" xml:space="preserve">
          <source>If @args is not given, an empty list will be used.</source>
          <target state="translated">argsが指定されていない場合は、空のリストが使用されます。</target>
        </trans-unit>
        <trans-unit id="f3523d8b4dddaad91344458f88af994bb31e6c10" translate="yes" xml:space="preserve">
          <source>If @imports are given, they are passed through to the use. So this:</source>
          <target state="translated">importsが与えられている場合は、それを使用するために渡されます。なので、これは</target>
        </trans-unit>
        <trans-unit id="649b9ffd5b70f81915b08f4bc8291a1a2ce523f9" translate="yes" xml:space="preserve">
          <source>If @suffixes are given each element is a pattern (either a string or a &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;) matched against the end of the $filename. The matching portion is removed and becomes the $suffix.</source>
          <target state="translated">@suffixesが指定されている場合、各要素は$ filenameの末尾と照合されるパターン（文字列または &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; いずれか）です。一致する部分が削除され、$サフィックスになります。</target>
        </trans-unit>
        <trans-unit id="352f4bf8960a2fcba781ac944722d04a3329314f" translate="yes" xml:space="preserve">
          <source>If @suffixes are given each element is a pattern (either a string or a &lt;code&gt;qr//&lt;/code&gt;) matched against the end of the $filename. The matching portion is removed and becomes the $suffix.</source>
          <target state="translated">@suffixesが指定されている場合、各要素は$ filenameの末尾と照合されるパターン（文字列または &lt;code&gt;qr//&lt;/code&gt; ）です。一致する部分が削除され、$ suffixになります。</target>
        </trans-unit>
        <trans-unit id="d4498a59b542ad3816d9e8760461f7daf1fdeee5" translate="yes" xml:space="preserve">
          <source>If ATTR includes aliases, those aliases will be expanded at definition time and their values will be used to define the new alias. This means that if you define an alias A in terms of another alias B, and then later redefine alias B, the value of alias A will not change.</source>
          <target state="translated">ATTR にエイリアスが含まれている場合、それらのエイリアスは定義時に展開され、その値が新しいエイリアスの定義に使用されます。つまり、別のエイリアスBを基準にエイリアスAを定義し、後にエイリアスBを再定義しても、エイリアスAの値は変更されないということです。</target>
        </trans-unit>
        <trans-unit id="8fb13f58bf6ef66c743c6f31498345464e172f61" translate="yes" xml:space="preserve">
          <source>If ATTR is not specified, coloralias() returns the standard attribute or attributes to which ALIAS is aliased, if any, or undef if ALIAS does not exist. If it is aliased to multiple attributes, the return value will be a single string and the attributes will be separated by spaces.</source>
          <target state="translated">ATTRが指定されていない場合、coloralias()は、ALIASがエイリアスされている標準属性または属性がある場合はその属性を返し、ALIASが存在しない場合はundefを返します。複数の属性にエイリアスされている場合、戻り値は単一の文字列となり、属性はスペースで区切られます。</target>
        </trans-unit>
        <trans-unit id="e062bfde8c040f50084c09a806e3edbdcdba4c2d" translate="yes" xml:space="preserve">
          <source>If ATTR is not specified, coloralias() returns the standard color name to which ALIAS is aliased, if any, or undef if ALIAS does not exist.</source>
          <target state="translated">ATTRが指定されていない場合、coloralias()はALIASがエイリアスされている標準色名があればそれを返し、ALIASが存在しない場合はundefを返します。</target>
        </trans-unit>
        <trans-unit id="f999d6f241c02db8ba7aa5052a43f699b6917b00" translate="yes" xml:space="preserve">
          <source>If ATTR is specified, coloralias() sets up an alias of ALIAS for the standard color ATTR. From that point forward, ALIAS can be passed into color(), colored(), and colorvalid() and will have the same meaning as ATTR. One possible use of this facility is to give more meaningful names to the 256-color RGB colors. Only alphanumerics, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt; , and &lt;code&gt;-&lt;/code&gt; are allowed in alias names.</source>
          <target state="translated">ATTRが指定されている場合、coloralias（）は標準色ATTRのALIASのエイリアスを設定します。それ以降、ALIASはcolor（）、colored（）、colorvalid（）に渡すことができ、ATTRと同じ意味になります。この機能の1つの可能な用途は、256色のRGBカラーに、より意味のある名前を付けることです。英数字のみ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;_&lt;/code&gt; 、および &lt;code&gt;-&lt;/code&gt; はエイリアス名で使用できます。</target>
        </trans-unit>
        <trans-unit id="ef24de7525ed9aebc1ebe9e4502b970287362ec8" translate="yes" xml:space="preserve">
          <source>If ATTR is specified, it is interpreted as a list of space-separated strings naming attributes or existing aliases. In this case, coloralias() sets up an alias of ALIAS for the set of attributes given by ATTR. From that point forward, ALIAS can be passed into color(), colored(), and colorvalid() and will have the same meaning as the sequence of attributes given in ATTR. One possible use of this facility is to give more meaningful names to the 256-color RGB colors. Only ASCII alphanumerics, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and &lt;code&gt;-&lt;/code&gt; are allowed in alias names.</source>
          <target state="translated">ATTRが指定されている場合、属性または既存のエイリアスに名前を付けるスペースで区切られた文字列のリストとして解釈されます。この場合、coloralias（）は、ATTRによって指定された属性のセットに対してALIASのエイリアスを設定します。その時点から、ALIASはcolor（）、colored（）、およびcolorvalid（）に渡すことができ、ATTRで指定された属性のシーケンスと同じ意味を持ちます。この機能の1つの可能な使用法は、256色のRGBカラーにもっと意味のある名前を付けることです。 ASCII英数字のみ、 &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;_&lt;/code&gt; 、および &lt;code&gt;-&lt;/code&gt; はエイリアス名で使用できます。</target>
        </trans-unit>
        <trans-unit id="ba5f4e8c9b9a52c1f24694fe0f51b01b3e6fce9d" translate="yes" xml:space="preserve">
          <source>If BASE is less than or equal to 94, and a collation sequence is not specified, the following default collation sequence is used. It contains of all the 94 printable ASCII characters except space/blank:</source>
          <target state="translated">BASE が 94 以下で、照合順序が指定されていない場合、以下のデフォルトの照合順序が使用されます。これは、スペース/ブランクを除いた94個の印刷可能なASCII文字をすべて含んでいます。</target>
        </trans-unit>
        <trans-unit id="3759a11aeec37a7d745f2f4cdae15ec5d06a83ce" translate="yes" xml:space="preserve">
          <source>If BITS is 16 or more, bytes of the input string are grouped into chunks of size BITS/8, and each group is converted to a number as with &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; with big-endian formats &lt;code&gt;n&lt;/code&gt;/&lt;code&gt;N&lt;/code&gt; (and analogously for BITS==64). See &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">BITSが16以上の場合、入力文字列のバイトはサイズBITS / 8のチャンクにグループ化され、各グループは、ビッグエンディアン形式 &lt;code&gt;n&lt;/code&gt; / &lt;code&gt;N&lt;/code&gt; の&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;/&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt;場合と同様に数値に変換されます（BITS ==の場合も同様）。 64）。詳細については、&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ed33ee3bf815a6c3c728d6a64deacab551214ad3" translate="yes" xml:space="preserve">
          <source>If BITS is 16 or more, bytes of the input string are grouped into chunks of size BITS/8, and each group is converted to a number as with pack()/unpack() with big-endian formats &lt;code&gt;n&lt;/code&gt; /&lt;code&gt;N&lt;/code&gt; (and analogously for BITS==64). See &lt;a href=&quot;#pack&quot;&gt;pack&lt;/a&gt; for details.</source>
          <target state="translated">BITSが16以上の場合、入力文字列のバイトはサイズBITS / 8のチャンクにグループ化され、各グループはビッグエンディアン形式 &lt;code&gt;n&lt;/code&gt; / &lt;code&gt;N&lt;/code&gt; の pack（）/ unpack（）と同様に数値に変換されます（同様にBITS == 64の場合）。詳細は&lt;a href=&quot;#pack&quot;&gt;パック&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5890dee5bd815a9a6b870ab0d81456c70fdb6033" translate="yes" xml:space="preserve">
          <source>If BITS is 16 or more, bytes of the input string are grouped into chunks of size BITS/8, and each group is converted to a number as with pack()/unpack() with big-endian formats &lt;code&gt;n&lt;/code&gt; /&lt;code&gt;N&lt;/code&gt; (and analogously for BITS==64). See &lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt; for details.</source>
          <target state="translated">BITSが16以上の場合、入力文字列のバイトはサイズBITS / 8のチャンクにグループ化され、各グループはビッグエンディアン形式 &lt;code&gt;n&lt;/code&gt; / &lt;code&gt;N&lt;/code&gt; の pack（）/ unpack（）と同様に数値に変換されます（同様にBITS == 64の場合）。詳細は&lt;a href=&quot;pack&quot;&gt;パック&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="eafc581ec466397a85b26357c350bc4ac6773df9" translate="yes" xml:space="preserve">
          <source>If BITS is 8, &quot;elements&quot; coincide with bytes of the input string.</source>
          <target state="translated">BITSが8の場合、&quot;elements &quot;は入力文字列のバイトと一致する。</target>
        </trans-unit>
        <trans-unit id="1e3d642ff4115aae3b45ab10f3f174f7b8799465" translate="yes" xml:space="preserve">
          <source>If BUILD_REQUIRES is not empty, it will be dumped as $BUILD_REQUIRES hashref.</source>
          <target state="translated">BUILD_REQUIRESが空でない場合は、$BUILD_REQUIRES hashrefとしてダンプされます。</target>
        </trans-unit>
        <trans-unit id="2f52aed81a4b81abc4bfb5eb234cabe8285fe520" translate="yes" xml:space="preserve">
          <source>If CHLD_IN begins with &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt; , then CHLD_IN will be closed in the parent, and the child will read from it directly. If CHLD_OUT or CHLD_ERR begins with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, then the child will send output directly to that filehandle. In both cases, there will be a dup(2) instead of a pipe(2) made.</source>
          <target state="translated">CHLD_INが &lt;code&gt;&amp;lt;&amp;amp;&lt;/code&gt; で始まる場合、CHLD_INは親で閉じられ、子はそこから直接読み取ります。CHLD_OUTまたはCHLD_ERRが &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まる場合、子は出力をそのファイルハンドルに直接送信します。どちらの場合も、作成されたpipe（2）の代わりにdup（2）が存在します。</target>
        </trans-unit>
        <trans-unit id="7212fe99a84e995b8956769eedd21cc0b4318074" translate="yes" xml:space="preserve">
          <source>If Configure detects &lt;code&gt;mmap()&lt;/code&gt; functions this layer is provided (with &quot;perlio&quot; as a &quot;base&quot;) which does &quot;read&quot; operations by mmap()ing the file. Performance improvement is marginal on modern systems, so it is mainly there as a proof of concept. It is likely to be unbundled from the core at some point. The &quot;mmap&quot; layer is a reasonable model for a minimalist &quot;derived&quot; layer.</source>
          <target state="translated">Configureが &lt;code&gt;mmap()&lt;/code&gt; 関数を検出すると、このレイヤーが提供され（「perlio」が「ベース」として）、ファイルをmmap（）することで「読み取り」操作を実行します。最近のシステムではパフォーマンスの向上はわずかであるため、主に概念実証として存在します。ある時点でコアからバンドル解除される可能性があります。「mmap」レイヤーは、ミニマリストの「派生」レイヤーの合理的なモデルです。</target>
        </trans-unit>
        <trans-unit id="47e49834bb6e6d998b14887fad543f4fe5a1147b" translate="yes" xml:space="preserve">
          <source>If Configure detects this system has a signbit() that will work with our NVs, then we just use it via the #define in perl.h. Otherwise, fall back on this implementation. The main use of this function is catching -0.0.</source>
          <target state="translated">もしこのシステムがNVで動作するsignbit()を持っていることをConfigureが検出したら、 perl.hの#defineでそれを使えばいいだけです。そうでなければ、この実装に頼ってください。この関数の主な使用法は、-0.0をキャッチすることです。</target>
        </trans-unit>
        <trans-unit id="14abe49a0e4ae66bc9fb22dcac00158a0e0ddd4d" translate="yes" xml:space="preserve">
          <source>If D calls an autoloaded method 'foo' which is defined in class A, then the method is loaded into class A, then executed. If C then calls method 'foo', and that method was reimplemented in class B, but set to be autoloaded, then the lookup mechanism never gets to the AUTOLOAD mechanism in B because it first finds the method already loaded in A, and so erroneously uses that. If the method foo had been stubbed in B, then the lookup mechanism would have found the stub, and correctly loaded and used the sub from B.</source>
          <target state="translated">D がクラス A で定義されているオートロードされたメソッド 'foo' を呼び出すと、そのメソッドはクラス A にロードされて実行されます。Cがその後メソッド 'foo' を呼び出し、そのメソッドがクラスBで再実装されているが、オートロードされるように設定されていた場合、ルックアップ機構はBのAUTOLOAD機構に到達することはない。もしメソッドfooがBでスタブされていたら、ルックアップ機構はスタブを見つけ、正しくロードしてBのサブを使用していたでしょう。</target>
        </trans-unit>
        <trans-unit id="91710ed7923201057d536dad32d2aa3d9a3bd35e" translate="yes" xml:space="preserve">
          <source>If DUCET is not installed, it is recommended to copy the file from &lt;a href=&quot;http://www.unicode.org/Public/UCA/latest/allkeys.txt&quot;&gt;http://www.unicode.org/Public/UCA/latest/allkeys.txt&lt;/a&gt; to &amp;lt;a place in @INC&amp;gt;/Unicode/Collate/allkeys.txt manually.</source>
          <target state="translated">DUCETがインストールされていない場合は、&lt;a href=&quot;http://www.unicode.org/Public/UCA/latest/allkeys.txt&quot;&gt;http：//www.unicode.org/Public/UCA/latest/allkeys.txt&lt;/a&gt;から&amp;lt;@INC内の場所&amp;gt; /Unicode/Collat​​e/allkeys.txtにファイルを手動でコピーすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="16f5960189e018481d4424c6116d78e40717c6a6" translate="yes" xml:space="preserve">
          <source>If DUCET is not installed, it is recommended to copy the file from http://www.unicode.org/Public/UCA/latest/allkeys.txt to &amp;lt;a place in @INC&amp;gt;/Unicode/Collate/allkeys.txt manually.</source>
          <target state="translated">DUCETがインストールされていない場合は、ファイルをhttp://www.unicode.org/Public/UCA/latest/allkeys.txtから&amp;lt;@INC内の場所&amp;gt; /Unicode/Collat​​e/allkeys.txtに手動でコピーすることをお勧めします。 。</target>
        </trans-unit>
        <trans-unit id="63ee7188cb79ae72f03905ea0c72ed0cf711430e" translate="yes" xml:space="preserve">
          <source>If EVENT_MASK is given, then, if EVENT_MASK is non-zero, IO is added to the list of file descriptors and the next call to poll will check for any event specified in EVENT_MASK. If EVENT_MASK is zero then IO will be removed from the list of file descriptors.</source>
          <target state="translated">EVENT_MASKが与えられた場合、EVENT_MASKが0以外の場合、IOはファイルディスクリプタのリストに追加され、次にポーリングを行う呼び出しは、EVENT_MASKで指定されたイベントがあるかどうかをチェックします。EVENT_MASK がゼロの場合、IO はファイルディスクリプタのリストから削除されます。</target>
        </trans-unit>
        <trans-unit id="bd3d21a82a01626375b0a1ef9fd969a22666fce2" translate="yes" xml:space="preserve">
          <source>If EVENT_MASK is not given then the return value will be the current event mask value for IO.</source>
          <target state="translated">EVENT_MASKが与えられなかった場合、戻り値はIOの現在のイベントマスク値になります。</target>
        </trans-unit>
        <trans-unit id="24c1cc8102964c640118dc422f140e282d6a071d" translate="yes" xml:space="preserve">
          <source>If EXPR is &lt;code&gt;EXPR1 &amp;amp;&amp;amp; EXPR2&lt;/code&gt; or &lt;code&gt;EXPR1 &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; EXPR2&lt;/code&gt; , the test is applied</source>
          <target state="translated">EXPRが &lt;code&gt;EXPR1 &amp;amp;&amp;amp; EXPR2&lt;/code&gt; または &lt;code&gt;EXPR1 &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; EXPR2&lt;/code&gt; 場合、テストが適用されます</target>
        </trans-unit>
        <trans-unit id="c34219724e950095cf8c95b322a2257c22c1fa96" translate="yes" xml:space="preserve">
          <source>If EXPR is &lt;code&gt;EXPR1 &amp;amp;&amp;amp; EXPR2&lt;/code&gt; or &lt;code&gt;EXPR1 and EXPR2&lt;/code&gt;, the test is applied</source>
          <target state="translated">EXPRが &lt;code&gt;EXPR1 &amp;amp;&amp;amp; EXPR2&lt;/code&gt; または &lt;code&gt;EXPR1 and EXPR2&lt;/code&gt; 場合、テストが適用されます</target>
        </trans-unit>
        <trans-unit id="34b0086c490eacc160b851838628c17c1a42195c" translate="yes" xml:space="preserve">
          <source>If EXPR is &lt;code&gt;EXPR1 || EXPR2&lt;/code&gt; , &lt;code&gt;EXPR1 // EXPR2&lt;/code&gt; , or &lt;code&gt;EXPR1 &lt;a href=&quot;functions/or&quot;&gt;or&lt;/a&gt; EXPR2&lt;/code&gt; , the test is applied</source>
          <target state="translated">EXPRが &lt;code&gt;EXPR1 || EXPR2&lt;/code&gt; 場合|| EXPR2、 &lt;code&gt;EXPR1 // EXPR2&lt;/code&gt; 、または &lt;code&gt;EXPR1 &lt;a href=&quot;functions/or&quot;&gt;or&lt;/a&gt; EXPR2&lt;/code&gt; 、テストが適用されます</target>
        </trans-unit>
        <trans-unit id="64f0ed02041dd1423cf4f2ba1123160eb703a531" translate="yes" xml:space="preserve">
          <source>If EXPR is &lt;code&gt;EXPR1 || EXPR2&lt;/code&gt;, &lt;code&gt;EXPR1 // EXPR2&lt;/code&gt;, or &lt;code&gt;EXPR1 or EXPR2&lt;/code&gt;, the test is applied</source>
          <target state="translated">EXPRが &lt;code&gt;EXPR1 || EXPR2&lt;/code&gt; 場合|| EXPR2、 &lt;code&gt;EXPR1 // EXPR2&lt;/code&gt; 、または &lt;code&gt;EXPR1 or EXPR2&lt;/code&gt; 、テストが適用されます</target>
        </trans-unit>
        <trans-unit id="872b533779048230ee59539b4fa97acddf5e7f67" translate="yes" xml:space="preserve">
          <source>If EXPR is a bareword, &lt;a href=&quot;#require-VERSION&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; assumes a</source>
          <target state="translated">EXPRがベアワードの場合、&lt;a href=&quot;#require-VERSION&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;は</target>
        </trans-unit>
        <trans-unit id="204a0454b1de60634e71646d68fb30fb2441fd3c" translate="yes" xml:space="preserve">
          <source>If EXPR is a bareword, the require assumes a &quot;</source>
          <target state="translated">EXPRがベアワードの場合、requireは&quot;</target>
        </trans-unit>
        <trans-unit id="5f142acc4fb900bf97a751d8d7ecef7ff58633e0" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, &lt;a href=&quot;#localtime-EXPR&quot;&gt;&lt;code&gt;localtime&lt;/code&gt;&lt;/a&gt; uses the current time (as returned by &lt;a href=&quot;#time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">EXPRを省略すると、&lt;a href=&quot;#localtime-EXPR&quot;&gt; &lt;code&gt;localtime&lt;/code&gt; &lt;/a&gt;は現在の時刻を使用します（&lt;a href=&quot;#time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;によって返される）。</target>
        </trans-unit>
        <trans-unit id="9736cd87f1cff71e99f8827cbdbed7d4bb55c258" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; uses the current time (as returned by time(3)).</source>
          <target state="translated">EXPRが省略された場合、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; は（time（3）によって返された）現在時刻を使用します。</target>
        </trans-unit>
        <trans-unit id="6546ecbea2a684b1dddb3701f62d17cc4c008989" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, &lt;code&gt;&lt;a href=&quot;localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; uses the current time (as returned by time(3)).</source>
          <target state="translated">EXPRが省略された場合、 &lt;code&gt;&lt;a href=&quot;localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; は（time（3）によって返された）現在時刻を使用します。</target>
        </trans-unit>
        <trans-unit id="1a53ae320a45163e84b47c2cc6fa7f3f20a64bbd" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, stats &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">EXPRを省略した場合、統計&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cc0b8d50332776e14a75cf158fdbe3c24ae9c657" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, stats &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">EXPRが省略されている場合、 &lt;code&gt;$_&lt;/code&gt; 統計します。</target>
        </trans-unit>
        <trans-unit id="ac7e9e53a5fc19d51bc46a87435c0e28a0433901" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, unpacks the &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; string. See &lt;a href=&quot;perlpacktut&quot;&gt;perlpacktut&lt;/a&gt; for an introduction to this function.</source>
          <target state="translated">EXPRを省略した場合は、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;文字列を解凍します。この関数の&lt;a href=&quot;perlpacktut&quot;&gt;概要&lt;/a&gt;については、perlpacktutを参照してください。</target>
        </trans-unit>
        <trans-unit id="456f6be70dd618e1ee3287e7f4f8da001e29c2cb" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, unpacks the &lt;code&gt;$_&lt;/code&gt; string. See &lt;a href=&quot;../perlpacktut&quot;&gt;perlpacktut&lt;/a&gt; for an introduction to this function.</source>
          <target state="translated">EXPRを省略した場合、 &lt;code&gt;$_&lt;/code&gt; 文字列を解凍します。この関数の&lt;a href=&quot;../perlpacktut&quot;&gt;概要&lt;/a&gt;については、perlpacktutを参照してください。</target>
        </trans-unit>
        <trans-unit id="b61a1720b65aee85f5ca14d3364f5d86fb223f23" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, unpacks the &lt;code&gt;$_&lt;/code&gt; string. See &lt;a href=&quot;perlpacktut&quot;&gt;perlpacktut&lt;/a&gt; for an introduction to this function.</source>
          <target state="translated">EXPRを省略した場合、 &lt;code&gt;$_&lt;/code&gt; 文字列を解凍します。この関数の&lt;a href=&quot;perlpacktut&quot;&gt;概要&lt;/a&gt;については、perlpacktutを参照してください。</target>
        </trans-unit>
        <trans-unit id="26a60e10a6d0c75eb8213877c8d12c780af7f80d" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, uses &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">EXPRを省略した場合は、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="dfe2e417f8e1e00ae0478764fd05788fcd47c267" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, uses &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;. To go the other way (produce a number in octal), use &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">EXPRを省略した場合は、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;使用します。逆に（8進数で数値を生成する）には、&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;printf&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d36eccdc92b1d6936c118cc354859012973685d8" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, uses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">EXPRが省略されている場合は、 &lt;code&gt;$_&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="1172cb3a4a7f1f2dfc6dcf55076a98d031996813" translate="yes" xml:space="preserve">
          <source>If EXPR is omitted, uses &lt;code&gt;$_&lt;/code&gt; . To go the other way (produce a number in octal), use sprintf() or printf():</source>
          <target state="translated">EXPRが省略されている場合は、 &lt;code&gt;$_&lt;/code&gt; 使用します。他の方法（8進数で数値を生成）にするには、sprintf（）またはprintf（）を使用します。</target>
        </trans-unit>
        <trans-unit id="0835de1ae9d548d447faabd3d40dd3e5da356962" translate="yes" xml:space="preserve">
          <source>If FILEHANDLE -- the first argument in a call to &lt;code&gt;open&lt;/code&gt; -- is an undefined scalar variable (or array or hash element), a new filehandle is autovivified, meaning that the variable is assigned a reference to a newly allocated anonymous filehandle. Otherwise if FILEHANDLE is an expression, its value is the real filehandle. (This is considered a symbolic reference, so &lt;code&gt;use strict &quot;refs&quot;&lt;/code&gt; should</source>
          <target state="translated">FILEHANDLE場合-への呼び出しの最初の引数 &lt;code&gt;open&lt;/code&gt; -未定義のスカラ変数（あるいは配列やハッシュの要素）で、新しいファイルハンドルは変数が新たに割り当てられた匿名のファイルハンドルへの参照が割り当てられていることを意味し、自動活性化されます。それ以外の場合、FILEHANDLEが式の場合、その値は実際のファイルハンドルです。（これはシンボリック参照と見なされるため &lt;code&gt;use strict &quot;refs&quot;&lt;/code&gt; 必要があります</target>
        </trans-unit>
        <trans-unit id="488f2cec4909ee80d1ac152c113a7f5b407ac400" translate="yes" xml:space="preserve">
          <source>If FILEHANDLE is an undefined scalar variable (or array or hash element), a new filehandle is autovivified, meaning that the variable is assigned a reference to a newly allocated anonymous filehandle. Otherwise if FILEHANDLE is an expression, its value is the real filehandle. (This is considered a symbolic reference, so &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; should</source>
          <target state="translated">FILEHANDLEが未定義のスカラー変数（または配列またはハッシュ要素）である場合、新しいファイルハンドルが自動活性化されます。つまり、変数には、新しく割り当てられた匿名ファイルハンドルへの参照が割り当てられます。それ以外の場合、FILEHANDLEが式の場合、その値は実際のファイルハンドルです。（これはシンボリック参照と見なされるため &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; 必要があります</target>
        </trans-unit>
        <trans-unit id="7bf316535c25573b5c20cc7acfbdffbec7d384a1" translate="yes" xml:space="preserve">
          <source>If FILEHANDLE is an undefined scalar variable (or array or hash element), a new filehandle is autovivified, meaning that the variable is assigned a reference to a newly allocated anonymous filehandle. Otherwise if FILEHANDLE is an expression, its value is the real filehandle. (This is considered a symbolic reference, so &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; should</source>
          <target state="translated">FILEHANDLEが未定義のスカラー変数（または配列またはハッシュ要素）である場合、新しいファイルハンドルが自動活性化されます。つまり、変数には、新しく割り当てられた匿名ファイルハンドルへの参照が割り当てられます。それ以外の場合、FILEHANDLEが式の場合、その値は実際のファイルハンドルです。（これはシンボリック参照と見なされるため &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; strict &quot;refs&quot;&lt;/code&gt; 必要があります</target>
        </trans-unit>
        <trans-unit id="78b86feaadc89f11ca72025d1989c281686ea22c" translate="yes" xml:space="preserve">
          <source>If FILEHANDLE is unspecified, output goes to the current default output channel, which starts out as STDOUT but may be changed by the &lt;a href=&quot;#select-FILEHANDLE&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; operator. If the FILEHANDLE is an EXPR, then the expression is evaluated and the resulting string is used to look up the name of the FILEHANDLE at run time. For more on formats, see &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEが指定されていない場合、出力は現在のデフォルト出力チャネルに送られます。これはSTDOUTとして開始されますが、&lt;a href=&quot;#select-FILEHANDLE&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt;オペレーターによって変更される場合があります。FILEHANDLEがEXPRの場合、式が評価され、結果の文字列を使用して、実行時にFILEHANDLEの名前が検索されます。フォーマットの詳細については、&lt;a href=&quot;perlform&quot;&gt;perlformを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7edd9359c1108403094d8175c9c20835e326b96f" translate="yes" xml:space="preserve">
          <source>If FILEHANDLE is unspecified, output goes to the current default output channel, which starts out as STDOUT but may be changed by the &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; operator. If the FILEHANDLE is an EXPR, then the expression is evaluated and the resulting string is used to look up the name of the FILEHANDLE at run time. For more on formats, see &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEが指定されていない場合、出力は現在のデフォルトの出力チャネルに送られます。これはSTDOUTで始まりますが、 &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; オペレーターによって変更される場合があります。FILEHANDLEがEXPRの場合、式が評価され、結果の文字列を使用して、実行時にFILEHANDLEの名前が検索されます。フォーマットの詳細については、&lt;a href=&quot;perlform&quot;&gt;perlformを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="64a3c2a915faecffdca2e95dc4489ca8da06212f" translate="yes" xml:space="preserve">
          <source>If FILEHANDLE is unspecified, output goes to the current default output channel, which starts out as STDOUT but may be changed by the &lt;code&gt;&lt;a href=&quot;select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; operator. If the FILEHANDLE is an EXPR, then the expression is evaluated and the resulting string is used to look up the name of the FILEHANDLE at run time. For more on formats, see &lt;a href=&quot;../perlform&quot;&gt;perlform&lt;/a&gt;.</source>
          <target state="translated">FILEHANDLEが指定されていない場合、出力は現在のデフォルトの出力チャネルに送られます。これはSTDOUTで始まりますが、 &lt;code&gt;&lt;a href=&quot;select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; オペレーターによって変更される場合があります。FILEHANDLEがEXPRの場合、式が評価され、結果の文字列を使用して、実行時にFILEHANDLEの名前が検索されます。フォーマットの詳細については、&lt;a href=&quot;../perlform&quot;&gt;perlformを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7746cb09d04e425daae32ba450ffb46bfb9b6e05" translate="yes" xml:space="preserve">
          <source>If FILENAME doesn't exist on the filesystem, or if the filesystem doesn't support short ANSI filenames, then this function will translate the Unicode name into the system codepage using replacement characters.</source>
          <target state="translated">FILENAMEがファイルシステム上に存在しない場合や、ファイルシステムが短いANSIファイル名をサポートしていない場合、この関数はUnicode名を置換文字を使用してシステムコードページに変換します。</target>
        </trans-unit>
        <trans-unit id="42bee98ad679afc0b47a6a37b45d0b7a351045fa" translate="yes" xml:space="preserve">
          <source>If FUNCTION is a string starting with &lt;code&gt;CORE::&lt;/code&gt; , the rest is taken as a name for a Perl builtin. If the builtin's arguments cannot be adequately expressed by a prototype (such as &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;), prototype() returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, because the builtin does not really behave like a Perl function. Otherwise, the string describing the equivalent prototype is returned.</source>
          <target state="translated">FUNCTIONが &lt;code&gt;CORE::&lt;/code&gt; で始まる文字列の場合、残りはPerl組み込みの名前と見なされます。組み込み関数の引数をプロトタイプ（ &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; など）で適切に表現できない場合、組み込み関数は実際にはPerl関数のように動作しないため、prototype（）は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。それ以外の場合は、同等のプロトタイプを説明する文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="cae550505561d57b299b4a003dc8830ba8e1ee71" translate="yes" xml:space="preserve">
          <source>If FUNCTION is a string starting with &lt;code&gt;CORE::&lt;/code&gt; , the rest is taken as a name for a Perl builtin. If the builtin's arguments cannot be adequately expressed by a prototype (such as &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;), prototype() returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, because the builtin does not really behave like a Perl function. Otherwise, the string describing the equivalent prototype is returned.</source>
          <target state="translated">FUNCTIONが &lt;code&gt;CORE::&lt;/code&gt; で始まる文字列の場合、残りはPerl組み込みの名前と見なされます。組み込み関数の引数をプロトタイプ（ &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; など）で適切に表現できない場合、組み込み関数は実際にはPerl関数のように動作しないため、prototype（）は &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。それ以外の場合は、同等のプロトタイプを説明する文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="0166703daf5c496c4bec8f243a081750014163a4" translate="yes" xml:space="preserve">
          <source>If FUNCTION is a string starting with &lt;code&gt;CORE::&lt;/code&gt;, the rest is taken as a name for a Perl builtin. If the builtin's arguments cannot be adequately expressed by a prototype (such as &lt;a href=&quot;#system-LIST&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;#prototype-FUNCTION&quot;&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/a&gt; returns &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;, because the builtin does not really behave like a Perl function. Otherwise, the string describing the equivalent prototype is returned.</source>
          <target state="translated">FUNCTIONが &lt;code&gt;CORE::&lt;/code&gt; で始まる文字列の場合、残りはPerl組み込みの名前として使用されます。ビルトインの引数をプロトタイプ（&lt;a href=&quot;#system-LIST&quot;&gt; &lt;code&gt;system&lt;/code&gt; &lt;/a&gt;など）で適切に表現できない場合、ビルトインは実際にはPerl関数のように動作しないため、&lt;a href=&quot;#prototype-FUNCTION&quot;&gt; &lt;code&gt;prototype&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; を&lt;/a&gt;返します。それ以外の場合は、同等のプロトタイプを説明する文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="cc31873f684622a14f7af2ea2005b39a1781e830" translate="yes" xml:space="preserve">
          <source>If G_ARRAY is specified</source>
          <target state="translated">G_ARRAY が指定された場合</target>
        </trans-unit>
        <trans-unit id="abc56a2d0a54c75c4dee47cdfefa046b0f36c198" translate="yes" xml:space="preserve">
          <source>If G_DISCARD is specified, the return value will always be 0.</source>
          <target state="translated">G_DISCARDが指定された場合、戻り値は常に0になります。</target>
        </trans-unit>
        <trans-unit id="61b15d293eca2c7db4238b66ac8714ddc363a1b1" translate="yes" xml:space="preserve">
          <source>If G_SCALAR is specified</source>
          <target state="translated">G_SCALARを指定した場合</target>
        </trans-unit>
        <trans-unit id="5c71a194d71e5b8b3f592792b3f56c1d07d85df4" translate="yes" xml:space="preserve">
          <source>If I don't have My::TAP::Harness installed on @INC I need to provide the correct path to perl when I run prove:</source>
          <target state="translated">もし @INC に My::TAP::Harness がインストールされていない場合は、証明を実行する際に perl の正しいパスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd626ea4da9803c896a3f690bf6350bffa4a5047" translate="yes" xml:space="preserve">
          <source>If I don't see that &quot;Perl:&quot;, it's not from perl.</source>
          <target state="translated">Perl:」と表示されていなければ、Perlのものではありません。</target>
        </trans-unit>
        <trans-unit id="03be8548f702da2e594e410d893934eeb0d8222b" translate="yes" xml:space="preserve">
          <source>If I have failing tests in a test suite that consists of more than a handful of scripts and takes more than a few seconds to run it rapidly becomes tedious to run the whole test suite repeatedly as I track down the problems.</source>
          <target state="translated">一握り以上のスクリプトで構成されたテストスイートで失敗したテストがあり、実行するのに数秒以上かかる場合、問題を追跡しながらテストスイート全体を繰り返し実行するのは、急速に面倒になります。</target>
        </trans-unit>
        <trans-unit id="da15fab02b636d1da580f8c8673ab702a8e74b65" translate="yes" xml:space="preserve">
          <source>If I need a feature that prove doesn't provide I can easily write my own.</source>
          <target state="translated">証明が提供しない機能が必要な場合、私は簡単に自分自身を書くことができます。</target>
        </trans-unit>
        <trans-unit id="605963fd1be7406e13c1ff42eab8cd0d74775641" translate="yes" xml:space="preserve">
          <source>If I need to reach even deeper into the internals of the harness I can replace the classes that TAP::Parser uses to execute test scripts and tokenise their output. Before running a test script TAP::Parser creates a grammar (TAP::Parser::Grammar) to decode the raw TAP into tokens, a result factory (TAP::Parser::ResultFactory) to turn the decoded TAP results into objects and, depending on whether it's running a test script or reading TAP from a file, scalar or array a source or an iterator (TAP::Parser::IteratorFactory).</source>
          <target state="translated">ハーネスの内部をもっと深く知りたい場合は、TAP::Parserがテストスクリプトを実行し、その出力をトークン化するために使うクラスを置き換えることができます。テストスクリプトを実行する前に、TAP::Parserは生のTAPをトークンにデコードする文法(TAP::Parser::Grammar)、デコードされたTAPの結果をオブジェクトに変換する結果ファクトリ(TAP::Parser::ResultFactory)、テストスクリプトを実行しているかファイルからTAPを読むかに応じて、スカラや配列、ソースやイテレータ(TAP::Parser::IteratorFactory)を作ります。</target>
        </trans-unit>
        <trans-unit id="985d558aa1f93c1b25225dff89cbd31a5a5a4d9a" translate="yes" xml:space="preserve">
          <source>If I save that as t/phptest.t the shebang line will ensure that it runs correctly along with all my other tests.</source>
          <target state="translated">これを t/phptest.t として保存しておけば、shebang 行は他のすべてのテストと一緒に正しく動作することを保証してくれます。</target>
        </trans-unit>
        <trans-unit id="b9a5f2df715ea2336595f87758abbc0f6cdbf051" translate="yes" xml:space="preserve">
          <source>If I write a subclass of App::Prove I can customise any aspect of the test runner while inheriting all of prove's behaviour. Here's myprove:</source>
          <target state="translated">App::Proveのサブクラスを書けば、proveの振る舞いをすべて継承しながら、テストランナーのあらゆる面をカスタマイズすることができます。これが myprove です。</target>
        </trans-unit>
        <trans-unit id="74809ed417c3b37088be3b29e4f08e09fd27f388" translate="yes" xml:space="preserve">
          <source>If I'm running my tests in parallel there may also be a multiplexer (TAP::Parser::Multiplexer) - the component that allows multiple tests to run simultaneously.</source>
          <target state="translated">テストを並列に実行している場合、マルチプレクサ(TAP::Parser::Multiplexer)があるかもしれません-複数のテストを同時に実行できるようにするコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="7f881d9fe9fd9028d68d11b8271492af01bf7e3c" translate="yes" xml:space="preserve">
          <source>If ID is omitted, it defaults to &lt;code&gt;1&lt;/code&gt; . If a single character is given for ID, the numeric value of that character is used.</source>
          <target state="translated">IDを省略すると、デフォルトで &lt;code&gt;1&lt;/code&gt; になります。IDに単一の文字が指定されている場合、その文字の数値が使用されます。</target>
        </trans-unit>
        <trans-unit id="3edb552ee59d2dff01961b99b98b93b199000e3c" translate="yes" xml:space="preserve">
          <source>If ID is omitted, it defaults to &lt;code&gt;1&lt;/code&gt;. If a single character is given for ID, the numeric value of that character is used.</source>
          <target state="translated">IDを省略すると、デフォルトで &lt;code&gt;1&lt;/code&gt; になります。IDに1文字を指定すると、その文字の数値が使用されます。</target>
        </trans-unit>
        <trans-unit id="b781e9bc0c2157f6dabdbd2804f21e2dc4d3a773" translate="yes" xml:space="preserve">
          <source>If KEY starts and ends with a slash, the string in between is treated as a regular expression and only keys matching this regexp are displayed</source>
          <target state="translated">KEYがスラッシュで始まり、スラッシュで終わる場合、その間の文字列は正規表現として扱われ、この正規表現にマッチするキーのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="97bf7fa576e4d2080ce6127c0f4cd5a7adce4cf1" translate="yes" xml:space="preserve">
          <source>If LAYER is omitted or specified as &lt;code&gt;:raw&lt;/code&gt; the filehandle is made suitable for passing binary data. This includes turning off possible CRLF translation and marking it as bytes (as opposed to Unicode characters). Note that, despite what may be implied in</source>
          <target state="translated">LAYERが省略されているか、 &lt;code&gt;:raw&lt;/code&gt; として指定されている場合、ファイルハンドルはバイナリデータを渡すのに適しています。これには、考えられるCRLF変換をオフにし、それをバイトとしてマークすることが含まれます（Unicode文字とは対照的）。で暗示されている可能性があるにもかかわらず、</target>
        </trans-unit>
        <trans-unit id="283b8c8f4ffd49cdc5f923f3f2b2ef054e93376f" translate="yes" xml:space="preserve">
          <source>If LAYER is present it is a single string, but may contain multiple directives. The directives alter the behaviour of the filehandle. When LAYER is present, using binmode on a text file makes sense.</source>
          <target state="translated">LAYER が存在する場合は単一の文字列ですが、複数のディレクティブを含むことができます。これらのディレクティブはファイルハンドルの動作を変更します。LAYER が存在する場合、テキストファイルで binmode を使うのは意味があります。</target>
        </trans-unit>
        <trans-unit id="bc78056370f87ab6c8598a43f74f4b98bd9074c2" translate="yes" xml:space="preserve">
          <source>If LIMIT is negative, it is treated as if it were instead arbitrarily large; as many fields as possible are produced.</source>
          <target state="translated">LIMITが負の値の場合は、あたかも任意の大きさであるかのように扱われ、可能な限り多くのフィールドが生成されます。</target>
        </trans-unit>
        <trans-unit id="0394dbfeda7095aa516dcefff51b8b66aab7006b" translate="yes" xml:space="preserve">
          <source>If LIMIT is omitted (or, equivalently, zero), then it is usually treated as if it were instead negative but with the exception that trailing empty fields are stripped (empty leading fields are always preserved); if all fields are empty, then all fields are considered to be trailing (and are thus stripped in this case). Thus, the following:</source>
          <target state="translated">LIMITが省略された場合(または同等にゼロ)、通常は負の値であるかのように扱われますが、例外として、末尾の空のフィールドは削除されます(先頭の空のフィールドは常に保存されます)。したがって、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ec1ca6d6c3c8c30d74e46da0d1f8dfee1a937ce1" translate="yes" xml:space="preserve">
          <source>If LIMIT is specified and positive, it represents the maximum number of fields into which the EXPR may be split; in other words, LIMIT is one greater than the maximum number of times EXPR may be split. Thus, the LIMIT value &lt;code&gt;1&lt;/code&gt; means that EXPR may be split a maximum of zero times, producing a maximum of one field (namely, the entire value of EXPR). For instance:</source>
          <target state="translated">LIMITが指定されていて正の場合、EXPRを分割できるフィールドの最大数を表します。つまり、LIMITは、EXPRを分割できる最大回数よりも1つ大きくなります。したがって、LIMIT値 &lt;code&gt;1&lt;/code&gt; は、EXPRが最大0回に分割され、最大1つのフィールド（つまり、EXPRの値全体）を生成することを意味します。例えば：</target>
        </trans-unit>
        <trans-unit id="a1e79f492508e7edc8814a0c2f8fb560a886956d" translate="yes" xml:space="preserve">
          <source>If LIST consists of the empty string, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; spawns an interactive DCL subprocess, in the same fashion as typing &lt;b&gt;SPAWN&lt;/b&gt; at the DCL prompt.</source>
          <target state="translated">LISTが空の文字列で構成されている場合、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; は、DCLプロンプトで&lt;b&gt;SPAWN&lt;/b&gt;と入力するのと同じ方法で、インタラクティブなDCLサブプロセスを生成します。</target>
        </trans-unit>
        <trans-unit id="d577e3a6f68cf3804f6d29aac95c4927c6f793ba" translate="yes" xml:space="preserve">
          <source>If LIST consists of the empty string, &lt;code&gt;system&lt;/code&gt; spawns an interactive DCL subprocess, in the same fashion as typing &lt;b&gt;SPAWN&lt;/b&gt; at the DCL prompt.</source>
          <target state="translated">LISTが空の文字列で構成されている場合、 &lt;code&gt;system&lt;/code&gt; は、DCLプロンプトで&lt;b&gt;SPAWN&lt;/b&gt;と入力するのと同じ方法で、対話型DCLサブプロセスを生成します。</target>
        </trans-unit>
        <trans-unit id="c2cae660b4a3baec9a67c4d2cf72f2806437ed21" translate="yes" xml:space="preserve">
          <source>If LIST is omitted, &lt;a href=&quot;#unlink-LIST&quot;&gt;&lt;code&gt;unlink&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">LISTを省略した場合、&lt;a href=&quot;#unlink-LIST&quot;&gt; &lt;code&gt;unlink&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="8af421f1352b89476d8e2fb680c100c5c55fb16a" translate="yes" xml:space="preserve">
          <source>If LIST is omitted, &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; uses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">LISTを省略すると、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;$_&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="15ba1dd13707a281770468c5a2f35927f1cf24ea" translate="yes" xml:space="preserve">
          <source>If LIST is omitted, &lt;code&gt;&lt;a href=&quot;unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; uses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">LISTを省略すると、 &lt;code&gt;&lt;a href=&quot;unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;$_&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="4da7e6771ebdbb0d68b845baa0f1af30e2550323" translate="yes" xml:space="preserve">
          <source>If LIST was empty or made an empty string, and &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt; already contains an exception value (typically from a previous &lt;a href=&quot;#eval-EXPR&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;), then that value is reused after appending &lt;code&gt;&quot;\t...propagated&quot;&lt;/code&gt;. This is useful for propagating exceptions:</source>
          <target state="translated">LISTが空であるか、空の文字列になっていて、&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;すでに例外値（通常は前の&lt;a href=&quot;#eval-EXPR&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;からのもの）が含まれている場合、その値は &lt;code&gt;&quot;\t...propagated&quot;&lt;/code&gt; 追加した後に再利用されます。これは、例外を伝播するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="84674bcf3d3a118952a055d14ce31826e4bf5479" translate="yes" xml:space="preserve">
          <source>If LIST was empty or made an empty string, and &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt; contains an object reference that has a &lt;code&gt;PROPAGATE&lt;/code&gt; method, that method will be called with additional file and line number parameters. The return value replaces the value in &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt;; i.e., as if &lt;code&gt;$@ = eval { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; were called.</source>
          <target state="translated">LISTが空であるか空の文字列になっていて、&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;PROPAGATE&lt;/code&gt; メソッドを持つオブジェクト参照が含まれている場合、そのメソッドは追加のファイルおよび行番号パラメーターを使用して呼び出されます。戻り値は&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;値を置き換えます; つまり、 &lt;code&gt;$@ = eval { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; 呼ばれた。</target>
        </trans-unit>
        <trans-unit id="281f7b6eb5d507578f647b0d70c67bd5a086771f" translate="yes" xml:space="preserve">
          <source>If LIST was empty or made an empty string, and &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt; is also empty, then the string &lt;code&gt;&quot;Died&quot;&lt;/code&gt; is used.</source>
          <target state="translated">LISTが空であるか、空の文字列になり、&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;も空の場合、文字列 &lt;code&gt;&quot;Died&quot;&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="2e6165dd99b5382a91584396109e05b591d171e0" translate="yes" xml:space="preserve">
          <source>If MODE is &lt;code&gt;&amp;lt;&lt;/code&gt;, the file is opened for input (read-only). If MODE is &lt;code&gt;&amp;gt;&lt;/code&gt;, the file is opened for output, with existing files first being truncated (&quot;clobbered&quot;) and nonexisting files newly created. If MODE is &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, the file is opened for appending, again being created if necessary.</source>
          <target state="translated">MODEが &lt;code&gt;&amp;lt;&lt;/code&gt; の場合、ファイルは入力用に開かれます（読み取り専用）。MODEが &lt;code&gt;&amp;gt;&lt;/code&gt; の場合、ファイルは出力用に開かれ、既存のファイルが最初に切り捨てられ（ &quot;clobbered&quot;）、存在しないファイルが新しく作成されます。MODEが &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; の場合、ファイルは追加のために開かれ、必要に応じて再度作成されます。</target>
        </trans-unit>
        <trans-unit id="17ef4f93ed053708e4daa4192a3c5a507017945b" translate="yes" xml:space="preserve">
          <source>If MODE is &lt;code&gt;|-&lt;/code&gt;, then the filename is interpreted as a command to which output is to be piped, and if MODE is &lt;code&gt;-|&lt;/code&gt;, the filename is interpreted as a command that pipes output to us. In the two-argument (and one-argument) form, one should replace dash (&lt;code&gt;-&lt;/code&gt;) with the command. See &lt;a href=&quot;perlipc#Using-open%28%29-for-IPC&quot;&gt;&quot;Using open() for IPC&quot; in perlipc&lt;/a&gt; for more examples of this. (You are not allowed to &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; to a command that pipes both in</source>
          <target state="translated">MODEが &lt;code&gt;|-&lt;/code&gt; の場合、ファイル名は出力がパイプされるコマンドとして解釈され、MODEが &lt;code&gt;-|&lt;/code&gt; の場合は 、ファイル名は、出力をパイプで送信するコマンドとして解釈されます。2つの引数（および1つの引数）の形式では、ダッシュ（ &lt;code&gt;-&lt;/code&gt; ）をコマンドに置き換える必要があります。この例の&lt;a href=&quot;perlipc#Using-open%28%29-for-IPC&quot;&gt;詳細&lt;/a&gt;については、perlipcの「IPCにopen（）を使用する」を参照してください。（両方をパイプするコマンドを&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;ことは許可されていません</target>
        </trans-unit>
        <trans-unit id="f8725f581ae126bd53637cc6004bb31b10e046db" translate="yes" xml:space="preserve">
          <source>If Mac::Files could not be loaded, the empty string is returned.</source>
          <target state="translated">Mac::Files を読み込めなかった場合は、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="9556835597cabed412f1a27672edf9d6d8a5a68b" translate="yes" xml:space="preserve">
          <source>If N is &amp;gt; 0, rounds to the Nth digit from the left. If N &amp;lt; 0, rounds to the Nth digit after the dot. Since BigInts are integers, the case N &amp;lt; 0 is a no-op for them.</source>
          <target state="translated">Nが0より大きい場合、左からN番目の桁に丸めます。N &amp;lt;0の場合、ドットの後のN桁に丸めます。BigIntsは整数なので、N &amp;lt;0の場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="7bb11b5e3bbf2cecd073552e16a6087ed08e448b" translate="yes" xml:space="preserve">
          <source>If NUMBER is omitted, uses &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NUMBERを省略した場合は、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="809aa45c402e18c1090663e0bbd2fdac630054bb" translate="yes" xml:space="preserve">
          <source>If NUMBER is omitted, uses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">NUMBERを省略すると、 &lt;code&gt;$_&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="41978e4e598bdad208f30664c01c64d67097badb" translate="yes" xml:space="preserve">
          <source>If OFFSET and LENGTH specify a substring that is partly outside the string, only the part within the string is returned. If the substring is beyond either end of the string, &lt;a href=&quot;#substr-EXPR%2COFFSET%2CLENGTH%2CREPLACEMENT&quot;&gt;&lt;code&gt;substr&lt;/code&gt;&lt;/a&gt; returns the undefined value and produces a warning. When used as an lvalue, specifying a substring that is entirely outside the string raises an exception. Here's an example showing the behavior for boundary cases:</source>
          <target state="translated">OFFSETとLENGTHが部分的に文字列の外側にある部分文字列を指定した場合、文字列内の部分のみが返されます。部分文字列が文字列のいずれかの端を超えている場合、&lt;a href=&quot;#substr-EXPR%2COFFSET%2CLENGTH%2CREPLACEMENT&quot;&gt; &lt;code&gt;substr&lt;/code&gt; &lt;/a&gt;は未定義の値を返し、警告を生成します。左辺値として使用する場合、文字列の完全に外側にある部分文字列を指定すると、例外が発生します。境界ケースの動作を示す例を次に示します。</target>
        </trans-unit>
        <trans-unit id="6e18ed7b6aa1dfe2acf7667704a25f494c6c53b1" translate="yes" xml:space="preserve">
          <source>If OFFSET and LENGTH specify a substring that is partly outside the string, only the part within the string is returned. If the substring is beyond either end of the string, substr() returns the undefined value and produces a warning. When used as an lvalue, specifying a substring that is entirely outside the string raises an exception. Here's an example showing the behavior for boundary cases:</source>
          <target state="translated">OFFSETとLENGTHが部分的に文字列の外にある部分文字列を指定した場合、 文字列の中の部分のみが返される。部分文字列が文字列の両端を超えている場合、 substr()は未定義の値を返し、警告を表示する。lvalueとして使用された場合、文字列の外にある部分文字列を指定すると例外が発生します。ここでは、境界の場合の動作を示す例を示します。</target>
        </trans-unit>
        <trans-unit id="805a2c8a87b8f6b59ee6ee34433c46d30a4b7687" translate="yes" xml:space="preserve">
          <source>If PATTERN is &lt;code&gt;/^/&lt;/code&gt; , then it is treated as if it used the &lt;a href=&quot;../perlreref#OPERATORS&quot;&gt;multiline modifier&lt;/a&gt; (&lt;code&gt;/^/m&lt;/code&gt; ), since it isn't much use otherwise.</source>
          <target state="translated">PATTERNが &lt;code&gt;/^/&lt;/code&gt; 場合、それ以外ではあまり使用されないため、&lt;a href=&quot;../perlreref#OPERATORS&quot;&gt;複数行修飾子&lt;/a&gt;（ &lt;code&gt;/^/m&lt;/code&gt; ）を使用した場合と同様に処理されます。</target>
        </trans-unit>
        <trans-unit id="f31e710fa5dc3bb0149beaea0c04322fd5b027e6" translate="yes" xml:space="preserve">
          <source>If PATTERN is &lt;code&gt;/^/&lt;/code&gt; , then it is treated as if it used the &lt;a href=&quot;perlreref#OPERATORS&quot;&gt;multiline modifier&lt;/a&gt; (&lt;code&gt;/^/m&lt;/code&gt; ), since it isn't much use otherwise.</source>
          <target state="translated">PATTERNが &lt;code&gt;/^/&lt;/code&gt; 場合、それ以外ではあまり使用されないため、&lt;a href=&quot;perlreref#OPERATORS&quot;&gt;複数行修飾子&lt;/a&gt;（ &lt;code&gt;/^/m&lt;/code&gt; ）を使用した場合と同様に処理されます。</target>
        </trans-unit>
        <trans-unit id="0d84847fbb60054df16b3ab82d500263906bc774" translate="yes" xml:space="preserve">
          <source>If PATTERN is &lt;code&gt;/^/&lt;/code&gt;, then it is treated as if it used the &lt;a href=&quot;perlreref#OPERATORS&quot;&gt;multiline modifier&lt;/a&gt; (&lt;code&gt;/^/m&lt;/code&gt;), since it isn't much use otherwise.</source>
          <target state="translated">PATTERNが &lt;code&gt;/^/&lt;/code&gt; 場合、それ以外の場合はあまり使用されないため、&lt;a href=&quot;perlreref#OPERATORS&quot;&gt;複数行修飾子&lt;/a&gt;（ &lt;code&gt;/^/m&lt;/code&gt; ）を使用したかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="8ab2206e4a8b71981bc3526b21e6f961d2fc978f" translate="yes" xml:space="preserve">
          <source>If PATTERN matches the empty string, the EXPR is split at the match position (between characters). As an example, the following:</source>
          <target state="translated">PATTERNが空文字列にマッチした場合、EXPRはマッチした位置(文字と文字の間)で分割されます。例として、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="bf4c909b9fa78435a98bf6dd9ce2fb396fdd71cb" translate="yes" xml:space="preserve">
          <source>If PERL5LIB is not defined, &lt;a href=&quot;#PERLLIB&quot;&gt;&quot;PERLLIB&quot;&lt;/a&gt; is used. Directories are separated (like in PATH) by a colon on Unixish platforms and by a semicolon on Windows (the proper path separator being given by the command &lt;code&gt;perl -V:&lt;i&gt;path_sep&lt;/i&gt;&lt;/code&gt;).</source>
          <target state="translated">PERL5LIBが定義されていない場合は、&lt;a href=&quot;#PERLLIB&quot;&gt;「PERLLIB」&lt;/a&gt;が使用されます。ディレクトリは（PATHのように）Unixishプラットフォームではコロンで、Windowsではセミコロンで区切られます（適切なパス区切り文字はコマンド &lt;code&gt;perl -V:&lt;i&gt;path_sep&lt;/i&gt;&lt;/code&gt; で指定され&lt;i&gt;ます&lt;/i&gt;）。</target>
        </trans-unit>
        <trans-unit id="d1b7e2477c70af9a1ce418a622d9557a0b72af87" translate="yes" xml:space="preserve">
          <source>If PERL5LIB is not defined, PERLLIB is used. Directories are separated (like in PATH) by a colon on Unixish platforms and by a semicolon on Windows (the proper path separator being given by the command &lt;code&gt;perl
-V:&lt;i&gt;path_sep&lt;/i&gt;&lt;/code&gt;).</source>
          <target state="translated">PERL5LIBが定義されていない場合は、PERLLIBが使用されます。ディレクトリは（PATHのように）Unixishプラットフォームではコロンで、Windowsではセミコロンで区切られます（ &lt;code&gt;perl -V:&lt;i&gt;path_sep&lt;/i&gt;&lt;/code&gt; コマンドで適切なパス区切り文字が指定され&lt;i&gt;ます&lt;/i&gt;）。</target>
        </trans-unit>
        <trans-unit id="e3cb4284864a564ca2b51274a4f3fa62dd73a592" translate="yes" xml:space="preserve">
          <source>If PERL_PV_ESCAPE_ALL is set then all input chars will be output using &lt;code&gt;\x01F1&lt;/code&gt; style escapes, otherwise if PERL_PV_ESCAPE_NONASCII is set, only non-ASCII chars will be escaped using this style; otherwise, only chars above 255 will be so escaped; other non printable chars will use octal or common escaped patterns like &lt;code&gt;\n&lt;/code&gt; . Otherwise, if PERL_PV_ESCAPE_NOBACKSLASH then all chars below 255 will be treated as printable and will be output as literals.</source>
          <target state="translated">PERL_PV_ESCAPE_ALLが設定されている場合、すべての入力文字は &lt;code&gt;\x01F1&lt;/code&gt; スタイルのエスケープを使用して出力されます。それ以外の場合、PERL_PV_ESCAPE_NONASCIIが設定されている場合、このスタイルを使用して非ASCII文字のみがエスケープされます。それ以外の場合は、255を超える文字のみがエスケープされます。他の印刷できない文字は、8進数または &lt;code&gt;\n&lt;/code&gt; ような一般的なエスケープパターンを使用します。それ以外の場合、PERL_PV_ESCAPE_NOBACKSLASHの場合、255未満のすべての文字は印刷可能として扱われ、リテラルとして出力されます。</target>
        </trans-unit>
        <trans-unit id="03a5b31adb12c35d2862c64e653c8076e4f81a1b" translate="yes" xml:space="preserve">
          <source>If PERL_PV_ESCAPE_FIRSTCHAR is set then only the first char of the string will be escaped, regardless of max. If the output is to be in hex, then it will be returned as a plain hex sequence. Thus the output will either be a single char, an octal escape sequence, a special escape like &lt;code&gt;\n&lt;/code&gt; or a hex value.</source>
          <target state="translated">PERL_PV_ESCAPE_FIRSTCHARが設定されている場合、最大値に関係なく、文字列の最初の文字のみがエスケープされます。出力が16進数の場合、プレーンな16進数シーケンスとして返されます。したがって、出力は単一の文字、8進のエスケープシーケンス、 &lt;code&gt;\n&lt;/code&gt; ような特別なエスケープ、または16進値のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="4fd0e08a5001bbfc2db16575c706877131f99c11" translate="yes" xml:space="preserve">
          <source>If PERL_PV_ESCAPE_RE is set then the escape char used will be a '%' and not a '\\'. This is because regexes very often contain backslashed sequences, whereas '%' is not a particularly common character in patterns.</source>
          <target state="translated">PERL_PV_ESCAPE_RE が設定されている場合、使用されるエスケープ文字は '%' であり、'\' ではありません。これは、正規表現がバックスラッシュされたシーケンスを含むことが非常に多いのに対し、'%' はパターンでは特に一般的な文字ではないからです。</target>
        </trans-unit>
        <trans-unit id="c327fff20e1a2d0d479391141282091e826a55c6" translate="yes" xml:space="preserve">
          <source>If PERL_PV_ESCAPE_UNI is set then the input string is treated as UTF-8 if PERL_PV_ESCAPE_UNI_DETECT is set then the input string is scanned using &lt;code&gt;is_utf8_string()&lt;/code&gt; to determine if it is UTF-8.</source>
          <target state="translated">PERL_PV_ESCAPE_UNIが設定されている場合、入力文字列はUTF-8として扱われます。PERL_PV_ESCAPE_UNI_DETECTが設定されている場合、入力文字列は &lt;code&gt;is_utf8_string()&lt;/code&gt; を使用してスキャンされ、UTF-8かどうかが判断されます。</target>
        </trans-unit>
        <trans-unit id="19515a44b91c296bde08fb195c3206ce5ee06393" translate="yes" xml:space="preserve">
          <source>If PID is a subprocess started by a piped &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; (see &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;), &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; will wait for that subprocess, and return its final status value in &lt;code&gt;$?&lt;/code&gt; . If PID is a subprocess created in some other way (e.g. SPAWNed before Perl was invoked), &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; will simply check once per second whether the process has completed, and return when it has. (If PID specifies a process that isn't a subprocess of the current process, and you invoked Perl with the &lt;code&gt;-w&lt;/code&gt; switch, a warning will be issued.)</source>
          <target state="translated">PIDがパイプによる &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; （&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照）によって開始されたサブプロセスである場合、 &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; はそのサブプロセスを待機し、最終的なステータス値を &lt;code&gt;$?&lt;/code&gt; に返します。。PIDが他の方法で作成されたサブプロセス（たとえば、Perlが呼び出される前にSPAWNed）である場合、 &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; はプロセスが完了したかどうかを1秒に1回確認し、完了したときに戻ります。（PIDが現在のプロセスのサブプロセスではないプロセスを指定し、 &lt;code&gt;-w&lt;/code&gt; スイッチを指定してPerlを呼び出した場合、警告が発行されます。）</target>
        </trans-unit>
        <trans-unit id="e7c89908fc623a7d026e9fd9f90cd1799c25d8d3" translate="yes" xml:space="preserve">
          <source>If PID is a subprocess started by a piped &lt;code&gt;open()&lt;/code&gt; (see &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;), &lt;code&gt;waitpid&lt;/code&gt; will wait for that subprocess, and return its final status value in &lt;code&gt;$?&lt;/code&gt;. If PID is a subprocess created in some other way (e.g. SPAWNed before Perl was invoked), &lt;code&gt;waitpid&lt;/code&gt; will simply check once per second whether the process has completed, and return when it has. (If PID specifies a process that isn't a subprocess of the current process, and you invoked Perl with the &lt;code&gt;-w&lt;/code&gt; switch, a warning will be issued.)</source>
          <target state="translated">PIDがパイプされた &lt;code&gt;open()&lt;/code&gt; によって開始されたサブプロセスである場合（&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照）、 &lt;code&gt;waitpid&lt;/code&gt; はそのサブプロセスを待機し、その最終ステータス値を &lt;code&gt;$?&lt;/code&gt; で返します。。 PIDが他の方法で作成されたサブプロセスである場合（たとえば、Perlが呼び出される前にSPAWNされた場合）、 &lt;code&gt;waitpid&lt;/code&gt; はプロセスが完了したかどうかを1秒に1回チェックし、完了したら戻ります。 （PIDが現在のプロセスのサブプロセスではないプロセスを指定していて、 &lt;code&gt;-w&lt;/code&gt; スイッチを指定してPerlを呼び出した場合、警告が発行されます。）</target>
        </trans-unit>
        <trans-unit id="2833d231deee2ce7c48c3ef06baaabad2e5a0de9" translate="yes" xml:space="preserve">
          <source>If PPCODE: directive is not used, &lt;code&gt;void&lt;/code&gt; return value should be used only for subroutines which do not return a value,</source>
          <target state="translated">PPCODE：ディレクティブを使用しない場合、値を返さないサブルーチンに対してのみ &lt;code&gt;void&lt;/code&gt; 戻り値を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c393beed824f2acf513d9860e129eb5ffe2baeec" translate="yes" xml:space="preserve">
          <source>If PadnameOUTER is set on the pad name, then that slot in the frame AV is a REFCNT'ed reference to a lexical from &quot;outside&quot;. Such entries are sometimes referred to as 'fake'. In this case, the name does not use 'low' and 'high' to store a cop_seq range, since it is in scope throughout. Instead 'high' stores some flags containing info about the real lexical (is it declared in an anon, and is it capable of being instantiated multiple times?), and for fake ANONs, 'low' contains the index within the parent's pad where the lexical's value is stored, to make cloning quicker.</source>
          <target state="translated">PadnameOUTERがパッド名に設定されている場合、フレームAVのそのスロットは、&quot;外部 &quot;からのレキシカルへのREFCNT'ed参照となります。このようなエントリは「偽物」と呼ばれることがあります。この場合、名前は'low'と'high'を使用してcop_seqの範囲を格納することはありません。その代わりに、'high'には本物のレキシカルに関する情報を含むいくつかのフラグが格納されています(アノンで宣言されているか、複数回インスタンス化できるか)。</target>
        </trans-unit>
        <trans-unit id="40be3d27de878e5185ba9875f176a67d8334894d" translate="yes" xml:space="preserve">
          <source>If Perl cannot find the method in any of these classes, it will die with an error message.</source>
          <target state="translated">Perl がこれらのクラスのメソッドを見つけることができない場合は、エラーメッセージを表示して終了します。</target>
        </trans-unit>
        <trans-unit id="ef114bcc0bbc93d31f879d70b2e23b29c28c176d" translate="yes" xml:space="preserve">
          <source>If Perl detects that there are problems with the locale collation order, it reverts to using non-locale collation rules for that locale.</source>
          <target state="translated">ロケールの照合順序に問題があることをPerlが検出した場合、そのロケールに対して非ロケールの照合規則を使用するように戻します。</target>
        </trans-unit>
        <trans-unit id="3a89c2d4d03a490ab54c26429553ad753f25a36f" translate="yes" xml:space="preserve">
          <source>If Perl finds that the found executable is of PM type when the current session is not, it will start the new process in a separate session of necessary type. Call via &lt;code&gt;OS2::Process&lt;/code&gt; to disable this magic.</source>
          <target state="translated">Perlは、現在のセッションがPMタイプではないのに、見つかった実行可能ファイルがPMタイプであると検出した場合、必要なタイプの別のセッションで新しいプロセスを開始します。この魔法を無効にするには、 &lt;code&gt;OS2::Process&lt;/code&gt; を介して呼び出します。</target>
        </trans-unit>
        <trans-unit id="289a7b0542dd20aefdd9191d5f173083a238571f" translate="yes" xml:space="preserve">
          <source>If Perl has been compiled using Perl's malloc you can analyze Perl memory usage by setting $ENV{PERL_DEBUG_MSTATS}.</source>
          <target state="translated">Perlのmallocを使ってコンパイルされている場合は、$ENV{PERL_DEBUG_MSTATS}を設定することで、Perlのメモリ使用量を解析することができます。</target>
        </trans-unit>
        <trans-unit id="230e2bfc79d0ba462c1beaf813fc67b45a5f8378" translate="yes" xml:space="preserve">
          <source>If Perl is not built to use PerlIO as its IO system then only the two pseudo-layers &lt;code&gt;:bytes&lt;/code&gt; and &lt;code&gt;:crlf&lt;/code&gt; are available.</source>
          <target state="translated">PerlがそのIOシステムとしてPerlIOを使用するように構築されていない場合、2つの疑似レイヤー &lt;code&gt;:bytes&lt;/code&gt; と &lt;code&gt;:crlf&lt;/code&gt; のみが使用可能です。</target>
        </trans-unit>
        <trans-unit id="6264d3e40b3079f00ff5fcba981797a472b669d0" translate="yes" xml:space="preserve">
          <source>If Perl was not built with socket support, the system call version of &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; is not available at all. If socket support is present, then the system call version of &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; functions only for file descriptors attached to sockets. It will not provide information about regular files or pipes, since the CRTL &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select()&lt;/a&gt;&lt;/code&gt; routine does not provide this functionality.</source>
          <target state="translated">Perlがソケットサポートを使用してビルドされていない場合、 &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; のシステムコールバージョンはまったく使用できません。ソケットサポートが存在する場合、システムコールバージョンの &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;&lt;/code&gt; 関数は、ソケットにアタッチされたファイル記述子に対してのみ機能します。CRTL &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select()&lt;/a&gt;&lt;/code&gt; ルーチンはこの機能を提供しないため、通常のファイルまたはパイプに関する情報は提供されません。</target>
        </trans-unit>
        <trans-unit id="35e051c99f37dfed774297cb967d8106c5e199d4" translate="yes" xml:space="preserve">
          <source>If Perl was not built with socket support, the system call version of &lt;code&gt;select&lt;/code&gt; is not available at all. If socket support is present, then the system call version of &lt;code&gt;select&lt;/code&gt; functions only for file descriptors attached to sockets. It will not provide information about regular files or pipes, since the CRTL &lt;code&gt;select()&lt;/code&gt; routine does not provide this functionality.</source>
          <target state="translated">Perlがソケットサポート付きで構築されていない場合、 &lt;code&gt;select&lt;/code&gt; のシステムコールバージョンはまったく利用できません。ソケットサポートが存在する場合、システムコールバージョンの &lt;code&gt;select&lt;/code&gt; 関数は、ソケットに接続されているファイル記述子に対してのみ使用されます。CRTL &lt;code&gt;select()&lt;/code&gt; ルーチンはこの機能を提供しないため、通常のファイルまたはパイプに関する情報は提供されません。</target>
        </trans-unit>
        <trans-unit id="f4a129f6da7edb3d3e9d992e64ee7ec5edc1382d" translate="yes" xml:space="preserve">
          <source>If Perldoc is running under MSWin and uses this class as a formatter, the output will be opened with</source>
          <target state="translated">PerldocがMSWinで動作していて、このクラスをフォーマッタとして使用している場合、出力は</target>
        </trans-unit>
        <trans-unit id="48a7e7d61da87b6e49574cb96f576ab3af92a97c" translate="yes" xml:space="preserve">
          <source>If Pod::Man is given the &lt;code&gt;utf8&lt;/code&gt; option, the encoding of its output file handle will be forced to UTF-8 if possible, overriding any existing encoding. This will be done even if the file handle is not created by Pod::Man and was passed in from outside. This maintains consistency regardless of PERL_UNICODE and other settings.</source>
          <target state="translated">Pod :: Manに &lt;code&gt;utf8&lt;/code&gt; オプションが指定されている場合、出力ファイルハンドルのエンコーディングは、可能であれば既存のエンコーディングを上書きして、UTF-8に強制されます。これは、ファイルハンドルがPod :: Manによって作成されておらず、外部から渡された場合でも行われます。これにより、PERL_UNICODEおよびその他の設定に関係なく、一貫性が維持されます。</target>
        </trans-unit>
        <trans-unit id="89e668a66a16049973d228d4291fce70e3c9695a" translate="yes" xml:space="preserve">
          <source>If Pod::Man is unavailable, this function will warn and return undef.</source>
          <target state="translated">Pod::Manが利用できない場合、この関数は警告を発し、undefを返します。</target>
        </trans-unit>
        <trans-unit id="0b2424487d45dbfa5c1b518ecd9497b822e7398c" translate="yes" xml:space="preserve">
          <source>If Pod::Simple sends an event where the element name has a dash, period, or colon, the corresponding method name will have a underscore in its place. For example, &quot;foo.bar:baz&quot; becomes start_foo_bar_baz and end_foo_bar_baz.</source>
          <target state="translated">Pod::Simpleが要素名にダッシュ、ピリオド、コロンを含むイベントを送信した場合、対応するメソッド名の代わりにアンダースコアが入ります。例えば、&quot;foo.bar:baz &quot;はstart_foo_bar_baz、end_foo_bar_bazになります。</target>
        </trans-unit>
        <trans-unit id="9e0153ee2898f6429d842dbcd6c0696456ff28ca" translate="yes" xml:space="preserve">
          <source>If Pod::Text is given the &lt;code&gt;utf8&lt;/code&gt; option, the encoding of its output file handle will be forced to UTF-8 if possible, overriding any existing encoding. This will be done even if the file handle is not created by Pod::Text and was passed in from outside. This maintains consistency regardless of PERL_UNICODE and other settings.</source>
          <target state="translated">Pod :: Textに &lt;code&gt;utf8&lt;/code&gt; オプションが指定されている場合、出力ファイルハンドルのエンコーディングは、可能であれば既存のエンコーディングを上書きして、UTF-8に強制されます。これは、ファイルハンドルがPod :: Textによって作成されておらず、外部から渡された場合でも行われます。これにより、PERL_UNICODEおよびその他の設定に関係なく、一貫性が維持されます。</target>
        </trans-unit>
        <trans-unit id="a28c6ae29cd39f20d43e841a87f74f6e887bacb7" translate="yes" xml:space="preserve">
          <source>If RXf_WHITE is set in addition to this flag, &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; will behave like &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; &quot; &quot;&lt;/code&gt; under the Perl engine.</source>
          <target state="translated">このフラグに加えてRXf_WHITEが設定されている場合、Perlエンジンでは、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; &quot; &quot;&lt;/code&gt; ように動作します。</target>
        </trans-unit>
        <trans-unit id="cf4453d6aaace8cb227f665bb65347d32d2472e7" translate="yes" xml:space="preserve">
          <source>If RXf_WHITE is set in addition to this flag, &lt;code&gt;split&lt;/code&gt; will behave like &lt;code&gt;split &quot; &quot;&lt;/code&gt; under the Perl engine.</source>
          <target state="translated">このフラグに加えてRXf_WHITEが設定されている場合、 &lt;code&gt;split&lt;/code&gt; はPerlエンジンでは &lt;code&gt;split &quot; &quot;&lt;/code&gt; ように動作します。</target>
        </trans-unit>
        <trans-unit id="03dddb9eda0980e6158ca2dd506258dca11f657b" translate="yes" xml:space="preserve">
          <source>If SIGNAL is either the number 0 or the string &lt;code&gt;ZERO&lt;/code&gt; (or &lt;code&gt;SIGZERO&lt;/code&gt; ), no signal is sent to the process, but &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; checks whether it's</source>
          <target state="translated">SIGNALが数値0または文字列 &lt;code&gt;ZERO&lt;/code&gt; （または &lt;code&gt;SIGZERO&lt;/code&gt; ）のいずれかである場合、シグナルはプロセスに送信されませんが、 &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; がそれが</target>
        </trans-unit>
        <trans-unit id="a487625a13afee57a95232e398ffaae21162742b" translate="yes" xml:space="preserve">
          <source>If SIGNAL is either the number 0 or the string &lt;code&gt;ZERO&lt;/code&gt; (or &lt;code&gt;SIGZERO&lt;/code&gt; ), no signal is sent to the process, but &lt;code&gt;&lt;a href=&quot;kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; checks whether it's</source>
          <target state="translated">SIGNALが数値0または文字列 &lt;code&gt;ZERO&lt;/code&gt; （または &lt;code&gt;SIGZERO&lt;/code&gt; ）のいずれかである場合、シグナルはプロセスに送信されませんが、 &lt;code&gt;&lt;a href=&quot;kill&quot;&gt;kill&lt;/a&gt;&lt;/code&gt; がそれが</target>
        </trans-unit>
        <trans-unit id="760e1ef9a0dd7acd780a886234880aed4a2bbd19" translate="yes" xml:space="preserve">
          <source>If SIGNAL is either the number 0 or the string &lt;code&gt;ZERO&lt;/code&gt; (or &lt;code&gt;SIGZERO&lt;/code&gt;), no signal is sent to the process, but &lt;a href=&quot;#kill-SIGNAL%2C-LIST&quot;&gt;&lt;code&gt;kill&lt;/code&gt;&lt;/a&gt; checks whether it's</source>
          <target state="translated">SIGNALが数値0または文字列 &lt;code&gt;ZERO&lt;/code&gt; （または &lt;code&gt;SIGZERO&lt;/code&gt; ）のいずれかである場合、シグナルはプロセスに送信されませんが、&lt;a href=&quot;#kill-SIGNAL%2C-LIST&quot;&gt; &lt;code&gt;kill&lt;/code&gt; &lt;/a&gt;はそれがそうであるかどうかをチェックします</target>
        </trans-unit>
        <trans-unit id="e68aad72417aeb3ce465d6bb5919f187ede4dff2" translate="yes" xml:space="preserve">
          <source>If SUBNAME or BLOCK is omitted, &lt;a href=&quot;#sort-SUBNAME-LIST&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;s in standard string comparison order. If SUBNAME is specified, it gives the name of a subroutine that returns an integer less than, equal to, or greater than &lt;code&gt;0&lt;/code&gt;, depending on how the elements of the list are to be ordered. (The &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; and &lt;code&gt;cmp&lt;/code&gt; operators are extremely useful in such routines.) SUBNAME may be a scalar variable name (unsubscripted), in which case the value provides the name of (or a reference to) the actual subroutine to use. In place of a SUBNAME, you can provide a BLOCK as an anonymous, in-line sort subroutine.</source>
          <target state="translated">SUBNAMEまたはBLOCKを省略した場合は、標準の文字列比較順にsを&lt;a href=&quot;#sort-SUBNAME-LIST&quot;&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/a&gt;。 SUBNAMEが指定されている場合、リストの要素の順序に応じて、 &lt;code&gt;0&lt;/code&gt; より小さい、等しい、または大きい整数を返すサブルーチンの名前を指定します。 （ &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; および &lt;code&gt;cmp&lt;/code&gt; 演算子は、このようなルーチンで非常に役立ちます。）SUBNAMEは、スカラー変数名（添え字なし）の場合があります。この場合、値は、使用する実際のサブルーチンの名前（または参照）を提供します。 SUBNAMEの代わりに、匿名のインラインソートサブルーチンとしてBLOCKを提供できます。</target>
        </trans-unit>
        <trans-unit id="34e4af5120e01452063bdba16ab4dbac8800d707" translate="yes" xml:space="preserve">
          <source>If SUBNAME or BLOCK is omitted, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;s in standard string comparison order. If SUBNAME is specified, it gives the name of a subroutine that returns an integer less than, equal to, or greater than &lt;code&gt;0&lt;/code&gt; , depending on how the elements of the list are to be ordered. (The &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; and &lt;code&gt;cmp&lt;/code&gt; operators are extremely useful in such routines.) SUBNAME may be a scalar variable name (unsubscripted), in which case the value provides the name of (or a reference to) the actual subroutine to use. In place of a SUBNAME, you can provide a BLOCK as an anonymous, in-line sort subroutine.</source>
          <target state="translated">SUBNAMEまたはBLOCKが省略されている場合、sを標準の文字列比較順に &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 。 SUBNAMEが指定されている場合は、リストの要素の順序付け方法に応じて、 &lt;code&gt;0&lt;/code&gt; より小さい、等しい、または0より大きい整数を返すサブルーチンの名前を指定します。 （ &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; および &lt;code&gt;cmp&lt;/code&gt; 演算子は、このようなルーチンで非常に役立ちます。）SUBNAMEは、スカラー変数名（添え字なし）の場合があります。この場合、値は、使用する実際のサブルーチンの名前（または参照）を提供します。 SUBNAMEの代わりに、BLOCKを匿名のインラインソートサブルーチンとして提供できます。</target>
        </trans-unit>
        <trans-unit id="6247155ef0e0949eed5f5b9ad662fcdc5e0b1a55" translate="yes" xml:space="preserve">
          <source>If SUBNAME or BLOCK is omitted, &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt;s in standard string comparison order. If SUBNAME is specified, it gives the name of a subroutine that returns an integer less than, equal to, or greater than &lt;code&gt;0&lt;/code&gt; , depending on how the elements of the list are to be ordered. (The &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; and &lt;code&gt;cmp&lt;/code&gt; operators are extremely useful in such routines.) SUBNAME may be a scalar variable name (unsubscripted), in which case the value provides the name of (or a reference to) the actual subroutine to use. In place of a SUBNAME, you can provide a BLOCK as an anonymous, in-line sort subroutine.</source>
          <target state="translated">SUBNAMEまたはBLOCKが省略されている場合、sを標準の文字列比較順に &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 。 SUBNAMEが指定されている場合は、リストの要素の順序付け方法に応じて、 &lt;code&gt;0&lt;/code&gt; より小さい、等しい、または0より大きい整数を返すサブルーチンの名前を指定します。 （ &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; および &lt;code&gt;cmp&lt;/code&gt; 演算子は、このようなルーチンで非常に役立ちます。）SUBNAMEは、スカラー変数名（添え字なし）の場合があります。この場合、値は、使用する実際のサブルーチンの名前（または参照）を提供します。 SUBNAMEの代わりに、BLOCKを匿名のインラインソートサブルーチンとして提供できます。</target>
        </trans-unit>
        <trans-unit id="e18998d6455bfefedf4a886cffa8b0ef65421368" translate="yes" xml:space="preserve">
          <source>If TEMPLATE requires more arguments than &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; is given, &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; assumes additional &lt;code&gt;&quot;&quot;&lt;/code&gt; arguments. If TEMPLATE requires fewer arguments than given, extra arguments are ignored.</source>
          <target state="translated">TEMPLATEが&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; に&lt;/a&gt;指定されているよりも多くの引数を必要とする場合、&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;は追加の &lt;code&gt;&quot;&quot;&lt;/code&gt; 引数を想定します。TEMPLATEに必要な引数が指定より少ない場合、余分な引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="3a13dff4a6a23dd2b6f1693ccf60f7a4736231a4" translate="yes" xml:space="preserve">
          <source>If TEMPLATE requires more arguments than pack() is given, pack() assumes additional &lt;code&gt;&quot;&quot;&lt;/code&gt; arguments. If TEMPLATE requires fewer arguments than given, extra arguments are ignored.</source>
          <target state="translated">TEMPLATEがpack（）が指定されているよりも多くの引数を必要とする場合、pack（）は追加の &lt;code&gt;&quot;&quot;&lt;/code&gt; 引数を想定します。TEMPLATEが指定したよりも少ない引数を必要とする場合、余分な引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="6967af7192ea24b7740b2426c675e802544ce8cd" translate="yes" xml:space="preserve">
          <source>If UTF-8 is not an option, it is recommended that one use a simple source filter, such as that provided by &lt;a href=&quot;Filter::Encoding&quot;&gt;Filter::Encoding&lt;/a&gt; on CPAN or this pragma's own &lt;code&gt;Filter&lt;/code&gt; option (see below).</source>
          <target state="translated">UTF-8がオプションでない場合は、CPANの&lt;a href=&quot;Filter::Encoding&quot;&gt;Filter :: Encoding&lt;/a&gt;またはこのプラグマ独自の &lt;code&gt;Filter&lt;/code&gt; オプション（以下を参照）によって提供されるような単純なソースフィルターを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fcb29e6534b18adbdd32bd69eb254a626c55b85e" translate="yes" xml:space="preserve">
          <source>If UUID tagging is enabled (See &lt;a href=&quot;Test::API&quot;&gt;Test::API&lt;/a&gt;) then any event that has made its way through a hub will be tagged with a UUID. A newly created event will not yet be tagged in most cases.</source>
          <target state="translated">UUIDタグ付けが有効になっている場合（&lt;a href=&quot;Test::API&quot;&gt;Test :: APIを&lt;/a&gt;参照）、ハブを通過したイベントはすべてUUIDでタグ付けされます。ほとんどの場合、新しく作成されたイベントはまだタグ付けされていません。</target>
        </trans-unit>
        <trans-unit id="8de2a274592488096eee3c1b57b817384e167ac5" translate="yes" xml:space="preserve">
          <source>If UUID tagging is enabled (see &lt;a href=&quot;Test2::API&quot;&gt;Test2::API&lt;/a&gt;) then the hub will have a UUID.</source>
          <target state="translated">UUIDタグ付けが有効になっている場合（&lt;a href=&quot;Test2::API&quot;&gt;Test2 :: APIを&lt;/a&gt;参照）、ハブにはUUIDがあります。</target>
        </trans-unit>
        <trans-unit id="71eeb63629102190a2491abe8e8c2cd018b18803" translate="yes" xml:space="preserve">
          <source>If Unix level &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;lseek&lt;/code&gt; is not appropriate for (say) sockets then the &quot;unix&quot; layer can be replaced (at open time or even dynamically) with a &quot;socket&quot; layer.</source>
          <target state="translated">Unixレベルの &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;lseek&lt;/code&gt; が（たとえば）ソケットに適さない場合、「unix」レ​​イヤーを（オープン時または動的に）「ソケット」レイヤーに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="4ad97d1c9f2c86a7f96565662052eb1a286aaff7" translate="yes" xml:space="preserve">
          <source>If Unix level &lt;code&gt;read&lt;/code&gt;/&lt;code&gt;write&lt;/code&gt;/&lt;code&gt;lseek&lt;/code&gt; is not appropriate for (say) sockets then the &quot;unix&quot; layer can be replaced (at open time or even dynamically) with a &quot;socket&quot; layer.</source>
          <target state="translated">Unixレベルの &lt;code&gt;read&lt;/code&gt; / &lt;code&gt;write&lt;/code&gt; / &lt;code&gt;lseek&lt;/code&gt; が（たとえば）ソケットに適していない場合は、「unix」レ​​イヤーを（オープン時または動的に）「ソケット」レイヤーに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="a45f1369b52ed08794c418037dc006ec04f43394" translate="yes" xml:space="preserve">
          <source>If VARIABLE is a hash, it chomps the hash's values, but not its keys, resetting the &lt;a href=&quot;#each-HASH&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; iterator in the process.</source>
          <target state="translated">VARIABLEがハッシュの場合、ハッシュの値はチョップしますが、キーはチョップせず、プロセス内の&lt;a href=&quot;#each-HASH&quot;&gt; &lt;code&gt;each&lt;/code&gt; &lt;/a&gt;イテレーターをリセットします。</target>
        </trans-unit>
        <trans-unit id="adc19b00b38eb533e11534d089e59dc6d18d7552" translate="yes" xml:space="preserve">
          <source>If VARIABLE is a hash, it chomps the hash's values, but not its keys, resetting the &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; iterator in the process.</source>
          <target state="translated">VARIABLEがハッシュの場合、ハッシュの値は変更されますが、キーは変更されず、プロセス内の &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 反復子がリセットされます。</target>
        </trans-unit>
        <trans-unit id="dafdb7a192ed4ebf56859ae04ece9ebbc7f84c1d" translate="yes" xml:space="preserve">
          <source>If VARIABLE is a hash, it chomps the hash's values, but not its keys, resetting the &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; iterator in the process.</source>
          <target state="translated">VARIABLEがハッシュの場合、ハッシュの値は変更されますが、キーは変更されず、プロセス内の &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 反復子がリセットされます。</target>
        </trans-unit>
        <trans-unit id="748a0699c69c26183bfd333929c05d94a8696f0e" translate="yes" xml:space="preserve">
          <source>If VERSION is provided, &lt;a href=&quot;#package-NAMESPACE&quot;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt; sets the &lt;code&gt;$VERSION&lt;/code&gt; variable in the given namespace to a &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; object with the VERSION provided. VERSION must be a &quot;strict&quot; style version number as defined by the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module: a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading 'v' character and at least three components. You should set &lt;code&gt;$VERSION&lt;/code&gt; only once per package.</source>
          <target state="translated">VERSIONが指定されている場合、&lt;a href=&quot;#package-NAMESPACE&quot;&gt; &lt;code&gt;package&lt;/code&gt; &lt;/a&gt;は、指定された名前空間の &lt;code&gt;$VERSION&lt;/code&gt; 変数を、指定されたVERSIONを持つ&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;オブジェクトに設定します。VERSIONは、&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;モジュールで定義されている「厳密な」スタイルのバージョン番号である必要があります。べき乗のない正の10進数（整数または小数）、または先頭に「v」文字があり、少なくとも3つあるドット付き10進数のv文字列です。コンポーネント。 &lt;code&gt;$VERSION&lt;/code&gt; はパッケージごとに1回だけ設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a9c742cbb93e88b3095e1366a5e0ca8820689343" translate="yes" xml:space="preserve">
          <source>If VERSION is provided, &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; sets the &lt;code&gt;$VERSION&lt;/code&gt; variable in the given namespace to a &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; object with the VERSION provided. VERSION must be a &quot;strict&quot; style version number as defined by the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module: a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading 'v' character and at least three components. You should set &lt;code&gt;$VERSION&lt;/code&gt; only once per package.</source>
          <target state="translated">VERSIONが指定されている場合、 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; は、指定されたネームスペースの &lt;code&gt;$VERSION&lt;/code&gt; 変数を、VERSIONが指定されている&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;オブジェクトに設定します。VERSIONは、&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;モジュールで定義された「厳密な」スタイルのバージョン番号である必要があります。指数のない正の10進数（整数または10進数の小数部）、または先頭に「v」文字があり、少なくとも3つのドット付き10進数のv文字列コンポーネント。 &lt;code&gt;$VERSION&lt;/code&gt; は、パッケージごとに1回だけ設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4bfad8b6a5366a04a7526e534903361716196c11" translate="yes" xml:space="preserve">
          <source>If VERSION is provided, &lt;code&gt;&lt;a href=&quot;package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; sets the &lt;code&gt;$VERSION&lt;/code&gt; variable in the given namespace to a &lt;a href=&quot;../version&quot;&gt;version&lt;/a&gt; object with the VERSION provided. VERSION must be a &quot;strict&quot; style version number as defined by the &lt;a href=&quot;../version&quot;&gt;version&lt;/a&gt; module: a positive decimal number (integer or decimal-fraction) without exponentiation or else a dotted-decimal v-string with a leading 'v' character and at least three components. You should set &lt;code&gt;$VERSION&lt;/code&gt; only once per package.</source>
          <target state="translated">VERSIONが指定されている場合、 &lt;code&gt;&lt;a href=&quot;package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; は、指定されたネームスペースの &lt;code&gt;$VERSION&lt;/code&gt; 変数を、VERSIONが指定されている&lt;a href=&quot;../version&quot;&gt;バージョン&lt;/a&gt;オブジェクトに設定します。VERSIONは、&lt;a href=&quot;../version&quot;&gt;バージョン&lt;/a&gt;モジュールで定義された「厳密な」スタイルのバージョン番号である必要があります。指数のない正の10進数（整数または10進数の小数部）、または先頭に「v」文字があり、少なくとも3つのドット付き10進数のv文字列コンポーネント。 &lt;code&gt;$VERSION&lt;/code&gt; は、パッケージごとに1回だけ設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="562d6a085d036935dc458e97eb2b83b32b781d44" translate="yes" xml:space="preserve">
          <source>If a</source>
          <target state="translated">の場合は</target>
        </trans-unit>
        <trans-unit id="d95c8bef773580433166be7c2c32b85e8e849e6f" translate="yes" xml:space="preserve">
          <source>If a 2-digit code is entered, it is converted to 3 digits by prepending a 0.</source>
          <target state="translated">2桁のコードが入力された場合は、0を先頭にして3桁に変換されます。</target>
        </trans-unit>
        <trans-unit id="e64a7d7369be70b0218a1b95be79c2c2deb28c1d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; is used in a context that is looking for a list, a list comprising all input lines is returned, one line per list element. It's easy to grow to a rather large data space this way, so use with care.</source>
          <target state="translated">&lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; がリストを&lt;i&gt;検索&lt;/i&gt;するコンテキストで使用される場合、すべての入力行を含むリストが返されます（リスト要素ごとに1行）。この方法でかなり大きなデータ領域に拡張するのは簡単なので、注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="259cdf2dd383c0f84fbe2ca3b6aceeeeaeccb785" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; can find a &lt;code&gt;CxEVAL&lt;/code&gt; block on the context stack, then the stack is popped to that level and the return op in that block is assigned to &lt;code&gt;PL_restartop&lt;/code&gt; ; then a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; is performed. This normally passes control back to the guard. In the case of &lt;code&gt;perl_run&lt;/code&gt; and &lt;code&gt;call_sv&lt;/code&gt; , a non-null &lt;code&gt;PL_restartop&lt;/code&gt; triggers re-entry to the runops loop. The is the normal way that &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;croak&lt;/code&gt; is handled within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; がコンテキストスタックで &lt;code&gt;CxEVAL&lt;/code&gt; ブロックを見つけることができる場合、スタックはそのレベルにポップされ、そのブロックのリターンオペレーションが &lt;code&gt;PL_restartop&lt;/code&gt; に割り当てられます。次に、 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; が実行されます。これは通常、制御をガードに戻します。以下の場合に &lt;code&gt;perl_run&lt;/code&gt; と &lt;code&gt;call_sv&lt;/code&gt; 、非ヌル &lt;code&gt;PL_restartop&lt;/code&gt; にトリガ再入ループをrunops。これは、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;croak&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 内で処理される通常の方法です。</target>
        </trans-unit>
        <trans-unit id="2e842b426c14ec5c17e64ac341313bcce514b5ce" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), the case map used by &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\U&lt;/code&gt; is taken from the current locale. If Unicode (for example, &lt;code&gt;\N{}&lt;/code&gt; or code points of 0x100 or beyond) is being used, the case map used by &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\U&lt;/code&gt; is as defined by Unicode. That means that case-mapping a single character can sometimes produce a sequence of several characters. Under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; produces the same results as &lt;code&gt;\L&lt;/code&gt; for all locales but a UTF-8 one, where it instead uses the Unicode definition.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 含むフォーム &lt;code&gt;LC_CTYPE&lt;/code&gt; は有効である（参照&lt;a href=&quot;perllocale&quot;&gt;はperllocale&lt;/a&gt;）で使用される場合、地図 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\U&lt;/code&gt; 現在のロケールから取られます。 Unicode（たとえば、 &lt;code&gt;\N{}&lt;/code&gt; または0x100以上のコードポイント）が使用されている場合、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\U&lt;/code&gt; 使用されるケースマップは、Unicodeで定義されているとおりです。つまり、1つの文字を大文字と小文字にマッピングすると、複数の文字のシーケンスが生成されることがあります。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; の下では、 &lt;code&gt;\F&lt;/code&gt; は次と同じ結果を生成します &lt;code&gt;\L&lt;/code&gt; 以外のすべてのロケール。ただし、代わりにUnicode定義を使用するUTF-8ロケール。</target>
        </trans-unit>
        <trans-unit id="549e5fcf45cf7944f8141812970bb7a27ad11345" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Net::POP3&lt;/code&gt; object goes out of scope before &lt;code&gt;quit&lt;/code&gt; method is called then the &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; method will called before the connection is closed. This means that any messages marked to be deleted will not be.</source>
          <target state="translated">場合 &lt;code&gt;Net::POP3&lt;/code&gt; オブジェクトがスコープ外に出る前に &lt;code&gt;quit&lt;/code&gt; 方法は、その後、呼び出された &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; 接続が閉じられる前に、メソッドが呼び出されます。つまり、削除対象としてマークされたメッセージは削除されません。</target>
        </trans-unit>
        <trans-unit id="a47a3059ef284fb95d6b9b8a42daebf746f1630a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Net::POP3&lt;/code&gt; object goes out of scope before &lt;code&gt;quit&lt;/code&gt; method is called then the &lt;code&gt;reset&lt;/code&gt; method will called before the connection is closed. This means that any messages marked to be deleted will not be.</source>
          <target state="translated">場合 &lt;code&gt;Net::POP3&lt;/code&gt; オブジェクトがスコープ外に出る前に &lt;code&gt;quit&lt;/code&gt; 方法は、その後、呼び出された &lt;code&gt;reset&lt;/code&gt; 接続が閉じられる前に、メソッドが呼び出されます。これは、削除対象としてマークされたメッセージは削除されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="50ca4e33c078b9485b94c680710b01ed3f239b5b" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;die&lt;/code&gt; can find a &lt;code&gt;CxEVAL&lt;/code&gt; block on the context stack, then the stack is popped to that level and the return op in that block is assigned to &lt;code&gt;PL_restartop&lt;/code&gt;; then a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; is performed. This normally passes control back to the guard. In the case of &lt;code&gt;perl_run&lt;/code&gt; and &lt;code&gt;call_sv&lt;/code&gt;, a non-null &lt;code&gt;PL_restartop&lt;/code&gt; triggers re-entry to the runops loop. The is the normal way that &lt;code&gt;die&lt;/code&gt; or &lt;code&gt;croak&lt;/code&gt; is handled within an &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;die&lt;/code&gt; がコンテキストスタックで &lt;code&gt;CxEVAL&lt;/code&gt; ブロックを見つけることができる場合、スタックはそのレベルにポップされ、そのブロックのリターン &lt;code&gt;PL_restartop&lt;/code&gt; 割り当てられます。次に、 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; が実行されます。これは通常、制御をガードに戻します。以下の場合に &lt;code&gt;perl_run&lt;/code&gt; と &lt;code&gt;call_sv&lt;/code&gt; 、非ヌル &lt;code&gt;PL_restartop&lt;/code&gt; にトリガ再入ループをrunops。これは、 &lt;code&gt;eval&lt;/code&gt; 内で &lt;code&gt;die&lt;/code&gt; または &lt;code&gt;croak&lt;/code&gt; が処理される通常の方法です。</target>
        </trans-unit>
        <trans-unit id="bb19ff7cc72a6855d9adc1ecae2faf667648c06d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;glob&lt;/code&gt; expression is used as the condition of a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loop, then it will be implicitly assigned to &lt;code&gt;$_&lt;/code&gt;. If either a &lt;code&gt;glob&lt;/code&gt; expression or an explicit assignment of a &lt;code&gt;glob&lt;/code&gt; expression to a scalar is used as a &lt;code&gt;while&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt; condition, then the condition actually tests for definedness of the expression's value, not for its regular truth value.</source>
          <target state="translated">&lt;code&gt;glob&lt;/code&gt; 式が &lt;code&gt;while&lt;/code&gt; または &lt;code&gt;for&lt;/code&gt; ループの条件として使用される場合、それは暗黙的に &lt;code&gt;$_&lt;/code&gt; 割り当てられます。 &lt;code&gt;glob&lt;/code&gt; 式またはスカラーへの &lt;code&gt;glob&lt;/code&gt; 式の明示的な割り当てのいずれかが &lt;code&gt;while&lt;/code&gt; / &lt;code&gt;for&lt;/code&gt; 条件として使用される場合、条件は実際には、通常の真理値ではなく、式の値の定義をテストします。</target>
        </trans-unit>
        <trans-unit id="c439913b54ad4e9472f5fab7228ffbede4917134" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;timeout&lt;/code&gt; in seconds is provided, it is used when a timeout is not given to the ping() method (below). The timeout must be greater than 0 and the default, if not specified, is 5 seconds.</source>
          <target state="translated">場合 &lt;code&gt;timeout&lt;/code&gt; 秒が提供されるタイムアウトのping（）メソッド（以下）に与えられていない場合、それが使用されます。タイムアウトは0より大きくする必要があり、指定されていない場合、デフォルトは5秒です。</target>
        </trans-unit>
        <trans-unit id="05512b28e37ad32af54fde978f1e0fe4ada4db04" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;use locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), the case map used by &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt;, and &lt;code&gt;\U&lt;/code&gt; is taken from the current locale. If Unicode (for example, &lt;code&gt;\N{}&lt;/code&gt; or code points of 0x100 or beyond) is being used, the case map used by &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt;, and &lt;code&gt;\U&lt;/code&gt; is as defined by Unicode. That means that case-mapping a single character can sometimes produce a sequence of several characters. Under &lt;code&gt;use locale&lt;/code&gt;, &lt;code&gt;\F&lt;/code&gt; produces the same results as &lt;code&gt;\L&lt;/code&gt; for all locales but a UTF-8 one, where it instead uses the Unicode definition.</source>
          <target state="translated">場合 &lt;code&gt;use locale&lt;/code&gt; 含むフォーム &lt;code&gt;LC_CTYPE&lt;/code&gt; は有効である（参照&lt;a href=&quot;perllocale&quot;&gt;はperllocale&lt;/a&gt;）で使用される場合、地図 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\U&lt;/code&gt; 現在のロケールから取られます。 Unicode（たとえば、 &lt;code&gt;\N{}&lt;/code&gt; または0x100以上のコードポイント）が使用されている場合、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\U&lt;/code&gt; 使用されるケースマップはUnicodeで定義されているとおりです。つまり、1つの文字を大文字と小文字を区別してマッピングすると、複数の文字のシーケンスが生成される場合があります。下で &lt;code&gt;use locale&lt;/code&gt; 、 &lt;code&gt;\F&lt;/code&gt; 同じ結果生成 &lt;code&gt;\L&lt;/code&gt; UTF-8ロケールを除くすべてのロケールで、代わりにUnicode定義を使用します。</target>
        </trans-unit>
        <trans-unit id="043d74f31a25532198b1527d3ae5c4b1da9715ef" translate="yes" xml:space="preserve">
          <source>If a CODE reference is not used, a</source>
          <target state="translated">CODE参照が使用されていない場合は</target>
        </trans-unit>
        <trans-unit id="e12066458359083bdcf249636aa07df8a14816c7" translate="yes" xml:space="preserve">
          <source>If a CODE reference is used then a</source>
          <target state="translated">CODE参照が使用されている場合は</target>
        </trans-unit>
        <trans-unit id="f9ad0abaf0eff45a492a44f419b412cf87f4dd03" translate="yes" xml:space="preserve">
          <source>If a FILEHANDLE is supplied, it must be writable and opened in append mode (i.e., use &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FH, '&amp;gt;&amp;gt;filename')&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen(FH,...,O_APPEND|O_RDWR)&lt;/a&gt;&lt;/code&gt;. If a filename is supplied, it should not be held open elsewhere. (Win32)</source>
          <target state="translated">FILEHANDLEを指定する場合は、書き込み可能であり、追加モードで開く必要があります（つまり、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FH, '&amp;gt;&amp;gt;filename')&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen(FH,...,O_APPEND|O_RDWR)&lt;/a&gt;&lt;/code&gt; ます。ファイル名を指定した場合は、他の場所で開いたままにしないでください（Win32）。</target>
        </trans-unit>
        <trans-unit id="4d47de1f691dd0b1134ca70f07b0ea6e9d81891d" translate="yes" xml:space="preserve">
          <source>If a Perl script begins with the Unicode &lt;code&gt;BOM&lt;/code&gt; (UTF-16LE, UTF16-BE), or if the script looks like non-&lt;code&gt;BOM&lt;/code&gt;-marked UTF-16 of either endianness, Perl will correctly read in the script as the appropriate Unicode encoding.</source>
          <target state="translated">Perlのスクリプトは、Unicodeで始まる場合 &lt;code&gt;BOM&lt;/code&gt; （UTF-16LE、UTF16-BE）、または非のようなスクリプトに見える場合 &lt;code&gt;BOM&lt;/code&gt; -marked UTF16のいずれかのエンディアンの、Perlは正しく、適切なUnicodeエンコーディングとしてスクリプトを読み込みます。</target>
        </trans-unit>
        <trans-unit id="24e2f604f1de94503f88fcf2788fa5b11ed58ca8" translate="yes" xml:space="preserve">
          <source>If a Perl script begins with the bytes that form the UTF-8 encoding of the Unicode BYTE ORDER MARK (&lt;code&gt;BOM&lt;/code&gt;, see &lt;a href=&quot;#Unicode-Encodings&quot;&gt;&quot;Unicode Encodings&quot;&lt;/a&gt;), those bytes are completely ignored.</source>
          <target state="translated">PerlスクリプトがUnicodeBYTE ORDER MARKのUTF-8エンコーディングを形成するバイトで始まる場合（ &lt;code&gt;BOM&lt;/code&gt; 、&lt;a href=&quot;#Unicode-Encodings&quot;&gt;「Unicodeエンコーディング」を&lt;/a&gt;参照）、それらのバイトは完全に無視されます。</target>
        </trans-unit>
        <trans-unit id="3af3f41934dd0fe8f979cc12d4f4c701b5fb0dcf" translate="yes" xml:space="preserve">
          <source>If a Pod processor sees any command other than the ones listed above (like &quot;=head&quot;, or &quot;=haed1&quot;, or &quot;=stuff&quot;, or &quot;=cuttlefish&quot;, or &quot;=w123&quot;), that processor must by default treat this as an error. It must not process the paragraph beginning with that command, must by default warn of this as an error, and may abort the parse. A Pod parser may allow a way for particular applications to add to the above list of known commands, and to stipulate, for each additional command, whether formatting codes should be processed.</source>
          <target state="translated">Podプロセッサが上記以外のコマンド(例えば&quot;=head&quot;,&quot;=haed1&quot;,&quot;=stuff&quot;,&quot;=cuttlefish&quot;,&quot;=w123&quot;)を見た場合、そのプロセッサはデフォルトでこれをエラーとして扱わなければならない。そのコマンドで始まる段落を処理してはならず、デフォルトでこれをエラーとして警告し、解析を中止しなければなりません。Podパーサは、特定のアプリケーションが上記の既知のコマンドのリストに追加し、追加されたコマンドごとに書式コードを処理するかどうかを規定することができます。</target>
        </trans-unit>
        <trans-unit id="84d7b60c1fec814496b3c4bc1816a8d5d03c5699" translate="yes" xml:space="preserve">
          <source>If a Pod processor sees any formatting code other than the ones listed above (as in &quot;N&amp;lt;...&amp;gt;&quot;, or &quot;Q&amp;lt;...&amp;gt;&quot;, etc.), that processor must by default treat this as an error. A Pod parser may allow a way for particular applications to add to the above list of known formatting codes; a Pod parser might even allow a way to stipulate, for each additional command, whether it requires some form of special processing, as L&amp;lt;...&amp;gt; does.</source>
          <target state="translated">ポッドプロセッサが上記以外のフォーマットコード（「N &amp;lt;...&amp;gt;」、「Q &amp;lt;...&amp;gt;」など）を検出した場合、そのプロセッサはデフォルトでこれをエラーとして処理する必要があります。 。ポッドパーサーにより、特定のアプリケーションが上記の既知のフォーマットコードのリストに追加する方法が可能になる場合があります。ポッドパーサーは、追加のコマンドごとに、L &amp;lt;...&amp;gt;のように何らかの特別な処理が必要かどうかを規定する方法を許可する場合もあります。</target>
        </trans-unit>
        <trans-unit id="a69d2c6e5370a359253a714b367c144cea0b32a3" translate="yes" xml:space="preserve">
          <source>If a SKIP directive is included with the plan, this method will return it.</source>
          <target state="translated">計画にSKIP指令が含まれている場合、このメソッドはそれを返します。</target>
        </trans-unit>
        <trans-unit id="fc36fbb42452cd08e5fbc977b40571fcb5ba6163" translate="yes" xml:space="preserve">
          <source>If a SKIP directive was included with the plan, this method will return the explanation, if any.</source>
          <target state="translated">計画にSKIP指令が含まれていた場合、このメソッドは説明を返します。</target>
        </trans-unit>
        <trans-unit id="21c8d4e7e9fdf0b61712f2ee7b9d5069189ec21c" translate="yes" xml:space="preserve">
          <source>If a TODO test does succeed, then the feature in question shouldn't be on the TODO list, now should it?</source>
          <target state="translated">もしTODOテストが成功した場合、問題の機能はTODOリストにあるべきではありません。</target>
        </trans-unit>
        <trans-unit id="2e556764eb70dadb149264cc71dd4704e1aa8ecf" translate="yes" xml:space="preserve">
          <source>If a TODO test passes, &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt; will report it &quot;UNEXPECTEDLY SUCCEEDED&quot;. When that happens, remove the TODO block with &lt;code&gt;local $TODO&lt;/code&gt; and turn it into a real test.</source>
          <target state="translated">TODOテストに合格すると、&lt;a href=&quot;Test::Harness&quot;&gt;Test :: Harness&lt;/a&gt;は「UNEXPECTEDLYSUCCEEDED」と報告します。その場合は、 &lt;code&gt;local $TODO&lt;/code&gt; を使用してTODOブロックを削除し、実際のテストに変えてください。</target>
        </trans-unit>
        <trans-unit id="5bc13fa8b4104f174148a214dadae282567de13a" translate="yes" xml:space="preserve">
          <source>If a character that isn't an octal digit is encountered, a warning is raised, and the value is based on the octal digits before it, discarding it and all following characters up to the closing brace. It is a fatal error if there are no octal digits at all.</source>
          <target state="translated">8進数ではない文字に遭遇した場合は警告が表示され、その前の8進数を基準にして、その文字とそれに続く中括弧までのすべての文字を破棄して値を計算します。8進数が全くない場合は致命的なエラーとなります。</target>
        </trans-unit>
        <trans-unit id="b895fdf53ccf75b6f1d6a0f2ed9f43fb2b3e2bde" translate="yes" xml:space="preserve">
          <source>If a check for non-empty is what you wanted then just put it in boolean context (see &lt;a href=&quot;perldata#Scalar-values&quot;&gt;&quot;Scalar values&quot; in perldata&lt;/a&gt;):</source>
          <target state="translated">空でないことのチェックが必要な場合は、ブールコンテキストに配置します（&lt;a href=&quot;perldata#Scalar-values&quot;&gt;perldataの「スカラー値」を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="22ce7778730981e7a416c117aaec163fa0497dba" translate="yes" xml:space="preserve">
          <source>If a check for non-empty is what you wanted then just put it in boolean context (see &lt;a href=&quot;perldata#Scalar-values&quot;&gt;Scalar values in perldata&lt;/a&gt;):</source>
          <target state="translated">空でないかどうかのチェックが必要な場合は、ブール値のコンテキストに入れてください（&lt;a href=&quot;perldata#Scalar-values&quot;&gt;perldataのスカラー値を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7bbe66a04a030c6e054fb0dfd4a30c2a7ed6df30" translate="yes" xml:space="preserve">
          <source>If a child calls &quot;skip_all&quot; in the plan, a &lt;code&gt;Test::Builder::Exception&lt;/code&gt; is thrown. Trap this error, call &lt;code&gt;finalize()&lt;/code&gt; and don't run any more tests on the child.</source>
          <target state="translated">プランで子が「skip_all」を呼び出すと、 &lt;code&gt;Test::Builder::Exception&lt;/code&gt; がスローされます。このエラーをトラップし、 &lt;code&gt;finalize()&lt;/code&gt; を呼び出して、子に対してこれ以上テストを実行しないでください。</target>
        </trans-unit>
        <trans-unit id="d87e3904bd84922ce3c7497d798c1def1d62966e" translate="yes" xml:space="preserve">
          <source>If a collation sequence is not given, a default collation sequence is used. If the base is less than or equal to 36, the collation sequence is the string consisting of the 36 characters &quot;0&quot; to &quot;9&quot; and &quot;A&quot; to &quot;Z&quot;. In this case, the letter case in the input is ignored. If the base is greater than 36, and smaller than or equal to 62, the collation sequence is the string consisting of the 62 characters &quot;0&quot; to &quot;9&quot;, &quot;A&quot; to &quot;Z&quot;, and &quot;a&quot; to &quot;z&quot;. A base larger than 62 requires the collation sequence to be specified explicitly.</source>
          <target state="translated">照合順序が与えられない場合、デフォルトの照合順序が使用されます。ベースが36以下の場合、照合順序は36文字 &quot;0&quot;~&quot;9 &quot;と &quot;A&quot;~&quot;Z &quot;からなる文字列となる。この場合、入力された文字の大文字小文字は無視されます。ベースが36より大きく、62以下の場合、照合順序は、62文字の&quot;0&quot;から&quot;9&quot;、&quot;A &quot;から &quot;Z&quot;、および &quot;a &quot;から &quot;z &quot;からなる文字列である。ベースが62より大きい場合は、照合順序を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e2b6a0e0e45f39177eb31d01e15e452bd57cce8" translate="yes" xml:space="preserve">
          <source>If a comparison subroutine (comp) is defined, it must return less than zero, zero, or greater than zero, if the first comparand is less than, equal, or greater than the second comparand.</source>
          <target state="translated">比較サブルーチン(comp)が定義されている場合、第1のコンパランドが第2のコンパランドより小さいか、等しいか、または大きい場合は、ゼロより小さいか、ゼロより大きいか、またはゼロより大きいかを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="6bcefbb01c642f7f0fc9b06ad8c1d9b86690b30e" translate="yes" xml:space="preserve">
          <source>If a config variable name ends with &lt;code&gt;list&lt;/code&gt; , it is a list. &lt;code&gt;o conf
KEY &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; removes the first element of the list, &lt;code&gt;o conf KEY &lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; removes the last element of the list. &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; LIST&lt;/code&gt; prepends a list of values to the list, &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; LIST&lt;/code&gt; appends a list of valued to the list.</source>
          <target state="translated">構成変数名が &lt;code&gt;list&lt;/code&gt; で終わる場合、それはリストです。 &lt;code&gt;o conf KEY &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; はリストの最初の要素を削除し、 &lt;code&gt;o conf KEY &lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; はリストの最後の要素を削除します。 &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; LIST&lt;/code&gt; は値のリストをリストの先頭に追加します &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; LIST&lt;/code&gt; は値のリストをリストに追加します。</target>
        </trans-unit>
        <trans-unit id="5109117db036bd8645f50a5e04d368af63084ec5" translate="yes" xml:space="preserve">
          <source>If a container object, such as a hash or array, is locked, all the elements of that container are not locked. For example, if a thread does a &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt; @a&lt;/code&gt; , any other thread doing a &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock($a[12])&lt;/a&gt;&lt;/code&gt; won't block.</source>
          <target state="translated">ハッシュや配列などのコンテナーオブジェクトがロックされている場合、そのコンテナーのすべての要素はロックされません。スレッドがない場合たとえば、 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt; @a&lt;/code&gt; 、やって他のスレッド &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock($a[12])&lt;/a&gt;&lt;/code&gt; ブロックされません。</target>
        </trans-unit>
        <trans-unit id="0b9475795c5acef3f94e436ae886fcd1f2079b25" translate="yes" xml:space="preserve">
          <source>If a container object, such as a hash or array, is locked, all the elements of that container are not locked. For example, if a thread does a &lt;code&gt;lock @a&lt;/code&gt;, any other thread doing a &lt;code&gt;lock($a[12])&lt;/code&gt; won't block.</source>
          <target state="translated">ハッシュや配列などのコンテナオブジェクトがロックされている場合、そのコンテナのすべての要素はロックされていません。たとえば、スレッドが &lt;code&gt;lock @a&lt;/code&gt; を実行する場合、 &lt;code&gt;lock($a[12])&lt;/code&gt; を実行する他のスレッドはブロックしません。</target>
        </trans-unit>
        <trans-unit id="86e40904bfdd4ce1f2ea77e8cac744710e6b6d3c" translate="yes" xml:space="preserve">
          <source>If a custom key refers to a data structure, a deep clone is returned.</source>
          <target state="translated">カスタムキーがデータ構造を参照している場合、ディープクローンが返されます。</target>
        </trans-unit>
        <trans-unit id="35f34b9c616480c978cfd69625d6aeaae5e87694" translate="yes" xml:space="preserve">
          <source>If a data type is a Map or Map subtype, valid subkeys will be described as well.</source>
          <target state="translated">データ型が Map または Map サブタイプの場合、有効なサブキーも記述されます。</target>
        </trans-unit>
        <trans-unit id="dca4e72f15d2d8185a5bffef1f8b63be490eec41" translate="yes" xml:space="preserve">
          <source>If a default timeout ($def_timeout) in seconds is provided, it is used when a timeout is not given to the ping() method (below). The timeout must be greater than 0 and the default, if not specified, is 5 seconds.</source>
          <target state="translated">デフォルトのタイムアウト ($def_timeout)を秒単位で指定すると、ping()メソッド (後述)にタイムアウトが与えられていない場合に使用されます。タイムアウトは 0 よりも大きくなければならず、指定されていない場合のデフォルトは 5 秒です。</target>
        </trans-unit>
        <trans-unit id="9cb3d5a547282377cc66b4c5457632db46bb8ed9" translate="yes" xml:space="preserve">
          <source>If a dereference operator is overloaded then it must return a</source>
          <target state="translated">参照元演算子がオーバーロードされている場合は</target>
        </trans-unit>
        <trans-unit id="fe98464b03f834d1a964476866ec0454738cfc5e" translate="yes" xml:space="preserve">
          <source>If a directory name is specified, Perl will switch to that directory before running the program. The &lt;b&gt;-x&lt;/b&gt; switch controls only the disposal of leading garbage. The program must be terminated with &lt;code&gt;__END__&lt;/code&gt; if there is trailing garbage to be ignored; the program can process any or all of the trailing garbage via the &lt;code&gt;DATA&lt;/code&gt; filehandle if desired.</source>
          <target state="translated">ディレクトリ名を指定すると、Perlはプログラムを実行する前にそのディレクトリに切り替えます。&lt;b&gt;-x&lt;/b&gt;スイッチは先行するゴミの処分のみを制御します。無視される後続のガベージがある場合、プログラムは &lt;code&gt;__END__&lt;/code&gt; で終了する必要があります。プログラムは、必要に応じて、 &lt;code&gt;DATA&lt;/code&gt; ファイルハンドルを介して後続のガベージの一部またはすべてを処理できます。</target>
        </trans-unit>
        <trans-unit id="5aaf565f5088172c3b4f50e88e5260fa4d43f871" translate="yes" xml:space="preserve">
          <source>If a distribution defines a minimal required perl version, this is added to the output as an additional line of the form:</source>
          <target state="translated">ディストリビューションが最低限必要なPerlのバージョンを定義している場合、これは形式の追加行として出力に追加されます。</target>
        </trans-unit>
        <trans-unit id="42b6266ffbedee9d19b5a6a2dc00e2ab21c075e3" translate="yes" xml:space="preserve">
          <source>If a false value (but not &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideHangul&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false値（ &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; ではない）が渡された場合、 &lt;code&gt;overrideHangul&lt;/code&gt; は効果がありません。 &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; は古いものをリセットします。</target>
        </trans-unit>
        <trans-unit id="d7bef52fc8efdf02d89c731e11f307c96984c0d4" translate="yes" xml:space="preserve">
          <source>If a false value (but not &lt;code&gt;undef&lt;/code&gt;) is passed, &lt;code&gt;overrideHangul&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false値（ &lt;code&gt;undef&lt;/code&gt; ではない）が渡された場合、 &lt;code&gt;overrideHangul&lt;/code&gt; は効果がありません。 &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; は、古いものをリセットします。</target>
        </trans-unit>
        <trans-unit id="41f3060c136c5cb39245327e845028b89a018338" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideCJK&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false値（ &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を含む）が渡された場合、 &lt;code&gt;overrideCJK&lt;/code&gt; は効果がありません。 &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; は古いものをリセットします。</target>
        </trans-unit>
        <trans-unit id="4ce3e5ab6913747cb34ccc5fe411d22f75b39a20" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideOut&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false値（ &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を含む）が渡された場合、 &lt;code&gt;overrideOut&lt;/code&gt; は無効です。 &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; は古いものをリセットします。</target>
        </trans-unit>
        <trans-unit id="2efe2419737305523ab6685944b8e5967c625c40" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;undef&lt;/code&gt;) is passed, &lt;code&gt;overrideCJK&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false値（ &lt;code&gt;undef&lt;/code&gt; を含む）が渡された場合、 &lt;code&gt;overrideCJK&lt;/code&gt; は効果がありません。 &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; は、古いものをリセットします。</target>
        </trans-unit>
        <trans-unit id="b769b78df558ed0ae95630bec3fdf7981f2aba03" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;undef&lt;/code&gt;) is passed, &lt;code&gt;overrideOut&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false値（ &lt;code&gt;undef&lt;/code&gt; を含む）が渡された場合、 &lt;code&gt;overrideOut&lt;/code&gt; は効果がありません。 &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; は、古いものをリセットします。</target>
        </trans-unit>
        <trans-unit id="14cf492ed81687842dddeeef058d5e33b14e6b8c" translate="yes" xml:space="preserve">
          <source>If a field width obtained through &lt;code&gt;*&lt;/code&gt; is negative, it has the same effect as the &lt;code&gt;-&lt;/code&gt; flag: left-justification.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; で取得したフィールド幅が負の場合、 &lt;code&gt;-&lt;/code&gt; フラグと同じ効果があります：左揃え。</target>
        </trans-unit>
        <trans-unit id="b67747c87623a5829c474216ed820d9c376a76fd" translate="yes" xml:space="preserve">
          <source>If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file. Note that the lines are printed automatically. An error occurring during printing is treated as fatal. To suppress printing use the &lt;a href=&quot;#-n&quot;&gt;&quot;-n&quot;&lt;/a&gt; switch. A &lt;b&gt;-p&lt;/b&gt; overrides a &lt;b&gt;-n&lt;/b&gt; switch.</source>
          <target state="translated">引数で指定されたファイルを何らかの理由で開くことができない場合、Perlはそれについて警告し、次のファイルに移動します。行は自動的に印刷されることに注意してください。印刷中に発生したエラーは致命的として扱われます。印刷を抑制するには、&lt;a href=&quot;#-n&quot;&gt;「-n」&lt;/a&gt;スイッチを使用します。&lt;b&gt;-p&lt;/b&gt;オーバーライドA &lt;b&gt;-n&lt;/b&gt;スイッチ。</target>
        </trans-unit>
        <trans-unit id="9605e9893d52ad305cb79e90d906d025024d5412" translate="yes" xml:space="preserve">
          <source>If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file. Note that the lines are printed automatically. An error occurring during printing is treated as fatal. To suppress printing use the &lt;b&gt;-n&lt;/b&gt; switch. A &lt;b&gt;-p&lt;/b&gt; overrides a &lt;b&gt;-n&lt;/b&gt; switch.</source>
          <target state="translated">引数で指定されたファイルを何らかの理由で開くことができない場合、Perlはそのことを警告し、次のファイルに進みます。行は自動的に印刷されることに注意してください。印刷中に発生したエラーは致命的なエラーとして扱われます。印刷を抑制するには、&lt;b&gt;-n&lt;/b&gt;スイッチを使用します。&lt;b&gt;-p&lt;/b&gt;オーバーライドA &lt;b&gt;-n&lt;/b&gt;スイッチ。</target>
        </trans-unit>
        <trans-unit id="7607c4673d0f39465175ed86077289b9bf56cef9" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you read a key from a DBM database.</source>
          <target state="translated">このメソッドでフィルタがインストールされている場合、DBM データベースからキーを読み込むたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ffcdc45cfdda9fabc4fc72ffad32b6bd83924c58" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you read a value from a DBM database.</source>
          <target state="translated">このメソッドでフィルタがインストールされている場合、DBM データベースから値を読み込むたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cd250eca2a3b32b9a72984e5551322c2a78954ba" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you write a key to a DBM database.</source>
          <target state="translated">このメソッドでフィルタがインストールされている場合、DBM データベースにキーを書き込むたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6d4a7b6c0f00f48df8682a8b26e45e64646603ea" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you write a value to a DBM database.</source>
          <target state="translated">このメソッドでフィルタがインストールされている場合、DBMデータベースに値を書き込むたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="07c279eee0e239fdbb7a9180f0e7ca0c343b1372" translate="yes" xml:space="preserve">
          <source>If a finalized set of requirements is cloned, the cloned requirements are not also finalized.</source>
          <target state="translated">確定した要件のセットが複製されている場合、複製された要件も確定していません。</target>
        </trans-unit>
        <trans-unit id="e3c644e7c4d09f78ea460ddc805cbed0f24eef71" translate="yes" xml:space="preserve">
          <source>If a fully qualified $class is given, its abbreviated version is checked first.</source>
          <target state="translated">完全に修飾された$classが与えられた場合、その短縮版が最初にチェックされます。</target>
        </trans-unit>
        <trans-unit id="61efacc190b96b684717f3100b2802427ca3f5f2" translate="yes" xml:space="preserve">
          <source>If a hyphen in a character class cannot syntactically be part of a range, for instance because it is the first or the last character of the character class, or if it immediately follows a range, the hyphen isn't special, and so is considered a character to be matched literally. If you want a hyphen in your set of characters to be matched and its position in the class is such that it could be considered part of a range, you must escape that hyphen with a backslash.</source>
          <target state="translated">文字クラス内のハイフンが構文的に範囲の一部になりえない場合、例えばそれが文字クラスの最初の文字や最後の文字であったり、範囲の直後にある場合は、ハイフンは特別なものではないので、文字通りにマッチされる文字とみなされます。文字の集合の中のハイフンをマッチさせたい場合で、クラス内でのハイフンの位置が範囲の一部とみなされるような場合は、そのハイフンをバックスラッシュでエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="8e9b736d2bd9dc9660e81744f77377a13eb0a302" translate="yes" xml:space="preserve">
          <source>If a key appears more than once in the initializer list of a hash, the last occurrence wins:</source>
          <target state="translated">ハッシュの初期化リストに複数回キーが現れた場合、最後に現れたものが勝ちとなります。</target>
        </trans-unit>
        <trans-unit id="e38101b895429346e058b0e8e435924731bb16b2" translate="yes" xml:space="preserve">
          <source>If a layer provides &lt;code&gt;Open()&lt;/code&gt; it should normally call the &lt;code&gt;Open()&lt;/code&gt; method of next layer down (if any) and then push itself on top if that succeeds. &lt;code&gt;PerlIOBase_open&lt;/code&gt; is provided to do exactly that, so in most cases you don't have to write your own &lt;code&gt;Open()&lt;/code&gt; method. If this method is not defined, other layers may have difficulty pushing themselves on top of it during open.</source>
          <target state="translated">レイヤーが &lt;code&gt;Open()&lt;/code&gt; を提供する場合、通常、次のレイヤーの &lt;code&gt;Open()&lt;/code&gt; メソッドを呼び出し（存在する場合）、成功した場合はそれ自体を上にプッシュします。 &lt;code&gt;PerlIOBase_open&lt;/code&gt; は、まさにそれを行うために提供されているため、ほとんどの場合、独自の &lt;code&gt;Open()&lt;/code&gt; メソッドを記述する必要はありません。このメソッドが定義されていない場合、他のレイヤーが開いているときに、その上に自分自身を押し込むことが困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="73dbe9c1af884c682c784ff2164f939b559495d3" translate="yes" xml:space="preserve">
          <source>If a lexical variable is given an attribute, there is no symbol table to which it belongs, so the symbol table argument (&lt;code&gt;$_[1]&lt;/code&gt; ) is set to the string &lt;code&gt;'LEXICAL'&lt;/code&gt; in that case. Likewise, ascribing an attribute to an anonymous subroutine results in a symbol table argument of &lt;code&gt;'ANON'&lt;/code&gt; .</source>
          <target state="translated">レキシカル変数に属性が指定されている場合、それが属するシンボルテーブルがないため、その場合、シンボルテーブル引数（ &lt;code&gt;$_[1]&lt;/code&gt; ）は文字列 &lt;code&gt;'LEXICAL'&lt;/code&gt; に設定されます。同様に、属性を匿名サブルーチンに割り当てると、シンボルテーブルの引数は &lt;code&gt;'ANON'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e69004ab41c9f2ba069a062aa5bbadc27b894ffc" translate="yes" xml:space="preserve">
          <source>If a lexical variable is given an attribute, there is no symbol table to which it belongs, so the symbol table argument (&lt;code&gt;$_[1]&lt;/code&gt;) is set to the string &lt;code&gt;'LEXICAL'&lt;/code&gt; in that case. Likewise, ascribing an attribute to an anonymous subroutine results in a symbol table argument of &lt;code&gt;'ANON'&lt;/code&gt;.</source>
          <target state="translated">字句変数に属性が与えられている場合、それが属するシンボルテーブルがないため、その場合、シンボルテーブル引数（ &lt;code&gt;$_[1]&lt;/code&gt; ）は文字列 &lt;code&gt;'LEXICAL'&lt;/code&gt; に設定されます。同様に、匿名サブルーチンに属性を割り当てると、シンボルテーブル引数は &lt;code&gt;'ANON'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="373e9d26b4e220dbf14e875851af78e4ef70cdec" translate="yes" xml:space="preserve">
          <source>If a line was available from the source stream, &lt;code&gt;filter_read()&lt;/code&gt; returns a status value greater than zero and appends the line to &lt;code&gt;$_&lt;/code&gt; . A status value of zero indicates end-of-file, less than zero means an error. The filter function itself is expected to return its status in the same way, and put the filtered line it wants written to the source stream in &lt;code&gt;$_&lt;/code&gt; . The use of &lt;code&gt;$_&lt;/code&gt; accounts for the brevity of most Perl source filters.</source>
          <target state="translated">ソースストリームからラインが利用可能であった場合、 &lt;code&gt;filter_read()&lt;/code&gt; はゼロより大きいステータス値を返し、ラインを &lt;code&gt;$_&lt;/code&gt; 追加します。ステータス値ゼロはファイルの終わりを示し、ゼロ未満はエラーを意味します。フィルター関数自体は、同じ方法でそのステータスを返し、ソースストリームに書き込む必要のあるフィルター処理された行を &lt;code&gt;$_&lt;/code&gt; 配置することが期待されています。ほとんどのPerlソースフィルターの簡潔さのために &lt;code&gt;$_&lt;/code&gt; アカウントを使用します。</target>
        </trans-unit>
        <trans-unit id="b437e27438def56dcad1625b5eefb30ef0e6432f" translate="yes" xml:space="preserve">
          <source>If a line was available from the source stream, &lt;code&gt;filter_read()&lt;/code&gt; returns a status value greater than zero and appends the line to &lt;code&gt;$_&lt;/code&gt;. A status value of zero indicates end-of-file, less than zero means an error. The filter function itself is expected to return its status in the same way, and put the filtered line it wants written to the source stream in &lt;code&gt;$_&lt;/code&gt;. The use of &lt;code&gt;$_&lt;/code&gt; accounts for the brevity of most Perl source filters.</source>
          <target state="translated">ソースストリームから行が利用可能であった場合、 &lt;code&gt;filter_read()&lt;/code&gt; はゼロより大きいステータス値を返し、その行を &lt;code&gt;$_&lt;/code&gt; 追加します。ステータス値がゼロの場合はファイルの終わりを示し、ゼロ未満の場合はエラーを示します。フィルタ関数自体も同じ方法でステータスを返すことが期待されており、ソースストリームに書き込みたいフィルタされた行を &lt;code&gt;$_&lt;/code&gt; ます。 &lt;code&gt;$_&lt;/code&gt; の使用は、ほとんどのPerlソースフィルターの簡潔さを説明しています。</target>
        </trans-unit>
        <trans-unit id="9579e356ad7f9bb206c2b31ab9df7d7dd13fd989" translate="yes" xml:space="preserve">
          <source>If a list is given then it is evaluated from left to right so that any specifications in the list that conflict with a previous specification are overridden by the later.</source>
          <target state="translated">リストが与えられた場合は、左から右に評価され、リストの中で前の仕様と衝突する仕様は、後の仕様によって上書きされます。</target>
        </trans-unit>
        <trans-unit id="eb73e02f11dc05b75008088bd5b205cf808a5add" translate="yes" xml:space="preserve">
          <source>If a matching entry cannot be found, and a default entry exists, then a reference to the default entry is returned.</source>
          <target state="translated">一致するエントリが見つからず、デフォルトのエントリが存在する場合は、デフォルトのエントリへの参照が返されます。</target>
        </trans-unit>
        <trans-unit id="c613dbc045a6d1ccd39d5e4d8985654cb6efdedb" translate="yes" xml:space="preserve">
          <source>If a message can be controlled by the &lt;code&gt;warnings&lt;/code&gt; pragma, its warning category is included with the classification letter in the description below. E.g. &lt;code&gt;(W closed)&lt;/code&gt; means a warning in the &lt;code&gt;closed&lt;/code&gt; category.</source>
          <target state="translated">メッセージを &lt;code&gt;warnings&lt;/code&gt; プラグマで制御できる場合、その警告カテゴリは、以下の説明の分類文字に含まれています。たとえば、 &lt;code&gt;(W closed)&lt;/code&gt; は、 &lt;code&gt;closed&lt;/code&gt; カテゴリの警告を意味します。</target>
        </trans-unit>
        <trans-unit id="f00576e48e7083129f4536c4d9542b2af3efddb9" translate="yes" xml:space="preserve">
          <source>If a method for an operation is not found then Perl tries to autogenerate a substitute implementation from the operations that have been defined.</source>
          <target state="translated">ある操作のメソッドが見つからない場合、Perlは定義されている操作から代替の実装を自動生成しようとします。</target>
        </trans-unit>
        <trans-unit id="0bdd74a3b17bde34780674e393224f07968f9f1d" translate="yes" xml:space="preserve">
          <source>If a module attempts to import any of these symbols the Exporter will give the module an opportunity to handle the situation before generating an error. The Exporter will call an export_fail method with a list of the failed symbols:</source>
          <target state="translated">モジュールがこれらのシンボルのいずれかをインポートしようとした場合、Exporter はエラーが発生する前に状況を処理する機会をモジュールに与えます。エクスポータは、失敗したシンボルのリストを持つ export_fail メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="a6c5a19663c54ceb738fad6d48fbb290bbe10648" translate="yes" xml:space="preserve">
          <source>If a module does not build for some reason, look carefully for why it failed, and report problems to the module author. If it looks like the extension building support is at fault, report that with full details of how the build failed using the GitHub issue tracker at &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;.</source>
          <target state="translated">モジュールが何らかの理由でビルドされない場合は、失敗した理由を注意深く調べ、問題をモジュールの作成者に報告してください。拡張機能のビルドサポートに問題があると思われる場合は、&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https：//github.com/Perl/perl5/issuesに&lt;/a&gt;あるGitHub Issue Trackerを使用して、ビルドがどのように失敗したかを詳細に報告してください。</target>
        </trans-unit>
        <trans-unit id="46e9244ade28e8f11cc0bc5968d58da31945ce21" translate="yes" xml:space="preserve">
          <source>If a module does not build for some reason, look carefully for why it failed, and report problems to the module author. If it looks like the extension building support is at fault, report that with full details of how the build failed using the perlbug utility.</source>
          <target state="translated">何らかの理由でモジュールがビルドされない場合は、なぜビルドに失敗したのかを注意深く調べ、モジュールの作者に問題を報告してください。拡張モジュールのビルドサポートに問題があるようであれば、perlbug ユーティリティを使ってビルドに失敗した経緯を詳細に報告してください。</target>
        </trans-unit>
        <trans-unit id="094a8b4d892c0d307d87dac5429320ae267e0ba1" translate="yes" xml:space="preserve">
          <source>If a module implements XSUBs, you will need one of the supported C compilers. You must make sure you have set up the environment for the compiler for command-line compilation before running &lt;code&gt;perl Makefile.PL&lt;/code&gt; or any invocation of make.</source>
          <target state="translated">モジュールがXSUBを実装する場合は、サポートされているCコンパイラのいずれかが必要です。 &lt;code&gt;perl Makefile.PL&lt;/code&gt; またはmakeの呼び出しを実行する前に、コマンドラインコンパイル用のコンパイラーの環境が設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="9711733a9e84337767e9b5acb7ff59757c774ea1" translate="yes" xml:space="preserve">
          <source>If a name does not already have a suitable prefix and/or suffix then the corresponding file will be searched for by trying combinations of prefix and suffix appropriate to the platform: &quot;$name.o&quot;, &quot;lib$name.*&quot; and &quot;$name&quot;.</source>
          <target state="translated">名前に適切な接頭辞や接尾辞がない場合は、プラットフォームに適した接頭辞と接尾辞の組み合わせを試して、対応するファイルを検索します。例えば、&quot;$name.o&quot;,&quot;lib$name.*&quot;,&quot;$name &quot;などです。</target>
        </trans-unit>
        <trans-unit id="71674c3e4540508bc53564e31d00df9a0af1f1d2" translate="yes" xml:space="preserve">
          <source>If a name resolve operation fails to provide a name, then this flag will cause getnameinfo() to indicate an error, rather than returning the numeric representation as a human-readable string.</source>
          <target state="translated">名前解決操作が名前の提供に失敗した場合、このフラグは、人間が読める文字列として数値表現を返すのではなく、 getnameinfo()がエラーを示すようになります。</target>
        </trans-unit>
        <trans-unit id="31b368c0d757e116a5dfb072a97b4193c426b9b0" translate="yes" xml:space="preserve">
          <source>If a negative array index is used to read from an array, the index will be translated to a positive one internally by calling FETCHSIZE before being passed to FETCH. You may disable this feature by assigning a true value to the variable &lt;code&gt;$NEGATIVE_INDICES&lt;/code&gt; in the tied array class.</source>
          <target state="translated">負の配列インデックスを使用して配列から読み取る場合、インデックスは、FETCHに渡される前にFETCHSIZEを呼び出すことにより、内部で正のインデックスに変換されます。tieされた配列クラスの変数 &lt;code&gt;$NEGATIVE_INDICES&lt;/code&gt; にtrue値を割り当てることにより、この機能を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="77fd7f19527eab5261c210a54c173bb0abc87920" translate="yes" xml:space="preserve">
          <source>If a package uses overload, it carries a special flag. This flag is also set when new functions are defined or @ISA is modified. There will be a slight speed penalty on the very first operation thereafter that supports overloading, while the overload tables are updated. If there is no overloading present, the flag is turned off. Thus the only speed penalty thereafter is the checking of this flag.</source>
          <target state="translated">パッケージがオーバーロードを使用している場合は、特別なフラグを持ちます。このフラグは、新しい関数が定義されたときや @ISA が変更されたときにも設定されます。オーバーロードテーブルが更新されている間、オーバーロードをサポートする最初の操作では若干の速度ペナルティが発生します。オーバーロードが存在しない場合は、このフラグはオフになります。したがって、それ以降の速度ペナルティは、このフラグのチェックのみとなります。</target>
        </trans-unit>
        <trans-unit id="eef6b1875e2dcae080c75ee35ffb78afc980a5f8" translate="yes" xml:space="preserve">
          <source>If a pattern does not contain a special backtracking verb that allows an argument, then &lt;code&gt;$REGERROR&lt;/code&gt; and &lt;code&gt;$REGMARK&lt;/code&gt; are not touched at all.</source>
          <target state="translated">引数を許可する特別なバックトラッキング動詞がパターンに含まれていない場合、 &lt;code&gt;$REGERROR&lt;/code&gt; と &lt;code&gt;$REGMARK&lt;/code&gt; はまったく影響を受けません。</target>
        </trans-unit>
        <trans-unit id="9f0b6253b5fcfd411b56a12da1005e8889d7cecd" translate="yes" xml:space="preserve">
          <source>If a piece of code is under the control of the &lt;code&gt;warnings&lt;/code&gt; pragma, both the &lt;code&gt;$^W&lt;/code&gt; variable and the &lt;b&gt;-w&lt;/b&gt; flag will be ignored for the scope of the lexical warning.</source>
          <target state="translated">コードの一部が &lt;code&gt;warnings&lt;/code&gt; プラグマの制御下にある場合、字句警告のスコープでは、 &lt;code&gt;$^W&lt;/code&gt; 変数と&lt;b&gt;-w&lt;/b&gt;フラグの両方が無視されます。</target>
        </trans-unit>
        <trans-unit id="dc66a04b7fd6c8f1331b2adb91a4455713a61616" translate="yes" xml:space="preserve">
          <source>If a plan has not yet been output, it will do so.</source>
          <target state="translated">プランがまだ出力されていない場合は、出力されます。</target>
        </trans-unit>
        <trans-unit id="f9d2f49ea2b290886ecf360d9425d5113040021a" translate="yes" xml:space="preserve">
          <source>If a precision obtained through &lt;code&gt;*&lt;/code&gt; is negative, it counts as having no precision at all.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; を介して取得した精度が負の場合、精度がないと見なされます。</target>
        </trans-unit>
        <trans-unit id="2493d17a98c3b1f685aa6fcd91f6a228a3382409" translate="yes" xml:space="preserve">
          <source>If a precompiled pattern is embedded in a larger pattern then the effect of &lt;code&gt;&quot;msixpluadn&quot;&lt;/code&gt; will be propagated appropriately. The effect that the &lt;code&gt;/o&lt;/code&gt; modifier has is not propagated, being restricted to those patterns explicitly using it.</source>
          <target state="translated">プリコンパイルされたパターンがより大きなパターンに埋め込まれている場合、 &lt;code&gt;&quot;msixpluadn&quot;&lt;/code&gt; 効果は適切に伝播されます。 &lt;code&gt;/o&lt;/code&gt; 修飾子の効果は伝達されず、明示的に使用するパターンに制限されます。</target>
        </trans-unit>
        <trans-unit id="cfe77c7e04c6532a52f2ea4bb204b4b081b46114" translate="yes" xml:space="preserve">
          <source>If a program's environment specifies an LC_NUMERIC locale and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
locale&lt;/code&gt; is in effect when the format is declared, the locale is used to specify the decimal point character in formatted output. Formatted output cannot be controlled by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; at the time when write() is called. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for further discussion of locale handling.</source>
          <target state="translated">プログラムの環境がLC_NUMERICロケールを指定し、フォーマットが宣言されているときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; が有効である場合、ロケールはフォーマットされた出力で小数点文字を指定するために使用されます。フォーマットされた出力は、write（）が呼び出されたときに、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;制御できません。ロケール処理の詳細については、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bedf07956f494f1e8bca1dc60af93c0e865cbc39" translate="yes" xml:space="preserve">
          <source>If a program's environment specifies an LC_NUMERIC locale and &lt;code&gt;use locale&lt;/code&gt; is in effect when the format is declared, the locale is used to specify the decimal point character in formatted output. Formatted output cannot be controlled by &lt;code&gt;use locale&lt;/code&gt; at the time when write() is called. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for further discussion of locale handling.</source>
          <target state="translated">プログラムの環境でLC_NUMERICロケールが指定されており、フォーマットが宣言されたときにロケールの &lt;code&gt;use locale&lt;/code&gt; が有効である場合、ロケールは、フォーマットされた出力の小数点文字を指定するために使用されます。フォーマットされた出力によって制御することができない &lt;code&gt;use locale&lt;/code&gt; 書き込み（）が呼び出された時点で。ロケール処理の詳細については、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f41131148d4a0b9a531181bbeee21c21fa27808" translate="yes" xml:space="preserve">
          <source>If a property is obsolete, etc, the entry will be flagged with the same characters used in the table in the &lt;a href=&quot;#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D&quot;&gt;section above&lt;/a&gt;, like &lt;b&gt;D&lt;/b&gt; or &lt;b&gt;S&lt;/b&gt;.</source>
          <target state="translated">プロパティは等、廃止された場合、エントリがテーブルに使用したのと同じ文字でフラグが設定され&lt;a href=&quot;#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D&quot;&gt;、上記のセクション&lt;/a&gt;など、&lt;b&gt;D&lt;/b&gt;または&lt;b&gt;S&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="dbdd7653484d14bb99878153118f9a9fc7a64201" translate="yes" xml:space="preserve">
          <source>If a queue is empty, &lt;code&gt;dequeue()&lt;/code&gt; blocks until another thread enqueues something. This makes queues ideal for event loops and other communications between threads.</source>
          <target state="translated">キューが空の場合、別のスレッドが何かをキューに入れるまで、 &lt;code&gt;dequeue()&lt;/code&gt; はブロックします。これにより、キューはイベントループやスレッド間のその他の通信に最適になります。</target>
        </trans-unit>
        <trans-unit id="d8a808372475f8c939dd3899bae64db28b71a73e" translate="yes" xml:space="preserve">
          <source>If a reference happens to be a reference to an object, then there are probably methods to access the things referred to, and you should probably stick to those methods unless you're in the class package that defines the object's methods. In other words, be nice, and don't violate the object's encapsulation without a very good reason. Perl does not enforce encapsulation. We are not totalitarians here. We do expect some basic civility though.</source>
          <target state="translated">参照がたまたまオブジェクトへの参照であった場合、参照されたものにアクセスするためのメソッドがあるでしょうし、オブジェクトのメソッドを定義しているクラスパッケージにいない限り、それらのメソッドに固執するべきでしょう。言い換えれば、オブジェクトのメソッドを定義しているクラスパッケージの中にいない限り、それらのメソッドに固執するべきです。Perlはカプセル化を強制しません。私たちはここでは全体主義者ではありません。しかし、基本的な礼節を期待しています。</target>
        </trans-unit>
        <trans-unit id="c8efe9417a8ca522054e8e0f20aa5ebe3ad20734" translate="yes" xml:space="preserve">
          <source>If a regexp has a variable that interpolates a code expression, Perl treats the regexp as an error. If the code expression is precompiled into a variable, however, interpolating is ok. The question is, why is this an error?</source>
          <target state="translated">正規表現がコード式を補間する変数を持っている場合、Perl はその正規表現をエラーとして扱います。しかし、コード式が変数にプリコンパイルされている場合は、補間は問題ありません。問題は、なぜこれがエラーになるのかということです。</target>
        </trans-unit>
        <trans-unit id="d5bd95a2da72abd4235bfb3025f329041ecd2afc" translate="yes" xml:space="preserve">
          <source>If a regexp matches in more than one place in the string, Perl will always match at the earliest possible point in the string:</source>
          <target state="translated">正規表現が文字列内の複数の場所でマッチした場合、Perl は常に文字列内の可能な限り早い場所でマッチします。</target>
        </trans-unit>
        <trans-unit id="eaf4b93182f52023e0f84b564980685b7296c6d9" translate="yes" xml:space="preserve">
          <source>If a regular bracketed character class contains a &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; and is matched against a non-Unicode code point, a warning may be raised, as the result is not Unicode-defined. No such warning will come when using this extended form.</source>
          <target state="translated">通常の括弧で囲まれた文字クラスに &lt;code&gt;\p{}&lt;/code&gt; または &lt;code&gt;\P{}&lt;/code&gt; が含まれていて、非Unicodeコードポイントと一致する場合、結果がUnicodeで定義されていないため、警告が表示されることがあります。この拡張フォームを使用しても、そのような警告は出されません。</target>
        </trans-unit>
        <trans-unit id="f85e430ff8e0f946fbbcd7fbdf03ad676d0029b5" translate="yes" xml:space="preserve">
          <source>If a result does not have a callback defined for it, this callback will be invoked. Thus, if all of the previous result types are specified as callbacks, this callback will</source>
          <target state="translated">結果にコールバックが定義されていない場合、このコールバックが呼び出されます。したがって、以前のすべての結果タイプがコールバックとして指定されている場合、このコールバックは</target>
        </trans-unit>
        <trans-unit id="7c88e9a20d1a229d11dbc65d34fee24d0f8252b1" translate="yes" xml:space="preserve">
          <source>If a script does not contain such a cooky, then to avoid calling</source>
          <target state="translated">スクリプトにそのようなクッキーが含まれていない場合は</target>
        </trans-unit>
        <trans-unit id="7e6d780b3e70414e72c5be7308b60f82c00d250e" translate="yes" xml:space="preserve">
          <source>If a second argument is given and it corresponds to a valid locale, the locale for the category is set to that value, and the function returns the now-current locale value. You can then use this in yet another call to &lt;code&gt;setlocale()&lt;/code&gt; . (In some implementations, the return value may sometimes differ from the value you gave as the second argument--think of it as an alias for the value you gave.)</source>
          <target state="translated">2番目の引数が指定され、それが有効なロケールに対応している場合、カテゴリーのロケールはその値に設定され、関数は現在のロケール値を返します。その後、これを &lt;code&gt;setlocale()&lt;/code&gt; のさらに別の呼び出しで使用できます。（一部の実装では、戻り値が2番目の引数として指定した値と異なる場合があります。指定した値のエイリアスと考えてください。）</target>
        </trans-unit>
        <trans-unit id="3e39a56243de1505c2a60308e0e3b7ae64ceb413" translate="yes" xml:space="preserve">
          <source>If a second argument is given and it corresponds to a valid locale, the locale for the category is set to that value, and the function returns the now-current locale value. You can then use this in yet another call to &lt;code&gt;setlocale()&lt;/code&gt;. (In some implementations, the return value may sometimes differ from the value you gave as the second argument--think of it as an alias for the value you gave.)</source>
          <target state="translated">2番目の引数が指定され、それが有効なロケールに対応する場合、カテゴリのロケールはその値に設定され、関数は現在のロケール値を返します。その後、これを &lt;code&gt;setlocale()&lt;/code&gt; へのさらに別の呼び出しで使用できます。（一部の実装では、戻り値が2番目の引数として指定した値と異なる場合があります。指定した値のエイリアスと考えてください。）</target>
        </trans-unit>
        <trans-unit id="91a945f54fa17399a38d6421bac299acb5873c21" translate="yes" xml:space="preserve">
          <source>If a second argument is given then it should be the name of the desired output file. If the special output filename &quot;-&quot; or &quot;&amp;gt;&amp;amp;STDOUT&quot; is given then the STDOUT filehandle is used for output (and no open or close is performed). If the special output filename &quot;&amp;gt;&amp;amp;STDERR&quot; is given then the STDERR filehandle is used for output (and no open or close is performed). If no output filehandle is currently in use and no output filename is specified, then &quot;-&quot; is implied. Alternatively, filehandle references or objects that support the regular IO operations (like &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, e.g. &lt;a href=&quot;http://search.cpan.org/perldoc/IO::String&quot;&gt;IO::String&lt;/a&gt;) are also accepted; the object must already be opened.</source>
          <target state="translated">2番目の引数を指定する場合は、目的の出力ファイルの名前にする必要があります。特別な出力ファイル名 &quot;-&quot;または &quot;&amp;gt;＆STDOUT&quot;が指定されている場合、STDOUTファイルハンドルが出力に使用されます（オープンまたはクローズは実行されません）。特別な出力ファイル名 &quot;&amp;gt;＆STDERR&quot;が指定された場合、STDERRファイルハンドルが出力に使用されます（オープンまたはクローズは実行されません）。出力ファイルハンドルが現在使用されておらず、出力ファイル名が指定されていない場合、「-」が暗黙指定されます。あるいは、通常のIO操作をサポートするファイルハンドル参照またはオブジェクト（ &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; などの&lt;a href=&quot;http://search.cpan.org/perldoc/IO::String&quot;&gt;IO :: Stringなど&lt;/a&gt;）も受け入れられます。オブジェクトはすでに開かれている必要があります。</target>
        </trans-unit>
        <trans-unit id="477169172ccc2cfa646e6b1ff7ebcaf7ea663dbd" translate="yes" xml:space="preserve">
          <source>If a second argument is given then it should correspond to a filehandle where output should be sent (otherwise the default output filehandle is &lt;code&gt;STDOUT&lt;/code&gt; if no output filehandle is currently in use).</source>
          <target state="translated">2番目の引数を指定する場合は、出力を送信するファイルハンドルに対応する必要があります（そうでない場合、現在使用中の出力ファイルハンドルがない場合、デフォルトの出力ファイルハンドルは &lt;code&gt;STDOUT&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="93e01c4263faa2fd7e903bd96fbfc6f719b4224a" translate="yes" xml:space="preserve">
          <source>If a signal of any given type fires multiple times during an opcode (such as from a fine-grained timer), the handler for that signal will be called only once, after the opcode completes; all other instances will be discarded. Furthermore, if your system's signal queue gets flooded to the point that there are signals that have been raised but not yet caught (and thus not deferred) at the time an opcode completes, those signals may well be caught and deferred during subsequent opcodes, with sometimes surprising results. For example, you may see alarms delivered even after calling &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm(0)&lt;/a&gt;&lt;/code&gt; as the latter stops the raising of alarms but does not cancel the delivery of alarms raised but not yet caught. Do not depend on the behaviors described in this paragraph as they are side effects of the current implementation and may change in future versions of Perl.</source>
          <target state="translated">特定のタイプのシグナルが（詳細なタイマーなどから）オペコード中に複数回発生した場合、そのシグナルのハンドラーは、オペコードの完了後に1回だけ呼び出されます。他のすべてのインスタンスは破棄されます。さらに、オペコードの完了時に発生したがまだキャッチされていない（したがって延期されていない）シグナルがシステムのシグナルキューに殺到する場合、これらのシグナルは後続のオペコード中にキャッチおよび延期される可能性があります。時には驚くべき結果。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm(0)&lt;/a&gt;&lt;/code&gt; を呼び出した後でも、アラームが配信されることがあります後者はアラームの発生を停止しますが、発生したがまだキャッチされていないアラームの配信をキャンセルしません。これらは現在の実装の副作用であり、Perlの将来のバージョンで変更される可能性があるため、この段落で説明されている動作に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="1391421af9c89c0d87f56f7e90949f1788025d04" translate="yes" xml:space="preserve">
          <source>If a signal of any given type fires multiple times during an opcode (such as from a fine-grained timer), the handler for that signal will be called only once, after the opcode completes; all other instances will be discarded. Furthermore, if your system's signal queue gets flooded to the point that there are signals that have been raised but not yet caught (and thus not deferred) at the time an opcode completes, those signals may well be caught and deferred during subsequent opcodes, with sometimes surprising results. For example, you may see alarms delivered even after calling &lt;code&gt;alarm(0)&lt;/code&gt; as the latter stops the raising of alarms but does not cancel the delivery of alarms raised but not yet caught. Do not depend on the behaviors described in this paragraph as they are side effects of the current implementation and may change in future versions of Perl.</source>
          <target state="translated">特定のタイプのシグナルがオペコード中に複数回起動する場合（きめ細かいタイマーからなど）、そのシグナルのハンドラーは、オペコードの完了後に1回だけ呼び出されます。他のすべてのインスタンスは破棄されます。さらに、システムのシグナルキューが、オペコードの完了時に発生したがまだキャッチされていない（したがって延期されていない）シグナルがあるポイントまでフラッディングした場合、これらのシグナルは、後続のオペコード中にキャッチされて延期される可能性があります。時には驚くべき結果。たとえば、 &lt;code&gt;alarm(0)&lt;/code&gt; を呼び出した後でもアラームが配信される場合があります。後者はアラームの発生を停止しますが、発生したがまだキャッチされていないアラームの配信をキャンセルしないためです。これらは現在の実装の副作用であり、Perlの将来のバージョンで変更される可能性があるため、この段落で説明されている動作に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="54c4924d3d30f658cd6ca34abca8d30fc0b456c3" translate="yes" xml:space="preserve">
          <source>If a single version is listed, then that version is considered to be the minimum version supported.</source>
          <target state="translated">1つのバージョンがリストアップされている場合、そのバージョンがサポートされている最小バージョンとみなされます。</target>
        </trans-unit>
        <trans-unit id="8ca9f14adad1a4346557fbd963ffe8837b4e2de6" translate="yes" xml:space="preserve">
          <source>If a specified constant &lt;code&gt;EFOO&lt;/code&gt; does not exist on the system, &lt;code&gt;$!{EFOO}&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt; . You may use &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $!{EFOO}&lt;/code&gt; to check whether the constant is available on the system.</source>
          <target state="translated">指定した定数 &lt;code&gt;EFOO&lt;/code&gt; がシステムに存在しない場合、 &lt;code&gt;$!{EFOO}&lt;/code&gt; は &lt;code&gt;&quot;&quot;&lt;/code&gt; を返します。あなたは使用することができます &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $!{EFOO}&lt;/code&gt; 定数は、システム上で利用可能であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="bf4eb314d513c3316ce1fa9889a8d0bccfeb7ad3" translate="yes" xml:space="preserve">
          <source>If a specified constant &lt;code&gt;EFOO&lt;/code&gt; does not exist on the system, &lt;code&gt;$!{EFOO}&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt;. You may use &lt;code&gt;exists $!{EFOO}&lt;/code&gt; to check whether the constant is available on the system.</source>
          <target state="translated">指定された定数 &lt;code&gt;EFOO&lt;/code&gt; がシステムに存在しない場合、 &lt;code&gt;$!{EFOO}&lt;/code&gt; は &lt;code&gt;&quot;&quot;&lt;/code&gt; を返します。あなたは使用することができます &lt;code&gt;exists $!{EFOO}&lt;/code&gt; 定数は、システム上で利用可能であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="f800d47729ac41db50a73befe5a0c18db31026bf" translate="yes" xml:space="preserve">
          <source>If a string is UTF-8, &lt;b&gt;always&lt;/b&gt; use &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; to get at the value, unless &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; in which case you can use &lt;code&gt;*s&lt;/code&gt; .</source>
          <target state="translated">文字列がUTF-8 の場合、 &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; を使用して &lt;code&gt;*s&lt;/code&gt; を使用できる場合を除き、&lt;b&gt;常に&lt;/b&gt; &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; を使用して値を取得します。</target>
        </trans-unit>
        <trans-unit id="5565b45434f39b2ddc21d26b181951efb62cd428" translate="yes" xml:space="preserve">
          <source>If a string is UTF-8, &lt;b&gt;always&lt;/b&gt; use &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; to get at the value, unless &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; in which case you can use &lt;code&gt;*s&lt;/code&gt;.</source>
          <target state="translated">文字列がUTF-8の場合は、&lt;b&gt;常に&lt;/b&gt; &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; を使用して値を取得します。ただし、 &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; の場合は、 &lt;code&gt;*s&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="1be10a035bc9dd04a9faa3e7d6666d736bd26b25" translate="yes" xml:space="preserve">
          <source>If a sub has both a PROTO and a BLOCK, the prototype is not applied until after the BLOCK is completely defined. This means that a recursive function with a prototype has to be predeclared for the prototype to take effect, like so:</source>
          <target state="translated">サブがPROTOとBLOCKの両方を持つ場合、BLOCKが完全に定義されるまでプロトタイプは適用されません。これは、プロトタイプを持つ再帰関数が有効になるためには、以下のようにプロトタイプを事前に宣言しなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="0608dc713e7e2ffc835fe7b94ed6aa1dd9da10a4" translate="yes" xml:space="preserve">
          <source>If a subroutine reference was given, it is invoked as:</source>
          <target state="translated">サブルーチン参照が与えられていた場合は、次のように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b5b26c7bacf7c0c773c98a08b7cfd7b95eaadc8d" translate="yes" xml:space="preserve">
          <source>If a substring is known to match at end-of-line only, it may be followed by &lt;code&gt;$&lt;/code&gt; , as in &lt;code&gt;floating 'k'$&lt;/code&gt; .</source>
          <target state="translated">部分文字列が行末でのみ一致することがわかっている場合は、 &lt;code&gt;floating 'k'$&lt;/code&gt; ように、その後に &lt;code&gt;$&lt;/code&gt; が続く場合があります。</target>
        </trans-unit>
        <trans-unit id="e2a7b0f64e136490191d68028d9bfc30ff8c824f" translate="yes" xml:space="preserve">
          <source>If a substring is known to match at end-of-line only, it may be followed by &lt;code&gt;$&lt;/code&gt;, as in &lt;code&gt;floating 'k'$&lt;/code&gt;.</source>
          <target state="translated">部分文字列が行末でのみ一致することがわかっている場合は、 &lt;code&gt;floating 'k'$&lt;/code&gt; ように、その後に &lt;code&gt;$&lt;/code&gt; が続く場合があります。</target>
        </trans-unit>
        <trans-unit id="b8bac00f48a56f95c981f68b27c67c1613b3abed" translate="yes" xml:space="preserve">
          <source>If a test had either a &lt;code&gt;TODO&lt;/code&gt; or &lt;code&gt;SKIP&lt;/code&gt; directive, this method will return the accompanying explanation, if present.</source>
          <target state="translated">テストに &lt;code&gt;TODO&lt;/code&gt; または &lt;code&gt;SKIP&lt;/code&gt; ディレクティブが含まれている場合、このメソッドは、存在する場合、付随する説明を返します。</target>
        </trans-unit>
        <trans-unit id="65b9290b4f037c914cf42f893f1aba1433a9e97a" translate="yes" xml:space="preserve">
          <source>If a test number is greater than the number of planned tests, this method will return true. Unplanned tests will</source>
          <target state="translated">テスト数が計画されたテストの数よりも多い場合、このメソッドは真を返します。計画されていないテストは</target>
        </trans-unit>
        <trans-unit id="6169b8ce6480907cccaf2d8c56d0f00c7332c0b3" translate="yes" xml:space="preserve">
          <source>If a tied hash is evaluated in scalar context, the &lt;code&gt;SCALAR&lt;/code&gt; method is called (with a fallback to &lt;code&gt;FIRSTKEY&lt;/code&gt;).</source>
          <target state="translated">タイハッシュがスカラーコンテキストで評価される場合、 &lt;code&gt;SCALAR&lt;/code&gt; メソッドが呼び出されます（ &lt;code&gt;FIRSTKEY&lt;/code&gt; へのフォールバックを使用）。</target>
        </trans-unit>
        <trans-unit id="99f0a88031cba297a38b9bb2a8d9794138cdfcc6" translate="yes" xml:space="preserve">
          <source>If a transformation subroutine (xfrm) is defined, its value is used to transform the lines read from the filehandle before their comparison.</source>
          <target state="translated">変換サブルーチン(xfrm)が定義されている場合、その値はファイルハンドルから読み込んだ行を比較する前に変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="571f9ad4d812cfdda52b01e4ae41c48c7aa1a889" translate="yes" xml:space="preserve">
          <source>If a true value is given (non-zero but should be positive), it will be added as a terminator primary weight to the end of every standard Hangul syllable. Secondary and any higher weights for terminator are set to zero. If the value is false or &lt;code&gt;hangul_terminator&lt;/code&gt; key does not exist, insertion of terminator weights will not be performed.</source>
          <target state="translated">真の値が指定されている場合（ゼロではないが正でなければなりません）、すべての標準のハングル音節の終わりにターミネーターの1次の重みとして追加されます。ターミネータのセカンダリおよびそれ以上の重みはゼロに設定されます。値がfalseであるか、 &lt;code&gt;hangul_terminator&lt;/code&gt; キーが存在しない場合、ターミネーターの重みの挿入は実行されません。</target>
        </trans-unit>
        <trans-unit id="06c503e180fbd73d4ade263d4ec3fc736e96785b" translate="yes" xml:space="preserve">
          <source>If a typed lexical variable (&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; Class
$var&lt;/code&gt; ) holding a reference is used to access a hash element and a package with the same name as the type has declared class fields using this pragma, then the hash key is verified at compile time. If the variables are not typed, access is only checked at run time.</source>
          <target state="translated">参照を保持する型付きレキシカル変数（ &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; Class $var&lt;/code&gt; ）を使用してハッシュ要素にアクセスし、タイプと同じ名前のパッケージがこのプラグマを使用してクラスフィールドを宣言している場合、ハッシュキーはコンパイル時に検証されます。変数が入力されていない場合、アクセスは実行時にのみチェックされます。</target>
        </trans-unit>
        <trans-unit id="748870f6864101e2665ecfedb42ab9a1b32e539e" translate="yes" xml:space="preserve">
          <source>If a typed lexical variable (&lt;code&gt;my Class $var&lt;/code&gt;) holding a reference is used to access a hash element and a package with the same name as the type has declared class fields using this pragma, then the hash key is verified at compile time. If the variables are not typed, access is only checked at run time.</source>
          <target state="translated">参照を保持する型付き字句変数（ &lt;code&gt;my Class $var&lt;/code&gt; ）を使用してハッシュ要素にアクセスし、型と同じ名前のパッケージがこのプラグマを使用してクラスフィールドを宣言した場合、ハッシュキーはコンパイル時に検証されます。変数が入力されていない場合、アクセスは実行時にのみチェックされます。</target>
        </trans-unit>
        <trans-unit id="a56a688e323d9747dee356792880eafa156d2877" translate="yes" xml:space="preserve">
          <source>If a utility or module isn't available, it will be marked in a cache (see the &lt;code&gt;$METHOD_FAIL&lt;/code&gt; variable further down), so it will not be tried again. The &lt;code&gt;fetch&lt;/code&gt; method will only fail when all options are exhausted, and it was not able to retrieve the file.</source>
          <target state="translated">ユーティリティまたはモジュールが利用できない場合は、キャッシュでマークされるため（下の &lt;code&gt;$METHOD_FAIL&lt;/code&gt; 変数を参照）、再試行されません。 &lt;code&gt;fetch&lt;/code&gt; すべてのオプションが疲れているとき、メソッドは失敗し、ファイルを取得することができませんでした。</target>
        </trans-unit>
        <trans-unit id="17e415afdb54d5332d73e9d658477c2317a9747c" translate="yes" xml:space="preserve">
          <source>If a variable is declared inside a CODE: section it will follow any typemap code that is emitted for the input parameters. This may result in the declaration ending up after C code, which is C syntax error. Similar errors may happen with an explicit &lt;code&gt;;&lt;/code&gt; -type or &lt;code&gt;+&lt;/code&gt; -type initialization of parameters is used (see &lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;Initializing Function Parameters&lt;/a&gt;). Declaring these variables in an INIT: section will not help.</source>
          <target state="translated">変数がCODE：セクション内で宣言されている場合、その変数は、入力パラメーターに対して発行されるすべてのタイプマップコードに従います。これにより、C構文エラーであるCコードの後に​​宣言が終了する可能性があります。同様のエラーが明示的に発生する可能性があり &lt;code&gt;;&lt;/code&gt; パラメータの-typeまたは &lt;code&gt;+&lt;/code&gt; -type初期化が使用されます（&lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;関数パラメータの初期化を&lt;/a&gt;参照）。これらの変数をINIT：セクションで宣言しても役に立ちません。</target>
        </trans-unit>
        <trans-unit id="1207e0b0d0efedf009a2fba67d60a91b64445106" translate="yes" xml:space="preserve">
          <source>If a variable is declared inside a CODE: section it will follow any typemap code that is emitted for the input parameters. This may result in the declaration ending up after C code, which is C syntax error. Similar errors may happen with an explicit &lt;code&gt;;&lt;/code&gt;-type or &lt;code&gt;+&lt;/code&gt;-type initialization of parameters is used (see &lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;&quot;Initializing Function Parameters&quot;&lt;/a&gt;). Declaring these variables in an INIT: section will not help.</source>
          <target state="translated">変数がCODE：セクション内で宣言されている場合、入力パラメーターに対して発行されるタイプマップコードに従います。これにより、宣言がCコードの後に​​終了する可能性があります。これはC構文エラーです。同様のエラーは、明示的な &lt;code&gt;;&lt;/code&gt; で発生する可能性があります。-typeまたは &lt;code&gt;+&lt;/code&gt; -typeのパラメーターの初期化が使用されます（&lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;「関数パラメーターの初期化」を&lt;/a&gt;参照）。INIT：セクションでこれらの変数を宣言しても役に立ちません。</target>
        </trans-unit>
        <trans-unit id="7b3996807bb1f09e79ba835867b4d5ba2a1e4f04" translate="yes" xml:space="preserve">
          <source>If a version object is compared against a non-version object, the non-object term will be converted to a version object using &lt;code&gt;parse()&lt;/code&gt;. This may give surprising results:</source>
          <target state="translated">バージョンオブジェクトが非バージョンオブジェクトと比較される場合、非オブジェクト用語は &lt;code&gt;parse()&lt;/code&gt; を使用してバージョンオブジェクトに変換されます。これは驚くべき結果をもたらすかもしれません：</target>
        </trans-unit>
        <trans-unit id="b1e1471095c4d68dab8592febf94b7e3ac2a2016" translate="yes" xml:space="preserve">
          <source>If accept() is interrupted by a signal, $! will be set to EINTR. If this happens, we can safely continue to the next iteration of the loop and another call to accept(). It is important that your signal handling code not modify the value of $!, or else this test will likely fail. In the REAPER subroutine we create a local version of $! before calling waitpid(). When waitpid() sets $! to ECHILD as it inevitably does when it has no more children waiting, it updates the local copy and leaves the original unchanged.</source>
          <target state="translated">accept()がシグナルによって中断された場合、$! は EINTR に設定されます。これが発生した場合、次のループの繰り返しと accept()の呼び出しを安全に続けることができます。シグナル処理のコードが$!の値を変更しないようにすることが重要です。REAPERサブルーチンでは、 waitpid()を呼び出す前に$! waitpid()が$!をECHILDに設定すると、待機している子がいなくなった時に必然的にそうなります。</target>
        </trans-unit>
        <trans-unit id="752e6cffd40215caddfd723588dccf4863a5ed16" translate="yes" xml:space="preserve">
          <source>If adding a new module to a set, follow the original author's standards for naming modules and the interface to methods in those modules.</source>
          <target state="translated">セットに新しいモジュールを追加する場合は、モジュールの名前と、それらのモジュールのメソッドへのインターフェイスについての原著者の標準に従います。</target>
        </trans-unit>
        <trans-unit id="740a7df0564a13f66fe6f00e1a8f73b803531ecf" translate="yes" xml:space="preserve">
          <source>If after any stripping of indentation in verbatim blocks, there remain tabs, this method call indicates what to do with them. &lt;code&gt;0&lt;/code&gt; means leave them as tabs, any other number indicates that each tab is to be translated so as to have tab stops every &lt;code&gt;n&lt;/code&gt; columns.</source>
          <target state="translated">逐語的なブロックのインデントを取り除いた後、タブが残っている場合、このメソッド呼び出しはそれらをどうするかを示します。 &lt;code&gt;0&lt;/code&gt; はそれらをタブのままにすることを意味し、他の数字は各タブが &lt;code&gt;n&lt;/code&gt; 列ごとにタブストップを持つように変換されることを示します。</target>
        </trans-unit>
        <trans-unit id="c30aaa76b20fc01d8891caaf8c421bdbbefa39ad" translate="yes" xml:space="preserve">
          <source>If after that process the layer is still not defined then the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; will fail.</source>
          <target state="translated">そのプロセスの後で層がまだ定義されていない場合、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; は失敗します。</target>
        </trans-unit>
        <trans-unit id="c550e6d69474a6a7c10a80260775c6595e782f16" translate="yes" xml:space="preserve">
          <source>If after that process the layer is still not defined then the &lt;code&gt;open&lt;/code&gt; will fail.</source>
          <target state="translated">そのプロセスの後、レイヤーがまだ定義されていない場合、 &lt;code&gt;open&lt;/code&gt; は失敗します。</target>
        </trans-unit>
        <trans-unit id="3f5b65dba45a85e174c3b613f61ee902daa93694" translate="yes" xml:space="preserve">
          <source>If all actions were successful install will return a hashref of the results as described above for the $result parameter. If any action is a failure then install will die, therefore it is recommended to pass in the $result parameter instead of using the return value. If the result parameter is provided then the returned hashref will be the passed in hashref.</source>
          <target state="translated">すべてのアクションが成功した場合、install は上で説明したように結果のハッシュリフを $result パラメータに返します。何らかのアクションが失敗した場合、install は終了しますので、戻り値を使用する代わりに $result パラメータを渡すことをお勧めします。result パラメータを指定した場合、返されるハッシュリフは、渡されたハッシュリフになります。</target>
        </trans-unit>
        <trans-unit id="127255eea385053cfe8f53f8f2c648f76a8be49c" translate="yes" xml:space="preserve">
          <source>If all data that comes from a certain handle is encoded in exactly the same way, you can tell the PerlIO system to automatically decode everything, with the &lt;code&gt;encoding&lt;/code&gt; layer. If you do this, you can't accidentally forget to decode or encode anymore, on things that use the layered handle.</source>
          <target state="translated">特定のハンドルからのすべてのデータがまったく同じ方法でエンコードされている場合、PerlIOシステムに &lt;code&gt;encoding&lt;/code&gt; レイヤーを使用してすべてを自動的にデコードするように指示できます。これを行うと、レイヤードハンドルを使用するものについて、誤ってもうデコードまたはエンコードすることを忘れることはありません。</target>
        </trans-unit>
        <trans-unit id="3e7d1b1bb140827b5655410f34d1155c7f80618e" translate="yes" xml:space="preserve">
          <source>If all goes okay and no errors during a build, you'll get two independent distributions: &lt;code&gt;wince-mips-pocket-wce300&lt;/code&gt; and &lt;code&gt;mips-wce300-thr&lt;/code&gt; .</source>
          <target state="translated">ビルド中に問題がなく、エラーが発生しなければ、 &lt;code&gt;wince-mips-pocket-wce300&lt;/code&gt; と &lt;code&gt;mips-wce300-thr&lt;/code&gt; の 2つの独立したディストリビューションが得られます。</target>
        </trans-unit>
        <trans-unit id="f9089d68477d6441e4f9e9f5ebed86f489f07115" translate="yes" xml:space="preserve">
          <source>If all is well then update your blead branch:</source>
          <target state="translated">すべてが順調ならば、ブリードブランチを更新してください。</target>
        </trans-unit>
        <trans-unit id="2ab3e0df4f550d075ed2874e19cdd1793f373e2a" translate="yes" xml:space="preserve">
          <source>If all this is intimidating, have no (well, maybe only a little) fear. There are modules that can help. The &lt;code&gt;File::Spec&lt;/code&gt; modules provide methods to do the Right Thing on whatever platform happens to be running the program.</source>
          <target state="translated">これらすべてが威圧的である場合、恐れはありません（まあ、たぶん少しだけ）。役立つモジュールがあります。 &lt;code&gt;File::Spec&lt;/code&gt; のモジュールは、プログラムを実行していることを起こるものは何でもプラットフォーム上で正しいことを行うためのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="ae7ad2a8e725968ebffe98c6ec06a2f880b60f52" translate="yes" xml:space="preserve">
          <source>If all you want to do is pretend to be telnet but don't need the initial telnet handshaking, then the standard dual-process approach will suffice:</source>
          <target state="translated">telnetのふりをしたいだけで、最初のtelnetハンドシェイクを必要としない場合は、標準的なデュアルプロセスアプローチで十分です。</target>
        </trans-unit>
        <trans-unit id="9403f48a0d39d844d9c0ac74b1c19be5f1602977" translate="yes" xml:space="preserve">
          <source>If all your tests passed, &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">すべてのテストに合格すると、&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builder&lt;/a&gt;はゼロで終了します（これは正常です）。何かが失敗した場合、失敗した数で終了します。計画よりも少ない（または多い）テストを実行した場合、欠落している（または余分な）テストは失敗と見なされます。テストが実行されていない場合、&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builder&lt;/a&gt;は警告をスローし、255で終了します。テストが終了した場合、すべてのテストを正常に完了した後でも、失敗と見なされ、255で終了します。</target>
        </trans-unit>
        <trans-unit id="114fc5763881eaed2b695ddb5eda1e514b33dd63" translate="yes" xml:space="preserve">
          <source>If all your tests passed, &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt; will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt; will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">すべてのテストに合格すると、&lt;a href=&quot;builder&quot;&gt;Test :: Builder&lt;/a&gt;はゼロ（通常）で終了します。何かが失敗した場合、失敗した数で終了します。計画よりも少ない（または多い）テストを実行すると、不足している（または余分な）テストは失敗と見なされます。テストが実行されなかった場合、&lt;a href=&quot;builder&quot;&gt;Test :: Builder&lt;/a&gt;は警告をスローして255で終了します。テストが終了した場合、すべてのテストが正常に完了した後でも、失敗と見なされて255で終了します。</target>
        </trans-unit>
        <trans-unit id="a98f6624ef41fa5865752ff72d1c88c5adce8ff1" translate="yes" xml:space="preserve">
          <source>If all your tests passed, Test::Builder will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run Test::Builder will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">すべてのテストに合格した場合、Test::Builder はゼロで終了します (これは正常です)。何か失敗した場合は、何回失敗したかで終了します。計画よりも少ない(または多い)テストを実行した場合、不足している(または余分な)テストは失敗とみなされます。テストが一度も実行されなかった場合、Test::Builder は警告を出して 255 で終了します。すべてのテストが正常に終了した後でも、テストが終了した場合は失敗とみなされ、255で終了します。</target>
        </trans-unit>
        <trans-unit id="ec52cc18e24a40a3b425f46525ccb32d3bbfcd0d" translate="yes" xml:space="preserve">
          <source>If all your tests passed, Test::Simple will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run Test::Simple will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">すべてのテストに合格した場合、Test::Simple はゼロで終了します (これは正常です)。何か失敗した場合は、何回失敗したかで終了します。計画よりも少ない (もしくは多い)テストを実行した場合、不足している (もしくは余分な)テストは失敗とみなされます。テストが実行されなかった場合、Test::Simple は警告を出して 255 で終了します。すべてのテストが正常に終了した後であっても、テストが終了した場合は失敗とみなされ、255で終了します。</target>
        </trans-unit>
        <trans-unit id="bf21a78dfdb342ccff4796ddae824fa3095f386e" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified and it is a simple scalar, it must conform to the sub-field structure as defined in RFC 1952.</source>
          <target state="translated">場合 &lt;code&gt;ExtraField&lt;/code&gt; のオプションが指定されており、それが単純なスカラーですRFC 1952で定義され、それがサブフィールド構造に準拠する必要があります。</target>
        </trans-unit>
        <trans-unit id="703bb32d1796efb54146381859e7e166335fd702" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified and it is a simple scalar, the structure will not be checked. The only error is if the length is too big.</source>
          <target state="translated">場合 &lt;code&gt;ExtraField&lt;/code&gt; のオプションが指定されており、それが単純なスカラーであるが、構造がチェックされません。唯一のエラーは、長さが長すぎる場合です。</target>
        </trans-unit>
        <trans-unit id="d5888ada14b086770c285ef36da99e64d4b36a12" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified the second byte of the ID will be checked in each subfield to ensure that it does not contain the reserved value 0x00.</source>
          <target state="translated">&lt;code&gt;ExtraField&lt;/code&gt; オプションが指定されている場合、IDの2番目のバイトが各サブフィールドでチェックされ、予約された値0x00が含まれていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="bba67c55f0a73d622c034c758b4c54c06d0297ce" translate="yes" xml:space="preserve">
          <source>If an AUTOLOAD routine is an XSUB, as with Perl subroutines, Perl puts the fully-qualified name of the autoloaded subroutine in the $AUTOLOAD variable of the XSUB's package.</source>
          <target state="translated">AUTOLOADルーチンがXSUBである場合、Perlのサブルーチンと同様に、PerlはXSUBのパッケージの$AUTOLOAD変数にオートロードされたサブルーチンの完全修飾名を入れます。</target>
        </trans-unit>
        <trans-unit id="5f16d14b8173a324e3c6a5e5bf643eb4986c26e1" translate="yes" xml:space="preserve">
          <source>If an IPC encounters a fatal error it should use this. This will print the message to STDERR with &lt;code&gt;'IPC Fatal Error: '&lt;/code&gt; prefixed to it, then it will forcefully exit 255. IPC errors may occur in threads or processes other than the main one, this method provides the best chance of the harness noticing the error.</source>
          <target state="translated">IPCで致命的なエラーが発生した場合は、これを使用する必要があります。これにより、 &lt;code&gt;'IPC Fatal Error: '&lt;/code&gt; というプレフィックスが付いたメッセージがSTDERRに出力され、255が強制的に終了します。IPCエラーはメイン以外のスレッドまたはプロセスで発生する可能性があります。この方法は、ハーネスがに気付く可能性が最も高くなります。エラー。</target>
        </trans-unit>
        <trans-unit id="42bdc376fb833e498b49e6edb80ebe7de88f4149" translate="yes" xml:space="preserve">
          <source>If an Input glob matches the same file more than once, only the first will be used.</source>
          <target state="translated">入力グロブが同じファイルに複数回マッチする場合は、最初のファイルのみが使用されます。</target>
        </trans-unit>
        <trans-unit id="4c7ac1d42b2433b8600fc2dd6eb1a16139df0641" translate="yes" xml:space="preserve">
          <source>If an XSUB is created to offer a direct translation between this function and Perl, then this XSUB will be used from Perl with the following code. The $status and $timep variables will contain the output of the function.</source>
          <target state="translated">この関数とPerl間の直接変換を提供するためにXSUBが作成された場合、このXSUBは次のコードでPerlから使用されます。変数 $status と $timep には、関数の出力が格納されます。</target>
        </trans-unit>
        <trans-unit id="b382afe3d07f60c5f6eced5294d3838170432890" translate="yes" xml:space="preserve">
          <source>If an XSUB name contains &lt;code&gt;::&lt;/code&gt; , it is considered to be a C++ method. The generated Perl function will assume that its first argument is an object pointer. The object pointer will be stored in a variable called THIS. The object should have been created by C++ with the new() function and should be blessed by Perl with the sv_setref_pv() macro. The blessing of the object by Perl can be handled by a typemap. An example typemap is shown at the end of this section.</source>
          <target state="translated">XSUB名に &lt;code&gt;::&lt;/code&gt; が含まれている場合は、C ++メソッドと見なされます。生成されたPerl関数は、その最初の引数がオブジェクトポインターであると想定します。オブジェクトポインタは、これと呼ばれる変数に格納されます。オブジェクトはnew（）関数を使用してC ++によって作成されている必要があり、Perlによってsv_setref_pv（）マクロを使用して祝福される必要があります。Perlによるオブジェクトの祝福は、タイプマップで処理できます。タイプマップの例は、このセクションの最後に示されています。</target>
        </trans-unit>
        <trans-unit id="1b3718c1d670d39036e818ea2e8844505748f38c" translate="yes" xml:space="preserve">
          <source>If an XSUB name contains &lt;code&gt;::&lt;/code&gt;, it is considered to be a C++ method. The generated Perl function will assume that its first argument is an object pointer. The object pointer will be stored in a variable called THIS. The object should have been created by C++ with the new() function and should be blessed by Perl with the sv_setref_pv() macro. The blessing of the object by Perl can be handled by a typemap. An example typemap is shown at the end of this section.</source>
          <target state="translated">XSUB名に &lt;code&gt;::&lt;/code&gt; が含まれている場合、それはC ++メソッドと見なされます。生成されたPerl関数は、最初の引数がオブジェクトポインタであると想定します。オブジェクトポインタは、THISという変数に格納されます。オブジェクトは、new（）関数を使用してC ++で作成されている必要があり、sv_setref_pv（）マクロを使用してPerlによって祝福されている必要があります。 Perlによるオブジェクトの祝福は、タイプマップによって処理できます。このセクションの最後に、タイプマップの例を示します。</target>
        </trans-unit>
        <trans-unit id="5b2e1d1934ece2d63d504b4355cb9c8a6aa0fa5a" translate="yes" xml:space="preserve">
          <source>If an angle-bracket-based globbing expression is used as the condition of a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loop, then it will be implicitly assigned to &lt;code&gt;$_&lt;/code&gt;. If either a globbing expression or an explicit assignment of a globbing expression to a scalar is used as a &lt;code&gt;while&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt; condition, then the condition actually tests for definedness of the expression's value, not for its regular truth value.</source>
          <target state="translated">山かっこベースのグロビング式が &lt;code&gt;while&lt;/code&gt; または &lt;code&gt;for&lt;/code&gt; ループの条件として使用される場合、それは暗黙的に &lt;code&gt;$_&lt;/code&gt; 割り当てられます。グロビング式またはスカラーへのグロビング式の明示的な割り当てのいずれかが &lt;code&gt;while&lt;/code&gt; / &lt;code&gt;for&lt;/code&gt; 条件として使用される場合、条件は実際には、通常の真理値ではなく、式の値の定義をテストします。</target>
        </trans-unit>
        <trans-unit id="a5be5707a4fed01d7fc6a9c5c683f16ea2406809" translate="yes" xml:space="preserve">
          <source>If an argument callback routine is specified, &lt;code&gt;@ARGV&lt;/code&gt; will always be empty upon successful return of GetOptions() since all options have been processed. The only exception is when &lt;code&gt;--&lt;/code&gt; is used:</source>
          <target state="translated">引数のコールバックルーチンが指定されている場合は、 &lt;code&gt;@ARGV&lt;/code&gt; は常にすべてのオプションが処理されているので、GETOPTIONS（）の正常終了時に空になります。唯一の例外は &lt;code&gt;--&lt;/code&gt; が使用される場合です。</target>
        </trans-unit>
        <trans-unit id="b39b97b3c5875ed6ddbb4cadef1665f0d49ebbe7" translate="yes" xml:space="preserve">
          <source>If an argument is given, it must correspond to the desired section heading number, in which case only the specified section heading is returned. If there is no current section heading at the specified level, then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">引数を指定する場合、それは目的のセクション見出し番号に対応している必要があります。その場合、指定したセクション見出しのみが返されます。指定したレベルに現在のセクション見出しがない場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7271fc38171101f8ded47e78d280e28ab4aefe24" translate="yes" xml:space="preserve">
          <source>If an attribute handler is declared and the &lt;code&gt;:ATTR&lt;/code&gt; specifier is given the name of a built-in type (&lt;code&gt;SCALAR&lt;/code&gt; , &lt;code&gt;ARRAY&lt;/code&gt; , &lt;code&gt;HASH&lt;/code&gt; , or &lt;code&gt;CODE&lt;/code&gt; ), the handler is only applied to declarations of that type. For example, the following definition:</source>
          <target state="translated">属性ハンドラーが宣言され、 &lt;code&gt;:ATTR&lt;/code&gt; 指定子に組み込み型の名前（ &lt;code&gt;SCALAR&lt;/code&gt; 、 &lt;code&gt;ARRAY&lt;/code&gt; 、 &lt;code&gt;HASH&lt;/code&gt; 、または &lt;code&gt;CODE&lt;/code&gt; ）が指定されている場合、ハンドラーはその型の宣言にのみ適用されます。たとえば、次の定義：</target>
        </trans-unit>
        <trans-unit id="99c7ef44f90555314050f910e8588b5f9dbab3f7" translate="yes" xml:space="preserve">
          <source>If an attribute handler is declared and the &lt;code&gt;:ATTR&lt;/code&gt; specifier is given the name of a built-in type (&lt;code&gt;SCALAR&lt;/code&gt;, &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;HASH&lt;/code&gt;, or &lt;code&gt;CODE&lt;/code&gt;), the handler is only applied to declarations of that type. For example, the following definition:</source>
          <target state="translated">属性ハンドラーが宣言され、 &lt;code&gt;:ATTR&lt;/code&gt; 指定子に組み込み型（ &lt;code&gt;SCALAR&lt;/code&gt; 、 &lt;code&gt;ARRAY&lt;/code&gt; 、 &lt;code&gt;HASH&lt;/code&gt; 、または &lt;code&gt;CODE&lt;/code&gt; ）の名前が​​指定されている場合、ハンドラーはその型の宣言にのみ適用されます。たとえば、次の定義：</target>
        </trans-unit>
        <trans-unit id="62eb757e944d2fdd579513e058242369fd9ee059" translate="yes" xml:space="preserve">
          <source>If an element of</source>
          <target state="translated">の要素が</target>
        </trans-unit>
        <trans-unit id="12dcad5cabf51c630b511f4237ee95faf62760f4" translate="yes" xml:space="preserve">
          <source>If an element, call it ELEMENT, is not on this list, try using this command to find out why:</source>
          <target state="translated">ELEMENTと呼ばれる要素がこのリストにない場合は、このコマンドを使ってその理由を調べてみてください。</target>
        </trans-unit>
        <trans-unit id="ac822e62f394feec698ce4d683fc3173f8604479" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;, or nothing that matches the first 3 values above is returned, then &lt;a href=&quot;#require-VERSION&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; looks at the remaining elements of &lt;a href=&quot;perlvar#%40INC&quot;&gt;&lt;code&gt;@INC&lt;/code&gt;&lt;/a&gt;. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="translated">空のリスト、&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;、または上記の最初の3つの値に一致するものが返されない場合、&lt;a href=&quot;#require-VERSION&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;perlvar#%40INC&quot;&gt; &lt;code&gt;@INC&lt;/code&gt; の&lt;/a&gt;残りの要素を調べます。このファイルハンドルは実際のファイルハンドルである必要があることに注意してください（厳密には、タイプグロブまたはタイプグロブへの参照（祝福されているかどうかに関係なく））。関連付けられたファイルハンドルは無視され、処理はそこで停止します。</target>
        </trans-unit>
        <trans-unit id="34964fb1164dd648c7d2582c841b9ac59c8a6438" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or nothing that matches the first 3 values above is returned, then &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="translated">空のリスト、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 、または上記の最初の3つの値に一致するものが何も返されない場合、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; は@INCの残りの要素を調べます。このファイルハンドルは、実際のファイルハンドル（厳密にはタイプグロブまたはタイプグロブへの参照）である必要があることに注意してください。結合されたファイルハンドルは無視され、処理はそこで停止します。</target>
        </trans-unit>
        <trans-unit id="e6b9ed06c157d2ccb39c11bcda5c6ea1f6b42a42" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or nothing that matches the first 3 values above is returned, then &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="translated">空のリスト、 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 、または上記の最初の3つの値に一致するものが何も返されない場合、 &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; は@INCの残りの要素を調べます。このファイルハンドルは、実際のファイルハンドル（厳密にはタイプグロブまたはタイプグロブへの参照）である必要があることに注意してください。結合されたファイルハンドルは無視され、処理はそこで停止します。</target>
        </trans-unit>
        <trans-unit id="f919dfddbef4a1a12f08337d7a834831006d9b11" translate="yes" xml:space="preserve">
          <source>If an error is encountered during conversion, output file will be removed and a warning emitted instead of terminating the conversion immediately.</source>
          <target state="translated">変換中にエラーが発生した場合,出力ファイルは削除され,すぐに変換を終了する代わりに警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="9714806e81ca60318ef1d507fb9add3187535d9b" translate="yes" xml:space="preserve">
          <source>If an error occurs &lt;code&gt;blocking&lt;/code&gt; will return undef and &lt;code&gt;$!&lt;/code&gt; will be set.</source>
          <target state="translated">エラーが発生した場合、 &lt;code&gt;blocking&lt;/code&gt; はundefおよび &lt;code&gt;$!&lt;/code&gt; を返します。設定されます。</target>
        </trans-unit>
        <trans-unit id="223081f636c4dc0e612cdeecd4fd8749800bcc2c" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing or compilation, in most cases a valid op tree (most likely null) is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. Some compilation errors, however, will throw an exception immediately.</source>
          <target state="translated">解析やコンパイルでエラーが発生した場合、ほとんどの場合、有効な op ツリー(ほとんどの場合 null)が返されます。エラーはパーサの状態に反映され、通常は、発生したすべてのコンパイルエラーをカバーするために、解析の最上位レベルで単一の例外が発生します。しかし、コンパイルエラーの中には、すぐに例外が発生するものもあります。</target>
        </trans-unit>
        <trans-unit id="409c88cc16ea56deb3ee2fd13496f8443cdeb8ed" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing or compilation, in most cases a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. Some compilation errors, however, will throw an exception immediately.</source>
          <target state="translated">解析やコンパイルでエラーが発生した場合、ほとんどの場合は有効なオペツリーが返されます。エラーはパーサの状態に反映され、通常は、発生したすべてのコンパイルエラーをカバーする、解析の最上位レベルで単一の例外が発生します。しかし、コンパイルエラーの中には、すぐに例外が発生するものもあります。</target>
        </trans-unit>
        <trans-unit id="fb3a0347b1d41b96c13bdbefc10e2d1afbf9de50" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing, which can only occur if the label is mandatory, a valid label is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred.</source>
          <target state="translated">解析中にエラーが発生した場合、ラベルが必須の場合にのみ発生し、有効なラベルが返されます。エラーはパーサの状態に反映され、通常は、発生したすべてのコンパイルエラーをカバーする、解析の最上位レベルで単一の例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d9bdcdf03abe1ba577aa0e79f3435579268caad1" translate="yes" xml:space="preserve">
          <source>If an error occurs, it SHOULD return the fragment of string that has been converted and modify $octets in-place to remove the converted part leaving it starting with the problem fragment. If perlio_ok() is true, SHOULD becomes MUST.</source>
          <target state="translated">エラーが発生した場合は、変換された文字列のフラグメントを返し、問題のあるフラグメントから始まる部分を残して変換された部分を削除するように$octetsをその場で修正するべきである[SHOULD]。perlio_ok()が真の場合、SHOULDはMUSTになります。</target>
        </trans-unit>
        <trans-unit id="5cf7457198e3f9cd671a04a577836ab4a9017358" translate="yes" xml:space="preserve">
          <source>If an error occurs, it SHOULD return the octet sequence for the fragment of string that has been converted and modify $string in-place to remove the converted part leaving it starting with the problem fragment. If perlio_ok() is true, SHOULD becomes MUST.</source>
          <target state="translated">エラーが発生した場合は、変換された文字列のフラグメントのオクテットシーケンスを返し、変換された部分を問題のフラグメントから始まる部分に残して、変換された部分を削除するように$stringをその場で修正するべきである[SHOULD]。perlio_ok()が真の場合、SHOULDはMUSTになります。</target>
        </trans-unit>
        <trans-unit id="0c2d11e497e2ae0afa960e508853e27c914d2845" translate="yes" xml:space="preserve">
          <source>If an existing module &lt;b&gt;almost&lt;/b&gt; does what you want, consider writing a patch, writing a subclass, or otherwise extending the existing module rather than rewriting it.</source>
          <target state="translated">既存のモジュールが&lt;b&gt;ほぼ&lt;/b&gt;期待&lt;b&gt;どおりの&lt;/b&gt;動作をする場合は、パッチを作成するか、サブクラスを作成するか、または既存のモジュールを書き換えるのではなく拡張することを検討してください。</target>
        </trans-unit>
        <trans-unit id="82c1aacb1c3709d4e7d697aae2bed5c77802f47c" translate="yes" xml:space="preserve">
          <source>If an exit status</source>
          <target state="translated">終了ステータスが</target>
        </trans-unit>
        <trans-unit id="cea12036a9c231320c44066b7b5457646bd39537" translate="yes" xml:space="preserve">
          <source>If an exit status is</source>
          <target state="translated">終了ステータスが</target>
        </trans-unit>
        <trans-unit id="e2873de2f1e9af5ea740b20953d89320900ebe0e" translate="yes" xml:space="preserve">
          <source>If an extant $SIG{__WARN__} handler is discovered, it will continue to be honored, but only after the diagnostics::splainthis() function (the module's $SIG{__WARN__} interceptor) has had its way with your warnings.</source>
          <target state="translated">既存の $SIG{__WARN__}ハンドラが発見された場合、それは引き続き尊重されますが、 diagnostics::splainthis()関数 (モジュールの $SIG{__WARN__}インターセプター)が警告を処理した後でなければなりません。</target>
        </trans-unit>
        <trans-unit id="d72e4c503af6f4a09cfa2171e2474d37da483a9b" translate="yes" xml:space="preserve">
          <source>If an extension is being built away from the perl source then MakeMaker will leave PERL_SRC undefined and default to using the installed copy of the perl library. The other variables default to the following:</source>
          <target state="translated">拡張機能が perl ソースから離れてビルドされている場合、MakeMaker は PERL_SRC を未定義のままにして、インストールされている perl ライブラリのコピーを使用するようにデフォルトで設定します。他の変数のデフォルトは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a1c876b366d6c58e85d7243f2dbcbb0c36548470" translate="yes" xml:space="preserve">
          <source>If an extension is being built below the &lt;code&gt;ext/&lt;/code&gt; directory of the perl source then MakeMaker will set PERL_SRC automatically (e.g., &lt;code&gt;../..&lt;/code&gt;). If PERL_SRC is defined and the extension is recognized as a standard extension, then other variables default to the following:</source>
          <target state="translated">拡張機能がperlソースの &lt;code&gt;ext/&lt;/code&gt; ディレクトリの下に構築されている場合、MakeMakerはPERL_SRCを自動的に設定します（たとえば、 &lt;code&gt;../..&lt;/code&gt; ）。PERL_SRCが定義されていて、拡張子が標準の拡張子として認識される場合、他の変数はデフォルトで次のようになります。</target>
        </trans-unit>
        <trans-unit id="a0316d054e0262fb322cda466200340b0b6b9a08" translate="yes" xml:space="preserve">
          <source>If an extractor returns a defined value, that value is immediately treated as the next extracted field and pushed onto the list of fields. If the extractor was specified in a hash reference, the field is also blessed into the appropriate class,</source>
          <target state="translated">抽出器が定義された値を返す場合、その値は直ちに次の抽出されたフィールドとして扱われ、フィールドのリストにプッシュされます。抽出器がハッシュ参照で指定された場合、そのフィールドは適切なクラスに祝福されます。</target>
        </trans-unit>
        <trans-unit id="19aae17e0a99010e0b921850c1a03e6076850e68" translate="yes" xml:space="preserve">
          <source>If an infinity or a not-a-number is recognized, &lt;code&gt;*sp&lt;/code&gt; will point to one byte past the end of the recognized string. If the recognition fails, zero is returned, and &lt;code&gt;*sp&lt;/code&gt; will not move.</source>
          <target state="translated">無限大または非数値が認識された場合、 &lt;code&gt;*sp&lt;/code&gt; は認識された文字列の終わりを過ぎた1バイトを指します。認識に失敗した場合、ゼロが返され、 &lt;code&gt;*sp&lt;/code&gt; は移動しません。</target>
        </trans-unit>
        <trans-unit id="f7e24bf211ae35444c0a5b02834d4c163f847646" translate="yes" xml:space="preserve">
          <source>If an infinity or a not-a-number is recognized, the *sp will point to one byte past the end of the recognized string. If the recognition fails, zero is returned, and the *sp will not move.</source>
          <target state="translated">無限大または非数が認識された場合、*spは認識された文字列の末尾から1バイト先を指します。認識に失敗した場合、ゼロが返され、*spは移動しません。</target>
        </trans-unit>
        <trans-unit id="ce09f2ed6b39791e05ffc528e1a968457528299e" translate="yes" xml:space="preserve">
          <source>If an object does not support the method specified (determined using UNIVERSAL::can()) then the call will be skipped. If the method dies a warning will be generated.</source>
          <target state="translated">オブジェクトが指定されたメソッドをサポートしていない場合 (UNIVERSAL::can()を使用して決定されます)、その呼び出しはスキップされます。メソッドが死んだ場合は警告が発生します。</target>
        </trans-unit>
        <trans-unit id="24adf3fb9ad8a72560fd633d7f97a817649bd630" translate="yes" xml:space="preserve">
          <source>If an operation is trapped in this way, then the code in STRING will not be executed. If such a trapped operation occurs or any other compile-time or return error, then $@ is set to the error message, just as with an eval().</source>
          <target state="translated">このように操作がトラップされた場合、STRING内のコードは実行されません。このような操作がトラップされた場合、あるいはその他のコンパイル時エラーやリターンエラーが発生した場合は、eval()と同様にエラーメッセージに$@が設定されます。</target>
        </trans-unit>
        <trans-unit id="010067cf6d54e236b69f60d21b2be969b22dcb45" translate="yes" xml:space="preserve">
          <source>If an optional feature is used by a consumer to add additional prerequisites, the consumer should merge the optional feature prerequisites into those given by the &lt;code&gt;prereqs&lt;/code&gt; key using the same semantics. See &lt;a href=&quot;#Merging-and-Resolving-Prerequisites&quot;&gt;&quot;Merging and Resolving Prerequisites&quot;&lt;/a&gt; for details on merging prerequisites.</source>
          <target state="translated">コンシューマーがオプション機能を使用して前提条件を追加する場合、コンシューマーは、同じセマンティクスを使用して、オプション機能の前提条件を &lt;code&gt;prereqs&lt;/code&gt; キーで指定された前提条件にマージする必要があります。参照&lt;a href=&quot;#Merging-and-Resolving-Prerequisites&quot;&gt;「マージと解決の前提条件」&lt;/a&gt;の前提条件をマージの詳細については。</target>
        </trans-unit>
        <trans-unit id="ed03e924684c92a9ff3960f906eb5ec6eb3ba279" translate="yes" xml:space="preserve">
          <source>If an output file depends on extra input files beside the script itself, a hash ref can be used in version 7.36 and above:</source>
          <target state="translated">出力ファイルがスクリプト自体の横にある追加の入力ファイルに依存している場合、バージョン 7.36 以降ではハッシュ参照を使用することができます。</target>
        </trans-unit>
        <trans-unit id="c694eae799a264caff23c78599d66c65a6eff8ab" translate="yes" xml:space="preserve">
          <source>If an uncaught exception results in interpreter exit, the exit code is determined from the values of &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;perlvar#%24%3F&quot;&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/a&gt; with this pseudocode:</source>
          <target state="translated">キャッチされない例外によってインタープリターが終了する場合、終了コードは&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; の&lt;/a&gt;値から決定されます。と&lt;a href=&quot;perlvar#%24%3F&quot;&gt; &lt;code&gt;$?&lt;/code&gt; &lt;/a&gt;この擬似コードで：</target>
        </trans-unit>
        <trans-unit id="215592828190613f91a4fc9378ebe41cd5d2be61" translate="yes" xml:space="preserve">
          <source>If an uncaught exception results in interpreter exit, the exit code is determined from the values of &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$?&lt;/code&gt; with this pseudocode:</source>
          <target state="translated">キャッチされない例外がインタープリターの終了をもたらす場合、終了コードは &lt;code&gt;$!&lt;/code&gt; の値から決定されます。そして &lt;code&gt;$?&lt;/code&gt; この疑似コードで：</target>
        </trans-unit>
        <trans-unit id="9816162ad52f74eb6f76cc05f87a2c2e46e90fd4" translate="yes" xml:space="preserve">
          <source>If another process currently has read, write, and/or delete access to the file and you don't allow that level of sharing, then your call to &lt;code&gt;CreateFile&lt;/code&gt; will fail. If you requested read, write, and/or delete access and another process already has the file open but doesn't allow that level of sharing, then your call to &lt;code&gt;createFile&lt;/code&gt; will fail. Once you have the file open, if another process tries to open it with read, write, and/or delete access and you don't allow that level of sharing, then that process won't be allowed to open the file.</source>
          <target state="translated">別のプロセスが現在ファイルへの読み取り、書き込み、削除のアクセス権を持っていて、そのレベルの共有を許可しない場合、 &lt;code&gt;CreateFile&lt;/code&gt; の呼び出しは失敗します。読み取り、書き込み、削除のアクセスを要求し、別のプロセスですでにファイルが開いているが、そのレベルの共有が許可されていない場合、 &lt;code&gt;createFile&lt;/code&gt; の呼び出しは失敗します。ファイルを開いた後、別のプロセスが読み取り、書き込み、または削除アクセスでファイルを開こうとし、そのレベルの共有を許可しない場合、そのプロセスはファイルを開くことができません。</target>
        </trans-unit>
        <trans-unit id="92c5b88805d10f4113bd0a0998d163f4bc00c5dc" translate="yes" xml:space="preserve">
          <source>If another process currently has read, write, and/or delete access to the file and you don't allow that level of sharing, then your call to &lt;code&gt;createFile&lt;/code&gt; will fail. If you requested read, write, and/or delete access and another process already has the file open but doesn't allow that level of sharing, then your call to &lt;code&gt;createFile&lt;/code&gt; will fail. Once you have the file open, if another process tries to open it with read, write, and/or delete access and you don't allow that level of sharing, then that process won't be allowed to open the file.</source>
          <target state="translated">別のプロセスが現在ファイルへの読み取り、書き込み、削除のアクセス権を持っていて、そのレベルの共有を許可しない場合、 &lt;code&gt;createFile&lt;/code&gt; の呼び出しは失敗します。読み取り、書き込み、削除のアクセスを要求し、別のプロセスですでにファイルが開いているが、そのレベルの共有が許可されていない場合、 &lt;code&gt;createFile&lt;/code&gt; の呼び出しは失敗します。ファイルを開いた後、別のプロセスが読み取り、書き込み、または削除アクセスでファイルを開こうとし、そのレベルの共有を許可しない場合、そのプロセスはファイルを開くことができません。</target>
        </trans-unit>
        <trans-unit id="7b864a885bc89443cbce8d662bf2be7249be99d8" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;test_args&lt;/code&gt; are given they will be appended to the end of the command argument list.</source>
          <target state="translated">いずれの場合 &lt;code&gt;test_args&lt;/code&gt; が与えられている彼らは、コマンド引数リストの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="37251314e00b333d40467d467ca5c0c35c0e366e" translate="yes" xml:space="preserve">
          <source>If any argument to &lt;b&gt;podselect&lt;/b&gt; is a reference to a hash (associative array) then the values with the following keys are processed as follows:</source>
          <target state="translated">&lt;b&gt;podselect&lt;/b&gt;への引数がハッシュ（連想配列）への参照である場合、次のキーを持つ値は次のように処理されます。</target>
        </trans-unit>
        <trans-unit id="0fa7b6de1acc5eb4980a2653a96afb04a72dd14b" translate="yes" xml:space="preserve">
          <source>If any arguments remain, and &lt;code&gt;GetOptionsFromString&lt;/code&gt; was not called in list context, a message will be given and &lt;code&gt;GetOptionsFromString&lt;/code&gt; will return failure.</source>
          <target state="translated">引数が残っており、リストコンテキストで &lt;code&gt;GetOptionsFromString&lt;/code&gt; が呼び出されなかった場合、メッセージが表示され、 &lt;code&gt;GetOptionsFromString&lt;/code&gt; は失敗を返します。</target>
        </trans-unit>
        <trans-unit id="59b5cfa2ac91aed4f93a07d4f29fc54a851c06d0" translate="yes" xml:space="preserve">
          <source>If any destructors are triggered as a result, the hv itself may be freed.</source>
          <target state="translated">結果としてデストラクタがトリガーされた場合、hv自体が解放される可能性があります。</target>
        </trans-unit>
        <trans-unit id="dd7074163e07f37b8a41bd25ef8050c203f85577" translate="yes" xml:space="preserve">
          <source>If any directories are included in @names they are searched before @dl_library_path. Directories may be specified as &lt;b&gt;-Ldir&lt;/b&gt;. Any other names are treated as filenames to be searched for.</source>
          <target state="translated">@namesにディレクトリが含まれている場合、@ dl_library_pathの前に検索されます。ディレクトリは&lt;b&gt;-Ldir&lt;/b&gt;として指定できます。他の名前は検索対象のファイル名として扱われます。</target>
        </trans-unit>
        <trans-unit id="864b32c42a324d7506e9ca2ec49f2bbc8bbdcf83" translate="yes" xml:space="preserve">
          <source>If any element of LIST is an lvalue, you can modify it by modifying VAR inside the loop. Conversely, if any element of LIST is NOT an lvalue, any attempt to modify that element will fail. In other words, the &lt;code&gt;foreach&lt;/code&gt; loop index variable is an implicit alias for each item in the list that you're looping over.</source>
          <target state="translated">LISTのいずれかの要素が左辺値である場合は、ループ内でVARを変更することによって変更できます。逆に、LISTのいずれかの要素が左辺値でない場合、その要素を変更しようとしても失敗します。つまり、 &lt;code&gt;foreach&lt;/code&gt; ループインデックス変数は、ループするリスト内の各項目の暗黙的なエイリアスです。</target>
        </trans-unit>
        <trans-unit id="3cbc5bd59ee7e5290e2a6a24d40e5bd7de01e87c" translate="yes" xml:space="preserve">
          <source>If any function has the OVERLOAD: keyword, several additional lines will be defined in the c file generated by xsubpp in order to register with the overload magic.</source>
          <target state="translated">いずれかの関数が OVERLOAD:キーワードを持っている場合、オーバーロードマジックに登録するために、xsubpp によって生成された c ファイルに数行の追加行が定義されます。</target>
        </trans-unit>
        <trans-unit id="705cbac0d6d9464ed1b8a92ba681b4a46a07d153" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call.</source>
          <target state="translated">リスト演算子（ &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; など）または単項演算子（ &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; など）の後に次のトークンとして左括弧が続く場合、括弧内の演算子と引数が最も優先されます。通常の関数呼び出しのように。</target>
        </trans-unit>
        <trans-unit id="cec7c53718240c968018769a330928a1255918e0" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call. For example, because named unary operators are higher precedence than &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="translated">リスト演算子（ &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; など）または単項演算子（ &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; など）の後に次のトークンとして左括弧が続く場合、括弧内の演算子と引数が最も優先されます。通常の関数呼び出しのように。たとえば、名前付き単項演算子は &lt;code&gt;||&lt;/code&gt; よりも優先順位が高いためです。：</target>
        </trans-unit>
        <trans-unit id="fc09b29b0e202c3ba1b9de2b8c7b1a00d9fcb394" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;print()&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;chdir()&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call.</source>
          <target state="translated">リスト演算子（ &lt;code&gt;print()&lt;/code&gt; など）または単項演算子（ &lt;code&gt;chdir()&lt;/code&gt; など）の後に次のトークンとして左括弧が続く場合、括弧内の演算子と引数が最も優先されます。通常の関数呼び出しのように。</target>
        </trans-unit>
        <trans-unit id="189e6bb75ad5ffde9c93fb5cd316abd2034296e1" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;print()&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;chdir()&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call. For example, because named unary operators are higher precedence than &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="translated">リスト演算子（ &lt;code&gt;print()&lt;/code&gt; など）または単項演算子（ &lt;code&gt;chdir()&lt;/code&gt; など）の後に次のトークンとして左括弧が続く場合、括弧内の演算子と引数が最も優先されます。通常の関数呼び出しのように。たとえば、名前付き単項演算子は &lt;code&gt;||&lt;/code&gt; よりも優先されるためです。：</target>
        </trans-unit>
        <trans-unit id="b227e6f9b5d8d36337845d9688db6eb8efa3551d" translate="yes" xml:space="preserve">
          <source>If any module's own AUTOLOAD subroutine has no need to fallback to the AutoLoader's AUTOLOAD subroutine (because it doesn't have any AutoSplit subroutines), then that module should not use &lt;b&gt;AutoLoader&lt;/b&gt; at all.</source>
          <target state="translated">任意のモジュール自身のAUTOLOADサブルーチンは、（それがどんな自動splitサブルーチンを持っていないため）オートローダーのAUTOLOADサブルーチンにフォールバックする必要がない場合、そのモジュールは使用しないでください&lt;b&gt;オートローダーを&lt;/b&gt;まったく。</target>
        </trans-unit>
        <trans-unit id="54f05d2b51008f086be29ce06ad2dc1e36ce0970" translate="yes" xml:space="preserve">
          <source>If any of the alternatives matches, the hash &lt;code&gt;%+&lt;/code&gt; is bound to contain the three key-value pairs.</source>
          <target state="translated">代替のいずれかが一致する場合、ハッシュ &lt;code&gt;%+&lt;/code&gt; は3つのキーと値のペアを含むようにバインドされます。</target>
        </trans-unit>
        <trans-unit id="dde2e9ba6df88b543ea738e9014946a615cc8feb" translate="yes" xml:space="preserve">
          <source>If any of the entries in an import list begins with !, : or / then the list is treated as a series of specifications which either add to or delete from the list of names to import. They are processed left to right. Specifications are in the form:</source>
          <target state="translated">インポートリストのいずれかのエントリが !、:または/で始まる場合、そのリストは、インポートする名前のリストに追加または削除する一連の仕様として扱われます。これらは左から右へと処理されます。仕様書の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="eed3f110a3402c08d6252799be2b5ee0618e62e2" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;a href=&quot;#stat-FILEHANDLE&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or &lt;a href=&quot;#stat-FILEHANDLE&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt;, and you need to remember that &lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;stat _&lt;/code&gt;). Example:</source>
          <target state="translated">ファイルテストのいずれか（または&lt;a href=&quot;#stat-FILEHANDLE&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt; &lt;code&gt;lstat&lt;/code&gt; &lt;/a&gt;演算子）に単独の下線で構成される特別なファイルハンドルが指定されている場合、前のファイルテスト（または&lt;a href=&quot;#stat-FILEHANDLE&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;演算子）のstat構造が使用され、システムコールが節約されます。 （これは &lt;code&gt;-t&lt;/code&gt; では機能しません。また、&lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt; &lt;code&gt;lstat&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;-l&lt;/code&gt; は、実際のファイルではなく、シンボリックリンクのstat構造に値を残すことを覚えておく必要があります。）（また、statバッファーが&lt;a href=&quot;#lstat-FILEHANDLE&quot;&gt; &lt;code&gt;lstat&lt;/code&gt; &lt;/a&gt;呼び出しでいっぱいになった場合、 &lt;code&gt;-T&lt;/code&gt; および &lt;code&gt;-B&lt;/code&gt; は、 &lt;code&gt;stat _&lt;/code&gt; ）の結果でリセットします。例：</target>
        </trans-unit>
        <trans-unit id="3fd2433b191431a7e89003ab4a4e523c3a5de0d9" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt; , and you need to remember that lstat() and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ). Example:</source>
          <target state="translated">ファイルテスト（または &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 演算子）に単独の下線で構成される特別なファイルハンドルが指定されている場合、前のファイルテスト（またはstat演算子）のstat構造が使用され、システムコールが保存されます。 （これは &lt;code&gt;-t&lt;/code&gt; では機能しません。また、lstat（）と &lt;code&gt;-l&lt;/code&gt; は、実際のファイルではなく、シンボリックリンクのstat構造体に値を残すことを覚えておく必要があります。）（また、statバッファーが &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 呼び出し、 &lt;code&gt;-T&lt;/code&gt; および &lt;code&gt;-B&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ）の結果でリセットします。例：</target>
        </trans-unit>
        <trans-unit id="c70d4afb0f7f0b8a4b2bcb0de7d2fe106cb41892" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt; , and you need to remember that lstat() and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ). Example:</source>
          <target state="translated">ファイルテスト（または &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 演算子）に単独の下線で構成される特別なファイルハンドルが指定されている場合、前のファイルテスト（またはstat演算子）のstat構造が使用され、システムコールが保存されます。 （これは &lt;code&gt;-t&lt;/code&gt; では機能しません。また、lstat（）と &lt;code&gt;-l&lt;/code&gt; は、実際のファイルではなく、シンボリックリンクのstat構造体に値を残すことを覚えておく必要があります。）（また、statバッファーが &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 呼び出し、 &lt;code&gt;-T&lt;/code&gt; および &lt;code&gt;-B&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ）の結果でリセットします。例：</target>
        </trans-unit>
        <trans-unit id="4eae7869337353cadd5cbfe4d84a955fd03cd8ba" translate="yes" xml:space="preserve">
          <source>If any of the given search directories contains a</source>
          <target state="translated">与えられた検索ディレクトリのいずれかに</target>
        </trans-unit>
        <trans-unit id="0865eba790bb7da4cb38d4fafb11a71c0ca93d75" translate="yes" xml:space="preserve">
          <source>If any of the three values is &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; that time value will not be used. So, for example, to set only the &lt;code&gt;$mtime&lt;/code&gt; you would use this</source>
          <target state="translated">3つの値のいずれかが &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 場合、その時間値は使用されません。したがって、たとえば、 &lt;code&gt;$mtime&lt;/code&gt; のみを設定するには、これを使用します</target>
        </trans-unit>
        <trans-unit id="f9ae80c94036ecc3639a1310fc69fc12fe61781c" translate="yes" xml:space="preserve">
          <source>If any of the three values is &lt;code&gt;undef&lt;/code&gt; that time value will not be used. So, for example, to set only the &lt;code&gt;$mtime&lt;/code&gt; you would use this</source>
          <target state="translated">3つの値のいずれかが &lt;code&gt;undef&lt;/code&gt; 場合、その時間値は使用されません。したがって、たとえば、 &lt;code&gt;$mtime&lt;/code&gt; のみを設定するには、これを使用します</target>
        </trans-unit>
        <trans-unit id="341a4d7e4dbc9eeb69d34b947d58bc6f15ecb9f2" translate="yes" xml:space="preserve">
          <source>If any part of LIST is an array, &lt;code&gt;foreach&lt;/code&gt; will get very confused if you add or remove elements within the loop body, for example with &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt;. So don't do that.</source>
          <target state="translated">LISTのいずれかの部分が配列である場合、たとえば &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; を使用してループ本体内で要素を追加または削除すると、 &lt;code&gt;foreach&lt;/code&gt; は非常に混乱します。だからそれをしないでください。</target>
        </trans-unit>
        <trans-unit id="a6977803bb4132cdee0ca3d69dd5582749d63459" translate="yes" xml:space="preserve">
          <source>If any part of LIST is an array, &lt;code&gt;foreach&lt;/code&gt; will get very confused if you add or remove elements within the loop body, for example with &lt;code&gt;splice&lt;/code&gt;. So don't do that.</source>
          <target state="translated">LISTのいずれかの部分が配列である場合、たとえば &lt;code&gt;splice&lt;/code&gt; を使用してループ本体内の要素を追加または削除すると、 &lt;code&gt;foreach&lt;/code&gt; は非常に混乱します。だからそうしないでください。</target>
        </trans-unit>
        <trans-unit id="31cf9c709860eea50a338d60ff5edf1e2478723c" translate="yes" xml:space="preserve">
          <source>If applicable, please include details on what the user should do to correct the error; documenting an error as indicating &quot;the input buffer is too small&quot; without telling the user how to increase the size of the input buffer (or at least telling them that it isn't possible) aren't very useful.</source>
          <target state="translated">入力バッファのサイズを大きくする方法をユーザに伝えずに、「入力バッファが小さすぎる」というエラーを文書化しても(あるいは、少なくともそれが不可能であることをユーザに伝えても)あまり意味がありません。</target>
        </trans-unit>
        <trans-unit id="17ebb7f065dcd7d1005a6e70cd7fc9ddab662a16" translate="yes" xml:space="preserve">
          <source>If argument is specified, it is an advice on minimal size of line to be included into history. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; means do not include anything into history. Returns the old value.</source>
          <target state="translated">引数が指定されている場合、履歴に含める行の最小サイズに関するアドバイスです。 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は、履歴に何も含めないことを意味します。古い値を返します。</target>
        </trans-unit>
        <trans-unit id="558be544e424e324e7828785f1d0946baec4a52b" translate="yes" xml:space="preserve">
          <source>If argument is specified, it is an advice on minimal size of line to be included into history. &lt;code&gt;undef&lt;/code&gt; means do not include anything into history. Returns the old value.</source>
          <target state="translated">引数を指定する場合は、履歴に含める行の最小サイズに関するアドバイスです。 &lt;code&gt;undef&lt;/code&gt; は、履歴に何も含まないことを意味します。古い値を返します。</target>
        </trans-unit>
        <trans-unit id="2dfd62fe55f271b39c6841425a803e9153fccfd7" translate="yes" xml:space="preserve">
          <source>If at least one handle is ready for the specified kind of operation, the result will be an array of 3 elements, each a reference to an array which will hold the handles that are ready for reading, writing and have exceptions respectively. Upon timeout, an empty list is returned, with &lt;code&gt;$!&lt;/code&gt; unchanged. Upon error, an empty list is returned, with &lt;code&gt;$!&lt;/code&gt; set to indicate the error. To distinguish between timeout and error, set &lt;code&gt;$!&lt;/code&gt; to zero before calling this method, and check it after an empty list is returned.</source>
          <target state="translated">少なくとも1つのハンドルが指定された種類の操作の準備ができている場合、結果は3つの要素の配列になります。各要素は、読み取り、書き込みの準備ができ、それぞれ例外があるハンドルを保持する配列への参照です。タイムアウトすると、 &lt;code&gt;$!&lt;/code&gt; を含む空のリストが返されます。変更なし。エラーが発生すると、 &lt;code&gt;$!&lt;/code&gt; を含む空のリストが返されます。エラーを示すように設定します。タイムアウトとエラーを区別するには、 &lt;code&gt;$!&lt;/code&gt; を設定します。このメソッドを呼び出す前にゼロにし、空のリストが返された後にチェックします。</target>
        </trans-unit>
        <trans-unit id="84097126d5165e3f6c46b39868c8cad17c6bb873" translate="yes" xml:space="preserve">
          <source>If backward compatibility for Perls &lt;b&gt;under&lt;/b&gt; 5.6 is important, one must write instead a &lt;code&gt;use vars&lt;/code&gt; statement.</source>
          <target state="translated">5.6&lt;b&gt;未満の&lt;/b&gt;Perlの下位互換性が重要な場合は、代わりに &lt;code&gt;use vars&lt;/code&gt; ステートメントを記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="fd699eb48fd240fe4a2bcf57e3a3520a6ee8d6f2" translate="yes" xml:space="preserve">
          <source>If backward compatibility for Perls under 5.6 is important, one must write instead a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; statement.</source>
          <target state="translated">5.6未満のPerlの下位互換性が重要な場合は、代わりに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; ステートメントを記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7d0b9799b974e77c25f857fd60005fd09516395" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; . For example, breaking the single input byte &lt;code&gt;&lt;a href=&quot;chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt; ; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; .</source>
          <target state="translated">ビットが4以下の場合、文字列はバイトに分割され、各バイトのビットは8 / BITSグループに分割されます。バイトのビットは同様に、リトルエンディアンっぽい方法で番号が付けられている &lt;code&gt;0x01&lt;/code&gt; 、 &lt;code&gt;0x02&lt;/code&gt; の、 &lt;code&gt;0x04&lt;/code&gt; を、 &lt;code&gt;0x08&lt;/code&gt; に、 &lt;code&gt;0x10&lt;/code&gt; を、 &lt;code&gt;0x20&lt;/code&gt; に、 &lt;code&gt;0x40&lt;/code&gt; の、 &lt;code&gt;0x80&lt;/code&gt; から。たとえば、単一の入力バイト &lt;code&gt;&lt;a href=&quot;chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; を2つのグループに分割すると、リスト &lt;code&gt;(0x6, 0x3)&lt;/code&gt; 0x6、0x3）が得られます。それを4つのグループに分割すると &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="77d4537f5763ddf89d58388ac5f77f55fec21e75" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; . For example, breaking the single input byte &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt; ; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; .</source>
          <target state="translated">ビットが4以下の場合、文字列はバイトに分割され、各バイトのビットは8 / BITSグループに分割されます。バイトのビットは同様に、リトルエンディアンっぽい方法で番号が付けられている &lt;code&gt;0x01&lt;/code&gt; 、 &lt;code&gt;0x02&lt;/code&gt; の、 &lt;code&gt;0x04&lt;/code&gt; を、 &lt;code&gt;0x08&lt;/code&gt; に、 &lt;code&gt;0x10&lt;/code&gt; を、 &lt;code&gt;0x20&lt;/code&gt; に、 &lt;code&gt;0x40&lt;/code&gt; の、 &lt;code&gt;0x80&lt;/code&gt; から。たとえば、単一の入力バイト &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; を2つのグループに分割すると、リスト &lt;code&gt;(0x6, 0x3)&lt;/code&gt; 0x6、0x3）が得られます。それを4つのグループに分割すると &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f0fce82eab0f0647014ec432d0b3fa1af89e83a3" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt;, &lt;code&gt;0x02&lt;/code&gt;, &lt;code&gt;0x04&lt;/code&gt;, &lt;code&gt;0x08&lt;/code&gt;, &lt;code&gt;0x10&lt;/code&gt;, &lt;code&gt;0x20&lt;/code&gt;, &lt;code&gt;0x40&lt;/code&gt;, &lt;code&gt;0x80&lt;/code&gt;. For example, breaking the single input byte &lt;code&gt;chr(0x36)&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt;; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt;.</source>
          <target state="translated">ビットが4以下の場合、文字列はバイトに分割され、各バイトのビットは8 / BITSグループに分割されます。バイトのビットは同様に、リトルエンディアンっぽい方法で番号が付けられている &lt;code&gt;0x01&lt;/code&gt; 、 &lt;code&gt;0x02&lt;/code&gt; の、 &lt;code&gt;0x04&lt;/code&gt; を、 &lt;code&gt;0x08&lt;/code&gt; に、 &lt;code&gt;0x10&lt;/code&gt; を、 &lt;code&gt;0x20&lt;/code&gt; に、 &lt;code&gt;0x40&lt;/code&gt; の、 &lt;code&gt;0x80&lt;/code&gt; から。たとえば、単一の入力バイト &lt;code&gt;chr(0x36)&lt;/code&gt; を2つのグループに分割すると、リスト &lt;code&gt;(0x6, 0x3)&lt;/code&gt; 0x6、0x3）が得られます。それを4つのグループに分割すると &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bf0f5d848a9043e820336aaa7c2b5b535010685b" translate="yes" xml:space="preserve">
          <source>If both arguments to &lt;code&gt;copy&lt;/code&gt; are not file handles, then &lt;code&gt;copy&lt;/code&gt; will perform a &quot;system copy&quot; of the input file to a new output file, in order to preserve file attributes, indexed file structure,</source>
          <target state="translated">両方の引数場合は &lt;code&gt;copy&lt;/code&gt; ファイルハンドルではありません、そして &lt;code&gt;copy&lt;/code&gt; 、ファイル属性、インデックス付きファイル構造を維持するために、新しい出力ファイルに入力ファイルの「システムのコピー」を実行します、</target>
        </trans-unit>
        <trans-unit id="e9104a77e501731bf3173e5f8cc7012527cca560" translate="yes" xml:space="preserve">
          <source>If both the SIGNAL and the PROCESS are negative, the results are undefined. A warning may be produced in a future version.</source>
          <target state="translated">SIGNALとPROCESSの両方が負の場合、結果は未定義です。将来のバージョンでは警告が出るかもしれません。</target>
        </trans-unit>
        <trans-unit id="43c2b718c80fc2756eb63ba9991217396d36da72" translate="yes" xml:space="preserve">
          <source>If braces are not needed to specify a property (e.g., &lt;code&gt;\pL&lt;/code&gt; ), the left column contains both forms, with and without braces.</source>
          <target state="translated">プロパティを指定するために中括弧が必要ない場合（例： &lt;code&gt;\pL&lt;/code&gt; ）、左の列には中括弧がある場合とない場合の両方の形式が含まれます。</target>
        </trans-unit>
        <trans-unit id="8260701f533c58633eabb2e152bfb995da51c762" translate="yes" xml:space="preserve">
          <source>If braces are not needed to specify a property (e.g., &lt;code&gt;\pL&lt;/code&gt;), the left column contains both forms, with and without braces.</source>
          <target state="translated">プロパティを指定するために中括弧が必要ない場合（たとえば、 &lt;code&gt;\pL&lt;/code&gt; ）、左側の列には中括弧がある場合とない場合の両方の形式が含まれます。</target>
        </trans-unit>
        <trans-unit id="0a4169e83148646605b11ff599e0ccd6579a7d78" translate="yes" xml:space="preserve">
          <source>If branches are involved (ie. $Revision: 1.5.3.4$) it's a little more complicated.</source>
          <target state="translated">ブランチが関係している場合 ($Revision:1.5.3.4$ など)はもう少し複雑です。</target>
        </trans-unit>
        <trans-unit id="2c0abc37f0d263edf159adfc0dd160a4e923f046" translate="yes" xml:space="preserve">
          <source>If building completes successfully, you can set up smoke testing as described in the Test::Smoke documentation.</source>
          <target state="translated">ビルドが正常に完了した場合は、Test::Smoke ドキュメントで説明されているように、スモークテストを設定することができます。</target>
        </trans-unit>
        <trans-unit id="2c319407a62fb715df8d4d26f7931f9374106237" translate="yes" xml:space="preserve">
          <source>If building natively on PASE, please do the build under the /QOpenSys directory, since Perl is happier when built on a case sensitive filesystem.</source>
          <target state="translated">PASE上でネイティブにビルドする場合は、/QOpenSysディレクトリの下でビルドしてください。</target>
        </trans-unit>
        <trans-unit id="973afa89149c95161585621016fbc1be5e704a2e" translate="yes" xml:space="preserve">
          <source>If building with the cross-compiler provided by mingw-w64.org you'll need to uncomment the line that sets GCCCROSS in the makefile.mk. Do this only if it's the cross-compiler - ie only if the bin folder doesn't contain a gcc.exe. (The cross-compiler does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these executables are prefixed with 'x86_64-w64-mingw32-'.)</source>
          <target state="translated">もし mingw-w64.org が提供するクロスコンパイラを使ってビルドする場合は、 makefile.mk の GCCCROSS を設定する行のコメントを外す必要があります。これはクロスコンパイラの場合にのみ行ってください-つまり、binフォルダにgcc.exeが含まれていない場合にのみ行ってください。その代わり、これらの実行ファイルはすべて 'x86_64-w64-mingw32-' というプレフィックスが付けられています)。</target>
        </trans-unit>
        <trans-unit id="2edb493675bf68411bac8372236ccf07c63ce62d" translate="yes" xml:space="preserve">
          <source>If building with the cross-compiler provided by mingw-w64.sourceforge.net you'll need to uncomment the line that sets GCCCROSS in the makefile.mk. Do this only if it's the cross-compiler - ie only if the bin folder doesn't contain a gcc.exe. (The cross-compiler does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these executables are prefixed with 'x86_64-w64-mingw32-'.)</source>
          <target state="translated">もし mingw-w64.sourceforge.net が提供するクロスコンパイラを使ってビルドする場合、 makefile.mk の GCCCROSS を設定する行のコメントを外す必要があります。これはクロスコンパイラの場合にのみ行ってください-つまり、binフォルダにgcc.exeが含まれていない場合にのみ行ってください。その代わり、これらの実行ファイルはすべて 'x86_64-w64-mingw32-' というプレフィックスが付けられています)。</target>
        </trans-unit>
        <trans-unit id="9e17d613e1404f153f1b0ce16d928004818ba4b8" translate="yes" xml:space="preserve">
          <source>If by daemon process you mean one that's detached (disassociated from its tty), then the following process is reported to work on most Unixish systems. Non-Unix users should check their Your_OS::Process module for other solutions.</source>
          <target state="translated">デーモンプロセスがデタッチされている(ttyから切り離されている)ものを意味するならば、以下のプロセスはほとんどのUnix系システムで動作すると報告されています。Unix以外のユーザは、他の解決策がないかYour_OS::Processモジュールをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="f14156857ddead4c835ba55e44d3f79ccfb246a2" translate="yes" xml:space="preserve">
          <source>If by some reasons</source>
          <target state="translated">何らかの理由で</target>
        </trans-unit>
        <trans-unit id="85a1911ef5d789d9bb6809a0f2c6b323a8f5cec0" translate="yes" xml:space="preserve">
          <source>If callbacks are used, they will be issued before this call returns.</source>
          <target state="translated">コールバックが使用されている場合は、この呼び出しが戻る前に発行されます。</target>
        </trans-unit>
        <trans-unit id="313e870db9c5d448dca42a14416b5684a916e7ce" translate="yes" xml:space="preserve">
          <source>If called as &lt;code&gt;sv_vcatpvfn&lt;/code&gt; or flags has the &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, calls get magic.</source>
          <target state="translated">&lt;code&gt;sv_vcatpvfn&lt;/code&gt; として呼び出された場合、またはフラグに &lt;code&gt;SV_GMAGIC&lt;/code&gt; ビットが設定されている場合、呼び出しは魔法になります。</target>
        </trans-unit>
        <trans-unit id="706aad3a29650f166c943e5c886b39dcd0a4394e" translate="yes" xml:space="preserve">
          <source>If called as &lt;code&gt;sv_vcatpvfn&lt;/code&gt; or flags include &lt;code&gt;SV_GMAGIC&lt;/code&gt; , calls get magic.</source>
          <target state="translated">&lt;code&gt;sv_vcatpvfn&lt;/code&gt; として呼び出されるか、フラグに &lt;code&gt;SV_GMAGIC&lt;/code&gt; が含まれている場合、get magicを呼び出します。</target>
        </trans-unit>
        <trans-unit id="614a0f52f1c33eb959730f1d5d32f8786b9d57d8" translate="yes" xml:space="preserve">
          <source>If called as an instance method (i.e. $md5-&amp;gt;new) it will just reset the state the object to the state of a newly created object. No new object is created in this case.</source>
          <target state="translated">インスタンスメソッドとして呼び出された場合（つまり、$ md5-&amp;gt; new）、オブジェクトの状態を新しく作成されたオブジェクトの状態にリセットするだけです。この場合、新しいオブジェクトは作成されません。</target>
        </trans-unit>
        <trans-unit id="9eff0140ef6933e6b5cb7ac53c50b2609e62aacb" translate="yes" xml:space="preserve">
          <source>If called as an instance method, the value is assigned to the invocand.</source>
          <target state="translated">インスタンスメソッドとして呼び出された場合、その値はインボカンドに代入されます。</target>
        </trans-unit>
        <trans-unit id="8679ce9e8862eb205bcd677039372fd6e97a03da" translate="yes" xml:space="preserve">
          <source>If called in a list context and the global variable &lt;code&gt;$INSTANCES&lt;/code&gt; is a true value, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt; , or an empty list if it was not found.</source>
          <target state="translated">リストコンテキストで呼び出され、グローバル変数 &lt;code&gt;$INSTANCES&lt;/code&gt; がtrueの場合、 &lt;code&gt;PATH&lt;/code&gt; で見つかったバイナリのインスタンスへの完全パスのリストが返されます。見つからなかった場合は空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="df3b5a11aab4c086bd9cac6e1ddae966355312d8" translate="yes" xml:space="preserve">
          <source>If called in a list context and the global variable &lt;code&gt;$INSTANCES&lt;/code&gt; is a true value, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt;, or an empty list if it was not found.</source>
          <target state="translated">リストコンテキストで呼び出され、グローバル変数 &lt;code&gt;$INSTANCES&lt;/code&gt; が真の値である場合、 &lt;code&gt;PATH&lt;/code&gt; で見つかったバイナリのインスタンスへのフルパスのリスト、または見つからなかった場合は空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="b8293e343dafdb403ea7c5d5ddbde243205b61a6" translate="yes" xml:space="preserve">
          <source>If called in a list context, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt; , or an empty list if it was not found.</source>
          <target state="translated">リストコンテキストで呼び出された場合、 &lt;code&gt;PATH&lt;/code&gt; で見つかったバイナリのインスタンスへの完全パスのリストを返します。見つからなかった場合は空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="f5370268c560e6f64c9874ef2c0fc0f892b2ca25" translate="yes" xml:space="preserve">
          <source>If called in a list context, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt;, or an empty list if it was not found.</source>
          <target state="translated">リストコンテキストで呼び出された場合、 &lt;code&gt;PATH&lt;/code&gt; で見つかったバイナリのインスタンスへのフルパスのリストを返します。見つからなかった場合は空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="522ffa67a9fbac5fe032f13cc8e4e97e4f0b245b" translate="yes" xml:space="preserve">
          <source>If called in a scalar context it will return the full path to the binary you asked for if it was found, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it was not.</source>
          <target state="translated">スカラーコンテキストで呼び出された場合は、見つかった場合は要求したバイナリへの完全なパスを返し、見つからなかった場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8320f2054497a9bae0f18de5b046bd415cc37b89" translate="yes" xml:space="preserve">
          <source>If called in a scalar context it will return the full path to the binary you asked for if it was found, or &lt;code&gt;undef&lt;/code&gt; if it was not.</source>
          <target state="translated">スカラーコンテキストで呼び出されると、見つかった場合は要求したバイナリへのフルパスが返され、見つからなかった場合は &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="95f63f3ffa5199ae8cbe82545b9235a06bf20e5c" translate="yes" xml:space="preserve">
          <source>If called in a scalar context, &lt;code&gt;getsym&lt;/code&gt; returns the value of the symbol whose name is given as the argument to the call, or &lt;code&gt;undef&lt;/code&gt; if no such symbol exists. Symbols in the local symbol table are always used in preference to symbols in the global symbol table. If called in a list context, &lt;code&gt;getsym&lt;/code&gt; returns a two-element list, whose first element is the value of the symbol, and whose second element is the string 'GLOBAL' or 'LOCAL', indicating the table from which the symbol's value was read.</source>
          <target state="translated">スカラーコンテキストで呼び出された場合、 &lt;code&gt;getsym&lt;/code&gt; は、呼び出しの引数として名前が指定されたシンボルの値を返します。そのようなシンボルが存在しない場合は &lt;code&gt;undef&lt;/code&gt; を返します。ローカルシンボルテーブルのシンボルは、グローバルシンボルテーブルのシンボルよりも常に優先して使用されます。リストコンテキストで呼び出された場合、 &lt;code&gt;getsym&lt;/code&gt; は2要素のリストを返します。最初の要素はシンボルの値であり、2番目の要素は文字列「GLOBAL」または「LOCAL」であり、シンボルの値が読み取られたテーブルを示します。 。</target>
        </trans-unit>
        <trans-unit id="b5dcbe2314e7e7c1c4c1bcc0ca660c9625dfb9c3" translate="yes" xml:space="preserve">
          <source>If called in scalar context, only the filehandle is returned and the file will automatically be deleted when closed on operating systems that support this (see the description of tmpfile() elsewhere in this document). This is the preferred mode of operation, as if you only have a filehandle, you can never create a race condition by fumbling with the filename. On systems that can not unlink an open file or can not mark a file as temporary when it is opened (for example, Windows NT uses the &lt;code&gt;O_TEMPORARY&lt;/code&gt; flag) the file is marked for deletion when the program ends (equivalent to setting UNLINK to 1). The &lt;code&gt;UNLINK&lt;/code&gt; flag is ignored if present.</source>
          <target state="translated">スカラーコンテキストで呼び出された場合、ファイルハンドルのみが返され、これをサポートするオペレーティングシステムで閉じると、ファイルは自動的に削除されます（このドキュメントの他の場所にあるtmpfile（）の説明を参照してください）。これは推奨される操作モードです。ファイルハンドルしかない場合は、ファイル名をいじって競合状態を作成することはできません。開いているファイルのリンクを解除できない、または開いたときにファイルを一時としてマークできないシステム（たとえば、Windows NTは &lt;code&gt;O_TEMPORARY&lt;/code&gt; フラグを使用）では、プログラムの終了時にファイルに削除のマークが付けられます（UNLINKを1に設定するのと同じ）。 。 &lt;code&gt;UNLINK&lt;/code&gt; 存在する場合フラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="5e86b593d758e5e3c8998823e4b17f5dfdc961bc" translate="yes" xml:space="preserve">
          <source>If called in scalar context, only the filehandle is returned and the file will automatically be deleted when closed on operating systems that support this (see the description of tmpfile() elsewhere in this document). This is the preferred mode of operation, as if you only have a filehandle, you can never create a race condition by fumbling with the filename. On systems that can not unlink an open file or can not mark a file as temporary when it is opened (for example, Windows NT uses the C</source>
          <target state="translated">スカラコンテキストで呼ばれた場合、ファイルハンドルのみが返され、これをサポートしているオペレーティングシステムでは閉じたときにファイルは自動的に削除されます(このドキュメントの他の場所にあるtmpfile()の説明を参照してください)。これは、ファイルハンドルだけを持っていれば、ファイル名をいじってレース状態になることがないので、好ましい操作モードです。開いているファイルのリンクを解除できなかったり,ファイルを開いたときに一時的なものとしてマークすることができないシステムでは(例えば,Windows NT は C</target>
        </trans-unit>
        <trans-unit id="2926650808a88d22bd30c27717549af3be1de564" translate="yes" xml:space="preserve">
          <source>If called when &lt;code&gt;use utf8&lt;/code&gt; is in effect, the string will be assumed to be encoded in UTF-8, and &lt;code&gt;evalbytes&lt;/code&gt; will make a temporary copy to work from, downgraded to non-UTF-8. If this is not possible (because one or more characters in it require UTF-8), the &lt;code&gt;evalbytes&lt;/code&gt; will fail with the error stored in &lt;code&gt;$@&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; が有効なときに呼び出された場合、文字列はUTF-8でエンコードされていると &lt;code&gt;evalbytes&lt;/code&gt; 、evalbytesは、UTF-8以外にダウングレードされた作業用の一時コピーを作成します。これが不可能な場合（1つ以上の文字にUTF-8が必要なため）、 &lt;code&gt;evalbytes&lt;/code&gt; は失敗し、エラーは &lt;code&gt;$@&lt;/code&gt; 格納されます。</target>
        </trans-unit>
        <trans-unit id="c83187abf3e8e59deed13ec45be5007e63c321fb" translate="yes" xml:space="preserve">
          <source>If called with a property that doesn't have synonyms for its values, it returns the input value, possibly normalized with capitalization and underscores, but not necessarily checking that the input value is valid.</source>
          <target state="translated">値の同義語を持たないプロパティで呼び出された場合は、入力値を返します。</target>
        </trans-unit>
        <trans-unit id="abcbf5b218ac08698c7495d3bca85cf2f5fc593a" translate="yes" xml:space="preserve">
          <source>If called with an argument &lt;code&gt;blocking&lt;/code&gt; will turn on non-blocking IO if &lt;code&gt;BOOL&lt;/code&gt; is false, and turn it off if &lt;code&gt;BOOL&lt;/code&gt; is true.</source>
          <target state="translated">引数で呼び出された場合は &lt;code&gt;blocking&lt;/code&gt; 場合IOを非ブロックをオンにします &lt;code&gt;BOOL&lt;/code&gt; が falseの場合、及びそれをオフ &lt;code&gt;BOOL&lt;/code&gt; が真です。</target>
        </trans-unit>
        <trans-unit id="cd8fbca057a7b0f8546bef2e8eba78cd01155b5c" translate="yes" xml:space="preserve">
          <source>If called with an argument the &lt;code&gt;list&lt;/code&gt; returns the size of the message in octets.</source>
          <target state="translated">引数を指定して呼び出された場合、 &lt;code&gt;list&lt;/code&gt; はメッセージのサイズをオクテットで返します。</target>
        </trans-unit>
        <trans-unit id="d3101b42b801bc480044d4583af8814cf3a6fda1" translate="yes" xml:space="preserve">
          <source>If called without arguments a reference to a hash is returned. The keys will be the &lt;code&gt;MSGNUM&lt;/code&gt; 's of all undeleted messages and the values will be their size in octets.</source>
          <target state="translated">引数なしで呼び出された場合、ハッシュへの参照が返されます。キーはすべての削除されていないメッセージの &lt;code&gt;MSGNUM&lt;/code&gt; であり、値はオクテット単位のサイズになります。</target>
        </trans-unit>
        <trans-unit id="9173f9598d9b0aafc765ff35df05afedacca6dc3" translate="yes" xml:space="preserve">
          <source>If called without arguments a reference to a hash is returned. The keys will be the &lt;code&gt;MSGNUM&lt;/code&gt;'s of all undeleted messages and the values will be their size in octets.</source>
          <target state="translated">引数なしで呼び出された場合、ハッシュへの参照が返されます。キーはすべての削除されていないメッセージの &lt;code&gt;MSGNUM&lt;/code&gt; になり、値はオクテット単位のサイズになります。</target>
        </trans-unit>
        <trans-unit id="048702f1da8ec8b9e869f3d2d0c04bad9a57c4d8" translate="yes" xml:space="preserve">
          <source>If can not unlink open file, defer removal until later available since 0.06.</source>
          <target state="translated">開いているファイルのリンクを解除できない場合は、0.06以降で利用できるようになるまで削除を延期してください。</target>
        </trans-unit>
        <trans-unit id="e77963c1065ed922557c941a37ed57186c92ec48" translate="yes" xml:space="preserve">
          <source>If capturing parenthesis are used in a regular expression, we can refer to the part of the source string that was matched, and match exactly the same thing. There are three ways of referring to such</source>
          <target state="translated">正規表現の中でキャプチャカッコが使われている場合、マッチした元の文字列の部分を参照して、全く同じものをマッチさせることができます。このような参照方法には3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="ca37e501b1a5684a1fb419774ed5fda0c1e909b2" translate="yes" xml:space="preserve">
          <source>If compiled with &lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; (&lt;code&gt;-Accflags=-DPERL_MEM_LOG&lt;/code&gt;), both memory and SV allocations go through logging functions, which is handy for breakpoint setting.</source>
          <target state="translated">&lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; （ &lt;code&gt;-Accflags=-DPERL_MEM_LOG&lt;/code&gt; ）を使用してコンパイルした場合、メモリとSVの両方の割り当てはロギング機能を介して行われます。これはブレークポイントの設定に便利です。</target>
        </trans-unit>
        <trans-unit id="8ef19162a844967deef3f5d85d04764641f71041" translate="yes" xml:space="preserve">
          <source>If compiled with &lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; , both memory and SV allocations go through logging functions, which is handy for breakpoint setting.</source>
          <target state="translated">&lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; を指定してコンパイルした場合、メモリとSVの割り当ての両方がログ機能を通過するため、ブレークポイント設定に便利です。</target>
        </trans-unit>
        <trans-unit id="505c257963541e6d1081b0bfdec05dc2d7991e03" translate="yes" xml:space="preserve">
          <source>If constant folding was not performed, the execution-order thread is created.</source>
          <target state="translated">定数折り畳みが行われなかった場合は、実行順序スレッドが作成されます。</target>
        </trans-unit>
        <trans-unit id="9c0592ae26e8bb261300ebbed2b588cacc05e4ff" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable can be used to modify the environment on the target system. However, how and where it's used, and even if it's used at all, is entirely dependent on both the transport mechanism (targetrun) and what the target system is. Unless the relevant documentation says otherwise, it is genereally not useful.</source>
          <target state="translated">クロスコンパイルする場合、この変数はターゲットシステムの環境を変更するために使用できます。しかし、どのように、どこで、どのように使用されるか、また、使用されるとしても、トランスポートメカニズム (targetrun)とターゲットシステムの両方に完全に依存しています。関連するドキュメントに書かれていない限り、本質的には有用ではありません。</target>
        </trans-unit>
        <trans-unit id="c66c617b16e576e77dc9dc8e186d44f33fe447f3" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable contains the location of sh on the target system. If not, this will be the same as $sh.</source>
          <target state="translated">クロスコンパイルする場合、この変数にはターゲットシステム上の sh の場所が含まれます。そうでない場合は、$shと同じになります。</target>
        </trans-unit>
        <trans-unit id="60357fb3a62a70cdf0b8804a617b55fe7b82dc59" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable contains the target architecture. If not, this will be empty.</source>
          <target state="translated">クロスコンパイルの場合、この変数にはターゲットアーキテクチャが含まれます。そうでない場合は空になります。</target>
        </trans-unit>
        <trans-unit id="e5ce981aa84829db1548a6d11516c6b5fa9cbc60" translate="yes" xml:space="preserve">
          <source>If d_procselfexe is defined, $procselfexe is the filename of the symbolic link pointing to the absolute pathname of the executing program.</source>
          <target state="translated">d_procselfexe が定義されている場合、$procselfexe は実行プログラムの絶対パス名を指すシンボリックリンクのファイル名です。</target>
        </trans-unit>
        <trans-unit id="dc4c096ee5da0f37bd52c68590795a5281826f8c" translate="yes" xml:space="preserve">
          <source>If declared at the outermost scope (the file scope), then lexicals work somewhat like C's file statics. They are available to all functions in that same file declared below them, but are inaccessible from outside that file. This strategy is sometimes used in modules to create private variables that the whole module can see.</source>
          <target state="translated">最も外側のスコープ(ファイルスコープ)で宣言された場合、レキシカルはC言語のファイルスタティックと似たような働きをします。これは、その下に宣言された同じファイル内のすべての関数が利用できますが、そのファイルの外部からはアクセスできません。この戦略は、モジュール全体が見ることができるプライベート変数を作成するためにモジュールで使われることがあります。</target>
        </trans-unit>
        <trans-unit id="145d6c1efc9692f7f88fb5f7ebc95c113e29dc12" translate="yes" xml:space="preserve">
          <source>If defined but false, the socket will be set to non-blocking mode. If not specified it defaults to &lt;code&gt;1&lt;/code&gt; (blocking mode).</source>
          <target state="translated">定義されているがfalseの場合、ソケットは非ブロッキングモードに設定されます。指定しない場合、デフォルトで &lt;code&gt;1&lt;/code&gt; （ブロッキングモード）になります。</target>
        </trans-unit>
        <trans-unit id="9038caa549899b94401a0838d72ace7d4bde5fe6" translate="yes" xml:space="preserve">
          <source>If defined but false, the socket will be set to non-blocking mode. Otherwise it will default to blocking mode. See the NON-BLOCKING section below for more detail.</source>
          <target state="translated">定義されているが false の場合、ソケットはノンブロッキングモードに設定される。それ以外の場合はデフォルトでブロッキングモードになります。詳細は NON-BLOCKING セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6ae3059e06d397630c09d4c165cce518cf89f33b" translate="yes" xml:space="preserve">
          <source>If defined specifies whether color output is desired. If &lt;code&gt;color&lt;/code&gt; is not defined it will default to color output if color support is available on the current platform and output is not being redirected.</source>
          <target state="translated">定義されている場合、カラー出力が必要かどうかを指定します。 &lt;code&gt;color&lt;/code&gt; が定義されていない場合、現在のプラットフォームでカラーサポートが利用可能であり、出力がリダイレクトされていない場合は、デフォルトでカラー出力になります。</target>
        </trans-unit>
        <trans-unit id="f94a897ccd9f764c01b106a5cdfcd1ac35d63b36" translate="yes" xml:space="preserve">
          <source>If defined, gives a maximum time in seconds to block per &lt;code&gt;connect()&lt;/code&gt; call when in blocking mode. If missing, no timeout is applied other than that provided by the underlying operating system. When in non-blocking mode this parameter is ignored.</source>
          <target state="translated">定義されている場合、ブロッキングモードのときに &lt;code&gt;connect()&lt;/code&gt; 呼び出しごとにブロックする最大時間を秒単位で指定します。欠落している場合、基盤となるオペレーティングシステムによって提供されるタイムアウト以外のタイムアウトは適用されません。非ブロッキングモードの場合、このパラメーターは無視されます。</target>
        </trans-unit>
        <trans-unit id="2f028cf73562b9d54628306ef212e57f51c8b344" translate="yes" xml:space="preserve">
          <source>If defined, puts the socket into listening mode where new connections can be accepted using the &lt;code&gt;accept&lt;/code&gt; method. The value given is used as the &lt;code&gt;listen(2)&lt;/code&gt; queue size.</source>
          <target state="translated">定義されている場合、ソケットをリスニングモードにし、 &lt;code&gt;accept&lt;/code&gt; メソッドを使用して新しい接続を受け入れることができます。指定された値は、 &lt;code&gt;listen(2)&lt;/code&gt; キューサイズとして使用されます。</target>
        </trans-unit>
        <trans-unit id="e020a19c9382a48776779d2ba22b74e383d938da" translate="yes" xml:space="preserve">
          <source>If defined, set the &lt;code&gt;IPV6_V6ONLY&lt;/code&gt; sockopt when creating &lt;code&gt;PF_INET6&lt;/code&gt; sockets to the given value. If true, a listening-mode socket will only listen on the &lt;code&gt;AF_INET6&lt;/code&gt; addresses; if false it will also accept connections from &lt;code&gt;AF_INET&lt;/code&gt; addresses.</source>
          <target state="translated">定義されている場合、設定 &lt;code&gt;IPV6_V6ONLY&lt;/code&gt; の作成時sockoptを &lt;code&gt;PF_INET6&lt;/code&gt; の所定の値にソケット。trueの場合、リスニングモードソケットは &lt;code&gt;AF_INET6&lt;/code&gt; アドレスでのみリッスンします。falseの場合、 &lt;code&gt;AF_INET&lt;/code&gt; アドレスからの接続も受け入れます。</target>
        </trans-unit>
        <trans-unit id="dc3bd5a9c7fbd30c1f819a008f41219b5c451f73" translate="yes" xml:space="preserve">
          <source>If desired, an optional hash-ref may be specified as the first argument to customize certain aspects of the parse-tree that is created and returned. The set of recognized option keywords are:</source>
          <target state="translated">必要に応じて、オプションの hash-ref を第一引数に指定して、作成されて返されるパースツリーの特定の側面をカスタマイズすることができます。認識できるオプションキーワードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c417457bb41c44d12dd8e05efc098db997c407b3" translate="yes" xml:space="preserve">
          <source>If developing modules for private internal or project specific use, that will never be released to the public, then you should ensure that their names will not clash with any future public module. You can do this either by using the reserved Local::* category or by using a category name that includes an underscore like Foo_Corp::*.</source>
          <target state="translated">プライベートな内部利用やプロジェクト固有の利用のためにモジュールを開発していて、 決して公開されることがない場合は、その名前が将来の公開モジュールと衝突しないようにしなければなりません。これは、予約済みの Local::*カテゴリを使うか、Foo_Corp::*のようにアンダースコアを含むカテゴリ名を使うことで実現できます。</target>
        </trans-unit>
        <trans-unit id="1bf0d1f77248c2c58d4104ac428f32e38cbba679" translate="yes" xml:space="preserve">
          <source>If either (or both!) is a subroutine reference, it is run and used as the value for comparing. For example:</source>
          <target state="translated">どちらか(または両方!)がサブルーチン参照の場合は、それが実行され、比較のための値として使用されます。例えば</target>
        </trans-unit>
        <trans-unit id="28e0eb14814bacb4c751344661d230f561ecbcda" translate="yes" xml:space="preserve">
          <source>If either &lt;code&gt;LocalHost&lt;/code&gt; or &lt;code&gt;PeerHost&lt;/code&gt; (or their &lt;code&gt;...Addr&lt;/code&gt; synonyms) have any of the following special forms then special parsing is applied.</source>
          <target state="translated">いずれかの場合 &lt;code&gt;LocalHost&lt;/code&gt; というか &lt;code&gt;PeerHost&lt;/code&gt; （またはその &lt;code&gt;...Addr&lt;/code&gt; 同義語）は、次の特殊な形式のいずれかを持っている特別な解析が適用されます。</target>
        </trans-unit>
        <trans-unit id="0201c4d3bcdfd14f6a2e27e712be0d303b850c91" translate="yes" xml:space="preserve">
          <source>If either name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the property parameter, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">どちらかの名前が不明の場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。Perlは通常、正規表現のプロパティ名を認識し、オプションの &lt;code&gt;&quot;Is_&lt;/code&gt; &quot;（アンダースコアあり、またはアンダースコアなし）を &lt;code&gt;\p{isgc=punct}&lt;/code&gt; などのように接頭辞として付けます。この関数は、プロパティパラメータ内のものを認識せず、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2293e2a6915536d356b477a7689ee15921487cbe" translate="yes" xml:space="preserve">
          <source>If either name is unknown, &lt;code&gt;undef&lt;/code&gt; is returned. Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt;&quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt;. This function does not recognize those in the property parameter, returning &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">どちらかの名前が不明な場合は、 &lt;code&gt;undef&lt;/code&gt; が返されます。Perlは通常、 &lt;code&gt;\p{isgc=punct}&lt;/code&gt; ように、接頭辞としてオプションの &lt;code&gt;&quot;Is_&lt;/code&gt; 」（アンダースコアの有無にかかわらず）が付いた正規表現のプロパティ名を認識することに注意してください。この関数はpropertyパラメーター内のものを認識せず、 &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3926f5454427802efbe3e6cffcb07732270c9a24" translate="yes" xml:space="preserve">
          <source>If either operand of scalar &lt;code&gt;&quot;..&quot;&lt;/code&gt; is a constant expression, that operand is considered true if it is equal (&lt;code&gt;==&lt;/code&gt; ) to the current input line number (the &lt;code&gt;$.&lt;/code&gt; variable).</source>
          <target state="translated">スカラー &lt;code&gt;&quot;..&quot;&lt;/code&gt; のいずれかのオペランドが定数式である場合、現在の入力行番号（ &lt;code&gt;$.&lt;/code&gt; 変数）と等しい（ &lt;code&gt;==&lt;/code&gt; ）場合、そのオペランドはtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="5ec204ca8034e3ccafb322d0a50a88db1356b7fd" translate="yes" xml:space="preserve">
          <source>If either operand of scalar &lt;code&gt;&quot;..&quot;&lt;/code&gt; is a constant expression, that operand is considered true if it is equal (&lt;code&gt;==&lt;/code&gt;) to the current input line number (the &lt;code&gt;$.&lt;/code&gt; variable).</source>
          <target state="translated">スカラー &lt;code&gt;&quot;..&quot;&lt;/code&gt; いずれかのオペランドが定数式である場合、そのオペランドは、現在の入力行番号（ &lt;code&gt;$.&lt;/code&gt; 変数）と等しい（ &lt;code&gt;==&lt;/code&gt; ）場合に真と見なされます。</target>
        </trans-unit>
        <trans-unit id="f2cb5b8cc9c4debb5e9c1cd9b0aff54bfa3a6950" translate="yes" xml:space="preserve">
          <source>If either reader or writer is the empty string or undefined, this will be replaced by an autogenerated filehandle. If so, you must pass a valid lvalue in the parameter slot so it can be overwritten in the caller, or an exception will be raised.</source>
          <target state="translated">リーダかライタのどちらかが空文字列か未定義の場合、これは自動生成されたファイルハンドルに置き換えられます。その場合、パラメータスロットに有効な lvalue を渡して、呼び出し元で上書きできるようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="f99b132bd00ba92228931c93b4096f125672ade0" translate="yes" xml:space="preserve">
          <source>If either reader or writer is the null string, this will be replaced by an autogenerated filehandle. If so, you must pass a valid lvalue in the parameter slot so it can be overwritten in the caller, or an exception will be raised.</source>
          <target state="translated">readerまたはwriterのどちらかがnull文字列の場合、これは自動生成されたファイルハンドルに置き換えられます。その場合、パラメータスロットに有効な lvalue を渡して、呼び出し元で上書きできるようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c51794930a0cb952da1b5da2c73c8a1455bd1093" translate="yes" xml:space="preserve">
          <source>If embedded documentation (in pod format, see &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;) is detected in the script, &lt;code&gt;--help&lt;/code&gt; will also show how to access the documentation.</source>
          <target state="translated">埋め込みドキュメント（ポッド形式、&lt;a href=&quot;../perlpod&quot;&gt;perlpodを&lt;/a&gt;参照）がスクリプトで検出された場合、 &lt;code&gt;--help&lt;/code&gt; はドキュメントへのアクセス方法も表示します。</target>
        </trans-unit>
        <trans-unit id="497536c61f20254b3ce1e548c2f1737e3ae2f43e" translate="yes" xml:space="preserve">
          <source>If embedded documentation (in pod format, see &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;) is detected in the script, &lt;code&gt;--help&lt;/code&gt; will also show how to access the documentation.</source>
          <target state="translated">埋め込まれたドキュメント（ポッド形式、&lt;a href=&quot;perlpod&quot;&gt;perlpodを&lt;/a&gt;参照）がスクリプトで検出された場合、 &lt;code&gt;--help&lt;/code&gt; はドキュメントへのアクセス方法も示します。</target>
        </trans-unit>
        <trans-unit id="69dc58793e20f2f8fe02b29cbd122e892cc2714a" translate="yes" xml:space="preserve">
          <source>If empty is false, mark gv with GVf_INTRO so the next reference assigned is localized, which is how &lt;code&gt; local *foo = $someref; &lt;/code&gt; works.</source>
          <target state="translated">emptyがfalseの場合、gvをGVf_INTROでマークして、割り当てられた次の参照がローカライズされるようにします。これは、 &lt;code&gt; local *foo = $someref; &lt;/code&gt; 動作します。</target>
        </trans-unit>
        <trans-unit id="d0235b3841ba3dad5d7f48423a5cbad1433ac050" translate="yes" xml:space="preserve">
          <source>If empty is true, replace the GP with a new GP.</source>
          <target state="translated">empty が真の場合、GP を新しい GP に置き換えます。</target>
        </trans-unit>
        <trans-unit id="29d066b26000935ae7bb2e10a40ebaebacd4b8b0" translate="yes" xml:space="preserve">
          <source>If enabled, case is ignored when matching option names. If, however, bundling is enabled as well, single character options will be treated case-sensitive.</source>
          <target state="translated">有効にする と 、 オプシ ョ ン名を一致 さ せ る 際に大文字 ・ 小文字は無視 さ れます。し か し 、 バ ン ド リ ン グ も 有効に し てい る と き は、 1 文字のオプシ ョ ンは大文字 ・ 小文字を区別 し て扱われます。</target>
        </trans-unit>
        <trans-unit id="db7040756e9968d1786c608e978b27880a9b3f0b" translate="yes" xml:space="preserve">
          <source>If everything else fails, you need to build a stand-alone DLL for perl. Contact me, I did it once. Sockets would not work, as a lot of other stuff.</source>
          <target state="translated">他のすべてが失敗した場合は、Perl用のスタンドアロンDLLを構築する必要があります。私に連絡してください、私は一度それをやったことがあります。ソケットは他の多くのものと同様に動作しませんでした。</target>
        </trans-unit>
        <trans-unit id="86e67737b28b03a977f15c49feac3a8313e09ab0" translate="yes" xml:space="preserve">
          <source>If exception handling is all you're interested in, use one of the many CPAN modules that handle exceptions, such as &lt;a href=&quot;Try::Tiny&quot;&gt;Try::Tiny&lt;/a&gt;.</source>
          <target state="translated">例外処理だけに関心がある場合は、&lt;a href=&quot;Try::Tiny&quot;&gt;Try :: Tiny&lt;/a&gt;など、例外を処理する多くのCPANモジュールの1つを使用してください。</target>
        </trans-unit>
        <trans-unit id="3a7b09ae5de32a801bf3504292c1ba7f8a26bf8f" translate="yes" xml:space="preserve">
          <source>If exception handling is all you're interested in, use one of the many CPAN modules that handle exceptions, such as &lt;a href=&quot;http://search.cpan.org/perldoc/Try::Tiny&quot;&gt;Try::Tiny&lt;/a&gt;.</source>
          <target state="translated">例外処理だけに関心がある場合は、&lt;a href=&quot;http://search.cpan.org/perldoc/Try::Tiny&quot;&gt;Try :: Tiny&lt;/a&gt;など、例外を処理する多くのCPANモジュールの1つを使用してください。</target>
        </trans-unit>
        <trans-unit id="24299a423807f4b77a396032f4cc65f70fe49537" translate="yes" xml:space="preserve">
          <source>If explicitly enabled by</source>
          <target state="translated">によって明示的に有効にされている場合</target>
        </trans-unit>
        <trans-unit id="8ede30fd7e2f6fae82106f61a77ef1de04cb5cb3" translate="yes" xml:space="preserve">
          <source>If false, STDERR is not captured (though it is 'relayed' to keep it somewhat synchronized with STDOUT.)</source>
          <target state="translated">false の場合、STDERR は捕捉されない(ただし、STDOUT との同期を保つために中継される)。</target>
        </trans-unit>
        <trans-unit id="9b5838f52003c96db3e6bffb7f5e0838c7d79e5c" translate="yes" xml:space="preserve">
          <source>If false, readline support in the debugger is disabled in order to debug applications that themselves use ReadLine.</source>
          <target state="translated">false の場合、ReadLine を使用するアプリケーションをデバッグするために、デバッガでの Readline サポートが無効になります。</target>
        </trans-unit>
        <trans-unit id="b1fe899108d979b4e6baf329c011d799eeebe85b" translate="yes" xml:space="preserve">
          <source>If filenames might use strange characters, it is safest to open it with &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is magic and can translate characters like &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; , and &lt;code&gt;|&lt;/code&gt;, which may be the wrong thing to do. (Sometimes, though, it's the right thing.) Three-arg open can also help protect against this translation in cases where it is undesirable.</source>
          <target state="translated">ファイル名は奇妙な文字を使用する可能性がある場合、それはでそれを開くために最も安全である &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; ではなく、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; は魔法であり、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; などの文字を変換できます。、これは間違ったやり方であるかもしれません。（ただし、それが正しい場合もあります。）3引数のopenは、望ましくない場合にこの変換から保護するのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="6f78c1ed61e34e06bf280f0bbcc412ab7e6a2d2f" translate="yes" xml:space="preserve">
          <source>If find is used in &lt;a href=&quot;perlsec#Taint-mode&quot;&gt;taint-mode&lt;/a&gt; (-T command line switch or if EUID != UID or if EGID != GID), then internally directory names have to be untainted before they can be &lt;code&gt;chdir&lt;/code&gt;'d to. Therefore they are checked against a regular expression</source>
          <target state="translated">検索がで使用されている場合は&lt;a href=&quot;perlsec#Taint-mode&quot;&gt;汚染モード&lt;/a&gt;（-Tコマンドラインスイッチまたは場合EUID！= UIDまたはEGID！= GID場合）、内部ディレクトリ名は、彼らがすることができ前に汚染されていないことを持っている &lt;code&gt;chdir&lt;/code&gt; D」に。したがって、正規表現に対してチェックされます</target>
        </trans-unit>
        <trans-unit id="5ca04d4d675b32f985d24c749a113dd2e8503548" translate="yes" xml:space="preserve">
          <source>If find is used in taint-mode (-T command line switch or if EUID != UID or if EGID != GID) then internally directory names have to be untainted before they can be chdir'ed to. Therefore they are checked against a regular expression</source>
          <target state="translated">もし find が taint-mode (-T コマンドラインスイッチ、または EUID !=UID または EGID !=GID の場合)で使用された場合、内部的にディレクトリ名が汚染されていないと chdir されません。そのため、正規表現</target>
        </trans-unit>
        <trans-unit id="ea1ec16d1d9147a52b3c1c50c90741c5c208db46" translate="yes" xml:space="preserve">
          <source>If flags contains &lt;code&gt;PERL_PV_ESCAPE_QUOTE&lt;/code&gt; then any double quotes in the string will also be escaped.</source>
          <target state="translated">フラグに &lt;code&gt;PERL_PV_ESCAPE_QUOTE&lt;/code&gt; が含まれている場合、文字列内の二重引用符もエスケープされます。</target>
        </trans-unit>
        <trans-unit id="ae542d10e971a673bbde2971d115357debc351d4" translate="yes" xml:space="preserve">
          <source>If flags contains PERL_PV_ESCAPE_QUOTE then any double quotes in the string will also be escaped.</source>
          <target state="translated">flags に PERL_PV_ESCAPE_QUOTE が含まれている場合は、文字列内の二重引用符もエスケープされます。</target>
        </trans-unit>
        <trans-unit id="5f11c4bbd633be0ac4ec3da7d6d4106626b272c7" translate="yes" xml:space="preserve">
          <source>If for some reason you want to have complete control over the data connection, this includes generating it and calling the &lt;code&gt;response&lt;/code&gt; method when required, then the user can use these methods to do so.</source>
          <target state="translated">何らかの理由でデータ接続を完全に制御したい場合、これには、データ接続の生成と、必要な場合の &lt;code&gt;response&lt;/code&gt; メソッドの呼び出しが含まれます。ユーザーは、これらのメソッドを使用してそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="527032a383661eed954e5386c22fa00fa6ffa0b3" translate="yes" xml:space="preserve">
          <source>If generating a manual page from standard input, the name will be set to &lt;code&gt;STDIN&lt;/code&gt; if this option is not provided. Providing this option is strongly recommended to set a meaningful manual page name.</source>
          <target state="translated">標準入力からマニュアルページを生成する &lt;code&gt;STDIN&lt;/code&gt; 、このオプションが指定されていないと、名前はSTDINに設定されます。意味のあるマニュアルページ名を設定するには、このオプションを指定することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="33f20d3ebb86a1fb4909973670b43aa80acbb4c8" translate="yes" xml:space="preserve">
          <source>If hash values couldn't be lists, you lose. You'd probably have to combine all the cities into a single string somehow, and then when time came to write the output, you'd have to break the string into a list, sort the list, and turn it back into a string. This is messy and error-prone. And it's frustrating, because Perl already has perfectly good lists that would solve the problem if only you could use them.</source>
          <target state="translated">ハッシュ値をリストにできないとしたら、あなたの負けです。おそらく、すべての都市をどうにかして一つの文字列にまとめる必要があるでしょうし、出力を書くときには、文字列をリストに分割し、リストをソートし、文字列に戻す必要があります。これは面倒でエラーが発生しやすいです。そして、Perlにはすでに完璧なリストがあり、それを使うことさえできれば問題を解決することができるのですから、これはイライラします。</target>
        </trans-unit>
        <trans-unit id="774c1ecd49cf47f66e5a805e842abcc07904cbac" translate="yes" xml:space="preserve">
          <source>If hints are not available for the specified subroutines, this will cause a compile-time error. Insisting on hints for Perl's built-in functions (eg, &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;) is always successful.</source>
          <target state="translated">指定されたサブルーチンのヒントが利用できない場合、コンパイル時エラーが発生します。Perlの組み込み関数（たとえば、 &lt;code&gt;open&lt;/code&gt; と &lt;code&gt;close&lt;/code&gt; ）のヒントを主張することは常に成功します。</target>
        </trans-unit>
        <trans-unit id="7e8d248524799b9e3f004b01925fdada9567cc4f" translate="yes" xml:space="preserve">
          <source>If i&amp;lt;checked_at&amp;gt; is a reference to a scalar, then instead it gives the characters pre-checked at the beginning, (and the number of chars by which the C variable name has been advanced. These need to be chopped from the front of</source>
          <target state="translated">i &amp;lt;checked_at&amp;gt;がスカラーへの参照である場合、代わりに、最初に事前にチェックされた文字（およびC変数名が拡張された文字数）が与えられます。これらは、先頭から切り取る必要があります</target>
        </trans-unit>
        <trans-unit id="0cd56861a4473054d59049046296e1c9cc1b21dc" translate="yes" xml:space="preserve">
          <source>If illegalproto warnings are enabled, the prototype declared inside this attribute will be sanity checked at compile time.</source>
          <target state="translated">illegalproto の警告が有効になっている場合、この属性内で宣言されたプロトタイプはコンパイル時にサニティチェックされます。</target>
        </trans-unit>
        <trans-unit id="4d3aefb53a3e40d895443465bbfd3168415b47af" translate="yes" xml:space="preserve">
          <source>If in doubt, break the expression into simpler terms, or cast all operands to the desired resulting type.</source>
          <target state="translated">疑問がある場合は、式をより簡単な用語に分割するか、すべてのオペランドを目的の結果として得られる型にキャストします。</target>
        </trans-unit>
        <trans-unit id="ce224243c2c27e9c319eeded5da4d7520f7a48e0" translate="yes" xml:space="preserve">
          <source>If instead of the recommended GNU make you would like to use the system supplied make program then be sure to install the default rules file properly via the shell command:</source>
          <target state="translated">推奨される GNU make の代わりに、システムが提供する make プログラムを使いたい場合は、シェルコマンドを使ってデフォルトのルールファイルを適切にインストールするようにしてください。</target>
        </trans-unit>
        <trans-unit id="8c224a826076db854fafc0daefe6f5025badc4ce" translate="yes" xml:space="preserve">
          <source>If instead you intended to match the word 'foo' at the end of the line followed by whitespace and the word 'bar' on the next line then you can use &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/$(?)\/&lt;/a&gt;&lt;/code&gt; (for example: &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo$(?)\s+bar/&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">代わりに、行の終わりにある「foo」という単語の後に空白文字が続き、次の行に「bar」という単語が一致する場合は、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/$(?)\/&lt;/a&gt;&lt;/code&gt; 使用できます（例： &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo$(?)\s+bar/&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="835a22059d43bc5ff6100b52d4ba22bb32621c13" translate="yes" xml:space="preserve">
          <source>If instead you intended to match the word 'foo' at the end of the line followed by whitespace and the word 'bar' on the next line then you can use &lt;code&gt;m/$(?)\/&lt;/code&gt; (for example: &lt;code&gt;m/foo$(?)\s+bar/&lt;/code&gt;).</source>
          <target state="translated">代わりに、行の終わりにある単語「foo」とそれに続く空白と次の行にある単語「bar」を一致させる場合は、 &lt;code&gt;m/$(?)\/&lt;/code&gt; 使用できます（例： &lt;code&gt;m/foo$(?)\s+bar/&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d629d0bcda097aa38909a34c55f2d4899baf7fd4" translate="yes" xml:space="preserve">
          <source>If instead you want to sort the array &lt;code&gt;@key&lt;/code&gt; with the comparison routine &lt;code&gt;find_records()&lt;/code&gt; then you can use:</source>
          <target state="translated">代わりに、比較ルーチン &lt;code&gt;find_records()&lt;/code&gt; を使用して配列 &lt;code&gt;@key&lt;/code&gt; を並べ替える場合は、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="d03def7cbe4cc9c7f39111662b050f07a1bc1197" translate="yes" xml:space="preserve">
          <source>If instead you want to sort the array @key with the comparison routine &lt;code&gt;find_records()&lt;/code&gt; then you can use:</source>
          <target state="translated">代わりに、配列@keyを比較ルーチン &lt;code&gt;find_records()&lt;/code&gt; でソートする場合は、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="d1fc62400435ca2b18e437e1de72ea45d0c40705" translate="yes" xml:space="preserve">
          <source>If invalid, a &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; warning is produced. The &quot;C0&quot; means &quot;process the string character per character&quot;. Without that, the &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;U*&quot;, ...)&lt;/code&gt; would work in &lt;code&gt;U0&lt;/code&gt; mode (the default if the format string starts with &lt;code&gt;U&lt;/code&gt; ) and it would return the bytes making up the UTF-8 encoding of the target string, something that will always work.</source>
          <target state="translated">無効な場合、 &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; 警告が生成されます。「C0」は「文字ごとに文字列を処理する」ことを意味します。それがなければ、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;U*&quot;, ...)&lt;/code&gt; は &lt;code&gt;U0&lt;/code&gt; モード（フォーマット文字列が &lt;code&gt;U&lt;/code&gt; で始まる場合のデフォルト）で機能し、ターゲット文字列のUTF-8エンコーディングを構成するバイトを返します。それは常に動作します。</target>
        </trans-unit>
        <trans-unit id="7e4f3a7639737362f11e314ec120738bd4bec5b1" translate="yes" xml:space="preserve">
          <source>If invalid, a &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; warning is produced. The &quot;C0&quot; means &quot;process the string character per character&quot;. Without that, the &lt;code&gt;unpack(&quot;U*&quot;, ...)&lt;/code&gt; would work in &lt;code&gt;U0&lt;/code&gt; mode (the default if the format string starts with &lt;code&gt;U&lt;/code&gt;) and it would return the bytes making up the UTF-8 encoding of the target string, something that will always work.</source>
          <target state="translated">無効な場合、 &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; 警告が生成されます。「C0」は「文字ごとに文字列文字を処理する」ことを意味します。それがないと、 &lt;code&gt;unpack(&quot;U*&quot;, ...)&lt;/code&gt; は &lt;code&gt;U0&lt;/code&gt; モード（フォーマット文字列が &lt;code&gt;U&lt;/code&gt; で始まる場合のデフォルト）で機能し、ターゲット文字列のUTF-8エンコーディングを構成するバイトを返します。それは常に機能します。</target>
        </trans-unit>
        <trans-unit id="51c33e52f177d40ae2c3679305c70e4a9572745e" translate="yes" xml:space="preserve">
          <source>If it ain't broke, don't fix it! Perl 4 library scripts should continue to work with no problems. You may need to make some minor changes (like escaping non-array @'s in double quoted strings) but there is no need to convert a .pl file into a Module for just that.</source>
          <target state="translated">壊れていなければ直さないでください! Perl 4 のライブラリスクリプトは問題なく動作するはずです。いくつかの小さな変更を加える必要があるかもしれませんが (ダブルクォートされた文字列の配列以外の @ のエスケープなど)、そのために .pl ファイルをモジュールに変換する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5ae3aaa5715ffc32724b48d8610f7a354399dcc4" translate="yes" xml:space="preserve">
          <source>If it does not yet provide support for any encoding, one could write a derived class with such a &lt;code&gt;param&lt;/code&gt; method:</source>
          <target state="translated">エンコーディングのサポートがまだ提供されていない場合は、そのような &lt;code&gt;param&lt;/code&gt; メソッドを使用して派生クラスを作成できます。</target>
        </trans-unit>
        <trans-unit id="9548720aabed2519dabd7936701802a11d8a7465" translate="yes" xml:space="preserve">
          <source>If it exists, this field must contains a</source>
          <target state="translated">存在する場合、このフィールドには</target>
        </trans-unit>
        <trans-unit id="6ed0026aa4685c99082bcd85012c95fb26671228" translate="yes" xml:space="preserve">
          <source>If it is defined and perl is compiled with the C macro &lt;code&gt;DL_UNLOAD_ALL_AT_EXIT&lt;/code&gt; defined, then it is called automatically when the interpreter exits for every shared object or library loaded by DynaLoader::bootstrap. All such library references are stored in @dl_librefs by DynaLoader::Bootstrap as it loads the libraries. The files are unloaded in last-in, first-out order.</source>
          <target state="translated">それが定義されていて、perlがCマクロ &lt;code&gt;DL_UNLOAD_ALL_AT_EXIT&lt;/code&gt; を定義してコンパイルされている場合、DynaLoader :: bootstrapによってロードされたすべての共有オブジェクトまたはライブラリに対してインタープリターが終了すると、自動的に呼び出されます。そのようなライブラリ参照はすべて、ライブラリをロードするときにDynaLoader :: Bootstrapによって@dl_librefsに保存されます。ファイルは後入れ先出しの順序でアンロードされます。</target>
        </trans-unit>
        <trans-unit id="5b2268451c0f057ce91551f0143bc7efcca84a61" translate="yes" xml:space="preserve">
          <source>If it is determined to be case insensitive, during survey() it may skip pod files/modules that happen to be equal to names it's already seen, ignoring case.</source>
          <target state="translated">大文字小文字を区別しないと判断された場合、 survey()の間に、既に見た名前と同じ名前のポッドファイル/モジュールをスキップして、大文字小文字を無視することがあります。</target>
        </trans-unit>
        <trans-unit id="96d25babefad3e04149e431c9fc9b4ab7fa3f715" translate="yes" xml:space="preserve">
          <source>If it is important to you that your bug be fixed, do monitor the issue tracker (you will be subscribed to notifications for issues you submit or comment on) and the commit logs to development versions of Perl, and encourage the maintainers with kind words or offers of frosty beverages. (Please do be kind to the maintainers. Harassing or flaming them is likely to have the opposite effect of the one you want.)</source>
          <target state="translated">もし、あなたのバグを修正することが重要ならば、イシュートラッカー (あなたが投稿したりコメントしたりした問題の通知を受け取ることができます)や Perl の開発版のコミットログを監視して、メンテナに優しい言葉をかけたり、冷たい飲み物を提供したりして、メンテナを励ましてください。(メンテナには親切にしてください。メンテナへの嫌がらせや誹謗中傷は、あなたが望む効果とは逆の効果をもたらす可能性があります)。</target>
        </trans-unit>
        <trans-unit id="860a9992a29a5bed07a92916afafcc39c4466897" translate="yes" xml:space="preserve">
          <source>If it is important to you that your bug be fixed, do monitor the perl5-porters@perl.org mailing list (mailing lists are moderated, your message may take a while to show up) and the commit logs to development versions of Perl, and encourage the maintainers with kind words or offers of frosty beverages. (Please do be kind to the maintainers. Harassing or flaming them is likely to have the opposite effect of the one you want.)</source>
          <target state="translated">もしあなたのバグを修正することが重要ならば、 perl5-porters@perl.org メーリングリスト (メーリングリストは管理されているので、あなたのメッセージが表示されるまでに時間がかかるかもしれません)や Perl の開発版のコミットログを監視して、メンテナに優しい言葉をかけたり、 凍えるような飲み物を提供したりして、メンテナを励ましてあげてください。(メンテナには親切にしてください。メンテナへの嫌がらせや誹謗中傷は、あなたの望む効果とは逆の効果をもたらす可能性があります)。</target>
        </trans-unit>
        <trans-unit id="835fcc1c62a963fd6a71d84d2861d08fa2d6dba4" translate="yes" xml:space="preserve">
          <source>If it is impossible to tell from the parameters passed back from the C callback what the context is, then you may need to create a sequence of C callback interface functions, and store pointers to each in an array.</source>
          <target state="translated">C コールバックから返されたパラメータからコンテキストが何なのかがわからない場合は、C コールバックのインターフェイス関数のシーケンスを作成し、それぞれのポインタを配列に格納する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5680f195fb6f8f7119b1a5d53970a5a24089ffc3" translate="yes" xml:space="preserve">
          <source>If it is intended that a new perl binary be produced, this variable may hold a name for that binary. Defaults to perl</source>
          <target state="translated">新しいPerlバイナリが生成されることが意図されている場合、この変数はそのバイナリの名前を保持することができます。デフォルトは perl</target>
        </trans-unit>
        <trans-unit id="3922ec0b4a5411b9d0c3915227bde5d37e804a93" translate="yes" xml:space="preserve">
          <source>If it persists, you may disable this warnings, see &lt;a href=&quot;#PERL_BADFREE&quot;&gt;&quot;&lt;code&gt;PERL_BADFREE&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">それが続く場合は、この警告を無効にすることができます。&lt;a href=&quot;#PERL_BADFREE&quot;&gt;「 &lt;code&gt;PERL_BADFREE&lt;/code&gt; 」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cb1ca7ba722f679f82900212b2623b7a140c3fd8" translate="yes" xml:space="preserve">
          <source>If it persists, you may disable this warnings, see &lt;a href=&quot;#PERL_BADFREE&quot;&gt;PERL_BADFREE&lt;/a&gt;.</source>
          <target state="translated">それが続く場合は、この警告を無効にすることができます&lt;a href=&quot;#PERL_BADFREE&quot;&gt;。PERL_BADFREEを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3596d2c66fdea5d09f2cf7238ff867c93df8d69a" translate="yes" xml:space="preserve">
          <source>If it runs thru the entire given list of language-tags, and finds no classes for those exact terms, it then tries &quot;superordinate&quot; language classes. So if no &quot;en-US&quot; class (i.e., YourProjClass::en_us) was found, nor classes for anything else in that list, we then try its superordinate, &quot;en&quot; (i.e., YourProjClass::en), and so on thru the other language-tags in the given list: &quot;es&quot;. (The other language-tags in our example list: happen to have no superordinates.)</source>
          <target state="translated">与えられた言語タグのリスト全体を実行して、それらの用語のクラスが見つからなかった場合、それは &quot;上位の &quot;言語クラスを試します。ですから、&quot;en-US &quot;クラス(すなわち、YourProjClass::en_us)が見つからなかった場合、また、そのリストの中に他の何かのためのクラスが見つからなかった場合、その上位の &quot;en&quot; (すなわち、YourProjClass::en)を試し、与えられたリストの中の他の言語タグを通して、そのようにします。&quot;es&quot; となります。(この例のリストにある他の言語タグは、たまたま上位子を持っていません。)</target>
        </trans-unit>
        <trans-unit id="956013cc75574f32898bd3291e14ae9c281c9d63" translate="yes" xml:space="preserve">
          <source>If it's a regular enough string that it always has the same format, you can split it up and pass the parts to &lt;code&gt;timelocal&lt;/code&gt; in the standard &lt;a href=&quot;Time::Local&quot;&gt;Time::Local&lt;/a&gt; module. Otherwise, you should look into the &lt;a href=&quot;Date::Calc&quot;&gt;Date::Calc&lt;/a&gt;, &lt;a href=&quot;Date::Parse&quot;&gt;Date::Parse&lt;/a&gt;, and &lt;a href=&quot;Date::Manip&quot;&gt;Date::Manip&lt;/a&gt; modules from CPAN.</source>
          <target state="translated">それが常に同じ形式を持つのに十分な規則的な文字列である場合は、それを分割して、標準の&lt;a href=&quot;Time::Local&quot;&gt;Time :: Local&lt;/a&gt;モジュールで &lt;code&gt;timelocal&lt;/code&gt; にパーツを渡すことができます。それ以外の場合は、CPANの&lt;a href=&quot;Date::Calc&quot;&gt;Date :: Calc&lt;/a&gt;、&lt;a href=&quot;Date::Parse&quot;&gt;Date :: Parse&lt;/a&gt;、および&lt;a href=&quot;Date::Manip&quot;&gt;Date :: Manip&lt;/a&gt;モジュールを調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="9e9c27ad93f7400ed6fd8cabde972a2941b1fcc1" translate="yes" xml:space="preserve">
          <source>If it's a regular enough string that it always has the same format, you can split it up and pass the parts to &lt;code&gt;timelocal&lt;/code&gt; in the standard &lt;a href=&quot;time/local&quot;&gt;Time::Local&lt;/a&gt; module. Otherwise, you should look into the &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date::Calc&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Parse&quot;&gt;Date::Parse&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Manip&quot;&gt;Date::Manip&lt;/a&gt; modules from CPAN.</source>
          <target state="translated">それが常に同じフォーマットであるほど十分に規則的な文字列である場合、それを分割し、標準の&lt;a href=&quot;time/local&quot;&gt;Time :: Local&lt;/a&gt;モジュールでその部分を &lt;code&gt;timelocal&lt;/code&gt; に渡すことができます。それ以外の場合は、CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date :: Calc&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Date::Parse&quot;&gt;Date :: Parse&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Date::Manip&quot;&gt;Date :: Manip&lt;/a&gt;モジュールを調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="95cd7c9791eb757b708be268b21d99a1603edf51" translate="yes" xml:space="preserve">
          <source>If it's run from a terminal,</source>
          <target state="translated">ターミナルから実行されている場合</target>
        </trans-unit>
        <trans-unit id="6e686f47ff84852246c986f46416264b0b26f101" translate="yes" xml:space="preserve">
          <source>If just a raw diff is provided, it is also possible use this two-step process:</source>
          <target state="translated">生の差分だけを提供している場合は、この2段階の処理を利用することも可能です。</target>
        </trans-unit>
        <trans-unit id="86e1fe8c1c0f93c5cc464283fb0d88ef22d53da9" translate="yes" xml:space="preserve">
          <source>If layers are not explicitly specified, the handle will be opened with the layers specified by the &lt;a href=&quot;perlvar#%24%7B%5EOPEN%7D&quot;&gt;${^OPEN}&lt;/a&gt; variable (usually set by using the &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; pragma for a lexical scope, or the &lt;code&gt;-C&lt;/code&gt; command-line switch or &lt;code&gt;PERL_UNICODE&lt;/code&gt; environment variable for the main program scope).</source>
          <target state="translated">レイヤーが明示的に指定されていない場合、ハンドルは&lt;a href=&quot;perlvar#%24%7B%5EOPEN%7D&quot;&gt;$ {^ OPEN}&lt;/a&gt;変数（通常、レキシカルスコープの&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;プラグマ、または &lt;code&gt;-C&lt;/code&gt; コマンドラインスイッチまたは &lt;code&gt;PERL_UNICODE&lt;/code&gt; 環境変数を使用して設定されます）で指定されたレイヤーで開かれます。メインプログラムスコープ）。</target>
        </trans-unit>
        <trans-unit id="e46426c1bbbb04008f9627a6d4ae412c2a64f7b8" translate="yes" xml:space="preserve">
          <source>If layers are not specified in the open() call or &lt;code&gt;${^OPEN}&lt;/code&gt; variable, the handle will be opened with the default layer stack configured for that architecture; see &lt;a href=&quot;#Defaults-and-how-to-override-them&quot;&gt;&quot;Defaults and how to override them&quot;&lt;/a&gt;.</source>
          <target state="translated">open（）呼び出しまたは &lt;code&gt;${^OPEN}&lt;/code&gt; 変数でレイヤーが指定されていない場合、ハンドルは、そのアーキテクチャー用に構成されたデフォルトのレイヤースタックで開かれます。&lt;a href=&quot;#Defaults-and-how-to-override-them&quot;&gt;「デフォルトとそれらをオーバーライドする方法」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8ec1e5cfa3f1d5f23853bddc58974b89d51e4343" translate="yes" xml:space="preserve">
          <source>If linking miniperl</source>
          <target state="translated">ミニパールをリンクする場合</target>
        </trans-unit>
        <trans-unit id="6f1ded59583efe50b40fd8b1ab3b5be326101642" translate="yes" xml:space="preserve">
          <source>If locale matching rules are in effect, the case map is taken from the current locale for code points less than 255, and from Unicode rules for larger code points. However, matches that would cross the Unicode rules/non-Unicode rules boundary (ords 255/256) will not succeed, unless the locale is a UTF-8 one. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">ロケール一致ルールが有効な場合、ケースマップは、255未満のコードポイントの場合は現在のロケールから、それより大きいコードポイントの場合はUnicodeルールから取得されます。ただし、ロケールがUTF-8でない限り、Unicodeルール/非Unicodeルールの境界（ords 255/256）を超える一致は成功しません。&lt;a href=&quot;perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4bdbff6d4225cd79b23186ed9cad6253292a76ca" translate="yes" xml:space="preserve">
          <source>If locale matching rules are in effect, the case map is taken from the current locale for code points less than 255, and from Unicode rules for larger code points. However, matches that would cross the Unicode rules/non-Unicode rules boundary (ords 255/256) will not succeed. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">ロケールマッチングルールが有効な場合、ケースマップは、255未満のコードポイントの場合は現在のロケールから、より大きなコードポイントの場合はUnicodeルールから取得されます。ただし、Unicodeルール/非Unicodeルールの境界（ords 255/256）を超える一致は成功しません。&lt;a href=&quot;perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="763f933c48615038adc7019dfce8f6c0c593c306" translate="yes" xml:space="preserve">
          <source>If locale rules are not in effect, the use of a Unicode property will force the regular expression into using Unicode rules, if it isn't already.</source>
          <target state="translated">ロケールルールが有効でない場合は、Unicodeプロパティを使用すると、 正規表現は強制的にUnicodeルールを使用するようになります。</target>
        </trans-unit>
        <trans-unit id="d834fc3f63056ccac9737e1620e9488be6eb7541" translate="yes" xml:space="preserve">
          <source>If maketext goes to look in an individual %Lexicon for an entry for</source>
          <target state="translated">maketext が個々の %Lexicon のエントリを探しに行った場合</target>
        </trans-unit>
        <trans-unit id="3e3dcee3a8b9bd973fa29d705bfdb80867c80c81" translate="yes" xml:space="preserve">
          <source>If many functions use the same failure indication based on the return value, you may want to create a special typedef to handle this situation. Put</source>
          <target state="translated">多くの関数が戻り値に基づいて同じ失敗表示を使用している場合、この状況を処理するために特別なtypedefを作成したい場合があります。置くことができます。</target>
        </trans-unit>
        <trans-unit id="b606db88e20200612d730cc961241a27da21957f" translate="yes" xml:space="preserve">
          <source>If module is installed, peeks into the module's manpage, reads the headline, and returns it. Moreover, if the module has been downloaded within this session, does the equivalent on the downloaded module even if it hasn't been installed yet.</source>
          <target state="translated">モジュールがインストールされていれば、モジュールのマンページを覗き、見出しを読み込んで返します。また、このセッション内でモジュールがダウンロードされていれば、まだインストールされていなくても、ダウンロードされたモジュールに対して同等の処理を行います。</target>
        </trans-unit>
        <trans-unit id="dd58d8ff347dcd8c05f67e1fd3ee4d2440157ff1" translate="yes" xml:space="preserve">
          <source>If more arguments are provided then they are all appended to the message, thus all these lines will have the same effect on the state of the $ctx object:</source>
          <target state="translated">より多くの引数が与えられた場合は、それらはすべてメッセージに追加されます。</target>
        </trans-unit>
        <trans-unit id="d7d32d6074826a3d2d75814ea308b5ddeaca2f3c" translate="yes" xml:space="preserve">
          <source>If more delimiters than escape chars are specified, the last escape char is used for the remaining delimiters. If no escape char is specified for a given specified delimiter, '\' is used.</source>
          <target state="translated">エスケープ文字よりも多くのデリミタが指定された場合、最後のエスケープ文字が残りのデリミタに使用される。指定されたデリミタにエスケープ文字が指定されない場合は、'\' が使用される。</target>
        </trans-unit>
        <trans-unit id="285c13c421c908ec1b5157ff1d11ce664fe6f585" translate="yes" xml:space="preserve">
          <source>If more than one argument is given then the entire argument list is assumed to be a hash. If a hash is supplied (either as a reference or as a list) it should contain one or more elements with the following keys:</source>
          <target state="translated">複数の引数が与えられた場合、引数リスト全体がハッシュであるとみなされます。ハッシュが(参照またはリストとして)与えられた場合、以下のキーを持つ1つ以上の要素を含む必要があります。</target>
        </trans-unit>
        <trans-unit id="39e41b545db315dc5126671cc2bd5d88f5c30e3d" translate="yes" xml:space="preserve">
          <source>If more than one restriction of &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;distribution&lt;/code&gt; , etc. is specified, the results of the separately computed match values must all match. If so, the hashref represented by the YAML document is returned as the preference structure for the current distribution.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;distribution&lt;/code&gt; などの制限が複数指定されている場合、個別に計算された一致値の結果はすべて一致する必要があります。その場合、YAMLドキュメントによって表されるhashrefは、現在のディストリビューションの設定構造として返されます。</target>
        </trans-unit>
        <trans-unit id="da05e2a6f3037e503e2698db0f33736532af13ae" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="translated">複数の変数がリストアップされている場合は、リストを括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="463724a0fef86ec9bcf7097a4a23f19c350c87fd" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; can be used as a dummy placeholder. However, since initialization of state variables in such lists is currently not possible this would serve no purpose.</source>
          <target state="translated">複数の変数がリストされている場合は、リストを括弧で囲む必要があります。括弧で囲まれたリストを使用すると、&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;をダミーのプレースホルダーとして使用できます。ただし、このようなリストの状態変数の初期化は現在不可能であるため、これは目的を果たしません。</target>
        </trans-unit>
        <trans-unit id="5915108dabbdb47d0e6487842fce0264a4b8c92e" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; can be used as a dummy placeholder. However, since initialization of state variables in list context is currently not possible this would serve no purpose.</source>
          <target state="translated">複数の変数がリストされている場合は、リストを括弧で囲む必要があります。括弧で囲まれたリストでは、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をダミーのプレースホルダーとして使用できます。ただし、リストコンテキストでの状態変数の初期化は現在不可能であるため、これは目的を果たしません。</target>
        </trans-unit>
        <trans-unit id="13f0dd65ec56750a188884a636ba7b4f0428367d" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; can be used as a dummy placeholder. However, since initialization of state variables in list context is currently not possible this would serve no purpose.</source>
          <target state="translated">複数の変数がリストされている場合は、リストを括弧で囲む必要があります。括弧で囲まれたリストでは、 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をダミーのプレースホルダーとして使用できます。ただし、リストコンテキストでの状態変数の初期化は現在不可能であるため、これは目的を果たしません。</target>
        </trans-unit>
        <trans-unit id="cc246b70384e8a417eb59e4e6e4575312d9d1e0a" translate="yes" xml:space="preserve">
          <source>If more than one variable or expression is given to &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, they must be placed in parentheses. This operator works by saving the current values of those variables in its argument list on a hidden stack and restoring them upon exiting the block, subroutine, or eval. This means that called subroutines can also reference the local variable, but not the global one. The argument list may be assigned to if desired, which allows you to initialize your local variables. (If no initializer is given for a particular variable, it is created with an undefined value.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; に複数の変数または式を指定する場合は、括弧で囲む必要があります。この演算子は、それらの変数の現在の値を非表示のスタックの引数リストに保存し、ブロック、サブルーチン、またはevalの終了時にそれらを復元することによって機能します。つまり、呼び出されたサブルーチンはローカル変数も参照できますが、グローバル変数は参照できません。必要に応じて引数リストを割り当てることができます。これにより、ローカル変数を初期化できます。（特定の変数に初期化子が指定されていない場合、未定義の値で作成されます。）</target>
        </trans-unit>
        <trans-unit id="085c88b116674b900e024434a6a7c1e9689729b6" translate="yes" xml:space="preserve">
          <source>If more than one variable or expression is given to &lt;code&gt;local&lt;/code&gt;, they must be placed in parentheses. This operator works by saving the current values of those variables in its argument list on a hidden stack and restoring them upon exiting the block, subroutine, or eval. This means that called subroutines can also reference the local variable, but not the global one. The argument list may be assigned to if desired, which allows you to initialize your local variables. (If no initializer is given for a particular variable, it is created with an undefined value.)</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; に複数の変数または式を指定する場合は、それらを括弧で囲む必要があります。この演算子は、これらの変数の現在の値を非表示のスタックの引数リストに保存し、ブロック、サブルーチン、またはevalの終了時にそれらを復元することによって機能します。つまり、呼び出されたサブルーチンはローカル変数も参照できますが、グローバル変数は参照できません。必要に応じて引数リストを割り当てることができます。これにより、ローカル変数を初期化できます。（特定の変数に初期化子が指定されていない場合、未定義の値で作成されます。）</target>
        </trans-unit>
        <trans-unit id="e6e3db41fbfcf6140e9c02e059dd4c934fd6f5ad" translate="yes" xml:space="preserve">
          <source>If multiple distinct capture groups have the same name then the $+{NAME} will refer to the leftmost defined group in the match.</source>
          <target state="translated">複数の異なるキャプチャグループが同じ名前を持っている場合、$+{NAME}はマッチの中で一番左に定義されたグループを参照します。</target>
        </trans-unit>
        <trans-unit id="585d6ab5fb9075615690fae06a03a5a68fb5033a" translate="yes" xml:space="preserve">
          <source>If multiple distinct capture groups have the same name, then &lt;code&gt;$+{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; will refer to the leftmost defined group in the match.</source>
          <target state="translated">複数の異なるキャプチャグループが同じ名前を持っている場合、 &lt;code&gt;$+{&lt;i&gt;NAME&lt;/i&gt;}&lt;/code&gt; は一致で左端に定義されたグループを参照します。</target>
        </trans-unit>
        <trans-unit id="ba43723459a9559595b0c9aa2500eb340a4dc46e" translate="yes" xml:space="preserve">
          <source>If multiple distinct capture groups have the same name, then &lt;code&gt;$+{NAME}&lt;/code&gt; will refer to the leftmost defined group in the match.</source>
          <target state="translated">複数の異なるキャプチャグループが同じ名前を持っている場合、 &lt;code&gt;$+{NAME}&lt;/code&gt; は一致で左端に定義されたグループを参照します。</target>
        </trans-unit>
        <trans-unit id="0bfee97a70420feb4c2945973c34123d251dd9c2" translate="yes" xml:space="preserve">
          <source>If multiple files from one program are desired an array ref can be used.</source>
          <target state="translated">1 つのプログラムから複数のファイルを取得したい場合は、配列 ref を使用することができます。</target>
        </trans-unit>
        <trans-unit id="081ad6caef0052cfab1aad2ae1061ca747e43248" translate="yes" xml:space="preserve">
          <source>If multiple transliterations are given for a character, only the first one is used:</source>
          <target state="translated">文字に対して複数の音訳が与えられた場合、最初の音訳のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="c414b75ce1c860047ef0a566364396ec60b38e43" translate="yes" xml:space="preserve">
          <source>If my tests take too long to run I may be able to speed them up by running multiple test scripts in parallel. This is particularly effective if the tests are I/O bound or if I have multiple CPU cores. I tell prove to run my tests in parallel like this:</source>
          <target state="translated">テストの実行に時間がかかりすぎる場合は、複数のテストスクリプトを並行して実行することで、テストを高速化できるかもしれません。これは、テストが I/O に縛られていたり、複数の CPU コアを持っていたりする場合に特に効果的です。私は、このようにテストを並列に実行するように証明しています。</target>
        </trans-unit>
        <trans-unit id="766c6735ff098a4b925a773897fe49012fa4895d" translate="yes" xml:space="preserve">
          <source>If name passed in doesn't specify a readable file, appends</source>
          <target state="translated">渡された名前が読めるファイルを指定していない場合は</target>
        </trans-unit>
        <trans-unit id="1afec739c7f1e924deac0edbd4a6af96f74019ce" translate="yes" xml:space="preserve">
          <source>If necessary switch the input stream to handle unicode. This only has any effect for I/O handle based streams.</source>
          <target state="translated">必要に応じて、入力スト リームを unicode を扱うように切り替えます。これは、I/Oハンドルベースのストリームに対してのみ効果があります。</target>
        </trans-unit>
        <trans-unit id="1f88753647459114bf0fff92153d71fa3be1ef0c" translate="yes" xml:space="preserve">
          <source>If needed, &lt;code&gt;$new_size&lt;/code&gt; will be rounded up to the next multiple of the memory page size (usually 4096 or 8192).</source>
          <target state="translated">必要に応じて、 &lt;code&gt;$new_size&lt;/code&gt; はメモリページサイズの次の倍数（通常は4096または8192）に切り上げられます。</target>
        </trans-unit>
        <trans-unit id="13ffb9e8f4aa9a45a3175ee9916b5d80efc23ef5" translate="yes" xml:space="preserve">
          <source>If needed, a thread can be exited at any time by calling &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; . This will cause the thread to return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in a scalar context, or the empty list in a list context.</source>
          <target state="translated">必要に応じて、 &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; を呼び出すことにより、いつでもスレッドを終了できます。これにより、スレッドはスカラーコンテキストでは &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、リストコンテキストでは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="7fa85a1effefc4c0579975cf6db618b5a32a7f98" translate="yes" xml:space="preserve">
          <source>If needed, a thread can be exited at any time by calling &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt;. This will cause the thread to return &lt;code&gt;undef&lt;/code&gt; in a scalar context, or the empty list in a list context.</source>
          <target state="translated">必要に応じて、 &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; を呼び出すことにより、いつでもスレッドを終了できます。これにより、スレッドはスカラーコンテキストで &lt;code&gt;undef&lt;/code&gt; を返すか、リストコンテキストで空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="ba4f2509d5dd63a76d44f087cc7f42f7f77c757a" translate="yes" xml:space="preserve">
          <source>If needed, scripts can be written so as to run on both threaded and non-threaded Perls:</source>
          <target state="translated">必要に応じて、スレッド化されたPerlsとスレッド化されていないPerlsの両方で動作するようにスクリプトを書くことができます。</target>
        </trans-unit>
        <trans-unit id="91fbdba912e7cde9b89fa3cefbc9b3e7d8d65343" translate="yes" xml:space="preserve">
          <source>If needed, these methods should be defined by the package inheriting from &lt;b&gt;Tie::Hash&lt;/b&gt;, &lt;b&gt;Tie::StdHash&lt;/b&gt;, or &lt;b&gt;Tie::ExtraHash&lt;/b&gt;. See &lt;a href=&quot;../perltie#SCALAR&quot;&gt;SCALAR in perltie&lt;/a&gt; to find out what happens when &lt;code&gt;SCALAR&lt;/code&gt; does not exist.</source>
          <target state="translated">必要に応じて、これらのメソッドは、&lt;b&gt;Tie :: Hash&lt;/b&gt;、&lt;b&gt;Tie :: StdHash&lt;/b&gt;、または&lt;b&gt;Tie :: ExtraHashを&lt;/b&gt;継承するパッケージで定義する必要があります。 &lt;code&gt;SCALAR&lt;/code&gt; が存在しない場合にどうなるかについて&lt;a href=&quot;../perltie#SCALAR&quot;&gt;は、perltieのSCALARを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e7be13126ea530b0bd8ee259471daa2d8234b8a5" translate="yes" xml:space="preserve">
          <source>If needed, these methods should be defined by the package inheriting from &lt;b&gt;Tie::Hash&lt;/b&gt;, &lt;b&gt;Tie::StdHash&lt;/b&gt;, or &lt;b&gt;Tie::ExtraHash&lt;/b&gt;. See &lt;a href=&quot;perltie#SCALAR&quot;&gt;&quot;SCALAR&quot; in perltie&lt;/a&gt; to find out what happens when &lt;code&gt;SCALAR&lt;/code&gt; does not exist.</source>
          <target state="translated">必要に応じて、これらのメソッドは、&lt;b&gt;Tie :: Hash&lt;/b&gt;、&lt;b&gt;Tie :: StdHash&lt;/b&gt;、または&lt;b&gt;Tie :: ExtraHash&lt;/b&gt;から継承するパッケージで定義する必要があります。 &lt;code&gt;SCALAR&lt;/code&gt; が存在しない場合に何が起こるかについては&lt;a href=&quot;perltie#SCALAR&quot;&gt;、perltieの「SCALAR」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f7a52a7ddea6d450e656d921a0db2fecb1485c60" translate="yes" xml:space="preserve">
          <source>If needed, thread warnings can be suppressed by using:</source>
          <target state="translated">必要に応じて、スレッドの警告を抑制することができます。</target>
        </trans-unit>
        <trans-unit id="7aac81b2bba7d90df4570fdaec9abe8879fce464" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;Family&lt;/code&gt; nor any hosts or addresses are passed, nor any &lt;code&gt;*AddrInfo&lt;/code&gt;, then the constructor has no information on which to decide a socket family to create. In this case, it performs a &lt;code&gt;getaddinfo&lt;/code&gt; call with the &lt;code&gt;AI_ADDRCONFIG&lt;/code&gt; flag, no host name, and a service name of &lt;code&gt;&quot;0&quot;&lt;/code&gt;, and uses the family of the first returned result.</source>
          <target state="translated">どちらの場合は &lt;code&gt;Family&lt;/code&gt; や任意のホストまたはアドレスが渡され、またいかなる &lt;code&gt;*AddrInfo&lt;/code&gt; 、その後、コンストラクタはソケット家族が作成することを決定するためにどの情報がありません。この場合、 &lt;code&gt;AI_ADDRCONFIG&lt;/code&gt; フラグ、ホスト名なし、サービス名 &lt;code&gt;&quot;0&quot;&lt;/code&gt; を使用して &lt;code&gt;getaddinfo&lt;/code&gt; 呼び出しを実行し、最初に返された結果のファミリーを使用します。</target>
        </trans-unit>
        <trans-unit id="e1d589a6c51332c7705521b2b0ef94169fba9785" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;Type&lt;/code&gt; nor &lt;code&gt;Proto&lt;/code&gt; hints are provided, a default of &lt;code&gt;SOCK_STREAM&lt;/code&gt; and &lt;code&gt;IPPROTO_TCP&lt;/code&gt; respectively will be set, to maintain compatibility with &lt;code&gt;IO::Socket::INET&lt;/code&gt;. Other named arguments that are not recognised are ignored.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; ヒントも &lt;code&gt;Proto&lt;/code&gt; ヒントも指定されていない場合、 &lt;code&gt;IO::Socket::INET&lt;/code&gt; との互換性を維持するために、それぞれデフォルトの &lt;code&gt;SOCK_STREAM&lt;/code&gt; と &lt;code&gt;IPPROTO_TCP&lt;/code&gt; が設定されます。認識されない他の名前付き引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="620d906a2e9dd53f3e33bb69b96c36a7f678920a" translate="yes" xml:space="preserve">
          <source>If neither of those work, then you can't use adb to cross-compile to your device. Either try rooting it, or go for the ssh route.</source>
          <target state="translated">どちらもうまくいかない場合は、あなたのデバイスに adb を使ってクロスコンパイルすることはできません。root 化してみるか、ssh 経由で行ってみてください。</target>
        </trans-unit>
        <trans-unit id="7b8270c68932b39381b724db912d7e0064edb351" translate="yes" xml:space="preserve">
          <source>If neither the &lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;-l&lt;/code&gt; prefix is present in an entry, the entry is considered a directory to search if it is in fact a directory, and a library to search for otherwise. The &lt;code&gt;$Config{lib_ext}&lt;/code&gt; suffix will be appended to any entries that are not directories and don't already have the suffix.</source>
          <target state="translated">エントリに &lt;code&gt;-L&lt;/code&gt; と &lt;code&gt;-l&lt;/code&gt; のどちらのプレフィックスも存在しない場合、そのエントリは、実際にはディレクトリである場合は検索するディレクトリ、そうでない場合は検索するライブラリと見なされます。 &lt;code&gt;$Config{lib_ext}&lt;/code&gt; サフィックスは、ディレクトリではなく、すでにサフィックスを持っていないすべてのエントリに追加されます。</target>
        </trans-unit>
        <trans-unit id="2d1c5c51b75ebf17552d122abb9f110644200dac" translate="yes" xml:space="preserve">
          <source>If neither the &lt;code&gt;G_METHOD&lt;/code&gt; nor &lt;code&gt;G_METHOD_NAMED&lt;/code&gt; flag is supplied, the SV may be any of a CV, a GV, a reference to a CV, a reference to a GV or &lt;code&gt;SvPV(sv)&lt;/code&gt; will be used as the name of the sub to call.</source>
          <target state="translated">どちらの場合 &lt;code&gt;G_METHOD&lt;/code&gt; も &lt;code&gt;G_METHOD_NAMED&lt;/code&gt; フラグが供給され、SVがCVのいずれであってもよい、GV、CVへの参照、またはGVを参照 &lt;code&gt;SvPV(sv)&lt;/code&gt; 呼び出しにサブの名前として使用されます。</target>
        </trans-unit>
        <trans-unit id="33d1d1804f2f0f5f5a1b0fb679650c8cfecd87fb" translate="yes" xml:space="preserve">
          <source>If neither the exit status nor the verbose level is specified, then the default is to use an exit status of 2 with a verbose level of 0.</source>
          <target state="translated">終了ステータスも冗長レベルも指定されていない場合、デフォルトでは、終了ステータスが 2、冗長レベルが 0 の場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="ca010fd55b822b0537501828b1432d2b69dedb67" translate="yes" xml:space="preserve">
          <source>If neither your configured &lt;code&gt;yaml_module&lt;/code&gt; nor YAML.pm is installed, CPAN.pm falls back to using Data::Dumper and Storable and looks for files with the extensions &lt;code&gt;.dd&lt;/code&gt; or &lt;code&gt;.st&lt;/code&gt; in the &lt;code&gt;prefs_dir&lt;/code&gt; directory. These files are expected to contain one or more hashrefs. For Data::Dumper generated files, this is expected to be done with by defining &lt;code&gt;$VAR1&lt;/code&gt; , &lt;code&gt;$VAR2&lt;/code&gt; , etc. The YAML shell would produce these with the command</source>
          <target state="translated">設定 &lt;code&gt;yaml_module&lt;/code&gt; もYAML.pmもインストールされていない場合、CPAN.pmはData :: DumperとStorableを使用するようにフォールバックし、 &lt;code&gt;prefs_dir&lt;/code&gt; ディレクトリで拡張子 &lt;code&gt;.dd&lt;/code&gt; または &lt;code&gt;.st&lt;/code&gt; のファイルを探します。これらのファイルには、1つ以上のハッシュ参照が含まれていることが想定されています。Data :: Dumperで生成されたファイルの場合、これは &lt;code&gt;$VAR1&lt;/code&gt; 、 &lt;code&gt;$VAR2&lt;/code&gt; などを定義することで行われると予想されます。YAMLシェルは次のコマンドでこれらを生成します</target>
        </trans-unit>
        <trans-unit id="1ff3f3f68e857a065a27224d0e20ede58778f1ae" translate="yes" xml:space="preserve">
          <source>If new() is called as an instance method (i.e. $ctx-&amp;gt;new) it will just reset the state the object to the state of a newly created object. No new object is created in this case, and the return value is the reference to the object (i.e. $ctx).</source>
          <target state="translated">new（）がインスタンスメソッドとして呼び出された場合（つまり、$ ctx-&amp;gt; new）、オブジェクトの状態を新しく作成されたオブジェクトの状態にリセットするだけです。この場合、新しいオブジェクトは作成されず、戻り値はオブジェクトへの参照（つまり$ ctx）です。</target>
        </trans-unit>
        <trans-unit id="2e13ee0a65adecfa0d8e7d8968c5c8fbe048cddb" translate="yes" xml:space="preserve">
          <source>If no $default is provided an empty string will be used instead.</source>
          <target state="translated">default が指定されていない場合は、代わりに空の文字列が使用されます。</target>
        </trans-unit>
        <trans-unit id="0472c17854436e8327aa450d7bb9d0ca29c0fa4c" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;$VERSION&lt;/code&gt; was specified on the &lt;code&gt;bootstrap&lt;/code&gt; line, the last line becomes</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; 行に &lt;code&gt;$VERSION&lt;/code&gt; が指定されていない場合、最後の行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1b4091cfd69b61e159053e0bbc2425f479136432" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;$section_spec&lt;/code&gt; arguments are given, then the existing set of selected sections is cleared out (which means &lt;code&gt;all&lt;/code&gt; sections will be processed).</source>
          <target state="translated">&lt;code&gt;$section_spec&lt;/code&gt; 引数が指定されていない場合、選択されたセクションの既存のセットは消去されます（つまり、 &lt;code&gt;all&lt;/code&gt; セクションが処理されます）。</target>
        </trans-unit>
        <trans-unit id="c0be16a9153a991182a683ab2886f1fa902dd9f4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is found and if the last statement is an expression, its value is returned. If the last statement is a loop control structure like a &lt;code&gt;foreach&lt;/code&gt; or a &lt;code&gt;while&lt;/code&gt; , the returned value is unspecified. The empty sub returns the empty list.</source>
          <target state="translated">何の場合は &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 見つからないと、最後の文が式である場合、その値が返されます。最後のステートメントが &lt;code&gt;foreach&lt;/code&gt; または &lt;code&gt;while&lt;/code&gt; のようなループ制御構造である場合、戻り値は指定されていません。空のサブルーチンは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="97d668cbdc526d3cbea7edc6414a728eb26feaf0" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;return&lt;/code&gt; is found and if the last statement is an expression, its value is returned. If the last statement is a loop control structure like a &lt;code&gt;foreach&lt;/code&gt; or a &lt;code&gt;while&lt;/code&gt;, the returned value is unspecified. The empty sub returns the empty list.</source>
          <target state="translated">何の場合は &lt;code&gt;return&lt;/code&gt; 見つからないと、最後の文が式である場合、その値が返されます。最後のステートメントが &lt;code&gt;foreach&lt;/code&gt; や &lt;code&gt;while&lt;/code&gt; などのループ制御構造である場合、戻り値は指定されていません。空のサブは空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="bf9cd2f55bd05fa55b1648853a5a5e34325f19ca" translate="yes" xml:space="preserve">
          <source>If no @args are given, no @cmds will be returned.</source>
          <target state="translated">引数に @args が与えられていない場合、@cmds は返されません。</target>
        </trans-unit>
        <trans-unit id="d11be4d28581ad6cd28ff2cca82d45474710696d" translate="yes" xml:space="preserve">
          <source>If no MANIFEST.SKIP file is found, a default set of skips will be used, similar to the example above. If you want nothing skipped, simply make an empty MANIFEST.SKIP file.</source>
          <target state="translated">MANIFEST.SKIPファイルが見つからない場合は、上記の例と同様に、デフォルトのスキップのセットが使用されます。何もスキップしないようにしたい場合は、単に空の MANIFEST.SKIP ファイルを作成してください。</target>
        </trans-unit>
        <trans-unit id="482e18ae3dbe759dbfcebf52b00cc2a6c84ee16a" translate="yes" xml:space="preserve">
          <source>If no argument is given, the highest possible setting will be used, which is rarely useful.</source>
          <target state="translated">引数が与えられていない場合は、可能な限り最高の設定が使用されますが、これはほとんど有用ではありません。</target>
        </trans-unit>
        <trans-unit id="6fc9afdb8826971e1f36212e96bd04623eb38e92" translate="yes" xml:space="preserve">
          <source>If no argument is given, the limit check will be deactivated (same as when &lt;code&gt;0&lt;/code&gt; is specified).</source>
          <target state="translated">引数が指定されていない場合、制限チェックは無効になります（ &lt;code&gt;0&lt;/code&gt; が指定されている場合と同じ）。</target>
        </trans-unit>
        <trans-unit id="cae10c8870eae9f10da944c7a01e813768cc713b" translate="yes" xml:space="preserve">
          <source>If no arguments are given to pod2man it will read from @ARGV.</source>
          <target state="translated">pod2manに引数が与えられていない場合は、@ARGVから読み込みます。</target>
        </trans-unit>
        <trans-unit id="87c6b87283ba7c4ecec068cb48f3ae13420b59ed" translate="yes" xml:space="preserve">
          <source>If no arguments are given, &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; returns the entire formatted archive as a string, which could be useful if you'd like to stuff the archive into a socket or a pipe to gzip or something.</source>
          <target state="translated">引数を指定しない場合、 &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; はフォーマットされたアーカイブ全体を文字列として返します。これは、アーカイブをソケットまたはパイプにgzipなどに詰め込みたい場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="0ab20efd7be2867edc836fd9f4e9fd1df47b1ae4" translate="yes" xml:space="preserve">
          <source>If no arguments are given, &lt;code&gt;write&lt;/code&gt; returns the entire formatted archive as a string, which could be useful if you'd like to stuff the archive into a socket or a pipe to gzip or something.</source>
          <target state="translated">引数が指定されていない場合、 &lt;code&gt;write&lt;/code&gt; はフォーマットされたアーカイブ全体を文字列として返します。これは、アーカイブをソケットまたはパイプからgzipなどに詰め込みたい場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="886a141165f04df6d6f369bc4c3d2d482bb6efce" translate="yes" xml:space="preserve">
          <source>If no arguments are passed then the current article in the currently selected newsgroup is fetched.</source>
          <target state="translated">引数を渡さない場合は、現在選択されているニュースグループの現在の記事が取得されます。</target>
        </trans-unit>
        <trans-unit id="1361c81765e284924a4726230ee621f378f42412" translate="yes" xml:space="preserve">
          <source>If no error occurs, &lt;code&gt;eval&lt;/code&gt; sets &lt;code&gt;$@&lt;/code&gt; to the empty string.</source>
          <target state="translated">エラーが発生しない場合、 &lt;code&gt;eval&lt;/code&gt; は &lt;code&gt;$@&lt;/code&gt; を空の文字列に設定します。</target>
        </trans-unit>
        <trans-unit id="ddc296f09027fdaaecb023b3cebc4e9cba37abbb" translate="yes" xml:space="preserve">
          <source>If no extension is supplied, and your system supports it, the original</source>
          <target state="translated">拡張機能が提供されておらず、お使いのシステムがそれをサポートしている場合は、オリジナルの</target>
        </trans-unit>
        <trans-unit id="85c571c913f7bfa21e872b065c24a094b4bb7659" translate="yes" xml:space="preserve">
          <source>If no files or directories are supplied, &lt;code&gt;prove&lt;/code&gt; looks for all files matching the pattern &lt;code&gt;t/*.t&lt;/code&gt;.</source>
          <target state="translated">ファイルまたはディレクトリが指定されていない場合、 &lt;code&gt;prove&lt;/code&gt; はパターン &lt;code&gt;t/*.t&lt;/code&gt; 一致するすべてのファイルを探します。</target>
        </trans-unit>
        <trans-unit id="a4c68647b34bca31278b9d9c157de53c4f611c93" translate="yes" xml:space="preserve">
          <source>If no flags argument is give then &lt;code&gt;GLOB_CSH&lt;/code&gt; is set, and on VMS and Windows systems, &lt;code&gt;GLOB_NOCASE&lt;/code&gt; too. Otherwise the flags to use are determined solely by the flags argument. The POSIX defined flags are:</source>
          <target state="translated">フラグ引数が指定されていない場合は、 &lt;code&gt;GLOB_CSH&lt;/code&gt; が設定され、VMSおよびWindowsシステムでは &lt;code&gt;GLOB_NOCASE&lt;/code&gt; も設定されます。それ以外の場合、使用するフラグは、flags引数によってのみ決定されます。POSIXで定義されたフラグは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cea57f19921408109bb2fb4d00e16350d27b4844" translate="yes" xml:space="preserve">
          <source>If no import list is supplied, all possible VMS-specific features are assumed. Currently, there are four VMS-specific features available: 'status' (a.k.a '$?'), 'exit', 'time' and 'hushed'.</source>
          <target state="translated">インポートリストが指定されていない場合は、すべての VMS 固有の機能が想定されます。現在、利用可能な VMS 固有の機能は 'status' (別名 '$?')、 'exit'、'time' および 'hashed' の 4 つです。</target>
        </trans-unit>
        <trans-unit id="d4ceff2a6aadec6052244b97bba7012539a0b105" translate="yes" xml:space="preserve">
          <source>If no import list is supplied, all possible restrictions are assumed. (This is the safest mode to operate in, but is sometimes too strict for casual programming.) Currently, there are three possible things to be strict about: &quot;subs&quot;, &quot;vars&quot;, and &quot;refs&quot;.</source>
          <target state="translated">インポートリストが与えられていない場合は、すべての可能な制限が想定されます(これは最も安全なモードですが、カジュアルなプログラミングでは厳しすぎることもあります)。(これは最も安全に動作するモードですが、カジュアルなプログラミングには厳しすぎることもあります)。現在のところ、厳密に制限される可能性のあるものは3つあります。&quot;subs&quot;、&quot;vars&quot;、&quot;refs &quot;です。</target>
        </trans-unit>
        <trans-unit id="c1d6512b9a9d5a5a9bf4112bcb1e3a393263f0b9" translate="yes" xml:space="preserve">
          <source>If no items exists at the specified index (i.e., the queue is empty, or the index is beyond the number of items on the queue), then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">指定されたインデックスにアイテムが存在しない場合（つまり、キューが空であるか、インデックスがキュー内のアイテム数を超えている場合）、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="78d629698ed39f1b937dab840c0e7631f8015fc9" translate="yes" xml:space="preserve">
          <source>If no items exists at the specified index (i.e., the queue is empty, or the index is beyond the number of items on the queue), then &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">指定されたインデックスにアイテムが存在しない場合（つまり、キューが空であるか、インデックスがキュー上のアイテムの数を超えている場合）、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="bc9e3e2a819c8fb3d75385fda77f033e08dfb423" translate="yes" xml:space="preserve">
          <source>If no options are given, Pod::Man uses the name of the input file with any trailing &lt;code&gt;.pod&lt;/code&gt;, &lt;code&gt;.pm&lt;/code&gt;, or &lt;code&gt;.pl&lt;/code&gt; stripped as the man page title, to section 1 unless the file ended in &lt;code&gt;.pm&lt;/code&gt; in which case it defaults to section 3, to a centered title of &quot;User Contributed Perl Documentation&quot;, to a centered footer of the Perl version it is run with, and to a left-hand footer of the modification date of its input (or the current date if given &lt;code&gt;STDIN&lt;/code&gt; for input).</source>
          <target state="translated">オプションが指定されていない場合、Pod :: Manは、ファイルが &lt;code&gt;.pm&lt;/code&gt; で終わっていない限り、後続の &lt;code&gt;.pod&lt;/code&gt; 、 &lt;code&gt;.pm&lt;/code&gt; 、または &lt;code&gt;.pl&lt;/code&gt; をmanページのタイトルとして取り除いた入力ファイルの名前をセクション1に使用します。デフォルトでは、セクション3、「ユーザー提供のPerlドキュメント」の中央揃えのタイトル、実行されるPerlバージョンの中央揃えのフッター、入力の変更日付の左側のフッター（または、現在の日付）入力に &lt;code&gt;STDIN&lt;/code&gt; が指定されています）。</target>
        </trans-unit>
        <trans-unit id="1f1608fb3d0f72aad27d7541f9de6e52f802b4ee" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is &lt;code&gt;LC_ALL&lt;/code&gt; , the result is implementation-dependent. It may be a string of concatenated locale names (separator also implementation-dependent) or a single locale name. Please consult your</source>
          <target state="translated">2番目の引数が指定されておらず、カテゴリが &lt;code&gt;LC_ALL&lt;/code&gt; の場合、結果は実装に依存します。これは、連結されたロケール名の文字列（セパレーターも実装に依存）または単一のロケール名の場合があります。ご相談ください</target>
        </trans-unit>
        <trans-unit id="267c1696e15f2baca20bbece162193151736f0bb" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is &lt;code&gt;LC_ALL&lt;/code&gt;, the result is implementation-dependent. It may be a string of concatenated locale names (separator also implementation-dependent) or a single locale name. Please consult your &lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale(3)&lt;/a&gt; man page for details.</source>
          <target state="translated">2番目の引数が指定されておらず、カテゴリが &lt;code&gt;LC_ALL&lt;/code&gt; の場合、結果は実装に依存します。これは、連結されたロケール名の文字列（セパレーターも実装に依存）または単一のロケール名の場合があります。詳細については、&lt;a href=&quot;http://man.he.net/man3/setlocale&quot;&gt;setlocale（3）の&lt;/a&gt;マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="ed489574b7ebc8c696d017fb9515c4a591232a34" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is something other than &lt;code&gt;LC_ALL&lt;/code&gt; , the function returns a string naming the current locale for the category. You can use this value as the second argument in a subsequent call to &lt;code&gt;setlocale()&lt;/code&gt; , &lt;b&gt;but&lt;/b&gt; on some platforms the string is opaque, not something that most people would be able to decipher as to what locale it means.</source>
          <target state="translated">2番目の引数が指定されておらず、カテゴリが &lt;code&gt;LC_ALL&lt;/code&gt; 以外の場合、関数はカテゴリの現在のロケールを示す文字列を返します。あなたは後に呼び出しで2番目の引数としてこの値を使用することができます &lt;code&gt;setlocale()&lt;/code&gt; 、&lt;b&gt;しかし、&lt;/b&gt;いくつかのプラットフォーム上での文字列は、ほとんどの人はそれが何を意味するのかロケールにとして解読することができるだろうという不透明な、ないものです。</target>
        </trans-unit>
        <trans-unit id="64041fec58a65d66b2f703a3782bbd84be6d1203" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is something other than &lt;code&gt;LC_ALL&lt;/code&gt;, the function returns a string naming the current locale for the category. You can use this value as the second argument in a subsequent call to &lt;code&gt;setlocale()&lt;/code&gt;, &lt;b&gt;but&lt;/b&gt; on some platforms the string is opaque, not something that most people would be able to decipher as to what locale it means.</source>
          <target state="translated">2番目の引数が指定されておらず、カテゴリが &lt;code&gt;LC_ALL&lt;/code&gt; 以外の場合、関数はカテゴリの現在のロケールを指定する文字列を返します。あなたは後に呼び出しで2番目の引数としてこの値を使用することができます &lt;code&gt;setlocale()&lt;/code&gt; 、&lt;b&gt;しかし、&lt;/b&gt;いくつかのプラットフォーム上での文字列は、ほとんどの人はそれが何を意味するのかロケールにとして解読することができるだろうという不透明な、ないものです。</target>
        </trans-unit>
        <trans-unit id="53385049e198591f3af9c0f621b19586d0e6e03c" translate="yes" xml:space="preserve">
          <source>If no string is specified via the &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt; operator, the &lt;code&gt;$_&lt;/code&gt; variable is searched and modified. Unless the &lt;code&gt;/r&lt;/code&gt; option is used, the string specified must be a scalar variable, an array element, a hash element, or an assignment to one of those; that is, some sort of scalar lvalue.</source>
          <target state="translated">&lt;code&gt;=~&lt;/code&gt; または &lt;code&gt;!~&lt;/code&gt; 演算子を介して文字列が指定されていない場合、 &lt;code&gt;$_&lt;/code&gt; 変数が検索および変更されます。 &lt;code&gt;/r&lt;/code&gt; オプションを使用しない限り、指定する文字列は、スカラー変数、配列要素、ハッシュ要素、またはこれらのいずれかの割り当てでなければなりません。つまり、ある種のスカラー左辺値です。</target>
        </trans-unit>
        <trans-unit id="9ee4d303ec9de35b4bd6b8caf1f726ddd4ca7c6e" translate="yes" xml:space="preserve">
          <source>If no such Pod file is found, this method returns undef.</source>
          <target state="translated">そのようなPodファイルが見つからない場合、このメソッドは undef を返します。</target>
        </trans-unit>
        <trans-unit id="34cd3d77c3969309ab95d1d80fe464b5d299344d" translate="yes" xml:space="preserve">
          <source>If no urllist has been chosen yet, would you prefer CPAN.pm to connect to the built-in default sites without asking? (yes/no)?</source>
          <target state="translated">urllist がまだ選択されていない場合は、CPAN.pm が何も聞かずにビルトインのデフォルトサイトに接続することを希望しますか? (yes/no)?</target>
        </trans-unit>
        <trans-unit id="b1457b54499e074ed5ffc48ffd57a11b298ba627" translate="yes" xml:space="preserve">
          <source>If no value is associated with the attribute, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is passed.</source>
          <target state="translated">属性に関連付けられている値がない場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が渡されます。</target>
        </trans-unit>
        <trans-unit id="9e6ead3ce8c862f9ee6e9b2af0ca9c9d3945d613" translate="yes" xml:space="preserve">
          <source>If no value is associated with the attribute, &lt;code&gt;undef&lt;/code&gt; is passed.</source>
          <target state="translated">属性に値が関連付けられていない場合、 &lt;code&gt;undef&lt;/code&gt; が渡されます。</target>
        </trans-unit>
        <trans-unit id="bbf2ca53d71d01f547a112c6b13519e5e34d198d" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;a href=&quot;#glob-EXPR&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="translated">空でない中括弧が&lt;a href=&quot;#glob-EXPR&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;で使用される唯一のワイルドカード文字である場合、ファイル名は一致しませんが、多くの文字列が返される可能性があります。たとえば、これにより、果物と色のペアごとに1つずつ、合計9つの文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="3641612d3261f449a8b25c55086ede32d34dbbcb" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="translated">空でない中括弧が &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; で使用される唯一のワイルドカード文字である場合、ファイル名は照合されませんが、潜在的に多くの文字列が返されます。たとえば、果物と色のペアごとに1つずつ、9つの文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="1328c99f7fc26be401ecc4c3daf8d11e272b065b" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;code&gt;&lt;a href=&quot;glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="translated">空でない中括弧が &lt;code&gt;&lt;a href=&quot;glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; で使用される唯一のワイルドカード文字である場合、ファイル名は照合されませんが、潜在的に多くの文字列が返されます。たとえば、果物と色のペアごとに1つずつ、9つの文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="cf3289643abb0e0247bc66bf82c16e180f16eb54" translate="yes" xml:space="preserve">
          <source>If none of the above apply, for backwards compatibility reasons, the &lt;code&gt;/d&lt;/code&gt; modifier is the one in effect by default. As this can lead to unexpected results, it is best to specify which other rule set should be used.</source>
          <target state="translated">上記のいずれにも該当しない場合は、下位互換性の理由から、 &lt;code&gt;/d&lt;/code&gt; 修飾子がデフォルトで有効になります。これにより予期しない結果が生じる可能性があるため、使用する他のルールセットを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c4f8a0262880dda1d52bfe8a37ad85562f38ba99" translate="yes" xml:space="preserve">
          <source>If none of the settings are enabled or the respective methods are missing, &lt;code&gt;JSON::PP&lt;/code&gt; throws an exception.</source>
          <target state="translated">いずれの設定も有効になっていないか、それぞれのメソッドが欠落している場合、 &lt;code&gt;JSON::PP&lt;/code&gt; は例外をスローします。</target>
        </trans-unit>
        <trans-unit id="ca7c7d8696c46f8858c11c99d7d1a93c5e34454b" translate="yes" xml:space="preserve">
          <source>If none of the three command line flags (&lt;b&gt;-w&lt;/b&gt;, &lt;b&gt;-W&lt;/b&gt; or &lt;b&gt;-X&lt;/b&gt;) that control warnings is used and neither &lt;code&gt;$^W&lt;/code&gt; nor the &lt;code&gt;warnings&lt;/code&gt; pragma are used, then default warnings will be enabled and optional warnings disabled. This means that legacy code that doesn't attempt to control the warnings will work unchanged.</source>
          <target state="translated">警告を制御する3つのコマンドラインフラグ（&lt;b&gt;-w&lt;/b&gt;、&lt;b&gt;-W&lt;/b&gt;または&lt;b&gt;-X&lt;/b&gt;）のいずれも使用せず、 &lt;code&gt;$^W&lt;/code&gt; も &lt;code&gt;warnings&lt;/code&gt; プラグマも使用しない場合、デフォルトの警告が有効になり、オプションの警告は無効になります。これは、警告を制御しようとしない従来のコードが変更されずに機能することを意味します。</target>
        </trans-unit>
        <trans-unit id="3318e55dc39962c8bcf2ab6429b4489bcf36fce0" translate="yes" xml:space="preserve">
          <source>If none of those language-tags leads to loadable classes, we then try classes derived from YourProjClass-&amp;gt;fallback_languages() and then if nothing comes of that, we use classes named by YourProjClass-&amp;gt;fallback_language_classes(). Then in the (probably quite unlikely) event that that fails, we just return undef.</source>
          <target state="translated">これらの言語タグのいずれもロード可能なクラスにつながらない場合は、YourProjClass-&amp;gt; fallback_languages（）から派生したクラスを試し、それが何も起こらない場合は、YourProjClass-&amp;gt; fallback_language_classes（）で指定されたクラスを使用します。次に、失敗する（おそらく非常にありそうもない）イベントで、undefを返します。</target>
        </trans-unit>
        <trans-unit id="92205bb5b979576b7a4566bdd880e8993ef8accb" translate="yes" xml:space="preserve">
          <source>If not 0, then it will be a count of the number of items returned by the subroutine. These items will be stored on the Perl stack. The section</source>
          <target state="translated">0でない場合は、サブルーチンによって返された項目の数を数えます。これらの項目はPerlスタックに格納されます。セクション</target>
        </trans-unit>
        <trans-unit id="59c73f98889212850b2a78b85e24e752ffbdf926" translate="yes" xml:space="preserve">
          <source>If not 0, then it will be a count of the number of items returned by the subroutine. These items will be stored on the Perl stack. The section &lt;a href=&quot;#Returning-a-List-of-Values&quot;&gt;&quot;Returning a List of Values&quot;&lt;/a&gt; gives an example of using the G_ARRAY flag and the mechanics of accessing the returned items from the Perl stack.</source>
          <target state="translated">0でない場合は、サブルーチンによって返されるアイテムの数になります。これらのアイテムはPerlスタックに保存されます。&lt;a href=&quot;#Returning-a-List-of-Values&quot;&gt;「値のリストを返す」&lt;/a&gt;のセクションでは、G_ARRAYフラグの使用例と、Perlスタックから返されたアイテムにアクセスするメカニズムについて説明します。</target>
        </trans-unit>
        <trans-unit id="15089e00b79e7ab36a4d99102807c33fe5f2fa61" translate="yes" xml:space="preserve">
          <source>If not already thread-shared, the other complex data types will be cloned (recursively, if needed, and including any &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;ings and read-only settings) into thread-shared structures before being placed onto a queue.</source>
          <target state="translated">まだスレッド共有されていない場合、他の複雑なデータ型は（必要に応じて再帰的に、そして &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; と読み取り専用設定を含めて）スレッド共有構造に複製されてから、キューに配置されます。</target>
        </trans-unit>
        <trans-unit id="bd2af9d148c476fa264b6faed90957e58a463b95" translate="yes" xml:space="preserve">
          <source>If not already thread-shared, the other complex data types will be cloned (recursively, if needed, and including any &lt;code&gt;bless&lt;/code&gt;ings and read-only settings) into thread-shared structures before being placed onto a queue.</source>
          <target state="translated">まだスレッド共有されていない場合、他の複雑なデータ型は、キューに配置される前に、スレッド共有構造に複製されます（必要に応じて再帰的に、 &lt;code&gt;bless&lt;/code&gt; と読み取り専用設定を含みます）。</target>
        </trans-unit>
        <trans-unit id="68037dc7029dc4e3c365e1435ac66af09bfe7401" translate="yes" xml:space="preserve">
          <source>If not defined, the socket option will not be changed, and default value set by the operating system will apply. For repeatable behaviour across platforms it is recommended this value always be defined for listening-mode sockets.</source>
          <target state="translated">定義されていない場合、ソケットオプションは変更されず、オペレーティングシステムで設定されたデフォルト値が適用されます。プラットフォーム間で再現性のある動作をするために、リスニングモードのソケットでは常にこの値を定義しておくことを推奨します。</target>
        </trans-unit>
        <trans-unit id="3e6242ea32a785a3ff0172e42255ea915052f271" translate="yes" xml:space="preserve">
          <source>If not explicitly stated, the thread's context is implied from the context of the &lt;code&gt;-&amp;gt;create()&lt;/code&gt; call:</source>
          <target state="translated">明示的に述べられていない場合、スレッドのコンテキストは &lt;code&gt;-&amp;gt;create()&lt;/code&gt; 呼び出しのコンテキストから暗示されます。</target>
        </trans-unit>
        <trans-unit id="546f552a865a929b4eb67739806b6d1165a21c9a" translate="yes" xml:space="preserve">
          <source>If not present or if it returns false, then the stream is left with the UTF-8 flag clear. The</source>
          <target state="translated">存在しない場合、または false を返す場合は、ストリームは UTF-8 フラグ clear のままになります。このような場合には</target>
        </trans-unit>
        <trans-unit id="2aa39c0e8f5ce84edfe0042135e7b88219cc53b5" translate="yes" xml:space="preserve">
          <source>If not specified, this parameter defaults to the OS code of the Operating System this module was built on. The value 3 is used as a catch-all for all Unix variants and unknown Operating Systems.</source>
          <target state="translated">指定されていない場合、このパラメータは、このモジュールが構築されたオペレーティング・システムの OS コードをデフォルトにします。値 3 は、すべての Unix バリアントと未知のオペレーティング・システムのためのキャッチオールとして使用されます。</target>
        </trans-unit>
        <trans-unit id="5be9107047108eada41300dc934c5b436deb60f0" translate="yes" xml:space="preserve">
          <source>If not successful &lt;code&gt;$status&lt;/code&gt; will hold the</source>
          <target state="translated">成功しない場合、 &lt;code&gt;$status&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="aff9c9f30e8137171bc8ec7e751402e0d4e840fb" translate="yes" xml:space="preserve">
          <source>If not successful, &lt;code&gt;$i&lt;/code&gt; will be</source>
          <target state="translated">成功しなかった場合、 &lt;code&gt;$i&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="b50aafa5c3c8fb148f77f7f985f1a7044430dc1d" translate="yes" xml:space="preserve">
          <source>If not successful, the returned compression object, &lt;code&gt;$z&lt;/code&gt; , will be</source>
          <target state="translated">成功しなかった場合、返される圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="12b14a0f96d5dc839995d0658014681616dce040" translate="yes" xml:space="preserve">
          <source>If not successful, the returned compression object, &lt;code&gt;$z&lt;/code&gt;, will be</source>
          <target state="translated">成功しなかった場合、返される圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e8abade20743149de14f55b6a98559ef8ef9d29a" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation object, &lt;code&gt;$d&lt;/code&gt; , will be</source>
          <target state="translated">成功しない場合、返されるデフレオブジェクト &lt;code&gt;$d&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="a55077829587b52f718a05dd4622ff7cb59c31d0" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation object, &lt;code&gt;$d&lt;/code&gt;, will be</source>
          <target state="translated">成功しなかった場合、返されるデフレオブジェクト &lt;code&gt;$d&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="98576d6e30e44a960914f7dcf4587ee17092e2df" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation stream (&lt;code&gt;$d&lt;/code&gt; ) will be</source>
          <target state="translated">成功しなかった場合、返されるデフレストリーム（ &lt;code&gt;$d&lt;/code&gt; ）は</target>
        </trans-unit>
        <trans-unit id="31b0629650565b4db9feee16aed7f875e955eba9" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation stream (&lt;code&gt;$d&lt;/code&gt;) will be</source>
          <target state="translated">成功しなかった場合、返されるデフレストリーム（ &lt;code&gt;$d&lt;/code&gt; ）は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b7bd4ba1b78daba8a26ec4a9a7d4b9cf1b5da29e" translate="yes" xml:space="preserve">
          <source>If not successful, the returned uncompression object, &lt;code&gt;$z&lt;/code&gt; , will be</source>
          <target state="translated">成功しなかった場合、返される非圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="ff81451b912d52c5c65d903982a9c2e6578403e7" translate="yes" xml:space="preserve">
          <source>If not successful, the returned uncompression object, &lt;code&gt;$z&lt;/code&gt;, will be</source>
          <target state="translated">成功しなかった場合、返される非圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5c88e7dc3b6ede485e4fd5bdcc2d18ce257150ea" translate="yes" xml:space="preserve">
          <source>If not under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; , the source is treated as ASCII + 128 extra controls, and identifiers should match</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用されて&lt;/a&gt;いない場合、ソースはASCII + 128の追加のコントロールとして扱われ、識別子は一致する必要があります</target>
        </trans-unit>
        <trans-unit id="6275358c6fb498ac9c62eac9a2037ee571ebd990" translate="yes" xml:space="preserve">
          <source>If not under &lt;code&gt;use utf8&lt;/code&gt;, the source is treated as ASCII + 128 extra generic characters, and identifiers should match</source>
          <target state="translated">&lt;code&gt;use utf8&lt;/code&gt; を使用していない場合、ソースはASCII + 128の追加の総称文字として扱われ、識別子は一致する必要があります</target>
        </trans-unit>
        <trans-unit id="adf92a54eaec2aef254d98d2b3572cf157430f6f" translate="yes" xml:space="preserve">
          <source>If not, you can use a Fisher-Yates shuffle.</source>
          <target state="translated">そうでない場合は、フィッシャー・イェーツのシャッフルを使用することができます。</target>
        </trans-unit>
        <trans-unit id="63aa47bb8d880da4c29744c1e2b5b0be9d2d8c10" translate="yes" xml:space="preserve">
          <source>If not, you may need to dig in the indices to find it in the directory of the current maintainer.</source>
          <target state="translated">そうでない場合は、現在のメンテナのディレクトリで見つけるためにインデックスを掘り下げる必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="86c0e89f96b9aaaff68e6f577691cea5717917d9" translate="yes" xml:space="preserve">
          <source>If ob is true and the SV is blessed, the description is the class name, otherwise it is the type of the SV, &quot;SCALAR&quot;, &quot;ARRAY&quot; etc.</source>
          <target state="translated">ob が真で SV が祝福されている場合、記述はクラス名、そうでない場合は SV の種類である &quot;SCALAR&quot; や &quot;ARRAY&quot; などを表します。</target>
        </trans-unit>
        <trans-unit id="89bf684ef82a39d22f842daf13f965778d5ecf34" translate="yes" xml:space="preserve">
          <source>If ob is true and the SV is blessed, the string is the class name, otherwise it is the type of the SV, &quot;SCALAR&quot;, &quot;ARRAY&quot; etc.</source>
          <target state="translated">ob が真で SV が祝福されている場合、文字列はクラス名であり、そうでない場合は SV の型である &quot;SCALAR&quot; や &quot;ARRAY&quot; などを表します。</target>
        </trans-unit>
        <trans-unit id="e3dd66c8bbe90e184bf0c3b78ff920f066856ccf" translate="yes" xml:space="preserve">
          <source>If omitted, PATTERN defaults to a single space, &lt;code&gt;&quot; &quot;&lt;/code&gt; , triggering the previously described</source>
          <target state="translated">省略した場合、PATTERNはデフォルトで単一のスペース &lt;code&gt;&quot; &quot;&lt;/code&gt; になり、前述のトリガーになります</target>
        </trans-unit>
        <trans-unit id="48ccc574ab641252333c06cf11483c32d32127b7" translate="yes" xml:space="preserve">
          <source>If omitted, PATTERN defaults to a single space, &lt;code&gt;&quot; &quot;&lt;/code&gt;, triggering the previously described</source>
          <target state="translated">省略した場合、PATTERNはデフォルトで単一のスペース &lt;code&gt;&quot; &quot;&lt;/code&gt; になり、前述のトリガーになります</target>
        </trans-unit>
        <trans-unit id="9db6f61ce06c88ac7402efe003ec5c4f69fd8d53" translate="yes" xml:space="preserve">
          <source>If omitted, the maximum is the 4th.</source>
          <target state="translated">省略した場合は4番目が最大となります。</target>
        </trans-unit>
        <trans-unit id="8cf02da092076b8bc64e89cb4d51247518c5d4fc" translate="yes" xml:space="preserve">
          <source>If one attempts to print this value, then the overloaded operator &lt;code&gt;&quot;&quot;&lt;/code&gt; will be called, which will call &lt;code&gt;nomethod&lt;/code&gt; operator. The result of this operator will be stringified again, but this result is again of type &lt;code&gt;symbolic&lt;/code&gt; , which will lead to an infinite loop.</source>
          <target state="translated">この値を出力しようとすると、オーバーロードされた演算子 &lt;code&gt;&quot;&quot;&lt;/code&gt; が呼び出され、 &lt;code&gt;nomethod&lt;/code&gt; 演算子が呼び出されます。この演算子の結果は再び文字列化されますが、この結果もまた &lt;code&gt;symbolic&lt;/code&gt; 型であり、無限ループになります。</target>
        </trans-unit>
        <trans-unit id="d9a4c46026548a387f73d613ce2e2d57e8735167" translate="yes" xml:space="preserve">
          <source>If one attempts to print this value, then the overloaded operator &lt;code&gt;&quot;&quot;&lt;/code&gt; will be called, which will call &lt;code&gt;nomethod&lt;/code&gt; operator. The result of this operator will be stringified again, but this result is again of type &lt;code&gt;symbolic&lt;/code&gt;, which will lead to an infinite loop.</source>
          <target state="translated">この値を出力しようとすると、オーバーロードされた演算子 &lt;code&gt;&quot;&quot;&lt;/code&gt; が呼び出され、 &lt;code&gt;nomethod&lt;/code&gt; 演算子が呼び出されます。この演算子の結果は再び文字列化されますが、この結果も &lt;code&gt;symbolic&lt;/code&gt; 型であり、無限ループになります。</target>
        </trans-unit>
        <trans-unit id="e1adcb84ff8cdfac7bb94b3520eb9afd47061bae" translate="yes" xml:space="preserve">
          <source>If one can be sure that a particular program is a Perl script expecting filenames in @ARGV, the clever programmer can write something like this:</source>
          <target state="translated">特定のプログラムが @ARGV でのファイル名を期待する Perl スクリプトであることを確認できる場合、賢いプログラマーは次のようなものを書くことができます。</target>
        </trans-unit>
        <trans-unit id="b9a4785b4cb95e8fee7a09364380427defe0f204" translate="yes" xml:space="preserve">
          <source>If one is compiling Perl with the &lt;code&gt;-DPERL_GLOBAL_STRUCT&lt;/code&gt; the &lt;code&gt;dVAR&lt;/code&gt; definition is needed if the Perl global variables (see</source>
          <target state="translated">1がでPerlをコンパイルしている場合は &lt;code&gt;-DPERL_GLOBAL_STRUCT&lt;/code&gt; &lt;code&gt;dVAR&lt;/code&gt; 定義はPerlのグローバル変数の場合には必要とされている（参照</target>
        </trans-unit>
        <trans-unit id="e3e822ed5577ab52cc19452e08717fd8eeaeaafa" translate="yes" xml:space="preserve">
          <source>If one of the input arguments to the C function is the length of a string argument &lt;code&gt;NAME&lt;/code&gt; , one can substitute the name of the length-argument by &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; in the XSUB declaration. This argument must be omitted when the generated Perl function is called. E.g.,</source>
          <target state="translated">C関数への入力引数の1つが文字列引数 &lt;code&gt;NAME&lt;/code&gt; の長さである場合、XSUB宣言の &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; で長さ引数の名前を置き換えることができます。生成されたPerl関数が呼び出される場合、この引数は省略される必要があります。例えば、</target>
        </trans-unit>
        <trans-unit id="9ecfea0dc1bd53f365a6275977cf6664ba11e8c2" translate="yes" xml:space="preserve">
          <source>If one of the input arguments to the C function is the length of a string argument &lt;code&gt;NAME&lt;/code&gt;, one can substitute the name of the length-argument by &lt;code&gt;length(NAME)&lt;/code&gt; in the XSUB declaration. This argument must be omitted when the generated Perl function is called. E.g.,</source>
          <target state="translated">C関数への入力引数の1つが文字列引数 &lt;code&gt;NAME&lt;/code&gt; の長さである場合、XSUB宣言で &lt;code&gt;length(NAME)&lt;/code&gt; 引数の名前をlength（NAME）に置き換えることができます。生成されたPerl関数を呼び出すときは、この引数を省略する必要があります。例えば、</target>
        </trans-unit>
        <trans-unit id="80356b3107601264757c736090081f30d00dbd0c" translate="yes" xml:space="preserve">
          <source>If one of the values is the string &quot;FATAL&quot;, then all the warnings in that list will be considered fatal, just as with the &lt;b&gt;warnings&lt;/b&gt; pragma itself. Should you need to specify that some warnings are fatal, and others are merely enabled, you can pass the &lt;b&gt;warnings&lt;/b&gt; parameter twice:</source>
          <target state="translated">値の1つが文字列 &quot;FATAL&quot;である場合、&lt;b&gt;警告&lt;/b&gt;プラグマ自体と同様に、そのリストのすべての警告は致命的と見なされます。一部の警告が致命的であり、他の警告が単に有効であることを指定する必要がある場合は、&lt;b&gt;警告&lt;/b&gt;パラメーターを2回渡すことができます。</target>
        </trans-unit>
        <trans-unit id="58b3d6b8eb5c53fb4bf738ec026bd17996fb8d7b" translate="yes" xml:space="preserve">
          <source>If one wants to use pure Perl and to be compatible with Perl versions prior to 5.10, the general answer is to use &lt;code&gt;if-elsif-else&lt;/code&gt;:</source>
          <target state="translated">純粋なPerlを使用し、5.10より前のバージョンのPerlと互換性を持たせたい場合、一般的な答えは &lt;code&gt;if-elsif-else&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="4cca592d5a52d0591c75e10935311d781bcd5906" translate="yes" xml:space="preserve">
          <source>If only PATTERN is given, EXPR defaults to &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PATTERNのみが指定されている場合、EXPRのデフォルトは&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="12b8235b34f1e041150a031d0b9fbd780bdea304" translate="yes" xml:space="preserve">
          <source>If only PATTERN is given, EXPR defaults to &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">PATTERNのみが指定されている場合、EXPRのデフォルトは &lt;code&gt;$_&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b59bbcd014d4d50d7bf3779e9aa4f7e93178c1ba" translate="yes" xml:space="preserve">
          <source>If only a filename is available, the following approach may be used:</source>
          <target state="translated">ファイル名しかない場合は、以下のようなアプローチが考えられます。</target>
        </trans-unit>
        <trans-unit id="63b33dab707b9e6e2b41538d9f24bfd52b59d430" translate="yes" xml:space="preserve">
          <source>If opening the client side of a named pipe, then you can also set &lt;code&gt;$uFlags&lt;/code&gt; to include &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; along with one of the other &lt;code&gt;SECURITY_*&lt;/code&gt; constants to specify the security quality of service to be used.</source>
          <target state="translated">名前付きパイプのクライアント側を開く場合は、 &lt;code&gt;$uFlags&lt;/code&gt; を設定して、 &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; を他の &lt;code&gt;SECURITY_*&lt;/code&gt; 定数のいずれかとともに含めて、使用するサービスのセキュリティ品質を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="19f62f719bae656eebb99613fc3c3f5af6bf3f5f" translate="yes" xml:space="preserve">
          <source>If opening the client side of a named pipe, then you can also specify &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; along with one of the other &lt;code&gt;SECURITY_*&lt;/code&gt; constants to specify the security quality of service to be used.</source>
          <target state="translated">名前付きパイプのクライアント側を開く場合は、指定することもでき &lt;code&gt;SECURITY_SQOS_PRESENT&lt;/code&gt; を他の一つと一緒に &lt;code&gt;SECURITY_*&lt;/code&gt; 使用するサービスのセキュリティ品質を指定する定数。</target>
        </trans-unit>
        <trans-unit id="16392afc89510c0fc9dd7ff46ccb0d1b3e97fcef" translate="yes" xml:space="preserve">
          <source>If other charset support is needed, please file a bug report against CPAN.pm at rt.cpan.org and describe your needs. Maybe we can extend the support or maybe UTF-8 terminals become widely available.</source>
          <target state="translated">他の文字セットのサポートが必要な場合は、rt.cpan.org の CPAN.pm に対してバグレポートを提出して、必要性を説明してください。もしかしたら、サポートを拡張したり、UTF-8 端末が広く利用できるようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a07176206cda4e320bb3d161ccf541de7489aeb9" translate="yes" xml:space="preserve">
          <source>If our include file had contained #include directives, these would not have been processed by h2xs. There is no good solution to this right now.</source>
          <target state="translated">もしインクルードファイルに #include ディレクティブが含まれていたら、これらは h2xs によって処理されなかったでしょう。今のところ、これを解決する良い方法はありません。</target>
        </trans-unit>
        <trans-unit id="1342cd54e96ee75c7832a17e50d7545968334b8a" translate="yes" xml:space="preserve">
          <source>If parse errors are found in the TAP output, a note of this will be made in the summary report. To see all of the parse errors, set this argument to true:</source>
          <target state="translated">TAP 出力でパースエラーが見つかった場合、その旨がサマリーレポートに記載されます。すべてのパースエラーを表示するには、この引数を true に設定します。</target>
        </trans-unit>
        <trans-unit id="390961095f8040e196a232b583180a54cb19ea61" translate="yes" xml:space="preserve">
          <source>If passed a filehandle will write a copy of all parsed TAP to that handle.</source>
          <target state="translated">ファイルハンドルが渡されると、解析されたすべてのTAPのコピーがそのハンドルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="5a4f883097b033ba66596455cc092c01c5e9be39" translate="yes" xml:space="preserve">
          <source>If performance is an issue, and you don't care if the output is in the same case as the input, Use &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; to transform to the case most employed within the data. If the data are primarily UPPERCASE non-Latin1, then apply &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[a-z]/[A-Z]/&lt;/a&gt;&lt;/code&gt;, and then &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt;. If the data are primarily lowercase non Latin1 then apply &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[A-Z]/[a-z]/&lt;/a&gt;&lt;/code&gt; before sorting. If the data are primarily UPPERCASE and include Latin-1 characters then apply:</source>
          <target state="translated">パフォーマンスが問題で、出力が入力と同じケースであるかどうかを気にしない場合は、 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; を使用して、データ内で最も使用されるケースに変換します。データが主にLatin1以外の大文字である場合は、 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[a-z]/[A-Z]/&lt;/a&gt;&lt;/code&gt; を適用してから、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; を適用します。データが主にLatin1以外の小文字の場合は、並べ替えの前に &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[A-Z]/[a-z]/&lt;/a&gt;&lt;/code&gt; 適用します。データが主に大文字で、Latin-1文字が含まれている場合は、次のように適用します。</target>
        </trans-unit>
        <trans-unit id="9462aa1810ea1a2dacbf899e5d319c5498156bac" translate="yes" xml:space="preserve">
          <source>If performance is an issue, and you don't care if the output is in the same case as the input, Use &lt;code&gt;tr///&lt;/code&gt; to transform to the case most employed within the data. If the data are primarily UPPERCASE non-Latin1, then apply &lt;code&gt;tr/[a-z]/[A-Z]/&lt;/code&gt;, and then &lt;code&gt;sort()&lt;/code&gt;. If the data are primarily lowercase non Latin1 then apply &lt;code&gt;tr/[A-Z]/[a-z]/&lt;/code&gt; before sorting. If the data are primarily UPPERCASE and include Latin-1 characters then apply:</source>
          <target state="translated">パフォーマンスが問題であり、出力が入力と同じケースであるかどうかを気にしない場合は、 &lt;code&gt;tr///&lt;/code&gt; を使用して、データ内で最もよく使用されるケースに変換します。データが主に大文字の非Latin1である場合は、 &lt;code&gt;tr/[a-z]/[A-Z]/&lt;/code&gt; を適用してから、 &lt;code&gt;sort()&lt;/code&gt; を適用します。データが主にLatin1以外の小文字である場合は、並べ替える前に &lt;code&gt;tr/[A-Z]/[a-z]/&lt;/code&gt; 適用します。データが主に大文字で、Latin-1文字が含まれている場合は、以下を適用します。</target>
        </trans-unit>
        <trans-unit id="751a8c8edea51ef360f8293f82ac9e36b697517a" translate="yes" xml:space="preserve">
          <source>If perl has been configured to not have the current directory in &lt;a href=&quot;perlvar#%40INC&quot;&gt;&lt;code&gt;@INC&lt;/code&gt;&lt;/a&gt; by default, this variable can be set to &lt;code&gt;&quot;1&quot;&lt;/code&gt; to reinstate it. It's primarily intended for use while building and testing modules that have not been updated to deal with &quot;.&quot; not being in &lt;code&gt;@INC&lt;/code&gt; and should not be set in the environment for day-to-day use.</source>
          <target state="translated">デフォルトでperlが&lt;a href=&quot;perlvar#%40INC&quot;&gt; &lt;code&gt;@INC&lt;/code&gt; に&lt;/a&gt;現在のディレクトリを持たないように設定されている場合、この変数を &lt;code&gt;&quot;1&quot;&lt;/code&gt; に設定して元に戻すことができます。これは主に、「。」を処理するように更新されていないモジュールを構築およびテストする際に使用することを目的としています。 &lt;code&gt;@INC&lt;/code&gt; に存在しないため、日常的に使用する環境に設定しないでください。</target>
        </trans-unit>
        <trans-unit id="ab79de5389c6af407dc202c7877566f66fb7264b" translate="yes" xml:space="preserve">
          <source>If perl has not yet been installed then PERL_SRC can be defined on the command line as shown in the previous section.</source>
          <target state="translated">perlがまだインストールされていない場合は、前のセクションで示したようにコマンドラインでPERL_SRCを定義することができます。</target>
        </trans-unit>
        <trans-unit id="527ed5a2bdcdb5849d3d992698d64bca35b1da28" translate="yes" xml:space="preserve">
          <source>If perl is invoked using the &lt;b&gt;-e&lt;/b&gt; option or the perl script is read from &lt;code&gt;STDIN&lt;/code&gt; then FindBin sets both &lt;code&gt;$Bin&lt;/code&gt; and &lt;code&gt;$RealBin&lt;/code&gt; to the current directory.</source>
          <target state="translated">&lt;b&gt;-e&lt;/b&gt;オプションを使用してperlが呼び出された場合、またはperlスクリプトが &lt;code&gt;STDIN&lt;/code&gt; から読み取られた場合、FindBinは &lt;code&gt;$Bin&lt;/code&gt; と &lt;code&gt;$RealBin&lt;/code&gt; を現在のディレクトリに設定します。</target>
        </trans-unit>
        <trans-unit id="c28bb9f5b57ae9540614c1c058beb6e3302cae11" translate="yes" xml:space="preserve">
          <source>If perl was installed correctly and your shadow library was written properly, the &lt;code&gt;getpw*()&lt;/code&gt; functions described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; should in theory provide (read-only) access to entries in the shadow password file. To change the file, make a new shadow password file (the format varies from system to system--see</source>
          <target state="translated">perlが正しくインストールされ、シャドウライブラリが適切に記述されている&lt;a href=&quot;perlfunc&quot;&gt;場合&lt;/a&gt;、perlfuncで説明されている &lt;code&gt;getpw*()&lt;/code&gt; 関数は、理論上、シャドウパスワードファイルのエントリへの（読み取り専用）アクセスを提供します。ファイルを変更するには、新しいシャドウパスワードファイルを作成します（形式はシステムによって異なります。「</target>
        </trans-unit>
        <trans-unit id="eba76bf8bea1221ff81d36866fefb38b38f1c83e" translate="yes" xml:space="preserve">
          <source>If perl was installed correctly and your shadow library was written properly, the &lt;code&gt;getpw*()&lt;/code&gt; functions described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; should in theory provide (read-only) access to entries in the shadow password file. To change the file, make a new shadow password file (the format varies from system to system--see &lt;a href=&quot;http://man.he.net/man1/passwd&quot;&gt;passwd(1)&lt;/a&gt; for specifics) and use &lt;code&gt;pwd_mkdb(8)&lt;/code&gt; to install it (see &lt;a href=&quot;http://man.he.net/man8/pwd_mkdb&quot;&gt;pwd_mkdb(8)&lt;/a&gt; for more details).</source>
          <target state="translated">perlが正しくインストールされ、シャドウライブラリが正しく記述されている&lt;a href=&quot;perlfunc&quot;&gt;場合&lt;/a&gt;、perlfuncで説明されている &lt;code&gt;getpw*()&lt;/code&gt; 関数は、理論上、シャドウパスワードファイルのエントリへの（読み取り専用）アクセスを提供するはずです。ファイルを変更するには、新しいシャドウパスワードファイルを作成し（形式はシステムごとに異なります。詳細については&lt;a href=&quot;http://man.he.net/man1/passwd&quot;&gt;passwd（1）&lt;/a&gt;を参照）、 &lt;code&gt;pwd_mkdb(8)&lt;/code&gt; を使用してインストールします（詳細については&lt;a href=&quot;http://man.he.net/man8/pwd_mkdb&quot;&gt;pwd_mkdb（8）&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="4aa77499616bd2f38224ed594fc316a580948f20" translate="yes" xml:space="preserve">
          <source>If possible, move() will simply rename the file. Otherwise, it copies the file to the new location and deletes the original. If an error occurs during this copy-and-delete process, you may be left with a (possibly partial) copy of the file under the destination name.</source>
          <target state="translated">可能であれば、move()は単にファイルの名前を変更します。そうでなければ、ファイルを新しい場所にコピーし、元のファイルを削除します。このコピーと削除の処理中にエラーが発生した場合、コピー先の名前の下にファイルの(部分的な)コピーが残ってしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="2306ef44bf2f2a60c7ac6a896505074bcea6c96c" translate="yes" xml:space="preserve">
          <source>If possible, register the module with CPAN. Follow the instructions and links on:</source>
          <target state="translated">可能であれば、モジュールをCPANに登録します。の指示とリンクに従ってください。</target>
        </trans-unit>
        <trans-unit id="821e3f8f257e241afb18f9d12ceda656792b21cb" translate="yes" xml:space="preserve">
          <source>If possible, register the module with CPAN. You should include details of its location in your announcement.</source>
          <target state="translated">可能であれば、モジュールをCPANに登録してください。その場所の詳細をアナウンスに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="00df1bad6fa3810b7a0fb796a7103c7f28a05f8c" translate="yes" xml:space="preserve">
          <source>If possible, this form should be used to prevent possible race conditions.</source>
          <target state="translated">可能であれば、このフォームを使用して、可能性のあるレースコンディションを防ぐ。</target>
        </trans-unit>
        <trans-unit id="34d4da8aa87987ec9ceda1c43801e78b64cdc28a" translate="yes" xml:space="preserve">
          <source>If present on a regex, &lt;code&gt;&quot;#&quot;&lt;/code&gt; comments will be handled differently by the tokenizer in some cases.</source>
          <target state="translated">正規表現に存在する場合、 &lt;code&gt;&quot;#&quot;&lt;/code&gt; コメントは、場合によってはトークナイザによって異なる方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="fcb106d01e2834098b09ad25220c5df2510aa768" translate="yes" xml:space="preserve">
          <source>If present, $hints should be a reference to a hash, where the following keys are recognised:</source>
          <target state="translated">存在する場合、$hintsはハッシュへの参照でなければならず、以下のキーが認識されます。</target>
        </trans-unit>
        <trans-unit id="768b78e920d55b41dde42ac4d330e515e86f1cd7" translate="yes" xml:space="preserve">
          <source>If present, each callback corresponding to a given result type will be called with the result as the argument if the &lt;code&gt;run&lt;/code&gt; method is used:</source>
          <target state="translated">存在する場合、 &lt;code&gt;run&lt;/code&gt; メソッドが使用されている場合、特定の結果タイプに対応する各コールバックは、結果を引数として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="80e76146570d6b35c93035dd97f6090cb9b7cbba" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store all files and directories unlinked during the call. If nothing is unlinked, the array will be empty.</source>
          <target state="translated">存在する場合は、スカラへの参照でなければなりません。このスカラは配列を参照するために作られ、呼び出し中にリンクされていないすべてのファイルとディレクトリを格納するために使用されます。何もリンクが解除されていない場合は、配列は空になります。</target>
        </trans-unit>
        <trans-unit id="865f6f3c95c9ee0c681ecdf2cdcadf01272955ae" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store any errors that are encountered. See the &lt;a href=&quot;#ERROR-HANDLING&quot;&gt;&quot;ERROR HANDLING&quot;&lt;/a&gt; section for more information.</source>
          <target state="translated">存在する場合は、スカラーへの参照である必要があります。このスカラーは、発生したエラーを格納するために使用される配列を参照するために作成されます。詳細については、&lt;a href=&quot;#ERROR-HANDLING&quot;&gt;「エラー処理」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="eaf6326ff6faceb306eebc039298d3cef21ae0f2" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store any errors that are encountered. See the &lt;a href=&quot;#ERROR-HANDLING&quot;&gt;ERROR HANDLING&lt;/a&gt; section for more information.</source>
          <target state="translated">存在する場合は、スカラーへの参照にする必要があります。このスカラーは、発生したエラーを格納するために使用される配列を参照するように作成されます。詳細については、「&lt;a href=&quot;#ERROR-HANDLING&quot;&gt;エラー処理&lt;/a&gt;」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="28236ec2fcbd77071db6f4df51ebe2ad1353410f" translate="yes" xml:space="preserve">
          <source>If present, will cause &lt;code&gt;make_path&lt;/code&gt; to print the name of each directory as it is created. By default nothing is printed.</source>
          <target state="translated">存在する場合、 &lt;code&gt;make_path&lt;/code&gt; は、作成時に各ディレクトリの名前を出力します。デフォルトでは何も印刷されません。</target>
        </trans-unit>
        <trans-unit id="ba616b58ac8bd248e0e92e90224a9f0e82a7126d" translate="yes" xml:space="preserve">
          <source>If present, will cause &lt;code&gt;remove_tree&lt;/code&gt; to print the name of each file as it is unlinked. By default nothing is printed.</source>
          <target state="translated">存在する場合、 &lt;code&gt;remove_tree&lt;/code&gt; はリンク解除された各ファイルの名前を出力します。デフォルトでは何も印刷されません。</target>
        </trans-unit>
        <trans-unit id="da38e80a5de666bdd4124bbd72eac17c8b7acaf5" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by &lt;code&gt;$owner&lt;/code&gt; . If the value is numeric, it will be interpreted as a uid, otherwise as username is assumed. An error will be issued if the username cannot be mapped to a uid, or the uid does not exist, or the process lacks the privileges to change ownership.</source>
          <target state="translated">存在する場合、作成されたディレクトリはすべて &lt;code&gt;$owner&lt;/code&gt; によって所有されます。値が数値の場合、それはuidとして解釈されます。それ以外の場合は、ユーザー名と見なされます。ユーザー名をuidにマップできない場合、またはuidが存在しない場合、またはプロセスが所有権を変更する特権を持たない場合は、エラーが発行されます。</target>
        </trans-unit>
        <trans-unit id="0ff53c547d7a4dd3bf846157fd728900f2d937f3" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by &lt;code&gt;$owner&lt;/code&gt;. If the value is numeric, it will be interpreted as a uid; otherwise a username is assumed. An error will be issued if the username cannot be mapped to a uid, the uid does not exist or the process lacks the privileges to change ownership.</source>
          <target state="translated">存在する場合、作成されたディレクトリはすべて &lt;code&gt;$owner&lt;/code&gt; によって所有されます。値が数値の場合、uidとして解釈されます。それ以外の場合は、ユーザー名が想定されます。ユーザー名をuidにマップできない場合、uidが存在しない場合、またはプロセスに所有権を変更する権限がない場合は、エラーが発行されます。</target>
        </trans-unit>
        <trans-unit id="c6bc6a6c714ec1098b00e8f4665bf29765d41191" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by the group &lt;code&gt;$group&lt;/code&gt; . If the value is numeric, it will be interpreted as a gid, otherwise as group name is assumed. An error will be issued if the group name cannot be mapped to a gid, or the gid does not exist, or the process lacks the privileges to change group ownership.</source>
          <target state="translated">存在する場合、作成されたディレクトリはグループ &lt;code&gt;$group&lt;/code&gt; によって所有されます。値が数値の場合はgidとして解釈され、それ以外の場合はグループ名と見なされます。グループ名をgidにマップできない場合、またはgidが存在しない場合、またはプロセスにグループの所有権を変更する権限がない場合は、エラーが発行されます。</target>
        </trans-unit>
        <trans-unit id="5ebd22cc8259df10471aba5e6db2f4331d3b55f7" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by the group &lt;code&gt;$group&lt;/code&gt;. If the value is numeric, it will be interpreted as a gid; otherwise a group name is assumed. An error will be issued if the group name cannot be mapped to a gid, the gid does not exist or the process lacks the privileges to change group ownership.</source>
          <target state="translated">存在する場合、作成されたディレクトリはすべてグループ &lt;code&gt;$group&lt;/code&gt; によって所有されます。値が数値の場合、gidとして解釈されます。それ以外の場合は、グループ名が想定されます。グループ名をgidにマップできない場合、gidが存在しない場合、またはプロセスにグループの所有権を変更する権限がない場合は、エラーが発行されます。</target>
        </trans-unit>
        <trans-unit id="a365bb62991d043cada86ad3beb15687e9b5977b" translate="yes" xml:space="preserve">
          <source>If program usage has been explicitly requested by the user, it is often desirable to exit with a status of 1 (as opposed to 0) after issuing the user-requested usage message. It is also desirable to give a more verbose description of program usage in this case.</source>
          <target state="translated">プログラムの使用法がユーザによって明示的に要求されている場合、ユーザが要求された使用法メッセージを発行した後、(0ではなく)1のステータスで終了することが望ましい場合が多い。また、この場合、プログラムの使用状況をより詳細に説明することが望ましい。</target>
        </trans-unit>
        <trans-unit id="8bf641be539c33c01972d9eed772b4572f957d25" translate="yes" xml:space="preserve">
          <source>If provided, this argument will place the socket into listening mode. New connections can then be accepted using the &lt;a href=&quot;IO::Socket#accept&quot;&gt;&quot;accept&quot; in IO::Socket&lt;/a&gt; method. The value given is used as the &lt;code&gt;listen(2)&lt;/code&gt; queue size.</source>
          <target state="translated">指定した場合、この引数はソケットをリスニングモードにします。その後&lt;a href=&quot;IO::Socket#accept&quot;&gt;、IO :: Socket&lt;/a&gt;メソッドの「accept」を使用して、新しい接続を受け入れることができます。指定された値は、 &lt;code&gt;listen(2)&lt;/code&gt; キューサイズとして使用されます。</target>
        </trans-unit>
        <trans-unit id="ff3608d191706961b1f05c1c4d43ca10631cdf8b" translate="yes" xml:space="preserve">
          <source>If run on any operating system other than Windows, this will import the functions &lt;code&gt;setlocale&lt;/code&gt; and &lt;code&gt;LC_ALL&lt;/code&gt; from &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;. On Windows it does nothing.</source>
          <target state="translated">Windows以外のオペレーティングシステムで実行すると、&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;から関数 &lt;code&gt;setlocale&lt;/code&gt; および &lt;code&gt;LC_ALL&lt;/code&gt; がインポートされます。Windowsでは何もしません。</target>
        </trans-unit>
        <trans-unit id="9d9d2ff0e902fe5020fe3d38bdc23ea71c9ea208" translate="yes" xml:space="preserve">
          <source>If run with no arguments, filters standard input to standard output.</source>
          <target state="translated">引数なしで実行すると、標準入力を標準出力にフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="53f4c878607755d2bdfa2564e4393c026538b21e" translate="yes" xml:space="preserve">
          <source>If running under taint mode, and if $ENV{TMPDIR} is tainted, it is not used.</source>
          <target state="translated">taintモードで実行していて、$ENV{TMPDIR}が汚染されている場合は使用されません。</target>
        </trans-unit>
        <trans-unit id="c028c3067c9e1833a7b2f721beaf502c1d3b87c3" translate="yes" xml:space="preserve">
          <source>If running under taint mode, and if the environment variables are tainted, they are not used.</source>
          <target state="translated">テイントモードで実行していて、環境変数が汚染されている場合は使用されません。</target>
        </trans-unit>
        <trans-unit id="bc42709752d603d6e86a31cea878bd9ef78c5a40" translate="yes" xml:space="preserve">
          <source>If safety matters to you (and why else would you be using the Opcode module?) then you should not rely on the definition of this, or indeed any other, optag!</source>
          <target state="translated">安全性が重要であれば(他になぜオプコードモジュールを使用するのか?</target>
        </trans-unit>
        <trans-unit id="84fe2228be06f7c485981c30717e0cd96c85c324" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;formatter&lt;/code&gt; must be an object that is capable of formatting the TAP output. See &lt;a href=&quot;TAP::Formatter::Console&quot;&gt;TAP::Formatter::Console&lt;/a&gt; for an example.</source>
          <target state="translated">set &lt;code&gt;formatter&lt;/code&gt; は、TAP出力をフォーマットできるオブジェクトでなければなりません。例については、&lt;a href=&quot;TAP::Formatter::Console&quot;&gt;TAP :: Formatter :: Console&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c49a3b26a25358ee584c0e87edb350360c053486" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;formatter&lt;/code&gt; must be an object that is capable of formatting the TAP output. See &lt;a href=&quot;formatter/console&quot;&gt;TAP::Formatter::Console&lt;/a&gt; for an example.</source>
          <target state="translated">&lt;code&gt;formatter&lt;/code&gt; が設定されている場合、TAP出力をフォーマットできるオブジェクトである必要があります。例については、&lt;a href=&quot;formatter/console&quot;&gt;TAP :: Formatter :: Console&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0d7e12ada666ebe5ce88788573ab7d416ccee0e3" translate="yes" xml:space="preserve">
          <source>If set and Encode is not available, silently fall back to non-UTF-8 mode without complaining to standard error. This environment variable is set during Perl core builds, which build Encode after podlators. Encode is expected to not (yet) be available in that case.</source>
          <target state="translated">設定されていてEncodeが利用できない場合、標準エラーに文句を言わずに黙ってUTF-8以外のモードにフォールバックします。この環境変数は Perl のコアビルド時に設定され、podlator の後に Encode をビルドします。その場合、Encodeは(まだ)利用できないと予想されます。</target>
        </trans-unit>
        <trans-unit id="cc6406e3d3c8ec686d43e0bd0630b45054571335" translate="yes" xml:space="preserve">
          <source>If set forward, the details of the missing tests are filled in as 'unknown'. if set backward, the details of the intervening tests are deleted. You can erase history if you really want to.</source>
          <target state="translated">前方に設定した場合、欠落しているテストの詳細は「不明」として記入されます。本当にそうしたいのであれば、履歴を消去することができます。</target>
        </trans-unit>
        <trans-unit id="94a6b6735d1cf67d97faf5afa93385c976f8d9ca" translate="yes" xml:space="preserve">
          <source>If set to 'none', no man pages will be installed.</source>
          <target state="translated">none」に設定されている場合、manページはインストールされません。</target>
        </trans-unit>
        <trans-unit id="35193d3a52f1a67d3457cb0804a53caff3b762a2" translate="yes" xml:space="preserve">
          <source>If set to 0, the contents of the output parameter of the &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method will be overwritten by the uncompressed data.</source>
          <target state="translated">0に設定すると、 &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; メソッドの出力パラメーターの内容は、非圧縮データによって上書きされます。</target>
        </trans-unit>
        <trans-unit id="0eba3cfab3094093ee2a0a7a3f1a02110ff8208f" translate="yes" xml:space="preserve">
          <source>If set to 0, the contents of the output parameter of the &lt;code&gt;read&lt;/code&gt; method will be overwritten by the uncompressed data.</source>
          <target state="translated">0に設定すると、 &lt;code&gt;read&lt;/code&gt; メソッドの出力パラメーターの内容が非圧縮データで上書きされます。</target>
        </trans-unit>
        <trans-unit id="63134c061d53f609b58fe4db77f806b2b217214c" translate="yes" xml:space="preserve">
          <source>If set to 1, all uncompressed data will be appended to the output parameter of the &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">1に設定すると、すべての非圧縮データが &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; メソッドの出力パラメーターに追加されます。</target>
        </trans-unit>
        <trans-unit id="b9f5b0a88e94e90aa98c8ce846cf8f2a8299b4e1" translate="yes" xml:space="preserve">
          <source>If set to 1, all uncompressed data will be appended to the output parameter of the &lt;code&gt;read&lt;/code&gt; method.</source>
          <target state="translated">1に設定すると、圧縮されていないすべてのデータが &lt;code&gt;read&lt;/code&gt; メソッドの出力パラメーターに追加されます。</target>
        </trans-unit>
        <trans-unit id="a99badbf73893e25506e2b45aeb306043f0421e4" translate="yes" xml:space="preserve">
          <source>If set to a true value instruct &lt;code&gt;TAP::Parser&lt;/code&gt; to ignore exit and wait status from test scripts.</source>
          <target state="translated">true値に設定されている場合、テストスクリプトからの終了ステータスと待機ステータスを無視するように &lt;code&gt;TAP::Parser&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="7addd0cdb6e060b7f425d641cdc5802f63dc6646" translate="yes" xml:space="preserve">
          <source>If set to a true value then MakeMaker's prompt function will always return the default without waiting for user input.</source>
          <target state="translated">true に設定されている場合、MakeMaker のプロンプト関数は、ユーザーの入力を待たずに常にデフォルト値を返します。</target>
        </trans-unit>
        <trans-unit id="37acce4270c3ae4d059b2f5d5497684bcefbd070" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::PlainText will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to true.</source>
          <target state="translated">trueに設定すると、Pod::PlainTextは各文が2つのスペースで終わると仮定し、その間隔を維持しようとします。falseに設定すると、非ververbatim段落の連続した空白はすべて1つのスペースに圧縮されます。デフォルトは true です。</target>
        </trans-unit>
        <trans-unit id="9fb9b386eec98159e51954bb5d28974ecee8a0eb" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::Text will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to false.</source>
          <target state="translated">trueに設定すると、Pod::Textは各文が2つのスペースで終わると仮定し、その間隔を維持しようとします。falseに設定すると、非ververbatim段落の連続した空白はすべて1つのスペースに圧縮されます。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="a1e0bdf314190ede062d43bfa363f6d6ba57f992" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::Text will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to true.</source>
          <target state="translated">trueに設定すると、Pod::Textは各文が2つのスペースで終わると仮定し、その間隔を維持しようとします。falseに設定すると、非ververbatim段落の連続した空白はすべて1つのスペースに圧縮されます。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="c7ea67874e15073f2f8a8748dd116175b232517b" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=head1&lt;/code&gt; heading. If set to false (the default), no blank line is printed after &lt;code&gt;=head1&lt;/code&gt; , although one is still printed after &lt;code&gt;=head2&lt;/code&gt; . This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="translated">true値に設定すると、 &lt;code&gt;=head1&lt;/code&gt; 見出しの後に空白行が印刷されます。false（デフォルト）に設定した場合、 &lt;code&gt;=head1&lt;/code&gt; の後に空白行は出力されませんが、 &lt;code&gt;=head2&lt;/code&gt; の後には空白行が出力されます。これは、マニュアルページで想定されるフォーマットであるため、デフォルトです。任意のテキストドキュメントをフォーマットする場合、これをtrueに設定すると、出力がより快適になる場合があります。</target>
        </trans-unit>
        <trans-unit id="12cadcd0631c167f67b19339e2f3ebc608babfe8" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=head1&lt;/code&gt; heading. If set to false (the default), no blank line is printed after &lt;code&gt;=head1&lt;/code&gt;, although one is still printed after &lt;code&gt;=head2&lt;/code&gt;. This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="translated">true値に設定すると、 &lt;code&gt;=head1&lt;/code&gt; 見出しの後に空白行が出力されます。false（デフォルト）に設定すると、 &lt;code&gt;=head1&lt;/code&gt; の後に空白行は出力されませんが、 &lt;code&gt;=head2&lt;/code&gt; の後には空白行が出力されます。これは、マニュアルページで予想されるフォーマットであるため、デフォルトです。任意のテキストドキュメントをフォーマットしている場合、これをtrueに設定すると、より快適な出力が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="79c7d693600594b39fe949ae434a7a5fc8a792dc" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=headN&lt;/code&gt; headings. If set to false (the default), no blank line is printed after &lt;code&gt;=headN&lt;/code&gt; . This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="translated">true値に設定すると、 &lt;code&gt;=headN&lt;/code&gt; 見出しの後に空白行が出力されます。false（デフォルト）に設定した場合、 &lt;code&gt;=headN&lt;/code&gt; の後に空白行は出力されません。これは、マニュアルページで想定されるフォーマットであるため、デフォルトです。任意のテキストドキュメントをフォーマットする場合、これをtrueに設定すると、出力がより快適になる場合があります。</target>
        </trans-unit>
        <trans-unit id="3fb0153c7c54ce2bccc40f5b7e2d5aff19532ce7" translate="yes" xml:space="preserve">
          <source>If set to a true value, indicates to the debugger that the code being debugged uses threads.</source>
          <target state="translated">true に設定すると、デバッグされるコードがスレッドを使用していることをデバッガーに示します。</target>
        </trans-unit>
        <trans-unit id="e75bb2ef91a1a8c8b0ee4cbc07e5ef237213911f" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; , &lt;code&gt;failures&lt;/code&gt; , or &lt;code&gt;comments&lt;/code&gt; .</source>
          <target state="translated">true値に設定すると、ディレクティブを含むテスト結果のみが表示されます。これにより、 &lt;code&gt;verbose&lt;/code&gt; 、 &lt;code&gt;failures&lt;/code&gt; 、 &lt;code&gt;comments&lt;/code&gt; などの他の設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="6403db7bde854649adecbe2fe72bc17d3ded2ac7" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; or &lt;code&gt;failures&lt;/code&gt; .</source>
          <target state="translated">true値に設定すると、ディレクティブを含むテスト結果のみが表示されます。これにより、 &lt;code&gt;verbose&lt;/code&gt; や &lt;code&gt;failures&lt;/code&gt; などの他の設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="5dc7bcb42a07b398704f1044000bc451673cf348" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; or &lt;code&gt;failures&lt;/code&gt;.</source>
          <target state="translated">true値に設定すると、ディレクティブを含むテスト結果のみが表示されます。これは、 &lt;code&gt;verbose&lt;/code&gt; や &lt;code&gt;failures&lt;/code&gt; などの他の設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="56370371763a8fe8f684fb9af4f85fc5b478e2a6" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt;, &lt;code&gt;failures&lt;/code&gt;, or &lt;code&gt;comments&lt;/code&gt;.</source>
          <target state="translated">true値に設定すると、ディレクティブを含むテスト結果のみが表示されます。これは、 &lt;code&gt;verbose&lt;/code&gt; 、 &lt;code&gt;failures&lt;/code&gt; 、 &lt;code&gt;comments&lt;/code&gt; などの他の設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="ace0eebb3ad1da3562cf6ba2f4eb062020ce0829" translate="yes" xml:space="preserve">
          <source>If set to a true value, selects an alternate output format that, among other things, uses a different heading style and marks &lt;code&gt;=item&lt;/code&gt; entries with a colon in the left margin. Defaults to false.</source>
          <target state="translated">true値に設定した場合、特に、異なる見出しスタイルを使用し、左マージンにコロンを付けて &lt;code&gt;=item&lt;/code&gt; エントリーをマークする代替出力フォーマットを選択します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="341f05ae650241bc98a8aa05ba502f05572aa8ee" translate="yes" xml:space="preserve">
          <source>If set to a true value, source entries will be converted into utf8-strings (available in Perl 5.6.1 or later). This feature needs the &lt;b&gt;Encode&lt;/b&gt; or &lt;b&gt;Encode::compat&lt;/b&gt; module.</source>
          <target state="translated">true値に設定すると、ソースエントリはutf8-strings（Perl 5.6.1以降で使用可能）に変換されます。この機能には、&lt;b&gt;Encode&lt;/b&gt;または&lt;b&gt;Encode :: compat&lt;/b&gt;モジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="e52de704a5928c9a6d768f4b0d7d8f6e786b6b18" translate="yes" xml:space="preserve">
          <source>If set to a true value, the non-POD parts of the input file will be included in the output. Useful for viewing code documented with POD blocks with the POD rendered and the code left intact.</source>
          <target state="translated">真の値に設定すると、入力ファイルのPODではない部分が出力に含まれます。PODがレンダリングされ、コードがそのままの状態でPODブロックで文書化されたコードを表示するのに便利です。</target>
        </trans-unit>
        <trans-unit id="77ffaa19bbb496da1b7f2a485ed0c35990cc9fa8" translate="yes" xml:space="preserve">
          <source>If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel. Default is 0 (regardless of whether the channel is really buffered by the system or not; &lt;code&gt;$|&lt;/code&gt; tells you only whether you've asked Perl explicitly to flush after each write). STDOUT will typically be line buffered if output is to the terminal and block buffered otherwise. Setting this variable is useful primarily when you are outputting to a pipe or socket, such as when you are running a Perl program under &lt;b&gt;rsh&lt;/b&gt; and want to see the output as it's happening. This has no effect on input buffering. See &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt; for that. See &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt; on how to select the output channel. See also &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">0以外に設定すると、現在選択されている出力チャネルで書き込みまたは印刷が行われるたびに、すぐにフラッシュされます。デフォルトは0です（チャネルがシステムによって実際にバッファーされているかどうかに関係なく、 &lt;code&gt;$|&lt;/code&gt; は、書き込みのたびにPerlに明示的にフラッシュするように要求したかどうかのみを示します）。 STDOUTは通常、出力が端末への出力の場合はラインバッファリングされ、それ以外の場合はブロックバッファリングされます。この変数を設定することは、&lt;b&gt;rshで&lt;/b&gt; Perlプログラムを実行していて、それが起こっているときに出力を確認したい場合など、主にパイプまたはソケットに出力する場合に役立ちます。これは入力バッファリングには影響しません。&lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;を参照してください。出力チャネルの選択方法については、selectを参照&lt;a href=&quot;functions/select&quot;&gt;し&lt;/a&gt;てください。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handle&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="b32ab50f4a2e4d52971c50b3ce21204c6ea713f8" translate="yes" xml:space="preserve">
          <source>If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel. Default is 0 (regardless of whether the channel is really buffered by the system or not; &lt;code&gt;$|&lt;/code&gt; tells you only whether you've asked Perl explicitly to flush after each write). STDOUT will typically be line buffered if output is to the terminal and block buffered otherwise. Setting this variable is useful primarily when you are outputting to a pipe or socket, such as when you are running a Perl program under &lt;b&gt;rsh&lt;/b&gt; and want to see the output as it's happening. This has no effect on input buffering. See &lt;a href=&quot;perlfunc#getc&quot;&gt;&quot;getc&quot; in perlfunc&lt;/a&gt; for that. See &lt;a href=&quot;perlfunc#select&quot;&gt;&quot;select&quot; in perlfunc&lt;/a&gt; on how to select the output channel. See also &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ゼロ以外に設定すると、現在選択されている出力チャネルでの書き込みまたは印刷のたびに、すぐにフラッシュが強制されます。デフォルトは0です（チャネルが実際にシステムによってバッファリングされているかどうかに関係なく、 &lt;code&gt;$|&lt;/code&gt; は、各書き込み後にPerlに明示的にフラッシュするように要求したかどうかのみを示します）。 STDOUTは通常、出力が端末への場合はラインバッファリングされ、それ以外の場合はブロックバッファリングされます。この変数の設定は、主にパイプまたはソケットに出力する場合に役立ちます。たとえば、&lt;b&gt;rshで&lt;/b&gt;Perlプログラムを実行していて、出力が発生するのを確認したい場合などです。これは入力バッファリングには影響しません。そのためには&lt;a href=&quot;perlfunc#getc&quot;&gt;、perlfuncの「getc」を&lt;/a&gt;参照してください。出力チャネルの選択方法について&lt;a href=&quot;perlfunc#select&quot;&gt;は、perlfuncの「select」を&lt;/a&gt;参照してください。&lt;a href=&quot;IO::Handle&quot;&gt;IO ::&lt;/a&gt;も参照してください。扱う。</target>
        </trans-unit>
        <trans-unit id="615ff3b3ad3b33807d03afb15df6a2d1917cfce6" translate="yes" xml:space="preserve">
          <source>If set to the name of a file or device when Perl is run with the &lt;a href=&quot;#-Dletters&quot;&gt;-Di&lt;/a&gt; command-line switch, the logging of certain operations of the PerlIO subsystem will be redirected to the specified file rather than going to stderr, which is the default. The file is opened in append mode. Typical uses are in Unix:</source>
          <target state="translated">Perlが&lt;a href=&quot;#-Dletters&quot;&gt;-Di&lt;/a&gt;コマンドラインスイッチで実行されているときにファイルまたはデバイスの名前に設定されている場合、PerlIOサブシステムの特定の操作のログは、デフォルトであるstderrに移動するのではなく、指定されたファイルにリダイレクトされます。ファイルは追加モードで開かれます。典型的な使用法はUnixです：</target>
        </trans-unit>
        <trans-unit id="910076b95e48e767183ba95d8bfd82a29fd1f4b7" translate="yes" xml:space="preserve">
          <source>If set to the name of a file or device, certain operations of PerlIO subsystem will be logged to that file, which is opened in append mode. Typical uses are in Unix:</source>
          <target state="translated">ファイルまたはデバイスの名前に設定されている場合、PerlIO サブシステムの特定の操作は、そのファイルに記録されます。典型的な用途は、Unix での使用です。</target>
        </trans-unit>
        <trans-unit id="a2a487ec4b2cdae05d408b6e8c6a9dd6b1beda15" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;Params::Check&quot;&gt;Params::Check&lt;/a&gt; will &lt;code&gt;croak&lt;/code&gt; when an error during template validation occurs, rather than return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">trueに設定すると、テンプレートの検証中にエラーが発生したときに、 &lt;code&gt;false&lt;/code&gt; を返すのではなく、&lt;a href=&quot;Params::Check&quot;&gt;Params :: Check&lt;/a&gt;が &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="39e47711b0a2673f5f59abca021e0aa968949985" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;Params::Check&quot;&gt;Params::Check&lt;/a&gt; will no longer convert all keys from the user input to lowercase, but instead expect them to be in the case the template provided. This is useful when you want to use similar keys with different casing in your templates.</source>
          <target state="translated">trueに設定すると、&lt;a href=&quot;Params::Check&quot;&gt;Params :: Check&lt;/a&gt;はすべてのキーをユーザー入力から小文字に変換しなくなりますが、代わりに、提供されたテンプレートの場合にそれらが変換されることを期待します。これは、テンプレートで大文字と小文字が異なる同様のキーを使用する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2f253f67365056571734a093e4d2ab45914323e0" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;Params::Check&quot;&gt;Params::Check&lt;/a&gt; will require all values passed to be &lt;code&gt;defined&lt;/code&gt;. If you wish to enable this on a 'per key' basis, use the template option &lt;code&gt;defined&lt;/code&gt; instead.</source>
          <target state="translated">trueに設定すると、&lt;a href=&quot;Params::Check&quot;&gt;Params :: Checkで&lt;/a&gt;渡されたすべての値を &lt;code&gt;defined&lt;/code&gt; する必要があります。これを「キーごと」に有効にしたい場合は、代わりに &lt;code&gt;defined&lt;/code&gt; たテンプレートオプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="42e74293048eac70b152d671b3afa7d17f3695a7" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;Params::Check&quot;&gt;Params::Check&lt;/a&gt; will sanity check templates, validating for errors and unknown keys. Although very useful for debugging, this can be somewhat slow in hot-code and large loops.</source>
          <target state="translated">trueに設定すると、&lt;a href=&quot;Params::Check&quot;&gt;Params :: Check&lt;/a&gt;はテンプレートの健全性チェックを行い、エラーと不明なキーを検証します。デバッグには非常に便利ですが、ホットコードや大きなループでは多少遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="907b3689c8943c9530c2bccd5f2399b3ea311ce8" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will &lt;code&gt;croak&lt;/code&gt; when an error during template validation occurs, rather than return &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">trueに設定すると、テンプレートの検証中にエラーが発生すると、 &lt;code&gt;false&lt;/code&gt; を返すのではなく、&lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt;が &lt;code&gt;croak&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="262e77d8ecddf65d8252c722de18aca6dafa7dd4" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will no longer convert all keys from the user input to lowercase, but instead expect them to be in the case the template provided. This is useful when you want to use similar keys with different casing in your templates.</source>
          <target state="translated">trueに設定すると、&lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt;はすべてのキーをユーザー入力から小文字に変換しなくなり、代わりに、提供されたテンプレートのケースにあると想定します。これは、テンプレートで大文字と小文字が異なる同様のキーを使用する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fcd2802dc60a0f5aa656aa8d36630b4a5a1195a7" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will require all values passed to be &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;. If you wish to enable this on a 'per key' basis, use the template option &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">trueに設定した場合、&lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt;では、渡されるすべての値を &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; する必要があります。これを「キーごと」で有効にする場合は、代わりに &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; たテンプレートオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="b62a3740f4d2f3949ae331d68aff300bd8b9c5aa" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will sanity check templates, validating for errors and unknown keys. Although very useful for debugging, this can be somewhat slow in hot-code and large loops.</source>
          <target state="translated">trueに設定した場合、&lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt;はテンプレートの健全性をチェックし、エラーと不明なキーを検証します。これはデバッグには非常に役立ちますが、ホットコードや大きなループでは多少遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="df88f116b1eff18f21bd345796868ca93d04ee66" translate="yes" xml:space="preserve">
          <source>If set to true, a crc32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$d-&amp;gt;crc32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">trueに設定すると、非圧縮データのcrc32チェックサムが計算されます。この値を取得するには、 &lt;code&gt;$d-&amp;gt;crc32&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="bbd8aed6bbb2cb495083f75e98d7497f01edca37" translate="yes" xml:space="preserve">
          <source>If set to true, a crc32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$i-&amp;gt;crc32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">trueに設定すると、非圧縮データのcrc32チェックサムが計算されます。この値を取得するには、 &lt;code&gt;$i-&amp;gt;crc32&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="d4a8f4d307b72654b7c09182b593e029ffb7af20" translate="yes" xml:space="preserve">
          <source>If set to true, all keys in the template that are marked as to be stored in a scalar, will also be removed from the result set.</source>
          <target state="translated">trueに設定されている場合、スカラに格納されているとマークされているテンプレート内のすべてのキーも結果セットから削除されます。</target>
        </trans-unit>
        <trans-unit id="8a9a61d55c40cdf983928fb90e5f246e820a5b49" translate="yes" xml:space="preserve">
          <source>If set to true, an adler32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$d-&amp;gt;adler32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">trueに設定すると、非圧縮データのadler32チェックサムが計算されます。この値を取得するには、 &lt;code&gt;$d-&amp;gt;adler32&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="a5a30a93daed908c592b28db82a1a0b5d4a5ffc0" translate="yes" xml:space="preserve">
          <source>If set to true, an adler32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$i-&amp;gt;adler32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">trueに設定すると、非圧縮データのadler32チェックサムが計算されます。この値を取得するには、 &lt;code&gt;$i-&amp;gt;adler32&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="dbc945146e02b49c89057b1636cf31aa2669f101" translate="yes" xml:space="preserve">
          <source>If set to true, immediately extract entries when reading them. This gives you the same memory break as the &lt;code&gt;extract_archive&lt;/code&gt; function. Note however that entries will not be read into memory, but written straight to disk. This means no &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects are created for you to inspect.</source>
          <target state="translated">trueに設定した場合、エントリを読み取るときにすぐに抽出します。これにより、 &lt;code&gt;extract_archive&lt;/code&gt; 関数と同じメモリブレークが得られます。ただし、エントリはメモリに読み込まれず、ディスクに直接書き込まれることに注意してください。つまり、検査するための &lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトは作成されません。</target>
        </trans-unit>
        <trans-unit id="8be646f7a5def96ccc7c7343df2cffa456a1c220" translate="yes" xml:space="preserve">
          <source>If set to true, no &quot;1..N&quot; header will be printed.</source>
          <target state="translated">true に設定すると、&quot;1...N &quot;ヘッダは印刷されません。</target>
        </trans-unit>
        <trans-unit id="7adb95e8ec0ed6e84fcb01131c2b90c160ee5335" translate="yes" xml:space="preserve">
          <source>If set to true, this option will remove compressed data from the input buffer of the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method as the inflate progresses.</source>
          <target state="translated">trueに設定した場合、このオプションは、インフレートの進行に &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 、$ i-&amp;gt; inflateメソッドの入力バッファーから圧縮データを削除します。</target>
        </trans-unit>
        <trans-unit id="d55732bd7089a68f6b5548af27b4b056d17dc65d" translate="yes" xml:space="preserve">
          <source>If set true no diagnostics will be printed. This includes calls to &lt;code&gt;diag()&lt;/code&gt; .</source>
          <target state="translated">trueに設定すると、診断は出力されません。これには、 &lt;code&gt;diag()&lt;/code&gt; の呼び出しが含まれます。</target>
        </trans-unit>
        <trans-unit id="5397281aac6b794ebe8bf86c258022bd58733ebd" translate="yes" xml:space="preserve">
          <source>If set true no diagnostics will be printed. This includes calls to &lt;code&gt;diag()&lt;/code&gt;.</source>
          <target state="translated">trueに設定すると、診断は出力されません。これには、 &lt;code&gt;diag()&lt;/code&gt; の呼び出しが含まれます。</target>
        </trans-unit>
        <trans-unit id="6758cd1f0be9e6394226a98fea1a97b18f4a012d" translate="yes" xml:space="preserve">
          <source>If set, &lt;code&gt;sources&lt;/code&gt; must be a hashref containing the names of the &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s to load and/or configure. The values are a hash of configuration that will be accessible to the source handlers via &lt;a href=&quot;TAP::Parser::Source#config_for&quot;&gt;&quot;config_for&quot; in TAP::Parser::Source&lt;/a&gt;.</source>
          <target state="translated">設定されている場合、 &lt;code&gt;sources&lt;/code&gt; は、ロードおよび/または構成する&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;の名前を含むハッシュ参照である必要があります。値は、&lt;a href=&quot;TAP::Parser::Source#config_for&quot;&gt;TAP :: Parser :: Sourceの「config_for」を&lt;/a&gt;介してソースハンドラーがアクセスできる構成のハッシュです。</target>
        </trans-unit>
        <trans-unit id="767e45d99bc3772f600dade44827bcaf3503a3c0" translate="yes" xml:space="preserve">
          <source>If set, &lt;code&gt;sources&lt;/code&gt; must be a hashref containing the names of the &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s to load and/or configure. The values are a hash of configuration that will be accessible to the source handlers via &lt;a href=&quot;parser/source#config_for&quot;&gt;config_for in TAP::Parser::Source&lt;/a&gt;.</source>
          <target state="translated">設定されている場合、 &lt;code&gt;sources&lt;/code&gt; は、ロードおよび/または構成する&lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;の名前を含むhashrefでなければなりません。値は、&lt;a href=&quot;parser/source#config_for&quot;&gt;TAP :: Parser :: Sourceのconfig_forを&lt;/a&gt;介してソースハンドラーにアクセスできる構成のハッシュです。</target>
        </trans-unit>
        <trans-unit id="1f1db51044dc4cdaf8453a0cac36827443c78520" translate="yes" xml:space="preserve">
          <source>If set, END blocks are executed when the interpreter is destroyed. This is normally set by perl itself after the interpreter is constructed.</source>
          <target state="translated">設定されている場合、インタープリタが破壊されたときにENDブロックが実行されます。これは通常、インタープリタが構築された後にPerl自身によって設定されます。</target>
        </trans-unit>
        <trans-unit id="7a162adb7a0dc8b66567284e3d48459cecdcd046" translate="yes" xml:space="preserve">
          <source>If set, a directory which fails the</source>
          <target state="translated">設定されている場合は</target>
        </trans-unit>
        <trans-unit id="430e0a0ebf21ab8f824a0951a1408be6d39c892f" translate="yes" xml:space="preserve">
          <source>If set, and POD_MAN_DATE and the &lt;code&gt;date&lt;/code&gt; options are not set, this will be used as the modification time of the source file, overriding the timestamp of the input file or the current time. It should be set to the desired time in seconds since UNIX epoch. This is primarily useful to ensure reproducible builds of the same output file given the same source and Pod::Man version, even when file timestamps may not be consistent. See &lt;a href=&quot;https://reproducible-builds.org/specs/source-date-epoch/&quot;&gt;https://reproducible-builds.org/specs/source-date-epoch/&lt;/a&gt; for the full specification.</source>
          <target state="translated">設定されていて、POD_MAN_DATEと &lt;code&gt;date&lt;/code&gt; オプションが設定されていない場合、これはソースファイルの変更時刻として使用され、入力ファイルのタイムスタンプまたは現在の時刻を上書きします。 UNIXエポック以降の希望する時間（秒単位）に設定する必要があります。これは主に、ファイルのタイムスタンプに一貫性がない場合でも、同じソースとPod :: Manバージョンを指定して同じ出力ファイルの再現可能なビルドを保証するのに役立ちます。完全な仕様については、&lt;a href=&quot;https://reproducible-builds.org/specs/source-date-epoch/&quot;&gt;https：//reproducible-builds.org/specs/source-date-epoch/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="50fc3d2d4510057c46811e96115fbf4e2aa5439b" translate="yes" xml:space="preserve">
          <source>If set, general protection faults do not generate a dialogue box but can instead be handled by the process via an exception handler. This bit should not be set by programs that don't know how to handle such faults.</source>
          <target state="translated">セットされている場合、一般的な保護フォルトはダイアログボックスを生成せず、代わりに例外ハンドラを介してプロセスが処理することができます。このビットは、そのようなフォルトの処理方法を知らないプログラムでは設定すべきではありません。</target>
        </trans-unit>
        <trans-unit id="36dd77001e7c6eaf4c115da0bfdc18f666edd086" translate="yes" xml:space="preserve">
          <source>If set, indicates that when a critical error is encountered, the call that triggered the error fails immediately. Normally this bit is not set, which means that a critical error causes a dialogue box to appear notifying the desktop user that some application has triggered a critical error. The dialogue box allows the desktop user to decide whether the critical error is returned to the process, is ignored, or the offending operation is retried.</source>
          <target state="translated">セットされている場合、クリティカル・エラーが発生した場合、そのエラーの引き金となった呼び出しが直ちに失敗することを示します。通常、このビットは設定されていません。つまり、クリティカル・エラーが発生すると、あるアプリケーションがクリティカル・エラーを発生させたことをデスクトップ・ユーザに通知するダイアログ・ボックスが表示されることを意味します。このダイアログ・ボックスにより、デスクトップ・ユーザーは、クリティカル・エラーをプロセスに戻すか、無視するか、または問題のある操作を再試行するかを決定することができます。</target>
        </trans-unit>
        <trans-unit id="41e6aaabd1216511f49764603b89114f7c2c7520" translate="yes" xml:space="preserve">
          <source>If set, should be the name of a file (in the output directory) to write the HTML index to. The default value is &quot;index.html&quot;. If you set this to a false value, no contents file will be written.</source>
          <target state="translated">セットされている場合は、HTMLインデックスを書き込むファイル名を(出力ディレクトリ内の)指定する必要があります。デフォルト値は &quot;index.html&quot; です。これをfalseに設定すると、コンテンツファイルは書き込まれません。</target>
        </trans-unit>
        <trans-unit id="fed7ed0698b463358f79ea435791a3f79370827d" translate="yes" xml:space="preserve">
          <source>If set, the debugger goes into &lt;code&gt;NonStop&lt;/code&gt; mode and will not connect to a TTY. If interrupted (or if control goes to the debugger via explicit setting of $DB::signal or $DB::single from the Perl script), it connects to a TTY specified in the &lt;code&gt;TTY&lt;/code&gt; option at startup, or to a tty found at runtime using the &lt;code&gt;Term::Rendezvous&lt;/code&gt; module of your choice.</source>
          <target state="translated">設定されている場合、デバッガーは &lt;code&gt;NonStop&lt;/code&gt; モードになり、TTYに接続しません。中断された場合（または、制御が$ DB :: signalまたはPerlスクリプトからの$ DB :: singleの明示的な設定を介してデバッガーに &lt;code&gt;TTY&lt;/code&gt; 場合）、起動時にTTYオプションで指定されたTTY、または選択した &lt;code&gt;Term::Rendezvous&lt;/code&gt; モジュールを使用したランタイム。</target>
        </trans-unit>
        <trans-unit id="f19bf560504f7c9497b672610231bba49eba7830" translate="yes" xml:space="preserve">
          <source>If set, the debugger goes into non-interactive mode until interrupted, or programmatically by setting $DB::signal or $DB::single.</source>
          <target state="translated">設定されている場合、デバッガは中断されるまで非インタラクティブ・モードになります。</target>
        </trans-unit>
        <trans-unit id="f315d5d8357d35b3e7a9f240785d04d5f2c0b17f" translate="yes" xml:space="preserve">
          <source>If set, then when an attempt to continue reading from or writing to an already open file [usually on a removable medium like a floppy diskette] finds the file no longer available, the call will immediately fail. Normally this bit is not set, which means that instead a dialogue box will appear notifying the desktop user that some application has run into this problem. The dialogue box allows the desktop user to decide whether the failure is returned to the process, is ignored, or the offending operation is retried.</source>
          <target state="translated">このビットがセットされている場合、既に開いているファイル(通常はフロッピーディスクのようなリムーバブルメディア上)からの読み込みや書き込みを続けようとすると、そのファイルが利用できなくなったことを発見した場合、その呼び出しは直ちに失敗します。通常、このビットは設定されていないため、代わりにダイアログボックスが表示され、あるアプリケーションがこの問題に遭遇したことをデスクトップユーザに通知します。このダイアログボックスにより、デスクトップユーザは失敗をプロセスに戻すか、無視するか、問題のある操作を再試行するかを決定することができます。</target>
        </trans-unit>
        <trans-unit id="d8533dab20da5503a1d14e1f563a58d7fccbc547" translate="yes" xml:space="preserve">
          <source>If set, this causes memory access misalignment faults to be automatically fixed in a manner invisible to the process. This flag is ignored on x86-based versions of Windows NT. This flag is not supported on Windows 95.</source>
          <target state="translated">このフラグが設定されていると、プロセスからは見えない方法でメモリアクセスのずれが自動的に修正されるようになります。このフラグは、x86 ベースの Windows NT では無視されます。このフラグは Windows 95 ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="825ea211f8cc0b564969fbeabe2d0a330315f1a6" translate="yes" xml:space="preserve">
          <source>If set, this dumps out memory statistics after execution. If set to an integer greater than one, also dumps out memory statistics after compilation.</source>
          <target state="translated">セットされている場合、実行後にメモリの統計情報を出力します。1より大きい整数に設定すると、コンパイル後にもメモリ統計情報を出力します。</target>
        </trans-unit>
        <trans-unit id="8b969433f335481102ca199a1faf8cf07ca2debd" translate="yes" xml:space="preserve">
          <source>If set, this symbol indicates that only the version-specific components of a perl installation should be installed. This may be useful for making a test installation of a new version without disturbing the existing installation. Setting versiononly is equivalent to setting installperl's -v option. In particular, the non-versioned scripts and programs such as a2p, c2ph, h2xs, pod2*, and perldoc are not installed (see &lt;code&gt;INSTALL&lt;/code&gt; for a more complete list). Nor are the man pages installed. Usually, this is undef.</source>
          <target state="translated">設定されている場合、この記号は、perlインストールのバージョン固有のコンポーネントのみをインストールする必要があることを示します。これは、既存のインストールに影響を与えずに新しいバージョンのテストインストールを行う場合に役立ちます。versiononlyを設定することは、installperlの-vオプションを設定することと同等です。特に、a2p、c2ph、h2xs、pod2 *、perldocなどのバージョン管理されていないスクリプトとプログラムはインストールされません（より完全なリストについては、 &lt;code&gt;INSTALL&lt;/code&gt; を参照してください）。マニュアルページもインストールされていません。通常、これはundefです。</target>
        </trans-unit>
        <trans-unit id="80c94ecda6e710c6fc8e753f6f4382b5d0835ec4" translate="yes" xml:space="preserve">
          <source>If set, this will be used as the value of the left-hand footer unless the &lt;code&gt;date&lt;/code&gt; option is explicitly set, overriding the timestamp of the input file or the current time. This is primarily useful to ensure reproducible builds of the same output file given the same source and Pod::Man version, even when file timestamps may not be consistent.</source>
          <target state="translated">設定されている場合、 &lt;code&gt;date&lt;/code&gt; オプションが明示的に設定されていない限り、これは左側のフッターの値として使用され、入力ファイルのタイムスタンプまたは現在の時刻が上書きされます。これは主に、ファイルのタイムスタンプに一貫性がない場合でも、同じソースとPod :: Manバージョンを指定して同じ出力ファイルの再現可能なビルドを保証するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5be95242fd4f1700426db0866219ce183a7c4d43" translate="yes" xml:space="preserve">
          <source>If setmagic is false then no set magic will be called on the new (empty) SV. This typically means that assignment will soon follow (e.g. 'local $x = $y'), and that will handle the magic.</source>
          <target state="translated">setmagicがfalseの場合、新しい(空の)SVではセットマジックは呼び出されません。これは通常、すぐに代入が行われることを意味します(例:'local $x=$y')。</target>
        </trans-unit>
        <trans-unit id="b7db0eb29b687c30aa2094a54d8f1f63ca4df7c5" translate="yes" xml:space="preserve">
          <source>If several symbol categories exist in &lt;code&gt;%EXPORT_TAGS&lt;/code&gt; , it's usually useful to create the utility &quot;:all&quot; to simplify &quot;use&quot; statements.</source>
          <target state="translated">&lt;code&gt;%EXPORT_TAGS&lt;/code&gt; に複数のシンボルカテゴリが存在する場合は、通常、ユーティリティ &quot;：all&quot;を作成して &quot;use&quot;ステートメントを簡略化すると便利です。</target>
        </trans-unit>
        <trans-unit id="3f21602986b59b3bc1a9d6d50edec0ff3a9a1224" translate="yes" xml:space="preserve">
          <source>If several symbol categories exist in &lt;code&gt;%EXPORT_TAGS&lt;/code&gt;, it's usually useful to create the utility &quot;:all&quot; to simplify &quot;use&quot; statements.</source>
          <target state="translated">&lt;code&gt;%EXPORT_TAGS&lt;/code&gt; に複数のシンボルカテゴリが存在する場合は、通常、ユーティリティ「：all」を作成して「use」ステートメントを簡略化すると便利です。</target>
        </trans-unit>
        <trans-unit id="1d650df7f1b284cce9178200761c079c663691a8" translate="yes" xml:space="preserve">
          <source>If so, please try to reuse the existing modules either in whole or by inheriting useful features into a new class. If this is not practical try to get together with the module authors to work on extending or enhancing the functionality of the existing modules. A perfect example is the plethora of packages in perl4 for dealing with command line options.</source>
          <target state="translated">その場合は、既存のモジュール全体を再利用するか、有用な機能を継承して新しいクラスを作るようにしてください。それが現実的でない場合は、モジュールの作者と協力して、既存のモジュールの機能を拡張したり強化したりするようにしてください。完璧な例としては、コマンドラインオプションを扱うための perl4 の豊富なパッケージがあります。</target>
        </trans-unit>
        <trans-unit id="dcc2c875ef26b86def7f4287ef7a97e0b0212c08" translate="yes" xml:space="preserve">
          <source>If so, that's great news; bug reports with patches are likely to receive significantly more attention and interest than those without patches. Please attach your patch to the report using the &lt;code&gt;-p&lt;/code&gt; option. When sending a patch, create it using &lt;code&gt;git format-patch&lt;/code&gt; if possible, though a unified diff created with &lt;code&gt;diff -pu&lt;/code&gt; will do nearly as well.</source>
          <target state="translated">もしそうなら、それは素晴らしいニュースです。パッチのあるバグレポートは、パッチのないものよりもはるかに注目と関心が高まる可能性があります。 &lt;code&gt;-p&lt;/code&gt; オプションを使用して、パッチをレポートに添付してください。パッチを送信するときは、可能であれば &lt;code&gt;git format-patch&lt;/code&gt; を使用して作成してください。ただし、 &lt;code&gt;diff -pu&lt;/code&gt; で作成された統一されたdiff でもほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="dfaefac0caf9158c6cac0a67edf5328c9dac8509" translate="yes" xml:space="preserve">
          <source>If so, that's great news; bug reports with patches are likely to receive significantly more attention and interest than those without patches. Please submit your patch via the GitHub Pull Request workflow as described in &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perlhack&quot;&gt;perlhack&lt;/a&gt;. You may also send patches to &lt;b&gt;perl5-porters@perl.org&lt;/b&gt;. When sending a patch, create it using &lt;code&gt;git format-patch&lt;/code&gt; if possible, though a unified diff created with &lt;code&gt;diff -pu&lt;/code&gt; will do nearly as well.</source>
          <target state="translated">もしそうなら、それは素晴らしいニュースです。パッチのあるバグレポートは、パッチのないバグレポートよりもはるかに多くの注目と関心を集める可能性があります。&lt;b&gt;perldoc &lt;/b&gt;&lt;a href=&quot;perlhack&quot;&gt;perlhackの&lt;/a&gt;説明に従って、GitHubプルリクエストワークフローを介してパッチを送信してください。パッチを&lt;b&gt;perl5-porters@perl.orgに&lt;/b&gt;送信することもできます。パッチを送信するときは、可能であれば &lt;code&gt;git format-patch&lt;/code&gt; を使用してパッチを作成しますが、 &lt;code&gt;diff -pu&lt;/code&gt; 作成された統合diffもほぼ同様に機能します。</target>
        </trans-unit>
        <trans-unit id="e41db44860ffe2b84a712b997e64175db6318266" translate="yes" xml:space="preserve">
          <source>If some events detected in</source>
          <target state="translated">で検出されたイベントがある場合</target>
        </trans-unit>
        <trans-unit id="4a24b9aa82fff6a4581557ce8337d0476898456b" translate="yes" xml:space="preserve">
          <source>If some threads have not finished running when the main Perl thread ends, Perl will warn you about it and die, since it is impossible for Perl to clean up itself while other threads are running.</source>
          <target state="translated">Perl のメインスレッドが終了したときに、いくつかのスレッドの実行が終了していない場合、他のスレッドが実行されている間に Perl が自分自身をクリーンアップすることは不可能なので、Perl が警告を出して死んでしまいます。</target>
        </trans-unit>
        <trans-unit id="5c202d6491a5606cc9c88606232cf0104e601803" translate="yes" xml:space="preserve">
          <source>If something in a program isn&amp;rsquo;t the value you&amp;rsquo;re looking for but indicates where the value is, that&amp;rsquo;s indirection. This can be done with either &lt;b&gt;symbolic references&lt;/b&gt; or &lt;b&gt;hard&lt;/b&gt;.</source>
          <target state="translated">プログラム内の何かが探している値ではないが値がどこにあるかを示している場合、それは間接的なものです。これは、&lt;b&gt;シンボリック参照&lt;/b&gt;または&lt;b&gt;ハード&lt;/b&gt;を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="6d353132ec4a6837954d3ce352dc8e97cba1ae50" translate="yes" xml:space="preserve">
          <source>If something in the Perl core is marked as &lt;b&gt;deprecated&lt;/b&gt;, we may remove it from the core in the future, though we might not. Generally, backward incompatible changes will have deprecation warnings for two release cycles before being removed, but may be removed after just one cycle if the risk seems quite low or the benefits quite high.</source>
          <target state="translated">Perlコアの何かが&lt;b&gt;deprecated&lt;/b&gt;とマークさ&lt;b&gt;れ&lt;/b&gt;ている場合は、将来的にコアから削除する可能性がありますが、削除しない可能性があります。一般に、下位互換性のない変更は、削除される前に2つのリリースサイクルで非推奨の警告が表示されますが、リスクが非常に低いまたはメリットが非常に高い場合は、1サイクル後に削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5fdc0cac0824435fe5437bd44fc271afb23e92f6" translate="yes" xml:space="preserve">
          <source>If something in the Perl core is marked as &lt;b&gt;experimental&lt;/b&gt;, we may change its behaviour, deprecate or remove it without notice. While we'll always do our best to smooth the transition path for users of experimental features, you should contact the perl5-porters mailinglist if you find an experimental feature useful and want to help shape its future.</source>
          <target state="translated">Perlコアの何かが&lt;b&gt;実験的&lt;/b&gt;としてマークされている場合、その動作を変更したり、非推奨にしたり、予告なく削除したりすることがあります。実験的な機能のユーザーの移行パスをスムーズにするために常に最善を尽くしますが、実験的な機能が有用であり、その将来の形成を支援したい場合は、perl5-portersメーリングリストに連絡する必要があります。</target>
        </trans-unit>
        <trans-unit id="5fae6eb432d77d8528c8b9785dccec21b272faf2" translate="yes" xml:space="preserve">
          <source>If something in there fails, you'll know which one it was and that will make tracking down the problem easier. Try to put a bit of debugging information into the test names.</source>
          <target state="translated">この中の何かが失敗しても、それがどれだったのかがわかるので、問題の追跡が容易になります。テスト名には少しだけデバッグ情報を入れるようにしてください。</target>
        </trans-unit>
        <trans-unit id="12083dc2cfbc1c39486c5540691a063ce5c5018f" translate="yes" xml:space="preserve">
          <source>If spaces extend into the next chunk of input text, the next chunk will be read in. Normally the current chunk will be discarded at the same time, but if</source>
          <target state="translated">入力テキストの次のチャンクにスペースが伸びると、次のチャンクが読み込まれます。通常、現在のチャンクは同時に破棄されますが、もし</target>
        </trans-unit>
        <trans-unit id="14e709a02e4eecb15fa27505b7e71a09c11f743c" translate="yes" xml:space="preserve">
          <source>If spaces extend into the next chunk of input text, the next chunk will be read in. Normally the current chunk will be discarded at the same time, but if &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;LEX_KEEP_PREVIOUS&lt;/code&gt; bit set, then the current chunk will not be discarded.</source>
          <target state="translated">スペースが入力テキストの次のチャンクに拡張されると、次のチャンクが読み込まれます。通常、現在のチャンクは同時に破棄されますが、 &lt;code&gt;flags&lt;/code&gt; に &lt;code&gt;LEX_KEEP_PREVIOUS&lt;/code&gt; ビットが設定されている場合、現在のチャンクは破棄されません。</target>
        </trans-unit>
        <trans-unit id="593e478a0d37f7a9d8665d309a9a7733f6ec02c1" translate="yes" xml:space="preserve">
          <source>If specified the contents of &lt;code&gt;DATA&lt;/code&gt; and a termination string &lt;code&gt;&quot;.\r\n&quot;&lt;/code&gt; is sent to the server. The result will be true if the data was accepted.</source>
          <target state="translated">指定すると、 &lt;code&gt;DATA&lt;/code&gt; の内容と終了文字列 &lt;code&gt;&quot;.\r\n&quot;&lt;/code&gt; がサーバーに送信されます。データが受け入れられた場合、結果は真になります。</target>
        </trans-unit>
        <trans-unit id="b6dd58d3559146e497eb5b446f27a9cb126713f8" translate="yes" xml:space="preserve">
          <source>If specified, strings are normalized before preparation of sort keys (the normalization is executed after preprocess).</source>
          <target state="translated">指定された場合、文字列はソートキーを準備する前に正規化されます(正規化は前処理の後に実行されます)。</target>
        </trans-unit>
        <trans-unit id="c54d25c0a371a4a7533e5b6eb7a37c54566669f4" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to preprocess each string before the formation of sort keys.</source>
          <target state="translated">指定された場合、coderefはソートキーを形成する前に各文字列を前処理するために使用されます。</target>
        </trans-unit>
        <trans-unit id="df742ffc92755882ac205c4e8f1710a25c417cf9" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to rewrite lines in &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; . The coderef will get each line, and then should return a rewritten line according to the UCA file format. If the coderef returns an empty line, the line will be skipped.</source>
          <target state="translated">指定した場合、coderefは &lt;code&gt;table&lt;/code&gt; または &lt;code&gt;entry&lt;/code&gt; 行を書き換えるために使用されます。coderefは各行を取得し、UCAファイル形式に従って書き換えられた行を返します。coderefが空の行を返す場合、その行はスキップされます。</target>
        </trans-unit>
        <trans-unit id="65a1895406fe003bd9c8df18e562302ad473cb2d" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to rewrite lines in &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt;. The coderef will get each line, and then should return a rewritten line according to the UCA file format. If the coderef returns an empty line, the line will be skipped.</source>
          <target state="translated">指定した場合、coderefは、 &lt;code&gt;table&lt;/code&gt; または &lt;code&gt;entry&lt;/code&gt; 行を書き換えるために使用されます。coderefは各行を取得し、UCAファイル形式に従って書き直された行を返す必要があります。coderefが空の行を返す場合、その行はスキップされます。</target>
        </trans-unit>
        <trans-unit id="fd186f184cd201e115617cc1e9809ac56ff41627" translate="yes" xml:space="preserve">
          <source>If specified, the given string will be stripped off from the beginning of the C function name in the generated XS functions (if it starts with that prefix). This only applies to XSUBs without &lt;code&gt;CODE&lt;/code&gt; or &lt;code&gt;PPCODE&lt;/code&gt; blocks. For example, the XS:</source>
          <target state="translated">指定した場合、指定した文字列は、生成されたXS関数のC関数名の先頭から削除されます（その接頭辞で始まる場合）。これは、 &lt;code&gt;CODE&lt;/code&gt; または &lt;code&gt;PPCODE&lt;/code&gt; ブロックのないXSUBにのみ適用されます。たとえば、XS：</target>
        </trans-unit>
        <trans-unit id="db33e17f1262611ad9b1ad5050ad6146c6b090c4" translate="yes" xml:space="preserve">
          <source>If specified, this option will disable the creation of all extra fields in the zip local and central headers. So the &lt;code&gt;exTime&lt;/code&gt; , &lt;code&gt;exUnix2&lt;/code&gt; , &lt;code&gt;exUnixN&lt;/code&gt; , &lt;code&gt;ExtraFieldLocal&lt;/code&gt; and &lt;code&gt;ExtraFieldCentral&lt;/code&gt; options will be ignored.</source>
          <target state="translated">このオプションを指定すると、zipローカルヘッダーと中央ヘッダーのすべての追加フィールドの作成が無効になります。したがって、 &lt;code&gt;exTime&lt;/code&gt; 、 &lt;code&gt;exUnix2&lt;/code&gt; 、 &lt;code&gt;exUnixN&lt;/code&gt; 、 &lt;code&gt;ExtraFieldLocal&lt;/code&gt; および &lt;code&gt;ExtraFieldCentral&lt;/code&gt; オプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="6aa95b55da4c40155f92625ffd4e21427121a5f5" translate="yes" xml:space="preserve">
          <source>If specified, this option will disable the creation of all extra fields in the zip local and central headers. So the &lt;code&gt;exTime&lt;/code&gt;, &lt;code&gt;exUnix2&lt;/code&gt;, &lt;code&gt;exUnixN&lt;/code&gt;, &lt;code&gt;ExtraFieldLocal&lt;/code&gt; and &lt;code&gt;ExtraFieldCentral&lt;/code&gt; options will be ignored.</source>
          <target state="translated">指定した場合、このオプションは、zipローカルおよび中央ヘッダー内のすべての追加フィールドの作成を無効にします。したがって、 &lt;code&gt;exTime&lt;/code&gt; 、 &lt;code&gt;exUnix2&lt;/code&gt; 、 &lt;code&gt;exUnixN&lt;/code&gt; 、 &lt;code&gt;ExtraFieldLocal&lt;/code&gt; 、および &lt;code&gt;ExtraFieldCentral&lt;/code&gt; オプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="4d0066c7ecc8871ce3a62f9b83ef61508d6113e7" translate="yes" xml:space="preserve">
          <source>If specified, this option will force the creation of the smallest possible compliant gzip header (which is exactly 10 bytes long) as defined in RFC 1952.</source>
          <target state="translated">このオプションが指定された場合、このオプションは、 RFC 1952 で定義されているように、可能な限り最小の準拠した gzip ヘッダ (長さがちょうど 10 バイト)を強制的に生成する。</target>
        </trans-unit>
        <trans-unit id="74b346bb75048f3d43315e1f91c059eb29d865aa" translate="yes" xml:space="preserve">
          <source>If speed is of little concern, the common idiom uses grep in scalar context (which returns the number of items that passed its condition) to traverse the entire list. This does have the benefit of telling you how many matches it found, though.</source>
          <target state="translated">速度があまり気にならない場合は、一般的なイディオムではスカラコンテキストでgrep(条件を通過した項目の数を返す)を使ってリスト全体を検索します。しかし、これには見つかったマッチ数を教えてくれるという利点があります。</target>
        </trans-unit>
        <trans-unit id="8029f3ea6d316f66b8a86b9af29af453cce204da" translate="yes" xml:space="preserve">
          <source>If start_color is non-null then it will be inserted after the opening quote (if there is one) but before the escaped text. If end_color is non-null then it will be inserted after the escaped text but before any quotes or ellipses.</source>
          <target state="translated">start_color を非 null にする と 、 それは冒頭の引用符 (あれば)の後に挿入 さ れますが、 エスケープされたテキス ト の前に挿入 さ れます。end_color が non-null の場合は、 エスケープされたテキス ト の後に挿入されますが、 引用符や楕円の前に挿入されます。</target>
        </trans-unit>
        <trans-unit id="741bc8e54000bbf6547a93a37e27f9bd7b7bf22e" translate="yes" xml:space="preserve">
          <source>If straightforward stream-based parsing wont meet your needs (as is likely the case for tasks such as translating PODs into structured markup languages like HTML and XML) then you may need to take the tree-based approach. Rather than doing everything in one pass and calling the &lt;b&gt;interpolate()&lt;/b&gt; method to expand sequences into text, it may be desirable to instead create a parse-tree using the &lt;b&gt;parse_text()&lt;/b&gt; method to return a tree-like structure which may contain an ordered list of children (each of which may be a text-string, or a similar tree-like structure).</source>
          <target state="translated">単純なストリームベースの解析がニーズに合わない場合（PODをHTMLやXMLのような構造化マークアップ言語に変換するようなタスクの場合のように）、ツリーベースのアプローチを取る必要があるかもしれません。すべてを1つのパスで実行し、&lt;b&gt;interpolate（）&lt;/b&gt;メソッドを呼び出してシーケンスをテキストに展開するのではなく、&lt;b&gt;parse_text（）&lt;/b&gt;メソッドを使用して構文解析ツリーを作成し、順序付きリストを含むツリーのような構造を返すことが望ましい場合があります。子の（それぞれがテキスト文字列、または同様のツリーのような構造である場合があります）。</target>
        </trans-unit>
        <trans-unit id="2063c72cde7216e8c8fe940ebf2fb1f781846427" translate="yes" xml:space="preserve">
          <source>If subroutine signatures are enabled (see &lt;a href=&quot;#Signatures&quot;&gt;&quot;Signatures&quot;&lt;/a&gt;), then the shorter PROTO syntax is unavailable, because it would clash with signatures. In that case, a prototype can only be declared in the form of an attribute.</source>
          <target state="translated">サブルーチン署名が有効になっている場合（&lt;a href=&quot;#Signatures&quot;&gt;「署名」を&lt;/a&gt;参照）、署名と衝突するため、短いPROTO構文は使用できません。その場合、プロトタイプは属性の形式でのみ宣言できます。</target>
        </trans-unit>
        <trans-unit id="5d14b7e2a788098ee234bfc1585ff4767dfdaee2" translate="yes" xml:space="preserve">
          <source>If subroutine signatures are enabled (see &lt;a href=&quot;#Signatures&quot;&gt;Signatures&lt;/a&gt;), then the shorter PROTO syntax is unavailable, because it would clash with signatures. In that case, a prototype can only be declared in the form of an attribute.</source>
          <target state="translated">サブルーチンの署名が有効になっている場合（「&lt;a href=&quot;#Signatures&quot;&gt;署名&lt;/a&gt;」を参照）、短いPROTO構文は署名と競合するため使用できません。その場合、プロトタイプは属性の形式でのみ宣言できます。</target>
        </trans-unit>
        <trans-unit id="42c7d01f7359f4959eaf7c155ab3009451137cea" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation object and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt; .</source>
          <target state="translated">成功した場合、 &lt;code&gt;$i&lt;/code&gt; はインフレオブジェクトを保持し、 &lt;code&gt;$status&lt;/code&gt; は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="cf6796a439d489957a46f406c119c69951b658a8" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation object and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt;.</source>
          <target state="translated">成功した場合、 &lt;code&gt;$i&lt;/code&gt; はインフレオブジェクトを保持し、 &lt;code&gt;$status&lt;/code&gt; は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="ec38a973765ca012bc6fc104f4b8ef70937c9614" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation stream and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt; .</source>
          <target state="translated">成功した場合、 &lt;code&gt;$i&lt;/code&gt; はインフレストリームを保持し、 &lt;code&gt;$status&lt;/code&gt; は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b6af1f82c337ffb0cd08fe17aa27a424683eba9a" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation stream and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt;.</source>
          <target state="translated">成功した場合、 &lt;code&gt;$i&lt;/code&gt; はインフレストリームを保持し、 &lt;code&gt;$status&lt;/code&gt; は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="f34b524a05a94eda9eec45a5e52e923221e9853a" translate="yes" xml:space="preserve">
          <source>If successful, it returns the in-memory gzip file. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="translated">成功すると、メモリ内のgzipファイルが返されます。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、 &lt;code&gt;$gzerrno&lt;/code&gt; 変数はzlibエラーコードを格納します。</target>
        </trans-unit>
        <trans-unit id="81c786291c2ee4a09a4250b9266414c8b0d7512f" translate="yes" xml:space="preserve">
          <source>If successful, it returns the in-memory gzip file. Otherwise it returns &lt;code&gt;undef&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="translated">成功すると、メモリ内のgzipファイルが返されます。それ以外の場合は &lt;code&gt;undef&lt;/code&gt; を返し、 &lt;code&gt;$gzerrno&lt;/code&gt; 変数はzlibエラーコードを格納します。</target>
        </trans-unit>
        <trans-unit id="a4a46b7cfb2406db4688f3a0ac9d424f4865a652" translate="yes" xml:space="preserve">
          <source>If successful, it returns the uncompressed gzip file. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="translated">成功すると、圧縮されていないgzipファイルが返されます。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、 &lt;code&gt;$gzerrno&lt;/code&gt; 変数はzlibエラーコードを格納します。</target>
        </trans-unit>
        <trans-unit id="b546e05843ef34edaf10ea0003e7e36111124750" translate="yes" xml:space="preserve">
          <source>If successful, it returns the uncompressed gzip file. Otherwise it returns &lt;code&gt;undef&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="translated">成功すると、圧縮されていないgzipファイルが返されます。それ以外の場合は &lt;code&gt;undef&lt;/code&gt; を返し、 &lt;code&gt;$gzerrno&lt;/code&gt; 変数はzlibエラーコードを格納します。</target>
        </trans-unit>
        <trans-unit id="0f77490ec0c061ac3ae6e48aedaf1d41d413b95c" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised compression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt; , only.</source>
          <target state="translated">成功すると、初期化された圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; と &lt;code&gt;BZ_OK&lt;/code&gt; の &lt;code&gt;$status&lt;/code&gt; がリストコンテキストで返されます。スカラーコンテキストでは、デフレオブジェクト &lt;code&gt;$z&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="afab4c4ec82d17a0d3d79f9261a109b3948960bc" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised compression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt;, only.</source>
          <target state="translated">成功すると、初期化された圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; と &lt;code&gt;$status&lt;/code&gt; の &lt;code&gt;BZ_OK&lt;/code&gt; がリストコンテキストで返されます。スカラーコンテキストでは、デフレーションオブジェクト &lt;code&gt;$z&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="003d593630b18abe30c9939f8d44076e1ce90807" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation object, &lt;code&gt;$d&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$d&lt;/code&gt; , only.</source>
          <target state="translated">成功した場合、初期化されたデフレオブジェクト、 &lt;code&gt;$d&lt;/code&gt; と &lt;code&gt;Z_OK&lt;/code&gt; の &lt;code&gt;$status&lt;/code&gt; をリストコンテキストで返します。スカラーコンテキストでは、デフレオブジェクト &lt;code&gt;$d&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="b9aa536487df74029d769a48c392afba84c5f24e" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation object, &lt;code&gt;$d&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$d&lt;/code&gt;, only.</source>
          <target state="translated">成功すると、初期化されたデフレーションオブジェクト &lt;code&gt;$d&lt;/code&gt; と &lt;code&gt;$status&lt;/code&gt; の &lt;code&gt;Z_OK&lt;/code&gt; がリストコンテキストで返されます。スカラーコンテキストでは、デフレーションオブジェクト &lt;code&gt;$d&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="7f86208486cf7be6093bb8b7191e306d09fb04dc" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation stream, &lt;code&gt;$d&lt;/code&gt; and &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation stream, &lt;code&gt;$d&lt;/code&gt; , only.</source>
          <target state="translated">成功すると、初期化されたデフレストリーム、 &lt;code&gt;$d&lt;/code&gt; および &lt;code&gt;$status&lt;/code&gt; &lt;code&gt;Z_OK&lt;/code&gt; がリストコンテキストで返されます。スカラーコンテキストでは、デフレストリーム &lt;code&gt;$d&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="dab6fec9c63017bda459ab8c2b830d444d4282cf" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation stream, &lt;code&gt;$d&lt;/code&gt; and &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation stream, &lt;code&gt;$d&lt;/code&gt;, only.</source>
          <target state="translated">成功すると、リストコンテキストで、初期化されたデフレーションストリーム、 &lt;code&gt;$d&lt;/code&gt; および &lt;code&gt;Z_OK&lt;/code&gt; の &lt;code&gt;$status&lt;/code&gt; が返されます。スカラーコンテキストでは、デフレーションストリーム &lt;code&gt;$d&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="05d2c70da3dce90528345981e79d77f52c5f5ddb" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised uncompression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt; , only.</source>
          <target state="translated">成功した場合は、初期化された非圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; および &lt;code&gt;$status&lt;/code&gt; の &lt;code&gt;BZ_OK&lt;/code&gt; をリストコンテキストで返します。スカラーコンテキストでは、デフレオブジェクト &lt;code&gt;$z&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="d2677208b617b8465686e69e5dcf570d05d7bc09" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised uncompression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt;, only.</source>
          <target state="translated">成功すると、初期化された非圧縮オブジェクト &lt;code&gt;$z&lt;/code&gt; と &lt;code&gt;$status&lt;/code&gt; の &lt;code&gt;BZ_OK&lt;/code&gt; がリストコンテキストで返されます。スカラーコンテキストでは、デフレーションオブジェクト &lt;code&gt;$z&lt;/code&gt; のみを返します。</target>
        </trans-unit>
        <trans-unit id="9905dac4184f6f7193dddf39eab6d02ad4540f03" translate="yes" xml:space="preserve">
          <source>If supplied with an argument that can't be a code point, &lt;code&gt;charblock()&lt;/code&gt; tries to do the opposite and interpret the argument as an old-style block name. On an ASCII platform, the return value is a</source>
          <target state="translated">コードポイントにできない引数が指定された場合、 &lt;code&gt;charblock()&lt;/code&gt; はその逆を試み、引数を古いスタイルのブロック名として解釈します。ASCIIプラットフォームでは、戻り値は</target>
        </trans-unit>
        <trans-unit id="343b1f1d2e0b0c3a0e2a3dffed0083feca7d527c" translate="yes" xml:space="preserve">
          <source>If supplied with an argument that can't be a code point, charscript() tries to do the opposite and interpret the argument as a script name. The return value is a</source>
          <target state="translated">コードポイントにできない引数が与えられた場合、charscript()はその逆を行い、引数をスクリプト名として解釈しようとします。返り値は</target>
        </trans-unit>
        <trans-unit id="95ecffacfac149266d204e25c816abb11a57c234" translate="yes" xml:space="preserve">
          <source>If supported by the core Perl version</source>
          <target state="translated">Perl のコアバージョンでサポートされている場合</target>
        </trans-unit>
        <trans-unit id="f6599907df819640d703f0de46e603f79205c931" translate="yes" xml:space="preserve">
          <source>If supported by the core Perl version, this function will return an ANSI path name for the current directory if the long pathname cannot be represented in the system codepage.</source>
          <target state="translated">Perl のコアバージョンでサポートされている場合、この関数は、長いパス名がシステムコードページで表現できない場合に、カレントディレクトリの ANSI パス名を返します。</target>
        </trans-unit>
        <trans-unit id="2dcad45e80ec56c1bf86fbe3660554c170755ed1" translate="yes" xml:space="preserve">
          <source>If supported by the core Perl version, this function will return an ANSI path name if the full pathname cannot be represented in the system codepage.</source>
          <target state="translated">Perl のコアバージョンでサポートされている場合、この関数はシステムコードページでフルパス名を表現できない場合に ANSI パス名を返します。</target>
        </trans-unit>
        <trans-unit id="608c69ec5dc593b8e31469808e911c9b8c28fab1" translate="yes" xml:space="preserve">
          <source>If tcsh is your login shell then use the setenv command.</source>
          <target state="translated">tcsh がログインシェルであれば、setenv コマンドを使用してください。</target>
        </trans-unit>
        <trans-unit id="6722301f4d6d5b294f3eee46d693b203a67e97d7" translate="yes" xml:space="preserve">
          <source>If that doesn't make much sense, consider the analogy of a command pipeline. Say you have a shell script stored in the compressed file</source>
          <target state="translated">もしそれがあまり意味をなさないのであれば、コマンドパイプラインの類推を考えてみてください。シェルスクリプトが圧縮ファイル</target>
        </trans-unit>
        <trans-unit id="e0190f66a1f731aebdad4c16cbe570cf5e90169e" translate="yes" xml:space="preserve">
          <source>If that doesn't suit your needs, you can explicitly set the filename used in the zip archive by specifying the &lt;a href=&quot;#File-Naming-Options&quot;&gt;Name&lt;/a&gt; option, like so</source>
          <target state="translated">それがニーズに合わない場合は、[&lt;a href=&quot;#File-Naming-Options&quot;&gt;名前&lt;/a&gt;]オプションを指定して、zipアーカイブで使用されるファイル名を明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="0ce337d0a942d7a20e0ccbeff20a1fe0816cdba5" translate="yes" xml:space="preserve">
          <source>If that doesn't work (it relies on features of your stdio implementation), then you need something more like this:</source>
          <target state="translated">もしそれがうまくいかない(stdioの実装の機能に依存している)場合は、以下のようなものが必要になります。</target>
        </trans-unit>
        <trans-unit id="ace9cde0327f63e0372278440efb1605dee92be3" translate="yes" xml:space="preserve">
          <source>If that doesn't work (some I/O implementations are particularly cantankerous), you might need something like this:</source>
          <target state="translated">それがうまくいかない場合(I/Oの実装の中には、特にカンタンなものもあります)、次のようなものが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="76b21d1151e484221dbc92ea1c2c56d3ec4082a9" translate="yes" xml:space="preserve">
          <source>If that doesn't work, give up on your stdio package and use sysread.</source>
          <target state="translated">それでもうまくいかない場合は、stdio パッケージをあきらめて sysread を使ってください。</target>
        </trans-unit>
        <trans-unit id="0580b926aa13464eaf5222ef23bd075e2a2e806d" translate="yes" xml:space="preserve">
          <source>If that doesn't work, try seeking to a different part of the file and then back.</source>
          <target state="translated">それがうまくいかない場合は、ファイルの別の部分を探してから戻ってみてください。</target>
        </trans-unit>
        <trans-unit id="b4eb30982662b9e20db4ab3ae1666e6a76a6e58a" translate="yes" xml:space="preserve">
          <source>If that doesn't work, try seeking to a different part of the file, reading something, and then seeking back.</source>
          <target state="translated">それがうまくいかない場合は、ファイルの別の部分にシークして、何かを読み込んでからシークバックしてみてください。</target>
        </trans-unit>
        <trans-unit id="4c63d398b08eb5cb7f3f37514cbe92856008dc42" translate="yes" xml:space="preserve">
          <source>If that gives too much output every day, you may want to watch only for three modules. You can write</source>
          <target state="translated">それで毎日出力が出すぎてしまうのであれば、3つのモジュールだけ見ていた方がいいかもしれません。以下のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="b86041bbbb4cc3f3c7bede4e6b1882292fbc734e" translate="yes" xml:space="preserve">
          <source>If that module is not available, then HTTP::Tiny will search several system-specific default locations for a CA certificate file:</source>
          <target state="translated">そのモジュールが利用できない場合、HTTP::Tiny は CA 証明書ファイルのためのシステム固有のデフォルトの場所をいくつか検索します。</target>
        </trans-unit>
        <trans-unit id="0c73f5392dc820a97b0a4426cb998de73cb28f26" translate="yes" xml:space="preserve">
          <source>If that warnings category has been set to &quot;FATAL&quot; in the calling module then die. Otherwise return.</source>
          <target state="translated">呼び出し元のモジュールでその警告カテゴリが &quot;FATAL &quot;に設定されている場合はdieします。そうでなければ戻ります。</target>
        </trans-unit>
        <trans-unit id="313f3cd86007469b883802f17e39affb3f8c8794" translate="yes" xml:space="preserve">
          <source>If that warnings category has been set to &quot;FATAL&quot; in the scope where &lt;code&gt;$object&lt;/code&gt; is first used then die. Otherwise return.</source>
          <target state="translated">&lt;code&gt;$object&lt;/code&gt; が最初に使用されるスコープでその警告カテゴリが「FATAL」に設定されている場合は、終了します。それ以外の場合は戻ります。</target>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="translated">の場合は</target>
        </trans-unit>
        <trans-unit id="dea88bea19f46633af98810723372bbf40ef70b7" translate="yes" xml:space="preserve">
          <source>If the &quot;bitwise&quot; feature is enabled (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;), a fifth TRUE argument is passed to subroutines handling &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt;. This indicates that the caller is expecting numeric behaviour. The fourth argument will be &lt;code&gt;undef&lt;/code&gt;, as that position (&lt;code&gt;$_[3]&lt;/code&gt;) is reserved for use by &lt;a href=&quot;#nomethod&quot;&gt;&quot;nomethod&quot;&lt;/a&gt;.</source>
          <target state="translated">「ビット単位」機能が有効になっている場合（&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照）、5番目のTRUE引数が &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; を処理するサブルーチンに渡されます。、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;~&lt;/code&gt; 。これは、呼び出し元が数値の動作を期待していることを示しています。4番目の引数は &lt;code&gt;undef&lt;/code&gt; になります。これは、その位置（ &lt;code&gt;$_[3]&lt;/code&gt; ）が&lt;a href=&quot;#nomethod&quot;&gt;「nomethod」&lt;/a&gt;で使用するために予約されているためです。</target>
        </trans-unit>
        <trans-unit id="961ec9e4bcc802a6b4814ce90b4ef69a38577267" translate="yes" xml:space="preserve">
          <source>If the &quot;bitwise&quot; feature is enabled via &lt;code&gt;use feature 'bitwise'&lt;/code&gt; or &lt;code&gt;use v5.28&lt;/code&gt;, then this operator always treats its operands as numbers. Before Perl 5.28 this feature produced a warning in the &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; category.</source>
          <target state="translated">「ビット単位」機能が &lt;code&gt;use feature 'bitwise'&lt;/code&gt; または &lt;code&gt;use v5.28&lt;/code&gt; を使用して有効になっている場合、この演算子は常にそのオペランドを数値として扱います。Perl 5.28より前では、この機能は &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; カテゴリで警告を生成していました。</target>
        </trans-unit>
        <trans-unit id="64579e960549e55b6b337ed2444636b1b80df4aa" translate="yes" xml:space="preserve">
          <source>If the &quot;bitwise&quot; feature is enabled via &lt;code&gt;use feature 'bitwise'&lt;/code&gt; or &lt;code&gt;use v5.28&lt;/code&gt;, then this operator always treats its operands as numbers. Before Perl 5.28. this feature produced a warning in the &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; category.</source>
          <target state="translated">「ビット単位」機能が &lt;code&gt;use feature 'bitwise'&lt;/code&gt; または &lt;code&gt;use v5.28&lt;/code&gt; を使用して有効になっている場合、この演算子は常にそのオペランドを数値として扱います。Perl5.28より前。この機能により、 &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; カテゴリで警告が生成されました。</target>
        </trans-unit>
        <trans-unit id="27af0b330e562f7c0bf54946fd3c82282b9d8b27" translate="yes" xml:space="preserve">
          <source>If the &quot;bitwise&quot; feature is enabled via &lt;code&gt;use feature 'bitwise'&lt;/code&gt; or &lt;code&gt;use v5.28&lt;/code&gt;, then unary &lt;code&gt;&quot;~&quot;&lt;/code&gt; always treats its argument as a number, and an alternate form of the operator, &lt;code&gt;&quot;~.&quot;&lt;/code&gt;, always treats its argument as a string. So &lt;code&gt;~0&lt;/code&gt; and &lt;code&gt;~&quot;0&quot;&lt;/code&gt; will both give 2**32-1 on 32-bit platforms, whereas &lt;code&gt;~.0&lt;/code&gt; and &lt;code&gt;~.&quot;0&quot;&lt;/code&gt; will both yield &lt;code&gt;&quot;\xff&quot;&lt;/code&gt;. Until Perl 5.28, this feature produced a warning in the &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; category.</source>
          <target state="translated">「ビット単位」機能が &lt;code&gt;use feature 'bitwise'&lt;/code&gt; または &lt;code&gt;use v5.28&lt;/code&gt; を使用して有効になっている場合、単項 &lt;code&gt;&quot;~&quot;&lt;/code&gt; 常にその引数を数値として扱い、演算子の代替形式「〜」を扱います &lt;code&gt;&quot;~.&quot;&lt;/code&gt; 、常にその引数を文字列として扱います。だから、 &lt;code&gt;~0&lt;/code&gt; と &lt;code&gt;~&quot;0&quot;&lt;/code&gt; 意志の32ビット・プラットフォーム上の両方ギブ2 ** 32-1のに対し、 &lt;code&gt;~.0&lt;/code&gt; と &lt;code&gt;~.&quot;0&quot;&lt;/code&gt; 意志の両方の利回り &lt;code&gt;&quot;\xff&quot;&lt;/code&gt; 。Perl 5.28まで、この機能は &lt;code&gt;&quot;experimental::bitwise&quot;&lt;/code&gt; カテゴリで警告を生成していました。</target>
        </trans-unit>
        <trans-unit id="4493cf703f913ddbd099cc80db075e294c3617b1" translate="yes" xml:space="preserve">
          <source>If the &quot;external&quot; protocol is specified, the ping() method attempts to use the &lt;code&gt;Net::Ping::External&lt;/code&gt; module to ping the remote host. &lt;code&gt;Net::Ping::External&lt;/code&gt; interfaces with your system's default &lt;code&gt;ping&lt;/code&gt; utility to perform the ping, and generally produces relatively accurate results. If &lt;code&gt;Net::Ping::External&lt;/code&gt; if not installed on your system, specifying the &quot;external&quot; protocol will result in an error.</source>
          <target state="translated">「外部」プロトコルが指定されている場合、ping（）メソッドは、 &lt;code&gt;Net::Ping::External&lt;/code&gt; モジュールを使用してリモートホストにpingを送信しようとします。 &lt;code&gt;Net::Ping::External&lt;/code&gt; は、システムのデフォルトの &lt;code&gt;ping&lt;/code&gt; ユーティリティとインターフェイスしてpingを実行し、通常は比較的正確な結果を生成します。場合 &lt;code&gt;Net::Ping::External&lt;/code&gt; システムにインストールされていない場合は、「外部」プロトコルを指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="b022b01a378125712b4875c54365686882089f63" translate="yes" xml:space="preserve">
          <source>If the &quot;icmp&quot; protocol is specified, the ping() method sends an icmp echo message to the remote host, which is what the UNIX ping program does. If the echoed message is received from the remote host and the echoed information is correct, the remote host is considered reachable. Specifying the &quot;icmp&quot; protocol requires that the program be run as root or that the program be setuid to root.</source>
          <target state="translated">icmp&quot; プロトコルが指定されている場合、ping()メソッドはリモートホストに icmp エコーメッセージを送信します。エコーされたメッセージがリモートホストから受信され、エコーされた情報が正しければ、リモートホストは到達可能であるとみなされます。icmp&quot; プロトコルを指定するには、プログラムを root として実行するか、 プログラムの setuid を root に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="20101303a26c3ad1b48f828a91b98648450fed40" translate="yes" xml:space="preserve">
          <source>If the &quot;syn&quot; protocol is specified, the &lt;a href=&quot;#ping&quot;&gt;&quot;ping&quot;&lt;/a&gt; method will only send a TCP SYN packet to the remote host then immediately return. If the syn packet was sent successfully, it will return a true value, otherwise it will return false. NOTE: Unlike the other protocols, the return value does NOT determine if the remote host is alive or not since the full TCP three-way handshake may not have completed yet. The remote host is only considered reachable if it receives a TCP ACK within the timeout specified. To begin waiting for the ACK packets, use the &lt;a href=&quot;#ack&quot;&gt;&quot;ack&quot;&lt;/a&gt; method as explained below. Use the &quot;syn&quot; protocol instead the &quot;tcp&quot; protocol to determine reachability of multiple destinations simultaneously by sending parallel TCP SYN packets. It will not block while testing each remote host. This protocol does not require any special privileges.</source>
          <target state="translated">「syn」プロトコルが指定されている場合、&lt;a href=&quot;#ping&quot;&gt;「ping」&lt;/a&gt;メソッドはTCP SYNパケットのみをリモートホストに送信し、すぐに戻ります。 synパケットが正常に送信された場合は、true値を返します。それ以外の場合は、falseを返します。注：他のプロトコルとは異なり、完全なTCPスリーウェイハンドシェイクがまだ完了していない可能性があるため、戻り値はリモートホストが生きているかどうかを決定しません。リモートホストは、指定されたタイムアウト内にTCPACKを受信した場合にのみ到達可能と見なされます。 ACKパケットの待機を開始するには、&lt;a href=&quot;#ack&quot;&gt;「ack」を&lt;/a&gt;使用します以下に説明する方法。「tcp」プロトコルの代わりに「syn」プロトコルを使用して、並列TCP SYNパケットを送信することにより、複数の宛先の到達可能性を同時に判断します。各リモートホストのテスト中はブロックされません。このプロトコルには特別な特権は必要ありません。</target>
        </trans-unit>
        <trans-unit id="c3280089081e0a65bf27928777cbd13d99f6f66b" translate="yes" xml:space="preserve">
          <source>If the &quot;syn&quot; protocol is specified, the ping() method will only send a TCP SYN packet to the remote host then immediately return. If the syn packet was sent successfully, it will return a true value, otherwise it will return false. NOTE: Unlike the other protocols, the return value does NOT determine if the remote host is alive or not since the full TCP three-way handshake may not have completed yet. The remote host is only considered reachable if it receives a TCP ACK within the timeout specified. To begin waiting for the ACK packets, use the ack() method as explained below. Use the &quot;syn&quot; protocol instead the &quot;tcp&quot; protocol to determine reachability of multiple destinations simultaneously by sending parallel TCP SYN packets. It will not block while testing each remote host. demo/fping is provided in this distribution to demonstrate the &quot;syn&quot; protocol as an example. This protocol does not require any special privileges.</source>
          <target state="translated">syn&quot; プロトコルが指定されている場合、ping()メソッドは TCP SYN パケットのみをリモートホストに送信し、すぐに戻ります。SYN パケットが正常に送信された場合は真の値を返し、そうでない場合は偽の値を返します。注意:他のプロトコルとは異なり、完全な TCP 三者間ハンドシェイクがまだ完了していない可能性があるため、戻り値はリモートホストが生きているかどうかを判断しません。リモートホストは、指定されたタイムアウト時間内に TCP ACK を受信した場合にのみ到達可能とみなされます。ACK パケットを待ち始めるには、以下に説明するように ack()メソッドを使用してください。TCP SYN パケットを並行して送信することで、複数の宛先の到達可能性を同時に判断するには、 「tcp」プロトコルの代わりに「SYN」プロトコルを使用してください。各リモートホストをテストしている間は、ブロックされることはありません。このプロトコルは特別な権限を必要としません。</target>
        </trans-unit>
        <trans-unit id="7238cf0824cb05db1486e3141c96b6c642d31d1f" translate="yes" xml:space="preserve">
          <source>If the &quot;user:password&quot; stanza contains reserved characters, they must be percent-escaped:</source>
          <target state="translated">user:password」スタンザに予約文字が含まれている場合は、パーセンテージでエスケープしなければなりません。</target>
        </trans-unit>
        <trans-unit id="318d6b49d6250a4816190433cf297845eb70cba7" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the crc value will be reset.</source>
          <target state="translated">$ crcパラメータが &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、crc値はリセットされます。</target>
        </trans-unit>
        <trans-unit id="abcc06c7fad286b05b36114515df89ab3f899db0" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the crc value will be reset.</source>
          <target state="translated">$ crcパラメータが &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、crc値はリセットされます。</target>
        </trans-unit>
        <trans-unit id="0e9952545241861fa2f27861c631fbcce0156104" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;undef&lt;/code&gt;, the crc value will be reset.</source>
          <target state="translated">$ crcパラメーターが &lt;code&gt;undef&lt;/code&gt; の場合、crc値はリセットされます。</target>
        </trans-unit>
        <trans-unit id="302e31c3384df8bb8c31ef52a9d8291c6e65b38e" translate="yes" xml:space="preserve">
          <source>If the $must_be_file argument is provided and is TRUE, then return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless the image looks like it belongs to a file dump.</source>
          <target state="translated">$ must_be_file引数が指定され、TRUEの場合、イメージがファイルダンプに属しているように見えない限り、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="32046e73c61ab6dfbb991e61669caae203688f3e" translate="yes" xml:space="preserve">
          <source>If the $must_be_file argument is provided and is TRUE, then return &lt;code&gt;undef&lt;/code&gt; unless the image looks like it belongs to a file dump.</source>
          <target state="translated">$ must_be_file引数が指定されていてTRUEの場合、画像がファイルダンプに属しているように見えない限り、 &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="865165ad77b0593f721d466f6d0ebabfe1d34482" translate="yes" xml:space="preserve">
          <source>If the $string is &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">$ stringが &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; の場合、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="688f0ecd47d63e749a9dd5c5cac2e57d32b8ed3a" translate="yes" xml:space="preserve">
          <source>If the $string is &lt;code&gt;undef&lt;/code&gt;, then &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">$ stringが &lt;code&gt;undef&lt;/code&gt; の場合、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="076c07280263c9d15e3255695b14d837c538bc87" translate="yes" xml:space="preserve">
          <source>If the &amp;lt;$input_filename_or_reference&amp;gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for reading and the input data will be read from it.</source>
          <target state="translated">&amp;lt;$ input_filename_or_reference&amp;gt;パラメータが単純なスカラーの場合、ファイル名と見なされます。このファイルは読み取り用に開かれ、入力データがそこから読み取られます。</target>
        </trans-unit>
        <trans-unit id="e6e87357913d48be4073006d8b0866ceef5457d5" translate="yes" xml:space="preserve">
          <source>If the 'name' is '&amp;amp;' the corresponding entry in the PAD is a CV representing a possible closure.</source>
          <target state="translated">「名前」が「＆」の場合、PADの対応するエントリは、可能なクロージャを表すCVです。</target>
        </trans-unit>
        <trans-unit id="85fe5da8ded285f9f24f40aa84216e564fcc0c0a" translate="yes" xml:space="preserve">
          <source>If the 'name' is &lt;code&gt;&amp;amp;&lt;/code&gt; the corresponding entry in the PAD is a CV representing a possible closure.</source>
          <target state="translated">'name'が &lt;code&gt;&amp;amp;&lt;/code&gt; の場合、PADの対応するエントリは、可能なクロージャを表すCVです。</target>
        </trans-unit>
        <trans-unit id="cab0adefdbb8eb1bb75234fb2c512e529ae68ac9" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;Mozilla::CA&quot;&gt;Mozilla::CA&lt;/a&gt; module is installed, HTTP::Tiny will use the CA file included with it as a source of trusted CA's. (This means you trust Mozilla, the author of Mozilla::CA, the CPAN mirror where you got Mozilla::CA, the toolchain used to install it, and your operating system security, right?)</source>
          <target state="translated">場合&lt;a href=&quot;Mozilla::CA&quot;&gt;はMozilla :: CAの&lt;/a&gt;モジュールがインストールされている、HTTP ::タイニーは、信頼できるCAの源としてそれに含まれているCAファイルを使用します。（これは、Mozilla :: CAの作成者であるMozilla、Mozilla :: CAを入手したCPANミラー、それをインストールするために使用したツールチェーン、およびオペレーティングシステムのセキュリティを信頼していることを意味します。）</target>
        </trans-unit>
        <trans-unit id="45cb5ded2282f7dcd41dd84a212cb40770ba3961" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;-W&lt;/b&gt; flag is used on the command line, it will enable all warnings throughout the program regardless of whether warnings were disabled locally using &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; or &lt;code&gt;$^W =0&lt;/code&gt; . This includes all files that get included via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;. Think of it as the Perl equivalent of the &quot;lint&quot; command.</source>
          <target state="translated">場合は&lt;b&gt;-W&lt;/b&gt;フラグは、コマンドラインで使用され、それは関係なく、警告は使用していないローカルで無効にされたかどうかのプログラム全体のすべての警告を有効にします &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; や &lt;code&gt;$^W =0&lt;/code&gt; 。これには、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; によってインクルードされるすべてのファイルが含まれます。Perlの「lint」コマンドと同等のものと考えてください。</target>
        </trans-unit>
        <trans-unit id="67f0f299ae6f5832a23754313dcbdf3deeea5b62" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;-W&lt;/b&gt; flag is used on the command line, it will enable all warnings throughout the program regardless of whether warnings were disabled locally using &lt;code&gt;no warnings&lt;/code&gt; or &lt;code&gt;$^W =0&lt;/code&gt;. This includes all files that get included via &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;do&lt;/code&gt;. Think of it as the Perl equivalent of the &quot;lint&quot; command.</source>
          <target state="translated">場合は&lt;b&gt;-W&lt;/b&gt;フラグは、コマンドラインで使用され、それは関係なく、警告は使用していないローカルで無効にされたかどうかのプログラム全体のすべての警告を有効にします &lt;code&gt;no warnings&lt;/code&gt; や &lt;code&gt;$^W =0&lt;/code&gt; 。これには、 &lt;code&gt;use&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、または &lt;code&gt;do&lt;/code&gt; を介して含まれるすべてのファイルが含まれます。これは、Perlで「lint」コマンドに相当するものと考えてください。</target>
        </trans-unit>
        <trans-unit id="544ad5b88e657a2b04055790eb69377a583771e6" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;ExtUtils::Embed&lt;/b&gt; module isn't part of your Perl distribution, you can retrieve it from &lt;a href=&quot;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&quot;&gt;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&lt;/a&gt; (If this documentation came from your Perl distribution, then you're running 5.004 or better and you already have it.)</source>
          <target state="translated">場合&lt;b&gt;のExtUtils ::埋め込み&lt;/b&gt;モジュールは、あなたのPerl配布の一部ではありません、あなたはからそれを取り出すことができ&lt;a href=&quot;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&quot;&gt;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&lt;/a&gt;このドキュメントがあなたから来た場合は（ Perlディストリビューションの場合、5.004以上を実行していて、すでにそれを持っています。）</target>
        </trans-unit>
        <trans-unit id="e9d6651b3488b419cbb556cfd921ab740de960ba" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;ExtUtils::Embed&lt;/b&gt; module isn't part of your Perl distribution, you can retrieve it from &lt;a href=&quot;https://metacpan.org/pod/ExtUtils::Embed&quot;&gt;https://metacpan.org/pod/ExtUtils::Embed&lt;/a&gt; (If this documentation came from your Perl distribution, then you're running 5.004 or better and you already have it.)</source>
          <target state="translated">場合&lt;b&gt;のExtUtils ::埋め込み&lt;/b&gt;モジュールは、あなたのPerl配布の一部ではありません、あなたはからそれを取り出すことができ&lt;a href=&quot;https://metacpan.org/pod/ExtUtils::Embed&quot;&gt;https://metacpan.org/pod/ExtUtils::Embed&lt;/a&gt;このドキュメントがあなたのPerl配布から来た場合は、（あなたが実行しています5.004以上で、すでにお持ちです。）</target>
        </trans-unit>
        <trans-unit id="40e97ddfc26315857071022b6a58a8c5330f9bda" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;-S&quot;&lt;/code&gt; or &lt;code&gt;-&quot;S&quot;&lt;/code&gt; switch is present</source>
          <target state="translated">場合は &lt;code&gt;&quot;-S&quot;&lt;/code&gt; または &lt;code&gt;-&quot;S&quot;&lt;/code&gt; スイッチが存在し、</target>
        </trans-unit>
        <trans-unit id="bcfb6b5f36fe9b097b6d4cfdd0d5b8347d4498d3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;#!&lt;/code&gt; line does not contain the word &quot;perl&quot; nor the word &quot;indir&quot; the program named after the &lt;code&gt;#!&lt;/code&gt; is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do &lt;code&gt;#!&lt;/code&gt; , because they can tell a program that their SHELL is</source>
          <target state="translated">もし &lt;code&gt;#!&lt;/code&gt; 行には、「perl」という単語も「indir」という単語も含まれていません &lt;code&gt;#!&lt;/code&gt; Perlインタプリタの代わりに実行されます。これは少し奇妙ですが、 &lt;code&gt;#!&lt;/code&gt; を実行しないマシンの人々を助けます。、彼らは彼らのシェルがプログラムであることをプログラムに伝えることができるので</target>
        </trans-unit>
        <trans-unit id="604833b3bed6d2cdd6969680b3567a88335ca6e8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;#!&lt;/code&gt; line does not contain the word &quot;perl&quot; nor the word &quot;indir&quot;, the program named after the &lt;code&gt;#!&lt;/code&gt; is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do &lt;code&gt;#!&lt;/code&gt;, because they can tell a program that their SHELL is</source>
          <target state="translated">もし &lt;code&gt;#!&lt;/code&gt; 行には、「perl」という単語も「indir」という単語も含まれていません。これは、 &lt;code&gt;#!&lt;/code&gt; にちなんで名付けられたプログラムです。Perlインタプリタの代わりに実行されます。これは少し奇妙ですが、 &lt;code&gt;#!&lt;/code&gt; を実行しないマシンの人々を助けます！、彼らは彼らのシェルが</target>
        </trans-unit>
        <trans-unit id="263d47f71006c52e232d04a65727d383732b439a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; variable is set to a true value, no heuristics will be applied to UTF8/16/32, and the result will be limited to the suspects and &lt;code&gt;ascii&lt;/code&gt; .</source>
          <target state="translated">場合は &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; 変数が真の値に設定されている、何の経験則は、UTF8 / 16/32に適用されません、その結果は、容疑者とに制限されます &lt;code&gt;ascii&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="353ab226583ec1c10fd3aef68a690f9c11e31e86" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; variable is set to a true value, no heuristics will be applied to UTF8/16/32, and the result will be limited to the suspects and &lt;code&gt;ascii&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; 変数が真の値に設定されている、何の経験則は、UTF8 / 16/32に適用されません、その結果は、容疑者とに制限されます &lt;code&gt;ascii&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ad3f883582e4c647a3748b90c080c6161d8d898" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a filehandle, the compressed data will be read from it. The string '-' can be used as an alias for standard input.</source>
          <target state="translated">場合は &lt;code&gt;$input&lt;/code&gt; パラメータがファイルハンドルで、圧縮されたデータは、それから読み込まれます。文字列「-」は、標準入力のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="fe51b5d7f895a2847c85f0654d41581417ffbf8a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a filename, the value of &lt;code&gt;$input&lt;/code&gt; will be used for the</source>
          <target state="translated">場合は &lt;code&gt;$input&lt;/code&gt; パラメータがファイル名で、値 &lt;code&gt;$input&lt;/code&gt; 使用されます</target>
        </trans-unit>
        <trans-unit id="7b21ca0ba17da1de5557b8c2561a39c672e345ba" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a scalar, it is assumed to be a filename. This file will be opened for reading and the compressed data will be read from it.</source>
          <target state="translated">場合は &lt;code&gt;$input&lt;/code&gt; パラメータがスカラーである、ファイル名であると想定されます。このファイルは読み取り用に開かれ、圧縮データがそこから読み取られます。</target>
        </trans-unit>
        <trans-unit id="f3e74e002fc30cd5c7fe440b4d039e155035cde7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is not a filename, the</source>
          <target state="translated">&lt;code&gt;$input&lt;/code&gt; パラメータがファイル名でない場合、</target>
        </trans-unit>
        <trans-unit id="8c806bbadc7d9dce5be50aca2c285d39455523f0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is a filehandle, the input data will be read from it. The string '-' can be used as an alias for standard input.</source>
          <target state="translated">場合 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; パラメータがファイルハンドルで、入力されたデータは、それから読み込まれます。文字列「-」は、標準入力のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="b1c3cf35342f4c34421c4e26433c64dd55c114d3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for reading and the input data will be read from it.</source>
          <target state="translated">場合 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; パラメータが単純なスカラーである、ファイル名であると想定されます。このファイルは読み取り用に開かれ、入力データがそこから読み取られます。</target>
        </trans-unit>
        <trans-unit id="573972f31f94bcc5ce697159aca1ad87294adc22" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="translated">場合 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; パラメータは、他のタイプで、 &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="95490becd5727b45000e58c74b6e1c6ae0970e6a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;undef&lt;/code&gt; will be returned.</source>
          <target state="translated">場合 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; パラメータは、他のタイプで、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="6f4cccbcdf0c65cc8f40030797afae3d268325f9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$need&lt;/code&gt; argument is given then it will check that the current version (as defined by the $VERSION variable in the package) is greater than or equal to &lt;code&gt;$need&lt;/code&gt; ; it will die if this is not the case. This method is called automatically by the &lt;code&gt;VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$need&lt;/code&gt; 引数が指定され、それは、現在のバージョンは（パッケージで$ VERSION変数によって定義される）より大きいか等しいであることを確認します &lt;code&gt;$need&lt;/code&gt; 。そうでなければ死ぬでしょう。このメソッドは、 &lt;code&gt;VERSION&lt;/code&gt; 形式の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6a6a3d7b2f8102b10a0c4c1e7ed04569381bcca7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$need&lt;/code&gt; argument is given then it will check that the current version (as defined by the $VERSION variable in the package) is greater than or equal to &lt;code&gt;$need&lt;/code&gt;; it will die if this is not the case. This method is called automatically by the &lt;code&gt;VERSION&lt;/code&gt; form of &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$need&lt;/code&gt; 引数が指定され、それは、現在のバージョンは（パッケージで$ VERSION変数によって定義される）より大きいか等しいであることを確認します &lt;code&gt;$need&lt;/code&gt; 。そうでない場合は死にます。このメソッドは、 &lt;code&gt;VERSION&lt;/code&gt; 形式の &lt;code&gt;use&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4e612a8de15e6e3ebce7b57945845f8b7dc29222" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is a filehandle, the compressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがファイルハンドルで、圧縮されたデータは、それに書き込まれます。文字列「-」は、標準出力のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="ca1b12c1cf4a15c9b6156dfb74283d87ea201fd5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the compressed data will be written to it.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータは、単純なスカラーである、ファイル名であると想定されます。このファイルは書き込み用に開かれ、圧縮データが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="59757227a4fe8fdd27a95b595bd3ff8c8a163939" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータは、他のタイプがあり、 &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; undefを返します::新しいです。</target>
        </trans-unit>
        <trans-unit id="837bf156c80a35ed162d613d42ade6562e2894a9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt;::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータは、他のタイプがあり、 &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; undefを返します::新しいです。</target>
        </trans-unit>
        <trans-unit id="cadc0cd9a0990edba8eef6811ffbf43a8f495bbc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがある他のタイプ、 &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; ::新しいはundefを返します。</target>
        </trans-unit>
        <trans-unit id="196148e89da9cfbfe329bbc55db61beb8a5968d9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Deflate&lt;/code&gt;::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがある他のタイプ、 &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; ::新しいはundefを返します。</target>
        </trans-unit>
        <trans-unit id="3e714bc9d0ca60a68f45566881bf3e6145bc1ce5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータは、他のタイプがあり、 &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; undefを返します::新しいです。</target>
        </trans-unit>
        <trans-unit id="08b9bed1be5f46be48a5455f8dcb9b223a356d8d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Gzip&lt;/code&gt;::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータは、他のタイプがあり、 &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; undefを返します::新しいです。</target>
        </trans-unit>
        <trans-unit id="876928fea8ebdaa591df8075f9c404fb23d04a28" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがある他のタイプ、 &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; ::新しいはundefを返します。</target>
        </trans-unit>
        <trans-unit id="5fc1018e332332481571232c14a9c9881c4640fa" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt;::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがある他のタイプ、 &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; ::新しいはundefを返します。</target>
        </trans-unit>
        <trans-unit id="38552f9e6ec9c67c09d8bddc8275dd8bdd5d8803" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Zip&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがある他のタイプ、 &lt;code&gt;IO::Compress::Zip&lt;/code&gt; ::新しいはundefを返します。</target>
        </trans-unit>
        <trans-unit id="c1b6039aa2ae2d0c506fff4cceb4d05934eba7f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Zip&lt;/code&gt;::new will return undef.</source>
          <target state="translated">場合は &lt;code&gt;$output&lt;/code&gt; パラメータがある他のタイプ、 &lt;code&gt;IO::Compress::Zip&lt;/code&gt; ::新しいはundefを返します。</target>
        </trans-unit>
        <trans-unit id="cc18113fea92f93f29a91b56f7f76e4dd3fc2c3e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a filehandle, the compressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータがファイルハンドルで、圧縮されたデータは、それに書き込まれます。文字列「-」は、標準出力のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="b000e8d3bf3971a53c3d271eb802381bc6b99814" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a filehandle, the uncompressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータがファイルハンドルで、非圧縮データがそこに書き込まれます。文字列「-」は、標準出力のエイリアスとして使用できます。</target>
        </trans-unit>
        <trans-unit id="4843925dd2f30aabd060449fee92e5566394585d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the compressed data will be written to it.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータが単純なスカラーである、ファイル名であると想定されます。このファイルは書き込み用に開かれ、圧縮データが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="82c61471bec0e7ab85ea6d51b841a7cd924bb91c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the uncompressed data will be written to it.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータが単純なスカラーである、ファイル名であると想定されます。このファイルは書き込み用に開かれ、非圧縮データが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="171f6debdc3c19e16dbddc9b4ccb5eb09a1f9e1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータは、他のタイプで、 &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7817f217aafc05c7b99d4b799af6c64aa75fd355" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;undef&lt;/code&gt; will be returned.</source>
          <target state="translated">場合 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; パラメータは、他のタイプで、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="2259a2e974894cbf8831f8e74de6dee67d652d9c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$regexp&lt;/code&gt; variable contains a code expression, the user could then execute arbitrary Perl code. For instance, some joker could search for &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;('rm -rf *');&lt;/code&gt; to erase your files. In this sense, the combination of interpolation and code expressions</source>
          <target state="translated">&lt;code&gt;$regexp&lt;/code&gt; 変数にコード式が含まれている場合、ユーザーは任意のPerlコードを実行できます。たとえば、一部のジョーカーは &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;('rm -rf *');&lt;/code&gt; 検索できます。ファイルを消去します。この意味で、補間とコード式の組み合わせ</target>
        </trans-unit>
        <trans-unit id="f36385595fbe40440c2dd4edd9a51197f185c95d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$regexp&lt;/code&gt; variable contains a code expression, the user could then execute arbitrary Perl code. For instance, some joker could search for &lt;code&gt;system('rm -rf *');&lt;/code&gt; to erase your files. In this sense, the combination of interpolation and code expressions</source>
          <target state="translated">&lt;code&gt;$regexp&lt;/code&gt; 変数にコード式が含まれている場合、ユーザーは任意のPerlコードを実行できます。たとえば、一部のジョーカーは &lt;code&gt;system('rm -rf *');&lt;/code&gt; を検索できます。ファイルを消去します。この意味で、補間とコード式の組み合わせ</target>
        </trans-unit>
        <trans-unit id="cead10e67b406c29ab565d567b9609063d5776ca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a buffer, this method will return &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$z&lt;/code&gt; オブジェクトがバッファに関連付けられている場合、このメソッドは &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4e56611d957be7289e8984a9c8a2d5654cbe3409" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a buffer, this method will return &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$z&lt;/code&gt; オブジェクトがバッファに関連付けられている場合、このメソッドは &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="58dcaddb355cecd931c021172a4bedf908dd76a9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; will return the underlying file descriptor. Once the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method is called &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; will return &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$z&lt;/code&gt; オブジェクトがファイルまたはファイルハンドルに関連付けられている、 &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 基礎となるファイルディスクリプタを返します。いったん &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; メソッドが呼び出され &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 返されます &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="fd0509a249a2be85806909612af8871ff25800ff" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, &lt;code&gt;fileno&lt;/code&gt; will return the underlying file descriptor. Once the &lt;code&gt;close&lt;/code&gt; method is called &lt;code&gt;fileno&lt;/code&gt; will return &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;$z&lt;/code&gt; オブジェクトがファイルまたはファイルハンドルに関連付けられている、 &lt;code&gt;fileno&lt;/code&gt; 基礎となるファイルディスクリプタを返します。いったん &lt;code&gt;close&lt;/code&gt; メソッドが呼び出され &lt;code&gt;fileno&lt;/code&gt; 返されます &lt;code&gt;undef&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c8acbfda88a1601bef7d039c62529de82f9b15c5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, this method returns the current autoflush setting for the underlying filehandle. If &lt;code&gt;EXPR&lt;/code&gt; is present, and is non-zero, it will enable flushing after every write/print operation.</source>
          <target state="translated">場合は &lt;code&gt;$z&lt;/code&gt; オブジェクトは、ファイルまたはファイルハンドルに関連付けされ、この方法は、基礎となるファイルハンドルの現在の自動フラッシュの設定を返します。場合 &lt;code&gt;EXPR&lt;/code&gt; が存在し、非ゼロである、それはすべての書き込み/印刷操作の後にフラッシュするようになります。</target>
        </trans-unit>
        <trans-unit id="4f22b38f141c1394908e5c44c3cf641e6013a601" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;(*ACCEPT)&lt;/code&gt; is inside of capturing groups then the groups are marked as ended at the point at which the &lt;code&gt;(*ACCEPT)&lt;/code&gt; was encountered. For instance:</source>
          <target state="translated">もし &lt;code&gt;(*ACCEPT)&lt;/code&gt; した時点で終了と、その後のグループがマークされているグループ取り込むの内側にある &lt;code&gt;(*ACCEPT)&lt;/code&gt; 検出されましたが。例えば：</target>
        </trans-unit>
        <trans-unit id="d96d9f9f8c91a22bdf7e1a3536eeb47596adfe1c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is disabled, the comment field can contain any character except NULL. If any null characters are present, the field will be truncated at the first NULL.</source>
          <target state="translated">場合 &lt;code&gt;-Strict&lt;/code&gt; オプションを無効にし、コメント欄には、NULL以外の任意の文字を含めることができます。NULL文字が存在する場合、フィールドは最初のNULLで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="8a0625a9517209d9c735d420fbb7b372c06cae56" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is enabled, &lt;code&gt;$string&lt;/code&gt; can only consist of ISO 8859-1 characters.</source>
          <target state="translated">&lt;code&gt;-Strict&lt;/code&gt; オプションが有効な場合、 &lt;code&gt;$string&lt;/code&gt; はISO 8859-1文字のみで構成できます。</target>
        </trans-unit>
        <trans-unit id="7e727e67c9a9b626ab111993b625d6fae0b44b5e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is enabled, the comment can only consist of ISO 8859-1 characters plus line feed.</source>
          <target state="translated">場合 &lt;code&gt;-Strict&lt;/code&gt; オプションが有効になっている、コメントはISO 8859-1文字とラインフィードで構成することができます。</target>
        </trans-unit>
        <trans-unit id="687858bb0364e03075315214e49915f4063efd20" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-i&lt;/code&gt; switch is present but no extension for a backup copy is given, then inplace editing creates a new version of a file; the existing copy is not deleted. (Note that if an extension is given, an existing file is renamed to the backup file, as is the case under other operating systems, so it does not remain as a previous version under the original filename.)</source>
          <target state="translated">&lt;code&gt;-i&lt;/code&gt; スイッチはあるがバックアップコピーの拡張子が指定されていない場合、インプレース編集によりファイルの新しいバージョンが作成されます。既存のコピーは削除されません。（拡張子が指定されている場合、他のオペレーティングシステムの場合と同様に、既存のファイルはバックアップファイルに名前が変更されるため、元のファイル名で以前のバージョンとして残ることはありません。）</target>
        </trans-unit>
        <trans-unit id="ee96a00037808dbdc95697095ca0c22513112f61" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-v&lt;/code&gt; option is present, column 1 is expanded to include</source>
          <target state="translated">&lt;code&gt;-v&lt;/code&gt; オプションが存在する場合、列1は次のように展開されます</target>
        </trans-unit>
        <trans-unit id="8e7588692ec4768237d3953ea6a6c6164462271b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;...Host&lt;/code&gt; argument is in this special form and the corresponding &lt;code&gt;...Service&lt;/code&gt; or &lt;code&gt;...Port&lt;/code&gt; argument is also defined, the one parsed from the &lt;code&gt;...Host&lt;/code&gt; argument will take precedence and the other will be ignored.</source>
          <target state="translated">場合 &lt;code&gt;...Host&lt;/code&gt; 引数は、この特殊な形態であり、対応する &lt;code&gt;...Service&lt;/code&gt; やは &lt;code&gt;...Port&lt;/code&gt; 引数も定義され、解析されたから1 &lt;code&gt;...Host&lt;/code&gt; 引数が優先され、その他は無視されます。</target>
        </trans-unit>
        <trans-unit id="4eacdf4c079f427c39ca731549e9ca77acc2ef88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/a&lt;/code&gt; modifier is in effect ...</source>
          <target state="translated">もし &lt;code&gt;/a&lt;/code&gt; 修飾子が有効になっています...</target>
        </trans-unit>
        <trans-unit id="e67bdd40f66f8b280f344ca0cd6466ca71728404" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/a&lt;/code&gt; modifier, is in effect ...</source>
          <target state="translated">&lt;code&gt;/a&lt;/code&gt; 修飾子が有効な場合、..。</target>
        </trans-unit>
        <trans-unit id="45a06195ed61d1ad05b053f7cec670bab3d1b47d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/c&lt;/code&gt; modifier is specified, the</source>
          <target state="translated">場合 &lt;code&gt;/c&lt;/code&gt; 修飾子が指定され、</target>
        </trans-unit>
        <trans-unit id="d41dfd0659ebb24e37b486d073bb483e95d40816" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/c&lt;/code&gt; modifier is specified, the characters to be transliterated are the ones NOT in</source>
          <target state="translated">&lt;code&gt;/c&lt;/code&gt; 修飾子が指定されている場合、音訳される文字は、文字変換されない文字です。</target>
        </trans-unit>
        <trans-unit id="d32f95725bf186859393e8afb0285f817b2b2c4d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/d&lt;/code&gt; modifier is specified, any characters specified by</source>
          <target state="translated">&lt;code&gt;/d&lt;/code&gt; 修飾子が指定されている場合、</target>
        </trans-unit>
        <trans-unit id="61f363164df63c08b01c2f8d842eb83178238fca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/d&lt;/code&gt; modifier is used, the</source>
          <target state="translated">場合 &lt;code&gt;/d&lt;/code&gt; 修飾子が使用され、</target>
        </trans-unit>
        <trans-unit id="228d53bdcd18fe101fa332b95e05c49d501e9bd9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/g&lt;/code&gt; option is not used, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; in list context returns a list consisting of the subexpressions matched by the parentheses in the pattern, that is, (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; ...) (Note that here &lt;code&gt;$1&lt;/code&gt; etc. are also set). When there are no parentheses in the pattern, the return value is the list &lt;code&gt;(1)&lt;/code&gt; for success. With or without parentheses, an empty list is returned upon failure.</source>
          <target state="translated">&lt;code&gt;/g&lt;/code&gt; オプションを使用しない場合、リストコンテキスト内の &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; は、パターン内の括弧に一致する部分式で構成されるリスト、つまり（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; ...）を返します（ここでは &lt;code&gt;$1&lt;/code&gt; などに注意してください）。も設定されています）。パターンに括弧がない場合、戻り値は成功のリスト &lt;code&gt;(1)&lt;/code&gt; です。括弧の有無にかかわらず、失敗すると空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="4847a17bc99ad2bd83a46004a16f9056518239f8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/g&lt;/code&gt; option is not used, &lt;code&gt;m//&lt;/code&gt; in list context returns a list consisting of the subexpressions matched by the parentheses in the pattern, that is, (&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt;...) (Note that here &lt;code&gt;$1&lt;/code&gt; etc. are also set). When there are no parentheses in the pattern, the return value is the list &lt;code&gt;(1)&lt;/code&gt; for success. With or without parentheses, an empty list is returned upon failure.</source>
          <target state="translated">&lt;code&gt;/g&lt;/code&gt; オプションが使用されていない場合、リストコンテキストの &lt;code&gt;m//&lt;/code&gt; は、パターン内の括弧と一致する部分式、つまり（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; ...）で構成されるリストを返します（ここでは &lt;code&gt;$1&lt;/code&gt; などであることに注意してください。も設定されています）。パターンに括弧がない場合、戻り値は成功のリスト &lt;code&gt;(1)&lt;/code&gt; です。括弧の有無にかかわらず、失敗すると空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="f3f80ef36f0d767bd1b67ec24494f102a4ec7c1e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/r&lt;/code&gt; (non-destructive) option is present, a new copy of the string is made and its characters transliterated, and this copy is returned no matter whether it was modified or not: the original string is always left unchanged. The new copy is always a plain string, even if the input string is an object or a tied variable.</source>
          <target state="translated">場合 &lt;code&gt;/r&lt;/code&gt; （非破壊）オプションが指定されている、文字列の新しいコピーが作られ、その文字が音訳、このコピーは、それが変更されたかどうかに関係なく返されます。元の文字列は常に変更されないままです。入力文字列がオブジェクトまたは結合変数であっても、新しいコピーは常にプレーン文字列です。</target>
        </trans-unit>
        <trans-unit id="a9229f75d9765b6c9e80a754666b4ec3786ce235" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/r&lt;/code&gt; (non-destructive) option is used then it runs the substitution on a copy of the string and instead of returning the number of substitutions, it returns the copy whether or not a substitution occurred. The original string is never changed when &lt;code&gt;/r&lt;/code&gt; is used. The copy will always be a plain string, even if the input is an object or a tied variable.</source>
          <target state="translated">場合 &lt;code&gt;/r&lt;/code&gt; （非破壊）オプションが使用されている、それは文字列のコピーにし、代わりに置換数を返すの置換を実行し、それが置換が発生したか否かのコピーを返します。 &lt;code&gt;/r&lt;/code&gt; を使用しても、元の文字列は変更されません。入力がオブジェクトまたは結合変数であっても、コピーは常にプレーン文字列になります。</target>
        </trans-unit>
        <trans-unit id="c65b706b15e1b297f5f1c28d84acdcb1bb86c23a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/s&lt;/code&gt; modifier is specified, sequences of characters, all in a row, that were transliterated to the same character are squashed down to a single instance of that character.</source>
          <target state="translated">&lt;code&gt;/s&lt;/code&gt; 修飾子が指定されている場合、同じ文字に音訳されたすべての行の文字のシーケンスは、その文字の単一のインスタンスに押しつぶされます。</target>
        </trans-unit>
        <trans-unit id="98015ad9cab949396e11223bb4b809b828f32a12" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ADLER32&lt;/code&gt; option is not enabled in the constructor for this object, this method will always return 0;</source>
          <target state="translated">場合 &lt;code&gt;ADLER32&lt;/code&gt; オプションは、このオブジェクトのコンストラクタで有効になっていません、このメソッドは常に0を返します。</target>
        </trans-unit>
        <trans-unit id="e7e3cc3b120420d3fe3e5903cbe74d0d544abd6d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to false, the output buffers in the &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; and &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; methods will be truncated before uncompressed data is written to them.</source>
          <target state="translated">&lt;code&gt;AppendOutput&lt;/code&gt; オプションがfalseに設定されている場合、 &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; および &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; メソッドの出力バッファーは、圧縮されていないデータが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="dc67d2e9493b30b20a1a27f63c6bc36f875e42fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for the &lt;code&gt;$d&lt;/code&gt; object, the compressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any compressed data is written to it.</source>
          <target state="translated">場合 &lt;code&gt;AppendOutput&lt;/code&gt; のオプションはのコンストラクタでtrueに設定されている &lt;code&gt;$d&lt;/code&gt; オブジェクト、圧縮されたデータが追加されます &lt;code&gt;$output&lt;/code&gt; 。falseの場合、 &lt;code&gt;$output&lt;/code&gt; は圧縮データが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="894535f526af30d884a71d76dd392439745e70a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for the &lt;code&gt;$d&lt;/code&gt; object, the compressed data will be appended to &lt;code&gt;$output&lt;/code&gt;. If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any compressed data is written to it.</source>
          <target state="translated">場合 &lt;code&gt;AppendOutput&lt;/code&gt; のオプションはのコンストラクタでtrueに設定されている &lt;code&gt;$d&lt;/code&gt; オブジェクト、圧縮されたデータが追加されます &lt;code&gt;$output&lt;/code&gt; 。falseの場合、圧縮データが書き込まれる前に &lt;code&gt;$output&lt;/code&gt; が切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="241ec910d4c3fc198870214959a19e4587117b91" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for this object, the uncompressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any uncompressed data is written to it.</source>
          <target state="translated">場合 &lt;code&gt;AppendOutput&lt;/code&gt; のオプションは、このオブジェクトのコンストラクタでtrueに設定され、非圧縮データが追加されます &lt;code&gt;$output&lt;/code&gt; 。falseの場合、 &lt;code&gt;$output&lt;/code&gt; は圧縮されていないデータが書き込まれる前に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="41b5894e323b1e78083ec3fd1e539c059bbe6e54" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for this object, the uncompressed data will be appended to &lt;code&gt;$output&lt;/code&gt;. If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any uncompressed data is written to it.</source>
          <target state="translated">場合 &lt;code&gt;AppendOutput&lt;/code&gt; のオプションは、このオブジェクトのコンストラクタでtrueに設定され、非圧縮データが追加されます &lt;code&gt;$output&lt;/code&gt; 。falseの場合、非圧縮データが書き込まれる前に &lt;code&gt;$output&lt;/code&gt; が切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="23a4bdafd5b4aee2bfba5a403d17509d788319bb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Archive::Tar&lt;/code&gt; module is installed and either the &lt;code&gt;uncompress&lt;/code&gt; or &lt;code&gt;gunzip&lt;/code&gt; programs are available, you can use one of these workarounds to read &lt;code&gt;.tar.Z&lt;/code&gt; files.</source>
          <target state="translated">場合は &lt;code&gt;Archive::Tar&lt;/code&gt; モジュールがインストールされ、いずれか &lt;code&gt;uncompress&lt;/code&gt; または &lt;code&gt;gunzip&lt;/code&gt; コマンドのプログラムが用意されてい、あなたが読むためにこれらの回避策のいずれかを使用することができます &lt;code&gt;.tar.Z&lt;/code&gt; ののファイルを。</target>
        </trans-unit>
        <trans-unit id="da717ba776ac7b943780ea377cd85c35cc7f2655" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Bzip2 object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; IO ::圧縮:: Bzip2でオブジェクトが作成されたときにオプションが有効になっていると、オブジェクトはファイルに関連付けられている、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="2451f14f493fd0c1b2a744f1ca680885802c97fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Deflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::圧縮::デフレートオブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="a262cca6ca624ccbcc230f0a9a299f301469ea87" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Gzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::圧縮:: Gzipでオブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="e1abc2a1019c01d985ed7b90e95e969f6f299bf2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::RawDeflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::圧縮:: RawDeflateオブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="f5ea66329ad2b4187630d779016bfcf01873661d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Zip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; IO ::圧縮::ジップオブジェクトが作成されたときにオプションが有効になっていると、オブジェクトはファイルに関連付けられている、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="efa0131be286b8ee087293f106c69cc7176b941b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::AnyInflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; IO ::解凍:: AnyInflateオブジェクトが作成されたときにオプションが有効になっていると、オブジェクトはファイルに関連付けられている、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="d7295924866c46c6268e8a714d1d64a580c31683" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::AnyUncompress object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; IO ::解凍:: AnyUncompressオブジェクトが作成されたときにオプションが有効になっていると、オブジェクトはファイルに関連付けられている、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="d590344cfdd3022553efe336602191d1dbf477b6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Bunzip2 object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::解凍:: Bunzip2オブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="d48a250e20975c54010e5628db4f5baad9a34122" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Gunzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::解凍:: Gunzipのオブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="52452c9550cd8363c6c8237af362cc345e53f457" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Inflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; IO ::解凍::ふくらませるのオブジェクトが作成されたときにオプションが有効になっていると、オブジェクトはファイルに関連付けられている、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="34f0502573716752984911463b9f0d1cdbf46468" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::RawInflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::解凍:: RawInflateオブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="a4a69474f66acefa05c78e7afea37ef49d0b67b4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Unzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">場合 &lt;code&gt;AutoClose&lt;/code&gt; オプションが有効になっているIO ::解凍::解凍オブジェクトが作成された、オブジェクトがファイルに関連付けられている場合、基礎となるファイルも閉じられます。</target>
        </trans-unit>
        <trans-unit id="94bf536d1f0d5c1626e7c3b73aa7b49722d0966b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit is set in &lt;code&gt;gflags&lt;/code&gt; then it indicates that the caller only knows about the genuine GV version of &lt;code&gt;namegv&lt;/code&gt;, and accordingly the corresponding bit will always be set in &lt;code&gt;*ckflags_p&lt;/code&gt;, regardless of the check function's recorded requirements. If the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; bit is clear in &lt;code&gt;gflags&lt;/code&gt; then it indicates the caller knows about the possibility of passing something other than a GV as &lt;code&gt;namegv&lt;/code&gt;, and accordingly the corresponding bit may be either set or clear in &lt;code&gt;*ckflags_p&lt;/code&gt;, indicating the check function's recorded requirements.</source>
          <target state="translated">場合 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; のビットがセットされて &lt;code&gt;gflags&lt;/code&gt; それは、発信者が唯一の本物のGVバージョンについて知っていることを示し &lt;code&gt;namegv&lt;/code&gt; 、それに応じて対応するビットは常にに設定されます &lt;code&gt;*ckflags_p&lt;/code&gt; かかわらず、チェック機能の記録の要件、。場合 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; のビットがでクリアされ &lt;code&gt;gflags&lt;/code&gt; それは、発信者のようにGV以外の何かを渡すの可能性について知っている示し &lt;code&gt;namegv&lt;/code&gt; 、それに応じて対応するビットは、のいずれかでセットまたはクリアすることが可能 &lt;code&gt;*ckflags_p&lt;/code&gt; チェック機能の記録の要件を示し、。</target>
        </trans-unit>
        <trans-unit id="4c82a8f9dcfd859cf531bf1cebfe4f1f3355707c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CPAN_META_JSON_BACKEND&lt;/code&gt; environment variable does not exist, and if &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; environment variable exists, is true and is not &quot;JSON::PP&quot;, then the &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; module (version 2.5 or greater) will be loaded and used to interpret &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt;. If &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; is not installed or is too old, an exception will be thrown. Note that at the time of writing, the only useful values are 1, which will tell &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; to guess, or &lt;a href=&quot;JSON::XS&quot;&gt;JSON::XS&lt;/a&gt; - if you want to use a newer JSON module, see &lt;a href=&quot;#CPAN_META_JSON_BACKEND&quot;&gt;&quot;CPAN_META_JSON_BACKEND&quot;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;CPAN_META_JSON_BACKEND&lt;/code&gt; の環境変数が存在しない場合、および &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; の環境変数が存在し、真であり、「JSON :: PP」ではない場合、&lt;a href=&quot;json&quot;&gt;JSONの&lt;/a&gt;モジュール（バージョン2.5以上）をロードし、解釈するために使用される &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; を。場合は&lt;a href=&quot;json&quot;&gt;JSONが&lt;/a&gt;インストールまたは古すぎるされていない、例外がスローされます。これを書いている時点では、&lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt;に推測するように指示する1 、または&lt;a href=&quot;JSON::XS&quot;&gt;JSON :: XS&lt;/a&gt;のみが有用な値であることに注意してください。新しいJSONモジュールを使用する場合は、&lt;a href=&quot;#CPAN_META_JSON_BACKEND&quot;&gt;「CPAN_META_JSON_BACKEND」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c5ac2a9fbc05192cf46afe1261683a81419aaa4d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CRC32&lt;/code&gt; option is not enabled in the constructor for this object, this method will always return 0;</source>
          <target state="translated">場合 &lt;code&gt;CRC32&lt;/code&gt; のオプションは、このオブジェクトのコンストラクタで有効になっていません、このメソッドは常に0を返します。</target>
        </trans-unit>
        <trans-unit id="1078abcc96e5bc5e00a4c013f64ebcf42ad64647" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ConsumeInput&lt;/code&gt; option has been set to true when the &lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; object is created, the &lt;code&gt;$input&lt;/code&gt; parameter is modified by &lt;code&gt;inflate&lt;/code&gt; . On completion it will contain what remains of the input buffer after inflation. In practice, this means that when the return status is &lt;code&gt;Z_OK&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contain an empty string, and when the return status is &lt;code&gt;Z_STREAM_END&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</source>
          <target state="translated">&lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; オブジェクトの作成時に &lt;code&gt;ConsumeInput&lt;/code&gt; オプションがtrueに設定されている場合、 &lt;code&gt;$input&lt;/code&gt; パラメーターは &lt;code&gt;inflate&lt;/code&gt; によって変更されます。完了すると、インフレーション後の入力バッファーの残りが含まれます。実際には、これは、戻りステータスが &lt;code&gt;Z_OK&lt;/code&gt; の場合、 &lt;code&gt;$input&lt;/code&gt; パラメータに空の文字列が含まれ、戻りステータスが &lt;code&gt;Z_STREAM_END&lt;/code&gt; の場合、 &lt;code&gt;$input&lt;/code&gt; パラメータに、デフレートされたデータの後に入力バッファに格納されたもの（ある場合）が含まれることを意味します。ストリーム。</target>
        </trans-unit>
        <trans-unit id="fc67951579ca54e84043acbb0bb761bab4628359" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ConsumeInput&lt;/code&gt; option has been set to true when the &lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; object is created, the &lt;code&gt;$input&lt;/code&gt; parameter is modified by &lt;code&gt;inflate&lt;/code&gt;. On completion it will contain what remains of the input buffer after inflation. In practice, this means that when the return status is &lt;code&gt;Z_OK&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contain an empty string, and when the return status is &lt;code&gt;Z_STREAM_END&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</source>
          <target state="translated">&lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; オブジェクトの作成時に &lt;code&gt;ConsumeInput&lt;/code&gt; オプションがtrueに設定されている場合、 &lt;code&gt;$input&lt;/code&gt; パラメーターは &lt;code&gt;inflate&lt;/code&gt; によって変更されます。完了すると、インフレーション後に入力バッファーに残っているものが含まれます。実際には、これは、戻りステータスが &lt;code&gt;Z_OK&lt;/code&gt; の場合、 &lt;code&gt;$input&lt;/code&gt; パラメータには空の文字列が含まれ、戻りステータスが &lt;code&gt;Z_STREAM_END&lt;/code&gt; の場合、 &lt;code&gt;$input&lt;/code&gt; パラメータには、収縮したデータの後に入力バッファに格納されたもの（ある場合）が含まれることを意味します。ストリーム。</target>
        </trans-unit>
        <trans-unit id="6a12981a50e52bd8360e58342fda216fd19888ef" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; bit is</source>
          <target state="translated">場合は &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; ビットがあります</target>
        </trans-unit>
        <trans-unit id="62a22e2f1c67e582e14dc75490b36c8927949628" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;G_METHOD&lt;/code&gt; flag is supplied, the SV may be a reference to a CV or &lt;code&gt;SvPV(sv)&lt;/code&gt; will be used as the name of the method to call.</source>
          <target state="translated">場合 &lt;code&gt;G_METHOD&lt;/code&gt; のフラグが供給され、SVは、CVまたは参照することができる &lt;code&gt;SvPV(sv)&lt;/code&gt; 呼び出すメソッドの名前として使用されます。</target>
        </trans-unit>
        <trans-unit id="60434689d4799ff053da9df2280e53454e60d84f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;G_METHOD_NAMED&lt;/code&gt; flag is supplied, &lt;code&gt;SvPV(sv)&lt;/code&gt; will be used as the name of the method to call.</source>
          <target state="translated">&lt;code&gt;G_METHOD_NAMED&lt;/code&gt; フラグが指定されている場合、呼び出すメソッドの名前として &lt;code&gt;SvPV(sv)&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="1bd3991b928d2bed7eef1e209952394cc1a3b16f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Listen&lt;/code&gt; argument is given, but false, the queue size will be set to 5.</source>
          <target state="translated">場合 &lt;code&gt;Listen&lt;/code&gt; 引数が与えられたが、偽され、キューサイズは5に設定されます。</target>
        </trans-unit>
        <trans-unit id="1143100ee61e97ea2197747ccc58abb62c39ba7a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Minimal&lt;/code&gt; option is set to true, this option will be ignored.</source>
          <target state="translated">場合は &lt;code&gt;Minimal&lt;/code&gt; オプションがtrueに設定されている、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="9ef4eef7ec7365669f7a6fdd21df15f840876c21" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PERL_PV_PRETTY_ELLIPSES&lt;/code&gt; flag is set and not all characters in string were output then an ellipsis &lt;code&gt;...&lt;/code&gt; will be appended to the string. Note that this happens AFTER it has been quoted.</source>
          <target state="translated">場合 &lt;code&gt;PERL_PV_PRETTY_ELLIPSES&lt;/code&gt; のフラグが設定されていない文字列内のすべての文字を出力し、省略記号たさ &lt;code&gt;...&lt;/code&gt; 文字列に追加されます。これは、引用された後に発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="49e3d7b68bb44fc1098b8d656037c9de9b76dfb2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PERL_PV_PRETTY_QUOTE&lt;/code&gt; flag is set then the result will be double quoted with any double quotes in the string escaped. Otherwise if the &lt;code&gt;PERL_PV_PRETTY_LTGT&lt;/code&gt; flag is set then the result be wrapped in angle brackets.</source>
          <target state="translated">場合 &lt;code&gt;PERL_PV_PRETTY_QUOTE&lt;/code&gt; のフラグが設定されている結果は、二重エスケープされた文字列内の任意の二重引用符で引用されます。それ以外の場合、 &lt;code&gt;PERL_PV_PRETTY_LTGT&lt;/code&gt; フラグが設定されていると、結果は山かっこで囲まれます。</target>
        </trans-unit>
        <trans-unit id="113ffd5bd789ac46d3a6013680e6ad870731e0ce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;REQUEST_METHOD&lt;/code&gt; environment variable is set, then this might be a CGI process and &lt;code&gt;HTTP_PROXY&lt;/code&gt; would be set from the &lt;code&gt;Proxy:&lt;/code&gt; header, which is a security risk. If &lt;code&gt;REQUEST_METHOD&lt;/code&gt; is set, &lt;code&gt;HTTP_PROXY&lt;/code&gt; (the upper case variant only) is ignored.</source>
          <target state="translated">場合 &lt;code&gt;REQUEST_METHOD&lt;/code&gt; の環境変数が設定され、これはCGIプロセスであるかもしれないと &lt;code&gt;HTTP_PROXY&lt;/code&gt; をからに設定されます &lt;code&gt;Proxy:&lt;/code&gt; ヘッダを、セキュリティ上のリスクです。 &lt;code&gt;REQUEST_METHOD&lt;/code&gt; が設定されている場合、 &lt;code&gt;HTTP_PROXY&lt;/code&gt; （大文字のバリアントのみ）は無視されます。</target>
        </trans-unit>
        <trans-unit id="9b0cd9b590461a3324fa8fa68396f36ebee97301" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Strict&lt;/code&gt; is on it will automatically enable this option.</source>
          <target state="translated">&lt;code&gt;Strict&lt;/code&gt; がオンの場合、このオプションは自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="1a5a03dfea212cb5b29a1fbf2d5e717d48359451" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;YAML&lt;/code&gt; or the &lt;code&gt;YAML::Syck&lt;/code&gt; module is installed a record of the internal state of all modules is written to disk after each step. The files contain a signature of the currently running perl version for later perusal.</source>
          <target state="translated">&lt;code&gt;YAML&lt;/code&gt; または &lt;code&gt;YAML::Syck&lt;/code&gt; モジュールがインストールされている場合、すべてのモジュールの内部状態のレコードが各ステップの後にディスクに書き込まれます。ファイルには、後で閲覧するために現在実行中のperlバージョンの署名が含まれています。</target>
        </trans-unit>
        <trans-unit id="c82a6fc0a2f95bf7629d02360284d3c7a1ca8a6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;can&lt;/code&gt; returns false, then that is passed to &lt;code&gt;ok&lt;/code&gt; . If it returns true, then the larger expression &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; returns 1, which &lt;code&gt;ok&lt;/code&gt; sees as a simple signal of success, as you would expect.</source>
          <target state="translated">がfalse &lt;code&gt;can&lt;/code&gt; 返す場合、それは &lt;code&gt;ok&lt;/code&gt; に渡されます。それがtrueを返した場合は、大きい方の式 &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; 1を返し、 &lt;code&gt;ok&lt;/code&gt; 、あなたが期待するように、成功の簡単な信号として見ています。</target>
        </trans-unit>
        <trans-unit id="876835f5a189b420b4b1dda2b457e7a93555e339" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;can&lt;/code&gt; returns false, then that is passed to &lt;code&gt;ok&lt;/code&gt;. If it returns true, then the larger expression &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; returns 1, which &lt;code&gt;ok&lt;/code&gt; sees as a simple signal of success, as you would expect.</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; がfalseを返す場合、それは &lt;code&gt;ok&lt;/code&gt; に渡されます。それがtrueを返した場合は、大きい方の式 &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; 1を返し、 &lt;code&gt;ok&lt;/code&gt; 、あなたが期待するように、成功の簡単な信号として見ています。</target>
        </trans-unit>
        <trans-unit id="8bb03363c1cc83c40db7187bc0c1808c11643507" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;charscript()&lt;/code&gt; argument is not a known script, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;charscript()&lt;/code&gt; 引数が既知のスクリプトでない場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4ecb007ef4038a90f65cf1dae4d321b995b3815d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;charscript()&lt;/code&gt; argument is not a known script, &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;charscript()&lt;/code&gt; 引数が既知のスクリプトでない場合、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="abc210b43b03b8ee41f920df8c0e913cce7e9cdb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;content&lt;/code&gt; option is a code reference, it will be called iteratively to provide the content body of the request. It should return the empty string or undef when the iterator is exhausted.</source>
          <target state="translated">場合は &lt;code&gt;content&lt;/code&gt; のオプションは、コードの参照である、リクエストのコンテンツ本体を提供するために、繰り返し呼び出されます。イテレータが使い果たされると、空の文字列またはundefを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="9c7688f4c054c95562671f461204e8d1909c8763" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;content&lt;/code&gt; option is the empty string, no &lt;code&gt;content-type&lt;/code&gt; or &lt;code&gt;content-length&lt;/code&gt; headers will be generated.</source>
          <target state="translated">場合は &lt;code&gt;content&lt;/code&gt; オプションが空の文字列で、何の &lt;code&gt;content-type&lt;/code&gt; または &lt;code&gt;content-length&lt;/code&gt; ヘッダが生成されません。</target>
        </trans-unit>
        <trans-unit id="5a6115ecc6df609b525cd058a3289a9b186700a5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;data_callback&lt;/code&gt; option is provided, it will be called iteratively until the entire response body is received. The first argument will be a string containing a chunk of the response body, the second argument will be the in-progress response hash reference, as described below. (This allows customizing the action of the callback based on the &lt;code&gt;status&lt;/code&gt; or &lt;code&gt;headers&lt;/code&gt; received prior to the content body.)</source>
          <target state="translated">&lt;code&gt;data_callback&lt;/code&gt; オプションが指定されている場合、応答本文全体が受信されるまで、このオプションが繰り返し呼び出されます。以下で説明するように、最初の引数は応答本文のチャンクを含む文字列になり、2番目の引数は進行中の応答ハッシュ参照になります。 （これにより、コンテンツ本文の前に受信した &lt;code&gt;status&lt;/code&gt; または &lt;code&gt;headers&lt;/code&gt; 基づいて、コールバックのアクションをカスタマイズできます。）</target>
        </trans-unit>
        <trans-unit id="15aaa040db904ad0d7e939ff87d0289e4ed113e7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; conversion cannot be done without loss of information, the result is compatible with the conversion sequence &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt; . In particular, rounding is strongly biased to 0, though a number like &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; has a chance of being rounded to 1.</source>
          <target state="translated">場合 &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; 変換は情報の損失なしに行うことができず、結果は、変換シーケンスと互換性がある &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt; 。特に、 &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; ような数値は1に丸められる可能性がありますが、丸めは0に強くバイアスされます。</target>
        </trans-unit>
        <trans-unit id="c844a354fc5d5e3ba8448bfcc0461c2e96ef53fc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; conversion cannot be done without loss of information, the result is compatible with the conversion sequence &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt;. In particular, rounding is strongly biased to 0, though a number like &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; has a chance of being rounded to 1.</source>
          <target state="translated">場合 &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; 変換は情報の損失なしに行うことができず、結果は、変換シーケンスと互換性がある &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt; 。特に、 &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; ような数値は1に丸められる可能性がありますが、丸めは0に強くバイアスされます。</target>
        </trans-unit>
        <trans-unit id="6e4484ac7779a53de50aea47a7a5981f680fda36" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;encoding&lt;/code&gt; pragma is in scope then the lengths returned are calculated from the length of &lt;code&gt;$/&lt;/code&gt; in Unicode characters, which is not always the same as the length of &lt;code&gt;$/&lt;/code&gt; in the native encoding.</source>
          <target state="translated">場合 &lt;code&gt;encoding&lt;/code&gt; プラグマがスコープ内にある返さ長さの長さから計算される &lt;code&gt;$/&lt;/code&gt; いつもの長さと同じではないUnicode文字で、 &lt;code&gt;$/&lt;/code&gt; ネイティブエンコーディングです。</target>
        </trans-unit>
        <trans-unit id="bb917cbee0d97141aac38b7ae445c57c18b27f43" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;export_fail&lt;/code&gt; method returns an empty list then no error is recorded and all the requested symbols are exported. If the returned list is not empty then an error is generated for each symbol and the export fails. The Exporter provides a default &lt;code&gt;export_fail&lt;/code&gt; method which simply returns the list unchanged.</source>
          <target state="translated">&lt;code&gt;export_fail&lt;/code&gt; メソッドが空のリストを返す場合、エラーは記録されず、要求されたすべてのシンボルがエクスポートされます。返されたリストが空でない場合、シンボルごとにエラーが生成され、エクスポートは失敗します。エクスポーターは、デフォルトの &lt;code&gt;export_fail&lt;/code&gt; メソッドを提供します。このメソッドは、リストを変更せずに返すだけです。</target>
        </trans-unit>
        <trans-unit id="276362d098a443c72a3870f2a2d48ae260499ef9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gv&lt;/code&gt; is present and is not in the symbol table, then this function simply returns. This checked will be skipped if &lt;code&gt;flags &amp;amp; 1&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gv&lt;/code&gt; が存在し、シンボルテーブルにない場合、この関数は単純に戻ります。 &lt;code&gt;flags &amp;amp; 1&lt;/code&gt; 場合、このチェックはスキップされます。</target>
        </trans-unit>
        <trans-unit id="9956d32eb4cf510432b5c2113065ce4d2ab05fcd" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gv&lt;/code&gt; is present and is not in the symbol table, then this function simply returns. This checked will be skipped if &lt;code&gt;flags &amp;amp; 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gv&lt;/code&gt; が存在し、シンボルテーブルにない場合、この関数は単に戻ります。 &lt;code&gt;flags &amp;amp; 1&lt;/code&gt; 場合、このチェックはスキップされます。</target>
        </trans-unit>
        <trans-unit id="798f35bb0e17493f55f47f1e0e601507174d7021" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;maxdepth&lt;/code&gt; is included, it must be a numeral</source>
          <target state="translated">&lt;code&gt;maxdepth&lt;/code&gt; が含まれている場合は、数値でなければなりません</target>
        </trans-unit>
        <trans-unit id="58bc648a8e07d1ab46d67c368d31d1e61d6eb6fc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;realpath&lt;/code&gt; function is not available, or is unable to return the real path of the file, &lt;code&gt;unixrealpath&lt;/code&gt; will use the same internal procedure as the &lt;code&gt;vmsrealpath&lt;/code&gt; function and convert the output to a Unix format specification. It is not available on non-VMS systems.</source>
          <target state="translated">&lt;code&gt;realpath&lt;/code&gt; 関数が使用できない場合、またはファイルの実際のパスを返すことができない場合、 &lt;code&gt;unixrealpath&lt;/code&gt; は &lt;code&gt;vmsrealpath&lt;/code&gt; 関数と同じ内部プロシージャを使用して、出力をUnix形式の仕様に変換します。非VMSシステムでは使用できません。</target>
        </trans-unit>
        <trans-unit id="622e9bbb1973cba189a5047eab876b3fea0127f4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;table&lt;/code&gt; attribute (see below) is set then a renderer may choose to display the table instead of the details.</source>
          <target state="translated">場合は &lt;code&gt;table&lt;/code&gt; 属性は（下記参照）に設定され、その後レンダラではなく、詳細のテーブルを表示することもできます。</target>
        </trans-unit>
        <trans-unit id="4672f4a6483db1b05eeb609d8e652aab384c295c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;timelocal()&lt;/code&gt; function is given a non-existent local time, it will simply return an epoch value for the time one hour later.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; 関数に存在しない現地時間が与えられている場合、1時間後の時間のエポック値が返されます。</target>
        </trans-unit>
        <trans-unit id="d8b1721e1ae657f367e4018c29dc66b147cf1c09" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;uncompress&lt;/code&gt; or &lt;code&gt;gunzip&lt;/code&gt; programs are available, you can use one of these workarounds to read &lt;code&gt;.tar.Z&lt;/code&gt; files from &lt;code&gt;Archive::Tar&lt;/code&gt;</source>
          <target state="translated">場合 &lt;code&gt;uncompress&lt;/code&gt; または &lt;code&gt;gunzip&lt;/code&gt; のプログラムが用意されてい、あなたが読むためにこれらの回避策のいずれかを使用することができます &lt;code&gt;.tar.Z&lt;/code&gt; ののからファイルを &lt;code&gt;Archive::Tar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cddc99dbc25aed0c730c0fe2bb39cef906b6e6a7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unicode_eval&lt;/code&gt; feature is enabled (which is the default under a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; or higher declaration), EXPR or &lt;code&gt;$_&lt;/code&gt; is treated as a string of characters, so &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations have no effect, and source filters are forbidden. In the absence of the &lt;code&gt;unicode_eval&lt;/code&gt; feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling. See also the &lt;a href=&quot;#evalbytes&quot;&gt;evalbytes&lt;/a&gt; keyword, which always treats its input as a byte stream and works properly with source filters, and the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; pragma.</source>
          <target state="translated">&lt;code&gt;unicode_eval&lt;/code&gt; 機能が有効になっている場合（ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; 以降の宣言でのデフォルト）、EXPRまたは &lt;code&gt;$_&lt;/code&gt; は文字列として扱われるため &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 宣言は効果がなく、ソースフィルターは禁止されています。 &lt;code&gt;unicode_eval&lt;/code&gt; 機能がない場合、文字列は内部エンコーディングによっては文字として、場合によってはバイトとして扱われ、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 内でアクティブ化されたソースフィルターは、外部のファイルスコープに影響を与える不規則な、しかし歴史的な動作を示しますまだコンパイル中です。&lt;a href=&quot;#evalbytes&quot;&gt;evalbytes&lt;/a&gt;も参照してくださいキーワードは常にその入力をバイトストリームとして扱い、ソースフィルターと&lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;プラグマで適切に機能します。</target>
        </trans-unit>
        <trans-unit id="87e45908e093ce58a5e789307a68cc9a88437767" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unicode_eval&lt;/code&gt; feature is enabled (which is the default under a &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; or higher declaration), EXPR or &lt;code&gt;$_&lt;/code&gt; is treated as a string of characters, so &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations have no effect, and source filters are forbidden. In the absence of the &lt;code&gt;unicode_eval&lt;/code&gt; feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling. See also the &lt;a href=&quot;evalbytes&quot;&gt;evalbytes&lt;/a&gt; keyword, which always treats its input as a byte stream and works properly with source filters, and the &lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt; pragma.</source>
          <target state="translated">&lt;code&gt;unicode_eval&lt;/code&gt; 機能が有効になっている場合（ &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; 以降の宣言でのデフォルト）、EXPRまたは &lt;code&gt;$_&lt;/code&gt; は文字列として扱われるため &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 宣言は効果がなく、ソースフィルターは禁止されています。 &lt;code&gt;unicode_eval&lt;/code&gt; 機能がない場合、文字列は内部エンコーディングによっては文字として、場合によってはバイトとして扱われ、 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 内でアクティブ化されたソースフィルターは、外部のファイルスコープに影響を与える不規則な、しかし歴史的な動作を示しますまだコンパイル中です。&lt;a href=&quot;evalbytes&quot;&gt;evalbytes&lt;/a&gt;も参照してくださいキーワードは常にその入力をバイトストリームとして扱い、ソースフィルターと&lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt;プラグマで適切に機能します。</target>
        </trans-unit>
        <trans-unit id="094a307e3b02182e7190ab8c7d41908a31be7b6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;utf8&lt;/code&gt; option is not given, the encoding of its output file handle will be forced to the detected encoding of the input POD, which preserves whatever the input text is. This ensures backward compatibility with earlier, pre-Unicode versions of this module, without large numbers of Perl warnings.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; オプションが指定されていない場合、その出力ファイルハンドルのエンコーディングは、検出された入力PODのエンコーディングに強制され、入力テキストが何であっても保持されます。これにより、多数のPerl警告なしに、このモジュールの以前のユニコード以前のバージョンとの下位互換性が保証されます。</target>
        </trans-unit>
        <trans-unit id="9d9b06ad91f4e14141b1e47f8d38395a6c62e787" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;utf8&lt;/code&gt;-flag is enabled, &lt;code&gt;encode&lt;/code&gt;/&lt;code&gt;decode&lt;/code&gt; will encode all characters using the corresponding UTF-8 multi-byte sequence, and will expect your input strings to be encoded as UTF-8, that is, no &quot;character&quot; of the input string must have any value &amp;gt; 255, as UTF-8 does not allow that.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; フラグが有効になっている場合、 &lt;code&gt;encode&lt;/code&gt; / &lt;code&gt;decode&lt;/code&gt; は、対応するUTF-8マルチバイトシーケンスを使用してすべての文字をエンコードし、入力文字列がUTF-8としてエンコードされる、つまり入力の「文字」がないことを期待します。 UTF-8では許可されていないため、文字列には255を超える値を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b5abb9df31ef6516fcae104f653339d0026bd9e0" translate="yes" xml:space="preserve">
          <source>If the AIX Toolbox version of lib gdbm &amp;lt; 1.8.3-5 is installed on your system then Perl will not work. This library contains the header files /opt/freeware/include/gdbm/dbm.h|ndbm.h which conflict with the AIX system versions. The lib gdbm will be automatically removed from the wanted libraries if the presence of one of these two header files is detected. If you want to build Perl with GDBM support then please install at least gdbm-devel-1.8.3-5 (or higher).</source>
          <target state="translated">lib gdbm &amp;lt;1.8.3-5のAIX Toolboxバージョンがシステムにインストールされている場合、Perlは機能しません。このライブラリーには、AIXシステムのバージョンと競合するヘッダー・ファイル/opt/freeware/include/gdbm/dbm.h|ndbm.hが含まれています。 lib gdbmは、これら2つのヘッダーファイルのいずれかの存在が検出された場合、必要なライブラリから自動的に削除されます。 GDBMサポートを使用してPerlをビルドする場合は、少なくともgdbm-devel-1.8.3-5（またはそれ以上）をインストールしてください。</target>
        </trans-unit>
        <trans-unit id="e4f37200eb3cc7a4dd0c87959fbb6c2e093e138e" translate="yes" xml:space="preserve">
          <source>If the C function setvbuf() is available, then &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; sets the buffering policy for the FileHandle. The calling sequence for the Perl function is the same as its C counterpart, including the macros &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; , except that the buffer parameter specifies a scalar variable to use as a buffer. WARNING: A variable used as a buffer by &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; must not be modified in any way until the FileHandle is closed or until &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; is called again, or memory corruption may result!</source>
          <target state="translated">C関数setvbuf（）が使用可能な場合、 &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; はFileHandleのバッファリングポリシーを設定します。 Perl関数の呼び出しシーケンスは、バッファーパラメーターがバッファーとして使用するスカラー変数を指定することを除いて、マクロ &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および &lt;code&gt;_IONBF&lt;/code&gt; を含め、対応するC関数と同じです。警告： &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; によってバッファとして使用される変数は、FileHandleが閉じられるまで、または &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; が再度呼び出されるまで、変更しないでください。変更すると、メモリが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="299d706db577fab624c88622bc091e3abdb77143" translate="yes" xml:space="preserve">
          <source>If the C function setvbuf() is available, then &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; sets the buffering policy for the FileHandle. The calling sequence for the Perl function is the same as its C counterpart, including the macros &lt;code&gt;_IOFBF&lt;/code&gt;, &lt;code&gt;_IOLBF&lt;/code&gt;, and &lt;code&gt;_IONBF&lt;/code&gt;, except that the buffer parameter specifies a scalar variable to use as a buffer. WARNING: A variable used as a buffer by &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; must not be modified in any way until the FileHandle is closed or until &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; is called again, or memory corruption may result!</source>
          <target state="translated">C関数setvbuf（）が使用可能な場合、 &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; はFileHandleのバッファリングポリシーを設定します。 Perl関数の呼び出しシーケンスは、マクロ &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および &lt;code&gt;_IONBF&lt;/code&gt; を含め、Cの対応するものと同じですが、bufferパラメーターがバッファーとして使用するスカラー変数を指定する点が異なります。警告： &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; によってバッファとして使用される変数は、FileHandleが閉じられるか、 &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; が再度呼び出されるまで、いかなる方法でも変更しないでください。変更すると、メモリが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1a7ae4abb775cdaecaa965021a5be89b2c2a0678" translate="yes" xml:space="preserve">
          <source>If the C functions fgetpos() and fsetpos() are available, then &lt;code&gt;FileHandle::getpos&lt;/code&gt; returns an opaque value that represents the current position of the FileHandle, and &lt;code&gt;FileHandle::setpos&lt;/code&gt; uses that value to return to a previously visited position.</source>
          <target state="translated">C関数fgetpos（）およびfsetpos（）が使用可能な場合、 &lt;code&gt;FileHandle::getpos&lt;/code&gt; はFileHandleの現在の位置を表す不透明な値を返し、 &lt;code&gt;FileHandle::setpos&lt;/code&gt; はその値を使用して以前にアクセスした位置に戻ります。</target>
        </trans-unit>
        <trans-unit id="50ebbabfe865d409f0b42636c02f4e83fa99aca9" translate="yes" xml:space="preserve">
          <source>If the C functions setbuf() and/or setvbuf() are available, then &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; and &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; set the buffering policy for an IO::Handle. The calling sequences for the Perl functions are the same as their C counterparts--including the constants &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; for setvbuf()--except that the buffer parameter specifies a scalar variable to use as a buffer. You should only change the buffer before any I/O, or immediately after calling flush.</source>
          <target state="translated">C関数setbuf（）やsetvbuf（）が使用可能な場合、 &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; および &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; のバッファリングポリシーを設定します。 Perl関数の呼び出しシーケンスは、対応するCの呼び出しシーケンスと同じです &lt;code&gt;_IONBF&lt;/code&gt; （）の定数 &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および_IONBFを含みます-ただし、バッファーパラメーターがバッファーとして使用するスカラー変数を指定している点が異なります。 I / Oの前、またはフラッシュを呼び出した直後にのみバッファーを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="4b39a4db83d5ceb015a67a35d8f623bb0eb08d0e" translate="yes" xml:space="preserve">
          <source>If the C functions setbuf() and/or setvbuf() are available, then &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; and &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; set the buffering policy for an IO::Handle. The calling sequences for the Perl functions are the same as their C counterparts--including the constants &lt;code&gt;_IOFBF&lt;/code&gt;, &lt;code&gt;_IOLBF&lt;/code&gt;, and &lt;code&gt;_IONBF&lt;/code&gt; for setvbuf()--except that the buffer parameter specifies a scalar variable to use as a buffer. You should only change the buffer before any I/O, or immediately after calling flush.</source>
          <target state="translated">C関数setbuf（）および/またはsetvbuf（）が使用可能な場合、 &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; および &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; は、IO :: Handleのバッファリングポリシーを設定します。 Perl関数の呼び出しシーケンスは、cの対応するもの（setvbuf（）の定数 &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および &lt;code&gt;_IONBF&lt;/code&gt; を含む）と同じですが、bufferパラメーターがバッファーとして使用するスカラー変数を指定する点が異なります。バッファは、I / Oの前、またはフラッシュを呼び出した直後にのみ変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb7a6c24ac237588ebe82997b3227d4077970889" translate="yes" xml:space="preserve">
          <source>If the FHCRC bit is set in the gzip FLG header byte, the CRC16 bytes in the header must match the crc16 value of the gzip header actually read.</source>
          <target state="translated">gzip FLGヘッダバイトにFHCRCビットが設定されている場合、ヘッダ中のCRC16バイトは、実際に読み込まれたgzipヘッダのcrc16値と一致しなければならない。</target>
        </trans-unit>
        <trans-unit id="716df9a8cd6dfb775c171f4188701d3aabf993bd" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;../perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;../perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="translated">PATTERNに&lt;a href=&quot;../perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;キャプチャグループ&lt;/a&gt;が含まれている場合、セパレータごとに、グループによってキャプチャされた各部分文字列に対して追加フィールドが生成されます（グループが指定されている順序で、&lt;a href=&quot;../perlretut#Backreferences&quot;&gt;後方&lt;/a&gt;参照に従って）。一致しないグループがある場合、サブストリングではなく &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値をキャプチャします。また、そのような追加フィールドは、セパレータがあるとき（つまり、分割が発生するとき）に生成され、そのような追加フィールドはLIMITにカウントされ&lt;b&gt;ない&lt;/b&gt;ことに注意してください。リストのコンテキストで評価される次の式を検討してください（返される各リストは、関連するコメントで提供されます）。</target>
        </trans-unit>
        <trans-unit id="19ac8a832643510531c14e9722a2a956f43fd56c" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="translated">PATTERNに&lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;キャプチャーグループ&lt;/a&gt;が含まれている場合、セパレーターごとに、グループによってキャプチャーされたサブストリングごとに追加のフィールドが生成され&lt;a href=&quot;perlretut#Backreferences&quot;&gt;ます（後方&lt;/a&gt;参照に従って、グループが指定された順序で）。いずれかのグループが一致しない場合、部分文字列の代わりに&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;値をキャプチャします。また、そのような追加フィールドは、セパレーターがあるときはいつでも（つまり、分割が発生するときはいつでも）生成され、そのような追加フィールドはLIMITにカウントされ&lt;b&gt;ない&lt;/b&gt;ことに注意してください。リストコンテキストで評価された次の式について考えてみます（返された各リストは、関連するコメントで提供されます）。</target>
        </trans-unit>
        <trans-unit id="82d842f2ab3731c9a4a0e7946b2b84aa92b80adc" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="translated">PATTERNに&lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;キャプチャグループ&lt;/a&gt;が含まれている場合、セパレータごとに、グループによってキャプチャされた各部分文字列に対して追加フィールドが生成されます（グループが指定されている順序で、&lt;a href=&quot;perlretut#Backreferences&quot;&gt;後方&lt;/a&gt;参照に従って）。一致しないグループがある場合、サブストリングではなく &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値をキャプチャします。また、そのような追加フィールドは、セパレータがあるとき（つまり、分割が発生するとき）に生成され、そのような追加フィールドはLIMITにカウントされ&lt;b&gt;ない&lt;/b&gt;ことに注意してください。リストのコンテキストで評価される次の式を検討してください（返される各リストは、関連するコメントで提供されます）。</target>
        </trans-unit>
        <trans-unit id="4e7443d40abaa23829b9ab709311a1922fe461b6" translate="yes" xml:space="preserve">
          <source>If the PERL_PV_PRETTY_ELLIPSES flag is set and not all characters in string were output then an ellipsis &lt;code&gt;...&lt;/code&gt; will be appended to the string. Note that this happens AFTER it has been quoted.</source>
          <target state="translated">PERL_PV_PRETTY_ELLIPSESフラグが設定されていて、文字列内のすべての文字が出力されなかった場合、省略記号 &lt;code&gt;...&lt;/code&gt; が文字列に追加されます。これは引用された後に発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="09680d261a6a88f2e5836c919a2510509957b1e5" translate="yes" xml:space="preserve">
          <source>If the PERL_PV_PRETTY_QUOTE flag is set then the result will be double quoted with any double quotes in the string escaped. Otherwise if the PERL_PV_PRETTY_LTGT flag is set then the result be wrapped in angle brackets.</source>
          <target state="translated">PERL_PV_PRETTY_QUOTEフラグが設定されている場合、結果は文字列内の二重引用符をエスケープして二重引用符で囲まれます。それ以外の場合、PERL_PV_PRETTY_LTGT フラグが設定されていると、結果は角括弧で括られます。</target>
        </trans-unit>
        <trans-unit id="b990fe2846203877eedfbcf554045c1e773431f8" translate="yes" xml:space="preserve">
          <source>If the POD is inconsistent about the indentation of verbatim blocks, but you have figured out a heuristic to determine how much a particular verbatim block is indented, you can pass a code reference instead. The code reference will be executed with one argument, an array reference of all the lines in the verbatim block, and should return the value to be stripped from each line. For example, if you decide that you're fine to use the first line of the verbatim block to set the standard for indentation of the rest of the block, you can look at the first line and return the appropriate value, like so:</source>
          <target state="translated">POD が冗長ブロックのインデントに一貫性がないが、特定の冗長ブロックがどの程度インデントされているかを判断するためのヒューリスティックな方法を考え出した場合、代わりにコード参照を渡すことができます。コード参照は、1 つの引数で実行され、冗長ブロック内のすべての行の配列参照で、各行から削除する値を返します。例えば、バーバティムブロックの最初の行を使って残りのブロックのインデントの基準を設定しても良いと判断した場合、次のように最初の行を見て適切な値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="d38f09a374f3f254883a79ac66d4d89714b8faea" translate="yes" xml:space="preserve">
          <source>If the POD source does not include an &lt;code&gt;=encoding&lt;/code&gt; declaration, the parser will attempt to guess the encoding (selecting one of UTF-8 or CP 1252) by examining the first non-ASCII bytes and applying the heuristic described in &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;. (If the POD source contains only ASCII bytes, the encoding is assumed to be ASCII.)</source>
          <target state="translated">PODソースに &lt;code&gt;=encoding&lt;/code&gt; 宣言が含まれていない場合、パーサーは最初の非ASCIIバイトを調べ、&lt;a href=&quot;perlpodspec&quot;&gt;perlpodspecで&lt;/a&gt;説明されているヒューリスティックを適用することにより、エンコードを推測しようとします（UTF-8またはCP 1252のいずれかを選択します）。（PODソースにASCIIバイトのみが含まれている場合、エンコードはASCIIであると見なされます。）</target>
        </trans-unit>
        <trans-unit id="e9fd97e2c853d040e2b1f08382eba5acd7317a9d" translate="yes" xml:space="preserve">
          <source>If the POD source does not include an &lt;code&gt;=encoding&lt;/code&gt; declaration, the parser will attempt to guess the encoding (selecting one of UTF-8 or Latin-1) by examining the first non-ASCII bytes and applying the heuristic described in &lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;.</source>
          <target state="translated">PODソースに &lt;code&gt;=encoding&lt;/code&gt; 宣言が含まれていない場合、パーサーは最初の非ASCIIバイトを調べて&lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspecで&lt;/a&gt;説明されているヒューリスティックを適用することにより、エンコーディング（UTF-8またはLatin-1のいずれかを選択）を推測しようとします。</target>
        </trans-unit>
        <trans-unit id="539121ee50a224917b8fad7fe828de50a4356761" translate="yes" xml:space="preserve">
          <source>If the POD you're parsing adheres to a consistent indentation policy, you can have such indentation stripped from the beginning of every line of your verbatim blocks. This method tells Pod::Simple what to strip. For two-space indents, you'd use:</source>
          <target state="translated">解析しているPODが一貫したインデントポリシーに従っている場合、そのようなインデントを冗長ブロックの各行の先頭から削除することができます。このメソッドは Pod::Simple に何を取り除くかを指示します。2スペースインデントの場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="41c4b629a3e2e0346fc506d9a6f6a02afa0eab8b" translate="yes" xml:space="preserve">
          <source>If the PV of the SV is an octet sequence in Perl's extended UTF-8 and contains a multiple-byte character, the &lt;code&gt;SvUTF8&lt;/code&gt; flag is turned on so that it looks like a character. If the PV contains only single-byte characters, the &lt;code&gt;SvUTF8&lt;/code&gt; flag stays off. Scans PV for validity and returns FALSE if the PV is invalid UTF-8.</source>
          <target state="translated">SVのPVがPerlの拡張UTF-8のオクテットシーケンスであり、複数バイトの文字が含まれている場合、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグがオンになり、文字のように見えます。PVにシングルバイト文字のみが含まれている場合、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグはオフのままです。PVの有効性をスキャンし、PVが無効なUTF-8の場合はFALSEを返します。</target>
        </trans-unit>
        <trans-unit id="767d61bbd817028665e597ffd44d52d2f3072a5a" translate="yes" xml:space="preserve">
          <source>If the PV of the SV is an octet sequence in UTF-8 and contains a multiple-byte character, the &lt;code&gt;SvUTF8&lt;/code&gt; flag is turned on so that it looks like a character. If the PV contains only single-byte characters, the &lt;code&gt;SvUTF8&lt;/code&gt; flag stays off. Scans PV for validity and returns false if the PV is invalid UTF-8.</source>
          <target state="translated">SVのPVがUTF-8のオクテットシーケンスであり、マルチバイト文字が含まれている場合、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグがオンになり、文字のように見えます。PVにシングルバイト文字のみが含まれている場合、 &lt;code&gt;SvUTF8&lt;/code&gt; フラグはオフのままです。PVの有効性をスキャンし、PVが無効なUTF-8の場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="5ce916c1cc7717c4e805155c2d7548fbc24c77ee" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as &lt;code&gt;perl scriptname&lt;/code&gt; , then the &lt;b&gt;-%c&lt;/b&gt; option must appear on the command line: &lt;code&gt;perl -%c scriptname&lt;/code&gt;.</source>
          <target state="translated">Perlのスクリプトとして実行されている場合は &lt;code&gt;perl scriptname&lt;/code&gt; は、&lt;b&gt;- ％Cは&lt;/b&gt;：オプションは、コマンドラインに表示されなければなりません &lt;code&gt;perl -%c scriptname&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f041d8f750e7891231f6ef945e98ccc9b459b45e" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as &lt;code&gt;perl scriptname&lt;/code&gt;, then the &lt;b&gt;-%c&lt;/b&gt; option must appear on the command line: &lt;code&gt;perl -%c scriptname&lt;/code&gt;.</source>
          <target state="translated">Perlスクリプトが &lt;code&gt;perl scriptname&lt;/code&gt; として実行されている場合は、&lt;b&gt;-％c&lt;/b&gt;オプションをコマンドラインに表示する必要があります： &lt;code&gt;perl -%c scriptname&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fde4187a6aa163d9c96f574141763bdd38ae34f7" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as a command using the #! mechanism (or its local equivalent), this error can usually be fixed by editing the #! line so that the &lt;b&gt;-%c&lt;/b&gt; option is a part of Perl's first argument: e.g. change &lt;code&gt;perl -n -%c&lt;/code&gt; to &lt;code&gt;perl -%c -n&lt;/code&gt; .</source>
          <target state="translated">Perlスクリプトが＃！を使用してコマンドとして実行されている場合 メカニズム（またはローカルで同等のもの）の場合、このエラーは通常、＃！そのようにライン&lt;b&gt;- ％のCの&lt;/b&gt;オプションでは、Perlの最初の引数の一部である：例えば変更 &lt;code&gt;perl -n -%c&lt;/code&gt; へ &lt;code&gt;perl -%c -n&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8bf71d735699bc0d3dafa8fc7795c33b9452d54" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as a command using the #! mechanism (or its local equivalent), this error can usually be fixed by editing the #! line so that the &lt;b&gt;-%c&lt;/b&gt; option is a part of Perl's first argument: e.g. change &lt;code&gt;perl -n -%c&lt;/code&gt; to &lt;code&gt;perl -%c -n&lt;/code&gt;.</source>
          <target state="translated">Perlスクリプトが＃！を使用してコマンドとして実行されている場合 メカニズム（またはそのローカル同等物）、このエラーは通常、＃！を編集することで修正できます。&lt;b&gt;-％c&lt;/b&gt;オプションがPerlの最初の引数の一部になるように行します。たとえば、 &lt;code&gt;perl -n -%c&lt;/code&gt; を &lt;code&gt;perl -%c -n&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3c878ced38c4f673dcc4c3921e7ce406e54b4b71" translate="yes" xml:space="preserve">
          <source>If the README file seems to be getting too large you may wish to split out some of the sections into separate files: INSTALL, Copying, ToDo etc.</source>
          <target state="translated">READMEファイルが大きくなりすぎているようであれば、いくつかのセクションを別々のファイルに分割した方が良いかもしれません。INSTALL,Copying,ToDo など。</target>
        </trans-unit>
        <trans-unit id="bcda0ef071779fc235b5cd85b1d75a393d7ae1e4" translate="yes" xml:space="preserve">
          <source>If the Time::HiRes module has been installed, you can specify the special tag &lt;code&gt;:hireswallclock&lt;/code&gt; for Benchmark (if Time::HiRes is not available, the tag will be silently ignored). This tag will cause the wallclock time to be measured in microseconds, instead of integer seconds. Note though that the speed computations are still conducted in CPU time, not wallclock time.</source>
          <target state="translated">Time :: HiResモジュールがインストールされている場合は、ベンチマークに特別なタグ &lt;code&gt;:hireswallclock&lt;/code&gt; を指定できます（Time :: HiResが使用できない場合、このタグは通知なく無視されます）。このタグにより、実時間は整数秒ではなくマイクロ秒で測定されます。ただし、速度の計算は実時間ではなく、CPU時間で行われることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1e0de044d27a1f06d198fa6cd4b199e7a501a7e3" translate="yes" xml:space="preserve">
          <source>If the UNTIE method exists then the warning above does not occur. Instead the UNTIE method is passed the count of &quot;extra&quot; references and can issue its own warning if appropriate. e.g. to replicate the no UNTIE case this method can be used:</source>
          <target state="translated">UNTIEメソッドが存在する場合、上記の警告は発生しません。その代わりにUNTIEメソッドには &quot;余分な &quot;参照の数が渡され、適切であればそれ自身の警告を出すことができます。</target>
        </trans-unit>
        <trans-unit id="143e00ba94fc0b7d94b37e36ca76fc91860f4e9a" translate="yes" xml:space="preserve">
          <source>If the URL includes a &quot;user:password&quot; stanza, they will be used for Basic-style authorization headers. (Authorization headers will not be included in a redirected request.) For example:</source>
          <target state="translated">URL に &quot;user:password&quot; スタンザが含まれている場合、それらは Basic スタイルの認可ヘッダに使用されます (認可ヘッダはリダイレクトされたリクエストには含まれません)。(認可ヘッダはリダイレクトされたリクエストには含まれません)例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0ecfe64b91fdc6593a92259993f050bf990c0868" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; will call the &lt;code&gt;VERSION&lt;/code&gt; method in class Module with the given version as an argument:</source>
          <target state="translated">ModuleとLISTの間にVERSION引数が存在する場合、&lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;は、指定されたバージョンを引数として、クラスModuleの &lt;code&gt;VERSION&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="afcfedf6cd11f719819da193333a7cf6de0732a7" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will call the VERSION method in class Module with the given version as an argument. The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt; .</source>
          <target state="translated">VERSION引数がModuleとLISTの間に存在する場合、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; により、指定されたバージョンを引数として、クラスModuleのVERSIONメソッドが呼び出されます。 UNIVERSALクラスから継承されたデフォルトのVERSIONメソッドは、指定されたバージョンが変数 &lt;code&gt;$Module::VERSION&lt;/code&gt; 値よりも大きい場合に警告します。</target>
        </trans-unit>
        <trans-unit id="28fd8c6bb88e030936b47d8b396e97702a34b855" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will call the VERSION method in class Module with the given version as an argument. The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt; .</source>
          <target state="translated">VERSION引数がModuleとLISTの間に存在する場合、 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; により、指定されたバージョンを引数として、クラスModuleのVERSIONメソッドが呼び出されます。UNIVERSALクラスから継承されたデフォルトのVERSIONメソッドは、指定されたバージョンが変数 &lt;code&gt;$Module::VERSION&lt;/code&gt; 値よりも大きい場合に警告します。</target>
        </trans-unit>
        <trans-unit id="333bd150f2ebb931ff98dd0682381076be3b30d6" translate="yes" xml:space="preserve">
          <source>If the XSUB has a return type of &lt;code&gt;void&lt;/code&gt; then the compiler will not declare a RETVAL variable for that function. When using a PPCODE: section no manipulation of the RETVAL variable is required, the section may use direct stack manipulation to place output values on the stack.</source>
          <target state="translated">XSUBの戻り型が &lt;code&gt;void&lt;/code&gt; の場合、コンパイラーはその関数のRETVAL変数を宣言しません。PPCODE：セクションを使用する場合、RETVAL変数の操作は必要ありません。セクションは、直接スタック操作を使用して出力値をスタックに配置できます。</target>
        </trans-unit>
        <trans-unit id="bebee72fc9aa0a9b169227a410e90f7f3df000ed" translate="yes" xml:space="preserve">
          <source>If the above does not work, or is not adequate for your application, then file a bug report on &lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt; against the problematic module.</source>
          <target state="translated">上記が機能しない場合、またはアプリケーションに適切でない場合は、問題のあるモジュールに対して&lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt;でバグレポートを提出してください。</target>
        </trans-unit>
        <trans-unit id="f43e61e618bcd86d5e8194fe59eff43dd8c761f1" translate="yes" xml:space="preserve">
          <source>If the above does not work, or is not adequate for your application, then file a bug report on &lt;a href=&quot;https://rt.cpan.org/Public/&quot;&gt;https://rt.cpan.org/Public/&lt;/a&gt; against the problematic module.</source>
          <target state="translated">上記が機能しない場合、またはアプリケーションに適していない場合は、問題のあるモジュールに対して&lt;a href=&quot;https://rt.cpan.org/Public/&quot;&gt;https://rt.cpan.org/Public/に&lt;/a&gt;バグレポートを提出してください。</target>
        </trans-unit>
        <trans-unit id="77f8b1f2470978bb7eb295cba54688c501c99623" translate="yes" xml:space="preserve">
          <source>If the above evaluates as true, the following methods will be available on the &lt;code&gt;$result&lt;/code&gt; object.</source>
          <target state="translated">上記がtrueと評価された場合、次のメソッドが &lt;code&gt;$result&lt;/code&gt; オブジェクトで使用できます。</target>
        </trans-unit>
        <trans-unit id="3626e8a47b75cd9814f9aabb6f3226e20a12cd72" translate="yes" xml:space="preserve">
          <source>If the act of unimporting your module (via a &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;) should cause source code filtering to cease, create an &lt;code&gt;unimport&lt;/code&gt; subroutine, and have it call &lt;code&gt;filter_del&lt;/code&gt; . Make sure that the call to &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; in step 5 will not accidentally read past the &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. Effectively this limits source code filters to line-by-line operation, unless the &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine does some fancy pre-pre-parsing of the source code it's filtering.</source>
          <target state="translated">モジュールを（ &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; を介して） &lt;code&gt;filter_del&lt;/code&gt; によってソースコードのフィルタリングが停止する場合 &lt;code&gt;unimport&lt;/code&gt; 、インポート解除サブルーチンを作成し、filter_delを呼び出します。手順5での &lt;code&gt;filter_read&lt;/code&gt; または &lt;code&gt;filter_read_exact&lt;/code&gt; の呼び出しで、誤って &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; が読み取られないことを確認してください。これにより、 &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; サブルーチンがフィルタリングするソースコードの高度な事前解析を実行しない限り、ソースコードフィルターが行単位の操作に限定されます。</target>
        </trans-unit>
        <trans-unit id="03a3b15e2a6cd5a22375d6379cdf2984cfbb61b0" translate="yes" xml:space="preserve">
          <source>If the act of unimporting your module (via a &lt;code&gt;no&lt;/code&gt;) should cause source code filtering to cease, create an &lt;code&gt;unimport&lt;/code&gt; subroutine, and have it call &lt;code&gt;filter_del&lt;/code&gt;. Make sure that the call to &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; in step 5 will not accidentally read past the &lt;code&gt;no&lt;/code&gt;. Effectively this limits source code filters to line-by-line operation, unless the &lt;code&gt;import&lt;/code&gt; subroutine does some fancy pre-pre-parsing of the source code it's filtering.</source>
          <target state="translated">モジュールを（ &lt;code&gt;no&lt;/code&gt; を介して） &lt;code&gt;filter_del&lt;/code&gt; によってソースコードのフィルタリングが停止する場合 &lt;code&gt;unimport&lt;/code&gt; 、インポート解除サブルーチンを作成し、filter_delを呼び出させます。手順5の &lt;code&gt;filter_read&lt;/code&gt; または &lt;code&gt;filter_read_exact&lt;/code&gt; の呼び出しで、誤って &lt;code&gt;no&lt;/code&gt; を超えて読み取られないようにしてください。事実上、これにより、 &lt;code&gt;import&lt;/code&gt; サブルーチンがフィルタリングしているソースコードの高度な事前解析を行わない限り、ソースコードフィルターは行ごとの操作に制限されます。</target>
        </trans-unit>
        <trans-unit id="f14d384ae54d7fd6956617c902dc52b4f7c913e2" translate="yes" xml:space="preserve">
          <source>If the archive creation fails for any reason, &lt;code&gt;create_archive&lt;/code&gt; will return false. Please use the &lt;code&gt;error&lt;/code&gt; method to find the cause of the failure.</source>
          <target state="translated">何らかの理由でアーカイブの作成が失敗した場合、 &lt;code&gt;create_archive&lt;/code&gt; はfalseを返します。 &lt;code&gt;error&lt;/code&gt; メソッドを使用して、失敗の原因を見つけてください。</target>
        </trans-unit>
        <trans-unit id="bdb2a47c2b4d923874ce10a47d541cda074eec3d" translate="yes" xml:space="preserve">
          <source>If the argument has any characters in it other than those matching &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;, it must be a file</source>
          <target state="translated">引数に &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;:&lt;/code&gt; 、または &lt;code&gt;'&lt;/code&gt; に一致する文字以外の文字が含まれている場合は、ファイルでなければなりません</target>
        </trans-unit>
        <trans-unit id="78aee964b82335874ff16d75333783914537914b" translate="yes" xml:space="preserve">
          <source>If the argument has any characters in it other than those matching &lt;code&gt;\w&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;, it must be a file</source>
          <target state="translated">引数に &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;:&lt;/code&gt; 、または &lt;code&gt;'&lt;/code&gt; に一致する文字以外の文字が含まれている場合は、ファイルである必要があります</target>
        </trans-unit>
        <trans-unit id="6ad412a6b0ecba8c1d6ad813bdece11aeaddeb49" translate="yes" xml:space="preserve">
          <source>If the argument is &quot;/cygdrive&quot;, then just the volume mount settings, and the cygdrive mount prefix are returned.</source>
          <target state="translated">引数が&quot;/cygdrive &quot;の場合は、ボリュームマウント設定とcygdriveマウントプレフィックスだけが返されます。</target>
        </trans-unit>
        <trans-unit id="b2f2982f0afdcf62760763525865c85306c36f4e" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, then this function returns the pattern.</source>
          <target state="translated">引数が &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; によって返されるコンパイル済み正規表現である場合、この関数はパターンを返します。</target>
        </trans-unit>
        <trans-unit id="7b654339779464179184dbeba32e40251c7e2e80" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, then this function returns what the optimiser considers to be the longest anchored fixed string and longest floating fixed string in the pattern.</source>
          <target state="translated">引数が &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; によって返されるコンパイルされた正規表現である場合、この関数は、オプティマイザがパターン内で最長の固定された固定文字列および最長の浮動固定文字列と見なすものを返します。</target>
        </trans-unit>
        <trans-unit id="81692e2cadc8efc40c200d83e4422a4728d67dbc" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;qr//&lt;/code&gt;, then this function returns the pattern.</source>
          <target state="translated">引数が &lt;code&gt;qr//&lt;/code&gt; によって返されるコンパイル済み正規表現である場合、この関数はパターンを返します。</target>
        </trans-unit>
        <trans-unit id="f5c12c2dc9e5c6145a6b58c7acda0a55ed2d46c4" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;qr//&lt;/code&gt;, then this function returns what the optimiser considers to be the longest anchored fixed string and longest floating fixed string in the pattern.</source>
          <target state="translated">引数が &lt;code&gt;qr//&lt;/code&gt; によって返されるコンパイル済み正規表現である場合、この関数は、オプティマイザーがパターン内で最長のアンカー付き固定文字列および最長のフローティング固定文字列と見なすものを返します。</target>
        </trans-unit>
        <trans-unit id="5788205c6ad8a4a8ebfb81bffe26f845a9b7bbcb" translate="yes" xml:space="preserve">
          <source>If the argument is a distribution file name (recognized by embedded slashes), it is processed. If it is a module, CPAN determines the distribution file in which this module is included and processes that, following any dependencies named in the module's META.yml or Makefile.PL (this behavior is controlled by the configuration parameter &lt;code&gt;prerequisites_policy&lt;/code&gt; ). If an argument is enclosed in slashes it is treated as a regular expression: it is expanded and if the result is a single object (distribution, bundle or module), this object is processed.</source>
          <target state="translated">引数が配布ファイル名（埋め込まれたスラッシュで認識される）の場合は、処理されます。モジュールの場合、CPANはこのモジュールが含まれる配布ファイルを決定し、モジュールのMETA.ymlまたはMakefile.PLで指定された依存関係に従って処理します（この動作は構成パラメーター &lt;code&gt;prerequisites_policy&lt;/code&gt; によって制御されます）。引数がスラッシュで囲まれている場合、それは正規表現として扱われます：展開され、結果が単一のオブジェクト（ディストリビューション、バンドル、またはモジュール）の場合、このオブジェクトが処理されます。</target>
        </trans-unit>
        <trans-unit id="b117f48b026da0b0825304f95daf71b17bbf61f6" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;[\w:']&lt;/code&gt;, it must be a module</source>
          <target state="translated">引数が &lt;code&gt;[\w:']&lt;/code&gt; のみに一致する場合は、モジュールである必要があります</target>
        </trans-unit>
        <trans-unit id="0af3cf093a2df4958131449dc2e48cabc581ef28" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;\w&lt;/code&gt; , it could either be a module or a file. We will try to find &lt;code&gt;file.pm&lt;/code&gt; first in &lt;code&gt;@INC&lt;/code&gt; and if that fails, we will try to find &lt;code&gt;file&lt;/code&gt; in @INC. If both fail, we die with the respective error messages.</source>
          <target state="translated">引数が &lt;code&gt;\w&lt;/code&gt; のみに一致する場合、それはモジュールまたはファイルのいずれかです。私たちは、見つけようとします &lt;code&gt;file.pm&lt;/code&gt; 最初で &lt;code&gt;@INC&lt;/code&gt; 、それが失敗した場合、我々は見つけるためにしようとする &lt;code&gt;file&lt;/code&gt; @INCに。両方とも失敗すると、それぞれのエラーメッセージが表示されて死亡します。</target>
        </trans-unit>
        <trans-unit id="a134e7d8148a5bb9fcca57ef03ba8d4ffbcb83b6" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;\w&lt;/code&gt;, it could either be a module or a file. We will try to find &lt;code&gt;file.pm&lt;/code&gt; first in &lt;code&gt;@INC&lt;/code&gt; and if that fails, we will try to find &lt;code&gt;file&lt;/code&gt; in @INC. If both fail, we die with the respective error messages.</source>
          <target state="translated">引数が &lt;code&gt;\w&lt;/code&gt; のみに一致する場合は、モジュールまたはファイルのいずれかである可能性があります。私たちは、見つけようとします &lt;code&gt;file.pm&lt;/code&gt; 最初で &lt;code&gt;@INC&lt;/code&gt; 、それが失敗した場合、我々は見つけるためにしようとする &lt;code&gt;file&lt;/code&gt; @INCに。両方が失敗した場合、それぞれのエラーメッセージで死にます。</target>
        </trans-unit>
        <trans-unit id="950fc5f071c3850318ce53caaa9abf5b8d7e4b09" translate="yes" xml:space="preserve">
          <source>If the argument ops disagree with the prototype, for example by having an unacceptable number of arguments, a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. In the error message, the callee is referred to by the name defined by the</source>
          <target state="translated">引数演算子がプロトタイプと異なる場合、例えば許容できない数の引数を持つなどして、有効な演算子ツリーが返されます。エラーはパーサの状態に反映され、通常は、発生したすべてのコンパイルエラーをカバーするパーシングのトップレベルで1つの例外が発生します。エラーメッセージでは、呼び出し元は</target>
        </trans-unit>
        <trans-unit id="83ab7b8277b9fed6236e40a3daaed85d393da0e1" translate="yes" xml:space="preserve">
          <source>If the argument ops disagree with the prototype, for example by having an unacceptable number of arguments, a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. In the error message, the callee is referred to by the name defined by the &lt;code&gt;namegv&lt;/code&gt; parameter.</source>
          <target state="translated">引数opsがプロトタイプと一致しない場合、たとえば、許容できない数の引数がある場合、とにかく有効なopツリーが返されます。エラーはパーサーの状態に反映され、通常、発生したすべてのコンパイルエラーをカバーする解析のトップレベルで単一の例外が発生します。エラーメッセージでは、呼び出し先は &lt;code&gt;namegv&lt;/code&gt; パラメーターで定義された名前で参照されています。</target>
        </trans-unit>
        <trans-unit id="0d4e5120bb33dd7cd87d33b762323635453284d3" translate="yes" xml:space="preserve">
          <source>If the argument to &lt;code&gt;charblock()&lt;/code&gt; is not a known block, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;charblock()&lt;/code&gt; への引数が既知のブロックでない場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="cddc796120fb296cf9c181c113316137b8a64880" translate="yes" xml:space="preserve">
          <source>If the argument to &lt;code&gt;charblock()&lt;/code&gt; is not a known block, &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;charblock()&lt;/code&gt; の引数が既知のブロックでない場合、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="d7830cf54412f961c402c681fff76496d227d2f2" translate="yes" xml:space="preserve">
          <source>If the attribute name is unqualified, the attribute is installed in the current package. Otherwise it is installed in the qualifier's package:</source>
          <target state="translated">属性名が修飾されていない場合、その属性は現在のパッケージにインストールされます。そうでなければ、修飾子のパッケージにインストールされます。</target>
        </trans-unit>
        <trans-unit id="c1735572aa151643b864cff0b5bfb1e1bb6554fd" translate="yes" xml:space="preserve">
          <source>If the author's vision of the future of their module is sufficiently different from the vision of the pumpkin holder and perl5-porters as a whole so as to cause serious problems for Perl, the pumpkin holder may choose to formally fork the version of the module in the Perl core from the one maintained by the author. This should not be done lightly and should &lt;b&gt;always&lt;/b&gt; if at all possible be done only after direct input from Larry. If this is done, it must then be made explicit in the module as distributed with the Perl core that it is a forked version and that while it is based on the original author's work, it is no longer maintained by them. This must be noted in both the documentation and in the comments in the source of the module.</source>
          <target state="translated">著者の将来のモジュールに対するビジョンが、カボチャホルダーおよびperl5ポーター全体のビジョンと十分に異なり、Perlに深刻な問題を引き起こす場合、カボチャホルダーは、モジュールのバージョンを正式にフォークすることを選択できます。著者が保守しているものからのPerlコア。これは簡単に行うべきではなく、可能な場合は&lt;b&gt;常に&lt;/b&gt;、ラリーから直接入力した後でのみ行う必要があります。これを行う場合は、Perlコアとともに配布されるモジュールで、フォークされたバージョンであること、および元の作者の作業に基づいているものの、管理者が保守していないことを明示する必要があります。これは、ドキュメントとモジュールのソースのコメントの両方に記載する必要があります。</target>
        </trans-unit>
        <trans-unit id="955f45edead883f952974a52b2340b4943a3c2b2" translate="yes" xml:space="preserve">
          <source>If the av argument is a tied array then will call the &lt;code&gt;EXTEND&lt;/code&gt; tied array method with an argument of &lt;code&gt;(key+1)&lt;/code&gt;.</source>
          <target state="translated">av引数が &lt;code&gt;EXTEND&lt;/code&gt; 配列の場合、引数 &lt;code&gt;(key+1)&lt;/code&gt; を指定してEXTEND結合配列メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="1ff96c964c43432c71bf023f75aff4edc100165c" translate="yes" xml:space="preserve">
          <source>If the backslash is followed by a single digit, it's a backreference.</source>
          <target state="translated">バックスラッシュの後に一桁の数字が続く場合は後方参照です。</target>
        </trans-unit>
        <trans-unit id="a1567cb832ddb83a0b923a12411e03c46deba90f" translate="yes" xml:space="preserve">
          <source>If the beginning of some prebuilt path matches</source>
          <target state="translated">事前に構築されたパスの先頭が一致した場合</target>
        </trans-unit>
        <trans-unit id="e7f4bb43b4cedf6c41cad2b5a8c09df968a788f0" translate="yes" xml:space="preserve">
          <source>If the block of code given to &lt;a href=&quot;#pairmap&quot;&gt;&quot;pairmap&quot;&lt;/a&gt; contains lexical variables that are captured by a returned closure, and the closure is executed after the block has been re-used for the next iteration, these lexicals will not see the correct values. For example:</source>
          <target state="translated">&lt;a href=&quot;#pairmap&quot;&gt;「pairmap」&lt;/a&gt;に指定されたコードのブロックに、返されたクロージャによってキャプチャされた字句変数が含まれていて、ブロックが次の反復で再利用された後にクロージャが実行された場合、これらの字句は正しい値を認識しません。例えば：</target>
        </trans-unit>
        <trans-unit id="10167b28b5bd2cad97967630ae689888c6716c8a" translate="yes" xml:space="preserve">
          <source>If the block of code given to &lt;a href=&quot;#pairmap&quot;&gt;pairmap&lt;/a&gt; contains lexical variables that are captured by a returned closure, and the closure is executed after the block has been re-used for the next iteration, these lexicals will not see the correct values. For example:</source>
          <target state="translated">&lt;a href=&quot;#pairmap&quot;&gt;pairmap&lt;/a&gt;に指定されたコードのブロックに、返されたクロージャーによってキャプチャされたレキシカル変数が含まれていて、ブロックが次の反復で再利用された後にクロージャーが実行される場合、これらのレキシカルは正しい値を認識しません。例えば：</target>
        </trans-unit>
        <trans-unit id="4767b1747b48c85b5657695ae3a62c62eedbd7cb" translate="yes" xml:space="preserve">
          <source>If the bunzip2 program encounters a file containing multiple bzip2 files concatenated together it will automatically uncompress them all. The example below illustrates this behaviour</source>
          <target state="translated">bunzip2 プログラムが、複数の bzip2 ファイルが連結されたファイルに遭遇した場合、 自動的にそれらすべてを解凍する。以下の例は、この動作を示している。</target>
        </trans-unit>
        <trans-unit id="440a5d8f345e7d80a2856dd0eeb83f250fbc92a1" translate="yes" xml:space="preserve">
          <source>If the byte length &lt;code&gt;l1&lt;/code&gt; is non-zero, it says how far into &lt;code&gt;s1&lt;/code&gt; to check for fold equality. In other words, &lt;code&gt;s1&lt;/code&gt; +&lt;code&gt;l1&lt;/code&gt; will be used as a goal to reach. The scan will not be considered to be a match unless the goal is reached, and scanning won't continue past that goal. Correspondingly for &lt;code&gt;l2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt; .</source>
          <target state="translated">バイト長 &lt;code&gt;l1&lt;/code&gt; がゼロ以外の場合は、フォールドの等価性をチェックするために &lt;code&gt;s1&lt;/code&gt; までの距離を示します。つまり、 &lt;code&gt;s1&lt;/code&gt; + &lt;code&gt;l1&lt;/code&gt; が到達目標として使用されます。目標に到達しない限り、スキャンは一致と見なされず、スキャンはその目標を超えて続行されません。 &lt;code&gt;s2&lt;/code&gt; に関して &lt;code&gt;l2&lt;/code&gt; に対応して。</target>
        </trans-unit>
        <trans-unit id="c2fca1e4d1004f5ffcdaa83a7b896a3cca0e13fe" translate="yes" xml:space="preserve">
          <source>If the byte length &lt;code&gt;l1&lt;/code&gt; is non-zero, it says how far into &lt;code&gt;s1&lt;/code&gt; to check for fold equality. In other words, &lt;code&gt;s1&lt;/code&gt;+&lt;code&gt;l1&lt;/code&gt; will be used as a goal to reach. The scan will not be considered to be a match unless the goal is reached, and scanning won't continue past that goal. Correspondingly for &lt;code&gt;l2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">バイト長 &lt;code&gt;l1&lt;/code&gt; がゼロ以外の場合、フォールドが等しいかどうかをチェックするために &lt;code&gt;s1&lt;/code&gt; までの距離を示します。つまり、 &lt;code&gt;s1&lt;/code&gt; + &lt;code&gt;l1&lt;/code&gt; が到達する目標として使用されます。目標が達成されない限り、スキャンは一致とは見なされず、スキャンはその目標を超えて続行されません。 &lt;code&gt;s2&lt;/code&gt; に関して &lt;code&gt;l2&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="9b7b55adcf46426f8905247d52b7cd465b36f52b" translate="yes" xml:space="preserve">
          <source>If the c89 compiler complains of syntax errors during the build of the Socket extension then be sure to fix the syntax error in the system header /usr/include/sys/socket.h.</source>
          <target state="translated">ソケット拡張のビルド中にc89コンパイラが構文エラーを訴える場合は、システムヘッダ/usr/include/sys/socket.hの構文エラーを修正してください。</target>
        </trans-unit>
        <trans-unit id="440bf862cd2a86e099efb047265c5fac0693c286" translate="yes" xml:space="preserve">
          <source>If the call is to an lvalue subroutine, and &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; is defined &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; (</source>
          <target state="translated">呼び出しが左辺値サブルーチンであり、 &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; が定義されている場合 &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; （</target>
        </trans-unit>
        <trans-unit id="679d082044403152b577fab1a0ed8a9174ec8af7" translate="yes" xml:space="preserve">
          <source>If the call is to an lvalue subroutine, and &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; is defined &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt;(</source>
          <target state="translated">呼び出しが左辺値サブルーチンに対するものであり、 &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; が定義されている場合 &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; （</target>
        </trans-unit>
        <trans-unit id="3e23c7323ae1871ee025af31121766b37b8d3a26" translate="yes" xml:space="preserve">
          <source>If the call to &lt;code&gt;load&lt;/code&gt; is from &lt;code&gt;YourPackage&lt;/code&gt; , then that can be further simplified to</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; の呼び出しが &lt;code&gt;YourPackage&lt;/code&gt; からのものである場合は、さらに簡略化して</target>
        </trans-unit>
        <trans-unit id="5682bd082d01ef4bbac6126150d3b6f81612d0af" translate="yes" xml:space="preserve">
          <source>If the character following the backslash is an ASCII letter or an ASCII digit, then the sequence may be special; if so, it's listed below. A few letters have not been used yet, so escaping them with a backslash doesn't change them to be special. A future version of Perl may assign a special meaning to them, so if you have warnings turned on, Perl issues a warning if you use such a sequence. [1].</source>
          <target state="translated">バックスラッシュの後に続く文字が ASCII 文字か ASCII 桁であれば、そのシーケンスは特殊なものかもしれません。いくつかの文字はまだ使われていないので、バックスラッシュでエスケープしても特殊な文字には変わりません。Perl の将来のバージョンでは、これらの文字に特別な意味が与えられるかもしれませんので、警告を有効にしている場合は、このような文字列を使用すると Perl が警告を発します。[1].</target>
        </trans-unit>
        <trans-unit id="da17f25e114b45ba4ef865a9786c813cdbdd1421" translate="yes" xml:space="preserve">
          <source>If the character is canonically decomposable (including Hangul Syllables), it returns the (full) canonical decomposition as a string. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字が標準的に分解可能である場合（ハングル音節を含む）、（完全な）標準分解を文字列として返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="49a5873bb2356b7ed86679de87b264a15f6d0e92" translate="yes" xml:space="preserve">
          <source>If the character is canonically decomposable (including Hangul Syllables), it returns the (full) canonical decomposition as a string. Otherwise it returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">文字が正規に分解可能（ハングル音節文字を含む）の場合、（完全な）正規分解を文字列として返します。それ以外の場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="68a39c4975b03ffeafb0215bb69dbcb4fdb18e47" translate="yes" xml:space="preserve">
          <source>If the character is compatibility decomposable (including Hangul Syllables), it returns the (full) compatibility decomposition as a string. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字が互換性分解可能な場合（ハングル音節を含む）、（完全な）互換性分解を文字列として返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5de2fa7cb97ef2dd5b4c83623de57ebc81f1d7c6" translate="yes" xml:space="preserve">
          <source>If the character is compatibility decomposable (including Hangul Syllables), it returns the (full) compatibility decomposition as a string. Otherwise it returns &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">文字が互換性分解可能（ハングル音節文字を含む）の場合、（完全な）互換性分解を文字列として返します。それ以外の場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="27e1499119842240cb994c8553e174c966c0608a" translate="yes" xml:space="preserve">
          <source>If the characters delimiting</source>
          <target state="translated">を区切る文字が</target>
        </trans-unit>
        <trans-unit id="65221cae28ebb56c2b7e384de16ed70d718d62d1" translate="yes" xml:space="preserve">
          <source>If the child falls out of scope before &lt;code&gt;finalize&lt;/code&gt; is called, a failure diagnostic will be issued and the child is considered to have failed.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; が呼び出される前に子がスコープから外れた場合、失敗の診断が発行され、子は失敗したと見なされます。</target>
        </trans-unit>
        <trans-unit id="ac2316f205b2709d84d9e07b732224a9e1bdef17" translate="yes" xml:space="preserve">
          <source>If the child process dies for any reason, the next write to $chld_in is likely to generate a SIGPIPE in the parent, which is fatal by default. So you may wish to handle this signal.</source>
          <target state="translated">子プロセスが何らかの理由で死んだ場合、次の $chld_in への書き込みで親プロセスに SIGPIPE が発生する可能性が高く、デフォルトでは致命的です。そのため、このシグナルを処理したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="ddc80dbef3fa7a98447bcda86b6b6a922737dbbf" translate="yes" xml:space="preserve">
          <source>If the child process dies for any reason, the next write to CHLD_IN is likely to generate a SIGPIPE in the parent, which is fatal by default. So you may wish to handle this signal.</source>
          <target state="translated">子プロセスが何らかの理由で死んだ場合、CHLD_INへの次の書き込みで親プロセスにSIGPIPEが生成される可能性が高く、デフォルトでは致命的です。そのため、このシグナルを処理したい場合があります。</target>
        </trans-unit>
        <trans-unit id="dbd5594c7134763067cde3b54f3bfaeaa68b552a" translate="yes" xml:space="preserve">
          <source>If the child process follows the convention of C programs compiled with the _POSIX_EXIT macro set, the status value will contain the actual value of 0 to 255 returned by that program on a normal exit.</source>
          <target state="translated">子プロセスが _POSIX_EXIT マクロセットを使用してコンパイルされた C プログラムの規約に従う場合、ステータス値は、通常の終了時にそのプログラムが返す 0 から 255 までの実際の値を含みます。</target>
        </trans-unit>
        <trans-unit id="ba30380d4c3fff1189949a912a23e2f3c323237f" translate="yes" xml:space="preserve">
          <source>If the class shown in &lt;a href=&quot;#SYNOPSIS&quot;&gt;&quot;SYNOPSIS&quot;&lt;/a&gt; were placed in the MyClass.pm module, then the following code:</source>
          <target state="translated">&lt;a href=&quot;#SYNOPSIS&quot;&gt;「&lt;/a&gt; SYNOPSIS 」に示されているクラスがMyClass.pmモジュールに配置されている場合、次のコードが表示されます。</target>
        </trans-unit>
        <trans-unit id="3a2359effbd1215640880aada1292b5fa0877c9a" translate="yes" xml:space="preserve">
          <source>If the class shown in &lt;a href=&quot;#SYNOPSIS&quot;&gt;SYNOPSIS&lt;/a&gt; were placed in the MyClass.pm module, then the following code:</source>
          <target state="translated">示すクラス場合&lt;a href=&quot;#SYNOPSIS&quot;&gt;書式が&lt;/a&gt; MyClass.pmモジュールに入れ、その後、次のコード</target>
        </trans-unit>
        <trans-unit id="2f9ec72ad3a19d5c4b84af5eba887a50b7eef9b5" translate="yes" xml:space="preserve">
          <source>If the client asks for &quot;fr&quot;, that will look up successfully in %greetings, to the value &quot;Bonjour&quot;. And if the client asks for &quot;i-mingo&quot;, that will look up successfully in %greetings, to the value &quot;Hau'&quot;.</source>
          <target state="translated">クライアントが &quot;fr&quot; を尋ねると、%greetings で &quot;Bonjour&quot; という値で正常に検索されます。また、クライアントが &quot;i-mingo&quot; を尋ねると、%greetings で正常に検索され、値 &quot;Hau'&quot; になります。</target>
        </trans-unit>
        <trans-unit id="1e012fb4a0052bc107066983e24cd424b0582af0" translate="yes" xml:space="preserve">
          <source>If the code point is unassigned, this returns the block it would belong to if it were assigned. (If the Unicode version being used is so early as to not have blocks, all code points are considered to be in &lt;code&gt;No_Block&lt;/code&gt; .)</source>
          <target state="translated">コードポイントが割り当てられていない場合は、割り当てられている場合に属するブロックを返します。（使用されているUnicodeバージョンが、ブロックがないほど早い場合、すべてのコードポイントは &lt;code&gt;No_Block&lt;/code&gt; にあると見なされます。）</target>
        </trans-unit>
        <trans-unit id="318dcf1cce3429cb8c9fd8f8fb72e309dc55b11b" translate="yes" xml:space="preserve">
          <source>If the code point is unassigned, this returns the block it would belong to if it were assigned. (If the Unicode version being used is so early as to not have blocks, all code points are considered to be in &lt;code&gt;No_Block&lt;/code&gt;.)</source>
          <target state="translated">コードポイントが割り当てられていない場合、割り当てられた場合に属するブロックが返されます。（使用されているUnicodeバージョンが非常に早く、ブロックがない場合、すべてのコードポイントは &lt;code&gt;No_Block&lt;/code&gt; にあると見なされます。）</target>
        </trans-unit>
        <trans-unit id="46675f67eada0291c64ffce7fc8980b9b58c2b77" translate="yes" xml:space="preserve">
          <source>If the code to be executed doesn't vary, you may use the eval-BLOCK form to trap run-time errors without incurring the penalty of recompiling each time. The error, if any, is still returned in &lt;a href=&quot;perlvar#%24%40&quot;&gt;&lt;code&gt;$@&lt;/code&gt;&lt;/a&gt;. Examples:</source>
          <target state="translated">実行するコードが変わらない場合は、eval-BLOCK形式を使用して、毎回再コンパイルするというペナルティを課すことなく、実行時エラーをトラップできます。エラーがある場合でも、&lt;a href=&quot;perlvar#%24%40&quot;&gt; &lt;code&gt;$@&lt;/code&gt; &lt;/a&gt;返されます。例：</target>
        </trans-unit>
        <trans-unit id="ced2db748e9e7079888c75fca8f7175caebcea61" translate="yes" xml:space="preserve">
          <source>If the code to be executed doesn't vary, you may use the eval-BLOCK form to trap run-time errors without incurring the penalty of recompiling each time. The error, if any, is still returned in &lt;code&gt;$@&lt;/code&gt; . Examples:</source>
          <target state="translated">実行するコードが変わらない場合は、eval-BLOCK形式を使用して、毎回再コンパイルするペナルティを発生させずに実行時エラーをトラップできます。エラーがあれば、それでも &lt;code&gt;$@&lt;/code&gt; 返されます。例：</target>
        </trans-unit>
        <trans-unit id="2bd498c74c7384947431c9fbfc4c96437164ae53" translate="yes" xml:space="preserve">
          <source>If the code to execute had been passed in as a string, &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt; , there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller's scope.</source>
          <target state="translated">実行するコードが文字列 &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt; として渡された場合、架空のtimeout（）関数が呼び出し元のスコープで字句変数$ lineにアクセスする方法はありませんでした。</target>
        </trans-unit>
        <trans-unit id="c1827c22ec543702fffafe0a0fe1de8c30879660" translate="yes" xml:space="preserve">
          <source>If the code to execute had been passed in as a string, &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt;, there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller's scope.</source>
          <target state="translated">実行するコードが文字列 &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt; として渡された場合、仮想のtimeout（）関数が呼び出し元のスコープ内の字句変数$ lineにアクセスする方法はありませんでした。</target>
        </trans-unit>
        <trans-unit id="68179989040030e944377fc50f5fa69dee822170" translate="yes" xml:space="preserve">
          <source>If the command works, you can move to the next step, but beware: &lt;b&gt;You'll have to remove the directory from the device once you are done! Unlike &lt;i&gt;/mnt/asec&lt;/i&gt;, &lt;i&gt;/data/local/tmp&lt;/i&gt; may not get automatically garbage collected once you shut off the phone&lt;/b&gt;.</source>
          <target state="translated">コマンドが機能する場合は、次の手順に進むことができますが、注意してください。&lt;b&gt;完了したら、デバイスからディレクトリを削除する必要があります。&lt;i&gt;/ mnt / asec&lt;/i&gt;とは異なり、電話の電源を切ると、&lt;i&gt;/ data / local / tmp&lt;/i&gt;が自動的にガベージコレクションされない場合があります&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="9c340c9bb0fb834396be0e28dd3dddd81bf15437" translate="yes" xml:space="preserve">
          <source>If the condition expression of a &lt;code&gt;while&lt;/code&gt; statement is based on any of a group of iterative expression types then it gets some magic treatment. The affected iterative expression types are &lt;a href=&quot;perlfunc#readline-EXPR&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&lt;code&gt;&amp;lt;FILEHANDLE&amp;gt;&lt;/code&gt;&lt;/a&gt; input operator, &lt;a href=&quot;perlfunc#readdir-DIRHANDLE&quot;&gt;&lt;code&gt;readdir&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;perlfunc#glob-EXPR&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt;&lt;code&gt;&amp;lt;PATTERN&amp;gt;&lt;/code&gt;&lt;/a&gt; globbing operator, and &lt;a href=&quot;perlfunc#each-HASH&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt;. If the condition expression is one of these expression types, then the value yielded by the iterative operator will be implicitly assigned to &lt;code&gt;$_&lt;/code&gt;. If the condition expression is one of these expression types or an explicit assignment of one of them to a scalar, then the condition actually tests for definedness of the expression's value, not for its regular truth value.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; ステートメントの条件式が、反復式タイプのグループのいずれかに基づいている場合、魔法のような扱いを受けます。影響を受ける反復式のタイプは、&lt;a href=&quot;perlfunc#readline-EXPR&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt; &lt;code&gt;&amp;lt;FILEHANDLE&amp;gt;&lt;/code&gt; &lt;/a&gt;入力演算子、&lt;a href=&quot;perlfunc#readdir-DIRHANDLE&quot;&gt; &lt;code&gt;readdir&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;perlfunc#glob-EXPR&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;perlop#I%2FO-Operators&quot;&gt; &lt;code&gt;&amp;lt;PATTERN&amp;gt;&lt;/code&gt; &lt;/a&gt; globbing演算子、および&lt;a href=&quot;perlfunc#each-HASH&quot;&gt; &lt;code&gt;each&lt;/code&gt; &lt;/a&gt;です。条件式がこれらの式タイプの1つである場合、反復演算子によって生成された値は暗黙的に &lt;code&gt;$_&lt;/code&gt; 割り当てられます。。条件式がこれらの式タイプの1つであるか、スカラーへの明示的な割り当てである場合、条件は実際には、通常の真理値ではなく、式の値の定義をテストします。</target>
        </trans-unit>
        <trans-unit id="c5dcda0eb63d695c2273d9f58a5b27fc7e844c60" translate="yes" xml:space="preserve">
          <source>If the configurations variable &lt;code&gt;build_dir_reuse&lt;/code&gt; is set to a true value, then CPAN.pm reads the collected YAML files. If the stored signature matches the currently running perl, the stored state is loaded into memory such that persistence between sessions is effectively established.</source>
          <target state="translated">構成変数 &lt;code&gt;build_dir_reuse&lt;/code&gt; がtrue値に設定されている場合、CPAN.pmは収集されたYAMLファイルを読み取ります。保存された署名が現在実行中のperlと一致する場合、保存された状態がメモリにロードされ、セッション間の永続性が効果的に確立されます。</target>
        </trans-unit>
        <trans-unit id="a91d44bc473043f072a494275450d9c876250d17" translate="yes" xml:space="preserve">
          <source>If the connection is via a firewall then the &lt;code&gt;authorize&lt;/code&gt; method will be called with no arguments.</source>
          <target state="translated">接続がファイアウォール経由の場合、 &lt;code&gt;authorize&lt;/code&gt; メソッドは引数なしで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="880ff18ec98ddcf514d383275dae13c355bbcadf" translate="yes" xml:space="preserve">
          <source>If the construct is a here-doc, the ending delimiter is a line that has a terminating string as the content. Therefore &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; is terminated by &lt;code&gt;EOF&lt;/code&gt; immediately followed by &lt;code&gt;&quot;\n&quot;&lt;/code&gt; and starting from the first column of the terminating line. When searching for the terminating line of a here-doc, nothing is skipped. In other words, lines after the here-doc syntax are compared with the terminating string line by line.</source>
          <target state="translated">構成がヒアドキュメントである場合、終了デリミタは、内容として終了文字列を持つ行です。したがって、 &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; は、 &lt;code&gt;EOF&lt;/code&gt; の直後に &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 続き、終了行の最初の列から始まります。ヒアドキュメントの終了行を検索する場合、何もスキップされません。つまり、here-doc構文の後の行は、行ごとに終了文字列と比較されます。</target>
        </trans-unit>
        <trans-unit id="e1f5405c8fb7cef756ea27523f26d6d391697258" translate="yes" xml:space="preserve">
          <source>If the constructor fails undef will be returned and an error message will be in $@</source>
          <target state="translated">コンストラクタが失敗した場合は undef が返され、エラーメッセージが $@ に表示されます。</target>
        </trans-unit>
        <trans-unit id="fd68f60bc1a46c89ed70417ef132417733df0aab" translate="yes" xml:space="preserve">
          <source>If the constructor fails, it will set &lt;code&gt;$@&lt;/code&gt; to an appropriate error message; this may be from &lt;code&gt;$!&lt;/code&gt; or it may be some other string; not every failure necessarily has an associated &lt;code&gt;errno&lt;/code&gt; value.</source>
          <target state="translated">コンストラクターが失敗すると、 &lt;code&gt;$@&lt;/code&gt; が適切なエラーメッセージに設定されます。これは &lt;code&gt;$!&lt;/code&gt; からかもしれません！または、他の文字列の場合もあります。すべての障害に必ずしも関連する &lt;code&gt;errno&lt;/code&gt; 値があるわけではありません。</target>
        </trans-unit>
        <trans-unit id="a03d6a855f28c1f0fcb373d36da3e2b752b1b618" translate="yes" xml:space="preserve">
          <source>If the constructor is only passed a single argument, it is assumed to be a &lt;code&gt;Peer&lt;/code&gt; specification.</source>
          <target state="translated">コンストラクターに単一の引数のみが渡される場合、それは &lt;code&gt;Peer&lt;/code&gt; 仕様であると想定されます。</target>
        </trans-unit>
        <trans-unit id="59d6c514d80580b526f459658680b5bcb3039600" translate="yes" xml:space="preserve">
          <source>If the constructor is only passed a single argument, it is assumed to be a &lt;code&gt;PeerAddr&lt;/code&gt; specification.</source>
          <target state="translated">コンストラクターに1つの引数しか渡されない場合、それは &lt;code&gt;PeerAddr&lt;/code&gt; 仕様であると想定されます。</target>
        </trans-unit>
        <trans-unit id="253c66bbe032a626b97c6e706376db98b636ddae" translate="yes" xml:space="preserve">
          <source>If the constructor is passed a defined but false value for the &lt;code&gt;Blocking&lt;/code&gt; argument then the socket is put into non-blocking mode. When in non-blocking mode, the socket will not be set up by the time the constructor returns, because the underlying &lt;code&gt;connect(2)&lt;/code&gt; syscall would otherwise have to block.</source>
          <target state="translated">コンストラクターに &lt;code&gt;Blocking&lt;/code&gt; 引数の定義済みで偽の値が渡された場合、ソケットは非ブロッキングモードになります。非ブロッキングモードの場合、基礎となる &lt;code&gt;connect(2)&lt;/code&gt; syscallがブロックする必要があるため、コンストラクターが戻るまでにソケットはセットアップされません。</target>
        </trans-unit>
        <trans-unit id="2c1d4da7e238174b01de906293d93c6822b7ffed" translate="yes" xml:space="preserve">
          <source>If the count doesn't impress your friends, then the code might. :-)</source>
          <target state="translated">もしカウントがあなたの友人を感動させないのであれば、コードはそうなるかもしれません。)</target>
        </trans-unit>
        <trans-unit id="e2812a31f32729d7d8acbab2252b618f1597089e" translate="yes" xml:space="preserve">
          <source>If the current directory is not writable, file is created using modified &lt;code&gt;tmpnam&lt;/code&gt; , so there may be a race condition.</source>
          <target state="translated">現在のディレクトリが書き込み可能でない場合、ファイルは変更された &lt;code&gt;tmpnam&lt;/code&gt; を使用して作成されるため、競合状態が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="58341845d1b46d579ba494b307ff64132940c287" translate="yes" xml:space="preserve">
          <source>If the current directory is not writable, file is created using modified &lt;code&gt;tmpnam&lt;/code&gt;, so there may be a race condition.</source>
          <target state="translated">現在のディレクトリが書き込み可能でない場合、ファイルは変更された &lt;code&gt;tmpnam&lt;/code&gt; を使用して作成されるため、競合状態が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="494e23aba89eecf5e12f5237686e230eddf4cf1f" translate="yes" xml:space="preserve">
          <source>If the current tests are considered &quot;TODO&quot; it will return the reason, if any. This reason can come from a &lt;code&gt;$TODO&lt;/code&gt; variable or the last call to &lt;code&gt;todo_start()&lt;/code&gt; .</source>
          <target state="translated">現在のテストが「TODO」と見なされた場合、理由があればそれを返します。この理由は、 &lt;code&gt;$TODO&lt;/code&gt; 変数または &lt;code&gt;todo_start()&lt;/code&gt; への最後の呼び出しが原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="33c537a42d68a9fab37456220c53df0c1404714b" translate="yes" xml:space="preserve">
          <source>If the current tests are considered &quot;TODO&quot; it will return the reason, if any. This reason can come from a &lt;code&gt;$TODO&lt;/code&gt; variable or the last call to &lt;code&gt;todo_start()&lt;/code&gt;.</source>
          <target state="translated">現在のテストが「TODO」と見なされる場合、理由がある場合はそれが返されます。この理由は、 &lt;code&gt;$TODO&lt;/code&gt; 変数または &lt;code&gt;todo_start()&lt;/code&gt; の最後の呼び出しに起因する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d07a75af0e09b32f52321893f3368ffdcf3680ce" translate="yes" xml:space="preserve">
          <source>If the data the &lt;code&gt;info&lt;/code&gt; facet needs to convey can be represented as a table then the data may be placed in this attribute in a more raw form for better display. The data must also be represented in the &lt;code&gt;details&lt;/code&gt; attribute for renderers which do not support rendering tables directly.</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; ファセットが伝達する必要のあるデータをテーブルとして表すことができる場合、データはより適切に表示するために、より生の形式でこの属性に配置できます。データは、テーブルのレンダリングを直接サポートしないレンダラーの &lt;code&gt;details&lt;/code&gt; 属性でも表す必要があります。</target>
        </trans-unit>
        <trans-unit id="4dc2b173d8d4940a748b9c83e49e0862799d41a0" translate="yes" xml:space="preserve">
          <source>If the debugging output of &lt;code&gt;-D&lt;/code&gt; doesn't help you, it's time to step through perl's execution with a source-level debugger.</source>
          <target state="translated">&lt;code&gt;-D&lt;/code&gt; のデバッグ出力が役に立たない場合は、ソースレベルのデバッガーを使用してperlの実行をステップ実行する番です。</target>
        </trans-unit>
        <trans-unit id="e01dfde61dfe31eebc6c4d98caf34437480ee91e" translate="yes" xml:space="preserve">
          <source>If the default collation sequence is used, and the BASE is less than or equal to 36, the letter case in STR is ignored.</source>
          <target state="translated">デフォルトの照合順序が使用され、BASEが36以下の場合、STRの大文字小文字は無視されます。</target>
        </trans-unit>
        <trans-unit id="5d9b61b179e59a5faa76c718b44a80bf30b29231" translate="yes" xml:space="preserve">
          <source>If the deferred-write buffer isn't yet full, but the total size of the buffer and the read cache would exceed the &lt;code&gt;memory&lt;/code&gt; limit, the oldest records will be expired from the read cache until the total size is under the limit.</source>
          <target state="translated">遅延書き込みバッファがまだいっぱいではないが、バッファと読み取りキャッシュの合計サイズが &lt;code&gt;memory&lt;/code&gt; 制限を超える場合、合計サイズが制限を下回るまで、最も古いレコードが読み取りキャッシュから期限切れになります。</target>
        </trans-unit>
        <trans-unit id="2d787ba93d433e8611c0010f5b5125e21c2fae5b" translate="yes" xml:space="preserve">
          <source>If the delimiter chosen is a single quote, no interpolation is done on either the</source>
          <target state="translated">選択された区切り文字が単一引用符である場合は</target>
        </trans-unit>
        <trans-unit id="938284088206ea35ed759b0277c2738a57db55da" translate="yes" xml:space="preserve">
          <source>If the delimiter chosen is a single quote, no variable interpolation is done on either the</source>
          <target state="translated">選択された区切り文字が単一引用符の場合、変数の補間は</target>
        </trans-unit>
        <trans-unit id="fd691ad27529116a3a5593dc1f80d4b01d408999" translate="yes" xml:space="preserve">
          <source>If the destination (second argument) already exists and is a directory, and the source (first argument) is not a filehandle, then the source file will be copied into the directory specified by the destination, using the same base name as the source file. It's a failure to have a filehandle as the source when the destination is a directory.</source>
          <target state="translated">宛先(第2引数)が既に存在していてディレクトリであり、ソース(第1引数)がファイルハンドルではない場合、ソースファイルはソースファイルと同じベース名で、宛先が指定したディレクトリにコピーされます。宛先がディレクトリの場合、ファイルハンドルがソースになっていないのは失敗です。</target>
        </trans-unit>
        <trans-unit id="bf967ef029273cc2d212ca164cc9a8a6a20b4430" translate="yes" xml:space="preserve">
          <source>If the element type does not start with a &lt;code&gt;'*'&lt;/code&gt; , the accessor returns the element value (after assignment). If the element type starts with a &lt;code&gt;'*'&lt;/code&gt; , a reference to the element itself is returned.</source>
          <target state="translated">要素タイプが &lt;code&gt;'*'&lt;/code&gt; で始まらない場合、アクセサーは要素値を返します（割り当て後）。要素タイプが &lt;code&gt;'*'&lt;/code&gt; で始まる場合、要素自体への参照が返されます。</target>
        </trans-unit>
        <trans-unit id="087f6b4ba4b4848e4cef927f8a6659e4cd63651c" translate="yes" xml:space="preserve">
          <source>If the element type does not start with a &lt;code&gt;'*'&lt;/code&gt;, the accessor returns the element value (after assignment). If the element type starts with a &lt;code&gt;'*'&lt;/code&gt;, a reference to the element itself is returned.</source>
          <target state="translated">要素タイプが &lt;code&gt;'*'&lt;/code&gt; で始まらない場合、アクセサーは要素値を返します（割り当て後）。要素タイプが &lt;code&gt;'*'&lt;/code&gt; で始まる場合、要素自体への参照が返されます。</target>
        </trans-unit>
        <trans-unit id="4e23930732591461e14ec21d8b1f90dcd530ad74" translate="yes" xml:space="preserve">
          <source>If the element type is &lt;code&gt;'$'&lt;/code&gt; , the value of the element (after assignment) is returned. If the element type is &lt;code&gt;'*$'&lt;/code&gt; , a reference to the element is returned.</source>
          <target state="translated">要素タイプが &lt;code&gt;'$'&lt;/code&gt; の場合、（割り当て後の）要素の値が返されます。要素タイプが &lt;code&gt;'*$'&lt;/code&gt; の場合、要素への参照が返されます。</target>
        </trans-unit>
        <trans-unit id="416316907f2cce96ccc209eeb130ba72299c8e3b" translate="yes" xml:space="preserve">
          <source>If the element type is &lt;code&gt;'$'&lt;/code&gt;, the value of the element (after assignment) is returned. If the element type is &lt;code&gt;'*$'&lt;/code&gt;, a reference to the element is returned.</source>
          <target state="translated">要素タイプが &lt;code&gt;'$'&lt;/code&gt; 場合、要素の値（割り当て後）が返されます。要素タイプが &lt;code&gt;'*$'&lt;/code&gt; の場合、要素への参照が返されます。</target>
        </trans-unit>
        <trans-unit id="1bac597df37b35f3a7dd05dd8ec187e68ab2f23b" translate="yes" xml:space="preserve">
          <source>If the empty regex &lt;code&gt;//&lt;/code&gt; is used, the string is split into individual characters. If the regex has groupings, then the list produced contains the matched substrings from the groupings as well:</source>
          <target state="translated">空の正規表現 &lt;code&gt;//&lt;/code&gt; を使用すると、文字列は個々の文字に分割されます。正規表現にグループがある場合、生成されたリストには、グループからの一致した部分文字列も含まれます。</target>
        </trans-unit>
        <trans-unit id="8e04e07bd20c824f00e23be10a97b35d7d8bdaf8" translate="yes" xml:space="preserve">
          <source>If the empty regexp &lt;code&gt;//&lt;/code&gt; is used, the regexp always matches and the string is split into individual characters. If the regexp has groupings, then the resulting list contains the matched substrings from the groupings as well. For instance,</source>
          <target state="translated">空の正規表現 &lt;code&gt;//&lt;/code&gt; を使用すると、正規表現は常に一致し、文字列は個々の文字に分割されます。正規表現にグループがある場合、結果のリストには、グループからの一致した部分文字列も含まれます。例えば、</target>
        </trans-unit>
        <trans-unit id="9160efcd7b61ecdb5eab89bb5f1048b8690bd897" translate="yes" xml:space="preserve">
          <source>If the entereval op is permitted then the code can use eval &quot;...&quot; to 'hide' code which might use denied ops. This is not a major problem since when the code tries to execute the eval it will fail because the opmask is still in effect. However this technique would allow clever, and possibly harmful, code to 'probe' the boundaries of what is possible.</source>
          <target state="translated">entereval のオペが許可されている場合、コードは eval &quot;...&quot; を使用して、拒否されたオペを使用する可能性のあるコードを「隠す」ことができます。これは、コードが eval を実行しようとすると opmask が有効なままなので失敗するので、大きな問題ではありません。しかし、このテクニックを使うことで、巧妙で有害なコードが可能な範囲を「探る」ことができるようになります。</target>
        </trans-unit>
        <trans-unit id="a6dd91d8fc44e261add22f788040f3b0d9653b9a" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code&gt;PERL_TEST_HARNESS_DUMP_TAP&lt;/code&gt; is defined it should name a directory into which a copy of the raw TAP for each test will be written. TAP is written to files named for each test. Subdirectories will be created as needed.</source>
          <target state="translated">環境変数 &lt;code&gt;PERL_TEST_HARNESS_DUMP_TAP&lt;/code&gt; が定義されている場合は、各テストのraw TAPのコピーが書き込まれるディレクトリを指定する必要があります。TAPは、テストごとに名前が付けられたファイルに書き込まれます。必要に応じてサブディレクトリが作成されます。</target>
        </trans-unit>
        <trans-unit id="1677cef1b7d08b33d16cc5ab5e637dae11805c4b" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code&gt;SSL_CERT_FILE&lt;/code&gt; is present, HTTP::Tiny will try to find a CA certificate file in that location.</source>
          <target state="translated">環境変数 &lt;code&gt;SSL_CERT_FILE&lt;/code&gt; が存在する場合、HTTP :: Tinyはその場所でCA証明書ファイルを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="85e9e60a253e04ba9480e07ca8d4f04ff80b74d6" translate="yes" xml:space="preserve">
          <source>If the event is a final subtest event, this should contain the subtest ID.</source>
          <target state="translated">イベントが最終的なサブテストイベントの場合は、サブテスト ID を含む必要があります。</target>
        </trans-unit>
        <trans-unit id="2d65844b53fa3e967e642960ca12717bb316d545" translate="yes" xml:space="preserve">
          <source>If the event is inside a subtest this should have the subtest ID.</source>
          <target state="translated">イベントがサブテスト内にある場合は、サブテストIDを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="9e66c1c6198ecf06cc2142e9e5e1dd957bf8c18d" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is a script with the &quot;magic&quot; &lt;code&gt;#!&lt;/code&gt; line or &lt;code&gt;extproc&lt;/code&gt; line which specifies shell;</source>
          <target state="translated">実行可能ファイルは、システム（）/ execの（）/パイプ・オープン（によって呼び出された場合）/ &lt;code&gt;``&lt;/code&gt; 「魔法」とスクリプトです &lt;code&gt;#!&lt;/code&gt; シェルを指定する行または &lt;code&gt;extproc&lt;/code&gt; 行。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
