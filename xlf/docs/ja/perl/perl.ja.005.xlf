<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="246b91b96e62d4665dc1c91df63b1c10f4839a54" translate="yes" xml:space="preserve">
          <source>, as you'll need to understand the &lt;a href=&quot;parser&quot;&gt;TAP::Parser&lt;/a&gt; API. A good place to start is by understanding how &lt;a href=&quot;#aggregate_tests&quot;&gt;aggregate_tests&lt;/a&gt; works.</source>
          <target state="translated">、&lt;a href=&quot;parser&quot;&gt;TAP :: Parser&lt;/a&gt; API を理解する必要があるため。まず、&lt;a href=&quot;#aggregate_tests&quot;&gt;aggregate_testsの&lt;/a&gt;仕組みを理解することから始めてください。</target>
        </trans-unit>
        <trans-unit id="883a2167578552cc32e56e34c60f2a72656b4d09" translate="yes" xml:space="preserve">
          <source>, assumed to be a sequence of octets in</source>
          <target state="translated">、のオクテットのシーケンスであると仮定</target>
        </trans-unit>
        <trans-unit id="97655fb802994ecc260e5ef2fb866ce517a9c299" translate="yes" xml:space="preserve">
          <source>, at least once</source>
          <target state="translated">、 少なくとも一度は</target>
        </trans-unit>
        <trans-unit id="f734969a140ce2aea92a8a6a21bc618d5f511646" translate="yes" xml:space="preserve">
          <source>, at least once, but as few times as possible</source>
          <target state="translated">、少なくとも1回、ただし可能な限り少ない回数</target>
        </trans-unit>
        <trans-unit id="e751512716d9aa9f5b3c28259b944c1f3b0c56d1" translate="yes" xml:space="preserve">
          <source>, attempts to bring some of the newer Perl API features to older versions of Perl, so that you can worry less about keeping track of old releases, but users can still reap the benefit.</source>
          <target state="translated">は、古いバージョンのPerlに新しいPerl API機能の一部を取り入れようとするため、古いリリースを追跡することについて心配する必要はありませんが、ユーザーは引き続きメリットを享受できます。</target>
        </trans-unit>
        <trans-unit id="dcf124669e071fb32c507b660ca8a45e10a33382" translate="yes" xml:space="preserve">
          <source>, because the $1 variable is magical and read-only :</source>
          <target state="translated">、$ 1変数は不思議で読み取り専用なので、</target>
        </trans-unit>
        <trans-unit id="24f1b41d67d203257d6ce62a6d577842a88809d7" translate="yes" xml:space="preserve">
          <source>, because the reduced pollution of newer Perl versions is an important thing. It's so important that the old polluting ways of original Perl modules will not be supported very far into the future, and your module will almost certainly break! By adapting to it now, you'll gain compatibility and a sense of having done the electronic ecology some good.</source>
          <target state="translated">なぜなら、新しいバージョンのPerlの汚染を減らすことは重要なことだからです。オリジナルのPerlモジュールの古い汚染方法が将来的にサポートされなくなることは非常に重要であり、あなたのモジュールはほぼ確実に壊れます！今すぐそれに適応することで、互換性と、エレクトロニックエコロジーをある程度うまく行ったという感覚が得られます。</target>
        </trans-unit>
        <trans-unit id="cd35ebaf87e878605763ba0f4d65f6bf7f75dcc8" translate="yes" xml:space="preserve">
          <source>, because you were accidentally accessing &lt;code&gt;@aref&lt;/code&gt; , an undeclared variable, and it would thereby remind you to write instead:</source>
          <target state="translated">、宣言されていない変数である &lt;code&gt;@aref&lt;/code&gt; に誤ってアクセスしていたため、代わりに次のように記述することを思い出させます。</target>
        </trans-unit>
        <trans-unit id="d0ee637a4d76e416584c4c77f040993c430048a2" translate="yes" xml:space="preserve">
          <source>, because you were accidentally accessing &lt;code&gt;@aref&lt;/code&gt;, an undeclared variable, and it would thereby remind you to write instead:</source>
          <target state="translated">、宣言されていない変数である &lt;code&gt;@aref&lt;/code&gt; に誤ってアクセスしていたため、代わりに次のように記述するように通知されます。</target>
        </trans-unit>
        <trans-unit id="fc90bbfbb3e4cc7f9f2ca2bbceaeebbd891dbeb9" translate="yes" xml:space="preserve">
          <source>, below takes 2 parameters and increments each directly.</source>
          <target state="translated">、以下は2つのパラメーターを取り、それぞれを直接増分します。</target>
        </trans-unit>
        <trans-unit id="a6beabe044ad8f9d1627ed533c6a9c88995aa997" translate="yes" xml:space="preserve">
          <source>, but $siteprefix might be</source>
          <target state="translated">、ただし$ siteprefixは</target>
        </trans-unit>
        <trans-unit id="6fce1e601c1523c8b2526a111e9e136024aa2709" translate="yes" xml:space="preserve">
          <source>, but are no longer available with</source>
          <target state="translated">、ただし以下では利用できません</target>
        </trans-unit>
        <trans-unit id="64ad796371383427b4cd0ba4371e73bd89ebb1b2" translate="yes" xml:space="preserve">
          <source>, but because &lt;code&gt;Foo&lt;/code&gt; defines a symbol (the &lt;code&gt;exclaim&lt;/code&gt; subroutine), &lt;code&gt;base&lt;/code&gt; will not die when the &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; fails to load</source>
          <target state="translated">、しかし &lt;code&gt;Foo&lt;/code&gt; はシンボル（ &lt;code&gt;exclaim&lt;/code&gt; サブルーチン）を定義しているため、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; がロードに失敗しても &lt;code&gt;base&lt;/code&gt; は死にません</target>
        </trans-unit>
        <trans-unit id="c525aea4fc6dee1fd7c69c615565d059f44dd5dd" translate="yes" xml:space="preserve">
          <source>, but because &lt;code&gt;Foo&lt;/code&gt; defines a symbol (the &lt;code&gt;exclaim&lt;/code&gt; subroutine), &lt;code&gt;base&lt;/code&gt; will not die when the &lt;code&gt;require&lt;/code&gt; fails to load</source>
          <target state="translated">、ただし、 &lt;code&gt;Foo&lt;/code&gt; はシンボル（ &lt;code&gt;exclaim&lt;/code&gt; サブルーチン）を定義しているため、 &lt;code&gt;require&lt;/code&gt; のロードに失敗しても &lt;code&gt;base&lt;/code&gt; は停止しません。</target>
        </trans-unit>
        <trans-unit id="61e7380af3179cca867b3885f99b22e74a3249cf" translate="yes" xml:space="preserve">
          <source>, but because you access them via the &lt;code&gt;maketext&lt;/code&gt; method, which looks for entries across all the &lt;code&gt;%Lexicon&lt;/code&gt; hashes in a language class</source>
          <target state="translated">、ただし、言語クラスのすべての &lt;code&gt;%Lexicon&lt;/code&gt; ハッシュでエントリを検索する &lt;code&gt;maketext&lt;/code&gt; メソッドを介してアクセスするため</target>
        </trans-unit>
        <trans-unit id="a42a597d11c292d0f56cbf1684a5eac6028a67a1" translate="yes" xml:space="preserve">
          <source>, but can also be</source>
          <target state="translated">、しかしまたすることができます</target>
        </trans-unit>
        <trans-unit id="7909130b18300cbb98ea4bbe9e66d49642019dec" translate="yes" xml:space="preserve">
          <source>, but cannot come at the end of a string, because the backslash would be parsed as escaping the end quote.</source>
          <target state="translated">、ただし、バックスラッシュは終了引用符をエスケープするものとして解析されるため、文字列の最後に来ることはできません。</target>
        </trans-unit>
        <trans-unit id="42948efb81aca3fb2bd97534710c99990f79587a" translate="yes" xml:space="preserve">
          <source>, but from line 4.</source>
          <target state="translated">、ただし4行目から。</target>
        </trans-unit>
        <trans-unit id="bd1670f6de47acc9c9b7267ab71cba06c196ce25" translate="yes" xml:space="preserve">
          <source>, but it causes no harm.)</source>
          <target state="translated">、しかしそれは害を引き起こしません。）</target>
        </trans-unit>
        <trans-unit id="37120fa0734b652eb610ce4ae8b5f1bcc7d622f5" translate="yes" xml:space="preserve">
          <source>, but it does not contain all the characters from those blocks. It does not, for example, contain the digits 0-9, because those digits are shared across many scripts, and hence are in the &lt;code&gt;Common&lt;/code&gt; script.</source>
          <target state="translated">、ただし、これらのブロックのすべての文字が含まれているわけではありません。たとえば、0〜9の数字は含まれていません。これらの数字は多くのスクリプトで共有されているため、 &lt;code&gt;Common&lt;/code&gt; スクリプトに含まれているためです。</target>
        </trans-unit>
        <trans-unit id="1f2db577fa7893e92367cf784603b9d9d657f707" translate="yes" xml:space="preserve">
          <source>, but it has no problem linking to symbols in the</source>
          <target state="translated">、しかしそれはのシンボルへのリンクに問題はありません</target>
        </trans-unit>
        <trans-unit id="bfb0016f55f0d3d559ba19fb54ebc0f455007395" translate="yes" xml:space="preserve">
          <source>, but it is a PM application.</source>
          <target state="translated">、しかしそれはPMアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="bbe2c80423e439b3e4c161c99b0cea935717fc61" translate="yes" xml:space="preserve">
          <source>, but it is a very bad idea for two reasons.</source>
          <target state="translated">、しかしそれは二つの理由で非常に悪い考えです。</target>
        </trans-unit>
        <trans-unit id="cdd23309b99a536c1f9d3df8a7c3d7430cce3c6b" translate="yes" xml:space="preserve">
          <source>, but it's really a 2D plane). The number</source>
          <target state="translated">、しかしそれは実際には2D平面です）。数字</target>
        </trans-unit>
        <trans-unit id="b1b91a2c92813f244d7d492decf11786f03248cc" translate="yes" xml:space="preserve">
          <source>, but parameter order has been &quot;tidied up a little&quot;.</source>
          <target state="translated">、ただしパラメータの順序は「少し整理されています」。</target>
        </trans-unit>
        <trans-unit id="14b0058af4ca943727004b79d41d8ab59c3a8dd9" translate="yes" xml:space="preserve">
          <source>, but should prefer</source>
          <target state="translated">、しかし好むべきです</target>
        </trans-unit>
        <trans-unit id="114efd0755f2064562435a7b7db5cf78b23a339b" translate="yes" xml:space="preserve">
          <source>, but that the meaning of the code point has been</source>
          <target state="translated">、しかしコードポイントの意味は</target>
        </trans-unit>
        <trans-unit id="75a1a26b1e5fe270ec7a97baa5b4e4135475611b" translate="yes" xml:space="preserve">
          <source>, but the &lt;a href=&quot;Email::Valid&quot;&gt;Email::Valid&lt;/a&gt; module will do both part</source>
          <target state="translated">、ただし、&lt;a href=&quot;Email::Valid&quot;&gt;Email :: Valid&lt;/a&gt;モジュールは両方の部分を実行します</target>
        </trans-unit>
        <trans-unit id="e48be256548eb3d87af3b99e921dd4b6fcf05890" translate="yes" xml:space="preserve">
          <source>, but the &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt; module was unable to locate this library. See &lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt;.</source>
          <target state="translated">、ただし&lt;a href=&quot;dynaloader&quot;&gt;DynaLoader&lt;/a&gt;モジュールはこのライブラリを見つけることができませんでした。&lt;a href=&quot;dynaloader&quot;&gt;DynaLoaderを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bec967278894f864c70eea888e73e74018b65bcb" translate="yes" xml:space="preserve">
          <source>, but the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Valid&quot;&gt;Email::Valid&lt;/a&gt; module will do both part</source>
          <target state="translated">、しかし&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Valid&quot;&gt;Email :: Valid&lt;/a&gt;モジュールは両方の役割を果たします</target>
        </trans-unit>
        <trans-unit id="7536c70955b6a15d5f19153fc86efe49d7b1220b" translate="yes" xml:space="preserve">
          <source>, but the latter parts after</source>
          <target state="translated">、しかし後のパートは</target>
        </trans-unit>
        <trans-unit id="6b70056cdd55185377fa7fb36dcc37e7dfcc656b" translate="yes" xml:space="preserve">
          <source>, but there are legitimate cases where the polar style</source>
          <target state="translated">、しかし極スタイルが</target>
        </trans-unit>
        <trans-unit id="b30d41b915336fadcad5858b5a1e924cedc04255" translate="yes" xml:space="preserve">
          <source>, but there are some issues with this form, described below.</source>
          <target state="translated">、ただし、このフォームには以下に説明するいくつかの問題があります。</target>
        </trans-unit>
        <trans-unit id="083b89b36ef467b16cb732332b28ca7c58c02c6f" translate="yes" xml:space="preserve">
          <source>, but these are also sufficiently generic that the actual version of perl probably doesn't matter too much.)</source>
          <target state="translated">、しかし、これらは十分に一般的であり、perlの実際のバージョンはおそらくあまり重要ではありません。）</target>
        </trans-unit>
        <trans-unit id="440fbd28d07d5c795b6c02a88a168111c4c2b6d4" translate="yes" xml:space="preserve">
          <source>, but they are &quot;shared in the private address space of the process&quot;; this is possible because the address at which different sections of the</source>
          <target state="translated">、しかし「それらはプロセスのプライベートアドレス空間で共有されます」; これが可能なのは、</target>
        </trans-unit>
        <trans-unit id="e5d0a0fe8de2f9a20207b5984a8a5c6b03dfd271" translate="yes" xml:space="preserve">
          <source>, but those are both created with customizable</source>
          <target state="translated">、しかしそれらは両方ともカスタマイズ可能な</target>
        </trans-unit>
        <trans-unit id="8a1d6fa8427fbb9da10acb5f650733e9aa4df3f0" translate="yes" xml:space="preserve">
          <source>, but unicode-strings are downgraded with UTF-8 encoding. This happens because the first 256 codepoints in Unicode happens to agree with Latin-1.</source>
          <target state="translated">、ただし、Unicode文字列はUTF-8エンコーディングでダウングレードされます。これは、Unicodeの最初の256コードポイントがたまたまLatin-1と一致するために発生します。</target>
        </trans-unit>
        <trans-unit id="30f76102144f22e473a3819c08962f84a35f7781" translate="yes" xml:space="preserve">
          <source>, but without any arguments at all, meaning it was called as &lt;code&gt;&amp;amp;infested&lt;/code&gt; . The next stack frame shows that the function &lt;code&gt;Ambulation::legs&lt;/code&gt; was called in list context from the</source>
          <target state="translated">、ただし引数はまったくありません。つまり、 &lt;code&gt;&amp;amp;infested&lt;/code&gt; として呼び出されました。次のスタックフレームは、関数 &lt;code&gt;Ambulation::legs&lt;/code&gt; がリストコンテキストで呼び出されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="ae798928c9d09a028636501055f75aa984c26a2d" translate="yes" xml:space="preserve">
          <source>, but without any arguments at all, meaning it was called as &lt;code&gt;&amp;amp;infested&lt;/code&gt;. The next stack frame shows that the function &lt;code&gt;Ambulation::legs&lt;/code&gt; was called in list context from the</source>
          <target state="translated">、ただし引数はまったくありません。つまり、 &lt;code&gt;&amp;amp;infested&lt;/code&gt; と呼ばれていました。次のスタックフレームは、関数 &lt;code&gt;Ambulation::legs&lt;/code&gt; がリストコンテキストで</target>
        </trans-unit>
        <trans-unit id="72ba937cc0e16bb306ca2b4bf857c5037ec4cf2e" translate="yes" xml:space="preserve">
          <source>, but you can also find it with &lt;code&gt;(get&lt;/code&gt;&lt;code&gt;pwuid($&amp;lt;))[7]&lt;/code&gt; . (Some platforms do not have a concept of a home directory.)</source>
          <target state="translated">、しかし &lt;code&gt;(get&lt;/code&gt; &lt;code&gt;pwuid($&amp;lt;))[7]&lt;/code&gt; でも見つけることができます。（一部のプラットフォームには、ホームディレクトリの概念がありません。）</target>
        </trans-unit>
        <trans-unit id="66bf2d68f3062e2f5b926174869b8b87c1d69bb9" translate="yes" xml:space="preserve">
          <source>, but you can also find it with &lt;code&gt;(get&lt;/code&gt;&lt;code&gt;pwuid($&amp;lt;))[7]&lt;/code&gt;. (Some platforms do not have a concept of a home directory.)</source>
          <target state="translated">、ただし、 &lt;code&gt;(get&lt;/code&gt; &lt;code&gt;pwuid($&amp;lt;))[7]&lt;/code&gt; でも見つけることができます。（一部のプラットフォームには、ホームディレクトリの概念がありません。）</target>
        </trans-unit>
        <trans-unit id="d30cbc2585551375d5776769096b997571f847fa" translate="yes" xml:space="preserve">
          <source>, by J.R.R. Tolkien and published posthumously by his son and literary executor, C.J.R. Tolkien, being the 3rd of the 12 volumes in Christopher's mammoth</source>
          <target state="translated">、JRRトールキンによって、そして彼の息子で文学の執行者、CJRトールキンによって死後に出版され、クリストファーのマンモスの12巻の第3巻である</target>
        </trans-unit>
        <trans-unit id="20a4c36993cdadf5b45a96ba6612a7047ca32e20" translate="yes" xml:space="preserve">
          <source>, by J.R.R. Tolkien. The hardcover, 50th-anniversary edition of 2004 was used, published in the UK by Harper Collins Publishers and in the US by the Houghton Mifflin Company.</source>
          <target state="translated">、JRR Tolkienによる。ハードカバーは、2004年の50周年記念版が使用され、英国ではHarper Collins Publishersによって、米国ではHoughton Mifflin Companyによって発行されました。</target>
        </trans-unit>
        <trans-unit id="efffb220c955e443cccb58c8907e329a0175c1d5" translate="yes" xml:space="preserve">
          <source>, by J.R.R. Tolkien. The hardcover, 70th-anniversary edition of 2007 was used, published in the UK by Harper Collins Publishers and in the US by the Houghton Mifflin Company.</source>
          <target state="translated">、JRR Tolkienによる。2007年のハードカバーの70周年記念版が使用され、Harper Collins Publishersによって英国で、そしてHoughton Mifflin Companyによって米国で出版されました。</target>
        </trans-unit>
        <trans-unit id="074cc72ccfc535a7fd2e5dfd0338a00ba7d4e394" translate="yes" xml:space="preserve">
          <source>, by default. The format of the file looks like this:</source>
          <target state="translated">、デフォルトで。ファイルの形式は次のようになります。</target>
        </trans-unit>
        <trans-unit id="15848886de9254fb610ee7af8ef183ea5520e125" translate="yes" xml:space="preserve">
          <source>, calling its check function, allocating a target if it needs one, and folding constants.</source>
          <target state="translated">、チェック関数を呼び出し、必要に応じてターゲットを割り当て、定数を折りたたみます。</target>
        </trans-unit>
        <trans-unit id="f1dcc83c1274d4f418815f27c4f79fd6d2c788ff" translate="yes" xml:space="preserve">
          <source>, chapter 20, or</source>
          <target state="translated">、20章、または</target>
        </trans-unit>
        <trans-unit id="8ad183a82720f028dc83a25268edf18aae60bbed" translate="yes" xml:space="preserve">
          <source>, chapter 5.</source>
          <target state="translated">、第5章。</target>
        </trans-unit>
        <trans-unit id="1757193dd1ff5a7e70ef0ab65fa059299037848a" translate="yes" xml:space="preserve">
          <source>, characters in the target string that match a character in</source>
          <target state="translated">、の文字と一致するターゲット文字列内の文字</target>
        </trans-unit>
        <trans-unit id="8ae0b48133bb856879ab9974c904d27120fd6b88" translate="yes" xml:space="preserve">
          <source>, consisting of a first and last name (no middle initial). The name class has four methods:</source>
          <target state="translated">、姓と名で構成されます（ミドルネームのイニシャルはありません）。名前クラスには4つのメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="13383455434bc33fbc4b94aaa1a7d28b9e8cf222" translate="yes" xml:space="preserve">
          <source>, depending on the operating system. The variable &lt;a href=&quot;config#_exe&quot;&gt;&lt;code&gt;$Config{_exe}&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;config&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module holds the executable suffix, if any. Third, the VMS port carefully sets up &lt;a href=&quot;perlvar#%24%5EX&quot;&gt;&lt;code&gt;$^X&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;config#perlpath&quot;&gt;&lt;code&gt;$Config{perlpath}&lt;/code&gt;&lt;/a&gt; so that no further processing is required. This is just as well, because the matching regular expression used below would then have to deal with a possible trailing version number in the VMS file name.</source>
          <target state="translated">、オペレーティングシステムによって異なります。変数&lt;a href=&quot;config#_exe&quot;&gt; &lt;code&gt;$Config{_exe}&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;config&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt;あればモジュールは、実行可能なサフィックスを保持します。第3に、VMSポートは&lt;a href=&quot;perlvar#%24%5EX&quot;&gt; &lt;code&gt;$^X&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;config#perlpath&quot;&gt; &lt;code&gt;$Config{perlpath}&lt;/code&gt; &lt;/a&gt;慎重に設定して、それ以上の処理が不要になるようにします。以下で使用される一致する正規表現は、VMSファイル名で可能な末尾のバージョン番号を処理する必要があるため、これも同様です。</target>
        </trans-unit>
        <trans-unit id="7deb52a5ffa60ddf7faa0bfee1739d2eee5281b4" translate="yes" xml:space="preserve">
          <source>, depending on the operating system. The variable &lt;code&gt;&quot;_exe&quot;&lt;/code&gt; in the &lt;code&gt;Config&lt;/code&gt; module holds the executable suffix, if any. Third, the VMS port carefully sets up &lt;code&gt;$^X&lt;/code&gt; and &lt;code&gt;$Config{perlpath}&lt;/code&gt; so that no further processing is required. This is just as well, because the matching regular expression used below would then have to deal with a possible trailing version number in the VMS file name.</source>
          <target state="translated">、オペレーティングシステムによって異なります。変数 &lt;code&gt;&quot;_exe&quot;&lt;/code&gt; で &lt;code&gt;Config&lt;/code&gt; あればモジュールは、実行可能な接尾辞を保持しています。3番目に、VMSポートは &lt;code&gt;$^X&lt;/code&gt; と &lt;code&gt;$Config{perlpath}&lt;/code&gt; 慎重にセットアップするため、それ以上の処理は必要ありません。これも同様です。以下で使用される一致する正規表現は、VMSファイル名の末尾のバージョン番号を処理する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="641474390807c65a1ea8e6d8031b0ad22844d890" translate="yes" xml:space="preserve">
          <source>, described in &lt;a href=&quot;Hash::Util::FieldHash&quot;&gt;Hash::Util::FieldHash&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;Hash::Util::FieldHash&quot;&gt;Hash :: Util :: FieldHash&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="da5a4498d5cd3fe648547701b8b083a3ff8ca97c" translate="yes" xml:space="preserve">
          <source>, described in &lt;a href=&quot;util/fieldhash&quot;&gt;Hash::Util::FieldHash&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;util/fieldhash&quot;&gt;Hash :: Util :: FieldHash&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="fcd04308b32b6687d7bf86d16ef25fad4d5ae88a" translate="yes" xml:space="preserve">
          <source>, didn't find it, and set &lt;a href=&quot;perlvar#%24%3F&quot;&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/a&gt; to a non-zero value indicating failure.</source>
          <target state="translated">、見つかりませんでした、そして&lt;a href=&quot;perlvar#%24%3F&quot;&gt; &lt;code&gt;$?&lt;/code&gt; &lt;/a&gt;を設定しましたか？失敗を示すゼロ以外の値に。</target>
        </trans-unit>
        <trans-unit id="191488e37062f1a4cf41a5aeb9e53d937285dc2f" translate="yes" xml:space="preserve">
          <source>, didn't find it, and set &lt;code&gt;$?&lt;/code&gt; to a non-zero value indicating failure.</source>
          <target state="translated">、それが見つからず、 &lt;code&gt;$?&lt;/code&gt; を設定しましたか？失敗を示すゼロ以外の値に。</target>
        </trans-unit>
        <trans-unit id="bffed554a4db53bd8f296b3affa5430997fc3de5" translate="yes" xml:space="preserve">
          <source>, do</source>
          <target state="translated">、 行う</target>
        </trans-unit>
        <trans-unit id="94c2dbf1b9eb9f81052b5cb53ad3879e10f289ae" translate="yes" xml:space="preserve">
          <source>, do not fit into any of the other directories, but which, in addition, cannot use</source>
          <target state="translated">、他のどのディレクトリにも適合しませんが、さらに使用できません</target>
        </trans-unit>
        <trans-unit id="c65676655ea7406a8fc174f69430a531377ea940" translate="yes" xml:space="preserve">
          <source>, documented above, &lt;a href=&quot;#events-with-an-element_name-of-over-empty&quot;&gt;&quot;events with an element_name of over-empty&quot;&lt;/a&gt;.</source>
          <target state="translated">、上記の&lt;a href=&quot;#events-with-an-element_name-of-over-empty&quot;&gt;「element_nameが空すぎるイベント」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa0a59da47187262d9d4bfa48199c7bce6f4c216" translate="yes" xml:space="preserve">
          <source>, does the opposite of the</source>
          <target state="translated">、の反対を行います</target>
        </trans-unit>
        <trans-unit id="8fcd667169652690ef5e54800f7ff7538897e19e" translate="yes" xml:space="preserve">
          <source>, e.g. once you created a number under the influence of &lt;code&gt;CLASS-&amp;gt;accuracy($A)&lt;/code&gt; , all results from math operations with that number will also be rounded.</source>
          <target state="translated">たとえば、 &lt;code&gt;CLASS-&amp;gt;accuracy($A)&lt;/code&gt; の影響下で数値を作成すると、その数値での数学演算のすべての結果も丸められます。</target>
        </trans-unit>
        <trans-unit id="95f1a8ea281395023f3212b3e7fe5e8e678b9f23" translate="yes" xml:space="preserve">
          <source>, e.g. once you created a number under the influence of &lt;code&gt;CLASS-&amp;gt;accuracy($A)&lt;/code&gt;, all results from math operations with that number will also be rounded.</source>
          <target state="translated">たとえば、 &lt;code&gt;CLASS-&amp;gt;accuracy($A)&lt;/code&gt; の影響下で数値を作成すると、その数値を使用した数学演算の結果もすべて丸められます。</target>
        </trans-unit>
        <trans-unit id="5d483da9af92e1cedaee73a77b0f92e783cee701" translate="yes" xml:space="preserve">
          <source>, encountering an 8 or 9 will also trigger a warning. On return</source>
          <target state="translated">、8または9に遭遇した場合も警告がトリガーされます。帰りに</target>
        </trans-unit>
        <trans-unit id="d2f5d265b5802df06743d0d56f8ee6faa03ca24f" translate="yes" xml:space="preserve">
          <source>, encountering an invalid character will also trigger a warning. On return</source>
          <target state="translated">、無効な文字が検出された場合も警告が表示されます。帰りに</target>
        </trans-unit>
        <trans-unit id="04677f3fac90b98f6c1dae663782f13b8cbddc16" translate="yes" xml:space="preserve">
          <source>, et al.) for your machine: &lt;code&gt;perl -MConfig -e 'print $Config{cc}'&lt;/code&gt; will tell you what to use.</source>
          <target state="translated">など）：マシンの場合： &lt;code&gt;perl -MConfig -e 'print $Config{cc}'&lt;/code&gt; は、何を使用するかを示します。</target>
        </trans-unit>
        <trans-unit id="cad820714976d3b25c5367f0c02ee50a22785739" translate="yes" xml:space="preserve">
          <source>, etc) determined by &lt;b&gt;Configure&lt;/b&gt; (&lt;code&gt;$Config{'libpth'}&lt;/code&gt; ). This should ensure portability across a wide range of platforms.</source>
          <target state="translated">、など）によって決定&lt;b&gt;構成&lt;/b&gt;（ &lt;code&gt;$Config{'libpth'}&lt;/code&gt; ）。これにより、幅広いプラットフォームでの移植性が確保されます。</target>
        </trans-unit>
        <trans-unit id="f468a305e52e41fabae609fe5a43188262dfd717" translate="yes" xml:space="preserve">
          <source>, etc) determined by &lt;b&gt;Configure&lt;/b&gt; (&lt;code&gt;$Config{'libpth'}&lt;/code&gt;). This should ensure portability across a wide range of platforms.</source>
          <target state="translated">、など）&lt;b&gt;Configure&lt;/b&gt;（ &lt;code&gt;$Config{'libpth'}&lt;/code&gt; ）によって決定されます。これにより、幅広いプラットフォーム間での移植性が確保されます。</target>
        </trans-unit>
        <trans-unit id="a212453865c3ae5d769c013e9814daf8f2a214a4" translate="yes" xml:space="preserve">
          <source>, etc.</source>
          <target state="translated">、など</target>
        </trans-unit>
        <trans-unit id="f74d93dc922dc52c2fedf5e569c92696750decef" translate="yes" xml:space="preserve">
          <source>, etc. Have your top-level &lt;code&gt;WriteMakefile&lt;/code&gt; set the variable &lt;code&gt;XSMULTI&lt;/code&gt; to a true value.</source>
          <target state="translated">など。トップレベルの &lt;code&gt;WriteMakefile&lt;/code&gt; に変数 &lt;code&gt;XSMULTI&lt;/code&gt; をtrue値に設定してもらいます。</target>
        </trans-unit>
        <trans-unit id="b565fb66bcacd3184f91a476fa76a2a7c0432910" translate="yes" xml:space="preserve">
          <source>, etc. It is only used to set defaults for things in</source>
          <target state="translated">など。デフォルトの設定にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="254162fca7c5d2117d855ce88363b775777d261a" translate="yes" xml:space="preserve">
          <source>, etc. Unfortunately, sometimes these filenames won't even work if you include an explicit directory prefix. It is best to avoid such filenames, if you want your code to be portable to DOS and its derivatives. It's hard to know what these all are, unfortunately.</source>
          <target state="translated">、など。残念ながら、明示的なディレクトリプレフィックスを含めると、これらのファイル名が機能しない場合があります。コードをDOSおよびその派生物に移植できるようにする場合は、このようなファイル名を避けるのが最善です。残念ながら、これらすべてが何であるかを知るのは難しいです。</target>
        </trans-unit>
        <trans-unit id="2a688c0b28a7df2e9a7d253a82e6c6e84a3330b9" translate="yes" xml:space="preserve">
          <source>, etc. Windows and VMS have their own Configure-like scripts, in their respective directories.</source>
          <target state="translated">、など。WindowsとVMSには、それぞれのディレクトリに独自の構成のようなスクリプトがあります。</target>
        </trans-unit>
        <trans-unit id="547884f80573a30a2c1775d0d189f35232800ed1" translate="yes" xml:space="preserve">
          <source>, etc.) show examples of general tied hashes, as does the &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt; module. While these do not utilize &lt;b&gt;Tie::Hash&lt;/b&gt;, they serve as good working examples.</source>
          <target state="translated">など）は、&lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;モジュールと同様に、一般的な結合ハッシュの例を示しています。これらは&lt;b&gt;Tie :: Hashを&lt;/b&gt;利用していませんが、優れた実用例として機能します。</target>
        </trans-unit>
        <trans-unit id="14799a215b2ab9755e0f596823ecf4dbc0d72f12" translate="yes" xml:space="preserve">
          <source>, etc.) show examples of general tied hashes, as does the &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; module. While these do not utilize &lt;b&gt;Tie::Hash&lt;/b&gt;, they serve as good working examples.</source>
          <target state="translated">など）は、&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;モジュールと同様に、一般的なタイハッシュの例を示しています。これらは&lt;b&gt;Tie :: Hashを&lt;/b&gt;利用していませんが、優れた実例として役立ちます。</target>
        </trans-unit>
        <trans-unit id="4f1210937e081e362e85df120171033ff4b61361" translate="yes" xml:space="preserve">
          <source>, etc., not keeping separate files for each little release.</source>
          <target state="translated">など、小さなリリースごとに個別のファイルを保持しません。</target>
        </trans-unit>
        <trans-unit id="800135a8cf871bdccfdf925e7c9f67cb8dbd1d91" translate="yes" xml:space="preserve">
          <source>, even if the old Unicode string used EBCDIC.</source>
          <target state="translated">、古いUnicode文字列がEBCDICを使用していたとしても。</target>
        </trans-unit>
        <trans-unit id="727fb7fe0065fed08079bab1144d37e69c258b0f" translate="yes" xml:space="preserve">
          <source>, except that under &lt;code&gt;/s&lt;/code&gt;, the 2nd and following characters are squeezed out in a sequence of characters in a row that all translate to the same character. If</source>
          <target state="translated">ただし、 &lt;code&gt;/s&lt;/code&gt; の下では、2番目以降の文字が、すべて同じ文字に変換される行の一連の文字で絞り出されます。場合</target>
        </trans-unit>
        <trans-unit id="7ae4a1230d3f708e9962358a9ef97eda0e7da8ca" translate="yes" xml:space="preserve">
          <source>, executes three Perl strings, extracting an &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; from the first, a &lt;code&gt;float&lt;/code&gt; from the second, and a &lt;code&gt;char *&lt;/code&gt; from the third.</source>
          <target state="translated">、3つのPerl文字列を実行し、最初の文字列から &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 、2番目の文字列から &lt;code&gt;float&lt;/code&gt; 、3番目の文字列から &lt;code&gt;char *&lt;/code&gt; を抽出します。</target>
        </trans-unit>
        <trans-unit id="787d143c6cf0b043068fb80fa8b4344c2a645b40" translate="yes" xml:space="preserve">
          <source>, executes three Perl strings, extracting an &lt;code&gt;int&lt;/code&gt; from the first, a &lt;code&gt;float&lt;/code&gt; from the second, and a &lt;code&gt;char *&lt;/code&gt; from the third.</source>
          <target state="translated">は、3つのPerl文字列を実行し、最初の文字列から &lt;code&gt;int&lt;/code&gt; 、2番目の文字列から &lt;code&gt;float&lt;/code&gt; 、3番目の文字列から &lt;code&gt;char *&lt;/code&gt; を抽出します。</target>
        </trans-unit>
        <trans-unit id="8592f41382d4e5c2d5d57b842dd51b103596cdc2" translate="yes" xml:space="preserve">
          <source>, first two will be issued to make the prompt standout, last two to make the input line standout.</source>
          <target state="translated">、最初の2つはプロンプトを目立たせるために発行され、最後の2つは入力ラインを目立たせるために発行されます。</target>
        </trans-unit>
        <trans-unit id="e326c61927837140eb9a99bc562c35954b12ff00" translate="yes" xml:space="preserve">
          <source>, followed by &quot;.&quot;, to represent the current directory. (&quot;.&quot; will not be appended if taint checks are enabled, either by &lt;code&gt;-T&lt;/code&gt; or by &lt;code&gt;-t&lt;/code&gt; .) If you need to modify this at runtime, you should use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib&lt;/code&gt; pragma to get the machine-dependent library properly loaded also:</source>
          <target state="translated">、「。」が後に続き、現在のディレクトリを表します。（ &lt;code&gt;-T&lt;/code&gt; または &lt;code&gt;-t&lt;/code&gt; によって汚染チェックが有効になっている場合、「。」は追加されません。）実行時にこれを変更する必要がある場合は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib&lt;/code&gt; プラグマを使用して、マシンに依存するライブラリを正しくロードする必要があります。：</target>
        </trans-unit>
        <trans-unit id="e47c6b2622df17cb9ac51798532485ad11e9ba2e" translate="yes" xml:space="preserve">
          <source>, for &quot;interpreter threads&quot;.</source>
          <target state="translated">、「インタプリタスレッド」用。</target>
        </trans-unit>
        <trans-unit id="3da21179cff23cf6f4725a6914c2f3067c8f2e68" translate="yes" xml:space="preserve">
          <source>, for example &lt;code&gt;constant_5&lt;/code&gt; for names 5 characters long. The default</source>
          <target state="translated">たとえば、5文字の長さの名前の場合は &lt;code&gt;constant_5&lt;/code&gt; 。デフォルト</target>
        </trans-unit>
        <trans-unit id="2fee34f87618999ee14e21bb687483c9271ed175" translate="yes" xml:space="preserve">
          <source>, for example).</source>
          <target state="translated">、 例えば）。</target>
        </trans-unit>
        <trans-unit id="28da9ec75c809bccb5f08bba4f669c3533c7ba7b" translate="yes" xml:space="preserve">
          <source>, for example, this would include</source>
          <target state="translated">、たとえば、これには</target>
        </trans-unit>
        <trans-unit id="7c331f0b5befe1a82f2eeb7e08fd9a086e46b9f4" translate="yes" xml:space="preserve">
          <source>, for example, which is usually in</source>
          <target state="translated">たとえば、通常は</target>
        </trans-unit>
        <trans-unit id="1611b180f41bef969e37c18e79566f4a39e16c29" translate="yes" xml:space="preserve">
          <source>, for instance, have been placed there rather than in</source>
          <target state="translated">たとえば、ではなく、そこに配置されています</target>
        </trans-unit>
        <trans-unit id="56372a1dac8b69b17464e5a00569b03f0872fcdf" translate="yes" xml:space="preserve">
          <source>, freeing all resources associated with it.</source>
          <target state="translated">、それに関連付けられているすべてのリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="f4b8256a6099f4e144fd62a3869c42ca7b38c688" translate="yes" xml:space="preserve">
          <source>, greater-than. Or Pod parsers may offer the alternative option of processing such unknown &quot;E&amp;lt;</source>
          <target state="translated">、より大きい。またはポッドパーサーは、このような不明な「E &amp;lt;</target>
        </trans-unit>
        <trans-unit id="e7f34752016620eedb00a8cbd6624ed4757364db" translate="yes" xml:space="preserve">
          <source>, handing it NULL for the second argument:</source>
          <target state="translated">、2番目の引数にNULLを渡します。</target>
        </trans-unit>
        <trans-unit id="13918e9d4ee7ed5a5b531e3ce1c4548f829845bb" translate="yes" xml:space="preserve">
          <source>, has very helpful pictures:</source>
          <target state="translated">、非常に役立つ写真があります：</target>
        </trans-unit>
        <trans-unit id="5b2d144fe487b3bdc6b5822c043f233ce157080f" translate="yes" xml:space="preserve">
          <source>, have aliases</source>
          <target state="translated">、エイリアスがあります</target>
        </trans-unit>
        <trans-unit id="4f6137d9065b22f545ac392077aa91739c927e9e" translate="yes" xml:space="preserve">
          <source>, however, a module under</source>
          <target state="translated">ただし、以下のモジュール</target>
        </trans-unit>
        <trans-unit id="9205ef8665795fce8cf05345636ac2832fbc1a01" translate="yes" xml:space="preserve">
          <source>, if any. If it returns the empty string, use &lt;a href=&quot;#getpwuid-UID&quot;&gt;&lt;code&gt;getpwuid&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">、もしあれば。空の文字列が返される場合は、&lt;a href=&quot;#getpwuid-UID&quot;&gt; &lt;code&gt;getpwuid&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="fa65a22e2f2e07e3150f049e4c966e6fcd3df9ae" translate="yes" xml:space="preserve">
          <source>, if any. If it returns the empty string, use &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">、もしあれば。空の文字列を返す場合は、 &lt;code&gt;&lt;a href=&quot;functions/getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cb8b8da23653cf06debe3b23d1da5fd0c356db27" translate="yes" xml:space="preserve">
          <source>, if any. If it returns the empty string, use &lt;code&gt;&lt;a href=&quot;getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">、もしあれば。空の文字列を返す場合は、 &lt;code&gt;&lt;a href=&quot;getpwuid&quot;&gt;getpwuid&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e6769873a1cbe047b8a844d6fbd4ad589c9faed9" translate="yes" xml:space="preserve">
          <source>, if given, is the file to which to write the formatted output. If</source>
          <target state="translated">が指定されている場合は、フォーマットされた出力を書き込むファイルです。もし</target>
        </trans-unit>
        <trans-unit id="77eafd03fdb7f9d16237f45a4ce317d87b94c553" translate="yes" xml:space="preserve">
          <source>, if non-null, provides a string (in SV form) containing code to be parsed. A copy of the string is made, so subsequent modification of</source>
          <target state="translated">、null以外の場合、解析するコードを含む文字列（SV形式）を提供します。文字列のコピーが作成されるため、その後の変更</target>
        </trans-unit>
        <trans-unit id="030106d2304ec93f9cf5e7c3317d1e0cb410b3da" translate="yes" xml:space="preserve">
          <source>, if non-null, provides an input stream from which code will be read to be parsed. If both are non-null, the code in</source>
          <target state="translated">、null以外の場合は、解析のためにコードが読み込まれる入力ストリームを提供します。両方がnull以外の場合、コードは</target>
        </trans-unit>
        <trans-unit id="6cbeb9fe895f728ef42c186aa976bba1c9ce0104" translate="yes" xml:space="preserve">
          <source>, if you're running setgid.</source>
          <target state="translated">、setgidを実行している場合。</target>
        </trans-unit>
        <trans-unit id="0dbb5d893ddb3b24557057bead5ebb8bfe161473" translate="yes" xml:space="preserve">
          <source>, if you're running setuid.</source>
          <target state="translated">、setuidを実行している場合。</target>
        </trans-unit>
        <trans-unit id="359ce93de57e677d41e4feae3db26ccadd5f4602" translate="yes" xml:space="preserve">
          <source>, in that order, unless the environment variable</source>
          <target state="translated">、この順序で、環境変数を除く</target>
        </trans-unit>
        <trans-unit id="790ae18f398610e33985ad234301f212b618f615" translate="yes" xml:space="preserve">
          <source>, in that order.</source>
          <target state="translated">、この順序で。</target>
        </trans-unit>
        <trans-unit id="a9ca71fd641028e60feb39e0200097fbb26b663e" translate="yes" xml:space="preserve">
          <source>, in the mode value it returns, if you need an approximation of the file's protections.</source>
          <target state="translated">、ファイルの保護の概算が必要な場合は、モード値で返されます。</target>
        </trans-unit>
        <trans-unit id="4a46a8b425bb0176ffac49f9bb0407a8c91faaf3" translate="yes" xml:space="preserve">
          <source>, in which case it does a &lt;a href=&quot;http://man.he.net/man2/sendto&quot;&gt;sendto(2)&lt;/a&gt; syscall. Returns the number of characters sent, or the undefined value on error. The &lt;a href=&quot;http://man.he.net/man2/sendmsg&quot;&gt;sendmsg(2)&lt;/a&gt; syscall is currently unimplemented. See &lt;a href=&quot;perlipc#UDP%3A-Message-Passing&quot;&gt;&quot;UDP: Message Passing&quot; in perlipc&lt;/a&gt; for examples.</source>
          <target state="translated">、この場合、&lt;a href=&quot;http://man.he.net/man2/sendto&quot;&gt;sendto（2）&lt;/a&gt;システムコールを実行します。送信された文字数、またはエラーの場合は未定義の値を返します。&lt;a href=&quot;http://man.he.net/man2/sendmsg&quot;&gt;sendmsgの（2）&lt;/a&gt;システムコールは、現在実装されていません。例について&lt;a href=&quot;perlipc#UDP%3A-Message-Passing&quot;&gt;は、perlipcの「UDP：メッセージパッシング」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ba423002f3a8458818555c6df33df9999f3fd327" translate="yes" xml:space="preserve">
          <source>, in which case it does a sendto(2) syscall. Returns the number of characters sent, or the undefined value on error. The sendmsg(2) syscall is currently unimplemented. See &lt;a href=&quot;../perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</source>
          <target state="translated">この場合、sendto（2）syscallを実行します。送信した文字数、またはエラー時に未定義の値を返します。sendmsg（2）syscallは現在実装されていません。例については、&lt;a href=&quot;../perlipc#UDP%3a-Message-Passing&quot;&gt;UDP：perlipc&lt;/a&gt;でのメッセージの受け渡しを参照してください。</target>
        </trans-unit>
        <trans-unit id="adc9b471306d3e563016072b65846bf606376045" translate="yes" xml:space="preserve">
          <source>, in which case it does a sendto(2) syscall. Returns the number of characters sent, or the undefined value on error. The sendmsg(2) syscall is currently unimplemented. See &lt;a href=&quot;perlipc#UDP%3a-Message-Passing&quot;&gt;UDP: Message Passing in perlipc&lt;/a&gt; for examples.</source>
          <target state="translated">この場合、sendto（2）syscallを実行します。送信した文字数、またはエラー時に未定義の値を返します。sendmsg（2）syscallは現在実装されていません。例については、&lt;a href=&quot;perlipc#UDP%3a-Message-Passing&quot;&gt;UDP：perlipc&lt;/a&gt;でのメッセージの受け渡しを参照してください。</target>
        </trans-unit>
        <trans-unit id="8770c2665fa7656dfe5c162a8df3a289203cc335" translate="yes" xml:space="preserve">
          <source>, included in the source distribution. Here's a bastardized, non-portable version of</source>
          <target state="translated">、ソース配布に含まれています。これは粗末化された、移植できないバージョンです</target>
        </trans-unit>
        <trans-unit id="eb5f00bc57f8a74444c521b49f19146de255153e" translate="yes" xml:space="preserve">
          <source>, included with Perl 3.0. It was converted as a module with Perl 5.0, but had a version number only starting with Perl 5.6. Here is a small table with the matching Perl and &lt;code&gt;Sys::Syslog&lt;/code&gt; versions.</source>
          <target state="translated">、Perl 3.0に含まれています。Perl 5.0でモジュールとして変換されましたが、Perl 5.6以降のバージョン番号しかありませんでした。これは、Perlと &lt;code&gt;Sys::Syslog&lt;/code&gt; バージョンが一致する小さなテーブルです。</target>
        </trans-unit>
        <trans-unit id="8ea24d1d602be3c931482d6a832964fc845b16f4" translate="yes" xml:space="preserve">
          <source>, instructs &lt;code&gt;autosplit&lt;/code&gt; to check the module currently being split to ensure that it includes a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; specification for the AutoLoader module, and skips the module if AutoLoader is not detected. $check defaults to 1.</source>
          <target state="translated">、 &lt;code&gt;autosplit&lt;/code&gt; に現在分割されているモジュールをチェックしてAutoLoaderモジュールの &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 仕様が含まれていることを確認し、AutoLoaderが検出されない場合はモジュールをスキップするように指示します。 $ checkのデフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="968584f650e6dedd255b15fa43ea5c603f1d972b" translate="yes" xml:space="preserve">
          <source>, instructs &lt;code&gt;autosplit&lt;/code&gt; to check the module currently being split to ensure that it includes a &lt;code&gt;use&lt;/code&gt; specification for the AutoLoader module, and skips the module if AutoLoader is not detected. $check defaults to 1.</source>
          <target state="translated">は、現在分割されているモジュールをチェックしてAutoLoaderモジュールの &lt;code&gt;use&lt;/code&gt; 仕様が含まれていることを確認するように &lt;code&gt;autosplit&lt;/code&gt; に指示し、AutoLoaderが検出されない場合はモジュールをスキップします。$ checkのデフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="f3d83a3f144336c31c776a79a37fb93513e38ad4" translate="yes" xml:space="preserve">
          <source>, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;a href=&quot;perlvar#%40_&quot;&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;a href=&quot;perlvar#%40_&quot;&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt;, so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;a href=&quot;perlvar#%40_&quot;&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt;, like &lt;a href=&quot;perlvar#%40_&quot;&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt;, does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;shift @_&lt;/code&gt; can</source>
          <target state="translated">、バックトレースのデバッグまたは生成を目的としているため、信頼しないでください。具体的には、&lt;a href=&quot;perlvar#%40_&quot;&gt; &lt;code&gt;@_&lt;/code&gt; は、&lt;/a&gt;呼び出し側の引数にエイリアスが含まれている、Perlはのコピーをとらない&lt;a href=&quot;perlvar#%40_&quot;&gt; &lt;code&gt;@_&lt;/code&gt; &lt;/a&gt;ので、 &lt;code&gt;@DB::args&lt;/code&gt; サブルーチンはになります修正が含まれます&lt;a href=&quot;perlvar#%40_&quot;&gt; &lt;code&gt;@_&lt;/code&gt; &lt;/a&gt;呼び出し時またはその内容ではなく、元の値を。 &lt;code&gt;@DB::args&lt;/code&gt; 、同じよう&lt;a href=&quot;perlvar#%40_&quot;&gt; &lt;code&gt;@_&lt;/code&gt; &lt;/a&gt;ので、特定のケースの下にその要素が他の変数または一時的な値のために解放され、再割り当てになっている可能性があり、その要素への明示的な参照を保持しません。最後に、現在の実装の副作用は、 &lt;code&gt;shift @_&lt;/code&gt; 影響が</target>
        </trans-unit>
        <trans-unit id="e6083d57ec1ee8a0d3d6d5459b1cec9032efce60" translate="yes" xml:space="preserve">
          <source>, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;code&gt;@_&lt;/code&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;code&gt;@_&lt;/code&gt; , so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;code&gt;@_&lt;/code&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt; , like &lt;code&gt;@_&lt;/code&gt; , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; can</source>
          <target state="translated">、バックトレースのデバッグまたは生成を目的としており、依存しないでください。具体的には、 &lt;code&gt;@_&lt;/code&gt; は、呼び出し側の引数にエイリアスが含まれている、Perlはのコピーをとらない &lt;code&gt;@_&lt;/code&gt; ので、 &lt;code&gt;@DB::args&lt;/code&gt; サブルーチンはになります修正が含まれます &lt;code&gt;@_&lt;/code&gt; 呼び出し時またはその内容ではなく、元の値を。 &lt;code&gt;@DB::args&lt;/code&gt; 、同じよう &lt;code&gt;@_&lt;/code&gt; ので、特定のケースの下にその要素が他の変数または一時的な値のために解放され、再割り当てになっている可能性があり、その要素への明示的な参照を保持しません。最後に、現在の実装の副作用があることの効果 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; CAN</target>
        </trans-unit>
        <trans-unit id="d6fb9ba10623dfd1aded621d9ddedd7e1c61500b" translate="yes" xml:space="preserve">
          <source>, intended for debugging or generating backtraces, and should not be relied upon. In particular, as &lt;code&gt;@_&lt;/code&gt; contains aliases to the caller's arguments, Perl does not take a copy of &lt;code&gt;@_&lt;/code&gt; , so &lt;code&gt;@DB::args&lt;/code&gt; will contain modifications the subroutine makes to &lt;code&gt;@_&lt;/code&gt; or its contents, not the original values at call time. &lt;code&gt;@DB::args&lt;/code&gt; , like &lt;code&gt;@_&lt;/code&gt; , does not hold explicit references to its elements, so under certain cases its elements may have become freed and reallocated for other variables or temporary values. Finally, a side effect of the current implementation is that the effects of &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; can</source>
          <target state="translated">、バックトレースのデバッグまたは生成を目的としており、依存しないでください。具体的には、 &lt;code&gt;@_&lt;/code&gt; は、呼び出し側の引数にエイリアスが含まれている、Perlはのコピーをとらない &lt;code&gt;@_&lt;/code&gt; ので、 &lt;code&gt;@DB::args&lt;/code&gt; サブルーチンはになります修正が含まれます &lt;code&gt;@_&lt;/code&gt; 呼び出し時またはその内容ではなく、元の値を。 &lt;code&gt;@DB::args&lt;/code&gt; 、同じよう &lt;code&gt;@_&lt;/code&gt; ので、特定のケースの下にその要素が他の変数または一時的な値のために解放され、再割り当てになっている可能性があり、その要素への明示的な参照を保持しません。最後に、現在の実装の副作用があることの効果 &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt; @_&lt;/code&gt; CAN</target>
        </trans-unit>
        <trans-unit id="13eb87bdfb3a3624e2f9e8a8d87bc78f8db7280d" translate="yes" xml:space="preserve">
          <source>, into Perl's internal form. As with encode(),</source>
          <target state="translated">、Perlの内部形式に。encode（）と同様に、</target>
        </trans-unit>
        <trans-unit id="cfa0115c245a8b3ea3252178af8759b7405c3a1b" translate="yes" xml:space="preserve">
          <source>, is copied under</source>
          <target state="translated">、下にコピーされます</target>
        </trans-unit>
        <trans-unit id="aa6135a1a196ba8c00d8ec8b4a64ca9d1706801d" translate="yes" xml:space="preserve">
          <source>, is false, then any pre-existing &lt;code&gt;*.al&lt;/code&gt; files in the autoload directory are removed if they are no longer part of the module (obsoleted functions). $keep defaults to 0.</source>
          <target state="translated">、がfalseの場合、autoloadディレクトリ内の既存の &lt;code&gt;*.al&lt;/code&gt; ファイルは、モジュールの一部ではなくなった場合に削除されます（廃止された関数）。$ keepのデフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="51eed46bc6e5b10c08d79ee20d1f1a587cafafba" translate="yes" xml:space="preserve">
          <source>, is similar to</source>
          <target state="translated">、 と類似しています</target>
        </trans-unit>
        <trans-unit id="79817a35af4a945dfd5b54b07a8db380c4bf6155" translate="yes" xml:space="preserve">
          <source>, is the op type. It's an addition operator, so we want the type to be &lt;code&gt;ADDOP&lt;/code&gt; . We could specify this directly, but it's right there as the second token in the input, so we use &lt;code&gt;$2&lt;/code&gt; . The second parameter is the op's flags: 0 means &quot;nothing special&quot;. Then the things to add: the left and right hand side of our expression, in scalar context.</source>
          <target state="translated">はopタイプです。これは加算演算子なので、型を &lt;code&gt;ADDOP&lt;/code&gt; にする必要があります。これを直接指定することもできますが、入力の2番目のトークンとしてそこにあるため、 &lt;code&gt;$2&lt;/code&gt; を使用します。2番目のパラメーターはopのフラグです。0は「特別なものなし」を意味します。次に、追加するもの：スカラーコンテキストでの式の左側と右側。</target>
        </trans-unit>
        <trans-unit id="0d4e379c51b0a4ee2a90ac03f59a5e363e730701" translate="yes" xml:space="preserve">
          <source>, is the op type. It's an addition operator, so we want the type to be &lt;code&gt;ADDOP&lt;/code&gt;. We could specify this directly, but it's right there as the second token in the input, so we use &lt;code&gt;$2&lt;/code&gt;. The second parameter is the op's flags: 0 means &quot;nothing special&quot;. Then the things to add: the left and right hand side of our expression, in scalar context.</source>
          <target state="translated">、はopタイプです。これは加算演算子なので、型を &lt;code&gt;ADDOP&lt;/code&gt; にする必要があります。これを直接指定することもできますが、入力の2番目のトークンとしてそこにあるため、 &lt;code&gt;$2&lt;/code&gt; を使用します。2番目のパラメーターはopのフラグです。0は「特別なことは何もない」ことを意味します。次に、追加するもの：スカラーコンテキストでの式の左側と右側。</target>
        </trans-unit>
        <trans-unit id="c0080e719ea6b38d68de4ba8b7693bc8dba72e5a" translate="yes" xml:space="preserve">
          <source>, it doesn't redirect stderr to stdout.</source>
          <target state="translated">、それはstderrをstdoutにリダイレクトしません。</target>
        </trans-unit>
        <trans-unit id="664f4ea1afd52b971da3d2f089f2511da29b2351" translate="yes" xml:space="preserve">
          <source>, it is enough to have them on your path. One does not need to specify them explicitly (though this</source>
          <target state="translated">、あなたのパスにそれらを持っていることで十分です。それらを明示的に指定する必要はありません（これは</target>
        </trans-unit>
        <trans-unit id="01bd8dd935a29b3fddd9c06ac4b13a42b2abe139" translate="yes" xml:space="preserve">
          <source>, it is not necessarily the case that any output will be produced by this method. So don't rely on the fact that &lt;code&gt;$out&lt;/code&gt; is empty for an error test.</source>
          <target state="translated">、この方法で出力が生成されるとは限りません。したがって、エラーテストで &lt;code&gt;$out&lt;/code&gt; が空であるという事実に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="9b3b34697471a7e2dc56c68064b05288c536a237" translate="yes" xml:space="preserve">
          <source>, it is still good practice to check the return code from</source>
          <target state="translated">、からの戻りコードを確認することは、まだ良い習慣です</target>
        </trans-unit>
        <trans-unit id="d91455e8d254597cb96fe4e096fe840d6a39837b" translate="yes" xml:space="preserve">
          <source>, it is substituted with</source>
          <target state="translated">、それは</target>
        </trans-unit>
        <trans-unit id="651848b5afecc31a5c38cd73df7324f50c74618a" translate="yes" xml:space="preserve">
          <source>, it passes &lt;code&gt;&lt;a href=&quot;perlapi#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot; in perlapi&lt;/a&gt;&lt;/code&gt;. Surrogates, non-character code points, and non-Unicode code points are allowed.</source>
          <target state="translated">、 &lt;code&gt;&lt;a href=&quot;perlapi#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot; in perlapi&lt;/a&gt;&lt;/code&gt; を渡します。サロゲート、非文字コードポイント、および非Unicodeコードポイントが許可されます。</target>
        </trans-unit>
        <trans-unit id="d0bef723cdeef4c4aad0269573935dc64dcabf73" translate="yes" xml:space="preserve">
          <source>, just type:</source>
          <target state="translated">、単に入力してください：</target>
        </trans-unit>
        <trans-unit id="ec7445398596752b90e13adb72725edcb5f55fb9" translate="yes" xml:space="preserve">
          <source>, left justified to fill</source>
          <target state="translated">、埋めるために左揃え</target>
        </trans-unit>
        <trans-unit id="58977f34d6981ce10f380c393153c619fec7c3b0" translate="yes" xml:space="preserve">
          <source>, library stuff in</source>
          <target state="translated">、ライブラリ関連</target>
        </trans-unit>
        <trans-unit id="ba5ebce04882b3b845e0e11a0351a954b9d067f9" translate="yes" xml:space="preserve">
          <source>, lowest-to-highest.</source>
          <target state="translated">、最低から最高。</target>
        </trans-unit>
        <trans-unit id="481f764300170b8cc2c8ab1fea2d90f4659012a0" translate="yes" xml:space="preserve">
          <source>, man pages in</source>
          <target state="translated">、のマニュアルページ</target>
        </trans-unit>
        <trans-unit id="c1eff063fa64539df3525a8920a33c120431c1d5" translate="yes" xml:space="preserve">
          <source>, man pages into</source>
          <target state="translated">、マニュアルページ</target>
        </trans-unit>
        <trans-unit id="8377baa929d3123ee7913b5c12c57a279c130a4b" translate="yes" xml:space="preserve">
          <source>, may crash the phone, causing it to turn itself off once, and then back on again.</source>
          <target state="translated">、電話がクラッシュし、一度オフになってから再びオンになる場合があります。</target>
        </trans-unit>
        <trans-unit id="9a7745ab1fa8731e058fe3471019aec70206d842" translate="yes" xml:space="preserve">
          <source>, meaning it exposes several</source>
          <target state="translated">、つまり、複数の</target>
        </trans-unit>
        <trans-unit id="23ecae591165a2e14c8b3c0c33e4b172cfbcd078" translate="yes" xml:space="preserve">
          <source>, meaning that functions and subroutines altered with &lt;code&gt;autodie&lt;/code&gt; will only change their behaviour until the end of the enclosing block, file, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;autodie&lt;/code&gt; 変更された関数とサブルーチンは、囲んでいるブロック、ファイル、または &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; が終了するまで、それらの動作のみを変更します。</target>
        </trans-unit>
        <trans-unit id="eddeb78a7e3264256b6a8045f7a56faf717a121d" translate="yes" xml:space="preserve">
          <source>, meaning that functions and subroutines altered with &lt;code&gt;autodie&lt;/code&gt; will only change their behaviour until the end of the enclosing block, file, or &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">、つまり、 &lt;code&gt;autodie&lt;/code&gt; で変更された関数とサブルーチンは、囲んでいるブロック、ファイル、または &lt;code&gt;eval&lt;/code&gt; が終了するまで動作を変更するだけです。</target>
        </trans-unit>
        <trans-unit id="93ecb4223ec353ce10e70829975cf221b865ce31" translate="yes" xml:space="preserve">
          <source>, namely</source>
          <target state="translated">、すなわち</target>
        </trans-unit>
        <trans-unit id="59fec1966dbdc2d3f0c4d7aede4a65102f1621b8" translate="yes" xml:space="preserve">
          <source>, nor does it allow executables in the sdcard, we need to find somewhere in the device for Configure to put some files in, as well as for the tests to run in. If your device is rooted, then you're good. Try running these:</source>
          <target state="translated">、また、SDカード内の実行可能ファイルを許可しません。いくつかのファイルを配置するための構成、およびテストを実行するために、デバイスのどこかを見つける必要があります。デバイスがルート化されている場合は、問題ありません。これらを実行してみてください：</target>
        </trans-unit>
        <trans-unit id="f22a8444b47d43b843adb69f4a032eaa8696f19f" translate="yes" xml:space="preserve">
          <source>, normally via</source>
          <target state="translated">、通常は</target>
        </trans-unit>
        <trans-unit id="48a0cd2493fd04c9f828dcacdd2caee749e13027" translate="yes" xml:space="preserve">
          <source>, not</source>
          <target state="translated">ではなく</target>
        </trans-unit>
        <trans-unit id="c7bd8970e5dd3c5d725e534ee2e953570f617caa" translate="yes" xml:space="preserve">
          <source>, not byte.)</source>
          <target state="translated">、バイトではありません。）</target>
        </trans-unit>
        <trans-unit id="11afc5e199c01f78460727b395aceca036378181" translate="yes" xml:space="preserve">
          <source>, not its line. So in the examples below, you can see that every command needs the blank line after it, to end its paragraph. (And some older Pod translators may require the &lt;code&gt;=encoding&lt;/code&gt; line to have a following blank line as well, even though it should be legal to omit.)</source>
          <target state="translated">、そのラインではありません。したがって、以下の例では、すべてのコマンドの後に、段落を終了するために空白行が必要であることがわかります。（また、一部の古いPodトランスレータでは、省略してもかまいませんが、 &lt;code&gt;=encoding&lt;/code&gt; 行に次の空白行が必要になる場合があります。）</target>
        </trans-unit>
        <trans-unit id="77cbf0d5e9d48924c33742650619cd201e79e361" translate="yes" xml:space="preserve">
          <source>, not programs. For programs, use the &lt;a href=&quot;Module::CoreList&quot;&gt;Module::CoreList&lt;/a&gt; API.</source>
          <target state="translated">、プログラムではありません。プログラムの場合は、&lt;a href=&quot;Module::CoreList&quot;&gt;Module :: CoreListAPIを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="da92391795f61ed6c37622d31636bf92df08886e" translate="yes" xml:space="preserve">
          <source>, not programs. For programs, use the &lt;a href=&quot;module/corelist&quot;&gt;Module::CoreList&lt;/a&gt; API.</source>
          <target state="translated">、プログラムではありません。プログラムの場合は、&lt;a href=&quot;module/corelist&quot;&gt;Module :: CoreList&lt;/a&gt; APIを使用します。</target>
        </trans-unit>
        <trans-unit id="43dff97702ab1cbd05f2458bbf9136c2e78c118d" translate="yes" xml:space="preserve">
          <source>, of which</source>
          <target state="translated">、 そのうちの</target>
        </trans-unit>
        <trans-unit id="731aa264d48130cd3456e01ac07965045097c74f" translate="yes" xml:space="preserve">
          <source>, one pair per line. Strings used as values must be quoted. Barewords are treated as numbers.</source>
          <target state="translated">、1行に1ペア。値として使用される文字列は引用符で囲む必要があります。ベアワードは数値として扱われます。</target>
        </trans-unit>
        <trans-unit id="ba34082476e7f40b29ef9dab02566944508fe137" translate="yes" xml:space="preserve">
          <source>, one should call these API via a dynamic linking API. There is a subsystem in Perl to simplify such type of calls. A large number of entry points available for such linking is provided (see &lt;code&gt;entries_ordinals&lt;/code&gt; - and also &lt;code&gt;PMWIN_entries&lt;/code&gt; - in</source>
          <target state="translated">、ダイナミックリンクAPIを介してこれらのAPIを呼び出す必要があります。Perlには、そのようなタイプの呼び出しを簡略化するサブシステムがあります。そのような結合のために利用可能なエントリポイントの数が多い（参照設けられ &lt;code&gt;entries_ordinals&lt;/code&gt; 、また- &lt;code&gt;PMWIN_entries&lt;/code&gt; を -で</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">、または</target>
        </trans-unit>
        <trans-unit id="942f527c84fd76c3bdcee70a53190e472c342844" translate="yes" xml:space="preserve">
          <source>, or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">、または &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0d8ec5c736f2db07e822b274ee99f50708b0284" translate="yes" xml:space="preserve">
          <source>, or &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">、または &lt;code&gt;eval&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6ba229fbb681a07aa0e4294378d9012aef942cf" translate="yes" xml:space="preserve">
          <source>, or Perl, such as the following:</source>
          <target state="translated">、または次のようなPerl：</target>
        </trans-unit>
        <trans-unit id="55bfcc1de58da3cf74a6ff01324919bf5c853ff5" translate="yes" xml:space="preserve">
          <source>, or code, the &lt;code&gt;Rr&lt;/code&gt; are</source>
          <target state="translated">、またはコード、 &lt;code&gt;Rr&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="ffbadeb5936aabdc02bac70dff1ebf6c39606cc2" translate="yes" xml:space="preserve">
          <source>, or editing</source>
          <target state="translated">、または編集</target>
        </trans-unit>
        <trans-unit id="54a2f6c3e0bbeef4006390919d7b396d9e2b4da3" translate="yes" xml:space="preserve">
          <source>, or even</source>
          <target state="translated">、 あるいは</target>
        </trans-unit>
        <trans-unit id="579214064014c46082b00e9396995d722bdba307" translate="yes" xml:space="preserve">
          <source>, or even something such as D:</source>
          <target state="translated">、またはDなどの何か：</target>
        </trans-unit>
        <trans-unit id="dd3dabc0fe007ede17230bb03b9e7e04c79af333" translate="yes" xml:space="preserve">
          <source>, or if there is no such callback, calls the</source>
          <target state="translated">、またはそのようなコールバックがない場合は、</target>
        </trans-unit>
        <trans-unit id="00c06bb9d1dbbcd4ab3b41b1fd0ea954aed36a82" translate="yes" xml:space="preserve">
          <source>, or if there is no such callback, set errno to EINVAL. Or if the f is invalid, set errno to EBADF and return</source>
          <target state="translated">、またはそのようなコールバックがない場合は、errnoをEINVALに設定します。または、fが無効な場合は、errnoをEBADFに設定して返す</target>
        </trans-unit>
        <trans-unit id="1db68edf4d518c843f678ca5c930a828630ad1ff" translate="yes" xml:space="preserve">
          <source>, or if there is no such callback, set errno to EINVAL. Or if the f is invalid, set errno to EBADF.</source>
          <target state="translated">、またはそのようなコールバックがない場合は、errnoをEINVALに設定します。または、fが無効な場合は、errnoをEBADFに設定します。</target>
        </trans-unit>
        <trans-unit id="3748c8a3236d4aa94aa312fa69d106a59ad85b20" translate="yes" xml:space="preserve">
          <source>, or if they compare equal with &lt;code&gt;eq&lt;/code&gt; .</source>
          <target state="translated">、またはそれらが &lt;code&gt;eq&lt;/code&gt; と等しい場合。</target>
        </trans-unit>
        <trans-unit id="e15eaa1b8fa5c1f2a044cb1df03bafea1f454eca" translate="yes" xml:space="preserve">
          <source>, or if they compare equal with &lt;code&gt;eq&lt;/code&gt;.</source>
          <target state="translated">、またはそれらが &lt;code&gt;eq&lt;/code&gt; と等しい場合。</target>
        </trans-unit>
        <trans-unit id="5b8290ca58e4b337d2e457234b98a169d325bc21" translate="yes" xml:space="preserve">
          <source>, or printing using</source>
          <target state="translated">、または使用して印刷</target>
        </trans-unit>
        <trans-unit id="b97bcf82807eb070d0f663f018d630dbd84dfcb4" translate="yes" xml:space="preserve">
          <source>, or supply the stack size to &lt;code&gt;CreateThread()&lt;/code&gt;</source>
          <target state="translated">、またはスタックサイズを &lt;code&gt;CreateThread()&lt;/code&gt; に指定します</target>
        </trans-unit>
        <trans-unit id="345ba69cc2fea67ce22656b09e83f149b6b96534" translate="yes" xml:space="preserve">
          <source>, or the</source>
          <target state="translated">、 または</target>
        </trans-unit>
        <trans-unit id="9a264e54b25fdd7cfde7bd05762f5bc9a49c0c3a" translate="yes" xml:space="preserve">
          <source>, or the pattern contained by capture group</source>
          <target state="translated">、またはキャプチャグループに含まれるパターン</target>
        </trans-unit>
        <trans-unit id="62689d1cb8a9641695ea27a2f748331b9e8bf893" translate="yes" xml:space="preserve">
          <source>, or the type and version must be omitted.</source>
          <target state="translated">、またはタイプとバージョンを省略する必要があります。</target>
        </trans-unit>
        <trans-unit id="fb2724928018abae8bc9e57d76c637373cc20ea5" translate="yes" xml:space="preserve">
          <source>, or to restore &lt;code&gt;$!&lt;/code&gt; to a meaningful state.</source>
          <target state="translated">、または &lt;code&gt;$!&lt;/code&gt; を復元します！意味のある状態に。</target>
        </trans-unit>
        <trans-unit id="e7d923ba957c225be8a72ed7a758380976e4b860" translate="yes" xml:space="preserve">
          <source>, or using a separate</source>
          <target state="translated">、または別の</target>
        </trans-unit>
        <trans-unit id="9d0d91ae0fa92bac5f7cd8243e072cd7aef018d9" translate="yes" xml:space="preserve">
          <source>, or you could change certain filenames as needed:</source>
          <target state="translated">または、必要に応じて特定のファイル名を変更できます。</target>
        </trans-unit>
        <trans-unit id="f9173cbefc36581419831ce91b8068d884c10958" translate="yes" xml:space="preserve">
          <source>, otherwise nothing.</source>
          <target state="translated">、それ以外は何もない。</target>
        </trans-unit>
        <trans-unit id="a7f26ed799fd2c4c11b462f3e47d17d2a8c2c4ca" translate="yes" xml:space="preserve">
          <source>, overwriting the file with the new contents. With the &lt;code&gt;-p&lt;/code&gt; switch, Perl wraps a &lt;code&gt;while&lt;/code&gt; loop around the code you specify with &lt;code&gt;-e&lt;/code&gt; , and &lt;code&gt;-i&lt;/code&gt; turns on in-place editing. The current line is in &lt;code&gt;$_&lt;/code&gt; . With &lt;code&gt;-p&lt;/code&gt; , Perl automatically prints the value of &lt;code&gt;$_&lt;/code&gt; at the end of the loop. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more details.</source>
          <target state="translated">、ファイルを新しい内容で上書きします。 &lt;code&gt;-p&lt;/code&gt; スイッチ、Perlはラップ &lt;code&gt;while&lt;/code&gt; あなたが指定したコードの周りにループ &lt;code&gt;-e&lt;/code&gt; 、および &lt;code&gt;-i&lt;/code&gt; インプレース編集をオンに。現在の行は &lt;code&gt;$_&lt;/code&gt; ます。 &lt;code&gt;-p&lt;/code&gt; 、Perlは自動的に値を出力します &lt;code&gt;$_&lt;/code&gt; ループの最後で。詳細については&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2beb40374d1ba6b830b11c24eadb2a2464d618a5" translate="yes" xml:space="preserve">
          <source>, overwriting the file with the new contents. With the &lt;code&gt;-p&lt;/code&gt; switch, Perl wraps a &lt;code&gt;while&lt;/code&gt; loop around the code you specify with &lt;code&gt;-e&lt;/code&gt;, and &lt;code&gt;-i&lt;/code&gt; turns on in-place editing. The current line is in &lt;code&gt;$_&lt;/code&gt;. With &lt;code&gt;-p&lt;/code&gt;, Perl automatically prints the value of &lt;code&gt;$_&lt;/code&gt; at the end of the loop. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more details.</source>
          <target state="translated">、ファイルを新しい内容で上書きします。 &lt;code&gt;-p&lt;/code&gt; スイッチ、Perlはラップ &lt;code&gt;while&lt;/code&gt; あなたが指定したコードの周りにループ &lt;code&gt;-e&lt;/code&gt; 、および &lt;code&gt;-i&lt;/code&gt; インプレース編集をオンに。現在の行は &lt;code&gt;$_&lt;/code&gt; ます。 &lt;code&gt;-p&lt;/code&gt; 、Perlは自動的に値を出力します &lt;code&gt;$_&lt;/code&gt; ループの最後で。詳細については、&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f8d0c96d2d2b2aafa291574fbf6087350a9988db" translate="yes" xml:space="preserve">
          <source>, performing the correct bookkeeping whenever a newline character is passed. This is the normal way to consume lexed text.</source>
          <target state="translated">、改行文字が渡されるたびに正しい簿記を実行します。これは、字句テキストを消費する通常の方法です。</target>
        </trans-unit>
        <trans-unit id="75a085778831d29e999e10d1d80353eeb630cc4b" translate="yes" xml:space="preserve">
          <source>, period.)</source>
          <target state="translated">、 限目。）</target>
        </trans-unit>
        <trans-unit id="70ef65c7d96d2bd885c5b7612ef8e3946ac09c5f" translate="yes" xml:space="preserve">
          <source>, period.) If the &lt;code&gt;/s&lt;/code&gt; modifier is specified, sequences of characters that were transliterated to the same character are squashed down to a single instance of the character.</source>
          <target state="translated">、ピリオド。） &lt;code&gt;/s&lt;/code&gt; 修飾子が指定されている場合、同じ文字に音訳された文字のシーケンスは、その文字の単一のインスタンスに押しつぶされます。</target>
        </trans-unit>
        <trans-unit id="60007a5d7f11a8090fc943b98a4327b72a97056b" translate="yes" xml:space="preserve">
          <source>, pointing up from the &lt;b&gt;theta&lt;/b&gt;-plane.</source>
          <target state="translated">、&lt;b&gt;シータ&lt;/b&gt;平面から上向き。</target>
        </trans-unit>
        <trans-unit id="c4604eaf3d1d886deab27e44f9f084a7eebe60a8" translate="yes" xml:space="preserve">
          <source>, presumably because of caching issues even when using autoflush (this is usually overcome by waiting a while after writing to the tempfile before attempting to C</source>
          <target state="translated">、おそらくautoflushを使用している場合でもキャッシュの問題が原因です（これは通常、Cに試みる前に一時ファイルに書き込んだ後しばらく待つことで克服されます</target>
        </trans-unit>
        <trans-unit id="a2f167a172a1e8be32df955ad41d6bc58487f037" translate="yes" xml:space="preserve">
          <source>, provides access to the following elements of the Perl API that are not otherwise available in Perl releases older than when the elements were first introduced. (Note that many of these are not supported all the way back to 5.003_07, but it may be that they are supported back as far as you need; see &lt;a href=&quot;#Supported-Perl-API%2C-sorted-by-version&quot;&gt;&quot;Supported Perl API, sorted by version&quot;&lt;/a&gt; for that information.)</source>
          <target state="translated">は、要素が最初に導入されたときよりも古いPerlリリースでは利用できないPerlAPIの次の要素へのアクセスを提供します。（これらの多くは5.003_07までサポートされていないことに注意してください。ただし、必要な範囲でサポートされている可能性があります。詳細については、&lt;a href=&quot;#Supported-Perl-API%2C-sorted-by-version&quot;&gt;「サポートされているPerl API、バージョンでソート」&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="700f9b2825afd309ca4619c11e0d2d9e2e77290a" translate="yes" xml:space="preserve">
          <source>, provides access to the following elements of the Perl API that is not available in older Perl releases:</source>
          <target state="translated">、以前のPerlリリースでは使用できないPerl APIの次の要素へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="65e4734d8fbb856132be8332b98473e9a6090b22" translate="yes" xml:space="preserve">
          <source>, rather than something that it</source>
          <target state="translated">、というよりは</target>
        </trans-unit>
        <trans-unit id="f4e7af1322b9da55c415c39f9e7ff17666928572" translate="yes" xml:space="preserve">
          <source>, regardless of where STDOUT may be redirected to.</source>
          <target state="translated">、STDOUTのリダイレクト先に関係なく。</target>
        </trans-unit>
        <trans-unit id="778526e92b1eabba1ba99018f377d78629f31fa4" translate="yes" xml:space="preserve">
          <source>, respectively. &lt;code&gt;Re&lt;/code&gt; , &lt;code&gt;Im&lt;/code&gt; , &lt;code&gt;arg&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;rho&lt;/code&gt; , and &lt;code&gt;theta&lt;/code&gt; can be used also as mutators. The &lt;code&gt;cbrt&lt;/code&gt; returns only one of the solutions: if you want all three, use the &lt;code&gt;root&lt;/code&gt; function.</source>
          <target state="translated">、それぞれ。 &lt;code&gt;Re&lt;/code&gt; 、 &lt;code&gt;Im&lt;/code&gt; 、 &lt;code&gt;arg&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;rho&lt;/code&gt; 、 &lt;code&gt;theta&lt;/code&gt; はミューテーターとしても使用できます。 &lt;code&gt;cbrt&lt;/code&gt; リターンソリューションの唯一の1：あなたはすべての3つが必要な場合は、使用して &lt;code&gt;root&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="1432aa0361b53e3a3db3eff5fece905dc02f63c0" translate="yes" xml:space="preserve">
          <source>, respectively. &lt;code&gt;Re&lt;/code&gt;, &lt;code&gt;Im&lt;/code&gt;, &lt;code&gt;arg&lt;/code&gt;, &lt;code&gt;abs&lt;/code&gt;, &lt;code&gt;rho&lt;/code&gt;, and &lt;code&gt;theta&lt;/code&gt; can be used also as mutators. The &lt;code&gt;cbrt&lt;/code&gt; returns only one of the solutions: if you want all three, use the &lt;code&gt;root&lt;/code&gt; function.</source>
          <target state="translated">、それぞれ。 &lt;code&gt;Re&lt;/code&gt; 、 &lt;code&gt;Im&lt;/code&gt; 、 &lt;code&gt;arg&lt;/code&gt; 、 &lt;code&gt;abs&lt;/code&gt; 、 &lt;code&gt;rho&lt;/code&gt; 、および &lt;code&gt;theta&lt;/code&gt; はミューテーターとしても使用できます。 &lt;code&gt;cbrt&lt;/code&gt; リターンソリューションの唯一の1：あなたはすべての3つが必要な場合は、使用して &lt;code&gt;root&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="c7afdf070db2b17186b849dea9ccbae8490266d4" translate="yes" xml:space="preserve">
          <source>, returns false; otherwise returns true.</source>
          <target state="translated">、falseを返します。それ以外の場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="ff419dfd1490efd2af497c9629d6cd9180c57c34" translate="yes" xml:space="preserve">
          <source>, right? But, the submitter's email address had changed since the last of their submissions, and this caused other tests to fail. Running the test target given in the next item would have caught this problem.</source>
          <target state="translated">、 正しい？しかし、提出者の電子メールアドレスが最後の提出以降に変更されたため、他のテストが失敗しました。次の項目で指定されているテストターゲットを実行すると、この問題が発生します。</target>
        </trans-unit>
        <trans-unit id="613c35a1e740b0c235d0f18f6677ec6eca7c3e11" translate="yes" xml:space="preserve">
          <source>, rounded towards zero. Division by zero generates an exception.</source>
          <target state="translated">、ゼロに向かって丸められます。ゼロ除算は例外を生成します。</target>
        </trans-unit>
        <trans-unit id="294f1e85971ddf3faffa14fe9c113e1fb49247ca" translate="yes" xml:space="preserve">
          <source>, run</source>
          <target state="translated">、実行</target>
        </trans-unit>
        <trans-unit id="405cbdde629a3d6806c42e7498957799c0c7e735" translate="yes" xml:space="preserve">
          <source>, run:</source>
          <target state="translated">、実行：</target>
        </trans-unit>
        <trans-unit id="bbe01f117bad48eb679b7748a19ed0966f1fba4d" translate="yes" xml:space="preserve">
          <source>, same with</source>
          <target state="translated">、 と同じ</target>
        </trans-unit>
        <trans-unit id="f3e57458037c62794ca5968e5d5cd43577521d99" translate="yes" xml:space="preserve">
          <source>, say, by issuing a command like</source>
          <target state="translated">、たとえば、次のようなコマンドを発行して</target>
        </trans-unit>
        <trans-unit id="5cc91dd4b05c40ee3836cd8a51b18923b0309266" translate="yes" xml:space="preserve">
          <source>, says which packages are</source>
          <target state="translated">、どのパッケージが</target>
        </trans-unit>
        <trans-unit id="7bea033bd7bdaed455f219df3563798009d97e30" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;&quot;Handling Malformed Data&quot;&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;「不正な形式のデータの処理」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="42b0061f7d598e9846a6cb4198408f6e62c1c966" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;Handling Malformed Data&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;不正なデータの処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e5cf1b7b60bc751870d9bee94d589e7e13b098d6" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#Making&quot;&gt;&quot;Making&quot;&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;#Making&quot;&gt;「作成」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8d832948372c398a9280338201f9092bcd809e94" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#Making&quot;&gt;Making&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;#Making&quot;&gt;作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6de0215f7a739d4e3e3822c99e1d1856c89071b2" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;&quot;&lt;code&gt;PERLLIB_PREFIX&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;「 &lt;code&gt;PERLLIB_PREFIX&lt;/code&gt; 」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2b3e32c9f4e25b163e62562a312fffb640ca872c" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee0c1ad5d5b448bff9df5b0bab0d2210c95e514e" translate="yes" xml:space="preserve">
          <source>, see below.</source>
          <target state="translated">、 下記参照。</target>
        </trans-unit>
        <trans-unit id="4165c20cc560175b963da6bc4d77312447940a05" translate="yes" xml:space="preserve">
          <source>, setting &lt;code&gt;IS_NUMBER_TRAILING&lt;/code&gt; on the result.</source>
          <target state="translated">、結果に &lt;code&gt;IS_NUMBER_TRAILING&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="ba2c6475f8f940fb92ea77b169a003790260386a" translate="yes" xml:space="preserve">
          <source>, shows how you can make use of</source>
          <target state="translated">、どのように利用できるかを示します</target>
        </trans-unit>
        <trans-unit id="9c021cd1028629354df63a6c9de35015825f27c6" translate="yes" xml:space="preserve">
          <source>, since they work on similar inter-process communication principles as Unix pipelines. Such a filehandle has an active program instead of a static file on its external end, but in every other sense it works just like a more typical file-based filehandle, with all the techniques discussed earlier in this article just as applicable.</source>
          <target state="translated">、Unixパイプラインと同様のプロセス間通信の原則に取り組んでいるため。このようなファイルハンドルの外部には、静的ファイルではなくアクティブプログラムがありますが、他のすべての意味では、この記事で前述したすべての手法を適用できる、より一般的なファイルベースのファイルハンドルと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="4dd3298c6d1bd33b1bddecc4419b76b21ac63113" translate="yes" xml:space="preserve">
          <source>, so G_DISCARD is specified. Even if</source>
          <target state="translated">なので、G_DISCARDが指定されています。たとえ</target>
        </trans-unit>
        <trans-unit id="74317a6fb7a862910bba2f815752e8625fde38fb" translate="yes" xml:space="preserve">
          <source>, so here's some opportunity for some patching.</source>
          <target state="translated">なので、ここにパッチを適用する機会があります。</target>
        </trans-unit>
        <trans-unit id="99d2a210f65f1b750acbf3003b2617a271c06034" translate="yes" xml:space="preserve">
          <source>, so that it does not create a link between a VIO session and the session of &lt;code&gt;pm_porg&lt;/code&gt; . (Such a link closes the VIO window.) E.g., this works with</source>
          <target state="translated">これにより、VIOセッションと &lt;code&gt;pm_porg&lt;/code&gt; のセッションの間にリンクが作成されなくなります。（このようなリンクはVIOウィンドウを閉じます。）たとえば、これは</target>
        </trans-unit>
        <trans-unit id="b431b99c75fdc1f8394d149668a8cc3e91aa8961" translate="yes" xml:space="preserve">
          <source>, so that it does not create a link between a VIO session and the session of &lt;code&gt;pm_porg&lt;/code&gt;. (Such a link closes the VIO window.) E.g., this works with</source>
          <target state="translated">、VIOセッションと &lt;code&gt;pm_porg&lt;/code&gt; のセッションの間にリンクが作成されないようにします。（このようなリンクはVIOウィンドウを閉じます。）たとえば、これは</target>
        </trans-unit>
        <trans-unit id="8075e1a34058df98200120ef8d7277ea339786f0" translate="yes" xml:space="preserve">
          <source>, so the directories are searched through for linkable libraries again.</source>
          <target state="translated">、そのため、ディレクトリはリンク可能なライブラリを再度検索します。</target>
        </trans-unit>
        <trans-unit id="2a07866af21835710bc9a6f54723c0b9d52d41d7" translate="yes" xml:space="preserve">
          <source>, so there is no special &quot;test_harness&quot; target.</source>
          <target state="translated">なので、特別な「test_harness」ターゲットはありません。</target>
        </trans-unit>
        <trans-unit id="39d37d1b4683a3fb66c0c9cb4ab07337524f0bd5" translate="yes" xml:space="preserve">
          <source>, so we may ignore them. The following list shows our errors, your results may differ:</source>
          <target state="translated">なので、無視する場合があります。次のリストはエラーを示しています。結果は異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="04d17676d801558b107d5b7f04560aca2950977f" translate="yes" xml:space="preserve">
          <source>, so you also pay a price for each pattern that contains capturing parentheses. (To avoid this cost while retaining the grouping behaviour, use the extended regular expression &lt;code&gt;(?: ... )&lt;/code&gt; instead.) But if you never use &lt;code&gt;$&amp;amp;&lt;/code&gt;, &lt;code&gt;$`&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt;, then patterns</source>
          <target state="translated">、したがって、キャプチャ括弧を含む各パターンの価格も支払います。（グループ化の動作を維持しながらこのコストを回避するには、代わりに拡張正規表現 &lt;code&gt;(?: ... )&lt;/code&gt; 使用します。）ただし、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、 &lt;code&gt;$`&lt;/code&gt; または &lt;code&gt;$'&lt;/code&gt; 使用したことがない場合は、パターン</target>
        </trans-unit>
        <trans-unit id="cf90afd63e53252a0999bd1484eafacffe771fa0" translate="yes" xml:space="preserve">
          <source>, so you can't set sh with a &lt;code&gt;-D&lt;/code&gt; option, though you can override this (and startsh) with &lt;code&gt;-O -Dsh=&lt;i&gt;/bin/whatever&lt;/i&gt; -Dstartsh=whatever&lt;/code&gt;</source>
          <target state="translated">、つまり、 &lt;code&gt;-D&lt;/code&gt; オプションを使用してshを設定することはできませんが、 &lt;code&gt;-O -Dsh=&lt;i&gt;/bin/whatever&lt;/i&gt; -Dstartsh=whatever&lt;/code&gt; &lt;i&gt;/ bin / whatever&lt;/i&gt; -Dstartsh = whateverを使用してこれ（およびstartsh）をオーバーライドできます。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="f6d839faa6ea4a6b5e97b5d7bc7e2a56a2c58137" translate="yes" xml:space="preserve">
          <source>, so you might examine them if your console has only a limited number of cols.</source>
          <target state="translated">なので、コンソールにcolの数が限られている場合は、それらを調べることができます。</target>
        </trans-unit>
        <trans-unit id="2276c8b5c561790372b3ca4478529f74cf3b1e94" translate="yes" xml:space="preserve">
          <source>, some systems may have to replace the &lt;code&gt;#!&lt;/code&gt; line with a line containing just a colon, which will be politely ignored by Perl. Other systems can't control that, and need a totally devious construct that will work under any of</source>
          <target state="translated">、一部のシステムでは &lt;code&gt;#!&lt;/code&gt; を置き換える必要がある場合があります。コロンのみを含む行を含む行。これはPerlによって丁寧に無視されます。他のシステムはそれを制御できず、以下のいずれかで動作する完全に不正な構成が必要です</target>
        </trans-unit>
        <trans-unit id="a23e4409511836342736b9f02167e4000d6c659b" translate="yes" xml:space="preserve">
          <source>, sorcery, or wonder working. [From Middle English.]</source>
          <target state="translated">、魔術、または不思議に働いています。[中英語から。]</target>
        </trans-unit>
        <trans-unit id="fd25e4b237d0de2bbe9c20b33a4bfd410153bc18" translate="yes" xml:space="preserve">
          <source>, specifically a listing of functions, macros, flags, and variables that may be used by extension writers. &lt;a href=&quot;#Undocumented-functions&quot;&gt;At the end&lt;/a&gt; is a list of functions which have yet to be documented. The interfaces of those are subject to change without notice. Anything not listed here is not part of the public API, and should not be used by extension writers at all. For these reasons, blindly using functions listed in proto.h is to be avoided when writing extensions.</source>
          <target state="translated">、特に拡張機能の作成者が使用できる関数、マクロ、フラグ、変数のリスト。&lt;a href=&quot;#Undocumented-functions&quot;&gt;最後に、&lt;/a&gt;まだ文書化されていない関数のリストがあります。それらのインターフェースは予告なく変更される場合があります。ここにリストされていないものはパブリックAPIの一部ではないため、拡張機能の作成者は使用しないでください。これらの理由により、拡張機能を作成するときは、proto.hにリストされている関数を盲目的に使用することは避けてください。</target>
        </trans-unit>
        <trans-unit id="bd6869e59a3a41f4025ac1776272a94fc706f68e" translate="yes" xml:space="preserve">
          <source>, specify where your tests are located with the &lt;code&gt;test&lt;/code&gt; directive:</source>
          <target state="translated">、 &lt;code&gt;test&lt;/code&gt; ディレクティブを使用して、テストの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="3eace3842ea85c92144047677156c458ddf9586e" translate="yes" xml:space="preserve">
          <source>, standard input (</source>
          <target state="translated">、標準入力（</target>
        </trans-unit>
        <trans-unit id="dacd7df5d67e86f62828aca14d84822ce104e1a0" translate="yes" xml:space="preserve">
          <source>, stripped of their leading &quot;pw_&quot; parts, namely &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;passwd&lt;/code&gt; , &lt;code&gt;uid&lt;/code&gt; , &lt;code&gt;gid&lt;/code&gt; , &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; , &lt;code&gt;quota&lt;/code&gt; , &lt;code&gt;comment&lt;/code&gt; , &lt;code&gt;class&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , &lt;code&gt;dir&lt;/code&gt; , &lt;code&gt;shell&lt;/code&gt; , and &lt;code&gt;expire&lt;/code&gt; . The &lt;code&gt;passwd&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , and &lt;code&gt;shell&lt;/code&gt; fields are tainted when running in taint mode.</source>
          <target state="translated">、その先頭の「pw_」部分、つまり &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;passwd&lt;/code&gt; 、 &lt;code&gt;uid&lt;/code&gt; 、 &lt;code&gt;gid&lt;/code&gt; 、 &lt;code&gt;change&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; 、 &lt;code&gt;quota&lt;/code&gt; 、 &lt;code&gt;comment&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;gecos&lt;/code&gt; 、 &lt;code&gt;dir&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; 、および &lt;code&gt;expire&lt;/code&gt; を取り除いたもの。 &lt;code&gt;passwd&lt;/code&gt; の、 &lt;code&gt;gecos&lt;/code&gt; 、および &lt;code&gt;shell&lt;/code&gt; 汚染モードで実行する場合のフィールドが汚染されています。</target>
        </trans-unit>
        <trans-unit id="c572293c3193296a30f83f937ead06ce5f40aaae" translate="yes" xml:space="preserve">
          <source>, stripped of their leading &quot;pw_&quot; parts, namely &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;passwd&lt;/code&gt;, &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;gid&lt;/code&gt;, &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;quota&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;gecos&lt;/code&gt;, &lt;code&gt;dir&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, and &lt;code&gt;expire&lt;/code&gt;. The &lt;code&gt;passwd&lt;/code&gt;, &lt;code&gt;gecos&lt;/code&gt;, and &lt;code&gt;shell&lt;/code&gt; fields are tainted when running in taint mode.</source>
          <target state="translated">、その先頭の&quot;pw_&quot;の部分、すなわちを剥奪 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;passwd&lt;/code&gt; を、 &lt;code&gt;uid&lt;/code&gt; 、 &lt;code&gt;gid&lt;/code&gt; 、 &lt;code&gt;change&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; 、 &lt;code&gt;quota&lt;/code&gt; 、 &lt;code&gt;comment&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;gecos&lt;/code&gt; 、 &lt;code&gt;dir&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; 、および &lt;code&gt;expire&lt;/code&gt; 。 &lt;code&gt;passwd&lt;/code&gt; の、 &lt;code&gt;gecos&lt;/code&gt; 、および &lt;code&gt;shell&lt;/code&gt; 汚染モードで実行する場合のフィールドが汚染されています。</target>
        </trans-unit>
        <trans-unit id="957091e96ecfa54157cc0d4139600a9a7f9d62d7" translate="yes" xml:space="preserve">
          <source>, such as having $x run from 4..8 and $y run from 7 to 12? Hmm... here's the simple way:</source>
          <target state="translated">たとえば、$。xを4..8から実行し、$ yを7から12まで実行するなどですか。うーん...ここに簡単な方法があります：</target>
        </trans-unit>
        <trans-unit id="656da3fea3006661322b08824becf92984dd0aa9" translate="yes" xml:space="preserve">
          <source>, such as within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or a file, even though the statements aren&amp;rsquo;t delimited by braces.</source>
          <target state="translated">、たとえば、ステートメントが中括弧で区切られていない場合でも、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; またはファイル内など。</target>
        </trans-unit>
        <trans-unit id="9aed239505bdee24ade4401579d4e55a499648de" translate="yes" xml:space="preserve">
          <source>, such as within an &lt;code&gt;eval&lt;/code&gt; or a file, even though the statements aren&amp;rsquo;t delimited by braces.</source>
          <target state="translated">、ステートメントが中括弧で区切られていない場合でも、 &lt;code&gt;eval&lt;/code&gt; やファイル内など。</target>
        </trans-unit>
        <trans-unit id="1146b3e5752905896b7897a3617a9463f973fcbf" translate="yes" xml:space="preserve">
          <source>, such that &lt;code&gt;Foo::Bar&lt;/code&gt; is in</source>
          <target state="translated">、 &lt;code&gt;Foo::Bar&lt;/code&gt; が入っているような</target>
        </trans-unit>
        <trans-unit id="e08e5efec9e9e043f2abcc148b97927bd245fcae" translate="yes" xml:space="preserve">
          <source>, terminated by a newline.)</source>
          <target state="translated">、改行で終了します。）</target>
        </trans-unit>
        <trans-unit id="4cc374921dd851c3d7f16bd01a5e82be341ff39e" translate="yes" xml:space="preserve">
          <source>, that is, a string beginning with a letter or underscore, and containing letters, underscores, and digits. In some cases, it may be a chain of identifiers, separated by &lt;code&gt;::&lt;/code&gt; (or by the slightly archaic &lt;code&gt;'&lt;/code&gt;); all but the last are interpreted as names of packages, to locate the namespace in which to look up the final identifier (see &lt;a href=&quot;perlmod#Packages&quot;&gt;&quot;Packages&quot; in perlmod&lt;/a&gt; for details). For a more in-depth discussion on identifiers, see &lt;a href=&quot;#Identifier-parsing&quot;&gt;&quot;Identifier parsing&quot;&lt;/a&gt;. It's possible to substitute for a simple identifier, an expression that produces a reference to the value at runtime. This is described in more detail below and in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">、つまり、文字またはアンダースコアで始まり、文字、アンダースコア、および数字を含む文字列。場合によっては、 &lt;code&gt;::&lt;/code&gt; :（または少し古風な &lt;code&gt;'&lt;/code&gt; ）で区切られた識別子のチェーンである可能性があります。最後を除くすべてがパッケージの名前として解釈され、最終的な識別子を検索する名前空間が検索されます（詳細については&lt;a href=&quot;perlmod#Packages&quot;&gt;、perlmodの「パッケージ」&lt;/a&gt;を参照してください）。識別子の詳細については、&lt;a href=&quot;#Identifier-parsing&quot;&gt;「識別子の解析」を&lt;/a&gt;参照してください。実行時に値への参照を生成する式である単純な識別子の代わりに使用することができます。これについては、以下および&lt;a href=&quot;perlref&quot;&gt;perlrefで&lt;/a&gt;詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="56e9bba4a207b86aa8dee08a4810ed2206bed901" translate="yes" xml:space="preserve">
          <source>, that is, a string beginning with a letter or underscore, and containing letters, underscores, and digits. In some cases, it may be a chain of identifiers, separated by &lt;code&gt;::&lt;/code&gt; (or by the slightly archaic &lt;code&gt;'&lt;/code&gt;); all but the last are interpreted as names of packages, to locate the namespace in which to look up the final identifier (see &lt;a href=&quot;perlmod#Packages&quot;&gt;Packages in perlmod&lt;/a&gt; for details). For a more in-depth discussion on identifiers, see &lt;a href=&quot;#Identifier-parsing&quot;&gt;Identifier parsing&lt;/a&gt;. It's possible to substitute for a simple identifier, an expression that produces a reference to the value at runtime. This is described in more detail below and in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;.</source>
          <target state="translated">、つまり、文字またはアンダースコアで始まり、文字、アンダースコア、および数字を含む文字列。場合によっては、 &lt;code&gt;::&lt;/code&gt; :（または少し古い &lt;code&gt;'&lt;/code&gt; ）で区切られた識別子のチェーンになる場合があります。最後を除くすべては、最終的な識別子を検索する名前空間を見つけるために、パッケージの名前として解釈されます（詳細については&lt;a href=&quot;perlmod#Packages&quot;&gt;、perlmodのパッケージ&lt;/a&gt;を参照してください）。識別子の詳細については、&lt;a href=&quot;#Identifier-parsing&quot;&gt;識別子の解析を&lt;/a&gt;参照してください。実行時に値への参照を生成する式である単純な識別子の代わりに使用できます。これについては、以下と&lt;a href=&quot;perlref&quot;&gt;perlrefで&lt;/a&gt;詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="5ebe898ca0c994ef13e630acb20dae497030f2a1" translate="yes" xml:space="preserve">
          <source>, that is, all elements in either A or in B but not in both. Think of it as an xor operation.</source>
          <target state="translated">、つまり、AまたはBのいずれかにあるが両方にはないすべての要素。xor操作と考えてください。</target>
        </trans-unit>
        <trans-unit id="ef6731e3871cff7ef7e6cb224e37d6e60b555955" translate="yes" xml:space="preserve">
          <source>, that is, it is complemented. If &lt;code&gt;/d&lt;/code&gt; and/or &lt;code&gt;/s&lt;/code&gt; are also specified, they apply to the complemented</source>
          <target state="translated">、つまり、補完されます。もし &lt;code&gt;/d&lt;/code&gt; および/または &lt;code&gt;/s&lt;/code&gt; がも指定されている、彼らは補完に適用されます</target>
        </trans-unit>
        <trans-unit id="fb1f30a577a9e343978298cf00190fde48358aaf" translate="yes" xml:space="preserve">
          <source>, that is, visible. This class consists of all alphanumeric characters and all punctuation characters.</source>
          <target state="translated">、つまり、表示されます。このクラスは、すべての英数字と句読点で構成されています。</target>
        </trans-unit>
        <trans-unit id="3e5dd609a84255a29408216ee64e75b7eda290c6" translate="yes" xml:space="preserve">
          <source>, that returns the token type, among other things). And &lt;code&gt;+&lt;/code&gt;:</source>
          <target state="translated">、特にトークンタイプを返します）。そして &lt;code&gt;+&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="066c5c23cfa29a9ad5d5bae17b8dc8aeb40e3312" translate="yes" xml:space="preserve">
          <source>, that takes 2 integer parameters and simply returns their sum.</source>
          <target state="translated">、これは2つの整数パラメータを取り、それらの合計を返すだけです。</target>
        </trans-unit>
        <trans-unit id="72fb706cc8e6bb54ff9e026e88c6735beb29bae1" translate="yes" xml:space="preserve">
          <source>, that uses all three (long lines have been wrapped here):</source>
          <target state="translated">、3つすべてを使用します（長い行はここでラップされています）。</target>
        </trans-unit>
        <trans-unit id="c4ff75230dcb5fc1cf1b33f194533921c76a1f94" translate="yes" xml:space="preserve">
          <source>, that was introduced in release 5.005. That model was deprecated, and has been removed in version 5.10.</source>
          <target state="translated">、リリース5.005で導入されました。そのモデルは廃止され、バージョン5.10で削除されました。</target>
        </trans-unit>
        <trans-unit id="4c76a9f1c0aa51a13c1e721f68f5b80a4fdeaee7" translate="yes" xml:space="preserve">
          <source>, that would involve ensuring any &lt;code&gt;lib/&lt;/code&gt; in front of the module location were removed.</source>
          <target state="translated">、モジュールの場所の前にある &lt;code&gt;lib/&lt;/code&gt; が削除されたことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a9bcafc2113daaac812f1518346b8bb3f4ad5920" translate="yes" xml:space="preserve">
          <source>, the</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="bbc14ad4bef82ce943fa383c1ed92a04f35ae9a8" translate="yes" xml:space="preserve">
          <source>, the C function required to call it is now a bit more complex.</source>
          <target state="translated">、それを呼び出すために必要なC関数は少し複雑になりました。</target>
        </trans-unit>
        <trans-unit id="4f74cf35d928e36b23641e736801a45580f16870" translate="yes" xml:space="preserve">
          <source>, the Perl library module for the extension, and</source>
          <target state="translated">、拡張機能のPerlライブラリモジュール、および</target>
        </trans-unit>
        <trans-unit id="83dee3890eb5dca0adacf7473711167c68e17275" translate="yes" xml:space="preserve">
          <source>, the YACC grammar. Let's look at the code that constructs the tree for &lt;code&gt;$a = $b + $c&lt;/code&gt;.</source>
          <target state="translated">、YACC文法。 &lt;code&gt;$a = $b + $c&lt;/code&gt; のツリーを構築するコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="97438a08eda84c3bfc06c55a3bea0450b5e8f958" translate="yes" xml:space="preserve">
          <source>, the YACC grammar. Let's take the piece we need to construct the tree for &lt;code&gt;$a = $b + $c&lt;/code&gt;</source>
          <target state="translated">、YACC文法。 &lt;code&gt;$a = $b + $c&lt;/code&gt; ツリーを構築するために必要な部分を見てみましょう</target>
        </trans-unit>
        <trans-unit id="d3a75d4660639ffe74acee5e5672e890c4814fdd" translate="yes" xml:space="preserve">
          <source>, the character used to separate elements in the command shell search &lt;code&gt;PATH&lt;/code&gt; .</source>
          <target state="translated">、コマンドシェル検索 &lt;code&gt;PATH&lt;/code&gt; で要素を区切るために使用される文字。</target>
        </trans-unit>
        <trans-unit id="bd63bb9f2cda3373d022c883344f5c3faec730a6" translate="yes" xml:space="preserve">
          <source>, the character used to separate elements in the command shell search &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">、コマンドシェル検索 &lt;code&gt;PATH&lt;/code&gt; で要素を区切るために使用される文字。</target>
        </trans-unit>
        <trans-unit id="855214b2662c5c1d8b850e9feee34272d5af2679" translate="yes" xml:space="preserve">
          <source>, the file</source>
          <target state="translated">、 ファイル</target>
        </trans-unit>
        <trans-unit id="b1abcc10b694dd0025270a3db184b16a0fa38af6" translate="yes" xml:space="preserve">
          <source>, the final character is replicated till it is long enough. If the</source>
          <target state="translated">、最後の文字が十分に長くなるまで複製されます。もし</target>
        </trans-unit>
        <trans-unit id="806b344895d4421bd236f5401f77d9edb8ff3fd2" translate="yes" xml:space="preserve">
          <source>, the final character, if any, is replicated until it is long enough. There won't be a final character if and only if the</source>
          <target state="translated">、最後の文字がある場合は、十分な長さになるまで複製されます。の場合に限り、最終的なキャラクターは存在しません</target>
        </trans-unit>
        <trans-unit id="dc1c5f98cffb439007008844e3a20f10ba40b400" translate="yes" xml:space="preserve">
          <source>, the first 16-bit unit being the</source>
          <target state="translated">、最初の16ビット単位は</target>
        </trans-unit>
        <trans-unit id="59d3c2b1e7a8f0fbf1d7438a5d2e3652d3735b95" translate="yes" xml:space="preserve">
          <source>, the lexer, and</source>
          <target state="translated">、レクサー、および</target>
        </trans-unit>
        <trans-unit id="2eeefd53f32ac80210e3e0524fe0f5c1cfb2e5e7" translate="yes" xml:space="preserve">
          <source>, the number of matches.</source>
          <target state="translated">、一致の数。</target>
        </trans-unit>
        <trans-unit id="cc0e409bb9bfdd351b146c8736f3bc9ef0f9e327" translate="yes" xml:space="preserve">
          <source>, the offset is relative to the start of the</source>
          <target state="translated">、オフセットは、</target>
        </trans-unit>
        <trans-unit id="f8c58b0bde45ddae936256535fca27e27919543c" translate="yes" xml:space="preserve">
          <source>, the process</source>
          <target state="translated">、 プロセス</target>
        </trans-unit>
        <trans-unit id="b71ad629342bbdad0ed5613b27effd49a287ff4b" translate="yes" xml:space="preserve">
          <source>, the quote (&lt;code&gt;'&quot;'&lt;/code&gt;) is used as a delimiter, the forward slash &lt;code&gt;'/'&lt;/code&gt; becomes an ordinary character and can be used in this regexp without trouble.</source>
          <target state="translated">、引用符（ &lt;code&gt;'&quot;'&lt;/code&gt; ）は区切り文字として使用され、スラッシュ &lt;code&gt;'/'&lt;/code&gt; は通常の文字になり、この正規表現で問題なく使用できます。</target>
        </trans-unit>
        <trans-unit id="03d7028c2014dc1d6e04f06a4cda352756b2fdc6" translate="yes" xml:space="preserve">
          <source>, the reference can be used to store context information. The reference will be</source>
          <target state="translated">、参照を使用してコンテキスト情報を保存できます。参照は</target>
        </trans-unit>
        <trans-unit id="8bcb5240076feedf18abb68075e1dc6583b4d7fb" translate="yes" xml:space="preserve">
          <source>, the regexp matches the whole string. Consider</source>
          <target state="translated">、正規表現は文字列全体に一致します。検討する</target>
        </trans-unit>
        <trans-unit id="91072da43b1733feac0b5401a10be38a14e4f911" translate="yes" xml:space="preserve">
          <source>, the result of subtracting</source>
          <target state="translated">、減算の結果</target>
        </trans-unit>
        <trans-unit id="bceccdaca653d534a67528d8ff70abcd0789f20d" translate="yes" xml:space="preserve">
          <source>, the result of the last statement) is used to determine truth or falsehood. If the code expression is not used as a conditional, the assertion always evaluates true and the result is put into the special variable &lt;code&gt;$^R&lt;/code&gt;. The variable &lt;code&gt;$^R&lt;/code&gt; can then be used in code expressions later in the regexp. Here are some silly examples:</source>
          <target state="translated">、最後のステートメントの結果）は、真実または虚偽を判断するために使用されます。コード式が条件として使用されていない場合、アサーションは常にtrueと評価され、結果は特別な変数 &lt;code&gt;$^R&lt;/code&gt; 入れられます。変数 &lt;code&gt;$^R&lt;/code&gt; は、後の正規表現でコード式で使用できます。ここにいくつかのばかげた例があります：</target>
        </trans-unit>
        <trans-unit id="503654fe46496135690eb6d481b68797ec8a3d06" translate="yes" xml:space="preserve">
          <source>, the resulting UTF8 flag is &lt;b&gt;on&lt;/b&gt;--</source>
          <target state="translated">、結果のUTF8フラグは&lt;b&gt;オンです&lt;/b&gt; -</target>
        </trans-unit>
        <trans-unit id="3421355fa3000d28b30b10777add4df0ffdfb58a" translate="yes" xml:space="preserve">
          <source>, the resulting UTF8 flag is always &lt;b&gt;off&lt;/b&gt;.</source>
          <target state="translated">結果のUTF8フラグは常に&lt;b&gt;オフ&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="68c1b175b8542016c468fb6ae172829284030bdd" translate="yes" xml:space="preserve">
          <source>, the second requests a</source>
          <target state="translated">、2番目は</target>
        </trans-unit>
        <trans-unit id="5099e16a5fb708a04487a027b0394f0a1a320dc4" translate="yes" xml:space="preserve">
          <source>, the substring &lt;code&gt;GTT GAA&lt;/code&gt; gives a match. A better solution is</source>
          <target state="translated">、部分文字列 &lt;code&gt;GTT GAA&lt;/code&gt; が一致します。より良い解決策は</target>
        </trans-unit>
        <trans-unit id="d0bac92aa165b5fcbe5d15dd2a3c4caac7ecba0a" translate="yes" xml:space="preserve">
          <source>, the table file is searched as</source>
          <target state="translated">、テーブルファイルは次のように検索されます</target>
        </trans-unit>
        <trans-unit id="80701e28ff7424b803181d8d7ce930f56b53f8c9" translate="yes" xml:space="preserve">
          <source>, the year 1995 is 95; the year 2001 is 101. Consult your system's &lt;code&gt;mktime()&lt;/code&gt; manpage for details about these and the other arguments.</source>
          <target state="translated">、1995年は95年です。2001年は101 です。これらおよびその他の引数の詳細については、システムの &lt;code&gt;mktime()&lt;/code&gt; マンページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9aea9e329eab2b9adcc970b72067fd0793c21cb5" translate="yes" xml:space="preserve">
          <source>, the year 1995 is 95; the year 2001 is 101. Consult your system's &lt;code&gt;strftime()&lt;/code&gt; manpage for details about these and the other arguments.</source>
          <target state="translated">、1995年は95年です。2001年は101 です。これらおよびその他の引数の詳細については、システムの &lt;code&gt;strftime()&lt;/code&gt; マンページを参照してください。</target>
        </trans-unit>
        <trans-unit id="e189049326051591313d1c5688fafbf491aeaf0f" translate="yes" xml:space="preserve">
          <source>, then</source>
          <target state="translated">、その後</target>
        </trans-unit>
        <trans-unit id="2d7357221c057e21e0603b99d486d8d01e9f1d7b" translate="yes" xml:space="preserve">
          <source>, then each cached data item will be discarded and looked up afresh after the</source>
          <target state="translated">、その後、キャッシュされた各データ項目は破棄され、その後に新たに検索されます</target>
        </trans-unit>
        <trans-unit id="0664c5508add1cbceda996e5b9d179cefd229787" translate="yes" xml:space="preserve">
          <source>, then extraction continues until</source>
          <target state="translated">、その後抽出は</target>
        </trans-unit>
        <trans-unit id="e9be5594e1731bd928c54113aa6bba78d9d10daa" translate="yes" xml:space="preserve">
          <source>, then the above system() is translated to</source>
          <target state="translated">、次に上記のsystem（）は</target>
        </trans-unit>
        <trans-unit id="56ed743dadd72fa853ae506be49d8e7ef23c11ba" translate="yes" xml:space="preserve">
          <source>, then the verbose level will default to 1 if the exit status is less than 2 and will default to 0 otherwise.</source>
          <target state="translated">の場合、詳細レベルは、終了ステータスが2未満の場合はデフォルトで1になり、それ以外の場合はデフォルトで0になります。</target>
        </trans-unit>
        <trans-unit id="f388bd8ed28d6ec5148837e6886a6224018735fc" translate="yes" xml:space="preserve">
          <source>, then this is a no-op. Returns the number of octets necessary to represent the string as</source>
          <target state="translated">、これは何もしません。文字列を次のように表すために必要なオクテット数を返します</target>
        </trans-unit>
        <trans-unit id="3e93eac954f44cb11630b056721e2f26edaf81c2" translate="yes" xml:space="preserve">
          <source>, then we actually define $Lexicon{</source>
          <target state="translated">、次に実際に$ Lexicon {</target>
        </trans-unit>
        <trans-unit id="981255f700628f4a04da30c05e1f1345be156be9" translate="yes" xml:space="preserve">
          <source>, then we need to tell the &lt;code&gt;perl&lt;/code&gt; executable where it will be able to find the installed</source>
          <target state="translated">、次に、インストールされている場所を見つけることができる場所を &lt;code&gt;perl&lt;/code&gt; 実行可能ファイルに通知する必要があります</target>
        </trans-unit>
        <trans-unit id="a97f83b483632edd32d7566630fdf0b16cc8ac52" translate="yes" xml:space="preserve">
          <source>, then you need to change the path following the &lt;code&gt;-L&lt;/code&gt; . If it complains that it can't find</source>
          <target state="translated">、次に &lt;code&gt;-L&lt;/code&gt; に続くパスを変更する必要があります。それが見つからないと不平を言うなら</target>
        </trans-unit>
        <trans-unit id="35f0f0578043f1ce353b282bba5a6f6dd3502f20" translate="yes" xml:space="preserve">
          <source>, then you need to change the path following the &lt;code&gt;-L&lt;/code&gt;. If it complains that it can't find</source>
          <target state="translated">、次に、 &lt;code&gt;-L&lt;/code&gt; に続くパスを変更する必要があります。見つからないと文句を言う場合</target>
        </trans-unit>
        <trans-unit id="8911f644fb0560e46f52310cd354bac6558884ff" translate="yes" xml:space="preserve">
          <source>, there is no upper bound to the number of argument values taken.</source>
          <target state="translated">、とられる引数値の数に上限はありません。</target>
        </trans-unit>
        <trans-unit id="8da1ee6882503c12e13b4824907fc0653955992a" translate="yes" xml:space="preserve">
          <source>, there is the entry:</source>
          <target state="translated">、エントリがあります：</target>
        </trans-unit>
        <trans-unit id="17e4f4b7efc3bfddeaaec858218e98d597284597" translate="yes" xml:space="preserve">
          <source>, there's no sense in being able to enable() or disable() processing.</source>
          <target state="translated">、enable（）またはdisable（）処理を実行できるようにしても意味がありません。</target>
        </trans-unit>
        <trans-unit id="d5fc8a5e02b68374b799d5535dec84e053e8816a" translate="yes" xml:space="preserve">
          <source>, this directory contains modules which are only released as part of the core. Unlike</source>
          <target state="translated">、このディレクトリには、コアの一部としてのみリリースされるモジュールが含まれています。とは異なり</target>
        </trans-unit>
        <trans-unit id="133358768c237ba7c13e2e36ef10a76ee918db2a" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_REVISION&lt;/code&gt; .</source>
          <target state="translated">、これは &lt;code&gt;PERL_REVISION&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="3cfc59cfaeff38d725334bbe1d5ea2b1ff52b207" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_REVISION&lt;/code&gt;.</source>
          <target state="translated">、これは &lt;code&gt;PERL_REVISION&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="4d5a14e004f2bf1eeac71229fa7540bd21823c5b" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_SUBVERSION&lt;/code&gt; . This is unique to perl.</source>
          <target state="translated">、これは &lt;code&gt;PERL_SUBVERSION&lt;/code&gt; と呼ばれます。これはperlに固有のものです。</target>
        </trans-unit>
        <trans-unit id="248a9ab41d2f9ab16a0738c6bed505d36cb3c82c" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_SUBVERSION&lt;/code&gt;. This is unique to perl.</source>
          <target state="translated">、これは &lt;code&gt;PERL_SUBVERSION&lt;/code&gt; と呼ばれます。これはperlに固有のものです。</target>
        </trans-unit>
        <trans-unit id="714cd1f92b0d5db09f723a91ae82e2d32331d86e" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_VERSION&lt;/code&gt; .</source>
          <target state="translated">、これは &lt;code&gt;PERL_VERSION&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="41e73dd1f9ca8349934ee78ba9a50704f4b426d9" translate="yes" xml:space="preserve">
          <source>, this is referred to as &lt;code&gt;PERL_VERSION&lt;/code&gt;.</source>
          <target state="translated">、これは &lt;code&gt;PERL_VERSION&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="4ba8cba024fa50efc2185c250a93c4684f50f8b2" translate="yes" xml:space="preserve">
          <source>, this method is a read-once operation. Call</source>
          <target state="translated">、このメソッドは1回限りの操作です。コール</target>
        </trans-unit>
        <trans-unit id="c5419160a5194a27a2e9670569f35b7ce53eec75" translate="yes" xml:space="preserve">
          <source>, this pragma looks in the table of standard Unicode names for the names</source>
          <target state="translated">、このプラグマは、名前の標準Unicode名の表を調べます</target>
        </trans-unit>
        <trans-unit id="96d19878d35455aef11308cd825aac00f74c2c5b" translate="yes" xml:space="preserve">
          <source>, those without any runtime variable interpolations. As documented in &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt;, this conversion will work only over literal parts of regular expressions. For &lt;code&gt;\Y|$re\Y|&lt;/code&gt; the variable part of this regular expression needs to be converted explicitly (but only if the special meaning of &lt;code&gt;\Y|&lt;/code&gt; should be enabled inside &lt;code&gt;$re&lt;/code&gt;):</source>
          <target state="translated">、ランタイム変数の補間がないもの。&lt;a href=&quot;overload&quot;&gt;オーバーロード&lt;/a&gt;で文書化されているように、この変換は正規表現のリテラル部分に対してのみ機能します。以下のための &lt;code&gt;\Y|$re\Y|&lt;/code&gt; この正規表現の変数部分は明示的に変換する必要があります（ただし、 &lt;code&gt;\Y|&lt;/code&gt; 特別な意味を &lt;code&gt;$re&lt;/code&gt; 内で有効にする必要がある場合のみ）。</target>
        </trans-unit>
        <trans-unit id="b0263513f039c38507b3d70b68ab4c5b60dd7020" translate="yes" xml:space="preserve">
          <source>, though it simply delegates to the</source>
          <target state="translated">、それは単にに委任しますが</target>
        </trans-unit>
        <trans-unit id="18f1b111c2282bb1d52143843bb53f0e42f90748" translate="yes" xml:space="preserve">
          <source>, though it's possible that some systems will have</source>
          <target state="translated">、一部のシステムでは</target>
        </trans-unit>
        <trans-unit id="2399ea48546f62dda016b66c915a33efba5ece8f" translate="yes" xml:space="preserve">
          <source>, to check use</source>
          <target state="translated">、使用を確認するには</target>
        </trans-unit>
        <trans-unit id="426b172db6893b6e9657e6e9162888abed4f4794" translate="yes" xml:space="preserve">
          <source>, to handle these for us. He suggests (assuming your string is contained in &lt;code&gt;$text&lt;/code&gt; ):</source>
          <target state="translated">、これらを処理してください。彼は提案します（あなたの文字列が &lt;code&gt;$text&lt;/code&gt; 含まれていると仮定します）：</target>
        </trans-unit>
        <trans-unit id="6f2a786ff4175338fb515aef2c29bd307cd29baa" translate="yes" xml:space="preserve">
          <source>, to handle these for us. He suggests (assuming your string is contained in &lt;code&gt;$text&lt;/code&gt;):</source>
          <target state="translated">、私たちのためにこれらを処理します。彼は提案します（あなたの文字列が &lt;code&gt;$text&lt;/code&gt; 含まれていると仮定します）：</target>
        </trans-unit>
        <trans-unit id="78af069883ae74a128985778bc16fd41b2d43bde" translate="yes" xml:space="preserve">
          <source>, to have the effect of:</source>
          <target state="translated">、次の効果があります。</target>
        </trans-unit>
        <trans-unit id="06a97e60b438c8a77e2cd328d323df609691a533" translate="yes" xml:space="preserve">
          <source>, to print out the UID of the process.</source>
          <target state="translated">、プロセスのUIDを出力します。</target>
        </trans-unit>
        <trans-unit id="5263066869df6bcc590c2451eb837a61c2634447" translate="yes" xml:space="preserve">
          <source>, typing</source>
          <target state="translated">、入力</target>
        </trans-unit>
        <trans-unit id="1cbd4041e99913f2cfa30fb2cec88d030e327667" translate="yes" xml:space="preserve">
          <source>, use a name recognized by the &lt;a href=&quot;Encode::Supported&quot;&gt;Encode::Supported&lt;/a&gt; module. Some pod formatters may try to guess between a Latin-1 or CP-1252 versus UTF-8 encoding, but they may guess wrong. It's best to be explicit if you use anything besides strict ASCII. Examples:</source>
          <target state="translated">、&lt;a href=&quot;Encode::Supported&quot;&gt;Encode :: Supported&lt;/a&gt;モジュールで認識される名前を使用してください。一部のポッドフォーマッタは、Latin-1またはCP-1252とUTF-8エンコーディングのどちらかを推測しようとする場合がありますが、間違って推測する場合があります。厳密なASCII以外のものを使用する場合は、明示的にするのが最善です。例：</target>
        </trans-unit>
        <trans-unit id="faee7867e8ebfc988e6546f4dcbe9ad6cb8c536a" translate="yes" xml:space="preserve">
          <source>, use a name recognized by the &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt; module. Some pod formatters may try to guess between a Latin-1 or CP-1252 versus UTF-8 encoding, but they may guess wrong. It's best to be explicit if you use anything besides strict ASCII. Examples:</source>
          <target state="translated">、&lt;a href=&quot;encode/supported&quot;&gt;Encode :: Supported&lt;/a&gt;モジュールで認識される名前を使用します。一部のポッドフォーマッターは、Latin-1またはCP-1252エンコーディングとUTF-8エンコーディングの間を推測しようとする場合がありますが、間違って推測する場合があります。厳密なASCII以外のものを使用する場合は、明示することをお勧めします。例：</target>
        </trans-unit>
        <trans-unit id="2a7de5b14d2a34b3272730993fe2dee6018ff3fd" translate="yes" xml:space="preserve">
          <source>, using embedded whitespace as the word delimiters. It can be understood as being roughly equivalent to:</source>
          <target state="translated">、埋め込まれた空白を単語の区切り文字として使用します。これはおおよそ次と同等であると理解できます。</target>
        </trans-unit>
        <trans-unit id="e169e875a0353d0299dee5c8ba5ef4c88de61df4" translate="yes" xml:space="preserve">
          <source>, when it detects its program running with differing real and effective user or group IDs. The setuid bit in Unix permissions is mode 04000, the setgid bit mode 02000; either or both may be set. You can also enable taint mode explicitly by using the &lt;b&gt;-T&lt;/b&gt; command line flag. This flag is</source>
          <target state="translated">、異なる実際の有効なユーザーIDまたはグループIDで実行されているプログラムを検出した場合。Unixパーミッションのsetuidビットはモード04000、setgidビットモードは02000です。どちらかまたは両方を設定できます。&lt;b&gt;-T&lt;/b&gt;コマンドラインフラグを使用して、汚染モードを明示的に有効にすることもできます。このフラグは</target>
        </trans-unit>
        <trans-unit id="a8fbd0202d5d59bb16abfc27a4a724fcbb5feb8c" translate="yes" xml:space="preserve">
          <source>, where</source>
          <target state="translated">、 どこ</target>
        </trans-unit>
        <trans-unit id="8924bb9dd1f684020a4cba15af279a4d0d20f15e" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; myint;&lt;/code&gt; is in effect, addition operations are forced to integer, whereas by default they are not, with the default behaviour being restored via &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; myint;&lt;/code&gt;</source>
          <target state="translated">、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; myint;&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;場合。実際には、加算演算は整数に強制されますが、デフォルトではそうではなく、デフォルトの動作 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; myint;&lt;/code&gt; myint なしで復元されます。</target>
        </trans-unit>
        <trans-unit id="c021dacf080e62f8123f183415639c30e95ffabe" translate="yes" xml:space="preserve">
          <source>, where &lt;code&gt;use myint;&lt;/code&gt; is in effect, addition operations are forced to integer, whereas by default they are not, with the default behaviour being restored via &lt;code&gt;no myint;&lt;/code&gt;</source>
          <target state="translated">、 &lt;code&gt;use myint;&lt;/code&gt; は事実上、加算演算は強制的に整数になりますが、デフォルトでは整数になりません。デフォルトの動作 &lt;code&gt;no myint;&lt;/code&gt; で復元されます。</target>
        </trans-unit>
        <trans-unit id="c470a8a84cae4c6227806e7867bd89a887b344e3" translate="yes" xml:space="preserve">
          <source>, where each member has an associated filename, known as the</source>
          <target state="translated">、各メンバーには、</target>
        </trans-unit>
        <trans-unit id="9f41ab59091bd1f06b31a77ab9df95b2bc91cbcd" translate="yes" xml:space="preserve">
          <source>, where the &lt;code&gt;.al&lt;/code&gt; file has the same name as the subroutine, sans package. If such a file exists, AUTOLOAD will read and evaluate it, thus (presumably) defining the needed subroutine. AUTOLOAD will then &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; the newly defined subroutine.</source>
          <target state="translated">ここで、 &lt;code&gt;.al&lt;/code&gt; ファイルの名前は、サブルーチンsans packageと同じです。そのようなファイルが存在する場合、AUTOLOADはそれを読み取って評価し、（おそらく）必要なサブルーチンを定義します。AUTOLOADはその後になる &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 新しく定義されたサブルーチンを。</target>
        </trans-unit>
        <trans-unit id="ded3ee142ecb7daceaf87b1f95d3c198051ca123" translate="yes" xml:space="preserve">
          <source>, where the &lt;code&gt;.al&lt;/code&gt; file has the same name as the subroutine, sans package. If such a file exists, AUTOLOAD will read and evaluate it, thus (presumably) defining the needed subroutine. AUTOLOAD will then &lt;code&gt;goto&lt;/code&gt; the newly defined subroutine.</source>
          <target state="translated">、ここで、 &lt;code&gt;.al&lt;/code&gt; ファイルの名前はサブルーチンsanspackageと同じです。そのようなファイルが存在する場合、AUTOLOADはそれを読み取って評価し、（おそらく）必要なサブルーチンを定義します。AUTOLOADはその後になる &lt;code&gt;goto&lt;/code&gt; 新しく定義されたサブルーチンを。</target>
        </trans-unit>
        <trans-unit id="6aea3fc4b54551faf648d0b392baddc5ecb694ab" translate="yes" xml:space="preserve">
          <source>, whereas</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="26c934aa9a989416f6aadbafbbddd8e4c4e1b0e5" translate="yes" xml:space="preserve">
          <source>, which are abstract numbers. To use these numbers, various encodings are needed.</source>
          <target state="translated">、これは抽象的な数字です。これらの数値を使用するには、さまざまなエンコーディングが必要です。</target>
        </trans-unit>
        <trans-unit id="03649386e3bc4e7a816e4620f028cf88bdb23bf9" translate="yes" xml:space="preserve">
          <source>, which are actually the same program but behave differently depending on how they are called, provide another way of getting at C with Perl - they'll convert C structures and union declarations to Perl code. This is deprecated in favour of</source>
          <target state="translated">は実際には同じプログラムですが、呼び出される方法によって動作が異なり、CでPerlを使用する別の方法を提供します-C構造体と共用体宣言をPerlコードに変換します。これは非推奨です。</target>
        </trans-unit>
        <trans-unit id="39b81ba625528bfbfbdeb767e8a690b6857a169b" translate="yes" xml:space="preserve">
          <source>, which attempts to simplify as much as possible, making bisecting as simple as running a Perl one-liner. For example, if you want to know when this became an error:</source>
          <target state="translated">、これは可能な限り単純化しようとし、Perlワンライナーを実行するのと同じくらい簡単に二等分します。たとえば、これがいつエラーになったのかを知りたい場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0b151974aee7344a268313e90f86adde43defa23" translate="yes" xml:space="preserve">
          <source>, which creates a Perl counterpart for each of the extension's XSUBs. Don't worry about this part; leave that to the</source>
          <target state="translated">、拡張機能の各XSUBに対応するPerlを作成します。この部分については心配しないでください。任せて</target>
        </trans-unit>
        <trans-unit id="5a5edb1a67afcdce7292393be6ccd46e15cc154a" translate="yes" xml:space="preserve">
          <source>, which describes the distribution, its contents, and the requirements for building and installing the distribution. The data structure stored in the</source>
          <target state="translated">、ディストリビューション、その内容、およびディストリビューションを構築およびインストールするための要件について説明します。に保存されているデータ構造</target>
        </trans-unit>
        <trans-unit id="0e4ba048b9a7447e52c228c8f75341de76908cb5" translate="yes" xml:space="preserve">
          <source>, which is always a good idea to supply if the number is known.</source>
          <target state="translated">、番号がわかっている場合は常に指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="77693f9b1b48d8ec17c40b859e5d00f6c499c0e5" translate="yes" xml:space="preserve">
          <source>, which is currently used (when needed) by all regular non-possessive expression quantifiers, namely &lt;code&gt;&quot;*&quot;&lt;/code&gt;, &lt;code&gt;*?&lt;/code&gt;, &lt;code&gt;&quot;+&quot;&lt;/code&gt;, &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}&lt;/code&gt;, and &lt;code&gt;{n,m}?&lt;/code&gt;. Backtracking is often optimized internally, but the general principle outlined here is valid.</source>
          <target state="translated">、現在（必要な場合）すべての通常の非所有格式の数量詞、つまり &lt;code&gt;&quot;*&quot;&lt;/code&gt; 、 &lt;code&gt;*?&lt;/code&gt; によって使用されています。、 &lt;code&gt;&quot;+&quot;&lt;/code&gt; 、 &lt;code&gt;+?&lt;/code&gt; 、 &lt;code&gt;{n,m}&lt;/code&gt; 、および &lt;code&gt;{n,m}?&lt;/code&gt; 。バックトラッキングは内部で最適化されることがよくありますが、ここで概説する一般原則は有効です。</target>
        </trans-unit>
        <trans-unit id="17829fa2132953972da0914ccd97c3e350358fce" translate="yes" xml:space="preserve">
          <source>, which is currently used (when needed) by all regular non-possessive expression quantifiers, namely &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}&lt;/code&gt;, and &lt;code&gt;{n,m}?&lt;/code&gt;. Backtracking is often optimized internally, but the general principle outlined here is valid.</source>
          <target state="translated">、これは現在（必要なときに）すべての正規の非所有的表現量指定子、つまり &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;*?&lt;/code&gt; によって使用されています。、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;+?&lt;/code&gt; 、 &lt;code&gt;{n,m}&lt;/code&gt; 、および &lt;code&gt;{n,m}?&lt;/code&gt; 。多くの場合、バックトラッキングは内部で最適化されますが、ここで説明する一般的な原則は有効です。</target>
        </trans-unit>
        <trans-unit id="03d1757cccf78573ee0182fd5b28a73a2d407dd6" translate="yes" xml:space="preserve">
          <source>, which is either a decimal or a hexadecimal scalar designating a code point in the platform's native character set (extended to Unicode), or a string containing &lt;code&gt;U+&lt;/code&gt; followed by hexadecimals designating a Unicode code point. A leading 0 will force a hexadecimal interpretation, as will a hexadecimal digit that isn't a decimal digit.</source>
          <target state="translated">これは、プラットフォームのネイティブ文字セット（Unicodeに拡張された）のコードポイントを指定する10進数または16進数のスカラー、またはUnicodeコードポイントを指定する16進数が後に続く &lt;code&gt;U+&lt;/code&gt; を含む文字列です。先頭の0は、10進数ではない16進数と同様に、16進数の解釈を強制します。</target>
        </trans-unit>
        <trans-unit id="baf38326329741523715bffba499968b7d0e87ce" translate="yes" xml:space="preserve">
          <source>, which is not the winpid. Use &lt;code&gt;Cygwin::pid_to_winpid()&lt;/code&gt; and &lt;code&gt;Cygwin::winpid_to_pid()&lt;/code&gt; to translate between them.</source>
          <target state="translated">、これはwinpidではありません。使用 &lt;code&gt;Cygwin::pid_to_winpid()&lt;/code&gt; と &lt;code&gt;Cygwin::winpid_to_pid()&lt;/code&gt; それらの間で変換します。</target>
        </trans-unit>
        <trans-unit id="32dea819029bc45dc941d184378ae2d614b06ad7" translate="yes" xml:space="preserve">
          <source>, which is the common case for most CPAN distributions with their</source>
          <target state="translated">、これは、ほとんどのCPANディストリビューションで一般的なケースです。</target>
        </trans-unit>
        <trans-unit id="0c16c9a97ba5ea538f1979d7f7d2fb2c51566d3a" translate="yes" xml:space="preserve">
          <source>, which matches any character but those in the brackets. Both &lt;code&gt;[...]&lt;/code&gt; and &lt;code&gt;[^...]&lt;/code&gt; must match a character, or the match fails. Then</source>
          <target state="translated">、括弧内の文字以外の任意の文字に一致します。 &lt;code&gt;[...]&lt;/code&gt; と &lt;code&gt;[^...]&lt;/code&gt; 両方が文字に一致する必要があります。一致しない場合、一致は失敗します。その後</target>
        </trans-unit>
        <trans-unit id="3d38775c49ebe935515da064eb664cbc8495f661" translate="yes" xml:space="preserve">
          <source>, which may also backtrack as necessary; however, should B not match, then no further backtracking will take place, and the pattern will fail outright at the current starting position.</source>
          <target state="translated">、必要に応じてバックトラックする場合もあります。ただし、Bが一致しない場合、それ以上のバックトラックは行われず、パターンは現在の開始位置で完全に失敗します。</target>
        </trans-unit>
        <trans-unit id="b4454811042a626c864b08d42e1e9fe1a6f89db8" translate="yes" xml:space="preserve">
          <source>, which means it's going to be false in any sane context.</source>
          <target state="translated">、つまり、すべての正気なコンテキストでfalseになります。</target>
        </trans-unit>
        <trans-unit id="a89b512ac155f333bc1a9e0edf340080f66fee9a" translate="yes" xml:space="preserve">
          <source>, which must be an encoding name that &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; recognizes. (Encode's list of supported encodings, in &lt;a href=&quot;Encode::Supported&quot;&gt;Encode::Supported&lt;/a&gt;, is useful here.) If the Pod parser cannot decode the declared encoding, it should emit a warning and may abort parsing the document altogether.</source>
          <target state="translated">、これは&lt;a href=&quot;encode&quot;&gt;Encodeが&lt;/a&gt;認識するエンコーディング名である必要があります。（Encode &lt;a href=&quot;Encode::Supported&quot;&gt;:: Supported&lt;/a&gt;にあるEncodeのサポートされているエンコーディングのリストは、ここで役立ちます。）ポッドパーサーが宣言されたエンコーディングをデコードできない場合、警告を発し、ドキュメントの解析を完全に中止する可能性があります。</target>
        </trans-unit>
        <trans-unit id="86643bdbf232568e22729fc55a9633ebd6eca7bc" translate="yes" xml:space="preserve">
          <source>, which must be an encoding name that &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; recognizes. (Encode's list of supported encodings, in &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt;, is useful here.) If the Pod parser cannot decode the declared encoding, it should emit a warning and may abort parsing the document altogether.</source>
          <target state="translated">、これは&lt;a href=&quot;encode&quot;&gt;Encodeが&lt;/a&gt;認識するエンコーディング名である必要があります。（Encode &lt;a href=&quot;encode/supported&quot;&gt;:: Supported&lt;/a&gt;にあるEncodeのサポートされているエンコーディングのリストは、ここで役立ちます。）ポッドパーサーが宣言されたエンコーディングをデコードできない場合、警告を発行し、ドキュメントの解析を完全に中止することがあります。</target>
        </trans-unit>
        <trans-unit id="6946244e23fae74ad07a1325f15207b7d2a7623a" translate="yes" xml:space="preserve">
          <source>, which must be of type &lt;code&gt;STRLEN&lt;/code&gt; . Evaluates</source>
          <target state="translated">これは、タイプが &lt;code&gt;STRLEN&lt;/code&gt; である必要があります。評価する</target>
        </trans-unit>
        <trans-unit id="1b3bfca1e6560c4b294dd00bf14e384c23b6db35" translate="yes" xml:space="preserve">
          <source>, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter. On some systems $0 doesn't always contain the full pathname, so the &lt;a href=&quot;#-S&quot;&gt;&quot;-S&quot;&lt;/a&gt; tells Perl to search for the program if necessary. After Perl locates the program, it parses the lines and ignores them because the variable $running_under_some_shell is never true. If the program will be interpreted by csh, you will need to replace &lt;code&gt;${1+&quot;$@&quot;}&lt;/code&gt; with &lt;code&gt;$*&lt;/code&gt;, even though that doesn't understand embedded spaces (and such) in the argument list. To start up</source>
          <target state="translated">、Perlプログラムをシェルスクリプトとして実行しようとします。シェルは2行目を通常のシェルコマンドとして実行し、Perlインタープリターを起動します。一部のシステムでは、$ 0に常にフルパス名が含まれているとは限らないため、&lt;a href=&quot;#-S&quot;&gt;「-S」&lt;/a&gt;はPerlに必要に応じてプログラムを検索するように指示します。 Perlはプログラムを見つけた後、行を解析して無視します。これは、変数$ running_under_some_shellがtrueになることはないためです。プログラムがcshによって解釈される場合は、引数リストの埋め込みスペース（など）を理解していなくても、 &lt;code&gt;${1+&quot;$@&quot;}&lt;/code&gt; を &lt;code&gt;$*&lt;/code&gt; に置き換える必要があります。起動するには</target>
        </trans-unit>
        <trans-unit id="d6c4d6b2342d9336a15bff4441fdc806ef9f1dda" translate="yes" xml:space="preserve">
          <source>, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter. On some systems $0 doesn't always contain the full pathname, so the &lt;b&gt;-S&lt;/b&gt; tells Perl to search for the program if necessary. After Perl locates the program, it parses the lines and ignores them because the variable $running_under_some_shell is never true. If the program will be interpreted by csh, you will need to replace &lt;code&gt;${1+&quot;$@&quot;}&lt;/code&gt; with &lt;code&gt;$*&lt;/code&gt; , even though that doesn't understand embedded spaces (and such) in the argument list. To start up</source>
          <target state="translated">、Perlプログラムをシェルスクリプトとして実行しようとします。シェルは2行目を通常のシェルコマンドとして実行し、Perlインタープリターを起動します。一部のシステムでは、$ 0が常にフルパス名を含むとは限らないため、&lt;b&gt;-S&lt;/b&gt;は、必要に応じてプログラムを検索するようにPerlに指示します。変数$ running_under_some_shellは決してtrueではないため、Perlはプログラムを検出すると、行を解析して無視します。プログラムがcshによって解釈される場合は、引数リストの埋め込みスペース（など）を理解できない場合でも、 &lt;code&gt;${1+&quot;$@&quot;}&lt;/code&gt; を &lt;code&gt;$*&lt;/code&gt; に置き換える必要があります。起動するには</target>
        </trans-unit>
        <trans-unit id="d03971d8e8f6aae96dc846db2bbccfa1c43aa02c" translate="yes" xml:space="preserve">
          <source>, which processes the command line options, sets up any statically linked XS modules, opens the program and calls &lt;code&gt;yyparse&lt;/code&gt; to parse it.</source>
          <target state="translated">コマンドラインオプションを処理し、静的にリンクされたXSモジュールをセットアップし、プログラムを開き、 &lt;code&gt;yyparse&lt;/code&gt; を呼び出してそれを解析します。</target>
        </trans-unit>
        <trans-unit id="d38a80b5f16db8cd8592888fcbc6ecb5cbfb16e6" translate="yes" xml:space="preserve">
          <source>, which provides a core to which the Perl executable image and all Perl extensions are linked. It is generally located via the logical name</source>
          <target state="translated">、Perl実行可能イメージとすべてのPerl拡張がリンクされているコアを提供します。通常は論理名を介して配置されます</target>
        </trans-unit>
        <trans-unit id="5d983c580d2a071fc02ee59631c5c9b624e3d132" translate="yes" xml:space="preserve">
          <source>, which requires that all applications use its LSP but which is not IFS-compatible, because clearly Perl will normally avoid using such an LSP.</source>
          <target state="translated">すべてのアプリケーションがLSPを使用する必要がありますが、IFS互換ではありません。Perlは通常、そのようなLSPの使用を避けているためです。</target>
        </trans-unit>
        <trans-unit id="8ae6e3dda98fae8d31622d67dcd619e9e43cefbe" translate="yes" xml:space="preserve">
          <source>, which shall not modify any input argument, and</source>
          <target state="translated">、これは入力引数を変更しません。</target>
        </trans-unit>
        <trans-unit id="b3cd0cd1142152776fc2bac2a2e89c7f139dc35e" translate="yes" xml:space="preserve">
          <source>, which should be a full pathname found amongst the %INC values.</source>
          <target state="translated">、これは％INC値の中で見つかった完全パス名である必要があります。</target>
        </trans-unit>
        <trans-unit id="9149915d9aff75a334b3f754d9220c360d8f395f" translate="yes" xml:space="preserve">
          <source>, which will be open in a manner compatible with the supplied mode string, the call is thus equivalent to &lt;code&gt;PerlIO_fdopen&lt;/code&gt; . In this case</source>
          <target state="translated">、これは提供されたモード文字列と互換性のある方法で開かれるため、呼び出しは &lt;code&gt;PerlIO_fdopen&lt;/code&gt; と同等です。この場合</target>
        </trans-unit>
        <trans-unit id="dd6c0f5b6ad990f4eef424bfc58e42542222405e" translate="yes" xml:space="preserve">
          <source>, which will be open in a manner compatible with the supplied mode string, the call is thus equivalent to &lt;code&gt;PerlIO_fdopen&lt;/code&gt;. In this case</source>
          <target state="translated">、提供されたモード文字列と互換性のある方法で開かれるため、呼び出しは &lt;code&gt;PerlIO_fdopen&lt;/code&gt; と同等です。この場合</target>
        </trans-unit>
        <trans-unit id="bfd3b2c159dbde7db4131aab3fae489835bc0cb5" translate="yes" xml:space="preserve">
          <source>, which you should copy &lt;b&gt;outside&lt;/b&gt; of the repository, as the bisect process will reset the state to a clean checkout as it runs. The instructions below assume that you copied it as</source>
          <target state="translated">、これはリポジトリの&lt;b&gt;外部&lt;/b&gt;にコピーする必要があります。bisectプロセスは、実行時に状態をクリーンチェックアウトにリセットするためです。以下の手順は、次のようにコピーしたことを前提としています</target>
        </trans-unit>
        <trans-unit id="e29affdf4265c07a24e87380ae0fc86e7811b273" translate="yes" xml:space="preserve">
          <source>, which you'll also need) will reside in a directory that looks like this:</source>
          <target state="translated">も必要です）は、次のようなディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="b91b3346b580b5a72bcf19156716e69a40617494" translate="yes" xml:space="preserve">
          <source>, whichever is writable.</source>
          <target state="translated">、どちらでも書き込み可能です。</target>
        </trans-unit>
        <trans-unit id="1521c3e5024fb9d201b1510098752e0fbfadaa8f" translate="yes" xml:space="preserve">
          <source>, whichever is writable. For example Solaris and IRIX system may prefer &lt;code&gt;&quot;stream&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;unix&quot;&lt;/code&gt; .</source>
          <target state="translated">、どちらでも書き込み可能です。たとえば、SolarisおよびIRIXシステムでは、 &lt;code&gt;&quot;unix&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;stream&quot;&lt;/code&gt; が優先される場合があります。</target>
        </trans-unit>
        <trans-unit id="df4fa17a3a3ee864c8ff01e92b96136a59a67d85" translate="yes" xml:space="preserve">
          <source>, whichever is writable. For example Solaris and IRIX system may prefer &lt;code&gt;&quot;stream&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;unix&quot;&lt;/code&gt;.</source>
          <target state="translated">、書き込み可能な方。たとえば、SolarisおよびIRIXシステムは、 &lt;code&gt;&quot;unix&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;stream&quot;&lt;/code&gt; 優先する場合があります。</target>
        </trans-unit>
        <trans-unit id="af1e6ea7c63a016f19ff1f20a75d322ca9d606dc" translate="yes" xml:space="preserve">
          <source>, will copy the files onto the NetWare server.</source>
          <target state="translated">、ファイルをNetWareサーバーにコピーします。</target>
        </trans-unit>
        <trans-unit id="542c63558f82cc60301de087610ae8d702c1444e" translate="yes" xml:space="preserve">
          <source>, will the expression be treated as boolean. Otherwise, smartmatching is used.</source>
          <target state="translated">、式はブール値として扱われます。それ以外の場合は、スマートマッチングが使用されます。</target>
        </trans-unit>
        <trans-unit id="434f72658ad0db42fd472dfe71b1d976ec669e77" translate="yes" xml:space="preserve">
          <source>, with a function</source>
          <target state="translated">、関数付き</target>
        </trans-unit>
        <trans-unit id="ff76a65744d509bad3b866f1e9b378a7560d811c" translate="yes" xml:space="preserve">
          <source>, with one command (and no other files) it's easy to find out</source>
          <target state="translated">、1つのコマンド（他のファイルなし）で簡単に見つけることができます</target>
        </trans-unit>
        <trans-unit id="22b8ca3ac41e774d45998884fc92354c868b6717" translate="yes" xml:space="preserve">
          <source>, with the result encoded as a Base64 string. Multiple</source>
          <target state="translated">、結果はBase64文字列としてエンコードされます。複数</target>
        </trans-unit>
        <trans-unit id="677a292feedbf48a082a00acc87c06021be08f63" translate="yes" xml:space="preserve">
          <source>, with the result encoded as a binary string. Multiple</source>
          <target state="translated">、結果はバイナリ文字列としてエンコードされます。複数</target>
        </trans-unit>
        <trans-unit id="2a314e18b1b4fa535233316b8d18d5a2b276138b" translate="yes" xml:space="preserve">
          <source>, with the result encoded as a hexadecimal string. Multiple</source>
          <target state="translated">、結果は16進数の文字列としてエンコードされます。複数</target>
        </trans-unit>
        <trans-unit id="b99d3c828cce13fde4656fc0fc0105ea617a8091" translate="yes" xml:space="preserve">
          <source>, yet another utility under Encode/bin directory.</source>
          <target state="translated">、Encode / binディレクトリの下のさらに別のユーティリティ。</target>
        </trans-unit>
        <trans-unit id="51f521f34eb9dfa708aba7876dbcd25e0b33259e" translate="yes" xml:space="preserve">
          <source>, you are encouraged to use &lt;code&gt;catpath()&lt;/code&gt; (see below).</source>
          <target state="translated">、 &lt;code&gt;catpath()&lt;/code&gt; を使用することをお勧めします（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="50c611f29a4f4c3132ca368f4ed25bf3706ad044" translate="yes" xml:space="preserve">
          <source>, you are encouraged to use &lt;code&gt;catpath()&lt;/code&gt; to concatenate</source>
          <target state="translated">、 &lt;code&gt;catpath()&lt;/code&gt; を使用して連結することをお勧めします</target>
        </trans-unit>
        <trans-unit id="6e0466cebd730e6f201e1dc3e0fa65a5e7288ff5" translate="yes" xml:space="preserve">
          <source>, you can often gain a 10-25% performance benefit by rebuilding it to link with a static libc.a instead. This will make a bigger perl executable, but your Perl programs (and programmers) may thank you for it. See the</source>
          <target state="translated">、代わりに静的libc.aとリンクするように再構築することで、10〜25％のパフォーマンス上の利点を得ることができます。これにより、より大きなperl実行可能ファイルが作成されますが、Perlプログラム（およびプログラマー）はそれを感謝する場合があります。を参照してください</target>
        </trans-unit>
        <trans-unit id="1d331b88bfc2c65e1619a12d857298426cd92d30" translate="yes" xml:space="preserve">
          <source>, you can recompile with &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; , which will cause the addresses of all those leaked SVs to be dumped along with details as to where each SV was originally allocated. This information is also displayed by Devel::Peek. Note that the extra details recorded with each SV increases memory usage, so it shouldn't be used in production environments. It also converts &lt;code&gt;new_SV()&lt;/code&gt; from a macro into a real function, so you can use your favourite debugger to discover where those pesky SVs were allocated.</source>
          <target state="translated">、 &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; を使用して再コンパイルできます。これにより、リークされたすべてのSVのアドレスが、各SVが最初に割り当てられた場所に関する詳細とともにダンプされます。この情報は、Devel :: Peekによっても表示されます。各SVで記録される追加の詳細によりメモリ使用量が増えるため、本番環境では使用しないでください。また、 &lt;code&gt;new_SV()&lt;/code&gt; をマクロから実際の関数に変換するので、お気に入りのデバッガーを使用して、厄介なSVが割り当てられた場所を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="8ff7a955490d6c2be94e15abefb85a6178673401" translate="yes" xml:space="preserve">
          <source>, you can recompile with &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt;, (&lt;code&gt;Configure -Accflags=-DDEBUG_LEAKING_SCALARS&lt;/code&gt;), which will cause the addresses of all those leaked SVs to be dumped along with details as to where each SV was originally allocated. This information is also displayed by Devel::Peek. Note that the extra details recorded with each SV increases memory usage, so it shouldn't be used in production environments. It also converts &lt;code&gt;new_SV()&lt;/code&gt; from a macro into a real function, so you can use your favourite debugger to discover where those pesky SVs were allocated.</source>
          <target state="translated">、 &lt;code&gt;-DDEBUG_LEAKING_SCALARS&lt;/code&gt; を使用して再コンパイルできます（ &lt;code&gt;Configure -Accflags=-DDEBUG_LEAKING_SCALARS&lt;/code&gt; ）。これにより、リークされたすべてのSVのアドレスが、各SVが最初に割り当てられた場所に関する詳細とともにダンプされます。この情報は、Devel :: Peekによっても表示されます。各SVで記録された追加の詳細はメモリ使用量を増やすため、実稼働環境では使用しないでください。また、 &lt;code&gt;new_SV()&lt;/code&gt; をマクロから実際の関数に変換するため、お気に入りのデバッガーを使用して、厄介なSVが割り当てられた場所を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="16c36a989390f694a86b3a7b319006e18a55b93a" translate="yes" xml:space="preserve">
          <source>, you could offload all that merging and sorting into your operating system's own &lt;code&gt;sort&lt;/code&gt; command by opening a pipe directly into its output, and get to work that much faster.</source>
          <target state="translated">、パイプを出力に直接開くことで、オペレーティングシステム独自の &lt;code&gt;sort&lt;/code&gt; コマンドへのすべてのマージと並べ替えをオフロードし、はるかに高速に作業を開始できます。</target>
        </trans-unit>
        <trans-unit id="b3880ec30cc2d5ebf349c1017f97c2cb7881519a" translate="yes" xml:space="preserve">
          <source>, you do not need to change anything. However, for perl to find the library if you use a different path, you need to &lt;code&gt;set PERLLIB_PREFIX&lt;/code&gt; in</source>
          <target state="translated">、何も変更する必要はありません。ただし、別のパスを使用している場合にperlがライブラリを見つけるには、 &lt;code&gt;set PERLLIB_PREFIX&lt;/code&gt; を次のように設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="022efe6a8ac93e208088ce727015f5bc2ef4dbd9" translate="yes" xml:space="preserve">
          <source>, you may need to be extra careful when running Configure to not to confuse Configure and Perl about which libraries to use. Being confused will show up for example as &quot;dyld&quot; errors about symbol problems, for example during &quot;make test&quot;. The safest bet is to run Configure as</source>
          <target state="translated">、使用するライブラリについてConfigureとPerlを混同しないように、Configureを実行するときは特に注意する必要があります。混乱していると、たとえば「make test」中など、シンボルの問題に関する「dyld」エラーとして表示されます。最も安全な方法は、Configure asを実行することです。</target>
        </trans-unit>
        <trans-unit id="021d52a6c6807f7976d981e9998715c511d43a0f" translate="yes" xml:space="preserve">
          <source>, you may need to reboot in between. Check EMX runtime by running</source>
          <target state="translated">、間にリブートする必要がある場合があります。実行してEMXランタイムを確認する</target>
        </trans-unit>
        <trans-unit id="5e7e307de07db29b07b1256c40e790d188182a74" translate="yes" xml:space="preserve">
          <source>, you may prefer to read &lt;a href=&quot;perldebguts&quot;&gt;perldebguts&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;perldebguts&quot;&gt;perldebguts&lt;/a&gt;を読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a357b8113a9e22a3eef60456621417078f84daeb" translate="yes" xml:space="preserve">
          <source>, you must explicitly &lt;code&gt;share()&lt;/code&gt; variables between the threads.</source>
          <target state="translated">、スレッド間で変数を明示的に &lt;code&gt;share()&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a4cfad2d578d98a081e5b91f17f3d149edfc150" translate="yes" xml:space="preserve">
          <source>, you need to change the path following the &lt;code&gt;-I&lt;/code&gt; .</source>
          <target state="translated">、 &lt;code&gt;-I&lt;/code&gt; に続くパスを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="35017a6e3c131f7bdfef6a610d63fbd565947e16" translate="yes" xml:space="preserve">
          <source>, you need to change the path following the &lt;code&gt;-I&lt;/code&gt;.</source>
          <target state="translated">、 &lt;code&gt;-I&lt;/code&gt; に続くパスを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="a08a1ac95983f38539380ed39b4f27bf1fbb7125" translate="yes" xml:space="preserve">
          <source>, you probably don't expect it to run on both Unix and CP/M.)</source>
          <target state="translated">、おそらく、UnixとCP / Mの両方で実行されるとは思わないでしょう。）</target>
        </trans-unit>
        <trans-unit id="a2d62578b1a9440577c8f95b2ea11ee98fbc944b" translate="yes" xml:space="preserve">
          <source>, you should always try to use</source>
          <target state="translated">、常に使用するようにしてください</target>
        </trans-unit>
        <trans-unit id="80d72f99e8c254f3d7a046575ea8e94531af8c78" translate="yes" xml:space="preserve">
          <source>, you should expect a bit of whimsy.</source>
          <target state="translated">、あなたは少し気まぐれなことを期待するべきです。</target>
        </trans-unit>
        <trans-unit id="87c1c3490c4a0eecd8de20c3cc69883c07b4ba2e" translate="yes" xml:space="preserve">
          <source>, you will need to run &lt;code&gt;make regen_headers&lt;/code&gt; to force a rebuild of</source>
          <target state="translated">、強制的に再構築するには &lt;code&gt;make regen_headers&lt;/code&gt; を実行する必要があります</target>
        </trans-unit>
        <trans-unit id="fe63382b1e40b321c4efec02e51e7ac510a9674a" translate="yes" xml:space="preserve">
          <source>, you will see that it returns an &lt;code&gt;ADDOP&lt;/code&gt; token.</source>
          <target state="translated">、 &lt;code&gt;ADDOP&lt;/code&gt; トークンが返されることがわかります。</target>
        </trans-unit>
        <trans-unit id="1d419e3c5bc7f5ea63240258fff8fb0654e4cb8f" translate="yes" xml:space="preserve">
          <source>, you'll have to rebuild Perl to incorporate a new extension. You should edit the main</source>
          <target state="translated">、新しい拡張機能を組み込むには、Perlを再構築する必要があります。メインを編集する必要があります</target>
        </trans-unit>
        <trans-unit id="ce52b2b3c8d31f579675006498299716435e428b" translate="yes" xml:space="preserve">
          <source>, you'll probably need to subclass &lt;a href=&quot;TAP::Parser::Grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt; too, or else it'll never get used.</source>
          <target state="translated">、おそらく&lt;a href=&quot;TAP::Parser::Grammar&quot;&gt;TAP :: Parser :: Grammar&lt;/a&gt;もサブクラス化する必要があります。そうしないと、使用されません。</target>
        </trans-unit>
        <trans-unit id="fdf357edc958470810c296ee519d97c4d17b676d" translate="yes" xml:space="preserve">
          <source>, you'll probably need to subclass &lt;a href=&quot;grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt; too, or else it'll never get used.</source>
          <target state="translated">、おそらく&lt;a href=&quot;grammar&quot;&gt;TAP :: Parser :: Grammar&lt;/a&gt;もサブクラス化する必要があります。そうしないと、決して使用されません。</target>
        </trans-unit>
        <trans-unit id="8ce53fda25a5521f4426b98fc34aff8c177f37f2" translate="yes" xml:space="preserve">
          <source>, you'll see the results of using</source>
          <target state="translated">、使用の結果が表示されます</target>
        </trans-unit>
        <trans-unit id="3085b957b5d3ec5b39e504d18f16596194b3898c" translate="yes" xml:space="preserve">
          <source>, your issue is likely to receive more attention. You may want to start with &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt; for pointers to common traps that new (and experienced) Perl programmers run into.</source>
          <target state="translated">、あなたの問題はより多くの注目を受ける可能性があります。新しい（そして経験豊富な）Perlプログラマーが実行する一般的なトラップへのポインターについては、&lt;b&gt;perldoc &lt;/b&gt;&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt;から始めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="001b22edb2fbe2a87d8cf96a1c82ed43978ed889" translate="yes" xml:space="preserve">
          <source>,...) was.</source>
          <target state="translated">、...）だった。</target>
        </trans-unit>
        <trans-unit id="ad72be5c0d7fc1b8f77fe6354bc971428558be05" translate="yes" xml:space="preserve">
          <source>,...params...) can give up with:</source>
          <target state="translated">、... params ...）は次のように諦めることができます：</target>
        </trans-unit>
        <trans-unit id="3ec37b4898d8fa711d06edd7a451aef6a2e60168" translate="yes" xml:space="preserve">
          <source>,...params...) gives up and calls:</source>
          <target state="translated">、... params ...）あきらめて呼び出します：</target>
        </trans-unit>
        <trans-unit id="722cba868d267a82e7010bf92e684897c598bb02" translate="yes" xml:space="preserve">
          <source>,as that program depends on functionality which the test file itself is testing.</source>
          <target state="translated">そのプログラムは、テストファイル自体がテストしている機能に依存しているためです。</target>
        </trans-unit>
        <trans-unit id="3bc15c8aae3e4124dd409035f32ea2fd6835efc9" translate="yes" xml:space="preserve">
          <source>-</source>
          <target state="translated">-</target>
        </trans-unit>
        <trans-unit id="92ec08014ef6e3572ce18cd210390b5494877bb0" translate="yes" xml:space="preserve">
          <source>- Home directory.</source>
          <target state="translated">-ホームディレクトリ。</target>
        </trans-unit>
        <trans-unit id="bc43692f24635fad130f4c0b7605b093da1c6edc" translate="yes" xml:space="preserve">
          <source>- Root for accessing some special files, i.e.</source>
          <target state="translated">-いくつかの特別なファイルにアクセスするためのルート、すなわち</target>
        </trans-unit>
        <trans-unit id="3173574745b2a94d3ecbd9aad3aac008e1c75cf4" translate="yes" xml:space="preserve">
          <source>- Rows/cols for console.</source>
          <target state="translated">-コンソールの行/列。</target>
        </trans-unit>
        <trans-unit id="2a8384c45900eafb56b7372e12c87d95403210dd" translate="yes" xml:space="preserve">
          <source>- Size for console font.</source>
          <target state="translated">-コンソールフォントのサイズ。</target>
        </trans-unit>
        <trans-unit id="ec35a1fcb1bf308cd068a9bee9a8176d037f75a7" translate="yes" xml:space="preserve">
          <source>- Tempdir.</source>
          <target state="translated">-Tempdir。</target>
        </trans-unit>
        <trans-unit id="46c7d034edab58069ac51b4607fbe57881cd6eda" translate="yes" xml:space="preserve">
          <source>- make official location for installed *distributions*, which can contain tests, etc.</source>
          <target state="translated">-インストールされた*ディストリビューション*の公式の場所を作成します。これにはテストなどを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a58249eb112a301215e90f4449910a61cde2399f" translate="yes" xml:space="preserve">
          <source>- may fail on recent cygwin installs.</source>
          <target state="translated">-最近のcygwinのインストールで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="aa47440f5821f7fcd42136d522f634642510d036" translate="yes" xml:space="preserve">
          <source>- most probably RSX - decided to implement.</source>
          <target state="translated">-おそらくRSX-実装することにしました。</target>
        </trans-unit>
        <trans-unit id="586ed566ba05975ffadf370f1c6ecf01acb6d01a" translate="yes" xml:space="preserve">
          <source>- non-zero if the current XSUB has any aliases declared with &lt;code&gt;ALIAS&lt;/code&gt; .</source>
          <target state="translated">-現在のXSUBに &lt;code&gt;ALIAS&lt;/code&gt; で宣言されたエイリアスがある場合はゼロ以外。</target>
        </trans-unit>
        <trans-unit id="36721d3a2a547695d4793029011114667064f57d" translate="yes" xml:space="preserve">
          <source>- non-zero if the current XSUB has any aliases declared with &lt;code&gt;ALIAS&lt;/code&gt;.</source>
          <target state="translated">-現在のXSUBに &lt;code&gt;ALIAS&lt;/code&gt; で宣言されたエイリアスがある場合はゼロ以外。</target>
        </trans-unit>
        <trans-unit id="c30b5265745c008d5265e386cbdf1dab87c47bde" translate="yes" xml:space="preserve">
          <source>- or with Perl!</source>
          <target state="translated">-またはPerlで！</target>
        </trans-unit>
        <trans-unit id="4e30556a5f49da4f43234bec9f7aaab8f8cf28e1" translate="yes" xml:space="preserve">
          <source>- possibly separate out test-time prereqs, complications include: can tests be meaningfully preserved for later running? are test-time prereqs in addition to build-time, or exclusive?</source>
          <target state="translated">-テスト時の前提条件を分離する可能性があります。複雑な問題は次のとおりです。後で実行するためにテストを有意義に保存できますか？ビルド時間に加えてテスト時間の前提条件はありますか、それとも排他的ですか？</target>
        </trans-unit>
        <trans-unit id="6681529bb3ccd36ba6275ff29adce31783c01d2c" translate="yes" xml:space="preserve">
          <source>- see &lt;a href=&quot;#Indexing-distributions-a-la-PAUSE&quot;&gt;&quot;Indexing distributions a la PAUSE&quot;&lt;/a&gt; in the implementors notes for more information.</source>
          <target state="translated">-詳細については、実装者ノートの&lt;a href=&quot;#Indexing-distributions-a-la-PAUSE&quot;&gt;「一時停止中のディストリビューションのインデックス作成」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5a10b5776a842eeeedbba99e8e17c5c9a17237c7" translate="yes" xml:space="preserve">
          <source>- see &lt;a href=&quot;https://github.com/Perl/perl5/issues/10750&quot;&gt;https://github.com/Perl/perl5/issues/10750&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Perl/perl5/issues/10750&quot;&gt;-https：//github.com/Perl/perl5/issues/10750を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="6a5e7bde75d15d42f045f6c58b079f3857fc8edd" translate="yes" xml:space="preserve">
          <source>- see &lt;a href=&quot;https://rt.perl.org/Ticket/Display.html?id=78502&quot;&gt;https://rt.perl.org/Ticket/Display.html?id=78502&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rt.perl.org/Ticket/Display.html?id=78502&quot;&gt;-https://rt.perl.org/Ticket/Display.html?id=78502を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="9eb095bd84343fa039df7c15c40c25123fcea513" translate="yes" xml:space="preserve">
          <source>- the argument stack offset of the argument. ie. 0 for the first argument, etc.</source>
          <target state="translated">-引数の引数スタックオフセット。すなわち。最初の引数は0など</target>
        </trans-unit>
        <trans-unit id="b6fd27381e71b1b032ec8f7e7eff0c7d9ea88d03" translate="yes" xml:space="preserve">
          <source>- the full name of the XSUB, with including the &lt;code&gt;PACKAGE&lt;/code&gt; name, with any &lt;code&gt;PREFIX&lt;/code&gt; stripped. This is the non-ALIAS name.</source>
          <target state="translated">-XSUBの完全な名前。 &lt;code&gt;PACKAGE&lt;/code&gt; 名を含み、 &lt;code&gt;PREFIX&lt;/code&gt; はすべて削除されています。これは非エイリアス名です。</target>
        </trans-unit>
        <trans-unit id="ac306b045d6143c752e53a46375c4935a0210024" translate="yes" xml:space="preserve">
          <source>- the name of the input or output variable, eg. RETVAL for return values.</source>
          <target state="translated">-入力変数または出力変数の名前。戻り値のRETVAL。</target>
        </trans-unit>
        <trans-unit id="98a3328bb076d8bd2503f9a31ae579ee61669de1" translate="yes" xml:space="preserve">
          <source>- the package specified by the most recent &lt;code&gt;PACKAGE&lt;/code&gt; keyword.</source>
          <target state="translated">-最新の &lt;code&gt;PACKAGE&lt;/code&gt; キーワードで指定されたパッケージ。</target>
        </trans-unit>
        <trans-unit id="f124ed3063522cd2ff8b8f4829e2a95edb5ad519" translate="yes" xml:space="preserve">
          <source>- the raw C type of the parameter, any &lt;code&gt;:&lt;/code&gt; replaced with &lt;code&gt;_&lt;/code&gt; . e.g. for a type of &lt;code&gt;Foo::Bar&lt;/code&gt; ,</source>
          <target state="translated">-パラメータの生のCタイプ、any &lt;code&gt;:&lt;/code&gt; &lt;code&gt;_&lt;/code&gt; に置き換えられます。たとえば &lt;code&gt;Foo::Bar&lt;/code&gt; タイプの場合、</target>
        </trans-unit>
        <trans-unit id="ff9ef50c9a5f15c75392db11b12752cdcd7f93a8" translate="yes" xml:space="preserve">
          <source>- the raw C type of the parameter, any &lt;code&gt;:&lt;/code&gt; replaced with &lt;code&gt;_&lt;/code&gt;. e.g. for a type of &lt;code&gt;Foo::Bar&lt;/code&gt;,</source>
          <target state="translated">-パラメータの生のCタイプ、any &lt;code&gt;:&lt;/code&gt; は &lt;code&gt;_&lt;/code&gt; に置き換えられます。たとえば、 &lt;code&gt;Foo::Bar&lt;/code&gt; タイプの場合</target>
        </trans-unit>
        <trans-unit id="76a588dc109d4b97adb8746f1e4fa8bce8a72431" translate="yes" xml:space="preserve">
          <source>- the stack entry, that the parameter is input from or output to, e.g. &lt;code&gt;ST(0)&lt;/code&gt;</source>
          <target state="translated">-パラメータが入力または出力されるスタックエントリ。例： &lt;code&gt;ST(0)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9cef40f084c3c3cb1207d8771f055a5a821202e" translate="yes" xml:space="preserve">
          <source>- the supplied type with &lt;code&gt;*&lt;/code&gt; replaced with &lt;code&gt;Ptr&lt;/code&gt; . e.g. for a type of &lt;code&gt;Foo*&lt;/code&gt; ,</source>
          <target state="translated">- &lt;code&gt;*&lt;/code&gt; が &lt;code&gt;Ptr&lt;/code&gt; に置き換えられた、指定されたタイプ。たとえば &lt;code&gt;Foo*&lt;/code&gt; タイプの場合、</target>
        </trans-unit>
        <trans-unit id="a2658124eb09e0e6dbc56f97854aaa96beef3464" translate="yes" xml:space="preserve">
          <source>- the supplied type with &lt;code&gt;*&lt;/code&gt; replaced with &lt;code&gt;Ptr&lt;/code&gt;. e.g. for a type of &lt;code&gt;Foo*&lt;/code&gt;,</source>
          <target state="translated">-提供されたタイプで、 &lt;code&gt;*&lt;/code&gt; が &lt;code&gt;Ptr&lt;/code&gt; に置き換えられています。たとえば、 &lt;code&gt;Foo*&lt;/code&gt; タイプの場合</target>
        </trans-unit>
        <trans-unit id="c85eb1c4ce6755d438f46363a51bca99a55296fd" translate="yes" xml:space="preserve">
          <source>-%s is not implemented on a File::stat object</source>
          <target state="translated">-％sはFile :: statオブジェクトに実装されていません</target>
        </trans-unit>
        <trans-unit id="66bb4d83c0add62ff40fbc7293cb0e0652fe9572" translate="yes" xml:space="preserve">
          <source>-%s on unopened filehandle %s</source>
          <target state="translated">-開いていないファイルハンドル％sの％s</target>
        </trans-unit>
        <trans-unit id="a3d0e64f62d0aa67fc64844708eb009021bf6273" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Bless(</source>
          <target state="translated">-&amp;gt;Bless(</target>
        </trans-unit>
        <trans-unit id="f0722d974b50edb39d61682893cf91b3ae50c4aa" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Deepcopy(</source>
          <target state="translated">-&amp;gt;Deepcopy(</target>
        </trans-unit>
        <trans-unit id="5c0edfb04a76d90d803deb5fa319ba2663d74d18" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Deparse(</source>
          <target state="translated">-&amp;gt;Deparse(</target>
        </trans-unit>
        <trans-unit id="46853692fb69fcc992b6b4ff256e26998ad6aad6" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Dump</source>
          <target state="translated">-&amp;gt;Dump</target>
        </trans-unit>
        <trans-unit id="5784853989f6ebd5b873dce937c9d73bd2876587" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Dump(</source>
          <target state="translated">-&amp;gt;Dump(</target>
        </trans-unit>
        <trans-unit id="dba6f17f00a3608b5502035af168005f1d2e47c7" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Freezer(</source>
          <target state="translated">-&amp;gt;Freezer(</target>
        </trans-unit>
        <trans-unit id="f1b9e5eef8b3fe06ef615011915677eb670538c6" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Indent(</source>
          <target state="translated">-&amp;gt;Indent(</target>
        </trans-unit>
        <trans-unit id="31b6bc539e0d7c7b5901a7311b172dd6898b322b" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Maxdepth(</source>
          <target state="translated">-&amp;gt;Maxdepth(</target>
        </trans-unit>
        <trans-unit id="2d566bc2e1d524d8205bee44364bc31e0a8e9197" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Maxrecurse(</source>
          <target state="translated">-&amp;gt;Maxrecurse(</target>
        </trans-unit>
        <trans-unit id="30c7c29da8a4c244b680992630d60ee9fd854104" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Names(</source>
          <target state="translated">-&amp;gt;Names(</target>
        </trans-unit>
        <trans-unit id="413ec10070e2ce7e4378ffb0f5cbabab43709ca5" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Pad(</source>
          <target state="translated">-&amp;gt;Pad(</target>
        </trans-unit>
        <trans-unit id="e06d02c9fdb1747ec2039cea96f30fea04b5b25b" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Pair(</source>
          <target state="translated">-&amp;gt;Pair(</target>
        </trans-unit>
        <trans-unit id="7e25804050e4aa77c61e8ee63bad263c485c56c6" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Purity(</source>
          <target state="translated">-&amp;gt;Purity(</target>
        </trans-unit>
        <trans-unit id="56a023253cf1c514dba0cbce82b8b3814335f445" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Quotekeys(</source>
          <target state="translated">-&amp;gt;Quotekeys(</target>
        </trans-unit>
        <trans-unit id="d0e96e7ee3eaa848b0019dd15c7b0898915ebead" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Reset</source>
          <target state="translated">-&amp;gt;Reset</target>
        </trans-unit>
        <trans-unit id="f6e1d3513dca6e864199d6f50d923904e922a65d" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Seen(</source>
          <target state="translated">-&amp;gt;Seen(</target>
        </trans-unit>
        <trans-unit id="c1f9dd12120a54d49e86f3d8be13375c987724d2" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Sortkeys(</source>
          <target state="translated">-&amp;gt;Sortkeys(</target>
        </trans-unit>
        <trans-unit id="d589d85ec436baef14dce8d2143c792a949aba0d" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Sparseseen(</source>
          <target state="translated">-&amp;gt;Sparseseen(</target>
        </trans-unit>
        <trans-unit id="0057fcbaafc36dc5c0f396e5d6075530bfac1848" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Terse(</source>
          <target state="translated">-&amp;gt;Terse(</target>
        </trans-unit>
        <trans-unit id="71b97fccb0554a000a087174f590ad69f5d41fc2" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Toaster(</source>
          <target state="translated">-&amp;gt;Toaster(</target>
        </trans-unit>
        <trans-unit id="73a061c2d64a288ee13a8c231396eeb85d92a7ce" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Trailingcomma(</source>
          <target state="translated">-&amp;gt;Trailingcomma(</target>
        </trans-unit>
        <trans-unit id="b282f78e8ba680fc5f27fc13dba94b8c3b531e79" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Useperl(</source>
          <target state="translated">-&amp;gt;Useperl(</target>
        </trans-unit>
        <trans-unit id="4c7197d6a5caad4a177ca1b9e2de81de03660a61" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Useqq(</source>
          <target state="translated">-&amp;gt;Useqq(</target>
        </trans-unit>
        <trans-unit id="52bbdbdc2d57eba80469c834be7d9a9ff43f4fd6" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Values(</source>
          <target state="translated">-&amp;gt;Values(</target>
        </trans-unit>
        <trans-unit id="36470c86321f280aefd62b4ed122aaace7e7a771" translate="yes" xml:space="preserve">
          <source>-&amp;gt;Varname(</source>
          <target state="translated">-&amp;gt;Varname(</target>
        </trans-unit>
        <trans-unit id="35fb17f9530c86268b78d97fdb827f559bc940eb" translate="yes" xml:space="preserve">
          <source>-&amp;gt;cat_decode($destination, $octets, $offset, $terminator [,$check])</source>
          <target state="translated">-&amp;gt;cat_decode($destination, $octets, $offset, $terminator [,$check])</target>
        </trans-unit>
        <trans-unit id="fb9daddffd9b981f6281405c1c04027e176594b0" translate="yes" xml:space="preserve">
          <source>-&amp;gt;decode($octets [,$check])</source>
          <target state="translated">-&amp;gt;decode($octets [,$check])</target>
        </trans-unit>
        <trans-unit id="acdd1abb9e34c25319ad5264ae027ffa2daac48c" translate="yes" xml:space="preserve">
          <source>-&amp;gt;dequeue()</source>
          <target state="translated">-&amp;gt;dequeue()</target>
        </trans-unit>
        <trans-unit id="4d7aefbfbe740bd78dd5d84db5e40f6cd5e76192" translate="yes" xml:space="preserve">
          <source>-&amp;gt;dequeue(COUNT)</source>
          <target state="translated">-&amp;gt;dequeue(COUNT)</target>
        </trans-unit>
        <trans-unit id="cea351acb884a2f074f92c6120b147de295f77ef" translate="yes" xml:space="preserve">
          <source>-&amp;gt;dequeue_nb()</source>
          <target state="translated">-&amp;gt;dequeue_nb()</target>
        </trans-unit>
        <trans-unit id="43a7e952ee08d9bccce1e2571162cd37a77f0862" translate="yes" xml:space="preserve">
          <source>-&amp;gt;dequeue_nb(COUNT)</source>
          <target state="translated">-&amp;gt;dequeue_nb(COUNT)</target>
        </trans-unit>
        <trans-unit id="d3cf565d010a4937dada68e1d74e0bb9e9dbd97e" translate="yes" xml:space="preserve">
          <source>-&amp;gt;dequeue_timed(TIMEOUT)</source>
          <target state="translated">-&amp;gt;dequeue_timed(TIMEOUT)</target>
        </trans-unit>
        <trans-unit id="d9c7bc7b9adebf5460dce967ce74b1f2ff09e645" translate="yes" xml:space="preserve">
          <source>-&amp;gt;dequeue_timed(TIMEOUT, COUNT)</source>
          <target state="translated">-&amp;gt;dequeue_timed(TIMEOUT, COUNT)</target>
        </trans-unit>
        <trans-unit id="f8ec4a2aaa5d89ee457c079d620114c01cedc119" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down()</source>
          <target state="translated">-&amp;gt;down()</target>
        </trans-unit>
        <trans-unit id="e280be72b096fcafbbcb6c26f34f8ec25ebec1f5" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down(NUMBER)</source>
          <target state="translated">-&amp;gt;down(NUMBER)</target>
        </trans-unit>
        <trans-unit id="959fcbb597f256ca764340b992b42a780d9b10eb" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down_force()</source>
          <target state="translated">-&amp;gt;down_force()</target>
        </trans-unit>
        <trans-unit id="d35de91fc5b908072b3cc1e653b4c1130a10f5bc" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down_force(NUMBER)</source>
          <target state="translated">-&amp;gt;down_force(NUMBER)</target>
        </trans-unit>
        <trans-unit id="54a3c00e26ade542b380f6fb5438c5d24a049741" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down_nb()</source>
          <target state="translated">-&amp;gt;down_nb()</target>
        </trans-unit>
        <trans-unit id="47efab5e5fdd527498b687a2c89c75cfe4286391" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down_nb(NUMBER)</source>
          <target state="translated">-&amp;gt;down_nb(NUMBER)</target>
        </trans-unit>
        <trans-unit id="baca2a6a08394e245be94c0cffcbeb363c878eeb" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down_timed(TIMEOUT)</source>
          <target state="translated">-&amp;gt;down_timed(TIMEOUT)</target>
        </trans-unit>
        <trans-unit id="0670ccbb5cb182c387c366ac98bb22a66cd4c593" translate="yes" xml:space="preserve">
          <source>-&amp;gt;down_timed(TIMEOUT, NUMBER)</source>
          <target state="translated">-&amp;gt;down_timed(TIMEOUT, NUMBER)</target>
        </trans-unit>
        <trans-unit id="bcacd24e0c5e07cc196ddcc04c77b538245a1e7c" translate="yes" xml:space="preserve">
          <source>-&amp;gt;encode($string [,$check])</source>
          <target state="translated">-&amp;gt;encode($string [,$check])</target>
        </trans-unit>
        <trans-unit id="a9594b538714946f3a717ab42bd21d5b9f5f9da1" translate="yes" xml:space="preserve">
          <source>-&amp;gt;end()</source>
          <target state="translated">-&amp;gt;end()</target>
        </trans-unit>
        <trans-unit id="9506efffd1fa092e7f0ef9285a047d84fe11f0fb" translate="yes" xml:space="preserve">
          <source>-&amp;gt;enqueue(LIST)</source>
          <target state="translated">-&amp;gt;enqueue(LIST)</target>
        </trans-unit>
        <trans-unit id="13d2304da8edb26745fca41a477e98754d871cc0" translate="yes" xml:space="preserve">
          <source>-&amp;gt;extract()</source>
          <target state="translated">-&amp;gt;extract()</target>
        </trans-unit>
        <trans-unit id="6a1f138b6ed0a54949392a723847801722030479" translate="yes" xml:space="preserve">
          <source>-&amp;gt;extract(INDEX)</source>
          <target state="translated">-&amp;gt;extract(INDEX)</target>
        </trans-unit>
        <trans-unit id="88e68114691d92bba226890e6c606ea2bb77adf0" translate="yes" xml:space="preserve">
          <source>-&amp;gt;extract(INDEX, COUNT)</source>
          <target state="translated">-&amp;gt;extract(INDEX, COUNT)</target>
        </trans-unit>
        <trans-unit id="d2af4afeef504e2df2e4aec2276c4e54268215a3" translate="yes" xml:space="preserve">
          <source>-&amp;gt;insert(INDEX, LIST)</source>
          <target state="translated">-&amp;gt;insert(INDEX, LIST)</target>
        </trans-unit>
        <trans-unit id="162565272f324c21e5dc34632217143c2c4d7582" translate="yes" xml:space="preserve">
          <source>-&amp;gt;limit</source>
          <target state="translated">-&amp;gt;limit</target>
        </trans-unit>
        <trans-unit id="6ef6b7dd1a5dafda1e37fde8e3e49c89a09bc0fa" translate="yes" xml:space="preserve">
          <source>-&amp;gt;mime_name</source>
          <target state="translated">-&amp;gt;mime_name</target>
        </trans-unit>
        <trans-unit id="973c06c03cb669af5e35f7d4dc026750fa74ebed" translate="yes" xml:space="preserve">
          <source>-&amp;gt;name</source>
          <target state="translated">-&amp;gt;name</target>
        </trans-unit>
        <trans-unit id="f18662b6b65a2a3a5333aaa90290cd700c1cbf21" translate="yes" xml:space="preserve">
          <source>-&amp;gt;needs_lines()</source>
          <target state="translated">-&amp;gt;needs_lines()</target>
        </trans-unit>
        <trans-unit id="f766e349e601c262c2ca67b30ebb9b52181666d2" translate="yes" xml:space="preserve">
          <source>-&amp;gt;new(</source>
          <target state="translated">-&amp;gt;new(</target>
        </trans-unit>
        <trans-unit id="842d04ade7a944de7b63fb54f6e1728efbe69fc7" translate="yes" xml:space="preserve">
          <source>-&amp;gt;new()</source>
          <target state="translated">-&amp;gt;new()</target>
        </trans-unit>
        <trans-unit id="fa657bcce0cc7fe5acc50debb5fcfb4b7bdb8fc4" translate="yes" xml:space="preserve">
          <source>-&amp;gt;new().</source>
          <target state="translated">-&amp;gt;new().</target>
        </trans-unit>
        <trans-unit id="ca35a1a50210567070c4cfbf08aae7e9cce265b2" translate="yes" xml:space="preserve">
          <source>-&amp;gt;new(LIST)</source>
          <target state="translated">-&amp;gt;new(LIST)</target>
        </trans-unit>
        <trans-unit id="d1bb77b97b0ebcefb9cde8c53c5e6317ebcb3cee" translate="yes" xml:space="preserve">
          <source>-&amp;gt;new(NUMBER)</source>
          <target state="translated">-&amp;gt;new(NUMBER)</target>
        </trans-unit>
        <trans-unit id="f16847bb22747fb7d3af10183f0cc2affeeec244" translate="yes" xml:space="preserve">
          <source>-&amp;gt;peek()</source>
          <target state="translated">-&amp;gt;peek()</target>
        </trans-unit>
        <trans-unit id="94046a4fbdc442bc7514e1de57b7ec0410d9595b" translate="yes" xml:space="preserve">
          <source>-&amp;gt;peek(INDEX)</source>
          <target state="translated">-&amp;gt;peek(INDEX)</target>
        </trans-unit>
        <trans-unit id="f4415914a21aacf867626430495be4c2a6f7745d" translate="yes" xml:space="preserve">
          <source>-&amp;gt;pending()</source>
          <target state="translated">-&amp;gt;pending()</target>
        </trans-unit>
        <trans-unit id="9e3cb4581bccdebf2e3e87af880d0d8f9663f1e5" translate="yes" xml:space="preserve">
          <source>-&amp;gt;perlio_ok()</source>
          <target state="translated">-&amp;gt;perlio_ok()</target>
        </trans-unit>
        <trans-unit id="03822a827b55f1cf6d57bfec6366994a07686513" translate="yes" xml:space="preserve">
          <source>-&amp;gt;renew</source>
          <target state="translated">-&amp;gt;renew</target>
        </trans-unit>
        <trans-unit id="ba668c651ef8229684bda7d2a29d614b424db530" translate="yes" xml:space="preserve">
          <source>-&amp;gt;renewed</source>
          <target state="translated">-&amp;gt;renewed</target>
        </trans-unit>
        <trans-unit id="5065a3018b9da2ea1d8c8103d02620427dcbdeba" translate="yes" xml:space="preserve">
          <source>-&amp;gt;up()</source>
          <target state="translated">-&amp;gt;up()</target>
        </trans-unit>
        <trans-unit id="77d9721fba7632668a4b6dd2e5d9907ce2faf9c3" translate="yes" xml:space="preserve">
          <source>-&amp;gt;up(NUMBER)</source>
          <target state="translated">-&amp;gt;up(NUMBER)</target>
        </trans-unit>
        <trans-unit id="2d61ca753759230bedde8cc40a1707eb6fef4cc2" translate="yes" xml:space="preserve">
          <source>-&amp;tau;&amp;omicron;&amp;mu;&amp;omicron;&amp;sigmaf;</source>
          <target state="translated">-&amp;tau;&amp;omicron;&amp;mu;&amp;omicron;&amp;sigmaf;</target>
        </trans-unit>
        <trans-unit id="c73415d27a902ee544cc97c1b064046aa369c3f6" translate="yes" xml:space="preserve">
          <source>-- First Networking Truth, RFC 1925</source>
          <target state="translated">-- First Networking Truth, RFC 1925</target>
        </trans-unit>
        <trans-unit id="d7ca49c228dda32aff593d5c4091da8d43e4d365" translate="yes" xml:space="preserve">
          <source>-- Harald Tveit Alvestrand, in RFC 1766, &quot;Tags for the Identification of Languages&quot;</source>
          <target state="translated">--Harald Tveit Alvestrand、RFC 1766、「言語の識別のためのタグ」</target>
        </trans-unit>
        <trans-unit id="7237e0004144ef0ea4f5752d2e69f5cec1dfdcf5" translate="yes" xml:space="preserve">
          <source>-- The Eighth Networking Truth, from RFC 1925</source>
          <target state="translated">--RFC1925の8番目のネットワーキングの真実</target>
        </trans-unit>
        <trans-unit id="99ad6b1974639a6ad49066e89047b76e4ed28ab6" translate="yes" xml:space="preserve">
          <source>-- merits special attention. When &lt;code&gt;$/&lt;/code&gt; is set to &lt;code&gt;&quot;&quot;&lt;/code&gt; and the entire file is read in with that setting, any sequence of consecutive newlines &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; at the beginning of the file is discarded. With the exception of the final record in the file, each sequence of characters ending in two or more newlines is treated as one record and is read in to end in exactly two newlines. If the last record in the file ends in zero or one consecutive newlines, that record is read in with that number of newlines. If the last record ends in two or more consecutive newlines, it is read in with two newlines like all preceding records.</source>
          <target state="translated">-特別な注意が必要です。ときに &lt;code&gt;$/&lt;/code&gt; に設定されている &lt;code&gt;&quot;&quot;&lt;/code&gt; とファイル全体がその設定と読まれ、連続した改行のいずれかのシーケンスは &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; 、ファイルの先頭に破棄されます。ファイルの最後のレコードを除いて、2つ以上の改行で終わる文字の各シーケンスは、1つのレコードとして扱われ、正確に2つの改行で終わるように読み込まれます。ファイルの最後のレコードが0行または1行連続の改行で終わる場合、そのレコードはその数の改行で読み込まれます。最後のレコードが2つ以上の連続する改行で終わる場合、先行するすべてのレコードと同様に2つの改行で読み込まれます。</target>
        </trans-unit>
        <trans-unit id="8e840705228b64bcf8b19330a928bbb3f1a9bf97" translate="yes" xml:space="preserve">
          <source>-- see 1.1.1 U+FFFE, UTS #35 (LDML) Part 5: Collation.</source>
          <target state="translated">-1.1.1 U + FFFE、UTS＃35（LDML）パート5：照合を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a6343e91df97da6c3ef931cb12700fb150ca898" translate="yes" xml:space="preserve">
          <source>-- see 2.4 Tailored noncharacter weights, UTS #35 (LDML) Part 5: Collation.</source>
          <target state="translated">--2.4調整された文字以外の重み、UTS＃35（LDML）パート5：照合を参照してください。</target>
        </trans-unit>
        <trans-unit id="05b2af8bbbc3b7f147e3e677dc52ca28d10188c3" translate="yes" xml:space="preserve">
          <source>-- see 3.12 Special-Purpose Commands, UTS #35 (LDML) Part 5: Collation.</source>
          <target state="translated">--3.12特殊用途コマンド、UTS＃35（LDML）パート5：照合を参照してください。</target>
        </trans-unit>
        <trans-unit id="585f1706ae18bcdc63ca722b491c6df4f0dde510" translate="yes" xml:space="preserve">
          <source>-- see 3.2.2 Alternate Weighting, version 8 of UTS #10</source>
          <target state="translated">-3.2.2代替重み付け、UTS＃10のバージョン8を参照</target>
        </trans-unit>
        <trans-unit id="3a8cc74f261c3d51571350ca2868bd10ef52769b" translate="yes" xml:space="preserve">
          <source>-- see 3.4 Backward Accents, UTS #10.</source>
          <target state="translated">-3.4後方アクセント、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="07d3a1d428fe3461f8d9c80032441d87278b9654" translate="yes" xml:space="preserve">
          <source>-- see 3.5 Rearrangement, UTS #10.</source>
          <target state="translated">-3.5再配置、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="5ee3edd6f51f1ea7fa47e8f98453c7d17eaea820" translate="yes" xml:space="preserve">
          <source>-- see 3.6 Variable Weighting, UTS #10.</source>
          <target state="translated">-3.6可変重み付け、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="cd9a420c85ac25af87c2565ef4416f3f6d6ba5b1" translate="yes" xml:space="preserve">
          <source>-- see 3.8 Default Unicode Collation Element Table, UTS #10.</source>
          <target state="translated">-3.8デフォルトのUnicode照合要素テーブル、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="a697b3f4a09d78b35f6bcaf2e5ac4b9c059bb5f9" translate="yes" xml:space="preserve">
          <source>-- see 3.8.2 Well-Formedness of the DUCET, 4.2 Produce Array, UTS #10.</source>
          <target state="translated">-3.8.2 DUCETの整形式、4.2 Produce Array、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b4d0507deac646ef7351b3ecb3ba07f748dfa61" translate="yes" xml:space="preserve">
          <source>-- see 4.1 Normalize, UTS #10.</source>
          <target state="translated">-4.1正規化、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="1cb743acecb2ab375f527cbafc47c0bbe3cabad0" translate="yes" xml:space="preserve">
          <source>-- see 4.3 Form Sort Key, UTS #10.</source>
          <target state="translated">-4.3フォームソートキー、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="cdabeb0028ef19f65abe871e2f9a75ea7690910d" translate="yes" xml:space="preserve">
          <source>-- see 5 Tailoring; 9.1 Allkeys File Format, UTS #10.</source>
          <target state="translated">-「5仕立て」を参照してください。9.1 Allkeysファイル形式、UTS＃10。</target>
        </trans-unit>
        <trans-unit id="5974db4d3861eb1b0da28b6b74de30e8c4d8e699" translate="yes" xml:space="preserve">
          <source>-- see 5.1 Parametric Tailoring, UTS #10.</source>
          <target state="translated">-5.1パラメトリック調整、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="3269e638f6b6a348970d76d447ba7f62ead918d9" translate="yes" xml:space="preserve">
          <source>-- see 5.14 Collation Elements, UTS #35.</source>
          <target state="translated">-5.14照合要素、UTS＃35を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba76558f052a895590fcc20803249a87f4f1a0f2" translate="yes" xml:space="preserve">
          <source>-- see 5.4 Preprocessing, UTS #10.</source>
          <target state="translated">-5.4前処理、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="e1aeb46917eaf8a02e52c345b2ef987cc9482829" translate="yes" xml:space="preserve">
          <source>-- see 6.3.3 Reducing the Repertoire, UTS #10.</source>
          <target state="translated">-6.3.3レパートリーの削減、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="a41b8036c6ccf65060a4662dca1e11556455fd38" translate="yes" xml:space="preserve">
          <source>-- see 6.3.4 Reducing the Repertoire, UTS #10.</source>
          <target state="translated">-6.3.4レパートリーの削減、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="0e79a7c892b3daf587f7a8b3225aabd06c6a3025" translate="yes" xml:space="preserve">
          <source>-- see 6.5 Avoiding Normalization, UTS #10.</source>
          <target state="translated">-6.5正規化の回避、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e7a49b0b256e287ad6547d96d0e85e9098bf1e7" translate="yes" xml:space="preserve">
          <source>-- see 6.6 Case Comparisons, UTS #10.</source>
          <target state="translated">-6.6ケース比較、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="921de278b720df4682ccde20a8a07d16048240f4" translate="yes" xml:space="preserve">
          <source>-- see 7.1 Derived Collation Elements, UTS #10.</source>
          <target state="translated">-7.1派生照合要素、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6189b5fe4e700972d5d0c46522002017f4b74b4" translate="yes" xml:space="preserve">
          <source>-- see 7.1.1 Handling Ill-Formed Code Unit Sequences, UTS #10.</source>
          <target state="translated">-7.1.1不正なコードユニットシーケンスの処理、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9b914c66e4ecd398f8a0454a4abbd3845ef4cdf" translate="yes" xml:space="preserve">
          <source>-- see 7.1.4 Trailing Weights, UTS #10.</source>
          <target state="translated">-7.1.4後続重み、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="152aade877325529ccd0de6317a273f029c69056" translate="yes" xml:space="preserve">
          <source>-- see 7.2 Tertiary Weight Table, UTS #10.</source>
          <target state="translated">-7.2三次重量表、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="800fd8691cb7a6b6fe172573590fed9e2fc75f8f" translate="yes" xml:space="preserve">
          <source>-- see A.3 Deterministic Comparison, UTS #10.</source>
          <target state="translated">-A.3確定的比較、UTS＃10を参照してください。</target>
        </trans-unit>
        <trans-unit id="70594be556b0b2420c5652817454d7573669880a" translate="yes" xml:space="preserve">
          <source>-- see suppress contractions in 5.14.11 Special-Purpose Commands, UTS #35 (LDML).</source>
          <target state="translated">-5.14.11特殊目的コマンド、UTS＃35（LDML）の抑制の抑制を参照してください。</target>
        </trans-unit>
        <trans-unit id="0a3b88931de0f8a1585b737f1744b827120ed7e3" translate="yes" xml:space="preserve">
          <source>-- they are NOT used for</source>
          <target state="translated">-それらは使用されていません</target>
        </trans-unit>
        <trans-unit id="afe09f38de5b8547467dba38b00faf6ea82e1825" translate="yes" xml:space="preserve">
          <source>-----8&amp;lt;-----/usr/local/bin/yacc-----8&amp;lt;----- #! /usr/bin/sh</source>
          <target state="translated">----- 8 &amp;lt;----- / usr / local / bin / yacc ----- 8 &amp;lt;-----＃！/ usr / bin / sh</target>
        </trans-unit>
        <trans-unit id="928eb328085d5dd1ea864cbc7fa6fcd93239323f" translate="yes" xml:space="preserve">
          <source>--bringing things to life automatically. Perl saw that the key wasn't in the hash, so it created a new hash entry automatically. Perl saw that you wanted to use the hash value as an array, so it created a new empty array and installed a reference to it in the hash automatically. And as usual, Perl made the array one element longer to hold the new city name.</source>
          <target state="translated">-物事を自動的に生き返らせます。Perlは、キーがハッシュに含まれていないことを認識したため、新しいハッシュエントリを自動的に作成しました。Perlは、ハッシュ値を配列として使用したいことを認識したため、新しい空の配列を作成し、それへの参照をハッシュに自動的にインストールしました。そしていつものように、Perlは新しい都市名を保持するために配列を1要素長くしました。</target>
        </trans-unit>
        <trans-unit id="d2ee483d8885043b1d86e8f54b300cc2d0d8aa5d" translate="yes" xml:space="preserve">
          <source>--diff</source>
          <target state="translated">--diff</target>
        </trans-unit>
        <trans-unit id="4c145d5d792c0de7497818416a3583ddc4ef3aed" translate="yes" xml:space="preserve">
          <source>--exec</source>
          <target state="translated">--exec</target>
        </trans-unit>
        <trans-unit id="e69ab1b6739dbe6687f9d0fa8d25e100eaff418c" translate="yes" xml:space="preserve">
          <source>--feature, -f</source>
          <target state="translated">-機能、-f</target>
        </trans-unit>
        <trans-unit id="1080c2b75030b9db6089441c365cd2e618af5b72" translate="yes" xml:space="preserve">
          <source>--help and --version</source>
          <target state="translated">--helpと--version</target>
        </trans-unit>
        <trans-unit id="63e664f3c0b161a2cbf63173f5e4286a40b94c51" translate="yes" xml:space="preserve">
          <source>--htmlcref</source>
          <target state="translated">--htmlcref</target>
        </trans-unit>
        <trans-unit id="02f5609e10ee7026f1e54d036cb62940935a9c3e" translate="yes" xml:space="preserve">
          <source>--libpods in Pod::Html</source>
          <target state="translated">--Pod :: Htmlのlibpods</target>
        </trans-unit>
        <trans-unit id="de00e86b4b1adf7de42f72b04311752a53fdd076" translate="yes" xml:space="preserve">
          <source>--merge</source>
          <target state="translated">--merge</target>
        </trans-unit>
        <trans-unit id="85bf17ebe87204a1c560eec7e29e5131edbd78fb" translate="yes" xml:space="preserve">
          <source>--no dangling statements allowed. If you want to write conditionals without curly brackets, there are several other ways to do it. The following all do the same thing:</source>
          <target state="translated">-ぶら下がりステートメントは許可されていません。中括弧なしで条件文を記述したい場合は、他にもいくつかの方法があります。以下はすべて同じことを行います。</target>
        </trans-unit>
        <trans-unit id="180267a3a01343dd30c8a524372d694ddfbee330" translate="yes" xml:space="preserve">
          <source>--or--</source>
          <target state="translated">--or--</target>
        </trans-unit>
        <trans-unit id="5f9031d8f64ccf1adae3a5bad83b3f0e15a74b6b" translate="yes" xml:space="preserve">
          <source>--rules</source>
          <target state="translated">--rules</target>
        </trans-unit>
        <trans-unit id="1c4f9522981e50119882c53cf2d78fbc6dacf356" translate="yes" xml:space="preserve">
          <source>--rules Glob-style pattern matching</source>
          <target state="translated">--rules Globスタイルのパターンマッチング</target>
        </trans-unit>
        <trans-unit id="b8de924ed5d19fde35d5385ab4502ea63fe9053a" translate="yes" xml:space="preserve">
          <source>--rules examples</source>
          <target state="translated">--rulesの例</target>
        </trans-unit>
        <trans-unit id="b82e47ebb1972aa0b6e7d7ff1370d40055cb198c" translate="yes" xml:space="preserve">
          <source>--rules resolution</source>
          <target state="translated">-ルールの解決</target>
        </trans-unit>
        <trans-unit id="c60ab85f89bb24a2195d98fc15206ae225307de2" translate="yes" xml:space="preserve">
          <source>--state</source>
          <target state="translated">--state</target>
        </trans-unit>
        <trans-unit id="f102bd60a1627e203f05c569bd70be2475447fb4" translate="yes" xml:space="preserve">
          <source>--trap</source>
          <target state="translated">--trap</target>
        </trans-unit>
        <trans-unit id="1c943333bd1bb515c4452598c745fa2120f0f81c" translate="yes" xml:space="preserve">
          <source>--upstream, -u</source>
          <target state="translated">-上流、-u</target>
        </trans-unit>
        <trans-unit id="be41ad7a4148c9611162eaff167e30cd14981272" translate="yes" xml:space="preserve">
          <source>--utils</source>
          <target state="translated">--utils</target>
        </trans-unit>
        <trans-unit id="60701558636e9ff7e4e4a5391e29bda4c6ef2db8" translate="yes" xml:space="preserve">
          <source>--xmlcref</source>
          <target state="translated">--xmlcref</target>
        </trans-unit>
        <trans-unit id="6ec1cf6284eb5ed1401a0fa4abb8cf38b2067e4a" translate="yes" xml:space="preserve">
          <source>-1 or +1 is returned if the shorter string was identical to the start of the longer string. -2 or +2 is returned if there was a difference between characters within the strings.</source>
          <target state="translated">短い文字列が長い文字列の先頭と同じ場合は、-1または+1が返されます。文字列内の文字に違いがあった場合、-2または+2が返されます。</target>
        </trans-unit>
        <trans-unit id="bd7373f38ce34820b3e621b28cd4de8215e371f8" translate="yes" xml:space="preserve">
          <source>-8 locale.</source>
          <target state="translated">-8ロケール。</target>
        </trans-unit>
        <trans-unit id="556591f45bb0ffdc476da93680ff2e9343566fc5" translate="yes" xml:space="preserve">
          <source>-? or -help</source>
          <target state="translated">-？または-help</target>
        </trans-unit>
        <trans-unit id="e5439c619dbb3b08873b649d979d89875a271f4f" translate="yes" xml:space="preserve">
          <source>-A module [ module ... ]</source>
          <target state="translated">-モジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="8be3f07d6ecc59410e75ba068c300b83155bed03" translate="yes" xml:space="preserve">
          <source>-Accflags=-fsanitize=address</source>
          <target state="translated">-Accflags=-fsanitize=address</target>
        </trans-unit>
        <trans-unit id="bf6cc6c5525e05c78a90bb8dd8ce302a6fde9f46" translate="yes" xml:space="preserve">
          <source>-Alddlflags=-shared\ -fsanitize=address</source>
          <target state="translated">-Alddlflags=-shared\ -fsanitize=address</target>
        </trans-unit>
        <trans-unit id="30c63d44edc0c1509106ffb2dcafcd19ce1d4e52" translate="yes" xml:space="preserve">
          <source>-Aldflags=-fsanitize=address</source>
          <target state="translated">-Aldflags=-fsanitize=address</target>
        </trans-unit>
        <trans-unit id="7db9de3fe8117d6a6778bcc8f88e7690eec078b4" translate="yes" xml:space="preserve">
          <source>-C module [ module ... ]</source>
          <target state="translated">-Cモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="691bdf37190984a4fe90d8640f5e52f09bb33010" translate="yes" xml:space="preserve">
          <source>-C,--check</source>
          <target state="translated">-C,--check</target>
        </trans-unit>
        <trans-unit id="ad9aee0e02aa7df5696f88c33c3f5b0003d54711" translate="yes" xml:space="preserve">
          <source>-D</source>
          <target state="translated">-D</target>
        </trans-unit>
        <trans-unit id="1d1f99fc093e5e1ae8d544e1d9a06037f841d2ae" translate="yes" xml:space="preserve">
          <source>-D module [ module ... ]</source>
          <target state="translated">-Dモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="aeacf3e5a9f96831b5805fd75e3e1221c5f5ee22" translate="yes" xml:space="preserve">
          <source>-D,--debug</source>
          <target state="translated">-D,--debug</target>
        </trans-unit>
        <trans-unit id="f455830ea22636b94e2621cba89906b9cf086ace" translate="yes" xml:space="preserve">
          <source>-Dcc=clang</source>
          <target state="translated">-Dcc=clang</target>
        </trans-unit>
        <trans-unit id="ccdf319fc9b8ab52413c4b1c6ce664c414d5cf27" translate="yes" xml:space="preserve">
          <source>-F</source>
          <target state="translated">-F</target>
        </trans-unit>
        <trans-unit id="dc1da24059fac98482b02ebc06841c689eaca7b4" translate="yes" xml:space="preserve">
          <source>-G module [ module ... ]</source>
          <target state="translated">-Gモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="f71e105f8a133b9bda2f781740d497e34f38d669" translate="yes" xml:space="preserve">
          <source>-I</source>
          <target state="translated">-I</target>
        </trans-unit>
        <trans-unit id="3768ddf11606c0d712122f6d7cf70de7821c62b5" translate="yes" xml:space="preserve">
          <source>-J</source>
          <target state="translated">-J</target>
        </trans-unit>
        <trans-unit id="7a443de8d05c259afd05cb6941e512eadbc81ec9" translate="yes" xml:space="preserve">
          <source>-L author [ author ... ]</source>
          <target state="translated">-L作者[作者...]</target>
        </trans-unit>
        <trans-unit id="b046afcc916bed407dbbdb049d502fceb08d96a3" translate="yes" xml:space="preserve">
          <source>-Level</source>
          <target state="translated">-Level</target>
        </trans-unit>
        <trans-unit id="a865f5c84febf7bb127859a28c7f9921091e23e9" translate="yes" xml:space="preserve">
          <source>-M</source>
          <target state="translated">-M</target>
        </trans-unit>
        <trans-unit id="286442bdb595d2f8d281251d800e0353042699bc" translate="yes" xml:space="preserve">
          <source>-M mirror1,mirror2,...</source>
          <target state="translated">-Mミラー1、ミラー2、..。</target>
        </trans-unit>
        <trans-unit id="baef33bc876a687b961751394c8f81f05f3e79c2" translate="yes" xml:space="preserve">
          <source>-O</source>
          <target state="translated">-O</target>
        </trans-unit>
        <trans-unit id="5bb32e12d567b52d9769dd6d1b502cbafaf5b407" translate="yes" xml:space="preserve">
          <source>-P</source>
          <target state="translated">-P</target>
        </trans-unit>
        <trans-unit id="6422eedc12255e6b5d4e04ab2b26ee196c74c4c7" translate="yes" xml:space="preserve">
          <source>-Q</source>
          <target state="translated">-Q</target>
        </trans-unit>
        <trans-unit id="3e0eab9f94000d4317af98881d10968930b431a1" translate="yes" xml:space="preserve">
          <source>-S</source>
          <target state="translated">-S</target>
        </trans-unit>
        <trans-unit id="f1b7687a81f3bfab61c7281767bf9051e13659d3" translate="yes" xml:space="preserve">
          <source>-S,--scheme</source>
          <target state="translated">-S,--scheme</target>
        </trans-unit>
        <trans-unit id="67648e47a5435ce1e50f56fbe845fa12a5cdb381" translate="yes" xml:space="preserve">
          <source>-Strategy</source>
          <target state="translated">-Strategy</target>
        </trans-unit>
        <trans-unit id="332ec780f224383a9f30f4660fe42ecd1206e248" translate="yes" xml:space="preserve">
          <source>-T</source>
          <target state="translated">-T</target>
        </trans-unit>
        <trans-unit id="66445fecf3db004bb006e432cfd80e60057aed1e" translate="yes" xml:space="preserve">
          <source>-Unicode bytes is not necessarily obvious. Probably only the first of these is what you want:</source>
          <target state="translated">-Unicodeバイトは必ずしも明白ではありません。おそらくこれらの最初のものだけがあなたが望むものです：</target>
        </trans-unit>
        <trans-unit id="6bfad0cb61ec04c8e83fbc02d3e02c478a1f6e49" translate="yes" xml:space="preserve">
          <source>-V</source>
          <target state="translated">-V</target>
        </trans-unit>
        <trans-unit id="7241f5aad8466e538eb18ce72bac37865cce783f" translate="yes" xml:space="preserve">
          <source>-X</source>
          <target state="translated">-X</target>
        </trans-unit>
        <trans-unit id="f02421666194942fbfd487a0b89bc8e62902d2fe" translate="yes" xml:space="preserve">
          <source>-X DIRHANDLE</source>
          <target state="translated">-X DIRHANDLE</target>
        </trans-unit>
        <trans-unit id="2ab1b601b35fe8f8841c979e875fa9193b77c019" translate="yes" xml:space="preserve">
          <source>-X EXPR</source>
          <target state="translated">-X EXPR</target>
        </trans-unit>
        <trans-unit id="bc19678a7061febac0619b2e971988a6337acd07" translate="yes" xml:space="preserve">
          <source>-X FILEHANDLE</source>
          <target state="translated">-Xファイルハンドル</target>
        </trans-unit>
        <trans-unit id="6db1fada730596c747bd0e1cc542c04190614170" translate="yes" xml:space="preserve">
          <source>-a</source>
          <target state="translated">-a</target>
        </trans-unit>
        <trans-unit id="f1141527e901e4fc62f73312648aa01ec2a552d5" translate="yes" xml:space="preserve">
          <source>-axis is &lt;b&gt;phi&lt;/b&gt;, also known as the</source>
          <target state="translated">-axisは&lt;b&gt;phi&lt;/b&gt;であり、</target>
        </trans-unit>
        <trans-unit id="60c94d22393c772d0f184d991bea821b935b05c4" translate="yes" xml:space="preserve">
          <source>-axis) is &lt;b&gt;theta&lt;/b&gt;, also known as the</source>
          <target state="translated">-axis）は&lt;b&gt;シータ&lt;/b&gt;であり、</target>
        </trans-unit>
        <trans-unit id="e48240bfde6ac93310ae055c2eebf9ff6e622f84" translate="yes" xml:space="preserve">
          <source>-b</source>
          <target state="translated">-b</target>
        </trans-unit>
        <trans-unit id="a9dbc90b755d775e7f6bcfa29813702306e16afa" translate="yes" xml:space="preserve">
          <source>-based) logarithm of the numerical argument, see &lt;a href=&quot;functions/log&quot;&gt;log&lt;/a&gt;.</source>
          <target state="translated">数値引数のベース）対数、参照&lt;a href=&quot;functions/log&quot;&gt;ログを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c18479c603e32fac5be9dbd6c1629662d5b9853e" translate="yes" xml:space="preserve">
          <source>-based) logarithm of the numerical argument, see &lt;a href=&quot;perlfunc#log&quot;&gt;&quot;log&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">-based）数値引数の対数&lt;a href=&quot;perlfunc#log&quot;&gt;。perlfuncの「log」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f7abb535a243486c680796806de8db55fd67e96f" translate="yes" xml:space="preserve">
          <source>-based) of the numerical argument, see &lt;a href=&quot;functions/exp&quot;&gt;exp&lt;/a&gt;.</source>
          <target state="translated">に基づく）数値引数については、&lt;a href=&quot;functions/exp&quot;&gt;expを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e9f25adb346a99ee88bddd351c93c06e02471293" translate="yes" xml:space="preserve">
          <source>-based) of the numerical argument, see &lt;a href=&quot;perlfunc#exp&quot;&gt;&quot;exp&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">-ベース）数値引数については&lt;a href=&quot;perlfunc#exp&quot;&gt;、perlfuncの「exp」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ddbfe46d29072725b61a3ee03c6abfefa0973acd" translate="yes" xml:space="preserve">
          <source>-c</source>
          <target state="translated">-c</target>
        </trans-unit>
        <trans-unit id="8226f9320a58094195bd2b8e654e97c627118403" translate="yes" xml:space="preserve">
          <source>-c (--color) requires Term::ANSIColor be installed</source>
          <target state="translated">-c（-color）にはTerm :: ANSIColorがインストールされている必要があります</target>
        </trans-unit>
        <trans-unit id="8b9d31753faa1f5c2566df806d8aa964dd978fe8" translate="yes" xml:space="preserve">
          <source>-c module</source>
          <target state="translated">-cモジュール</target>
        </trans-unit>
        <trans-unit id="94a878f037fdf80e6f7650a48c7b4019c798e1bf" translate="yes" xml:space="preserve">
          <source>-coordinates.</source>
          <target state="translated">-coordinates.</target>
        </trans-unit>
        <trans-unit id="d5537351313df4188977a7d2a773daedb94d0b26" translate="yes" xml:space="preserve">
          <source>-d</source>
          <target state="translated">-d</target>
        </trans-unit>
        <trans-unit id="392e2d4e9f5cba19f45990bd08bafb3b6c76ad53" translate="yes" xml:space="preserve">
          <source>-d destination_dir</source>
          <target state="translated">-d destination_dir</target>
        </trans-unit>
        <trans-unit id="2360917b9377a0f8f526499aa422e769e1252d5b" translate="yes" xml:space="preserve">
          <source>-e</source>
          <target state="translated">-e</target>
        </trans-unit>
        <trans-unit id="238695a38c232937a8a6d11443d7b294962357c5" translate="yes" xml:space="preserve">
          <source>-e routine</source>
          <target state="translated">-eルーチン</target>
        </trans-unit>
        <trans-unit id="ae22cd44cab421b74b9cb1b713b21791222034bd" translate="yes" xml:space="preserve">
          <source>-equivalent suffix.</source>
          <target state="translated">-同等のサフィックス。</target>
        </trans-unit>
        <trans-unit id="f9734ee333a629165fa782b725db07885fb85d5a" translate="yes" xml:space="preserve">
          <source>-expansion done.</source>
          <target state="translated">-拡張が完了しました。</target>
        </trans-unit>
        <trans-unit id="0abbcbcbe6d61abda4c58f24b76e0809f7c8b425" translate="yes" xml:space="preserve">
          <source>-f</source>
          <target state="translated">-f</target>
        </trans-unit>
        <trans-unit id="d1aab55443fd6d41c1821fb0098c28a59834c83c" translate="yes" xml:space="preserve">
          <source>-f routine</source>
          <target state="translated">-fルーチン</target>
        </trans-unit>
        <trans-unit id="40ced84e4352580b814a3c831d005fc7fe42bbe3" translate="yes" xml:space="preserve">
          <source>-f,--from</source>
          <target state="translated">-f,--from</target>
        </trans-unit>
        <trans-unit id="9768b3fca97bf2d2b773d639aae85af5d3472b58" translate="yes" xml:space="preserve">
          <source>-foo</source>
          <target state="translated">-foo</target>
        </trans-unit>
        <trans-unit id="1a7928193ef3f3d9bf22f22d8e56318d501a71bd" translate="yes" xml:space="preserve">
          <source>-fsanitize-blacklist=`pwd`/asan_ignore</source>
          <target state="translated">-fsanitize-blacklist=`pwd`/asan_ignore</target>
        </trans-unit>
        <trans-unit id="908ef382f902c5e030db6c76a3e6446bcc9e5ec4" translate="yes" xml:space="preserve">
          <source>-g module [ module ... ]</source>
          <target state="translated">-gモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="3c3003f7f0bedaf2a7334f932c515378a93f1402" translate="yes" xml:space="preserve">
          <source>-h</source>
          <target state="translated">-h</target>
        </trans-unit>
        <trans-unit id="13164925a0cd22470235c5e8907dc7dc055dab88" translate="yes" xml:space="preserve">
          <source>-h,--help</source>
          <target state="translated">-h,--help</target>
        </trans-unit>
        <trans-unit id="91edc8362c7518c1b0e4a9a4a7bcb6c02d8e498b" translate="yes" xml:space="preserve">
          <source>-i</source>
          <target state="translated">-i</target>
        </trans-unit>
        <trans-unit id="051fa67f29f2a258f11d9c26669bfd28448cd877" translate="yes" xml:space="preserve">
          <source>-i module [ module ... ]</source>
          <target state="translated">-iモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="ad8f3e5cba188512d6d65a4a9cf410c33f086158" translate="yes" xml:space="preserve">
          <source>-i used with no filenames on the command line, reading from STDIN</source>
          <target state="translated">-私はコマンドラインでファイル名なしで使用され、STDINから読み取ります</target>
        </trans-unit>
        <trans-unit id="814937af05964f89600befa6ae3bfe386bb151b0" translate="yes" xml:space="preserve">
          <source>-ish meanings:</source>
          <target state="translated">っぽい意味：</target>
        </trans-unit>
        <trans-unit id="89343dccabe72d08e1c4b86cd111151ff113e89e" translate="yes" xml:space="preserve">
          <source>-j Config.pm</source>
          <target state="translated">-j Config.pm</target>
        </trans-unit>
        <trans-unit id="41ecbf5c742a07d94719d70cfc27033de855195e" translate="yes" xml:space="preserve">
          <source>-l</source>
          <target state="translated">-l</target>
        </trans-unit>
        <trans-unit id="3c4a5714426402e6a879069c8235ce5a2796770b" translate="yes" xml:space="preserve">
          <source>-l,--list</source>
          <target state="translated">-l,--list</target>
        </trans-unit>
        <trans-unit id="d913657d8a33916405c4c67553ab3a2992d6c95e" translate="yes" xml:space="preserve">
          <source>-like construct is created by a pair of &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; macros (see &lt;a href=&quot;perlcall#Returning-a-Scalar&quot;&gt;Returning a Scalar in perlcall&lt;/a&gt;). Such a construct may be created specially for some important localized task, or an existing one (like boundaries of enclosing Perl subroutine/block, or an existing pair for freeing TMPs) may be used. (In the second case the overhead of additional localization must be almost negligible.) Note that any XSUB is automatically enclosed in an &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;LEAVE&lt;/code&gt; pair.</source>
          <target state="translated">のような構成は、 &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; マクロのペアによって作成されます（&lt;a href=&quot;perlcall#Returning-a-Scalar&quot;&gt;perlcallでスカラー&lt;/a&gt;を返すを参照）。そのような構成は、いくつかの重要なローカライズされたタスクのために特別に作成されるか、または既存のもの（Perlサブルーチン/ブロックを囲む境界、またはTMPを解放するための既存のペアなど）が使用されます。（2番目のケースでは、追加のローカライズのオーバーヘッドはほとんど無視できるはずです。）XSUBは自動的に &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; ペアで囲まれることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d764287429ae69a6b55559d0da992c92cd681258" translate="yes" xml:space="preserve">
          <source>-like construct is created by a pair of &lt;code&gt;ENTER&lt;/code&gt;/&lt;code&gt;LEAVE&lt;/code&gt; macros (see &lt;a href=&quot;perlcall#Returning-a-Scalar&quot;&gt;&quot;Returning a Scalar&quot; in perlcall&lt;/a&gt;). Such a construct may be created specially for some important localized task, or an existing one (like boundaries of enclosing Perl subroutine/block, or an existing pair for freeing TMPs) may be used. (In the second case the overhead of additional localization must be almost negligible.) Note that any XSUB is automatically enclosed in an &lt;code&gt;ENTER&lt;/code&gt;/&lt;code&gt;LEAVE&lt;/code&gt; pair.</source>
          <target state="translated">-like構文は、 &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; マクロのペアによって作成されます（&lt;a href=&quot;perlcall#Returning-a-Scalar&quot;&gt;perlcallの「スカラーを返す」を参照&lt;/a&gt;）。このような構成は、いくつかの重要なローカライズされたタスク用に特別に作成することも、既存の構成（Perlサブルーチン/ブロックを囲む境界、またはTMPを解放するための既存のペアなど）を使用することもできます。（2番目のケースでは、追加のローカリゼーションのオーバーヘッドはほとんど無視できる必要があります。）XSUBはすべて &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;LEAVE&lt;/code&gt; ペアで自動的に囲まれることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a98c9dc82b0940ee66ebaf6b3ab25db4d7a0b7ee" translate="yes" xml:space="preserve">
          <source>-lperl</source>
          <target state="translated">-lperl</target>
        </trans-unit>
        <trans-unit id="8cc195760cf823702a9c3a4e38316c503826cf72" translate="yes" xml:space="preserve">
          <source>-m</source>
          <target state="translated">-m</target>
        </trans-unit>
        <trans-unit id="7d457e0ddd706b0631c75d46533797809ea7a042" translate="yes" xml:space="preserve">
          <source>-man</source>
          <target state="translated">-man</target>
        </trans-unit>
        <trans-unit id="d868a680affb6ad2c7e2392566b6adc4e3201dea" translate="yes" xml:space="preserve">
          <source>-n</source>
          <target state="translated">-n</target>
        </trans-unit>
        <trans-unit id="f768616ef823e7864962e05cfb8231fce774193d" translate="yes" xml:space="preserve">
          <source>-p</source>
          <target state="translated">-p</target>
        </trans-unit>
        <trans-unit id="653332e9ad9ed292b475028118162353cc479d16" translate="yes" xml:space="preserve">
          <source>-p,--perlqq</source>
          <target state="translated">-p,--perlqq</target>
        </trans-unit>
        <trans-unit id="00a354ab6ba325dfea1f93fc702984e336b57ca9" translate="yes" xml:space="preserve">
          <source>-pi</source>
          <target state="translated">-pi</target>
        </trans-unit>
        <trans-unit id="d0ab9098221f275f405a3db51c04c836d2cd668f" translate="yes" xml:space="preserve">
          <source>-plane (around the</source>
          <target state="translated">-飛行機（の周り</target>
        </trans-unit>
        <trans-unit id="90cdb7ea49538fa14a6fddf9d2eb1811417d042f" translate="yes" xml:space="preserve">
          <source>-r</source>
          <target state="translated">-r</target>
        </trans-unit>
        <trans-unit id="3c1161c663136dd9f9b6a603933f75e4defae1c1" translate="yes" xml:space="preserve">
          <source>-r,--resolve</source>
          <target state="translated">-r,--resolve</target>
        </trans-unit>
        <trans-unit id="e6ab9816305be2242bcc92ac5c609d4a088fd6f8" translate="yes" xml:space="preserve">
          <source>-re LIST OF PATTERNS</source>
          <target state="translated">-パターンの再リスト</target>
        </trans-unit>
        <trans-unit id="c4c647df34524053914b0fa32a75ea6b3ed9a1e0" translate="yes" xml:space="preserve">
          <source>-re=PATTERN</source>
          <target state="translated">-re=PATTERN</target>
        </trans-unit>
        <trans-unit id="fe06637685c925d5eec8bbd543cd92c006d957fa" translate="yes" xml:space="preserve">
          <source>-removal would give you. If you want to do this kind of processing, you probably want &lt;code&gt;Cwd&lt;/code&gt; 's &lt;code&gt;realpath()&lt;/code&gt; function to actually traverse the filesystem cleaning up paths like this.</source>
          <target state="translated">-削除するとあなたに与えられます。この種の処理を行う場合は、おそらく &lt;code&gt;Cwd&lt;/code&gt; の &lt;code&gt;realpath()&lt;/code&gt; 関数が実際にファイルシステムをトラバースして、このようなパスをクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="91953f3be86960dbb0426f033ce652ec6a050ab6" translate="yes" xml:space="preserve">
          <source>-removal would give you. If you want to do this kind of processing, you probably want &lt;code&gt;Cwd&lt;/code&gt;'s &lt;code&gt;realpath()&lt;/code&gt; function to actually traverse the filesystem cleaning up paths like this.</source>
          <target state="translated">-削除はあなたに与えるでしょう。この種の処理を実行する場合は、 &lt;code&gt;Cwd&lt;/code&gt; の &lt;code&gt;realpath()&lt;/code&gt; 関数が実際にファイルシステムをトラバースして、このようなパスをクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="840c8c1b085e301c44de24e07c1100e2497b9568" translate="yes" xml:space="preserve">
          <source>-s</source>
          <target state="translated">-s</target>
        </trans-unit>
        <trans-unit id="1ca3d40459b0228ae087f3489d216f8db272fba3" translate="yes" xml:space="preserve">
          <source>-s,--string</source>
          <target state="translated">-s,--string</target>
        </trans-unit>
        <trans-unit id="1a8854d13cc7eda216c70c1e5b536a20cbd2d0a9" translate="yes" xml:space="preserve">
          <source>-style format specifier (without the leading '%') to use to print the times. It defaults to '5.2f'.</source>
          <target state="translated">時刻を出力するために使用する-style書式指定子（先頭の '％'なし）。デフォルトは「5.2f」です。</target>
        </trans-unit>
        <trans-unit id="bdc6cf8c21c664c9faf3b4b838269f152cd31578" translate="yes" xml:space="preserve">
          <source>-t module [ module ... ]</source>
          <target state="translated">-tモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="e5d2e9e72dce0fabd51e5cb93cdb7743931a2d19" translate="yes" xml:space="preserve">
          <source>-t,--to</source>
          <target state="translated">-t,--to</target>
        </trans-unit>
        <trans-unit id="39757b603166b52e1a1e2021e629c21418eee11a" translate="yes" xml:space="preserve">
          <source>-th subpattern, or undef if the subpattern did not match.</source>
          <target state="translated">-thサブパターン、またはサブパターンが一致しなかった場合はundef。</target>
        </trans-unit>
        <trans-unit id="66000995bef80f7fce654adc5353777229997bce" translate="yes" xml:space="preserve">
          <source>-torture</source>
          <target state="translated">-torture</target>
        </trans-unit>
        <trans-unit id="2c2dcf44f1bc9aa15d180db1d30d26a50922272d" translate="yes" xml:space="preserve">
          <source>-u</source>
          <target state="translated">-u</target>
        </trans-unit>
        <trans-unit id="aaf1e4f6a10d49a5901590bb3b8c0dba1ef3ca8c" translate="yes" xml:space="preserve">
          <source>-utilities on path manually. They are installed in &lt;code&gt;$prefix/bin&lt;/code&gt; , here &lt;code&gt;$prefix&lt;/code&gt; is what you gave to</source>
          <target state="translated">パス上のユーティリティを手動で。それらは &lt;code&gt;$prefix/bin&lt;/code&gt; インストールされます。ここで &lt;code&gt;$prefix&lt;/code&gt; はあなたが与えたものです</target>
        </trans-unit>
        <trans-unit id="6b057029c4063bde864f6f94434aed99cf91301c" translate="yes" xml:space="preserve">
          <source>-utilities on path manually. They are installed in &lt;code&gt;$prefix/bin&lt;/code&gt;, here &lt;code&gt;$prefix&lt;/code&gt; is what you gave to</source>
          <target state="translated">-パス上のユーティリティを手動で。それらは &lt;code&gt;$prefix/bin&lt;/code&gt; インストールされます。ここで &lt;code&gt;$prefix&lt;/code&gt; はあなたが与えたものです</target>
        </trans-unit>
        <trans-unit id="75262c839fe7bdce825dee598401d72dc8394722" translate="yes" xml:space="preserve">
          <source>-v</source>
          <target state="translated">-v</target>
        </trans-unit>
        <trans-unit id="55b84beaebd3dd9ce3fdbc2382374c7a228132cc" translate="yes" xml:space="preserve">
          <source>-w</source>
          <target state="translated">-w</target>
        </trans-unit>
        <trans-unit id="04728bd7fc7483a16ca722feb0ed8c18f1fc301a" translate="yes" xml:space="preserve">
          <source>-x module [ module ... ]</source>
          <target state="translated">-xモジュール[モジュール...]</target>
        </trans-unit>
        <trans-unit id="43fe7418deee5c61282eab45e5fe930c1cf1ab80" translate="yes" xml:space="preserve">
          <source>-z</source>
          <target state="translated">-z</target>
        </trans-unit>
        <trans-unit id="3a52ce780950d4d969792a2559cd519d7ee8c727" translate="yes" xml:space="preserve">
          <source>.</source>
          <target state="translated">.</target>
        </trans-unit>
        <trans-unit id="46b9ed05b810c35c030b14df53138c9f8fb2464a" translate="yes" xml:space="preserve">
          <source>. (Equivalent to &lt;code&gt;&lt;a href=&quot;../functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">。（ &lt;code&gt;&lt;a href=&quot;../functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt; と同等）。</target>
        </trans-unit>
        <trans-unit id="b8d281ef9104c2b48d48df2a7cf5ddced0cf7e72" translate="yes" xml:space="preserve">
          <source>. (Equivalent to &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt;). For example:</source>
          <target state="translated">。（ &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(@array)&lt;/a&gt;&lt;/code&gt; と同等）。例えば：</target>
        </trans-unit>
        <trans-unit id="94c582d1658acfd4933003032c4471f9c701f1c4" translate="yes" xml:space="preserve">
          <source>. (Equivalent to &lt;code&gt;scalar(@array)&lt;/code&gt;).</source>
          <target state="translated">。（ &lt;code&gt;scalar(@array)&lt;/code&gt; と同等）。</target>
        </trans-unit>
        <trans-unit id="3a996d62cf71fd6ebf46de7b113603888dc7060a" translate="yes" xml:space="preserve">
          <source>. (Equivalent to &lt;code&gt;scalar(@array)&lt;/code&gt;). For example:</source>
          <target state="translated">。（ &lt;code&gt;scalar(@array)&lt;/code&gt; と同等）。例えば：</target>
        </trans-unit>
        <trans-unit id="694f35049a7ec5dc2b360d57bd881a28fa07da34" translate="yes" xml:space="preserve">
          <source>. (For the cleanup at program exit when the CLEANUP flag is set, this happens automatically.)</source>
          <target state="translated">。（CLEANUPフラグが設定されている場合のプログラム終了時のクリーンアップでは、これは自動的に行われます。）</target>
        </trans-unit>
        <trans-unit id="15693b683bd6294eb09618d3328be4ea6360e2ed" translate="yes" xml:space="preserve">
          <source>. (If you interrupt it, you would better reset &lt;code&gt;LineInfo&lt;/code&gt; to something &quot;interactive&quot;!)</source>
          <target state="translated">。（中断する場合は、 &lt;code&gt;LineInfo&lt;/code&gt; を「インタラクティブ」なものにリセットすることをお勧めします！）</target>
        </trans-unit>
        <trans-unit id="181e9a15b21b5b303a16988869863732a3c74ac2" translate="yes" xml:space="preserve">
          <source>. (If you interrupt it, you'd better reset &lt;code&gt;LineInfo&lt;/code&gt; to</source>
          <target state="translated">。（中断した場合は、 &lt;code&gt;LineInfo&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="4f2dc4447c7e1cbcca5316cceaa252e9049281ff" translate="yes" xml:space="preserve">
          <source>. (Perhaps, in retrospect, the &lt;code&gt;lib&lt;/code&gt; style should never have been supported, but it did seem like a nice idea at the time.)</source>
          <target state="translated">。（おそらく、振り返ってみると、 &lt;code&gt;lib&lt;/code&gt; スタイルはサポートされるべきではなかったはずですが、当時はそれは素晴らしいアイデアのように思えました。）</target>
        </trans-unit>
        <trans-unit id="9f0b8aeca7daf268ae4d3b7f58d2547cb18964da" translate="yes" xml:space="preserve">
          <source>. (Setting BEGINLIBPATH to just &lt;code&gt;.&lt;/code&gt; is ignored by the OS/2 kernel.)</source>
          <target state="translated">。（BEGINLIBPATHを &lt;code&gt;.&lt;/code&gt; 設定しても、OS / 2カーネルでは無視されます。）</target>
        </trans-unit>
        <trans-unit id="3cc75d93f4261d9260f179d2d05bf50125a26b04" translate="yes" xml:space="preserve">
          <source>. (The usage below indicates it is for integers, but it works for any type.) Use instead of these, since the C library ones force their argument to be what it is expecting, potentially leading to disaster. But also beware that this evaluates its argument twice, so no &lt;code&gt;x++&lt;/code&gt;.</source>
          <target state="translated">。（以下の使用法は整数用であることを示していますが、どのタイプでも機能します。）Cライブラリのものは引数を期待どおりに強制し、災害につながる可能性があるため、これらの代わりに使用します。ただし、これは引数を2回評価するため、 &lt;code&gt;x++&lt;/code&gt; 評価されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fd50589315deafe5011fdea5a89280d20abb432c" translate="yes" xml:space="preserve">
          <source>. (There are some exceptions and gotchas with this; see &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt; for a full discussion.) The &lt;code&gt;[:digit:]&lt;/code&gt;, &lt;code&gt;[:word:]&lt;/code&gt;, and &lt;code&gt;[:space:]&lt;/code&gt; correspond to the familiar &lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\w&lt;/code&gt;, and &lt;code&gt;\s&lt;/code&gt; character classes. To negate a POSIX class, put a &lt;code&gt;'^'&lt;/code&gt; in front of the name, so that,</source>
          <target state="translated">。 （これにはいくつかの例外と落とし穴があります。詳細については、&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;を参照してください。） &lt;code&gt;[:digit:]&lt;/code&gt; 、 &lt;code&gt;[:word:]&lt;/code&gt; 、および &lt;code&gt;[:space:]&lt;/code&gt; は、おなじみの &lt;code&gt;\d&lt;/code&gt; 、 &lt;code&gt;\w&lt;/code&gt; 、および &lt;code&gt;\s&lt;/code&gt; 文字クラス。 POSIXクラスを無効にするには、名前の前に &lt;code&gt;'^'&lt;/code&gt; を付けて、次のようにします。</target>
        </trans-unit>
        <trans-unit id="2db51a060293e1873f6869f67d8e79713a69ef25" translate="yes" xml:space="preserve">
          <source>. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;a href=&quot;#ioctl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt;&lt;code&gt;ioctl&lt;/code&gt;&lt;/a&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; functions may be needed to manipulate the values of structures used by &lt;a href=&quot;#ioctl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt;&lt;code&gt;ioctl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">。 （これに役立つPerlキットに付属している&lt;b&gt;h2ph&lt;/b&gt;と呼ばれるPerlスクリプトがありますが、それは&lt;b&gt;簡単&lt;/b&gt;ではありません。）SCALARは、機能に応じて読み取りおよび/または書き込まれます。 SCALARの文字列値へのCポインタは、実際の&lt;a href=&quot;#ioctl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt; &lt;code&gt;ioctl&lt;/code&gt; &lt;/a&gt;呼び出しの3番目の引数として渡されます。 （SCALARに文字列値がないが数値がある場合は、文字列値へのポインタではなく、その値が渡されます。これがtrueであることを保証するには、使用する前にスカラーに &lt;code&gt;0&lt;/code&gt; を追加します。）&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#ioctl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt; &lt;code&gt;ioctl&lt;/code&gt; で&lt;/a&gt;使用される構造の値を操作するために関数が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ebbcb028023ba5ec4bf990fcf6eb37768723056e" translate="yes" xml:space="preserve">
          <source>. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; functions may be needed to manipulate the values of structures used by &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">。 （Perlキットに付属している&lt;b&gt;h2ph&lt;/b&gt;と呼ばれるPerlスクリプトがありますが、これは&lt;b&gt;簡単&lt;/b&gt;ではありません。）SCALARは、関数に応じて読み書きされます。 SCALARの文字列値へのCポインタは、実際の &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; 呼び出しの3番目の引数として渡されます。 （SCALARに文字列値はないが数値はある場合、文字列値へのポインターではなくその値が渡されます。これがtrueであることを保証するには、使用する前にスカラーに &lt;code&gt;0&lt;/code&gt; を追加します。） &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; が使用する構造体の値を操作するために関数が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="cbf29a1e7711e856247e88a22d78403cd4097d96" translate="yes" xml:space="preserve">
          <source>. (There is a Perl script called &lt;b&gt;h2ph&lt;/b&gt; that comes with the Perl kit that may help you in this, but it's nontrivial.) SCALAR will be read and/or written depending on the FUNCTION; a C pointer to the string value of SCALAR will be passed as the third argument of the actual &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; call. (If SCALAR has no string value but does have a numeric value, that value will be passed rather than a pointer to the string value. To guarantee this to be true, add a &lt;code&gt;0&lt;/code&gt; to the scalar before using it.) The &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; functions may be needed to manipulate the values of structures used by &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">。 （Perlキットに付属している&lt;b&gt;h2ph&lt;/b&gt;と呼ばれるPerlスクリプトがありますが、これは&lt;b&gt;簡単&lt;/b&gt;ではありません。）SCALARは、関数に応じて読み書きされます。 SCALARの文字列値へのCポインタは、実際の &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; 呼び出しの3番目の引数として渡されます。 （SCALARに文字列値はないが数値はある場合、文字列値へのポインターではなくその値が渡されます。これがtrueであることを保証するには、使用する前にスカラーに &lt;code&gt;0&lt;/code&gt; を追加します。） &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; が使用する構造体の値を操作するために関数が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="bc82a4dc120028594b84107495cbc0deaebe016c" translate="yes" xml:space="preserve">
          <source>. (Yes, Virginia, there &lt;b&gt;is&lt;/b&gt; a YACC grammar for Perl!) The job of the parser is to take your code and &quot;understand&quot; it, splitting it into sentences, deciding which operands go with which operators and so on.</source>
          <target state="translated">。（はい、バージニア州は、そこに&lt;b&gt;ある&lt;/b&gt; PerlのためのYACC文法！）パーサの仕事は、オペランドがどの事業者などと一緒に行くかを決める、それ文章の中に、分割をあなたのコードを取り、それを「理解」することです。</target>
        </trans-unit>
        <trans-unit id="690c1a79ec29589f49d7e8d06988c85b3fcab0f7" translate="yes" xml:space="preserve">
          <source>. (in these examples &lt;code&gt;&quot;S&quot;&lt;/code&gt; and &lt;code&gt;&quot;T&quot;&lt;/code&gt; are regular subexpressions).</source>
          <target state="translated">。（これらの例では、 &lt;code&gt;&quot;S&quot;&lt;/code&gt; と &lt;code&gt;&quot;T&quot;&lt;/code&gt; は通常の部分式です）。</target>
        </trans-unit>
        <trans-unit id="cac2ef42eac4291ce9782faa9a407fa44d35265d" translate="yes" xml:space="preserve">
          <source>. (or</source>
          <target state="translated">。（または</target>
        </trans-unit>
        <trans-unit id="236152725d137990a457e4cd09f9fd7d5e6c1e40" translate="yes" xml:space="preserve">
          <source>. &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; and &lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt; explain the</source>
          <target state="translated">。&lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt;と&lt;a href=&quot;perlunifaq&quot;&gt;perlunifaq&lt;/a&gt;は、</target>
        </trans-unit>
        <trans-unit id="0b97909f09c9f763ca3dc7911d0df0016488e3ca" translate="yes" xml:space="preserve">
          <source>. &lt;b&gt;It is especially important to do this in modules to avoid penalizing all applications which use them.&lt;/b&gt;</source>
          <target state="translated">。&lt;b&gt;モジュールでこれを行うことは、それらを使用するすべてのアプリケーションにペナルティを課さないようにするために特に重要です。&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c84bd932de16eb29265e3c78e34c63425be61866" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;$&lt;/code&gt; is a shell prompt.</source>
          <target state="translated">。 &lt;code&gt;$&lt;/code&gt; はシェルプロンプトです。</target>
        </trans-unit>
        <trans-unit id="a872501bd8eee376a90e33fd1da5d7ad22e00ebc" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;$Config{d_setlocale}&lt;/code&gt; is &lt;code&gt;'define'&lt;/code&gt; on OS/390 or z/OS.</source>
          <target state="translated">。 &lt;code&gt;$Config{d_setlocale}&lt;/code&gt; は、OS / 390またはz / OSでは &lt;code&gt;'define'&lt;/code&gt; れています。</target>
        </trans-unit>
        <trans-unit id="689f2d81347c4e95450de6a6b67d57924dc6366c" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;OUTLIST&lt;/code&gt; /&lt;code&gt;OUT&lt;/code&gt; keywords indicate that the C subroutine does not inspect the memory pointed by this parameter, but will write through this pointer to provide additional return values.</source>
          <target state="translated">。 &lt;code&gt;OUTLIST&lt;/code&gt; / &lt;code&gt;OUT&lt;/code&gt; キーワードは、Cサブルーチンがこのパラメーターが指すメモリーを検査しないが、追加の戻り値を提供するためにこのポインターを介して書き込むことを示します。</target>
        </trans-unit>
        <trans-unit id="7fcdc380d7a23b700b238fab1e48c6a66ab49cbb" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;OUTLIST&lt;/code&gt;/&lt;code&gt;OUT&lt;/code&gt; keywords indicate that the C subroutine does not inspect the memory pointed by this parameter, but will write through this pointer to provide additional return values.</source>
          <target state="translated">。 &lt;code&gt;OUTLIST&lt;/code&gt; / &lt;code&gt;OUT&lt;/code&gt; キーワードは、Cサブルーチンがこのパラメーターが指すメモリーを検査しないが、このポインターを介して書き込みを行い、追加の戻り値を提供することを示します。</target>
        </trans-unit>
        <trans-unit id="88901232fc748fdea60269bc910d226f97e1cb4d" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;Perl_runops_debug&lt;/code&gt; is used with DEBUGGING and &lt;code&gt;Perl_runops_standard&lt;/code&gt; is used otherwise. For fine control over the execution of the compile tree it is possible to provide your own runops function.</source>
          <target state="translated">。 &lt;code&gt;Perl_runops_debug&lt;/code&gt; はDEBUGGINGとともに使用され、そうでない場合は &lt;code&gt;Perl_runops_standard&lt;/code&gt; が使用されます。コンパイルツリーの実行を細かく制御するために、独自のrunops関数を提供できます。</target>
        </trans-unit>
        <trans-unit id="84c7eee973f32ff4607b490bd51cf94d26808c4a" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;STDIN =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; turns the I/O transcoding completely off for that filehandle.</source>
          <target state="translated">。 &lt;code&gt;STDIN =&amp;gt; &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は、そのファイルハンドルのI / Oトランスコーディングを完全にオフにします。</target>
        </trans-unit>
        <trans-unit id="ba96b39b2369555d32eba04ad56361c9a9156134" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;STDIN =&amp;gt; undef&lt;/code&gt; turns the I/O transcoding completely off for that filehandle.</source>
          <target state="translated">。 &lt;code&gt;STDIN =&amp;gt; undef&lt;/code&gt; は、そのファイルハンドルのI / Oトランスコーディングを完全にオフにします。</target>
        </trans-unit>
        <trans-unit id="22e9affa2bbc7ae84004e12265378a617db34fa8" translate="yes" xml:space="preserve">
          <source>. &lt;code&gt;special&lt;/code&gt; (usually, but not always, a multicharacter mapping), is tried first.</source>
          <target state="translated">。 &lt;code&gt;special&lt;/code&gt; （通常は、常にではないが、複数文字のマッピング）が最初に試行されます。</target>
        </trans-unit>
        <trans-unit id="34b205465f826019a73312394da64a5166d0e847" translate="yes" xml:space="preserve">
          <source>. A &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; just gives temporary values to global (meaning package) variables. It does</source>
          <target state="translated">。 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; だけでは、（パッケージを意味する）グローバル変数への一時的な値を示します。します</target>
        </trans-unit>
        <trans-unit id="d92dc079e56072c4dd03f3a9fb094902868ede9d" translate="yes" xml:space="preserve">
          <source>. A &lt;code&gt;local&lt;/code&gt; just gives temporary values to global (meaning package) variables. It does</source>
          <target state="translated">。 &lt;code&gt;local&lt;/code&gt; だけでは、（パッケージを意味する）グローバル変数への一時的な値を示します。します</target>
        </trans-unit>
        <trans-unit id="20d7984adc37598924d34162f803580d6f8e4473" translate="yes" xml:space="preserve">
          <source>. A character class allows a set of possible characters, rather than just a single character, to match at a particular point in a regexp. You can define your own custom character classes. These are denoted by brackets &lt;code&gt;[...]&lt;/code&gt; , with the set of characters to be possibly matched inside. Here are some examples:</source>
          <target state="translated">。文字クラスを使用すると、単一の文字だけでなく、可能な文字のセットを正規表現の特定のポイントで照合できます。独自のカスタム文字クラスを定義できます。これらは括弧 &lt;code&gt;[...]&lt;/code&gt; で示され、文字のセットは内部で一致する可能性があります。ここではいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="ea187136ae4e7e7c9da0097eccfa70e52bc2fedf" translate="yes" xml:space="preserve">
          <source>. A character class allows a set of possible characters, rather than just a single character, to match at a particular point in a regexp. You can define your own custom character classes. These are denoted by brackets &lt;code&gt;[...]&lt;/code&gt;, with the set of characters to be possibly matched inside. Here are some examples:</source>
          <target state="translated">。文字クラスを使用すると、単一の文字だけでなく、可能な文字のセットを正規表現の特定のポイントで一致させることができます。独自のカスタム文字クラスを定義できます。これらは角かっこ &lt;code&gt;[...]&lt;/code&gt; で示され、文字のセットは内部で一致する可能性があります。ここではいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="b629a81173e8b0555a45f0a8eab5759b801c2a12" translate="yes" xml:space="preserve">
          <source>. A code point is essentially the position of the character within the set of all possible Unicode characters, and thus in Perl, the term</source>
          <target state="translated">。コードポイントは、基本的には、可能なすべてのUnicode文字のセット内での文字の位置です。したがって、Perlでは、用語</target>
        </trans-unit>
        <trans-unit id="6967b877b0a6419ec120bcf48175f4179b1d1c97" translate="yes" xml:space="preserve">
          <source>. A module can install custom translations (inside the scope which &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;s the module) with the following magic incantation:</source>
          <target state="translated">。モジュールは、次の魔法の呪文で（モジュールを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; するスコープ内に）カスタム翻訳をインストールできます。</target>
        </trans-unit>
        <trans-unit id="3fa39f453b27b8fde79ba1e37e6b3b686c6cd9fb" translate="yes" xml:space="preserve">
          <source>. A module can install custom translations (inside the scope which &lt;code&gt;use&lt;/code&gt;s the module) with the following magic incantation:</source>
          <target state="translated">。モジュールは、次の魔法の呪文を &lt;code&gt;use&lt;/code&gt; 、カスタム翻訳を（モジュールを使用するスコープ内に）インストールできます。</target>
        </trans-unit>
        <trans-unit id="654c9133d804ea9801de6c352e63b0d752c4c7a2" translate="yes" xml:space="preserve">
          <source>. A source stream is created when the Perl parser opens a file, it continues to exist as the source code is read into memory, and it is destroyed when Perl is finished parsing the file. If the parser encounters a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement in a source stream, a new and distinct stream is created just for that file.</source>
          <target state="translated">。ソースストリームは、Perlパーサーがファイルを開いたときに作成され、ソースコードがメモリに読み込まれるときに存在し続け、Perlがファイルの解析を完了すると破棄されます。パーサーがソースストリームで &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; ステートメントまたは &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ステートメントを検出すると、そのファイル専用に新しい別個のストリームが作成されます。</target>
        </trans-unit>
        <trans-unit id="233c54b29b60b9e6d92cc6a4150b5bcf7faf5d59" translate="yes" xml:space="preserve">
          <source>. A source stream is created when the Perl parser opens a file, it continues to exist as the source code is read into memory, and it is destroyed when Perl is finished parsing the file. If the parser encounters a &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;use&lt;/code&gt; statement in a source stream, a new and distinct stream is created just for that file.</source>
          <target state="translated">。ソースストリームは、Perlパーサーがファイルを開くときに作成され、ソースコードがメモリに読み込まれるときに存在し続け、Perlがファイルの解析を終了すると破棄されます。パーサーがソースストリームで &lt;code&gt;require&lt;/code&gt; または &lt;code&gt;use&lt;/code&gt; ステートメントを検出すると、そのファイル専用に新しい個別のストリームが作成されます。</target>
        </trans-unit>
        <trans-unit id="27177b505cdc14ed8afa64dfc9fa5c9897f8366d" translate="yes" xml:space="preserve">
          <source>. ASCII is used this way for most cases.</source>
          <target state="translated">。ほとんどの場合、ASCIIがこのように使用されます。</target>
        </trans-unit>
        <trans-unit id="8ba2d601d95f584214b7a05377f233db7b020c5c" translate="yes" xml:space="preserve">
          <source>. Acts same as &lt;code&gt;find_encoding()&lt;/code&gt; but &lt;code&gt;mime_name()&lt;/code&gt; of returned object must match to</source>
          <target state="translated">。同じ機能を果たし &lt;code&gt;find_encoding()&lt;/code&gt; が、 &lt;code&gt;mime_name()&lt;/code&gt; に一致している必要があります返されたオブジェクトの</target>
        </trans-unit>
        <trans-unit id="f1f1a39d92f2a76d4292eccf2b32f34370ade789" translate="yes" xml:space="preserve">
          <source>. Again, not using exactly two digits is a recipe for disaster, but you can use &lt;code&gt;\x{...}&lt;/code&gt; to specify any number of hex digits.</source>
          <target state="translated">。繰り返しになりますが、正確に2桁を使用しないことは災害のレシピですが、 &lt;code&gt;\x{...}&lt;/code&gt; を使用して任意の数の16進数を指定できます。</target>
        </trans-unit>
        <trans-unit id="dc2efb2ba1e620dbacfedb286bb11ac9ae5ea4f4" translate="yes" xml:space="preserve">
          <source>. All regex engines must be able to correctly build such a structure in their &lt;a href=&quot;#comp&quot;&gt;&quot;comp&quot;&lt;/a&gt; routine.</source>
          <target state="translated">。すべての正規表現エンジンは、&lt;a href=&quot;#comp&quot;&gt;「comp」&lt;/a&gt;ルーチンでそのような構造を正しく構築できなければなりません。</target>
        </trans-unit>
        <trans-unit id="1be7e388b24fed423d29f693852a90533c3dce34" translate="yes" xml:space="preserve">
          <source>. All regex engines must be able to correctly build such a structure in their &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; routine.</source>
          <target state="translated">。すべての正規表現エンジンは、&lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt;ルーチンでそのような構造を正しく構築できなければなりません。</target>
        </trans-unit>
        <trans-unit id="0eb8ffacada74d7b0728dd1325a7888884aee218" translate="yes" xml:space="preserve">
          <source>. All the other functions are fairly simple wrappers which make it easier to call Perl subroutines in special cases. At the end of the day they will all call</source>
          <target state="translated">。他のすべての関数は非常に単純なラッパーで、特別な場合にPerlサブルーチンを簡単に呼び出すことができます。一日の終わりに、彼らはすべて電話します</target>
        </trans-unit>
        <trans-unit id="27da16d87cc57fa070324d863cd8cedd53811405" translate="yes" xml:space="preserve">
          <source>. All versions of Berkeley DB are available there.</source>
          <target state="translated">。そこでは、Berkeley DBのすべてのバージョンを入手できます。</target>
        </trans-unit>
        <trans-unit id="7101cbca81b1324605820165ddc0d74b9fe44d2a" translate="yes" xml:space="preserve">
          <source>. An empty</source>
          <target state="translated">。空っぽ</target>
        </trans-unit>
        <trans-unit id="233b57b3e77bae0ead5a8a30677ef0a77a1edf99" translate="yes" xml:space="preserve">
          <source>. And since the extension DLLs link with the Perl DLL, extension DLLs for older versions would load an older Perl DLL, and would most probably segfault (since the data in this DLL is not properly initialized).</source>
          <target state="translated">。また、拡張DLLはPerl DLLとリンクしているため、古いバージョンの拡張DLLは古いPerl DLLをロードし、おそらくsegfaultになります（このDLLのデータが適切に初期化されていないため）。</target>
        </trans-unit>
        <trans-unit id="de259bd11ae330f9c68f383ed85ba6c2e159b450" translate="yes" xml:space="preserve">
          <source>. Any XS code should be in</source>
          <target state="translated">。XSコードは</target>
        </trans-unit>
        <trans-unit id="75671be154b9c3d8b51b585074c5b9061967b6d3" translate="yes" xml:space="preserve">
          <source>. Any type of bracket not in the delimiter list is treated as an ordinary character.</source>
          <target state="translated">。区切り文字リストにないタイプのブラケットは、通常の文字として扱われます。</target>
        </trans-unit>
        <trans-unit id="a6bdcf75e96f17cc2c4c3a8be735b514fb9c36ef" translate="yes" xml:space="preserve">
          <source>. As a binary operator, it has two children: the add operator, providing the result of &lt;code&gt;$b+$c&lt;/code&gt; , is uppermost on line 5, and the left hand side is on line 10.</source>
          <target state="translated">。2項演算子として、2つの子があります。 &lt;code&gt;$b+$c&lt;/code&gt; 結果を提供するadd演算子は5行目で一番上にあり、左側は10行目です。</target>
        </trans-unit>
        <trans-unit id="4b14231a260dc38bfc76eb01c0bd7737b636bfc6" translate="yes" xml:space="preserve">
          <source>. As a binary operator, it has two children: the add operator, providing the result of &lt;code&gt;$b+$c&lt;/code&gt;, is uppermost on line 5, and the left hand side is on line 10.</source>
          <target state="translated">。二項演算子として、2つの子があります。 &lt;code&gt;$b+$c&lt;/code&gt; 結果を提供するadd演算子は、5行目の最上部にあり、左側は10行目にあります。</target>
        </trans-unit>
        <trans-unit id="53d4b5ccec1621f068b34a98df82654fe06d0665" translate="yes" xml:space="preserve">
          <source>. As a corollary, though the actual tree contains more nodes than our simplified example, the execution order is the same as in our example.</source>
          <target state="translated">。当然の結果として、実際のツリーには簡略化した例よりも多くのノードが含まれていますが、実行順序はこの例と同じです。</target>
        </trans-unit>
        <trans-unit id="c525726c99728c892ca019d38a86d797ed1a27e8" translate="yes" xml:space="preserve">
          <source>. As yet there is nothing useful you can do with the object at the perl level.</source>
          <target state="translated">。まだ、perlレベルでオブジェクトを使用して実行できる便利なものはありません。</target>
        </trans-unit>
        <trans-unit id="3a1ba0a96e2cd6c9d394a4472d471f9ff7cd31bc" translate="yes" xml:space="preserve">
          <source>. Assuming such an entry is found, various things then happen, depending on the value found:</source>
          <target state="translated">。そのようなエントリが見つかったとすると、見つかった値に応じて、さまざまなことが起こります。</target>
        </trans-unit>
        <trans-unit id="da93ec95ac544504e474beee8e0bb9e569ea1865" translate="yes" xml:space="preserve">
          <source>. Basic blocks are sections of code that are entered only in the beginning and exited only at the end. For example, a conditional jump starts a basic block. Basic block profiling usually works by</source>
          <target state="translated">。基本ブロックは、最初にのみ入力され、最後にのみ終了するコードのセクションです。たとえば、条件付きジャンプは基本ブロックを開始します。基本的なブロックプロファイリングは通常、</target>
        </trans-unit>
        <trans-unit id="922dde6fe40fcfb9ac9ff6d274634cfcd6f24ba2" translate="yes" xml:space="preserve">
          <source>. Because we want the program to continue after detecting this error, it is essential that the stack be tidied up by removing the</source>
          <target state="translated">。このエラーを検出した後もプログラムを続行したいので、スタックを削除してスタックを片付けることが不可欠です</target>
        </trans-unit>
        <trans-unit id="38b8a4a88265debcef2bc8e73467237aa68e829c" translate="yes" xml:space="preserve">
          <source>. Both &lt;code&gt;sub1()&lt;/code&gt; and &lt;code&gt;sub2()&lt;/code&gt; access the global variable &lt;code&gt;$x&lt;/code&gt; , once to read and once to write. Depending on factors ranging from your thread implementation's scheduling algorithm to the phase of the moon, &lt;code&gt;$x&lt;/code&gt; can be 2 or 3.</source>
          <target state="translated">。 &lt;code&gt;sub1()&lt;/code&gt; と &lt;code&gt;sub2()&lt;/code&gt; はどちらも、グローバル変数 &lt;code&gt;$x&lt;/code&gt; アクセスします。1回は読み取り、もう1回は書き込みです。スレッド実装のスケジューリングアルゴリズムから月の満ち欠けまでの要因に応じて、 &lt;code&gt;$x&lt;/code&gt; は2または3になります。</target>
        </trans-unit>
        <trans-unit id="9064d30b3dca30231b47ba8d42e2cf553d0ed288" translate="yes" xml:space="preserve">
          <source>. Both &lt;code&gt;sub1()&lt;/code&gt; and &lt;code&gt;sub2()&lt;/code&gt; access the global variable &lt;code&gt;$x&lt;/code&gt;, once to read and once to write. Depending on factors ranging from your thread implementation's scheduling algorithm to the phase of the moon, &lt;code&gt;$x&lt;/code&gt; can be 2 or 3.</source>
          <target state="translated">。 &lt;code&gt;sub1()&lt;/code&gt; と &lt;code&gt;sub2()&lt;/code&gt; はどちらも、グローバル変数 &lt;code&gt;$x&lt;/code&gt; アクセスします。1回は読み取り用、もう1回は書き込み用です。スレッド実装のスケジューリングアルゴリズムから月の満ち欠けまでの範囲の要因に応じて、 &lt;code&gt;$x&lt;/code&gt; は2または3になります。</target>
        </trans-unit>
        <trans-unit id="998a439013a873f26870288508560a8fdb5f11eb" translate="yes" xml:space="preserve">
          <source>. But because of the nature of Macintosh paths, some additional possibilities are allowed to make using this routine give reasonable results for some common situations. In other words, you are also allowed to concatenate</source>
          <target state="translated">。しかし、Macintoshパスの性質上、このルーチンを使用していくつかの追加の可能性を許可することで、いくつかの一般的な状況で妥当な結果を得ることができます。つまり、連結することもできます</target>
        </trans-unit>
        <trans-unit id="6917b39371bfc155816910776071467b756a0d87" translate="yes" xml:space="preserve">
          <source>. By default, the modification date of the input file will be used, or the current date if input comes from &lt;code&gt;STDIN&lt;/code&gt;, and will be based on UTC (so that the output will be reproducible regardless of local time zone).</source>
          <target state="translated">。デフォルトでは、入力ファイルの変更日、または入力が &lt;code&gt;STDIN&lt;/code&gt; からのものである場合は現在の日付が使用され、UTCに基づいています（ローカルタイムゾーンに関係なく出力が再現可能になるように）。</target>
        </trans-unit>
        <trans-unit id="134d8dc01fba0b67a376310993c3d356147ceebd" translate="yes" xml:space="preserve">
          <source>. By default, this is set to the version of Perl you run &lt;b&gt;pod2man&lt;/b&gt; under. Setting this to the empty string will cause some *roff implementations to use the system default value.</source>
          <target state="translated">。デフォルトでは、これは&lt;b&gt;pod2man&lt;/b&gt;を実行するPerlのバージョンに設定されています。これを空の文字列に設定すると、一部の* roff実装はシステムのデフォルト値を使用します。</target>
        </trans-unit>
        <trans-unit id="bd199e23140531c836914088d48f55487bf7e65c" translate="yes" xml:space="preserve">
          <source>. Can be used to make sure that the UTF-8 flag is on, so that &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt; work as Unicode on strings containing characters in the range 0x80-0xFF (on ASCII and derivatives).</source>
          <target state="translated">。UTF-8フラグがオンになっていることを確認するために使用できます。これにより、 &lt;code&gt;\w&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/lc&quot;&gt;lc()&lt;/a&gt;&lt;/code&gt; が 0x80〜0xFFの範囲の文字を含む文字列（ASCIIおよび派生物）でUnicodeとして機能します。</target>
        </trans-unit>
        <trans-unit id="7b8d29b7aaa3a46be9be50380ab1ce3e867db600" translate="yes" xml:space="preserve">
          <source>. Chapters and page numbers are given using the following editions:</source>
          <target state="translated">。章とページ番号は、次のエディションを使用して示されています。</target>
        </trans-unit>
        <trans-unit id="995d80ebe5e9c631b25033fd42a932b6fa61b6b7" translate="yes" xml:space="preserve">
          <source>. Child subroutines have &lt;code&gt;_&lt;/code&gt; and the name length appended, so constants with 10 character names would be in &lt;code&gt;constant_10&lt;/code&gt; with the default</source>
          <target state="translated">。子サブルーチンには &lt;code&gt;_&lt;/code&gt; と名前の長さが追加されているため、10文字の名前を持つ &lt;code&gt;constant_10&lt;/code&gt; は、デフォルトではconstant_10になります。</target>
        </trans-unit>
        <trans-unit id="c63971449e6c29f2a08f74ad23883b2558d36606" translate="yes" xml:space="preserve">
          <source>. Choice of American/British/Other spellings is left as an exercise for the author of each bit of documentation. When patching documentation, try to emulate the documentation around you, rather than changing the existing prose.</source>
          <target state="translated">。アメリカ/イギリス/その他のスペルの選択は、ドキュメントの各ビットの作成者のための練習として残されています。文書にパッチを当てるときは、既存の文章を変更するのではなく、周囲の文書をエミュレートするようにしてください。</target>
        </trans-unit>
        <trans-unit id="7250762f6576023d602a07cc49bcc6fd77306c0e" translate="yes" xml:space="preserve">
          <source>. Common examples are &lt;code&gt;\t&lt;/code&gt; for a tab, &lt;code&gt;\n&lt;/code&gt; for a newline, &lt;code&gt;\r&lt;/code&gt; for a carriage return and &lt;code&gt;\a&lt;/code&gt; for a bell (or alert). If your string is better thought of as a sequence of arbitrary bytes, the octal escape sequence,</source>
          <target state="translated">。一般的な例は、タブの場合は &lt;code&gt;\t&lt;/code&gt; 、改行の &lt;code&gt;\n&lt;/code&gt; は\ n、キャリッジリターンの場合は &lt;code&gt;\r&lt;/code&gt; 、ベル（またはアラート）の場合は &lt;code&gt;\a&lt;/code&gt; です。文字列が任意のバイトのシーケンス、8進エスケープシーケンスとしてより適切に考えられる場合、</target>
        </trans-unit>
        <trans-unit id="58ab3092f216e58d0241856d21b4fdcc0acc1fa6" translate="yes" xml:space="preserve">
          <source>. Common examples are &lt;code&gt;\t&lt;/code&gt; for a tab, &lt;code&gt;\n&lt;/code&gt; for a newline, &lt;code&gt;\r&lt;/code&gt; for a carriage return and &lt;code&gt;\a&lt;/code&gt; for a bell (or alert). If your string is better thought of as a sequence of arbitrary bytes, the octal escape sequence, e.g., &lt;code&gt;\033&lt;/code&gt; , or hexadecimal escape sequence, e.g., &lt;code&gt;\x1B&lt;/code&gt; may be a more natural representation for your bytes. Here are some examples of escapes:</source>
          <target state="translated">。一般的な例は、タブの &lt;code&gt;\t&lt;/code&gt; 、改行の &lt;code&gt;\n&lt;/code&gt; 、キャリッジリターンの &lt;code&gt;\r&lt;/code&gt; 、およびベル（またはアラート）の &lt;code&gt;\a&lt;/code&gt; です。文字列が任意のバイトのシーケンスとして考えられる場合、 &lt;code&gt;\033&lt;/code&gt; などの8進数のエスケープシーケンス、または &lt;code&gt;\x1B&lt;/code&gt; などの16進数のエスケープシーケンスは、バイトのより自然な表現になる場合があります。エスケープの例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="3d7e30195a0de047a3242c04e44600623627b182" translate="yes" xml:space="preserve">
          <source>. Copy or link</source>
          <target state="translated">。コピーまたはリンク</target>
        </trans-unit>
        <trans-unit id="79825b16c77c06b44977118fac4eea014741e249" translate="yes" xml:space="preserve">
          <source>. Currently OS/2 support of threads is very preliminary.</source>
          <target state="translated">。現在、スレッドのOS / 2サポートは非​​常に予備的なものです。</target>
        </trans-unit>
        <trans-unit id="135c9f2f36a34ddc0a2893c23665c762d2104afc" translate="yes" xml:space="preserve">
          <source>. Currently the maximum possible number of distinct regops is restricted to 256, with about a quarter already used.</source>
          <target state="translated">。現在、可能なregopsの最大数は256に制限されており、約4分の1がすでに使用されています。</target>
        </trans-unit>
        <trans-unit id="f5a874263e45933953bf0ed324a58df137c7e708" translate="yes" xml:space="preserve">
          <source>. Currently, there are only two styles: &lt;code&gt;lib&lt;/code&gt; and</source>
          <target state="translated">。現在、スタイルは &lt;code&gt;lib&lt;/code&gt; とlibの 2つのみです。</target>
        </trans-unit>
        <trans-unit id="53e5505050f1982d7363ce9cde826d9f92f57a58" translate="yes" xml:space="preserve">
          <source>. Decoding will terminate when $terminator (a string) appears in output.</source>
          <target state="translated">。$ terminator（文字列）が出力に表示されると、デコードは終了します。</target>
        </trans-unit>
        <trans-unit id="b4d5356abfd15d96c68ec478d2dd65b1348c5fec" translate="yes" xml:space="preserve">
          <source>. Determines how to map a Unicode character into a byte sequence.</source>
          <target state="translated">。Unicode文字をバイトシーケンスにマップする方法を決定します。</target>
        </trans-unit>
        <trans-unit id="59c539a141527ad47946cca8b46d791f7d164400" translate="yes" xml:space="preserve">
          <source>. Do not disturb that installation unless you really know what you are doing. If you remove the perl supplied with the OS, you will render some bits of your system inoperable. If you wish to install a newer version of perl, install it under a different prefix from /usr/perl5. Common prefixes to use are /usr/local and /opt/perl.</source>
          <target state="translated">。自分が何をしているか本当に理解していない限り、そのインストールを妨害しないでください。OSに付属のperlを削除すると、システムの一部が動作しなくなります。新しいバージョンのperlをインストールする場合は、/ usr / perl5とは異なるプレフィックスでインストールしてください。使用する一般的なプレフィックスは/ usr / localと/ opt / perlです。</target>
        </trans-unit>
        <trans-unit id="93b36a13a574d58a76b40f626c241af718c19914" translate="yes" xml:space="preserve">
          <source>. Don't use them in production code. Yet.</source>
          <target state="translated">。量産コードでは使用しないでください。まだ。</target>
        </trans-unit>
        <trans-unit id="7fd37bab10468d9938f078309153e9437be5450a" translate="yes" xml:space="preserve">
          <source>. E.g.</source>
          <target state="translated">。例えば</target>
        </trans-unit>
        <trans-unit id="25ce36fbbb17f8d1b0a4109d1371fa2f34186024" translate="yes" xml:space="preserve">
          <source>. Each has at least four hexdigits.</source>
          <target state="translated">。それぞれに少なくとも4つの16進数があります。</target>
        </trans-unit>
        <trans-unit id="b4404b6be911fb9ccd359c1128f3d94cffa4c329" translate="yes" xml:space="preserve">
          <source>. Each has at least four hexdigits. The codes may be preceded by a word enclosed in angle brackets, then a space, like &lt;code&gt;&amp;lt;compat&amp;gt; &lt;/code&gt; , giving the type of decomposition</source>
          <target state="translated">。それぞれに少なくとも4つの16進数があります。コードの前に山かっこで囲まれた単語があり、次に &lt;code&gt;&amp;lt;compat&amp;gt; &lt;/code&gt; のようなスペースがあり、分解のタイプを示します。</target>
        </trans-unit>
        <trans-unit id="198cd1fd252c543c7320dd12efcd77fe03ea2db7" translate="yes" xml:space="preserve">
          <source>. Each has at least four hexdigits. The codes may be preceded by a word enclosed in angle brackets, then a space, like &lt;code&gt;&amp;lt;compat&amp;gt; &lt;/code&gt;, giving the type of decomposition</source>
          <target state="translated">。それぞれに少なくとも4つの16進数字があります。コードの前には山かっこで囲まれた単語を付け、次に &lt;code&gt;&amp;lt;compat&amp;gt; &lt;/code&gt; のようにスペースを入れて、分解のタイプを示します。</target>
        </trans-unit>
        <trans-unit id="63141e3b2c36400b64267234149999ae2c55ef9a" translate="yes" xml:space="preserve">
          <source>. Either because it doesn't make sense to back-port that part of the API, or simply because it hasn't been implemented yet. Patches welcome!</source>
          <target state="translated">。APIのその部分をバックポートしても意味がないためか、単に実装されていないためです。パッチは大歓迎です！</target>
        </trans-unit>
        <trans-unit id="66213f4444d55cf06422645edab101d784d01cec" translate="yes" xml:space="preserve">
          <source>. Except on Windows, this will continue to use certain of the POSIX 2008 functions in some situations. If these are buggy, you can pass the following to</source>
          <target state="translated">。Windowsを除いて、これはいくつかの状況でPOSIX2008の特定の機能を引き続き使用します。これらにバグがある場合は、以下をに渡すことができます</target>
        </trans-unit>
        <trans-unit id="103da34daa28d7627bfd7c2b3ec90e61135c836c" translate="yes" xml:space="preserve">
          <source>. Finally, the &quot;.&quot; metacharacter matches any character except &quot;\n&quot; (unless you use &lt;code&gt;/s&lt;/code&gt;).</source>
          <target state="translated">。最後に、「。」メタ文字は &quot;\ n&quot;を除くすべての文字に一致します（ &lt;code&gt;/s&lt;/code&gt; を使用する場合を除く）。</target>
        </trans-unit>
        <trans-unit id="dd14e4e8fe1dec95a597ebea05ec4794df85b973" translate="yes" xml:space="preserve">
          <source>. For compatibility with Unix usage, the type and version may also be omitted.</source>
          <target state="translated">。Unixの使用法との互換性のために、タイプとバージョンも省略できます。</target>
        </trans-unit>
        <trans-unit id="21e6eee63986fc4ab76895ba12b2ec35a0403931" translate="yes" xml:space="preserve">
          <source>. For each thing you test, an &lt;code&gt;ok&lt;/code&gt; is printed. Simple. &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt; interprets your test results to determine if you succeeded or failed (more on that later).</source>
          <target state="translated">。テストする &lt;code&gt;ok&lt;/code&gt; に、OKが出力されます。シンプル。&lt;a href=&quot;Test::Harness&quot;&gt;Test :: Harness&lt;/a&gt;は、テスト結果を解釈して、成功したか失敗したかを判断します（詳細は後で説明します）。</target>
        </trans-unit>
        <trans-unit id="b3d2c0dfaacb26c7f33418797db935878bbdde14" translate="yes" xml:space="preserve">
          <source>. For example,</source>
          <target state="translated">。例えば、</target>
        </trans-unit>
        <trans-unit id="740611fcdc6870a843c2364c8e58c7ed97b112e4" translate="yes" xml:space="preserve">
          <source>. For example, a Korean Hangul syllable is considered a single logical character, but most often consists of three actual Unicode characters: a leading consonant followed by an interior vowel followed by a trailing consonant.</source>
          <target state="translated">。たとえば、韓国語のハングル音節は単一の論理文字と見なされますが、ほとんどの場合、3つの実際のUnicode文字で構成されます：先頭の子音、それに続く内母音、それに続く末尾の子音。</target>
        </trans-unit>
        <trans-unit id="cce03d7971acdd7f9bb1878ccf1c234bf855ffee" translate="yes" xml:space="preserve">
          <source>. For example, if you had tests in:</source>
          <target state="translated">。たとえば、次の場所でテストを行った場合：</target>
        </trans-unit>
        <trans-unit id="042727f423f9fa6f93e1e3706fb37670c040c890" translate="yes" xml:space="preserve">
          <source>. For example, if your code would normally go into</source>
          <target state="translated">。たとえば、コードが通常に入る場合</target>
        </trans-unit>
        <trans-unit id="4f3f25bc941622e7175e3969043f856eeb61133e" translate="yes" xml:space="preserve">
          <source>. For example, they may crash the Perl interpreter during execution, or may dump core on termination. Depending on the module and the requirements of your application, it may be possible to work around such difficulties.</source>
          <target state="translated">。たとえば、実行中にPerlインタープリターをクラッシュさせたり、終了時にコアをダンプしたりする可能性があります。モジュールとアプリケーションの要件によっては、このような問題を回避できる場合があります。</target>
        </trans-unit>
        <trans-unit id="b17ecac96b1adb18dd520ee9c0b9bae11aca3ab3" translate="yes" xml:space="preserve">
          <source>. For example:</source>
          <target state="translated">。例えば：</target>
        </trans-unit>
        <trans-unit id="2fddca2af68b08afcb09b50d2195be9684be0734" translate="yes" xml:space="preserve">
          <source>. For exploring Unicode character names and character properties, see its</source>
          <target state="translated">。Unicodeの文字名と文字プロパティについて詳しくは、</target>
        </trans-unit>
        <trans-unit id="03024fb1bbe5faa78991a7214c34450e71dc2c32" translate="yes" xml:space="preserve">
          <source>. For other data types, or to examine return values, you'll need to manipulate the Perl stack. That's demonstrated in &lt;a href=&quot;#Fiddling-with-the-Perl-stack-from-your-C-program&quot;&gt;&quot;Fiddling with the Perl stack from your C program&quot;&lt;/a&gt;.</source>
          <target state="translated">。他のデータ型の場合、または戻り値を調べるには、Perlスタックを操作する必要があります。これは、&lt;a href=&quot;#Fiddling-with-the-Perl-stack-from-your-C-program&quot;&gt;「CプログラムからのPerlスタックをいじる」で&lt;/a&gt;示されています。</target>
        </trans-unit>
        <trans-unit id="547c378c2449b9e81e8aa82ca93843bb7c621101" translate="yes" xml:space="preserve">
          <source>. For other data types, or to examine return values, you'll need to manipulate the Perl stack. That's demonstrated in &lt;a href=&quot;#Fiddling-with-the-Perl-stack-from-your-C-program&quot;&gt;Fiddling with the Perl stack from your C program&lt;/a&gt;.</source>
          <target state="translated">。他のデータ型の場合、または戻り値を調べるには、Perlスタックを操作する必要があります。これ&lt;a href=&quot;#Fiddling-with-the-Perl-stack-from-your-C-program&quot;&gt;は、CプログラムのPerlスタックを使用&lt;/a&gt;したフィドリングで実証されています。</target>
        </trans-unit>
        <trans-unit id="cdc504208ff194a9a78aeb193e18917b2314acc4" translate="yes" xml:space="preserve">
          <source>. FreeBSD 7 and earlier has a bug where either approach sometimes returns an incorrect value (see &lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&lt;/a&gt; ). In these cases perl will fall back to the old behaviour of using C's &lt;code&gt;argv[0]&lt;/code&gt; value for &lt;code&gt;$^X&lt;/code&gt;.</source>
          <target state="translated">。FreeBSD 7以前には、どちらのアプローチでも誤った値が返されることがあるというバグがあります（&lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703を参照&lt;/a&gt;）。これらの場合、perlは &lt;code&gt;$^X&lt;/code&gt; Cの &lt;code&gt;argv[0]&lt;/code&gt; 値を使用するという古い動作にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="9acfc198f0b2223d41f4211f848b117ef3bae556" translate="yes" xml:space="preserve">
          <source>. FreeBSD 7 and earlier has a bug where either approach sometimes returns an incorrect value (see &lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&lt;/a&gt; ). In these cases perl will fall back to the old behaviour of using C's argv[0] value for &lt;code&gt;$^X&lt;/code&gt; .</source>
          <target state="translated">。FreeBSD 7およびそれ以前のバージョンには、どちらかのアプローチが誤った値を返すことがあるというバグがあります（&lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=35703を参照&lt;/a&gt;）。これらの場合、perlは &lt;code&gt;$^X&lt;/code&gt; Cのargv [0]値を使用するという古い動作にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="776299a173a3d589b8f3795e2f8b4c589b03ee73" translate="yes" xml:space="preserve">
          <source>. Given the amount of time between releases of Perl the version that ships with Perl is quite likely to be out of date, so the most recent version can always be found on CPAN (see &lt;a href=&quot;perlmodlib#CPAN&quot;&gt;&quot;CPAN&quot; in perlmodlib&lt;/a&gt; for details), in the directory</source>
          <target state="translated">。Perlのリリース間の時間の長さを考えると、Perlに同梱されているバージョンは古くなっている可能性が非常に高いため、最新バージョンは常にCPAN（詳細については&lt;a href=&quot;perlmodlib#CPAN&quot;&gt;、perlmodlibの「CPAN」&lt;/a&gt;を参照）のディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="5f2b60383e9beeed5eccc01696d85bb58945bce4" translate="yes" xml:space="preserve">
          <source>. Given the amount of time between releases of Perl the version that ships with Perl is quite likely to be out of date, so the most recent version can always be found on CPAN (see &lt;a href=&quot;perlmodlib#CPAN&quot;&gt;CPAN in perlmodlib&lt;/a&gt; for details), in the directory</source>
          <target state="translated">。Perlのリリース間の時間を考慮すると、Perlに同梱されているバージョンは古くなる可能性が非常に高いため、最新バージョンは常にCPAN（詳細について&lt;a href=&quot;perlmodlib#CPAN&quot;&gt;はperlmodlibのCPAN&lt;/a&gt;を参照）のディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="6f9e68beb7f0b151bc8fceae81cb1b8ad5d7794e" translate="yes" xml:space="preserve">
          <source>. Having perl build itself would be impossible with</source>
          <target state="translated">。perlをビルドすること自体は不可能です</target>
        </trans-unit>
        <trans-unit id="1a7251116ddbed3c5631886b0448ee300597e327" translate="yes" xml:space="preserve">
          <source>. Here is a regexp with nested groups:</source>
          <target state="translated">。ネストされたグループを持つ正規表現は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e70c7aa2494034e63eb8b4f2b22846a01d30041b" translate="yes" xml:space="preserve">
          <source>. However, it is possible to</source>
          <target state="translated">。ただし、</target>
        </trans-unit>
        <trans-unit id="41c7fa0e40900a8664ba983241943a10f0848bc9" translate="yes" xml:space="preserve">
          <source>. However, your host system and Cygwin configuration will affect Perl's runtime behavior (see &lt;a href=&quot;#TEST&quot;&gt;&quot;TEST&quot;&lt;/a&gt;).</source>
          <target state="translated">。ただし、ホストシステムとCygwin構成は、Perlの実行時の動作に影響します（&lt;a href=&quot;#TEST&quot;&gt;「テスト」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c7a0e55016332e0c5271c0854d6a9c26c89598fb" translate="yes" xml:space="preserve">
          <source>. However, your host system and Cygwin configuration will affect Perl's runtime behavior (see &lt;a href=&quot;#TEST&quot;&gt;TEST&lt;/a&gt;).</source>
          <target state="translated">。ただし、ホストシステムとCygwinの構成は、Perlの実行時の動作に影響します（&lt;a href=&quot;#TEST&quot;&gt;TESTを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="96283c0c3b8fe3d7cdfa1e152ea82dd4983135dd" translate="yes" xml:space="preserve">
          <source>. I suggest only to use this option to parse application-specific files written by humans (configuration files, resource files etc.)</source>
          <target state="translated">。このオプションは、人間が作成したアプリケーション固有のファイル（構成ファイル、リソースファイルなど）を解析する場合にのみ使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f863c23a93501fd973cdcb1d746f38bd8aa20cad" translate="yes" xml:space="preserve">
          <source>. If</source>
          <target state="translated">。もし</target>
        </trans-unit>
        <trans-unit id="7f0c2910442f1f0b575ce98071a1f0ff5753a782" translate="yes" xml:space="preserve">
          <source>. If &lt;code&gt;quoteHighBit&lt;/code&gt; is set, they will be quoted.</source>
          <target state="translated">。 &lt;code&gt;quoteHighBit&lt;/code&gt; が設定されている場合は、引用されます。</target>
        </trans-unit>
        <trans-unit id="da97ea613d41ccc8d570e6df5a8ec2180521c7e4" translate="yes" xml:space="preserve">
          <source>. If a group did not match, the associated backreference won't match either. (This can happen if the group is optional, or in a different branch of an alternation.) You can omit the &lt;code&gt;&quot;g&quot;&lt;/code&gt;, and write &lt;code&gt;&quot;\1&quot;&lt;/code&gt;,</source>
          <target state="translated">。グループが一致しなかった場合、関連する後方参照も一致しません。（グループがオプションである、または交互の異なるブランチであれば、この現象が発生することができます。）あなたは、省略することができ &lt;code&gt;&quot;g&quot;&lt;/code&gt; 、および書き込み &lt;code&gt;&quot;\1&quot;&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="d44fe27c9789df6d9edbedc8e0441cfadb796292" translate="yes" xml:space="preserve">
          <source>. If all that fails it &lt;code&gt;croak&lt;/code&gt; s.</source>
          <target state="translated">。それがすべて失敗した場合、それは &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="14b2357e7fcb2bcf90785e6fef6ea540ef76b840" translate="yes" xml:space="preserve">
          <source>. If all that fails it &lt;code&gt;croak&lt;/code&gt;s.</source>
          <target state="translated">。それがすべて失敗した場合、それは &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="dbe4ccac3b5962271b48921e81142f21abf8b496" translate="yes" xml:space="preserve">
          <source>. If an object is a noun, then methods are its verbs (save, print, open).</source>
          <target state="translated">。オブジェクトが名詞の場合、メソッドはその動詞（保存、印刷、開く）です。</target>
        </trans-unit>
        <trans-unit id="d6d823fabc5313d54be7c53757154c9b35bde3e3" translate="yes" xml:space="preserve">
          <source>. If called as a class method, a new object is created; if called as an instance method, the object is reset to the state contained in</source>
          <target state="translated">。クラスメソッドとして呼び出されると、新しいオブジェクトが作成されます。インスタンスメソッドとして呼び出された場合、オブジェクトは含まれている状態にリセットされます</target>
        </trans-unit>
        <trans-unit id="2be741d48d441b8c30f1f1c49c12f9fc308d28a8" translate="yes" xml:space="preserve">
          <source>. If defined, it should be a search list, each element of which specifies a location for &lt;code&gt;%ENV&lt;/code&gt; elements. If you tell Perl to read or set the element &lt;code&gt;$ENV{&lt;/code&gt;</source>
          <target state="translated">。定義する場合は、各リスト要素が &lt;code&gt;%ENV&lt;/code&gt; 要素の場所を指定する検索リストである必要があります。要素 &lt;code&gt;$ENV{&lt;/code&gt; を読み取るか設定するようにPerlに指示した場合</target>
        </trans-unit>
        <trans-unit id="cb88233b9470d06775dbd0f8abd50e567ad6f88f" translate="yes" xml:space="preserve">
          <source>. If found, Perl checks the start of the file for magic strings &lt;code&gt;&quot;#!&quot;&lt;/code&gt; and &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; . If found, Perl uses the rest of the first line as the beginning of the command line to run this script. The only mangling done to the first line is extraction of arguments (currently up to 3), and ignoring of the path-part of the &quot;interpreter&quot; name if it can't be found using the full path.</source>
          <target state="translated">。見つかった場合、Perlはファイルの先頭でマジックストリング &lt;code&gt;&quot;#!&quot;&lt;/code&gt; チェックします。と &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; 。見つかった場合、Perlは最初の行の残りをコマンドラインの先頭として使用して、このスクリプトを実行します。最初の行に対して行われる唯一の変換は、引数の抽出（現在は3つまで）であり、フルパスを使用しても見つからない場合は、「インタープリター」名のパス部分を無視します。</target>
        </trans-unit>
        <trans-unit id="ef1e5bf8cac901010071b6fa1937db5cb94871bc" translate="yes" xml:space="preserve">
          <source>. If found, Perl checks the start of the file for magic strings &lt;code&gt;&quot;#!&quot;&lt;/code&gt; and &lt;code&gt;&quot;extproc &quot;&lt;/code&gt;. If found, Perl uses the rest of the first line as the beginning of the command line to run this script. The only mangling done to the first line is extraction of arguments (currently up to 3), and ignoring of the path-part of the &quot;interpreter&quot; name if it can't be found using the full path.</source>
          <target state="translated">。見つかった場合、Perlはファイルの先頭でマジックストリング &lt;code&gt;&quot;#!&quot;&lt;/code&gt; チェックします。および &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; 。見つかった場合、Perlは最初の行の残りをコマンドラインの先頭として使用してこのスクリプトを実行します。最初の行に対して行われる唯一のマングリングは、引数の抽出（現在は最大3つ）と、フルパスを使用して見つからない場合は「インタープリター」名のパス部分を無視することです。</target>
        </trans-unit>
        <trans-unit id="7968febd03fe8bde1f86e5757cb445071be1de4f" translate="yes" xml:space="preserve">
          <source>. If it does not give an error -- wrong</source>
          <target state="translated">。エラーが発生しない場合-間違い</target>
        </trans-unit>
        <trans-unit id="3246f36b641961e96375e555d041b988c40cef52" translate="yes" xml:space="preserve">
          <source>. If it has no repeat count or uses a '*', the number of available items is used.</source>
          <target state="translated">。繰り返し数がない場合、または「*」を使用する場合は、使用可能なアイテムの数が使用されます。</target>
        </trans-unit>
        <trans-unit id="cdd29a6866d7877a8bab1f7946635ac6580b7bf2" translate="yes" xml:space="preserve">
          <source>. If successful, the instance</source>
          <target state="translated">。成功した場合、インスタンス</target>
        </trans-unit>
        <trans-unit id="c4f93a6d580968e7afb023f127bdef8253516411" translate="yes" xml:space="preserve">
          <source>. If the &lt;code&gt;/a&lt;/code&gt; regular expression modifier is in effect, it matches [0-9]. Otherwise, it matches anything that is matched by &lt;code&gt;\p{Digit}&lt;/code&gt; , which includes [0-9]. (An unlikely possible exception is that under locale matching rules, the current locale might not have &lt;code&gt;[0-9]&lt;/code&gt; matched by &lt;code&gt;\d&lt;/code&gt; , and/or might match other characters whose code point is less than 256. The only such locale definitions that are legal would be to match &lt;code&gt;[0-9]&lt;/code&gt; plus another set of 10 consecutive digit characters; anything else would be in violation of the C language standard, but Perl doesn't currently assume anything in regard to this.)</source>
          <target state="translated">。 &lt;code&gt;/a&lt;/code&gt; 正規表現修飾子が有効な場合、[0-9]に一致します。それ以外の場合は、[0-9]を含む &lt;code&gt;\p{Digit}&lt;/code&gt; に一致するすべてのものに一致します。（ありそうもない可能性のある例外は、ロケールマッチングルールの下で、現在のロケールが &lt;code&gt;\d&lt;/code&gt; と一致する &lt;code&gt;[0-9]&lt;/code&gt; を持たない場合や、コードポイントが256未満の他の文字と一致する場合があることです。そのようなロケール定義は、合法とは、 &lt;code&gt;[0-9]&lt;/code&gt; に加えて10桁の連続する数字のセットを照合することです。それ以外のものはC言語標準に違反しますが、Perlは現在これに関して何も想定していません。）</target>
        </trans-unit>
        <trans-unit id="34d095c4fc5388357c2c64a5e30566b16b7806a1" translate="yes" xml:space="preserve">
          <source>. If the &lt;code&gt;/a&lt;/code&gt; regular expression modifier is in effect, it matches [0-9]. Otherwise, it matches anything that is matched by &lt;code&gt;\p{Digit}&lt;/code&gt;, which includes [0-9]. (An unlikely possible exception is that under locale matching rules, the current locale might not have &lt;code&gt;[0-9]&lt;/code&gt; matched by &lt;code&gt;\d&lt;/code&gt;, and/or might match other characters whose code point is less than 256. The only such locale definitions that are legal would be to match &lt;code&gt;[0-9]&lt;/code&gt; plus another set of 10 consecutive digit characters; anything else would be in violation of the C language standard, but Perl doesn't currently assume anything in regard to this.)</source>
          <target state="translated">。 &lt;code&gt;/a&lt;/code&gt; 正規表現修飾子が有効な場合、[0-9]と一致します。それ以外の場合は、[0-9]を含む &lt;code&gt;\p{Digit}&lt;/code&gt; と一致するものすべてに一致します。 （ありそうもない例外は、ロケール一致ルールの下で、現在のロケールが &lt;code&gt;\d&lt;/code&gt; と一致する &lt;code&gt;[0-9]&lt;/code&gt; を持たないか、コードポイントが256未満の他の文字と一致する可能性があることです。正当なのは、 &lt;code&gt;[0-9]&lt;/code&gt; と10個の連続した数字の別のセットを一致させることです。それ以外はC言語標準に違反しますが、Perlは現在これに関して何も想定していません。）</target>
        </trans-unit>
        <trans-unit id="ed7f56f814a53f5d8a3417d988acd289ad7a8311" translate="yes" xml:space="preserve">
          <source>. If the argument is missing, or equal to the empty string, the state information will be read from STDIN.</source>
          <target state="translated">。引数がない場合、または空の文字列と等しい場合、状態情報はSTDINから読み取られます。</target>
        </trans-unit>
        <trans-unit id="5824b191dbb77148d2f73c4545651fad0017e95b" translate="yes" xml:space="preserve">
          <source>. If the argument is missing, or equal to the empty string, the state information will be written to STDOUT.</source>
          <target state="translated">。引数がない場合、または空の文字列と等しい場合、状態情報はSTDOUTに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="86c19918bb0e315fb37ff3bcb89d4d1d00e53177" translate="yes" xml:space="preserve">
          <source>. If the argument is missing, the object will continue using the same algorithm that was selected at creation.</source>
          <target state="translated">。引数がない場合、オブジェクトは作成時に選択されたのと同じアルゴリズムを使用して続行されます。</target>
        </trans-unit>
        <trans-unit id="ad394d00d49595ece3375d873bc65795f9a2a320" translate="yes" xml:space="preserve">
          <source>. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_bin&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</source>
          <target state="translated">。値がある場合&amp;gt; UV_MAXの &lt;code&gt;grok_bin&lt;/code&gt; が UV_MAXを返し、設定 &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; は出力フラグに、とに値を書き込み、</target>
        </trans-unit>
        <trans-unit id="340acc0c90a3ff630e29f3732ec436ada4a5d8ab" translate="yes" xml:space="preserve">
          <source>. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_hex&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</source>
          <target state="translated">。値がある場合&amp;gt; UV_MAXの &lt;code&gt;grok_hex&lt;/code&gt; が UV_MAXを返し、設定 &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; は出力フラグに、とに値を書き込み、</target>
        </trans-unit>
        <trans-unit id="d2fe051154b3bd8b24a4c3334242986da9165e62" translate="yes" xml:space="preserve">
          <source>. If the value is &amp;gt; UV_MAX &lt;code&gt;grok_oct&lt;/code&gt; returns UV_MAX, sets &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; in the output flags, and writes the value to</source>
          <target state="translated">。値がある場合&amp;gt; UV_MAXの &lt;code&gt;grok_oct&lt;/code&gt; が UV_MAXを返し、設定 &lt;code&gt;PERL_SCAN_GREATER_THAN_UV_MAX&lt;/code&gt; は出力フラグに、とに値を書き込み、</target>
        </trans-unit>
        <trans-unit id="206aba5c7d9a84ce157c9a5e9c114a73d70137fc" translate="yes" xml:space="preserve">
          <source>. If there is no single code point folding defined for</source>
          <target state="translated">。に対して定義されている単一のコードポイントフォールディングがない場合</target>
        </trans-unit>
        <trans-unit id="1844efc2f3254e2a8d6a689f5eb6ab9ff69cba74" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions.</source>
          <target state="translated">。これにより配列が大きくなる場合は、クラスの &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; のマッピングを新しい位置に返す必要があります。</target>
        </trans-unit>
        <trans-unit id="c3aca0699f7236e45654ffe7027a808f1c3c2b60" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</source>
          <target state="translated">。これにより配列が大きくなる場合は、クラスの &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; のマッピングを新しい位置に返す必要があります。配列が小さくなった場合は、カウントを超えるエントリを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="08fb67d65bc5a9b5387592c9b07f875d13efe0ce" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</source>
          <target state="translated">。これにより配列が大きくなる場合は、クラスの &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; のマッピングを新しい位置に返す必要があります。配列が小さくなった場合は、カウントを超えるエントリを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e37729bd5e4487339f7d4fb9164549c3140fefc" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;undef&lt;/code&gt; should be returned for new positions.</source>
          <target state="translated">。これにより配列が大きくなる場合は、クラスの &lt;code&gt;undef&lt;/code&gt; のマッピングを新しい位置に返す必要があります。</target>
        </trans-unit>
        <trans-unit id="dab97cd2cfab8913e7503a61e2eea4e88edee518" translate="yes" xml:space="preserve">
          <source>. If this makes the array larger then class's mapping of &lt;code&gt;undef&lt;/code&gt; should be returned for new positions. If the array becomes smaller then entries beyond count should be deleted.</source>
          <target state="translated">。これにより配列が大きくなる場合は、クラスの &lt;code&gt;undef&lt;/code&gt; のマッピングを新しい位置に返す必要があります。配列が小さくなる場合は、カウントを超えるエントリを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b55cfc74642aa13a70757a2bc05c0c5ec795164" translate="yes" xml:space="preserve">
          <source>. If you are unsure about the proper location of a file that may have gotten copied while building the source distribution, consult the</source>
          <target state="translated">。ソースディストリビューションの構築中にコピーされた可能性のあるファイルの適切な場所がわからない場合は、</target>
        </trans-unit>
        <trans-unit id="42dfc7aa5f4468ffdf4e181f7b588d8c5857bc31" translate="yes" xml:space="preserve">
          <source>. If you get into link386 prompts, press &lt;code&gt;Ctrl-C&lt;/code&gt; to exit.</source>
          <target state="translated">。link386プロンプトが表示されたら、 &lt;code&gt;Ctrl-C&lt;/code&gt; を押して終了します。</target>
        </trans-unit>
        <trans-unit id="1e7886d9569f9834e6bdaa9aa8eb1f34132432b7" translate="yes" xml:space="preserve">
          <source>. If you have such data then you should set &lt;code&gt;$Storable::interwork_56_64bit&lt;/code&gt; to a true value to make this Storable read and write files with the old header. You should also migrate your data, or any older perl you are communicating with, to this current version of Storable.</source>
          <target state="translated">。そのようなデータがある場合は、 &lt;code&gt;$Storable::interwork_56_64bit&lt;/code&gt; true値に設定して、このStorableが古いヘッダーを持つファイルを読み書きできるようにする必要があります。また、データまたは通信している古いperlをこの現在のバージョンのStorableに移行する必要があります。</target>
        </trans-unit>
        <trans-unit id="d408ab7cf188c609a4c4840fba41a06a381a4651" translate="yes" xml:space="preserve">
          <source>. If your input lines might end in backslashes to indicate continuation, you want to skip ahead and get the next record.</source>
          <target state="translated">。入力行が継続を示すためにバックスラッシュで終わる場合は、先にスキップして次のレコードを取得します。</target>
        </trans-unit>
        <trans-unit id="1e5ca4130c539ef91a8bd43fde83a107301c6560" translate="yes" xml:space="preserve">
          <source>. If your platform doesn't support &lt;code&gt;NaN&lt;/code&gt; 's then &lt;code&gt;NaN&lt;/code&gt; is just a string with numeric value 0.</source>
          <target state="translated">。お使いのプラットフォームがサポートされていない場合 &lt;code&gt;NaN&lt;/code&gt; の後、 &lt;code&gt;NaN&lt;/code&gt; は数値0と単なる文字列です。</target>
        </trans-unit>
        <trans-unit id="b6f709ff143f9f57f5b144c58bc6a764f7c6db40" translate="yes" xml:space="preserve">
          <source>. If your platform doesn't support &lt;code&gt;NaN&lt;/code&gt;'s then &lt;code&gt;NaN&lt;/code&gt; is just a string with numeric value 0.</source>
          <target state="translated">。お使いのプラットフォームがサポートされていない場合 &lt;code&gt;NaN&lt;/code&gt; の後、 &lt;code&gt;NaN&lt;/code&gt; は数値0と単なる文字列です。</target>
        </trans-unit>
        <trans-unit id="a4ca80b61fe20e9969c2abb733817edd354f5d14" translate="yes" xml:space="preserve">
          <source>. In 2010, version 2 of the &lt;a href=&quot;../cpan/meta/spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; was released, which mandates JSON format for the metadata in order to overcome certain compatibility issues between YAML serializers and to avoid breaking older clients unable to handle a new version of the spec. The &lt;a href=&quot;../cpan/meta&quot;&gt;CPAN::Meta&lt;/a&gt; library is now standard for accessing old and new-style Meta files.</source>
          <target state="translated">。2010年に、&lt;a href=&quot;../cpan/meta/spec&quot;&gt;CPAN :: Meta :: Specの&lt;/a&gt;バージョン2 がリリースされました。これは、YAMLシリアライザー間の特定の互換性の問題を克服し、古いバージョンのクライアントが仕様の新しいバージョンを処理できなくなるのを防ぐために、メタデータのJSON形式を義務付けます。&lt;a href=&quot;../cpan/meta&quot;&gt;CPAN ::メタ&lt;/a&gt;ライブラリは現在、古いものと新しいスタイルのメタファイルにアクセスするための規格です。</target>
        </trans-unit>
        <trans-unit id="3d4088bf6eb687364405a322e155ff1cc18adb96" translate="yes" xml:space="preserve">
          <source>. In 2010, version 2 of the &lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; was released, which mandates JSON format for the metadata in order to overcome certain compatibility issues between YAML serializers and to avoid breaking older clients unable to handle a new version of the spec. The &lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN::Meta&lt;/a&gt; library is now standard for accessing old and new-style Meta files.</source>
          <target state="translated">。2010年に、&lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN :: Meta :: Specの&lt;/a&gt;バージョン2がリリースされました。これは、YAMLシリアライザー間の特定の互換性の問題を克服し、新しいバージョンの仕様を処理できない古いクライアントを壊さないようにするために、メタデータのJSON形式を義務付けています。&lt;a href=&quot;CPAN::Meta&quot;&gt;CPAN ::メタ&lt;/a&gt;ライブラリは現在、古いものと新しいスタイルのメタファイルにアクセスするための規格です。</target>
        </trans-unit>
        <trans-unit id="d1c4b644424154ce3fe835b9230b290135cb482a" translate="yes" xml:space="preserve">
          <source>. In addition, if none of the functions in a list begin with the string &lt;b&gt;boot_&lt;/b&gt;, &lt;code&gt;Mksymlists&lt;/code&gt; will add a bootstrap function for that package, just as xsubpp does. (If a &lt;b&gt;boot_&amp;lt;pkg&amp;gt;&lt;/b&gt; function is present in the list, it is passed through unchanged.) If DL_FUNCS is not specified, it defaults to the bootstrap function for the extension specified in NAME.</source>
          <target state="translated">。さらに、リスト内の関数のいずれも文字列&lt;b&gt;boot_&lt;/b&gt;で始まっていない場合、 &lt;code&gt;Mksymlists&lt;/code&gt; は、xsubppと同様に、そのパッケージのブートストラップ関数を追加します。（&lt;b&gt;boot_ &amp;lt;pkg&amp;gt;&lt;/b&gt;関数がリストに存在する場合、変更されずに渡されます。）DL_FUNCSが指定されていない場合、デフォルトで、NAMEで指定された拡張のブートストラップ関数になります。</target>
        </trans-unit>
        <trans-unit id="4f54f5e8eb8e964c049379a404dfcd3f689f59be" translate="yes" xml:space="preserve">
          <source>. In fact there are an exponential number of ways to partition a string as a function of its length. A regexp may get lucky and match early in the process, but if there is no match, Perl will try</source>
          <target state="translated">。実際、文字列をその長さの関数として分割する方法は指数関数的にあります。正規表現は幸運に恵まれ、プロセスの早い段階で一致する可能性がありますが、一致するものがない場合、Perlは試行します</target>
        </trans-unit>
        <trans-unit id="c632e42e7e1458b43dc1ad99933142821a596870" translate="yes" xml:space="preserve">
          <source>. In fact,</source>
          <target state="translated">。実際には、</target>
        </trans-unit>
        <trans-unit id="bce9b2b9f8142db7d9ce85b3fc070c1b985539e3" translate="yes" xml:space="preserve">
          <source>. In geographical terms</source>
          <target state="translated">。地理的に</target>
        </trans-unit>
        <trans-unit id="87c6ca62a4ff7bfc3de8b73b2cb60e71a538d7f6" translate="yes" xml:space="preserve">
          <source>. In the unlikely case this is not the correct root, it is possible to override this with a hint value or command line option. This will be used in subsequent tests for AFSness in the configure and test process.</source>
          <target state="translated">。まれなケースでは、これは正しいルートではありません。ヒント値またはコマンドラインオプションでこれを上書きすることができます。これは、構成およびテストプロセスでのAFSnessの後続のテストで使用されます。</target>
        </trans-unit>
        <trans-unit id="dcbd585e38f590ba194a3793f06f22dab045cf12" translate="yes" xml:space="preserve">
          <source>. In this case all the above are true (but very simple) functions which call the underlying implementation.</source>
          <target state="translated">。この場合、上記のすべては、基礎となる実装を呼び出す真の（ただし非常に単純な）関数です。</target>
        </trans-unit>
        <trans-unit id="d360c3eb53a832cf7747d52bf236e2b0eebf4a3e" translate="yes" xml:space="preserve">
          <source>. In those cases when you &lt;b&gt;require&lt;/b&gt; a &lt;b&gt;.ph&lt;/b&gt; file containing syntax errors, instead of the cryptic</source>
          <target state="translated">。これらのケースでは、とき&lt;b&gt;必要&lt;/b&gt;&lt;b&gt;.PHの&lt;/b&gt;代わりに不可解なの構文エラーを含むファイルを、</target>
        </trans-unit>
        <trans-unit id="7b376a04246f5e00596e857391b316083a63b99d" translate="yes" xml:space="preserve">
          <source>. In turn, this hooks into an XSUB,</source>
          <target state="translated">。次に、これはXSUBにフックし、</target>
        </trans-unit>
        <trans-unit id="3420f60f0bca96a2a73c405a1a85c20704cb3bc5" translate="yes" xml:space="preserve">
          <source>. Individual modules in</source>
          <target state="translated">。の個々のモジュール</target>
        </trans-unit>
        <trans-unit id="a59f10c336a81d1ca73f037a2b8c92f6334418a6" translate="yes" xml:space="preserve">
          <source>. Inspect the &lt;code&gt;install&lt;/code&gt; logs (in the example above</source>
          <target state="translated">。 &lt;code&gt;install&lt;/code&gt; ログを検査します（上記の例の場合）</target>
        </trans-unit>
        <trans-unit id="25184bf63945467203d08f0de2a23c0f6dd54c05" translate="yes" xml:space="preserve">
          <source>. Instead, it will localize perl's notion of which filehandle &lt;code&gt;$.&lt;/code&gt; is currently aliased to.</source>
          <target state="translated">。代わりに、perlのどのファイルハンドル &lt;code&gt;$.&lt;/code&gt; の概念をローカライズします。現在エイリアスされています。</target>
        </trans-unit>
        <trans-unit id="99f7f86480d4ea94cae9f5397fe0142ca2f2d10b" translate="yes" xml:space="preserve">
          <source>. It cannot be cleared or deleted; attempts to do so are silently ignored.</source>
          <target state="translated">。消去または削除することはできません。そうしようとする試みは黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="e411fd2b458d1fe3f7731fd9a0f2621e9bb8a52f" translate="yes" xml:space="preserve">
          <source>. It couldn't possibly affect anything else, so no need to test beyond the single affected</source>
          <target state="translated">。それはおそらく他に影響を与えることはできなかったので、影響を受けた単一のものを超えてテストする必要はありません</target>
        </trans-unit>
        <trans-unit id="da9b899ea96554fef6c0b4c1d1118774a6a7f968" translate="yes" xml:space="preserve">
          <source>. It does suffer from the bug of mishandling newlines in pathnames, which you can fix if you follow the example under &lt;a href=&quot;#-0%5Boctal%2Fhexadecimal%5D&quot;&gt;-0&lt;/a&gt;.</source>
          <target state="translated">。パス名の改行を誤って処理するというバグがあります。これは、&lt;a href=&quot;#-0%5Boctal%2Fhexadecimal%5D&quot;&gt;-0&lt;/a&gt;の例に従うと修正できます。</target>
        </trans-unit>
        <trans-unit id="e7f2139db1ad9c91528643fba773777f505b8d50" translate="yes" xml:space="preserve">
          <source>. It has the values &quot;unsigned char&quot; or &lt;code&gt;char&lt;/code&gt; .</source>
          <target state="translated">。値は「unsigned char」または &lt;code&gt;char&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6599a22ad2cd0d14a7e4506327cf7d32758c3e13" translate="yes" xml:space="preserve">
          <source>. It has the values &quot;unsigned char&quot; or &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">。値は「unsignedchar」または &lt;code&gt;char&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="358df296223d08b4fb71d6b3899c26c08092421e" translate="yes" xml:space="preserve">
          <source>. It helps to ensure your test program ran all the way through and didn't die or skip some tests. &lt;code&gt;ok 1&lt;/code&gt; &quot;The first test passed.&quot; &lt;code&gt;not ok 2&lt;/code&gt; &quot;The second test failed&quot;. Test::Simple helpfully prints out some extra commentary about your tests.</source>
          <target state="translated">。これは、テストプログラムが完全に実行され、一部のテストが停止したりスキップされたりしないようにするのに役立ちます。 &lt;code&gt;ok 1&lt;/code&gt; 「最初のテストに合格しました。」 &lt;code&gt;not ok 2&lt;/code&gt; 2「2番目のテストに失敗しました」。Test :: Simpleは、テストに関する追加の解説を印刷するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="9f17a09d380724a3716b787a41ebd4613a73ee6f" translate="yes" xml:space="preserve">
          <source>. It is a plain '' if this is not the &lt;code&gt;GNU&lt;/code&gt; C library, or if the version is unknown.</source>
          <target state="translated">。これが &lt;code&gt;GNU&lt;/code&gt; Cライブラリでない場合、またはバージョンが不明な場合は、単純な ''です。</target>
        </trans-unit>
        <trans-unit id="d9968fc8b94f6a056c1a481b9936f565e393c904" translate="yes" xml:space="preserve">
          <source>. It is also used instead of explicit</source>
          <target state="translated">。明示的な代わりに使用されます</target>
        </trans-unit>
        <trans-unit id="d96c04f9a51ab5f437bd463e742a0003313be347" translate="yes" xml:space="preserve">
          <source>. It is conventionally invoked using the driver script &lt;b&gt;pod2man&lt;/b&gt;, but it can also be used directly.</source>
          <target state="translated">。これは通常、ドライバースクリプト&lt;b&gt;pod2man&lt;/b&gt;を使用して呼び出されますが、直接使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f513dd8d11fda24e9b49a220d530308d617cc39e" translate="yes" xml:space="preserve">
          <source>. It is defined primarily for backwards compatibility.</source>
          <target state="translated">。主に下位互換性のために定義されています。</target>
        </trans-unit>
        <trans-unit id="e2436b894ff16e0565f80d082127a7c7776b277b" translate="yes" xml:space="preserve">
          <source>. It is mainly used by other Configure units.</source>
          <target state="translated">。主に他の構成ユニットで使用されます。</target>
        </trans-unit>
        <trans-unit id="854700a6ac77224f1a5ecd22073ecc6739bef63d" translate="yes" xml:space="preserve">
          <source>. It is not for skipping genuine bugs (we'll get to that in a moment).</source>
          <target state="translated">。これは、本物のバグをスキップするためのものではありません（これについてはすぐに説明します）。</target>
        </trans-unit>
        <trans-unit id="16adfccff5a0fd918744c61c6f8ff806837a3906" translate="yes" xml:space="preserve">
          <source>. It is passed the following arguments:</source>
          <target state="translated">。次の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="f5b7a0d6e44f6ace7415a5296fb2dc7c29a44158" translate="yes" xml:space="preserve">
          <source>. It is primarily intended to be called from a message handler when they have been passed an exception they don't want to format.</source>
          <target state="translated">。これは主に、フォーマットしたくない例外が渡されたときにメッセージハンドラーから呼び出されることを目的としています。</target>
        </trans-unit>
        <trans-unit id="cb63e0a589c7c79183e0aee5a650e0d846db99ab" translate="yes" xml:space="preserve">
          <source>. It is unrelated to English</source>
          <target state="translated">。英語とは無関係</target>
        </trans-unit>
        <trans-unit id="74da5ff365578d17c8b9c1fe91da0e3966c4c014" translate="yes" xml:space="preserve">
          <source>. It should not be used for any other general YAML parsing or generation task.</source>
          <target state="translated">。他の一般的なYAML解析または生成タスクには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="b38290ed6629f0ba79cc60e3f039d22be0b31883" translate="yes" xml:space="preserve">
          <source>. It will always be 0.</source>
          <target state="translated">。常に0になります。</target>
        </trans-unit>
        <trans-unit id="c8ebeb64dfaf88dcb282fb968e8e06bb8fcc9b5f" translate="yes" xml:space="preserve">
          <source>. It will use the following search path to find default typemaps, with the rightmost typemap taking precedence.</source>
          <target state="translated">。次の検索パスを使用してデフォルトのタイプマップを検索します。一番右のタイプマップが優先されます。</target>
        </trans-unit>
        <trans-unit id="47b5a45699abc71afa96d3e0e904645134ffab28" translate="yes" xml:space="preserve">
          <source>. It works similar to the result of the Unix command</source>
          <target state="translated">。Unixコマンドの結果と同様に機能します</target>
        </trans-unit>
        <trans-unit id="5a643ab8daccf23ddaa3fb22633cc5ec24e871a4" translate="yes" xml:space="preserve">
          <source>. It'll work similarly for the second argument, but the third will be loaded as a file first.</source>
          <target state="translated">。2番目の引数でも同様に機能しますが、3番目の引数は最初にファイルとしてロードされます。</target>
        </trans-unit>
        <trans-unit id="4cf942d7c5a7a7cc8b5f51dca65695a4b4f21342" translate="yes" xml:space="preserve">
          <source>. It's an alternative to &lt;code&gt;make test&lt;/code&gt; .</source>
          <target state="translated">。それ &lt;code&gt;make test&lt;/code&gt; をするための代替手段です。</target>
        </trans-unit>
        <trans-unit id="d08b15eaba20ae4ffc714d0b24aa505e603f8dee" translate="yes" xml:space="preserve">
          <source>. It's an alternative to &lt;code&gt;make test&lt;/code&gt;.</source>
          <target state="translated">。これは、 &lt;code&gt;make test&lt;/code&gt; を行うための代替手段です。</target>
        </trans-unit>
        <trans-unit id="f65c423102d4b2bb387d6ce7ac29cea0b802bdc1" translate="yes" xml:space="preserve">
          <source>. Just follow the instructions, and 99% of the installation blues would go away.</source>
          <target state="translated">。指示に従うだけで、インストールブルースの99％がなくなります。</target>
        </trans-unit>
        <trans-unit id="f878690035ca0e58b744826cf63a8295cfc9f70e" translate="yes" xml:space="preserve">
          <source>. Later we'll see that this specification can contain more than just the option name. The reference to the variable is called the option</source>
          <target state="translated">。後で、この仕様にオプション名だけでなくそれ以外のものを含めることができることがわかります。変数への参照はオプションと呼ばれます</target>
        </trans-unit>
        <trans-unit id="8885267f0ed54b9a7692c1088a926a7ac95563d7" translate="yes" xml:space="preserve">
          <source>. MODE is usually a literal string comprising special characters that define the intended I/O role of the filehandle being created: whether it's read-only, or read-and-write, and so on.</source>
          <target state="translated">。MODEは通常、作成されるファイルハンドルの意図されたI / Oロールを定義する特殊文字で構成されるリテラル文字列です（読み取り専用か読み取り/書き込みかなど）。</target>
        </trans-unit>
        <trans-unit id="c4bea9eaa9bee5e3756e1d73231b1234be2ae6f1" translate="yes" xml:space="preserve">
          <source>. Mac OS support by Paul Schinder &amp;lt;schinder@pobox.com&amp;gt; and Thomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;.</source>
          <target state="translated">。Paul Schinder &amp;lt;schinder@pobox.com&amp;gt;およびThomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;によるMac OSサポート。</target>
        </trans-unit>
        <trans-unit id="fbb2a7d7d50b2bcb78d660bec6afabd731e0db6a" translate="yes" xml:space="preserve">
          <source>. Make sure each of those</source>
          <target state="translated">。それらのそれぞれを確認してください</target>
        </trans-unit>
        <trans-unit id="d2af23a9a799aeb1d6f76fd39a5251808a1a50e8" translate="yes" xml:space="preserve">
          <source>. More information on how to write good perldelta entries is available in the &lt;code&gt;Style&lt;/code&gt; section of</source>
          <target state="translated">。適切なperldeltaエントリを書き込む方法の詳細については、「 &lt;code&gt;Style&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="5fa79d5fe358db59b924db9e3afc91c8c4c97989" translate="yes" xml:space="preserve">
          <source>. None of the other processing of &lt;a href=&quot;perlapi#pad_add_name_pvn&quot;&gt;pad_add_name_pvn in perlapi&lt;/a&gt; is done. Returns the offset of the allocated pad slot.</source>
          <target state="translated">。&lt;a href=&quot;perlapi#pad_add_name_pvn&quot;&gt;perlapiの&lt;/a&gt;他のpad_add_name_pvnの処理は行われません。割り当てられたパッドスロットのオフセットを返します。</target>
        </trans-unit>
        <trans-unit id="d7039f806afb4a2ecb55b3bcaacedf3640a4cd77" translate="yes" xml:space="preserve">
          <source>. Note that all names passed to the user's</source>
          <target state="translated">。ユーザーに渡されるすべての名前に注意してください</target>
        </trans-unit>
        <trans-unit id="9be56d94b765d15db97085ae687fb211fbd1c96d" translate="yes" xml:space="preserve">
          <source>. Note that all names passed to the user's &lt;code&gt;wanted()&lt;/code&gt; function are still tainted. If this option is used while not in taint-mode, &lt;code&gt;untaint&lt;/code&gt; is a no-op.</source>
          <target state="translated">。ユーザーの &lt;code&gt;wanted()&lt;/code&gt; 関数に渡されたすべての名前はまだ汚染されていることに注意してください。汚染モードでないときにこのオプションを使用すると、 &lt;code&gt;untaint&lt;/code&gt; は何もしません。</target>
        </trans-unit>
        <trans-unit id="15bf0a4269dea3ad18ee10b385dbdaef11b74bf4" translate="yes" xml:space="preserve">
          <source>. Note that before these macros were added, Perl internals used to directly use character literals, so you may occasionally come across old code or documentation referring to 'U' magic rather than &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; for example.</source>
          <target state="translated">。これらのマクロが追加される前は、Perl内部は文字リテラルを直接使用していたため、たとえば &lt;code&gt;PERL_MAGIC_uvar&lt;/code&gt; ではなく「U」マジックを参照する古いコードやドキュメントに遭遇する場合があります。</target>
        </trans-unit>
        <trans-unit id="d06789deb8b5a7ca71d14547a85c1b9baded3394" translate="yes" xml:space="preserve">
          <source>. Note that extension code should</source>
          <target state="translated">。拡張コードは</target>
        </trans-unit>
        <trans-unit id="12457e722ccfc654c8bad69405188c5af0f50ae7" translate="yes" xml:space="preserve">
          <source>. Now we can add our tests to the end. First, we'll test that the &lt;code&gt;U&lt;/code&gt; does indeed create Unicode strings.</source>
          <target state="translated">。これで、テストを最後に追加できます。最初に、 &lt;code&gt;U&lt;/code&gt; が実際にUnicode文字列を作成することをテストします。</target>
        </trans-unit>
        <trans-unit id="95d8b82e403a24e94a8215ff5138e9129ce71d0a" translate="yes" xml:space="preserve">
          <source>. Of course, it'll need to be executable first, so &lt;code&gt;chmod 755 script.pl&lt;/code&gt; (under Unix).</source>
          <target state="translated">。もちろん、最初に実行可能にする必要があるため、 &lt;code&gt;chmod 755 script.pl&lt;/code&gt; （UNIXの場合）。</target>
        </trans-unit>
        <trans-unit id="7c64ceea87287666f57ddc1224318c09f3091913" translate="yes" xml:space="preserve">
          <source>. On building, &lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; doesn't require any of</source>
          <target state="translated">。ビルド時に、 &lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; は何も必要としません</target>
        </trans-unit>
        <trans-unit id="537b462bbd527cd649466c0e0e150e64a30e9e53" translate="yes" xml:space="preserve">
          <source>. On operating systems which do not require a specific extension for executable files, this variable is empty.</source>
          <target state="translated">。実行可能ファイルに特定の拡張子を必要としないオペレーティングシステムでは、この変数は空です。</target>
        </trans-unit>
        <trans-unit id="55026f126a81b220971a849c6c2cb68bb628095e" translate="yes" xml:space="preserve">
          <source>. Once the enclosing &quot;&amp;lt; ... &amp;gt;&quot; is removed, this is passed (more or less) unchanged to &lt;code&gt;File::Glob&lt;/code&gt; to carry out a file match.</source>
          <target state="translated">。囲んでいる &quot;&amp;lt;...&amp;gt;&quot;が削除されると、これは（多かれ少なかれ）変更されずに &lt;code&gt;File::Glob&lt;/code&gt; に渡され、ファイルの一致が実行されます。</target>
        </trans-unit>
        <trans-unit id="96e2b5e9bec44f8daa5c9f8eb8f20596cf31be4b" translate="yes" xml:space="preserve">
          <source>. One more rule is needed to understand how a match is determined for the whole regular expression: a match at an earlier position is always better than a match at a later position.</source>
          <target state="translated">。正規表現全体で一致がどのように決定されるかを理解するには、もう1つのルールが必要です。前の位置での一致は、後の位置での一致より常に優れています。</target>
        </trans-unit>
        <trans-unit id="4160bde3f72822338469aa8433b4b5304c3dcc97" translate="yes" xml:space="preserve">
          <source>. One way to do this on some systems is to set the environment variable &lt;code&gt;LD_RUN_PATH&lt;/code&gt; to the directory that will be the final location of the shared</source>
          <target state="translated">。一部のシステムでこれを行う1つの方法は、環境変数 &lt;code&gt;LD_RUN_PATH&lt;/code&gt; を、共有の最終的な場所になるディレクトリに設定することです。</target>
        </trans-unit>
        <trans-unit id="7be1ea0808dfeddc5a5ce7a2663e5bdfc11b4e99" translate="yes" xml:space="preserve">
          <source>. Otherwise it matches any character but &lt;code&gt;\n&lt;/code&gt; .</source>
          <target state="translated">。それ以外の場合は、 &lt;code&gt;\n&lt;/code&gt; 以外の任意の文字に一致します。</target>
        </trans-unit>
        <trans-unit id="f01c61f87df64d743068995bf6071556f53df117" translate="yes" xml:space="preserve">
          <source>. Otherwise it matches any character but &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">。それ以外の場合は、 &lt;code&gt;\n&lt;/code&gt; 以外の任意の文字と一致します。</target>
        </trans-unit>
        <trans-unit id="4c3e86c0fe5882b9760b15a3c30fea7570aedff9" translate="yes" xml:space="preserve">
          <source>. Otherwise, fall back on this implementation. The main use of this function is catching &lt;code&gt;-0.0&lt;/code&gt;.</source>
          <target state="translated">。それ以外の場合は、この実装にフォールバックします。この関数の主な用途は、 &lt;code&gt;-0.0&lt;/code&gt; をキャッチすることです。</target>
        </trans-unit>
        <trans-unit id="d6969174e97789c0a8cbd61099ffc2a91dee5f32" translate="yes" xml:space="preserve">
          <source>. Otherwise, if the</source>
          <target state="translated">。そうでなければ、</target>
        </trans-unit>
        <trans-unit id="41e0e8c07d38f87111e8a525a5b3f67ff5e752ad" translate="yes" xml:space="preserve">
          <source>. Otherwise, it returns the value of &lt;code&gt;$@&lt;/code&gt; associated with the thread's execution status in its &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; context.</source>
          <target state="translated">。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; コンテキストでのスレッドの実行ステータスに関連付けられている &lt;code&gt;$@&lt;/code&gt; の値を返します。</target>
        </trans-unit>
        <trans-unit id="5cc52cd40e11013f1b8d1c76e4bccb76648bab37" translate="yes" xml:space="preserve">
          <source>. Otherwise, it returns the value of &lt;code&gt;$@&lt;/code&gt; associated with the thread's execution status in its &lt;code&gt;eval&lt;/code&gt; context.</source>
          <target state="translated">。それ以外の場合は、 &lt;code&gt;eval&lt;/code&gt; コンテキストでスレッドの実行ステータスに関連付けられた &lt;code&gt;$@&lt;/code&gt; の値を返します。</target>
        </trans-unit>
        <trans-unit id="b1e71ea4d22f53b2eb30fcb146b06118897444ae" translate="yes" xml:space="preserve">
          <source>. Over the years, it has become standard to keep this information in one or more CPAN Meta files distributed with each distribution.</source>
          <target state="translated">。長年にわたって、各ディストリビューションで配布される1つ以上のCPANメタファイルにこの情報を保持することが標準になりました。</target>
        </trans-unit>
        <trans-unit id="06cf8affd89236a0eecaaa78bccddd732862b6d8" translate="yes" xml:space="preserve">
          <source>. Page numbers derive from the hardcover edition, first published in 1983 by George Allen &amp;amp; Unwin; no page numbers changed for the special 3-volume omnibus edition of 2002 or the various trade-paper editions, all again now by Harper Collins or Houghton Mifflin.</source>
          <target state="translated">。ページ番号は、1983年にGeorge Allen＆Unwinによって最初に発行されたハードカバー版から派生しています。2002年の特別3巻オムニバス版やさまざまな業界紙版のページ番号は変更されていませんが、すべてハーパーコリンズまたはホートンミフリンによるものです。</target>
        </trans-unit>
        <trans-unit id="d4f4aa3da68de58187b7c018e5336cbc71134a54" translate="yes" xml:space="preserve">
          <source>. People who are interested in how to localize things in the containing scope should take a look there too.</source>
          <target state="translated">。包含スコープ内で物事をローカライズする方法に興味がある人は、そこも見てください。</target>
        </trans-unit>
        <trans-unit id="c2b14d3f3d78674e56bc67813f86b24d2db0c711" translate="yes" xml:space="preserve">
          <source>. Perhaps what we ought to do is take the hard-wired value from</source>
          <target state="translated">。おそらく私たちがすべきことは、ハードワイヤードな値を</target>
        </trans-unit>
        <trans-unit id="1bb197e77339ac738cd4c23655f60abef9ee8faa" translate="yes" xml:space="preserve">
          <source>. Perl does not do this for you. The &lt;code&gt;passwd&lt;/code&gt; is one-way hashed garble, not clear text, and may not be unhashed save by brute-force guessing. Secure systems use more a more secure hashing than DES. On systems supporting shadow password systems, Perl automatically returns the shadow password entry when called by a suitably empowered user, even if your underlying vendor-provided C library was too short-sighted to realize it should do this.</source>
          <target state="translated">。Perlはこれを行いません。 &lt;code&gt;passwd&lt;/code&gt; のは一方通行が文字化けではなく、クリアテキストをハッシュ化された、と推測ブルートフォースによって保存ハッシュ解除されないことがあります。安全なシステムは、DESよりも安全なハッシュを使用します。シャドウパスワードシステムをサポートするシステムでは、適切な権限を持つユーザーから呼び出されると、Perlは自動的にシャドウパスワードエントリを返します。</target>
        </trans-unit>
        <trans-unit id="c2d4fd11e3c3c2ef4d3668c3eb6e94ff499b67de" translate="yes" xml:space="preserve">
          <source>. Perl isn't much like other computer languages; it's highly context sensitive at times, it can be tricky to work out what sort of token something is, or where a token ends. As such, there's a lot of interplay between the tokeniser and the parser, which can get pretty frightening if you're not used to it.</source>
          <target state="translated">。Perlは他のコンピューター言語とあまり似ていません。状況に応じて変化する場合があるため、トークンの種類やトークンの終了場所を特定するのは難しい場合があります。そのため、トークナイザーとパーサーの間には多くの相互作用があり、慣れていないとかなり恐ろしくなります。</target>
        </trans-unit>
        <trans-unit id="1515508cadc5797cd8ab959f1ca3339e49888887" translate="yes" xml:space="preserve">
          <source>. Please remove this variable and put &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;&quot;&lt;code&gt;PERL_SH_DIR&lt;/code&gt;&quot;&lt;/a&gt; instead.</source>
          <target state="translated">。この変数を削除して、代わりに&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;「 &lt;code&gt;PERL_SH_DIR&lt;/code&gt; 」&lt;/a&gt;を入力してください。</target>
        </trans-unit>
        <trans-unit id="cba1355f82c45a8fef21484f747404a76ae86f23" translate="yes" xml:space="preserve">
          <source>. Please remove this variable and put &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">。この変数を削除して、代わりに &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; を配置してください。</target>
        </trans-unit>
        <trans-unit id="3f1457da5e48adfeddc76831c3066a31d1b57f2e" translate="yes" xml:space="preserve">
          <source>. Pod processors should warn about this being deprecated syntax.</source>
          <target state="translated">。ポッドプロセッサは、これが非推奨の構文であることを警告する必要があります。</target>
        </trans-unit>
        <trans-unit id="564d3ae644e1bfdb8a791d48b6f916dc882219b0" translate="yes" xml:space="preserve">
          <source>. Prior to Perl 5.26, &lt;code&gt;.&lt;/code&gt; -which represents the current directory, was included in &lt;code&gt;@INC&lt;/code&gt;; it has been removed. This change in behavior is documented in &lt;a href=&quot;perlrun#PERL_USE_UNSAFE_INC&quot;&gt;&lt;code&gt;PERL_USE_UNSAFE_INC&lt;/code&gt;&lt;/a&gt; and it is not recommended that &lt;code&gt;.&lt;/code&gt; be re-added to &lt;code&gt;@INC&lt;/code&gt;. If you need to modify &lt;code&gt;@INC&lt;/code&gt; at runtime, you should use the &lt;code&gt;use lib&lt;/code&gt; pragma to get the machine-dependent library properly loaded as well:</source>
          <target state="translated">。Perl 5.26より前は、 &lt;code&gt;.&lt;/code&gt; -現在のディレクトリを表し、 &lt;code&gt;@INC&lt;/code&gt; に含まれていました。削除されました。この動作の変更は&lt;a href=&quot;perlrun#PERL_USE_UNSAFE_INC&quot;&gt; &lt;code&gt;PERL_USE_UNSAFE_INC&lt;/code&gt; に&lt;/a&gt;文書化されており、お勧めしません &lt;code&gt;.&lt;/code&gt; &lt;code&gt;@INC&lt;/code&gt; に再度追加されます。実行時に &lt;code&gt;@INC&lt;/code&gt; を変更する必要がある場合は、 &lt;code&gt;use lib&lt;/code&gt; プラグマを使用して、マシン依存ライブラリも適切にロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="78d896e0ef56e1d24740ae6e5074e45f9bb5ff12" translate="yes" xml:space="preserve">
          <source>. Programs must be prepared to deal with</source>
          <target state="translated">。プログラムは対処するために準備する必要があります</target>
        </trans-unit>
        <trans-unit id="46be1dc32b301883ac9f960a586983088faefae1" translate="yes" xml:space="preserve">
          <source>. Programs using this variable must be prepared to deal with</source>
          <target state="translated">。この変数を使用するプログラムは、処理できるように準備する必要があります</target>
        </trans-unit>
        <trans-unit id="cd020a4f288e77d95d879b2ff99123114284aae5" translate="yes" xml:space="preserve">
          <source>. Programs using this variable must be prepared to deal with filename expansion.</source>
          <target state="translated">。この変数を使用するプログラムは、ファイル名の展開に対応できるように準備する必要があります。</target>
        </trans-unit>
        <trans-unit id="16f0fa2c6457ccd5a1bef736f8b2f051584ca655" translate="yes" xml:space="preserve">
          <source>. Rarely needed.</source>
          <target state="translated">。めったに必要ありません。</target>
        </trans-unit>
        <trans-unit id="3fbe3d58c554ed4c1d1d1b42c9e80cc50c48ac8a" translate="yes" xml:space="preserve">
          <source>. Recall, that if</source>
          <target state="translated">。思い出してください</target>
        </trans-unit>
        <trans-unit id="ab6a7d315e0a4101b03879bac7a3a3c3731c445f" translate="yes" xml:space="preserve">
          <source>. Returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no matching</source>
          <target state="translated">。一致しない場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="086cca4baa9483c73d9d398b13433901fa57fcb1" translate="yes" xml:space="preserve">
          <source>. Returns &lt;code&gt;undef&lt;/code&gt; if no matching</source>
          <target state="translated">。一致するものがない場合は &lt;code&gt;undef&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="17bd24a798e55f262ddde9c7e4ea74e8f691a79b" translate="yes" xml:space="preserve">
          <source>. Returns the new file position, or -1 if an error occurs.</source>
          <target state="translated">。新しいファイル位置を返します。エラーが発生した場合は-1を返します。</target>
        </trans-unit>
        <trans-unit id="e4717fd7dfaf37fd66e5c1a6c2440f1a17feb75b" translate="yes" xml:space="preserve">
          <source>. Roles are relatively new to Perl, but have become rather popular. Roles are &lt;b&gt;applied&lt;/b&gt; to classes. Sometimes we say that classes &lt;b&gt;consume&lt;/b&gt; roles.</source>
          <target state="translated">。ロールはPerlにとって比較的新しいものですが、かなり一般的になっています。ロールはクラスに&lt;b&gt;適用さ&lt;/b&gt;れます。時々、クラスはロールを&lt;b&gt;消費する&lt;/b&gt;と言います。</target>
        </trans-unit>
        <trans-unit id="85adbd9d6de0bb6d69a95e5ac09cd801db6ef4b2" translate="yes" xml:space="preserve">
          <source>. Running the profiled version of Perl will create an output file called</source>
          <target state="translated">。Perlのプロファイルバージョンを実行すると、次の名前の出力ファイルが作成されます</target>
        </trans-unit>
        <trans-unit id="e550a655605c6f097b311744bc2ad2d1f7e02cd4" translate="yes" xml:space="preserve">
          <source>. Save your work and repeat...</source>
          <target state="translated">。作業を保存して繰り返します...</target>
        </trans-unit>
        <trans-unit id="7143f409794e5396a72f2a6b101a534fc0b07928" translate="yes" xml:space="preserve">
          <source>. See</source>
          <target state="translated">。見る</target>
        </trans-unit>
        <trans-unit id="bee7c9ef88ceab887add88fe362e6d8481b88a47" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#How-do-I-add-a-directory-to-my-include-path-%28%40INC%29-at-runtime%3F&quot;&gt;&quot;How do I add a directory to my include path (@INC) at runtime?&quot;&lt;/a&gt; for details on how to run your newly installed modules.</source>
          <target state="translated">。&lt;a href=&quot;#How-do-I-add-a-directory-to-my-include-path-%28%40INC%29-at-runtime%3F&quot;&gt;「実行時にインクルードパス（@INC）にディレクトリを追加するにはどうすればよいですか？」を&lt;/a&gt;参照してください。新しくインストールしたモジュールを実行する方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="0dc553c5d634355fec3724ccd2a074361b8ba50a" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#How-do-I-add-a-directory-to-my-include-path-(%40INC)-at-runtime%3f&quot;&gt;How do I add a directory to my include path (@INC) at runtime?&lt;/a&gt; for details on how to run your newly installed modules.</source>
          <target state="translated">。&lt;a href=&quot;#How-do-I-add-a-directory-to-my-include-path-(%40INC)-at-runtime%3f&quot;&gt;実行時にディレクトリをインクルードパス（@INC）に追加するにはどうすればよいですか？を&lt;/a&gt;参照してください。新しくインストールしたモジュールを実行する方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="ddb90c9c599d24903a474a87fa3a2bc0c13144bb" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#Prerequisites&quot;&gt;&quot;Prerequisites&quot;&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;#Prerequisites&quot;&gt;「前提条件」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ba073e24f104c94d46d8d40d53b310f205b091a4" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d37a6f9d50749984cd729b9498de5dfbc561c7a6" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#Using-call_sv&quot;&gt;&quot;Using call_sv&quot;&lt;/a&gt; for details.</source>
          <target state="translated">。詳細については、&lt;a href=&quot;#Using-call_sv&quot;&gt;「call_svの使用」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="108cb27bf7c8d7031e4a5603b633fe94497e91da" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;#sv_magic&quot;&gt;sv_magic&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;#sv_magic&quot;&gt;sv_magicを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1981f0c642c0f907ef847d7c17536d36f0ee8920" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;../../perlref&quot;&gt;perlref&lt;/a&gt; for more details on the mechanics of</source>
          <target state="translated">。の&lt;a href=&quot;../../perlref&quot;&gt;メカニズムの&lt;/a&gt;詳細については、perlrefを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b3ef3b8c9c5702c57fea51845f0a204e6ec73ba" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;Encode::Guess&quot;&gt;Encode::Guess&lt;/a&gt; for details.</source>
          <target state="translated">。詳細については、&lt;a href=&quot;Encode::Guess&quot;&gt;Encode :: Guess&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="10889f2e8189c79b1f86ade1e2c38e0b8038ce1d" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;charnames&quot;&gt;charnamesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d7c3fb52af08419ccda7242724b917a43e565a5f" translate="yes" xml:space="preserve">
          <source>. See &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; for more details on the mechanics of</source>
          <target state="translated">。の&lt;a href=&quot;perlref&quot;&gt;メカニズムの&lt;/a&gt;詳細については、perlrefを参照してください。</target>
        </trans-unit>
        <trans-unit id="065f520588be974c5594d0397ea3e63f2dce18b1" translate="yes" xml:space="preserve">
          <source>. See AUTHORS for a full list of people involved. For any questions, send mail to</source>
          <target state="translated">。関係者の全リストについては、作者をご覧ください。質問があれば、メールを送ってください</target>
        </trans-unit>
        <trans-unit id="497d401abf0f6a33f3af121175866d056f439fb1" translate="yes" xml:space="preserve">
          <source>. See also &lt;a href=&quot;#sleep-%28-%24floating_seconds-%29&quot;&gt;&lt;code&gt;Time::HiRes::sleep()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#usleep-%28-%24useconds-%29&quot;&gt;&lt;code&gt;Time::HiRes::usleep()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#clock_nanosleep-%28-%24which%2C-%24nanoseconds%2C-%24flags-%3D-0%29&quot;&gt;&lt;code&gt;clock_nanosleep()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;#sleep-%28-%24floating_seconds-%29&quot;&gt; &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#usleep-%28-%24useconds-%29&quot;&gt; &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#clock_nanosleep-%28-%24which%2C-%24nanoseconds%2C-%24flags-%3D-0%29&quot;&gt; &lt;code&gt;clock_nanosleep()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a2199e77491bf38a33dfa905f96269e305f46f1c" translate="yes" xml:space="preserve">
          <source>. See also &lt;a href=&quot;#sleep-%28-%24floating_seconds-%29&quot;&gt;&lt;code&gt;Time::HiRes::sleep()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#usleep-%28-%24useconds-%29&quot;&gt;&lt;code&gt;Time::HiRes::usleep()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#nanosleep-%28-%24nanoseconds-%29&quot;&gt;&lt;code&gt;Time::HiRes::nanosleep()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;#sleep-%28-%24floating_seconds-%29&quot;&gt; &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#usleep-%28-%24useconds-%29&quot;&gt; &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#nanosleep-%28-%24nanoseconds-%29&quot;&gt; &lt;code&gt;Time::HiRes::nanosleep()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="fa1f5ea9b95dca4e87c6eca7c63129285f89aa83" translate="yes" xml:space="preserve">
          <source>. See also &lt;a href=&quot;#sleep-%28-%24floating_seconds-%29&quot;&gt;&lt;code&gt;Time::HiRes::sleep()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#clock_nanosleep-%28-%24which%2C-%24nanoseconds%2C-%24flags-%3D-0%29&quot;&gt;&lt;code&gt;clock_nanosleep()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">。&lt;a href=&quot;#sleep-%28-%24floating_seconds-%29&quot;&gt; &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#clock_nanosleep-%28-%24which%2C-%24nanoseconds%2C-%24flags-%3D-0%29&quot;&gt; &lt;code&gt;clock_nanosleep()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1da2f25ee6e37cb910fd70d32927a95fc37e978b" translate="yes" xml:space="preserve">
          <source>. See also &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; .</source>
          <target state="translated">。 &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; 、 &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; 、および &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="526666d33c6dd6f0edce27a1b78dfa10ea26ace5" translate="yes" xml:space="preserve">
          <source>. See also &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::nanosleep()&lt;/code&gt; .</source>
          <target state="translated">。 &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; 、 &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; 、および &lt;code&gt;Time::HiRes::nanosleep()&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="269fb40594ac38479767dd170994fea4ce252e54" translate="yes" xml:space="preserve">
          <source>. See also &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; , &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; , and &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; .</source>
          <target state="translated">。 &lt;code&gt;Time::HiRes::usleep()&lt;/code&gt; 、 &lt;code&gt;Time::HiRes::sleep()&lt;/code&gt; 、および &lt;code&gt;Time::HiRes::clock_nanosleep()&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="73ed177a1496b0ffabfd429dcad99a1b5e86269c" translate="yes" xml:space="preserve">
          <source>. See man1dir.</source>
          <target state="translated">。man1dirを参照してください。</target>
        </trans-unit>
        <trans-unit id="37f30b22c5af4841496858a795207dcf79c50797" translate="yes" xml:space="preserve">
          <source>. See man3dir.</source>
          <target state="translated">。man3dirを参照してください。</target>
        </trans-unit>
        <trans-unit id="c34835277b46e71de0c02bf6cf0f02eefcb4f7c6" translate="yes" xml:space="preserve">
          <source>. See the &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; operator in Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</source>
          <target state="translated">。Camelの第5章「パターンマッチング」の &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 演算子を参照してください。</target>
        </trans-unit>
        <trans-unit id="b98009a504041b2a2e135284e783dfdbc1e8357f" translate="yes" xml:space="preserve">
          <source>. See the &lt;code&gt;tr///&lt;/code&gt; operator in Camel chapter 5, &amp;ldquo;Pattern Matching&amp;rdquo;.</source>
          <target state="translated">。Camelの第5章「パターンマッチング」の &lt;code&gt;tr///&lt;/code&gt; 演算子を参照してください。</target>
        </trans-unit>
        <trans-unit id="532cefe5f4e0e07491434bf06b22de1364858a22" translate="yes" xml:space="preserve">
          <source>. Sigh!</source>
          <target state="translated">。はぁ！</target>
        </trans-unit>
        <trans-unit id="15721d069cd060fbc46f89e07bfe13ca468f8232" translate="yes" xml:space="preserve">
          <source>. Similarly, \x</source>
          <target state="translated">。同様に、\ x</target>
        </trans-unit>
        <trans-unit id="de4d0dbea4489047ca7b513d634afc159e7969dd" translate="yes" xml:space="preserve">
          <source>. Similarly, don't create patches for files under</source>
          <target state="translated">。同様に、下のファイルのパッチを作成しないでください</target>
        </trans-unit>
        <trans-unit id="395988d77edcf52f02450c8878fe072fd4bc2688" translate="yes" xml:space="preserve">
          <source>. Since that character itself folds to &lt;code&gt;&quot;s&quot;&lt;/code&gt;, the string of two of them together should be equivalent to a single U+1E9E when foldcased.</source>
          <target state="translated">。その文字自体は &lt;code&gt;&quot;s&quot;&lt;/code&gt; 折りたたまれるので、それらの2つの文字列は、折りたたまれたときに1つのU + 1E9Eと同等である必要があります。</target>
        </trans-unit>
        <trans-unit id="f5eed1b7cba0329ac7a82750cca661eb2b07773c" translate="yes" xml:space="preserve">
          <source>. Since the core of Perl has now been tested, &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt; can and now should be used. You can also use the full suite of core modules in the tests. (As noted in &lt;a href=&quot;#Patching-a-core-module&quot;&gt;&quot;Patching a core module&quot;&lt;/a&gt; above, changes to</source>
          <target state="translated">。Perlのコアがテストされたので、&lt;a href=&quot;Test::More&quot;&gt;Test :: More&lt;/a&gt;を使用できるようになりました。テストでは、コアモジュールの完全なスイートを使用することもできます。（上記の&lt;a href=&quot;#Patching-a-core-module&quot;&gt;「コアモジュールのパッチ適用」で説明した&lt;/a&gt;ように、</target>
        </trans-unit>
        <trans-unit id="e7f91a5e70762d437d2b010c7f3894adf3f22e05" translate="yes" xml:space="preserve">
          <source>. Since we're going to be altering this file, let's copy it to</source>
          <target state="translated">。このファイルを変更するので、コピーしてみましょう</target>
        </trans-unit>
        <trans-unit id="453c217251c123d48625d5057df411e46d897211" translate="yes" xml:space="preserve">
          <source>. So as opposite of &lt;code&gt;find_encoding()&lt;/code&gt; canonical names and aliases are not used when searching for object.</source>
          <target state="translated">。したがって、 &lt;code&gt;find_encoding()&lt;/code&gt; とは逆に、オブジェクトの検索時に正規名とエイリアスは使用されません。</target>
        </trans-unit>
        <trans-unit id="a4b19e5f2af8ac1ad558abf4f3e809cbb78dad50" translate="yes" xml:space="preserve">
          <source>. Some non-western languages require more complicated models, so Unicode created the</source>
          <target state="translated">。一部の非西洋言語はより複雑なモデルを必要とするため、Unicodeが作成した</target>
        </trans-unit>
        <trans-unit id="924583291a21ac53f389c53cb7d36575da128db8" translate="yes" xml:space="preserve">
          <source>. Sometimes confused with &lt;code&gt;PATH&lt;/code&gt; .</source>
          <target state="translated">。 &lt;code&gt;PATH&lt;/code&gt; と混同されることがあります。</target>
        </trans-unit>
        <trans-unit id="a3a8e9ed6a6374ab9e74cec517357439a65db7f6" translate="yes" xml:space="preserve">
          <source>. Sometimes confused with &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">。 &lt;code&gt;PATH&lt;/code&gt; と混同されることがあります。</target>
        </trans-unit>
        <trans-unit id="f60154f92db701fa8dfa7c281d9f6dd872168811" translate="yes" xml:space="preserve">
          <source>. Source filters alter the program text of a module before Perl sees it, much as a C preprocessor alters the source text of a C program before the compiler sees it. This article tells you more about what source filters are, how they work, and how to write your own.</source>
          <target state="translated">。ソースフィルターは、Perlが認識する前にモジュールのプログラムテキストを変更します。これは、Cプリプロセッサーがコンパイラーが認識する前にCプログラムのソーステキストを変更するのと同じです。この記事では、ソースフィルターとは何か、フィルターのしくみ、独自のフィルターの作成方法について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="4fb0cc3ffb7c7827094da5af5e02907a64d30d4e" translate="yes" xml:space="preserve">
          <source>. Specifically, it is a listing of functions, macros, flags, and variables that may be used by extension writers. Some specialized items are instead documented in</source>
          <target state="translated">。具体的には、拡張機能の作成者が使用できる関数、マクロ、フラグ、および変数のリストです。代わりに、いくつかの特殊な項目が文書化されています</target>
        </trans-unit>
        <trans-unit id="c5324fa1cfeb6989f1cc904db6d96f2b5cf34a5f" translate="yes" xml:space="preserve">
          <source>. Specifically, the function is applied to an &lt;code&gt;entersub&lt;/code&gt; op tree for a subroutine call, not marked with &lt;code&gt;&amp;amp;&lt;/code&gt; , where the callee can be identified at compile time as</source>
          <target state="translated">。具体的には、この関数は、 &lt;code&gt;&amp;amp;&lt;/code&gt; でマークされていないサブルーチン呼び出しの &lt;code&gt;entersub&lt;/code&gt; opツリーに適用されます。呼び出し先は、コンパイル時に次のように識別できます。</target>
        </trans-unit>
        <trans-unit id="719bbeb528773685892fbb466263ed7992f1ef35" translate="yes" xml:space="preserve">
          <source>. Stratus &lt;code&gt;VOS&lt;/code&gt; uses</source>
          <target state="translated">。Stratus &lt;code&gt;VOS&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="74794f3a0f64eaaac38d6eec10e61e0bb7ca4ab9" translate="yes" xml:space="preserve">
          <source>. Subpatterns are numbered based on the left to right order of their opening parenthesis. A backreference matches whatever actually matched the subpattern in the string being examined, not the rules for that subpattern. Therefore, &lt;code&gt;(0|0x)\d*\s\g1\d*&lt;/code&gt; will match &quot;0x1234 0x4321&quot;, but not &quot;0x1234 01234&quot;, because subpattern 1 matched &quot;0x&quot;, even though the rule &lt;code&gt;0|0x&lt;/code&gt; could potentially match the leading 0 in the second number.</source>
          <target state="translated">。サブパターンには、左括弧の左から右への順序に基づいて番号が付けられます。後方参照は、検査されている文字列内のサブパターンに実際に一致したものに一致し、そのサブパターンのルールには一致しません。したがって、 &lt;code&gt;(0|0x)\d*\s\g1\d*&lt;/code&gt; サブパターン1にもルールが、 &quot;0X&quot;を一致したため、 &quot;0x1234の01234&quot; &quot;が0x1234 0x4321&quot;と一致しませんが、 &lt;code&gt;0|0x&lt;/code&gt; 潜在的に一致する可能性が2番目の数値の先行0。</target>
        </trans-unit>
        <trans-unit id="0bd33c43194e6d65ba167a5061ae6b129a64b1cb" translate="yes" xml:space="preserve">
          <source>. Such discretionary locks are more flexible, but offer fewer guarantees. This means that files locked with flock() may be modified by programs that do not also use flock(). Cars that stop for red lights get on well with each other, but not with cars that don't stop for red lights. See the perlport manpage, your port's specific documentation, or your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (If you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">。そのような任意のロックはより柔軟ですが、保証は少なくなります。つまり、flock（）でロックされたファイルは、flock（）を使用しないプログラムによって変更される可能性があります。赤信号のために停止する車は互いにうまく乗り合いますが、赤信号のために停止しない車ではうまくいきません。詳細は、perlportマンページ、ポート固有のドキュメント、またはシステム固有のローカルマンページを参照してください。移植可能なプログラムを作成している場合は、従来の動作を想定するのが最善です。（そうでない場合は、常に独自のシステムの特異性（「機能」と呼ばれることもあります）を完全に自由に書くことができます。移植性の懸念に対する奴隷の順守は、仕事を遂行する上で邪魔になってはなりません。）</target>
        </trans-unit>
        <trans-unit id="f924273cb0bf29ba0e14969a837f9a2c41715a31" translate="yes" xml:space="preserve">
          <source>. Take &lt;code&gt;OP_ADD&lt;/code&gt;, for example. (&lt;code&gt;OP_ADD&lt;/code&gt; is the token value from the &lt;code&gt;Aop(OP_ADD)&lt;/code&gt; in</source>
          <target state="translated">。 &lt;code&gt;OP_ADD&lt;/code&gt; を例にとってみましょう。（ &lt;code&gt;OP_ADD&lt;/code&gt; はからトークン値である &lt;code&gt;Aop(OP_ADD)&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="0219e78f15e9d632ec155375033bbb1f75756ae3" translate="yes" xml:space="preserve">
          <source>. Test::More will output special ok's which Test::Harness interprets as skipped, but passing, tests.</source>
          <target state="translated">。Test :: Moreは、Test :: Harnessがスキップしたが合格したテストとして解釈する特別なOKを出力します。</target>
        </trans-unit>
        <trans-unit id="86f914cd47c1c841e763a16c7dd3ea89826fb50f" translate="yes" xml:space="preserve">
          <source>. Tests for &lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; are named</source>
          <target state="translated">。 &lt;code&gt;Unicode::Collate::Locale&lt;/code&gt; テストには名前が付けられています</target>
        </trans-unit>
        <trans-unit id="509fc989a8df02d181de3abd4b07ad24cc68349f" translate="yes" xml:space="preserve">
          <source>. Text following</source>
          <target state="translated">。次のテキスト</target>
        </trans-unit>
        <trans-unit id="52010a80ed4df47e71982f8570116561787baa7d" translate="yes" xml:space="preserve">
          <source>. That allows them to read/write files/buffers larger than 4Gig.</source>
          <target state="translated">。これにより、4Gigより大きいファイル/バッファーの読み取り/書き込みが可能になります。</target>
        </trans-unit>
        <trans-unit id="854b9e1fe58c6212ac93ec8182edd1d8e94236c0" translate="yes" xml:space="preserve">
          <source>. That filehandle provides an internal reference to the specified external file, conveniently stored in a Perl variable, and ready for I/O operations such as reading and writing.</source>
          <target state="translated">。そのファイルハンドルは、指定された外部ファイルへの内部参照を提供し、Perl変数に便利に格納され、読み取りや書き込みなどのI / O操作の準備ができています。</target>
        </trans-unit>
        <trans-unit id="96afc36fdc9cac6d245d493ea1697bcf23f65cf9" translate="yes" xml:space="preserve">
          <source>. That is, every (possibly wide) character gets replaced with a sequence of one or more characters that represent the individual</source>
          <target state="translated">。つまり、すべての（ワイドの可能性がある）文字は、個々を表す1つ以上の文字のシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="d3ee68fda4cc70d1e9047807e735452ddfef368e" translate="yes" xml:space="preserve">
          <source>. That means that if $fred is a lexical variable created with my() in the above example, the code wouldn't work at all: you'd accidentally access the global and skip right over the private lexical altogether. Global variables are bad because they can easily collide accidentally and in general make for non-scalable and confusing code.</source>
          <target state="translated">。つまり、上記の例で$ fredがmy（）で作成されたレキシカル変数である場合、コードはまったく機能しません。誤ってグローバルにアクセスして、プライベートレキシカル全体をスキップしてしまいます。グローバル変数は、偶然に簡単に衝突する可能性があり、一般に、スケーラブルでなく混乱するコードを作成するため、不適切です。</target>
        </trans-unit>
        <trans-unit id="71cc74e6abc0852795fc00a102b3c6afa72a3049" translate="yes" xml:space="preserve">
          <source>. That way, the longer-lived variable will contain the expected reference until it goes out of scope.</source>
          <target state="translated">。このようにして、有効期間が長い変数には、スコープから外れるまで予想される参照が含まれます。</target>
        </trans-unit>
        <trans-unit id="338bcb0d0b4f6443c09736e45408c62579701cfd" translate="yes" xml:space="preserve">
          <source>. The</source>
          <target state="translated">。の</target>
        </trans-unit>
        <trans-unit id="c4b9c60bf381d578490da1380967c8f8ee21e9a9" translate="yes" xml:space="preserve">
          <source>. The &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; pragma can be used to establish default I/O layers.</source>
          <target state="translated">。&lt;a href=&quot;open&quot;&gt;オープン&lt;/a&gt;プラグマは、デフォルトのI / O層を確立するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="fe300fb39c3e404963696de90c5f2b8fb1f4b10d" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma can be used to establish default I/O layers. See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;.</source>
          <target state="translated">。 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; プラグマは、デフォルトのI / O層を確立するために使用することができます。&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="43b7a7d48b732a7b49c73edd40605094cd605257" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; operator assumes this so you don't have to spell out &quot;</source>
          <target state="translated">。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; あなたが「スペルアウトする必要はありませんので、オペレータは、このことを前提としてい</target>
        </trans-unit>
        <trans-unit id="1d02d641b2daae8c8291ce30497232a482994b97" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma can be used to establish default I/O layers. See &lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt;.</source>
          <target state="translated">。 &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; プラグマは、デフォルトのI / O層を確立するために使用することができます。&lt;a href=&quot;../open&quot;&gt;openを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5fa935f862d5e3a704a56002cb0fb957dc8218ea" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;use VMS::Filespec&lt;/code&gt; or &lt;code&gt;require VMS::Filespec; import VMS::Filespec ...&lt;/code&gt; statement can be used to import the function names into the current package, but they're always available if you use the fully qualified name, whether or not you've mentioned the</source>
          <target state="translated">。 &lt;code&gt;use VMS::Filespec&lt;/code&gt; かは、 &lt;code&gt;require VMS::Filespec; import VMS::Filespec ...&lt;/code&gt; ステートメントを使用して、関数名を現在のパッケージにインポートできますが、完全修飾名を使用すると、言及したかどうかに関係なく、いつでも使用できます。</target>
        </trans-unit>
        <trans-unit id="e7333d35d6cbd99cf7eda3fee658e2f85ce05fd6" translate="yes" xml:space="preserve">
          <source>. The &lt;code&gt;use&lt;/code&gt; operator assumes this so you don't have to spell out &quot;</source>
          <target state="translated">。 &lt;code&gt;use&lt;/code&gt; あなたが「スペルアウトする必要はありませんので、オペレータは、このことを前提としてい</target>
        </trans-unit>
        <trans-unit id="d34046a75c4b4b70cb801b77ce3dd9d1f648ec86" translate="yes" xml:space="preserve">
          <source>. The C subroutine it calls defaults to the name of the perl visible subroutine, unless you give the parameter</source>
          <target state="translated">。それが呼び出すCサブルーチンは、パラメーターを指定しない限り、デフォルトでperl visibleサブルーチンの名前になります。</target>
        </trans-unit>
        <trans-unit id="9397ab7f8e9744e2e3279022e0ab86d9f126e59f" translate="yes" xml:space="preserve">
          <source>. The amount of data in the read cache will not exceed the value you specified for &lt;code&gt;memory&lt;/code&gt; . If &lt;code&gt;Tie::File&lt;/code&gt; wants to cache a new record, but the read cache is full, it will make room by expiring the least-recently visited records from the read cache.</source>
          <target state="translated">。読み取りキャッシュ内のデータ量は、 &lt;code&gt;memory&lt;/code&gt; 指定した値を超えることはありません。場合は &lt;code&gt;Tie::File&lt;/code&gt; 新しいレコードをキャッシュしたいと考えていますが、読み取りキャッシュがいっぱいになる、それは読み取りキャッシュから少なくとも、最近訪問したレコードを期限切れで部屋を作ります。</target>
        </trans-unit>
        <trans-unit id="3a27d692b3f924d2952de2843ea0614c4cb0575d" translate="yes" xml:space="preserve">
          <source>. The amount of data in the read cache will not exceed the value you specified for &lt;code&gt;memory&lt;/code&gt;. If &lt;code&gt;Tie::File&lt;/code&gt; wants to cache a new record, but the read cache is full, it will make room by expiring the least-recently visited records from the read cache.</source>
          <target state="translated">。読み取りキャッシュ内のデータ量は、 &lt;code&gt;memory&lt;/code&gt; 指定した値を超えることはありません。場合は &lt;code&gt;Tie::File&lt;/code&gt; 新しいレコードをキャッシュしたいと考えていますが、読み取りキャッシュがいっぱいになる、それは読み取りキャッシュから少なくとも、最近訪問したレコードを期限切れで部屋を作ります。</target>
        </trans-unit>
        <trans-unit id="0d43793da5a2959399e8063bdc35f4855ea88c66" translate="yes" xml:space="preserve">
          <source>. The argument is first interpreted as a floating point number, but then any fractional parts are truncated (towards zero), and the value is interpreted as an unsigned integer. The bits of this integer are stored in the unused bits of the NaN.</source>
          <target state="translated">。引数は最初に浮動小数点数として解釈されますが、その後、小数部分が切り捨てられ（ゼロに向かって）、値は符号なし整数として解釈されます。この整数のビットは、NaNの未使用ビットに格納されます。</target>
        </trans-unit>
        <trans-unit id="79601f5e82d6d993fd5c764e5bd99eacf802094f" translate="yes" xml:space="preserve">
          <source>. The arrow operator (&lt;code&gt;-&amp;gt;&lt;/code&gt; ) tells Perl that we are calling a method.</source>
          <target state="translated">。矢印演算子（ &lt;code&gt;-&amp;gt;&lt;/code&gt; ）は、メソッドを呼び出すことをPerlに伝えます。</target>
        </trans-unit>
        <trans-unit id="a39367a57b80e84f578109fdb0261380b41cb664" translate="yes" xml:space="preserve">
          <source>. The arrow operator (&lt;code&gt;-&amp;gt;&lt;/code&gt;) tells Perl that we are calling a method.</source>
          <target state="translated">。矢印演算子（ &lt;code&gt;-&amp;gt;&lt;/code&gt; ）は、メソッドを呼び出していることをPerlに通知します。</target>
        </trans-unit>
        <trans-unit id="4ce742f8603278d1cc939bb3c2667ef58a5b743a" translate="yes" xml:space="preserve">
          <source>. The base64 encoding is designed to represent arbitrary sequences of octets in a form that need not be humanly readable. A 65-character subset ([A-Za-z0-9+/=]) of US-ASCII is used, enabling 6 bits to be represented per printable character.</source>
          <target state="translated">。base64エンコーディングは、人間が読み取れる必要のない形式でオクテットの任意のシーケンスを表すように設計されています。US-ASCIIの65文字のサブセット（[A-Za-z0-9 + / =]）が使用され、印刷可能な文字ごとに6ビットを表すことができます。</target>
        </trans-unit>
        <trans-unit id="132df5e01ce9879e06e9a0bb9623693b913390a1" translate="yes" xml:space="preserve">
          <source>. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If a string to be inserted is available as a Perl scalar, the &lt;a href=&quot;#lex_stuff_sv&quot;&gt;lex_stuff_sv&lt;/a&gt; function is more convenient.</source>
          <target state="translated">。文字は、バッファーが現在どのように解釈されているか（&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;）に従って、字句解析バッファー用に再コード化されます。挿入する文字列がPerlスカラーとして使用できる場合は、&lt;a href=&quot;#lex_stuff_sv&quot;&gt;lex_stuff_sv&lt;/a&gt;関数の方が便利です。</target>
        </trans-unit>
        <trans-unit id="d893afc509f6379c799028f22bba6115198b3dd0" translate="yes" xml:space="preserve">
          <source>. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If a string to be inserted is not already a Perl scalar, the &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; function avoids the need to construct a scalar.</source>
          <target state="translated">。文字は、バッファーが現在どのように解釈されているか（&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;）に従って、字句解析バッファー用に再コード化されます。挿入する文字列がまだPerlスカラーでない場合、&lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt;関数はスカラーを作成する必要を回避します。</target>
        </trans-unit>
        <trans-unit id="ee8a3d9771584b9a4ccf95284b3a8174d3f9cca7" translate="yes" xml:space="preserve">
          <source>. The characters are recoded for the lexer buffer, according to how the buffer is currently being interpreted (&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;). If it is not convenient to nul-terminate a string to be inserted, the &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt; function is more appropriate.</source>
          <target state="translated">。文字は、バッファーが現在どのように解釈されているか（&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;）に従って、字句解析バッファー用に再コード化されます。挿入する文字列をヌル文字で終了するのが&lt;a href=&quot;#lex_stuff_pvn&quot;&gt;都合が悪い&lt;/a&gt;場合は、lex_stuff_pvn関数の方が適しています。</target>
        </trans-unit>
        <trans-unit id="0f56b744f4a2c77713600bfeb619e33a869c1cbc" translate="yes" xml:space="preserve">
          <source>. The commit is then actually performed when you run the next command, which will bring up your editor to describe the commit. Without &lt;code&gt;--no-commit&lt;/code&gt;, the commit would be made with nearly no useful message, which would greatly diminish the value of the merge commit as a placeholder for the work's description.</source>
          <target state="translated">。次のコマンドを実行すると、コミットが実際に実行されます。これにより、コミットを説明するエディターが表示されます。なし &lt;code&gt;--no-commit&lt;/code&gt; 大幅に作業の説明のためのプレースホルダとしてコミットマージの値を減少させるであろうほとんど有用なメッセージを用いて行われることになるコミット。</target>
        </trans-unit>
        <trans-unit id="c3b33e6ed1f1b6445bb5098593388c53d72702a9" translate="yes" xml:space="preserve">
          <source>. The declaration &lt;a href=&quot;strict&quot;&gt;&lt;code&gt;use strict 'refs'&lt;/code&gt;&lt;/a&gt; disables this feature, which can cause all sorts of trouble if you use it by accident.</source>
          <target state="translated">。&lt;a href=&quot;strict&quot;&gt; &lt;code&gt;use strict 'refs'&lt;/code&gt; &lt;/a&gt;の宣言はこの機能を無効にします。これは、誤って使用した場合にあらゆる種類の問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="09b2a2d176e198b26fa708993e686fdffc215703" translate="yes" xml:space="preserve">
          <source>. The declaration &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'refs'&lt;/code&gt; disables this feature, which can cause all sorts of trouble if you use it by accident.</source>
          <target state="translated">。宣言で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict 'refs'&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;すると、この機能が無効になります。誤って使用すると、あらゆる種類の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1f924a7620bcb58b87a1f9d9dd3fdfe4c62ff669" translate="yes" xml:space="preserve">
          <source>. The default is &quot;User Contributed Perl Documentation&quot;, but also see &lt;b&gt;--official&lt;/b&gt; below.</source>
          <target state="translated">。デフォルトは「User Contributed Perl Documentation」ですが、下記の&lt;b&gt;--official&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="618c078508491fbfb47de5b8a07926b3458d7d8d" translate="yes" xml:space="preserve">
          <source>. The default library locations (e.g. privlib, sitelib) are either</source>
          <target state="translated">。デフォルトのライブラリの場所（privlib、sitelibなど）は、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="6f8ebc54d0178bb00994a39db8b9644acf1a8563" translate="yes" xml:space="preserve">
          <source>. The delimiters for it must be ASCII punctuation, but it may NOT be delimited by &lt;code&gt;&quot;{&quot;&lt;/code&gt;, nor &lt;code&gt;&quot;}&quot;&lt;/code&gt; nor contain a literal &lt;code&gt;&quot;}&quot;&lt;/code&gt;, as that delimits the end of the enclosing &lt;code&gt;\p{}&lt;/code&gt;. Like any pattern, certain other delimiters are terminated by their mirror images. These are &lt;code&gt;&quot;(&quot;&lt;/code&gt;, &lt;code&gt;&quot;[&lt;/code&gt;&quot;, and &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt;. If the delimiter is any of &lt;code&gt;&quot;-&quot;&lt;/code&gt;, &lt;code&gt;&quot;_&quot;&lt;/code&gt;, &lt;code&gt;&quot;+&quot;&lt;/code&gt;, or &lt;code&gt;&quot;\&quot;&lt;/code&gt;, or is the same delimiter as is used for the enclosing pattern, it must be preceded by a backslash escape, both fore and aft.</source>
          <target state="translated">。区切り文字はASCII句読点である必要がありますが、 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;}&quot;&lt;/code&gt; で区切ることも、リテラル &lt;code&gt;&quot;}&quot;&lt;/code&gt; 含めることもできません。これは、囲んでいる &lt;code&gt;\p{}&lt;/code&gt; 終わりを区切るためです。他のパターンと同様に、他の特定の区切り文字はミラーイメージで終了します。これらは &lt;code&gt;&quot;(&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;[&lt;/code&gt; 」、および &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; です。区切り文字が &lt;code&gt;&quot;-&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;_&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;+&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;\&quot;&lt;/code&gt; いずれかであるか、または囲みパターンに使用されるのと同じ区切り文字である場合、前と後ろの両方でバックスラッシュエスケープを前に付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="ef73490f33664f8457822810666a2533a19bed96" translate="yes" xml:space="preserve">
          <source>. The directory</source>
          <target state="translated">。ディレクトリ</target>
        </trans-unit>
        <trans-unit id="632ab13141757f9e687de51db78b780c50b12aa3" translate="yes" xml:space="preserve">
          <source>. The directory tree is left untouched.</source>
          <target state="translated">。ディレクトリツリーは変更されません。</target>
        </trans-unit>
        <trans-unit id="a378991e2ff9bbc4e73fa61ee57c00bdd052b15d" translate="yes" xml:space="preserve">
          <source>. The equivalent test can be made in C by using the &lt;code&gt;GIMME_V&lt;/code&gt; macro, which returns &lt;code&gt;G_ARRAY&lt;/code&gt; if you have been called in a list context, &lt;code&gt;G_SCALAR&lt;/code&gt; if in a scalar context, or &lt;code&gt;G_VOID&lt;/code&gt; if in a void context (i.e., the return value will not be used). An older version of this macro is called &lt;code&gt;GIMME&lt;/code&gt; ; in a void context it returns &lt;code&gt;G_SCALAR&lt;/code&gt; instead of &lt;code&gt;G_VOID&lt;/code&gt; . An example of using the &lt;code&gt;GIMME_V&lt;/code&gt; macro is shown in section</source>
          <target state="translated">。同等のテストは、Cで &lt;code&gt;GIMME_V&lt;/code&gt; マクロを使用して行うことができます。このマクロは、リストコンテキストで &lt;code&gt;G_SCALAR&lt;/code&gt; 場合はG_ARRAY、スカラーコンテキストで &lt;code&gt;G_VOID&lt;/code&gt; 場合はG_SCALAR、またはvoidコンテキストで呼び出された場合は &lt;code&gt;G_ARRAY&lt;/code&gt; を返します（つまり、戻り値は中古）。このマクロの古いバージョンは &lt;code&gt;GIMME&lt;/code&gt; と呼ばれています。voidコンテキストでは、 &lt;code&gt;G_SCALAR&lt;/code&gt; ではなく &lt;code&gt;G_VOID&lt;/code&gt; 返します。 &lt;code&gt;GIMME_V&lt;/code&gt; マクロの使用例をセクションに示します</target>
        </trans-unit>
        <trans-unit id="44dedd4141cadca433f53717b2d9c75ad72d9b95" translate="yes" xml:space="preserve">
          <source>. The equivalent test can be made in C by using the &lt;code&gt;GIMME_V&lt;/code&gt; macro, which returns &lt;code&gt;G_ARRAY&lt;/code&gt; if you have been called in a list context, &lt;code&gt;G_SCALAR&lt;/code&gt; if in a scalar context, or &lt;code&gt;G_VOID&lt;/code&gt; if in a void context (i.e., the return value will not be used). An older version of this macro is called &lt;code&gt;GIMME&lt;/code&gt;; in a void context it returns &lt;code&gt;G_SCALAR&lt;/code&gt; instead of &lt;code&gt;G_VOID&lt;/code&gt;. An example of using the &lt;code&gt;GIMME_V&lt;/code&gt; macro is shown in section &lt;a href=&quot;#Using-GIMME_V&quot;&gt;&quot;Using GIMME_V&quot;&lt;/a&gt;.</source>
          <target state="translated">。同等の試験を使用してCで行うことができ &lt;code&gt;GIMME_V&lt;/code&gt; の返すマクロ、 &lt;code&gt;G_ARRAY&lt;/code&gt; を使用すると、リストコンテキストで呼び出された場合、 &lt;code&gt;G_SCALAR&lt;/code&gt; はスカラーコンテキストであれば、あるいは &lt;code&gt;G_VOID&lt;/code&gt; 無効コンテキスト（すなわちで、戻り値はなりません場合中古）。このマクロの古いバージョンは &lt;code&gt;GIMME&lt;/code&gt; と呼ばれます。 voidコンテキストでは、 &lt;code&gt;G_SCALAR&lt;/code&gt; 代わりに &lt;code&gt;G_VOID&lt;/code&gt; 返します。 &lt;code&gt;GIMME_V&lt;/code&gt; マクロの使用例は、&lt;a href=&quot;#Using-GIMME_V&quot;&gt;「GIMME_Vの使用」の&lt;/a&gt;セクションに示されています。</target>
        </trans-unit>
        <trans-unit id="7cd333b30838b1fdef268a889fd4cb7c1f09da13" translate="yes" xml:space="preserve">
          <source>. The expression \c</source>
          <target state="translated">。式\ c</target>
        </trans-unit>
        <trans-unit id="ef482f58ec037bafd28af56e419d7d82b45dc684" translate="yes" xml:space="preserve">
          <source>. The facility must be enabled first by a pragmatic declaration, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'signatures'&lt;/code&gt; , and it will produce a warning unless the &quot;experimental::signatures&quot; warnings category is disabled.</source>
          <target state="translated">。この機能は、実際的な宣言によって最初に有効にする必要があり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'signatures'&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用し&lt;/a&gt;ます。「experimental :: signatures」警告カテゴリが無効になっていない限り、警告が生成されます。</target>
        </trans-unit>
        <trans-unit id="37793220d42e0a63c90efd075b3729c3e11d12c9" translate="yes" xml:space="preserve">
          <source>. The facility must be enabled first by a pragmatic declaration, &lt;code&gt;use feature 'signatures'&lt;/code&gt;, and it will produce a warning unless the &quot;experimental::signatures&quot; warnings category is disabled.</source>
          <target state="translated">。この機能は、最初に実用的な宣言によって有効にする必要があり、 &lt;code&gt;use feature 'signatures'&lt;/code&gt; ます。「実験的::署名」警告カテゴリが無効になっていない限り、警告が生成されます。</target>
        </trans-unit>
        <trans-unit id="ca1e47d5d2c200730329f1acb04a80468d3420bc" translate="yes" xml:space="preserve">
          <source>. The failures are caused by bugs in the CRT in VC++ 2013 which are fixed in VC++2015 and later, as explained by Microsoft here: &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&quot;&gt;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&lt;/a&gt;. In the meantime, if you need fixed &lt;code&gt;stat&lt;/code&gt; and &lt;code&gt;utime&lt;/code&gt; functions then have a look at the CPAN distribution Win32::UTCFileTime.</source>
          <target state="translated">。失敗の原因は、VC ++ 2013のCRTのバグで、VC ++ 2015以降で修正されています。Microsoftは、&lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&quot;&gt;https&lt;/a&gt;：//connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimesで説明しています。 -fails-to-set-the-correct-file-times-in-visual-c-2013。それまでの間、固定の &lt;code&gt;stat&lt;/code&gt; 関数と &lt;code&gt;utime&lt;/code&gt; 関数が必要な場合は、CPANディストリビューションWin32 :: UTCFileTimeをご覧ください。</target>
        </trans-unit>
        <trans-unit id="993996ea1755cbddf6e3835d13a493c47b042aa6" translate="yes" xml:space="preserve">
          <source>. The failures are caused by bugs in the CRT in VC++ 2013 which will be fixed in future releases of VC++, as explained by Microsoft here: &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&quot;&gt;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&lt;/a&gt;. In the meantime, if you need fixed &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; functions then have a look at the CPAN distribution Win32::UTCFileTime.</source>
          <target state="translated">。この失敗は、VC ++ 2013のCRTのバグが原因で発生します。これは、Microsoftが&lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-fails-to-set-the-correct-file-times-in-visual-c-2013&quot;&gt;https://connect.microsoft.com/VisualStudio/feedback/details/811534/utime-sometimes-で&lt;/a&gt;説明しているように、VC ++の将来のリリースで修正される予定です。 fails-to-set-the-correct-file-times-in-visual-c-2013。それまでの間、固定の &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 関数と &lt;code&gt;&lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;&lt;/code&gt; 関数が必要な場合は、CPANディストリビューションWin32 :: UTCFileTimeを確認してください。</target>
        </trans-unit>
        <trans-unit id="693dcad2e62533bf6a6c62ea9e5ed47e0a1b569a" translate="yes" xml:space="preserve">
          <source>. The following table shows them, along with their ASCII code points (in decimal and hex), their ASCII name, the control escape on ASCII platforms and a short description. (For EBCDIC platforms, see &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;&quot;OPERATOR DIFFERENCES&quot; in perlebcdic&lt;/a&gt;.)</source>
          <target state="translated">。次の表に、ASCIIコードポイント（10進数と16進数）、ASCII名、ASCIIプラットフォームでのコントロールエスケープ、および簡単な説明を示します。（EBCDICプラットフォームについては&lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;、perlebcdicの「OPERATORDIFFERENCES」を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="209db736727fc0813e037a50d64ce2c4cb62c7c1" translate="yes" xml:space="preserve">
          <source>. The following table shows them, along with their ASCII code points (in decimal and hex), their ASCII name, the control escape on ASCII platforms and a short description. (For EBCDIC platforms, see &lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;OPERATOR DIFFERENCES in perlebcdic&lt;/a&gt;.)</source>
          <target state="translated">。次の表は、それらをASCIIコードポイント（10進数と16進数）、ASCII名、ASCIIプラットフォームでのコントロールエスケープ、および簡単な説明とともに示しています。（EBCDICプラットフォームについては&lt;a href=&quot;perlebcdic#OPERATOR-DIFFERENCES&quot;&gt;、perlebcdicのOPERATOR DIFFERENCESを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="eb9b603496778c52c1a2d77f91cb20b3c0e09316" translate="yes" xml:space="preserve">
          <source>. The format of</source>
          <target state="translated">。のフォーマット</target>
        </trans-unit>
        <trans-unit id="98bd86fe1138202f1f9439203697d2e6ccc0c1d1" translate="yes" xml:space="preserve">
          <source>. The former is useful if $prefix is a directory dedicated to perl (e.g.</source>
          <target state="translated">。前者は、$ prefixがperl専用のディレクトリ（たとえば、</target>
        </trans-unit>
        <trans-unit id="52456eda920c313c016ecbba8397c6a142320751" translate="yes" xml:space="preserve">
          <source>. The function is intended to be called in this manner:</source>
          <target state="translated">。この関数は、次の方法で呼び出されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="a592425b2e38798803c52cbd4beb0cd4ab9e044b" translate="yes" xml:space="preserve">
          <source>. The function should be defined like this:</source>
          <target state="translated">。関数は次のように定義する必要があります：</target>
        </trans-unit>
        <trans-unit id="9b277cb2a54f819af8bf29778d7360ede4ccd6c6" translate="yes" xml:space="preserve">
          <source>. The initializer value for a scalar element is just a scalar value. The initializer for an array element is an array reference. The initializer for a hash is a hash reference.</source>
          <target state="translated">。スカラー要素の初期化子の値は、単なるスカラー値です。配列要素の初期化子は配列参照です。ハッシュの初期化子はハッシュ参照です。</target>
        </trans-unit>
        <trans-unit id="afbe09239c4b0b80310b301635f392f6bbc5a351" translate="yes" xml:space="preserve">
          <source>. The input is the list of files that match the fileglob.</source>
          <target state="translated">。入力は、fileglobに一致するファイルのリストです。</target>
        </trans-unit>
        <trans-unit id="352aab7b2d0eaa0bc5aa9fc494beb1975384b34a" translate="yes" xml:space="preserve">
          <source>. The key field in the database is the location string and the value field is the time the location was last visited stored as a 4 byte binary value.</source>
          <target state="translated">。データベースのキーフィールドは場所の文字列で、値フィールドは場所が最後に訪れられた時刻で、4バイトのバイナリ値として保存されます。</target>
        </trans-unit>
        <trans-unit id="95555a38b0d0fdd7e883cd86b3b46ad68f807768" translate="yes" xml:space="preserve">
          <source>. The latter is most probably already fixed, if you see it and can trace where the latter spurious warning comes from, please inform me.</source>
          <target state="translated">。後者はおそらくすでに修正されています。もしそれを見て、後者の偽の警告がどこから来たかを追跡できるなら、私に知らせてください。</target>
        </trans-unit>
        <trans-unit id="92fd66a748779ee3429954e90cf1b31a9766b03d" translate="yes" xml:space="preserve">
          <source>. The latter means that if you just installed EMX, and made all the needed changes to</source>
          <target state="translated">。後者は、EMXをインストールし、必要なすべての変更を行った場合</target>
        </trans-unit>
        <trans-unit id="7e4c4954b32c854b5ebec7089c4678970bb9dad2" translate="yes" xml:space="preserve">
          <source>. The logical character sequence itself is unchanged. If</source>
          <target state="translated">。論理文字シーケンス自体は変更されません。もし</target>
        </trans-unit>
        <trans-unit id="cd29714c2a33b9f7328510e6da296e4c8f1474ee" translate="yes" xml:space="preserve">
          <source>. The makefile can use this with something like $shrpenv $(&lt;code&gt;CC&lt;/code&gt; ) -o perl</source>
          <target state="translated">。メイクファイルはこれを$ shrpenv $（ &lt;code&gt;CC&lt;/code&gt; ）-o perlのようなもので使用できます</target>
        </trans-unit>
        <trans-unit id="b03c44aca2024a062290e65cdad6340296b07dc8" translate="yes" xml:space="preserve">
          <source>. The makefile can use this with something like $shrpenv $(&lt;code&gt;CC&lt;/code&gt;) -o perl</source>
          <target state="translated">。makefileは、これを$ shrpenv $（ &lt;code&gt;CC&lt;/code&gt; ）-operlのようなもので使用できます。</target>
        </trans-unit>
        <trans-unit id="d28baca6170ca62229fafab754ab3c6019b0a96c" translate="yes" xml:space="preserve">
          <source>. The mode argument should be a string as would be passed to fopen/PerlIO_open. If it is NULL then - for legacy support - the FILE * is opened in same mode as the PerlIO *.</source>
          <target state="translated">。mode引数は、fopen / PerlIO_openに渡される文字列でなければなりません。NULLの場合、レガシーサポートの場合、FILE *はPerlIO *と同じモードで開かれます。</target>
        </trans-unit>
        <trans-unit id="d127834d1054b17ba75249e4716d18cafb707bc6" translate="yes" xml:space="preserve">
          <source>. The name information can be used for POD translators.</source>
          <target state="translated">。名前情報は、PODトランスレータで使用できます。</target>
        </trans-unit>
        <trans-unit id="7e41d71ac7eded037c4670d30d4568b8d18ea55e" translate="yes" xml:space="preserve">
          <source>. The name of a feature bundle is prefixed with a colon, to distinguish it from an actual feature.</source>
          <target state="translated">。機能バンドルの名前の前には、実際の機能と区別するためにコロンが付いています。</target>
        </trans-unit>
        <trans-unit id="84b15d4f04c91fed2b935cf88259b619f7e87100" translate="yes" xml:space="preserve">
          <source>. The newly-allocated hash table may now have data stored and retrieved. Efforts to store more than &lt;code&gt;$table_size&lt;/code&gt; elements will result in a fatal error, as will efforts to store a value not exactly &lt;code&gt;$value_len&lt;/code&gt; characters in length, or reference through a key not exactly &lt;code&gt;$key_len&lt;/code&gt; characters in length. While these constraints may seem excessive, the result is a hash table using much less internal memory than an equivalent freely-allocated hash table.</source>
          <target state="translated">。新しく割り当てられたハッシュテーブルには、データが格納および取得されます。以上保管するための努力 &lt;code&gt;$table_size&lt;/code&gt; 要素が値ではありません正確に格納するための意志の取り組みとして、致命的なエラーになります &lt;code&gt;$value_len&lt;/code&gt; ない、正確にキーによって長さ、または参照内の文字を &lt;code&gt;$key_len&lt;/code&gt; 長さの文字。これらの制約は過度に見えるかもしれませんが、結果は、同等の自由に割り当てられたハッシュテーブルよりもはるかに少ない内部メモリを使用するハッシュテーブルです。</target>
        </trans-unit>
        <trans-unit id="b95ab5214831e47ae4521fdbeb4471b9560f0ca4" translate="yes" xml:space="preserve">
          <source>. The object should provide the interface described in &lt;a href=&quot;Encode::Encoding&quot;&gt;Encode::Encoding&lt;/a&gt;. If more than two arguments are provided, additional arguments are considered aliases for</source>
          <target state="translated">。オブジェクトは、&lt;a href=&quot;Encode::Encoding&quot;&gt;Encode :: Encodingで&lt;/a&gt;説明されているインターフェイスを提供する必要があります。3つ以上の引数が指定されている場合、追加の引数はのエイリアスと見なされます</target>
        </trans-unit>
        <trans-unit id="90f2a0f7f26f9ff04e556e24ec0e5a3e66bc88a2" translate="yes" xml:space="preserve">
          <source>. The object should provide the interface described in &lt;a href=&quot;encode/encoding&quot;&gt;Encode::Encoding&lt;/a&gt;. If more than two arguments are provided, additional arguments are considered aliases for</source>
          <target state="translated">。オブジェクトは、&lt;a href=&quot;encode/encoding&quot;&gt;Encode :: Encodingで&lt;/a&gt;説明されているインターフェースを提供する必要があります。3つ以上の引数が指定されている場合、追加の引数は、</target>
        </trans-unit>
        <trans-unit id="96a94934114bd87c528984fa35f3cbd286f4a6de" translate="yes" xml:space="preserve">
          <source>. The old way was to declare it as &quot;int (*signal(...))()&quot;.</source>
          <target state="translated">。古い方法は、それを「int（* signal（...））（）」として宣言することでした。</target>
        </trans-unit>
        <trans-unit id="af4d0c63d60ebd8bd921063f1610ae5b1868cae0" translate="yes" xml:space="preserve">
          <source>. The outlier &lt;code&gt;\c?&lt;/code&gt; on ASCII, which yields a non-C0 control &lt;code&gt;DEL&lt;/code&gt; , yields the outlier control &lt;code&gt;APC&lt;/code&gt; on EBCDIC, the one that isn't in the block of contiguous controls. Note that a subtlety of this is that &lt;code&gt;\c?&lt;/code&gt; on ASCII platforms is an ASCII character, while it isn't equivalent to any ASCII character in EBCDIC platforms.</source>
          <target state="translated">。外れ値 &lt;code&gt;\c?&lt;/code&gt; ASCIIでは、C0以外のコントロール &lt;code&gt;DEL&lt;/code&gt; が生成され、隣接するコントロールのブロックにはないEBCDICの外れ値コントロール &lt;code&gt;APC&lt;/code&gt; が生成されます。これの微妙さはその &lt;code&gt;\c?&lt;/code&gt; あることに注意してください？ASCIIプラットフォームではASCII文字ですが、EBCDICプラットフォームのASCII文字とは異なります。</target>
        </trans-unit>
        <trans-unit id="bd3933589237eb991c99b51b88f09d803792f4ad" translate="yes" xml:space="preserve">
          <source>. The outlier &lt;code&gt;\c?&lt;/code&gt; on ASCII, which yields a non-C0 control &lt;code&gt;DEL&lt;/code&gt;, yields the outlier control &lt;code&gt;APC&lt;/code&gt; on EBCDIC, the one that isn't in the block of contiguous controls. Note that a subtlety of this is that &lt;code&gt;\c?&lt;/code&gt; on ASCII platforms is an ASCII character, while it isn't equivalent to any ASCII character in EBCDIC platforms.</source>
          <target state="translated">。外れ値 &lt;code&gt;\c?&lt;/code&gt; 非C0コントロール &lt;code&gt;DEL&lt;/code&gt; を生成するASCIIでは、隣接するコントロールのブロックにないEBCDICで外れ値コントロール &lt;code&gt;APC&lt;/code&gt; を生成します。これの微妙な点は &lt;code&gt;\c?&lt;/code&gt; ASCIIプラットフォームではASCII文字ですが、EBCDICプラットフォームではASCII文字と同等ではありません。</target>
        </trans-unit>
        <trans-unit id="7bd4f959347af60366084a6b999d2b4170409fa5" translate="yes" xml:space="preserve">
          <source>. The output is the list of files that match the fileglob.</source>
          <target state="translated">。出力は、fileglobに一致するファイルのリストです。</target>
        </trans-unit>
        <trans-unit id="3a753f8f2e7a43103d1ff1824cd727b6ecbdb4ec" translate="yes" xml:space="preserve">
          <source>. The pattern code expression is like a regular code expression, except that the result of the code evaluation is treated as a regular expression and matched immediately. A simple example is</source>
          <target state="translated">。パターンコード式は、コード評価の結果が正規表現として扱われ、すぐに照合されることを除いて、正規コード式に似ています。簡単な例は</target>
        </trans-unit>
        <trans-unit id="a244cd3187379cc2fe2c070c785808570854282b" translate="yes" xml:space="preserve">
          <source>. The people with little desire to understand Perl can just rename main(), and do necessary modification in a custom main() which calls the renamed function in appropriate time.</source>
          <target state="translated">。Perlを理解したくない人は、main（）の名前を変更するだけで、名前を変更した関数を適切なタイミングで呼び出すカスタムmain（）で必要な変更を行うことができます。</target>
        </trans-unit>
        <trans-unit id="201d8370b36c2e56d7351b01de7f62376c175f87" translate="yes" xml:space="preserve">
          <source>. The perl headers (in particular &quot;perlio.h&quot;) will &lt;code&gt;#define&lt;/code&gt; them to the I/O mechanism selected at Configure time.</source>
          <target state="translated">。perlヘッダー（特に「perlio.h」）は、構成時に選択されたI / Oメカニズムにそれらを &lt;code&gt;#define&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="ac04dd22ec2d3883b78a8c65c848b91a67ea61d0" translate="yes" xml:space="preserve">
          <source>. The quoted-printable encoding is intended to represent data that largely consists of bytes that correspond to printable characters in the ASCII character set. Each non-printable character (as defined by English Americans) is represented by a triplet consisting of the character &quot;=&quot; followed by two hexadecimal digits.</source>
          <target state="translated">。quoted-printableエンコーディングは、ASCII文字セットの印刷可能な文字に対応するバイトで主に構成されるデータを表すことを目的としています。（英国系アメリカ人によって定義された）印刷不可能な各文字は、文字「=」とそれに続く2つの16進数字で構成されるトリプレットで表されます。</target>
        </trans-unit>
        <trans-unit id="500581814351c949b94b39e4cb44f6f66856596f" translate="yes" xml:space="preserve">
          <source>. The remaining content of the buffer will be moved, and all pointers into the buffer updated appropriately.</source>
          <target state="translated">。バッファの残りのコンテンツが移動され、バッファへのすべてのポインタが適切に更新されます。</target>
        </trans-unit>
        <trans-unit id="22430eb3a8c28a42cd2b9e57521a0c62f976ab90" translate="yes" xml:space="preserve">
          <source>. The repository contains many Perl revisions from Perl 1 onwards and all the revisions from Perforce, the previous version control system.</source>
          <target state="translated">。リポジトリには、Perl 1以降の多くのPerlリビジョンと、以前のバージョン管理システムであるPerforceのすべてのリビジョンが含まれています。</target>
        </trans-unit>
        <trans-unit id="bfb3d7ca2967ce75e740e5fdec318eba71ce3dd4" translate="yes" xml:space="preserve">
          <source>. The rules for this are different for lower-level loops given by the greedy quantifiers &lt;code&gt;*+{}&lt;/code&gt; , and for higher-level ones like the &lt;code&gt;/g&lt;/code&gt; modifier or split() operator.</source>
          <target state="translated">。このルールは、貪欲な量指定子 &lt;code&gt;*+{}&lt;/code&gt; によって与えられる低レベルのループと、 &lt;code&gt;/g&lt;/code&gt; 修飾子やsplit（）演算子のような高レベルのループでは異なります。</target>
        </trans-unit>
        <trans-unit id="1754438a27d471f8ae277b9281477b845d59dd47" translate="yes" xml:space="preserve">
          <source>. The rules for this are different for lower-level loops given by the greedy quantifiers &lt;code&gt;*+{}&lt;/code&gt;, and for higher-level ones like the &lt;code&gt;/g&lt;/code&gt; modifier or &lt;code&gt;split()&lt;/code&gt; operator.</source>
          <target state="translated">。この規則は、貪欲な数量詞 &lt;code&gt;*+{}&lt;/code&gt; によって与えられる低レベルのループと、 &lt;code&gt;/g&lt;/code&gt; 修飾子や &lt;code&gt;split()&lt;/code&gt; 演算子のような高レベルのループでは異なります。</target>
        </trans-unit>
        <trans-unit id="03aa66011823d9de16726ea950dd95ac9e1fd5d9" translate="yes" xml:space="preserve">
          <source>. The simple pipeline command below runs the script without needing to create a temporary file to hold the uncompressed file.</source>
          <target state="translated">。以下の簡単なパイプラインコマンドは、非圧縮ファイルを保持する一時ファイルを作成する必要なしにスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="27721e0ebedbef76f0308d9d0eabaae4fcdb33f6" translate="yes" xml:space="preserve">
          <source>. The string pointed to by &lt;code&gt;key&lt;/code&gt; is Safefree()ed. If one has a</source>
          <target state="translated">。 &lt;code&gt;key&lt;/code&gt; が指す文字列はSafefree（）edです。ある場合</target>
        </trans-unit>
        <trans-unit id="9b46cc835e15bbfbdcebf9ceb7880e84ac2dc80a" translate="yes" xml:space="preserve">
          <source>. The term &quot;backtracking&quot; comes from the idea that matching a regexp is like a walk in the woods. Successfully matching a regexp is like arriving at a destination. There are many possible trailheads, one for each string position, and each one is tried in order, left to right. From each trailhead there may be many paths, some of which get you there, and some which are dead ends. When you walk along a trail and hit a dead end, you have to backtrack along the trail to an earlier point to try another trail. If you hit your destination, you stop immediately and forget about trying all the other trails. You are persistent, and only if you have tried all the trails from all the trailheads and not arrived at your destination, do you declare failure. To be concrete, here is a step-by-step analysis of what Perl does when it tries to match the regexp</source>
          <target state="translated">。 「バックトラック」という用語は、正規表現を一致させることは森の中を散歩するようなものであるという考えに由来しています。正規表現のマッチングに成功することは、目的地に到着するようなものです。ストリングの位置ごとに1つずつ、多くの可能なトレイルヘッドがあり、それぞれが左から右に順番に試行されます。各トレイルヘッドから多くのパスがあり、そこに到達するものもあれば、行き止まりになっているものもあります。トレイルに沿って歩き、行き止まりに達した場合、別のトレイルを試すには、トレイルに沿って前のポイントに戻る必要があります。目的地に到着すると、すぐに立ち止まり、他のすべてのトレイルを試すことを忘れます。あなたは粘り強く、すべてのトレイルヘッドからすべてのトレイルを試し、目的地に到着しなかった場合にのみ、失敗を宣言します。具体的には、これは、Perlが正規表現と一致させようとしたときに何をするかを段階的に分析したものです。</target>
        </trans-unit>
        <trans-unit id="67287b42e112f78aab0082dd4f95584b4f318556" translate="yes" xml:space="preserve">
          <source>. The term 'backtracking' comes from the idea that matching a regexp is like a walk in the woods. Successfully matching a regexp is like arriving at a destination. There are many possible trailheads, one for each string position, and each one is tried in order, left to right. From each trailhead there may be many paths, some of which get you there, and some which are dead ends. When you walk along a trail and hit a dead end, you have to backtrack along the trail to an earlier point to try another trail. If you hit your destination, you stop immediately and forget about trying all the other trails. You are persistent, and only if you have tried all the trails from all the trailheads and not arrived at your destination, do you declare failure. To be concrete, here is a step-by-step analysis of what Perl does when it tries to match the regexp</source>
          <target state="translated">。 「バックトラック」という用語は、正規表現を一致させることが森の中を歩くようなものであるという考えに由来しています。正規表現のマッチングが成功するのは、目的地に到着するようなものです。多くの可能なトレイルヘッドがあり、各ストリング位置に1つあり、それぞれが左から右に順番に試行されます。各トレイルヘッドからは多くのパスがあり、いくつかはそこに到達し、いくつかは行き止まりです。トレイルに沿って歩き、行き止まりに到達した場合、別のトレイルを試すには、トレイルに沿って前のポイントに戻る必要があります。目的地に到着したら、すぐに立ち止まり、他のすべてのトレイルを試すことを忘れます。あなたはしつこくて、すべてのトレイルヘッドからすべてのトレイルを試し、目的地に到着していない場合にのみ、失敗を宣言します。具体的には、Perlが正規表現に一致させようとするときにPerlが行う処理の段階的な分析を以下に示します。</target>
        </trans-unit>
        <trans-unit id="271320c65fb03216673c7a60089d1bfc5db3e659" translate="yes" xml:space="preserve">
          <source>. The third, runs all test files within any subdirectory within any other subdirectory located under</source>
          <target state="translated">。3つ目は、下にある他のサブディレクトリ内のサブディレクトリ内のすべてのテストファイルを実行します</target>
        </trans-unit>
        <trans-unit id="1199d660ecd25075f0cdf9eb332edd41306fb5d2" translate="yes" xml:space="preserve">
          <source>. The tiny</source>
          <target state="translated">。小さな</target>
        </trans-unit>
        <trans-unit id="f8bf61a3338726aa2f8f5b4c9d009164e7670ace" translate="yes" xml:space="preserve">
          <source>. The trailing X's are replaced with unique alphanumeric combinations.</source>
          <target state="translated">。末尾のXは、一意の英数字の組み合わせに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f827c6257f988b2cfbe83fce3e73ddf1d0943d59" translate="yes" xml:space="preserve">
          <source>. The undef third argument means:</source>
          <target state="translated">。undefの3番目の引数は、次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="ff757407b18554327da61107241354758c27a9bd" translate="yes" xml:space="preserve">
          <source>. The use of &lt;code&gt;autodie&lt;/code&gt; with block eval is considered good practice.</source>
          <target state="translated">。 &lt;code&gt;autodie&lt;/code&gt; とblock eval を併用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2a2e85546ff1b49b5a3d548ca91cc9bb13a0aea4" translate="yes" xml:space="preserve">
          <source>. The value will be stored with the specified key in the hash.</source>
          <target state="translated">。値は、指定されたキーとともにハッシュに格納されます。</target>
        </trans-unit>
        <trans-unit id="cc2849d1607b0f29dbd3fdbc14fdf69cbd91b077" translate="yes" xml:space="preserve">
          <source>. Then you can use the modules from your Perl programs with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib &quot;/my/perl_directory/lib/site_perl&quot;;&lt;/code&gt; or sometimes just &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &quot;/my/perl_directory&quot;;&lt;/code&gt; . If you're on a system that requires superuser/root access to install modules into the directories you see when you type &lt;code&gt;perl -e &quot;print qq(@INC)&quot;&lt;/code&gt; , you'll want to install them into a local directory (such as your home directory) and use this approach.</source>
          <target state="translated">。次に、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; lib &quot;/my/perl_directory/lib/site_perl&quot;;&lt;/code&gt; を使用して、Perlプログラムのモジュールを使用できます。または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &quot;/my/perl_directory&quot;;&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;こともあります。。 &lt;code&gt;perl -e &quot;print qq(@INC)&quot;&lt;/code&gt; と入力したときに表示されるディレクトリにモジュールをインストールするためにスーパーユーザー/ルートアクセスが必要なシステムを使用している場合は、それらをローカルディレクトリ（たとえば、あなたのホームディレクトリ）とこのアプローチを使用してください。</target>
        </trans-unit>
        <trans-unit id="1842d5f94a1fdcb49d6f0f77d249f666636122c9" translate="yes" xml:space="preserve">
          <source>. Then you can use the modules from your Perl programs with &lt;code&gt;use lib &quot;/my/perl_directory/lib/site_perl&quot;;&lt;/code&gt; or sometimes just &lt;code&gt;use &quot;/my/perl_directory&quot;;&lt;/code&gt;. If you're on a system that requires superuser/root access to install modules into the directories you see when you type &lt;code&gt;perl -e &quot;print qq(@INC)&quot;&lt;/code&gt;, you'll want to install them into a local directory (such as your home directory) and use this approach.</source>
          <target state="translated">。次に、 &lt;code&gt;use lib &quot;/my/perl_directory/lib/site_perl&quot;;&lt;/code&gt; を使用してPerlプログラムのモジュールを使用できます。または &lt;code&gt;use &quot;/my/perl_directory&quot;;&lt;/code&gt; こともあります。。 &lt;code&gt;perl -e &quot;print qq(@INC)&quot;&lt;/code&gt; と入力したときに表示されるディレクトリにモジュールをインストールするために、スーパーユーザー/ルートアクセスが必要なシステムを使用している場合は、それらをローカルディレクトリ（あなたのホームディレクトリ）そしてこのアプローチを使用してください。</target>
        </trans-unit>
        <trans-unit id="41e2d95e78f178f418e712b7eaca32286569001d" translate="yes" xml:space="preserve">
          <source>. There are many possibilities among the world's languages. The number of combinations is astronomical, and if there were a character for each combination, it would soon exhaust Unicode's more than a million possible characters. So Unicode took a different approach: there is a character for the base &lt;code&gt;H&lt;/code&gt; , and a character for each of the possible marks, and these can be variously combined to get a final logical character. So a logical character--what appears to be a single character--can be a sequence of more than one individual characters. The Unicode standard calls these &quot;extended grapheme clusters&quot; (which is an improved version of the no-longer much used &quot;grapheme cluster&quot;); Perl furnishes the &lt;code&gt;\X&lt;/code&gt; regular expression construct to match such sequences in their entirety.</source>
          <target state="translated">。世界の言語には多くの可能性があります。組み合わせの数は天文学的なものであり、各組み合わせに文字があった場合、すぐにUnicodeの100万以上の可能な文字を使い果たしてしまいます。したがって、Unicodeは異なるアプローチを採用しました。ベース &lt;code&gt;H&lt;/code&gt; の文字と、可能な各マークの文字があり、これらをさまざまに組み合わせて最終的な論理文字を取得できます。したがって、論理文字（単一の文字のように見える）は、複数の個別の文字のシーケンスにすることができます。 Unicode標準では、これらの「拡張書記素クラスター」（これは、あまり使われなくなった「書記素クラスター」の改良版）と呼ばれています。 Perlは、 &lt;code&gt;\X&lt;/code&gt; 正規表現構成を提供して、そのようなシーケンス全体に一致させます。</target>
        </trans-unit>
        <trans-unit id="b859bffd6633a2a259d33db2b3573f666da21944" translate="yes" xml:space="preserve">
          <source>. There are many possibilities among the world's languages. The number of combinations is astronomical, and if there were a character for each combination, it would soon exhaust Unicode's more than a million possible characters. So Unicode took a different approach: there is a character for the base &lt;code&gt;H&lt;/code&gt;, and a character for each of the possible marks, and these can be variously combined to get a final logical character. So a logical character--what appears to be a single character--can be a sequence of more than one individual characters. The Unicode standard calls these &quot;extended grapheme clusters&quot; (which is an improved version of the no-longer much used &quot;grapheme cluster&quot;); Perl furnishes the &lt;code&gt;\X&lt;/code&gt; regular expression construct to match such sequences in their entirety.</source>
          <target state="translated">。世界の言語には多くの可能性があります。組み合わせの数は天文学的なものであり、各組み合わせに文字があった場合、Unicodeの100万を超える可能な文字がすぐに使い果たされてしまいます。そのため、Unicodeは異なるアプローチを採用しました。つまり、ベース &lt;code&gt;H&lt;/code&gt; の文字と、可能な各マークの文字があり、これらをさまざまに組み合わせて、最終的な論理文字を取得できます。したがって、論理文字（単一の文字のように見えるもの）は、複数の個別の文字のシーケンスである可能性があります。 Unicode標準では、これらを「拡張書記素クラスター」と呼んでいます（これは、もはやあまり使用されていない「書記素クラスター」の改良版です）。 Perlは、そのようなシーケンス全体に一致する &lt;code&gt;\X&lt;/code&gt; 正規表現構造を提供します。</target>
        </trans-unit>
        <trans-unit id="1eadc7716975de872df1e240fa5e27efd9843f58" translate="yes" xml:space="preserve">
          <source>. There are quite a few result types available; choosing which class to use is the responsibility of the</source>
          <target state="translated">。利用可能な結果タイプはかなり多くあります。使用するクラスの選択は、</target>
        </trans-unit>
        <trans-unit id="fc1d774c15da48c7b41ed72cf330c112b7557d27" translate="yes" xml:space="preserve">
          <source>. There is no expectation that a module under</source>
          <target state="translated">。下のモジュールが</target>
        </trans-unit>
        <trans-unit id="b15934fcc010d833b1b6611fcee4806aa409aca1" translate="yes" xml:space="preserve">
          <source>. There is no limit to the number of captured substrings that you may use. Groups are numbered with the leftmost open parenthesis being number 1,</source>
          <target state="translated">。使用できるキャプチャされた部分文字列の数に制限はありません。グループには番号が付けられ、左端の開き括弧が1になります。</target>
        </trans-unit>
        <trans-unit id="f07748882481b43ba802e33458c4f0da3c02f2d4" translate="yes" xml:space="preserve">
          <source>. There is no limit to the number of captured substrings that you may use. Groups are numbered with the leftmost open parenthesis being number 1, etc. If a group did not match, the associated backreference won't match either. (This can happen if the group is optional, or in a different branch of an alternation.) You can omit the &lt;code&gt;&quot;g&quot;&lt;/code&gt; , and write &lt;code&gt;&quot;\1&quot;&lt;/code&gt; , etc, but there are some issues with this form, described below.</source>
          <target state="translated">。使用できるキャプチャされた部分文字列の数に制限はありません。グループには番号が付けられ、左端の左括弧が1になります。グループが一致しなかった場合、関連する後方参照も一致しません。（これは、グループがオプションの場合、または代替の別のブランチにある場合に発生する可能性があります。） &lt;code&gt;&quot;g&quot;&lt;/code&gt; を省略したり、 &lt;code&gt;&quot;\1&quot;&lt;/code&gt; を書き込んだりすることができますが、このフォームには、以下で説明するいくつかの問題があります。</target>
        </trans-unit>
        <trans-unit id="eb3ae656b3d4dccde9a6b843783f9804004492bc" translate="yes" xml:space="preserve">
          <source>. There is some naming convention which allows Perl to distinguish correct lines from wrong ones. The above names are almost the only names allowed by this convention which do not contain digits (which have absolutely different semantics).</source>
          <target state="translated">。Perlが正しい行と間違った行を区別できるようにするいくつかの命名規則があります。上記の名前は、数字を含まない（完全に異なるセマンティクスを持つ）この規則で許可されているほとんどの名前です。</target>
        </trans-unit>
        <trans-unit id="70ae579c941e1b2af83331b8b0575b24042dac0b" translate="yes" xml:space="preserve">
          <source>. Therefore data in these fields should NOT be used for dynamic (user-side) configuration.</source>
          <target state="translated">。したがって、これらのフィールドのデータを動的（ユーザー側）構成に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="df7a4d889790cf742e680d4d6efa4fd1ee3dd47f" translate="yes" xml:space="preserve">
          <source>. These are extensions to the traditional regular expression syntax that provide powerful new tools for pattern matching. We have already seen extensions in the form of the minimal matching constructs &lt;code&gt;??&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}?&lt;/code&gt;, and &lt;code&gt;{n,}?&lt;/code&gt;. Most of the extensions below have the form &lt;code&gt;(?char...)&lt;/code&gt;, where the &lt;code&gt;char&lt;/code&gt; is a character that determines the type of extension.</source>
          <target state="translated">。これらは、パターンマッチングのための強力な新しいツールを提供する従来の正規表現構文の拡張機能です。最小限の一致する構造の形で拡張をすでに見ました &lt;code&gt;??&lt;/code&gt; 、 &lt;code&gt;*?&lt;/code&gt; 、 &lt;code&gt;+?&lt;/code&gt; 、 &lt;code&gt;{n,m}?&lt;/code&gt; 、および &lt;code&gt;{n,}?&lt;/code&gt; 。以下の拡張機能のほとんどは &lt;code&gt;(?char...)&lt;/code&gt; という形式で、 &lt;code&gt;char&lt;/code&gt; は拡張機能のタイプを決定する文字です。</target>
        </trans-unit>
        <trans-unit id="f40a1ee0d51ebf15d390e739c288fb892f4c8938" translate="yes" xml:space="preserve">
          <source>. These are extensions to the traditional regular expression syntax that provide powerful new tools for pattern matching. We have already seen extensions in the form of the minimal matching constructs &lt;code&gt;??&lt;/code&gt;, &lt;code&gt;*?&lt;/code&gt;, &lt;code&gt;+?&lt;/code&gt;, &lt;code&gt;{n,m}?&lt;/code&gt;, and &lt;code&gt;{n,}?&lt;/code&gt;. Most of the extensions below have the form &lt;code&gt;(?char...)&lt;/code&gt;, where the &lt;code&gt;char&lt;/code&gt; is a character that determines the type of extension.</source>
          <target state="translated">。これらは、パターンマッチングのための強力な新しいツールを提供する、従来の正規表現構文の拡張です。最小一致構造の形での拡張はすでに見ました &lt;code&gt;??&lt;/code&gt; 、 &lt;code&gt;*?&lt;/code&gt; 、 &lt;code&gt;+?&lt;/code&gt; 、 &lt;code&gt;{n,m}?&lt;/code&gt; 、および &lt;code&gt;{n,}?&lt;/code&gt; 。以下のほとんどの拡張子は &lt;code&gt;(?char...)&lt;/code&gt; 形式で、 &lt;code&gt;char&lt;/code&gt; は拡張子のタイプを決定する文字です。</target>
        </trans-unit>
        <trans-unit id="d0fe671376fe423873e5083176cea32f8c57ff41" translate="yes" xml:space="preserve">
          <source>. These are old libraries supplied so that old programs that use them still run. The</source>
          <target state="translated">。これらは提供されている古いライブラリなので、それらを使用する古いプログラムは引き続き実行されます。の</target>
        </trans-unit>
        <trans-unit id="454759045b5bf4b0bfdcd22dd8dd6d89d962177f" translate="yes" xml:space="preserve">
          <source>. These are shown for historical context and must not be produced in or consumed from any metadata structure of version 2 or higher.</source>
          <target state="translated">。これらは履歴コンテキストで表示されており、バージョン2以降のメタデータ構造で生成または消費してはなりません。</target>
        </trans-unit>
        <trans-unit id="d51f5b82ec726ec3264afac0ee1a71ba67d94d17" translate="yes" xml:space="preserve">
          <source>. These days, your best bet is to look at the &lt;a href=&quot;expect&quot;&gt;Expect&lt;/a&gt; module available from CPAN, which also requires two other modules from CPAN, &lt;a href=&quot;IO::Pty&quot;&gt;IO::Pty&lt;/a&gt; and &lt;a href=&quot;IO::Stty&quot;&gt;IO::Stty&lt;/a&gt;.</source>
          <target state="translated">。最近では、CPANから入手できる&lt;a href=&quot;expect&quot;&gt;Expect&lt;/a&gt;モジュールを確認するのが最善の策です。これには、CPANの他の2つのモジュール、&lt;a href=&quot;IO::Pty&quot;&gt;IO :: Pty&lt;/a&gt;と&lt;a href=&quot;IO::Stty&quot;&gt;IO :: Stty&lt;/a&gt;も必要です。</target>
        </trans-unit>
        <trans-unit id="8364539299fc6e8e877e8a93bec948c2c56a9805" translate="yes" xml:space="preserve">
          <source>. These days, your best bet is to look at the &lt;a href=&quot;http://search.cpan.org/perldoc/Expect&quot;&gt;Expect&lt;/a&gt; module available from CPAN, which also requires two other modules from CPAN, &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Pty&quot;&gt;IO::Pty&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Stty&quot;&gt;IO::Stty&lt;/a&gt;.</source>
          <target state="translated">。最近の最善の策は、CPANから入手できる&lt;a href=&quot;http://search.cpan.org/perldoc/Expect&quot;&gt;Expect&lt;/a&gt;モジュールを確認することです。これには、CPANの他の2つのモジュール、&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Pty&quot;&gt;IO :: Pty&lt;/a&gt;と&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Stty&quot;&gt;IO :: Stty&lt;/a&gt;も必要です。</target>
        </trans-unit>
        <trans-unit id="ba6b2c48d03193d3763913a4f9e3d93618b2d213" translate="yes" xml:space="preserve">
          <source>. These octets are interpreted as either UTF-8 or Latin-1, according to whether the &lt;code&gt;LEX_STUFF_UTF8&lt;/code&gt; flag is set in</source>
          <target state="translated">。これらのオクテットは、 &lt;code&gt;LEX_STUFF_UTF8&lt;/code&gt; フラグが設定されているかどうかに応じて、UTF-8またはLatin-1として解釈されます。</target>
        </trans-unit>
        <trans-unit id="4b3c0c48688a8f7bba27cf24326ee5346b264572" translate="yes" xml:space="preserve">
          <source>. These revisions will never change semantics or add or remove specified behavior.</source>
          <target state="translated">。これらのリビジョンは、セマンティクスを変更したり、指定された動作を追加または削除したりすることはありません。</target>
        </trans-unit>
        <trans-unit id="6319b650504012b1b53a50eecb57429c0a9dcfe4" translate="yes" xml:space="preserve">
          <source>. They are almost like subclasses in that they have the same fields as &lt;code&gt;regnode&lt;/code&gt; , with possibly additional fields following in the structure, and in some cases the specific meaning (and name) of some of base fields are overridden. The following is a more complete description.</source>
          <target state="translated">。それらは &lt;code&gt;regnode&lt;/code&gt; と同じフィールドを持ち、場合によっては追加のフィールドが構造内に続き、場合によってはいくつかの基本フィールドの特定の意味（および名前）がオーバーライドされるという点で、サブクラスとほとんど同じです。以下は、より完全な説明です。</target>
        </trans-unit>
        <trans-unit id="9618e85e95e57cc6614cc9a95470d206c3ad3b7d" translate="yes" xml:space="preserve">
          <source>. They are almost like subclasses in that they have the same fields as &lt;code&gt;regnode&lt;/code&gt;, with possibly additional fields following in the structure, and in some cases the specific meaning (and name) of some of base fields are overridden. The following is a more complete description.</source>
          <target state="translated">。それらは、 &lt;code&gt;regnode&lt;/code&gt; と同じフィールドを持ち、構造内に追加のフィールドが続く可能性があり、場合によっては一部の基本フィールドの特定の意味（および名前）がオーバーライドされるという点で、サブクラスとほとんど同じです。以下は、より完全な説明です。</target>
        </trans-unit>
        <trans-unit id="cd75f69783a2baccf3e6cd502bef7b11d6b9f1dc" translate="yes" xml:space="preserve">
          <source>. They can be used just as ordinary variables:</source>
          <target state="translated">。これらは通常の変数と同じように使用できます。</target>
        </trans-unit>
        <trans-unit id="57272a6cda3a773fa9ad5fcdc0dbe778246cc48b" translate="yes" xml:space="preserve">
          <source>. They need the braces, so are written as &lt;code&gt;/\p{Ll}/&lt;/code&gt; or &lt;code&gt;/\p{Lowercase_Letter}/&lt;/code&gt; , or &lt;code&gt;/\p{General_Category=Lowercase_Letter}/&lt;/code&gt; (the underscores are optional). &lt;code&gt;/\pLl/&lt;/code&gt; is valid, but means something different. It matches a two character string: a letter (Unicode property &lt;code&gt;\pL&lt;/code&gt; ), followed by a lowercase &lt;code&gt;l&lt;/code&gt; .</source>
          <target state="translated">。彼らはように書かれている、ブレースが必要 &lt;code&gt;/\p{Ll}/&lt;/code&gt; または &lt;code&gt;/\p{Lowercase_Letter}/&lt;/code&gt; または &lt;code&gt;/\p{General_Category=Lowercase_Letter}/&lt;/code&gt; （下線はオプションです）。 &lt;code&gt;/\pLl/&lt;/code&gt; は有効ですが、別の意味になります。2文字の文字列に一致します。文字（Unicodeプロパティ &lt;code&gt;\pL&lt;/code&gt; ）の後に小文字の &lt;code&gt;l&lt;/code&gt; が続きます。</target>
        </trans-unit>
        <trans-unit id="7ea6b9b119c9587405e34943c9b5f2d61525197a" translate="yes" xml:space="preserve">
          <source>. They need the braces, so are written as &lt;code&gt;/\p{Ll}/&lt;/code&gt; or &lt;code&gt;/\p{Lowercase_Letter}/&lt;/code&gt;, or &lt;code&gt;/\p{General_Category=Lowercase_Letter}/&lt;/code&gt; (the underscores are optional). &lt;code&gt;/\pLl/&lt;/code&gt; is valid, but means something different. It matches a two character string: a letter (Unicode property &lt;code&gt;\pL&lt;/code&gt;), followed by a lowercase &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">。彼らはように書かれている、ブレースが必要 &lt;code&gt;/\p{Ll}/&lt;/code&gt; または &lt;code&gt;/\p{Lowercase_Letter}/&lt;/code&gt; または &lt;code&gt;/\p{General_Category=Lowercase_Letter}/&lt;/code&gt; （下線はオプションです）。 &lt;code&gt;/\pLl/&lt;/code&gt; は有効ですが、何か違うことを意味します。これは、2文字の文字列に一致します。文字（Unicodeプロパティ &lt;code&gt;\pL&lt;/code&gt; ）の後に小文字の &lt;code&gt;l&lt;/code&gt; が続きます。</target>
        </trans-unit>
        <trans-unit id="c18a582b7f92b4f78c23e95b1cf02accd986e21b" translate="yes" xml:space="preserve">
          <source>. This C code is places at the start of a block, so you can declare variables in it.</source>
          <target state="translated">。このCコードはブロックの先頭に配置されるため、その中で変数を宣言できます。</target>
        </trans-unit>
        <trans-unit id="80f4d13b8729ed274f6a8a631317728de1b0336d" translate="yes" xml:space="preserve">
          <source>. This advances &lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt;bufptr&lt;/a&gt; to match</source>
          <target state="translated">。これにより、&lt;a href=&quot;#PL_parser-%3ebufptr&quot;&gt;PL_parser-&amp;gt; bufptr&lt;/a&gt;が一致するように進みます</target>
        </trans-unit>
        <trans-unit id="b35fcf8a74bd022a9580104a744f0bdc08475a29" translate="yes" xml:space="preserve">
          <source>. This affects Perl's &lt;code&gt;\w&lt;/code&gt; regular expression metanotation, which stands for alphanumeric characters--that is, alphabetic, numeric, and the platform's native underscore. (Consult &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for more information about regular expressions.) Thanks to &lt;code&gt;LC_CTYPE&lt;/code&gt; , depending on your locale setting, characters like &quot;&amp;aelig;&quot;, &quot;&amp;eth;&quot;, &quot;&amp;szlig;&quot;, and &quot;&amp;oslash;&quot; may be understood as &lt;code&gt;\w&lt;/code&gt; characters. It also affects things like &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\D&lt;/code&gt; , and the POSIX character classes, like &lt;code&gt;[[:graph:]]&lt;/code&gt; . (See &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt; for more information on all these.)</source>
          <target state="translated">。これは、Perlの &lt;code&gt;\w&lt;/code&gt; 正規表現メタ表記に影響を与えます。これは、英数字、つまり、アルファベット、数値、およびプラットフォームのネイティブアンダースコアを表します。 （正規表現の詳細については、&lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;を参照してください。） &lt;code&gt;LC_CTYPE&lt;/code&gt; のおかげで、ロケール設定によっては、「&amp;aelig;」、「&amp;eth;」、「&amp;szlig;」、「&amp;oslash;」などの文字は &lt;code&gt;\w&lt;/code&gt; 文字として理解される場合があります。また、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\D&lt;/code&gt; 、および &lt;code&gt;[[:graph:]]&lt;/code&gt; などのPOSIX文字クラスにも影響します。 （これらすべての詳細については、&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="269e5be095f95d8223d1e5356c614e40592cc651" translate="yes" xml:space="preserve">
          <source>. This affects Perl's &lt;code&gt;\w&lt;/code&gt; regular expression metanotation, which stands for alphanumeric characters--that is, alphabetic, numeric, and the platform's native underscore. (Consult &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for more information about regular expressions.) Thanks to &lt;code&gt;LC_CTYPE&lt;/code&gt;, depending on your locale setting, characters like &quot;&amp;aelig;&quot;, &quot;&amp;eth;&quot;, &quot;&amp;szlig;&quot;, and &quot;&amp;oslash;&quot; may be understood as &lt;code&gt;\w&lt;/code&gt; characters. It also affects things like &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\D&lt;/code&gt;, and the POSIX character classes, like &lt;code&gt;[[:graph:]]&lt;/code&gt;. (See &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt; for more information on all these.)</source>
          <target state="translated">。これは、Perlの &lt;code&gt;\w&lt;/code&gt; 正規表現メタノテーションに影響します。これは、英数字（アルファベット、数字、およびプラットフォームのネイティブアンダースコア）を表します。 （正規表現の詳細については、&lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;に問い合わせてください。） &lt;code&gt;LC_CTYPE&lt;/code&gt; のおかげで、ロケール設定によっては、「&amp;aelig;」、「&amp;eth;」、「&amp;szlig;」、「&amp;oslash;」などの文字が &lt;code&gt;\w&lt;/code&gt; 文字として理解される場合があります。また、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\D&lt;/code&gt; 、および &lt;code&gt;[[:graph:]]&lt;/code&gt; などのPOSIX文字クラスにも影響します。 （これらすべての詳細については、&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="292fb479a853e46bd4ecf5a0119063b45e1fdfc9" translate="yes" xml:space="preserve">
          <source>. This construct is useful for optimizations of what would otherwise be &quot;eternal&quot; matches, because it will not backtrack (see &lt;a href=&quot;#Backtracking&quot;&gt;&quot;Backtracking&quot;&lt;/a&gt;). It may also be useful in places where the &quot;grab all you can, and do not give anything back&quot; semantic is desirable.</source>
          <target state="translated">。この構成は、バックトラックしないため、「永遠の」一致となるものの最適化に役立ちます（&lt;a href=&quot;#Backtracking&quot;&gt;「バックトラック」を&lt;/a&gt;参照）。また、「できる限りのことをつかみ、何も返さない」というセマンティクスが望ましい場所でも役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="50585be931797e352a16a31cff946364d2998523" translate="yes" xml:space="preserve">
          <source>. This construct is useful for optimizations of what would otherwise be &quot;eternal&quot; matches, because it will not backtrack (see &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). It may also be useful in places where the &quot;grab all you can, and do not give anything back&quot; semantic is desirable.</source>
          <target state="translated">。この構成は&lt;a href=&quot;#Backtracking&quot;&gt;バックトラックし&lt;/a&gt;ないため、そうでなければ「永遠の」一致となるものの最適化に役立ちます（バックトラッキングを参照）。また、「できる限り手に入れ、何も返さない」というセマンティクスが望ましい場所でも役立ちます。</target>
        </trans-unit>
        <trans-unit id="5dbb5bbf55288455005a9b2624554c934ac032cd" translate="yes" xml:space="preserve">
          <source>. This entered computer lingo via the paper &quot;On Holy Wars and a Plea for Peace&quot; by Danny Cohen, USC/ISI IEN 137, April 1, 1980.</source>
          <target state="translated">。これは、ダニーコーエンによるUSC / ISI IEN 137、1980年4月1日の論文「On Holy Wars and a Plea for Peace」を介してコンピューター用語に入りました。</target>
        </trans-unit>
        <trans-unit id="3809e0e62de48ea8f912fa229a3b1c19f17c36c5" translate="yes" xml:space="preserve">
          <source>. This file acts as both forward declaration of all package routines, and as timestamp for the last update of the hierarchy.</source>
          <target state="translated">。このファイルは、すべてのパッケージルーチンの前方宣言と、階層の最後の更新のタイムスタンプの両方として機能します。</target>
        </trans-unit>
        <trans-unit id="47f0695b79e4a62f046bf4d6a56dc69b6e31a2b7" translate="yes" xml:space="preserve">
          <source>. This file resides somewhere deep in the location you installed your perl library, find it out by</source>
          <target state="translated">。このファイルは、perlライブラリをインストールした場所のどこかにあります。</target>
        </trans-unit>
        <trans-unit id="ae2be3d4dab06ff8de1c3af65b87672a1f250c96" translate="yes" xml:space="preserve">
          <source>. This gives one an access to EMX's</source>
          <target state="translated">。これにより、EMXへのアクセスが可能になります</target>
        </trans-unit>
        <trans-unit id="46aab4ac7dc98f7e211f64d569ae1ce3a7b4af8a" translate="yes" xml:space="preserve">
          <source>. This includes methods inherited or imported by &lt;code&gt;$obj&lt;/code&gt; , &lt;code&gt;CLASS&lt;/code&gt; , or &lt;code&gt;VAL&lt;/code&gt; .</source>
          <target state="translated">。これには、 &lt;code&gt;$obj&lt;/code&gt; 、 &lt;code&gt;CLASS&lt;/code&gt; 、または &lt;code&gt;VAL&lt;/code&gt; によって継承またはインポートされたメソッドが含まれます。</target>
        </trans-unit>
        <trans-unit id="7fe493fe2df58e31314e35f753c63c8bcdf1f60d" translate="yes" xml:space="preserve">
          <source>. This includes methods inherited or imported by &lt;code&gt;$obj&lt;/code&gt;, &lt;code&gt;CLASS&lt;/code&gt;, or &lt;code&gt;VAL&lt;/code&gt;.</source>
          <target state="translated">。これには、 &lt;code&gt;$obj&lt;/code&gt; 、 &lt;code&gt;CLASS&lt;/code&gt; 、または &lt;code&gt;VAL&lt;/code&gt; によって継承またはインポートされたメソッドが含まれます。</target>
        </trans-unit>
        <trans-unit id="d85307dde9a09b32449c60a5313b98a5973ff2c7" translate="yes" xml:space="preserve">
          <source>. This is a private hash where every object is stored. An &quot;object&quot; in this sense is any reference (blessed or unblessed) that has been used as a field hash key.</source>
          <target state="translated">。これは、すべてのオブジェクトが格納されるプライベートハッシュです。この意味での「オブジェクト」とは、フィールドハッシュキーとして使用された（blessedまたはunblessed）参照です。</target>
        </trans-unit>
        <trans-unit id="a2cdaa392edbf49e429fe1dc9214079db19f181c" translate="yes" xml:space="preserve">
          <source>. This is a special file already opened on the script, so that there can be no race condition for evil scripts to exploit. On these systems, Perl should be compiled with &lt;code&gt;-DSETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; . The</source>
          <target state="translated">。これは、スクリプトで既に開かれている特別なファイルなので、悪意のあるスクリプトが悪用するための競合状態はありません。これらのシステムでは、Perlは &lt;code&gt;-DSETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; を指定してコンパイルする必要があります。の</target>
        </trans-unit>
        <trans-unit id="277b7f26027520f2ee1211a1e425554f6a4f4960" translate="yes" xml:space="preserve">
          <source>. This is a special file already opened on the script, so that there can be no race condition for evil scripts to exploit. On these systems, Perl should be compiled with &lt;code&gt;-DSETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt;. The</source>
          <target state="translated">。これはスクリプトですでに開かれている特別なファイルであるため、悪意のあるスクリプトが悪用する競合状態は発生しません。これらのシステムでは、Perlは &lt;code&gt;-DSETUID_SCRIPTS_ARE_SECURE_NOW&lt;/code&gt; を使用してコンパイルする必要があります。ザ・</target>
        </trans-unit>
        <trans-unit id="a2864f51e0809a4502605d91af0e78f8003a6b91" translate="yes" xml:space="preserve">
          <source>. This is because 66 code points will always be unassigned, and so the &lt;code&gt;Age&lt;/code&gt; for them is the Unicode version in which the decision to make them so was made. For example, &lt;code&gt;U+FDD0&lt;/code&gt; is to be permanently unassigned to a character, and the decision to do that was made in version 3.1, so &lt;code&gt;\p{Age=3.1}&lt;/code&gt; matches this character, as also does &lt;code&gt;\p{Present_In: 3.1}&lt;/code&gt; and up.</source>
          <target state="translated">。これは、66のコードポイントが常に割り当てられないためであり、したがって、それらの &lt;code&gt;Age&lt;/code&gt; 、それらを作成する決定がなされたUnicodeバージョンです。たとえば、 &lt;code&gt;U+FDD0&lt;/code&gt; は文字に永続的に割り当てられないため、バージョン3.1で決定されたため、 &lt;code&gt;\p{Age=3.1}&lt;/code&gt; この文字に一致し、 &lt;code&gt;\p{Present_In: 3.1}&lt;/code&gt; およびアップ。</target>
        </trans-unit>
        <trans-unit id="bdf07babd3552a309bc961c0381ffe7de7e8f022" translate="yes" xml:space="preserve">
          <source>. This is because the makefile by default sets the drive letter to</source>
          <target state="translated">。これは、メイクファイルがデフォルトでドライブ文字を設定するためです</target>
        </trans-unit>
        <trans-unit id="fc454fe001d6d36df58e092c61a2198720958a66" translate="yes" xml:space="preserve">
          <source>. This is because there is a conflict with a similarly-named file</source>
          <target state="translated">。これは、同じ名前のファイルとの競合があるためです</target>
        </trans-unit>
        <trans-unit id="2a6af843b3f9c3758afa449207e6300ed8332e2a" translate="yes" xml:space="preserve">
          <source>. This is by design. If</source>
          <target state="translated">。これは仕様によるものです。もし</target>
        </trans-unit>
        <trans-unit id="93f5f59e9c411bf2b79d7d72c3b74942de22a532" translate="yes" xml:space="preserve">
          <source>. This is copied under the</source>
          <target state="translated">。これは</target>
        </trans-unit>
        <trans-unit id="4dd3c68fa5c32e16e123eaa693e773f653650f36" translate="yes" xml:space="preserve">
          <source>. This is currently only supported for &lt;code&gt;GNU&lt;/code&gt; ld on &lt;code&gt;ELF&lt;/code&gt; in dynamic loading builds.</source>
          <target state="translated">。これは現在、動的ローディングビルドの &lt;code&gt;ELF&lt;/code&gt; 上の &lt;code&gt;GNU&lt;/code&gt; ldでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="e7af8025fe87d5aab31b7a47c749ea1a87fce0d6" translate="yes" xml:space="preserve">
          <source>. This is done at run-time, so is called dynamic scoping. local() always affects global variables, also called package variables or dynamic variables.</source>
          <target state="translated">。これは実行時に行われるため、動的スコープと呼ばれます。local（）は常にグローバル変数に影響し、パッケージ変数または動的変数とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="4c25e02bad7d2cac773965d696d2c2a687ad78e4" translate="yes" xml:space="preserve">
          <source>. This is done from</source>
          <target state="translated">。これは</target>
        </trans-unit>
        <trans-unit id="b27ee6639c423265aa7d8874b0268983c66fc9bf" translate="yes" xml:space="preserve">
          <source>. This is installed again by running &lt;code&gt;cpan Bundle::Snapshot_2012_05_21_00&lt;/code&gt; , or installing &lt;code&gt;Bundle::Snapshot_2012_05_21_00&lt;/code&gt; from the CPAN shell.</source>
          <target state="translated">。これは、 &lt;code&gt;cpan Bundle::Snapshot_2012_05_21_00&lt;/code&gt; 実行するか、CPANシェルから &lt;code&gt;Bundle::Snapshot_2012_05_21_00&lt;/code&gt; をインストールすることで再インストールされます。</target>
        </trans-unit>
        <trans-unit id="3823ddaf1238d01760d00a61d4a308fff63739d8" translate="yes" xml:space="preserve">
          <source>. This is normal and expected. (There is a conflict with a similarly-named file</source>
          <target state="translated">。これは正常であり、予想されたものです。（同じ名前のファイルとの競合があります</target>
        </trans-unit>
        <trans-unit id="58c655d0e38e80b9ecc3fca4e245f5ce10c2d9a2" translate="yes" xml:space="preserve">
          <source>. This is probably OK, as most perl scripts shipped with Solaris use an explicit path. (There are a few exceptions, such as</source>
          <target state="translated">。Solarisに同梱されているほとんどのperlスクリプトは明示的なパスを使用しているため、これはおそらく問題ありません。（以下のようないくつかの例外があります。</target>
        </trans-unit>
        <trans-unit id="0e883175469b1c783e8a78114606c2d561139be6" translate="yes" xml:space="preserve">
          <source>. This is rarely needed, as Perl manages its memory quite well. But the option exists, should a class wish to perform specific actions upon the destruction of an instance.</source>
          <target state="translated">。Perlがメモリを非常に適切に管理しているため、これが必要になることはほとんどありません。しかし、クラスがインスタンスの破棄時に特定のアクションを実行したい場合は、オプションが存在します。</target>
        </trans-unit>
        <trans-unit id="333093d5d5321fc34ce46ed78526668442668aef" translate="yes" xml:space="preserve">
          <source>. This is similar to &lt;code&gt;sv_2mortal&lt;/code&gt; in that it is also a mechanism for doing a delayed &lt;code&gt;SvREFCNT_dec&lt;/code&gt; . However, while &lt;code&gt;sv_2mortal&lt;/code&gt; extends the lifetime of &lt;code&gt;sv&lt;/code&gt; until the beginning of the next statement, &lt;code&gt;SAVEFREESV&lt;/code&gt; extends it until the end of the enclosing scope. These lifetimes can be wildly different.</source>
          <target state="translated">。これは、遅延した &lt;code&gt;SvREFCNT_dec&lt;/code&gt; を実行するメカニズムでもあるという点で &lt;code&gt;sv_2mortal&lt;/code&gt; に似ています。ただし、 &lt;code&gt;sv_2mortal&lt;/code&gt; は &lt;code&gt;sv&lt;/code&gt; の寿命を次のステートメントの開始まで延長し &lt;code&gt;SAVEFREESV&lt;/code&gt; が、SAVEFREESVはそれを囲んでいるスコープの終わりまで延長します。これらの寿命は大きく異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="c2f23d830008007d5d457a01dc89576f19b1a675" translate="yes" xml:space="preserve">
          <source>. This is similar to &lt;code&gt;sv_2mortal&lt;/code&gt; in that it is also a mechanism for doing a delayed &lt;code&gt;SvREFCNT_dec&lt;/code&gt;. However, while &lt;code&gt;sv_2mortal&lt;/code&gt; extends the lifetime of &lt;code&gt;sv&lt;/code&gt; until the beginning of the next statement, &lt;code&gt;SAVEFREESV&lt;/code&gt; extends it until the end of the enclosing scope. These lifetimes can be wildly different.</source>
          <target state="translated">。これは、遅延 &lt;code&gt;SvREFCNT_dec&lt;/code&gt; を実行するためのメカニズムでもあるという点で &lt;code&gt;sv_2mortal&lt;/code&gt; に似ています。ただし、 &lt;code&gt;sv_2mortal&lt;/code&gt; は &lt;code&gt;sv&lt;/code&gt; の存続期間を次のステートメントの開始まで延長し &lt;code&gt;SAVEFREESV&lt;/code&gt; が、SAVEFREESVはそれを囲んでいるスコープの終了まで延長します。これらの寿命は大きく異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6926c3ac4d7edc58bc3ea380b4d2d54d9f28838f" translate="yes" xml:space="preserve">
          <source>. This macro evaluates its arguments more than once. If you are using &lt;code&gt;Perl_custom_op_xop&lt;/code&gt; to retreive a &lt;code&gt;XOP *&lt;/code&gt; from a &lt;code&gt;OP *&lt;/code&gt; , use the more efficient &lt;a href=&quot;#XopENTRYCUSTOM&quot;&gt;XopENTRYCUSTOM&lt;/a&gt; instead.</source>
          <target state="translated">。このマクロは引数を複数回評価します。 &lt;code&gt;Perl_custom_op_xop&lt;/code&gt; を使用して &lt;code&gt;OP *&lt;/code&gt; から &lt;code&gt;XOP *&lt;/code&gt; を取得する場合は、より効率的な&lt;a href=&quot;#XopENTRYCUSTOM&quot;&gt;XopENTRYCUSTOMを&lt;/a&gt;代わりに使用してください。</target>
        </trans-unit>
        <trans-unit id="ca414c709e1a90a43e4a8b465a788e53c69235fb" translate="yes" xml:space="preserve">
          <source>. This may be useful e.g., if you need to run the installer many times and do not want to make many interactive changes in the GUI.</source>
          <target state="translated">。これは、たとえば、インストーラを何度も実行する必要があり、GUIでインタラクティブな変更をあまり加えたくない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="e3776f3fabf7ab606cceb1e6f3f63ecb05da2010" translate="yes" xml:space="preserve">
          <source>. This means that if you have already detected the error by checking &lt;code&gt;$@&lt;/code&gt; and you want the program to continue, you must remember to pop the</source>
          <target state="translated">。つまり、 &lt;code&gt;$@&lt;/code&gt; をチェックしてエラーをすでに検出していて、プログラムを続行したい場合は、</target>
        </trans-unit>
        <trans-unit id="b2c905e3737670dc0a16e9b65486ea71a8080a95" translate="yes" xml:space="preserve">
          <source>. This means that in &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x = 1 + $x&lt;/code&gt; the second $x refers to one declared previously.</source>
          <target state="translated">。つまり、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $x = 1 + $x&lt;/code&gt; では、2番目の$ xは以前に宣言されたものを参照しています。</target>
        </trans-unit>
        <trans-unit id="616674a02842b0e140325ccd23516cf1139a3c4a" translate="yes" xml:space="preserve">
          <source>. This means that in &lt;code&gt;my $x = 1 + $x&lt;/code&gt; the second $x refers to one declared previously.</source>
          <target state="translated">。これは、 &lt;code&gt;my $x = 1 + $x&lt;/code&gt; 、2番目の$ xが以前に宣言されたものを参照していることを意味します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
