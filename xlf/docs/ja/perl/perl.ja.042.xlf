<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="0a4bec64b36dddd2d05eab7e4c0c50161f28ee85" translate="yes" xml:space="preserve">
          <source>Jungshik Shin's Hangul FAQ</source>
          <target state="translated">シン・ジュンシクのハングルFAQ</target>
        </trans-unit>
        <trans-unit id="393e8d148b7c32a4801ca4b9adac481fc7a1b559" translate="yes" xml:space="preserve">
          <source>Junk on end of regexp in regex m/%s/</source>
          <target state="translated">正規表現m/%s/の正規表現の末尾にジャンクがある</target>
        </trans-unit>
        <trans-unit id="5f3e3f9c72e3b6a4486ec8a37b16219f4828a4df" translate="yes" xml:space="preserve">
          <source>Just a quick hint here for all those CGI programmers who can't figure out how on earth to get past that 'waiting for input' prompt, when running their CGI script from the command-line, try something like this:</source>
          <target state="translated">コマンドラインから CGI スクリプトを実行しているときに '入力待ち' プロンプトを通過する方法を理解できない CGI プログラマのために、次のようなことを試してみてください。</target>
        </trans-unit>
        <trans-unit id="33892714232f2855fd91a542cad5d54aa9bb7133" translate="yes" xml:space="preserve">
          <source>Just as P5P collectively maintains the codebase, we collectively maintain the documentation. Writing a particular bit of documentation doesn't give an author control of the future of that documentation. At the same time, just as source code changes should match the style of their surrounding blocks, so should documentation changes.</source>
          <target state="translated">P5Pがコードベースをまとめて管理しているように、私たちもドキュメントをまとめて管理しています。特定のドキュメントを書いたからといって、そのドキュメントの将来を作者がコントロールできるわけではありません。同時に、ソースコードの変更が周囲のブロックのスタイルと一致するべきであるのと同じように、ドキュメントの変更もそうでなければなりません。</target>
        </trans-unit>
        <trans-unit id="0aaf4ef0c9b344d1374053d108e2052e07431e98" translate="yes" xml:space="preserve">
          <source>Just as PERL_IMPLICIT_CONTEXT provides a way to bundle up everything that the interpreter knows about itself and pass it around, so too are there plans to allow the interpreter to bundle up everything it knows about the environment it's running on. This is enabled with the PERL_IMPLICIT_SYS macro. Currently it only works with USE_ITHREADS on Windows.</source>
          <target state="translated">PERL_IMPLICIT_CONTEXTが、インタープリタが自分自身について知っていることをすべて束ねて渡す方法を提供しているように、インタープリタが実行している環境について知っていることをすべて束ねて渡すことができるようにする計画もあります。これはPERL_IMPLICIT_SYSマクロで有効になります。現在のところ、Windows の USE_ITHREADS でのみ動作します。</target>
        </trans-unit>
        <trans-unit id="62e8906be80151cd95246c62df9e4761d5bc2332" translate="yes" xml:space="preserve">
          <source>Just as above, but maps from characters (like &quot;\xE9&quot;, lowercase e-acute) to characters (like &quot;e&quot;).</source>
          <target state="translated">上記と同じですが、文字(小文字のe-acuteの&quot;\xE9 &quot;のような)から文字(&quot;e &quot;のような)へのマップです。</target>
        </trans-unit>
        <trans-unit id="f1702c1674bbdf9cb3b7adf0315e4e20270cbf30" translate="yes" xml:space="preserve">
          <source>Just as in all regular expressions, the pattern can be built up by including variables that are interpolated at regex compilation time. But its best to compile each sub-component.</source>
          <target state="translated">すべての正規表現と同じように、正規表現のコンパイル時に補間される変数を含めることでパターンを構築することができます。しかし、各サブコンポーネントをコンパイルするのがベストです。</target>
        </trans-unit>
        <trans-unit id="07b1550eae10318438b9e4b01a4b0de0c550fc87" translate="yes" xml:space="preserve">
          <source>Just as in all regular expressions, the pattern can be built up by including variables that are interpolated at regex compilation time. Care must be taken to ensure that you are getting what you expect. For example:</source>
          <target state="translated">すべての正規表現と同様に、正規表現のコンパイル時に補間される変数を含めることでパターンを構築することができます。期待通りの結果が得られるように注意しなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fe8a855ccb8465e6e734bba6c85f798237a3ef83" translate="yes" xml:space="preserve">
          <source>Just as in the previous regexp, the first quantifier &lt;code&gt;.??&lt;/code&gt; can match earliest at position &lt;code&gt;'a'&lt;/code&gt; , so it does. The second quantifier is greedy, so it matches &lt;code&gt;mm&lt;/code&gt; , and the third matches the rest of the string.</source>
          <target state="translated">前の正規表現と同様に、最初の数量詞 &lt;code&gt;.??&lt;/code&gt; 位置 &lt;code&gt;'a'&lt;/code&gt; で最も早く一致できるため、一致します。2番目の数量詞は貪欲であるため、 &lt;code&gt;mm&lt;/code&gt; と一致し、3 番目の数量詞は残りの文字列と一致します。</target>
        </trans-unit>
        <trans-unit id="b429e6fea7e7282b4255020ad5026d4f3fb6bfbd" translate="yes" xml:space="preserve">
          <source>Just as in the previous regexp, the first quantifier &lt;code&gt;.??&lt;/code&gt; can match earliest at position &lt;code&gt;'a'&lt;/code&gt;, so it does. The second quantifier is greedy, so it matches &lt;code&gt;mm&lt;/code&gt;, and the third matches the rest of the string.</source>
          <target state="translated">前の正規表現と同じように、最初の数量詞 &lt;code&gt;.??&lt;/code&gt; 位置 &lt;code&gt;'a'&lt;/code&gt; で最も早く一致する可能性があるため、一致します。2番目の数量詞は貪欲なので &lt;code&gt;mm&lt;/code&gt; に一致し、3番目の数量詞は文字列の残りの部分に一致します。</target>
        </trans-unit>
        <trans-unit id="54aa745852ee956f0149292237b30dcf7a75e890" translate="yes" xml:space="preserve">
          <source>Just as in the shell, a backslashed bareword following the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; means the same thing as a single-quoted string does:</source>
          <target state="translated">シェルの場合と同様に、 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; に続くバックスラッシュ付きのベアワードは、単一引用符で囲まれた文字列と同じことを意味します。</target>
        </trans-unit>
        <trans-unit id="faebd7db1f892818770103ce78accf7713eb730f" translate="yes" xml:space="preserve">
          <source>Just as numeric comparisons can be autogenerated from the method for &lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt; , string comparisons can be autogenerated from that for &lt;code&gt;'cmp'&lt;/code&gt; :</source>
          <target state="translated">数値比較が &lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt; のメソッドから自動生成できるのと同じように、文字列比較は &lt;code&gt;'cmp'&lt;/code&gt; のそれから自動生成できます。</target>
        </trans-unit>
        <trans-unit id="2f4705ec7dd0e75b639ef6323350a11dcee5bb4b" translate="yes" xml:space="preserve">
          <source>Just as numeric comparisons can be autogenerated from the method for &lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt;, string comparisons can be autogenerated from that for &lt;code&gt;'cmp'&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;'&amp;lt;=&amp;gt;'&lt;/code&gt; のメソッドから数値比較を自動生成できるのと同様に、 &lt;code&gt;'cmp'&lt;/code&gt; のメソッドから文字列比較を自動生成できます。</target>
        </trans-unit>
        <trans-unit id="8df19f323bb6b48a43ad85680dc0529bf785f1c3" translate="yes" xml:space="preserve">
          <source>Just as with &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt;, no shell escapes happen when you &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; a list. Further examples of this can be found in &lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;Safe Pipe Opens in perlipc&lt;/a&gt;.</source>
          <target state="translated">ちょうどと同様 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; したときに、何のシェルエスケープは起こらない &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; リストを。この他の例は&lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;、perlipcのSafe Pipe Opensにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="51995d8ca4bbd6f67f0a4012d50abbc2aa87fe84" translate="yes" xml:space="preserve">
          <source>Just as with &lt;code&gt;system()&lt;/code&gt;, no shell escapes happen when you &lt;code&gt;exec()&lt;/code&gt; a list. Further examples of this can be found in &lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;&quot;Safe Pipe Opens&quot; in perlipc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;system()&lt;/code&gt; の場合と同様に、リストを &lt;code&gt;exec()&lt;/code&gt; するときにシェルエスケープは発生しません。このさらなる例は&lt;a href=&quot;perlipc#Safe-Pipe-Opens&quot;&gt;、perlipcの「SafePipeOpens」にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e255de21718ad7422221bd6f42f8ec7acc85a6f3" translate="yes" xml:space="preserve">
          <source>Just as with any Perl subroutine, all of the arguments passed in &lt;code&gt;@_&lt;/code&gt; are aliases to the original argument. This includes the object itself. If you assign directly to &lt;code&gt;$_[0]&lt;/code&gt; you will change the contents of the variable that holds the reference to the object. We recommend that you don't do this unless you know exactly what you're doing.</source>
          <target state="translated">他のPerlサブルーチンと同様に、@ &lt;code&gt;@_&lt;/code&gt; 渡されるすべての引数は、元の引数のエイリアスです。これにはオブジェクト自体も含まれます。 &lt;code&gt;$_[0]&lt;/code&gt; に直接割り当てると、オブジェクトへの参照を保持する変数の内容が変更されます。何をしているのか正確に理解していない限り、これを行わないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fccd05d91f9ee0d9fbbfbf38723d03e8a7c74f00" translate="yes" xml:space="preserve">
          <source>Just as with any signal, you can use &lt;code&gt;sigaction($rtsig, &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;, $oa)&lt;/code&gt; to retrieve the installed signal handler (or, rather, the signal action).</source>
          <target state="translated">他のシグナルと同様に、 &lt;code&gt;sigaction($rtsig, &lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;, $oa)&lt;/code&gt; を使用して、インストールされているシグナルハンドラー（またはシグナルアクション）を取得できます。</target>
        </trans-unit>
        <trans-unit id="1dd23c5eb258d91db69b09a02592a51973f21dd6" translate="yes" xml:space="preserve">
          <source>Just as with any signal, you can use &lt;code&gt;sigaction($rtsig, undef, $oa)&lt;/code&gt; to retrieve the installed signal handler (or, rather, the signal action).</source>
          <target state="translated">他のシグナルと同様に、 &lt;code&gt;sigaction($rtsig, undef, $oa)&lt;/code&gt; を使用して、インストールされているシグナルハンドラー（またはシグナルアクション）を取得できます。</target>
        </trans-unit>
        <trans-unit id="1dc08a9e71893fc4c8e0aca93a96bf0beab842b5" translate="yes" xml:space="preserve">
          <source>Just because a lexical variable is lexically (also called statically) scoped to its enclosing block, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; FILE, this doesn't mean that within a function it works like a C static. It normally works more like a C auto, but with implicit garbage collection.</source>
          <target state="translated">字句変数が、それを囲むブロック、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; FILEに字句的に（静的に呼ばれる）スコープであるという理由だけで、関数内でCのstaticのように機能するという意味ではありません。通常はCのautoのように機能しますが、暗黙的なガベージコレクションがあります。</target>
        </trans-unit>
        <trans-unit id="78056aba9593d70f12e87925bcfaacc1a8ab6644" translate="yes" xml:space="preserve">
          <source>Just because a lexical variable is lexically (also called statically) scoped to its enclosing block, &lt;code&gt;eval&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; FILE, this doesn't mean that within a function it works like a C static. It normally works more like a C auto, but with implicit garbage collection.</source>
          <target state="translated">字句変数がそれを囲むブロック、 &lt;code&gt;eval&lt;/code&gt; 、または &lt;code&gt;do&lt;/code&gt; FILEに字句的に（静的とも呼ばれる）スコープがあるからといって、これは関数内でC静的のように機能することを意味しません。通常はCオートのように機能しますが、暗黙のガベージコレクションがあります。</target>
        </trans-unit>
        <trans-unit id="90c499a655f030c92a71b95e9b2689970ea91b8a" translate="yes" xml:space="preserve">
          <source>Just because you</source>
          <target state="translated">あなたが</target>
        </trans-unit>
        <trans-unit id="109e6f9598b8183bb06ce69968e5c56fc8392a6f" translate="yes" xml:space="preserve">
          <source>Just before HP took over Compaq, some systems were renamed. the link that contained the explanation is dead, so here's a short summary:</source>
          <target state="translated">HPがCompaqを買収する直前に、いくつかのシステムの名前が変更されました。</target>
        </trans-unit>
        <trans-unit id="75a3cd456f36493a47889dab1eae3ee74e772ac3" translate="yes" xml:space="preserve">
          <source>Just before removing a directory (after having successfully removed everything it contained), &lt;code&gt;remove_tree&lt;/code&gt; attempted to set the permissions on the directory to ensure it could be removed and failed. Program execution continues, but the directory may possibly not be deleted.</source>
          <target state="translated">ディレクトリを削除する直前（ディレクトリに含まれるすべてを正常に削除した後）に、 &lt;code&gt;remove_tree&lt;/code&gt; は、ディレクトリにアクセス権を設定して、ディレクトリが削除されて失敗することを確認しようとしました。プログラムの実行は続行されますが、ディレクトリが削除されない可能性があります。</target>
        </trans-unit>
        <trans-unit id="9d4933b209ef20fa5fe691ade0680077d951e65e" translate="yes" xml:space="preserve">
          <source>Just do it.</source>
          <target state="translated">いいからやってくれ</target>
        </trans-unit>
        <trans-unit id="9cff4cf2ef85b7a7babbfc6ed8ae94ad00cf8c95" translate="yes" xml:space="preserve">
          <source>Just don't forget that you have to put a semicolon on the end to finish the statement, as Perl doesn't know you're not going to try to do this:</source>
          <target state="translated">ただ、Perlはあなたがこれをしようとしていないことを知らないので、文の最後にセミコロンを付けなければならないことを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="328525052fa36f8cc3be7cbb9e20c8b29808d7e3" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#Decimal-Versions&quot;&gt;&quot;Decimal Versions&quot;&lt;/a&gt;, Dotted-Decimal Versions can be used as &lt;a href=&quot;#Alpha-Versions&quot;&gt;&quot;Alpha Versions&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Decimal-Versions&quot;&gt;「10進バージョン」&lt;/a&gt;と同様に、ドット付き10進バージョンは&lt;a href=&quot;#Alpha-Versions&quot;&gt;「アルファバージョン」&lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="2f6d762627d70bbe10fa5260237267dabf212dd8" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;, but implicitly appends a newline at the end of the LIST instead of any value &lt;a href=&quot;perlvar#%24%5C&quot;&gt;&lt;code&gt;$\&lt;/code&gt;&lt;/a&gt; might have. To use FILEHANDLE without a LIST to print the contents of &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt; to it, you must use a bareword filehandle like &lt;code&gt;FH&lt;/code&gt;, not an indirect one like &lt;code&gt;$fh&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt; &lt;code&gt;print&lt;/code&gt; &lt;/a&gt;と同じですが、&lt;a href=&quot;perlvar#%24%5C&quot;&gt; &lt;code&gt;$\&lt;/code&gt; &lt;/a&gt;値の代わりに、LISTの最後に改行を暗黙的に追加します。LISTなしでFILEHANDLEを使用して&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;の内容を出力するには、 &lt;code&gt;$fh&lt;/code&gt; ような間接的なファイルハンドルではなく、 &lt;code&gt;FH&lt;/code&gt; のようなベアワードファイルハンドルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bcfcdab4ac1e20695bdf62962cb38182d5e54e17" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;$^E&lt;/code&gt;, in a numeric context &lt;code&gt;fileLastError()&lt;/code&gt; returns the numeric error value while in a string context it returns a text description of the error [actually it returns a Perl scalar that contains both values so &lt;code&gt;$x= fileLastError()&lt;/code&gt; causes &lt;code&gt;$x&lt;/code&gt; to give different values in string vs. numeric contexts].</source>
          <target state="translated">同じように &lt;code&gt;$^E&lt;/code&gt; 数値コンテキストでは、 &lt;code&gt;fileLastError()&lt;/code&gt; 文字列コンテキストでは、エラーのテキスト説明を返しながら、[数値のエラー値を返します実際にそれはそう両方の値が含まれているPerlのスカラを返す &lt;code&gt;$x= fileLastError()&lt;/code&gt; の原因文字列と数値のコンテキストで異なる値を与える &lt;code&gt;$x&lt;/code&gt; ]。</target>
        </trans-unit>
        <trans-unit id="de3dbf5e42e97a50f069394cda4a6442ac1d1765" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, but implicitly appends a newline. &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; is simply an abbreviation for &lt;code&gt;{ &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; . To use FILEHANDLE without a LIST to print the contents of &lt;code&gt;$_&lt;/code&gt; to it, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; と同じですが、暗黙的に改行が追加されます。 &lt;code&gt;&lt;a href=&quot;functions/say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; 単にの略称である &lt;code&gt;{ &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; 。LISTなしでFILEHANDLEを使用して &lt;code&gt;$_&lt;/code&gt; の内容を出力するには、 &lt;code&gt;$fh&lt;/code&gt; ような間接的なファイルハンドルではなく、 &lt;code&gt;FH&lt;/code&gt; のような実際のファイルハンドルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="602502b6c9a3a727e615412b86a9aecefaaebcdb" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, but implicitly appends a newline. &lt;code&gt;&lt;a href=&quot;say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; is simply an abbreviation for &lt;code&gt;{ &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; . To use FILEHANDLE without a LIST to print the contents of &lt;code&gt;$_&lt;/code&gt; to it, you must use a real filehandle like &lt;code&gt;FH&lt;/code&gt; , not an indirect one like &lt;code&gt;$fh&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; と同じですが、暗黙的に改行が追加されます。 &lt;code&gt;&lt;a href=&quot;say&quot;&gt;say&lt;/a&gt; LIST&lt;/code&gt; 単にの略称である &lt;code&gt;{ &lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $\ = &quot;\n&quot;; &lt;a href=&quot;print&quot;&gt;print&lt;/a&gt; LIST }&lt;/code&gt; 。LISTなしでFILEHANDLEを使用して &lt;code&gt;$_&lt;/code&gt; の内容を出力するには、 &lt;code&gt;$fh&lt;/code&gt; ような間接的なファイルハンドルではなく、 &lt;code&gt;FH&lt;/code&gt; のような実際のファイルハンドルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="841a87198bd8d5b2b617ad09071d079bbef63265" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;SAVEFREESV&lt;/code&gt; , but mortalizes &lt;code&gt;sv&lt;/code&gt; at the end of the current scope instead of decrementing its reference count. This usually has the effect of keeping &lt;code&gt;sv&lt;/code&gt; alive until the statement that called the currently live scope has finished executing.</source>
          <target state="translated">&lt;code&gt;SAVEFREESV&lt;/code&gt; と同じですが、参照カウントを減らすのではなく、現在のスコープの最後で &lt;code&gt;sv&lt;/code&gt; を無効にします。これは通常、現在ライブスコープを呼び出したステートメントの実行が終了するまで &lt;code&gt;sv&lt;/code&gt; を存続させる効果があります。</target>
        </trans-unit>
        <trans-unit id="d8849097832f945b1a9937bcaa379e174bc86623" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;SAVEFREESV&lt;/code&gt;, but mortalizes &lt;code&gt;sv&lt;/code&gt; at the end of the current scope instead of decrementing its reference count. This usually has the effect of keeping &lt;code&gt;sv&lt;/code&gt; alive until the statement that called the currently live scope has finished executing.</source>
          <target state="translated">&lt;code&gt;SAVEFREESV&lt;/code&gt; と同じですが、参照カウントを減らすのではなく、現在のスコープの最後で &lt;code&gt;sv&lt;/code&gt; を強制終了します。これは通常、現在ライブスコープを呼び出したステートメントの実行が終了するまで &lt;code&gt;sv&lt;/code&gt; を存続させる効果があります。</target>
        </trans-unit>
        <trans-unit id="90bed5460b2b3b0cfc33630f1100fa2264399cf7" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;my $f; $f = sub { $f-&amp;gt;() }&lt;/code&gt;, this example leaks memory. The name &lt;code&gt;baz&lt;/code&gt; is a reference to the subroutine, and the subroutine uses the name &lt;code&gt;baz&lt;/code&gt;; they keep each other alive (see &lt;a href=&quot;perlref#Circular-References&quot;&gt;&quot;Circular References&quot; in perlref&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;my $f; $f = sub { $f-&amp;gt;() }&lt;/code&gt; 同じように。$ f = sub {$ f-&amp;gt;（）}、この例ではメモリリークが発生します。名前 &lt;code&gt;baz&lt;/code&gt; はサブルーチンへの参照であり、サブルーチンは名前 &lt;code&gt;baz&lt;/code&gt; を使用します。それらはお互いを生かし続けます（&lt;a href=&quot;perlref#Circular-References&quot;&gt;perlrefの「循環参照」を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bdee811de63331b1e390b9478886674b8221df6d" translate="yes" xml:space="preserve">
          <source>Just like alternation, quantifiers are also susceptible to backtracking. Here is a step-by-step analysis of the example</source>
          <target state="translated">交代と同じように、定量化もバックトラッキングの影響を受けやすいです。ここでは、例のステップバイステップの分析を行います。</target>
        </trans-unit>
        <trans-unit id="24cfeb3771fb43ef585a2f529448474ab41a12a3" translate="yes" xml:space="preserve">
          <source>Just like capa, but only uses a cache from the last time we asked the server, so as to avoid asking more than once.</source>
          <target state="translated">キャパと同じように、前回サーバーに聞いた時のキャッシュしか使わないので、何度も聞かないようにしています。</target>
        </trans-unit>
        <trans-unit id="c07daab474d2a24a41bbf91648b44cb45c039da4" translate="yes" xml:space="preserve">
          <source>Just like have_compiler but for C++ instead of C.</source>
          <target state="translated">have_compilerと同じように、CではなくC++用です。</target>
        </trans-unit>
        <trans-unit id="1ed1a130170978e2a4e7086c7c7306a25c8e7b33" translate="yes" xml:space="preserve">
          <source>Just like special scalars and arrays, there are also special hashes. The most well known of these is &lt;code&gt;%ENV&lt;/code&gt; which contains environment variables. Read all about it (and other special variables) in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">特別なスカラーや配列のように、特別なハッシュもあります。これらの中で最もよく知られているのは、環境変数を含む &lt;code&gt;%ENV&lt;/code&gt; です。それ（およびその他の特殊変数）のすべてを&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;で読んでください。</target>
        </trans-unit>
        <trans-unit id="19b37fcf66fa778fbd1b5d5fc50d7060df9d05e7" translate="yes" xml:space="preserve">
          <source>Just like the &quot;strict&quot; pragma any of these categories can be combined</source>
          <target state="translated">厳密な」プラグマのように、これらのカテゴリのいずれかを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="82e865fa7feb693e6080cbf3d25a874d28e9c584" translate="yes" xml:space="preserve">
          <source>Just pressing Enter will do the most recent operation again - it's a blessing when stepping through miles of source code.</source>
          <target state="translated">Enterキーを押すだけで、最新の操作を再び行うことができます。</target>
        </trans-unit>
        <trans-unit id="fe244a50fe6aded057e3eae12f0a93027edb2381" translate="yes" xml:space="preserve">
          <source>Just say:</source>
          <target state="translated">言えばいいんだよ。</target>
        </trans-unit>
        <trans-unit id="d8c1011fd0f056428d5a8834a2c765887dde0f8b" translate="yes" xml:space="preserve">
          <source>Just set the integer value of the top stack entry to its negation.</source>
          <target state="translated">トップスタックのエントリの整数値をその否定に設定するだけです。</target>
        </trans-unit>
        <trans-unit id="c7727ca967ac9b4f317d7c673ab3882351fa9d9d" translate="yes" xml:space="preserve">
          <source>Just simple slots for storing information about the line and the file the link was encountered in. Has to be filled in manually.</source>
          <target state="translated">ラインとリンク先のファイルに関する情報を保存するための単純なスロットです。手動で記入する必要があります。</target>
        </trans-unit>
        <trans-unit id="375852fdf41d2722bd019bb571f919722e750515" translate="yes" xml:space="preserve">
          <source>Just the Pod, the whole Pod, and nothing but the Pod</source>
          <target state="translated">ただのポッド、ポッド全体、そしてポッド以外の何物でもない</target>
        </trans-unit>
        <trans-unit id="6b1d3328e0f08111bb8c2f1b7ffdbdee9651e208" translate="yes" xml:space="preserve">
          <source>Just to show that C programmers can write C in any programming language, if you prefer a more C-like solution, the following script makes the substitution have the same case, letter by letter, as the original. (It also happens to run about 240% slower than the Perlish solution runs.) If the substitution has more characters than the string being substituted, the case of the last character is used for the rest of the substitution.</source>
          <target state="translated">C言語のプログラマーはどんなプログラミング言語でもC言語を書くことができることを示すために、よりC言語に近い解決策をお望みならば、以下のスクリプトは、元の文字列と同じ大文字小文字を一文字ずつ置換します。(Perlish のソリューションよりも約 240% 遅く動作します。)もし置換される文字列が置換される文字列よりも多い場合は、最後の文字の大文字小文字が残りの置換に使用されます。</target>
        </trans-unit>
        <trans-unit id="4a091e09bfa339a10150c33a9aaadd4282459277" translate="yes" xml:space="preserve">
          <source>Just what it says, you're missing that file. MakeMaker uses it to determine if perl has been rebuilt since the Makefile was made. It's a bit of a bug that it halts installation.</source>
          <target state="translated">書いてある通り、そのファイルを見落としているだけです。MakeMakerはそれを使ってMakefileを作ってからperlがリビルドされたかどうかを判断しています。インストールが止まってしまうのはちょっとしたバグですね。</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="66d19ca0f4158063f6e062dbc4b43cb2360ddc04" translate="yes" xml:space="preserve">
          <source>KEY/VALUE PAIR LIST FUNCTIONS</source>
          <target state="translated">KEY/VALUE ペアリスト機能</target>
        </trans-unit>
        <trans-unit id="ac97fd8044e211b8965191abd3e1372d4a6075d6" translate="yes" xml:space="preserve">
          <source>KEYS</source>
          <target state="translated">KEYS</target>
        </trans-unit>
        <trans-unit id="1294e49f760a91150a0bb4a9bd6180f089f5052a" translate="yes" xml:space="preserve">
          <source>KEYWORDS</source>
          <target state="translated">KEYWORDS</target>
        </trans-unit>
        <trans-unit id="d873371555253b7c518cf82fe5be999156ffe1fc" translate="yes" xml:space="preserve">
          <source>KNOWN BUGS</source>
          <target state="translated">知名度の高いBUGS</target>
        </trans-unit>
        <trans-unit id="d7d37390d4b0162eaa199e8a40421a0fd151d9d4" translate="yes" xml:space="preserve">
          <source>KNOWN ISSUES</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="49f7d6b044c08905cf6f12f8a90c2d7d80dd7870" translate="yes" xml:space="preserve">
          <source>KNOWN PROBLEMS</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="2e6715471399a1b1ebfdc7f8ec81f013da1993a0" translate="yes" xml:space="preserve">
          <source>KOI8 - De Facto Standard for the Cyrillic world</source>
          <target state="translated">KOI8-キリル世界のデファクトスタンダード</target>
        </trans-unit>
        <trans-unit id="d1bf874c052800335db296f8df012e4b563dd5c2" translate="yes" xml:space="preserve">
          <source>KS_C_5601-1987</source>
          <target state="translated">KS_C_5601-1987</target>
        </trans-unit>
        <trans-unit id="48303ff2b3e9c6f3ad91c4b4cea1dcbc0a240594" translate="yes" xml:space="preserve">
          <source>Kansas</source>
          <target state="translated">Kansas</target>
        </trans-unit>
        <trans-unit id="ff0775fcc23b465723521876b29263b74199fe74" translate="yes" xml:space="preserve">
          <source>Karen Etheridge</source>
          <target state="translated">カレン・イーサリッジ</target>
        </trans-unit>
        <trans-unit id="3270844f69bfa9c56dba2d6c3b4cb338e5e7c9e1" translate="yes" xml:space="preserve">
          <source>Karen Etheridge &amp;lt;ether@cpan.org&amp;gt;</source>
          <target state="translated">カレン・エセリッジ&amp;lt;ether@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2dbc3244d892d46238fd249e292072bf980c75ba" translate="yes" xml:space="preserve">
          <source>Karl Williamson &lt;code&gt;khw@cpan.org&lt;/code&gt;</source>
          <target state="translated">カール・ウィリアムソン &lt;code&gt;khw@cpan.org&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6587b068c21cd74b421d84d8dd8d104ffb717b74" translate="yes" xml:space="preserve">
          <source>Kawai,Takanori provides a Japanese translation of a very old version of this manpage at &lt;a href=&quot;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm&quot;&gt;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm&lt;/a&gt;</source>
          <target state="translated">Kawai、Kakanoriは、このマンページの非常に古いバージョンの日本語訳を&lt;a href=&quot;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htm&quot;&gt;http://homepage3.nifty.com/hippo2000/perltips/CPAN.htmで提供しています。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f36b6bb1852c24392fb3ee9a2879da24eb0750d" translate="yes" xml:space="preserve">
          <source>Kazakhstan</source>
          <target state="translated">Kazakhstan</target>
        </trans-unit>
        <trans-unit id="dcff63b147198a52939742818ee2ef592a205e7e" translate="yes" xml:space="preserve">
          <source>Keep features/concepts as orthogonal as possible.</source>
          <target state="translated">特徴・コンセプトはできるだけ直交するようにしましょう。</target>
        </trans-unit>
        <trans-unit id="8e7b10c1d652b6b04a656b434f5b39616ccf1a50" translate="yes" xml:space="preserve">
          <source>Keep hacking until the tests pass.</source>
          <target state="translated">テストが通るまでハッキングを続けてください。</target>
        </trans-unit>
        <trans-unit id="af7d72158e7608d9c4b48305b5171ef45c75b0c8" translate="yes" xml:space="preserve">
          <source>Keep in mind that</source>
          <target state="translated">ということを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="ed0120a6a4cb952cfa71da323a4afdbfcf12e27d" translate="yes" xml:space="preserve">
          <source>Keep in mind that even if you think your code is not locale-aware, it may call a C library function that is. Hopefully the man page for such a function will indicate that dependency, but the documentation is imperfect.</source>
          <target state="translated">自分のコードがロケールに対応していないと思っていても、C ライブラリの関数を呼び出す可能性があることを覚えておいてください。うまくいけば、そのような関数のマニュアルページにその依存関係が示されているといいのですが、ドキュメントは不完全です。</target>
        </trans-unit>
        <trans-unit id="6b2fabd086693247681cb8a1ee02495591d5c9f6" translate="yes" xml:space="preserve">
          <source>Keep in mind that even if you think your code is not locale-aware, it may call a library function that is. Hopefully the man page for such a function will indicate that dependency, but the documentation is imperfect.</source>
          <target state="translated">自分のコードがロケールに対応していないと思っていても、ライブラリ関数を呼び出すことがあることを覚えておいてください。うまくいけば、そのような関数のマニュアルページに依存関係が示されていればいいのですが、ドキュメントは不完全です。</target>
        </trans-unit>
        <trans-unit id="86f6615f078bb4d01730cb8fac56589317fa9a58" translate="yes" xml:space="preserve">
          <source>Keep in mind that only the first several &quot;odd-numbered&quot; buckets are used, so the information on size of the &quot;odd-numbered&quot; buckets which are not used is probably meaningless.</source>
          <target state="translated">最初の数個の「奇数」バケツだけが使用されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4ef95230ae4c52baacdb1c4884acabd7049d178c" translate="yes" xml:space="preserve">
          <source>Keep in mind that these compiler and linker settings will also be used when building CPAN modules. For XS modules to be compiled as a universal binary, any libraries it links to must also be universal binaries. The system libraries that Apple includes with the 10.4u SDK are all universal, but user-installed libraries may need to be re-installed as universal binaries.</source>
          <target state="translated">これらのコンパイラとリンカの設定は、CPANモジュールを構築する際にも使用されることを覚えておいてください。XSモジュールをユニバーサルバイナリとしてコンパイルするためには、リンク先のライブラリもユニバーサルバイナリでなければなりません。Appleが10.4u SDKに同梱しているシステムライブラリはすべてユニバーサルですが、ユーザーがインストールしたライブラリをユニバーサルバイナリとして再インストールする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="9eeeda7b97916fa01cabcb38bff49279f0e6a0bb" translate="yes" xml:space="preserve">
          <source>Keep in mind that you can always supply</source>
          <target state="translated">いつでも供給できることを心に留めておいてください。</target>
        </trans-unit>
        <trans-unit id="64a46910748217f86efd6627ba753bed01e58a81" translate="yes" xml:space="preserve">
          <source>Keep info about source lines on which a subroutine is defined.</source>
          <target state="translated">サブルーチンが定義されているソース行の情報を保持します。</target>
        </trans-unit>
        <trans-unit id="f47e40b91fc5362642fcbe01770e5ce787e6ccdc" translate="yes" xml:space="preserve">
          <source>Keep it fast, simple, and useful.</source>
          <target state="translated">早く、シンプルに、そして便利に。</target>
        </trans-unit>
        <trans-unit id="a180636219ad9f73429c85412c6186e17a5910d6" translate="yes" xml:space="preserve">
          <source>Keep it open and exciting to use/patch/advocate Perl everywhere.</source>
          <target state="translated">どこにいても Perl を使用/パッチ/アドボカテートできるように、オープンでエキサイティングな状態を維持してください。</target>
        </trans-unit>
        <trans-unit id="c51474355aad094e34cfbd22e2141d08f6d33f4f" translate="yes" xml:space="preserve">
          <source>Keep more files open than the system permits</source>
          <target state="translated">システムが許可している以上のファイルを開いておく</target>
        </trans-unit>
        <trans-unit id="14b49f2a3e5ec0e1cdb997e3d03cb485633984fa" translate="yes" xml:space="preserve">
          <source>Keep sets of symbol names palatable to the VMS linker</source>
          <target state="translated">VMS リンカが使いやすいシンボル名のセットを維持する</target>
        </trans-unit>
        <trans-unit id="35e8f597cb9e9a9f82f4e1bd085531a453e9fc6c" translate="yes" xml:space="preserve">
          <source>Keep statics grouped into bins based on request sizes.</source>
          <target state="translated">スタティックは、リクエストサイズに基づいてビンにグループ化された状態を維持します。</target>
        </trans-unit>
        <trans-unit id="b3a15ca125f2b3af86ad1584e6c4e2aafb908eae" translate="yes" xml:space="preserve">
          <source>Keep your documentation near the code it documents (&quot;inline&quot; documentation). Include POD for a given method right above that method's subroutine. This makes it easier to keep the documentation up to date, and avoids having to document each piece of code twice (once in POD and once in comments).</source>
          <target state="translated">ドキュメントは、ドキュメントが記述するコードの近くに置いてください(&quot;インライン &quot;ドキュメント)。与えられたメソッドのPODを、そのメソッドのサブルーチンのすぐ上に含めます。これにより、ドキュメントを最新の状態に保つことが容易になり、各コードを二度(一度はPODで、一度はコメントで)ドキュメント化する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="76d3b7f70d495b2b8a3270d608b55e23f648e0ce" translate="yes" xml:space="preserve">
          <source>Keeping track of the highest cached record. This would allow reads-in-a-row to skip the cache lookup faster (if reading from 1..N with empty cache at start, the last cached value will be always N-1).</source>
          <target state="translated">キャッシュされた最も高いレコードを追跡する。これにより、一行に一度に読み込んだ場合、キャッシュの参照をより速くスキップできるようになります (開始時にキャッシュが空の状態で 1~N から読み込んだ場合、最後にキャッシュされた値は常に N-1 になります)。</target>
        </trans-unit>
        <trans-unit id="4c7c7465de1db7f41ca1d8bdef4219bff0d7c120" translate="yes" xml:space="preserve">
          <source>Ken Williams &amp;lt;ken@mathforum.org&amp;gt;</source>
          <target state="translated">ケンウィリアムス&amp;lt;ken@mathforum.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ad60c49c47f2bac654c72d8e78538a479b9e1298" translate="yes" xml:space="preserve">
          <source>Ken Williams &amp;lt;kwilliams@cpan.org&amp;gt;</source>
          <target state="translated">ケンウィリアムズ&amp;lt;kwilliams@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c6eb55c5e49157861d18ebcd27f647197104aae7" translate="yes" xml:space="preserve">
          <source>Ken Williams wrote the original CPAN Meta Spec (also known as the &quot;META.yml spec&quot;) in 2003 and maintained it through several revisions with input from various members of the community. In 2005, Randy Sims redrafted it from HTML to POD for the version 1.2 release. Ken continued to maintain the spec through version 1.4.</source>
          <target state="translated">Ken Williamsは2003年にオリジナルのCPANメタ仕様(「META.yml仕様」としても知られています)を書き、コミュニティの様々なメンバーからの意見を取り入れながら、何度かの改訂を経て維持してきました。2005年には、Randy Simsがバージョン1.2のリリースのためにHTMLからPODに再編集しました。Kenはバージョン1.4まで仕様の保守を続けました。</target>
        </trans-unit>
        <trans-unit id="abd59a29e35516d1b9c3ad5018ade24ad931f61e" translate="yes" xml:space="preserve">
          <source>Ken Williams, &amp;lt;ken@mathforum.org&amp;gt;</source>
          <target state="translated">ケンウィリアムズ、&amp;lt;ken@mathforum.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="0d1222a0218c97e36123b63438f7b4e4edcb6a3e" translate="yes" xml:space="preserve">
          <source>Ken Williams, kwilliams@cpan.org</source>
          <target state="translated">Ken Williams,kwilliams@cpan.org</target>
        </trans-unit>
        <trans-unit id="a1b34f9f925d8a7063c51b6911f446a276179b5f" translate="yes" xml:space="preserve">
          <source>Kenichi Ishigaki &amp;lt;ishigaki@cpan.org&amp;gt;</source>
          <target state="translated">石垣健一&amp;lt;ishigaki@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e5c191406f2405d085c884671d550970ada2c6b1" translate="yes" xml:space="preserve">
          <source>Kenichi Ishigaki, &amp;lt;ishigaki[at]cpan.org&amp;gt;</source>
          <target state="translated">石垣健一、&amp;lt;ishigaki [at] cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ee0c77223410ec7a299fe0a1261f164a0c42279d" translate="yes" xml:space="preserve">
          <source>Kenneth Albanowski (&amp;lt;kjahds@kjahds.com&amp;gt;), subsequently</source>
          <target state="translated">Kenneth Albanowski（&amp;lt;kjahds@kjahds.com&amp;gt;）、その後</target>
        </trans-unit>
        <trans-unit id="653197d7093377e03793ff947a865bba7483d32a" translate="yes" xml:space="preserve">
          <source>Kent Fredric &amp;lt;kentfredric@gmail.com&amp;gt;</source>
          <target state="translated">ケントフレドリック&amp;lt;kentfredric@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8469bfeb77eb9b1deeb56784d6fba56dcad80b56" translate="yes" xml:space="preserve">
          <source>Kent Fredric &amp;lt;kentnl@cpan.org&amp;gt;</source>
          <target state="translated">ケントフレドリック&amp;lt;kentnl@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="19ee2290090510397bed2e3bc84d4a991ae891b5" translate="yes" xml:space="preserve">
          <source>Kephra</source>
          <target state="translated">Kephra</target>
        </trans-unit>
        <trans-unit id="348f36b3e5bbe51567b4fb414536380d7187542b" translate="yes" xml:space="preserve">
          <source>Kernel threads are the next step in thread evolution. The OS knows about kernel threads, and makes allowances for them. The main difference between a kernel thread and a user-mode thread is blocking. With kernel threads, things that block a single thread don't block other threads. This is not the case with user-mode threads, where the kernel blocks at the process level and not the thread level.</source>
          <target state="translated">カーネルスレッドはスレッドの進化の次のステップです。OSはカーネルスレッドのことを知っていて、それを許容しています。カーネルスレッドとユーザモードスレッドの主な違いは、ブロッキングです。カーネルスレッドでは、1つのスレッドをブロックするものが他のスレッドをブロックすることはありません。これは、カーネルがスレッドレベルではなくプロセスレベルでブロックするユーザーモードスレッドの場合とは異なります。</target>
        </trans-unit>
        <trans-unit id="259173b7d729d8dc6a66caf8b3aace35a75e8f99" translate="yes" xml:space="preserve">
          <source>Kevin Ryde</source>
          <target state="translated">ケビン・ライド</target>
        </trans-unit>
        <trans-unit id="ae72a3031e0506a2cc9019c8072a580c048ea952" translate="yes" xml:space="preserve">
          <source>Kevin Ryde &amp;lt;user42@zip.com.au&amp;gt;</source>
          <target state="translated">Kevin Ryde &amp;lt;user42@zip.com.au&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a297e34f70da8957366c0d560c60295f4ab16d2a" translate="yes" xml:space="preserve">
          <source>Key feature milestones include:</source>
          <target state="translated">主な機能のマイルストーンには以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="bc06e1d8824d5b7cbd20d018550616dba1eeb7a3" translate="yes" xml:space="preserve">
          <source>Key naming</source>
          <target state="translated">キーの命名</target>
        </trans-unit>
        <trans-unit id="a3bc13a9d5bc9bf56b75f62ed64233e64f24fdcc" translate="yes" xml:space="preserve">
          <source>Key value pairs from the right hash are merged to the left hash. Key collisions are only allowed if their values are the same. This merge function will recurse into nested hash refs following the same merge rules.</source>
          <target state="translated">右のハッシュのキー値のペアは左のハッシュにマージされます。キーの衝突は、それらの値が同じ場合にのみ許可されます。このマージ関数は、同じマージルールに従ってネストしたハッシュ参照に再帰します。</target>
        </trans-unit>
        <trans-unit id="0c71372d5d9156fb958ad05c3a06f64214fe7926" translate="yes" xml:space="preserve">
          <source>Key/Value Hash Slices</source>
          <target state="translated">キー/値ハッシュスライス</target>
        </trans-unit>
        <trans-unit id="0a8746998a05aa11ad9c2dab8f6c1868e6458dab" translate="yes" xml:space="preserve">
          <source>Key/value pairs are extra information about the module. Fields include:</source>
          <target state="translated">キー/値のペアはモジュールに関する追加情報です。フィールドには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="6662c40bac78a8fe5e23219b77087fbe7647cb15" translate="yes" xml:space="preserve">
          <source>Keyboard</source>
          <target state="translated">Keyboard</target>
        </trans-unit>
        <trans-unit id="26057b24ccfdf1266160f8baf076207f8248b2c2" translate="yes" xml:space="preserve">
          <source>Keyed on perl version this contains ISO formatted versions of the release dates, as gleaned from &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlhist.html&quot;&gt;perlhist&lt;/a&gt;.</source>
          <target state="translated">perlバージョンをキーとしています。これには、&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlhist.html&quot;&gt;perlhist&lt;/a&gt;から収集したリリース日付のISOフォーマットバージョンが含まれています。</target>
        </trans-unit>
        <trans-unit id="96d27593b7b7961c5ceaead578c38d771573f7f6" translate="yes" xml:space="preserve">
          <source>Keyed on perl version this contains ISO formatted versions of the release dates, as gleaned from &lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlhist&quot;&gt;perlhist&lt;/a&gt;.</source>
          <target state="translated">perlのバージョンをキーこれはから収集としてISOは、リリース日のバージョンがフォーマットされ含まれてい&lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlhist&quot;&gt;perlhist&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d923b20fce2535a3664621e531ef080ff7f9cd6a" translate="yes" xml:space="preserve">
          <source>Keys that are removed and used by run_subtest:</source>
          <target state="translated">run_subtestで削除されて使用されるキー。</target>
        </trans-unit>
        <trans-unit id="dd8db1e0c3088ee11dfc93f5419a78c6f0fd5645" translate="yes" xml:space="preserve">
          <source>Keywords related to Perl modules</source>
          <target state="translated">Perlモジュール」に関連するキーワード</target>
        </trans-unit>
        <trans-unit id="60139b7db3e9d2b51751c4b82ebfa525574e434a" translate="yes" xml:space="preserve">
          <source>Keywords related to classes and object-orientation</source>
          <target state="translated">クラスとオブジェクト指向に関連するキーワード</target>
        </trans-unit>
        <trans-unit id="39c704cf16aa5b97aad8158132dfa370f5b954af" translate="yes" xml:space="preserve">
          <source>Keywords related to scoping</source>
          <target state="translated">スコーピング」に関連するキーワード</target>
        </trans-unit>
        <trans-unit id="c6a3090a3a955be7eca29e8ad0e959206c052266" translate="yes" xml:space="preserve">
          <source>Keywords related to the control flow of your Perl program</source>
          <target state="translated">Perlプログラムの制御フローに関連するキーワード</target>
        </trans-unit>
        <trans-unit id="ac519cac59842ef7ce692b39ea336e75df75601a" translate="yes" xml:space="preserve">
          <source>Killing the parent process</source>
          <target state="translated">親プロセスを殺す</target>
        </trans-unit>
        <trans-unit id="76e63bc788196f0fc365bdd0b40b720b363e2116" translate="yes" xml:space="preserve">
          <source>Kirrily &quot;Skud&quot; Robert &amp;lt;skud@cpan.org&amp;gt;</source>
          <target state="translated">Kirrily &quot;Skud&quot; Robert &amp;lt;skud@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="132f84c02455b94d400579a7b40a518ce274e293" translate="yes" xml:space="preserve">
          <source>Know what you're testing. Read the docs, and the source.</source>
          <target state="translated">何をテストしているのかを知る。ドキュメントとソースを読む。</target>
        </trans-unit>
        <trans-unit id="90303445974fa3fe293cc60d64eaeca6bb4d14c9" translate="yes" xml:space="preserve">
          <source>Known Problems</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="eb6d28effd6acc1d20ab0115a46d456361c67007" translate="yes" xml:space="preserve">
          <source>Known Problems with Perl on Hurd</source>
          <target state="translated">Hurd 上の Perl の既知の問題</target>
        </trans-unit>
        <trans-unit id="2e89de469fa00e2ab9c34571ade9b38ab1c2cab2" translate="yes" xml:space="preserve">
          <source>Known broken in version 0.07. Apparently works fine in 0.06 though. Patch has been submitted to fix the issue.</source>
          <target state="translated">バージョン0.07では壊れていることが知られています。0.06では問題なく動作しているようですが。問題を修正するためのパッチが提出されています。</target>
        </trans-unit>
        <trans-unit id="85d461ba80b969b65622127de6110a76e9ec3b7a" translate="yes" xml:space="preserve">
          <source>Known broken in versions: 1.0.9 and older</source>
          <target state="translated">バージョンでは壊れていることが知られています。1.0.9以前のバージョン</target>
        </trans-unit>
        <trans-unit id="b35d4f63dc3fe926a9db173d1f73bb17b3726246" translate="yes" xml:space="preserve">
          <source>Known problems</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="773f5eaba0582fa827eb62a803e54c124b33061b" translate="yes" xml:space="preserve">
          <source>Known to be broken for 5.8.0 (but 5.6.1 and 5.7.2 can be used):</source>
          <target state="translated">5.8.0では壊れていることが知られています(ただし、5.6.1と5.7.2は使えます)。</target>
        </trans-unit>
        <trans-unit id="140071254cfb3eb18c0425b733d34c90893547ed" translate="yes" xml:space="preserve">
          <source>Komodo</source>
          <target state="translated">Komodo</target>
        </trans-unit>
        <trans-unit id="cf8178f760b75a0d75931dde9fe9ac37025b060d" translate="yes" xml:space="preserve">
          <source>Korean Encodings</source>
          <target state="translated">韓国語エンコード</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="c142a9ba26a24e1b73db61760826e298c4c0ddcb" translate="yes" xml:space="preserve">
          <source>L [abw]</source>
          <target state="translated">L [abw]</target>
        </trans-unit>
        <trans-unit id="a5009766b33ae437bdfad28ba25b247aa809447e" translate="yes" xml:space="preserve">
          <source>LANGUAGE CLASS HIERARCHIES</source>
          <target state="translated">言語クラスのハイラルキー</target>
        </trans-unit>
        <trans-unit id="306bdaf58d73ea39af3b1402b65b299e6a4795ee" translate="yes" xml:space="preserve">
          <source>LAST UPDATE</source>
          <target state="translated">最終更新</target>
        </trans-unit>
        <trans-unit id="aeec63655fed08c1f334fcc126280614a35bdd93" translate="yes" xml:space="preserve">
          <source>LATIN CAPITAL LETTER SHARP S</source>
          <target state="translated">LATIN CAPITAL LETTER SHARP S</target>
        </trans-unit>
        <trans-unit id="27af00b4882cabde6c2deac4be8c6e592a196d2a" translate="yes" xml:space="preserve">
          <source>LATIN SMALL LETTER LONG S</source>
          <target state="translated">LATIN SMALL LETTER LONG S</target>
        </trans-unit>
        <trans-unit id="f956ece64434b3c753877daa6b0151c6f7f8ddbc" translate="yes" xml:space="preserve">
          <source>LATIN1_TO_NATIVE</source>
          <target state="translated">LATIN1_TO_NATIVE</target>
        </trans-unit>
        <trans-unit id="823feb18075201a2009bf899a2b4bee49397d8df" translate="yes" xml:space="preserve">
          <source>LC_TIME</source>
          <target state="translated">LC_TIME</target>
        </trans-unit>
        <trans-unit id="f7314006ff40a8dc21e31c8bdeffdcf14d801b8d" translate="yes" xml:space="preserve">
          <source>LD</source>
          <target state="translated">LD</target>
        </trans-unit>
        <trans-unit id="90ca2bc5ab4dabeeb219828932780cc0dfc4ed8f" translate="yes" xml:space="preserve">
          <source>LDDLFLAGS</source>
          <target state="translated">LDDLFLAGS</target>
        </trans-unit>
        <trans-unit id="931f97ed06ff46676353746b763aa77d0db02597" translate="yes" xml:space="preserve">
          <source>LDFROM</source>
          <target state="translated">LDFROM</target>
        </trans-unit>
        <trans-unit id="7c53807c1836659b4436f686a99f72b3f7ea4a20" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS and EXTRALIBS are always identical under Win32, and BSLOADLIBS and LD_RUN_PATH are always empty (this may change in future).</source>
          <target state="translated">LDLOADLIBSとEXTRALIBSはWin32では常に同じで、BSLOADLIBSとLD_RUN_PATHは常に空です(これは将来変更される可能性があります)。</target>
        </trans-unit>
        <trans-unit id="27d827eb4792696500b4c73ad4ddf3c959ae3870" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS and LD_RUN_PATH</source>
          <target state="translated">LDLOADLIBS と LD_RUN_PATH</target>
        </trans-unit>
        <trans-unit id="1635e0d5ca894812009c83cf6cdbe20b68728252" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS contains both the libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt; and the CRTLs, if any, specified in Config.pm. EXTRALIBS contains just those libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt; . BSLOADLIBS and LD_RUN_PATH are always empty.</source>
          <target state="translated">LDLOADLIBSには、 &lt;code&gt;$potential_libs&lt;/code&gt; 基づいて検出されたライブラリと、Config.pmで指定されたCRTL（存在する場合）の両方が含まれています。EXTRALIBSには、 &lt;code&gt;$potential_libs&lt;/code&gt; 基づいて見つかったライブラリのみが含まれています。BSLOADLIBSおよびLD_RUN_PATHは常に空です。</target>
        </trans-unit>
        <trans-unit id="7f16bd8ecb3686b81b8608aa7cbe6a0280958ee3" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS contains both the libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt; and the CRTLs, if any, specified in Config.pm. EXTRALIBS contains just those libraries found based on &lt;code&gt;$potential_libs&lt;/code&gt;. BSLOADLIBS and LD_RUN_PATH are always empty.</source>
          <target state="translated">LDLOADLIBSには、 &lt;code&gt;$potential_libs&lt;/code&gt; 基づいて検出されたライブラリとConfig.pmで指定されたCRTL（存在する場合）の両方が含まれています。EXTRALIBSには、 &lt;code&gt;$potential_libs&lt;/code&gt; 基づいて検出されたライブラリのみが含まれています。BSLOADLIBSとLD_RUN_PATHは常に空です。</target>
        </trans-unit>
        <trans-unit id="256f68025172870d1f3c1210b89212eca54d2c93" translate="yes" xml:space="preserve">
          <source>LDLOADLIBS's default is changed to $Config{libs}.</source>
          <target state="translated">LDLOADLIBSのデフォルトを$Config{libs}に変更しました。</target>
        </trans-unit>
        <trans-unit id="31a999d2e445df6d94c2d10d2f899c4b7a408247" translate="yes" xml:space="preserve">
          <source>LD_LIBRARY_PATH</source>
          <target state="translated">LD_LIBRARY_PATH</target>
        </trans-unit>
        <trans-unit id="a79d4f252799bf618ff38cdfc040adec85827f0f" translate="yes" xml:space="preserve">
          <source>LEAVE</source>
          <target state="translated">LEAVE</target>
        </trans-unit>
        <trans-unit id="9492fe99bfc78ed50462f6bcf892cde2a90aadb5" translate="yes" xml:space="preserve">
          <source>LEAVE_SRC</source>
          <target state="translated">LEAVE_SRC</target>
        </trans-unit>
        <trans-unit id="4d725158342230fd771b20f0bfaa69c6356a93a2" translate="yes" xml:space="preserve">
          <source>LEAVE_with_name</source>
          <target state="translated">LEAVE_with_name</target>
        </trans-unit>
        <trans-unit id="38a42fd39e3bbdd76ba2dba65bea762f7aea0428" translate="yes" xml:space="preserve">
          <source>LEGACY</source>
          <target state="translated">LEGACY</target>
        </trans-unit>
        <trans-unit id="93eefcbd1b5574d386a865e095b07bc538e3663b" translate="yes" xml:space="preserve">
          <source>LEGACY API</source>
          <target state="translated">レガシーAPI</target>
        </trans-unit>
        <trans-unit id="8b1a39d7d1db940985ed14aca646db0082b3b567" translate="yes" xml:space="preserve">
          <source>LEGACY SUPPORT METHODS</source>
          <target state="translated">リーガシィサポート手法</target>
        </trans-unit>
        <trans-unit id="83bfcddc6a90029e35325994614f31d2dd6cb263" translate="yes" xml:space="preserve">
          <source>LEN</source>
          <target state="translated">LEN</target>
        </trans-unit>
        <trans-unit id="8753fd6c3b8da3cc6d317b80329ed3b40b2aa912" translate="yes" xml:space="preserve">
          <source>LETTERS</source>
          <target state="translated">LETTERS</target>
        </trans-unit>
        <trans-unit id="f481cc60f17adbd0734ec4396c3eec7ff4f97ae1" translate="yes" xml:space="preserve">
          <source>LEVEL</source>
          <target state="translated">LEVEL</target>
        </trans-unit>
        <trans-unit id="fb391320cf8346ac5c53b8c936b575054a4cdd50" translate="yes" xml:space="preserve">
          <source>LIB</source>
          <target state="translated">LIB</target>
        </trans-unit>
        <trans-unit id="8ebe6b4ea1f79cdf5a0cfe5997e4373110b1513a" translate="yes" xml:space="preserve">
          <source>LIB should only be set at &lt;code&gt;perl Makefile.PL&lt;/code&gt; time but is allowed as a MakeMaker argument. It has the effect of setting both INSTALLPRIVLIB and INSTALLSITELIB to that value regardless any explicit setting of those arguments (or of PREFIX). INSTALLARCHLIB and INSTALLSITEARCH are set to the corresponding architecture subdirectory.</source>
          <target state="translated">LIBは &lt;code&gt;perl Makefile.PL&lt;/code&gt; 時にのみ設定する必要がありますが、MakeMaker引数として使用できます。これらの引数（またはPREFIX）の明示的な設定に関係なく、INSTALLPRIVLIBとINSTALLSITELIBの両方をその値に設定する効果があります。INSTALLARCHLIBおよびINSTALLSITEARCHは、対応するアーキテクチャサブディレクトリに設定されます。</target>
        </trans-unit>
        <trans-unit id="8788c623d0db3031e8b87cadf67d1df4c5a2fb41" translate="yes" xml:space="preserve">
          <source>LIBPERL_A</source>
          <target state="translated">LIBPERL_A</target>
        </trans-unit>
        <trans-unit id="00484abc2f0a64aaebb7808382f0c80f8b800d94" translate="yes" xml:space="preserve">
          <source>LIBPTH, BASE_IMPORT, NLM_VERSION, MPKTOOL, TOOLPATH, BOOT_SYMBOL, NLM_SHORT_NAME, INCLUDE, PATH, MM_NW5_REVISION</source>
          <target state="translated">LIBPTH、BASE_IMPORT、NLM_VERSION、MPKTOOL、TOOLPATH、BOOT_SYMBOL、NLM_SHORT_NAME、INCLUDE、PATH、MM_NW5_REVISION</target>
        </trans-unit>
        <trans-unit id="ceb9c454e341a6406ce1dfc1e42b2e34632e5126" translate="yes" xml:space="preserve">
          <source>LIBS</source>
          <target state="translated">LIBS</target>
        </trans-unit>
        <trans-unit id="6e0ad2b047414107e8ce2f294fa40d216b5b68f9" translate="yes" xml:space="preserve">
          <source>LICENCE</source>
          <target state="translated">LICENCE</target>
        </trans-unit>
        <trans-unit id="0417c3cd20e5957970bf6e0315ba11993f41a4ef" translate="yes" xml:space="preserve">
          <source>LICENCE AND COPYRIGHT</source>
          <target state="translated">ライセンスと著作権</target>
        </trans-unit>
        <trans-unit id="0398ccd0f49298b10a3d76a47800d2ebecd49859" translate="yes" xml:space="preserve">
          <source>LICENSE</source>
          <target state="translated">LICENSE</target>
        </trans-unit>
        <trans-unit id="4935e8e440452679bb6e8677598051c98309501a" translate="yes" xml:space="preserve">
          <source>LIFO</source>
          <target state="translated">LIFO</target>
        </trans-unit>
        <trans-unit id="00e15f5838907cd7e1d4b00639d57748e292cb00" translate="yes" xml:space="preserve">
          <source>LIGHTWEIGHT CALLBACKS</source>
          <target state="translated">軽量コールバック</target>
        </trans-unit>
        <trans-unit id="6a872fa8c01524148478fdbe5a27dd0a23bde93f" translate="yes" xml:space="preserve">
          <source>LIKELY</source>
          <target state="translated">LIKELY</target>
        </trans-unit>
        <trans-unit id="929a3a64284b80f705b148843a13caea7da8d500" translate="yes" xml:space="preserve">
          <source>LIMITATIONS</source>
          <target state="translated">LIMITATIONS</target>
        </trans-unit>
        <trans-unit id="e0e14c87e0e2d089b660f73f34d498e64b436810" translate="yes" xml:space="preserve">
          <source>LIMITATIONS of *-x*</source>
          <target state="translated">x*の制限</target>
        </trans-unit>
        <trans-unit id="3850674ed5ef7e98d02bcb7884ce26a4ad1f0c16" translate="yes" xml:space="preserve">
          <source>LIMITATIONS of -x</source>
          <target state="translated">xの制限事項</target>
        </trans-unit>
        <trans-unit id="582303292e0d9bb459bbce59d367e726e77b22ef" translate="yes" xml:space="preserve">
          <source>LIMITATIONS of &lt;b&gt;-x&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;-xの&lt;/b&gt;制限&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="83fa9b97f00ca753b1e5690c43dd3d3361c9665b" translate="yes" xml:space="preserve">
          <source>LIMITS</source>
          <target state="translated">LIMITS</target>
        </trans-unit>
        <trans-unit id="528a45acf62927f5e3020d13509848f28121f5ca" translate="yes" xml:space="preserve">
          <source>LINE</source>
          <target state="translated">LINE</target>
        </trans-unit>
        <trans-unit id="0d7f037733ef398e4fa6caee3e4a76955c742eba" translate="yes" xml:space="preserve">
          <source>LINES</source>
          <target state="translated">LINES</target>
        </trans-unit>
        <trans-unit id="245f22e09d9e6429d729e76e192f663a73a52190" translate="yes" xml:space="preserve">
          <source>LINES_LEFT</source>
          <target state="translated">LINES_LEFT</target>
        </trans-unit>
        <trans-unit id="5a777a56deb32bdeb14873f18eb176dd79982214" translate="yes" xml:space="preserve">
          <source>LINKLIST</source>
          <target state="translated">LINKLIST</target>
        </trans-unit>
        <trans-unit id="2868dce7325577845cbfb4e0cec3533ac2b747a5" translate="yes" xml:space="preserve">
          <source>LINKTYPE</source>
          <target state="translated">LINKTYPE</target>
        </trans-unit>
        <trans-unit id="735cf1665d0fd36f4865e4bc7439abe369572e04" translate="yes" xml:space="preserve">
          <source>LIST</source>
          <target state="translated">LIST</target>
        </trans-unit>
        <trans-unit id="ec269b52cf8883c42dea5c960c258385e031be48" translate="yes" xml:space="preserve">
          <source>LIST DATA</source>
          <target state="translated">リストデータ</target>
        </trans-unit>
        <trans-unit id="c717fe4bbb26a57f5091a39f5ae5c04c8ba67f80" translate="yes" xml:space="preserve">
          <source>LIST OF LANGUAGES</source>
          <target state="translated">言語リスト</target>
        </trans-unit>
        <trans-unit id="7de1e2b32d16e9fef7b2a9299320e7f3351fbed7" translate="yes" xml:space="preserve">
          <source>LIST OF UTILITIES</source>
          <target state="translated">ユーティリティ一覧</target>
        </trans-unit>
        <trans-unit id="567a6688f397cbb26479212b5e88b04513465d6e" translate="yes" xml:space="preserve">
          <source>LIST-REDUCTION FUNCTIONS</source>
          <target state="translated">リスト削減機能</target>
        </trans-unit>
        <trans-unit id="143295635a11822b74bfc416ad32ab68ac277469" translate="yes" xml:space="preserve">
          <source>LISTENING FOR EVENTS</source>
          <target state="translated">イベントのリスティング</target>
        </trans-unit>
        <trans-unit id="79350be1daad6ac703bf5442efacc2b70bd2d6d8" translate="yes" xml:space="preserve">
          <source>LISTs do automatic interpolation of sublists. That is, when a LIST is evaluated, each element of the list is evaluated in list context, and the resulting list value is interpolated into LIST just as if each individual element were a member of LIST. Thus arrays and hashes lose their identity in a LIST--the list</source>
          <target state="translated">LISTはサブリストの自動補間を行う。つまり、LISTが評価されるとき、リストの各要素はリストコンテキストで評価され、結果として得られるリスト値は、個々の要素がLISTのメンバーであるかのように、LISTに補間されます。したがって、配列とハッシュはLISTの中でそのアイデンティティを失います。</target>
        </trans-unit>
        <trans-unit id="755d87179ae52e75a5bb95a78c2b37c1c06b5cfe" translate="yes" xml:space="preserve">
          <source>LNM$FILE_DEV</source>
          <target state="translated">LNM$FILE_DEV</target>
        </trans-unit>
        <trans-unit id="6747cb39338593bcc94d449a6ee06b08744bc3ce" translate="yes" xml:space="preserve">
          <source>LOADING DRIVERS</source>
          <target state="translated">ドライバーの読み込み</target>
        </trans-unit>
        <trans-unit id="1b95b1479e9e1e6747637c53ec6e7b5b14710300" translate="yes" xml:space="preserve">
          <source>LOCALE</source>
          <target state="translated">LOCALE</target>
        </trans-unit>
        <trans-unit id="ff495344ff0fb9c5d5d9ca658b1dad0e61447a28" translate="yes" xml:space="preserve">
          <source>LOCALE CATEGORIES</source>
          <target state="translated">地域別 CATEGORIES</target>
        </trans-unit>
        <trans-unit id="169a463b713e3988d9c565945a1d24d03d787111" translate="yes" xml:space="preserve">
          <source>LOCALE PROBLEMS</source>
          <target state="translated">地域の問題</target>
        </trans-unit>
        <trans-unit id="075620a74284e72caa558c43e5ac902b3bd47d6f" translate="yes" xml:space="preserve">
          <source>LOGDIR</source>
          <target state="translated">LOGDIR</target>
        </trans-unit>
        <trans-unit id="39f15a969419d44e933dbe07a4c0bebe3f003b8b" translate="yes" xml:space="preserve">
          <source>LOGGING</source>
          <target state="translated">LOGGING</target>
        </trans-unit>
        <trans-unit id="95b6b6c48c6cb1e24e041085cc38cb73e88d737e" translate="yes" xml:space="preserve">
          <source>LOOSE MATCHES</source>
          <target state="translated">ルーズマッチ</target>
        </trans-unit>
        <trans-unit id="7c472534c424a35d726eafe69cf1b120cf34c7c5" translate="yes" xml:space="preserve">
          <source>LPT1</source>
          <target state="translated">LPT1</target>
        </trans-unit>
        <trans-unit id="4d71de40d2ab4755f078c64dc10f3df863c7dc76" translate="yes" xml:space="preserve">
          <source>LPT2</source>
          <target state="translated">LPT2</target>
        </trans-unit>
        <trans-unit id="dd4d7e2da6df8d44c6d4b3d53b6a80f8f29324f4" translate="yes" xml:space="preserve">
          <source>LVRET</source>
          <target state="translated">LVRET</target>
        </trans-unit>
        <trans-unit id="18cd8d5a0349b94405db9dec7298507ccea49b05" translate="yes" xml:space="preserve">
          <source>LaTeX docs</source>
          <target state="translated">ラテックスドキュメント</target>
        </trans-unit>
        <trans-unit id="a1b829eae747d240a349da9f0a9a29b98303f5a9" translate="yes" xml:space="preserve">
          <source>Label not found for &quot;last %s&quot;</source>
          <target state="translated">last %s&quot; のラベルが見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="07f82157ea2c43397258b632846b3564c599e77f" translate="yes" xml:space="preserve">
          <source>Label not found for &quot;next %s&quot;</source>
          <target state="translated">next %s&quot; のラベルが見つかりません。</target>
        </trans-unit>
        <trans-unit id="75a081b428c42101382e62175975723a17e6430c" translate="yes" xml:space="preserve">
          <source>Label not found for &quot;redo %s&quot;</source>
          <target state="translated">redo %s&quot; のラベルが見つかりません。</target>
        </trans-unit>
        <trans-unit id="f308ee988ef0e728f295587e6cbde4a2216497cd" translate="yes" xml:space="preserve">
          <source>Lancaster Concensus: &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md&quot;&gt;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md&lt;/a&gt;</source>
          <target state="translated">ランカスターコンセンサス：&lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md&quot;&gt;https&lt;/a&gt;：//github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="f70518aa15c2b8187c80ac13806c15fba56111e6" translate="yes" xml:space="preserve">
          <source>Language Classes</source>
          <target state="translated">言語クラス</target>
        </trans-unit>
        <trans-unit id="cfb711d350591217fd017e0b7ddd59e362322862" translate="yes" xml:space="preserve">
          <source>Language Extensions and Documentation Tools</source>
          <target state="translated">言語拡張とドキュメンテーションツール</target>
        </trans-unit>
        <trans-unit id="6bd54d34369f11dcd172dcc70f872fcab4fd9483" translate="yes" xml:space="preserve">
          <source>Language Handle Attributes and Internals</source>
          <target state="translated">言語ハンドルの属性と内部</target>
        </trans-unit>
        <trans-unit id="c91e4f4c0ce2f8eae1ea5e261c4add9fa7392039" translate="yes" xml:space="preserve">
          <source>Language Specs</source>
          <target state="translated">言語仕様</target>
        </trans-unit>
        <trans-unit id="f9d8878de4ae46e5debd26f638420ea68be31544" translate="yes" xml:space="preserve">
          <source>Language classes are what YourProjClass-&amp;gt;get_handle will try to load. It will look for them by taking each language-tag (&lt;b&gt;skipping&lt;/b&gt; it if it doesn't look like a language-tag or locale-tag!), turning it to all lowercase, turning dashes to underscores, and appending it to YourProjClass . &quot;::&quot;. So this:</source>
          <target state="translated">言語クラスは、YourProjClass-&amp;gt; get_handleがロードしようとするものです。各言語タグを取得し（言語タグまたはロケールタグのように見えない場合は&lt;b&gt;スキップ&lt;/b&gt;します）、すべて小文字に変換し、ダッシュをアンダースコアに変換し、それをYourProjClassに追加して、それらを検索します。「::」。したがって、この：</target>
        </trans-unit>
        <trans-unit id="747c3b7de1d3c3e77b9c7320590e8b1ede8c25e3" translate="yes" xml:space="preserve">
          <source>Language classes may derive from other language classes (although they should have &quot;use</source>
          <target state="translated">言語クラスは他の言語クラスから派生することができます(ただし、&quot;use</target>
        </trans-unit>
        <trans-unit id="a1e10c58f87505ae028c597e6cc528cbbe1058b2" translate="yes" xml:space="preserve">
          <source>Language tags are a formalism, described in RFC 3066 (obsoleting 1766), for declaring what language form (language and possibly dialect) a given chunk of information is in.</source>
          <target state="translated">言語タグは、与えられた情報の塊がどのような言語形式(言語と場合によっては方言)であるかを宣言するための形式主義で、RFC 3066で記述されています(1766は廃止されています)。</target>
        </trans-unit>
        <trans-unit id="97e909840ec23e6aa4c68a221630c55bfbbb900a" translate="yes" xml:space="preserve">
          <source>Language tags are not case-sensitive. en-US, en-us, En-Us, etc., are all the same tag, and denote the same language.</source>
          <target state="translated">言語タグは大文字小文字を区別しません。 en-US、en-us、En-Usなどはすべて同じタグで、同じ言語を表します。</target>
        </trans-unit>
        <trans-unit id="2041c3756bf5afe1a1cc3301a6ebbbd4f47a0037" translate="yes" xml:space="preserve">
          <source>Language tags are not country codes. In fact, they are often distinct codes, as with language tag ja for Japanese, and ISO 3166 country code &lt;code&gt;.jp&lt;/code&gt; for Japan.</source>
          <target state="translated">言語タグは国コードではありません。実際、それらは、日本語の言語タグjaや、日本のISO 3166国コード &lt;code&gt;.jp&lt;/code&gt; と同様に、多くの場合、別個のコードです。</target>
        </trans-unit>
        <trans-unit id="6108174a71e0210309b5a122717007cd6591f45e" translate="yes" xml:space="preserve">
          <source>Language tags are not for computer languages.</source>
          <target state="translated">言語タグはコンピュータ言語のためのものではありません。</target>
        </trans-unit>
        <trans-unit id="6368278c82dd6595f994cb8b61fde8b578ee7f10" translate="yes" xml:space="preserve">
          <source>Language tags are not locale IDs. A locale ID is written with a &quot;_&quot; instead of a &quot;-&quot;, (almost?) always matches &lt;code&gt;&lt;a href=&quot;../../functions/m&quot;&gt;m/^\w\w_\w\w\b/&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="translated">言語タグはロケールIDではありません。ロケールIDは「-」ではなく「_」で記述され、（ほぼ？）は常に &lt;code&gt;&lt;a href=&quot;../../functions/m&quot;&gt;m/^\w\w_\w\w\b/&lt;/a&gt;&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="c3a10dc31440ea548103f890434cb5dc0e0cf98f" translate="yes" xml:space="preserve">
          <source>Language tags are not locale IDs. A locale ID is written with a &quot;_&quot; instead of a &quot;-&quot;, (almost?) always matches &lt;code&gt;m/^\w\w_\w\w\b/&lt;/code&gt;, and</source>
          <target state="translated">言語タグはロケールIDではありません。ロケールIDは、「-」ではなく「_」で記述され、（ほぼ？）常に &lt;code&gt;m/^\w\w_\w\w\b/&lt;/code&gt; と一致し、</target>
        </trans-unit>
        <trans-unit id="8edaa0c28ca3e32511fbcd5b5f49058ccc534792" translate="yes" xml:space="preserve">
          <source>Language-Specific</source>
          <target state="translated">Language-Specific</target>
        </trans-unit>
        <trans-unit id="21162f096b26204df6588bb5dc28d2f51868c501" translate="yes" xml:space="preserve">
          <source>Large File Support</source>
          <target state="translated">大容量ファイル対応</target>
        </trans-unit>
        <trans-unit id="cfd4c46c9150c3e9cafc48d2cf89b769398b7ba2" translate="yes" xml:space="preserve">
          <source>Large language group.</source>
          <target state="translated">大人数の言語グループ。</target>
        </trans-unit>
        <trans-unit id="68cb5c276851e088e954a75127561094108d7ebb" translate="yes" xml:space="preserve">
          <source>Large numbers of other programmers will be using your code modules.</source>
          <target state="translated">多数の他のプログラマーがあなたのコードモジュールを使用しています。</target>
        </trans-unit>
        <trans-unit id="aed9d519447abe0e1e87e2be7e3184966a86c56b" translate="yes" xml:space="preserve">
          <source>Larger increments or decrements are handy in those cases where a thread needs to check out or return a number of resources at once.</source>
          <target state="translated">スレッドがチェックアウトしたり、一度に多くのリソースを返す必要がある場合には、より大きな増分や減分が便利です。</target>
        </trans-unit>
        <trans-unit id="fd62837b713bdee00d46e7ce620e1a597b3acf56" translate="yes" xml:space="preserve">
          <source>Larry Wall</source>
          <target state="translated">ラリーウォール</target>
        </trans-unit>
        <trans-unit id="d125a04b7cfbc6bf9a0d7e4500f4ff8af7def2b3" translate="yes" xml:space="preserve">
          <source>Larry Wall &amp;lt;larry@wall.org&amp;gt;</source>
          <target state="translated">ラリーウォール&amp;lt;larry@wall.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9800616a976bc743bc49de05b3ff6a81a8fed2bf" translate="yes" xml:space="preserve">
          <source>Larry Wall &amp;lt;larry@wall.org&amp;gt;, with the help of oodles of other folks.</source>
          <target state="translated">Larry Wall &amp;lt;larry@wall.org&amp;gt;、他の人々の助けを借りて。</target>
        </trans-unit>
        <trans-unit id="50431f0b84e94e89d59726aa67764d4b5cb64130" translate="yes" xml:space="preserve">
          <source>Larry Wall and others</source>
          <target state="translated">ラリー・ウォールなど</target>
        </trans-unit>
        <trans-unit id="0fb4b4d75483396b0cb6c4053090cf1353b0f053" translate="yes" xml:space="preserve">
          <source>Larry Wall designed the elegant inherited bootstrap mechanism and implemented the first Perl 5 dynamic loader using it.</source>
          <target state="translated">Larry Wall氏は、エレガントな継承型ブートストラップメカニズムを設計し、それを使用して最初のPerl 5ダイナミックローダーを実装しました。</target>
        </trans-unit>
        <trans-unit id="49cef125f502490a3eaa452e5063337afd4e5415" translate="yes" xml:space="preserve">
          <source>Larry Wall, Sean M. Burke</source>
          <target state="translated">ラリー・ウォール、ショーン・M・バーク</target>
        </trans-unit>
        <trans-unit id="cad8518108cca44400e2368862a0f1a16bff95c7" translate="yes" xml:space="preserve">
          <source>Larry has his reasons for each of these things, but he doesn't claim that everyone else's mind works the same as his does.</source>
          <target state="translated">ラリーにはそれぞれの理由があるが、彼は他人の心が自分の心と同じように働くとは主張しない。</target>
        </trans-unit>
        <trans-unit id="3e11f8268af6857ace69f95b629b0d80778d0d6d" translate="yes" xml:space="preserve">
          <source>Larry is allowed to change his mind about any matter at a later date, regardless of whether he previously invoked Rule 1.</source>
          <target state="translated">ラリーは、以前にルール1を発動したかどうかにかかわらず、いかなる問題についても、後日、心変わりをすることが許されています。</target>
        </trans-unit>
        <trans-unit id="e3d699c187f5eebff127e90268deebe55f0277f7" translate="yes" xml:space="preserve">
          <source>Larry is always by definition right about how Perl should behave. This means he has final veto power on the core functionality.</source>
          <target state="translated">Larry は Perl がどのように振る舞うべきかについては、定義上常に正しいです。これは、彼がコア機能に対する最終的な拒否権を持っていることを意味します。</target>
        </trans-unit>
        <trans-unit id="91247cb31b4e3f24a173a3ed4edb3fbe905e9dfa" translate="yes" xml:space="preserve">
          <source>Larry said &quot;Although the Perl Slogan is</source>
          <target state="translated">ラリーは「Perlのスローガンは</target>
        </trans-unit>
        <trans-unit id="8840809999231d8845f9dcc8eb994457fd02a531" translate="yes" xml:space="preserve">
          <source>Larry sees Perl development along the lines of the US government: there's the Legislature (the porters), the Executive branch (the -pumpking), and the Supreme Court (Larry). The legislature can discuss and submit patches to the executive branch all they like, but the executive branch is free to veto them. Rarely, the Supreme Court will side with the executive branch over the legislature, or the legislature over the executive branch. Mostly, however, the legislature and the executive branch are supposed to get along and work out their differences without impeachment or court cases.</source>
          <target state="translated">ラリーはPerlの開発をアメリカ政府のようなものだと考えています。立法府は好きなだけ議論して執行部にパッチを提出することができますが、執行部は拒否権を行使することができます。まれに、最高裁判所が立法府よりも行政府に味方することもあれば、行政府よりも立法府に味方することもあります。しかし、ほとんどの場合、立法府と執行部は仲良くして、弾劾や裁判なしで相違点を解決することになっています。</target>
        </trans-unit>
        <trans-unit id="ae001311ff213d6955f7360f41d0eb019566259e" translate="yes" xml:space="preserve">
          <source>Lars Dieckow &amp;lt;daxim@cpan.org&amp;gt;</source>
          <target state="translated">Lars Dieckow &amp;lt;daxim@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="86c4e4485ad3dbbdb5b5dd2e9dedc2315a7311d5" translate="yes" xml:space="preserve">
          <source>Last Changed</source>
          <target state="translated">最終更新日</target>
        </trans-unit>
        <trans-unit id="1210639f474f0d343df95007771fdc202b411de7" translate="yes" xml:space="preserve">
          <source>Last In, First Out. See also &lt;b&gt;FIFO&lt;/b&gt;. A LIFO is usually called a &lt;b&gt;stack&lt;/b&gt;.</source>
          <target state="translated">最初のうちの最後の。&lt;b&gt;FIFO&lt;/b&gt;も参照してください。LIFOは通常、&lt;b&gt;スタック&lt;/b&gt;と呼ばれ&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="40830c73142a53064766f6ffa38ec5fccd97ec73" translate="yes" xml:space="preserve">
          <source>Last Updated: Fri, 29 Oct 1999 22:50:30 +0200</source>
          <target state="translated">最終更新日:1999年10月29日(金)22:30 1999年10月29日(金)22:50:30 +0200</target>
        </trans-unit>
        <trans-unit id="f1e5fc7462efd81797093d9980b1aa8171197971" translate="yes" xml:space="preserve">
          <source>Last but not least, here are various tips for safer coding. See also &lt;a href=&quot;perlclib&quot;&gt;perlclib&lt;/a&gt; for libc/stdio replacements one should use.</source>
          <target state="translated">最後に重要なことですが、安全なコーディングのためのさまざまなヒントがあります。libc / stdioの置き換えについては、&lt;a href=&quot;perlclib&quot;&gt;perlclib&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="dceffa1b326ba5ef1523c69acacd202e09a06fa6" translate="yes" xml:space="preserve">
          <source>Last modified 2013-04-29.</source>
          <target state="translated">最終更新 2013-04-29.</target>
        </trans-unit>
        <trans-unit id="5c3f1c04106319751d7e999882c029924d60d858" translate="yes" xml:space="preserve">
          <source>Last revised 14-Feb-1996, for Perl 5.002.</source>
          <target state="translated">最終改訂は1996年2月14日、Perl 5.002用。</target>
        </trans-unit>
        <trans-unit id="c3eb2ac9f32e61251e1875ad9708ab6315be2573" translate="yes" xml:space="preserve">
          <source>Last revised 8-Oct-2010, for Perl 5.13.6.</source>
          <target state="translated">最終改訂は2010年10月8日、Perl 5.13.6用です。</target>
        </trans-unit>
        <trans-unit id="c838bd278b91a142d60ea0e71aa5a59ad40e1552" translate="yes" xml:space="preserve">
          <source>Last update: 2008-10-29</source>
          <target state="translated">最終更新日:2008-10-29</target>
        </trans-unit>
        <trans-unit id="fc7ec2c58f8d11214b25d3966287144f54470cfe" translate="yes" xml:space="preserve">
          <source>Last update: Tue Apr 26 18:30:55 MDT 2011</source>
          <target state="translated">最終更新日:Tue Apr 26 18:30:55 MDT 2011</target>
        </trans-unit>
        <trans-unit id="fedbd273e34471c334909a9855d4fede2b18756d" translate="yes" xml:space="preserve">
          <source>Last updated for perl 5.23.1.</source>
          <target state="translated">perl 5.23.1で最終更新。</target>
        </trans-unit>
        <trans-unit id="d25a330cf94331e783b24031686ddd1e4f1da4ff" translate="yes" xml:space="preserve">
          <source>Last updated: 07 October 2014</source>
          <target state="translated">最終更新日 2014年10月07日</target>
        </trans-unit>
        <trans-unit id="e1651fd9e16da0fb6683f8baa5303f215ef932af" translate="yes" xml:space="preserve">
          <source>Last updated: 2012-02-08</source>
          <target state="translated">最終更新日 2012-02-08</target>
        </trans-unit>
        <trans-unit id="f1b2c64ff3a41edcd2ecadfbbdf23ab6e9aa3f07" translate="yes" xml:space="preserve">
          <source>Last updated: 30 April 2019</source>
          <target state="translated">最終更新しました。2019年4月30日</target>
        </trans-unit>
        <trans-unit id="152779e4c8b9d8d930bb573d8f364d8d186f33dd" translate="yes" xml:space="preserve">
          <source>Lastly, the</source>
          <target state="translated">最後に</target>
        </trans-unit>
        <trans-unit id="4d407485e169287b1c2aa3f4a4b85bc45bed7a87" translate="yes" xml:space="preserve">
          <source>Lastly, there is a special method for working under &lt;b&gt;-T&lt;/b&gt; and setuid/gid scripts:</source>
          <target state="translated">最後に、&lt;b&gt;-T&lt;/b&gt;およびsetuid / gidスクリプトで作業するための特別な方法があります。</target>
        </trans-unit>
        <trans-unit id="202e6182477b0bfd7c1ee15e20cf42a59755cdd1" translate="yes" xml:space="preserve">
          <source>Laszlo Molnar,</source>
          <target state="translated">ラズロ・モルナール</target>
        </trans-unit>
        <trans-unit id="526c6b8794fab24bec118be16f23def6a69bab1c" translate="yes" xml:space="preserve">
          <source>Lately, ignoring or actively opposing compatibility with earlier versions of Perl has come into vogue. Sometimes, a change is proposed which wants to usurp syntax which previously had another meaning. Sometimes, a change wants to improve previously-crazy semantics.</source>
          <target state="translated">最近、以前のバージョンの Perl との互換性を無視したり、積極的に反対したりすることが流行しています。時には、以前は別の意味を持っていた構文を利用しようとする変更が提案されることもあります。時には、以前のクレイジーな意味論を改善しようとする変更が提案されることもあります。</target>
        </trans-unit>
        <trans-unit id="36e7725e6d39280db73b49ece64538b8d66586a2" translate="yes" xml:space="preserve">
          <source>Later in the life of the object the methods may be queries with get() method and set() method (which accept multiple arguments).</source>
          <target state="translated">オブジェクトの寿命の後半では、メソッドは get()メソッドと set()メソッド (複数の引数を受け付ける)を使用したクエリになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6e71bb4c4e3671df8bee4472c56c5267f4268f7f" translate="yes" xml:space="preserve">
          <source>Later invocations of coloralias() with the same ALIAS will override earlier aliases. There is no way to remove an alias.</source>
          <target state="translated">同じ ALIAS を持つ coloralias()の後からの呼び出しは、以前のエイリアスを上書きします。エイリアスを削除する方法はありません。</target>
        </trans-unit>
        <trans-unit id="c58245493d9e35fde84415d863d1963037986377" translate="yes" xml:space="preserve">
          <source>Later on, we'll pass this to Configure through -Dtargetenv</source>
          <target state="translated">後で、これを -Dtargetenv を通して Configure に渡します。</target>
        </trans-unit>
        <trans-unit id="f8e3805b10e4c4f4b08c327d5a5b182642f7a406" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; on CPAN: &lt;a href=&quot;http://search.cpan.org/search?module=threads&quot;&gt;http://search.cpan.org/search?module=threads&lt;/a&gt;</source>
          <target state="translated">CPAN上の&lt;a href=&quot;threads&quot;&gt;スレッドの&lt;/a&gt;最新バージョン：&lt;a href=&quot;http://search.cpan.org/search?module=threads&quot;&gt;http&lt;/a&gt; ://search.cpan.org/search ? module= threads</target>
        </trans-unit>
        <trans-unit id="ab352e5ac1e025a34124fd8091aaf11aba38a34e" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; on CPAN: &lt;a href=&quot;https://metacpan.org/pod/threads&quot;&gt;https://metacpan.org/pod/threads&lt;/a&gt;</source>
          <target state="translated">CPANの&lt;a href=&quot;threads&quot;&gt;スレッドの&lt;/a&gt;最新バージョン：&lt;a href=&quot;https://metacpan.org/pod/threads&quot;&gt;https&lt;/a&gt;：//metacpan.org/pod/threads</target>
        </trans-unit>
        <trans-unit id="55dfbb7924a9e791a0e250e51336f5378e1751eb" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads/shared&quot;&gt;threads::shared&lt;/a&gt; on CPAN: &lt;a href=&quot;http://search.cpan.org/search?module=threads%3A%3Ashared&quot;&gt;http://search.cpan.org/search?module=threads%3A%3Ashared&lt;/a&gt;</source>
          <target state="translated">CPANの&lt;a href=&quot;threads/shared&quot;&gt;threads :: sharedの&lt;/a&gt;最新バージョン：&lt;a href=&quot;http://search.cpan.org/search?module=threads%3A%3Ashared&quot;&gt;http&lt;/a&gt; ://search.cpan.org/search ? module= threads %3A%3Ashared</target>
        </trans-unit>
        <trans-unit id="9dd3a57a43ed9b942b39841e2da67e396eb27a54" translate="yes" xml:space="preserve">
          <source>Latest version of &lt;a href=&quot;threads::shared&quot;&gt;threads::shared&lt;/a&gt; on CPAN: &lt;a href=&quot;https://metacpan.org/pod/threads::shared&quot;&gt;https://metacpan.org/pod/threads::shared&lt;/a&gt;</source>
          <target state="translated">CPANで&lt;a href=&quot;threads::shared&quot;&gt;共有さ&lt;/a&gt;れているthreads :: sharedの最新バージョン：&lt;a href=&quot;https://metacpan.org/pod/threads::shared&quot;&gt;https&lt;/a&gt;：//metacpan.org/pod/threads :: shared</target>
        </trans-unit>
        <trans-unit id="57e8cec14c4a568ca92f36bd23fabb426a1d8b2d" translate="yes" xml:space="preserve">
          <source>Latin 1 (ISO 8859-1)</source>
          <target state="translated">ラテン語 1 (ISO 8859-1)</target>
        </trans-unit>
        <trans-unit id="c5f5bb3b350774d7cda57104c55fb6c82b7ae7d9" translate="yes" xml:space="preserve">
          <source>Latvia</source>
          <target state="translated">Latvia</target>
        </trans-unit>
        <trans-unit id="35bde1b1448a3634844f710f6f0c19bb97cc5c1e" translate="yes" xml:space="preserve">
          <source>Laundering and Detecting Tainted Data</source>
          <target state="translated">ロンダリングと汚染されたデータの検出</target>
        </trans-unit>
        <trans-unit id="467f628abddb4dcd106efd4dcaeb617681eb8f7d" translate="yes" xml:space="preserve">
          <source>Layer allows buffer snooping.</source>
          <target state="translated">レイヤはバッファのスヌーピングを可能にします。</target>
        </trans-unit>
        <trans-unit id="cb8d6c688037b3d7cd03ae365bbe000a64676df9" translate="yes" xml:space="preserve">
          <source>Layer can translate between &quot;\n&quot; and CRLF line ends.</source>
          <target state="translated">レイヤーは、&quot;\n &quot;とCRLFの行末の間を変換することができます。</target>
        </trans-unit>
        <trans-unit id="b12b05c07cab44e1c8dc0e859b671ac3d7cccd05" translate="yes" xml:space="preserve">
          <source>Layer is line buffered. Write data should be passed to next layer down whenever a &quot;\n&quot; is seen. Any data beyond the &quot;\n&quot; should then be processed.</source>
          <target state="translated">レイヤーはラインバッファリングされている。&quot;\n &quot;が出てきたら、書き込みデータは次のレイヤーに渡すべきだ。\n &quot;を超えたデータは、その時に処理する。</target>
        </trans-unit>
        <trans-unit id="63a50a8c52a6d0d048f4fa59a33a9d88e95e80ac" translate="yes" xml:space="preserve">
          <source>Layer is performing Win32-like &quot;\n&quot; mapped to CR,LF for output and CR,LF mapped to &quot;\n&quot; for input. Normally the provided &quot;crlf&quot; layer is the only layer that need bother about this. &lt;code&gt;PerlIO_binmode()&lt;/code&gt; will mess with this flag rather than add/remove layers if the &lt;code&gt;PERLIO_K_CANCRLF&lt;/code&gt; bit is set for the layers class.</source>
          <target state="translated">レイヤーは、出力ではCR、LFにマップされたWin32風の &quot;\ n&quot;を実行し、入力では &quot;\ n&quot;にマップされたCR、LFを実行しています。通常、提供される &quot;crlf&quot;レイヤーは、これについて問題を起こす必要がある唯一のレイヤーです。レイヤクラスに &lt;code&gt;PERLIO_K_CANCRLF&lt;/code&gt; ビットが設定されている場合、 &lt;code&gt;PerlIO_binmode()&lt;/code&gt; はレイヤを追加/削除するのではなく、このフラグを混乱させます。</target>
        </trans-unit>
        <trans-unit id="eb03ef93aa3ad216c22ac53a17958f564d0c42cd" translate="yes" xml:space="preserve">
          <source>Layer is unbuffered - i.e. write to next layer down should occur for each write to this layer.</source>
          <target state="translated">レイヤーはバッファリングされていない-つまり、このレイヤーへの書き込みのたびに次のレイヤーへの書き込みが発生しなければならない。</target>
        </trans-unit>
        <trans-unit id="9f3401294ca5c3ec99fdd44fd405f62db10c762f" translate="yes" xml:space="preserve">
          <source>Layer which calls &lt;code&gt;fread&lt;/code&gt; , &lt;code&gt;fwrite&lt;/code&gt; and &lt;code&gt;fseek&lt;/code&gt; /&lt;code&gt;ftell&lt;/code&gt; etc. Note that as this is &quot;real&quot; stdio it will ignore any layers beneath it and go straight to the operating system via the C library as usual.</source>
          <target state="translated">&lt;code&gt;fread&lt;/code&gt; 、 &lt;code&gt;fwrite&lt;/code&gt; 、 &lt;code&gt;fseek&lt;/code&gt; / &lt;code&gt;ftell&lt;/code&gt; などを呼び出すレイヤー。これは「実際の」stdioであるため、その下のレイヤーはすべて無視され、通常どおりCライブラリを介してオペレーティングシステムに直接移動します。</target>
        </trans-unit>
        <trans-unit id="433c9dfe2472dbf21d6a258158fca98f65d2907f" translate="yes" xml:space="preserve">
          <source>Layer which calls &lt;code&gt;fread&lt;/code&gt;, &lt;code&gt;fwrite&lt;/code&gt; and &lt;code&gt;fseek&lt;/code&gt;/&lt;code&gt;ftell&lt;/code&gt; etc. Note that as this is &quot;real&quot; stdio it will ignore any layers beneath it and go straight to the operating system via the C library as usual. This layer implements both low level IO and buffering, but is rarely used on modern architectures.</source>
          <target state="translated">&lt;code&gt;fread&lt;/code&gt; 、 &lt;code&gt;fwrite&lt;/code&gt; 、 &lt;code&gt;fseek&lt;/code&gt; / &lt;code&gt;ftell&lt;/code&gt; などを呼び出すレイヤー。これは「実際の」stdioであるため、その下のレイヤーはすべて無視され、通常どおりCライブラリを介してオペレーティングシステムに直接移動します。このレイヤーは、低レベルのIOとバッファリングの両方を実装しますが、最新のアーキテクチャではほとんど使用されません。</target>
        </trans-unit>
        <trans-unit id="f055f18aeadcf43179462eaf15e54d98e16c8b02" translate="yes" xml:space="preserve">
          <source>Layers</source>
          <target state="translated">Layers</target>
        </trans-unit>
        <trans-unit id="1657b47a449f7c4cf8948737db9fde6acf3a60e8" translate="yes" xml:space="preserve">
          <source>Layers are specified with a leading colon by convention. You can specify a stack of multiple layers as a space-separated string. See &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for more information on the available layers.</source>
          <target state="translated">慣例により、レイヤーは先頭にコロンを付けて指定されます。複数のレイヤーのスタックをスペースで区切られた文字列として指定できます。使用可能なレイヤーの詳細については、&lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ff9f300fa7d1bbc3f849481cc645ec702a3625b" translate="yes" xml:space="preserve">
          <source>Layers can be made available by extension modules. When an unknown layer is encountered the PerlIO code will perform the equivalent of :</source>
          <target state="translated">レイヤーは拡張モジュールによって利用可能にすることができます。未知のレイヤーが見つかった場合、PerlIO のコードは .NET Framework と同等の処理を行います。</target>
        </trans-unit>
        <trans-unit id="0e3178f7991d7264f18bf3f06ccf8bf03e08f4f6" translate="yes" xml:space="preserve">
          <source>Layers in action.</source>
          <target state="translated">行動中のレイヤー。</target>
        </trans-unit>
        <trans-unit id="90a85751546d30690f93cf14e09e26b8d8de391b" translate="yes" xml:space="preserve">
          <source>Layers it makes sense to include in the PERLIO environment variable are briefly summarized below. For more details see &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;.</source>
          <target state="translated">PERLIO環境変数に含めるのが理にかなっているレイヤーを以下に簡単にまとめます。詳細については、&lt;a href=&quot;perlio&quot;&gt;PerlIOを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="69114be10292080f3d4afeef56cf245603257cc6" translate="yes" xml:space="preserve">
          <source>Layers vs Disciplines</source>
          <target state="translated">レイヤー vs ディシプリン</target>
        </trans-unit>
        <trans-unit id="a41c1d3ed9255c2fe23288b7c102a2dc110d982d" translate="yes" xml:space="preserve">
          <source>Lazy people and beginners may now stop reading the manual.</source>
          <target state="translated">怠け者や初心者はこれでマニュアルを読むのをやめてしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="b9f359f1580c6817c9a64d72d3882cfe9dcbaef9" translate="yes" xml:space="preserve">
          <source>Le Sergent, T. and B. Berthomieu. &quot;Incremental MultiThreaded Garbage Collection on Virtually Shared Memory Architectures&quot; in Memory Management: Proc. of the International Workshop IWMM 92, St. Malo, France, September 1992, Yves Bekkers and Jacques Cohen, eds. Springer, 1992, ISBN 3540-55940-X (real-life thread applications).</source>
          <target state="translated">Le Sergent,T.と B.Berthomieu.&quot;事実上共有メモリアーキテクチャ上でのインクリメンタル・マルチスレッド・ガベージ・コレクション&quot; メモリ・マネジメント.国際ワークショップ IWMM 92 論文集,サンマロ,フランス,1992年9月,イブ・ベッカーズとジャック・コーエン編.Springer,1992,ISBN 3540-55940-X(実世界のスレッドアプリケーション)。</target>
        </trans-unit>
        <trans-unit id="bd162d2f93cdcba4f68be85d18fd26ee09a12efb" translate="yes" xml:space="preserve">
          <source>Leading and trailing colons can be used together if you need positional parameter values without the names. Note that in the case below, the &lt;code&gt;PERL_API&lt;/code&gt; params are returned in alphabetical order.</source>
          <target state="translated">名前のない位置パラメータ値が必要な場合は、先頭と末尾のコロンを一緒に使用できます。以下のケースでは、 &lt;code&gt;PERL_API&lt;/code&gt; パラメータがアルファベット順に返されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="21aea14ed2f508e6237030730dc68ea8c248a0f7" translate="yes" xml:space="preserve">
          <source>Leading and trailing whitespace is ignored.</source>
          <target state="translated">先頭と末尾の空白は無視されます。</target>
        </trans-unit>
        <trans-unit id="14de4e5c4a9c26aff3dbb9f05745a468eb0274d0" translate="yes" xml:space="preserve">
          <source>Leading and trailing zeros are ignored.</source>
          <target state="translated">先頭と末尾のゼロは無視されます。</target>
        </trans-unit>
        <trans-unit id="46907cff7c02a850b549a727a75b341cfa614b27" translate="yes" xml:space="preserve">
          <source>Leading white space is ignored without warning, as too are any trailing non-digits, such as a decimal point (&lt;a href=&quot;#oct-EXPR&quot;&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/a&gt; only handles non-negative integers, not negative integers or floating point).</source>
          <target state="translated">小数点などの末尾の非数字も同様に、先頭の空白は警告なしに無視されます（&lt;a href=&quot;#oct-EXPR&quot;&gt; &lt;code&gt;oct&lt;/code&gt; &lt;/a&gt;は非負の整数のみを処理し、負の整数や浮動小数点は処理しません）。</target>
        </trans-unit>
        <trans-unit id="a19eb901d0541a10b461432e6635be906ecd8d19" translate="yes" xml:space="preserve">
          <source>Leading white space is ignored without warning, as too are any trailing non-digits, such as a decimal point (&lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; only handles non-negative integers, not negative integers or floating point).</source>
          <target state="translated">先頭の空白は警告なしに無視され、小数点などの後続の非数字も無視されます（ &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; は負でない整数や浮動小数点ではなく、負でない整数のみを処理します）。</target>
        </trans-unit>
        <trans-unit id="fb2634197a046f8fbd1bb749b3d21bb890485f5f" translate="yes" xml:space="preserve">
          <source>Leading white space is ignored without warning, as too are any trailing non-digits, such as a decimal point (&lt;code&gt;&lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; only handles non-negative integers, not negative integers or floating point).</source>
          <target state="translated">先頭の空白は警告なしに無視され、小数点などの後続の非数字も無視されます（ &lt;code&gt;&lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; は負でない整数や浮動小数点ではなく、負でない整数のみを処理します）。</target>
        </trans-unit>
        <trans-unit id="ba3f4ebacb603a1ffae736f19b872df26ac931b0" translate="yes" xml:space="preserve">
          <source>Learn Perl and rewrite it. Seriously, there's no simple converter. Things that are awkward to do in the shell are easy to do in Perl, and this very awkwardness is what would make a shell-&amp;gt;perl converter nigh-on impossible to write. By rewriting it, you'll think about what you're really trying to do, and hopefully will escape the shell's pipeline datastream paradigm, which while convenient for some matters, causes many inefficiencies.</source>
          <target state="translated">Perlを学び、それを書き直してください。真剣に、単純なコンバーターはありません。シェルで行うのが厄介なことは、Perlで行うのが簡単です。この非常に扱いにくいことにより、shell-&amp;gt; perlコンバーターを書くのが難しくなります。それを書き直すことで、あなたが本当に何をしようとしているのかを考えるでしょう。うまくいけば、シェルのパイプラインデータストリームパラダイムから脱出できます。</target>
        </trans-unit>
        <trans-unit id="4dd0a48cec0f53000c96d709bef9efb450bae6d8" translate="yes" xml:space="preserve">
          <source>Leaving out the Notify option usually defaults an SMTP service to its default behavior equivalent to ['FAILURE'] notifications only, but again this may be dependent upon your site's SMTP configuration.</source>
          <target state="translated">Notifyオプションを省略すると、通常は['FAILURE']通知のみに相当するデフォルトの動作にSMTPサービスが設定されますが、これもサイトのSMTP設定に依存する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a4c7551b205677232e62bc969aaaea5621b25584" translate="yes" xml:space="preserve">
          <source>Lee Johnson &amp;lt;notfadeaway at btinternet dot com&amp;gt;</source>
          <target state="translated">リージョンソン&amp;lt;btinternet dot comのnotfadeaway&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b6a5edc3102ea975638e0ce2bb8f6982f95bead8" translate="yes" xml:space="preserve">
          <source>Left and right padding with any character, creating a new string:</source>
          <target state="translated">任意の文字で左右のパディングを行い、新しい文字列を作成します。</target>
        </trans-unit>
        <trans-unit id="7f1c7df67c81bb16bff18c751738160fab5ff982" translate="yes" xml:space="preserve">
          <source>Left and right padding with any character, modifying &lt;code&gt;$text&lt;/code&gt; directly:</source>
          <target state="translated">&lt;code&gt;$text&lt;/code&gt; 直接変更する、任意の文字による左右のパディング：</target>
        </trans-unit>
        <trans-unit id="af98dcfaae79ce4ac9aa9fbbe9635687fe2fe178" translate="yes" xml:space="preserve">
          <source>Left offset from pos() to start match at.</source>
          <target state="translated">pos()からの左オフセットでマッチを開始します。</target>
        </trans-unit>
        <trans-unit id="32ff2067f2a9f0deffe08043bfbad0999ed3babf" translate="yes" xml:space="preserve">
          <source>LeftString</source>
          <target state="translated">LeftString</target>
        </trans-unit>
        <trans-unit id="fb74bcaf76999b5ef8dae81b1022d842c093fe10" translate="yes" xml:space="preserve">
          <source>Legacy</source>
          <target state="translated">Legacy</target>
        </trans-unit>
        <trans-unit id="177a7c67030b56d701d66da14735a0847871d1fb" translate="yes" xml:space="preserve">
          <source>Legacy Character Sets</source>
          <target state="translated">レガシーキャラクターセット</target>
        </trans-unit>
        <trans-unit id="45890076a74f7ba49cb141341bf0a665659f9168" translate="yes" xml:space="preserve">
          <source>Legacy Encodings</source>
          <target state="translated">レガシーエンコーディング</target>
        </trans-unit>
        <trans-unit id="ca20c7f742784eaf8c9542c65094bd868679305e" translate="yes" xml:space="preserve">
          <source>Legacy multi byte EBCDIC code pages XXX.</source>
          <target state="translated">レガシーマルチバイト EBCDIC コードページ XXX。</target>
        </trans-unit>
        <trans-unit id="7d1f21ee00bf8431c5da8e1a72603db078d1e391" translate="yes" xml:space="preserve">
          <source>Legacy usage</source>
          <target state="translated">レガシーの使い方</target>
        </trans-unit>
        <trans-unit id="632363f7b0b4709b3208536a8ec83f44895c04cc" translate="yes" xml:space="preserve">
          <source>Legacy wrapper fro &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2 :: EventFacet :: Traceの&lt;/a&gt;レガシーラッパー。</target>
        </trans-unit>
        <trans-unit id="b14ba2ec2e45438ad3facc4d4b02bd06eedc0c59" translate="yes" xml:space="preserve">
          <source>Legacy, fixed-width encodings defined by the ISO 10646 standard. UCS-2 is a 16-bit encoding. Unlike UTF-16, UCS-2 is not extensible beyond &lt;code&gt;U+FFFF&lt;/code&gt; , because it does not use surrogates. UCS-4 is a 32-bit encoding, functionally identical to UTF-32 (the difference being that UCS-4 forbids neither surrogates nor code points larger than &lt;code&gt;0x10_FFFF&lt;/code&gt; ).</source>
          <target state="translated">ISO 10646標準で定義されているレガシーの固定幅エンコーディング。UCS-2は16ビットエンコーディングです。UTF-16とは異なり、UCS-2はサロゲートを使用しないため、 &lt;code&gt;U+FFFF&lt;/code&gt; を超えて拡張できません。UCS-4は32ビットエンコーディングで、機能的にはUTF-32と同じです（UCS-4がサロゲートも &lt;code&gt;0x10_FFFF&lt;/code&gt; より大きいコードポイントも禁止していない点が異なります）。</target>
        </trans-unit>
        <trans-unit id="3b6664ed1e448ada62088f03c80e41e23a96a928" translate="yes" xml:space="preserve">
          <source>Legacy, fixed-width encodings defined by the ISO 10646 standard. UCS-2 is a 16-bit encoding. Unlike UTF-16, UCS-2 is not extensible beyond &lt;code&gt;U+FFFF&lt;/code&gt;, because it does not use surrogates. UCS-4 is a 32-bit encoding, functionally identical to UTF-32 (the difference being that UCS-4 forbids neither surrogates nor code points larger than &lt;code&gt;0x10_FFFF&lt;/code&gt;).</source>
          <target state="translated">ISO10646標準で定義されているレガシーの固定幅エンコーディング。UCS-2は16ビットエンコーディングです。UTF-16とは異なり、UCS-2はサロゲートを使用しないため、 &lt;code&gt;U+FFFF&lt;/code&gt; を超えて拡張することはできません。UCS-4は32ビットエンコーディングであり、機能的にはUTF-32と同じです（違いは、UCS-4ではサロゲートも &lt;code&gt;0x10_FFFF&lt;/code&gt; より大きいコードポイントも禁止されていないことです）。</target>
        </trans-unit>
        <trans-unit id="38bd3b0c39f79b172b2c117ae638fd62dd4f1072" translate="yes" xml:space="preserve">
          <source>Legacy, this is currently a no-op that returns 0;</source>
          <target state="translated">レガシーでは、これは現在のところ0を返すno-opです。</target>
        </trans-unit>
        <trans-unit id="00a83ae1dc6e4e324ce120afa5a8e7b91193b805" translate="yes" xml:space="preserve">
          <source>Legal &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; constructs that match no characters</source>
          <target state="translated">文字に一致しない正当な &lt;code&gt;\p{}&lt;/code&gt; および &lt;code&gt;\P{}&lt;/code&gt; 構成</target>
        </trans-unit>
        <trans-unit id="b01926f0986a11c72cf140417a7b70c5868b0797" translate="yes" xml:space="preserve">
          <source>Legal \p{} and \P{} constructs that match no characters</source>
          <target state="translated">Legal \p{}and \p{}constructs that match no characters.</target>
        </trans-unit>
        <trans-unit id="8b37e0171cc1c8f695fff30ed31b832cbddee2f1" translate="yes" xml:space="preserve">
          <source>Legend of characters above</source>
          <target state="translated">上のキャラクターの伝説</target>
        </trans-unit>
        <trans-unit id="97f35de278fd2499acf694739f13d5aa76297107" translate="yes" xml:space="preserve">
          <source>Leif Eriksen &amp;lt;leif dot eriksen at bigpond dot com&amp;gt;</source>
          <target state="translated">レイフエリクセン&amp;lt;leif dot eriksen at bigpond dot com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6115881c5ecab4a82072aab1fbcafeaf5ae5a302" translate="yes" xml:space="preserve">
          <source>Length of the name.</source>
          <target state="translated">名前の長さ。</target>
        </trans-unit>
        <trans-unit id="1deb1eed10d40a0d45e6e2d30e54152b66733959" translate="yes" xml:space="preserve">
          <source>Length to truncate the argument list when the &lt;code&gt;frame&lt;/code&gt; option's bit 4 is set.</source>
          <target state="translated">&lt;code&gt;frame&lt;/code&gt; オプションのビット4が設定されているときに引数リストを切り捨てる長さ。</target>
        </trans-unit>
        <trans-unit id="1d1a91bdc1315d2ef3c37c514f4e0b41950b2992" translate="yes" xml:space="preserve">
          <source>Lengths and Widths</source>
          <target state="translated">長さと幅</target>
        </trans-unit>
        <trans-unit id="d32b0b56fe2109af2e400ced24b899e2e7e6bed2" translate="yes" xml:space="preserve">
          <source>Leon Timmermans &amp;lt;fawaka@gmail.com&amp;gt;</source>
          <target state="translated">Leon Timmermans &amp;lt;fawaka@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1f4d25e02c52538201b9cb795664e476bf2e16bc" translate="yes" xml:space="preserve">
          <source>Leon Timmermans &amp;lt;leont@cpan.org&amp;gt;</source>
          <target state="translated">Leon Timmermans &amp;lt;leont@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c763c85942db32f81cf9ff36bb94bec3c42bb459" translate="yes" xml:space="preserve">
          <source>Let Perldoc check Pod for errors</source>
          <target state="translated">PerldocにPodのエラーをチェックさせる</target>
        </trans-unit>
        <trans-unit id="236e4f11c45d6dc4aeeb3e3ee19570b2cee88f0e" translate="yes" xml:space="preserve">
          <source>Let Perldoc convert Pod to nroff</source>
          <target state="translated">PerldocでPodをnroffに変換してみましょう。</target>
        </trans-unit>
        <trans-unit id="974a4ac3dfc20423e93f62bd6d7257d2efff060e" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as ... Pod!</source>
          <target state="translated">PerldocでPodを...Pod!</target>
        </trans-unit>
        <trans-unit id="89789b71272a03c7a7d2242762bf736542d90944" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as RTF</source>
          <target state="translated">PerldocでPodをRTFでレンダリングしてみましょう。</target>
        </trans-unit>
        <trans-unit id="a09176a65c16f1ea87e512ddbd1ebf583706c4be" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as XML</source>
          <target state="translated">PerldocでPodをXMLでレンダリングしてみましょう。</target>
        </trans-unit>
        <trans-unit id="9dd1bef5afa3543070a44bc3e67a86b4a5626d33" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as man pages</source>
          <target state="translated">PerldocでPodをmanページとしてレンダリングしてみましょう。</target>
        </trans-unit>
        <trans-unit id="cb573ad7df52482623e8e613fdbfbc5f59abce18" translate="yes" xml:space="preserve">
          <source>Let Perldoc render Pod as plaintext</source>
          <target state="translated">PerldocでPodをプレーンテキストとしてレンダリングしてみましょう。</target>
        </trans-unit>
        <trans-unit id="d279d6ba36fcd7e038b9dea67ba4516a9df60977" translate="yes" xml:space="preserve">
          <source>Let Perldoc use Tk::Pod to render Pod</source>
          <target state="translated">PerldocではTk::Podを使ってPodをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="757e98b6ce9386f0fb646f3598168b1185dc8359" translate="yes" xml:space="preserve">
          <source>Let it be noted that the flakiness of indirect filehandles is not related to whether they're strings, typeglobs, objects, or anything else. It's the syntax of the fundamental operators. Playing the object game doesn't help you at all here.</source>
          <target state="translated">間接的なファイルハンドルのフラッキネスは、それらが文字列であるか、タイプグローブであるか、オブジェクトであるか、あるいは他の何かとは関係がないことに注意してください。それは基本的な演算子の構文です。ここではオブジェクトゲームをしても何の役にも立ちません。</target>
        </trans-unit>
        <trans-unit id="1fe958b2a6ee1393677c318cb2bd2d9b92f2cd48" translate="yes" xml:space="preserve">
          <source>Let it be stressed that</source>
          <target state="translated">と言ってもいい</target>
        </trans-unit>
        <trans-unit id="b48514691c5b46e8297541220211ccc8b070316c" translate="yes" xml:space="preserve">
          <source>Let the index expire after how many days?</source>
          <target state="translated">何日後にインデックスの有効期限が切れるようにしましょうか?</target>
        </trans-unit>
        <trans-unit id="c1338ab2b041d88118e285278d063d0f4210f6e9" translate="yes" xml:space="preserve">
          <source>Let us now discuss Unicode character classes, most usually called &quot;character properties&quot;. These are represented by the &lt;code&gt;\p{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; escape sequence. The negation of this is &lt;code&gt;\P{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt;. For example, to match lower and uppercase characters,</source>
          <target state="translated">ここで、Unicode文字クラス（通常は「文字プロパティ」と呼ばれる）について説明します。これらは、 &lt;code&gt;\p{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; エスケープシーケンスで表されます。これの否定は &lt;code&gt;\P{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; です。たとえば、小文字と大文字を一致させるには、</target>
        </trans-unit>
        <trans-unit id="6104cb2c1f6570ab357e214a9780db2e76a15675" translate="yes" xml:space="preserve">
          <source>Let us now discuss Unicode character classes, most usually called &quot;character properties&quot;. These are represented by the &lt;code&gt;\p{name}&lt;/code&gt; escape sequence. Closely associated is the &lt;code&gt;\P{name}&lt;/code&gt; property, which is the negation of the &lt;code&gt;\p{name}&lt;/code&gt; one. For example, to match lower and uppercase characters,</source>
          <target state="translated">ここで、最も一般的に「文字プロパティ」と呼ばれるUnicode文字クラスについて説明します。これらは &lt;code&gt;\p{name}&lt;/code&gt; エスケープシーケンスで表されます。密接に関連している &lt;code&gt;\P{name}&lt;/code&gt; の否定である性質、 &lt;code&gt;\p{name}&lt;/code&gt; 一つ。たとえば、小文字と大文字を照合するには、</target>
        </trans-unit>
        <trans-unit id="d5b865b005185fbf91c141118661a5d11906d96e" translate="yes" xml:space="preserve">
          <source>Let's also fix the MANIFEST file so that it accurately reflects the contents of our extension. The single line that says &quot;mylib&quot; should be replaced by the following three lines:</source>
          <target state="translated">MANIFESTファイルを修正して、拡張子の内容を正確に反映するようにしましょう。mylib&quot; と書かれた一行は、以下の三行に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="f577dbeceee6187e31fa08c5d2d55b7b25ccea26" translate="yes" xml:space="preserve">
          <source>Let's assume that we have a package &lt;code&gt;Cool::Foo&lt;/code&gt; , which includes &lt;code&gt;Cool::Foo&lt;/code&gt; and &lt;code&gt;Cool::Bar&lt;/code&gt; modules each having a separate XS file. First we use the following</source>
          <target state="translated">&lt;code&gt;Cool::Foo&lt;/code&gt; および &lt;code&gt;Cool::Bar&lt;/code&gt; モジュールを含み、それぞれが個別のXSファイルを持つパッケージ &lt;code&gt;Cool::Foo&lt;/code&gt; があると仮定します。まず、以下を使用します</target>
        </trans-unit>
        <trans-unit id="f9cbac3ad4b48c1f15258c105ba2e7521b56e827" translate="yes" xml:space="preserve">
          <source>Let's assume that we have a package &lt;code&gt;Cool::Foo&lt;/code&gt;, which includes &lt;code&gt;Cool::Foo&lt;/code&gt; and &lt;code&gt;Cool::Bar&lt;/code&gt; modules each having a separate XS file. First we use the following</source>
          <target state="translated">レッツは、我々は、パッケージがあると &lt;code&gt;Cool::Foo&lt;/code&gt; 、含ま &lt;code&gt;Cool::Foo&lt;/code&gt; して &lt;code&gt;Cool::Bar&lt;/code&gt; 、それぞれが別々のXSファイルを持つモジュール。まず、以下を使用します</target>
        </trans-unit>
        <trans-unit id="5b0ca95dec9c2d9636bc8d5032b2d5f394a81699" translate="yes" xml:space="preserve">
          <source>Let's begin by looking a simple scalar which is holding a string.</source>
          <target state="translated">まずは文字列を保持している単純なスカラを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="bf0b81e7623e4177f0bbf011b090062ef49e50b2" translate="yes" xml:space="preserve">
          <source>Let's consider how different regexps would match &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; :</source>
          <target state="translated">異なる正規表現が &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; とどのように一致するかを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="6aca9f9e3f0c9c3d03f0d9c58efc7677ff8a8ff8" translate="yes" xml:space="preserve">
          <source>Let's consider how different regexps would match &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;:</source>
          <target state="translated">さまざまな正規表現が &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; HelloWorld 」とどのように一致するかを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="df805a589a3384de86f5cf73ad97a197cc80b2b6" translate="yes" xml:space="preserve">
          <source>Let's consider what happens when the filtered code includes another module with use:</source>
          <target state="translated">フィルタリングされたコードに別のモジュールが使用されている場合にどうなるかを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="ae779227ca7a97ab41c0486c107dd88686a00384" translate="yes" xml:space="preserve">
          <source>Let's create a TCP server on &lt;code&gt;localhost:3333&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;localhost:3333&lt;/code&gt; にTCPサーバーを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="c5bb45ed6a20ca29516eecb8c27b4f1a78faa8d9" translate="yes" xml:space="preserve">
          <source>Let's edit the .xs file by adding this to the end of the file:</source>
          <target state="translated">.xsファイルの最後にこれを追加して編集してみましょう。</target>
        </trans-unit>
        <trans-unit id="f7e0018c031b17ac0ce35fd9db664c3f00e8a38b" translate="yes" xml:space="preserve">
          <source>Let's examine the cogs of this byte mill, one by one. There's the &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; call, creating the items we intend to stuff into the &lt;code&gt;$env&lt;/code&gt; buffer: to each key (in &lt;code&gt;$_&lt;/code&gt; ) it adds the &lt;code&gt;=&lt;/code&gt; separator and the hash entry value. Each triplet is packed with the template code sequence &lt;code&gt;A*A*Z*&lt;/code&gt; that is repeated according to the number of keys. (Yes, that's what the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; function returns in scalar context.) To get the very last null byte, we add a &lt;code&gt;0&lt;/code&gt; at the end of the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; list, to be packed with &lt;code&gt;C&lt;/code&gt; . (Attentive readers may have noticed that we could have omitted the 0.)</source>
          <target state="translated">このバイトミルの歯車を一つずつ見てみましょう。 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 呼び出しがあり、 &lt;code&gt;$env&lt;/code&gt; バッファーに詰め込むアイテムを作成します。各キー（ &lt;code&gt;$_&lt;/code&gt; ）に &lt;code&gt;=&lt;/code&gt; セパレーターとハッシュエントリ値を追加します。各トリプレットは、キーの数に応じて繰り返されるテンプレートコードシーケンス &lt;code&gt;A*A*Z*&lt;/code&gt; でパックされます。 （はい、これがスカラーコンテキストで &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 関数が返すものです。）最後のnullバイトを取得するには、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; リストの最後に &lt;code&gt;0&lt;/code&gt; を追加し、 &lt;code&gt;C&lt;/code&gt; でパックします。 （注意深い読者は、私たちが0を省略した可能性があることに気づいたかもしれません。）</target>
        </trans-unit>
        <trans-unit id="03dd34b9bc34d0893db5fe1238852061dbc9990c" translate="yes" xml:space="preserve">
          <source>Let's examine the cogs of this byte mill, one by one. There's the &lt;code&gt;map&lt;/code&gt; call, creating the items we intend to stuff into the &lt;code&gt;$env&lt;/code&gt; buffer: to each key (in &lt;code&gt;$_&lt;/code&gt;) it adds the &lt;code&gt;=&lt;/code&gt; separator and the hash entry value. Each triplet is packed with the template code sequence &lt;code&gt;A*A*Z*&lt;/code&gt; that is repeated according to the number of keys. (Yes, that's what the &lt;code&gt;keys&lt;/code&gt; function returns in scalar context.) To get the very last null byte, we add a &lt;code&gt;0&lt;/code&gt; at the end of the &lt;code&gt;pack&lt;/code&gt; list, to be packed with &lt;code&gt;C&lt;/code&gt;. (Attentive readers may have noticed that we could have omitted the 0.)</source>
          <target state="translated">このバイトミルの歯車を1つずつ調べてみましょう。 &lt;code&gt;map&lt;/code&gt; 呼び出しがあり、 &lt;code&gt;$env&lt;/code&gt; バッファーに詰め込む予定のアイテムを作成します。各キー（ &lt;code&gt;$_&lt;/code&gt; ）に &lt;code&gt;=&lt;/code&gt; セパレーターとハッシュエントリ値を追加します。各トリプレットには、キーの数に応じて繰り返されるテンプレートコードシーケンス &lt;code&gt;A*A*Z*&lt;/code&gt; がパックされています。（はい、それが &lt;code&gt;keys&lt;/code&gt; 関数がスカラーコンテキストで返すものです。）最後のヌルバイトを取得するには、 &lt;code&gt;pack&lt;/code&gt; リストの最後に &lt;code&gt;0&lt;/code&gt; を追加して、 &lt;code&gt;C&lt;/code&gt; でパックします。（注意深い読者は、0を省略できた可能性があることに気付いたかもしれません。）</target>
        </trans-unit>
        <trans-unit id="9e554ae494be1d13390f7359c0d05574c54b38a5" translate="yes" xml:space="preserve">
          <source>Let's examine the whole implementation, for practice:</source>
          <target state="translated">実践のために、全体の実装を検討してみましょう。</target>
        </trans-unit>
        <trans-unit id="cb0a55a99d6403d9b27402fcdfbf4d6ed2e005f9" translate="yes" xml:space="preserve">
          <source>Let's explore this feature a little more. We'll begin with the equivalent of</source>
          <target state="translated">この機能をもう少し掘り下げてみましょう。の等価なものから始めましょう。</target>
        </trans-unit>
        <trans-unit id="ebfb13b002928ab00b844746320f412762e65aa3" translate="yes" xml:space="preserve">
          <source>Let's give it a try:</source>
          <target state="translated">試しにやってみましょう。</target>
        </trans-unit>
        <trans-unit id="4e14ae2cc2c4249d7ae1307778537f0e17717e46" translate="yes" xml:space="preserve">
          <source>Let's have a look at how Perl sees &lt;code&gt;$a = $b + $c&lt;/code&gt; :</source>
          <target state="translated">Perlが &lt;code&gt;$a = $b + $c&lt;/code&gt; をどのように認識するかを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="6bcf594dd87bbdba596aaad50a05456d93f5c880" translate="yes" xml:space="preserve">
          <source>Let's have a look at how Perl sees &lt;code&gt;$a = $b + $c&lt;/code&gt;:</source>
          <target state="translated">Perlが &lt;code&gt;$a = $b + $c&lt;/code&gt; をどのように認識するかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="e928f3f516e4f40543bf011e7476bdaffeba6904" translate="yes" xml:space="preserve">
          <source>Let's look at another TCP client. This one connects to the TCP &quot;time&quot; service on a number of different machines and shows how far their clocks differ from the system on which it's being run:</source>
          <target state="translated">別の TCP クライアントを見てみましょう。このクライアントは、複数の異なるマシン上の TCP &quot;time&quot; サービスに接続し、それらの時計が実行されているシステムとどれくらい異なるかを示しています。</target>
        </trans-unit>
        <trans-unit id="0bfde5091a0fdc4b1dcc0dd94b94093ffcfd6f13" translate="yes" xml:space="preserve">
          <source>Let's look at each in turn, using as an example a tie class for scalars that allows the user to do something like:</source>
          <target state="translated">スカラー用のタイクラスを例にして、それぞれを順番に見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="8c38883dc5f76f55aab6aa025aff159c68fa3911" translate="yes" xml:space="preserve">
          <source>Let's look at each of these possible constructs in detail. There are separate sections on each of the following:</source>
          <target state="translated">これらの可能性のあるそれぞれの構成を詳細に見てみましょう。それぞれについては、以下に個別のセクションがあります。</target>
        </trans-unit>
        <trans-unit id="ad30ae9725c85002b6831ea9730f9076d479a5c8" translate="yes" xml:space="preserve">
          <source>Let's look at each of these principles in depth.</source>
          <target state="translated">それぞれの原則を深く見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="176db7a51355c5004c1f239aa8667a05811318e4" translate="yes" xml:space="preserve">
          <source>Let's look at the example above, but with minimal quantifiers:</source>
          <target state="translated">上の例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="44d6bf690bfe89fee660e282315649dfc02c909f" translate="yes" xml:space="preserve">
          <source>Let's make a quick object and x-plode it, first we'll start the debugger: it wants some form of input from STDIN, so we give it something non-committal, a zero:</source>
          <target state="translated">クイックオブジェクトを作って x-plode してみましょう。まずデバッガを起動します。</target>
        </trans-unit>
        <trans-unit id="8c36a08a96367b239dd26ec1d8f04af50262a733" translate="yes" xml:space="preserve">
          <source>Let's say you'd like your Perl program to process data stored in a nearby directory called &lt;code&gt;unsorted&lt;/code&gt;, which contains a number of textfiles. You'd also like your program to sort all the contents from these files into a single, alphabetically sorted list of unique lines before it starts processing them.</source>
          <target state="translated">あなたが呼ばれる近くのディレクトリに格納されたプロセスデータにあなたのPerlプログラムをたいとしましょう &lt;code&gt;unsorted&lt;/code&gt; テキストファイルの数が含まれています。また、プログラムで、これらのファイルのすべてのコンテンツを、処理を開始する前に、アルファベット順に並べ替えられた一意の行の単一のリストに並べ替えることもできます。</target>
        </trans-unit>
        <trans-unit id="2af4365a6067ebec1d91261e67cfd455affae6b4" translate="yes" xml:space="preserve">
          <source>Let's say your application is a server that will occasionally run Perl code from some arbitrary file. Your server has no way of knowing what code it's going to run. Very dangerous.</source>
          <target state="translated">あなたのアプリケーションがサーバで、任意のファイルから Perl のコードを実行することがあるとしましょう。あなたのサーバは、どのようなコードを実行するのかを知る方法がありません。これは非常に危険です。</target>
        </trans-unit>
        <trans-unit id="4d890463be6280c78f6b7f6a985632f09c2fa90e" translate="yes" xml:space="preserve">
          <source>Let's see a quick example of how all this is useful.</source>
          <target state="translated">では、これらがどれだけ役に立つのか、簡単な例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="e32a2ed9f3b04c47c03460e3d9853725a7d0f999" translate="yes" xml:space="preserve">
          <source>Let's see what &lt;code&gt;Benchmark&lt;/code&gt; makes of this:</source>
          <target state="translated">&lt;code&gt;Benchmark&lt;/code&gt; がこれで何をするか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="405776f1b44151a8af53d3cf919e2d8b537db4ed" translate="yes" xml:space="preserve">
          <source>Let's start in the middle, at line 4. This is a BINOP, a binary operator, which is at location &lt;code&gt;0x8179828&lt;/code&gt; . The specific operator in question is &lt;code&gt;sassign&lt;/code&gt; - scalar assignment - and you can find the code which implements it in the function &lt;code&gt;pp_sassign&lt;/code&gt; in</source>
          <target state="translated">真ん中の4行目から始めましょう。これは、位置0x8179828にある2項演算子である &lt;code&gt;0x8179828&lt;/code&gt; です。問題の特定の演算子は &lt;code&gt;sassign&lt;/code&gt; -スカラー割り当て-であり、関数 &lt;code&gt;pp_sassign&lt;/code&gt; でそれを実装するコードを見つけることができます</target>
        </trans-unit>
        <trans-unit id="c82eef57c73c123759da862922f036bf0665286b" translate="yes" xml:space="preserve">
          <source>Let's start in the middle, at line 4. This is a BINOP, a binary operator, which is at location &lt;code&gt;0x8179828&lt;/code&gt;. The specific operator in question is &lt;code&gt;sassign&lt;/code&gt; - scalar assignment - and you can find the code which implements it in the function &lt;code&gt;pp_sassign&lt;/code&gt; in</source>
          <target state="translated">真ん中の4行目から始めましょう。これは、位置0x8179828にある二項演算子である &lt;code&gt;0x8179828&lt;/code&gt; です。問題の特定の演算子は &lt;code&gt;sassign&lt;/code&gt; （スカラー割り当て）であり、それを実装するコードは次の関数 &lt;code&gt;pp_sassign&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="fc1d4b156d0cb946936473b6a08e0d57dc7fd23f" translate="yes" xml:space="preserve">
          <source>Let's start with the second line. It says that the uppercase of code point 97 is 65; or &lt;code&gt;&lt;a href=&quot;../functions/uc&quot;&gt;uc(&quot;a&quot;)&lt;/a&gt;&lt;/code&gt; == &quot;A&quot;. But the line is for the entire range of code points 97 through 122. To get the mapping for any code point in this range, you take the offset it has from the beginning code point of the range, and add that to the mapping for that first code point. So, the mapping for 122 (&quot;z&quot;) is derived by taking the offset of 122 from 97 (=25) and adding that to 65, yielding 90 (&quot;z&quot;). Likewise for everything in between.</source>
          <target state="translated">2行目から始めましょう。コードポイント97の大文字は65です。または &lt;code&gt;&lt;a href=&quot;../functions/uc&quot;&gt;uc(&quot;a&quot;)&lt;/a&gt;&lt;/code&gt; == &quot;A&quot;。しかし、ラインはコードポイント97から122の全範囲を対象としています。この範囲のコードポイントのマッピングを取得するには、範囲の開始コードポイントからのオフセットを取得し、そのマッピングに追加します。最初のコードポイント。したがって、122（ &quot;z&quot;）のマッピングは、122のオフセットを97（= 25）から取得し、それを65に追加することで導出され、90（ &quot;z&quot;）が得られます。同様に、その間のすべてについて。</target>
        </trans-unit>
        <trans-unit id="283878194b8e2d4159d246c8407adfc9545545e1" translate="yes" xml:space="preserve">
          <source>Let's start with the second line. It says that the uppercase of code point 97 is 65; or &lt;code&gt;uc(&quot;a&quot;)&lt;/code&gt; == &quot;A&quot;. But the line is for the entire range of code points 97 through 122. To get the mapping for any code point in this range, you take the offset it has from the beginning code point of the range, and add that to the mapping for that first code point. So, the mapping for 122 (&quot;z&quot;) is derived by taking the offset of 122 from 97 (=25) and adding that to 65, yielding 90 (&quot;z&quot;). Likewise for everything in between.</source>
          <target state="translated">2行目から始めましょう。コードポイント97の大文字は65であると書かれています。または &lt;code&gt;uc(&quot;a&quot;)&lt;/code&gt; == &quot;A&quot;。ただし、この行はコードポイント97から122の範囲全体を対象としています。この範囲内のコードポイントのマッピングを取得するには、範囲の最初のコードポイントからのオフセットを取得し、それをそのマッピングに追加します。最初のコードポイント。したがって、122（ &quot;z&quot;）のマッピングは、97（= 25）から122のオフセットを取得し、それを65に加算して、90（ &quot;z&quot;）を生成することによって導出されます。同様に、その間のすべてについて。</target>
        </trans-unit>
        <trans-unit id="0880854fa8770ea11a4efe4579463972aa5ae537" translate="yes" xml:space="preserve">
          <source>Let's suppose you have some weird Martian encoding where pairs of ASCII uppercase letters encode single Martian letters (i.e. the two bytes &quot;CV&quot; make a single Martian letter, as do the two bytes &quot;SG&quot;, &quot;VS&quot;, &quot;XX&quot;, etc.). Other bytes represent single characters, just like ASCII.</source>
          <target state="translated">例えば、ASCII の大文字のペアが単一の火星文字をエンコードするような奇妙な火星エンコーディングをしているとしましょう (つまり、2 バイトの &quot;CV&quot; は単一の火星文字を作り、2 バイトの &quot;SG&quot;、&quot;VS&quot;、&quot;XX&quot; なども同様です)。その他のバイトは、ASCII のように単一の文字を表します。</target>
        </trans-unit>
        <trans-unit id="8f09fe13c85ec276cd87ab04a04d40aac9612c6e" translate="yes" xml:space="preserve">
          <source>Let's suppose you've got to read in a data file like this:</source>
          <target state="translated">このようなデータファイルを読み込むことになったとしましょう。</target>
        </trans-unit>
        <trans-unit id="2f7c544be1b70356d2951611060b9932dadf6ea2" translate="yes" xml:space="preserve">
          <source>Let's take a look at a portion of the .c file created for our extension. The file name is Mytest.c:</source>
          <target state="translated">私たちの拡張子のために作成された.cファイルの一部を見てみましょう。ファイル名はMytest.cです。</target>
        </trans-unit>
        <trans-unit id="ce5f83676281dd1446f1a5a503aee374bc369bcc" translate="yes" xml:space="preserve">
          <source>Let's take a look at the same program using a different profiler: &lt;code&gt;Devel::Profiler&lt;/code&gt; , a drop-in Perl-only replacement for &lt;code&gt;Devel::DProf&lt;/code&gt; . The usage is very slightly different in that instead of using the special &lt;code&gt;-d:&lt;/code&gt; flag, you pull &lt;code&gt;Devel::Profiler&lt;/code&gt; in directly as a module using &lt;code&gt;-M&lt;/code&gt; .</source>
          <target state="translated">別のプロファイラーを使用して同じプログラムを見てみましょう： &lt;code&gt;Devel::Profiler&lt;/code&gt; は、 &lt;code&gt;Devel::DProf&lt;/code&gt; ドロップインPerlのみの置き換えです。特殊な &lt;code&gt;-d:&lt;/code&gt; フラグを使用する代わりに、 &lt;code&gt;-M&lt;/code&gt; を使用してモジュールとして &lt;code&gt;Devel::Profiler&lt;/code&gt; を直接プルするという点で、使用法はわずかに異なります。</target>
        </trans-unit>
        <trans-unit id="51d206f459af5ffe821cbc3901dfba71c7b8ef1d" translate="yes" xml:space="preserve">
          <source>Let's take a look at the same program using a different profiler: &lt;code&gt;Devel::Profiler&lt;/code&gt;, a drop-in Perl-only replacement for &lt;code&gt;Devel::DProf&lt;/code&gt;. The usage is very slightly different in that instead of using the special &lt;code&gt;-d:&lt;/code&gt; flag, you pull &lt;code&gt;Devel::Profiler&lt;/code&gt; in directly as a module using &lt;code&gt;-M&lt;/code&gt;.</source>
          <target state="translated">別のプロファイラーを使用して同じプログラムを見てみましょう： &lt;code&gt;Devel::Profiler&lt;/code&gt; 、 &lt;code&gt;Devel::DProf&lt;/code&gt; ドロップインPerlのみの代替品。使用法は、特別な &lt;code&gt;-d:&lt;/code&gt; フラグを使用する代わりに、 &lt;code&gt;-M&lt;/code&gt; を使用してモジュールとして &lt;code&gt;Devel::Profiler&lt;/code&gt; を直接プルするという点でわずかに異なります。</target>
        </trans-unit>
        <trans-unit id="230698ed5211b94950bbc39ebf4a2cd8603f3243" translate="yes" xml:space="preserve">
          <source>Let's take a simple patch from start to finish.</source>
          <target state="translated">最初から最後まで簡単なパッチを当ててみましょう。</target>
        </trans-unit>
        <trans-unit id="2b003d41c47da4c513944208b256541b446c8a71" translate="yes" xml:space="preserve">
          <source>Let's take an example of manipulating a PV, from &lt;code&gt;sv_catpvn&lt;/code&gt; , in</source>
          <target state="translated">さんから、PVを操作する例みよう &lt;code&gt;sv_catpvn&lt;/code&gt; をして、</target>
        </trans-unit>
        <trans-unit id="f81a1d5166b525293109d732fb53d9a2e8fb4f86" translate="yes" xml:space="preserve">
          <source>Let's take an example of manipulating a PV, from &lt;code&gt;sv_catpvn&lt;/code&gt;, in</source>
          <target state="translated">さんから、PVを操作する例みよう &lt;code&gt;sv_catpvn&lt;/code&gt; をして、</target>
        </trans-unit>
        <trans-unit id="7c3c67f07cd4da0245ca6a99400a337a71fe4ec4" translate="yes" xml:space="preserve">
          <source>Let's take an example. Suppose you're reading in data from a local format into a hash-of-hashes in Perl, turning that into a tree, walking the tree and then piping each node to an Acme Transmogrifier Server.</source>
          <target state="translated">例を挙げてみましょう。Perlでローカルフォーマットからハッシュ・オブ・ハッシュにデータを読み込み、それをツリーに変換し、ツリーを歩き、各ノードをAcme Transmogrifier Serverにパイピングしているとします。</target>
        </trans-unit>
        <trans-unit id="08e16151674f7f96adbcc23b02310179ef6623cd" translate="yes" xml:space="preserve">
          <source>Let's take the following test directory structure:</source>
          <target state="translated">以下のようなテストディレクトリ構造にしてみましょう。</target>
        </trans-unit>
        <trans-unit id="f39fd63d744cf93b2616319a85e2d2154efb3e45" translate="yes" xml:space="preserve">
          <source>Let's you write:</source>
          <target state="translated">書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="2f17a5ca119319a7ec877e7a949710676dc887eb" translate="yes" xml:space="preserve">
          <source>Level 1 - Basic Unicode Support</source>
          <target state="translated">レベル 1-基本的な Unicode サポート</target>
        </trans-unit>
        <trans-unit id="0de802e5c110593513199ad6be14e0d3e4934cee" translate="yes" xml:space="preserve">
          <source>Level 2 - Extended Unicode Support</source>
          <target state="translated">レベル 2-拡張 Unicode サポート</target>
        </trans-unit>
        <trans-unit id="bddac528f4922054293682b3a34528809353679b" translate="yes" xml:space="preserve">
          <source>Level 3 - Tailored Support</source>
          <target state="translated">レベル3-テーラーメイドサポート</target>
        </trans-unit>
        <trans-unit id="af642ef849c39f332561002d12526780f4e80e2e" translate="yes" xml:space="preserve">
          <source>Level of verbosity. By default, the debugger leaves your exceptions and warnings alone, because altering them can break correctly running programs. It will attempt to print a message when uncaught INT, BUS, or SEGV signals arrive. (But see the mention of signals in &lt;a href=&quot;#BUGS&quot;&gt;&quot;BUGS&quot;&lt;/a&gt; below.)</source>
          <target state="translated">冗長性のレベル。デフォルトでは、デバッガーは例外と警告をそのままにします。これらを変更すると、正しく実行されているプログラムが破損する可能性があるためです。捕捉されなかったINT、BUS、またはSEGV信号が到着すると、メッセージの印刷を試みます。（ただし、以下の&lt;a href=&quot;#BUGS&quot;&gt;「バグ」の&lt;/a&gt;シグナルの説明を参照してください。）</target>
        </trans-unit>
        <trans-unit id="27b7cf7750bfaac558f7db0f6b00074662dc6814" translate="yes" xml:space="preserve">
          <source>Level of verbosity. By default, the debugger leaves your exceptions and warnings alone, because altering them can break correctly running programs. It will attempt to print a message when uncaught INT, BUS, or SEGV signals arrive. (But see the mention of signals in &lt;a href=&quot;#BUGS&quot;&gt;BUGS&lt;/a&gt; below.)</source>
          <target state="translated">冗長性のレベル。デフォルトでは、デバッガーは例外と警告をそのままにします。これらを変更すると、正しく実行されているプログラムが壊れる可能性があるためです。キャッチされていないINT、BUS、またはSEGV信号が到着すると、メッセージを出力しようとします。（ただし、下記の&lt;a href=&quot;#BUGS&quot;&gt;バグ&lt;/a&gt;のシグナルの説明を参照してください。）</target>
        </trans-unit>
        <trans-unit id="ed47f098118b3a4908065115144a054c9afe75d6" translate="yes" xml:space="preserve">
          <source>Levels</source>
          <target state="translated">Levels</target>
        </trans-unit>
        <trans-unit id="dd4d01b82f363523e943497a1acd58ad122c1d74" translate="yes" xml:space="preserve">
          <source>Lewis, Bill, and Daniel J. Berg. Multithreaded Programming with Pthreads. Prentice Hall, 1997, ISBN 0-13-443698-9 (a well-written introduction to threads).</source>
          <target state="translated">ルイス、ビル、ダニエル・J・バーグ。Pthreadsによるマルチスレッドプログラミング。Prentice Hall,1997,ISBN 0-13-443698-9 (スレッドへの入門書としてよく書かれています)。</target>
        </trans-unit>
        <trans-unit id="0130807d4961ca028150a643b43fa9d3af268eec" translate="yes" xml:space="preserve">
          <source>Lexer interface</source>
          <target state="translated">レクサーインタフェース</target>
        </trans-unit>
        <trans-unit id="7c46e8b2c6a1b67615cc4a28b1803b6611e259c0" translate="yes" xml:space="preserve">
          <source>Lexical (my) variables declared in scopes external to a subroutine appear in code2ref output text as package variables. This is a tricky problem, as perl has no native facility for referring to a lexical variable defined within a different scope, although &lt;a href=&quot;http://search.cpan.org/perldoc/PadWalker&quot;&gt;PadWalker&lt;/a&gt; is a good start.</source>
          <target state="translated">サブルーチンの外部のスコープで宣言されたレキシカル（my）変数は、パッケージ変数としてcode2ref出力テキストに表示されます。perlには別のスコープ内で定義されたレキシカル変数を参照するためのネイティブの機能がないため、これはトリッキーな問題&lt;a href=&quot;http://search.cpan.org/perldoc/PadWalker&quot;&gt;です&lt;/a&gt;が、PadWalkerは良いスタートです。</target>
        </trans-unit>
        <trans-unit id="2a2592394276034b7da48f012e3e1835635e7937" translate="yes" xml:space="preserve">
          <source>Lexical (my) variables declared in scopes external to a subroutine appear in coderef2text output text as package variables. This is a tricky problem, as perl has no native facility for referring to a lexical variable defined within a different scope, although &lt;a href=&quot;padwalker&quot;&gt;PadWalker&lt;/a&gt; is a good start.</source>
          <target state="translated">サブルーチンの外部のスコープで宣言された字句（my）変数は、coderef2text出力テキストにパッケージ変数として表示されます。&lt;a href=&quot;padwalker&quot;&gt;PadWalker&lt;/a&gt;は良いスタートですが、perlには異なるスコープ内で定義された字句変数を参照するためのネイティブ機能がないため、これはトリッキーな問題です。</target>
        </trans-unit>
        <trans-unit id="21795cace48f4382f41c503a0895c632d1557532" translate="yes" xml:space="preserve">
          <source>Lexical Subroutines</source>
          <target state="translated">レキシカルサブルーチン</target>
        </trans-unit>
        <trans-unit id="91090443b78c24e5208fa0b7749049adce1d8581" translate="yes" xml:space="preserve">
          <source>Lexical effect</source>
          <target state="translated">語彙効果</target>
        </trans-unit>
        <trans-unit id="10e46358434f33f5da4b481844bfbc427a1eaf46" translate="yes" xml:space="preserve">
          <source>Lexical scopes of control structures are not bounded precisely by the braces that delimit their controlled blocks; control expressions are part of that scope, too. Thus in the loop</source>
          <target state="translated">制御構造体のレキシカルスコープは、その制御ブロックを区切る中括弧によって正確に拘束されるのではなく、制御式もそのスコープの一部です。したがって、ループ</target>
        </trans-unit>
        <trans-unit id="c32019b3ed41f9870148e7d8a8bcc91664cf5db8" translate="yes" xml:space="preserve">
          <source>Lexical subroutines are only available under the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'lexical_subs'&lt;/code&gt; pragma, which produces a warning unless the &quot;experimental::lexical_subs&quot; warnings category is disabled.</source>
          <target state="translated">字句サブルーチンは、「experimental :: lexical_subs」警告カテゴリが無効にされていない限り、警告を生成する &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'lexical_subs'&lt;/code&gt; プラグマでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="63259d01172ac59370a7ece5661c26923725e28e" translate="yes" xml:space="preserve">
          <source>Lexical variable introduced (declared with my()) for the first time.</source>
          <target state="translated">初めて導入された語彙変数(my()で宣言)。</target>
        </trans-unit>
        <trans-unit id="6bec4b7b4f94bd2a84719ee4041560ade2de4cd8" translate="yes" xml:space="preserve">
          <source>Lexical variables (declared with &quot;my&quot;) are not visible within a format unless the format is declared within the scope of the lexical variable.</source>
          <target state="translated">字句変数(&quot;my &quot;で宣言された)は、字句変数の範囲内でフォーマットが宣言されていない限り、フォーマット内では表示されません。</target>
        </trans-unit>
        <trans-unit id="56e8fa65a6460263a21b0d0b067830070ec69c2a" translate="yes" xml:space="preserve">
          <source>Lexical warnings get around these limitations by allowing finer control over where warnings can or can't be tripped.</source>
          <target state="translated">語彙的な警告は、警告が引っかかる場所や引っかからない場所をより細かく制御できるようにすることで、これらの制限を回避することができます。</target>
        </trans-unit>
        <trans-unit id="dfa37e8913139b1f0a81171648bb039460ba6c8c" translate="yes" xml:space="preserve">
          <source>Lexically control overloading</source>
          <target state="translated">語彙的にオーバーロードを制御する</target>
        </trans-unit>
        <trans-unit id="d71329c73390ebdefc7d3045a64e73de047c01c2" translate="yes" xml:space="preserve">
          <source>Lexing code (whether in the Perl core or not) moves this pointer past the characters that it consumes. It is also expected to perform some bookkeeping whenever a newline character is consumed. This movement can be more conveniently performed by the function &lt;a href=&quot;#lex_read_to&quot;&gt;&quot;lex_read_to&quot;&lt;/a&gt;, which handles newlines appropriately.</source>
          <target state="translated">字句解析コード（Perlコア内であるかどうかに関係なく）は、このポインターを消費する文字を超えて移動します。また、改行文字が消費されるたびに、何らかの簿記を実行することが期待されます。この移動は、改行を適切に処理する関数&lt;a href=&quot;#lex_read_to&quot;&gt;「lex_read_to」&lt;/a&gt;によってより便利に実行できます。</target>
        </trans-unit>
        <trans-unit id="d23a9b3c648b4ba0282c9679b9e53d7ed27aaf5d" translate="yes" xml:space="preserve">
          <source>Lexing code (whether in the Perl core or not) moves this pointer past the characters that it consumes. It is also expected to perform some bookkeeping whenever a newline character is consumed. This movement can be more conveniently performed by the function &lt;a href=&quot;#lex_read_to&quot;&gt;lex_read_to&lt;/a&gt;, which handles newlines appropriately.</source>
          <target state="translated">（Perlコアにあるかどうかに関係なく）字句解析コードは、このポインターを、使用する文字を超えて移動します。また、改行文字が消費されるたびに何らかの簿記を実行することも期待されています。この移動は、改行を適切に処理する関数&lt;a href=&quot;#lex_read_to&quot;&gt;lex_read_to&lt;/a&gt;によってより便利に実行できます。</target>
        </trans-unit>
        <trans-unit id="50c4503eb10cb7055e83f0b77d0c54ba198cb8a3" translate="yes" xml:space="preserve">
          <source>Lexing code attempted to stuff non-Latin-1 character into Latin-1 input</source>
          <target state="translated">レキシングコードがラテン語1文字以外の文字をラテン語1文字の入力に詰め込もうとする</target>
        </trans-unit>
        <trans-unit id="cec3fbd307e04ea0a0267363d68414b3f6becd30" translate="yes" xml:space="preserve">
          <source>Lexing code internal error (%s)</source>
          <target state="translated">接字コード内部エラー (%s)</target>
        </trans-unit>
        <trans-unit id="dbdf2fc886297cee27c73397601ff4f39103c78d" translate="yes" xml:space="preserve">
          <source>Libnet Frequently Asked Questions</source>
          <target state="translated">Libnetのよくある質問</target>
        </trans-unit>
        <trans-unit id="e99e9a5a6c267649059fa8147d50e8a56d55d8c3" translate="yes" xml:space="preserve">
          <source>Libraries using &lt;a href=&quot;#FUNCTIONS&quot;&gt;warnings::warn&lt;/a&gt; for custom warning categories generally don't expect &lt;a href=&quot;#FUNCTIONS&quot;&gt;warnings::warn&lt;/a&gt; to be fatal and can wind up in an unexpected state as a result. For XS modules issuing categorized warnings, such unanticipated exceptions could also expose memory leak bugs.</source>
          <target state="translated">カスタム警告カテゴリに&lt;a href=&quot;#FUNCTIONS&quot;&gt;warnings :: warn&lt;/a&gt;を使用するライブラリは、通常、&lt;a href=&quot;#FUNCTIONS&quot;&gt;warnings :: warn&lt;/a&gt;が致命的であることを予期せず、結果として予期しない状態になる可能性があります。分類された警告を発行するXSモジュールの場合、このような予期しない例外によってメモリリークのバグが発生する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="dbfd43d16e8972c230e7e22188720b2bf73e76c5" translate="yes" xml:space="preserve">
          <source>Library ... not found</source>
          <target state="translated">図書館...見つかりませんでした</target>
        </trans-unit>
        <trans-unit id="51ac812d4d63215ce6bab6ff80843a9768d50aa3" translate="yes" xml:space="preserve">
          <source>Library modules should not in general export built-in names like &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; as part of their default &lt;code&gt;@EXPORT&lt;/code&gt; list, because these may sneak into someone else's namespace and change the semantics unexpectedly. Instead, if the module adds that name to &lt;code&gt;@EXPORT_OK&lt;/code&gt; , then it's possible for a user to import the name explicitly, but not implicitly. That is, they could say</source>
          <target state="translated">ライブラリモジュールは一般に、デフォルトの &lt;code&gt;@EXPORT&lt;/code&gt; リストの一部として &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; などの組み込み名をエクスポートしないでください。これらは他の誰かの名前空間に忍び込み、セマンティクスを予期せず変更する可能性があるためです。代わりに、モジュールがその名前を &lt;code&gt;@EXPORT_OK&lt;/code&gt; に追加した場合、ユーザーは名前を明示的にインポートできますが、暗黙的にはインポートできません。つまり、彼らは言うことができる</target>
        </trans-unit>
        <trans-unit id="ad8c903818c8a82f08facfa60cb87854b48f3251" translate="yes" xml:space="preserve">
          <source>Library modules should not in general export built-in names like &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;chdir&lt;/code&gt; as part of their default &lt;code&gt;@EXPORT&lt;/code&gt; list, because these may sneak into someone else's namespace and change the semantics unexpectedly. Instead, if the module adds that name to &lt;code&gt;@EXPORT_OK&lt;/code&gt;, then it's possible for a user to import the name explicitly, but not implicitly. That is, they could say</source>
          <target state="translated">ライブラリモジュールは、一般に、 &lt;code&gt;open&lt;/code&gt; や &lt;code&gt;chdir&lt;/code&gt; などの組み込み名をデフォルトの &lt;code&gt;@EXPORT&lt;/code&gt; リストの一部としてエクスポートしないでください。これらは、他の誰かの名前空間に忍び込み、予期せずセマンティクスを変更する可能性があるためです。代わりに、モジュールがその名前を &lt;code&gt;@EXPORT_OK&lt;/code&gt; に追加すると、ユーザーは名前を明示的にインポートできますが、暗黙的にインポートすることはできません。つまり、彼らは言うことができます</target>
        </trans-unit>
        <trans-unit id="189f5ddd187269a52ad75ba078f7fedb0f60d5fe" translate="yes" xml:space="preserve">
          <source>License String</source>
          <target state="translated">ライセンス文字列</target>
        </trans-unit>
        <trans-unit id="a8774f0e51de54365d13b10f234f9f0ab4b4c7b6" translate="yes" xml:space="preserve">
          <source>License is also granted to make and use derivative works provided that such works are identified as &quot;derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm&quot; in all material mentioning or referencing the derived work.</source>
          <target state="translated">また、派生作品について言及または参照するすべての資料において「RSA Data Security,Inc.MD5 メッセージダイジェスト アルゴリズムから派生したもの」と明記されていることを条件に、派生作品を作成したり使用したりすることが許可されます。</target>
        </trans-unit>
        <trans-unit id="8fb9dc902cb98efd9bae2b4a142dce7fcd9e3bb0" translate="yes" xml:space="preserve">
          <source>License to copy and use this software is granted provided that it is identified as the &quot;RSA Data Security, Inc. MD5 Message-Digest Algorithm&quot; in all material mentioning or referencing this software or this function.</source>
          <target state="translated">このソフトウェアについて言及している、またはこの機能を参照しているすべての資料において、「RSA Data Security,Inc.このソフトウェアまたはこの機能について言及または参照するすべての資料において、「MD5 メッセージダイジェスト アルゴリズム」として識別されていることを条件に、このソフトウェアをコピーして使用することが許可されます。</target>
        </trans-unit>
        <trans-unit id="5924fd52bf49a8494e3d053dc865b25bbec5c6e6" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License version 1 or later, or the Artistic License.</source>
          <target state="translated">GNU General Public License version 1以降、またはArtistic Licenseの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="aa636d64869928622347b0ebd93665113e78146c" translate="yes" xml:space="preserve">
          <source>Licensing</source>
          <target state="translated">Licensing</target>
        </trans-unit>
        <trans-unit id="d5b616805cf9bfc9158dfb054c59875ea327a760" translate="yes" xml:space="preserve">
          <source>Life is not quite so transparent, however, when working with legacy encodings, I/O, and certain special cases:</source>
          <target state="translated">しかし、レガシーエンコーダ、I/O、および特定の特殊なケースで作業する場合、生活は非常に透明ではありません。</target>
        </trans-unit>
        <trans-unit id="ab3a00d7b8ef92b4d6db8938fdc867c976af1617" translate="yes" xml:space="preserve">
          <source>Lifetime of the parent process and pseudo-processes</source>
          <target state="translated">親プロセスと疑似プロセスの寿命</target>
        </trans-unit>
        <trans-unit id="cb79da38fbc832bc4294ccc8e4bcfcc8a2555134" translate="yes" xml:space="preserve">
          <source>Lightweight and lvalue version of &lt;code&gt;PAD_SV&lt;/code&gt; . Get or set the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad. Unlike &lt;code&gt;PAD_SV&lt;/code&gt; , does not print diagnostics with -DX. For internal use only.</source>
          <target state="translated">&lt;code&gt;PAD_SV&lt;/code&gt; の軽量lvalueバージョン。現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; の値を取得または設定します。 &lt;code&gt;PAD_SV&lt;/code&gt; とは異なり、-DXで診断を出力しません。内部使用のみ。</target>
        </trans-unit>
        <trans-unit id="3fd57349d3d10bcc5e3acd29d060e929880bc515" translate="yes" xml:space="preserve">
          <source>Lightweight and lvalue version of &lt;code&gt;PAD_SV&lt;/code&gt;. Get or set the value at offset &lt;code&gt;po&lt;/code&gt; in the current pad. Unlike &lt;code&gt;PAD_SV&lt;/code&gt;, does not print diagnostics with -DX. For internal use only.</source>
          <target state="translated">&lt;code&gt;PAD_SV&lt;/code&gt; の軽量で左辺値のバージョン。現在のパッドのオフセット &lt;code&gt;po&lt;/code&gt; で値を取得または設定します。 &lt;code&gt;PAD_SV&lt;/code&gt; とは異なり、-DXを使用して診断を出力しません。内部使用のみ。</target>
        </trans-unit>
        <trans-unit id="c7e02c95fe85052fcadf9745a5f1d0358088d936" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="translated">Like</target>
        </trans-unit>
        <trans-unit id="c9df7c5b0e2428587b12f5f968c72b403b65e631" translate="yes" xml:space="preserve">
          <source>Like &quot;@*&quot;, this is a variable-width field. The value supplied must be a scalar variable. Perl puts the first line (up to the first &quot;\n&quot;) of the text into the field, and then chops off the front of the string so that the next time the variable is referenced, more of the text can be printed. The variable will</source>
          <target state="translated">&quot;@*&quot; のように、これは可変幅のフィールドです。与えられる値はスカラ変数でなければなりません。Perl は、テキストの最初の行 (最初の &quot;\n&quot; まで)をフィールドに入れ、次に変数が参照されたときに、より多くのテキストを印刷できるように、文字列の前の部分を切り取ります。変数は</target>
        </trans-unit>
        <trans-unit id="9e4b27dce39ce4f15c0298254855f383991ad517" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#-T&quot;&gt;&quot;-T&quot;&lt;/a&gt;, but taint checks will issue warnings rather than fatal errors. These warnings can now be controlled normally with &lt;code&gt;no warnings qw(taint)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#-T&quot;&gt;「-T」&lt;/a&gt;と同様ですが、汚染チェックは致命的なエラーではなく警告を発行します。これらの警告は &lt;code&gt;no warnings qw(taint)&lt;/code&gt; 正常に制御できるようになりましたqw（taint）。</target>
        </trans-unit>
        <trans-unit id="e6efdf3c36a1c3613481963e9128916b7b900006" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#__FILE__&quot;&gt;&lt;code&gt;__FILE__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#__LINE__&quot;&gt;&lt;code&gt;__LINE__&lt;/code&gt;&lt;/a&gt;, the filename and line number returned here may be altered by the mechanism described at &lt;a href=&quot;perlsyn#Plain-Old-Comments-%28Not%21%29&quot;&gt;&quot;Plain Old Comments (Not!)&quot; in perlsyn&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#__FILE__&quot;&gt; &lt;code&gt;__FILE__&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#__LINE__&quot;&gt; &lt;code&gt;__LINE__&lt;/code&gt; &lt;/a&gt;と同様に、ここで返されるファイル名と行番号は&lt;a href=&quot;perlsyn#Plain-Old-Comments-%28Not%21%29&quot;&gt;、perlsynの「PlainOld Comments（Not！）」で&lt;/a&gt;説明されているメカニズムによって変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="1f94085fda091b1e0d2fbb00f475b7933a977348" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#charinfo%28%29&quot;&gt;&quot;charinfo()&quot;&lt;/a&gt;, the result may be an intermediate decomposition whose components are also decomposable. Use &lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="translated">ように&lt;a href=&quot;#charinfo%28%29&quot;&gt;「charinfo（）」&lt;/a&gt;、結果は、その成分も分解性である中間分解であってもよいです。&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode :: Normalize&lt;/a&gt;を使用して、1つのステップで最終的な分解を取得します。</target>
        </trans-unit>
        <trans-unit id="c138d511965d3d204a9ae2bc98753a226047b504" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt;, the result may be an intermediate decomposition whose components are also decomposable. Use &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; to get the final decomposition in one step.</source>
          <target state="translated">&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）&lt;/a&gt;と同様に、結果も中間分解であり、そのコンポーネントも分解可能です。&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalize&lt;/a&gt;を使用して、1つのステップで最終的な分解を取得します。</target>
        </trans-unit>
        <trans-unit id="266742b9f67b4fe1a275417eb72b7a676513b96c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;&quot;cop_hints_fetch_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">同様に&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;「cop_hints_fetch_pvn」&lt;/a&gt;が、代わりに文字列/長さのペアをPerlのスカラーになります。</target>
        </trans-unit>
        <trans-unit id="94306a359339162936c27f41ca5369637110def5" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;&quot;cop_hints_fetch_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;「cop_hints_fetch_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなくリテラル文字列を使用し、事前に計算されたハッシュは使用しません。</target>
        </trans-unit>
        <trans-unit id="d5d50417de331ddcfae6353b7aa1bfeeddd25071" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;&quot;cop_hints_fetch_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;「cop_hints_fetch_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="3de5fd7897751225569f609d59202b32bba6024a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにPerlスカラーを使用します。</target>
        </trans-unit>
        <trans-unit id="9e492b6f65de514837e38acf884d2920be6c9c8e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;と似ていますが、文字列/長さのペアの代わりにリテラル文字列を受け取り、事前計算されたハッシュはありません。</target>
        </trans-unit>
        <trans-unit id="2de1e66c1756b6fab3c6fdb05cde4f4f25568233" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cop_hints_fetch_pvn&quot;&gt;cop_hints_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="4a253dd8613cfeb35cd85cfbea8043b7c360540b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;&quot;cophh_delete_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">同様に&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;「cophh_delete_pvn」&lt;/a&gt;が、代わりに文字列/長さのペアをPerlのスカラーになります。</target>
        </trans-unit>
        <trans-unit id="a7af63bad15b32edbd28ac2c10d2108aae562c31" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;&quot;cophh_delete_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;「cophh_delete_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなくリテラル文字列を使用し、事前に計算されたハッシュは使用しません。</target>
        </trans-unit>
        <trans-unit id="9b5b198e7e3473ff35bff47623cd4e88330d3954" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;&quot;cophh_delete_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;「cophh_delete_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="de93912de0e72db38bde2b8e898d77fc9dc7395b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、Perlスカラーを使用します。</target>
        </trans-unit>
        <trans-unit id="5f93afb3b500f705910109bc574d7e2b47ae58fd" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにリテラル文字列を受け取り、事前計算されたハッシュはありません。</target>
        </trans-unit>
        <trans-unit id="7bc8a6b9daffa5d612ad332627c80e1cbcfc7c28" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_delete_pvn&quot;&gt;cophh_delete_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="9cc1810855d64e33ce9ec26c456a64df0b593a05" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;&quot;cophh_fetch_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">同様に&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;「cophh_fetch_pvn」&lt;/a&gt;が、代わりに文字列/長さのペアをPerlのスカラーになります。</target>
        </trans-unit>
        <trans-unit id="2c5cc8f19c22d392b66740ab20d62583c9f0b5cc" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;&quot;cophh_fetch_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;「cophh_fetch_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなくリテラル文字列を使用し、事前に計算されたハッシュは使用しません。</target>
        </trans-unit>
        <trans-unit id="3304e82e703cb693b770c7a91db4e251a771c7ab" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;&quot;cophh_fetch_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;「cophh_fetch_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="eaf7282f7430d0c1f55fb04bc9095993eb65be76" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">同様&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;、代わりに文字列/長さのペアをPerlのスカラーになります。</target>
        </trans-unit>
        <trans-unit id="b5ef552d2079e488edcf076c50da8cfc2edf287e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにリテラル文字列を受け取り、事前計算されたハッシュはありません。</target>
        </trans-unit>
        <trans-unit id="1d820027a36b428c792671f4c8e4ee5300a7823f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_fetch_pvn&quot;&gt;cophh_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="d743c06e3451a81c72518baf7f72a34f8bfafe8d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;&quot;cophh_store_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">同様に&lt;a href=&quot;#cophh_store_pvn&quot;&gt;「cophh_store_pvn」&lt;/a&gt;が、代わりに文字列/長さのペアをPerlのスカラーになります。</target>
        </trans-unit>
        <trans-unit id="2b3d816bbaf79a909295b456cf4eb6930c147304" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;&quot;cophh_store_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cophh_store_pvn&quot;&gt;「cophh_store_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなくリテラル文字列を使用し、事前に計算されたハッシュは使用しません。</target>
        </trans-unit>
        <trans-unit id="4b0b3ccbd7b43691247d71e63bb360cc3249f86a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;&quot;cophh_store_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_store_pvn&quot;&gt;「cophh_store_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="73c1cef4e16a8379b39bb25b20396ecc27808f0b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">同様&lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;、代わりに文字列/長さのペアをPerlのスカラーになります。</target>
        </trans-unit>
        <trans-unit id="f8b72f1ae998c27a3bc7952f2e79a7833ed58822" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにリテラル文字列を受け取り、事前計算されたハッシュはありません。</target>
        </trans-unit>
        <trans-unit id="3d6eb33ec672f221ab14ac8aaae5ee9923295a95" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#cophh_store_pvn&quot;&gt;cophh_store_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="58ca9ffe0ac8e2dd6af7ebd2c0acbcec2c0d7145" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#exec-LIST&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#system-LIST&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt; allows you to lie to a program about its name if you use the &lt;code&gt;system PROGRAM LIST&lt;/code&gt; syntax. Again, see &lt;a href=&quot;#exec-LIST&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#exec-LIST&quot;&gt; &lt;code&gt;exec&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#system-LIST&quot;&gt; &lt;code&gt;system&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;system PROGRAM LIST&lt;/code&gt; 構文を使用する場合、その名前についてプログラムに嘘をつくことができます。繰り返しますが、&lt;a href=&quot;#exec-LIST&quot;&gt; &lt;code&gt;exec&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ada44e107259fa024a8f358c79e51c738af229c1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;&quot;gv_fetchmeth_pvn&quot;&lt;/a&gt;, but lacks a flags parameter.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;「gv_fetchmeth_pvn」&lt;/a&gt;に似ていますが、flagsパラメーターがありません。</target>
        </trans-unit>
        <trans-unit id="54abf6089eca44394b7d1690bb3d38c0b82d3b35" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;, but lacks a flags parameter.</source>
          <target state="translated">&lt;a href=&quot;#gv_fetchmeth_pvn&quot;&gt;gv_fetchmeth_pvn&lt;/a&gt;と似ていますが、フラグパラメータがありません。</target>
        </trans-unit>
        <trans-unit id="9d0651cf67afe661baee2be32bf57a134f79be82" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; .</source>
          <target state="translated">様&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;または（「utf8ness失敗」の場合）故障の位置を記憶するが、位置 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; で（「utf8ness成功」の場合） &lt;code&gt;ep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4826c3546aa34ea2d0524b77459a729065bbf15b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;() but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; , and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;#is_utf8_string&quot;&gt;is_utf8_string&lt;/a&gt;（）に似ていますが、失敗の場所（「utf8ness失敗」の場合）または &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8ness成功」の場合）の位置を &lt;code&gt;ep&lt;/code&gt; に格納し、UTF-8エンコードされた文字の数を格納しますで &lt;code&gt;el&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc4004ca168e21bab8a364acb13202ffa9c080d1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;&quot;lex_stuff_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様に&lt;a href=&quot;#lex_stuff_pvn&quot;&gt;「lex_stuff_pvn」&lt;/a&gt;が、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="3df9351141888ffdcb4847144fedfdb9527ae3f1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様&lt;a href=&quot;#lex_stuff_pvn&quot;&gt;lex_stuff_pvn&lt;/a&gt;、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="84cb2c197de2f7ed274dcc28b904a10591e12927" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#memEQ&quot;&gt;&quot;memEQ&quot;&lt;/a&gt;, but the second string is a literal enclosed in double quotes, &lt;code&gt;l1&lt;/code&gt; gives the number of bytes in &lt;code&gt;s1&lt;/code&gt;. Returns zero if equal, or non-zero if non-equal.</source>
          <target state="translated">&lt;a href=&quot;#memEQ&quot;&gt;「memEQ」&lt;/a&gt;と同様ですが、2番目の文字列は二重引用符で囲まれたリテラルであり、 &lt;code&gt;l1&lt;/code&gt; は &lt;code&gt;s1&lt;/code&gt; のバイト数を示します。等しい場合はゼロを返し、等しくない場合はゼロ以外を返します。</target>
        </trans-unit>
        <trans-unit id="3235e7d6c4a5e5829587587808c18e328cb540d6" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#memNE&quot;&gt;&quot;memNE&quot;&lt;/a&gt;, but the second string is a literal enclosed in double quotes, &lt;code&gt;l1&lt;/code&gt; gives the number of bytes in &lt;code&gt;s1&lt;/code&gt;. Returns zero if non-equal, or zero if non-equal.</source>
          <target state="translated">&lt;a href=&quot;#memNE&quot;&gt;「memNE」&lt;/a&gt;と同様ですが、2番目の文字列は二重引用符で囲まれたリテラルであり、 &lt;code&gt;l1&lt;/code&gt; は &lt;code&gt;s1&lt;/code&gt; のバイト数を示します。等しくない場合はゼロを返し、等しくない場合はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="8418e841d048f747af15fb53b44957357d83e046" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nextafter&quot;&gt;&quot;nextafter&quot;&lt;/a&gt;, but potentially more accurate.</source>
          <target state="translated">&lt;a href=&quot;#nextafter&quot;&gt;「nextafter」&lt;/a&gt;と同様ですが、より正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="855a9fc9268cf7c56dbfa870587e398be59edc5f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nextafter&quot;&gt;nextafter&lt;/a&gt;, but potentially more accurate.</source>
          <target state="translated">&lt;a href=&quot;#nextafter&quot;&gt;nextafter&lt;/a&gt;と同様ですが、より正確になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="0b2228c60a5736c212cccec834eca9e330073dae" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nexttoward&quot;&gt;&quot;nexttoward&quot;&lt;/a&gt;, but potentially less accurate.</source>
          <target state="translated">&lt;a href=&quot;#nexttoward&quot;&gt;「nexttoward」&lt;/a&gt;と同様ですが、精度が低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c3abb505c749731ad1d3986f391df84d9a744972" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#nexttoward&quot;&gt;nexttoward&lt;/a&gt;, but potentially less accurate.</source>
          <target state="translated">&lt;a href=&quot;#nexttoward&quot;&gt;nexttoward&lt;/a&gt;と同様ですが、精度が低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="014996f423e4b3ba0964db2cda0c7b80baa25ee8" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;&quot;refcounted_he_fetch_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;「refcounted_he_fetch_pvn」&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにPerlスカラーを使用します。</target>
        </trans-unit>
        <trans-unit id="e6d8988dd3bbcc7667d93d474b90133547c697bf" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;&quot;refcounted_he_fetch_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;「refcounted_he_fetch_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなくリテラル文字列を使用し、事前に計算されたハッシュは使用しません。</target>
        </trans-unit>
        <trans-unit id="e9b66ec47b251b957cd7b2fb7f4d9c455c7a47ef" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;&quot;refcounted_he_fetch_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;「refcounted_he_fetch_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="724b06f3c6974466e0dcb566dbe47f6fad84aa5a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、Perlスカラーを取ります。</target>
        </trans-unit>
        <trans-unit id="23a489d2aec93a2d851cb278177881615d6f059f" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにリテラル文字列を受け取り、事前計算されたハッシュはありません。</target>
        </trans-unit>
        <trans-unit id="401a90792585ceca6e1448d38f3a439e9e9ccb83" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_fetch_pvn&quot;&gt;refcounted_he_fetch_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="d7b205ac37d25afe008f83aeca2addd7bbdc67d3" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;&quot;refcounted_he_new_pvn&quot;&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;「refcounted_he_new_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアの代わりにPerlスカラーを使用します。</target>
        </trans-unit>
        <trans-unit id="fbf2aa2fcc789bbf185be046592fbdbb502d45ba" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;&quot;refcounted_he_new_pvn&quot;&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;「refcounted_he_new_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなくリテラル文字列を使用し、事前に計算されたハッシュは使用しません。</target>
        </trans-unit>
        <trans-unit id="5349abc807ca4a5e1b628b9c96aba7c6b34dcba3" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;&quot;refcounted_he_new_pvn&quot;&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;「refcounted_he_new_pvn」&lt;/a&gt;と同様ですが、文字列と長さのペアではなく、ヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="046451b0d57dcef450722c52bfda2597acd52bb7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;, but takes a Perl scalar instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、Perlスカラーを使用します。</target>
        </trans-unit>
        <trans-unit id="6a998ebee49893ba076a8800f452b0183aae9a49" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;, but takes a literal string instead of a string/length pair, and no precomputed hash.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアの代わりにリテラル文字列を受け取り、事前計算されたハッシュはありません。</target>
        </trans-unit>
        <trans-unit id="65d696e7d641f983cc3e14984e6670f40737f36e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;, but takes a nul-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;a href=&quot;#refcounted_he_new_pvn&quot;&gt;refcounted_he_new_pvn&lt;/a&gt;と似ていますが、文字列と長さのペアではなく、nulで終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="8ee6b83a5c63efaa127609c27748de883a7f6ea1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#remainder&quot;&gt;&quot;remainder&quot;&lt;/a&gt; but also returns the low-order bits of the quotient (n) [C99]</source>
          <target state="translated">&lt;a href=&quot;#remainder&quot;&gt;「剰余」&lt;/a&gt;と同様ですが、商（n）の下位ビットも返します[C99]</target>
        </trans-unit>
        <trans-unit id="a963885aaf0f61482fbaede4f9fc78877a13624a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#remainder&quot;&gt;remainder&lt;/a&gt; but also returns the low-order bits of the quotient (n) [C99]</source>
          <target state="translated">&lt;a href=&quot;#remainder&quot;&gt;剰余&lt;/a&gt;と同様ですが、商（n）の下位ビットも返します[C99]</target>
        </trans-unit>
        <trans-unit id="684022cdfa09a338010e59568f2b520d497d9055" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#round&quot;&gt;&quot;round&quot;&lt;/a&gt;, but as integer, as opposed to floating point [C99].</source>
          <target state="translated">&lt;a href=&quot;#round&quot;&gt;「ラウンド」&lt;/a&gt;に似ていますが、浮動小数点[C99]とは対照的に整数です。</target>
        </trans-unit>
        <trans-unit id="b5282dab906515d5042c87772d3d7af38dc7d497" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;, but as integer, as opposed to floating point [C99].</source>
          <target state="translated">&lt;a href=&quot;#round&quot;&gt;round&lt;/a&gt;に似ていますが、浮動小数点[C99]ではなく整数として。</target>
        </trans-unit>
        <trans-unit id="5ca6b661daea1fb2637dc5c26cdc951e025782cb" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#setpayload&quot;&gt;&quot;setpayload&quot;&lt;/a&gt; but also makes the NaN</source>
          <target state="translated">&lt;a href=&quot;#setpayload&quot;&gt;「setpayload」の&lt;/a&gt;ようですが、NaNも作成します</target>
        </trans-unit>
        <trans-unit id="13069e76221341c8aade28e20a2776be321b753c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#strtod&quot;&gt;&quot;strtod&quot;&lt;/a&gt; but for long doubles. Defined only if the system supports long doubles.</source>
          <target state="translated">以下のような&lt;a href=&quot;#strtod&quot;&gt;「は、strtod」&lt;/a&gt;が、長いダブルスについて。システムがlongdoubleをサポートする場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="a05cbd07aa430b94f88ef1127d9cc3feb4a35b92" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#strtod&quot;&gt;strtod&lt;/a&gt; but for long doubles. Defined only if the system supports long doubles.</source>
          <target state="translated">&lt;a href=&quot;#strtod&quot;&gt;strtodの&lt;/a&gt;ようですが、ロングダブルス用です。システムがlong doubleをサポートする場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="e5d85e8e0de6544839fe7d3c4073f5a3d09bc76d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_pv&quot;&gt;&quot;sv_does_pv&quot;&lt;/a&gt;, but doesn't take a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;a href=&quot;#sv_does_pv&quot;&gt;「sv_does_pv」&lt;/a&gt;と同様ですが、 &lt;code&gt;flags&lt;/code&gt; パラメーターを取りません。</target>
        </trans-unit>
        <trans-unit id="07f5fd00ec8eac8e99d9f1474911e3920a009bb9" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_pv&quot;&gt;sv_does_pv&lt;/a&gt;, but doesn't take a &lt;code&gt;flags&lt;/code&gt; parameter.</source>
          <target state="translated">同様&lt;a href=&quot;#sv_does_pv&quot;&gt;sv_does_pv&lt;/a&gt;、しかし取らない &lt;code&gt;flags&lt;/code&gt; パラメータを。</target>
        </trans-unit>
        <trans-unit id="5ff8c36e121f1fd60e63b43a1210b091d9a7c4d4" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;&quot;sv_does_sv&quot;&lt;/a&gt;, but takes a nul-terminated string instead of an SV.</source>
          <target state="translated">&lt;a href=&quot;#sv_does_sv&quot;&gt;「sv_does_sv」&lt;/a&gt;と同様ですが、SVの代わりにヌル文字で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="a4661a4afd9ad32e2ec4db3ef6fa0574da2c1a43" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;&quot;sv_does_sv&quot;&lt;/a&gt;, but takes a string/length pair instead of an SV.</source>
          <target state="translated">&lt;a href=&quot;#sv_does_sv&quot;&gt;「sv_does_sv」&lt;/a&gt;と同様ですが、SVの代わりに文字列と長さのペアを取ります。</target>
        </trans-unit>
        <trans-unit id="ad65fa317ddd80710d2963974312eb533dd0432b" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;, but takes a nul-terminated string instead of an SV.</source>
          <target state="translated">同様&lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;、代わりにSVのNUL終端文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="aa34ede2432b39dab6d8a29f4520f696d8b17636" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;, but takes a string/length pair instead of an SV.</source>
          <target state="translated">同様&lt;a href=&quot;#sv_does_sv&quot;&gt;sv_does_sv&lt;/a&gt;、代わりにSVの文字列/長さのペアを取ります。</target>
        </trans-unit>
        <trans-unit id="8055d83feddf7b95aa6c67e74cf6d04e1a0e5710" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt;. Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt;. This is the numeric version.</source>
          <target state="translated">同様&lt;a href=&quot;Test::More&quot;&gt;のテスト::詳しい&lt;/a&gt;さん &lt;code&gt;isnt()&lt;/code&gt; 。 &lt;code&gt;$got ne $dont_expect&lt;/code&gt; かどうかを確認します。これは数値バージョンです。</target>
        </trans-unit>
        <trans-unit id="3b51c5f83e0f401b76b918dc53d982582a6c6707" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt;. Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt;. This is the string version.</source>
          <target state="translated">同様&lt;a href=&quot;Test::More&quot;&gt;のテスト::詳しい&lt;/a&gt;さん &lt;code&gt;isnt()&lt;/code&gt; 。 &lt;code&gt;$got ne $dont_expect&lt;/code&gt; かどうかを確認します。これは文字列バージョンです。</target>
        </trans-unit>
        <trans-unit id="5d0b144d9f1c5c01a2bcc227e28eeb2d1477818c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;like()&lt;/code&gt;. Checks if $thing matches the given &lt;code&gt;$regex&lt;/code&gt;.</source>
          <target state="translated">Like &lt;a href=&quot;Test::More&quot;&gt;Test :: More&lt;/a&gt; 's &lt;code&gt;like()&lt;/code&gt; 。$ thingが指定された &lt;code&gt;$regex&lt;/code&gt; 一致するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="499b3623d431ec18655cbbc9fbf8897411d047d8" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;unlike()&lt;/code&gt;. Checks if $thing &lt;b&gt;does not match&lt;/b&gt; the given &lt;code&gt;$regex&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;Test::More&quot;&gt;Test :: More&lt;/a&gt;のlike &lt;code&gt;unlike()&lt;/code&gt; ます。$ thing&lt;b&gt;が&lt;/b&gt;指定された &lt;code&gt;$regex&lt;/code&gt; &lt;b&gt;一致しない&lt;/b&gt;かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="0270db3e4b83c7917acde896050328f249d7140a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt; . Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt; . This is the numeric version.</source>
          <target state="translated">同様&lt;a href=&quot;more&quot;&gt;のテスト::詳しい&lt;/a&gt;さん &lt;code&gt;isnt()&lt;/code&gt; 。 &lt;code&gt;$got ne $dont_expect&lt;/code&gt; かどうかを確認します。これは数値バージョンです。</target>
        </trans-unit>
        <trans-unit id="a5f74c54ee73f3446f105290901ca9cf61ea643a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;isnt()&lt;/code&gt; . Checks if &lt;code&gt;$got ne $dont_expect&lt;/code&gt; . This is the string version.</source>
          <target state="translated">同様&lt;a href=&quot;more&quot;&gt;のテスト::詳しい&lt;/a&gt;さん &lt;code&gt;isnt()&lt;/code&gt; 。 &lt;code&gt;$got ne $dont_expect&lt;/code&gt; かどうかを確認します。これは文字列バージョンです。</target>
        </trans-unit>
        <trans-unit id="9693737cd3c58d515bd81ab55ef59b90671ceaba" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;like()&lt;/code&gt; . Checks if $thing matches the given &lt;code&gt;$regex&lt;/code&gt; .</source>
          <target state="translated">同様&lt;a href=&quot;more&quot;&gt;のテスト::詳細は&lt;/a&gt;「S &lt;code&gt;like()&lt;/code&gt; 。$ thingが指定された &lt;code&gt;$regex&lt;/code&gt; 一致するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="348be5230ca4cb8628d5a3ede0642c968809d567" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s &lt;code&gt;unlike()&lt;/code&gt; . Checks if $thing &lt;b&gt;does not match&lt;/b&gt; the given &lt;code&gt;$regex&lt;/code&gt; .</source>
          <target state="translated">同様&lt;a href=&quot;more&quot;&gt;のテスト::詳しい&lt;/a&gt;さん &lt;code&gt;unlike()&lt;/code&gt; 。$ thing &lt;b&gt;が&lt;/b&gt;指定された &lt;code&gt;$regex&lt;/code&gt; &lt;b&gt;一致しない&lt;/b&gt;かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="75959408f273f7b39d4c26886da9ddb8ba9ee269" translate="yes" xml:space="preserve">
          <source>Like &lt;b&gt;-T&lt;/b&gt;, but taint checks will issue warnings rather than fatal errors. These warnings can now be controlled normally with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings
qw(taint)&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;-T&lt;/b&gt;と同様ですが、汚染チェックは致命的なエラーではなく警告を発行します。これらの警告は &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings qw(taint)&lt;/code&gt; 正常に制御できるようになりましたqw（taint）。</target>
        </trans-unit>
        <trans-unit id="19d3972f6bfa689ac944e15f05e77cbb13096271" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt; , the &lt;code&gt;extract_bracketed&lt;/code&gt; function takes up to three optional scalar arguments: a string to extract from, a delimiter specifier, and a prefix pattern. As before, a missing prefix defaults to optional whitespace and a missing text defaults to &lt;code&gt;$_&lt;/code&gt; . However, a missing delimiter specifier defaults to &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; (see below).</source>
          <target state="translated">&lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt; と同様に、 &lt;code&gt;extract_bracketed&lt;/code&gt; 関数は最大3つのオプションのスカラー引数を取ります。抽出元の文字列、区切り文字指定子、およびプレフィックスパターンです。前と同様に、欠落している接頭辞はデフォルトでオプションの空白になり、欠落しているテキストはデフォルトで &lt;code&gt;$_&lt;/code&gt; ます。ただし、区切り文字指定子が欠落していると、デフォルトで &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; になります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8d7efc2799c6c0aeefd629283955bc733e276d0d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt;, the &lt;code&gt;extract_bracketed&lt;/code&gt; function takes up to three optional scalar arguments: a string to extract from, a delimiter specifier, and a prefix pattern. As before, a missing prefix defaults to optional whitespace and a missing text defaults to &lt;code&gt;$_&lt;/code&gt;. However, a missing delimiter specifier defaults to &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; (see below).</source>
          <target state="translated">&lt;code&gt;&quot;extract_delimited&quot;&lt;/code&gt; と同様に、 &lt;code&gt;extract_bracketed&lt;/code&gt; 関数は、最大3つのオプションのスカラー引数（抽出元の文字列、区切り文字指定子、およびプレフィックスパターン）を取ります。以前と同様に、欠落しているプレフィックスはデフォルトでオプションの空白になり、欠落しているテキストはデフォルトで &lt;code&gt;$_&lt;/code&gt; ます。ただし、欠落している区切り文字指定子は、デフォルトで &lt;code&gt;'{}()[]&amp;lt;&amp;gt;'&lt;/code&gt; （以下を参照）。</target>
        </trans-unit>
        <trans-unit id="a8638e9c741c1e67ac1a4fb8957038d6a39847eb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt; , but if the value is omitted, the</source>
          <target state="translated">&lt;code&gt;:i&lt;/code&gt; と同様ですが、値が省略された場合、</target>
        </trans-unit>
        <trans-unit id="6c3eb9fc5ff253146a577da27d5894ba1dc92861" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt; , but if the value is omitted, the current value for the option will be incremented.</source>
          <target state="translated">&lt;code&gt;:i&lt;/code&gt; と同様ですが、値が省略されると、オプションの現在の値が増加します。</target>
        </trans-unit>
        <trans-unit id="e917fcd099f7bf9447127b4c6b34e7b279996d9c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt;, but if the value is omitted, the</source>
          <target state="translated">&lt;code&gt;:i&lt;/code&gt; と同様ですが、値を省略すると、</target>
        </trans-unit>
        <trans-unit id="7f9edf6df4e0a9dec710ce6226ae54af4b423720" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;:i&lt;/code&gt;, but if the value is omitted, the current value for the option will be incremented.</source>
          <target state="translated">&lt;code&gt;:i&lt;/code&gt; と同様ですが、値を省略すると、オプションの現在の値が増加します。</target>
        </trans-unit>
        <trans-unit id="a72498a7bf2cc1e79678e63ab406b0c7a1e1f22d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN&quot;&gt;&quot;ckWARN&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if the warning category is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN&quot;&gt;&quot;ckWARN&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、 &lt;code&gt;use warnings&lt;/code&gt; 範囲内にない場合でも、警告カテゴリがデフォルトで有効になっている場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="07e4e8837fe47e35448f28c70d5f0b43b109c2e8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN&quot;&gt;&quot;ckWARN&quot;&lt;/a&gt;&lt;/code&gt;, but takes two warnings categories as input, and returns TRUE if either is enabled. If either category is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;, instead use the &lt;a href=&quot;#ckWARN2_d&quot;&gt;&quot;ckWARN2_d&quot;&lt;/a&gt; macro. The categories must be completely independent, one may not be subclassed from the other.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN&quot;&gt;&quot;ckWARN&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、入力として2つの警告カテゴリを受け取り、どちらかが有効になっている場合はTRUEを返します。 &lt;code&gt;use warnings&lt;/code&gt; の範囲内でなくても、いずれかのカテゴリがデフォルトで有効になっている場合は、代わりに&lt;a href=&quot;#ckWARN2_d&quot;&gt;「ckWARN2_d」&lt;/a&gt;マクロを使用してください。カテゴリは完全に独立している必要があり、一方を他方からサブクラス化することはできません。</target>
        </trans-unit>
        <trans-unit id="419e26b6ee286b6d83d0487c5a57940285a7f404" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN2&quot;&gt;&quot;ckWARN2&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if either warning category is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN2&quot;&gt;&quot;ckWARN2&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、 &lt;code&gt;use warnings&lt;/code&gt; 範囲内にない場合でも、いずれかの警告カテゴリがデフォルトで有効になっている場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="4a0b75aa92dfd27a10af7448f298956a33a06201" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN2&quot;&gt;&quot;ckWARN2&quot;&lt;/a&gt;&lt;/code&gt;, but takes three warnings categories as input, and returns TRUE if any is enabled. If any of the categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;, instead use the &lt;a href=&quot;#ckWARN3_d&quot;&gt;&quot;ckWARN3_d&quot;&lt;/a&gt; macro. The categories must be completely independent, one may not be subclassed from any other.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN2&quot;&gt;&quot;ckWARN2&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、入力として3つの警告カテゴリを受け取り、有効になっている場合はTRUEを返します。 &lt;code&gt;use warnings&lt;/code&gt; の範囲内でなくても、いずれかのカテゴリがデフォルトで有効になっている場合は、代わりに&lt;a href=&quot;#ckWARN3_d&quot;&gt;「ckWARN3_d」&lt;/a&gt;マクロを使用してください。カテゴリは完全に独立している必要があり、1つを他からサブクラス化することはできません。</target>
        </trans-unit>
        <trans-unit id="4f2f4ea75511cd5867b17de10a3c9cc97f03000e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN3&quot;&gt;&quot;ckWARN3&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if any of the warning categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN3&quot;&gt;&quot;ckWARN3&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、 &lt;code&gt;use warnings&lt;/code&gt; 範囲内にない場合でも、警告カテゴリのいずれかがデフォルトで有効になっている場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="ea073c6d4d2f3be717fe763a8236d2fa3983dd14" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN3&quot;&gt;&quot;ckWARN3&quot;&lt;/a&gt;&lt;/code&gt;, but takes four warnings categories as input, and returns TRUE if any is enabled. If any of the categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;, instead use the &lt;a href=&quot;#ckWARN4_d&quot;&gt;&quot;ckWARN4_d&quot;&lt;/a&gt; macro. The categories must be completely independent, one may not be subclassed from any other.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN3&quot;&gt;&quot;ckWARN3&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、入力として4つの警告カテゴリを受け取り、有効になっている場合はTRUEを返します。 &lt;code&gt;use warnings&lt;/code&gt; の範囲内にない場合でも、カテゴリのいずれかがデフォルトで有効になっている場合は、代わりに&lt;a href=&quot;#ckWARN4_d&quot;&gt;「ckWARN4_d」&lt;/a&gt;マクロを使用してください。カテゴリは完全に独立している必要があり、1つを他からサブクラス化することはできません。</target>
        </trans-unit>
        <trans-unit id="b2c7a6a2e8726ab7252364cc04fd4ea666ebc8c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ckWARN4&quot;&gt;&quot;ckWARN4&quot;&lt;/a&gt;&lt;/code&gt;, but for use if and only if any of the warning categories is by default enabled even if not within the scope of &lt;code&gt;use warnings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ckWARN4&quot;&gt;&quot;ckWARN4&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、 &lt;code&gt;use warnings&lt;/code&gt; 範囲内にない場合でも、警告カテゴリのいずれかがデフォルトで有効になっている場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="2e6b184b57730c77a791a10594697539485e24b0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納し、UTF-8のエンコード数を格納します。 &lt;code&gt;el&lt;/code&gt; ポインタの文字。</target>
        </trans-unit>
        <trans-unit id="1d139eda757264428ce8d6faad0998e0c3769736" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納します。</target>
        </trans-unit>
        <trans-unit id="5271b223e0f3ecc184afda4eb4579d5e8c1de58c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納し、UTF-8のエンコード数を格納します &lt;code&gt;el&lt;/code&gt; ポインタの文字。</target>
        </trans-unit>
        <trans-unit id="c6cbb5f193b52a523e82c581210653da96c02968" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納します。</target>
        </trans-unit>
        <trans-unit id="d3fe020358fe6e2a30b7f3e56ff293f970a16478" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_fixed_width_buf_flags&quot;&gt;&quot;is_utf8_fixed_width_buf_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure in the &lt;code&gt;ep&lt;/code&gt; pointer. If the function returns TRUE, &lt;code&gt;*ep&lt;/code&gt; will point to the beginning of any partial character at the end of the buffer; if there is no partial character &lt;code&gt;*ep&lt;/code&gt; will contain &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_fixed_width_buf_flags&quot;&gt;&quot;is_utf8_fixed_width_buf_flags&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所を &lt;code&gt;ep&lt;/code&gt; ポインターに格納します。関数がTRUEを返す場合、 &lt;code&gt;*ep&lt;/code&gt; はバッファーの終わりにある部分文字の先頭を指します。部分文字がない場合 &lt;code&gt;*ep&lt;/code&gt; には &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="184619f40e2d3b96236b99f26b9009ae016b50d2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_fixed_width_buf_loc_flags&quot;&gt;&quot;is_utf8_fixed_width_buf_loc_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the number of complete, valid characters found in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_fixed_width_buf_loc_flags&quot;&gt;&quot;is_utf8_fixed_width_buf_loc_flags&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、 &lt;code&gt;el&lt;/code&gt; ポインタで見つかった完全で有効な文字の数を格納します。</target>
        </trans-unit>
        <trans-unit id="7227ef07854b8cfd22e221bfeaf5dae02357c44a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_invariant_string&quot;&gt;&quot;is_utf8_invariant_string&quot;&lt;/a&gt;&lt;/code&gt; but upon failure, stores the location of the first UTF-8 variant character in the &lt;code&gt;ep&lt;/code&gt; pointer; if all characters are UTF-8 invariant, this function does not change the contents of &lt;code&gt;*ep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_invariant_string&quot;&gt;&quot;is_utf8_invariant_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗すると、最初のUTF-8異体字の場所を &lt;code&gt;ep&lt;/code&gt; ポインターに格納します。すべての文字がUTF-8不変である場合、この関数は &lt;code&gt;*ep&lt;/code&gt; の内容を変更しません。</target>
        </trans-unit>
        <trans-unit id="b86cd12bd56f8c4d5a287a0fc3cdf7a1222db664" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納し、UTF-8のエンコード数を格納します。 &lt;code&gt;el&lt;/code&gt; ポインタの文字。</target>
        </trans-unit>
        <trans-unit id="6ff1a503be987f0032effdacb189b36936341632" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納します。</target>
        </trans-unit>
        <trans-unit id="cfc892fe53ef825e8f87599d3f0987cfffdb6bdb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer, and the number of UTF-8 encoded characters in the &lt;code&gt;el&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納し、UTF-8のエンコード数を格納します。 &lt;code&gt;el&lt;/code&gt; ポインタの文字。</target>
        </trans-unit>
        <trans-unit id="6c58aaf9e5b4c34db9f382e35942b79704f88a22" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;&lt;/code&gt; but stores the location of the failure (in the case of &quot;utf8ness failure&quot;) or the location &lt;code&gt;s&lt;/code&gt;+&lt;code&gt;len&lt;/code&gt; (in the case of &quot;utf8ness success&quot;) in the &lt;code&gt;ep&lt;/code&gt; pointer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、失敗の場所（「utf8nessfailure」の場合）または場所 &lt;code&gt;s&lt;/code&gt; + &lt;code&gt;len&lt;/code&gt; （「utf8nesssuccess」の場合）を &lt;code&gt;ep&lt;/code&gt; ポインターに格納します。</target>
        </trans-unit>
        <trans-unit id="bac14a2fc2052bfda8c74ae275ad47bc11891894" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char&quot;&gt;&quot;is_utf8_valid_partial_char&quot;&lt;/a&gt;&lt;/code&gt;, it returns a boolean giving whether or not the input is a valid UTF-8 encoded partial character, but it takes an extra parameter, &lt;code&gt;flags&lt;/code&gt;, which can further restrict which code points are considered valid.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_utf8_valid_partial_char&quot;&gt;&quot;is_utf8_valid_partial_char&quot;&lt;/a&gt;&lt;/code&gt; と同様に、入力が有効なUTF-8エンコード部分文字であるかどうかを示すブール値を返しますが、追加のパラメーター &lt;code&gt;flags&lt;/code&gt; を取ります。これにより、有効と見なされるコードポイントをさらに制限できます。</target>
        </trans-unit>
        <trans-unit id="a2ae8be3d24ca6a297e15b0d7fafe2dba59e2100" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;#ninstr&quot;&gt;&quot;ninstr&quot;&lt;/a&gt;&lt;/code&gt;, but instead finds the final (rightmost) occurrence of a sequence of bytes within another sequence, returning &lt;code&gt;NULL&lt;/code&gt; if there is no such occurrence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ninstr&quot;&gt;&quot;ninstr&quot;&lt;/a&gt;&lt;/code&gt; と同様ですが、代わりに、別のシーケンス内のバイトシーケンスの最後の（右端の）オカレンスを検索し、そのようなオカレンスがない場合は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a8ec6b1469cf896b7423c3e7e32f92d207da0b8f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; allows you to lie to a program about its name if you use the &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; syntax. Again, see &lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 使用する場合は、その名程度のプログラムに嘘をつくことを可能にする &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; 構文を。繰り返しますが、&lt;a href=&quot;exec&quot;&gt;execを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="53ce9db24e9d8151cb0d5ad673fbb551695d8498" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; allows you to lie to a program about its name if you use the &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; syntax. Again, see &lt;a href=&quot;#exec&quot;&gt;exec&lt;/a&gt;.</source>
          <target state="translated">同様 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 使用する場合は、その名程度のプログラムに嘘をつくことを可能にする &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; PROGRAM LIST&lt;/code&gt; 構文を。繰り返しますが、&lt;a href=&quot;#exec&quot;&gt;execを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c07f470d836169d71198d296d47952ad2947c4f8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; $variable&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; creates a lexical alias to the package subroutine of the same name.</source>
          <target state="translated">同様に &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; $variable&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our&lt;/a&gt; &lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 、同じ名前のパッケージサブルーチンに字句のエイリアスを作成します。</target>
        </trans-unit>
        <trans-unit id="71fcf0aeb3b2b8b93c5a529ba638d8c163bace8e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;&lt;a href=&quot;perlapi#utf8_to_uvchr_buf&quot;&gt;&quot;utf8_to_uvchr_buf&quot; in perlapi&lt;/a&gt;&lt;/code&gt;, but should only be called when it is known that the next character in the input UTF-8 string &lt;code&gt;s&lt;/code&gt; is well-formed (</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;perlapi#utf8_to_uvchr_buf&quot;&gt;&quot;utf8_to_uvchr_buf&quot; in perlapi&lt;/a&gt;&lt;/code&gt; と同様ですが、入力UTF-8文字列 &lt;code&gt;s&lt;/code&gt; 次の文字が整形式であることがわかっている場合にのみ呼び出す必要があります（</target>
        </trans-unit>
        <trans-unit id="e8bfeaa61a4310c58029cc704a58399ca890239c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;=&lt;/code&gt; , but designates the argument as optional. If omitted, an empty string will be assigned to string values options, and the value zero to numeric options.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; に似ていますが、引数をオプションとして指定します。省略した場合、空の文字列が文字列値オプションに割り当てられ、値0が数値オプションに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="4ede365bb483e8de4140eea3631854060b2e0a3c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;=&lt;/code&gt;, but designates the argument as optional. If omitted, an empty string will be assigned to string values options, and the value zero to numeric options.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; と同様ですが、引数をオプションとして指定します。省略した場合、空の文字列が文字列値オプションに割り当てられ、値ゼロが数値オプションに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="9a58c5a4f4c388955ace0d1b2c081730bec782ab" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ARRAY&lt;/code&gt; , but takes an index as an argument to get only one element, rather than a list of all of them.</source>
          <target state="translated">&lt;code&gt;ARRAY&lt;/code&gt; と似ていますが、すべての要素のリストではなく、1つの要素のみを取得するための引数としてインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="f172ba9b7b9b3d5863cfacf3230b6e0158d82632" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ARRAY&lt;/code&gt;, but takes an index as an argument to get only one element, rather than a list of all of them.</source>
          <target state="translated">&lt;code&gt;ARRAY&lt;/code&gt; と同様ですが、すべての要素のリストではなく、1つの要素のみを取得するための引数としてインデックスを取ります。</target>
        </trans-unit>
        <trans-unit id="904d0219765a58ae524cd174247fe80e59898174" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;CLONE&lt;/code&gt; , &lt;code&gt;CLONE_SKIP&lt;/code&gt; is currently called with no parameters other than the invocant package name, although that may change. Similarly, to allow for future expansion, the return value should be a single &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;CLONE&lt;/code&gt; と同様に、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; は現在、変更される可能性がありますが、呼び出し元のパッケージ名以外のパラメーターなしで呼び出されます。同様に、将来の拡張を考慮して、戻り値は単一の &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;1&lt;/code&gt; の値である必要があります。</target>
        </trans-unit>
        <trans-unit id="f940b8493916ee3f27829022bc4c4a8f402337a1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;CLONE&lt;/code&gt;, &lt;code&gt;CLONE_SKIP&lt;/code&gt; is currently called with no parameters other than the invocant package name, although that may change. Similarly, to allow for future expansion, the return value should be a single &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;CLONE&lt;/code&gt; と同様に、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; は現在、呼び出し元のパッケージ名以外のパラメーターなしで呼び出されますが、変更される可能性があります。同様に、将来の拡張を可能にするために、戻り値は単一の &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;1&lt;/code&gt; の値である必要があります。</target>
        </trans-unit>
        <trans-unit id="712167b0cb1cf028d5ac0a7f89ae0f319bb50f60" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Copy&lt;/code&gt; but returns &lt;code&gt;dest&lt;/code&gt;. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; と同様ですが、 &lt;code&gt;dest&lt;/code&gt; を返します。コンパイラーに末尾呼び出しの最適化を促すのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="400aa1515ac06a94cb93b93ac9f5493878616d4c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Copy&lt;/code&gt; but returns dest. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">&lt;code&gt;Copy&lt;/code&gt; に似ていますが、destを返します。最適化を末尾呼び出しするようコンパイラーに働きかけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="14537197538893226d82efeb48b7a358e65846d7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Moose&lt;/code&gt; , &lt;code&gt;Class::Accessor&lt;/code&gt; generates accessor methods and a constructor for your class.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; と同様に、 &lt;code&gt;Class::Accessor&lt;/code&gt; はクラスのアクセサメソッドとコンストラクタを生成します。</target>
        </trans-unit>
        <trans-unit id="41aea6605b986b34eea2def3a336d7bee9c15525" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Moose&lt;/code&gt;, &lt;code&gt;Class::Accessor&lt;/code&gt; generates accessor methods and a constructor for your class.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; と同様に、 &lt;code&gt;Class::Accessor&lt;/code&gt; はクラスのアクセサーメソッドとコンストラクターを生成します。</target>
        </trans-unit>
        <trans-unit id="6c1911709504f680e61bf78568c4b6d9d06b0561" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Move&lt;/code&gt; but returns &lt;code&gt;dest&lt;/code&gt;. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">&lt;code&gt;Move&lt;/code&gt; と同様ですが、 &lt;code&gt;dest&lt;/code&gt; を返します。コンパイラーに末尾呼び出しの最適化を促すのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5dc10814cde731762cb07a8de6fded71423754dc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Move&lt;/code&gt; but returns dest. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">&lt;code&gt;Move&lt;/code&gt; に似ていますが、destを返します。最適化を末尾呼び出しするようコンパイラーに働きかけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="63bea6acc9be28a6d3cb950aea732759df8ac57d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvIV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">&lt;code&gt;SvIV&lt;/code&gt; と同様ですが、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="8f72df42d4357277ebaaa7626ab2ec8434c74b44" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvNV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">&lt;code&gt;SvNV&lt;/code&gt; と同様ですが、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="f987f68efd96052a6b0a92226467d6e95b9160b3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to byte representation first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; に似ていますが、必要に応じて最初にsvをバイト表現に変換します。</target>
        </trans-unit>
        <trans-unit id="d5b21bddc458bd8cbfcd7db407bfa101b7f02dfa" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to byte representation first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVbyte&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; に似ていますが、必要に応じて最初にsvをバイト表現に変換します。svを一度だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVbyte&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="020487c29dd87ab0c92e767efba3c8f41b9bfcc7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to utf8 first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; に似ていますが、必要に応じて最初にsvをutf8に変換します。</target>
        </trans-unit>
        <trans-unit id="a5a0c092212799a2ed1d29176de9f03d368894bf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; , but converts sv to utf8 first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVutf8&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; に似ていますが、必要に応じて最初にsvをutf8に変換します。svを一度だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVutf8&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="728e33d136e3d988de2e0baba97a509be6c9c1b3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;SvPV&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="9f644bfac194a0b755578b81e47d7586566e4504" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but doesn't set a length variable.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、長さ変数を設定しません。</target>
        </trans-unit>
        <trans-unit id="153041f77422ab93c76bcbcf6550af4c15800fa0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but will force the SV into containing a string (&lt;code&gt;SvPOK&lt;/code&gt; ), and only a string (&lt;code&gt;SvPOK_only&lt;/code&gt; ), by hook or by crook. You need force if you are going to update the &lt;code&gt;SvPVX&lt;/code&gt; directly. Processes get magic.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、フックまたは &lt;code&gt;SvPOK_only&lt;/code&gt; によって、SVに文字列（ &lt;code&gt;SvPOK&lt;/code&gt; ）と文字列（SvPOK_only）のみを強制的に含めます。 &lt;code&gt;SvPVX&lt;/code&gt; を直接更新する場合は、強制する必要があります。プロセスは魔法を使います。</target>
        </trans-unit>
        <trans-unit id="d21fc8eebda239f78f40ff861ae346674bc44746" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt; but will force the SV into containing a string (&lt;code&gt;SvPOK&lt;/code&gt;), and only a string (&lt;code&gt;SvPOK_only&lt;/code&gt;), by hook or by crook. You need force if you are going to update the &lt;code&gt;SvPVX&lt;/code&gt; directly. Processes get magic.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、フックまたは詐欺師によって、SVに文字列（ &lt;code&gt;SvPOK&lt;/code&gt; ）と文字列のみ（ &lt;code&gt;SvPOK_only&lt;/code&gt; ）を含めるように強制します。 &lt;code&gt;SvPVX&lt;/code&gt; を直接更新する場合は、強制が必要です。プロセスは魔法をかけます。</target>
        </trans-unit>
        <trans-unit id="349b9b0f215cc3428bdddf241602ce0c2e78c72b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をUTF-8に変換します。</target>
        </trans-unit>
        <trans-unit id="e94d5ef1f314f46efc3bd3d45f2affc66f0be81f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVutf8&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をUTF-8に変換します。 &lt;code&gt;sv&lt;/code&gt; を1回だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVutf8&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="826e9ea9cb83ae3e7f9096a1ec17389c37388921" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVbyte&lt;/code&gt; otherwise. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をバイト表現に変換します。 &lt;code&gt;sv&lt;/code&gt; を1回だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVbyte&lt;/code&gt; を使用してください。SVをUTF-8からダウングレードできない場合、これは鳴り響きます。</target>
        </trans-unit>
        <trans-unit id="141f76de6b791c79da422cfe3133860c38f0a7b0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="translated">&lt;code&gt;SvPV&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をバイト表現に変換します。SVをUTF-8からダウングレードできない場合、これは鳴り響きます。</target>
        </trans-unit>
        <trans-unit id="d303190c56047f26fce52e3043032426e788042e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to byte representation first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; に似ていますが、必要に応じて最初にsvをバイト表現に変換します。</target>
        </trans-unit>
        <trans-unit id="e339b69da0fc6099ae5122846dd6d16329909d09" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to byte representation first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVbyte_force&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; に似ていますが、必要に応じて最初にsvをバイト表現に変換します。svを一度だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVbyte_force&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="33e41cb5a5972955c89d4da04933a8a79726a21b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to utf8 first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と似ていますが、必要に応じて最初にsvをutf8に変換します。</target>
        </trans-unit>
        <trans-unit id="85dee70f70d9f59dd1fd504ab0aa00e6dc082a6e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but converts sv to utf8 first if necessary. Guarantees to evaluate sv only once; use the more efficient &lt;code&gt;SvPVutf8_force&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と似ていますが、必要に応じて最初にsvをutf8に変換します。svを一度だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVutf8_force&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="2ed49f80c2155ad585761ac04bf59edd4a6a0831" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt; , but doesn't process get magic.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と似ていますが、get magicを処理しません。</target>
        </trans-unit>
        <trans-unit id="de31ac38b3310b9f71eaea9b2b9823bca2371b5b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をUTF-8に変換します。</target>
        </trans-unit>
        <trans-unit id="ef89cf67971528e31aab7836397b698e7ac2bf5f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVutf8_force&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をUTF-8に変換します。 &lt;code&gt;sv&lt;/code&gt; を1回だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVutf8_force&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="64af48e8fcfd9300a6f250966560fbb0e199baa6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. Guarantees to evaluate &lt;code&gt;sv&lt;/code&gt; only once; use the more efficient &lt;code&gt;SvPVbyte_force&lt;/code&gt; otherwise. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をバイト表現に変換します。 &lt;code&gt;sv&lt;/code&gt; を1回だけ評価することを保証します。それ以外の場合は、より効率的な &lt;code&gt;SvPVbyte_force&lt;/code&gt; を使用してください。SVをUTF-8からダウングレードできない場合、これは鳴り響きます。</target>
        </trans-unit>
        <trans-unit id="a9a9095d2fee3653ae330358ffc4695a81e6b02f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をバイト表現に変換します。SVをUTF-8からダウングレードできない場合、これは鳴り響きます。</target>
        </trans-unit>
        <trans-unit id="60cf6163858835eb56fc5636d4aa26add2cda002" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_force&lt;/code&gt;, but doesn't process get magic.</source>
          <target state="translated">&lt;code&gt;SvPV_force&lt;/code&gt; と同様ですが、魔法を取得するプロセスはありません。</target>
        </trans-unit>
        <trans-unit id="dd41cfed5f0aafc487ed8b935e2fe00690512ae4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt; , but converts sv to byte representation first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV_nolen&lt;/code&gt; と似ていますが、必要に応じて最初にsvをバイト表現に変換します。</target>
        </trans-unit>
        <trans-unit id="569d8ee3b9025e7d46c4e22dc014e9293f09b9cf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt; , but converts sv to utf8 first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV_nolen&lt;/code&gt; と同様ですが、必要に応じて最初にsvをutf8に変換します。</target>
        </trans-unit>
        <trans-unit id="c6ed04996a1df68aa8ad7cc1586c48a5135a6669" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;SvPV_nolen&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="84b7cb4480c3132c8864625842015ea55fab81e1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to UTF-8 first if necessary.</source>
          <target state="translated">&lt;code&gt;SvPV_nolen&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をUTF-8に変換します。</target>
        </trans-unit>
        <trans-unit id="1fa0a4e5ab6512583ca715ed04c79ddb474737cc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPV_nolen&lt;/code&gt;, but converts &lt;code&gt;sv&lt;/code&gt; to byte representation first if necessary. If the SV cannot be downgraded from UTF-8, this croaks.</source>
          <target state="translated">&lt;code&gt;SvPV_nolen&lt;/code&gt; と同様ですが、必要に応じて最初に &lt;code&gt;sv&lt;/code&gt; をバイト表現に変換します。SVをUTF-8からダウングレードできない場合、これは鳴り響きます。</target>
        </trans-unit>
        <trans-unit id="4a865431f8a7ccfcbc629a801cbd5a4e318acecb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVbyte&lt;/code&gt;, but does not process get magic.</source>
          <target state="translated">&lt;code&gt;SvPVbyte&lt;/code&gt; と同様ですが、getmagicを処理しません。</target>
        </trans-unit>
        <trans-unit id="0cce88bb70d307b5b0e2ee525ca3357c9496281e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVbyte&lt;/code&gt;, but when &lt;code&gt;sv&lt;/code&gt; is undef, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SvPVbyte&lt;/code&gt; と同様ですが、 &lt;code&gt;sv&lt;/code&gt; がundefの場合、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c2fb5185aac038bc23863cae1034fcc526a2af60" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVbyte_or_null&lt;/code&gt;, but does not process get magic.</source>
          <target state="translated">&lt;code&gt;SvPVbyte_or_null&lt;/code&gt; と同様ですが、getmagicを処理しません。</target>
        </trans-unit>
        <trans-unit id="41a2791b53267404eb74d9bbda43c3aea418ea86" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVutf8&lt;/code&gt;, but does not process get magic.</source>
          <target state="translated">&lt;code&gt;SvPVutf8&lt;/code&gt; と同様ですが、getmagicを処理しません。</target>
        </trans-unit>
        <trans-unit id="406f4865185c362d6a5d331cd6d62f6ed4d4d970" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVutf8&lt;/code&gt;, but when &lt;code&gt;sv&lt;/code&gt; is undef, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SvPVutf8&lt;/code&gt; と同様ですが、 &lt;code&gt;sv&lt;/code&gt; がundefの場合、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4bf879f0e51a10965057e3cd31f489e3ff76dc7b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvPVutf8_or_null&lt;/code&gt;, but does not process get magic.</source>
          <target state="translated">&lt;code&gt;SvPVutf8_or_null&lt;/code&gt; と同様ですが、getmagicを処理しません。</target>
        </trans-unit>
        <trans-unit id="ab106c9006a177a2bcf08f263e2472e6c9b25246" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV&lt;/code&gt; , but does any set magic required afterwards.</source>
          <target state="translated">&lt;code&gt;SvSetSV&lt;/code&gt; に似ていますが、後で必要なセットマジックを実行します。</target>
        </trans-unit>
        <trans-unit id="18661798a6626e7bf7cdbb46868b189d21d7ee00" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV&lt;/code&gt;, but does any set magic required afterwards.</source>
          <target state="translated">&lt;code&gt;SvSetSV&lt;/code&gt; と同様ですが、後で必要なセットマジックを実行します。</target>
        </trans-unit>
        <trans-unit id="388de52bdbcc28141b225f26cb9f3fe2e05660c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; , but does any set magic required afterwards.</source>
          <target state="translated">&lt;code&gt;SvSetSV_nosteal&lt;/code&gt; と似ていますが、後で必要なセットマジックを実行します。</target>
        </trans-unit>
        <trans-unit id="0ed8a9070212dcdaecafb195378164bb65737213" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvSetSV_nosteal&lt;/code&gt;, but does any set magic required afterwards.</source>
          <target state="translated">&lt;code&gt;SvSetSV_nosteal&lt;/code&gt; と同様ですが、後で必要なセットマジックを実行します。</target>
        </trans-unit>
        <trans-unit id="3a27275be863ed7ef192a76ef76e83185d113390" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;SvUV&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;SvUV&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="c145fe31e7a9856cfd103483b939c0b69292c062" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Zero&lt;/code&gt; but returns dest. Useful for encouraging compilers to tail-call optimise.</source>
          <target state="translated">&lt;code&gt;Zero&lt;/code&gt; に似ていますが、destを返します。最適化を末尾呼び出しするようコンパイラーに働きかけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="e95906df0f28c9ef1e7b84894c91761f182cafd1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;_to_bin()&lt;/code&gt; but with a '0b' prefix.</source>
          <target state="translated">&lt;code&gt;_to_bin()&lt;/code&gt; と似ていますが、プレフィックスが「0b」です。</target>
        </trans-unit>
        <trans-unit id="293678ff919e37219d0e5d9a7fb067403eb39d97" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;_to_hex()&lt;/code&gt; but with a '0x' prefix.</source>
          <target state="translated">&lt;code&gt;_to_hex()&lt;/code&gt; と似ていますが、プレフィックスが「0x」です。</target>
        </trans-unit>
        <trans-unit id="c679af24785cdf880157af3d3d87fd5d4c630443" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;_to_oct()&lt;/code&gt; but with a '0' prefix.</source>
          <target state="translated">&lt;code&gt;_to_oct()&lt;/code&gt; と似ていますが、プレフィックスは「0」です。</target>
        </trans-unit>
        <trans-unit id="7a30913145132e032417d97e9d5716e5d07e3a09" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;article&lt;/code&gt; but only fetches the body of the article.</source>
          <target state="translated">&lt;code&gt;article&lt;/code&gt; 似ていますが、記事の本文のみを取得します。</target>
        </trans-unit>
        <trans-unit id="dbf2edb5cf6acda874d56c0ec8d6a027b38ecd7b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;article&lt;/code&gt; but only fetches the headers for the article.</source>
          <target state="translated">&lt;code&gt;article&lt;/code&gt; 似ていますが、記事のヘッダーのみを取得します。</target>
        </trans-unit>
        <trans-unit id="698d6282638ff97d91804a4f1cf2ced815c09a43" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cond_wait&lt;/code&gt; , this function may take a shared, &lt;b&gt;locked&lt;/b&gt; variable as an additional parameter; in this case the first parameter is an &lt;b&gt;unlocked&lt;/b&gt; condition variable protected by a distinct lock variable.</source>
          <target state="translated">&lt;code&gt;cond_wait&lt;/code&gt; と同様に、この関数は共有の&lt;b&gt;ロックされた&lt;/b&gt;変数を追加パラメーターとして使用できます。この場合、最初のパラメータである&lt;b&gt;ロック解除&lt;/b&gt;別個のロック変数によって保護条件変数。</target>
        </trans-unit>
        <trans-unit id="c585c7b6a19c2570f8a734ae16123cf56bb4a904" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;cond_wait&lt;/code&gt;, this function may take a shared, &lt;b&gt;locked&lt;/b&gt; variable as an additional parameter; in this case the first parameter is an &lt;b&gt;unlocked&lt;/b&gt; condition variable protected by a distinct lock variable.</source>
          <target state="translated">&lt;code&gt;cond_wait&lt;/code&gt; と同様に、この関数は追加のパラメーターとして共有の&lt;b&gt;ロックされた&lt;/b&gt;変数を受け取る場合があります。この場合、最初のパラメータである&lt;b&gt;ロック解除&lt;/b&gt;別個のロック変数によって保護条件変数。</target>
        </trans-unit>
        <trans-unit id="c58a5c550c804eb437e5a9f29a412c2a917db541" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;copy&lt;/code&gt; , &lt;code&gt;rmscopy&lt;/code&gt; returns 1 on success. If an error occurs, it sets &lt;code&gt;$!&lt;/code&gt; , deletes the output file, and returns 0.</source>
          <target state="translated">&lt;code&gt;copy&lt;/code&gt; と同様に、 &lt;code&gt;rmscopy&lt;/code&gt; は成功すると1を返します。エラーが発生すると、 &lt;code&gt;$!&lt;/code&gt; が設定されます。、出力ファイルを削除し、0を返します。</target>
        </trans-unit>
        <trans-unit id="09aa3572893f32ca36724882d530f081b2c921bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;rmscopy&lt;/code&gt; returns 1 on success. If an error occurs, it sets &lt;code&gt;$!&lt;/code&gt;, deletes the output file, and returns 0.</source>
          <target state="translated">&lt;code&gt;copy&lt;/code&gt; と同様に、 &lt;code&gt;rmscopy&lt;/code&gt; は成功すると1を返します。エラーが発生した場合、 &lt;code&gt;$!&lt;/code&gt; 設定します！、出力ファイルを削除し、0を返します。</target>
        </trans-unit>
        <trans-unit id="62662a2fcd9593969fecb7744ceb2295a389997a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt; , but it prints to the &lt;code&gt;output()&lt;/code&gt; handle so it will not normally be seen by the user except in verbose mode.</source>
          <target state="translated">&lt;code&gt;diag()&lt;/code&gt; と同様ですが、 &lt;code&gt;output()&lt;/code&gt; ハンドルに出力されるため、通常は詳細モード以外ではユーザーには表示されません。</target>
        </trans-unit>
        <trans-unit id="983d206f2bed9edbbc722e7d5cdb62e2a06346c5" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt; , except the message will not be seen when the test is run in a harness. It will only be visible in the verbose TAP stream.</source>
          <target state="translated">&lt;code&gt;diag()&lt;/code&gt; と同様ですが、ハーネスでテストを実行するとメッセージが表示されない点が異なります。詳細なTAPストリームでのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="30ef0020e2af04e6653b9cacfc8060419afe5437" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt;, but it prints to the &lt;code&gt;output()&lt;/code&gt; handle so it will not normally be seen by the user except in verbose mode.</source>
          <target state="translated">&lt;code&gt;diag()&lt;/code&gt; と同様ですが、 &lt;code&gt;output()&lt;/code&gt; ハンドルに出力されるため、冗長モードを除いて、通常はユーザーに表示されません。</target>
        </trans-unit>
        <trans-unit id="538ead19e35b8089406067731ca6a5943e4b5625" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;diag()&lt;/code&gt;, except the message will not be seen when the test is run in a harness. It will only be visible in the verbose TAP stream.</source>
          <target state="translated">&lt;code&gt;diag()&lt;/code&gt; と同様ですが、ハーネスでテストを実行したときにメッセージが表示されない点が異なります。詳細なTAPストリームでのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="4ca575f5cd45b0a03fd8f03890b4f05a0793bc86" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;gv_stashpvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;gv_stashpvn&lt;/code&gt; と似ていますが、文字列と長さのペアではなく、リテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="8691e2305cbe58536b7649210914f3f94532f0e6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;gv_stashpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;gv_stashpvn&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="9a99146718e4827b551f9b9e65221a90a0c6896f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_fetch&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;hv_fetch&lt;/code&gt; 、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="912f545edccc3d2ff98e523743c3a82e5bacfc8d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_fetch&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;hv_fetch&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="1b54ec87ed43945667a5780ba1140342cbc85083" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_store&lt;/code&gt; , but takes a literal string instead of a string/length pair and omits the hash parameter.</source>
          <target state="translated">&lt;code&gt;hv_store&lt;/code&gt; と似ていますが、文字列/長さのペアの代わりにリテラル文字列を受け取り、ハッシュパラメータを省略します。</target>
        </trans-unit>
        <trans-unit id="1d2d05d84f4bcf370e8da5d7a89dc98a3d07cfd1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;hv_store&lt;/code&gt;, but takes a literal string instead of a string/length pair and omits the hash parameter.</source>
          <target state="translated">&lt;code&gt;hv_store&lt;/code&gt; と同様ですが、文字列と長さのペアの代わりにリテラル文字列を取り、ハッシュパラメータを省略します。</target>
        </trans-unit>
        <trans-unit id="87cafedf7339223e94c98617ca5452de6e823831" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;is_regexp&lt;/code&gt; this function will not be confused by overloading or blessing of the object.</source>
          <target state="translated">同様 &lt;code&gt;is_regexp&lt;/code&gt; この関数オブジェクトのオーバーロードや祝福によって混同されることはありません。</target>
        </trans-unit>
        <trans-unit id="ec33eb3b85c09c1867b94d4c5d38b36ea16437ca" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;newSVpvn&lt;/code&gt; が、リテラルを受け取り &lt;code&gt;NUL&lt;/code&gt; が代わりに文字列/長さのペアの文字列を-末端。</target>
        </trans-unit>
        <trans-unit id="1133f5bdbc277f0a43759c96e6e4a136a1b3e3c6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;newSVpvn&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="6def24d08af466796e4eeead658a36b729d71197" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_flags&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;newSVpvn_flags&lt;/code&gt; が、リテラルを受け取り &lt;code&gt;NUL&lt;/code&gt; が代わりに文字列/長さのペアの文字列を-末端。</target>
        </trans-unit>
        <trans-unit id="abd374fbe3d53f171a59b273311808bb8110bbbb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_flags&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;newSVpvn_flags&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="df1c507c68363b1af9c5557f4eef915d6b55b26a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt; , but takes a &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;newSVpvn_share&lt;/code&gt; と似ていますが、文字列と長さのペアではなく、 &lt;code&gt;NUL&lt;/code&gt; で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="3dd80874ef095a04d51bc5aa179476376e4130b1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair and omits the hash parameter.</source>
          <target state="translated">&lt;code&gt;newSVpvn_share&lt;/code&gt; と似ていますが、文字列/長さのペアではなく、リテラルの &lt;code&gt;NUL&lt;/code&gt; で終了する文字列を受け取り、ハッシュパラメータを省略します。</target>
        </trans-unit>
        <trans-unit id="d6eb188b6893f815d9a8bdb27b5ac56dcb122551" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt;, but takes a &lt;code&gt;NUL&lt;/code&gt;-terminated string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;newSVpvn_share&lt;/code&gt; と同様ですが、文字列と長さのペアではなく、 &lt;code&gt;NUL&lt;/code&gt; で終了する文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="e49fe9b556cc6794a2516353379f67e130b7ce84" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVpvn_share&lt;/code&gt;, but takes a literal string instead of a string/length pair and omits the hash parameter.</source>
          <target state="translated">&lt;code&gt;newSVpvn_share&lt;/code&gt; と同様ですが、文字列と長さのペアの代わりにリテラル文字列を取り、ハッシュパラメータを省略します。</target>
        </trans-unit>
        <trans-unit id="a40e017fad124c7546ce8fa47f9cf471e202cba4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;newSVsv&lt;/code&gt; but does not process get magic.</source>
          <target state="translated">&lt;code&gt;newSVsv&lt;/code&gt; と同様ですが、getmagicを処理しません。</target>
        </trans-unit>
        <trans-unit id="11236bc0b511fb5ce2d7100079100494df2e3d25" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;our $variable&lt;/code&gt;, &lt;code&gt;our sub&lt;/code&gt; creates a lexical alias to the package subroutine of the same name.</source>
          <target state="translated">&lt;code&gt;our $variable&lt;/code&gt; と同様に &lt;code&gt;our sub&lt;/code&gt; は同じ名前のパッケージサブルーチンへの字句エイリアスを作成します。</target>
        </trans-unit>
        <trans-unit id="aa6a38afce596ffe8e2f194c11ba3be9d30f3333" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;pasv_xfer&lt;/code&gt; but the file is stored on the remote server using the STOU command.</source>
          <target state="translated">&lt;code&gt;pasv_xfer&lt;/code&gt; と似ていますが、ファイルはSTOUコマンドを使用してリモートサーバーに保存されます。</target>
        </trans-unit>
        <trans-unit id="7fdced39cfee983640cff74a2b9f6b6a909daee3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;require_ok&lt;/code&gt; , but it will &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; the $module in question and only loads modules, not files.</source>
          <target state="translated">&lt;code&gt;require_ok&lt;/code&gt; と同様ですが、問題の$モジュールを &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 、ファイルではなくモジュールのみをロードします。</target>
        </trans-unit>
        <trans-unit id="8aa98318e2c42a18d337bece9c82948798cd16dd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;require_ok&lt;/code&gt;, but it will &lt;code&gt;use&lt;/code&gt; the $module in question and only loads modules, not files.</source>
          <target state="translated">&lt;code&gt;require_ok&lt;/code&gt; と同様ですが、問題の$ moduleを &lt;code&gt;use&lt;/code&gt; 、ファイルではなくモジュールのみをロードします。</target>
        </trans-unit>
        <trans-unit id="d85e64ea446b94b53e6b0a98b79acffa9e65509e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;savepvn&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;savepvn&lt;/code&gt; が、リテラルを受け取り &lt;code&gt;NUL&lt;/code&gt; が代わりに文字列/長さのペアの文字列を-末端。</target>
        </trans-unit>
        <trans-unit id="ab6359be0dee3e4a9294e68cf9fca3c1e4336929" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;savepvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;savepvn&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="c6f07f68a2d9761eca21ebc3401a1a91fade1e35" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;skip()&lt;/code&gt; , only it will declare the test as failing and TODO. Similar to</source>
          <target state="translated">同様 &lt;code&gt;skip()&lt;/code&gt; 、それだけでは失敗し、TODOとしてテストを宣言します。に似ている</target>
        </trans-unit>
        <trans-unit id="3b33b5f95e762241c8de2a57e4c85b1137e8f8d8" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;skip()&lt;/code&gt;, only it will declare the test as failing and TODO. Similar to</source>
          <target state="translated">&lt;code&gt;skip()&lt;/code&gt; と同様に、それだけがテストの失敗とTODOを宣言します。に似ている</target>
        </trans-unit>
        <trans-unit id="ffb9b95fcba79da2d66d4cd56bc634f774dac146" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;summary()&lt;/code&gt; , but with a lot more detail.</source>
          <target state="translated">&lt;code&gt;summary()&lt;/code&gt; に似ていますが、より詳細になっています。</target>
        </trans-unit>
        <trans-unit id="8ab77eb4986ee757a37bdc02456676abd72f396c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;summary()&lt;/code&gt;, but with a lot more detail.</source>
          <target state="translated">&lt;code&gt;summary()&lt;/code&gt; に似ていますが、より詳細です。</target>
        </trans-unit>
        <trans-unit id="8bc85a8c4d9155e4879660bb0fb6db949fdb86fb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_2pv()&lt;/code&gt; , but doesn't return the length too. You should usually use the macro wrapper &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;sv_2pv()&lt;/code&gt; に似ていますが、長さも返しません。通常、代わりにマクロラッパー &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5f1750e6fee439d6a5d7c30bcaadc82f4b76654a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_2pv()&lt;/code&gt;, but doesn't return the length too. You should usually use the macro wrapper &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;sv_2pv()&lt;/code&gt; と同様ですが、長さも返しません。通常、代わりにマクロラッパー &lt;code&gt;SvPV_nolen(sv)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e28ad4ddf0b006c6eedf3f81dcaf16c9a74e085e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catpv&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="74ec50e9ddcc0b0b4bd0d08a497824bb0da8c599" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpv&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;sv_catpv&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="dbe6953fefa65c174375eefeb7061a1d8d28d608" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catpv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="96301ae15c375b77c0b44d75ba25e64a78136a72" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catpvf&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="d094247c032470d6a00c5c42225cd27f4c338e8b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catpvf&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="8dbd5c1c6aa34bdcc67b11a771b5ad797b082fb9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catpvn&lt;/code&gt; に似ていますが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="52a1bc2daa3eca49de27291192d60d01346616bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;sv_catpvn&lt;/code&gt; 、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="1e9ddae012626cb7e4439d9980907c822af4371b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;sv_catpvn&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="1a2180c80e256d3412ef812a310798be5ad6256e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catpvn&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="8b542066a6f682efb528d954086e468e249dbea7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_catpvn&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="56485c39e91b575f9eb207ecfc300725f3983593" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_flags&lt;/code&gt; , but takes a literal &lt;code&gt;NUL&lt;/code&gt; -terminated string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;sv_catpvn_flags&lt;/code&gt; が、リテラルを受け取り &lt;code&gt;NUL&lt;/code&gt; が代わりに文字列/長さのペアの文字列を-末端。</target>
        </trans-unit>
        <trans-unit id="b8dc77061b45695e2a25d3d8ac47661d896a65ef" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_flags&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_catpvn_flags&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="7f05c96d8dfa46b087685cde4a872c91ee4af9a0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_mg&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;sv_catpvn_mg&lt;/code&gt; 、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="fade09434f240ea70c6ba8138d1c0f20965adbe6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_mg&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_catpvn_mg&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="58d239fc60878c8dca9fcf1e90342df6ee45eef1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_nomg&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_catpvn_nomg&lt;/code&gt; と似ていますが、文字列と長さのペアの代わりにリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="9553515af5d9ec9e4a899f2411b3c5de81d5b4ad" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catpvn_nomg&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_catpvn_nomg&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="8fccee46cd5a2dbdef0b3ef34ed13318240c0cba" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catsv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catsv&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="4126df4d71505019e5bb56c7d0ec65e860e57dbf" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catsv&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;sv_catsv&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="e282341ebef2e50ac8d4be165f9aa0f02c29868c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_catsv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_catsv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="cb27b8554deaad725f9af3d8c8e7188da8e9d19b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_copypv&lt;/code&gt;, but doesn't invoke get magic first.</source>
          <target state="translated">&lt;code&gt;sv_copypv&lt;/code&gt; と同様ですが、最初にgetmagicを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="e046d3517a7992d7d1e0d29443cd29e124206320" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_mortalcopy&lt;/code&gt;, but the extra &lt;code&gt;flags&lt;/code&gt; are passed to the &lt;code&gt;sv_setsv_flags&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv_mortalcopy&lt;/code&gt; と同様ですが、追加の &lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;sv_setsv_flags&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="5d38cbaa11df45cfca68f415fbd38548adbd2370" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setiv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setiv&lt;/code&gt; に似ていますが、「セット」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="123ae4a5c669f8bb24b8cf176b2e86ba9cbfc11d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setiv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setiv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="fb5a47bbf6d640fdec1cfafd760bfcac50991da5" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setnv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setnv&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="5eccffc67f571a8b3181f46b612067a5e6120f2c" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setnv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setnv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="5d50840cdec742cb9632278831faf80f40688dc0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpv&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="c985c9690a312c499374407655b6ef9ec2e3e6e4" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="b56d7c6489caae9851ec3dcbcf0456ce3751a5c3" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpvf&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="e2888cf79b645f5b449d1b4c6efb91b8ec3971c7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpvf&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="cc0fa3335ee153a3cf62cbff610e08349e8ad4b2" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpviv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpviv&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="8d6dbd83d6e02627b8bee537343e41f6ed49077f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpviv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpviv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="60536ff4b89cb5040f19feec4be6721d10632d63" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpvn&lt;/code&gt; に似ていますが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="550ac76e7931e655b1382b031643a9cb5f52950b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;sv_setpvn&lt;/code&gt; 、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="481f4a0f0ab1f9f4574bd5faf772b821ede1d4a1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setpvn&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="c0931cea12270dd86a07ee0a9b6ee1091a8ce19a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_setpvn&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="4532add555cdc643bf47f76523943ddddd111761" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn_mg&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_setpvn_mg&lt;/code&gt; と似ていますが、文字列と長さのペアではなく、リテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="1d27898179a76dbb0e01036ba711d50a1c17a52f" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setpvn_mg&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_setpvn_mg&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="87ab2d21a73ed79e392dc24ffd68bc21b0539241" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setref_pvn&lt;/code&gt; , but takes a literal string instead of a string/length pair.</source>
          <target state="translated">同様 &lt;code&gt;sv_setref_pvn&lt;/code&gt; 、代わりに文字列/長さのペアの文字列リテラルを取ります。</target>
        </trans-unit>
        <trans-unit id="9100e36266ee96c2294edf8f453c2726c48b65aa" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setref_pvn&lt;/code&gt;, but takes a literal string instead of a string/length pair.</source>
          <target state="translated">&lt;code&gt;sv_setref_pvn&lt;/code&gt; と同様ですが、文字列と長さのペアではなくリテラル文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="ab2af716b65ba49b4f611a8f9a63df24afbfd34e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setsv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setsv&lt;/code&gt; と同様ですが、「セット」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="029cf42c4714d829664184f54a69a5ea13d859b0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setsv&lt;/code&gt; but doesn't process magic.</source>
          <target state="translated">同様 &lt;code&gt;sv_setsv&lt;/code&gt; が、魔法を処理しません。</target>
        </trans-unit>
        <trans-unit id="45071495c613f505020d1cfedfcf720566ba6c27" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setsv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setsv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="bae58ef52e0fd2638f20a33b2c2ee3d70d45b7c9" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setuv&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setuv&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="6cf4c4e06956eb2dfc680c6ee569d41126786590" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_setuv&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_setuv&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="edc41b001c50d7d45a00cf8022d9c1f06a67020a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_usepvn&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_usepvn&lt;/code&gt; に似ていますが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="00375d68772b5a6b2aa4d91a6b9d96252b296a38" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_usepvn&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_usepvn&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="c48c5ccb5f58e5511c541b8f7b2bd77d2574234d" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_downgrade&lt;/code&gt;, but does not process get magic on &lt;code&gt;sv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv_utf8_downgrade&lt;/code&gt; と同様ですが、 &lt;code&gt;sv&lt;/code&gt; でgetmagicを処理しません。</target>
        </trans-unit>
        <trans-unit id="a19779d3638b6a1460d46c2178e7d9265d9957c6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_downgrade&lt;/code&gt;, but with additional &lt;code&gt;flags&lt;/code&gt;. If &lt;code&gt;flags&lt;/code&gt; has &lt;code&gt;SV_GMAGIC&lt;/code&gt; bit set, processes get magic on &lt;code&gt;sv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv_utf8_downgrade&lt;/code&gt; と似ていますが、 &lt;code&gt;flags&lt;/code&gt; が追加されています。 &lt;code&gt;flags&lt;/code&gt; に &lt;code&gt;SV_GMAGIC&lt;/code&gt; ビットが設定されている場合、プロセスは &lt;code&gt;sv&lt;/code&gt; で魔法を取得します。</target>
        </trans-unit>
        <trans-unit id="3ca37005148896df7fa5618334163dda55501b5e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_upgrade&lt;/code&gt;, but doesn't do magic on &lt;code&gt;sv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv_utf8_upgrade&lt;/code&gt; と同様ですが、 &lt;code&gt;sv&lt;/code&gt; では魔法を実行しません。</target>
        </trans-unit>
        <trans-unit id="9b4a9fe99bea434f521ad5e3db444369a722ea86" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt;, but has an additional parameter &lt;code&gt;extra&lt;/code&gt;, which is the number of unused bytes the string of &lt;code&gt;sv&lt;/code&gt; is guaranteed to have free after it upon return. This allows the caller to reserve extra space that it intends to fill, to avoid extra grows.</source>
          <target state="translated">&lt;code&gt;sv_utf8_upgrade_flags&lt;/code&gt; と同様ですが、追加のパラメーター &lt;code&gt;extra&lt;/code&gt; があります。これは、 &lt;code&gt;sv&lt;/code&gt; の文字列が戻った後、解放されることが保証されている未使用のバイト数です。これにより、呼び出し元は、余分な増加を回避するために、埋めようとしている余分なスペースを予約できます。</target>
        </trans-unit>
        <trans-unit id="4287363f537b02349404ef50aa3650a2da519053" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vcatpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_vcatpvf&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="07a25ef8f06b26f172176af25178325ccea0a52b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vcatpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_vcatpvf&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="14adf015575fe99f6c00f91da82a21970e20b8bd" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vsetpvf&lt;/code&gt; , but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_vsetpvf&lt;/code&gt; と同様ですが、「設定」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="c99a7a12d3c14e8e4681f2d062967a1eb814fa0a" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sv_vsetpvf&lt;/code&gt;, but also handles 'set' magic.</source>
          <target state="translated">&lt;code&gt;sv_vsetpvf&lt;/code&gt; と同様ですが、「set」マジックも処理します。</target>
        </trans-unit>
        <trans-unit id="b383c55580a503d9f345eddab42a79557f296499" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;system&lt;/code&gt;, backticks put the child process exit code in &lt;code&gt;$?&lt;/code&gt;. If you'd like to manually inspect failure, you can check all possible failure modes by inspecting &lt;code&gt;$?&lt;/code&gt; like this:</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; と同様に、バックティックは子プロセスの終了コードを &lt;code&gt;$?&lt;/code&gt; 。手動で障害を検査したい場合は、 &lt;code&gt;$?&lt;/code&gt; を検査することで考えられるすべての障害モードを確認できます。このような：</target>
        </trans-unit>
        <trans-unit id="d4ce5b4a9c5792e4e3d807965bc2f0706dc489a6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;todo()&lt;/code&gt; but only returns the value of &lt;code&gt;$TODO&lt;/code&gt; ignoring &lt;code&gt;todo_start()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;todo()&lt;/code&gt; に似ていますが、 &lt;code&gt;todo_start()&lt;/code&gt; を無視して &lt;code&gt;$TODO&lt;/code&gt; の値のみを返します。</target>
        </trans-unit>
        <trans-unit id="56964d94313ff89750dbfac18fe4fbc021ee2504" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;todo()&lt;/code&gt; but only returns the value of &lt;code&gt;$TODO&lt;/code&gt; ignoring &lt;code&gt;todo_start()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;todo()&lt;/code&gt; と同様ですが、 &lt;code&gt;todo_start()&lt;/code&gt; を無視して &lt;code&gt;$TODO&lt;/code&gt; の値のみを返します。</target>
        </trans-unit>
        <trans-unit id="7c255f9b56f3d7d5035702059d9768bd0f276412" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::enabled&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="translated">&lt;code&gt;warnings::enabled&lt;/code&gt; と同様ですが、$ levelは正確な呼び出しフレームを指定し、0が直接の呼び出し元です。</target>
        </trans-unit>
        <trans-unit id="908551960f131fd786c42f778071d30b61bb4476" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::fatal_enabled&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="translated">&lt;code&gt;warnings::fatal_enabled&lt;/code&gt; と同様ですが、$ levelは正確な呼び出しフレームを指定し、0が直接の呼び出し元です。</target>
        </trans-unit>
        <trans-unit id="0a7a76c841e5f7c9a4c21b318b86a7b486c96e50" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::warn&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="translated">&lt;code&gt;warnings::warn&lt;/code&gt; と同様ですが、$ levelは正確な呼び出しフレームを指定し、0が直接の呼び出し元です。</target>
        </trans-unit>
        <trans-unit id="3a2a4468163a8d06d15e520d4c62bc8d67e5d7bc" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;warnings::warnif&lt;/code&gt;, but $level specifies the exact call frame, 0 being the immediate caller.</source>
          <target state="translated">&lt;code&gt;warnings::warnif&lt;/code&gt; と同様ですが、$ levelは正確な呼び出しフレームを指定し、0が直接の呼び出し元です。</target>
        </trans-unit>
        <trans-unit id="824220de4c99cc183f3e468cfbca9236675ff6fd" translate="yes" xml:space="preserve">
          <source>Like C, Perl does a certain amount of expression evaluation at compile time whenever it determines that all arguments to an operator are static and have no side effects. In particular, string concatenation happens at compile time between literals that don't do variable substitution. Backslash interpolation also happens at compile time. You can say</source>
          <target state="translated">C言語と同様に、Perlは、演算子へのすべての引数が静的で副作用がないと判断した場合には、コンパイル時に一定量の式の評価を行います。特に、文字列の連結はコンパイル時に変数置換を行わないリテラル間で行われます。バックスラッシュ補間もコンパイル時に行われます。以下のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="13593327ac22cf57826e7691f4f7f418be9cc890" translate="yes" xml:space="preserve">
          <source>Like CPAN::Bundle::inst_file, but returns the $VERSION</source>
          <target state="translated">CPAN::Bundle::inst_file と似ていますが、$VERSION を返します。</target>
        </trans-unit>
        <trans-unit id="180b470a6637521531543b80ac419cbc37898af4" translate="yes" xml:space="preserve">
          <source>Like Open3 but without STDERR capture.</source>
          <target state="translated">Open3と似ていますが、STDERRキャプチャーはありません。</target>
        </trans-unit>
        <trans-unit id="2a63fd6efd31d5a247539ef7d4f8ae9b22c58256" translate="yes" xml:space="preserve">
          <source>Like PERLPREFIX, but only for the site install locations.</source>
          <target state="translated">PERLPREFIXと同じように、サイトのインストール場所にのみ。</target>
        </trans-unit>
        <trans-unit id="991d27f54f9be6d1ccfe86b4d87c281614bb46a9" translate="yes" xml:space="preserve">
          <source>Like PERLPREFIX, but only for the vendor install locations.</source>
          <target state="translated">PERLPREFIXと同じように、ベンダーのインストール先のみ。</target>
        </trans-unit>
        <trans-unit id="3763cf6a811e93d689892e612d95e5287de00f17" translate="yes" xml:space="preserve">
          <source>Like PERLRUN, except it uses FULLPERL.</source>
          <target state="translated">PERLRUNのように、FULLPERLを使用していることを除いては、PERLRUNと同じです。</target>
        </trans-unit>
        <trans-unit id="8dff3350726fa7fbd1b6410bcef4d0a73c7217e0" translate="yes" xml:space="preserve">
          <source>Like PERLRUNINST, except it uses FULLPERL.</source>
          <target state="translated">PERLRUNINSTのように、FULLPERLを使用している点を除いては、PERLRUNINSTと同じです。</target>
        </trans-unit>
        <trans-unit id="5841126e64b3c89df76665c26ca814c87d8e1ffb" translate="yes" xml:space="preserve">
          <source>Like PREFIX, it sets several INSTALL* attributes at once. Unlike PREFIX it is easy to predict where the module will end up. The installation pattern looks like this:</source>
          <target state="translated">PREFIXと同様に、複数のINSTALL*属性を一度に設定します。PREFIXとは異なり、モジュールがどこで終わるかを簡単に予測することができます。インストールパターンは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3eac640353c06a496dbb32cf64186b352fd16578" translate="yes" xml:space="preserve">
          <source>Like T_REFREF, except it does strict type checking (inheritance is not supported).</source>
          <target state="translated">T_REFREFと同様に、厳密な型チェックを行う点を除いては、T_REFREFと同じです(継承はサポートされていません)。</target>
        </trans-unit>
        <trans-unit id="b94e5c472f080d505351ce0495c57a8957e2a984" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt; . Checks if &lt;code&gt;$got == $expected&lt;/code&gt; . This is the numeric version.</source>
          <target state="translated">Test :: More's &lt;code&gt;is()&lt;/code&gt; のように。 &lt;code&gt;$got == $expected&lt;/code&gt; かどうかを確認します。これは数値バージョンです。</target>
        </trans-unit>
        <trans-unit id="cc96ef3fc2347f9c271af1895e169a768a31a74a" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt; . Checks if &lt;code&gt;$got eq $expected&lt;/code&gt; . This is the string version.</source>
          <target state="translated">Test :: More's &lt;code&gt;is()&lt;/code&gt; のように。 &lt;code&gt;$got eq $expected&lt;/code&gt; かどうかを確認します。これは文字列バージョンです。</target>
        </trans-unit>
        <trans-unit id="17f62623a10758c4c3b6761435cb5075609a1791" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt;. Checks if &lt;code&gt;$got == $expected&lt;/code&gt;. This is the numeric version.</source>
          <target state="translated">Test :: Moreの &lt;code&gt;is()&lt;/code&gt; のように。 &lt;code&gt;$got == $expected&lt;/code&gt; かどうかを確認します。これは数値バージョンです。</target>
        </trans-unit>
        <trans-unit id="ef9447f392d01121cd67915dc61b0ec4cea9fd56" translate="yes" xml:space="preserve">
          <source>Like Test::More's &lt;code&gt;is()&lt;/code&gt;. Checks if &lt;code&gt;$got eq $expected&lt;/code&gt;. This is the string version.</source>
          <target state="translated">Test :: Moreの &lt;code&gt;is()&lt;/code&gt; のように。 &lt;code&gt;$got eq $expected&lt;/code&gt; かどうかを確認します。これは文字列バージョンです。</target>
        </trans-unit>
        <trans-unit id="f7f7c9b4de7f16b968c9df459ba87fa3286f45be" translate="yes" xml:space="preserve">
          <source>Like UTF-8, UTF-16 is a variable-width encoding, but where UTF-8 uses 8-bit code units, UTF-16 uses 16-bit code units. All code points occupy either 2 or 4 bytes in UTF-16: code points &lt;code&gt;U+0000..U+FFFF&lt;/code&gt; are stored in a single 16-bit unit, and code points &lt;code&gt;U+10000..U+10FFFF&lt;/code&gt; in two 16-bit units. The latter case is using</source>
          <target state="translated">UTF-8と同様に、UTF-16は可変幅エンコーディングですが、UTF-8が8ビットのコード単位を使用する場合、UTF-16は16ビットのコード単位を使用します。すべてのコードポイントは、UTF-16で2バイトまたは4バイトを占有します。コードポイント &lt;code&gt;U+0000..U+FFFF&lt;/code&gt; は、単一の16ビット単位で格納され、コードポイント &lt;code&gt;U+10000..U+10FFFF&lt;/code&gt; は、2つの16ビットで格納されます。単位。後者の場合は</target>
        </trans-unit>
        <trans-unit id="8dbb04c45e23e298185620fabadd06b7455bdd6a" translate="yes" xml:space="preserve">
          <source>Like UTF-8, but EBCDIC-safe, in the way that UTF-8 is ASCII-safe. This means that all the basic characters (which includes all those that have ASCII equivalents (like &lt;code&gt;&quot;A&quot;&lt;/code&gt; , &lt;code&gt;&quot;0&quot;&lt;/code&gt; , &lt;code&gt;&quot;%&quot;&lt;/code&gt; ,</source>
          <target state="translated">UTF-8と同様ですが、EBCDICセーフですが、UTF-8はASCIIセーフです。つまり、すべての基本的な文字（ASCIIに対応するすべての文字（ &lt;code&gt;&quot;A&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;0&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;%&quot;&lt;/code&gt; など）が含まれます。</target>
        </trans-unit>
        <trans-unit id="e6170cafe214afdbb40c4ffbbff65c6aeebd0ba1" translate="yes" xml:space="preserve">
          <source>Like UTF-8, but EBCDIC-safe, in the way that UTF-8 is ASCII-safe. This means that all the basic characters (which includes all those that have ASCII equivalents (like &lt;code&gt;&quot;A&quot;&lt;/code&gt;, &lt;code&gt;&quot;0&quot;&lt;/code&gt;, &lt;code&gt;&quot;%&quot;&lt;/code&gt;,</source>
          <target state="translated">UTF-8と同様ですが、UTF-8がASCIIセーフであるという点で、EBCDICセーフです。これは、すべての基本文字（ASCIIに相当する文字（ &lt;code&gt;&quot;A&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;0&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;%&quot;&lt;/code&gt; など）を含むすべての文字を含む</target>
        </trans-unit>
        <trans-unit id="6834a3fade58397a1a46bf4fd2e951ded5a49d5e" translate="yes" xml:space="preserve">
          <source>Like a forked process, but without &lt;b&gt;fork&lt;/b&gt;&amp;rsquo;s inherent memory protection. A thread is lighter weight than a full process, in that a process could have multiple threads running around in it, all fighting over the same process&amp;rsquo;s memory space unless steps are taken to protect threads from one another.</source>
          <target state="translated">フォークされたプロセスに似ていますが、&lt;b&gt;フォーク&lt;/b&gt;の固有のメモリ保護はありません。スレッドは、プロセス全体で複数のスレッドが実行される可能性があるという点で、完全なプロセスよりも軽量です。スレッドを相互に保護するための手順を実行しない限り、すべてが同じプロセスのメモリ空間を争います。</target>
        </trans-unit>
        <trans-unit id="78469c56db0b66e6f31da051cfaed2326cdc6d30" translate="yes" xml:space="preserve">
          <source>Like all Perl character operations, &lt;a href=&quot;#length-EXPR&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; normally deals in logical characters, not physical bytes. For how many bytes a string encoded as UTF-8 would take up, use &lt;code&gt;length(Encode::encode('UTF-8', EXPR))&lt;/code&gt; (you'll have to &lt;code&gt;use Encode&lt;/code&gt; first). See &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">すべてのPerl文字操作と同様に、&lt;a href=&quot;#length-EXPR&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;は通常、物理バイトではなく論理文字を扱います。UTF-8としてエンコードされた文字列が占めるバイト数については、 &lt;code&gt;length(Encode::encode('UTF-8', EXPR))&lt;/code&gt; を &lt;code&gt;use Encode&lt;/code&gt; 最初にEncodeを使用する必要があります）。&lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5e2266dcab58f5b4cb8dc0bb09fd899c041599a2" translate="yes" xml:space="preserve">
          <source>Like all Perl character operations, length() normally deals in logical characters, not physical bytes. For how many bytes a string encoded as UTF-8 would take up, use &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; (you'll have to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; first). See &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">すべてのPerl文字操作と同様に、length（）は通常、物理バイトではなく論理文字を扱います。 UTF-8としてエンコードされた文字列が占めるバイト数については、 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; 最初にEncodeを使用する必要があります）。&lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78626057c138b9f0db027cda4d5b95c4d7adde63" translate="yes" xml:space="preserve">
          <source>Like all Perl character operations, length() normally deals in logical characters, not physical bytes. For how many bytes a string encoded as UTF-8 would take up, use &lt;code&gt;&lt;a href=&quot;length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; (you'll have to &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; first). See &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;../perlunicode&quot;&gt;perlunicode&lt;/a&gt;.</source>
          <target state="translated">すべてのPerl文字操作と同様に、length（）は通常、物理バイトではなく論理文字を扱います。 UTF-8としてエンコードされた文字列が占めるバイト数については、 &lt;code&gt;&lt;a href=&quot;length&quot;&gt;length(Encode::encode_utf8(EXPR))&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; Encode&lt;/code&gt; 最初にEncodeを使用する必要があります）。&lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt;および&lt;a href=&quot;../perlunicode&quot;&gt;perlunicodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b262f2d7a83664abc258a4d3c715339214f8a1b0" translate="yes" xml:space="preserve">
          <source>Like chapters in many books, all top-level Perl source files (along with a few others here and there) begin with an epigrammatic inscription that alludes, indirectly and metaphorically, to the material you're about to read.</source>
          <target state="translated">多くの本の章のように、すべてのトップレベルの Perl ソースファイルは (あちこちにある他のいくつかのファイルと一緒に)あなたが読もうとしている内容を間接的に、そして比喩的に暗示しているエピグラム的な碑文で始まります。</target>
        </trans-unit>
        <trans-unit id="c0d2dcb20ae20f18b840f20ba286a29e5869333a" translate="yes" xml:space="preserve">
          <source>Like config_sh() but returns, as a list, only the config entries who's names match the $regex.</source>
          <target state="translated">config_sh()と似ていますが、名前が $regex に一致する設定項目だけをリストとして返します。</target>
        </trans-unit>
        <trans-unit id="f227f0321acaa416e145c904a4d8ec45847b8d64" translate="yes" xml:space="preserve">
          <source>Like expand, but returns objects of the appropriate type, i.e. CPAN::Bundle objects for bundles, CPAN::Module objects for modules, and CPAN::Distribution objects for distributions. Note: it does not expand to CPAN::Author objects.</source>
          <target state="translated">例えば、バンドルの場合はCPAN::Bundleオブジェクト、モジュールの場合はCPAN::Moduleオブジェクト、ディストリビューションの場合はCPAN::Distributionオブジェクトなどです。注意:CPAN::Authorオブジェクトには展開されません。</target>
        </trans-unit>
        <trans-unit id="7987e14ecfb530ef395d93bea0916098ba25cf44" translate="yes" xml:space="preserve">
          <source>Like many OO interfaces, the new() method is used to initialize version objects. If two arguments are passed to &lt;code&gt;new()&lt;/code&gt;, the &lt;b&gt;second&lt;/b&gt; one will be used as if it were prefixed with &quot;v&quot;. This is to support historical use of the &lt;code&gt;qw&lt;/code&gt; operator with the CVS variable $Revision, which is automatically incremented by CVS every time the file is committed to the repository.</source>
          <target state="translated">多くのOOインターフェースと同様に、new（）メソッドはバージョンオブジェクトを初期化するために使用されます。2つの引数が &lt;code&gt;new()&lt;/code&gt; に渡されると、&lt;b&gt;2番目の&lt;/b&gt;引数は接頭辞「v」が付いているかのように使用されます。これは、ファイルがリポジトリにコミットされるたびにCVSによって自動的にインクリメントされるCVS変数$ Revisionでの &lt;code&gt;qw&lt;/code&gt; 演算子の履歴使用をサポートするためです。</target>
        </trans-unit>
        <trans-unit id="f385d834d0c261050be5f51ac316a9238769d175" translate="yes" xml:space="preserve">
          <source>Like many languages, Perl provides for user-defined subroutines. These may be located anywhere in the main program, loaded in from other files via the &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; keywords, or generated on the fly using &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or anonymous subroutines. You can even call a function indirectly using a variable containing its name or a CODE reference.</source>
          <target state="translated">多くの言語と同様に、Perlはユーザー定義のサブルーチンを提供します。これらは、メインプログラムの任意の場所に配置したり、 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、またはキーワードを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; して他のファイルからロードしたり、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; または匿名のサブルーチンを使用してオンザフライで生成したりできます。名前またはCODE参照を含む変数を使用して、関数を間接的に呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="fa955621946321cd50075e261d09e1a7c92c1f08" translate="yes" xml:space="preserve">
          <source>Like many languages, Perl provides for user-defined subroutines. These may be located anywhere in the main program, loaded in from other files via the &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or &lt;code&gt;use&lt;/code&gt; keywords, or generated on the fly using &lt;code&gt;eval&lt;/code&gt; or anonymous subroutines. You can even call a function indirectly using a variable containing its name or a CODE reference.</source>
          <target state="translated">多くの言語と同様に、Perlはユーザー定義のサブルーチンを提供します。これらは、メインプログラムの任意の場所に配置するか、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、または &lt;code&gt;use&lt;/code&gt; キーワードを介して他のファイルからロードするか、 &lt;code&gt;eval&lt;/code&gt; またはanonymousサブルーチンを使用してオンザフライで生成できます。名前またはCODE参照を含む変数を使用して、間接的に関数を呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="bff1e677a357242f787d00ffe6b33170f4a5ab49" translate="yes" xml:space="preserve">
          <source>Like most routines, returns a true value if successful and a false value [and sets &lt;code&gt;$^E&lt;/code&gt; and &lt;code&gt;regLastError()&lt;/code&gt;] on failure.</source>
          <target state="translated">ほとんどのルーチンと同様に、成功した場合はtrue値を返し、失敗した場合はfalse値を返します[そして &lt;code&gt;$^E&lt;/code&gt; と &lt;code&gt;regLastError()&lt;/code&gt; を設定します]。</target>
        </trans-unit>
        <trans-unit id="a3bb042c0a5ea5166342c8b0ad6d2f8a2141fbc4" translate="yes" xml:space="preserve">
          <source>Like octal escapes, there are two forms of hexadecimal escapes, but both start with the sequence &lt;code&gt;\x&lt;/code&gt; . This is followed by either exactly two hexadecimal digits forming a number, or a hexadecimal number of arbitrary length surrounded by curly braces. The hexadecimal number is the code point of the character you want to express.</source>
          <target state="translated">8進エスケープと同様に、16進エスケープには2つの形式がありますが、どちらもシーケンス &lt;code&gt;\x&lt;/code&gt; 始まります。これに続いて、正確に2つの16進数が数字を形成するか、中括弧で囲まれた任意の長さの16進数が続きます。16進数は、表現する文字のコードポイントです。</target>
        </trans-unit>
        <trans-unit id="8a3985e9eb051df5a5554fc58d279011c3ff1a77" translate="yes" xml:space="preserve">
          <source>Like octal escapes, there are two forms of hexadecimal escapes, but both start with the sequence &lt;code&gt;\x&lt;/code&gt;. This is followed by either exactly two hexadecimal digits forming a number, or a hexadecimal number of arbitrary length surrounded by curly braces. The hexadecimal number is the code point of the character you want to express.</source>
          <target state="translated">8進数のエスケープと同様に、16進数のエスケープには2つの形式がありますが、どちらもシーケンス &lt;code&gt;\x&lt;/code&gt; 始まります。この後に、数字を形成する正確に2つの16進数、または中括弧で囲まれた任意の長さの16進数が続きます。16進数は、表現したい文字のコードポイントです。</target>
        </trans-unit>
        <trans-unit id="ea93e43cdaa94011eb7f20af4624fc89df3b75e2" translate="yes" xml:space="preserve">
          <source>Like other pragmas (&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; , for example), features have a lexical effect. &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature qw(foo)&lt;/code&gt; will only make the feature &quot;foo&quot; available from that point to the end of the enclosing block.</source>
          <target state="translated">他のプラグマ（たとえば &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用）&lt;/a&gt;と同様に、機能には字句上の効果があります。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature qw(foo)&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;すると、機能 &quot;foo&quot;はそのポイントからそれを囲むブロックの最後までのみ使用可能になります。</target>
        </trans-unit>
        <trans-unit id="60f22d4af04544396e97c0fdb822358710ad0090" translate="yes" xml:space="preserve">
          <source>Like other pragmas (&lt;code&gt;use strict&lt;/code&gt;, for example), features have a lexical effect. &lt;code&gt;use feature qw(foo)&lt;/code&gt; will only make the feature &quot;foo&quot; available from that point to the end of the enclosing block.</source>
          <target state="translated">他のプラグマ（たとえば、 &lt;code&gt;use strict&lt;/code&gt; と同様に、機能には字句効果があります。 &lt;code&gt;use feature qw(foo)&lt;/code&gt; を使用すると、そのポイントから囲んでいるブロックの終わりまで機能「foo」のみが使用可能になります。</target>
        </trans-unit>
        <trans-unit id="e331233743ae8af2fc425fe1e46364f44f02fcf9" translate="yes" xml:space="preserve">
          <source>Like property names, there is typically at least a short name for each such property-value, and a long name. If you know any name of the property-value (which you can get by &lt;a href=&quot;#prop_values%28%29&quot;&gt;&quot;prop_values()&quot;&lt;/a&gt;, you can use &lt;code&gt;prop_value_aliases&lt;/code&gt;() to get the long name (when called in scalar context), or a list of all the names, with the short name in the 0th element, the long name in the next element, and any other synonyms in the remaining elements, in no particular order, except that any all-numeric synonyms will be last.</source>
          <target state="translated">プロパティ名と同様に、通常、そのようなプロパティ値ごとに少なくとも短い名前と長い名前があります。プロパティ値の名前（&lt;a href=&quot;#prop_values%28%29&quot;&gt;「prop_values（）」&lt;/a&gt;で取得できます）が &lt;code&gt;prop_value_aliases&lt;/code&gt; 場合は、prop_value_aliases（）を使用して、長い名前（スカラーコンテキストで呼び出された場合）またはすべての名前のリストを取得できます。0番目の要素の短い名前、次の要素の長い名前、および残りの要素のその他の同義語。すべて数値の同義語が最後になることを除いて、特定の順序はありません。</target>
        </trans-unit>
        <trans-unit id="f84dcad78456fba45a7cd86383d5b5d51df6ab7d" translate="yes" xml:space="preserve">
          <source>Like property names, there is typically at least a short name for each such property-value, and a long name. If you know any name of the property-value (which you can get by &lt;a href=&quot;#prop_values()&quot;&gt;prop_values()&lt;/a&gt;, you can use &lt;code&gt;prop_value_aliases&lt;/code&gt; () to get the long name (when called in scalar context), or a list of all the names, with the short name in the 0th element, the long name in the next element, and any other synonyms in the remaining elements, in no particular order, except that any all-numeric synonyms will be last.</source>
          <target state="translated">プロパティ名と同様に、通常、プロパティ値ごとに少なくとも短い名前と長い名前があります。あなたがで得ることができますプロパティ値の任意の名前（わかっている場合&lt;a href=&quot;#prop_values()&quot;&gt;prop_valuesを（）&lt;/a&gt;は、使用することができます &lt;code&gt;prop_value_aliases&lt;/code&gt; を短くして、スカラーコンテキストで呼び出され、長い名前（）、またはすべての名前のリストを取得するために）（すべての数値の同義語が最後になることを除いて、0番目の要素の名前、次の要素のロングネーム、および残りの要素のその他の同義語。順不同。</target>
        </trans-unit>
        <trans-unit id="199b34f10e1b7c8e7aa443166b2eaa7617b87f12" translate="yes" xml:space="preserve">
          <source>Like sv_copypv, but doesn't invoke get magic first.</source>
          <target state="translated">sv_copypv と似ていますが、最初に get magic を起動しません。</target>
        </trans-unit>
        <trans-unit id="fa3c089315a35ab69068f31035a53de1242b1f4a" translate="yes" xml:space="preserve">
          <source>Like sv_utf8_upgrade, but doesn't do magic on &lt;code&gt;sv&lt;/code&gt; .</source>
          <target state="translated">sv_utf8_upgradeに似ていますが、 &lt;code&gt;sv&lt;/code&gt; で魔法をかけません。</target>
        </trans-unit>
        <trans-unit id="491235f5863c419144ac401911f4034bbb235829" translate="yes" xml:space="preserve">
          <source>Like sv_utf8_upgrade_flags, but has an additional parameter &lt;code&gt;extra&lt;/code&gt; , which is the number of unused bytes the string of 'sv' is guaranteed to have free after it upon return. This allows the caller to reserve extra space that it intends to fill, to avoid extra grows.</source>
          <target state="translated">sv_utf8_upgrade_flagsに似ていますが、追加のパラメーター &lt;code&gt;extra&lt;/code&gt; があります。これは、「sv」の文字列が返された後に解放されることが保証されている未使用のバイト数です。これにより、呼び出し元は、余分な拡張を回避するために、埋める予定の余分なスペースを予約できます。</target>
        </trans-unit>
        <trans-unit id="b473e807de38ef5585564f3999d8d88c0c2f9ac9" translate="yes" xml:space="preserve">
          <source>Like the</source>
          <target state="translated">のような</target>
        </trans-unit>
        <trans-unit id="1ec8b78d751f8503bdfc1aa5c17c2c7732f46241" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;#%28%3Fadlupimnsx-imnsx%29&quot;&gt;&quot;(?adlupimnsx-imnsx)&quot;&lt;/a&gt; construct, &lt;code&gt;aa&lt;/code&gt; and &lt;code&gt;&quot;a&quot;&lt;/code&gt; override each other, as do &lt;code&gt;xx&lt;/code&gt; and &lt;code&gt;&quot;x&quot;&lt;/code&gt;. They are not additive. So, doing something like &lt;code&gt;(?xx-x:foo)&lt;/code&gt; turns off all &lt;code&gt;&quot;x&quot;&lt;/code&gt; behavior for matching &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#%28%3Fadlupimnsx-imnsx%29&quot;&gt;「（？adlupimnsx-imnsx）」&lt;/a&gt;コンストラクトと同様に、 &lt;code&gt;aa&lt;/code&gt; と &lt;code&gt;&quot;a&quot;&lt;/code&gt; は、 &lt;code&gt;xx&lt;/code&gt; と &lt;code&gt;&quot;x&quot;&lt;/code&gt; と同様に相互にオーバーライドします。それらは相加的ではありません。したがって、 &lt;code&gt;(?xx-x:foo)&lt;/code&gt; のようなことを行うと、 &lt;code&gt;foo&lt;/code&gt; に一致するすべての &lt;code&gt;&quot;x&quot;&lt;/code&gt; 動作がオフになります。</target>
        </trans-unit>
        <trans-unit id="8e09e117230303a3e7e1540483add81bffa29662" translate="yes" xml:space="preserve">
          <source>Like the &lt;a href=&quot;#Unicode-Properties&quot;&gt;Unicode properties&lt;/a&gt;, most of the POSIX properties match the same regardless of whether case-insensitive (&lt;code&gt;/i&lt;/code&gt;) matching is in effect or not. The two exceptions are &lt;code&gt;[:upper:]&lt;/code&gt; and &lt;code&gt;[:lower:]&lt;/code&gt;. Under &lt;code&gt;/i&lt;/code&gt;, they each match the union of &lt;code&gt;[:upper:]&lt;/code&gt; and &lt;code&gt;[:lower:]&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Unicode-Properties&quot;&gt;Unicodeプロパティ&lt;/a&gt;と同様に、ほとんどのPOSIXプロパティは、大文字と小文字を区別しない（ &lt;code&gt;/i&lt;/code&gt; ）マッチングが有効かどうかに関係なく、同じように一致します。2つの例外は &lt;code&gt;[:upper:]&lt;/code&gt; と &lt;code&gt;[:lower:]&lt;/code&gt; です。下の &lt;code&gt;/i&lt;/code&gt; 、彼ら各試合の労働組合 &lt;code&gt;[:upper:]&lt;/code&gt; と &lt;code&gt;[:lower:]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56e82ac0ce55d077dfdc075b06ddac56ad8fd05e" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; operator, if a &lt;code&gt;readline&lt;/code&gt; expression is used as the condition of a &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; loop, then it will be implicitly assigned to &lt;code&gt;$_&lt;/code&gt;. If either a &lt;code&gt;readline&lt;/code&gt; expression or an explicit assignment of a &lt;code&gt;readline&lt;/code&gt; expression to a scalar is used as a &lt;code&gt;while&lt;/code&gt;/&lt;code&gt;for&lt;/code&gt; condition, then the condition actually tests for definedness of the expression's value, not for its regular truth value.</source>
          <target state="translated">&lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; 演算子と同様に、 &lt;code&gt;readline&lt;/code&gt; 式が &lt;code&gt;while&lt;/code&gt; または &lt;code&gt;for&lt;/code&gt; ループの条件として使用される場合、暗黙的に &lt;code&gt;$_&lt;/code&gt; 割り当てられます。いずれかの場合 &lt;code&gt;readline&lt;/code&gt; 発現または明示的に割り当て &lt;code&gt;readline&lt;/code&gt; のスカラへの表現として使用されて &lt;code&gt;while&lt;/code&gt; / &lt;code&gt;for&lt;/code&gt; の条件、条件は実際にはない、その定期的な真理値のために、式の値の定義済みかをテストします。</target>
        </trans-unit>
        <trans-unit id="2bf3175a68d636ecf9925b34e6ff6a44a156b660" translate="yes" xml:space="preserve">
          <source>Like the existing DBM Filter functionality, this module arranges for the &lt;code&gt;$_&lt;/code&gt; variable to be populated with the key or value that a filter will check. This usually means that most DBM filters tend to be very short.</source>
          <target state="translated">既存のDBMフィルター機能と同様に、このモジュールは &lt;code&gt;$_&lt;/code&gt; 変数に、フィルターがチェックするキーまたは値を入力するように調整します。これは通常、ほとんどのDBMフィルターが非常に短くなる傾向があることを意味します。</target>
        </trans-unit>
        <trans-unit id="2aa9d0e9009ba5b1538c8cb1249a579d95be7bcd" translate="yes" xml:space="preserve">
          <source>Like the flattened incoming parameter list, the return list is also flattened on return. So all you have managed to do here is stored everything in &lt;code&gt;@a&lt;/code&gt; and made &lt;code&gt;@b&lt;/code&gt; empty. See &lt;a href=&quot;#Pass-by-Reference&quot;&gt;&quot;Pass by Reference&quot;&lt;/a&gt; for alternatives.</source>
          <target state="translated">フラット化された着信パラメータリストと同様に、リターンリストもリターン時にフラット化されます。だから、すべてあなたがここに行うために管理しているのすべてを格納している &lt;code&gt;@a&lt;/code&gt; と作ら &lt;code&gt;@b&lt;/code&gt; は空。代替案については、&lt;a href=&quot;#Pass-by-Reference&quot;&gt;「&lt;/a&gt;参照渡し」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3cce6c08fa97ca0be477f0721fb283a52d10b11" translate="yes" xml:space="preserve">
          <source>Like the flattened incoming parameter list, the return list is also flattened on return. So all you have managed to do here is stored everything in &lt;code&gt;@a&lt;/code&gt; and made &lt;code&gt;@b&lt;/code&gt; empty. See &lt;a href=&quot;#Pass-by-Reference&quot;&gt;Pass by Reference&lt;/a&gt; for alternatives.</source>
          <target state="translated">平坦化された入力パラメーターリストと同様に、戻り値リストも戻り時に平坦化されます。だから、すべてあなたがここに行うために管理しているのすべてを格納している &lt;code&gt;@a&lt;/code&gt; と作ら &lt;code&gt;@b&lt;/code&gt; は空。別の方法については、参照&lt;a href=&quot;#Pass-by-Reference&quot;&gt;渡しを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="afd075e21a0c597db0ab2821856e88ceb5961fd6" translate="yes" xml:space="preserve">
          <source>Like the normal &lt;code&gt;&lt;a href=&quot;../functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt;, except it reports according to your &lt;code&gt;level()&lt;/code&gt; .</source>
          <target state="translated">通常の &lt;code&gt;&lt;a href=&quot;../functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; と同様ですが、 &lt;code&gt;level()&lt;/code&gt; に従ってレポートを作成します。</target>
        </trans-unit>
        <trans-unit id="8d1f3b5af74d0fcd2065711ea1d65ad1437e3ca2" translate="yes" xml:space="preserve">
          <source>Like the normal &lt;code&gt;caller()&lt;/code&gt;, except it reports according to your &lt;code&gt;level()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;level()&lt;/code&gt; に従ってレポートすることを除いて、通常の &lt;code&gt;caller()&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b8d2b0ec03adb313bc91ba8220b07bc1ab800f57" translate="yes" xml:space="preserve">
          <source>Like the other methods, the input parameter is not checked for validity. &lt;code&gt;undef&lt;/code&gt; or containing non-digits has the same effect as 8.</source>
          <target state="translated">他の方法と同様に、入力パラメーターの有効性はチェックされません。 &lt;code&gt;undef&lt;/code&gt; または数字以外を含むと、8と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="200195811a3c205ce0d87247b5aab2a0a4c65d8e" translate="yes" xml:space="preserve">
          <source>Like their AV counterparts, &lt;code&gt;hv_clear&lt;/code&gt; deletes all the entries in the hash table but does not actually delete the hash table. The &lt;code&gt;hv_undef&lt;/code&gt; deletes both the entries and the hash table itself.</source>
          <target state="translated">対応するAVと同様に、 &lt;code&gt;hv_clear&lt;/code&gt; はハッシュテーブル内のすべてのエントリを削除しますが、実際にはハッシュテーブルを削除しません。 &lt;code&gt;hv_undef&lt;/code&gt; はエントリと、ハッシュテーブル自体の両方を削除します。</target>
        </trans-unit>
        <trans-unit id="e82abff5c6c10139b1928c82bbe909480a69e24a" translate="yes" xml:space="preserve">
          <source>Likely to occur for a perl binary that was not properly installed. Correct by conducting a proper installation.</source>
          <target state="translated">正しくインストールされていなかったperlのバイナリに発生する可能性が高い。正しくインストールすることで修正してください。</target>
        </trans-unit>
        <trans-unit id="5195e8e0970c4f356d29e2dc5df49c188d971cda" translate="yes" xml:space="preserve">
          <source>Likely to occur for a perl library tree that was not properly installed. Correct by conducting a proper installation.</source>
          <target state="translated">perlのライブラリツリーが正しくインストールされていなかった場合に発生する可能性が高い。適切なインストールを行うことで修正してください。</target>
        </trans-unit>
        <trans-unit id="5a2da7a5f3225b97435c319fa8a430eb74f8dc5d" translate="yes" xml:space="preserve">
          <source>Likely to occur for a perl that was not properly installed. Correct by conducting a proper installation.</source>
          <target state="translated">正しくインストールされていなかったperlに発生する可能性が高い。適切なインストールを行うことで修正します。</target>
        </trans-unit>
        <trans-unit id="fc78654c95e5eb9c78fd54cff382380c29359dd7" translate="yes" xml:space="preserve">
          <source>Likely you forgot the &lt;code&gt;/x&lt;/code&gt; modifier or there was a typo in the pattern. For example, did you really mean to match a form-feed? If so, all the ASCII vertical space control characters are representable by escape sequences which won't present such a jarring appearance as your pattern does when displayed.</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; 修飾子を忘れたか、パターンにタイプミスがあった可能性があります。たとえば、本当にフォームフィードに一致させるつもりでしたか？その場合、すべてのASCII垂直スペース制御文字は、表示時にパターンのような不快な外観を示さないエスケープシーケンスで表すことができます。</target>
        </trans-unit>
        <trans-unit id="d87358f4e2ddd3816d7f56b79a06ec5e87b2b467" translate="yes" xml:space="preserve">
          <source>Likely, you should use this only for debugging anyway.</source>
          <target state="translated">可能性としては、どうせならデバッグにしか使わない方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="5e2ad79894aa707c67ca50ba4a61384758d0873a" translate="yes" xml:space="preserve">
          <source>Likewise on all other OS levels. Then execute the following command, and fill in its choices</source>
          <target state="translated">他のすべてのOSレベルでも同様です。そして、次のコマンドを実行し、その選択肢を記入します。</target>
        </trans-unit>
        <trans-unit id="907735ad554b354d50508dedc314aa895182b86c" translate="yes" xml:space="preserve">
          <source>Likewise the call in:</source>
          <target state="translated">コールインも同様に。</target>
        </trans-unit>
        <trans-unit id="65ed6c9aec28bb7eb33858993a0680b4d9a0419f" translate="yes" xml:space="preserve">
          <source>Likewise,</source>
          <target state="translated">Likewise,</target>
        </trans-unit>
        <trans-unit id="c02c1537f9374adb04ab89c0867bc362683b8992" translate="yes" xml:space="preserve">
          <source>Likewise, &lt;code&gt;o conf KEY &lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt; LIST&lt;/code&gt; passes the LIST to the corresponding splice command.</source>
          <target state="translated">同様に、 &lt;code&gt;o conf KEY &lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt; LIST&lt;/code&gt; はLISTを対応するスプライスコマンドに渡します。</target>
        </trans-unit>
        <trans-unit id="886e8885f96bc8b4a5e209980f534b6f61eacaf4" translate="yes" xml:space="preserve">
          <source>Likewise, Filter::Simple is also smart enough to Do The Right Thing if you use Exporter:</source>
          <target state="translated">同様に、Filter::SimpleもExporterを使えば十分に賢いです。</target>
        </trans-unit>
        <trans-unit id="160bda2110bdb1f3a950ddf5accf544eb0786069" translate="yes" xml:space="preserve">
          <source>Likewise, declaring any variables with the &lt;code&gt;:Loud&lt;/code&gt; attribute within the package:</source>
          <target state="translated">同様に、パッケージ内で &lt;code&gt;:Loud&lt;/code&gt; 属性を使用して変数を宣言します。</target>
        </trans-unit>
        <trans-unit id="84a02ce9b38a8238dd6e99f162e9536e66631ce0" translate="yes" xml:space="preserve">
          <source>Likewise, install &quot;iPKGui Beta&quot;.</source>
          <target state="translated">同様に、「iPKGui Beta」をインストールします。</target>
        </trans-unit>
        <trans-unit id="d6adecc01f3598897c4c9f089b3d20664151e435" translate="yes" xml:space="preserve">
          <source>Likewise, the &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; formats pack a string that's that many bits long. Each such format generates 1 bit of the result. These are typically followed by a repeat count like &lt;code&gt;B8&lt;/code&gt; or &lt;code&gt;B64&lt;/code&gt; .</source>
          <target state="translated">同様に、 &lt;code&gt;b&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; フォーマットは、ビット長が長い文字列をパックします。このような各フォーマットは、結果の1ビットを生成します。これらの後には通常、 &lt;code&gt;B8&lt;/code&gt; または &lt;code&gt;B64&lt;/code&gt; のような繰り返しカウントが続きます。</target>
        </trans-unit>
        <trans-unit id="0a9dd269cb5956c09af91c5ffea1e001451d2341" translate="yes" xml:space="preserve">
          <source>Likewise, the &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; formats pack a string that's that many bits long. Each such format generates 1 bit of the result. These are typically followed by a repeat count like &lt;code&gt;B8&lt;/code&gt; or &lt;code&gt;B64&lt;/code&gt;.</source>
          <target state="translated">同様に、 &lt;code&gt;b&lt;/code&gt; 形式と &lt;code&gt;B&lt;/code&gt; 形式は、その数ビットの長さの文字列をパックします。このような各フォーマットは、1ビットの結果を生成します。これらの後には通常、 &lt;code&gt;B8&lt;/code&gt; や &lt;code&gt;B64&lt;/code&gt; のような繰り返しカウントが続きます。</target>
        </trans-unit>
        <trans-unit id="f6e8f9ee995abe8e9c9ec7e9aaf53f3578e6a6e8" translate="yes" xml:space="preserve">
          <source>Likewise, there is no public API to read values from the temporaries stack. Instead. the macros &lt;code&gt;SAVETMPS&lt;/code&gt; and &lt;code&gt;FREETPMS&lt;/code&gt; are used. The &lt;code&gt;SAVETMPS&lt;/code&gt; macro establishes the base levels of the temporaries stack, by capturing the current value of &lt;code&gt;PL_tmps_ix&lt;/code&gt; into &lt;code&gt;PL_tmps_floor&lt;/code&gt; and saving the previous value to the save stack. Thereafter, whenever &lt;code&gt;FREETMPS&lt;/code&gt; is invoked all of the temporaries that have been pushed since that level are reclaimed.</source>
          <target state="translated">同様に、一時スタックから値を読み取るためのパブリックAPIはありません。代わりに。マクロ &lt;code&gt;SAVETMPS&lt;/code&gt; および &lt;code&gt;FREETPMS&lt;/code&gt; が使用されます。 &lt;code&gt;SAVETMPS&lt;/code&gt; のマクロは、現在の値捕捉することによって、一時スタックのベースレベルを確立 &lt;code&gt;PL_tmps_ix&lt;/code&gt; に &lt;code&gt;PL_tmps_floor&lt;/code&gt; をスタック保存する前の値を保存します。その後、 &lt;code&gt;FREETMPS&lt;/code&gt; が呼び出されるたびに、そのレベル以降にプッシュされたすべての一時的なものが再利用されます。</target>
        </trans-unit>
        <trans-unit id="b0cbdf24c8a85f92cd82aa3a094249d6de02bf8f" translate="yes" xml:space="preserve">
          <source>Likewise, to create a class hierarchy in which every initializer inherited by a new object is invoked:</source>
          <target state="translated">同様に、新しいオブジェクトに継承されたすべてのイニシャライザが呼び出されるクラス階層を作成します。</target>
        </trans-unit>
        <trans-unit id="b2d941fa8901c396508e50ff7018851261440d12" translate="yes" xml:space="preserve">
          <source>Likewise, when using the &lt;a href=&quot;autosplit&quot;&gt;&lt;code&gt;AutoSplit&lt;/code&gt;&lt;/a&gt; module, try to keep your functions to 8.3 naming and case-insensitive conventions; or, at the least, make it so the resulting files have a unique (case-insensitively) first 8 characters.</source>
          <target state="translated">同様に、&lt;a href=&quot;autosplit&quot;&gt; &lt;code&gt;AutoSplit&lt;/code&gt; &lt;/a&gt;モジュールを使用するときは、関数を8.3の命名規則と大文字と小文字を区別しない規則に保つようにしてください。または、少なくとも、結果のファイルが一意の（大文字と小文字を区別しない）最初の8文字になるようにします。</target>
        </trans-unit>
        <trans-unit id="70bd46189954c3a64d496328cd96089f6f4f9542" translate="yes" xml:space="preserve">
          <source>Likewise, when using the &lt;code&gt;AutoSplit&lt;/code&gt; module, try to keep your functions to 8.3 naming and case-insensitive conventions; or, at the least, make it so the resulting files have a unique (case-insensitively) first 8 characters.</source>
          <target state="translated">同様に、 &lt;code&gt;AutoSplit&lt;/code&gt; モジュールを使用するときは、関数を8.3の命名規則と大文字と小文字を区別しない規則に保つようにしてください。または、少なくとも、結果のファイルが一意の（大文字と小文字を区別しない）最初の8文字になるようにしてください。</target>
        </trans-unit>
        <trans-unit id="622e4bdf3675a214ecc2d659e2770e558df61e8a" translate="yes" xml:space="preserve">
          <source>Limit on the value of Unicode code points.</source>
          <target state="translated">Unicodeコードポイントの値の制限。</target>
        </trans-unit>
        <trans-unit id="a73edeb8158f532278a32208dcd47fe3a3d7f86f" translate="yes" xml:space="preserve">
          <source>Limit recursion depth to N levels when dumping structures. Negative values are interpreted as infinity. Default: infinity.</source>
          <target state="translated">構造物をダンプする際に、再帰の深さをNレベルに制限します。負の値は無限大と解釈されます。デフォルト:無限大。</target>
        </trans-unit>
        <trans-unit id="2d1726e76688b7950a8162233fc1e17657b1edf0" translate="yes" xml:space="preserve">
          <source>Limitation with regard to &lt;code&gt;_&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;_&lt;/code&gt; に関する制限</target>
        </trans-unit>
        <trans-unit id="55330d97525455296ae0e4b51ff25bb7abdac5c6" translate="yes" xml:space="preserve">
          <source>Limitation with regard to _</source>
          <target state="translated">に関する制限</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="b39570022e2b6b41ec90b798a2544b51d29caf01" translate="yes" xml:space="preserve">
          <source>Limitations of Perl under AmigaOS 4.1</source>
          <target state="translated">AmigaOS 4.1でのPerlの限界</target>
        </trans-unit>
        <trans-unit id="72e092ad529e2081e851e343be794f7609f24237" translate="yes" xml:space="preserve">
          <source>Limits of time_t</source>
          <target state="translated">time_tの限界</target>
        </trans-unit>
        <trans-unit id="6234e2f414d2b26733b9fd769dba962a7fcc3692" translate="yes" xml:space="preserve">
          <source>Limits on Numbers of Open Files on Solaris.</source>
          <target state="translated">Solaris でのオープンファイル数の制限。</target>
        </trans-unit>
        <trans-unit id="a139366c419ef510c76cf49f4a191349fd578640" translate="yes" xml:space="preserve">
          <source>Line 1 is a macro, and its definition is dependent on your operating system. Line 3 references &lt;code&gt;PL_do_undump&lt;/code&gt; , a global variable - all global variables in Perl start with &lt;code&gt;PL_&lt;/code&gt; . This tells you whether the current running program was created with the &lt;code&gt;-u&lt;/code&gt; flag to perl and then</source>
          <target state="translated">1行目はマクロであり、その定義はオペレーティングシステムによって異なります。3行 &lt;code&gt;PL_do_undump&lt;/code&gt; は、グローバル変数PL_do_undumpを参照しています。Perlのすべてのグローバル変数は &lt;code&gt;PL_&lt;/code&gt; で始まります。これは、現在実行中のプログラムがperlの &lt;code&gt;-u&lt;/code&gt; フラグで作成されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="0b0e9f3f9db20ac76f95740a88474a1af455f6f4" translate="yes" xml:space="preserve">
          <source>Line 1 is a macro, and its definition is dependent on your operating system. Line 3 references &lt;code&gt;PL_do_undump&lt;/code&gt;, a global variable - all global variables in Perl start with &lt;code&gt;PL_&lt;/code&gt;. This tells you whether the current running program was created with the &lt;code&gt;-u&lt;/code&gt; flag to perl and then</source>
          <target state="translated">1行目はマクロであり、その定義はオペレーティングシステムによって異なります。3行 &lt;code&gt;PL_do_undump&lt;/code&gt; は、グローバル変数であるPL_do_undumpを参照しています。Perlのすべてのグローバル変数は &lt;code&gt;PL_&lt;/code&gt; で始まります。これは、現在実行中のプログラムがperlへの &lt;code&gt;-u&lt;/code&gt; フラグを使用して作成されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="34d4d7a9a244a3d12dfe7fb244172b4a39165816" translate="yes" xml:space="preserve">
          <source>Line 1 tells us we're looking at an SV which lives at &lt;code&gt;0xa04ecbc&lt;/code&gt; in memory. SVs themselves are very simple structures, but they contain a pointer to a more complex structure. In this case, it's a PV, a structure which holds a string value, at location &lt;code&gt;0xa041450&lt;/code&gt; . Line 2 is the reference count; there are no other references to this data, so it's 1.</source>
          <target state="translated">行1は、メモリ内の &lt;code&gt;0xa04ecbc&lt;/code&gt; に存在するSVを見ていることを示しています。SV自体は非常に単純な構造ですが、より複雑な構造へのポインタが含まれています。この場合、これは &lt;code&gt;0xa041450&lt;/code&gt; の位置にある、文字列値を保持する構造体のPV です。2行目は参照カウントです。このデータへの他の参照はないため、1です。</target>
        </trans-unit>
        <trans-unit id="8257e528d7a56dcca4db122b50b35bdc95c95709" translate="yes" xml:space="preserve">
          <source>Line 1 tells us we're looking at an SV which lives at &lt;code&gt;0xa04ecbc&lt;/code&gt; in memory. SVs themselves are very simple structures, but they contain a pointer to a more complex structure. In this case, it's a PV, a structure which holds a string value, at location &lt;code&gt;0xa041450&lt;/code&gt;. Line 2 is the reference count; there are no other references to this data, so it's 1.</source>
          <target state="translated">1行目は、メモリ内の &lt;code&gt;0xa04ecbc&lt;/code&gt; に存在するSVを見ていることを示しています。SV自体は非常に単純な構造ですが、より複雑な構造へのポインターが含まれています。この場合、それは位置 &lt;code&gt;0xa041450&lt;/code&gt; にある文字列値を保持する構造体であるPVです。2行目は参照カウントです。このデータへの他の参照はないので、1です。</target>
        </trans-unit>
        <trans-unit id="852a5525bd0666646b8baf89f18138582eb7fb29" translate="yes" xml:space="preserve">
          <source>Line 1, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Filter::cpp&lt;/code&gt; , includes and installs the &lt;code&gt;cpp&lt;/code&gt; filter module. All source filters work this way. The use statement is compiled and executed at compile time, before any more of the file is read, and it attaches the cpp filter to the source stream behind the scenes. Now the data flow looks like this:</source>
          <target state="translated">1行目 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Filter::cpp&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;し、 &lt;code&gt;cpp&lt;/code&gt; フィルターモジュールを含めてインストールします。すべてのソースフィルターはこのように機能します。useステートメントは、コンパイル時にファイルが読み込まれる前にコンパイルおよび実行され、cppフィルターがバックグラウンドのソースストリームにアタッチされます。データフローは次のようになります。</target>
        </trans-unit>
        <trans-unit id="7d80c9fd96dedf73af4c56122f85ab0c0aa067ae" translate="yes" xml:space="preserve">
          <source>Line 1, &lt;code&gt;use Filter::cpp&lt;/code&gt;, includes and installs the &lt;code&gt;cpp&lt;/code&gt; filter module. All source filters work this way. The use statement is compiled and executed at compile time, before any more of the file is read, and it attaches the cpp filter to the source stream behind the scenes. Now the data flow looks like this:</source>
          <target state="translated">1行目 &lt;code&gt;use Filter::cpp&lt;/code&gt; し、 &lt;code&gt;cpp&lt;/code&gt; フィルターモジュールを含めてインストールします。すべてのソースフィルターはこのように機能します。 useステートメントは、ファイルが読み取られる前のコンパイル時にコンパイルおよび実行され、cppフィルターをバックグラウンドでソースストリームにアタッチします。これで、データフローは次のようになります。</target>
        </trans-unit>
        <trans-unit id="7fe884af42f04d28c78e5fe62707a6228b47c52d" translate="yes" xml:space="preserve">
          <source>Line 10 does the actual catenation: the &lt;code&gt;Move&lt;/code&gt; macro moves a chunk of memory around: we move the string &lt;code&gt;ptr&lt;/code&gt; to the end of the PV - that's the start of the PV plus its current length. We're moving &lt;code&gt;len&lt;/code&gt; bytes of type &lt;code&gt;char&lt;/code&gt; . After doing so, we need to tell Perl we've extended the string, by altering &lt;code&gt;CUR&lt;/code&gt; to reflect the new length. &lt;code&gt;SvEND&lt;/code&gt; is a macro which gives us the end of the string, so that needs to be a &lt;code&gt;&quot;\0&quot;&lt;/code&gt; .</source>
          <target state="translated">：ライン10は、実際のカートネーション行い &lt;code&gt;Move&lt;/code&gt; マクロ移動の周りのメモリのチャンクを：私たちは、文字列の移動 &lt;code&gt;ptr&lt;/code&gt; PVの最後に- PVプラス現在の長さのスタートです。 &lt;code&gt;char&lt;/code&gt; 型の &lt;code&gt;len&lt;/code&gt; バイトを移動しています。そうした後、新しい長さを反映するように &lt;code&gt;CUR&lt;/code&gt; を変更して、文字列を拡張したことをPerlに通知する必要があります。 &lt;code&gt;SvEND&lt;/code&gt; は、文字列の終わりを示すマクロなので、 &lt;code&gt;&quot;\0&quot;&lt;/code&gt; ある必要があります。</target>
        </trans-unit>
        <trans-unit id="343b8ed5119a25daa7a642907594c94fca594fc8" translate="yes" xml:space="preserve">
          <source>Line 10 does the actual catenation: the &lt;code&gt;Move&lt;/code&gt; macro moves a chunk of memory around: we move the string &lt;code&gt;ptr&lt;/code&gt; to the end of the PV - that's the start of the PV plus its current length. We're moving &lt;code&gt;len&lt;/code&gt; bytes of type &lt;code&gt;char&lt;/code&gt;. After doing so, we need to tell Perl we've extended the string, by altering &lt;code&gt;CUR&lt;/code&gt; to reflect the new length. &lt;code&gt;SvEND&lt;/code&gt; is a macro which gives us the end of the string, so that needs to be a &lt;code&gt;&quot;\0&quot;&lt;/code&gt;.</source>
          <target state="translated">：ライン10は、実際のカートネーション行い &lt;code&gt;Move&lt;/code&gt; マクロ移動の周りのメモリのチャンクを：私たちは、文字列の移動 &lt;code&gt;ptr&lt;/code&gt; PVの最後に- PVプラス現在の長さのスタートです。 &lt;code&gt;char&lt;/code&gt; 型の &lt;code&gt;len&lt;/code&gt; バイトを移動しています。その後、新しい長さを反映するように &lt;code&gt;CUR&lt;/code&gt; を変更して、文字列を拡張したことをPerlに通知する必要があります。 &lt;code&gt;SvEND&lt;/code&gt; は文字列の終わりを与えるマクロなので、 &lt;code&gt;&quot;\0&quot;&lt;/code&gt; ある必要があります。</target>
        </trans-unit>
        <trans-unit id="b7ce4818db70a98f47c9e31ba9a951fb125f8128" translate="yes" xml:space="preserve">
          <source>Line 10 is the null op: this does exactly nothing. What is that doing there? If you see the null op, it's a sign that something has been optimized away after parsing. As we mentioned in &lt;a href=&quot;#Optimization&quot;&gt;&quot;Optimization&quot;&lt;/a&gt;, the optimization stage sometimes converts two operations into one, for example when fetching a scalar variable. When this happens, instead of rewriting the op tree and cleaning up the dangling pointers, it's easier just to replace the redundant operation with the null op. Originally, the tree would have looked like this:</source>
          <target state="translated">10行目はnull操作です。これはまったく何もしません。それはそこで何をしているのですか？ null opが表示された場合は、解析後に何かが最適化されたことを示しています。我々はで述べたように&lt;a href=&quot;#Optimization&quot;&gt;、「最適化」&lt;/a&gt;スカラー変数をフェッチするときに、最適化ステージは時々 、例えば、一つに2つの動作を変換します。これが発生した場合、opツリーを書き換えてダングリングポインタをクリーンアップする代わりに、冗長な操作をnullopに置き換える方が簡単です。元々、ツリーは次のようになりました。</target>
        </trans-unit>
        <trans-unit id="0d7912d365642f9e0b2b596d940dc9036620ccc8" translate="yes" xml:space="preserve">
          <source>Line 10 is the null op: this does exactly nothing. What is that doing there? If you see the null op, it's a sign that something has been optimized away after parsing. As we mentioned in &lt;a href=&quot;#Optimization&quot;&gt;Optimization&lt;/a&gt;, the optimization stage sometimes converts two operations into one, for example when fetching a scalar variable. When this happens, instead of rewriting the op tree and cleaning up the dangling pointers, it's easier just to replace the redundant operation with the null op. Originally, the tree would have looked like this:</source>
          <target state="translated">10行目はヌル演算です。これはまったく何もしません。そこで何をしているのですか？ null opが表示される場合は、解析後に何かが最適化されていることを示しています。&lt;a href=&quot;#Optimization&quot;&gt;最適化&lt;/a&gt;で述べたように、最適化ステージでは、たとえばスカラー変数をフェッチする場合などに、2つの演算が1つに変換されることがあります。これが発生すると、opツリーを書き換えてダングリングポインターをクリーンアップする代わりに、冗長な操作をnull opに置き換えるだけの方が簡単です。本来、ツリーは次のようになっていました。</target>
        </trans-unit>
        <trans-unit id="264f13994058273b1e958110b35aba9f84b7d3f9" translate="yes" xml:space="preserve">
          <source>Line 13 manipulates the flags; since we've changed the PV, any IV or NV values will no longer be valid: if we have &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; we don't want to use the old IV of 10. &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; is a special UTF-8-aware version of &lt;code&gt;SvPOK_only&lt;/code&gt; , a macro which turns off the IOK and NOK flags and turns on POK. The final &lt;code&gt;SvTAINT&lt;/code&gt; is a macro which launders tainted data if taint mode is turned on.</source>
          <target state="translated">13行目はフラグを操作します。PVを変更したため、IVまたはNVの値は無効になります &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; 私たちは10の古いIVを使用したくない &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; は特別なUTF-8対応バージョンである &lt;code&gt;SvPOK_only&lt;/code&gt; 、POK上IOKとNOKフラグとターンをオフにするマクロ。最後の &lt;code&gt;SvTAINT&lt;/code&gt; は、汚染モードがオンの場合に汚染されたデータを洗浄するマクロです。</target>
        </trans-unit>
        <trans-unit id="f14c02821009fa7c46a173af60df4534a9b06517" translate="yes" xml:space="preserve">
          <source>Line 13 manipulates the flags; since we've changed the PV, any IV or NV values will no longer be valid: if we have &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; we don't want to use the old IV of 10. &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; is a special UTF-8-aware version of &lt;code&gt;SvPOK_only&lt;/code&gt;, a macro which turns off the IOK and NOK flags and turns on POK. The final &lt;code&gt;SvTAINT&lt;/code&gt; is a macro which launders tainted data if taint mode is turned on.</source>
          <target state="translated">13行目はフラグを操作します。PVを変更したため、IVまたはNVの値は無効になります &lt;code&gt;$a=10; $a.=&quot;6&quot;;&lt;/code&gt; 古いIVの10は使用しません &lt;code&gt;SvPOK_only_utf8&lt;/code&gt; は、UTF-8対応の特別なバージョンの &lt;code&gt;SvPOK_only&lt;/code&gt; であり、IOKフラグとNOKフラグをオフにしてPOKをオンにするマクロです。最後の &lt;code&gt;SvTAINT&lt;/code&gt; は、汚染モードがオンになっている場合に汚染されたデータを洗濯するマクロです。</target>
        </trans-unit>
        <trans-unit id="755dd87e19fd3ba2af902fab337428ef967e0ea8" translate="yes" xml:space="preserve">
          <source>Line 3 are the flags for this SV - it's OK to use it as a PV, it's a read-only SV (because it's a constant) and the data is a PV internally. Next we've got the contents of the string, starting at location &lt;code&gt;0xa0484e0&lt;/code&gt; .</source>
          <target state="translated">行3はこのSVのフラグです。PVとして使用しても問題ありません。これは読み取り専用のSV（定数であるため）であり、データは内部でPVです。次に、 &lt;code&gt;0xa0484e0&lt;/code&gt; から始まる文字列の内容を取得します。</target>
        </trans-unit>
        <trans-unit id="c6d733118bea452010f0639494cd9d297ac988a2" translate="yes" xml:space="preserve">
          <source>Line 3 are the flags for this SV - it's OK to use it as a PV, it's a read-only SV (because it's a constant) and the data is a PV internally. Next we've got the contents of the string, starting at location &lt;code&gt;0xa0484e0&lt;/code&gt;.</source>
          <target state="translated">3行目はこのSVのフラグです。PVとして使用しても問題ありません。読み取り専用のSVであり（定数であるため）、データは内部的にPVです。次に、位置 &lt;code&gt;0xa0484e0&lt;/code&gt; から始まる文字列の内容を取得します。</target>
        </trans-unit>
        <trans-unit id="40714861418609c0c173cdb387c1235ef584feb6" translate="yes" xml:space="preserve">
          <source>Line 4 calls a function in</source>
          <target state="translated">4行目は</target>
        </trans-unit>
        <trans-unit id="b40e00c673cb8c91399cf977ab21f4560a36a721" translate="yes" xml:space="preserve">
          <source>Line 4 checks what type of token we are expecting. &lt;code&gt;Aop&lt;/code&gt; returns a token. If you search for &lt;code&gt;Aop&lt;/code&gt; elsewhere in</source>
          <target state="translated">4行目では、予期しているトークンのタイプを確認しています。 &lt;code&gt;Aop&lt;/code&gt; はトークンを返します。他の場所で &lt;code&gt;Aop&lt;/code&gt; を検索する場合</target>
        </trans-unit>
        <trans-unit id="fce643cab9a4e3c9a722892a06301bcddec99baf" translate="yes" xml:space="preserve">
          <source>Line 5 gives us the current length of the string - note that this does &lt;b&gt;not&lt;/b&gt; include the null terminator. Line 6 is not the length of the string, but the length of the currently allocated buffer; as the string grows, Perl automatically extends the available storage via a routine called &lt;code&gt;SvGROW&lt;/code&gt; .</source>
          <target state="translated">5行目は、文字列の現在の長さを示します。これにはnullターミネーターが含まれてい&lt;b&gt;ない&lt;/b&gt;ことに注意してください。 6行目は文字列の長さではなく、現在割り当てられているバッファの長さです。文字列が大きくなると、Perlは &lt;code&gt;SvGROW&lt;/code&gt; と呼ばれるルーチンを介して利用可能なストレージを自動的に拡張します。</target>
        </trans-unit>
        <trans-unit id="379de365d1a548a0387a33346f31194909c467b1" translate="yes" xml:space="preserve">
          <source>Line 5 gives us the current length of the string - note that this does &lt;b&gt;not&lt;/b&gt; include the null terminator. Line 6 is not the length of the string, but the length of the currently allocated buffer; as the string grows, Perl automatically extends the available storage via a routine called &lt;code&gt;SvGROW&lt;/code&gt;.</source>
          <target state="translated">5行目は、文字列の現在の長さを示しています。これにはnullターミネータが含まれてい&lt;b&gt;ない&lt;/b&gt;ことに注意してください。6行目は文字列の長さではなく、現在割り当てられているバッファーの長さです。文字列が大きくなると、Perlは &lt;code&gt;SvGROW&lt;/code&gt; と呼ばれるルーチンを介して使用可能なストレージを自動的に拡張します。</target>
        </trans-unit>
        <trans-unit id="e801a645ef8652f9762283242a90486b96636e4b" translate="yes" xml:space="preserve">
          <source>Line 5 is another variable declaration - all variable declarations start with &lt;code&gt;d&lt;/code&gt; - which pops from the top of the argument stack two NVs (hence &lt;code&gt;nn&lt;/code&gt; ) and puts them into the variables &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; , hence the &lt;code&gt;rl&lt;/code&gt; . These are the two operands to the addition operator. Next, we call &lt;code&gt;SETn&lt;/code&gt; to set the NV of the return value to the result of adding the two values. This done, we return - the &lt;code&gt;RETURN&lt;/code&gt; macro makes sure that our return value is properly handled, and we pass the next operator to run back to the main run loop.</source>
          <target state="translated">5行目は別の変数宣言です。すべての変数宣言は &lt;code&gt;d&lt;/code&gt; で始まり、引数スタックの最上部から2つのNV（したがって &lt;code&gt;nn&lt;/code&gt; ）をポップして、変数を &lt;code&gt;right&lt;/code&gt; と &lt;code&gt;left&lt;/code&gt; 、つまり &lt;code&gt;rl&lt;/code&gt; に入れます。これらは、加算演算子の2つのオペランドです。次に、 &lt;code&gt;SETn&lt;/code&gt; を呼び出して、戻り値のNVを2つの値を加算した結果に設定します。これが完了したら、戻ります &lt;code&gt;RETURN&lt;/code&gt; マクロは戻り値が適切に処理されていることを確認し、次の演算子をメインの実行ループに戻します。</target>
        </trans-unit>
        <trans-unit id="9ab0a06fa26dc1e693bbb46194cc19123ec14b86" translate="yes" xml:space="preserve">
          <source>Line 6 installs the city name into the appropriate array. &lt;code&gt;$table{$country}&lt;/code&gt; now holds a reference to the array of cities seen in that country so far. Line 6 is exactly like</source>
          <target state="translated">6行目は、都市名を適切な配列にインストールします。 &lt;code&gt;$table{$country}&lt;/code&gt; 現在、その国でこれまでに見られた一連の都市への参照を保持しています。6行目はまさに</target>
        </trans-unit>
        <trans-unit id="c2ba84f7598874c7f48acd427ca1d636fc55bdcd" translate="yes" xml:space="preserve">
          <source>Line 6 is another variable declaration - all variable declarations start with &lt;code&gt;d&lt;/code&gt; - which pops from the top of the argument stack two NVs (hence &lt;code&gt;nn&lt;/code&gt;) and puts them into the variables &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt;, hence the &lt;code&gt;rl&lt;/code&gt;. These are the two operands to the addition operator. Next, we call &lt;code&gt;SETn&lt;/code&gt; to set the NV of the return value to the result of adding the two values. This done, we return - the &lt;code&gt;RETURN&lt;/code&gt; macro makes sure that our return value is properly handled, and we pass the next operator to run back to the main run loop.</source>
          <target state="translated">すべての変数宣言で始まる-ライン6は、別の変数の宣言である &lt;code&gt;d&lt;/code&gt; -引数スタックの最上位から二つのNVををポップ（それゆえ &lt;code&gt;nn&lt;/code&gt; ）および変数に入れ、それらを &lt;code&gt;right&lt;/code&gt; と &lt;code&gt;left&lt;/code&gt; したがって、 &lt;code&gt;rl&lt;/code&gt; 。これらは、加算演算子の2つのオペランドです。次に、 &lt;code&gt;SETn&lt;/code&gt; を呼び出して、戻り値のNVを2つの値を加算した結果に設定します。これが完了すると、戻り値が返されます &lt;code&gt;RETURN&lt;/code&gt; マクロは、戻り値が適切に処理されることを確認し、次の演算子を渡してメインの実行ループに戻ります。</target>
        </trans-unit>
        <trans-unit id="d48a3eb6c3c3e42eae96423913fd8ffbda526837" translate="yes" xml:space="preserve">
          <source>Line Buffering</source>
          <target state="translated">ラインバッファリング</target>
        </trans-unit>
        <trans-unit id="3bfe50eaa50ff37a3814f18a6020ab1131445d28" translate="yes" xml:space="preserve">
          <source>Line Listing Format</source>
          <target state="translated">行リスト形式</target>
        </trans-unit>
        <trans-unit id="62686b06fae48d96cf870eba5c52faaa0c94ec93" translate="yes" xml:space="preserve">
          <source>Line number that will be executed next.</source>
          <target state="translated">次に実行される行番号。</target>
        </trans-unit>
        <trans-unit id="4c2e43f7c549f47cf9031361a83c442a60f08003" translate="yes" xml:space="preserve">
          <source>Line up corresponding items vertically.</source>
          <target state="translated">対応する項目を縦に並べる。</target>
        </trans-unit>
        <trans-unit id="90a0a22c457fd80684a0398fb72051a69780b70d" translate="yes" xml:space="preserve">
          <source>Line up corresponding things vertically, especially if it'd be too long to fit on one line anyway.</source>
          <target state="translated">対応するものを縦に並べる、特に一本の線に収まりきらないほど長い場合は。</target>
        </trans-unit>
        <trans-unit id="fddad56552c576f0323dae03070effe7302ccb5f" translate="yes" xml:space="preserve">
          <source>Line up your transliterations when it makes sense:</source>
          <target state="translated">意味があるときに音訳を並べてみてください。</target>
        </trans-unit>
        <trans-unit id="4dd6f945e5b458504f42d21fe69947944476c20f" translate="yes" xml:space="preserve">
          <source>Line wrapping to form simple paragraphs</source>
          <target state="translated">シンプルな段落を形成するための改行</target>
        </trans-unit>
        <trans-unit id="3c31b396df21c211f23a01f3c792334d1e4f696c" translate="yes" xml:space="preserve">
          <source>Line-by-line debugging. Causes &lt;code&gt;DB::DB()&lt;/code&gt; subroutine to be called for each statement executed. Also causes saving source code lines (like 0x400).</source>
          <target state="translated">行ごとのデバッグ。原因 &lt;code&gt;DB::DB()&lt;/code&gt; サブルーチンが実行ステートメントごとに呼び出されます。また、ソースコード行（0x400など）を保存します。</target>
        </trans-unit>
        <trans-unit id="4a4c07d14ccbabaacd2cac3e3e1dcd6526decdb6" translate="yes" xml:space="preserve">
          <source>Lines 2-4 acquire a city and country name. Line 5 looks to see if the country is already present as a key in the hash. If it's not, the program uses the &lt;code&gt;[]&lt;/code&gt; notation (&lt;a href=&quot;#Make-Rule-2&quot;&gt;&lt;b&gt;Make Rule 2&lt;/b&gt;&lt;/a&gt;) to manufacture a new, empty anonymous array of cities, and installs a reference to it into the hash under the appropriate key.</source>
          <target state="translated">2〜4行目は、都市と国の名前を取得します。 5行目は、その国がハッシュのキーとしてすでに存在しているかどうかを確認します。そうでない場合、プログラムは &lt;code&gt;[]&lt;/code&gt; 表記（&lt;a href=&quot;#Make-Rule-2&quot;&gt;&lt;b&gt;Make Rule 2&lt;/b&gt;&lt;/a&gt;）を使用して、新しい空の匿名の都市配列を作成し、その参照を適切なキーの下のハッシュにインストールします。</target>
        </trans-unit>
        <trans-unit id="6544069544ff400a2f96a13aacecf88aefcebba3" translate="yes" xml:space="preserve">
          <source>Lines 2-4 acquire a city and country name. Line 5 looks to see if the country is already present as a key in the hash. If it's not, the program uses the &lt;code&gt;[]&lt;/code&gt; notation (&lt;b&gt;Make Rule 2&lt;/b&gt;) to manufacture a new, empty anonymous array of cities, and installs a reference to it into the hash under the appropriate key.</source>
          <target state="translated">2行目から4行目では、都市名と国名を取得しています。5行目は、国がハッシュのキーとして既に存在するかどうかを確認します。そうでない場合、プログラムは &lt;code&gt;[]&lt;/code&gt; 表記（&lt;b&gt;Make Rule 2&lt;/b&gt;）を使用して都市の新しい空の匿名配列を作成し、それへの参照を適切なキーの下のハッシュにインストールします。</target>
        </trans-unit>
        <trans-unit id="f9204249863f9ef26ff51a8eb193e8408a39e90b" translate="yes" xml:space="preserve">
          <source>Lines 2-7 are responsible for building the structure in the first place. Here they are again:</source>
          <target state="translated">2-7行目は、最初に構造を構築する責任があります。ここにまた彼らがいます</target>
        </trans-unit>
        <trans-unit id="de6cda1578fd7d9e7a9658f2b0c6b2f1938e7d0c" translate="yes" xml:space="preserve">
          <source>Lines are wrapped at &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; columns (default value: 76). &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; should be set to the full width of your output device. In fact, every resulting line will have length of no more than &lt;code&gt;$columns - 1&lt;/code&gt; .</source>
          <target state="translated">行は &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; 列で折り返されます（デフォルト値：76）。 &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; は、出力デバイスの全幅に設定する必要があります。実際、結果のすべての行の長さは &lt;code&gt;$columns - 1&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bdd8be9ac7f4d3de35a2d0dba7d82ca50f5c0336" translate="yes" xml:space="preserve">
          <source>Lines are wrapped at &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; columns (default value: 76). &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; should be set to the full width of your output device. In fact, every resulting line will have length of no more than &lt;code&gt;$columns - 1&lt;/code&gt;.</source>
          <target state="translated">行は &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; 列で折り返されます（デフォルト値：76）。 &lt;code&gt;$Text::Wrap::columns&lt;/code&gt; は、出力デバイスの全幅に設定する必要があります。実際、結果のすべての行の長さは &lt;code&gt;$columns - 1&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6b80c81ac338346fa6d5a46950a43da0e9261d9f" translate="yes" xml:space="preserve">
          <source>Linguistic tailoring for DUCET via Unicode::Collate</source>
          <target state="translated">Unicode::Collate による DUCET の言語的テーラーリング</target>
        </trans-unit>
        <trans-unit id="911361fa28ffec535144574ef716816f8b8cd069" translate="yes" xml:space="preserve">
          <source>Link count not updated because hard links are not quite that hard (They are sort of half-way between hard and soft links). (AmigaOS)</source>
          <target state="translated">ハードリンクはそれほどハードではないので、リンク数が更新されていません(ハードリンクとソフトリンクの中間のようなものです)。(AmigaOS)</target>
        </trans-unit>
        <trans-unit id="1bd9f440f54676f1bb94923dc077847ab746b4ad" translate="yes" xml:space="preserve">
          <source>Link dynamic extensions with AddressSanitizer. You must manually specify &lt;code&gt;-shared&lt;/code&gt; because using &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; will prevent Configure from setting a default value for &lt;code&gt;lddlflags&lt;/code&gt; , which usually contains &lt;code&gt;-shared&lt;/code&gt; (at least on Linux).</source>
          <target state="translated">動的拡張をAddressSanitizerにリンクします。手動で指定する必要があります &lt;code&gt;-shared&lt;/code&gt; 使用しているため &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; するためのデフォルト値の設定から設定を防ぐことができます &lt;code&gt;lddlflags&lt;/code&gt; 通常含まれ、 &lt;code&gt;-shared&lt;/code&gt; （少なくともLinux上に）。</target>
        </trans-unit>
        <trans-unit id="8e4a85ad0592eae3d98b608b03a13168bab41ac1" translate="yes" xml:space="preserve">
          <source>Link dynamic extensions with AddressSanitizer. You must manually specify &lt;code&gt;-shared&lt;/code&gt; because using &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; will prevent Configure from setting a default value for &lt;code&gt;lddlflags&lt;/code&gt;, which usually contains &lt;code&gt;-shared&lt;/code&gt; (at least on Linux).</source>
          <target state="translated">動的拡張機能をAddressSanitizerとリンクします。手動で指定する必要があります &lt;code&gt;-shared&lt;/code&gt; 使用しているため &lt;code&gt;-Alddlflags=-shared&lt;/code&gt; するためのデフォルト値の設定から設定を防ぐことができます &lt;code&gt;lddlflags&lt;/code&gt; 通常含まれ、 &lt;code&gt;-shared&lt;/code&gt; （少なくともLinux上に）。</target>
        </trans-unit>
        <trans-unit id="14f974c23cae7ac7ab09ab4582a91560c7102a2b" translate="yes" xml:space="preserve">
          <source>Link the perl executable with AddressSanitizer.</source>
          <target state="translated">perl実行ファイルをAddressSanitizerにリンクします。</target>
        </trans-unit>
        <trans-unit id="41c90512ffda6347e72f72d0a6f190da9ca1b80a" translate="yes" xml:space="preserve">
          <source>Link this text to that manual page. E.g., &lt;code&gt;L&amp;lt;Perl Error Messages|perldiag&amp;gt;&lt;/code&gt;</source>
          <target state="translated">このテキストをそのマニュアルページにリンクします。例： &lt;code&gt;L&amp;lt;Perl Error Messages|perldiag&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da1dd85543ffc6fef88aec54ac7001cdb21f6577" translate="yes" xml:space="preserve">
          <source>Link this text to that section in that manual page. E.g., &lt;code&gt;L&amp;lt;postfix &quot;if&quot;|perlsyn/&quot;Statement Modifiers&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">このテキストをそのマニュアルページのそのセクションにリンクします。例： &lt;code&gt;L&amp;lt;postfix &quot;if&quot;|perlsyn/&quot;Statement Modifiers&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a893b38edbd5af20fcd220578252e31f67b32a6" translate="yes" xml:space="preserve">
          <source>Link this text to that section in this manual page. E.g., &lt;code&gt;L&amp;lt;the various attributes|/&quot;Member Data&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">このテキストをこのマニュアルページのそのセクションにリンクします。例： &lt;code&gt;L&amp;lt;the various attributes|/&quot;Member Data&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1a75b0dcbc63f378ca4b7ba049d880c48c223d9a" translate="yes" xml:space="preserve">
          <source>Link to a Perl manual page (e.g., &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt; ). Note that &lt;code&gt;name&lt;/code&gt; should not contain spaces. This syntax is also occasionally used for references to Unix man pages, as in &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">Perlのマニュアルページへのリンク（例： &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt; ）。 &lt;code&gt;name&lt;/code&gt; はスペースを含めないでください。この構文は、 &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt; ように、Unixのマニュアルページへの参照にも使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="c8989d4395dabd5c3aa39385b5b23f283a370aec" translate="yes" xml:space="preserve">
          <source>Link to a Perl manual page (e.g., &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt;). Note that &lt;code&gt;name&lt;/code&gt; should not contain spaces. This syntax is also occasionally used for references to Unix man pages, as in &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Perlのマニュアルページへのリンク（例： &lt;code&gt;L&amp;lt;Net::Ping&amp;gt;&lt;/code&gt; ）。 &lt;code&gt;name&lt;/code&gt; はスペースを含めないでください。この構文は、 &lt;code&gt;L&amp;lt;crontab(5)&amp;gt;&lt;/code&gt; ように、Unixのマニュアルページへの参照にも使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="5ebcbb26d8410e15ec0a3bf942439d1fa6f0dc0e" translate="yes" xml:space="preserve">
          <source>Link to a section in other manual page. E.g., &lt;code&gt;L&amp;lt;perlsyn/&quot;For Loops&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">他のマニュアルページのセクションへのリンク。例： &lt;code&gt;L&amp;lt;perlsyn/&quot;For Loops&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a4be78347858c96ca4af009ad12e83b583efec3" translate="yes" xml:space="preserve">
          <source>Link to a section in this manual page. E.g., &lt;code&gt;L&amp;lt;/&quot;Object Methods&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">このマニュアルページのセクションへのリンク。例： &lt;code&gt;L&amp;lt;/&quot;Object Methods&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c060793b58b5034337a483732320e10661d5f930" translate="yes" xml:space="preserve">
          <source>Linker Problems in Irix</source>
          <target state="translated">Irixでのリンカの問題</target>
        </trans-unit>
        <trans-unit id="91ca4118a066d9e15d3000d362f4707600eb85a4" translate="yes" xml:space="preserve">
          <source>Linking with C</source>
          <target state="translated">Cとのリンク</target>
        </trans-unit>
        <trans-unit id="632c0116497fe7ec21df3b6015a06dceee2c2e46" translate="yes" xml:space="preserve">
          <source>Links to an absolute URL. For example, &lt;code&gt;L&amp;lt;&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;The Perl Home Page|&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">絶対URLへのリンク。たとえば、 &lt;code&gt;L&amp;lt;&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;The Perl Home Page|&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70dabca050ab89452a19f7ca28b4c05e928c7006" translate="yes" xml:space="preserve">
          <source>Links to an absolute URL. For example, &lt;code&gt;L&amp;lt;http://www.perl.org/&amp;gt;&lt;/code&gt; or &lt;code&gt;L&amp;lt;The Perl Home Page|http://www.perl.org/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">絶対URLへのリンク。たとえば、 &lt;code&gt;L&amp;lt;http://www.perl.org/&amp;gt;&lt;/code&gt; または &lt;code&gt;L&amp;lt;The Perl Home Page|http://www.perl.org/&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="83bd0efc45cc0fd69905b50d3c8ace24dff4bd31" translate="yes" xml:space="preserve">
          <source>Linux (x86, ARM, IA64)</source>
          <target state="translated">Linux (x86,ARM,IA64)</target>
        </trans-unit>
        <trans-unit id="9ec4f23be8f3036b01885e23831c9d8422f8e25f" translate="yes" xml:space="preserve">
          <source>Linux Magazine</source>
          <target state="translated">Linuxマガジン</target>
        </trans-unit>
        <trans-unit id="2187306118c639d0411d3a1f0eea679c435e121f" translate="yes" xml:space="preserve">
          <source>Linux-specific shortcuts to specify the &lt;code&gt;O_NONBLOCK&lt;/code&gt; and &lt;code&gt;FD_CLOEXEC&lt;/code&gt; flags during a &lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket(2)&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/socket&quot;&gt;socket(2)&lt;/a&gt;&lt;/code&gt; 呼び出し中に &lt;code&gt;O_NONBLOCK&lt;/code&gt; および &lt;code&gt;FD_CLOEXEC&lt;/code&gt; フラグを指定するLinux固有のショートカット。</target>
        </trans-unit>
        <trans-unit id="27bd3b3373ebdc99eec5274a7f58493e52c3e65c" translate="yes" xml:space="preserve">
          <source>Linux-specific shortcuts to specify the &lt;code&gt;O_NONBLOCK&lt;/code&gt; and &lt;code&gt;FD_CLOEXEC&lt;/code&gt; flags during a &lt;code&gt;socket(2)&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;socket(2)&lt;/code&gt; 呼び出し中に &lt;code&gt;O_NONBLOCK&lt;/code&gt; フラグと &lt;code&gt;FD_CLOEXEC&lt;/code&gt; フラグを指定するためのLinux固有のショートカット。</target>
        </trans-unit>
        <trans-unit id="7aaedd94529deff9e35130dfc5ae5796d73c29a7" translate="yes" xml:space="preserve">
          <source>LinuxThreads is now obsolete on Linux, and caching &lt;code&gt;getpid()&lt;/code&gt; like this made embedding perl unnecessarily complex (since you'd have to manually update the value of $$), so now &lt;code&gt;$$&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid()&lt;/a&gt;&lt;/code&gt; will always return the same values as the underlying C library.</source>
          <target state="translated">LinuxThreadsはLinuxでは廃止され、このように &lt;code&gt;getpid()&lt;/code&gt; をキャッシュすると、perlの埋め込みが不必要に複雑になったため（$$の値を手動で更新する必要があるため）、 &lt;code&gt;$$&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/getppid&quot;&gt;getppid()&lt;/a&gt;&lt;/code&gt; は常に同じ値を返すようになりました。基礎となるCライブラリ。</target>
        </trans-unit>
        <trans-unit id="dc8491ab221544187737048d61360d36010b4180" translate="yes" xml:space="preserve">
          <source>LinuxThreads is now obsolete on Linux, and caching &lt;code&gt;getpid()&lt;/code&gt; like this made embedding perl unnecessarily complex (since you'd have to manually update the value of $$), so now &lt;code&gt;$$&lt;/code&gt; and &lt;code&gt;getppid()&lt;/code&gt; will always return the same values as the underlying C library.</source>
          <target state="translated">LinuxThreadsはLinuxで廃止され、このように &lt;code&gt;getpid()&lt;/code&gt; をキャッシュすると、perlの埋め込みが不必要に複雑になり（$$の値を手動で更新する必要があるため）、 &lt;code&gt;$$&lt;/code&gt; と &lt;code&gt;getppid()&lt;/code&gt; は常にと同じ値を返します。基礎となるCライブラリ。</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="29c9d470de128561132f93d1517a546cc93f2ef7" translate="yes" xml:space="preserve">
          <source>List (default all) actions, breakpoints and watch expressions</source>
          <target state="translated">アクション、ブレークポイント、ウォッチ式のリスト(デフォルトはすべて)。</target>
        </trans-unit>
        <trans-unit id="4f52dc39b8b924455cea92e15110632fa2352d9b" translate="yes" xml:space="preserve">
          <source>List &lt;code&gt;incr+1&lt;/code&gt; lines starting at &lt;code&gt;min&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; から始まる &lt;code&gt;incr+1&lt;/code&gt; 行をリストします。</target>
        </trans-unit>
        <trans-unit id="1e2df285394e85b16a4d8402b790e30140168156" translate="yes" xml:space="preserve">
          <source>List &lt;code&gt;incr+1&lt;/code&gt; lines starting at &lt;code&gt;min&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; から始まる &lt;code&gt;incr+1&lt;/code&gt; 行をリストします。</target>
        </trans-unit>
        <trans-unit id="605938e2092b0e1418a4f6b86421f6d6aadd1b04" translate="yes" xml:space="preserve">
          <source>List Operators (Rightward)</source>
          <target state="translated">リスト演算子(右方向)</target>
        </trans-unit>
        <trans-unit id="ea9c7040ec8c47c48d227dc0186264691d25d357" translate="yes" xml:space="preserve">
          <source>List a single line.</source>
          <target state="translated">単行本をリストアップします。</target>
        </trans-unit>
        <trans-unit id="43aa9239459d3ee11976e9110444e7fe09843446" translate="yes" xml:space="preserve">
          <source>List all build directories of distributions that have been tested successfully but have not yet been installed. See also &lt;code&gt;install_tested&lt;/code&gt; .</source>
          <target state="translated">正常にテストされたが、まだインストールされていないディストリビューションのすべてのビルドディレクトリを一覧表示します。 &lt;code&gt;install_tested&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="5da3c7994a3d61d34d9ca024ec7ac9503eb70a17" translate="yes" xml:space="preserve">
          <source>List all installed modules with their versions</source>
          <target state="translated">インストールされているすべてのモジュールのバージョンを一覧表示</target>
        </trans-unit>
        <trans-unit id="370cf490cd3daa93894252ec5158b9c077c837f2" translate="yes" xml:space="preserve">
          <source>List assignment in scalar context returns the number of elements produced by the expression on the right side of the assignment:</source>
          <target state="translated">スカラコンテキストでのリスト代入は、代入の右側の式によって生成された要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="45a5a84ab7f0560a41223626f7533a814734e050" translate="yes" xml:space="preserve">
          <source>List constants</source>
          <target state="translated">リスト定数</target>
        </trans-unit>
        <trans-unit id="55d8dbd99ddbc695154ff187f15da85365e9e00f" translate="yes" xml:space="preserve">
          <source>List constants are lists, not arrays. To index or slice them, they must be placed in parentheses.</source>
          <target state="translated">リスト定数はリストであり、配列ではありません。インデックスを付けたりスライスしたりするには、それらを括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="c9230863aaf9811a194bc857bc0390c6326f13d9" translate="yes" xml:space="preserve">
          <source>List constants are not inlined unless you are using Perl v5.20 or higher. In v5.20 or higher, they are still not read-only, but that may change in future versions.</source>
          <target state="translated">Perl v5.20 以降を使用していない限り、リスト定数はインライン化されません。v5.20 以降ではまだ読み込み専用ではありませんが、将来のバージョンでは変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5d9c4f2773006f355714dc08c4a64f23012ee969" translate="yes" xml:space="preserve">
          <source>List directories as they are searched</source>
          <target state="translated">検索されたディレクトリをリストアップ</target>
        </trans-unit>
        <trans-unit id="0865484d5c94ce11961bf51a22181df567484e88" translate="yes" xml:space="preserve">
          <source>List first window of lines from subroutine.</source>
          <target state="translated">サブルーチンからの行の最初のウィンドウをリストアップします。</target>
        </trans-unit>
        <trans-unit id="31c6b16c6806f38a9abbe22903640ceb79a76b77" translate="yes" xml:space="preserve">
          <source>List form of piped open not implemented</source>
          <target state="translated">パイピングオープンのリスト形式は実装されていません。</target>
        </trans-unit>
        <trans-unit id="19ff7a57a5555c3820cb313b589ff3e43f5801b3" translate="yes" xml:space="preserve">
          <source>List lines &lt;code&gt;min&lt;/code&gt; through &lt;code&gt;max&lt;/code&gt; . &lt;code&gt;l -&lt;/code&gt; is synonymous to &lt;code&gt;-&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; から &lt;code&gt;max&lt;/code&gt; までの行をリストします。 &lt;code&gt;l -&lt;/code&gt; と同義です &lt;code&gt;-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6413580d4bb0dff3a638f87f617274c7d3fa5ba" translate="yes" xml:space="preserve">
          <source>List lines &lt;code&gt;min&lt;/code&gt; through &lt;code&gt;max&lt;/code&gt;. &lt;code&gt;l -&lt;/code&gt; is synonymous to &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; から &lt;code&gt;max&lt;/code&gt; 行を一覧表示します。 &lt;code&gt;l -&lt;/code&gt; と同義です &lt;code&gt;-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b2f29a334d30972bc8a9045f68baae0dc3ec6d8" translate="yes" xml:space="preserve">
          <source>List next window of lines.</source>
          <target state="translated">次のウィンドウの行をリストアップします。</target>
        </trans-unit>
        <trans-unit id="5359c0166343c48f9f035c401a1a6fd47a5d3c30" translate="yes" xml:space="preserve">
          <source>List of</source>
          <target state="translated">一覧表</target>
        </trans-unit>
        <trans-unit id="f96221500e5dff9b2e5b2d0d52441200d3fe59bd" translate="yes" xml:space="preserve">
          <source>List of CHECK values</source>
          <target state="translated">CHECK値の一覧</target>
        </trans-unit>
        <trans-unit id="c7b2bf307cdc3add3b560b3cf9c6d9638160226a" translate="yes" xml:space="preserve">
          <source>List of _CHECK_ values</source>
          <target state="translated">CHECK_の値のリスト</target>
        </trans-unit>
        <trans-unit id="3fbb95646db607d6a530d90010130a90b221c352" translate="yes" xml:space="preserve">
          <source>List of four elements.</source>
          <target state="translated">4つの要素のリスト。</target>
        </trans-unit>
        <trans-unit id="42e3128876d62127f71da94d3596564663a283a7" translate="yes" xml:space="preserve">
          <source>List of handlers that have been registered.</source>
          <target state="translated">登録されているハンドラの一覧です。</target>
        </trans-unit>
        <trans-unit id="942be8ea6b09c5850208d901ada25608760abbb7" translate="yes" xml:space="preserve">
          <source>List of libraries that need to be linked with when linking a perl binary which includes this extension. Only those libraries that actually exist are included. These are written to a file and used when linking perl.</source>
          <target state="translated">この拡張機能を含むPerlバイナリをリンクする際に、リンクする必要のあるライブラリの一覧です。実際に存在するライブラリのみが含まれています。これらはファイルに書き出され、perlをリンクする際に使用されます。</target>
        </trans-unit>
        <trans-unit id="25c88a0a5acb1948d9832032688b4c20061ebe55" translate="yes" xml:space="preserve">
          <source>List of lines in currently loaded file.</source>
          <target state="translated">現在読み込まれているファイルの行のリスト。</target>
        </trans-unit>
        <trans-unit id="e2c751f0916c7f646852ece1bcfc81eae8d05b8f" translate="yes" xml:space="preserve">
          <source>List of object files, defaults to '$(BASEEXT)$(OBJ_EXT)', but can be a long string or an array containing all object files, e.g. &quot;tkpBind.o tkpButton.o tkpCanvas.o&quot; or [&quot;tkpBind.o&quot;, &quot;tkpButton.o&quot;, &quot;tkpCanvas.o&quot;]</source>
          <target state="translated">デフォルトは'$(BASEEXT)$(OBJ_EXT)'ですが、全てのオブジェクトファイルを含む長い文字列か配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="5c1db3ac864f059bce7875da034cf8c723ca64e1" translate="yes" xml:space="preserve">
          <source>List of those libraries that are needed but can be linked in dynamically at run time on this platform. SunOS/Solaris does not need this because ld records the information (from LDLOADLIBS) into the object file. This list is used to create a .bs (bootstrap) file.</source>
          <target state="translated">必要なライブラリのリストですが、このプラットフォームでは実行時に動的にリンクすることができます。SunOS/Solarisでは、ldは(LDLOADLIBSからの)情報をオブジェクトファイルに記録するので、これは必要ありません。このリストは、.bs (ブートストラップ)ファイルを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5a0cf49d555f62d3d4e052b6541ec31f30e51960" translate="yes" xml:space="preserve">
          <source>List of those libraries which can or must be linked into the shared library when created using ld. These may be static or dynamic libraries. LD_RUN_PATH is a colon separated list of the directories in LDLOADLIBS. It is passed as an environment variable to the process that links the shared library.</source>
          <target state="translated">ldを使用して作成したときに共有ライブラリにリンクできる、またはリンクしなければならないライブラリのリスト。これらのライブラリは静的ライブラリまたは動的ライブラリです。LD_RUN_PATHは、LDLOADLIBS内のディレクトリのコロンで区切られたリストです。これは、共有ライブラリをリンクするプロセスに環境変数として渡されます。</target>
        </trans-unit>
        <trans-unit id="ebae2310224ffad36ada7ef466a7460f111ae936" translate="yes" xml:space="preserve">
          <source>List of three arguments.</source>
          <target state="translated">3つの引数のリスト。</target>
        </trans-unit>
        <trans-unit id="be97ad6178a15f3564cecdb6dad31b0f188dfe5e" translate="yes" xml:space="preserve">
          <source>List of three elements. Second is an array reference; third is a string.</source>
          <target state="translated">3つの要素のリスト。2番目は配列参照、3番目は文字列です。</target>
        </trans-unit>
        <trans-unit id="1fc4309268bf3b8e9ff25ca0646ecdbee8a86829" translate="yes" xml:space="preserve">
          <source>List of two elements: &lt;code&gt;typemap&lt;/code&gt; element from &lt;code&gt;%args&lt;/code&gt;; current working directory.</source>
          <target state="translated">2つの要素のリスト： &lt;code&gt;%args&lt;/code&gt; の &lt;code&gt;typemap&lt;/code&gt; 要素; 現在の作業ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="2868b38546ebc5d5d8fcc48449cbafe99e0ffc2a" translate="yes" xml:space="preserve">
          <source>List out all pre-prompt Perl command actions.</source>
          <target state="translated">すべてのプロンプト前のPerlコマンドアクションをリストアップします。</target>
        </trans-unit>
        <trans-unit id="b2fda16ba9c5deaf514c003911417714fab1f6a2" translate="yes" xml:space="preserve">
          <source>List out post-prompt Perl command actions.</source>
          <target state="translated">ポストプロンプトのPerlコマンドアクションをリストアップします。</target>
        </trans-unit>
        <trans-unit id="b85c9a7b9160438294dae5b78f69ab7f0a89edb4" translate="yes" xml:space="preserve">
          <source>List out pre-prompt debugger commands.</source>
          <target state="translated">プリプロンプト・デバッガ・コマンドをリストアウトします。</target>
        </trans-unit>
        <trans-unit id="c433826fb0a01d3298adbd1cec75ac79e366fe70" translate="yes" xml:space="preserve">
          <source>List previous window of lines.</source>
          <target state="translated">行の前のウィンドウを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="6828bea1ce4a116f7cab52f1ff715d22eb63c991" translate="yes" xml:space="preserve">
          <source>List subroutine names [not] matching the regex.</source>
          <target state="translated">正規表現にマッチするサブルーチン名[not]をリストアップします。</target>
        </trans-unit>
        <trans-unit id="080ba82727d1a06b5322db16c03b125c4027029d" translate="yes" xml:space="preserve">
          <source>List the modules by the specified authors.</source>
          <target state="translated">指定した作者のモジュールを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="07d9bedea128205ac0ccf6ba46b2275b7e0355dc" translate="yes" xml:space="preserve">
          <source>List value constructors</source>
          <target state="translated">リスト値のコンストラクタ</target>
        </trans-unit>
        <trans-unit id="3b83ab8a9c9e9daa0f3c240465a14ac3cfec98b6" translate="yes" xml:space="preserve">
          <source>List values are denoted by separating individual values by commas (and enclosing the list in parentheses where precedence requires it):</source>
          <target state="translated">リストの値は、個々の値をカンマで区切って表します(優先順位が必要な場合は括弧で囲みます)。</target>
        </trans-unit>
        <trans-unit id="9c332d7d437db4bb1a089aef08dedde1d03aa848" translate="yes" xml:space="preserve">
          <source>List values in scalar context</source>
          <target state="translated">スカラコンテキストでの値のリスト</target>
        </trans-unit>
        <trans-unit id="3e21f245885fcb8d2afb9ad390e31a12b2893368" translate="yes" xml:space="preserve">
          <source>List which methods may be called on the result of the evaluated expression. The expression may evaluated to a reference to a blessed object, or to a package name.</source>
          <target state="translated">評価された式の結果に対して、どのメソッドが呼び出されるかをリストアップします。この式は、祝福されたオブジェクトへの参照、またはパッケージ名に対して評価されます。</target>
        </trans-unit>
        <trans-unit id="d8403bab2922ebc2678fad6cf5cb327231181154" translate="yes" xml:space="preserve">
          <source>List::Util</source>
          <target state="translated">List::Util</target>
        </trans-unit>
        <trans-unit id="0553bce08d5ad663737a32d66e461a6fde4d42cc" translate="yes" xml:space="preserve">
          <source>List::Util - A selection of general-utility list subroutines</source>
          <target state="translated">List::Util-一般的なユーティリティリストのサブルーチンを選択する</target>
        </trans-unit>
        <trans-unit id="e6ae9327a79eb9d0433ed0271e4debca709ad198" translate="yes" xml:space="preserve">
          <source>List::Util::XS</source>
          <target state="translated">List::Util::XS</target>
        </trans-unit>
        <trans-unit id="6a577f2f652a9865e261b6b1b9108f10eb35a6b7" translate="yes" xml:space="preserve">
          <source>List::Util::XS - Indicate if List::Util was compiled with a C compiler</source>
          <target state="translated">List::Util::XS-List::Util が C コンパイラでコンパイルされているかどうかを示す</target>
        </trans-unit>
        <trans-unit id="577f684095ccbc8608cf104c7d53ed608fc27e62" translate="yes" xml:space="preserve">
          <source>Listed below are functions that are either completely unimplemented or else have been implemented differently on various platforms. Following each description will be, in parentheses, a list of platforms that the description applies to.</source>
          <target state="translated">以下のリストは、完全に実装されていないか、あるいは様々なプラットフォームで異なる実装がなされている機能です。それぞれの説明の後には、その説明が適用されるプラットフォームのリストを括弧で囲んでいます。</target>
        </trans-unit>
        <trans-unit id="4785b15f1934e1c153e7966e7a875d6c72382735" translate="yes" xml:space="preserve">
          <source>Listed below are functions that are either completely unimplemented or else have been implemented differently on various platforms. Preceding each description will be, in parentheses, a list of platforms that the description applies to.</source>
          <target state="translated">以下に示すのは、完全に実装されていないか、あるいは様々なプラットフォームで異なる実装がなされている機能です。それぞれの説明の前には、その説明が適用されるプラットフォームのリストを括弧で囲んでいます。</target>
        </trans-unit>
        <trans-unit id="c518fb067439705f3ff5fa5b4a62b9be3afa31ae" translate="yes" xml:space="preserve">
          <source>Listen</source>
          <target state="translated">Listen</target>
        </trans-unit>
        <trans-unit id="484fc3879bbb2d1bc964407cad68611698ffceb6" translate="yes" xml:space="preserve">
          <source>Listen =&amp;gt; INT</source>
          <target state="translated">聞く=&amp;gt; INT</target>
        </trans-unit>
        <trans-unit id="6dea679b659a4bf77b36d5e329bc16ce43947db3" translate="yes" xml:space="preserve">
          <source>Listen should be an integer value or left unset.</source>
          <target state="translated">Listen は整数値か、未設定のままにしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="c2100cb1ce0771ebf5c66d34af2b3109940abd61" translate="yes" xml:space="preserve">
          <source>Listing available encodings</source>
          <target state="translated">リスティング可能なエンコーディング</target>
        </trans-unit>
        <trans-unit id="0827ddb4ed49430cfb1658042c94b816fe2859f3" translate="yes" xml:space="preserve">
          <source>Lists all available encodings, one per line, in case-insensitive order. Note that only the canonical names are listed; many aliases exist. For example, the names are case-insensitive, and many standard and common aliases work, such as &quot;latin1&quot; for &quot;ISO-8859-1&quot;, or &quot;ibm850&quot; instead of &quot;cp850&quot;, or &quot;winlatin1&quot; for &quot;cp1252&quot;. See &lt;a href=&quot;Encode::Supported&quot;&gt;Encode::Supported&lt;/a&gt; for a full discussion.</source>
          <target state="translated">使用可能なすべてのエンコーディングを、大文字と小文字を区別しない順序で1行に1つずつ一覧表示します。正規名のみがリストされていることに注意してください。多くのエイリアスが存在します。たとえば、名前では大文字と小文字が区別されず、「ISO-8859-1」の場合は「latin1」、「cp850」の代わりに「ibm850」、「cp1252」の場合は「winlatin1」など、多くの標準および一般的なエイリアスが機能します。 。詳細については、&lt;a href=&quot;Encode::Supported&quot;&gt;Encode :: Supported&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dd09e23888b88d8b373ca4d91ed87f3200a2d3a8" translate="yes" xml:space="preserve">
          <source>Lists all available encodings, one per line, in case-insensitive order. Note that only the canonical names are listed; many aliases exist. For example, the names are case-insensitive, and many standard and common aliases work, such as &quot;latin1&quot; for &quot;ISO-8859-1&quot;, or &quot;ibm850&quot; instead of &quot;cp850&quot;, or &quot;winlatin1&quot; for &quot;cp1252&quot;. See &lt;a href=&quot;encode/supported&quot;&gt;Encode::Supported&lt;/a&gt; for a full discussion.</source>
          <target state="translated">使用可能なすべてのエンコーディングを、大文字と小文字を区別せずに1行に1つずつ一覧表示します。正規名のみがリストされていることに注意してください。多くのエイリアスが存在します。たとえば、名前は大文字と小文字を区別せず、「ISO-8859-1」の場合は「latin1」、「cp850」の代わりに「ibm850」、「cp1252」の場合は「winlatin1」など、多くの標準エイリアスと一般的なエイリアスが機能します。 。詳細については、&lt;a href=&quot;encode/supported&quot;&gt;Encode :: Supported&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e4e9b933aa47588e5dca2e5d37752f783428eced" translate="yes" xml:space="preserve">
          <source>Lists known issues and incompatibilities; &lt;code&gt;&lt;a href=&quot;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&quot;&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">既知の問題と非互換性をリストします。 &lt;code&gt;&lt;a href=&quot;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&quot;&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="974b5b0f1238cd291d1764b895cc33d03520382a" translate="yes" xml:space="preserve">
          <source>Lists known issues and incompatibilities; &lt;code&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/code&gt;</source>
          <target state="translated">既知の問題と非互換性を一覧表示します。 &lt;code&gt;http://gd.tuwien.ac.at/utils/archivers/star/README.otherbugs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14b97602e24bdf80cc94582bec0e02d773290ecc" translate="yes" xml:space="preserve">
          <source>Lists may be assigned to only when each element of the list is itself legal to assign to:</source>
          <target state="translated">リストは、リストの各要素がそれ自体が合法的に割り当てることができる場合にのみ割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="c5a2888cd48d3f7aa2e98cd01aee025fae061e84" translate="yes" xml:space="preserve">
          <source>Literal ASCII TAB characters are now allowed in strings (and treated as &lt;code&gt;\t&lt;/code&gt;).</source>
          <target state="translated">リテラルASCIITAB文字が文字列で許可されるようになりました（ &lt;code&gt;\t&lt;/code&gt; として扱われます）。</target>
        </trans-unit>
        <trans-unit id="0213917f82ae95d80bb5989c7abf1f8ddda65a97" translate="yes" xml:space="preserve">
          <source>Literal conversions</source>
          <target state="translated">リテラル変換</target>
        </trans-unit>
        <trans-unit id="527da73e406ed03ebcb72acc86b11111c4a02fcb" translate="yes" xml:space="preserve">
          <source>Literal uses of &lt;code&gt;{&lt;/code&gt; were deprecated in Perl 5.20, and some uses of it started to give deprecation warnings since. These cases were made fatal in Perl 5.26. Due to an oversight, not all cases of a use of a literal &lt;code&gt;{&lt;/code&gt; got a deprecation warning. Some cases started warning in Perl 5.26, and were made fatal in Perl 5.30. Other cases started in Perl 5.28, and were made fatal in 5.32.</source>
          <target state="translated">&lt;code&gt;{&lt;/code&gt; のリテラル使用はPerl5.20で非推奨になり、それ以降、一部の使用で非推奨の警告が表示されるようになりました。これらのケースはPerl5.26で致命的になりました。見落としのため、リテラル &lt;code&gt;{&lt;/code&gt; の使用のすべてのケースで非推奨の警告が表示されたわけではありません。一部のケースはPerl5.26で警告を開始し、Perl5.30で致命的になりました。その他のケースはPerl5.28で始まり、5.32で致命的になりました。</target>
        </trans-unit>
        <trans-unit id="5147c26642d830ab230197606d4cf605ea045572" translate="yes" xml:space="preserve">
          <source>Literal vertical space in [] is illegal except under /x in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">[]のリテラル垂直スペースは、正規表現の/ xの下を除いて違法です。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="74a788cee27d549015a0786732c662e05cdd7567" translate="yes" xml:space="preserve">
          <source>Lithuania</source>
          <target state="translated">Lithuania</target>
        </trans-unit>
        <trans-unit id="91575e88330ca0a393b09df24c2f9572b830580f" translate="yes" xml:space="preserve">
          <source>Ll</source>
          <target state="translated">Ll</target>
        </trans-unit>
        <trans-unit id="ddcb77ff769ea54ca622848f6bedd4004fa4f4fa" translate="yes" xml:space="preserve">
          <source>Load</source>
          <target state="translated">Load</target>
        </trans-unit>
        <trans-unit id="7006eb18a426109e42c387f4ebcfd765f549c2c8" translate="yes" xml:space="preserve">
          <source>Load &lt;code&gt;local::lib&lt;/code&gt; (think like &lt;code&gt;-I&lt;/code&gt; for loading lib paths). Too bad &lt;code&gt;-l&lt;/code&gt; was already taken.</source>
          <target state="translated">&lt;code&gt;local::lib&lt;/code&gt; ロードします（libパスをロードするための &lt;code&gt;-I&lt;/code&gt; のように考えてください）。残念な &lt;code&gt;-l&lt;/code&gt; はすでに取られました。</target>
        </trans-unit>
        <trans-unit id="9ec750aae1f96446e6d4c2da3ed090454e5eb47c" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;&quot;MATH LIBRARY&quot;&lt;/a&gt;.</source>
          <target state="translated">別の数学ライブラリをロードし&lt;a href=&quot;#MATH-LIBRARY&quot;&gt;ます&lt;/a&gt;。「MATHLIBRARY」を参照してください。</target>
        </trans-unit>
        <trans-unit id="dfb2a396182dae27999fc6c1e32de77266a8eaa5" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;MATH LIBRARY&lt;/a&gt;.</source>
          <target state="translated">別の数学&lt;a href=&quot;#MATH-LIBRARY&quot;&gt;ライブラリを&lt;/a&gt;ロードします。MATHLIBRARYを参照してください。</target>
        </trans-unit>
        <trans-unit id="97f3b50d057eea8062f2d58a28647a93d5cccf56" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#Math-Library&quot;&gt;&quot;Math Library&quot;&lt;/a&gt;.</source>
          <target state="translated">別の数学&lt;a href=&quot;#Math-Library&quot;&gt;ライブラリを&lt;/a&gt;ロードします。「数学ライブラリ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="44a359a67f4a6d92b34e91186041854ab36b846b" translate="yes" xml:space="preserve">
          <source>Load a different math lib, see &lt;a href=&quot;#Math-Library&quot;&gt;Math Library&lt;/a&gt;.</source>
          <target state="translated">別の数学&lt;a href=&quot;#Math-Library&quot;&gt;ライブラリを&lt;/a&gt;ロードします。数学ライブラリを参照してください。</target>
        </trans-unit>
        <trans-unit id="26c9c83eb2148dde20d87505b058099c18e18cdd" translate="yes" xml:space="preserve">
          <source>Load a harness replacement class.</source>
          <target state="translated">ハーネス交換クラスをロードします。</target>
        </trans-unit>
        <trans-unit id="3ab8a70aafed206e446c89069a6d6fa487286375" translate="yes" xml:space="preserve">
          <source>Load functions only on demand</source>
          <target state="translated">オンデマンドのみの負荷機能</target>
        </trans-unit>
        <trans-unit id="1a6bf14720b01e30066247880d6ebc3b8752469c" translate="yes" xml:space="preserve">
          <source>Load subroutines only on demand</source>
          <target state="translated">サブルーチンをオンデマンドでのみロード</target>
        </trans-unit>
        <trans-unit id="d792f29bac65ac823df5b7bb2984ae1cc96bc863" translate="yes" xml:space="preserve">
          <source>Load the C Fcntl.h defines</source>
          <target state="translated">CのFcntl.hの定義をロードします。</target>
        </trans-unit>
        <trans-unit id="41ca4f17e3678d8fa4513a23c57b7eb4caf19350" translate="yes" xml:space="preserve">
          <source>Load the file that has the CPAN configuration data. This should have the same format as the standard</source>
          <target state="translated">CPAN設定データを含むファイルをロードする。これは、標準の</target>
        </trans-unit>
        <trans-unit id="240fa313380982dac95b53cefb0c75077c026845" translate="yes" xml:space="preserve">
          <source>Load the state from a file</source>
          <target state="translated">ファイルから状態を読み込む</target>
        </trans-unit>
        <trans-unit id="15cac79f7c6e29d135cac8ed345f5ee74ad107b9" translate="yes" xml:space="preserve">
          <source>Load various IO modules</source>
          <target state="translated">様々なIOモジュールのロード</target>
        </trans-unit>
        <trans-unit id="59ee7110b16f2ee9279e975045a71b3b2753da6e" translate="yes" xml:space="preserve">
          <source>LoadFile</source>
          <target state="translated">LoadFile</target>
        </trans-unit>
        <trans-unit id="9cd272bfb77c57c025d780a7adea2d2f4a39e607" translate="yes" xml:space="preserve">
          <source>Loading DLLs and ordinals in DLLs</source>
          <target state="translated">DLLと序列をDLLでロードする</target>
        </trans-unit>
        <trans-unit id="9030f4b47aa2abda4199dcc7ac6f1cb72c9d6947" translate="yes" xml:space="preserve">
          <source>Loads &lt;code&gt;ExtUtils::Typemaps::Excommunicated&lt;/code&gt;, instantiates an object, and dumps it as an embeddable typemap for use directly in your XS file.</source>
          <target state="translated">&lt;code&gt;ExtUtils::Typemaps::Excommunicated&lt;/code&gt; ロードし、オブジェクトをインスタンス化し、XSファイルで直接使用するための埋め込み可能なタイプマップとしてダンプします。</target>
        </trans-unit>
        <trans-unit id="478aa4ede7f109d8fe9ce74fc47e542819bd58d3" translate="yes" xml:space="preserve">
          <source>Loads Perl library from &lt;code&gt;$exedir/../dll/lib/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$exedir/../dll/lib/&lt;/code&gt; からPerlライブラリをロードします。</target>
        </trans-unit>
        <trans-unit id="7a90cb96849f4ba39ef789f1926fb83b5216a75c" translate="yes" xml:space="preserve">
          <source>Loads a dynamic link library into memory and returns its module handle. This handle can be used with Win32::GetProcAddress() and Win32::FreeLibrary(). This function is deprecated. Use the Win32::API module instead.</source>
          <target state="translated">ダイナミックリンクライブラリをメモリにロードし、そのモジュールハンドルを返します。このハンドルは、Win32::GetProcAddress()および Win32::FreeLibrary()で使用できます。この関数は非推奨です。代わりに Win32::API モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="3c5210c4cd9f4652e7e267673947f320fe973e2f" translate="yes" xml:space="preserve">
          <source>Loads a specified module and imports the default functions to the specified package.</source>
          <target state="translated">指定されたモジュールをロードし、指定されたパッケージにデフォルトの関数をインポートします。</target>
        </trans-unit>
        <trans-unit id="27e6bb733433394f480bba5733da627a3f3f2045" translate="yes" xml:space="preserve">
          <source>Loads a specified module and imports the default functions.</source>
          <target state="translated">指定したモジュールをロードし、デフォルトの関数をインポートします。</target>
        </trans-unit>
        <trans-unit id="0912e26f46f2862f9bc8f741f795bbefe5ccdd67" translate="yes" xml:space="preserve">
          <source>Loads a specified module to the specified package.</source>
          <target state="translated">指定されたパッケージに指定されたモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="6ec299bdf7d010c1eee08526d7bd0161603d96f6" translate="yes" xml:space="preserve">
          <source>Loads a specified module.</source>
          <target state="translated">指定されたモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="e32cb3524fbd8048df24f387ab1d261efd4fc528" translate="yes" xml:space="preserve">
          <source>Loads the DLL LIBRARYNAME and calls the function DllRegisterServer.</source>
          <target state="translated">DLL LIBRARYNAMEをロードし、DllRegisterServer関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6cb5e0e921899c7d9aa0924124cdcb6c8851e055" translate="yes" xml:space="preserve">
          <source>Loads the DLL LIBRARYNAME and calls the function DllUnregisterServer.</source>
          <target state="translated">DLL ライブラリ名をロードし、関数 DllUnregisterServer を呼び出します。</target>
        </trans-unit>
        <trans-unit id="194a22a082c50fda80d3d163aa9acda90d655677" translate="yes" xml:space="preserve">
          <source>Loads the handler classes defined in &lt;a href=&quot;#config&quot;&gt;&quot;config&quot;&lt;/a&gt;. For example, given a config:</source>
          <target state="translated">&lt;a href=&quot;#config&quot;&gt;「config」で&lt;/a&gt;定義されたハンドラークラスをロードします。たとえば、構成が与えられた場合：</target>
        </trans-unit>
        <trans-unit id="4a312f5b131e98b974541ced8733bc202310a2a5" translate="yes" xml:space="preserve">
          <source>Loads the handler classes defined in &lt;a href=&quot;#config&quot;&gt;config&lt;/a&gt;. For example, given a config:</source>
          <target state="translated">&lt;a href=&quot;#config&quot;&gt;configで&lt;/a&gt;定義されたハンドラクラスをロードします。たとえば、設定が与えられた場合：</target>
        </trans-unit>
        <trans-unit id="2288e3df6687abb6b74ab409c03ac48535ed3150" translate="yes" xml:space="preserve">
          <source>Loads the module whose name is pointed to by the string part of &lt;code&gt;name&lt;/code&gt;. Note that the actual module name, not its filename, should be given. Eg, &quot;Foo::Bar&quot; instead of &quot;Foo/Bar.pm&quot;. ver, if specified and not NULL, provides version semantics similar to &lt;code&gt;use Foo::Bar VERSION&lt;/code&gt;. The optional trailing arguments can be used to specify arguments to the module's &lt;code&gt;import()&lt;/code&gt; method, similar to &lt;code&gt;use Foo::Bar VERSION LIST&lt;/code&gt;; their precise handling depends on the flags. The flags argument is a bitwise-ORed collection of any of &lt;code&gt;PERL_LOADMOD_DENY&lt;/code&gt;, &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt;, or &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; (or 0 for no flags).</source>
          <target state="translated">nameの文字列部分が &lt;code&gt;name&lt;/code&gt; を指すモジュールをロードします。ファイル名ではなく、実際のモジュール名を指定する必要があることに注意してください。例：「Foo /Bar.pm」の代わりに「Foo :: Bar」。verは、指定されていてNULLでない場合、 &lt;code&gt;use Foo::Bar VERSION&lt;/code&gt; を使用するのと同様のバージョンセマンティクスを提供します。オプションの末尾の引数は、 &lt;code&gt;use Foo::Bar VERSION LIST&lt;/code&gt; を使用するのと同様に、モジュールの &lt;code&gt;import()&lt;/code&gt; メソッドへの引数を指定するために使用できます。それらの正確な処理はフラグに依存します。flags引数は、 &lt;code&gt;PERL_LOADMOD_DENY&lt;/code&gt; 、 &lt;code&gt;PERL_LOADMOD_NOIMPORT&lt;/code&gt; 、または &lt;code&gt;PERL_LOADMOD_IMPORT_OPS&lt;/code&gt; （またはフラグがない場合は0）のいずれかのビット演算コレクションです。</target>
        </trans-unit>
        <trans-unit id="ec6dda1ab28094112405a17ad65b1a4c1c089d63" translate="yes" xml:space="preserve">
          <source>Loads the module whose name is pointed to by the string part of name. Note that the actual module name, not its filename, should be given. Eg, &quot;Foo::Bar&quot; instead of &quot;Foo/Bar.pm&quot;. flags can be any of PERL_LOADMOD_DENY, PERL_LOADMOD_NOIMPORT, or PERL_LOADMOD_IMPORT_OPS (or 0 for no flags). ver, if specified and not NULL, provides version semantics similar to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION&lt;/code&gt; . The optional trailing SV* arguments can be used to specify arguments to the module's import() method, similar to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION LIST&lt;/code&gt; . They must be terminated with a final NULL pointer. Note that this list can only be omitted when the PERL_LOADMOD_NOIMPORT flag has been used. Otherwise at least a single NULL pointer to designate the default import list is required.</source>
          <target state="translated">nameの文字列部分が指す名前のモジュールをロードします。ファイル名ではなく、実際のモジュール名を指定する必要があることに注意してください。たとえば、「Foo / Bar.pm」の代わりに「Foo :: Bar」。フラグは、PERL_LOADMOD_DENY、PERL_LOADMOD_NOIMPORT、またはPERL_LOADMOD_IMPORT_OPS（フラグなしの場合は0）のいずれかです。 verが指定され、NULLでない場合、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用するの&lt;/a&gt;と同様のバージョンセマンティクスを提供します。オプションの後続のSV *引数を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Foo::Bar VERSION LIST&lt;/code&gt; を使用するのと同様に、モジュールのimport（）メソッドに引数を指定できます。それらは、最後のNULLポインターで終了する必要があります。このリストは、PERL_LOADMOD_NOIMPORTフラグが使用されている場合にのみ省略できることに注意してください。それ以外の場合は、デフォルトのインポートリストを指定する少なくとも1つのNULLポインタが必要です。</target>
        </trans-unit>
        <trans-unit id="9af5b63a9cb9853b15da20ea4f2739623dc82021" translate="yes" xml:space="preserve">
          <source>Loc.U</source>
          <target state="translated">Loc.U</target>
        </trans-unit>
        <trans-unit id="2c161b9d2652a245b17c473e85af35d98c964e27" translate="yes" xml:space="preserve">
          <source>Loc_ar.U</source>
          <target state="translated">Loc_ar.U</target>
        </trans-unit>
        <trans-unit id="40cd835b717a79093cb71f794169679d3511a012" translate="yes" xml:space="preserve">
          <source>Loc_sed.U</source>
          <target state="translated">Loc_sed.U</target>
        </trans-unit>
        <trans-unit id="b62225661a9783f7a6a2c6e6f754c699e4dfbc8e" translate="yes" xml:space="preserve">
          <source>Local Locales</source>
          <target state="translated">ローカル地域</target>
        </trans-unit>
        <trans-unit id="00b7d8ac28ed6d0a7686172cc54cac83dde1640a" translate="yes" xml:space="preserve">
          <source>Local configuration data for libnet</source>
          <target state="translated">libnet のローカル設定データ</target>
        </trans-unit>
        <trans-unit id="2073176912b2b8b08756b78673e90f32f9412f5a" translate="yes" xml:space="preserve">
          <source>Local hosts should normally respond to pings within milliseconds. However, on a very congested network it may take up to 3 seconds or longer to receive an echo packet from the remote host. If the timeout is set too low under these conditions, it will appear that the remote host is not reachable (which is almost the truth).</source>
          <target state="translated">ローカルホストは通常ミリ秒以内にpingに応答します。しかし、非常に混雑したネットワークでは、リモートホストからのエコーパケットを受信するのに3秒以上かかることがあります。このような状況下でタイムアウトが低すぎると、リモートホストに到達できないように見えてしまいます (これはほぼ真実です)。</target>
        </trans-unit>
        <trans-unit id="5ce134969fa4b38910928473dcd30b211050ffe0" translate="yes" xml:space="preserve">
          <source>Local patches</source>
          <target state="translated">ローカルパッチ</target>
        </trans-unit>
        <trans-unit id="7c690298b945c1b37cc5a68671d9b773af108fb2" translate="yes" xml:space="preserve">
          <source>Local settings</source>
          <target state="translated">ローカル設定</target>
        </trans-unit>
        <trans-unit id="53b6cc762cf095afa6ac2b3f63960344e064751c" translate="yes" xml:space="preserve">
          <source>LocalAddr =&amp;gt; STRING</source>
          <target state="translated">LocalAddr =&amp;gt; STRING</target>
        </trans-unit>
        <trans-unit id="3479965474a90e55723b0f25860802c53406e91d" translate="yes" xml:space="preserve">
          <source>LocalAddrInfo =&amp;gt; ARRAY</source>
          <target state="translated">LocalAddrInfo =&amp;gt; ARRAY</target>
        </trans-unit>
        <trans-unit id="21dabe6c778984c0b6509601202090746e803410" translate="yes" xml:space="preserve">
          <source>LocalHost =&amp;gt; STRING</source>
          <target state="translated">LocalHost =&amp;gt; STRING</target>
        </trans-unit>
        <trans-unit id="de9b0a319772622c356126ecbc602688d6563804" translate="yes" xml:space="preserve">
          <source>LocalPort</source>
          <target state="translated">LocalPort</target>
        </trans-unit>
        <trans-unit id="0b1eb8a4f4bc001c793e0eea29e95b79014c3314" translate="yes" xml:space="preserve">
          <source>LocalPort =&amp;gt; STRING</source>
          <target state="translated">LocalPort =&amp;gt; STRING</target>
        </trans-unit>
        <trans-unit id="e824d201d4911c9432bae5428ad07c94b3eaabb9" translate="yes" xml:space="preserve">
          <source>LocalService =&amp;gt; STRING</source>
          <target state="translated">LocalService =&amp;gt; STRING</target>
        </trans-unit>
        <trans-unit id="3d14f2f76fdd1296a6f5facde16712babc39964d" translate="yes" xml:space="preserve">
          <source>Locale '%s' contains (at least) the following characters which have unexpected meanings: %s The Perl program will use the expected meanings</source>
          <target state="translated">ロケール '%s' には (少なくとも)予期しない意味を持つ以下の文字が含まれています:%s Perl プログラムは予期した意味を使用します。</target>
        </trans-unit>
        <trans-unit id="0705df55ca759471ac9bb2feda1c0edcd06beb2b" translate="yes" xml:space="preserve">
          <source>Locale '%s' may not work well.%s</source>
          <target state="translated">ロケール '%s' がうまく動作しない場合があります。</target>
        </trans-unit>
        <trans-unit id="29d6a411ea768d6e339737cbc631007347c4656b" translate="yes" xml:space="preserve">
          <source>Locale is not completely independent. The</source>
          <target state="translated">ロケールは完全に独立しているわけではありません。ましてや、そのような</target>
        </trans-unit>
        <trans-unit id="2ecddee9e3454bdf482ac7866a6d45e31677a35b" translate="yes" xml:space="preserve">
          <source>Locale-aware XS code</source>
          <target state="translated">ロケールを考慮した XS コード</target>
        </trans-unit>
        <trans-unit id="944d1183f1e4f233c0975643c2ef4f71a04349e2" translate="yes" xml:space="preserve">
          <source>Locale-related functions and macros</source>
          <target state="translated">ローカライズ関連機能とマクロ</target>
        </trans-unit>
        <trans-unit id="e8ffa7590c272791934be71fefca2983045527a4" translate="yes" xml:space="preserve">
          <source>Locale/*.pl</source>
          <target state="translated">Locale/*.pl</target>
        </trans-unit>
        <trans-unit id="1f8d3cc6a62e48187b6914a4e521248e770e765b" translate="yes" xml:space="preserve">
          <source>Locale::Country</source>
          <target state="translated">Locale::Country</target>
        </trans-unit>
        <trans-unit id="711ea7f4d30a8250ee3539542d2d19015e5ecdec" translate="yes" xml:space="preserve">
          <source>Locale::Country - standard codes for country identification</source>
          <target state="translated">Locale::Country-国を識別するための標準コード</target>
        </trans-unit>
        <trans-unit id="745a3f2e63c8527b20fd7a0effbd2a4f6ce52b10" translate="yes" xml:space="preserve">
          <source>Locale::Currency</source>
          <target state="translated">Locale::Currency</target>
        </trans-unit>
        <trans-unit id="c9d7708330810bdeae6d8e6f009ab34981fb3578" translate="yes" xml:space="preserve">
          <source>Locale::Currency - standard codes for currency identification</source>
          <target state="translated">Locale::Currency-通貨識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="a2f93f9cc8bf81f232cf25c9d6170a176bd3c8f2" translate="yes" xml:space="preserve">
          <source>Locale::Language</source>
          <target state="translated">Locale::Language</target>
        </trans-unit>
        <trans-unit id="cbd3f9670295ab004a97a8799e46f114e838f7c9" translate="yes" xml:space="preserve">
          <source>Locale::Language - standard codes for language identification</source>
          <target state="translated">Locale::Language-言語識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="a9d8403dd9e14d9c4a74e42c449f4f4083d77a9b" translate="yes" xml:space="preserve">
          <source>Locale::Maketext</source>
          <target state="translated">Locale::Maketext</target>
        </trans-unit>
        <trans-unit id="58f6640492c0aec7031aee510f4ce0bcac4b2a22" translate="yes" xml:space="preserve">
          <source>Locale::Maketext - framework for localization</source>
          <target state="translated">Locale::Maketext-ローカライズのためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="e28b946d05a8b6576abf4d9a367dd68f9175de8e" translate="yes" xml:space="preserve">
          <source>Locale::Maketext does not use any special syntax to differentiate bracket notation methods from normal class or object methods. This design makes it vulnerable to format string attacks whenever it is used to process strings provided by untrusted users.</source>
          <target state="translated">Locale::Maketextは、括弧記法のメソッドを通常のクラスやオブジェクトのメソッドと区別するための特別な構文を使用していません。この設計により、信頼されていないユーザから提供された文字列を処理するために使用された場合、フォーマット文字列攻撃に対して脆弱になります。</target>
        </trans-unit>
        <trans-unit id="d9b3c0ab0595b5cdd83722214636b337ad110e39" translate="yes" xml:space="preserve">
          <source>Locale::Maketext does support blacklist and whitelist functionality to limit which methods may be called as bracket notation methods.</source>
          <target state="translated">Locale::Maketextは、ブラックリストとホワイトリスト機能をサポートしており、どのメソッドがブラケット表記法として呼ばれるかを制限することができます。</target>
        </trans-unit>
        <trans-unit id="4ffc03bfc5c484b62d9372e1420bdf253f5b3f52" translate="yes" xml:space="preserve">
          <source>Locale::Maketext offers a variety of methods, which fall into three categories:</source>
          <target state="translated">Locale::Maketextには様々な方法がありますが、それらは3つのカテゴリに分類されます。</target>
        </trans-unit>
        <trans-unit id="0376cece04f73d6cbbeda92b6c96963d0c327dc4" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Cookbook</source>
          <target state="translated">Locale::Maketext::Cookbook</target>
        </trans-unit>
        <trans-unit id="e7d10311ab56423a10a6401a972e219ed34731ef" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Cookbook - recipes for using Locale::Maketext</source>
          <target state="translated">Locale::Maketext::Cookbook-Locale::Maketext を使ったレシピ</target>
        </trans-unit>
        <trans-unit id="a5723d6c0c42ee05086667e38fd4249fe7082e8c" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Guts</source>
          <target state="translated">Locale::Maketext::Guts</target>
        </trans-unit>
        <trans-unit id="63bea57dac9566b0aa40481ae087dc206e13e8ee" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Guts - Deprecated module to load Locale::Maketext utf8 code</source>
          <target state="translated">Locale::Maketext::Guts-Locale::Maketext utf8 コードを読み込むための非推奨モジュール</target>
        </trans-unit>
        <trans-unit id="b14392dcdae7ce47ee917b41b3e73f1a3b72f5e1" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::GutsLoader</source>
          <target state="translated">Locale::Maketext::GutsLoader</target>
        </trans-unit>
        <trans-unit id="9810a1053985ebcf2f9b5544107826a653c00a65" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::GutsLoader - Deprecated module to load Locale::Maketext utf8 code</source>
          <target state="translated">Locale::Maketext::GutsLoader-Locale::Maketext utf8 コードを読み込むための非推奨モジュール</target>
        </trans-unit>
        <trans-unit id="a239b132192c48779d9a0ee403ad81c93ab75902" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Simple</source>
          <target state="translated">Locale::Maketext::Simple</target>
        </trans-unit>
        <trans-unit id="a942c8cd15bd2125fe42db2a486e9feebf1cfa35" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::Simple - Simple interface to Locale::Maketext::Lexicon</source>
          <target state="translated">Locale::Maketext::Simple-Locale::Maketext::Lexicon へのシンプルなインターフェイス</target>
        </trans-unit>
        <trans-unit id="31310b7b3a3180c515d5a42eececda4ed908af34" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::TPJ13</source>
          <target state="translated">Locale::Maketext::TPJ13</target>
        </trans-unit>
        <trans-unit id="b7159c2a5a142d4334282c641ce964b49b8e476c" translate="yes" xml:space="preserve">
          <source>Locale::Maketext::TPJ13 -- article about software localization</source>
          <target state="translated">Locale::Maketext::TPJ13 --ソフトウェアのローカリゼーションに関する記事</target>
        </trans-unit>
        <trans-unit id="1ee43c469c3726bd84652212d4ca88cc335a5967" translate="yes" xml:space="preserve">
          <source>Locale::Script</source>
          <target state="translated">Locale::Script</target>
        </trans-unit>
        <trans-unit id="8f438e3df7fafcc383b453fd3213f4653605e9c0" translate="yes" xml:space="preserve">
          <source>Locale::Script - standard codes for script identification</source>
          <target state="translated">Locale::Script-スクリプト識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="a222060e32289bf6910ac4a07a10733be500bd99" translate="yes" xml:space="preserve">
          <source>Locales</source>
          <target state="translated">Locales</target>
        </trans-unit>
        <trans-unit id="92e24d2019e2a32f9830f5f805e70b0e0aef8c2f" translate="yes" xml:space="preserve">
          <source>Locales according to the default UCA rules include am (Amharic) without &lt;code&gt;[reorder Ethi]&lt;/code&gt;, bg (Bulgarian) without &lt;code&gt;[reorder Cyrl]&lt;/code&gt;, chr (Cherokee) without &lt;code&gt;[reorder Cher]&lt;/code&gt;, de (German), en (English), fr (French), ga (Irish), id (Indonesian), it (Italian), ka (Georgian) without &lt;code&gt;[reorder Geor]&lt;/code&gt;, mn (Mongolian) without &lt;code&gt;[reorder Cyrl Mong]&lt;/code&gt;, ms (Malay), nl (Dutch), pt (Portuguese), ru (Russian) without &lt;code&gt;[reorder Cyrl]&lt;/code&gt;, sw (Swahili), zu (Zulu).</source>
          <target state="translated">デフォルトのUCA規則に従ったロケールには、am（アムハラ語）、 &lt;code&gt;[reorder Ethi]&lt;/code&gt; &lt;code&gt;[reorder Cyrl]&lt;/code&gt; なし、bg（ブルガリア語）、[reorder Cyrl]なし、chr（チェロキー語）、[reorder &lt;code&gt;[reorder Cher]&lt;/code&gt; なし、de（ドイツ語）、en（英語）、fr（フランス語）、ga（アイルランド語）、id（インドネシア語）、it（イタリア語）、ka（グルジア語）、 &lt;code&gt;[reorder Geor]&lt;/code&gt; &lt;code&gt;[reorder Cyrl Mong]&lt;/code&gt; なし、mn（モンゴル語）、[reorder Cyrl Mong]なし、ms（マレー語）、nl（オランダ語）、pt （ポルトガル語）、ru（ロシア語） &lt;code&gt;[reorder Cyrl]&lt;/code&gt; なし、sw（スワヒリ語）、zu（ズール語）。</target>
        </trans-unit>
        <trans-unit id="f8764300ec3ae038b44ac23ce898f50ceb30676b" translate="yes" xml:space="preserve">
          <source>Locales are supported. There may be glitches when a locale is another EBCDIC code page which has some of the &lt;a href=&quot;#The-13-variant-characters&quot;&gt;code-page variant characters&lt;/a&gt; in other positions.</source>
          <target state="translated">ロケールがサポートされています。ロケールが別のEBCDICコードページであり、他の位置に&lt;a href=&quot;#The-13-variant-characters&quot;&gt;コードページバリアント文字の&lt;/a&gt;一部がある場合、不具合が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="33d4312ea8caf12dbb4ec71dca19ee7924926ead" translate="yes" xml:space="preserve">
          <source>Localization and Perl: gettext breaks, Maketext fixes</source>
          <target state="translated">ローカライズと Perl:gettext のブレーク、Maketext の修正</target>
        </trans-unit>
        <trans-unit id="32f83a14354ab144fa1eeefe381bdddf7ef6a4b6" translate="yes" xml:space="preserve">
          <source>Localization of elements of composite types</source>
          <target state="translated">複合型の要素のローカライズ</target>
        </trans-unit>
        <trans-unit id="87574e6a695fdc9051fd38476db62bcaa8e7cafd" translate="yes" xml:space="preserve">
          <source>Localization of globs</source>
          <target state="translated">グロブの局在化</target>
        </trans-unit>
        <trans-unit id="f2f69b5bf206324f99fe659a46e5c54c241d441a" translate="yes" xml:space="preserve">
          <source>Localization of special variables</source>
          <target state="translated">特殊変数のローカライズ</target>
        </trans-unit>
        <trans-unit id="56adc662b2ff25957a5294f0112a3c7b0d263e47" translate="yes" xml:space="preserve">
          <source>Localized deletion of elements of composite types</source>
          <target state="translated">複合型の要素の局所的な削除</target>
        </trans-unit>
        <trans-unit id="e60da19033e636198e96d7e490201c9c1369d134" translate="yes" xml:space="preserve">
          <source>Localizing &lt;code&gt;$.&lt;/code&gt; will not localize the filehandle's line count</source>
          <target state="translated">&lt;code&gt;$.&lt;/code&gt; ローカライズしています。ファイルハンドルの行数をローカライズしません</target>
        </trans-unit>
        <trans-unit id="8364e7e87819604234599a1511218996199f997e" translate="yes" xml:space="preserve">
          <source>Localizing changes</source>
          <target state="translated">ローカライズの変更</target>
        </trans-unit>
        <trans-unit id="f408eed5847840b83469388030b3326ba3bf4885" translate="yes" xml:space="preserve">
          <source>Localizing tied arrays or hashes does not work. After exiting the scope the arrays or the hashes are not restored.</source>
          <target state="translated">紐付けられた配列またはハッシュのローカライズが機能しません。スコープを終了しても、配列やハッシュは復元されません。</target>
        </trans-unit>
        <trans-unit id="00e0ebc3f4b2567f4695fa9503d51f87733e190d" translate="yes" xml:space="preserve">
          <source>Locate directory of original perl script</source>
          <target state="translated">オリジナルの perl スクリプトのディレクトリを探す</target>
        </trans-unit>
        <trans-unit id="c6294c5b9baff7ccda4385a76937e4c98b9c0e02" translate="yes" xml:space="preserve">
          <source>Locate the CV corresponding to the currently executing sub or eval. If &lt;code&gt;db_seqp&lt;/code&gt; is non_null, skip CVs that are in the DB package and populate &lt;code&gt;*db_seqp&lt;/code&gt; with the cop sequence number at the point that the DB:: code was entered. (This allows debuggers to eval in the scope of the breakpoint rather than in the scope of the debugger itself.)</source>
          <target state="translated">現在実行中のsubまたはevalに対応するCVを見つけます。 &lt;code&gt;db_seqp&lt;/code&gt; がnon_nullの場合、DBパッケージにあるCVをスキップし、DB ::コードが入力された時点で &lt;code&gt;*db_seqp&lt;/code&gt; にcopシーケンス番号を入力します。（これにより、デバッガーは、デバッガー自体のスコープではなく、ブレークポイントのスコープで評価できます。）</target>
        </trans-unit>
        <trans-unit id="cffe84cd97aaf675f786b03919bbd1aad3c3fe1d" translate="yes" xml:space="preserve">
          <source>Locate the CV corresponding to the currently executing sub or eval. If db_seqp is non_null, skip CVs that are in the DB package and populate *db_seqp with the cop sequence number at the point that the DB:: code was entered. (This allows debuggers to eval in the scope of the breakpoint rather than in the scope of the debugger itself.)</source>
          <target state="translated">現在実行中のsubやevalに対応するCVを探します.db_seqp が non_null の場合は、DB パッケージ内の CV をスキップして、*db_seqp に DB::コードが入力された時点での cop シーケンス番号を入力します。(これにより、デバッガはデバッガ自身のスコープではなく、ブレークポイントのスコープで eval を行うことができます)。</target>
        </trans-unit>
        <trans-unit id="f5cb0ec5fe28860a73ac5e9c7f201c2864475a69" translate="yes" xml:space="preserve">
          <source>Locates the full path to the script bin directory to allow the use of paths relative to the bin directory.</source>
          <target state="translated">script bin ディレクトリへのフルパスを探し、bin ディレクトリからの相対パスを使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="90f656c2cec82492063f2f19f63b0344475a8752" translate="yes" xml:space="preserve">
          <source>Location of Perl</source>
          <target state="translated">Perlの場所</target>
        </trans-unit>
        <trans-unit id="e526b099baebb5894aa471d61a7294aea38b4fdb" translate="yes" xml:space="preserve">
          <source>Lock the database with fd &amp;amp; flock.</source>
          <target state="translated">fd＆flockでデータベースをロックします。</target>
        </trans-unit>
        <trans-unit id="877d08a97c129fe96b732f20ebe8f52e02d93eca" translate="yes" xml:space="preserve">
          <source>Locking and error checking are left as an exercise for the reader. Don't forget them or you'll be quite sorry.</source>
          <target state="translated">ロックとエラーチェックは、読者のための練習として残しておきます。それらを忘れないようにしないと、かなり後悔することになります。</target>
        </trans-unit>
        <trans-unit id="5c812093b2212c9a68f04fea78f378e5c17f025b" translate="yes" xml:space="preserve">
          <source>Locking this for exclusive access [by specifying &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;$uShare&lt;/code&gt;] doesn't prevent access to the partitions on the disk nor their file systems. So other processes can still access any raw sectors within a partition and can use the file system on the disk as usual.</source>
          <target state="translated">[ &lt;code&gt;$uShare&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; を指定して]排他的アクセスのためにこれをロックしても、ディスク上のパーティションやそのファイルシステムへのアクセスが妨げられることはありません。したがって、他のプロセスは引き続きパーティション内の任意のrawセクターにアクセスでき、通常どおりディスク上のファイルシステムを使用できます。</target>
        </trans-unit>
        <trans-unit id="e083fbbbc4d1d6973e64d911c09f30a9d157b0ca" translate="yes" xml:space="preserve">
          <source>Locking this for exclusive access doesn't prevent access to the physical drive that the partition is on so other processes can still access the raw sectors that way. Locking this for exclusive access &lt;b&gt;does&lt;/b&gt; prevent other processes from opening the same raw partition and &lt;b&gt;does&lt;/b&gt; prevent access to the file system on it. It even prevents the current process from accessing the file system on that partition.</source>
          <target state="translated">排他的アクセスのためにこれをロックしても、パーティションが存在する物理ドライブへのアクセスが妨げられることはないため、他のプロセスは引き続きその方法でrawセクターにアクセスできます。排他的アクセスのためにこれをロックする&lt;b&gt;ん&lt;/b&gt;同じrawパーティションを開くことから、他のプロセスを防止し&lt;b&gt;ない&lt;/b&gt;、その上にファイルシステムへのアクセスを防止します。また、現在のプロセスがそのパーティション上のファイルシステムにアクセスするのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="d95da6ca83293caed356315f7966585c98bbeb01" translate="yes" xml:space="preserve">
          <source>Locking this for exclusive access prevents all access to the floppy.</source>
          <target state="translated">これを排他的アクセスのためにロックすると、フロッピーへのすべてのアクセスを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="66cac3a963a1045fd348fae956e2fc8becb2159a" translate="yes" xml:space="preserve">
          <source>Locking: The Trouble with fd</source>
          <target state="translated">ロックすること。fdのトラブル</target>
        </trans-unit>
        <trans-unit id="a0ee9e59f4952196e4f063486823a5e6655ed2ab" translate="yes" xml:space="preserve">
          <source>Locks and unlocks the value for an individual key of a hash. The value of a locked key cannot be changed.</source>
          <target state="translated">ハッシュの個々のキーの値をロックしたり、ロックを解除したりします。ロックされたキーの値を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="409c237554d2d89fa246a166165492e5479e6006" translate="yes" xml:space="preserve">
          <source>Locks are a handy tool to synchronize access to data, and using them properly is the key to safe shared data. Unfortunately, locks aren't without their dangers, especially when multiple locks are involved. Consider the following code:</source>
          <target state="translated">ロックはデータへのアクセスを同期させるための便利なツールであり、適切に使用することが安全な共有データの鍵となります。残念ながら、ロックには危険性があり、特に複数のロックが関与している場合には危険性があります。次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d77ca7a462f2ee37cd5eeb13d2720840dd8f730e" translate="yes" xml:space="preserve">
          <source>Locks are recursive, which means it's okay for a thread to lock a variable more than once. The lock will last until the outermost &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; on the variable goes out of scope. For example:</source>
          <target state="translated">ロックは再帰的です。つまり、スレッドが変数を複数回ロックしても問題ありません。ロックは、変数の最も外側の &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock()&lt;/a&gt;&lt;/code&gt; がスコープから外れるまで続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="c5da8053ebc549397001271ac2e0aa42fd2e1379" translate="yes" xml:space="preserve">
          <source>Locks are recursive, which means it's okay for a thread to lock a variable more than once. The lock will last until the outermost &lt;code&gt;lock()&lt;/code&gt; on the variable goes out of scope. For example:</source>
          <target state="translated">ロックは再帰的です。つまり、スレッドが変数を複数回ロックしても問題ありません。ロックは、変数の最も外側の &lt;code&gt;lock()&lt;/code&gt; がスコープから外れるまで続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="fc0486b135937b6c03b868507a94d272ff8ac6f4" translate="yes" xml:space="preserve">
          <source>Locks on variables only affect &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; calls--they do</source>
          <target state="translated">変数の &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; は、ロックの呼び出しにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="bf6b3c933353830be1f6195e3ebd4e20c5282db3" translate="yes" xml:space="preserve">
          <source>Locks on variables only affect &lt;code&gt;lock&lt;/code&gt; calls--they do</source>
          <target state="translated">変数の &lt;code&gt;lock&lt;/code&gt; はロック呼び出しにのみ影響します-それらは影響します</target>
        </trans-unit>
        <trans-unit id="5da97798dad8ca8d2be91a6ab0264ebfef22de7d" translate="yes" xml:space="preserve">
          <source>Locks record for a read operation for this process, while allowing other accessors to read the record.</source>
          <target state="translated">このプロセスの読み取り操作のためにレコードをロックし、他のアクセサがレコードを読み取れるようにします。</target>
        </trans-unit>
        <trans-unit id="c34a4fe30048f2f9c89009d31801cebec1a5e7be" translate="yes" xml:space="preserve">
          <source>Locks record for write.</source>
          <target state="translated">書き込み用のレコードをロックします。</target>
        </trans-unit>
        <trans-unit id="2494e49f95e86d62c9e1df9443b971b1071d1eb2" translate="yes" xml:space="preserve">
          <source>Log all messages up to debug:</source>
          <target state="translated">すべてのメッセージをログアップしてデバッグします。</target>
        </trans-unit>
        <trans-unit id="ac20548f5a2664c1934f84717b314a50501d6ebb" translate="yes" xml:space="preserve">
          <source>Log an error that can't be ignored.</source>
          <target state="translated">無視できないエラーをログに記録します。</target>
        </trans-unit>
        <trans-unit id="9f24d2b09c179c98a526a557d74f3d2be5514fb4" translate="yes" xml:space="preserve">
          <source>Log an error unless &lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt; ない限り、エラーをログに記録します。。</target>
        </trans-unit>
        <trans-unit id="352c5f44c11749156243d487f189c562b58e4995" translate="yes" xml:space="preserve">
          <source>Log an error unless &lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$parser-&amp;gt;no_whining( TRUE );&lt;/code&gt; ない限り、エラーをログに記録します。。</target>
        </trans-unit>
        <trans-unit id="598cba7875d82844d0ea4fd50137d27e20e9822b" translate="yes" xml:space="preserve">
          <source>Log critical messages, errors and warnings:</source>
          <target state="translated">重要なメッセージ、エラー、警告を記録します。</target>
        </trans-unit>
        <trans-unit id="1cc66c8eb58fd8fd2198272ffebc6331b40fb88c" translate="yes" xml:space="preserve">
          <source>Log debugging info to STDERR.</source>
          <target state="translated">デバッグ情報をSTDERRに記録する。</target>
        </trans-unit>
        <trans-unit id="2a127fbcd6604ca1cf80302b78e02d5ba87eed29" translate="yes" xml:space="preserve">
          <source>Log everything except informational messages:</source>
          <target state="translated">情報メッセージ以外はすべてログに記録してください。</target>
        </trans-unit>
        <trans-unit id="346e7edbc99f3e01ce84957ff3c99842429de19b" translate="yes" xml:space="preserve">
          <source>Log into the remote FTP server with the given login information. If no arguments are given then the &lt;code&gt;Net::FTP&lt;/code&gt; uses the &lt;code&gt;Net::Netrc&lt;/code&gt; package to lookup the login information for the connected host. If no information is found then a login of</source>
          <target state="translated">指定されたログイン情報を使用してリモートFTPサーバーにログインします。引数が指定されていない場合、 &lt;code&gt;Net::FTP&lt;/code&gt; は &lt;code&gt;Net::Netrc&lt;/code&gt; パッケージを使用して、接続されているホストのログイン情報を検索します。情報が見つからない場合、ログイン</target>
        </trans-unit>
        <trans-unit id="38711dd5aba31d74455f59112be713add52892b6" translate="yes" xml:space="preserve">
          <source>Log to UDP port on &lt;code&gt;$remotehost&lt;/code&gt; instead of logging locally:</source>
          <target state="translated">ローカルにログを記録する代わりに、 &lt;code&gt;$remotehost&lt;/code&gt; UDPポートにログを記録します。</target>
        </trans-unit>
        <trans-unit id="5e1bf4e3758f68132ff0d122f3d8b036581a8776" translate="yes" xml:space="preserve">
          <source>Log::Dispatch::Config::TestLog</source>
          <target state="translated">Log::Dispatch::Config::TestLog</target>
        </trans-unit>
        <trans-unit id="ef88b916547cdcd540b35fe969c4a4a3e3015dad" translate="yes" xml:space="preserve">
          <source>Logarithm base two [C99].</source>
          <target state="translated">対数基底2[C99]。</target>
        </trans-unit>
        <trans-unit id="126a3068c345063640bada367b1b3170b97166a9" translate="yes" xml:space="preserve">
          <source>Logging if DEBUG (constant)</source>
          <target state="translated">DEBUG(定数)の場合のロギング</target>
        </trans-unit>
        <trans-unit id="786908e4097f50192db248aa36b5528e31277867" translate="yes" xml:space="preserve">
          <source>Logical And</source>
          <target state="translated">論理的および</target>
        </trans-unit>
        <trans-unit id="4f0fe5e6156db1c8f396f9ada6968d19b442623d" translate="yes" xml:space="preserve">
          <source>Logical Defined-Or</source>
          <target state="translated">論理的に定義されたまたは</target>
        </trans-unit>
        <trans-unit id="27999dc9087d157951951d7c5ab5c57a64718d42" translate="yes" xml:space="preserve">
          <source>Logical Not</source>
          <target state="translated">論理的ではない</target>
        </trans-unit>
        <trans-unit id="65eac6118ebdd55aa38b41f70efdf532e567ffd8" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="c27af685856a54b17004644154867c40474db6e5" translate="yes" xml:space="preserve">
          <source>Logical or and Exclusive Or</source>
          <target state="translated">論理的または排他的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理的論理</target>
        </trans-unit>
        <trans-unit id="eaac42db96179506f42bd718fb8ac139cdc3650b" translate="yes" xml:space="preserve">
          <source>Logical paths specified by system variables containing comma-separated search lists are also allowed; hence &lt;code&gt;System:Modules&lt;/code&gt; is a valid filename, and the filesystem will prefix &lt;code&gt;Modules&lt;/code&gt; with each section of &lt;code&gt;System$Path&lt;/code&gt; until a name is made that points to an object on disk. Writing to a new file &lt;code&gt;System:Modules&lt;/code&gt; would be allowed only if &lt;code&gt;System$Path&lt;/code&gt; contains a single item list. The filesystem will also expand system variables in filenames if enclosed in angle brackets, so &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; would look for the file &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt; . The obvious implication of this is that &lt;b&gt;fully qualified filenames can start with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;/b&gt; and should be protected when &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is used for input.</source>
          <target state="translated">コンマ区切りの検索リストを含むシステム変数によって指定された論理パスも許可されます。したがって、 &lt;code&gt;System:Modules&lt;/code&gt; は有効なファイル名であり、ディスク上のオブジェクトを指す名前が作成されるまで、ファイルシステムは &lt;code&gt;System$Path&lt;/code&gt; 各セクションを &lt;code&gt;Modules&lt;/code&gt; 前に付けます。新しいファイル &lt;code&gt;System:Modules&lt;/code&gt; への書き込みは、 &lt;code&gt;System$Path&lt;/code&gt; に単一のアイテムリストが含まれている場合にのみ許可されます。ファイルシステムは、山かっこで囲まれている場合、ファイル名のシステム変数も展開するため、 &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; はファイル &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt; を探します。 「モジュール」。これの明らかな意味は、&lt;b&gt;完全修飾ファイル名が&lt;/b&gt;&lt;b&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で&lt;/b&gt;&lt;b&gt;始まる可能性があることです&lt;/b&gt;&lt;b&gt; &lt;/b&gt;また、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; を入力に使用する場合は保護する必要があります。</target>
        </trans-unit>
        <trans-unit id="720bfdf023a4623ae35ff74918f32bc525e4e4ef" translate="yes" xml:space="preserve">
          <source>Logical paths specified by system variables containing comma-separated search lists are also allowed; hence &lt;code&gt;System:Modules&lt;/code&gt; is a valid filename, and the filesystem will prefix &lt;code&gt;Modules&lt;/code&gt; with each section of &lt;code&gt;System$Path&lt;/code&gt; until a name is made that points to an object on disk. Writing to a new file &lt;code&gt;System:Modules&lt;/code&gt; would be allowed only if &lt;code&gt;System$Path&lt;/code&gt; contains a single item list. The filesystem will also expand system variables in filenames if enclosed in angle brackets, so &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; would look for the file &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt;. The obvious implication of this is that &lt;b&gt;fully qualified filenames can start with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/b&gt; and the three-argument form of &lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; should always be used.</source>
          <target state="translated">コンマ区切りの検索リストを含むシステム変数で指定された論理パスも許可されます。したがって、 &lt;code&gt;System:Modules&lt;/code&gt; は有効なファイル名であり、ファイルシステムは、ディスク上のオブジェクトを指す名前が付けられるまで、 &lt;code&gt;System$Path&lt;/code&gt; 各セクションで &lt;code&gt;Modules&lt;/code&gt; のプレフィックスを付けます。新しいファイルへの書き込み &lt;code&gt;System:Modules&lt;/code&gt; は、 &lt;code&gt;System$Path&lt;/code&gt; に単一のアイテムリストが含まれている場合にのみ許可されます。ファイルシステムは、山かっこで囲まれている場合、ファイル名のシステム変数も展開するため、 &lt;code&gt;&amp;lt;System$Dir&amp;gt;.Modules&lt;/code&gt; はファイル &lt;code&gt;$ENV{'System$Dir'} . 'Modules'&lt;/code&gt; を検索します。 'モジュール'。これの明らかな意味は、&lt;b&gt;完全修飾ファイル名は&lt;/b&gt;&lt;b&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で&lt;/b&gt;&lt;b&gt;始まる可能性があるということです。&lt;/b&gt;&lt;b&gt;&lt;/b&gt;そして、&lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; の&lt;/a&gt;3つの引数形式を常に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2fc415f0920fda900bfdba2744ed1d28349d4d7" translate="yes" xml:space="preserve">
          <source>Logically impossible constraints will be identified immediately by thrown exceptions.</source>
          <target state="translated">論理的に不可能な制約は、スローされた例外によって即座に特定されます。</target>
        </trans-unit>
        <trans-unit id="79852f7a308fa757ef46ef50b492fb84497039eb" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and returns its SHA-1/224/256/384/512 digest encoded as a Base64 string.</source>
          <target state="translated">論理的に引数を1つの文字列に結合し、Base64文字列としてエンコードされたSHA-1/224/256/384/512ダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="efb5f37aee3b9a117751bc32852449eef4e74e78" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and returns its SHA-1/224/256/384/512 digest encoded as a binary string.</source>
          <target state="translated">論理的に引数を1つの文字列に結合し、バイナリ文字列としてエンコードされたSHA-1/224/256/384/512ダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="a5c5c8e8c0f54246b1b313dd050b036a30efb0a2" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and returns its SHA-1/224/256/384/512 digest encoded as a hexadecimal string.</source>
          <target state="translated">論理的に引数を1つの文字列に結合し、16進数文字列としてエンコードされたSHA-1/224/256/384/512ダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="04b474494be5436c1b0b4486d175dd6df25d94bc" translate="yes" xml:space="preserve">
          <source>Logically joins the arguments into a single string, and uses it to update the current digest state. In other words, the following statements have the same effect:</source>
          <target state="translated">論理的に引数を1つの文字列に結合し、それを使用して現在のダイジェスト状態を更新します。つまり、以下の文でも同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="aaef8ae01439927f0a6ee227f2d792c666fabc4e" translate="yes" xml:space="preserve">
          <source>Login name of the person who ran the Configure script and answered the questions. This is used to tag both</source>
          <target state="translated">Configure スクリプトを実行して質問に答えた人のログイン名。これは</target>
        </trans-unit>
        <trans-unit id="30c490b4b408ece1deda10e7b62b5b4cba9be12b" translate="yes" xml:space="preserve">
          <source>Logs will go on as long as they have to.</source>
          <target state="translated">ログは必要な分だけ続く。</target>
        </trans-unit>
        <trans-unit id="463552e32614f1099d813cd725ccdec3ad1aa628" translate="yes" xml:space="preserve">
          <source>Long Doubles on Tru64</source>
          <target state="translated">Tru64のロング・ダブルス</target>
        </trans-unit>
        <trans-unit id="943010215619f82aa64612ba50a6ccaed4ede293" translate="yes" xml:space="preserve">
          <source>Long Doubles.</source>
          <target state="translated">ロングダブルス。</target>
        </trans-unit>
        <trans-unit id="4d248c964e944a2e6c6cbd3e67c194423372f025" translate="yes" xml:space="preserve">
          <source>Long doubles</source>
          <target state="translated">ロングダブルス</target>
        </trans-unit>
        <trans-unit id="a209ad07aac520c10047b0552ae5c1c4441aaadc" translate="yes" xml:space="preserve">
          <source>Long integers. This is equivalent to T_IV but explicitly casts the return to type &lt;code&gt;long&lt;/code&gt; . The default typemap for &lt;code&gt;long&lt;/code&gt; is T_IV.</source>
          <target state="translated">長整数。これはT_IVと同じですが、戻り値を &lt;code&gt;long&lt;/code&gt; 型に明示的にキャストします。 &lt;code&gt;long&lt;/code&gt; のデフォルトのタイプマップはT_IVです。</target>
        </trans-unit>
        <trans-unit id="39185f77c0d669e9592abefffabc259acc02445d" translate="yes" xml:space="preserve">
          <source>Long integers. This is equivalent to T_IV but explicitly casts the return to type &lt;code&gt;long&lt;/code&gt;. The default typemap for &lt;code&gt;long&lt;/code&gt; is T_IV.</source>
          <target state="translated">長整数。これはT_IVと同等ですが、明示的にreturnを &lt;code&gt;long&lt;/code&gt; 型にキャストします。 &lt;code&gt;long&lt;/code&gt; のデフォルトのタイプマップはT_IVです。</target>
        </trans-unit>
        <trans-unit id="210129fcaec84064f201e7b1b9a66e1a7acd7738" translate="yes" xml:space="preserve">
          <source>Long lines broken after an operator (except &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; ).</source>
          <target state="translated">演算子の後に長い行が壊れています（ &lt;code&gt;and&lt;/code&gt; および &lt;code&gt;or&lt;/code&gt; を除く）。</target>
        </trans-unit>
        <trans-unit id="82e02e558af4f23a10d83ce8c5069dd6822db360" translate="yes" xml:space="preserve">
          <source>Long lines broken after an operator (except &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;).</source>
          <target state="translated">演算子の後に長い行が壊れています（ &lt;code&gt;and&lt;/code&gt; および &lt;code&gt;or&lt;/code&gt; を除く）。</target>
        </trans-unit>
        <trans-unit id="106ccce59a41316ca39a9a555b12f40ffd8ebb31" translate="yes" xml:space="preserve">
          <source>Long plaguing users of MakeMaker based modules has been the problem of getting basic information about the module out of the sources</source>
          <target state="translated">MakeMakerベースのモジュールを使用しているユーザーは、ソースからモジュールの基本的な情報が得られないという問題に長年悩まされてきました。</target>
        </trans-unit>
        <trans-unit id="d680241590e9a19c54d2635978661f5bb8739734" translate="yes" xml:space="preserve">
          <source>Long regexps like this may impress your friends, but can be hard to decipher. In complex situations like this, the &lt;code&gt;//x&lt;/code&gt; modifier for a match is invaluable. It allows one to put nearly arbitrary whitespace and comments into a regexp without affecting their meaning. Using it, we can rewrite our 'extended' regexp in the more pleasing form</source>
          <target state="translated">このような長い正規表現は友達に感銘を与えるかもしれませんが、解読するのが難しい場合があります。このような複雑な状況では、マッチの &lt;code&gt;//x&lt;/code&gt; 修飾子は非常に重要です。これにより、意味に影響を与えることなく、ほぼ任意の空白とコメントを正規表現に入れることができます。それを使用して、「拡張」正規表現をより楽しい形式に書き換えることができます</target>
        </trans-unit>
        <trans-unit id="ea6c5bcada74abc0711c9dae9786d4c7cc139f2a" translate="yes" xml:space="preserve">
          <source>Long regexps like this may impress your friends, but can be hard to decipher. In complex situations like this, the &lt;code&gt;/x&lt;/code&gt; modifier for a match is invaluable. It allows one to put nearly arbitrary whitespace and comments into a regexp without affecting their meaning. Using it, we can rewrite our &quot;extended&quot; regexp in the more pleasing form</source>
          <target state="translated">このような長い正規表現は友達を感動させるかもしれませんが、解読するのは難しいかもしれません。このような複雑な状況では、一致の &lt;code&gt;/x&lt;/code&gt; 修飾子は非常に重要です。これにより、意味に影響を与えることなく、ほぼ任意の空白とコメントを正規表現に入れることができます。これを使用して、「拡張された」正規表現をより快適な形式に書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="4f9e2648c307f1adbbaa0fd205252907f8be6f2a" translate="yes" xml:space="preserve">
          <source>Long sequences of elsifs will turn into nested ternary operators, which B::Deparse doesn't know how to indent nicely.</source>
          <target state="translated">長いエルシフのシーケンスは入れ子になった三項演算子になりますが、これはB::Deparseがうまくインデントする方法を知りません。</target>
        </trans-unit>
        <trans-unit id="5e129104b85153fb31ba0fceac8d1f977b315428" translate="yes" xml:space="preserve">
          <source>Long-running opcodes</source>
          <target state="translated">ロングランオペコード</target>
        </trans-unit>
        <trans-unit id="cf4ff04cfe182e8bc5dadb069506e27cabf50333" translate="yes" xml:space="preserve">
          <source>Look - search for key in dictionary file</source>
          <target state="translated">Look-辞書ファイルでキーを検索</target>
        </trans-unit>
        <trans-unit id="6f72d2c8eec50883a232d838251fbb3eb807c0d1" translate="yes" xml:space="preserve">
          <source>Look around</source>
          <target state="translated">見回す</target>
        </trans-unit>
        <trans-unit id="2505a112819d0c19797962a0a34b656ddfcb7762" translate="yes" xml:space="preserve">
          <source>Look at &lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt; to find out. If you are not using the latest released version, please try to replicate your bug on the latest stable release.</source>
          <target state="translated">調べるために&lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;を見てください。最新のリリースバージョンを使用していない場合は、最新の安定版リリースでバグを複製してみてください。</target>
        </trans-unit>
        <trans-unit id="1788237e2a2e0b7dbd5185705c7d994a905e8de0" translate="yes" xml:space="preserve">
          <source>Look for a POD document named &lt;code&gt;$name&lt;/code&gt; in the cache. Returns the reference to the corresponding Pod::Cache::Item object or undef if not found.</source>
          <target state="translated">キャッシュで &lt;code&gt;$name&lt;/code&gt; PODドキュメントを探します。対応するPod :: Cache :: Itemオブジェクトへの参照を返します。見つからない場合はundefを返します。</target>
        </trans-unit>
        <trans-unit id="fbd0681ce0f07813305ee76bbda2b9bf4d9e94bf" translate="yes" xml:space="preserve">
          <source>Look for a node or index entry named &lt;code&gt;$name&lt;/code&gt; in the object. Returns the unique id of the node (i.e. the second element of the array stored in the node array) or undef if not found.</source>
          <target state="translated">オブジェクトで &lt;code&gt;$name&lt;/code&gt; ノードまたはインデックスエントリを探します。ノードの一意のID（ノード配列に格納されている配列の2番目の要素）を返すか、見つからない場合はundefを返します。</target>
        </trans-unit>
        <trans-unit id="b4c07166f0931c9bcbab98ad548fcca2101f03fd" translate="yes" xml:space="preserve">
          <source>Look in &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;'s SEE ALSO for more testing modules.</source>
          <target state="translated">で見て&lt;a href=&quot;Test::More&quot;&gt;テスト::詳しい&lt;/a&gt;のは、より多くのテストモジュールについても参照してください。</target>
        </trans-unit>
        <trans-unit id="123c1cf1f88ba14e6964d416656f6e7d8fd3e930" translate="yes" xml:space="preserve">
          <source>Look in &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;'s SEE ALSO for more testing modules.</source>
          <target state="translated">&lt;a href=&quot;more&quot;&gt;その他&lt;/a&gt;のテストモジュールについては、Test :: Moreを参照してください。</target>
        </trans-unit>
        <trans-unit id="0f1649ed1326706b3a529a44e1b35a34e5184e5a" translate="yes" xml:space="preserve">
          <source>Look up Perl documentation in Pod format.</source>
          <target state="translated">Pod形式でPerlのドキュメントを調べる。</target>
        </trans-unit>
        <trans-unit id="c69ec9ef84491acf135ee455e26c4726d6d3736b" translate="yes" xml:space="preserve">
          <source>Look up the entry in the cop hints hash</source>
          <target state="translated">警官のヒントハッシュのエントリを検索します。</target>
        </trans-unit>
        <trans-unit id="014395dfa88deac6c1367d0000e26afdf4422e38" translate="yes" xml:space="preserve">
          <source>Look up the entry in the cop hints hash &lt;code&gt;cophh&lt;/code&gt; with the key specified by &lt;code&gt;keypv&lt;/code&gt; and &lt;code&gt;keylen&lt;/code&gt;. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;COPHH_KEY_UTF8&lt;/code&gt; bit set, the key octets are interpreted as UTF-8, otherwise they are interpreted as Latin-1. &lt;code&gt;hash&lt;/code&gt; is a precomputed hash of the key string, or zero if it has not been precomputed. Returns a mortal scalar copy of the value associated with the key, or &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; if there is no value associated with the key.</source>
          <target state="translated">警官のヒントハッシュのエントリ見上げ &lt;code&gt;cophh&lt;/code&gt; キーで指定して &lt;code&gt;keypv&lt;/code&gt; と &lt;code&gt;keylen&lt;/code&gt; 。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;COPHH_KEY_UTF8&lt;/code&gt; のビットがセットされて、キーのオクテットは、そうでない場合、彼らはラテン-1として解釈され、UTF-8として解釈されています。 &lt;code&gt;hash&lt;/code&gt; は、キー文字列の事前計算されたハッシュです。事前計算されていない場合はゼロです。キーに関連付けられた値の致命的なスカラーコピーを返します。キーに関連付けられた値がない場合は &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="67f3f361744fabd99e65f601642d504f07f990e2" translate="yes" xml:space="preserve">
          <source>Look up the hint entry in the cop</source>
          <target state="translated">cop のヒントエントリを探してください。</target>
        </trans-unit>
        <trans-unit id="0fee7ddf829801d66655e7ce043a04dd396f49fc" translate="yes" xml:space="preserve">
          <source>Look up the hint entry in the cop &lt;code&gt;cop&lt;/code&gt; with the key specified by &lt;code&gt;keypv&lt;/code&gt; and &lt;code&gt;keylen&lt;/code&gt;. If &lt;code&gt;flags&lt;/code&gt; has the &lt;code&gt;COPHH_KEY_UTF8&lt;/code&gt; bit set, the key octets are interpreted as UTF-8, otherwise they are interpreted as Latin-1. &lt;code&gt;hash&lt;/code&gt; is a precomputed hash of the key string, or zero if it has not been precomputed. Returns a mortal scalar copy of the value associated with the key, or &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; if there is no value associated with the key.</source>
          <target state="translated">警官でヒントエントリ見上げ &lt;code&gt;cop&lt;/code&gt; キーで指定して &lt;code&gt;keypv&lt;/code&gt; と &lt;code&gt;keylen&lt;/code&gt; 。場合は &lt;code&gt;flags&lt;/code&gt; あり &lt;code&gt;COPHH_KEY_UTF8&lt;/code&gt; のビットがセットされて、キーのオクテットは、そうでない場合、彼らはラテン-1として解釈され、UTF-8として解釈されています。 &lt;code&gt;hash&lt;/code&gt; は、キー文字列の事前計算されたハッシュです。事前計算されていない場合はゼロです。キーに関連付けられた値の致命的なスカラーコピーを返します。キーに関連付けられた値がない場合は &lt;code&gt;&amp;amp;PL_sv_placeholder&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f10edb39dcb279e59fbd91c8271e8ebb8f360ce1" translate="yes" xml:space="preserve">
          <source>Look-around assertions are zero-width patterns which match a specific pattern without including it in &lt;code&gt;$&amp;amp;&lt;/code&gt; . Positive assertions match when their subpattern matches, negative assertions match when their subpattern fails. Look-behind matches text up to the current match position, look-ahead matches text following the current match position.</source>
          <target state="translated">ルックアラウンドアサーションは、 &lt;code&gt;$&amp;amp;&lt;/code&gt; に含めずに特定のパターンに一致するゼロ幅パターンです。正のアサーションはサブパターンが一致するときに一致し、負のアサーションはサブパターンが失敗するときに一致します。後読みは現在の一致位置までのテキストに一致し、先読みは現在の一致位置に続くテキストに一致します。</target>
        </trans-unit>
        <trans-unit id="66105958c37278697eabc3c9dfaee00ab8f9d704" translate="yes" xml:space="preserve">
          <source>Lookaround Assertions</source>
          <target state="translated">ルックアラウンド アサーション</target>
        </trans-unit>
        <trans-unit id="5aa1ce4ba86088b9e85e8744c8f85ec1b81ce088" translate="yes" xml:space="preserve">
          <source>Lookaround assertions are zero-width patterns which match a specific pattern without including it in &lt;code&gt;$&amp;amp;&lt;/code&gt;. Positive assertions match when their subpattern matches, negative assertions match when their subpattern fails. Lookbehind matches text up to the current match position, lookahead matches text following the current match position.</source>
          <target state="translated">ルックアラウンドアサーションは、 &lt;code&gt;$&amp;amp;&lt;/code&gt; に含めずに特定のパターンに一致する幅ゼロのパターンです。正のアサーションはサブパターンが一致すると一致し、負のアサーションはサブパターンが失敗すると一致します。ルックビハインドは現在の一致位置までのテキストと一致し、ルックアヘッドは現在の一致位置に続くテキストと一致します。</target>
        </trans-unit>
        <trans-unit id="b99f3f115e8bd3af8ea91944ca784a0a9cfdd772" translate="yes" xml:space="preserve">
          <source>Lookbehind longer than %d not implemented in regex m/%s/</source>
          <target state="translated">正規表現の m/%s/では、%d より長いルックバックが実装されていません。</target>
        </trans-unit>
        <trans-unit id="724a065c84668bb1516bf7e41f33f4d7062d0ec4" translate="yes" xml:space="preserve">
          <source>Looking ahead and looking behind</source>
          <target state="translated">前を見て後ろを見る</target>
        </trans-unit>
        <trans-unit id="ddd7aa41b84e676f5291b91d7146d3d34c4b037d" translate="yes" xml:space="preserve">
          <source>Looking at data and -w and v</source>
          <target state="translated">データと-wとvを見て</target>
        </trans-unit>
        <trans-unit id="afd51bda07c9e5b3e347f595bec67763e831628e" translate="yes" xml:space="preserve">
          <source>Looking at it another way, writing portable code is usually about willfully limiting your available choices. Naturally, it takes discipline and sacrifice to do that. The product of portability and convenience may be a constant. You have been warned.</source>
          <target state="translated">別の見方をすれば、ポータブルなコードを書くということは、通常、利用可能な選択肢を故意に制限することです。当然、そのためには規律と犠牲が必要です。移植性と利便性という産物は、不変のものかもしれません。あなたは警告されています。</target>
        </trans-unit>
        <trans-unit id="e8e461609613edac0a408d3ea9b1090c941ca168" translate="yes" xml:space="preserve">
          <source>Looking at your</source>
          <target state="translated">あなたを見て</target>
        </trans-unit>
        <trans-unit id="b9aa086b4410a1e5dda5b6bd9fecaa602b967f8c" translate="yes" xml:space="preserve">
          <source>Looking in to &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt; and modern Perl web frameworks is highly recommended, though; web programming in Perl has evolved a long way from the old days of simple CGI scripts.</source>
          <target state="translated">ただし、&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;および最新のPerl Webフレームワークを調べることを強くお勧めします。PerlでのWebプログラミングは、昔の単純なCGIスクリプトから長い道のりを歩んできました。</target>
        </trans-unit>
        <trans-unit id="b407a01503c3f111b5f6d36e40ef6584bf2fa1ec" translate="yes" xml:space="preserve">
          <source>Looking into &lt;a href=&quot;https://plackperl.org&quot;&gt;https://plackperl.org&lt;/a&gt; and modern Perl web frameworks is highly recommended, though; web programming in Perl has evolved a long way from the old days of simple CGI scripts.</source>
          <target state="translated">みる&lt;a href=&quot;https://plackperl.org&quot;&gt;https://plackperl.org&lt;/a&gt;と近代的なPerlのWebフレームワーク強くお勧めします、しかし、PerlでのWebプログラミングは、昔の単純なCGIスクリプトから大きく進化しました。</target>
        </trans-unit>
        <trans-unit id="24076d6129adc62ded56328acb2536c0df4e3f06" translate="yes" xml:space="preserve">
          <source>Looking up every message is not the easiest way, so let perl to do it for you. Use the diagnostics pragma with turns perl's normal messages into longer discussions on the topic.</source>
          <target state="translated">すべてのメッセージを調べるのは最も簡単な方法ではありません。診断プラグマを使って、Perl の通常のメッセージをトピックについての長い議論に変えてください。</target>
        </trans-unit>
        <trans-unit id="0cda5c2d87b5464569d98d6b83dc0ced023afb49" translate="yes" xml:space="preserve">
          <source>Looking up module information / loading at runtime</source>
          <target state="translated">モジュール情報の検索/実行時の読み込み</target>
        </trans-unit>
        <trans-unit id="747df9a5145420389182a3a0e2f8fb4f1afad4e4" translate="yes" xml:space="preserve">
          <source>Looks OK, after it's been through the syntax check (perl -c scriptname), we run it and all we get is a blank line again! Hmmmm.</source>
          <target state="translated">構文チェック(perl -c scriptname)を通過した後、実行してみると、またもや空行しか出てこない! うーん。</target>
        </trans-unit>
        <trans-unit id="79047f1eed1c43aae002a2db39c10123a7158dcc" translate="yes" xml:space="preserve">
          <source>Looks ahead one (Unicode) character in the text currently being lexed. Returns the codepoint (unsigned integer value) of the next character, or -1 if lexing has reached the end of the input text. To consume the peeked character, use &lt;a href=&quot;#lex_read_unichar&quot;&gt;&quot;lex_read_unichar&quot;&lt;/a&gt;.</source>
          <target state="translated">現在語られているテキストの1つの（Unicode）文字を先読みします。次の文字のコードポイント（符号なし整数値）を返します。字句解析が入力テキストの最後に達した場合は-1を返します。&lt;a href=&quot;#lex_read_unichar&quot;&gt;ピークした&lt;/a&gt;文字を消費するには、「lex_read_unichar」を使用します。</target>
        </trans-unit>
        <trans-unit id="9e1ff3f5f8cd27194462e5af7c79ade692faba9a" translate="yes" xml:space="preserve">
          <source>Looks ahead one (Unicode) character in the text currently being lexed. Returns the codepoint (unsigned integer value) of the next character, or -1 if lexing has reached the end of the input text. To consume the peeked character, use &lt;a href=&quot;#lex_read_unichar&quot;&gt;lex_read_unichar&lt;/a&gt;.</source>
          <target state="translated">現在字句解析されているテキストの1文字（Unicode）を先読みします。次の文字のコードポイント（符号なし整数値）を返します。字句解析が入力テキストの終わりに達した場合は-1を返します。&lt;a href=&quot;#lex_read_unichar&quot;&gt;ピークされた&lt;/a&gt;文字を消費するには、lex_read_unicharを使用します。</target>
        </trans-unit>
        <trans-unit id="56a09e0b7dcffea4a7ed21e9b73140689a5030bc" translate="yes" xml:space="preserve">
          <source>Looks for MakeMaker-like</source>
          <target state="translated">MakeMakerに似たものを探す</target>
        </trans-unit>
        <trans-unit id="f560b4b8c550fee26628fb62462e2a0f00ebfb7f" translate="yes" xml:space="preserve">
          <source>Looks for Perl DLL in the directory &lt;code&gt;$exedir/../dll&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;$exedir/../dll&lt;/code&gt; ディレクトリでPerl DLLを探します。</target>
        </trans-unit>
        <trans-unit id="0e20c33c03f2909dd222479a34a94e62a5aa2710" translate="yes" xml:space="preserve">
          <source>Looks good, let's just continue off the end of the script:</source>
          <target state="translated">良さそうだ、台本の最後の方から続けよう。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
