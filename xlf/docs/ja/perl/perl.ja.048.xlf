<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="261136bd75aafd5cdd3130fb700c6549b50d82b1" translate="yes" xml:space="preserve">
          <source>Usage might be something like:</source>
          <target state="translated">用法はこんな感じかもしれません。</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="82df0013720cd7586b2bc95bd024b2fab925070f" translate="yes" xml:space="preserve">
          <source>Use &quot;opaque&quot; data type for the C types matched by the regular expression, even if these types are &lt;code&gt;typedef&lt;/code&gt; -equivalent to types from typemaps. Should not be used without &lt;b&gt;-x&lt;/b&gt;.</source>
          <target state="translated">正規表現に一致するCの型には、これらの型が &lt;code&gt;typedef&lt;/code&gt; から型マップの型と同等であっても、「不透明」データ型を使用します。&lt;b&gt;-x&lt;/b&gt;なしでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3c21be167d639b35ddaa57a08912b97d5e9dff41" translate="yes" xml:space="preserve">
          <source>Use &quot;tie&quot; to open the database.</source>
          <target state="translated">データベースを開くには「TIE」を使用します。</target>
        </trans-unit>
        <trans-unit id="4c6d07e8046e85c144f5081da5bd8baf9030e3a5" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Strip&quot;&gt;HTML::Strip&lt;/a&gt;, or &lt;a href=&quot;http://search.cpan.org/perldoc/HTML::FormatText&quot;&gt;HTML::FormatText&lt;/a&gt; which not only removes HTML but also attempts to do a little simple formatting of the resulting plain text.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Strip&quot;&gt;HTML :: Strip&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/perldoc/HTML::FormatText&quot;&gt;HTML :: FormatText&lt;/a&gt;を使用します。これは、HTMLを削除するだけでなく、結果として得られるプレーンテキストの簡単なフォーマットも行います。</target>
        </trans-unit>
        <trans-unit id="a5b53467807b9027de0ba1ae32437de79640c9fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;text/wrap&quot;&gt;Text::Wrap&lt;/a&gt; (part of the standard Perl distribution):</source>
          <target state="translated">使用&lt;a href=&quot;text/wrap&quot;&gt;テキスト::ラップ&lt;/a&gt;（標準のPerlディストリビューションの一部）：</target>
        </trans-unit>
        <trans-unit id="87276cc5955780242b6240d9ad22eaa36930d92c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:alias&lt;/code&gt; to give your own lexically scoped nicknames to existing characters, or even to give unnamed private-use characters useful names.</source>
          <target state="translated">&lt;code&gt;:alias&lt;/code&gt; を使用して、独自のレキシカルスコープのニックネームを既存の文字に付けたり、名前のない私用文字に有用な名前を付けたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="fdf71fcf7dcb9c3fbc3fc7c52735a70671018192" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:encoding(ENCODING)&lt;/code&gt; either in open() or binmode() to install a layer that transparently does character set and encoding transformations, for example from Shift-JIS to Unicode. Note that under &lt;code&gt;stdio&lt;/code&gt; an &lt;code&gt;:encoding&lt;/code&gt; also enables &lt;code&gt;:utf8&lt;/code&gt; . See &lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt; for more information.</source>
          <target state="translated">使用 &lt;code&gt;:encoding(ENCODING)&lt;/code&gt; 透過例えば、シフトJISからUnicodeに文字セットとコード変換を行い、その層をインストールするために、オープン（）またはbinmodeを（）のいずれか。 &lt;code&gt;stdio&lt;/code&gt; では、 &lt;code&gt;:encoding&lt;/code&gt; も &lt;code&gt;:utf8&lt;/code&gt; を有効にすることに注意してください。詳細については、&lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO :: encoding&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b32751627ad0f538a9c781523741b9c9689a81e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:via(MODULE)&lt;/code&gt; either in open() or binmode() to install a layer that does whatever transformation (for example compression / decompression, encryption / decryption) to the filehandle. See &lt;a href=&quot;perlio/via&quot;&gt;PerlIO::via&lt;/a&gt; for more information.</source>
          <target state="translated">open（）またはbinmode（ &lt;code&gt;:via(MODULE)&lt;/code&gt; いずれかで：via（MODULE）を使用して、ファイルハンドルへの変換（たとえば、圧縮/解凍、暗号化/復号化）を行うレイヤーをインストールします。詳細については、&lt;a href=&quot;perlio/via&quot;&gt;PerlIO :: via&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5c35f727c8e06fe9ff695531c994a06e6d32367e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; for local variables whenever you can get away with it (but see &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; for where you can't). Using &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; actually gives a local value to a global variable, which leaves you open to unforeseen side-effects of dynamic scoping.</source>
          <target state="translated">ローカル変数に &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; を使用して、それを&lt;a href=&quot;perlform&quot;&gt;回避&lt;/a&gt;できる場合はいつでも使用できます（ただし、できない場所についてはperlformを参照してください）。 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; を使用すると、実際にはグローバル変数にローカル値が与えられ、動的スコープの予期しない副作用が発生します。</target>
        </trans-unit>
        <trans-unit id="c47d329f16fdbd745016d298559c2d16104952e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt;, or else &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; and the bitwise operations.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; 、または他の &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; とビット演算。</target>
        </trans-unit>
        <trans-unit id="e7d6c1efbb4fe6ed3d0e44682a7fdfcad4845a94" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; to go from several pieces of data to one fixed-width version; use &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; to turn a fixed-width-format string into several pieces of data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; を使用して、複数のデータから1つの固定幅バージョンに移動します。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用して、固定幅形式の文字列をいくつかのデータに変換します。</target>
        </trans-unit>
        <trans-unit id="8fbc052d865293ed23949ab2e7f416dfadd5a776" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse()&lt;/a&gt;&lt;/code&gt; in scalar context, as documented in &lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse()&lt;/a&gt;&lt;/code&gt; 説明されているように、スカラーコンテキストでreverse（）を使用し&lt;a href=&quot;functions/reverse&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="27ae995888d29f8142b3c2932bd24cab6ea87cf6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@CARP_NOT&lt;/code&gt; , instead of &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$Carp::CarpLevel&lt;/code&gt; 代わりに &lt;code&gt;@CARP_NOT&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="92183967ac97249aea7bc977e218502508a51699" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;NDBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function to establish the connection between the variable and the file. The arguments to &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; should be:</source>
          <target state="translated">変数とファイル間の接続を確立するには、Perlの組み込み &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数で &lt;code&gt;NDBM_File&lt;/code&gt; を使用します。 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; の引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a39f53bf0801332ad81a8e20b727e708ddef3b6b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Role::Tiny&lt;/code&gt; with &lt;code&gt;Class::Accessor&lt;/code&gt; or &lt;code&gt;Class::Tiny&lt;/code&gt; if you find yourself considering multiple inheritance. If you go with &lt;code&gt;Moose&lt;/code&gt; , it comes with its own role implementation.</source>
          <target state="translated">多重継承を検討している場合は、 &lt;code&gt;Class::Accessor&lt;/code&gt; または &lt;code&gt;Class::Tiny&lt;/code&gt; &lt;code&gt;Role::Tiny&lt;/code&gt; を使用します。 &lt;code&gt;Moose&lt;/code&gt; を使用する場合、独自のロール実装が付属しています。</target>
        </trans-unit>
        <trans-unit id="0f06b5eddbf8d97d651f4831a1beb13b8718c8d6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;SDBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function to establish the connection between the variable and the file.</source>
          <target state="translated">&lt;code&gt;SDBM_File&lt;/code&gt; をPerlの組み込み &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数とともに使用して、変数とファイルの間の接続を確立します。</target>
        </trans-unit>
        <trans-unit id="dd5ddb92a2e87aa696e71c88822af794ba04ff5b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; instead.</source>
          <target state="translated">代わりに &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5709fd5fee3c8f65a9f2b5ff4443b46d700ffd8b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;error&lt;/code&gt; to trap all that is reasonable (problems with permissions and the like), and let it die if things get out of hand. This is the safest course of action.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; を使用して、妥当なものすべて（アクセス権などの問題）をトラップし、手に負えなくなった場合にエラーを終了させます。これが最も安全な行動方針です。</target>
        </trans-unit>
        <trans-unit id="a7ae97b4dc032127dbdf525b36f3287eea7a74cc" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for&lt;/code&gt; /&lt;code&gt;foreach&lt;/code&gt; :</source>
          <target state="translated">使用 &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;foreach&lt;/code&gt; の：</target>
        </trans-unit>
        <trans-unit id="42448f158fc4cf33aed96fb909d73152cfab8a01" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;sv_pos_b2u_flags&lt;/code&gt; in preference, which correctly handles strings longer than 2Gb.</source>
          <target state="translated">2Gbより長い文字列を正しく処理する &lt;code&gt;sv_pos_b2u_flags&lt;/code&gt; を優先的に使用します。</target>
        </trans-unit>
        <trans-unit id="7227aee0b7448cf59bbacaf7f7fdbecd1aac240b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;sv_pos_u2b_flags&lt;/code&gt; in preference, which correctly handles strings longer than 2Gb.</source>
          <target state="translated">2Gbより長い文字列を正しく処理する &lt;code&gt;sv_pos_u2b_flags&lt;/code&gt; を優先的に使用します。</target>
        </trans-unit>
        <trans-unit id="9174053d497c0bac4b0650a86818fe94eb1cad92" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;utf8::encode()&lt;/code&gt; instead.</source>
          <target state="translated">代わりに &lt;code&gt;utf8::encode()&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="e974bf00a2d723dec73908b097ca121c9409a8e4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;~pattern&lt;/code&gt; and &lt;code&gt;!pattern&lt;/code&gt; for positive and negative regexes.</source>
          <target state="translated">使用 &lt;code&gt;~pattern&lt;/code&gt; と &lt;code&gt;!pattern&lt;/code&gt; 正と負の正規表現のために。</target>
        </trans-unit>
        <trans-unit id="061b1dc7990493487dde420be8fe1d319fffab9e" translate="yes" xml:space="preserve">
          <source>Use CPAN::SQLite if available? (yes/no)?</source>
          <target state="translated">CPAN::SQLiteが利用可能な場合は使用しますか?(はい/いいえ)?</target>
        </trans-unit>
        <trans-unit id="714325381beb635775804a746adac93cfa93686a" translate="yes" xml:space="preserve">
          <source>Use Internet-domain sockets when you want to do client-server communication that might extend to machines outside of your own system.</source>
          <target state="translated">自分のシステムの外にあるマシンにまで及ぶ可能性のあるクライアント-サーバ通信を行いたい場合には、インターネットドメインソケットを使用します。</target>
        </trans-unit>
        <trans-unit id="0b9b3669dfa437dd595e2562fc06d4aa9b5c2435" translate="yes" xml:space="preserve">
          <source>Use MM[SK] macros, and VMS command line for C compiler.</source>
          <target state="translated">CコンパイラではMM[SK]マクロ、VMSコマンドラインを使用します。</target>
        </trans-unit>
        <trans-unit id="ea4874b782f37efa4adbe580d7fbd195de341f05" translate="yes" xml:space="preserve">
          <source>Use MM[SK] macros.</source>
          <target state="translated">MM[SK]マクロを使用します。</target>
        </trans-unit>
        <trans-unit id="566b4db3c362df6b71e0ff5dee0038deb7684d52" translate="yes" xml:space="preserve">
          <source>Use MakeMaker's uninstalled version of a package</source>
          <target state="translated">MakeMakerのアンインストール版のパッケージを使用する</target>
        </trans-unit>
        <trans-unit id="8e0e5dba70a90f698d3e0ca5e61baef285d0f01f" translate="yes" xml:space="preserve">
          <source>Use VMS Link command.</source>
          <target state="translated">VMS Linkコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="280948ed6505d39690e8bfb21e155eff171d0ef1" translate="yes" xml:space="preserve">
          <source>Use VMS commands to manipulate object library.</source>
          <target state="translated">VMSコマンドを使用してオブジェクトライブラリを操作します。</target>
        </trans-unit>
        <trans-unit id="bda9ca770225246f2160551c7450fb9367f1b262" translate="yes" xml:space="preserve">
          <source>Use VMS file specification syntax and CLI commands to find and invoke Perl images.</source>
          <target state="translated">VMSファイル指定構文とCLIコマンドを使用して、Perlイメージを検索して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ede73fbf3b4744edf3efb586d91835b3d9ad9918" translate="yes" xml:space="preserve">
          <source>Use VMS syntax on command line. In particular, $(DEFINE) and $(PERL_INC) have been pulled into $(CCCMD). Also use MM[SK] macros.</source>
          <target state="translated">コマンドラインでVMSの構文を使用します。特に、$(DEFINE)と$(PERL_INC)は、$(CCCMD)に引っ張られています。また、MM[SK]マクロも使用してください。</target>
        </trans-unit>
        <trans-unit id="691de1dabff4e93d09d661b351d70e27dc9a3c25" translate="yes" xml:space="preserve">
          <source>Use VMS-style syntax for files; it's cheaper to just do it directly here than to have the MM_Unix method call &lt;code&gt;catfile&lt;/code&gt; repeatedly. Also, if we have to rebuild Config.pm, use MM[SK] to do it.</source>
          <target state="translated">ファイルにはVMSスタイルの構文を使用します。MM_Unixメソッドに &lt;code&gt;catfile&lt;/code&gt; を繰り返し呼び出させるよりも、ここで直接実行する方が安上がりです。また、Config.pmを再構築する必要がある場合は、MM [SK]を使用して再構築します。</target>
        </trans-unit>
        <trans-unit id="21386b7269a32025e94fbc169460c22c01ed7e1f" translate="yes" xml:space="preserve">
          <source>Use a collator object to compare Unicode text by character instead of by codepoint.</source>
          <target state="translated">Unicode テキストをコードポイントではなく、文字ごとに比較するには、照合子オブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="af5688754fcfe001260b97f3d6228bac17ab8a5e" translate="yes" xml:space="preserve">
          <source>Use a command-line option, an environment variable, or else call &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; explicitly:</source>
          <target state="translated">コマンドラインオプション、環境変数を使用するか、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を明示的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="ba762ed342f4cf062ad179e99538aaf1e4c1ae60" translate="yes" xml:space="preserve">
          <source>Use a hash. Here's code to do both and more. It assumes that each element is unique in a given array:</source>
          <target state="translated">ハッシュを使用します。以下はその両方とそれ以上を行うコードです。これは、与えられた配列の各要素が一意であることを前提としています。</target>
        </trans-unit>
        <trans-unit id="271eac68025544545b6b8cda21c48f10de3e2be3" translate="yes" xml:space="preserve">
          <source>Use a hash. When you think the words &quot;unique&quot; or &quot;duplicated&quot;, think &quot;hash keys&quot;.</source>
          <target state="translated">ハッシュを使う。ユニーク」や「複製」という言葉を思い浮かべたら、「ハッシュキー」を思い浮かべてみてください。</target>
        </trans-unit>
        <trans-unit id="fb4ec017e331a31a5b1abaea84089100f3dba15e" translate="yes" xml:space="preserve">
          <source>Use a sort helper function</source>
          <target state="translated">ソートヘルパー機能を使う</target>
        </trans-unit>
        <trans-unit id="f616a684cd386a4ea767461805601287970f5579" translate="yes" xml:space="preserve">
          <source>Use a tree format in which the minimum amount of space is used for the lines connecting nodes (one character in most cases). This squeezes out a few precious columns of screen real estate.</source>
          <target state="translated">ツリー形式を使用して、ノードを結ぶ線に最小のスペースを使用します(ほとんどの場合は1文字)。これにより、画面上の貴重な列が少なくなります。</target>
        </trans-unit>
        <trans-unit id="5882a02b6e19732df1aac03e7c042980b0e32ff8" translate="yes" xml:space="preserve">
          <source>Use a tree format that uses longer edges to separate OP nodes. This format tends to look better than the compact one, especially in ASCII, and is the default.</source>
          <target state="translated">OP ノードを分離するために長いエッジを使用するツリー形式を使用します。この形式は、特にASCIIではコンパクトな形式よりも見栄えが良くなる傾向があり、デフォルトで使用されています。</target>
        </trans-unit>
        <trans-unit id="4b48f7ca244968605d46dde3055bd12f89577678" translate="yes" xml:space="preserve">
          <source>Use an alpha/beta style version number. Causes version number to be &quot;0.00_01&quot; unless &lt;b&gt;-v&lt;/b&gt; is specified.</source>
          <target state="translated">アルファ/ベータスタイルのバージョン番号を使用します。&lt;b&gt;-v&lt;/b&gt;が指定されていない限り、バージョン番号は「0.00_01」になります。</target>
        </trans-unit>
        <trans-unit id="6134c36e04029ff2453cb542046305a1f937b7f5" translate="yes" xml:space="preserve">
          <source>Use an alternate output format that, among other things, uses a different heading style and marks &lt;code&gt;=item&lt;/code&gt; entries with a colon in the left margin.</source>
          <target state="translated">特に、異なる見出しスタイルを使用し、左マージンにコロンを付けて &lt;code&gt;=item&lt;/code&gt; エントリーをマークする代替出力フォーマットを使用します。</target>
        </trans-unit>
        <trans-unit id="dcdeb0b163229c6ff03de5a0cdb9e6a57a7ea002" translate="yes" xml:space="preserve">
          <source>Use an index if it is present. The &lt;b&gt;-X&lt;/b&gt; option looks for an entry whose basename matches the name given on the command line in the file &lt;code&gt;$Config{archlib}/pod.idx&lt;/code&gt; . The</source>
          <target state="translated">存在する場合はインデックスを使用します。&lt;b&gt;-X&lt;/b&gt;ベース名のファイルにコマンドラインで指定された名前と一致するエントリのオプションルックス &lt;code&gt;$Config{archlib}/pod.idx&lt;/code&gt; 。の</target>
        </trans-unit>
        <trans-unit id="ae7e5fe5c728700cd50b3c52c6ee63480235da37" translate="yes" xml:space="preserve">
          <source>Use as separator a character which is legal in a VMS-syntax file name.</source>
          <target state="translated">VMS-syntaxファイル名で有効な文字をセパレータとして使用します。</target>
        </trans-unit>
        <trans-unit id="672a1c76642ee42c51ebfa65fd5a5d1a95399678" translate="yes" xml:space="preserve">
          <source>Use autosplit so little used or newly added functions won't be a burden to programs that don't use them. Add test functions to the module after __END__ either using AutoSplit or by saying:</source>
          <target state="translated">ほとんど使わない関数や新しく追加された関数が、それらを使わないプログラムの負担にならないように、オートスプリットを使用してください。モジュールにテスト関数を追加するには、オートスプリットを使用するか、あるいは、こう言ってください。</target>
        </trans-unit>
        <trans-unit id="317a05001ebb0c43c5b2e6eaa3b070114b0ab11b" translate="yes" xml:space="preserve">
          <source>Use blessed references. Use the two argument form of bless to bless into the class name given as the first parameter of the constructor, e.g.,:</source>
          <target state="translated">bless された参照を使用します。bless の 2 つの引数形式を使用して、コンストラクタの最初のパラメータとして与えられたクラス名を bless します。</target>
        </trans-unit>
        <trans-unit id="ec95e04beca28ff76c489858d434dba58b46f4b7" translate="yes" xml:space="preserve">
          <source>Use both global and lexical variables.</source>
          <target state="translated">グローバル変数と語彙変数の両方を使用します。</target>
        </trans-unit>
        <trans-unit id="3ec0b24d1442368e951d28938a31c4007d000691" translate="yes" xml:space="preserve">
          <source>Use formatting conventions in which the name of each OP, rather than being written out in full, is represented by a one- or two-character abbreviation. This is mainly a joke.</source>
          <target state="translated">各OPの名前は、全文を書き出すのではなく、1文字または2文字の略語で表すような書式を使用してください。これは主に冗談です。</target>
        </trans-unit>
        <trans-unit id="32e0435d286f4e0f5dea4e605f6ba74b7a19693a" translate="yes" xml:space="preserve">
          <source>Use formatting conventions read from the environment variables &lt;code&gt;B_CONCISE_FORMAT&lt;/code&gt; , &lt;code&gt;B_CONCISE_GOTO_FORMAT&lt;/code&gt; , and &lt;code&gt;B_CONCISE_TREE_FORMAT&lt;/code&gt; .</source>
          <target state="translated">環境変数 &lt;code&gt;B_CONCISE_FORMAT&lt;/code&gt; 、 &lt;code&gt;B_CONCISE_GOTO_FORMAT&lt;/code&gt; 、および &lt;code&gt;B_CONCISE_TREE_FORMAT&lt;/code&gt; から読み取ったフォーマット規則を使用します。</target>
        </trans-unit>
        <trans-unit id="4fae2a54363441130a92de76cae86f65e4405daf" translate="yes" xml:space="preserve">
          <source>Use formatting conventions reminiscent of &lt;b&gt;B::Debug&lt;/b&gt;; these aren't very concise at all.</source>
          <target state="translated">&lt;b&gt;B :: Debugを&lt;/b&gt;連想させるフォーマット規則を使用します。これらはまったく簡潔ではありません。</target>
        </trans-unit>
        <trans-unit id="60e51473a2aeb572e34290de332f54db3103274f" translate="yes" xml:space="preserve">
          <source>Use formatting conventions that emulate the output of &lt;b&gt;B::Terse&lt;/b&gt;. The basic mode is almost indistinguishable from the real &lt;b&gt;B::Terse&lt;/b&gt;, and the exec mode looks very similar, but is in a more logical order and lacks curly brackets. &lt;b&gt;B::Terse&lt;/b&gt; doesn't have a tree mode, so the tree mode is only vaguely reminiscent of &lt;b&gt;B::Terse&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;B :: Terseの&lt;/b&gt;出力をエミュレートするフォーマット規則を使用します。基本モードは実際の&lt;b&gt;B :: Terse&lt;/b&gt;とほとんど区別がつかず、execモードは非常によく似ていますが、より論理的な順序であり、中括弧がありません。&lt;b&gt;B :: Terseに&lt;/b&gt;はツリーモードがないため、ツリーモードは&lt;b&gt;B :: Terseを&lt;/b&gt;漠然と連想させるだけです。</target>
        </trans-unit>
        <trans-unit id="05e7e7257def62f44171c1ab5e1ea5739af490a1" translate="yes" xml:space="preserve">
          <source>Use grok_atoUV() instead. atoi() has ill-defined behavior on overflows, and cannot be used for incremental parsing. It is also affected by locale, which is bad.</source>
          <target state="translated">代わりに grok_atoUV()を使用してください。 atoi()はオーバーフロー時の挙動が不明確で、インクリメンタル解析には使用できません。また、ロケールの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="49bfe15faf704565402bc75b321564e7f1a0847e" translate="yes" xml:space="preserve">
          <source>Use grok_atoUV() instead. strtol() or strtoul() (or their IV/UV-friendly macro disguises, Strtol() and Strtoul(), or Atol() and Atoul() are affected by locale, which is bad.</source>
          <target state="translated">代わりに grok_atoUV()を使ってください。 strtol()や strtoul()(あるいはそれらの IV/UV に優しいマクロの偽装である Strtol()や Strtoul()、Atol()や Atoul()はロケールの影響を受けますが、これは良くありません。</target>
        </trans-unit>
        <trans-unit id="fec2179657e1b299044343e0b89c5b33f2055639" translate="yes" xml:space="preserve">
          <source>Use here documents instead of repeated &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; statements.</source>
          <target state="translated">繰り返し &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; ステートメントの代わりにhereドキュメントを使用します。</target>
        </trans-unit>
        <trans-unit id="7408313f5feae22d66298e9df35a5c92afed0d81" translate="yes" xml:space="preserve">
          <source>Use integer arithmetic instead of floating point</source>
          <target state="translated">浮動小数点の代わりに整数演算を使用</target>
        </trans-unit>
        <trans-unit id="4a2d0c065aebe88058e7899fe2b03390f5fd9ac8" translate="yes" xml:space="preserve">
          <source>Use it as follows:</source>
          <target state="translated">以下のように使用してください。</target>
        </trans-unit>
        <trans-unit id="0f2153ef63f7f49f92d87613b8e6086727534be7" translate="yes" xml:space="preserve">
          <source>Use mkstemp() instead.</source>
          <target state="translated">代わりに mkstemp()を使用してください。</target>
        </trans-unit>
        <trans-unit id="9d215af52eba1c24168d3668f703076a6c44c6c8" translate="yes" xml:space="preserve">
          <source>Use mstat() function to emit a memory state statistic to the terminal. For more information on the format of output of mstat() see &lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;Using $ENV{PERL_DEBUG_MSTATS} in perldebguts&lt;/a&gt;.</source>
          <target state="translated">mstat（）関数を使用して、メモリ状態統計を端末に送信します。mstat（）の出力形式の詳細については、perldebgutsでの&lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;$ ENV {PERL_DEBUG_MSTATS}の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="531c130b925ffd3120eb898dd244351239e437cf" translate="yes" xml:space="preserve">
          <source>Use my_strlcpy() and my_strlcat() instead: they either use the native implementation, or Perl's own implementation (borrowed from the public domain implementation of INN).</source>
          <target state="translated">代わりに my_strlcpy()と my_strlcat()を使用してください:これらはネイティブの実装を使用するか、Perl の独自の実装 (INN のパブリックドメイン実装から借用)を使用します。</target>
        </trans-unit>
        <trans-unit id="2c9671db7475e8358c84b51b41af26939a79a05c" translate="yes" xml:space="preserve">
          <source>Use named parameters (a hash or hashref) when there are more than two parameters</source>
          <target state="translated">2つ以上のパラメータがある場合は、名前付きパラメータ(ハッシュまたはハッシュリフ)を使用します。</target>
        </trans-unit>
        <trans-unit id="6b1ab005a876449dcff824693329635ee0415484" translate="yes" xml:space="preserve">
          <source>Use named parameters. It's easier to use a hash like this:</source>
          <target state="translated">名前付きのパラメータを使用します。このようにハッシュを使った方が簡単です。</target>
        </trans-unit>
        <trans-unit id="a7996c874ba5c6e6417be6c43ab584f3aaff6022" translate="yes" xml:space="preserve">
          <source>Use nice English (or awk) names for ugly punctuation variables</source>
          <target state="translated">醜い句読点変数には、素敵な英語(または awk)の名前を使用してください。</target>
        </trans-unit>
        <trans-unit id="8d5397d217e6f86d4205c68445ae6f732da49e78" translate="yes" xml:space="preserve">
          <source>Use non-standard idioms (otherwise you are not testing TIMTOWTDI).</source>
          <target state="translated">非標準のイディオムを使用してください(そうでなければTIMTOWTDIをテストしていません)。</target>
        </trans-unit>
        <trans-unit id="0f0cda525ac86ed2eeaa7f4035a68ab00df2e040" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;/x&lt;/code&gt; means that if you want real whitespace or &lt;code&gt;#&lt;/code&gt; characters in the pattern (outside a bracketed character class, which is unaffected by &lt;code&gt;/x&lt;/code&gt;), then you'll either have to escape them (using backslashes or &lt;code&gt;\Q...\E&lt;/code&gt; ) or encode them using octal, hex, or &lt;code&gt;\N{}&lt;/code&gt; escapes. It is ineffective to try to continue a comment onto the next line by escaping the &lt;code&gt;\n&lt;/code&gt; with a backslash or &lt;code&gt;\Q&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; の使用は、パターンに実際の空白文字または &lt;code&gt;#&lt;/code&gt; 文字が必要な場合（ &lt;code&gt;/x&lt;/code&gt; の影響を受けない角括弧付き文字クラスの外側）、それらをエスケープする必要がある（バックスラッシュまたは &lt;code&gt;\Q...\E&lt;/code&gt; ）または、8進、16進、 &lt;code&gt;\N{}&lt;/code&gt; エスケープを使用してエンコードします。 &lt;code&gt;\n&lt;/code&gt; をバックスラッシュまたは &lt;code&gt;\Q&lt;/code&gt; エスケープしてコメントを次の行に続けようとすると効果的ではありません。</target>
        </trans-unit>
        <trans-unit id="1cbbacbfb5cc1cd370b8cd67026b2e577274d54c" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on aggregates (hashes and arrays) is deprecated. It used to report whether memory for that aggregate had ever been allocated. This behavior may disappear in future versions of Perl. You should instead use a simple test for size:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 凝集（ハッシュや配列）には推奨されています。これは、そのアグリゲートのメモリが割り当てられたことがあるかどうかを報告するために使用されていました。この動作は、Perlの将来のバージョンではなくなる可能性があります。代わりに、サイズの簡単なテストを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c575003ac8ed97c3c8c499c8985b645cc965dd9e" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on aggregates (hashes and arrays) is deprecated. It used to report whether memory for that aggregate had ever been allocated. This behavior may disappear in future versions of Perl. You should instead use a simple test for size:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 凝集（ハッシュや配列）には推奨されています。これは、そのアグリゲートのメモリが割り当てられたことがあるかどうかを報告するために使用されていました。この動作は、Perlの将来のバージョンではなくなる可能性があります。代わりに、サイズの簡単なテストを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a1452256e006f48ab16db831ff1d2bc55b7b495f" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; to jump into a construct is deprecated and will issue a warning. Even then, it may not be used to go into any construct that requires initialization, such as a subroutine or a &lt;code&gt;foreach&lt;/code&gt; loop. It also can't be used to go into a construct that is optimized away.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; を使用して構成にジャンプすることは非推奨であり、警告が表示されます。その場合でも、サブルーチンや &lt;code&gt;foreach&lt;/code&gt; ループなど、初期化が必要な構成要素へのアクセスには使用できません。また、最適化された構成に移動するために使用することもできません。</target>
        </trans-unit>
        <trans-unit id="5aa03266aa6d88c654f206267c8022d408e9c245" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; to jump into a construct is deprecated and will issue a warning. Even then, it may not be used to go into any construct that requires initialization, such as a subroutine or a &lt;code&gt;foreach&lt;/code&gt; loop. It also can't be used to go into a construct that is optimized away.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; を使用して構成にジャンプすることは非推奨であり、警告が表示されます。その場合でも、サブルーチンや &lt;code&gt;foreach&lt;/code&gt; ループなど、初期化が必要な構成要素へのアクセスには使用できません。また、最適化された構成に移動するために使用することもできません。</target>
        </trans-unit>
        <trans-unit id="0ce1975659a74600b8f5d10e727a0e482e0ccb5e" translate="yes" xml:space="preserve">
          <source>Use of a single identifier, prefixed with &lt;code&gt;*&lt;/code&gt; . For example, &lt;code&gt;*name&lt;/code&gt; stands for any or all of &lt;code&gt;$name&lt;/code&gt; , &lt;code&gt;@name&lt;/code&gt; , &lt;code&gt;%name&lt;/code&gt; , &lt;code&gt;&amp;amp;name&lt;/code&gt; , or just &lt;code&gt;name&lt;/code&gt; . How you use it determines whether it is interpreted as all or only one of them. See &amp;ldquo;Typeglobs and Filehandles&amp;rdquo; in Camel chapter 2, &amp;ldquo;Bits and Pieces&amp;rdquo;.</source>
          <target state="translated">接頭辞が &lt;code&gt;*&lt;/code&gt; の単一の識別子の使用。たとえば、 &lt;code&gt;*name&lt;/code&gt; のいずれかまたは全てを表し &lt;code&gt;$name&lt;/code&gt; 、 &lt;code&gt;@name&lt;/code&gt; 、 &lt;code&gt;%name&lt;/code&gt; 、 &lt;code&gt;&amp;amp;name&lt;/code&gt; 、または単に &lt;code&gt;name&lt;/code&gt; 。それをどのように使用するかによって、すべてとして解釈されるか、それらのうちの1つとして解釈されるかが決まります。 Camelの第2章「ビットとピース」の「タイプグロブとファイルハンドル」を参照してください。</target>
        </trans-unit>
        <trans-unit id="79921a859879ed1277d82b4cc80975d8402d69d3" translate="yes" xml:space="preserve">
          <source>Use of a subroutine call, rather than a subroutine name, as an argument to exists() is an error.</source>
          <target state="translated">exists()の引数にサブルーチン名ではなくサブルーチンコールを使用するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="86136067e812367f102852e0f2a4131e0073483c" translate="yes" xml:space="preserve">
          <source>Use of any other character following the &lt;code&gt;&quot;c&quot;&lt;/code&gt; besides those listed above is discouraged, and as of Perl v5.20, the only characters actually allowed are the printable ASCII ones, minus the left brace &lt;code&gt;&quot;{&quot;&lt;/code&gt; . What happens for any of the allowed other characters is that the value is derived by xor'ing with the seventh bit, which is 64, and a warning raised if enabled. Using the non-allowed characters generates a fatal error.</source>
          <target state="translated">上記以外の &lt;code&gt;&quot;c&quot;&lt;/code&gt; に続く文字の使用はお勧めしません。Perlv5.20以降では、実際に使用できる文字は印刷可能なASCII文字から左中括弧 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 除いたものだけです。許可されている他の文字の場合は、7番目のビット（64）とのxor演算によって値が導出され、有効になっている場合は警告が発生します。許可されていない文字を使用すると、致命的なエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2d322945b4e21e9e3602bafb5e497ecc98176eed" translate="yes" xml:space="preserve">
          <source>Use of each publically accessible method or subroutine, including parameters and return values</source>
          <target state="translated">パラメータと戻り値を含む、公開されている各メソッドまたはサブルーチンの使用</target>
        </trans-unit>
        <trans-unit id="c4576ebd26dc37f362b412c956b1df320b83b3af" translate="yes" xml:space="preserve">
          <source>Use of epoch seconds</source>
          <target state="translated">エポック秒の使用</target>
        </trans-unit>
        <trans-unit id="1731aaf31968c5fdd9480f64d745beb19858cc51" translate="yes" xml:space="preserve">
          <source>Use of interval timers may interfere with &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;usleep()&lt;/code&gt; . In standard-speak the &quot;interaction is unspecified&quot;, which means that</source>
          <target state="translated">インターバルタイマーを使用すると、 &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;usleep()&lt;/code&gt; に干渉する可能性があります。標準的に言えば、「相互作用は指定されていません」、つまり</target>
        </trans-unit>
        <trans-unit id="1a808d3a7e8e48ea8bc89247be3129db920de8bf" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;normalization&lt;/code&gt; parameter requires the &lt;b&gt;Unicode::Normalize&lt;/b&gt; module (see &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;normalization&lt;/code&gt; パラメーターを使用するには、&lt;b&gt;Unicode :: Normalize&lt;/b&gt;モジュールが必要です（&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalizeを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0f49c2ebf95d755e5a6d2e5df09c73558f210f71" translate="yes" xml:space="preserve">
          <source>Use one of</source>
          <target state="translated">のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="5c06bf7bc66bd95d8dadea94a66d540da42d6175" translate="yes" xml:space="preserve">
          <source>Use one of the RPC modules( &lt;a href=&quot;https://metacpan.org/search?q=RPC&quot;&gt;https://metacpan.org/search?q=RPC&lt;/a&gt; ).</source>
          <target state="translated">RPCモジュール（&lt;a href=&quot;https://metacpan.org/search?q=RPC&quot;&gt;https://metacpan.org/search?q=RPC&lt;/a&gt;）のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="e43df0045591deb1920c698e1e06d9540206f44c" translate="yes" xml:space="preserve">
          <source>Use only modes 'rb' or 'wb' or /wb[1-9]/.</source>
          <target state="translated">モード 'rb' または 'wb' または /wb[1-9]/のみを使用してください。</target>
        </trans-unit>
        <trans-unit id="852a3fb75c58ea9ab6aee1d984501d31575dbe43" translate="yes" xml:space="preserve">
          <source>Use or avoid POSIX locales for built-in operations</source>
          <target state="translated">組み込み操作に POSIX ロケールを使用または回避する</target>
        </trans-unit>
        <trans-unit id="42549f09d2d3209d758990ebfc780be7cd9d6789" translate="yes" xml:space="preserve">
          <source>Use references as hash keys</source>
          <target state="translated">参照をハッシュキーとして使用する</target>
        </trans-unit>
        <trans-unit id="24db154be0d68fd92b28271f4ccc60a8152b9d53" translate="yes" xml:space="preserve">
          <source>Use subroutine address instead of name when reporting.</source>
          <target state="translated">報告時には名前の代わりにサブルーチンアドレスを使用してください。</target>
        </trans-unit>
        <trans-unit id="e65336030d621ad236216bbd262ac0c17be3ed80" translate="yes" xml:space="preserve">
          <source>Use tabs for each 8 columns of indent. The default is to use only spaces. For instance, if the style options are &lt;b&gt;-si4T&lt;/b&gt;, a line that's indented 3 times will be preceded by one tab and four spaces; if the options were &lt;b&gt;-si8T&lt;/b&gt;, the same line would be preceded by three tabs.</source>
          <target state="translated">インデントの8列ごとにタブを使用します。デフォルトでは、スペースのみを使用します。たとえば、スタイルオプションが&lt;b&gt;-si4Tの&lt;/b&gt;場合、3回インデントされた行の前には1つのタブと4つのスペースが付きます。オプションが&lt;b&gt;-si8Tの&lt;/b&gt;場合、同じ行の前に3つのタブが付きます。</target>
        </trans-unit>
        <trans-unit id="900e9cc0a9414f47ad3c3cf6cec86c687d5c9a3b" translate="yes" xml:space="preserve">
          <source>Use the &amp;lt;&amp;gt; (&lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt;) operator, documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;. Versions of Perl older than 5.6 require that you have a shell installed that groks tildes. Later versions of Perl have this feature built in. The &lt;a href=&quot;http://search.cpan.org/perldoc/File::KGlob&quot;&gt;File::KGlob&lt;/a&gt; module (available from CPAN) gives more portable glob functionality.</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;に記載されている&amp;lt;&amp;gt;（ &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt; ）演算子を使用します。5.6より古いバージョンのPerlでは、チルダを取得するシェルがインストールされている必要があります。Perlの新しいバージョンには、この機能が組み込まれています&lt;a href=&quot;http://search.cpan.org/perldoc/File::KGlob&quot;&gt;。File:: KGlob&lt;/a&gt;モジュール（CPANから入手可能）は、より移植性の高いglob機能を提供します。</target>
        </trans-unit>
        <trans-unit id="70b160440316452f340f816438a94ac57e43a80b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;file/copy&quot;&gt;File::Copy&lt;/a&gt; module. It comes with Perl and can do a true copy across file systems, and it does its magic in a portable fashion.</source>
          <target state="translated">&lt;a href=&quot;file/copy&quot;&gt;File :: Copy&lt;/a&gt;モジュールを使用します。Perlが付属しており、ファイルシステム間で真のコピーを行うことができ、移植性のある方法で魔法をかけます。</target>
        </trans-unit>
        <trans-unit id="e3fef79cbd4ceac4e867796d39b4567be99b7a0c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt; module from CPAN. As an example:</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt;モジュールを使用します。例として：</target>
        </trans-unit>
        <trans-unit id="d164af42cbef789ed1001f4b9517bb726a601d59" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email::Folder&lt;/a&gt; module, like so:</source>
          <target state="translated">次のように、&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email :: Folder&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="66505dab9f27e8ded0226b45047ac4d95ef19d93" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email::Sender::Simple&lt;/a&gt; modules, like so:</source>
          <target state="translated">次のように、&lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email :: MIME&lt;/a&gt;および&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email :: Sender :: Simple&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="9cda4728e014cde6b4aa8b1e9ff60d1e00b00f30" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; module. It's well-tested and supports all the craziness that you'll see in the real world (comment-folding whitespace, encodings, comments, etc.).</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email :: MIME&lt;/a&gt;モジュールを使用します。これは十分にテストされており、現実の世界で見られるすべての狂気（コメント折りたたみの空白、エンコーディング、コメントなど）をサポートしています。</target>
        </trans-unit>
        <trans-unit id="6c838954123651f7a7afc095c1c154c266d44966" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/List::Permutor&quot;&gt;List::Permutor&lt;/a&gt; module on CPAN. If the list is actually an array, try the &lt;a href=&quot;http://search.cpan.org/perldoc/Algorithm::Permute&quot;&gt;Algorithm::Permute&lt;/a&gt; module (also on CPAN). It's written in XS code and is very efficient:</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/List::Permutor&quot;&gt;List :: Permutor&lt;/a&gt;モジュールを使用します。リストが実際に配列の場合は、&lt;a href=&quot;http://search.cpan.org/perldoc/Algorithm::Permute&quot;&gt;Algorithm :: Permute&lt;/a&gt;モジュールを試してください（CPANでも）。XSコードで記述されており、非常に効率的です。</target>
        </trans-unit>
        <trans-unit id="65a351301ca14a96333147c8b3d3106e99e464c1" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Math::Matrix&quot;&gt;Math::Matrix&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Math::MatrixReal&quot;&gt;Math::MatrixReal&lt;/a&gt; modules (available from CPAN) or the &lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDL&lt;/a&gt; extension (also available from CPAN).</source>
          <target state="translated">使用&lt;a href=&quot;http://search.cpan.org/perldoc/Math::Matrix&quot;&gt;数学::マトリックス&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/perldoc/Math::MatrixReal&quot;&gt;数学:: MatrixReal&lt;/a&gt;（CPANから入手可能）モジュールまたは&lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDLの&lt;/a&gt;（CPANから入手可能）の拡張子。</target>
        </trans-unit>
        <trans-unit id="9284406bbe8e82a3357e3616e641d1dd96c570f0" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie::IxHash&lt;/a&gt; from CPAN.</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie :: IxHashを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="c0e1ce41fa321637cf3d64ebec09008a4c7342ad" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$/&lt;/code&gt; variable (see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details). You can either set it to &lt;code&gt;&quot;&quot;&lt;/code&gt; to eliminate empty paragraphs (&lt;code&gt;&quot;abc\n\n\n\ndef&quot;&lt;/code&gt; , for instance, gets treated as two paragraphs and not three), or &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; to accept empty paragraphs.</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; 変数を使用します（詳細は&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照）。空の段落を削除するには &lt;code&gt;&quot;&quot;&lt;/code&gt; に設定し（たとえば、 &lt;code&gt;&quot;abc\n\n\n\ndef&quot;&lt;/code&gt; は3ではなく2つの段落として扱われます）、または &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; して空の段落を受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="3eb28dd761b36a73acd489d9a060d0261a86e1b3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:encoding(...)&lt;/code&gt; layer to read from and write to filehandles using the specified encoding. (See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;.)</source>
          <target state="translated">使用する &lt;code&gt;:encoding(...)&lt;/code&gt; 指定されたエンコーディングを使用してファイルハンドルから読み込むための層と書き込みを。（&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="1043c9bb577ccc31fca3b4929e685adcde02639a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; function, probably in conjunction with a signal handler, as documented in &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; and the section on &quot;Signals&quot; in the Camel. You may instead use the more flexible &lt;a href=&quot;http://search.cpan.org/perldoc/Sys::AlarmCall&quot;&gt;Sys::AlarmCall&lt;/a&gt; module available from CPAN.</source>
          <target state="translated">「&lt;a href=&quot;perlipc#Signals&quot;&gt;perlipcの&lt;/a&gt;シグナル」とラクダの「シグナル」のセクションに記載されているように、おそらくシグナルハンドラーと組み合わせて &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 関数を使用します。代わりに、CPANから入手できるより柔軟な&lt;a href=&quot;http://search.cpan.org/perldoc/Sys::AlarmCall&quot;&gt;Sys :: AlarmCall&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="0b06aec35cc8ae0b522498e65b1bb4f4583c757e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; function (see &lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; 関数を使用します（&lt;a href=&quot;functions/rand&quot;&gt;randを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="24977a0b1e006e0285b58c0302df8403248c380a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Encode&lt;/code&gt; package to try converting it. For example,</source>
          <target state="translated">&lt;code&gt;Encode&lt;/code&gt; パッケージを使用して変換してみてください。例えば、</target>
        </trans-unit>
        <trans-unit id="0dc5eef8749d48465cf33790a50fb27f748e0a9f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;SvPV_nolen&lt;/code&gt; macro instead</source>
          <target state="translated">代わりに &lt;code&gt;SvPV_nolen&lt;/code&gt; マクロを使用してください</target>
        </trans-unit>
        <trans-unit id="ef653b1e1ac17e7ebb2ebd7fe5cecc710ea855b0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; macro instead</source>
          <target state="translated">代わりに &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; マクロを使用してください</target>
        </trans-unit>
        <trans-unit id="bfd1997217ebfcfd0b8127ecc2505173b83edb29" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;\N{&lt;i&gt;charname&lt;/i&gt;}&lt;/code&gt; notation to get the character by that name for use in interpolated literals (double-quoted strings and regexes). In v5.16, there is an implicit</source>
          <target state="translated">使用 &lt;code&gt;\N{&lt;i&gt;charname&lt;/i&gt;}&lt;/code&gt; 補間リテラル（二重引用符で囲まれた文字列や正規表現）での使用のためにその名前で文字を取得するための表記法を。v5.16では、暗黙的な</target>
        </trans-unit>
        <trans-unit id="7d52ddc8b7977a545ad663296d7fb2fca1b0f239" translate="yes" xml:space="preserve">
          <source>Use the Configure &lt;code&gt;-Dgccansipedantic&lt;/code&gt; flag to enable the gcc &lt;code&gt;-ansi
-pedantic&lt;/code&gt; flags which enforce stricter ANSI rules.</source>
          <target state="translated">より厳格なANSIルールを適用するgcc &lt;code&gt;-ansi -pedantic&lt;/code&gt; &lt;code&gt;-Dgccansipedantic&lt;/code&gt; フラグを有効にするには、Configure -Dgccansipedanticフラグを使用します。</target>
        </trans-unit>
        <trans-unit id="ddf13da36f032e379ae4d2a3b1c1bae344b15223" translate="yes" xml:space="preserve">
          <source>Use the MY_CXT macro to access members of the &lt;code&gt;my_cxt_t&lt;/code&gt; struct. For example, if &lt;code&gt;my_cxt_t&lt;/code&gt; is</source>
          <target state="translated">MY_CXTマクロを使用して、 &lt;code&gt;my_cxt_t&lt;/code&gt; 構造体のメンバーにアクセスします。たとえば、 &lt;code&gt;my_cxt_t&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="209d781836e6b1246a37a402443979bfc102b6da" translate="yes" xml:space="preserve">
          <source>Use the alternate DATA command &quot;BDAT&quot; of the data chunking service extension defined in RFC1830 for efficiently sending large MIME messages.</source>
          <target state="translated">大きなMIMEメッセージを効率的に送信するために、RFC1830で定義されているデータチャンキングサービス拡張の代替DATAコマンド「BDAT」を使用する。</target>
        </trans-unit>
        <trans-unit id="3b568a8fe0839108748606587d3b5ef52fd93b31" translate="yes" xml:space="preserve">
          <source>Use the author's favorite set of formatting conventions. This is the default, of course.</source>
          <target state="translated">作者の好きな書式設定を使用してください。もちろんこれがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="9ac34b7ac482595c74c32af79b7d65f665861078" translate="yes" xml:space="preserve">
          <source>Use the backslash ('\') character for quoting: every occurrence of a backslash followed by a character in the pattern is replaced by that character, avoiding any special interpretation of the character. (But see below for exceptions on DOSISH systems).</source>
          <target state="translated">引用にはバックスラッシュ ('\')文字を使います。バックスラッシュの後にパターン内の文字が続くと、その文字に置き換えられ、その文字の特別な解釈を避けることができます。ただし、DOSISH システムでの例外については以下を参照してください)。</target>
        </trans-unit>
        <trans-unit id="58c791ac75ac6f9811d7c1cd895cf02a99e988fc" translate="yes" xml:space="preserve">
          <source>Use the dMY_CXT macro (a declaration) in all the functions that access MY_CXT.</source>
          <target state="translated">MY_CXTにアクセスするすべての関数でdMY_CXTマクロ(宣言)を使用します。</target>
        </trans-unit>
        <trans-unit id="a11c34555178b87ed57024b7506fd7ffd640c9ab" translate="yes" xml:space="preserve">
          <source>Use the default &quot;cmd&quot; shell that comes with Windows. Some versions of the popular 4DOS/NT shell have incompatibilities that may cause you trouble. If the build fails under that shell, try building again with the cmd shell.</source>
          <target state="translated">Windowsに付属しているデフォルトの「cmd」シェルを使用します。人気のある 4DOS/NT シェルのいくつかのバージョンには互換性がないものがあり、それがトラブルの原因になることがあります。そのシェルでビルドに失敗した場合は、cmd シェルでビルドし直してみてください。</target>
        </trans-unit>
        <trans-unit id="860daa28ec194a818f5b182bccd22928db406092" translate="yes" xml:space="preserve">
          <source>Use the default to produce the *.dll's. But for new archdir dll's use the same rebase address if the old exists.</source>
          <target state="translated">.dll を生成するにはデフォルトを使用してください。しかし、新しいarchdirのdllは、古いものが存在する場合は同じリベースアドレスを使用してください。</target>
        </trans-unit>
        <trans-unit id="e1fc4198386c0572da6a991c5d426478433e6323" translate="yes" xml:space="preserve">
          <source>Use the external tar program instead of Archive::Tar?</source>
          <target state="translated">Archive::Tar の代わりに外部の tar プログラムを使用しますか?</target>
        </trans-unit>
        <trans-unit id="4bac2574d114ae82b8fd263b9459dca50bff3c24" translate="yes" xml:space="preserve">
          <source>Use the following simple functions:</source>
          <target state="translated">以下の簡単な機能を使用します。</target>
        </trans-unit>
        <trans-unit id="82c21f5742907cbf65bd7db33516fce8af244b3d" translate="yes" xml:space="preserve">
          <source>Use the force pragma like so</source>
          <target state="translated">forceプラグマを次のように使用します。</target>
        </trans-unit>
        <trans-unit id="d7f075c6e2b64b3ce706fb827bca3411e7b8504c" translate="yes" xml:space="preserve">
          <source>Use the key mentioned at</source>
          <target state="translated">で述べたキーを使用します。</target>
        </trans-unit>
        <trans-unit id="718a478ced25e8295348d28c5a0bc5741996efff" translate="yes" xml:space="preserve">
          <source>Use the libwww-perl distribution. The &lt;a href=&quot;http://search.cpan.org/perldoc/LWP::Simple&quot;&gt;LWP::Simple&lt;/a&gt; module can fetch web resources and give their content back to you as a string:</source>
          <target state="translated">libwww-perlディストリビューションを使用します。&lt;a href=&quot;http://search.cpan.org/perldoc/LWP::Simple&quot;&gt;LWP :: Simpleは&lt;/a&gt;モジュールは、Webリソースを取得し、文字列としてあなたに自分のコンテンツ背中を与えることができます：</target>
        </trans-unit>
        <trans-unit id="cb1603df2ef00841c0d9bacb479a841ff6e25e94" translate="yes" xml:space="preserve">
          <source>Use the macros STMT_START and STMT_END.</source>
          <target state="translated">マクロ STMT_START と STMT_END を使用します。</target>
        </trans-unit>
        <trans-unit id="c888fae92abf19a81b4d142f09c5f461d8d9608c" translate="yes" xml:space="preserve">
          <source>Use the name of the class for the object reference, &lt;code&gt;$object&lt;/code&gt; , as the warnings category.</source>
          <target state="translated">警告カテゴリとして、オブジェクト参照のクラスの名前 &lt;code&gt;$object&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="90b334d1699fa8ac1b699ca7fe59817de25916cf" translate="yes" xml:space="preserve">
          <source>Use the new &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators to avoid having to parenthesize list operators so much, and to reduce the incidence of punctuation operators like &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. Call your subroutines as if they were functions or list operators to avoid excessive ampersands and parentheses.</source>
          <target state="translated">リスト演算子を括弧で &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 、&amp;amp;&amp;amp;や &lt;code&gt;||&lt;/code&gt; のような句読点演算子の出現率を減らすために、新しい &lt;code&gt;and&lt;/code&gt; および &lt;code&gt;or&lt;/code&gt; 演算子を使用します。。アンパサンドや括弧を過度に使用しないように、関数やリスト演算子のようにサブルーチンを呼び出します。</target>
        </trans-unit>
        <trans-unit id="442188b51b5e18cf49fd3890247d5179d50e4049" translate="yes" xml:space="preserve">
          <source>Use the object-oriented interface if fine-grained control of when a file is removed is required.</source>
          <target state="translated">ファイルを削除する際のきめ細かな制御が必要な場合は、オブジェクト指向インターフェースを使用します。</target>
        </trans-unit>
        <trans-unit id="79265afb000f4991752261ca28217b5c373e53aa" translate="yes" xml:space="preserve">
          <source>Use the perlrebase or rebase utilities to resolve the conflicting dll addresses. The rebase package is included in the Cygwin setup. Use</source>
          <target state="translated">競合する dll アドレスを解決するには perlrebase または rebase ユーティリティを使用してください。rebase パッケージは Cygwin セットアップに含まれています。使用するには</target>
        </trans-unit>
        <trans-unit id="0801908980e9c580009d45c4098d1486f12c00b2" translate="yes" xml:space="preserve">
          <source>Use the reaper code from &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; to call &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; when a SIGCHLD is received, or else use the double-fork technique described in &lt;a href=&quot;perlfaq8#How-do-I-start-a-process-in-the-background%3f&quot;&gt;How do I start a process in the background? in perlfaq8&lt;/a&gt;.</source>
          <target state="translated">SIGCHLDを受信したときに、&lt;a href=&quot;perlipc#Signals&quot;&gt;perlipcのシグナル&lt;/a&gt;からのリーパーコードを使用して &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; を呼び出すか、または&lt;a href=&quot;perlfaq8#How-do-I-start-a-process-in-the-background%3f&quot;&gt;バックグラウンドでプロセスを開始するに&lt;/a&gt;はどうすればよいですか？perlfaq8で。</target>
        </trans-unit>
        <trans-unit id="4ab1865ade7c5cbdf616d9cfa7bc296cc942c842" translate="yes" xml:space="preserve">
          <source>Use the split function:</source>
          <target state="translated">分割機能を使用します。</target>
        </trans-unit>
        <trans-unit id="a9b5bca0abebc1d76df512275844e6baf7fca732" translate="yes" xml:space="preserve">
          <source>Use the three-argument form to open a file with arbitrary weird characters in it,</source>
          <target state="translated">任意の変な文字が入ったファイルを開くには、3引数形式を使用します。</target>
        </trans-unit>
        <trans-unit id="0e2045ea69cf09267eda92b39d5360c52617d312" translate="yes" xml:space="preserve">
          <source>Use the warnings category with the same name as the current package.</source>
          <target state="translated">現在のパッケージと同じ名前の警告カテゴリを使用します。</target>
        </trans-unit>
        <trans-unit id="0293445fabb340233713c8257ab81530a2889bf1" translate="yes" xml:space="preserve">
          <source>Use these rather than &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; , &lt;code&gt;stderr&lt;/code&gt; . They are written to look like &quot;function calls&quot; rather than variables because this makes it easier to</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; ではなく、これらを使用してください。それらは変数ではなく「関数呼び出し」のように見えるように書かれています。</target>
        </trans-unit>
        <trans-unit id="a81fa8275577903400d658f76e856afcaee1f2f2" translate="yes" xml:space="preserve">
          <source>Use these very, very, very sparingly.</source>
          <target state="translated">これらを非常に、非常に、惜しげもなく使いましょう。</target>
        </trans-unit>
        <trans-unit id="87ebb269f56a9a915023b69eabf6ff027e2f7e0c" translate="yes" xml:space="preserve">
          <source>Use this code, provided by Mark-Jason Dominus:</source>
          <target state="translated">マークジェイソン・ドミニスが提供するこのコードを使用してください。</target>
        </trans-unit>
        <trans-unit id="1a99888f271041405f93aa8e81d9f5a2d2c20746" translate="yes" xml:space="preserve">
          <source>Use this instead of $(PERL) when you wish to run perl to work with modules. It will add things like -I$(INST_ARCH) and other necessary flags so perl can see the modules you're about to install.</source>
          <target state="translated">モジュールを扱うために perl を実行したい場合は $(perl)の代わりにこれを使用します。これは、-I$(INST_ARCH)のようなものやその他の必要なフラグを追加して、インストールしようとしているモジュールをperlが見ることができるようにします。</target>
        </trans-unit>
        <trans-unit id="388121ab9a82a1ad19377b89ac9de297ea8e7f2c" translate="yes" xml:space="preserve">
          <source>Use this instead of $(PERL) when you wish to run perl. It will set up extra necessary flags for you.</source>
          <target state="translated">perlを実行したいときは、$(perl)の代わりにこれを使ってください。これはあなたのために必要なフラグを余分に設定してくれます。</target>
        </trans-unit>
        <trans-unit id="e6433f54cefa63ecf9e10e3ca3a566ca9eb8f9de" translate="yes" xml:space="preserve">
          <source>Use this instead:</source>
          <target state="translated">代わりにこれを使ってください。</target>
        </trans-unit>
        <trans-unit id="9482ca604a352c4ff781a10e825ea8768f370ffb" translate="yes" xml:space="preserve">
          <source>Use this module like this:</source>
          <target state="translated">このモジュールはこんな感じで使います。</target>
        </trans-unit>
        <trans-unit id="24fd134a2b3d96c5cbea104957e21046321bc6c3" translate="yes" xml:space="preserve">
          <source>Use this to build perl outside of the source tree. Details can be found in the</source>
          <target state="translated">これを使って、ソースツリーの外側にperlをビルドします。詳細は</target>
        </trans-unit>
        <trans-unit id="163162b126000a656e356ab3254dffb8d7962901" translate="yes" xml:space="preserve">
          <source>Use this to disassociate a file from a PerlIO * that was associated using PerlIO_exportFILE().</source>
          <target state="translated">PerlIO_exportFILE()を使用して関連付けられたPerlIO*からファイルの関連付けを解除するために使用します。</target>
        </trans-unit>
        <trans-unit id="b543720e8daabc3733964f244cca2d14e58df202" translate="yes" xml:space="preserve">
          <source>Use this:</source>
          <target state="translated">これを使って</target>
        </trans-unit>
        <trans-unit id="03038b4251119aa1c25d1f79aa4a7d76f09e6350" translate="yes" xml:space="preserve">
          <source>Use tree connecting characters drawn from the VT100 line-drawing set. This looks better if your terminal supports it.</source>
          <target state="translated">VT100 の線画セットから描画されたツリー接続文字を使用します。端末がこれをサポートしている場合は、この方が良いようです。</target>
        </trans-unit>
        <trans-unit id="5b877243c67d7922e8d87750811b66b31f1b397f" translate="yes" xml:space="preserve">
          <source>Use underscores to separate words. It is generally easier to read $var_names_like_this than $VarNamesLikeThis, especially for non-native speakers of English. It's also a simple rule that works consistently with VAR_NAMES_LIKE_THIS.</source>
          <target state="translated">単語の区切りにはアンダースコアを使用します。一般的には $VarNamesLikeThis よりも $var_names_like_this の方が、特に英語を母国語としない人にとっては読みやすいです。また、var_names_like_thisと一貫して動作するシンプルなルールです。</target>
        </trans-unit>
        <trans-unit id="a9f6d10a6d2104b7922abf95412d3e52031b3d8b" translate="yes" xml:space="preserve">
          <source>Use unrelated features (this will flush out bizarre interactions).</source>
          <target state="translated">無関係な機能を使う(これは奇妙な相互作用を洗い流す)。</target>
        </trans-unit>
        <trans-unit id="b5b5116cfec58023d905fc9d5b3040b726593cef" translate="yes" xml:space="preserve">
          <source>Used as a noun in this case, this refers to a known way to compromise a program to get it to do something the author didn&amp;rsquo;t intend. Your task is to write unexploitable programs.</source>
          <target state="translated">この場合、名詞として使用されます。これは、プログラムを危険にさらして、作者の意図しない動作をさせる既知の方法を指します。あなたの仕事は悪用できないプログラムを書くことです。</target>
        </trans-unit>
        <trans-unit id="79c6d27106d07e0f5897103d8c6a8d8a85ec8bb1" translate="yes" xml:space="preserve">
          <source>Used as a noun, a name in a &lt;b&gt;directory&lt;/b&gt; that represents a &lt;b&gt;file&lt;/b&gt;. A given file can have multiple links to it. It&amp;rsquo;s like having the same phone number listed in the phone directory under different names. As a verb, to resolve a partially &lt;b&gt;compiled&lt;/b&gt; file&amp;rsquo;s unresolved symbols into a (nearly) executable image. Linking can generally be static or dynamic, which has nothing to do with static or dynamic scoping.</source>
          <target state="translated">名詞として使用される、&lt;b&gt;ファイル&lt;/b&gt;を表す&lt;b&gt;ディレクトリ&lt;/b&gt;内の名前。特定のファイルには、複数のリンクを含めることができます。それは、同じ電話番号が電話帳に異なる名前でリストされているようなものです。動詞として、部分的に&lt;b&gt;コンパイルされた&lt;/b&gt;ファイルの未解決のシンボルを（ほぼ）実行可能なイメージに解決します。リンクは一般に静的または動的にすることができ、静的または動的スコープとは何の関係もありません。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="5e94bf506fd2ed1897d55415e2eda38e61b816ec" translate="yes" xml:space="preserve">
          <source>Used as an lvalue, &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; allows you to increase the number of hash buckets allocated for the given hash. This can gain you a measure of efficiency if you know the hash is going to get big. (This is similar to pre-extending an array by assigning a larger number to $#array.) If you say</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 左辺値として使用すると、特定のハッシュに割り当てるハッシュバケットの数を増やすことができます。これにより、ハッシュが大きくなることがわかっている場合に、効率の尺度を得ることができます。（これは、より大きな数を$＃arrayに割り当てて配列を事前に拡張することに似ています。）</target>
        </trans-unit>
        <trans-unit id="cfcd9d6e7d0af6a973640e08731f7579c85d2ca6" translate="yes" xml:space="preserve">
          <source>Used as an lvalue, &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; allows you to increase the number of hash buckets allocated for the given hash. This can gain you a measure of efficiency if you know the hash is going to get big. (This is similar to pre-extending an array by assigning a larger number to $#array.) If you say</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 左辺値として使用すると、特定のハッシュに割り当てるハッシュバケットの数を増やすことができます。これにより、ハッシュが大きくなることがわかっている場合に、効率の尺度を得ることができます。（これは、より大きな数を$＃arrayに割り当てて配列を事前に拡張することに似ています。）</target>
        </trans-unit>
        <trans-unit id="9d927fa8ae51a19f16800a69ce9d19da2c120815" translate="yes" xml:space="preserve">
          <source>Used as part of the &quot;clone&quot; process when a thread is spawned (in which case param will be non-NULL) and when a stream is being duplicated via '&amp;amp;' in the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スレッドが生成された場合（この場合、paramはNULL以外になります）、および &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; で '＆'を介してストリームが複製されている場合、「クローン」プロセスの一部として使用されます。</target>
        </trans-unit>
        <trans-unit id="251c18a90eefe3a719259f59bb8700c29e6c2e54" translate="yes" xml:space="preserve">
          <source>Used by 'make install' which copies files from INST_SCRIPT to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">INSTALLDIRS が site (デフォルト)に設定されている場合、 INST_SCRIPT からこのディレクトリにファイルをコピーする 'make install' で使用されます。</target>
        </trans-unit>
        <trans-unit id="0413527e465c4de8a077bbf425ed66e91381919a" translate="yes" xml:space="preserve">
          <source>Used by 'make install' which copies files from INST_SCRIPT to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">INSTALLDIRS が vendor に設定されている場合、 INST_SCRIPT からこのディレクトリにファイルをコピーする 'make install' で使用されます。</target>
        </trans-unit>
        <trans-unit id="976bda008ac56ae36683d29627c3f35a11dab1ca" translate="yes" xml:space="preserve">
          <source>Used by 'make install' which copies files from INST_SCRIPT to this directory if INSTALLDIRS=perl.</source>
          <target state="translated">INSTALLDIRS=perl の場合に INST_SCRIPT からこのディレクトリにファイルをコピーする 'make install' で使用されます。</target>
        </trans-unit>
        <trans-unit id="37d1058a6b6ba0e70de245f908c09c85ed3a873d" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to perl.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が perl に設定されている場合に INST_ARCHLIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="8402b50cbc218eeff1f81c3db2cda9adf3fffbd7" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が site (デフォルト)に設定されている場合に INST_ARCHLIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="c4c8328bf8916ab5fdd86eb62de06cc4f4230a70" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合に INST_ARCHLIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="3b0cddfea5d7479fbfb7a215e845b5a123be89bb" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_BIN to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が site (デフォルト)に設定されている場合に INST_BIN からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="eb49c11648bc66ca1d5846b99271ffd0d898ea32" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_BIN to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合に INST_BIN からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="2b07ebb6cc38d7286ba9e956f3eba69a5ff528fe" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_LIB to this directory if INSTALLDIRS is set to perl.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が perl に設定されている場合に INST_LIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="4c572796939181da5eba99b899ab05bfaac9e449" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_LIB to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が site (デフォルト)に設定されている場合に INST_LIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="497f3b2bdeaf3749352a862b66d7233b6bb7365e" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_LIB to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合に INST_LIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="955b442432c35e6b42d1db59049e0e27c3353bce" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;xsubpp&lt;/code&gt; to hook up XSUBs as Perl subs.</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; がXSUBをPerlのsubとしてフックするために使用します。</target>
        </trans-unit>
        <trans-unit id="b701e8ad52984344882bfc710f4e3b41bfee3ae7" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;xsubpp&lt;/code&gt; to hook up XSUBs as Perl subs. Adds Perl prototypes to the subs.</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; がXSUBをPerlのsubとしてフックするために使用します。サブルーチンにPerlプロトタイプを追加します。</target>
        </trans-unit>
        <trans-unit id="bf413f31411cb5187dfc08c3a35d494612fab477" translate="yes" xml:space="preserve">
          <source>Used by Unicode internally for generating other properties and not intended to be used stand-alone</source>
          <target state="translated">他のプ ロ パテ ィ を生成す る ために内部的に Unicode で使用 さ れ、 単独での使用は意図 さ れていません。</target>
        </trans-unit>
        <trans-unit id="4e698d59aaba8e3ee1c30011c41b0b74d5937cc8" translate="yes" xml:space="preserve">
          <source>Used by a &lt;b&gt;standard I/O&lt;/b&gt; output stream that flushes its &lt;b&gt;buffer&lt;/b&gt; after every &lt;b&gt;newline&lt;/b&gt;. Many standard I/O libraries automatically set up line buffering on output that is going to the terminal.</source>
          <target state="translated">&lt;b&gt;改行&lt;/b&gt;ごとに&lt;b&gt;バッファ&lt;/b&gt;をフラッシュする&lt;b&gt;標準I / O&lt;/b&gt;出力ストリームによって使用され&lt;b&gt;ます&lt;/b&gt;。多くの標準I / Oライブラリは、端末に送られる出力にラインバッファリングを自動的に設定します。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e00976e80fe78228b9297b3ddbd122a14f1abe1f" translate="yes" xml:space="preserve">
          <source>Used by some OS' to define DL_FUNCS and DL_VARS and write the *.exp files.</source>
          <target state="translated">いくつかの OS で DL_FUNCS と DL_VARS を定義し、*.exp ファイルを書き込むために使用されます。</target>
        </trans-unit>
        <trans-unit id="1ba26d0698fc6f53589c3fcda2fd4a8860e0e9f9" translate="yes" xml:space="preserve">
          <source>Used by the IS_SAFE_SYSCALL() macro.</source>
          <target state="translated">IS_SAFE_SYSCALL()マクロで使用されます。</target>
        </trans-unit>
        <trans-unit id="c2253cb286405345c16b81c3000c80dff0161abd" translate="yes" xml:space="preserve">
          <source>Used during the execution phase for managing search and replace patterns, and for providing the text for &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$1&lt;/code&gt; etc. &lt;code&gt;subbeg&lt;/code&gt; points to a buffer (either the original string, or a copy in the case of &lt;code&gt;RX_MATCH_COPIED(rx)&lt;/code&gt; ), and &lt;code&gt;sublen&lt;/code&gt; is the length of the buffer. The &lt;code&gt;RX_OFFS&lt;/code&gt; start and end indices index into this buffer.</source>
          <target state="translated">実行フェーズ中に、検索と置換のパターンを管理し、 &lt;code&gt;$&amp;amp;&lt;/code&gt; や &lt;code&gt;$1&lt;/code&gt; などのテキストを提供するために使用されます。 &lt;code&gt;subbeg&lt;/code&gt; はバッファー（元の文字列、または &lt;code&gt;RX_MATCH_COPIED(rx)&lt;/code&gt; の場合はコピー）を &lt;code&gt;sublen&lt;/code&gt; 、サブレンバッファの長さです。 &lt;code&gt;RX_OFFS&lt;/code&gt; が開始し、このバッファへのインデックスのインデックスを終了します。</target>
        </trans-unit>
        <trans-unit id="c07d1ff394d728bbcdaa2001c2857f1cf7faa30d" translate="yes" xml:space="preserve">
          <source>Used for emphasis (&quot;&lt;code&gt;be I&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;) and parameters (&quot;&lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; I&amp;lt;LABEL&amp;gt;&lt;/code&gt; &quot;)</source>
          <target state="translated">強調（ &quot; &lt;code&gt;be I&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;）およびパラメーター（ &quot; &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; I&amp;lt;LABEL&amp;gt;&lt;/code&gt; &quot;）に使用</target>
        </trans-unit>
        <trans-unit id="7d3c574527f056e37525c76d104fc8a22ad9cc2b" translate="yes" xml:space="preserve">
          <source>Used for optimisations. &lt;code&gt;precomp&lt;/code&gt; holds a copy of the pattern that was compiled and &lt;code&gt;prelen&lt;/code&gt; its length. When a new pattern is to be compiled (such as inside a loop) the internal &lt;code&gt;regcomp&lt;/code&gt; operator checks if the last compiled &lt;code&gt;REGEXP&lt;/code&gt; 's &lt;code&gt;precomp&lt;/code&gt; and &lt;code&gt;prelen&lt;/code&gt; are equivalent to the new one, and if so uses the old pattern instead of compiling a new one.</source>
          <target state="translated">最適化に使用されます。 &lt;code&gt;precomp&lt;/code&gt; コンパイルとされたパターンのコピーを保持している &lt;code&gt;prelen&lt;/code&gt; その長さを。新しいパターンは、（例えばループ内のように）内部コンパイルするとき &lt;code&gt;regcomp&lt;/code&gt; 最後にコンパイルした場合、オペレータの確認を &lt;code&gt;REGEXP&lt;/code&gt; の &lt;code&gt;precomp&lt;/code&gt; と &lt;code&gt;prelen&lt;/code&gt; が新しいものと同等であるので、新しいものをコンパイルするのではなく、古いパターンを使用している場合。</target>
        </trans-unit>
        <trans-unit id="c16a1dda4419ca1fa42a25c2f463240abdf22010" translate="yes" xml:space="preserve">
          <source>Used for switches (&quot;&lt;code&gt;perl's B&amp;lt;-n&amp;gt; switch&lt;/code&gt; &quot;), programs (&quot;&lt;code&gt;some systems provide a B&amp;lt;chfn&amp;gt; for that&lt;/code&gt; &quot;), emphasis (&quot;&lt;code&gt;be B&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;), and so on (&quot;&lt;code&gt;and that feature is known as B&amp;lt;autovivification&amp;gt;&lt;/code&gt; &quot;).</source>
          <target state="translated">スイッチ（ &quot; &lt;code&gt;perl's B&amp;lt;-n&amp;gt; switch&lt;/code&gt; &quot;）、プログラム（ &quot; &lt;code&gt;some systems provide a B&amp;lt;chfn&amp;gt; for that&lt;/code&gt; &quot;）、強調（ &quot; &lt;code&gt;be B&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;）など（ &quot; &lt;code&gt;and that feature is known as B&amp;lt;autovivification&amp;gt;&lt;/code&gt; 」として知られています。</target>
        </trans-unit>
        <trans-unit id="8d00f06e1f81e3c4218071563a3bababae3c7eab" translate="yes" xml:space="preserve">
          <source>Used for test.pl, since they don't always follow Test::Harness formatting.</source>
          <target state="translated">test::Harnessのフォーマットに常に従っているとは限らないので、test.plに使用されます。</target>
        </trans-unit>
        <trans-unit id="85f7caced82a8f0a4057356aaa1e87b6b4b7ead3" translate="yes" xml:space="preserve">
          <source>Used if &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; has no argument and HOME is not set.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; に引数がなく、HOMEが設定されていない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="a5442b49ecc1bae306f70b5a25e1762fda194c70" translate="yes" xml:space="preserve">
          <source>Used if &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; has no argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; に引数がない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="5908b09f62d202af9a5d54ac62b509abf705e1f4" translate="yes" xml:space="preserve">
          <source>Used if chdir has no argument and HOME and LOGDIR are not set.</source>
          <target state="translated">chdirに引数がなく、HOMEとLOGDIRが設定されていない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="9b97a5382104ef747655a54d5cf00ae2ece3ac3e" translate="yes" xml:space="preserve">
          <source>Used in conjunction with the &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; option to supply a reference to an &lt;code&gt;@ARGV&lt;/code&gt; style array of arguments to pass to the test program.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; オプションと共に使用して、テストプログラムに渡す引数の &lt;code&gt;@ARGV&lt;/code&gt; スタイル配列への参照を提供します。</target>
        </trans-unit>
        <trans-unit id="477606f47e75aab0d16ae4c72010e54847d20bed" translate="yes" xml:space="preserve">
          <source>Used in conjunction with the &lt;code&gt;strcoll()&lt;/code&gt; function, see &lt;a href=&quot;#strcoll&quot;&gt;strcoll&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;strcoll()&lt;/code&gt; 関数と組み合わせて使用​​します&lt;a href=&quot;#strcoll&quot;&gt;。strcollを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0096c9408c39e5114a134ce424b3de68995688e0" translate="yes" xml:space="preserve">
          <source>Used in executing subprocesses, and in finding the program if &lt;b&gt;-S&lt;/b&gt; is used.</source>
          <target state="translated">サブプロセスの実行、および&lt;b&gt;-S&lt;/b&gt;が使用されている場合のプログラムの検索に使用されます。</target>
        </trans-unit>
        <trans-unit id="fc7e238a8b39d615018cf421f51aee97a59ca55c" translate="yes" xml:space="preserve">
          <source>Used on numbers, the bitwise operators (&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;^&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ) always produce integral results. (But see also &lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;Bitwise String Operators&lt;/a&gt;.) However, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; still has meaning for them. By default, their results are interpreted as unsigned integers, but if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; is in effect, their results are interpreted as signed integers. For example, &lt;code&gt;~0&lt;/code&gt; usually evaluates to a large integral value. However, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer; ~0&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; on two's-complement machines.</source>
          <target state="translated">数値で使用すると、ビットごとの演算子（ &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;~&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ）は常に整数の結果を生成します。（しかし、&lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;ビットごとの文字列演算子&lt;/a&gt;も参照してください。）ただし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;することは、それらにとってまだ意味があります。デフォルトでは、結果は符号なし整数として解釈されますが、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; が有効な場合、結果は符号付き整数として解釈されます。たとえば、 &lt;code&gt;~0&lt;/code&gt; は通常、大きな整数値に評価されます。ただし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer; ~0&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用してください&lt;/a&gt;。〜0である &lt;code&gt;-1&lt;/code&gt; 2の補数のマシンで。</target>
        </trans-unit>
        <trans-unit id="22f1fcd6bfd2f48fba3948a9e62685e57c7db9d1" translate="yes" xml:space="preserve">
          <source>Used on the t/*.t files.</source>
          <target state="translated">t/*.tファイルで使用します。</target>
        </trans-unit>
        <trans-unit id="a64dabf0b28b220a6076bc6a581b9356f3e76610" translate="yes" xml:space="preserve">
          <source>Used only when MakeMaker is building the extensions of the Perl core distribution (because normally $(PERL_ARCHLIB) is automatically in @INC, and adding it would get in the way of PERL5LIB).</source>
          <target state="translated">MakeMakerがPerlコアディストリビューションの拡張機能をビルドするときにのみ使用されます(通常は@INCに$(PERL_ARCHLIB)が自動的に入っており、追加するとPERL5LIBの邪魔になるからです)。</target>
        </trans-unit>
        <trans-unit id="522904b951ae26afa223c455d7c6bd2555ea2781" translate="yes" xml:space="preserve">
          <source>Used only when MakeMaker is building the extensions of the Perl core distribution (because normally $(PERL_LIB) is automatically in @INC, and adding it would get in the way of PERL5LIB).</source>
          <target state="translated">MakeMakerがPerlのコアディストリビューションの拡張機能をビルドしているときにのみ使用します(通常は$(PERL_LIB)が自動的に@INCに入っているので、追加するとPERL5LIBの邪魔になるからです)。</target>
        </trans-unit>
        <trans-unit id="f0b6e6daa054441299880d327c03ad5022b9eb54" translate="yes" xml:space="preserve">
          <source>Used to access elements on the XSUB's stack.</source>
          <target state="translated">XSUB のスタック上の要素にアクセスするために使用します。</target>
        </trans-unit>
        <trans-unit id="e35e54c290e520db893e920267b9220db378f0a1" translate="yes" xml:space="preserve">
          <source>Used to check if any errata was seen.</source>
          <target state="translated">正誤表が見られたかどうかを確認するために使用します。</target>
        </trans-unit>
        <trans-unit id="87a9aa1ba364ad0831ad8d0593884f266cd7c93e" translate="yes" xml:space="preserve">
          <source>Used to choose the LZMA compression preset.</source>
          <target state="translated">LZMA圧縮プリセットを選択するために使用します。</target>
        </trans-unit>
        <trans-unit id="7c52aa40f13bb513d24fe0ba0fa19d6fcc4a443a" translate="yes" xml:space="preserve">
          <source>Used to compare numbers.</source>
          <target state="translated">数字の比較に使用します。</target>
        </trans-unit>
        <trans-unit id="c48ef407eccd138f057ccc3292baa7a78dede864" translate="yes" xml:space="preserve">
          <source>Used to describe a &lt;b&gt;referent&lt;/b&gt; that is not directly accessible through a named &lt;b&gt;variable&lt;/b&gt;. Such a referent must be indirectly accessible through at least one &lt;b&gt;hard reference&lt;/b&gt;. When the last hard reference goes away, the anonymous referent is destroyed without pity.</source>
          <target state="translated">名前付き&lt;b&gt;変数を&lt;/b&gt;介して直接アクセスできない&lt;b&gt;参照先&lt;/b&gt;を記述するために使用され&lt;b&gt;ます&lt;/b&gt;。そのような指示対象は、少なくとも1つの&lt;b&gt;ハード参照&lt;/b&gt;を通じて間接的にアクセスできる必要があります。最後のハード参照がなくなると、匿名の指示対象は残念なことに破壊されます。</target>
        </trans-unit>
        <trans-unit id="68eae2d00f0bb0e45444425d5ef88e0a25c713c4" translate="yes" xml:space="preserve">
          <source>Used to extend the argument stack for an XSUB's return values. Once used, guarantees that there is room for at least &lt;code&gt;nitems&lt;/code&gt; to be pushed onto the stack.</source>
          <target state="translated">XSUBの戻り値の引数スタックを拡張するために使用されます。一度使用すると、少なくとも &lt;code&gt;nitems&lt;/code&gt; がスタックにプッシュされる余地があることが保証されます。</target>
        </trans-unit>
        <trans-unit id="c9d6ff55b3e514bbe849f67e44d09a8a1f610db4" translate="yes" xml:space="preserve">
          <source>Used to force a Perl &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; wrapper around a callback. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">コールバックの周りのPerl &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ラッパーを強制するために使用されます。&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de62f27495e3f33e099616750808f449be5f2cfc" translate="yes" xml:space="preserve">
          <source>Used to get a PerlIO * from a FILE *.</source>
          <target state="translated">FILE *からPerlIO *を取得するのに使用しました。</target>
        </trans-unit>
        <trans-unit id="e5f86f7323575cf5c768f8e5109eb6cf3318d1d9" translate="yes" xml:space="preserve">
          <source>Used to indicate list context. See &lt;code&gt;GIMME_V&lt;/code&gt; , &lt;code&gt;GIMME&lt;/code&gt; and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">リストのコンテキストを示すために使用されます。 &lt;code&gt;GIMME_V&lt;/code&gt; 、 &lt;code&gt;GIMME&lt;/code&gt; および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a930c77deebf229f4a954c4d6804d1b626a7c0da" translate="yes" xml:space="preserve">
          <source>Used to indicate scalar context. See &lt;code&gt;GIMME_V&lt;/code&gt; , &lt;code&gt;GIMME&lt;/code&gt; , and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">スカラーコンテキストを示すために使用されます。 &lt;code&gt;GIMME_V&lt;/code&gt; 、 &lt;code&gt;GIMME&lt;/code&gt; 、および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="06d42cedd073f96c9a77c4270da2ab3e95ee0de9" translate="yes" xml:space="preserve">
          <source>Used to indicate void context. See &lt;code&gt;GIMME_V&lt;/code&gt; and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">voidコンテキストを示すために使用されます。 &lt;code&gt;GIMME_V&lt;/code&gt; および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9bb1d0a62eb268dccff9ee670a0b1ed19d224173" translate="yes" xml:space="preserve">
          <source>Used to negate the object in-place.</source>
          <target state="translated">その場にあるオブジェクトを否定するために使用します。</target>
        </trans-unit>
        <trans-unit id="7ab9fb9e2f57ebf6032a373e79745b71c5c594eb" translate="yes" xml:space="preserve">
          <source>Used to pass in and return a reference to an SV.</source>
          <target state="translated">SVへの参照をパスインして返すときに使用します。</target>
        </trans-unit>
        <trans-unit id="02c1be0e858c6b96b18473855240486ec63fb69b" translate="yes" xml:space="preserve">
          <source>Used to pass in and return a reference to an SV. This is a fixed variant of T_SVREF that decrements the refcount appropriately when returning a reference to an SV*. Introduced in perl 5.15.4.</source>
          <target state="translated">SV への参照を渡して返すために使用されます。これは、SV*への参照を返す際に refcount を適切にデクリメントする T_SVREF の固定型です。perl 5.15.4 で導入されました。</target>
        </trans-unit>
        <trans-unit id="c91a5082aa2e7c4d29d7e1b996780ca43a12407b" translate="yes" xml:space="preserve">
          <source>Used to shift numbers left/right.</source>
          <target state="translated">数字を左右にずらすのに使用します。</target>
        </trans-unit>
        <trans-unit id="3deb258f4b48416c1a5909b948e6f301fdab02b0" translate="yes" xml:space="preserve">
          <source>Used to upgrade an SV to a more complex form. Uses &lt;code&gt;sv_upgrade&lt;/code&gt; to perform the upgrade if necessary. See &lt;code&gt;svtype&lt;/code&gt; .</source>
          <target state="translated">SVをより複雑な形式にアップグレードするために使用されます。用途は &lt;code&gt;sv_upgrade&lt;/code&gt; 、必要に応じてアップグレードを実行します。 &lt;code&gt;svtype&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fcb5d7f5c46a099246ea8a6f9905effe5c22e13c" translate="yes" xml:space="preserve">
          <source>Used together, as &lt;code&gt;/ms&lt;/code&gt;, they let the &quot;.&quot; match any character whatsoever, while still allowing &quot;^&quot; and &quot;$&quot; to match, respectively, just after and just before newlines within the string.</source>
          <target state="translated">&lt;code&gt;/ms&lt;/code&gt; と一緒に使用すると、「。」が使用されます。文字列内の改行の直後と直前にそれぞれ「^」と「$」が一致することを許可しながら、すべての文字に一致します。</target>
        </trans-unit>
        <trans-unit id="6fa27f5c1082734ec40392b2d9f3d19afd0775e2" translate="yes" xml:space="preserve">
          <source>Used when creating PPD files for binary packages. It can be set to a full or relative path or URL to the binary archive for a particular architecture. For example:</source>
          <target state="translated">バイナリパッケージ用の PPD ファイルを作成する際に使用します。これは、特定のアーキテクチャ用のバイナリアーカイブへのフルパスまたは相対パス、または URL を設定することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0efa982fe3c01dc21ffac634d0623c22f8078dad" translate="yes" xml:space="preserve">
          <source>Used when the layer's open() accepts more arguments than usual. The extra arguments should come not before the &lt;code&gt;MODE&lt;/code&gt; argument. When this flag is used it's up to the layer to validate the args.</source>
          <target state="translated">レイヤーのopen（）が通常より多くの引数を受け入れるときに使用されます。余分な引数は、 &lt;code&gt;MODE&lt;/code&gt; 引数の前に置かないでください。このフラグを使用する場合、引数を検証するのはレイヤー次第です。</target>
        </trans-unit>
        <trans-unit id="cdd67bcd97e446b57807bc47ce4d7da189f0ad26" translate="yes" xml:space="preserve">
          <source>Used with the example above, &lt;code&gt;@libfiles&lt;/code&gt; (or &lt;code&gt;@$libfiles&lt;/code&gt; ) would contain two strings upon completion: &lt;code&gt;&quot;lib/stdlib&quot;&lt;/code&gt; and &lt;code&gt;&quot;lib/extlib&quot;&lt;/code&gt; , in that order. It is also possible to specify that only integer or floating point numbers are acceptable values.</source>
          <target state="translated">上記の例で使用した場合、 &lt;code&gt;@$libfiles&lt;/code&gt; &lt;code&gt;@libfiles&lt;/code&gt; （または@ $ libfiles）には、 &lt;code&gt;&quot;lib/stdlib&quot;&lt;/code&gt; と &lt;code&gt;&quot;lib/extlib&quot;&lt;/code&gt; 順に2つの文字列が完了時に含まれます。整数または浮動小数点数のみが許容値であることを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="32482e797407c687053869f8a4e7d0cfe24ca4f2" translate="yes" xml:space="preserve">
          <source>Used without arguments in scalar context, reverse() reverses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">スカラーコンテキストで引数なしで使用すると、reverse（）は &lt;code&gt;$_&lt;/code&gt; 反転します。</target>
        </trans-unit>
        <trans-unit id="287fb92f0982907aa797c3b17e0824ad256b9b20" translate="yes" xml:space="preserve">
          <source>Useful functions for dealing with the filehandle and filename.</source>
          <target state="translated">ファイルハンドルやファイル名を扱うのに便利な関数です。</target>
        </trans-unit>
        <trans-unit id="f0b64588f00eed76bae59e12d25ea5d5e9aeab35" translate="yes" xml:space="preserve">
          <source>Useful modules to help you write tests (with minimum impact on your development process or your time) include Test::Simple, Carp::Assert and Test::Inline. For more sophisticated test suites there are Test::More and Test::MockObject.</source>
          <target state="translated">Test::Simple、Carp::Assert、Test::Inlineなど、開発プロセスや時間への影響を最小限に抑えてテストを書くのに役立つモジュールがあります。より洗練されたテストスイートには、Test::More や Test::MockObject があります。</target>
        </trans-unit>
        <trans-unit id="04355f5678f3ad8646b491395f68bd676dba02d6" translate="yes" xml:space="preserve">
          <source>Useful options of</source>
          <target state="translated">の便利なオプション</target>
        </trans-unit>
        <trans-unit id="7705a5ed12704795a74e0deb45a6e2191d0de39a" translate="yes" xml:space="preserve">
          <source>Useful values for &lt;code&gt;PERLDOC&lt;/code&gt; include &lt;code&gt;-oterm&lt;/code&gt; , &lt;code&gt;-otext&lt;/code&gt; , &lt;code&gt;-ortf&lt;/code&gt; , &lt;code&gt;-oxml&lt;/code&gt; , and so on, depending on what modules you have on hand; or the formatter class may be specified exactly with &lt;code&gt;-MPod::Perldoc::ToTerm&lt;/code&gt; or the like.</source>
          <target state="translated">&lt;code&gt;PERLDOC&lt;/code&gt; の有用な値には、 &lt;code&gt;-otext&lt;/code&gt; にあるモジュールに応じて、 &lt;code&gt;-oterm&lt;/code&gt; 、-otext、 &lt;code&gt;-ortf&lt;/code&gt; 、 &lt;code&gt;-oxml&lt;/code&gt; などがあります。または、フォーマッタクラスを &lt;code&gt;-MPod::Perldoc::ToTerm&lt;/code&gt; などで正確に指定できます。</target>
        </trans-unit>
        <trans-unit id="108f6902446d675962ade16c5ef5d6ed95723631" translate="yes" xml:space="preserve">
          <source>Useful, huh? You can eval nearly anything in there, and experiment with bits of code or regexes until the cows come home:</source>
          <target state="translated">役に立つだろ?ここではほとんど何でも評価できますし、牛が帰ってくるまでコードや正規表現を試してみることもできます。</target>
        </trans-unit>
        <trans-unit id="fe3be132ee381a9663c71ca2a6207a31717e7705" translate="yes" xml:space="preserve">
          <source>User Datagram Protocol, the typical way to send &lt;b&gt;datagrams&lt;/b&gt; over the Internet.</source>
          <target state="translated">ユーザーデータグラムプロトコル。インターネット経由で&lt;b&gt;データグラム&lt;/b&gt;を送信する一般的な方法。</target>
        </trans-unit>
        <trans-unit id="3056b101498f0c6196c04d621ba22bd3175219d6" translate="yes" xml:space="preserve">
          <source>User Groups</source>
          <target state="translated">ユーザーグループ</target>
        </trans-unit>
        <trans-unit id="4325c61b581bf8fe6a3e2400d58928e7b9a55496" translate="yes" xml:space="preserve">
          <source>User Interfaces</source>
          <target state="translated">ユーザーインターフェース</target>
        </trans-unit>
        <trans-unit id="84956701ef226c2e8ce9adf59fb3ab8347d15b4f" translate="yes" xml:space="preserve">
          <source>User mounts override system mounts.</source>
          <target state="translated">ユーザーマウントはシステムマウントを上書きします。</target>
        </trans-unit>
        <trans-unit id="158586304dc1eef989a278eac13c889b9d8fde82" translate="yes" xml:space="preserve">
          <source>User pragmata store their state by writing to the magical hash &lt;code&gt;%^H&lt;/code&gt; , hence these two routines manipulate it. The state information in &lt;code&gt;%^H&lt;/code&gt; is stored in the optree, and can be retrieved read-only at runtime with &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt;, at index 10 of the list of returned results. In the example pragma, retrieval is encapsulated into the routine &lt;code&gt;in_effect()&lt;/code&gt; , which takes as parameter the number of call frames to go up to find the value of the pragma in the user's script. This uses &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; to determine the value of &lt;code&gt;$^H{&quot;myint/in_effect&quot;}&lt;/code&gt; when each line of the user's script was called, and therefore provide the correct semantics in the subroutine implementing the overloaded addition.</source>
          <target state="translated">ユーザープラグマは、魔法のハッシュ &lt;code&gt;%^H&lt;/code&gt; に書き込むことで状態を保存します。したがって、これらの2つのルーチンがそれを操作します。 &lt;code&gt;%^H&lt;/code&gt; の状態情報はoptreeに格納され、実行時に &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; を使用して、返された結果のリストのインデックス10で読み取り専用で取得できます。サンプルのプラグマでは、検索はルーチン &lt;code&gt;in_effect()&lt;/code&gt; にカプセル化されます。これは、ユーザーのスクリプトでプラグマの値を見つけるために上がる呼び出しフレームの数をパラメーターとして受け取ります。これは、 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; を使用して、ユーザーのスクリプトの各行が呼び出されたときに &lt;code&gt;$^H{&quot;myint/in_effect&quot;}&lt;/code&gt; の値を決定します。したがって、オーバーロードされた追加を実装するサブルーチンで正しいセマンティクスを提供します。</target>
        </trans-unit>
        <trans-unit id="94ffd06de7d6ceb23de314937b25f1039f95408e" translate="yes" xml:space="preserve">
          <source>User-Defined Case Mappings (for serious hackers only)</source>
          <target state="translated">ユーザ定義のケースマッピング(シリアスなハッカー専用</target>
        </trans-unit>
        <trans-unit id="021fce3b8ed64c4c7ea81643b8e56e61d1fb88d9" translate="yes" xml:space="preserve">
          <source>User-Defined Character Properties</source>
          <target state="translated">ユーザー定義の文字プロパティ</target>
        </trans-unit>
        <trans-unit id="8bdd4953a2aaaf5875fdc9a6599aaccd9331209f" translate="yes" xml:space="preserve">
          <source>User-defined subroutines may choose to care whether they are being called in a void, scalar, or list context. Most subroutines do not need to bother, though. That's because both scalars and lists are automatically interpolated into lists. See &lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt; for how you would dynamically discern your function's calling context.</source>
          <target state="translated">ユーザー定義のサブルーチンは、void、スカラー、またはリストのコンテキストで呼び出されているかどうかを気にすることを選択できます。しかし、ほとんどのサブルーチンは気にする必要はありません。これは、スカラーとリストの両方が自動的にリストに挿入されるためです。関数の呼び出しコンテキストを動的に識別する方法については、&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="04b3f7fd0444d60354dbca146d3a101a49d16754" translate="yes" xml:space="preserve">
          <source>User-defined subroutines to handle options</source>
          <target state="translated">オプションを処理するためのユーザー定義のサブルーチン</target>
        </trans-unit>
        <trans-unit id="c2c8678cd5e840290be2cdc362d36d4139b6821c" translate="yes" xml:space="preserve">
          <source>User-mode threads are threads that live entirely within a program and its libraries. In this model, the OS knows nothing about threads. As far as it's concerned, your process is just a process.</source>
          <target state="translated">ユーザーモードのスレッドは、プログラムとそのライブラリ内に完全に存在するスレッドです。このモデルでは、OSはスレッドについて何も知りません。それが関係している限り、あなたのプロセスはただのプロセスです。</target>
        </trans-unit>
        <trans-unit id="5e4e64aff0ba218cc4ec3a0635d41a38135e5b7e" translate="yes" xml:space="preserve">
          <source>User::grent</source>
          <target state="translated">User::grent</target>
        </trans-unit>
        <trans-unit id="5e0090a6a9d55bf78a5f019a9872cf7e4308c124" translate="yes" xml:space="preserve">
          <source>User::grent - by-name interface to Perl's built-in getgr*() functions</source>
          <target state="translated">User::grent-Perl の組み込み関数 getgr*()への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="a2bda03ecc876d5bf92fb7707c3e5918fe5160b9" translate="yes" xml:space="preserve">
          <source>User::pwent</source>
          <target state="translated">User::pwent</target>
        </trans-unit>
        <trans-unit id="c4a9575f1a385e0c0339a3155858dfaa2331a364" translate="yes" xml:space="preserve">
          <source>User::pwent - by-name interface to Perl's built-in getpw*() functions</source>
          <target state="translated">User::pwent-Perl の組み込み getpw*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="5dc8b5002e114f1d2e85c5074d99f142b8068508" translate="yes" xml:space="preserve">
          <source>Users of &lt;b&gt;vi&lt;/b&gt; should also look into &lt;b&gt;vim&lt;/b&gt; and &lt;b&gt;gvim&lt;/b&gt;, the mousey and windy version, for coloring of Perl keywords.</source>
          <target state="translated">&lt;b&gt;viの&lt;/b&gt;ユーザーは、Perlキーワードの色付けのために、マウスバージョンとウィンディバージョンの&lt;b&gt;vim&lt;/b&gt;と&lt;b&gt;gvim&lt;/b&gt;も調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="ba4927255994b8f9be2cf9331a8ecd222ec16885" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;Emacs&lt;/code&gt; would appreciate it very much, especially with &lt;code&gt;CPerl&lt;/code&gt; mode loaded. You need to get latest &lt;code&gt;pod2info&lt;/code&gt; from &lt;code&gt;CPAN&lt;/code&gt; , or, alternately, prebuilt info pages.</source>
          <target state="translated">&lt;code&gt;Emacs&lt;/code&gt; のユーザーは、特に &lt;code&gt;CPerl&lt;/code&gt; モードがロードされている場合に非常に役立ちます。 &lt;code&gt;CPAN&lt;/code&gt; から最新の &lt;code&gt;pod2info&lt;/code&gt; を取得するか、代わりに事前に作成された情報ページを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="06b3fe1f4b99439f17ea2b119c5a26871e0414f8" translate="yes" xml:space="preserve">
          <source>Users of Emacs would appreciate it very much, especially with &lt;code&gt;CPerl&lt;/code&gt; mode loaded. You need to get latest &lt;code&gt;pod2texi&lt;/code&gt; from &lt;code&gt;CPAN&lt;/code&gt; , or, alternately, the prebuilt info pages.</source>
          <target state="translated">Emacsのユーザーは、特に &lt;code&gt;CPerl&lt;/code&gt; モードがロードされている場合に非常に役立ちます。 &lt;code&gt;CPAN&lt;/code&gt; から最新の &lt;code&gt;pod2texi&lt;/code&gt; を取得する必要があります。または、事前に作成された情報ページを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d37ee7e83ea8423b48a5461ba1696b2c860b013" translate="yes" xml:space="preserve">
          <source>Users of these operating systems may also wish to make use of scripts such as</source>
          <target state="translated">これらのオペレーティングシステムのユーザーは、以下のようなスクリプトを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="5f2a2d2f970a65c0f069bae958a29d5ba1eb82f2" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;$Config{pod2html}&lt;/code&gt; to setup default options.</source>
          <target state="translated">使用しています &lt;code&gt;$Config{pod2html}&lt;/code&gt; 、セットアップのデフォルトオプションに。</target>
        </trans-unit>
        <trans-unit id="1bd665ac74aefc48e3c1dedcb2f5bc582892064f" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;strlen&lt;/code&gt; to get the length of &lt;code&gt;name&lt;/code&gt; , then calls &lt;code&gt;get_cvn_flags&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;strlen&lt;/code&gt; を使用して &lt;code&gt;name&lt;/code&gt; の長さを取得し、次に &lt;code&gt;get_cvn_flags&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f2d33b5a65c41c46d97dad83c368ba4c31fcb025" translate="yes" xml:space="preserve">
          <source>Uses Bourne shell from &lt;code&gt;$exedir/../dll/sh/ksh.exe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$exedir/../dll/sh/ksh.exe&lt;/code&gt; Bourneシェルを使用します。</target>
        </trans-unit>
        <trans-unit id="8535753d5756d418d77c7eeafa2177abcd178411" translate="yes" xml:space="preserve">
          <source>Uses Encode::from_to for conversion. This is the default.</source>
          <target state="translated">変換にEncode::from_toを使用します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="a78266e003805d15484a613ae3192f24c4a5e63f" translate="yes" xml:space="preserve">
          <source>Uses a single private buffer so if you want to format several strings you must explicitly copy the earlier strings away (and free the copies when you are done).</source>
          <target state="translated">複数の文字列をフォーマットしたい場合は、それ以前の文字列を明示的にコピーしなければなりません(コピーが終わったらそのコピーを解放します)。</target>
        </trans-unit>
        <trans-unit id="fce3093136a7d2638de72d1f6b19af95e4dd37ba" translate="yes" xml:space="preserve">
          <source>Uses for the &lt;code&gt;export_fail&lt;/code&gt; method include giving better error messages for some symbols and performing lazy architectural checks (put more symbols into &lt;code&gt;@EXPORT_FAIL&lt;/code&gt; by default and then take them out if someone actually tries to use them and an expensive check shows that they are usable on that platform).</source>
          <target state="translated">&lt;code&gt;export_fail&lt;/code&gt; メソッドの使用には、一部のシンボルのより良いエラーメッセージの提供と遅延アーキテクチャチェックの実行が &lt;code&gt;@EXPORT_FAIL&lt;/code&gt; れます（デフォルトで@EXPORT_FAILにシンボルを追加し、誰かが実際にそれらを使用しようとすると高価なチェックがそれらを使用できることを示します）プラットホーム）。</target>
        </trans-unit>
        <trans-unit id="ff51dbb10de4f730c3d10cc9e64e2774f2375b58" translate="yes" xml:space="preserve">
          <source>Uses the same algorithm as getcwd(). Symbolic links and relative-path components (&quot;.&quot; and &quot;..&quot;) are resolved to return the canonical pathname, just like realpath(3).</source>
          <target state="translated">getcwd()と同じアルゴリズムを使用します。シンボリックリンクと相対パスコンポーネント (&quot;.&quot; と &quot;...&quot;)は、realpath(3)のように、正準パス名を返すように解決されます。</target>
        </trans-unit>
        <trans-unit id="9086306446f5bee7eedc51873f977f5639cf3890" translate="yes" xml:space="preserve">
          <source>Uses the value of EXPR as a filename and executes the contents of the file as a Perl script.</source>
          <target state="translated">EXPRの値をファイル名として使用し、ファイルの内容をPerlスクリプトとして実行します。</target>
        </trans-unit>
        <trans-unit id="b191f377109544e991562530e982f3ab20d97a29" translate="yes" xml:space="preserve">
          <source>Uses the value of a previous getpos call to return to a previously visited position. Returns &quot;0 but true&quot; on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">以前のgetpos呼び出しの値を使用して、以前にアクセスした位置に戻ります。成功した場合は「0 but true」を返し、失敗した場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c25de2e83e9fceeee022a34e378748baf14ac201" translate="yes" xml:space="preserve">
          <source>Using</source>
          <target state="translated">Using</target>
        </trans-unit>
        <trans-unit id="2352b330d6ed131b0eecd5f3967c2801dc2e677c" translate="yes" xml:space="preserve">
          <source>Using &quot;#&quot; as a padding character specifies a numeric field, with right justification. An optional &quot;.&quot; defines the position of the decimal point. With a &quot;0&quot; (zero) instead of the first &quot;#&quot;, the formatted number will be padded with leading zeroes if necessary. A special numeric field is blanked out if the value is undefined. If the resulting value would exceed the width specified the field is filled with &quot;#&quot; as overflow evidence.</source>
          <target state="translated">パディング文字として &quot;#&quot;を使用すると、数値フィールドを右寄せで指定します。オプションの「.」は、小数点の位置を定義します。最初の &quot;#&quot;の代わりに &quot;0&quot; (ゼロ)を使用すると、フォーマットされた数値は、必要に応じて先頭のゼロでパディングされます。値が未定義の場合、特別な数値フィールドは空白になります。結果の値が指定された幅を超えてしまう場合は、フィールドはオーバーフローの証拠として &quot;#&quot; で埋められます。</target>
        </trans-unit>
        <trans-unit id="4d195a30219da687f66f5ac2e4c6c839d91fc335" translate="yes" xml:space="preserve">
          <source>Using &quot;&amp;gt;&quot; always clobbers or creates. Using &quot;&amp;lt;&quot; never does either. The &quot;+&quot; doesn't change this.</source>
          <target state="translated">&quot;&amp;gt;&quot;を使用すると、常に目立たない、または作成されます。「&amp;lt;」を使用しても、どちらも実行されません。「+」はこれを変更しません。</target>
        </trans-unit>
        <trans-unit id="16cc068fbb7f0118050467d326f37173d537b721" translate="yes" xml:space="preserve">
          <source>Using &quot;pl2bat&quot; has a few problems: the file name gets changed, so scripts that rely on &lt;code&gt;$0&lt;/code&gt; to find what they must do may not run properly; running &quot;pl2bat&quot; replicates the contents of the original script, and so this process can be maintenance intensive if the originals get updated often. A different approach that avoids both problems is possible.</source>
          <target state="translated">「pl2bat」の使用にはいくつかの問題があります。ファイル名が変更されるため、 &lt;code&gt;$0&lt;/code&gt; を使用して実行する必要があることを見つけるスクリプトは正しく実行されない可能性があります。「pl2bat」を実行すると、元のスクリプトの内容が複製されるため、元のスクリプトが頻繁に更新される場合、このプロセスはメンテナンスの負荷が大きくなる可能性があります。両方の問題を回避する別のアプローチが可能です。</target>
        </trans-unit>
        <trans-unit id="05f631394c6e9641817e0e504fc7c43b66232fc2" translate="yes" xml:space="preserve">
          <source>Using $ENV{PERL_DEBUG_MSTATS}</source>
          <target state="translated">ENV{PERL_DEBUG_MSTATS}の使用</target>
        </trans-unit>
        <trans-unit id="369ff12968f332b6148e74df2b66edfe0b032cb0" translate="yes" xml:space="preserve">
          <source>Using 'X' and cousins requires you not to use the type identifiers ($@%), just the 'name':</source>
          <target state="translated">X' といとこを使うには、型の識別子 ($@%)を使わずに '名前' だけを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="2dfddf8d7a196c4e7f1fa3524316075003cbc8ac" translate="yes" xml:space="preserve">
          <source>Using *AutoLoader*'s AUTOLOAD Subroutine</source>
          <target state="translated">AutoLoader*のAUTOLOADサブルーチンを使用する</target>
        </trans-unit>
        <trans-unit id="9094fd1811fd7f32bf808bb09cf11c4c4b959972" translate="yes" xml:space="preserve">
          <source>Using / for Unix. Called by init_main.</source>
          <target state="translated">Unixでは/を使用しています。init_mainによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ef6fd37cde410d5e8c4989d291b7ed857f9e1011" translate="yes" xml:space="preserve">
          <source>Using //-comments</source>
          <target state="translated">コメントの使用</target>
        </trans-unit>
        <trans-unit id="5f4a15910e3dadf2cc006c6867eda30e63f7dc0f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://search.cpan.org/perldoc/Bit::Vector&quot;&gt;Bit::Vector&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Bit::Vector&quot;&gt;Bit :: Vector&lt;/a&gt;を使用：</target>
        </trans-unit>
        <trans-unit id="9e6665571474aeb5014d9a2187041b82aa2b6cf9" translate="yes" xml:space="preserve">
          <source>Using &lt;b&gt;AutoLoader&lt;/b&gt;'s AUTOLOAD Subroutine</source>
          <target state="translated">&lt;b&gt;AutoLoader&lt;/b&gt;のAUTOLOADサブルーチンの使用</target>
        </trans-unit>
        <trans-unit id="5cfa1c0592cc7196c9a7f1e7194e067f8fe4c528" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&quot;or&quot;&lt;/code&gt; for assignment is unlikely to do what you want; see below.</source>
          <target state="translated">割り当てに &lt;code&gt;&quot;or&quot;&lt;/code&gt; を使用しても、望んだことを実行することはほとんどありません。下記参照。</target>
        </trans-unit>
        <trans-unit id="8a303f25d71d0c242dc6c0e5ae7c606b1bec2045" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/code&gt;</source>
          <target state="translated">使用して &lt;code&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6ff3dae92bc192e26ee0eb7af7182c12b0e7db8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$in_fh-&amp;gt;getline()&lt;/code&gt; , input is read line-by-line and assembled into paragraphs or &quot;blocks&quot; (which are separated by lines containing nothing but whitespace). For each block of POD documentation encountered it will invoke a method to parse the given paragraph.</source>
          <target state="translated">&lt;code&gt;$in_fh-&amp;gt;getline()&lt;/code&gt; を使用すると、入力は行ごとに読み取られ、段落または「ブロック」（空白のみを含む行で区切られている）にアセンブルされます。遭遇したPODドキュメントの各ブロックに対して、指定された段落を解析するメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="f2a68f677fc4720bdeb7e4f8032c1c375f4d6291" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--verbose&lt;/code&gt; on the command line will increment the value of &lt;code&gt;$verbose&lt;/code&gt; . This way the program can keep track of how many times the option occurred on the command line. For example, each occurrence of &lt;code&gt;--verbose&lt;/code&gt; could increase the verbosity level of the program.</source>
          <target state="translated">コマンドラインで &lt;code&gt;--verbose&lt;/code&gt; を使用すると、 &lt;code&gt;$verbose&lt;/code&gt; 値が増加します。このようにして、プログラムはオプションがコマンドラインで発生した回数を追跡できます。たとえば、 &lt;code&gt;--verbose&lt;/code&gt; が発生するたびに、プログラムの詳細レベルが上がる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4ad1d7060df6581913c9f5f84ab874f296c32585" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-Dusethreads -Duseithreads&lt;/code&gt; rather than &lt;code&gt;-Dusemultiplicity&lt;/code&gt; is more appropriate if you intend to run multiple interpreters concurrently in different threads, because it enables support for linking in the thread libraries of your system with the interpreter.</source>
          <target state="translated">使用 &lt;code&gt;-Dusethreads -Duseithreads&lt;/code&gt; ではなく &lt;code&gt;-Dusemultiplicity&lt;/code&gt; することは、あなたが別のスレッドで同時に複数のインタプリタを実行する場合、それは通訳を使用してシステムのスレッドライブラリにリンクするためのサポートが可能になるため、より適切です。</target>
        </trans-unit>
        <trans-unit id="61eab4185699c92641d9413479e73b37872fd212" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; out to another perl after loading multiple dlls may result on a DLL baseaddress conflict. The internal cygwin error looks like like the following:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 複数のDLLをロードした後、別のPerlに出するDLLのBASEADDRESS競合に生じ得ます。cygwinの内部エラーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="fcca95252686536518c82a86f093a53ca5ff8ade" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; in combination with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; at the top of your Perl scripts means that the interpreter will pick up certain common programming errors. For instance, in the example above, the final &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; $y&lt;/code&gt; would cause a compile-time error and prevent you from running the program. Using &lt;code&gt;strict&lt;/code&gt; is highly recommended.</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; での組み合わせを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; Perlスクリプトの先頭にあるということは、インタープリターが特定の一般的なプログラミングエラーをピックアップすることを意味します。たとえば、上記の例では、最終的な &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; $y&lt;/code&gt; が原因でコンパイル時エラーが発生し、プログラムを実行できなくなります。 &lt;code&gt;strict&lt;/code&gt; の使用を強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="6570099c968b1dac1aeada91a2fa62948e513fde" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; を使用：</target>
        </trans-unit>
        <trans-unit id="c4ee3a2331f58e1266f76a324d649c5e7a530542" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(..., $x)&lt;/code&gt; with &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; to get the address where &lt;code&gt;$x&lt;/code&gt; is actually stored must be used with circumspection. Perl's internal machinery considers the relation between a variable and that address as its very own private matter and doesn't really care that we have obtained a copy. Therefore:</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(..., $x)&lt;/code&gt; で &lt;code&gt;P&lt;/code&gt; または &lt;code&gt;p&lt;/code&gt; アドレスを取得するために &lt;code&gt;$x&lt;/code&gt; 実際に格納されているがcircumspectionを使用する必要があります。Perlの内部機構は、変数とそのアドレスの間の関係をそれ自体のプライベートな問題と見なし、コピーを取得したことを本当に気にしません。したがって：</target>
        </trans-unit>
        <trans-unit id="f64f7e3c602eac9f0cc5d3fae9a96d9a3eb0bb0b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="5fe85d80b5d4e554e757435dadbee8779f515048" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; for larger strings:</source>
          <target state="translated">より大きな文字列に対して &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用する：</target>
        </trans-unit>
        <trans-unit id="77bac2c89d98d4342e51014bdc1e5dfcf83f7405" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 使用：</target>
        </trans-unit>
        <trans-unit id="9b2ba3ba2d555e75ce68454a406fe0f0433207e8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; (or the operator form, &lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; ) as the conditional of a &lt;code&gt;for&lt;/code&gt; loop is shorthand for the following. This behaviour is the same as a &lt;code&gt;while&lt;/code&gt; loop conditional.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; （またはオペレータ形、 &lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; の条件として） &lt;code&gt;for&lt;/code&gt; ループは、次の省略形です。この動作は、条件付きの &lt;code&gt;while&lt;/code&gt; ループと同じです。</target>
        </trans-unit>
        <trans-unit id="48ea9a8aca48a2ecece519f0da9a5610c9c21b22" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; (perl 5.6+):</source>
          <target state="translated">使い方 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; （perlの5.6+）：</target>
        </trans-unit>
        <trans-unit id="672d9d441ef641164ca3c34a7892f3146881bd19" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="46b9c6aa21d990c3320125b6b398a58171b824d2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c96b7be56d606a5173254b9ecaa85e8754516cc1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;C0&lt;/code&gt; to get Unicode characters while using &lt;code&gt;U0&lt;/code&gt; to get</source>
          <target state="translated">&lt;code&gt;U0&lt;/code&gt; を使用して取得しながら &lt;code&gt;C0&lt;/code&gt; を使用してUnicode文字を取得する</target>
        </trans-unit>
        <trans-unit id="bd76d249b9cc849b475f04243607bd5ac606dc24" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;EVERY&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;EVERY&lt;/code&gt; メソッドの使用</target>
        </trans-unit>
        <trans-unit id="0ecd1ec7133eb6a574dc47a89387830a895fdc67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;autouse&lt;/code&gt; will move important steps of your program's execution from compile time to runtime. This can</source>
          <target state="translated">&lt;code&gt;autouse&lt;/code&gt; を使用すると、プログラムの実行の重要なステップがコンパイル時からランタイムに移動します。これは</target>
        </trans-unit>
        <trans-unit id="2c94e397182ad35f0199796c485d6c8aec54e54f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;gen_extract_tagged&lt;/code&gt; to create extraction functions for specific tags is a good idea if those functions are going to be called more than once, since their performance is typically twice as good as the more general-purpose &lt;code&gt;extract_tagged&lt;/code&gt; .</source>
          <target state="translated">使用 &lt;code&gt;gen_extract_tagged&lt;/code&gt; より汎用としての性能が二倍良いと一般的であるため、これらの機能は、複数回呼び出されることになるだろうしている場合、特定のタグの抽出関数を作成することは良いアイデアです &lt;code&gt;extract_tagged&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b55d7735ea783b5e6004e758bd55af4f884bf92" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lib&lt;/code&gt; warns if none of the specified libraries can be found and &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; did fall back to one of the default libraries. To suppress this warning, use &lt;code&gt;try&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; を使用すると、指定されたライブラリーが見つからず、&lt;a href=&quot;math/bigint&quot;&gt;Math :: BigInt&lt;/a&gt;がデフォルトのライブラリーの1つにフォールバックした場合に警告します。この警告を抑制するには、代わりに &lt;code&gt;try&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0ffd8ad58b1a0f4bd73c5c83cc872616c113bd7f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;refaddr()&lt;/code&gt; is unreliable for testing whether or not two shared references are equivalent (e.g., when testing for circular references). Use &lt;a href=&quot;#is_shared-VARIABLE&quot;&gt;is_shared()&lt;/a&gt;, instead:</source>
          <target state="translated">&lt;code&gt;refaddr()&lt;/code&gt; の使用は、2つの共有参照が同等であるかどうかをテストする場合は信頼できません（たとえば、循環参照をテストする場合）。代わりに&lt;a href=&quot;#is_shared-VARIABLE&quot;&gt;is_shared（）を&lt;/a&gt;使用してください：</target>
        </trans-unit>
        <trans-unit id="2ef178ae90603162abddf22f7d9bb0fc3e898af5" translate="yes" xml:space="preserve">
          <source>Using Attributes and Parameters</source>
          <target state="translated">属性とパラメータの使用</target>
        </trans-unit>
        <trans-unit id="03bf2717e06af78329e93ebf453e1e826613e2e4" translate="yes" xml:space="preserve">
          <source>Using B::Concise outside of the O framework</source>
          <target state="translated">B::Concise を O フレームワークの外で使う</target>
        </trans-unit>
        <trans-unit id="18bafced67519d44baeebd7cfdcaf662b62afabc" translate="yes" xml:space="preserve">
          <source>Using DB_File with Berkeley DB version 2 or greater</source>
          <target state="translated">Berkeley DB バージョン 2 以上で DB_File を使用する場合</target>
        </trans-unit>
        <trans-unit id="97e4ec7dc3ee57617b8c25e5da7b2620a2b30764" translate="yes" xml:space="preserve">
          <source>Using EVERY methods</source>
          <target state="translated">あらゆる方法を駆使して</target>
        </trans-unit>
        <trans-unit id="eaf5424654cdf470f964dbc03078a17cf18e6b68" translate="yes" xml:space="preserve">
          <source>Using Encode</source>
          <target state="translated">エンコードの使用</target>
        </trans-unit>
        <trans-unit id="b3c01fd9731ccf33cc32d289966ab7fb5c9b6f88" translate="yes" xml:space="preserve">
          <source>Using Fill Mode</source>
          <target state="translated">フィルモードの使用</target>
        </trans-unit>
        <trans-unit id="5cb7c472310d76de5801b53745949b0358783728" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple and Exporter together</source>
          <target state="translated">Filter::SimpleとExporterの併用</target>
        </trans-unit>
        <trans-unit id="8adffc36e41ac8b6ef194fa0464f19be3d960928" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple with an explicit &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine</source>
          <target state="translated">明示的な &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; サブルーチンでFilter :: Simpleを使用する</target>
        </trans-unit>
        <trans-unit id="4fae20bc9d38356a2d17453bc9b205cc1c897f19" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple with an explicit import subroutine</source>
          <target state="translated">明示的なインポートサブルーチンでの Filter::Simple の使用</target>
        </trans-unit>
        <trans-unit id="1ae3259ed8aaec135b40d3c0be57406133a41acb" translate="yes" xml:space="preserve">
          <source>Using GIMME_V</source>
          <target state="translated">GIMME_Vを使う</target>
        </trans-unit>
        <trans-unit id="1d57725fba088f8b24d927a2eedcfd4e936a608f" translate="yes" xml:space="preserve">
          <source>Using GNU's gcc for building Perl</source>
          <target state="translated">PerlのビルドにGNUのgccを使う</target>
        </trans-unit>
        <trans-unit id="e882257535f024e0d015187d37538f63a8847fce" translate="yes" xml:space="preserve">
          <source>Using G_EVAL</source>
          <target state="translated">G_EVALの使用</target>
        </trans-unit>
        <trans-unit id="295eff162915babd344155c6be19db49d4d64f02" translate="yes" xml:space="preserve">
          <source>Using G_KEEPERR</source>
          <target state="translated">G_KEEPERRの使用</target>
        </trans-unit>
        <trans-unit id="16d5f49af97261f97893047f771a98e55443d77c" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl</source>
          <target state="translated">Perl で大きなファイルを使う</target>
        </trans-unit>
        <trans-unit id="317a1b556565aa526e2b302cc529d9bc9bad8e03" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl &amp;lt; 5L</source>
          <target state="translated">5L未満のPerlでの大きなファイルの使用</target>
        </trans-unit>
        <trans-unit id="4193d5877700c1da7cc3dc0d04426fb8e279c514" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl on HP-UX</source>
          <target state="translated">HP-UX で Perl で大容量ファイルを使用する</target>
        </trans-unit>
        <trans-unit id="bb8e5976c90f08c21142951c3aacf31e66206c3b" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl on Tru64</source>
          <target state="translated">Tru64 での Perl での大容量ファイルの使用</target>
        </trans-unit>
        <trans-unit id="d35a8b92c0313948c8001f6e0f5a80140456f638" translate="yes" xml:space="preserve">
          <source>Using Math::BigInt::Lite</source>
          <target state="translated">Math::BigInt::Liteの使用</target>
        </trans-unit>
        <trans-unit id="f4a9198bb8db024f66e7beddb02099ae2c33e45d" translate="yes" xml:space="preserve">
          <source>Using POSIX::ARG_MAX. Otherwise falling back to 4096.</source>
          <target state="translated">POSIX::ARG_MAXを使用しています。それ以外の場合は4096にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7f350838d7d6c4618cf4c3624992c0a5fa550ccf" translate="yes" xml:space="preserve">
          <source>Using Perl in &quot;native&quot; BS2000</source>
          <target state="translated">ネイティブ」BS2000でPerlを使う</target>
        </trans-unit>
        <trans-unit id="adbb3dbb566652d469c92e143d370e6625a585c4" translate="yes" xml:space="preserve">
          <source>Using Perl in OS/400 PASE</source>
          <target state="translated">OS/400のPASEでPerlを使う</target>
        </trans-unit>
        <trans-unit id="2f91327799ddf2016004ebaf8e8d6bedda20acf6" translate="yes" xml:space="preserve">
          <source>Using Perl in Symbian</source>
          <target state="translated">SymbianでPerlを使う</target>
        </trans-unit>
        <trans-unit id="6d719543bb32291214db915134a27443927a8c27" translate="yes" xml:space="preserve">
          <source>Using Perl in the Posix-Shell of BS2000</source>
          <target state="translated">BS2000のPosix-ShellでのPerlの使用法</target>
        </trans-unit>
        <trans-unit id="84118c01838e699ac467fa37b8bb29a7f8370768" translate="yes" xml:space="preserve">
          <source>Using Perl modules</source>
          <target state="translated">Perlモジュールの使用</target>
        </trans-unit>
        <trans-unit id="028de32ca6d30212bfbce4a0c1bee8b8576b4e69" translate="yes" xml:space="preserve">
          <source>Using Perl modules, which themselves use C libraries, from your C program</source>
          <target state="translated">C プログラムから C ライブラリを使用する Perl モジュールを使用する</target>
        </trans-unit>
        <trans-unit id="0ff9818b99a67e75450030e8c7e7092cbe65f9c0" translate="yes" xml:space="preserve">
          <source>Using Perl on WinCE</source>
          <target state="translated">WinCEでPerlを使う</target>
        </trans-unit>
        <trans-unit id="a5580cc662de9455c8f221545dacc2b26132369a" translate="yes" xml:space="preserve">
          <source>Using Perl to Dispose of Temporaries</source>
          <target state="translated">Perlを使ってテンポラリを処分する</target>
        </trans-unit>
        <trans-unit id="5320f15bf6dff40493f314bd488164951d124fee" translate="yes" xml:space="preserve">
          <source>Using Perl to dispose of temporaries</source>
          <target state="translated">Perlを使ってテンポラリを処分する</target>
        </trans-unit>
        <trans-unit id="b797430b32d30f68c1ea4534b74218539d3aaf64" translate="yes" xml:space="preserve">
          <source>Using Perl's built in conversion of numbers with leading zeros:</source>
          <target state="translated">先頭のゼロを含む数値の変換にPerlの組み込みを使用しています。</target>
        </trans-unit>
        <trans-unit id="f15ed3b42ac67b1af9e23e97edaf317ed0b825a6" translate="yes" xml:space="preserve">
          <source>Using PerlIO and different encodings on ASCII and EBCDIC partitions</source>
          <target state="translated">ASCII および EBCDIC パーティションでの PerlIO と異なるエンコーディングの使用</target>
        </trans-unit>
        <trans-unit id="36711385fbee8d56f23de9017ef392314347e2e0" translate="yes" xml:space="preserve">
          <source>Using References</source>
          <target state="translated">参考文献の使用</target>
        </trans-unit>
        <trans-unit id="82685302632dac9e1fd31a13c0849aefa5124be7" translate="yes" xml:space="preserve">
          <source>Using Unicode in XS</source>
          <target state="translated">XSでのUnicodeの使用</target>
        </trans-unit>
        <trans-unit id="998956ebf62d14d931cc7ad656bc083d855b7aba" translate="yes" xml:space="preserve">
          <source>Using XS With C++</source>
          <target state="translated">C++でXSを使う</target>
        </trans-unit>
        <trans-unit id="dac1e6f7cf5fb38291cdecac855edeefdf437f99" translate="yes" xml:space="preserve">
          <source>Using \ for Windows, except for &quot;gmake&quot; where it is /.</source>
          <target state="translated">Windowsでは、&quot;gmake &quot;が/になっているところを除いて、&quot;Using œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœﾞ</target>
        </trans-unit>
        <trans-unit id="8137c8c1ed484dbce9760788d8ea8483549cf1f0" translate="yes" xml:space="preserve">
          <source>Using _t/harness_ for testing</source>
          <target state="translated">テストに_t/harness_を使用する</target>
        </trans-unit>
        <trans-unit id="4f4b906f20b028b71f5628fd6f90032d406f6155" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;__WARN__&lt;/code&gt; handler provides a powerful way to silence all warnings (even the so-called mandatory ones). An example:</source>
          <target state="translated">&lt;code&gt;__WARN__&lt;/code&gt; ハンドラーを使用すると、すべての警告（いわゆる必須の警告であっても）を非表示にする強力な方法が提供されます。例：</target>
        </trans-unit>
        <trans-unit id="b4b4ca6e1deabca931233328798f7fbb48c8c07b" translate="yes" xml:space="preserve">
          <source>Using a closure as a function template allows us to generate many functions that act similarly. Suppose you wanted functions named after the colors that generated HTML font changes for the various colors:</source>
          <target state="translated">クロージャを関数テンプレートとして使用することで、似たような動作をする多くの関数を生成することができます。様々な色のHTMLフォントの変更を生成する色にちなんだ名前の関数が欲しかったとしましょう。</target>
        </trans-unit>
        <trans-unit id="3428ced333d3144f878ace997075432ead893fb6" translate="yes" xml:space="preserve">
          <source>Using a hash reference is</source>
          <target state="translated">ハッシュ参照の使用は</target>
        </trans-unit>
        <trans-unit id="336ecaf20b3b819b2df81459841f824dd710f158" translate="yes" xml:space="preserve">
          <source>Using a lexical pragma to enable or disable legacy behavior should be considered when appropriate, and in the absence of any pragma legacy behavior should be enabled. Which backward-incompatible changes are controlled implicitly by a 'use v5.x.y' is a decision which should be made by the pumpking in consultation with the community.</source>
          <target state="translated">レガシーな動作を有効にしたり無効にしたりするために語彙的なプラグマを使うことは、適切な場合には考慮すべきであり、プラグマがない場合にはレガシーな動作を有効にすべきです。どの後方互換性のない変更を 'use v5.x.y' で暗黙のうちに制御するかは、コミュニティとの協議の上、pumpking が決定すべきことです。</target>
        </trans-unit>
        <trans-unit id="37d264a714cc8982079f31352e5a02a2d407c9ec" translate="yes" xml:space="preserve">
          <source>Using a reference as a string produces both its referent's type, including any package blessing as described in &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;, as well as the numeric address expressed in hex. The ref() operator returns just the type of thing the reference is pointing to, without the address. See &lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt; for details and examples of its use.</source>
          <target state="translated">参照を文字列として使用すると、&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;で説明されているパッケージの祝福を含む、その参照先のタイプと、16進数で表された数値アドレスの両方が生成されます。ref（）演算子は、参照が指しているもののタイプのみを返し、アドレスは返しません。参照&lt;a href=&quot;functions/ref&quot;&gt;参照&lt;/a&gt;詳細とその使用例のために。</target>
        </trans-unit>
        <trans-unit id="178dbf3b1655da796ad383968646cf6aaa7b961a" translate="yes" xml:space="preserve">
          <source>Using a regular Perl string as a key or value for a DBM hash will trigger a wide character exception if any codepoints won&amp;rsquo;t fit into a byte. Here&amp;rsquo;s how to manually manage the translation:</source>
          <target state="translated">通常のPerl文字列をDBMハッシュのキーまたは値として使用すると、コードポイントがバイトに収まらない場合にワイド文字例外がトリガーされます。翻訳を手動で管理する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="544cb5d954d39b68ec105da285e699133ee66333" translate="yes" xml:space="preserve">
          <source>Using a slice on the lefthand side of the assignment supplies list context to the righthand side. This can lead to unexpected results. For instance, if you want to read a single line from a filehandle, assigning to a scalar value is fine:</source>
          <target state="translated">課題の左側にスライスを使用すると、リストのコンテキストが右側に供給されます。これは予期しない結果をもたらす可能性があります。例えば、ファイルハンドルから1行を読みたい場合、スカラ値に代入しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="047ab6347496bdbb043bb75da5faf973242f2e7a" translate="yes" xml:space="preserve">
          <source>Using a source-level debugger</source>
          <target state="translated">ソースレベルのデバッガの使用</target>
        </trans-unit>
        <trans-unit id="5e1e5b1c335e1407e117badbc02a20174cee06fd" translate="yes" xml:space="preserve">
          <source>Using a string or number as a reference produces a symbolic reference, as explained above. Using a reference as a number produces an integer representing its storage location in memory. The only useful thing to be done with this is to compare two references numerically to see whether they refer to the same location.</source>
          <target state="translated">文字列や数値を参照として使用すると、上で説明したようにシンボリックな参照が生成されます。参照を数値として使用すると、メモリ内の格納場所を表す整数が生成されます。これを使って唯一有用なのは、2 つの参照を数値的に比較して、同じ場所を参照しているかどうかを確認することです。</target>
        </trans-unit>
        <trans-unit id="d9e91a5896764f48c6ace56fa4d53091e1acc312" translate="yes" xml:space="preserve">
          <source>Using a subroutine as part of your sort is a powerful way to get exactly what you want, but will usually be slower than the built-in</source>
          <target state="translated">ソートの一部としてサブルーチンを使うのは強力な方法ですが、通常は組み込みの</target>
        </trans-unit>
        <trans-unit id="2a79ecdd0e9982d50231f84c62b552b6746f4f38" translate="yes" xml:space="preserve">
          <source>Using a value of &lt;code&gt;'IGNORE'&lt;/code&gt; usually has the effect of ignoring the signal, except for the &lt;code&gt;CHLD&lt;/code&gt; signal. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more about this special case.</source>
          <target state="translated">&lt;code&gt;'IGNORE'&lt;/code&gt; 値を使用すると、 &lt;code&gt;CHLD&lt;/code&gt; 信号を除き、通常は信号を無視する効果があります。この特殊なケースの詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4df5e3fd8acd272c23a1963f6dc8693fe3a9c164" translate="yes" xml:space="preserve">
          <source>Using an indirect object with &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is also more secure. This usage (which also works fine with system()) forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; での間接オブジェクトの使用もより安全です。この使用法（system（）でも正常に機能）は、リストに引数が1つしかない場合でも、引数を複数値リストとして強制的に解釈します。そうすれば、シェルがワイルドカードを展開したり、空白を含む単語を分割したりしても安全です。</target>
        </trans-unit>
        <trans-unit id="44d98963d401217f7be5255c87293a2853856e67" translate="yes" xml:space="preserve">
          <source>Using an indirect object with &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is also more secure. This usage (which also works fine with system()) forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; での間接オブジェクトの使用もより安全です。この使用法（system（）でも正常に機能）は、リストに引数が1つしかない場合でも、引数を複数値リストとして強制的に解釈します。そうすれば、シェルがワイルドカードを展開したり、空白を含む単語を分割したりしても安全です。</target>
        </trans-unit>
        <trans-unit id="604eef1aa9c7558fedd10f863a9440cef58a337c" translate="yes" xml:space="preserve">
          <source>Using an installation prefix of '/usr' will result in a directory layout that mirrors that of Apple's default Perl, with core modules stored in '/System/Library/Perl/${version}', CPAN modules stored in '/Library/Perl/${version}', and the addition of '/Network/Library/Perl/${version}' to @INC for modules that are stored on a file server and used by many Macs.</source>
          <target state="translated">インストールプレフィックスを「/usr」にすると、Apple のデフォルトの Perl と同じようなディレクトリレイアウトになります。</target>
        </trans-unit>
        <trans-unit id="aa23c98317fa566c477de2941d147e87b315123e" translate="yes" xml:space="preserve">
          <source>Using an object as the left operand is allowed, although not very useful. Smartmatching rules take precedence over overloading, so even if the object in the left operand has smartmatch overloading, this will be ignored. A left operand that is a non-overloaded object falls back on a string or numeric comparison of whatever the &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; operator returns. That means that</source>
          <target state="translated">オブジェクトを左のオペランドとして使用することは許可されていますが、あまり役に立ちません。スマートマッチングルールはオーバーロードよりも優先されるため、左のオペランドのオブジェクトにスマートマッチオーバーロードがある場合でも、これは無視されます。オーバーロードされていないオブジェクトである左オペランドは、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 演算子が返すものの文字列または数値比較にフォールバックします。つまり</target>
        </trans-unit>
        <trans-unit id="6e3237ae31bb37c81782ea50be28770f0de2555e" translate="yes" xml:space="preserve">
          <source>Using any of the above invocations, the first argument to the constructor is always the corresponding package name (or object reference). No other arguments are required, but if desired, an associative array (or hash-table) my be passed to the &lt;b&gt;new()&lt;/b&gt; constructor, as in:</source>
          <target state="translated">上記の呼び出しのいずれかを使用すると、コンストラクターの最初の引数は常に対応するパッケージ名（またはオブジェクト参照）になります。他の引数は必要ありませんが、必要に応じて、次のように連想配列（またはハッシュテーブル）を&lt;b&gt;new（）&lt;/b&gt;コンストラクターに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8097e70784bcbb030b53b18d1acb24cd21f46737" translate="yes" xml:space="preserve">
          <source>Using arguments of the form &lt;code&gt;-Ldir&lt;/code&gt; and &lt;code&gt;-lname&lt;/code&gt; is recommended.</source>
          <target state="translated">&lt;code&gt;-Ldir&lt;/code&gt; および &lt;code&gt;-lname&lt;/code&gt; の形式の引数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f6161aa0cd787955761dec12d0177c3ac026e9b0" translate="yes" xml:space="preserve">
          <source>Using call_argv</source>
          <target state="translated">call_argv の使用</target>
        </trans-unit>
        <trans-unit id="9134163152acbc5710de0bd418aa078593a2b9c2" translate="yes" xml:space="preserve">
          <source>Using call_method</source>
          <target state="translated">call_methodを使う</target>
        </trans-unit>
        <trans-unit id="b881b2dfc007740bbb57d40d5226f14e171509f9" translate="yes" xml:space="preserve">
          <source>Using call_sv</source>
          <target state="translated">call_svの使用</target>
        </trans-unit>
        <trans-unit id="fa52cf5ccb980442f1ec3e9f0afd04690158c461" translate="yes" xml:space="preserve">
          <source>Using caret fields can produce lines where all fields are blank. You can suppress such lines by putting a &quot;~&quot; (tilde) character anywhere in the line. The tilde will be translated to a space upon output.</source>
          <target state="translated">キャレットフィールドを使用すると、すべてのフィールドが空白の行が生成されることがあります。そのような行は、行内のどこかに &quot;~&quot; (チルダ)文字を入れることで抑制することができます。チルダは出力時にスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="3b35e7b174dfce328e49d2c9b54ef677263d0168" translate="yes" xml:space="preserve">
          <source>Using caseless (&lt;code&gt;/i&lt;/code&gt;) regular expression matching.</source>
          <target state="translated">大文字と小文字を区別しない（ &lt;code&gt;/i&lt;/code&gt; ）正規表現マッチングを使用します。</target>
        </trans-unit>
        <trans-unit id="912a2aec3bed273542aa33d8ea10bb43e6f23900" translate="yes" xml:space="preserve">
          <source>Using character classes</source>
          <target state="translated">文字クラスの使用</target>
        </trans-unit>
        <trans-unit id="0ed204e094dc9752d186724902c15a617f19dc27" translate="yes" xml:space="preserve">
          <source>Using diagnostics to get stack traces from a misbehaving script:</source>
          <target state="translated">診断を使用して、動作不良のスクリプトからスタックトレースを取得します。</target>
        </trans-unit>
        <trans-unit id="6d1350125897c58fd7a177587a74cb5b6d024e7d" translate="yes" xml:space="preserve">
          <source>Using double angle brackets inside of a while causes the open to use the three argument form (with the second argument being &lt;code&gt;&amp;lt;&lt;/code&gt; ), so all arguments in &lt;code&gt;ARGV&lt;/code&gt; are treated as literal filenames (including &lt;code&gt;&quot;-&quot;&lt;/code&gt; ). (Note that for convenience, if you use &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; and if &lt;code&gt;@ARGV&lt;/code&gt; is empty, it will still read from the standard input.)</source>
          <target state="translated">while内で二重山括弧を使用すると、openは3つの引数の形式（2番目の引数は &lt;code&gt;&amp;lt;&lt;/code&gt; ）を使用するため、 &lt;code&gt;ARGV&lt;/code&gt; のすべての引数はリテラルファイル名（ &lt;code&gt;&quot;-&quot;&lt;/code&gt; を含む）として扱われます。（便宜上、 &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; を使用し、 &lt;code&gt;@ARGV&lt;/code&gt; が空の場合でも、標準入力から読み取られます。）</target>
        </trans-unit>
        <trans-unit id="87082cc66c652c8a0a8c6cf8ba8fff9479b0be7a" translate="yes" xml:space="preserve">
          <source>Using either $MM-&amp;gt;{uc $var} || $Config{lc $var}, it will attempt to replace it's $prefix with a $new_prefix.</source>
          <target state="translated">$ MM-&amp;gt; {uc $ var}のいずれかを使用する|| $ Config {lc $ var}、それは$ prefixを$ new_prefixで置き換えようとします。</target>
        </trans-unit>
        <trans-unit id="215bd29754319db34f811a8f9488126e67fb90a8" translate="yes" xml:space="preserve">
          <source>Using embedded Perl with POSIX locales</source>
          <target state="translated">POSIXロケールを使った組み込みPerlの使用</target>
        </trans-unit>
        <trans-unit id="b18845c29a07642058d0aa5ccceaac4ae90f9d59" translate="yes" xml:space="preserve">
          <source>Using gcc statement expressions</source>
          <target state="translated">gcc 文式の使用</target>
        </trans-unit>
        <trans-unit id="2fe92cd4a689f7ce76bfa5b984e6c38acace0732" translate="yes" xml:space="preserve">
          <source>Using gcc-3.x (tested with 3.0.4, 3.1, and 3.2) now works out of the box, as do recent gcc-2.9 builds available directly from IBM as part of their Linux compatibility packages, available here:</source>
          <target state="translated">gcc-3.x (3.0.4,3.1,3.2 でテスト済み)を使用することで、Linux 互換性パッケージの一部として IBM から直接入手できる最近の gcc-2.9 ビルドと同様に、すぐに動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="bdb0c9c540b125781f1757da970ccae106c403a1" translate="yes" xml:space="preserve">
          <source>Using gdb to look at specific parts of a program</source>
          <target state="translated">プログラムの特定の部分を見るために gdb を使用する</target>
        </trans-unit>
        <trans-unit id="57bf0c1d6a34f5d8784552210b62d448a2b10410" translate="yes" xml:space="preserve">
          <source>Using gdb to look at what the parser/lexer are doing</source>
          <target state="translated">gdbを使ってパーサー/レキサーの動作を見る</target>
        </trans-unit>
        <trans-unit id="29fde3627eec5ec683270fb27481ef8c0d1c38c6" translate="yes" xml:space="preserve">
          <source>Using independent subexpressions to prevent backtracking</source>
          <target state="translated">独立した副表現を使って逆戻りを防ぐ</target>
        </trans-unit>
        <trans-unit id="31ab5d33d67aac1b9f2ccad1cbfd447894360c2b" translate="yes" xml:space="preserve">
          <source>Using logically paired delimiters can be even more readable:</source>
          <target state="translated">論理的にペアになった区切り文字を使用すると、さらに読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="3a44a3d396fc486b4ee2331bfc52809b0dad44df" translate="yes" xml:space="preserve">
          <source>Using methods that do not modify, but test that the contents works:</source>
          <target state="translated">修正しないメソッドを使用して、内容が動作するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b0d1b97f67a06429913567862e9a662a62326468" translate="yes" xml:space="preserve">
          <source>Using methods that do not modify, but test the contents works:</source>
          <target state="translated">変更はしないが、内容をテストするメソッドを使用することで動作します。</target>
        </trans-unit>
        <trans-unit id="a5aebc39485edc859f77fc91f87d35c5af691252" translate="yes" xml:space="preserve">
          <source>Using methods that do not modify, but testthe contents works:</source>
          <target state="translated">修正しない方法を使用しても、コンテンツが動作します。</target>
        </trans-unit>
        <trans-unit id="8d80ea05e0ed4a3e5f034eecf41875e66394f03f" translate="yes" xml:space="preserve">
          <source>Using negation on a single letter option when bundling is in effect is pointless and will result in a warning.</source>
          <target state="translated">バンドルが有効なときに一文字オプションで否定を使うのは無意味であり、警告になります。</target>
        </trans-unit>
        <trans-unit id="8d592d89e9701f8203326be192c2ab0972d996bc" translate="yes" xml:space="preserve">
          <source>Using open() for IPC</source>
          <target state="translated">IPC のための open()の使用</target>
        </trans-unit>
        <trans-unit id="f8c56b194bd4e8beff577cc65b3f025dea6a56fa" translate="yes" xml:space="preserve">
          <source>Using perl as shipped with HP-UX</source>
          <target state="translated">HP-UX に同梱されている perl を使用する</target>
        </trans-unit>
        <trans-unit id="543f3ae6c47ff0945f0303be3eebde44d6d34ce3" translate="yes" xml:space="preserve">
          <source>Using perl from HP's porting centre</source>
          <target state="translated">HPのポーティングセンターからperlを使う</target>
        </trans-unit>
        <trans-unit id="8b05c58f51293f54962b4c8b3d752fd39e7ea984" translate="yes" xml:space="preserve">
          <source>Using perl to connect to Oracle databases through DBI and DBD::Oracle has caused a lot of people many headaches. Read README.hpux in the DBD::Oracle for much more information. The reason to mention it here is that Oracle requires a perl built with libcl and libpthread, the latter even when perl is build without threads. Building perl using all defaults, but still enabling to build DBD::Oracle later on can be achieved using</source>
          <target state="translated">Perlを使ってDBIやDBD::Oracleを使ってOracleデータベースに接続すると、多くの人が頭痛の種になっています。詳細は DBD::Oracle の README.hpux を読んでください。ここで言及する理由は、Oracle は libcl と libpthread でビルドされた perl を必要とし、後者は perl がスレッドなしでビルドされている場合でも必要だからです。すべてのデフォルトを使用して perl をビルドしても、後で DBD::Oracle をビルドできるようにするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="7a2126efc34d2ceda4c425a482fb9bb2ca847f69" translate="yes" xml:space="preserve">
          <source>Using perl's built in conversion of &lt;code&gt;0x&lt;/code&gt; notation:</source>
          <target state="translated">perlに組み込まれている &lt;code&gt;0x&lt;/code&gt; 表記の変換を使用する：</target>
        </trans-unit>
        <trans-unit id="1d2a5a50232b147e3a169652436928c470a9aa77" translate="yes" xml:space="preserve">
          <source>Using printf formats for non-basic C types</source>
          <target state="translated">非基本的なC言語の型でprintf形式を使用する</target>
        </trans-unit>
        <trans-unit id="df5384f5e1467c8d0cf10444a33f9f98d9662cee" translate="yes" xml:space="preserve">
          <source>Using qq(), q(), and qx(), instead of &quot;double quotes&quot;, 'single quotes', and `backticks`, may make one-liners easier to write.</source>
          <target state="translated">二重引用符」や「単一引用符」、`backticks` の代わりに qqq()、q()、qx()を使うと、ワンライナーを書きやすくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="322a6e9972f7fb8edd8295fc130224c62501d62e" translate="yes" xml:space="preserve">
          <source>Using regular expressions in Perl</source>
          <target state="translated">Perlで正規表現を使う</target>
        </trans-unit>
        <trans-unit id="6fac332e29fd0c799ec1618a5cc40f7221532230" translate="yes" xml:space="preserve">
          <source>Using single-quote as a delimiter protects the command from Perl's double-quote interpolation, passing it on to the shell instead:</source>
          <target state="translated">シングルクォートをデリミタとして使用することで、Perl のダブルクォート補間からコマンドを保護し、代わりにシェルに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e361630850aae34ab890ed75be3d3681ddf2f2b5" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; form as an exception trap in libraries does have some issues. Due to the current arguably broken state of &lt;code&gt;__DIE__&lt;/code&gt; hooks, you may wish not to trigger any &lt;code&gt;__DIE__&lt;/code&gt; hooks that user code may have installed. You can use the &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; construct for this purpose, as this example shows:</source>
          <target state="translated">ライブラリの例外トラップとして &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; フォームを使用すると、いくつかの問題が発生します。 &lt;code&gt;__DIE__&lt;/code&gt; フックの現在の間違いなく壊れた状態のため、ユーザーコードがインストールした &lt;code&gt;__DIE__&lt;/code&gt; フックをトリガーしないようにすることができます。次の例に示すように、この目的で &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; 構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="1af4f95da6bd74e39669d85ff89a3cba96099269" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; form as an exception trap in libraries does have some issues. Due to the current arguably broken state of &lt;code&gt;__DIE__&lt;/code&gt; hooks, you may wish not to trigger any &lt;code&gt;__DIE__&lt;/code&gt; hooks that user code may have installed. You can use the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; construct for this purpose, as this example shows:</source>
          <target state="translated">ライブラリの例外トラップとして &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; フォームを使用すると、いくつかの問題が発生します。 &lt;code&gt;__DIE__&lt;/code&gt; フックの現在の間違いなく壊れた状態のため、ユーザーコードがインストールした &lt;code&gt;__DIE__&lt;/code&gt; フックをトリガーしないようにすることができます。次の例に示すように、この目的で &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; 構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="de2169c7a04ae8dba7470fca93fa527b85798dbe" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; 関数を使用する：</target>
        </trans-unit>
        <trans-unit id="1108296e898fc2261dd95f4aa7570d85ddac276e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; command of Perl debugger (see &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;) one can deduce which operations are overloaded (and which ancestor triggers this overloading). Say, if &lt;code&gt;eq&lt;/code&gt; is overloaded, then the method &lt;code&gt;(eq&lt;/code&gt; is shown by debugger. The method &lt;code&gt;()&lt;/code&gt; corresponds to the &lt;code&gt;fallback&lt;/code&gt; key (in fact a presence of this method shows that this package has overloading enabled, and it is what is used by the &lt;code&gt;Overloaded&lt;/code&gt; function of module &lt;code&gt;overload&lt;/code&gt; ).</source>
          <target state="translated">Perlデバッガー（&lt;a href=&quot;perldebug&quot;&gt;perldebugを&lt;/a&gt;参照）の &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; コマンドを使用して、どの操作がオーバーロードされているか（そしてどの祖先がこのオーバーロードをトリガーするか）を推測できます。たとえば、 &lt;code&gt;eq&lt;/code&gt; がオーバーロードされている場合、メソッド &lt;code&gt;(eq&lt;/code&gt; はデバッガーによって表示されます。メソッド &lt;code&gt;()&lt;/code&gt; は &lt;code&gt;fallback&lt;/code&gt; キーに対応します（実際、このメソッドの存在は、このパッケージでオーバーロードが有効になっていることを示しており、モジュール &lt;code&gt;overload&lt;/code&gt; の &lt;code&gt;Overloaded&lt;/code&gt; 関数）。</target>
        </trans-unit>
        <trans-unit id="aa67b5d2a4e3907ddf928ce915424a8bf19328d4" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 関数の使用：</target>
        </trans-unit>
        <trans-unit id="53251a51732562d07b79a04a55bb9b101d155369" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; pragma ensures that all variables are properly declared and prevents other misuses of legacy Perl features.</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; レガシーのPerlの機能の他の誤用は、プラグマのすべての変数が適切に宣言されていることを確認して防止します。</target>
        </trans-unit>
        <trans-unit id="1bda480993361a430b2548cdcd3f02a2d61e7bb5" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;In&lt;/code&gt; prefix avoids this ambiguity, so far. But new versions of Unicode continue to add new properties whose names begin with &lt;code&gt;In&lt;/code&gt; . There is a possibility that one of them someday will conflict with your usage. Since this is just a Perl extension, Unicode's name will take precedence and your code will become broken. Also, Unicode is free to add a script whose name begins with &lt;code&gt;In&lt;/code&gt; ; that would cause problems.</source>
          <target state="translated">&lt;code&gt;In&lt;/code&gt; 接頭辞を使用すると、これまでのところ、このあいまいさを回避できます。ただし、Unicodeの新しいバージョンでは、名前が &lt;code&gt;In&lt;/code&gt; で始まる新しいプロパティが引き続き追加されます。そのうちの1つがいつかあなたの使用法と衝突する可能性があります。これは単なるPerl拡張であるため、Unicodeの名前が優先され、コードが破損します。また、Unicodeでは、名前が &lt;code&gt;In&lt;/code&gt; で始まるスクリプトを自由に追加できます。それは問題を引き起こすでしょう。</target>
        </trans-unit>
        <trans-unit id="26fd47284e729cedc59da500b68930f9ee3e861b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;diagnostics&lt;/code&gt; pragma:</source>
          <target state="translated">&lt;code&gt;diagnostics&lt;/code&gt; プラグマの使用：</target>
        </trans-unit>
        <trans-unit id="18c4a3f647e2f5d82357ab39ea92ae98228cc2e0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;nntpstat&lt;/code&gt; command to select by message-id is valid but of questionable value, since a selection by message-id does &lt;b&gt;not&lt;/b&gt; alter the &quot;current article pointer&quot;.</source>
          <target state="translated">&lt;code&gt;nntpstat&lt;/code&gt; コマンドを使用してメッセージIDで選択することは有効ですが、メッセージIDによる選択は「現在の記事のポインタ」を変更し&lt;b&gt;ない&lt;/b&gt;ため、疑わしい値です。</target>
        </trans-unit>
        <trans-unit id="13d6e3a9e702d5a08e56927cb7a997c29fc49a7b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;splain&lt;/code&gt; standalone filter program:</source>
          <target state="translated">使用 &lt;code&gt;splain&lt;/code&gt; スタンドアロンフィルタプログラムを：</target>
        </trans-unit>
        <trans-unit id="5ea33d1eaae8e24543688decd019ec0f69a1f79d" translate="yes" xml:space="preserve">
          <source>Using the CPAN module &lt;code&gt;Bit::Vector&lt;/code&gt; :</source>
          <target state="translated">CPANモジュール &lt;code&gt;Bit::Vector&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="910c0c6f5c0907edc9665e4e606f548cf3f4c360" translate="yes" xml:space="preserve">
          <source>Using the G_EVAL flag described above will always set &lt;code&gt;$@&lt;/code&gt; : clearing it if there was no error, and setting it to describe the error if there was an error in the called code. This is what you want if your intention is to handle possible errors, but sometimes you just want to trap errors and stop them interfering with the rest of the program.</source>
          <target state="translated">上記のG_EVALフラグを使用すると、常に &lt;code&gt;$@&lt;/code&gt; が設定されます。エラーがなかった場合はそれをクリアし、呼び出されたコードにエラーがあった場合はエラーを説明するように設定します。これは、考えられるエラーを処理することを意図している場合に必要ですが、エラーをトラップして、プログラムの残りの部分に干渉しないようにする場合もあります。</target>
        </trans-unit>
        <trans-unit id="81c0cbb80720ba82333e9cac242b49c7344290c8" translate="yes" xml:space="preserve">
          <source>Using the O_WRONLY flag.</source>
          <target state="translated">O_WRONLYフラグを使用しています。</target>
        </trans-unit>
        <trans-unit id="318651aa0afd4166b844c0395b31d38b0b5bb275" translate="yes" xml:space="preserve">
          <source>Using the copy or the original with overloaded math is okay, e.g. the following work:</source>
          <target state="translated">コピーや原本をオーバーロードした数学を使ってもOK、例えば次のような作業をしてもOKです。</target>
        </trans-unit>
        <trans-unit id="0de692f809342e61f897ad9464158e162341eb3b" translate="yes" xml:space="preserve">
          <source>Using the form $x += $y; etc over $x = $x + $y is faster, since a copy of $x must be made in the second case. For long numbers, the copy can eat up to 20% of the work (in the case of addition/subtraction, less for multiplication/division). If $y is very small compared to $x, the form $x += $y is MUCH faster than $x = $x + $y since making the copy of $x takes more time then the actual addition.</source>
          <target state="translated">2 番目のケースでは $x のコピーを作成しなければならないので、 $x +=$y;などの形式を $x=$x+$y の上に使用する方が高速です。長い数値の場合、コピーは最大20%の作業量を消費します (足し算/引き算の場合はそれ以下、乗算/除算の場合はそれ以下になります)。y が $x に比べて非常に小さい場合、 $x +=$y の形式は $x=$x+$y よりもはるかに速くなります。</target>
        </trans-unit>
        <trans-unit id="12ccaa0444078f2a1b0edccce245e0b394be801a" translate="yes" xml:space="preserve">
          <source>Using the supplied template, create the temporary directory in a standard location for temporary files. Equivalent to doing</source>
          <target state="translated">付属のテンプレートを使用して、一時ファイルの標準的な場所に一時ディレクトリを作成します。を実行するのと同じです。</target>
        </trans-unit>
        <trans-unit id="9e2035734d6024304e489d6917a2e574dba468c1" translate="yes" xml:space="preserve">
          <source>Using the syntax &lt;code&gt;MyParser::new()&lt;/code&gt; to invoke the constructor is</source>
          <target state="translated">構文 &lt;code&gt;MyParser::new()&lt;/code&gt; を使用してコンストラクターを呼び出すと、</target>
        </trans-unit>
        <trans-unit id="acb6f03c46c097330bc723d0ffaf6e2dff2e6744" translate="yes" xml:space="preserve">
          <source>Using the template pat..patend, this function unpacks the string s..strend into a number of mortal SVs, which it pushes onto the perl argument (@_) stack (so you will need to issue a &lt;code&gt;PUTBACK&lt;/code&gt; before and &lt;code&gt;SPAGAIN&lt;/code&gt; after the call to this function). It returns the number of pushed elements.</source>
          <target state="translated">テンプレートpat..patendを使用して、この関数は（@_）それはperlの引数にプッシュし、致命SVの数、に文字列のs..strendをアンパックスタック（あなたが発行する必要がありますので、 &lt;code&gt;PUTBACK&lt;/code&gt; を前にして &lt;code&gt;SPAGAIN&lt;/code&gt; 後この関数の呼び出し）。プッシュされた要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="7a18622b9f73cf084e1c40515e63402b15a29333" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::bitwise&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::bitwise&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="c41fbff9d3dc71a6f8badab26c0a06f0e18953ee" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::const_attr&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::const_attr&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="cc856eaeef355d43fa8953f9faffa4c073431f05" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::lexical_subs&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::lexical_subs&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="857c7cbd2ca8ba6b31bcdbf6dd9c2b32441faf23" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::lexical_topic&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::lexical_topic&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="de44610062c3b08fbff0aea3fd8f765facd544b6" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::postderef&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::postderef&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="e5af3cfd78b8e6f9d0563b3f4cf549f389ec7ba5" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::re_strict&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::re_strict&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="65fcb853c1a517ad8d77449f7c0018250e14485b" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::refaliasing&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::refaliasing&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="37bffd5a63be98cf17b1b1c985d57c2adb638271" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::regex_sets&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::regex_sets&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="c0a382b10a1d9a073eb205f7f2bb7818eb3bbf75" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::signatures&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::signatures&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="482e06051ee37583e9eea4d7cca4c50c1fbeaf4e" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::smartmatch&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::smartmatch&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="2d4359e0b1138dffdeb53a1d3017037757b78671" translate="yes" xml:space="preserve">
          <source>Using this operator can lead to programs that are difficult to port, because the shell commands called vary between systems, and may in fact not be present at all. As one example, the &lt;code&gt;type&lt;/code&gt; command under the POSIX shell is very different from the &lt;code&gt;type&lt;/code&gt; command under DOS. That doesn't mean you should go out of your way to avoid backticks when they're the right way to get something done. Perl was made to be a glue language, and one of the things it glues together is commands. Just understand what you're getting yourself into.</source>
          <target state="translated">呼び出されるシェルコマンドはシステムによって異なり、実際にはまったく存在しない可能性があるため、この演算子を使用すると、移植が困難なプログラムにつながる可能性があります。一例として、 &lt;code&gt;type&lt;/code&gt; POSIXシェルの下のコマンドは、非常に異なる &lt;code&gt;type&lt;/code&gt; DOSの下でコマンド。これは、バッククォートが何かを行うための正しい方法である場合に、バッククォートを回避するために邪魔をしないことを意味しません。Perlはグルー言語として作られました、そしてそれが一緒に接着するものの1つはコマンドです。自分が何をしているのかを理解してください。</target>
        </trans-unit>
        <trans-unit id="d4d70574aacd1d1847898b08d95988a332169072" translate="yes" xml:space="preserve">
          <source>Using various gambits, try to get a CV from an SV; in addition, try if possible to set &lt;code&gt;*st&lt;/code&gt; and &lt;code&gt;*gvp&lt;/code&gt; to the stash and GV associated with it. The flags in &lt;code&gt;lref&lt;/code&gt; are passed to gv_fetchsv.</source>
          <target state="translated">さまざまなガンビットを使用して、SVからCVを取得してみてください。さらに、可能であれば、 &lt;code&gt;*st&lt;/code&gt; と &lt;code&gt;*gvp&lt;/code&gt; をそれに関連付けられているスタッシュとGV に設定してみてください。 &lt;code&gt;lref&lt;/code&gt; のフラグはgv_fetchsvに渡されます。</target>
        </trans-unit>
        <trans-unit id="27cc9ed80851550eb53eda865f75d2e008f1dc72" translate="yes" xml:space="preserve">
          <source>Using various gambits, try to get an IO from an SV: the IO slot if its a GV; or the recursive result if we're an RV; or the IO slot of the symbol named after the PV if we're a string.</source>
          <target state="translated">GVならIOスロット、RVなら再帰結果、文字列ならPVにちなんだシンボルのIOスロットなど、様々なギャンビットを使ってSVからIOを取得しよう。</target>
        </trans-unit>
        <trans-unit id="40c4ad482806895c6f8713969b3ecb705fa44118" translate="yes" xml:space="preserve">
          <source>Using various methods &lt;b&gt;attempt&lt;/b&gt; to find the Fully Qualified Domain Name (FQDN) of the current host. From this determine the host-name and the host-domain.</source>
          <target state="translated">さまざまな方法を使用して、現在のホストの完全修飾ドメイン名（FQDN）を見つけよ&lt;b&gt;うと&lt;/b&gt;します。これから、ホスト名とホストドメインを決定します。</target>
        </trans-unit>
        <trans-unit id="892738b2747cec8282f76dab54e62a0b79491609" translate="yes" xml:space="preserve">
          <source>Usual perl lib path (semi-list).</source>
          <target state="translated">通常のperlのlibパス(セミリスト)。</target>
        </trans-unit>
        <trans-unit id="b7cde133a5ff79130fd30cde6b361d0ab467bd51" translate="yes" xml:space="preserve">
          <source>Usually a hash ref, perhaps like this:</source>
          <target state="translated">通常はハッシュリファ、おそらくこのような感じです。</target>
        </trans-unit>
        <trans-unit id="ad35f25dce96f5712243ad327f82cc56b137d4d7" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVbyte&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVbyte&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="e38187632a58d32566d4fbc0b71dc22c87d815e2" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="a0ca6cd076c679630ac44632c012203ed79a11ad" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVutf8&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVutf8&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="b020d8f1cda36b9415a539e77cdc15cb72cc9530" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="7c024fdbe2028ca7a62024863c10f1c75039e578" translate="yes" xml:space="preserve">
          <source>Usually called from the object destructor when using the OO interface.</source>
          <target state="translated">通常、OO インターフェースを使用する際には、オブジェクトデストラクタから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4285fe9b5258e25bc264f1b1a13271726e80e089" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. Ask for a STRING to be &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;-ed in executing code context.</source>
          <target state="translated">通常、DBパッケージから継承されます。実行中のコードコンテキストでSTRINGを &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; するように要求します。</target>
        </trans-unit>
        <trans-unit id="026b900ced2773356641f583fde7b62143e57def" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. If no arguments are passed, returns the poststop action string.</source>
          <target state="translated">通常はDBパッケージから継承されます。引数が渡されない場合は、ポストストップアクションの文字列を返します。</target>
        </trans-unit>
        <trans-unit id="7d9b8edd49b4cf562a81e5b8decb5de77fa1afd9" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. If no arguments are passed, returns the prestop action string.</source>
          <target state="translated">通常は DB パッケージから継承されます。引数が渡されない場合は、プレストトップアクションの文字列を返します。</target>
        </trans-unit>
        <trans-unit id="0c460ecc82dad59a8d6a90636305608877d8c532" translate="yes" xml:space="preserve">
          <source>Usually programs take command line options as well as other arguments, for example, file names. It is good practice to always specify the options first, and the other arguments last. Getopt::Long will, however, allow the options and arguments to be mixed and 'filter out' all the options before passing the rest of the arguments to the program. To stop Getopt::Long from processing further arguments, insert a double dash &lt;code&gt;--&lt;/code&gt; on the command line:</source>
          <target state="translated">通常、プログラムはコマンドラインオプションと他の引数（ファイル名など）を取ります。常に最初にオプションを指定し、他の引数は最後に指定することをお勧めします。ただし、Getopt :: Longを使用すると、オプションと引数を混合して、残りの引数をプログラムに渡す前にすべてのオプションを「フィルターで除外」できます。Getopt :: Longが以降の引数を処理しないようにするには、コマンドラインに2つのダッシュ &lt;code&gt;--&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="2691970d8d342de7ae3956a2783fcd64867158b2" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_catpvf&lt;/code&gt; .</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_catpvf&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="221ae26d5a59ab131e1ef8287fa9b5a715378994" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_catpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_catpvf_mg&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="1f47e17c3d0a65f1e24ab46a970720597c10ef39" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_setpvf&lt;/code&gt; .</source>
          <target state="translated">通常、そのフロントエンド &lt;code&gt;sv_setpvf&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="3548cea6e28d55dc32a5bfd0e3189ea93c77d357" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_setpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_setpvf_mg&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="a9bb4c004a0f7c4b905c963d10b31ef391b5c334" translate="yes" xml:space="preserve">
          <source>Usually used via one of its frontends &lt;code&gt;sv_vcatpvf&lt;/code&gt; and &lt;code&gt;sv_vcatpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常は、フロントエンド &lt;code&gt;sv_vcatpvf&lt;/code&gt; および &lt;code&gt;sv_vcatpvf_mg&lt;/code&gt; のいずれかを介して使用されます。</target>
        </trans-unit>
        <trans-unit id="2f08502c181dd16b4bbf68ae24c29b059d5a1bce" translate="yes" xml:space="preserve">
          <source>Usually used via one of its frontends &lt;code&gt;sv_vsetpvf&lt;/code&gt; and &lt;code&gt;sv_vsetpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常は、フロントエンド &lt;code&gt;sv_vsetpvf&lt;/code&gt; および &lt;code&gt;sv_vsetpvf_mg&lt;/code&gt; のいずれかを介して使用されます。</target>
        </trans-unit>
        <trans-unit id="7fff94b5e5d0e7b2c191398749185343c2f32a65" translate="yes" xml:space="preserve">
          <source>Usually when a variable is localized you want to make sure that this change affects the shortest scope possible. So unless you are already inside some short &lt;code&gt;{}&lt;/code&gt; block, you should create one yourself. For example:</source>
          <target state="translated">通常、変数がローカライズされるときは、この変更が可能な限り最短のスコープに影響を与えることを確認する必要があります。したがって、すでに短い &lt;code&gt;{}&lt;/code&gt; ブロック内にいるのでない限り、自分で作成する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="599351f57ec025dcf8b7e2139660d070855a8727" translate="yes" xml:space="preserve">
          <source>Usually you'll want to pack or unpack UTF-8 strings:</source>
          <target state="translated">通常はUTF-8の文字列をパックしたり、アンパックしたりしたくなります。</target>
        </trans-unit>
        <trans-unit id="cf8c2092d45b2a1234c61351a627eb75997a3b4f" translate="yes" xml:space="preserve">
          <source>Usually, the feature can be entirely ignored. Calling</source>
          <target state="translated">通常、この機能は完全に無視することができます。呼び出し</target>
        </trans-unit>
        <trans-unit id="3747a1556b1698c5e4df73c06a70d49b29b190d1" translate="yes" xml:space="preserve">
          <source>Usually, these single-character options can be bundled:</source>
          <target state="translated">通常、これらの1文字オプションは、バンドルすることができます。</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="29f83b729f46062c9dd1b32c5a75ee83eb4a8e12" translate="yes" xml:space="preserve">
          <source>Utilities for embedding Perl in C/C++ applications</source>
          <target state="translated">C/C++アプリケーションに Perl を埋め込むためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="c5c36f1963730a8868662732388dc0c0703a634a" translate="yes" xml:space="preserve">
          <source>Utilities for managing %^H scopes</source>
          <target state="translated">H スコープを管理するためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="35acf3ef6343308f92e84a6c665aa85cecd79c2b" translate="yes" xml:space="preserve">
          <source>Utilities to replace common UNIX commands in Makefiles etc.</source>
          <target state="translated">Makefile などで一般的な UNIX コマンドを置き換えるためのユーティリティ。</target>
        </trans-unit>
        <trans-unit id="1637dc7299266babf67a48df4d48af858929b4bd" translate="yes" xml:space="preserve">
          <source>Utilities to write and check a MANIFEST file</source>
          <target state="translated">MANIFESTファイルの書き込みとチェックのためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="8bf056ede57539fe7ab422f88b516c58223a0adf" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
          <target state="translated">ユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="5486a0e8e13b0b039dc58793f09b6e6eb6465317" translate="yes" xml:space="preserve">
          <source>Utility Methods</source>
          <target state="translated">ユーティリティーの方法</target>
        </trans-unit>
        <trans-unit id="2ffeb2e1de80e186589b30d3572aa3cf779263b5" translate="yes" xml:space="preserve">
          <source>Utility for CPAN::Config file Initialization</source>
          <target state="translated">CPAN::Configファイル初期化ユーティリティ</target>
        </trans-unit>
        <trans-unit id="bc41614ee1aee6d115725273058a3f6ba77aebc5" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Cmd&lt;/code&gt; is capable of capturing buffers in it's current configuration.</source>
          <target state="translated">&lt;code&gt;IPC::Cmd&lt;/code&gt; が現在の構成でバッファーをキャプチャできるかどうかを通知するユーティリティ関数。</target>
        </trans-unit>
        <trans-unit id="f378c15ae2f401b4423675b36af5d2e3c5f0b6d5" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Cmd&lt;/code&gt; is capable of providing &lt;code&gt;run_forked&lt;/code&gt; on the current platform.</source>
          <target state="translated">&lt;code&gt;IPC::Cmd&lt;/code&gt; が現在のプラットフォームで &lt;code&gt;run_forked&lt;/code&gt; を提供できるかどうかを通知するユーティリティ関数。</target>
        </trans-unit>
        <trans-unit id="4bd9fd9b54869479fd1b5ab93786828f7dca29ba" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Open3&lt;/code&gt; is available. If the verbose flag is passed, it will print diagnostic messages if &lt;code&gt;IPC::Open3&lt;/code&gt; can not be found or loaded.</source>
          <target state="translated">&lt;code&gt;IPC::Open3&lt;/code&gt; が利用可能かどうかを通知するユーティリティ関数。詳細フラグが渡された場合、 &lt;code&gt;IPC::Open3&lt;/code&gt; が見つからないかロードできない場合に診断メッセージが出力されます。</target>
        </trans-unit>
        <trans-unit id="451db65a6c9d4e76bfbbd6735fbbae7748464a49" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Run&lt;/code&gt; is available. If the &lt;code&gt;verbose&lt;/code&gt; flag is passed, it will print diagnostic messages if &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; can not be found or loaded.</source>
          <target state="translated">&lt;code&gt;IPC::Run&lt;/code&gt; が使用可能かどうかを通知するユーティリティ関数。場合は &lt;code&gt;verbose&lt;/code&gt; フラグが渡された場合、それは診断メッセージを出力します&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC ::ランが&lt;/a&gt;見つからないか、またはロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="f16cdccb3faaa5e67faa6fdb65caa5cf29d51cbb" translate="yes" xml:space="preserve">
          <source>Utility functions</source>
          <target state="translated">ユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="1f8287a26f238372802990f191fcd97ce4ce1919" translate="yes" xml:space="preserve">
          <source>Utility functions to compare CPAN versions</source>
          <target state="translated">CPANのバージョンを比較するユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="e944fa11ecc3fc10a3b409bcd5f6df4ebd3f4487" translate="yes" xml:space="preserve">
          <source>Uuencoding</source>
          <target state="translated">Uuencoding</target>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="7dc10180b878fd7bd185c2d6a23c0519a292a3a0" translate="yes" xml:space="preserve">
          <source>VALUE</source>
          <target state="translated">VALUE</target>
        </trans-unit>
        <trans-unit id="41fdf9c71f9b0e67f5d577b57ffb59065472ee6e" translate="yes" xml:space="preserve">
          <source>VAR</source>
          <target state="translated">VAR</target>
        </trans-unit>
        <trans-unit id="b5fcb61029823124da78ad195388293fa0fe55ea" translate="yes" xml:space="preserve">
          <source>VARIABLES</source>
          <target state="translated">VARIABLES</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="f189e0805d92e6bfdd489073d1a01e43b46335be" translate="yes" xml:space="preserve">
          <source>VERSION may be either a numeric argument such as 5.006, which will be compared to &lt;code&gt;$]&lt;/code&gt; , or a literal of the form v5.6.1, which will be compared to &lt;code&gt;$^V&lt;/code&gt; (aka $PERL_VERSION). An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with &lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;, which can do a similar check at compile time.</source>
          <target state="translated">VERSIONは、 &lt;code&gt;$]&lt;/code&gt; と比較される5.006などの数値引数、または &lt;code&gt;$^V&lt;/code&gt; （別名$ PERL_VERSION）と比較されるv5.6.1形式のリテラルのいずれかです。VERSIONが現在のPerlインタープリターのバージョンより大きい場合、例外が発生します。コンパイル時に同様のチェックを行うことができる&lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;と比較してください。</target>
        </trans-unit>
        <trans-unit id="3f48ba5d24abaab8495945658838888561f00637" translate="yes" xml:space="preserve">
          <source>VERSION may be either a numeric argument such as 5.006, which will be compared to &lt;code&gt;$]&lt;/code&gt; , or a literal of the form v5.6.1, which will be compared to &lt;code&gt;$^V&lt;/code&gt; (aka $PERL_VERSION). An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with &lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;, which can do a similar check at compile time.</source>
          <target state="translated">VERSIONは、 &lt;code&gt;$]&lt;/code&gt; と比較される5.006などの数値引数、または &lt;code&gt;$^V&lt;/code&gt; （別名$ PERL_VERSION）と比較されるv5.6.1形式のリテラルのいずれかです。VERSIONが現在のPerlインタープリターのバージョンより大きい場合、例外が発生します。コンパイル時に同様のチェックを行うことができる&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;と比較してください。</target>
        </trans-unit>
        <trans-unit id="8aab271152b932f50d15f749cb2ad3f6aa388e98" translate="yes" xml:space="preserve">
          <source>VERSION: version of your module</source>
          <target state="translated">VERSION:モジュールのバージョン</target>
        </trans-unit>
        <trans-unit id="439c8f3808541b8d38659912158a7dbb6e0d7837" translate="yes" xml:space="preserve">
          <source>VERSION_MACRO: which macro represents the version (usually 'VERSION')</source>
          <target state="translated">VERSION_MACRO:バージョンを表すマクロ (通常は 'VERSION' です)</target>
        </trans-unit>
        <trans-unit id="d46d79d5b527245ae65e82f18ddd3ba603c16976" translate="yes" xml:space="preserve">
          <source>VERSION_SYM: like version but safe for use as an RCS revision number</source>
          <target state="translated">VERSION_SYM:バージョンに似ていますが、RCS リビジョン番号として使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="a850272b9ab78b2a9e2f07713cef8bc188b3ede9" translate="yes" xml:space="preserve">
          <source>VERY ALPHA AND LIKELY TO CHANGE</source>
          <target state="translated">非常にアルファで変化しやすい</target>
        </trans-unit>
        <trans-unit id="cce163acefa51c5f80357419607cd2acfc9bcda6" translate="yes" xml:space="preserve">
          <source>VIEW.EXE</source>
          <target state="translated">VIEW.EXE</target>
        </trans-unit>
        <trans-unit id="8e5207fffbfb609ac37a389e363f0db0120b9dae" translate="yes" xml:space="preserve">
          <source>VMS</source>
          <target state="translated">VMS</target>
        </trans-unit>
        <trans-unit id="6ad64d23074ae7d322786e62e572397b29888496" translate="yes" xml:space="preserve">
          <source>VMS Software Inc. web site, &lt;a href=&quot;http://www.vmssoftware.com&quot;&gt;http://www.vmssoftware.com&lt;/a&gt;</source>
          <target state="translated">VMS Software Inc. Webサイト、&lt;a href=&quot;http://www.vmssoftware.com&quot;&gt;http：//www.vmssoftware.com&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2719ba4075d542c93bfa0cdfa52b9abcdd8bf1e2" translate="yes" xml:space="preserve">
          <source>VMS file specification syntax is case-tolerant.</source>
          <target state="translated">VMSファイル指定構文は大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="731e9eea656f3a7b49847d98fa31bc8bf39060b9" translate="yes" xml:space="preserve">
          <source>VMS has $(MMSQUALIFIERS) which is a listing of all the original command line options. This is used in every invocation of make in the VMS Makefile so PASTHRU should not be necessary. Using PASTHRU tends to blow commands past the 256 character limit.</source>
          <target state="translated">VMS には $(MMSQUALIFIERS)があり、これはすべてのオリジナルのコマンドラインオプションのリストです。これは VMS Makefile の make のすべての呼び出しで使用されるので、PASTHRU は必要ありません。PASTHRU を使用すると、256 文字制限を超えたコマンドが飛んでしまう傾向があります。</target>
        </trans-unit>
        <trans-unit id="26ff54e8c5dec349cf161af5221feaf07190cd81" translate="yes" xml:space="preserve">
          <source>VMS implementation</source>
          <target state="translated">ブイエムエスの実装</target>
        </trans-unit>
        <trans-unit id="044140c726f05d1f569402b05b60683ee5f27ac8" translate="yes" xml:space="preserve">
          <source>VMS is VMS.</source>
          <target state="translated">VMSはVMSです。</target>
        </trans-unit>
        <trans-unit id="19cc64067b9d9a483d87606a5fc200285da5a247" translate="yes" xml:space="preserve">
          <source>VMS support for this process in the current release of Perl is sufficient to handle most extensions. (See the MakeMaker documentation for more details on installation options for extensions.)</source>
          <target state="translated">Perl の現在のリリースでは、この処理を VMS でサポートしているため、ほとんどの拡張機能を処理することができます (拡張機能のインストールオプションの詳細については、MakeMaker のドキュメントを参照してください)。(拡張機能のインストールオプションの詳細については、MakeMaker のドキュメントを参照してください)。</target>
        </trans-unit>
        <trans-unit id="a0b48a2078e8546f59c353d4437730af0e465606" translate="yes" xml:space="preserve">
          <source>VMS systems have a permissions structure that cannot be completely represented in a stat buffer, and unlike on other systems the builtin filetest operators respect this. The &lt;code&gt;File::stat&lt;/code&gt; overloads, however, do not, since the information required is not available.</source>
          <target state="translated">VMSシステムには、statバッファーで完全に表現できない権限構造があり、他のシステムとは異なり、組み込みのファイルテストオペレーターはこれを尊重します。 &lt;code&gt;File::stat&lt;/code&gt; 必要な情報が入手できないため、オーバーロードは、しかし、しないでください。</target>
        </trans-unit>
        <trans-unit id="d55cb5dcb20d55a8b83dc657590161b870f2b37b" translate="yes" xml:space="preserve">
          <source>VMS wants a dot in every file so we can't have one called 'pm_to_blib', it becomes 'pm_to_blib.' and MMS/K isn't smart enough to know that when you have a target called 'pm_to_blib' it should look for 'pm_to_blib.'.</source>
          <target state="translated">VMS はすべてのファイルにドットが欲しいので、'pm_to_blib' という名前のファイルを持つことができず、'pm_to_blib.' になってしまいますし、MMS/K は 'pm_to_blib' という名前のターゲットを持っているときに 'pm_to_blib.' を探すべきだということを知るほど賢くありません。</target>
        </trans-unit>
        <trans-unit id="f2c0fca2c674b5e61f569c9a2276cbaa83043ca7" translate="yes" xml:space="preserve">
          <source>VMSish defaults for some values.</source>
          <target state="translated">一部の値については、VMSish のデフォルト値を使用します。</target>
        </trans-unit>
        <trans-unit id="b34e6b4bc196605f4ec9f36bd956bf4d5349e341" translate="yes" xml:space="preserve">
          <source>VOS</source>
          <target state="translated">VOS</target>
        </trans-unit>
        <trans-unit id="3ed32c224bfdeaef83075fa116b0ec438527a823" translate="yes" xml:space="preserve">
          <source>VOS Open-Source Software on the web at &lt;a href=&quot;http://ftp.stratus.com/pub/vos/vos.html&quot;&gt;http://ftp.stratus.com/pub/vos/vos.html&lt;/a&gt;</source>
          <target state="translated">Web上のVOSオープンソースソフトウェア（&lt;a href=&quot;http://ftp.stratus.com/pub/vos/vos.html&quot;&gt;http://ftp.stratus.com/pub/vos/vos.html）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="957b3df553f7dff11b930fd1fbc2f8551388c83f" translate="yes" xml:space="preserve">
          <source>VOS perl can emulate Unix filenames with &lt;code&gt;/&lt;/code&gt; as path separator. The native pathname characters greater-than, less-than, number-sign, and percent-sign are always accepted.</source>
          <target state="translated">VOS perlは、パス区切り文字として &lt;code&gt;/&lt;/code&gt; を使用してUnixファイル名をエミュレートできます。大なり、小なり、番号記号、パーセント記号のネイティブパス名文字は常に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="228203bd56ca8f33c2e2cf1d51934741f92afc9c" translate="yes" xml:space="preserve">
          <source>VOS specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の VOS 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="0565b8691c25d546ce54285d2b39e0a691ab1159" translate="yes" xml:space="preserve">
          <source>Valgrind also provides a cachegrind tool, invoked on perl as:</source>
          <target state="translated">Valgrind には、perl で起動される cachegrind ツールもあります。</target>
        </trans-unit>
        <trans-unit id="c78c948aba2c03abbf33d21db8439afd4716f2fd" translate="yes" xml:space="preserve">
          <source>Valid $types are &quot;MacOS&quot;, &quot;VMS&quot;, &quot;AmigaOS&quot;, &quot;OS2&quot;, &quot;RISCOS&quot;, &quot;MSWin32&quot;, &quot;DOS&quot; (also &quot;MSDOS&quot; for backwards bug compatibility), &quot;Epoc&quot; and &quot;Unix&quot; (all case-insensitive). If an unrecognized $type is given &quot;Unix&quot; will be assumed.</source>
          <target state="translated">有効な $type は、&quot;MacOS&quot;,&quot;VMS&quot;,&quot;AmigaOS&quot;,&quot;OS2&quot;,&quot;RISCOS&quot;,&quot;MSWin32&quot;,&quot;DOS&quot;(後方のバグ互換性のために &quot;MSDOS&quot;)、&quot;Epoc&quot;,&quot;Unix&quot; (すべて大文字小文字を区別しません)です。認識できない $type が与えられた場合は &quot;Unix&quot; と見なされます。</target>
        </trans-unit>
        <trans-unit id="4f1f0874166d8489998a2dabaec65b65aacdc83c" translate="yes" xml:space="preserve">
          <source>Valid flags are R_CURSOR, R_IAFTER, R_IBEFORE, R_NOOVERWRITE and R_SETCURSOR.</source>
          <target state="translated">有効なフラグは、R_CURSOR、R_IAFTER、R_IBEFORE、R_NOOVERWRITE、R_SETCURSORです。</target>
        </trans-unit>
        <trans-unit id="372003ef32f4fb85add82bd740d0d6f53c484da5" translate="yes" xml:space="preserve">
          <source>Valid values are 0-9 and &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; .</source>
          <target state="translated">有効な値は0〜9および &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4fc9756075f953dec67702b67d732830de319ae" translate="yes" xml:space="preserve">
          <source>Valid values are from 1 to 9, where 9 is best compression.</source>
          <target state="translated">有効な値は1から9までで、9は最高の圧縮率です。</target>
        </trans-unit>
        <trans-unit id="61c0f0c254e06b47f44e05f0b16b8e15856c3b3c" translate="yes" xml:space="preserve">
          <source>Valid values for the file type are the following constants defined by Archive::Tar::Constant:</source>
          <target state="translated">ファイルタイプの有効な値は、Archive::Tar::Constant で定義されている以下の定数です。</target>
        </trans-unit>
        <trans-unit id="e2d14a7d576fe1f87f5d9e8e9cd3b19b9f3883ab" translate="yes" xml:space="preserve">
          <source>Valid values range from 0 to 250, where 0 means use the default value 30.</source>
          <target state="translated">有効な値の範囲は0から250までで、0はデフォルト値30を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="0c5fff5f0da802e753b92748a90cbb8fb80c8fcd" translate="yes" xml:space="preserve">
          <source>Validate CPAN distribution metadata structures</source>
          <target state="translated">CPAN ディストリビューションのメタデータ構造を検証する</target>
        </trans-unit>
        <trans-unit id="42ca1a4cda43fbba8ac585879a08c0309c1d20bf" translate="yes" xml:space="preserve">
          <source>Validate that a given string can be parsed as a version object, but doesn't actually perform the parsing. Can use either strict or lax validation rules. Can optionally set a number of hint variables to save the parsing code some time when tokenizing.</source>
          <target state="translated">与えられた文字列がバージョンオブジェクトとして解析できることを検証しますが、実際には解析は行いません。厳密な検証ルールと緩い検証ルールのどちらかを使用することができます。オプションで、トークン化の際に解析コードを保存するためのヒント変数をいくつか設定することができます。</target>
        </trans-unit>
        <trans-unit id="02a3f32fae979c719788dc5214614a1ca3e7e4ee" translate="yes" xml:space="preserve">
          <source>Validate the arguments given by the user based on strings, regexes, lists or even subroutines</source>
          <target state="translated">文字列、正規表現、リスト、あるいはサブルーチンに基づいて、ユーザが与えた引数を検証します。</target>
        </trans-unit>
        <trans-unit id="df34a04c181ba88b10ee206f3171d24fb01034c4" translate="yes" xml:space="preserve">
          <source>Validates that the SV contains valid internal structure for a version object. It may be passed either the version object (RV) or the hash itself (HV). If the structure is valid, it returns the HV. If the structure is invalid, it returns NULL.</source>
          <target state="translated">SV がバージョンオブジェクトの有効な内部構造を含んでいるかどうかを検証します。バージョンオブジェクト (RV)またはハッシュそのもの (HV)を渡すことができます。構造体が有効な場合は HV を返します。構造体が無効な場合は NULL を返します。</target>
        </trans-unit>
        <trans-unit id="ff4094183301726c60c811c9d974ce575c34af6b" translate="yes" xml:space="preserve">
          <source>Validation Tests</source>
          <target state="translated">バリデーションテスト</target>
        </trans-unit>
        <trans-unit id="fa414ab19e33bf9bd3aaeda3e54cacdb51c904fe" translate="yes" xml:space="preserve">
          <source>Value must be greater than zero. Pass an undef value to disable it:</source>
          <target state="translated">値はゼロよりも大きくする必要があります。無効にするには undef 値を渡します。</target>
        </trans-unit>
        <trans-unit id="5329eac11375c274bf2934a43944e0d3c65118bd" translate="yes" xml:space="preserve">
          <source>Value slices of arrays and hashes may also be taken with postfix dereferencing notation, with the following equivalencies:</source>
          <target state="translated">配列やハッシュの値のスライスは、以下の等価性を持った後置修飾解除記法でも取ることができます。</target>
        </trans-unit>
        <trans-unit id="9d49e40c3d7ac176f056540076e808cf6346a547" translate="yes" xml:space="preserve">
          <source>Values are usually referred to by name, or through a named reference. The first character of the name tells you to what sort of data structure it refers. The rest of the name tells you the particular value to which it refers. Usually this name is a single</source>
          <target state="translated">値は通常、名前で参照されるか、名前付きの参照を介して参照されます。名前の最初の文字は、それが参照するデータ構造の種類を示します。名前の残りの部分は、それが参照する特定の値を示します。通常、この名前は単一の</target>
        </trans-unit>
        <trans-unit id="b95834354d188d1c446139257f83c336e08b30f1" translate="yes" xml:space="preserve">
          <source>Values in this array are magical in numeric context: they compare equal to zero only if the line is not breakable.</source>
          <target state="translated">この配列の値は、数値的な文脈では魔法のようなものです:線が切れない場合にのみ、ゼロと等しく比較されます。</target>
        </trans-unit>
        <trans-unit id="f6e707c7542fd8d8b012efb4bcba22c20e79cddd" translate="yes" xml:space="preserve">
          <source>Values must be either strings with possible glob-style matching, or arrayrefs of strings or hashrefs which follow this pattern recursively.</source>
          <target state="translated">値は、グロブスタイルのマッチングが可能な文字列か、このパターンに再帰的に従う文字列またはハッシュタグの配列参照のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d7f43d25cf7a3a7519ab8b3625879499f1cffcc" translate="yes" xml:space="preserve">
          <source>Values of %meta_add will overwrite any existing metadata in those keys. %meta_merge will be merged with them.</source>
          <target state="translated">meta_add の値は、これらのキーにある既存のメタデータをすべて上書きします。meta_merge はこれらのキーにマージされます。</target>
        </trans-unit>
        <trans-unit id="a7c124848c793b84e7134c4f5b9435a446fc14e9" translate="yes" xml:space="preserve">
          <source>Values stored in config.sh as 'undef' are returned as undefined values. The perl &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; function can be used to check if a named variable exists.</source>
          <target state="translated">config.shに「undef」として格納されている値は、未定義の値として返されます。perl &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; 関数を使用して、名前付き変数が存在するかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="9adc561121b10d3163cfe0f3b6e1049a68105bd5" translate="yes" xml:space="preserve">
          <source>Variable names</source>
          <target state="translated">変数名</target>
        </trans-unit>
        <trans-unit id="5b24debec3e800c2a01f6fe873b50e5c2cfac784" translate="yes" xml:space="preserve">
          <source>Variable names in Perl can have several formats. Usually, they must begin with a letter or underscore, in which case they can be arbitrarily long (up to an internal limit of 251 characters) and may contain letters, digits, underscores, or the special sequence &lt;code&gt;::&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;. In this case, the part before the last &lt;code&gt;::&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; is taken to be a</source>
          <target state="translated">Perlの変数名にはいくつかの形式があります。通常、それらは文字またはアンダースコアで始まる必要があります。その場合、それらは任意に長くすることができ（251文字の内部制限まで）、文字、数字、アンダースコア、または特殊なシーケンス &lt;code&gt;::&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; を含めることができます。この場合、最後の &lt;code&gt;::&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; の前の部分は、</target>
        </trans-unit>
        <trans-unit id="41f1e305cd399af1bab308129c47ec5731d3275e" translate="yes" xml:space="preserve">
          <source>Variable scoping</source>
          <target state="translated">変数のスコープ</target>
        </trans-unit>
        <trans-unit id="ef32d1f98150e537dbad0f8aeb79c36da9b27e19" translate="yes" xml:space="preserve">
          <source>Variable suicide is when you (temporarily or permanently) lose the value of a variable. It is caused by scoping through my() and local() interacting with either closures or aliased foreach() iterator variables and subroutine arguments. It used to be easy to inadvertently lose a variable's value this way, but now it's much harder. Take this code:</source>
          <target state="translated">変数自殺とは、(一時的または恒久的に)変数の値を失うことです。これは、my()やlocal()のスコープがクロージャやエイリアスされたforeach()のイテレータ変数やサブルーチンの引数と相互作用することで起こります。以前はこの方法でうっかり変数の値を失ってしまうことは簡単でしたが、今ではかなり難しくなっています。このコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="250f3f77348f1daf074babbf51813ae9c5cec2e2" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to designate the object in a C++ XSUB. This is always the proper type for the C++ object. See &lt;code&gt;CLASS&lt;/code&gt; and &lt;a href=&quot;perlxs#Using-XS-With-C%2b%2b&quot;&gt;Using XS With C++ in perlxs&lt;/a&gt;.</source>
          <target state="translated">C ++ XSUBでオブジェクトを指定するために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。これは常にC ++オブジェクトの適切なタイプです。 &lt;code&gt;CLASS&lt;/code&gt; および&lt;a href=&quot;perlxs#Using-XS-With-C%2b%2b&quot;&gt;perlxsでのC ++でのXSの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="96f93b135985c0d3733c8f2cb9adad25487bb3de" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to hold the return value for an XSUB. This is always the proper type for the XSUB. See &lt;a href=&quot;perlxs#The-RETVAL-Variable&quot;&gt;The RETVAL Variable in perlxs&lt;/a&gt;.</source>
          <target state="translated">XSUBの戻り値を保持するために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。これは常にXSUBの適切なタイプです。&lt;a href=&quot;perlxs#The-RETVAL-Variable&quot;&gt;perlxsのRETVAL変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca0fab0f8678649996d70b3f1641bab2dc619d79" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the class name for a C++ XS constructor. This is always a &lt;code&gt;char*&lt;/code&gt; . See &lt;code&gt;THIS&lt;/code&gt; .</source>
          <target state="translated">C ++ XSコンストラクターのクラス名を示すために &lt;code&gt;xsubpp&lt;/code&gt; によってセットアップされる変数。これは常に &lt;code&gt;char*&lt;/code&gt; です。参照してください &lt;code&gt;THIS&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="047db5765fb37d513256abe7c3bb231a7730d231" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the number of items on the stack. See &lt;a href=&quot;perlxs#Variable-length-Parameter-Lists&quot;&gt;Variable-length Parameter Lists in perlxs&lt;/a&gt;.</source>
          <target state="translated">スタック上の項目の数を示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。&lt;a href=&quot;perlxs#Variable-length-Parameter-Lists&quot;&gt;perlxsの可変長パラメーターリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f9f90eb2fc40e8b2bdb8fd7693973daf5289f55d" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the stack base offset, used by the &lt;code&gt;ST&lt;/code&gt; , &lt;code&gt;XSprePUSH&lt;/code&gt; and &lt;code&gt;XSRETURN&lt;/code&gt; macros. The &lt;code&gt;dMARK&lt;/code&gt; macro must be called prior to setup the &lt;code&gt;MARK&lt;/code&gt; variable.</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; 、 &lt;code&gt;XSprePUSH&lt;/code&gt; 、 &lt;code&gt;XSRETURN&lt;/code&gt; マクロで使用される、スタックのベースオフセットを示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。 &lt;code&gt;dMARK&lt;/code&gt; のマクロを設定する前に呼び出す必要があり &lt;code&gt;MARK&lt;/code&gt; の変数。</target>
        </trans-unit>
        <trans-unit id="71ae1592070f983485afeb1f94bb9f14e5751687" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate which of an XSUB's aliases was used to invoke it. See &lt;a href=&quot;perlxs#The-ALIAS%3a-Keyword&quot;&gt;The ALIAS: Keyword in perlxs&lt;/a&gt;.</source>
          <target state="translated">呼び出しに使用されたXSUBのエイリアスを示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。「&lt;a href=&quot;perlxs#The-ALIAS%3a-Keyword&quot;&gt;エイリアス：perlxsのキーワード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="262d6897e3f4e2ab273d197b04708a28aa8bbe0f" translate="yes" xml:space="preserve">
          <source>Variable-length Parameter Lists</source>
          <target state="translated">可変長パラメータリスト</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="ab9c1a29fb6d3de8ef612773205828e2a92ce7d5" translate="yes" xml:space="preserve">
          <source>Variables begin with &quot;$&quot;, &quot;@&quot; or &quot;%&quot; in Perl.</source>
          <target state="translated">Perlでは、変数は&quot;$&quot;,&quot;@&quot;,&quot;%&quot;で始まります。</target>
        </trans-unit>
        <trans-unit id="5694c664526ad480f20d39864f7f31a2f29da553" translate="yes" xml:space="preserve">
          <source>Variables beginning with underscore used to be forced into package main, but we decided it was more useful for package writers to be able to use leading underscore to indicate private variables and method names. However, variables and functions named with a single &lt;code&gt;_&lt;/code&gt; , such as $_ and &lt;code&gt;sub _&lt;/code&gt; , are still forced into the package &lt;code&gt;main&lt;/code&gt; . See also &lt;a href=&quot;perlvar#The-Syntax-of-Variable-Names&quot;&gt;The Syntax of Variable Names in perlvar&lt;/a&gt;.</source>
          <target state="translated">以前はアンダースコアで始まる変数がパッケージmainに強制されていましたが、パッケージ作成者が先頭のアンダースコアを使用してプライベート変数とメソッド名を示すことができる方が便利だと判断しました。ただし、$ _や &lt;code&gt;sub _&lt;/code&gt; など、単一の &lt;code&gt;_&lt;/code&gt; で名前が付けられた変数および関数は、パッケージ &lt;code&gt;main&lt;/code&gt; に強制されます。&lt;a href=&quot;perlvar#The-Syntax-of-Variable-Names&quot;&gt;perlvarの変数名の構文&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1d9f29c9ec062e45676786fba6e4ad3c40d0d306" translate="yes" xml:space="preserve">
          <source>Variables can also be marked as shared at compile time by using the &lt;code&gt;:shared&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;code&gt;:shared&lt;/code&gt; 属性を使用して、コンパイル時に変数を共有としてマークすることもできます。</target>
        </trans-unit>
        <trans-unit id="0033a0c4e8e90fcf27d95fe18f7eaf535322599e" translate="yes" xml:space="preserve">
          <source>Variables created by &lt;code&gt;xsubpp&lt;/code&gt; and &lt;code&gt;xsubpp&lt;/code&gt; internal functions</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; および &lt;code&gt;xsubpp&lt;/code&gt; 内部関数によって作成された変数</target>
        </trans-unit>
        <trans-unit id="2071c5e3d5c20b9e635746474f5973d9034dd205" translate="yes" xml:space="preserve">
          <source>Variables created by xsubpp and xsubpp internal functions</source>
          <target state="translated">xsubppとxsubppの内部関数で作成された変数</target>
        </trans-unit>
        <trans-unit id="ca450e789c925910d0144b598324f623b886a902" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; are not part of any package and are therefore never fully qualified with the package name. In particular, you're not allowed to try to make a package variable (or other global) lexical:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言された変数はパッケージの一部ではないため、パッケージ名で完全に修飾されることはありません。特に、パッケージ変数（または他のグローバル）を字句に変換することは許可されていません。</target>
        </trans-unit>
        <trans-unit id="56cf64dcca72d1ecb702e55ecfffca62a98a5220" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; only affect code</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 影響コードで宣言された変数</target>
        </trans-unit>
        <trans-unit id="8ca248e3be58f6491cbca3baeca1c24e3a843c96" translate="yes" xml:space="preserve">
          <source>Variables related to filehandles</source>
          <target state="translated">ファイルハンドルに関連する変数</target>
        </trans-unit>
        <trans-unit id="558d3788e0608ddd59e54bc45d3414f4ed7b1e43" translate="yes" xml:space="preserve">
          <source>Variables related to formats</source>
          <target state="translated">フォーマットに関連する変数</target>
        </trans-unit>
        <trans-unit id="f14620676ede46dcf2f3ea6fa3c3858d660e5480" translate="yes" xml:space="preserve">
          <source>Variables related to regular expressions</source>
          <target state="translated">正規表現に関連する変数</target>
        </trans-unit>
        <trans-unit id="68141fa59316c5490c4a375661890da2077e4814" translate="yes" xml:space="preserve">
          <source>Variables related to the interpreter state</source>
          <target state="translated">インタプリタの状態に関連する変数</target>
        </trans-unit>
        <trans-unit id="9c673dd907946ee700d211969e18c41800f161cd" translate="yes" xml:space="preserve">
          <source>Variables that depend on the currently selected filehandle may be set by calling an appropriate object method on the &lt;code&gt;IO::Handle&lt;/code&gt; object, although this is less efficient than using the regular built-in variables. (Summary lines below for this contain the word HANDLE.) First you must say</source>
          <target state="translated">現在選択されているファイルハンドルに依存する変数は、 &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクトで適切なオブジェクトメソッドを呼び出すことで設定できますが、これは通常の組み込み変数を使用する場合よりも効率的ではありません。（このための以下の要約行にはHANDLEという単語が含まれています。）最初に、次のように言う必要があります。</target>
        </trans-unit>
        <trans-unit id="e157f974af404a93fff305d4d8e7f7a16c700432" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_A&lt;/code&gt; (e.g., &lt;code&gt;isALPHA_A()&lt;/code&gt; ) is identical to the base function with no suffix &lt;code&gt;&quot;_A&quot;&lt;/code&gt; .</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_A&lt;/code&gt; （ &lt;code&gt;isALPHA_A()&lt;/code&gt; など）は、基本関数と同じで、接尾辞 &lt;code&gt;&quot;_A&quot;&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="ee9c1e7b92e7d90953ad4f56c51f36c66e7040f2" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_L1&lt;/code&gt; imposes the Latin-1 (or EBCDIC equivlalent) character set onto the platform. That is, the code points that are ASCII are unaffected, since ASCII is a subset of Latin-1. But the non-ASCII code points are treated as if they are Latin-1 characters. For example, &lt;code&gt;isWORDCHAR_L1()&lt;/code&gt; will return true when called with the code point 0xDF, which is a word character in both ASCII and EBCDIC (though it represents different characters in each).</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_L1&lt;/code&gt; は、Latin-1（またはEBCDICと同等）の文字セットをプラットフォームに適用します。つまり、ASCIIはLatin-1のサブセットであるため、ASCIIであるコードポイントは影響を受けません。ただし、非ASCIIコードポイントは、Latin-1文字であるかのように扱われます。たとえば、 &lt;code&gt;isWORDCHAR_L1()&lt;/code&gt; は、コードポイント0xDFで呼び出されるとtrueを返します。これは、ASCIIとEBCDICの両方の単語文字です（ただし、それぞれで異なる文字を表します）。</target>
        </trans-unit>
        <trans-unit id="2ba58c7880e89de07e18f6663de6bf67a770fa3f" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_LC&lt;/code&gt; is like the &lt;code&gt;isFOO_A&lt;/code&gt; and &lt;code&gt;isFOO_L1&lt;/code&gt; variants, but the result is based on the current locale, which is what &lt;code&gt;LC&lt;/code&gt; in the name stands for. If Perl can determine that the current locale is a UTF-8 locale, it uses the published Unicode rules; otherwise, it uses the C library function that gives the named classification. For example, &lt;code&gt;isDIGIT_LC()&lt;/code&gt; when not in a UTF-8 locale returns the result of calling &lt;code&gt;isdigit()&lt;/code&gt; . FALSE is always returned if the input won't fit into an octet. On some platforms where the C library function is known to be defective, Perl changes its result to follow the POSIX standard's rules.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_LC&lt;/code&gt; は &lt;code&gt;isFOO_A&lt;/code&gt; および &lt;code&gt;isFOO_L1&lt;/code&gt; バリアントに似ていますが、結果は現在のロケールに基づいています。これは、名前の &lt;code&gt;LC&lt;/code&gt; が表すものです。 Perlが現在のロケールがUTF-8ロケールであると判断できる場合、公開されたUnicodeルールを使用します。それ以外の場合は、名前付きの分類を提供するCライブラリ関数を使用します。たとえば、UTF-8ロケールでない場合、 &lt;code&gt;isDIGIT_LC()&lt;/code&gt; は &lt;code&gt;isdigit()&lt;/code&gt; を呼び出した結果を返します。入力がオクテットに収まらない場合は、常にFALSEが返されます。 Cライブラリ関数に欠陥があることがわかっている一部のプラットフォームでは、PerlはPOSIX標準の規則に従うように結果を変更します。</target>
        </trans-unit>
        <trans-unit id="0cd770db8027add93d163f3958fbe5e0a03fc884" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_LC_utf8&lt;/code&gt; is like &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; , but the input is a pointer to a (known to be well-formed) UTF-8 encoded string (&lt;code&gt;U8*&lt;/code&gt; or &lt;code&gt;char*&lt;/code&gt; ). The classification of just the first (possibly multi-byte) character in the string is tested.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_LC_utf8&lt;/code&gt; は &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; に似ていますが、入力は（整形式であることがわかっている）UTF-8エンコード文字列（ &lt;code&gt;U8*&lt;/code&gt; または &lt;code&gt;char*&lt;/code&gt; ）へのポインターです。文字列の最初の（おそらくマルチバイトの）文字だけの分類がテストされます。</target>
        </trans-unit>
        <trans-unit id="2e2baae040164a854cd256e8bb0078a6be7e0556" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; is like &lt;code&gt;isFOO_LC&lt;/code&gt; , but is defined on any UV. It returns the same as &lt;code&gt;isFOO_LC&lt;/code&gt; for input code points less than 256, and returns the hard-coded, not-affected-by-locale, Unicode results for larger ones.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; は &lt;code&gt;isFOO_LC&lt;/code&gt; に似ていますが、任意のUVで定義されます。これは、256未満の入力コードポイントに対して &lt;code&gt;isFOO_LC&lt;/code&gt; と同じ結果を返し、ハードコードされた、ロケールの影響を受けない、大きなコード結果のUnicode結果を返します。</target>
        </trans-unit>
        <trans-unit id="2ad298897b2ed0cfe491083076d3380e15f29221" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_uni&lt;/code&gt; is like the &lt;code&gt;isFOO_L1&lt;/code&gt; variant, but accepts any UV code point as input. If the code point is larger than 255, Unicode rules are used to determine if it is in the character class. For example, &lt;code&gt;isWORDCHAR_uni(0x100)&lt;/code&gt; returns TRUE, since 0x100 is LATIN CAPITAL LETTER A WITH MACRON in Unicode, and is a word character.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_uni&lt;/code&gt; は &lt;code&gt;isFOO_L1&lt;/code&gt; バリアントに似ていますが、任意のUVコードポイントを入力として受け入れます。コードポイントが255より大きい場合は、Unicodeルールを使用して、それが文字クラスにあるかどうかを判断します。たとえば、 &lt;code&gt;isWORDCHAR_uni(0x100)&lt;/code&gt; はTRUEを返します。0x100はUnicodeのラテン大文字Aウィズマクロンであり、単語文字であるためです。</target>
        </trans-unit>
        <trans-unit id="4a2fc63255fac34edd7ea0e57902967c8c3777dd" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_utf8&lt;/code&gt; is like &lt;code&gt;isFOO_uni&lt;/code&gt; , but the input is a pointer to a (known to be well-formed) UTF-8 encoded string (&lt;code&gt;U8*&lt;/code&gt; or &lt;code&gt;char*&lt;/code&gt; ). The classification of just the first (possibly multi-byte) character in the string is tested.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_utf8&lt;/code&gt; は &lt;code&gt;isFOO_uni&lt;/code&gt; に似ていますが、入力は（整形式であることがわかっている）UTF-8エンコードされた文字列（ &lt;code&gt;U8*&lt;/code&gt; または &lt;code&gt;char*&lt;/code&gt; ）へのポインターです。文字列の最初の（おそらくマルチバイトの）文字だけの分類がテストされます。</target>
        </trans-unit>
        <trans-unit id="786f5e70748cc3ce6d3a4d95eb203e5790a45b20" translate="yes" xml:space="preserve">
          <source>Variant of make you intend to run the generated Makefile with. This parameter lets Makefile.PL know what make quirks to account for when generating the Makefile.</source>
          <target state="translated">生成されたMakefileを実行したいmakeのバリエーション。このパラメータは、Makefile.PLがMakefileを生成する際にどのようなmakeの癖を考慮すべきかを知ることを可能にします。</target>
        </trans-unit>
        <trans-unit id="8c77b7455bfd7adea569c5a3c57a2f0f3eeee8c3" translate="yes" xml:space="preserve">
          <source>Various ALLOW flags can be set in &lt;code&gt;flags&lt;/code&gt; to allow (and not warn on) individual types of malformations, such as the sequence being overlong (that is, when there is a shorter sequence that can express the same code point; overlong sequences are expressly forbidden in the UTF-8 standard due to potential security issues). Another malformation example is the first byte of a character not being a legal first byte. See</source>
          <target state="translated">各種フラグを設定することができるALLOW &lt;code&gt;flags&lt;/code&gt; すぎる配列が明示禁止され、そのような配列は、同じコードポイントを表現することができ、より短い配列が存在する場合には、その（すぎるものとして奇形の（上の警告としない）可能にするために、個々のタイプ、セキュリティ上の問題がある可能性があるため、UTF-8標準では）。別の不正な例は、文字の最初のバイトが正当な最初のバイトではないことです。見る</target>
        </trans-unit>
        <trans-unit id="afddad8d7b065f14bf0be2c971fc90accba56a72" translate="yes" xml:space="preserve">
          <source>Various Unicode Transformation Formats</source>
          <target state="translated">さまざまなユニコード変換フォーマット</target>
        </trans-unit>
        <trans-unit id="07521b5f641f36eca327ef3a95aecd1a3cb86300" translate="yes" xml:space="preserve">
          <source>Various flags whose names begin with &lt;code&gt;ANYOF_&lt;/code&gt; are used for special situations. Above Latin1 matches and things not known until run-time are stored in &lt;a href=&quot;#Perl's-pprivate-structure&quot;&gt;Perl's pprivate structure&lt;/a&gt;.</source>
          <target state="translated">名前が &lt;code&gt;ANYOF_&lt;/code&gt; で始まるさまざまなフラグは、特別な状況で使用されます。上記のLatin1の一致および実行時まで不明なものは、&lt;a href=&quot;#Perl's-pprivate-structure&quot;&gt;Perlのpprivate構造に&lt;/a&gt;格納されます。</target>
        </trans-unit>
        <trans-unit id="44c78407657471f7c495761722bd853edd5018b1" translate="yes" xml:space="preserve">
          <source>Various people have made helpful suggestions and contributions, in particular:</source>
          <target state="translated">特に、様々な方から参考になる提案や投稿がありました。</target>
        </trans-unit>
        <trans-unit id="e18054f599f969e2a7425c026d09df10072d24d7" translate="yes" xml:space="preserve">
          <source>Various tools exist for analysing C source code &lt;b&gt;statically&lt;/b&gt;, as opposed to &lt;b&gt;dynamically&lt;/b&gt;, that is, without executing the code. It is possible to detect resource leaks, undefined behaviour, type mismatches, portability problems, code paths that would cause illegal memory accesses, and other similar problems by just parsing the C code and looking at the resulting graph, what does it tell about the execution and data flows. As a matter of fact, this is exactly how C compilers know to give warnings about dubious code.</source>
          <target state="translated">Cソースコードを&lt;b&gt;動的に&lt;/b&gt;、つまりコードを実行せず&lt;b&gt;に静的に&lt;/b&gt;分析するためのさまざまなツールが存在します。リソースリーク、未定義の動作、タイプの不一致、移植性の問題、不正なメモリアクセスを引き起こすコードパス、およびその他の同様の問題を検出するには、Cコードを解析して結果のグラフを見るだけで、実行について何がわかりますかとデータフロー。実際のところ、これはCコンパイラが疑わしいコードについて警告を出すことを知っている方法です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="73cab00905b3a6637e1ac427d0bd8b9c7ea4bd82" translate="yes" xml:space="preserve">
          <source>Various useful techniques for the redirection of STDOUT and STDERR filehandles are explained in &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; and &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;.</source>
          <target state="translated">STDOUTおよびSTDERRファイルハンドルのリダイレクトに役立つさまざまなテクニックは、&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;および&lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="348afb03d84f05d16f7adbc3eb8e693f676f5018" translate="yes" xml:space="preserve">
          <source>Varying slowly compared to something else. (Unfortunately, everything is relatively stable compared to something else, except for certain elementary particles, and we&amp;rsquo;re not so sure about them.) In computers, where things are supposed to vary rapidly, &amp;ldquo;static&amp;rdquo; has a derogatory connotation, indicating a slightly dysfunctional &lt;b&gt;variable&lt;/b&gt;, &lt;b&gt;subroutine&lt;/b&gt;, or &lt;b&gt;method&lt;/b&gt;. In Perl culture, the word is politely avoided.</source>
          <target state="translated">他のものと比較してゆっくり変化します。 （残念ながら、特定の素粒子を除いて、他のものと比べてすべてが比較的安定しています。また、それらについてはよくわかりません）。わずかに機能しない&lt;b&gt;変数&lt;/b&gt;、&lt;b&gt;サブルーチン&lt;/b&gt;、または&lt;b&gt;メソッド&lt;/b&gt;。 Perlの文化では、この単語は丁寧に避けられています。</target>
        </trans-unit>
        <trans-unit id="85ffef503f476138b4fff0b28711a4307dd0273e" translate="yes" xml:space="preserve">
          <source>Vendor locales are notoriously buggy, and it is difficult for Perl to test its locale-handling code because this interacts with code that Perl has no control over; therefore the locale-handling code in Perl may be buggy as well. (However, the Unicode-supplied locales should be better, and there is a feed back mechanism to correct any problems. See &lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;Freely available locale definitions&lt;/a&gt;.)</source>
          <target state="translated">ベンダーロケールはバグが多いことで有名であり、Perlが制御できないコードと相互作用するため、Perlがロケール処理コードをテストすることは困難です。したがって、Perlのロケール処理コードにもバグがある可能性があります。（ただし、Unicode提供のロケールの方が優れているはずです。問題を修正するためのフィードバックメカニズムが&lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;あります&lt;/a&gt;。無料で利用できるロケール定義を参照してください。）</target>
        </trans-unit>
        <trans-unit id="6d32a0f82e0ef391607d7fd073f792ba0310faa2" translate="yes" xml:space="preserve">
          <source>Verbatim Paragraph</source>
          <target state="translated">バーベイタムパラグラフ</target>
        </trans-unit>
        <trans-unit id="3c3c8bdee8d70621828a9acf42235be7b9af6f25" translate="yes" xml:space="preserve">
          <source>Verbatim paragraphs are usually used for presenting a codeblock or other text which does not require any special parsing or formatting, and which shouldn't be wrapped.</source>
          <target state="translated">Verbatim paragraphs は通常、特別な解析や書式設定を必要とせず、また、ラップされるべきではないコードブロックやその他のテキストを提示するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d2ed762aa9e6f4a70c69d05cecc69ec96c79f712" translate="yes" xml:space="preserve">
          <source>Verbosity level for PERL5LIB changes (none or v)?</source>
          <target state="translated">PERL5LIBの変更に対する動詞レベル(なしかvか)?</target>
        </trans-unit>
        <trans-unit id="b16f50ef11893ee8a56a924cf21f29d6d3384b2d" translate="yes" xml:space="preserve">
          <source>Verbosity level for loading modules (none or v)?</source>
          <target state="translated">モジュールをロードする際の冗長度のレベル (none or v)?</target>
        </trans-unit>
        <trans-unit id="5c786adc4be052262918fbf867ae699f3967bdb1" translate="yes" xml:space="preserve">
          <source>Verifies your POD's correctness</source>
          <target state="translated">あなたのPODが正しいかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d4e18ac1b3adf04f8a64f79e732d6cb231328446" translate="yes" xml:space="preserve">
          <source>Verify that</source>
          <target state="translated">以下のことを確認してください。</target>
        </trans-unit>
        <trans-unit id="c6d2ae8d70f95ac35eb4f17f52487e3fbb74bfe8" translate="yes" xml:space="preserve">
          <source>Verify that &lt;code&gt;ADDRESS&lt;/code&gt; is a legitimate mailing address.</source>
          <target state="translated">&lt;code&gt;ADDRESS&lt;/code&gt; が正当なメールアドレスであることを確認します。</target>
        </trans-unit>
        <trans-unit id="aa131b92248ccc3e18a5da63bd932dabad63bce2" translate="yes" xml:space="preserve">
          <source>Verify that the element at index</source>
          <target state="translated">インデックスの要素が</target>
        </trans-unit>
        <trans-unit id="994d1b0dafb2a784fe9a62de996298af3c56fa67" translate="yes" xml:space="preserve">
          <source>Version 0.17</source>
          <target state="translated">バージョン0.17</target>
        </trans-unit>
        <trans-unit id="cf9296ff9faf64bcbf7077fc94b20c36180a2b81" translate="yes" xml:space="preserve">
          <source>Version 1.0 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.0メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="5f58248b430683f1248cf64cbe1e704fe1b1c2aa" translate="yes" xml:space="preserve">
          <source>Version 1.1 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.1メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="6b502e3047cfe1751d1d1b7edc28b46bfd3a8d92" translate="yes" xml:space="preserve">
          <source>Version 1.2 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.2メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="c0707932557d9b8e2fa8ebb9e9863bf7fee11d96" translate="yes" xml:space="preserve">
          <source>Version 1.3 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.3メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="6bb856fd2cb7a8a4749ea08a96d81eed38d2bee4" translate="yes" xml:space="preserve">
          <source>Version 1.3, 14th Apr 1997</source>
          <target state="translated">バージョン1.3、1997年4月14日</target>
        </trans-unit>
        <trans-unit id="50cdda2fafe15d6a81c70eb22bbe3a4d4d6f2154" translate="yes" xml:space="preserve">
          <source>Version 1.4 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.4メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="e595432938de926793decdb5491565f726cb5632" translate="yes" xml:space="preserve">
          <source>Version 1.x of Devel::PPPort was written by Kenneth Albanowski.</source>
          <target state="translated">Devel::PPPortのバージョン1.xはKenneth Albanowski氏によって書かれました。</target>
        </trans-unit>
        <trans-unit id="a64e96de79863ac878adbe6d99f0ef3004f7ada2" translate="yes" xml:space="preserve">
          <source>Version 1.x, Copyright (C) 1999, Kenneth Albanowski.</source>
          <target state="translated">Version 1.x,Copyright (C)1999,Kenneth Albanowski.</target>
        </trans-unit>
        <trans-unit id="a5a2dcb962ed837bde5bb2d230fbf541ca8dd67b" translate="yes" xml:space="preserve">
          <source>Version 1.x, Copyright (c) 1997, Graham Barr.</source>
          <target state="translated">バージョン 1.x,Copyright (c)1997,Graham Barr.</target>
        </trans-unit>
        <trans-unit id="45647cd5610f6e1c8ad80ff8302e3680ebe69bd4" translate="yes" xml:space="preserve">
          <source>Version 2.07 included 2 functions for modifying the internal data: rename_country and alias_code. Both of these could be used only to modify the internal data for country codes.</source>
          <target state="translated">バージョン2.07では、内部データを変更するための2つの関数が含まれています:rename_countryとalias_codeです。これらはどちらも国コードの内部データを修正するためにのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="92a1c91419a81cd1268ac19dce637a320313655e" translate="yes" xml:space="preserve">
          <source>Version 2.158 (March 13 2015)</source>
          <target state="translated">バージョン2.158(2015年3月13日</target>
        </trans-unit>
        <trans-unit id="2b76e68914b5b481fce750a4808d6a01e4e0d7a5" translate="yes" xml:space="preserve">
          <source>Version 2.x was ported to the Perl core by Paul Marquess.</source>
          <target state="translated">バージョン2.xはPaul MarquessによってPerlコアに移植されました。</target>
        </trans-unit>
        <trans-unit id="b4dfa929b5ee3edcabc4bb1ff1f2299b2ba1ffbf" translate="yes" xml:space="preserve">
          <source>Version 2.x, Copyright (C) 2001, Paul Marquess.</source>
          <target state="translated">Version 2.x,Copyright (C)2001,Paul Marquess.</target>
        </trans-unit>
        <trans-unit id="afb9e5ddc0f066d6e4fe7219b73a7a8e7aeed9fa" translate="yes" xml:space="preserve">
          <source>Version 2.x, Copyright (C) 2007-2013, Marcus Holland-Moritz.</source>
          <target state="translated">Version 2.x,Copyright (C)2007-2013,Marcus Holland-Moritz.</target>
        </trans-unit>
        <trans-unit id="2b92364fcb707c868641f18b85e8bb1624050d73" translate="yes" xml:space="preserve">
          <source>Version 3.35</source>
          <target state="translated">バージョン3.35</target>
        </trans-unit>
        <trans-unit id="4f0303ef100e7bd0b627ac0ed92f17d79836c82a" translate="yes" xml:space="preserve">
          <source>Version 3.x was ported back to CPAN by Marcus Holland-Moritz.</source>
          <target state="translated">バージョン3.xはMarcus Holland-MoritzによってCPANに移植されました。</target>
        </trans-unit>
        <trans-unit id="87ba3aa39294d7bd5f976dfda6425a25c0769a48" translate="yes" xml:space="preserve">
          <source>Version 3.x, Copyright (C) 2004-2013, Marcus Holland-Moritz.</source>
          <target state="translated">バージョン 3.x,Copyright (C)2004-2013,Marcus Holland-Moritz.</target>
        </trans-unit>
        <trans-unit id="70ac02d65beabeafc66ef77aabf5e475e6710dac" translate="yes" xml:space="preserve">
          <source>Version 8 Regular Expressions</source>
          <target state="translated">バージョン 8 正規表現</target>
        </trans-unit>
        <trans-unit id="5148ac4d9167ac054bd9f1a1a44dfedd508ff1b8" translate="yes" xml:space="preserve">
          <source>Version Strings</source>
          <target state="translated">バージョンの文字列</target>
        </trans-unit>
        <trans-unit id="68c98714c821df335863c348a8dc241ec68a74da" translate="yes" xml:space="preserve">
          <source>Version caveat</source>
          <target state="translated">バージョンの注意事項</target>
        </trans-unit>
        <trans-unit id="01e4cae31c98991a3d53edad9d5a04ca08ed4f3b" translate="yes" xml:space="preserve">
          <source>Version numbering</source>
          <target state="translated">バージョン・ナンバリング</target>
        </trans-unit>
        <trans-unit id="7a4b23d2aee6859898d9d8a68bcc2c3cf6b34466" translate="yes" xml:space="preserve">
          <source>Version numbers can be checked like so:</source>
          <target state="translated">バージョン番号はこんな感じで確認できます。</target>
        </trans-unit>
        <trans-unit id="9ea6fb41a1f5c2adb11175166f62cfde32e3e36d" translate="yes" xml:space="preserve">
          <source>Version numbers should indicate at least major and minor releases, and possibly sub-minor releases. A major release is one in which most of the functionality has changed, or in which major new functionality is added. A minor release is one in which a small amount of functionality has been added or changed. Sub-minor version numbers are usually used for changes which do not affect functionality, such as documentation patches.</source>
          <target state="translated">バージョン番号は、少なくともメジャーリリースとマイナーリリース、そして場合によってはサブマイナーリリースを示すべきです。メジャーリリースとは、ほとんどの機能が変更されたもの、または主要な新機能が追加されたものを指します。マイナーリリースとは、少量の機能が追加または変更されたものを指します。サブマイナーリリースのバージョン番号は、通常、ドキュメントパッチなど、機能に影響を与えない変更に使用されます。</target>
        </trans-unit>
        <trans-unit id="d33038b68a6d275b70080c4ca40f495c404258ac" translate="yes" xml:space="preserve">
          <source>Version object aware cmp. Both operands must already have been converted into version objects.</source>
          <target state="translated">バージョンオブジェクトを認識するcmp。両方のオペランドは、すでにバージョンオブジェクトに変換されている必要があります。</target>
        </trans-unit>
        <trans-unit id="2750d3223582565870adf32b96da562927d7229f" translate="yes" xml:space="preserve">
          <source>Versioning</source>
          <target state="translated">Versioning</target>
        </trans-unit>
        <trans-unit id="6fe8bcdb81f192c675970c262f42ae11e468a493" translate="yes" xml:space="preserve">
          <source>Versions &amp;gt;= 3.22 are maintained with support from Matthew Horsfall (alh).</source>
          <target state="translated">バージョン3.22以上は、Matthew Horsfall（alh）のサポートにより維持されます。</target>
        </trans-unit>
        <trans-unit id="0a0e4cacd3bf4b53f4105e538a9024d7fb5c49ec" translate="yes" xml:space="preserve">
          <source>Versions of Perl from 5.002 to 5.003 did use the &lt;code&gt;LC_CTYPE&lt;/code&gt; information if available; that is, &lt;code&gt;\w&lt;/code&gt; did understand what were the letters according to the locale environment variables. The problem was that the user had no control over the feature: if the C library supported locales, Perl used them.</source>
          <target state="translated">5.002から5.003までのバージョンのPerlでは、 &lt;code&gt;LC_CTYPE&lt;/code&gt; 情報が使用可能であれば使用されていました。つまり、 &lt;code&gt;\w&lt;/code&gt; は、ロケール環境変数による文字を理解しました。問題は、ユーザーが機能を制御できないことでした。Cライブラリがロケールをサポートしている場合、Perlがロケールを使用していました。</target>
        </trans-unit>
        <trans-unit id="e19f78e14eb21b19646ec53e2aa5cba777aaa99b" translate="yes" xml:space="preserve">
          <source>Versions of Perl prior to 5.004 &lt;b&gt;mostly&lt;/b&gt; ignored locale information, generally behaving as if something similar to the &lt;code&gt;&quot;C&quot;&lt;/code&gt; locale were always in force, even if the program environment suggested otherwise (see &lt;a href=&quot;#The-setlocale-function&quot;&gt;The setlocale function&lt;/a&gt;). By default, Perl still behaves this way for backward compatibility. If you want a Perl application to pay attention to locale information, you &lt;b&gt;must&lt;/b&gt; use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; pragma (see &lt;a href=&quot;#The-%22use-locale%22-pragma&quot;&gt;The use locale pragma&lt;/a&gt;) or, in the unlikely event that you want to do so for just pattern matching, the &lt;code&gt;/l&lt;/code&gt; regular expression modifier (see &lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;Character set modifiers in perlre&lt;/a&gt;) to instruct it to do so.</source>
          <target state="translated">5.004より前のバージョンのPerlは、&lt;b&gt;ほとんどの&lt;/b&gt;場合、ロケール情報を無視しました。プログラム環境が特に示唆している場合でも、 &lt;code&gt;&quot;C&quot;&lt;/code&gt; ロケールに類似したものが常に有効であるかのように振る舞います（&lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale関数を&lt;/a&gt;参照）。デフォルトでは、Perlは下位互換性のためにこのように動作します。あなたはロケール情報への注意を払うへのPerlアプリケーションが必要な場合は、あなたが&lt;b&gt;しなければならない&lt;/b&gt;使用 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; プラグマを（参照&lt;a href=&quot;#The-%22use-locale%22-pragma&quot;&gt;使用ロケールプラグマを&lt;/a&gt;、あなただけのパターンマッチングのためにそうしたいとは考えにくい場合には、）または &lt;code&gt;/l&lt;/code&gt; の正規表現修飾子（&lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;perlreのCharacter set modifiersを参照&lt;/a&gt;）、そうするように指示します。</target>
        </trans-unit>
        <trans-unit id="cd42417aaf403d8a849b95358e372d8ab627e926" translate="yes" xml:space="preserve">
          <source>Versions of Perl prior to 5.6 would recompile the regular expression for each iteration, even if &lt;code&gt;$pattern&lt;/code&gt; had not changed. The &lt;code&gt;/o&lt;/code&gt; would prevent this by telling Perl to compile the pattern the first time, then reuse that for subsequent iterations:</source>
          <target state="translated">5.6より前のバージョンのPerlは、 &lt;code&gt;$pattern&lt;/code&gt; が変更されていなくても、反復ごとに正規表現を再コンパイルします。 &lt;code&gt;/o&lt;/code&gt; パターンを初めてコンパイルするPerlを伝えることによって、これを防止する、その後の反復のためにそれを再利用します。</target>
        </trans-unit>
        <trans-unit id="3862168f946314ea765703eeec887a87938d1f6e" translate="yes" xml:space="preserve">
          <source>Versions prior to perl5.004 had serious security problems with buffer overflows, and in some cases have CERT advisories (for instance, &lt;a href=&quot;http://www.cert.org/advisories/CA-1997-17.html&quot;&gt;http://www.cert.org/advisories/CA-1997-17.html&lt;/a&gt; ).</source>
          <target state="translated">perl5.004より前のバージョンには、バッファオーバーフローに関する深刻なセキュリティ問題があり、場合によってはCERTアドバイザリ（たとえば、&lt;a href=&quot;http://www.cert.org/advisories/CA-1997-17.html&quot;&gt;http:&lt;/a&gt; //www.cert.org/advisories/CA-1997-17.html ）がありました。</target>
        </trans-unit>
        <trans-unit id="af88a51473f729bd7efb750c66c484d3ad88aa17" translate="yes" xml:space="preserve">
          <source>Versions up to 2.11 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.11 onwards Copyright (C) 2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.11までのバージョン Copyright (c)1995-2004 Graham Barr.無断複写・転載を禁じます。バージョン2.11以降の変更点 Copyright (C)2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="645570264e1c9b5d4c69c1487a566c0753776ad2" translate="yes" xml:space="preserve">
          <source>Versions up to 2.13 Copyright (c) 1995-1998 Graham Barr. All rights reserved. Changes in Version 2.13_01 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.13までのバージョン Copyright (c)1995-1998 Graham Barr.無断複写・転載を禁じます。バージョン2.13_01以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="df128b7f68ed19de182414be1bd4f1f2d9c6a0b4" translate="yes" xml:space="preserve">
          <source>Versions up to 2.21 Copyright (c) 1995-1998 Graham Barr. All rights reserved. Changes in Version 2.22 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.21までのバージョン Copyright (c)1995-1998 Graham Barr.無断複写・転載を禁じます。バージョン2.22以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="230af24ce1338603fae4bdb469b6688c0e4037a9" translate="yes" xml:space="preserve">
          <source>Versions up to 2.24_1 Copyright (c) 1995-1997 Graham Barr. All rights reserved. Changes in Version 2.25 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.24_1 までのバージョン Copyright (c)1995-1997 Graham Barr.すべての著作権は留保されています。バージョン2.25以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="5670a2aa1f7771d1194bac3e8af5f2d1835dd801" translate="yes" xml:space="preserve">
          <source>Versions up to 2.29 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.29_01 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.29までのバージョン Copyright (c)1995-2004 Graham Barr.無断複写・転載を禁じます。バージョン2.29_01以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="f23d5e96a8b776d3b4630eccbbe42aa010b76c05" translate="yes" xml:space="preserve">
          <source>Versions up to 2.29_1 Copyright (c) 1995-2006 Graham Barr. All rights reserved. Changes in Version 2.29_2 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.29_1 までのバージョン Copyright (c)1995-2006 Graham Barr.すべての著作権は留保されています。バージョン2.29_2以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="84d20de3782c28252a3c6f7756f86f07da1b04bb" translate="yes" xml:space="preserve">
          <source>Versions up to 2.31_1 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.31_2 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.31_1 までのバージョン Copyright (c)1995-2004 Graham Barr.すべての著作権は留保されています。バージョン2.31_2以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="e46c1089fa8e642aaf026e639393be6e2f9a3f93" translate="yes" xml:space="preserve">
          <source>Versions up to 2.77_2 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.77_3 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.77_2までのバージョン Copyright (c)1995-2004 Graham Barr.すべての著作権は留保されています。バージョン2.77_3以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="3e953c4e403299818cc2d2c327160433abe8b2b9" translate="yes" xml:space="preserve">
          <source>Very large code points (above 0x7FFF_FFFF) are considered more problematic than the others that are above the Unicode legal maximum. There are several reasons: they requre at least 32 bits to represent them on ASCII platforms, are not representable at all on EBCDIC platforms, and the original UTF-8 specification never went above this number (the current 0x10FFFF limit was imposed later). (The smaller ones, those that fit into 32 bits, are representable by a UV on ASCII platforms, but not by an IV, which means that the number of operations that can be performed on them is quite restricted.) The UTF-8 encoding on ASCII platforms for these large code points begins with a byte containing 0xFE or 0xFF. The UTF8_DISALLOW_FE_FF flag will cause them to be treated as malformations, while allowing smaller above-Unicode code points. (Of course UTF8_DISALLOW_SUPER will treat all above-Unicode code points, including these, as malformations.) Similarly, UTF8_WARN_FE_FF acts just like the other WARN flags, but applies just to these code points.</source>
          <target state="translated">非常に大きなコードポイント (0x7FFF_FFFF より上)は、 Unicode の法定最大値を超えている他のコードポイントよりも問題が多いと考えられています。それにはいくつかの理由があります:それらはASCIIプラットフォーム上で表現するために少なくとも32ビットが必要であり、EBCDICプラットフォーム上では全く表現できないこと、そしてオリジナルのUTF-8仕様ではこの数を超えることはありませんでした(現在の0x10FFFFの制限は後に課されました)。(32ビットに収まる小さいものは、ASCIIプラットフォームではUVで表現できますが、IVでは表現できないので、それに対して実行できる操作がかなり制限されています)。こ れ ら の大規模 コ ー ド 点に対す る ASCII プ ラ ッ ト フ ォーム上の UTF-8 エン コ ーデ ィ ン グは、 0xFE か 0xFF を含むバ イ ト で始ま り ます。UTF8_DISALLOW_FE_FF フラグは、それらを不正形 式 と し て扱う一方で、Unicode 以上の小さな コ ー ド 点を許す こ と を可能にします (もちろん UTF8_DISALLOW_FE_FF フラグは、それらを不正形 式 と し て扱います)。(もちろん UTF8_DISALLOW_SUPER は、 こ れ ら を含めてすべての Unicode 以上の コ ー ド 点を不正形 式 と し て扱います。)同様に、UTF8_WARN_FE_FF は他の WARN フラグと同様に動作 し ますが、 こ れ ら の コ ー ド 点にのみ適用 さ れます。</target>
        </trans-unit>
        <trans-unit id="a0d5201ccd05c9ec8ec53b6a69352780556eae41" translate="yes" xml:space="preserve">
          <source>Very little work should be needed since nothing changes until you generate Unicode data. The most important thing is getting input as Unicode; for that, see the earlier I/O discussion. To get full seamless Unicode support, add &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher) to your script.</source>
          <target state="translated">Unicodeデータを生成するまで何も変更されないため、作業はほとんど必要ありません。最も重要なことは、入力をUnicodeとして取得することです。これについては、以前のI / Oの説明を参照してください。完全なシームレスなUnicodeサポートを取得するには、スクリプトに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 以降を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;）を追加します。</target>
        </trans-unit>
        <trans-unit id="eb22342c76c7e665931efb33364b8148d2bfea0a" translate="yes" xml:space="preserve">
          <source>Very nearly all Unicode character properties are accessible through regular expressions by using the &lt;code&gt;\p{}&lt;/code&gt; &quot;matches property&quot; construct and the &lt;code&gt;\P{}&lt;/code&gt; &quot;doesn't match property&quot; for its negation.</source>
          <target state="translated">ほぼすべてのUnicode文字プロパティは、正規表現を介して、 &lt;code&gt;\p{}&lt;/code&gt; 「matches property」コンストラクトと &lt;code&gt;\P{}&lt;/code&gt; 「does n't match property」の否定を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="5c9d6c4d037708bb7601d0c4b194d48f70b48661" translate="yes" xml:space="preserve">
          <source>Very probably not. Unless you are generating Unicode characters somehow, old behaviour should be preserved. About the only behaviour that has changed and which could start generating Unicode is the old behaviour of &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; where supplying an argument more than 255 produced a character modulo 255. &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(300)&lt;/a&gt;&lt;/code&gt;, for example, was equal to &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(45)&lt;/a&gt;&lt;/code&gt; or &quot;-&quot; (in ASCII), now it is LATIN CAPITAL LETTER I WITH BREVE.</source>
          <target state="translated">おそらくそうではありません。何らかの方法でUnicode文字を生成しているのでない限り、古い動作を維持する必要があります。変更され、Unicodeの生成を開始できる唯一の動作は、255を超える引数を指定すると255を法とする文字が生成される &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; の古い動作です。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(300)&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(45)&lt;/a&gt;&lt;/code&gt; または「-」（ASCII）、現在はラテン大文字I短音記号です。</target>
        </trans-unit>
        <trans-unit id="3df57364769892c03471ecd89738053fe81083da" translate="yes" xml:space="preserve">
          <source>Very similar to HTML/XML &lt;code&gt;&amp;amp;&lt;i&gt;foo&lt;/i&gt;;&lt;/code&gt; &quot;entity references&quot;:</source>
          <target state="translated">HTML / XML &lt;code&gt;&amp;amp;&lt;i&gt;foo&lt;/i&gt;;&lt;/code&gt; によく似ています。「エンティティ参照」：</target>
        </trans-unit>
        <trans-unit id="88a7cc964078758d646c21f587f22b62e9a2dd56" translate="yes" xml:space="preserve">
          <source>Very useful online reference material:</source>
          <target state="translated">非常に便利なオンライン参考資料です。</target>
        </trans-unit>
        <trans-unit id="81b34b94e5e74c2375523a735ce4a25a6536b5a0" translate="yes" xml:space="preserve">
          <source>View a few lines of code around the current line.</source>
          <target state="translated">現在の行を中心に数行のコードを表示します。</target>
        </trans-unit>
        <trans-unit id="ee53ceb3384ce0d69b124dce7f13e6c99981e32e" translate="yes" xml:space="preserve">
          <source>View existing bug reports at, and submit any new bugs, problems, patches, etc. to: &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared&lt;/a&gt;</source>
          <target state="translated">既存のバグレポートを表示し、新しいバグ、問題、パッチなどを&lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-sharedに&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="3ee82a6b555759727c4e5933e475a065e10be5a6" translate="yes" xml:space="preserve">
          <source>Vipul Ved Prakash &amp;lt;mail AT vipul DOT net&amp;gt; - Helping with debugging</source>
          <target state="translated">Vipul Ved Prakash &amp;lt;mail at vipul DOT net&amp;gt;-デバッグの支援</target>
        </trans-unit>
        <trans-unit id="028988d7a45fe46ec8fd41d271d201dc35932db0" translate="yes" xml:space="preserve">
          <source>Visual Perl is a Visual Studio.NET plug-in from ActiveState.</source>
          <target state="translated">Visual PerlはActiveStateのVisual Studio.NETプラグインです。</target>
        </trans-unit>
        <trans-unit id="386d827cc4ba6b5f42c38cef2abc770e9c36de72" translate="yes" xml:space="preserve">
          <source>Volumes can be drive letters or UNC sharenames (\\server\share).</source>
          <target state="translated">ボリュームは、ドライブレターかUNC sharenames (\servershare)にすることができます。</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="c26d74df8890b7f659e90425275e4ff437fc0eeb" translate="yes" xml:space="preserve">
          <source>WAIT</source>
          <target state="translated">WAIT</target>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="3c94abff24468ec74283806394c7e1079287562a" translate="yes" xml:space="preserve">
          <source>WARNING: A variable used as a buffer by &lt;code&gt;setbuf&lt;/code&gt; or &lt;code&gt;setvbuf&lt;/code&gt;&lt;b&gt;must not be modified&lt;/b&gt; in any way until the IO::Handle is closed or &lt;code&gt;setbuf&lt;/code&gt; or &lt;code&gt;setvbuf&lt;/code&gt; is called again, or memory corruption may result! Remember that the order of global destruction is undefined, so even if your buffer variable remains in scope until program termination, it may be undefined before the file IO::Handle is closed. Note that you need to import the constants &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; explicitly. Like C, setbuf returns nothing. setvbuf returns &quot;0 but true&quot;, on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">警告： &lt;code&gt;setbuf&lt;/code&gt; または &lt;code&gt;setvbuf&lt;/code&gt; によってバッファとして使用される変数は、IO :: Handleが閉じられるか、 &lt;code&gt;setbuf&lt;/code&gt; または &lt;code&gt;setvbuf&lt;/code&gt; が再度呼び出されるまで&lt;b&gt;変更&lt;/b&gt;し&lt;b&gt;ないでください。変更&lt;/b&gt;すると、メモリが破損する可能性があります。グローバル破棄の順序は未定義であるため、プログラムが終了するまでバッファー変数がスコープ内に残っている場合でも、ファイルIO :: Handleを閉じる前に未定義になる可能性があることに注意してください。定数 &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および &lt;code&gt;_IONBF&lt;/code&gt; を明示的にインポートする必要があることに注意してください。 Cと同様に、setbufは何も返しません。 setvbufは、成功すると「0 but true」を返し、失敗すると &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="84c2915b48a50feabe204322fda8dc2bbdf52e7d" translate="yes" xml:space="preserve">
          <source>WARNING: As of the 5.004 release, proper usage of the array and hash access functions requires understanding a few caveats. Some of these caveats are actually considered bugs in the API, to be fixed in later releases, and are bracketed with [MAYCHANGE] below. If you find yourself actually applying such information in this section, be aware that the behavior may change in the future, umm, without warning.</source>
          <target state="translated">警告:5.004 リリースでは、配列やハッシュアクセス関数を適切に使用するためには、いくつかの注意点を理解する必要があります。これらの注意事項のいくつかは、実際にはAPIのバグと考えられており、後のリリースで修正されることになっています。このセクションの情報を実際に適用する場合は、将来、警告なしに動作が変更される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="05aab9ee07d74b03226bac90b4501275a8030a8f" translate="yes" xml:space="preserve">
          <source>WARNING: The IO::Handle::setvbuf() is not available by default on Perls 5.8.0 and later because setvbuf() is rather specific to using the stdio library, while Perl prefers the new perlio subsystem instead.</source>
          <target state="translated">警告:IO::Handle::setvbuf()はPerl 5.8.0以降ではデフォルトでは利用できません。</target>
        </trans-unit>
        <trans-unit id="19985e22537400319dbf86c71031d6722bd3ab22" translate="yes" xml:space="preserve">
          <source>WARNING: This variable is strictly for internal use only. Its availability, behavior, and contents are subject to change without notice.</source>
          <target state="translated">警告:この変数は厳密には内部使用のみを目的としています。その可用性、動作、および内容は予告なく変更されることがあります。</target>
        </trans-unit>
        <trans-unit id="5fbfa986b2fb43598295e70fb2ca9f7ae7e83632" translate="yes" xml:space="preserve">
          <source>WARNING: do not use the following unless you *know* &lt;code&gt;off&lt;/code&gt; is within the UTF-8 data pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; *and* that on entry &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; is aligned on the first byte of character or just after the last byte of a character.</source>
          <target state="translated">警告： &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すUTF-8データ内に* &lt;code&gt;off&lt;/code&gt; *があり*かつ*エントリ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が文字の最初のバイトまたは文字の最後のバイトの直後に配置されることを除いて、以下を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="678aa148e87e729dd3e10fce0605ee0538d043a2" translate="yes" xml:space="preserve">
          <source>WARNING: use only if you *know* that the pointers point inside the same UTF-8 buffer.</source>
          <target state="translated">警告:ポインタが同じUTF-8バッファ内を指すことが*わかっている場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="163b0dd1ef8e487db793ddc755bf68fdfda1ccf3" translate="yes" xml:space="preserve">
          <source>WARNINGS</source>
          <target state="translated">WARNINGS</target>
        </trans-unit>
        <trans-unit id="991fe4b3587f5bc3956dbdf64cab7946d865d2e1" translate="yes" xml:space="preserve">
          <source>WARRANTY</source>
          <target state="translated">WARRANTY</target>
        </trans-unit>
        <trans-unit id="899abc782023a16c90d026f7662b081d0e5603bf" translate="yes" xml:space="preserve">
          <source>WELCOME to Plan 9 Perl, brave soul!</source>
          <target state="translated">Plan 9 Perlへようこそ、勇者の魂よ!</target>
        </trans-unit>
        <trans-unit id="943f25cc8d7abfb9400129c428f47471a4e77ccc" translate="yes" xml:space="preserve">
          <source>WHAT</source>
          <target state="translated">WHAT</target>
        </trans-unit>
        <trans-unit id="d8c634435f258992c7dbf89bc42a5c10afe89f43" translate="yes" xml:space="preserve">
          <source>WHAT ABOUT &lt;code&gt;DB_File&lt;/code&gt; ?</source>
          <target state="translated">WHAT ABOUT &lt;code&gt;DB_File&lt;/code&gt; は？</target>
        </trans-unit>
        <trans-unit id="a3e4fe4880a26ca7ed67d03d21e6c8855e324c1e" translate="yes" xml:space="preserve">
          <source>WHAT ABOUT DB_File?</source>
          <target state="translated">DB_Fileについて教えてください。</target>
        </trans-unit>
        <trans-unit id="69dc14e97abf1c2f032d0ecddf4083e210815600" translate="yes" xml:space="preserve">
          <source>WHAT IS A LOCALE</source>
          <target state="translated">ロケールとは</target>
        </trans-unit>
        <trans-unit id="8df7eec36d2c3cf583d0c776054ef24d9f2ed0ea" translate="yes" xml:space="preserve">
          <source>WHAT NEXT?</source>
          <target state="translated">次は?</target>
        </trans-unit>
        <trans-unit id="a31a09e4a44017984cab9426a275543f91816385" translate="yes" xml:space="preserve">
          <source>WHY YOU SHOULD ALWAYS &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt;</source>
          <target state="translated">なぜ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使う&lt;/a&gt;べきなのか</target>
        </trans-unit>
        <trans-unit id="dcf4ad6d76037668ee7377a5088288d629d80a03" translate="yes" xml:space="preserve">
          <source>WHY YOU SHOULD ALWAYS use strict</source>
          <target state="translated">厳格な使用が推奨される理由</target>
        </trans-unit>
        <trans-unit id="89237cfda70e873f323e7dd25612ea5b444530a5" translate="yes" xml:space="preserve">
          <source>WIZARDS ONLY</source>
          <target state="translated">ウィザード専用</target>
        </trans-unit>
        <trans-unit id="612951b55eb7373e18b643aac58cf8c1af06a81c" translate="yes" xml:space="preserve">
          <source>WORKING WITH CPAN.pm BEHIND FIREWALLS</source>
          <target state="translated">CPAN.pm 火の壁に囲まれての作業</target>
        </trans-unit>
        <trans-unit id="999a14026114357b2720836f701f7f83d4e769ea" translate="yes" xml:space="preserve">
          <source>WRAP YOUR OWN</source>
          <target state="translated">自分で書く</target>
        </trans-unit>
        <trans-unit id="66af5a28971a4c6868ba337400ea0c92dd22295d" translate="yes" xml:space="preserve">
          <source>WRITING A SOURCE FILTER</source>
          <target state="translated">ソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="0d91186f3fc1a27893403674a7abb0832febe2cf" translate="yes" xml:space="preserve">
          <source>WRITING A SOURCE FILTER IN C</source>
          <target state="translated">C言語でのソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="1cd7808a59ef1fb929041296bd5ead5a0b08527e" translate="yes" xml:space="preserve">
          <source>WRITING A SOURCE FILTER IN PERL</source>
          <target state="translated">PERLでのソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="6f33f4557886e9a55139159f018449074d30de1b" translate="yes" xml:space="preserve">
          <source>WRITING PLUGINS</source>
          <target state="translated">ライティングプラグイン</target>
        </trans-unit>
        <trans-unit id="975f1891ff79af7de3d437f83af46051523ae8be" translate="yes" xml:space="preserve">
          <source>Wait a bit. The PAUSE admins don't want to act too quickly in case the current maintainer is on holiday. If there's no response to private communication or the public post, a PAUSE admin can transfer it to you.</source>
          <target state="translated">ちょっと待ってください。PAUSEの管理者は、現在のメンテナが休暇中の場合に備えて、あまり早く行動したくありません。非公開の通信や公開ポストに反応がない場合は、PAUSE管理者が転送してくれます。</target>
        </trans-unit>
        <trans-unit id="15314082ca8a524c0f28646da09da9a7b2b19503" translate="yes" xml:space="preserve">
          <source>Wait for a child process to change state. This is identical to Perl's builtin &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt; function, see &lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;.</source>
          <target state="translated">子プロセスの状態が変化するのを待ちます。これはPerlの組み込みのと同じである &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt; 関数で、参照&lt;a href=&quot;functions/waitpid&quot;&gt;のwaitpid&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6cf131695c42ff802839eee6d284c2ac7d67182" translate="yes" xml:space="preserve">
          <source>Waiting For A Thread To Exit</source>
          <target state="translated">スレッドが抜けるのを待つ</target>
        </trans-unit>
        <trans-unit id="e3ebec26983a17c27a53a6ef7e86c4cba507cfab" translate="yes" xml:space="preserve">
          <source>Waiting for a Condition</source>
          <target state="translated">条件待ち</target>
        </trans-unit>
        <trans-unit id="a039b2b9c5bcec1c837f18b2a777a3cf1a5c101d" translate="yes" xml:space="preserve">
          <source>Waits for a particular child process to terminate and returns the pid of the deceased process, or &lt;code&gt;-1&lt;/code&gt; if there is no such child process. On some systems, a value of 0 indicates that there are processes still running. The status is returned in &lt;code&gt;$?&lt;/code&gt; and &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; . If you say</source>
          <target state="translated">特定の子プロセスが終了するのを待ち、死んだプロセスのpidを返します。そのような子プロセスがない場合は &lt;code&gt;-1&lt;/code&gt; を返します。一部のシステムでは、値0はまだ実行中のプロセスがあることを示します。ステータスは &lt;code&gt;$?&lt;/code&gt; で返されますか？および &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; 。あなたが言うなら</target>
        </trans-unit>
        <trans-unit id="9d2d2ea3d50db6c0193c946021247ef1ef74c98a" translate="yes" xml:space="preserve">
          <source>Walk Perl syntax tree, printing concise info about ops</source>
          <target state="translated">Perl 構文ツリーをウォークし、ops に関する簡潔な情報を表示</target>
        </trans-unit>
        <trans-unit id="98ac99324db8fed0af8f3ac36eac780a0f3b01c7" translate="yes" xml:space="preserve">
          <source>Walk Perl syntax tree, printing debug info about ops</source>
          <target state="translated">Perl 構文ツリーをウォークし、ops のデバッグ情報を表示</target>
        </trans-unit>
        <trans-unit id="7431af4c5a7328a3a156e7686791a7345dc2386a" translate="yes" xml:space="preserve">
          <source>Walk Perl syntax tree, printing terse info about ops</source>
          <target state="translated">Perl の構文ツリーをウォークし、ops についての簡潔な情報を表示する</target>
        </trans-unit>
        <trans-unit id="a864d880f623d2740f245bfcfe987603dc895c7a" translate="yes" xml:space="preserve">
          <source>Walk the symbol table starting at SYMREF and call METHOD on each symbol (a B::GV object) visited. When the walk reaches package symbols (such as &quot;Foo::&quot;) it invokes RECURSE, passing in the symbol name, and only recurses into the package if that sub returns true.</source>
          <target state="translated">SYMREF から始まるシンボルテーブルをウォークし、訪れた各シンボル (B::GV オブジェクト)に対して METHOD を呼び出します。ウォークがパッケージシンボル (例えば &quot;Foo::&quot;)に到達すると、シンボル名を渡して RECURSE を呼び出し、そのサブが true を返した場合にのみパッケージに再帰します。</target>
        </trans-unit>
        <trans-unit id="8c7c87239fc66d9d343f9260489e69fb8f9d3386" translate="yes" xml:space="preserve">
          <source>Walking through a zip file</source>
          <target state="translated">ZIPファイルを歩く</target>
        </trans-unit>
        <trans-unit id="4e8d79fb203d74f77c4bb0a86a3b744deaaf0e27" translate="yes" xml:space="preserve">
          <source>Wanting to explore this thoroughly, we want to use the stdio &lt;code&gt;fputs()&lt;/code&gt; on a PerlIO *. This means we have to ask the perlio system for a stdio &lt;code&gt;FILE *&lt;/code&gt; :</source>
          <target state="translated">これを徹底的に調べたいので、PerlIO *でstdio &lt;code&gt;fputs()&lt;/code&gt; を使用したいと思います。つまり、perlioシステムにstdio &lt;code&gt;FILE *&lt;/code&gt; を要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="00ff4de53d3fe3ffe55031beb5fa9d320e5a35d7" translate="yes" xml:space="preserve">
          <source>Warn on implicit encoding conversions</source>
          <target state="translated">暗黙のエンコーディング変換に関する警告</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="5e95a54cc5d29c0bcc82593871bdfa68f79221af" translate="yes" xml:space="preserve">
          <source>Warning about Output Arguments</source>
          <target state="translated">出力引数についての警告</target>
        </trans-unit>
        <trans-unit id="78a452b501be745d32ffe67fa7b1df3549ee0e88" translate="yes" xml:space="preserve">
          <source>Warning and Dieing</source>
          <target state="translated">警告と死</target>
        </trans-unit>
        <trans-unit id="e62cd761838ae197b4220edd9e3bd0f69c6d3c92" translate="yes" xml:space="preserve">
          <source>Warning messages are not collected in this variable. You can, however, set up a routine to process warnings by setting &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; as described in &lt;a href=&quot;#%25SIG&quot;&gt;%SIG&lt;/a&gt;.</source>
          <target state="translated">この変数には警告メッセージは収集されません。ただし、&lt;a href=&quot;#%25SIG&quot;&gt;％SIGで&lt;/a&gt;説明されているように &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; を設定することにより、警告を処理するルーチンを設定できます。</target>
        </trans-unit>
        <trans-unit id="e6fb45b9b8c6b7b341ac8191e822e0bd743414ee" translate="yes" xml:space="preserve">
          <source>Warning on \1 Instead of $1</source>
          <target state="translated">Warning on †††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††† ｶﾞｰﾝﾄﾞｳﾞｧｰﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝ</target>
        </trans-unit>
        <trans-unit id="151e71b95baa6e558c89aa6c4dcb9635e2009b86" translate="yes" xml:space="preserve">
          <source>Warning! The accuracy</source>
          <target state="translated">警告!精度</target>
        </trans-unit>
        <trans-unit id="dab0c499dcd06e930b9b78c9e213ee3924e2052e" translate="yes" xml:space="preserve">
          <source>Warning: If &lt;code&gt;SvCUR&lt;/code&gt; is equal to &lt;code&gt;SvLEN&lt;/code&gt; , then &lt;code&gt;SvEND&lt;/code&gt; points to unallocated memory.</source>
          <target state="translated">警告：もし &lt;code&gt;SvCUR&lt;/code&gt; がに等しい &lt;code&gt;SvLEN&lt;/code&gt; その後、 &lt;code&gt;SvEND&lt;/code&gt; 割り当てられていないメモリを指します。</target>
        </trans-unit>
        <trans-unit id="897e60f42bffb44a74b7eeefd8312eec6b6adc82" translate="yes" xml:space="preserve">
          <source>Warning: What follows is an experimental feature.</source>
          <target state="translated">警告。以下の内容は実験的なものです。</target>
        </trans-unit>
        <trans-unit id="0f8de18035aca70c8dfa181a9a2f5d6af3e09a08" translate="yes" xml:space="preserve">
          <source>Warning: syntactical care is required when sorting the list returned from a function. If you want to sort the list returned by the function call &lt;code&gt;find_records(@key)&lt;/code&gt; , you can use:</source>
          <target state="translated">警告：関数から返されたリストをソートするときは、構文上の注意が必要です。関数呼び出し &lt;code&gt;find_records(@key)&lt;/code&gt; によって返されたリストを並べ替える場合は、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="5108285f53caf36c4da1bf90b62aacb88666b29e" translate="yes" xml:space="preserve">
          <source>Warning: the inst_perl: target will most probably overwrite your existing perl binary. Use with care!</source>
          <target state="translated">警告:inst_perl:ターゲットは、おそらく既存の perl バイナリを上書きします。注意して使用してください!</target>
        </trans-unit>
        <trans-unit id="1430f976c596795274458abcfbc4f280cbfcebac" translate="yes" xml:space="preserve">
          <source>Warnings</source>
          <target state="translated">Warnings</target>
        </trans-unit>
        <trans-unit id="cd781cfd6561f1847315b32c68e5aa6443ed0ce1" translate="yes" xml:space="preserve">
          <source>Warnings about floating-point overflow when compiling Perl on Tru64</source>
          <target state="translated">Tru64 で Perl をコンパイルする際の浮動小数点オーバーフローに関する警告</target>
        </trans-unit>
        <trans-unit id="f781ae9f2ff2acd0ab91c312289ece490360983a" translate="yes" xml:space="preserve">
          <source>Warnings are issued and the file skipped if &lt;code&gt;AutoSplit&lt;/code&gt; cannot locate either the</source>
          <target state="translated">&lt;code&gt;AutoSplit&lt;/code&gt; がどちらも特定で​​きない場合、警告が発行され、ファイルはスキップされます。</target>
        </trans-unit>
        <trans-unit id="931a49d01050aa1b2755e3ac6bcc484cb7da972d" translate="yes" xml:space="preserve">
          <source>Warnings dispatched from perl itself (or more accurately, those that match descriptions found in &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;) are only displayed once (no duplicate descriptions). User code generated warnings a la warn() are unaffected, allowing duplicate user messages to be displayed.</source>
          <target state="translated">perl自体（より正確には、&lt;a href=&quot;perldiag&quot;&gt;perldiagにある&lt;/a&gt;説明と一致するもの）からディスパッチされた警告は、一度だけ表示されます（説明の重複はありません）。ユーザーコードが警告を生成し、warn（）は影響を受けないため、重複したユーザーメッセージを表示できます。</target>
        </trans-unit>
        <trans-unit id="e5a6430c53bc65107aa5413603aa9d5ae883fbaa" translate="yes" xml:space="preserve">
          <source>Warnings import function</source>
          <target state="translated">警告のインポート関数</target>
        </trans-unit>
        <trans-unit id="c2ae6895b901f6f499e198f2b33c31bd733ed306" translate="yes" xml:space="preserve">
          <source>Warnings of other C compilers</source>
          <target state="translated">他のCコンパイラの警告</target>
        </trans-unit>
        <trans-unit id="3e543092d93dedef30b6a118c959f36cd73b7b20" translate="yes" xml:space="preserve">
          <source>Warns with &lt;code&gt;@message&lt;/code&gt; but the message will appear to come from the point where the original test function was called (&lt;code&gt;$tb-&amp;gt;caller&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;@message&lt;/code&gt; で警告しますが、メッセージは元のテスト関数が呼び出されたポイント（ &lt;code&gt;$tb-&amp;gt;caller&lt;/code&gt; ）から送信されたように見えます。</target>
        </trans-unit>
        <trans-unit id="d321acbea9d4ab268b54e61d4d0b39001cfb34d4" translate="yes" xml:space="preserve">
          <source>Wayne Thompson</source>
          <target state="translated">ウェイン・トンプソン</target>
        </trans-unit>
        <trans-unit id="43464fb1e06d4c1bc9db7081e9ca038cc1269495" translate="yes" xml:space="preserve">
          <source>We &quot;officially&quot; support the two most recent stable release series. 5.16.x and earlier are now out of support. As of the release of 5.22.0, we will &quot;officially&quot; end support for Perl 5.18.x, other than providing security updates as described below.</source>
          <target state="translated">最新の安定版リリースシリーズ2つを「公式に」サポートしています。5.16.x以前のバージョンはサポートを終了します。5.22.0 のリリースをもって、Perl 5.18.x のサポートを「公式に」終了します。</target>
        </trans-unit>
        <trans-unit id="17a0049b3e8190b56f011a925a65f0578bf35206" translate="yes" xml:space="preserve">
          <source>We already talked about the special &lt;code&gt;@ISA&lt;/code&gt; array and the &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt; pragma.</source>
          <target state="translated">特別な &lt;code&gt;@ISA&lt;/code&gt; 配列と&lt;a href=&quot;parent&quot;&gt;親&lt;/a&gt;プラグマについてはすでに説明しました。</target>
        </trans-unit>
        <trans-unit id="99f6d15ea0dac8c570f259e877f08f9c6317a1cf" translate="yes" xml:space="preserve">
          <source>We also recommend using this method to check whether a module has a sufficient version. The internal implementation uses the &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module to make sure that different types of version numbers are compared correctly.</source>
          <target state="translated">また、このメソッドを使用して、モジュールに十分なバージョンがあるかどうかを確認することをお勧めします。内部実装は&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;モジュールを使用して、異なるタイプのバージョン番号が正しく比較されるようにします。</target>
        </trans-unit>
        <trans-unit id="777641065ef9fefa679b6e058d833646233119c1" translate="yes" xml:space="preserve">
          <source>We are at the end of the regexp, so we are done! We have matched 'abcd' out of the string &quot;abcde&quot;.</source>
          <target state="translated">正規表現が終わったので、これで終了です。文字列 &quot;abcde &quot;のうち'abcd'にマッチしました。</target>
        </trans-unit>
        <trans-unit id="88e6eb598d1ae4c98a1710166c586176804c4ac7" translate="yes" xml:space="preserve">
          <source>We are done!</source>
          <target state="translated">終わった!</target>
        </trans-unit>
        <trans-unit id="b8c42eb02770fa660f067266841b9afabfa1a1c9" translate="yes" xml:space="preserve">
          <source>We are performing only one hash operation in this function, which is storing a new scalar under a key using &lt;code&gt;hv_store&lt;/code&gt; . A hash is represented by an HV* pointer. Like arrays, the functions for manipulating hashes from an XSUB mirror the functionality available from Perl. See &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt; and &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for details.</source>
          <target state="translated">この関数では、 &lt;code&gt;hv_store&lt;/code&gt; を使用してキーの下に新しいスカラーを格納するハッシュ演算を1つだけ実行しています。ハッシュはHV *ポインターで表されます。配列と同様に、XSUBからハッシュを操作するための関数は、Perlから利用可能な機能を反映しています。詳細については&lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;と&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd90ced3661ebd845235cda2b54db721e3957aec" translate="yes" xml:space="preserve">
          <source>We aren't interested in anything returned from</source>
          <target state="translated">から返ってきたものには興味がありません。</target>
        </trans-unit>
        <trans-unit id="b554448ff034d8f0532aebe7287733b598ce6629" translate="yes" xml:space="preserve">
          <source>We aren't passing any parameters to</source>
          <target state="translated">には何のパラメータも渡していません。</target>
        </trans-unit>
        <trans-unit id="4e3a929680591b90a57e354fe70746318049b8f9" translate="yes" xml:space="preserve">
          <source>We build perl using GNU make. We tried the native make once and it worked too.</source>
          <target state="translated">私たちはGNU makeを使ってPerlをビルドしています。一度ネイティブのmakeを試してみましたが、それもうまくいきました。</target>
        </trans-unit>
        <trans-unit id="41071245738df49d45438a45bb484058bfc57858" translate="yes" xml:space="preserve">
          <source>We can also dump out this op: the current op is always stored in &lt;code&gt;PL_op&lt;/code&gt; , and we can dump it with &lt;code&gt;Perl_op_dump&lt;/code&gt; . This'll give us similar output to &lt;a href=&quot;b/debug&quot;&gt;B::Debug&lt;/a&gt;.</source>
          <target state="translated">現在のOPは常にに格納されています。我々はまた、このオペアンプをダンプすることができ &lt;code&gt;PL_op&lt;/code&gt; 、私たちはとそれをダンプすることができ &lt;code&gt;Perl_op_dump&lt;/code&gt; 。これにより、&lt;a href=&quot;b/debug&quot;&gt;B :: Debug&lt;/a&gt;と同様の出力が得られます。</target>
        </trans-unit>
        <trans-unit id="961c3c25dd241cffc69783f122b1016732a7e65b" translate="yes" xml:space="preserve">
          <source>We can also use &lt;code&gt;@&lt;/code&gt; to jump to an offset, with 0 being the position where we were when the last &lt;code&gt;(&lt;/code&gt; was encountered:</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; を使用してオフセットにジャンプすることもできます。0は最後の &lt;code&gt;(&lt;/code&gt; が検出されたときの位置です。</target>
        </trans-unit>
        <trans-unit id="dbea0db461430bae70d9c35bb3e6a3ab77cd3179" translate="yes" xml:space="preserve">
          <source>We can also use a variable to store a reference to the data structure that is being blessed as our object:</source>
          <target state="translated">また、私たちのオブジェクトとして祝福されているデータ構造への参照を格納するために変数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="3ae43a4ae8c47d1af2dad91e0ab8b4c97424cc6a" translate="yes" xml:space="preserve">
          <source>We can also use the transliteration operator, &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt;. In this example, the search list side of our &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; contains nothing, but the &lt;code&gt;c&lt;/code&gt; option complements that so it contains everything. The replacement list also contains nothing, so the transliteration is almost a no-op since it won't do any replacements (or more exactly, replace the character with itself). However, the &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; option squashes duplicated and consecutive characters in the string so a character does not show up next to itself</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 変換演算子tr ///を使用することもできます。この例では、 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; の検索リスト側には何も含まれていませんが、 &lt;code&gt;c&lt;/code&gt; オプションはそれを補完してすべてを含んでいます。置換リストにも何も含まれていないため、文字変換は置換を行わない（正確には文字をそれ自体で置換する）ため、文字変換はほとんど機能しません。ただし、 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; オプションは、文字列内の重複した連続した文字を押しつぶすため、文字が隣に表示されません</target>
        </trans-unit>
        <trans-unit id="8d9637ace5e985325b750e53a0a2e0777af26ff5" translate="yes" xml:space="preserve">
          <source>We can deal with this by using both an assertion and a negation. We'll say that the first part in $1 must be followed both by a digit and by something that's not &quot;123&quot;. Remember that the look-aheads are zero-width expressions--they only look, but don't consume any of the string in their match. So rewriting this way produces what you'd expect; that is, case 5 will fail, but case 6 succeeds:</source>
          <target state="translated">これを処理するには、アサーションとネガティブの両方を使用します。ここでは、$1 の最初の部分の後には、数字と &quot;123&quot; 以外のものを続けなければならないとします。ルックアヘッドはゼロ幅の式であることを覚えておいてください。つまり、ケース 5 は失敗しますが、ケース 6 は成功します。</target>
        </trans-unit>
        <trans-unit id="69e73838de4aed15f5d24b688fd13aef192fb3f9" translate="yes" xml:space="preserve">
          <source>We can extend the example above:</source>
          <target state="translated">上記の例を拡張することができます。</target>
        </trans-unit>
        <trans-unit id="84c843f2491ce2ba91f8ea33bd419c025bcac31f" translate="yes" xml:space="preserve">
          <source>We can manipulate &lt;code&gt;@_&lt;/code&gt; in other ways too:</source>
          <target state="translated">&lt;code&gt;@_&lt;/code&gt; は他の方法でも操作できます。</target>
        </trans-unit>
        <trans-unit id="c8e881a1155e87edea33bdbd7aaa36ea47df11e3" translate="yes" xml:space="preserve">
          <source>We can match different character strings with the &lt;b&gt;alternation&lt;/b&gt; metacharacter &lt;code&gt;'|'&lt;/code&gt; . To match &lt;code&gt;dog&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; , we form the regex &lt;code&gt;dog|cat&lt;/code&gt; . As before, Perl will try to match the regex at the earliest possible point in the string. At each character position, Perl will first try to match the first alternative, &lt;code&gt;dog&lt;/code&gt; . If &lt;code&gt;dog&lt;/code&gt; doesn't match, Perl will then try the next alternative, &lt;code&gt;cat&lt;/code&gt; . If &lt;code&gt;cat&lt;/code&gt; doesn't match either, then the match fails and Perl moves to the next position in the string. Some examples:</source>
          <target state="translated">さまざまな文字列を&lt;b&gt;代替&lt;/b&gt;メタ文字 &lt;code&gt;'|'&lt;/code&gt; 照合できます 。 &lt;code&gt;dog&lt;/code&gt; または &lt;code&gt;cat&lt;/code&gt; に一致させるために、正規表現 &lt;code&gt;dog|cat&lt;/code&gt; ます。以前と同様に、Perlは文字列の可能な限り早い時点で正規表現に一致しようとします。各文字の位置で、Perlは最初の代替である &lt;code&gt;dog&lt;/code&gt; を最初に照合しようとします。 &lt;code&gt;dog&lt;/code&gt; が一致しない場合、Perlは次の代替である &lt;code&gt;cat&lt;/code&gt; を試行します。 &lt;code&gt;cat&lt;/code&gt; も一致しない場合、一致は失敗し、Perlは文字列の次の位置に移動します。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="ea854225fefa1280a29795bb4f271d273dbd77b0" translate="yes" xml:space="preserve">
          <source>We can modify principle 3 above to take into account non-greedy quantifiers:</source>
          <target state="translated">上の原則3を修正して、非greedyな量詞を考慮に入れることができます。</target>
        </trans-unit>
        <trans-unit id="ab79fcd6910e13f271bf0f10b6fac2de440cb105" translate="yes" xml:space="preserve">
          <source>We can now use &lt;code&gt;Perl_sv_dump&lt;/code&gt; to investigate the SV:</source>
          <target state="translated">これで、 &lt;code&gt;Perl_sv_dump&lt;/code&gt; を使用してSVを調査できます。</target>
        </trans-unit>
        <trans-unit id="9e3ffbb12768a148e4cd9144c59ebb38f57598ff" translate="yes" xml:space="preserve">
          <source>We can override a parent's method in a child class. When we do so, we can still call the parent class's method with the &lt;code&gt;SUPER&lt;/code&gt; pseudo-class.</source>
          <target state="translated">子クラスで親のメソッドをオーバーライドできます。その場合でも、 &lt;code&gt;SUPER&lt;/code&gt; 疑似クラスを使用して親クラスのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2754e3aa57380296cb4f092e33ffe2f92fac593d" translate="yes" xml:space="preserve">
          <source>We can put another break point on any line beginning with a colon, we'll use line 17 as that's just as we come out of the subroutine, and we'd like to pause there later on:</source>
          <target state="translated">コロンで始まる任意の行に別のブレークポイントを置くことができます。17行目はサブルーチンから出てきたところなので、ここで一時停止したいと思います。</target>
        </trans-unit>
        <trans-unit id="8aece3bd543cbe6fe75eaf5ad6965a489841cbb4" translate="yes" xml:space="preserve">
          <source>We can put that into a test file which we can run to check which approach is the fastest, using a global &lt;code&gt;$STR&lt;/code&gt; variable to assign to the &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $str&lt;/code&gt; variable so as to avoid perl trying to optimize any of the work away by noticing it's assigned only the once.</source>
          <target state="translated">これをテストファイルに入れて、どのアプローチが最速かを確認するために実行できます。グローバル &lt;code&gt;$STR&lt;/code&gt; 変数を使用して &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $str&lt;/code&gt; 変数に割り当て、perlがそれに気付くことで作業を最適化しようとしないようにします。一度だけ割り当てられます。</target>
        </trans-unit>
        <trans-unit id="192c194669c26df922a17b7997201101414dafec" translate="yes" xml:space="preserve">
          <source>We can reduce some of the looping through slices</source>
          <target state="translated">スライスを介したループの一部を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="393d2cf123dc0cecdbadd1ca8c26943dc464db54" translate="yes" xml:space="preserve">
          <source>We could get more fancy in the &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; block though. Instead of comparing the keys, we can compute a value with them and use that value as the comparison.</source>
          <target state="translated">しかし、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; ブロックでもっと凝ったものにすることができます。キーを比較する代わりに、キーを使用して値を計算し、その値を比較として使用できます。</target>
        </trans-unit>
        <trans-unit id="373abf531902aa68eac45baf244872a1e2626f66" translate="yes" xml:space="preserve">
          <source>We could have both classes inherit from a common parent, like &lt;code&gt;Machine&lt;/code&gt; , but not all machines have on/off switches. We could create a parent class called &lt;code&gt;HasOnOffSwitch&lt;/code&gt; , but that is very artificial. Radios and computers are not specializations of this parent. This parent is really a rather ridiculous creation.</source>
          <target state="translated">&lt;code&gt;Machine&lt;/code&gt; のような共通の親から両方のクラスを継承させることもできますが、すべてのマシンにオン/オフスイッチがあるわけではありません。 &lt;code&gt;HasOnOffSwitch&lt;/code&gt; と呼ばれる親クラスを作成することもできますが、それは非常に人工的なものです。ラジオとコンピューターは、この親の専門分野ではありません。この親は実際にはかなりばかげた創造物です。</target>
        </trans-unit>
        <trans-unit id="23ce6432aa57322234fa603b7b093664929a40c6" translate="yes" xml:space="preserve">
          <source>We could have used an unpack template &lt;code&gt;'b12'&lt;/code&gt; just as well, since the last 4 bits can be ignored anyway.</source>
          <target state="translated">最後の4ビットはとにかく無視できるため、アンパックテンプレート &lt;code&gt;'b12'&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="737f5642c49143f79a5e632705526d6d3453018c" translate="yes" xml:space="preserve">
          <source>We do this by using the PPCODE: directive, rather than the CODE: directive. This tells &lt;b&gt;xsubpp&lt;/b&gt; that we will be managing the return values that will be put on the argument stack by ourselves.</source>
          <target state="translated">これを行うには、CODE：ディレクティブではなく、PPCODE：ディレクティブを使用します。これは、引数スタックに自分で置く戻り値を管理することを&lt;b&gt;xsubppに&lt;/b&gt;伝えます。</target>
        </trans-unit>
        <trans-unit id="bbf4d60422d93cc3418f9928672ab7a165e0c448" translate="yes" xml:space="preserve">
          <source>We don't have much experience with this yet, but try the following:</source>
          <target state="translated">まだあまり経験がありませんが、以下のようにしてみてください。</target>
        </trans-unit>
        <trans-unit id="3714a8cbbcb3d8e34c4cf78e7eb46446670ccdf4" translate="yes" xml:space="preserve">
          <source>We don't have to hard-code patterns into the match operator (or anything else that works with regular expressions). We can put the pattern in a variable for later use.</source>
          <target state="translated">マッチ演算子にパターンをハードコーディングする必要はありません (正規表現で動作する他の何か)。パターンを変数に入れておけば、後で使えるようになります。</target>
        </trans-unit>
        <trans-unit id="9b9b047b90e6f20cc1587612f1c7f873786eee50" translate="yes" xml:space="preserve">
          <source>We encourage using this rather than calling print directly.</source>
          <target state="translated">プリントに直接電話するのではなく、こちらを利用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7ef0cc263f45630948ec977db18c296d89495351" translate="yes" xml:space="preserve">
          <source>We encourage vendors to ship the most recent supported release of Perl at the time of their code freeze.</source>
          <target state="translated">私たちは、ベンダーに、Perlの最新のサポートされているリリースをコードフリーズ時に出荷することを奨励しています。</target>
        </trans-unit>
        <trans-unit id="dd33c6dcc68f66e550d47a04957cd34a37a4f9d0" translate="yes" xml:space="preserve">
          <source>We encourage you to play with and evaluate &lt;a href=&quot;http://search.cpan.org/perldoc/Moose&quot;&gt;Moose&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class::Accessor&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class::Tiny&lt;/a&gt; to see which OO system is right for you.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Moose&quot;&gt;Moose&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Accessor&quot;&gt;Class :: Accessor&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny&quot;&gt;Class :: Tiny&lt;/a&gt;を試して評価し、どのOOシステムが適しているかを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a75ee8e59a59e98ee82483d5a167a8e74430cf9d" translate="yes" xml:space="preserve">
          <source>We fix our quoting: 'tom' =&amp;gt; q(and jerry), and run it again, this time we get our expected output:</source>
          <target state="translated">引用を修正します： 'tom' =&amp;gt; q（およびjerry）、もう一度実行します。今回は期待される出力が得られます。</target>
        </trans-unit>
        <trans-unit id="ad7822a7bc01015524040b6228bd7a714fe0ea5e" translate="yes" xml:space="preserve">
          <source>We have already introduced the matching operator in its default &lt;code&gt;/regexp/&lt;/code&gt; and arbitrary delimiter &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m!regexp!&lt;/a&gt;&lt;/code&gt; forms. We have used the binding operator &lt;code&gt;=~&lt;/code&gt; and its negation &lt;code&gt;!~&lt;/code&gt; to test for string matches. Associated with the matching operator, we have discussed the single line &lt;code&gt;//s&lt;/code&gt; , multi-line &lt;code&gt;//m&lt;/code&gt; , case-insensitive &lt;code&gt;//i&lt;/code&gt; and extended &lt;code&gt;//x&lt;/code&gt; modifiers. There are a few more things you might want to know about matching operators.</source>
          <target state="translated">デフォルトの &lt;code&gt;/regexp/&lt;/code&gt; および任意の区切り文字 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m!regexp!&lt;/a&gt;&lt;/code&gt; に一致する演算子がすでに導入されています。フォーム。バインディング演算子 &lt;code&gt;=~&lt;/code&gt; とその否定 &lt;code&gt;!~&lt;/code&gt; を使用して、文字列の一致をテストしました。マッチング演算子に関連して、単一行 &lt;code&gt;//s&lt;/code&gt; 、複数行 &lt;code&gt;//m&lt;/code&gt; 、大文字小文字を区別しない &lt;code&gt;//i&lt;/code&gt; および拡張 &lt;code&gt;//x&lt;/code&gt; 修飾子について説明しました。一致する演算子について知りたいことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="6e2bfdcf3348ad31286e830869ab5ab9cf57a976" translate="yes" xml:space="preserve">
          <source>We have no nroff on BS2000 POSIX (yet), so we ignored any errors while installing the documentation.</source>
          <target state="translated">BS2000 POSIXのnroffがない(まだ)ので、ドキュメントインストール中のエラーは無視しています。</target>
        </trans-unit>
        <trans-unit id="c5a4c49687cb5b4e725178b1ad770374684a7f19" translate="yes" xml:space="preserve">
          <source>We have to use a &lt;code&gt;CODE&lt;/code&gt; section because &lt;code&gt;PerlIO_puts()&lt;/code&gt; has the arguments reversed compared to &lt;code&gt;fputs()&lt;/code&gt; , and we want to keep the arguments the same.</source>
          <target state="translated">&lt;code&gt;PerlIO_puts()&lt;/code&gt; の引数は &lt;code&gt;fputs()&lt;/code&gt; とは逆になっているため、 &lt;code&gt;CODE&lt;/code&gt; セクションを使用する必要があり、引数を同じに保ちたいと考えています。</target>
        </trans-unit>
        <trans-unit id="4a78632eb571a6503bee4006e791fffefd6cf4ab" translate="yes" xml:space="preserve">
          <source>We have tried to make Perl aware of both VMS-style and Unix-style file specifications wherever possible. You may use either style, or both, on the command line and in scripts, but you may not combine the two styles within a single file specification. VMS Perl interprets Unix pathnames in much the same way as the CRTL (</source>
          <target state="translated">可能な限り、Perl が VMS スタイルと Unix スタイルの両方のファイル仕様を認識できるようにしています。コマンドラインやスクリプトの中では、どちらかのスタイル、または両方を使用することができますが、一つのファイル指定の中で二つのスタイルを組み合わせることはできません。VMS Perl は Unix パス名を CRTL (</target>
        </trans-unit>
        <trans-unit id="78dd390dcc77c45fe1854b3e48358f0f7f0c1ae7" translate="yes" xml:space="preserve">
          <source>We highly discourage this method. It should only be used if you know what you're doing and specifically need the PREFIX behavior. The PREFIX algorithm is complicated and focused on matching the system installation.</source>
          <target state="translated">この方法は強くお勧めしません。何をしているか分かっていて、特にPREFIXの動作が必要な場合にのみ使用すべきです。PREFIXアルゴリズムは複雑で、システムのインストールとのマッチングに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="0d078f205cc7733f26f4527b8b9a508a7c925969" translate="yes" xml:space="preserve">
          <source>We highly recommend the install_base method, its the simplest and most closely approximates the expected behavior of an installation prefix.</source>
          <target state="translated">install_base メソッドを強く推奨します。これは最もシンプルで、インストールプレフィックスの期待される動作に最も近いものです。</target>
        </trans-unit>
        <trans-unit id="cf829d6773d2acaf89ace4612301d748f71133de" translate="yes" xml:space="preserve">
          <source>We hope these notes will save you from confusion and lost sleep when writing Perl scripts on VMS. If you find we've missed something you think should appear here, please don't hesitate to drop a line to vmsperl@perl.org.</source>
          <target state="translated">これらの注意事項が、VMS上でPerlスクリプトを書く際の混乱や睡眠不足からあなたを救ってくれることを願っています。ここに掲載すべきだと思われるものを見落としていると思われる場合は、遠慮なく vmsperl@perl.org までご連絡ください。</target>
        </trans-unit>
        <trans-unit id="c62eabab19d963ec1dc9f96b723cb4b48b7d1ebd" translate="yes" xml:space="preserve">
          <source>We implement our own glob-style pattern matching for --rules. Here are the supported patterns:</source>
          <target state="translated">ルールに対して独自のグロブ・スタイルのパターン・マッチングを実装しています。サポートされているパターンは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f3c2a6f9803dfeb38af1055d966366fc67acbab0" translate="yes" xml:space="preserve">
          <source>We implement our own glob-style pattern matching. Here are the patterns it supports:</source>
          <target state="translated">独自の glob スタイルのパターン・マッチングを実装しています。サポートしているパターンは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="821afd715774631771e27078ffd6e046b44c39d8" translate="yes" xml:space="preserve">
          <source>We know we're going to get &lt;code&gt;6&lt;/code&gt; from this, so let's finish the subroutine:</source>
          <target state="translated">これから &lt;code&gt;6&lt;/code&gt; を取得することがわかっているので、サブルーチンを終了しましょう。</target>
        </trans-unit>
        <trans-unit id="56ac7541ed28a7466aa3352e9da342249eeae09f" translate="yes" xml:space="preserve">
          <source>We looked at this bit of code before, and we said that &lt;code&gt;dPOPTOPnnrl_ul&lt;/code&gt; arranges for two &lt;code&gt;NV&lt;/code&gt; s to be placed into &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; - let's slightly expand it:</source>
          <target state="translated">私たちは前にコードのこのビットを見て、私たちは、と言っ &lt;code&gt;dPOPTOPnnrl_ul&lt;/code&gt; の 2のために並べ &lt;code&gt;NV&lt;/code&gt; sがに配置されるように &lt;code&gt;left&lt;/code&gt; と &lt;code&gt;right&lt;/code&gt; -少しそれを拡張してみましょう：</target>
        </trans-unit>
        <trans-unit id="bf8f7ecbf0eb0e715d021c51919b36afbf4f3b1d" translate="yes" xml:space="preserve">
          <source>We maintain the binary incompatibility.</source>
          <target state="translated">バイナリの非互換性を維持しています。</target>
        </trans-unit>
        <trans-unit id="0fd132a408c3e7900b7667b28ffdaffdc2cfda3e" translate="yes" xml:space="preserve">
          <source>We manipulate several arrays in this XSUB. Note that an array is represented internally by an AV* pointer. The functions and macros for manipulating arrays are similar to the functions in Perl: &lt;code&gt;av_top_index&lt;/code&gt; returns the highest index in an AV*, much like $#array; &lt;code&gt;av_fetch&lt;/code&gt; fetches a single scalar value from an array, given its index; &lt;code&gt;av_push&lt;/code&gt; pushes a scalar value onto the end of the array, automatically extending the array as necessary.</source>
          <target state="translated">このXSUBでいくつかの配列を操作します。配列は、AV *ポインターによって内部的に表現されることに注意してください。配列を操作するための関数とマクロは、Perlの関数に似ています &lt;code&gt;av_top_index&lt;/code&gt; は、$＃arrayのように、AV *の最高のインデックスを返します。 &lt;code&gt;av_fetch&lt;/code&gt; は、そのインデックスを指定して、配列から単一のスカラー値をフェッチします。 &lt;code&gt;av_push&lt;/code&gt; はスカラー値を配列の最後にプッシュし、必要に応じて配列を自動的に拡張します。</target>
        </trans-unit>
        <trans-unit id="6201b3e74828151a0b8123986740745576c51a04" translate="yes" xml:space="preserve">
          <source>We may change it so that things that remain legal uses in normal bracketed character classes might become illegal within this experimental construct. One proposal, for example, is to forbid adjacent uses of the same character, as in &lt;code&gt;(?[ [aa] ])&lt;/code&gt; . The motivation for such a change is that this usage is likely a typo, as the second &quot;a&quot; adds nothing.</source>
          <target state="translated">通常の括弧で囲まれた文字クラスで正当に使用されているものは、この実験的構成要素内で違法になるように変更する場合があります。たとえば、 &lt;code&gt;(?[ [aa] ])&lt;/code&gt; ように、同じ文字の隣接する使用を禁止するという提案があります。そのような変更の動機は、2番目の「a」が何も追加しないため、この使用法はおそらくタイプミスであるということです。</target>
        </trans-unit>
        <trans-unit id="9d8db65a7f163486a998a7bf47269c4123bd2dc9" translate="yes" xml:space="preserve">
          <source>We mentioned earlier that most Perl objects are implemented as hashes under the hood. The principle of encapsulation tells us that we should not rely on this. Instead, we should use accessor methods to access the data in that hash. The object systems that we recommend below all automate the generation of accessor methods. If you use one of them, you should never have to access the object as a hash directly.</source>
          <target state="translated">先ほど、Perl のオブジェクトのほとんどがハッシュとして実装されていることを述べました。カプセル化の原理は、これに頼るべきではないことを教えてくれます。その代わりに、そのハッシュ内のデータにアクセスするためにアクセサメソッドを使うべきです。以下で推奨するオブジェクトシステムはすべてアクセサメソッドの生成を自動化しています。それらのうちのどれかを使えば、ハッシュとしてのオブジェクトに直接アクセスする必要はありません。</target>
        </trans-unit>
        <trans-unit id="fd2e3b2237cf2c9ebd6d21ee18dff2f93d4edaee" translate="yes" xml:space="preserve">
          <source>We mentioned multiple inheritance earlier. The main problem with multiple inheritance is that it greatly complicates method resolution. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt; for more details.</source>
          <target state="translated">多重継承については前述しました。多重継承の主な問題は、メソッドの解決が非常に複雑になることです。詳細については、&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="05de83678232988de23cc08caee2a559bec4d96c" translate="yes" xml:space="preserve">
          <source>We must know how much to read.</source>
          <target state="translated">どれだけ読まれているかを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="786b499d8e7780442a91c12acac79f0bab40bb9c" translate="yes" xml:space="preserve">
          <source>We now compile up Perl, and run it through the test suite. Our new tests pass, hooray!</source>
          <target state="translated">今、Perlをコンパイルして、テストスイートを通して実行します。新しいテストは合格しました。</target>
        </trans-unit>
        <trans-unit id="885cb8f93d773c304687f5c7d8f7995e03fd1f70" translate="yes" xml:space="preserve">
          <source>We now know how to create choices among classes of characters in a regexp. What about choices among words or character strings? Such choices are described in the next section.</source>
          <target state="translated">正規表現で文字のクラス間の選択肢を作成する方法がわかりました。単語や文字列の選択肢はどうでしょうか?そのような選択肢については次の節で説明します。</target>
        </trans-unit>
        <trans-unit id="68e3b46c3317fe81b8a4f43f4375d9dc3eef2342" translate="yes" xml:space="preserve">
          <source>We often refer to inheritance relationships as &lt;b&gt;parent-child&lt;/b&gt; or &lt;code&gt;superclass/subclass&lt;/code&gt; relationships. Sometimes we say that the child has an &lt;b&gt;is-a&lt;/b&gt; relationship with its parent class.</source>
          <target state="translated">継承関係は、&lt;b&gt;親子&lt;/b&gt;関係または &lt;code&gt;superclass/subclass&lt;/code&gt; 関係と呼ばれることがよくあります。ときどき、子供は親クラスと&lt;b&gt;is-a&lt;/b&gt;関係にあると言います。</target>
        </trans-unit>
        <trans-unit id="37fd14d3b6f6bb386e0f6cc77e29f8b6538c7a73" translate="yes" xml:space="preserve">
          <source>We recognize that the Perl core, defined as the software distributed with the heart of Perl itself, is a joint project on the part of all of us. From time to time, a script, module, or set of modules (hereafter referred to simply as a &quot;module&quot;) will prove so widely useful and/or so integral to the correct functioning of Perl itself that it should be distributed with the Perl core. This should never be done without the author's explicit consent, and a clear recognition on all parts that this means the module is being distributed under the same terms as Perl itself. A module author should realize that inclusion of a module into the Perl core will necessarily mean some loss of control over it, since changes may occasionally have to be made on short notice or for consistency with the rest of Perl.</source>
          <target state="translated">私たちは、Perlコア(Perlの心臓部と一緒に配布されるソフトウェアとして定義されています)は、私たち全員の共同プロジェクトであることを認識しています。時折、スクリプト、モジュール、またはモジュールのセット(以下、単に「モジュール」と呼ぶ)が、Perlの正しい機能に不可欠であることが証明され、Perlコアと一緒に配布されるべきであることがあります。これは、作者の明示的な同意なしには決して行われるべきではありませんし、これはモジュールが Perl 自体と同じ条件で配布されていることを意味することをすべての部分で明確に認識してください。モジュールの作者は、モジュールを Perl コアに含めるということは、必然的にそれに対する制御を失うことを意味することを理解すべきです。</target>
        </trans-unit>
        <trans-unit id="adbff354730155d973632a844ddac8001f83317b" translate="yes" xml:space="preserve">
          <source>We recommend InfoZIP: &lt;a href=&quot;http://www.info-zip.org/Zip.html&quot;&gt;http://www.info-zip.org/Zip.html&lt;/a&gt;</source>
          <target state="translated">InfoZIPをお勧めします：&lt;a href=&quot;http://www.info-zip.org/Zip.html&quot;&gt;http&lt;/a&gt; : //www.info-zip.org/Zip.html</target>
        </trans-unit>
        <trans-unit id="4f1a977094921f3a67ec1b5d153f5c0398eec08d" translate="yes" xml:space="preserve">
          <source>We recommend ptar from Archive::Tar not older than 1.66 with '-C' option.</source>
          <target state="translated">1.66 よりも古くない Archive::Tar の ptar を、'-C' オプションをつけて使うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="cbe1fc263dadb40ca151eed92966c9248a04de8d" translate="yes" xml:space="preserve">
          <source>We recommend that you avoid this syntax, for several reasons.</source>
          <target state="translated">いくつかの理由から、この構文は避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="579e792fc6edac0deca16c23591b561128b4c15e" translate="yes" xml:space="preserve">
          <source>We recommend that you only access attributes via &lt;b&gt;accessor&lt;/b&gt; methods. These are methods that can get or set the value of each attribute. We saw this earlier in the &lt;code&gt;print_info()&lt;/code&gt; example, which calls &lt;code&gt;$self-&amp;gt;path&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;アクセサ&lt;/b&gt;メソッドを介してのみ属性にアクセスすることをお勧めします。これらは、各属性の値を取得または設定できるメソッドです。これは、 &lt;code&gt;print_info()&lt;/code&gt; &lt;code&gt;$self-&amp;gt;path&lt;/code&gt; を呼び出すprint_info（）の例で前に見ました。</target>
        </trans-unit>
        <trans-unit id="3cd090bb786563ac9394aa0d7f58e631fb54d86e" translate="yes" xml:space="preserve">
          <source>We recommend that you use this method to access another package's version, rather than looking directly at &lt;code&gt;$Package::VERSION&lt;/code&gt; . The package you are looking at could have overridden the &lt;code&gt;VERSION&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;$Package::VERSION&lt;/code&gt; を直接見るのではなく、このメソッドを使用して別のパッケージのバージョンにアクセスすることをお勧めします。表示しているパッケージが &lt;code&gt;VERSION&lt;/code&gt; メソッドをオーバーライドした可能性があります。</target>
        </trans-unit>
        <trans-unit id="3584759389d1a5c9463e1916b5f8cba299128724" translate="yes" xml:space="preserve">
          <source>We said that references spring into existence as necessary if they are undefined, but we didn't say what happens if a value used as a reference is already defined, but</source>
          <target state="translated">参照が未定義であれば必要に応じて参照が存在するようになると言いましたが、参照として使われる値が既に定義されている場合はどうなるのかは言いませんでした。</target>
        </trans-unit>
        <trans-unit id="f1e706dab14e9082a067c69407d520e37d14c840" translate="yes" xml:space="preserve">
          <source>We saw in the section above that there were ordinary characters, which represented themselves, and special characters, which needed a backslash &lt;code&gt;\&lt;/code&gt; to represent themselves. The same is true in a character class, but the sets of ordinary and special characters inside a character class are different than those outside a character class. The special characters for a character class are &lt;code&gt;-]\^$&lt;/code&gt; (and the pattern delimiter, whatever it is). &lt;code&gt;]&lt;/code&gt; is special because it denotes the end of a character class. &lt;code&gt;$&lt;/code&gt; is special because it denotes a scalar variable. &lt;code&gt;\&lt;/code&gt; is special because it is used in escape sequences, just like above. Here is how the special characters &lt;code&gt;]$\&lt;/code&gt; are handled:</source>
          <target state="translated">上記のセクションで、自分を表す通常の文字と、自分を表すためにバックスラッシュ &lt;code&gt;\&lt;/code&gt; を必要とする特殊文字があることがわかりました。同じことが文字クラスにも当てはまりますが、文字クラス内の通常文字と特殊文字のセットは、文字クラス外のものとは異なります。文字クラスの特殊文字は &lt;code&gt;-]\^$&lt;/code&gt; （およびパターン区切り文字、それが何であれ）です。 &lt;code&gt;]&lt;/code&gt; は、文字クラスの終わりを示すため、特別です。 &lt;code&gt;$&lt;/code&gt; はスカラー変数を表すため、特別です。 &lt;code&gt;\&lt;/code&gt; は、上記と同様にエスケープシーケンスで使用されるため、特別です。特殊文字 &lt;code&gt;]$\&lt;/code&gt; 処理方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="91ab61be245cfbe060001be5799707fcb012f47d" translate="yes" xml:space="preserve">
          <source>We saw that the norm of &lt;code&gt;z&lt;/code&gt; was noted &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs(z)&lt;/a&gt;&lt;/code&gt; and was defined as the distance to the origin, also known as:</source>
          <target state="translated">&lt;code&gt;z&lt;/code&gt; のノルムは &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs(z)&lt;/a&gt;&lt;/code&gt; で示され、原点までの距離として定義されていることがわかりました。</target>
        </trans-unit>
        <trans-unit id="08920844359a9b99eec6c4ed6a36e0f532af1cca" translate="yes" xml:space="preserve">
          <source>We show the &quot;put&quot; form of the accessors below (i.e., the syntax you use for setting the accessor to a specific value). But you can also call each method with no parameters to get its current value. For example, &lt;code&gt;$self-&amp;gt;contents_file()&lt;/code&gt; returns the current value of the contents_file attribute.</source>
          <target state="translated">アクセサーの「プット」フォームを以下に示します（つまり、アクセサーを特定の値に設定するために使用する構文）。ただし、パラメーターなしで各メソッドを呼び出して、現在の値を取得することもできます。たとえば、 &lt;code&gt;$self-&amp;gt;contents_file()&lt;/code&gt; は、contents_file属性の現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="d711adc8921158fc2754824f56564036d9f3cc37" translate="yes" xml:space="preserve">
          <source>We specify a local port in the &lt;code&gt;LocalPort&lt;/code&gt; argument, which we didn't do for the client. This is service name or port number for which you want to be the server. (Under Unix, ports under 1024 are restricted to the superuser.) In our sample, we'll use port 9000, but you can use any port that's not currently in use on your system. If you try to use one already in used, you'll get an &quot;Address already in use&quot; message. Under Unix, the &lt;code&gt;netstat -a&lt;/code&gt; command will show which services current have servers.</source>
          <target state="translated">&lt;code&gt;LocalPort&lt;/code&gt; 引数でローカルポートを指定しますが、クライアントでは指定していません。これは、サーバーになりたいサービス名またはポート番号です。（Unixでは、1024未満のポートはスーパーユーザーに制限されています。）このサンプルでは、​​ポート9000を使用しますが、システムで現在使用されていない任意のポートを使用できます。すでに使用されているアドレスを使用しようとすると、「アドレスはすでに使用されています」というメッセージが表示されます。Unixでは、 &lt;code&gt;netstat -a&lt;/code&gt; コマンドを実行すると、現在サーバーにあるサービスが表示されます。</target>
        </trans-unit>
        <trans-unit id="d2e82c57891dd489170077bbfa6bd5d7eef124d7" translate="yes" xml:space="preserve">
          <source>We still got a few errors during &lt;code&gt;make test&lt;/code&gt; . Some of them are the result of using bison. Bison prints</source>
          <target state="translated">&lt;code&gt;make test&lt;/code&gt; 中にまだいくつかのエラーが発生しました。それらのいくつかはバイソンを使用した結果です。バイソンプリント</target>
        </trans-unit>
        <trans-unit id="5d27fd099f66e666f815d6a063eb846b9d1e750a" translate="yes" xml:space="preserve">
          <source>We still use the normal yacc for a2p.y though!!! We made a softlink called byacc to distinguish between the two versions:</source>
          <target state="translated">しかし、a2p.yにはまだ通常のyaccを使っています! この2つのバージョンを区別するために、byaccというソフトリンクを作りました。</target>
        </trans-unit>
        <trans-unit id="f7a01cac535c65877c2cb721bb86383129124455" translate="yes" xml:space="preserve">
          <source>We strongly recommend that you use git if possible. It will make your life easier, and ours as well.</source>
          <target state="translated">可能であれば git を使うことを強くお勧めします。そうすることで、あなたの生活が楽になりますし、私たちの生活も楽になります。</target>
        </trans-unit>
        <trans-unit id="c1224f92134a2160e75f8a1e63e0730529cc456d" translate="yes" xml:space="preserve">
          <source>We strongly recommend that you use one of these systems. Even the most minimal of them eliminates a lot of repetitive boilerplate. There's really no good reason to write your classes from scratch in Perl.</source>
          <target state="translated">いずれかのシステムを利用することを強くお勧めします。最小限のものであっても、反復的なボイラプレートの多くを排除することができます。Perlでゼロからクラスを書くことには、本当に良い理由はありません。</target>
        </trans-unit>
        <trans-unit id="5f4fa8e578a8c0a7391c3d072ae8a1a053f0a384" translate="yes" xml:space="preserve">
          <source>We tend to avoid this term because it means so many things. It may mean a command-line &lt;b&gt;switch&lt;/b&gt; that takes no argument itself (such as Perl&amp;rsquo;s &lt;code&gt;&amp;ndash;n&lt;/code&gt; and &lt;code&gt;&amp;ndash;p&lt;/code&gt; flags) or, less frequently, a single-bit indicator (such as the &lt;code&gt;O_CREAT&lt;/code&gt; and &lt;code&gt;O_EXCL&lt;/code&gt; flags used in &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;). Sometimes informally used to refer to certain regex modifiers.</source>
          <target state="translated">多くのことを意味するため、この用語は避ける傾向があります。それ自体は引数をとらないコマンドライン&lt;b&gt;スイッチ&lt;/b&gt;（Perlの &lt;code&gt;&amp;ndash;n&lt;/code&gt; フラグや &lt;code&gt;&amp;ndash;p&lt;/code&gt; フラグなど）、または頻度は低いものの、シングルビットインジケーター（ &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; で使用される &lt;code&gt;O_CREAT&lt;/code&gt; および &lt;code&gt;O_EXCL&lt;/code&gt; フラグなど）を意味する場合があります。非公式に特定の正規表現修飾子を参照するために使用されることもあります。</target>
        </trans-unit>
        <trans-unit id="8a3b4e98c264bb32d9998c5d96e9cb12719e9b31" translate="yes" xml:space="preserve">
          <source>We then do (always a good idea) a syntax check before we try to run it again:</source>
          <target state="translated">そして、再度実行する前に構文チェックを行います(常に良いアイデアです)。</target>
        </trans-unit>
        <trans-unit id="a54d539385035f7d9714e68587e437b9e809a0a4" translate="yes" xml:space="preserve">
          <source>We use the term &quot;nearly&quot;, because &lt;code&gt;:not_characters&lt;/code&gt; also turns on &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; within its scope. This form is less useful in v5.20 and later, and is described fully in &lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;Unicode and UTF-8&lt;/a&gt;, but briefly, it tells Perl to not use the character portions of the locale definition, that is the &lt;code&gt;LC_CTYPE&lt;/code&gt; and &lt;code&gt;LC_COLLATE&lt;/code&gt; categories. Instead it will use the native character set (extended by Unicode). When using this parameter, you are responsible for getting the external character set translated into the native/Unicode one (which it already will be if it is one of the increasingly popular UTF-8 locales). There are convenient ways of doing this, as described in &lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;Unicode and UTF-8&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;:not_characters&lt;/code&gt; もその範囲内で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用を&lt;/a&gt;オンにするため、「ほぼ」という用語を使用します。この形式はv5.20以降ではあまり役に立たず、&lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;UnicodeおよびUTF-8&lt;/a&gt;で完全に説明されていますが、簡単に言うと、ロケール定義の文字部分、つまり &lt;code&gt;LC_CTYPE&lt;/code&gt; および &lt;code&gt;LC_COLLATE&lt;/code&gt; カテゴリーを使用しないようにPerlに指示します。代わりに、（Unicodeで拡張された）ネイティブ文字セットを使用します。このパラメーターを使用する場合、外部文字セットをネイティブ/ Unicode文字セットに変換する必要があります（これは、ますます人気のあるUTF-8ロケールの1つである場合は、すでにそうなっています）。&lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;UnicodeとUTF-8で&lt;/a&gt;説明されているように、これを行うには便利な方法があります。。</target>
        </trans-unit>
        <trans-unit id="d72bbd81e111127cc31735e5170b3d3ebdc6c5df" translate="yes" xml:space="preserve">
          <source>We used version 1.2.4, which could be installed out of the box with one failure during 'make check'.</source>
          <target state="translated">バージョン1.2.4を使用していましたが、「make check」の際に1回失敗してもアウトでインストールできるようになりました。</target>
        </trans-unit>
        <trans-unit id="aff45f6c939582aab469b75158efc5869d3a2fcf" translate="yes" xml:space="preserve">
          <source>We want to be able to catch the</source>
          <target state="translated">をキャッチできるようにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="da129d4b3f31bc7e0cab0dd659997b6d3ef9282c" translate="yes" xml:space="preserve">
          <source>We want to ensure that Perl continues to grow and flourish in the coming years and decades, but not at the expense of our user community.</source>
          <target state="translated">私たちは、Perlが今後何年も何十年も成長し続け、繁栄し続けるようにしたいと考えていますが、ユーザコミュニティを犠牲にしてまでPerlを成長させたいわけではありません。</target>
        </trans-unit>
        <trans-unit id="7602b11fb920ddd30994aa4313930abda93469a9" translate="yes" xml:space="preserve">
          <source>We wanted list context, so G_ARRAY was used.</source>
          <target state="translated">リストコンテキストが欲しかったので、G_ARRAYを使用しました。</target>
        </trans-unit>
        <trans-unit id="3134ffe8598077df7a151748c12e387529c7d2bc" translate="yes" xml:space="preserve">
          <source>We will be calling the test script through the command &quot;&lt;code&gt;make test&lt;/code&gt; &quot;. You should see output that looks something like this:</source>
          <target state="translated">「 &lt;code&gt;make test&lt;/code&gt; 」コマンドを使用してテストスクリプトを呼び出します。次のような出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="0a6f3f09fa5bfb41f8f72f761c01531e59969f1d" translate="yes" xml:space="preserve">
          <source>We will not provide security updates or bug fixes for development releases of Perl.</source>
          <target state="translated">Perl の開発リリースのセキュリティアップデートやバグフィックスは提供しません。</target>
        </trans-unit>
        <trans-unit id="788212053c8b040e14cd53eba253eacd9f8cbdce" translate="yes" xml:space="preserve">
          <source>We will now create the main top-level Mytest2 files. Change to the directory above Mytest2 and run the following command:</source>
          <target state="translated">ここでは、メインとなるトップレベルのMytest2ファイルを作成します。Mytest2の上のディレクトリに変更して、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="d22caa360403eba16e21b51e9ea68e688fb5cc28" translate="yes" xml:space="preserve">
          <source>We would all love to unmake some mistakes we've made over the past decades. Living with every design error we've ever made can lead to painful stagnation. Unwinding our mistakes is very, very difficult. Doing so without actively harming our users is nearly impossible.</source>
          <target state="translated">過去数十年の間に犯してしまった失敗を、私たちは誰でも取り返したいと思うものです。これまでに犯してきたデザインの失敗をそのままにしていると、痛みを伴う停滞に陥ることがあります。間違いを解きほぐすことは、とても難しいことです。ユーザーに積極的に害を与えないようにすることは、ほぼ不可能です。</target>
        </trans-unit>
        <trans-unit id="461ccef8111ec963260713b6b25723c4d738d9a8" translate="yes" xml:space="preserve">
          <source>We'll come back to this city-country problem later, after we've seen some syntax for managing references.</source>
          <target state="translated">参照を管理するための構文をいくつか見た後、後でこの都市国家の問題に戻ってきます。</target>
        </trans-unit>
        <trans-unit id="7cbf9f8ec2dcbf019622a935f28d55742617ea78" translate="yes" xml:space="preserve">
          <source>We'll get to the meaning of those Perlish-looking variables in a little bit.</source>
          <target state="translated">これらのPerlishな変数の意味を少しずつ説明していきます。</target>
        </trans-unit>
        <trans-unit id="ccbe83524a5012d45f354f697c95fa9a1eb5367f" translate="yes" xml:space="preserve">
          <source>We'll have another string pointer in there:</source>
          <target state="translated">そこにもう一つ文字列ポインタを入れておきます。</target>
        </trans-unit>
        <trans-unit id="5672edbff82e9ae33e95bbfe34109b2db08b3398" translate="yes" xml:space="preserve">
          <source>We'll look at output first. Supposing we already have this structure, how do we print it out?</source>
          <target state="translated">まずは出力について見ていきましょう。すでにこの構造体があるとしたら、どうやって出力するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="8801992116fa36a8b481455c1f17fda02ba0a864" translate="yes" xml:space="preserve">
          <source>We'll see a more tricky example of this when we consider Perl's macros below. &lt;code&gt;POPn&lt;/code&gt; gives you the NV (floating point value) of the top SV on the stack: the &lt;code&gt;$x&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;functions/cos&quot;&gt;cos($x)&lt;/a&gt;&lt;/code&gt;. Then we compute the cosine, and push the result back as an NV. The &lt;code&gt;X&lt;/code&gt; in &lt;code&gt;XPUSHn&lt;/code&gt; means that the stack should be extended if necessary - it can't be necessary here, because we know there's room for one more item on the stack, since we've just removed one! The &lt;code&gt;XPUSH*&lt;/code&gt; macros at least guarantee safety.</source>
          <target state="translated">以下のPerlのマクロを検討すると、このよりトリッキーな例が表示されます。 &lt;code&gt;POPn&lt;/code&gt; はあなたにスタックの先頭のSVのNV（浮動小数点値）を与える： &lt;code&gt;$x&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;functions/cos&quot;&gt;cos($x)&lt;/a&gt;&lt;/code&gt; 。次に、コサインを計算し、結果をNVとして戻します。 &lt;code&gt;XPUSHn&lt;/code&gt; の &lt;code&gt;X&lt;/code&gt; は、必要に応じてスタックを拡張する必要があることを意味します。ここでは必要ありません。スタックに項目を1つ削除したため、スタックに項目が1つ残っていることがわかっているためです。 &lt;code&gt;XPUSH*&lt;/code&gt; マクロは、少なくとも保証の安全性。</target>
        </trans-unit>
        <trans-unit id="b55bbd57ee31a3c27c5821f6c991f3bb8fbebc65" translate="yes" xml:space="preserve">
          <source>We'll simply continue down to our pre-set breakpoint with a '&lt;b&gt;c&lt;/b&gt;':</source>
          <target state="translated">「&lt;b&gt;c&lt;/b&gt;」を使用して、事前に設定されたブレークポイントまで続けます。</target>
        </trans-unit>
        <trans-unit id="a9a2d405fbc50682e1a3c2bf95879ebe85538d93" translate="yes" xml:space="preserve">
          <source>We'll use &lt;code&gt;gdb&lt;/code&gt; for our examples here; the principles will apply to any debugger (many vendors call their debugger &lt;code&gt;dbx&lt;/code&gt; ), but check the manual of the one you're using.</source>
          <target state="translated">ここでは例として &lt;code&gt;gdb&lt;/code&gt; を使用します。原則はすべてのデバッガーに適用されます（多くのベンダーがデバッガー &lt;code&gt;dbx&lt;/code&gt; を呼び出します）が、使用しているデバッガーのマニュアルを確認してください。</target>
        </trans-unit>
        <trans-unit id="dd00180725dcce313c6ef1b86501c9848503c2c0" translate="yes" xml:space="preserve">
          <source>We'll use Jarkko Hietaniemi &amp;lt;</source>
          <target state="translated">Jarkko Hietaniemiを使用します&amp;lt;</target>
        </trans-unit>
        <trans-unit id="f54f2656a6244346ba143809ce965c3e152258c1" translate="yes" xml:space="preserve">
          <source>We're Netware in addition to being Windows.</source>
          <target state="translated">Windowsであることに加えて、ネットウェアであること。</target>
        </trans-unit>
        <trans-unit id="89a6bcd8665abf52d39396f9fea984b5d7d01f5f" translate="yes" xml:space="preserve">
          <source>We're Unix and Cygwin.</source>
          <target state="translated">私たちはUnixとCygwinです。</target>
        </trans-unit>
        <trans-unit id="bae7bf51fd64828a801e9cd04e2c5e1eac38f446" translate="yes" xml:space="preserve">
          <source>We're going to add two more items onto the argument stack: when you have a tied array, the &lt;code&gt;PUSH&lt;/code&gt; subroutine receives the object and the value to be pushed, and that's exactly what we have here - the tied object, retrieved with &lt;code&gt;SvTIED_obj&lt;/code&gt; , and the value, the SV &lt;code&gt;val&lt;/code&gt; .</source>
          <target state="translated">引数スタックにさらに2つの項目を追加します &lt;code&gt;SvTIED_obj&lt;/code&gt; 配列がある場合、 &lt;code&gt;PUSH&lt;/code&gt; サブルーチンはオブジェクトとプッシュされる値を受け取ります。これがまさにここにあるものです-SvTIED_objで取得されたTieオブジェクト値、SV &lt;code&gt;val&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="982b2dd7e00a50956cc41a996392e78491465b29" translate="yes" xml:space="preserve">
          <source>We're going to primarily concentrate on Perl-only modules here, rather than XS modules. XS modules serve a rather different purpose, and you should consider different things before distributing them - the popularity of the library you are gluing, the portability to other operating systems, and so on. However, the notes on preparing the Perl side of the module and packaging and distributing it will apply equally well to an XS module as a pure-Perl one.</source>
          <target state="translated">ここではXSモジュールではなく、主にPerl専用のモジュールに焦点を当てていきます。XS モジュールの役割はかなり異なっていますので、配布する前にいろいろなことを考慮しなければなりません。しかし、モジュールのPerl側の準備やパッケージング、配布に関する注意事項は、純粋なPerlモジュールと同様にXSモジュールにも適用されます。</target>
        </trans-unit>
        <trans-unit id="34118bf3962978ee960cb834c23b6a7907e48ac6" translate="yes" xml:space="preserve">
          <source>We've already seen how to print to standard output using &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;. However, &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; can also take an optional first argument specifying which filehandle to print to:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; を使用して標準出力に出力する方法はすでに見てきました。ただし、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; は、印刷するファイルハンドルを指定するオプションの最初の引数を取ることもできます。</target>
        </trans-unit>
        <trans-unit id="01a8063bdaca09993ddd8d252b857fa09a430a49" translate="yes" xml:space="preserve">
          <source>We've also told Perl about the library that we built in the mylib subdirectory. That required only the addition of the &lt;code&gt;MYEXTLIB&lt;/code&gt; variable to the WriteMakefile call and the replacement of the postamble subroutine to cd into the subdirectory and run make. The Makefile.PL for the library is a bit more complicated, but not excessively so. Again we replaced the postamble subroutine to insert our own code. This code simply specified that the library to be created here was a static archive library (as opposed to a dynamically loadable library) and provided the commands to build it.</source>
          <target state="translated">また、mylibサブディレクトリに構築したライブラリについてPerlに通知しました。それには、 &lt;code&gt;MYEXTLIB&lt;/code&gt; 変数をWriteMakefile呼び出しに追加し、ポストアンブルサブルーチンを置き換えて、サブディレクトリにcdしてmakeを実行するだけで済みました。ライブラリのMakefile.PLは少し複雑ですが、それほど複雑ではありません。ここでも、ポストアンブルサブルーチンを置き換えて、独自のコードを挿入しました。このコードは、ここで作成されるライブラリが（動的にロード可能なライブラリではなく）静的アーカイブライブラリであることを単純に指定し、それを構築するコマンドを提供しました。</target>
        </trans-unit>
        <trans-unit id="6afd998315c2c6324bb813d112e9a8f30bf0d582" translate="yes" xml:space="preserve">
          <source>We've covered the workhorse parts of Perl's threading package, and with these tools you should be well on your way to writing threaded code and packages. There are a few useful little pieces that didn't really fit in anyplace else.</source>
          <target state="translated">Perl のスレッド化パッケージの主要な部分をカバーしてきましたが、これらのツールを使えば、スレッド化されたコードやパッケ ージを書くことができるようになるはずです。これらのツールを使えば、スレッド化されたコードやパッケージを書くのに十分な道を歩むことができるはずです。</target>
        </trans-unit>
        <trans-unit id="b4d69ed91d0829df5cfa125f68b479f5de86f05f" translate="yes" xml:space="preserve">
          <source>We've gone past our check (where 'All OK' was printed) and have stopped just before the meat of our task. We could try to print out a couple of variables to see what is happening:</source>
          <target state="translated">チェック('All OK'が印刷されていたところ)を過ぎて、タスクの本質の直前で止まってしまいました。何が起こっているのかを確認するために、いくつかの変数を印刷してみることができます。</target>
        </trans-unit>
        <trans-unit id="33a66a35950ff295dc8b9c6a23c44bcace53edc3" translate="yes" xml:space="preserve">
          <source>We've had Larry's h2ph translator, which helped, but that only works on cpp symbols, not real C, which was also very much needed. What I offer you is a symbolic way of getting at all the C structures. I've couched them in terms of packages and functions. Consider the following program:</source>
          <target state="translated">ラリーの h2ph トランスレータは役に立ちましたが、それは cpp シンボルでしか動作せず、本当の C ではありません。私が提供するのは、すべてのC言語の構造を理解するためのシンボリックな方法です。私はそれらをパッケージと関数で表現しました。以下のプログラムを考えてみてください。</target>
        </trans-unit>
        <trans-unit id="f3af9852bf7e4f70a4af9b26111fb8e3956f866b" translate="yes" xml:space="preserve">
          <source>We've made some changes to Makefile.PL. In this case, we've specified an extra library to be linked into the extension's shared library, the math library libm in this case. We'll talk later about how to write XSUBs that can call every routine in a library.</source>
          <target state="translated">Makefile.PLに変更を加えました。今回は、拡張機能の共有ライブラリ、この場合は数学ライブラリlibmにリンクする追加ライブラリを指定しました。ライブラリ内のすべてのルーチンを呼び出すことができるXSUBの書き方については後述します。</target>
        </trans-unit>
        <trans-unit id="a904b7cf0e87b370c484aeda4a3fd7921273c345" translate="yes" xml:space="preserve">
          <source>We've seen how to encourage good coding practices with &lt;b&gt;use strict&lt;/b&gt; and &lt;b&gt;-w&lt;/b&gt;. We can run the perl debugger &lt;b&gt;perl -d scriptname&lt;/b&gt; to inspect your data from within the perl debugger with the &lt;b&gt;p&lt;/b&gt; and &lt;b&gt;x&lt;/b&gt; commands. You can walk through your code, set breakpoints with &lt;b&gt;b&lt;/b&gt; and step through that code with &lt;b&gt;s&lt;/b&gt; or &lt;b&gt;n&lt;/b&gt;, continue with &lt;b&gt;c&lt;/b&gt; and return from a sub with &lt;b&gt;r&lt;/b&gt;. Fairly intuitive stuff when you get down to it.</source>
          <target state="translated">&lt;b&gt;use strict&lt;/b&gt;および&lt;b&gt;-w&lt;/b&gt;を&lt;b&gt;使用&lt;/b&gt;して、優れたコーディング方法を奨励する方法を見てきました。 perlデバッガー&lt;b&gt;perl -d scriptname&lt;/b&gt;を実行して、&lt;b&gt;p&lt;/b&gt;および&lt;b&gt;x&lt;/b&gt;コマンドを使用してperlデバッガー内からデータを検査できます。コードをウォークスルーし、&lt;b&gt;b&lt;/b&gt;でブレークポイントを設定し、&lt;b&gt;s&lt;/b&gt;または&lt;b&gt;n&lt;/b&gt;でそのコードをステップ実行し、&lt;b&gt;c&lt;/b&gt;で続行し、&lt;b&gt;rで&lt;/b&gt; subから戻ることができます。それに取り掛かると、かなり直感的なものになります。</target>
        </trans-unit>
        <trans-unit id="9f4aba3ac8d090b513bcacbad039797adbe73abe" translate="yes" xml:space="preserve">
          <source>We've taken some pains to construct the template so that it matches the contents of our frame buffer. Otherwise we'd either get undefined values, or &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; could not unpack all. If &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; runs out of items, it will supply null strings (which are coerced into zeroes whenever the pack code says so).</source>
          <target state="translated">フレームバッファーの内容と一致するように、テンプレートを作成するために少し苦労しました。それ以外の場合は、未定義の値を取得するか、unpackですべてを &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; できませんでした。場合 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; アイテムを使い果たし、それは（パックコードがそう言う時はいつでもゼロに強制されている）、ヌル文字列を供給します。</target>
        </trans-unit>
        <trans-unit id="37fc93f698eef77381e152ba1261b27e22014722" translate="yes" xml:space="preserve">
          <source>We've tried to make this also work with the TODO: syntax, but it's not guaranteed and its use is also discouraged:</source>
          <target state="translated">これもTODO:構文で動作するようにしてみましたが、保証はされていませんし、使用も推奨されていません。</target>
        </trans-unit>
        <trans-unit id="d057d23b834db4b8d50936a9c8b48cc9bb56ac94" translate="yes" xml:space="preserve">
          <source>We've tried to minimize the dependence of Perl library modules on Unix syntax, but you may find that some of these, as well as some scripts written for Unix systems, will require that you use Unix syntax, since they will assume that '/' is the directory separator,</source>
          <target state="translated">Perl ライブラリモジュールの Unix 構文への依存度を最小限に抑えようとしましたが、これらの中には Unix システム用に書かれたスクリプトと同様に、Unix 構文を使用する必要があることに気づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="f63c6786d8c83343c69f80cf76418c3681700514" translate="yes" xml:space="preserve">
          <source>We've used a hash slice in order to easily handle the fields of each row. Storing the keys in an array makes it easy to operate on them as a group or loop over them with &lt;code&gt;for&lt;/code&gt; . It also avoids polluting the program with global variables and using symbolic references.</source>
          <target state="translated">各行のフィールドを簡単に処理するために、ハッシュスライスを使用しました。キーを配列に格納すると、キーをグループとして操作したり、 &lt;code&gt;for&lt;/code&gt; でループしたりすることが簡単になります。また、プログラムをグローバル変数で汚染したり、シンボリック参照を使用したりすることも避けます。</target>
        </trans-unit>
        <trans-unit id="e147d82cb4cdd9e073d031a1a26cd0222dd868d0" translate="yes" xml:space="preserve">
          <source>Weaken a reference: set the &lt;code&gt;SvWEAKREF&lt;/code&gt; flag on this RV; give the referred-to SV &lt;code&gt;PERL_MAGIC_backref&lt;/code&gt; magic if it hasn't already; and push a back-reference to this RV onto the array of backreferences associated with that magic. If the RV is magical, set magic will be called after the RV is cleared.</source>
          <target state="translated">参照を &lt;code&gt;SvWEAKREF&lt;/code&gt; ：このRVにSvWEAKREFフラグを設定します。参照されていないSV &lt;code&gt;PERL_MAGIC_backref&lt;/code&gt; マジックをまだ与えていない場合は、それを与えます。そして、このRVへの後方参照を、その魔法に関連付けられた後方参照の配列にプッシュします。RVが魔法の場合、RVがクリアされた後にset magicが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6f4b4063ed2668451305a4ea955df5abd08928f3" translate="yes" xml:space="preserve">
          <source>Weakrefs call uvar magic</source>
          <target state="translated">弱い参照は uvar magic を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a87a48da60ac110880ba420c176bfa3b966a1bbc" translate="yes" xml:space="preserve">
          <source>Websites</source>
          <target state="translated">Websites</target>
        </trans-unit>
        <trans-unit id="c46c01995b645fa6ced7ccd3bd695a2325cf2829" translate="yes" xml:space="preserve">
          <source>Weed out arguments that are not supported and warn about them to the user</source>
          <target state="translated">サポートされていない引数を除外し、ユーザーに警告する</target>
        </trans-unit>
        <trans-unit id="5ff64b425852808bfa9bcc07404d47fe62f5255b" translate="yes" xml:space="preserve">
          <source>Week Number</source>
          <target state="translated">週数</target>
        </trans-unit>
        <trans-unit id="e47cfca7176dccc849b8b9085335ec9965e39788" translate="yes" xml:space="preserve">
          <source>Weighting CJK Unified Ideographs</source>
          <target state="translated">日中韓統一イデオグラフの重み付け</target>
        </trans-unit>
        <trans-unit id="6b33b573e9b7a7f05800470ad22d2691de1ad1d8" translate="yes" xml:space="preserve">
          <source>Weighting JIS KANJI for Unicode::Collate</source>
          <target state="translated">Unicode::CollateのためのJIS漢字の重み付け</target>
        </trans-unit>
        <trans-unit id="b6757ec0e4d4ce4eae1496f199fc7aa0d085efea" translate="yes" xml:space="preserve">
          <source>Weighting may vary depending on collation element table. So ensure the weights defined in &lt;code&gt;entry&lt;/code&gt; will be consistent with those in the collation element table loaded via &lt;code&gt;table&lt;/code&gt; .</source>
          <target state="translated">重み付けは、照合要素テーブルによって異なる場合があります。したがって、 &lt;code&gt;entry&lt;/code&gt; 定義された重みが、tableを介してロードされた照合要素テーブルの重みと一致することを確認して &lt;code&gt;table&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b6bdfd154d71780792f4f6d415a46881c01b84f" translate="yes" xml:space="preserve">
          <source>Weights in reverse order; ex. level 2 (diacritic ordering) in French. If omitted (or &lt;code&gt;$levelNumber&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;\@levelNumbers&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt; ), forwards at all the levels.</source>
          <target state="translated">逆順の重み。例。フランス語のレベル2（発音記号順）。省略した場合（または &lt;code&gt;$levelNumber&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;\@levelNumbers&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; の場合）、すべてのレベルで転送します。</target>
        </trans-unit>
        <trans-unit id="1ade9c702a20a6384a7a0b9552d289287a18c722" translate="yes" xml:space="preserve">
          <source>Well, apart from a bare &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt; $fh&lt;/code&gt; , you shouldn't treat them specially. (The binmode is needed because otherwise Perl may convert line endings on Win32 systems.)</source>
          <target state="translated">まあ、裸の &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt; $fh&lt;/code&gt; は別として、それらを特別に扱うべきではありません。（Win32システムではPerlが行末を変換する可能性があるため、binmodeが必要です。）</target>
        </trans-unit>
        <trans-unit id="504ec4c7237da89364f87b2aad3291cf833f70a8" translate="yes" xml:space="preserve">
          <source>Well, having several executables dynamically linked to the same huge library has its advantages, but this would not substantiate the additional work to make it compile. The reason is the complicated-to-developers but very quick and convenient-to-users &quot;hard&quot; dynamic linking used by OS/2.</source>
          <target state="translated">まあ、同じ巨大なライブラリに動的にリンクされた複数の実行ファイルを持つことには利点がありますが、これではコンパイルするための追加の作業の意味がありません。理由は、開発者にとっては複雑だが、OS/2で使われている「ハード」な動的リンクが非常に速く、ユーザにとっては便利だからだ。</target>
        </trans-unit>
        <trans-unit id="b4bf2ee14e4e81fc05f1087aeed820b042b0028b" translate="yes" xml:space="preserve">
          <source>Well, if you can, upgrade to the most recent, but certainly &lt;code&gt;5.8.1&lt;/code&gt; or newer. The tutorial and FAQ assume the latest release.</source>
          <target state="translated">まあ、可能であれば、最新の、ただし &lt;code&gt;5.8.1&lt;/code&gt; 以降にアップグレードしてください。チュートリアルとFAQは最新のリリースを想定しています。</target>
        </trans-unit>
        <trans-unit id="c922bdb3f23d6c5306883fe0bee806df01fe877f" translate="yes" xml:space="preserve">
          <source>Well, maybe not. Anyway, each op contains a function pointer, which stipulates the function which will actually carry out the operation. This function will return the next op in the sequence - this allows for things like &lt;code&gt;if&lt;/code&gt; which choose the next op dynamically at run time. The &lt;code&gt;PERL_ASYNC_CHECK&lt;/code&gt; makes sure that things like signals interrupt execution if required.</source>
          <target state="translated">まあ、そうではないかもしれません。とにかく、各opには、実際に操作を実行する関数を規定する関数ポインターが含まれています。この関数は、シーケンスの次のopを返します。これにより、実行時に動的に次のopを選択する &lt;code&gt;if&lt;/code&gt; などが可能になります。 &lt;code&gt;PERL_ASYNC_CHECK&lt;/code&gt; は、実行割り込み信号のようなものが必要な場合はことを確認します。</target>
        </trans-unit>
        <trans-unit id="fb7d8a35468fea02bd934ea87237f211894a5751" translate="yes" xml:space="preserve">
          <source>Well, nowadays Perl DLL should be usable from a differently compiled program too... If you can run Perl code from REXX scripts (see &lt;a href=&quot;http://search.cpan.org/perldoc/OS2::REXX&quot;&gt;OS2::REXX&lt;/a&gt;), then there are some other aspect of interaction which are overlooked by the current hackish code to support differently-compiled principal programs.</source>
          <target state="translated">まあ、今日では、Perl DLLは別の方法でコンパイルされたプログラムからも使用できるはずです... REXXスクリプト（&lt;a href=&quot;http://search.cpan.org/perldoc/OS2::REXX&quot;&gt;OS2 :: REXXを&lt;/a&gt;参照）からPerlコードを実行できる場合、現在のハッキングコードでは見落とされている相互作用の他の側面があります。異なる方法でコンパイルされた主要なプログラムをサポートします。</target>
        </trans-unit>
        <trans-unit id="61cb10844d83ee77c0e38f0deaf6e76838a94cbb" translate="yes" xml:space="preserve">
          <source>Well, okay, not entirely like C's arrays, actually. C doesn't know how to grow its arrays on demand. Perl does.</source>
          <target state="translated">そうですね,Cの配列のように完全にはいきませんが,実際には Cは必要に応じて配列を成長させる方法を知りません。Perlは知っています。</target>
        </trans-unit>
        <trans-unit id="c4f3fa326a3af64f93426bcdac847f46a94f9b1b" translate="yes" xml:space="preserve">
          <source>Well, that's</source>
          <target state="translated">まあ、それは</target>
        </trans-unit>
        <trans-unit id="bf3871275db74807de50e10189deb9ba1201d5b4" translate="yes" xml:space="preserve">
          <source>Well, that's all fine if you want to send one command and get one answer, but what about setting up something fully interactive, somewhat like the way</source>
          <target state="translated">一つのコマンドを送信して一つの答えを得たいのであれば、それはそれで良いのですが、完全に対話的なものを設定するのはどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="a4fcece5fae45fd55beac8d83dea4ffc7bb1546c" translate="yes" xml:space="preserve">
          <source>Well, that's because the rule is that on adjacent brackets only (whether square or curly), you are free to omit the pointer dereferencing arrow. But you cannot do so for the very first one if it's a scalar containing a reference, which means that $ref_to_AoA always needs it.</source>
          <target state="translated">まあ、それは、隣接するカッコの上でのみ(四角であろうとカーリーであろうと)、ポインタの参照元となる矢印を省略することが自由にできるというルールがあるからです。しかし、それが参照を含むスカラであれば、最初のものについてはそうすることはできません。</target>
        </trans-unit>
        <trans-unit id="5937ea9ee293b2d54cd64fb9f3a778625f679e1c" translate="yes" xml:space="preserve">
          <source>Well, this isn't very easy to read, and using the helpful manual (&lt;b&gt;h h&lt;/b&gt;), the '&lt;b&gt;x&lt;/b&gt;' command looks promising:</source>
          <target state="translated">さて、これは非常に読みやすくありません。役立つマニュアル（&lt;b&gt;hh&lt;/b&gt;）を使用すると、「&lt;b&gt;x&lt;/b&gt;」コマンドは有望に見えます。</target>
        </trans-unit>
        <trans-unit id="81775bcb15e4091e227d731dfdef1462a2bf3f2b" translate="yes" xml:space="preserve">
          <source>Well, you could keep them in sync, but there's no guarantee it will always hold on classes somebody else wrote. Besides, there is little to gain in doing so: a serializing hook could keep only one attribute of an object, which is probably not what should happen during a deep cloning of that same object.</source>
          <target state="translated">まあ、それらを同期させておくことはできますが、誰かが書いたクラスを常に保持できる保証はありません。その上、そうすることで得られるものはほとんどありません:シリアライズフックはオブジェクトの一つの属性だけを保持することができますが、これはおそらく同じオブジェクトを深く複製している間に起こるべきことではないでしょう。</target>
        </trans-unit>
        <trans-unit id="c6c58c114eba15fa1fde6b56057cb927734327d9" translate="yes" xml:space="preserve">
          <source>What *is* Unicode, anyway?</source>
          <target state="translated">Unicode とは何ですか?</target>
        </trans-unit>
        <trans-unit id="2948ac1effa2d43a9756f45e31fc4dfaf54b428e" translate="yes" xml:space="preserve">
          <source>What &lt;b&gt;is&lt;/b&gt; Unicode, anyway?</source>
          <target state="translated">とにかく、ユニコードと&lt;b&gt;は&lt;/b&gt;何ですか？</target>
        </trans-unit>
        <trans-unit id="0c27997670ea19d058363ea936f9c5a132d90646" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; does</source>
          <target state="translated">どのような &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ありません</target>
        </trans-unit>
        <trans-unit id="828c569308e99c356a11f905449002a24faaf00f" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;\n&lt;/code&gt; represents depends on the type of file opened. It usually represents &lt;code&gt;\012&lt;/code&gt; but it could also be &lt;code&gt;\015&lt;/code&gt; , &lt;code&gt;\012&lt;/code&gt; , &lt;code&gt;\015\012&lt;/code&gt; , &lt;code&gt;\000&lt;/code&gt; , &lt;code&gt;\040&lt;/code&gt; , or nothing depending on the file organization and record format. The &lt;code&gt;VMS::Stdio&lt;/code&gt; module provides access to the special &lt;code&gt;fopen()&lt;/code&gt; requirements of files with unusual attributes on VMS.</source>
          <target state="translated">何 &lt;code&gt;\n&lt;/code&gt; 表しては、開いているファイルの種類によって異なります。これは通常表し &lt;code&gt;\012&lt;/code&gt; が、それはまた、可能性があり &lt;code&gt;\015&lt;/code&gt; 、 &lt;code&gt;\012&lt;/code&gt; 、 &lt;code&gt;\015\012&lt;/code&gt; 、 &lt;code&gt;\000&lt;/code&gt; 、 &lt;code&gt;\040&lt;/code&gt; ファイル編成とレコード形式に応じて、または何も。 &lt;code&gt;VMS::Stdio&lt;/code&gt; モジュールは、特別にアクセスを提供 &lt;code&gt;fopen()&lt;/code&gt; VMS上の異常な属性を持つファイルの要件を。</target>
        </trans-unit>
        <trans-unit id="fcc1cc41a80c328b4eb792743f378eba1c9a93d1" translate="yes" xml:space="preserve">
          <source>What &lt;code&gt;\p{Digit}&lt;/code&gt; means (and hence &lt;code&gt;\d&lt;/code&gt; except under the &lt;code&gt;/a&lt;/code&gt; modifier) is &lt;code&gt;\p{General_Category=Decimal_Number}&lt;/code&gt; , or synonymously, &lt;code&gt;\p{General_Category=Digit}&lt;/code&gt; . Starting with Unicode version 4.1, this is the same set of characters matched by &lt;code&gt;\p{Numeric_Type=Decimal}&lt;/code&gt; . But Unicode also has a different property with a similar name, &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; , which matches a completely different set of characters. These characters are things such as &lt;code&gt;CIRCLED DIGIT ONE&lt;/code&gt; or subscripts, or are from writing systems that lack all ten digits.</source>
          <target state="translated">何 &lt;code&gt;\p{Digit}&lt;/code&gt; 手段（したがって &lt;code&gt;\d&lt;/code&gt; 下除く &lt;code&gt;/a&lt;/code&gt; モディファイア）がある &lt;code&gt;\p{General_Category=Decimal_Number}&lt;/code&gt; 、同義語、または &lt;code&gt;\p{General_Category=Digit}&lt;/code&gt; 。 Unicodeバージョン4.1以降、これは &lt;code&gt;\p{Numeric_Type=Decimal}&lt;/code&gt; 一致する同じ文字セットです。ただし、Unicodeには、同様の名前 &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; を持つ別のプロパティもあり、これは完全に異なる文字セットと一致します。これらの文字は、 &lt;code&gt;CIRCLED DIGIT ONE&lt;/code&gt; や下付き文字などの文字であるか、10桁すべてを欠く書記体系からのものです。</target>
        </trans-unit>
        <trans-unit id="1e45028df29a344ed3d5dcfe47d49eff1e4e5b3d" translate="yes" xml:space="preserve">
          <source>What Is A Thread Anyway?</source>
          <target state="translated">そもそもスレッドとは何か?</target>
        </trans-unit>
        <trans-unit id="9f3aa83a51cae6aa5da8eadacc3922153fc22ffe" translate="yes" xml:space="preserve">
          <source>What Not to Export</source>
          <target state="translated">輸出してはいけないもの</target>
        </trans-unit>
        <trans-unit id="bcf1ef3ecb402df133384ad31b9f0ab2cd6f6d09" translate="yes" xml:space="preserve">
          <source>What Thread Am I In?</source>
          <target state="translated">私はどのスレッドにいますか?</target>
        </trans-unit>
        <trans-unit id="bdf11c2c3fa2430fc36aec96902da89a7d6631c6" translate="yes" xml:space="preserve">
          <source>What Threads Are Running?</source>
          <target state="translated">どのスレッドが動いているか?</target>
        </trans-unit>
        <trans-unit id="4628ec6a65c6ef207e94ed239509a432eb2d40b1" translate="yes" xml:space="preserve">
          <source>What You See Is What You Get. Usually used when something that appears on the screen matches how it will eventually look, like Perl&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; declarations. Also used to mean the opposite of magic because everything works exactly as it appears, as in the three- argument form of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">あなたが見たもの、それがあなたの手に入れたものだ。通常、Perlの &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; 宣言のように、画面に表示されるものが最終的にどのように見えるかと一致する場合に使用されます。 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; の 3引数形式のように、すべてが表示されるとおりに機能するため、魔法の反対を意味するためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="71fba121999cf66c38da9b22673582805a4f1ef9" translate="yes" xml:space="preserve">
          <source>What a &lt;b&gt;process&lt;/b&gt; does when it has to wait for something: &amp;ldquo;My process blocked waiting for the disk.&amp;rdquo; As an unrelated noun, it refers to a large chunk of data, of a size that the &lt;b&gt;operating system&lt;/b&gt; likes to deal with (normally a power of 2 such as 512 or 8192). Typically refers to a chunk of data that&amp;rsquo;s coming from or going to a disk file.</source>
          <target state="translated">どのような&lt;b&gt;プロセスは、&lt;/b&gt;それが何かを待つ必要がある場合を行います。「私のプロセスは、ディスクを待ってブロックされました。」これは無関係な名詞として、&lt;b&gt;オペレーティングシステム&lt;/b&gt;が扱いたいサイズ（通常は512や8192などの2の累乗）の大きなデータのチャンクを指します。通常は、ディスクファイルで送受信されるデータのチャンクを指します。</target>
        </trans-unit>
        <trans-unit id="bc0f239768e941abba33a14d0c879853b4c42602" translate="yes" xml:space="preserve">
          <source>What about &lt;code&gt;pp_add&lt;/code&gt; , the function we examined earlier to implement the &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 演算子を実装するために以前に調べた関数 &lt;code&gt;pp_add&lt;/code&gt; はどうですか？</target>
        </trans-unit>
        <trans-unit id="f06b49d955a9223ccdbf114f85c4f46fdc429b37" translate="yes" xml:space="preserve">
          <source>What about binary data, like images?</source>
          <target state="translated">画像のようなバイナリデータはどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="904b144e4b71718e8b3ada176614f796ad653d66" translate="yes" xml:space="preserve">
          <source>What about read-write mode? You should probably pretend it doesn't exist, because opening text files in read-write mode is unlikely to do what you would like. See &lt;a href=&quot;perlfaq5&quot;&gt;perlfaq5&lt;/a&gt; for details.</source>
          <target state="translated">読み書きモードについてはどうですか？テキストファイルを読み取り/書き込みモードで開くと、思いどおりの結果が得られない可能性があるため、存在しないふりをする必要があります。詳細については、&lt;a href=&quot;perlfaq5&quot;&gt;perlfaq5&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a98ea247bf23a0f2706e40c287b52d50377a4b2f" translate="yes" xml:space="preserve">
          <source>What about the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; pragma?</source>
          <target state="translated">どの程度 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; プラグマ？</target>
        </trans-unit>
        <trans-unit id="b08e1e06d029706420aa4cf6848aa2370810866c" translate="yes" xml:space="preserve">
          <source>What about the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding&lt;/code&gt; pragma?</source>
          <target state="translated">どのような &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding&lt;/code&gt; プラグマ？</target>
        </trans-unit>
        <trans-unit id="3887d9c889fae85aa71ceab4eb1a53b1a8af8aa5" translate="yes" xml:space="preserve">
          <source>What about the use bytes pragma?</source>
          <target state="translated">use bytes pragmaはどうですか?</target>
        </trans-unit>
        <trans-unit id="77d5d80251afa9ef6da60c5e5fbcd215435339d8" translate="yes" xml:space="preserve">
          <source>What about the use encoding pragma?</source>
          <target state="translated">使用エンコーディングのpragmaはどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="20f362258fa45c702309bd2513e61621aa1951d0" translate="yes" xml:space="preserve">
          <source>What are &lt;code&gt;decode_utf8&lt;/code&gt; and &lt;code&gt;encode_utf8&lt;/code&gt; ?</source>
          <target state="translated">&lt;code&gt;decode_utf8&lt;/code&gt; および &lt;code&gt;encode_utf8&lt;/code&gt; とは何ですか？</target>
        </trans-unit>
        <trans-unit id="f5cae90cb4f341d083e0d8337510fe30e0b15640" translate="yes" xml:space="preserve">
          <source>What are Perl 4, Perl 5, or Perl 6?</source>
          <target state="translated">Perl4、Perl5、Perl6とは何ですか?</target>
        </trans-unit>
        <trans-unit id="01965e32414f80a123a1d37d107d508fa4c75578" translate="yes" xml:space="preserve">
          <source>What are all these $@%&amp;amp;* punctuation signs, and how do I know when to use them?</source>
          <target state="translated">これらの$ @％＆*句読記号は何ですか、またいつ使用するのかをどのように知ることができますか？</target>
        </trans-unit>
        <trans-unit id="11092e508878fe9b88c670c816521fca7c847f2f" translate="yes" xml:space="preserve">
          <source>What are decode_utf8 and encode_utf8?</source>
          <target state="translated">decode_utf8、encode_utf8とは?</target>
        </trans-unit>
        <trans-unit id="0a2a28ac7fb746402e9baa692599b97fb2da048e" translate="yes" xml:space="preserve">
          <source>What can you do with a reference once you have it? It's a scalar value, and we've seen that you can store it as a scalar and get it back again just like any scalar. There are just two more ways to use it:</source>
          <target state="translated">一度取得した参照はどうすればいいのでしょうか?これはスカラ値であり、スカラ値として保存しておけば、他のスカラ値と同じように再び取得できることを見てきました。これを使うには、あと2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="36be343f96dfd613d8c5cf587823d859ba4e947b" translate="yes" xml:space="preserve">
          <source>What character encodings does Perl support?</source>
          <target state="translated">Perl はどのような文字エンコーディングをサポートしていますか?</target>
        </trans-unit>
        <trans-unit id="d6aa1873fd68eba0f41fb53a3f8a2033690a4a51" translate="yes" xml:space="preserve">
          <source>What do you really want to know? If you merely want to know if one of your filehandles is connected to a terminal, you can try the &lt;code&gt;-t&lt;/code&gt; file test:</source>
          <target state="translated">あなたは本当に何を知りたいですか？ファイルハンドルの1つが端末に接続されているかどうかを知りたいだけの場合は、 &lt;code&gt;-t&lt;/code&gt; ファイルテストを試すことができます。</target>
        </trans-unit>
        <trans-unit id="1c337f8d590673be03d6eb277fa1a70849d518ac" translate="yes" xml:space="preserve">
          <source>What do you think &lt;code&gt;$x&lt;/code&gt; will be? The answer, unfortunately, is</source>
          <target state="translated">&lt;code&gt;$x&lt;/code&gt; はどうなると思いますか？残念ながら、その答えは</target>
        </trans-unit>
        <trans-unit id="72e224b443b5da69c66ac0a14f3f8175aa612a15" translate="yes" xml:space="preserve">
          <source>What does &quot;Bareword 'DB_File' not allowed&quot; mean?</source>
          <target state="translated">裸文字'DB_File'が許可されていない」とはどういう意味ですか?</target>
        </trans-unit>
        <trans-unit id="d0af16451ebfa2bdedb9044267c2bc5c148972de" translate="yes" xml:space="preserve">
          <source>What does &quot;Invalid Argument&quot; mean?</source>
          <target state="translated">無効な引数」とは何を意味するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="f0a7abc8d37e669509493f3435ed1f9575fda404" translate="yes" xml:space="preserve">
          <source>What does &quot;bad interpreter&quot; mean?</source>
          <target state="translated">通訳が悪い」とはどういうことか?</target>
        </trans-unit>
        <trans-unit id="5e47776a0ddea1129634daa43d411c09b05f88dc" translate="yes" xml:space="preserve">
          <source>What does it mean that regexes are greedy? How can I get around it?</source>
          <target state="translated">正規表現が欲張りなのはどういうこと?どうすれば回避できるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="fad85491a61b1ab9b17396e45b64b419ab4c8e77" translate="yes" xml:space="preserve">
          <source>What does this mean for regexps? Well, regexp users don't need to know much about Perl's internal representation of strings. But they do need to know 1) how to represent Unicode characters in a regexp and 2) that a matching operation will treat the string to be searched as a sequence of characters, not bytes. The answer to 1) is that Unicode characters greater than &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(255)&lt;/a&gt;&lt;/code&gt; are represented using the &lt;code&gt;\x{&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;}&lt;/code&gt; notation, because \x hex (without curly braces) doesn't go further than 255. (Starting in Perl 5.14, if you're an octal fan, you can also use &lt;code&gt;\o{&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;}&lt;/code&gt; .)</source>
          <target state="translated">これは正規表現にとって何を意味しますか？まあ、正規表現のユーザーは、Perlの文字列の内部表現について多くを知る必要はありません。ただし、1）正規表現でUnicode文字を表す方法、および2）一致する操作で検索される文字列がバイトではなく文字のシーケンスとして扱われることを知っている必要があります。 1）の答えは、 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(255)&lt;/a&gt;&lt;/code&gt; より大きいUnicode文字は &lt;code&gt;\x{&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;}&lt;/code&gt; 表記を使用して表されるためです。あなたは8進数のファンであり、 &lt;code&gt;\o{&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;}&lt;/code&gt; 使用することもできます。）</target>
        </trans-unit>
        <trans-unit id="0d60263af797b45d08166a1e2276365e53b9c7d0" translate="yes" xml:space="preserve">
          <source>What exact layers are in this default stack depends on a lot of things: your operating system, Perl version, Perl compile time configuration, and Perl runtime configuration. See &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;, &lt;a href=&quot;perlrun#PERLIO&quot;&gt;PERLIO in perlrun&lt;/a&gt;, and &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; for more information.</source>
          <target state="translated">このデフォルトスタックの正確な層は、オペレーティングシステム、Perlのバージョン、Perlのコンパイル時の構成、Perlのランタイム構成など、多くの要素によって異なります。参照&lt;a href=&quot;perlio&quot;&gt;のPerlIO&lt;/a&gt;、&lt;a href=&quot;perlrun#PERLIO&quot;&gt;perlrunを中PERLIO&lt;/a&gt;、および&lt;a href=&quot;open&quot;&gt;オープン&lt;/a&gt;より多くの情報のため。</target>
        </trans-unit>
        <trans-unit id="07854a74e069ff620decff4308e92c81d6bd8098" translate="yes" xml:space="preserve">
          <source>What follows are the more advanced, less used, or sometimes esoteric capabilities of Perl regexps. In Part 2, we will assume you are comfortable with the basics and concentrate on the advanced features.</source>
          <target state="translated">以下では、Perl 正規表現のより高度な機能、あまり使われていない機能、時には難解な機能を紹介します。第2部では、基本的なことに慣れていることを前提に、より高度な機能に焦点を当てていきます。</target>
        </trans-unit>
        <trans-unit id="565ee5d3831c954154cf4129999eb2ce193f0752" translate="yes" xml:space="preserve">
          <source>What follows is a detailed guide through these steps.</source>
          <target state="translated">以下は、これらのステップを通じた詳細なガイドです。</target>
        </trans-unit>
        <trans-unit id="75d7e12868bcb8f2565578748be73375fac12333" translate="yes" xml:space="preserve">
          <source>What follows is a statement about artistic control, defined as the ability of authors of packages to guide the future of their code and maintain control over their work. It is a recognition that authors should have control over their work, and that it is a responsibility of the rest of the Perl community to ensure that they retain this control. It is an attempt to document the standards to which we, as Perl developers, intend to hold ourselves. It is an attempt to write down rough guidelines about the respect we owe each other as Perl developers.</source>
          <target state="translated">これは、パッケージの作者が自分のコードの将来を導き、自分の作品に対する制御を維持する能力と定義されている、芸術的な制御に関する声明です。これは、作者が自分の作品を制御するべきであり、この制御を確実に保持することは、Perl コミュニティの残りの部分の責任であるという認識を示しています。これは、Perl の開発者として、私たちが自分たち自身を保持しようとしている基準を文書化する試みです。これは、Perl の開発者としてお互いに敬意を払うことについての大まかなガイドラインを書き留める試みです。</target>
        </trans-unit>
        <trans-unit id="374a8e110bb4c1d9c752734c71a27f6e3e497ea6" translate="yes" xml:space="preserve">
          <source>What follows is subject to change RSN.</source>
          <target state="translated">以下の内容はRSNを変更する場合があります。</target>
        </trans-unit>
        <trans-unit id="24917de591e0d7708ee26a13cd3362afc4f6c7c4" translate="yes" xml:space="preserve">
          <source>What formats output as a form feed. The default is &lt;code&gt;\f&lt;/code&gt; .</source>
          <target state="translated">フォームフィードとして出力する形式。デフォルトは &lt;code&gt;\f&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d479059298a571f524af929b6aea396ec65a05e6" translate="yes" xml:space="preserve">
          <source>What gets returned depends on several factors:</source>
          <target state="translated">何が返ってくるかは、いくつかの要因に左右されます。</target>
        </trans-unit>
        <trans-unit id="8722b12ceccd8e92d99a716a04b297746411e5f8" translate="yes" xml:space="preserve">
          <source>What good is &lt;code&gt;\G&lt;/code&gt; in a regular expression?</source>
          <target state="translated">正規表現で &lt;code&gt;\G&lt;/code&gt; はどのように役立ちますか？</target>
        </trans-unit>
        <trans-unit id="2f0a90d9f77866c3233e1aef1cc7a9560c6ec0c3" translate="yes" xml:space="preserve">
          <source>What good is \G in a regular expression?</source>
          <target state="translated">正規表現で「\G」って何がいいの?</target>
        </trans-unit>
        <trans-unit id="ebf8dc71994cee4560964d904824ac92b27fed19" translate="yes" xml:space="preserve">
          <source>What happens if I add or remove keys from a hash while iterating over it?</source>
          <target state="translated">ハッシュの反復処理中にキーを追加したり削除したりするとどうなりますか?</target>
        </trans-unit>
        <trans-unit id="5b6c83c5563cf3fe722575d6dd30278f0a9d68bc" translate="yes" xml:space="preserve">
          <source>What has gone on?</source>
          <target state="translated">何が続いているのか?</target>
        </trans-unit>
        <trans-unit id="148ce7ffb164566545434b0feef660c7bee4a489" translate="yes" xml:space="preserve">
          <source>What has happened here?</source>
          <target state="translated">ここで何が起こったのか?</target>
        </trans-unit>
        <trans-unit id="21eec199e3d296f021d3cdb05af5afb550abb23b" translate="yes" xml:space="preserve">
          <source>What has happened is that &lt;code&gt;fred&lt;/code&gt; accesses the &lt;code&gt;@_&lt;/code&gt; array which belongs to &lt;code&gt;joe&lt;/code&gt; .</source>
          <target state="translated">何が起こったかというと、 &lt;code&gt;fred&lt;/code&gt; は &lt;code&gt;joe&lt;/code&gt; に属する &lt;code&gt;@_&lt;/code&gt; 配列にアクセスします。</target>
        </trans-unit>
        <trans-unit id="1061def72c9d3f6d8d9699c831f84918bba3a0be" translate="yes" xml:space="preserve">
          <source>What if I don't decode?</source>
          <target state="translated">デコードしないとどうなるの?</target>
        </trans-unit>
        <trans-unit id="edc0c9ac4aa8c7b7a3fb61b68506b87d3c69f4bc" translate="yes" xml:space="preserve">
          <source>What if I don't encode?</source>
          <target state="translated">エンコードしないとどうなるの?</target>
        </trans-unit>
        <trans-unit id="0ddebc8779b4a58623bcc03eec19b9fd5bdcc57a" translate="yes" xml:space="preserve">
          <source>What if I don't know which encoding was used?</source>
          <target state="translated">どのエンコードが使われていたかわからない場合はどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="b012d213b447ce5a8b3e4b308232eb1a6c342960" translate="yes" xml:space="preserve">
          <source>What if my question isn't answered in the FAQ?</source>
          <target state="translated">私の質問がFAQで回答されていない場合はどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="30310a64f6e6f73114ef8ff5955e14d7deb5a4c5" translate="yes" xml:space="preserve">
          <source>What if the interface provided by the C callback doesn't contain a parameter which allows the file handle to Perl subroutine mapping? Say in the asynchronous i/o package, the callback function gets passed only the &lt;code&gt;buffer&lt;/code&gt; parameter like this</source>
          <target state="translated">Cコールバックによって提供されるインターフェースに、Perlサブルーチンマッピングへのファイルハンドルを許可するパラメーターが含まれていない場合はどうなりますか？非同期I / Oパッケージで、コールバック関数はこのように &lt;code&gt;buffer&lt;/code&gt; パラメーターのみが渡されると言います</target>
        </trans-unit>
        <trans-unit id="f9002d28fd7ee52f5e73c33c74a403efd3585ddf" translate="yes" xml:space="preserve">
          <source>What import does</source>
          <target state="translated">どのような輸入をするのか</target>
        </trans-unit>
        <trans-unit id="9281510e66c9b036bf0f2b1f98689d5dbd410309" translate="yes" xml:space="preserve">
          <source>What is &quot;the UTF8 flag&quot;?</source>
          <target state="translated">UTF8フラグ」とは何ですか?</target>
        </trans-unit>
        <trans-unit id="48776d293c1cf7b50ee10897815e6e1c09782388" translate="yes" xml:space="preserve">
          <source>What is /o really for?</source>
          <target state="translated">oは本当に何のためにあるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="f799c97279ef39d3426ad309ad7dfc5a7d36fff1" translate="yes" xml:space="preserve">
          <source>What is &lt;code&gt;/o&lt;/code&gt; really for?</source>
          <target state="translated">&lt;code&gt;/o&lt;/code&gt; は本当に何のためのものですか？</target>
        </trans-unit>
        <trans-unit id="4da6343eb07811de611e2143a23a9e42def6f17c" translate="yes" xml:space="preserve">
          <source>What is C3?</source>
          <target state="translated">C3とは?</target>
        </trans-unit>
        <trans-unit id="bda040c2e08659bcff6001c6dcad6149b2b71af9" translate="yes" xml:space="preserve">
          <source>What is Perl 6?</source>
          <target state="translated">Perl 6とは何ですか?</target>
        </trans-unit>
        <trans-unit id="90e6903f9207d6b5637de9d9ec259575b1877362" translate="yes" xml:space="preserve">
          <source>What is Perl?</source>
          <target state="translated">Perlとは何ですか?</target>
        </trans-unit>
        <trans-unit id="79dc15d896921a5be3532940c7478220c26d76f5" translate="yes" xml:space="preserve">
          <source>What is Plack and PSGI?</source>
          <target state="translated">プラックとPSGIとは?</target>
        </trans-unit>
        <trans-unit id="387b2d5d4628ca2a97a160cf17017d26f2363e65" translate="yes" xml:space="preserve">
          <source>What is a &quot;wide character&quot;?</source>
          <target state="translated">ワイドキャラ」とは?</target>
        </trans-unit>
        <trans-unit id="6c07c0817bd40c0602c40f4eb163a577c33eb9e2" translate="yes" xml:space="preserve">
          <source>What is a 'record'? By default, the meaning is the same as for the &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; operator: It's a string terminated by &lt;code&gt;$/&lt;/code&gt; , which is probably &lt;code&gt;&quot;\n&quot;&lt;/code&gt; . (Minor exception: on DOS and Win32 systems, a 'record' is a string terminated by &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; .) You may change the definition of &quot;record&quot; by supplying the &lt;code&gt;recsep&lt;/code&gt; option in the &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call:</source>
          <target state="translated">「レコード」とは何ですか？デフォルトでは、意味は &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 演算子の場合と同じです。これは &lt;code&gt;$/&lt;/code&gt; で終了する文字列で、おそらく &lt;code&gt;&quot;\n&quot;&lt;/code&gt; です。 （マイナー例外：DOSとWin32システム上で、「レコードが」で終わる文字列である &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; 。）あなたが供給することにより、「記録」の定義を変更することがあり &lt;code&gt;recsep&lt;/code&gt; 中にオプションを &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; コール：</target>
        </trans-unit>
        <trans-unit id="41a841a9e9e59dbc901dca478a52731689558d70" translate="yes" xml:space="preserve">
          <source>What is a DBM Filter?</source>
          <target state="translated">DBMフィルターとは?</target>
        </trans-unit>
        <trans-unit id="75ea94c254fb7320b80e8d79c658d169412a3588" translate="yes" xml:space="preserve">
          <source>What is a JAPH?</source>
          <target state="translated">JAPHとは?</target>
        </trans-unit>
        <trans-unit id="8e7e75800308f6339899e8db69308ae93f0337df" translate="yes" xml:space="preserve">
          <source>What is a regular expression engine?</source>
          <target state="translated">正規表現エンジンとは?</target>
        </trans-unit>
        <trans-unit id="e7e08c44504e895661b69ab0d094008da5741e55" translate="yes" xml:space="preserve">
          <source>What is a regular expression? A regular expression is simply a string that describes a pattern. Patterns are in common use these days; examples are the patterns typed into a search engine to find web pages and the patterns used to list files in a directory, e.g., &lt;code&gt;ls *.txt&lt;/code&gt; or &lt;code&gt;dir *.*&lt;/code&gt;. In Perl, the patterns described by regular expressions are used to search strings, extract desired parts of strings, and to do search and replace operations.</source>
          <target state="translated">正規表現とは何ですか？正規表現は、単にパターンを説明する文字列です。最近、パターンが一般的に使用されています。例としては、Webページを検索するために検索エンジンに入力されるパターンや、 &lt;code&gt;ls *.txt&lt;/code&gt; や &lt;code&gt;dir *.*&lt;/code&gt; などのディレクトリ内のファイルを一覧表示するために使用されるパターンがあります。Perlでは、正規表現で記述されたパターンを使用して、文字列を検索し、文字列の必要な部分を抽出し、検索および置換操作を実行します。</target>
        </trans-unit>
        <trans-unit id="fc1f1924f0cab71521b063802ea721cd9de2bf43" translate="yes" xml:space="preserve">
          <source>What is an &quot;IV&quot;?</source>
          <target state="translated">IV」とは何ですか?</target>
        </trans-unit>
        <trans-unit id="8de138e681884a542d6a632e3d45af8060ecf685" translate="yes" xml:space="preserve">
          <source>What is meant here is unclear, as the &lt;code&gt;\N{...}&lt;/code&gt; escape is a sequence of code points, so this is made an error.</source>
          <target state="translated">&lt;code&gt;\N{...}&lt;/code&gt; エスケープはコードポイントのシーケンスであるため、ここでの意味は不明確であり、これはエラーになります。</target>
        </trans-unit>
        <trans-unit id="7e4d744a0a34b3ed6f2bacfcf8917df2728b341f" translate="yes" xml:space="preserve">
          <source>What is much worse, some DLLs change the floating point flags when in _DLLInitTerm() (e.g.,</source>
          <target state="translated">さらに悪いことに、いくつかの DLL は _DLLInitTerm()で浮動小数点フラグを変更します。</target>
        </trans-unit>
        <trans-unit id="b80f71784676643cac72b04d16a86ddd2aad93c3" translate="yes" xml:space="preserve">
          <source>What is perl.com? Perl Mongers? pm.org? perl.org? cpan.org?</source>
          <target state="translated">perl.comとは何ですか?Perl Mongers? pm.org? perl.org?</target>
        </trans-unit>
        <trans-unit id="b4511cf9900e620f3e5c53ed90d05dd1b6347288" translate="yes" xml:space="preserve">
          <source>What is socket.ph and where do I get it?</source>
          <target state="translated">socket.phとは何ですか?</target>
        </trans-unit>
        <trans-unit id="466ca1293cf697f510f855a869e855e56cd9f9c1" translate="yes" xml:space="preserve">
          <source>What is the difference between &quot;state&quot; subs and &quot;my&quot; subs? Each time that execution enters a block when &quot;my&quot; subs are declared, a new copy of each sub is created. &quot;State&quot; subroutines persist from one execution of the containing block to the next.</source>
          <target state="translated">状態」サブと「私の」サブの違いは何ですか?&quot;my &quot;サブが宣言されているときに、その実行がブロックに入るたびに、各サブの新しいコピーが作成されます。&quot;状態 &quot;サブルーチンは、含まれるブロックの1つの実行から次の実行へと持続します。</target>
        </trans-unit>
        <trans-unit id="fc949184376f42b77d53568413143ee5107891ea" translate="yes" xml:space="preserve">
          <source>What is the difference between $array[1] and @array[1]?</source>
          <target state="translated">また、$array[1]と@array[1]の違いは何でしょうか?</target>
        </trans-unit>
        <trans-unit id="e5e94a34863c5b06b0902ba29af6bbdd60a89b26" translate="yes" xml:space="preserve">
          <source>What is the difference between :encoding and :utf8?</source>
          <target state="translated">encoding と :utf8 の違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="87b2e888c908f6842e557ad8d646535f8dd07500" translate="yes" xml:space="preserve">
          <source>What is the difference between &lt;code&gt;:encoding&lt;/code&gt; and &lt;code&gt;:utf8&lt;/code&gt; ?</source>
          <target state="translated">&lt;code&gt;:encoding&lt;/code&gt; と &lt;code&gt;:utf8&lt;/code&gt; の違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="bdd9348a87a0e037c9116062611c030ca4d85da9" translate="yes" xml:space="preserve">
          <source>What is the difference between a list and an array?</source>
          <target state="translated">リストと配列の違いは何ですか?</target>
        </trans-unit>
        <trans-unit id="aa2dc660c0cced5d46caea2cf443fe5e368244c8" translate="yes" xml:space="preserve">
          <source>What is this Perl statement all about? &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; is a simple double-quoted string. &lt;code&gt;World&lt;/code&gt; is the regular expression and the &lt;code&gt;//&lt;/code&gt; enclosing &lt;code&gt;/World/&lt;/code&gt; tells Perl to search a string for a match. The operator &lt;code&gt;=~&lt;/code&gt; associates the string with the regexp match and produces a true value if the regexp matched, or false if the regexp did not match. In our case, &lt;code&gt;World&lt;/code&gt; matches the second word in &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; , so the expression is true. Expressions like this are useful in conditionals:</source>
          <target state="translated">このPerlステートメントはすべて何ですか？ &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; は、単純に二重引用符で囲まれた文字列です。 &lt;code&gt;World&lt;/code&gt; は正規表現であり、 &lt;code&gt;//&lt;/code&gt; を囲む &lt;code&gt;/World/&lt;/code&gt; は、一致する文字列を検索するようPerlに指示します。演算子 &lt;code&gt;=~&lt;/code&gt; は、文字列を正規表現一致に関連付け、正規表現が一致した場合はtrue値を生成し、正規表現が一致しなかった場合はfalseを生成します。この例では、 &lt;code&gt;World&lt;/code&gt; は &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; の 2番目の単語と一致するため、式はtrueです。このような式は条件文で役立ちます。</target>
        </trans-unit>
        <trans-unit id="c9fb4cb8e09b50cfb90602035114712466d59042" translate="yes" xml:space="preserve">
          <source>What is variable suicide and how can I prevent it?</source>
          <target state="translated">可変性自殺とは何か、どうすれば予防できるのか?</target>
        </trans-unit>
        <trans-unit id="49ac75fc20864efd20e6c484dddbafd73db6a2e3" translate="yes" xml:space="preserve">
          <source>What is your favorite pager program?</source>
          <target state="translated">お気に入りのポケベルプログラムは?</target>
        </trans-unit>
        <trans-unit id="fd63f60b8b6a48f0264ba03539d262e0388b66e2" translate="yes" xml:space="preserve">
          <source>What is your favorite shell?</source>
          <target state="translated">あなたの好きな貝殻は何ですか?</target>
        </trans-unit>
        <trans-unit id="f41b525bca416a73d68432b879e12cd6ce5cae2d" translate="yes" xml:space="preserve">
          <source>What kind of threads are Perl threads?</source>
          <target state="translated">Perlのスレッドってどんなスレッドですか?</target>
        </trans-unit>
        <trans-unit id="523c42f572591f0bfb9eb624031ecf0ded9f0a2a" translate="yes" xml:space="preserve">
          <source>What library to use?</source>
          <target state="translated">どのような図書館を利用するか?</target>
        </trans-unit>
        <trans-unit id="c9dcfd1a76d749e07495e332956ce4a77d52e8a9" translate="yes" xml:space="preserve">
          <source>What machines support Perl? Where do I get it?</source>
          <target state="translated">Perl をサポートしているマシンは?どこで入手できますか?</target>
        </trans-unit>
        <trans-unit id="602afa592af7887a3bffb104fc775a95a31125b0" translate="yes" xml:space="preserve">
          <source>What mailing lists are there for Perl?</source>
          <target state="translated">Perl のためのメーリングリストはありますか?</target>
        </trans-unit>
        <trans-unit id="4862bb3e93457f890d9e122c5362daa5b89c1284" translate="yes" xml:space="preserve">
          <source>What makes a method special is</source>
          <target state="translated">メソッドを特別なものにしているのは</target>
        </trans-unit>
        <trans-unit id="c65301b41224a5b616b4c8a04b46b840cdda0ef5" translate="yes" xml:space="preserve">
          <source>What makes all of this important is that the Exporter module uses glob aliasing as the import/export mechanism. Whether or not you can properly localize a variable that has been exported from a module depends on how it was exported:</source>
          <target state="translated">これらすべてを重要なものにしているのは、Exporter モジュールが import/export メカニズムとして glob aliasing を使用していることです。モジュールからエクスポートされた変数を適切にローカライズできるかどうかは、どのようにエクスポートされたかに依存します。</target>
        </trans-unit>
        <trans-unit id="8fb5a283f17d0d098d1490569f3aaeb90f52254c" translate="yes" xml:space="preserve">
          <source>What makes for a good patch?</source>
          <target state="translated">何が良いパッチになるのか?</target>
        </trans-unit>
        <trans-unit id="486e1e8fa6072821d31ad344e76845b470464a6d" translate="yes" xml:space="preserve">
          <source>What makes this pass interesting for perl developers is that some optimization may be performed on this pass. This is optimization by so-called &quot;check routines&quot;. The correspondence between node names and corresponding check routines is described in</source>
          <target state="translated">perl開発者にとってこのパスが面白いのは、このパスで何らかの最適化が行われる可能性があるということです。これはいわゆる「チェックルーチン」による最適化です。ノード名と対応するチェックルーチンの対応については</target>
        </trans-unit>
        <trans-unit id="7c3d71cb8c06e618edc314c89194f61b595a4c29" translate="yes" xml:space="preserve">
          <source>What modules and extensions are available for Perl? What is CPAN?</source>
          <target state="translated">Perlにはどのようなモジュールや拡張機能がありますか?CPANとは何ですか?</target>
        </trans-unit>
        <trans-unit id="709f8e1c07fc1fe28e0f229bb8ce88d468c08c8e" translate="yes" xml:space="preserve">
          <source>What modules shipped with versions of perl</source>
          <target state="translated">perl のバージョンに同梱されているモジュール</target>
        </trans-unit>
        <trans-unit id="d5f3978619a4438d900606a19c92b7d1f8afc742" translate="yes" xml:space="preserve">
          <source>What regop is next?</source>
          <target state="translated">次はどんなレゴップ?</target>
        </trans-unit>
        <trans-unit id="88176d2562c5c584253c31b2148c8703789870d4" translate="yes" xml:space="preserve">
          <source>What seems a successful strategy is the combination of &lt;code&gt;reload
cpan&lt;/code&gt; and the debugging switches. Add a new debug statement while running in the shell and then issue a &lt;code&gt;reload cpan&lt;/code&gt; and see the new debugging messages immediately without losing the current context.</source>
          <target state="translated">成功した戦略のように思われるのは、 &lt;code&gt;reload cpan&lt;/code&gt; とデバッグスイッチの組み合わせです。シェルで実行中に新しいデバッグステートメントを追加し、 &lt;code&gt;reload cpan&lt;/code&gt; を発行すると、現在のコンテキストを失うことなく、新しいデバッグメッセージがすぐに表示されます。</target>
        </trans-unit>
        <trans-unit id="494e70de221fde56713efc23ab1ca24064c718dc" translate="yes" xml:space="preserve">
          <source>What should I make into a module?</source>
          <target state="translated">何をモジュールにすればいいの?</target>
        </trans-unit>
        <trans-unit id="0e5fb1910c7b0867ac71d8402069e7fbfc90bc05" translate="yes" xml:space="preserve">
          <source>What some helper &lt;b&gt;process&lt;/b&gt; did to transform the incoming data into a form more suitable for the current process. Often done with an incoming &lt;b&gt;pipe&lt;/b&gt;. See also &lt;b&gt;C preprocessor&lt;/b&gt;.</source>
          <target state="translated">いくつかのヘルパー&lt;b&gt;プロセス&lt;/b&gt;が受信データを現在のプロセスにより適した形式に変換するために行ったこと。多くの場合、着信&lt;b&gt;パイプで&lt;/b&gt;行われます。&lt;b&gt;Cプリプロセッサ&lt;/b&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="05edee69ab0b091485f39a349759f585c24e0340" translate="yes" xml:space="preserve">
          <source>What the program or function returns, if successful. This section can be omitted for programs whose precise exit codes aren't important, provided they return 0 on success and non-zero on failure as is standard. It should always be present for functions. For modules, it may be useful to summarize return values from the module interface here, or it may be more useful to discuss return values separately in the documentation of each function or method the module provides.</source>
          <target state="translated">プログラムや関数が成功した場合に何を返すか。成功した場合は0を返し、失敗した場合は0以外の値を返すという標準的な条件であれば、正確な終了コードが重要ではないプログラムの場合は、このセクションを省略することができます。関数の場合は、常にこのセクションは存在しなければなりません。モジュールの場合は、モジュールのインターフェイスからの戻り値をここにまとめておくと便利ですし、モジュールが提供する各関数やメソッドのドキュメントの中で、戻り値について個別に説明しておくとより便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="b11685dda194db5e13d9f10a2284151cb724112f" translate="yes" xml:space="preserve">
          <source>What this does is creates a new binary op, and feeds it a number of variables. The variables refer to the tokens: &lt;code&gt;$1&lt;/code&gt; is the first token in the input, &lt;code&gt;$2&lt;/code&gt; the second, and so on - think regular expression backreferences. &lt;code&gt;$$&lt;/code&gt; is the op returned from this reduction. So, we call &lt;code&gt;newBINOP&lt;/code&gt; to create a new binary operator. The first parameter to &lt;code&gt;newBINOP&lt;/code&gt; , a function in</source>
          <target state="translated">これにより、新しいバイナリopが作成され、いくつかの変数が提供されます。変数はトークンを参照します。 &lt;code&gt;$1&lt;/code&gt; は入力の最初のトークン、 &lt;code&gt;$2&lt;/code&gt; は2番目のトークンというように、正規表現の後方参照を考えます。 &lt;code&gt;$$&lt;/code&gt; は、この削減から返される演算です。したがって、 &lt;code&gt;newBINOP&lt;/code&gt; を呼び出して新しい2項演算子を作成します。の関数 &lt;code&gt;newBINOP&lt;/code&gt; の最初のパラメータ</target>
        </trans-unit>
        <trans-unit id="4cc8ecd0e95182504b6e5e23619c1654db502160" translate="yes" xml:space="preserve">
          <source>What this means is that if you have data written by Storable 1.x running on perl 5.6.0 or 5.6.1 configured with 64 bit integers on Unix or Linux then by default this Storable will refuse to read it, giving the error</source>
          <target state="translated">これは何を意味しているのかというと、Storable 1.x が Unix や Linux 上で perl 5.6.0 や 5.6.1 で 64 ビット整数で設定したデータを実行している場合、デフォルトではこの Storable はそのデータの読み込みを拒否して</target>
        </trans-unit>
        <trans-unit id="c1074e9471d381d1e3fa377b4baeab5a37484773" translate="yes" xml:space="preserve">
          <source>What this means is that unless the &lt;code&gt;/a&lt;/code&gt; modifier is in effect &lt;code&gt;\d&lt;/code&gt; not only matches the digits '0' - '9', but also Arabic, Devanagari, and digits from other languages. This may cause some confusion, and some security issues.</source>
          <target state="translated">つまり、 &lt;code&gt;/a&lt;/code&gt; 修飾子が有効でない限り、 &lt;code&gt;\d&lt;/code&gt; は数字の「0」〜「9」だけでなく、アラビア語、デーバナーガリー文字、および他の言語の数字にも一致します。これにより、混乱やセキュリティ上の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b90ef1b55a5f8c0ad6415f98413e6a092c07a530" translate="yes" xml:space="preserve">
          <source>What to put after &quot;1/crontab&quot; in the URL. This option is not set by default.</source>
          <target state="translated">URLの「1/crontab」の後に何を入れるか。このオプションはデフォルトでは設定されていません。</target>
        </trans-unit>
        <trans-unit id="616a4166af25f3f615ff259d316398355eca1fd7" translate="yes" xml:space="preserve">
          <source>What to put after &quot;Foo%3a%3aBar&quot; in the URL. This option is not set by default.</source>
          <target state="translated">URLの「Foo%3a%3aBar」の後に何を入れるか。このオプションはデフォルトでは設定されていません。</target>
        </trans-unit>
        <trans-unit id="774021bac19bdf5e083a7ddf41b218a869e89eea" translate="yes" xml:space="preserve">
          <source>What to put before and after the title in the head. The values should already be &amp;amp;-escaped.</source>
          <target state="translated">頭のタイトルの前後に何を置くか。値はすでにエスケープされているはずです。</target>
        </trans-unit>
        <trans-unit id="46d727439e117340febafb43135cffaac5ab87fa" translate="yes" xml:space="preserve">
          <source>What utilities shipped with versions of perl</source>
          <target state="translated">perl のバージョンに同梱されているユーティリティ</target>
        </trans-unit>
        <trans-unit id="79f6137e22ba58dcead1d29483955dc880eaf485" translate="yes" xml:space="preserve">
          <source>What was in this chunk of memory? Numbers, characters, or a mixture of both? Assuming that we're on a computer where ASCII (or some similar) encoding is used: hexadecimal values in the range &lt;code&gt;0x40&lt;/code&gt; - &lt;code&gt;0x5A&lt;/code&gt; indicate an uppercase letter, and &lt;code&gt;0x20&lt;/code&gt; encodes a space. So we might assume it is a piece of text, which some are able to read like a tabloid; but others will have to get hold of an ASCII table and relive that firstgrader feeling. Not caring too much about which way to read this, we note that &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; with the template code &lt;code&gt;H&lt;/code&gt; converts the contents of a sequence of bytes into the customary hexadecimal notation. Since &quot;a sequence of&quot; is a pretty vague indication of quantity, &lt;code&gt;H&lt;/code&gt; has been defined to convert just a single hexadecimal digit unless it is followed by a repeat count. An asterisk for the repeat count means to use whatever remains.</source>
          <target state="translated">このメモリのチャンクには何がありましたか？数字、文字、またはその両方の組み合わせ？範囲の16進数値：我々はASCII（または類似の）符号化が使用されているコンピューターにしていると仮定すると、 &lt;code&gt;0x40&lt;/code&gt; の - &lt;code&gt;0x5A&lt;/code&gt; は、大文字を示し、 &lt;code&gt;0x20&lt;/code&gt; にエンコード空間。したがって、これはテキストの一部であると想定するかもしれません。しかし、ASCIIテーブルを手に入れて、その1年生の感覚を追体験する人もいます。これをどのように読むかについてあまり気にしないで、テンプレートコード &lt;code&gt;H&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; と、バイトシーケンスの内容が通常の16進表記に変換されることに注意してください。 「のシーケンス」は量のかなり漠然とした指標なので、 &lt;code&gt;H&lt;/code&gt; 繰り返し回数が続く場合を除いて、1つの16進数のみを変換するように定義されています。繰り返し回数のアスタリスクは、残っているものをすべて使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="16a26aa5328e43e90f045fe86149fb674a158916" translate="yes" xml:space="preserve">
          <source>What we actually need to do is expand the width of the fields. The &lt;code&gt;A&lt;/code&gt; format pads any non-existent characters with spaces, so we can use the additional spaces to line up our fields, like this:</source>
          <target state="translated">実際に必要なのは、フィールドの幅を広げることです。 &lt;code&gt;A&lt;/code&gt; のフォーマットパッド、私たちはこのように、私たちのフィールドをラインアップするために追加のスペースを使用することができ、スペースを持つ存在しない文字：</target>
        </trans-unit>
        <trans-unit id="0c37b176ea3009646e0be80ec6a53f25b8ff9dcd" translate="yes" xml:space="preserve">
          <source>What we have described so far is the single form of the &lt;code&gt;\p{...}&lt;/code&gt; character classes. There is also a compound form which you may run into. These look like &lt;code&gt;\p{name=value}&lt;/code&gt; or &lt;code&gt;\p{name:value}&lt;/code&gt; (the equals sign and colon can be used interchangeably). These are more general than the single form, and in fact most of the single forms are just Perl-defined shortcuts for common compound forms. For example, the script examples in the previous paragraph could be written equivalently as &lt;code&gt;\p{Script=Latin}&lt;/code&gt; , &lt;code&gt;\p{Script:Greek}&lt;/code&gt; , &lt;code&gt;\p{script=katakana}&lt;/code&gt; , and &lt;code&gt;\P{script=balinese}&lt;/code&gt; (case is irrelevant between the &lt;code&gt;{}&lt;/code&gt; braces). You may never have to use the compound forms, but sometimes it is necessary, and their use can make your code easier to understand.</source>
          <target state="translated">これまでに説明したのは、 &lt;code&gt;\p{...}&lt;/code&gt; 文字クラスの単一の形式です。あなたが遭遇するかもしれない複合形もあります。これらは &lt;code&gt;\p{name=value}&lt;/code&gt; または &lt;code&gt;\p{name:value}&lt;/code&gt; ように見えます（等号とコロンは互換的に使用できます）。これらは単一のフォームよりも一般的であり、実際、ほとんどの単一のフォームは一般的な複合フォームの単なるPerl定義のショートカットです。たとえば、前の段落のスクリプト例は、 &lt;code&gt;\p{Script=Latin}&lt;/code&gt; 、 &lt;code&gt;\p{Script:Greek}&lt;/code&gt; 、 &lt;code&gt;\p{script=katakana}&lt;/code&gt; 、および &lt;code&gt;\P{script=balinese}&lt;/code&gt; として同等に書くことができます（ケースは &lt;code&gt;{}&lt;/code&gt; とは無関係ブレース）。複合フォームを使用する必要がない場合もありますが、必要な場合もあり、それらを使用するとコードが理解しやすくなります。</target>
        </trans-unit>
        <trans-unit id="3384939add5296135f386c16a3d5a3c4d7477676" translate="yes" xml:space="preserve">
          <source>What you are told when someone thinks you should Read The Fine Manual.</source>
          <target state="translated">ファインマニュアルを読んだ方がいいと思われた時に言われること</target>
        </trans-unit>
        <trans-unit id="5da1aaeac7913632bcb1c91e0e40a9b8f5b306d1" translate="yes" xml:space="preserve">
          <source>What you can do is calculate the MD5 checksum of the UTF-8 representation of such strings. This is achieved by filtering the string through encode_utf8() function:</source>
          <target state="translated">このような文字列の UTF-8 表現の MD5 チェックサムを計算することができます。これは encode_utf8()関数で文字列をフィルタリングすることで実現します。</target>
        </trans-unit>
        <trans-unit id="bdac7845b72b0a0aaba866c488e59de83492ce2f" translate="yes" xml:space="preserve">
          <source>What you get from your ancestors, genetically or otherwise. If you happen to be a &lt;b&gt;class&lt;/b&gt;, your ancestors are called &lt;b&gt;base classes&lt;/b&gt; and your descendants are called &lt;b&gt;derived classes&lt;/b&gt;. See &lt;b&gt;single inheritance&lt;/b&gt; and &lt;b&gt;multiple inheritance&lt;/b&gt;.</source>
          <target state="translated">先祖から得たもの、遺伝的またはその他。たまたま&lt;b&gt;クラス&lt;/b&gt;になった場合、祖先は&lt;b&gt;基本クラス&lt;/b&gt;と呼ばれ、子孫は&lt;b&gt;派生クラス&lt;/b&gt;と呼ばれ&lt;b&gt;ます&lt;/b&gt;。&lt;b&gt;単一継承&lt;/b&gt;と&lt;b&gt;多重継承を&lt;/b&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2c06f68d01c975c0659982cd1d1ea555fe3696b9" translate="yes" xml:space="preserve">
          <source>What you get when you do &lt;code&gt;Perl++&lt;/code&gt; twice. Doing it only once will curl your hair. You have to increment it eight times to shampoo your hair. Lather, rinse, iterate.</source>
          <target state="translated">&lt;code&gt;Perl++&lt;/code&gt; 2回実行したときに得られるもの。1回だけ行うと、髪がカールします。髪をシャンプーするには、8回インクリメントする必要があります。泡立てて、すすぎ、繰り返します。</target>
        </trans-unit>
        <trans-unit id="d8dd19339629eae0964d65277b9af39d2d940ac8" translate="yes" xml:space="preserve">
          <source>What you probably want instead is this:</source>
          <target state="translated">代わりに欲しいのはこれでしょう。</target>
        </trans-unit>
        <trans-unit id="b04bf6a0eeeb74b4ebb74c0ffdfd7f57764ab34f" translate="yes" xml:space="preserve">
          <source>What you want to use instead is:</source>
          <target state="translated">代わりに使いたいのは</target>
        </trans-unit>
        <trans-unit id="f3ca9a26fe44a59f17183be2ef23ecb124cf272f" translate="yes" xml:space="preserve">
          <source>What's MakeMaker?</source>
          <target state="translated">MakeMakerとは?</target>
        </trans-unit>
        <trans-unit id="42464d9de4a99557d583081f2fb3c257e19a8cfc" translate="yes" xml:space="preserve">
          <source>What's Really Stored in an SV?</source>
          <target state="translated">SVには何が収納されているのか?</target>
        </trans-unit>
        <trans-unit id="8f84a94f1018dae65b2467147ba94f01d14ea50b" translate="yes" xml:space="preserve">
          <source>What's a closure?</source>
          <target state="translated">クロージングってなんだ?</target>
        </trans-unit>
        <trans-unit id="a80aec1f19639cbbb28c71d9ddfac9f28b371cff" translate="yes" xml:space="preserve">
          <source>What's an extension?</source>
          <target state="translated">延長ってなんだ?</target>
        </trans-unit>
        <trans-unit id="96c69ba1e09918b49d4e34120c9bbb2d0968449e" translate="yes" xml:space="preserve">
          <source>What's in Plan 9 Perl</source>
          <target state="translated">Plan 9 Perl の中身</target>
        </trans-unit>
        <trans-unit id="e9c4131b2629bb86dafeed8bcd2c9f6a25583f3a" translate="yes" xml:space="preserve">
          <source>What's in a name?</source>
          <target state="translated">名前に何があるの?</target>
        </trans-unit>
        <trans-unit id="5131dc0eec6cff59e581098235ddc4625176b69a" translate="yes" xml:space="preserve">
          <source>What's new here?</source>
          <target state="translated">何が新しいの?</target>
        </trans-unit>
        <trans-unit id="22ab29c1c9e23b6be4d152ca0fbe8d1fd5003e73" translate="yes" xml:space="preserve">
          <source>What's not in Plan 9 Perl</source>
          <target state="translated">Plan 9 Perl にないもの</target>
        </trans-unit>
        <trans-unit id="5d2b08ade1fd6cb20cb499440eecabb1a859edc0" translate="yes" xml:space="preserve">
          <source>What's that &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;? Well, the arguments to a subroutine are available to us as a special array called &lt;code&gt;@_&lt;/code&gt; (see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for more on that). The default argument to the &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; function just happens to be &lt;code&gt;@_&lt;/code&gt; . So &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $logmessage = &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;;&lt;/code&gt; shifts the first item off the list of arguments and assigns it to &lt;code&gt;$logmessage&lt;/code&gt; .</source>
          <target state="translated">その &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 何ですか？まあ、サブルーチンの引数と呼ばれる特殊な配列として、私たちに用意されてい &lt;code&gt;@_&lt;/code&gt; （参照&lt;a href=&quot;perlvar&quot;&gt;はperlvar&lt;/a&gt;その上の多くのために）。 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 関数のデフォルトの引数はたまたま &lt;code&gt;@_&lt;/code&gt; です。だから &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $logmessage = &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;;&lt;/code&gt; 引数のリストから最初の項目をシフトし、それを &lt;code&gt;$logmessage&lt;/code&gt; 割り当てます。</target>
        </trans-unit>
        <trans-unit id="46db4fba6102cb384fdb3af284b14f9799d7a634" translate="yes" xml:space="preserve">
          <source>What's the difference between &quot;delete&quot; and &quot;undef&quot; with hashes?</source>
          <target state="translated">ハッシュを使った「delete」と「undef」の違いは?</target>
        </trans-unit>
        <trans-unit id="efcfc0c915c5ced8aa18fe665d7a6bf921317ac3" translate="yes" xml:space="preserve">
          <source>What's the difference between &quot;perl&quot; and &quot;Perl&quot;?</source>
          <target state="translated">perl」と「Perl」の違いは?</target>
        </trans-unit>
        <trans-unit id="63f076d778aa21d0e84626f4c5e0c5b8d663503c" translate="yes" xml:space="preserve">
          <source>What's the difference between &lt;code&gt;UTF-8&lt;/code&gt; and &lt;code&gt;utf8&lt;/code&gt; ?</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; と &lt;code&gt;utf8&lt;/code&gt; の違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="9c1cf1781cda10277aefd4a7483c6c07d76809d8" translate="yes" xml:space="preserve">
          <source>What's the difference between UTF-8 and utf8?</source>
          <target state="translated">UTF-8とutf8の違いは?</target>
        </trans-unit>
        <trans-unit id="1a32eae97c19fcd8cd7ae50ba5b1fb91847cfda9" translate="yes" xml:space="preserve">
          <source>What's the difference between calling a function as &amp;amp;foo and foo()?</source>
          <target state="translated">＆fooとfoo（）として関数を呼び出すことの違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="def2247288e4f5204ba55472b4461e996492e2e7" translate="yes" xml:space="preserve">
          <source>What's the difference between deep and shallow binding?</source>
          <target state="translated">深いバインディングと浅いバインディングの違いは?</target>
        </trans-unit>
        <trans-unit id="95fdb9749f45655e65a25dc015c0a84e8ebabe59" translate="yes" xml:space="preserve">
          <source>What's the difference between dynamic and lexical (static) scoping? Between local() and my()?</source>
          <target state="translated">動的スコーピングと語彙的(静的)スコーピングの違いは何ですか?local()とmy()の違いは?</target>
        </trans-unit>
        <trans-unit id="83bcf34d32fd45bb7e4990d1041e30347690cdee" translate="yes" xml:space="preserve">
          <source>What's the difference between require and use?</source>
          <target state="translated">requireとuseの違いは?</target>
        </trans-unit>
        <trans-unit id="e20e3ec3698a540277cd6005030f3f2eae027cdc" translate="yes" xml:space="preserve">
          <source>What's wrong with *-w* and $^W</source>
          <target state="translated">何がいけないのかというと、*-w*と$^w</target>
        </trans-unit>
        <trans-unit id="d8abb891068053380c8e2c57ccfc03bd7f1c3bec" translate="yes" xml:space="preserve">
          <source>What's wrong with &lt;b&gt;-w&lt;/b&gt; and &lt;code&gt;$^W&lt;/code&gt;</source>
          <target state="translated">&lt;b&gt;-w&lt;/b&gt;と &lt;code&gt;$^W&lt;/code&gt; 何が問題になっていますか</target>
        </trans-unit>
        <trans-unit id="86c8915176784b924b124a7df71bcedbc4d5aeac" translate="yes" xml:space="preserve">
          <source>What's wrong with always quoting &quot;$vars&quot;?</source>
          <target state="translated">いつも「$vars」を引用して何が悪いの?</target>
        </trans-unit>
        <trans-unit id="a6b6f35263a6c409ef4d9ea90bf4d23520808808" translate="yes" xml:space="preserve">
          <source>What's wrong with using backticks in a void context?</source>
          <target state="translated">ボイドコンテキストでバックトークを使って何が悪いんだ?</target>
        </trans-unit>
        <trans-unit id="15b450eb4383c04ae9890e63ad467617d37b687c" translate="yes" xml:space="preserve">
          <source>What's wrong with using grep in a void context?</source>
          <target state="translated">voidコンテキストでgrepを使うことの何がいけないのですか?</target>
        </trans-unit>
        <trans-unit id="48dabfbbabfdd23fd6a91f1e79b5b5393e8fc727" translate="yes" xml:space="preserve">
          <source>What's wrong?</source>
          <target state="translated">どうしたの?</target>
        </trans-unit>
        <trans-unit id="81f7ea2721e1db165495605d1bf1128fca1fe7a9" translate="yes" xml:space="preserve">
          <source>Whatever a reference refers to, which may or may not have a name. Common types of referents include scalars, arrays, hashes, and subroutines.</source>
          <target state="translated">参照が参照するものは何であれ、名前があってもなくても構いません。一般的な参照の型には、スカラ、配列、ハッシュ、サブルーチンなどがあります。</target>
        </trans-unit>
        <trans-unit id="088ce6907b9c85d16edc0ae58b2aca12ddc17aac" translate="yes" xml:space="preserve">
          <source>Whatever happens in the RE engine might be better discussed in &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;, but for the sake of continuity, we shall do so here.</source>
          <target state="translated">REエンジンで何が起こっても、&lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;でよりよく議論されるかもしれませんが、継続性のために、ここでそれを行うことにします。</target>
        </trans-unit>
        <trans-unit id="f153d99158c54cb43c1d3fc8596ddbfe423f08fe" translate="yes" xml:space="preserve">
          <source>Whatever you want to do with a reference, &lt;b&gt;Use Rule 1&lt;/b&gt; tells you how to do it. You just write the Perl code that you would have written for doing the same thing to a regular array or hash, and then replace the array or hash name with &lt;code&gt;{$reference}&lt;/code&gt; . &quot;How do I loop over an array when all I have is a reference?&quot; Well, to loop over an array, you would write</source>
          <target state="translated">参照で何をしたい場合でも、&lt;b&gt;ルール1を使用する&lt;/b&gt;と、その方法がわかります。通常の配列またはハッシュに同じことを行うために作成したPerlコードを作成し、配列またはハッシュの名前を &lt;code&gt;{$reference}&lt;/code&gt; 置き換えるだけです。「参照がある場合、配列をループするにはどうすればよいですか？」配列をループするには、次のように書きます。</target>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">When</target>
        </trans-unit>
        <trans-unit id="7ae3880ea71f58f5dbf3834e6e0d70053eb70246" translate="yes" xml:space="preserve">
          <source>When &quot;&lt;code&gt;::&lt;/code&gt; &quot; is not in the name, &quot;&lt;code&gt;Encode::&lt;/code&gt; &quot; is assumed.</source>
          <target state="translated">「 &lt;code&gt;::&lt;/code&gt; 」が名前に含まれていない場合、「 &lt;code&gt;Encode::&lt;/code&gt; 」が想定されます。</target>
        </trans-unit>
        <trans-unit id="a89c66deca9575739eac57be484648de00b11290" translate="yes" xml:space="preserve">
          <source>When $data is present, sets the instance data to $data and returns the object itself. Otherwise, the current instance data is returned.</source>
          <target state="translated">dataが存在する場合は、インスタンスデータを$dataに設定し、オブジェクト自体を返します。それ以外の場合は、現在のインスタンスデータを返します。</target>
        </trans-unit>
        <trans-unit id="5ea5db67e72bdcabd78dcc6373fac87d452cfae7" translate="yes" xml:space="preserve">
          <source>When $encoding is omitted, it defaults to utf8 if $data is already in utf8 or &quot;&quot; (empty string) otherwise.</source>
          <target state="translated">エンコーディングが省略された場合、 $data が既に utf8 である場合は utf8 をデフォルトとします。(空文字列)でなければ</target>
        </trans-unit>
        <trans-unit id="3a255f10977ad0e9fd4eef99c75ca5b6bedb2369" translate="yes" xml:space="preserve">
          <source>When $encoding is present, sets the instance encoding to $encoding and returns the object itself. Otherwise, the current instance encoding is returned.</source>
          <target state="translated">エンコーディングが存在する場合は、インスタンスのエンコーディングを $encoding に設定し、オブジェクト自体を返します。それ以外の場合は、現在のインスタンスのエンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="c1731c29e738a553728a82585755466ae75d0743" translate="yes" xml:space="preserve">
          <source>When $walker is called, it traverses the subroutines supplied when it was created, and renders them using the current style. You can change the style afterwards in several different ways:</source>
          <target state="translated">walkerが呼ばれると、それが作成されたときに与えられたサブルーチンを通過し、現在のスタイルを使ってレンダリングします。その後、いくつかの方法でスタイルを変更することができます。</target>
        </trans-unit>
        <trans-unit id="34501938bea4725e00e5d23af26af9e9de4937a2" translate="yes" xml:space="preserve">
          <source>When 'make clean' or similar is run, the $(FIRST_MAKEFILE) will be backed up at this location.</source>
          <target state="translated">make clean' などを実行すると、$(FIRST_MAKEFILE)がこの場所にバックアップされます。</target>
        </trans-unit>
        <trans-unit id="9a46234156e6749e9bc38b78f59bb3969925d8bf" translate="yes" xml:space="preserve">
          <source>When &lt;b&gt;--compat-version&lt;/b&gt; (&lt;b&gt;-b&lt;/b&gt;) is present the generated tests will use &lt;code&gt;Test::More&lt;/code&gt; rather than &lt;code&gt;Test&lt;/code&gt; which is the default for versions before 5.6.2. &lt;code&gt;Test::More&lt;/code&gt; will be added to PREREQ_PM in the generated &lt;code&gt;Makefile.PL&lt;/code&gt; .</source>
          <target state="translated">場合&lt;b&gt;--compatバージョン&lt;/b&gt;（&lt;b&gt;-bが&lt;/b&gt;）存在する生成されたテストは、使用する &lt;code&gt;Test::More&lt;/code&gt; ではなく、 &lt;code&gt;Test&lt;/code&gt; 5.6.2以前のバージョンのデフォルトです。 &lt;code&gt;Test::More&lt;/code&gt; は、生成された &lt;code&gt;Makefile.PL&lt;/code&gt; の PREREQ_PMに追加されます。</target>
        </trans-unit>
        <trans-unit id="98323433c84745d96d2f69c24c5375707e53e818" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$/&lt;/code&gt; is set to &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, when &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; is in scalar context (i.e., file slurp mode), and when an empty file is read, it returns &lt;code&gt;''&lt;/code&gt; the first time, followed by &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; subsequently.</source>
          <target state="translated">ときに &lt;code&gt;$/&lt;/code&gt; に設定されている &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をするとき、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; のはスカラーコンテキストである（つまり、ファイル吸い込みモード）、および空のファイルが読み込まれたとき、それは返す &lt;code&gt;''&lt;/code&gt; に続いて、最初の時間を &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を後に。</target>
        </trans-unit>
        <trans-unit id="d7865066f4690dc076b5908415bb1b4ea7d2066d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$/&lt;/code&gt; is set to &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, when &lt;code&gt;&lt;a href=&quot;readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; is in scalar context (i.e., file slurp mode), and when an empty file is read, it returns &lt;code&gt;''&lt;/code&gt; the first time, followed by &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; subsequently.</source>
          <target state="translated">ときに &lt;code&gt;$/&lt;/code&gt; に設定されている &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; をするとき、 &lt;code&gt;&lt;a href=&quot;readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; のはスカラーコンテキストである（つまり、ファイル吸い込みモード）、および空のファイルが読み込まれたとき、それは返す &lt;code&gt;''&lt;/code&gt; に続いて、最初の時間を &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を後に。</target>
        </trans-unit>
        <trans-unit id="75765cbe47d6e2730ecd17d719657c6826993abb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$input_filename_or_reference&lt;/code&gt; maps to multiple compressed files/buffers and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a single file/buffer, after uncompression &lt;code&gt;$output_filename_or_reference&lt;/code&gt; will contain a concatenation of all the uncompressed data from each of the input files/buffers.</source>
          <target state="translated">ときに &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 、複数の圧縮ファイル/バッファにマッピングして、 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 解凍後、単一のファイル/バッファである &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 入力ファイル/バッファのそれぞれからの全ての非圧縮データの連結が含まれています。</target>
        </trans-unit>
        <trans-unit id="ead5ec1ebcf9002ff366c3f4b5ecf105bcef3b1c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$input_filename_or_reference&lt;/code&gt; maps to multiple files/buffers and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a single file/buffer the input files/buffers will be stored in &lt;code&gt;$output_filename_or_reference&lt;/code&gt; as a concatenated series of compressed data streams.</source>
          <target state="translated">とき &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 複数のファイル/バッファにマッピングし、 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 単一のファイルである/入力ファイル/バッファをバッファに格納されます &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 圧縮されたデータの連結一連のストリームとして。</target>
        </trans-unit>
        <trans-unit id="42c11e18ef09b7c84100ba9f7d909d637366a78e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$input_filename_or_reference&lt;/code&gt; maps to multiple files/buffers and &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is a single file/buffer the input files/buffers will each be stored in &lt;code&gt;$output_filename_or_reference&lt;/code&gt; as a distinct entry.</source>
          <target state="translated">とき &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 複数のファイル/バッファにマッピングし、 &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 単一のファイルである/入力ファイルをバッファ/バッファは、それぞれに格納されます &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 個別のエントリとして。</target>
        </trans-unit>
        <trans-unit id="161359b9eacea931dac1aa6e52278dc1eae64067" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$output_filename_or_reference&lt;/code&gt; is an fileglob string, &lt;code&gt;$input_filename_or_reference&lt;/code&gt; must also be a fileglob string. Anything else is an error.</source>
          <target state="translated">とき &lt;code&gt;$output_filename_or_reference&lt;/code&gt; fileglob文字列で、 &lt;code&gt;$input_filename_or_reference&lt;/code&gt; またfileglob文字列でなければなりません。それ以外はエラーです。</target>
        </trans-unit>
        <trans-unit id="2506bf0aaa0a66933521706c1367d6dcef56da1b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;${^UNICODE}&lt;/code&gt; (available starting in v5.8.2) exists and is non-zero, these options will be completely ignored. See &lt;a href=&quot;perlvar#%24%7b%5eUNICODE%7d&quot;&gt;${^UNICODE} in perlvar&lt;/a&gt; and &lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C in perlrun&lt;/a&gt; for details.</source>
          <target state="translated">場合 &lt;code&gt;${^UNICODE}&lt;/code&gt; （v5.8.2で入手可能な出発）が存在し、非ゼロである、これらのオプションは完全に無視されます。詳細について&lt;a href=&quot;perlvar#%24%7b%5eUNICODE%7d&quot;&gt;は、perlvarの$ {^ UNICODE}&lt;/a&gt;およびperlrunの&lt;a href=&quot;perlrun#-C-%5bnumber%2flist%5d&quot;&gt;-C&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b7dd1602a2fa020d33fb149e95e48b61aba92e31" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;'s arguments are executed indirectly by the shell, results and return codes are subject to its quirks. See &lt;a href=&quot;perlop#%60STRING%60&quot;&gt;`STRING` in perlop&lt;/a&gt; and &lt;a href=&quot;#exec&quot;&gt;exec&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; の引数がシェルによって間接的に実行される場合、結果と戻りコードはその癖に左右されます。詳細について&lt;a href=&quot;perlop#%60STRING%60&quot;&gt;は、perlop&lt;/a&gt;および&lt;a href=&quot;#exec&quot;&gt;execの&lt;/a&gt;「STRING」を参照してください。</target>
        </trans-unit>
        <trans-unit id="ce37de4fd1569bb63f53c7c4c16cdb716157400b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (but not &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ) is in effect, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt; LIST&lt;/code&gt; sorts LIST according to the current collation locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; （ただし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ）有効である、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt; LIST&lt;/code&gt; 現在の照合ロケールに従ってリストをソートします。&lt;a href=&quot;perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c4b89dec84fb05fc282a0e80acf7739b8c5833a7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re '/flags'&lt;/code&gt; is specified, the given flags are automatically added to every regular expression till the end of the lexical scope.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re '/flags'&lt;/code&gt; 指定され、指定したフラグは自動的にレキシカルスコープの終わりまで、すべての正規表現に追加されます。</target>
        </trans-unit>
        <trans-unit id="826f4d022e4908a4bde930341263c135e67935f4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'debug'&lt;/code&gt; is in effect, perl emits debugging messages when compiling and using regular expressions. The output is the same as that obtained by running a &lt;code&gt;-DDEBUGGING&lt;/code&gt; -enabled perl interpreter with the &lt;b&gt;-Dr&lt;/b&gt; switch. It may be quite voluminous depending on the complexity of the match. Using &lt;code&gt;debugcolor&lt;/code&gt; instead of &lt;code&gt;debug&lt;/code&gt; enables a form of output that can be used to get a colorful display on terminals that understand termcap color sequences. Set &lt;code&gt;$ENV{PERL_RE_TC}&lt;/code&gt; to a comma-separated list of &lt;code&gt;termcap&lt;/code&gt; properties to use for highlighting strings on/off, pre-point part on/off. See &lt;a href=&quot;perldebug#Debugging-Regular-Expressions&quot;&gt;Debugging Regular Expressions in perldebug&lt;/a&gt; for additional info.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'debug'&lt;/code&gt; 有効である正規表現をコンパイルして使用した場合、perlの発するメッセージをデバッグします。出力は、&lt;b&gt;-Dr&lt;/b&gt;スイッチを指定して &lt;code&gt;-DDEBUGGING&lt;/code&gt; が有効な perlインタープリターを実行した場合と同じです。試合の複雑さによってはかなり膨大になる場合があります。使用 &lt;code&gt;debugcolor&lt;/code&gt; をするのではなく &lt;code&gt;debug&lt;/code&gt; はtermcapカラーシーケンスを理解端末上で色鮮やかな表示を取得するために使用することができ、出力の形式を可能にします。セット &lt;code&gt;$ENV{PERL_RE_TC}&lt;/code&gt; のカンマ区切りリストへ &lt;code&gt;termcap&lt;/code&gt; オン/オフ文字列を強調表示するために使用するプロパティ、事前点部のオン/オフ。&lt;a href=&quot;perldebug#Debugging-Regular-Expressions&quot;&gt;perldebugでの正規表現のデバッグを&lt;/a&gt;参照してください。&lt;b&gt;&lt;/b&gt; 追加情報については。</target>
        </trans-unit>
        <trans-unit id="6c428ad9961e409888285c5019a1884325617653" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'eval'&lt;/code&gt; is in effect, a regexp is allowed to contain &lt;code&gt;(?{ ... })&lt;/code&gt; zero-width assertions and &lt;code&gt;(??{ ... })&lt;/code&gt; postponed subexpressions that are derived from variable interpolation, rather than appearing literally within the regexp. That is normally disallowed, since it is a potential security risk. Note that this pragma is ignored when the regular expression is obtained from tainted data, i.e. evaluation is always disallowed with tainted regular expressions. See &lt;a href=&quot;perlre#(%3f%7b-code-%7d)&quot;&gt;(?{ code }) in perlre&lt;/a&gt; and &lt;a href=&quot;perlre#(%3f%3f%7b-code-%7d)&quot;&gt;(??{ code }) in perlre&lt;/a&gt;.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'eval'&lt;/code&gt; 効果で、正規表現を含むことが許容される &lt;code&gt;(?{ ... })&lt;/code&gt; ゼロ幅アサーションおよび &lt;code&gt;(??{ ... })&lt;/code&gt; 延期変数補間から誘導される部分式ではなく、が現れます文字通り正規表現の範囲内。これは潜在的なセキュリティリスクであるため、通常は許可されません。汚染されたデータから正規表現が取得される場合、このプラグマは無視されることに注意してください。つまり、汚染された正規表現では評価は常に許可されません。参照&lt;a href=&quot;perlre#(%3f%7b-code-%7d)&quot;&gt;はperlreで（？{コード}）&lt;/a&gt;と&lt;a href=&quot;perlre#(%3f%3f%7b-code-%7d)&quot;&gt;はperlreに（?? {コード}） &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c489bf5f6075f7a85a4147bc159e1965fa8ad2cd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'strict'&lt;/code&gt; is in effect, stricter checks are applied than otherwise when compiling regular expressions patterns. These may cause more warnings to be raised than otherwise, and more things to be fatal instead of just warnings. The purpose of this is to find and report at compile time some things, which may be legal, but have a reasonable possibility of not being the programmer's actual intent. This automatically turns on the &lt;code&gt;&quot;regexp&quot;&lt;/code&gt; warnings category (if not already on) within its scope.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'strict'&lt;/code&gt; 有効な正規表現パターンをコンパイルするとき、より厳しいチェックがそうでなければより適用されます。これらにより、他の警告よりも多くの警告が発生し、警告だけでなく致命的な事態が発生する可能性があります。これの目的は、コンパイル時にいくつかのことを見つけて報告することです。これは合法であるかもしれませんが、プログラマーの実際の意図ではない合理的な可能性があります。これにより、スコープ内の &lt;code&gt;&quot;regexp&quot;&lt;/code&gt; 警告カテゴリ（まだオンになっていない場合）が自動的にオンになります。</target>
        </trans-unit>
        <trans-unit id="057f6216fa3faf81b159095b26d348ad7b06bd25" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'taint'&lt;/code&gt; is in effect, and a tainted string is the target of a regexp, the regexp memories (or values returned by the m// operator in list context) are tainted. This feature is useful when regexp operations on tainted data aren't meant to extract safe substrings, but to perform other transformations.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'taint'&lt;/code&gt; 有効であり、汚染された文字列が正規表現の対象である、正規表現のメモリ（または値はリストコンテキストにおけるm //オペレータによって返さ）汚染されています。この機能は、汚染されたデータに対する正規表現操作が安全な部分文字列を抽出するためではなく、他の変換を実行するために役立つ場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d35b2d737154679691874d190272f87d34f67d6b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;'s arguments are executed indirectly by the shell, results and return codes are subject to its quirks. See &lt;a href=&quot;../perlop#%60STRING%60&quot;&gt;`STRING` in perlop&lt;/a&gt; and &lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; の引数がシェルによって間接的に実行される場合、結果と戻りコードはその癖に左右されます。詳細について&lt;a href=&quot;../perlop#%60STRING%60&quot;&gt;は、perlop&lt;/a&gt;および&lt;a href=&quot;exec&quot;&gt;execの&lt;/a&gt;「STRING」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d249161b8d76a85447f9bcf8c19ecaa9c4041708" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (but not &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ) is in effect, &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt; LIST&lt;/code&gt; sorts LIST according to the current collation locale. See &lt;a href=&quot;../perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">ときに &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; （ただし、 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale 'not_characters'&lt;/code&gt; ）有効である、 &lt;code&gt;&lt;a href=&quot;sort&quot;&gt;sort&lt;/a&gt; LIST&lt;/code&gt; 現在の照合ロケールに従ってリストをソートします。&lt;a href=&quot;../perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9cb0ac41f5c76b7790f54d079dd94b8ce0665510" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Append&lt;/code&gt; is specified, and set to true, it will</source>
          <target state="translated">場合は &lt;code&gt;Append&lt;/code&gt; 指定し、trueに設定されている、それは意志</target>
        </trans-unit>
        <trans-unit id="74620e73df76b9793a4b5915498c084620ae1197" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;LimitOutout&lt;/code&gt; is not specified &lt;code&gt;$i-&amp;gt;bzinflate&lt;/code&gt; will use as much memory as it takes to write all the uncompressed data it creates by uncompressing the input buffer.</source>
          <target state="translated">&lt;code&gt;LimitOutout&lt;/code&gt; が指定されていない場合、 &lt;code&gt;$i-&amp;gt;bzinflate&lt;/code&gt; は、入力バッファーを解凍して作成したすべての非圧縮データを書き込むのに必要なだけのメモリを使用します。</target>
        </trans-unit>
        <trans-unit id="476db1003af9ea2b2d5dff0b4d9aae2335796a1b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;LimitOutout&lt;/code&gt; is not specified &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; will use as much memory as it takes to write all the uncompressed data it creates by uncompressing the input buffer.</source>
          <target state="translated">&lt;code&gt;LimitOutout&lt;/code&gt; が指定されていない場合、 &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; は、入力バッファーを解凍して作成したすべての非圧縮データを書き込むのに必要なだけのメモリを使用します。</target>
        </trans-unit>
        <trans-unit id="3a29eb1b7605b447e178aa583e1e3d0b18b3e32a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;LimitOutput&lt;/code&gt; is used the size of the output buffer used will either be the 16k or the amount of memory already allocated to &lt;code&gt;$output&lt;/code&gt; , whichever is larger. Predicting the output size available is tricky, so don't rely on getting an exact output buffer size.</source>
          <target state="translated">&lt;code&gt;LimitOutput&lt;/code&gt; が使用される場合、使用される出力バッファのサイズは、16kまたは &lt;code&gt;$output&lt;/code&gt; すでに割り当てられているメモリの量のいずれか大きい方になります。利用可能な出力サイズの予測は難しいので、正確な出力バッファーサイズを取得することに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="6884e67243b247f9f83c1056f56446e2954b8717" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;LimitOutput&lt;/code&gt; is used the size of the output buffer used will either be the value of the &lt;code&gt;Bufsize&lt;/code&gt; option or the amount of memory already allocated to &lt;code&gt;$output&lt;/code&gt; , whichever is larger. Predicting the output size available is tricky, so don't rely on getting an exact output buffer size.</source>
          <target state="translated">&lt;code&gt;LimitOutput&lt;/code&gt; が使用される場合、使用される出力バッファーのサイズは、 &lt;code&gt;Bufsize&lt;/code&gt; オプションの値か、 &lt;code&gt;$output&lt;/code&gt; 既に割り当てられているメモリーの量のいずれか大きい方になります。利用可能な出力サイズの予測は難しいので、正確な出力バッファーサイズを取得することに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="f6c4b51758778b88a3620755cd86e2bac9c6c0e5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; is active (see &lt;a href=&quot;#%24%3f&quot;&gt;$?&lt;/a&gt; below), the native VMS exit status value will have either one of the &lt;code&gt;$!&lt;/code&gt; or &lt;code&gt;$?&lt;/code&gt; or &lt;code&gt;$^E&lt;/code&gt; or the Unix value 255 encoded into it in a way that the effective original value can be decoded by other programs written in C, including Perl and the GNV package. As per the normal non-VMS behavior of &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; if either &lt;code&gt;$!&lt;/code&gt; or &lt;code&gt;$?&lt;/code&gt; are non-zero, one of those values will be encoded into a native VMS status value. If both of the Unix status values are 0, and the &lt;code&gt;$^E&lt;/code&gt; value is set one of ERROR or SEVERE_ERROR severity, then the &lt;code&gt;$^E&lt;/code&gt; value will be used as the exit code as is. If none of the above apply, the Unix value of 255 will be encoded into a native VMS exit status value.</source>
          <target state="translated">&lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; がアクティブな場合（以下の&lt;a href=&quot;#%24%3f&quot;&gt;$？を&lt;/a&gt;参照）、ネイティブVMS終了ステータス値は &lt;code&gt;$!&lt;/code&gt; または &lt;code&gt;$?&lt;/code&gt; または &lt;code&gt;$^E&lt;/code&gt; またはUnix値255をエンコードして、PerlやGNVパッケージなど、Cで記述された他のプログラムで有効な元の値をデコードできるようにします。いずれかの &lt;code&gt;$!&lt;/code&gt; 場合、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; の通常の非VMS動作に従って！または &lt;code&gt;$?&lt;/code&gt; ゼロ以外の場合、これらの値の1つがネイティブVMSステータス値にエンコードされます。 Unixステータス値が両方とも0で、 &lt;code&gt;$^E&lt;/code&gt; 値がERRORまたはSEVERE_ERROR重大度のいずれかに設定されている場合、 &lt;code&gt;$^E&lt;/code&gt; 値はそのまま終了コードとして使用されます。上記のいずれにも該当しない場合、Unix値の255はネイティブVMS終了ステータス値にエンコードされます。</target>
        </trans-unit>
        <trans-unit id="edf0ae2377a2b22abb92a09c7cbee6dad38f469d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;S&lt;/code&gt; can match, it is a better match than when only &lt;code&gt;T&lt;/code&gt; can match.</source>
          <target state="translated">とき &lt;code&gt;S&lt;/code&gt; を一致させることができ、それはときにのみよりも一致で &lt;code&gt;T&lt;/code&gt; は一致させることができます。</target>
        </trans-unit>
        <trans-unit id="5e7bb6aa4bca28bb16c16381fd1ea0fe317f098c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Strict&lt;/code&gt; is disabled the following behaviour will be policed:</source>
          <target state="translated">とき &lt;code&gt;Strict&lt;/code&gt; 無効になり、次の動作がポリシングされます。</target>
        </trans-unit>
        <trans-unit id="792e600779793d69f3a4dfa3dfa3dd30d40ce8a4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;UCA_Version&lt;/code&gt; &amp;gt;= 22, the weights of out-of-range values can be overridden. Though &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; are available for them, out-of-range values are too many.</source>
          <target state="translated">場合 &lt;code&gt;UCA_Version&lt;/code&gt; 値を上書きすることができる範囲外の&amp;gt; = 22、重み。けれども &lt;code&gt;table&lt;/code&gt; または &lt;code&gt;entry&lt;/code&gt; 彼らのために利用可能な、範囲外の値があまりにも多くあります。</target>
        </trans-unit>
        <trans-unit id="a88bdc0c0c759d08c6275afc07854842d8f95efa" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;base&lt;/code&gt; tries to &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module, it will not die if it cannot find the module's file, but will die on any other error. After all this, should your base class be empty, containing no symbols, &lt;code&gt;base&lt;/code&gt; will die. This is useful for inheriting from classes in the same file as yourself but where the filename does not match the base module name, like so:</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; がモジュールを &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; しようとしたときに、モジュールのファイルが見つからない場合は停止しませんが、その他のエラーが発生すると停止します。結局のところ、基本クラスが空で、シンボルが含まれていない場合、 &lt;code&gt;base&lt;/code&gt; は停止します。これは、自分と同じファイル内のクラスから継承する場合に便利ですが、次のように、ファイル名がベースモジュール名と一致しません。</target>
        </trans-unit>
        <trans-unit id="f3f15dbf4bfac8ce422e1183a7c97c2a550a0582" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;follow&lt;/code&gt; or &lt;code&gt;follow_fast&lt;/code&gt; are in effect, there is also a &lt;code&gt;$File::Find::fullname&lt;/code&gt; . The function may set &lt;code&gt;$File::Find::prune&lt;/code&gt; to prune the tree unless &lt;code&gt;bydepth&lt;/code&gt; was specified. Unless &lt;code&gt;follow&lt;/code&gt; or &lt;code&gt;follow_fast&lt;/code&gt; is specified, for compatibility reasons (find.pl, find2perl) there are in addition the following globals available: &lt;code&gt;$File::Find::topdir&lt;/code&gt; , &lt;code&gt;$File::Find::topdev&lt;/code&gt; , &lt;code&gt;$File::Find::topino&lt;/code&gt; , &lt;code&gt;$File::Find::topmode&lt;/code&gt; and &lt;code&gt;$File::Find::topnlink&lt;/code&gt; .</source>
          <target state="translated">とき &lt;code&gt;follow&lt;/code&gt; や &lt;code&gt;follow_fast&lt;/code&gt; が有効になっている、また、そこにある &lt;code&gt;$File::Find::fullname&lt;/code&gt; 。関数は、 &lt;code&gt;bydepth&lt;/code&gt; が指定されていない限り、ツリーを整理するために &lt;code&gt;$File::Find::prune&lt;/code&gt; を設定できます。 &lt;code&gt;follow&lt;/code&gt; または &lt;code&gt;follow_fast&lt;/code&gt; が指定されていない限り、互換性の理由（find.pl、find2perl）に加えて、次のグローバルも使用できます： &lt;code&gt;$File::Find::topdir&lt;/code&gt; 、 &lt;code&gt;$File::Find::topdev&lt;/code&gt; 、 &lt;code&gt;$File::Find::topino&lt;/code&gt; 、 &lt;code&gt;$File::Find::topmode&lt;/code&gt; および &lt;code&gt;$File::Find::topnlink&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5c3af0ccfdbd0226b2c1c6a386ea7d1149b898de" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;get_handle&lt;/code&gt; is called with an empty parameter list, magic happens:</source>
          <target state="translated">とき &lt;code&gt;get_handle&lt;/code&gt; は空のパラメータリストで呼ばれ、魔法が起こります。</target>
        </trans-unit>
        <trans-unit id="0587cd71d3cd406da1e34d9f0121a501c139389a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;remove_tree&lt;/code&gt; returned from deleting files in a child directory, a check revealed that the parent directory it returned to wasn't the one it started out from. This is considered a sign of malicious activity.</source>
          <target state="translated">子ディレクトリ内のファイルの削除から &lt;code&gt;remove_tree&lt;/code&gt; が返されたとき、チェックの結果、返された親ディレクトリが元のディレクトリではないことが判明しました。これは悪意のある活動の兆候と見なされます。</target>
        </trans-unit>
        <trans-unit id="0abaa039dcd0b20cc37827ce7e9a425281864469" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;share&lt;/code&gt; is used on arrays, hashes, array refs or hash refs, any data they contain will be lost.</source>
          <target state="translated">ときは &lt;code&gt;share&lt;/code&gt; 配列、ハッシュ、配列リファレンスやハッシュ、参考文献に使用され、そこに含まれるすべてのデータが失われます。</target>
        </trans-unit>
        <trans-unit id="f072734b6ff55766546071395774e151a8cea193" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;test_test&lt;/code&gt; is called and the output that your tests generate does not match that which you declared, &lt;code&gt;test_test&lt;/code&gt; will print out debug information showing the two conflicting versions. As this output itself is debug information it can be confusing which part of the output is from &lt;code&gt;test_test&lt;/code&gt; and which was the original output from your original tests. Also, it may be hard to spot things like extraneous whitespace at the end of lines that may cause your test to fail even though the output looks similar.</source>
          <target state="translated">とき &lt;code&gt;test_test&lt;/code&gt; が呼び出され、あなたのテストが生成する出力は、あなたが宣言されていることと一致しない、 &lt;code&gt;test_test&lt;/code&gt; は、 2つの競合するバージョンを示すデバッグ情報を出力します。この出力自体はデバッグ情報であるため、出力のどの部分が &lt;code&gt;test_test&lt;/code&gt; からのものであり、どの部分が元のテストからの元の出力であったかがわかりにくい場合があります。また、出力が似ていてもテストが失敗する原因となる、行末の無関係な空白などを見つけるのは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="0a8ac650ec538c50bdeb4cf6dbd53747bc753f1f" translate="yes" xml:space="preserve">
          <source>When BE or LE is explicitly stated as the name of encoding, BOM is simply treated as a normal character (ZERO WIDTH NO-BREAK SPACE).</source>
          <target state="translated">エンコーディング名として BE や LE が明示的に記載されている場合、BOM は単に通常のキャラクタ(ZERO WIDTH NO-BREAK SPACE)として扱われます。</target>
        </trans-unit>
        <trans-unit id="0fbaed27da231d1d0f199bebcb75bb30dedc0240" translate="yes" xml:space="preserve">
          <source>When BE or LE is omitted during decode(), it checks if BOM is at the beginning of the string; if one is found, the endianness is set to what the BOM says. If no BOM is found, the routine dies.</source>
          <target state="translated">デコード中に BE または LE が省略されると、文字列の先頭に BOM があるかどうかをチェックします。BOM が見つからない場合、ルーチンは終了します。</target>
        </trans-unit>
        <trans-unit id="420dd2e0afe91753dba538ca831997f9f3a56a48" translate="yes" xml:space="preserve">
          <source>When BE or LE is omitted during encode(), it returns a BE-encoded string with BOM prepended. So when you want to encode a whole text file, make sure you encode() the whole text at once, not line by line or each line, not file, will have a BOM prepended.</source>
          <target state="translated">encode()の際に BE や LE を省略すると、BE エンコードされた文字列に BOM が付加されたものが返されます。つまり、テキストファイル全体をエンコードしたい場合は、一行ずつではなく一度にテキスト全体を encode()するようにしましょう。</target>
        </trans-unit>
        <trans-unit id="dacba9cd09b7954f0b607de2124d67d55cdeb2ac" translate="yes" xml:space="preserve">
          <source>When CPAN runs, it sets the environment variable PERL5_CPAN_IS_RUNNING to the ID of the running process. It also sets PERL5_CPANPLUS_IS_RUNNING to prevent runaway processes which could happen with older versions of Module::Install.</source>
          <target state="translated">CPAN が実行されると、環境変数 PERL5_CPAN_IS_RUNNING に実行中のプロセスの ID を設定します。また、古いバージョンの Module::Install で発生する可能性のあるプロセスの暴走を防ぐために、PERL5_CPANPLUS_IS_RUNNING を設定します。</target>
        </trans-unit>
        <trans-unit id="652978d2789dfa7c2e88ae3ead48735cc4a8b7e9" translate="yes" xml:space="preserve">
          <source>When CPAN.pm extends @INC via PERL5LIB, it prints a list of directories added (or a summary of how many directories are added). Choose 'v' to get this message, 'none' to suppress it.</source>
          <target state="translated">CPAN.pm が PERL5LIB を介して @INC を拡張すると、追加されたディレクトリのリストを表示します (または、追加されたディレクトリの数の要約を表示します)。このメッセージを表示するには 'v' を選択し、表示しないには 'none' を選択します。</target>
        </trans-unit>
        <trans-unit id="ec2c74f66c6e4b429c5d3bf449f05522f381cd48" translate="yes" xml:space="preserve">
          <source>When CPAN.pm loads a module it needs for some optional feature, it usually reports about module name and version. Choose 'v' to get this message, 'none' to suppress it.</source>
          <target state="translated">CPAN.pm がオプション機能のために必要なモジュールをロードすると、通常はモジュール名とバージョンを報告します。このメッセージを表示するには 'v' を選択し、表示しないには 'none' を選択します。</target>
        </trans-unit>
        <trans-unit id="a6c2efe210167d6d16736590efab450901a5223c" translate="yes" xml:space="preserve">
          <source>When CPAN.pm uses the tar command, which switch for the verbosity shall be used? Choose 'none' for quiet operation, 'v' for file name listing, 'vv' for full listing.</source>
          <target state="translated">CPAN.pm が tar コマンドを使用する場合、冗長性のスイッチはどれを使用しますか?静かな動作の場合は 'none'、ファイル名の一覧表示の場合は 'v'、完全な一覧表示の場合は 'vv' を選択してください。</target>
        </trans-unit>
        <trans-unit id="09926237f4d026fd4275fa85769eac33da9c9434" translate="yes" xml:space="preserve">
          <source>When Configure asks about the extensions, I suggest IO and Fcntl, and if you want database handling then SDBM_File or GDBM_File (you need to install gdbm for this one). If you want to use the POSIX extension (this is the default), make sure that the stack size of your</source>
          <target state="translated">Configure が拡張機能について尋ねてきたら、IO と Fcntl、データベース処理が必要なら SDBM_File か GDBM_File (これには gdbm をインストールする必要があります)を勧めます。POSIX 拡張を使いたい場合は (これがデフォルトです)、スタックサイズが</target>
        </trans-unit>
        <trans-unit id="04e0b7cf71399471be99cb867416364c0df9f40e" translate="yes" xml:space="preserve">
          <source>When Democritus gave the word &amp;ldquo;atom&amp;rdquo; to the indivisible bits of matter, he meant literally something that could not be cut:</source>
          <target state="translated">Democritusが問題の分割不可能な部分に「原子」という単語を与えたとき、彼は文字通り切り取ることのできない何かを意味しました：</target>
        </trans-unit>
        <trans-unit id="bed16fa39ff4d380815a5a95de03029e7764deee" translate="yes" xml:space="preserve">
          <source>When G_KEEPERR is used, any error in the called code will terminate the call as usual, and the error will not propagate beyond the call (as usual for G_EVAL), but it will not go into &lt;code&gt;$@&lt;/code&gt; . Instead the error will be converted into a warning, prefixed with the string &quot;\t(in cleanup)&quot;. This can be disabled using &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'misc'&lt;/code&gt; . If there is no error, &lt;code&gt;$@&lt;/code&gt; will not be cleared.</source>
          <target state="translated">G_KEEPERRが使用されている場合、呼び出されたコードのエラーは通常どおり呼び出しを終了し、エラーは呼び出しを超えて（G_EVALの通常のように）伝播しませんが、 &lt;code&gt;$@&lt;/code&gt; は入りません。代わりに、エラーは警告に変換され、文字列 &quot;\ t（in cleanup）&quot;が前に付きます。これは &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'misc'&lt;/code&gt; を使用せずに無効にできます。エラーがない場合、 &lt;code&gt;$@&lt;/code&gt; はクリアされません。</target>
        </trans-unit>
        <trans-unit id="c6cefe86149d167c60485e01ab068ab4acc1c96d" translate="yes" xml:space="preserve">
          <source>When I install bundles or multiple modules with one command there is too much output to keep track of.</source>
          <target state="translated">バンドルや複数のモジュールを一つのコマンドでインストールすると、出力が多すぎて追跡できません。</target>
        </trans-unit>
        <trans-unit id="96aa2dd484c673b89bb47260df9f770fc3e65459" translate="yes" xml:space="preserve">
          <source>When I run CPAN's shell, I get an error message about things in my &lt;code&gt;/etc/inputrc&lt;/code&gt; (or &lt;code&gt;~/.inputrc&lt;/code&gt;) file.</source>
          <target state="translated">CPANのシェルを実行すると、 &lt;code&gt;/etc/inputrc&lt;/code&gt; （または &lt;code&gt;~/.inputrc&lt;/code&gt; ）ファイルの内容に関するエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="6b21be97219bbbb10df79f70e49405f833c3cad4" translate="yes" xml:space="preserve">
          <source>When I tried to run my script, I got this message. What does it mean?</source>
          <target state="translated">スクリプトを実行しようとしたら、こんなメッセージが出てきました。これは何を意味しているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="e4bb48e8ad735dfd3ed959c0444d6089c891d679" translate="yes" xml:space="preserve">
          <source>When I/O, for example &quot;read&quot;, is requested, the request goes from Perl first down the stack using &quot;read&quot; functions of each layer, then at the bottom the input is requested from the operating system services, then the result is returned up the stack, finally being interpreted as Perl data.</source>
          <target state="translated">I/O、例えば「読み込み」が要求された場合、要求はPerlから各レイヤの「読み込み」関数を使ってまずスタックの下の方に行き、下の方ではオペレーティングシステムのサービスから入力が要求され、その結果がスタックの上の方に返され、最終的にPerlのデータとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="e5e8467b062c382be485cbe69584b5d02adf0299" translate="yes" xml:space="preserve">
          <source>When Memoize needs to check to see if an entry is in the cache already, it will invoke &lt;code&gt;C-&amp;gt;EXISTS(key)&lt;/code&gt; . &lt;code&gt;key&lt;/code&gt; is the normalized function argument. MyExpirePolicy::EXISTS should return 0 if the key is not in the cache, or if it has expired, and 1 if an unexpired value is in the cache. It should</source>
          <target state="translated">Memoizeは、エントリがすでにキャッシュにあるかどうかを確認する必要がある場合、 &lt;code&gt;C-&amp;gt;EXISTS(key)&lt;/code&gt; を呼び出します。 &lt;code&gt;key&lt;/code&gt; は、正規化された関数の引数です。MyExpirePolicy :: EXISTSは、キーがキャッシュにない場合、またはキーが期限切れの場合は0を返し、期限切れでない値がキャッシュにある場合は1を返します。そうすべき</target>
        </trans-unit>
        <trans-unit id="ebd887c91b9049b8dfb0bd1e032eea2b43f90690" translate="yes" xml:space="preserve">
          <source>When Perl 5.12 or later encounters an ellipsis statement, it parses this without error, but if and when you should actually try to execute it, Perl throws an exception with the text &lt;code&gt;Unimplemented&lt;/code&gt; :</source>
          <target state="translated">Perl 5.12以降が省略文に遭遇すると、エラーなしでこれを解析しますが、実際に実行しようとすると、Perlは &lt;code&gt;Unimplemented&lt;/code&gt; というテキストで例外をスローします。</target>
        </trans-unit>
        <trans-unit id="ab4ce43e1ebabd776abd8a74c5e1d002b8bd8ffe" translate="yes" xml:space="preserve">
          <source>When Perl compiles the regular expression, it treats the parenthesis as the start of a memory match. When it doesn't find the closing parenthesis, it complains:</source>
          <target state="translated">Perlが正規表現をコンパイルすると、括弧をメモリマッチの開始点として扱います。閉じ括弧が見つからない場合は文句を言います。</target>
        </trans-unit>
        <trans-unit id="53c411ad4e1523024c43c3f84e8d99bfb2921a55" translate="yes" xml:space="preserve">
          <source>When Perl destroys the object referenced by $netconf it will send the object to the supplied XSUB DESTROY function. Perl cannot determine, and does not care, that this object is a C struct and not a Perl object. In this sense, there is no difference between the object created by the getnetconfigent() XSUB and an object created by a normal Perl subroutine.</source>
          <target state="translated">Perl は $netconf で参照されているオブジェクトを破棄すると、そのオブジェクトを指定された XSUB DESTROY 関数に送ります。Perl は、このオブジェクトが C 構造体であり Perl オブジェクトではないことを判断することはできませんし、気にもしません。この意味では、getnetconfigent()XSUBによって作成されたオブジェクトと通常のPerlサブルーチンによって作成されたオブジェクトに違いはありません。</target>
        </trans-unit>
        <trans-unit id="e513aa6b4ab015986cab17c857cc3e0082b263e5" translate="yes" xml:space="preserve">
          <source>When Perl exchanges data with an extension, the extension should be able to understand the UTF8 flag and act accordingly. If the extension doesn't recognize that flag, it's likely that the extension will return incorrectly-flagged data.</source>
          <target state="translated">Perl が拡張機能とデータを交換するとき、拡張機能は UTF8 フラグを理解し、それに応じて動作するようにしなければなりません。もし拡張機能がそのフラグを認識していない場合、拡張機能は正しくないフラグのついたデータを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="f6f1776d7dcd16bb2da8426867ab48b032eaee97" translate="yes" xml:space="preserve">
          <source>When Perl is built with PERL_IMPLICIT_CONTEXT, extensions that call any functions in the Perl API will need to pass the initial context argument somehow. The kicker is that you will need to write it in such a way that the extension still compiles when Perl hasn't been built with PERL_IMPLICIT_CONTEXT enabled.</source>
          <target state="translated">Perl が PERL_IMPLICIT_CONTEXT でビルドされている場合、Perl API の関数を呼び出す拡張機能は、何らかの方法で最初のコンテキスト引数を渡す必要があります。キッカケは、Perl_IMPLICIT_CONTEXTを有効にしてPerlがビルドされていない場合でも、拡張機能がコンパイルできるように記述する必要があるということです。</target>
        </trans-unit>
        <trans-unit id="f6fb72d35777e36edb4c8c03f40429a73f9b258a" translate="yes" xml:space="preserve">
          <source>When Perl is built without options that set PERL_IMPLICIT_CONTEXT, there is no first argument containing the interpreter's context. The trailing underscore in the pTHX_ macro indicates that the macro expansion needs a comma after the context argument because other arguments follow it. If PERL_IMPLICIT_CONTEXT is not defined, pTHX_ will be ignored, and the subroutine is not prototyped to take the extra argument. The form of the macro without the trailing underscore is used when there are no additional explicit arguments.</source>
          <target state="translated">PERL_IMPLICIT_CONTEXTを設定するオプションなしでPerlがビルドされている場合、インタプリタのコンテキストを含む第1引数はありません。pTHX_マクロの末尾のアンダースコアは、他の引数がコンテキスト引数の後に続くため、マクロ展開でコンテキスト引数の後にカンマが必要であることを示しています。PERL_IMPLICIT_CONTEXTが定義されていない場合、pTHX_は無視され、サブルーチンは余分な引数を取るようにプロトタイピングされません。追加の明示的な引数がない場合は、末尾のアンダースコアのないマクロの形式が使用されます。</target>
        </trans-unit>
        <trans-unit id="8079f54267f5c6445383e49837ffc5d08d1d7078" translate="yes" xml:space="preserve">
          <source>When Perl is compiled for a platform, it looks at all of these characters to guess which EBCDIC character set the platform uses, and adapts itself accordingly to that platform. If the platform uses a character set that is not one of the three Perl knows about, Perl will either fail to compile, or mistakenly and silently choose one of the three.</source>
          <target state="translated">Perl があるプラットフォーム用にコンパイルされるとき、Perl はこれらすべての文字を見て、そのプラットフォームがどの EBCDIC 文字セットを使用しているかを推測し、そのプラットフォームに合わせて自分自身を適応させます。プラットフォームが、Perlが知っている3つの文字セットのうちの1つではない文字セットを使用している場合、Perlはコンパイルに失敗するか、誤って3つのうちの1つを選択してしまいます。</target>
        </trans-unit>
        <trans-unit id="80ed2279b39397e0ed205899926800b606fe0a42" translate="yes" xml:space="preserve">
          <source>When Perl is configured to use ithreads, it will use re-entrant library calls in preference to non-re-entrant versions. There is an incompatibility in OpenBSD's &lt;code&gt;getprotobyname_r&lt;/code&gt; and &lt;code&gt;getservbyname_r&lt;/code&gt; function in versions 3.7 and later that will cause a SEGV when called without doing a &lt;code&gt;bzero&lt;/code&gt; on their return structs prior to calling these functions. Current Perl's should handle this problem correctly. Older threaded Perls (5.8.6 or earlier) will run into this problem. If you want to run a threaded Perl on OpenBSD 3.7 or higher, you will need to upgrade to at least Perl 5.8.7.</source>
          <target state="translated">Perlがithreadを使用するように構成されている場合、Perlは非再入可能バージョンよりも再入可能ライブラリー呼び出しを使用します。 OpenBSDの &lt;code&gt;getprotobyname_r&lt;/code&gt; 関数と &lt;code&gt;getservbyname_r&lt;/code&gt; 関数にはバージョン3.7以降の非互換性があり、これらの関数を呼び出す前に、return構造体で &lt;code&gt;bzero&lt;/code&gt; を実行せずに呼び出すと、SEGVが発生します。現在のPerlはこの問題を正しく処理する必要があります。古いスレッドのPerl（5.8.6以前）がこの問題に遭遇します。 OpenBSD 3.7以降でスレッド化されたPerlを実行する場合は、少なくともPerl 5.8.7にアップグレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="df300d221e04eb6da687f72d9bfb0bebe32d3fc0" translate="yes" xml:space="preserve">
          <source>When Perl is processing &quot;binary data&quot;, the programmer wants Perl to process &quot;sequences of bytes&quot;. This is not a problem for Perl: because a byte has 256 possible values, it easily fits in Perl's much larger &quot;logical character&quot;.</source>
          <target state="translated">Perl が「バイナリデータ」を処理するとき、プログラマは Perl に「バイトのシーケンス」を処理させたいと思っています。これはPerlにとっては問題ではありません。バイトには256の値があるので、Perlのはるかに大きな「論理文字」に簡単に収まります。</target>
        </trans-unit>
        <trans-unit id="cc51149dee007d3915d8fd89443c351da938e4a2" translate="yes" xml:space="preserve">
          <source>When Perl is run in debugging mode, with the &lt;b&gt;-d&lt;/b&gt; switch, this GV contains the SV which holds the name of the sub being debugged. This is the C variable which corresponds to Perl's $DB::sub variable. See &lt;code&gt;PL_DBsingle&lt;/code&gt; .</source>
          <target state="translated">Perlが&lt;b&gt;-d&lt;/b&gt;スイッチを使用してデバッグモードで実行されている場合、このGVには、デバッグされるサブルーチンの名前を保持するSVが含まれます。これは、Perlの$ DB :: sub変数に対応するC変数です。 &lt;code&gt;PL_DBsingle&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3590f13940a356a00f485512d64c10323ed9ae31" translate="yes" xml:space="preserve">
          <source>When Perl is run in debugging mode, with the &lt;b&gt;-d&lt;/b&gt; switch, this SV is a boolean which indicates whether subs are being single-stepped. Single-stepping is automatically turned on after every step. This is the C variable which corresponds to Perl's $DB::single variable. See &lt;code&gt;PL_DBsub&lt;/code&gt; .</source>
          <target state="translated">Perlが&lt;b&gt;-d&lt;/b&gt;スイッチを指定してデバッグモードで実行されている場合、このSVは、サブルーチンがシングルステップで実行されているかどうかを示すブール値です。シングルステップは、すべてのステップの後に自動的にオンになります。これは、Perlの$ DB :: single変数に対応するC変数です。 &lt;code&gt;PL_DBsub&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="987fa57f3d6e2d1a009a00d587b9bac8f003a80c" translate="yes" xml:space="preserve">
          <source>When Perl is run with the &lt;b&gt;-Do&lt;/b&gt; switch or its equivalent, overloading induces diagnostic messages.</source>
          <target state="translated">Perlが&lt;b&gt;-Do&lt;/b&gt;スイッチまたはそれと同等のもので実行されている場合、オーバーロードにより診断メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="31b65aa4a8ccdb59770227d57464bc9d968a6a6c" translate="yes" xml:space="preserve">
          <source>When Perl searches for a method, it caches the lookup so that future calls to the method do not need to search for it again. Changing a class's parent class or adding subroutines to a class will invalidate the cache for that class.</source>
          <target state="translated">Perl はメソッドを検索するとき、その検索結果をキャッシュして、将来そのメソッドを呼び出すときに再度検索する必要がないようにします。クラスの親クラスを変更したり、クラスにサブルーチンを追加したりすると、そのクラスのキャッシュは無効になります。</target>
        </trans-unit>
        <trans-unit id="dc44d70cd8e2f4c150d9b1a250549091ec350dff" translate="yes" xml:space="preserve">
          <source>When Perl sees a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; extension;&lt;/code&gt; , it searches for a file with the same name as the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;'d extension that has a .pm suffix. If that file cannot be found, Perl dies with a fatal error. The default search path is contained in the &lt;code&gt;@INC&lt;/code&gt; array.</source>
          <target state="translated">Perlが &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; extension;&lt;/code&gt; 見つけたとき。、拡張子が.pmの &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 'd拡張子と同じ名前のファイルを検索します。そのファイルが見つからない場合、Perlは致命的なエラーで終了します。デフォルトの検索パスは &lt;code&gt;@INC&lt;/code&gt; 配列に含まれています。</target>
        </trans-unit>
        <trans-unit id="c45a181d0244e9e1141094875e09095d6414b083" translate="yes" xml:space="preserve">
          <source>When Pod::Simple sees a &quot;=head1 Hi there&quot;, for example, it basically does this:</source>
          <target state="translated">例えば、Pod::Simpleが&quot;=head1 こんにちは &quot;を見ると、基本的には次のようになります。</target>
        </trans-unit>
        <trans-unit id="1cd158af5ecd016f5844a2f8d5f52d658dbd56fa" translate="yes" xml:space="preserve">
          <source>When STDERR is tied, its PRINT method will be called to issue warnings and error messages. This feature is temporarily disabled during the call, which means you can use &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; inside PRINT without starting a recursive loop. And just like &lt;code&gt;__WARN__&lt;/code&gt; and &lt;code&gt;__DIE__&lt;/code&gt; handlers, STDERR's PRINT method may be called to report parser errors, so the caveats mentioned under &lt;a href=&quot;perlvar#%25SIG&quot;&gt;%SIG in perlvar&lt;/a&gt; apply.</source>
          <target state="translated">STDERRが関連付けられると、そのPRINTメソッドが呼び出され、警告とエラーメッセージが発行されます。この機能は呼び出し中に一時的に無効になります。つまり、再帰ループを開始せずにPRINT内で &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; を使用できます。また、 &lt;code&gt;__DIE__&lt;/code&gt; &lt;code&gt;__WARN__&lt;/code&gt; および__DIE__ハンドラーと同様に、パーサーエラーを報告するためにSTDERRのPRINTメソッドが呼び出される場合があるため、&lt;a href=&quot;perlvar#%25SIG&quot;&gt;perlvarの％SIGで説明&lt;/a&gt;されている警告が適用されます。</target>
        </trans-unit>
        <trans-unit id="776742a8703e38b8c7c180ad1bc1e1f2ea07cf1b" translate="yes" xml:space="preserve">
          <source>When Storable croaks, it tries to report the error via the &lt;code&gt;logcroak()&lt;/code&gt; routine from the &lt;code&gt;Log::Agent&lt;/code&gt; package, if it is available.</source>
          <target state="translated">Storable croakが発生すると、 &lt;code&gt;Log::Agent&lt;/code&gt; パッケージ（使用可能な場合 &lt;code&gt;logcroak()&lt;/code&gt; のlogcroak（）ルーチンを介してエラーを報告しようとします。</target>
        </trans-unit>
        <trans-unit id="d6016e444b9f013774a61df21cb4a60b0edf43d8" translate="yes" xml:space="preserve">
          <source>When UTF-8 becomes the standard source format, this pragma will effectively become a no-op. For convenience in what follows the term</source>
          <target state="translated">UTF-8が標準ソースフォーマットになると、このプラグマは事実上ノーオペになります。以下では便宜上</target>
        </trans-unit>
        <trans-unit id="1e26f2f78b2d3c5f0bcbde15044bd5212be0247d" translate="yes" xml:space="preserve">
          <source>When Unicode Does Not Happen</source>
          <target state="translated">ユニコードが発生しない場合</target>
        </trans-unit>
        <trans-unit id="7748cfda1edce223207e83e001d28dffb7bf724f" translate="yes" xml:space="preserve">
          <source>When Unicode rules are in effect:</source>
          <target state="translated">Unicodeルールが適用されている場合。</target>
        </trans-unit>
        <trans-unit id="a9436974a6cc23829e6eb2bd840fe00c99d5fdc2" translate="yes" xml:space="preserve">
          <source>When Unicode was first conceived, it was thought that all the world's characters could be represented using a 16-bit word; that is a maximum of &lt;code&gt;0x10000&lt;/code&gt; (or 65,536) characters would be needed, from &lt;code&gt;0x0000&lt;/code&gt; to &lt;code&gt;0xFFFF&lt;/code&gt; . This soon proved to be wrong, and since Unicode 2.0 (July 1996), Unicode has been defined all the way up to 21 bits (&lt;code&gt;0x10FFFF&lt;/code&gt; ), and Unicode 3.1 (March 2001) defined the first characters above &lt;code&gt;0xFFFF&lt;/code&gt; . The first &lt;code&gt;0x10000&lt;/code&gt; characters are called the</source>
          <target state="translated">Unicodeが最初に考案されたとき、世界中のすべての文字は16ビットのワードを使用して表現できると考えられていました。つまり、最大 &lt;code&gt;0x10000&lt;/code&gt; （または65,536）文字（ &lt;code&gt;0x0000&lt;/code&gt; から &lt;code&gt;0xFFFF&lt;/code&gt; まで）が必要になります。これはすぐに誤りであることが判明し、Unicode 2.0（1996年7月）以降、Unicodeは21ビット（ &lt;code&gt;0x10FFFF&lt;/code&gt; ）まで定義され、Unicode 3.1（2001年3月）は &lt;code&gt;0xFFFF&lt;/code&gt; より上の最初の文字を定義しました。最初の &lt;code&gt;0x10000&lt;/code&gt; 文字は</target>
        </trans-unit>
        <trans-unit id="824bf2e880285aa9c434d2acac5d910818e02e5d" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;SelectSaver&lt;/code&gt; is destroyed, it re-selects the file handle that was selected when it was created.</source>
          <target state="translated">とき &lt;code&gt;SelectSaver&lt;/code&gt; が破壊され、それが作成されたときに、選択したファイルハンドルを再選択します。</target>
        </trans-unit>
        <trans-unit id="47dccd0143522691a9547f34d1ed5af302d02e22" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;given&lt;/code&gt; statement is also a valid expression (for example, when it's the last statement of a block), it evaluates to:</source>
          <target state="translated">ときに &lt;code&gt;given&lt;/code&gt; 文は（それがブロックの最後の文だとき、例えば）にも有効な式である、それはと評価されます。</target>
        </trans-unit>
        <trans-unit id="0af006e8d26663a7078cc20a1292be03a5256d66" translate="yes" xml:space="preserve">
          <source>When a CV has a reference count on its slab (CvSLABBED), it is responsible for making sure it is freed. (Hence, no two CVs should ever have a reference count on the same slab.) The CV only needs to reference the slab during compilation. Once it is compiled and CvROOT attached, it has finished its job, so it can forget the slab.</source>
          <target state="translated">CVがそのスラブに参照カウントを持っている場合(CvSLABBED),そのスラブが解放されていることを確認する責任があります(したがって,2つのCVが同じスラブに参照カウントを持つべきではありません).したがって,2つのCVが同じスラブ上に参照カウントを持つことはありません.いったんコンパイルされ,CvROOTがアタッチされると,CVはその仕事を終了しますので,スラブを忘れることができます.</target>
        </trans-unit>
        <trans-unit id="5c03e144fe4a4613006ecf4b238cfa477e26c49c" translate="yes" xml:space="preserve">
          <source>When a DST change causes a locale clock to skip one hour forward, there will be an hour's worth of local times that don't exist. Again, for the &quot;Europe/Paris&quot; time zone, the local clock jumped from 2001-03-25 01:59:59 to 2001-03-25 03:00:00.</source>
          <target state="translated">DSTの変更により、ロケールの時計が1時間前倒しになると、1時間分のローカルタイムが存在しないことになります。ここでも、「ヨーロッパ/パリ」のタイムゾーンでは、2001-03-25 01:59:59から2001-03-25 03:00:00に現地の時計がジャンプしています。</target>
        </trans-unit>
        <trans-unit id="6c769151f41d9f979bbea6aa6d7a29c398587207" translate="yes" xml:space="preserve">
          <source>When a block is preceding by a compilation phase keyword such as &lt;code&gt;BEGIN&lt;/code&gt; , &lt;code&gt;END&lt;/code&gt; , &lt;code&gt;INIT&lt;/code&gt; , &lt;code&gt;CHECK&lt;/code&gt; , or &lt;code&gt;UNITCHECK&lt;/code&gt; , then the block will run only during the corresponding phase of execution. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;BEGIN&lt;/code&gt; 、 &lt;code&gt;END&lt;/code&gt; 、 &lt;code&gt;INIT&lt;/code&gt; 、 &lt;code&gt;CHECK&lt;/code&gt; 、 &lt;code&gt;UNITCHECK&lt;/code&gt; などのコンパイルフェーズキーワードがブロックの前にある場合、ブロックは対応する実行フェーズでのみ実行されます。詳細については&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d61af89d14aac150579ea072baeedb77daecc0a" translate="yes" xml:space="preserve">
          <source>When a class has multiple parents, the method lookup order becomes more complicated.</source>
          <target state="translated">クラスが複数の親を持つ場合、メソッドのルックアップ順が複雑になります。</target>
        </trans-unit>
        <trans-unit id="bbfabd64dc538b19e52659b29026ea44adaac5bb" translate="yes" xml:space="preserve">
          <source>When a class inherits from another class, any methods defined in the parent class are available to the child class. If you attempt to call a method on an object that isn't defined in its own class, Perl will also look for that method in any parent classes it may have.</source>
          <target state="translated">クラスが他のクラスから継承する場合、親クラスで定義されているメソッドはすべて子クラスで利用できます。自分のクラスで定義されていないオブジェクトでメソッドを呼ぼうとした場合、Perl はそのメソッドがあるかもしれない親クラスの中でそのメソッドを探します。</target>
        </trans-unit>
        <trans-unit id="3fbe037b656bddc24c2846062762f1fce297b32a" translate="yes" xml:space="preserve">
          <source>When a comma-separated list of subroutine names is given as options, Showlex prints the lexical variables used in those subroutines. Otherwise, it prints the file-scope lexicals in the file.</source>
          <target state="translated">サブルーチン名のカンマ区切りのリストがオプションとして与えられると、Showlex はそれらのサブルーチンで使用される辞書変数を表示します。それ以外の場合は、ファイル内のファイルスコープ辞書を表示します。</target>
        </trans-unit>
        <trans-unit id="7150e31ab9e9cca66d69c6a47a4d5fc17ee83d01" translate="yes" xml:space="preserve">
          <source>When a constant is used in an expression, Perl replaces it with its value at compile time, and may then optimize the expression further. In particular, any code in an &lt;code&gt;if (CONSTANT)&lt;/code&gt; block will be optimized away if the constant is false.</source>
          <target state="translated">式で定数が使用されている場合、Perlはコンパイル時に定数をその値に置き換え、式をさらに最適化します。特に、定数がfalseの場合、 &lt;code&gt;if (CONSTANT)&lt;/code&gt; ブロック内のコードは最適化されます。</target>
        </trans-unit>
        <trans-unit id="ff12ac8ff6a9fb5ab965d82a8adb8da16c238288" translate="yes" xml:space="preserve">
          <source>When a context for a part of compile tree is known, it is propagated down through the tree. At this time the context can have 5 values (instead of 2 for runtime context): void, boolean, scalar, list, and lvalue. In contrast with the pass 1 this pass is processed from top to bottom: a node's context determines the context for its children.</source>
          <target state="translated">コンパイルツリーの一部のコンテキストが既知の場合、それはツリーを介して伝搬されます。この時、コンテキストは5つの値を持つことができます(ランタイムコンテキストの場合は2つではなく):void、boolean、scalar、list、lvalueです。パス1とは対照的に、このパスは上から下へと処理されます。</target>
        </trans-unit>
        <trans-unit id="d87717a8777688d74cabbb2304d94b51341cc91d" translate="yes" xml:space="preserve">
          <source>When a core function calls another, it must pass the context. This is normally hidden via macros. Consider &lt;code&gt;sv_setiv&lt;/code&gt; . It expands into something like this:</source>
          <target state="translated">コア関数が別の関数を呼び出すとき、コンテキストを渡す必要があります。これは通常、マクロによって非表示になります。 &lt;code&gt;sv_setiv&lt;/code&gt; を検討してください。これは次のように拡張されます。</target>
        </trans-unit>
        <trans-unit id="40ceceb3dfac228f4dc1ea2316b05b14abb23395" translate="yes" xml:space="preserve">
          <source>When a dictionary is specified</source>
          <target state="translated">辞書を指定した場合</target>
        </trans-unit>
        <trans-unit id="d409b69c538e75e300d571031fe6a755a4d085f3" translate="yes" xml:space="preserve">
          <source>When a distribution has already been tested by CPAN::Reporter on this machine, CPAN can skip the test phase and just rely on the test report history instead.</source>
          <target state="translated">ディストリビューションがこのマシン上でCPAN::Reporterによってすでにテストされている場合、CPANはテストフェーズをスキップして、代わりにテストレポートの履歴だけに頼ることができます。</target>
        </trans-unit>
        <trans-unit id="f71acc218a83c770a92fc1a815404b3d3de498a7" translate="yes" xml:space="preserve">
          <source>When a file is opened it is in either text or binary mode. In text mode a file is subject to CR/LF/Ctrl-Z translations. With Cygwin, the default mode for an &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; is determined by the mode of the mount that underlies the file. See &lt;a href=&quot;#Cygwin%3a%3ais_binmount&quot;&gt;Cygwin::is_binmount&lt;/a&gt;(). Perl provides a &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; function to set binary mode on files that otherwise would be treated as text. &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen()&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;O_TEXT&lt;/code&gt; flag sets text mode on files that otherwise would be treated as binary:</source>
          <target state="translated">ファイルを開くと、テキストモードまたはバイナリモードのいずれかになります。テキストモードでは、ファイルはCR / LF / Ctrl-Z変換の対象になります。 Cygwinでは、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; のデフォルトモードは、ファイルの下にあるマウントのモードによって決まります。&lt;a href=&quot;#Cygwin%3a%3ais_binmount&quot;&gt;Cygwin :: is_binmount&lt;/a&gt;（）を参照してください。 Perlは、他の方法ではテキストとして扱われるファイルにバイナリモードを設定する &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; 関数を提供します。 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen()&lt;/a&gt;&lt;/code&gt; フラグを指定したsysopen（）は、 &lt;code&gt;O_TEXT&lt;/code&gt; はバイナリとして扱われるファイルにテキストモードを設定します。</target>
        </trans-unit>
        <trans-unit id="973bff9414f9daff4e8ac9353de5be029b42eafe" translate="yes" xml:space="preserve">
          <source>When a handle is so opened, then reads get bytes from the string value of</source>
          <target state="translated">ハンドルがそう開かれている場合は、その後の文字列の値からバイトを取得します。</target>
        </trans-unit>
        <trans-unit id="17e8d47075484fcb067bf9d5f01cdea7dd0c053a" translate="yes" xml:space="preserve">
          <source>When a keyword is being handled, the plugin function must build a tree of &lt;code&gt;OP&lt;/code&gt; structures, representing the code that was parsed. The root of the tree must be stored in &lt;code&gt;*op_ptr&lt;/code&gt; . The function then returns a constant indicating the syntactic role of the construct that it has parsed: &lt;code&gt;KEYWORD_PLUGIN_STMT&lt;/code&gt; if it is a complete statement, or &lt;code&gt;KEYWORD_PLUGIN_EXPR&lt;/code&gt; if it is an expression. Note that a statement construct cannot be used inside an expression (except via &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; and similar), and an expression is not a complete statement (it requires at least a terminating semicolon).</source>
          <target state="translated">キーワードが処理されているとき、プラグイン関数は、解析されたコードを表す &lt;code&gt;OP&lt;/code&gt; 構造のツリーを構築する必要があります。ツリーのルートは &lt;code&gt;*op_ptr&lt;/code&gt; に格納する必要があります。 ：この関数は、それが解析されたことコンストラクトの構文上の役割を示す定数を返し &lt;code&gt;KEYWORD_PLUGIN_STMT&lt;/code&gt; を、それは完全なステートメントである場合、または &lt;code&gt;KEYWORD_PLUGIN_EXPR&lt;/code&gt; それが表現されている場合。ステートメント構造は式の内部では使用できず（ &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; などを使用する場合を除く）、式は完全なステートメントではありません（少なくとも終了セミコロンが必要です）。</target>
        </trans-unit>
        <trans-unit id="9e79d667e2ee3be13474d3de61e4494ae38724c2" translate="yes" xml:space="preserve">
          <source>When a keyword is handled, the plugin function may also have (compile-time) side effects. It may modify &lt;code&gt;%^H&lt;/code&gt; , define functions, and so on. Typically, if side effects are the main purpose of a handler, it does not wish to generate any ops to be included in the normal compilation. In this case it is still required to supply an op tree, but it suffices to generate a single null op.</source>
          <target state="translated">キーワードが処理されると、プラグイン関数には（コンパイル時の）副作用がある場合があります。 &lt;code&gt;%^H&lt;/code&gt; 変更、関数の定義などを行う場合があります。通常、副作用がハンドラーの主な目的である場合、通常のコンパイルに含まれるopを生成することは望んでいません。この場合でも、opツリーを指定する必要がありますが、単一のnull opを生成するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="57ad4f96e4d1cfbd5bc9ad7761654ce09c743746" translate="yes" xml:space="preserve">
          <source>When a line is rendered, the correct format-spec is copied and scanned for the following items; data is substituted in, and other manipulations like basic indenting are done, for each opcode rendered.</source>
          <target state="translated">行がレンダリングされるときに、正しいフォーマット仕様がコピーされ、以下の項目についてスキャンされ、データが置換され、レンダリングされた各オペコードごとに基本的なインデントなどの操作が行われます。</target>
        </trans-unit>
        <trans-unit id="816633f303f39f0cbcf02a62fbc386a09fe865f3" translate="yes" xml:space="preserve">
          <source>When a match has failed, and unless another verb has been involved in failing the match and has provided its own name to use, the &lt;code&gt;$REGERROR&lt;/code&gt; variable will be set to the name of the most recently executed &lt;code&gt;(*MARK:NAME)&lt;/code&gt;.</source>
          <target state="translated">一致が失敗し、別の動詞が一致の失敗に関与していて、使用する独自の名前を提供していない場合、 &lt;code&gt;$REGERROR&lt;/code&gt; 変数は、最後に実行された名前 &lt;code&gt;(*MARK:NAME)&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="166223375f2bf3db19459da46d44df6881e6c346" translate="yes" xml:space="preserve">
          <source>When a match is successful, the &lt;code&gt;$REGMARK&lt;/code&gt; variable will be set to the name of the most recently executed &lt;code&gt;(*MARK:NAME)&lt;/code&gt; that was involved in the match.</source>
          <target state="translated">一致が成功すると、 &lt;code&gt;$REGMARK&lt;/code&gt; 変数は、一致に関与した最後に実行された &lt;code&gt;(*MARK:NAME)&lt;/code&gt; の名前に設定されます。</target>
        </trans-unit>
        <trans-unit id="4580d4e00986eec91e11abd53ea45f7e741116fe" translate="yes" xml:space="preserve">
          <source>When a module declares another one as a 'build_requires' prerequisite this means that the other module is only needed for building or testing the module but need not be installed permanently. In this case you may wish to install that other module nonetheless or just keep it in the 'build_dir' directory to have it available only temporarily. Installing saves time on future installations but makes the perl installation bigger.</source>
          <target state="translated">モジュールが他のモジュールを 'build_requires' 前提条件として宣言している場合、これは他のモジュールがモジュールのビルドやテストに必要なだけで、恒久的にインストールする必要はないということを意味します。この場合、他のモジュールをインストールするか、または 'build_dir' ディレクトリに入れて一時的に利用できるようにしておくことをお勧めします。インストールすることで今後のインストールの時間を節約できますが、 perl のインストールは大きくなります。</target>
        </trans-unit>
        <trans-unit id="1496adc7bcbe4a50d48879cef9be976a3fb2e9c5" translate="yes" xml:space="preserve">
          <source>When a new language is being encoded, Unicode generally will choose a &lt;code&gt;block&lt;/code&gt; of consecutive unallocated code points for its characters. So far, the number of code points in these blocks has always been evenly divisible by 16. Extras in a block, not currently needed, are left unallocated, for future growth. But there have been occasions when a later release needed more code points than the available extras, and a new block had to allocated somewhere else, not contiguous to the initial one, to handle the overflow. Thus, it became apparent early on that &quot;block&quot; wasn't an adequate organizing principal, and so the &lt;code&gt;Script&lt;/code&gt; property was created. (Later an improved script property was added as well, the &lt;code&gt;Script_Extensions&lt;/code&gt; property.) Those code points that are in overflow blocks can still have the same script as the original ones. The script concept fits more closely with natural language: there is &lt;code&gt;Latin&lt;/code&gt; script, &lt;code&gt;Greek&lt;/code&gt; script, and so on; and there are several artificial scripts, like &lt;code&gt;Common&lt;/code&gt; for characters that are used in multiple scripts, such as mathematical symbols. Scripts usually span varied parts of several blocks. For more information about scripts, see &lt;a href=&quot;perlunicode#Scripts&quot;&gt;Scripts in perlunicode&lt;/a&gt;. The division into blocks exists, but it is almost completely accidental--an artifact of how the characters have been and still are allocated. (Note that this paragraph has oversimplified things for the sake of this being an introduction. Unicode doesn't really encode languages, but the writing systems for them--their scripts; and one script can be used by many languages. Unicode also encodes things that aren't really about languages, such as symbols like &lt;code&gt;BAGGAGE CLAIM&lt;/code&gt; .)</source>
          <target state="translated">新しい言語がエンコードされている場合、Unicodeは通常、その文字に対して連続した未割り当てのコードポイントの &lt;code&gt;block&lt;/code&gt; を選択します。これまでのところ、これらのブロックのコードポイントの数は常に16で割り切れるようになっています。現在必要ではないブロックのエクストラは、将来の成長のために割り当てられないままになっています。しかし、後のリリースで利用可能なエクストラよりも多くのコードポイントが必要になる場合があり、新しいブロックはオーバーフローを処理するために、最初のブロックに隣接していない別の場所に割り当てる必要がありました。したがって、「ブロック」は適切な組織化プリンシパルではないことが初期に明らかになり、 &lt;code&gt;Script&lt;/code&gt; プロパティが作成されました。 （後に、改良されたスクリプトプロパティも追加されました &lt;code&gt;Script_Extensions&lt;/code&gt; プロパティ。）オーバーフローブロック内にあるコードポイントは、元のスクリプトと同じスクリプトを持つことができます。スクリプトの概念は、自然言語とより密接に適合します。 &lt;code&gt;Latin&lt;/code&gt; スクリプト、 &lt;code&gt;Greek&lt;/code&gt; スクリプトなどがあります。また、数学記号など、複数のスクリプトで使用される文字の &lt;code&gt;Common&lt;/code&gt; など、いくつかの人工スクリプトがあります。スクリプトは通常、いくつかのブロックのさまざまな部分にまたがっています。スクリプトの詳細については&lt;a href=&quot;perlunicode#Scripts&quot;&gt;、Perlunicodeの&lt;/a&gt;スクリプトを参照してください。。ブロックへの分割は存在しますが、それはほぼ完全に偶然です-キャラクターがどのように割り当てられているかを示すアーティファクトです。 （このパラグラフは、導入のために単純化していることに注意してください。Unicodeは実際には言語をエンコードしていませんが、それらの書記体系、つまりスクリプトです。1つのスクリプトを多くの言語で使用できます。Unicodeもエンコードしますそれらは実際には言語に関するものではありません。 &lt;code&gt;BAGGAGE CLAIM&lt;/code&gt; などの記号などです。）</target>
        </trans-unit>
        <trans-unit id="3bbe3c04751e10d9bc078e9c200bbf898654f3d9" translate="yes" xml:space="preserve">
          <source>When a package is compiled, a line like this</source>
          <target state="translated">パッケージをコンパイルすると、次のような行が出てきます。</target>
        </trans-unit>
        <trans-unit id="93bffad6a970da997c7854ebcbcae55a405a4802" translate="yes" xml:space="preserve">
          <source>When a perl script assigns a value to $0 then the perl runtime will try to make this value show up as the program name reported by &quot;ps&quot; by updating the memory pointed to by the argv passed to perl_parse() and also calling API functions like setproctitle() where available. This behaviour might not be appropriate when embedding perl and can be disabled by assigning the value &lt;code&gt;1&lt;/code&gt; to the variable &lt;code&gt;PL_origalen&lt;/code&gt; before perl_parse() is called.</source>
          <target state="translated">perlスクリプトが$ 0に値を割り当てると、perlランタイムは、この値が「ps」によって報告されたプログラム名として表示されるようにしようとします。これは、perl_parse（）に渡されたargvが指すメモリを更新し、次のようなAPI関数も呼び出します。利用可能な場合、setproctitle（）。この動作は、perlを埋め込む場合には適切ではない可能性があり、perl_parse（）が呼び出される前に変数 &lt;code&gt;PL_origalen&lt;/code&gt; に値 &lt;code&gt;1&lt;/code&gt; を割り当てることで無効にできます。</target>
        </trans-unit>
        <trans-unit id="5dd94d34aa40052479abfe68a7305a1776af1c6b" translate="yes" xml:space="preserve">
          <source>When a regexp can match a string in several different ways, we can use the principles above to predict which way the regexp will match:</source>
          <target state="translated">正規表現が文字列にいくつかの異なる方法でマッチする場合、上記の原則を使ってどの方法でマッチするかを予測することができます。</target>
        </trans-unit>
        <trans-unit id="5e93e818427f981a20b5cd3c2cdc058e4ee5f4c1" translate="yes" xml:space="preserve">
          <source>When a regexp is compiled, its &lt;code&gt;engine&lt;/code&gt; field is then set to point at the appropriate structure, so that when it needs to be used Perl can find the right routines to do so.</source>
          <target state="translated">正規表現がコンパイルされると、適切な構造を指すように &lt;code&gt;engine&lt;/code&gt; フィールドが設定されます。これにより、正規表現を使用する必要がある場合、Perlは適切なルーチンを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="1ee520116426a3c213440cc6f7664ca3ad684e60" translate="yes" xml:space="preserve">
          <source>When a signal is delivered (e.g., SIGINT from a control-C) the operating system breaks into IO operations like</source>
          <target state="translated">信号が配信されると(例えば、制御CからのSIGINT)、オペレーティング・システムは以下のようなIO操作に切り替わります。</target>
        </trans-unit>
        <trans-unit id="232c6b5f6274d23859408b92a2808f3fc59dd734" translate="yes" xml:space="preserve">
          <source>When a space and a plus sign are given as the flags at once, a plus sign is used to prefix a positive number.</source>
          <target state="translated">フラグとしてスペースとプラス記号を一度に与えた場合、プラス記号は正の数の前に使用されます。</target>
        </trans-unit>
        <trans-unit id="d4c0062970171773b2800c4b96cf35e1d153d560" translate="yes" xml:space="preserve">
          <source>When a variable is tied, it is associated with the object which is the return value of the TIESCALAR, TIEARRAY, or TIEHASH function. This object normally has only one reference, namely, the implicit reference from the tied variable. When untie() is called, that reference is destroyed. Then, as in the first example above, the object's destructor (DESTROY) is called, which is normal for objects that have no more valid references; and thus the file is closed.</source>
          <target state="translated">変数が紐付けられているとき、それはTIESCALAR、TIEARRAY、またはTIEHASH関数の戻り値であるオブジェクトに関連付けられています。このオブジェクトは通常、1つの参照しか持ちません。untie()が呼び出されると、その参照は破棄されます。その後、上記の最初の例のように、オブジェクトのデストラクタ(DESTROY)が呼ばれます。これは、これ以上有効な参照を持たないオブジェクトにとっては通常のことで、ファイルは閉じられます。</target>
        </trans-unit>
        <trans-unit id="4c087ed039f3d9aacb0c9c7c411e1eafe86f0a03" translate="yes" xml:space="preserve">
          <source>When a weak reference is stored in an &lt;code&gt;SV&lt;/code&gt; that has &quot;uvar&quot; magic, &lt;code&gt;set&lt;/code&gt; magic is called after the reference has gone stale. This hook can be used to trigger further garbage-collection activities associated with the referenced object.</source>
          <target state="translated">弱参照が「uvar」マジックを持つ &lt;code&gt;SV&lt;/code&gt; に格納されている場合、参照が古くなってから &lt;code&gt;set&lt;/code&gt; magicが呼び出されます。このフックを使用して、参照されるオブジェクトに関連付けられているガベージコレクションアクティビティをさらにトリガーできます。</target>
        </trans-unit>
        <trans-unit id="9a9840147d7f095037a163c370bf370a7676a796" translate="yes" xml:space="preserve">
          <source>When all parsers are exhausted an empty list will be returned.</source>
          <target state="translated">すべてのパーサを使い切ると、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="d58a9a2162a7d9db701502c02549ae6467f05b83" translate="yes" xml:space="preserve">
          <source>When an array or an array slice is interpolated into a double-quoted string or a similar context such as &lt;code&gt;/.../&lt;/code&gt; , its elements are separated by this value. Default is a space. For example, this:</source>
          <target state="translated">配列または配列スライスが二重引用符で囲まれた文字列または &lt;code&gt;/.../&lt;/code&gt; などの同様のコンテキストに補間される場合、その要素はこの値で区切られます。デフォルトはスペースです。たとえば、これ：</target>
        </trans-unit>
        <trans-unit id="e576a7aca6fc0d7ad26c29db1ef25b646d312e24" translate="yes" xml:space="preserve">
          <source>When an attribute list is present in a declaration, a check is made to see whether an attribute 'modify' handler is present in the appropriate package (or its @ISA inheritance tree). Similarly, when &lt;code&gt;attributes::get&lt;/code&gt; is called on a valid reference, a check is made for an appropriate attribute 'fetch' handler. See &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt; to see how the &quot;appropriate package&quot; determination works.</source>
          <target state="translated">属性リストが宣言に存在する場合、属性の「変更」ハンドラーが適切なパッケージ（またはその@ISA継承ツリー）に存在するかどうかを確認するためのチェックが行われます。同様に、 &lt;code&gt;attributes::get&lt;/code&gt; が有効な参照で呼び出されると、適切な属性の「フェッチ」ハンドラーがチェックされます。参照&lt;a href=&quot;#EXAMPLES&quot;&gt;使用例を&lt;/a&gt;「適切なパッケージ」決意がどのように動作するかを確認するために。</target>
        </trans-unit>
        <trans-unit id="8cddb5e14177fc6acd8b55e0252f21e912b7951c" translate="yes" xml:space="preserve">
          <source>When an element of &lt;code&gt;%ENV&lt;/code&gt; is read, the locations to which</source>
          <target state="translated">&lt;code&gt;%ENV&lt;/code&gt; の要素が読み取られると、</target>
        </trans-unit>
        <trans-unit id="0687a40bbb86ac6f75e3c72f51434b562de688d3" translate="yes" xml:space="preserve">
          <source>When an element of &lt;code&gt;%ENV&lt;/code&gt; is set to &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the element is looked up as if it were being read, and if it is found, it is deleted. (An item &quot;deleted&quot; from the CRTL &lt;code&gt;environ&lt;/code&gt; array is set to the empty string.) Using &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; to remove an element from &lt;code&gt;%ENV&lt;/code&gt; has a similar effect, but after the element is deleted, another attempt is made to look up the element, so an inner-mode logical name or a name in another location will replace the logical name just deleted. In either case, only the first value found searching PERL_ENV_TABLES is altered. It is not possible at present to define a search list logical name via %ENV.</source>
          <target state="translated">要素場合 &lt;code&gt;%ENV&lt;/code&gt; がに設定されている &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を、それが読まれているし、それが見つかった場合、それが削除されるかのように、要素が検索されます。 （CRTL &lt;code&gt;environ&lt;/code&gt; 配列から「削除された」項目は空の文字列に設定されます。） &lt;code&gt;%ENV&lt;/code&gt; から要素を &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; するために削除を使用すると同様の効果がありますが、要素が削除された後、要素を検索する別の試みが行われます。したがって、内部モードの論理名または別の場所の名前は、削除されたばかりの論理名を置き換えます。どちらの場合も、PERL_ENV_TABLESの検索で見つかった最初の値のみが変更されます。現在のところ、％ENVを使用して検索リストの論理名を定義することはできません。</target>
        </trans-unit>
        <trans-unit id="f3d5e830d380d586cadba3ebb3b0b5993def5162" translate="yes" xml:space="preserve">
          <source>When an element of &lt;code&gt;%ENV&lt;/code&gt; is set to a defined string, the corresponding definition is made in the location to which the first translation of</source>
          <target state="translated">&lt;code&gt;%ENV&lt;/code&gt; の要素が定義済みの文字列に設定されている場合、対応する定義は最初の翻訳先の場所で行われます。</target>
        </trans-unit>
        <trans-unit id="6e4667405eb0016e589d7ee3b3978551b835b138" translate="yes" xml:space="preserve">
          <source>When an install fails for some reason and then I correct the error condition and retry, CPAN.pm refuses to install the module, saying &lt;code&gt;Already tried without success&lt;/code&gt; .</source>
          <target state="translated">何らかの理由でインストールが失敗した後、エラー条件を修正して再試行すると、CPAN.pmはモジュールのインストールを拒否し、「 &lt;code&gt;Already tried without success&lt;/code&gt; 」と言いました。</target>
        </trans-unit>
        <trans-unit id="88b449cc559ca252d850238032174c7042fa310e" translate="yes" xml:space="preserve">
          <source>When an undefined layer 'foo' is encountered in an &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; layer specification then C code performs the equivalent of:</source>
          <target state="translated">未定義のレイヤー「foo」が &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; レイヤー仕様で見つかった場合、Cコードは以下と同等の機能を実行します。</target>
        </trans-unit>
        <trans-unit id="05eb98d8070a762d6a7fd65d464d57e96f47f0ef" translate="yes" xml:space="preserve">
          <source>When an updir path like &quot;:::lib::&quot; is passed as argument, the number of directories to climb up is handled correctly, not removing leading or trailing colons when necessary. E.g.</source>
          <target state="translated">&quot;:::lib::&quot;のようなupdirパスが引数として渡された場合、必要に応じて先頭や末尾のコロンを削除することなく、登ってくるディレクトリの数が正しく処理されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fc030f96c1c92f54f8dacedeb177bdbc127fdac6" translate="yes" xml:space="preserve">
          <source>When an uppercase and lowercase letter both exist in the table, then the uppercase letter is typically used to represent some kind of composite type (a list or a hash), and the lowercase letter is used to represent an element of that composite type. Some internals code makes use of this case relationship. However, 'v' and 'V' (vec and v-string) are in no way related.</source>
          <target state="translated">大文字と小文字の両方がテーブルに存在する場合、大文字は通常何らかの複合型(リストやハッシュ)を表すために使用され、小文字はその複合型の要素を表すために使用されます。内部コードの中には、この大文字と小文字の関係を利用しているものがあります。しかし、'v' と 'V' (vec と v-string)は関係がありません。</target>
        </trans-unit>
        <trans-unit id="34009ee0cae148f2a1680a702fb847661476a204" translate="yes" xml:space="preserve">
          <source>When and whether to use small caps is somewhat tricky, and Pod::Man doesn't necessarily get it right.</source>
          <target state="translated">スモールキャップを使うタイミングと使うかどうかはややトリッキーで、Pod::Manが必ずしも正しいとは限りません。</target>
        </trans-unit>
        <trans-unit id="50a0e6b3c1e9721563cfa37763282c6acaf8fe8f" translate="yes" xml:space="preserve">
          <source>When applied to the following command line:</source>
          <target state="translated">以下のコマンドラインに適用した場合</target>
        </trans-unit>
        <trans-unit id="a01d1e59657f16ebb14cc78dbc769393ad07bd40" translate="yes" xml:space="preserve">
          <source>When auto-detecting the compressed format, try to test for lzma_alone content using the &lt;code&gt;IO::Uncompress::UnLzma&lt;/code&gt; module.</source>
          <target state="translated">圧縮形式を自動検出する場合は、 &lt;code&gt;IO::Uncompress::UnLzma&lt;/code&gt; モジュールを使用してlzma_aloneコンテンツをテストしてください。</target>
        </trans-unit>
        <trans-unit id="3afc2592b2e6769a24dccd537ec52009da2c39f6" translate="yes" xml:space="preserve">
          <source>When auto-detecting the compressed format, try to test for raw-deflate (RFC 1951) content using the &lt;code&gt;IO::Uncompress::RawInflate&lt;/code&gt; module.</source>
          <target state="translated">圧縮形式を自動検出する場合は、 &lt;code&gt;IO::Uncompress::RawInflate&lt;/code&gt; モジュールを使用してraw-deflate（RFC 1951）コンテンツをテストしてください。</target>
        </trans-unit>
        <trans-unit id="11c4b6b6311800f4181591dd698a41134ea1ef8b" translate="yes" xml:space="preserve">
          <source>When both &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; are used at the same time, the regexp has to match both the beginning and the end of the string, i.e., the regexp matches the whole string. Consider</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; と &lt;code&gt;$&lt;/code&gt; の両方を同時に使用する場合、正規表現は文字列の最初と最後の両方に一致する必要があります。つまり、正規表現は文字列全体に一致します。検討する</target>
        </trans-unit>
        <trans-unit id="0058d0939f56e0836aecac00731cc26dae5c908c" translate="yes" xml:space="preserve">
          <source>When both A and P are undefined, this is used as a fallback accuracy when dividing numbers.</source>
          <target state="translated">AとPの両方が未定義の場合、これは数を割る際の予備精度として使用されます。</target>
        </trans-unit>
        <trans-unit id="060766cfa822ddf97bd7bc65f3fc7e729b274423" translate="yes" xml:space="preserve">
          <source>When building 64-bit modules, it is your responsibility to ensure that linked external libraries and frameworks provide 64-bit support: if they do not, module building may appear to succeed, but attempts to use the module will result in run-time dynamic linking errors, and subsequent test failures. You can use &lt;code&gt;file&lt;/code&gt; to discover the architectures supported by a library:</source>
          <target state="translated">64ビットモジュールをビルドする場合、リンクされた外部ライブラリとフレームワークが64ビットサポートを提供することを確認する必要があります。サポートされていない場合、モジュールのビルドは成功したように見えますが、モジュールを使用しようとするとランタイムダイナミックになりますリンクエラー、およびそれに続くテストの失敗。 &lt;code&gt;file&lt;/code&gt; を使用して、ライブラリでサポートされているアーキテクチャを検出できます。</target>
        </trans-unit>
        <trans-unit id="d21008e482052b445cfd243ad8bc31adfd3249b5" translate="yes" xml:space="preserve">
          <source>When building Perl it will always return true, as nothing is installed yet.</source>
          <target state="translated">Perlをビルドする際には、まだ何もインストールされていないので、常にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="aaf49b07a212f715b8dd8f309b5c78af1bf1e342" translate="yes" xml:space="preserve">
          <source>When built on an ODS-5 volume with symbolic links enabled, Perl by default supports symbolic links when the requisite support is available in the filesystem and CRTL (generally 64-bit OpenVMS v8.3 and later). There are a number of limitations and caveats to be aware of when working with symbolic links on VMS. Most notably, the target of a valid symbolic link must be expressed as a Unix-style path and it must exist on a volume visible from your POSIX root (see the &lt;code&gt;SHOW ROOT&lt;/code&gt; command in DCL help). For further details on symbolic link capabilities and requirements, see chapter 12 of the CRTL manual that ships with OpenVMS v8.3 or later.</source>
          <target state="translated">シンボリックリンクが有効になっているODS-5ボリューム上に構築された場合、Perlは必要なサポートがファイルシステムとCRTL（通常64ビットOpenVMS v8.3以降）で利用可能な場合、デフォルトでシンボリックリンクをサポートします。VMSでシンボリックリンクを使用する場合に注意する必要がある制限と注意事項がいくつかあります。特に、有効なシンボリックリンクのターゲットは、Unixスタイルのパスとして表現する必要があり、POSIXルートから見えるボリュームに存在する必要があります（DCLヘルプの &lt;code&gt;SHOW ROOT&lt;/code&gt; コマンドを参照）。シンボリックリンクの機能と要件の詳細については、OpenVMS v8.3以降に付属のCRTLマニュアルの第12章を参照してください。</target>
        </trans-unit>
        <trans-unit id="3274ae41eb972b48380cd0be38746ee76dc6d9df" translate="yes" xml:space="preserve">
          <source>When bundling is in effect, case is ignored on single-character options also.</source>
          <target state="translated">バンドルが有効な場合、1文字オプションでも大文字小文字は無視されます。</target>
        </trans-unit>
        <trans-unit id="534230020f5629c55b27da34563c08514a84a5c7" translate="yes" xml:space="preserve">
          <source>When calculating specific times, such as for tests in time or date modules, it may be appropriate to calculate an offset for the epoch.</source>
          <target state="translated">時間モジュールや日付モジュールのテストのように、特定の時間を計算するときは、エポックのオフセットを計算するのが適切かもしれません。</target>
        </trans-unit>
        <trans-unit id="9da2af35b4e027fcb57324a97e158a9219d7749d" translate="yes" xml:space="preserve">
          <source>When called from a thread, this behaves like &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; (i.e., the exit status code is ignored).</source>
          <target state="translated">スレッドから呼び出されると、これは &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; のように動作します（つまり、終了ステータスコードは無視されます）。</target>
        </trans-unit>
        <trans-unit id="9c8531e379ee34158f961b216941a888acd13144" translate="yes" xml:space="preserve">
          <source>When called from the</source>
          <target state="translated">から呼び出された場合</target>
        </trans-unit>
        <trans-unit id="43350391a792d394d51fbfdf3323ff9bf611b150" translate="yes" xml:space="preserve">
          <source>When called in a scalar context &lt;code&gt;strtod&lt;/code&gt; returns the parsed number.</source>
          <target state="translated">スカラーコンテキストで呼び出されると、 &lt;code&gt;strtod&lt;/code&gt; は解析された数値を返します。</target>
        </trans-unit>
        <trans-unit id="da1211ed8e0b63c4bc2cdd7832083442b210dfa8" translate="yes" xml:space="preserve">
          <source>When called in a scalar context &lt;code&gt;strtol&lt;/code&gt; returns the parsed number.</source>
          <target state="translated">スカラーコンテキストで呼び出されると、 &lt;code&gt;strtol&lt;/code&gt; は解析された数値を返します。</target>
        </trans-unit>
        <trans-unit id="cd23c4a922c775b095b3cd879f0e839934775a17" translate="yes" xml:space="preserve">
          <source>When called in list context, a filehandle to the open file and a filename are returned. This is achieved by calling mkstemp() after constructing a suitable template.</source>
          <target state="translated">リストコンテキストで呼び出されると、開いているファイルへのファイルハンドルとファイル名が返されます。これは適切なテンプレートを構築した後に mkstemp()を呼び出すことで実現されます。</target>
        </trans-unit>
        <trans-unit id="c3dee4680a21f3b47b4b6c94d86c7920c11b3ca5" translate="yes" xml:space="preserve">
          <source>When called in scalar context, returns the full name (including path) of a temporary file (uses mktemp()). The only check is that the file does not already exist, but there is no guarantee that that condition will continue to apply.</source>
          <target state="translated">スカラコンテキストで呼び出されると、一時ファイルのフルネーム(パスを含む)を返します(mktemp()を使用します)。唯一のチェックは、そのファイルが既に存在していないかどうかということですが、その条件が適用され続ける保証はありません。</target>
        </trans-unit>
        <trans-unit id="a89727e96b1fd47a54daec87adf9ead3599db8aa" translate="yes" xml:space="preserve">
          <source>When called on a hash in list context, returns a 2-element list consisting of the key and value for the next element of a hash. In Perl 5.12 and later only, it will also return the index and value for the next element of an array so that you can iterate over it; older Perls consider this a syntax error. When called in scalar context, returns only the key (not the value) in a hash, or the index in an array.</source>
          <target state="translated">リストコンテキストでハッシュに対して呼び出された場合、 ハッシュの次の要素のキーと値からなる2つの要素のリストを返します。Perl 5.12以降では、配列の次の要素のインデックスと値も返します。スカラコンテキストで呼び出された場合、ハッシュのキー(値ではなく)か配列のインデックスのみを返します。</target>
        </trans-unit>
        <trans-unit id="a0114581d0437322ee0322acd573e8db3818a675" translate="yes" xml:space="preserve">
          <source>When called with a port number, the port number used to ping is set to $port_number rather than using the echo port. It also has the effect of calling &lt;code&gt;$p-&amp;gt;service_check(1)&lt;/code&gt; causing a ping to return a successful response only if that specific port is accessible. This function returns the value of the port that &lt;code&gt;ping()&lt;/code&gt; will connect to.</source>
          <target state="translated">ポート番号を指定して呼び出されると、pingに使用されるポート番号は、エコーポートを使用するのではなく、$ port_numberに設定されます。また、 &lt;code&gt;$p-&amp;gt;service_check(1)&lt;/code&gt; を呼び出して、特定のポートにアクセスできる場合にのみpingが正常な応答を返すようにする効果もあります。この関数は、 &lt;code&gt;ping()&lt;/code&gt; が接続するポートの値を返します。</target>
        </trans-unit>
        <trans-unit id="f7e732b0f6b3939ab5bc51276cb4115c5f3c0e3c" translate="yes" xml:space="preserve">
          <source>When called with a property that is a Perl extension that isn't expressible in a compound form, this function currently returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, as the only two possible values are</source>
          <target state="translated">複合形式で表現できないPerl拡張であるプロパティで呼び出されると、この関数は現在、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d7f088f6cc700d00236d5621c430de681ccc4d48" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;Mksymlists&lt;/code&gt; , one should always specify the NAME attribute. In most cases, this is all that's necessary. In the case of unusual extensions, however, the other attributes can be used to provide additional information to the linker.</source>
          <target state="translated">&lt;code&gt;Mksymlists&lt;/code&gt; を呼び出すときは、常にNAME属性を指定する必要があります。ほとんどの場合、これで十分です。ただし、通常とは異なる拡張機能の場合、他の属性を使用して、リンカーに追加情報を提供できます。</target>
        </trans-unit>
        <trans-unit id="fb764d0e74f6cde0aeec88532fcd886bfa4b9853" translate="yes" xml:space="preserve">
          <source>When choosing a language you should also be influenced by the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;resources&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpantesters.org%2f&quot;&gt;testing culture&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fcommunity.html&quot;&gt;community&lt;/a&gt; which surrounds it.</source>
          <target state="translated">言語を選択するときは、その言語を取り巻く&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpan.org%2f&quot;&gt;リソース&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.cpantesters.org%2f&quot;&gt;テスト文化&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perl.org%2fcommunity.html&quot;&gt;コミュニティに&lt;/a&gt;も影響を受けるはずです。</target>
        </trans-unit>
        <trans-unit id="28fc2ee6241766189106d0612895f0d6c35cb4ac" translate="yes" xml:space="preserve">
          <source>When choosing a new salt create a random two character string whose characters come from the set &lt;code&gt;[./0-9A-Za-z]&lt;/code&gt; (like &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt; '', ('.',
'/', 0..9, 'A'..'Z', 'a'..'z')[&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt; 64, &lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt; 64]&lt;/code&gt; ). This set of characters is just a recommendation; the characters allowed in the salt depend solely on your system's crypt library, and Perl can't restrict what salts &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt()&lt;/a&gt;&lt;/code&gt; accepts.</source>
          <target state="translated">新しいソルトを選択するとき、文字がセット &lt;code&gt;[./0-9A-Za-z]&lt;/code&gt; に由来するランダムな2文字の文字列を作成します（ &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt; '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt; 64, &lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt; 64]&lt;/code&gt; ）。この文字セットは単なる推奨です。 saltで許可される文字はシステムのcryptライブラリにのみ依存し、Perlはsalt &lt;code&gt;&lt;a href=&quot;functions/crypt&quot;&gt;crypt()&lt;/a&gt;&lt;/code&gt; が受け入れるものを制限できません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
