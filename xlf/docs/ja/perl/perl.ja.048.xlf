<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="2859cc3896fe55bbb891ae357f5f5a8329f3cec3" translate="yes" xml:space="preserve">
          <source>Perl 5.10 added three specials, &lt;code&gt;${^MATCH}&lt;/code&gt;, &lt;code&gt;${^PREMATCH}&lt;/code&gt;, and &lt;code&gt;${^POSTMATCH}&lt;/code&gt; to do the same job but without the global performance penalty. Perl 5.10 only sets these variables if you compile or execute the regular expression with the &lt;code&gt;/p&lt;/code&gt; modifier.</source>
          <target state="translated">Perl 5.10は、3つのスペシャル、 &lt;code&gt;${^MATCH}&lt;/code&gt; 、 &lt;code&gt;${^PREMATCH}&lt;/code&gt; 、および &lt;code&gt;${^POSTMATCH}&lt;/code&gt; を追加して、同じジョブを実行しますが、グローバルなパフォーマンスの低下はありません。 Perl 5.10は、 &lt;code&gt;/p&lt;/code&gt; 修飾子を使用して正規表現をコンパイルまたは実行した場合にのみ、これらの変数を設定します。</target>
        </trans-unit>
        <trans-unit id="ce44e09ff142e65fee17e89d97567bf27f5d29b1" translate="yes" xml:space="preserve">
          <source>Perl 5.10 also introduced named capture groups and named backreferences. To attach a name to a capturing group, you write either &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; or &lt;code&gt;(?'name'...)&lt;/code&gt;. The backreference may then be written as &lt;code&gt;\g{name}&lt;/code&gt; . It is permissible to attach the same name to more than one group, but then only the leftmost one of the eponymous set can be referenced. Outside of the pattern a named capture group is accessible through the &lt;code&gt;%+&lt;/code&gt; hash.</source>
          <target state="translated">Perl 5.10では、名前付きキャプチャグループと名前付き後方参照も導入されました。キャプチャグループに名前を付けるには、 &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; または &lt;code&gt;(?'name'...)&lt;/code&gt; いずれかを記述します。その後、後方参照は &lt;code&gt;\g{name}&lt;/code&gt; として記述されます。複数のグループに同じ名前を付けることは許可されていますが、その場合、同名のセットの左端のグループのみを参照できます。パターンの外では、名前付きのキャプチャグループに &lt;code&gt;%+&lt;/code&gt; ハッシュを介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="115264f71824b47785d298c1ef35a6a89f372587" translate="yes" xml:space="preserve">
          <source>Perl 5.10 also introduced named capture groups and named backreferences. To attach a name to a capturing group, you write either &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; or &lt;code&gt;(?'name'...)&lt;/code&gt;. The backreference may then be written as &lt;code&gt;\g{name}&lt;/code&gt;. It is permissible to attach the same name to more than one group, but then only the leftmost one of the eponymous set can be referenced. Outside of the pattern a named capture group is accessible through the &lt;code&gt;%+&lt;/code&gt; hash.</source>
          <target state="translated">Perl 5.10では、名前付きキャプチャグループと名前付き後方参照も導入されました。キャプチャグループに名前を付けるには、 &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; または &lt;code&gt;(?'name'...)&lt;/code&gt; いずれかを記述します。その後、後方参照は &lt;code&gt;\g{name}&lt;/code&gt; と書くことができます。同じ名前を複数のグループに付けることは許可されていますが、その場合、同名のセットの左端のグループのみを参照できます。パターンの外側では、名前付きキャプチャグループに &lt;code&gt;%+&lt;/code&gt; ハッシュを介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d78bc07daf7287cd2d82e764c55679c183debb95" translate="yes" xml:space="preserve">
          <source>Perl 5.10 introduced a number of control verbs intended to provide detailed control over the backtracking process, by directly influencing the regexp engine and by providing monitoring techniques. As all the features in this group are experimental and subject to change or removal in a future version of Perl, the interested reader is referred to &lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;Special Backtracking Control Verbs in perlre&lt;/a&gt; for a detailed description.</source>
          <target state="translated">Perl 5.10は、正規表現エンジンに直接影響を及ぼし、監視技術を提供することにより、バックトラッキングプロセスを詳細に制御することを目的としたいくつかの制御動詞を導入しました。このグループのすべての機能は実験的であり、Perlの将来のバージョンでは変更または削除される可能性があるため、関心のある読者は、詳細な説明について&lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;perlreのSpecial Backtracking Control Verbsを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="8d197238627a1653007f58ee33834bfb110a45a3" translate="yes" xml:space="preserve">
          <source>Perl 5.10 introduced a number of control verbs intended to provide detailed control over the backtracking process, by directly influencing the regexp engine and by providing monitoring techniques. See &lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;&quot;Special Backtracking Control Verbs&quot; in perlre&lt;/a&gt; for a detailed description.</source>
          <target state="translated">Perl 5.10では、正規表現エンジンに直接影響を与え、監視技術を提供することにより、バックトラッキングプロセスを詳細に制御することを目的とした多数の制御動詞が導入されました。詳細な説明について&lt;a href=&quot;perlre#Special-Backtracking-Control-Verbs&quot;&gt;は、perlreの「SpecialBacktrackingControlVerbs」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="584eeb9af5c995523642f05c75ed86704463abbd" translate="yes" xml:space="preserve">
          <source>Perl 5.10.0 has a bug when compiled with newer gcc versions. This bug causes a segfault whenever a new thread is launched. Test2 will attempt to detect this, and note that the system is not capable of forking when it is detected.</source>
          <target state="translated">Perl 5.10.0 には、新しい gcc バージョンでコンパイルしたときにバグがあります。このバグは、新しいスレッドが起動されるたびにセグメンテーションフォールトを引き起こします。Test2 はこれを検出しようとしますが、検出されたときにシステムがフォークすることができないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8fc66ff20f940e5def5d5b04e16e404fe2d5094" translate="yes" xml:space="preserve">
          <source>Perl 5.12 an newer is not compatible with the IBM fileset perl.libext.</source>
          <target state="translated">Perl 5.12以降はIBMのファイルセットperl.libextと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="22c1a552baa41f722e50e202fb00024c3ebfb6db" translate="yes" xml:space="preserve">
          <source>Perl 5.16</source>
          <target state="translated">Perl 5.16</target>
        </trans-unit>
        <trans-unit id="ea53addd5f513ae8ff9630b1ab8b434a441c0d82" translate="yes" xml:space="preserve">
          <source>Perl 5.16 introduced a slightly more efficient mechanism that notes separately whether each of &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; , and &lt;code&gt;$'&lt;/code&gt; have been seen, and thus may only need to copy part of the string. Perl 5.20 introduced a much more efficient copy-on-write mechanism which eliminates any slowdown.</source>
          <target state="translated">Perl 5.16は、 &lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、および &lt;code&gt;$'&lt;/code&gt; が表示されているかどうかを個別に記録する、やや効率的なメカニズムを導入したため、文字列の一部のみをコピーする必要がある場合があります。Perl 5.20は、あらゆる効率低下を排除する、はるかに効率的なコピーオンライトメカニズムを導入しました。</target>
        </trans-unit>
        <trans-unit id="a1e98cc406baf109c9d02615750864a42131b157" translate="yes" xml:space="preserve">
          <source>Perl 5.16 introduced a slightly more efficient mechanism that notes separately whether each of &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt;, and &lt;code&gt;$'&lt;/code&gt; have been seen, and thus may only need to copy part of the string. Perl 5.20 introduced a much more efficient copy-on-write mechanism which eliminates any slowdown.</source>
          <target state="translated">Perl 5.16では、 &lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、および &lt;code&gt;$'&lt;/code&gt; それぞれが表示されたかどうかを個別に記録する、わずかに効率的なメカニズムが導入されたため、文字列の一部のみをコピーする必要があります。Perl 5.20は、速度低下を排除するはるかに効率的なコピーオンライトメカニズムを導入しました。</target>
        </trans-unit>
        <trans-unit id="ecdd633a06acc3333c70644f93001a3679676523" translate="yes" xml:space="preserve">
          <source>Perl 5.18 introduced a new class, B::PADLIST, returned by B::CV's &lt;code&gt;PADLIST&lt;/code&gt; method.</source>
          <target state="translated">Perl 5.18は、B :: CVの &lt;code&gt;PADLIST&lt;/code&gt; メソッドによって返される新しいクラスB :: PADLISTを導入しました。</target>
        </trans-unit>
        <trans-unit id="6b567ee259b41361a0ad9018ea4088cb70239efc" translate="yes" xml:space="preserve">
          <source>Perl 5.22 also introduces the experimental &quot;const&quot; attribute as an alternative. (Disable the &quot;experimental::const_attr&quot; warnings if you want to use it.) When applied to an anonymous subroutine, it forces the sub to be called when the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; expression is evaluated. The return value is captured and turned into a constant subroutine:</source>
          <target state="translated">Perl 5.22では、代替として実験的な「const」属性も導入されています。（使用する場合は、「experimental :: const_attr」警告を無効にしてください。）無名サブルーチンに適用すると、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 式が評価されるときにサブが強制的に呼び出されます。戻り値がキャプチャされ、定数サブルーチンに変換されます。</target>
        </trans-unit>
        <trans-unit id="31d7199897d8b920eebab904073bac73dc70089f" translate="yes" xml:space="preserve">
          <source>Perl 5.22 also introduces the experimental &quot;const&quot; attribute as an alternative. (Disable the &quot;experimental::const_attr&quot; warnings if you want to use it.) When applied to an anonymous subroutine, it forces the sub to be called when the &lt;code&gt;sub&lt;/code&gt; expression is evaluated. The return value is captured and turned into a constant subroutine:</source>
          <target state="translated">Perl 5.22では、代わりに実験的な「const」属性も導入されています。（「experimental :: const_attr」警告を使用する場合は無効にします。）匿名サブルーチンに適用すると、 &lt;code&gt;sub&lt;/code&gt; 式の評価時にsubが強制的に呼び出されます。戻り値が取得され、定数サブルーチンに変換されます。</target>
        </trans-unit>
        <trans-unit id="cf5bb1f9d37da5d5c2d35eb2fe5db684768a1718" translate="yes" xml:space="preserve">
          <source>Perl 5.22 introduced the B::PADNAMELIST and B::PADNAME classes.</source>
          <target state="translated">Perl 5.22では、B::PADNAMELISTとB::PADNAMEクラスが導入されました。</target>
        </trans-unit>
        <trans-unit id="8eb64573fd28436266ef8b83ae879c922aa2718a" translate="yes" xml:space="preserve">
          <source>Perl 5.24</source>
          <target state="translated">Perl 5.24</target>
        </trans-unit>
        <trans-unit id="d4d54e9a22b86ccb042ec9ad9cdcb8b20f3feb99" translate="yes" xml:space="preserve">
          <source>Perl 5.26</source>
          <target state="translated">Perl 5.26</target>
        </trans-unit>
        <trans-unit id="0d7d5255cbd686c042840f5ff2f1c80ef3b153ed" translate="yes" xml:space="preserve">
          <source>Perl 5.28</source>
          <target state="translated">Perl 5.28</target>
        </trans-unit>
        <trans-unit id="87966d58d51aae325250821ef9dbcdd86c8cbe91" translate="yes" xml:space="preserve">
          <source>Perl 5.30</source>
          <target state="translated">Perl 5.30</target>
        </trans-unit>
        <trans-unit id="366edd1a774f9c1660a61ddaa3d7c12fc7af5703" translate="yes" xml:space="preserve">
          <source>Perl 5.32</source>
          <target state="translated">Perl 5.32</target>
        </trans-unit>
        <trans-unit id="16cebccb7e37f3bcda23a91f5a5b4aa3276930af" translate="yes" xml:space="preserve">
          <source>Perl 5.32.0 Documentation</source>
          <target state="translated">Perl 5.32.0 ドキュメント</target>
        </trans-unit>
        <trans-unit id="b2d0ccd58dc8c574da7bcb06529ab63a9227edf7" translate="yes" xml:space="preserve">
          <source>Perl 5.34</source>
          <target state="translated">Perl 5.34</target>
        </trans-unit>
        <trans-unit id="2c423e3fdc417abd5c0a870160561ad280c5b05c" translate="yes" xml:space="preserve">
          <source>Perl 5.6 added support for Unicode characters with code points &amp;gt; 255, and Perl 5.8 has full support for Unicode characters in hash keys. Perl internally encodes strings with these characters using utf8, and Storable serializes them as utf8. By default, if an older version of Perl encounters a utf8 value it cannot represent, it will &lt;code&gt;croak()&lt;/code&gt; . To change this behaviour so that Storable deserializes utf8 encoded values as the string of bytes (effectively dropping the</source>
          <target state="translated">Perl 5.6では、コードポイントが255を超えるUnicode文字のサポートが追加されました。Perl5.8では、ハッシュキーのUnicode文字が完全にサポートされています。Perlは、utf8を使用してこれらの文字で文字列を内部的にエンコードし、Storableはそれらをutf8としてシリアル化します。デフォルトでは、古いバージョンのPerlが、それが表すことができないutf8値を検出した場合、それは &lt;code&gt;croak()&lt;/code&gt; になります。この動作を変更して、Storableがutf8でエンコードされた値をバイト文字列としてデシリアライズするようにします（事実上、</target>
        </trans-unit>
        <trans-unit id="cde995577e5439f98ee44f0a1873e0f95b95226b" translate="yes" xml:space="preserve">
          <source>Perl 5.6 added support for Unicode characters with code points &amp;gt; 255, and Perl 5.8 has full support for Unicode characters in hash keys. Perl internally encodes strings with these characters using utf8, and Storable serializes them as utf8. By default, if an older version of Perl encounters a utf8 value it cannot represent, it will &lt;code&gt;croak()&lt;/code&gt;. To change this behaviour so that Storable deserializes utf8 encoded values as the string of bytes (effectively dropping the</source>
          <target state="translated">Perl 5.6は、コードポイントが255を超えるUnicode文字のサポートを追加し、Perl 5.8は、ハッシュキーのUnicode文字を完全にサポートしています。Perlはutf8を使用してこれらの文字で文字列を内部的にエンコードし、Storableはそれらをutf8としてシリアル化します。デフォルトでは、古いバージョンのPerlが表現できないutf8値に遭遇すると、 &lt;code&gt;croak()&lt;/code&gt; を実行します。Storableがutf8でエンコードされた値をバイトの文字列として逆シリアル化するようにこの動作を変更するには（事実上、</target>
        </trans-unit>
        <trans-unit id="4d666cc8f0c2aafb781a5c3ee7854aa462c22563" translate="yes" xml:space="preserve">
          <source>Perl 5.6 and earlier used a quicksort algorithm to implement sort. That algorithm was not stable, so</source>
          <target state="translated">Perl 5.6 以前のバージョンでは、ソートを実装するために quicksort アルゴリズムを使用していました。このアルゴリズムは安定していなかったので</target>
        </trans-unit>
        <trans-unit id="cc23cb198586dd32a543690c051c8df0366d1085" translate="yes" xml:space="preserve">
          <source>Perl 5.6 lets you write binary numbers directly with the &lt;code&gt;0b&lt;/code&gt; notation:</source>
          <target state="translated">Perl 5.6では、 &lt;code&gt;0b&lt;/code&gt; 表記で2進数を直接書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="45926b613d53010c55908af141dded6cf0223b03" translate="yes" xml:space="preserve">
          <source>Perl 5.6.0 introduced Unicode support. It's important for porters and XS writers to understand this support and make sure that the code they write does not corrupt Unicode data.</source>
          <target state="translated">Perl 5.6.0では、Unicodeのサポートが導入されました。移植者や XS のライターは、このサポートを理解し、彼らが書くコードが Unicode データを破損しないようにすることが重要です。</target>
        </trans-unit>
        <trans-unit id="d766774f1389bd4f4ba4c170949b6d3cfbd45c53" translate="yes" xml:space="preserve">
          <source>Perl 5.6.x introduced the ability to optional configure the perl interpreter to use C's &lt;code&gt;long long&lt;/code&gt; type to allow scalars to store 64 bit integers on 32 bit systems. However, due to the way the Perl configuration system generated the C configuration files on non-Windows platforms, and the way Storable generates its header, nothing in the Storable file header reflected whether the perl writing was using 32 or 64 bit integers, despite the fact that Storable was storing some data differently in the file. Hence Storable running on perl with 64 bit integers will read the header from a file written by a 32 bit perl, not realise that the data is actually in a subtly incompatible format, and then go horribly wrong (possibly crashing) if it encountered a stored integer. This is a design failure.</source>
          <target state="translated">Perl 5.6.xでは、スカラーが32ビットシステムで64ビット整数を格納できるように、Cの &lt;code&gt;long long&lt;/code&gt; 型を使用するようにperlインタープリターをオプションで構成する機能が導入されました。ただし、Windows以外のプラットフォームでPerl構成システムがC構成ファイルを生成する方法とStorableがヘッダーを生成する方法が原因で、Perlの書き込みが32ビット整数と64ビット整数のどちらを使用しているかにかかわらず、Storableファイルヘッダーには何も反映されませんでした。 Storableが一部のデータを異なる方法でファイルに格納していたという事実。したがって、64ビット整数のperlで実行されているStorableは、32ビットperlによって書き込まれたファイルからヘッダーを読み取り、データが実際には微妙に互換性のない形式であることを認識せず、格納されている場合、ひどく間違っている（おそらくクラッシュする）整数。これはデザインエラーです。</target>
        </trans-unit>
        <trans-unit id="85ca30a6ededa148e4bfea0d2618456fe4f02a72" translate="yes" xml:space="preserve">
          <source>Perl 5.8 adds support for restricted hashes, which have keys restricted to a given set, and can have values locked to be read only. By default, when Storable encounters a restricted hash on a perl that doesn't support them, it will deserialize it as a normal hash, silently discarding any placeholder keys and leaving the keys and all values unlocked. To make Storable &lt;code&gt;croak()&lt;/code&gt; instead, set &lt;code&gt;$Storable::downgrade_restricted&lt;/code&gt; to a &lt;code&gt;FALSE&lt;/code&gt; value. To restore the default set it back to some &lt;code&gt;TRUE&lt;/code&gt; value.</source>
          <target state="translated">Perl 5.8は、特定のセットに制限されたキーを持ち、読み取り専用に値をロックできる制限付きハッシュのサポートを追加します。デフォルトでは、Storableがサポートしていないperlで制限付きハッシュに遭遇すると、それを通常のハッシュとして逆シリアル化し、サイレントにプレースホルダーキーを破棄して、キーとすべての値のロックを解除します。代わりにStorable &lt;code&gt;croak()&lt;/code&gt; を作成するには、 &lt;code&gt;$Storable::downgrade_restricted&lt;/code&gt; を &lt;code&gt;FALSE&lt;/code&gt; 値に設定します。デフォルトに戻すには、 &lt;code&gt;TRUE&lt;/code&gt; 値に戻します。</target>
        </trans-unit>
        <trans-unit id="565a4d4fa800ce5182da9b6ba981e8a739829623" translate="yes" xml:space="preserve">
          <source>Perl 5.8.0 added support for Unicode on EBCDIC platforms. This support was allowed to lapse in later releases, but was revived in 5.22. Unicode support is somewhat more complex to implement since additional conversions are needed. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt; for more information.</source>
          <target state="translated">Perl 5.8.0は、EBCDICプラットフォームでUnicodeのサポートを追加しました。このサポートは、以降のリリースでは廃止されましたが、5.22で復活しました。追加の変換が必要になるため、Unicodeサポートの実装は多少複雑になります。詳細については、&lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d3bf07733afdb8eccda724369492b44b06d3912" translate="yes" xml:space="preserve">
          <source>Perl 5.8.0 and later avoid these problems by &quot;deferring&quot; signals. That is, when the signal is delivered to the process by the system (to the C code that implements Perl) a flag is set, and the handler returns immediately. Then at strategic &quot;safe&quot; points in the Perl interpreter (e.g. when it is about to execute a new opcode) the flags are checked and the Perl level handler from %SIG is executed. The &quot;deferred&quot; scheme allows much more flexibility in the coding of signal handlers as we know the Perl interpreter is in a safe state, and that we are not in a system library function when the handler is called. However the implementation does differ from previous Perls in the following ways:</source>
          <target state="translated">Perl 5.8.0 以降では、シグナルを「延期」することでこれらの問題を回避しています。つまり、シグナルがシステムから(Perl を実装した C コードに)プロセスに配信されると、フラグがセットされ、ハンドラはすぐに戻ります。その後、Perl インタプリタの戦略的な &quot;安全な&quot; ポイント (例えば、新しいオペコードを実行しようとしているときなど)でフラグがチェックされ、%SIG からの Perl レベル・ハンドラが実行されます。deferred&quot; スキームは、Perl インタプリタが安全な状態にあり、ハンドラが呼び出されたときにシステム・ライブラリ関数の中にいないことを知っているので、シグナル・ハンドラのコーディングをより柔軟に行うことができます。しかし、実装は以下の点で以前のPerlとは異なります。</target>
        </trans-unit>
        <trans-unit id="e73fd9ce0c7c872add12735883aa527cd3cbf5df" translate="yes" xml:space="preserve">
          <source>Perl 5.8.0 or later</source>
          <target state="translated">Perl 5.8.0以降</target>
        </trans-unit>
        <trans-unit id="5a0af5a1468c03fa40c2af7be5d9056970a7782e" translate="yes" xml:space="preserve">
          <source>Perl 5.8.1 and beyond are able to automatically quote v-strings but that is not possible in earlier versions of Perl. In other words:</source>
          <target state="translated">Perl 5.8.1以降では、自動的にv文字列を引用することができますが、それ以前のバージョンのPerlではできません。言い換えれば</target>
        </trans-unit>
        <trans-unit id="4e8757ee96021b145f4cb52d1033c040338543b5" translate="yes" xml:space="preserve">
          <source>Perl 6 is a reinvention of Perl, it is a language in the same lineage but not compatible. The two are complementary, not mutually exclusive. Perl 6 is not meant to replace Perl 5, and vice versa. See &lt;a href=&quot;#What-is-Perl-6%3f&quot;&gt;What is Perl 6?&lt;/a&gt; below to find out more.</source>
          <target state="translated">Perl 6はPerlの再発明であり、同じ系統の言語ですが互換性はありません。この2つは補完的であり、相互に排他的ではありません。Perl 6はPerl 5を置き換えるものではなく、その逆も同様です。「&lt;a href=&quot;#What-is-Perl-6%3f&quot;&gt;Perl 6とは&lt;/a&gt;」を参照してください。詳細については、以下をご覧ください。</target>
        </trans-unit>
        <trans-unit id="70eed57e9021b8ec1bdc60c299cf0007c990e85c" translate="yes" xml:space="preserve">
          <source>Perl 6 was</source>
          <target state="translated">Perl 6 は</target>
        </trans-unit>
        <trans-unit id="c935317046cb2fe37bcb5104606c71edb33387e0" translate="yes" xml:space="preserve">
          <source>Perl &lt;b&gt;borrows syntax&lt;/b&gt; and concepts from many languages: awk, sed, C, Bourne Shell, Smalltalk, Lisp and even English. Other languages have borrowed syntax from Perl, particularly its regular expression extensions. So if you have programmed in another language you will see familiar pieces in Perl. They often work the same, but see &lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt; for information about how they differ.</source>
          <target state="translated">Perl &lt;b&gt;は&lt;/b&gt;多くの言語（awk、sed、C、Bourne Shell、Smalltalk、Lisp、さらには英語）から&lt;b&gt;構文&lt;/b&gt;と概念を&lt;b&gt;借用しています&lt;/b&gt;。他の言語、特に正規表現の拡張機能は、Perlから構文を借用しています。したがって、別の言語でプログラミングした場合は、Perlでよく知られた部分が表示されます。それらはしばしば同じように動作しますが、それらがどのように異なるかについては&lt;a href=&quot;perltrap&quot;&gt;perltrap&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a37780bb487077495edf8f34f760c1da9044ebae" translate="yes" xml:space="preserve">
          <source>Perl API not supported by ppport.h</source>
          <target state="translated">ppport.h でサポートされていない Perl API</target>
        </trans-unit>
        <trans-unit id="50704605d6b6262fd96cb32c233850a8761b03e3" translate="yes" xml:space="preserve">
          <source>Perl API version %s of %s does not match %s</source>
          <target state="translated">Perl API バージョン %s of %s が %s と一致しません。</target>
        </trans-unit>
        <trans-unit id="5b7471df455475e2c7d2175b53792162c97edfe3" translate="yes" xml:space="preserve">
          <source>Perl Authors Upload Server. Contains links to information for module authors.</source>
          <target state="translated">Perl の著者アップロードサーバ。モジュール作者のための情報へのリンクが含まれています。</target>
        </trans-unit>
        <trans-unit id="8bf74964bb9b0e9e3d4da81f0703933934a7c358" translate="yes" xml:space="preserve">
          <source>Perl Best Practices</source>
          <target state="translated">Perl のベストプラクティス</target>
        </trans-unit>
        <trans-unit id="2cc43b42e51a4a8837fffe3af550658174edb610" translate="yes" xml:space="preserve">
          <source>Perl Books</source>
          <target state="translated">Perlの本</target>
        </trans-unit>
        <trans-unit id="ed1deb6e5d999d91341ff20898eb3858a1d9c995" translate="yes" xml:space="preserve">
          <source>Perl Bugs and the CPAN Version of &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt;</source>
          <target state="translated">Perlのバグと&lt;a href=&quot;threads&quot;&gt;スレッドの&lt;/a&gt;CPANバージョン</target>
        </trans-unit>
        <trans-unit id="a3a9e748e5c4dd7f9dfa7cc95a251e60be896a8f" translate="yes" xml:space="preserve">
          <source>Perl Classes</source>
          <target state="translated">Perl クラス</target>
        </trans-unit>
        <trans-unit id="e482403a1124e0521d166c90c8a0769c85673b5e" translate="yes" xml:space="preserve">
          <source>Perl Cookbook</source>
          <target state="translated">Perl クックブック</target>
        </trans-unit>
        <trans-unit id="d4efb54c65e7e3af46d13e87c7581a8dcba624d0" translate="yes" xml:space="preserve">
          <source>Perl DLL</source>
          <target state="translated">パールディーエル</target>
        </trans-unit>
        <trans-unit id="aeebc1579f8d617b27fe89ad608591410feec7ff" translate="yes" xml:space="preserve">
          <source>Perl Documentation</source>
          <target state="translated">Perl ドキュメント</target>
        </trans-unit>
        <trans-unit id="3283f18cd28cbde0549accd86697398505934bb4" translate="yes" xml:space="preserve">
          <source>Perl Editor by EngInSite is a complete integrated development environment (IDE) for creating, testing, and debugging Perl scripts; the tool runs on Windows 9x/NT/2000/XP or later.</source>
          <target state="translated">Perl Editor by EngInSiteは、Perlスクリプトの作成、テスト、デバッグのための完全な統合開発環境(IDE)で、Windows 9x/NT/2000/XP以降で動作します。</target>
        </trans-unit>
        <trans-unit id="7ac9d4c93ef979889b211c88f596e981156f45f4" translate="yes" xml:space="preserve">
          <source>Perl Extensions</source>
          <target state="translated">Perl 拡張機能</target>
        </trans-unit>
        <trans-unit id="f71fad82087d419a133c0dced88c67e1f9877063" translate="yes" xml:space="preserve">
          <source>Perl FAQ</source>
          <target state="translated">Perl FAQ</target>
        </trans-unit>
        <trans-unit id="da7c8c4aaafde8c9b2e5f84c7552444fbb08c636" translate="yes" xml:space="preserve">
          <source>Perl Fails Because Of Unresolved Symbol sockatmark</source>
          <target state="translated">Perl は未解決のシンボルのために失敗する sockatmark</target>
        </trans-unit>
        <trans-unit id="7c3d43451e7cda778a3f9c97b52abf3fd44bedb9" translate="yes" xml:space="preserve">
          <source>Perl Functions by Category</source>
          <target state="translated">カテゴリ別のPerl関数</target>
        </trans-unit>
        <trans-unit id="920e14089fbbc423ee2d5724c1de68632aef3813" translate="yes" xml:space="preserve">
          <source>Perl GNU Info Files on AmigaOS</source>
          <target state="translated">AmigaOS上のPerl GNU情報ファイル</target>
        </trans-unit>
        <trans-unit id="37de2a8ad505f52fcef06a6993c850291e480520" translate="yes" xml:space="preserve">
          <source>Perl HTML Documentation on AmigaOS</source>
          <target state="translated">AmigaOS上のPerl HTMLドキュメント</target>
        </trans-unit>
        <trans-unit id="05eb1caf8706fb276d9b12087337d5c6103138c5" translate="yes" xml:space="preserve">
          <source>Perl LaTeX Documentation on AmigaOS</source>
          <target state="translated">AmigaOS上のPerl LaTeXドキュメント</target>
        </trans-unit>
        <trans-unit id="04d3717cc2f7e5ee505e9248aa236712bb68755e" translate="yes" xml:space="preserve">
          <source>Perl Module Tests</source>
          <target state="translated">Perl モジュールテスト</target>
        </trans-unit>
        <trans-unit id="91a43bc6de8b72c656ec8849bbbaebef043357f9" translate="yes" xml:space="preserve">
          <source>Perl Modules</source>
          <target state="translated">Perl モジュール</target>
        </trans-unit>
        <trans-unit id="1444928d77d0dfce158ff301d3dbfb2b1588dd16" translate="yes" xml:space="preserve">
          <source>Perl Modules/Scripts</source>
          <target state="translated">Perl モジュール/スクリプト</target>
        </trans-unit>
        <trans-unit id="216d171ee4524430a28634ae1013da6c2f558efa" translate="yes" xml:space="preserve">
          <source>Perl Objects And C Structures</source>
          <target state="translated">Perl オブジェクトと C 構造体</target>
        </trans-unit>
        <trans-unit id="a472684894e509305085eced5d45bf35bf21cca5" translate="yes" xml:space="preserve">
          <source>Perl Smokers ( &lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt; and &lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt; ) automatically test Perl source releases on platforms with various configurations.</source>
          <target state="translated">Perl喫煙者（&lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt;および&lt;a href=&quot;http://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;http://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt;）は、Perlを自動的にテストしますさまざまな構成のプラットフォームでのソースリリース。</target>
        </trans-unit>
        <trans-unit id="134999afb97cf5b769bf8c4b178dce62bcebf389" translate="yes" xml:space="preserve">
          <source>Perl Smokers ( &lt;a href=&quot;https://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;https://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt; and &lt;a href=&quot;https://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;https://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt; ) automatically test Perl source releases on platforms with various configurations.</source>
          <target state="translated">Perl喫煙者（&lt;a href=&quot;https://www.nntp.perl.org/group/perl.daily-build/&quot;&gt;https://www.nntp.perl.org/group/perl.daily-build/&lt;/a&gt;および&lt;a href=&quot;https://www.nntp.perl.org/group/perl.daily-build.reports/&quot;&gt;https://www.nntp.perl.org/group/perl.daily-build.reports/&lt;/a&gt;）は自動的にPerlをテストしますさまざまな構成のプラットフォームでのソースリリース。</target>
        </trans-unit>
        <trans-unit id="a5b49734e895fa49b2262a8eac32c0a87b309e7f" translate="yes" xml:space="preserve">
          <source>Perl Source Filter</source>
          <target state="translated">Perl ソースフィルタ</target>
        </trans-unit>
        <trans-unit id="d9385cb28cfa7ddf46c00b8a389aa72f1c3ecd2f" translate="yes" xml:space="preserve">
          <source>Perl Source Filter Utility Module</source>
          <target state="translated">Perl ソースフィルタユーティリティモジュール</target>
        </trans-unit>
        <trans-unit id="11827d68497a169d041d5a9b84cc14e0b5402701" translate="yes" xml:space="preserve">
          <source>Perl Threads Are Not X Threads</source>
          <target state="translated">Perl のスレッドは X スレッドではない</target>
        </trans-unit>
        <trans-unit id="0d5f49a6432453dfdae5c9b853d5d2137d7a3d82" translate="yes" xml:space="preserve">
          <source>Perl Traps</source>
          <target state="translated">Perl のトラップ</target>
        </trans-unit>
        <trans-unit id="baee6a50a34759c52a5448ef022819377b034948" translate="yes" xml:space="preserve">
          <source>Perl VIO and PM executables (dynamically linked)</source>
          <target state="translated">Perl の VIO と PM 実行ファイル (動的にリンクされています)</target>
        </trans-unit>
        <trans-unit id="e81612c89b54aaefee5157e85c78728a2455e0ca" translate="yes" xml:space="preserve">
          <source>Perl XS' attempt at a solution to this is the concept of typemaps. At an abstract level, a Perl XS typemap is nothing but a recipe for converting from a certain Perl data structure to a certain C data structure and vice versa. Since there can be C types that are sufficiently similar to one another to warrant converting with the same logic, XS typemaps are represented by a unique identifier, henceforth called an &lt;b&gt;XS type&lt;/b&gt; in this document. You can then tell the XS compiler that multiple C types are to be mapped with the same XS typemap.</source>
          <target state="translated">これを解決するためのPerl XSの試みは、タイプマップの概念です。抽象レベルでは、Perl XSタイプマップは、特定のPerlデータ構造から特定のCデータ構造に、またはその逆に変換するためのレシピにすぎません。同じロジックで変換を保証するのに十分に類似しているCタイプが存在する可能性があるため、XSタイプマップは一意の識別子で表されます。以降、このドキュメントでは&lt;b&gt;XSタイプ&lt;/b&gt;と呼びます。次に、複数のCタイプが同じXSタイプマップでマップされることをXSコンパイラーに通知できます。</target>
        </trans-unit>
        <trans-unit id="5aedddb9bed4a6f9cc4928e309c3362165c3d8aa" translate="yes" xml:space="preserve">
          <source>Perl actually inserts the following code:</source>
          <target state="translated">Perlは実際に以下のコードを挿入します。</target>
        </trans-unit>
        <trans-unit id="0370590002494d49cbee29303986558b8c939d60" translate="yes" xml:space="preserve">
          <source>Perl actually stands for Pathologically Eclectic Rubbish Lister, but don't tell anyone I said that.</source>
          <target state="translated">Perl は実は Pathologically Eclectic Rubbish Lister の略ですが、私がそう言ったことは誰にも言わないでください。</target>
        </trans-unit>
        <trans-unit id="4ac1014663aa23e842df07d5739089aa502fbf6c" translate="yes" xml:space="preserve">
          <source>Perl adds magic to an SV using the sv_magic function:</source>
          <target state="translated">Perl は sv_magic 関数を使って SV にマジックを追加します。</target>
        </trans-unit>
        <trans-unit id="c3b8bb4554b031723a2e07241fd747dea1d44323" translate="yes" xml:space="preserve">
          <source>Perl after 5.8.7 has support for the &lt;code&gt;CLONE_SKIP&lt;/code&gt; special subroutine. Like &lt;code&gt;CLONE&lt;/code&gt; , &lt;code&gt;CLONE_SKIP&lt;/code&gt; is called once per package; however, it is called just before cloning starts, and in the context of the parent thread. If it returns a true value, then no objects of that class will be cloned; or rather, they will be copied as unblessed, undef values. For example: if in the parent there are two references to a single blessed hash, then in the child there will be two references to a single undefined scalar value instead. This provides a simple mechanism for making a module threadsafe; just add &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; at the top of the class, and &lt;code&gt;DESTROY()&lt;/code&gt; will now only be called once per object. Of course, if the child thread needs to make use of the objects, then a more sophisticated approach is needed.</source>
          <target state="translated">5.8.7以降のPerlは、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; 特殊サブルーチンをサポートしています。 &lt;code&gt;CLONE&lt;/code&gt; と同様に、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; はパッケージごとに1回呼び出されます。ただし、複製が開始する直前、および親スレッドのコンテキストで呼び出されます。真の値を返す場合、そのクラスのオブジェクトは複製されません。むしろ、それらはunblessed、undef値としてコピーされます。たとえば、親に1つのblessハッシュへの2つの参照がある場合、子には、代わりに1つの未定義のスカラー値への2つの参照があります。これは、モジュールをスレッドセーフにする簡単なメカニズムを提供します。クラスの先頭に &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; を追加し、 &lt;code&gt;DESTROY()&lt;/code&gt; を実行するだけですオブジェクトごとに1回だけ呼び出されるようになりました。もちろん、子スレッドがオブジェクトを利用する必要がある場合は、より洗練されたアプローチが必要です。</target>
        </trans-unit>
        <trans-unit id="cc574da81e120f807b416b88f2c0641a8912116e" translate="yes" xml:space="preserve">
          <source>Perl after 5.8.7 has support for the &lt;code&gt;CLONE_SKIP&lt;/code&gt; special subroutine. Like &lt;code&gt;CLONE&lt;/code&gt;, &lt;code&gt;CLONE_SKIP&lt;/code&gt; is called once per package; however, it is called just before cloning starts, and in the context of the parent thread. If it returns a true value, then no objects of that class will be cloned; or rather, they will be copied as unblessed, undef values. For example: if in the parent there are two references to a single blessed hash, then in the child there will be two references to a single undefined scalar value instead. This provides a simple mechanism for making a module threadsafe; just add &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; at the top of the class, and &lt;code&gt;DESTROY()&lt;/code&gt; will now only be called once per object. Of course, if the child thread needs to make use of the objects, then a more sophisticated approach is needed.</source>
          <target state="translated">5.8.7以降のPerlは、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; 特殊サブルーチンをサポートしています。 &lt;code&gt;CLONE&lt;/code&gt; と同様に、 &lt;code&gt;CLONE_SKIP&lt;/code&gt; はパッケージごとに1回呼び出されます。ただし、クローン作成が開始される直前に、親スレッドのコンテキストで呼び出されます。真の値を返す場合、そのクラスのオブジェクトは複製されません。むしろ、それらは祝福されていないundef値としてコピーされます。例：親に単一の祝福されたハッシュへの2つの参照がある場合、子には代わりに単一の未定義のスカラー値への2つの参照があります。これは、モジュールをスレッドセーフにするための簡単なメカニズムを提供します。クラスの先頭に &lt;code&gt;sub CLONE_SKIP { 1 }&lt;/code&gt; を追加し、 &lt;code&gt;DESTROY()&lt;/code&gt; を追加するだけです。オブジェクトごとに1回だけ呼び出されるようになりました。もちろん、子スレッドがオブジェクトを利用する必要がある場合は、より高度なアプローチが必要です。</target>
        </trans-unit>
        <trans-unit id="c3994bbd1bc4bb2e8469e1a722d815312e8adf0c" translate="yes" xml:space="preserve">
          <source>Perl allows multiple inheritance, which means that a class can inherit from multiple parents. While this is possible, we strongly recommend against it. Generally, you can use &lt;b&gt;roles&lt;/b&gt; to do everything you can do with multiple inheritance, but in a cleaner way.</source>
          <target state="translated">Perlは多重継承を許可します。つまり、クラスは複数の親から継承できます。これは可能ですが、お勧めしません。一般に、&lt;b&gt;ロール&lt;/b&gt;を使用すると、多重継承で実行できるすべてのことをよりクリーンな方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="6599623983e18eb4fc0786b977835cf73837499f" translate="yes" xml:space="preserve">
          <source>Perl allows strings to contain a superset of Unicode code points, but these may not be accepted by other languages/systems. Further, even if these languages/systems accept these large code points, they may have chosen a different representation for them than the UTF-8-like one that Perl has, which would mean files are not exchangeable between them and Perl.</source>
          <target state="translated">Perl は文字列に Unicode コードポイントのスーパーセットを含むことを許可していますが、他の言語/システムではこれらのコードポイントは受け入れられないかもしれません。さらに、これらの言語/システムがこれらの大きなコードポイントを受け入れたとしても、それらの言語/システムは Perl が持っている UTF-8 のようなものとは異なる表現を選択しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="1876b83bb7cab17e23b16333856308b07e0072a3" translate="yes" xml:space="preserve">
          <source>Perl allows strings to contain a superset of Unicode code points, up to the limit of what is storable in an unsigned integer on your system, but these may not be accepted by other languages/systems. At one time, it was legal in some standards to have code points up to 0x7FFF_FFFF, but not higher. Code points above 0xFFFF_FFFF require larger than a 32 bit word.</source>
          <target state="translated">Perl では、文字列に Unicode コードポイントのスーパーセットを含めることができますが、お使いのシステムでは符号なし整数に格納できる限度までですが、他の言語/システムでは受け入れられない場合があります。一時期、いくつかの規格では、0x7FFF_FFFF までのコードポイントを持つことは合法でしたが、それ以上のコードポイントを持つことはできませんでした。0xFFFF_FFFFを超えるコードポイントは、32ビットのワードよりも大きいものを必要とします。</target>
        </trans-unit>
        <trans-unit id="da9001288df945c437097ff6bd5fee062555f6d6" translate="yes" xml:space="preserve">
          <source>Perl allows you to call methods using their fully qualified name (the package and method name):</source>
          <target state="translated">Perl では、完全修飾名 (パッケージ名とメソッド名)を使ってメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2ac9734d0ed22e02e26ee85745c9780f4e398059" translate="yes" xml:space="preserve">
          <source>Perl already</source>
          <target state="translated">Perlはすでに</target>
        </trans-unit>
        <trans-unit id="15634b8ec3adda1649ae8821b358664ffd34a247" translate="yes" xml:space="preserve">
          <source>Perl also defines a consistent extension syntax for features not found in standard tools like &lt;b&gt;awk&lt;/b&gt; and &lt;b&gt;lex&lt;/b&gt;. The syntax for most of these is a pair of parentheses with a question mark as the first thing within the parentheses. The character after the question mark indicates the extension.</source>
          <target state="translated">Perlは、&lt;b&gt;awk&lt;/b&gt;や&lt;b&gt;lex&lt;/b&gt;などの標準ツールにはない機能についても、一貫した拡張構文を定義しています。これらのほとんどの構文は、括弧内の最初のものとして疑問符の付いた括弧のペアです。疑問符の後の文字は拡張子を示します。</target>
        </trans-unit>
        <trans-unit id="555f11f2e27ae1e8bf2d2bd41f29991c6d6def35" translate="yes" xml:space="preserve">
          <source>Perl also defines single form synonyms for the block property in cases where these do not conflict with something else. But don't use any of these, because they are unstable. Since these are Perl extensions, they are subordinate to official Unicode property names; Unicode doesn't know nor care about Perl's extensions. It may happen that a name that currently means the Perl extension will later be changed without warning to mean a different Unicode property in a future version of the perl interpreter that uses a later Unicode release, and your code would no longer work. The extensions are mentioned here for completeness: Take the block name and prefix it with one of: &lt;code&gt;In&lt;/code&gt; (for example &lt;code&gt;\p{Blk=Arrows}&lt;/code&gt; can currently be written as &lt;code&gt;\p{In_Arrows}&lt;/code&gt;); or sometimes &lt;code&gt;Is&lt;/code&gt; (like &lt;code&gt;\p{Is_Arrows}&lt;/code&gt;); or sometimes no prefix at all (&lt;code&gt;\p{Arrows}&lt;/code&gt;). As of this writing (Unicode 9.0) there are no conflicts with using the &lt;code&gt;In_&lt;/code&gt; prefix, but there are plenty with the other two forms. For example, &lt;code&gt;\p{Is_Hebrew}&lt;/code&gt; and &lt;code&gt;\p{Hebrew}&lt;/code&gt; mean &lt;code&gt;\p{Script_Extensions=Hebrew}&lt;/code&gt; which is NOT the same thing as &lt;code&gt;\p{Blk=Hebrew}&lt;/code&gt;. Our advice used to be to use the &lt;code&gt;In_&lt;/code&gt; prefix as a single form way of specifying a block. But Unicode 8.0 added properties whose names begin with &lt;code&gt;In&lt;/code&gt;, and it's now clear that it's only luck that's so far prevented a conflict. Using &lt;code&gt;In&lt;/code&gt; is only marginally less typing than &lt;code&gt;Blk:&lt;/code&gt;, and the latter's meaning is clearer anyway, and guaranteed to never conflict. So don't take chances. Use &lt;code&gt;\p{Blk=foo}&lt;/code&gt; for new code. And be sure that block is what you really really want to do. In most cases scripts are what you want instead.</source>
          <target state="translated">Perlは、他のものと競合しない場合に備えて、blockプロパティの単一形式の同義語も定義します。ただし、これらは不安定であるため、使用しないでください。これらはPerl拡張機能であるため、公式のUnicodeプロパティ名に従属します。 Unicodeは、Perlの拡張機能を認識も認識もしていません。現在Perl拡張子を意味する名前は、後のUnicodeリリースを使用するperlインタープリターの将来のバージョンで別のUnicodeプロパティを意味するように警告なしに後で変更され、コードが機能しなくなる場合があります。拡張機能は完全性のためにここに記載されている：ブロック名を取り、のいずれかでそれを接頭辞： &lt;code&gt;In&lt;/code&gt; （例えば &lt;code&gt;\p{Blk=Arrows}&lt;/code&gt; 現在のように書くことができる &lt;code&gt;\p{In_Arrows}&lt;/code&gt; ）。または時々 &lt;code&gt;Is&lt;/code&gt; （ &lt;code&gt;\p{Is_Arrows}&lt;/code&gt; ）;または、プレフィックスがまったくない場合もあります（ &lt;code&gt;\p{Arrows}&lt;/code&gt; ）。この記事の執筆時点（Unicode 9.0）では、 &lt;code&gt;In_&lt;/code&gt; プレフィックスの使用との競合はありませんが、他の2つの形式との競合はたくさんあります。例えば、 &lt;code&gt;\p{Is_Hebrew}&lt;/code&gt; と &lt;code&gt;\p{Hebrew}&lt;/code&gt; 平均 &lt;code&gt;\p{Script_Extensions=Hebrew}&lt;/code&gt; と同じことされていない &lt;code&gt;\p{Blk=Hebrew}&lt;/code&gt; 。私たちのアドバイスは、ブロックを指定する単一の形式の方法として &lt;code&gt;In_&lt;/code&gt; プレフィックスを使用することでした。しかし、Unicode 8.0では、名前が &lt;code&gt;In&lt;/code&gt; で始まるプロパティが追加されており、これまでのところ競合を防いだのは運だけであることが明らかになりました。使用する &lt;code&gt;In&lt;/code&gt; は &lt;code&gt;Blk:&lt;/code&gt; よりもタイピングがわずかに少ないだけで、後者の意味はとにかく明確であり、競合しないことが保証されています。だからチャンスをとらないでください。新しいコードには &lt;code&gt;\p{Blk=foo}&lt;/code&gt; を使用します。そして、ブロックが本当に本当にやりたいことであることを確認してください。ほとんどの場合、代わりにスクリプトが必要です。</target>
        </trans-unit>
        <trans-unit id="a619d021759a90d753880bfe4b40f68e2b5378ff" translate="yes" xml:space="preserve">
          <source>Perl also guarantees that the ranges &lt;code&gt;A-Z&lt;/code&gt; , &lt;code&gt;a-z&lt;/code&gt; , &lt;code&gt;0-9&lt;/code&gt; , and any subranges of these match what an English-only speaker would expect them to match on any platform. That is, &lt;code&gt;[A-Z]&lt;/code&gt; matches the 26 ASCII uppercase letters; &lt;code&gt;[a-z]&lt;/code&gt; matches the 26 lowercase letters; and &lt;code&gt;[0-9]&lt;/code&gt; matches the 10 digits. Subranges, like &lt;code&gt;[h-k]&lt;/code&gt; , match correspondingly, in this case just the four letters &lt;code&gt;&quot;h&quot;&lt;/code&gt; , &lt;code&gt;&quot;i&quot;&lt;/code&gt; , &lt;code&gt;&quot;j&quot;&lt;/code&gt; , and &lt;code&gt;&quot;k&quot;&lt;/code&gt; . This is the natural behavior on ASCII platforms where the code points (ordinal values) for &lt;code&gt;&quot;h&quot;&lt;/code&gt; through &lt;code&gt;&quot;k&quot;&lt;/code&gt; are consecutive integers (0x68 through 0x6B). But special handling to achieve this may be needed on platforms with a non-ASCII native character set. For example, on EBCDIC platforms, the code point for &lt;code&gt;&quot;h&quot;&lt;/code&gt; is 0x88, &lt;code&gt;&quot;i&quot;&lt;/code&gt; is 0x89, &lt;code&gt;&quot;j&quot;&lt;/code&gt; is 0x91, and &lt;code&gt;&quot;k&quot;&lt;/code&gt; is 0x92. Perl specially treats &lt;code&gt;[h-k]&lt;/code&gt; to exclude the seven code points in the gap: 0x8A through 0x90. This special handling is only invoked when the range is a subrange of one of the ASCII uppercase, lowercase, and digit ranges, AND each end of the range is expressed either as a literal, like &lt;code&gt;&quot;A&quot;&lt;/code&gt; , or as a named character (&lt;code&gt;\N{...}&lt;/code&gt; , including the &lt;code&gt;\N{U+...&lt;/code&gt; form).</source>
          <target state="translated">Perlはまた、範囲 &lt;code&gt;A-Z&lt;/code&gt; 、 &lt;code&gt;a-z&lt;/code&gt; 、 &lt;code&gt;0-9&lt;/code&gt; 、およびこれらの部分範囲が、英語のみの話者がどのプラットフォームでも一致すると予想する範囲と一致することも保証します。つまり、 &lt;code&gt;[A-Z]&lt;/code&gt; は26文字のASCII大文字と一致します。 &lt;code&gt;[a-z]&lt;/code&gt; は26の小文字に一致します。そして &lt;code&gt;[0-9]&lt;/code&gt; は 10桁の数字と一致します。 &lt;code&gt;[h-k]&lt;/code&gt; ような部分範囲は対応して一致します。この場合、 &lt;code&gt;&quot;h&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;i&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;j&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;k&quot;&lt;/code&gt; の4文字のみが一致します。これは、 &lt;code&gt;&quot;h&quot;&lt;/code&gt; から &lt;code&gt;&quot;k&quot;&lt;/code&gt; &quot;までのコードポイント（序数値）が設定されているASCIIプラットフォームでの自然な動作です。k &quot;連続した整数（0x68から0x6B）。ただし、ASCII以外のネイティブ文字セットを使用するプラットフォームでは、これを実現するための特別な処理が必要になる場合があります。たとえば、EBCDICプラットフォームでは、 &lt;code&gt;&quot;h&quot;&lt;/code&gt; コードポイントは0x88、 &lt;code&gt;&quot;i&quot;&lt;/code&gt; は0x89、 &lt;code&gt;&quot;j&quot;&lt;/code&gt; は0x91、 &lt;code&gt;&quot;k&quot;&lt;/code&gt; は0x92です。 Perlは、 &lt;code&gt;[h-k]&lt;/code&gt; を特別に扱い、ギャップ内の7つのコードポイント0x8Aから0x90を除外します。この特別な処理は、範囲がASCIIの大文字、小文字、および数字の範囲のいずれかのサブ範囲であり、かつ範囲の両端が &lt;code&gt;&quot;A&quot;&lt;/code&gt; のようなリテラルまたは名前付き文字（ &lt;code&gt;\N{...}&lt;/code&gt; （ &lt;code&gt;\N{U+...&lt;/code&gt; フォームを含む）。</target>
        </trans-unit>
        <trans-unit id="d3478992830572c2488574386b02bb13d70d568a" translate="yes" xml:space="preserve">
          <source>Perl also guarantees that the ranges &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and any subranges of these match what an English-only speaker would expect them to match on any platform. That is, &lt;code&gt;[A-Z]&lt;/code&gt; matches the 26 ASCII uppercase letters; &lt;code&gt;[a-z]&lt;/code&gt; matches the 26 lowercase letters; and &lt;code&gt;[0-9]&lt;/code&gt; matches the 10 digits. Subranges, like &lt;code&gt;[h-k]&lt;/code&gt;, match correspondingly, in this case just the four letters &lt;code&gt;&quot;h&quot;&lt;/code&gt;, &lt;code&gt;&quot;i&quot;&lt;/code&gt;, &lt;code&gt;&quot;j&quot;&lt;/code&gt;, and &lt;code&gt;&quot;k&quot;&lt;/code&gt;. This is the natural behavior on ASCII platforms where the code points (ordinal values) for &lt;code&gt;&quot;h&quot;&lt;/code&gt; through &lt;code&gt;&quot;k&quot;&lt;/code&gt; are consecutive integers (0x68 through 0x6B). But special handling to achieve this may be needed on platforms with a non-ASCII native character set. For example, on EBCDIC platforms, the code point for &lt;code&gt;&quot;h&quot;&lt;/code&gt; is 0x88, &lt;code&gt;&quot;i&quot;&lt;/code&gt; is 0x89, &lt;code&gt;&quot;j&quot;&lt;/code&gt; is 0x91, and &lt;code&gt;&quot;k&quot;&lt;/code&gt; is 0x92. Perl specially treats &lt;code&gt;[h-k]&lt;/code&gt; to exclude the seven code points in the gap: 0x8A through 0x90. This special handling is only invoked when the range is a subrange of one of the ASCII uppercase, lowercase, and digit ranges, AND each end of the range is expressed either as a literal, like &lt;code&gt;&quot;A&quot;&lt;/code&gt;, or as a named character (&lt;code&gt;\N{...}&lt;/code&gt;, including the &lt;code&gt;\N{U+...&lt;/code&gt; form).</source>
          <target state="translated">Perlはまた、範囲 &lt;code&gt;A-Z&lt;/code&gt; 、 &lt;code&gt;a-z&lt;/code&gt; 、 &lt;code&gt;0-9&lt;/code&gt; 、およびこれらのサブ範囲が、英語のみの話者がどのプラットフォームでも一致すると予想するものと一致することを保証します。つまり、 &lt;code&gt;[A-Z]&lt;/code&gt; は26個のASCII大文字と一致します。 &lt;code&gt;[a-z]&lt;/code&gt; は26個の小文字に一致します。そして &lt;code&gt;[0-9]&lt;/code&gt; は10桁の数字と一致します。 &lt;code&gt;[h-k]&lt;/code&gt; ようなサブレンジは、対応して一致します。この場合は、4文字の &lt;code&gt;&quot;h&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;i&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;j&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;k&quot;&lt;/code&gt; です。これは、コードが &lt;code&gt;&quot;h&quot;&lt;/code&gt; から &lt;code&gt;&quot;k&quot;&lt;/code&gt; 指す（順序値）ASCIIプラットフォームでの自然な動作です。連続する整数（0x68から0x6B）です。ただし、非ASCIIネイティブ文字セットを使用するプラットフォームでは、これを実現するための特別な処理が必要になる場合があります。たとえば、EBCDICプラットフォームでは、 &lt;code&gt;&quot;h&quot;&lt;/code&gt; コードポイントは0x88、 &lt;code&gt;&quot;i&quot;&lt;/code&gt; は0x89、 &lt;code&gt;&quot;j&quot;&lt;/code&gt; は0x91、 &lt;code&gt;&quot;k&quot;&lt;/code&gt; は0x92です。 Perlは &lt;code&gt;[h-k]&lt;/code&gt; を特別に扱い、ギャップ内の7つのコードポイント（0x8Aから0x90）を除外します。この特別な処理は、範囲がASCIIの大文字、小文字、および数字の範囲のいずれかのサブ範囲であり、範囲の両端が &lt;code&gt;&quot;A&quot;&lt;/code&gt; などのリテラルまたは名前付き文字（ &lt;code&gt;\N{...}&lt;/code&gt; 、 &lt;code&gt;\N{U+...&lt;/code&gt; フォームを含む）。</target>
        </trans-unit>
        <trans-unit id="43ed4c36b705c801489a6eaa310a7c1790004938" translate="yes" xml:space="preserve">
          <source>Perl also has environment variables that control how Perl handles data specific to particular natural languages; see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">Perlには、Perlが特定の自然言語に固有のデータを処理する方法を制御する環境変数もあります。&lt;a href=&quot;perllocale&quot;&gt;perllocaleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8ec1e88310a904c3504c234668eb6f0ebab9fa04" translate="yes" xml:space="preserve">
          <source>Perl also has its own built-in variables whose names don't follow these rules. They have strange names so they don't accidentally collide with one of your normal variables. Strings that match parenthesized parts of a regular expression are saved under names containing only digits after the &lt;code&gt;$&lt;/code&gt; (see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;). In addition, several special variables that provide windows into the inner working of Perl have names containing punctuation characters and control characters. These are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">Perlには独自の組み込み変数もあり、その名前はこれらの規則に従っていません。それらは奇妙な名前を持っているので、誤って通常の変数の1つと衝突することはありません。正規表現の括弧で囲まれた部分に一致する文字&lt;a href=&quot;perlop&quot;&gt;列&lt;/a&gt;は、 &lt;code&gt;$&lt;/code&gt; の後に数字のみを含む名前で保存されます（perlopおよび&lt;a href=&quot;perlre&quot;&gt;perlreを&lt;/a&gt;参照）。さらに、Perlの内部動作にウィンドウを提供するいくつかの特殊変数には、句読点文字と制御文字を含む名前があります。これらは&lt;a href=&quot;perlvar&quot;&gt;perlvarに&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="f3713f56b650ce5c5c9a6797e5a04ca7cc768c6f" translate="yes" xml:space="preserve">
          <source>Perl also has its own built-in variables whose names don't follow these rules. They have strange names so they don't accidentally collide with one of your normal variables. Strings that match parenthesized parts of a regular expression are saved under names containing only digits after the &lt;code&gt;$&lt;/code&gt; (see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;). In addition, several special variables that provide windows into the inner working of Perl have names containing punctuation characters. These are documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">Perlには、名前がこれらの規則に従わない独自の組み込み変数もあります。それらは奇妙な名前を持っているので、通常の変数の1つと誤って衝突することはありません。正規表現の括弧で囲まれた部分に一致する文字&lt;a href=&quot;perlop&quot;&gt;列&lt;/a&gt;は、 &lt;code&gt;$&lt;/code&gt; の後の数字のみを含む名前で保存されます（perlopおよび&lt;a href=&quot;perlre&quot;&gt;perlreを&lt;/a&gt;参照）。さらに、Perlの内部動作へのウィンドウを提供するいくつかの特別な変数には、句読文字を含む名前があります。これらは&lt;a href=&quot;perlvar&quot;&gt;perlvarに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="841c07e6d7a8a9202a2c193293298a117297f325" translate="yes" xml:space="preserve">
          <source>Perl also has single-form extensions that refer to blocks, &lt;code&gt;In_Cyrillic&lt;/code&gt; , meaning &lt;code&gt;Block=Cyrillic&lt;/code&gt; . These have always been written in the new style.</source>
          <target state="translated">Perlには、ブロックを参照する単一形式の拡張機能 &lt;code&gt;In_Cyrillic&lt;/code&gt; 、つまり &lt;code&gt;Block=Cyrillic&lt;/code&gt; もあります。これらは常に新しいスタイルで書かれています。</target>
        </trans-unit>
        <trans-unit id="5bfcb9a0154768c6b22ee7b3439e847665a12d5c" translate="yes" xml:space="preserve">
          <source>Perl also has single-form extensions that refer to blocks, &lt;code&gt;In_Cyrillic&lt;/code&gt;, meaning &lt;code&gt;Block=Cyrillic&lt;/code&gt;. These have always been written in the new style.</source>
          <target state="translated">Perlには、ブロックを参照する単一形式の拡張機能 &lt;code&gt;In_Cyrillic&lt;/code&gt; もあります。これは、 &lt;code&gt;Block=Cyrillic&lt;/code&gt; を意味します。これらは常に新しいスタイルで書かれています。</target>
        </trans-unit>
        <trans-unit id="137aae63637704103b28432cb70098e2ba4ae7c0" translate="yes" xml:space="preserve">
          <source>Perl also lets you open a filehandle into an external program or shell command rather than into a file. You can do this in order to pass data from your Perl program to an external command for further processing, or to receive data from another program for your own Perl program to process.</source>
          <target state="translated">Perl では、ファイルハンドルをファイルではなく、外部プログラムやシェルコマンドに開くこともできます。これは、Perl プログラムからのデータを外部コマンドに渡してさらに処理したり、別のプログラムからデータを受信して自分の Perl プログラムが処理するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e768cdcaf855f3ac360271eae70fa3fb2f42dd9c" translate="yes" xml:space="preserve">
          <source>Perl also lets you use a dereferenced scalar reference in a method call. That's a mouthful, so let's look at some code:</source>
          <target state="translated">Perl では、メソッド呼び出しで参照元のスカラ参照を使用することもできます。これは大変なことなので、いくつかのコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="bb3ab86dafec3fc1c1204665ff3d23b69370b1f7" translate="yes" xml:space="preserve">
          <source>Perl also lets you use a scalar containing a string as a class name:</source>
          <target state="translated">Perl では、文字列を含むスカラをクラス名として使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c015ec327f8f9a3ad1518fbf18a7cfa1b7b34e78" translate="yes" xml:space="preserve">
          <source>Perl also makes no guarantees that the representation of these code points won't change at some point in the future, say when machines become available that have larger than a 64-bit word. At that time, files containing any of these, written by an older Perl might require conversion before being readable by a newer Perl.</source>
          <target state="translated">また、Perl は、将来、64 ビット以上のワードを持つマシンが利用可能になったときなど、これらのコードポイントの表現が変更されないことを保証するものではありません。その時、古い Perl で書かれたこれらのコードポイントを含むファイルは、新しい Perl で読めるようになる前に変換が必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="371faeea377937a5cb124120c079958efb812b1f" translate="yes" xml:space="preserve">
          <source>Perl also provides some additional extensions and short-cut synonyms for Unicode properties.</source>
          <target state="translated">また、Perl は、Unicode プロパティのためのいくつかの追加拡張機能とショートカット同義語を提供しています。</target>
        </trans-unit>
        <trans-unit id="bc3b136059aadb780f36682ea1b93270fac2fc5f" translate="yes" xml:space="preserve">
          <source>Perl also uses two special typedefs, I32 and I16, which will always be at least 32-bits and 16-bits long, respectively. (Again, there are U32 and U16, as well.) They will usually be exactly 32 and 16 bits long, but on Crays they will both be 64 bits.</source>
          <target state="translated">Perlはまた、I32とI16という2つの特別な型定義を使用していますが、これらは常に少なくとも32ビットと16ビットの長さになります。(ここでもU32とU16があります。)これらは通常、正確には32ビットと16ビットの長さになりますが、Craysでは両方とも64ビットになります。</target>
        </trans-unit>
        <trans-unit id="d9ec80db167215866b69eb0ca3e0370b7320f73c" translate="yes" xml:space="preserve">
          <source>Perl and its various modules and components, including its test frameworks, may sometimes make use of certain other environment variables. Some of these are specific to a particular platform. Please consult the appropriate module documentation and any documentation for your platform (like &lt;a href=&quot;perlsolaris&quot;&gt;perlsolaris&lt;/a&gt;, &lt;a href=&quot;perllinux&quot;&gt;perllinux&lt;/a&gt;, &lt;a href=&quot;perlmacosx&quot;&gt;perlmacosx&lt;/a&gt;, &lt;a href=&quot;perlwin32&quot;&gt;perlwin32&lt;/a&gt;, etc) for variables peculiar to those specific situations.</source>
          <target state="translated">Perlとそのテストフレームワークを含むさまざまなモジュールおよびコンポーネントは、他の特定の環境変数を使用する場合があります。これらのいくつかは、特定のプラットフォームに固有です。これらの特定の状況に固有の変数については、適切なモジュールのドキュメントおよびプラットフォームのドキュメント（&lt;a href=&quot;perlsolaris&quot;&gt;perlsolaris&lt;/a&gt;、&lt;a href=&quot;perllinux&quot;&gt;perllinux&lt;/a&gt;、&lt;a href=&quot;perlmacosx&quot;&gt;perlmacosx&lt;/a&gt;、&lt;a href=&quot;perlwin32&quot;&gt;perlwin32&lt;/a&gt;など）を参照してください。</target>
        </trans-unit>
        <trans-unit id="d1f38ea6665b57c86a485191974a93669f79515b" translate="yes" xml:space="preserve">
          <source>Perl applications</source>
          <target state="translated">Perlアプリケーション</target>
        </trans-unit>
        <trans-unit id="4025df8be02954e082a25375011463ff96fd6a98" translate="yes" xml:space="preserve">
          <source>Perl array references become JSON arrays.</source>
          <target state="translated">Perlの配列参照はJSON配列になります。</target>
        </trans-unit>
        <trans-unit id="502f7e3b25466218701794ac8b146d454581203f" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid duplicate output.</source>
          <target state="translated">Perlは、子プロセスをフォークする前に、出力用に開いているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;../perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （英語では$ AUTOFLUSH）、または開いている &lt;code&gt;IO::Handle&lt;/code&gt; でIO :: Handleの &lt;code&gt;autoflush()&lt;/code&gt; メソッドを呼び出して、出力の重複を回避します。</target>
        </trans-unit>
        <trans-unit id="9e63e6195bf1a4edf392bb3f6dbbceb58829cc90" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;a href=&quot;perlvar#%24%7C&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;) or call the &lt;code&gt;autoflush&lt;/code&gt; method of &lt;a href=&quot;IO::Handle#METHODS&quot;&gt;&lt;code&gt;IO::Handle&lt;/code&gt;&lt;/a&gt; on any open handles to avoid duplicate output.</source>
          <target state="translated">Perlは、子プロセスをフォークする前に、出力用に開かれたすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、&lt;a href=&quot;perlvar#%24%7C&quot;&gt; &lt;code&gt;$|&lt;/code&gt; &lt;/a&gt;を設定する必要があるかもしれません。（ &lt;code&gt;$AUTOFLUSH&lt;/code&gt; で&lt;a href=&quot;english&quot;&gt;、英語&lt;/a&gt;）、またはお電話 &lt;code&gt;autoflush&lt;/code&gt; の方法&lt;a href=&quot;IO::Handle#METHODS&quot;&gt; &lt;code&gt;IO::Handle&lt;/code&gt; &lt;/a&gt;の重複出力を避けるために、すべての開いているハンドル上を。</target>
        </trans-unit>
        <trans-unit id="310c094e234f2eeac0cd6d541a4252ff1573cf15" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before forking the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid duplicate output.</source>
          <target state="translated">Perlは、子プロセスをフォークする前に、出力用に開いているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （英語では$ AUTOFLUSH）、または開いている &lt;code&gt;IO::Handle&lt;/code&gt; でIO :: Handleの &lt;code&gt;autoflush()&lt;/code&gt; メソッドを呼び出して、出力の重複を回避します。</target>
        </trans-unit>
        <trans-unit id="de17dd0dec4269e99ee3620228765bf8385c7342" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid lost output.</source>
          <target state="translated">Perlはexecの前に出力用に開かれているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;../perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （英語の$ AUTOFLUSH）または、出力が失われないように、開いている &lt;code&gt;IO::Handle&lt;/code&gt; でIO :: Handleの &lt;code&gt;autoflush()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="051c3f058010c205bb09ec0c0f5ce04fd3e0e5c9" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;a href=&quot;perlvar#%24%7C&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;) or call the &lt;code&gt;autoflush&lt;/code&gt; method of &lt;a href=&quot;IO::Handle#METHODS&quot;&gt;&lt;code&gt;IO::Handle&lt;/code&gt;&lt;/a&gt; on any open handles to avoid lost output.</source>
          <target state="translated">Perlは、execの前に出力用に開かれたすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない可能性があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、&lt;a href=&quot;perlvar#%24%7C&quot;&gt; &lt;code&gt;$|&lt;/code&gt; &lt;/a&gt;を設定する必要があるかもしれません。（ &lt;code&gt;$AUTOFLUSH&lt;/code&gt; で&lt;a href=&quot;english&quot;&gt;、英語&lt;/a&gt;）、またはお電話 &lt;code&gt;autoflush&lt;/code&gt; の方法&lt;a href=&quot;IO::Handle#METHODS&quot;&gt; &lt;code&gt;IO::Handle&lt;/code&gt; &lt;/a&gt;失われた出力を避けるために、すべての開いているハンドル上を。</target>
        </trans-unit>
        <trans-unit id="003b4d9ba004fb0af8689ed0414255d30b89d115" translate="yes" xml:space="preserve">
          <source>Perl attempts to flush all files opened for output before the exec, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles to avoid lost output.</source>
          <target state="translated">Perlはexecの前に出力用に開かれているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （英語の$ AUTOFLUSH）または、出力が失われないように、開いている &lt;code&gt;IO::Handle&lt;/code&gt; でIO :: Handleの &lt;code&gt;autoflush()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7d4f20a9384f8bc5428825b882bff482c1a8070c" translate="yes" xml:space="preserve">
          <source>Perl automatically calls the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method when processing a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement for a module. Modules and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; are documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;. Understanding the concept of modules and how the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement operates is important to understanding the Exporter.</source>
          <target state="translated">Perl は、モジュールの &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ステートメントを処理するときに、 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; メソッドを自動的に呼び出します。モジュールと &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;と&lt;a href=&quot;perlmod&quot;&gt;perlmodに&lt;/a&gt;文書化されています。モジュールの概念と &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ステートメントの動作を理解することは、エクスポーターを理解する上で重要です。</target>
        </trans-unit>
        <trans-unit id="6a95697cdde6d23d6eaf67c474daab5e6a483bb6" translate="yes" xml:space="preserve">
          <source>Perl automatically calls the &lt;code&gt;import&lt;/code&gt; method when processing a &lt;code&gt;use&lt;/code&gt; statement for a module. Modules and &lt;code&gt;use&lt;/code&gt; are documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;. Understanding the concept of modules and how the &lt;code&gt;use&lt;/code&gt; statement operates is important to understanding the Exporter.</source>
          <target state="translated">Perlは、モジュールの &lt;code&gt;use&lt;/code&gt; ステートメントを処理するときに、 &lt;code&gt;import&lt;/code&gt; メソッドを自動的に呼び出します。モジュールと &lt;code&gt;use&lt;/code&gt; は、&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;と&lt;a href=&quot;perlmod&quot;&gt;perlmodに記載されてい&lt;/a&gt;ます。モジュールの概念と &lt;code&gt;use&lt;/code&gt; ステートメントの動作を理解することは、エクスポーターを理解するために重要です。</target>
        </trans-unit>
        <trans-unit id="f61b6a6317cfa23498f15dd9d06745532cf81070" translate="yes" xml:space="preserve">
          <source>Perl automatically enables a set of special security checks, called</source>
          <target state="translated">Perl は自動的に、特別なセキュリティチェックのセットを有効にします。</target>
        </trans-unit>
        <trans-unit id="fbe832a4f97c9466dde588ba9b2da8adad2850de" translate="yes" xml:space="preserve">
          <source>Perl automatically handles most of the common ways a method might be redefined. However, there are a few ways you could change a method in a stash without the cache code noticing, in which case you need to call this method afterwards:</source>
          <target state="translated">Perl は、メソッドが再定義される可能性のある一般的な方法のほとんどを自動的に処理します。しかし、キャッシュコードに気づかれずにスタッシュ内のメソッドを変更する方法がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="c56019acc23d2639adf6a34824d254308e6f1860" translate="yes" xml:space="preserve">
          <source>Perl automatically loads &lt;code&gt;Errno&lt;/code&gt; the first time you use &lt;code&gt;%!&lt;/code&gt;, so you don't need an explicit &lt;code&gt;use&lt;/code&gt;.</source>
          <target state="translated">Perlは、 &lt;code&gt;%!&lt;/code&gt; 初めて使用するときに &lt;code&gt;Errno&lt;/code&gt; を自動的にロードします。、したがって、明示的に &lt;code&gt;use&lt;/code&gt; 必要はありません。</target>
        </trans-unit>
        <trans-unit id="036d8f87f677f8c5718f1d28012fa559462c3777" translate="yes" xml:space="preserve">
          <source>Perl automatically provides large file support when built under 64-bit Windows.</source>
          <target state="translated">64ビットWindowsで構築された場合、Perlは自動的にラージファイルをサポートします。</target>
        </trans-unit>
        <trans-unit id="7a716c995ea81037d2661a333de648b734bf1c68" translate="yes" xml:space="preserve">
          <source>Perl believes that no machine ever has more than one of &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; , or &lt;code&gt;quota&lt;/code&gt; implemented, nor more than one of either &lt;code&gt;comment&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; . Some machines do not support &lt;code&gt;expire&lt;/code&gt; , &lt;code&gt;gecos&lt;/code&gt; , or allegedly, &lt;code&gt;passwd&lt;/code&gt; . You may call these methods no matter what machine you're on, but they return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if unimplemented.</source>
          <target state="translated">Perlは、 &lt;code&gt;change&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; 、 &lt;code&gt;quota&lt;/code&gt; のいずれか、または &lt;code&gt;comment&lt;/code&gt; と &lt;code&gt;class&lt;/code&gt; のいずれか1つしか実装されていないマシンはないと信じています。一部のマシンではサポートされていない &lt;code&gt;expire&lt;/code&gt; 、 &lt;code&gt;gecos&lt;/code&gt; 、または伝えられるところで、 &lt;code&gt;passwd&lt;/code&gt; の。使用しているマシンに関係なくこれらのメソッドを呼び出すことができますが、実装されていない場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9fd89618c3b47a0e722e09957c69ce215a51cf2c" translate="yes" xml:space="preserve">
          <source>Perl believes that no machine ever has more than one of &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, or &lt;code&gt;quota&lt;/code&gt; implemented, nor more than one of either &lt;code&gt;comment&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;. Some machines do not support &lt;code&gt;expire&lt;/code&gt;, &lt;code&gt;gecos&lt;/code&gt;, or allegedly, &lt;code&gt;passwd&lt;/code&gt;. You may call these methods no matter what machine you're on, but they return &lt;code&gt;undef&lt;/code&gt; if unimplemented.</source>
          <target state="translated">Perlは何のマシンは、これまでの複数の持っていないと考えている &lt;code&gt;change&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; 、または &lt;code&gt;quota&lt;/code&gt; 実装、またいずれかの複数の &lt;code&gt;comment&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; 。一部のマシンではサポートされていない &lt;code&gt;expire&lt;/code&gt; 、 &lt;code&gt;gecos&lt;/code&gt; 、または伝えられるところで、 &lt;code&gt;passwd&lt;/code&gt; の。使用しているマシンに関係なくこれらのメソッドを呼び出すことができますが、実装されていない場合は &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5d0360d06e2a1778dd48425c09025dbdf8293f8e" translate="yes" xml:space="preserve">
          <source>Perl binary able to run this extension, load XS modules, etc...</source>
          <target state="translated">この拡張機能を実行したり、XS モジュールをロードしたりすることができる Perl バイナリ。</target>
        </trans-unit>
        <trans-unit id="cb8da21c98e2920d923d329d6f68942a153a615f" translate="yes" xml:space="preserve">
          <source>Perl binary distributions come with a</source>
          <target state="translated">Perlのバイナリディストリビューションには</target>
        </trans-unit>
        <trans-unit id="25b8cd5db95b73c8697ce2a24fc9a3c4624497ef" translate="yes" xml:space="preserve">
          <source>Perl binary for tasks that can be done by miniperl.</source>
          <target state="translated">miniperlでできるタスクのためのPerlバイナリ。</target>
        </trans-unit>
        <trans-unit id="5c60e05f40789a6f58044b7f99b3ed4077f167aa" translate="yes" xml:space="preserve">
          <source>Perl binary for tasks that can be done by miniperl. If it contains spaces or other shell metacharacters, it needs to be quoted in a way that protects them, since this value is intended to be inserted in a shell command line in the Makefile. E.g.:</source>
          <target state="translated">miniperl で実行できるタスクのための Perl バイナリ。この値は Makefile のシェルコマンドラインに挿入されることを意図しているので、スペースや他のシェルのメタキャラクタが含まれている場合は、それらを保護する方法で引用符で囲んでおく必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b72df5c4242785794c622b22864eb9d8a2e74001" translate="yes" xml:space="preserve">
          <source>Perl builds and runs on a bewildering number of platforms. Virtually all known and current Unix derivatives are supported (perl's native platform), as are other systems like VMS, DOS, OS/2, Windows, QNX, BeOS, OS X, MPE/iX and the Amiga.</source>
          <target state="translated">Perl は、驚くほど多くのプラットフォーム上でビルドして動作します。VMS、DOS、OS/2、Windows、QNX、BeOS、OS X、MPE/iX、Amigaのような他のシステムと同様に、事実上すべての既知の、そして現在のUnix誘導体(Perlのネイティブプラットフォーム)がサポートされています。</target>
        </trans-unit>
        <trans-unit id="20d139451b19c9903cb470dbddc56287a00a07ca" translate="yes" xml:space="preserve">
          <source>Perl by default comes with the latest supported Unicode version built-in, but the goal is to allow you to change to use any earlier one. In Perls v5.20 and v5.22, however, the earliest usable version is Unicode 5.1. Perl v5.18 and v5.24 are able to handle all earlier versions.</source>
          <target state="translated">Perl のデフォルトでは、サポートされている最新の Unicode バージョンがビルトインされていますが、それ以前のバージョンのものを使用できるように変更できるようにするのが目的です。しかし、Perls v5.20 と v5.22 では、最も古いバージョンである Unicode 5.1 が使用可能です。Perl v5.18 と v5.24 では、それ以前のバージョンをすべて扱うことができます。</target>
        </trans-unit>
        <trans-unit id="96b360f2cb263510b9740f1a358943c2a62edfbc" translate="yes" xml:space="preserve">
          <source>Perl by default comes with the latest supported Unicode version built-in, but the goal is to allow you to change to use any earlier one. In Perls v5.20 and v5.22, however, the earliest usable version is Unicode 5.1. Perl v5.18 is able to handle all earlier versions.</source>
          <target state="translated">Perl のデフォルトでは、サポートされている最新の Unicode バージョンがビルトインされていますが、それ以前のバージョンのものを使用できるように変更できるようにするのが目的です。しかし、Perls v5.20 と v5.22 では、最も古いバージョンである Unicode 5.1 が使用可能です。Perl v5.18 では、それ以前のバージョンをすべて扱うことができます。</target>
        </trans-unit>
        <trans-unit id="858924b099068580d5d02f65c2520871f9621191" translate="yes" xml:space="preserve">
          <source>Perl by default is very forgiving. In order to make it more robust it is recommended to start every program with the following lines:</source>
          <target state="translated">Perl はデフォルトでは非常に寛容です。より堅牢にするために、すべてのプログラムを以下の行で起動することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="41943c9223a2849d683a6cec44cbaf36e58b907e" translate="yes" xml:space="preserve">
          <source>Perl can be built so that it by default will try to execute</source>
          <target state="translated">Perlは、デフォルトでは</target>
        </trans-unit>
        <trans-unit id="36ba407dbee2d6e43709ef0153d960c56996ecc9" translate="yes" xml:space="preserve">
          <source>Perl can be compiled on platforms that run any of three commonly used EBCDIC character sets, listed below.</source>
          <target state="translated">Perl は、以下の 3 つの一般的に使用されている EBCDIC 文字セットのいずれかを実行するプラットフォーム上でコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="bea19b77ce1281f9b9bf9a47baf0d79604e6dd7a" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with either HP's ANSI C compiler or with gcc. The former is recommended, as not only can it compile Perl with no difficulty, but also can take advantage of features listed later that require the use of HP compiler-specific command-line flags.</source>
          <target state="translated">Perl は HP の ANSI C コンパイラか gcc でコンパイルできます。前者をお勧めします。Perl を問題なくコンパイルできるだけでなく、HP コンパイラ固有のコマンドラインフラグの使用を必要とする後述の機能を利用することができます。</target>
        </trans-unit>
        <trans-unit id="f05f1e5361560b59743e9bd4f32b54cc023f431f" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with either IBM's ANSI C compiler or with gcc. The former is recommended, as not only can it compile Perl with no difficulty, but also can take advantage of features listed later that require the use of IBM compiler-specific command-line flags.</source>
          <target state="translated">Perl は IBM の ANSI C コンパイラか gcc でコンパイルできます。前者をお勧めします。Perl を問題なくコンパイルできるだけでなく、IBM コンパイラ固有のコマンドラインフラグの使用を必要とする後述の機能を利用することができます。</target>
        </trans-unit>
        <trans-unit id="19a69f0e2f064ea4c82b3309e77eb45ccd797a4c" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with either IBM's ANSI C compiler or with gcc. The former is recommended, as not only it can compile Perl with no difficulty, but also can take advantage of features listed later that require the use of IBM compiler-specific command-line flags.</source>
          <target state="translated">PerlはIBMのANSI Cコンパイラかgccでコンパイルすることができます。前者をお勧めします。Perl を難なくコンパイルできるだけでなく、IBM コンパイラ固有のコマンドラインフラグの使用を必要とする後述の機能を利用できるからです。</target>
        </trans-unit>
        <trans-unit id="1eec7cebb78e4a4eae8424666c3dade6b3981bcc" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with gcc from MinGW (version 3.4.5 or later) or from MinGW64 (version 4.4.3 or later). It can be downloaded here:</source>
          <target state="translated">PerlはMinGW(バージョン3.4.5以降)のgcc、またはMinGW64(バージョン4.4.3以降)のgccでコンパイルできます。こちらからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="751c036d6e62fec07bc2f5f4e73156154792a0fd" translate="yes" xml:space="preserve">
          <source>Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.4.5 and later). It can be downloaded here:</source>
          <target state="translated">PerlはMinGWリリース3以降のgccでコンパイルできます(gcc 3.4.5以降を使用)。こちらからダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="5aad21700ba14174a334f6c9d33b139e2bf40c72" translate="yes" xml:space="preserve">
          <source>Perl can be cross-compiled using either adb or a normal ssh connection; in general, if you can connect your device to the host using a USB port, or if you don't feel like installing an sshd app on your device, you may want to use adb, although you may be forced to switch to ssh if your device is not rooted and you're unlucky -- more on that later. Alternatively, if you're cross-compiling to an emulator, you'll have to use adb.</source>
          <target state="translated">一般的には、USB ポートを使ってデバイスをホストに接続できる場合や、デバイスに sshd アプリをインストールする気がない場合は、 adb を使うのが良いでしょう。あるいは、エミュレータにクロスコンパイルする場合は adb を使う必要があります。</target>
        </trans-unit>
        <trans-unit id="298c207dde281e03961c0f741436a83e917ef6d5" translate="yes" xml:space="preserve">
          <source>Perl can be run under the &quot;C&quot; locale by setting the environment variable &lt;code&gt;LC_ALL&lt;/code&gt; to &quot;C&quot;. This method is perhaps a bit more civilized than the &lt;code&gt;PERL_BADLANG&lt;/code&gt; approach, but setting &lt;code&gt;LC_ALL&lt;/code&gt; (or other locale variables) may affect other programs as well, not just Perl. In particular, external programs run from within Perl will see these changes. If you make the new settings permanent (read on), all programs you run see the changes. See &lt;a href=&quot;#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot;&lt;/a&gt; for the full list of relevant environment variables and &lt;a href=&quot;#USING-LOCALES&quot;&gt;&quot;USING LOCALES&quot;&lt;/a&gt; for their effects in Perl. Effects in other programs are easily deducible. For example, the variable &lt;code&gt;LC_COLLATE&lt;/code&gt; may well affect your &lt;b&gt;sort&lt;/b&gt; program (or whatever the program that arranges &quot;records&quot; alphabetically in your system is called).</source>
          <target state="translated">Perlは、環境変数 &lt;code&gt;LC_ALL&lt;/code&gt; を「C」に設定することにより、「C」ロケールで実行できます。この方法はおそらく &lt;code&gt;PERL_BADLANG&lt;/code&gt; アプローチよりも少し文明的ですが、 &lt;code&gt;LC_ALL&lt;/code&gt; （または他のロケール変数）を設定すると、Perlだけでなく他のプログラムにも影響を与える可能性があります。特に、Perl内から実行される外部プログラムはこれらの変更を認識します。新しい設定を永続的にする（読み続ける）と、実行するすべてのプログラムに変更が表示されます。関連する環境変数の完全なリストについては&lt;a href=&quot;#ENVIRONMENT&quot;&gt;「ENVIRONMENT」&lt;/a&gt;を、Perlでのそれらの効果については&lt;a href=&quot;#USING-LOCALES&quot;&gt;「USINGLOCALES」&lt;/a&gt;を参照してください。他のプログラムの効果は簡単に推測できます。たとえば、変数 &lt;code&gt;LC_COLLATE&lt;/code&gt; は&lt;b&gt;ソートに&lt;/b&gt;影響を与える可能性があります&lt;b&gt;&lt;/b&gt; プログラム（またはシステム内で「レコード」をアルファベット順に並べるプログラムと呼ばれるもの）。</target>
        </trans-unit>
        <trans-unit id="2e57623077581e01731874e47fb8c2a4b90f970b" translate="yes" xml:space="preserve">
          <source>Perl can be run under the &quot;C&quot; locale by setting the environment variable &lt;code&gt;LC_ALL&lt;/code&gt; to &quot;C&quot;. This method is perhaps a bit more civilized than the &lt;code&gt;PERL_BADLANG&lt;/code&gt; approach, but setting &lt;code&gt;LC_ALL&lt;/code&gt; (or other locale variables) may affect other programs as well, not just Perl. In particular, external programs run from within Perl will see these changes. If you make the new settings permanent (read on), all programs you run see the changes. See &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; for the full list of relevant environment variables and &lt;a href=&quot;#USING-LOCALES&quot;&gt;USING LOCALES&lt;/a&gt; for their effects in Perl. Effects in other programs are easily deducible. For example, the variable &lt;code&gt;LC_COLLATE&lt;/code&gt; may well affect your &lt;b&gt;sort&lt;/b&gt; program (or whatever the program that arranges &quot;records&quot; alphabetically in your system is called).</source>
          <target state="translated">Perlは、環境変数 &lt;code&gt;LC_ALL&lt;/code&gt; を「C」に設定することにより、「C」ロケールで実行できます。この方法は、おそらく &lt;code&gt;PERL_BADLANG&lt;/code&gt; アプローチより少し文明的ですが、 &lt;code&gt;LC_ALL&lt;/code&gt; （または他のロケール変数）の設定は、Perlだけでなく他のプログラムにも影響を与える可能性があります。特に、Perl内から実行される外部プログラムはこれらの変更を認識します。新しい設定を永続的なものにすると（読み取り）、実行するすべてのプログラムに変更が反映されます。関連する環境変数の完全なリストについては&lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt;を、Perlでの効果については&lt;a href=&quot;#USING-LOCALES&quot;&gt;USING LOCALES&lt;/a&gt;を参照してください。他のプログラムの効果は簡単に推定できます。たとえば、変数 &lt;code&gt;LC_COLLATE&lt;/code&gt; は&lt;b&gt;ソートに&lt;/b&gt;影響を与える可能性があります&lt;b&gt;&lt;/b&gt; プログラム（またはシステムでアルファベット順に「レコード」を配置するプログラムが呼び出されます）。</target>
        </trans-unit>
        <trans-unit id="afea4028a165b75f73beb84894121ff0308d01df" translate="yes" xml:space="preserve">
          <source>Perl can be used for almost any coding problem, even ones which require integrating specialist C code for extra speed. As with any tool it can be used well or badly. Perl has many strengths, and a few weaknesses, precisely which areas are good and bad is often a personal choice.</source>
          <target state="translated">Perl は、ほとんどすべてのコーディング問題に使用することができますが、さらにスピードを上げるために専門家の C コードを統合する必要があるものでさえも使用できます。どんなツールでもそうですが、良くも悪くも使えます。Perlには多くの長所と短所がありますが、どの部分が良くてどの部分が悪いのかは個人の選択になります。</target>
        </trans-unit>
        <trans-unit id="9f84aec4fa7ef06751c778c8e8173ffe00dcd629" translate="yes" xml:space="preserve">
          <source>Perl can compile and run under EBCDIC platforms. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;. This is transparent for the most part, but because the character sets differ, you shouldn't use numeric (decimal, octal, nor hex) constants to refer to characters. You can safely say &lt;code&gt;'A'&lt;/code&gt; , but not &lt;code&gt;0x41&lt;/code&gt; . You can safely say &lt;code&gt;'\n'&lt;/code&gt; , but not &lt;code&gt;\012&lt;/code&gt; . However, you can use macros defined in</source>
          <target state="translated">Perlは、EBCDICプラットフォームでコンパイルおよび実行できます。&lt;a href=&quot;perlebcdic&quot;&gt;perlebcdicを&lt;/a&gt;参照してください。これは大部分は透過的ですが、文字セットが異なるため、文字を参照するために数値（10進数、8進数、16進数）定数を使用しないでください。安全に &lt;code&gt;'A'&lt;/code&gt; と言うことはできますが、 &lt;code&gt;0x41&lt;/code&gt; はできません。安全に &lt;code&gt;'\n'&lt;/code&gt; と言うことはできますが、 &lt;code&gt;\012&lt;/code&gt; と言うことはできません。ただし、で定義されたマクロを使用できます。</target>
        </trans-unit>
        <trans-unit id="89da686bd0b150df7259283a72feb17be88ef847" translate="yes" xml:space="preserve">
          <source>Perl can compile and run under EBCDIC platforms. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;. This is transparent for the most part, but because the character sets differ, you shouldn't use numeric (decimal, octal, nor hex) constants to refer to characters. You can safely say &lt;code&gt;'A'&lt;/code&gt;, but not &lt;code&gt;0x41&lt;/code&gt;. You can safely say &lt;code&gt;'\n'&lt;/code&gt;, but not &lt;code&gt;\012&lt;/code&gt;. However, you can use macros defined in</source>
          <target state="translated">Perlは、EBCDICプラットフォームでコンパイルおよび実行できます。&lt;a href=&quot;perlebcdic&quot;&gt;perlebcdicを&lt;/a&gt;参照してください。これはほとんどの部分で透過的ですが、文字セットが異なるため、文字を参照するために数値（10進数、8進数、または16進数）定数を使用しないでください。 &lt;code&gt;'A'&lt;/code&gt; と安全に言うことはできますが、 &lt;code&gt;0x41&lt;/code&gt; とは言えません。 &lt;code&gt;'\n'&lt;/code&gt; と言っても安全ですが、 &lt;code&gt;\012&lt;/code&gt; は言えません。ただし、で定義されたマクロを使用できます</target>
        </trans-unit>
        <trans-unit id="fa07386a80b47ab8df8b6dbe1e6a41311efb8910" translate="yes" xml:space="preserve">
          <source>Perl can internally represent numbers in 3 different ways: as native integers, as native floating point numbers, and as decimal strings. Decimal strings may have an exponential notation part, as in &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt; .</source>
          <target state="translated">Perlは、3つの異なる方法で数値を内部的に表現できます。ネイティブ整数として、ネイティブ浮動小数点数として、および10進文字列として。 &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt; のように、10進文字列には指数表記の部分が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="91d8093cdc26010bc75cbe7ac13c80dda1139d5f" translate="yes" xml:space="preserve">
          <source>Perl can internally represent numbers in 3 different ways: as native integers, as native floating point numbers, and as decimal strings. Decimal strings may have an exponential notation part, as in &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt;.</source>
          <target state="translated">Perlは、ネイティブ整数、ネイティブ浮動小数点数、および10進文字列の3つの異なる方法で数値を内部的に表すことができます。10進文字列には、 &lt;code&gt;&quot;12.34e-56&quot;&lt;/code&gt; ように指数表記部分が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="05cb1fb37d34785f635f75844d77033b80fc24ef" translate="yes" xml:space="preserve">
          <source>Perl can process line directives, much like the C preprocessor. Using this, one can control Perl's idea of filenames and line numbers in error or warning messages (especially for strings that are processed with &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;). The syntax for this mechanism is almost the same as for most C preprocessors: it matches the regular expression</source>
          <target state="translated">Perlは、Cプリプロセッサと同様に、行ディレクティブを処理できます。これを使用して、エラーメッセージまたは警告メッセージ（特に &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; で処理される文字列）のファイル名と行番号に関するPerlの考え方を制御できます。このメカニズムの構文は、ほとんどのCプリプロセッサとほぼ同じです。正規表現に一致します。</target>
        </trans-unit>
        <trans-unit id="5dbe3afd1eb59bb8a6efe4b4b5b6385c4ed178c9" translate="yes" xml:space="preserve">
          <source>Perl can process line directives, much like the C preprocessor. Using this, one can control Perl's idea of filenames and line numbers in error or warning messages (especially for strings that are processed with &lt;code&gt;eval()&lt;/code&gt;). The syntax for this mechanism is almost the same as for most C preprocessors: it matches the regular expression</source>
          <target state="translated">Perlは、Cプリプロセッサと同じように行ディレクティブを処理できます。これを使用すると、エラーメッセージまたは警告メッセージ（特に &lt;code&gt;eval()&lt;/code&gt; で処理される文字列の場合）のファイル名と行番号に関するPerlの考え方を制御できます。このメカニズムの構文は、ほとんどのCプリプロセッサの構文とほぼ同じです。正規表現と一致します。</target>
        </trans-unit>
        <trans-unit id="0c1175d291fc9d1138f03be93ce22b47fc929ba6" translate="yes" xml:space="preserve">
          <source>Perl can provide access to all non-provisional Unicode character properties, though not all are enabled by default. The omitted ones are the Unihan properties (accessible via the CPAN module &lt;a href=&quot;Unicode::Unihan&quot;&gt;Unicode::Unihan&lt;/a&gt;) and certain deprecated or Unicode-internal properties. (An installation may choose to recompile Perl's tables to change this. See &lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;&quot;Unicode character properties that are NOT accepted by Perl&quot;&lt;/a&gt;.)</source>
          <target state="translated">Perlは、すべての非暫定Unicode文字プロパティへのアクセスを提供できますが、すべてがデフォルトで有効になっているわけではありません。省略されているのは、Unihanプロパティ（CPANモジュール&lt;a href=&quot;Unicode::Unihan&quot;&gt;Unicode :: Unihan&lt;/a&gt;を介してアクセス可能）および特定の非推奨またはUnicode内部のプロパティです。（インストールでは、これを変更するためにPerlのテーブルを再コンパイルすることを選択する場合があります。&lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;「Perlで受け入れられないUnicode文字プロパティ」を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="87b4bc522cc9bacefe7588c2849722683c7ccc0c" translate="yes" xml:space="preserve">
          <source>Perl can provide access to all non-provisional Unicode character properties, though not all are enabled by default. The omitted ones are the Unihan properties (accessible via the CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Unihan&quot;&gt;Unicode::Unihan&lt;/a&gt;) and certain deprecated or Unicode-internal properties. (An installation may choose to recompile Perl's tables to change this. See &lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;Unicode character properties that are NOT accepted by Perl&lt;/a&gt;.)</source>
          <target state="translated">Perlは、すべての非暫定Unicode文字プロパティへのアクセスを提供できますが、すべてがデフォルトで有効になっているわけではありません。省略されたものは、Unihanプロパティ（CPANモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Unihan&quot;&gt;Unicode :: Unihan&lt;/a&gt;を介してアクセス可能）および特定の非推奨またはUnicode内部プロパティです。（インストール済み環境では、これを変更するためにPerlのテーブルを再コンパイルすることを選択する場合があります&lt;a href=&quot;#Unicode-character-properties-that-are-NOT-accepted-by-Perl&quot;&gt;。Perlで受け入れられないUnicode文字プロパティを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="b9d3bae2bf6cbe36ec81823e26589a3e2497f6c1" translate="yes" xml:space="preserve">
          <source>Perl cannot be compiled with threading support ATM.</source>
          <target state="translated">Perl はスレッディングをサポートした ATM でコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="5aa9ff89c6dfca6cc410567a511ce06ca99ab635" translate="yes" xml:space="preserve">
          <source>Perl cannot protect you from all possibilities shown in the examples--there is no substitute for your own vigilance--but, when &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect, Perl uses the tainting mechanism (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;) to mark string results that become locale-dependent, and which may be untrustworthy in consequence. Here is a summary of the tainting behavior of operators and functions that may be affected by the locale:</source>
          <target state="translated">Perlは、例に示されているすべての可能性からユーザーを保護することはできません-独自の警戒に代わるものはありません-しかし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;が有効な場合、Perlは汚染メカニズム（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）を使用して、ロケールに依存する文字列結果をマークします、および結果として信頼できない可能性があります。次に、ロケールの影響を受ける可能性のある演算子と関数の汚染動作の概要を示します。</target>
        </trans-unit>
        <trans-unit id="a594f813141415e6aca23ee60e047f5b3f5ab72f" translate="yes" xml:space="preserve">
          <source>Perl cannot protect you from all possibilities shown in the examples--there is no substitute for your own vigilance--but, when &lt;code&gt;use locale&lt;/code&gt; is in effect, Perl uses the tainting mechanism (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;) to mark string results that become locale-dependent, and which may be untrustworthy in consequence. Here is a summary of the tainting behavior of operators and functions that may be affected by the locale:</source>
          <target state="translated">Perlは、例に示されているすべての可能性からユーザーを保護することはできません（独自の警戒に代わるものはありません）が、 &lt;code&gt;use locale&lt;/code&gt; が有効な場合、Perlは汚染メカニズム（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）を使用して、ロケールに依存する文字列結果をマークします、結果として信頼できない可能性があります。ロケールの影響を受ける可能性のある演算子と関数の汚染動作の概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d5f3aa702381872bb34697babcd6d91dd23feeed" translate="yes" xml:space="preserve">
          <source>Perl code is always compiled into an internal format before execution.</source>
          <target state="translated">Perlのコードは常に実行前に内部フォーマットにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="cbb579bb2906840ac41b443c221a57b4ff511c5a" translate="yes" xml:space="preserve">
          <source>Perl code should convert to either call &lt;a href=&quot;perlapi#Perl_setlocale&quot;&gt;&lt;code&gt;Perl_setlocale&lt;/code&gt;&lt;/a&gt; (which is a drop-in for the system &lt;code&gt;setlocale&lt;/code&gt;) or use the methods given in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; to call &lt;a href=&quot;posix#setlocale&quot;&gt;&lt;code&gt;POSIX::setlocale&lt;/code&gt;&lt;/a&gt;. Either one will transparently properly handle all cases of single- vs multi-thread, POSIX 2008-supported or not.</source>
          <target state="translated">Perlコードは、&lt;a href=&quot;perlapi#Perl_setlocale&quot;&gt; &lt;code&gt;Perl_setlocale&lt;/code&gt; &lt;/a&gt;（システム &lt;code&gt;setlocale&lt;/code&gt; のドロップイン）を呼び出すか、&lt;a href=&quot;perlcall&quot;&gt;perlcallで&lt;/a&gt;指定されたメソッドを使用して&lt;a href=&quot;posix#setlocale&quot;&gt; &lt;code&gt;POSIX::setlocale&lt;/code&gt; &lt;/a&gt;を呼び出すように変換する必要があります。どちらも、POSIX 2008でサポートされているかどうかに関係なく、シングルスレッドとマルチスレッドのすべてのケースを透過的に適切に処理します。</target>
        </trans-unit>
        <trans-unit id="c5cce9b9678a00b1fe024a9af1e795642a5bcb9c" translate="yes" xml:space="preserve">
          <source>Perl comes with a wide selection of builtin functions. Some of the ones we've already seen include &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;. A list of them is given at the start of &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and you can easily read about any given function by using &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt;.</source>
          <target state="translated">Perlには、幅広い組み込み関数が用意されています。私たちがすでに見たもののいくつかは、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; 含まれています。それらのリストは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;の冒頭に記載されており、 &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt; を使用すると、特定の関数について簡単に読むことができます。</target>
        </trans-unit>
        <trans-unit id="79ae445a5a6eedaef6fa6773c44a0f926e1cd176" translate="yes" xml:space="preserve">
          <source>Perl comes with a wide selection of builtin functions. Some of the ones we've already seen include &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;reverse&lt;/code&gt;. A list of them is given at the start of &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and you can easily read about any given function by using &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt;.</source>
          <target state="translated">Perlには、さまざまな組み込み関数が付属しています。私たちがすでに見たもののいくつかには、 &lt;code&gt;print&lt;/code&gt; 、 &lt;code&gt;sort&lt;/code&gt; 、 &lt;code&gt;reverse&lt;/code&gt; が含まれます。それらのリストは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;の先頭にあり、 &lt;code&gt;perldoc -f &lt;i&gt;functionname&lt;/i&gt;&lt;/code&gt; を使用すると、特定の関数について簡単に読むことができます。</target>
        </trans-unit>
        <trans-unit id="d575f0416db18e1fc564b29cf8cc390222ecf415" translate="yes" xml:space="preserve">
          <source>Perl comes with an interactive debugger, which you can start with the &lt;code&gt;-d&lt;/code&gt; switch. It's fully explained in &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;.</source>
          <target state="translated">Perlには、 &lt;code&gt;-d&lt;/code&gt; スイッチで開始できる対話型デバッガが付属しています。&lt;a href=&quot;perldebug&quot;&gt;perldebugで&lt;/a&gt;完全に説明されています。</target>
        </trans-unit>
        <trans-unit id="641c8779114365eacf0b514d71b892f3c88f6444" translate="yes" xml:space="preserve">
          <source>Perl compiler backend to produce perl code</source>
          <target state="translated">Perl コードを生成するための Perl コンパイラバックエンド</target>
        </trans-unit>
        <trans-unit id="3d5234796bebd4a0240f58d33b5d22994612e499" translate="yes" xml:space="preserve">
          <source>Perl contains internal support for reporting its own memory usage, but this is a fairly advanced concept that requires some understanding of how memory allocation works. See &lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;&quot;Debugging Perl Memory Usage&quot; in perldebguts&lt;/a&gt; for the details.</source>
          <target state="translated">Perlには、独自のメモリ使用量を報告するための内部サポートが含まれていますが、これはかなり高度な概念であり、メモリ割り当てがどのように機能するかをある程度理解する必要があります。詳細について&lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;は、perldebgutsの「Perlメモリ使用量のデバッグ」を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="a425209baf3b199ee00ab768f1943ede83ed4ff4" translate="yes" xml:space="preserve">
          <source>Perl contains internal support for reporting its own memory usage, but this is a fairly advanced concept that requires some understanding of how memory allocation works. See &lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;Debugging Perl Memory Usage in perldebguts&lt;/a&gt; for the details.</source>
          <target state="translated">Perlには、独自のメモリ使用量を報告するための内部サポートが含まれていますが、これはかなり高度な概念であり、メモリ割り当ての仕組みをある程度理解する必要があります。詳細について&lt;a href=&quot;perldebguts#Debugging-Perl-Memory-Usage&quot;&gt;は、perldebguts&lt;/a&gt;でのPerlメモリ使用量のデバッグを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd31498cb274469b540952840b7aa19174e08b34" translate="yes" xml:space="preserve">
          <source>Perl continues to support the old non UTF-8 locales as well. There are currently no UTF-8 locales for EBCDIC platforms.</source>
          <target state="translated">Perl は古い非 UTF-8 ロケールも引き続きサポートしています。現在、EBCDIC プラットフォーム用の UTF-8 ロケールはありません。</target>
        </trans-unit>
        <trans-unit id="a29ee67698d8ff496114e40d0f60aa708da987ff" translate="yes" xml:space="preserve">
          <source>Perl continues to warn (using the warning category &lt;code&gt;&quot;nonchar&quot;&lt;/code&gt; , which is a sub-category of &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; ) if an attempt is made to output noncharacters.</source>
          <target state="translated">&lt;code&gt;&quot;nonchar&quot;&lt;/code&gt; を出力しようとすると、Perlは警告を出し続けます（警告カテゴリ&quot;nonchar&quot;を使用します。これは &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; のサブカテゴリです）。</target>
        </trans-unit>
        <trans-unit id="9cb01f485dfc78123b0a04671230b175342a0686" translate="yes" xml:space="preserve">
          <source>Perl continues to warn (using the warning category &lt;code&gt;&quot;nonchar&quot;&lt;/code&gt;, which is a sub-category of &lt;code&gt;&quot;utf8&quot;&lt;/code&gt;) if an attempt is made to output noncharacters.</source>
          <target state="translated">&lt;code&gt;&quot;nonchar&quot;&lt;/code&gt; を出力しようとすると、Perlは警告を続けます（ &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; サブカテゴリである警告カテゴリ「nonchar」を使用）。</target>
        </trans-unit>
        <trans-unit id="f9d488e88c0eb0084402cd1c0721ceebc56fc521" translate="yes" xml:space="preserve">
          <source>Perl core development team.</source>
          <target state="translated">Perlコア開発チーム。</target>
        </trans-unit>
        <trans-unit id="baa05b026a869001e1e5be6e67df2e5d03445c53" translate="yes" xml:space="preserve">
          <source>Perl currently only supports single-byte locales for &lt;code&gt;LC_COLLATE&lt;/code&gt; . This means that a UTF-8 locale likely will just give you machine-native ordering. Use &lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt; for the full implementation of the Unicode Collation Algorithm.</source>
          <target state="translated">Perlは現在、 &lt;code&gt;LC_COLLATE&lt;/code&gt; のシングルバイトロケールのみをサポートしています。これは、UTF-8ロケールがマシンネイティブの順序を与えるだけであることを意味します。Unicode照合アルゴリズムの完全な実装には、&lt;a href=&quot;unicode/collate&quot;&gt;Unicode :: Collat​​e&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="77cf5a91724851c2026eb0ed52027faf2ff9d8f3" translate="yes" xml:space="preserve">
          <source>Perl debug information is frequently required not just by debuggers, but also by modules that need some &quot;special&quot; information to do their job properly, like profilers.</source>
          <target state="translated">Perl のデバッグ情報は、デバッガだけでなく、プロファイラのように、仕事を適切にこなすために「特別な」情報を必要とするモジュールにも頻繁に必要とされます。</target>
        </trans-unit>
        <trans-unit id="edcd0b1168988fe6213df824f5ad91c7a66c6c43" translate="yes" xml:space="preserve">
          <source>Perl defines the following zero-width assertions:</source>
          <target state="translated">Perl は以下のゼロ幅アサーションを定義しています。</target>
        </trans-unit>
        <trans-unit id="6b26390b798af49773d52f4620dbbc3aff54133e" translate="yes" xml:space="preserve">
          <source>Perl deliberately randomizes hash order for security purposes on both ASCII and EBCDIC platforms.</source>
          <target state="translated">Perlは、ASCIIとEBCDICの両方のプラットフォームで、セキュリティのためにハッシュの順序を意図的にランダムにしています。</target>
        </trans-unit>
        <trans-unit id="b360e4dc6087d3b16edb381fbc0c1f20ea026de5" translate="yes" xml:space="preserve">
          <source>Perl derives from the ubiquitous C programming language and to a lesser extent from sed, awk, the Unix shell, and many other tools and languages.</source>
          <target state="translated">Perl は、ユビキタスな C プログラミング言語から派生したもので、sed や awk、Unix シェル、その他多くのツールや言語からも派生しています。</target>
        </trans-unit>
        <trans-unit id="171910ec91b3b6b1e9deeb50ab9dfa78a36b3ec1" translate="yes" xml:space="preserve">
          <source>Perl does its own &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt; formatting: it emulates the C function &lt;a href=&quot;http://man.he.net/man3/sprintf&quot;&gt;sprintf(3)&lt;/a&gt;, but doesn't use it except for floating-point numbers, and even then only standard modifiers are allowed. Non-standard extensions in your local &lt;a href=&quot;http://man.he.net/man3/sprintf&quot;&gt;sprintf(3)&lt;/a&gt; are therefore unavailable from Perl.</source>
          <target state="translated">Perlは独自の&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;/a&gt;フォーマットを実行します。C関数&lt;a href=&quot;http://man.he.net/man3/sprintf&quot;&gt;sprintf（3）を&lt;/a&gt;エミュレートしますが、浮動小数点数以外は使用せず、それでも標準の修飾子のみが許可されます。したがって、ローカル&lt;a href=&quot;http://man.he.net/man3/sprintf&quot;&gt;sprintf（3）の&lt;/a&gt;非標準拡張機能は、Perlからは利用できません。</target>
        </trans-unit>
        <trans-unit id="82ed6e041cbd4aae6a032a9f05ea11dde0c68044" translate="yes" xml:space="preserve">
          <source>Perl does its own &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; formatting: it emulates the C function sprintf(3), but doesn't use it except for floating-point numbers, and even then only standard modifiers are allowed. Non-standard extensions in your local sprintf(3) are therefore unavailable from Perl.</source>
          <target state="translated">Perlは独自の &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; フォーマットを行います。これは、C関数sprintf（3）をエミュレートしますが、浮動小数点数以外は使用せず、標準の修飾子のみが許可されます。したがって、ローカルのsprintf（3）の非標準の拡張機能は、Perlから利用できません。</target>
        </trans-unit>
        <trans-unit id="9fd3bbafbe5f224f645e29f633eba572a0b47a6b" translate="yes" xml:space="preserve">
          <source>Perl does its own &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; formatting: it emulates the C function sprintf(3), but doesn't use it except for floating-point numbers, and even then only standard modifiers are allowed. Non-standard extensions in your local sprintf(3) are therefore unavailable from Perl.</source>
          <target state="translated">Perlは独自の &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; フォーマットを行います。これは、C関数sprintf（3）をエミュレートしますが、浮動小数点数以外は使用せず、標準の修飾子のみが許可されます。したがって、ローカルのsprintf（3）の非標準の拡張機能は、Perlから利用できません。</target>
        </trans-unit>
        <trans-unit id="a4d0575e168bcb93baf91092d083b3f45edc7784" translate="yes" xml:space="preserve">
          <source>Perl does not allow overloading of ranges, so you can neither safely use ranges with bigint endpoints, nor is the iterator variable a bigint.</source>
          <target state="translated">Perlは範囲のオーバーロードを許可していないので、bigintのエンドポイントを持つ範囲を安全に使用することはできませんし、イテレータ変数がbigintであることもありません。</target>
        </trans-unit>
        <trans-unit id="c115815d6de8f54c97b95bbf1feacf608d2cdd8a" translate="yes" xml:space="preserve">
          <source>Perl does not call the shell to expand wild cards when you pass &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; explicit parameter lists instead of strings with possible shell wildcards in them. Unfortunately, the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, and backtick functions provide no such alternate calling convention, so more subterfuge will be required.</source>
          <target state="translated">Perlは、シェルワイルドカードを含む可能性のある文字列ではなく、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; の明示的なパラメーターリストを渡すときに、ワイルドカードを展開するためにシェルを呼び出しません。残念ながら、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 、およびbacktick関数は、そのような代替の呼び出し規約を提供しないため、より多くの手間が必要になります。</target>
        </trans-unit>
        <trans-unit id="8b58eb8904f65d9a83df8472fec3b9959cc0c48d" translate="yes" xml:space="preserve">
          <source>Perl does not call the shell to expand wild cards when you pass &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; explicit parameter lists instead of strings with possible shell wildcards in them. Unfortunately, the &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;glob&lt;/code&gt;, and backtick functions provide no such alternate calling convention, so more subterfuge will be required.</source>
          <target state="translated">Perlはあなたが通過する際に、ワイルドカードの展開のためにシェルを呼び出していない &lt;code&gt;system&lt;/code&gt; と &lt;code&gt;exec&lt;/code&gt; の代わりに、それらに可能なシェルのワイルドカードと文字列の明示的なパラメータリストを。残念ながら、 &lt;code&gt;open&lt;/code&gt; 、 &lt;code&gt;glob&lt;/code&gt; 、およびbacktick関数は、そのような代替の呼び出し規約を提供しないため、より多くの巧妙さが必要になります。</target>
        </trans-unit>
        <trans-unit id="acf14eaf9fdbdb615c0b9a213270f3740bd4a2b7" translate="yes" xml:space="preserve">
          <source>Perl does not care about file systems, but the perl library contains many files with long names, so to install it intact one needs a file system which supports long file names.</source>
          <target state="translated">Perl はファイルシステムを気にしませんが、Perl ライブラリには長い名前のファイルが多く含まれているので、無傷でインストールするには長いファイル名をサポートするファイルシステムが必要です。</target>
        </trans-unit>
        <trans-unit id="5a30d3ce357d2bad0edd8f956d77f82fd680b527" translate="yes" xml:space="preserve">
          <source>Perl does not depend on the registry, but it can look up certain default values if you choose to put them there unless disabled at build time with USE_NO_REGISTRY. On Perl process start Perl checks if &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; and &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; exist. If the keys exists, they will be checked for remainder of the Perl process's run life for certain entries. Entries in &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; override entries in &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt;. One or more of the following entries (of type REG_SZ or REG_EXPAND_SZ) may be set in the keys:</source>
          <target state="translated">Perlはレジストリに依存しませんが、ビルド時にUSE_NO_REGISTRYで無効にしない限り、レジストリに配置することを選択した場合、特定のデフォルト値を検索できます。 Perlプロセスの開始時に、Perlは &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; および &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; が存在するかどうかを確認します。キーが存在する場合、特定のエントリのPerlプロセスの残りの実行期間についてチェックされます。エントリ &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; でオーバーライドエントリ &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; 。次のエントリ（タイプREG_SZまたはREG_EXPAND_SZ）の1つ以上をキーに設定できます。</target>
        </trans-unit>
        <trans-unit id="5354348a14ac18fad5dfd9ae6dc9f4e8955fd5e4" translate="yes" xml:space="preserve">
          <source>Perl does not depend on the registry, but it can look up certain default values if you choose to put them there. Perl attempts to read entries from &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; and &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; . Entries in the former override entries in the latter. One or more of the following entries (of type REG_SZ or REG_EXPAND_SZ) may be set:</source>
          <target state="translated">Perlはレジストリに依存しませんが、レジストリに置くことを選択した場合、特定のデフォルト値を検索できます。Perlは &lt;code&gt;HKEY_CURRENT_USER\Software\Perl&lt;/code&gt; および &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Perl&lt;/code&gt; からエントリを読み取ろうとします。前者のエントリは後者のエントリを上書きします。次のエントリ（REG_SZまたはREG_EXPAND_SZの種類）の1つ以上を設定できます。</target>
        </trans-unit>
        <trans-unit id="e6697dea8bad1c38bf0eecc9764ad8eaf5ace311" translate="yes" xml:space="preserve">
          <source>Perl does not enforce private and public parts of its modules as you may have been used to in other languages like C++, Ada, or Modula-17. Perl doesn't have an infatuation with enforced privacy. It would prefer that you stayed out of its living room because you weren't invited, not because it has a shotgun.</source>
          <target state="translated">Perl は、C++、Ada、Modula-17 のような他の言語に慣れているかもしれませんが、モジュールのプライベートとパブリックの部分を強制することはありません。Perl はプライバシーを強制することに熱中しているわけではありません。Perl は、あなたが招待されていないから居間に入らないで欲しいのであって、 ショットガンを持っているからではありません。</target>
        </trans-unit>
        <trans-unit id="7376046122227141976ff6a43223937f5fa71800" translate="yes" xml:space="preserve">
          <source>Perl does not expand &lt;code&gt;~&lt;/code&gt; in filenames, which is good, since some folks use it for their backup files:</source>
          <target state="translated">Perlは &lt;code&gt;~&lt;/code&gt; をファイル名に展開しません。これは、一部の人々がバックアップファイルに使用するためです。</target>
        </trans-unit>
        <trans-unit id="5b47de2bb8098559e3bf2dcabce87f213a6eb4f0" translate="yes" xml:space="preserve">
          <source>Perl does not have any built-in way to express roles. In the past, people just bit the bullet and used multiple inheritance. Nowadays, there are several good choices on CPAN for using roles.</source>
          <target state="translated">Perlにはロールを表現するビルトインの方法がありません。過去には、人々はただ弾け口を叩いて多重継承を使用していました。今日では、CPAN上でロールを使用するためのいくつかの良い選択肢があります。</target>
        </trans-unit>
        <trans-unit id="eea568e6b9c913375e5a754c242df8539876547c" translate="yes" xml:space="preserve">
          <source>Perl does not provide any special syntax for class definitions. A package is simply a namespace containing variables and subroutines. The only difference is that in a class, the subroutines may expect a reference to an object or the name of a class as the first argument. This is purely a matter of convention, so a class may contain both methods and subroutines which</source>
          <target state="translated">Perlはクラス定義のための特別な構文を提供していません。パッケージは単に変数とサブルーチンを含む名前空間です。唯一の違いは、クラスでは、サブルーチンの第一引数にオブジェクトへの参照やクラス名を期待することができるということです。これは純粋に慣習の問題なので、クラスはメソッドとサブルーチンの両方を含むことができます。</target>
        </trans-unit>
        <trans-unit id="c5c3b122d3c32f38c2b6df0053286a38a52964b9" translate="yes" xml:space="preserve">
          <source>Perl does not provide any special syntax for defining a method. A method is simply a regular subroutine, and is declared with &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt;. What makes a method special is that it expects to receive either an object or a class name as its first argument.</source>
          <target state="translated">Perlは、メソッドを定義するための特別な構文を提供していません。メソッドは単なる通常のサブルーチンであり、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; で宣言されます。メソッドの特別な点は、最初の引数としてオブジェクトまたはクラス名のいずれかを受け取ることを期待していることです。</target>
        </trans-unit>
        <trans-unit id="0947ef57e8f5b7f263717d72ae86b49dba67c724" translate="yes" xml:space="preserve">
          <source>Perl does not provide any special syntax for defining a method. A method is simply a regular subroutine, and is declared with &lt;code&gt;sub&lt;/code&gt;. What makes a method special is that it expects to receive either an object or a class name as its first argument.</source>
          <target state="translated">Perlは、メソッドを定義するための特別な構文を提供していません。メソッドは単なる通常のサブルーチンであり、 &lt;code&gt;sub&lt;/code&gt; で宣言されます。メソッドを特別なものにしているのは、最初の引数としてオブジェクトまたはクラス名のいずれかを受け取ることを期待していることです。</target>
        </trans-unit>
        <trans-unit id="66c91b8b39ed83c72047110950399f56a4745108" translate="yes" xml:space="preserve">
          <source>Perl doesn't match multiple characters in a bracketed character class unless the character that maps to them is explicitly mentioned, and it doesn't match them at all if the character class is inverted, which otherwise could be highly confusing. See &lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;&quot;Bracketed Character Classes&quot; in perlrecharclass&lt;/a&gt;, and &lt;a href=&quot;perlrecharclass#Negation&quot;&gt;&quot;Negation&quot; in perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">Perlは、それらにマップする文字が明示的に言及されていない限り、括弧で囲まれた文字クラス内の複数の文字と一致しません。また、文字クラスが反転されている場合、Perlはまったく一致しません。そうしないと、非常に混乱する可能性があります。参照してください&lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;perlrecharclassの「括弧の文字クラス」&lt;/a&gt;、および&lt;a href=&quot;perlrecharclass#Negation&quot;&gt;perlrecharclassで「否定します」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cedf75e55d51d5b15900a202031f864d4002fc15" translate="yes" xml:space="preserve">
          <source>Perl doesn't match multiple characters in a bracketed character class unless the character that maps to them is explicitly mentioned, and it doesn't match them at all if the character class is inverted, which otherwise could be highly confusing. See &lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;Bracketed Character Classes in perlrecharclass&lt;/a&gt;, and &lt;a href=&quot;perlrecharclass#Negation&quot;&gt;Negation in perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">Perlは、それらにマップする文字が明示的に言及されていない限り、大括弧で囲まれた文字クラスの複数の文字とは一致しません。&lt;a href=&quot;perlrecharclass#Bracketed-Character-Classes&quot;&gt;perlrecharclassの括弧付き文字クラス&lt;/a&gt;、および&lt;a href=&quot;perlrecharclass#Negation&quot;&gt;perlrecharclassの否定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="160ee861b96d9abcad026bc93515a6480468d14a" translate="yes" xml:space="preserve">
          <source>Perl doesn't officially have a no-op operator, but the bare constants &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are special-cased not to produce a warning in void context, so you can for example safely do</source>
          <target state="translated">Perlには正式にはno-op演算子はありませんが、裸の定数 &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;1&lt;/code&gt; はvoidコンテキストで警告を生成しないように特別なケースであるため、たとえば安全に行うことができます</target>
        </trans-unit>
        <trans-unit id="ee11bfd628d5bc290b395480aaa995c735fee62a" translate="yes" xml:space="preserve">
          <source>Perl doesn't understand &lt;code&gt;Inf&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; as numeric literals, but you can have them as strings, and Perl will convert them as needed: &quot;Inf&quot; + 1. (You can, however, import them from the POSIX extension; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; POSIX qw(Inf NaN);&lt;/code&gt; and then use them as literals.)</source>
          <target state="translated">Perlは &lt;code&gt;Inf&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; を数値リテラルとして理解しませんが、文字列として使用でき、Perlは必要に応じてそれらを変換します： &quot;Inf&quot; + 1（ただし、POSIX拡張からインポートできます &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; POSIX qw(Inf NaN);&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用できます&lt;/a&gt;（Inf NaN）;次にリテラルとして使用します。）</target>
        </trans-unit>
        <trans-unit id="ec5da9f5482b92ac03cf293065833b5b8af6f55e" translate="yes" xml:space="preserve">
          <source>Perl doesn't understand &lt;code&gt;Inf&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; as numeric literals, but you can have them as strings, and Perl will convert them as needed: &quot;Inf&quot; + 1. (You can, however, import them from the POSIX extension; &lt;code&gt;use POSIX qw(Inf NaN);&lt;/code&gt; and then use them as literals.)</source>
          <target state="translated">Perlは &lt;code&gt;Inf&lt;/code&gt; と &lt;code&gt;NaN&lt;/code&gt; を数値リテラルとして理解しませんが、文字列として持つことができ、Perlは必要に応じてそれらを変換します： &quot;Inf&quot; + 1（ただし、POSIX拡張機能からインポートできます &lt;code&gt;use POSIX qw(Inf NaN);&lt;/code&gt; そしてそれらをリテラルとして使用します。）</target>
        </trans-unit>
        <trans-unit id="f06c7777ec6a9cec60c6bbba96236c8c49e10f30" translate="yes" xml:space="preserve">
          <source>Perl enables DECC$EFS_CASE_PRESERVE and DECC$ARGV_PARSE_STYLE by default. Note that the latter only takes effect when extended parse is set in the process in which Perl is running. When these features are explicitly disabled in the environment or the CRTL does not support them, Perl follows the traditional CRTL behavior of downcasing command-line arguments and returning file specifications in lower case only.</source>
          <target state="translated">Perl はデフォルトで DECC$EFS_CASE_PRESERVE と DECC$ARGV_PARSE_STYLE を有効にしています。後者は、Perl が実行されているプロセスで拡張パースが設定されている場合にのみ有効になることに注意してください。これらの機能が環境で明示的に無効化されている場合や、CRTLがこれらの機能をサポートしていない場合、Perlは従来のCRTLの動作に従い、コマンドラインの引数を小文字にして、ファイルの仕様を小文字のみで返します。</target>
        </trans-unit>
        <trans-unit id="9a7ffa77beb4b5bfb6e9cd592ffc3d63fefd5d7f" translate="yes" xml:space="preserve">
          <source>Perl environment problems</source>
          <target state="translated">Perl環境の問題</target>
        </trans-unit>
        <trans-unit id="efd321f1d642a6164aeb6c6061ba19e8d5553328" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists($myarray[$key])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists($myarray[$key])&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1023174861c373cd70c764cd28a1ffe52c362de1" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @array;&lt;/code&gt; .</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @array;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1efb4e8b7d1884210a677a24eedc3aaa4097d90" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="994d82ebaabf45f0326fee88481665e6c0ceb2c7" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop(@myarray);&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop(@myarray);&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c448473e835de05f1fd2f4b0a4490f988bfea19" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; @myarray, $elem;&lt;/code&gt; .</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; @myarray, $elem;&lt;/code&gt; &lt;a href=&quot;functions/push&quot;&gt;プッシュし&lt;/a&gt;ます。。</target>
        </trans-unit>
        <trans-unit id="7c7b86a8f8deba930918279e3c4fc84bda790f23" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift(@myarray);&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift(@myarray);&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4b1f7bdfb013ea4679d96a3812b271f5a3c227d" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; @myarray, ( (&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;) x $n );&lt;/code&gt;</source>
          <target state="translated">同等のPerl： &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; @myarray, ( (&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;) x $n );&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="066d54dd7f117a044b123bb5ad4d4d8cf43e8b71" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;@myarray = ();&lt;/code&gt; .</source>
          <target state="translated">同等のPerl： &lt;code&gt;@myarray = ();&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cef9ffe6af51e7c258630229039bfd2bf1b03f4a" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt; .</source>
          <target state="translated">同等のPerl： &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd6c0fa81ee3f8c1c8439229199c54fb18bd674d" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt;.</source>
          <target state="translated">Perlの同等物： &lt;code&gt;@{&quot;$name&quot;}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8387ac6319e9c82075e493d979c1ad9402112db0" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;exists($myarray[$key])&lt;/code&gt;.</source>
          <target state="translated">Perlの同等物： &lt;code&gt;exists($myarray[$key])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5694e8120a54857700407b986aded553056c12c9" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;my @array;&lt;/code&gt;.</source>
          <target state="translated">Perlの同等物： &lt;code&gt;my @array;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64388bc4ae76bac317e416b96081b0d5a0b6f31c" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;my @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</source>
          <target state="translated">Perlの同等物： &lt;code&gt;my @new_array = ($scalar1, $scalar2, $scalar3...);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c87143f1eb93d31e9b921daa9a01a7a20ad16d03" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;pop(@myarray);&lt;/code&gt;</source>
          <target state="translated">Perlの同等物： &lt;code&gt;pop(@myarray);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="697b1808fa2455d4990177e0cd7be75e6d5166eb" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;push @myarray, $val;&lt;/code&gt;.</source>
          <target state="translated">Perlの同等物： &lt;code&gt;push @myarray, $val;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa1708a84090946a618873c3a265107ea3020eef" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;shift(@myarray);&lt;/code&gt;</source>
          <target state="translated">Perlの同等物： &lt;code&gt;shift(@myarray);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="75d39e18ca7e7f2ff2aed6b8cb0b4962580d73a5" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;splice(@myarray, $key, 1, undef)&lt;/code&gt; (with the &lt;code&gt;splice&lt;/code&gt; in void context if &lt;code&gt;G_DISCARD&lt;/code&gt; is present).</source>
          <target state="translated">Perlの同等物： &lt;code&gt;splice(@myarray, $key, 1, undef)&lt;/code&gt; （ &lt;code&gt;G_DISCARD&lt;/code&gt; が存在する場合はvoidコンテキストの &lt;code&gt;splice&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="4a3899dd3b4004ff6e0fc8455247dbe889fc7876" translate="yes" xml:space="preserve">
          <source>Perl equivalent: &lt;code&gt;unshift @myarray, ((undef) x $num);&lt;/code&gt;</source>
          <target state="translated">Perlの同等物： &lt;code&gt;unshift @myarray, ((undef) x $num);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1633602744f0213cf03a917c908f3ac91926bf3d" translate="yes" xml:space="preserve">
          <source>Perl exited with active threads:</source>
          <target state="translated">Perlがアクティブなスレッドで終了しました。</target>
        </trans-unit>
        <trans-unit id="fa8a19dd0719175a9c848242a7e2217e48154534" translate="yes" xml:space="preserve">
          <source>Perl extension for ARexx support</source>
          <target state="translated">ARexx サポートのための Perl 拡張</target>
        </trans-unit>
        <trans-unit id="8aec2fb1965c42df65abc2f4f5003e7dd1e44262" translate="yes" xml:space="preserve">
          <source>Perl extension for BSD glob routine</source>
          <target state="translated">BSD のグロブルーチン用 Perl 拡張</target>
        </trans-unit>
        <trans-unit id="24aff9b9093549c7d05ba26875dcbd18c62f3127" translate="yes" xml:space="preserve">
          <source>Perl extension for SHA-1/224/256/384/512</source>
          <target state="translated">SHA-1/224/256/384/512 用の Perl 拡張モジュール</target>
        </trans-unit>
        <trans-unit id="403524ab53fcfa65297b5c6d11da8a41e9bdf68e" translate="yes" xml:space="preserve">
          <source>Perl extension for Version Objects</source>
          <target state="translated">バージョンオブジェクトのためのPerl拡張</target>
        </trans-unit>
        <trans-unit id="42f2f6711b11e99ed8f45572975dad7e69bf2e53" translate="yes" xml:space="preserve">
          <source>Perl extension for low level amiga support</source>
          <target state="translated">低レベルの amiga をサポートするための Perl 拡張</target>
        </trans-unit>
        <trans-unit id="c24a560ca7260d4a2d7424b6161a53890073335c" translate="yes" xml:space="preserve">
          <source>Perl extension for sharing data structures between threads</source>
          <target state="translated">スレッド間でデータ構造を共有するための Perl 拡張</target>
        </trans-unit>
        <trans-unit id="3668aadc429b1304c6228d98dc9c4677872a86f1" translate="yes" xml:space="preserve">
          <source>Perl extension to manipulate DCL symbols</source>
          <target state="translated">DCLシンボルを操作するためのPerl拡張</target>
        </trans-unit>
        <trans-unit id="b4ef3d43e200cfbf35d2a7b6f42754d585642e16" translate="yes" xml:space="preserve">
          <source>Perl extensions are packages which provide both XS and Perl code to add new functionality to perl. (XS is a meta-language which simplifies writing C code which interacts with Perl, see &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; for more details.) The Perl code for an extension is treated like any other library module - it's made available in your script through the appropriate &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement, and usually defines a Perl package containing the extension.</source>
          <target state="translated">Perl拡張は、perlに新しい機能を追加するためのXSとPerlコードの両方を提供するパッケージです。 （XSは、Perlと相互作用は、参照Cのコードを書く簡素化メタ言語である&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;それは適切なを通して、あなたのスクリプトで使用可能になります-拡張のためのPerlコードは、他のライブラリのモジュールと同じように扱われます。詳細について）を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; ステートメント。通常、拡張機能を含むPerlパッケージを定義します。</target>
        </trans-unit>
        <trans-unit id="0e866b1770868c3ac8fc82a190900a1373e58cc0" translate="yes" xml:space="preserve">
          <source>Perl extensions are packages which provide both XS and Perl code to add new functionality to perl. (XS is a meta-language which simplifies writing C code which interacts with Perl, see &lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt; for more details.) The Perl code for an extension is treated like any other library module - it's made available in your script through the appropriate &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statement, and usually defines a Perl package containing the extension.</source>
          <target state="translated">Perl拡張機能は、perlに新しい機能を追加するためのXSコードとPerlコードの両方を提供するパッケージです。（XSは、Perlと対話するCコードの記述を簡素化するメタ言語です。詳細については、&lt;a href=&quot;perlxs&quot;&gt;perlxs&lt;/a&gt;を参照してください。）拡張機能のPerlコードは、他のライブラリモジュールと同様に扱われます。適切な &lt;code&gt;use&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; により、スクリプトで使用できるようになります。ステートメントであり、通常、拡張機能を含むPerlパッケージを定義します。</target>
        </trans-unit>
        <trans-unit id="f81d1af8c2de641461c82be3969f85e5ad3bba8c" translate="yes" xml:space="preserve">
          <source>Perl flavors</source>
          <target state="translated">Perl のフレーバー</target>
        </trans-unit>
        <trans-unit id="bd0c8e091c1809181809f92d1bef1271c7b38ca1" translate="yes" xml:space="preserve">
          <source>Perl folding rules are not up-to-date for 0x%X; please use the perlbug utility to report; in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">Perlフォールディングルールは0x％Xでは最新ではありません。perlbugユーティリティを使用して報告してください。正規表現で; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="7d53205939368bef651c20e6009f95c9046101c6" translate="yes" xml:space="preserve">
          <source>Perl for VMS supports redirection of input and output on the command line, using a subset of Bourne shell syntax:</source>
          <target state="translated">VMS 用 Perl は、ボーンシェル構文のサブセットを使用して、コマンドライン上での入力と出力のリダイレクションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="903e263457faf9b024e447e13142cbcffaf64dc8" translate="yes" xml:space="preserve">
          <source>Perl functions</source>
          <target state="translated">パール関数</target>
        </trans-unit>
        <trans-unit id="7328221f86957828b643cf959ce54c0e2d391c24" translate="yes" xml:space="preserve">
          <source>Perl functions that execute the most opcodes</source>
          <target state="translated">最も多くのオペコードを実行するPerl関数</target>
        </trans-unit>
        <trans-unit id="5eab57fb6512949ddd22c0f3a298921f86d2bf10" translate="yes" xml:space="preserve">
          <source>Perl had to change internally to decouple &quot;bytes&quot; from &quot;characters&quot;. It is important that you too change your ideas, if you haven't already, so that &quot;byte&quot; and &quot;character&quot; no longer mean the same thing in your mind.</source>
          <target state="translated">Perl は、「バイト」と「文字」を切り離すために、内部的に変更しなければなりませんでした。あなたの頭の中では、「バイト」と「文字」が同じ意味ではなくなるように、あなたも考えを変えることが重要です。</target>
        </trans-unit>
        <trans-unit id="eb521c7add3b7379a78d9a6b6db7917dc107bbad" translate="yes" xml:space="preserve">
          <source>Perl has a mechanism for intermixing documentation with source code. While it's expecting the beginning of a new statement, if the compiler encounters a line that begins with an equal sign and a word, like this</source>
          <target state="translated">Perl には、ドキュメントとソースコードを混在させる仕組みがあります。Perl は新しいステートメントの始まりを期待していますが、コンパイラが次のように等号と単語で始まる行に遭遇した場合は</target>
        </trans-unit>
        <trans-unit id="1e3d0cb76e6880e13fbb5d4447acbcbd4213008d" translate="yes" xml:space="preserve">
          <source>Perl has a mechanism to help you generate simple reports and charts. To facilitate this, Perl helps you code up your output page close to how it will look when it's printed. It can keep track of things like how many lines are on a page, what page you're on, when to print page headers, etc. Keywords are borrowed from FORTRAN: format() to declare and write() to execute; see their entries in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;. Fortunately, the layout is much more legible, more like BASIC's PRINT USING statement. Think of it as a poor man's nroff(1).</source>
          <target state="translated">Perlには、単純なレポートとグラフを生成するのに役立つメカニズムがあります。これを容易にするために、Perlは、印刷されたときの外観に近い出力ページをコーディングするのに役立ちます。これは、ページの行数、現在のページ、ページヘッダーを印刷するタイミングなどを追跡できます。キーワードはFORTRANから借用されています。format（）を宣言し、write（）で実行します。&lt;a href=&quot;perlfunc&quot;&gt;perlfuncの&lt;/a&gt;エントリを参照してください。幸いにも、レイアウトはBASICのPRINT USINGステートメントのように、はるかに読みやすくなっています。それを貧しい人のnroff（1）と考えてください。</target>
        </trans-unit>
        <trans-unit id="a345738f3732f2f0cdf6981643487de1b3db946b" translate="yes" xml:space="preserve">
          <source>Perl has a number of C functions that allow you to call Perl subroutines. They are</source>
          <target state="translated">Perlには、Perlのサブルーチンを呼び出すことができるC関数がいくつかあります。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1bddeb2bc37a6de64d61b4ee95d33bffdb149de8" translate="yes" xml:space="preserve">
          <source>Perl has a very handy construction</source>
          <target state="translated">Perl には非常に便利な構造体があります。</target>
        </trans-unit>
        <trans-unit id="782c7b78803135d7443e4bbee913a7ff13f6ef7c" translate="yes" xml:space="preserve">
          <source>Perl has allowed you to use a bare here-document terminator to have the here-document end at the first empty line. This practise was deprecated in Perl 5.000; as of Perl 5.28, using a bare here-document terminator throws a fatal error.</source>
          <target state="translated">Perl では、裸の her-document ターミネータを使用して、最初の空行で her-document を終了させることができるようになりました。Perl 5.28 では、むき出しの her-document ターミネータを使用すると致命的なエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0fe803dd8b2d3f30a3a54343a2a1b136039b1f5f" translate="yes" xml:space="preserve">
          <source>Perl has an &lt;b&gt;internal format&lt;/b&gt;, an encoding that it uses to encode text strings so it can store them in memory. All text strings are in this internal format. In fact, text strings are never in any other format!</source>
          <target state="translated">Perlには&lt;b&gt;内部形式&lt;/b&gt;があり&lt;b&gt;ます&lt;/b&gt;。これは、テキスト文字列をエンコードしてメモリに格納できるようにするためのエンコードです。すべてのテキスト文字列はこの内部形式です。実際、テキスト文字列が他の形式になることは決してありません！</target>
        </trans-unit>
        <trans-unit id="8e77f37e525e239856b2f6dca9aacaa6be1709a8" translate="yes" xml:space="preserve">
          <source>Perl has an abstracted interface for all supported character encodings, so this is actually a generic &lt;code&gt;Encode&lt;/code&gt; tutorial and &lt;code&gt;Encode&lt;/code&gt; FAQ. But many people think that Unicode is special and magical, and I didn't want to disappoint them, so I decided to call the document a Unicode tutorial.</source>
          <target state="translated">Perlには、サポートされているすべての文字エンコーディング用の抽象化されたインターフェイスがあるため、これは実際には一般的な &lt;code&gt;Encode&lt;/code&gt; チュートリアルと &lt;code&gt;Encode&lt;/code&gt; FAQです。しかし、多くの人がUnicodeは特別で魔法だと思っており、私はそれらを失望させたくなかったので、このドキュメントをUnicodeチュートリアルと呼ぶことにしました。</target>
        </trans-unit>
        <trans-unit id="ba0cf0d83a33c18a21a219f52e56234294b46fae" translate="yes" xml:space="preserve">
          <source>Perl has an experimental facility to allow a subroutine's formal parameters to be introduced by special syntax, separate from the procedural code of the subroutine body. The formal parameter list is known as a</source>
          <target state="translated">Perlには、サブルーチン本体の手続きコードとは別に、サブルーチンの形式パラメータを特別な構文で導入できるようにする実験的な機能があります。正式なパラメータのリストは</target>
        </trans-unit>
        <trans-unit id="97abe0ed9adb57fe2fdef50f3e6441c8a80f29df" translate="yes" xml:space="preserve">
          <source>Perl has been built with &lt;code&gt;PERL_OLD_SIGNALS&lt;/code&gt; (see &lt;code&gt;perl -V&lt;/code&gt;).</source>
          <target state="translated">Perlは &lt;code&gt;PERL_OLD_SIGNALS&lt;/code&gt; で構築されています（ &lt;code&gt;perl -V&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="67a3b41d8b9e93c19e7c374ecedc7c37bde9bf23" translate="yes" xml:space="preserve">
          <source>Perl has been extended to support certain types of locales available in the locale system. This is controlled per application by using one pragma, one function call, and several environment variables.</source>
          <target state="translated">Perl は、ロケールシステムで利用可能な特定のタイプのロケールをサポートするように拡張されています。これは、1つのプラグマ、1つの関数呼び出し、そしていくつかの環境変数を使用してアプリケーションごとに制御されます。</target>
        </trans-unit>
        <trans-unit id="a1de858c46ad7947531577a6915520f75857a413" translate="yes" xml:space="preserve">
          <source>Perl has been extended to support the locale system. This is controlled per application by using one pragma, one function call, and several environment variables.</source>
          <target state="translated">Perl はロケールシステムをサポートするように拡張されました。これは、1つのプラグマ、1つの関数呼び出し、およびいくつかの環境変数を使用して、アプリケーションごとに制御されます。</target>
        </trans-unit>
        <trans-unit id="9724b09cfb0bd9657e1b0740263fad624a62d13c" translate="yes" xml:space="preserve">
          <source>Perl has been ported to many platforms that do not fit into any of the categories listed above. Some, such as AmigaOS, QNX, Plan 9, and VOS, have been well-integrated into the standard Perl source code kit. You may need to see the</source>
          <target state="translated">Perl は、上記のどのカテゴリにも当てはまらない多くのプラットフォームに移植されています。AmigaOS、QNX、Plan 9、VOS のようないくつかのプラットフォームは、標準の Perl ソースコードキットにうまく統合されています。を見る必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="59525826d5ce7fdcf57cd21fd12177031ab869c3" translate="yes" xml:space="preserve">
          <source>Perl has its own special way of easily writing test scripts, but for this example only, we'll create our own test script. Create a file called hello that looks like this:</source>
          <target state="translated">Perl にはテストスクリプトを簡単に書くための特別な方法がありますが、この例では独自のテストスクリプトを作成します。helloというファイルを作成して、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="998bc2b1651869833ea0ac38395b9fb4d5ed44f8" translate="yes" xml:space="preserve">
          <source>Perl has long been ported to Intel-style microcomputers running under systems like PC-DOS, MS-DOS, OS/2, and most Windows platforms you can bring yourself to mention (except for Windows CE, if you count that). Users familiar with</source>
          <target state="translated">Perlは長い間、PC-DOS、MS-DOS、OS/2などのシステムで動作するインテルスタイルのマイコンに移植されてきました。ユーザーは以下のことに精通しています</target>
        </trans-unit>
        <trans-unit id="fe67796dc02d7b52e1f554749c03ec30b57d6bfa" translate="yes" xml:space="preserve">
          <source>Perl has most of the usual conditional and looping constructs. As of Perl 5.10, it even has a case/switch statement (spelled &lt;code&gt;given&lt;/code&gt; /&lt;code&gt;when&lt;/code&gt; ). See &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;Switch Statements in perlsyn&lt;/a&gt; for more details.</source>
          <target state="translated">Perlは通常の条件付きおよびループ構成のほとんどを備えています。5.10のように、それもケース/ switch文（スペル有する &lt;code&gt;given&lt;/code&gt; / ）。詳細について&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;は、perlsynのSwitchステートメントを&lt;/a&gt;参照してください。 &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9108e90e0b7ad511809f643c664cdbaf3b5a6fd" translate="yes" xml:space="preserve">
          <source>Perl has most of the usual conditional and looping constructs. As of Perl 5.10, it even has a case/switch statement (spelled &lt;code&gt;given&lt;/code&gt;/&lt;code&gt;when&lt;/code&gt;). See &lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;&quot;Switch Statements&quot; in perlsyn&lt;/a&gt; for more details.</source>
          <target state="translated">Perlには、通常の条件付きおよびループ構造のほとんどがあります。5.10のように、それもケース/ switch文（スペル有する &lt;code&gt;given&lt;/code&gt; / ）。詳細について&lt;a href=&quot;perlsyn#Switch-Statements&quot;&gt;は、perlsynの「SwitchStatements」を参照&lt;/a&gt;してください。 &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db019a5ac1f171d008187e1d1c55e0f5d5a9b3a4" translate="yes" xml:space="preserve">
          <source>Perl has never accepted code points above 255 without them being Unicode, so their use implies Unicode for the whole string.</source>
          <target state="translated">Perl は 255 以上のコードポイントを Unicode でなくても受け入れたことがないので、それらを使用することは文字列全体の Unicode を意味します。</target>
        </trans-unit>
        <trans-unit id="3dbc4a73529270e867678196c4fd9545abf0346b" translate="yes" xml:space="preserve">
          <source>Perl has no special syntax for attributes. Under the hood, attributes are often stored as keys in the object's underlying hash, but don't worry about this.</source>
          <target state="translated">Perlには属性のための特別な構文はありません。裏では、属性はしばしばオブジェクトの基礎となるハッシュのキーとして格納されますが、これについては心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7a462b0d48d68775e02812c002249670e7d86d56" translate="yes" xml:space="preserve">
          <source>Perl has several abbreviations for common character classes. (These definitions are those that Perl uses in ASCII-safe mode with the &lt;code&gt;/a&lt;/code&gt; modifier. Otherwise they could match many more non-ASCII Unicode characters as well. See &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;&quot;Backslash sequences&quot; in perlrecharclass&lt;/a&gt; for details.)</source>
          <target state="translated">Perlには、一般的な文字クラスのいくつかの略語があります。（これらの定義は、Perlが &lt;code&gt;/a&lt;/code&gt; 修飾子を使用してASCIIセーフモードで使用する定義です。そうでない場合は、より多くの非ASCII Unicode文字にも一致する可能性があります。詳細については&lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;、perlrecharclassの「バックスラッシュシーケンス」&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="a2deb2a0ce121e98962483bd16f83d982606bfc5" translate="yes" xml:space="preserve">
          <source>Perl has several abbreviations for common character classes. (These definitions are those that Perl uses in ASCII-safe mode with the &lt;code&gt;/a&lt;/code&gt; modifier. Otherwise they could match many more non-ASCII Unicode characters as well. See &lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;Backslash sequences in perlrecharclass&lt;/a&gt; for details.)</source>
          <target state="translated">Perlには、一般的な文字クラスのいくつかの略語があります。（これらの定義は、Perlが &lt;code&gt;/a&lt;/code&gt; 修飾子を使用してASCIIセーフモードで使用する定義です。それ以外の場合は、さらに多くの非ASCII Unicode文字と一致する可能性があります。詳細については&lt;a href=&quot;perlrecharclass#Backslash-sequences&quot;&gt;、perlrecharclassのバックスラッシュシーケンス&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="6e2448e5aa8e9e98f0e99e7fca74328732318a16" translate="yes" xml:space="preserve">
          <source>Perl has special debugging hooks at compile-time and run-time used to create debugging environments. These hooks are not to be confused with the</source>
          <target state="translated">Perl はコンパイル時やランタイム時にデバッグ環境を作るための特別なデバッグフックを持っています。これらのフックは</target>
        </trans-unit>
        <trans-unit id="0380b6f875ab18989e39e87ecb537accdd5cfd4c" translate="yes" xml:space="preserve">
          <source>Perl has three built-in data types: scalars, arrays of scalars, and associative arrays of scalars, known as &quot;hashes&quot;. A scalar is a single string (of any size, limited only by the available memory), number, or a reference to something (which will be discussed in &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;). Normal arrays are ordered lists of scalars indexed by number, starting with 0. Hashes are unordered collections of scalar values indexed by their associated string key.</source>
          <target state="translated">Perlには、スカラー、スカラーの配列、および「ハッシュ」と呼ばれるスカラーの連想配列の3つの組み込みデータ型があります。スカラーは、単一の文字列（任意のサイズで、使用可能なメモリによってのみ制限されます）、数値、または何かへの参照（&lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;で説明します）です。通常の配列は、0から始まる、番号でインデックス付けされたスカラーの順序付きリストです。ハッシュは、関連付けられた文字列キーでインデックス付けされたスカラー値の順序付けられていないコレクションです。</target>
        </trans-unit>
        <trans-unit id="fe80e5af445506b27b416f76f8599a7353684bc2" translate="yes" xml:space="preserve">
          <source>Perl has three main variable types: scalars, arrays, and hashes.</source>
          <target state="translated">Perlには、スカラ、配列、ハッシュという3つの主要な変数型があります。</target>
        </trans-unit>
        <trans-unit id="5581a893a6439e102c22a8a8e459a544618d9458" translate="yes" xml:space="preserve">
          <source>Perl has three typedefs that handle Perl's three main data types:</source>
          <target state="translated">Perlには、Perlの3つの主要なデータ型を扱う3つの型定義があります。</target>
        </trans-unit>
        <trans-unit id="4982bfdcb9933aa8ea045e6714352b02205f1767" translate="yes" xml:space="preserve">
          <source>Perl has two major annual conventions: The Perl Conference (now part of OSCON), put on by O'Reilly, and Yet Another Perl Conference or YAPC (pronounced yap-see), which is localized into several regional YAPCs (North America, Europe, Asia) in a stunning grassroots display by the Perl community. For more information about either conference, check out their respective web pages: OSCON &lt;a href=&quot;http://conferences.oreillynet.com/&quot;&gt;http://conferences.oreillynet.com/&lt;/a&gt;; YAPC &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org&lt;/a&gt;.</source>
          <target state="translated">Perlには2つの主要な年次大会があります。O'Reillyによって開催されたPerl会議（現在はOSCONの一部）と、いくつかの地域YAPC（北米、ヨーロッパ）にローカライズされた、Yet Another Perl ConferenceまたはYAPC（発音はyap-see）です。 、アジア）Perlコミュニティによる見事な草の根展示。いずれかの会議の詳細については、それぞれのWebページを確認して&lt;a href=&quot;http://conferences.oreillynet.com/&quot;&gt;ください&lt;/a&gt;。OSCON http://conferences.oreillynet.com/ ; YAPC &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fa0e69b9943a36c122fd92838ddb0e5f771d49b" translate="yes" xml:space="preserve">
          <source>Perl hash references become JSON objects. As there is no inherent ordering in hash keys (or JSON objects), they will usually be encoded in a pseudo-random order. JSON::PP can optionally sort the hash keys (determined by the</source>
          <target state="translated">Perl のハッシュ参照は JSON オブジェクトになります。ハッシュキー(またはJSONオブジェクト)には固有の順序がないので、通常は擬似ランダムな順序でエンコードされます。JSON::PP はオプションでハッシュキーをソートすることができます (</target>
        </trans-unit>
        <trans-unit id="d410c5808a3d55ecb935a6972f7fdc386cde6d4b" translate="yes" xml:space="preserve">
          <source>Perl identifiers that begin with digits or punctuation characters are exempt from the effects of the &lt;code&gt;package&lt;/code&gt; declaration and are always forced to be in package &lt;code&gt;main&lt;/code&gt;; they are also exempt from &lt;code&gt;strict 'vars'&lt;/code&gt; errors. A few other names are also exempt in these ways:</source>
          <target state="translated">数字または句読文字で始まるPerl識別子は、 &lt;code&gt;package&lt;/code&gt; 宣言の影響を免除され、常にパッケージ &lt;code&gt;main&lt;/code&gt; に強制されます。また、 &lt;code&gt;strict 'vars'&lt;/code&gt; エラーも免除されます。他のいくつかの名前もこれらの方法で免除されます：</target>
        </trans-unit>
        <trans-unit id="9b6b908f8c33f304fe3c47ffea7a9a025bc30e32" translate="yes" xml:space="preserve">
          <source>Perl identifiers that begin with digits, control characters, or punctuation characters are exempt from the effects of the &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; declaration and are always forced to be in package &lt;code&gt;main&lt;/code&gt; ; they are also exempt from &lt;code&gt;strict 'vars'&lt;/code&gt; errors. A few other names are also exempt in these ways:</source>
          <target state="translated">数字、制御文字、または句読文字で始まるPerl識別子は、 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt;&lt;/code&gt; 宣言の影響を受けず、常にパッケージ &lt;code&gt;main&lt;/code&gt; に置かれます。また、 &lt;code&gt;strict 'vars'&lt;/code&gt; エラーも免除されます。他のいくつかの名前もこれらの方法で免除されます：</target>
        </trans-unit>
        <trans-unit id="31969a763381ff2a4c90806f4b46526dbe2b269c" translate="yes" xml:space="preserve">
          <source>Perl implementations</source>
          <target state="translated">Perl の実装</target>
        </trans-unit>
        <trans-unit id="c8fd67f8a70f5e14b6e3a19738244712c763a3d5" translate="yes" xml:space="preserve">
          <source>Perl implements a class using a package, but the presence of a package doesn't imply the presence of a class. A package is just a namespace. A class is a package that provides subroutines that can be used as methods. A method is just a subroutine that expects, as its first argument, either the name of a package (for &quot;static&quot; methods), or a reference to something (for &quot;virtual&quot; methods).</source>
          <target state="translated">Perl はパッケージを使ってクラスを実装していますが、パッケージの存在はクラスの存在を意味するものではありません。パッケージは単なる名前空間です。クラスは、メソッドとして使用できるサブルーチンを提供するパッケージです。メソッドは単なるサブルーチンであり、その第一引数としてパッケージの名前(「静的」メソッドの場合)、または何かへの参照(「仮想」メソッドの場合)を期待します。</target>
        </trans-unit>
        <trans-unit id="58db3a9b91cfa56f68561f9fa6e162ac6046ad34" translate="yes" xml:space="preserve">
          <source>Perl implements a copy-on-write (COW) mechanism for scalars, in which string copies are not immediately made when requested, but are deferred until made necessary by one or the other scalar changing. This is mostly transparent, but one must take care not to modify string buffers that are shared by multiple SVs.</source>
          <target state="translated">Perl はスカラに対してコピーオンライト (COW)機構を実装しており、文字列のコピーは要求されてもすぐには行われず、どちらかのスカラの変更によって必要になるまで延期されます。これはほとんど透過的ですが、複数の SV で共有されている文字列バッファを変更しないように注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9f2e73e561af14b355b2cc7b94da012ba43ebaff" translate="yes" xml:space="preserve">
          <source>Perl in PASE may be used in the same manner as you would use Perl on AIX.</source>
          <target state="translated">PASEのPerlは、AIXでPerlを使うのと同じように使うことができます。</target>
        </trans-unit>
        <trans-unit id="f2a8c9dfcc6b27fc2b2bc1c4e09ed07f063fafcb" translate="yes" xml:space="preserve">
          <source>Perl inserts the contents of &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; (or &lt;code&gt;BEGIN {&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;
'perl5db.pl'}&lt;/code&gt; if not present) before the first line of your program.</source>
          <target state="translated">Perl は、プログラムの最初の行の前に &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; （または存在しない場合は &lt;code&gt;BEGIN {&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; 'perl5db.pl'}&lt;/code&gt; の内容）を挿入します。</target>
        </trans-unit>
        <trans-unit id="5f14427130c0e5366717699f360d7e36f930c1e6" translate="yes" xml:space="preserve">
          <source>Perl inserts the contents of &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; (or &lt;code&gt;BEGIN {require 'perl5db.pl'}&lt;/code&gt; if not present) before the first line of your program.</source>
          <target state="translated">Perlは、プログラムの最初の行の前に &lt;code&gt;$ENV{PERL5DB}&lt;/code&gt; （または、存在しない場合は &lt;code&gt;BEGIN {require 'perl5db.pl'}&lt;/code&gt; ）の内容を挿入します。</target>
        </trans-unit>
        <trans-unit id="23d0dc7556929e748dc66e21edf0645eb0e4825c" translate="yes" xml:space="preserve">
          <source>Perl installs into the SDK directory structure and expects many of the build tools present in the SDK to be available. So for the best results install the SDK first.</source>
          <target state="translated">Perl は SDK のディレクトリ構造にインストールされ、SDK に含まれる多くのビルドツールが利用可能であることを期待しています。そのため、最良の結果を得るためには、まずSDKをインストールしてください。</target>
        </trans-unit>
        <trans-unit id="2a9b4ba7a506b9d41ffb5e3879cb8f3519952178" translate="yes" xml:space="preserve">
          <source>Perl interface to IEEE Std 1003.1</source>
          <target state="translated">IEEE Std 1003.1 への Perl インタフェース</target>
        </trans-unit>
        <trans-unit id="98db74e4a9950c02875b0447d97adf3fab69be22" translate="yes" xml:space="preserve">
          <source>Perl interface to the MD5 Algorithm</source>
          <target state="translated">MD5 アルゴリズムへの Perl インターフェイス</target>
        </trans-unit>
        <trans-unit id="25640a112f893abdc0c31467980b237692e55c11" translate="yes" xml:space="preserve">
          <source>Perl interface to the UNIX syslog(3) calls</source>
          <target state="translated">UNIX の syslog(3)を呼び出すための Perl インターフェイス</target>
        </trans-unit>
        <trans-unit id="eb268cafbb2bc2d6a265535e507a93da4ace82e9" translate="yes" xml:space="preserve">
          <source>Perl interface to various &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; packages.</source>
          <target state="translated">さまざまな &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; パッケージへのPerlインターフェイス。</target>
        </trans-unit>
        <trans-unit id="3c4d5afc98ae9e7a6b3b8ccc0bdaf8f20968aa0d" translate="yes" xml:space="preserve">
          <source>Perl interface to various &lt;code&gt;readline&lt;/code&gt; packages.</source>
          <target state="translated">さまざまな &lt;code&gt;readline&lt;/code&gt; パッケージへのPerlインターフェース。</target>
        </trans-unit>
        <trans-unit id="532fa58abfc3c5192e3d89ee9b20cda6099a638d" translate="yes" xml:space="preserve">
          <source>Perl interpreter-based threads</source>
          <target state="translated">Perl インタプリタベースのスレッド</target>
        </trans-unit>
        <trans-unit id="7813b6fd0cf6ff0fcbbed68e090fa174337973c7" translate="yes" xml:space="preserve">
          <source>Perl is a &lt;b&gt;free-form&lt;/b&gt; language: you can format and indent it however you like. Whitespace serves mostly to separate tokens, unlike languages like Python where it is an important part of the syntax, or Fortran where it is immaterial.</source>
          <target state="translated">Perlは&lt;b&gt;自由形式の&lt;/b&gt;言語です。好きなようにフォーマットしてインデントできます。空白は、構文の重要な部分であるPythonや重要でない部分のFortranのような言語とは異なり、トークンを分離するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="78b17861828e1fc00762c322f49cbad21d37d4a9" translate="yes" xml:space="preserve">
          <source>Perl is a general-purpose programming language originally developed for text manipulation and now used for a wide range of tasks including system administration, web development, network programming, GUI development, and more.</source>
          <target state="translated">Perlは元々はテキスト操作のために開発された汎用プログラミング言語で、現在ではシステム管理、Web開発、ネットワークプログラミング、GUI開発など幅広い業務に利用されています。</target>
        </trans-unit>
        <trans-unit id="df24bdffd3ed3137e259ab273c3698d7eedca921" translate="yes" xml:space="preserve">
          <source>Perl is a high-level programming language with an eclectic heritage written by Larry Wall and a cast of thousands.</source>
          <target state="translated">Perlは、ラリー・ウォールと何千人ものキャストによって書かれた折衷的な遺産を持つ高レベルのプログラミング言語です。</target>
        </trans-unit>
        <trans-unit id="8e4a5a9567dfe12d565a7fe3569da1af894be351" translate="yes" xml:space="preserve">
          <source>Perl is a profligate wastrel when it comes to memory use. There is a saying that to estimate memory usage of Perl, assume a reasonable algorithm for memory allocation, multiply that estimate by 10, and while you still may miss the mark, at least you won't be quite so astonished. This is not absolutely true, but may provide a good grasp of what happens.</source>
          <target state="translated">Perl は、メモリ使用量に関しては大したことがありません。Perl のメモリ使用量を推定するには、メモリ割り当てのための合理的なアルゴリズムを仮定し、その推定値に 10 を乗じてください。これは絶対に正しいわけではありませんが、何が起こるかを把握するのには良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="5676662b05d1f0dfe8bee99aada0c212a7cfdcd0" translate="yes" xml:space="preserve">
          <source>Perl is at the mercy of your machine's definitions of various operations such as type casting, atof(), and floating-point output with sprintf().</source>
          <target state="translated">Perlは、型キャスト、atof()、sprintf()による浮動小数点出力など、様々な操作の定義に翻弄されています。</target>
        </trans-unit>
        <trans-unit id="cf13bfd73fd319a7fa88b1a848a7fd42bf50c10e" translate="yes" xml:space="preserve">
          <source>Perl is available for most operating systems, including virtually all Unix-like platforms. See &lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;&quot;Supported Platforms&quot; in perlport&lt;/a&gt; for a listing.</source>
          <target state="translated">Perlは、事実上すべてのUnixライクなプラットフォームを含むほとんどのオペレーティングシステムで利用できます。リストについては&lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;、perlportの「サポートされているプラ​​ットフォーム」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d9807bc15de484f6b43cc02362e93cc66150c42" translate="yes" xml:space="preserve">
          <source>Perl is available for most operating systems, including virtually all Unix-like platforms. See &lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;Supported Platforms in perlport&lt;/a&gt; for a listing.</source>
          <target state="translated">Perlは、ほとんどすべてのUnixライクなプラットフォームを含む、ほとんどのオペレーティングシステムで利用できます。リストについては&lt;a href=&quot;perlport#Supported-Platforms&quot;&gt;、perlport&lt;/a&gt;でサポートされているプラ​​ットフォームを参照してください。</target>
        </trans-unit>
        <trans-unit id="464c9f17acbbf3521c9fe1d4bfb03f4c8f71635b" translate="yes" xml:space="preserve">
          <source>Perl is binary-clean, so it can handle binary data just fine. On Windows or DOS, however, you have to use &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; for binary files to avoid conversions for line endings. In general, you should use &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; any time you want to work with binary data.</source>
          <target state="translated">Perlはバイナリクリーンであるため、バイナリデータを問題なく処理できます。ただし、WindowsまたはDOSでは、バイナリファイルに &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を使用して、行末の変換を回避する必要があります。一般に、バイナリデータを操作するときはいつでも &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f177d6bd3fecf3c385b90d51e6e9dcdc131d2dc5" translate="yes" xml:space="preserve">
          <source>Perl is binary-clean, so it can handle binary data just fine. On Windows or DOS, however, you have to use &lt;code&gt;binmode&lt;/code&gt; for binary files to avoid conversions for line endings. In general, you should use &lt;code&gt;binmode&lt;/code&gt; any time you want to work with binary data.</source>
          <target state="translated">Perlはバイナリクリーンであるため、バイナリデータを問題なく処理できます。ただし、WindowsまたはDOSでは、行末の変換を回避するために、バイナリファイルに &lt;code&gt;binmode&lt;/code&gt; を使用する必要があります。一般に、バイナリデータを操作するときはいつでも &lt;code&gt;binmode&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="432dc52a3d4248eb12d8ce12a42a4bd4668bcd6d" translate="yes" xml:space="preserve">
          <source>Perl is built using PerlIO by default; Unless you've changed this (such as building Perl with &lt;code&gt;Configure -Uuseperlio&lt;/code&gt; ), you can open filehandles directly to Perl scalars via:</source>
          <target state="translated">PerlはデフォルトでPerlIOを使用して構築されています。これを変更していない限り（ &lt;code&gt;Configure -Uuseperlio&lt;/code&gt; を使用して Perlを構築するなど）、ファイルハンドルをPerlスカラーに直接開くことができます。</target>
        </trans-unit>
        <trans-unit id="e2ba202ee46521f5f5b0bea93e68c6d4e90de303" translate="yes" xml:space="preserve">
          <source>Perl is built with a &lt;a href=&quot;perlvar#%24%5EO&quot;&gt;&lt;code&gt;$^O&lt;/code&gt;&lt;/a&gt; variable that indicates the operating system it was built on. This was implemented to help speed up code that would otherwise have to &lt;code&gt;use Config&lt;/code&gt; and use the value of &lt;a href=&quot;config#osname&quot;&gt;&lt;code&gt;$Config{osname}&lt;/code&gt;&lt;/a&gt;. Of course, to get more detailed information about the system, looking into &lt;a href=&quot;config#DESCRIPTION&quot;&gt;&lt;code&gt;%Config&lt;/code&gt;&lt;/a&gt; is certainly recommended.</source>
          <target state="translated">Perlは、それが構築されたオペレーティングシステムを示す&lt;a href=&quot;perlvar#%24%5EO&quot;&gt; &lt;code&gt;$^O&lt;/code&gt; &lt;/a&gt;変数で構築されています。これは、 &lt;code&gt;use Config&lt;/code&gt; を使用し、&lt;a href=&quot;config#osname&quot;&gt; &lt;code&gt;$Config{osname}&lt;/code&gt; &lt;/a&gt;値を使用する必要があるコードを高速化するために実装されました。もちろん、システムに関するより詳細な情報を取得するには、&lt;a href=&quot;config#DESCRIPTION&quot;&gt; &lt;code&gt;%Config&lt;/code&gt; を&lt;/a&gt;調べることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7c5ecc6508ddab8f3c4d91e33bbc7e0f0b10c001" translate="yes" xml:space="preserve">
          <source>Perl is built with a &lt;code&gt;$^O&lt;/code&gt; variable that indicates the operating system it was built on. This was implemented to help speed up code that would otherwise have to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; and use the value of &lt;code&gt;$Config{osname}&lt;/code&gt; . Of course, to get more detailed information about the system, looking into &lt;code&gt;%Config&lt;/code&gt; is certainly recommended.</source>
          <target state="translated">Perlは、それが構築されたオペレーティングシステムを示す &lt;code&gt;$^O&lt;/code&gt; 変数を使用して構築されます。これは、そうでなければなければならないであろうコードまで助け速度に実施された &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; しての値を使用 &lt;code&gt;$Config{osname}&lt;/code&gt; 。もちろん、システムに関するより詳細な情報を取得するには、 &lt;code&gt;%Config&lt;/code&gt; を調べることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b0b403c257bdd4aeec1cd64ac49b8e8696c81aad" translate="yes" xml:space="preserve">
          <source>Perl is designed to make it easy to program securely even when running with extra privileges, like setuid or setgid programs. Unlike most command line shells, which are based on multiple substitution passes on each line of the script, Perl uses a more conventional evaluation scheme with fewer hidden snags. Additionally, because the language has more builtin functionality, it can rely less upon external (and possibly untrustworthy) programs to accomplish its purposes.</source>
          <target state="translated">Perlは、setuidやsetgidプログラムのように、特別な権限で実行している場合でも安全にプログラミングができるように設計されています。スクリプトの各行で複数の置換パスに基づいているほとんどのコマンドラインシェルとは異なり、Perl は隠れた問題が少ない従来の評価スキームを使用しています。さらに、この言語にはより多くの機能が組み込まれているため、目的を達成するために外部の (信頼できない可能性のある)プログラムへの依存度が低くなっています。</target>
        </trans-unit>
        <trans-unit id="95e020b4e0da8b6212d413773e1d9a2f7cfa598b" translate="yes" xml:space="preserve">
          <source>Perl is flexible and extensible enough for you to use on virtually any task, from one-line file-processing tasks to large, elaborate systems.</source>
          <target state="translated">Perlは柔軟性と拡張性に優れているため、1行のファイル処理タスクから大規模で精巧なシステムまで、事実上あらゆるタスクで使用することができます。</target>
        </trans-unit>
        <trans-unit id="6ca32777c65e9c1e819db2ba028d7f7c9855e9eb" translate="yes" xml:space="preserve">
          <source>Perl is generally used in the situation when all the floating-point exceptions are ignored, as is the default under EMX. If they are not ignored, some benign Perl programs would get a &lt;code&gt;SIGFPE&lt;/code&gt; and would die a horrible death.</source>
          <target state="translated">Perlは、EMXでのデフォルトのように、すべての浮動小数点例外が無視される状況で一般的に使用されます。それらが無視されない場合、いくつかの良性のPerlプログラムは &lt;code&gt;SIGFPE&lt;/code&gt; を取得し、恐ろしい死を遂げるでしょう。</target>
        </trans-unit>
        <trans-unit id="3df1fe819c8ca8623cc85794dcd13ce337949f92" translate="yes" xml:space="preserve">
          <source>Perl is invoked from the command line as described in &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;. Most perl scripts, however, do have a first line such as &quot;#!/usr/local/bin/perl&quot;. This is known as a shebang (shell-bang) statement and tells the OS shell where to find the perl interpreter. In Plan 9 Perl this statement should be &quot;#!/bin/perl&quot; if you wish to be able to directly invoke the script by its name. Alternatively, you may invoke perl with the command &quot;Perl&quot; instead of &quot;perl&quot;. This will produce Acme-friendly error messages of the form &quot;filename:18&quot;.</source>
          <target state="translated">Perlは、&lt;a href=&quot;perl&quot;&gt;perlで&lt;/a&gt;説明されているようにコマンドラインから呼び出されます。ただし、ほとんどのperlスクリプトには、「＃！/ usr / local / bin / perl」などの最初の行があります。これはシバン（シェルバン）ステートメントと呼ばれ、OSシェルにperlインタープリターの場所を通知します。Plan 9 Perlでは、スクリプトを名前で直接呼び出すことができるようにする場合、このステートメントは &quot;＃！/ bin / perl&quot;にする必要があります。あるいは、「perl」の代わりに「Perl」コマンドを使用してperlを呼び出すこともできます。これにより、 &quot;filename：18&quot;という形式のAcme対応のエラーメッセージが生成されます。</target>
        </trans-unit>
        <trans-unit id="e108d57bca9b7851cac34cf12c398ccee3cee194" translate="yes" xml:space="preserve">
          <source>Perl is one of the most ported pieces of software ever. It works on operating systems I've never even heard of (see perlport for details). It needs a build tool that can work on all those platforms and with any wacky C compilers and linkers they might have.</source>
          <target state="translated">Perl は、これまでで最も移植されたソフトウェアの一つです。私が聞いたこともないようなオペレーティングシステムでも動作します (詳細は perlport を参照してください)。それには、これらのすべてのプラットフォームで動作し、それらが持っているかもしれない奇抜な C コンパイラやリンカで動作するビルドツールが必要です。</target>
        </trans-unit>
        <trans-unit id="69310d8ba2e9aaba734a13daced6bd681b7dd539" translate="yes" xml:space="preserve">
          <source>Perl is widely renowned for excellence in text processing, and regular expressions are one of the big factors behind this fame. Perl regular expressions display an efficiency and flexibility unknown in most other computer languages. Mastering even the basics of regular expressions will allow you to manipulate text with surprising ease.</source>
          <target state="translated">Perlはテキスト処理の優秀さで広く知られていますが、正規表現はこの名声を支える大きな要因の一つです。Perlの正規表現は、他のほとんどのコンピュータ言語では知られていない効率性と柔軟性を発揮します。正規表現の基礎をマスターすれば、驚くほど簡単にテキストを操作できるようになります。</target>
        </trans-unit>
        <trans-unit id="9136a62ad4b5fb86c3834a4ff695ef28ba74673c" translate="yes" xml:space="preserve">
          <source>Perl isn't sure if you meant this</source>
          <target state="translated">Perl は、あなたがこれを意味しているのかどうかはわかりません。</target>
        </trans-unit>
        <trans-unit id="29e85b3cc84aac2162dbddc5c0e070c097c573e4" translate="yes" xml:space="preserve">
          <source>Perl itself (outside the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module) will not use locales unless specifically requested to (but again note that Perl may interact with code that does use them). Even if there is such a request, &lt;b&gt;all&lt;/b&gt; of the following must be true for it to work properly:</source>
          <target state="translated">Perl自体（&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールの外）は、特に要求されない限りロケールを使用しません（ただし、Perlはロケールを使用するコードと対話する場合があることに注意してください）。そのような要求がある場合でも、それが正しく機能するためには、以下の&lt;b&gt;すべて&lt;/b&gt;が真でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b448d0fc5ff15548da831acf37af4494d6504c93" translate="yes" xml:space="preserve">
          <source>Perl itself never had a Y2K problem, although that never stopped people from creating Y2K problems on their own. See the documentation for &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; for its proper use.</source>
          <target state="translated">Perl自体がY2Kの問題を抱えたことはありませんが、それによって人々が自分でY2Kの問題を作成することを止めることはできませんでした。正しく使用するには、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f2cc4a6fccf4fd64e021bb2b5f362d3715f43b3f" translate="yes" xml:space="preserve">
          <source>Perl itself never had a Y2K problem, although that never stopped people from creating Y2K problems on their own. See the documentation for &lt;code&gt;localtime&lt;/code&gt; for its proper use.</source>
          <target state="translated">Perl自体にY2K問題が発生したことはありませんが、それによって人々がY2K問題を自分で作成することを妨げることはありませんでした。適切な使用法については、 &lt;code&gt;localtime&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="44b05ec97c9cd0cd0a392295c641d71beeda8b2c" translate="yes" xml:space="preserve">
          <source>Perl keeps the actual data in a linked list of structures with a typedef of HE. These contain the actual key and value pointers (plus extra administrative overhead). The key is a string pointer; the value is an &lt;code&gt;SV*&lt;/code&gt; . However, once you have an &lt;code&gt;HE*&lt;/code&gt; , to get the actual key and value, use the routines specified below.</source>
          <target state="translated">Perlは、typedefがHEの構造体のリンクリストに実際のデータを保持します。これらには、実際のキーと値のポインター（および追加の管理オーバーヘッド）が含まれています。キーは文字列ポインタです。値は &lt;code&gt;SV*&lt;/code&gt; です。ただし、 &lt;code&gt;HE*&lt;/code&gt; を取得したら、実際のキーと値を取得するには、以下に示すルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="fb449bcf7d8ee7c61f13e13d363e2fbfa90f9e62" translate="yes" xml:space="preserve">
          <source>Perl keeps the actual data in a linked list of structures with a typedef of HE. These contain the actual key and value pointers (plus extra administrative overhead). The key is a string pointer; the value is an &lt;code&gt;SV*&lt;/code&gt;. However, once you have an &lt;code&gt;HE*&lt;/code&gt;, to get the actual key and value, use the routines specified below.</source>
          <target state="translated">Perlは、typedefがHEの構造体のリンクリストに実際のデータを保持します。これらには、実際のキーと値のポインター（および追加の管理オーバーヘッド）が含まれています。キーは文字列ポインタです。値は &lt;code&gt;SV*&lt;/code&gt; です。ただし、 &lt;code&gt;HE*&lt;/code&gt; を取得したら、実際のキーと値を取得するには、以下に指定されているルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="b5143bb91f08dc1c6dfd63a718e07f8c7c54d1b4" translate="yes" xml:space="preserve">
          <source>Perl knows how it stored the string internally, and will use that knowledge when you &lt;code&gt;encode&lt;/code&gt; . In other words: don't try to find out what the internal encoding for a certain string is, but instead just encode it into the encoding that you want.</source>
          <target state="translated">Perlは、文字列を内部でどのように格納したかを認識しており、 &lt;code&gt;encode&lt;/code&gt; ときにその知識を使用します。言い換えると、特定の文字列の内部エンコーディングが何であるかを調べようとせず、代わりに、それを必要なエンコーディングにエンコードするだけです。</target>
        </trans-unit>
        <trans-unit id="c655bf7234ceeb2dde7bb0db4fba269b70d380f3" translate="yes" xml:space="preserve">
          <source>Perl knows how it stored the string internally, and will use that knowledge when you &lt;code&gt;encode&lt;/code&gt;. In other words: don't try to find out what the internal encoding for a certain string is, but instead just encode it into the encoding that you want.</source>
          <target state="translated">Perlは文字列を内部的に格納する方法を知っており、 &lt;code&gt;encode&lt;/code&gt; ときにその知識を使用します。言い換えると、特定の文字列の内部エンコーディングを見つけようとせず、代わりに必要なエンコーディングにエンコードするだけです。</target>
        </trans-unit>
        <trans-unit id="28c0b3b1efe64d6536aefbbd7df5f013304f845e" translate="yes" xml:space="preserve">
          <source>Perl knows what package the method is in by looking at the left side of the arrow. If the left hand side is a package name, it looks for the method in that package. If the left hand side is an object, then Perl looks for the method in the package that the object has been blessed into.</source>
          <target state="translated">Perlは、矢印の左側を見ることで、そのメソッドがどのパッケージに入っているかを知っています。左側がパッケージ名の場合、Perlはそのパッケージ内のメソッドを探します。左側がオブジェクトであれば、Perl はそのオブジェクトが祝福されたパッケージ内のメソッドを探します。</target>
        </trans-unit>
        <trans-unit id="5816a72e8edbf2978259af959564532c0158a768" translate="yes" xml:space="preserve">
          <source>Perl lets us have complex data structures. You can write something like this and all of a sudden, you'd have an array with three dimensions!</source>
          <target state="translated">Perl では複雑なデータ構造を持つことができます。このようなものを書けば、突然、3次元の配列ができあがります。</target>
        </trans-unit>
        <trans-unit id="c792eeb72bf7222c26382dcf2643ff8d2431a9b2" translate="yes" xml:space="preserve">
          <source>Perl lets you use a scalar variable containing a string as a method name:</source>
          <target state="translated">Perl では、文字列を含むスカラ変数をメソッド名として使用することができます。</target>
        </trans-unit>
        <trans-unit id="cbe2b90e37525ab41be0459f402495dfeae82682" translate="yes" xml:space="preserve">
          <source>Perl maintains environment variables in a special hash named &lt;code&gt;%ENV&lt;/code&gt; . For when this access method is inconvenient, the Perl module &lt;code&gt;Env&lt;/code&gt; allows environment variables to be treated as scalar or array variables.</source>
          <target state="translated">Perlは &lt;code&gt;%ENV&lt;/code&gt; という名前の特別なハッシュで環境変数を維持します。このアクセス方法が不便な場合のために、Perlモジュール &lt;code&gt;Env&lt;/code&gt; では、環境変数をスカラーまたは配列変数として扱うことができます。</target>
        </trans-unit>
        <trans-unit id="2f4c9c62b19928dbcce3428ee1199a16ecae0aed" translate="yes" xml:space="preserve">
          <source>Perl maintains environment variables in a special hash named &lt;code&gt;%ENV&lt;/code&gt;. For when this access method is inconvenient, the Perl module &lt;code&gt;Env&lt;/code&gt; allows environment variables to be treated as scalar or array variables.</source>
          <target state="translated">Perlは、 &lt;code&gt;%ENV&lt;/code&gt; という名前の特別なハッシュで環境変数を維持します。このアクセス方法が不便な場合、Perlモジュール &lt;code&gt;Env&lt;/code&gt; を使用すると、環境変数をスカラー変数または配列変数として扱うことができます。</target>
        </trans-unit>
        <trans-unit id="adff6cd758f5a3032ba367b5b7627b9df7afebcc" translate="yes" xml:space="preserve">
          <source>Perl makes all environment variables available to the program being executed, and passes these along to any child processes it starts. However, programs running setuid would do well to execute the following lines before doing anything else, just to keep people honest:</source>
          <target state="translated">Perl はすべての環境変数を実行中のプログラムで利用可能にし、それらを起動した子プロセスに渡します。しかし、setuid を実行しているプログラムは、他のことをする前に以下の行を実行した方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="162c022ef155f35d9a828d8883301923c1130fa3" translate="yes" xml:space="preserve">
          <source>Perl manual in</source>
          <target state="translated">Perl マニュアル</target>
        </trans-unit>
        <trans-unit id="dbb37d4ff4d4f8d3c98e670fbe144d6ded8ac9e4" translate="yes" xml:space="preserve">
          <source>Perl may also use &lt;code&gt;minus()&lt;/code&gt; to implement other operators which have not been specified in the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; directive, according to the rules for &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;Magic Autogeneration&lt;/a&gt; described later. For example, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; above declared no subroutine for any of the operators &lt;code&gt;--&lt;/code&gt; , &lt;code&gt;neg&lt;/code&gt; (the overload key for unary minus), or &lt;code&gt;-=&lt;/code&gt; . Thus</source>
          <target state="translated">Perlはまた、 &lt;code&gt;minus()&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; して、後述の&lt;a href=&quot;#Magic-Autogeneration&quot;&gt;マジック自動生成&lt;/a&gt;の規則に従って、useオーバーロードディレクティブで指定されていない他の演算子を実装することもできます。たとえば、上記の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; は、演算子 &lt;code&gt;--&lt;/code&gt; 、 &lt;code&gt;neg&lt;/code&gt; （単項マイナスのオーバーロードキー）、または &lt;code&gt;-=&lt;/code&gt; のサブルーチンを宣言していません。したがって</target>
        </trans-unit>
        <trans-unit id="386fe189f1039aa3ac9a068a2d2a8d19e7ef0b9d" translate="yes" xml:space="preserve">
          <source>Perl may also use &lt;code&gt;minus()&lt;/code&gt; to implement other operators which have not been specified in the &lt;code&gt;use overload&lt;/code&gt; directive, according to the rules for &lt;a href=&quot;#Magic-Autogeneration&quot;&gt;&quot;Magic Autogeneration&quot;&lt;/a&gt; described later. For example, the &lt;code&gt;use overload&lt;/code&gt; above declared no subroutine for any of the operators &lt;code&gt;--&lt;/code&gt;, &lt;code&gt;neg&lt;/code&gt; (the overload key for unary minus), or &lt;code&gt;-=&lt;/code&gt;. Thus</source>
          <target state="translated">Perlはまた、使用することができる &lt;code&gt;minus()&lt;/code&gt; で指定されていない他の演算子を実装するために &lt;code&gt;use overload&lt;/code&gt; の規則に従って、指令&lt;a href=&quot;#Magic-Autogeneration&quot;&gt;「マジック自動生成」は&lt;/a&gt;後述します。例えば、 &lt;code&gt;use overload&lt;/code&gt; 上記の演算子のためのサブルーチンを宣言していない &lt;code&gt;--&lt;/code&gt; 、 &lt;code&gt;neg&lt;/code&gt; （単項マイナス用の過負荷キー）、または &lt;code&gt;-=&lt;/code&gt; 。したがって、</target>
        </trans-unit>
        <trans-unit id="4c8da87cabae75ef4041db61733575500f2f5c87" translate="yes" xml:space="preserve">
          <source>Perl may be built to ignore this variable.</source>
          <target state="translated">Perl はこの変数を無視するように構築されているかもしれません。</target>
        </trans-unit>
        <trans-unit id="fc722e05604a8e2215a16848c1b1749c16faaf82" translate="yes" xml:space="preserve">
          <source>Perl may be run from the AmigaOS shell but for best results should be run under abc-shell. (abc-shell handles file globbing, pattern expansion, and sets up environment variables in the UN*Xy way that Perl expects.)</source>
          <target state="translated">Perl は AmigaOS シェルから実行できますが、最良の結果を得るためには abc-shell で実行する必要があります。(abc-shell はファイルのグロブ、パターン展開、環境変数の設定を Perl が期待する UN*Xy の方法で処理します)。</target>
        </trans-unit>
        <trans-unit id="d02d1a8d8ad8ebaf66f5ae1fae9a8be6973bfe68" translate="yes" xml:space="preserve">
          <source>Perl modifies some standard C library calls in the following ways:</source>
          <target state="translated">Perl は、いくつかの標準的な C ライブラリの呼び出しを以下の方法で変更します。</target>
        </trans-unit>
        <trans-unit id="ae2b30d9e1d501c616a9183c5e463ad869566bb9" translate="yes" xml:space="preserve">
          <source>Perl module that imports environment variables as scalars or arrays</source>
          <target state="translated">環境変数をスカラーや配列としてインポートする Perl モジュール</target>
        </trans-unit>
        <trans-unit id="8ba6990d9c4bf6e673e08de2996db458f738f918" translate="yes" xml:space="preserve">
          <source>Perl modules &lt;a href=&quot;BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt;, &lt;a href=&quot;Time::TAI64&quot;&gt;Time::TAI64&lt;/a&gt;.</source>
          <target state="translated">Perlモジュール&lt;a href=&quot;BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt;、&lt;a href=&quot;Time::TAI64&quot;&gt;Time :: TAI64&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5bf20acb7bc71507889f12ba0d9ef4ff255fd169" translate="yes" xml:space="preserve">
          <source>Perl modules &lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Time::TAI64&quot;&gt;Time::TAI64&lt;/a&gt;.</source>
          <target state="translated">Perlモジュール&lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Time::TAI64&quot;&gt;Time :: TAI64&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9426f05ffd49561244dd50c76b095078d755129d" translate="yes" xml:space="preserve">
          <source>Perl modules always have a</source>
          <target state="translated">Perlモジュールは常に</target>
        </trans-unit>
        <trans-unit id="51c59ce0ac574ea7f8b9de507be10bf4487a787f" translate="yes" xml:space="preserve">
          <source>Perl modules are included into your program by saying</source>
          <target state="translated">Perl モジュールは、次のように言ってプログラムに含まれています。</target>
        </trans-unit>
        <trans-unit id="aefb322d2fca2dbb6f88aa84174a1e5c7a427c0e" translate="yes" xml:space="preserve">
          <source>Perl modules are not the only tools a performance analyst has at their disposal, system tools like &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; should not be overlooked as the next example shows, where we take a quick look at sorting. Many books, theses and articles, have been written about efficient sorting algorithms, and this is not the place to repeat such work, there's several good sorting modules which deserve taking a look at too: &lt;code&gt;Sort::Maker&lt;/code&gt; , &lt;code&gt;Sort::Key&lt;/code&gt; spring to mind. However, it's still possible to make some observations on certain Perl specific interpretations on issues relating to sorting data sets and give an example or two with regard to how sorting large data volumes can effect performance. Firstly, an often overlooked point when sorting large amounts of data, one can attempt to reduce the data set to be dealt with and in many cases &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep()&lt;/a&gt;&lt;/code&gt; can be quite useful as a simple filter:</source>
          <target state="translated">Perlモジュールは、パフォーマンスアナリストが自由に使える唯一のツールではありません。次の例が示すように、 &lt;code&gt;&lt;a href=&quot;functions/time&quot;&gt;time&lt;/a&gt;&lt;/code&gt; ようなシステムツールを見逃してはなりません。多くの本、論文、記事は効率的な並べ替えアルゴリズムについて書かれており、これはそのような作業を繰り返す場所ではありません。いくつかの優れた並べ替えモジュールがあり、一見の価値があります： &lt;code&gt;Sort::Maker&lt;/code&gt; 、 &lt;code&gt;Sort::Key&lt;/code&gt; 心に春。ただし、データセットのソートに関連する問題に関する特定のPerl固有の解釈を観察し、大量のデータのソートがパフォーマンスにどのように影響するかに関する例を1つまたは2つ与えることも可能です。まず、大量のデータをソートするときに見落とされがちな点ですが、処理するデータセットを減らすことができ、多くの場合、 &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep()&lt;/a&gt;&lt;/code&gt; は単純なフィルターとして非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="c620f5ed9b475e8a05d4bd8c8511a64bdd8fb857" translate="yes" xml:space="preserve">
          <source>Perl modules are not the only tools a performance analyst has at their disposal, system tools like &lt;code&gt;time&lt;/code&gt; should not be overlooked as the next example shows, where we take a quick look at sorting. Many books, theses and articles, have been written about efficient sorting algorithms, and this is not the place to repeat such work, there's several good sorting modules which deserve taking a look at too: &lt;code&gt;Sort::Maker&lt;/code&gt;, &lt;code&gt;Sort::Key&lt;/code&gt; spring to mind. However, it's still possible to make some observations on certain Perl specific interpretations on issues relating to sorting data sets and give an example or two with regard to how sorting large data volumes can effect performance. Firstly, an often overlooked point when sorting large amounts of data, one can attempt to reduce the data set to be dealt with and in many cases &lt;code&gt;grep()&lt;/code&gt; can be quite useful as a simple filter:</source>
          <target state="translated">パフォーマンスアナリストが自由に使えるツールはPerlモジュールだけではありません。次の例で示すように、 &lt;code&gt;time&lt;/code&gt; などのシステムツールを見逃してはなりません。ここでは、並べ替えについて簡単に説明します。多くの本、論文、記事が効率的なソートアルゴリズムについて書かれていますが、これはそのような作業を繰り返す場所ではありません &lt;code&gt;Sort::Maker&lt;/code&gt; 、 &lt;code&gt;Sort::Key&lt;/code&gt; も見てみる価値のある優れたソートモジュールがいくつかあります。心に春。ただし、データセットの並べ替えに関連する問題に関する特定のPerl固有の解釈についていくつかの観察を行い、大量のデータの並べ替えがパフォーマンスにどのように影響するかについて例を示すことは可能です。まず、大量のデータを並べ替えるときに見落とされがちな点ですが、処理するデータセットを減らすことを試みることができ、多くの場合、 &lt;code&gt;grep()&lt;/code&gt; は単純なフィルターとして非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="c8ed366b21e1c4b28e58fe8a9ca47a44e9e81f0c" translate="yes" xml:space="preserve">
          <source>Perl modules included on CPAN have a naming hierarchy you should try to fit in with. See &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for more details on how this works, and browse around CPAN and the modules list to get a feel of it. At the very least, remember this: modules should be title capitalised, (This::Thing) fit in with a category, and explain their purpose succinctly.</source>
          <target state="translated">CPANに含まれているPerlモジュールには、適合するようにすべき命名階層があります。これがどのように機能するかについての詳細は&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;を参照してください。また、CPANとモジュールリストを参照して、感触をつかんでください。少なくとも、これを覚えておいてください。モジュールはタイトルを大文字にして（This :: Thing）カテゴリに適合させ、その目的を簡潔に説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="16a1215b63adeb8dd991dd695ae42ffb9a1eb457" translate="yes" xml:space="preserve">
          <source>Perl modules provide a range of features to help you avoid reinventing the wheel, and can be downloaded from CPAN ( &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; ). A number of popular modules are included with the Perl distribution itself.</source>
          <target state="translated">Perlモジュールは、ホイールの再発明を回避するのに役立つさまざまな機能を提供し、CPAN（&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;）からダウンロードできます。多くの人気のあるモジュールがPerlディストリビューション自体に含まれています。</target>
        </trans-unit>
        <trans-unit id="4baa5fc19e15bb718240e4d275bac1fb00891783" translate="yes" xml:space="preserve">
          <source>Perl mongers</source>
          <target state="translated">パールモンガー</target>
        </trans-unit>
        <trans-unit id="d1cd3ab508bb28b102f16c9bbb53b67e972c7a2d" translate="yes" xml:space="preserve">
          <source>Perl must be compiled with the &lt;code&gt;-Dusedtrace&lt;/code&gt; option in order to make use of the provided probes. While DTrace aims to have no overhead when its instrumentation is not active, Perl's support itself cannot uphold that guarantee, so it is built without DTrace probes under most systems. One notable exception is that Mac OS X ships a</source>
          <target state="translated">提供されたプローブを利用するには、Perlを &lt;code&gt;-Dusedtrace&lt;/code&gt; オプションを使用してコンパイルする必要があります。DTraceは、インストルメンテーションがアクティブでないときにオーバーヘッドがないことを目的としていますが、Perlのサポート自体はその保証を維持できないため、ほとんどのシステムでDTraceプローブなしで構築されています。注目すべき例外の1つは、Mac OS Xには</target>
        </trans-unit>
        <trans-unit id="4f0521c787f7204ca515e6ab4a24e34133e68740" translate="yes" xml:space="preserve">
          <source>Perl never issued a deprecation warning for this; the deprecation was by documentation policy only. But this deprecation has been lifted as of Perl 5.26.</source>
          <target state="translated">Perl はこれについて非推奨の警告を出したことはありませんでした。しかし、Perl 5.26ではこの非推奨は解除されています。</target>
        </trans-unit>
        <trans-unit id="7959a78b422ac56c4b5d4bc26bed7e5e49a45d2d" translate="yes" xml:space="preserve">
          <source>Perl normally assumes character semantics in the presence of character data (i.e. data that has come from a source that has been marked as being of a particular character encoding). When &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; is in effect, the encoding is temporarily ignored, and each string is treated as a series of bytes.</source>
          <target state="translated">Perlは通常、文字データ（つまり、特定の文字エンコーディングであるとマークされているソースから取得されたデータ）が存在する場合、文字のセマンティクスを想定します。場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; 有効である、符号化が一時的に無視され、各列はバイト列として扱われます。</target>
        </trans-unit>
        <trans-unit id="1b90be8b391bd63ee34d9c789dadd260ffcc448a" translate="yes" xml:space="preserve">
          <source>Perl normally buffers output so it doesn't make a system call for every bit of output. By saving up output, it makes fewer expensive system calls. For instance, in this little bit of code, you want to print a dot to the screen for every line you process to watch the progress of your program. Instead of seeing a dot for every line, Perl buffers the output and you have a long wait before you see a row of 50 dots all at once:</source>
          <target state="translated">Perl は通常、出力をバッファリングしているので、出力のビットごとにシステムコールを行いません。出力を保存することで、高価なシステムコールを少なくすることができます。例えば、この小さなコードでは、プログラムの進行状況を見るために、処理する行ごとにドットを画面に表示したいとします。行ごとにドットが表示される代わりに、Perl は出力をバッファリングし、一度に 50 個のドットの行が表示されるまで長い間待たなければなりません。</target>
        </trans-unit>
        <trans-unit id="431e8ad9293b07f5bdc791f87a08a93d077e2bfe" translate="yes" xml:space="preserve">
          <source>Perl now builds with FreeMiNT/Atari. It fails a few tests, that needs some investigation.</source>
          <target state="translated">Perl は FreeMiNT/Atari でビルドするようになりました。いくつかのテストに失敗しましたが、これは調査が必要です。</target>
        </trans-unit>
        <trans-unit id="a3e768752fac3a285306cd9e651f17f9a775de00" translate="yes" xml:space="preserve">
          <source>Perl officially stands for Practical Extraction and Report Language, except when it doesn't.</source>
          <target state="translated">Perl は正式には Practical Extraction and Report Language の略で、そうでない場合を除きます。</target>
        </trans-unit>
        <trans-unit id="b0646278b43c189bd46c39a69a1dddf12d2a1a29" translate="yes" xml:space="preserve">
          <source>Perl on ILE</source>
          <target state="translated">Perl on ILE</target>
        </trans-unit>
        <trans-unit id="880fc5c1aef63a3507fd91075a126effdad077b7" translate="yes" xml:space="preserve">
          <source>Perl on VMS can accept either VMS- or Unix-style file specifications as in either of the following:</source>
          <target state="translated">VMS上のPerlは、以下のいずれかのようにVMSまたはUnixスタイルのファイル指定を受け付けることができます。</target>
        </trans-unit>
        <trans-unit id="4e6cb5edd48ea8ec698a9fa2e92cd3f38a3692ce" translate="yes" xml:space="preserve">
          <source>Perl on VMS is discussed in &lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt; in the Perl distribution.</source>
          <target state="translated">Perl on VMSは、Perlディストリビューションの&lt;a href=&quot;perlvms&quot;&gt;perlvms&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="d5aebe7d6ab79a49ac64f2ccd625e787536b0d61" translate="yes" xml:space="preserve">
          <source>Perl on VMS supports an emulation of the forked debugger when Perl is run on a VMS system that has X11 support installed.</source>
          <target state="translated">VMS上のPerlは、X11サポートがインストールされているVMSシステム上でPerlを実行する際に、フォークされたデバッガのエミュレーションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="e4268b27ba1ef13a83b583c860e24d2f36fbf4ec" translate="yes" xml:space="preserve">
          <source>Perl on VOS (also known as OpenVOS) is discussed in</source>
          <target state="translated">VOS上のPerl (OpenVOSとしても知られています)については</target>
        </trans-unit>
        <trans-unit id="30b19fafc5c58735f6b1d4a22aac29cb87b533e0" translate="yes" xml:space="preserve">
          <source>Perl only implements the full form of casefolding, but you can access the simple folds using &lt;a href=&quot;../unicode/ucd#casefold()&quot;&gt;casefold() in Unicode::UCD&lt;/a&gt; and &lt;a href=&quot;../unicode/ucd#prop_invmap()&quot;&gt;prop_invmap() in Unicode::UCD&lt;/a&gt;. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; , 4.2 &lt;code&gt;Case-Normative&lt;/code&gt; , and 5.18 &lt;code&gt;Case Mappings&lt;/code&gt; , available at &lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http://www.unicode.org/versions/latest/&lt;/a&gt;, as well as the Case Charts available at &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/&lt;/a&gt;.</source>
          <target state="translated">Perlは完全な形式のケースフォールディングのみを実装しますが&lt;a href=&quot;../unicode/ucd#casefold()&quot;&gt;、Unicode :: UCDの&lt;/a&gt;&lt;a href=&quot;../unicode/ucd#prop_invmap()&quot;&gt;casefold（）&lt;/a&gt;およびUnicode :: UCDのprop_invmap（）を使用して単純な折り畳みにアクセスできます。ケースフォールディングの詳細については、&lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http：//www.unicode.org/versions/latest/&lt;/a&gt;で入手可能なUnicode標準、特にセクション3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; 、4.2 &lt;code&gt;Case-Normative&lt;/code&gt; 、および5.18 &lt;code&gt;Case Mappings&lt;/code&gt; を参照してください。ケースチャートは&lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/で&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="ec15f965c51c1ac480bfbe6c5c4b87645989a486" translate="yes" xml:space="preserve">
          <source>Perl only implements the full form of casefolding, but you can access the simple folds using &lt;a href=&quot;Unicode::UCD#casefold%28%29&quot;&gt;&quot;&lt;b&gt;casefold()&lt;/b&gt;&quot; in Unicode::UCD&lt;/a&gt; and &lt;a href=&quot;Unicode::UCD#prop_invmap%28%29&quot;&gt;&quot;&lt;b&gt;prop_invmap()&lt;/b&gt;&quot; in Unicode::UCD&lt;/a&gt;. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt;, 4.2 &lt;code&gt;Case-Normative&lt;/code&gt;, and 5.18 &lt;code&gt;Case Mappings&lt;/code&gt;, available at &lt;a href=&quot;https://www.unicode.org/versions/latest/&quot;&gt;https://www.unicode.org/versions/latest/&lt;/a&gt;, as well as the Case Charts available at &lt;a href=&quot;https://www.unicode.org/charts/case/&quot;&gt;https://www.unicode.org/charts/case/&lt;/a&gt;.</source>
          <target state="translated">Perlは完全な形式のケースフォールディングのみを実装しますが&lt;a href=&quot;Unicode::UCD#casefold%28%29&quot;&gt;、Unicode :: UCDの&lt;/a&gt;&lt;a href=&quot;Unicode::UCD#prop_invmap%28%29&quot;&gt;「&lt;/a&gt;&lt;b&gt;casefold（）&lt;/b&gt;」およびUnicode :: UCDの「&lt;b&gt;prop_invmap（）&lt;/b&gt;」を使用して単純なフォールドにアクセスできます。ケースフォールディングの詳細については、Unicode標準、特に&lt;a href=&quot;https://www.unicode.org/versions/latest/&quot;&gt;https://www.unicode.org/versions/latest/&lt;/a&gt;で入手可能なセクション3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; 、4.2 &lt;code&gt;Case-Normative&lt;/code&gt; 、および5.18 &lt;code&gt;Case Mappings&lt;/code&gt; 、およびケースチャートは&lt;a href=&quot;https://www.unicode.org/charts/case/&quot;&gt;https://www.unicode.org/charts/case/で&lt;/a&gt;入手できます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="03ce9ffc7efddb5ffb70fe53243d42ea4fbb733a" translate="yes" xml:space="preserve">
          <source>Perl only implements the full form of casefolding, but you can access the simple folds using &lt;a href=&quot;unicode/ucd#casefold()&quot;&gt;casefold() in Unicode::UCD&lt;/a&gt; and &lt;a href=&quot;unicode/ucd#prop_invmap()&quot;&gt;prop_invmap() in Unicode::UCD&lt;/a&gt;. For further information on casefolding, refer to the Unicode Standard, specifically sections 3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; , 4.2 &lt;code&gt;Case-Normative&lt;/code&gt; , and 5.18 &lt;code&gt;Case Mappings&lt;/code&gt; , available at &lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http://www.unicode.org/versions/latest/&lt;/a&gt;, as well as the Case Charts available at &lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/&lt;/a&gt;.</source>
          <target state="translated">Perlは完全な形式のケースフォールディングのみを実装しますが&lt;a href=&quot;unicode/ucd#casefold()&quot;&gt;、Unicode :: UCDの&lt;/a&gt;&lt;a href=&quot;unicode/ucd#prop_invmap()&quot;&gt;casefold（）&lt;/a&gt;およびUnicode :: UCDのprop_invmap（）を使用して単純な折り畳みにアクセスできます。ケースフォールディングの詳細については、&lt;a href=&quot;http://www.unicode.org/versions/latest/&quot;&gt;http：//www.unicode.org/versions/latest/&lt;/a&gt;で入手可能なUnicode標準、特にセクション3.13 &lt;code&gt;Default Case Operations&lt;/code&gt; 、4.2 &lt;code&gt;Case-Normative&lt;/code&gt; 、および5.18 &lt;code&gt;Case Mappings&lt;/code&gt; を参照してください。ケースチャートは&lt;a href=&quot;http://www.unicode.org/charts/case/&quot;&gt;http://www.unicode.org/charts/case/で&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="afa3b7b0cef4f08dacda3735ba0561143481e189" translate="yes" xml:space="preserve">
          <source>Perl operations which take a numeric argument treat that argument in one of four different ways: they may force it to one of the integer/floating/ string formats, or they may behave differently depending on the format of the operand. Forcing a numeric value to a particular format does not change the number stored in the value.</source>
          <target state="translated">数値の引数を取るPerlの操作は、4つの異なる方法のうちの1つでその引数を扱います。数値を特定のフォーマットに強制しても、値に格納されている数値は変わりません。</target>
        </trans-unit>
        <trans-unit id="2e266081b45b4d898d18421d1048baf2bfd24b32" translate="yes" xml:space="preserve">
          <source>Perl operators are documented in full in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;, but here are a few of the most common ones:</source>
          <target state="translated">Perlオペレーターは&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;で完全に文書化されていますが、最も一般的なもののいくつかを以下に示します。</target>
        </trans-unit>
        <trans-unit id="f67a6a1b456cb0e8982256ff29539f81c3619324" translate="yes" xml:space="preserve">
          <source>Perl operators have the following associativity and precedence, listed from highest precedence to lowest. Operators borrowed from C keep the same precedence relationship with each other, even where C's precedence is slightly screwy. (This makes learning Perl easier for C folks.) With very few exceptions, these all operate on scalar values only, not array values.</source>
          <target state="translated">Perl の演算子は以下のような連想性と優先順位を持っています。Cから借りてきた演算子は、Cの優先順位が若干狂っている場合でも、お互いに同じ優先順位の関係を保ちます(これにより、Cの人がPerlを学ぶのが簡単になります)。ごく少数の例外を除いて、これらの演算子はすべてスカラ値のみを対象としており、配列は対象としていません。</target>
        </trans-unit>
        <trans-unit id="979c77e2112ac6d101931348fcf8adccee72ed6b" translate="yes" xml:space="preserve">
          <source>Perl operators that return true or false generally return values that can be safely used as numbers. For example, the relational operators in this section and the equality operators in the next one return &lt;code&gt;1&lt;/code&gt; for true and a special version of the defined empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt; , which counts as a zero but is exempt from warnings about improper numeric conversions, just as &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; is.</source>
          <target state="translated">trueまたはfalseを返すPerl演算子は、通常、数値として安全に使用できる値を返します。たとえば、このセクションの関係演算子および等価演算子次のリターンで &lt;code&gt;1&lt;/code&gt; 真のためにと定義された空の文字列、の特別バージョン &lt;code&gt;&quot;&quot;&lt;/code&gt; ゼロとしてカウントされますが、不適切な数値変換に関する警告を免除されている、ちょうど &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="677a0f4b34098e3ab8a940f648ce50dea2fe1b35" translate="yes" xml:space="preserve">
          <source>Perl operators that return true or false generally return values that can be safely used as numbers. For example, the relational operators in this section and the equality operators in the next one return &lt;code&gt;1&lt;/code&gt; for true and a special version of the defined empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt;, which counts as a zero but is exempt from warnings about improper numeric conversions, just as &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; is.</source>
          <target state="translated">trueまたはfalseを返すPerl演算子は、通常、数値として安全に使用できる値を返します。たとえば、このセクションの関係演算子および等価演算子次のリターンで &lt;code&gt;1&lt;/code&gt; 真のためにと定義された空の文字列、の特別バージョン &lt;code&gt;&quot;&quot;&lt;/code&gt; ゼロとしてカウントされますが、不適切な数値変換に関する警告を免除されている、ちょうど &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="93117613e1464552c05f74263a894f716b02c8a7" translate="yes" xml:space="preserve">
          <source>Perl packages may be nested inside other package names, so we can have package names containing &lt;code&gt;::&lt;/code&gt; . But if we used that package name directly as a filename it would make for unwieldy or impossible filenames on some systems. Therefore, if a module's name is, say, &lt;code&gt;Text::Soundex&lt;/code&gt; , then its definition is actually found in the library file</source>
          <target state="translated">Perlパッケージは他のパッケージ名の内部にネストされる可能性があるため、パッケージ名に &lt;code&gt;::&lt;/code&gt; を含めることができます。しかし、そのパッケージ名をファイル名として直接使用した場合、一部のシステムでは扱いにくいまたは不可能なファイル名が作成されます。したがって、モジュールの名前がたとえば &lt;code&gt;Text::Soundex&lt;/code&gt; 場合、その定義は実際にはライブラリファイルにあります。</target>
        </trans-unit>
        <trans-unit id="216db03ab75c4e916969b56dae5407299d192ab7" translate="yes" xml:space="preserve">
          <source>Perl packages may be nested inside other package names, so we can have package names containing &lt;code&gt;::&lt;/code&gt;. But if we used that package name directly as a filename it would make for unwieldy or impossible filenames on some systems. Therefore, if a module's name is, say, &lt;code&gt;Text::Soundex&lt;/code&gt;, then its definition is actually found in the library file</source>
          <target state="translated">Perlパッケージは他のパッケージ名の中にネストされている可能性があるため、 &lt;code&gt;::&lt;/code&gt; を含むパッケージ名を持つことができます。ただし、そのパッケージ名をファイル名として直接使用すると、一部のシステムでは扱いにくい、または不可能なファイル名になります。したがって、モジュールの名前がたとえば &lt;code&gt;Text::Soundex&lt;/code&gt; 場合、その定義は実際にはライブラリファイルにあります。</target>
        </trans-unit>
        <trans-unit id="07d7fb295d5657e201671476cb88a17b37a54746" translate="yes" xml:space="preserve">
          <source>Perl pragma for deprecating the core version of a module</source>
          <target state="translated">モジュールのコアバージョンを非推奨にするための Perl プラグマ</target>
        </trans-unit>
        <trans-unit id="b96fac04186779fda96ab3e9ac74bb9de167238d" translate="yes" xml:space="preserve">
          <source>Perl pragma for deprecating the inclusion of a module in core</source>
          <target state="translated">コアにモジュールを含めることを非推奨とする Perl のプラグマ</target>
        </trans-unit>
        <trans-unit id="4ff2d9baf63466a443978236f7b7cb1cc8bd8db5" translate="yes" xml:space="preserve">
          <source>Perl prefers to &lt;code&gt;dup&lt;/code&gt; the new low-level descriptor to the descriptor used by the existing PerlIO. This may become the behaviour of this function in the future.</source>
          <target state="translated">Perlは、既存のPerlIOが使用する記述子よりも新しい低レベル記述子を &lt;code&gt;dup&lt;/code&gt; することを好みます。これは、将来この関数の動作になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c2ad17b9a58ab83af39d92dc2a0f734f0896297e" translate="yes" xml:space="preserve">
          <source>Perl programs are just plain text, so any editor will do.</source>
          <target state="translated">Perlのプログラムはただのテキストなので、どんなエディタでもできます。</target>
        </trans-unit>
        <trans-unit id="14cf61d2a257794aa1f24ba3ebb61b26c9fd6acc" translate="yes" xml:space="preserve">
          <source>Perl promises, that if we ever add regular expression pattern metacharacters to the dozen already defined (&lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt; ), that we will only use ones that have the Pattern_Syntax property. Perl also promises, that if we ever add characters that are considered to be white space in regular expressions (currently mostly affected by &lt;code&gt;/x&lt;/code&gt;), they will all have the Pattern_White_Space property.</source>
          <target state="translated">Perlは、すでに定義されているダース（ &lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt; ）に正規表現パターンのメタ文字を追加する場合、Pattern_Syntaxプロパティを持つもののみを使用することを約束しています。 Perlはまた、正規表現で空白と見なされる文字（現在は主に &lt;code&gt;/x&lt;/code&gt; の影響を受ける）を追加した場合、それらすべてにPattern_White_Spaceプロパティがあることを約束します。</target>
        </trans-unit>
        <trans-unit id="327076e1125cbcba12ce50958edba776f9d04697" translate="yes" xml:space="preserve">
          <source>Perl promises, that if we ever add regular expression pattern metacharacters to the dozen already defined (&lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt;), that we will only use ones that have the Pattern_Syntax property. Perl also promises, that if we ever add characters that are considered to be white space in regular expressions (currently mostly affected by &lt;code&gt;/x&lt;/code&gt;), they will all have the Pattern_White_Space property.</source>
          <target state="translated">Perlは、すでに定義されている12個の（ &lt;code&gt;\ | ( ) [ { ^ $ * + ? .&lt;/code&gt; ）に正規表現パターンのメタ文字を追加する場合、Pattern_Syntaxプロパティを持つものだけを使用することを約束します。Perlはまた、正規表現で空白と見なされる文字（現在はほとんど &lt;code&gt;/x&lt;/code&gt; の影響を受ける）を追加すると、それらすべてにPattern_White_Spaceプロパティが含まれることを約束します。</target>
        </trans-unit>
        <trans-unit id="67b6495ec04782f446ea386cb264b80a6975aeb6" translate="yes" xml:space="preserve">
          <source>Perl provides a centralized management of these resources:</source>
          <target state="translated">Perl はこれらのリソースを集中管理します。</target>
        </trans-unit>
        <trans-unit id="d5560f27b86924c423060a2b1fc2c1981aafcb97" translate="yes" xml:space="preserve">
          <source>Perl provides a fork() keyword that corresponds to the Unix system call of the same name. On most Unix-like platforms where the fork() system call is available, Perl's fork() simply calls it.</source>
          <target state="translated">Perl は、同名の Unix システムコールに対応する fork()キーワードを提供しています。fork()システムコールが利用可能なほとんどの Unix ライクなプラットフォームでは、Perl の fork()は単にそれを呼び出します。</target>
        </trans-unit>
        <trans-unit id="de3af496d08feb146e6538a70938f9e1c88a9d41" translate="yes" xml:space="preserve">
          <source>Perl provides a mechanism for alternative namespaces to protect packages from stomping on each other's variables. In fact, there's really no such thing as a global variable in Perl. The package statement declares the compilation unit as being in the given namespace. The scope of the package declaration is from the declaration itself through the end of the enclosing block, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, or file, whichever comes first (the same scope as the my() and local() operators). Unqualified dynamic identifiers will be in this namespace, except for those few identifiers that if unqualified, default to the main package instead of the current one as described below. A package statement affects only dynamic variables--including those you've used local() on--but</source>
          <target state="translated">Perlは、パッケージが互いの変数を踏みつけないように保護するための代替名前空間のメカニズムを提供します。実際、Perlにはグローバル変数のようなものは本当にありません。 packageステートメントは、コンパイル単位を指定された名前空間にあるものとして宣言します。パッケージ宣言のスコープは、宣言自体から、それを囲むブロック、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 、またはファイルの終わりまでのいずれか（my（）およびlocal（）演算子と同じスコープ）です。修飾されていない動的識別子はこの名前空間に含まれますが、修飾されていない場合、以下で説明するように、デフォルトでは現在のパッケージではなくメインパッケージになるいくつかの識別子を除きます。 packageステートメントは、local（）を使用したものを含む動的変数のみに影響しますが、</target>
        </trans-unit>
        <trans-unit id="73112f265f6b41c74dc1c4f6ba58a9aa61493def" translate="yes" xml:space="preserve">
          <source>Perl provides a number of mechanisms to coordinate the interactions between themselves and their data, to avoid race conditions and the like. Some of these are designed to resemble the common techniques used in thread libraries such as &lt;code&gt;pthreads&lt;/code&gt; ; others are Perl-specific. Often, the standard techniques are clumsy and difficult to get right (such as condition waits). Where possible, it is usually easier to use Perlish techniques such as queues, which remove some of the hard work involved.</source>
          <target state="translated">Perlは、競合状態などを回避するために、Perlとそのデータ間の相互作用を調整するためのいくつかのメカニズムを提供します。これらの一部は、 &lt;code&gt;pthreads&lt;/code&gt; などのスレッドライブラリで使用される一般的な手法に似た設計になっています。その他はPerl固有です。多くの場合、標準的なテクニックは不格好であり、正しく実行することが困難です（条件待機など）。通常、可能な場合は、キューなどのPerlishテクニックを使用する方が簡単です。</target>
        </trans-unit>
        <trans-unit id="2033b0d4b88c366862ed2f9bb35924fa40e4eea4" translate="yes" xml:space="preserve">
          <source>Perl provides a number of mechanisms to coordinate the interactions between themselves and their data, to avoid race conditions and the like. Some of these are designed to resemble the common techniques used in thread libraries such as &lt;code&gt;pthreads&lt;/code&gt;; others are Perl-specific. Often, the standard techniques are clumsy and difficult to get right (such as condition waits). Where possible, it is usually easier to use Perlish techniques such as queues, which remove some of the hard work involved.</source>
          <target state="translated">Perlは、競合状態などを回避するために、Perlとそのデータ間の相互作用を調整するための多くのメカニズムを提供します。これらのいくつかは、 &lt;code&gt;pthreads&lt;/code&gt; などのスレッドライブラリで使用される一般的な手法に似せて設計されています。その他はPerl固有です。多くの場合、標準的な手法は不器用で正しく理解するのが困難です（条件待機など）。可能な場合は、通常、キューなどのPerlish手法を使用する方が簡単です。これにより、関連するハードワークの一部が削除されます。</target>
        </trans-unit>
        <trans-unit id="36e7e1ce7a021b749d35bdf6f3b510a2bf8dd56c" translate="yes" xml:space="preserve">
          <source>Perl provides a reasonably safe way to open a file or pipe from a setuid or setgid program: just create a child process with reduced privilege who does the dirty work for you. First, fork a child using the special &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; syntax that connects the parent and child by a pipe. Now the child resets its ID set and any other per-process attributes, like environment variables, umasks, current working directories, back to the originals or known safe values. Then the child process, which no longer has any special permissions, does the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or other system call. Finally, the child passes the data it managed to access back to the parent. Because the file or pipe was opened in the child while running under less privilege than the parent, it's not apt to be tricked into doing something it shouldn't.</source>
          <target state="translated">Perlは、setuidまたはsetgidプログラムからファイルまたはパイプを開くのに適度に安全な方法を提供します。ダーティな作業を行う特権を減らした子プロセスを作成するだけです。まず、パイプで親子を接続する特別な &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 構文を使用して子をフォークします。これで、子はIDセットと、環境変数、umasks、現在の作業ディレクトリなどの他のプロセスごとの属性を、元の値または既知の安全な値にリセットします。次に、特別な権限がなくなった子プロセスが、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; または他のシステムコールを実行します。最後に、子はアクセスするために管理したデータを親に渡します。ファイルまたはパイプは、親よりも低い特権で実行されているときに子で開かれたため、だまされてはいけないことをするように騙されがちではありません。</target>
        </trans-unit>
        <trans-unit id="6e7a421d4f41bbc8f45292eb6fb0c23e47fd47d6" translate="yes" xml:space="preserve">
          <source>Perl provides a reasonably safe way to open a file or pipe from a setuid or setgid program: just create a child process with reduced privilege who does the dirty work for you. First, fork a child using the special &lt;code&gt;open&lt;/code&gt; syntax that connects the parent and child by a pipe. Now the child resets its ID set and any other per-process attributes, like environment variables, umasks, current working directories, back to the originals or known safe values. Then the child process, which no longer has any special permissions, does the &lt;code&gt;open&lt;/code&gt; or other system call. Finally, the child passes the data it managed to access back to the parent. Because the file or pipe was opened in the child while running under less privilege than the parent, it's not apt to be tricked into doing something it shouldn't.</source>
          <target state="translated">Perlは、setuidまたはsetgidプログラムからファイルまたはパイプを開くための合理的に安全な方法を提供します。あなたに代わって汚い仕事をする権限を減らした子プロセスを作成するだけです。まず、親と子をパイプで接続する特別な &lt;code&gt;open&lt;/code&gt; 構文を使用して子をフォークします。これで、子はIDセットと、環境変数、umask、現在の作業ディレクトリなどの他のプロセスごとの属性を元の値または既知の安全な値にリセットします。次に、特別な権限を持たなくなった子プロセスが、 &lt;code&gt;open&lt;/code&gt; またはその他のシステムコールを実行します。最後に、子はアクセスできたデータを親に返します。ファイルまたはパイプは、親よりも低い特権で実行されているときに子で開かれたため、だまされてはいけないことを実行する傾向がありません。</target>
        </trans-unit>
        <trans-unit id="01b6956704a1caccc5f1a829b2f6df16370a9f29" translate="yes" xml:space="preserve">
          <source>Perl provides many macros to assist in accessing the Perl stack. Wherever possible, these macros should always be used when interfacing to Perl internals. We hope this should make the code less vulnerable to any changes made to Perl in the future.</source>
          <target state="translated">Perl は、Perl スタックへのアクセスを支援する多くのマクロを提供しています。可能な限り、Perl の内部に接続する際には常にこれらのマクロを使用してください。これにより、将来 Perl に変更が加えられた場合でも、コードが脆弱でなくなることを願っています。</target>
        </trans-unit>
        <trans-unit id="8d83d3e4ff54e649960458ab09222a8186178865" translate="yes" xml:space="preserve">
          <source>Perl provides the function &lt;code&gt;sv_chop&lt;/code&gt; to efficiently remove characters from the beginning of a string; you give it an SV and a pointer to somewhere inside the PV, and it discards everything before the pointer. The efficiency comes by means of a little hack: instead of actually removing the characters, &lt;code&gt;sv_chop&lt;/code&gt; sets the flag &lt;code&gt;OOK&lt;/code&gt; (offset OK) to signal to other functions that the offset hack is in effect, and it moves the PV pointer (called &lt;code&gt;SvPVX&lt;/code&gt; ) forward by the number of bytes chopped off, and adjusts &lt;code&gt;SvCUR&lt;/code&gt; and &lt;code&gt;SvLEN&lt;/code&gt; accordingly. (A portion of the space between the old and new PV pointers is used to store the count of chopped bytes.)</source>
          <target state="translated">Perlは、文字列の先頭から文字を効率的に削除するための関数 &lt;code&gt;sv_chop&lt;/code&gt; を提供します。 SVとPV内のどこかへのポインターを指定すると、ポインターの前のすべてが破棄されます。効率は小さなハックによってもたらされます。実際に文字を削除する代わりに、 &lt;code&gt;sv_chop&lt;/code&gt; はフラグ &lt;code&gt;OOK&lt;/code&gt; （オフセットOK）を設定して、オフセットハックが有効であることを他の関数に通知し、PVポインター（ &lt;code&gt;SvPVX&lt;/code&gt; と呼ばれる）を前方に移動します &lt;code&gt;SvCUR&lt;/code&gt; れたバイト数によって、SvCURと &lt;code&gt;SvLEN&lt;/code&gt; を適宜調整します。 （古いPVポインターと新しいPVポインターの間のスペースの一部は、チョップされたバイトのカウントを格納するために使用されます。）</target>
        </trans-unit>
        <trans-unit id="6f5d51550851e99636a22add4af85faee83cebcf" translate="yes" xml:space="preserve">
          <source>Perl provides the function &lt;code&gt;sv_chop&lt;/code&gt; to efficiently remove characters from the beginning of a string; you give it an SV and a pointer to somewhere inside the PV, and it discards everything before the pointer. The efficiency comes by means of a little hack: instead of actually removing the characters, &lt;code&gt;sv_chop&lt;/code&gt; sets the flag &lt;code&gt;OOK&lt;/code&gt; (offset OK) to signal to other functions that the offset hack is in effect, and it moves the PV pointer (called &lt;code&gt;SvPVX&lt;/code&gt;) forward by the number of bytes chopped off, and adjusts &lt;code&gt;SvCUR&lt;/code&gt; and &lt;code&gt;SvLEN&lt;/code&gt; accordingly. (A portion of the space between the old and new PV pointers is used to store the count of chopped bytes.)</source>
          <target state="translated">Perlには、文字列の先頭から文字を効率的に削除する関数 &lt;code&gt;sv_chop&lt;/code&gt; が用意されています。 SVとPV内のどこかへのポインターを指定すると、ポインターの前のすべてが破棄されます。効率は小さなハックによってもたらされます。実際に文字を削除する代わりに、 &lt;code&gt;sv_chop&lt;/code&gt; はフラグ &lt;code&gt;OOK&lt;/code&gt; （オフセットOK）を設定して、オフセットハックが有効であることを他の関数に通知し、PVポインター（ &lt;code&gt;SvPVX&lt;/code&gt; と呼ばれる）を前方に移動します。 &lt;code&gt;SvCUR&lt;/code&gt; れたバイト数によって、それに応じてSvCURと &lt;code&gt;SvLEN&lt;/code&gt; を調整します。 （古いPVポインターと新しいPVポインターの間のスペースの一部は、切り刻まれたバイトの数を格納するために使用されます。）</target>
        </trans-unit>
        <trans-unit id="5b8c268aa39a037e84e8a60b81c199fef5923af6" translate="yes" xml:space="preserve">
          <source>Perl provides two API functions to evaluate pieces of Perl code. These are &lt;a href=&quot;perlapi#eval_sv&quot;&gt;&quot;eval_sv&quot; in perlapi&lt;/a&gt; and &lt;a href=&quot;perlapi#eval_pv&quot;&gt;&quot;eval_pv&quot; in perlapi&lt;/a&gt;.</source>
          <target state="translated">Perlは、Perlコードの一部を評価するための2つのAPI関数を提供します。これらは&lt;a href=&quot;perlapi#eval_sv&quot;&gt;はperlapiで「eval_sv」&lt;/a&gt;と&lt;a href=&quot;perlapi#eval_pv&quot;&gt;はperlapiで「eval_pv」&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9513d1ec6023b878e1b94840b432efff780b52df" translate="yes" xml:space="preserve">
          <source>Perl provides two API functions to evaluate pieces of Perl code. These are &lt;a href=&quot;perlapi#eval_sv&quot;&gt;eval_sv in perlapi&lt;/a&gt; and &lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pv in perlapi&lt;/a&gt;.</source>
          <target state="translated">Perlは、Perlコードを評価するための2つのAPI関数を提供します。これらは&lt;a href=&quot;perlapi#eval_sv&quot;&gt;eval_svではperlapi&lt;/a&gt;と&lt;a href=&quot;perlapi#eval_pv&quot;&gt;eval_pvではperlapi&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ffb39ca049ef57e14f57d4751c1d1ac0f78a02d5" translate="yes" xml:space="preserve">
          <source>Perl recognizes the POSIX character classes &lt;code&gt;[=class=]&lt;/code&gt; and &lt;code&gt;[.class.]&lt;/code&gt;, but does not (yet?) support them. Any attempt to use either construct raises an exception.</source>
          <target state="translated">PerlはPOSIX文字クラス &lt;code&gt;[=class=]&lt;/code&gt; および &lt;code&gt;[.class.]&lt;/code&gt; 認識しますが、（まだ？）サポートしていません。いずれかの構成を使用しようとすると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="07f5219960a6f7bb8d18294a65d8b9d67281a7a2" translate="yes" xml:space="preserve">
          <source>Perl recognizes the following POSIX character classes:</source>
          <target state="translated">Perlは以下のPOSIX文字クラスを認識します。</target>
        </trans-unit>
        <trans-unit id="d60612137eda4aa3ff39ca1a5e535cbfedf6b435" translate="yes" xml:space="preserve">
          <source>Perl regexps also support backreferences, lookaheads, and all kinds of other complex details. Read all about them in &lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt;, &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;, and &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="translated">Perl正規表現は、後方参照、先読み、およびその他のあらゆる種類の複雑な詳細もサポートします。それらに関するすべてを&lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt;、&lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;、および&lt;a href=&quot;perlre&quot;&gt;perlreで読んでください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa3e77c17de568fb7fabddc21617e1e18fce47ab" translate="yes" xml:space="preserve">
          <source>Perl regexps can handle more than just the standard ASCII character set. Perl supports</source>
          <target state="translated">Perl の正規表現は、標準の ASCII 文字セットだけでなく、それ以上のものを扱うことができます。Perl は以下をサポートしています。</target>
        </trans-unit>
        <trans-unit id="d440475b129d32904159fb94e727dbef0d4e25d9" translate="yes" xml:space="preserve">
          <source>Perl regular expressions have a large range of character classes. Some of the character classes are written as a backslash sequence. We will briefly discuss those here; full details of character classes can be found in &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">Perl正規表現には、さまざまな文字クラスがあります。一部の文字クラスは、バックスラッシュシーケンスとして記述されます。ここではそれらについて簡単に説明します。文字クラスの詳細については、&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclassを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8ae626456b6ab696d8a1f8c512b2605f948687bc" translate="yes" xml:space="preserve">
          <source>Perl relies on the underlying system for the implementation of &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt;; on some systems, the generated numbers are not random enough (especially on Windows : see &lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http://www.perlmonks.org/?node_id=803632&lt;/a&gt;). Several CPAN modules in the &lt;code&gt;Math&lt;/code&gt; namespace implement better pseudorandom generators; see for example &lt;a href=&quot;http://search.cpan.org/perldoc/Math::Random::MT&quot;&gt;Math::Random::MT&lt;/a&gt; (&quot;Mersenne Twister&quot;, fast), or &lt;a href=&quot;http://search.cpan.org/perldoc/Math::TrulyRandom&quot;&gt;Math::TrulyRandom&lt;/a&gt; (uses the imperfections in the system's timer to generate random numbers, which is rather slow). More algorithms for random numbers are described in &quot;Numerical Recipes in C&quot; at &lt;a href=&quot;http://www.nr.com/&quot;&gt;http://www.nr.com/&lt;/a&gt;</source>
          <target state="translated">Perlは、 &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/srand&quot;&gt;srand&lt;/a&gt;&lt;/code&gt; の実装について、基礎となるシステムに依存しています。一部のシステムでは、生成された数値が十分にランダムではありません（特にWindowsの場合：&lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http&lt;/a&gt; : //www.perlmonks.org/?node_id=803632を参照）。 &lt;code&gt;Math&lt;/code&gt; 名前空間のいくつかのCPANモジュールは、より優れた疑似乱数ジェネレーターを実装しています。たとえば、&lt;a href=&quot;http://search.cpan.org/perldoc/Math::Random::MT&quot;&gt;Math :: Random :: MT&lt;/a&gt;（ &quot;Mersenne Twister&quot;、高速）、または&lt;a href=&quot;http://search.cpan.org/perldoc/Math::TrulyRandom&quot;&gt;Math :: TrulyRandom&lt;/a&gt;（システムのタイマーの不完全性を使用して、かなり遅い乱数を生成する）を参照してください。乱数のその他のアルゴリズムについては、&lt;a href=&quot;http://www.nr.com/&quot;&gt;http：&lt;/a&gt; //www.nr.com/の「Numerical Recipes in C」を参照してください。</target>
        </trans-unit>
        <trans-unit id="3f12ff9832e26034f1b71096dd8784c68818bdcd" translate="yes" xml:space="preserve">
          <source>Perl relies on the underlying system for the implementation of &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;srand&lt;/code&gt;; on some systems, the generated numbers are not random enough (especially on Windows : see &lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http://www.perlmonks.org/?node_id=803632&lt;/a&gt;). Several CPAN modules in the &lt;code&gt;Math&lt;/code&gt; namespace implement better pseudorandom generators; see for example &lt;a href=&quot;Math::Random::MT&quot;&gt;Math::Random::MT&lt;/a&gt; (&quot;Mersenne Twister&quot;, fast), or &lt;a href=&quot;Math::TrulyRandom&quot;&gt;Math::TrulyRandom&lt;/a&gt; (uses the imperfections in the system's timer to generate random numbers, which is rather slow). More algorithms for random numbers are described in &quot;Numerical Recipes in C&quot; at &lt;a href=&quot;http://www.nr.com/&quot;&gt;http://www.nr.com/&lt;/a&gt;</source>
          <target state="translated">Perlは、 &lt;code&gt;rand&lt;/code&gt; と &lt;code&gt;srand&lt;/code&gt; の実装を基盤となるシステムに依存しています。一部のシステムでは、生成される数値が十分にランダムではありません（特に、Windowsの場合：&lt;a href=&quot;http://www.perlmonks.org/?node_id=803632&quot;&gt;http&lt;/a&gt;：//www.perlmonks.org/？node_id = 803632を参照してください）。 &lt;code&gt;Math&lt;/code&gt; 名前空間のいくつかのCPANモジュールは、より優れた疑似乱数ジェネレーターを実装しています。たとえば、&lt;a href=&quot;Math::Random::MT&quot;&gt;Math :: Random :: MT&lt;/a&gt;（ &quot;Mersenne Twister&quot;、fast）または&lt;a href=&quot;Math::TrulyRandom&quot;&gt;Math :: TrulyRandom&lt;/a&gt;（システムのタイマーの欠陥を使用して乱数を生成しますが、かなり遅い）を参照してください。乱数のその他のアルゴリズムについては、&lt;a href=&quot;http://www.nr.com/&quot;&gt;http：&lt;/a&gt; //www.nr.com/の「NumericalRecipesinC」で説明されています。</target>
        </trans-unit>
        <trans-unit id="5e8b101afd4e3699b22d8dd044a2afe59a2e5739" translate="yes" xml:space="preserve">
          <source>Perl requires braces following &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;foreach&lt;/code&gt; , etc.</source>
          <target state="translated">Perlでは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;foreach&lt;/code&gt; などの後に中括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="da6e3123b7e4ffb6fc9eae18f7c7e43c09ee3028" translate="yes" xml:space="preserve">
          <source>Perl requires braces following &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, etc.</source>
          <target state="translated">Perlでは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;foreach&lt;/code&gt; などの後に中括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="baeb92759bd60617241bdfef388270964c6488e2" translate="yes" xml:space="preserve">
          <source>Perl requires semicolons to separate statements.</source>
          <target state="translated">Perl は文を区切るためにセミコロンを必要とします。</target>
        </trans-unit>
        <trans-unit id="e643a23b551f0082edc8c39f350e57fa7da27bfb" translate="yes" xml:space="preserve">
          <source>Perl resolves this dilemma by transparently calling a copy constructor before calling a method defined to implement a mutator (&lt;code&gt;--&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; , and so on.). In the above example, when Perl reaches the decrement statement, it makes a copy of the object data in &lt;code&gt;$a&lt;/code&gt; and assigns to &lt;code&gt;$a&lt;/code&gt; a reference to the copied data. Only then does it call &lt;code&gt;decr()&lt;/code&gt; , which alters the copied data, leaving &lt;code&gt;$b&lt;/code&gt; unchanged. Thus the object metaphor is preserved as far as possible, while mathemagical operations still work according to the arithmetic metaphor.</source>
          <target state="translated">Perlは、ミューテーター（ &lt;code&gt;--&lt;/code&gt; 、 &lt;code&gt;+=&lt;/code&gt; など）を実装するために定義されたメソッドを呼び出す前に、コピーコンストラクターを透過的に呼び出すことによって、このジレンマを解決します。Perlはデクリメント文に達したときに上記の例では、それは、オブジェクト内のデータのコピーを行う &lt;code&gt;$a&lt;/code&gt; とに割り当てる &lt;code&gt;$a&lt;/code&gt; コピーされたデータへの参照。それからのみ、それは &lt;code&gt;decr()&lt;/code&gt; を呼び出し、コピーされたデータを変更して、 &lt;code&gt;$b&lt;/code&gt; 変更しません。したがって、オブジェクトのメタファーは可能な限り保存されますが、数学演算は算術メタファーに従って機能します。</target>
        </trans-unit>
        <trans-unit id="1602dd24bebfca9ce4871cb5fb94135e37cae349" translate="yes" xml:space="preserve">
          <source>Perl resolves this dilemma by transparently calling a copy constructor before calling a method defined to implement a mutator (&lt;code&gt;--&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, and so on.). In the above example, when Perl reaches the decrement statement, it makes a copy of the object data in &lt;code&gt;$a&lt;/code&gt; and assigns to &lt;code&gt;$a&lt;/code&gt; a reference to the copied data. Only then does it call &lt;code&gt;decr()&lt;/code&gt;, which alters the copied data, leaving &lt;code&gt;$b&lt;/code&gt; unchanged. Thus the object metaphor is preserved as far as possible, while mathemagical operations still work according to the arithmetic metaphor.</source>
          <target state="translated">Perlは、ミューテーターを実装するために定義されたメソッド（ &lt;code&gt;--&lt;/code&gt; 、 &lt;code&gt;+=&lt;/code&gt; など）を呼び出す前に、コピーコンストラクターを透過的に呼び出すことによって、このジレンマを解決します。上記の例では、Perlがデクリメントステートメントに到達 &lt;code&gt;$a&lt;/code&gt; と、$ a内のオブジェクトデータのコピーを作成し、コピーされたデータへの参照を &lt;code&gt;$a&lt;/code&gt; 割り当てます。その後、 &lt;code&gt;decr()&lt;/code&gt; を呼び出します。これにより、コピーされたデータが変更され、 &lt;code&gt;$b&lt;/code&gt; 変更されません。したがって、オブジェクトのメタファーは可能な限り保持されますが、数学的な操作は算術メタファーに従って機能します。</target>
        </trans-unit>
        <trans-unit id="e718ff2371b8bf00697a05f6ee1339b450bff042" translate="yes" xml:space="preserve">
          <source>Perl runs &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement at run-time. Once Perl loads, compiles, and runs the file, it doesn't do anything else. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement is the same as a &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; run at compile-time, but Perl also calls the &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method for the loaded package. These two are the same:</source>
          <target state="translated">Perlの実行に &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 、実行時にステートメントが必要です。Perlがファイルをロード、コンパイル、および実行すると、それ以外は何もしません。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 文は同じである &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; コンパイル時に実行されますが、Perlはまた、呼び出して &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 、ロードされたパッケージのための方法を。これら2つは同じです。</target>
        </trans-unit>
        <trans-unit id="98f089278b6995b15f2d41746ee27d2688f96f52" translate="yes" xml:space="preserve">
          <source>Perl runs &lt;code&gt;require&lt;/code&gt; statement at run-time. Once Perl loads, compiles, and runs the file, it doesn't do anything else. The &lt;code&gt;use&lt;/code&gt; statement is the same as a &lt;code&gt;require&lt;/code&gt; run at compile-time, but Perl also calls the &lt;code&gt;import&lt;/code&gt; method for the loaded package. These two are the same:</source>
          <target state="translated">Perlの実行に &lt;code&gt;require&lt;/code&gt; 、実行時にステートメントが必要です。Perlがファイルをロード、コンパイル、および実行すると、他には何もしません。 &lt;code&gt;use&lt;/code&gt; 文は同じである &lt;code&gt;require&lt;/code&gt; コンパイル時に実行されますが、Perlはまた、呼び出して &lt;code&gt;import&lt;/code&gt; 、ロードされたパッケージのための方法を。これら2つは同じです：</target>
        </trans-unit>
        <trans-unit id="49c228222cbce8f7e3a32ff65352e2b7ebaf362f" translate="yes" xml:space="preserve">
          <source>Perl runs on e-mail; there is no doubt about it. The Camel book was originally written mostly over e-mail and today Perl's development is co-ordinated through mailing lists. The largest repository of Perl mailing lists is located at &lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt;.</source>
          <target state="translated">Perlは電子メールで実行されます。それについては間違いありません。ラクダ本はもともと主に電子メールで書かれていたが、今日のPerlの開発はメーリングリストを通じて調整されている。Perlメーリングリストの最大のリポジトリは&lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.orgにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="61dbd8b3aa941e2fad4e470525c952ecca2fe9ad" translate="yes" xml:space="preserve">
          <source>Perl runs on numerous operating systems. While most of them share much in common, they also have their own unique features.</source>
          <target state="translated">Perl は多数のオペレーティングシステム上で動作します。それらのほとんどには共通点が多くありますが、独自の機能も持っています。</target>
        </trans-unit>
        <trans-unit id="421935f6afff0e32fa7e44f720a70058704e68f6" translate="yes" xml:space="preserve">
          <source>Perl runs under Unix Systems Services or USS.</source>
          <target state="translated">PerlはUnixシステムサービスまたはUSSの下で動作します。</target>
        </trans-unit>
        <trans-unit id="e81d373d15ca40f4e59a6d6a3f7cafb56ab9ed4a" translate="yes" xml:space="preserve">
          <source>Perl scripts on UNIX use the &quot;#!&quot; (a.k.a &quot;shebang&quot;) line to indicate to the OS that it should execute the file using perl. Windows has no comparable means to indicate arbitrary files are executables.</source>
          <target state="translated">UNIX上のPerlスクリプトは、&quot;#! (別名 &quot;shebang&quot;)行を使って、OSがperlを使ってファイルを実行すべきであることを示します。Windowsには、任意のファイルが実行可能ファイルであることを示すための同等の手段がありません。</target>
        </trans-unit>
        <trans-unit id="c4939ec259a60d684db202bce3bcf1de4f358448" translate="yes" xml:space="preserve">
          <source>Perl seems to allow out-of-range values (greater than 0x10FFFF). By default, out-of-range values are replaced with &lt;code&gt;U+FFFD&lt;/code&gt; (REPLACEMENT CHARACTER) when &lt;code&gt;UCA_Version&lt;/code&gt; &amp;gt;= 22, or ignored when &lt;code&gt;UCA_Version&lt;/code&gt; &amp;lt;= 20.</source>
          <target state="translated">Perlは範囲外の値（0x10FFFFより大きい）を許可するようです。デフォルトでは、範囲外の値は、 &lt;code&gt;UCA_Version&lt;/code&gt; &amp;gt; = 22の場合は &lt;code&gt;U+FFFD&lt;/code&gt; （REPLACEMENT CHARACTER）に置き換えられ、 &lt;code&gt;UCA_Version&lt;/code&gt; &amp;lt;= 20の場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="f744319952a7a0f61ea238f46c893e99d13a8174" translate="yes" xml:space="preserve">
          <source>Perl should now build using the win32/Makefile. You will need to edit that file to set</source>
          <target state="translated">これでPerlはwin32/Makefileを使ってビルドするようになりました。このファイルを編集して</target>
        </trans-unit>
        <trans-unit id="a14edbe542c4c995c5b37c95f6789009c27399cc" translate="yes" xml:space="preserve">
          <source>Perl should now build using the win32/Makefile. You will need to edit that file to set CCTYPE to one of MSVC90-MSVC142 first.</source>
          <target state="translated">これで Perl は win32/Makefile を使ってビルドできるようになりました。このファイルを編集して、CCTYPEをMSVC90-MSVC142のいずれかに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb621d78e2af41af5785030c0b682152fd53b938" translate="yes" xml:space="preserve">
          <source>Perl should now build using the win32/Makefile. You will need to edit that file to set CCTYPE to one of MSVC90FREE-MSVC120FREE first.</source>
          <target state="translated">これで Perl は win32/Makefile を使ってビルドできるようになりました。まず、CCTYPEをMSVC90FREE-MSVC120FREEのいずれかに設定するために、そのファイルを編集する必要があります。</target>
        </trans-unit>
        <trans-unit id="0ddc1cc89c294f8f7ab11f0687f3217bbc182d09" translate="yes" xml:space="preserve">
          <source>Perl should remain one language, rather than forking into a byte-oriented Perl and a character-oriented Perl.</source>
          <target state="translated">Perlは、バイト指向のPerlと文字指向のPerlに分岐するのではなく、一つの言語であり続けるべきです。</target>
        </trans-unit>
        <trans-unit id="c5c49b8b94391dce923175d25bc4e1e360818232" translate="yes" xml:space="preserve">
          <source>Perl source plays by ANSI C89 rules: no C99 (or C++) extensions. In some cases we have to take pre-ANSI requirements into consideration. You don't care about some particular platform having broken Perl? I hear there is still a strong demand for J2EE programmers.</source>
          <target state="translated">Perl のソースは ANSI C89 のルールに従っています:C99 (または C++)の拡張はありません。場合によっては、ANSI以前の要件を考慮しなければなりません。特定のプラットフォームがPerlを壊したことを気にしないのですか?J2EEプログラマの需要はまだまだあると聞いています。</target>
        </trans-unit>
        <trans-unit id="50695da7bf648a9c3f976331e85b8f6be17c044c" translate="yes" xml:space="preserve">
          <source>Perl source plays by ANSI C89 rules: no C99 (or C++) extensions. You don't care about some particular platform having broken Perl? I hear there is still a strong demand for J2EE programmers.</source>
          <target state="translated">Perl のソースは ANSI C89 のルールに従っています:C99 (または C++)の拡張はありません。特定のプラットフォームがPerlを壊したことを気にしないのですか?J2EEプログラマの需要はまだあると聞いています。</target>
        </trans-unit>
        <trans-unit id="912bb016153409bf0daae81d17c059280f97296b" translate="yes" xml:space="preserve">
          <source>Perl stack pointer), and in the handling of data on the stack when returning from an XSUB. In CODE: sections SP preserves the value which was on entry to the XSUB: SP is on the function pointer (which follows the last parameter). In PPCODE: sections SP is moved backward to the beginning of the parameter list, which allows &lt;code&gt;PUSH*()&lt;/code&gt; macros to place output values in the place Perl expects them to be when the XSUB returns back to Perl.</source>
          <target state="translated">Perlスタックポインター）、およびXSUBから戻るときのスタック上のデータの処理。コード内：セクションSPは、XSUBへの入り口にあった値を保持します。SPは、関数ポインター（最後のパラメーターに続く）にあります。PPCODEでは、セクションSPはパラメーターリストの先頭に後方に移動されます。これにより、 &lt;code&gt;PUSH*()&lt;/code&gt; マクロは、XSUBがPerlに戻ったときに、Perlが期待する場所に出力値を配置できます。</target>
        </trans-unit>
        <trans-unit id="c5c35727bb235feb64e08f5a4e4d865a3344d69d" translate="yes" xml:space="preserve">
          <source>Perl starts scripts which begin with cookies &lt;code&gt;extproc&lt;/code&gt; or &lt;code&gt;#!&lt;/code&gt; directly, without an intervention of shell. Perl uses the same algorithm to find the executable as</source>
          <target state="translated">Perlは &lt;code&gt;extproc&lt;/code&gt; または &lt;code&gt;#!&lt;/code&gt; で始まるスクリプトを開始します。シェルの介入なしに直接。Perlは、同じアルゴリズムを使用して実行可能ファイルを見つけます。</target>
        </trans-unit>
        <trans-unit id="311066088c9b05b3123661ea7b3305044bcd0edf" translate="yes" xml:space="preserve">
          <source>Perl statements end in a semi-colon:</source>
          <target state="translated">Perl 文はセミコロンで終わります。</target>
        </trans-unit>
        <trans-unit id="085142f041ce2e9d800b457019222a09cb16a58b" translate="yes" xml:space="preserve">
          <source>Perl strings are NOT the same as C strings: They may contain &lt;code&gt;NUL&lt;/code&gt; characters, whereas a C string is terminated by the first &lt;code&gt;NUL&lt;/code&gt;. That is why Perl API functions that deal with strings generally take a pointer to the first byte and either a length or a pointer to the byte just beyond the final one.</source>
          <target state="translated">Perl文字列はC文字列と同じではありません &lt;code&gt;NUL&lt;/code&gt; 文字を含めることができますが、C文字列は最初の &lt;code&gt;NUL&lt;/code&gt; で終了します。そのため、文字列を処理するPerl API関数は通常、最初のバイトへのポインタと、最後のバイトのすぐ先の長さまたはバイトへのポインタを取ります。</target>
        </trans-unit>
        <trans-unit id="a3110ac0fdedcb6602950b25f9e6691154e84e0e" translate="yes" xml:space="preserve">
          <source>Perl supports Unicode strings as of version 5.6. Such strings may contain wide characters, namely, characters whose ordinal values are greater than 255. This can cause problems for digest algorithms such as SHA that are specified to operate on sequences of bytes.</source>
          <target state="translated">Perl はバージョン 5.6 で Unicode 文字列をサポートしています。このような文字列は、幅の広い文字、すなわち序列値が 255 より大きい文字を含む可能性があります。これは、SHA のような、バイト列で動作するように指定されているダイジェストアルゴリズムで問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a81cbe4ac67faced842394ca9c16af6e77feb312" translate="yes" xml:space="preserve">
          <source>Perl supports a type of threads called interpreter threads (ithreads). These threads can be used explicitly and implicitly.</source>
          <target state="translated">Perl はインタプリタスレッド(ithreads)と呼ばれるスレッドの種類をサポートしています。これらのスレッドは明示的にも暗黙的にも使用することができます。</target>
        </trans-unit>
        <trans-unit id="b3ddd3f5c1d03839d509e6149edea808fc6cb5cb" translate="yes" xml:space="preserve">
          <source>Perl supports a very limited kind of compile-time argument checking using function prototyping. This can be declared in either the PROTO section or with a &lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;prototype attribute&lt;/a&gt;. If you declare either of</source>
          <target state="translated">Perlは、関数プロトタイピングを使用した非常に限られた種類のコンパイル時の引数チェックをサポートしています。これは、PROTOセクションまたは&lt;a href=&quot;attributes#Built-in-Attributes&quot;&gt;プロトタイプ属性&lt;/a&gt;で宣言できます。のいずれかを宣言した場合</target>
        </trans-unit>
        <trans-unit id="4e581f21aad5ef67a96d247b183e3193eac70dc7" translate="yes" xml:space="preserve">
          <source>Perl supports another method invocation syntax called &quot;indirect object&quot; notation. This syntax is called &quot;indirect&quot; because the method comes before the object it is being invoked on.</source>
          <target state="translated">Perl は、「間接オブジェクト」と呼ばれる別のメソッド呼び出し構文をサポートしています。この構文は、メソッドが呼び出されるオブジェクトの前に来るので、「間接」と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="455d7ce007e3563f3b515c14c6a68c715a128b3e" translate="yes" xml:space="preserve">
          <source>Perl supports both pre-5.6 strings of eight-bit native bytes, and strings of Unicode characters. The general principle is that Perl tries to keep its data as eight-bit bytes for as long as possible, but as soon as Unicodeness cannot be avoided, the data is transparently upgraded to Unicode. Prior to Perl v5.14.0, the upgrade was not completely transparent (see &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;&quot;The &quot;Unicode Bug&quot;&quot; in perlunicode&lt;/a&gt;), and for backwards compatibility, full transparency is not gained unless &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;) or &lt;code&gt;use 5.012&lt;/code&gt; (or higher) is selected.</source>
          <target state="translated">Perlは、5.6より前の8ビットネイティブバイトの文字列とUnicode文字の文字列の両方をサポートしています。一般的な原則として、Perlはデータを可能な限り8ビットバイトとして保持しようとしますが、Unicodeが回避できなくなるとすぐに、データは透過的にUnicodeにアップグレードされます。Perl v5.14.0より前は、アップグレードは完全に透過的ではなく（&lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;perlunicodeの「Unicodeバグ」を参照&lt;/a&gt;）、下位互換性のために、 &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; （&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;参照）または &lt;code&gt;use 5.012&lt;/code&gt; （機能を参照）を使用しない限り、完全な透過性は得られません。以上）が選択されています。</target>
        </trans-unit>
        <trans-unit id="265dfd10b5f2d39d276f9f524b9c6e80cdea3f6c" translate="yes" xml:space="preserve">
          <source>Perl supports both pre-5.6 strings of eight-bit native bytes, and strings of Unicode characters. The general principle is that Perl tries to keep its data as eight-bit bytes for as long as possible, but as soon as Unicodeness cannot be avoided, the data is transparently upgraded to Unicode. Prior to Perl v5.14.0, the upgrade was not completely transparent (see &lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;The Unicode Bug in perlunicode&lt;/a&gt;), and for backwards compatibility, full transparency is not gained unless &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'unicode_strings'&lt;/code&gt; (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;) or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; (or higher) is selected.</source>
          <target state="translated">Perlは、8ビットのネイティブバイトの5.6より前の文字列とUnicode文字の文字列の両方をサポートしています。一般的な原則として、Perlはデータを可能な限り8ビットバイトに維持しようとしますが、Unicodenessを回避できなくなるとすぐに、データは透過的にUnicodeにアップグレードされます。Perlのv5.14.0に先立ち、アップグレードが（参照、完全に透明ではなかった&lt;a href=&quot;perlunicode#The-%22Unicode-Bug%22&quot;&gt;perlunicodeを参照してくださいにUnicodeのバグを&lt;/a&gt;）、および後方互換性のために、完全な透明性がない限り、獲得されていない &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; （参照&lt;a href=&quot;feature&quot;&gt;機能&lt;/a&gt;）、または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; （またはそれ以上）であります選択されました。</target>
        </trans-unit>
        <trans-unit id="e2d84ca8811712997a8e9f3ad7161c9e75151f4e" translate="yes" xml:space="preserve">
          <source>Perl supports cross-compiling to QNX NTO through the Native Development Kit (NDK) for the Blackberry 10. This means that you can cross-compile for both ARM and x86 versions of the platform.</source>
          <target state="translated">Perl は、Blackberry 10 用のネイティブ開発キット(NDK)を介して QNX NTO へのクロスコンパイルをサポートしています。これは、プラットフォームの ARM バージョンと x86 バージョンの両方でクロスコンパイルできることを意味します。</target>
        </trans-unit>
        <trans-unit id="61c6178993abcdebf49b240f9190abe5238c4bb9" translate="yes" xml:space="preserve">
          <source>Perl supports several other ways to call methods besides the &lt;code&gt;$object-&amp;gt;method()&lt;/code&gt; usage we've seen so far.</source>
          <target state="translated">Perlは、これまでに見た &lt;code&gt;$object-&amp;gt;method()&lt;/code&gt; 使用法以外に、メソッドを呼び出す他のいくつかの方法をサポートしています。</target>
        </trans-unit>
        <trans-unit id="51aafa2b4885796ac3ebbd5ae9ad8631e2f17f44" translate="yes" xml:space="preserve">
          <source>Perl supports single-byte locales that are supersets of ASCII, such as the ISO 8859 ones, and one multi-byte-type locale, UTF-8 ones, described in the next paragraph. Perl doesn't support any other multi-byte locales, such as the ones for East Asian languages.</source>
          <target state="translated">Perlは、ISO 8859のようなASCIIのスーパーセットであるシングルバイトロケールと、次の段落で説明するUTF-8のようなマルチバイトタイプのロケールをサポートしています。Perl は、東アジア言語のような他のマルチバイト型ロケールはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b921bede497b8f7b569d6ab7232a231253948127" translate="yes" xml:space="preserve">
          <source>Perl tends to add NULs, as an insurance policy, after the end of strings in SV's, so it is likely that using this macro will prevent inadvertent reading beyond the end of the input buffer, even if it is malformed UTF-8.</source>
          <target state="translated">Perl は SV の文字列の末尾に保険として NUL を追加する傾向があるので、このマクロを使用することで、たとえそれが不正な UTF-8 であっても、入力バッファの末尾を越えた不注意な読み込みを防ぐことができそうです。</target>
        </trans-unit>
        <trans-unit id="39eb141cb70a235796d1c9a3b86085a1c03895dd" translate="yes" xml:space="preserve">
          <source>Perl termcap interface</source>
          <target state="translated">Perl 用語キャップインタフェース</target>
        </trans-unit>
        <trans-unit id="29dca9ab8b1d3b8377101aae3e9cbe3e4fbc8b16" translate="yes" xml:space="preserve">
          <source>Perl threading is going to work only in Tru64 4.0 and newer releases, older operating releases like 3.2 aren't probably going to work properly with threads.</source>
          <target state="translated">Perl のスレッド処理は Tru64 4.0 と新しいリリースでのみ動作し、3.2 のような古いオペレーティング・リリースではスレッド処理が正しく動作しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="711f6c74d0066ee853703c933b2128a03d5d8197" translate="yes" xml:space="preserve">
          <source>Perl threads mailing list: &lt;a href=&quot;http://lists.perl.org/list/ithreads.html&quot;&gt;http://lists.perl.org/list/ithreads.html&lt;/a&gt;</source>
          <target state="translated">Perlスレッドメーリングリスト：&lt;a href=&quot;http://lists.perl.org/list/ithreads.html&quot;&gt;http&lt;/a&gt; : //lists.perl.org/list/ithreads.html</target>
        </trans-unit>
        <trans-unit id="cba34b4e3f85c4f737c5ed55db9967c713391cb7" translate="yes" xml:space="preserve">
          <source>Perl threads mailing list: &lt;a href=&quot;https://lists.perl.org/list/ithreads.html&quot;&gt;https://lists.perl.org/list/ithreads.html&lt;/a&gt;</source>
          <target state="translated">Perlスレッドのメーリングリスト：&lt;a href=&quot;https://lists.perl.org/list/ithreads.html&quot;&gt;https&lt;/a&gt;：//lists.perl.org/list/ithreads.html</target>
        </trans-unit>
        <trans-unit id="d2559db124cb4f86fc6327b39cc58f5d846e3791" translate="yes" xml:space="preserve">
          <source>Perl tips, autodie</source>
          <target state="translated">Perl のヒント、オートダイ</target>
        </trans-unit>
        <trans-unit id="eaf5bf8a496158d3f80504dd4ad1d919275e7f1f" translate="yes" xml:space="preserve">
          <source>Perl tracks the dynamic scope by a data structure called the context stack, which is an array of &lt;code&gt;PERL_CONTEXT&lt;/code&gt; structures, and which is itself a big union for all the types of context. Whenever a new scope is entered (such as a block, a &lt;code&gt;for&lt;/code&gt; loop, or a subroutine call), a new context entry is pushed onto the stack. Similarly when leaving a block or returning from a subroutine call etc. a context is popped. Since the context stack represents the current dynamic scope, it can be searched. For example, &lt;code&gt;next LABEL&lt;/code&gt; searches back through the stack looking for a loop context that matches the label; &lt;code&gt;return&lt;/code&gt; pops contexts until it finds a sub or eval context or similar; &lt;code&gt;caller&lt;/code&gt; examines sub contexts on the stack.</source>
          <target state="translated">Perlは、 &lt;code&gt;PERL_CONTEXT&lt;/code&gt; 構造体の配列であり、それ自体がすべてのタイプのコンテキストの大きな結合であるコンテキストスタックと呼ばれるデータ構造によって動的スコープを追跡します。新しいスコープ（ブロック、 &lt;code&gt;for&lt;/code&gt; ループ、サブルーチン呼び出しなど）が入力されるたびに、新しいコンテキストエントリがスタックにプッシュされます。同様に、ブロックを離れたり、サブルーチン呼び出しなどから戻ったりすると、コンテキストがポップされます。コンテキストスタックは現在の動的スコープを表すため、検索できます。たとえば、 &lt;code&gt;next LABEL&lt;/code&gt; はスタックを検索して、ラベルに一致するループコンテキストを探します。subまたはevalコンテキストなどが見つかるまで、ポップコンテキストを &lt;code&gt;return&lt;/code&gt; ます。 &lt;code&gt;caller&lt;/code&gt; は、スタック上のサブコンテキストを調べます。</target>
        </trans-unit>
        <trans-unit id="417a3338dad2fe5b9c31529d81335ca36b2c6619" translate="yes" xml:space="preserve">
          <source>Perl under AmigaOS lacks some features of perl under UNIX because of deficiencies in the UNIX-emulation, most notably:</source>
          <target state="translated">AmigaOS下のPerlはUNIXエミュレーションの欠陥により、UNIX下のPerlのいくつかの機能を欠いています。</target>
        </trans-unit>
        <trans-unit id="6de1733b62296869d712e2db6939eb5aa3e92225" translate="yes" xml:space="preserve">
          <source>Perl under DOS lacks some features of perl under UNIX because of deficiencies in the UNIX-emulation, most notably:</source>
          <target state="translated">DOS版のPerlはUNIX版のPerlのいくつかの機能を欠いていますが、これはUNIXエミュレーションの欠陥が原因です。</target>
        </trans-unit>
        <trans-unit id="fed7e4c0f6346d8e97d2349cf02d579f8a312bef" translate="yes" xml:space="preserve">
          <source>Perl under Mac OS Classic has not been supported since before Perl 5.10 (April 2004).</source>
          <target state="translated">Mac OS ClassicのPerlは、Perl 5.10以前(2004年4月)からサポートされていません。</target>
        </trans-unit>
        <trans-unit id="fe29a7a8cb01db791e95920fcdb336a6f5bf1bcb" translate="yes" xml:space="preserve">
          <source>Perl uses &quot;full&quot; Unicode case mappings. This means that converting a single character to another case may result in a sequence of more than one character. For example, the uppercase of &lt;code&gt;&amp;szlig;&lt;/code&gt; (LATIN SMALL LETTER SHARP S) is the two character sequence &lt;code&gt;SS&lt;/code&gt;. This presents some complications The lowercase of all characters in the range 0..255 is a single character, and thus &lt;code&gt;&lt;a href=&quot;#toLOWER_L1&quot;&gt;&quot;toLOWER_L1&quot;&lt;/a&gt;&lt;/code&gt; is furnished. But, &lt;code&gt;toUPPER_L1&lt;/code&gt; can't exist, as it couldn't return a valid result for all legal inputs. Instead &lt;code&gt;&lt;a href=&quot;#toUPPER_uvchr&quot;&gt;&quot;toUPPER_uvchr&quot;&lt;/a&gt;&lt;/code&gt; has an API that does allow every possible legal result to be returned.) Likewise no other function that is crippled by not being able to give the correct results for the full range of possible inputs has been implemented here.</source>
          <target state="translated">Perlは「完全な」Unicodeケースマッピングを使用します。これは、単一の文字を別のケースに変換すると、複数の文字のシーケンスが発生する可能性があることを意味します。たとえば、 &lt;code&gt;&amp;szlig;&lt;/code&gt; （LATIN SMALL LETTER SHARP S）の大文字は、2文字のシーケンス &lt;code&gt;SS&lt;/code&gt; です。これにはいくつかの問題があります。0..255の範囲のすべての文字の小文字は単一の文字であるため、 &lt;code&gt;&lt;a href=&quot;#toLOWER_L1&quot;&gt;&quot;toLOWER_L1&quot;&lt;/a&gt;&lt;/code&gt; が提供されます。ただし、 &lt;code&gt;toUPPER_L1&lt;/code&gt; は、すべての正当な入力に対して有効な結果を返すことができなかったため、存在できません。代わりに &lt;code&gt;&lt;a href=&quot;#toUPPER_uvchr&quot;&gt;&quot;toUPPER_uvchr&quot;&lt;/a&gt;&lt;/code&gt; 可能なすべての正当な結果を返すことを可能にするAPIがあります。）同様に、可能な入力の全範囲に対して正しい結果を提供できないことによって機能しなくなる他の関数は、ここでは実装されていません。</target>
        </trans-unit>
        <trans-unit id="0c71cd98e9f081d421a495772db91702ad362132" translate="yes" xml:space="preserve">
          <source>Perl uses &lt;code&gt;\n&lt;/code&gt; to represent the &quot;logical&quot; newline, where what is logical may depend on the platform in use. In MacPerl, &lt;code&gt;\n&lt;/code&gt; always means &lt;code&gt;\015&lt;/code&gt; . On EBCDIC platforms, &lt;code&gt;\n&lt;/code&gt; could be &lt;code&gt;\025&lt;/code&gt; or &lt;code&gt;\045&lt;/code&gt; . In DOSish perls, &lt;code&gt;\n&lt;/code&gt; usually means &lt;code&gt;\012&lt;/code&gt; , but when accessing a file in &quot;text&quot; mode, perl uses the &lt;code&gt;:crlf&lt;/code&gt; layer that translates it to (or from) &lt;code&gt;\015\012&lt;/code&gt; , depending on whether you're reading or writing. Unix does the same thing on ttys in canonical mode. &lt;code&gt;\015\012&lt;/code&gt; is commonly referred to as CRLF.</source>
          <target state="translated">Perlは &lt;code&gt;\n&lt;/code&gt; を使用して「論理的な」改行を表します。論理的なものは、使用しているプラ​​ットフォームによって異なります。 MacPerlでは、 &lt;code&gt;\n&lt;/code&gt; 常に &lt;code&gt;\015&lt;/code&gt; 意味します。 EBCDICプラットフォームでは、 &lt;code&gt;\n&lt;/code&gt; は &lt;code&gt;\025&lt;/code&gt; または &lt;code&gt;\045&lt;/code&gt; ます。 DOSish perlsでは、 &lt;code&gt;\n&lt;/code&gt; は通常 &lt;code&gt;\012&lt;/code&gt; 意味しますが、「テキスト」モードでファイルにアクセスする場合、perlは、読み取りまたは書き込みのどちらであるかに応じて、ファイルを &lt;code&gt;\015\012&lt;/code&gt; に（またはそこから）変換する &lt;code&gt;:crlf&lt;/code&gt; レイヤーを使用します。 Unixは標準モードのttyで同じことを行います。 &lt;code&gt;\015\012&lt;/code&gt; は一般にCRLFと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="890fade91864c028d9bdef8ccb2172dd937cfe65" translate="yes" xml:space="preserve">
          <source>Perl uses &lt;code&gt;\n&lt;/code&gt; to represent the &quot;logical&quot; newline, where what is logical may depend on the platform in use. In MacPerl, &lt;code&gt;\n&lt;/code&gt; always means &lt;code&gt;\015&lt;/code&gt;. On EBCDIC platforms, &lt;code&gt;\n&lt;/code&gt; could be &lt;code&gt;\025&lt;/code&gt; or &lt;code&gt;\045&lt;/code&gt;. In DOSish perls, &lt;code&gt;\n&lt;/code&gt; usually means &lt;code&gt;\012&lt;/code&gt;, but when accessing a file in &quot;text&quot; mode, perl uses the &lt;code&gt;:crlf&lt;/code&gt; layer that translates it to (or from) &lt;code&gt;\015\012&lt;/code&gt;, depending on whether you're reading or writing. Unix does the same thing on ttys in canonical mode. &lt;code&gt;\015\012&lt;/code&gt; is commonly referred to as CRLF.</source>
          <target state="translated">Perlは &lt;code&gt;\n&lt;/code&gt; を使用して「論理的な」改行を表します。論理的なものは、使用しているプラ​​ットフォームによって異なります。 MacPerlでは、 &lt;code&gt;\n&lt;/code&gt; 常に &lt;code&gt;\015&lt;/code&gt; 意味します。 EBCDICプラットフォームでは、 &lt;code&gt;\n&lt;/code&gt; は &lt;code&gt;\025&lt;/code&gt; または &lt;code&gt;\045&lt;/code&gt; ます。 DOSish perlsでは、 &lt;code&gt;\n&lt;/code&gt; は通常 &lt;code&gt;\012&lt;/code&gt; 意味しますが、「テキスト」モードでファイルにアクセスする場合、perlは、読み取りまたは書き込みのどちらであるかに応じて、ファイルを &lt;code&gt;\015\012&lt;/code&gt; に（または\ 015 \ 012から）変換する &lt;code&gt;:crlf&lt;/code&gt; レイヤーを使用します。 。 Unixは、正規モードのttyで同じことを行います。 &lt;code&gt;\015\012&lt;/code&gt; は一般にCRLFと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="ef2489d6cf6b9a1519765ae5403d21cedb84ac6c" translate="yes" xml:space="preserve">
          <source>Perl uses UTF-8, internally, for most Unicode strings.</source>
          <target state="translated">Perl は内部的に、ほとんどの Unicode 文字列に UTF-8 を使用しています。</target>
        </trans-unit>
        <trans-unit id="a32f78ca0221220c37e8fdc6e6abb5de92126da7" translate="yes" xml:space="preserve">
          <source>Perl uses a reference count-driven garbage collection mechanism. SVs, AVs, or HVs (xV for short in the following) start their life with a reference count of 1. If the reference count of an xV ever drops to 0, then it will be destroyed and its memory made available for reuse.</source>
          <target state="translated">Perl は参照カウント駆動のガベージコレクション機構を使用しています。SV、AV、または HV (以下では略して xV)は、参照カウント 1 でその寿命を開始します。 もし xV の参照カウントが 0 になった場合、その xV は破棄され、そのメモリが再利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="687866e44b38320b5ab4b8c364c0ba7321b47747" translate="yes" xml:space="preserve">
          <source>Perl uses a reference count-driven garbage collection mechanism. SVs, AVs, or HVs (xV for short in the following) start their life with a reference count of 1. If the reference count of an xV ever drops to 0, then it will be destroyed and its memory made available for reuse. At the most basic internal level, reference counts can be manipulated with the following macros:</source>
          <target state="translated">Perl は参照カウント駆動のガベージコレクション機構を使用しています。SV、AV、または HV (以下では略して xV)は、参照カウントが 1 の状態で動作を開始します。 もし xV の参照カウントが 0 になった場合、その xV は破棄され、そのメモリは再利用可能な状態になります。最も基本的な内部レベルでは、以下のマクロで参照カウントを操作できます。</target>
        </trans-unit>
        <trans-unit id="ffa78748c6c02aeaa5f6c0aa0037a286831d36b3" translate="yes" xml:space="preserve">
          <source>Perl uses a simple signal handling model: the %SIG hash contains names or references of user-installed signal handlers. These handlers will be called with an argument which is the name of the signal that triggered it. A signal may be generated intentionally from a particular keyboard sequence like control-C or control-Z, sent to you from another process, or triggered automatically by the kernel when special events transpire, like a child process exiting, your own process running out of stack space, or hitting a process file-size limit.</source>
          <target state="translated">Perl は単純なシグナル処理モデルを使用します。%SIG ハッシュには、ユーザがインストールしたシグナル・ハンドラの名前または参照が含まれます。これらのハンドラは、そのトリガーとなったシグナルの名前を引数として呼び出されます。シグナルは、control-C や control-Z のような特定のキーボードシーケンスから意図的に生成されたり、他のプロセスから自分に送られたり、あるいは、子プロセスが終了したり、自分のプロセスがスタックスペースを使い果たしたり、プロセスのファイルサイズが制限されたりするような特別なイベントが発生したときに、カーネルによって自動的にトリガされることがあります。</target>
        </trans-unit>
        <trans-unit id="697496faa8f310204a7d494fa53a2d354c2af264" translate="yes" xml:space="preserve">
          <source>Perl uses a special typedef IV which is a simple signed integer type that is guaranteed to be large enough to hold a pointer (as well as an integer). Additionally, there is the UV, which is simply an unsigned IV.</source>
          <target state="translated">Perl は特別な typedef IV を使用しています。これは単純な符号付き整数型で、ポインタを保持するのに十分な大きさであることが保証されています。さらに、単に符号なしの IV である UV もあります。</target>
        </trans-unit>
        <trans-unit id="77447e8f55a3fbc6e220b03acaf3a045c7382163" translate="yes" xml:space="preserve">
          <source>Perl uses an internal type called a</source>
          <target state="translated">Perlは</target>
        </trans-unit>
        <trans-unit id="dcd23c3b2c97cdf3da72f0a14a98128b56138f99" translate="yes" xml:space="preserve">
          <source>Perl uses its own malloc() under OS/2 - interpreters are usually malloc-bound for speed, but perl is not, since its malloc is lightning-fast. Perl-memory-usage-tuned benchmarks show that Perl's malloc is 5 times quicker than EMX one. I do not have convincing data about memory footprint, but a (pretty random) benchmark showed that Perl's one is 5% better.</source>
          <target state="translated">Perl は OS/2 で独自の malloc()を使用しています-インタプリタは通常速度を上げるために malloc に縛られていますが、Perl はそうではありません。Perlのメモリ使用量を調整したベンチマークでは、PerlのmallocはEMXのものよりも5倍速いことが示されています。メモリフットプリントについての説得力のあるデータはありませんが、(かなりランダムな)ベンチマークではPerlの方が5%優れていることがわかりました。</target>
        </trans-unit>
        <trans-unit id="1739ec403c50a46c8549e731f4fbc63bb7b3c7ac" translate="yes" xml:space="preserve">
          <source>Perl uses the hardwired-or-customized shell (see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;&quot;&lt;code&gt;PERL_SH_DIR&lt;/code&gt;&quot;&lt;/a&gt;).</source>
          <target state="translated">Perlは、ハードワイヤードまたはカスタマイズされたシェルを使用します（&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;「 &lt;code&gt;PERL_SH_DIR&lt;/code&gt; 」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="aaeb3f63a0dee2460eba26dc00ff361a3a2b8977" translate="yes" xml:space="preserve">
          <source>Perl uses the hardwired-or-customized shell (see &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">Perlは、ハードワイヤードまたはカスタマイズされたシェルを使用します（ &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="7ae85ddbb739ce30e8dfb43f3f02245520739733" translate="yes" xml:space="preserve">
          <source>Perl uses the platform's C library collation functions &lt;code&gt;strcoll()&lt;/code&gt; and &lt;code&gt;strxfrm()&lt;/code&gt;. That means you get whatever they give. On some platforms, these functions work well on UTF-8 locales, giving a reasonable default collation for the code points that are important in that locale. (And if they aren't working well, the problem may only be that the locale definition is deficient, so can be fixed by using a better definition file. Unicode's definitions (see &lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;&quot;Freely available locale definitions&quot;&lt;/a&gt;) provide reasonable UTF-8 locale collation definitions.) Starting in Perl v5.26, Perl's use of these functions has been made more seamless. This may be sufficient for your needs. For more control, and to make sure strings containing any code point (not just the ones important in the locale) collate properly, the &lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode::Collate&lt;/a&gt; module is suggested.</source>
          <target state="translated">Perlは、プラットフォームのCライブラリ照合関数 &lt;code&gt;strcoll()&lt;/code&gt; および &lt;code&gt;strxfrm()&lt;/code&gt; を使用します。それはあなたが彼らが与えるものは何でも手に入れることを意味します。一部のプラットフォームでは、これらの関数はUTF-8ロケールで適切に機能し、そのロケールで重要なコードポイントに適切なデフォルトの照合順序を提供します。（そして、それらがうまく機能しない場合、問題はロケール定義が不足していることだけである可能性があるため、より良い定義ファイルを使用して修正できます。Unicodeの定義（&lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;「無料で利用可能なロケール定義」を参照）&lt;/a&gt;）妥当なUTF-8ロケール照合定義を提供します。）Perl v5.26以降、Perlによるこれらの関数の使用がよりシームレスになりました。これはあなたのニーズには十分かもしれません。より詳細に制御し、コードポイント（ロケールで重要なものだけでなく）を含む文字列が正しく照合されるようにするために、&lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode :: Collat​​e&lt;/a&gt;モジュールをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f56985ba618cbe018e4fc2adbd42f3a731d5d38f" translate="yes" xml:space="preserve">
          <source>Perl uses the same mechanism to produce &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , etc, so you also pay a price for each pattern that contains capturing parentheses. (To avoid this cost while retaining the grouping behaviour, use the extended regular expression &lt;code&gt;(?: ... )&lt;/code&gt; instead.) But if you never use &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$`&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt; , then patterns</source>
          <target state="translated">Perlは同じメカニズムを使用して &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; などを生成するため、キャプチャ括弧を含む各パターンにも料金を支払います。（グループ化動作を維持しながらこのコストを回避するには、代わりに拡張正規表現 &lt;code&gt;(?: ... )&lt;/code&gt; 使用します。）ただし、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、 &lt;code&gt;$`&lt;/code&gt; または &lt;code&gt;$'&lt;/code&gt; 使用しない場合は、パターン</target>
        </trans-unit>
        <trans-unit id="fd3d29794e28820446964a33391fd6afd6169a0d" translate="yes" xml:space="preserve">
          <source>Perl uses the same mechanism to produce &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;,</source>
          <target state="translated">Perlは同じメカニズムを使用して、 &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、を生成します。</target>
        </trans-unit>
        <trans-unit id="729ae7be2e299ed898ba24317c3f470da4a89862" translate="yes" xml:space="preserve">
          <source>Perl v5.6.0 introduced lexical control over the handling of warnings by category. The &lt;code&gt;warnings&lt;/code&gt; pragma generally replaces the command line flag &lt;b&gt;-w&lt;/b&gt;. Documentation on the use of lexical warnings, once partly found in this document, is now found in the &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; documentation.</source>
          <target state="translated">Perl v5.6.0では、カテゴリごとの警告の処理に対する字句制御が導入されました。 &lt;code&gt;warnings&lt;/code&gt; プラグマは、一般的に、コマンドラインフラグ置き換え&lt;b&gt;-wを&lt;/b&gt;。かつてこのドキュメントで部分的に発見されていた、語彙の警告の使用&lt;a href=&quot;warnings&quot;&gt;に関する&lt;/a&gt;ドキュメントは、現在警告ドキュメントに含まれています。</target>
        </trans-unit>
        <trans-unit id="ed16c3492238f59d6acc4b17eee61789dc827788" translate="yes" xml:space="preserve">
          <source>Perl v5.8 and better allow extended Unicode characters in strings. Such strings cannot be encoded directly, as the base64 encoding is only defined for single-byte characters. The solution is to use the Encode module to select the byte encoding you want. For example:</source>
          <target state="translated">Perl v5.8 以降では、文字列内の拡張 Unicode 文字を使用できるようになりました。このような文字列は、base64 エンコーディングがシングルバイト文字に対してのみ定義されているため、直接エンコードすることはできません。解決策は、Encode モジュールを使用して、必要なバイトエンコーディングを選択することです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fac662f37a6502961fed43d288ed81deaf631ca7" translate="yes" xml:space="preserve">
          <source>Perl v5.8 and better allow extended Unicode characters in strings. Such strings cannot be encoded directly, as the quoted-printable encoding is only defined for single-byte characters. The solution is to use the Encode module to select the byte encoding you want. For example:</source>
          <target state="translated">Perl v5.8 以降では、文字列の中に拡張 Unicode 文字を入れることができます。このような文字列は、引用符で印刷可能なエンコーディングがシングルバイト文字に対してのみ定義されているため、直接エンコードすることはできません。解決策は、Encode モジュールを使用して、必要なバイトエンコーディングを選択することです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ca07f22517f53e73e435cde9502974d6bc1e648d" translate="yes" xml:space="preserve">
          <source>Perl variable names may also be a sequence of digits or a single punctuation or control character (with the literal control character form deprecated). These names are all reserved for special uses by Perl; for example, the all-digits names are used to hold data captured by backreferences after a regular expression match. Perl has a special syntax for the single-control-character names: It understands &lt;code&gt;^X&lt;/code&gt; (caret &lt;code&gt;X&lt;/code&gt; ) to mean the control-&lt;code&gt;X&lt;/code&gt; character. For example, the notation &lt;code&gt;$^W&lt;/code&gt; (dollar-sign caret &lt;code&gt;W&lt;/code&gt; ) is the scalar variable whose name is the single character control-&lt;code&gt;W&lt;/code&gt; . This is better than typing a literal control-&lt;code&gt;W&lt;/code&gt; into your program.</source>
          <target state="translated">Perl変数名は、一連の数字または単一の句読点または制御文字（リテラル制御文字形式は非推奨）の場合もあります。これらの名前はすべて、Perlによる特別な使用のために予約されています。たとえば、すべて数字の名前は、正規表現の一致後に後方参照によってキャプチャされたデータを保持するために使用されます。 Perlには、単一の制御文字名に特別な構文があります。それは、 &lt;code&gt;^X&lt;/code&gt; （脱字記号 &lt;code&gt;X&lt;/code&gt; ）が制御 &lt;code&gt;X&lt;/code&gt; 文字を意味することを理解します。たとえば、表記 &lt;code&gt;$^W&lt;/code&gt; （ドル記号キャレット &lt;code&gt;W&lt;/code&gt; ）は、名前が1文字のcontrol- &lt;code&gt;W&lt;/code&gt; であるスカラー変数です。これは、リテラルコントロール &lt;code&gt;W&lt;/code&gt; をプログラムに入力するよりも優れています。</target>
        </trans-unit>
        <trans-unit id="939e5e17b46e5bec2f5d706c2937023945ced9ed" translate="yes" xml:space="preserve">
          <source>Perl variable names may also be a sequence of digits, a single punctuation character, or the two-character sequence: &lt;code&gt;^&lt;/code&gt; (caret or CIRCUMFLEX ACCENT) followed by any one of the characters &lt;code&gt;[][A-Z^_?\]&lt;/code&gt;. These names are all reserved for special uses by Perl; for example, the all-digits names are used to hold data captured by backreferences after a regular expression match.</source>
          <target state="translated">Perl変数名は、数字のシーケンス、単一の句読文字、または2文字のシーケンス： &lt;code&gt;^&lt;/code&gt; （キャレットまたはCIRCUMFLEX ACCENT）の後に任意の文字 &lt;code&gt;[][A-Z^_?\]&lt;/code&gt; 続けることもできます。これらの名前はすべて、Perlによる特別な使用のために予約されています。たとえば、すべての数字の名前は、正規表現の一致後に後方参照によってキャプチャされたデータを保持するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ed35d8a6334fde91537a85bc31a0ea827797100e" translate="yes" xml:space="preserve">
          <source>Perl variable types</source>
          <target state="translated">Perl 変数型</target>
        </trans-unit>
        <trans-unit id="4045947434895b417a6c84aaed4fd5f8d36c865a" translate="yes" xml:space="preserve">
          <source>Perl variables</source>
          <target state="translated">Perl 変数</target>
        </trans-unit>
        <trans-unit id="c155457483cd87781fd4429cf68e8cc70eecc55b" translate="yes" xml:space="preserve">
          <source>Perl versions before 5.8 had in its C source code signal handlers which would catch the signal and possibly run a Perl function that you had set in &lt;code&gt;%SIG&lt;/code&gt; . This violated the rules of signal handling at that level causing perl to dump core. Since version 5.8.0, perl looks at &lt;code&gt;%SIG&lt;/code&gt;&lt;b&gt;after&lt;/b&gt; the signal has been caught, rather than while it is being caught. Previous versions of this answer were incorrect.</source>
          <target state="translated">5.8より前のPerlバージョンには、Cソースコードにシグナルハンドラーがあり、シグナルをキャッチし、 &lt;code&gt;%SIG&lt;/code&gt; で設定したPerl関数を実行する可能性があります。これは、そのレベルでの信号処理の規則に違反し、perlがコアをダンプする原因となりました。バージョン5.8.0以降、perlはシグナルがキャッチされている間ではなく、シグナルがキャッチされた&lt;b&gt;後&lt;/b&gt;に &lt;code&gt;%SIG&lt;/code&gt; を調べます。この回答の以前のバージョンは正しくありませんでした。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="89a169d5ba146feda33d133d78a5e42e73c7c504" translate="yes" xml:space="preserve">
          <source>Perl versions before 5.8 had in its C source code signal handlers which would catch the signal and possibly run a Perl function that you had set in &lt;code&gt;%SIG&lt;/code&gt;. This violated the rules of signal handling at that level causing perl to dump core. Since version 5.8.0, perl looks at &lt;code&gt;%SIG&lt;/code&gt;&lt;b&gt;after&lt;/b&gt; the signal has been caught, rather than while it is being caught. Previous versions of this answer were incorrect.</source>
          <target state="translated">5.8より前のPerlバージョンでは、Cソースコードにシグナルハンドラーがあり、シグナルをキャッチして、 &lt;code&gt;%SIG&lt;/code&gt; で設定したPerl関数を実行する可能性があります。これは、そのレベルでの信号処理のルールに違反し、perlがコアをダンプしました。バージョン5.8.0以降、perlはシグナルがキャッチされている間ではなく、シグナルがキャッチされた&lt;b&gt;後&lt;/b&gt;に &lt;code&gt;%SIG&lt;/code&gt; を調べます。この回答の以前のバージョンは正しくありませんでした。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8eacc0652f9a68bdddb6fbf37bd76bc666b4e50b" translate="yes" xml:space="preserve">
          <source>Perl waits for the subprocess to complete before continuing execution in the current process. As described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, the return value of &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is a fake &quot;status&quot; which follows POSIX semantics unless the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; is in effect; see the description of &lt;code&gt;$?&lt;/code&gt; in this document for more detail.</source>
          <target state="translated">Perlはサブプロセスが完了するのを待ってから、現在のプロセスで実行を続けます。&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;で説明されているように、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; の戻り値は、プラグマ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; ない限り、POSIXセマンティクスに従う偽の「ステータス」です。 &lt;code&gt;$?&lt;/code&gt; の説明を参照してください。詳細については、このドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="76b6739e84bfe97e715bfa0d21f10031957c9f2e" translate="yes" xml:space="preserve">
          <source>Perl waits for the subprocess to complete before continuing execution in the current process. As described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, the return value of &lt;code&gt;system&lt;/code&gt; is a fake &quot;status&quot; which follows POSIX semantics unless the pragma &lt;code&gt;use vmsish 'status'&lt;/code&gt; is in effect; see the description of &lt;code&gt;$?&lt;/code&gt; in this document for more detail.</source>
          <target state="translated">Perlは、サブプロセスが完了するのを待ってから、現在のプロセスで実行を続行します。&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;で説明されているように、 &lt;code&gt;system&lt;/code&gt; の戻り値は、プラグマ &lt;code&gt;use vmsish 'status'&lt;/code&gt; が有効でない限り、POSIXセマンティクスに従う偽の &quot;status&quot;です。 &lt;code&gt;$?&lt;/code&gt; の説明を参照してください？詳細については、このドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="77bc7bc2d999572b3218f851bcc9845dccf95ea0" translate="yes" xml:space="preserve">
          <source>Perl was born in Unix and can therefore access all common Unix system calls. In non-Unix environments, the functionality of some Unix system calls may not be available or details of the available functionality may differ slightly. The Perl functions affected by this are:</source>
          <target state="translated">PerlはUnixで生まれたため、一般的なUnixシステムコールにアクセスすることができます。Unix 以外の環境では、一部の Unix システムコールの機能は利用できないかもしれませんし、利用可能な機能の詳細は若干異なるかもしれません。この影響を受けるPerlの関数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="749163e214f8798aa3cc386d45ba1c2b25237249" translate="yes" xml:space="preserve">
          <source>Perl was originally a language optimized for scanning arbitrary text files, extracting information from those text files, and printing reports based on that information. It quickly became a good language for many system management tasks. Over the years, Perl has grown into a general-purpose programming language. It's widely used for everything from quick &quot;one-liners&quot; to full-scale application development.</source>
          <target state="translated">Perlは元々、任意のテキストファイルをスキャンし、それらのテキストファイルから情報を抽出し、その情報に基づいてレポートを印刷するために最適化された言語でした。それはすぐに多くのシステム管理タスクに適した言語になりました。長い年月をかけて、Perlは汎用プログラミング言語へと成長しました。素早い「ワンライナー」から本格的なアプリケーション開発まで、幅広く利用されています。</target>
        </trans-unit>
        <trans-unit id="97d7a9a879c5c36fd28bdf27f2f4d6a7f1d3b405" translate="yes" xml:space="preserve">
          <source>Perl was originally written to handle US-ASCII only (that is characters whose ordinal numbers are in the range 0 - 127). And documentation and comments may still use the term ASCII, when sometimes in fact the entire range from 0 - 255 is meant.</source>
          <target state="translated">Perl はもともと US-ASCII (つまり、序数が 0 から 127 の範囲にある文字)のみを扱うように書かれていました。また、ドキュメントやコメントではASCIIという用語が使われていますが、実際には0から255までの全範囲を意味することもあります。</target>
        </trans-unit>
        <trans-unit id="bb45aa3bdb1623dc3032bd795cae4fbe7d4a4df0" translate="yes" xml:space="preserve">
          <source>Perl was ported to Mac OS by Matthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;. Chris Nandor &amp;lt;pudge@pobox.com&amp;gt; continued development and maintenance for the duration of the port's life.</source>
          <target state="translated">PerlはMatthias Neeracher &amp;lt;neeracher@mac.com&amp;gt;によってMac OSに移植されました。Chris Nandor &amp;lt;pudge@pobox.com&amp;gt;は、港の寿命の間、開発と保守を続けました。</target>
        </trans-unit>
        <trans-unit id="5ead554bbd070f695e13f79404f4e374bc4948d2" translate="yes" xml:space="preserve">
          <source>Perl websites come in a variety of forms, but they fit into two large categories: forums and news websites. There are many Perl-related websites, so only a few of the community's largest are mentioned here.</source>
          <target state="translated">Perl のウェブサイトには様々な形がありますが、フォーラムとニュースサイトの 2 つの大きなカテゴリに分類されます。Perl に関連したウェブサイトはたくさんありますが、ここではコミュニティの中で最大のものをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="96b1e3be8ed57ad80c83e18b4ef34638cdbe949f" translate="yes" xml:space="preserve">
          <source>Perl will always interpret this as a method call.</source>
          <target state="translated">Perl は常にこれをメソッドコールとして解釈します。</target>
        </trans-unit>
        <trans-unit id="108590eaf1947f78469e9a64442a6238023bfc97" translate="yes" xml:space="preserve">
          <source>Perl will always match at the earliest possible point in the string:</source>
          <target state="translated">Perl は常に文字列の中で可能な限り早い時点でマッチします。</target>
        </trans-unit>
        <trans-unit id="dab60b10c40a3d1c155299bacd4f38f02082cabc" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perlは、forkを実行する可能性のある操作の前に、出力用に開いているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;../perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （英語の$ AUTOFLUSH）または開いている &lt;code&gt;IO::Handle&lt;/code&gt; でIO :: Handleの &lt;code&gt;autoflush()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="cbb77319c3caa8ab8afaeca5e241bd4affc14078" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;a href=&quot;perlvar#%24%7C&quot;&gt;&lt;code&gt;$|&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;) or call the &lt;code&gt;autoflush&lt;/code&gt; method of &lt;a href=&quot;IO::Handle#METHODS&quot;&gt;&lt;code&gt;IO::Handle&lt;/code&gt;&lt;/a&gt; on any open handles.</source>
          <target state="translated">Perlは、フォークを実行する可能性のある操作の前に、出力用に開かれたすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、&lt;a href=&quot;perlvar#%24%7C&quot;&gt; &lt;code&gt;$|&lt;/code&gt; &lt;/a&gt;を設定する必要があるかもしれません。（ &lt;code&gt;$AUTOFLUSH&lt;/code&gt; で&lt;a href=&quot;english&quot;&gt;、英語&lt;/a&gt;）、またはお電話 &lt;code&gt;autoflush&lt;/code&gt; の方法&lt;a href=&quot;IO::Handle#METHODS&quot;&gt; &lt;code&gt;IO::Handle&lt;/code&gt; &lt;/a&gt;任意の開いているハンドル上を。</target>
        </trans-unit>
        <trans-unit id="43b0e0c3bc56ba7ca3959a0f5e022566b0153f54" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before any operation that may do a fork, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; ($AUTOFLUSH in English) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;IO::Handle&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perlは、forkを実行する可能性のある操作の前に、出力用に開いているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （英語の$ AUTOFLUSH）または開いている &lt;code&gt;IO::Handle&lt;/code&gt; でIO :: Handleの &lt;code&gt;autoflush()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="2d8b585d320f38f1a30c6c32f686d7f733f4dca8" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before starting the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt;) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;&lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perlは、子プロセスを開始する前に、出力用に開かれたすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません。（ &lt;code&gt;$AUTOFLUSH&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt; ）、またはお電話 &lt;code&gt;autoflush()&lt;/code&gt; のメソッド &lt;code&gt;&lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; 任意の開いているハンドル上を。</target>
        </trans-unit>
        <trans-unit id="6bea16b3be61058b5cb516538e14480b80e24dcc" translate="yes" xml:space="preserve">
          <source>Perl will attempt to flush all files opened for output before starting the child process, but this may not be supported on some platforms (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;). To be safe, you may need to set &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$AUTOFLUSH&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt;) or call the &lt;code&gt;autoflush()&lt;/code&gt; method of &lt;code&gt;&lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; on any open handles.</source>
          <target state="translated">Perlは、子プロセスを開始する前に、出力用に開かれているすべてのファイルをフラッシュしようとしますが、これは一部のプラットフォームではサポートされていない場合があります（&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照）。安全のために、 &lt;code&gt;$|&lt;/code&gt; を設定する必要があるかもしれません （ &lt;code&gt;$AUTOFLUSH&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;&lt;/code&gt; ）、またはお電話 &lt;code&gt;autoflush()&lt;/code&gt; のメソッド &lt;code&gt;&lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;&lt;/code&gt; 任意の開いているハンドル上を。</target>
        </trans-unit>
        <trans-unit id="69e6c1ab664ef4d480c4cc1af41e9e1fb158cde3" translate="yes" xml:space="preserve">
          <source>Perl will completely read from all open directory handles until they reach the end of the stream. It will then seekdir() back to the original location and all future readdir() requests will be fulfilled from the cache buffer. That means that neither the directory handle held by the parent process nor the one held by the child process will see any changes made to the directory after the fork() call.</source>
          <target state="translated">Perl は、すべてのオープンディレクトリのハンドルをストリームの最後まで完全に読み込みます。その後 seekdir()を元の場所に戻し、以降の readdir()リクエストはすべてキャッシュバッファから実行されます。つまり、親プロセスが保持しているディレクトリハンドルも、子プロセスが保持しているディレクトリハンドルも、 fork()コールの後にディレクトリに加えられた変更を見ることはありません。</target>
        </trans-unit>
        <trans-unit id="ae724785888abcc4558016f3ec47b4f4e63fe38a" translate="yes" xml:space="preserve">
          <source>Perl will generate an error for a few character properties in Unicode when used in a regular expression. The non-Unihan ones are listed below, with the reasons they are not accepted, perhaps with work-arounds. The short names for the properties are listed enclosed in (parentheses). As described after the list, an installation can change the defaults and choose to accept any of these. The list is machine generated based on the choices made for the installation that generated this document.</source>
          <target state="translated">Perl は、正規表現で使用された場合、Unicode のいくつかの文字プロパティに対してエラーを生成します。ユニコードではないものは以下に、それらが受け入れられない理由と、おそらく回避策を示しています。プロパティの短い名前を(カッコ)で囲んでリストアップしています。リストの後で説明するように、インストールはデフォルトを変更して、これらのいずれかを受け入れるように選択することができます。このリストは、このドキュメントを生成したインストールで行われた選択に基づいて機械的に生成されたものです。</target>
        </trans-unit>
        <trans-unit id="8b82b63566b58bfbfd5f88517a9ea3598fc70e2d" translate="yes" xml:space="preserve">
          <source>Perl will not guarantee what the result of the above statements is.</source>
          <target state="translated">Perlは上記の文の結果が何であるかを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="ad11d6c2aaa2cf9eed67c4c4a37abbefb094f00c" translate="yes" xml:space="preserve">
          <source>Perl will print</source>
          <target state="translated">Perl は</target>
        </trans-unit>
        <trans-unit id="bf866573cd4df8609484c1bf4b87543aa847fff1" translate="yes" xml:space="preserve">
          <source>Perl will print &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt; , assuming, of course, that</source>
          <target state="translated">もちろん、Perlは一 &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt; 印刷を行います。もちろん、</target>
        </trans-unit>
        <trans-unit id="c9125a8fdf67019b69d1e6b1d55295e266cee711" translate="yes" xml:space="preserve">
          <source>Perl will print &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt;, assuming, of course, that</source>
          <target state="translated">Perlは、もちろん、それがあったと仮定して、 &lt;code&gt;ONCE UPON A TIME THERE WAS&lt;/code&gt; は印刷します</target>
        </trans-unit>
        <trans-unit id="ef9a0a9d3a3fd7fe149a4004c226420f095952a0" translate="yes" xml:space="preserve">
          <source>Perl will start PM programs from VIO (=text-mode) Perl process in a separate PM session; the opposite is not true: when you start a non-PM program from a PM Perl process, Perl would not run it in a separate session. If a separate session is desired, either ensure that shell will be used, as in &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; 'cmd /c myprog'&lt;/code&gt; , or start it using optional arguments to system() documented in &lt;code&gt;OS2::Process&lt;/code&gt; module. This is considered to be a feature.</source>
          <target state="translated">Perlは、別のPMセッションでVIO（= text-mode）PerlプロセスからPMプログラムを開始します。逆は当てはまりません。PM以外のプログラムをPM Perlプロセスから起動すると、Perlはそれを別のセッションで実行しません。別のセッションが必要な場合は、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt; 'cmd /c myprog'&lt;/code&gt; ようにシェルが使用されることを確認するか、 &lt;code&gt;OS2::Process&lt;/code&gt; モジュールに記載されているsystem（）へのオプションの引数を使用して開始します。これは機能と見なされます。</target>
        </trans-unit>
        <trans-unit id="78588e527fc97bd83af2c6a428985bc498ac231c" translate="yes" xml:space="preserve">
          <source>Perl will start PM programs from VIO (=text-mode) Perl process in a separate PM session; the opposite is not true: when you start a non-PM program from a PM Perl process, Perl would not run it in a separate session. If a separate session is desired, either ensure that shell will be used, as in &lt;code&gt;system 'cmd /c myprog'&lt;/code&gt;, or start it using optional arguments to system() documented in &lt;code&gt;OS2::Process&lt;/code&gt; module. This is considered to be a feature.</source>
          <target state="translated">Perlは、別のPMセッションでVIO（= text-mode）PerlプロセスからPMプログラムを開始します。逆は当てはまりません。PMPerlプロセスから非PMプログラムを開始すると、Perlはそれを別のセッションで実行しません。別のセッションが必要な場合は、 &lt;code&gt;system 'cmd /c myprog'&lt;/code&gt; ようにシェルが使用されることを確認するか、 &lt;code&gt;OS2::Process&lt;/code&gt; モジュールに記載されているsystem（）へのオプションの引数を使用して開始します。これは機能と見なされます。</target>
        </trans-unit>
        <trans-unit id="79467cc317c9e9a63f21c7fa1de773705edf809c" translate="yes" xml:space="preserve">
          <source>Perl word completion module</source>
          <target state="translated">Perl の単語補完モジュール</target>
        </trans-unit>
        <trans-unit id="5a1baab191c5a4cbb8bc8a1bc0cd6292ba8ea600" translate="yes" xml:space="preserve">
          <source>Perl works on a bewildering variety of Unix and Unix-like platforms (see e.g. most of the files in the</source>
          <target state="translated">Perl は Unix や Unix ライクなプラットフォーム上で動作します (例えば</target>
        </trans-unit>
        <trans-unit id="5f937e1c9658905a769f6858da3294349601c8d9" translate="yes" xml:space="preserve">
          <source>Perl works with UTF-EBCDIC, a multi-byte encoding. In Perls earlier than v5.22, there may be various bugs in this regard.</source>
          <target state="translated">Perl は UTF-EBCDIC というマルチバイトエンコーディングで動作します。v5.22以前のPerlsでは、この点で様々なバグがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="42414ebda9bd8b337ff75ba9b25023988eae655b" translate="yes" xml:space="preserve">
          <source>Perl workshops are, as the name might suggest, workshops where Perl is taught in a variety of ways. At the workshops, subjects range from a beginner's introduction (such as the Pittsburgh Perl Workshop's &quot;Zero To Perl&quot;) to much more advanced subjects.</source>
          <target state="translated">Perl ワークショップとは、その名が示すように、Perl を様々な方法で教えるワークショップのことです。ワークショップでは、初心者向けの入門編 (ピッツバーグ Perl ワークショップの &quot;Zero To Perl&quot; のようなもの)から、はるかに高度なものまで、さまざまなテーマが提供されます。</target>
        </trans-unit>
        <trans-unit id="7e6b25cba02b7a0948e7b911d7360593ba8a4f62" translate="yes" xml:space="preserve">
          <source>Perl&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; think all codepoints take up 1 print column, but many take 0 or 2. Here to show that normalization makes no difference, we print out both forms:</source>
          <target state="translated">Perlの &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; は、すべてのコードポイントが1つの印刷列を占めると考えていますが、多くは0または2を必要とします。</target>
        </trans-unit>
        <trans-unit id="df2feb6f1ec6c5fcfce646b1caa76de773ce0f59" translate="yes" xml:space="preserve">
          <source>Perl&amp;rsquo;s &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;sprintf&lt;/code&gt;, and &lt;code&gt;format&lt;/code&gt; think all codepoints take up 1 print column, but many take 0 or 2. Here to show that normalization makes no difference, we print out both forms:</source>
          <target state="translated">Perlの &lt;code&gt;printf&lt;/code&gt; 、 &lt;code&gt;sprintf&lt;/code&gt; 、および &lt;code&gt;format&lt;/code&gt; は、すべてのコードポイントが1つの印刷列を占めると考えていますが、多くは0または2を取ります。ここでは、正規化によって違いがないことを示すために、両方の形式を出力します。</target>
        </trans-unit>
        <trans-unit id="609b12c8bffe220b74d5c614b906ddd9f420fc60" translate="yes" xml:space="preserve">
          <source>Perl's</source>
          <target state="translated">Perl's</target>
        </trans-unit>
        <trans-unit id="e5e5cc8de2d6897fcdb211dcd0cc9ecba9c81faf" translate="yes" xml:space="preserve">
          <source>Perl's &quot;use integer&quot; might change the behaviour of % and / for scalars. This is because under 'use integer' Perl does what the underlying C library thinks is right, and this varies. However, &quot;use integer&quot; does not change the way things are done with Math::BigInt objects.</source>
          <target state="translated">Perl の &quot;use integer&quot; はスカラの % と/の挙動を変えるかもしれません。これは、'use integer' の下では、Perl は基礎となる C ライブラリが正しいと考えていることを行い、これは変化するからです。しかし、「整数を使用」しても、Math::BigInt オブジェクトで行われる方法は変わりません。</target>
        </trans-unit>
        <trans-unit id="c4304adeb0f8bf2fdb8cb6a0ee28ba6a82fef1c9" translate="yes" xml:space="preserve">
          <source>Perl's 'use integer;' changes the behaviour of % and / for scalars, but will not change BigInt's way to do things. This is because under 'use integer' Perl will do what the underlying C thinks is right and this is different for each system. If you need BigInt's behaving exactly like Perl's 'use integer', bug the author to implement it ;)</source>
          <target state="translated">Perl の 'use integer;' はスカラの % と/の挙動を変更しますが、BigInt のやり方は変更しません。これは、Perl の 'use integer' の下では、Perl は基礎となる C が正しいと考えていることを実行し、これはシステムごとに異なるからです。Perl の 'use integer' のような BigInt の振る舞いが必要な場合は、作者に実装を依頼してください ;)</target>
        </trans-unit>
        <trans-unit id="064e821c3cc7d30b6bfa1d90af859d75eba797c0" translate="yes" xml:space="preserve">
          <source>Perl's &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt; permits the following universally-known conversions:</source>
          <target state="translated">Perlの&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;/a&gt;は、次の一般的に知られている変換を許可します。</target>
        </trans-unit>
        <trans-unit id="78408db0ece90050f47f78be2d21f98042f5d6be" translate="yes" xml:space="preserve">
          <source>Perl's &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; permits the following universally-known conversions:</source>
          <target state="translated">Perlの &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、次の一般的に知られている変換を許可します。</target>
        </trans-unit>
        <trans-unit id="679bce65e9c564373f478362e333d0a68acc42d5" translate="yes" xml:space="preserve">
          <source>Perl's &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; permits the following universally-known conversions:</source>
          <target state="translated">Perlの &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、次の一般的に知られている変換を許可します。</target>
        </trans-unit>
        <trans-unit id="53cad962b7a83e25af2f6bf67e501730e16fa363" translate="yes" xml:space="preserve">
          <source>Perl's &lt;code&gt;pprivate&lt;/code&gt; structure</source>
          <target state="translated">Perlの &lt;code&gt;pprivate&lt;/code&gt; 構造</target>
        </trans-unit>
        <trans-unit id="50b7e56f45ec7b1f922cb2ef554212efaf347a1d" translate="yes" xml:space="preserve">
          <source>Perl's API has changed over time, gaining new features, new functions, increasing its flexibility, and reducing the impact on the C namespace environment (reduced pollution). The header file written by this module, typically</source>
          <target state="translated">Perl の API は時間の経過とともに変化し、新機能、新関数、柔軟性の向上、C 名前空間環境への影響の低減 (汚染の低減)などを実現してきました。このモジュールによって書かれたヘッダファイルは、通常</target>
        </trans-unit>
        <trans-unit id="e05aa87f748ad78da85fa4d39c89ae07ccce030e" translate="yes" xml:space="preserve">
          <source>Perl's C-style &lt;code&gt;for&lt;/code&gt; loop works like the corresponding &lt;code&gt;while&lt;/code&gt; loop; that means that this:</source>
          <target state="translated">PerlのCスタイルの &lt;code&gt;for&lt;/code&gt; ループは、対応する &lt;code&gt;while&lt;/code&gt; ループのように機能します。つまり、これは：</target>
        </trans-unit>
        <trans-unit id="5db9c37ab5f7f0381d150d83940e69ede28d72bd" translate="yes" xml:space="preserve">
          <source>Perl's IO. Consequently only built-in layers can appear in this list, as external layers (such as &lt;code&gt;:encoding()&lt;/code&gt; ) need IO in order to load them! See &lt;a href=&quot;open&quot;&gt;open pragma&lt;/a&gt; for how to add external encodings as defaults.</source>
          <target state="translated">PerlのIO。したがって、外部レイヤ（ &lt;code&gt;:encoding()&lt;/code&gt; など）をロードするにはIOが必要であるため、このリストに表示できるのは組み込みレイヤのみです。外部エンコーディングをデフォルトとして追加する方法については、&lt;a href=&quot;open&quot;&gt;openプラグマ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b76c3fa97974625df89eb014ff16153ff4616729" translate="yes" xml:space="preserve">
          <source>Perl's IO. Consequently only built-in layers can appear in this list, as external layers (such as &lt;code&gt;:encoding()&lt;/code&gt;) need IO in order to load them! See &lt;a href=&quot;open&quot;&gt;&quot;open pragma&quot;&lt;/a&gt; for how to add external encodings as defaults.</source>
          <target state="translated">PerlのIO。したがって、外部レイヤー（ &lt;code&gt;:encoding()&lt;/code&gt; など）はそれらをロードするためにIOを必要とするため、組み込みレイヤーのみがこのリストに表示されます。外部エンコーディングをデフォルトとして追加する方法については、&lt;a href=&quot;open&quot;&gt;「openpragma」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a012002430e5ec63e7214212c95e7a6c13798d5" translate="yes" xml:space="preserve">
          <source>Perl's OO system is class-based. Class-based OO is fairly common. It's used by Java, C++, C#, Python, Ruby, and many other languages. There are other object orientation paradigms as well. JavaScript is the most popular language to use another paradigm. JavaScript's OO system is prototype-based.</source>
          <target state="translated">Perl の OO システムはクラスベースです。クラスベースの OO はかなり一般的です。Java、C++、C#、Python、Ruby、その他多くの言語で使用されています。他のオブジェクト指向パラダイムもあります。別のパラダイムを使っている言語としては、JavaScriptが最もポピュラーです。JavaScriptのOOシステムはプロトタイプベースです。</target>
        </trans-unit>
        <trans-unit id="9806e03898721874442226704be9b61686d35f9b" translate="yes" xml:space="preserve">
          <source>Perl's TIEHANDLE spec was incomplete prior to 5.005_57; it was missing support for &lt;code&gt;seek()&lt;/code&gt;, &lt;code&gt;tell()&lt;/code&gt;, and &lt;code&gt;eof()&lt;/code&gt;. Attempting to use these functions with an IO::Scalar will not work prior to 5.005_57. IO::Scalar will not have the relevant methods invoked; and even worse, this kind of bug can lie dormant for a while. If you turn warnings on (via &lt;code&gt;$^W&lt;/code&gt; or &lt;code&gt;perl -w&lt;/code&gt;), and you see something like this...</source>
          <target state="translated">PerlのTIEHANDLE仕様は、5.005_57より前は不完全でした。 &lt;code&gt;seek()&lt;/code&gt; 、 &lt;code&gt;tell()&lt;/code&gt; 、および &lt;code&gt;eof()&lt;/code&gt; のサポートがありませんでした。これらの関数をIO :: Scalarで使用しようとすると、5.005_57より前では機能しません。 IO :: Scalarでは関連するメソッドが呼び出されません。さらに悪いことに、この種のバグはしばらく休止状態になる可能性があります。警告をオンにすると（ &lt;code&gt;$^W&lt;/code&gt; または &lt;code&gt;perl -w&lt;/code&gt; を介して）、次のようなものが表示されます...</target>
        </trans-unit>
        <trans-unit id="f14833bc12320cc5b22e2f7f5922dcba8b20a6ea" translate="yes" xml:space="preserve">
          <source>Perl's Unicode Model</source>
          <target state="translated">Perl の Unicode モデル</target>
        </trans-unit>
        <trans-unit id="78c1f3e5a87cf4bde2cfaf198cd9b736e054adc6" translate="yes" xml:space="preserve">
          <source>Perl's Unicode Support</source>
          <target state="translated">Perl の Unicode サポート</target>
        </trans-unit>
        <trans-unit id="2f4e8610ccf72680ce428d05cdb3a44400f56202" translate="yes" xml:space="preserve">
          <source>Perl's arrays do not have a fixed size, so you don't need linked lists if you just want to add or remove items. You can use array operations such as &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; to do that.</source>
          <target state="translated">Perlの配列には固定サイズがないため、アイテムを追加または削除するだけの場合は、リンクリストは必要ありません。これを行うには、 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; などの配列操作を使用できます。</target>
        </trans-unit>
        <trans-unit id="180c125ddac8494f8c8cf2f82ef0744802e2f7e3" translate="yes" xml:space="preserve">
          <source>Perl's arrays do not have a fixed size, so you don't need linked lists if you just want to add or remove items. You can use array operations such as &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, or &lt;code&gt;splice&lt;/code&gt; to do that.</source>
          <target state="translated">Perlの配列には固定サイズがないため、アイテムを追加または削除するだけの場合は、リンクリストは必要ありません。これを行うには、 &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;shift&lt;/code&gt; 、 &lt;code&gt;unshift&lt;/code&gt; 、 &lt;code&gt;splice&lt;/code&gt; などの配列操作を使用できます。</target>
        </trans-unit>
        <trans-unit id="f0829cd34f91158f6d50d3501d1729557f626943" translate="yes" xml:space="preserve">
          <source>Perl's basic open() statement can also be used for unidirectional interprocess communication by either appending or prepending a pipe symbol to the second argument to open(). Here's how to start something up in a child process you intend to write to:</source>
          <target state="translated">Perl の基本的な open()文は、open()の第二引数にパイプシンボルを追加したり、前置したりすることで、一方向性のあるプロセス間通信にも使用できます。ここでは、書き込み先の子プロセスで何かを起動する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="d1c613eb863cbd84885db8255f46385590e7af47" translate="yes" xml:space="preserve">
          <source>Perl's basic open() statement can also be used for unidirectional interprocess communication by specifying the open mode as &lt;code&gt;|-&lt;/code&gt; or &lt;code&gt;-|&lt;/code&gt;. Here's how to start something up in a child process you intend to write to:</source>
          <target state="translated">Perlの基本的なopen（）ステートメントは、オープンモードを &lt;code&gt;|-&lt;/code&gt; または &lt;code&gt;-|&lt;/code&gt; として指定することにより、単方向のプロセス間通信にも使用できます。。書き込む予定の子プロセスで何かを開始する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f7f15224970f30bbd8cc0d913eabc8b8733adcd9" translate="yes" xml:space="preserve">
          <source>Perl's built-in introspection features are fairly minimal. &lt;code&gt;Moose&lt;/code&gt; builds on top of them and creates a full introspection layer for your classes. This lets you ask questions like &quot;what methods does the File class implement?&quot; It also lets you modify your classes programmatically.</source>
          <target state="translated">Perlの組み込みイントロスペクション機能はかなり最小限です。 &lt;code&gt;Moose&lt;/code&gt; はそれらの上に構築し、クラスの完全なイントロスペクションレイヤーを作成します。これにより、「Fileクラスはどのメソッドを実装するのか」などの質問をすることができます。また、プログラムでクラスを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="45287a14757d133ee14640bcf6c328a91774bc92" translate="yes" xml:space="preserve">
          <source>Perl's builtin flock() function (see &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for details) will call flock(2) if that exists, fcntl(2) if it doesn't (on perl version 5.004 and later), and lockf(3) if neither of the two previous system calls exists. On some systems, it may even use a different form of native locking. Here are some gotchas with Perl's flock():</source>
          <target state="translated">Perlの組み込みflock（）関数（詳細は&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;を参照）が存在する場合はflock（2）を呼び出し、存在しない場合はfcntl（2）を呼び出し（perlバージョン5.004以降）、2つともない場合はlockf（3）を呼び出します。以前のシステムコールが存在します。一部のシステムでは、異なる形式のネイティブロックを使用する場合もあります。Perlのflock（）に関するいくつかの落とし穴は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4e23292bcea30aa529b568a400bba32042a7e37e" translate="yes" xml:space="preserve">
          <source>Perl's characters are stored internally as sequences of one or more bytes. This pragma allows for the examination of the individual bytes that together comprise a character.</source>
          <target state="translated">Perl の文字は、内部的には 1 つ以上のバイトのシーケンスとして格納されています。このプラグマを使用すると、文字を構成する個々のバイトを調べることができます。</target>
        </trans-unit>
        <trans-unit id="f507c173df4e9952b98c777db1766156932095e8" translate="yes" xml:space="preserve">
          <source>Perl's documentation is an important resource for our users. It's incredibly important for Perl's documentation to be reasonably coherent and to accurately reflect the current implementation.</source>
          <target state="translated">Perl のドキュメントはユーザにとって重要なリソースです。Perl のドキュメントが合理的に一貫していて、現在の実装を正確に反映していることが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="8e7bbfdbc61f02638ca2efad632597e1e0cf6bad" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this flag if the pattern is &lt;code&gt;\s+&lt;/code&gt;.</source>
          <target state="translated">パターンが &lt;code&gt;\s+&lt;/code&gt; 場合、Perlのエンジンはこのフラグを設定します。</target>
        </trans-unit>
        <trans-unit id="c7dfeaf28529f5593bf2febfb63757ff3cbe501b" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this flag on empty patterns, this optimization makes &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; //&lt;/code&gt; much faster than it would otherwise be. It's even faster than &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Perlのエンジンはこのフラグを空のパターンに設定します。この最適化により、 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt; //&lt;/code&gt; 通常の場合よりもはるかに高速になります。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; よりもさらに高速です。</target>
        </trans-unit>
        <trans-unit id="a12b92b4349d16b75893487c4da574782b294666" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this flag on empty patterns, this optimization makes &lt;code&gt;split //&lt;/code&gt; much faster than it would otherwise be. It's even faster than &lt;code&gt;unpack&lt;/code&gt;.</source>
          <target state="translated">Perlのエンジンは、空のパターンにこのフラグを設定します。この最適化により、 &lt;code&gt;split //&lt;/code&gt; そうでない場合よりもはるかに高速になります。 &lt;code&gt;unpack&lt;/code&gt; よりもさらに高速です。</target>
        </trans-unit>
        <trans-unit id="ae0e4b0c5f9f6cc7920bb5bbdeff06433a976d20" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this if the pattern is &lt;code&gt;/^/&lt;/code&gt; (&lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp
== '^'&lt;/code&gt; ), even under &lt;code&gt;/^/s&lt;/code&gt; ; see &lt;a href=&quot;perlfunc&quot;&gt;split&lt;/a&gt;. Of course a different regex engine might want to use the same optimizations with a different syntax.</source>
          <target state="translated">パターンが &lt;code&gt;/^/&lt;/code&gt; （ &lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp == '^'&lt;/code&gt; ）の場合、Perlのエンジンはこれを &lt;code&gt;/^/s&lt;/code&gt; の下でも設定します。&lt;a href=&quot;perlfunc&quot;&gt;splitを&lt;/a&gt;参照してください。もちろん、別の正規表現エンジンが、別の構文で同じ最適化を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="491c64f9a6d1d02d83e18cbec69820885ad456fd" translate="yes" xml:space="preserve">
          <source>Perl's engine sets this if the pattern is &lt;code&gt;/^/&lt;/code&gt; (&lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp == '^'&lt;/code&gt;), even under &lt;code&gt;/^/s&lt;/code&gt;; see &lt;a href=&quot;perlfunc&quot;&gt;split&lt;/a&gt;. Of course a different regex engine might want to use the same optimizations with a different syntax.</source>
          <target state="translated">Perlのエンジンは、パターンが &lt;code&gt;/^/&lt;/code&gt; （ &lt;code&gt;plen == 1 &amp;amp;&amp;amp; *exp == '^'&lt;/code&gt; ）の場合、 &lt;code&gt;/^/s&lt;/code&gt; の下でもこれを設定します。&lt;a href=&quot;perlfunc&quot;&gt;splitを&lt;/a&gt;参照してください。もちろん、別の正規表現エンジンでも、同じ最適化を別の構文で使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="7f1c7280d32070c89f6f598972838907640e2c7c" translate="yes" xml:space="preserve">
          <source>Perl's exception handing (i.e. &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; etc.) is built on top of the low-level &lt;code&gt;setjmp()&lt;/code&gt; /&lt;code&gt;longjmp()&lt;/code&gt; C-library functions. These basically provide a way to capture the current PC and SP registers and later restore them; i.e. a &lt;code&gt;longjmp()&lt;/code&gt; continues at the point in code where a previous &lt;code&gt;setjmp()&lt;/code&gt; was done, with anything further up on the C stack being lost. This is why code should always save values using &lt;code&gt;SAVE_FOO&lt;/code&gt; rather than in auto variables.</source>
          <target state="translated">Perlの例外処理（つまり、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; など）は、低レベルの &lt;code&gt;setjmp()&lt;/code&gt; / &lt;code&gt;longjmp()&lt;/code&gt; Cライブラリ関数の上に構築されています。これらは基本的に、現在のPCおよびSPレジスタをキャプチャして後で復元する方法を提供します。つまり、 &lt;code&gt;longjmp()&lt;/code&gt; は、前の &lt;code&gt;setjmp()&lt;/code&gt; が実行されたコード内のポイントで続行され、Cスタックのさらに上のものが失われます。これが、コードが自動変数ではなく &lt;code&gt;SAVE_FOO&lt;/code&gt; を使用して常に値を保存する必要がある理由です。</target>
        </trans-unit>
        <trans-unit id="624ef0dffdfa023577d4ff52307fa87cfe9d9de6" translate="yes" xml:space="preserve">
          <source>Perl's exception handing (i.e. &lt;code&gt;die&lt;/code&gt; etc.) is built on top of the low-level &lt;code&gt;setjmp()&lt;/code&gt;/&lt;code&gt;longjmp()&lt;/code&gt; C-library functions. These basically provide a way to capture the current PC and SP registers and later restore them; i.e. a &lt;code&gt;longjmp()&lt;/code&gt; continues at the point in code where a previous &lt;code&gt;setjmp()&lt;/code&gt; was done, with anything further up on the C stack being lost. This is why code should always save values using &lt;code&gt;SAVE_FOO&lt;/code&gt; rather than in auto variables.</source>
          <target state="translated">Perlの例外処理（つまり、 &lt;code&gt;die&lt;/code&gt; など）は、低レベルの &lt;code&gt;setjmp()&lt;/code&gt; / &lt;code&gt;longjmp()&lt;/code&gt; Cライブラリ関数の上に構築されています。これらは基本的に、現在のPCおよびSPレジスタをキャプチャし、後でそれらを復元する方法を提供します。つまり、 &lt;code&gt;longjmp()&lt;/code&gt; は、前の &lt;code&gt;setjmp()&lt;/code&gt; が実行されたコード内のポイントで続行され、Cスタックの上位にあるものはすべて失われます。これが、コードが自動変数ではなく &lt;code&gt;SAVE_FOO&lt;/code&gt; を使用して常に値を保存する必要がある理由です。</target>
        </trans-unit>
        <trans-unit id="e91c40c4e8331eb78a3c6f0cd54f4782d65eb5ae" translate="yes" xml:space="preserve">
          <source>Perl's exception-handling mechanism is its &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; operator. You can use &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;longjmp&lt;/code&gt; . For details of this, see the section on signals, especially the time-out handler for a blocking &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock()&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; or the section on &quot;Signals&quot; in</source>
          <target state="translated">Perlの例外処理メカニズムは、その &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; 演算子です。 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;setjmp&lt;/code&gt; として使用し、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;longjmp&lt;/code&gt; として使用できます。この詳細については、信号のセクション、ブロッキングのために特にタイムアウトハンドラ参照 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock()&lt;/a&gt;&lt;/code&gt; 内に&lt;a href=&quot;perlipc#Signals&quot;&gt;はperlipcの信号&lt;/a&gt;に「信号」またはセクション</target>
        </trans-unit>
        <trans-unit id="9cac2f4c55e81f4acfeedcd4627b6c31b378f1bc" translate="yes" xml:space="preserve">
          <source>Perl's exception-handling mechanism is its &lt;code&gt;eval()&lt;/code&gt; operator. You can use &lt;code&gt;eval()&lt;/code&gt; as &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;die()&lt;/code&gt; as &lt;code&gt;longjmp&lt;/code&gt;. For details of this, see the section on signals, especially the time-out handler for a blocking &lt;code&gt;flock()&lt;/code&gt; in &lt;a href=&quot;perlipc#Signals&quot;&gt;&quot;Signals&quot; in perlipc&lt;/a&gt; or the section on &quot;Signals&quot; in</source>
          <target state="translated">Perlの例外処理メカニズムは、その &lt;code&gt;eval()&lt;/code&gt; 演算子です。 &lt;code&gt;eval()&lt;/code&gt; を &lt;code&gt;setjmp&lt;/code&gt; として使用し、 &lt;code&gt;die()&lt;/code&gt; を &lt;code&gt;longjmp&lt;/code&gt; として使用できます。この詳細については、信号のセクション、ブロッキングのために特にタイムアウトハンドラ参照 &lt;code&gt;flock()&lt;/code&gt; 内に&lt;a href=&quot;perlipc#Signals&quot;&gt;はperlipcにおける「信号」&lt;/a&gt;又はにおける「信号」のセクション</target>
        </trans-unit>
        <trans-unit id="7495373aa18cedc70045dae42e442c9fd6b35bbc" translate="yes" xml:space="preserve">
          <source>Perl's initial DTrace support was added, providing &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-entry&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-return&lt;/a&gt;&lt;/code&gt; probes.</source>
          <target state="translated">Perlの最初のDTraceサポートが追加され、 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-entry&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub-return&lt;/a&gt;&lt;/code&gt; プローブが提供されました。</target>
        </trans-unit>
        <trans-unit id="3b6888971fb1fbb4f3722d29940392de31cd3dc2" translate="yes" xml:space="preserve">
          <source>Perl's initial DTrace support was added, providing &lt;code&gt;sub-entry&lt;/code&gt; and &lt;code&gt;sub-return&lt;/code&gt; probes.</source>
          <target state="translated">Perlの最初のDTraceサポートが追加され、 &lt;code&gt;sub-entry&lt;/code&gt; および &lt;code&gt;sub-return&lt;/code&gt; プローブが提供されました。</target>
        </trans-unit>
        <trans-unit id="de9d9a267eecc4785713b5ac86a07e677cc17c7d" translate="yes" xml:space="preserve">
          <source>Perl's internal UTF8 flag is called &quot;UTF8&quot;, without a hyphen. It indicates whether a string is internally encoded as &quot;utf8&quot;, also without a hyphen.</source>
          <target state="translated">Perl の内部 UTF8 フラグは、ハイフンなしの &quot;UTF8&quot; と呼ばれています。これは、文字列が内部的に &quot;utf8&quot; としてエンコードされているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="964109bdae72322c39e19dfb06177d03a380e828" translate="yes" xml:space="preserve">
          <source>Perl's internal error-handling mechanisms implement &lt;code&gt;die&lt;/code&gt; (and its internal equivalents) using longjmp. If this occurs during lexing, parsing or compilation, we must ensure that any ops allocated as part of the compilation process are freed. (Older Perl versions did not adequately handle this situation: when failing a parse, they would leak ops that were stored in C &lt;code&gt;auto&lt;/code&gt; variables and not linked anywhere else.)</source>
          <target state="translated">Perlの内部エラー処理メカニズムは、longjmpを使用して &lt;code&gt;die&lt;/code&gt; （およびその内部同等物）を実装します。字句解析、解析、またはコンパイル中にこれが発生した場合は、コンパイルプロセスの一部として割り当てられたすべての操作が解放されていることを確認する必要があります。（古いPerlバージョンは、この状況を適切に処理しませんでした。解析に失敗すると、C &lt;code&gt;auto&lt;/code&gt; 変数に格納され、他の場所にリンクされていないopsがリークしていました。）</target>
        </trans-unit>
        <trans-unit id="0c96604288539e03d84ef021ff0e6c92aef63b6c" translate="yes" xml:space="preserve">
          <source>Perl's malloc() uses bucketed allocations. Every request is rounded up to the closest bucket size available, and a bucket is taken from the pool of buckets of that size.</source>
          <target state="translated">Perl の malloc()は、バケットを使った割り当てを使用します。すべてのリクエストは、利用可能な最も近いバケットサイズに切り上げられ、バケットはそのサイズのバケットのプールから取得されます。</target>
        </trans-unit>
        <trans-unit id="b579bfa5793ff016b56c6d7d86928d92232797da" translate="yes" xml:space="preserve">
          <source>Perl's moaning about locale problems can be silenced by setting the environment variable &lt;code&gt;PERL_BADLANG&lt;/code&gt; to &quot;0&quot; or &quot;&quot;. This method really just sweeps the problem under the carpet: you tell Perl to shut up even when Perl sees that something is wrong. Do not be surprised if later something locale-dependent misbehaves.</source>
          <target state="translated">Perlのロケールの問題についてのうめき声は、環境変数 &lt;code&gt;PERL_BADLANG&lt;/code&gt; を「0」または「」に設定することによって沈黙させることができます。この方法は実際にはカーペットの下の問題を一掃するだけです。Perlが何かが間違っていると認識した場合でも、Perlにシャットダウンするように指示します。後でロケール依存の何かが誤動作しても驚かないでください。</target>
        </trans-unit>
        <trans-unit id="1f69de9b9e78267eea8d1d7d32a8294de0865cf8" translate="yes" xml:space="preserve">
          <source>Perl's operator overloading facility is completely ignored here. Operator overloading allows user-defined behaviors for numbers, such as operations over arbitrarily large integers, floating points numbers with arbitrary precision, operations over &quot;exotic&quot; numbers such as modular arithmetic or p-adic arithmetic, and so on. See &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt; for details.</source>
          <target state="translated">Perlのオペレーターオーバーロード機能は、ここでは完全に無視されます。演算子のオーバーロードにより、任意の大きな整数に対する演算、任意の精度の浮動小数点数、モジュラー演算やp進演算などの「エキゾチック」な数値に対する演算など、数値に対するユーザー定義の動作が可能になります。詳細については、&lt;a href=&quot;overload&quot;&gt;オーバーロード&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="669d7e9913d51876345768dad50e148946b6d1f0" translate="yes" xml:space="preserve">
          <source>Perl's own engine will croak on any attempt to modify the capture variables, to do this in another engine use the following callback (copied from &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt; ):</source>
          <target state="translated">Perlの独自のエンジンは、キャプチャ変数を変更しようとすると、 &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt; ます。別のエンジンでこれを行うには、次のコールバックを使用します（Perl_reg_numbered_buff_storeからコピー）。</target>
        </trans-unit>
        <trans-unit id="532111a8d37e622ace362d3c82b8583e84a70c42" translate="yes" xml:space="preserve">
          <source>Perl's own engine will croak on any attempt to modify the capture variables, to do this in another engine use the following callback (copied from &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt;):</source>
          <target state="translated">Perl自身のエンジンは、キャプチャ変数を変更しようとすると &lt;code&gt;Perl_reg_numbered_buff_store&lt;/code&gt; ます。別のエンジンでこれを行うには、次のコールバックを使用します（Perl_reg_numbered_buff_storeからコピー）。</target>
        </trans-unit>
        <trans-unit id="6c9f49d7c7e821b89479c1f1cbb325917aa3145b" translate="yes" xml:space="preserve">
          <source>Perl's packages, namespaces, and some info on classes.</source>
          <target state="translated">Perl のパッケージ、名前空間、クラスに関する情報。</target>
        </trans-unit>
        <trans-unit id="89f3a57557f87a2d78c866238eabb4d6f9e4ed76" translate="yes" xml:space="preserve">
          <source>Perl's pprivate structure</source>
          <target state="translated">Perl の pprivate 構造体</target>
        </trans-unit>
        <trans-unit id="4588c5311e33f989f4525ce1f0cd16204a00ea04" translate="yes" xml:space="preserve">
          <source>Perl's process, file, and text manipulation facilities make it particularly well-suited for tasks involving quick prototyping, system utilities, software tools, system management tasks, database access, graphical programming, networking, and web programming.</source>
          <target state="translated">Perlのプロセス、ファイル、テキスト操作機能は、クイックプロトタイピング、システムユーティリティ、ソフトウェアツール、システム管理タスク、データベースアクセス、グラフィカルプログラミング、ネットワーキング、Webプログラミングなどのタスクに特に適しています。</target>
        </trans-unit>
        <trans-unit id="93c38b6a66fe842db97ccbef348de209e8c19b5f" translate="yes" xml:space="preserve">
          <source>Perl's regular expression support is both broad and deep, and is the subject of lengthy documentation in &lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt;, &lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;, and elsewhere. However, in short:</source>
          <target state="translated">Perlの正規表現のサポートは広くて深いものであり、&lt;a href=&quot;perlrequick&quot;&gt;perlrequick&lt;/a&gt;、&lt;a href=&quot;perlretut&quot;&gt;perlretut&lt;/a&gt;、およびその他の場所での長いドキュメントの対象です。ただし、要するに：</target>
        </trans-unit>
        <trans-unit id="ff94ebb325d8b09e3a30e14e5986ca64a175f3eb" translate="yes" xml:space="preserve">
          <source>Perl's roots in text processing haven't been forgotten over the years. It still boasts some of the most powerful regular expressions to be found anywhere, and its support for Unicode text is world-class. It handles all kinds of structured text, too, through an extensive collection of extensions. Those libraries, collected in the CPAN, provide ready-made solutions to an astounding array of problems. When they haven't set the standard themselves, they steal from the best -- just like Perl itself.</source>
          <target state="translated">テキスト処理におけるPerlのルーツは、長年にわたって忘れ去られていません。Perl は今でも、どこにでも見られる最も強力な正規表現のいくつかを誇っており、Unicode テキストのサポートはワールドクラスです。また、拡張機能の豊富なコレクションにより、あらゆる種類の構造化テキストを処理することができます。CPANに収録されているこれらのライブラリは、驚くほど多くの問題に対して、すぐに使えるソリューションを提供してくれます。彼ら自身が標準を設定していないときは、Perl自身のように、最高のものから盗んでいます。</target>
        </trans-unit>
        <trans-unit id="e5126fad405ea6c1a0317bc1b96e0b7052710e86" translate="yes" xml:space="preserve">
          <source>Perl's source code is stored in a Git repository.</source>
          <target state="translated">Perl のソースコードは Git リポジトリに格納されています。</target>
        </trans-unit>
        <trans-unit id="770b04c9b25881d8dba46acccf2294a181b06ea5" translate="yes" xml:space="preserve">
          <source>Perl's source code, and extensions that want maximum portability, should use the above functions instead of those defined in ANSI C's</source>
          <target state="translated">Perl のソースコードや、最大限の移植性を求める拡張機能は、ANSI C の</target>
        </trans-unit>
        <trans-unit id="c91e012015b18438a085bd4240921bd7bbe55b97" translate="yes" xml:space="preserve">
          <source>Perl's threading package provides the &lt;code&gt;yield()&lt;/code&gt; function that does this. &lt;code&gt;yield()&lt;/code&gt; is pretty straightforward, and works like this:</source>
          <target state="translated">Perlのスレッド化パッケージは、これを行う &lt;code&gt;yield()&lt;/code&gt; 関数を提供します。 &lt;code&gt;yield()&lt;/code&gt; はかなり単純で、次のように機能します。</target>
        </trans-unit>
        <trans-unit id="0d178a4e92aee7a478bcdc3786f5d6c00e61333c" translate="yes" xml:space="preserve">
          <source>Perl's version of &lt;code&gt;strdup()&lt;/code&gt; . Returns a pointer to a newly allocated string which is a duplicate of &lt;code&gt;pv&lt;/code&gt; . The size of the string is determined by &lt;code&gt;strlen()&lt;/code&gt; , which means it may not contain embedded &lt;code&gt;NUL&lt;/code&gt; characters and must have a trailing &lt;code&gt;NUL&lt;/code&gt; . The memory allocated for the new string can be freed with the &lt;code&gt;Safefree()&lt;/code&gt; function.</source>
          <target state="translated">Perlのバージョンの &lt;code&gt;strdup()&lt;/code&gt; 。 &lt;code&gt;pv&lt;/code&gt; の複製である、新しく割り当てられた文字列へのポインタを返します。文字列のサイズは &lt;code&gt;strlen()&lt;/code&gt; によって決定されます。つまり、埋め込まれた &lt;code&gt;NUL&lt;/code&gt; 文字を含めることはできず、末尾に &lt;code&gt;NUL&lt;/code&gt; が必要です。新しい文字列に割り当てられたメモリは、 &lt;code&gt;Safefree()&lt;/code&gt; 関数で解放できます。</target>
        </trans-unit>
        <trans-unit id="cb7ece6ff69cf5a8948099da499efb5b6df6d0fa" translate="yes" xml:space="preserve">
          <source>Perl's version of &lt;code&gt;strdup()&lt;/code&gt;. Returns a pointer to a newly allocated string which is a duplicate of &lt;code&gt;pv&lt;/code&gt;. The size of the string is determined by &lt;code&gt;strlen()&lt;/code&gt;, which means it may not contain embedded &lt;code&gt;NUL&lt;/code&gt; characters and must have a trailing &lt;code&gt;NUL&lt;/code&gt;. To prevent memory leaks, the memory allocated for the new string needs to be freed when no longer needed. This can be done with the &lt;a href=&quot;#Safefree&quot;&gt;&quot;&lt;code&gt;Safefree&lt;/code&gt;&quot;&lt;/a&gt; function, or &lt;a href=&quot;perlguts#SAVEFREEPV%28p%29&quot;&gt;&lt;code&gt;SAVEFREEPV&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Perlのバージョンの &lt;code&gt;strdup()&lt;/code&gt; 。 &lt;code&gt;pv&lt;/code&gt; の複製である新しく割り当てられた文字列へのポインタを返します。文字列のサイズは &lt;code&gt;strlen()&lt;/code&gt; によって決定されます。つまり、文字列には &lt;code&gt;NUL&lt;/code&gt; 文字が埋め込まれていない可能性があり、末尾に &lt;code&gt;NUL&lt;/code&gt; が必要です。メモリリークを防ぐために、新しい文字列に割り当てられたメモリは、不要になったときに解放する必要があります。これは、&lt;a href=&quot;#Safefree&quot;&gt;「 &lt;code&gt;Safefree&lt;/code&gt; 」&lt;/a&gt;機能または&lt;a href=&quot;perlguts#SAVEFREEPV%28p%29&quot;&gt; &lt;code&gt;SAVEFREEPV&lt;/code&gt; を使用して実行でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="25b683a4b535a4d7cfe41ce26d997bfe703e18cc" translate="yes" xml:space="preserve">
          <source>Perl's version of what &lt;code&gt;strndup()&lt;/code&gt; would be if it existed. Returns a pointer to a newly allocated string which is a duplicate of the first &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;pv&lt;/code&gt; , plus a trailing &lt;code&gt;NUL&lt;/code&gt; byte. The memory allocated for the new string can be freed with the &lt;code&gt;Safefree()&lt;/code&gt; function.</source>
          <target state="translated">存在する場合の &lt;code&gt;strndup()&lt;/code&gt; の Perlバージョン。 &lt;code&gt;pv&lt;/code&gt; の最初の &lt;code&gt;len&lt;/code&gt; バイトと後続の &lt;code&gt;NUL&lt;/code&gt; バイトの複製である、新しく割り当てられた文字列へのポインタを返します。新しい文字列に割り当てられたメモリは、 &lt;code&gt;Safefree()&lt;/code&gt; 関数で解放できます。</target>
        </trans-unit>
        <trans-unit id="dcb73b72031ec0067bbb619275e109d78350c312" translate="yes" xml:space="preserve">
          <source>Perl's version of what &lt;code&gt;strndup()&lt;/code&gt; would be if it existed. Returns a pointer to a newly allocated string which is a duplicate of the first &lt;code&gt;len&lt;/code&gt; bytes from &lt;code&gt;pv&lt;/code&gt;, plus a trailing &lt;code&gt;NUL&lt;/code&gt; byte. The memory allocated for the new string can be freed with the &lt;code&gt;Safefree()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;strndup()&lt;/code&gt; が存在した場合のPerlのバージョン。 &lt;code&gt;pv&lt;/code&gt; の最初の &lt;code&gt;len&lt;/code&gt; バイトと末尾の &lt;code&gt;NUL&lt;/code&gt; バイトの複製である、新しく割り当てられた文字列へのポインタを返します。新しい文字列に割り当てられたメモリは、 &lt;code&gt;Safefree()&lt;/code&gt; 関数を使用して解放できます。</target>
        </trans-unit>
        <trans-unit id="f5a6f57c5b6a74291061b990e5d20daa26fe09bb" translate="yes" xml:space="preserve">
          <source>Perl's version vs. Unicode version</source>
          <target state="translated">Perl のバージョンと Unicode のバージョン</target>
        </trans-unit>
        <trans-unit id="7a524db45cae5747e45efc8dd0850e8e606106b1" translate="yes" xml:space="preserve">
          <source>Perl, for example, is supplied with two types of licence: The GNU GPL and The Artistic Licence (see the files README, Copying, and Artistic, or &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlgpl.html&quot;&gt;perlgpl&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlartistic.html&quot;&gt;perlartistic&lt;/a&gt;). Larry has good reasons for NOT just using the GNU GPL.</source>
          <target state="translated">たとえば、Perlには、GNU GPLと芸術的ライセンスという2種類のライセンスが付属しています（README、Copying、およびArtistic、または&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlgpl.html&quot;&gt;perlgpl&lt;/a&gt;および&lt;a href=&quot;https://perldoc.perl.org/5.26.0/perlartistic.html&quot;&gt;perlartistic&lt;/a&gt;ファイルを参照してください）。ラリーには、GNU GPLを使用しないだけの十分な理由があります。</target>
        </trans-unit>
        <trans-unit id="564aee985156bf1f7e4d6943ab0b96e9d1591dee" translate="yes" xml:space="preserve">
          <source>Perl, for example, is supplied with two types of licence: The GNU GPL and The Artistic Licence (see the files README, Copying, and Artistic, or &lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlgpl&quot;&gt;perlgpl&lt;/a&gt; and &lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlartistic&quot;&gt;perlartistic&lt;/a&gt;). Larry has good reasons for NOT just using the GNU GPL.</source>
          <target state="translated">たとえば、Perlには、&lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlgpl&quot;&gt;GNUGPL&lt;/a&gt;とArtisticLicenseの2種類のライセンスが付属しています（README、Copying、Artistic、またはperlgplと&lt;a href=&quot;https://perldoc.perl.org/5.32.0/perlartistic&quot;&gt;perlartistic&lt;/a&gt;のファイルを参照）。Larryには、GNUGPLを使用するだけではない正当な理由があります。</target>
        </trans-unit>
        <trans-unit id="7fb2ce1409b2c38c39e7006d8b4053a16eb3cd6a" translate="yes" xml:space="preserve">
          <source>Perl, in most cases, will raise a warning when matching an above-Unicode code point against a Unicode property when the result is &lt;code&gt;TRUE&lt;/code&gt; for &lt;code&gt;\p{}&lt;/code&gt; , and &lt;code&gt;FALSE&lt;/code&gt; for &lt;code&gt;\P{}&lt;/code&gt; . For example:</source>
          <target state="translated">結果がUnicodeプロパティに対して上記のUnicodeコードポイントと一致するときperlは、ほとんどの場合、警告を発生させます &lt;code&gt;TRUE&lt;/code&gt; のための &lt;code&gt;\p{}&lt;/code&gt; 、および &lt;code&gt;FALSE&lt;/code&gt; のための &lt;code&gt;\P{}&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="4e8a529ad62929cfec8c575ae762a6bdd257a323" translate="yes" xml:space="preserve">
          <source>Perl, in most cases, will raise a warning when matching an above-Unicode code point against a Unicode property when the result is &lt;code&gt;TRUE&lt;/code&gt; for &lt;code&gt;\p{}&lt;/code&gt;, and &lt;code&gt;FALSE&lt;/code&gt; for &lt;code&gt;\P{}&lt;/code&gt;. For example:</source>
          <target state="translated">結果がUnicodeプロパティに対して上記のUnicodeコードポイントと一致するときperlは、ほとんどの場合、警告を発生させます &lt;code&gt;TRUE&lt;/code&gt; のための &lt;code&gt;\p{}&lt;/code&gt; 、および &lt;code&gt;FALSE&lt;/code&gt; のための &lt;code&gt;\P{}&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="ca608dbd89f51d5e2692a9f1c25c1e965290836e" translate="yes" xml:space="preserve">
          <source>Perl-Zeitung</source>
          <target state="translated">Perl-Zeitung</target>
        </trans-unit>
        <trans-unit id="ad6b525b8d5c1fb1d32da22f33d9e131f0326e0b" translate="yes" xml:space="preserve">
          <source>Perl.Exe</source>
          <target state="translated">Perl.Exe</target>
        </trans-unit>
        <trans-unit id="9a9aafaa9f4d06797b1c23d69746010b54bd3e53" translate="yes" xml:space="preserve">
          <source>Perl.com has two interesting articles on profiling: &quot;Profiling Perl&quot;, by Simon Cozens, &lt;a href=&quot;http://www.perl.com/lpt/a/850&quot;&gt;http://www.perl.com/lpt/a/850&lt;/a&gt; and &quot;Debugging and Profiling mod_perl Applications&quot;, by Frank Wiles, &lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&lt;/a&gt; .</source>
          <target state="translated">Perl.comには、プロファイリングに関する2つの興味深い記事があります。SimonCozensによる「Profiling Perl」、&lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http：&lt;/a&gt;&lt;a href=&quot;http://www.perl.com/lpt/a/850&quot;&gt;//www.perl.com/lpt/a/850&lt;/a&gt;およびFrank Wilesによる「Debugging and Profiling mod_perl Applications」、http：/ /www.perl.com/pub/a/2006/02/09/debug_mod_perl.html。</target>
        </trans-unit>
        <trans-unit id="4578b93cb1f77ba5f7e19625dc5d7f4767458f2f" translate="yes" xml:space="preserve">
          <source>Perl.com has two interesting articles on profiling: &quot;Profiling Perl&quot;, by Simon Cozens, &lt;a href=&quot;https://www.perl.com/pub/2004/06/25/profiling.html/&quot;&gt;https://www.perl.com/pub/2004/06/25/profiling.html/&lt;/a&gt; and &quot;Debugging and Profiling mod_perl Applications&quot;, by Frank Wiles, &lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&lt;/a&gt; .</source>
          <target state="translated">Perl.comには、プロファイリングに関する2つの興味深い記事があります。SimonCozensによる「ProfilingPerl」、&lt;a href=&quot;https://www.perl.com/pub/2004/06/25/profiling.html/&quot;&gt;https：&lt;/a&gt; //www.perl.com/pub/2004/06/25/profiling.html/および「Debuggingand Profiling mod_perl Applications」、 Frank Wiles著、&lt;a href=&quot;http://www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&quot;&gt;http：//www.perl.com/pub/a/2006/02/09/debug_mod_perl.html&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="59ecc62b49475d2cb5cb7295258de980e7bb9d53" translate="yes" xml:space="preserve">
          <source>Perl.pkg</source>
          <target state="translated">Perl.pkg</target>
        </trans-unit>
        <trans-unit id="047f2fc576481bb11cc4caee3ec1941467bc112a" translate="yes" xml:space="preserve">
          <source>Perl/Pollution/Portability</source>
          <target state="translated">Perl/Pollution/Portability</target>
        </trans-unit>
        <trans-unit id="0fabd9b0cbed286f085c386669bbb624b6ae0be5" translate="yes" xml:space="preserve">
          <source>Perl2Exe ( &lt;a href=&quot;http://www.indigostar.com/perl2exe.htm&quot;&gt;http://www.indigostar.com/perl2exe.htm&lt;/a&gt; ) is a command line program for converting perl scripts to executable files. It targets both Windows and Unix platforms.</source>
          <target state="translated">Perl2Exe（&lt;a href=&quot;http://www.indigostar.com/perl2exe.htm&quot;&gt;http://www.indigostar.com/perl2exe.htm&lt;/a&gt;）は、perlスクリプトを実行可能ファイルに変換するためのコマンドラインプログラムです。WindowsとUnixの両方のプラットフォームを対象としています。</target>
        </trans-unit>
        <trans-unit id="a58d113e289a5dca1b713eadc28920196d35302a" translate="yes" xml:space="preserve">
          <source>Perl5 Functions not currently supported in Plan 9 Perl</source>
          <target state="translated">Perl5 関数は現在 Plan 9 Perl でサポートされていません。</target>
        </trans-unit>
        <trans-unit id="7cf03298e4568d40fe4a8c254cdea9aeaf4618e7" translate="yes" xml:space="preserve">
          <source>Perl5 access to Berkeley DB version 1.x</source>
          <target state="translated">Berkeley DB バージョン 1.x への Perl5 アクセス</target>
        </trans-unit>
        <trans-unit id="a6b97c33f7f10f0b285f97ea17573e6970b9aabb" translate="yes" xml:space="preserve">
          <source>Perl5 access to the gdbm library.</source>
          <target state="translated">gdbm ライブラリへの Perl5 アクセス。</target>
        </trans-unit>
        <trans-unit id="03941ae667c96e0e93e4d324251c39d314452658" translate="yes" xml:space="preserve">
          <source>Perl::OSType</source>
          <target state="translated">Perl::OSType</target>
        </trans-unit>
        <trans-unit id="b6aec8ca037613e9d0fce40c6e0f1816ba73a700" translate="yes" xml:space="preserve">
          <source>Perl::OSType - Map Perl operating system names to generic types</source>
          <target state="translated">Perl::OSType-Perl オペレーティングシステム名を汎用型にマップする</target>
        </trans-unit>
        <trans-unit id="0f928d45134ea1b82a2f4001e977a9ca5021266a" translate="yes" xml:space="preserve">
          <source>PerlApp</source>
          <target state="translated">PerlApp</target>
        </trans-unit>
        <trans-unit id="35c6d70e8ca70c86c34afe75094fe416cee5049d" translate="yes" xml:space="preserve">
          <source>PerlBuilder</source>
          <target state="translated">PerlBuilder</target>
        </trans-unit>
        <trans-unit id="1fdc87c61ab4b84ad3bb7770857151e78dcb1fd1" translate="yes" xml:space="preserve">
          <source>PerlBuilder is an integrated development environment for Windows that supports Perl development.</source>
          <target state="translated">PerlBuilderは、Perl開発をサポートするWindows用の統合開発環境です。</target>
        </trans-unit>
        <trans-unit id="6649c958c30583d092dd8452f695dfb9e308dc26" translate="yes" xml:space="preserve">
          <source>PerlCE is currently linked with a simple console window, so it also works on non-hpc devices.</source>
          <target state="translated">PerlCEは現在、シンプルなコンソールウィンドウと連動しているので、PC以外のデバイスでも動作するようになっています。</target>
        </trans-unit>
        <trans-unit id="7aa73f69917f5eded1a42950facbce7317ea38d8" translate="yes" xml:space="preserve">
          <source>PerlIDE is handy to deal with perlce.</source>
          <target state="translated">PerlIDEはperlceを扱うのに便利です。</target>
        </trans-unit>
        <trans-unit id="579ddb2e63a9c9da8567b958430ce3a45a513b30" translate="yes" xml:space="preserve">
          <source>PerlIO</source>
          <target state="translated">PerlIO</target>
        </trans-unit>
        <trans-unit id="2bc2886f7622b1210de6b2d1553751fdf04796f5" translate="yes" xml:space="preserve">
          <source>PerlIO * is a FILE *. This has been the default implementation since the abstraction was introduced in perl5.003_02.</source>
          <target state="translated">PerlIO *はFILE *です。これはPerl5.003_02で抽象化が導入されて以来、デフォルトの実装となっています。</target>
        </trans-unit>
        <trans-unit id="71eb144823195b4440065066f28d18b5ab87828c" translate="yes" xml:space="preserve">
          <source>PerlIO - On demand loader for PerlIO layers and root of PerlIO::* name space</source>
          <target state="translated">PerlIO-PerlIOレイヤとPerlIO::*ネームスペースのルート用のオンデマンドローダー</target>
        </trans-unit>
        <trans-unit id="d16207b42b045b160714ba5de2f5ff0e6ff0943e" translate="yes" xml:space="preserve">
          <source>PerlIO ALWAYS calls this method to make sure it has its own private encoding object.</source>
          <target state="translated">PerlIO は常にこのメソッドを呼び出して、それ自身のプライベートなエンコーディングオブジェクトを持っていることを確認します。</target>
        </trans-unit>
        <trans-unit id="197c942bd2c3920a8495cda350b62bc73882bf34" translate="yes" xml:space="preserve">
          <source>PerlIO is a stack of layers.</source>
          <target state="translated">PerlIOはレイヤーのスタックです。</target>
        </trans-unit>
        <trans-unit id="44ba71a577701dc77528a1c3cec83d223013c700" translate="yes" xml:space="preserve">
          <source>PerlIO layer ':win32' is experimental</source>
          <target state="translated">PerlIO レイヤー ':win32' は実験的なものです。</target>
        </trans-unit>
        <trans-unit id="439a0e2b9ec37cb15accbd0aa170c3040534253a" translate="yes" xml:space="preserve">
          <source>PerlIO layer for quoted-printable strings</source>
          <target state="translated">引用符付き印刷可能な文字列のための PerlIO 層</target>
        </trans-unit>
        <trans-unit id="4ee79df7d6409c5fdbae86adeadf23592d153d40" translate="yes" xml:space="preserve">
          <source>PerlIO layers for &lt;b&gt;STDIN&lt;/b&gt; and &lt;b&gt;STDOUT&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;STDIN&lt;/b&gt;および&lt;b&gt;STDOUTの&lt;/b&gt;PerlIOレイヤー&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="6870089453c5b7ff02d4f86fa5b13e128f37bf93" translate="yes" xml:space="preserve">
          <source>PerlIO material contributed by Lupe Christoph, with some clarification by Nick Ing-Simmons.</source>
          <target state="translated">PerlIO の資料は Lupe Christoph さんが寄稿し、Nick Ing-Simmons さんがいくつか説明しています。</target>
        </trans-unit>
        <trans-unit id="820323203cd8f8b2a76e01512d15f3f0590e6729" translate="yes" xml:space="preserve">
          <source>PerlIO overrides the default Cygwin Text/Binary behaviour. A file will always be treated as binary, regardless of the mode of the mount it lives on, just like it is in UNIX. So CR/LF translation needs to be requested in either the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; call like this:</source>
          <target state="translated">PerlIOはデフォルトのCygwin Text / Binary動作をオーバーライドします。UNIXと同様に、ファイルは、そのファイルが存在するマウントのモードに関係なく、常にバイナリとして扱われます。そのため、次のような &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 呼び出しでCR / LF変換を要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="9cc5889d76cbd97257ac5d37c17d569437b80e5c" translate="yes" xml:space="preserve">
          <source>PerlIO overrides the default Cygwin Text/Binary behaviour. A file will always be treated as binary, regardless of the mode of the mount it lives on, just like it is in UNIX. So CR/LF translation needs to be requested in either the &lt;code&gt;open()&lt;/code&gt; call like this:</source>
          <target state="translated">PerlIOは、デフォルトのCygwinテキスト/バイナリ動作をオーバーライドします。ファイルは、UNIXの場合と同様に、マウントのモードに関係なく、常にバイナリとして扱われます。したがって、CR / LF変換は、次のような &lt;code&gt;open()&lt;/code&gt; 呼び出しで要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4261eaed3053779b6ac602dc0094ca271817116" translate="yes" xml:space="preserve">
          <source>PerlIO.pm</source>
          <target state="translated">PerlIO.pm</target>
        </trans-unit>
        <trans-unit id="1154ad98b215ecf5df7b1e7ad79cee31862d0eaf" translate="yes" xml:space="preserve">
          <source>PerlIO::encoding</source>
          <target state="translated">PerlIO::encoding</target>
        </trans-unit>
        <trans-unit id="0bd3d0c97f8a1994a38840e4b2078cd8c7618564" translate="yes" xml:space="preserve">
          <source>PerlIO::encoding - encoding layer</source>
          <target state="translated">PerlIO::encoding-エンコーディング層</target>
        </trans-unit>
        <trans-unit id="1ed740d1e5082e67b34e9a633e9e92164f2f7b46" translate="yes" xml:space="preserve">
          <source>PerlIO::encoding, PerlIO::scalar, PerlIO::via in the Perl core.</source>
          <target state="translated">PerlコアのPerlIO::encoding、PerlIO::scalar、PerlIO::via。</target>
        </trans-unit>
        <trans-unit id="c62625c5db5d75cf0d983910b623b95f9bd27b6e" translate="yes" xml:space="preserve">
          <source>PerlIO::gzip and APR::PerlIO (mod_perl 2.0) on CPAN.</source>
          <target state="translated">CPAN の PerlIO::gzip と APR::PerlIO (mod_perl 2.0)。</target>
        </trans-unit>
        <trans-unit id="304331cfad71f1b33cdb168da072d68db60896f0" translate="yes" xml:space="preserve">
          <source>PerlIO::mmap</source>
          <target state="translated">PerlIO::mmap</target>
        </trans-unit>
        <trans-unit id="a72b9d3b9fb038f07c1da369e861e7afab553215" translate="yes" xml:space="preserve">
          <source>PerlIO::mmap - Memory mapped IO</source>
          <target state="translated">PerlIO::mmap-メモリマップされた IO</target>
        </trans-unit>
        <trans-unit id="b76466d411ce33a97489bbc61bc858849f23c2d6" translate="yes" xml:space="preserve">
          <source>PerlIO::scalar</source>
          <target state="translated">PerlIO::scalar</target>
        </trans-unit>
        <trans-unit id="68b32bd3bc2551440298bb2d6347e307a14d02ff" translate="yes" xml:space="preserve">
          <source>PerlIO::scalar - in-memory IO, scalar IO</source>
          <target state="translated">PerlIO::scalar-インメモリ IO,スカラー IO</target>
        </trans-unit>
        <trans-unit id="6f4147b27883b678d3b28400a2747841090cc49c" translate="yes" xml:space="preserve">
          <source>PerlIO::via</source>
          <target state="translated">PerlIO::via</target>
        </trans-unit>
        <trans-unit id="d69e5b0660da6ada8428bd96b3dfa15197a8ec90" translate="yes" xml:space="preserve">
          <source>PerlIO::via - Helper class for PerlIO layers implemented in perl</source>
          <target state="translated">PerlIO::via-perl で実装された PerlIO レイヤーのためのヘルパークラス</target>
        </trans-unit>
        <trans-unit id="c1ddecb6a7a6597042738bddffe28139074d4d7b" translate="yes" xml:space="preserve">
          <source>PerlIO::via::QuotedPrint</source>
          <target state="translated">PerlIO::via::QuotedPrint</target>
        </trans-unit>
        <trans-unit id="82ccb99b92622bcc0fc58d955a6b7496cc1351ac" translate="yes" xml:space="preserve">
          <source>PerlIO::via::QuotedPrint - PerlIO layer for quoted-printable strings</source>
          <target state="translated">PerlIO::via::QuotedPrint-引用符で印刷可能な文字列のための PerlIO レイヤー</target>
        </trans-unit>
        <trans-unit id="60e19b81fad8ebbf88c9ee26060f85ab35b8d0b9" translate="yes" xml:space="preserve">
          <source>PerlIO::via::QuotedPrint in the Perl core and PerlIO::via::* on CPAN.</source>
          <target state="translated">PerlコアのPerlIO::via::QuotedPrintとCPANのPerlIO::via::*では、PerlIO::via::*を使用しています。</target>
        </trans-unit>
        <trans-unit id="031a53d77ac71ec3ef46da5f59553f918d566426" translate="yes" xml:space="preserve">
          <source>PerlIOBase(PerlIO *f) returns the &quot;Base&quot; pointer, or in other words, the &lt;code&gt;PerlIOl*&lt;/code&gt; pointer.</source>
          <target state="translated">PerlIOBase（PerlIO * f）は、「ベース」ポインタ、つまり、 &lt;code&gt;PerlIOl*&lt;/code&gt; ポインタを返します。</target>
        </trans-unit>
        <trans-unit id="b34114bdf01a0e654170651a1a2e3dc55613845c" translate="yes" xml:space="preserve">
          <source>PerlIOSelf(PerlIO* f, type) return the PerlIOBase cast to a type.</source>
          <target state="translated">PerlIOSelf(PerlIO*f,type)PerlIOBase を型にキャストして返します。</target>
        </trans-unit>
        <trans-unit id="d57d00fa34f5c798b1a3aa08845fb7d0cb59fd01" translate="yes" xml:space="preserve">
          <source>PerlIO_apply_layers(f,mode,layers)</source>
          <target state="translated">PerlIO_apply_layers(f,mode,layers)</target>
        </trans-unit>
        <trans-unit id="571d6043e2ec872d7cb6f9099f8b8245ff464e37" translate="yes" xml:space="preserve">
          <source>PerlIO_binmode(f,ptype,imode,layers)</source>
          <target state="translated">PerlIO_binmode(f,ptype,imode,layers)</target>
        </trans-unit>
        <trans-unit id="3d8d78d3151e28ab17b88db0695455690dcd0493" translate="yes" xml:space="preserve">
          <source>PerlIO_close</source>
          <target state="translated">PerlIO_close</target>
        </trans-unit>
        <trans-unit id="3be650734ae821da60ceb0f946fbc1e419f8206f" translate="yes" xml:space="preserve">
          <source>PerlIO_context_layers</source>
          <target state="translated">PerlIO_context_layers</target>
        </trans-unit>
        <trans-unit id="0255e27b57dfc3265eea6731c6b0c7839e9ab42d" translate="yes" xml:space="preserve">
          <source>PerlIO_debug is a printf()-like function which can be used for debugging. No return value. Its main use is inside PerlIO where using real printf, warn() etc. would recursively call PerlIO and be a problem.</source>
          <target state="translated">PerlIO_debugは、デバッグに使えるprintf()的な関数です。戻り値はありません。主な用途は PerlIO の内部で、実際の printf や warn()などを使用すると PerlIO を再帰的に呼び出して問題になる場合があります。</target>
        </trans-unit>
        <trans-unit id="89d032ee35b94a317d1e11679408a01d0f02011d" translate="yes" xml:space="preserve">
          <source>PerlIO_debug writes to the file named by $ENV{'PERLIO_DEBUG'} or defaults to stderr if the environment variable is not defined. Typical use might be</source>
          <target state="translated">PerlIO_debug は $ENV{'PERLIO_DEBUG'}で指定されたファイルに書き込みます。典型的な使用例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8a0fff3fc1334ecf07d826a061819bfc08e3aaea" translate="yes" xml:space="preserve">
          <source>PerlIO_debug writes to the file named by $ENV{'PERLIO_DEBUG'} typical use might be</source>
          <target state="translated">PerlIO_debug は $ENV{'PERLIO_DEBUG'}で指定されたファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="7a73888154ab95ec9d3189d67cc64d8a26900457" translate="yes" xml:space="preserve">
          <source>PerlIO_debug(fmt,...)</source>
          <target state="translated">PerlIO_debug(fmt,...)</target>
        </trans-unit>
        <trans-unit id="100b7f7c057785e0afeda1c6eecdad5e89f91daa" translate="yes" xml:space="preserve">
          <source>PerlIO_error</source>
          <target state="translated">PerlIO_error</target>
        </trans-unit>
        <trans-unit id="9e246fb113c359325db7b695c42623371987cfe5" translate="yes" xml:space="preserve">
          <source>PerlIO_fill</source>
          <target state="translated">PerlIO_fill</target>
        </trans-unit>
        <trans-unit id="13b27853883b92af97538fe15f7fe52484d7c534" translate="yes" xml:space="preserve">
          <source>PerlIO_flush</source>
          <target state="translated">PerlIO_flush</target>
        </trans-unit>
        <trans-unit id="efbc7a55cb5fc7dbd487f7b3df5582d0c9c5b4ab" translate="yes" xml:space="preserve">
          <source>PerlIO_get_bufsiz</source>
          <target state="translated">PerlIO_get_bufsiz</target>
        </trans-unit>
        <trans-unit id="c10b5fb9db4780628505f2900df4a076d31c1d81" translate="yes" xml:space="preserve">
          <source>PerlIO_get_ptr</source>
          <target state="translated">PerlIO_get_ptr</target>
        </trans-unit>
        <trans-unit id="7178d99df96dc1b4506cce98992701276d9c239e" translate="yes" xml:space="preserve">
          <source>PerlIO_read</source>
          <target state="translated">PerlIO_read</target>
        </trans-unit>
        <trans-unit id="c9db204115f2772dfe73d45d977a7ab26c3db174" translate="yes" xml:space="preserve">
          <source>PerlIO_restore_errno</source>
          <target state="translated">PerlIO_restore_errno</target>
        </trans-unit>
        <trans-unit id="4ea99c1a1f0e14060bbf9890b956ec2732fc7963" translate="yes" xml:space="preserve">
          <source>PerlIO_save_errno</source>
          <target state="translated">PerlIO_save_errno</target>
        </trans-unit>
        <trans-unit id="3448e5bfc541fa5c1c6f7d0c567036327a6d1b1d" translate="yes" xml:space="preserve">
          <source>PerlIO_seek</source>
          <target state="translated">PerlIO_seek</target>
        </trans-unit>
        <trans-unit id="c3494517fbb2fd9ae4140e2f05e92ed232d54343" translate="yes" xml:space="preserve">
          <source>PerlIO_set_cnt</source>
          <target state="translated">PerlIO_set_cnt</target>
        </trans-unit>
        <trans-unit id="28b9d60a7d7cdedf7f8eab9fbfb1586a5e74e162" translate="yes" xml:space="preserve">
          <source>PerlIO_setlinebuf</source>
          <target state="translated">PerlIO_setlinebuf</target>
        </trans-unit>
        <trans-unit id="d03e37a9fec4395065d7268bae0c026fec23c250" translate="yes" xml:space="preserve">
          <source>PerlIO_stdout</source>
          <target state="translated">PerlIO_stdout</target>
        </trans-unit>
        <trans-unit id="d0cbd7701c5904432f5b089a12f15c43e18b06f2" translate="yes" xml:space="preserve">
          <source>PerlIO_unread</source>
          <target state="translated">PerlIO_unread</target>
        </trans-unit>
        <trans-unit id="3557c0fab3f26cfdec99b940ea71520d75ea2ee0" translate="yes" xml:space="preserve">
          <source>PerlInterpreter</source>
          <target state="translated">PerlInterpreter</target>
        </trans-unit>
        <trans-unit id="38a6b25b1659011ae61cace35aeff9baee4a13cd" translate="yes" xml:space="preserve">
          <source>PerlLIO_dup2_cloexec</source>
          <target state="translated">PerlLIO_dup2_cloexec</target>
        </trans-unit>
        <trans-unit id="f6ea8eebfba4a8ab959f7002d307625e66933740" translate="yes" xml:space="preserve">
          <source>PerlLIO_dup_cloexec</source>
          <target state="translated">PerlLIO_dup_cloexec</target>
        </trans-unit>
        <trans-unit id="73de2727af3d3234d0781998f683251a2002d497" translate="yes" xml:space="preserve">
          <source>PerlLIO_open3_cloexec</source>
          <target state="translated">PerlLIO_open3_cloexec</target>
        </trans-unit>
        <trans-unit id="f2fae1f35dbb5d09391fca46f2a80c2f8e50cc8b" translate="yes" xml:space="preserve">
          <source>PerlLIO_open_cloexec</source>
          <target state="translated">PerlLIO_open_cloexec</target>
        </trans-unit>
        <trans-unit id="6feba0dc339a322bf408c0ef0a0d56e7e1816aa9" translate="yes" xml:space="preserve">
          <source>PerlMonks is one of the largest Perl forums, and describes itself as &quot;A place for individuals to polish, improve, and showcase their Perl skills.&quot; and &quot;A community which allows everyone to grow and learn from each other.&quot;</source>
          <target state="translated">PerlMonksは最大級のPerlフォーラムの一つで、&quot;個人がPerlのスキルを磨き、向上させ、披露する場所 &quot;と &quot;誰もが成長し、お互いから学ぶことができるコミュニティ &quot;と説明しています。</target>
        </trans-unit>
        <trans-unit id="96118a64fd38dbd81e3cb0e3744963bd1d54ba7a" translate="yes" xml:space="preserve">
          <source>PerlPower()</source>
          <target state="translated">PerlPower()</target>
        </trans-unit>
        <trans-unit id="f128e221d24537d88adf37c1080c58489584bc08" translate="yes" xml:space="preserve">
          <source>PerlProc_pipe_cloexec</source>
          <target state="translated">PerlProc_pipe_cloexec</target>
        </trans-unit>
        <trans-unit id="db63ab2940f098200e4ac58afc78b248f4d2fcb2" translate="yes" xml:space="preserve">
          <source>PerlShr.Exe</source>
          <target state="translated">PerlShr.Exe</target>
        </trans-unit>
        <trans-unit id="75aee309a8d63b5243b0d02f20422961a0ea87e9" translate="yes" xml:space="preserve">
          <source>PerlSock_accept_cloexec</source>
          <target state="translated">PerlSock_accept_cloexec</target>
        </trans-unit>
        <trans-unit id="24add7e2c5d5abdc4daafea395e2344696ac59c8" translate="yes" xml:space="preserve">
          <source>PerlSock_socket_cloexec</source>
          <target state="translated">PerlSock_socket_cloexec</target>
        </trans-unit>
        <trans-unit id="223a980cfc2b88529bd63e96b16d41c5cc62261a" translate="yes" xml:space="preserve">
          <source>PerlSock_socketpair_cloexec</source>
          <target state="translated">PerlSock_socketpair_cloexec</target>
        </trans-unit>
        <trans-unit id="097886f8ad6be4d2da4b42cedab0b39cdf7f9b1c" translate="yes" xml:space="preserve">
          <source>Perl_ VIO executable (statically linked)</source>
          <target state="translated">Perl_VIO実行ファイル(静的リンク)</target>
        </trans-unit>
        <trans-unit id="07121cdb0e428e6add9cbaefd2f84414e43aa38b" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_Base(PerlIO* f, callback, base, failure, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_Base(PerlIO*f,callback,base,failure,args)は</target>
        </trans-unit>
        <trans-unit id="2f0f41f617e9b822c0919fb0f159f1a51c8bb029" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_Base_void(PerlIO* f, callback, base, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_Base_void(PerlIO*f,callback,base,args)は</target>
        </trans-unit>
        <trans-unit id="81a3f26af0ca1bd5eb03eba445b883c96fd6bebb" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_fail(PerlIO* f, callback, failure, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_fail(PerlIO*f,callback,failure,args)は</target>
        </trans-unit>
        <trans-unit id="e4851451f4653d2e45acca412261ea7befab27cf" translate="yes" xml:space="preserve">
          <source>Perl_PerlIO_or_fail_void(PerlIO* f, callback, args) either calls the</source>
          <target state="translated">Perl_PerlIO_or_fail_void(PerlIO*f,callback,args)は</target>
        </trans-unit>
        <trans-unit id="2ed83c745e785ffa5b094c3edf1bccccffccea32" translate="yes" xml:space="preserve">
          <source>Perl_custom_op_xop</source>
          <target state="translated">Perl_custom_op_xop</target>
        </trans-unit>
        <trans-unit id="2bd7ba33bc197c1cac645c3fa7496edd8205233d" translate="yes" xml:space="preserve">
          <source>Perl_isinfnan() is utility function that returns true if the NV argument is either an infinity or a NaN, false otherwise. To test in more detail, use Perl_isinf() and Perl_isnan().</source>
          <target state="translated">Perl_isinfnan()は、NVの引数が無限大かNaNであれば真、そうでなければ偽を返すユーティリティ関数です。より詳細なテストを行うには、Perl_isinf()とPerl_isnan()を使用してください。</target>
        </trans-unit>
        <trans-unit id="9632627677c9064aca08da1e222aaa10c0c1893b" translate="yes" xml:space="preserve">
          <source>Perl_langinfo</source>
          <target state="translated">Perl_langinfo</target>
        </trans-unit>
        <trans-unit id="9ddad3a0f4e11c02b4e6bd2fa655acf548001837" translate="yes" xml:space="preserve">
          <source>Perl_my_%s() not available</source>
          <target state="translated">Perl_my_%s()が利用できません。</target>
        </trans-unit>
        <trans-unit id="b3f50fc46743d6c022f3455d5dab2d3097bb717c" translate="yes" xml:space="preserve">
          <source>Perl_setlocale</source>
          <target state="translated">Perl_setlocale</target>
        </trans-unit>
        <trans-unit id="d5a2a12addea9810bccfcba9c388e5aa60aaf3d9" translate="yes" xml:space="preserve">
          <source>Perl_signbit</source>
          <target state="translated">Perl_signbit</target>
        </trans-unit>
        <trans-unit id="c68adda4177619ceaf594bde89a717be1213ecd6" translate="yes" xml:space="preserve">
          <source>Perls since %s too modern--this is %s, stopped</source>
          <target state="translated">Perl は %s が現代的すぎるので--これは %s であり、停止しました。</target>
        </trans-unit>
        <trans-unit id="435a6fd71f06655224907356e4d56d72c377a1bd" translate="yes" xml:space="preserve">
          <source>Perls starting in 5.8 have a different Unicode model from 5.6. In 5.6 the programmer was required to use the &lt;code&gt;utf8&lt;/code&gt; pragma to declare that a given scope expected to deal with Unicode data and had to make sure that only Unicode data were reaching that scope. If you have code that is working with 5.6, you will need some of the following adjustments to your code. The examples are written such that the code will continue to work under 5.6, so you should be safe to try them out.</source>
          <target state="translated">5.8以降のPerlには、5.6とは異なるUnicodeモデルがあります。 5.6では、プログラマーは &lt;code&gt;utf8&lt;/code&gt; プラグマを使用して、特定のスコープがUnicodeデータを処理することを期待し、Unicodeデータのみがそのスコープに到達していることを確認する必要があることを宣言する必要がありました。 5.6で動作するコードがある場合、コードに対して以下の調整のいくつかが必要になります。例は、コードが5.6でも引き続き機能するように記述されているため、安全に試してみてください。</target>
        </trans-unit>
        <trans-unit id="b95bc9c4bdba73fd23a6e99cb0cb35ee28a07aa3" translate="yes" xml:space="preserve">
          <source>Permanently attach to the shared memory segment. When a &lt;code&gt;IPC::SharedMem&lt;/code&gt; object is attached, it will use &lt;a href=&quot;http://search.cpan.org/perldoc/memread&quot;&gt;memread&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/memwrite&quot;&gt;memwrite&lt;/a&gt; instead of &lt;a href=&quot;../functions/shmread&quot;&gt;shmread&lt;/a&gt; and &lt;a href=&quot;../functions/shmwrite&quot;&gt;shmwrite&lt;/a&gt; for accessing the shared memory segment. Returns true if successful, or false on error. See &lt;a href=&quot;http://search.cpan.org/perldoc/shmat&quot;&gt;shmat&lt;/a&gt;.</source>
          <target state="translated">共有メモリセグメントに永続的にアタッチします。場合 &lt;code&gt;IPC::SharedMem&lt;/code&gt; オブジェクトが装着され、それが使用する&lt;a href=&quot;http://search.cpan.org/perldoc/memread&quot;&gt;memread&lt;/a&gt;と&lt;a href=&quot;http://search.cpan.org/perldoc/memwrite&quot;&gt;memwrite&lt;/a&gt;代わりに&lt;a href=&quot;../functions/shmread&quot;&gt;shmread&lt;/a&gt;と&lt;a href=&quot;../functions/shmwrite&quot;&gt;shmwriteを&lt;/a&gt;共有メモリセグメントにアクセスします。成功した場合はtrue、エラーの場合はfalseを返します。&lt;a href=&quot;http://search.cpan.org/perldoc/shmat&quot;&gt;shmatを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c26d4aa620dca99b812bc4a79254d9e74d407fd7" translate="yes" xml:space="preserve">
          <source>Permanently attach to the shared memory segment. When a &lt;code&gt;IPC::SharedMem&lt;/code&gt; object is attached, it will use &lt;a href=&quot;memread&quot;&gt;memread&lt;/a&gt; and &lt;a href=&quot;memwrite&quot;&gt;memwrite&lt;/a&gt; instead of &lt;a href=&quot;shmread&quot;&gt;shmread&lt;/a&gt; and &lt;a href=&quot;shmwrite&quot;&gt;shmwrite&lt;/a&gt; for accessing the shared memory segment. Returns true if successful, or false on error. See &lt;a href=&quot;http://man.he.net/man2/shmat&quot;&gt;shmat(2)&lt;/a&gt;.</source>
          <target state="translated">共有メモリセグメントに永続的に接続します。場合 &lt;code&gt;IPC::SharedMem&lt;/code&gt; オブジェクトが装着され、それが使用する&lt;a href=&quot;memread&quot;&gt;memread&lt;/a&gt;と&lt;a href=&quot;memwrite&quot;&gt;memwrite&lt;/a&gt;代わりに&lt;a href=&quot;shmread&quot;&gt;shmread&lt;/a&gt;と&lt;a href=&quot;shmwrite&quot;&gt;shmwriteを&lt;/a&gt;共有メモリセグメントにアクセスします。成功した場合はtrueを返し、エラーの場合はfalseを返します。&lt;a href=&quot;http://man.he.net/man2/shmat&quot;&gt;shmat（2）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17c52fa4da091dd586a97843497807bc0e23a069" translate="yes" xml:space="preserve">
          <source>Permanently fixing locale problems</source>
          <target state="translated">ロケールの問題を恒久的に修正する</target>
        </trans-unit>
        <trans-unit id="2cf2947e5f569b9ea7e16800990428360247021e" translate="yes" xml:space="preserve">
          <source>Permanently fixing your system's locale configuration</source>
          <target state="translated">システムのロケール設定を恒久的に修正する</target>
        </trans-unit>
        <trans-unit id="9ab7f14d670c62039e207778bc0fed042486426a" translate="yes" xml:space="preserve">
          <source>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</source>
          <target state="translated">本ソフトウェアおよび関連文書ファイル(以下「本ソフトウェア」)のコピーを入手した人は、本ソフトウェアを無制限に扱うことができ、これには、本ソフトウェアのコピーを使用、コピー、変更、結合、出版、配布、サブライセンス、および/または販売する権利を含むが、以下の条件のもとで、本ソフトウェアを提供された人にそうすることを許可することを、無償で許可します。</target>
        </trans-unit>
        <trans-unit id="78d9cc4b4fc45291ef4d268d18882d87b86fac76" translate="yes" xml:space="preserve">
          <source>Permit</source>
          <target state="translated">Permit</target>
        </trans-unit>
        <trans-unit id="0f8250826e3e169df1c1ab3f1a4991fb276b498f" translate="yes" xml:space="preserve">
          <source>Permit the listed operators to be used when compiling code in the compartment (in</source>
          <target state="translated">コンパートメント内でコードをコンパイルする際に、以下の演算子を使用することを許可します。</target>
        </trans-unit>
        <trans-unit id="d4efe59e4dc596d83fe507198172c79c563d3297" translate="yes" xml:space="preserve">
          <source>Pern</source>
          <target state="translated">Pern</target>
        </trans-unit>
        <trans-unit id="b7871f509f5f98e4d602975abaec93401e8fa9c5" translate="yes" xml:space="preserve">
          <source>Persistence for Perl data structures</source>
          <target state="translated">Perlデータ構造体のための永続性</target>
        </trans-unit>
        <trans-unit id="f887bea11bbedab00d763b35a7c513eee8986177" translate="yes" xml:space="preserve">
          <source>Persistent Private Variables</source>
          <target state="translated">永続的なプライベート変数</target>
        </trans-unit>
        <trans-unit id="37fcb2b67d89818ceecfdb67f2459b636da00b36" translate="yes" xml:space="preserve">
          <source>Persistent variables via state()</source>
          <target state="translated">state()による永続的な変数</target>
        </trans-unit>
        <trans-unit id="2e14d0f6039c4bed4f250852e11a5960cec217cc" translate="yes" xml:space="preserve">
          <source>Persistent variables with closures</source>
          <target state="translated">クローザを持つ永続的な変数</target>
        </trans-unit>
        <trans-unit id="297062bf4f638f4e5a1559e426d9dca1019c35bc" translate="yes" xml:space="preserve">
          <source>Peter J. Farley III</source>
          <target state="translated">ピーター・J・ファーリー三世</target>
        </trans-unit>
        <trans-unit id="2443526b197b82e6711ce47499d4a744b2d3caac" translate="yes" xml:space="preserve">
          <source>Peter John Acklam</source>
          <target state="translated">ピーター・ジョン・アックラム</target>
        </trans-unit>
        <trans-unit id="9619c2ff06f7bbbafb0d5e9160ae26df77e91db0" translate="yes" xml:space="preserve">
          <source>Peter John Acklam &amp;lt;pjacklam@gmail.com&amp;lt;gt&amp;gt;, 2014-.</source>
          <target state="translated">Peter John Acklam &amp;lt;pjacklam@gmail.com&amp;lt;gt&amp;gt;, 2014-.</target>
        </trans-unit>
        <trans-unit id="0e9567258b003fa101683db10492bc177b3b183a" translate="yes" xml:space="preserve">
          <source>Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;</source>
          <target state="translated">Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;</target>
        </trans-unit>
        <trans-unit id="587cf83d47912d48cff152ba5703ff6e1be6461d" translate="yes" xml:space="preserve">
          <source>Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;, 2011-.</source>
          <target state="translated">Peter John Acklam &amp;lt;pjacklam@online.no&amp;gt;, 2011-.</target>
        </trans-unit>
        <trans-unit id="9ad3ffe64617bfe15d4f21e7a60a9ca00647098f" translate="yes" xml:space="preserve">
          <source>Peter John Acklam, &amp;lt;pjacklam@online.no&amp;gt;</source>
          <target state="translated">Peter John Acklam, &amp;lt;pjacklam@online.no&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a32278777d03ff2e6b6ad59e9b3657ba9315fcef" translate="yes" xml:space="preserve">
          <source>Peter Prymmer</source>
          <target state="translated">ピーター・プライマー</target>
        </trans-unit>
        <trans-unit id="c3032976541bf9515b50f93b039ec87133fcbe77" translate="yes" xml:space="preserve">
          <source>Peter Prymmer pvhp@best.com wrote this in 1999 and 2000 with CCSID 0819 and 0037 help from Chris Leach and Andr&amp;eacute; Pirard A.Pirard@ulg.ac.be as well as POSIX-BC help from Thomas Dorner Thomas.Dorner@start.de. Thanks also to Vickie Cooper, Philip Newton, William Raffloer, and Joe Smith. Trademarks, registered trademarks, service marks and registered service marks used in this document are the property of their respective owners.</source>
          <target state="translated">Peter Prymmer pvhp@best.comは、1999年と2000年に、CCSID 0819および0037の助けを借りてChris LeachとAndr&amp;eacute;Pirard A.Pirard@ulg.ac.beから、POSIX-BCの助けをThomas Dorner Thomas.Dorner@startから書きました。ド。Vickie Cooper、Philip Newton、William Raffloer、およびJoe Smithにも感謝します。このドキュメントで使用されている商標、登録商標、サービスマーク、および登録サービスマークは、それぞれの所有者に帰属します。</target>
        </trans-unit>
        <trans-unit id="b678d41f58da447298d919f29043393443d0cb8b" translate="yes" xml:space="preserve">
          <source>Peter Rabbitson</source>
          <target state="translated">ピーター・ラビッツソン</target>
        </trans-unit>
        <trans-unit id="898a609b1123bee03d0fba96ca647e344dd3c879" translate="yes" xml:space="preserve">
          <source>Peter Rabbitson &amp;lt;ribasushi@cpan.org&amp;gt;</source>
          <target state="translated">Peter Rabbitson &amp;lt;ribasushi@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9a6caa883001f8951928abc18a49fa0996873b1e" translate="yes" xml:space="preserve">
          <source>Peter Scott &amp;lt;Peter@PSDT.com&amp;gt;</source>
          <target state="translated">ピータースコット&amp;lt;Peter@PSDT.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6bf5b1ffed5896f2003c72c19a4b2211605af373" translate="yes" xml:space="preserve">
          <source>Petr P&amp;iacute;sař &amp;lt;ppisar@redhat.com&amp;gt;</source>
          <target state="translated">Petr P&amp;iacute;sař &amp;lt;ppisar@redhat.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9bab0d91a1e342ed2899a60bb0fd7fbb5d908345" translate="yes" xml:space="preserve">
          <source>Phase-specific attribute handlers</source>
          <target state="translated">フェーズ固有の属性ハンドラ</target>
        </trans-unit>
        <trans-unit id="1299c5da4d36f7c6543acebafdc41ccf1b565939" translate="yes" xml:space="preserve">
          <source>Phases</source>
          <target state="translated">Phases</target>
        </trans-unit>
        <trans-unit id="11224e45779f711f0ecc038e4dc550b38b44febf" translate="yes" xml:space="preserve">
          <source>Philippe Bruhat &amp;lt;book@cpan.org&amp;gt;</source>
          <target state="translated">Philippe Bruhat &amp;lt;book@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8067364d44f5e37baba7e13ba124e934df410e2a" translate="yes" xml:space="preserve">
          <source>Philippines</source>
          <target state="translated">Philippines</target>
        </trans-unit>
        <trans-unit id="b7b6129ef396633c6d7fbf8b5ba6a676cf84b685" translate="yes" xml:space="preserve">
          <source>Philosophy and History</source>
          <target state="translated">哲学と歴史</target>
        </trans-unit>
        <trans-unit id="a7ca65a16231d5ab21bb882a874c4184071b79df" translate="yes" xml:space="preserve">
          <source>Pick one style or another of &quot;TODO&quot; to be on the safe side.</source>
          <target state="translated">安全な側にいるために「TODO」の一つのスタイル、または別のスタイルを選ぶ。</target>
        </trans-unit>
        <trans-unit id="d9e68904cd8d62a6bd9853c94a5ff5af64e98135" translate="yes" xml:space="preserve">
          <source>Picture lines contain output field definitions, intermingled with literal text. These lines do not undergo any kind of variable interpolation. Field definitions are made up from a set of characters, for starting and extending a field to its desired width. This is the complete set of characters for field definitions:</source>
          <target state="translated">ピクチャ行は、リテラルテキストと混在した出力フィールド定義を含んでいます。こ れ ら の行は、 いかなる種類の可変補間も受けません。フ ィ ール ド 定義は、 フ ィ ール ド を開始 し 、 希望の幅に拡張す る ためのキ ャ ラ ク タ 群で構成 さ れています。これがフィールド定義のための文字の完全なセットです。</target>
        </trans-unit>
        <trans-unit id="2ce99d2159f85cc771804ecbd9dda841764e190d" translate="yes" xml:space="preserve">
          <source>Pictures help... Here's the &lt;code&gt;%hash&lt;/code&gt; table:</source>
          <target state="translated">写真が役立ちます...これが &lt;code&gt;%hash&lt;/code&gt; テーブルです：</target>
        </trans-unit>
        <trans-unit id="c65c8c71a5372d959508dd740dbc1277950d7e03" translate="yes" xml:space="preserve">
          <source>Pictures of the characters in</source>
          <target state="translated">登場人物の写真</target>
        </trans-unit>
        <trans-unit id="576c308de400973ac0e3b490eedf5eb2dfd16554" translate="yes" xml:space="preserve">
          <source>Ping the configured mirrors and print a report</source>
          <target state="translated">設定されたミラーをPingしてレポートを印刷する</target>
        </trans-unit>
        <trans-unit id="f0a9c866fde7f49d0c8287047fc7266c3fcf3448" translate="yes" xml:space="preserve">
          <source>Ping the remote host and wait for a response. $host can be either the hostname or the IP number of the remote host. The optional timeout must be greater than 0 seconds and defaults to whatever was specified when the ping object was created. Returns a success flag. If the hostname cannot be found or there is a problem with the IP number, the success flag returned will be undef. Otherwise, the success flag will be 1 if the host is reachable and 0 if it is not. For most practical purposes, undef and 0 and can be treated as the same case. In array context, the elapsed time as well as the string form of the ip the host resolved to are also returned. The elapsed time value will be a float, as returned by the Time::HiRes::time() function, if hires() has been previously called, otherwise it is returned as an integer.</source>
          <target state="translated">リモートホストに Ping を送信し、応答を待ちます。host には、リモートホストのホスト名または IP 番号を指定します。オプションのタイムアウトは 0 秒以上でなければなりません。 デフォルトは、ping オブジェクトの作成時に指定したものです。成功フラグを返します。ホスト名が見つからなかったり、IP 番号に問題がある場合は、成功フラグは undef となります。それ以外の場合、成功フラグは、ホストに到達可能な場合は 1、到達できない場合は 0 となります。ほとんどの実用的な目的では、 undef と 0 とは同じケースとして扱うことができます。配列コンテキストでは、経過時間とホストが解決した ip の文字列形式も返されます。経過時間の値は、以前に hires()が呼び出されていた場合は、Time::HiRes::time()関数によって返される float で、そうでない場合は整数として返されます。</target>
        </trans-unit>
        <trans-unit id="07ec367a9d37985bd6dc081364fe2955df9103f5" translate="yes" xml:space="preserve">
          <source>Piotr Roszatycki &amp;lt;piotr.roszatycki@gmail.com&amp;gt;</source>
          <target state="translated">Piotr Roszatycki &amp;lt;piotr.roszatycki@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="bbc0c839f8f40b7cdba9f85501b6142c7594b73f" translate="yes" xml:space="preserve">
          <source>Pipe-open (see &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;) with the command which contains redirection or shell meta-characters;</source>
          <target state="translated">パイプオープン（参照&lt;a href=&quot;functions/open&quot;&gt;オープン&lt;/a&gt;）リダイレクトまたはシェルのメタ文字が含まれているコマンドを使用して、</target>
        </trans-unit>
        <trans-unit id="5e4c7a898c7f3c0a7c60e0a1f604f62469eeccef" translate="yes" xml:space="preserve">
          <source>Pipe-open (see &lt;a href=&quot;perlfunc#open&quot;&gt;&quot;open&quot; in perlfunc&lt;/a&gt;) with the command which contains redirection or shell meta-characters;</source>
          <target state="translated">リダイレクトまたは&lt;a href=&quot;perlfunc#open&quot;&gt;シェルメタ&lt;/a&gt;文字を含むコマンドを使用してパイプオープン（perlfuncの「open」を参照）。</target>
        </trans-unit>
        <trans-unit id="32b1d5a78493496dd5152fd2d504f7e21009e3f2" translate="yes" xml:space="preserve">
          <source>Pipeline</source>
          <target state="translated">Pipeline</target>
        </trans-unit>
        <trans-unit id="785af2a4ad3c4ee912623c6e0b6d4299ea305bf6" translate="yes" xml:space="preserve">
          <source>Pipes</source>
          <target state="translated">Pipes</target>
        </trans-unit>
        <trans-unit id="86638d4dd1bfeebd306bf371ebd586c8fe132936" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack.</source>
          <target state="translated">場所 &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; 指定された位置に &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; のスタック上。</target>
        </trans-unit>
        <trans-unit id="667a33361c3428c4b6aa60ad95cf789c3ab5ca45" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack.</source>
          <target state="translated">場所 &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; 指定された位置に &lt;code&gt;pos&lt;/code&gt; のスタック上。</target>
        </trans-unit>
        <trans-unit id="dfd0139035f77f7f1b17632082240cf0b36e9af1" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack.</source>
          <target state="translated">場所 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; 指定された位置に &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; のスタック上。</target>
        </trans-unit>
        <trans-unit id="1bb0eaf6fb6e81489445c95594e8a4006384093d" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack.</source>
          <target state="translated">場所 &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; 指定された位置に &lt;code&gt;pos&lt;/code&gt; のスタック上。</target>
        </trans-unit>
        <trans-unit id="916f413ffd5622b866aac763ff8940f66e4a31b9" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack.</source>
          <target state="translated">場所 &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; 指定された位置に &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; のスタック上。</target>
        </trans-unit>
        <trans-unit id="9e6b770ad9c900ebf8f52e20c4972e42b76ef551" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack.</source>
          <target state="translated">場所 &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; 指定された位置に &lt;code&gt;pos&lt;/code&gt; のスタック上。</target>
        </trans-unit>
        <trans-unit id="9b6d516f55eff9b2bccabbdde7685a4b4a9da03f" translate="yes" xml:space="preserve">
          <source>Place a copy of a string into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">文字列のコピーをスタックの指定された位置 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; に配置します。値は新しいモータルSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="0280f1983669ea3d48307e5d81450dc6030237bb" translate="yes" xml:space="preserve">
          <source>Place a copy of a string into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">指定された位置に文字列のコピーを置き &lt;code&gt;pos&lt;/code&gt; スタック上。値は新しい致命的なSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="4e9ab6d8d695d32843b4420d43d220a9cd88325d" translate="yes" xml:space="preserve">
          <source>Place a double into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">スタックの指定された位置 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; にdoubleを配置します。値は新しいモータルSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="acaa37c824afdb131865b7892e6a4b9ea9e6bb6f" translate="yes" xml:space="preserve">
          <source>Place a double into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">指定された位置にダブルを置き &lt;code&gt;pos&lt;/code&gt; スタック上。値は新しい致命的なSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="cfd0007151ad5655c9cbf9340c82d4632eb28b7a" translate="yes" xml:space="preserve">
          <source>Place a message on the queue with the data from &lt;code&gt;MSG&lt;/code&gt; and with type &lt;code&gt;TYPE&lt;/code&gt; . See &lt;a href=&quot;../functions/msgsnd&quot;&gt;msgsnd&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MSG&lt;/code&gt; からのデータとタイプ &lt;code&gt;TYPE&lt;/code&gt; のメッセージをキューに入れます。&lt;a href=&quot;../functions/msgsnd&quot;&gt;msgsndを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0e44c92ac9de84e3be1e9794c9e8e47af2229079" translate="yes" xml:space="preserve">
          <source>Place a message on the queue with the data from &lt;code&gt;MSG&lt;/code&gt; and with type &lt;code&gt;TYPE&lt;/code&gt;. See &lt;a href=&quot;http://man.he.net/man2/msgsnd&quot;&gt;msgsnd(2)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MSG&lt;/code&gt; からのデータとタイプ &lt;code&gt;TYPE&lt;/code&gt; のメッセージをキューに入れます。&lt;a href=&quot;http://man.he.net/man2/msgsnd&quot;&gt;msgsnd（2）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="25d30c30326aad079b79429ee5676ce31987795b" translate="yes" xml:space="preserve">
          <source>Place an integer into the specified position &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">スタック上の指定された位置 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;&lt;/code&gt; に整数を配置します。値は新しいモータルSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="710e9af5bbb2e9924ef8178acb3d4818fea16e1d" translate="yes" xml:space="preserve">
          <source>Place an integer into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">指定された位置に整数を配置 &lt;code&gt;pos&lt;/code&gt; スタック。値は新しい致命的なSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="751296589ec0d0f52635e93df3addb6811063c1f" translate="yes" xml:space="preserve">
          <source>Place an unsigned integer into the specified position &lt;code&gt;pos&lt;/code&gt; on the stack. The value is stored in a new mortal SV.</source>
          <target state="translated">指定された位置に符号なし整数を配置 &lt;code&gt;pos&lt;/code&gt; スタック。値は新しい致命的なSVに保存されます。</target>
        </trans-unit>
        <trans-unit id="7ab3cd1c8c731f94b45abaa6c37498e8157e7f50" translate="yes" xml:space="preserve">
          <source>Placeholder for a, w, t, T</source>
          <target state="translated">a,w,t,T のプレースホルダ</target>
        </trans-unit>
        <trans-unit id="51c02f2095250dc21f9cbdf7822d894accd922c2" translate="yes" xml:space="preserve">
          <source>Plain &lt;code&gt;eval&lt;/code&gt; with no argument is just &lt;code&gt;eval EXPR&lt;/code&gt;, where the expression is understood to be contained in &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;. Thus there are only two real &lt;code&gt;eval&lt;/code&gt; forms; the one with an EXPR is often called &quot;string eval&quot;. In a string eval, the value of the expression (which is itself determined within scalar context) is first parsed, and if there were no errors, executed as a block within the lexical context of the current Perl program. This form is typically used to delay parsing and subsequent execution of the text of EXPR until run time. Note that the value is parsed every time the &lt;code&gt;eval&lt;/code&gt; executes.</source>
          <target state="translated">平野 &lt;code&gt;eval&lt;/code&gt; の引数なしではただで &lt;code&gt;eval EXPR&lt;/code&gt; 式は内に含まれるものと理解され、&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;。したがって、実際の &lt;code&gt;eval&lt;/code&gt; 形式は2つだけです。EXPRのあるものは、しばしば「文字列評価」と呼ばれます。文字列evalでは、式の値（それ自体がスカラーコンテキスト内で決定されます）が最初に解析され、エラーがなかった場合は、現在のPerlプログラムの字句コンテキスト内でブロックとして実行されます。この形式は通常、実行時までEXPRのテキストの解析とその後の実行を遅らせるために使用されます。 &lt;code&gt;eval&lt;/code&gt; が実行されるたびに値が解析されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="054293d76d1e13ea0985d27d43a20139eff0cdfe" translate="yes" xml:space="preserve">
          <source>Plain Old Comments (Not!)</source>
          <target state="translated">プレーンオールドコメント(違う!?</target>
        </trans-unit>
        <trans-unit id="9580fcbce0c31ceaa47eb583e5f7ce637fdc8a0a" translate="yes" xml:space="preserve">
          <source>Plain text</source>
          <target state="translated">プレーンテキスト</target>
        </trans-unit>
        <trans-unit id="ae2f98a099fe5855c31126233e9c13641ee7fdba" translate="yes" xml:space="preserve">
          <source>Plan</source>
          <target state="translated">Plan</target>
        </trans-unit>
        <trans-unit id="253c3601a5c1772632a58221b654c54c8e50d5ad" translate="yes" xml:space="preserve">
          <source>Plan 9,</source>
          <target state="translated">プラン9</target>
        </trans-unit>
        <trans-unit id="385e0a23397d52d755976c0e7320a1e9bbbbf5ea" translate="yes" xml:space="preserve">
          <source>Plan events are fired off whenever a plan is declared, done testing is called, or a subtext completes.</source>
          <target state="translated">プランイベントは、プランが宣言されたとき、完了したテストが呼び出されたとき、またはサブテキストが完了したときに発射されます。</target>
        </trans-unit>
        <trans-unit id="24aa0fed2f1fce379a116b32ca6b7911453a9150" translate="yes" xml:space="preserve">
          <source>Plan handling lifted from Test::More. written by Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;.</source>
          <target state="translated">Test :: Moreから解除されたプラン処理。Michael G Schwern &amp;lt;schwern@pobox.com&amp;gt;によって書かれました。</target>
        </trans-unit>
        <trans-unit id="4b2cf4211ed36a7b6ec3c0f885611d65d2982aae" translate="yes" xml:space="preserve">
          <source>Plan result token.</source>
          <target state="translated">結果トークンを計画します。</target>
        </trans-unit>
        <trans-unit id="89a27c59b357dc17fcf14a17fcc79f90df885094" translate="yes" xml:space="preserve">
          <source>Plane 0</source>
          <target state="translated">平面0</target>
        </trans-unit>
        <trans-unit id="8be58825425054cbd0b59342becdd853b8548be0" translate="yes" xml:space="preserve">
          <source>Platform Specific</source>
          <target state="translated">プラットフォーム固有の</target>
        </trans-unit>
        <trans-unit id="e0bdb4c07f2772a4a54cf92695aa356c9a6579b0" translate="yes" xml:space="preserve">
          <source>Platform abstraction over &lt;code&gt;inet_ntop()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inet_ntop()&lt;/code&gt; によるプラットフォームの抽象化</target>
        </trans-unit>
        <trans-unit id="96c39100db86a74639c0232bfd97c1daf53f3255" translate="yes" xml:space="preserve">
          <source>Platform and configuration independent &lt;code&gt;strtol&lt;/code&gt;. This expands to the appropriate &lt;code&gt;strotol&lt;/code&gt;-like function based on the platform and</source>
          <target state="translated">プラットフォームと構成に依存しない &lt;code&gt;strtol&lt;/code&gt; 。これは、プラットフォームに基づいて適切な &lt;code&gt;strotol&lt;/code&gt; ような機能に拡張され、</target>
        </trans-unit>
        <trans-unit id="8fbe98f422743bc7e2a75d7c1f99951eb4321f74" translate="yes" xml:space="preserve">
          <source>Platform and configuration independent &lt;code&gt;strtoul&lt;/code&gt;. This expands to the appropriate &lt;code&gt;strotoul&lt;/code&gt;-like function based on the platform and</source>
          <target state="translated">プラットフォームと構成に依存しない &lt;code&gt;strtoul&lt;/code&gt; 。これは、プラットフォームに基づいた適切な &lt;code&gt;strotoul&lt;/code&gt; ような機能に拡張され、</target>
        </trans-unit>
        <trans-unit id="eb666bc9b27013cda41fa8a2da0d844236374b6f" translate="yes" xml:space="preserve">
          <source>Platform-Specific</source>
          <target state="translated">Platform-Specific</target>
        </trans-unit>
        <trans-unit id="eef47a635b38ce4bb5160d8fbf43c327f07918d8" translate="yes" xml:space="preserve">
          <source>Platform-agnostic MM methods</source>
          <target state="translated">プラットフォームにとらわれないMMメソッド</target>
        </trans-unit>
        <trans-unit id="efc0c78db0c6b708dec802259186b13ee8606a83" translate="yes" xml:space="preserve">
          <source>Platform-specific pieces of the build system also live in platform-specific directories like</source>
          <target state="translated">ビルドシステムのプラットフォーム固有の部分は、以下のようなプラットフォーム固有のディレクトリにも存在します。</target>
        </trans-unit>
        <trans-unit id="67155fe2d558d3be96473a78ebaa5f39e1acf3d8" translate="yes" xml:space="preserve">
          <source>Platforms that do not have &lt;code&gt;rdev&lt;/code&gt;, &lt;code&gt;blksize&lt;/code&gt;, or &lt;code&gt;blocks&lt;/code&gt; will return these as &lt;code&gt;''&lt;/code&gt;, so numeric comparison or manipulation of these fields may cause 'not numeric' warnings.</source>
          <target state="translated">&lt;code&gt;rdev&lt;/code&gt; 、 &lt;code&gt;blksize&lt;/code&gt; 、または &lt;code&gt;blocks&lt;/code&gt; がないプラットフォームは、これらを &lt;code&gt;''&lt;/code&gt; として返すため、これらのフィールドを数値で比較または操作すると、「数値ではない」という警告が表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="2151168060825531d644ad2c9ef307ad23d45dd1" translate="yes" xml:space="preserve">
          <source>Platforms that do not have rdev, blksize, or blocks will return these as '', so numeric comparison or manipulation of these fields may cause 'not numeric' warnings.</source>
          <target state="translated">rdev、blksize、ブロックを持たないプラットフォームでは、これらは '' として返されるので、数値比較やこれらのフィールドを操作すると 'not numeric' 警告が出ることがあります。</target>
        </trans-unit>
        <trans-unit id="cb78dc6caa9da43d8d82895592406c2fb238b4d0" translate="yes" xml:space="preserve">
          <source>Playing Safe</source>
          <target state="translated">安全に遊ぶ</target>
        </trans-unit>
        <trans-unit id="f5f50c6b28a2dbf428734248274d14fcc946d37a" translate="yes" xml:space="preserve">
          <source>Please add examples to what follows!</source>
          <target state="translated">以下の内容に例を追加してください</target>
        </trans-unit>
        <trans-unit id="90db41980a6ddf9879d54f849f2452dacbc9ddd8" translate="yes" xml:space="preserve">
          <source>Please be aware that code in debugger listings may not look the same as your original source code. Line directives and external source filters can alter the code before Perl sees it, causing code to move from its original positions or take on entirely different forms.</source>
          <target state="translated">デバッガ・リストのコードは、元のソース・コードと同じようには見えないかもしれないことに注意してください。行ディレクティブや外部ソースフィルタは、Perl が見る前にコードを変更し、コードが元の位置から移動したり、全く異なる形になったりすることがあります。</target>
        </trans-unit>
        <trans-unit id="6e35b70405206d942352bd9cec349bc8a7f2d0ac" translate="yes" xml:space="preserve">
          <source>Please check individual plugin documentation for more details.</source>
          <target state="translated">詳細は各プラグインのドキュメントをご確認ください。</target>
        </trans-unit>
        <trans-unit id="46a88c30ac9775bf9675292bcf8883102c284165" translate="yes" xml:space="preserve">
          <source>Please check the archive of the perl5-porters list (see below) and/or the bug tracking system before submitting a bug report. Often, you'll find that the bug has been reported already.</source>
          <target state="translated">バグレポートを提出する前に、 perl5-porters リストのアーカイブ (下記参照)やバグ追跡システムをチェックしてください。しばしば、そのバグがすでに報告されていることに気づくでしょう。</target>
        </trans-unit>
        <trans-unit id="30d084e470b1305e613cce5c8a8f760ce12b4e60" translate="yes" xml:space="preserve">
          <source>Please e-mail us with problems, bug fixes, comments and complaints, although if you have compliments you should send them to Raphael. Please don't e-mail Raphael with problems, as he no longer works on Storable, and your message will be delayed while he forwards it to us.</source>
          <target state="translated">問題、バグ修正、コメント、苦情などがあれば、Raphaelに送ってください。ラファエルはもうStorableでは働いていないので、問題があってもメールを送らないでください。</target>
        </trans-unit>
        <trans-unit id="c431b3a19986ac53c575f9800468af7f81b46d87" translate="yes" xml:space="preserve">
          <source>Please feedback what is wrong</source>
          <target state="translated">何が悪いのかフィードバックしてください</target>
        </trans-unit>
        <trans-unit id="30c152b00259545a7771c21e247f5c5553ad4a6f" translate="yes" xml:space="preserve">
          <source>Please inform the module author if this is necessary to successfully install a module under 5.6 or later.</source>
          <target state="translated">5.6 以降のモジュールを正常にインストールするために必要な場合は、モジュール作者に連絡してください。</target>
        </trans-unit>
        <trans-unit id="8b79f33567ebd39e312df677117f1f02c643059b" translate="yes" xml:space="preserve">
          <source>Please keep this list up-to-date by informing me about other items.</source>
          <target state="translated">このリストには、他の項目についてもお知らせしていますので、これからもよろしくお願いします。</target>
        </trans-unit>
        <trans-unit id="d8e4357df6c51adf400f25dbaa777916223b07af" translate="yes" xml:space="preserve">
          <source>Please make sure the SDK version (i.e. the numbers right before '.sdk') matches your system's (in this case, Mac OS X 10.8 &quot;Mountain Lion&quot;), as it is possible to have more than one SDK installed. Also make sure the path exists in your system, and if it doesn't please make sure the SDK is properly installed, as it should come with the 'Command Line Tools' bundle mentioned above. Finally, if you have an older Mac OS X (10.6 &quot;Snow Leopard&quot; and below) running Xcode 4.2 or lower, the SDK path might be something like &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt; .</source>
          <target state="translated">複数のSDKがインストールされている可能性があるため、SDKバージョン（つまり、「。sdk」の直前の数字）がシステム（この場合はMac OS X 10.8「Mountain Lion」）と一致していることを確認してください。また、システムにパスが存在することを確認します。存在しない場合は、SDKが正しくインストールされていることを確認してください。SDKには上記の「コマンドラインツール」バンドルが付属しているはずです。最後に、Xcode 4.2以下を実行している古いMac OS X（10.6 &quot;Snow Leopard&quot;以下）を使用している場合、SDKパスは &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt; のようになります。</target>
        </trans-unit>
        <trans-unit id="83b8ae2c8755481b5060b9d197a3f14fa03b0c26" translate="yes" xml:space="preserve">
          <source>Please make sure the SDK version (i.e. the numbers right before '.sdk') matches your system's (in this case, Mac OS X 10.8 &quot;Mountain Lion&quot;), as it is possible to have more than one SDK installed. Also make sure the path exists in your system, and if it doesn't please make sure the SDK is properly installed, as it should come with the 'Command Line Tools' bundle mentioned above. Finally, if you have an older Mac OS X (10.6 &quot;Snow Leopard&quot; and below) running Xcode 4.2 or lower, the SDK path might be something like &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt;.</source>
          <target state="translated">複数のSDKがインストールされている可能性があるため、SDKのバージョン（つまり、「。sdk」の直前の番号）がシステム（この場合はMac OS X 10.8「MountainLion」）と一致していることを確認してください。また、パスがシステムに存在することを確認してください。存在しない場合は、SDKが正しくインストールされていることを確認してください。これは、上記の「コマンドラインツール」バンドルに付属しているはずです。最後に、 &lt;code&gt;'/Developer/SDKs/MacOSX10.3.9.sdk'&lt;/code&gt; 以下を実行している古いMacOS X（10.6「SnowLeopard」以下）を使用している場合、SDKパスは「/Developer/SDKs/MacOSX10.3.9.sdk」のようになります。</target>
        </trans-unit>
        <trans-unit id="93b9716fcd4491544e9d39d5e1bcaaba2e6587ef" translate="yes" xml:space="preserve">
          <source>Please make sure you add the perldelta entry to the right section within</source>
          <target state="translated">ペルデルタのエントリを右のセクションに追加してください。</target>
        </trans-unit>
        <trans-unit id="4af848fa0de6bb5d98f95a63ab5b33868a64d534" translate="yes" xml:space="preserve">
          <source>Please make your issue title informative. &quot;a bug&quot; is not informative. Neither is &quot;perl crashes&quot; nor is &quot;HELP!!!&quot;. These don't help. A compact description of what's wrong is fine.</source>
          <target state="translated">課題のタイトルを情報量の多いものにしてください。&quot;a bug&quot; は参考になりません。perl crashes」も「HELP! これらは何の役にも立ちません。何が問題なのかをコンパクトに説明してくれればいいのです。</target>
        </trans-unit>
        <trans-unit id="23a323093ed3237613762e5f23d911eb5beeb543" translate="yes" xml:space="preserve">
          <source>Please note a significant difference in the behavior of &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; mode is that it does not force a VMS SEVERE_ERROR status on exit. The Unix exit values of 2 through 255 will be encoded in VMS status values with severity levels of SUCCESS. The Unix exit value of 1 will be encoded in a VMS status value with a severity level of ERROR. This is to be compatible with how the VMS C library encodes these values.</source>
          <target state="translated">行動に大きな差がありますのでご注意ください &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; のモードは、それが終了時にVMS SEVERE_ERRORのステータスを強制しないことです。Unixの終了値2〜255は、重大度レベルがSUCCESSのVMSステータス値にエンコードされます。Unixの終了値1は、重大度レベルがERRORのVMSステータス値にエンコードされます。これは、VMS Cライブラリがこれらの値をエンコードする方法と互換性があります。</target>
        </trans-unit>
        <trans-unit id="6c177938660fc8c8c17b75bc3c856520fd266ed0" translate="yes" xml:space="preserve">
          <source>Please note a significant difference in the behavior of &lt;code&gt;die&lt;/code&gt; in the &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; mode is that it does not force a VMS SEVERE_ERROR status on exit. The Unix exit values of 2 through 255 will be encoded in VMS status values with severity levels of SUCCESS. The Unix exit value of 1 will be encoded in a VMS status value with a severity level of ERROR. This is to be compatible with how the VMS C library encodes these values.</source>
          <target state="translated">行動に大きな差がありますのでご注意ください &lt;code&gt;die&lt;/code&gt; で &lt;code&gt;PERL_VMS_POSIX_EXIT&lt;/code&gt; のモードは、それが終了時にVMS SEVERE_ERRORのステータスを強制しないことです。2〜255のUnix出口値は、重大度レベルがSUCCESSのVMSステータス値にエンコードされます。Unixの終了値1は、重大度レベルERRORのVMSステータス値にエンコードされます。これは、VMSCライブラリがこれらの値をエンコードする方法と互換性があるためです。</target>
        </trans-unit>
        <trans-unit id="acb93428fa7988b6bd9d3d5b914c777174b9e347" translate="yes" xml:space="preserve">
          <source>Please note that ':constant' does not affect integer constants, nor binary nor hexadecimal constants. Use &lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt; or &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt; to get this to work.</source>
          <target state="translated">'：constant'は整数定数、2進定数、16進定数には影響しないことに注意してください。これを機能させるには、&lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt;または&lt;a href=&quot;bigint&quot;&gt;Math :: BigInt&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="06ca6df37fb7aa8ce55441f1d546847190fefd39" translate="yes" xml:space="preserve">
          <source>Please note that ':constant' does not affect integer constants, nor binary nor hexadecimal constants. Use &lt;a href=&quot;bignum&quot;&gt;bignum&lt;/a&gt; or &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; to get this to work.</source>
          <target state="translated">'：constant'は整数定数にも、2進定数にも16進定数にも影響しないことに注意してください。これを機能させるには、&lt;a href=&quot;bignum&quot;&gt;bignum&lt;/a&gt;または&lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigInt&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="2d144a30f04447f4891231cca52898c1f409adce" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($tabstop)&lt;/a&gt;&lt;/code&gt; doesn't do the right thing and if you want to use &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; to override &lt;code&gt;$tabstop&lt;/code&gt; , you need to use &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($Text::Tabs::tabstop)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ノートはことをしてください &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($tabstop)&lt;/a&gt;&lt;/code&gt; 正しいことをしないと、使用したい場合は &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; オーバーライドするために &lt;code&gt;$tabstop&lt;/code&gt; 、あなたが使用する必要があり &lt;code&gt;&lt;a href=&quot;../functions/local&quot;&gt;local($Text::Tabs::tabstop)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9aa5bbfabef472a29774dca149c4460b4d54f432" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;local($tabstop)&lt;/code&gt; doesn't do the right thing and if you want to use &lt;code&gt;local&lt;/code&gt; to override &lt;code&gt;$tabstop&lt;/code&gt;, you need to use &lt;code&gt;local($Text::Tabs::tabstop)&lt;/code&gt;.</source>
          <target state="translated">ノートはことをしてください &lt;code&gt;local($tabstop)&lt;/code&gt; 正しいことをしないと、使用したい場合は &lt;code&gt;local&lt;/code&gt; オーバーライドするために &lt;code&gt;$tabstop&lt;/code&gt; 、あなたが使用する必要があり &lt;code&gt;local($Text::Tabs::tabstop)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="633a4db7a1c782ae1b6e824e0fc9e69a016269b6" translate="yes" xml:space="preserve">
          <source>Please note that Math::BigFloat does &lt;b&gt;not&lt;/b&gt; use the denoted library itself, but it merely passes the lib argument to Math::BigInt. So, instead of the need to do:</source>
          <target state="translated">Math :: BigFloatは指定されたライブラリ自体を使用せ&lt;b&gt;ず&lt;/b&gt;、lib引数をMath :: BigIntに渡すだけであることに注意してください。だから、する必要の代わりに：</target>
        </trans-unit>
        <trans-unit id="a54801dfc85b8f9fc3dbd94457ccfddcfab12f10" translate="yes" xml:space="preserve">
          <source>Please note that POD has the notion of &quot;paragraphs&quot;: this is something starting</source>
          <target state="translated">PODには「段落」という概念があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="72307c57d87a56e5608808a2107363696283fed6" translate="yes" xml:space="preserve">
          <source>Please note that if multiple files are parsed for a single POD document (perhaps the result of some kind of &lt;code&gt;=include&lt;/code&gt; directive) this method is invoked for every file that is parsed. If you wish to perform certain cleanup actions once per document, then you should use &lt;b&gt;end_pod()&lt;/b&gt;.</source>
          <target state="translated">単一のPODドキュメントについて複数のファイルが解析される場合（おそらく、ある種の &lt;code&gt;=include&lt;/code&gt; ディレクティブの結果）、このメソッドは解析されるすべてのファイルに対して呼び出されることに注意してください。ドキュメントごとに1回特定のクリーンアップアクションを実行する場合は、&lt;b&gt;end_pod（）&lt;/b&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="10f71534786c6e41d011fbc9deff5549daf1fe0b" translate="yes" xml:space="preserve">
          <source>Please note that if the layer is created in the PerlIO::via:: namespace, it does &lt;b&gt;not&lt;/b&gt; have to be fully qualified. The PerlIO::via module will prefix the PerlIO::via:: namespace if the specified modulename does not exist as a fully qualified module name.</source>
          <target state="translated">レイヤーがPerlIO :: via ::名前空間で作成されている場合、完全修飾されている必要は&lt;b&gt;ない&lt;/b&gt;ことに注意してください。指定されたモジュール名が完全修飾モジュール名として存在しない場合、PerlIO :: viaモジュールはPerlIO :: via ::名前空間にプレフィックスを付けます。</target>
        </trans-unit>
        <trans-unit id="713c4ec8dda734601e7b059dd41a997e18f77cd8" translate="yes" xml:space="preserve">
          <source>Please note that on Windows platforms colorized output also requires the Win32::Console::ANSI module.</source>
          <target state="translated">Windows プラットフォームでは、カラー化された出力にも Win32::Console::ANSI モジュールが必要になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b414f05f7085ad8d048ca6abb13a1f7ce979a37b" translate="yes" xml:space="preserve">
          <source>Please note that some of the trigonometric functions can break out from the &lt;b&gt;real axis&lt;/b&gt; into the &lt;b&gt;complex plane&lt;/b&gt;. For example &lt;code&gt;asin(2)&lt;/code&gt; has no definition for plain real numbers but it has definition for complex numbers.</source>
          <target state="translated">三角関数の一部から抜け出すことができますので、予めご了承ください&lt;b&gt;実数軸&lt;/b&gt;に&lt;b&gt;複素平面&lt;/b&gt;。たとえば、 &lt;code&gt;asin(2)&lt;/code&gt; には単純な実数の定義はありませんが、複素数の定義があります。</target>
        </trans-unit>
        <trans-unit id="2b7c92535c70d75e42791f8ddb48d4ce9ec51fc0" translate="yes" xml:space="preserve">
          <source>Please note that strings and floating point constants are not affected, so that</source>
          <target state="translated">文字列や浮動小数点定数は影響を受けないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c7e396ad592125eb642ceacdd629f60983df2bdf" translate="yes" xml:space="preserve">
          <source>Please note that the &lt;b&gt;preprocess_line()&lt;/b&gt; method is invoked</source>
          <target state="translated">&lt;b&gt;preprocess_line（）&lt;/b&gt;メソッドが呼び出されることに注意してください</target>
        </trans-unit>
        <trans-unit id="5653094baeaeebceed5e5c79fc61bfba84826926" translate="yes" xml:space="preserve">
          <source>Please note that the first &lt;code&gt;good&lt;/code&gt; state must be an ancestor of the first &lt;code&gt;bad&lt;/code&gt; state. If you want to search for the commit that</source>
          <target state="translated">最初の &lt;code&gt;good&lt;/code&gt; 状態は最初の &lt;code&gt;bad&lt;/code&gt; 状態の祖先でなければならないことに注意してください。コミットを検索したい場合</target>
        </trans-unit>
        <trans-unit id="865709c0c581d8169eede3efc9f220dad69fc01d" translate="yes" xml:space="preserve">
          <source>Please note that this is an area of recent development in Perl and that the interface described here is therefore still subject to change (and hopefully will have better documentation and more examples).</source>
          <target state="translated">これは Perl の最近の開発分野であり、ここで説明されているインターフェイスはまだ変更される可能性があることに注意してください (そして、より良いドキュメントや例が出てくることを期待しています)。</target>
        </trans-unit>
        <trans-unit id="9d1dda7d4ff18b02aa0b290b258576653be091e9" translate="yes" xml:space="preserve">
          <source>Please note that this layer is implied when calling open() thus:</source>
          <target state="translated">このように、open()を呼び出す際には、このレイヤーが暗黙の了解を得ていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="14bd27e9d494565b2545ea76d64ba9560ebda982" translate="yes" xml:space="preserve">
          <source>Please note that while this module works on Perl 5.6, it is no longer being routinely tested on 5.6 - the earliest Perl version being routinely tested, and expressly supported, is 5.8.1. However, patches to repair any breakage on 5.6 are still being accepted.</source>
          <target state="translated">このモジュールは Perl 5.6 で動作しますが、5.6 での定期的なテストは行われていないことに注意してください-定期的にテストされ、明示的にサポートされている最も古い Perl のバージョンは 5.8.1 です。しかし、5.6 での障害を修復するためのパッチはまだ受け入れられています。</target>
        </trans-unit>
        <trans-unit id="538443df0be8abcb2c7740f09bb5b4b6d88ac69f" translate="yes" xml:space="preserve">
          <source>Please note the following does not work as expected (prints nothing), since overloading of '..' is not yet possible in Perl (as of v5.8.0):</source>
          <target state="translated">Perl では '...' のオーバーロードはまだできません (v5.8.0 の時点では)。</target>
        </trans-unit>
        <trans-unit id="81118967e42641b9c6eb5f04cdbe62abe7740600" translate="yes" xml:space="preserve">
          <source>Please note: This mode of operation is no longer supported as of Perl v5.26.</source>
          <target state="translated">注意:Perl v5.26 以降、この動作モードはサポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="fdc3f6a4a31c88f4e79077f99064bd4223a68148" translate="yes" xml:space="preserve">
          <source>Please note: in the general case, you're better off using &lt;a href=&quot;encode#decode&quot;&gt;&lt;code&gt;Encode::decode('UTF-8', $utf)&lt;/code&gt;&lt;/a&gt; to decode a UTF-8 encoded byte string to a Perl Unicode string, and &lt;a href=&quot;encode#encode&quot;&gt;&lt;code&gt;Encode::encode('UTF-8', $str)&lt;/code&gt;&lt;/a&gt; to encode a Perl Unicode string to UTF-8 bytes. These functions provide means of handling invalid byte sequences and generally have a friendlier interface.</source>
          <target state="translated">注意：一般的な場合、&lt;a href=&quot;encode#decode&quot;&gt; &lt;code&gt;Encode::decode('UTF-8', $utf)&lt;/code&gt; &lt;/a&gt;を使用してUTF-8でエンコードされたバイト文字列をPerl Unicode文字列にデコードし、&lt;a href=&quot;encode#encode&quot;&gt; &lt;code&gt;Encode::encode('UTF-8', $str)&lt;/code&gt; &lt;/a&gt;は、PerlUnicode文字列をUTF-8バイトにエンコードします。これらの関数は、無効なバイトシーケンスを処理する手段を提供し、一般的に、より使いやすいインターフェイスを備えています。</target>
        </trans-unit>
        <trans-unit id="a240f0a420b088c6642d6eafb7c3deb2f9e741be" translate="yes" xml:space="preserve">
          <source>Please note: in the general case, you're better off using Encode::decode_utf8 to decode a UTF-8 encoded byte string to a Perl Unicode string, and Encode::encode_utf8 to encode a Perl Unicode string to UTF-8 bytes. These functions provide means of handling invalid byte sequences and generally have a friendlier interface.</source>
          <target state="translated">注意:一般的な場合、UTF-8でエンコードされたバイト文字列をPerl Unicode文字列にデコードするにはEncode::decode_utf8を、Perl Unicode文字列をUTF-8バイトにエンコードするにはEncode::encode_utf8を使った方が良いでしょう。これらの関数は無効なバイト列を処理する手段を提供し、一般的にはより友好的なインタフェースを持っています。</target>
        </trans-unit>
        <trans-unit id="a968cbb027497bb1dd61f62478bee1c4fb7295eb" translate="yes" xml:space="preserve">
          <source>Please note: the two functions defined above are</source>
          <target state="translated">注意:上記で定義されている2つの関数は</target>
        </trans-unit>
        <trans-unit id="59a34246a11ef1f18ccb92fad013882849039fa3" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;#COPYRIGHT&quot;&gt;&quot;COPYRIGHT&quot;&lt;/a&gt; before using version 2.x or greater of Berkeley DB with DB_File.</source>
          <target state="translated">DB_Fileでバージョン2.x以降のBerkeleyDBを使用する前に、&lt;a href=&quot;#COPYRIGHT&quot;&gt;「著作権」を&lt;/a&gt;お読みください。</target>
        </trans-unit>
        <trans-unit id="e14b19aff89c4aad18c1b1f461b6bc9f9f18afb0" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;#COPYRIGHT&quot;&gt;COPYRIGHT&lt;/a&gt; before using version 2.x or greater of Berkeley DB with DB_File.</source>
          <target state="translated">DB_Fileでバージョン2.x以降のBerkeley DBを使用する前に、&lt;a href=&quot;#COPYRIGHT&quot;&gt;COPYRIGHTを&lt;/a&gt;お読みください。</target>
        </trans-unit>
        <trans-unit id="a49d7388a9b16b3144a078e3b5020dee8701b8c5" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;code&gt;Archive::Tar::File&lt;/code&gt; documentation on how to handle these objects.</source>
          <target state="translated">これらのオブジェクトの処理方法については、 &lt;code&gt;Archive::Tar::File&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="63dd61b82f101f26826b0ee19baaf07fb1de5b36" translate="yes" xml:space="preserve">
          <source>Please refer to the MSDN documentation of the CSIDL constants, currently available at:</source>
          <target state="translated">CSIDL 定数の MSDN ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9ba05ea79d06558fc847ddce39fd58ed9e3603b4" translate="yes" xml:space="preserve">
          <source>Please refer to your native fcntl(2), open(2), fseek(3), lseek(2) (equal to Perl's seek() and sysseek(), respectively), and chmod(2) documentation to see what constants are implemented in your system.</source>
          <target state="translated">ネイティブの fcntl(2),open(2),fseek(3),lseek(2)(Perl の seek()と sysseek()にそれぞれ等しい)と chmod(2)のドキュメントを参照して、お使いのシステムでどのような定数が実装されているかを確認してください。</target>
        </trans-unit>
        <trans-unit id="c84d853900a8b1e8461d42ec22c7bb0bc4e4555b" translate="yes" xml:space="preserve">
          <source>Please remember to send me an updated entry for the Module list!</source>
          <target state="translated">モジュールリストの更新エントリを忘れずに送ってください!</target>
        </trans-unit>
        <trans-unit id="9d4f61b83a34e9d17810bf3a6beba8149a3099ab" translate="yes" xml:space="preserve">
          <source>Please report all bugs on the RT queue, either via the web interface:</source>
          <target state="translated">RTキュー上のすべてのバグを、ウェブインタフェースを介して報告してください。</target>
        </trans-unit>
        <trans-unit id="fc5ac378228cc627e576428f688749bb3cf44169" translate="yes" xml:space="preserve">
          <source>Please report all bugs on the RT queue:</source>
          <target state="translated">RTキューのバグ報告をお願いします。</target>
        </trans-unit>
        <trans-unit id="cd1826396d92eaf26d7671cebd0646515ababb89" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">バグや機能のリクエストは、&lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Parse-CPAN-Meta&quot;&gt;http：//rt.cpan.org/Public/Dist/Display.html？Name = Parse-CPAN-MetaのIssue&lt;/a&gt; Trackerから報告してください。問題の進行状況は自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="f29e539c9949d7fd976fcf0ef31e3d520dfef64c" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/CPAN-Meta-Requirements/issuesの&lt;/a&gt;課題追跡システムを介してバグや機能のリクエストを報告してください。問題の進捗状況は自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="e10dad34d98d968a9e79abbac903596e6421800b" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issuesの&lt;/a&gt;IssueTrackerを使用して、バグや機能のリクエストを報告してください。問題の進捗状況は自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="95a04dfd4c1fc483cefbbd64e9cf7d0f5a2a01dc" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/Perl-Toolchain-Gang/Perl-OSType/issues&quot;&gt;https://github.com/Perl-Toolchain-Gang/Perl-OSType/issuesの&lt;/a&gt;IssueTrackerを使用して、バグや機能のリクエストを報告してください。問題の進捗状況は自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="2b3e9326f48a70cd35e62a3e7c3c1b10a005c4e2" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at &lt;a href=&quot;https://github.com/chansen/p5-http-tiny/issues&quot;&gt;https://github.com/chansen/p5-http-tiny/issues&lt;/a&gt;. You will be notified automatically of any progress on your issue.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/chansen/p5-http-tiny/issues&quot;&gt;https://github.com/chansen/p5-http-tiny/issuesの&lt;/a&gt;IssueTrackerを使用して、バグや機能のリクエストを報告してください。問題の進捗状況は自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="54e910ef38da12f1e82d477c66613f898afde850" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests through the issue tracker at L</source>
          <target state="translated">バグや機能要求があれば、L の issue tracker を通して報告してください。</target>
        </trans-unit>
        <trans-unit id="bb7ffcd32fde8fcb70ebf33b96ca410b8c21fd4d" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https：&lt;/a&gt;//rt.cpan.org/Ticket/Create.html？Queue = Math-BigIntのWebインターフェースを介して報告してください（ログインが必要です）。通知が届き、変更を加えると、バグの進捗状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="7c1ec7a85f06c97f5ca00ceba49cd056337d425f" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt&quot;&gt;https：&lt;/a&gt;//rt.cpan.org/Ticket/Create.html？Queue = Math-BigIntのWebインターフェイスを介して報告してください（ログインが必要です） ）。通知が届きます。変更を加えると、バグの進行状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="4855ec4202fef3ce386c7a181d6e6a5bd1e45ec3" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=bignum&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=bignum&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは &lt;code&gt;bug-math-bigint at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=bignum&quot;&gt;https：&lt;/a&gt;//rt.cpan.org/Ticket/Create.html？Queue = bignum（ログインが必要）のWebインターフェイスから報告してください。通知が届きます。変更を加えると、バグの進行状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="4f1e163ae4819860c0befb05416f4880530b21f6" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigint-fastcalc at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt-FastCalc&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt-FastCalc&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは、 &lt;code&gt;bug-math-bigint-fastcalc at rt.cpan.org&lt;/code&gt; するか、&lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigInt-FastCalc&quot;&gt;https：&lt;/a&gt;//rt.cpan.org/Ticket/Create.html？Queue = Math-BigInt-のWebインターフェイスから報告してください。 FastCalc（ログインが必要）。通知が届きます。変更を加えると、バグの進行状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="fedca4eaf22650d4f30ff44ea5ea07caadc39831" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは、 &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https：&lt;/a&gt;//rt.cpan.org/Ticket/Create.html？Queue = Math-BigRatのWebインターフェースから報告してください（ログインが必要です）。通知が届き、変更を加えると、バグの進捗状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="44b2b1389efa7dcc1194b0bee5209d80e2cd9879" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&lt;/a&gt; (requires login). We will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは、 &lt;code&gt;bug-math-bigrat at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;https://rt.cpan.org/Ticket/Create.html?Queue=Math-BigRat&quot;&gt;https：&lt;/a&gt;//rt.cpan.org/Ticket/Create.html？Queue = Math-BigRatのWebインターフェイスを介して報告してください（ログインが必要です） ）。通知が届きます。変更を加えると、バグの進行状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="9e63d77d099b0075753f056790cc8a0a16061cd4" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-sys-syslog (at) rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys-Syslog&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys-Syslog&lt;/a&gt;. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは、 &lt;code&gt;bug-sys-syslog (at) rt.cpan.org&lt;/code&gt; に報告するか、&lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=Sys-Syslog&quot;&gt;http：&lt;/a&gt;//rt.cpan.org/Public/Dist/Display.html？Name = Sys- Syslog。通知が届きます。変更を加えると、バグの進捗状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="ae680a8d27e7e30eaabedd56fcc07aec11c11d49" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http：&lt;/a&gt;//rt.cpan.org/NoAuth/ReportBug.html？Queue = Test-HarnessのWebインターフェースから報告してください。通知が届きます。変更を加えると、バグの進捗状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="341b6e60f3036ad2f760be88739c597fd2cbae0b" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.</source>
          <target state="translated">バグや機能のリクエストは &lt;code&gt;bug-test-harness at rt.cpan.org&lt;/code&gt; 報告するか、&lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http：&lt;/a&gt;//rt.cpan.org/NoAuth/ReportBug.html？Queue = Test-HarnessのWebインターフェイスから報告してください。通知が届きます。変更を加えると、バグの進行状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="667d7074054f4f754df9eeb8e155a22d30cbaad3" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt; , or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. We will be notified, and then you'll automatically be notified of progress on your bug as we make changes.</source>
          <target state="translated">バグや機能のリクエストは &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt; に報告するか、Webインターフェース（&lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness）&lt;/a&gt;から報告してください。通知され、変更が加えられると、バグの進捗状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="f074316234c4859a301df22686a28d5f2ff92bd3" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt;, or through the web interface at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&lt;/a&gt;. We will be notified, and then you'll automatically be notified of progress on your bug as we make changes.</source>
          <target state="translated">バグや機能のリクエストは、 &lt;code&gt;bug-test-harness@rt.cpan.org&lt;/code&gt; に報告するか、Webインターフェイス（&lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test-Harness）&lt;/a&gt;から報告してください。通知が届きます。変更が加えられると、バグの進行状況が自動的に通知されます。</target>
        </trans-unit>
        <trans-unit id="9c61f91a0c5559a90a0233170a166239a41b69c9" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests via the perlbug(1) utility.</source>
          <target state="translated">バグや機能要求があれば perlbug(1)ユーティリティを使って報告してください。</target>
        </trans-unit>
        <trans-unit id="da1690d7c5d6c84d4dfa27a5c4d0acb738c84780" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature using the CPAN Request Tracker. Bugs can be submitted through the web interface at &lt;a href=&quot;http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta&quot;&gt;http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta&lt;/a&gt;</source>
          <target state="translated">CPANリクエストトラッカーを使用してバグや機能を報告してください。バグは、&lt;a href=&quot;http://rt.cpan.org/Dist/Display.html?Queue=CPAN-Meta&quot;&gt;http：//rt.cpan.org/Dist/Display.html？Queue = CPAN-Metaの&lt;/a&gt;Webインターフェイスから送信できます。</target>
        </trans-unit>
        <trans-unit id="538631f2230a63e6ce1111d15fa806e9dbfb590c" translate="yes" xml:space="preserve">
          <source>Please report any errors, updates, or suggestions to</source>
          <target state="translated">エラー、更新、提案などがあれば、以下に報告してください。</target>
        </trans-unit>
        <trans-unit id="b2fed3d97135253678acd7ef66f99b903e366619" translate="yes" xml:space="preserve">
          <source>Please report any errors, updates, or suggestions to &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;.</source>
          <target state="translated">エラー、更新、提案がある場合は、&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https：//github.com/Perl/perl5/issuesに&lt;/a&gt;報告してください。</target>
        </trans-unit>
        <trans-unit id="7fdf7d53b3d96ceb75d6b632d2b4d517d6b8a6a5" translate="yes" xml:space="preserve">
          <source>Please report any other failures as described under &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;&quot;BUGS AND CAVEATS&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;「バグと警告」で&lt;/a&gt;説明されているその他の障害を報告してください。</target>
        </trans-unit>
        <trans-unit id="535c1e5f2236649cfc5cd24875aa7a7f5d8bb2dc" translate="yes" xml:space="preserve">
          <source>Please report any other failures as described under &lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;BUGS AND CAVEATS&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#BUGS-AND-CAVEATS&quot;&gt;バグと警告で&lt;/a&gt;説明されているように、その他の障害を報告してください。</target>
        </trans-unit>
        <trans-unit id="5ecba84d92ce32aa62a862b9a6870d59796672d9" translate="yes" xml:space="preserve">
          <source>Please report bugs in this version of perl to andy@broad.ology.org.uk in the first instance.</source>
          <target state="translated">このバージョンのperlのバグは、まず andy@broad.ology.org.uk まで報告してください。</target>
        </trans-unit>
        <trans-unit id="588e8512c3a527a86acc4f15dfb514051940faad" translate="yes" xml:space="preserve">
          <source>Please report bugs on a specific behavior of this module to RT or GitHub issues (preferred):</source>
          <target state="translated">このモジュールの特定の動作に関するバグを RT または GitHub の問題 (優先的に)に報告してください。</target>
        </trans-unit>
        <trans-unit id="76aa5507d30b205fb08850d3924328ca2edc4fec" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-file-fetch@rt.cpan.org&amp;lt;gt&amp;gt;.</source>
          <target state="translated">バグまたはその他の問題を&amp;lt;bug-file-fetch@rt.cpan.org &amp;lt;gt&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="5af156ec0cb2830a387a464db78f0177138c46c7" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-ipc-cmd@rt.cpan.org&amp;gt;.</source>
          <target state="translated">バグまたはその他の問題を&amp;lt;bug-ipc-cmd@rt.cpan.org&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="89fa61346f2ac4a97f3b1820d45a05f5cf6df3b4" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-module-load-conditional@rt.cpan.org&amp;gt;.</source>
          <target state="translated">バグまたはその他の問題を&amp;lt;bug-module-load-conditional@rt.cpan.org&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="74e57493a005451600337c2cd20b19335784389b" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-module-load@rt.cpan.org&amp;lt;gt&amp;gt;.</source>
          <target state="translated">バグまたはその他の問題を&amp;lt;bug-module-load@rt.cpan.org &amp;lt;gt&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="aa48dcb88c79a4bb30f628a4e59b5790599238be" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-module-loaded@rt.cpan.org&amp;lt;gt&amp;gt;.</source>
          <target state="translated">バグまたはその他の問題を&amp;lt;bug-module-loaded@rt.cpan.org &amp;lt;gt&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="ea6595769a4f7e77e760cd27c4315806767a46e6" translate="yes" xml:space="preserve">
          <source>Please report bugs or other issues to &amp;lt;bug-params-check@rt.cpan.org&amp;gt;.</source>
          <target state="translated">バグやその他の問題を&amp;lt;bug-params-check@rt.cpan.org&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="e2b012cfb62b0833f158983eb6a125eb9f62cad3" translate="yes" xml:space="preserve">
          <source>Please report bugs using &lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://rt.cpan.org&quot;&gt;http://rt.cpan.org&lt;/a&gt;を使用してバグを報告してください。</target>
        </trans-unit>
        <trans-unit id="9b0a18ec15ee7f8f9cfa33de7bf50e0926919e26" translate="yes" xml:space="preserve">
          <source>Please report bugs via &lt;a href=&quot;http://rt.cpan.org/&quot;&gt;http://rt.cpan.org/&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://rt.cpan.org/&quot;&gt;http://rt.cpan.org/&lt;/a&gt;からバグを報告してください</target>
        </trans-unit>
        <trans-unit id="e4417cf7026fd3b1d558ce74b166a72450fc9e3b" translate="yes" xml:space="preserve">
          <source>Please report bugs via the GitHub Issue Tracker at &lt;a href=&quot;https://github.com/pjf/autodie/issues&quot;&gt;https://github.com/pjf/autodie/issues&lt;/a&gt; or via the CPAN Request Tracker at &lt;a href=&quot;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&quot;&gt;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/pjf/autodie/issues&quot;&gt;https://github.com/pjf/autodie/issuesの&lt;/a&gt; GitHub Issue Tracker またはhttps://rt.cpan.org/NoAuth/Bugs.html?Dist=autodieのCPAN Request Trackerを介してバグを報告して&lt;a href=&quot;https://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8aab4e1e45b67fc9f30850be9456ba3f03a04a5a" translate="yes" xml:space="preserve">
          <source>Please report detailed descriptions of any problems and solutions that you may find at &amp;lt;&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;&amp;gt;, along with the output produced by &lt;code&gt;perl -V&lt;/code&gt;.</source>
          <target state="translated">&amp;lt; &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt; &amp;gt;で見つかった問題と解決策の詳細な説明を、 &lt;code&gt;perl -V&lt;/code&gt; によって生成された出力とともに報告してください。</target>
        </trans-unit>
        <trans-unit id="d79a854cdb114b54082c119689356c304d2fefdd" translate="yes" xml:space="preserve">
          <source>Please reports bugs to &amp;lt;bug-archive-tar@rt.cpan.org&amp;gt;.</source>
          <target state="translated">バグは&amp;lt;bug-archive-tar@rt.cpan.org&amp;gt;に報告してください。</target>
        </trans-unit>
        <trans-unit id="d4341b4d3e627a1778c8a45b586f98e9adc4ce3b" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;#parseopts()&quot;&gt;parseopts()&lt;/a&gt; for a complete description of the interface for the setting and unsetting of parse-options.</source>
          <target state="translated">parse-optionsの設定と設定解除のインターフェースの詳細については、&lt;a href=&quot;#parseopts()&quot;&gt;parseopts（）&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7f51c19c32ff7fa52bd5ea5cccc3312c8f093f3" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;../parser#SUBCLASSING&quot;&gt;SUBCLASSING in TAP::Parser&lt;/a&gt; for a subclassing overview.</source>
          <target state="translated">サブクラス化の概要については、&lt;a href=&quot;../parser#SUBCLASSING&quot;&gt;TAP :: Parser&lt;/a&gt;のサブクラス化を参照してください。</target>
        </trans-unit>
        <trans-unit id="c86f144c936b547d1a8fcab0618c4dcef4646042" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;App::Prove#PLUGINS&quot;&gt;&quot;PLUGINS&quot; in App::Prove&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;App::Prove#PLUGINS&quot;&gt;App :: Proveの「プラグイン」を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4e91d7e19846bba266909a5e73288f2011d3c67a" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;TAP::Parser#SUBCLASSING&quot;&gt;&quot;SUBCLASSING&quot; in TAP::Parser&lt;/a&gt; for a subclassing overview, and any of the subclasses that ship with this module as an example. What follows is a quick overview.</source>
          <target state="translated">サブクラス化の概要、および例としてこのモジュールに&lt;a href=&quot;TAP::Parser#SUBCLASSING&quot;&gt;付属&lt;/a&gt;しているサブクラスについては、TAP :: Parserの「サブクラス化」を参照してください。以下は簡単な概要です。</target>
        </trans-unit>
        <trans-unit id="26bbee5cc38dd221caeb15c8d0b9944048cfb0e3" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;TAP::Parser#SUBCLASSING&quot;&gt;&quot;SUBCLASSING&quot; in TAP::Parser&lt;/a&gt; for a subclassing overview.</source>
          <target state="translated">サブクラス化の概要については、&lt;a href=&quot;TAP::Parser#SUBCLASSING&quot;&gt;TAP :: Parserの「サブクラス化」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c6c46841005cacd4d19b8897f62c9bcdf00ba021" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;Test2::API::Context#CRITICAL-DETAILS&quot;&gt;&quot;CRITICAL DETAILS&quot; in Test2::API::Context&lt;/a&gt; for important rules about what you can and cannot do with a context once it is obtained.</source>
          <target state="translated">取得したコンテキストで実行できることと実行できないことに関する重要なルールについて&lt;a href=&quot;Test2::API::Context#CRITICAL-DETAILS&quot;&gt;は、Test2 :: API :: Contextの「CRITICALDETAILS&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5b0d65ae346953461c6709072b8e34d6894faf9a" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;Test::use::ok&quot;&gt;Test::use::ok&lt;/a&gt; for the full description.</source>
          <target state="translated">詳細な説明については、&lt;a href=&quot;Test::use::ok&quot;&gt;Test :: use :: ok&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d2e0a1481bb7e7875074f0faee7691f33bd29319" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;app/prove#PLUGINS&quot;&gt;PLUGINS in App::Prove&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;app/prove#PLUGINS&quot;&gt;App :: ProveのPLUGINSを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="989a39f3d25282b53431795da6fd8624c0e76184" translate="yes" xml:space="preserve">
          <source>Please see respective module documentation for further details.</source>
          <target state="translated">詳細については、各モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a30c68c43e99e52ddbaa4a59fdceb1dd51800da4" translate="yes" xml:space="preserve">
          <source>Please see the &quot;See Also&quot; references for a thorough explanation of how to correctly use language tags.</source>
          <target state="translated">言語タグの正しい使い方については、「参照」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5eb0ce8841e107e9f0e205e51d26edff17acc24e" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;ExtUtils::Mksymlists&quot;&gt;ExtUtils::Mksymlists&lt;/a&gt; documentation for more information about the DL_FUNCS, DL_VARS and FUNCLIST attributes.</source>
          <target state="translated">DL_FUNCS、DL_VARS、およびFUNCLIST属性の詳細については、&lt;a href=&quot;ExtUtils::Mksymlists&quot;&gt;ExtUtils :: Mksymlistsの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="81fd05bcd06561fbf4acc7c17c9823d8c0d4b322" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;mksymlists&quot;&gt;ExtUtils::Mksymlists&lt;/a&gt; documentation for more information about the DL_FUNCS, DL_VARS and FUNCLIST attributes.</source>
          <target state="translated">DL_FUNCS、DL_VARS、およびFUNCLIST属性の詳細については、&lt;a href=&quot;mksymlists&quot;&gt;ExtUtils :: Mksymlistsの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2c2e515c2102fd49c64f216a02d32d621813ef11" translate="yes" xml:space="preserve">
          <source>Please see the README file in distribution.</source>
          <target state="translated">配布されているREADMEファイルをご覧ください。</target>
        </trans-unit>
        <trans-unit id="628ecfdf942d40232f5db37e81fc0010f48d3a4b" translate="yes" xml:space="preserve">
          <source>Please see the documentation for &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; for the details of what these parameters do.</source>
          <target state="translated">これらのパラメーターの機能の詳細については、 &lt;code&gt;ExtUtils::Mksymlists&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f40ec33c90f01c635cb2192f1f99978f9b263bcc" translate="yes" xml:space="preserve">
          <source>Please see the documentation in &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; for further details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigIntの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5a5dc2d5751ee8cce246c66908a7b4ec4c62daf7" translate="yes" xml:space="preserve">
          <source>Please see the documentation in &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt; for further details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;bigint&quot;&gt;Math :: BigIntの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="05004fbce196a7e0bf2a95059afe8e5ce82a91f3" translate="yes" xml:space="preserve">
          <source>Please see the documentation in &lt;a href=&quot;bigint&quot;&gt;Math::BigInt&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;bigint&quot;&gt;Math :: BigIntの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e4b33a5a89e332b7c7e9bac36dcb4a5524d98fc6" translate="yes" xml:space="preserve">
          <source>Please see the file README in the Perl source distribution for details of the Perl license.</source>
          <target state="translated">Perlのライセンスの詳細については、Perlのソース・ディストリビューションのREADMEファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0151ca432ab861ca7ca145a28b62d6ba2feb6f2" translate="yes" xml:space="preserve">
          <source>Please see the git repository for revision history.</source>
          <target state="translated">リビジョン履歴はgitリポジトリを参照してください。</target>
        </trans-unit>
        <trans-unit id="8996e7dee5730a1986500bc16557a0d869c75480" translate="yes" xml:space="preserve">
          <source>Please see the section about &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;&quot;ACCURACY and PRECISION&quot;&lt;/a&gt; for further details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;「精度と精度」&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="3073b87722e3ef7fb20a17229c346b64eb30ea5d" translate="yes" xml:space="preserve">
          <source>Please see the section about &lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;ACCURACY and PRECISION&lt;/a&gt; for further details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#ACCURACY-and-PRECISION&quot;&gt;精度と精度&lt;/a&gt;に関するセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="221b6d6c2e3933bcc937bf432e64ccb1ebb6a488" translate="yes" xml:space="preserve">
          <source>Please send detailed descriptions of any problems and solutions that you may find to &amp;lt;</source>
          <target state="translated">発見した問題や解決策の詳細な説明を&amp;lt;まで送信してください</target>
        </trans-unit>
        <trans-unit id="ef68d6f3b0d5f9f183ddfa8c1c49597c47fc04d3" translate="yes" xml:space="preserve">
          <source>Please set your policy to one of the three values.</source>
          <target state="translated">方針を3つの価値観のいずれかに設定してください。</target>
        </trans-unit>
        <trans-unit id="e5456a0ea6c8660091c6463eca153f6f42857178" translate="yes" xml:space="preserve">
          <source>Please submit bug reports and patches to perlbug@perl.org.</source>
          <target state="translated">バグレポートとパッチを perlbug@perl.org まで提出してください。</target>
        </trans-unit>
        <trans-unit id="1670aa48b29f76eeff5e31510ce8161f83f94922" translate="yes" xml:space="preserve">
          <source>Please submit bugs to the CPAN RT system at &lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&lt;/a&gt; or via email at bug-time-local@rt.cpan.org.</source>
          <target state="translated">バグを&lt;a href=&quot;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Local&quot;&gt;http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Time-Localで、&lt;/a&gt;または電子メールでbug-time-local@rt.cpan.org でCPAN RTシステムに送信してください。</target>
        </trans-unit>
        <trans-unit id="027daf21662ca08eda2a7bd48d5158b216706744" translate="yes" xml:space="preserve">
          <source>Please try and supply some documentation if you add functions to the Perl core.</source>
          <target state="translated">Perlコアに関数を追加する場合は、ドキュメントを提供するようにしてください。</target>
        </trans-unit>
        <trans-unit id="f0a1af1032147376b66464947571d72cef968e98" translate="yes" xml:space="preserve">
          <source>Please use &lt;a href=&quot;https://github.com/perl-pod/pod-simple/issues/new&quot;&gt;https://github.com/perl-pod/pod-simple/issues/new&lt;/a&gt; to file a bug report.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/perl-pod/pod-simple/issues/new&quot;&gt;https://github.com/perl-pod/pod-simple/issues/new&lt;/a&gt;を使用して、バグレポートを提出してください。</target>
        </trans-unit>
        <trans-unit id="f714e6d31a681125e28768dfea867640b126ff8d" translate="yes" xml:space="preserve">
          <source>Please, unless you're hacking the internals, or debugging weirdness, don't think about the UTF8 flag at all. That means that you very probably shouldn't use &lt;code&gt;is_utf8&lt;/code&gt; , &lt;code&gt;_utf8_on&lt;/code&gt; or &lt;code&gt;_utf8_off&lt;/code&gt; at all.</source>
          <target state="translated">内部をハックしたり、奇妙なことをデバッグしたりしない限り、UTF8フラグについてはまったく考えないでください。あなたは非常におそらく使用してはならないことを意味することに &lt;code&gt;is_utf8&lt;/code&gt; 、 &lt;code&gt;_utf8_on&lt;/code&gt; または &lt;code&gt;_utf8_off&lt;/code&gt; をまったく。</target>
        </trans-unit>
        <trans-unit id="1202c034ad5e532f9a82495be81ce4863a3e9945" translate="yes" xml:space="preserve">
          <source>Please, unless you're hacking the internals, or debugging weirdness, don't think about the UTF8 flag at all. That means that you very probably shouldn't use &lt;code&gt;is_utf8&lt;/code&gt;, &lt;code&gt;_utf8_on&lt;/code&gt; or &lt;code&gt;_utf8_off&lt;/code&gt; at all.</source>
          <target state="translated">内部をハッキングしたり、奇妙さをデバッグしたりしない限り、UTF8フラグについてはまったく考えないでください。あなたは非常におそらく使用してはならないことを意味することに &lt;code&gt;is_utf8&lt;/code&gt; 、 &lt;code&gt;_utf8_on&lt;/code&gt; または &lt;code&gt;_utf8_off&lt;/code&gt; をまったく。</target>
        </trans-unit>
        <trans-unit id="34f29d232cd4bc7b00f36ebc0732290db154e722" translate="yes" xml:space="preserve">
          <source>Plug-in module for automatic expiration of memoized values</source>
          <target state="translated">メモされた値を自動的に期限切れにするためのプラグインモジュール</target>
        </trans-unit>
        <trans-unit id="9edf1040d2bfeaaf802cb8b27a5c7e4a201ff06a" translate="yes" xml:space="preserve">
          <source>Pluggable runops</source>
          <target state="translated">プラグイン可能なランナップ</target>
        </trans-unit>
        <trans-unit id="5697803d10d7bf281aadc37a72c18ea36adecd64" translate="yes" xml:space="preserve">
          <source>Plugin support ***EXPERIMENTAL***</source>
          <target state="translated">プラグインのサポート ***EXPERIMENTAL***。</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="76ccce846df3b4c3ab1a6f65fc358f4fc11db43e" translate="yes" xml:space="preserve">
          <source>Plugins are objects that implement any of currently eight methods:</source>
          <target state="translated">プラグインは、現在8つのメソッドのいずれかを実装したオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="1de58880797e013d954730b62488aa821afcb4c8" translate="yes" xml:space="preserve">
          <source>Plugins can be loaded using the &lt;code&gt;-P&lt;i&gt;plugin&lt;/i&gt;&lt;/code&gt; syntax, eg:</source>
          <target state="translated">プラグインは、 &lt;code&gt;-P&lt;i&gt;plugin&lt;/i&gt;&lt;/code&gt; 構文を使用してロードできます。例：</target>
        </trans-unit>
        <trans-unit id="71494d8d1e8a55e1a56d948d21ff0111c0e58ab0" translate="yes" xml:space="preserve">
          <source>Pod Commands</source>
          <target state="translated">ポッドコマンド</target>
        </trans-unit>
        <trans-unit id="3d5386faff713ed9d1073c9258ceccd049f3d049" translate="yes" xml:space="preserve">
          <source>Pod Definitions</source>
          <target state="translated">ポッドの定義</target>
        </trans-unit>
        <trans-unit id="4ae454b70ee2c5e321bfbc301f9d36222768b986" translate="yes" xml:space="preserve">
          <source>Pod Formatting Codes</source>
          <target state="translated">ポッドフォーマットコード</target>
        </trans-unit>
        <trans-unit id="47918185382f833db1e30bfcfbc001132c7cba90" translate="yes" xml:space="preserve">
          <source>Pod content is contained in &lt;b&gt;Pod blocks&lt;/b&gt;. A Pod block starts with a line that matches &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]/&lt;/a&gt;&lt;/code&gt;, and continues up to the next line that matches &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; or up to the end of the file if there is no &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; line.</source>
          <target state="translated">ポッドコンテンツは、&lt;b&gt;ポッドブロックに&lt;/b&gt;含まれてい&lt;b&gt;ます&lt;/b&gt;。Podブロックは、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]/&lt;/a&gt;&lt;/code&gt; に一致する行で始まり、 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; 一致する次の行まで、またはファイルの最後まで続きます &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=cut/&lt;/a&gt;&lt;/code&gt; 行はありません。</target>
        </trans-unit>
        <trans-unit id="02c2e8126c233f706e9cd59a2533c9f50c98bc10" translate="yes" xml:space="preserve">
          <source>Pod content is contained in &lt;b&gt;Pod blocks&lt;/b&gt;. A Pod block starts with a line that matches &lt;code&gt;m/\A=[a-zA-Z]/&lt;/code&gt;, and continues up to the next line that matches &lt;code&gt;m/\A=cut/&lt;/code&gt; or up to the end of the file if there is no &lt;code&gt;m/\A=cut/&lt;/code&gt; line.</source>
          <target state="translated">ポッドコンテンツは&lt;b&gt;ポッドブロックに&lt;/b&gt;含まれてい&lt;b&gt;ます&lt;/b&gt;。ポッドブロックは、 &lt;code&gt;m/\A=[a-zA-Z]/&lt;/code&gt; に一致する行で始まり、 &lt;code&gt;m/\A=cut/&lt;/code&gt; 一致する次の行まで、またはファイルの最後まで続きます。 &lt;code&gt;m/\A=cut/&lt;/code&gt; 行はありません。</target>
        </trans-unit>
        <trans-unit id="d6ddb3d03f7f589056100b138c86215515b2e453" translate="yes" xml:space="preserve">
          <source>Pod formatters</source>
          <target state="translated">ポッドフォーマッタ</target>
        </trans-unit>
        <trans-unit id="d66a0d27d4c73edcb27d25e097424b0951626f0c" translate="yes" xml:space="preserve">
          <source>Pod formatters can use Pod::Simple to parse Pod documents and render them into plain text, HTML, or any number of other formats. Typically, such formatters will be subclasses of Pod::Simple, and so they will inherit its methods, like &lt;code&gt;parse_file&lt;/code&gt; .</source>
          <target state="translated">ポッドフォーマッタは、Pod :: Simpleを使用してポッドドキュメントを解析し、プレーンテキスト、HTML、または他の任意の数のフォーマットにレンダリングできます。通常、このようなフォーマッタはPod :: Simpleのサブクラスになるため、 &lt;code&gt;parse_file&lt;/code&gt; などのメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="746daa555fbd186d7d4c6882e67f7c32f9c561ea" translate="yes" xml:space="preserve">
          <source>Pod formatters can use Pod::Simple to parse Pod documents and render them into plain text, HTML, or any number of other formats. Typically, such formatters will be subclasses of Pod::Simple, and so they will inherit its methods, like &lt;code&gt;parse_file&lt;/code&gt;. But note that Pod::Simple doesn't understand and properly parse Perl itself, so if you have a file which contains a Perl program that has a multi-line quoted string which has lines that look like pod, Pod::Simple will treat them as pod. This can be avoided if the file makes these into indented here documents instead.</source>
          <target state="translated">ポッドフォーマッタは、Pod :: Simpleを使用して、ポッドドキュメントを解析し、プレーンテキスト、HTML、またはその他の任意の数の形式にレンダリングできます。通常、このようなフォーマッタはPod :: Simpleのサブクラスであるため、 &lt;code&gt;parse_file&lt;/code&gt; などのメソッドを継承します。ただし、Pod :: SimpleはPerl自体を理解して適切に解析しないため、podのように見える行を持つ複数行の引用符付き文字列を持つPerlプログラムを含むファイルがある場合、Pod :: Simpleは処理します。それらをポッドとして。ファイルがこれらを代わりにインデントされたヒアドキュメントにする場合、これは回避できます。</target>
        </trans-unit>
        <trans-unit id="44803dfacbed653092718af27817d667ae913774" translate="yes" xml:space="preserve">
          <source>Pod formatters should make reasonable efforts to keep words of Perl code from being broken across lines. For example, &quot;Foo::Bar&quot; in some formatting systems is seen as eligible for being broken across lines as &quot;Foo::&quot; newline &quot;Bar&quot; or even &quot;Foo::-&quot; newline &quot;Bar&quot;. This should be avoided where possible, either by disabling all line-breaking in mid-word, or by wrapping particular words with internal punctuation in &quot;don't break this across lines&quot; codes (which in some formats may not be a single code, but might be a matter of inserting non-breaking zero-width spaces between every pair of characters in a word.)</source>
          <target state="translated">Podのフォーマッタは、Perlコードの単語が行をまたいで改行されないようにするための合理的な努力をすべきです。例えば、いくつかのフォーマットシステムでは、&quot;Foo::Bar &quot;は、&quot;Foo::&quot;改行 &quot;Bar &quot;や &quot;Foo::-&quot;改行 &quot;Bar &quot;のように改行されてもおかしくないと考えられています。これは、可能であれば、単語の中途での改行をすべて無効にするか、特定の単語を内部の句読点で &quot;don't break this across lines &quot;コード(いくつかのフォーマットでは、単一のコードではないかもしれませんが、単語の中のすべての文字のペアの間に非改行のゼロ幅のスペースを挿入する問題かもしれません)で包むことによって、可能であれば避けるべきです。</target>
        </trans-unit>
        <trans-unit id="d30f3aa798097994ab967bc039b02fb5704336d9" translate="yes" xml:space="preserve">
          <source>Pod formatters should tolerate lines in verbatim blocks that are of any length, even if that means having to break them (possibly several times, for very long lines) to avoid text running off the side of the page. Pod formatters may warn of such line-breaking. Such warnings are particularly appropriate for lines are over 100 characters long, which are usually not intentional.</source>
          <target state="translated">ポッドフォーマッタは、どんな長さの冗長ブロックの行であっても、たとえそれが、ページの横からテキストがはみ出ないようにするために改行をしなければならないことを意味していても、許容すべきです(非常に長い行の場合は数回)。ポッドフォーマッタはそのような改行を警告することがあります。このような警告は特に100文字を超える長さの行に適しており、通常は意図的ではありません。</target>
        </trans-unit>
        <trans-unit id="9e45409759a4a45d8ec12bca70ef02e438fd2271" translate="yes" xml:space="preserve">
          <source>Pod formatters, where feasible, are advised to avoid splitting short verbatim paragraphs (under twelve lines, say) across pages.</source>
          <target state="translated">ポッドフォーマッタは、可能であれば、ページをまたいで短い冗長段落(例えば12行以下)を分割しないようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6b57013c8fdcb737d69c938a9f663099a631cacb" translate="yes" xml:space="preserve">
          <source>Pod is a simple-to-use markup language used for writing documentation for Perl, Perl programs, and Perl modules.</source>
          <target state="translated">Podは、Perl、Perlプログラム、Perlモジュールのドキュメントを書くために使用される、使いやすいマークアップ言語です。</target>
        </trans-unit>
        <trans-unit id="0f6434053591d377adc29bce6462c4e2195b1c17" translate="yes" xml:space="preserve">
          <source>Pod is embedded in files, typically Perl source files, although you can write a file that's nothing but Pod.</source>
          <target state="translated">Podはファイルに埋め込まれており、通常はPerlのソースファイルですが、Pod以外のファイルを書くこともできます。</target>
        </trans-unit>
        <trans-unit id="a317c10bc80719752bdbc59669224f21caf94cb6" translate="yes" xml:space="preserve">
          <source>Pod markup consists of three basic kinds of paragraphs: &lt;a href=&quot;#Ordinary-Paragraph&quot;&gt;ordinary&lt;/a&gt;, &lt;a href=&quot;#Verbatim-Paragraph&quot;&gt;verbatim&lt;/a&gt;, and &lt;a href=&quot;#Command-Paragraph&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">ポッドマークアップは、&lt;a href=&quot;#Ordinary-Paragraph&quot;&gt;通常&lt;/a&gt;、&lt;a href=&quot;#Verbatim-Paragraph&quot;&gt;逐語的&lt;/a&gt;、および&lt;a href=&quot;#Command-Paragraph&quot;&gt;コマンド&lt;/a&gt;の3つの基本的な種類の段落で構成されます。</target>
        </trans-unit>
        <trans-unit id="3729d4ffa4c690e28dd8755c4c73a027d3ed32e0" translate="yes" xml:space="preserve">
          <source>Pod now defaults to text.</source>
          <target state="translated">Podのデフォルトがテキストになりました。</target>
        </trans-unit>
        <trans-unit id="e4100fa00f1a6ff1bc2589ecc13660c9f209d6e8" translate="yes" xml:space="preserve">
          <source>Pod parsers</source>
          <target state="translated">ポッドパーサー</target>
        </trans-unit>
        <trans-unit id="826ed58998f5bc33125341c4f36a3a43574102c1" translate="yes" xml:space="preserve">
          <source>Pod parsers may also note additional attributes including:</source>
          <target state="translated">ポッドパーサーは、以下のような追加属性を記録することもできます。</target>
        </trans-unit>
        <trans-unit id="78ce92125382b9b17f3f27b241298cd0d948dfa7" translate="yes" xml:space="preserve">
          <source>Pod parsers must also support the XHTML codes &quot;E&amp;lt;quot&amp;gt;&quot; for character 34 (doublequote, &quot;), &quot;E&amp;lt;amp&amp;gt;&quot; for character 38 (ampersand, &amp;amp;), and &quot;E&amp;lt;apos&amp;gt;&quot; for character 39 (apostrophe, ').</source>
          <target state="translated">ポッドパーサーは、文字34（二重引用符、 &quot;）のXHTMLコード&quot; E &amp;lt;quot&amp;gt; &quot;、文字38（アンパサンド、＆）の&quot; E &amp;lt;amp&amp;gt; &quot;、および文字39（アポストロフィ）の&quot; E &amp;lt;apos&amp;gt; &quot;もサポートする必要があります。 、 '）。</target>
        </trans-unit>
        <trans-unit id="d16107ce92c757a467355de94f2c9937bd3ef851" translate="yes" xml:space="preserve">
          <source>Pod parsers must recognize</source>
          <target state="translated">ポッドパーサーは</target>
        </trans-unit>
        <trans-unit id="6e60f4cd73d8a373a60400a3a94686dfb7543ae7" translate="yes" xml:space="preserve">
          <source>Pod parsers must treat a line with only spaces and/or tabs on it as a &quot;blank line&quot; such as separates paragraphs. (Some older parsers recognized only two adjacent newlines as a &quot;blank line&quot; but would not recognize a newline, a space, and a newline, as a blank line. This is noncompliant behavior.)</source>
          <target state="translated">ポッドパーサーは、段落を区切るようなスペースやタブだけの行を「空白行」として扱わなければなりません。(古いパーサの中には、隣接する2つの改行だけを「空行」として認識しても、改行、スペース、改行を「空行」として認識しないものがありました。これは非準拠の動作です)。</target>
        </trans-unit>
        <trans-unit id="0c42bd4ec3460b4dc34871ff713c3f41e0e29ace" translate="yes" xml:space="preserve">
          <source>Pod parsers should accept input lines that are of any length.</source>
          <target state="translated">ポッドパーサーは、任意の長さの入力行を受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="1bf89edbc56bd1aa97ad7cab04b88498a0a483ec" translate="yes" xml:space="preserve">
          <source>Pod parsers should not, by default, try to coerce apostrophe (') and quote (&quot;) into smart quotes (little 9's, 66's, 99's, etc), nor try to turn backtick (`) into anything else but a single backtick character (distinct from an open quote character!), nor &quot;--&quot; into anything but two minus signs. They</source>
          <target state="translated">Podパーサは、デフォルトでは、アポストロフィ(')や引用符(&quot;)をスマートクォート(小さな9、66、99など)に強制しようとしたり、バックティック(`)をバックティック1文字以外の文字(オープンクォート文字とは区別されます!)に変えようとしたり、&quot;--&quot;をマイナス記号2文字以外の文字に変えようとしたりしてはいけません。これらの文字は</target>
        </trans-unit>
        <trans-unit id="6e79c8f8c8738ed0d3f21bff581d4bef63a3b7d3" translate="yes" xml:space="preserve">
          <source>Pod parsers should understand all &quot;E&amp;lt;html&amp;gt;&quot; codes as defined in the entity declarations in the most recent XHTML specification at &lt;code&gt;www.W3.org&lt;/code&gt; . Pod parsers must understand at least the entities that define characters in the range 160-255 (Latin-1). Pod parsers, when faced with some unknown &quot;E&amp;lt;</source>
          <target state="translated">ポッドパーサーは、 &lt;code&gt;www.W3.org&lt;/code&gt; の最新のXHTML仕様のエンティティ宣言で定義されているすべての「E &amp;lt;html&amp;gt;」コードを理解する必要があります。ポッドパーサーは、少なくとも160〜255（Latin-1）の範囲の文字を定義するエンティティを理解する必要があります。ポッドパーサー。不明な「E &amp;lt;</target>
        </trans-unit>
        <trans-unit id="16758347dcd3bd561280b8ac6b5b799804590e6a" translate="yes" xml:space="preserve">
          <source>Pod parsers should understand all &quot;E&amp;lt;html&amp;gt;&quot; codes as defined in the entity declarations in the most recent XHTML specification at &lt;code&gt;www.W3.org&lt;/code&gt;. Pod parsers must understand at least the entities that define characters in the range 160-255 (Latin-1). Pod parsers, when faced with some unknown &quot;E&amp;lt;</source>
          <target state="translated">ポッドパーサーは、 &lt;code&gt;www.W3.org&lt;/code&gt; の最新のXHTML仕様のエンティティ宣言で定義されているすべての「E &amp;lt;html&amp;gt;」コードを理解する必要があります。ポッドパーサーは、少なくとも160〜255（Latin-1）の範囲の文字を定義するエンティティを理解する必要があります。ポッドパーサー、不明な「E &amp;lt;」に直面した場合</target>
        </trans-unit>
        <trans-unit id="435533c0da449df0b3756321a9e1ae46d36e29f8" translate="yes" xml:space="preserve">
          <source>Pod parsers should, by default, expand tabs in verbatim paragraphs as they are processed, before passing them to the formatter or other processor. Parsers may also allow an option for overriding this.</source>
          <target state="translated">Podパーサは、デフォルトでは、フォーマッタや他のプロセッサに渡す前に、処理中の段落のタブを展開します。パーサは、これをオーバーライドするオプションを許可することもできます。</target>
        </trans-unit>
        <trans-unit id="3ca8470501fde76fe0175878b3907601deeb185a" translate="yes" xml:space="preserve">
          <source>Pod parsers should, by default, remove newlines from the end of ordinary and verbatim paragraphs before passing them to the formatter. For example, while the paragraph you're reading now could be considered, in Pod source, to end with (and contain) the newline(s) that end it, it should be processed as ending with (and containing) the period character that ends this sentence.</source>
          <target state="translated">Podパーサはデフォルトで、通常の段落や冗長な段落の末尾から改行を削除してからフォーマッタに渡すようになっています。例えば、今読んでいる段落は、Podのソースでは、その段落の最後に改行がある(含まれている)と考えられますが、この文の最後にピリオド文字がある(含まれている)と処理されます。</target>
        </trans-unit>
        <trans-unit id="ed20dd657439280794de2dd1f166cc37caab82bd" translate="yes" xml:space="preserve">
          <source>Pod parsers, when processing a series of data paragraphs one after another (within a single region), should consider them to be one large data paragraph that happens to contain blank lines. So the content of the above &quot;=begin html&quot;...&quot;=end html&quot;</source>
          <target state="translated">ポッドパーサーは、一連のデータ段落を次々に(一つの領域内で)処理する場合、それらを、たまたま空行を含む一つの大きなデータ段落とみなす必要があります。ですから、上記の&quot;=begin html&quot;...&quot;=end html &quot;の内容は</target>
        </trans-unit>
        <trans-unit id="f0083162b22d1c665e8c416af71fd03dff278ffc" translate="yes" xml:space="preserve">
          <source>Pod parsers, when processing a series of verbatim paragraphs one after another, should consider them to be one large verbatim paragraph that happens to contain blank lines. I.e., these two lines, which have a blank line between them:</source>
          <target state="translated">ポッドパーサーは、一連の冗長段落を次々に処理する場合、それらを、たまたま空行を含む1つの大きな冗長段落とみなす必要があります。つまり、この2つの行の間に空行がある場合です。</target>
        </trans-unit>
        <trans-unit id="b5f64a484d29376d6815265a1e55624e33ac0e03" translate="yes" xml:space="preserve">
          <source>Pod parsers, when reporting errors, should make some effort to report an approximate line number (&quot;Nested E&amp;lt;&amp;gt;'s in Paragraph #52, near line 633 of Thing/Foo.pm!&quot;), instead of merely noting the paragraph number (&quot;Nested E&amp;lt;&amp;gt;'s in Paragraph #52 of Thing/Foo.pm!&quot;). Where this is problematic, the paragraph number should at least be accompanied by an excerpt from the paragraph (&quot;Nested E&amp;lt;&amp;gt;'s in Paragraph #52 of Thing/Foo.pm, which begins 'Read/write accessor for the C&amp;lt;interest rate&amp;gt; attribute...'&quot;).</source>
          <target state="translated">ポッドパーサーは、エラーを報告するときに、単に段落番号を指摘するのではなく、おおよその行番号（「段落＃52のネストされたE &amp;lt;&amp;gt;」、Thing / Foo.pmの行633近く）を報告するように努力する必要があります。 （「Thing / Foo.pmのパラグラフ＃52のネストされたE &amp;lt;&amp;gt;」！）。これが問題になる場合は、段落番号に少なくとも段落からの抜粋を含める必要があります（「ネストされたE &amp;lt;&amp;gt;のThing / Foo.pmの段落＃52にあり、これは 'C &amp;lt;interestの読み取り/書き込みアクセサーを開始します。レート&amp;gt;属性... '&quot;）。</target>
        </trans-unit>
        <trans-unit id="668dc3898e0866dd2110d298d9f0248ce827b86d" translate="yes" xml:space="preserve">
          <source>Pod processors must now treat &quot;text|&quot;-less links as follows:</source>
          <target state="translated">ポッドプロセッサは、&quot;text|&quot;レスリンクを以下のように扱わなければならないようになりました。</target>
        </trans-unit>
        <trans-unit id="594a4383ca99a25d0a62e673cd217ea7d9ae8dcd" translate="yes" xml:space="preserve">
          <source>Pod processors must treat a &quot;=for [label] [content...]&quot; paragraph as meaning the same thing as a &quot;=begin [label]&quot; paragraph, content, and an &quot;=end [label]&quot; paragraph. (The parser may conflate these two constructs, or may leave them distinct, in the expectation that the formatter will nevertheless treat them the same.)</source>
          <target state="translated">Podプロセッサは、&quot;=for [label][content...]&quot;パラグラフを、&quot;=begin [label]&quot;パラグラフ(コンテンツ)と&quot;=end [label]&quot;パラグラフとを同じ意味として扱わなければなりません(パーサは、これら2つの構造を混同してもよいし、区別したままにしておいてもよい)。(パーサはこれら2つの構文を混同してもよいし、フォーマッタが同じものとして扱うことを期待して別々のものにしてもよい)。</target>
        </trans-unit>
        <trans-unit id="6de2f56b65b8b60daa7959cb94ce9eb7617c07e8" translate="yes" xml:space="preserve">
          <source>Pod processors seeing such a contentless &quot;=over&quot; ... &quot;=back&quot; region, may ignore it, or may report it as an error.</source>
          <target state="translated">ポッドプロセッサは、このような内容のない &quot;=over&quot; ...&quot;back&quot; 領域を見たポッドプロセッサは、それを無視したり、エラーとして報告したりします。</target>
        </trans-unit>
        <trans-unit id="3a61b4f9c5145d423bbf4e3510d246b1bb3674c7" translate="yes" xml:space="preserve">
          <source>Pod processors should tolerate &quot;=item *&quot; / &quot;=item</source>
          <target state="translated">ポッドプロセッサは、&quot;=item *&quot;を許容する必要があります。/&quot;=項目</target>
        </trans-unit>
        <trans-unit id="9adfdecd54c38e1ba53caaf5b50318f5e88b69d6" translate="yes" xml:space="preserve">
          <source>Pod processors should tolerate empty &quot;=begin</source>
          <target state="translated">ポッドプロセッサは、空の &quot;=begin&quot; を許容しなければなりません。</target>
        </trans-unit>
        <trans-unit id="6ba827650f169b32c9dafe5b41a25b33124521f2" translate="yes" xml:space="preserve">
          <source>Pod text (i.e., possibly containing formatting codes) that's just not for normal formatting (e.g., may not be a normal-use paragraph, but might be for formatting as a footnote).</source>
          <target state="translated">通常のフォーマットではないポッドテキスト(すなわち、フォーマットコードを含む可能性がある)(例えば、通常使用する段落ではないかもしれませんが、脚注としてフォーマットするためのものかもしれません)。</target>
        </trans-unit>
        <trans-unit id="2783a719cd65c4f57c6fddc4f5f579afb17e9719" translate="yes" xml:space="preserve">
          <source>Pod-Parser is free software; you can redistribute it and/or modify it under the terms of the Artistic License distributed with Perl version 5.000 or (at your option) any later version. Please refer to the Artistic License that came with your Perl distribution for more details. If your version of Perl was not distributed under the terms of the Artistic License, than you may distribute PodParser under the same terms as Perl itself.</source>
          <target state="translated">Pod-Parserはフリーソフトウェアです。Perlバージョン5.000またはそれ以降のバージョンで配布されている芸術的ライセンスの条件の下で再配布や変更ができます。詳細については、Perlの配布に付属している芸術的ライセンスを参照してください。あなたのバージョンのPerlが芸術的ライセンスの条件で配布されていない場合、あなたはPerl自身と同じ条件でPodParserを配布することができます。</target>
        </trans-unit>
        <trans-unit id="1e0d75b84c30c843c8bfda065ca1ea8379066bee" translate="yes" xml:space="preserve">
          <source>Pod::Cache</source>
          <target state="translated">Pod::Cache</target>
        </trans-unit>
        <trans-unit id="b1da253840554c380163f270f69e5e71950e910f" translate="yes" xml:space="preserve">
          <source>Pod::Cache::Item</source>
          <target state="translated">Pod::Cache::Item</target>
        </trans-unit>
        <trans-unit id="4309bafc5148041a8cbecb4efa7c1ba20ab29cfb" translate="yes" xml:space="preserve">
          <source>Pod::Checker</source>
          <target state="translated">Pod::Checker</target>
        </trans-unit>
        <trans-unit id="27cda8ded60e07a80496a98d87fc154efc44a085" translate="yes" xml:space="preserve">
          <source>Pod::Checker - check pod documents for syntax errors</source>
          <target state="translated">Pod::Checker-Pod ドキュメントの構文エラーをチェックする</target>
        </trans-unit>
        <trans-unit id="a5093f45c4b5aaed940c739c6d883bfba267a005" translate="yes" xml:space="preserve">
          <source>Pod::Checker, podchecker() - check pod documents for syntax errors</source>
          <target state="translated">Pod::Checker,podchecker()-Pod ドキュメントの構文エラーをチェックする</target>
        </trans-unit>
        <trans-unit id="b66220cfac7078b071d64dbaadef5e2df1a1682d" translate="yes" xml:space="preserve">
          <source>Pod::Escapes</source>
          <target state="translated">Pod::Escapes</target>
        </trans-unit>
        <trans-unit id="70a96b22865c78bae1b86e98f32189c8aaa2bb49" translate="yes" xml:space="preserve">
          <source>Pod::Escapes - for resolving Pod E&amp;lt;...&amp;gt; sequences</source>
          <target state="translated">Pod :: Escapes-ポッドE &amp;lt;...&amp;gt;シーケンスを解決するため</target>
        </trans-unit>
        <trans-unit id="6defdf29847160bf19d64c9df0b01a83e7104754" translate="yes" xml:space="preserve">
          <source>Pod::Find</source>
          <target state="translated">Pod::Find</target>
        </trans-unit>
        <trans-unit id="808564a4fa3f783ef4d67e5d6df9a8f115d31c52" translate="yes" xml:space="preserve">
          <source>Pod::Find - find POD documents in directory trees</source>
          <target state="translated">Pod::Find-ディレクトリツリーからPODドキュメントを探す</target>
        </trans-unit>
        <trans-unit id="dad87a793e174e3498e4bb970a27f08fc37c4ec4" translate="yes" xml:space="preserve">
          <source>Pod::Functions</source>
          <target state="translated">Pod::Functions</target>
        </trans-unit>
        <trans-unit id="5ae2aa0e6801f18d083fa71458d5eb312ff91cd1" translate="yes" xml:space="preserve">
          <source>Pod::Functions - Group Perl's functions a la perlfunc.pod</source>
          <target state="translated">Pod::Functions-perlfunc.pod のように Perl の関数をグループ化する</target>
        </trans-unit>
        <trans-unit id="155d59dfdac80d383af24b34deb797773121193e" translate="yes" xml:space="preserve">
          <source>Pod::Html</source>
          <target state="translated">Pod::Html</target>
        </trans-unit>
        <trans-unit id="6ce65cf1b1b1d8e5982cc14bc857d4e459129be4" translate="yes" xml:space="preserve">
          <source>Pod::Html - module to convert pod files to HTML</source>
          <target state="translated">Pod::Html-ポッドファイルを HTML に変換するモジュール</target>
        </trans-unit>
        <trans-unit id="5ed5257c3f06b8fdcae25020648334294f4275b0" translate="yes" xml:space="preserve">
          <source>Pod::Hyperlink</source>
          <target state="translated">Pod::Hyperlink</target>
        </trans-unit>
        <trans-unit id="dd2479ef40c118023069cffd4b8d4af17078456b" translate="yes" xml:space="preserve">
          <source>Pod::InputObjects</source>
          <target state="translated">Pod::InputObjects</target>
        </trans-unit>
        <trans-unit id="bfd22e221bc5d9239254ba01ea54c7e2a5450505" translate="yes" xml:space="preserve">
          <source>Pod::InputObjects - objects representing POD input paragraphs, commands, etc.</source>
          <target state="translated">Pod::InputObjects-POD入力パラグラフやコマンドなどを表すオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="1fd87a3ff91f7bce73657a26c6061dd462442c15" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence-&amp;gt;*new()*</source>
          <target state="translated">Pod::InteriorSequence-&amp;gt;*new()*</target>
        </trans-unit>
        <trans-unit id="aa9152899b6499f1f28c2040e96614e6bafb5e59" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</source>
          <target state="translated">Pod::InteriorSequence-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="910131799392bc52cef82e99a388fd9c65b4ae23" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence::*DESTROY()*</source>
          <target state="translated">Pod::InteriorSequence::*DESTROY()*</target>
        </trans-unit>
        <trans-unit id="1f1f3b74ed98a3dd9e45e5bf6a582d0ed682382c" translate="yes" xml:space="preserve">
          <source>Pod::InteriorSequence::&lt;b&gt;DESTROY()&lt;/b&gt;</source>
          <target state="translated">Pod::InteriorSequence::&lt;b&gt;DESTROY()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7583826bf22698054ad129c59e6b413946e80949" translate="yes" xml:space="preserve">
          <source>Pod::List</source>
          <target state="translated">Pod::List</target>
        </trans-unit>
        <trans-unit id="399a822bdd33d5589ccd5adac65bb8bcadff8e2b" translate="yes" xml:space="preserve">
          <source>Pod::Man</source>
          <target state="translated">Pod::Man</target>
        </trans-unit>
        <trans-unit id="5e62c421e1876f6d3d9c493879772552cb121e98" translate="yes" xml:space="preserve">
          <source>Pod::Man - Convert POD data to formatted *roff input</source>
          <target state="translated">Pod::Man-PODデータをフォーマットされた*roff入力に変換する</target>
        </trans-unit>
        <trans-unit id="b90fbc49b7a05d49287613663bd77efed96454b2" translate="yes" xml:space="preserve">
          <source>Pod::Man assumes that your *roff formatters have a fixed-width font named &lt;code&gt;CW&lt;/code&gt; . If yours is called something else (like &lt;code&gt;CR&lt;/code&gt; ), use the &lt;code&gt;fixed&lt;/code&gt; option to specify it. This generally only matters for troff output for printing. Similarly, you can set the fonts used for bold, italic, and bold italic fixed-width output.</source>
          <target state="translated">Pod :: Manは、* roffフォーマッターに &lt;code&gt;CW&lt;/code&gt; という名前の固定幅フォントがあることを前提としています。自分の名前が別の名前（ &lt;code&gt;CR&lt;/code&gt; など）である場合は、 &lt;code&gt;fixed&lt;/code&gt; オプションを使用して指定します。これは通常、印刷用のtroff出力にのみ関係します。同様に、太字、斜体、太字斜体の固定幅出力に使用するフォントを設定できます。</target>
        </trans-unit>
        <trans-unit id="cb9d1748a81808e728009b92b1162054aaa06911" translate="yes" xml:space="preserve">
          <source>Pod::Man assumes that your *roff formatters have a fixed-width font named &lt;code&gt;CW&lt;/code&gt;. If yours is called something else (like &lt;code&gt;CR&lt;/code&gt;), use the &lt;code&gt;fixed&lt;/code&gt; option to specify it. This generally only matters for troff output for printing. Similarly, you can set the fonts used for bold, italic, and bold italic fixed-width output.</source>
          <target state="translated">Pod :: Manは、* roffフォーマッターに &lt;code&gt;CW&lt;/code&gt; という名前の固定幅フォントがあることを前提としています。自分のものが他の何か（ &lt;code&gt;CR&lt;/code&gt; など）と呼ばれる場合は、 &lt;code&gt;fixed&lt;/code&gt; オプションを使用して指定します。これは通常、印刷用のtroff出力にのみ関係します。同様に、太字、斜体、および太字の斜体の固定幅出力に使用するフォントを設定できます。</target>
        </trans-unit>
        <trans-unit id="87a26f0879ac57b4dc74e16802d7a975443066e4" translate="yes" xml:space="preserve">
          <source>Pod::Man doesn't handle font names longer than two characters. Neither do most &lt;b&gt;troff&lt;/b&gt; implementations, but GNU troff does as an extension. It would be nice to support as an option for those who want to use it.</source>
          <target state="translated">Pod :: Manは、2文字を超えるフォント名を処理しません。ほとんどの&lt;b&gt;troff&lt;/b&gt;実装もそうではありませんが、GNU troffは拡張として機能します。それを使いたい人のためのオプションとしてサポートするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="ac7f587bee7ab6accabf7dabad0c45ac456a4a26" translate="yes" xml:space="preserve">
          <source>Pod::Man is a module to convert documentation in the POD format (the preferred language for documenting Perl) into *roff input using the man macro set. The resulting *roff code is suitable for display on a terminal using</source>
          <target state="translated">Pod::Manは、PODフォーマット(Perlのドキュメント作成に好まれる言語)のドキュメントをmanマクロセットを使って*roff入力に変換するためのモジュールです。結果として得られる*roffコードは</target>
        </trans-unit>
        <trans-unit id="3d124211073212f4a2d9f14b6de074e349d8b73d" translate="yes" xml:space="preserve">
          <source>Pod::Man is a module to convert documentation in the POD format (the preferred language for documenting Perl) into *roff input using the man macro set. The resulting *roff code is suitable for display on a terminal using &lt;a href=&quot;http://man.he.net/man1/nroff&quot;&gt;nroff(1)&lt;/a&gt;, normally via &lt;a href=&quot;http://man.he.net/man1/man&quot;&gt;man(1)&lt;/a&gt;, or printing using &lt;a href=&quot;http://man.he.net/man1/troff&quot;&gt;troff(1)&lt;/a&gt;. It is conventionally invoked using the driver script &lt;b&gt;pod2man&lt;/b&gt;, but it can also be used directly.</source>
          <target state="translated">Pod :: Manは、POD形式（Perlのドキュメント化に推奨される言語）のドキュメントを、manマクロセットを使用して* roff入力に変換するモジュールです。結果の* roffコードは、&lt;a href=&quot;http://man.he.net/man1/nroff&quot;&gt;nroff（1）&lt;/a&gt;を使用して、通常は&lt;a href=&quot;http://man.he.net/man1/man&quot;&gt;man（1）&lt;/a&gt;を介して端末に表示するか、&lt;a href=&quot;http://man.he.net/man1/troff&quot;&gt;troff（1）&lt;/a&gt;を使用して印刷するのに適しています。従来はドライバスクリプト&lt;b&gt;pod2man&lt;/b&gt;を使用して呼び出されていましたが、直接使用することもできます。</target>
        </trans-unit>
        <trans-unit id="ad3445f4f79ce9259a8628ec68bc720cda5d5e62" translate="yes" xml:space="preserve">
          <source>Pod::Man is excessively slow.</source>
          <target state="translated">Pod::男は遅すぎる。</target>
        </trans-unit>
        <trans-unit id="51823c2a78f4399e5665a442ee35e9c5bca035b6" translate="yes" xml:space="preserve">
          <source>Pod::Paragraph-&amp;gt;*new()*</source>
          <target state="translated">Pod::Paragraph-&amp;gt;*new()*</target>
        </trans-unit>
        <trans-unit id="7d19eb9c0ae5cf759f818151ef1964f55c63cf45" translate="yes" xml:space="preserve">
          <source>Pod::Paragraph-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</source>
          <target state="translated">Pod::Paragraph-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="74702680baaf5527f7457048b890cf998a0bb577" translate="yes" xml:space="preserve">
          <source>Pod::ParseLink</source>
          <target state="translated">Pod::ParseLink</target>
        </trans-unit>
        <trans-unit id="cb542aa99fa734c9712efd42aa4abd5626202cf7" translate="yes" xml:space="preserve">
          <source>Pod::ParseLink - Parse an L&amp;lt;&amp;gt; formatting code in POD text</source>
          <target state="translated">Pod :: ParseLink-PODテキストのL &amp;lt;&amp;gt;フォーマットコードを解析する</target>
        </trans-unit>
        <trans-unit id="40d45d7153ea7fd47a061f54ddf8f05276e6b0a8" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree-&amp;gt;*new()*</source>
          <target state="translated">Pod::ParseTree-&amp;gt;*new()*</target>
        </trans-unit>
        <trans-unit id="c5b3a2fe463766f0c50d1925513a960e96c11a70" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</source>
          <target state="translated">Pod::ParseTree-&amp;gt;&lt;b&gt;new()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="58e28f5f7a4d5a5122148dd16c2d1e71ce7bc46b" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree::*DESTROY()*</source>
          <target state="translated">Pod::ParseTree::*DESTROY()*</target>
        </trans-unit>
        <trans-unit id="81662ddf3d094b6a72fa9f04c80b756682be36f9" translate="yes" xml:space="preserve">
          <source>Pod::ParseTree::&lt;b&gt;DESTROY()&lt;/b&gt;</source>
          <target state="translated">Pod::ParseTree::&lt;b&gt;DESTROY()&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ee80a8df78f91720393a41e76f1774b357695e04" translate="yes" xml:space="preserve">
          <source>Pod::ParseUtils</source>
          <target state="translated">Pod::ParseUtils</target>
        </trans-unit>
        <trans-unit id="bbc14d0ac8be47a43775571a03e2b17ca30027af" translate="yes" xml:space="preserve">
          <source>Pod::ParseUtils - helpers for POD parsing and conversion</source>
          <target state="translated">Pod::ParseUtils-POD のパースと変換のためのヘルパー</target>
        </trans-unit>
        <trans-unit id="0f85b7c22f11f515805110a0d85c8bbe81e1d272" translate="yes" xml:space="preserve">
          <source>Pod::Parser</source>
          <target state="translated">Pod::Parser</target>
        </trans-unit>
        <trans-unit id="e349932a04d5644a45ac3d6d00713d29777c5bd0" translate="yes" xml:space="preserve">
          <source>Pod::Parser - base class for creating POD filters and translators</source>
          <target state="translated">Pod::Parser-POD フィルタとトランスレータを作成するための基底クラス</target>
        </trans-unit>
        <trans-unit id="87e59733686c14028fb5b5ae16afd20f13d498de" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc</source>
          <target state="translated">Pod::Perldoc</target>
        </trans-unit>
        <trans-unit id="9d3a2f1ea446fa05938de94bfd8b37f662112ca1" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc - Look up Perl documentation in Pod format.</source>
          <target state="translated">Pod::Perldoc-Perl のドキュメントを Pod 形式で探す。</target>
        </trans-unit>
        <trans-unit id="952ca16414e36da5649f023d81973c25e340d6f9" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::BaseTo</source>
          <target state="translated">Pod::Perldoc::BaseTo</target>
        </trans-unit>
        <trans-unit id="35bfe0dc1cd61b9db99276bb0f43f2c0c5ad18a2" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::BaseTo - Base for Pod::Perldoc formatters</source>
          <target state="translated">Pod::Perldoc::BaseTo-Pod::Perldocのフォーマッタ用のベース</target>
        </trans-unit>
        <trans-unit id="b4063f396bd36a75310fe477b3233942b1f8e567" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::GetOptsOO</source>
          <target state="translated">Pod::Perldoc::GetOptsOO</target>
        </trans-unit>
        <trans-unit id="a32860ca9b02758a905681124e46d01c0cb1afa0" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::GetOptsOO - Customized option parser for Pod::Perldoc</source>
          <target state="translated">Pod::Perldoc::GetOptsOO-Pod::Perldoc 用にカスタマイズされたオプションパーサー</target>
        </trans-unit>
        <trans-unit id="9cd9c7c8bf140c8ef70c8bdc93de0b50d1c033a5" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToANSI</source>
          <target state="translated">Pod::Perldoc::ToANSI</target>
        </trans-unit>
        <trans-unit id="7657ee714db57c17e93a20e9955a2fbbbe328e50" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToANSI - render Pod with ANSI color escapes</source>
          <target state="translated">Pod::Perldoc::ToANSI-PodをANSIカラーエスケープでレンダリングする</target>
        </trans-unit>
        <trans-unit id="4db2d3912d225b5fb9794a822706dc8ac6dd251e" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToChecker</source>
          <target state="translated">Pod::Perldoc::ToChecker</target>
        </trans-unit>
        <trans-unit id="fb1bc67a07a358017c46696594ab3bb46f1cb4a2" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToChecker - let Perldoc check Pod for errors</source>
          <target state="translated">Pod::Perldoc::ToChecker-PerldocがPodのエラーをチェックするようにする</target>
        </trans-unit>
        <trans-unit id="a1574ea07e4ca7da944a178adab1f198c77bb9c4" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToMan</source>
          <target state="translated">Pod::Perldoc::ToMan</target>
        </trans-unit>
        <trans-unit id="30ccb6b13c861e844f65ca3477dee08e5031e04b" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToMan - let Perldoc render Pod as man pages</source>
          <target state="translated">Pod::Perldoc::ToMan-Perldoc が Pod を man ページとしてレンダリングできるようにする</target>
        </trans-unit>
        <trans-unit id="e4528b7a26cc2f22afcb70063b8c90bfcec139cb" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToNroff</source>
          <target state="translated">Pod::Perldoc::ToNroff</target>
        </trans-unit>
        <trans-unit id="aad347f7e727638ba9cf62fde0284182ed3e5499" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToNroff - let Perldoc convert Pod to nroff</source>
          <target state="translated">Pod::Perldoc::ToNroff-Perldoc で Pod を nroff に変換する</target>
        </trans-unit>
        <trans-unit id="c74cfee58278b9d7e2d985e281b40bac7cf67fe1" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToPod</source>
          <target state="translated">Pod::Perldoc::ToPod</target>
        </trans-unit>
        <trans-unit id="d74169b37abf471a8016b67eb6b64f1d9c9504cb" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToPod - let Perldoc render Pod as ... Pod!</source>
          <target state="translated">Pod::Perldoc::ToPod-Perldoc が Pod を ...としてレンダリングするようにする Pod!</target>
        </trans-unit>
        <trans-unit id="f92919a3efdae5160bab598ae79998a12eaeb9d9" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToRtf</source>
          <target state="translated">Pod::Perldoc::ToRtf</target>
        </trans-unit>
        <trans-unit id="0397b052f308b568ed8ea3c3f278e9880b59064b" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToRtf - let Perldoc render Pod as RTF</source>
          <target state="translated">Pod::Perldoc::ToRtf-Perldoc が Pod を RTF としてレンダリングできるようにする</target>
        </trans-unit>
        <trans-unit id="fd1e41f569b50e20cb00459a2e024d1d48daa4ae" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTerm</source>
          <target state="translated">Pod::Perldoc::ToTerm</target>
        </trans-unit>
        <trans-unit id="9fd6d1a0399a01712bf45f2452104d56dd37b0b7" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTerm - render Pod with terminal escapes</source>
          <target state="translated">Pod::Perldoc::ToTerm-Podをターミナルエスケープでレンダリングする</target>
        </trans-unit>
        <trans-unit id="c1c7e677057bffb1949a495159f761c28d093073" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToText</source>
          <target state="translated">Pod::Perldoc::ToText</target>
        </trans-unit>
        <trans-unit id="1b76ad0504a574b95327f3837e47de7fc1023f81" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToText - let Perldoc render Pod as plaintext</source>
          <target state="translated">Pod::Perldoc::ToText-Perldoc が Pod をプレーンテキストとしてレンダリングする</target>
        </trans-unit>
        <trans-unit id="44a2311f8a968a637bebf75641a7ba7c7bea0e77" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTk</source>
          <target state="translated">Pod::Perldoc::ToTk</target>
        </trans-unit>
        <trans-unit id="ce6206e971d4052af6b94fba7e16c592c58263c8" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToTk - let Perldoc use Tk::Pod to render Pod</source>
          <target state="translated">Pod::Perldoc::ToTk-PerldocがTk::Podを使ってPodをレンダリングできるようにする</target>
        </trans-unit>
        <trans-unit id="cd1e43a8f3efd6bddd767fd169879bd7e8783197" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToXml</source>
          <target state="translated">Pod::Perldoc::ToXml</target>
        </trans-unit>
        <trans-unit id="eb2c349f8bc3477a2154a9f78f20889a0cd5e99e" translate="yes" xml:space="preserve">
          <source>Pod::Perldoc::ToXml - let Perldoc render Pod as XML</source>
          <target state="translated">Pod::Perldoc::ToXml-Perldoc が Pod を XML としてレンダリングする</target>
        </trans-unit>
        <trans-unit id="944eb1a064749ff64ccfc3ec1500e3e6fc76949a" translate="yes" xml:space="preserve">
          <source>Pod::PlainText</source>
          <target state="translated">Pod::PlainText</target>
        </trans-unit>
        <trans-unit id="5cc69f416528304166ca8b06a7aa0165df6da3fc" translate="yes" xml:space="preserve">
          <source>Pod::PlainText - Convert POD data to formatted ASCII text</source>
          <target state="translated">Pod::PlainText-POD データをフォーマット済み ASCII テキストに変換する</target>
        </trans-unit>
        <trans-unit id="946a0512ab5f99c773ae3db3dc5b34c4ce07ed9b" translate="yes" xml:space="preserve">
          <source>Pod::PlainText is a module that can convert documentation in the POD format (the preferred language for documenting Perl) into formatted ASCII. It uses no special formatting controls or codes whatsoever, and its output is therefore suitable for nearly any device.</source>
          <target state="translated">Pod::PlainTextは、PODフォーマット(Perlのドキュメント作成に好まれる言語)のドキュメントをフォーマットされたASCIIに変換するモジュールです。特別な書式制御やコードは一切使用していないので、出力はほとんどのデバイスに適しています。</target>
        </trans-unit>
        <trans-unit id="8ed6eb484633051ee80e6a561ff9dcdff2c845ec" translate="yes" xml:space="preserve">
          <source>Pod::Select</source>
          <target state="translated">Pod::Select</target>
        </trans-unit>
        <trans-unit id="14904b6c97faa949c076532da064781f2d55c6b6" translate="yes" xml:space="preserve">
          <source>Pod::Select, podselect() - extract selected sections of POD from input</source>
          <target state="translated">Pod::Select,podselect()-入力からPODの選択されたセクションを抽出する</target>
        </trans-unit>
        <trans-unit id="661be2b89917f8caa0e44c582550ee749e115412" translate="yes" xml:space="preserve">
          <source>Pod::Simpele::XHTML was created by Allison Randal &amp;lt;allison@perl.org&amp;gt;.</source>
          <target state="translated">Pod :: Simpele :: XHTMLはAllison Randal &amp;lt;allison@perl.org&amp;gt;によって作成されました。</target>
        </trans-unit>
        <trans-unit id="d6a12e7ef9128476299731ac0108ac1f784f3a4d" translate="yes" xml:space="preserve">
          <source>Pod::Simple</source>
          <target state="translated">Pod::Simple</target>
        </trans-unit>
        <trans-unit id="5996780debc4d561a6d61c26d2810b23db42afb5" translate="yes" xml:space="preserve">
          <source>Pod::Simple - framework for parsing Pod</source>
          <target state="translated">Pod::Simple-Pod を解析するためのフレームワーク</target>
        </trans-unit>
        <trans-unit id="6d11b0239af7ff1a19852fc395f1f5f5a3a35c0c" translate="yes" xml:space="preserve">
          <source>Pod::Simple is a Perl library for parsing text in the Pod (&quot;plain old documentation&quot;) markup language that is typically used for writing documentation for Perl and for Perl modules. The Pod format is explained &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;; the most common formatter is called &lt;code&gt;perldoc&lt;/code&gt; .</source>
          <target state="translated">Pod :: Simpleは、Pod（ &quot;プレーンオールドドキュメント&quot;）マークアップ言語でテキストを解析するためのPerlライブラリであり、PerlおよびPerlモジュールのドキュメントの記述に通常使用されます。ポッド形式は&lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;で説明されています。最も一般的なフォーマッターは &lt;code&gt;perldoc&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="d5137b4a66b1a3ab70161fd3fed20b8efa15f0b7" translate="yes" xml:space="preserve">
          <source>Pod::Simple is a Perl library for parsing text in the Pod (&quot;plain old documentation&quot;) markup language that is typically used for writing documentation for Perl and for Perl modules. The Pod format is explained in &lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;; the most common formatter is called &lt;code&gt;perldoc&lt;/code&gt;.</source>
          <target state="translated">Pod :: Simpleは、PerlおよびPerlモジュールのドキュメントを作成するために通常使用されるPod（「プレーンオールドドキュメント」）マークアップ言語のテキストを解析するためのPerlライブラリです。ポッド形式は&lt;a href=&quot;perlpod&quot;&gt;perlpod&lt;/a&gt;で説明されています。最も一般的なフォーマッタは &lt;code&gt;perldoc&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="540c209eeff967303f473e2a9f8cc439bebb7a9a" translate="yes" xml:space="preserve">
          <source>Pod::Simple is maintained by:</source>
          <target state="translated">Pod::Simpleがメンテナンスしています。</target>
        </trans-unit>
        <trans-unit id="bb05ccf22951145f967d6e477a3802aa35df7d1b" translate="yes" xml:space="preserve">
          <source>Pod::Simple provides a lot of methods that aren't generally interesting to the end user of an existing Pod formatter, but some of which you might find useful in writing a Pod formatter. They are listed below. The first several methods (the accept_* methods) are for declaring the capabilities of your parser, notably what &lt;code&gt;=for &lt;i&gt;targetname&lt;/i&gt;&lt;/code&gt; sections it's interested in, what extra N&amp;lt;...&amp;gt; codes it accepts beyond the ones described in the</source>
          <target state="translated">Pod :: Simpleは、既存のPodフォーマッターのエンドユーザーには一般的に興味のない多くのメソッドを提供しますが、そのうちのいくつかはPodフォーマッターの作成に役立つ場合があります。それらは以下にリストされています。最初のいくつかのメソッド（accept_ *メソッド）は、パーサーの機能を宣言するためのものです。特に、関心のある &lt;code&gt;=for &lt;i&gt;targetname&lt;/i&gt;&lt;/code&gt; セクション、以下で説明されているもの以外に受け入れる追加のN &amp;lt;...&amp;gt;コードを宣言します。</target>
        </trans-unit>
        <trans-unit id="1804f7888eed7ad55ddcaa1547cb97407e48d6c0" translate="yes" xml:space="preserve">
          <source>Pod::Simple uses this class for representing the value of the &quot;section&quot; attribute of &quot;L&quot; start-element events. Most applications can just use the normal stringification of objects of this class; they stringify to just the text content of the section, such as &quot;foo&quot; for &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt; , and &quot;bar&quot; for &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">Pod :: Simpleはこのクラスを使用して、「L」開始要素イベントの「section」属性の値を表します。ほとんどのアプリケーションは、このクラスのオブジェクトの通常の文字列化を使用できます。 &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt; 場合は「foo」、 &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt; 「bar」など、セクションのテキストコンテンツのみに文字列化します。</target>
        </trans-unit>
        <trans-unit id="3042d36d43941ed5b64500dc2cd178778f09f598" translate="yes" xml:space="preserve">
          <source>Pod::Simple uses this class for representing the value of the &quot;section&quot; attribute of &quot;L&quot; start-element events. Most applications can just use the normal stringification of objects of this class; they stringify to just the text content of the section, such as &quot;foo&quot; for &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt;, and &quot;bar&quot; for &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Pod :: Simpleは、このクラスを使用して、「L」開始要素イベントの「section」属性の値を表します。ほとんどのアプリケーションは、このクラスのオブジェクトの通常の文字列化を使用できます。 &lt;code&gt;L&amp;lt;Stuff/foo&amp;gt;&lt;/code&gt; 場合は「foo」、 &lt;code&gt;L&amp;lt;Stuff/bI&amp;lt;ar&amp;gt;&amp;gt;&lt;/code&gt; 「bar」など、セクションのテキストコンテンツのみに文字列化されます。</target>
        </trans-unit>
        <trans-unit id="dc75eedd949380ed057546f8903efcf7ffa0476d" translate="yes" xml:space="preserve">
          <source>Pod::Simple was created by Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt; with code borrowed from Marek Rouchal's &lt;a href=&quot;../find&quot;&gt;Pod::Find&lt;/a&gt;, which in turn heavily borrowed code from Nick Ing-Simmons' &lt;code&gt;PodToHtml&lt;/code&gt; .</source>
          <target state="translated">Pod :: SimpleはSean M. Burke &amp;lt;sburke@cpan.org&amp;gt;によって作成されました。コードはMarek Rouchalの&lt;a href=&quot;../find&quot;&gt;Pod :: Find&lt;/a&gt;から借用し、Nick Ing-Simmonsの &lt;code&gt;PodToHtml&lt;/code&gt; からコードを大量に借用しました。</target>
        </trans-unit>
        <trans-unit id="046013a100ec04c3c2d20b96d7505ecd3be590e8" translate="yes" xml:space="preserve">
          <source>Pod::Simple was created by Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt; with code borrowed from Marek Rouchal's &lt;a href=&quot;Pod::Find&quot;&gt;Pod::Find&lt;/a&gt;, which in turn heavily borrowed code from Nick Ing-Simmons' &lt;code&gt;PodToHtml&lt;/code&gt;.</source>
          <target state="translated">Pod :: Simpleは、MarekRouchalの&lt;a href=&quot;Pod::Find&quot;&gt;Pod :: Find&lt;/a&gt;から借用したコードを使用して、Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt;によって作成されました。このコードは、NickIng -Simmonsの &lt;code&gt;PodToHtml&lt;/code&gt; から借用したものです。</target>
        </trans-unit>
        <trans-unit id="8185c68a0339f127d3dbf1b4ad4adf9a512efe5f" translate="yes" xml:space="preserve">
          <source>Pod::Simple was created by Sean M. Burke &amp;lt;sburke@cpan.org&amp;gt;. But don't bother him, he's retired.</source>
          <target state="translated">Pod :: SimpleはSean M. Burke &amp;lt;sburke@cpan.org&amp;gt;によって作成されました。しかし、彼を気にしないでください、彼は引退しました。</target>
        </trans-unit>
        <trans-unit id="d80b5e8d9939c2b2cdcf8caadd6b9ea76e6a4a21" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Checker</source>
          <target state="translated">Pod::Simple::Checker</target>
        </trans-unit>
        <trans-unit id="55590025c27353d8a373860de047b5dce37dba23" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Checker -- check the Pod syntax of a document</source>
          <target state="translated">Pod::Simple::Checker --ドキュメントのPod構文をチェックする</target>
        </trans-unit>
        <trans-unit id="b74f1729aad6ae1a22d920544a38e42cdf81b6d7" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Debug</source>
          <target state="translated">Pod::Simple::Debug</target>
        </trans-unit>
        <trans-unit id="fa67e2158a0a94760ae209d78cc2c60c328cfd2a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Debug -- put Pod::Simple into trace/debug mode</source>
          <target state="translated">Pod::Simple::Debug --Pod::Simpleをトレース/デバッグモードにします。</target>
        </trans-unit>
        <trans-unit id="c186101b5cf38096df66f1dfcd5544f7e2c30c6c" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsText</source>
          <target state="translated">Pod::Simple::DumpAsText</target>
        </trans-unit>
        <trans-unit id="c3c292397a980ed71b52c2ff0898634dee25e619" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsText -- dump Pod-parsing events as text</source>
          <target state="translated">Pod::Simple::DumpAsText --Podのパースイベントをテキストとしてダンプする</target>
        </trans-unit>
        <trans-unit id="cc35fcc6b860e53e9fba03174336a15b24d3e20e" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML</source>
          <target state="translated">Pod::Simple::DumpAsXML</target>
        </trans-unit>
        <trans-unit id="373b728991f6282ba763bd2a10793d147d39c8ce" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML -- turn Pod into XML</source>
          <target state="translated">Pod::Simple::DumpAsXML --PodをXMLに変換する</target>
        </trans-unit>
        <trans-unit id="9f6b85c1362b8bcf343570ad01e881211977b269" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML inherits methods from &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="translated">Pod :: Simple :: DumpAsXMLは、&lt;a href=&quot;../simple&quot;&gt;Pod :: Simple&lt;/a&gt;からメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="02b3f87b1932c51400c8b115e4f1ba0a1b176a04" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML inherits methods from &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="translated">Pod :: Simple :: DumpAsXMLは&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simple&lt;/a&gt;からメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="a26787ab4cbd9b5d37d67ecda1faa021db04bcda" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML is a subclass of &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt; that parses Pod and turns it into indented and wrapped XML. This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="translated">Pod :: Simple :: DumpAsXMLは、&lt;a href=&quot;../simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスであり、Podを解析して、インデントされてラップされたXMLに変換します。このクラスは、Pod :: Simpleに基づいてPodフォーマッターを作成する人々にとって興味深いものです。</target>
        </trans-unit>
        <trans-unit id="3bc6aef0753a906554fe52605727fcd96d63c2f8" translate="yes" xml:space="preserve">
          <source>Pod::Simple::DumpAsXML is a subclass of &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; that parses Pod and turns it into indented and wrapped XML. This class is of interest to people writing Pod formatters based on Pod::Simple.</source>
          <target state="translated">Pod :: Simple :: DumpAsXMLは、&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスであり、Podを解析して、インデントされラップされたXMLに変換します。このクラスは、Pod :: Simpleに基づいてポッドフォーマッターを作成する人々にとって興味深いものです。</target>
        </trans-unit>
        <trans-unit id="18e3cad548b1d58d72a35d1b97df012592abca6a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTML</source>
          <target state="translated">Pod::Simple::HTML</target>
        </trans-unit>
        <trans-unit id="9ba84d76002e656d6a841be7c0fa1ddaf7a15278" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTML - convert Pod to HTML</source>
          <target state="translated">Pod::Simple::HTML-PodをHTMLに変換する</target>
        </trans-unit>
        <trans-unit id="4f616c51b55e2caed067f512efd6be765988729c" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTMLBatch</source>
          <target state="translated">Pod::Simple::HTMLBatch</target>
        </trans-unit>
        <trans-unit id="b714f30d97375e99cc3dc025fe21efb3928ffb30" translate="yes" xml:space="preserve">
          <source>Pod::Simple::HTMLBatch - convert several Pod files to several HTML files</source>
          <target state="translated">Pod::Simple::HTMLBatch-複数の Pod ファイルを複数の HTML ファイルに変換する</target>
        </trans-unit>
        <trans-unit id="ffc09ddc7418e3e9cf3efb9e134eaaaeff9f17d4" translate="yes" xml:space="preserve">
          <source>Pod::Simple::JustPod</source>
          <target state="translated">Pod::Simple::JustPod</target>
        </trans-unit>
        <trans-unit id="b431e9b8673f61ccfc1e9efe125ce7dfc3efc755" translate="yes" xml:space="preserve">
          <source>Pod::Simple::JustPod -- just the Pod, the whole Pod, and nothing but the Pod</source>
          <target state="translated">Pod::Simple::JustPod --ただのPodであり、Pod全体であり、Pod以外は何もありません。</target>
        </trans-unit>
        <trans-unit id="eddaf844c75beb11321838c4f34da6339343ef39" translate="yes" xml:space="preserve">
          <source>Pod::Simple::JustPod was developed by John SJ Anderson &lt;code&gt;genehack@genehack.org&lt;/code&gt;, with contributions from Karl Williamson &lt;code&gt;khw@cpan.org&lt;/code&gt;.</source>
          <target state="translated">Pod :: Simple :: JustPodは、John SJ Anderson &lt;code&gt;genehack@genehack.org&lt;/code&gt; によって開発され、Karl Williamsonkhw@cpan.orgからの寄稿を受け &lt;code&gt;khw@cpan.org&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7d427af968fe5b5f7cabfdd1b7609d966dc62cc" translate="yes" xml:space="preserve">
          <source>Pod::Simple::LinkSection</source>
          <target state="translated">Pod::Simple::LinkSection</target>
        </trans-unit>
        <trans-unit id="565e4c6e11a593b50f5257b1a4aee37099620372" translate="yes" xml:space="preserve">
          <source>Pod::Simple::LinkSection -- represent &quot;section&quot; attributes of L codes</source>
          <target state="translated">Pod::Simple::LinkSection --Lコードの &quot;セクション &quot;属性を表す</target>
        </trans-unit>
        <trans-unit id="04192c711189c3d3745e9766bf472b32950a1f73" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Methody</source>
          <target state="translated">Pod::Simple::Methody</target>
        </trans-unit>
        <trans-unit id="0ca575b26347f441076a6fd1a824c79b25cf2619" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Methody -- turn Pod::Simple events into method calls</source>
          <target state="translated">Pod::Simple::Methody --Pod::Simpleイベントをメソッド呼び出しに変換する</target>
        </trans-unit>
        <trans-unit id="7aa02a3f7b5768f2a6ec877904dc7ab387a3061a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParser</target>
        </trans-unit>
        <trans-unit id="ea0c112c9214628c826e97034dffc164b33f6a82" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParser -- a pull-parser interface to parsing Pod</source>
          <target state="translated">Pod::Simple::PullParser --Podを解析するためのプルパーサーインターフェース</target>
        </trans-unit>
        <trans-unit id="070ea3cf235fa0c5ea455a6107c6b1c28503ff41" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserEndToken</source>
          <target state="translated">Pod::Simple::PullParserEndToken</target>
        </trans-unit>
        <trans-unit id="0e20ea7a70dab49b1f0f66e63f1a06a2f448b097" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserEndToken -- end-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserEndToken --Pod::Simple::PullParserのエンドトークン</target>
        </trans-unit>
        <trans-unit id="11aea837de023672a7a9d2518ea0e8e11a95f00a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserStartToken</source>
          <target state="translated">Pod::Simple::PullParserStartToken</target>
        </trans-unit>
        <trans-unit id="d6244e584441e2b0f907fb0ffecde2defcc17cae" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserStartToken -- start-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserStartToken --Pod::Simple::PullParserのスタートトークン</target>
        </trans-unit>
        <trans-unit id="41b32f7393c26878ea6e6764691f6ab8d4cfed16" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserTextToken</source>
          <target state="translated">Pod::Simple::PullParserTextToken</target>
        </trans-unit>
        <trans-unit id="85a00c2aa32007d196ff05d09a358b591b60a9d7" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserTextToken -- text-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserTextToken --Pod::Simple::PullParserのテキストトークン</target>
        </trans-unit>
        <trans-unit id="af99c7c32db60fbc39ffa01aa36158222378886f" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserToken</source>
          <target state="translated">Pod::Simple::PullParserToken</target>
        </trans-unit>
        <trans-unit id="83ed709c868d2cc4eff657e59deb01ec607246dd" translate="yes" xml:space="preserve">
          <source>Pod::Simple::PullParserToken -- tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserToken --Pod::Simple::PullParserのトークン</target>
        </trans-unit>
        <trans-unit id="cd8b2814ae13bcab0bbe442896010091755dc3df" translate="yes" xml:space="preserve">
          <source>Pod::Simple::RTF</source>
          <target state="translated">Pod::Simple::RTF</target>
        </trans-unit>
        <trans-unit id="b3241001e4eb1949e4d0740b263d2fb59490fadf" translate="yes" xml:space="preserve">
          <source>Pod::Simple::RTF -- format Pod as RTF</source>
          <target state="translated">Pod::Simple::RTF --PodをRTFとしてフォーマットする</target>
        </trans-unit>
        <trans-unit id="7cec88f41732497c431990231ff60d0d97239c5a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Search</source>
          <target state="translated">Pod::Simple::Search</target>
        </trans-unit>
        <trans-unit id="e1ea8fdb67de63159764e718db4fbefbb27c467f" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Search - find POD documents in directory trees</source>
          <target state="translated">Pod::Simple::Search-ディレクトリツリーから POD ドキュメントを探す</target>
        </trans-unit>
        <trans-unit id="62021a054d37a5d7fcf8c80130c7b291785a01cf" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Search will by default internally make an assumption based on the underlying filesystem where the class file is found whether it is case insensitive or not.</source>
          <target state="translated">Pod::Simple::Searchは、デフォルトでは内部的にクラスファイルが見つかったファイルシステムに基づいて、大文字小文字を区別しないかどうかを仮定しています。</target>
        </trans-unit>
        <trans-unit id="4bec063b1fe4a8b7088da5083ba7437146419ca6" translate="yes" xml:space="preserve">
          <source>Pod::Simple::SimpleTree</source>
          <target state="translated">Pod::Simple::SimpleTree</target>
        </trans-unit>
        <trans-unit id="eea909e0d762cb819c8aa8330fdb9ba6a9be4d16" translate="yes" xml:space="preserve">
          <source>Pod::Simple::SimpleTree -- parse Pod into a simple parse tree</source>
          <target state="translated">Pod::Simple::SimpleTree --Podを単純な解析木に解析する</target>
        </trans-unit>
        <trans-unit id="5da91d8d6431a8c01e6c864a85dab3bf9cec1f3e" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Subclassing</source>
          <target state="translated">Pod::Simple::Subclassing</target>
        </trans-unit>
        <trans-unit id="7f952b92af53e1429b73f0a13edd27e756189634" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Subclassing -- write a formatter as a Pod::Simple subclass</source>
          <target state="translated">Pod::Simple::サブクラス化 --フォーマッタをPod::Simpleのサブクラスとして書く</target>
        </trans-unit>
        <trans-unit id="b18ba6877611e38d5ebeca357ca45de50b3d8f5a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Text</source>
          <target state="translated">Pod::Simple::Text</target>
        </trans-unit>
        <trans-unit id="753e56ce7ac1a58ad889fddf470a50b96539c6da" translate="yes" xml:space="preserve">
          <source>Pod::Simple::Text -- format Pod as plaintext</source>
          <target state="translated">Pod::Simple::Text --Podをプレーンテキストとしてフォーマットする</target>
        </trans-unit>
        <trans-unit id="8d8c6d10cf65bae9e13056ddeb8c6d2c2a890ff6" translate="yes" xml:space="preserve">
          <source>Pod::Simple::TextContent</source>
          <target state="translated">Pod::Simple::TextContent</target>
        </trans-unit>
        <trans-unit id="7e136e15cf39e6850f0880e93ca8c30b3d62e90f" translate="yes" xml:space="preserve">
          <source>Pod::Simple::TextContent -- get the text content of Pod</source>
          <target state="translated">Pod::Simple::TextContent --Podのテキストコンテンツを取得します。</target>
        </trans-unit>
        <trans-unit id="c87067a51be41176018a7a02a831c44466936f6a" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XHTML</source>
          <target state="translated">Pod::Simple::XHTML</target>
        </trans-unit>
        <trans-unit id="259f074470a9013b0eea26649d0b91cffcd63426" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XHTML -- format Pod as validating XHTML</source>
          <target state="translated">Pod::Simple::XHTML --検証用XHTMLとしてPodをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="fcd3e6ec8f3899adef753786dbd1ab596eb81dbe" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XHTML offers a number of methods that modify the format of the HTML output. Call these after creating the parser object, but before the call to &lt;code&gt;parse_file&lt;/code&gt; :</source>
          <target state="translated">Pod :: Simple :: XHTMLは、HTML出力の形式を変更するいくつかのメソッドを提供します。パーサーオブジェクトを作成した後、 &lt;code&gt;parse_file&lt;/code&gt; を呼び出す前にこれらを呼び出します。</target>
        </trans-unit>
        <trans-unit id="3e5485140fcfa8d3ea4729639fdcbb80ddfb24e3" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XHTML offers a number of methods that modify the format of the HTML output. Call these after creating the parser object, but before the call to &lt;code&gt;parse_file&lt;/code&gt;:</source>
          <target state="translated">Pod :: Simple :: XHTMLは、HTML出力の形式を変更するいくつかのメソッドを提供します。パーサーオブジェクトを作成した後、 &lt;code&gt;parse_file&lt;/code&gt; を呼び出す前にこれらを呼び出します。</target>
        </trans-unit>
        <trans-unit id="951593ce225e4b7953c95143c2dd0fc68256192b" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XMLOutStream</source>
          <target state="translated">Pod::Simple::XMLOutStream</target>
        </trans-unit>
        <trans-unit id="2c8ebe8007a83f6db16cd28e4028774e22050e1e" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XMLOutStream -- turn Pod into XML</source>
          <target state="translated">Pod::Simple::XMLOutStream --PodをXMLに変換する</target>
        </trans-unit>
        <trans-unit id="5a6dda8cf65a6f2f753c09f42fcc82ca0f054678" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XMLOutStream inherits methods from &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="translated">Pod :: Simple :: XMLOutStreamは、&lt;a href=&quot;../simple&quot;&gt;Pod :: Simple&lt;/a&gt;からメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="d5fe61554e18ee37710a20ddffd872e1657ed8e9" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XMLOutStream inherits methods from &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt;.</source>
          <target state="translated">Pod :: Simple :: XMLOutStreamは、&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simple&lt;/a&gt;からメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="b5393b17d53eb5cd3e02f552010cdbdc23dd6294" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XMLOutStream is a subclass of &lt;a href=&quot;../simple&quot;&gt;Pod::Simple&lt;/a&gt; that parses Pod and turns it into XML.</source>
          <target state="translated">Pod :: Simple :: XMLOutStreamは、&lt;a href=&quot;../simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスで、Podを解析してXMLに変換します。</target>
        </trans-unit>
        <trans-unit id="6afeca633f44df878f3c6c4af1eb0dc5fc515050" translate="yes" xml:space="preserve">
          <source>Pod::Simple::XMLOutStream is a subclass of &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt; that parses Pod and turns it into XML.</source>
          <target state="translated">Pod :: Simple :: XMLOutStreamは、&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simpleの&lt;/a&gt;サブクラスであり、Podを解析してXMLに変換します。</target>
        </trans-unit>
        <trans-unit id="4c7f94950bba4ec35927384f3ba52a47b2d388e7" translate="yes" xml:space="preserve">
          <source>Pod::Text</source>
          <target state="translated">Pod::Text</target>
        </trans-unit>
        <trans-unit id="e6e584d20fd5725d4428861f69402acfdd834bf0" translate="yes" xml:space="preserve">
          <source>Pod::Text - Convert POD data to formatted ASCII text</source>
          <target state="translated">Pod::Text-POD データをフォーマットされた ASCII テキストに変換する</target>
        </trans-unit>
        <trans-unit id="ab9108e9dff7e6acb11c45245829f8db58a22933" translate="yes" xml:space="preserve">
          <source>Pod::Text - Convert POD data to formatted text</source>
          <target state="translated">Pod::Text-POD データをフォーマットされたテキストに変換する</target>
        </trans-unit>
        <trans-unit id="519614764ccb1ff38de936b78f067c16eca0fe48" translate="yes" xml:space="preserve">
          <source>Pod::Text is a module that can convert documentation in the POD format (the preferred language for documenting Perl) into formatted ASCII. It uses no special formatting controls or codes whatsoever, and its output is therefore suitable for nearly any device.</source>
          <target state="translated">Pod::Textは、PODフォーマット(Perlのドキュメント作成に好まれる言語)のドキュメントをフォーマットされたASCIIに変換できるモジュールです。特別なフォーマット制御やコードは一切使用していないので、出力はほとんどのデバイスに適しています。</target>
        </trans-unit>
        <trans-unit id="d7ae0431b95823c9cdaef0a1a00879b188191692" translate="yes" xml:space="preserve">
          <source>Pod::Text is a module that can convert documentation in the POD format (the preferred language for documenting Perl) into formatted text. It uses no special formatting controls or codes whatsoever, and its output is therefore suitable for nearly any device.</source>
          <target state="translated">Pod::Textは、PODフォーマット(Perlのドキュメント作成に好まれる言語)のドキュメントをフォーマットされたテキストに変換するモジュールです。特別な書式制御やコードは一切使用していないので、出力はほぼすべてのデバイスに適しています。</target>
        </trans-unit>
        <trans-unit id="3b000e1532343476a2f005325a7e1d5a7cc21c94" translate="yes" xml:space="preserve">
          <source>Pod::Text::Color</source>
          <target state="translated">Pod::Text::Color</target>
        </trans-unit>
        <trans-unit id="481fceb7f0a093b935ebdf609b3ea4b2ecf12680" translate="yes" xml:space="preserve">
          <source>Pod::Text::Color - Convert POD data to formatted color ASCII text</source>
          <target state="translated">Pod::Text::Color-POD データをフォーマット済みカラー ASCII テキストに変換する</target>
        </trans-unit>
        <trans-unit id="77f334b564bfb0176f5034dad3905349c4003fa8" translate="yes" xml:space="preserve">
          <source>Pod::Text::Color is a simple subclass of Pod::Text that highlights output text using ANSI color escape sequences. Apart from the color, it in all ways functions like Pod::Text. See &lt;a href=&quot;../text&quot;&gt;Pod::Text&lt;/a&gt; for details and available options.</source>
          <target state="translated">Pod :: Text :: Colorは、ANSIカラーエスケープシーケンスを使用して出力テキストを強調表示する、Pod :: Textの単純なサブクラスです。色は別として、Pod :: Textのように機能します。参照&lt;a href=&quot;../text&quot;&gt;ポッド::テキスト&lt;/a&gt;詳細と利用可能なオプションのために。</target>
        </trans-unit>
        <trans-unit id="efbe00bb611152db236e4b619961328e4de0f95f" translate="yes" xml:space="preserve">
          <source>Pod::Text::Color is a simple subclass of Pod::Text that highlights output text using ANSI color escape sequences. Apart from the color, it in all ways functions like Pod::Text. See &lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt; for details and available options.</source>
          <target state="translated">Pod :: Text :: Colorは、ANSIカラーエスケープシーケンスを使用して出力テキストを強調表示するPod :: Textの単純なサブクラスです。色は別として、Pod :: Textのように機能します。参照&lt;a href=&quot;Pod::Text&quot;&gt;ポッド::テキスト&lt;/a&gt;詳細と利用可能なオプションのために。</target>
        </trans-unit>
        <trans-unit id="1bbee340278a2ff3fc6d6d87793be1b3326a3164" translate="yes" xml:space="preserve">
          <source>Pod::Text::Overstrike</source>
          <target state="translated">Pod::Text::Overstrike</target>
        </trans-unit>
        <trans-unit id="6f979e30783784683adf1aac75e360359ed243cf" translate="yes" xml:space="preserve">
          <source>Pod::Text::Overstrike - Convert POD data to formatted overstrike text</source>
          <target state="translated">Pod::Text::Overstrike-POD データをフォーマットされたオーバーストライクテキストに変換する</target>
        </trans-unit>
        <trans-unit id="29be1312d16601e968f895f7174874218cfa222e" translate="yes" xml:space="preserve">
          <source>Pod::Text::Overstrike is a simple subclass of Pod::Text that highlights output text using overstrike sequences, in a manner similar to nroff. Characters in bold text are overstruck (character, backspace, character) and characters in underlined text are converted to overstruck underscores (underscore, backspace, character). This format was originally designed for hard-copy terminals and/or line printers, yet is readable on soft-copy (CRT) terminals.</source>
          <target state="translated">Pod::Text::Overstrikeは、nroffに似た方法でオーバーストライクシーケンスを使って出力テキストをハイライトするPod::Textのシンプルなサブクラスです。太字テキストの文字はオーバーストライク(文字、バックスペース、文字)され、下線付きテキストの文字はオーバーストライクのアンダースコア(アンダースコア、バックスペース、文字)に変換されます。このフォーマットは、もともとハードコピー端末やラインプリンタ用に設計されたものですが、ソフトコピー(CRT)端末でも読めるようになっています。</target>
        </trans-unit>
        <trans-unit id="7195453df8fc7b6eab0965ce075c75610190c6a6" translate="yes" xml:space="preserve">
          <source>Pod::Text::Termcap</source>
          <target state="translated">Pod::Text::Termcap</target>
        </trans-unit>
        <trans-unit id="22f155581256a8a1fab5e33d67ab86301d7bc4cd" translate="yes" xml:space="preserve">
          <source>Pod::Text::Termcap - Convert POD data to ASCII text with format escapes</source>
          <target state="translated">Pod::Text::Termcap-POD データをフォーマットエスケープで ASCII テキストに変換する</target>
        </trans-unit>
        <trans-unit id="4aec2a63ef082d360b91e6eb0afca126e8b2efc0" translate="yes" xml:space="preserve">
          <source>Pod::Text::Termcap is a simple subclass of Pod::Text that highlights output text using the correct termcap escape sequences for the current terminal. Apart from the format codes, it in all ways functions like Pod::Text. See &lt;a href=&quot;../text&quot;&gt;Pod::Text&lt;/a&gt; for details and available options.</source>
          <target state="translated">Pod :: Text :: Termcapは、Pod :: Textの単純なサブクラスであり、現在のターミナルの正しいtermcapエスケープシーケンスを使用して出力テキストを強調表示します。フォーマットコードは別として、Pod :: Textのように機能します。参照&lt;a href=&quot;../text&quot;&gt;ポッド::テキスト&lt;/a&gt;詳細と利用可能なオプションのために。</target>
        </trans-unit>
        <trans-unit id="d2858aa68e07f4dd145d3fcb814f559d00a90436" translate="yes" xml:space="preserve">
          <source>Pod::Text::Termcap is a simple subclass of Pod::Text that highlights output text using the correct termcap escape sequences for the current terminal. Apart from the format codes, it in all ways functions like Pod::Text. See &lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt; for details and available options.</source>
          <target state="translated">Pod :: Text :: Termcapは、Pod :: Textの単純なサブクラスであり、現在の端末の正しいtermcapエスケープシーケンスを使用して出力テキストを強調表示します。フォーマットコードは別として、それはあらゆる点でPod :: Textのように機能します。参照&lt;a href=&quot;Pod::Text&quot;&gt;ポッド::テキスト&lt;/a&gt;詳細と利用可能なオプションのために。</target>
        </trans-unit>
        <trans-unit id="01ead75c44533a688798cad50ab41fa8f303554d" translate="yes" xml:space="preserve">
          <source>Pod::Usage</source>
          <target state="translated">Pod::Usage</target>
        </trans-unit>
        <trans-unit id="b4dc8d5361b7e455072cf29ee34ca11a59abca9a" translate="yes" xml:space="preserve">
          <source>Pod::Usage - print a usage message from embedded pod documentation</source>
          <target state="translated">Pod::Usage-埋め込まれたポッドのドキュメントから使用法メッセージを表示する</target>
        </trans-unit>
        <trans-unit id="ce218f4b64ca779219ccdd981ed413ca8b202fdc" translate="yes" xml:space="preserve">
          <source>Pod::Usage uses &lt;a href=&quot;Pod::Simple&quot;&gt;Pod::Simple&lt;/a&gt;'s _handle_element_end() method to implement the section selection, and in case of verbosity &amp;lt; 2 it down-cases the all-caps headings to first capital letter and rest lowercase, and adds a colon/newline at the end of the headings, for better readability. Same for verbosity = 99.</source>
          <target state="translated">Pod :: Usageは&lt;a href=&quot;Pod::Simple&quot;&gt;Pod :: Simple&lt;/a&gt;の_handle_element_end（）メソッドを使用してセクション選択を実装し、冗長性が2未満の場合は、すべて大文字の見出しを最初の大文字と小文字に小文字にし、コロンを追加します/読みやすくするために、見出しの最後に改行を入れます。冗長性= 99についても同じです。</target>
        </trans-unit>
        <trans-unit id="7ad7eae188bc449da645418942520b12991444b2" translate="yes" xml:space="preserve">
          <source>Pointer to a structure encapsulating the state of the parsing operation currently in progress. The pointer can be locally changed to perform a nested parse without interfering with the state of an outer parse. Individual members of &lt;code&gt;PL_parser&lt;/code&gt; have their own documentation.</source>
          <target state="translated">現在進行中の解析操作の状態をカプセル化する構造へのポインター。ポインターをローカルに変更して、外部解析の状態を妨げることなく、ネストされた解析を実行できます。 &lt;code&gt;PL_parser&lt;/code&gt; の個々のメンバーには、独自のドキュメントがあります。</target>
        </trans-unit>
        <trans-unit id="569cfd3e6d40d0f45b19803b2cef265e9a1d1cb3" translate="yes" xml:space="preserve">
          <source>Pointer to the character following the physical end of the string (i.e. the &lt;code&gt;\0&lt;/code&gt; , if any).</source>
          <target state="translated">文字列の物理的な末尾に続く文字へのポインタ（つまり、存在する場合は &lt;code&gt;\0&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f26443a6f326aa8e35a57bd9708b38b493031f37" translate="yes" xml:space="preserve">
          <source>Pointer to the character following the physical end of the string (i.e. the &lt;code&gt;\0&lt;/code&gt;, if any).</source>
          <target state="translated">文字列の物理的な終わりに続く文字へのポインタ（つまり、 &lt;code&gt;\0&lt;/code&gt; がある場合）。</target>
        </trans-unit>
        <trans-unit id="c7efb8f2f5c41fc448cd25b9357a4b637d7c3c35" translate="yes" xml:space="preserve">
          <source>Pointer to the linearisation function, described below.</source>
          <target state="translated">後述する線形化関数へのポインタ.</target>
        </trans-unit>
        <trans-unit id="93e37c8eb5980406ef58242eae9fe75acd07201b" translate="yes" xml:space="preserve">
          <source>Pointer to the per-subroutine peephole optimiser. This is a function that gets called at the end of compilation of a Perl subroutine (or equivalently independent piece of Perl code) to perform fixups of some ops and to perform small-scale optimisations. The function is called once for each subroutine that is compiled, and is passed, as sole parameter, a pointer to the op that is the entry point to the subroutine. It modifies the op tree in place.</source>
          <target state="translated">サブルーチン単位の覗き穴オプティマイザへのポインタです。これはPerlのサブルーチン(または同等のPerlコードの独立した部分)のコンパイルの最後に呼ばれる関数で、いくつかのopの修正と小規模な最適化を実行します。この関数はコンパイルされた各サブルーチンに対して一度だけ呼び出され、唯一のパラメータとして、サブルーチンのエントリポイントであるopへのポインタが渡されます。この関数はその場でopツリーを変更します。</target>
        </trans-unit>
        <trans-unit id="d2e62507cb5b989fbd3aba1b8f6ac801e56c7fb1" translate="yes" xml:space="preserve">
          <source>Pointer to the physical start of the string.</source>
          <target state="translated">文字列の物理的な開始点へのポインタ。</target>
        </trans-unit>
        <trans-unit id="24a8aad8d082073a41e895d4c5a7e7f9947568de" translate="yes" xml:space="preserve">
          <source>Pointer to the position in the string where matching should start; it might not be equal to &lt;code&gt;strbeg&lt;/code&gt; (for example in a later iteration of &lt;code&gt;/.../g&lt;/code&gt; ).</source>
          <target state="translated">マッチングを開始する文字列内の位置へのポインター。 &lt;code&gt;strbeg&lt;/code&gt; と同じではない可能性があります（たとえば、/ &lt;code&gt;/.../g&lt;/code&gt; / gの後の反復で）。</target>
        </trans-unit>
        <trans-unit id="fc9305ad14128dd61fc34d5fec4f93e8c59716ad" translate="yes" xml:space="preserve">
          <source>Pointer to the position in the string where matching should start; it might not be equal to &lt;code&gt;strbeg&lt;/code&gt; (for example in a later iteration of &lt;code&gt;/.../g&lt;/code&gt;).</source>
          <target state="translated">マッチングを開始する文字列内の位置へのポインタ。 &lt;code&gt;strbeg&lt;/code&gt; と等しくない場合があります（たとえば、/ &lt;code&gt;/.../g&lt;/code&gt; / gの後の反復で）。</target>
        </trans-unit>
        <trans-unit id="5f83ff7c09e64b6014d200a49cf4d57b3fe2a3b7" translate="yes" xml:space="preserve">
          <source>Pointer to the recursive peephole optimiser. This is a function that gets called at the end of compilation of a Perl subroutine (or equivalently independent piece of Perl code) to perform fixups of some ops and to perform small-scale optimisations. The function is called once for each chain of ops linked through their &lt;code&gt;op_next&lt;/code&gt; fields; it is recursively called to handle each side chain. It is passed, as sole parameter, a pointer to the op that is at the head of the chain. It modifies the op tree in place.</source>
          <target state="translated">再帰的なのぞき穴オプティマイザへのポインタ。これは、Perlサブルーチン（または同等の独立したPerlコード）のコンパイルの最後に呼び出されて、一部の操作の修正を実行し、小規模な最適化を実行する関数です。この関数は、 &lt;code&gt;op_next&lt;/code&gt; フィールドでリンクされたopのチェーンごとに1回呼び出されます。各サイドチェーンを処理するために再帰的に呼び出されます。唯一のパラメーターとして、チェーンの先頭にあるopへのポインターが渡されます。それは適所にopツリーを変更します。</target>
        </trans-unit>
        <trans-unit id="1b15de7f05dc81e7a10d8422ae41b092aa35ff88" translate="yes" xml:space="preserve">
          <source>Pointer-To-Integer and Integer-To-Pointer</source>
          <target state="translated">ポインタ対整数および整数対ポインタ</target>
        </trans-unit>
        <trans-unit id="8db4543231fbc881b475cb920918beb06e6957b1" translate="yes" xml:space="preserve">
          <source>Pointers for How to Use Them</source>
          <target state="translated">使い方のポイント</target>
        </trans-unit>
        <trans-unit id="d2230d33a0d37bef7c5428bbaebaf857455229dd" translate="yes" xml:space="preserve">
          <source>Points directly to the body of the &lt;a href=&quot;#PL_comppad&quot;&gt;&quot;PL_comppad&quot;&lt;/a&gt; array. (I.e., this is &lt;code&gt;PadARRAY(PL_comppad)&lt;/code&gt;.)</source>
          <target state="translated">&lt;a href=&quot;#PL_comppad&quot;&gt;「PL_comppad」&lt;/a&gt;配列の本体を直接指します。（ &lt;code&gt;PadARRAY(PL_comppad)&lt;/code&gt; 、これはPadARRAY（PL_comppad）です。）</target>
        </trans-unit>
        <trans-unit id="9d0e53b7caa90905a98f7bada48b61cffae6dfc0" translate="yes" xml:space="preserve">
          <source>Points directly to the body of the &lt;a href=&quot;#PL_comppad&quot;&gt;PL_comppad&lt;/a&gt; array. (I.e., this is &lt;code&gt;PAD_ARRAY(PL_comppad)&lt;/code&gt; .)</source>
          <target state="translated">&lt;a href=&quot;#PL_comppad&quot;&gt;PL_comppad&lt;/a&gt;配列の本体を直接指します。（ &lt;code&gt;PAD_ARRAY(PL_comppad)&lt;/code&gt; 、これはPAD_ARRAY（PL_comppad）です。）</target>
        </trans-unit>
        <trans-unit id="cd50ccbc12c1ecc8379096a1e5a3ea405480427c" translate="yes" xml:space="preserve">
          <source>Points to note this time are</source>
          <target state="translated">今回の注意点は</target>
        </trans-unit>
        <trans-unit id="a1ba2b16bcbd7c4705abb0e0545c7340c416117e" translate="yes" xml:space="preserve">
          <source>Points to note this time:</source>
          <target state="translated">今回の注意点</target>
        </trans-unit>
        <trans-unit id="7f6158e808f6832883a61fff6f7473e7ffa8d937" translate="yes" xml:space="preserve">
          <source>Points to note:</source>
          <target state="translated">注意すべき点</target>
        </trans-unit>
        <trans-unit id="1bbd752ae8b2d8dd16a7b7697a38f3cb2e507749" translate="yes" xml:space="preserve">
          <source>Points to the current position of lexing inside the lexer buffer. Characters around this point may be freely examined, within the range delimited by &lt;code&gt;SvPVX(&lt;a href=&quot;#PL_parser-%3Elinestr&quot;&gt;&quot;PL_parser-&amp;gt;linestr&quot;&lt;/a&gt;)&lt;/code&gt; and &lt;a href=&quot;#PL_parser-%3Ebufend&quot;&gt;&quot;PL_parser-&amp;gt;bufend&quot;&lt;/a&gt;. The octets of the buffer may be intended to be interpreted as either UTF-8 or Latin-1, as indicated by &lt;a href=&quot;#lex_bufutf8&quot;&gt;&quot;lex_bufutf8&quot;&lt;/a&gt;.</source>
          <target state="translated">レクサーバッファー内のレクシングの現在の位置を指します。この点の周りの文字は、 &lt;code&gt;SvPVX(&lt;a href=&quot;#PL_parser-%3Elinestr&quot;&gt;&quot;PL_parser-&amp;gt;linestr&quot;&lt;/a&gt;)&lt;/code&gt; および&lt;a href=&quot;#PL_parser-%3Ebufend&quot;&gt;&quot;PL_parser-&amp;gt; bufend&quot;で&lt;/a&gt;区切られた範囲内で、自由に調べることができます。バッファのオクテットは、&lt;a href=&quot;#lex_bufutf8&quot;&gt;「lex_bufutf8」で&lt;/a&gt;示されているように、UTF-8またはLatin-1のいずれかとして解釈されることを意図している場合があります。</target>
        </trans-unit>
        <trans-unit id="cd6843c94f87c938da300ec96118788e1ddfc762" translate="yes" xml:space="preserve">
          <source>Points to the current position of lexing inside the lexer buffer. Characters around this point may be freely examined, within the range delimited by &lt;code&gt;SvPVX(&lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt;linestr&lt;/a&gt;)&lt;/code&gt; and &lt;a href=&quot;#PL_parser-%3ebufend&quot;&gt;PL_parser-&amp;gt;bufend&lt;/a&gt;. The octets of the buffer may be intended to be interpreted as either UTF-8 or Latin-1, as indicated by &lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;.</source>
          <target state="translated">レクサーバッファー内の字句解析の現在の位置を指します。このポイント周辺の文字は、 &lt;code&gt;SvPVX(&lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt;linestr&lt;/a&gt;)&lt;/code&gt; および&lt;a href=&quot;#PL_parser-%3ebufend&quot;&gt;PL_parser-&amp;gt; bufendで&lt;/a&gt;区切られた範囲内で自由に検査できます。バッファーのオクテットは、&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8で&lt;/a&gt;示されているように、UTF-8またはLatin-1として解釈されるように意図されている場合があります。</target>
        </trans-unit>
        <trans-unit id="1bb0820f4a550e8794d4bb990433e5c6f6edc648" translate="yes" xml:space="preserve">
          <source>Points to the start of the current line inside the lexer buffer. This is useful for indicating at which column an error occurred, and not much else. This must be updated by any lexing code that consumes a newline; the function &lt;a href=&quot;#lex_read_to&quot;&gt;&quot;lex_read_to&quot;&lt;/a&gt; handles this detail.</source>
          <target state="translated">レクサーバッファー内の現在の行の先頭を指します。これは、エラーが発生した列を示すのに役立ちますが、それ以外はあまり役立ちません。これは、改行を消費する字句解析コードによって更新する必要があります。関数&lt;a href=&quot;#lex_read_to&quot;&gt;「lex_read_to」&lt;/a&gt;がこの詳細を処理します。</target>
        </trans-unit>
        <trans-unit id="466e9eed69ae31dedb4b4028316ec9e7f9681d76" translate="yes" xml:space="preserve">
          <source>Points to the start of the current line inside the lexer buffer. This is useful for indicating at which column an error occurred, and not much else. This must be updated by any lexing code that consumes a newline; the function &lt;a href=&quot;#lex_read_to&quot;&gt;lex_read_to&lt;/a&gt; handles this detail.</source>
          <target state="translated">レクサーバッファー内の現在の行の先頭を指します。これは、エラーが発生した列を示すのに役立ちますが、それ以外の場合はあまり役立ちません。これは、改行を消費するすべての字句解析コードによって更新する必要があります。関数&lt;a href=&quot;#lex_read_to&quot;&gt;lex_read_to&lt;/a&gt;がこの詳細を処理します。</target>
        </trans-unit>
        <trans-unit id="6de0b0c656444c55bac48c2e467aa0f841083cdc" translate="yes" xml:space="preserve">
          <source>Poison</source>
          <target state="translated">Poison</target>
        </trans-unit>
        <trans-unit id="60326c7bc618b42717ee02bd88c572c7975b5c05" translate="yes" xml:space="preserve">
          <source>PoisonFree</source>
          <target state="translated">PoisonFree</target>
        </trans-unit>
        <trans-unit id="213cead1d3c3d191853846b8f588306499713f3d" translate="yes" xml:space="preserve">
          <source>PoisonNew</source>
          <target state="translated">PoisonNew</target>
        </trans-unit>
        <trans-unit id="921ff8ca38465c5b1707bafca4e8d140614024bb" translate="yes" xml:space="preserve">
          <source>PoisonWith</source>
          <target state="translated">PoisonWith</target>
        </trans-unit>
        <trans-unit id="7cba271b13a59766b27ccda79d87f5f8e1106365" translate="yes" xml:space="preserve">
          <source>PoisonWith(0xAB) for catching access to allocated but uninitialized memory.</source>
          <target state="translated">割り当てられたが初期化されていないメモリへのアクセスをキャッチするための PoisonWith(0xAB)。</target>
        </trans-unit>
        <trans-unit id="a5b29691b9f8fe361aff7b2c944f86e8960b1c90" translate="yes" xml:space="preserve">
          <source>PoisonWith(0xEF) for catching access to freed memory.</source>
          <target state="translated">解放されたメモリへのアクセスをキャッチするための PoisonWith(0xEF)。</target>
        </trans-unit>
        <trans-unit id="50978bfdc443a56d15758e582ae96263dec24405" translate="yes" xml:space="preserve">
          <source>Poking around in the existing &lt;a href=&quot;Date::ICal&quot;&gt;Date::ICal&lt;/a&gt; tests, I found this in</source>
          <target state="translated">既存の&lt;a href=&quot;Date::ICal&quot;&gt;Date :: ICal&lt;/a&gt;テストをざっと見て、これを見つけました</target>
        </trans-unit>
        <trans-unit id="a5f252f9719bb4092eedbac8a2fb53fbb1039f3c" translate="yes" xml:space="preserve">
          <source>Poking at Perl</source>
          <target state="translated">Perlを突く</target>
        </trans-unit>
        <trans-unit id="5ff03b7273b1808e5ba852e230991bbf07da703c" translate="yes" xml:space="preserve">
          <source>Poland</source>
          <target state="translated">Poland</target>
        </trans-unit>
        <trans-unit id="1ebd3f7855634092b44032651f78d5bfb891f918" translate="yes" xml:space="preserve">
          <source>Policy on building prerequisites (follow, ask or ignore)?</source>
          <target state="translated">建物の前提条件に関する方針(従うか、尋ねるか、無視するか)?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
