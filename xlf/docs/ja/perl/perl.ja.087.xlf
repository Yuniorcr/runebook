<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="1c280185515b0623d680b380470d88032ff0459b" translate="yes" xml:space="preserve">
          <source>uidl ( [ MSGNUM ] )</source>
          <target state="translated">uidl([MSGNUM])</target>
        </trans-unit>
        <trans-unit id="4f266624b4cab00c3fa39590bc3e4d402c6054f9" translate="yes" xml:space="preserve">
          <source>uidsign.U</source>
          <target state="translated">uidsign.U</target>
        </trans-unit>
        <trans-unit id="49d287411193cd0643e68cecc7793271c3750fe3" translate="yes" xml:space="preserve">
          <source>uidsize.U</source>
          <target state="translated">uidsize.U</target>
        </trans-unit>
        <trans-unit id="ef4e5b306b52e07f68c82e7e4824b1b0139a919a" translate="yes" xml:space="preserve">
          <source>uidtype.U</source>
          <target state="translated">uidtype.U</target>
        </trans-unit>
        <trans-unit id="1e7a9669ea1ec15d267b3f8a833c3c6b92db5b36" translate="yes" xml:space="preserve">
          <source>uiv_2buf</source>
          <target state="translated">uiv_2buf</target>
        </trans-unit>
        <trans-unit id="7e3b66f9c4f175dd93b125d08b9fe1b4cd25111e" translate="yes" xml:space="preserve">
          <source>ulk</source>
          <target state="translated">ulk</target>
        </trans-unit>
        <trans-unit id="4b824f445e8d64ec6f262547c18a3ab02a6fd22c" translate="yes" xml:space="preserve">
          <source>umask</source>
          <target state="translated">umask</target>
        </trans-unit>
        <trans-unit id="36e21e5c3a8f3b270b5c9c2576b01408eed47929" translate="yes" xml:space="preserve">
          <source>umask EXPR</source>
          <target state="translated">umask expr</target>
        </trans-unit>
        <trans-unit id="b1471162adccbbb07cc4046eac056eb60fb7d981" translate="yes" xml:space="preserve">
          <source>umask not implemented</source>
          <target state="translated">umask未実装</target>
        </trans-unit>
        <trans-unit id="eb6198103dad02d1c9dcb61d16d9ffbac78237d4" translate="yes" xml:space="preserve">
          <source>umask() works, but the correct permissions are only set when the file is finally close()d</source>
          <target state="translated">umask()は動作しますが、正しいパーミッションが設定されるのはファイルが最終的に close()d されたときだけです。</target>
        </trans-unit>
        <trans-unit id="768906d218848d10146e9421d32c8c0734f53ea5" translate="yes" xml:space="preserve">
          <source>unable to map [group] to a gid, group ownership not changed</source>
          <target state="translated">グループ]を gid にマップできない、グループの所有権が変更されない</target>
        </trans-unit>
        <trans-unit id="edd5434a9f5a002f18dac42d43c70f5152caf438" translate="yes" xml:space="preserve">
          <source>unable to map [owner] to a uid, ownership not changed&quot;);</source>
          <target state="translated">unable to [owner]to a uid,owner not changed&quot;)。</target>
        </trans-unit>
        <trans-unit id="7de840c4a5d7a3a264136f73eb4f2de7198cc159" translate="yes" xml:space="preserve">
          <source>unable to run</source>
          <target state="translated">走れない</target>
        </trans-unit>
        <trans-unit id="b5bf93e700d8bd890e9a145f2c66392881d1d701" translate="yes" xml:space="preserve">
          <source>uname</source>
          <target state="translated">uname</target>
        </trans-unit>
        <trans-unit id="446503d23ca142503a5fad0280d5b83e0d676140" translate="yes" xml:space="preserve">
          <source>unary &amp;amp;</source>
          <target state="translated">単項＆</target>
        </trans-unit>
        <trans-unit id="e11a4d6675eceaa50fcbd393de78705d6e6d2add" translate="yes" xml:space="preserve">
          <source>unary *</source>
          <target state="translated">単項</target>
        </trans-unit>
        <trans-unit id="223780cbeb2aa88fe6fa0300efa71bee0616f297" translate="yes" xml:space="preserve">
          <source>unary operator</source>
          <target state="translated">単項演算子</target>
        </trans-unit>
        <trans-unit id="5c9d9a1ee71ab26f80b55634148ddbec55d054c0" translate="yes" xml:space="preserve">
          <source>uncolor() performs the opposite translation as color(), turning escape sequences into a list of strings corresponding to the attributes being set by those sequences.</source>
          <target state="translated">uncolor()は、color()とは逆の変換を行い、 エスケープシーケンスを、それらのシーケンスで設定されている属性に対応する文字列のリストに変換します。</target>
        </trans-unit>
        <trans-unit id="e951895d12a6d386d4d17c7f6bdd0e569b078621" translate="yes" xml:space="preserve">
          <source>uncolor() performs the opposite translation as color(), turning escape sequences into a list of strings corresponding to the attributes being set by those sequences. uncolor() will never return &lt;code&gt;ansi16&lt;/code&gt; through &lt;code&gt;ansi255&lt;/code&gt;, instead preferring the &lt;code&gt;grey&lt;/code&gt; and &lt;code&gt;rgb&lt;/code&gt; names (and likewise for &lt;code&gt;on_ansi16&lt;/code&gt; through &lt;code&gt;on_ansi255&lt;/code&gt;).</source>
          <target state="translated">uncolor（）は、color（）とは逆の変換を実行し、エスケープシーケンスを、それらのシーケンスによって設定されている属性に対応する文字列のリストに変換します。 uncolor（）は、 &lt;code&gt;ansi16&lt;/code&gt; から &lt;code&gt;ansi255&lt;/code&gt; を返すことはなく、代わりに &lt;code&gt;grey&lt;/code&gt; と &lt;code&gt;rgb&lt;/code&gt; の名前を優先します（同様に &lt;code&gt;on_ansi16&lt;/code&gt; から &lt;code&gt;on_ansi255&lt;/code&gt; の場合）。</target>
        </trans-unit>
        <trans-unit id="8db58e771ba16097a9e70dd6d29f120c52db3b67" translate="yes" xml:space="preserve">
          <source>uncolor(ESCAPE)</source>
          <target state="translated">uncolor(ESCAPE)</target>
        </trans-unit>
        <trans-unit id="4445a4f01a1ca8d002d7d995f0253b4f1abd9dc6" translate="yes" xml:space="preserve">
          <source>unctrl</source>
          <target state="translated">unctrl</target>
        </trans-unit>
        <trans-unit id="894a40dce8e5591059922ff5808e4c093326c141" translate="yes" xml:space="preserve">
          <source>undef</source>
          <target state="translated">undef</target>
        </trans-unit>
        <trans-unit id="98feb57f02fa68186d8b891aea735323789452c7" translate="yes" xml:space="preserve">
          <source>undef EXPR</source>
          <target state="translated">アンデフエックスピーアール</target>
        </trans-unit>
        <trans-unit id="7414d1ab529bc86f7fbab5fae94abda24dcf86b4" translate="yes" xml:space="preserve">
          <source>undefChar</source>
          <target state="translated">undefChar</target>
        </trans-unit>
        <trans-unit id="3ddd5f42f688d3e124523295fd31c4fbe76d8214" translate="yes" xml:space="preserve">
          <source>undefName</source>
          <target state="translated">undefName</target>
        </trans-unit>
        <trans-unit id="2e6e324398420050bcebe65786c1ee784c78a29b" translate="yes" xml:space="preserve">
          <source>undefined symbols when it loads a dynamic library. The default behaviour is to resolve symbols when they are used. Setting this variable is useful during testing of extensions, as it ensures that you get an error on misspelled function names even if the test suite doesn't call them.</source>
          <target state="translated">動的ライブラリをロードするときに未定義のシンボルを解決します。デフォルトの動作は、シンボルが使用されたときに解決することです。この変数を設定すると、拡張機能のテスト中に便利です。</target>
        </trans-unit>
        <trans-unit id="b514a784ac2399d445614c88fc7a8533a4e033a5" translate="yes" xml:space="preserve">
          <source>under Unix), which can set important options. (A subroutine (&lt;code&gt;&amp;amp;afterinit&lt;/code&gt; ) can be defined here as well; it is executed after the debugger completes its own initialization.)</source>
          <target state="translated">Unixでは）、重要なオプションを設定できます。（ここでもサブルーチン（ &lt;code&gt;&amp;amp;afterinit&lt;/code&gt; ）を定義できます。デバッガーが独自の初期化を完了した後に実行されます。）</target>
        </trans-unit>
        <trans-unit id="0e908427b1e0eddac81b2ec1cedcf9305ae5fe34" translate="yes" xml:space="preserve">
          <source>under Unix), which can set important options. (A subroutine (&lt;code&gt;&amp;amp;afterinit&lt;/code&gt;) can be defined here as well; it is executed after the debugger completes its own initialization.)</source>
          <target state="translated">Unixの下で）、重要なオプションを設定できます。（サブルーチン（ &lt;code&gt;&amp;amp;afterinit&lt;/code&gt; ）もここで定義できます。デバッガーが独自の初期化を完了した後に実行されます。）</target>
        </trans-unit>
        <trans-unit id="9dafb5899098e6cb8288d8485a2851027cdacf0a" translate="yes" xml:space="preserve">
          <source>under Unixy systems.] but here we've specified the port number (13) in parentheses. Using just the number would have also worked, but numeric literals make careful programmers nervous.</source>
          <target state="translated">Unixy システム下では]ですが、ここではカッコの中にポート番号 (13)を指定しています。番号だけを使うこともできますが、数値リテラルは慎重なプログラマーを神経質にさせます。</target>
        </trans-unit>
        <trans-unit id="4fd1ca9b1cc4b71ec35a6a6dcfdad1203f30fb09" translate="yes" xml:space="preserve">
          <source>under control of the &lt;code&gt;$^F&lt;/code&gt; variable. This is so any filehandles you didn't explicitly route to the STDIN, STDOUT or STDERR of a child</source>
          <target state="translated">&lt;code&gt;$^F&lt;/code&gt; 変数の制御下にあります。これは、子のSTDIN、STDOUT、またはSTDERRに明示的にルーティングしなかったファイルハンドルです。</target>
        </trans-unit>
        <trans-unit id="7881ed7a3c041a4c372935ce39c3487feea2f64f" translate="yes" xml:space="preserve">
          <source>under the name &lt;code&gt;MY::top_targets&lt;/code&gt; ;</source>
          <target state="translated">&lt;code&gt;MY::top_targets&lt;/code&gt; という名前で;</target>
        </trans-unit>
        <trans-unit id="9328bb3e44b86b8ed0418ed8c74e2b21908b1a35" translate="yes" xml:space="preserve">
          <source>under the name &lt;code&gt;MY::top_targets&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;MY::top_targets&lt;/code&gt; という名前で;</target>
        </trans-unit>
        <trans-unit id="9f01b49453b711076f00ff8b4dd47a7886a96fc1" translate="yes" xml:space="preserve">
          <source>under the specified locations are automatically included if they exist, with this lookup done at interpreter startup time. In addition, any directories matching the entries in &lt;code&gt;$Config{inc_version_list}&lt;/code&gt; are added. (These typically would be for older compatible perl versions installed in the same directory tree.)</source>
          <target state="translated">指定された場所の下には、存在する場合は自動的に含まれ、この検索はインタープリターの起動時に行われます。さらに、 &lt;code&gt;$Config{inc_version_list}&lt;/code&gt; エントリに一致するディレクトリが追加されます。（これらは通常、同じディレクトリツリーにインストールされている古い互換性のあるperlバージョン用です。）</target>
        </trans-unit>
        <trans-unit id="c82b67c88e6911c321806d35b9d8f040d8726133" translate="yes" xml:space="preserve">
          <source>underline</source>
          <target state="translated">underline</target>
        </trans-unit>
        <trans-unit id="5f20d1da022fbc92bca7260a4274b9728956fa2b" translate="yes" xml:space="preserve">
          <source>underneath the parent directory.</source>
          <target state="translated">親ディレクトリの下にある</target>
        </trans-unit>
        <trans-unit id="9af103245dacc4f3c99cc847fbeb84cf15b0ae90" translate="yes" xml:space="preserve">
          <source>underscores separating digits in numbers</source>
          <target state="translated">区切り記号</target>
        </trans-unit>
        <trans-unit id="7455d50fd345c0e29f3dcf49611be6ce0df37457" translate="yes" xml:space="preserve">
          <source>understands the following options:</source>
          <target state="translated">は以下のオプションを理解しています。</target>
        </trans-unit>
        <trans-unit id="7e3f3d64053f5e4159b5dafdba3166075e9e2eae" translate="yes" xml:space="preserve">
          <source>undocumented, used internally by the &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt; feature</source>
          <target state="translated">文書化されていない、&lt;a href=&quot;overload&quot;&gt;オーバーロード&lt;/a&gt;機能によって内部的に使用される</target>
        </trans-unit>
        <trans-unit id="5ddb3081295d2039a2ce92ed30ca850d53c716e6" translate="yes" xml:space="preserve">
          <source>undone during backtracking, and we get</source>
          <target state="translated">バックトラック中に元に戻されてしまうと</target>
        </trans-unit>
        <trans-unit id="3f9c012699681359b2d4c5c0da4c0c319f7b4851" translate="yes" xml:space="preserve">
          <source>undump</source>
          <target state="translated">undump</target>
        </trans-unit>
        <trans-unit id="7d8329250a4011a5a4f0a9f93c2700d6d867dcbe" translate="yes" xml:space="preserve">
          <source>unexec of %s into %s failed!</source>
          <target state="translated">%s への %s の未実行は失敗しました。</target>
        </trans-unit>
        <trans-unit id="bfe50587164ae65a0d736c4251f94382f0fb9f13" translate="yes" xml:space="preserve">
          <source>unexpand</source>
          <target state="translated">unexpand</target>
        </trans-unit>
        <trans-unit id="8b77486db5e737dfba2f215ad3f09d26e7574ce4" translate="yes" xml:space="preserve">
          <source>ungetc</source>
          <target state="translated">ungetc</target>
        </trans-unit>
        <trans-unit id="57e123228495371596dd545a2ab7f01edd61e120" translate="yes" xml:space="preserve">
          <source>ungetline ( TEXT )</source>
          <target state="translated">ungetline(テキスト )</target>
        </trans-unit>
        <trans-unit id="611ef7f3e74e93a2d99c8502e80be88ed14c4b7a" translate="yes" xml:space="preserve">
          <source>unicaps</source>
          <target state="translated">unicaps</target>
        </trans-unit>
        <trans-unit id="d0621ea6db045280a171ba1bfb3a6dfa337b7d85" translate="yes" xml:space="preserve">
          <source>unichars</source>
          <target state="translated">unichars</target>
        </trans-unit>
        <trans-unit id="8236ccc893aa3b688923006cde5ef7c867e1200f" translate="yes" xml:space="preserve">
          <source>unicore/</source>
          <target state="translated">unicore/</target>
        </trans-unit>
        <trans-unit id="34819feb4a120661fd90c7edb70e9578267e83cd" translate="yes" xml:space="preserve">
          <source>unicore/README.perl</source>
          <target state="translated">unicore/README.perl</target>
        </trans-unit>
        <trans-unit id="9cef115904c9a43eab6bd725f98fb0e895022817" translate="yes" xml:space="preserve">
          <source>unicore/mktables</source>
          <target state="translated">unicore/mktables</target>
        </trans-unit>
        <trans-unit id="695753c5963950095c0928d372a2deb661f1bf28" translate="yes" xml:space="preserve">
          <source>unifmt</source>
          <target state="translated">unifmt</target>
        </trans-unit>
        <trans-unit id="c2b5c55f0827d9c553bdc5a4de94a5d8d20f474b" translate="yes" xml:space="preserve">
          <source>unilook</source>
          <target state="translated">unilook</target>
        </trans-unit>
        <trans-unit id="b1217427083e0f38e61077d9500c698e2f3ef93b" translate="yes" xml:space="preserve">
          <source>unimplemented in this platform</source>
          <target state="translated">未実装</target>
        </trans-unit>
        <trans-unit id="2e954cc0c45457c88e7789778a3d7213d804d016" translate="yes" xml:space="preserve">
          <source>unimport()</source>
          <target state="translated">unimport()</target>
        </trans-unit>
        <trans-unit id="c9f59799203ace15feeda610ffd283211d4c8395" translate="yes" xml:space="preserve">
          <source>uninames</source>
          <target state="translated">uninames</target>
        </trans-unit>
        <trans-unit id="e375ed02e8215d5defda8610a10331083ab72346" translate="yes" xml:space="preserve">
          <source>uninarrow</source>
          <target state="translated">uninarrow</target>
        </trans-unit>
        <trans-unit id="328bff70ae4c6a47b6b25e9441f490474af8e448" translate="yes" xml:space="preserve">
          <source>uniprops</source>
          <target state="translated">uniprops</target>
        </trans-unit>
        <trans-unit id="42c53cdf8dcda07ef06c4014d43c03ab4ba1798b" translate="yes" xml:space="preserve">
          <source>uniq</source>
          <target state="translated">uniq</target>
        </trans-unit>
        <trans-unit id="688475de7bbf55ad773324d97aaf1f0f32fa8363" translate="yes" xml:space="preserve">
          <source>uniq_map</source>
          <target state="translated">uniq_map</target>
        </trans-unit>
        <trans-unit id="4c4a076d49de72eb22cd6aaae2298e7d4ad2f701" translate="yes" xml:space="preserve">
          <source>uniqint</source>
          <target state="translated">uniqint</target>
        </trans-unit>
        <trans-unit id="b24d8d9b5cbd1ccd5b20756f757761d5228f43bd" translate="yes" xml:space="preserve">
          <source>uniqnum</source>
          <target state="translated">uniqnum</target>
        </trans-unit>
        <trans-unit id="28f1a76d46f644fa5a1e218d64c3a50ad9fa0245" translate="yes" xml:space="preserve">
          <source>uniqnum() on oversized bignums</source>
          <target state="translated">特大サイズのビグナムでの uniqnum()</target>
        </trans-unit>
        <trans-unit id="fc7869d494a1e698fa76c4588027e4909f3358bb" translate="yes" xml:space="preserve">
          <source>uniqstr</source>
          <target state="translated">uniqstr</target>
        </trans-unit>
        <trans-unit id="d0055c6ae0267a382ac2e1bad930f39429529fe8" translate="yes" xml:space="preserve">
          <source>unique_name ()</source>
          <target state="translated">一意名</target>
        </trans-unit>
        <trans-unit id="247380163f42421ae2d703eb8679cd83b34870e9" translate="yes" xml:space="preserve">
          <source>uniquote</source>
          <target state="translated">uniquote</target>
        </trans-unit>
        <trans-unit id="4c65113b300dbe7d18a1abac20294d929a7ffe75" translate="yes" xml:space="preserve">
          <source>unisubs</source>
          <target state="translated">unisubs</target>
        </trans-unit>
        <trans-unit id="81fb19e7a4af499b20a01cf4f84c2eb70605d5c9" translate="yes" xml:space="preserve">
          <source>unisupers</source>
          <target state="translated">unisupers</target>
        </trans-unit>
        <trans-unit id="c963c79ebbc894a1f0fa607d195e400ac457f80a" translate="yes" xml:space="preserve">
          <source>unitcheck_av</source>
          <target state="translated">unitcheck_av</target>
        </trans-unit>
        <trans-unit id="4a58aa07cd9c7fe995d8e039ce466daabed183ad" translate="yes" xml:space="preserve">
          <source>unititle</source>
          <target state="translated">unititle</target>
        </trans-unit>
        <trans-unit id="4869ecdc8289baa1bc191dbc361750e4e3bdf4ad" translate="yes" xml:space="preserve">
          <source>uniwc</source>
          <target state="translated">uniwc</target>
        </trans-unit>
        <trans-unit id="2a82b2c6779fce7a27aa805912edf1a4e6a2a894" translate="yes" xml:space="preserve">
          <source>uniwide</source>
          <target state="translated">uniwide</target>
        </trans-unit>
        <trans-unit id="bc2bc8105ced5b8215de72b6021554276bd23583" translate="yes" xml:space="preserve">
          <source>unixify</source>
          <target state="translated">unixify</target>
        </trans-unit>
        <trans-unit id="76b5bd522bdaa5e3755be98d8318c306c547b80c" translate="yes" xml:space="preserve">
          <source>unixpath</source>
          <target state="translated">unixpath</target>
        </trans-unit>
        <trans-unit id="b66add90cb0777ed5392bc3b4e1e6b56a2d86142" translate="yes" xml:space="preserve">
          <source>unixrealpath</source>
          <target state="translated">unixrealpath</target>
        </trans-unit>
        <trans-unit id="dc9206a6415e9837c874d5d503ed24b6c771aaa0" translate="yes" xml:space="preserve">
          <source>unknown methods</source>
          <target state="translated">秘法</target>
        </trans-unit>
        <trans-unit id="42e184930956d048c819e40f18f94f0094d47bc6" translate="yes" xml:space="preserve">
          <source>unless</source>
          <target state="translated">unless</target>
        </trans-unit>
        <trans-unit id="15358cd04268c58ca1fc4bee824af0b4d7a6f722" translate="yes" xml:space="preserve">
          <source>unless its already there.</source>
          <target state="translated">すでにそこにあるのでなければ</target>
        </trans-unit>
        <trans-unit id="17ad721591ccd7748e1c7959af21fb641d063512" translate="yes" xml:space="preserve">
          <source>unless needed (metachars found).</source>
          <target state="translated">必要とされない限り(メタカーズが見つかりました)。</target>
        </trans-unit>
        <trans-unit id="d8416865eb0efe0f795590dee12d7f0bc0f6bdd0" translate="yes" xml:space="preserve">
          <source>unless stated otherwise.</source>
          <target state="translated">特に明記されていない限り</target>
        </trans-unit>
        <trans-unit id="778e8726acf23c71a85b892bf787372cd24a1b81" translate="yes" xml:space="preserve">
          <source>unlike($got, $regex, $name)</source>
          <target state="translated">unlike($got,$regex,$name)</target>
        </trans-unit>
        <trans-unit id="d55e2f1543d6b58851fc49ec657b147c15bce11b" translate="yes" xml:space="preserve">
          <source>unlike($got, $regex, $name, @diag)</source>
          <target state="translated">unlike($got,$regex,$name,@diag)</target>
        </trans-unit>
        <trans-unit id="7b91025887687e8951f32135d89cf33a54553e45" translate="yes" xml:space="preserve">
          <source>unlink</source>
          <target state="translated">unlink</target>
        </trans-unit>
        <trans-unit id="2f7ab4d1414a38eaf72b218d2bc6396a10c7c03b" translate="yes" xml:space="preserve">
          <source>unlink LIST</source>
          <target state="translated">アンリンクリスト</target>
        </trans-unit>
        <trans-unit id="2737b7545bd7b175365f0ee4b7afa2e1181e0653" translate="yes" xml:space="preserve">
          <source>unlnk</source>
          <target state="translated">unlnk</target>
        </trans-unit>
        <trans-unit id="ca9428c77b6e9175521ac643429f5441f83e1362" translate="yes" xml:space="preserve">
          <source>unlock_hash() does the opposite of lock_hash(). All keys and values are made writable. All values can be changed and keys can be added and deleted.</source>
          <target state="translated">unlock_hash()は lock_hash()の逆のことを行います。すべてのキーと値が書き込み可能になります。すべての値を変更したり、キーを追加したり削除したりすることができます。</target>
        </trans-unit>
        <trans-unit id="05e5c85735ed74105bc5422998ce82f311785a5b" translate="yes" xml:space="preserve">
          <source>unlock_hash_recurse() does the opposite of lock_hash_recurse(). All keys and values are made writable. All values can be changed and keys can be added and deleted. Identical recursion restrictions apply as to lock_hash_recurse().</source>
          <target state="translated">unlock_hash_recurse()は lock_hash_recurse()の逆のことを行います。すべてのキーと値が書き込み可能になります。すべての値を変更したり、鍵を追加したり削除したりすることができます。lock_hash_recurse()と同様の再帰制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="8e6fea04a2324b2bdf16d22c0b24e1599050807a" translate="yes" xml:space="preserve">
          <source>unlock_hashref</source>
          <target state="translated">unlock_hashref</target>
        </trans-unit>
        <trans-unit id="0f1468e82576313abf43b248cdf5b6cfc7280365" translate="yes" xml:space="preserve">
          <source>unlock_hashref_recurse</source>
          <target state="translated">unlock_hashref_recurse</target>
        </trans-unit>
        <trans-unit id="12c71ea32d5c373cf996228a9178f241f0008404" translate="yes" xml:space="preserve">
          <source>unlock_ref_keys</source>
          <target state="translated">unlock_ref_keys</target>
        </trans-unit>
        <trans-unit id="96215327cf41b3c48e87f5e8dc81cee8f88bf9da" translate="yes" xml:space="preserve">
          <source>unlock_ref_value</source>
          <target state="translated">unlock_ref_value</target>
        </trans-unit>
        <trans-unit id="15e49863432c89071dddfddf04017fe4b06da4a4" translate="yes" xml:space="preserve">
          <source>unmemoize</source>
          <target state="translated">unmemoize</target>
        </trans-unit>
        <trans-unit id="9a106745b32b1bc24d96df74906aa49ca0a5bab7" translate="yes" xml:space="preserve">
          <source>unpack</source>
          <target state="translated">unpack</target>
        </trans-unit>
        <trans-unit id="ad26ce7bca64b2cdad8c6ebcce728e4fe4dc8d68" translate="yes" xml:space="preserve">
          <source>unpack TEMPLATE</source>
          <target state="translated">アンパックテンプレート</target>
        </trans-unit>
        <trans-unit id="d51158b8ba32894fc3f16c818771c4ff1c948b25" translate="yes" xml:space="preserve">
          <source>unpack TEMPLATE,EXPR</source>
          <target state="translated">アンパック TEMPLATE,EXPR</target>
        </trans-unit>
        <trans-unit id="667f1aa48f4a7e472a9614df04adc9554f19b5a1" translate="yes" xml:space="preserve">
          <source>unpack_str</source>
          <target state="translated">unpack_str</target>
        </trans-unit>
        <trans-unit id="4019f40dd6050d48c4e9c756fe1667c0dd5c3051" translate="yes" xml:space="preserve">
          <source>unpackstring</source>
          <target state="translated">unpackstring</target>
        </trans-unit>
        <trans-unit id="eecd0df4af25a397ff85b82d08059f22712d1347" translate="yes" xml:space="preserve">
          <source>unpairs</source>
          <target state="translated">unpairs</target>
        </trans-unit>
        <trans-unit id="250bc13b5832a332d66e9c4880b8ac5a636d1a3f" translate="yes" xml:space="preserve">
          <source>unresolved internal link</source>
          <target state="translated">未解決内部リンク</target>
        </trans-unit>
        <trans-unit id="e91a205638bd5e3c9fb1fb38119f13fd97586247" translate="yes" xml:space="preserve">
          <source>unrestricted</source>
          <target state="translated">unrestricted</target>
        </trans-unit>
        <trans-unit id="519f72fe3d89c3099ea41ae1c802c97bdc5eadc1" translate="yes" xml:space="preserve">
          <source>unsets debug mode for packages.</source>
          <target state="translated">パッケージのデバッグモードを解除します。</target>
        </trans-unit>
        <trans-unit id="3678183d2623a68c44d9f0bbce67b01afe435aaf" translate="yes" xml:space="preserve">
          <source>unshare_hek</source>
          <target state="translated">unshare_hek</target>
        </trans-unit>
        <trans-unit id="7a0ca95c95533a6dc0a1e0e9aff970ba66b94452" translate="yes" xml:space="preserve">
          <source>unsharepvn</source>
          <target state="translated">unsharepvn</target>
        </trans-unit>
        <trans-unit id="aa81750b23852766b6c1312c52c74e8e43376ec7" translate="yes" xml:space="preserve">
          <source>unshift</source>
          <target state="translated">unshift</target>
        </trans-unit>
        <trans-unit id="e7cfc09be72c471dc24ba67fa64a04d2094e0c98" translate="yes" xml:space="preserve">
          <source>unshift ARRAY,LIST</source>
          <target state="translated">アンシフト ARRAY,LIST</target>
        </trans-unit>
        <trans-unit id="7c2f42f7576eda73695913606951c9319ab37f8b" translate="yes" xml:space="preserve">
          <source>unshift EXPR,LIST</source>
          <target state="translated">アンシフト EXPR,LIST</target>
        </trans-unit>
        <trans-unit id="6960baf3f3c0a0ba2056861718b4e11ab734837d" translate="yes" xml:space="preserve">
          <source>unsigned integer, the same size as</source>
          <target state="translated">と同じサイズの符号なし整数</target>
        </trans-unit>
        <trans-unit id="fd2a7e1cb00c329990c65763cacd331b6ddf577d" translate="yes" xml:space="preserve">
          <source>unstable</source>
          <target state="translated">unstable</target>
        </trans-unit>
        <trans-unit id="3ebe40b3b1535e2070d458bd74877413f860e991" translate="yes" xml:space="preserve">
          <source>unsupported ()</source>
          <target state="translated">非対応</target>
        </trans-unit>
        <trans-unit id="71a357a89ef6c8cc2c4b8fede70ba2f64a1fb87a" translate="yes" xml:space="preserve">
          <source>untaint_pattern</source>
          <target state="translated">untaint_pattern</target>
        </trans-unit>
        <trans-unit id="08257bf290350a2f8d16f85ae7fda5d81b518918" translate="yes" xml:space="preserve">
          <source>untie</source>
          <target state="translated">untie</target>
        </trans-unit>
        <trans-unit id="41ffa486976cc60b0d9967f715609a090b4a3233" translate="yes" xml:space="preserve">
          <source>untie VARIABLE</source>
          <target state="translated">ほどく</target>
        </trans-unit>
        <trans-unit id="9b67ad7d62e1b60d0628d59e38cb26cc0acf8b6e" translate="yes" xml:space="preserve">
          <source>untie attempted while %d inner references still exist</source>
          <target state="translated">内部参照 %d がまだ存在しているときに、紐解きを試みました。</target>
        </trans-unit>
        <trans-unit id="5615ce15b3dc9cab6781e3f31740416951c3440d" translate="yes" xml:space="preserve">
          <source>untie() is called:</source>
          <target state="translated">untie()が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b310f4d4d89b8570184b9777ad7d90fc1df20457" translate="yes" xml:space="preserve">
          <source>until</source>
          <target state="translated">until</target>
        </trans-unit>
        <trans-unit id="54cf6374a981007eef58d61195525d7f8217765c" translate="yes" xml:space="preserve">
          <source>until EOF, and appends that data to the current state. The return value is the updated object itself.</source>
          <target state="translated">EOFまでのデータを現在の状態に追加します。戻り値は更新されたオブジェクトそのものです。</target>
        </trans-unit>
        <trans-unit id="bfcf86091d3067466bc9ffe8d93a97d5a468fb2d" translate="yes" xml:space="preserve">
          <source>until the lock goes out of scope.</source>
          <target state="translated">ロックが効かなくなるまで</target>
        </trans-unit>
        <trans-unit id="0d864558375e79b6bcd8d41b4eadfd0e190c7c45" translate="yes" xml:space="preserve">
          <source>unweaken</source>
          <target state="translated">unweaken</target>
        </trans-unit>
        <trans-unit id="49b9dec079931986840591d4efaaed3acf9eae03" translate="yes" xml:space="preserve">
          <source>unzip $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="translated">uninput $ input_filename_or_reference =&amp;gt; $ output_filename_or_reference [、OPTS]</target>
        </trans-unit>
        <trans-unit id="c601a15fbbc4f41d21e99b8a92db91d6e7d39d25" translate="yes" xml:space="preserve">
          <source>unzip.exe</source>
          <target state="translated">unzip.exe</target>
        </trans-unit>
        <trans-unit id="4e7d82f49845ac441224661e3cf7519a4da4777e" translate="yes" xml:space="preserve">
          <source>uotemeta,</source>
          <target state="translated">uotemeta,</target>
        </trans-unit>
        <trans-unit id="90f24aedaaa17d525888f5a21248234b30a9b336" translate="yes" xml:space="preserve">
          <source>uparrow()</source>
          <target state="translated">uparrow()</target>
        </trans-unit>
        <trans-unit id="ae8f0e6170cd6b45d0cc212ac0c66e0e8d722f2b" translate="yes" xml:space="preserve">
          <source>upd</source>
          <target state="translated">upd</target>
        </trans-unit>
        <trans-unit id="a9f314bc60e448e7fbd1dd13bce399681bb032d3" translate="yes" xml:space="preserve">
          <source>updated by the binary installer, some of them may need to be hand-edited. I know no such data, please keep me informed if you find one. Moreover, manual changes to the installed version may need to be accompanied by an edit of this file.</source>
          <target state="translated">バイナリインストーラーで更新されたもので、手編集が必要なものがあるかもしれません。私はそのようなデータを知らないので、見つけたら教えてください。また、インストールされているバージョンの手動変更には、このファイルの編集を伴う必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5a656fda5269af09ff3873ba74dd4de0ac85bbc1" translate="yes" xml:space="preserve">
          <source>updated the build process during the 5.19 development track.</source>
          <target state="translated">5.19の開発トラックでビルドプロセスを更新しました。</target>
        </trans-unit>
        <trans-unit id="5180e2a88b78792eaa555e79a47e08848d757634" translate="yes" xml:space="preserve">
          <source>updir</source>
          <target state="translated">updir</target>
        </trans-unit>
        <trans-unit id="28eadd2fb4651dc126fabacc1cb030b3958512f3" translate="yes" xml:space="preserve">
          <source>updir (override)</source>
          <target state="translated">updateir</target>
        </trans-unit>
        <trans-unit id="573157bac2f3122bc189ba9a682cbdbe7b752ee2" translate="yes" xml:space="preserve">
          <source>upg_version</source>
          <target state="translated">upg_version</target>
        </trans-unit>
        <trans-unit id="0d9974044112d7da99592fcbf7918308b2bc8a6d" translate="yes" xml:space="preserve">
          <source>upgrade [Module|/Regexp/]...</source>
          <target state="translated">upgrade [Module|/Regexp/]...</target>
        </trans-unit>
        <trans-unit id="6da792f9cfdafa82fd95aab7bdbf212c83da734f" translate="yes" xml:space="preserve">
          <source>upgrade()</source>
          <target state="translated">upgrade()</target>
        </trans-unit>
        <trans-unit id="d0088ce268ddc2ca0b6ec577f9ff466210e4742e" translate="yes" xml:space="preserve">
          <source>upgrade_fragment</source>
          <target state="translated">upgrade_fragment</target>
        </trans-unit>
        <trans-unit id="f4edf1dbbd73a675c8ae27608131c3a5ee71c114" translate="yes" xml:space="preserve">
          <source>upgraded encoding of characters, which is approximately UTF-8 on ASCII machines, but UTF-EBCDIC on EBCDIC machines. This allows any character Perl can represent to be read from or written to the stream.</source>
          <target state="translated">文字のアップグレードされたエンコーディングで、ASCII マシンではほぼ UTF-8、EBCDIC マシンでは UTF-EBCDIC です。これにより、Perl が表現できるあらゆる文字をストリームから読み取ったり、ストリームに書き込んだりすることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="29143dcad2b014512f6db9b84be0b9aa6e6b8deb" translate="yes" xml:space="preserve">
          <source>upi</source>
          <target state="translated">upi</target>
        </trans-unit>
        <trans-unit id="f0cdaeeecd9781d9f40d62459a27fb4ba813d0e3" translate="yes" xml:space="preserve">
          <source>upon failure.</source>
          <target state="translated">失敗したら</target>
        </trans-unit>
        <trans-unit id="c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7" translate="yes" xml:space="preserve">
          <source>upper</source>
          <target state="translated">upper</target>
        </trans-unit>
        <trans-unit id="ee3b0e62b31ff3f021baa533d6c3dd18974e4733" translate="yes" xml:space="preserve">
          <source>upper_before_lower</source>
          <target state="translated">upper_before_lower</target>
        </trans-unit>
        <trans-unit id="117ec720ea4b96702ba69fad917ef776ef5efe4e" translate="yes" xml:space="preserve">
          <source>uppercase</source>
          <target state="translated">uppercase</target>
        </trans-unit>
        <trans-unit id="4a6494f7b0c3a8922958394fa4ecd0b4a0fd0851" translate="yes" xml:space="preserve">
          <source>uptodate</source>
          <target state="translated">uptodate</target>
        </trans-unit>
        <trans-unit id="81736358b1645103ae83247b10c5f82af641ddfc" translate="yes" xml:space="preserve">
          <source>url</source>
          <target state="translated">url</target>
        </trans-unit>
        <trans-unit id="4b281e89c728be235d2824fa8c4c0f6f127e3fa5" translate="yes" xml:space="preserve">
          <source>urllist parameters are URLs according to RFC 1738. We do a little guessing if your URL is not compliant, but if you have problems with &lt;code&gt;file&lt;/code&gt; URLs, please try the correct format. Either:</source>
          <target state="translated">urllistパラメータはRFC 1738に準拠したURLです。URLが準拠していない場合は少し推測しますが、 &lt;code&gt;file&lt;/code&gt; URLに問題がある場合は、正しい形式を試してください。どちらか：</target>
        </trans-unit>
        <trans-unit id="b7716ea49e243080f83315764fdf88f7e9e1bbcd" translate="yes" xml:space="preserve">
          <source>urllist_ping_external</source>
          <target state="translated">urllist_ping_external</target>
        </trans-unit>
        <trans-unit id="7e9dae022da383e848300f174de398361fd558f3" translate="yes" xml:space="preserve">
          <source>urllist_ping_verbose</source>
          <target state="translated">urllist_ping_verbose</target>
        </trans-unit>
        <trans-unit id="65d3e043a9cd16e5189d57b097e935dcca84ddd3" translate="yes" xml:space="preserve">
          <source>usage prefers the form listed above, i.e. it splits on /\s+version\s+/ taking the first field as the name of the tool that generated the file and the second field as version of that tool. RWS]</source>
          <target state="translated">usageは、上記のフォームを好む、すなわち、ファイルを生成したツールの名前として最初のフィールドを取り、そのツールのバージョンとして2番目のフィールドを取る/\s+versions+/で分割します。RWS]</target>
        </trans-unit>
        <trans-unit id="04489a12bbaa6aebffb61ed2f524424ba8e1147e" translate="yes" xml:space="preserve">
          <source>use</source>
          <target state="translated">use</target>
        </trans-unit>
        <trans-unit id="5f81e2624a9db0b5ca4038055b053e3a8d67059d" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;&amp;amp;len&lt;/code&gt; ). If you do not care about what the length of the key is, you may use the global variable &lt;code&gt;PL_na&lt;/code&gt; , though this is rather less efficient than using a local variable. Remember though, that hash keys in perl are free to contain embedded nulls, so using &lt;code&gt;strlen()&lt;/code&gt; or similar is not a good way to find the length of hash keys. This is very similar to the &lt;code&gt;SvPV()&lt;/code&gt; macro described elsewhere in this document. See also &lt;code&gt;HeUTF8&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&amp;amp;len&lt;/code&gt; を使用）。キーの長さを気にしない場合は、グローバル変数 &lt;code&gt;PL_na&lt;/code&gt; を使用できますが、これはローカル変数を使用するよりも効率的ではありません。ただし、perlのハッシュキーにはnullを自由に含めることができるため、 &lt;code&gt;strlen()&lt;/code&gt; などを使用してハッシュキーの長さを調べることは適切ではありません。これは、このドキュメントの他の場所で説明されている &lt;code&gt;SvPV()&lt;/code&gt; マクロと非常によく似ています。 &lt;code&gt;HeUTF8&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b981c090e0ccf2394ca9d98ec6e98f5fdb3b15ee" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;&amp;amp;len&lt;/code&gt; ). If you do not care what the length of the data is, use the &lt;code&gt;SvPV_nolen&lt;/code&gt; macro. Historically the &lt;code&gt;SvPV&lt;/code&gt; macro with the global variable &lt;code&gt;PL_na&lt;/code&gt; has been used in this case. But that can be quite inefficient because &lt;code&gt;PL_na&lt;/code&gt; must be accessed in thread-local storage in threaded Perl. In any case, remember that Perl allows arbitrary strings of data that may both contain NULs and might not be terminated by a &lt;code&gt;NUL&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;&amp;amp;len&lt;/code&gt; を使用）。データの長さが気にならない場合は、 &lt;code&gt;SvPV_nolen&lt;/code&gt; マクロを使用します。従来、この場合、グローバル変数 &lt;code&gt;PL_na&lt;/code&gt; を使用した &lt;code&gt;SvPV&lt;/code&gt; マクロが使用されていました。ただし、スレッド化されたPerlのスレッドローカルストレージで &lt;code&gt;PL_na&lt;/code&gt; にアクセスする必要があるため、これは非常に非効率的です。いずれの場合も、Perlは両方NULsが含まれていてもよいし、で終了していない可能性がありますデータの任意の文字列ができていることを覚えて &lt;code&gt;NUL&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="91872a2db1d3c2ad811092fe03641de69bac02c8" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;&amp;amp;len&lt;/code&gt;). If you do not care about what the length of the key is, you may use the global variable &lt;code&gt;PL_na&lt;/code&gt;, though this is rather less efficient than using a local variable. Remember though, that hash keys in perl are free to contain embedded nulls, so using &lt;code&gt;strlen()&lt;/code&gt; or similar is not a good way to find the length of hash keys. This is very similar to the &lt;code&gt;SvPV()&lt;/code&gt; macro described elsewhere in this document. See also &lt;code&gt;&lt;a href=&quot;#HeUTF8&quot;&gt;&quot;HeUTF8&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;len&lt;/code&gt; を使用します）。キーの長さを気にしない場合は、グローバル変数 &lt;code&gt;PL_na&lt;/code&gt; を使用できますが、これはローカル変数を使用するよりも効率的ではありません。ただし、perlのハッシュキーにはnullが埋め込まれているため、 &lt;code&gt;strlen()&lt;/code&gt; などを使用することはハッシュキーの長さを見つけるのに適した方法ではないことに注意してください。これは、このドキュメントの他の場所で説明されている &lt;code&gt;SvPV()&lt;/code&gt; マクロと非常によく似ています。 &lt;code&gt;&lt;a href=&quot;#HeUTF8&quot;&gt;&quot;HeUTF8&quot;&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="71a43d99f8e2faa8d07b5565dc5d0de6fb1762a1" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;&amp;amp;len&lt;/code&gt;). If you do not care what the length of the data is, use the &lt;code&gt;SvPV_nolen&lt;/code&gt; macro. Historically the &lt;code&gt;SvPV&lt;/code&gt; macro with the global variable &lt;code&gt;PL_na&lt;/code&gt; has been used in this case. But that can be quite inefficient because &lt;code&gt;PL_na&lt;/code&gt; must be accessed in thread-local storage in threaded Perl. In any case, remember that Perl allows arbitrary strings of data that may both contain NULs and might not be terminated by a &lt;code&gt;NUL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;len&lt;/code&gt; を使用します）。データの長さが気にならない場合は、 &lt;code&gt;SvPV_nolen&lt;/code&gt; マクロを使用してください。歴史的に、この場合、グローバル変数 &lt;code&gt;PL_na&lt;/code&gt; を持つ &lt;code&gt;SvPV&lt;/code&gt; マクロが使用されてきました。しかし、 &lt;code&gt;PL_na&lt;/code&gt; はスレッド化されたPerlのスレッドローカルストレージでアクセスする必要があるため、これは非常に非効率的です。いずれの場合も、Perlは両方NULsが含まれていてもよいし、で終了していない可能性がありますデータの任意の文字列ができていることを覚えて &lt;code&gt;NUL&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ab7c0594a0c4ad4b7139bc4478498a69f7e492fd" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 代わりに &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="b438f8ebaf9cd38ef6ddc105cb8f6b0e5c7983a5" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;B&amp;lt;&amp;gt;&lt;/code&gt; for commands names like &lt;b&gt;cat&lt;/b&gt; or &lt;b&gt;grep&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;cat&lt;/b&gt;や&lt;b&gt;grep&lt;/b&gt;などのコマンド名には &lt;code&gt;B&amp;lt;&amp;gt;&lt;/code&gt; を使用します。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="912f09261e74f066e3e24f4b46906e4342000bf4" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; for function, variable and module names (and more generally anything that can be considered part of code, like filehandles or specific values). Note that function names are considered more readable with parentheses after their name, that is &lt;code&gt;function()&lt;/code&gt; .</source>
          <target state="translated">関数、変数、およびモジュール名（より一般的には、ファイルハンドルや特定の値など、コードの一部と見なせるもの）には &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; を使用します。関数名は、名前の後にかっこを付けるとより読みやすくなります。つまり、 &lt;code&gt;function()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="39b5f5dc3c155da3a9793019cfc895b275e0b180" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; for function, variable and module names (and more generally anything that can be considered part of code, like filehandles or specific values). Note that function names are considered more readable with parentheses after their name, that is &lt;code&gt;function()&lt;/code&gt;.</source>
          <target state="translated">関数名、変数名、モジュール名（より一般的には、ファイルハンドルや特定の値など、コードの一部と見なすことができるもの）には &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; を使用します。関数名は、名前の後に括弧を付けると読みやすくなることに注意してください。つまり、 &lt;code&gt;function()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="91895a1cf51d91f57aca46510d3d62ba8b32f1ee" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; or &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; for file names. &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; should be the only Pod code for file names, but as most Pod formatters render it as italic, Unix and Windows paths with their slashes and backslashes may be less readable, and better rendered with &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; .</source>
          <target state="translated">ファイル名には &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; または &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; を使用します。 &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; はファイル名の唯一のポッドコードである必要がありますが、ほとんどのポッドフォーマッターが斜体としてレンダリングするため、スラッシュとバックスラッシュを含むUnixおよびWindowsのパスは読みにくくなり、 &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; より適切にレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="524c11492d5ee4aa3afeb961e886930eb41cabec" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; or &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; for file names. &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; should be the only Pod code for file names, but as most Pod formatters render it as italic, Unix and Windows paths with their slashes and backslashes may be less readable, and better rendered with &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ファイル名には &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; または &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; を使用します。 &lt;code&gt;F&amp;lt;&amp;gt;&lt;/code&gt; はファイル名の唯一のポッドコードである必要がありますが、ほとんどのポッドフォーマッターはそれをイタリックとしてレンダリングするため、スラッシュとバックスラッシュを含むUnixおよびWindowsパスは読みにくく、 &lt;code&gt;C&amp;lt;&amp;gt;&lt;/code&gt; より適切にレンダリングされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4f492c89808474610e1c99a87dbe9bf8660e0714" translate="yes" xml:space="preserve">
          <source>use &lt;code&gt;local&lt;/code&gt; instead of &lt;code&gt;my&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; 代わりに &lt;code&gt;local&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="bdc3bde8eda2284372421b6e4025b7b2372a316b" translate="yes" xml:space="preserve">
          <source>use Bourne shell (&lt;code&gt;sh(1)&lt;/code&gt; ) redirection syntax in backticks, not &lt;code&gt;csh(1)&lt;/code&gt; ! Details on why Perl's &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; and backtick and pipe opens all use the Bourne shell are in the</source>
          <target state="translated">Bshシェル（ &lt;code&gt;sh(1)&lt;/code&gt; ）リダイレクト構文を &lt;code&gt;csh(1)&lt;/code&gt; ではなくバッククォートで使用します！Perlの &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; とバックティックおよびパイプのオープンがすべてBourneシェルを使用する理由の詳細は、</target>
        </trans-unit>
        <trans-unit id="df7e56339ef79629428229acb32534b1e300a431" translate="yes" xml:space="preserve">
          <source>use Bourne shell (&lt;code&gt;sh(1)&lt;/code&gt;) redirection syntax in backticks, not &lt;code&gt;csh(1)&lt;/code&gt;! Details on why Perl's &lt;code&gt;system()&lt;/code&gt; and backtick and pipe opens all use the Bourne shell are in the</source>
          <target state="translated">&lt;code&gt;csh(1)&lt;/code&gt; ではなく、バックティックでBourneシェル（ &lt;code&gt;sh(1)&lt;/code&gt; ）リダイレクト構文を使用してください！Perlの &lt;code&gt;system()&lt;/code&gt; とバッククォートとパイプがすべてBourneシェルを使用する理由の詳細は</target>
        </trans-unit>
        <trans-unit id="51c5202eb33a9fabbe84c4c8634db07023b9dfa6" translate="yes" xml:space="preserve">
          <source>use Filter::Util::Call</source>
          <target state="translated">use Filter::Util::Call</target>
        </trans-unit>
        <trans-unit id="16599c655382953c8630fbbdb2c964d3e8dee9ae" translate="yes" xml:space="preserve">
          <source>use Module</source>
          <target state="translated">使用モジュール</target>
        </trans-unit>
        <trans-unit id="90f04428920392ff9b2def8ba0ed469f079b6502" translate="yes" xml:space="preserve">
          <source>use Module LIST</source>
          <target state="translated">使用モジュールリスト</target>
        </trans-unit>
        <trans-unit id="7ed0869d2d4fc928494f42d5819555da7a79edd6" translate="yes" xml:space="preserve">
          <source>use Module VERSION</source>
          <target state="translated">使用モジュール VERSION</target>
        </trans-unit>
        <trans-unit id="c2de803ffc4c0a3b39ed0dff30412c19bd9d9fee" translate="yes" xml:space="preserve">
          <source>use Module VERSION LIST</source>
          <target state="translated">モジュールのバージョンリストを使用します。</target>
        </trans-unit>
        <trans-unit id="ed1b16f9eadabbae879f86b68ec71e8b6d05ca67" translate="yes" xml:space="preserve">
          <source>use Perl; used to provide a slashdot-style news/blog website covering all things Perl, from minutes of the meetings of the Perl 6 Design team to conference announcements with (ir)relevant discussion. It no longer accepts updates, but you can still use the site to read old entries and comments.</source>
          <target state="translated">use Perl;Perl 6 デザインチームの会議の議事録から、(無関係な)議論を含む会議のアナウンスまで、Perl に関するあらゆることをカバーするスラッシュドットスタイルのニュース/ブログサイトを提供するために使用されていました。現在は更新を受け付けていませんが、古いエントリやコメントを読むためにサイトを使用することができます。</target>
        </trans-unit>
        <trans-unit id="d91bc845470d4a86d4018011a4792f7dcf86f037" translate="yes" xml:space="preserve">
          <source>use SA_RESTART. Consequently, restartable system calls can fail (with $! set to &lt;code&gt;EINTR&lt;/code&gt; ) in places where they previously would have succeeded.</source>
          <target state="translated">SA_RESTARTを使用します。その結果、再起動可能なシステムコールは、以前は成功していた場所で（$！を &lt;code&gt;EINTR&lt;/code&gt; に設定して）失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="63988d3f48d2bb0b68264da99290684d703e5c2a" translate="yes" xml:space="preserve">
          <source>use SA_RESTART. Consequently, restartable system calls can fail (with $! set to &lt;code&gt;EINTR&lt;/code&gt;) in places where they previously would have succeeded.</source>
          <target state="translated">SA_RESTARTを使用します。その結果、再起動可能なシステムコールは、以前は成功していた場所で失敗する可能性があります（$！を &lt;code&gt;EINTR&lt;/code&gt; に設定）。</target>
        </trans-unit>
        <trans-unit id="4c7c49503a611307f683497f7df47accbf51802a" translate="yes" xml:space="preserve">
          <source>use VERSION</source>
          <target state="translated">使用バージョン</target>
        </trans-unit>
        <trans-unit id="86d6a1e3bbd163625d7fac651620cbfa17805164" translate="yes" xml:space="preserve">
          <source>use bytes;</source>
          <target state="translated">バイトを使用します。</target>
        </trans-unit>
        <trans-unit id="fa4be9c50a05e3e4beb43cd9f7972d2ccf304eae" translate="yes" xml:space="preserve">
          <source>use if</source>
          <target state="translated">使う</target>
        </trans-unit>
        <trans-unit id="59d6056cfb56b5a37f62f1bf027d56c8cb904bd1" translate="yes" xml:space="preserve">
          <source>use integer vs. use bigint</source>
          <target state="translated">整数とbigintを使い分ける</target>
        </trans-unit>
        <trans-unit id="814151fffad1e37f33b4e503823e70b6bbf3c04b" translate="yes" xml:space="preserve">
          <source>use integer;</source>
          <target state="translated">整数を使用します。</target>
        </trans-unit>
        <trans-unit id="49d768463f13dbf420913f9d0b8f147140ea29e5" translate="yes" xml:space="preserve">
          <source>use it:</source>
          <target state="translated">使ってください。</target>
        </trans-unit>
        <trans-unit id="3d1d48f5b10a148ad0e4d39b9da43de87d730e84" translate="yes" xml:space="preserve">
          <source>use of a backslash to include a space in a word</source>
          <target state="translated">衍字</target>
        </trans-unit>
        <trans-unit id="1f5c67435c71d9a6ca9c3233dedb2dc1513c55c2" translate="yes" xml:space="preserve">
          <source>use of a backslash to remove the special meaning of a double-quote</source>
          <target state="translated">符牒</target>
        </trans-unit>
        <trans-unit id="f6fe0074742b81fff90e497bf135242ea8e89606" translate="yes" xml:space="preserve">
          <source>use of quotes to include a space in a word</source>
          <target state="translated">空白引用符</target>
        </trans-unit>
        <trans-unit id="8c01026ad061791e802cf597a172313b49e695da" translate="yes" xml:space="preserve">
          <source>use re 'strict'</source>
          <target state="translated">使いまわす</target>
        </trans-unit>
        <trans-unit id="cda9500ef317eb6fc5a5f798984325090df1150f" translate="yes" xml:space="preserve">
          <source>use re;</source>
          <target state="translated">使う</target>
        </trans-unit>
        <trans-unit id="53e07a32bf191d6917ee6fd863f0b52632a86798" translate="yes" xml:space="preserve">
          <source>use strict</source>
          <target state="translated">使う</target>
        </trans-unit>
        <trans-unit id="8428b0851b0684a353e7ed0874608908c7b5144e" translate="yes" xml:space="preserve">
          <source>use strict;</source>
          <target state="translated">厳密に使用してください。</target>
        </trans-unit>
        <trans-unit id="371d195a9f9f3ece23b26e71d1dd939d2d111281" translate="yes" xml:space="preserve">
          <source>use symbolic references are when you really must refer to the symbol table. This may be because it's something that one can't take a real reference to, such as a format name. Doing so may also be important for method calls, since these always go through the symbol table for resolution.</source>
          <target state="translated">シンボル参照を使用する場合は、どうしてもシンボルテーブルを参照しなければならない場合です。これは、フォーマット名など、実際に参照することができないものだからかもしれません。メソッドの呼び出しは常にシンボルテーブルを参照して解決するので、このようにすることも重要かもしれません。</target>
        </trans-unit>
        <trans-unit id="9b052d587b755b57eec4828588dac107af257aee" translate="yes" xml:space="preserve">
          <source>use the &lt;code&gt;sources&lt;/code&gt; parameter below.</source>
          <target state="translated">以下の &lt;code&gt;sources&lt;/code&gt; パラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="cbacfc4c115173ec78e0b2e5387eefbdb941b814" translate="yes" xml:space="preserve">
          <source>use the brackets. These are correct: &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof(FH)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;(FH, 0,
2)&lt;/code&gt; and &quot;copying from STDIN to FILE&quot;.</source>
          <target state="translated">ブラケットを使用します。これらは正しい： &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof(FH)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/seek&quot;&gt;seek&lt;/a&gt;(FH, 0, 2)&lt;/code&gt; および &quot;STDINからFILEへのコピー&quot;。</target>
        </trans-unit>
        <trans-unit id="ae9a40effe41a60d5a17fa34d81461e3663991d5" translate="yes" xml:space="preserve">
          <source>use the brackets. These are correct: &lt;code&gt;eof(FH)&lt;/code&gt;, &lt;code&gt;seek(FH, 0, 2)&lt;/code&gt; and &quot;copying from STDIN to FILE&quot;.</source>
          <target state="translated">角かっこを使用します。これらは正しいです： &lt;code&gt;eof(FH)&lt;/code&gt; 、 &lt;code&gt;seek(FH, 0, 2)&lt;/code&gt; および「STDINからFILEへのコピー」。</target>
        </trans-unit>
        <trans-unit id="ebbd8b9a036d877785987351768edc2c897562b7" translate="yes" xml:space="preserve">
          <source>use this option. In the example above it will prevent the filename being included in the gzip header and make the size of the gzip data stream a slight bit smaller.</source>
          <target state="translated">このオプションを使う。上の例では、ファイル名が gzip ヘッダに含まれるのを防ぎ、 gzip データストリームのサイズを少し小さくする。</target>
        </trans-unit>
        <trans-unit id="b6f77e9413c57563ec485af7a0a5bae4e8e2ecbf" translate="yes" xml:space="preserve">
          <source>use threads 'exit' =&amp;gt; 'threads_only'</source>
          <target state="translated">スレッドを使用 'exit' =&amp;gt; 'threads_only'</target>
        </trans-unit>
        <trans-unit id="62b4c206d9c4bb68da44a80182ebb4ba60535275" translate="yes" xml:space="preserve">
          <source>use threads ('stack_size' =&amp;gt; VALUE);</source>
          <target state="translated">スレッドを使用する（ 'stack_size' =&amp;gt; VALUE）;</target>
        </trans-unit>
        <trans-unit id="16242ca7d468c97ea7b6997607a050d2e0014a3f" translate="yes" xml:space="preserve">
          <source>use utf8;</source>
          <target state="translated">utf8を使用します。</target>
        </trans-unit>
        <trans-unit id="0fa383e37931d8581b639133cfcd368d72f2dc65" translate="yes" xml:space="preserve">
          <source>use warnings::register</source>
          <target state="translated">使用警告::登録</target>
        </trans-unit>
        <trans-unit id="9d9bf76551e571ede80cc893a3c04b1861a56e60" translate="yes" xml:space="preserve">
          <source>use warnings;</source>
          <target state="translated">警告を使用します。</target>
        </trans-unit>
        <trans-unit id="43e6bb793575b0e1c61db35e98228f60aeaf2f8d" translate="yes" xml:space="preserve">
          <source>use()</source>
          <target state="translated">use()</target>
        </trans-unit>
        <trans-unit id="d05287976184d88c455cd302b00f63b076bbdc63" translate="yes" xml:space="preserve">
          <source>use64bits.U</source>
          <target state="translated">use64bits.U</target>
        </trans-unit>
        <trans-unit id="dc1f703fbe2525f75cc9ab49194aee9e138946ca" translate="yes" xml:space="preserve">
          <source>use_RS [YESNO]</source>
          <target state="translated">use_RS [YESNO]</target>
        </trans-unit>
        <trans-unit id="322d0f0f0db821475c4f6805cc89ae633c406474" translate="yes" xml:space="preserve">
          <source>use_prompt_default</source>
          <target state="translated">use_prompt_default</target>
        </trans-unit>
        <trans-unit id="f5132649d33439de6ae0a145d2b65de546b4a3bd" translate="yes" xml:space="preserve">
          <source>use_sqlite</source>
          <target state="translated">use_sqlite</target>
        </trans-unit>
        <trans-unit id="de888ddd185c016565479b29ef9407370202fca3" translate="yes" xml:space="preserve">
          <source>usebacktrace.U</source>
          <target state="translated">usebacktrace.U</target>
        </trans-unit>
        <trans-unit id="c75278e55d10139a00150399331bbf063800d605" translate="yes" xml:space="preserve">
          <source>useconds or interval more than ...</source>
          <target state="translated">秒以上の間隔</target>
        </trans-unit>
        <trans-unit id="83a7a6b40353b9f6be160c361611ae311dfb9752" translate="yes" xml:space="preserve">
          <source>useconds or uinterval equal to or more than 1000000</source>
          <target state="translated">秒または100000000以上のUインターバル</target>
        </trans-unit>
        <trans-unit id="192a56759d36454cc0b8c812e31845e9ed10b130" translate="yes" xml:space="preserve">
          <source>used</source>
          <target state="translated">used</target>
        </trans-unit>
        <trans-unit id="73decdd966503bbba3c9fd02a2b5f2ce91746665" translate="yes" xml:space="preserve">
          <source>used by &lt;code&gt;DynaLoader&lt;/code&gt; for DLL name mangling.</source>
          <target state="translated">DLL名のマングリングのために &lt;code&gt;DynaLoader&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="e30f4a35ac593e13f39f5488a20368f2d3e27f69" translate="yes" xml:space="preserve">
          <source>used by &lt;code&gt;File::Copy::copy&lt;/code&gt; , see &lt;a href=&quot;file/copy&quot;&gt;File::Copy&lt;/a&gt;.</source>
          <target state="translated">で使用される &lt;code&gt;File::Copy::copy&lt;/code&gt; 、参照&lt;a href=&quot;file/copy&quot;&gt;ファイル::コピーを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4c89876435377f44f971efb9c888edc6a3425954" translate="yes" xml:space="preserve">
          <source>used by &lt;code&gt;File::Copy::copy&lt;/code&gt;, see &lt;a href=&quot;File::Copy&quot;&gt;File::Copy&lt;/a&gt;.</source>
          <target state="translated">で使用される &lt;code&gt;File::Copy::copy&lt;/code&gt; 、参照&lt;a href=&quot;File::Copy&quot;&gt;ファイル::コピーを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6651965b06637ac206b1de96bf978eb27b24abe2" translate="yes" xml:space="preserve">
          <source>used by Microsoft C/C++), all of these functions will be available for use. Otherwise, you won't be able to perform the SHA-384 and SHA-512 transforms, both of which require 64-bit operations.</source>
          <target state="translated">Microsoft C/C++で使用されている)を使用している場合は、これらの関数をすべて使用することができます。そうでなければ、64ビット演算を必要とするSHA-384変換とSHA-512変換を実行することができません。</target>
        </trans-unit>
        <trans-unit id="4bcdb1a3c67ee6a36e9c8f01fec7794365214c0a" translate="yes" xml:space="preserve">
          <source>used in the Canonical Ordering Algorithm. For Unicode 5.1, this is described in Section 3.11 &lt;code&gt;Canonical Ordering Behavior&lt;/code&gt; available at &lt;a href=&quot;http://www.unicode.org/versions/Unicode5.1.0/&quot;&gt;http://www.unicode.org/versions/Unicode5.1.0/&lt;/a&gt;</source>
          <target state="translated">Canonical Ordering Algorithmで使用されます。Unicode 5.1の場合、これについては、&lt;a href=&quot;http://www.unicode.org/versions/Unicode5.1.0/&quot;&gt;http：//www.unicode.org/versions/Unicode5.1.0/&lt;/a&gt;にあるセクション3.11 &lt;code&gt;Canonical Ordering Behavior&lt;/code&gt; されています。</target>
        </trans-unit>
        <trans-unit id="05f21d186e7b8936010e35678ac31222355da13c" translate="yes" xml:space="preserve">
          <source>used in this way, the result of evaluation of</source>
          <target state="translated">の評価結果がこのように使用されている。</target>
        </trans-unit>
        <trans-unit id="d652c7d874ec8b1c40417e324ea5d062c754cc5c" translate="yes" xml:space="preserve">
          <source>used in this way, the result of evaluation of &lt;code&gt;code&lt;/code&gt; is put into the special variable &lt;code&gt;$^R&lt;/code&gt; . This happens immediately, so &lt;code&gt;$^R&lt;/code&gt; can be used from other &lt;code&gt;(?{ code })&lt;/code&gt; assertions inside the same regular expression.</source>
          <target state="translated">このように使用すると、 &lt;code&gt;code&lt;/code&gt; の評価結果は特殊変数 &lt;code&gt;$^R&lt;/code&gt; 入れられます。これはすぐに発生するため、同じ正規表現内の他の &lt;code&gt;(?{ code })&lt;/code&gt; アサーションから &lt;code&gt;$^R&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ad7a1aa25b73ae4e670cc536096730d91e2000c2" translate="yes" xml:space="preserve">
          <source>used to be the recommended way to report bugs in the perl interpreter itself or any of the standard library modules back to the developers; bug reports and patches should now be submitted to &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;.</source>
          <target state="translated">以前は、perlインタープリター自体または標準ライブラリモジュールのバグを開発者に報告するための推奨される方法でした。バグレポートとパッチは&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;に送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="910e6213db30e16ad6b1c4b4021611873d6ce5e8" translate="yes" xml:space="preserve">
          <source>usedtrace.U</source>
          <target state="translated">usedtrace.U</target>
        </trans-unit>
        <trans-unit id="ae3154c3ec5c365c6959f779a04adc35659601ba" translate="yes" xml:space="preserve">
          <source>usefaststdio.U</source>
          <target state="translated">usefaststdio.U</target>
        </trans-unit>
        <trans-unit id="682aa3c2d38618cf64e946cc3bbd2fc8a96d01db" translate="yes" xml:space="preserve">
          <source>useful programs are slow</source>
          <target state="translated">便利なプログラムは遅い</target>
        </trans-unit>
        <trans-unit id="64cd2a07a89b1a0f1da29526d021d0937a062dc3" translate="yes" xml:space="preserve">
          <source>useful:</source>
          <target state="translated">useful:</target>
        </trans-unit>
        <trans-unit id="86959ccaa35c5e158cbc673c5b275d5c75322ffb" translate="yes" xml:space="preserve">
          <source>usekernprocpathname.U</source>
          <target state="translated">usekernprocpathname.U</target>
        </trans-unit>
        <trans-unit id="dfb174e9b45efda0d2813ab34a52566fc0e5149a" translate="yes" xml:space="preserve">
          <source>uselfs.U</source>
          <target state="translated">uselfs.U</target>
        </trans-unit>
        <trans-unit id="4a865fd135358714278adf708601a551aa95d374" translate="yes" xml:space="preserve">
          <source>uselongdbl.U</source>
          <target state="translated">uselongdbl.U</target>
        </trans-unit>
        <trans-unit id="8f139461261d4e47392a29d9a1470571a111a9dc" translate="yes" xml:space="preserve">
          <source>uselongdouble.cbu</source>
          <target state="translated">uselongdouble.cbu</target>
        </trans-unit>
        <trans-unit id="55dcabac6b2a581cb97ea8cc9bfb5c2c032a1aa2" translate="yes" xml:space="preserve">
          <source>usemorebits.U</source>
          <target state="translated">usemorebits.U</target>
        </trans-unit>
        <trans-unit id="cacd09fc8d7a5be6357aae988bf81988f273cde2" translate="yes" xml:space="preserve">
          <source>usemultiplicity.U</source>
          <target state="translated">usemultiplicity.U</target>
        </trans-unit>
        <trans-unit id="999728bc8bffebc44a36dcc8573424d9a99a522c" translate="yes" xml:space="preserve">
          <source>usenm.U</source>
          <target state="translated">usenm.U</target>
        </trans-unit>
        <trans-unit id="135519af067f60479443d73bde99b3ce40a82660" translate="yes" xml:space="preserve">
          <source>usensgetexecutablepath.U</source>
          <target state="translated">usensgetexecutablepath.U</target>
        </trans-unit>
        <trans-unit id="f8a6096831b8f25daa716e7ca10d96073259de34" translate="yes" xml:space="preserve">
          <source>useperlio.U</source>
          <target state="translated">useperlio.U</target>
        </trans-unit>
        <trans-unit id="97f9b6453ab8627d3cd32b5de7ede1a376eb1e42" translate="yes" xml:space="preserve">
          <source>usequadmath.U</source>
          <target state="translated">usequadmath.U</target>
        </trans-unit>
        <trans-unit id="12dea96fec20593566ab75692c9949596833adc9" translate="yes" xml:space="preserve">
          <source>user</source>
          <target state="translated">user</target>
        </trans-unit>
        <trans-unit id="6f725d50593f3b2f80e8611b06f57655c0a960f0" translate="yes" xml:space="preserve">
          <source>user ( USER )</source>
          <target state="translated">ユーザー(USER )</target>
        </trans-unit>
        <trans-unit id="eac7df9d404fadc667203b21aea1bdd5765ffcc2" translate="yes" xml:space="preserve">
          <source>user =&amp;gt; $owner</source>
          <target state="translated">ユーザー=&amp;gt; $ owner</target>
        </trans-unit>
        <trans-unit id="948109d35f9658f13aa26db4dca1ebe12f69c043" translate="yes" xml:space="preserve">
          <source>user interface (tty or graphical)</source>
          <target state="translated">ユーザーインターフェース</target>
        </trans-unit>
        <trans-unit id="99cd2c26d48da74abf7a71cda0673fef004fd48c" translate="yes" xml:space="preserve">
          <source>user time</source>
          <target state="translated">利用者時間</target>
        </trans-unit>
        <trans-unit id="a7e2c648dc9941f38aea4196f90df226d6e93b2b" translate="yes" xml:space="preserve">
          <source>uses</source>
          <target state="translated">uses</target>
        </trans-unit>
        <trans-unit id="8fe9b31e1cb4034ae05b748f916caeb04bc961ae" translate="yes" xml:space="preserve">
          <source>uses &lt;code&gt;$a&lt;/code&gt; for the width, &lt;code&gt;$b&lt;/code&gt; for the precision, and &lt;code&gt;$c&lt;/code&gt; as the value to format; while:</source>
          <target state="translated">使用 &lt;code&gt;$a&lt;/code&gt; 幅、のために &lt;code&gt;$b&lt;/code&gt; 精度のために、および &lt;code&gt;$c&lt;/code&gt; フォーマットの値として。その間：</target>
        </trans-unit>
        <trans-unit id="09830868f1f121ce087a3809e753c0b99304db3d" translate="yes" xml:space="preserve">
          <source>uses dl_findfile() to determine the filename to load</source>
          <target state="translated">dl_findfile()を使用して、ロードするファイル名を決定します。</target>
        </trans-unit>
        <trans-unit id="5af968b0841a76d30d08c146e669a78b4cab19ad" translate="yes" xml:space="preserve">
          <source>uses empty string matches as separators to produce the output 'a:b:c'; thus, the empty string may be used to split EXPR into a list of its component characters.</source>
          <target state="translated">は、空文字列のマッチをセパレータとして使用して 'a:b:c' という出力を生成します;そのため、空文字列を使用して EXPR をその構成文字のリストに分割することができます。</target>
        </trans-unit>
        <trans-unit id="9c891935852b3302589a0146d43ab52b0fa3de2f" translate="yes" xml:space="preserve">
          <source>uses empty string matches as separators to produce the output &lt;code&gt;a:b:c&lt;/code&gt;; thus, the empty string may be used to split EXPR into a list of its component characters.</source>
          <target state="translated">空の文字列一致を区切り文字として使用して、出力 &lt;code&gt;a:b:c&lt;/code&gt; を生成します。したがって、空の文字列を使用して、EXPRをそのコンポーネント文字のリストに分割できます。</target>
        </trans-unit>
        <trans-unit id="90fd05af98859035d1a5f230da49fa1011416f54" translate="yes" xml:space="preserve">
          <source>uses the 'b' in 'abc' as a separator to produce the output 'a:c'. However, this:</source>
          <target state="translated">は 'abc' の 'b' を区切り文字として使用し、出力 'a:c' を生成します。しかし、これは</target>
        </trans-unit>
        <trans-unit id="0385b247665cc9feec9dd5e3fae26654605693e5" translate="yes" xml:space="preserve">
          <source>uses the &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;クラスを使用します。</target>
        </trans-unit>
        <trans-unit id="c45c816514a9d0fe253989721442e7a2dc858372" translate="yes" xml:space="preserve">
          <source>uses the &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;'abc'&lt;/code&gt; as a separator to produce the output &lt;code&gt;a:c&lt;/code&gt;. However, this:</source>
          <target state="translated">&lt;code&gt;'abc'&lt;/code&gt; の &lt;code&gt;b&lt;/code&gt; をセパレータとして使用して、出力 &lt;code&gt;a:c&lt;/code&gt; を生成します。ただし、これ：</target>
        </trans-unit>
        <trans-unit id="7a1854e57bb3e0204fcdb39b3f71fdc0b1165103" translate="yes" xml:space="preserve">
          <source>uses the lexical variables that are maintained by the closure.</source>
          <target state="translated">はクロージャによって維持される語彙変数を使用します。</target>
        </trans-unit>
        <trans-unit id="09d1afddd581a0eacf04d5d0d5756a7efff2579d" translate="yes" xml:space="preserve">
          <source>uses the object passed to the method to store any context data, whereas the</source>
          <target state="translated">はメソッドに渡されたオブジェクトを使用してコンテキストデータを保存します。</target>
        </trans-unit>
        <trans-unit id="c3ceef66b33c51bee6d1bb1d471003d812947110" translate="yes" xml:space="preserve">
          <source>uses the string &lt;code&gt;&quot;\n&quot;&lt;/code&gt; as the line delimiter.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; を行区切り文字として使用します。</target>
        </trans-unit>
        <trans-unit id="c3cd2678befce2c7f2ae3fa75bbf277408ae4f0c" translate="yes" xml:space="preserve">
          <source>usesocks.U</source>
          <target state="translated">usesocks.U</target>
        </trans-unit>
        <trans-unit id="f9de3288841199ccb6c310b320eb302bb6d60b04" translate="yes" xml:space="preserve">
          <source>usethreads.U</source>
          <target state="translated">usethreads.U</target>
        </trans-unit>
        <trans-unit id="92bd75ebd8fd2b0179172217b15350cc6d4002f0" translate="yes" xml:space="preserve">
          <source>using</source>
          <target state="translated">using</target>
        </trans-unit>
        <trans-unit id="ef2c97b86bc74213c765549ddf68b4f640c57c39" translate="yes" xml:space="preserve">
          <source>using &lt;a href=&quot;http://man.he.net/man2/lseek&quot;&gt;lseek(2)&lt;/a&gt;. FILEHANDLE may be an expression whose value gives the name of the filehandle. The values for WHENCE are &lt;code&gt;0&lt;/code&gt; to set the new position to POSITION; &lt;code&gt;1&lt;/code&gt; to set it to the current position plus POSITION; and &lt;code&gt;2&lt;/code&gt; to set it to EOF plus POSITION, typically negative.</source>
          <target state="translated">&lt;a href=&quot;http://man.he.net/man2/lseek&quot;&gt;lseek（2）&lt;/a&gt;を使用します。FILEHANDLEは、その値がファイルハンドルの名前を与える式である可能性があります。WHENCEの値は &lt;code&gt;0&lt;/code&gt; で、新しい位置をPOSITIONに設定します。 &lt;code&gt;1&lt;/code&gt; は、現在の位置にPOSITIONを加えた位置に設定します。及び &lt;code&gt;2&lt;/code&gt; は、 EOFプラスPOSITION、一般的に負に設定します。</target>
        </trans-unit>
        <trans-unit id="598c217817c73e5780e3966c099266496e2980d1" translate="yes" xml:space="preserve">
          <source>using GNU libc and you can ignore &lt;code&gt;LANGUAGE&lt;/code&gt; .</source>
          <target state="translated">GNU libcを使用すると、 &lt;code&gt;LANGUAGE&lt;/code&gt; を無視できます。</target>
        </trans-unit>
        <trans-unit id="5e7ab0439ca2d580e4845590a60f824395ba7c62" translate="yes" xml:space="preserve">
          <source>using GNU libc and you can ignore &lt;code&gt;LANGUAGE&lt;/code&gt;.</source>
          <target state="translated">GNU libcを使用すると、 &lt;code&gt;LANGUAGE&lt;/code&gt; は無視できます。</target>
        </trans-unit>
        <trans-unit id="16fc297cbc600394f05f8c2154dec797fd2616a9" translate="yes" xml:space="preserve">
          <source>using the &lt;b&gt;parseopts()&lt;/b&gt; method. The set of currently accepted parse-options is as follows:</source>
          <target state="translated">&lt;b&gt;parseopts（）&lt;/b&gt;メソッドを使用します。現在受け入れられている解析オプションのセットは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5ddf1529ff81cf1646da1b5ad744e5598d0ce2a2" translate="yes" xml:space="preserve">
          <source>using the G_EVAL flag, it promptly reset &lt;code&gt;$@&lt;/code&gt; . This results in the failure of the outermost test for &lt;code&gt;$@&lt;/code&gt; , and thereby the failure of the error trap.</source>
          <target state="translated">G_EVALフラグを使用して、すぐに &lt;code&gt;$@&lt;/code&gt; リセットします。これにより、 &lt;code&gt;$@&lt;/code&gt; 最も外側のテストが失敗し、エラートラップが失敗します。</target>
        </trans-unit>
        <trans-unit id="0820ff5901a5159270b22207182f2cfebef68967" translate="yes" xml:space="preserve">
          <source>using the G_EVAL flag, it promptly reset &lt;code&gt;$@&lt;/code&gt;. This results in the failure of the outermost test for &lt;code&gt;$@&lt;/code&gt;, and thereby the failure of the error trap.</source>
          <target state="translated">G_EVALフラグを使用して、 &lt;code&gt;$@&lt;/code&gt; 即座にリセットします。これにより、 &lt;code&gt;$@&lt;/code&gt; 最も外側のテストが失敗し、エラートラップが失敗します。</target>
        </trans-unit>
        <trans-unit id="eb699932692b6b7e2ea37fceb7f7f660756e9c08" translate="yes" xml:space="preserve">
          <source>using the mkstemp() from this module.</source>
          <target state="translated">このモジュールの mkstemp()を使用しています。</target>
        </trans-unit>
        <trans-unit id="15096566b8bf4d62f473ddd5d668fd41aaeea35d" translate="yes" xml:space="preserve">
          <source>usleep ( $useconds )</source>
          <target state="translated">usleep($useconds )</target>
        </trans-unit>
        <trans-unit id="74206ccb17460da0011cfb062984120700d158f9" translate="yes" xml:space="preserve">
          <source>usrinc.U</source>
          <target state="translated">usrinc.U</target>
        </trans-unit>
        <trans-unit id="66c2fa4e9e56695791a43a16b1e7e46e2db759e4" translate="yes" xml:space="preserve">
          <source>usually</source>
          <target state="translated">usually</target>
        </trans-unit>
        <trans-unit id="f68489ebd04ca3a9cf85cc582f26b952d9e0e821" translate="yes" xml:space="preserve">
          <source>usually denotes an intensity, but the name does not matter). The number</source>
          <target state="translated">通常は強度を表しますが、名前は重要ではありません)。数を表すために</target>
        </trans-unit>
        <trans-unit id="552fa32543fec03ccf6183c2b935ef13e3235d5b" translate="yes" xml:space="preserve">
          <source>usually have their own documentation, either in the</source>
          <target state="translated">通常は、独自のドキュメントを持っています。</target>
        </trans-unit>
        <trans-unit id="5b8f21f7c75d9b9f23162e7287673f1417b09fab" translate="yes" xml:space="preserve">
          <source>usually need to be overridden by subclasses.</source>
          <target state="translated">は通常、サブクラスによってオーバーライドされる必要があります。</target>
        </trans-unit>
        <trans-unit id="f35e977202447fa29b00c199673188a6d0811d59" translate="yes" xml:space="preserve">
          <source>usually without needing to know which versions of perl to use as start and end revisions, as</source>
          <target state="translated">のように、開始リビジョンと終了リビジョンとして使用するPerlのバージョンを知る必要はありません。</target>
        </trans-unit>
        <trans-unit id="fde8b16abacfa7f9fada90430fe9a29449f6021b" translate="yes" xml:space="preserve">
          <source>utf16_to_utf8</source>
          <target state="translated">utf16_to_utf8</target>
        </trans-unit>
        <trans-unit id="d9aaae66847368171fad8d735e03a0a30163708b" translate="yes" xml:space="preserve">
          <source>utf16_to_utf8_reversed</source>
          <target state="translated">utf16_to_utf8_reversed</target>
        </trans-unit>
        <trans-unit id="81f0c4ab9b5679964eab3692a28c6daa905d6fc9" translate="yes" xml:space="preserve">
          <source>utf8</source>
          <target state="translated">utf8</target>
        </trans-unit>
        <trans-unit id="bf16403afd56538795ee624940c94265c7f38841" translate="yes" xml:space="preserve">
          <source>utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code</source>
          <target state="translated">utf8-ソースコードで UTF-8 (または UTF-EBCDIC)を有効化/無効化するための Perl プラグマ</target>
        </trans-unit>
        <trans-unit id="8a55e267e231fb42d7315571178272cd8e0ca77a" translate="yes" xml:space="preserve">
          <source>utf8 / &quot;Wide character in print&quot;</source>
          <target state="translated">utf8/&quot;ワイド文字で印刷&quot;</target>
        </trans-unit>
        <trans-unit id="06c785784048f177ac818710465c9dce1b458981" translate="yes" xml:space="preserve">
          <source>utf8 data</source>
          <target state="translated">ユーティーエフエイトデータ</target>
        </trans-unit>
        <trans-unit id="a594f2111ee293665faf1e597c91b88defdbc7c8" translate="yes" xml:space="preserve">
          <source>utf8.h</source>
          <target state="translated">utf8.h</target>
        </trans-unit>
        <trans-unit id="c23f5615906bc56a2ba756aeb96aa29939293657" translate="yes" xml:space="preserve">
          <source>utf8::unicode_to_native() and utf8::native_to_unicode()</source>
          <target state="translated">utf8::unicode_to_native()および utf8::native_to_unicode()</target>
        </trans-unit>
        <trans-unit id="7dac82ca32b1030f4424185fae73b6880a765d90" translate="yes" xml:space="preserve">
          <source>utf8_distance</source>
          <target state="translated">utf8_distance</target>
        </trans-unit>
        <trans-unit id="7d0f1a511bbdeb467797b2cb2e1fce26a20f1f05" translate="yes" xml:space="preserve">
          <source>utf8_hop</source>
          <target state="translated">utf8_hop</target>
        </trans-unit>
        <trans-unit id="7685a6b6d73246d06c91c2b616b920e390cc9c5b" translate="yes" xml:space="preserve">
          <source>utf8_hop_back</source>
          <target state="translated">utf8_hop_back</target>
        </trans-unit>
        <trans-unit id="d63ddc7e6107a1d98b06aff600ab7e9b741693ae" translate="yes" xml:space="preserve">
          <source>utf8_hop_forward</source>
          <target state="translated">utf8_hop_forward</target>
        </trans-unit>
        <trans-unit id="a771a1b2d9fd5a6e2ba308697abcc9763e3e3861" translate="yes" xml:space="preserve">
          <source>utf8_hop_safe</source>
          <target state="translated">utf8_hop_safe</target>
        </trans-unit>
        <trans-unit id="9e4b320eedfb44001a171f2b8ca5d579b28c5d18" translate="yes" xml:space="preserve">
          <source>utf8_length</source>
          <target state="translated">utf8_length</target>
        </trans-unit>
        <trans-unit id="186738a6bc7116c632c74c0447e4cf282f9b3d21" translate="yes" xml:space="preserve">
          <source>utf8_to_bytes</source>
          <target state="translated">utf8_to_bytes</target>
        </trans-unit>
        <trans-unit id="8f4497897eb2e648f000a7b7abb093986b721356" translate="yes" xml:space="preserve">
          <source>utf8_to_uvchr</source>
          <target state="translated">utf8_to_uvchr</target>
        </trans-unit>
        <trans-unit id="2ab5ed375b631b40a85a14eb893d8a19c4207efe" translate="yes" xml:space="preserve">
          <source>utf8_to_uvchr_buf</source>
          <target state="translated">utf8_to_uvchr_buf</target>
        </trans-unit>
        <trans-unit id="25a4ee76b31039e084260c9c17d411878c6fa82d" translate="yes" xml:space="preserve">
          <source>utf8_to_uvchr_buf_helper</source>
          <target state="translated">utf8_to_uvchr_buf_helper</target>
        </trans-unit>
        <trans-unit id="b1f213b77a6f6572d9a478339eab6e36e02a5cf3" translate="yes" xml:space="preserve">
          <source>utf8_to_uvuni</source>
          <target state="translated">utf8_to_uvuni</target>
        </trans-unit>
        <trans-unit id="9b962956de20b92131fe706ba67bd5e54e165fe5" translate="yes" xml:space="preserve">
          <source>utf8_to_uvuni_buf</source>
          <target state="translated">utf8_to_uvuni_buf</target>
        </trans-unit>
        <trans-unit id="4029d13c1fb28c650fa1b00e9cc3491ec43714a7" translate="yes" xml:space="preserve">
          <source>utf8n_to_uvchr</source>
          <target state="translated">utf8n_to_uvchr</target>
        </trans-unit>
        <trans-unit id="94b57ebbfa812b0d52815f40f8359413722f07ef" translate="yes" xml:space="preserve">
          <source>utf8n_to_uvchr_error</source>
          <target state="translated">utf8n_to_uvchr_error</target>
        </trans-unit>
        <trans-unit id="a479adfa7d5a20e92ed27b6198f89b0e85b4d0d2" translate="yes" xml:space="preserve">
          <source>utf8n_to_uvchr_msgs</source>
          <target state="translated">utf8n_to_uvchr_msgs</target>
        </trans-unit>
        <trans-unit id="c4259b4a365bbd7fcafb6468ba0de6847fe4300d" translate="yes" xml:space="preserve">
          <source>utf8n_to_uvuni</source>
          <target state="translated">utf8n_to_uvuni</target>
        </trans-unit>
        <trans-unit id="1817968011ad57f4fc7f6411c6afa179d20d5f52" translate="yes" xml:space="preserve">
          <source>utfebcdic.h</source>
          <target state="translated">utfebcdic.h</target>
        </trans-unit>
        <trans-unit id="ccf120ba24ab73f5ca75edfecede60e684a35e77" translate="yes" xml:space="preserve">
          <source>utility (which should be installed if you have gcc 3.0 or newer installed).</source>
          <target state="translated">ユーティリティ (gcc 3.0 以降がインストールされている場合にインストールする必要があります)。</target>
        </trans-unit>
        <trans-unit id="e41e3186138fd652f131d74e1372b713a50e4b13" translate="yes" xml:space="preserve">
          <source>utility available from the shell or from the C library. Consult your system's documentation for information on iconv.</source>
          <target state="translated">ユーティリティを使用することができます。iconvに関する情報は、システムのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4fdd7e64e9e4f34f325d3712aee75fdf123eaaa7" translate="yes" xml:space="preserve">
          <source>utility is distributed as part of the &lt;a href=&quot;Module::Starter&quot;&gt;Module::Starter&lt;/a&gt; CPAN package. It creates a directory with stubs of all the necessary files to start a new module, according to recent &quot;best practice&quot; for module development, and is invoked from the command line, thus:</source>
          <target state="translated">ユーティリティは、&lt;a href=&quot;Module::Starter&quot;&gt;Module ::&lt;/a&gt; StarterCPANパッケージの一部として配布されています。モジュール開発の最近の「ベストプラクティス」に従って、新しいモジュールを開始するために必要なすべてのファイルのスタブを含むディレクトリを作成し、コマンドラインから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b875306388033d91efeec1a88fa3e69e64258572" translate="yes" xml:space="preserve">
          <source>utility is distributed as part of the &lt;a href=&quot;http://search.cpan.org/perldoc/Module::Starter&quot;&gt;Module::Starter&lt;/a&gt; CPAN package. It creates a directory with stubs of all the necessary files to start a new module, according to recent &quot;best practice&quot; for module development, and is invoked from the command line, thus:</source>
          <target state="translated">ユーティリティは、&lt;a href=&quot;http://search.cpan.org/perldoc/Module::Starter&quot;&gt;Module :: Starter&lt;/a&gt; CPANパッケージの一部として配布されます。モジュール開発の最近の「ベストプラクティス」に従って、新しいモジュールを開始するために必要なすべてのファイルのスタブを含むディレクトリを作成し、コマンドラインから起動します。</target>
        </trans-unit>
        <trans-unit id="d1c19560c50c6028812fe75cd093528162e899fa" translate="yes" xml:space="preserve">
          <source>utility which can be used to package Perl scripts and/or Perl library directories into SIS files, which can be installed to the device. To run the sisify.pl utility, you will need to have the 'makesis' and 'uidcrc' utilities already installed. If you don't have the Win32 SDKs, you may try for example &lt;a href=&quot;http://gnupoc.sourceforge.net/&quot;&gt;http://gnupoc.sourceforge.net/&lt;/a&gt; or &lt;a href=&quot;http://symbianos.org/~andreh/&quot;&gt;http://symbianos.org/~andreh/&lt;/a&gt;.</source>
          <target state="translated">PerlスクリプトやPerlライブラリディレクトリをSISファイルにパッケージ化するために使用できるユーティリティ。デバイスにインストールできます。sisify.plユーティリティを実行するには、 'makesis'および 'uidcrc'ユーティリティがすでにインストールされている必要があります。Win32 SDKがない場合は、たとえば&lt;a href=&quot;http://gnupoc.sourceforge.net/&quot;&gt;http://gnupoc.sourceforge.net/&lt;/a&gt;または&lt;a href=&quot;http://symbianos.org/~andreh/&quot;&gt;http://symbianos.org/~andreh/を&lt;/a&gt;試すことができます。</target>
        </trans-unit>
        <trans-unit id="b5b20e9780dfec2e3ed9c87a6333e7f3f40af656" translate="yes" xml:space="preserve">
          <source>utility will look for errors in your markup.</source>
          <target state="translated">ユーティリティはマークアップのエラーを探します。</target>
        </trans-unit>
        <trans-unit id="abd2ad286bf2e0b3a412f26ebf2a2be21f7de0fc" translate="yes" xml:space="preserve">
          <source>utility.</source>
          <target state="translated">utility.</target>
        </trans-unit>
        <trans-unit id="e5b9fa572bc5bd55617cfad38a4c758f62792ceb" translate="yes" xml:space="preserve">
          <source>utility. If none of these apply then passive mode is used.</source>
          <target state="translated">ユーティリティを使用します。これらのいずれにも当てはまらない場合は、パッシブモードが使用されます。</target>
        </trans-unit>
        <trans-unit id="c7bed6d783c875c092d49c40fd8051d2fa7b3af7" translate="yes" xml:space="preserve">
          <source>utilize</source>
          <target state="translated">utilize</target>
        </trans-unit>
        <trans-unit id="14409714f17737ef57cc19222c7537577b62d475" translate="yes" xml:space="preserve">
          <source>utils/</source>
          <target state="translated">utils/</target>
        </trans-unit>
        <trans-unit id="acdaec40e375d0ed21e862c4bbd0ccd230de21bf" translate="yes" xml:space="preserve">
          <source>utils/perldoc</source>
          <target state="translated">utils/perldoc</target>
        </trans-unit>
        <trans-unit id="760a22f0d3b89382b2ae33446840987c56669270" translate="yes" xml:space="preserve">
          <source>utils/perldoc.PL</source>
          <target state="translated">utils/perldoc.PL</target>
        </trans-unit>
        <trans-unit id="07be56c9175d1e0cf47abe27bd2ea4c74d0a71b7" translate="yes" xml:space="preserve">
          <source>utime</source>
          <target state="translated">utime</target>
        </trans-unit>
        <trans-unit id="e021c739267a3c120765dfd8bbf7a3476cf90409" translate="yes" xml:space="preserve">
          <source>utime LIST</source>
          <target state="translated">時間リスト</target>
        </trans-unit>
        <trans-unit id="3677a34e80cc23f49ad5f1fae628d097e1c1e1cb" translate="yes" xml:space="preserve">
          <source>uu encoding and decoding</source>
          <target state="translated">ユーユーエンコードアンドデコード</target>
        </trans-unit>
        <trans-unit id="84cc80da77dc844b797abdbb7eac416a4e49eb70" translate="yes" xml:space="preserve">
          <source>uutardist_target</source>
          <target state="translated">uutardist_target</target>
        </trans-unit>
        <trans-unit id="e4a7f205795403d34eba5ba891e6e72bdc185ce4" translate="yes" xml:space="preserve">
          <source>uvchr_to_utf8</source>
          <target state="translated">uvchr_to_utf8</target>
        </trans-unit>
        <trans-unit id="b154db59f6f625c7f66657ffd6c042600f1ce2a8" translate="yes" xml:space="preserve">
          <source>uvchr_to_utf8_flags</source>
          <target state="translated">uvchr_to_utf8_flags</target>
        </trans-unit>
        <trans-unit id="6e302cd00a4beb637ea90ddae2c419e4a24a5240" translate="yes" xml:space="preserve">
          <source>uvchr_to_utf8_flags_msgs</source>
          <target state="translated">uvchr_to_utf8_flags_msgs</target>
        </trans-unit>
        <trans-unit id="fac3fd32d53b58ba55a9aa857787c93cfd2cd8af" translate="yes" xml:space="preserve">
          <source>uvoffuni_to_utf8_flags</source>
          <target state="translated">uvoffuni_to_utf8_flags</target>
        </trans-unit>
        <trans-unit id="031521be966aca6fa594c85e4743ca45a923f41a" translate="yes" xml:space="preserve">
          <source>uvoffuni_to_utf8_flags_msgs</source>
          <target state="translated">uvoffuni_to_utf8_flags_msgs</target>
        </trans-unit>
        <trans-unit id="7497351132834d7892103406146d88988529c371" translate="yes" xml:space="preserve">
          <source>uvuni_to_utf8</source>
          <target state="translated">uvuni_to_utf8</target>
        </trans-unit>
        <trans-unit id="17f3328aa01585eed96b5e733f1260d01b770be5" translate="yes" xml:space="preserve">
          <source>uvuni_to_utf8_flags</source>
          <target state="translated">uvuni_to_utf8_flags</target>
        </trans-unit>
        <trans-unit id="7a38d8cbd20d9932ba948efaa364bb62651d5ad4" translate="yes" xml:space="preserve">
          <source>v</source>
          <target state="translated">v</target>
        </trans-unit>
        <trans-unit id="fdfe36c7870ab1c824bee3ec0da08620a1b4b18a" translate="yes" xml:space="preserve">
          <source>v [line]</source>
          <target state="translated">v [行]</target>
        </trans-unit>
        <trans-unit id="8367359b6bf8e4ab62a2e8c4a8d369c9e055fe57" translate="yes" xml:space="preserve">
          <source>v or version</source>
          <target state="translated">ブイバージョン</target>
        </trans-unit>
        <trans-unit id="a8c4f0a3864508ce28efb920b9b2102b78da0602" translate="yes" xml:space="preserve">
          <source>v-string</source>
          <target state="translated">v-string</target>
        </trans-unit>
        <trans-unit id="361122ca0dc8560cf79ff094f6193cd4093bfbfc" translate="yes" xml:space="preserve">
          <source>v1.0.0 &amp;ndash; first public release, 2012-02-27</source>
          <target state="translated">v1.0.0 &amp;ndash;最初の公開リリース、2012-02-27</target>
        </trans-unit>
        <trans-unit id="1ff89fe452707ff11cdd66dd56c896def957dc56" translate="yes" xml:space="preserve">
          <source>v1.234.5</source>
          <target state="translated">v1.234.5</target>
        </trans-unit>
        <trans-unit id="b216231c5110f84b829aa27516a90312069b919a" translate="yes" xml:space="preserve">
          <source>v1.45 inherits from Pod::Simple as opposed to all previous versions inheriting from Pod::Parser. Do &lt;b&gt;not&lt;/b&gt; use Pod::Simple's interface when using Pod::Checker unless it is documented somewhere on this page. I repeat, DO &lt;b&gt;NOT&lt;/b&gt; USE POD::SIMPLE'S INTERFACE.</source>
          <target state="translated">v1.45は、Pod :: Parserから継承する以前のすべてのバージョンとは対照的に、Pod :: Simpleから継承します。ん&lt;b&gt;ではない&lt;/b&gt;、それはこのページのどこかに文書化されていない限り、ポッド::チェッカーを使用しているときポッド::シンプルなのインタフェースを使用しています。繰り返しますが、POD :: SIMPLE'SINTERFACEは使用し&lt;b&gt;ないでください&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="d8d7aee24dfe0953c95b730f8777dd9d65515b2c" translate="yes" xml:space="preserve">
          <source>v5.22 core Perl runs on z/OS (formerly OS/390). Theoretically it could run on the successors of OS/400 on AS/400 minicomputers as well as VM/ESA, and BS2000 for S/390 Mainframes. Such computers use EBCDIC character sets internally (usually Character Code Set ID 0037 for OS/400 and either 1047 or POSIX-BC for S/390 systems).</source>
          <target state="translated">v5.22 コアの Perl は z/OS (旧 OS/390)上で動作します。理論的には、AS/400 ミニコンピュータの OS/400 の後継機や VM/ESA、S/390 メインフレームの BS2000 上で動作します。このようなコンピュータは内部的にEBCDIC文字セットを使用します(通常、OS/400では文字コードセットID 0037、S/390システムでは1047かPOSIX-BC)。</target>
        </trans-unit>
        <trans-unit id="39f69c278f46165447f30d10acf54277aaa3d5fc" translate="yes" xml:space="preserve">
          <source>val</source>
          <target state="translated">val</target>
        </trans-unit>
        <trans-unit id="c204f11609a31497c02218b5e5a0a169c78effbe" translate="yes" xml:space="preserve">
          <source>valgrind</source>
          <target state="translated">valgrind</target>
        </trans-unit>
        <trans-unit id="53046fa987b388728c455fdf478e8c9a874dace2" translate="yes" xml:space="preserve">
          <source>valid as UTF-8. A line consisting of simply &quot;#&quot;, an e-acute, and any non-highbit byte, is sufficient to establish this file's encoding.</source>
          <target state="translated">は UTF-8 として有効です。このファイルのエンコーディングを確立するには、単に「#」、e-acute、および任意の非ハイビットバイトからなる行で十分です。</target>
        </trans-unit>
        <trans-unit id="1b2e4dda331c5bdd529decc6ff8c097010110880" translate="yes" xml:space="preserve">
          <source>valid_proto_string()</source>
          <target state="translated">valid_proto_string()</target>
        </trans-unit>
        <trans-unit id="42d3aa66690369b2a9863e9ea376a9311b638ba5" translate="yes" xml:space="preserve">
          <source>valid_utf8_to_uvchr</source>
          <target state="translated">valid_utf8_to_uvchr</target>
        </trans-unit>
        <trans-unit id="80ba00adaa1b4446cdcca5bbd9d5e101e78ac6da" translate="yes" xml:space="preserve">
          <source>valid_utf8_to_uvuni</source>
          <target state="translated">valid_utf8_to_uvuni</target>
        </trans-unit>
        <trans-unit id="d30edfc3900bec3423d8ac3183b2557d7b53579b" translate="yes" xml:space="preserve">
          <source>validate()</source>
          <target state="translated">validate()</target>
        </trans-unit>
        <trans-unit id="945019fe470b3d5648ec128b564c5d2130c504d3" translate="yes" xml:space="preserve">
          <source>validate_proto</source>
          <target state="translated">validate_proto</target>
        </trans-unit>
        <trans-unit id="f32b67c7e26342af42efabc674d441dca0a281c5" translate="yes" xml:space="preserve">
          <source>value</source>
          <target state="translated">value</target>
        </trans-unit>
        <trans-unit id="1e7e5e9fa34075181b1c3ae301720ed61601a7be" translate="yes" xml:space="preserve">
          <source>value is returned. It is up to the user to call &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; if they so desire.</source>
          <target state="translated">値が返されます。必要に応じて &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; を呼び出すのはユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="f6d7058c218bb3dae94559db1c932b42605d46a4" translate="yes" xml:space="preserve">
          <source>value is returned. It is up to the user to call &lt;code&gt;reset&lt;/code&gt; if they so desire.</source>
          <target state="translated">値が返されます。必要に応じて &lt;code&gt;reset&lt;/code&gt; を呼び出すのはユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="216685f7982133ab569ad4dfe5f678f3e1dbbd1f" translate="yes" xml:space="preserve">
          <source>value of 4. Pod processors may complain if</source>
          <target state="translated">の値が 4 の場合は、ポッドプロセッサから苦情が出る可能性があります。</target>
        </trans-unit>
        <trans-unit id="789c8a7b03ce1d1295ddf529b2afdf58a3077c30" translate="yes" xml:space="preserve">
          <source>value of the array pointed to by $AoA. If you wanted the C notion, you'd have to write &lt;code&gt;${$AoA[$i]}&lt;/code&gt; to force the &lt;code&gt;$AoA[$i]&lt;/code&gt; to get evaluated first before the leading &lt;code&gt;$&lt;/code&gt; dereferencer.</source>
          <target state="translated">$ AoAが指す配列の値。Cの概念が必要な場合は、 &lt;code&gt;${$AoA[$i]}&lt;/code&gt; と記述して、 &lt;code&gt;$AoA[$i]&lt;/code&gt; が最初の &lt;code&gt;$&lt;/code&gt; デリファレンスより先に評価されるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="08668798148afad07d631910b71e55873b2010e9" translate="yes" xml:space="preserve">
          <source>value of the verb pattern, if the verb was involved in the failure of the match. If the</source>
          <target state="translated">の値を使用して、その動詞が一致の失敗に関与していた場合は、その動詞パターンの の場合には</target>
        </trans-unit>
        <trans-unit id="fe44ac8c6973b5b0020ed98076f8432b17459eec" translate="yes" xml:space="preserve">
          <source>value which forms part of the method names described in &lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;&quot;Package-specific Attribute Handling&quot;&lt;/a&gt; below.</source>
          <target state="translated">以下の&lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;「パッケージ固有の属性処理」で&lt;/a&gt;説明されているメソッド名の一部を形成する値。</target>
        </trans-unit>
        <trans-unit id="b8f2b9679159768f9feb1485f4697501baee27a2" translate="yes" xml:space="preserve">
          <source>value which forms part of the method names described in &lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;Package-specific Attribute Handling&lt;/a&gt; below.</source>
          <target state="translated">以下の&lt;a href=&quot;#Package-specific-Attribute-Handling&quot;&gt;パッケージ固有の属性処理で&lt;/a&gt;説明されているメソッド名の一部を形成する値。</target>
        </trans-unit>
        <trans-unit id="d8ad9fad6207027296ab17875f3071f0a7723f9b" translate="yes" xml:space="preserve">
          <source>value, with</source>
          <target state="translated">の値で</target>
        </trans-unit>
        <trans-unit id="345c822266c73d960e7e049d7d44d3fac7c7ec19" translate="yes" xml:space="preserve">
          <source>value.</source>
          <target state="translated">value.</target>
        </trans-unit>
        <trans-unit id="1de6ed8b204380a369710406f1cf40db9ea3121e" translate="yes" xml:space="preserve">
          <source>value. If the user does not call either of these methods then the result will be a reference to a &lt;code&gt;Net::FTP::dataconn&lt;/code&gt; based object.</source>
          <target state="translated">値。ユーザーがこれらのメソッドのいずれも呼び出さない場合、結果は &lt;code&gt;Net::FTP::dataconn&lt;/code&gt; ベースのオブジェクトへの参照になります。</target>
        </trans-unit>
        <trans-unit id="44415ffb02a62884cecd489fafaf5338dd30ca7a" translate="yes" xml:space="preserve">
          <source>value. If you want to see if the array is empty, just use &lt;code&gt;if (@array) { # not empty }&lt;/code&gt; for example.</source>
          <target state="translated">値。配列が空かどうかを確認する場合は、たとえば &lt;code&gt;if (@array) { # not empty }&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="417801383c26ee78fc40ea379e8eda01aa338144" translate="yes" xml:space="preserve">
          <source>value:</source>
          <target state="translated">value:</target>
        </trans-unit>
        <trans-unit id="048b0cb1b94379c74e7e8c8ede496e3edbea3386" translate="yes" xml:space="preserve">
          <source>values</source>
          <target state="translated">values</target>
        </trans-unit>
        <trans-unit id="17a7c4c339f3492b8acb953db7732092bf51412a" translate="yes" xml:space="preserve">
          <source>values ARRAY</source>
          <target state="translated">値配列</target>
        </trans-unit>
        <trans-unit id="2634c50fe8c56acb708defe572a6f66bd0ae2e7a" translate="yes" xml:space="preserve">
          <source>values EXPR</source>
          <target state="translated">値 EXPR</target>
        </trans-unit>
        <trans-unit id="be8bd433d6363b535b0f1f125f2785bdc4c730c2" translate="yes" xml:space="preserve">
          <source>values HASH</source>
          <target state="translated">値ハッシュ</target>
        </trans-unit>
        <trans-unit id="3ea57ca13e694603f7108bdb09b7bf05d3dbe095" translate="yes" xml:space="preserve">
          <source>values between 0 and 255.</source>
          <target state="translated">0 から 255 までの値を指定します。</target>
        </trans-unit>
        <trans-unit id="f4cc0505dbca3944a2927a21fd999a949878da59" translate="yes" xml:space="preserve">
          <source>values between 0 and 255. Similarly, the recognized background colors are &lt;code&gt;on_r&lt;i&gt;RRR&lt;/i&gt;g&lt;i&gt;GGG&lt;/i&gt;b&lt;i&gt;BBB&lt;/i&gt;&lt;/code&gt; for</source>
          <target state="translated">0〜255の値。同様に、認識される背景色は &lt;code&gt;on_r&lt;i&gt;RRR&lt;/i&gt;g&lt;i&gt;GGG&lt;/i&gt;b&lt;i&gt;BBB&lt;/i&gt;&lt;/code&gt; for</target>
        </trans-unit>
        <trans-unit id="52427f1ebccdb4fcea47bc5d0e5145b7b892e93d" translate="yes" xml:space="preserve">
          <source>values from 0 to 5, such as &lt;code&gt;rgb000&lt;/code&gt; or &lt;code&gt;rgb515&lt;/code&gt; . Similarly, the recognized background colors are:</source>
          <target state="translated">&lt;code&gt;rgb000&lt;/code&gt; や &lt;code&gt;rgb515&lt;/code&gt; など、0〜5の値。同様に、認識される背景色は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1f1f0dc1fce3a05d4540c3e7aab441e272a120c1" translate="yes" xml:space="preserve">
          <source>values from 0 to 5, such as &lt;code&gt;rgb000&lt;/code&gt; or &lt;code&gt;rgb515&lt;/code&gt;. Similarly, the recognized background colors are:</source>
          <target state="translated">&lt;code&gt;rgb000&lt;/code&gt; や &lt;code&gt;rgb515&lt;/code&gt; などの0から5までの値。同様に、認識される背景色は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e74a3ebadeba9abb6c66ee5f8ffd1d486ee6fcb8" translate="yes" xml:space="preserve">
          <source>values from 0 to 5.</source>
          <target state="translated">の値を 0 から 5 までの範囲で指定することができます。</target>
        </trans-unit>
        <trans-unit id="e6ad9de07df6ee716656600f984ea5e44acf9199" translate="yes" xml:space="preserve">
          <source>values may already be available through the POSIX, Errno, or Fcntl modules.) The &lt;b&gt;pl2pm&lt;/b&gt; file in the distribution may help in your conversion, but it's just a mechanical process and therefore far from bulletproof.</source>
          <target state="translated">値はすでにPOSIX、Errno、またはFcntlモジュールを介して利用できる場合があります。）ディストリビューションの&lt;b&gt;pl2pm&lt;/b&gt;ファイルは変換に役立つ場合がありますが、それは単なる機械的なプロセスであるため、&lt;b&gt;完全&lt;/b&gt;なものではありません。</target>
        </trans-unit>
        <trans-unit id="b6d212092cfb3c4de0fc9e126c8856174b98ea6d" translate="yes" xml:space="preserve">
          <source>values of variables, open file handles) are not affected by calling &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">変数の値、開いているファイルのハンドルなど）は、 &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; を呼び出しても影響を受けません。</target>
        </trans-unit>
        <trans-unit id="660e2ed06f78faef8b5e3bf402f6557cda07d382" translate="yes" xml:space="preserve">
          <source>values of variables, open file handles) are not affected by calling &lt;code&gt;dump&lt;/code&gt;.</source>
          <target state="translated">変数の値、開いているファイルハンドル）は、 &lt;code&gt;dump&lt;/code&gt; を呼び出しても影響を受けません。</target>
        </trans-unit>
        <trans-unit id="c78a54d54f417f166b040fd1193f989fbac7669b" translate="yes" xml:space="preserve">
          <source>vaproto.U</source>
          <target state="translated">vaproto.U</target>
        </trans-unit>
        <trans-unit id="e5b4e786e382d03c28e9edfab2d8149378ae69df" translate="yes" xml:space="preserve">
          <source>var</source>
          <target state="translated">var</target>
        </trans-unit>
        <trans-unit id="442355f6097724b9f300211ae8b56c9215274278" translate="yes" xml:space="preserve">
          <source>varargs.h</source>
          <target state="translated">varargs.h</target>
        </trans-unit>
        <trans-unit id="32c263408bb93f559077c6e179bd9ba556508a09" translate="yes" xml:space="preserve">
          <source>varglob (VARNAME)</source>
          <target state="translated">varglob (VARNAME)</target>
        </trans-unit>
        <trans-unit id="b46d0172433dd6895dac7544b9dacbb87b361e9f" translate="yes" xml:space="preserve">
          <source>variable</source>
          <target state="translated">variable</target>
        </trans-unit>
        <trans-unit id="6d4be5796ee90e66e89724d565fcf04fffb0caee" translate="yes" xml:space="preserve">
          <source>variable interpolation</source>
          <target state="translated">可変補間</target>
        </trans-unit>
        <trans-unit id="f28cdc93712b217f7e1a7f8c732549e7fca12478" translate="yes" xml:space="preserve">
          <source>variable. If found, and the value does not begin with a slash, and the terminal type name is the same as the environment string</source>
          <target state="translated">変数を使用してください。見つかった場合で、値がスラッシュで始まらず、ターミナルの型名が環境文字列と同じであれば</target>
        </trans-unit>
        <trans-unit id="73be3da84c74dd524e9174ed859ebd8fbe0ecb3e" translate="yes" xml:space="preserve">
          <source>variables with) the compartment's namespace and only that data will be visible to code evaluated in the compartment.</source>
          <target state="translated">変数を使用して)コンパートメントの名前空間を指定し、そのデータのみがコンパートメントで評価されたコードに表示されます。</target>
        </trans-unit>
        <trans-unit id="2cdbd8867248aec3e255c4edd9177abb2d97c96f" translate="yes" xml:space="preserve">
          <source>variadic</source>
          <target state="translated">variadic</target>
        </trans-unit>
        <trans-unit id="6a59ea152047ab67df8e6fb2434c953c72e6647f" translate="yes" xml:space="preserve">
          <source>variant_byte_number</source>
          <target state="translated">variant_byte_number</target>
        </trans-unit>
        <trans-unit id="c127c64f4c59881b1a6741d4d0e16d9db5b90da9" translate="yes" xml:space="preserve">
          <source>variant_under_utf8_count</source>
          <target state="translated">variant_under_utf8_count</target>
        </trans-unit>
        <trans-unit id="e0fc50595f67cf73357568141754704ff19965eb" translate="yes" xml:space="preserve">
          <source>varname</source>
          <target state="translated">varname</target>
        </trans-unit>
        <trans-unit id="328b2913d40a4414bbacabb3a360dbd897edd419" translate="yes" xml:space="preserve">
          <source>vars</source>
          <target state="translated">vars</target>
        </trans-unit>
        <trans-unit id="d0738423627650c10c37e4c0cb07def0732c0229" translate="yes" xml:space="preserve">
          <source>vars - Perl pragma to predeclare global variable names</source>
          <target state="translated">vars-グローバル変数名を宣言するための Perl プラグマ</target>
        </trans-unit>
        <trans-unit id="3fda85e28248463329b5095a7e36c028b3156227" translate="yes" xml:space="preserve">
          <source>vary in size. The alignment constraint of the structure can be greater than any of its elements. [And if you think that this doesn't affect anything common, dismember the next cellphone that you see. Many have ARM cores, and the ARM structure rules make &lt;code&gt;sizeof (foo_t)&lt;/code&gt; == 4]</source>
          <target state="translated">サイズが異なります。構造の配置制約は、その要素のいずれよりも大きくなる可能性があります。[そして、これが一般的なものに影響を与えないと思われる場合は、次に表示される携帯電話を取り外してください。多くはARMコアを備えており、ARM構造規則により &lt;code&gt;sizeof (foo_t)&lt;/code&gt; == 4]になります。</target>
        </trans-unit>
        <trans-unit id="bc997f6b532a64f46192e63cb27d866b3f751883" translate="yes" xml:space="preserve">
          <source>vcmp</source>
          <target state="translated">vcmp</target>
        </trans-unit>
        <trans-unit id="9c0ea36b72f7347fbc37fa7e3a8c6ebdb2e6c847" translate="yes" xml:space="preserve">
          <source>vcroak</source>
          <target state="translated">vcroak</target>
        </trans-unit>
        <trans-unit id="48b6af594a6f1884b8e83ac94121f4b618d4e6cc" translate="yes" xml:space="preserve">
          <source>vdeb</source>
          <target state="translated">vdeb</target>
        </trans-unit>
        <trans-unit id="b803e7ca5c714dbd85bf00d511fbc99a77690ad2" translate="yes" xml:space="preserve">
          <source>vec</source>
          <target state="translated">vec</target>
        </trans-unit>
        <trans-unit id="c54a18ac21d0acf2be7f8a4af68b6de9a68db6ff" translate="yes" xml:space="preserve">
          <source>vec EXPR,OFFSET,BITS</source>
          <target state="translated">vec EXPR,OFFSET,BITS</target>
        </trans-unit>
        <trans-unit id="027c1146b1b8f9274e5a4cfd7a959e328a326cd6" translate="yes" xml:space="preserve">
          <source>vector</source>
          <target state="translated">vector</target>
        </trans-unit>
        <trans-unit id="eaf07e13bf74ea47db6f4ba0e7cbfa9a921a7765" translate="yes" xml:space="preserve">
          <source>vector argument not supported with alpha versions</source>
          <target state="translated">ベクトル引数はアルファ版ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="32af47b87ac2b19a971faaedbed3373dcd83c6e8" translate="yes" xml:space="preserve">
          <source>vector flag</source>
          <target state="translated">ベクトルフラグ</target>
        </trans-unit>
        <trans-unit id="f997c58732c07191b9cf44ba3c5fdd710cc19a22" translate="yes" xml:space="preserve">
          <source>vendorarch.U</source>
          <target state="translated">vendorarch.U</target>
        </trans-unit>
        <trans-unit id="78c0f01568b26ab7021a574fad5f974198aad6d0" translate="yes" xml:space="preserve">
          <source>vendorbin.U</source>
          <target state="translated">vendorbin.U</target>
        </trans-unit>
        <trans-unit id="660495819236779e293a0a32c3609f3b6829ad8a" translate="yes" xml:space="preserve">
          <source>vendorhtml1dir.U</source>
          <target state="translated">vendorhtml1dir.U</target>
        </trans-unit>
        <trans-unit id="ba034d33799b6d494964ade71fe262b57e78da69" translate="yes" xml:space="preserve">
          <source>vendorhtml3dir.U</source>
          <target state="translated">vendorhtml3dir.U</target>
        </trans-unit>
        <trans-unit id="5c5f94ad3d73d98afb7e36c994b2d58e93b157c9" translate="yes" xml:space="preserve">
          <source>vendorlib.U</source>
          <target state="translated">vendorlib.U</target>
        </trans-unit>
        <trans-unit id="2284692bf04e52a99af83b0173dbfd7bb5474851" translate="yes" xml:space="preserve">
          <source>vendorman1dir.U</source>
          <target state="translated">vendorman1dir.U</target>
        </trans-unit>
        <trans-unit id="0bb32aac5c75643dd8a475440312246f61ee79e2" translate="yes" xml:space="preserve">
          <source>vendorman3dir.U</source>
          <target state="translated">vendorman3dir.U</target>
        </trans-unit>
        <trans-unit id="105d52e11b963cf884747461ead872a0d154eae4" translate="yes" xml:space="preserve">
          <source>vendorprefix.U</source>
          <target state="translated">vendorprefix.U</target>
        </trans-unit>
        <trans-unit id="e5ff5428b3a391d0a31fc7b9d32363c3703413d8" translate="yes" xml:space="preserve">
          <source>vendorscript.U</source>
          <target state="translated">vendorscript.U</target>
        </trans-unit>
        <trans-unit id="5e0b8aa15aad848de36cf3fd23d80803845b78d5" translate="yes" xml:space="preserve">
          <source>ver</source>
          <target state="translated">ver</target>
        </trans-unit>
        <trans-unit id="3a4dc0c486f7ec2c6e9ab752e3ce6d8bf47f6d1c" translate="yes" xml:space="preserve">
          <source>verbatim paragraphs, but</source>
          <target state="translated">逐語的段落</target>
        </trans-unit>
        <trans-unit id="3f73a838273f8b6a5792b9b4f27d36e76a0078b9" translate="yes" xml:space="preserve">
          <source>verbose</source>
          <target state="translated">verbose</target>
        </trans-unit>
        <trans-unit id="e1f2aa2d0b586c6bed93a4a3d544b2c2dc1827b9" translate="yes" xml:space="preserve">
          <source>verbose =&amp;gt; $bool</source>
          <target state="translated">詳細=&amp;gt; $ bool</target>
        </trans-unit>
        <trans-unit id="6699df163a7658fea9b25e953658e43c10171cc8" translate="yes" xml:space="preserve">
          <source>verify ( ADDRESS )</source>
          <target state="translated">ベリファイ</target>
        </trans-unit>
        <trans-unit id="c1304f7ac1bfbbd2d8339d21fefac7161a487962" translate="yes" xml:space="preserve">
          <source>verify_opset (OPSET, ...)</source>
          <target state="translated">ベリファイオプセット (OPSET,....)</target>
        </trans-unit>
        <trans-unit id="c692273deb2772da307ffe37041fef77bf4baa97" translate="yes" xml:space="preserve">
          <source>version</source>
          <target state="translated">version</target>
        </trans-unit>
        <trans-unit id="1e9744dd208039bb003db329ab004f53031ec395" translate="yes" xml:space="preserve">
          <source>version - Perl extension for Version Objects</source>
          <target state="translated">version-バージョンオブジェクト用の Perl 拡張モジュール</target>
        </trans-unit>
        <trans-unit id="ecd4d5aaaaf8faae2312b63e6b30da46078d7f8e" translate="yes" xml:space="preserve">
          <source>version 0.018</source>
          <target state="translated">バージョン0.018</target>
        </trans-unit>
        <trans-unit id="c1a7754dc900fc69e091dc725ff679d6345812e8" translate="yes" xml:space="preserve">
          <source>version 0.020</source>
          <target state="translated">バージョン0.020</target>
        </trans-unit>
        <trans-unit id="b08a78e4d8553f237c2b75a537d874a5349598e8" translate="yes" xml:space="preserve">
          <source>version 0.076</source>
          <target state="translated">バージョン 0.076</target>
        </trans-unit>
        <trans-unit id="d3b94753b152e0687bf16e0e66bde6c46129e227" translate="yes" xml:space="preserve">
          <source>version 0.2304</source>
          <target state="translated">バージョン0.2304</target>
        </trans-unit>
        <trans-unit id="59e47f870db61f53930f6bfb7196acbc325a0fb0" translate="yes" xml:space="preserve">
          <source>version 0.2309</source>
          <target state="translated">バージョン0.2309</target>
        </trans-unit>
        <trans-unit id="da78c3388782a77d1dc3ff066b5116f55fcf16b4" translate="yes" xml:space="preserve">
          <source>version 1.000037</source>
          <target state="translated">バージョン1.000037</target>
        </trans-unit>
        <trans-unit id="a69a8d293137ba6e9e14606b76b794ad5ba37abd" translate="yes" xml:space="preserve">
          <source>version 1.010</source>
          <target state="translated">バージョン1.010</target>
        </trans-unit>
        <trans-unit id="f2aa6f8fde3c89137d1a02f4303d58612486697f" translate="yes" xml:space="preserve">
          <source>version 1.28</source>
          <target state="translated">バージョン1.28</target>
        </trans-unit>
        <trans-unit id="10ac6ea1ff9c002c30c590cc6d63a98d39a0b85d" translate="yes" xml:space="preserve">
          <source>version 1.4414</source>
          <target state="translated">バージョン1.4414</target>
        </trans-unit>
        <trans-unit id="76c801534aba92a44e1c434c81eb16f53ac7ddba" translate="yes" xml:space="preserve">
          <source>version 1.70</source>
          <target state="translated">バージョン1.70</target>
        </trans-unit>
        <trans-unit id="0b8a7ab887f39bcf6eb205560fb225202ea22652" translate="yes" xml:space="preserve">
          <source>version 1.72</source>
          <target state="translated">バージョン1.72</target>
        </trans-unit>
        <trans-unit id="7edea1f7390c55fc9b6c85c7eaff41c8aa7ac463" translate="yes" xml:space="preserve">
          <source>version 2.140</source>
          <target state="translated">バージョン2.140</target>
        </trans-unit>
        <trans-unit id="e84c3069d709d377fe9cdad33583ef23a7efb092" translate="yes" xml:space="preserve">
          <source>version 2.150010</source>
          <target state="translated">バージョン2.150010</target>
        </trans-unit>
        <trans-unit id="50dd6edfb9d761a98efb572f5834520db1b98413" translate="yes" xml:space="preserve">
          <source>version 3.1, this means configuring with &lt;code&gt;-Doptimize=-g3&lt;/code&gt; . Other compilers might use a different switch (if they support debugging macros at all).</source>
          <target state="translated">バージョン3.1では、これは &lt;code&gt;-Doptimize=-g3&lt;/code&gt; で構成することを意味します。他のコンパイラは別のスイッチを使用する場合があります（デバッグマクロをサポートしている場合）。</target>
        </trans-unit>
        <trans-unit id="42791378eb5f03cd7efe5a5c1043d47ae5bddd22" translate="yes" xml:space="preserve">
          <source>version 3.1, this means configuring with &lt;code&gt;-Doptimize=-g3&lt;/code&gt;. Other compilers might use a different switch (if they support debugging macros at all).</source>
          <target state="translated">バージョン3.1、これは &lt;code&gt;-Doptimize=-g3&lt;/code&gt; で構成することを意味します。他のコンパイラは別のスイッチを使用する場合があります（マクロのデバッグをサポートしている場合）。</target>
        </trans-unit>
        <trans-unit id="6d8e3493b0cc6a16d5dae9adf9f2dd0db64b3340" translate="yes" xml:space="preserve">
          <source>version 5.021009</source>
          <target state="translated">バージョン5.021009</target>
        </trans-unit>
        <trans-unit id="fab7e2e6c036b7a9e0181e06bb95905613e3c280" translate="yes" xml:space="preserve">
          <source>version 5.20200523</source>
          <target state="translated">バージョン5.2020000523</target>
        </trans-unit>
        <trans-unit id="4c9f1f2300bb8f65cae0f07d8c5462081befc31c" translate="yes" xml:space="preserve">
          <source>version &lt;b&gt;(required)&lt;/b&gt;</source>
          <target state="translated">バージョン&lt;b&gt;（必須）&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="44d2f7e0b9f8b8f230b98d6215f70ce9e9142a5e" translate="yes" xml:space="preserve">
          <source>version mismatch</source>
          <target state="translated">バージョン不一致</target>
        </trans-unit>
        <trans-unit id="e6d98fbd6e1f722af1a7187d887c11be3eebc59e" translate="yes" xml:space="preserve">
          <source>version number to standard output, then exits.</source>
          <target state="translated">バージョン番号を標準出力に変換して終了します。</target>
        </trans-unit>
        <trans-unit id="753706ebef33a950942786467c39030e3338394b" translate="yes" xml:space="preserve">
          <source>version of documentation (&lt;b&gt;very&lt;/b&gt; recommended) outside of OS/2, one needs an IBM's reader (may be available on IBM ftp sites (?) (URL anyone?)) or shipped with PC DOS 7.0 and IBM's Visual Age C++ 3.5.</source>
          <target state="translated">OS / 2以外のバージョンのドキュメント（&lt;b&gt;非常に&lt;/b&gt;推奨）、IBMのリーダーが必要（IBM ftpサイト（？）（URLは誰か？）で入手可能）、またはPC DOS 7.0とIBMのVisual Age C ++ 3.5に同梱。</target>
        </trans-unit>
        <trans-unit id="8debcc6e279c738f85bcad06098d11cd2de6baac" translate="yes" xml:space="preserve">
          <source>version of the callback with the same args, or if the f is invalid, set errno to EBADF and return</source>
          <target state="translated">のバージョンのコールバックを同じ args で実行するか、f が無効な場合は errno を EBADF に設定して</target>
        </trans-unit>
        <trans-unit id="da458f9f51eff82b9638d6edc4d1ce471a6ba279" translate="yes" xml:space="preserve">
          <source>version of the callback with the same args, or if the f is invalid, set errno to EBADF.</source>
          <target state="translated">のバージョンのコールバックを同じ args で実行するか、f が無効な場合は errno を EBADF に設定します。</target>
        </trans-unit>
        <trans-unit id="a2eb90561fd99e3e214231b4376190cf697028ad" translate="yes" xml:space="preserve">
          <source>version($package)</source>
          <target state="translated">version($package)</target>
        </trans-unit>
        <trans-unit id="487013207ed7c3cb3a7f74a3b17b3e253c524781" translate="yes" xml:space="preserve">
          <source>version()</source>
          <target state="translated">version()</target>
        </trans-unit>
        <trans-unit id="5a39b5188a546cfb958abc453eeb19b2bec53bfa" translate="yes" xml:space="preserve">
          <source>version.pm provides an overloaded version object that is designed to both encapsulate the author's intended $VERSION assignment as well as make it completely natural to use those objects as if they were numbers (e.g. for comparisons). To do this, a version object contains both the original representation as typed by the author, as well as a parsed representation to ease comparisons. Version objects employ &lt;a href=&quot;overload&quot;&gt;overload&lt;/a&gt; methods to simplify code that needs to compare, print, etc the objects.</source>
          <target state="translated">version.pmは、作成者が意図した$ VERSION割り当てをカプセル化するだけでなく、それらのオブジェクトを数値であるかのように使用することを完全に自然にするように設計されたオーバーロードバージョンオブジェクトを提供します（比較など）。これを行うために、バージョンオブジェクトには、作成者が入力した元の表現と、比較を容易にするための解析された表現の両方が含まれています。バージョンオブジェクトは、&lt;a href=&quot;overload&quot;&gt;オーバーロード&lt;/a&gt;メソッドを使用して、オブジェクトの比較、印刷などを行う必要のあるコードを簡素化します。</target>
        </trans-unit>
        <trans-unit id="5d188558a424efbc4d8356b4ed5f1c9c2fdba669" translate="yes" xml:space="preserve">
          <source>version.pod</source>
          <target state="translated">version.pod</target>
        </trans-unit>
        <trans-unit id="89ea6fd5613838ed30c0baa85610d353411b9790" translate="yes" xml:space="preserve">
          <source>version/</source>
          <target state="translated">version/</target>
        </trans-unit>
        <trans-unit id="636593de67e783331b57ae2dba0e1181ac91cb43" translate="yes" xml:space="preserve">
          <source>version/archname/</source>
          <target state="translated">version/archname/</target>
        </trans-unit>
        <trans-unit id="43ec70e6e8036e0c5df8fc98d8beebd78c67da9d" translate="yes" xml:space="preserve">
          <source>version::Internals</source>
          <target state="translated">version::Internals</target>
        </trans-unit>
        <trans-unit id="5479ded628d1ae4c01c475d406613219540bdb82" translate="yes" xml:space="preserve">
          <source>version::Internals - Perl extension for Version Objects</source>
          <target state="translated">version::Internals-バージョンオブジェクト用の Perl 拡張モジュール</target>
        </trans-unit>
        <trans-unit id="377eac344dfb7b06bffecbd751ad37489a5b0895" translate="yes" xml:space="preserve">
          <source>version_timeout</source>
          <target state="translated">version_timeout</target>
        </trans-unit>
        <trans-unit id="278658a67f306172b28c147dd5c2b59021a8cb9c" translate="yes" xml:space="preserve">
          <source>versiononly.U</source>
          <target state="translated">versiononly.U</target>
        </trans-unit>
        <trans-unit id="95280caf11d86c580985b1777a2534b60278693b" translate="yes" xml:space="preserve">
          <source>versus/csh.whynot</source>
          <target state="translated">versus/csh.whynot</target>
        </trans-unit>
        <trans-unit id="e74295bfc2ed0b52d40073e8ebad555100df1380" translate="yes" xml:space="preserve">
          <source>very</source>
          <target state="translated">very</target>
        </trans-unit>
        <trans-unit id="f565e1178fde22502d0199216c613a7dbe288927" translate="yes" xml:space="preserve">
          <source>very costly time</source>
          <target state="translated">莫大な時間がかかる</target>
        </trans-unit>
        <trans-unit id="81cacac029430830dfca23f87b705db6949c1ea0" translate="yes" xml:space="preserve">
          <source>very same place</source>
          <target state="translated">同所</target>
        </trans-unit>
        <trans-unit id="f2e6aa26ddeffa0689780c36cd916b4d3bb69f77" translate="yes" xml:space="preserve">
          <source>very simple</source>
          <target state="translated">簡明</target>
        </trans-unit>
        <trans-unit id="d8af93441dc65b7bd4c325af25a2ac853fc68bd7" translate="yes" xml:space="preserve">
          <source>veryCompact</source>
          <target state="translated">veryCompact</target>
        </trans-unit>
        <trans-unit id="5e003e428f0ffe94849ebe99e98b3f1cfe632d4e" translate="yes" xml:space="preserve">
          <source>vfc</source>
          <target state="translated">vfc</target>
        </trans-unit>
        <trans-unit id="efbea1089258378284b4c64dc60908c3c6b4f3b3" translate="yes" xml:space="preserve">
          <source>vfork.h</source>
          <target state="translated">vfork.h</target>
        </trans-unit>
        <trans-unit id="2e180e22878b4d017bbc7eff0849c396506053ca" translate="yes" xml:space="preserve">
          <source>vform</source>
          <target state="translated">vform</target>
        </trans-unit>
        <trans-unit id="833da188871dde4c49e08271ff3deff524b7992c" translate="yes" xml:space="preserve">
          <source>vi</source>
          <target state="translated">vi</target>
        </trans-unit>
        <trans-unit id="a19e070e30616772d5e5bccf22dd825266237820" translate="yes" xml:space="preserve">
          <source>via</source>
          <target state="translated">via</target>
        </trans-unit>
        <trans-unit id="3b741f8124ff9a5cff40f1444836353cc05d2208" translate="yes" xml:space="preserve">
          <source>via &lt;code&gt;sh.exe&lt;/code&gt; via &lt;code&gt;perl.exe&lt;/code&gt; , but this is a price to pay if you want to use non-conforming program.</source>
          <target state="translated">経由 &lt;code&gt;sh.exe&lt;/code&gt; 経由 &lt;code&gt;perl.exe&lt;/code&gt; に、これはあなたが非準拠のプログラムを使用したい場合は支払う価格です。</target>
        </trans-unit>
        <trans-unit id="ce2c8ce18e7dfba0ed5d7cfa65c912e8674eff07" translate="yes" xml:space="preserve">
          <source>via &lt;code&gt;sh.exe&lt;/code&gt; via &lt;code&gt;perl.exe&lt;/code&gt;, but this is a price to pay if you want to use non-conforming program.</source>
          <target state="translated">経由 &lt;code&gt;sh.exe&lt;/code&gt; 経由 &lt;code&gt;perl.exe&lt;/code&gt; に、これはあなたが非準拠のプログラムを使用したい場合は支払う価格です。</target>
        </trans-unit>
        <trans-unit id="3b68c8b6949fa7692f33f6e0bbc33b71066897e0" translate="yes" xml:space="preserve">
          <source>via pointers</source>
          <target state="translated">ポインターを介して</target>
        </trans-unit>
        <trans-unit id="65f7d47d7029da85cdba5bc94831dbaa426ce6e5" translate="yes" xml:space="preserve">
          <source>via shell</source>
          <target state="translated">シェル経由</target>
        </trans-unit>
        <trans-unit id="f1e73a24ed2cd61923e64ac891a0cf0355e98da1" translate="yes" xml:space="preserve">
          <source>vianame() normally returns an ordinal code point, but when the input name is of the form &lt;code&gt;U+...&lt;/code&gt; , it returns a chr instead. In this case, if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; is in effect and the character won't fit into a byte, it returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and raises a warning.</source>
          <target state="translated">vianame（）は通常、序数のコードポイントを返しますが、入力名が &lt;code&gt;U+...&lt;/code&gt; の形式の場合、代わりにchrを返します。この場合、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; が有効で、文字がバイトに収まらない場合、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返し、警告を出します。</target>
        </trans-unit>
        <trans-unit id="7f82a459843874024ac4b37982919794bff237ca" translate="yes" xml:space="preserve">
          <source>vianame() normally returns an ordinal code point, but when the input name is of the form &lt;code&gt;U+...&lt;/code&gt;, it returns a chr instead. In this case, if &lt;code&gt;use bytes&lt;/code&gt; is in effect and the character won't fit into a byte, it returns &lt;code&gt;undef&lt;/code&gt; and raises a warning.</source>
          <target state="translated">vianame（）は通常、序数のコードポイントを返しますが、入力名が &lt;code&gt;U+...&lt;/code&gt; の形式の場合、代わりにchrを返します。この場合、 &lt;code&gt;use bytes&lt;/code&gt; が有効で、文字がバイトに収まらない場合、 &lt;code&gt;undef&lt;/code&gt; を返し、警告を発します。</target>
        </trans-unit>
        <trans-unit id="857a269ccef5d7fbbb98d9ddef77bc0b5d9701a9" translate="yes" xml:space="preserve">
          <source>vice versa</source>
          <target state="translated">その逆</target>
        </trans-unit>
        <trans-unit id="af84d91fde168566c7dc18f3121ea2fbe651af1f" translate="yes" xml:space="preserve">
          <source>virtual</source>
          <target state="translated">virtual</target>
        </trans-unit>
        <trans-unit id="273d3211f66d3ed5bfd77d7571871ddef64f03b6" translate="yes" xml:space="preserve">
          <source>virtual time</source>
          <target state="translated">かそうじかん</target>
        </trans-unit>
        <trans-unit id="67d9a13c0ea811cb661b315208b763f672d69dda" translate="yes" xml:space="preserve">
          <source>visiPerl+</source>
          <target state="translated">visiPerl+</target>
        </trans-unit>
        <trans-unit id="3d8e7c1b9583beb6eeb6594c0d15855e988c4de7" translate="yes" xml:space="preserve">
          <source>vivify_defelem</source>
          <target state="translated">vivify_defelem</target>
        </trans-unit>
        <trans-unit id="94c1e40b04e0668779ca52fe50c9952f9764b18a" translate="yes" xml:space="preserve">
          <source>vivify_ref</source>
          <target state="translated">vivify_ref</target>
        </trans-unit>
        <trans-unit id="f5f3472b722bd709cadddc4ee58cc01eaa2e31e3" translate="yes" xml:space="preserve">
          <source>vload_module</source>
          <target state="translated">vload_module</target>
        </trans-unit>
        <trans-unit id="3b093d0dc021300d0284d51800e7d9193a683f8c" translate="yes" xml:space="preserve">
          <source>vmess</source>
          <target state="translated">vmess</target>
        </trans-unit>
        <trans-unit id="fd9d67fe1b466b2dd61a9d25c1346a7e24941513" translate="yes" xml:space="preserve">
          <source>vms/</source>
          <target state="translated">vms/</target>
        </trans-unit>
        <trans-unit id="32bf68c9b1bb340dd396abb1c86ec82840d8fd5d" translate="yes" xml:space="preserve">
          <source>vmsify</source>
          <target state="translated">vmsify</target>
        </trans-unit>
        <trans-unit id="92e911c38db62b637631e5e6d4e2f54b71f1b1ec" translate="yes" xml:space="preserve">
          <source>vmsish</source>
          <target state="translated">vmsish</target>
        </trans-unit>
        <trans-unit id="b6f4b16934c4d0ae88fbb45f248668506c1e515a" translate="yes" xml:space="preserve">
          <source>vmsish - Perl pragma to control VMS-specific language features</source>
          <target state="translated">vmsish-VMS 固有の言語機能を制御するための Perl プラグマ</target>
        </trans-unit>
        <trans-unit id="840c1e98831f785b63714fc8cde7dc009f605556" translate="yes" xml:space="preserve">
          <source>vmsopen</source>
          <target state="translated">vmsopen</target>
        </trans-unit>
        <trans-unit id="3c7926b46a4368d08f21a3be76813bc8cd9a7f9c" translate="yes" xml:space="preserve">
          <source>vmspath</source>
          <target state="translated">vmspath</target>
        </trans-unit>
        <trans-unit id="47c9b6c34c34bb84a495fafd2ac449b137a21fcf" translate="yes" xml:space="preserve">
          <source>vmsperl list, vmsperl-subscribe@perl.org</source>
          <target state="translated">vmsperl リスト、vmsperl-subscribe@perl.org</target>
        </trans-unit>
        <trans-unit id="43e59f877b6e30149c0ab30290dad796aad04379" translate="yes" xml:space="preserve">
          <source>vmsperl on the web, &lt;a href=&quot;http://www.sidhe.org/vmsperl/index.html&quot;&gt;http://www.sidhe.org/vmsperl/index.html&lt;/a&gt;</source>
          <target state="translated">vmsperl on the web、&lt;a href=&quot;http://www.sidhe.org/vmsperl/index.html&quot;&gt;http：&lt;/a&gt; //www.sidhe.org/vmsperl/index.html</target>
        </trans-unit>
        <trans-unit id="90bfc416799787af4c10273022a61e4d2b453591" translate="yes" xml:space="preserve">
          <source>vmsrealpath</source>
          <target state="translated">vmsrealpath</target>
        </trans-unit>
        <trans-unit id="7dbb73a07119ea7148844f9bc12d76fb35a879e0" translate="yes" xml:space="preserve">
          <source>vmssysopen</source>
          <target state="translated">vmssysopen</target>
        </trans-unit>
        <trans-unit id="c546839d43a99414362b2c0a43224799df149062" translate="yes" xml:space="preserve">
          <source>vnewSVpvf</source>
          <target state="translated">vnewSVpvf</target>
        </trans-unit>
        <trans-unit id="9b2d9ffc3a465d7790473af657210832eb6db087" translate="yes" xml:space="preserve">
          <source>vnormal</source>
          <target state="translated">vnormal</target>
        </trans-unit>
        <trans-unit id="3523da90bef8d0b786e42d56977461c33c6dd06b" translate="yes" xml:space="preserve">
          <source>vnumify</source>
          <target state="translated">vnumify</target>
        </trans-unit>
        <trans-unit id="e9cede9b80ea3abd89c755f1117337d429162c86" translate="yes" xml:space="preserve">
          <source>void</source>
          <target state="translated">void</target>
        </trans-unit>
        <trans-unit id="8e19c817c720cc2d4b5c62be8969d15d78eb237a" translate="yes" xml:space="preserve">
          <source>void context</source>
          <target state="translated">空虚コンテキスト</target>
        </trans-unit>
        <trans-unit id="9901ea7bc50240c07dbde1f94425cb15aba6f905" translate="yes" xml:space="preserve">
          <source>volume names</source>
          <target state="translated">ボリューム名</target>
        </trans-unit>
        <trans-unit id="49c3830184f749fbad60dc76ce91042670b42663" translate="yes" xml:space="preserve">
          <source>vstringify</source>
          <target state="translated">vstringify</target>
        </trans-unit>
        <trans-unit id="5faa65a46441f5990a560502cd10eef567622feb" translate="yes" xml:space="preserve">
          <source>vverify</source>
          <target state="translated">vverify</target>
        </trans-unit>
        <trans-unit id="fcda5b662340d762f84d079a9fdff27c17470b59" translate="yes" xml:space="preserve">
          <source>vwarn</source>
          <target state="translated">vwarn</target>
        </trans-unit>
        <trans-unit id="2bb4885ce803b9f89aa5b4e6fddb44e07ffb04cd" translate="yes" xml:space="preserve">
          <source>vwarner</source>
          <target state="translated">vwarner</target>
        </trans-unit>
        <trans-unit id="aff024fe4ab0fece4091de044c58c9ae4233383a" translate="yes" xml:space="preserve">
          <source>w</source>
          <target state="translated">w</target>
        </trans-unit>
        <trans-unit id="bf6f6f261198cba48e3c44f51ddf05075881f74b" translate="yes" xml:space="preserve">
          <source>w expr</source>
          <target state="translated">WEXPR</target>
        </trans-unit>
        <trans-unit id="daaad336276d15594d0e765f96c17cd746bf4971" translate="yes" xml:space="preserve">
          <source>wait</source>
          <target state="translated">wait</target>
        </trans-unit>
        <trans-unit id="890ad40c07f3863125585ae26d1eb5009581cbd1" translate="yes" xml:space="preserve">
          <source>wait() and waitpid()</source>
          <target state="translated">wait()および waitpid()</target>
        </trans-unit>
        <trans-unit id="16599a2caf0e43357dfd62cf1bbedac5d4f9aa78" translate="yes" xml:space="preserve">
          <source>wait() and waitpid() can be passed a pseudo-process ID returned by fork(). These calls will properly wait for the termination of the pseudo-process and return its status.</source>
          <target state="translated">wait()および waitpid()には fork()が返す疑似プロセス ID を渡すことができます。これらの呼び出しは、疑似プロセスの終了を適切に待ち、その状態を返します。</target>
        </trans-unit>
        <trans-unit id="69c29097cb967e595fc1da3e699aa0f1c4465d43" translate="yes" xml:space="preserve">
          <source>wait(2)</source>
          <target state="translated">wait(2)</target>
        </trans-unit>
        <trans-unit id="9c8ff40ef6d055cafa6594a3e1f0887439eb59a3" translate="yes" xml:space="preserve">
          <source>wait4pid</source>
          <target state="translated">wait4pid</target>
        </trans-unit>
        <trans-unit id="a8497c29e208d2ed72e5f976bab5a590fe3de3ef" translate="yes" xml:space="preserve">
          <source>waitfh</source>
          <target state="translated">waitfh</target>
        </trans-unit>
        <trans-unit id="2adada1e71a33f071825f68863aa78076956f91c" translate="yes" xml:space="preserve">
          <source>waitpid</source>
          <target state="translated">waitpid</target>
        </trans-unit>
        <trans-unit id="7a5601dcd3b6db75e71ed2908ce3b9fba9edaa57" translate="yes" xml:space="preserve">
          <source>waitpid PID,FLAGS</source>
          <target state="translated">waitpid PID,FLAGS</target>
        </trans-unit>
        <trans-unit id="33a4d790db96047d8f48435d61872442016da10a" translate="yes" xml:space="preserve">
          <source>waitpid(3)</source>
          <target state="translated">waitpid(3)</target>
        </trans-unit>
        <trans-unit id="fd058fa4ab8d6a0792ce2841bb7452beac62f85e" translate="yes" xml:space="preserve">
          <source>wakeonlan($mac, [$host, [$port]])</source>
          <target state="translated">wakeonlan($mac,[$host,[$port]]</target>
        </trans-unit>
        <trans-unit id="45b0061098539515cd93819a7b475cb4d404858a" translate="yes" xml:space="preserve">
          <source>walkoptree(OP, METHOD)</source>
          <target state="translated">walkoptree(OP,METHOD)</target>
        </trans-unit>
        <trans-unit id="ce9308b2bf161b6c5d95d8de889ec70d10a356cf" translate="yes" xml:space="preserve">
          <source>walkoptree_debug(DEBUG)</source>
          <target state="translated">walkoptree_debug(DEBUG)</target>
        </trans-unit>
        <trans-unit id="b0d88aa083de089664bd50033f793ecb39a1ba2f" translate="yes" xml:space="preserve">
          <source>walksymtable(SYMREF, METHOD, RECURSE, PREFIX)</source>
          <target state="translated">walksymtable(SYMREF,METHOD,RECURSE,PREFIX)</target>
        </trans-unit>
        <trans-unit id="4a714f64e3698739073c4107159d7e2ec7580a59" translate="yes" xml:space="preserve">
          <source>wallclock time</source>
          <target state="translated">掛け時計の時間</target>
        </trans-unit>
        <trans-unit id="96de3fd5a3dfc06b03a0beb1f7587b6e6941ca96" translate="yes" xml:space="preserve">
          <source>want a record separator of 0777, specify it as &lt;b&gt;-0x1FF&lt;/b&gt;. (This means that you cannot use the &lt;a href=&quot;#-x&quot;&gt;&quot;-x&quot;&lt;/a&gt; option with a directory name that consists of hexadecimal digits, or else Perl will think you have specified a hex number to &lt;b&gt;-0&lt;/b&gt;.)</source>
          <target state="translated">0777のレコード区切り文字が必要な場合は、&lt;b&gt;-0x1FF&lt;/b&gt;として指定します。（これは、16進数で構成されるディレクトリ名で&lt;a href=&quot;#-x&quot;&gt;「-x」&lt;/a&gt;オプションを使用できないことを意味します。そうしないと、Perlは16進数を&lt;b&gt;-0に&lt;/b&gt;指定したと&lt;b&gt;見なし&lt;/b&gt;ます。）</target>
        </trans-unit>
        <trans-unit id="36fae1179f0e54b2fbcfa0e1e58a96822af50f7c" translate="yes" xml:space="preserve">
          <source>want a record separator of 0777, specify it as &lt;b&gt;-0x1FF&lt;/b&gt;. (This means that you cannot use the &lt;b&gt;-x&lt;/b&gt; option with a directory name that consists of hexadecimal digits, or else Perl will think you have specified a hex number to &lt;b&gt;-0&lt;/b&gt;.)</source>
          <target state="translated">0777のレコードセパレータが必要な場合は、&lt;b&gt;-0x1FF&lt;/b&gt;と指定します。（これは、16進数で構成されるディレクトリ名で&lt;b&gt;-x&lt;/b&gt;オプションを使用できないことを意味します。そうしないと、Perlは&lt;b&gt;-0に&lt;/b&gt; 16進数を指定したと&lt;b&gt;見なし&lt;/b&gt;ます。）</target>
        </trans-unit>
        <trans-unit id="fa1de8a88193794f6bcd0270bd3c78df8da87f33" translate="yes" xml:space="preserve">
          <source>want locks to block access, then go ahead and tie them to something and manage this yourself. This is done on purpose. While managing access to variables is a good thing, Perl doesn't force you out of its living room...</source>
          <target state="translated">鍵をかけてアクセスを遮断したい場合は、何かに縛り付けて自分で管理するようにしましょう。これは意図的に行われています。変数へのアクセスを管理するのは良いことですが、Perl はあなたをその居間から強制的に追い出したりはしません。</target>
        </trans-unit>
        <trans-unit id="430e2f9e2b553be017639dc38d8145a216cfb84b" translate="yes" xml:space="preserve">
          <source>want to follow an &lt;a href=&quot;#exec-LIST&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; with some other statement, you can use one of these styles to avoid the warning:</source>
          <target state="translated">&lt;a href=&quot;#exec-LIST&quot;&gt; &lt;code&gt;exec&lt;/code&gt; の後&lt;/a&gt;に他のステートメントを続けたい場合は、次のスタイルのいずれかを使用して警告を回避できます。</target>
        </trans-unit>
        <trans-unit id="42f9df8dd43a1cbf03eed19f45b2ac004af68f76" translate="yes" xml:space="preserve">
          <source>want to follow an &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; with some other statement, you can use one of these styles to avoid the warning:</source>
          <target state="translated">他のステートメントで &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; を追跡したい場合は、次のいずれかのスタイルを使用して警告を回避できます。</target>
        </trans-unit>
        <trans-unit id="1be38d5f877aab6abdfed0efc178920ad9fb017d" translate="yes" xml:space="preserve">
          <source>want to follow an &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; with some other statement, you can use one of these styles to avoid the warning:</source>
          <target state="translated">他のステートメントで &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; を追跡したい場合は、次のいずれかのスタイルを使用して警告を回避できます。</target>
        </trans-unit>
        <trans-unit id="b18cfd0bd3a597bb757ac9a15224a9fadf94a687" translate="yes" xml:space="preserve">
          <source>want to make the same transformation to all keys and/or values in a DBM database.</source>
          <target state="translated">DBMデータベース内のすべてのキーや値に対して同じ変換を行いたい。</target>
        </trans-unit>
        <trans-unit id="891609b1d0a9a2a6ed2e0ee37725092c4205c0dd" translate="yes" xml:space="preserve">
          <source>want to make the same transformation to all keys and/or values in a DBM database. An example is when you need to encode your data in UTF-8 before writing to the database and then decode the UTF-8 when reading from the database file.</source>
          <target state="translated">DBMデータベース内のすべてのキーおよび/または値に対して同じ変換を行いたい場合に使用します。例としては、データベースに書き込む前にデータをUTF-8でエンコードし、データベースファイルから読み出すときにUTF-8をデコードする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="8898e1e919ff199c09160ba3765d7cb61b031b32" translate="yes" xml:space="preserve">
          <source>want to make the same transformation to all keys, all values or both.</source>
          <target state="translated">すべてのキー、すべての値、またはその両方に対して同じ変換を行いたい場合。</target>
        </trans-unit>
        <trans-unit id="f51e84e28b94e6a1e90ca25ef3ad13faa9a3700c" translate="yes" xml:space="preserve">
          <source>want to pass a meaningful metacharacter to the shell, such with the &lt;code&gt;&quot;*&quot;&lt;/code&gt; inside that final &lt;code&gt;unsorted/*.txt&lt;/code&gt; argument here, you can't use this alternate syntax. In this case, we have worked around it via Perl's handy &lt;code&gt;glob&lt;/code&gt; built-in function, which evaluates its argument into a list of filenames &amp;mdash; and we can safely pass that resulting list right into &lt;code&gt;open&lt;/code&gt;, as shown above.</source>
          <target state="translated">ここで最後の &lt;code&gt;unsorted/*.txt&lt;/code&gt; 引数内に &lt;code&gt;&quot;*&quot;&lt;/code&gt; れているなど、意味のあるメタ文字をシェルに渡したい場合は、この代替構文を使用できません。この場合、Perlの便利な &lt;code&gt;glob&lt;/code&gt; 組み込み関数を使用して回避しました。この関数は、引数をファイル名のリストに評価します。上記のように、結果のリストを安全に &lt;code&gt;open&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="80f812f0ab1052c34ba58a9aa6c43451d87573ad" translate="yes" xml:space="preserve">
          <source>want to subclass &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt;'s grammar the best thing to do is read through the code. There's no easy way of summarizing it here.</source>
          <target state="translated">&lt;a href=&quot;../parser&quot;&gt;TAP :: Parser&lt;/a&gt;の文法をサブクラス化したい場合は、コード全体を読むことが最善です。ここでそれを要約する簡単な方法はありません。</target>
        </trans-unit>
        <trans-unit id="b2a39e7d6c80fc057a0eb3b70c2d3b0a2a92a422" translate="yes" xml:space="preserve">
          <source>want to subclass &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt;'s grammar the best thing to do is read through the code. There's no easy way of summarizing it here.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parser&lt;/a&gt;の文法をサブクラス化したい場合は、コードを読み取るのが最善の方法です。ここでそれを要約する簡単な方法はありません。</target>
        </trans-unit>
        <trans-unit id="76f51d192120dd11344a546a620674d65ea15871" translate="yes" xml:space="preserve">
          <source>wantarray</source>
          <target state="translated">wantarray</target>
        </trans-unit>
        <trans-unit id="77921eed5c933c5cd87a4b266d8972f000e6983e" translate="yes" xml:space="preserve">
          <source>wanted()</source>
          <target state="translated">wanted()</target>
        </trans-unit>
        <trans-unit id="5383092a76f9a7f2052899ae6bf06e0ebac04977" translate="yes" xml:space="preserve">
          <source>wants</source>
          <target state="translated">wants</target>
        </trans-unit>
        <trans-unit id="4e586b17a78dad3ec40f5515d1f0072bbcf17f64" translate="yes" xml:space="preserve">
          <source>wants to succeed, so it uses the standard pattern back-off-and-retry and lets &lt;code&gt;\D*&lt;/code&gt; expand to just &quot;AB&quot; this time. Now there's indeed something following &quot;AB&quot; that is not &quot;123&quot;. It's &quot;C123&quot;, which suffices.</source>
          <target state="translated">成功したいので、標準パターンのバックオフと再試行を使用し、今回は &lt;code&gt;\D*&lt;/code&gt; を「AB」だけに拡張します。今、「123」ではない「AB」に続くものが実際にあります。「C123」で十分です。</target>
        </trans-unit>
        <trans-unit id="4c8ea4760fcb5dff8ec1af0394a338be9df55090" translate="yes" xml:space="preserve">
          <source>warn</source>
          <target state="translated">warn</target>
        </trans-unit>
        <trans-unit id="dd055b1e3e77f358b39e3dcec164c30e81c00105" translate="yes" xml:space="preserve">
          <source>warn LIST</source>
          <target state="translated">警告リスト</target>
        </trans-unit>
        <trans-unit id="c7d627029f960a00a820fb09dd882cfac7ab7de9" translate="yes" xml:space="preserve">
          <source>warn_nocontext</source>
          <target state="translated">warn_nocontext</target>
        </trans-unit>
        <trans-unit id="950dc0ea04deb0d6c766287d4d1e3bf5db49f42e" translate="yes" xml:space="preserve">
          <source>warn_sv</source>
          <target state="translated">warn_sv</target>
        </trans-unit>
        <trans-unit id="32339611df027ade1e4c7ce52fc19d50c05be10e" translate="yes" xml:space="preserve">
          <source>warner</source>
          <target state="translated">warner</target>
        </trans-unit>
        <trans-unit id="f77ef17efb4e8eba1b901c39be9c61072dc87c85" translate="yes" xml:space="preserve">
          <source>warner_nocontext</source>
          <target state="translated">warner_nocontext</target>
        </trans-unit>
        <trans-unit id="383fd7bf84aa027bdc40159c5d7c5805664a8eb2" translate="yes" xml:space="preserve">
          <source>warning</source>
          <target state="translated">warning</target>
        </trans-unit>
        <trans-unit id="3f4c20cf2e4f20443c501790a359300f5f40529f" translate="yes" xml:space="preserve">
          <source>warning messages. These messages will be displayed by default. But this is not the same as &lt;code&gt;verbose&lt;/code&gt; mode.</source>
          <target state="translated">警告メッセージ。これらのメッセージはデフォルトで表示されます。ただし、これは &lt;code&gt;verbose&lt;/code&gt; モードと同じではありません。</target>
        </trans-unit>
        <trans-unit id="9f6be01127af67b499b57da0fae72ba37a45a9a4" translate="yes" xml:space="preserve">
          <source>warning.</source>
          <target state="translated">warning.</target>
        </trans-unit>
        <trans-unit id="dd0b3a6a5123562613947d4d18ddc919dc59bdce" translate="yes" xml:space="preserve">
          <source>warning_bits</source>
          <target state="translated">warning_bits</target>
        </trans-unit>
        <trans-unit id="bd207fab08951eb6cee30e4969e79ca50d1f7c65" translate="yes" xml:space="preserve">
          <source>warnings</source>
          <target state="translated">warnings</target>
        </trans-unit>
        <trans-unit id="3ce091add8db14f8e39ccb40d45911c210817c5d" translate="yes" xml:space="preserve">
          <source>warnings - Perl pragma to control optional warnings</source>
          <target state="translated">warnings-オプションの警告を制御するための Perl プラグマ</target>
        </trans-unit>
        <trans-unit id="69788f5b932d69519f6c6fa630facec7b52027c8" translate="yes" xml:space="preserve">
          <source>warnings. The difference is that although the previously mandatory warnings are still enabled by default, they can then be subsequently enabled or disabled with the lexical warning pragma. For example, in the code below, an &lt;code&gt;&quot;isn't numeric&quot;&lt;/code&gt; warning will only be reported for the &lt;code&gt;$a&lt;/code&gt; variable.</source>
          <target state="translated">警告。違いは、以前は必須の警告がデフォルトで引き続き有効になっていますが、その後、字句警告プラグマを使用して有効または無効にできることです。たとえば、次のコードでは、 &lt;code&gt;&quot;isn't numeric&quot;&lt;/code&gt; 警告は &lt;code&gt;$a&lt;/code&gt; 変数に対してのみ報告されます。</target>
        </trans-unit>
        <trans-unit id="3a05775b0763806efaceb501f42ba1c2daa250b2" translate="yes" xml:space="preserve">
          <source>warnings::enabled($category)</source>
          <target state="translated">warnings::enabled($category)</target>
        </trans-unit>
        <trans-unit id="0efe62937e9c150a79c2cdbdcf25d73c677e0dca" translate="yes" xml:space="preserve">
          <source>warnings::enabled($object)</source>
          <target state="translated">warnings::enabled($object)</target>
        </trans-unit>
        <trans-unit id="895ac3c6fd6945e3ec8133db677fe54b6731aeec" translate="yes" xml:space="preserve">
          <source>warnings::enabled()</source>
          <target state="translated">warnings::enabled()</target>
        </trans-unit>
        <trans-unit id="b8c7e32144afd288bb6e5510bbcba9b4ea150764" translate="yes" xml:space="preserve">
          <source>warnings::enabled_at_level($category, $level)</source>
          <target state="translated">warnings::enabled_at_level($category,$level)</target>
        </trans-unit>
        <trans-unit id="d88cc9d6a60bace42a3c7eb92827b76d9b3076c0" translate="yes" xml:space="preserve">
          <source>warnings::fatal_enabled($category)</source>
          <target state="translated">warnings::fatal_enabled($category)</target>
        </trans-unit>
        <trans-unit id="8eab780c954dab0571b4e328af15ed1d5d7ac1d1" translate="yes" xml:space="preserve">
          <source>warnings::fatal_enabled($object)</source>
          <target state="translated">warnings::fatal_enabled($object)</target>
        </trans-unit>
        <trans-unit id="389934ab3437483805bb47cb317984089ef82e70" translate="yes" xml:space="preserve">
          <source>warnings::fatal_enabled()</source>
          <target state="translated">warnings::fatal_enabled()</target>
        </trans-unit>
        <trans-unit id="3e82046f0d4570f15171e3846b132c61f433b334" translate="yes" xml:space="preserve">
          <source>warnings::fatal_enabled_at_level($category, $level)</source>
          <target state="translated">warnings::fatal_enabled_at_level($category,$level)</target>
        </trans-unit>
        <trans-unit id="25304d614db590d11bde4fb00d1385306732fa04" translate="yes" xml:space="preserve">
          <source>warnings::register</source>
          <target state="translated">warnings::register</target>
        </trans-unit>
        <trans-unit id="38c5e56d56c5509ef7afa87cb247e50311f9a294" translate="yes" xml:space="preserve">
          <source>warnings::register - warnings import function</source>
          <target state="translated">warnings::register-warnings import function</target>
        </trans-unit>
        <trans-unit id="572db0cabfb983bbb52bca4294d68d887a18b745" translate="yes" xml:space="preserve">
          <source>warnings::register_categories(@names)</source>
          <target state="translated">warnings::register_categories(@names)</target>
        </trans-unit>
        <trans-unit id="d71d34370fc48aecda7efac336b135ae93d0c271" translate="yes" xml:space="preserve">
          <source>warnings::warn($category, $message)</source>
          <target state="translated">warnings::warn($category,$message)</target>
        </trans-unit>
        <trans-unit id="2768498b6c456bd413a122afffbaf4f71dff49cf" translate="yes" xml:space="preserve">
          <source>warnings::warn($message)</source>
          <target state="translated">warnings::warn($message)</target>
        </trans-unit>
        <trans-unit id="510223632a299412d30fa46f1b1f1f98d0b354f8" translate="yes" xml:space="preserve">
          <source>warnings::warn($object, $message)</source>
          <target state="translated">warnings::warn($object,$message)</target>
        </trans-unit>
        <trans-unit id="ccd82ceef173f078f755f99bc1d237a03443e07c" translate="yes" xml:space="preserve">
          <source>warnings::warn_at_level($category, $level, $message)</source>
          <target state="translated">warnings::warn_at_level($category,$level,$message)</target>
        </trans-unit>
        <trans-unit id="72436a2120044ecf27ca0f71df6408fedadafbad" translate="yes" xml:space="preserve">
          <source>warnings::warnif($category, $message)</source>
          <target state="translated">warnings::warnif($category,$message)</target>
        </trans-unit>
        <trans-unit id="76fac69d3ce70dac06a45d0f1b764fb76695daab" translate="yes" xml:space="preserve">
          <source>warnings::warnif($message)</source>
          <target state="translated">warnings::warnif($message)</target>
        </trans-unit>
        <trans-unit id="4917a0d247382e3e78725d8bed226f251b0846c1" translate="yes" xml:space="preserve">
          <source>warnings::warnif($object, $message)</source>
          <target state="translated">warnings::warnif($object,$message)</target>
        </trans-unit>
        <trans-unit id="df78376b9b77a9cbca980bb8cee3320f9420ed7c" translate="yes" xml:space="preserve">
          <source>warnings::warnif_at_level($category, $level, $message)</source>
          <target state="translated">warnings::warnif_at_level($category,$level,$message)</target>
        </trans-unit>
        <trans-unit id="3de521d3619155e9228f83cc5f773bfcbfc52749" translate="yes" xml:space="preserve">
          <source>was</source>
          <target state="translated">was</target>
        </trans-unit>
        <trans-unit id="f062dc50293a6ebef0644413f16dbe666de1a1ed" translate="yes" xml:space="preserve">
          <source>was available through the &lt;code&gt;Thread.pm&lt;/code&gt; API. This threading model has been deprecated, and was removed as of Perl 5.10.0.)</source>
          <target state="translated">&lt;code&gt;Thread.pm&lt;/code&gt; API を通じて利用可能でした。このスレッドモデルは非推奨になり、Perl 5.10.0で削除されました。）</target>
        </trans-unit>
        <trans-unit id="1f19bc6bea19581bc44bbfb345e232346246a9a6" translate="yes" xml:space="preserve">
          <source>was called without options, but with the additional behaviour that the temporary file is removed by the object destructor if UNLINK is set to true (the default).</source>
          <target state="translated">はオプションなしで呼び出されましたが、UNLINKがtrue(デフォルト)に設定されている場合、一時ファイルはオブジェクトデストラクタによって削除されるという追加の動作をしていました。</target>
        </trans-unit>
        <trans-unit id="f83d8fcf9f9f581aff720bc3d0f0345f5631b7ae" translate="yes" xml:space="preserve">
          <source>was changed to return some value(s), having specified G_DISCARD will mean that they will be wiped by the time control returns from</source>
          <target state="translated">がいくつかの値を返すように変更された場合、G_DISCARD を指定したことは</target>
        </trans-unit>
        <trans-unit id="358b1b390577816773119471fd35f58a152fe39c" translate="yes" xml:space="preserve">
          <source>was deliberately picked to avoid namespace tainting -- this module may be used as a base class so method names that appear in Encode::Encoding are avoided.</source>
          <target state="translated">は名前空間の汚染を避けるために意図的に選ばれました --このモジュールは基底クラスとして使用され、Encode::Encoding に現れるメソッド名を避けることができます。</target>
        </trans-unit>
        <trans-unit id="4ef5ff209fb64ad33c3a43e09b9777f546e6d687" translate="yes" xml:space="preserve">
          <source>was disabled, IO::Zlib has not much chance of working.</source>
          <target state="translated">が無効化されていた場合、IO::Zlibが動作する可能性はあまり高くありません。</target>
        </trans-unit>
        <trans-unit id="c0031fc3fa962990af70319240516fc9adc0fce7" translate="yes" xml:space="preserve">
          <source>was generated by hand, it is suggested that the author be specified here.</source>
          <target state="translated">が手書きで生成された場合は、ここに作者を明記することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="cc39726c2752bbbdac1623dec16d2ec7ec5530fe" translate="yes" xml:space="preserve">
          <source>was modified after creation. Note that if a temp directory is your current directory, it cannot be removed - a warning will be given in this case. C</source>
          <target state="translated">は作成後に変更されました。一時ディレクトリがカレントディレクトリの場合は削除できないことに注意してください-この場合は警告が表示されます。C</target>
        </trans-unit>
        <trans-unit id="1c2cacfa9911a9740c2f39057d9556ce6e3a53b2" translate="yes" xml:space="preserve">
          <source>was not built, user must have HOST perl and properly edit</source>
          <target state="translated">がビルドされていない場合、ユーザはHOST perlを持っていて、適切に</target>
        </trans-unit>
        <trans-unit id="e1a5fcfd7b191fc7b62fed25dba309a60f6a62f6" translate="yes" xml:space="preserve">
          <source>was used to invoke native compiler to create HOST miniperl, which then facilitates cross-compiling process. Extension building support was added.</source>
          <target state="translated">を使用してネイティブコンパイラを起動してHOST miniperlを作成し、クロスコンパイル処理を容易にしました。拡張ビルドのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="66ffd23620129e551f53385e61617103184d89ce" translate="yes" xml:space="preserve">
          <source>was written, not even Perl 5.6.0 had been born yet, many features documented in the book remained unimplemented for a long time. Perl 5.8 corrected much of this, and the introduction of the UTF8 flag is one of them. You can think of there being two fundamentally different kinds of strings and string-operations in Perl: one a byte-oriented mode for when the internal UTF8 flag is off, and the other a character-oriented mode for when the internal UTF8 flag is on.</source>
          <target state="translated">が書かれたときはまだ Perl 5.6.0 も誕生していなかったので、この本に書かれている多くの機能は長い間実装されていませんでした。Perl 5.8ではその多くが修正され、UTF8フラグの導入もその一つです。Perl の文字列や文字列操作には、内部の UTF8 フラグがオフのときのバイト指向モードと、内部の UTF8 フラグがオンのときの文字指向モードの 2 つの根本的な違いがあると考えることができます。</target>
        </trans-unit>
        <trans-unit id="9ea1e1a2b2d771820e619ae8a8ea0fa6c89f8cc7" translate="yes" xml:space="preserve">
          <source>was_lvalue_sub</source>
          <target state="translated">was_lvalue_sub</target>
        </trans-unit>
        <trans-unit id="181b4dd436ea635e496b642bf6193eba9531e9f5" translate="yes" xml:space="preserve">
          <source>wasn't installed or doesn't work for you, you can</source>
          <target state="translated">がインストールされていなかったり、動作しなかったりした場合は、以下のことができます。</target>
        </trans-unit>
        <trans-unit id="a3bbe1a8f2f025b8b6c5b66937763bb2b9bebdf2" translate="yes" xml:space="preserve">
          <source>wat</source>
          <target state="translated">wat</target>
        </trans-unit>
        <trans-unit id="292b0901993f7e9d9a0d9b80542f9e59505ba5be" translate="yes" xml:space="preserve">
          <source>watch</source>
          <target state="translated">watch</target>
        </trans-unit>
        <trans-unit id="e7152c88856289d637f0929b846306d3b766534a" translate="yes" xml:space="preserve">
          <source>watch expression</source>
          <target state="translated">見ている表情</target>
        </trans-unit>
        <trans-unit id="53aa762a10c4741758c57fe1af6e5ea0916edef6" translate="yes" xml:space="preserve">
          <source>wbh</source>
          <target state="translated">wbh</target>
        </trans-unit>
        <trans-unit id="146b5dae12284acb165c37a9e39cd9753cbc537e" translate="yes" xml:space="preserve">
          <source>wc</source>
          <target state="translated">wc</target>
        </trans-unit>
        <trans-unit id="ef35d3fdfcda49bff3dd3e76ad690e14e647c769" translate="yes" xml:space="preserve">
          <source>wck</source>
          <target state="translated">wck</target>
        </trans-unit>
        <trans-unit id="45bd0a272f28f8117c12214636d9fc1deeb9a5da" translate="yes" xml:space="preserve">
          <source>we can write the more sensible (see &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt; for a full explanation of is() and other testing functions).</source>
          <target state="translated">より賢明なものを書くことができます（is（）およびその他のテスト関数の完全な説明については、&lt;a href=&quot;Test::More&quot;&gt;Test :: More&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="3fe0dfef3d9b02dc86d540b75c78abe297bdb20e" translate="yes" xml:space="preserve">
          <source>we can write the more sensible (see &lt;a href=&quot;test/more&quot;&gt;Test::More&lt;/a&gt; for a full explanation of is() and other testing functions).</source>
          <target state="translated">もっと賢明に書くことができます（is（）と他のテスト関数の完全な説明については、&lt;a href=&quot;test/more&quot;&gt;Test :: More&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="8419df2ab51f8cb1466217a1a4f14649c05b6c1d" translate="yes" xml:space="preserve">
          <source>we have</source>
          <target state="translated">あります</target>
        </trans-unit>
        <trans-unit id="c7f6e33ca845e7a167620cb9b0592d72afd41ebe" translate="yes" xml:space="preserve">
          <source>we need to construct the tree for &lt;code&gt;$a = $b + $c&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$a = $b + $c&lt;/code&gt; のツリーを構築する必要があります</target>
        </trans-unit>
        <trans-unit id="85ea3c732a0cadb4cba11f8084adbc162ad146ff" translate="yes" xml:space="preserve">
          <source>we prevent backtracking and find the count of the longest matching string at each matching starting point like so:</source>
          <target state="translated">バックトラックを防止し、以下のように各マッチング開始点で最長のマッチング文字列のカウントを見つけます。</target>
        </trans-unit>
        <trans-unit id="3d0b0b7bc297d97e84595de72ecb8a0030fdd17e" translate="yes" xml:space="preserve">
          <source>we've checked all its derived classes (i.e. before we tried &lt;code&gt;Mother&lt;/code&gt; and &lt;code&gt;MaternalGrandparent&lt;/code&gt; ).</source>
          <target state="translated">すべての派生クラスをチェックしました（つまり、 &lt;code&gt;Mother&lt;/code&gt; および &lt;code&gt;MaternalGrandparent&lt;/code&gt; を試す前に）。</target>
        </trans-unit>
        <trans-unit id="7da04a13c6144445a9e40ca87afe08fb19cf3a44" translate="yes" xml:space="preserve">
          <source>we've checked all its derived classes (i.e. before we tried &lt;code&gt;Mother&lt;/code&gt; and &lt;code&gt;MaternalGrandparent&lt;/code&gt;).</source>
          <target state="translated">派生クラスをすべてチェックしました（つまり、 &lt;code&gt;Mother&lt;/code&gt; と &lt;code&gt;MaternalGrandparent&lt;/code&gt; を試す前に）。</target>
        </trans-unit>
        <trans-unit id="431d4e35e7d98928b3b8e2544e63a493e23d5282" translate="yes" xml:space="preserve">
          <source>weak reference</source>
          <target state="translated">弱参照</target>
        </trans-unit>
        <trans-unit id="fcb9e7c68cc7aee9b7ae828bf3eb4f0c0ab95fcd" translate="yes" xml:space="preserve">
          <source>weaken</source>
          <target state="translated">weaken</target>
        </trans-unit>
        <trans-unit id="ae27e6a12247433968a2426ceb5f2faec9f64b2d" translate="yes" xml:space="preserve">
          <source>webget</source>
          <target state="translated">webget</target>
        </trans-unit>
        <trans-unit id="79b1646e47722f151fadfe6b4b9cfd75b5507a18" translate="yes" xml:space="preserve">
          <source>week number</source>
          <target state="translated">しゅうばん</target>
        </trans-unit>
        <trans-unit id="afe0444198ad67c415c63ad23456fcbf739b9bf7" translate="yes" xml:space="preserve">
          <source>weight</source>
          <target state="translated">weight</target>
        </trans-unit>
        <trans-unit id="b6894b43bb03af96eabb423701dc0bc9e071a3e0" translate="yes" xml:space="preserve">
          <source>were affected. This leads to spooky, incorrect action at a distance that is hard to debug.</source>
          <target state="translated">が影響を受けました。これにより、デバッグが困難な距離での不気味で不正確なアクションが発生するようになります。</target>
        </trans-unit>
        <trans-unit id="0a8fc1dcdcb951afef794f96428b2c2d30d4cbdd" translate="yes" xml:space="preserve">
          <source>were fine, but the hard ones like</source>
          <target state="translated">のような硬いものは大丈夫でしたが</target>
        </trans-unit>
        <trans-unit id="b3e74349971aeb0151fc1bfbab7d483e124b80fe" translate="yes" xml:space="preserve">
          <source>were merged, so perlce build process comes in</source>
          <target state="translated">がマージされたので、perlceのビルド処理が入ってきます。</target>
        </trans-unit>
        <trans-unit id="9421eaaa36860a069e3089b1dd32635567692a1f" translate="yes" xml:space="preserve">
          <source>were the command shell, this would probably work better:</source>
          <target state="translated">がコマンドシェルだった場合は、これの方がうまくいくかもしれません。</target>
        </trans-unit>
        <trans-unit id="a110e6b9a361653a042e3f5dfbac4c6105693789" translate="yes" xml:space="preserve">
          <source>what</source>
          <target state="translated">what</target>
        </trans-unit>
        <trans-unit id="5028edf30c355a53744774edb4e246a65bdda7eb" translate="yes" xml:space="preserve">
          <source>what &lt;code&gt;File::GlobMapper&lt;/code&gt; does.</source>
          <target state="translated">どのような &lt;code&gt;File::GlobMapper&lt;/code&gt; ありません。</target>
        </trans-unit>
        <trans-unit id="b36160c1ec6399ee58f1e1eaed45b1a11a29091d" translate="yes" xml:space="preserve">
          <source>what follows, it just leaves the choice open. Thus, after</source>
          <target state="translated">この後のことを考えれば、選択の余地を残しているだけなのです。このように</target>
        </trans-unit>
        <trans-unit id="235cc5e25df726ef139cc4e3ed273f18953c310e" translate="yes" xml:space="preserve">
          <source>what it does</source>
          <target state="translated">何をするか</target>
        </trans-unit>
        <trans-unit id="c1576912aed55be9f20cbdb86381f89139b595e1" translate="yes" xml:space="preserve">
          <source>what you want to use to capture the output from a command; for that you should use merely backticks or &lt;a href=&quot;#qx%2FSTRING%2F&quot;&gt;&lt;code&gt;qx//&lt;/code&gt;&lt;/a&gt;, as described in &lt;a href=&quot;perlop#%60STRING%60&quot;&gt;&quot;`STRING`&quot; in perlop&lt;/a&gt;. Return value of -1 indicates a failure to start the program or an error of the &lt;a href=&quot;http://man.he.net/man2/wait&quot;&gt;wait(2)&lt;/a&gt; system call (inspect &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt; for the reason).</source>
          <target state="translated">コマンドからの出力をキャプチャするために使用するもの。そのためには、&lt;a href=&quot;perlop#%60STRING%60&quot;&gt;perlopの「 `STRING`」で&lt;/a&gt;説明されているように、単にバックティックまたは&lt;a href=&quot;#qx%2FSTRING%2F&quot;&gt; &lt;code&gt;qx//&lt;/code&gt; &lt;/a&gt;を使用する必要があります。戻り値-1は、プログラムの開始の失敗または&lt;a href=&quot;http://man.he.net/man2/wait&quot;&gt;wait（2）&lt;/a&gt;システムコールのエラーを示します（理由については&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; &lt;/a&gt;を調べてください）。</target>
        </trans-unit>
        <trans-unit id="9a97de175ae265b931e0f47d8189ba1c158846c3" translate="yes" xml:space="preserve">
          <source>what you want to use to capture the output from a command; for that you should use merely backticks or &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt;, as described in &lt;a href=&quot;perlop#%60STRING%60&quot;&gt;`STRING` in perlop&lt;/a&gt;. Return value of -1 indicates a failure to start the program or an error of the wait(2) system call (inspect $! for the reason).</source>
          <target state="translated">コマンドからの出力をキャプチャするために使用するもの; そのためには&lt;a href=&quot;perlop#%60STRING%60&quot;&gt;、perlopの「STRING」で&lt;/a&gt;説明されているように、バックティックまたは &lt;code&gt;&lt;a href=&quot;functions/qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt; のみを使用する必要があります。戻り値-1は、プログラムの起動に失敗したか、またはwait（2）システムコールのエラーを示します（理由は$！を調べてください）。</target>
        </trans-unit>
        <trans-unit id="3926fc849cd226411c2dc28dbb3c1ac9425d41ae" translate="yes" xml:space="preserve">
          <source>what you want to use to capture the output from a command; for that you should use merely backticks or &lt;code&gt;&lt;a href=&quot;qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt;, as described in &lt;a href=&quot;../perlop#%60STRING%60&quot;&gt;`STRING` in perlop&lt;/a&gt;. Return value of -1 indicates a failure to start the program or an error of the wait(2) system call (inspect $! for the reason).</source>
          <target state="translated">コマンドからの出力をキャプチャするために使用するもの; そのためには&lt;a href=&quot;../perlop#%60STRING%60&quot;&gt;、perlopの「STRING」で&lt;/a&gt;説明されているように、バックティックまたは &lt;code&gt;&lt;a href=&quot;qx&quot;&gt;qx//&lt;/a&gt;&lt;/code&gt; のみを使用する必要があります。戻り値-1は、プログラムの起動に失敗したか、またはwait（2）システムコールのエラーを示します（理由は$！を調べてください）。</target>
        </trans-unit>
        <trans-unit id="2a01f2e26cea4a9807d9d068afa0bdc36ba5e00e" translate="yes" xml:space="preserve">
          <source>what you're doing, you can use the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; modifiers to force big- or little-endian byte-order on floating-point values.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; 修飾子を使用して、浮動小数点値にビッグエンディアンまたはリトルエンディアンのバイト順を強制できます。</target>
        </trans-unit>
        <trans-unit id="d869db7fe62fb07c25a0403ecaea55031744b5fb" translate="yes" xml:space="preserve">
          <source>whatever</source>
          <target state="translated">whatever</target>
        </trans-unit>
        <trans-unit id="021bc9488a6a6118c1c75c3f7a5aeeaa12491ccd" translate="yes" xml:space="preserve">
          <source>whatever falls between &lt;code&gt;\Q&lt;/code&gt; and &lt;code&gt;\E&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\Q&lt;/code&gt; と &lt;code&gt;\E&lt;/code&gt; 間にあるものは何でも</target>
        </trans-unit>
        <trans-unit id="30603fa9e0f620c305cd627ab0ff138a960c48bd" translate="yes" xml:space="preserve">
          <source>when</source>
          <target state="translated">when</target>
        </trans-unit>
        <trans-unit id="ed6268873901e8209d3ac22fc700c31706eaa9bd" translate="yes" xml:space="preserve">
          <source>when &quot;dumping&quot;; it has nothing to do with $| auto-flush.)</source>
          <target state="translated">これは $| 自動フラッシュとは何の関係もありません)。</target>
        </trans-unit>
        <trans-unit id="c89dac7f6e160306ca10f788c9bd6a54efcd1ffc" translate="yes" xml:space="preserve">
          <source>when &lt;code&gt;xsubpp&lt;/code&gt; is invoked with &lt;code&gt;-s foo_&lt;/code&gt; will install a &lt;code&gt;foo_bar&lt;/code&gt; function in Perl, but really call &lt;code&gt;bar(i)&lt;/code&gt; in C. Most of the time, this is the opposite of what you want and failure modes are somewhat obscure, so please avoid this option where possible.</source>
          <target state="translated">とき &lt;code&gt;xsubpp&lt;/code&gt; で呼び出され &lt;code&gt;-s foo_&lt;/code&gt; インストールされます &lt;code&gt;foo_bar&lt;/code&gt; はを Perlで機能を、本当にコール・ &lt;code&gt;bar(i)&lt;/code&gt; 時間のC.ほとんどで、これはあなたが何をしたいの反対で、故障モードはやや不明瞭なので、これを避けてくださいされています可能な場合はオプション。</target>
        </trans-unit>
        <trans-unit id="75aed76d9314bc923e71101c151f2b2893f266e7" translate="yes" xml:space="preserve">
          <source>when another process is holding the lockfile. This is an experimental feature that is not yet tested very well. This second shell then does not write the history file, does not use the metadata file, and has a different prompt.</source>
          <target state="translated">を使用することができます。これは実験的な機能であり、まだ十分にテストされていません。この 2 番目のシェルは、履歴ファイルを書き込まず、メタデータファイルを使用せず、異なるプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="58ecde95462d5104216d56768f577c7350fb30b7" translate="yes" xml:space="preserve">
          <source>when is experimental</source>
          <target state="translated">いつ実験的</target>
        </trans-unit>
        <trans-unit id="964616827ebdcbd31d66560bf1e05ea1f8b5815a" translate="yes" xml:space="preserve">
          <source>when n and k are non-negative. This method implements the full Kronenburg extension (Kronenburg, M.J. &quot;The Binomial Coefficient for Negative Arguments.&quot; 18 May 2011. http://arxiv.org/abs/1105.3689/) illustrated by the following pseudo-code:</source>
          <target state="translated">n と k が非負である場合に、このメソッドは完全な Kronenburg 拡張を実装しています。このメソッドは、完全なKronenburg拡張(Kronenburg,M.J.&quot;The Binomial Coefficient for Negative Arguments.&quot; 2011年5月18日)を実装しています。18 May 2011.http://arxiv.org/abs/1105.3689/)を実装しています。</target>
        </trans-unit>
        <trans-unit id="ba1a27d93b87aa252d9684f7f42d0351ba582ec5" translate="yes" xml:space="preserve">
          <source>when necessary.</source>
          <target state="translated">必要に応じて</target>
        </trans-unit>
        <trans-unit id="44248e18784ae26a400c98943c5b171efaca56f6" translate="yes" xml:space="preserve">
          <source>when the element to return happens to be &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返される要素がたまたま&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; である場合&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cd9d2e738a8b92221411f890d0e1eb0c5e3b660" translate="yes" xml:space="preserve">
          <source>when the element to return happens to be &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返す要素がたまたま &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; のとき。</target>
        </trans-unit>
        <trans-unit id="7b023844c7b290ca1a038802a6472c7aeafce41c" translate="yes" xml:space="preserve">
          <source>when the element to return happens to be &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返す要素がたまたま &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; のとき。</target>
        </trans-unit>
        <trans-unit id="94e8d83126a46666a564b1c81177abe2c908a36d" translate="yes" xml:space="preserve">
          <source>when the file is closed, or when an explicit flush is done</source>
          <target state="translated">ファイルが閉じられたとき、または明示的なフラッシュが行われたときに</target>
        </trans-unit>
        <trans-unit id="938c56ff8ee83ab6578974df30b9d1c7e33fe7dd" translate="yes" xml:space="preserve">
          <source>when the functions are called from within the scope of the &lt;code&gt;&lt;a href=&quot;bytes&quot;&gt;use bytes&lt;/a&gt;&lt;/code&gt; pragma</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;bytes&quot;&gt;use bytes&lt;/a&gt;&lt;/code&gt; プラグマのスコープ内から関数が呼び出されたとき</target>
        </trans-unit>
        <trans-unit id="8ce6402418c47b212eb07ca370a93108ff150f4a" translate="yes" xml:space="preserve">
          <source>when the imaginary part is zero (otherwise, it would not be called an extension, would it?).</source>
          <target state="translated">虚数部がゼロのとき(そうでなければ拡張子とは呼ばないですよね?</target>
        </trans-unit>
        <trans-unit id="eb1cef34e0771ae508dd63618b6d7ebc545d708d" translate="yes" xml:space="preserve">
          <source>when this tutorial was written. It has now been split off with &lt;code&gt;pp_unpack&lt;/code&gt; to its own file,</source>
          <target state="translated">このチュートリアルが書かれたとき。 &lt;code&gt;pp_unpack&lt;/code&gt; で独自のファイルに分割されました。</target>
        </trans-unit>
        <trans-unit id="ac26161b0187ead053283bca27ee59e832cfa160" translate="yes" xml:space="preserve">
          <source>when you ask for</source>
          <target state="translated">仰せになると</target>
        </trans-unit>
        <trans-unit id="3e5e701932ff1e08475464ba8b75ee91dc43d41c" translate="yes" xml:space="preserve">
          <source>when you intended</source>
          <target state="translated">意図した時に</target>
        </trans-unit>
        <trans-unit id="6e06c432fa349d548f06ebf0f8b460c130ec25ac" translate="yes" xml:space="preserve">
          <source>when you meant</source>
          <target state="translated">というと</target>
        </trans-unit>
        <trans-unit id="320723f30d494b8eb54e4b744bfd8f4219fbd71c" translate="yes" xml:space="preserve">
          <source>when you meant to say</source>
          <target state="translated">と言いたいところ</target>
        </trans-unit>
        <trans-unit id="0b09f6864ed10d92f6a10d3420ae332e50823d21" translate="yes" xml:space="preserve">
          <source>when you should have said</source>
          <target state="translated">と言った方がいいのに</target>
        </trans-unit>
        <trans-unit id="bfe41b37d5bad835ce1295749ffd97e4c9fffaac" translate="yes" xml:space="preserve">
          <source>when you should have written this:</source>
          <target state="translated">これを書けばよかったのに</target>
        </trans-unit>
        <trans-unit id="46148cc3b4d2b3ac8073f14b0cba7f25ffff54bd" translate="yes" xml:space="preserve">
          <source>where</source>
          <target state="translated">where</target>
        </trans-unit>
        <trans-unit id="ab1c267bd23a7a2761e1a1311799eacd65a53cf8" translate="yes" xml:space="preserve">
          <source>where &quot;ENCODING&quot; must be a valid encoding name that the Encode module recognises.</source>
          <target state="translated">ここで、&quot;ENCODING &quot;は、Encodeモジュールが認識する有効なエンコーディング名でなければならない。</target>
        </trans-unit>
        <trans-unit id="79921b21c24aca260a03cce0d0ff464489ada261" translate="yes" xml:space="preserve">
          <source>where &quot;quant&quot; is the name of a method you're using to quantify the noun &quot;piece&quot; with the number $params[0].</source>
          <target state="translated">ここで、&quot;quant &quot;は名詞 &quot;piece &quot;を数値$params[0]で定量化するために使用しているメソッドの名前です。</target>
        </trans-unit>
        <trans-unit id="3f76ee4872ba64c6359656344e5d58fab47ab470" translate="yes" xml:space="preserve">
          <source>where $MAKE is whatever 'make' program you have configured perl to use. Use &quot;perl -V:make&quot; to find out what this is. Some extensions may not provide a testsuite (so &quot;$MAKE test&quot; may not do anything or fail), but most serious ones do.</source>
          <target state="translated">ここで $MAKE は perl が使用するように設定した 'make' プログラムです。これが何であるかを調べるには &quot;perl -V:make&quot; を使ってください。拡張機能の中にはテストスイートを提供しないものもありますが (つまり &quot;$MAKE test&quot; は何もしないか、失敗するかもしれません)、ほとんどの深刻なものはテストスイートを提供します。</target>
        </trans-unit>
        <trans-unit id="c8069144ce0898197e96d2bb7ebc0edbdaca8457" translate="yes" xml:space="preserve">
          <source>where $term is a return value of Term::ReadLine-&amp;gt;new().</source>
          <target state="translated">$ termは、Term :: ReadLine-&amp;gt; new（）の戻り値です。</target>
        </trans-unit>
        <trans-unit id="b9c15a20c87c2836864971183b1c442723a838ac" translate="yes" xml:space="preserve">
          <source>where $x is either less than -128 or more than 127; the &lt;code&gt;&quot;c&quot;&lt;/code&gt; format is only for encoding native operating system characters (ASCII, EBCDIC, and so on) and not for Unicode characters, so Perl behaved as if you meant</source>
          <target state="translated">$ xは-128未満または127より大きい。 &lt;code&gt;&quot;c&quot;&lt;/code&gt; あなたが意味あるかのようにPerlは行儀のでフォーマットは、唯一のUnicode文字のネイティブオペレーティングシステムの文字（ASCII、EBCDICなど）をコードしていないためであります</target>
        </trans-unit>
        <trans-unit id="5bbc43aec00d96c64d05508ffb3bbad3e39afaec" translate="yes" xml:space="preserve">
          <source>where $x is either less than 0 or more than 255. However, &lt;code&gt;U0&lt;/code&gt; -mode expects all values to fall in the interval [0, 255], so Perl behaved as if you meant:</source>
          <target state="translated">ここで、$ xは0未満または255を超えています。ただし、 &lt;code&gt;U0&lt;/code&gt; モードではすべての値が[0、255]の範囲内にあると想定されているため、Perlは次のように動作しました。</target>
        </trans-unit>
        <trans-unit id="6d021a9d53a2a238c46b3094e97e9afb7f4e0760" translate="yes" xml:space="preserve">
          <source>where $x is either less than 0 or more than 255. However, &lt;code&gt;U0&lt;/code&gt;-mode expects all values to fall in the interval [0, 255], so Perl behaved as if you meant:</source>
          <target state="translated">ここで、$ xは0未満または255を超えています。ただし、 &lt;code&gt;U0&lt;/code&gt; モードでは、すべての値が[0、255]の間隔に収まると想定されるため、Perlは次のように動作します。</target>
        </trans-unit>
        <trans-unit id="00bca38c6c6b0a3593705b287c03db33903d5e5f" translate="yes" xml:space="preserve">
          <source>where $x is either less than 0 or more than 255; the &lt;code&gt;&quot;C&quot;&lt;/code&gt; format is only for encoding native operating system characters (ASCII, EBCDIC, and so on) and not for Unicode characters, so Perl behaved as if you meant</source>
          <target state="translated">ここで、$ xは0未満または255を超えています。 &lt;code&gt;&quot;C&quot;&lt;/code&gt; あなたが意味あるかのようにPerlは行儀のでフォーマットは、唯一のUnicode文字のネイティブオペレーティングシステムの文字（ASCII、EBCDICなど）をコードしていないためであります</target>
        </trans-unit>
        <trans-unit id="890f9b49db55ce1098a844385610bbb13debaa4c" translate="yes" xml:space="preserve">
          <source>where 0x0400 stands for &lt;code&gt;U+0400&lt;/code&gt; , CYRILLIC CAPITAL LETTER IE WITH GRAVE.</source>
          <target state="translated">ここで、0x0400は &lt;code&gt;U+0400&lt;/code&gt; 、キリル文字の大文字のIEとGRAVEを表します。</target>
        </trans-unit>
        <trans-unit id="bb39ea280c52faaef2cf252e7f001c0325c388e7" translate="yes" xml:space="preserve">
          <source>where 0x0400 stands for &lt;code&gt;U+0400&lt;/code&gt;, CYRILLIC CAPITAL LETTER IE WITH GRAVE.</source>
          <target state="translated">ここで、0x0400は &lt;code&gt;U+0400&lt;/code&gt; 、CYRILLIC CAPITAL LETTER IE WITHGRAVEを表します。</target>
        </trans-unit>
        <trans-unit id="825d5d6d780f8829ebcd8a7016c279905b219a90" translate="yes" xml:space="preserve">
          <source>where 7E is the hexadecimal ASCII code point for &quot;~&quot;. Here is an example of decoding such a URL in any EBCDIC code page:</source>
          <target state="translated">ここで、7Eは&quot;~&quot;の16進数のASCIIコードポイントです。このような URL を EBCDIC コードページでデコードした例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="e5afb7247bda0d6286eee71fcd361efad8d3b878" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$PKGNAME&lt;/code&gt; is another regular expression that defines the legal forms for package names.</source>
          <target state="translated">ここで、 &lt;code&gt;$PKGNAME&lt;/code&gt; は、パッケージ名の有効な形式を定義する別の正規表現です。</target>
        </trans-unit>
        <trans-unit id="d4809a830fe1a3429edeff7f9faf0dee554dbec4" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$parser&lt;/code&gt; is a reference to the parser object, &lt;code&gt;$text&lt;/code&gt; is the text-string encountered, and &lt;code&gt;$ptree_node&lt;/code&gt; is a reference to the current node in the parse-tree (usually an interior-sequence object or else the top-level node of the parse-tree).</source>
          <target state="translated">ここで、 &lt;code&gt;$parser&lt;/code&gt; はパーサーオブジェクトへの参照、 &lt;code&gt;$text&lt;/code&gt; は検出されたテキスト文字列、 &lt;code&gt;$ptree_node&lt;/code&gt; は解析ツリー内の現在のノードへの参照（通常はインテリアシーケンスオブジェクトまたはそれ以外の最上位ノード）解析ツリー）。</target>
        </trans-unit>
        <trans-unit id="d298264d5947d99205d766cae90ed2313035af45" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$parser&lt;/code&gt; is a reference to the parser object, and &lt;code&gt;$ptree&lt;/code&gt; is a reference to the parse-tree object.</source>
          <target state="translated">ここで、 &lt;code&gt;$parser&lt;/code&gt; はパーサーオブジェクトへの参照であり、 &lt;code&gt;$ptree&lt;/code&gt; は解析ツリーオブジェクトへの参照です。</target>
        </trans-unit>
        <trans-unit id="5957a8e4bc7c51d1071eb22f8fe1b48116af9153" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$parser&lt;/code&gt; is a reference to the parser object, and &lt;code&gt;$sequence&lt;/code&gt; is a reference to the interior-sequence object. [</source>
          <target state="translated">ここで、 &lt;code&gt;$parser&lt;/code&gt; はパーサーオブジェクトへの参照であり、 &lt;code&gt;$sequence&lt;/code&gt; はinterior-sequenceオブジェクトへの参照です。[</target>
        </trans-unit>
        <trans-unit id="15d410b2ce2184b4347be136da68a7719dc0ad85" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$source&lt;/code&gt; is the filespec of the file being installed. &lt;code&gt;$target&lt;/code&gt; is where it is being installed to, and &lt;code&gt;$uninstalled&lt;/code&gt; is any shadow file that is in &lt;code&gt;@INC&lt;/code&gt; or &lt;code&gt;$ENV{PERL5LIB}&lt;/code&gt; or other standard locations, and &lt;code&gt;$pattern&lt;/code&gt; is the pattern that caused a source file to be skipped. In future more keys will be added, such as to show created directories, however this requires changes in other modules and must therefore wait.</source>
          <target state="translated">どこ &lt;code&gt;$source&lt;/code&gt; ファイルのファイル指定がインストールされています。 &lt;code&gt;$target&lt;/code&gt; はインストール先、 &lt;code&gt;$uninstalled&lt;/code&gt; は &lt;code&gt;@INC&lt;/code&gt; または &lt;code&gt;$ENV{PERL5LIB}&lt;/code&gt; またはその他の標準の場所にあるシャドウファイルで、 &lt;code&gt;$pattern&lt;/code&gt; はソースファイルがスキップされる原因となったパターンです。将来的には、作成されたディレクトリを表示するなど、さらに多くのキーが追加される予定ですが、これには他のモジュールでの変更が必要なため、待機する必要があります。</target>
        </trans-unit>
        <trans-unit id="a731b563e701bcb16a123ecab85071d224c107aa" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$where_to_export&lt;/code&gt; is an integer telling how far up the calling stack to export your symbols, and &lt;code&gt;@what_to_export&lt;/code&gt; is an array telling what symbols *to* export (usually this is &lt;code&gt;@_&lt;/code&gt; ). The &lt;code&gt;$package&lt;/code&gt; argument is currently unused.</source>
          <target state="translated">どこ &lt;code&gt;$where_to_export&lt;/code&gt; あなたのシンボルをエクスポートする方法をはるかに呼び出しスタックまで言っ整数であり、 &lt;code&gt;@what_to_export&lt;/code&gt; は *輸出（通常はこれがあると、アレイ占い何記号*である &lt;code&gt;@_&lt;/code&gt; ）。 &lt;code&gt;$package&lt;/code&gt; 引数は現在使用されていません。</target>
        </trans-unit>
        <trans-unit id="dce597b1bf61ba99754a405ba990481dcf448258" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;$where_to_export&lt;/code&gt; is an integer telling how far up the calling stack to export your symbols, and &lt;code&gt;@what_to_export&lt;/code&gt; is an array telling what symbols *to* export (usually this is &lt;code&gt;@_&lt;/code&gt;). The &lt;code&gt;$package&lt;/code&gt; argument is currently unused.</source>
          <target state="translated">ここで、 &lt;code&gt;$where_to_export&lt;/code&gt; &lt;code&gt;@what_to_export&lt;/code&gt; は、呼び出しスタックのどこまでシンボルをエクスポートするかを示す整数であり、@ what_to_exportは、どのシンボルをエクスポートするかを示す配列です（通常は &lt;code&gt;@_&lt;/code&gt; です）。 &lt;code&gt;$package&lt;/code&gt; 引数は現在使用されていません。</target>
        </trans-unit>
        <trans-unit id="48e1c4094f5de010428575d8622f327516bc33ae" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;HERE&lt;/code&gt; can be replaced by other identifiers like with normal Perl HERE-docs. All details below about the typemap textual format remain valid.</source>
          <target state="translated">どこ &lt;code&gt;HERE&lt;/code&gt; 通常のPerl HERE-docsのと同じように他の識別子で置き換えることができます。タイプマップのテキスト形式に関する以下のすべての詳細は引き続き有効です。</target>
        </trans-unit>
        <trans-unit id="721c549e68ff19e2994566a74f0b393f57d254d1" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;MyParser&lt;/code&gt; is some subclass of &lt;b&gt;Pod::Parser&lt;/b&gt;.</source>
          <target state="translated">どこ &lt;code&gt;MyParser&lt;/code&gt; は、一部のサブクラスである&lt;b&gt;ポッド:: Parserが&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="b03bee177daa8ad34db5c35f4571b92ff18e039c" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;SP&lt;/code&gt; is the macro that represents the local copy of the stack pointer, and &lt;code&gt;num&lt;/code&gt; is the number of elements the stack should be extended by.</source>
          <target state="translated">ここで、 &lt;code&gt;SP&lt;/code&gt; はスタックポインタのローカルコピーを表すマクロであり、 &lt;code&gt;num&lt;/code&gt; はスタックを拡張する要素の数です。</target>
        </trans-unit>
        <trans-unit id="de39703cfc1e976397e4c498b4e76e18c8f99017" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;a&lt;/code&gt; is the</source>
          <target state="translated">ここで &lt;code&gt;a&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="afb48bc36d6a70b33cd141b99f73b7c8ea6d9b0d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;err_msg&lt;/code&gt; is an SV.</source>
          <target state="translated">ここで、 &lt;code&gt;err_msg&lt;/code&gt; はSVです。</target>
        </trans-unit>
        <trans-unit id="6950fd3c6bf4eda6d69d7afe08226888f67c407d" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;function&lt;/code&gt; is the name of the function you want to memoize, or a reference to it. &lt;code&gt;memoize&lt;/code&gt; returns a reference to the new, memoized version of the function, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on a non-fatal error. At present, there are no non-fatal errors, but there might be some in the future.</source>
          <target state="translated">ここで &lt;code&gt;function&lt;/code&gt; は、メモする関数の名前、またはその関数への参照です。 &lt;code&gt;memoize&lt;/code&gt; は、関数の新しいメモ化されたバージョンへの参照、または致命的でないエラーの場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。現在、致命的ではないエラーはありませんが、将来的には発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7a5a64f1351b446f2f76e340c1ebbe7f3b653197" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;function&lt;/code&gt; is the name of the function you want to memoize, or a reference to it. &lt;code&gt;memoize&lt;/code&gt; returns a reference to the new, memoized version of the function, or &lt;code&gt;undef&lt;/code&gt; on a non-fatal error. At present, there are no non-fatal errors, but there might be some in the future.</source>
          <target state="translated">ここで、 &lt;code&gt;function&lt;/code&gt; は、メモ化する関数の名前、またはその関数への参照です。 &lt;code&gt;memoize&lt;/code&gt; は、関数の新しいメモ化されたバージョンへの参照を返すか、致命的でないエラーの場合は &lt;code&gt;undef&lt;/code&gt; を返します。現在、致命的でないエラーはありませんが、将来的には発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9baeb27f249365fedd4a037a93595125d9a6014e" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;rho&lt;/code&gt; is the distance to the origin, and &lt;code&gt;theta&lt;/code&gt; the angle between the vector and the</source>
          <target state="translated">ここで、 &lt;code&gt;rho&lt;/code&gt; は原点までの距離、 &lt;code&gt;theta&lt;/code&gt; はベクトルと</target>
        </trans-unit>
        <trans-unit id="865c6ca20b748c53f20376d13a4298c7b6a923a6" translate="yes" xml:space="preserve">
          <source>where FALLBACK can take any of the three values TRUE, FALSE, or UNDEF. If you do not set any FALLBACK value when using OVERLOAD, it defaults to UNDEF. FALLBACK is not used except when one or more functions using OVERLOAD have been defined. Please see &lt;a href=&quot;overload#fallback&quot;&gt;&quot;fallback&quot; in overload&lt;/a&gt; for more details.</source>
          <target state="translated">ここで、FALLBACKは、TRUE、FALSE、またはUNDEFの3つの値のいずれかを取ることができます。OVERLOADの使用時にFALLBACK値を設定しない場合、デフォルトでUNDEFになります。FALLBACKは、OVERLOADを使用する1つ以上の関数が定義されている場合を除いて使用されません。詳細については&lt;a href=&quot;overload#fallback&quot;&gt;、オーバーロードの「フォールバック」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fd9e76180b06bd2a44ffe663c1ff849e0a103ca7" translate="yes" xml:space="preserve">
          <source>where FALLBACK can take any of the three values TRUE, FALSE, or UNDEF. If you do not set any FALLBACK value when using OVERLOAD, it defaults to UNDEF. FALLBACK is not used except when one or more functions using OVERLOAD have been defined. Please see &lt;a href=&quot;overload#fallback&quot;&gt;fallback in overload&lt;/a&gt; for more details.</source>
          <target state="translated">ここで、FALLBACKは、TRUE、FALSE、またはUNDEFの3つの値のいずれかを取ることができます。OVERLOADの使用時にFALLBACK値を設定しない場合、デフォルトでUNDEFになります。OVERLOADを使用する1つ以上の関数が定義されている場合を除いて、FALLBACKは使用されません。詳細については&lt;a href=&quot;overload#fallback&quot;&gt;、オーバーロードのフォールバック&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="50396b7e08b271e8034d662ba4fd67f410cb1b19" translate="yes" xml:space="preserve">
          <source>where a more complete solution would split the URL into components and apply a full s/// substitution only to the appropriate parts.</source>
          <target state="translated">より完全な解決策は、URLをコンポーネントに分割し、適切な部分のみに完全なs///置換を適用することです。</target>
        </trans-unit>
        <trans-unit id="21585635f4365441aa2484d0f4019c953a7d7b86" translate="yes" xml:space="preserve">
          <source>where chr(0xff) is expected but the test fails because the result is chr(0xff). Exactly.</source>
          <target state="translated">ここでは chr(0xff)が期待されているが、結果が chr(0xff)であるため、テストは失敗する。その通りです。</target>
        </trans-unit>
        <trans-unit id="16f78d439c89dcc67cc6d31385ff3dcec533675f" translate="yes" xml:space="preserve">
          <source>where each successive 'list add' option will push the value of add into array ref $list-&amp;gt;{'add'}. The result would be like</source>
          <target state="translated">ここで、それぞれの「リスト追加」オプションは、addの値を配列参照$ list-&amp;gt; {'add'}にプッシュします。結果は次のようになります</target>
        </trans-unit>
        <trans-unit id="bc78225b4201f5ea13094d1b52390630480faaae" translate="yes" xml:space="preserve">
          <source>where its processing the just-executed CV. Note that before it decrements the CV's reference count, it nulls the &lt;code&gt;blk_sub.cv&lt;/code&gt;. This means that if it re-enters, the CV won't be freed twice. It also means that you can't rely on such type-specific fields having useful values after the return from &lt;code&gt;cx_popfoo&lt;/code&gt;.</source>
          <target state="translated">実行したばかりのCVを処理します。CVの参照カウントをデクリメントする前に、 &lt;code&gt;blk_sub.cv&lt;/code&gt; をヌルにすることに注意してください。これは、再入場した場合、CVが2回解放されないことを意味します。また、 &lt;code&gt;cx_popfoo&lt;/code&gt; から戻った後、有用な値を持つこのようなタイプ固有のフィールドに依存できないことも意味します。</target>
        </trans-unit>
        <trans-unit id="517c0898eef6d5914aa381031eb301a948ecc075" translate="yes" xml:space="preserve">
          <source>where such changes can be applied by the means of cherry-picking from blead.</source>
          <target state="translated">そのような変更が、ブリードからのチェリーピッキングの手段によって適用され得るところ。</target>
        </trans-unit>
        <trans-unit id="c1ba074422bf23c3944014acd8f065e730791214" translate="yes" xml:space="preserve">
          <source>where that number is the command number, and which you'd use to access with the built-in &lt;b&gt;csh&lt;/b&gt;-like history mechanism. For example, &lt;code&gt;!17&lt;/code&gt; would repeat command number 17. The depth of the angle brackets indicates the nesting depth of the debugger. You could get more than one set of brackets, for example, if you'd already at a breakpoint and then printed the result of a function call that itself has a breakpoint, or you step into an expression via &lt;code&gt;s/n/t
expression&lt;/code&gt; command.</source>
          <target state="translated">ここで、その番号はコマンド番号であり、組み込みの&lt;b&gt;cshの&lt;/b&gt;ような履歴メカニズムでアクセスするために使用します。たとえば、 &lt;code&gt;!17&lt;/code&gt; はコマンド番号17を繰り返します。山括弧の深さはデバッガーのネストの深さを示します。たとえば、すでにブレークポイントにいて、それ自体がブレークポイントを持つ関数呼び出しの結果を出力した場合、または &lt;code&gt;s/n/t expression&lt;/code&gt; コマンドを介して式にステップインした場合、複数のブラケットのセットを取得できます。。</target>
        </trans-unit>
        <trans-unit id="fe3cffb107c47b95f0ae454e3de2e7e1743bb5ce" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;&quot;|&quot;&lt;/code&gt; is a binary operator with an operand on the right, but no operand on the left.</source>
          <target state="translated">どこ &lt;code&gt;&quot;|&quot;&lt;/code&gt; 右側にオペランドを持つ2項演算子ですが、左側にオペランドはありません。</target>
        </trans-unit>
        <trans-unit id="b244c23995363daf148f79037f34977ba5711e52" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;TYPEMAP&lt;/code&gt; keyword must appear in the first column of a new line.</source>
          <target state="translated">どこ &lt;code&gt;TYPEMAP&lt;/code&gt; のキーワードは新しい行の最初の列に表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="764e081905d06edddf30c836b21ee0f9eb49e89c" translate="yes" xml:space="preserve">
          <source>where the &lt;code&gt;minlen&lt;/code&gt; would be 3 but &lt;code&gt;minlenret&lt;/code&gt; would only be 2 as the \d is required to match but is not actually included in the matched content. This distinction is particularly important as the substitution logic uses the &lt;code&gt;minlenret&lt;/code&gt; to tell if it can do in-place substitutions (these can result in considerable speed-up).</source>
          <target state="translated">ここで、 &lt;code&gt;minlen&lt;/code&gt; は3ですが、\ dは一致する必要があるが、実際には一致するコンテンツに含まれていないため、 &lt;code&gt;minlenret&lt;/code&gt; は2のみになります。この区別は特に重要です。置換ロジックは &lt;code&gt;minlenret&lt;/code&gt; を使用して、インプレース置換を実行できるかどうかを判断するためです（これらは大幅なスピードアップにつながります）。</target>
        </trans-unit>
        <trans-unit id="e11e55dd4712573d987efd1c0884f0c120edda61" translate="yes" xml:space="preserve">
          <source>where the Perl equivalent of &lt;code&gt;register_fatal&lt;/code&gt; and the callback it registers, &lt;code&gt;pcb1&lt;/code&gt; , might look like this</source>
          <target state="translated">Perlの &lt;code&gt;register_fatal&lt;/code&gt; に相当するものと、それが登録するコールバック &lt;code&gt;pcb1&lt;/code&gt; は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="61287e162f491b30e9853333796fa2220fb121cf" translate="yes" xml:space="preserve">
          <source>where the Perl equivalent of &lt;code&gt;register_fatal&lt;/code&gt; and the callback it registers, &lt;code&gt;pcb1&lt;/code&gt;, might look like this</source>
          <target state="translated">ここで、 &lt;code&gt;register_fatal&lt;/code&gt; に相当するPerlとそれが登録するコールバック &lt;code&gt;pcb1&lt;/code&gt; は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="34cc28c0ed6b3b975c1f8b2f5bfccf3f2b674b4a" translate="yes" xml:space="preserve">
          <source>where the first argument, an &lt;code&gt;SV*&lt;/code&gt; , must be a reference, and the second argument is a stash. The returned &lt;code&gt;SV*&lt;/code&gt; can now be used in the same way as any other SV.</source>
          <target state="translated">最初の引数 &lt;code&gt;SV*&lt;/code&gt; は参照でなければならず、2番目の引数はスタッシュです。返された &lt;code&gt;SV*&lt;/code&gt; は、他のSVと同じ方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="01edd5ad17b59563e8d9b2233d38e96f6dd56aff" translate="yes" xml:space="preserve">
          <source>where the first argument, an &lt;code&gt;SV*&lt;/code&gt;, must be a reference, and the second argument is a stash. The returned &lt;code&gt;SV*&lt;/code&gt; can now be used in the same way as any other SV.</source>
          <target state="translated">ここで、最初の引数 &lt;code&gt;SV*&lt;/code&gt; は参照である必要があり、2番目の引数は隠し場所です。返された &lt;code&gt;SV*&lt;/code&gt; は、他のSVと同じように使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="fb8f1012228e6574e355ca23612690ce9ced4433" translate="yes" xml:space="preserve">
          <source>where the format expects to process a byte (a character with a value below 256), but a higher value was provided instead. Perl uses the value modulus 256 instead, as if you had provided:</source>
          <target state="translated">ここで、フォーマットはバイト(256以下の値を持つ文字)を処理することを期待していますが、代わりに高い値が提供されました。Perl は、代わりに 256 の値を指定した場合と同じように、256 の値を使用します。</target>
        </trans-unit>
        <trans-unit id="b51b446492bdddf5835c8b7127ee3a8fcffa16ed" translate="yes" xml:space="preserve">
          <source>where the format expects to process a sequence of bytes (character with a value below 256), but some of the characters had a higher value. Perl uses the character values modulus 256 instead, as if you had provided:</source>
          <target state="translated">ここで、フォーマットはバイト列(256以下の値を持つ文字)を処理することを期待していますが、一部の文字はより高い値を持っていました。Perl は、文字値モジュラス 256 を指定した場合と同様に、代わりに文字値モジュラス 256 を使用します。</target>
        </trans-unit>
        <trans-unit id="5c49be26fe2412d08b959e58ce62ecd11e8effd9" translate="yes" xml:space="preserve">
          <source>where these arguments mean:</source>
          <target state="translated">これらの引数が意味するところ</target>
        </trans-unit>
        <trans-unit id="4fe303f9adde4840e097ed0d238372b72ff5d199" translate="yes" xml:space="preserve">
          <source>where those dot files live</source>
          <target state="translated">ドットファイルのあるところ</target>
        </trans-unit>
        <trans-unit id="00a755e878e51b6d3d95aae065147ee2272798c2" translate="yes" xml:space="preserve">
          <source>where you'd otherwise have to write</source>
          <target state="translated">を書かなければならないところに</target>
        </trans-unit>
        <trans-unit id="09c0979062616fd0606b29296df335c67d5531c0" translate="yes" xml:space="preserve">
          <source>whereupon we might see something like this, with each pair of hex digits corresponding to a byte:</source>
          <target state="translated">これにより、各16進数のペアがバイトに対応して、次のようなものが表示されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6fac826754ebef5d0de7380bb2ebdf79ac73e626" translate="yes" xml:space="preserve">
          <source>whether the contents are interpreted as a signed or unsigned number,</source>
          <target state="translated">内容を符号付きか符号なしかで解釈するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="dc2033256fe72f3be5253a7be85085b830e059f5" translate="yes" xml:space="preserve">
          <source>whether the next byte is in the range 0x80 - 0xBF. If so, the parser may conclude that this file is in UTF-8, and all highbit sequences in the file should be assumed to be UTF-8. Otherwise the parser should treat the file as being in CP-1252. (A better check, and which works on EBCDIC platforms as well, is to pass a copy of the sequence to &lt;a href=&quot;utf8&quot;&gt;utf8::decode()&lt;/a&gt; which performs a full validity check on the sequence and returns TRUE if it is valid UTF-8, FALSE otherwise. This function is always pre-loaded, is fast because it is written in C, and will only get called at most once, so you don't need to avoid it out of performance concerns.) In the unlikely circumstance that the first highbit sequence in a truly non-UTF-8 file happens to appear to be UTF-8, one can cater to our heuristic (as well as any more intelligent heuristic) by prefacing that line with a comment line containing a highbit sequence that is clearly</source>
          <target state="translated">次のバイトが0x80-0xBFの範囲にあるかどうか。その場合、パーサーはこのファイルがUTF-8であると結論付ける可能性があり、ファイル内のすべてのハイビットシーケンスはUTF-8であると想定する必要があります。そうでない場合、パーサーはファイルをCP-1252にあるものとして扱う必要があります。（より良いチェックであり、EBCDICプラットフォームでも機能するのは、シーケンスのコピーを&lt;a href=&quot;utf8&quot;&gt;utf8 :: decode（）&lt;/a&gt;に渡すことです。シーケンスの完全な妥当性チェックを実行し、それが有効なUTF-8の場合はTRUEを返し、それ以外の場合はFALSEを返します。この関数は常にプリロードされており、Cで記述されているため高速であり、呼び出されるのはせいぜい1回だけなので、パフォーマンスの問題からそれを回避する必要はありません。）まれな状況で、最初のハイビットシーケンス本当に非UTF-8ファイルでUTF-8のように見える場合、その行の先頭に、明確なハイビットシーケンスを含むコメント行を付けることで、ヒューリスティック（およびよりインテリジェントなヒューリスティック）に対応できます。</target>
        </trans-unit>
        <trans-unit id="13f9423890a306b627963ea70ef49e8541a4438e" translate="yes" xml:space="preserve">
          <source>whether we should try to change or remove those dot files</source>
          <target state="translated">ドットファイルを変更したり削除したりするべきかどうか</target>
        </trans-unit>
        <trans-unit id="ed04ff4dabf1e2d4cd6b89136c2b24dec27ecca4" translate="yes" xml:space="preserve">
          <source>which</source>
          <target state="translated">which</target>
        </trans-unit>
        <trans-unit id="173b78e36735c0ab16d3f825ed52957ec9da8001" translate="yes" xml:space="preserve">
          <source>which are subdirectories of directories found in &lt;code&gt;@INC&lt;/code&gt; --</source>
          <target state="translated">&lt;code&gt;@INC&lt;/code&gt; で見つかったディレクトリのサブディレクトリです-</target>
        </trans-unit>
        <trans-unit id="d060cbd0fbb1156378e849bb6c04d6e687e74342" translate="yes" xml:space="preserve">
          <source>which can also be done with &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; which is made to transform one list into another:</source>
          <target state="translated">これは、リストを別のリストに変換するために &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; されたmap（）でも実行できます。</target>
        </trans-unit>
        <trans-unit id="9771ba06168179e3c40de1fc7ee4c2de163bcd23" translate="yes" xml:space="preserve">
          <source>which can also be done with &lt;code&gt;map()&lt;/code&gt; which is made to transform one list into another:</source>
          <target state="translated">これは、あるリストを別のリストに変換するために &lt;code&gt;map()&lt;/code&gt; されたmap（）を使用して実行することもできます。</target>
        </trans-unit>
        <trans-unit id="679cb19369252215832643aae001a33e00c3edb8" translate="yes" xml:space="preserve">
          <source>which can just be converted to:</source>
          <target state="translated">に変換すればいいだけです。</target>
        </trans-unit>
        <trans-unit id="1058597fc80ec1ae6c9468976c2082b39dc74418" translate="yes" xml:space="preserve">
          <source>which can print filenames terminated by the null character, you can say this:</source>
          <target state="translated">がヌル文字で終わるファイル名を表示できるようにするには、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="0a1bf5f9e60cb26d6cb10d695574f7486a7350a5" translate="yes" xml:space="preserve">
          <source>which can work together</source>
          <target state="translated">相性の良い</target>
        </trans-unit>
        <trans-unit id="b281cfce8512044c5aa4af3d8f50d69b4ce2f381" translate="yes" xml:space="preserve">
          <source>which contain information about the per-op meanings of the bits in the op_private field.</source>
          <target state="translated">これは op_private フィールドのビットごとの意味に関する情報を含んでいます。</target>
        </trans-unit>
        <trans-unit id="26e6474c54d74f5e1b54fbb84567108ec9ec0be7" translate="yes" xml:space="preserve">
          <source>which contains a list of newXS() calls near the end. Removing unnecessary calls, and rerunning</source>
          <target state="translated">これは、最後近くの newXS()の呼び出しのリストを含んでいます。不要な呼び出しを削除して</target>
        </trans-unit>
        <trans-unit id="3ba7f1a2c7d9e13feaebe2336a9a9752e948dcc6" translate="yes" xml:space="preserve">
          <source>which contains the profiling data collected during the execution.</source>
          <target state="translated">実行中に収集されたプロファイリングデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="209bf9b2c21856efbe58794a447fa26435ea0055" translate="yes" xml:space="preserve">
          <source>which could also be written this way, using a trick that's come to be known as the Schwartzian Transform:</source>
          <target state="translated">シュバルツ変換として知られるようになったトリックを使って、このように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="75ba4f37004a47ec33e2d83893fc18c49f7a2c2b" translate="yes" xml:space="preserve">
          <source>which did not load a particular DLL yet. This is why the DLLs are mapped to the shared memory region.</source>
          <target state="translated">は、まだ特定のDLLをロードしていませんでした。これが、DLLが共有メモリ領域にマップされている理由です。</target>
        </trans-unit>
        <trans-unit id="7b963e7a5bc43a79a319cd65245b0963a9a74082" translate="yes" xml:space="preserve">
          <source>which does nothing, but succeeds on all the &quot;usual&quot; build targets. To do so, use</source>
          <target state="translated">これは何もしませんが、すべての &quot;通常の &quot;ビルドターゲットで成功します。これを行うには</target>
        </trans-unit>
        <trans-unit id="1e68ca264c19e5e1287272ae8a0a048239c69afc" translate="yes" xml:space="preserve">
          <source>which has a length of 43. So, the properly padded version is</source>
          <target state="translated">の長さが43になっています。なので、きちんとパッドを入れたものは</target>
        </trans-unit>
        <trans-unit id="97b9b7ce1f9f8564271626441b5ed04c89fe2ee5" translate="yes" xml:space="preserve">
          <source>which has the short form</source>
          <target state="translated">を持つ短い形式の</target>
        </trans-unit>
        <trans-unit id="cf2897e01293c7352f75dce51f4052d41ff51799" translate="yes" xml:space="preserve">
          <source>which includes newly-installed via &lt;code&gt;Bundle::OS2_default&lt;/code&gt; modules. Doing testing via &lt;code&gt;CPAN.pm&lt;/code&gt; is going to be painfully slow, since it statically links a new executable per XS extension.</source>
          <target state="translated">&lt;code&gt;Bundle::OS2_default&lt;/code&gt; モジュールを介して新しくインストールされたものを含みます。XS拡張ごとに新しい実行可能ファイルを静的にリンクするため、 &lt;code&gt;CPAN.pm&lt;/code&gt; を介してテストを行うのは非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="740279f94d278254c20a1964b766588db7905a52" translate="yes" xml:space="preserve">
          <source>which interact with the memory allocator in other ways than via malloc(), realloc(), free(), calloc(), sbrk() and brk();</source>
          <target state="translated">これらは、malloc()、realloc()、free()、calloc()、sbrk()、brk()以外の方法でメモリアロケータと相互作用します。</target>
        </trans-unit>
        <trans-unit id="27e6eae0fd902584be95e5d4c59ccdf92b2c93d3" translate="yes" xml:space="preserve">
          <source>which is Perl shorthand for the more explicitly written version:</source>
          <target state="translated">これは、より明示的に書かれたバージョンのPerlの速記法です。</target>
        </trans-unit>
        <trans-unit id="e2c5c74f3c46665187c755c53e173135dab99bf8" translate="yes" xml:space="preserve">
          <source>which is also expressed by this formula:</source>
          <target state="translated">もこの式で表されます。</target>
        </trans-unit>
        <trans-unit id="04c6ac4120301d7049af98011b0e572414db64b0" translate="yes" xml:space="preserve">
          <source>which is equivalent to</source>
          <target state="translated">に相当する</target>
        </trans-unit>
        <trans-unit id="16a66c1b8256121eec60a422104c678c527a1b68" translate="yes" xml:space="preserve">
          <source>which is even the same as</source>
          <target state="translated">に等しい</target>
        </trans-unit>
        <trans-unit id="40217363f21b2e6fa15982c559837fa626b0eb67" translate="yes" xml:space="preserve">
          <source>which is exactly what we had defined for negative real numbers above. The &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; returns only one of the solutions: if you want the both, use the &lt;code&gt;root&lt;/code&gt; function.</source>
          <target state="translated">これは、上記の負の実数に対して定義したとおりです。 &lt;code&gt;&lt;a href=&quot;../functions/sqrt&quot;&gt;sqrt&lt;/a&gt;&lt;/code&gt; リターンのソリューションの一つだけ：あなたは両方をしたい場合は、使用して &lt;code&gt;root&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="04a53ce2bf2b8f46b8bc7fb7b7d5f6202cda6b7a" translate="yes" xml:space="preserve">
          <source>which is exactly what we had defined for negative real numbers above. The &lt;code&gt;sqrt&lt;/code&gt; returns only one of the solutions: if you want the both, use the &lt;code&gt;root&lt;/code&gt; function.</source>
          <target state="translated">これは、上記の負の実数に対して定義したものとまったく同じです。 &lt;code&gt;sqrt&lt;/code&gt; リターンのソリューションの一つだけ：あなたは両方をしたい場合は、使用して &lt;code&gt;root&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="41660e5f3a05c257d71cd236ed7137b3831af720" translate="yes" xml:space="preserve">
          <source>which is generated from</source>
          <target state="translated">から生成される</target>
        </trans-unit>
        <trans-unit id="ed4894b8ab4c596c6c6382023f8f4837da06efce" translate="yes" xml:space="preserve">
          <source>which is hard-wired to replace all occurrences of the string &lt;code&gt;&quot;Joe&quot;&lt;/code&gt; to &lt;code&gt;&quot;Jim&quot;&lt;/code&gt; . Not particularly Useful, but it is the first example and I wanted to keep it simple.</source>
          <target state="translated">これは、出現するすべての文字列 &lt;code&gt;&quot;Joe&quot;&lt;/code&gt; を &lt;code&gt;&quot;Jim&quot;&lt;/code&gt; に置き換えるようにハードワイヤードされています。特に便利ではありませんが、これは最初の例であり、単純にしたかったのです。</target>
        </trans-unit>
        <trans-unit id="a91b8e0a1bd14bcc8672dcb1bfa802fc08979c6c" translate="yes" xml:space="preserve">
          <source>which is hard-wired to replace all occurrences of the string &lt;code&gt;&quot;Joe&quot;&lt;/code&gt; to &lt;code&gt;&quot;Jim&quot;&lt;/code&gt;. Not particularly Useful, but it is the first example and I wanted to keep it simple.</source>
          <target state="translated">これは、文字列 &lt;code&gt;&quot;Joe&quot;&lt;/code&gt; から &lt;code&gt;&quot;Jim&quot;&lt;/code&gt; へのすべての出現箇所を置き換えるように配線されています。特に便利ではありませんが、これは最初の例であり、シンプルにしたいと思いました。</target>
        </trans-unit>
        <trans-unit id="a4f1633dff7d510a448e9aaeeb40cb63e6e279d1" translate="yes" xml:space="preserve">
          <source>which is not, consequently, deparsed correctly.</source>
          <target state="translated">は、結果的に正しくデパーズされていません。</target>
        </trans-unit>
        <trans-unit id="d53450b0fdca8bc7a9a33283360f4cc8874d6819" translate="yes" xml:space="preserve">
          <source>which is presumably easier to read than the old way:</source>
          <target state="translated">の方が読みやすいのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="590e9b690bb3d4c0ee4fe08d74808195b747676b" translate="yes" xml:space="preserve">
          <source>which is probably not what you were expecting. Unfortunately at least one reasonably common and modern C compiler does &quot;real backward compatibility&quot; here, in AIX that is what still happens even though the rest of the AIX compiler is very happily C89.</source>
          <target state="translated">これはおそらくあなたが期待していたものではありません。残念なことに、少なくとも 1 つの合理的に一般的な最新の C コンパイラがここで &quot;本当の下位互換性&quot; を行っていますが、AIX では、他の AIX コンパイラが C89 であるにもかかわらず、それはまだ起こっています。</target>
        </trans-unit>
        <trans-unit id="29eb09005f5e9aeeb936021e842907d6266dcfda" translate="yes" xml:space="preserve">
          <source>which is ready to be printed.</source>
          <target state="translated">を印刷する準備ができています。</target>
        </trans-unit>
        <trans-unit id="b67e8264d8ed281cc3a88a4cee5125c080a44db5" translate="yes" xml:space="preserve">
          <source>which is the 200-ish (as of Unicode 13.0) CJK characters that aren't ideographs.</source>
          <target state="translated">これは、(Unicode 13.0 の時点で)表意文字ではない 200 文字程度の日中韓文字です。</target>
        </trans-unit>
        <trans-unit id="457319eaa9e4f3b728ed192e5fdb2e515988f305" translate="yes" xml:space="preserve">
          <source>which is the correct answer. This example illustrates that it is important not only to match what is desired, but to reject what is not desired.</source>
          <target state="translated">が正解であることを示しています。この例では、望まれるものに合わせるだけでなく、望まれないものを拒否することが重要であることを示しています。</target>
        </trans-unit>
        <trans-unit id="73fd6fe245719ff203e7182e5c8ac2192e03ce30" translate="yes" xml:space="preserve">
          <source>which is the short form of</source>
          <target state="translated">の短縮形である</target>
        </trans-unit>
        <trans-unit id="2b2a157cb124d5116a790751a46e4a73627b6581" translate="yes" xml:space="preserve">
          <source>which is true (&lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; has the regular meaning for real number, i.e. stands for the absolute value). This example explains why the norm of &lt;code&gt;z&lt;/code&gt; is noted &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs(z)&lt;/a&gt;&lt;/code&gt;: it extends the &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; function to complex numbers, yet is the regular &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; we know when the complex number actually has no imaginary part... This justifies</source>
          <target state="translated">これは真です（ &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; は実数に対して通常の意味を持ちます。つまり、絶対値を表します）。この例は、なぜ &lt;code&gt;z&lt;/code&gt; のノルムが &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs(z)&lt;/a&gt;&lt;/code&gt; と表記されるのかを説明します。これは、 &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; 関数を複素数に拡張しますが、複素数が実際に虚数部を持たないときに知っている通常の &lt;code&gt;&lt;a href=&quot;../functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; です...これは正当化します</target>
        </trans-unit>
        <trans-unit id="ab8183ef99ece94a69bea307cb785e6988fea368" translate="yes" xml:space="preserve">
          <source>which is true (&lt;code&gt;abs&lt;/code&gt; has the regular meaning for real number, i.e. stands for the absolute value). This example explains why the norm of &lt;code&gt;z&lt;/code&gt; is noted &lt;code&gt;abs(z)&lt;/code&gt;: it extends the &lt;code&gt;abs&lt;/code&gt; function to complex numbers, yet is the regular &lt;code&gt;abs&lt;/code&gt; we know when the complex number actually has no imaginary part... This justifies</source>
          <target state="translated">これは本当です（ &lt;code&gt;abs&lt;/code&gt; は実数の通常の意味を持ちます。つまり、絶対値を表します）。この例は、 &lt;code&gt;z&lt;/code&gt; のノルムが &lt;code&gt;abs(z)&lt;/code&gt; と記されている理由を説明しています。これは、 &lt;code&gt;abs&lt;/code&gt; 関数を複素数に拡張しますが、複素数に実際に虚数部がない場合にわかっている通常の &lt;code&gt;abs&lt;/code&gt; です...これは正当化されます</target>
        </trans-unit>
        <trans-unit id="3080d1b7e175b0f68ccca8d1ffcce6a17814f888" translate="yes" xml:space="preserve">
          <source>which is visible in other functions called from that subroutine</source>
          <target state="translated">は、そのサブルーチンから呼び出された他の関数で表示されます。</target>
        </trans-unit>
        <trans-unit id="f78cd391c699a6564a6185a15b2c00459cb4b5f7" translate="yes" xml:space="preserve">
          <source>which lasts until the end of that BLOCK.</source>
          <target state="translated">そのブロックの最後まで続く。</target>
        </trans-unit>
        <trans-unit id="400ae171fcca992b111ee0c9eaa8e6bbbbb647ec" translate="yes" xml:space="preserve">
          <source>which lasts until the end of that BLOCK. Note that this doesn't mean everything is an integer, merely that Perl will use integer operations for arithmetic, comparison, and bitwise operators. For example, even under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; , if you take the &lt;code&gt;&lt;a href=&quot;functions/sqrt&quot;&gt;sqrt(2)&lt;/a&gt;&lt;/code&gt;, you'll still get &lt;code&gt;1.4142135623731&lt;/code&gt; or so.</source>
          <target state="translated">これはそのブロックの終わりまで続きます。これは、すべてが整数であることを意味するのではなく、Perlが算術、比較、およびビットごとの演算子に整数演算を使用するだけであることに注意してください。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用し&lt;/a&gt;ていても、 &lt;code&gt;&lt;a href=&quot;functions/sqrt&quot;&gt;sqrt(2)&lt;/a&gt;&lt;/code&gt; を使用すると、 &lt;code&gt;1.4142135623731&lt;/code&gt; 程度になります。</target>
        </trans-unit>
        <trans-unit id="f725a08ef999a54f98bdd936247bc4de35ba04fd" translate="yes" xml:space="preserve">
          <source>which lasts until the end of that BLOCK. Note that this doesn't mean everything is an integer, merely that Perl will use integer operations for arithmetic, comparison, and bitwise operators. For example, even under &lt;code&gt;use integer&lt;/code&gt;, if you take the &lt;code&gt;sqrt(2)&lt;/code&gt;, you'll still get &lt;code&gt;1.4142135623731&lt;/code&gt; or so.</source>
          <target state="translated">それはそのブロックの終わりまで続きます。これは、すべてが整数であることを意味するのではなく、Perlが算術演算子、比較演算子、およびビット演算子に整数演算を使用することを意味するだけであることに注意してください。たとえば、 &lt;code&gt;use integer&lt;/code&gt; を使用している場合でも、 &lt;code&gt;sqrt(2)&lt;/code&gt; を使用すると、 &lt;code&gt;1.4142135623731&lt;/code&gt; 程度が得られます。</target>
        </trans-unit>
        <trans-unit id="c45a01f777cdc33148420b0a627621b88968ca28" translate="yes" xml:space="preserve">
          <source>which looks like your module is doing something wrong. Instead, you want to put the blame on the user, and say this:</source>
          <target state="translated">これはモジュールが何か間違ったことをしているように見えます。代わりに、ユーザに責任を押し付けて、次のように言いたいのです。</target>
        </trans-unit>
        <trans-unit id="910ece59a1ee7a779c7904607756d8ac6f43840e" translate="yes" xml:space="preserve">
          <source>which makes Configure to use the &lt;code&gt;nm&lt;/code&gt; tool when scanning for library symbols, which usually is not done in AIX.</source>
          <target state="translated">これにより、Configureがライブラリシンボルをスキャンするときに &lt;code&gt;nm&lt;/code&gt; ツールを使用するようになります。これは通常、AIXでは行われません。</target>
        </trans-unit>
        <trans-unit id="2d3700f0082a2cd4c6079cbe90c96db947b50f48" translate="yes" xml:space="preserve">
          <source>which makes the intention more clear.</source>
          <target state="translated">ということで、その意図がより明確になります。</target>
        </trans-unit>
        <trans-unit id="8cd3d9060c1ace30dd6e2d6262dfd40d2021cad0" translate="yes" xml:space="preserve">
          <source>which may be useful for debugging a program that uses &lt;code&gt;Term::ReadLine&lt;/code&gt; itself. Do not forget to detach your shell from the TTY in the window that corresponds to</source>
          <target state="translated">これは、 &lt;code&gt;Term::ReadLine&lt;/code&gt; 自体を使用するプログラムのデバッグに役立ちます。に対応するウィンドウでTTYからシェルを切り離すことを忘れないでください</target>
        </trans-unit>
        <trans-unit id="7e2010dc06ea0515288724e36b214acf56509e41" translate="yes" xml:space="preserve">
          <source>which may modify the second input argument.</source>
          <target state="translated">これは、第2の入力引数を変更することができます。</target>
        </trans-unit>
        <trans-unit id="eee2fd622722c8b192547f36dd5b9891b7a1ad1e" translate="yes" xml:space="preserve">
          <source>which means</source>
          <target state="translated">と言うと</target>
        </trans-unit>
        <trans-unit id="04a52cf2a6a5e0c79d4fd67cec9d2eb15a88cc21" translate="yes" xml:space="preserve">
          <source>which outputs</source>
          <target state="translated">しゅつりょく</target>
        </trans-unit>
        <trans-unit id="3f62e72ff87682e720abfa0dc12f99261d01428f" translate="yes" xml:space="preserve">
          <source>which pinpoints the real problem. Finally the script can now be modified to fix the original problem by destroying the API object before the untie:</source>
          <target state="translated">これは、本当の問題を特定するためのものです。最終的に、スクリプトを修正して元の問題を修正することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="ac6415ae9e2075f760e53b307b58defa828d2b3f" translate="yes" xml:space="preserve">
          <source>which prints</source>
          <target state="translated">いんさつ</target>
        </trans-unit>
        <trans-unit id="bb6c88a0a4a00ee65fac2ab2a88d44234ed99c16" translate="yes" xml:space="preserve">
          <source>which prints (on my machine):</source>
          <target state="translated">(私のマシンでは)印刷されます。</target>
        </trans-unit>
        <trans-unit id="c6aa678d657ea6708638daf467b4e464862338f7" translate="yes" xml:space="preserve">
          <source>which probably isn't what you intended (the &lt;code&gt;'???'&lt;/code&gt; is a sign that perl optimized away a constant value).</source>
          <target state="translated">これはおそらく意図したものではありません（ &lt;code&gt;'???'&lt;/code&gt; は、perlが定数値を最適化することを示す記号です）。</target>
        </trans-unit>
        <trans-unit id="3f77411f51027e18d6942d6aafcf90ba55ec2701" translate="yes" xml:space="preserve">
          <source>which produces the output (again, long lines have been wrapped here)</source>
          <target state="translated">これは出力を生成します (ここでも長い行が折り返されています)。</target>
        </trans-unit>
        <trans-unit id="bef5e7ef43fdb712239e626bd67fabf93a351f45" translate="yes" xml:space="preserve">
          <source>which produces:</source>
          <target state="translated">を生成します。</target>
        </trans-unit>
        <trans-unit id="f2902720610777e0cb05329288b1b2cd5b87bdd4" translate="yes" xml:space="preserve">
          <source>which provides a new Perl interpreter for each thread, and, by default, results in no data or state information being shared between threads.</source>
          <target state="translated">これは各スレッドに新しい Perl インタプリタを提供し、デフォルトではスレッド間でデータや状態情報が共有されません。</target>
        </trans-unit>
        <trans-unit id="f92ba8d28d485765994bd16e6b0139ab94d5b990" translate="yes" xml:space="preserve">
          <source>which puts literal commas into some of the list items. Write it without commas if you don't want them to appear in your data:</source>
          <target state="translated">これはリスト項目の一部にリテラルカンマを入れます。カンマをデータに表示させたくない場合は、カンマを入れずに書きます。</target>
        </trans-unit>
        <trans-unit id="87d11dc8fa4ace81bc6cff5f401501d4f07cbd6a" translate="yes" xml:space="preserve">
          <source>which puts you into a readline interface. If &lt;code&gt;Term::ReadKey&lt;/code&gt; and either of &lt;code&gt;Term::ReadLine::Perl&lt;/code&gt; or &lt;code&gt;Term::ReadLine::Gnu&lt;/code&gt; are installed, history and command completion are supported.</source>
          <target state="translated">これにより、readlineインターフェイスが表示されます。場合 &lt;code&gt;Term::ReadKey&lt;/code&gt; いずれかの &lt;code&gt;Term::ReadLine::Perl&lt;/code&gt; か &lt;code&gt;Term::ReadLine::Gnu&lt;/code&gt; インストールされている、歴史やコマンド補完がサポートされています。</target>
        </trans-unit>
        <trans-unit id="6f4d24b8ce89da9965a39a4a2a60f5482730186f" translate="yes" xml:space="preserve">
          <source>which rely on special alignment which is not provided by Perl's malloc().</source>
          <target state="translated">Perlのmalloc()では提供されていない特殊なアライメントに依存しています。</target>
        </trans-unit>
        <trans-unit id="fdcf525abe96dbcca08ea62d672f58f208fd0fe2" translate="yes" xml:space="preserve">
          <source>which returns 'a/b/c' under Unix. Or:</source>
          <target state="translated">これはUnixでは'a/b/c'を返す。あるいは</target>
        </trans-unit>
        <trans-unit id="ec1e3337a0ee7b60523959a46060f22ddce31714" translate="yes" xml:space="preserve">
          <source>which returns a string consisting of the first character from each string. Using pack, we can write</source>
          <target state="translated">これは、各文字列の最初の文字からなる文字列を返します。pack を使うと、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="3d4e654a3fe5a13b1285db512bfaad46b825adcf" translate="yes" xml:space="preserve">
          <source>which reverses the order of method call.</source>
          <target state="translated">メソッドの呼び出し順を反転させることができます。</target>
        </trans-unit>
        <trans-unit id="0a42738502aac554f3685b010c8c33d17b8d8a89" translate="yes" xml:space="preserve">
          <source>which runs script non-interactively, printing info on each entry into a subroutine and each executed line into the file named</source>
          <target state="translated">これはスクリプトを非対話的に実行し、サブルーチンの各エントリと実行された各行の情報を</target>
        </trans-unit>
        <trans-unit id="a26dc4262a5b530b9fd0491393a70987f0cb95f8" translate="yes" xml:space="preserve">
          <source>which sets the debugging packages directly. Note that &lt;code&gt;o debug 0&lt;/code&gt; turns debugging off.</source>
          <target state="translated">デバッグパッケージを直接設定します。 &lt;code&gt;o debug 0&lt;/code&gt; はデバッグをオフにすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="13c1eb00f520026b6ba1e70a18a4964822f7275f" translate="yes" xml:space="preserve">
          <source>which should be interpreted as a link to the &lt;code&gt;vertical|bar/slash&lt;/code&gt; POD page and not as a link to the &lt;code&gt;slash&lt;/code&gt; section of the &lt;code&gt;bar&lt;/code&gt; POD page with an anchor text of &lt;code&gt;vertical&lt;/code&gt; . Note that not only the anchor text will need to have formatting codes expanded, but so will the target of the link (to deal with E&amp;lt;&amp;gt; and Z&amp;lt;&amp;gt; formatting codes), and special handling of the section may be necessary depending on whether the translator wants to consider markup in sections to be significant when resolving links. See &lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspec&lt;/a&gt; for more information.</source>
          <target state="translated">これは、 &lt;code&gt;vertical|bar/slash&lt;/code&gt; PODページへのリンクとして解釈され、アンカーテキストが &lt;code&gt;vertical&lt;/code&gt; の &lt;code&gt;bar&lt;/code&gt; PODページの &lt;code&gt;slash&lt;/code&gt; セクションへのリンクとして解釈されるべきではありません。アンカーテキストではフォーマットコードを展開する必要があるだけでなく、リンクのターゲット（E &amp;lt;&amp;gt;およびZ &amp;lt;&amp;gt;フォーマットコードを処理するため）も必要であり、セクションの特別な処理が必要かどうかに応じて、翻訳者は、リンクを解決するときにセクションのマークアップが重要であると見なしたいと考えています。詳細については、&lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="98a00746bb67217f72bad75a07b7f4500eb2c2ed" translate="yes" xml:space="preserve">
          <source>which should be interpreted as a link to the &lt;code&gt;vertical|bar/slash&lt;/code&gt; POD page and not as a link to the &lt;code&gt;slash&lt;/code&gt; section of the &lt;code&gt;bar&lt;/code&gt; POD page with an anchor text of &lt;code&gt;vertical&lt;/code&gt;. Note that not only the anchor text will need to have formatting codes expanded, but so will the target of the link (to deal with E&amp;lt;&amp;gt; and Z&amp;lt;&amp;gt; formatting codes), and special handling of the section may be necessary depending on whether the translator wants to consider markup in sections to be significant when resolving links. See &lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt; for more information.</source>
          <target state="translated">これへのリンクとして解釈されるべきである &lt;code&gt;vertical|bar/slash&lt;/code&gt; へのリンクとしてPODページをしていない &lt;code&gt;slash&lt;/code&gt; のセクション &lt;code&gt;bar&lt;/code&gt; のアンカーテキストとPODページ &lt;code&gt;vertical&lt;/code&gt; 。アンカーテキストではフォーマットコードを展開する必要があるだけでなく、リンクのターゲット（E &amp;lt;&amp;gt;およびZ &amp;lt;&amp;gt;フォーマットコードを処理するため）も展開する必要があり、セクションの特別な処理が必要かどうかによって異なります。翻訳者は、リンクを解決するときにセクションのマークアップが重要であると考えたいと考えています。詳細については、&lt;a href=&quot;perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="82d18cd1d1191a0e6eb914334f14809f4e2df5fc" translate="yes" xml:space="preserve">
          <source>which shows that spaces are still possible in the code parts. Nevertheless, when working with code and conditional expressions, the extended form of regexps is almost necessary in creating and debugging regexps.</source>
          <target state="translated">これは、コード部分ではまだスペースが可能であることを示しています。とはいえ、コードや条件式を扱う場合、正規表現を作成したりデバッグしたりする際には、正規表現の拡張形式がほぼ必要になります。</target>
        </trans-unit>
        <trans-unit id="c562409303f52b59b405fbd73bdc489d191355d6" translate="yes" xml:space="preserve">
          <source>which specifies that the ambient pragmas are exactly those which are in scope at the point of calling.</source>
          <target state="translated">これは、アンビエントプラ グマを呼び出した時点でスコープ内にあるプラグマを正確に指定するものです。</target>
        </trans-unit>
        <trans-unit id="285a62a077847927b08a104ad47e252de996fbd4" translate="yes" xml:space="preserve">
          <source>which the parser passes to &lt;code&gt;newBINOP&lt;/code&gt; as its first argument.) Here is the relevant line:</source>
          <target state="translated">これは、パーサーが最初の引数として &lt;code&gt;newBINOP&lt;/code&gt; に渡します。）関連する行は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a01b2a58a6fdba96f9248e9340f26dd88b40f22f" translate="yes" xml:space="preserve">
          <source>which the range operator becomes false again. It doesn't become false till the next time the range operator is evaluated. It can test the right operand and become false on the same evaluation it became true (as in &lt;b&gt;awk&lt;/b&gt;), but it still returns true once. If you don't want it to test the right operand until the next evaluation, as in &lt;b&gt;sed&lt;/b&gt;, just use three dots (&lt;code&gt;&quot;...&quot;&lt;/code&gt; ) instead of two. In all other regards, &lt;code&gt;&quot;...&quot;&lt;/code&gt; behaves just like &lt;code&gt;&quot;..&quot;&lt;/code&gt; does.</source>
          <target state="translated">範囲演算子は再びfalseになります。次にrange演算子が評価されるまでfalseにはなりません。これは正しいオペランドをテストして、それがtrueになった同じ評価で（&lt;b&gt;awkのように&lt;/b&gt;）falseになることがありますが、それでも1回はtrueを返します。&lt;b&gt;sedの&lt;/b&gt;ように、次の評価まで正しいオペランドをテストしたくない場合は、2つではなく3つのドット（ &lt;code&gt;&quot;...&quot;&lt;/code&gt; ）を使用します。その他すべての点で、 &lt;code&gt;&quot;...&quot;&lt;/code&gt; は &lt;code&gt;&quot;..&quot;&lt;/code&gt; 同じように動作します。</target>
        </trans-unit>
        <trans-unit id="bdf907d0fc7a8caf1a2d7daed11e03e30dfddea1" translate="yes" xml:space="preserve">
          <source>which the range operator becomes false again. It doesn't become false till the next time the range operator is evaluated. It can test the right operand and become false on the same evaluation it became true (as in &lt;b&gt;awk&lt;/b&gt;), but it still returns true once. If you don't want it to test the right operand until the next evaluation, as in &lt;b&gt;sed&lt;/b&gt;, just use three dots (&lt;code&gt;&quot;...&quot;&lt;/code&gt;) instead of two. In all other regards, &lt;code&gt;&quot;...&quot;&lt;/code&gt; behaves just like &lt;code&gt;&quot;..&quot;&lt;/code&gt; does.</source>
          <target state="translated">範囲演算子は再びfalseになります。次に範囲演算子が評価されるまで、falseにはなりません。正しいオペランドをテストして、（&lt;b&gt;awkのように&lt;/b&gt;）trueになったのと同じ評価でfalseになることができますが、それでも一度trueを返します。&lt;b&gt;sedの&lt;/b&gt;ように、次の評価まで正しいオペランドをテストしたくない場合は、2つではなく3つのドット（ &lt;code&gt;&quot;...&quot;&lt;/code&gt; ）を使用してください。他のすべての点で、 &lt;code&gt;&quot;...&quot;&lt;/code&gt; は &lt;code&gt;&quot;..&quot;&lt;/code&gt; 同じように動作します。</target>
        </trans-unit>
        <trans-unit id="81c23090ff08e0fb68830283659fa8701d911f41" translate="yes" xml:space="preserve">
          <source>which then may be given to subsequent gprof runs to accumulate data over several runs.</source>
          <target state="translated">これは後続のgprofの実行に与えられ、複数の実行にわたってデータを蓄積することができます。</target>
        </trans-unit>
        <trans-unit id="bca1c4772ca382a02384d616fdcf653a956807fc" translate="yes" xml:space="preserve">
          <source>which understands command arguments. One of such ports is listed in &lt;a href=&quot;#Prerequisites&quot;&gt;&quot;Prerequisites&quot;&lt;/a&gt; under RSX. Do not forget to set variable &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;&quot;&lt;code&gt;PERL_SH_DIR&lt;/code&gt;&quot;&lt;/a&gt; as well.</source>
          <target state="translated">コマンド引数を理解します。そのようなポートの1つは、RSXの&lt;a href=&quot;#Prerequisites&quot;&gt;「前提条件」に&lt;/a&gt;リストされています。変数&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;「 &lt;code&gt;PERL_SH_DIR&lt;/code&gt; 」&lt;/a&gt;も忘れずに設定してください。</target>
        </trans-unit>
        <trans-unit id="6bc38136202aaeb79aacb17bb0b21ad3bf7c2961" translate="yes" xml:space="preserve">
          <source>which understands command arguments. One of such ports is listed in &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt; under RSX. Do not forget to set variable &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; as well.</source>
          <target state="translated">コマンド引数を理解します。そのようなポートの1つは、RSXの&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件に&lt;/a&gt;リストされています。変数 &lt;code&gt;&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;&lt;/code&gt; も設定することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="21c794c42fe00bc826485f15f4d481419b052ebd" translate="yes" xml:space="preserve">
          <source>which uses &lt;code&gt;(?&amp;gt;...)&lt;/code&gt; matches exactly when the one above does (verifying this yourself would be a productive exercise), but finishes in a fourth the time when used on a similar string with 1000000 &lt;code&gt;&quot;a&quot;&lt;/code&gt;s. Be aware, however, that, when this construct is followed by a quantifier, it currently triggers a warning message under the &lt;code&gt;use warnings&lt;/code&gt; pragma or &lt;b&gt;-w&lt;/b&gt; switch saying it &lt;code&gt;&quot;matches null string many times in regex&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;(?&amp;gt;...)&lt;/code&gt; を使用するものは、上記のものと完全に一致しますが（これを自分で確認することは生産的な演習になります）、1000000 &lt;code&gt;&quot;a&quot;&lt;/code&gt; の同様の文字列で使用すると4分の1で終了します。ただし、この構成の後に数量詞が続く場合、現在、 &lt;code&gt;use warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;スイッチの下で、 &lt;code&gt;&quot;matches null string many times in regex&quot;&lt;/code&gt; する」という警告メッセージがトリガーされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="da06cc8f27f2a4277c9d2ea18a97a8abd08b8a8d" translate="yes" xml:space="preserve">
          <source>which uses &lt;code&gt;(?&amp;gt;...)&lt;/code&gt; matches exactly when the one above does (verifying this yourself would be a productive exercise), but finishes in a fourth the time when used on a similar string with 1000000 &lt;code&gt;a&lt;/code&gt; s. Be aware, however, that, when this construct is followed by a quantifier, it currently triggers a warning message under the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or &lt;b&gt;-w&lt;/b&gt; switch saying it &lt;code&gt;&quot;matches null string many times in regex&quot;&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;(?&amp;gt;...)&lt;/code&gt; を使用するものは、上記のものと完全に一致します（これを自分で確認することは生産的な練習になります）が、1000000 &lt;code&gt;a&lt;/code&gt; sの同様の文字列で使用すると、4分の1で終了します。ただし、この構成の後に量指定子が続いている場合、現在、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマまたは&lt;b&gt;-w&lt;/b&gt;スイッチの下で、 &lt;code&gt;&quot;matches null string many times in regex&quot;&lt;/code&gt; する」という警告メッセージが表示されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c1742d6043b0a0627cfbbf796a8a4aec58b9ba1e" translate="yes" xml:space="preserve">
          <source>which will automatically coerce the actual scalar type into an IV, UV, double, or string.</source>
          <target state="translated">これは、実際のスカラ型を自動的にIV、UV、double、文字列に強制します。</target>
        </trans-unit>
        <trans-unit id="6fb146e9079ae4bc7011dc3190cd3e0c07fe95ee" translate="yes" xml:space="preserve">
          <source>which will call</source>
          <target state="translated">を呼び出す</target>
        </trans-unit>
        <trans-unit id="a70f5704ad119ee244b693c30eb2b8ff7c442560" translate="yes" xml:space="preserve">
          <source>which will cause</source>
          <target state="translated">引き起こす</target>
        </trans-unit>
        <trans-unit id="9bbdc3e288f18dbcaf878cd21b2c83f21f374e10" translate="yes" xml:space="preserve">
          <source>which will create perlXYZext.sis (290 kB -&amp;gt; 770 kB).</source>
          <target state="translated">これにより、perlXYZext.sis（290 kB-&amp;gt; 770 kB）が作成されます。</target>
        </trans-unit>
        <trans-unit id="6996e600127c4217edb2f265041409c0fd1c6958" translate="yes" xml:space="preserve">
          <source>which will create perlXYZsdk.zip that can be used in another Windows system with the SDK, without having to compile Perl in that system.</source>
          <target state="translated">これは、Perlをそのシステムでコンパイルしなくても、SDKと一緒に別のWindowsシステムで使用できるperlXYZsdk.zipを作成します。</target>
        </trans-unit>
        <trans-unit id="b448416a18c70a126915bb6ef40a53e5bb705c36" translate="yes" xml:space="preserve">
          <source>which will create the file perlXYZ.sis (the XYZ being the Perl version) which you can then install into your Symbian device: an easy way to do this is to send them via Bluetooth or infrared and just open the messages.</source>
          <target state="translated">これは perlXYZ.sis (XYZ は Perl のバージョン)というファイルを作成し、Symbian デバイスにインストールすることができます:これを行う簡単な方法は、Bluetooth または赤外線でメッセージを送信し、メッセージを開くだけです。</target>
        </trans-unit>
        <trans-unit id="607626ffbe3fb95a065011f0e19304f91e5ce829" translate="yes" xml:space="preserve">
          <source>which will determine if more memory needs to be allocated. If so, it will call the function &lt;code&gt;sv_grow&lt;/code&gt; . Note that &lt;code&gt;SvGROW&lt;/code&gt; can only increase, not decrease, the allocated memory of an SV and that it does not automatically add space for the trailing &lt;code&gt;NUL&lt;/code&gt; byte (perl's own string functions typically do &lt;code&gt;SvGROW(sv, len + 1)&lt;/code&gt; ).</source>
          <target state="translated">これにより、さらにメモリを割り当てる必要があるかどうかが決まります。その場合、関数 &lt;code&gt;sv_grow&lt;/code&gt; を呼び出します。 &lt;code&gt;SvGROW&lt;/code&gt; はSVに割り当てられたメモリを増やすだけで、減らすことはできません。また、後続の &lt;code&gt;NUL&lt;/code&gt; バイト用のスペースは自動的に追加されません（perl独自の文字列関数は通常、 &lt;code&gt;SvGROW(sv, len + 1)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="400ec198d8244a03b4954fa73663d06ab2ae772e" translate="yes" xml:space="preserve">
          <source>which will determine if more memory needs to be allocated. If so, it will call the function &lt;code&gt;sv_grow&lt;/code&gt;. Note that &lt;code&gt;SvGROW&lt;/code&gt; can only increase, not decrease, the allocated memory of an SV and that it does not automatically add space for the trailing &lt;code&gt;NUL&lt;/code&gt; byte (perl's own string functions typically do &lt;code&gt;SvGROW(sv, len + 1)&lt;/code&gt;).</source>
          <target state="translated">これにより、より多くのメモリを割り当てる必要があるかどうかが決まります。その場合、関数 &lt;code&gt;sv_grow&lt;/code&gt; を呼び出します。 &lt;code&gt;SvGROW&lt;/code&gt; は、SVに割り当てられたメモリを増やすだけで、減らすことはできず、末尾の &lt;code&gt;NUL&lt;/code&gt; バイト用のスペースを自動的に追加しないことに注意してください（perl自体の文字列関数は通常 &lt;code&gt;SvGROW(sv, len + 1)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1979ea935ff5d0f72dacbfc022d39ca4775f4154" translate="yes" xml:space="preserve">
          <source>which will do conversion from LF to CR/LF on the output, or in the environment settings (add this to your .bashrc):</source>
          <target state="translated">これは、出力や環境設定で LF から CR/LF への変換を行います (これを .bashrc に追加してください)。</target>
        </trans-unit>
        <trans-unit id="f602755896feed19e862deed34ab69b1cc800288" translate="yes" xml:space="preserve">
          <source>which will echo the cat command's output as it is generated, instead of waiting until the program has completed to print it out. It also checks the return value.</source>
          <target state="translated">これは、プログラムが完了して出力されるのを待つのではなく、 cat コマンドの出力が生成されたときにエコーをかけます。また、戻り値もチェックします。</target>
        </trans-unit>
        <trans-unit id="b50d57b41b49f3ab1ba2caaab449544638d7c8f0" translate="yes" xml:space="preserve">
          <source>which will expand the macros using cpp. Don't be scared by the results.</source>
          <target state="translated">を実行すると、cppを使ってマクロを展開してくれます。結果にビビってはいけません。</target>
        </trans-unit>
        <trans-unit id="9e71b54891a6848222e41887418f6d0101fb71a1" translate="yes" xml:space="preserve">
          <source>which will export Exporter's own import() method into YourModule. Everything will work as before but you won't need to include Exporter in &lt;code&gt;@YourModule::ISA&lt;/code&gt; .</source>
          <target state="translated">これはエクスポーター自身のimport（）メソッドをYourModuleにエクスポートします。すべては以前と同じように機能しますが、エクスポーターを &lt;code&gt;@YourModule::ISA&lt;/code&gt; に含める必要はありません。</target>
        </trans-unit>
        <trans-unit id="d50f3ea87c80c722e83aae6c319e232d884e5185" translate="yes" xml:space="preserve">
          <source>which will export Exporter's own import() method into YourModule. Everything will work as before but you won't need to include Exporter in &lt;code&gt;@YourModule::ISA&lt;/code&gt;.</source>
          <target state="translated">これにより、エクスポーター独自のimport（）メソッドがYourModuleにエクスポートされます。すべてが以前と同じように機能しますが、 &lt;code&gt;@YourModule::ISA&lt;/code&gt; にExporterを含める必要はありません。</target>
        </trans-unit>
        <trans-unit id="b87794d0dcf9a6a672b27ff15db2b5b5df0e9109" translate="yes" xml:space="preserve">
          <source>which will match assigned characters known to be part of the Greek script.</source>
          <target state="translated">これは、ギリシャ文字の一部であることがわかっている割り当てられた文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="b95b054f4d66abe300e2020ad56271297a5fff0f" translate="yes" xml:space="preserve">
          <source>which will override system(), exec(), &lt;code&gt;``&lt;/code&gt; , and &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(,'...|')&lt;/a&gt;&lt;/code&gt;. With current perl you may override only system(), readpipe() - the explicit version of &lt;code&gt;``&lt;/code&gt; , and maybe exec(). The code will substitute the one-argument call to system() by &lt;code&gt;CORE::system('cmd.exe', '/c', &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;)&lt;/code&gt; .</source>
          <target state="translated">これはsystem（）、exec（）、 &lt;code&gt;``&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(,'...|')&lt;/a&gt;&lt;/code&gt; をオーバーライドします。現在のperlでは、system（）、readpipe（）- &lt;code&gt;``&lt;/code&gt; の明示的なバージョン、そしておそらくexec（）のみをオーバーライドできます。コードはsystem（）への1つの引数の呼び出しを &lt;code&gt;CORE::system('cmd.exe', '/c', &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;)&lt;/code&gt; 置き換えます。</target>
        </trans-unit>
        <trans-unit id="b0ce88948c7893f4c0b9fc7b441fc46e7c874487" translate="yes" xml:space="preserve">
          <source>which will override system(), exec(), &lt;code&gt;``&lt;/code&gt;, and &lt;code&gt;open(,'...|')&lt;/code&gt;. With current perl you may override only system(), readpipe() - the explicit version of &lt;code&gt;``&lt;/code&gt;, and maybe exec(). The code will substitute the one-argument call to system() by &lt;code&gt;CORE::system('cmd.exe', '/c', shift)&lt;/code&gt;.</source>
          <target state="translated">これは、system（）、exec（）、 &lt;code&gt;``&lt;/code&gt; 、および &lt;code&gt;open(,'...|')&lt;/code&gt; をオーバーライドします。現在のperlでは、system（）、readpipe（）、明示的なバージョンの &lt;code&gt;``&lt;/code&gt; 、そしておそらくexec（）のみをオーバーライドできます。このコードは、system（）への1つの引数の呼び出しを &lt;code&gt;CORE::system('cmd.exe', '/c', shift)&lt;/code&gt; 置き換えます。</target>
        </trans-unit>
        <trans-unit id="456a31b1679a3c242ee6fcfa550ef4cff72097d5" translate="yes" xml:space="preserve">
          <source>which will print something like this</source>
          <target state="translated">これは次のように印刷されます</target>
        </trans-unit>
        <trans-unit id="9d9f99b15b9cecc682a88d237aaf65afdade60cb" translate="yes" xml:space="preserve">
          <source>which will pull in the crlf PerlIO layer which does LF -&amp;gt; CRLF conversion on every output generated by perl.</source>
          <target state="translated">これは、perlによって生成されたすべての出力でLF-&amp;gt; CRLF変換を行うcrlf PerlIOレイヤーを取り込みます。</target>
        </trans-unit>
        <trans-unit id="3f021bf96a0c4f48629afad5e6635345dc7b47e5" translate="yes" xml:space="preserve">
          <source>which works exactly as it does for the &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; commands. Requires the &lt;code&gt;PadWalker&lt;/code&gt; module version 0.08 or higher; will warn if this isn't installed. Output is pretty-printed in the same style as for &lt;code&gt;V&lt;/code&gt; and the format is controlled by the same options.</source>
          <target state="translated">これは、 &lt;code&gt;V&lt;/code&gt; および &lt;code&gt;X&lt;/code&gt; コマンドの場合とまったく同じように機能します。必要 &lt;code&gt;PadWalker&lt;/code&gt; のモジュールバージョン0.08以上; これがインストールされていない場合は警告が表示されます。出力は &lt;code&gt;V&lt;/code&gt; と同じスタイルできれいに印刷され、フォーマットは同じオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="11c1ab2f8d5d6cd3a60669a9963f5426c9daee0d" translate="yes" xml:space="preserve">
          <source>which would produce:</source>
          <target state="translated">を生成します。</target>
        </trans-unit>
        <trans-unit id="5a1c45867db7ee2d51ddbd3c9e7a13e56f64c459" translate="yes" xml:space="preserve">
          <source>which, again, is the default that you should probably never change. You cannot use this keyword on versions of perl before 5.16 to make XSUBs &lt;code&gt;static&lt;/code&gt; .</source>
          <target state="translated">これもまた、おそらく決して変更してはならないデフォルトです。5.16より前のバージョンのperlでこのキーワードを使用してXSUBを &lt;code&gt;static&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="e3a45fbc8c1cd7e74a8d21b43eab61788b8cab23" translate="yes" xml:space="preserve">
          <source>which, again, is the default that you should probably never change. You cannot use this keyword on versions of perl before 5.16 to make XSUBs &lt;code&gt;static&lt;/code&gt;.</source>
          <target state="translated">これも、おそらく決して変更してはならないデフォルトです。5.16より前のバージョンのperlでこのキーワードを使用してXSUBを &lt;code&gt;static&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="8ab6f6023897b5036665c5af5eeee9f611ab518c" translate="yes" xml:space="preserve">
          <source>whichever is appropriate.) Also, make sure that the DLLs for external libraries are usable with executables compiled without &lt;code&gt;-Zmtd&lt;/code&gt; options.</source>
          <target state="translated">また、外部ライブラリのDLLが、 &lt;code&gt;-Zmtd&lt;/code&gt; オプションなしでコンパイルされた実行可能ファイルで使用できることを確認してください。</target>
        </trans-unit>
        <trans-unit id="7d75fc0dff9af022da4a609d39c10fe2dc49a67f" translate="yes" xml:space="preserve">
          <source>whichever is appropriate.) Also, make sure that the DLLs for external libraries are usable with with executables compiled without &lt;code&gt;-Zmtd&lt;/code&gt; options.</source>
          <target state="translated">また、外部ライブラリのDLLが &lt;code&gt;-Zmtd&lt;/code&gt; オプションなしでコンパイルされた実行可能ファイルで使用できることを確認してください。</target>
        </trans-unit>
        <trans-unit id="cd12cc1889c218b756fa67f3cf808c22bc709576" translate="yes" xml:space="preserve">
          <source>whichsig</source>
          <target state="translated">whichsig</target>
        </trans-unit>
        <trans-unit id="2ed9a56e32475df214af03c7378f0540983aebbd" translate="yes" xml:space="preserve">
          <source>whichsig_pv</source>
          <target state="translated">whichsig_pv</target>
        </trans-unit>
        <trans-unit id="86be9c520774951aa6ad17a4612e8ccbf656c2f6" translate="yes" xml:space="preserve">
          <source>whichsig_pvn</source>
          <target state="translated">whichsig_pvn</target>
        </trans-unit>
        <trans-unit id="bd977a86d9e80bc78ac651896d180e9a9271a613" translate="yes" xml:space="preserve">
          <source>whichsig_sv</source>
          <target state="translated">whichsig_sv</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
        <trans-unit id="c755db4e16e1ebd5579bf9df24c0a9dde1dc936a" translate="yes" xml:space="preserve">
          <source>while the object methods of the class still work as designed. This is a key feature of inside-out classes.</source>
          <target state="translated">クラスのオブジェクトメソッドは設計通りに動作します。これはインサイドアウトクラスの重要な特徴です。</target>
        </trans-unit>
        <trans-unit id="e5daa18cf1bbf438222f9cb7416fc2f0b139eb61" translate="yes" xml:space="preserve">
          <source>while this is invalid:</source>
          <target state="translated">これが無効である間は</target>
        </trans-unit>
        <trans-unit id="e6eed0680efb88fe24db39b4ed8387a84c0bfafe" translate="yes" xml:space="preserve">
          <source>white space adjacent to a non-word character</source>
          <target state="translated">隣接空白</target>
        </trans-unit>
        <trans-unit id="b2e72557ade65af451c7d7f6f0f18d03a88d82c2" translate="yes" xml:space="preserve">
          <source>whitespace</source>
          <target state="translated">whitespace</target>
        </trans-unit>
        <trans-unit id="d2f5ed52eb803c45683b5fc0aa9520f29eb7cf52" translate="yes" xml:space="preserve">
          <source>whole class</source>
          <target state="translated">学級全体</target>
        </trans-unit>
        <trans-unit id="5a8cc6fdee71abc3b1476fb220e9d1cd4edb423d" translate="yes" xml:space="preserve">
          <source>whose dot files this object represents</source>
          <target state="translated">このオブジェクトがどのドットファイルを表しているか</target>
        </trans-unit>
        <trans-unit id="3fd57b2686f4898d067d4a56c073c64e61db82bf" translate="yes" xml:space="preserve">
          <source>whose lookup failed, and naming the line number where the calling $lh-&amp;gt;maketext(</source>
          <target state="translated">ルックアップが失敗し、呼び出し$ lh-&amp;gt; maketext（</target>
        </trans-unit>
        <trans-unit id="10cff4034cedfb92a272cddd774b8b63e3bdad06" translate="yes" xml:space="preserve">
          <source>why</source>
          <target state="translated">why</target>
        </trans-unit>
        <trans-unit id="70bec8a9bf5ecd2e6b37316e112b3f4c615ad4d3" translate="yes" xml:space="preserve">
          <source>width</source>
          <target state="translated">width</target>
        </trans-unit>
        <trans-unit id="37d41699bdee4fcb969ca499eb0f8b82c60d59cc" translate="yes" xml:space="preserve">
          <source>will</source>
          <target state="translated">will</target>
        </trans-unit>
        <trans-unit id="9e698af09629b7ab425fc48e2a23b9a874214ff2" translate="yes" xml:space="preserve">
          <source>will all be loaded correctly by the &lt;b&gt;SelfLoader&lt;/b&gt;, and the &lt;b&gt;SelfLoader&lt;/b&gt; will ensure that the packages 'foo' and 'baz' correctly have the &lt;b&gt;SelfLoader&lt;/b&gt;&lt;code&gt;AUTOLOAD&lt;/code&gt; method when the data after &lt;code&gt;__DATA__&lt;/code&gt; is first parsed.</source>
          <target state="translated">すべてによって正しくロードされます&lt;b&gt;のSelfLoader&lt;/b&gt;、と&lt;b&gt;のSelfLoaderは、&lt;/b&gt;パッケージのFOO 'と「バズ」は正しく持っていることを保証する&lt;b&gt;のSelfLoader &lt;/b&gt; &lt;code&gt;AUTOLOAD&lt;/code&gt; の後のデータときにメソッドを &lt;code&gt;__DATA__&lt;/code&gt; が最初に解析されます。</target>
        </trans-unit>
        <trans-unit id="802b42bef12951357b89ef5b2a13122fbe99ef9d" translate="yes" xml:space="preserve">
          <source>will allow calling myref() as</source>
          <target state="translated">として myref()を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9f588d27875535a5a81b909a3f21a13470c6000b" translate="yes" xml:space="preserve">
          <source>will allow the user to specify an argument of the form &lt;code&gt;&quot;rsh cat file |&quot;&lt;/code&gt; , but will not work on a filename that happens to have a trailing space, while</source>
          <target state="translated">ユーザーは &lt;code&gt;&quot;rsh cat file |&quot;&lt;/code&gt; 形式の引数を指定できます。、ただし、末尾にスペースがあるファイル名では機能しませんが、</target>
        </trans-unit>
        <trans-unit id="fa63ca9f0e0755bdf22da517506c259544730889" translate="yes" xml:space="preserve">
          <source>will allow the user to specify an argument of the form &lt;code&gt;&quot;rsh cat file |&quot;&lt;/code&gt;, but will not work on a filename that happens to have a trailing space, while</source>
          <target state="translated">ユーザーは &lt;code&gt;&quot;rsh cat file |&quot;&lt;/code&gt; 形式の引数を指定できます。、ただし、末尾にスペースが含まれているファイル名では機能しませんが、</target>
        </trans-unit>
        <trans-unit id="896a8bbc58c2bd4db6e58ba1e9d9306c693cc4a1" translate="yes" xml:space="preserve">
          <source>will also exclusively return the stringified form. See &lt;a href=&quot;#Stringification&quot;&gt;&quot;Stringification&quot;&lt;/a&gt; for more details.</source>
          <target state="translated">また、文字列化された形式のみを返します。詳細については、&lt;a href=&quot;#Stringification&quot;&gt;「文字列化」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cdd84ef15151c715185c9415f2310209f946b6e6" translate="yes" xml:space="preserve">
          <source>will also turn on the &lt;code&gt;DEBUGGING&lt;/code&gt; compilation symbol which enables all the internal debugging code in Perl. There are a whole bunch of things you can debug with this: &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; lists them all, and the best way to find out about them is to play about with them. The most useful options are probably</source>
          <target state="translated">また、オンにします &lt;code&gt;DEBUGGING&lt;/code&gt; Perlですべての内部デバッグコードを有効にコンパイルシンボル。これでデバッグできるものはたくさんあります&lt;a href=&quot;perlrun&quot;&gt;。perlrun&lt;/a&gt;はそれらすべてを一覧表示します。それらについて調べる最善の方法は、それらを試すことです。最も有用なオプションはおそらく</target>
        </trans-unit>
        <trans-unit id="1b4ff705741e98869e5239461b8d80b3db153b63" translate="yes" xml:space="preserve">
          <source>will always be appropriately set before</source>
          <target state="translated">の前に常に適切に設定されます。</target>
        </trans-unit>
        <trans-unit id="236b98de69a12d286878f3c3fee614ff4c44d620" translate="yes" xml:space="preserve">
          <source>will always work correctly. The &lt;code&gt;use&lt;/code&gt; will perform an automatic &lt;code&gt;$VERSION&lt;/code&gt; comparison using the floating point number given as the first term after the module name (e.g. above 1.002.003). In this case, the installed module is too old for the requested line, so you would see an error like:</source>
          <target state="translated">常に正しく動作します。を &lt;code&gt;use&lt;/code&gt; と、モジュール名の後の最初の項として指定された浮動小数点数を使用して、自動 &lt;code&gt;$VERSION&lt;/code&gt; 比較が実行されます（例：1.002.003より上）。この場合、インストールされたモジュールは要求された行に対して古すぎるため、次のようなエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="221e507f5d50964643dc6c83bd6b40e8a8fddc2a" translate="yes" xml:space="preserve">
          <source>will appear as the content of the element, the</source>
          <target state="translated">が要素の内容として表示されます。</target>
        </trans-unit>
        <trans-unit id="800502b2521db5dda562d1522427959496f11b6d" translate="yes" xml:space="preserve">
          <source>will automatically call &lt;code&gt;deflateSetDictionary&lt;/code&gt; directly after calling &lt;code&gt;deflateInit&lt;/code&gt; . The Adler32 value for the dictionary can be obtained by calling the method &lt;code&gt;$d-&amp;gt;dict_adler()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;deflateInit&lt;/code&gt; を呼び出した &lt;code&gt;deflateSetDictionary&lt;/code&gt; 自動的にdeflateSetDictionaryを呼び出します。辞書のAdler32値は、メソッド &lt;code&gt;$d-&amp;gt;dict_adler()&lt;/code&gt; 呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="ac2d106304a82f8979d078a5d1a630e0bf0bbed4" translate="yes" xml:space="preserve">
          <source>will automatically call &lt;code&gt;deflateSetDictionary&lt;/code&gt; directly after calling &lt;code&gt;deflateInit&lt;/code&gt; . The Adler32 value for the dictionary can be obtained by calling the method &lt;code&gt;$d-&lt;/code&gt; dict_adler()&amp;gt;.</source>
          <target state="translated">&lt;code&gt;deflateInit&lt;/code&gt; を呼び出した &lt;code&gt;deflateSetDictionary&lt;/code&gt; 自動的にdeflateSetDictionaryを呼び出します。辞書のAdler32値は、メソッド &lt;code&gt;$d-&lt;/code&gt; -dict_adler（）&amp;gt;を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="5ad1794ce988d5da967d29f31988d9b1e39c2fa6" translate="yes" xml:space="preserve">
          <source>will automatically call &lt;code&gt;deflateSetDictionary&lt;/code&gt; directly after calling &lt;code&gt;deflateInit&lt;/code&gt;. The Adler32 value for the dictionary can be obtained by calling the method &lt;code&gt;$d-&amp;gt;dict_adler()&lt;/code&gt;.</source>
          <target state="translated">自動的に呼び出します &lt;code&gt;deflateSetDictionary&lt;/code&gt; を直接呼び出した後 &lt;code&gt;deflateInit&lt;/code&gt; のを。ディクショナリのAdler32値は、メソッド &lt;code&gt;$d-&amp;gt;dict_adler()&lt;/code&gt; 呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="bf4cadec0746e1a5ab432f127230623d5e7091d8" translate="yes" xml:space="preserve">
          <source>will automatically search in</source>
          <target state="translated">で自動的に検索します。</target>
        </trans-unit>
        <trans-unit id="047046a9e670aa4336adfdf1872082aee6bc3385" translate="yes" xml:space="preserve">
          <source>will automatically search when adding directories to @&lt;code&gt;INC&lt;/code&gt; . The elements in the list are separated by spaces. This is only useful if you have a perl library directory tree structured like the default one. See &lt;code&gt;INSTALL&lt;/code&gt; for how this works. The versioned site_perl directory was introduced in 5.005, so that is the lowest possible value.</source>
          <target state="translated">@にディレクトリを追加するときに自動的に検索します &lt;code&gt;INC&lt;/code&gt; 。リスト内の要素はスペースで区切られています。これは、デフォルトのような構造のperlライブラリディレクトリツリーがある場合にのみ役立ちます。これがどのように機能するかについては &lt;code&gt;INSTALL&lt;/code&gt; を参照してください。バージョン付きのsite_perlディレクトリは5.005で導入されたため、これが可能な限り低い値です。</target>
        </trans-unit>
        <trans-unit id="1be9c85508caab35b73679ea35144599c7e7350e" translate="yes" xml:space="preserve">
          <source>will automatically search when adding directories to @&lt;code&gt;INC&lt;/code&gt;. The elements in the list are separated by spaces. This is only useful if you have a perl library directory tree structured like the default one. See &lt;code&gt;INSTALL&lt;/code&gt; for how this works. The versioned site_perl directory was introduced in 5.005, so that is the lowest possible value.</source>
          <target state="translated">@にディレクトリを追加するときに自動的に検索します &lt;code&gt;INC&lt;/code&gt; 。リスト内の要素はスペースで区切られます。これは、デフォルトのように構造化されたperlライブラリディレクトリツリーがある場合にのみ役立ちます。これがどのように機能するかについては、 &lt;code&gt;INSTALL&lt;/code&gt; を参照してください。バージョン管理されたsite_perlディレクトリは5.005で導入されたため、可能な限り低い値になります。</target>
        </trans-unit>
        <trans-unit id="c7cb5ce9b5a641fecdac863d628b278ea98c6e6a" translate="yes" xml:space="preserve">
          <source>will be &quot; link&quot;.</source>
          <target state="translated">が「リンク」になります。</target>
        </trans-unit>
        <trans-unit id="77ff54c41540566c24d6f01703b68b71c5db0b9e" translate="yes" xml:space="preserve">
          <source>will be a reference to a glob which can be treated as a perl file handle. It refers to the layer below.</source>
          <target state="translated">は perl ファイルハンドルとして扱えるグロブへの参照になります。これは下のレイヤーを参照します。</target>
        </trans-unit>
        <trans-unit id="1f36a5ca854b3b31929c9a757a81400bb46baa6a" translate="yes" xml:space="preserve">
          <source>will be added to the list if not present, as will any types given in the list of</source>
          <target state="translated">のリストで与えられた型と同様に、存在しない場合はリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="01d2f7edc347b2ba19724a9742a17654406e2533" translate="yes" xml:space="preserve">
          <source>will be an empty string.</source>
          <target state="translated">は空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="2ee7188301caacf79b6af8dcb2c81f839071db3f" translate="yes" xml:space="preserve">
          <source>will be appropriately labeled using arrow notation. You can specify names for individual values to be dumped if you use the &lt;code&gt;Dump()&lt;/code&gt; method, or you can change the default &lt;code&gt;$VAR&lt;/code&gt; prefix to something else. See &lt;code&gt;$Data::Dumper::Varname&lt;/code&gt; and &lt;code&gt;$Data::Dumper::Terse&lt;/code&gt; below.</source>
          <target state="translated">矢印表記を使用して適切にラベル付けされます。 &lt;code&gt;Dump()&lt;/code&gt; メソッドを使用する場合は、ダンプする個々の値の名前を指定できます。または、デフォルトの &lt;code&gt;$VAR&lt;/code&gt; プレフィックスを他の値に変更できます。以下の &lt;code&gt;$Data::Dumper::Terse&lt;/code&gt; &lt;code&gt;$Data::Dumper::Varname&lt;/code&gt; および$ Data :: Dumper :: Terseを参照してください。</target>
        </trans-unit>
        <trans-unit id="b5d33fb37764bb4ed1953600f4adf836066df187" translate="yes" xml:space="preserve">
          <source>will be assigned.</source>
          <target state="translated">が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="4b924079b9f868588e8837d7d50c4a682e44dca9" translate="yes" xml:space="preserve">
          <source>will be associated with</source>
          <target state="translated">に関連付けられます。</target>
        </trans-unit>
        <trans-unit id="02ae7304f1d07ef95ca9aa9e7fec2131cfb9259b" translate="yes" xml:space="preserve">
          <source>will be assumed.</source>
          <target state="translated">が想定されます。</target>
        </trans-unit>
        <trans-unit id="69e74f77cfb1d64cc1f2b8b0e7553a0f92d29c07" translate="yes" xml:space="preserve">
          <source>will be assumed. In a</source>
          <target state="translated">が想定されます。の中では</target>
        </trans-unit>
        <trans-unit id="3ffcf20d5b3d655c1147575473aace4b9819db78" translate="yes" xml:space="preserve">
          <source>will be at the start of a block, so variables may be defined in it.</source>
          <target state="translated">はブロックの先頭にあるので、その中で変数を定義することができます。</target>
        </trans-unit>
        <trans-unit id="cf4139ebee2a50a45a47c6c20c8db3e1866f4f96" translate="yes" xml:space="preserve">
          <source>will be automatically appended if no dot is present in the name. The workaround is as simple as that: since</source>
          <target state="translated">は、名前にドットが存在しない場合に自動的に追加されます。回避策は次のように簡単です。</target>
        </trans-unit>
        <trans-unit id="5a46024906c3202205c9b86fbe8cd6c05e18f661" translate="yes" xml:space="preserve">
          <source>will be automatically closed.</source>
          <target state="translated">は自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="44f5497538f2b5c2a094190f8f787c089a91ecdd" translate="yes" xml:space="preserve">
          <source>will be called, or whatever is the override, see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;&quot;&lt;code&gt;PERL_SH_DIR&lt;/code&gt;&quot;&lt;/a&gt;.</source>
          <target state="translated">呼び出されるか、オーバーライドが何であれ、&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;「 &lt;code&gt;PERL_SH_DIR&lt;/code&gt; 」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a5391631955c2960d94bb3306b3cf823fd72eb2e" translate="yes" xml:space="preserve">
          <source>will be called, or whatever is the override, see &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;.</source>
          <target state="translated">呼び出されるか、オーバーライドが何であれ、&lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIRを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="39863063f526390d21b54f0437be449e32146e0d" translate="yes" xml:space="preserve">
          <source>will be evaluated by &lt;code&gt;wanted()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;wanted()&lt;/code&gt; によって評価されます。</target>
        </trans-unit>
        <trans-unit id="49c84e603f0cc315494a3a65dd70828c74cf62f5" translate="yes" xml:space="preserve">
          <source>will be evaluated by &lt;code&gt;wanted()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wanted()&lt;/code&gt; によって評価されます。</target>
        </trans-unit>
        <trans-unit id="28165e3b4da95eac8adbdc3dff70bd1aebff0f5c" translate="yes" xml:space="preserve">
          <source>will be extracted as if it were:</source>
          <target state="translated">があるかのように抽出されます。</target>
        </trans-unit>
        <trans-unit id="b611847a2698bb295db4bc4d7f2ff88d3d7bfd77" translate="yes" xml:space="preserve">
          <source>will be incorrectly parsed as:</source>
          <target state="translated">というように正しく解析されません。</target>
        </trans-unit>
        <trans-unit id="6c7777c83dbab33571eaae602d63da07c1775c05" translate="yes" xml:space="preserve">
          <source>will be interpreted DWIMically, often as a comparison against &lt;code&gt;$_&lt;/code&gt; , and may be null to generate a &lt;code&gt;default&lt;/code&gt; block.</source>
          <target state="translated">多くの場合 &lt;code&gt;$_&lt;/code&gt; との比較としてDWIMで解釈され、 &lt;code&gt;default&lt;/code&gt; ブロックを生成するためにnullになる場合があります。</target>
        </trans-unit>
        <trans-unit id="56bf3e515d1d441ee0e9146d70e09a78643ae327" translate="yes" xml:space="preserve">
          <source>will be matched, otherwise the</source>
          <target state="translated">はマッチしますが、そうでなければ</target>
        </trans-unit>
        <trans-unit id="e7a7d4b273decda8110596b43cd84682246d498f" translate="yes" xml:space="preserve">
          <source>will be matched.</source>
          <target state="translated">がマッチします。</target>
        </trans-unit>
        <trans-unit id="ff7f29cc164d0b094bc13b613b4f7ad90d505c7d" translate="yes" xml:space="preserve">
          <source>will be matched. If the</source>
          <target state="translated">がマッチします。の場合には</target>
        </trans-unit>
        <trans-unit id="75321a4f0c9b87d6d48f48cc9f64b5f655545b5c" translate="yes" xml:space="preserve">
          <source>will be modified to the last $octets position at end of decode. Returns true if $terminator appears output, else returns false.</source>
          <target state="translated">は、デコード終了時の最後の $octets の位置に修正されます。ターミネータが出力された場合はtrueを返し、そうでない場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="5444aae0d6bc7e881d14ae4362de10908be2d8bc" translate="yes" xml:space="preserve">
          <source>will be moved, and the buffer shortened. This hides the discarded text from any lexing code that runs later, as if the text had never appeared.</source>
          <target state="translated">は移動され、バッファは短縮されます。これは、後から実行されるレキシングスコードから、あたかもテキストが現れなかったかのように、破棄されたテキストを隠します。</target>
        </trans-unit>
        <trans-unit id="fb90a1b23ad48d9287e458757890f8e9565a8afc" translate="yes" xml:space="preserve">
          <source>will be retried. This lets you type &lt;code&gt;man debug&lt;/code&gt; or &lt;code&gt;man op&lt;/code&gt; from the debugger.</source>
          <target state="translated">再試行されます。これにより、デバッガーから &lt;code&gt;man debug&lt;/code&gt; または &lt;code&gt;man op&lt;/code&gt; と入力できます。</target>
        </trans-unit>
        <trans-unit id="3ef44a7f700e88aec4c8b15477ecc69c13f947c3" translate="yes" xml:space="preserve">
          <source>will be returned.</source>
          <target state="translated">が返ってきます。</target>
        </trans-unit>
        <trans-unit id="25c4a5a27182872a6cb90fa147b876b2b25a6bf6" translate="yes" xml:space="preserve">
          <source>will be skipped and Perl will move onto the next regexp element. The second form is like an &lt;code&gt;'if () {} else {}'&lt;/code&gt; statement in Perl. If the</source>
          <target state="translated">スキップされ、Perlは次の正規表現要素に移動します。2番目の形式は、Perlの &lt;code&gt;'if () {} else {}'&lt;/code&gt; ステートメントのようなものです。の場合</target>
        </trans-unit>
        <trans-unit id="1970ab6c3e7f53185ec961c7b96e2bec3982ca45" translate="yes" xml:space="preserve">
          <source>will be some defined value if the open succeeds, but &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it fails;</source>
          <target state="translated">オープンが成功した場合は定義された値になりますが、失敗した場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8f81d897072b2d575ec988457276a00117510045" translate="yes" xml:space="preserve">
          <source>will be some defined value if the open succeeds, but &lt;code&gt;undef&lt;/code&gt; if it fails;</source>
          <target state="translated">オープンが成功した場合は定義された値になりますが、失敗した場合は &lt;code&gt;undef&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b0e5f84ae9a025c95805cfbdda7aba5f2e868b56" translate="yes" xml:space="preserve">
          <source>will be treated as a boolean match because the rules say both a regex match and an explicit test on &lt;code&gt;$_&lt;/code&gt; will be treated as boolean.</source>
          <target state="translated">ルールは正規表現の一致と &lt;code&gt;$_&lt;/code&gt; 明示的なテストの両方がブール値として扱われるため、ルールはブール値の一致として扱われます。</target>
        </trans-unit>
        <trans-unit id="7bdb6f7a9a73bafa81d66281077d808cd4f13be5" translate="yes" xml:space="preserve">
          <source>will be twice UTF-8 encoded. A &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; ':encoding(utf8)'&lt;/code&gt; would have avoided the bug, or explicitly opening also the</source>
          <target state="translated">UTF-8で2回エンコードされます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; ':encoding(utf8)'&lt;/code&gt; バグを回避、または明示的にも開いているだろう</target>
        </trans-unit>
        <trans-unit id="a560936648ac4b97403233d44405d8318d395504" translate="yes" xml:space="preserve">
          <source>will be twice UTF-8 encoded. A &lt;code&gt;use open ':encoding(UTF-8)'&lt;/code&gt; would have avoided the bug, or explicitly opening also the</source>
          <target state="translated">UTF-8で2回エンコードされます。 &lt;code&gt;use open ':encoding(UTF-8)'&lt;/code&gt; バグを回避、または明示的にも開いているだろう</target>
        </trans-unit>
        <trans-unit id="ee4475df6e379629545ed6276a569f3e2eb1ef11" translate="yes" xml:space="preserve">
          <source>will be undefined, since a recursive structure cannot be constructed using one Perl statement. You should set the &lt;code&gt;Purity&lt;/code&gt; flag to 1 to get additional statements that will correctly fill in these references. Moreover, if &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed when strictures are in effect, you need to ensure that any variables it accesses are previously declared.</source>
          <target state="translated">再帰的な構造は1つのPerlステートメントを使用して構築できないため、未定義になります。これらの参照を正しく入力する追加のステートメントを取得するには、 &lt;code&gt;Purity&lt;/code&gt; フラグを1に設定する必要があります。さらに、制限が有効なときに &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; れる場合、アクセスする変数が事前に宣言されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ce7f214a3e21cca55b06cd2b38ca2b2499455d4" translate="yes" xml:space="preserve">
          <source>will be undefined, since a recursive structure cannot be constructed using one Perl statement. You should set the &lt;code&gt;Purity&lt;/code&gt; flag to 1 to get additional statements that will correctly fill in these references. Moreover, if &lt;code&gt;eval&lt;/code&gt;ed when strictures are in effect, you need to ensure that any variables it accesses are previously declared.</source>
          <target state="translated">1つのPerlステートメントを使用して再帰構造を構築できないため、未定義になります。これらの参照を正しく入力する追加のステートメントを取得するには、 &lt;code&gt;Purity&lt;/code&gt; フラグを1に設定する必要があります。さらに、制限が有効なときに &lt;code&gt;eval&lt;/code&gt; れる場合は、アクセスする変数が事前に宣言されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="eee291ac39ab0e01b156565c777f946041d54d02" translate="yes" xml:space="preserve">
          <source>will be used as the handler for subsequently installed signals.</source>
          <target state="translated">は、その後にインストールされた信号のハンドラとして使用されます。</target>
        </trans-unit>
        <trans-unit id="4d9bc2ddc4bc2a031e22465c252b6377da6be593" translate="yes" xml:space="preserve">
          <source>will be used for password.</source>
          <target state="translated">がパスワードとして使用されます。</target>
        </trans-unit>
        <trans-unit id="189f210a322c7c2ba81e0ea9896d29ddd547e1b5" translate="yes" xml:space="preserve">
          <source>will be used for the name of the extension. If module_name is not supplied then the name of the first header file will be used, with the first character capitalized.</source>
          <target state="translated">が拡張子の名前に使われます。module_name が指定されていない場合は、最初の文字を大文字にした最初のヘッダファイルの名前が使われます。</target>
        </trans-unit>
        <trans-unit id="e9eed5428b5ca4033b733f6e4eabddbdf0bae1ff" translate="yes" xml:space="preserve">
          <source>will be used instead and the output piped through your favourite pager.</source>
          <target state="translated">が代わりに使用され、出力はお気に入りのページャーを介してパイプされます。</target>
        </trans-unit>
        <trans-unit id="00ea2b0f5cc2323252a0479beca63d9f1b08fa40" translate="yes" xml:space="preserve">
          <source>will be warning free regardless of what $ref actually is.</source>
          <target state="translated">は、実際に$refが何であるかに関わらず、警告が出ないようになります。</target>
        </trans-unit>
        <trans-unit id="84d0d493e062ada8d958a287014680fe0c8e6db1" translate="yes" xml:space="preserve">
          <source>will be zero.</source>
          <target state="translated">はゼロになります。</target>
        </trans-unit>
        <trans-unit id="827f71acdbb8adc150e90853e1aceebe12e59bc0" translate="yes" xml:space="preserve">
          <source>will be zero. The file descriptor may have the close-on-exec flag either set or clear; it is the responsibility of the layer that takes ownership of it to get the flag into the correct state.</source>
          <target state="translated">はゼロになります。ファイル記述子には、close-on-exec フラグが設定されていても、クリアされていても構いません。フラグを正しい状態にするのは、それを所有するレイヤの責任です。</target>
        </trans-unit>
        <trans-unit id="75c5acef5fb2e47df2bf90c4d4c3a7831000cfcd" translate="yes" xml:space="preserve">
          <source>will become:</source>
          <target state="translated">になります。</target>
        </trans-unit>
        <trans-unit id="e0318a0bb7d80ff064a8678b238ad297c5e7ed6b" translate="yes" xml:space="preserve">
          <source>will both result in the proper type due to the way the overloaded math works.</source>
          <target state="translated">は、オーバーロードされた数学の仕組みのため、どちらも適切な型になります。</target>
        </trans-unit>
        <trans-unit id="ed44e6c8395b95eb951ed01fb3df61dd611bca88" translate="yes" xml:space="preserve">
          <source>will build a Perl that supports dynamic loading (which requires a shared</source>
          <target state="translated">は動的ロードをサポートするPerlをビルドします(これには共有の</target>
        </trans-unit>
        <trans-unit id="2287cd95ce18a71437cb52ed8b1caefedff9eaca" translate="yes" xml:space="preserve">
          <source>will call the Unix emulation library's &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; emulation, which attempts to provide emulation of the stdin, stdout, stderr in force in the parent, providing the child program uses a compatible version of the emulation library.</source>
          <target state="translated">Unixエミュレーションライブラリの &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; エミュレーションを呼び出します。これは、親で有効なstdin、stdout、stderrのエミュレーションを提供しようとしますが、子プログラムがエミュレーションライブラリの互換バージョンを使用している場合に限ります。</target>
        </trans-unit>
        <trans-unit id="9dd319675b257f0d34e3db5d71aeabc5c8458128" translate="yes" xml:space="preserve">
          <source>will call the native command line direct and no such emulation of a child Unix program will exists. Mileage &lt;b&gt;will&lt;/b&gt; vary. (RISC OS)</source>
          <target state="translated">ネイティブコマンドラインを直接呼び出し、そのような子Unixプログラムのエミュレーションは存在しません。走行距離&lt;b&gt;は&lt;/b&gt;異なります。（RISC OS）</target>
        </trans-unit>
        <trans-unit id="5562a8abf4cafe3ad9adfb9e7cbb5beff80d11ed" translate="yes" xml:space="preserve">
          <source>will cause the entire file to be slurped. For large files, it's better to loop:</source>
          <target state="translated">を実行すると、ファイル全体がスラーリングされてしまいます。大きなファイルの場合は、ループした方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="c184916ba1fdcc854b79c2ce8f3611570d536868" translate="yes" xml:space="preserve">
          <source>will cause the handler to be called with a similar argument list (except, of course, that &lt;code&gt;$_[2]&lt;/code&gt; will be a reference to the variable).</source>
          <target state="translated">ハンドラーが同様の引数リストで呼び出されるようにします（もちろん、 &lt;code&gt;$_[2]&lt;/code&gt; は変数への参照になります）。</target>
        </trans-unit>
        <trans-unit id="caee4713a9cdf89a7945419e9d20fb846188deb3" translate="yes" xml:space="preserve">
          <source>will compile XS code into C code by embedding the constructs necessary to let C functions manipulate Perl values and creates the glue necessary to let Perl access those functions.</source>
          <target state="translated">C関数がPerlの値を操作できるようにするために必要な構造を埋め込むことで、XSコードをCコードにコンパイルし、Perlがそれらの関数にアクセスできるようにするために必要な接着剤を作成します。</target>
        </trans-unit>
        <trans-unit id="bf8a15fdda50374b4163d238b2097ac33d5e0df4" translate="yes" xml:space="preserve">
          <source>will compile XS code into C code by embedding the constructs necessary to let C functions manipulate Perl values and creates the glue necessary to let Perl access those functions. The compiler uses typemaps to determine how to map C function parameters and variables to Perl values.</source>
          <target state="translated">は、C関数がPerlの値を操作できるようにするために必要な構造を埋め込み、Perlがそれらの関数にアクセスできるようにするために必要な接着剤を作成することで、XSのコードをCコードにコンパイルします。コンパイラはタイプマップを使用して、C関数のパラメータと変数をPerlの値にどのようにマッピングするかを決定します。</target>
        </trans-unit>
        <trans-unit id="d62fd6ebb61189db376df4b354a4f3e4747af5de" translate="yes" xml:space="preserve">
          <source>will construct a &quot;binary&quot; stream regardless of the platform defaults, but then enable UTF-8 translation.</source>
          <target state="translated">は、プラットフォームのデフォルトに関係なく &quot;バイナリ&quot; ストリームを構築しますが、UTF-8 変換を有効にします。</target>
        </trans-unit>
        <trans-unit id="958cf42d40b9694a262fb0dd1a956ccae7aeee61" translate="yes" xml:space="preserve">
          <source>will construct a &quot;binary&quot; stream, but then enable UTF-8 translation.</source>
          <target state="translated">は「バイナリ」ストリームを構築しますが、UTF-8変換を有効にします。</target>
        </trans-unit>
        <trans-unit id="ca2af336688d1e8d5e00a2d443084fd9b744a776" translate="yes" xml:space="preserve">
          <source>will correctly push BLUE onto the top of the stack.</source>
          <target state="translated">は青を正しくスタックの上に押し込む.</target>
        </trans-unit>
        <trans-unit id="ff1d4f6ecbef028562f10ecf8ba054ec728c45eb" translate="yes" xml:space="preserve">
          <source>will create the file &quot;FOO.BAT&quot;. Note &quot;pl2bat&quot; strips any .pl suffix and adds a .bat suffix to the generated file.</source>
          <target state="translated">は &quot;FOO.BAT &quot;というファイルを作成します。pl2bat&quot; は .pl の接尾辞を取り除き、生成されたファイルに .bat の接尾辞を追加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="d9d73e9ce730e824d01662cbda4e3da1fcf3537f" translate="yes" xml:space="preserve">
          <source>will do an implicit</source>
          <target state="translated">は暗黙のうちに</target>
        </trans-unit>
        <trans-unit id="abce4a07e1007ee8dd7654b319b0cda84bc64efd" translate="yes" xml:space="preserve">
          <source>will do it for you.</source>
          <target state="translated">がやってくれます。</target>
        </trans-unit>
        <trans-unit id="7108818138127d16c4094725bba30a3d913149fe" translate="yes" xml:space="preserve">
          <source>will do what you mean (fail if stuff is empty)</source>
          <target state="translated">はあなたの言うとおりになるでしょう(中身が空の場合は失敗)</target>
        </trans-unit>
        <trans-unit id="066b5eeba4c2198d50173831282c3c44664d4d50" translate="yes" xml:space="preserve">
          <source>will effectively become</source>
          <target state="translated">となる</target>
        </trans-unit>
        <trans-unit id="7b01657f6df9723f80897f0a01fd87afb4d0fa02" translate="yes" xml:space="preserve">
          <source>will extract and format the documentation from any file in the current directory, any Perl module installed on the system, or any of the standard documentation pages, such as this one. Use &lt;code&gt;perldoc &amp;lt;name&amp;gt;&lt;/code&gt; to get information on any of the utilities described in this document.</source>
          <target state="translated">現在のディレクトリにあるファイル、システムにインストールされているPerlモジュール、またはこのような標準のドキュメントページからドキュメントを抽出してフォーマットします。このドキュメントで説明されているユーティリティに関する情報を取得するには、 &lt;code&gt;perldoc &amp;lt;name&amp;gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="915564ffa096011256f1ddfb99671491100c6813" translate="yes" xml:space="preserve">
          <source>will fail, since Test.pm considers the second argument to be a regex! The best bet is to use the one-argument form:</source>
          <target state="translated">は失敗するでしょう。最善の策は、1引数形式を使うことです。</target>
        </trans-unit>
        <trans-unit id="dca2bf48d13d76f15d7665e7936c9aade6522f0c" translate="yes" xml:space="preserve">
          <source>will first prepend &lt;code&gt;3&lt;/code&gt; onto the front of &lt;code&gt;@INC&lt;/code&gt;, then prepend &lt;code&gt;2&lt;/code&gt;, and then prepend &lt;code&gt;1&lt;/code&gt;. The result is that &lt;code&gt;@INC&lt;/code&gt; begins with:</source>
          <target state="translated">最初付加します &lt;code&gt;3&lt;/code&gt; の前面に &lt;code&gt;@INC&lt;/code&gt; 、次に先頭に追加 &lt;code&gt;2&lt;/code&gt; 、次いでプリペンド &lt;code&gt;1&lt;/code&gt; 。その結果、 &lt;code&gt;@INC&lt;/code&gt; は次で始まります。</target>
        </trans-unit>
        <trans-unit id="ac2e76667ea527c705ec1c1441371cd94ab891b0" translate="yes" xml:space="preserve">
          <source>will first use the &lt;a href=&quot;lib&quot;&gt;lib&lt;/a&gt; pragma to prepend &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;@INC&lt;/code&gt;, then it will prepend &lt;code&gt;2&lt;/code&gt;, then it will prepend &lt;code&gt;3&lt;/code&gt;, resulting in an &lt;code&gt;@INC&lt;/code&gt; that begins with:</source>
          <target state="translated">最初に使用する&lt;a href=&quot;lib&quot;&gt;LIBの&lt;/a&gt;先頭に追加するプラグマを &lt;code&gt;1&lt;/code&gt; に &lt;code&gt;@INC&lt;/code&gt; 、それは付加します &lt;code&gt;2&lt;/code&gt; を、それが付加します &lt;code&gt;3&lt;/code&gt; で得、 &lt;code&gt;@INC&lt;/code&gt; 始まります。</target>
        </trans-unit>
        <trans-unit id="212fc5e54752a78ba3b78f936f759ccf3eed955c" translate="yes" xml:space="preserve">
          <source>will generate or as a reference to a hash.</source>
          <target state="translated">はハッシュを生成します。</target>
        </trans-unit>
        <trans-unit id="2a53f1b0c5018113eb37388423f971ca2d0e17a9" translate="yes" xml:space="preserve">
          <source>will give the same result with or without &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer;&lt;/code&gt; The power operator &lt;code&gt;**&lt;/code&gt; is also not affected, so that 2 ** .5 is always the square root of 2. Now, it so happens that the pre- and post- increment and decrement operators, ++ and --, are not affected by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer;&lt;/code&gt; either. Some may rightly consider this to be a bug -- but at least it's a long-standing one.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;も使用しなくても同じ結果が得られます。べき乗演算子 &lt;code&gt;**&lt;/code&gt; も影響を受けないため、2 ** .5は常に2の平方根になります。今では、前置および後置の増分演算子と減分演算子、++および-は、そうではありません &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer;&lt;/code&gt; 影響を受けます。どちらか。一部の人はこれをバグであると正しく考えるかもしれません-しかし、少なくともそれは長期にわたるものです。</target>
        </trans-unit>
        <trans-unit id="02abd8e5d1214af9cc4030606e16213cf01f104e" translate="yes" xml:space="preserve">
          <source>will give the same result with or without &lt;code&gt;use integer;&lt;/code&gt; The power operator &lt;code&gt;**&lt;/code&gt; is also not affected, so that 2 ** .5 is always the square root of 2. Now, it so happens that the pre- and post- increment and decrement operators, ++ and --, are not affected by &lt;code&gt;use integer;&lt;/code&gt; either. Some may rightly consider this to be a bug -- but at least it's a long-standing one.</source>
          <target state="translated">&lt;code&gt;use integer;&lt;/code&gt; を使用してもしなくても同じ結果が得られます。累乗演算子 &lt;code&gt;**&lt;/code&gt; も影響を受けないため、2 ** .5は常に2の平方根になります。ここで、プリインクリメント演算子とポストデクリメント演算子++および-は影響を受けません。 &lt;code&gt;use integer;&lt;/code&gt; 影響を受けます。どちらか。これをバグだと考える人もいるかもしれませんが、少なくとも長年のバグです。</target>
        </trans-unit>
        <trans-unit id="e522bd0030bde0cd245c6a6a2088de240b790d1c" translate="yes" xml:space="preserve">
          <source>will have exactly the opposite restrictions.</source>
          <target state="translated">は全く逆の制約を受けることになります。</target>
        </trans-unit>
        <trans-unit id="76cbd3657c221b93aeeaf5ae962bd011f97b5f9f" translate="yes" xml:space="preserve">
          <source>will have exactly the opposite restrictions. (However, some shells support the syntax &lt;code&gt;perl your_program.pl &amp;lt;( rsh cat file )&lt;/code&gt;, which produces a filename that can be opened normally.)</source>
          <target state="translated">正反対の制限があります。（ただし、一部のシェルは、正常に開くことができるファイル名を生成する構文 &lt;code&gt;perl your_program.pl &amp;lt;( rsh cat file )&lt;/code&gt; サポートしています。）</target>
        </trans-unit>
        <trans-unit id="911e01951fb3b7f75048f4c14389ccff0d911ab7" translate="yes" xml:space="preserve">
          <source>will have the same effect. This construct is</source>
          <target state="translated">を使っても同じ効果が得られます。この構文は</target>
        </trans-unit>
        <trans-unit id="027d9dd767a399ed29c2f093303b12c4fc85e09e" translate="yes" xml:space="preserve">
          <source>will have their leading dashes stripped.</source>
          <target state="translated">は、先頭のダッシュが取り除かれます。</target>
        </trans-unit>
        <trans-unit id="2194c108734d216b207d2d189e6b066bdc993596" translate="yes" xml:space="preserve">
          <source>will have to specify the installation directories as these most probably have changed since perl itself has been installed. They will have to do this by calling</source>
          <target state="translated">はインストールディレクトリを指定しなければなりません。これを行うには</target>
        </trans-unit>
        <trans-unit id="fd5c38ed8c7727c38022b12bfd4163d2940b7d68" translate="yes" xml:space="preserve">
          <source>will hold.</source>
          <target state="translated">が保持します。</target>
        </trans-unit>
        <trans-unit id="cbda0dd99d938557f490efeb2ffa5530b4ef022d" translate="yes" xml:space="preserve">
          <source>will in most computers print 0, not 1, because even such simple numbers as 0.6 and 0.2 cannot be presented exactly by floating-point numbers. What you think in the above as 'three' is really more like 2.9999999999999995559.</source>
          <target state="translated">ほとんどのコンピュータでは、0.6 や 0.2 のような単純な数字でさえ、浮動小数点数では正確に表現できないからです。あなたが上で「3」と思っているのは、実際には2.999999999999999999995559のようなものです。</target>
        </trans-unit>
        <trans-unit id="0b96340c4517d8e5916a24e5c0c58c099ab880e5" translate="yes" xml:space="preserve">
          <source>will initially increment &lt;code&gt;$cnt&lt;/code&gt; up to 8; then during backtracking, its value will be unwound back to 4, which is the value assigned to &lt;code&gt;$res&lt;/code&gt; . At the end of the regex execution, $cnt will be wound back to its initial value of 0.</source>
          <target state="translated">最初は &lt;code&gt;$cnt&lt;/code&gt; を8まで増やします。その後、バックトラック中に、その値は &lt;code&gt;$res&lt;/code&gt; 割り当てられた値である4に戻されます。正規表現の実行が終了すると、$ cntは初期値の0に戻ります。</target>
        </trans-unit>
        <trans-unit id="285865a2cbeddc4341b4ed732966759c44ff328e" translate="yes" xml:space="preserve">
          <source>will initially increment &lt;code&gt;$cnt&lt;/code&gt; up to 8; then during backtracking, its value will be unwound back to 4, which is the value assigned to &lt;code&gt;$res&lt;/code&gt;. At the end of the regex execution, &lt;code&gt;$cnt&lt;/code&gt; will be wound back to its initial value of 0.</source>
          <target state="translated">最初は &lt;code&gt;$cnt&lt;/code&gt; 最大8までインクリメントします。その後、バックトラック中に、その値は &lt;code&gt;$res&lt;/code&gt; 割り当てられた値である4に巻き戻されます。正規表現の実行が終了すると、 &lt;code&gt;$cnt&lt;/code&gt; は初期値の0に戻されます。</target>
        </trans-unit>
        <trans-unit id="482fd60cac120fdf28a98539580c1dc1bf947239" translate="yes" xml:space="preserve">
          <source>will invoke &lt;code&gt;ExtUtils::Embed&lt;/code&gt; functions while building your application.</source>
          <target state="translated">アプリケーションのビルド中に &lt;code&gt;ExtUtils::Embed&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ec31983ab84cf33f76bb7f28f95cd8a45d78dd13" translate="yes" xml:space="preserve">
          <source>will it apply the &lt;code&gt;Bent&lt;/code&gt; attribute to the variable.</source>
          <target state="translated">&lt;code&gt;Bent&lt;/code&gt; 属性を変数に適用しますか？</target>
        </trans-unit>
        <trans-unit id="cdb47b66626fed7da3a69fabf094bf802562db6c" translate="yes" xml:space="preserve">
          <source>will just extract the &quot;USAGE&quot; section; some of the utilities will automatically call</source>
          <target state="translated">は単に &quot;USAGE&quot; セクションを抽出するだけです;いくつかのユーティリティは自動的に</target>
        </trans-unit>
        <trans-unit id="be6de1408397f34ac967e76e8f03f5647f72bce4" translate="yes" xml:space="preserve">
          <source>will load MODULE only if CONDITION evaluates to true. The above statement has no effect unless &lt;code&gt;CONDITION&lt;/code&gt; is true. If the CONDITION does evaluate to true, then the above line has the same effect as:</source>
          <target state="translated">CONDITIONがtrueと評価された場合にのみ、MODULEをロードします。上記のステートメントは、 &lt;code&gt;CONDITION&lt;/code&gt; がtrueでない限り効果がありません。CONDITIONがtrueと評価された場合、上記の行は次と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="417947d63110228931cd8773ca1769b0152ef181" translate="yes" xml:space="preserve">
          <source>will lock the tied file. &lt;code&gt;MODE&lt;/code&gt; has the same meaning as the second argument to the Perl built-in &lt;code&gt;&lt;a href=&quot;../functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; function; for example &lt;code&gt;LOCK_SH&lt;/code&gt; or &lt;code&gt;LOCK_EX | LOCK_NB&lt;/code&gt; . (These constants are provided by the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Fcntl ':flock'&lt;/code&gt; declaration.)</source>
          <target state="translated">結合されたファイルをロックします。 &lt;code&gt;MODE&lt;/code&gt; は、Perlの組み込み &lt;code&gt;&lt;a href=&quot;../functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 関数の2番目の引数と同じ意味です。たとえば、 &lt;code&gt;LOCK_SH&lt;/code&gt; または &lt;code&gt;LOCK_EX | LOCK_NB&lt;/code&gt; 。（これらの定数は、 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Fcntl ':flock'&lt;/code&gt; 宣言によって提供されます。）</target>
        </trans-unit>
        <trans-unit id="6117fea4004807a86bb9e2bc24240fa85f9a4d9a" translate="yes" xml:space="preserve">
          <source>will lock the tied file. &lt;code&gt;MODE&lt;/code&gt; has the same meaning as the second argument to the Perl built-in &lt;code&gt;flock&lt;/code&gt; function; for example &lt;code&gt;LOCK_SH&lt;/code&gt; or &lt;code&gt;LOCK_EX | LOCK_NB&lt;/code&gt;. (These constants are provided by the &lt;code&gt;use Fcntl ':flock'&lt;/code&gt; declaration.)</source>
          <target state="translated">関連付けられたファイルをロックします。 &lt;code&gt;MODE&lt;/code&gt; は、Perlの組み込み &lt;code&gt;flock&lt;/code&gt; 関数の2番目の引数と同じ意味を持ちます。たとえば、 &lt;code&gt;LOCK_SH&lt;/code&gt; または &lt;code&gt;LOCK_EX | LOCK_NB&lt;/code&gt; 。（これらの定数は、 &lt;code&gt;use Fcntl ':flock'&lt;/code&gt; 宣言によって提供されます。）</target>
        </trans-unit>
        <trans-unit id="fde5332cf051e296efcfa60b991d8b50c9c48011" translate="yes" xml:space="preserve">
          <source>will look like this:</source>
          <target state="translated">はこのようになります。</target>
        </trans-unit>
        <trans-unit id="9e385389da5f12d892ae543d3886ffd128ec573e" translate="yes" xml:space="preserve">
          <source>will match &quot;foo&quot; using the locale's rules for case-insensitive matching, but the &lt;code&gt;/l&lt;/code&gt; does not affect how the &lt;code&gt;\U&lt;/code&gt; operates. Most likely you want both of them to use locale rules. To do this, instead compile the regular expression within the scope of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; . This both implicitly adds the &lt;code&gt;/l&lt;/code&gt; , and applies locale rules to the &lt;code&gt;\U&lt;/code&gt; . The lesson is to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , and not &lt;code&gt;/l&lt;/code&gt; explicitly.</source>
          <target state="translated">大文字と小文字を区別しないマッチングのロケールのルールを使用して「foo」とマッチングしますが、 &lt;code&gt;/l&lt;/code&gt; は &lt;code&gt;\U&lt;/code&gt; 動作に影響しません。ほとんどの場合、両方のロケールルールを使用する必要があります。これを行うには、代わりに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 範囲内で正規表現をコンパイルします。これにより、暗黙的に &lt;code&gt;/l&lt;/code&gt; が追加され、ロケールルールが &lt;code&gt;\U&lt;/code&gt; 適用されます。レッスンは、 &lt;code&gt;/l&lt;/code&gt; を明示的にではなく、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用すること&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="d739bc2509a1b3d9f597cd5bbab08f36e734ef53" translate="yes" xml:space="preserve">
          <source>will match &quot;foo&quot; using the locale's rules for case-insensitive matching, but the &lt;code&gt;/l&lt;/code&gt; does not affect how the &lt;code&gt;\U&lt;/code&gt; operates. Most likely you want both of them to use locale rules. To do this, instead compile the regular expression within the scope of &lt;code&gt;use locale&lt;/code&gt;. This both implicitly adds the &lt;code&gt;/l&lt;/code&gt;, and applies locale rules to the &lt;code&gt;\U&lt;/code&gt;. The lesson is to &lt;code&gt;use locale&lt;/code&gt;, and not &lt;code&gt;/l&lt;/code&gt; explicitly.</source>
          <target state="translated">大文字と小文字を区別しない照合のロケール規則を使用して「foo」と照合しますが、 &lt;code&gt;/l&lt;/code&gt; は &lt;code&gt;\U&lt;/code&gt; 動作には影響しません。ほとんどの場合、両方にロケールルールを使用する必要があります。これを行うには、代わりに、uselocaleのスコープ内で正規表現をコンパイルし &lt;code&gt;use locale&lt;/code&gt; 。これは、暗黙的に &lt;code&gt;/l&lt;/code&gt; を追加し、ロケールルールを &lt;code&gt;\U&lt;/code&gt; 適用します。レッスンでは、 &lt;code&gt;/l&lt;/code&gt; を明示的に &lt;code&gt;use locale&lt;/code&gt; はなく、ロケールを使用します。</target>
        </trans-unit>
        <trans-unit id="109f68c2b8ad8f0d77ed465628f16e2a2c2e7277" translate="yes" xml:space="preserve">
          <source>will match &lt;code&gt;\x8e&lt;/code&gt; , even though &lt;code&gt;\x89&lt;/code&gt; is &quot;i&quot; and &lt;code&gt;\x91 &lt;/code&gt; is &quot;j&quot;, and &lt;code&gt;\x8e&lt;/code&gt; is a gap character, from the alphabetic viewpoint.</source>
          <target state="translated">一致します &lt;code&gt;\x8e&lt;/code&gt; もかかわらず、 &lt;code&gt;\x89&lt;/code&gt; ある「i」はと &lt;code&gt;\x91 &lt;/code&gt; 「J」であり、 &lt;code&gt;\x8e&lt;/code&gt; アルファベットの観点からギャップ文字、です。</target>
        </trans-unit>
        <trans-unit id="2b2b762b39aff3794056e6340056828aa00cc7fc" translate="yes" xml:space="preserve">
          <source>will match &lt;code&gt;\x8e&lt;/code&gt;, even though &lt;code&gt;\x89&lt;/code&gt; is &quot;i&quot; and &lt;code&gt;\x91 &lt;/code&gt; is &quot;j&quot;, and &lt;code&gt;\x8e&lt;/code&gt; is a gap character, from the alphabetic viewpoint.</source>
          <target state="translated">一致します &lt;code&gt;\x8e&lt;/code&gt; もかかわらず、 &lt;code&gt;\x89&lt;/code&gt; ある「i」はと &lt;code&gt;\x91 &lt;/code&gt; 「J」であり、 &lt;code&gt;\x8e&lt;/code&gt; アルファベットの観点からギャップ文字、です。</target>
        </trans-unit>
        <trans-unit id="90a6766448c16d38bfe8dff80f09487335928909" translate="yes" xml:space="preserve">
          <source>will match &lt;code&gt;blah&lt;/code&gt; in any case, some spaces, and an exact (</source>
          <target state="translated">一致します &lt;code&gt;blah&lt;/code&gt; （どのような場合でも、いくつかのスペース、そして正確に</target>
        </trans-unit>
        <trans-unit id="7d850ee28348441c8fb351f520b588b1ffa9761a" translate="yes" xml:space="preserve">
          <source>will match the filename.</source>
          <target state="translated">はファイル名と一致します。</target>
        </trans-unit>
        <trans-unit id="3a3ef3a495124b2a0e6f942ca1a68028e5634cba" translate="yes" xml:space="preserve">
          <source>will match, and &lt;code&gt;$1&lt;/code&gt; will be &lt;code&gt;AB&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; will be &lt;code&gt;&quot;B&quot;&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; will not be set. If another branch in the inner parentheses was matched, such as in the string 'ACDE', then the &lt;code&gt;&quot;D&quot;&lt;/code&gt; and &lt;code&gt;&quot;E&quot;&lt;/code&gt; would have to be matched as well.</source>
          <target state="translated">一致し、 &lt;code&gt;$1&lt;/code&gt; は &lt;code&gt;AB&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; は &lt;code&gt;&quot;B&quot;&lt;/code&gt; 、 &lt;code&gt;$3&lt;/code&gt; は設定されません。文字列「ACDE」のように、内側の括弧内の別のブランチが一致した場合は、 &lt;code&gt;&quot;D&quot;&lt;/code&gt; と &lt;code&gt;&quot;E&quot;&lt;/code&gt; も一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b19d9e504a210ea89daa1807562b0478767084f" translate="yes" xml:space="preserve">
          <source>will match, and &lt;code&gt;$1&lt;/code&gt; will be &lt;code&gt;AB&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; will be &lt;code&gt;B&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; will not be set. If another branch in the inner parentheses was matched, such as in the string 'ACDE', then the &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt; would have to be matched as well.</source>
          <target state="translated">一致し、 &lt;code&gt;$1&lt;/code&gt; は &lt;code&gt;AB&lt;/code&gt; になり、 &lt;code&gt;$2&lt;/code&gt; は &lt;code&gt;B&lt;/code&gt; になり、 &lt;code&gt;$3&lt;/code&gt; は設定されません。文字列 'ACDE'のように、括弧内の別のブランチが一致した場合、 &lt;code&gt;D&lt;/code&gt; と &lt;code&gt;E&lt;/code&gt; も一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="db2173f99c15aec604a37b03bb19ad87c2e9686f" translate="yes" xml:space="preserve">
          <source>will modify $u2 as well as $u1, because both variables are references to the same array. Had &lt;code&gt;getusers&lt;/code&gt; not been memoized, $u1 and $u2 would have referred to different arrays.</source>
          <target state="translated">両方の変数は同じ配列への参照であるため、$ u2と$ u1を変更します。 &lt;code&gt;getusers&lt;/code&gt; がメモされていなければ、$ u1と$ u2は異なる配列を参照することになります。</target>
        </trans-unit>
        <trans-unit id="56a0e2c0e3a6bfe2b40c936f6d822ddccc889e47" translate="yes" xml:space="preserve">
          <source>will neither assign 42 to $x</source>
          <target state="translated">は $x に 42 を代入しません。</target>
        </trans-unit>
        <trans-unit id="9edcb2b7ab077ed29ec9d28bcba6b5e91ef13ffe" translate="yes" xml:space="preserve">
          <source>will never be accessed. Additionally, the existence of</source>
          <target state="translated">がアクセスされることはありません。さらに</target>
        </trans-unit>
        <trans-unit id="bd8807e68761819a553cf78efa78fb8b26c500c5" translate="yes" xml:space="preserve">
          <source>will never match, as the &lt;code&gt;a++&lt;/code&gt; will gobble up all the &lt;code&gt;&quot;a&quot;&lt;/code&gt;'s in the string and won't leave any for the remaining part of the pattern. This feature can be extremely useful to give perl hints about where it shouldn't backtrack. For instance, the typical &quot;match a double-quoted string&quot; problem can be most efficiently performed when written as:</source>
          <target state="translated">&lt;code&gt;a++&lt;/code&gt; は文字列内のすべての &lt;code&gt;&quot;a&quot;&lt;/code&gt; を飲み込み、パターンの残りの部分に何も残さないため、一致することはありません。この機能は、バックトラックすべきでない場所についてのPerlのヒントを与えるのに非常に役立ちます。たとえば、一般的な「二重引用符で囲まれた文字列に一致する」問題は、次のように記述すると最も効率的に実行できます。</target>
        </trans-unit>
        <trans-unit id="524ef249301f2929ce4307d365e5fa52cb183591" translate="yes" xml:space="preserve">
          <source>will never match, as the &lt;code&gt;a++&lt;/code&gt; will gobble up all the &lt;code&gt;a&lt;/code&gt; 's in the string and won't leave any for the remaining part of the pattern. This feature can be extremely useful to give perl hints about where it shouldn't backtrack. For instance, the typical &quot;match a double-quoted string&quot; problem can be most efficiently performed when written as:</source>
          <target state="translated">&lt;code&gt;a++&lt;/code&gt; は文字列内のすべての &lt;code&gt;a&lt;/code&gt; を飲み込み、パターンの残りの部分には何も残さないので、決して一致しません。この機能は、バックトラックすべきではない場所についてのヒントをperlに与えるのに非常に役立ちます。たとえば、一般的な「二重引用符で囲まれた文字列に一致する」問題は、次のように記述すると最も効率的に実行できます。</target>
        </trans-unit>
        <trans-unit id="cf101365c53e8f42c5b08ca87943df667dc3b58c" translate="yes" xml:space="preserve">
          <source>will not affect</source>
          <target state="translated">差し支えない</target>
        </trans-unit>
        <trans-unit id="f0a53a44c73c968f4506c42dbd7c202fdde9aa25" translate="yes" xml:space="preserve">
          <source>will not automatically generate prototype code for all xsubs. This flag will enable prototypes.</source>
          <target state="translated">は、すべての xsubs のプロトタイプコードを自動的に生成しません。このフラグはプロトタイプを有効にします。</target>
        </trans-unit>
        <trans-unit id="37f358342227139465ebf67d77c4e5c07cc3ca01" translate="yes" xml:space="preserve">
          <source>will not create an intermediate list of 500,000 integers.</source>
          <target state="translated">は、50万個の整数の中間リストを作成しません。</target>
        </trans-unit>
        <trans-unit id="a909cd12fa7841454a3513c9ecc27aa26ed050e5" translate="yes" xml:space="preserve">
          <source>will not, and a subsequent pop won't restore the correct attributes. PUSHCOLOR pushes the attributes set by its argument, which is normally a string of color constants. It can't ask the terminal what the current attributes are.</source>
          <target state="translated">はそうではなく、その後のポップは正しい属性を復元しません。PUSHCOLOR は引数で設定された属性をプッシュします。現在の属性が何であるかをターミナルに尋ねることはできません。</target>
        </trans-unit>
        <trans-unit id="5aecbb74b57e959a8f88701a03d15ec0b4986702" translate="yes" xml:space="preserve">
          <source>will not. If you are using background colors, you will probably want to either use say() (in newer versions of Perl) or print the newline with a separate print statement to avoid confusing the terminal.</source>
          <target state="translated">を使用しても改行されません。背景色を使用している場合は、おそらく say()(Perl の新しいバージョンでは)を使用するか、ターミナルを混乱させないように別の print 文で改行を印刷した方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="51cb32ab55ef73ac4c7e3b3c80f2c3a6bd4c4502" translate="yes" xml:space="preserve">
          <source>will output &quot;o&quot; twice.</source>
          <target state="translated">は &quot;o &quot;を2回出力します。</target>
        </trans-unit>
        <trans-unit id="a06e774b79ee30cc4528a712043ad54d3f5a1a0f" translate="yes" xml:space="preserve">
          <source>will output &lt;code&gt;0&lt;/code&gt; on default 32-bit builds, since &lt;code&gt;bigint&lt;/code&gt; never sees the string literals. To ensure the expression is all treated as &lt;code&gt;Math::BigInt&lt;/code&gt; objects, use a literal number in the expression:</source>
          <target state="translated">&lt;code&gt;bigint&lt;/code&gt; は文字列リテラルを決して見ないため、デフォルトの32ビットビルドでは &lt;code&gt;0&lt;/code&gt; を出力します。式がすべて &lt;code&gt;Math::BigInt&lt;/code&gt; オブジェクトとして扱われるようにするには、式でリテラル数を使用します。</target>
        </trans-unit>
        <trans-unit id="07967563cc177965a7ed97715e81d6fdae7cbfa8" translate="yes" xml:space="preserve">
          <source>will output &lt;code&gt;0&lt;/code&gt; on default 32-bit builds, since &lt;code&gt;bigrat&lt;/code&gt; never sees the string literals. To ensure the expression is all treated as &lt;code&gt;Math::BigInt&lt;/code&gt; or &lt;code&gt;BigFloat&lt;/code&gt; objects, use a literal number in the expression:</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; は文字列リテラルを決して見ないため、デフォルトの32ビットビルドでは &lt;code&gt;0&lt;/code&gt; を出力します。式がすべて &lt;code&gt;Math::BigInt&lt;/code&gt; &lt;code&gt;BigFloat&lt;/code&gt; またはBigFloatオブジェクトとして扱われるようにするには、式でリテラル数を使用します。</target>
        </trans-unit>
        <trans-unit id="b71659f573a74f6d9f73f656d46b8610e6881c01" translate="yes" xml:space="preserve">
          <source>will output &lt;code&gt;0&lt;/code&gt; on default 32-bit builds, since &lt;code&gt;bigrat&lt;/code&gt; never sees the string literals. To ensure the expression is all treated as &lt;code&gt;Math::BigInt&lt;/code&gt; or &lt;code&gt;Math::BigRat&lt;/code&gt; objects, use a literal number in the expression:</source>
          <target state="translated">&lt;code&gt;bigrat&lt;/code&gt; は文字列リテラルを決して見ないため、デフォルトの32ビットビルドでは &lt;code&gt;0&lt;/code&gt; を出力します。式は、すべてのものとして扱われることを確認するには &lt;code&gt;Math::BigInt&lt;/code&gt; か、 &lt;code&gt;Math::BigRat&lt;/code&gt; オブジェクト、式の中でリテラルの数を使用します。</target>
        </trans-unit>
        <trans-unit id="5d7a9b3fb1f88c1e1d18d8b9c37f765ed993681d" translate="yes" xml:space="preserve">
          <source>will place into $count the number of digit groups found in $string. This happens because the pattern match is in list context (since it is being assigned to the empty list), and will therefore return a list of all matching parts of the string. The list assignment in scalar context will translate that into the number of elements (here, the number of times the pattern matched) and assign that to $count. Note that simply using</source>
          <target state="translated">は、$string で見つかった数字グループの数を $count に入れます。これは、パターンマッチがリストコンテキスト (空のリストに代入されているため)で行われるため、文字列のすべてのマッチした部分のリストが返されるからです。スカラコンテキストでのリスト代入は、それを要素数 (ここではパターンマッチの回数)に変換して $count に代入します。単純に</target>
        </trans-unit>
        <trans-unit id="158b4d249db9d3c641342d6ffe07a57aa001b196" translate="yes" xml:space="preserve">
          <source>will preserve the error and restore reliable error handling.</source>
          <target state="translated">はエラーを保存し、信頼性の高いエラー処理を復元します。</target>
        </trans-unit>
        <trans-unit id="d893c24989b32aee817b8346e7ad376f369b2d24" translate="yes" xml:space="preserve">
          <source>will print</source>
          <target state="translated">印刷されます</target>
        </trans-unit>
        <trans-unit id="fd687fe7714e5a81fa512dd577f023b74092d11e" translate="yes" xml:space="preserve">
          <source>will print 2, not 1. The only exception is that regular expressions have &lt;code&gt;\X&lt;/code&gt; for matching an extended grapheme cluster. (Thus &lt;code&gt;\X&lt;/code&gt; in a regular expression would match the entire sequence of both the example characters.)</source>
          <target state="translated">は1ではなく2を出力します。唯一の例外は、拡張された書記素クラスタを照合するための正規表現に &lt;code&gt;\X&lt;/code&gt; があることです。（したがって、正規表現の &lt;code&gt;\X&lt;/code&gt; は、両方の例の文字のシーケンス全体と一致します。）</target>
        </trans-unit>
        <trans-unit id="fb29e62161769d237b93313643368a48b797975b" translate="yes" xml:space="preserve">
          <source>will print any &lt;code&gt;=head2 Caveats&lt;/code&gt; section (only) within any of the three &lt;code&gt;=head1&lt;/code&gt; sections.</source>
          <target state="translated">任意の印刷され &lt;code&gt;=head2 Caveats&lt;/code&gt; 3つの任意以内部分（のみ） &lt;code&gt;=head1&lt;/code&gt; セクション。</target>
        </trans-unit>
        <trans-unit id="5094300d0d532d8932e70f6691fa42ee86dfc712" translate="yes" xml:space="preserve">
          <source>will print nothing but newlines. Use either &lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt; or &lt;a href=&quot;bigfloat&quot;&gt;Math::BigFloat&lt;/a&gt; to get this to work.</source>
          <target state="translated">改行だけを印刷します。これを機能させるには、&lt;a href=&quot;../bignum&quot;&gt;bignum&lt;/a&gt;または&lt;a href=&quot;bigfloat&quot;&gt;Math :: BigFloat&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="5f20759593b002250a08ac3165608cf59d1d82f9" translate="yes" xml:space="preserve">
          <source>will print out:</source>
          <target state="translated">がプリントアウトされます。</target>
        </trans-unit>
        <trans-unit id="2e9aaf473ea286c62a53337f9951358323be6844" translate="yes" xml:space="preserve">
          <source>will print the number of items returned from the Perl subroutine and their value (for simplicity it assumes that they are integer). So if</source>
          <target state="translated">はPerlのサブルーチンから返された項目の数とその値を表示します(簡単のために整数であると仮定しています)。ですから、もし</target>
        </trans-unit>
        <trans-unit id="f115f3fe71ae59d269dceb54d217a18d98aaf788" translate="yes" xml:space="preserve">
          <source>will print the sorted contents of the file named</source>
          <target state="translated">という名前のファイルのソートされた内容を表示します。</target>
        </trans-unit>
        <trans-unit id="898011ad8ba0ad932dc0a21e6656a3baf0ccd836" translate="yes" xml:space="preserve">
          <source>will print: 5.8, -5, 7, 3, 2, 10, 1, 2147483647, -2147483648</source>
          <target state="translated">と表示されます。5.8,-5,7,3,2,10,1,2147483647,-2147483648</target>
        </trans-unit>
        <trans-unit id="a2df2915d4c95ac1935b8649d919c89f0b71efb7" translate="yes" xml:space="preserve">
          <source>will produce HTML pages from POD.</source>
          <target state="translated">はPODからHTMLページを生成します。</target>
        </trans-unit>
        <trans-unit id="35a48bc9e89843fe90d9679e3c72dc42ba9f3426" translate="yes" xml:space="preserve">
          <source>will produce a customized executable.</source>
          <target state="translated">はカスタマイズされた実行ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="37ce8d4fdf5864184a859e4556249981464a898f" translate="yes" xml:space="preserve">
          <source>will produce error messages, usually caused by the fact that there are still threads running when the program exits. You should not be alarmed by this.</source>
          <target state="translated">を実行するとエラーメッセージが表示されますが、これは通常、プログラムが終了したときにまだスレッドが実行されていることが原因です。これを心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5713460a39f843602ae0bf2774c259265a6c60d6" translate="yes" xml:space="preserve">
          <source>will produce this event structure:</source>
          <target state="translated">がこのイベント構造を生成します。</target>
        </trans-unit>
        <trans-unit id="40a447e2e638aff917b8a98c4dbccbd2ef36fe3c" translate="yes" xml:space="preserve">
          <source>will read a record of no more than 32768 characters from $fh. If you're not reading from a record-oriented file (or your OS doesn't have record-oriented files), then you'll likely get a full chunk of data with every read. If a record is larger than the record size you've set, you'll get the record back in pieces. Trying to set the record size to zero or less is deprecated and will cause $/ to have the value of &quot;undef&quot;, which will cause reading in the (rest of the) whole file.</source>
          <target state="translated">は $fh から 32768 文字以内のレコードを読みます。レコード指向のファイルから読んでいない (あるいは OS にレコード指向のファイルがない)場合は、読み込みのたびにデータの塊を取得することになるでしょう。レコードが設定したレコードサイズよりも大きい場合、レコードはバラバラになって戻ってきます。レコードサイズをゼロ以下に設定しようとするのは非推奨で、 $/の値が &quot;undef&quot; になってしまい、(残りの)ファイル全体を読み込むことになります。</target>
        </trans-unit>
        <trans-unit id="9dbce3601b41181a479b14fe24812dbea1320b3d" translate="yes" xml:space="preserve">
          <source>will remain open. The fact that Berkeley DB then reports the attempt to open a database that is already open via the catch-all &quot;Invalid argument&quot; doesn't help.</source>
          <target state="translated">は開いたままになります。バークレーDBが、キャッチオールの「無効な引数」を使って、すでに開いているデータベースを開こうとしたことを報告しているという事実は、何の助けにもなりません。</target>
        </trans-unit>
        <trans-unit id="6f37ba2b9a5fbee754eb7c8269a813aeb18cd4ca" translate="yes" xml:space="preserve">
          <source>will require a leading colon (as in &lt;code&gt;&quot;=for :formatname&quot;&lt;/code&gt; , or &lt;code&gt;&quot;=begin :formatname&quot; ... &quot;=end :formatname&quot;&lt;/code&gt; ), to signal that the text is not raw data, but instead</source>
          <target state="translated">テキストが生のデータではなく、代わりに &lt;code&gt;&quot;=for :formatname&quot;&lt;/code&gt; または &lt;code&gt;&quot;=begin :formatname&quot; ... &quot;=end :formatname&quot;&lt;/code&gt; ように、先頭にコロンが必要です。</target>
        </trans-unit>
        <trans-unit id="2dcf620598fd6ad073d4d7835fe47d62946c10ea" translate="yes" xml:space="preserve">
          <source>will require a leading colon (as in &lt;code&gt;&quot;=for :formatname&quot;&lt;/code&gt;, or &lt;code&gt;&quot;=begin :formatname&quot; ... &quot;=end :formatname&quot;&lt;/code&gt;), to signal that the text is not raw data, but instead</source>
          <target state="translated">テキストが生データではなく、代わりに生データであることを示すために、先頭のコロン（ &lt;code&gt;&quot;=for :formatname&quot;&lt;/code&gt; または &lt;code&gt;&quot;=begin :formatname&quot; ... &quot;=end :formatname&quot;&lt;/code&gt; ）が必要になります</target>
        </trans-unit>
        <trans-unit id="00e02cdb26815577afd3b77c2b81936feda569cf" translate="yes" xml:space="preserve">
          <source>will reset the display mode afterward, whereas:</source>
          <target state="translated">を押すと表示モードがリセットされます。</target>
        </trans-unit>
        <trans-unit id="cfd246ad185bc0482eb908f8133758235cbeffe1" translate="yes" xml:space="preserve">
          <source>will restore the value of &lt;code&gt;SV&lt;/code&gt; using the stored value. It doesn't handle magic. Use &lt;code&gt;save_scalar&lt;/code&gt; if magic is affected.</source>
          <target state="translated">保存された値を使用して &lt;code&gt;SV&lt;/code&gt; の値を復元します。魔法には対応していません。マジックが影響を受ける場合は、 &lt;code&gt;save_scalar&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="dedff76ebbcc44f9031f5b0709892f86da6f8e7a" translate="yes" xml:space="preserve">
          <source>will result in an &lt;code&gt;@INC&lt;/code&gt; that begins with:</source>
          <target state="translated">なります &lt;code&gt;@INC&lt;/code&gt; で始まります。</target>
        </trans-unit>
        <trans-unit id="bcf47e23e9e89e816d5345e18bf5cc985f8e41ea" translate="yes" xml:space="preserve">
          <source>will result in the &lt;code&gt;@_&lt;/code&gt; array having the following values:</source>
          <target state="translated">なり &lt;code&gt;@_&lt;/code&gt; 以下の値を有するアレイ。</target>
        </trans-unit>
        <trans-unit id="2d2e2d7a28db10ac316ffbb83e9655b586ac78bf" translate="yes" xml:space="preserve">
          <source>will search the &lt;a href=&quot;perlvar#%40INC&quot;&gt;&lt;code&gt;@INC&lt;/code&gt;&lt;/a&gt; directories, and update &lt;a href=&quot;perlvar#%25INC&quot;&gt;&lt;code&gt;%INC&lt;/code&gt;&lt;/a&gt; if the file is found. See &lt;a href=&quot;perlvar#%40INC&quot;&gt;&quot;@INC&quot; in perlvar&lt;/a&gt; and &lt;a href=&quot;perlvar#%25INC&quot;&gt;&quot;%INC&quot; in perlvar&lt;/a&gt; for these variables. In particular, note that whilst historically &lt;a href=&quot;perlvar#%40INC&quot;&gt;&lt;code&gt;@INC&lt;/code&gt;&lt;/a&gt; contained '.' (the current directory) making these two cases equivalent, that is no longer necessarily the case, as '.' is not included in &lt;code&gt;@INC&lt;/code&gt; by default in perl versions 5.26.0 onwards. Instead, perl will now warn:</source>
          <target state="translated">&lt;a href=&quot;perlvar#%40INC&quot;&gt; &lt;code&gt;@INC&lt;/code&gt; &lt;/a&gt;ディレクトリを検索し、ファイルが見つかった場合は&lt;a href=&quot;perlvar#%25INC&quot;&gt; &lt;code&gt;%INC&lt;/code&gt; &lt;/a&gt;を更新します。参照&lt;a href=&quot;perlvar#%40INC&quot;&gt;はperlvar内「@INC」&lt;/a&gt;と&lt;a href=&quot;perlvar#%25INC&quot;&gt;はperlvarに「％INCを」&lt;/a&gt;これらの変数のために。特に、歴史的に&lt;a href=&quot;perlvar#%40INC&quot;&gt; &lt;code&gt;@INC&lt;/code&gt; に&lt;/a&gt;は「。」が含まれていたことに注意してください。（現在のディレクトリ）これらの2つのケースを同等にする、つまり「。」のように必ずしもそうではない。perlバージョン5.26.0以降では、デフォルトで &lt;code&gt;@INC&lt;/code&gt; に含まれていません。代わりに、perlは次のように警告します。</target>
        </trans-unit>
        <trans-unit id="b214f323b0d930bc4b48c529ba1af86a9de0d7a3" translate="yes" xml:space="preserve">
          <source>will set &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; , but</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; を設定しますが、</target>
        </trans-unit>
        <trans-unit id="622732fbbb48d40e69161e516383620abaf30427" translate="yes" xml:space="preserve">
          <source>will set &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, but</source>
          <target state="translated">、 &lt;code&gt;v&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; を設定 &lt;code&gt;a&lt;/code&gt; が、</target>
        </trans-unit>
        <trans-unit id="f66b27e740d658271832997896a10c6bbc45b211" translate="yes" xml:space="preserve">
          <source>will set &lt;code&gt;vax&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;vax&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="50c2a5577a1c075266181eade99886705353c1ac" translate="yes" xml:space="preserve">
          <source>will set &lt;code&gt;vax&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vax&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="abeb9a24b6c6f570b68ade97160028350917ace8" translate="yes" xml:space="preserve">
          <source>will set all three.</source>
          <target state="translated">は3つすべてを設定します。</target>
        </trans-unit>
        <trans-unit id="6454ef3b29477d49c2c7980e79cde8b57c1ed94f" translate="yes" xml:space="preserve">
          <source>will still exist after the call to</source>
          <target state="translated">を呼び出した後も存在することになります。</target>
        </trans-unit>
        <trans-unit id="588ec16637097d7d1d0638d77c96a8a5032b93a3" translate="yes" xml:space="preserve">
          <source>will test only the regex, which causes both operands to be treated as boolean. Watch out for this one, then, because an arrayref is always a true value, which makes it effectively redundant. Not a good idea.</source>
          <target state="translated">は正規表現のみをテストするので、両方のオペランドがブール値として扱われます。配列refは常に真の値であるため、事実上冗長になります。良い考えではありません。</target>
        </trans-unit>
        <trans-unit id="bcbf4eab8642ab8923d66dad2868cf95ad241494" translate="yes" xml:space="preserve">
          <source>will then attempt to:</source>
          <target state="translated">を試みます。</target>
        </trans-unit>
        <trans-unit id="9f4bb9d65e83043ff5b7e82034ad61c789030aed" translate="yes" xml:space="preserve">
          <source>will transliterate any A to X.</source>
          <target state="translated">は任意のAをXに変換します。</target>
        </trans-unit>
        <trans-unit id="8c5ff1dc5075b42cbe189997bcd24a4dd7044963" translate="yes" xml:space="preserve">
          <source>will trigger two filters, one for the reading of the key and one for the reading of the value.</source>
          <target state="translated">は2つのフィルタを起動します。</target>
        </trans-unit>
        <trans-unit id="3ed3f8cd65c348f27de4a80b666167e4693d1656" translate="yes" xml:space="preserve">
          <source>will try loading the classes YourProjClass::en_us (note lowercase!), YourProjClass::fr, YourProjClass::kon, YourProjClass::i_klingon and YourProjClass::i_klingon_romanized. (And it'll stop at the first one that actually loads.)</source>
          <target state="translated">は、YourProjClass::en_us (小文字に注意!)、YourProjClass::fr、YourProjClass::kon、YourProjClass::i_klingon、YourProjClass::i_klingon_romanized のクラスを読み込もうとします。(そして、実際にロードされる最初のもので停止します)</target>
        </trans-unit>
        <trans-unit id="c097b2a013bfe704dfa7b64798a8d4b40a34ed49" translate="yes" xml:space="preserve">
          <source>will use smart matching (only the first operand is considered), whereas</source>
          <target state="translated">はスマートマッチングを使用します(最初のオペランドのみを考慮します)。</target>
        </trans-unit>
        <trans-unit id="5cc2cc537da4d8f70033128374e99deb871707f6" translate="yes" xml:space="preserve">
          <source>will use smartmatching because only</source>
          <target state="translated">がスマートマッチングを使用するのは</target>
        </trans-unit>
        <trans-unit id="514139923bd059976cc81a9bef6162ccd170175a" translate="yes" xml:space="preserve">
          <source>will usually call</source>
          <target state="translated">お呼びになる</target>
        </trans-unit>
        <trans-unit id="81fcf2d95c7bfeca0899d8452fef6f4f9bd6f8d9" translate="yes" xml:space="preserve">
          <source>will work as well.)</source>
          <target state="translated">も同様に動作します)。</target>
        </trans-unit>
        <trans-unit id="2892afe1b68a0f4ac688e2819db40fcb2dbe61aa" translate="yes" xml:space="preserve">
          <source>will work correctly. These mixed cases don't do always work when using Math::BigInt or Math::BigFloat alone, or at least not in the way normal Perl scalars work.</source>
          <target state="translated">は正しく動作します。これらの混合ケースは、Math::BigInt や Math::BigFloat を単独で使用している場合には常に動作するわけではありませんし、少なくとも通常の Perl のスカラーが動作する方法では動作しません。</target>
        </trans-unit>
        <trans-unit id="bc5353c166b1ce6a2755fffe1f9473c7c604fb2e" translate="yes" xml:space="preserve">
          <source>will work in many but not all cases. You see, it's too simple-minded for certain kinds of C programs, in particular, those with what appear to be comments in quoted strings. For that, you'd need something like this, created by Jeffrey Friedl and later modified by Fred Curtis.</source>
          <target state="translated">は多くの場合で動作しますが、すべての場合ではありません。これは、ある種のCプログラム、特に引用符で囲まれた文字列の中にコメントがあるように見えるプログラムには、あまりにも単純なものになっています。そのためには、Jeffrey Friedlによって作成され、後にFred Curtisによって修正されたこのようなものが必要です。</target>
        </trans-unit>
        <trans-unit id="786d912fad11b712a3268fcedeb0dec988a5d652" translate="yes" xml:space="preserve">
          <source>will work with earlier versions of Perl 5. Hence, such a module may take full advantage of syntactical and other improvements in Perl 5 blead.</source>
          <target state="translated">そのため、このようなモジュールは Perl 5 の構文やその他の改善点をフルに活用することができます。</target>
        </trans-unit>
        <trans-unit id="56a8761533e221ca7073d4e149920f8d5dc2303f" translate="yes" xml:space="preserve">
          <source>willsheppard@github</source>
          <target state="translated">willsheppard@github</target>
        </trans-unit>
        <trans-unit id="d11df7412eb53de0f032fa263537630590c98be8" translate="yes" xml:space="preserve">
          <source>win32/</source>
          <target state="translated">win32/</target>
        </trans-unit>
        <trans-unit id="ef20e66907c936dd8f32cedd2cde044f7f103034" translate="yes" xml:space="preserve">
          <source>win32/perllib.c</source>
          <target state="translated">win32/perllib.c</target>
        </trans-unit>
        <trans-unit id="c80ff54bb2e78cbed5692120f1a8d2821ab80763" translate="yes" xml:space="preserve">
          <source>win32_croak_not_implemented</source>
          <target state="translated">win32_croak_not_implemented</target>
        </trans-unit>
        <trans-unit id="ffc229a00767de35e4be6135e2ffebcf9882c38a" translate="yes" xml:space="preserve">
          <source>wince</source>
          <target state="translated">wince</target>
        </trans-unit>
        <trans-unit id="123bb8126c34dd474d44011b10cfbf904c3172d4" translate="yes" xml:space="preserve">
          <source>wince port was kept in the same</source>
          <target state="translated">ｳｨﾝｽﾎﾟｰﾄは同じように保たれていた</target>
        </trans-unit>
        <trans-unit id="5cd6bd4c16cc2a47ce31db4e0755a63599fc21d0" translate="yes" xml:space="preserve">
          <source>wince/Makefile.ce</source>
          <target state="translated">wince/Makefile.ce</target>
        </trans-unit>
        <trans-unit id="8fcd25a39d2037183044a8897e9a5333d727fded" translate="yes" xml:space="preserve">
          <source>with</source>
          <target state="translated">with</target>
        </trans-unit>
        <trans-unit id="516d8aa61b6759073fd78a57717de8007b3370ce" translate="yes" xml:space="preserve">
          <source>with 0 if it does, 1 if it does not (ie. shell's idea of true and false).</source>
          <target state="translated">の場合は0、そうでない場合は1となります(つまり、シェルが考える真と偽の考え方)。</target>
        </trans-unit>
        <trans-unit id="38b9a576bee545c23ad008343813d9e755e740e0" translate="yes" xml:space="preserve">
          <source>with 0 if it does, 1 if it does not.</source>
          <target state="translated">の場合は0、そうでない場合は1となります。</target>
        </trans-unit>
        <trans-unit id="fd393d67aeb1a238c4b9b75ace210101e95a963c" translate="yes" xml:space="preserve">
          <source>with &lt;code&gt;$1&lt;/code&gt; being the line number for the next line, and &lt;code&gt;$3&lt;/code&gt; being the optional filename (specified with or without quotes). Note that no whitespace may precede the &lt;code&gt;#&lt;/code&gt; , unlike modern C preprocessors.</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; 行次のラインの数、およびある &lt;code&gt;$3&lt;/code&gt; 任意のファイル名である（または引用符なしで指定）。最近のCプリプロセッサとは異なり、 &lt;code&gt;#&lt;/code&gt; の前に空白を置くことはできません。</target>
        </trans-unit>
        <trans-unit id="f8fa5def8eb682ded9afb0b424abc5c6923d3571" translate="yes" xml:space="preserve">
          <source>with &lt;code&gt;$1&lt;/code&gt; being the line number for the next line, and &lt;code&gt;$3&lt;/code&gt; being the optional filename (specified with or without quotes). Note that no whitespace may precede the &lt;code&gt;#&lt;/code&gt;, unlike modern C preprocessors.</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; 行次のラインの数、およびある &lt;code&gt;$3&lt;/code&gt; 任意のファイル名である（または引用符なしで指定）。最新のCプリプロセッサとは異なり、 &lt;code&gt;#&lt;/code&gt; の前に空白を入れてはならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd277e84169e71230b173e5e86d5c72e9dd4d149" translate="yes" xml:space="preserve">
          <source>with C</source>
          <target state="translated">ウィズシー</target>
        </trans-unit>
        <trans-unit id="5f35039fcfb7ca39f0e93041f2c52c34be88131b" translate="yes" xml:space="preserve">
          <source>with DOS hooks is available in</source>
          <target state="translated">でDOSフックを使ったものが利用できます。</target>
        </trans-unit>
        <trans-unit id="f257153d465d0a7a17934523c7043d1cba8cb62c" translate="yes" xml:space="preserve">
          <source>with DTrace support enabled.</source>
          <target state="translated">DTrace サポートを有効にした状態で</target>
        </trans-unit>
        <trans-unit id="79e46a1b41acc15ccc42adaa2b069f673632f7cc" translate="yes" xml:space="preserve">
          <source>with Pre-5.0 MakeMakers. Since version 5.00 of MakeMaker such a line can be deleted safely. MakeMaker recognizes when there's nothing to be linked.</source>
          <target state="translated">5.0以前のMakeMakersを使用していました。MakeMaker のバージョン 5.00 以降では、このような行を安全に削除できるようになりました。MakeMaker は、何もリンクされていない場合に認識するようになりました。</target>
        </trans-unit>
        <trans-unit id="902f1c78737d167fe1b8e5be3f95f9481cbb5856" translate="yes" xml:space="preserve">
          <source>with a field hash, the entry will be collected, even if it was later overwritten with a plain scalar key (every positive integer is a candidate). This is true even if the original entry was deleted in the meantime. In fact, deletion from a field hash, and also a test for existence constitute</source>
          <target state="translated">をフィールドハッシュで指定すると、後にプレーンなスカラキーで上書きされた場合でも、そのエントリが収集されます (すべての正の整数が候補となります)。これは元のエントリがその間に削除されていたとしても当てはまります。実際には、フィールドハッシュからの削除と存在のテストは</target>
        </trans-unit>
        <trans-unit id="6b1ee94282ce6cd2f8ed1cd3d21d10ed8a2ffaba" translate="yes" xml:space="preserve">
          <source>with a shell</source>
          <target state="translated">殻付き</target>
        </trans-unit>
        <trans-unit id="6712fdd90b5e830ff760a98c106a30072131fe7e" translate="yes" xml:space="preserve">
          <source>with a special meaning described here or above. You can cause characters that normally function as metacharacters to be interpreted literally by prefixing them with a &quot;\&quot; (e.g., &quot;\.&quot; matches a &quot;.&quot;, not any character; &quot;\\&quot; matches a &quot;\&quot;). This escape mechanism is also required for the character used as the pattern delimiter.</source>
          <target state="translated">には、ここか上で説明した特別な意味があります。通常はメタキャラクタとして機能する文字を、&quot;\&quot;で接頭辞を付けることで、文字通りに解釈されるようにすることができます(例えば、&quot;\.&quot;は&quot;.&quot;にマッチしますが、どの文字にもマッチしません;&quot;\.&quot;は&quot;.&quot;にマッチします)。このエスケープ機構は、パターン区切り文字として使用される文字にも必要である。</target>
        </trans-unit>
        <trans-unit id="648b5830bea33d68a188f24f5727ae67af2e9070" translate="yes" xml:space="preserve">
          <source>with a special meaning described in this document. A sequence of non-metacharacters matches the same sequence in the target string, as we saw above with &lt;code&gt;m/abc/&lt;/code&gt;.</source>
          <target state="translated">このドキュメントで説明されている特別な意味を持つ。上記の &lt;code&gt;m/abc/&lt;/code&gt; 見たように、非メタ文字のシーケンスは、ターゲット文字列の同じシーケンスと一致します。</target>
        </trans-unit>
        <trans-unit id="b805bc366a9ebde9467176c73458adee5451ed76" translate="yes" xml:space="preserve">
          <source>with actual &lt;code&gt;&lt;a href=&quot;../functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; support. Trailing newline is removed. Returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;EOF&lt;/code&gt; .</source>
          <target state="translated">実際の &lt;code&gt;&lt;a href=&quot;../functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; をサポートしています。末尾の改行は削除されます。 &lt;code&gt;EOF&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="87718d9e2fbb4ce4c357190996dbb0902a341d52" translate="yes" xml:space="preserve">
          <source>with actual &lt;code&gt;readline&lt;/code&gt; support. Trailing newline is removed. Returns &lt;code&gt;undef&lt;/code&gt; on &lt;code&gt;EOF&lt;/code&gt;.</source>
          <target state="translated">実際の &lt;code&gt;readline&lt;/code&gt; サポート付き。末尾の改行が削除されます。 &lt;code&gt;EOF&lt;/code&gt; で &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="90fb5185e4bcea673e4052e2147a5dec2bf61fa2" translate="yes" xml:space="preserve">
          <source>with all the statically loaded extensions built in. Compare the generated</source>
          <target state="translated">に静的にロードされたすべての拡張機能を組み込んでいます。生成された</target>
        </trans-unit>
        <trans-unit id="5634ec8df617c002f5cf19e1a0d68429da0d491c" translate="yes" xml:space="preserve">
          <source>with any non-default flags appearing between the caret and the colon. A test that looks at such stringification thus doesn't need to have the system default flags hard-coded in it, just the caret. If new flags are added to Perl, the meaning of the caret's expansion will change to include the default for those flags, so the test will still work, unchanged.</source>
          <target state="translated">は、デフォルトではないフラグがキャレットとコロンの間に現れます。このような文字列化を見るテストでは、システムのデフォルトフラグをハードコーディングする必要はありません。Perl に新しいフラグが追加された場合、キャレットの展開の意味はそれらのフラグのデフォルトを含むように変更されますので、テストは変更されずに動作します。</target>
        </trans-unit>
        <trans-unit id="bb83d536946bb8d10aca0b9c5349a4fa97876fb1" translate="yes" xml:space="preserve">
          <source>with arguments &lt;code&gt;arg1 arg2 arg3&lt;/code&gt; the same way as on any other platform, by</source>
          <target state="translated">引数 &lt;code&gt;arg1 arg2 arg3&lt;/code&gt; を他のプラットフォームと同じようにして、</target>
        </trans-unit>
        <trans-unit id="e596474483116f71691799bfb6c85c3d8699a856" translate="yes" xml:space="preserve">
          <source>with bugs in memory allocations which are caught by Perl's malloc();</source>
          <target state="translated">は、Perl の malloc()で捕捉されるメモリ確保のバグに対応しています。</target>
        </trans-unit>
        <trans-unit id="43e71f90be5e8d458fd62d980464b4dcacad2891" translate="yes" xml:space="preserve">
          <source>with command line &quot;-size 10 -sizes 24 -sizes 48&quot; will perform the equivalent of the assignments</source>
          <target state="translated">コマンドラインで&quot;-size 10 -sizes 24 -sizes 48 &quot;を指定すると、以下のような代入と同等の処理が行われます。</target>
        </trans-unit>
        <trans-unit id="2b0da640b744d7424012158531c7791e1bd68cb5" translate="yes" xml:space="preserve">
          <source>with contents being (compare with &lt;a href=&quot;#Making-executables-with-a-custom-collection-of-statically-loaded-extensions&quot;&gt;&quot;Making executables with a custom collection of statically loaded extensions&quot;&lt;/a&gt;)</source>
          <target state="translated">内容は（&lt;a href=&quot;#Making-executables-with-a-custom-collection-of-statically-loaded-extensions&quot;&gt;「静的にロードされた拡張機能のカスタムコレクションを使用して実行可能ファイルを作成&lt;/a&gt;する」と比較してください）</target>
        </trans-unit>
        <trans-unit id="a6bb8f0d0bfad7a5f424f1936641a121be95eced" translate="yes" xml:space="preserve">
          <source>with contents being (compare with &lt;a href=&quot;#Making-executables-with-a-custom-collection-of-statically-loaded-extensions&quot;&gt;Making executables with a custom collection of statically loaded extensions&lt;/a&gt;)</source>
          <target state="translated">コンテンツあり（&lt;a href=&quot;#Making-executables-with-a-custom-collection-of-statically-loaded-extensions&quot;&gt;静的にロードされた拡張機能のカスタムコレクションを使用した実行可能ファイルの作成&lt;/a&gt;と比較）</target>
        </trans-unit>
        <trans-unit id="df572e1bbeb0b7187cd03ae0e3427ee531dc9c89" translate="yes" xml:space="preserve">
          <source>with djtarx. If you want to use long file names under w95 and also to get Perl to pass all its tests, don't forget to use</source>
          <target state="translated">を使うことを忘れないでください。w95 で長いファイル名を使いたい、Perl がすべてのテストに合格するようにしたい場合は</target>
        </trans-unit>
        <trans-unit id="0a6e45130091d1990376001a155acd12e04c02af" translate="yes" xml:space="preserve">
          <source>with invaluable help from Chris Nandor, and valuable help from Brandon Allbery, Charles Bailey, Graham Barr, Dominic Dunlop, Jarkko Hietaniemi, Ben Holzman, Tom Horsley, Nick Ing-Simmons, Tuomas J. Lukka, Laszlo Molnar, Alan Olsen, Peter Prymmer, Gurusamy Sarathy, Christoph Spalinger, Dan Sugalski, Larry Virden, and Ilya Zakharevich.</source>
          <target state="translated">クリス・ナンドールの貴重な助けを受け、ブランドン・オールベリー、チャールズ・ベイリー、グラハム・バー、ドミニク・ダンロップ、ヤッコ・ヒエタニエミ、ベン・ホルツマン、トム・ホースリー、ニック・イング・シモンズ、トゥーマス・J・ルカ、ラズロ・モルナル、アラン・オルセン、ピーター・プライマー、グルサミ・サラシー、クリストフ・スパリンガー、ダン・スガルスキー、ラリー・バードン、イリヤ・ザハレヴィッチの貴重な助けを受けました。</target>
        </trans-unit>
        <trans-unit id="65cc0156037f347b1259f3f102b72fce7d5f35cb" translate="yes" xml:space="preserve">
          <source>with libperl, any static extensions (usually just DynaLoader), and any other libraries needed on this system. libperl is usually</source>
          <target state="translated">libperl、静的拡張機能(通常はDynaLoaderのみ)、そしてこのシステムで必要とされる他のライブラリと一緒に。</target>
        </trans-unit>
        <trans-unit id="bf9772e7a963a2d3d329698d4cb2a55502f8d67b" translate="yes" xml:space="preserve">
          <source>with more error checking.</source>
          <target state="translated">エラーチェックを強化して</target>
        </trans-unit>
        <trans-unit id="83256d944b6616f13d11d6f626aca53da1031053" translate="yes" xml:space="preserve">
          <source>with nonempty prefix1 and prefix2. If &lt;code&gt;prefix1&lt;/code&gt; is indeed a prefix of a builtin library search path, prefix2 is substituted. The error may appear if components are not found, or are too long. See &quot;PERLLIB_PREFIX&quot; in &lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt;.</source>
          <target state="translated">空でないprefix1とprefix2を使用します。 &lt;code&gt;prefix1&lt;/code&gt; が実際に組み込みライブラリ検索パスのプレフィックスである場合、prefix2が置き換えられます。コンポーネントが見つからないか、長すぎる場合、エラーが表示されることがあります。で&quot;PERLLIB_PREFIX&quot;を参照してください&lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb3f3ef30b8362c52d5cc55a8fa4f09f4693fecb" translate="yes" xml:space="preserve">
          <source>with one range: an anonymous array with a single element that consists of another anonymous array whose first element is the first code point in the block, and whose second element is the final code point in the block. On an EBCDIC platform, the first two Unicode blocks are not contiguous. Their range sets are lists containing</source>
          <target state="translated">1 つの範囲を持つ:1 つの要素を持つ匿名配列で、1 番目の要素がブロック内の最初のコードポイントで、2 番目の要素がブロック内の最後のコードポイントである別の匿名配列から構成されます。EBCDIC プ ラ ッ ト フ ォームでは、 最初の 2 つの Unicode ブ ロ ッ ク は連続ではあ り ません。それらの範囲集合は、以下を含むリストです。</target>
        </trans-unit>
        <trans-unit id="ad93216dd3f12b7821d87a82a121ecedc2fe0262" translate="yes" xml:space="preserve">
          <source>with other auxiliary files, but, and this is important to note, there should be &lt;b&gt;no&lt;/b&gt;</source>
          <target state="translated">他の補助ファイルと一緒に、しかし、これは注意することが重要であり&lt;b&gt;、&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="fb0e475b39d05deac173d43929afb30eefa9a066" translate="yes" xml:space="preserve">
          <source>with some customization slots left out to be filled later.</source>
          <target state="translated">を使用して、いくつかのカスタマイズスロットを残して後から埋めることができます。</target>
        </trans-unit>
        <trans-unit id="940554b3b988d27613cbe2316b2a4ceca0459885" translate="yes" xml:space="preserve">
          <source>with some operators of the same precedence (but never with operators of different precedence). This chaining means that each comparison is performed on the two arguments surrounding it, with each interior argument taking part in two comparisons, and the comparison results are implicitly ANDed. Thus &lt;code&gt;&quot;$x &amp;lt; $y &amp;lt;= $z&quot;&lt;/code&gt; behaves exactly like &lt;code&gt;&quot;$x &amp;lt; $y &amp;amp;&amp;amp; $y &amp;lt;= $z&quot;&lt;/code&gt;, assuming that &lt;code&gt;&quot;$y&quot;&lt;/code&gt; is as simple a scalar as it looks. The ANDing short-circuits just like &lt;code&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/code&gt; does, stopping the sequence of comparisons as soon as one yields false.</source>
          <target state="translated">同じ優先順位の演算子を使用します（ただし、優先順位の異なる演算子を使用することはありません）。この連鎖は、各比較がそれを囲む2つの引数に対して実行され、各内部引数が2つの比較に参加し、比較結果が暗黙的にAND演算されることを意味します。したがって、 &lt;code&gt;&quot;$x &amp;lt; $y &amp;lt;= $z&quot;&lt;/code&gt; は、 &lt;code&gt;&quot;$y&quot;&lt;/code&gt; が見た目と同じくらい単純なスカラーであると仮定すると、 &lt;code&gt;&quot;$x &amp;lt; $y &amp;amp;&amp;amp; $y &amp;lt;= $z&quot;&lt;/code&gt; とまったく同じように動作します。ANDingは、 &lt;code&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/code&gt; 同じように短絡し、falseが生成されるとすぐに比較のシーケンスを停止します。</target>
        </trans-unit>
        <trans-unit id="578150dd4f4464b258a72af475d097b197c86ecf" translate="yes" xml:space="preserve">
          <source>with such a routine added (and slightly modified str()):</source>
          <target state="translated">このようなルーチンが追加されました (そして少し修正された str()。</target>
        </trans-unit>
        <trans-unit id="0c303466efe4cbf12a616af1540bc1eb7aaeaf47" translate="yes" xml:space="preserve">
          <source>with the</source>
          <target state="translated">と一緒に</target>
        </trans-unit>
        <trans-unit id="8446facb29ca1c5a703cd18c8d078705f565200d" translate="yes" xml:space="preserve">
          <source>with the &lt;a href=&quot;http://www.w3.org/Protocols/&quot;&gt;HTTP/1.1 specifications&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/Protocols/&quot;&gt;HTTP / 1.1の仕様&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="7d1c3bf8c1f9945ec4599b301b51d74a3a85654a" translate="yes" xml:space="preserve">
          <source>with the array elements, returning the number of matches found.</source>
          <target state="translated">を配列の要素と組み合わせて使用し、マッチした数を返します。</target>
        </trans-unit>
        <trans-unit id="06a358e9a286ee4b634c109bfb039300741fcb98" translate="yes" xml:space="preserve">
          <source>with the first line being</source>
          <target state="translated">一行目が</target>
        </trans-unit>
        <trans-unit id="7e76e6fbc9f630e0e730117c74bb92fed88b9553" translate="yes" xml:space="preserve">
          <source>with the git-config(1) command:</source>
          <target state="translated">を git-config(1)コマンドで実行します。</target>
        </trans-unit>
        <trans-unit id="39ef66642cc8f022fcb29b6192f16996d968e41f" translate="yes" xml:space="preserve">
          <source>with the given set of sections. See &lt;b&gt;add_selection()&lt;/b&gt; for adding to the current set of selected sections.</source>
          <target state="translated">与えられたセクションのセットで。選択したセクションの現在のセットへの追加については、&lt;b&gt;add_selection（）&lt;/b&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="681d9ba240a75cd0133e9a797e48af7f60cc1289" translate="yes" xml:space="preserve">
          <source>with the key specified by</source>
          <target state="translated">で指定されたキーで</target>
        </trans-unit>
        <trans-unit id="fc8ddfc8af720ff32b46e111b20ee99ab44a3ee8" translate="yes" xml:space="preserve">
          <source>with the options '--url &lt;a href=&quot;http://example.com&quot;&gt;http://example.com&lt;/a&gt;'. When running multiple tests they will each receive the same arguments.</source>
          <target state="translated">オプション '--url &lt;a href=&quot;http://example.com&quot;&gt;http://example.com&lt;/a&gt; 'を使用します。複数のテストを実行すると、それぞれが同じ引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="35fddeac911bfe25db2b606c8823e41a625194da" translate="yes" xml:space="preserve">
          <source>with the options '--url http://example.com'. When running multiple tests they will each receive the same arguments.</source>
          <target state="translated">オプション '--url http://example.com' を指定してください。複数のテストを実行する場合、それぞれが同じ引数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="40a6b623fe3809c461153ff940c432cdd15aefb4" translate="yes" xml:space="preserve">
          <source>with the quotient rounded towards zero. Division by zero generates an exception.</source>
          <target state="translated">の商をゼロに丸めたものを使用します。ゼロによる除算は例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="9af249b71f06549e6ec04dac84cfb0149e01d8b1" translate="yes" xml:space="preserve">
          <source>with the same effect.</source>
          <target state="translated">同じ効果を持つ。</target>
        </trans-unit>
        <trans-unit id="22d6b042eb59b4513f175226eb07a3dda4da0955" translate="yes" xml:space="preserve">
          <source>with the same result as</source>
          <target state="translated">と同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="d916cf8b9311e482b651049d8b87bf349a501880" translate="yes" xml:space="preserve">
          <source>with the sequence &lt;code&gt;1100&lt;/code&gt; repeating again and again. In addition to this limitation, the exponent of the binary number is also restricted when it is represented as a floating point number. On typical hardware, floating point values can store numbers with up to 53 binary digits, and with binary exponents between -1024 and 1024. In decimal representation this is close to 16 decimal digits and decimal exponents in the range of -304..304. The upshot of all this is that Perl cannot store a number like 12345678901234567 as a floating point number on such architectures without loss of information.</source>
          <target state="translated">シーケンス &lt;code&gt;1100&lt;/code&gt; が何度も繰り返されます。この制限に加えて、2進数の指数は、浮動小数点数として表される場合にも制限されます。一般的なハードウェアでは、浮動小数点値は、最大53桁の2進数、および-1024から1024までの2進数の指数を持つ数値を格納できます。10進表現では、これは16桁の10進数と-304..304の範囲の10進数の指数に近くなります。これらすべての結果、Perlは、12345678901234567のような数値を、情報を失うことなく、そのようなアーキテクチャで浮動小数点数として格納することができません。</target>
        </trans-unit>
        <trans-unit id="6ba1d9aa0bd57431c1856954244f3cbc94acd62d" translate="yes" xml:space="preserve">
          <source>with these bytes using this option.</source>
          <target state="translated">このオプションを使用すると、これらのバイトで</target>
        </trans-unit>
        <trans-unit id="9f47eb77d09add43952b7bda3f6a0a9cdacda272" translate="yes" xml:space="preserve">
          <source>with this one, once the &lt;code&gt;o&lt;/code&gt; ption &lt;code&gt;frame=2&lt;/code&gt; has been set:</source>
          <target state="translated">これで、一度 &lt;code&gt;o&lt;/code&gt; ptionの &lt;code&gt;frame=2&lt;/code&gt; 設定されています。</target>
        </trans-unit>
        <trans-unit id="3f0c8a9118e024153af9f9cf26648b2028055927" translate="yes" xml:space="preserve">
          <source>with this one, once the &lt;code&gt;o&lt;/code&gt;ption &lt;code&gt;frame=2&lt;/code&gt; has been set:</source>
          <target state="translated">これで、一度 &lt;code&gt;o&lt;/code&gt; ptionの &lt;code&gt;frame=2&lt;/code&gt; 設定されています。</target>
        </trans-unit>
        <trans-unit id="7257f7301b07b73a4eb99b7aabd18c6348a8a661" translate="yes" xml:space="preserve">
          <source>with_merged_prereqs</source>
          <target state="translated">with_merged_prereqs</target>
        </trans-unit>
        <trans-unit id="f42ef62128025c7fd38f4952b8a2dc53beb818e7" translate="yes" xml:space="preserve">
          <source>within</source>
          <target state="translated">within</target>
        </trans-unit>
        <trans-unit id="92f70e05ed425bf86c4992009349d575e4339965" translate="yes" xml:space="preserve">
          <source>within the affected package, but across scopes.</source>
          <target state="translated">影響を受けるパッケージ内ではなく、スコープをまたいでの使用になります。</target>
        </trans-unit>
        <trans-unit id="de8017cefaab0d61aa697455fcae07e9312b74bc" translate="yes" xml:space="preserve">
          <source>within the referenced group is used as an independent subpattern in place of the group reference itself. Because the group reference may be contained</source>
          <target state="translated">は、グループ参照自体の代わりに、参照されたグループ内の独立したサブパターンとして使用されます。なぜなら、グループ参照は</target>
        </trans-unit>
        <trans-unit id="0d4e654c613ea68bffeeab1587b7dbac44826c2b" translate="yes" xml:space="preserve">
          <source>without</source>
          <target state="translated">without</target>
        </trans-unit>
        <trans-unit id="10f2461de60c6d5b4ff8c4b7507377311e349c19" translate="yes" xml:space="preserve">
          <source>without LIB, setting PREFIX replaces the initial &lt;code&gt;$Config{prefix}&lt;/code&gt; part of those INSTALL* arguments, even if the latter are explicitly set (but are set to still start with &lt;code&gt;$Config{prefix}&lt;/code&gt; ).</source>
          <target state="translated">LIBがない場合、PREFIXを設定すると、INSTALL *引数の最初の &lt;code&gt;$Config{prefix}&lt;/code&gt; 部分が置き換えられます（後者が明示的に設定されている場合でも、 &lt;code&gt;$Config{prefix}&lt;/code&gt; 始まるように設定されています）。</target>
        </trans-unit>
        <trans-unit id="1c358b05d11ed6e712b484978a4f88ef403da979" translate="yes" xml:space="preserve">
          <source>without LIB, setting PREFIX replaces the initial &lt;code&gt;$Config{prefix}&lt;/code&gt; part of those INSTALL* arguments, even if the latter are explicitly set (but are set to still start with &lt;code&gt;$Config{prefix}&lt;/code&gt;).</source>
          <target state="translated">LIBがない場合、PREFIXを設定すると、それらのINSTALL *引数の最初の &lt;code&gt;$Config{prefix}&lt;/code&gt; 部分が、後者が明示的に設定されている場合でも置き換えられます（ただし、 &lt;code&gt;$Config{prefix}&lt;/code&gt; 始まるように設定されています）。</target>
        </trans-unit>
        <trans-unit id="8a80d0259d1e71d6750796bdfe9afa977177dab1" translate="yes" xml:space="preserve">
          <source>without a good reason.</source>
          <target state="translated">正当な理由もなく</target>
        </trans-unit>
        <trans-unit id="a22660c1994ae94fb49c2abe6673d6d13c9cd5c0" translate="yes" xml:space="preserve">
          <source>without closing =back</source>
          <target state="translated">閉じずに=バック</target>
        </trans-unit>
        <trans-unit id="5f7e532ffa97933cb9b084919b0076f3129f07b3" translate="yes" xml:space="preserve">
          <source>without matching =begin.</source>
          <target state="translated">マッチしていない=始まる。</target>
        </trans-unit>
        <trans-unit id="1cf51577ca0bf6210881af24e2f4752cb965f045" translate="yes" xml:space="preserve">
          <source>without matching =end</source>
          <target state="translated">マッチングなし =終了</target>
        </trans-unit>
        <trans-unit id="aaaba63dcec92e8d6b9ea2e569e3def0c6c607b9" translate="yes" xml:space="preserve">
          <source>without preceding higher level</source>
          <target state="translated">先行して</target>
        </trans-unit>
        <trans-unit id="c2ca9034d0099c94e02d85eb5ba30cf9f74f58f0" translate="yes" xml:space="preserve">
          <source>without the newlines.</source>
          <target state="translated">を改行なしで表示します。</target>
        </trans-unit>
        <trans-unit id="f5efa06ea732376eb2cdcc3546df55e308841703" translate="yes" xml:space="preserve">
          <source>without using any registered message handlers</source>
          <target state="translated">登録されたメッセージハンドラを使用せずに</target>
        </trans-unit>
        <trans-unit id="4732a6d7f96eade3f478fdd4097e2f5ce9f0b28d" translate="yes" xml:space="preserve">
          <source>won't be run at all</source>
          <target state="translated">走らない</target>
        </trans-unit>
        <trans-unit id="18c4254d09ff75421e3936447920117069935d2e" translate="yes" xml:space="preserve">
          <source>won't recursively apply those macros for you.</source>
          <target state="translated">が再帰的にマクロを適用することはありません。</target>
        </trans-unit>
        <trans-unit id="3cbcd90adc4b192a87a625850b7f231caddf0eb3" translate="yes" xml:space="preserve">
          <source>word</source>
          <target state="translated">word</target>
        </trans-unit>
        <trans-unit id="c614707e1344dd5a41b584a7fa3720507a41566c" translate="yes" xml:space="preserve">
          <source>word anchor</source>
          <target state="translated">ワードアンカー</target>
        </trans-unit>
        <trans-unit id="d44b255df34f22674d602b2084de78dd16835268" translate="yes" xml:space="preserve">
          <source>wordmatch-line.html</source>
          <target state="translated">wordmatch-line.html</target>
        </trans-unit>
        <trans-unit id="e274eeff768c6396088ec6eb091f4bf4d47ab1e0" translate="yes" xml:space="preserve">
          <source>work</source>
          <target state="translated">work</target>
        </trans-unit>
        <trans-unit id="6c6b6f215bf47eca2a6fa7e244846ed1b5e4779d" translate="yes" xml:space="preserve">
          <source>work in this construct, because modifiers don't take loop labels. Sorry. You can always put another block inside of it (for &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;) or around it (for &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;) to do that sort of thing. For &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, just double the braces:</source>
          <target state="translated">修飾子はループラベルをとらないため、この構成で機能します。ごめんなさい。そのようなことをするために、いつでもその中に（ &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; の場合）またはその周り（ &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; の場合）に別のブロックを置くことができます。以下のために &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 、ちょうど中括弧を二重：</target>
        </trans-unit>
        <trans-unit id="37af0060b7db3c648e9b9010ab701d44a4a46aa9" translate="yes" xml:space="preserve">
          <source>work in this construct, because modifiers don't take loop labels. Sorry. You can always put another block inside of it (for &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt;) or around it (for &lt;code&gt;last&lt;/code&gt;) to do that sort of thing.</source>
          <target state="translated">修飾子はループラベルを受け取らないため、この構成で機能します。ごめんなさい。そのようなことをするために、いつでもその中に（ &lt;code&gt;next&lt;/code&gt; / &lt;code&gt;redo&lt;/code&gt; ）またはその周りに（ &lt;code&gt;last&lt;/code&gt; ）別のブロックを置くことができます。</target>
        </trans-unit>
        <trans-unit id="62bee0aec6969f0ad0809c8d6cc21d4734187295" translate="yes" xml:space="preserve">
          <source>work properly on native code points and strings.</source>
          <target state="translated">ネイティブのコードポイントと文字列で正しく動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="e912ba21c9cf05d0fc8a8967f5359aab2729eca4" translate="yes" xml:space="preserve">
          <source>work under OS/390 and on the Macintosh; you probably don't want to use them in new code.</source>
          <target state="translated">OS/390やMacintoshでの作業は、新しいコードでは使用したくないでしょう。</target>
        </trans-unit>
        <trans-unit id="12b6bdd47224ffe593cf3bd066979ef986b0dfa4" translate="yes" xml:space="preserve">
          <source>work within a &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; { } while&lt;/code&gt; construct. See &lt;a href=&quot;perlsyn#Loop-Control&quot;&gt;Loop Control in perlsyn&lt;/a&gt;.</source>
          <target state="translated">構築 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; { } while&lt;/code&gt; &lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; {}内で動作します。&lt;a href=&quot;perlsyn#Loop-Control&quot;&gt;perlsynのループ制御を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9a4d53796beb92b7714c011244a290a1e1d07b98" translate="yes" xml:space="preserve">
          <source>work within a &lt;code&gt;do { } while&lt;/code&gt; construct. See &lt;a href=&quot;perlsyn#Loop-Control&quot;&gt;&quot;Loop Control&quot; in perlsyn&lt;/a&gt;.</source>
          <target state="translated">構築 &lt;code&gt;do { } while&lt;/code&gt; 内で動作します。&lt;a href=&quot;perlsyn#Loop-Control&quot;&gt;perlsynの「ループ制御」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="63b2e519f2bfeef08075c12043e9e0b8da4fe0fe" translate="yes" xml:space="preserve">
          <source>work. (This is equivalent to &lt;code&gt;$&lt;i&gt;human&lt;/i&gt;++&lt;/code&gt;, where</source>
          <target state="translated">作業。（これは &lt;code&gt;$&lt;i&gt;human&lt;/i&gt;++&lt;/code&gt; 相当します。</target>
        </trans-unit>
        <trans-unit id="10f5ebe6acb4467b71602be4c4fdb44c44fa26b6" translate="yes" xml:space="preserve">
          <source>worker</source>
          <target state="translated">worker</target>
        </trans-unit>
        <trans-unit id="fd6a181b713ad582a8de991094247d5c07bb3498" translate="yes" xml:space="preserve">
          <source>working directory</source>
          <target state="translated">作業ディレクトリ</target>
        </trans-unit>
        <trans-unit id="8f69649f0cb724dcfcaf5d34bac347a0650ed559" translate="yes" xml:space="preserve">
          <source>works because &lt;code&gt;$AoA[0]&lt;/code&gt; already held an array reference. If you try that on an undefined variable, you'll take an exception. That's because the implicit derefererence will never autovivify an undefined variable the way &lt;code&gt;@{ }&lt;/code&gt; always will:</source>
          <target state="translated">作品のために &lt;code&gt;$AoA[0]&lt;/code&gt; 、既に配列リファレンスを開催しました。未定義の変数でそれを試すと、例外が発生します。これは、暗黙的な逆参照が、 &lt;code&gt;@{ }&lt;/code&gt; 常に行う方法で未定義の変数を自動活性化しないためです。</target>
        </trans-unit>
        <trans-unit id="15124ebfba7fc813f38c973245978f037d3342fc" translate="yes" xml:space="preserve">
          <source>works bottom-up, so does the first pass of perl compilation.</source>
          <target state="translated">はボトムアップで動作するので、Perlのコンパイルの最初のパスもそうです。</target>
        </trans-unit>
        <trans-unit id="b2f86c6b40fe0bcf02c6b1cac00b3639a3aa830f" translate="yes" xml:space="preserve">
          <source>works just fine. For some storage methods, you need a little glue.</source>
          <target state="translated">がちょうどよく機能します。収納方法によっては、ちょっとした接着剤が必要になります。</target>
        </trans-unit>
        <trans-unit id="d192b622956789bdecb1e8dc26768ccb0a1de12d" translate="yes" xml:space="preserve">
          <source>works like a normal hash, except that it stringifies a</source>
          <target state="translated">は通常のハッシュと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="eef62adcae43a43a24a531e0fcd32b343c0335e6" translate="yes" xml:space="preserve">
          <source>works like the corresponding perl commands.</source>
          <target state="translated">は対応する perl コマンドと同じように動作します。</target>
        </trans-unit>
        <trans-unit id="278395d966ca8f15d90253e7a54af657001b22d5" translate="yes" xml:space="preserve">
          <source>works out the package name and subroutine name from &lt;code&gt;cv&lt;/code&gt; , and then calls &lt;code&gt;croak()&lt;/code&gt; . Hence if &lt;code&gt;cv&lt;/code&gt; is &lt;code&gt;&amp;amp;ouch::awk&lt;/code&gt; , it would call &lt;code&gt;croak&lt;/code&gt; as:</source>
          <target state="translated">&lt;code&gt;cv&lt;/code&gt; からパッケージ名とサブルーチン名を計算してから、 &lt;code&gt;croak()&lt;/code&gt; を呼び出します。したがって、 &lt;code&gt;cv&lt;/code&gt; が &lt;code&gt;&amp;amp;ouch::awk&lt;/code&gt; 場合、次のように &lt;code&gt;croak&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="404a96bf165d8b68f036b05354005a7ba07dc944" translate="yes" xml:space="preserve">
          <source>works out the package name and subroutine name from &lt;code&gt;cv&lt;/code&gt;, and then calls &lt;code&gt;croak()&lt;/code&gt;. Hence if &lt;code&gt;cv&lt;/code&gt; is &lt;code&gt;&amp;amp;ouch::awk&lt;/code&gt;, it would call &lt;code&gt;croak&lt;/code&gt; as:</source>
          <target state="translated">&lt;code&gt;cv&lt;/code&gt; からパッケージ名とサブルーチン名を計算し、 &lt;code&gt;croak()&lt;/code&gt; を呼び出します。したがって、 &lt;code&gt;cv&lt;/code&gt; が &lt;code&gt;&amp;amp;ouch::awk&lt;/code&gt; 場合、 &lt;code&gt;croak&lt;/code&gt; は次のように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1be2ea6ffc2cb2577aa0bf9cd8be7e1db279cdb7" translate="yes" xml:space="preserve">
          <source>works when a preceding call to &lt;code&gt;incr_parse&lt;/code&gt; in</source>
          <target state="translated">の &lt;code&gt;incr_parse&lt;/code&gt; への先行呼び出しが</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
