<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="9d8d0feb3edb0eff1e9ffe23486e4f54336c8d4e" translate="yes" xml:space="preserve">
          <source>Top-of-form processing is by default handled by a format with the same name as the current filehandle with &quot;_TOP&quot; concatenated to it. It's triggered at the top of each page. See &lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;.</source>
          <target state="translated">Top-of-form処理は、デフォルトで、現在のファイルハンドルと同じ名前の &quot;_TOP&quot;が連結された形式で処理されます。各ページの上部でトリガーされます。&lt;a href=&quot;functions/write&quot;&gt;書き込みを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="58ef03b2e7b2cce794df0ce3f4e46ce888251a1d" translate="yes" xml:space="preserve">
          <source>Top-of-form processing is by default handled by a format with the same name as the current filehandle with &quot;_TOP&quot; concatenated to it. It's triggered at the top of each page. See &lt;a href=&quot;perlfunc#write&quot;&gt;&quot;write&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">トップオブフォーム処理は、デフォルトで、「_ TOP」が連結された現在のファイルハンドルと同じ名前のフォーマットで処理されます。各ページの上部でトリガーされます。&lt;a href=&quot;perlfunc#write&quot;&gt;perlfuncの「書き込み」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cb98d71b2e229a477af401f7c4895167097dcb8a" translate="yes" xml:space="preserve">
          <source>TopSystemUID</source>
          <target state="translated">TopSystemUID</target>
        </trans-unit>
        <trans-unit id="f766dbf6de80a1783868b76b0ffdd16e6a94e83e" translate="yes" xml:space="preserve">
          <source>Topic branches and rewriting history</source>
          <target state="translated">話題の分岐と歴史の書き換え</target>
        </trans-unit>
        <trans-unit id="8e2f2b4afe1a913994b69be99455c56a7fc054ab" translate="yes" xml:space="preserve">
          <source>Torsten Schoenfeld</source>
          <target state="translated">トーステン・シェーンフェルド</target>
        </trans-unit>
        <trans-unit id="855b740deb0e234d1668b8ec10c825eb8a3450f0" translate="yes" xml:space="preserve">
          <source>Total CPU (User + System) of any children processes.</source>
          <target state="translated">任意の子プロセスの総CPU(ユーザー+システム)。</target>
        </trans-unit>
        <trans-unit id="3481164ed61c4f3a7713de67224c54bcab0e71f6" translate="yes" xml:space="preserve">
          <source>Total CPU (User + System) of the main (parent) process.</source>
          <target state="translated">メイン(親)プロセスの総CPU(ユーザー+システム)。</target>
        </trans-unit>
        <trans-unit id="1e2c196e8d42960075bf83565f85bd785a488f4c" translate="yes" xml:space="preserve">
          <source>Total CPU of parent and any children processes.</source>
          <target state="translated">親プロセスと任意の子プロセスの合計CPU。</target>
        </trans-unit>
        <trans-unit id="32bbce2a356130ac460d0855ed4bb96cc9c277fe" translate="yes" xml:space="preserve">
          <source>Trace function calls</source>
          <target state="translated">トレース関数の呼び出し</target>
        </trans-unit>
        <trans-unit id="4b32a7b148f732eb014244c4bbbcbbea6216c149" translate="yes" xml:space="preserve">
          <source>Trace mode (similar to &lt;code&gt;t&lt;/code&gt; command, but can be put into &lt;code&gt;PERLDB_OPTS&lt;/code&gt; ).</source>
          <target state="translated">トレースモード（ &lt;code&gt;t&lt;/code&gt; コマンドに似ていますが、 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; に入れることができます）。</target>
        </trans-unit>
        <trans-unit id="75ddac2cad68f5ef90bf266909b1cc9bff0811e0" translate="yes" xml:space="preserve">
          <source>Trace mode (similar to &lt;code&gt;t&lt;/code&gt; command, but can be put into &lt;code&gt;PERLDB_OPTS&lt;/code&gt;).</source>
          <target state="translated">トレースモード（ &lt;code&gt;t&lt;/code&gt; コマンドに似ていますが、 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; に入れることができます）。</target>
        </trans-unit>
        <trans-unit id="4d8c4db1a294c0162454110ac7c8472297017033" translate="yes" xml:space="preserve">
          <source>Trace through execution of &lt;code&gt;expr&lt;/code&gt; . Optional first argument is the maximum number of levels to trace below the current one; anything deeper than that will be silent. See &lt;a href=&quot;perldebguts#Frame-Listing-Output-Examples&quot;&gt;Frame Listing Output Examples in perldebguts&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;expr&lt;/code&gt; の実行をトレースします。オプションの最初の引数は、現在のレベルの下でトレースするレベルの最大数です。それより深いものは沈黙します。&lt;a href=&quot;perldebguts#Frame-Listing-Output-Examples&quot;&gt;例については、perldebgutsのフレームリスト出力の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="41581b1e8642b813163a8ffec956716ae9f8f88d" translate="yes" xml:space="preserve">
          <source>Trace through execution of &lt;code&gt;expr&lt;/code&gt;. Optional first argument is the maximum number of levels to trace below the current one; anything deeper than that will be silent. See &lt;a href=&quot;perldebguts#Frame-Listing-Output-Examples&quot;&gt;&quot;Frame Listing Output Examples&quot; in perldebguts&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;expr&lt;/code&gt; の実行をトレースします。オプションの最初の引数は、現在のレベルより下でトレースするレベルの最大数です。それより深いものは何でも沈黙します。&lt;a href=&quot;perldebguts#Frame-Listing-Output-Examples&quot;&gt;例&lt;/a&gt;については、perldebgutsの「フレームリストの出力例」を参照してください。</target>
        </trans-unit>
        <trans-unit id="21b60e7167b2cc35295d61cd8ed5b383229ffbac" translate="yes" xml:space="preserve">
          <source>Trace variable used when Perl is run in debugging mode, with the &lt;b&gt;-d&lt;/b&gt; switch. This is the C variable which corresponds to Perl's $DB::trace variable. See &lt;code&gt;&lt;a href=&quot;#PL_DBsingle&quot;&gt;&quot;PL_DBsingle&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;-d&lt;/b&gt;スイッチを使用してPerlをデバッグモードで実行するときに使用されるトレース変数。これは、Perlの$ DB :: trace変数に対応するC変数です。 &lt;code&gt;&lt;a href=&quot;#PL_DBsingle&quot;&gt;&quot;PL_DBsingle&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="24be5dbb481a63442832782f4da3ef4f0dc024ff" translate="yes" xml:space="preserve">
          <source>Trace variable used when Perl is run in debugging mode, with the &lt;b&gt;-d&lt;/b&gt; switch. This is the C variable which corresponds to Perl's $DB::trace variable. See &lt;code&gt;PL_DBsingle&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;-d&lt;/b&gt;スイッチを使用して、Perlをデバッグモードで実行するときに使用されるトレース変数。これは、Perlの$ DB :: trace変数に対応するC変数です。 &lt;code&gt;PL_DBsingle&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="411aea8f76aef96f5e36c8b291c19e9ceb9466d1" translate="yes" xml:space="preserve">
          <source>Traces changes to Perl's interpreter state. You can internalize this as tracing changes to Perl's &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; variable, especially since the values for &lt;code&gt;NEWPHASE&lt;/code&gt; and &lt;code&gt;OLDPHASE&lt;/code&gt; are the strings that &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; reports.</source>
          <target state="translated">Perlのインタープリター状態の変更をトレースします。これは、特に &lt;code&gt;NEWPHASE&lt;/code&gt; および &lt;code&gt;OLDPHASE&lt;/code&gt; の値が &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; 報告する文字列であるため、Perlの &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; 変数へのトレース変更として内部化できます。</target>
        </trans-unit>
        <trans-unit id="0786ec1507cde8f738cd5528e03a2b67d40c8c91" translate="yes" xml:space="preserve">
          <source>Traces the entry of any subroutine. Note that all of the variables refer to the subroutine that is being invoked; there is currently no way to get ahold of any information about the subroutine's</source>
          <target state="translated">任意のサブルーチンのエントリをトレースします。すべての変数は呼び出されたサブルーチンを参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f47af59eb569759ff1e8a42a52da14fba8b1705" translate="yes" xml:space="preserve">
          <source>Traces the execution of each opcode in the Perl runloop. This probe is fired before the opcode is executed. When the Perl debugger is enabled, the DTrace probe is fired</source>
          <target state="translated">Perl のランループ内の各オペコードの実行をトレースします。このプローブは、オペコードが実行される前に実行されます。Perl デバッガが有効な場合、DTrace プローブが実行されます。</target>
        </trans-unit>
        <trans-unit id="bbb01fbe6bfaaec090a44633982fb31ae18d0d39" translate="yes" xml:space="preserve">
          <source>Traces the exit of any subroutine. Note that all of the variables refer to the subroutine that is returning; there is currently no way to get ahold of any information about the subroutine's</source>
          <target state="translated">任意のサブルーチンの終了を追跡します。すべての変数はリターンするサブルーチンを参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="469260e080c9b35d7ee5b388f5235f91978c75b9" translate="yes" xml:space="preserve">
          <source>Traditional form:</source>
          <target state="translated">伝統的な形。</target>
        </trans-unit>
        <trans-unit id="0ad67b0aa9abbb10a0d4b2ca67f1c4ff5d61a0ed" translate="yes" xml:space="preserve">
          <source>Traditionally END blocks have been executed at the end of the perl_run. This causes problems for applications that never call perl_run. Since perl 5.7.2 you can specify &lt;code&gt;PL_exit_flags |= PERL_EXIT_DESTRUCT_END&lt;/code&gt; to get the new behaviour. This also enables the running of END blocks if the perl_parse fails and &lt;code&gt;perl_destruct&lt;/code&gt; will return the exit value.</source>
          <target state="translated">従来、ENDブロックはperl_runの最後に実行されていました。これにより、perl_runを呼び出さないアプリケーションで問題が発生します。perl 5.7.2以降では、 &lt;code&gt;PL_exit_flags |= PERL_EXIT_DESTRUCT_END&lt;/code&gt; を指定して新しい動作を取得できます。これはまた、perl_parseが失敗し、 &lt;code&gt;perl_destruct&lt;/code&gt; が終了値を返す場合に、ENDブロックの実行を有効にします。</target>
        </trans-unit>
        <trans-unit id="0f62d4679a2de6656186513ec5b0145dfd0852c8" translate="yes" xml:space="preserve">
          <source>Traditionally in Perl, any use of any of the three variables &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt; (or their &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; English&lt;/code&gt; equivalents) anywhere in the code, caused all subsequent successful pattern matches to make a copy of the matched string, in case the code might subsequently access one of those variables. This imposed a considerable performance penalty across the whole program, so generally the use of these variables has been discouraged.</source>
          <target state="translated">従来、Perlでは、コード内の任意の3つの変数 &lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; または &lt;code&gt;$'&lt;/code&gt; （またはそれらに相当 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; English&lt;/code&gt; ）を使用すると、後続のすべてのパターン一致で一致した文字列のコピーが作成されました。コードはその後、これらの変数の1つにアクセスする可能性があります。これにより、プログラム全体でパフォーマンスが大幅に低下するため、一般にこれらの変数の使用は推奨されていません。</target>
        </trans-unit>
        <trans-unit id="b39057d081d4426f280d8e658ad98c69967c3dee" translate="yes" xml:space="preserve">
          <source>Traditionally in Perl, any use of any of the three variables &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt; (or their &lt;code&gt;use English&lt;/code&gt; equivalents) anywhere in the code, caused all subsequent successful pattern matches to make a copy of the matched string, in case the code might subsequently access one of those variables. This imposed a considerable performance penalty across the whole program, so generally the use of these variables has been discouraged.</source>
          <target state="translated">従来のPerlでは、コード内の任意の場所で3つの変数 &lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、または &lt;code&gt;$'&lt;/code&gt; いずれかを &lt;code&gt;use English&lt;/code&gt; （または英語に相当するものを使用）、その後の成功したすべてのパターン一致により、一致した文字列のコピーが作成されました。その後、コードはこれらの変数の1つにアクセスする可能性があります。これにより、プログラム全体でかなりのパフォーマンスの低下が発生したため、通常、これらの変数の使用は推奨されていません。</target>
        </trans-unit>
        <trans-unit id="edc1e4ae8cd5bdd4ef52be4cd619be47a1e80306" translate="yes" xml:space="preserve">
          <source>Traditionally the result is a string of 13 bytes: two first bytes of the salt, followed by 11 bytes from the set &lt;code&gt;[./0-9A-Za-z]&lt;/code&gt;, and only the first eight bytes of PLAINTEXT mattered. But alternative hashing schemes (like MD5), higher level security schemes (like C2), and implementations on non-Unix platforms may produce different strings.</source>
          <target state="translated">従来、結果は13バイトの文字列です。ソルトの最初の2バイトに続いて、セット &lt;code&gt;[./0-9A-Za-z]&lt;/code&gt; から11バイトが続き、PLAINTEXTの最初の8バイトだけが重要でした。ただし、代替のハッシュスキーム（MD5など）、高レベルのセキュリティスキーム（C2など）、および非UNIXプラットフォームでの実装では、異なる文字列が生成される場合があります。</target>
        </trans-unit>
        <trans-unit id="366ba2d0971221ce62e3e700bb5e4027a597313b" translate="yes" xml:space="preserve">
          <source>Traditionally, Perl has captured the value of the variable at that point and turned the subroutine into a constant eligible for inlining. In those cases where the variable can be modified elsewhere, this breaks the behavior of closures, in which the subroutine captures the variable itself, rather than its value, so future changes to the variable are reflected in the subroutine's return value.</source>
          <target state="translated">伝統的に、Perlはその時点で変数の値を捕捉し、サブルーチンをインライン化の対象となる定数に変えてきました。変数が他の場所で変更できる場合には、これはクロージャの動作を壊します。</target>
        </trans-unit>
        <trans-unit id="77c289ba4e5a8332a82b92e0a687ee8832b65763" translate="yes" xml:space="preserve">
          <source>Traditionally, the Perl function &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; rounds to 0 (see &lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;), and so for floating-point-like types one should follow the same semantic.</source>
          <target state="translated">従来、Perl関数 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; は0に丸められます（&lt;a href=&quot;functions/int&quot;&gt;intを&lt;/a&gt;参照）。したがって、浮動小数点のような型の場合は、同じセマンティクスに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="adbc09d928775a73e398c4d99047b6c88a5a75f6" translate="yes" xml:space="preserve">
          <source>Traditionally, the Perl function &lt;code&gt;int&lt;/code&gt; rounds to 0 (see &lt;a href=&quot;perlfunc#int&quot;&gt;&quot;int&quot; in perlfunc&lt;/a&gt;), and so for floating-point-like types one should follow the same semantic.</source>
          <target state="translated">従来、Perl関数 &lt;code&gt;int&lt;/code&gt; は0に丸められるため（&lt;a href=&quot;perlfunc#int&quot;&gt;perlfuncの「int」を参照&lt;/a&gt;）、浮動小数点のような型の場合は同じセマンティクスに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="b2c93accaaddf881f0426884fd5fb319c6e78ef4" translate="yes" xml:space="preserve">
          <source>Traditionally, the definition of an inside-out class contains a bare block inside which a number of lexical hashes are declared and the basic accessor methods defined, usually through &lt;code&gt;Scalar::Util::refaddr&lt;/code&gt; . Further methods may be defined outside this block. There has to be a DESTROY method and, for thread support, a CLONE method.</source>
          <target state="translated">従来、インサイドアウトクラスの定義には、通常は &lt;code&gt;Scalar::Util::refaddr&lt;/code&gt; によって定義される基本的なアクセサーメソッドが定義されている基本ブロックと、その内部にいくつかの字句ハッシュが含まれるベアブロックが含まれています。このブロックの外で、さらにメソッドを定義できます。DESTROYメソッドと、スレッドをサポートするためのCLONEメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="a7bba9f4132fe6d6098df9712bd5f009714f6811" translate="yes" xml:space="preserve">
          <source>Traditionally, the definition of an inside-out class contains a bare block inside which a number of lexical hashes are declared and the basic accessor methods defined, usually through &lt;code&gt;Scalar::Util::refaddr&lt;/code&gt;. Further methods may be defined outside this block. There has to be a DESTROY method and, for thread support, a CLONE method.</source>
          <target state="translated">従来、インサイドアウトクラスの定義には、多くの字句ハッシュが宣言され、通常は &lt;code&gt;Scalar::Util::refaddr&lt;/code&gt; 介して定義された基本的なアクセサメソッドが含まれるベアブロックが含まれています。このブロックの外側でさらにメソッドを定義できます。DESTROYメソッドが必要であり、スレッドサポートの場合はCLONEメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="56e30fa719825fef87897a9b73f8c643d6e27859" translate="yes" xml:space="preserve">
          <source>Traditionally, typemaps needed to be written to a separate file, conventionally called &lt;code&gt;typemap&lt;/code&gt; in a CPAN distribution. With ExtUtils::ParseXS (the XS compiler) version 3.12 or better which comes with perl 5.16, typemaps can also be embedded directly into XS code using a HERE-doc like syntax:</source>
          <target state="translated">伝統的に、タイプマップは、通常と呼ばれる、別のファイルに書き込まれるために必要な &lt;code&gt;typemap&lt;/code&gt; CPAN配布に。Perl 5.16に付属するExtUtils :: ParseXS（XSコンパイラ）バージョン3.12以降では、HERE-docのような構文を使用して、タイプマップをXSコードに直接埋め込むこともできます。</target>
        </trans-unit>
        <trans-unit id="09f8c62448637990777ebfc05ef92616935bd9ae" translate="yes" xml:space="preserve">
          <source>Trailing \ in regex m/%s/</source>
          <target state="translated">Trailing ″Trailing ″in regex m/%s//</target>
        </trans-unit>
        <trans-unit id="b116d15c8d0f591aea30acc14d32c8151254d15b" translate="yes" xml:space="preserve">
          <source>Transfer file in ASCII. CRLF translation will be done if required</source>
          <target state="translated">ASCIIでファイルを転送します。必要に応じてCRLF翻訳が行われます</target>
        </trans-unit>
        <trans-unit id="19b93b66a9a164099cf4c3e60d4b5f7a2c5a7780" translate="yes" xml:space="preserve">
          <source>Transfer file in binary mode. No transformation will be done.</source>
          <target state="translated">バイナリモードでファイルを転送します。変換は行われません。</target>
        </trans-unit>
        <trans-unit id="71b54b146f4723aa8db4c8d0ffb0816f4aee31ad" translate="yes" xml:space="preserve">
          <source>Transforms the current application into a PM application and back. The argument true means that a real message loop is going to be served. OS2::MorphPM() returns the PM message queue handle as an integer.</source>
          <target state="translated">現在のアプリケーションをPMアプリケーションに変換して戻します。引数 true は、実際のメッセージループが提供されることを意味します。OS2::MorphPM()は、PMメッセージキューハンドルを整数で返します。</target>
        </trans-unit>
        <trans-unit id="45a38a062b50bb87ecbfadb79c2d11cbaef46742" translate="yes" xml:space="preserve">
          <source>Transition notes when upgrading to Test2</source>
          <target state="translated">Test2へのアップグレード時の移行注意点</target>
        </trans-unit>
        <trans-unit id="3ab5267ee01682b79d53eef55a6ec4c6169897d2" translate="yes" xml:space="preserve">
          <source>Translate logical name DCL$PATH as a searchlist, rather than trying to &lt;code&gt;&lt;a href=&quot;../../functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; string value of &lt;code&gt;$ENV{'PATH'}&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$ENV{'PATH'}&lt;/code&gt; 文字列値を &lt;code&gt;&lt;a href=&quot;../../functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; するのではなく、論理名DCL $ PATHを検索リストとして変換します。</target>
        </trans-unit>
        <trans-unit id="ff6fe6980843b217b9b010e6374cc31ac52dccf0" translate="yes" xml:space="preserve">
          <source>Translate logical name DCL$PATH as a searchlist, rather than trying to &lt;code&gt;split&lt;/code&gt; string value of &lt;code&gt;$ENV{'PATH'}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$ENV{'PATH'}&lt;/code&gt; 文字列値を &lt;code&gt;split&lt;/code&gt; しようとするのではなく、論理名DCL $ PATHを検索リストとして変換します。</target>
        </trans-unit>
        <trans-unit id="4df3684f8e1af9f3d36ff43ec1a39944ea62d252" translate="yes" xml:space="preserve">
          <source>Translates a Windows path to the corresponding cygwin path respecting the current mount points. With a second non-null argument returns an absolute path. Double-byte characters will not be translated.</source>
          <target state="translated">Windowsパスを、現在のマウントポイントを尊重して対応するcygwinパスに変換します。2 番目の非 null 引数を指定すると、絶対パスを返します。ダブルバイト文字は変換されません。</target>
        </trans-unit>
        <trans-unit id="43c8972cdf7cbd4964f60ea0553934fab0c0bfe0" translate="yes" xml:space="preserve">
          <source>Translates a Windows pid to the corresponding cygwin pid (if any).</source>
          <target state="translated">Windows の pid を対応する cygwin の pid に変換します (もしあれば)。</target>
        </trans-unit>
        <trans-unit id="582d5dcb01cd3d8be49a7bc9c562cc61d6d3a8c7" translate="yes" xml:space="preserve">
          <source>Translates a cygwin path to the corresponding cygwin path respecting the current mount points. With a second non-null argument returns an absolute path. Double-byte characters will not be translated.</source>
          <target state="translated">cygwinパスを、現在のマウントポイントを尊重して対応するcygwinパスに変換します。2 番目の非 null 引数を指定すると、絶対パスを返します。ダブルバイト文字は変換されません。</target>
        </trans-unit>
        <trans-unit id="d0b7e8b1f9fa64e7df02a610ac8f751cbf79794f" translate="yes" xml:space="preserve">
          <source>Translates a cygwin pid to the corresponding Windows pid (which may or may not be the same).</source>
          <target state="translated">cygwin の pid を対応する Windows の pid に変換します (同じであってもなくても構いません)。</target>
        </trans-unit>
        <trans-unit id="3cb9f5d38a91da3cb24f8ddc9ee0b78bc3316e7d" translate="yes" xml:space="preserve">
          <source>Translates the template as before except that a directory name is specified.</source>
          <target state="translated">ディレクトリ名が指定されていることを除いて、テンプレートを以前のように翻訳します。</target>
        </trans-unit>
        <trans-unit id="0e0c59b2d3a94d773b16fba8c10f9e6b9a4c8d83" translate="yes" xml:space="preserve">
          <source>Translators are available for converting Pod to various formats like plain text, HTML, man pages, and more.</source>
          <target state="translated">Podをプレーンテキスト、HTML、マンページなど様々な形式に変換するための翻訳者が用意されています。</target>
        </trans-unit>
        <trans-unit id="3d02c52d09a4e30f9d862205070306d13e0fd4bf" translate="yes" xml:space="preserve">
          <source>Translators may request clarification of the situation in which a particular phrase is found. For example, in English we are entirely happy saying &quot;</source>
          <target state="translated">翻訳者は、特定のフレーズがどのような状況にあるのかを明確にするように要求することがあります。例えば、英語では、&quot;</target>
        </trans-unit>
        <trans-unit id="7cec7716cf837c5d26e64202c8e48b66fd1ee111" translate="yes" xml:space="preserve">
          <source>Transliterate characters missing in encoding to &amp;amp;#NNN; where NNN is the decimal Unicode code point.</source>
          <target state="translated">＆＃NNN;へのエンコーディングで欠落している文字変換 ここで、NNNは10進のUnicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="4a944de5b3bc5a013582ea0515548fdc64b85e91" translate="yes" xml:space="preserve">
          <source>Transliterate characters missing in encoding to &amp;amp;#xHHHH; where HHHH is the hexadecimal Unicode code point.</source>
          <target state="translated">＆＃xHHHH;へのエンコードで欠落している文字を文字変換します ここで、HHHHは16進数のUnicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="7531ab4c38b927cd6bd26046089b6f931f4b9669" translate="yes" xml:space="preserve">
          <source>Transliterate characters missing in encoding to \x{HHHH} where HHHH is the hexadecimal Unicode code point.</source>
          <target state="translated">エンコーディングで欠落している文字を、HHHHHHが16進数のUnicodeコードポイントである\x{HHHHHH}にトランスリテレートします。</target>
        </trans-unit>
        <trans-unit id="41fb5a616fd328877f09027e33238e8f08b825a7" translate="yes" xml:space="preserve">
          <source>Transliterates all occurrences of the characters found (or not found if the &lt;code&gt;/c&lt;/code&gt; modifier is specified) in the search list with the positionally corresponding character in the replacement list, possibly deleting some, depending on the modifiers specified. It returns the number of characters replaced or deleted. If no string is specified via the &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt; operator, the &lt;code&gt;$_&lt;/code&gt; string is transliterated.</source>
          <target state="translated">検索リストで見つかった（または &lt;code&gt;/c&lt;/code&gt; 修飾子が指定されている場合は見つからなかった）文字のすべての出現を、置換リスト内の位置的に対応する文字で音訳し、指定された修飾子によっては一部を削除する場合があります。置換または削除された文字数を返します。 &lt;code&gt;=~&lt;/code&gt; または &lt;code&gt;!~&lt;/code&gt; 演算子で文字列が指定されていない場合、 &lt;code&gt;$_&lt;/code&gt; 文字列は音訳されます。</target>
        </trans-unit>
        <trans-unit id="778ddecb6dcc9c5eac19efad6822ed838d8cfd37" translate="yes" xml:space="preserve">
          <source>Transliterates all occurrences of the characters found in the search list with the corresponding character in the replacement list. It returns the number of characters replaced or deleted. If no string is specified via the &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt; operator, the &lt;code&gt;$_&lt;/code&gt; string is transliterated.</source>
          <target state="translated">検索リストで見つかったすべての文字を置換リストの対応する文字で音訳します。置換または削除された文字数を返します。 &lt;code&gt;=~&lt;/code&gt; または &lt;code&gt;!~&lt;/code&gt; 演算子を介して文字列が指定されていない場合、 &lt;code&gt;$_&lt;/code&gt; 文字列が音訳されます。</target>
        </trans-unit>
        <trans-unit id="31352bae87fe97a737e1fbb74f2d29f6b62133a0" translate="yes" xml:space="preserve">
          <source>Transliteration pattern not terminated</source>
          <target state="translated">翻字パターンが終了しない</target>
        </trans-unit>
        <trans-unit id="a70808fd22f433d5ec8e8c5f0aad4eb5242bb686" translate="yes" xml:space="preserve">
          <source>Transliteration replacement not terminated</source>
          <target state="translated">翻字置換が終了していない</target>
        </trans-unit>
        <trans-unit id="420a5e0771ab4a0b9e610c4b35eccba70828962b" translate="yes" xml:space="preserve">
          <source>Transparent BigInteger support for Perl</source>
          <target state="translated">Perl の透過的な BigInteger サポート</target>
        </trans-unit>
        <trans-unit id="7267fd5dd0f2d5cad0d4fdfbc6f406231fbc74c7" translate="yes" xml:space="preserve">
          <source>Transparent BigNumber support for Perl</source>
          <target state="translated">Perl での透過的な BigNumber のサポート</target>
        </trans-unit>
        <trans-unit id="d53f15081d775673dd122d267a0fda505ffa50fe" translate="yes" xml:space="preserve">
          <source>Transparent BigNumber/BigRational support for Perl</source>
          <target state="translated">Perl の透過的な BigNumber/BigRational のサポート</target>
        </trans-unit>
        <trans-unit id="1320fa0059bd04032c977af604f63823046e2bca" translate="yes" xml:space="preserve">
          <source>Trappable errors may be trapped using the eval operator. See &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;. In almost all cases, warnings may be selectively disabled or promoted to fatal errors using the &lt;code&gt;warnings&lt;/code&gt; pragma. See &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">トラップ可能なエラーは、eval演算子を使用してトラップできます。&lt;a href=&quot;functions/eval&quot;&gt;evalを&lt;/a&gt;参照してください。ほとんどすべての場合、警告は、 &lt;code&gt;warnings&lt;/code&gt; プラグマを使用して選択的に無効にするか、致命的なエラーに昇格させることができます。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9594e634fc8d3b1ced220c4bc1c7249b17dcfd33" translate="yes" xml:space="preserve">
          <source>Trappable errors may be trapped using the eval operator. See &lt;a href=&quot;perlfunc#eval&quot;&gt;&quot;eval&quot; in perlfunc&lt;/a&gt;. In almost all cases, warnings may be selectively disabled or promoted to fatal errors using the &lt;code&gt;warnings&lt;/code&gt; pragma. See &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">トラップ可能なエラーは、eval演算子を使用してトラップできます。&lt;a href=&quot;perlfunc#eval&quot;&gt;perlfuncの「eval」を&lt;/a&gt;参照してください。ほとんどすべての場合、 &lt;code&gt;warnings&lt;/code&gt; プラグマを使用して、警告を選択的に無効にするか、致命的なエラーに昇格させることができます。&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a51ac6ee368e2e9218baa833ba69372fe936aae9" translate="yes" xml:space="preserve">
          <source>Trapping $SIG {__DIE__} other than during program exit.</source>
          <target state="translated">プログラム終了時以外に$SIG {__DIE__}をトラップします。</target>
        </trans-unit>
        <trans-unit id="17b071b49543aa19f12f2274e32fe9c1ba934844" translate="yes" xml:space="preserve">
          <source>Trapping &lt;code&gt;$SIG {__DIE__}&lt;/code&gt; other than during program exit.</source>
          <target state="translated">プログラムの終了時以外に &lt;code&gt;$SIG {__DIE__}&lt;/code&gt; トラップします。</target>
        </trans-unit>
        <trans-unit id="7f10d4d7cb6294c3306a64ba2969b74200be2428" translate="yes" xml:space="preserve">
          <source>Traverse a directory tree.</source>
          <target state="translated">ディレクトリツリーをトラバースします。</target>
        </trans-unit>
        <trans-unit id="b2a99160c9547d1ab75aaa55623e70b1b8573818" translate="yes" xml:space="preserve">
          <source>Treat string as multiple lines. That is, change &quot;^&quot; and &quot;$&quot; from matching the start of the string's first line and the end of its last line to matching the start and end of each line within the string.</source>
          <target state="translated">文字列を複数行として扱う。つまり、&quot;^&quot;と&quot;$&quot;は、文字列の最初の行と最後の行の終わりを一致させるのではなく、文字列内の各行の開始と終了を一致させるように変更します。</target>
        </trans-unit>
        <trans-unit id="93fa15e2fd4bd3f0707530f7f374f8fd00c44547" translate="yes" xml:space="preserve">
          <source>Treat string as single line. That is, change &quot;.&quot; to match any character whatsoever, even a newline, which normally it would not match.</source>
          <target state="translated">文字列を一行として扱う。つまり、&quot;.&quot; を変更して、通常はマッチしない改行であっても、どんな文字にもマッチするようにします。</target>
        </trans-unit>
        <trans-unit id="78e54c9da655d8dd5d453436c311823f0a02dca4" translate="yes" xml:space="preserve">
          <source>Treat the string as single line. That is, change &lt;code&gt;&quot;.&quot;&lt;/code&gt; to match any character whatsoever, even a newline, which normally it would not match.</source>
          <target state="translated">文字列を1行として扱います。つまり、 &lt;code&gt;&quot;.&quot;&lt;/code&gt; 変更します。通常は一致しない改行であっても、任意の文字に一致します。</target>
        </trans-unit>
        <trans-unit id="72ce43ffe9e36e380be02d47d4ca4755e5f762f0" translate="yes" xml:space="preserve">
          <source>Treat the string being matched against as multiple lines. That is, change &lt;code&gt;&quot;^&quot;&lt;/code&gt; and &lt;code&gt;&quot;$&quot;&lt;/code&gt; from matching the start of the string's first line and the end of its last line to matching the start and end of each line within the string.</source>
          <target state="translated">照合対象の文字列を複数行として扱います。つまり、 &lt;code&gt;&quot;^&quot;&lt;/code&gt; と &lt;code&gt;&quot;$&quot;&lt;/code&gt; を、文字列の最初の行の開始と最後の行の終了の一致から、文字列内の各行の開始と終了の一致に変更します。</target>
        </trans-unit>
        <trans-unit id="13d54adba605a60e729039d50fd8ece1d374030c" translate="yes" xml:space="preserve">
          <source>Treating errors reported by OS/2 API</source>
          <target state="translated">OS/2 APIで報告されたエラーを処理する</target>
        </trans-unit>
        <trans-unit id="369a3fe575602256c74f237530b2066156aadc25" translate="yes" xml:space="preserve">
          <source>Treats ARRAY as a stack by appending the values of LIST to the end of ARRAY. The length of ARRAY increases by the length of LIST. Has the same effect as</source>
          <target state="translated">ARRAYは、LISTの値をARRAYの末尾に追加してスタックとして扱います。ARRAYの長さはLISTの長さ分だけ長くなります。と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="4c2b22d2044144acb2e177299ffb0546b35d1302" translate="yes" xml:space="preserve">
          <source>Treats the complete zip file/buffer as a single compressed data stream. When reading in multi-stream mode each member of the zip file/buffer will be uncompressed in turn until the end of the file/buffer is encountered.</source>
          <target state="translated">完全な zip ファイル/バッファを単一の圧縮データストリームとして扱います。マルチストリームモードで読み込む場合、zip ファイル/バッファの各メンバは、ファイル/バッファの最後に到達するまで順番に圧縮が解除されます。</target>
        </trans-unit>
        <trans-unit id="9170df3df869288dce7be7560494463cb05b5488" translate="yes" xml:space="preserve">
          <source>Treats the return value of the code block as the condition.</source>
          <target state="translated">コードブロックの戻り値を条件として扱います。</target>
        </trans-unit>
        <trans-unit id="a635e53ae97925c0c25ad3ddaf7be47457bf89eb" translate="yes" xml:space="preserve">
          <source>Treats the return value of the code block as the condition. Full syntax: &lt;code&gt;(?(?{ &lt;i&gt;code&lt;/i&gt; })&lt;i&gt;then&lt;/i&gt;|&lt;i&gt;else&lt;/i&gt;)&lt;/code&gt;</source>
          <target state="translated">コードブロックの戻り値を条件として扱います。完全な構文： &lt;code&gt;(?(?{ &lt;i&gt;code&lt;/i&gt; })&lt;i&gt;then&lt;/i&gt;|&lt;i&gt;else&lt;/i&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="076fbc2c1d84c79c360a6aaf693ed414200277af" translate="yes" xml:space="preserve">
          <source>Treats the string in EXPR as a bit vector made up of elements of width BITS and returns the value of the element specified by OFFSET as an unsigned integer. BITS therefore specifies the number of bits that are reserved for each element in the bit vector. This must be a power of two from 1 to 32 (or 64, if your platform supports that).</source>
          <target state="translated">EXPR内の文字列を幅BITSの要素からなるビットベクトルとして扱い、OFFSETで指定された要素の値を符号なし整数として返します。したがって、BITSは、ビットベクタの各要素に予約されているビット数を指定します。これは、1から32までの2乗(プラットフォームがサポートしている場合は64)でなければなりません。</target>
        </trans-unit>
        <trans-unit id="74c726e22e1ef4f0ff5d0f342fa4b671a8d7e3e6" translate="yes" xml:space="preserve">
          <source>Tree Contents</source>
          <target state="translated">ツリーの内容</target>
        </trans-unit>
        <trans-unit id="bc924ad99a31c83efb674a21a76798fdb63e8535" translate="yes" xml:space="preserve">
          <source>Tries to &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; the given $module or $file. If it loads successfully, the test will pass. Otherwise it fails and displays the load error.</source>
          <target state="translated">指定された$ moduleまたは$ file を &lt;code&gt;&lt;a href=&quot;../functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; しようとします。正常にロードされると、テストに合格します。それ以外の場合は失敗し、ロードエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="9e432f6da17926a8d04f67b7c7b25438f0d2078a" translate="yes" xml:space="preserve">
          <source>Tries to &lt;code&gt;require&lt;/code&gt; the given $module or $file. If it loads successfully, the test will pass. Otherwise it fails and displays the load error.</source>
          <target state="translated">指定された$ moduleまたは$ fileを &lt;code&gt;require&lt;/code&gt; しようとします。正常に読み込まれると、テストに合格します。それ以外の場合は失敗し、ロードエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="82437a05f154f78a4ae190392aa21b46338d0c97" translate="yes" xml:space="preserve">
          <source>Tries to uses &lt;a href=&quot;../../../ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt; &amp;amp; &lt;a href=&quot;../../../io/select&quot;&gt;IO::Select&lt;/a&gt; to communicate with the spawned process if they are available. Falls back onto &lt;code&gt;&lt;a href=&quot;../../../functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../ipc/open3&quot;&gt;IPC :: Open3&lt;/a&gt;＆&lt;a href=&quot;../../../io/select&quot;&gt;IO :: Select&lt;/a&gt;を使用して、生成されたプロセスが利用可能な場合は、それらと通信しようとします。 &lt;code&gt;&lt;a href=&quot;../../../functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="576659556d288e025b94f7ce5ace34cc997c7d54" translate="yes" xml:space="preserve">
          <source>Tries to uses &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3&lt;/a&gt; &amp;amp; &lt;a href=&quot;IO::Select&quot;&gt;IO::Select&lt;/a&gt; to communicate with the spawned process if they are available. Falls back onto &lt;code&gt;open()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;IPC::Open3&quot;&gt;IPC :: Open3&lt;/a&gt;と&lt;a href=&quot;IO::Select&quot;&gt;IO :: Select&lt;/a&gt;を使用して、生成されたプロセスが使用可能な場合はそれらと通信しようとします。 &lt;code&gt;open()&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="d0328d99f96d6b6cb2e5370be4979de91fb2ea44" translate="yes" xml:space="preserve">
          <source>Triggered by a delete from %^H, records the key to &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; .</source>
          <target state="translated">％^ Hからの削除によって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; 、キーをPL_compiling.cop_hints_hashに記録します。</target>
        </trans-unit>
        <trans-unit id="4b83192144a37d41cc56666387a2897c4231e185" translate="yes" xml:space="preserve">
          <source>Triggered by a delete from &lt;code&gt;%^H&lt;/code&gt;, records the key to &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%^H&lt;/code&gt; からの削除によって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; 、キーをPL_compiling.cop_hints_hashに記録します。</target>
        </trans-unit>
        <trans-unit id="ce25e5857867e6310e792d455213353087781834" translate="yes" xml:space="preserve">
          <source>Triggered by a store to %^H, records the key/value pair to &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; . It is assumed that hints aren't storing anything that would need a deep copy. Maybe we should warn if we find a reference.</source>
          <target state="translated">ストアによって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; れて％^ Hになり、キーと値のペアをPL_compiling.cop_hints_hashに記録します。ヒントは、深いコピーを必要とするものは何も格納していないと想定されています。参照を見つけたら警告する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d308cd2f0c07029bd86f512d81284ed366f6c445" translate="yes" xml:space="preserve">
          <source>Triggered by a store to &lt;code&gt;%^H&lt;/code&gt;, records the key/value pair to &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt;. It is assumed that hints aren't storing anything that would need a deep copy. Maybe we should warn if we find a reference.</source>
          <target state="translated">ストアによって &lt;code&gt;%^H&lt;/code&gt; が &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; 、キーと値のペアがPL_compiling.cop_hints_hashに記録されます。ヒントには、ディープコピーが必要なものは何も格納されていないと想定されています。参照が見つかった場合は警告する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5e62fd5a7239de339d5bd00c0d3006bd6b133b17" translate="yes" xml:space="preserve">
          <source>Triggered by clearing %^H, resets &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; .</source>
          <target state="translated">％^ Hをクリアすることによって &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; 、PL_compiling.cop_hints_hashをリセットします。</target>
        </trans-unit>
        <trans-unit id="7b8a309606a54a3100175b28554ebbc2c0bf40e9" translate="yes" xml:space="preserve">
          <source>Triggered by clearing &lt;code&gt;%^H&lt;/code&gt;, resets &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%^H&lt;/code&gt; クリアすることで &lt;code&gt;PL_compiling.cop_hints_hash&lt;/code&gt; 、PL_compiling.cop_hints_hashをリセットします。</target>
        </trans-unit>
        <trans-unit id="b9e4c026492c440bf32166e0789393487d03b254" translate="yes" xml:space="preserve">
          <source>Trigonometric functions</source>
          <target state="translated">三角関数</target>
        </trans-unit>
        <trans-unit id="ce550b5479caa5cd0ed1b0d59ad15c9773c7bcdb" translate="yes" xml:space="preserve">
          <source>Trilogy, &lt;code&gt;In the beginning the
Universe was created. This has made a lot of people very angry and
been widely regarded as a bad move&lt;/code&gt; . Their mistake was not of this magnitude so let's forgive them.</source>
          <target state="translated">三部作、 &lt;code&gt;In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move&lt;/code&gt; ます。彼らの過ちはそれほど大きなものではなかったので、許してみましょう。</target>
        </trans-unit>
        <trans-unit id="bd5caa14d9ae02b51776bb926be345cdff071829" translate="yes" xml:space="preserve">
          <source>Trilogy, &lt;code&gt;In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move&lt;/code&gt;. Their mistake was not of this magnitude so let's forgive them.</source>
          <target state="translated">三部作、 &lt;code&gt;In the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move&lt;/code&gt; 。彼らの過ちはこれほどの大きさではなかったので、許しましょう。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="28e5d7df36d1a6dde25f3c09a31821344957a89c" translate="yes" xml:space="preserve">
          <source>Troubleshooting these Examples</source>
          <target state="translated">これらの例のトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="95a9fcae6cc7c433c5ecb181677d9e65f088ed3c" translate="yes" xml:space="preserve">
          <source>Tru64 5.1 documentation on syslog, &lt;a href=&quot;http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&quot;&gt;http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&lt;/a&gt;</source>
          <target state="translated">syslog上のTru64 5.1ドキュメント、&lt;a href=&quot;http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&quot;&gt;http：//h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V51_HTML/MAN/MAN3/0193____.HTM&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="048a8987b7e7ec2f729db8f1f26dbe354039d137" translate="yes" xml:space="preserve">
          <source>Tru64 documentation on syslog, &lt;a href=&quot;http://nixdoc.net/man-pages/Tru64/man3/syslog.3.html&quot;&gt;http://nixdoc.net/man-pages/Tru64/man3/syslog.3.html&lt;/a&gt;</source>
          <target state="translated">Syslogに関するTru64のドキュメント、&lt;a href=&quot;http://nixdoc.net/man-pages/Tru64/man3/syslog.3.html&quot;&gt;http：//nixdoc.net/man-pages/Tru64/man3/syslog.3.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23888b0b14d45068fea9c016be17513c2fc8f457" translate="yes" xml:space="preserve">
          <source>True color and aliases are not supported by the constant interface.</source>
          <target state="translated">真の色とエイリアスは定数インターフェースではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2032ae3fd0b83aa79eef0ab641b287df415a0ffd" translate="yes" xml:space="preserve">
          <source>True if all testing should be halted immediately.</source>
          <target state="translated">すべてのテストを直ちに中止すべきであれば真です。</target>
        </trans-unit>
        <trans-unit id="9109071ad135094f2373ecd2b94d8dc48e87efa6" translate="yes" xml:space="preserve">
          <source>True if an external</source>
          <target state="translated">外部の</target>
        </trans-unit>
        <trans-unit id="3d8c968cafa644831ebe062927600b2f8922bcb7" translate="yes" xml:space="preserve">
          <source>True if and only if the version object was created with a underscore, e.g.</source>
          <target state="translated">バージョンオブジェクトがアンダースコアで作成されている場合にのみ真。</target>
        </trans-unit>
        <trans-unit id="f3a74362a5094d39f2b42a3da4ab4b28a9691928" translate="yes" xml:space="preserve">
          <source>True if on an OS where qx operator (or backticks) can redirect &lt;code&gt;STDERR&lt;/code&gt; onto &lt;code&gt;STDOUT&lt;/code&gt; .</source>
          <target state="translated">qxオペレーター（またはバックティック）が &lt;code&gt;STDERR&lt;/code&gt; を &lt;code&gt;STDOUT&lt;/code&gt; にリダイレクトできるOSの場合はtrue 。</target>
        </trans-unit>
        <trans-unit id="93fe8e82ddc3a4dc6131ed9782aa5f9370ee777e" translate="yes" xml:space="preserve">
          <source>True if on an OS where qx operator (or backticks) can redirect &lt;code&gt;STDERR&lt;/code&gt; onto &lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="translated">qx演算子（またはバッククォート）が &lt;code&gt;STDERR&lt;/code&gt; を &lt;code&gt;STDOUT&lt;/code&gt; にリダイレクトできるOSの場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="2ac2287aae7e1950a35f3972fa5317afd518e160" translate="yes" xml:space="preserve">
          <source>True if the &lt;code&gt;callback($hub)&lt;/code&gt; method on the event should be called.</source>
          <target state="translated">イベントの &lt;code&gt;callback($hub)&lt;/code&gt; メソッドを呼び出す必要がある場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="69954ea7da329e8cdabdea3ecd3ac1d75fce20fd" translate="yes" xml:space="preserve">
          <source>True if the assertion passed.</source>
          <target state="translated">アサーションが通過した場合は真。</target>
        </trans-unit>
        <trans-unit id="df801d4537bfb58354fb108cdce7113cab9309ef" translate="yes" xml:space="preserve">
          <source>True if the event contains diagnostics info. This is useful because a non-verbose harness may choose to hide events that are not in this category. Some formatters may choose to send these to STDERR instead of STDOUT to ensure they are seen.</source>
          <target state="translated">イベントに診断情報が含まれている場合は真。これは、非言語ハーネスでは、このカテゴリにないイベントを非表示にすることができるので便利です。フォーマッタによっては、これらのイベントを確実に表示するために、STDOUTではなくSTDERRに送信することを選択する場合があります。</target>
        </trans-unit>
        <trans-unit id="54a8b59f97958ff045f6c01f8b83b5a2e2ebdf5c" translate="yes" xml:space="preserve">
          <source>True if the event is global in nature and should be seen by all hubs.</source>
          <target state="translated">イベントの性質がグローバルで、すべてのハブで見られるべきものであれば真。</target>
        </trans-unit>
        <trans-unit id="edd2a61baedabf880cbaef8af523d638bf533482" translate="yes" xml:space="preserve">
          <source>True if the event should be skipped by formatters.</source>
          <target state="translated">フォーマッタによってイベントがスキップされるべきかどうかを判定する場合に真。</target>
        </trans-unit>
        <trans-unit id="0ea7f713bb50ee451a6daabd00c2427e62cfb9f7" translate="yes" xml:space="preserve">
          <source>True if the event was buffered and not sent to the formatter independent of a parent (This should never be set when nested is &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;undef&lt;/code&gt;).</source>
          <target state="translated">イベントがバッファリングされ、親から独立してフォーマッタに送信されなかった場合はTrue（ネストが &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;undef&lt;/code&gt; の場合は設定しないでください）。</target>
        </trans-unit>
        <trans-unit id="52369ee8420cce3f1adcdcc979064876449bf33b" translate="yes" xml:space="preserve">
          <source>True if the socket is currently positioned at the urgent data mark, false otherwise.</source>
          <target state="translated">ソケットが現在緊急データマークに位置している場合は真、そうでない場合は偽。</target>
        </trans-unit>
        <trans-unit id="eac6f6323bc5d7181c78c2fb3ebd2b5d82dd47f8" translate="yes" xml:space="preserve">
          <source>True if the socket is currently positioned at the urgent data mark, false otherwise. If your system doesn't yet implement &lt;code&gt;sockatmark&lt;/code&gt; this will throw an exception.</source>
          <target state="translated">ソケットが現在緊急データマークに配置されている場合はtrue、それ以外の場合はfalse。システムがまだ &lt;code&gt;sockatmark&lt;/code&gt; を実装していない場合、これは例外をスローします。</target>
        </trans-unit>
        <trans-unit id="263df4a03022b2922b4599d5befe15e4f094944e" translate="yes" xml:space="preserve">
          <source>True if the source has meta data.</source>
          <target state="translated">ソースにメタデータがあれば真。</target>
        </trans-unit>
        <trans-unit id="1060dac952d58237b926360d8015317b306f2cf6" translate="yes" xml:space="preserve">
          <source>True if the subtest is buffered (meaning the formatter has probably not seen them yet).</source>
          <target state="translated">サブテストがバッファリングされている場合(フォーマッタがまだそれらを見ていない可能性が高いことを意味します)は真です。</target>
        </trans-unit>
        <trans-unit id="ead298b6e06af0e6aa6b218dfc1434b74a59946d" translate="yes" xml:space="preserve">
          <source>True if the subtest is buffered, that is all subevents render at once. If this is false it means all subevents render as they are produced.</source>
          <target state="translated">サブテストがバッファリングされている場合、つまり、すべてのサブイベントが一度にレンダリングされている場合は真です。これが false の場合、すべてのサブイベントが生成されたままレンダリングされることを意味します。</target>
        </trans-unit>
        <trans-unit id="f4532ad71a145630727fdc99e9e7077d2ca07a8f" translate="yes" xml:space="preserve">
          <source>True if the system can really fork. This will be false for systems where fork is emulated.</source>
          <target state="translated">システムが本当にフォークできる場合は真です。forkがエミュレートされているシステムではfalseになります。</target>
        </trans-unit>
        <trans-unit id="a5626c52704625d46d51a67bed3154dc66584552" translate="yes" xml:space="preserve">
          <source>True if the testing has ended. This MAY return the stack frame of the tool that ended the test, but that is not guaranteed.</source>
          <target state="translated">テストが終了していれば真。これはテストを終了したツールのスタックフレームを返してもよいでしょうが、これは保証されていません。</target>
        </trans-unit>
        <trans-unit id="001c945275af8c53e929fc8bb52b9331e9fa2beb" translate="yes" xml:space="preserve">
          <source>True if this op will be the return value of an lvalue subroutine</source>
          <target state="translated">このオペランドがlvalueサブルーチンの戻り値になる場合は真</target>
        </trans-unit>
        <trans-unit id="407715ca6f2feb3c98182b0f933855e8539ff50e" translate="yes" xml:space="preserve">
          <source>True if this system is capable of true or pseudo-fork.</source>
          <target state="translated">このシステムが真か疑似フォークが可能な場合は真。</target>
        </trans-unit>
        <trans-unit id="0d5d7ce97ba71eed0cb8d5f95d0b08ebce27950e" translate="yes" xml:space="preserve">
          <source>True if this system is capable of using threads.</source>
          <target state="translated">このシステムがスレッドを使用できる場合は真。</target>
        </trans-unit>
        <trans-unit id="a225ab817ea7fa5d168aaeda6fa091c3d9bf26a1" translate="yes" xml:space="preserve">
          <source>True is returned if the file name begins with &lt;code&gt;drive_letter:&lt;/code&gt; , and if not, File::Spec::Unix file_name_is_absolute() is called.</source>
          <target state="translated">ファイル名が &lt;code&gt;drive_letter:&lt;/code&gt; で始まる場合はtrueが返され、そうでない場合はFile :: Spec :: Unix file_name_is_absolute（）が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="feb89466cc01669fa065abcba450c743f09dda61" translate="yes" xml:space="preserve">
          <source>True is returned if the file name begins with &lt;code&gt;drive_letter:&lt;/code&gt;, and if not, File::Spec::Unix file_name_is_absolute() is called.</source>
          <target state="translated">ファイル名が &lt;code&gt;drive_letter:&lt;/code&gt; で始まる場合はTrueが返され、そうでない場合はFile :: Spec :: Unix file_name_is_absolute（）が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fc30aa25ff3d01d64cda3e60440cb70eb23d7d54" translate="yes" xml:space="preserve">
          <source>True only if the version object is a dotted-decimal version, e.g.</source>
          <target state="translated">バージョンオブジェクトがドット十進数バージョンの場合にのみ真。</target>
        </trans-unit>
        <trans-unit id="714a51854b847f734d4ad3e61a135b245522aeae" translate="yes" xml:space="preserve">
          <source>True while the most recent result was a TODO. Becomes true before the TODO result is returned and stays true until just before the next non- TODO test is returned.</source>
          <target state="translated">直近の結果が TODO である間は真です。TODOの結果が返される前に真になり、次の非TODOテストが返される直前まで真のままです。</target>
        </trans-unit>
        <trans-unit id="1aceee4ee4f49927d115b3fc82be6c512d7c286c" translate="yes" xml:space="preserve">
          <source>True/false results are never tainted.</source>
          <target state="translated">真偽の結果は決して汚されることはありません。</target>
        </trans-unit>
        <trans-unit id="f8dc96e0b59ea3e8174d5b669fb89eb4295305d3" translate="yes" xml:space="preserve">
          <source>Truncate $x to an integer value.</source>
          <target state="translated">x を整数値に切り捨てます。</target>
        </trans-unit>
        <trans-unit id="191dfbc6a35e73fdb5087a2421ab0ece27f48615" translate="yes" xml:space="preserve">
          <source>Truncate at end-of-file.</source>
          <target state="translated">ファイルの末尾で切り捨てます。</target>
        </trans-unit>
        <trans-unit id="11625b03167a879105d56ac5232340fe7c1e8727" translate="yes" xml:space="preserve">
          <source>Truncate file suggested by open mode.</source>
          <target state="translated">オープンモードで提案されたファイルを切り詰める。</target>
        </trans-unit>
        <trans-unit id="7b41166934a48e946fe5af0522939c8c4005a23a" translate="yes" xml:space="preserve">
          <source>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length. Raises an exception if truncate isn't implemented on your system. Returns true if successful, &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; on error.</source>
          <target state="translated">FILEHANDLEで開かれたファイル、またはEXPRによって名前が付けられたファイルを、指定された長さに切り捨てます。システムに切り捨てが実装されていない場合、例外が発生します。成功した場合はtrueを返し、エラーの場合は&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="69983876ff90a7fef773e08a772b817cd9bc808d" translate="yes" xml:space="preserve">
          <source>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length. Raises an exception if truncate isn't implemented on your system. Returns true if successful, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">FILEHANDLEで開かれたファイル、またはEXPRによって名前が付けられたファイルを、指定された長さに切り捨てます。システムに切り捨てが実装されていない場合は、例外を発生させます。成功した場合はtrue、エラーの場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6b7268dfdb3e49fbc8b9714eadb8dee9d853cfb" translate="yes" xml:space="preserve">
          <source>Truncates the file opened on FILEHANDLE, or named by EXPR, to the specified length. Raises an exception if truncate isn't implemented on your system. Returns true if successful, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error.</source>
          <target state="translated">FILEHANDLEで開かれたファイル、またはEXPRによって名前が付けられたファイルを、指定された長さに切り捨てます。システムに切り捨てが実装されていない場合は、例外を発生させます。成功した場合はtrue、エラーの場合は &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="59f6a9fc2fffb15b78c0b81473cdfd56174958cf" translate="yes" xml:space="preserve">
          <source>Truncation</source>
          <target state="translated">Truncation</target>
        </trans-unit>
        <trans-unit id="2975c0f92fcae4101065548cc1a5e6bfa7744574" translate="yes" xml:space="preserve">
          <source>Truncation to same-or-shorter lengths only. (VOS)</source>
          <target state="translated">同程度の長さまたはそれより短い長さにのみ切り捨てることができます。(VOS)</target>
        </trans-unit>
        <trans-unit id="07fcbd4e35869ee7c3769699235ad97c3caf7ea4" translate="yes" xml:space="preserve">
          <source>Truth and Falsehood</source>
          <target state="translated">真実と虚実</target>
        </trans-unit>
        <trans-unit id="0ea36a88c9652f7de32e4b8cdc539660f9c8bb67" translate="yes" xml:space="preserve">
          <source>Truth. (&lt;code&gt;PL_sv_yes&lt;/code&gt; ) The value is not needed (and ignored).</source>
          <target state="translated">真実。（ &lt;code&gt;PL_sv_yes&lt;/code&gt; ）値は不要です（無視されます）。</target>
        </trans-unit>
        <trans-unit id="fec0d66775a5a838fdce0113e0fc71a37b212e7d" translate="yes" xml:space="preserve">
          <source>Truth. (&lt;code&gt;PL_sv_yes&lt;/code&gt;) The value is not needed (and ignored).</source>
          <target state="translated">真実。（ &lt;code&gt;PL_sv_yes&lt;/code&gt; ）値は必要ありません（無視されます）。</target>
        </trans-unit>
        <trans-unit id="820aa128934b824418f5ca61678f5828e0a9f3f1" translate="yes" xml:space="preserve">
          <source>Try 'which ld' and 'which ld' (or try 'ar --version' and 'ld --version', which work only for the GNU tools, and will announce themselves to be such), and adjust your PATH so that you are consistently using either the native tools or the GNU tools. After fixing your PATH, you should do 'make distclean' and start all the way from running the Configure since you may have quite a confused situation.</source>
          <target state="translated">which ld' と 'which ld' を試してみてください (あるいは 'ar --version' と 'ld --version' を試してみてください。これらは GNU ツールでのみ動作し、自分自身がそうであるとアナウンスします)。PATHを修正した後は、'make distclean'をして、Configureを実行しているところから始めてください。</target>
        </trans-unit>
        <trans-unit id="98c21aef49a5ddf4f1e39c55f7f2477e1906d688" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;perldoc Amiga::ARexx&lt;/code&gt; for more info.</source>
          <target state="translated">詳細については、 &lt;code&gt;perldoc Amiga::ARexx&lt;/code&gt; をお試しください。</target>
        </trans-unit>
        <trans-unit id="8e033ddf358a130409c1ab5546e94f94b80bcb2f" translate="yes" xml:space="preserve">
          <source>Try &lt;code&gt;perldoc Amiga::Exec&lt;/code&gt; for more info.</source>
          <target state="translated">詳細については、 &lt;code&gt;perldoc Amiga::Exec&lt;/code&gt; をお試しください。</target>
        </trans-unit>
        <trans-unit id="dfec8d0f349c3c42fb9d1815573a589ac82ef522" translate="yes" xml:space="preserve">
          <source>Try and match a closing delimiter bracket. If the bracket was the same species as the last opening bracket, return the substring to that point. If the bracket was mismatched, return an error.</source>
          <target state="translated">閉じた区切り括弧にマッチするかどうか試してみてください。もしブラケットが最後の開始ブラケットと同じ種族であれば、その点までの部分文字列を返します。ブラケットが不一致の場合はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="3534e8ec8243f82da173a0a961f29a6061ccc5a4" translate="yes" xml:space="preserve">
          <source>Try every conceivable way to get hostname</source>
          <target state="translated">ホスト名を取得するために考えられるあらゆる方法を試してみてください。</target>
        </trans-unit>
        <trans-unit id="dfea66ec3b5d472c8a85f9f4143d2c2a2932e7a3" translate="yes" xml:space="preserve">
          <source>Try hard not to exceed 79-columns</source>
          <target state="translated">79カラムを超えないように頑張る</target>
        </trans-unit>
        <trans-unit id="71156f6966e318bbb69b3350da865612c3413590" translate="yes" xml:space="preserve">
          <source>Try keeping around the seekpointer and go there, like this:</source>
          <target state="translated">シークポインターの周りをキープして、こんな感じで行ってみてください。</target>
        </trans-unit>
        <trans-unit id="5ab49ef558819708ac26895c52750c3610705d02" translate="yes" xml:space="preserve">
          <source>Try not to launch headlong into developing your module without spending some time thinking first. A little forethought may save you a vast amount of effort later on.</source>
          <target state="translated">最初に考えることに時間をかけずに、モジュールの開発に突っ込まないようにしてください。少しの先入観が、後になって膨大な労力を節約することになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="66c86b400f1e32f25dbc921f7ed16eeea4ab2376" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;Net::FTP&quot;&gt;Net::FTP&lt;/a&gt;, &lt;a href=&quot;TCP::Client&quot;&gt;TCP::Client&lt;/a&gt;, and &lt;a href=&quot;Net::Telnet&quot;&gt;Net::Telnet&lt;/a&gt; modules (available from CPAN). &lt;a href=&quot;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&quot;&gt;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&lt;/a&gt; will also help for emulating the telnet protocol, but &lt;a href=&quot;Net::Telnet&quot;&gt;Net::Telnet&lt;/a&gt; is quite probably easier to use.</source>
          <target state="translated">&lt;a href=&quot;Net::FTP&quot;&gt;Net :: FTP&lt;/a&gt;、&lt;a href=&quot;TCP::Client&quot;&gt;TCP :: Client&lt;/a&gt;、および&lt;a href=&quot;Net::Telnet&quot;&gt;Net :: Telnet&lt;/a&gt;モジュール（CPANから入手可能）を試してください。&lt;a href=&quot;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&quot;&gt;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&lt;/a&gt;もtelnetプロトコルのエミュレートに役立ちますが、&lt;a href=&quot;Net::Telnet&quot;&gt;Net :: Telnetの方&lt;/a&gt;がおそらく使いやすいでしょう。</target>
        </trans-unit>
        <trans-unit id="1a2b567df2700cceb3e59d9f8a3eb3ca3092a77c" translate="yes" xml:space="preserve">
          <source>Try the &lt;a href=&quot;net/ftp&quot;&gt;Net::FTP&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/TCP::Client&quot;&gt;TCP::Client&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net::Telnet&lt;/a&gt; modules (available from CPAN). &lt;a href=&quot;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&quot;&gt;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&lt;/a&gt; will also help for emulating the telnet protocol, but &lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net::Telnet&lt;/a&gt; is quite probably easier to use.</source>
          <target state="translated">&lt;a href=&quot;net/ftp&quot;&gt;Net :: FTP&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/TCP::Client&quot;&gt;TCP :: Client&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net :: Telnet&lt;/a&gt;モジュール（CPANから入手可能）を試してください。&lt;a href=&quot;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&quot;&gt;http://www.cpan.org/scripts/netstuff/telnet.emul.shar&lt;/a&gt;もtelnetプロトコルのエミュレーションに役立ちますが、&lt;a href=&quot;http://search.cpan.org/perldoc/Net::Telnet&quot;&gt;Net :: Telnetの&lt;/a&gt;ほうがおそらく使いやすいでしょう。</target>
        </trans-unit>
        <trans-unit id="87f2df3af873276d11f18dcdfa6067907516ef82" translate="yes" xml:space="preserve">
          <source>Try the first alternative in the first group 'abd'.</source>
          <target state="translated">最初のグループ「abd」の最初の代替案を試してみてください。</target>
        </trans-unit>
        <trans-unit id="8fdc9fd893f9837a30290ddcdb863de474cd49f7" translate="yes" xml:space="preserve">
          <source>Try the native, UDP socket then UNIX domain socket mechanisms:</source>
          <target state="translated">ネイティブソケット、UDPソケット、UNIXドメインソケットの仕組みを試してみてください。</target>
        </trans-unit>
        <trans-unit id="6a75e271162bdc3d061e3493d3ce114d627fc256" translate="yes" xml:space="preserve">
          <source>Try the resources in &lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlfaq2&quot;&gt;perlfaq2&lt;/a&gt;のリソースを試してください。</target>
        </trans-unit>
        <trans-unit id="aacef041b76d57895de9d7f5cee32482707bd3b3" translate="yes" xml:space="preserve">
          <source>Try to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict qw(...);&lt;/code&gt; ). Remember that you can add &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; strict qw(...);&lt;/code&gt; to individual blocks of code that need less strictness.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;みてください。（または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict qw(...);&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; strict qw(...);&lt;/code&gt; は追加でき&lt;a href=&quot;functions/no&quot;&gt;ない&lt;/a&gt;ことに注意してください。厳密さをあまり必要としないコードの個々のブロックに。</target>
        </trans-unit>
        <trans-unit id="dbe02bedd5bb36eab5b4bbe32b7d4940cf95d2ec" translate="yes" xml:space="preserve">
          <source>Try to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings qw(...);&lt;/code&gt; ). Remember that you can add &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings qw(...);&lt;/code&gt; to individual blocks of code that need less warnings.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;ください。（または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings qw(...);&lt;/code&gt; ）。 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings qw(...);&lt;/code&gt; を追加することはでき&lt;a href=&quot;functions/no&quot;&gt;ません&lt;/a&gt; qw（...）; 警告の少ないコードの個々のブロックに。</target>
        </trans-unit>
        <trans-unit id="38b826b6e348509b8760d8f24eae463b23ce7bf6" translate="yes" xml:space="preserve">
          <source>Try to &lt;code&gt;use strict;&lt;/code&gt; (or &lt;code&gt;use strict qw(...);&lt;/code&gt;). Remember that you can add &lt;code&gt;no strict qw(...);&lt;/code&gt; to individual blocks of code that need less strictness.</source>
          <target state="translated">&lt;code&gt;use strict;&lt;/code&gt; を使用してみてください。（または &lt;code&gt;use strict qw(...);&lt;/code&gt; ）。 &lt;code&gt;no strict qw(...);&lt;/code&gt; 追加できないことを忘れないでください。厳密さをあまり必要としないコードの個々のブロックに。</target>
        </trans-unit>
        <trans-unit id="2bf7f5a326028f0c812e9c509d8082b45d0e5a3e" translate="yes" xml:space="preserve">
          <source>Try to &lt;code&gt;use warnings;&lt;/code&gt; (or &lt;code&gt;use warnings qw(...);&lt;/code&gt;). Remember that you can add &lt;code&gt;no warnings qw(...);&lt;/code&gt; to individual blocks of code that need less warnings.</source>
          <target state="translated">&lt;code&gt;use warnings;&lt;/code&gt; を使用してみてください。（または &lt;code&gt;use warnings qw(...);&lt;/code&gt; ）。 &lt;code&gt;no warnings qw(...);&lt;/code&gt; を追加できないことを忘れないでくださいqw（...）; 警告の必要が少ないコードの個々のブロックに。</target>
        </trans-unit>
        <trans-unit id="1a50d23e31ca789a858a654feff08b918836c974" translate="yes" xml:space="preserve">
          <source>Try to color output. See &lt;a href=&quot;../tap/formatter/base#new&quot;&gt;new in TAP::Formatter::Base&lt;/a&gt;.</source>
          <target state="translated">カラー出力してみてください。&lt;a href=&quot;../tap/formatter/base#new&quot;&gt;TAP :: Formatter :: Baseの新機能を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="56802a31d085c41de140ede22328a67086473d5e" translate="yes" xml:space="preserve">
          <source>Try to color output. See &lt;a href=&quot;TAP::Formatter::Base#new&quot;&gt;&quot;new&quot; in TAP::Formatter::Base&lt;/a&gt;.</source>
          <target state="translated">出力に色を付けてみてください。&lt;a href=&quot;TAP::Formatter::Base#new&quot;&gt;TAP :: Formatter :: Baseの「new」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e97a54a5e20ef4c3c124d4963b017c39c1dad7b" translate="yes" xml:space="preserve">
          <source>Try to design the new module to be easy to extend and reuse.</source>
          <target state="translated">新しいモジュールを拡張して再利用しやすいように設計してみてください。</target>
        </trans-unit>
        <trans-unit id="220ea4d529b6fa37d1fa97bbb19f2fed77ce5e5b" translate="yes" xml:space="preserve">
          <source>Try to determine name of extension being built. We begin with the name of the current directory. Since VMS filenames are case-insensitive, however, we look for a</source>
          <target state="translated">構築されている拡張機能の名前を決定してみます。まず、カレントディレクトリの名前から始めます。しかし、VMS のファイル名は大文字小文字を区別しないので、私たちが探すのは</target>
        </trans-unit>
        <trans-unit id="909a91fc6d3b48263691b246eef6c09eb4ec3bfc" translate="yes" xml:space="preserve">
          <source>Try to determine the width of the screen and the bold and underline sequences for the terminal from termcap, and use that information in formatting the output. Output will be wrapped at two columns less than the width of your terminal device. Using this option requires that your system have a termcap file somewhere where Term::Cap can find it and requires that your system support termios. With this option, the output of &lt;b&gt;pod2text&lt;/b&gt; will contain terminal control sequences for your current terminal type.</source>
          <target state="translated">画面の幅と、termcapからの端末の太字および下線シーケンスを判別し、その情報を使用して出力をフォーマットしてください。出力は、端末デバイスの幅よりも2列少ない幅で折り返されます。このオプションを使用するには、システムにtermcapファイルがあり、Term :: Capがそれを見つけて、システムがtermiosをサポートしている必要があります。このオプションを&lt;b&gt;使用&lt;/b&gt;すると、&lt;b&gt;pod2text&lt;/b&gt;の出力には、現在の端末タイプの端末制御シーケンスが含まれます。</target>
        </trans-unit>
        <trans-unit id="08f15a05901602892a511e670ab4aa0307df4226" translate="yes" xml:space="preserve">
          <source>Try to document your code and use Pod formatting in a consistent way. Here are commonly expected conventions:</source>
          <target state="translated">コードを文書化し、一貫した方法でPodフォーマットを使用するようにしてください。以下に、一般的に想定される規約を示します。</target>
        </trans-unit>
        <trans-unit id="c88c728349f5a2409f402906caa2d933f74c0865" translate="yes" xml:space="preserve">
          <source>Try to match a quote or quotelike operator. If found, call &lt;code&gt;extract_quotelike&lt;/code&gt; to eat it. If &lt;code&gt;extract_quotelike&lt;/code&gt; fails, return the error it returned. Otherwise go back to step 1.</source>
          <target state="translated">引用符またはquotelike演算子を照合してください。見つかった場合は、 &lt;code&gt;extract_quotelike&lt;/code&gt; を呼び出して食べます。場合 &lt;code&gt;extract_quotelike&lt;/code&gt; が失敗し、それが返されたエラーを返します。それ以外の場合は、手順1に戻ります。</target>
        </trans-unit>
        <trans-unit id="fed009e07cf40a3bfaccb23b101b1df3951ecefd" translate="yes" xml:space="preserve">
          <source>Try to match an opening delimiter bracket. If found, call &lt;code&gt;extract_codeblock&lt;/code&gt; recursively to eat the embedded block. If the recursive call fails, return an error. Otherwise, go back to step 1.</source>
          <target state="translated">開始区切りブラケットと一致するようにしてください。見つかった場合は、 &lt;code&gt;extract_codeblock&lt;/code&gt; を再帰的に呼び出して、埋め込まれたブロックを食べます。再帰呼び出しが失敗した場合は、エラーを返します。それ以外の場合は、手順1に戻ります。</target>
        </trans-unit>
        <trans-unit id="1bf160ae95bc79040defdb4258d5fad8caa20a29" translate="yes" xml:space="preserve">
          <source>Try to obtain the latest version of the Windows SDK. Sometimes these packages contain a particular Windows OS version in their name, but actually work on other OS versions too. For example, the &quot;Windows Server 2003 R2 Platform SDK&quot; also runs on Windows XP SP2 and Windows 2000.</source>
          <target state="translated">Windows SDKの最新バージョンを入手するようにしてください。これらのパッケージには、名前に特定のWindows OSのバージョンが含まれていることがありますが、実際には他のOSのバージョンでも動作することがあります。例えば、「Windows Server 2003 R2 Platform SDK」は、Windows XP SP2やWindows 2000でも動作します。</target>
        </trans-unit>
        <trans-unit id="962ca701cc2570a663505435d963dc55f234f4d9" translate="yes" xml:space="preserve">
          <source>Trying to create a new child with a previous child still active (i.e., &lt;code&gt;finalize&lt;/code&gt; not called) will &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">以前の子をアクティブにしたままで新しい子を作成しようとすると（つまり、 &lt;code&gt;finalize&lt;/code&gt; が呼び出されない）、 &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e0c592184c4820418323672dd4337df40c4098b0" translate="yes" xml:space="preserve">
          <source>Trying to do too much</source>
          <target state="translated">やりすぎたことをしようとする</target>
        </trans-unit>
        <trans-unit id="44d272c0c6193575553012dfbe62f22573eeb82f" translate="yes" xml:space="preserve">
          <source>Trying to run a test when you have an open child will also &lt;code&gt;croak&lt;/code&gt; and cause the test suite to fail.</source>
          <target state="translated">開いている子があるときにテストを実行しようとすると、 &lt;code&gt;croak&lt;/code&gt; が出てテストスイートが失敗します。</target>
        </trans-unit>
        <trans-unit id="e1251ee8a07b3dea6c343e31961e5913e11f0ce3" translate="yes" xml:space="preserve">
          <source>Tune the internal settings for the deflate object &lt;code&gt;$d&lt;/code&gt; . This option is only available if you are running zlib 1.2.2.3 or better.</source>
          <target state="translated">deflateオブジェクト &lt;code&gt;$d&lt;/code&gt; の内部設定を調整します。このオプションは、zlib 1.2.2.3以降を実行している場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="3896985029531ee0a442a6eafffd21b16e99bab0" translate="yes" xml:space="preserve">
          <source>Tune the internal settings for the deflate object &lt;code&gt;$d&lt;/code&gt;. This option is only available if you are running zlib 1.2.2.3 or better.</source>
          <target state="translated">deflateオブジェクト &lt;code&gt;$d&lt;/code&gt; の内部設定を調整します。このオプションは、zlib1.2.2.3以降を実行している場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="008eee580921a65a5e935994d388ebe43c6df0cd" translate="yes" xml:space="preserve">
          <source>Tuning the way RESOLVE_SYMLINK will works</source>
          <target state="translated">RESOLVE_SYMLINKの動作方法を調整する</target>
        </trans-unit>
        <trans-unit id="8c3f4c8cc5ca57e1d0107a8c0347eb3646189c97" translate="yes" xml:space="preserve">
          <source>Tunnelling &lt;code&gt;https&lt;/code&gt; over an &lt;code&gt;http&lt;/code&gt; proxy using the CONNECT method is supported. If your proxy uses &lt;code&gt;https&lt;/code&gt; itself, you can not tunnel &lt;code&gt;https&lt;/code&gt; over it.</source>
          <target state="translated">CONNECTメソッドを使用した &lt;code&gt;http&lt;/code&gt; プロキシ経由の &lt;code&gt;https&lt;/code&gt; のトンネリングがサポートされています。プロキシが &lt;code&gt;https&lt;/code&gt; 自体を使用している場合、 &lt;code&gt;https&lt;/code&gt; をトンネリングすることはできません。</target>
        </trans-unit>
        <trans-unit id="d7153e6702b4ea48c7c0d01affdef0e1b39fd6dc" translate="yes" xml:space="preserve">
          <source>Turkey</source>
          <target state="translated">Turkey</target>
        </trans-unit>
        <trans-unit id="f7db0bf3a9c02aa40e34f07d8431257fcf327327" translate="yes" xml:space="preserve">
          <source>Turn =head1 directives into links pointing to the top of the HTML file.</source>
          <target state="translated">head1ディレクティブをHTMLファイルの先頭を指すリンクに変えます。</target>
        </trans-unit>
        <trans-unit id="00eb812c53d2b2fc577cde21da51d4b0a2dbeaba" translate="yes" xml:space="preserve">
          <source>Turn IPC off</source>
          <target state="translated">IPCをオフにする</target>
        </trans-unit>
        <trans-unit id="33f87dc87ea378d835e56e5bfd248ea1a352c832" translate="yes" xml:space="preserve">
          <source>Turn Pod into XML</source>
          <target state="translated">PodをXMLに変換</target>
        </trans-unit>
        <trans-unit id="8e7cc74dfcc71c13798fc4a8a0bda3cb164ed4c1" translate="yes" xml:space="preserve">
          <source>Turn Pod::Simple events into method calls</source>
          <target state="translated">Pod::Simpleイベントをメソッドコールに変える</target>
        </trans-unit>
        <trans-unit id="87a4a4a475f00352f77a10d3ec1fd9eee936c4ee" translate="yes" xml:space="preserve">
          <source>Turn off Apple tar's tendency to copy resource forks as &quot;._foo&quot; files.</source>
          <target state="translated">Apple tar がリソースフォークを &quot;._foo&quot; ファイルとしてコピーする傾向をオフにします。</target>
        </trans-unit>
        <trans-unit id="002da87886e80eee99a8ca6dc4e3fe4cabdcf032" translate="yes" xml:space="preserve">
          <source>Turn off CPAN.pm's attempts to lock anything. You should be careful with this since you might end up with multiple scripts trying to muck in the same directory. This isn't so much of a concern if you're loading a special config with &lt;code&gt;-j&lt;/code&gt;, and that config sets up its own work directories.</source>
          <target state="translated">CPAN.pmが何かをロックしようとする試みをオフにします。複数のスクリプトが同じディレクトリをいじろうとする可能性があるため、これには注意する必要があります。 &lt;code&gt;-j&lt;/code&gt; を使用して特別な構成をロードし、その構成が独自の作業ディレクトリを設定する場合、これはそれほど問題にはなりません。</target>
        </trans-unit>
        <trans-unit id="75c822c937f705b4f59deefb9b7306dfc70d6869" translate="yes" xml:space="preserve">
          <source>Turn off IPC polling.</source>
          <target state="translated">IPCポーリングをオフにします。</target>
        </trans-unit>
        <trans-unit id="a5f985f0fcda86b1c258609df3d266b43ed8ce4a" translate="yes" xml:space="preserve">
          <source>Turn on IPC for threading or forking support.</source>
          <target state="translated">スレッディングまたはフォークサポートのIPCをオンにします。</target>
        </trans-unit>
        <trans-unit id="48d8224908b27731eb611ee5800a332f08bd6efe" translate="yes" xml:space="preserve">
          <source>Turn on colour in Test::Builder::Tester</source>
          <target state="translated">Test::Builder::Tester で色をオンにする</target>
        </trans-unit>
        <trans-unit id="33bdb8453820e783c9ed80ead4da0eab3e622342" translate="yes" xml:space="preserve">
          <source>Turn on cpan warnings. This checks various things, like directory permissions, and tells you about problems you might have.</source>
          <target state="translated">cpan の警告をオンにします。これはディレクトリのパーミッションのような様々なものをチェックし、問題があるかもしれないことを教えてくれます。</target>
        </trans-unit>
        <trans-unit id="3aaaf6cc176020f3991943f2032de33eccbdb645" translate="yes" xml:space="preserve">
          <source>Turn on debugging messages.</source>
          <target state="translated">デバッグメッセージをオンにします。</target>
        </trans-unit>
        <trans-unit id="987617e4099bb6d10ab491d6ac24dec67dd616d3" translate="yes" xml:space="preserve">
          <source>Turn on polling. This will cull events from other processes and threads every time a context is created.</source>
          <target state="translated">ポーリングをオンにします。これにより、コンテキストが作成されるたびに他のプロセスやスレッドからのイベントがカリングされます。</target>
        </trans-unit>
        <trans-unit id="c5afa3624933dbb94708b864157bd75149a4bc45" translate="yes" xml:space="preserve">
          <source>Turn on the UTF-8 status of an SV (the data is not changed, just the flag). Do not use frivolously.</source>
          <target state="translated">SV の UTF-8 状態を ON にする(データは変更せず、フラグだけ)。軽薄に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="58ffd65543f8495b744e9f3f6c44eb3bd2d31977" translate="yes" xml:space="preserve">
          <source>Turn on the escaping of characters as described in the SPACES AND TABS section.</source>
          <target state="translated">スペースとタブのセクションで説明されているように、文字のエスケープをオンにします。</target>
        </trans-unit>
        <trans-unit id="9903e627171cb3011421fef7af4a686d6ebc3e08" translate="yes" xml:space="preserve">
          <source>Turn on/off printing of warnings. Repeating &lt;b&gt;-warnings&lt;/b&gt; increases the warning level, i.e. more warnings are printed. Currently increasing to level two causes flagging of unescaped &quot;&amp;lt;,&amp;gt;&quot; characters.</source>
          <target state="translated">警告の印刷をオン/オフにします。&lt;b&gt;-warningsを&lt;/b&gt;繰り返すと、警告レベルが上がります。つまり、より多くの警告が出力されます。現在レベル2に増加すると、エスケープされていない「&amp;lt;、&amp;gt;」文字にフラグが立てられます。</target>
        </trans-unit>
        <trans-unit id="d7dd646019946f4186b2c9415767806d113e6794" translate="yes" xml:space="preserve">
          <source>Turn warnings on/off.</source>
          <target state="translated">警告をオン/オフにします。</target>
        </trans-unit>
        <trans-unit id="4c628137dd54154b5661d62a2c76528177ce2c0e" translate="yes" xml:space="preserve">
          <source>Turning on one of the character set flags with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re&lt;/code&gt; takes precedence over the &lt;code&gt;locale&lt;/code&gt; pragma and the 'unicode_strings' &lt;code&gt;feature&lt;/code&gt; , for regular expressions. Turning off one of these flags when it is active reverts to the behaviour specified by whatever other pragmata are in scope. For example:</source>
          <target state="translated">正規表現の &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re&lt;/code&gt; 、use reで文字セットフラグの1つをオンにすると、 &lt;code&gt;locale&lt;/code&gt; プラグマや 'unicode_strings' &lt;code&gt;feature&lt;/code&gt; よりも優先されます。これらのフラグの1つがアクティブなときにオフにすると、スコープ内の他のプラグマによって指定された動作に戻ります。例えば：</target>
        </trans-unit>
        <trans-unit id="bab3f5ad74d31e2186209289e3cd6bd581941efe" translate="yes" xml:space="preserve">
          <source>Turning on one of the character set flags with &lt;code&gt;use re&lt;/code&gt; takes precedence over the &lt;code&gt;locale&lt;/code&gt; pragma and the 'unicode_strings' &lt;code&gt;feature&lt;/code&gt;, for regular expressions. Turning off one of these flags when it is active reverts to the behaviour specified by whatever other pragmata are in scope. For example:</source>
          <target state="translated">正規表現の &lt;code&gt;use re&lt;/code&gt; 、use reを使用して文字セットフラグの1つをオンにすると、 &lt;code&gt;locale&lt;/code&gt; プラグマおよび「unicode_strings」 &lt;code&gt;feature&lt;/code&gt; よりも優先されます。アクティブなときにこれらのフラグの1つをオフにすると、スコープ内にある他のプラグマによって指定された動作に戻ります。例えば：</target>
        </trans-unit>
        <trans-unit id="1dac2f62695f453fd439059f0a117cf373d1f773" translate="yes" xml:space="preserve">
          <source>Turns every &lt;code&gt;head1&lt;/code&gt; heading into a link back to the top of the page. By default, no backlinks are generated.</source>
          <target state="translated">すべての &lt;code&gt;head1&lt;/code&gt; 見出しをページの上部へのリンクに変換します。デフォルトでは、バックリンクは生成されません。</target>
        </trans-unit>
        <trans-unit id="488b4a24fda23c677bfd758dfeda4e2b3e28ea5b" translate="yes" xml:space="preserve">
          <source>Turns on all &quot;extra&quot; debugging options.</source>
          <target state="translated">すべての「追加」デバッグオプションをオンにします。</target>
        </trans-unit>
        <trans-unit id="8a6abc6af101e3e68b329eb351f149732ea8c3d9" translate="yes" xml:space="preserve">
          <source>Turns on all compile related debug options.</source>
          <target state="translated">コンパイル関連のデバッグオプションをすべてオンにします。</target>
        </trans-unit>
        <trans-unit id="377f42734b94211c01fa848b2645c0c159ecedcd" translate="yes" xml:space="preserve">
          <source>Turns on all execute related debug options.</source>
          <target state="translated">実行に関連するすべてのデバッグオプションをオンにします。</target>
        </trans-unit>
        <trans-unit id="16cf0e466a4f6fe0b3456839377f934eda051d4e" translate="yes" xml:space="preserve">
          <source>Turns on all non-extra compile related debug options.</source>
          <target state="translated">コンパイル関連以外のデバッグオプションをすべてオンにします。</target>
        </trans-unit>
        <trans-unit id="bb0c3643227c9fa0f255763a21a1f9559b3e9dd1" translate="yes" xml:space="preserve">
          <source>Turns on all non-extra execute related debug options.</source>
          <target state="translated">非実行関連のデバッグオプションをすべてオンにします。</target>
        </trans-unit>
        <trans-unit id="cf78d64b4c15f8d89c3f09aea595a015508f3471" translate="yes" xml:space="preserve">
          <source>Turns on autoflush, print ARGS and then restores the autoflush status of the &lt;code&gt;IO::Handle&lt;/code&gt; object. Returns the return value from print.</source>
          <target state="translated">自動フラッシュをオンにし、ARGSを出力してから、 &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクトの自動フラッシュのステータスを復元します。printからの戻り値を返します。</target>
        </trans-unit>
        <trans-unit id="2d1676fcc040bdf1deeab307eee1f9a1faa4d87a" translate="yes" xml:space="preserve">
          <source>Turns on debug output related to the process of parsing the pattern.</source>
          <target state="translated">パターンの解析処理に関連するデバッグ出力をオンにします。</target>
        </trans-unit>
        <trans-unit id="80ae89d796a9f5474c9cf55351133039b045499c" translate="yes" xml:space="preserve">
          <source>Turns on debugging</source>
          <target state="translated">デバッグをオンにする</target>
        </trans-unit>
        <trans-unit id="0b71618ab3c580ced56e12be5afa8ca78d10b841" translate="yes" xml:space="preserve">
          <source>Turns on debugging of the main matching loop.</source>
          <target state="translated">メインのマッチングループのデバッグをオンにします。</target>
        </trans-unit>
        <trans-unit id="821dfaade517bc8af20717058964e6e45387b304" translate="yes" xml:space="preserve">
          <source>Turns on the magical status of an SV. See &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVの魔法ステータスをオンにします。 &lt;code&gt;&lt;a href=&quot;#sv_magic&quot;&gt;&quot;sv_magic&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="0d12b512bcc17c858f7f78847cab2c7f6461efd3" translate="yes" xml:space="preserve">
          <source>Turns on the magical status of an SV. See &lt;code&gt;sv_magic&lt;/code&gt; .</source>
          <target state="translated">SVの魔法のステータスをオンにします。 &lt;code&gt;sv_magic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5ed69f1e400ca234d376650a653b6521d5c1651" translate="yes" xml:space="preserve">
          <source>Turns the @metadata_pairs into YAML.</source>
          <target state="translated">metadata_pairsをYAMLに変換します。</target>
        </trans-unit>
        <trans-unit id="606c2af8d67a4d7dc7224ecdbb198b95627a3d18" translate="yes" xml:space="preserve">
          <source>Tutorial on making a new module.</source>
          <target state="translated">新しいモジュールを作るためのチュートリアルです。</target>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="4106aa6fe38782986e71b6df351f9eed9adc1100" translate="yes" xml:space="preserve">
          <source>Tutorials, end-user documentation, research papers, FAQs etc are not appropriate in a module's main documentation. If you really want to write these, include them as sub-documents such as &lt;code&gt;My::Module::Tutorial&lt;/code&gt; or &lt;code&gt;My::Module::FAQ&lt;/code&gt; and provide a link in the SEE ALSO section of the main documentation.</source>
          <target state="translated">チュートリアル、エンドユーザー向けドキュメント、研究論文、FAQなどは、モジュールのメインドキュメントには適していません。これらを実際に記述したい場合は、 &lt;code&gt;My::Module::Tutorial&lt;/code&gt; や &lt;code&gt;My::Module::FAQ&lt;/code&gt; などのサブドキュメントとしてそれらを含め、メインドキュメントの「参照」セクションにリンクを提供してください。</target>
        </trans-unit>
        <trans-unit id="d4f6fcebc83fe08414440f2690253120c9bf99c3" translate="yes" xml:space="preserve">
          <source>Tweak the style of B::Deparse's output. The letters should follow directly after the 's', with no space or punctuation. The following options are available:</source>
          <target state="translated">B::Deparse の出力のスタイルを微調整する。文字は's'の直後にスペースや句読点を入れずに、's'の直後に続くようにします。以下のオプションが利用可能である。</target>
        </trans-unit>
        <trans-unit id="8b77b783948e5ce8fbd237831d47a3e2aa25c8cf" translate="yes" xml:space="preserve">
          <source>Two additional extensions by Andreas Kaiser, &lt;code&gt;OS2::UPM&lt;/code&gt; , and &lt;code&gt;OS2::FTP&lt;/code&gt; , are included into &lt;code&gt;ILYAZ&lt;/code&gt; directory, mirrored on CPAN. Other OS/2-related extensions are available too.</source>
          <target state="translated">Andreas Kaiserによる2つの追加拡張機能、 &lt;code&gt;OS2::UPM&lt;/code&gt; と &lt;code&gt;OS2::FTP&lt;/code&gt; 、CPANにミラーリングされた &lt;code&gt;ILYAZ&lt;/code&gt; ディレクトリに含まれています。他のOS / 2関連の拡張機能も利用できます。</target>
        </trans-unit>
        <trans-unit id="e1e1c471607b1953c35055b694d94ae2115e7490" translate="yes" xml:space="preserve">
          <source>Two additional extensions by Andreas Kaiser, &lt;code&gt;OS2::UPM&lt;/code&gt;, and &lt;code&gt;OS2::FTP&lt;/code&gt;, are included into &lt;code&gt;ILYAZ&lt;/code&gt; directory, mirrored on CPAN. Other OS/2-related extensions are available too.</source>
          <target state="translated">Andreas Kaiserによる2つの追加拡張機能、 &lt;code&gt;OS2::UPM&lt;/code&gt; と &lt;code&gt;OS2::FTP&lt;/code&gt; 、CPANにミラーリングされた &lt;code&gt;ILYAZ&lt;/code&gt; ディレクトリに含まれています。他のOS / 2関連の拡張機能も利用できます。</target>
        </trans-unit>
        <trans-unit id="225de66ed8612f5eaedcbe3517b9b8a030dd1dfb" translate="yes" xml:space="preserve">
          <source>Two additional fields &lt;code&gt;free&lt;/code&gt; , &lt;code&gt;used&lt;/code&gt; contain array references which provide per-bucket count of free and used chunks. Two other fields &lt;code&gt;mem_size&lt;/code&gt; , &lt;code&gt;available_size&lt;/code&gt; contain array references which provide the information about the allocated size and usable size of chunks in each bucket. Again, see &lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;Using $ENV{PERL_DEBUG_MSTATS} in perldebguts&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;used&lt;/code&gt; 2つの追加フィールド &lt;code&gt;free&lt;/code&gt; には、空きチャンクと使用済みチャンクのバケットごとのカウントを提供する配列参照が含まれます。他の2つのフィールド &lt;code&gt;mem_size&lt;/code&gt; 、 &lt;code&gt;available_size&lt;/code&gt; には、各バケット内のチャンクの割り当て済みサイズと使用可能なサイズに関する情報を提供する配列参照が含まれています。繰り返しますが、詳細については&lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;perldebgutsでの$ ENV {PERL_DEBUG_MSTATS}の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="645e14dd280baf021efadb33e4b6285cfb158d60" translate="yes" xml:space="preserve">
          <source>Two additional fields &lt;code&gt;free&lt;/code&gt;, &lt;code&gt;used&lt;/code&gt; contain array references which provide per-bucket count of free and used chunks. Two other fields &lt;code&gt;mem_size&lt;/code&gt;, &lt;code&gt;available_size&lt;/code&gt; contain array references which provide the information about the allocated size and usable size of chunks in each bucket. Again, see &lt;a href=&quot;perldebguts#Using-%24ENV%7BPERL_DEBUG_MSTATS%7D&quot;&gt;&quot;Using $ENV{PERL_DEBUG_MSTATS}&quot; in perldebguts&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;free&lt;/code&gt; 、 &lt;code&gt;used&lt;/code&gt; の2つの追加フィールドには、空きチャンクと使用済みチャンクのバケットごとの数を提供する配列参照が含まれています。他の2つのフィールド &lt;code&gt;mem_size&lt;/code&gt; 、 &lt;code&gt;available_size&lt;/code&gt; には、各バケットに割り当てられたサイズとチャンクの使用可能なサイズに関する情報を提供する配列参照が含まれています。繰り返しになりますが、詳細については&lt;a href=&quot;perldebguts#Using-%24ENV%7BPERL_DEBUG_MSTATS%7D&quot;&gt;、perldebgutsの「$ ENV {PERL_DEBUG_MSTATS}の使用」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="959e1dbe5c03b6bf54bd2c7c42f5c06de670abcf" translate="yes" xml:space="preserve">
          <source>Two arrays smartmatch if each element in the first array smartmatches (that is, is &quot;in&quot;) the corresponding element in the second array, recursively.</source>
          <target state="translated">2 つの配列は,1 番目の配列の各要素が,2 番目の配列の対応する要素と再帰的にスマートマッチする(つまり,「中」にある)場合にスマートマッチします.</target>
        </trans-unit>
        <trans-unit id="ef9d289482c44cedd928e08a539e06da234c1ea2" translate="yes" xml:space="preserve">
          <source>Two directories</source>
          <target state="translated">2つのディレクトリ</target>
        </trans-unit>
        <trans-unit id="4932b4ce84c4a3c76d97d8ddc1677ad9583f731a" translate="yes" xml:space="preserve">
          <source>Two exceptions are fseek() and ftell(). 32-bit applications should use fseeko(3C) and ftello(3C). These will get automatically mapped to fseeko64() and ftello64().</source>
          <target state="translated">2 つの例外は fseek()と ftell()です。32 ビットアプリケーションでは fseeko(3C)と ftello(3C)を使用する必要があります。これらは自動的に fseeko64()および ftello64()にマップされます。</target>
        </trans-unit>
        <trans-unit id="59e6099a51676c8b357d47058d648615908e9535" translate="yes" xml:space="preserve">
          <source>Two functions are provided by</source>
          <target state="translated">2つの機能は、以下のように提供されています。</target>
        </trans-unit>
        <trans-unit id="362495d14b1f3b1a8e9077a2b6d2d038307cf755" translate="yes" xml:space="preserve">
          <source>Two functions are provided to perform in-memory compression/uncompression of RFC 1950 data streams. They are called &lt;code&gt;compress&lt;/code&gt; and &lt;code&gt;uncompress&lt;/code&gt; .</source>
          <target state="translated">RFC 1950データストリームのメモリ内圧縮/圧縮解除を実行する2つの関数が提供されています。それらは、 &lt;code&gt;compress&lt;/code&gt; および &lt;code&gt;uncompress&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="60a9bef4c585c40271adbc6700cd51119d598e56" translate="yes" xml:space="preserve">
          <source>Two functions are provided to perform in-memory compression/uncompression of RFC 1950 data streams. They are called &lt;code&gt;compress&lt;/code&gt; and &lt;code&gt;uncompress&lt;/code&gt;.</source>
          <target state="translated">RFC1950データストリームのメモリ内圧縮/解凍を実行するために2つの関数が提供されています。それらは &lt;code&gt;compress&lt;/code&gt; および &lt;code&gt;uncompress&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a1fae0daa00d9847553b4c2af0e0bfcf15f43ad2" translate="yes" xml:space="preserve">
          <source>Two hexadecimal numbers separated by horizontal whitespace (space or tabular characters) denoting a range of code points to include.</source>
          <target state="translated">含むべきコードポイントの範囲を示す水平方向の空白(スペースまたは表形式の文字)で区切られた2つの16進数。</target>
        </trans-unit>
        <trans-unit id="7fe7068b60f3e31f3d2f257534aa6f46077e516b" translate="yes" xml:space="preserve">
          <source>Two hexadecimal numbers separated by horizontal whitespace (space or tabular characters) denoting a range of code points to include. The second number must not be smaller than the first.</source>
          <target state="translated">含めるべきコードポイントの範囲を示す横方向の空白(スペースまたは表形式の文字)で区切られた2つの16進数。2 番目の数値は 1 番目の数値より小さくしてはいけません。</target>
        </trans-unit>
        <trans-unit id="fc8d21d4a74e99aae1a5fc40b83d3fff90123b23" translate="yes" xml:space="preserve">
          <source>Two nested identical markup commands have been found. Generally this does not make sense.</source>
          <target state="translated">入れ子になった同一のマークアップコマンドが2つ見つかりました。一般的にこれは意味がありません。</target>
        </trans-unit>
        <trans-unit id="5e76b53030582383f7d551a5e77c668c449dbb3b" translate="yes" xml:space="preserve">
          <source>Two of the codes specified by the standard (XTS which is reserved for testing purposes and XXX which is for transactions where no currency is involved) are omitted.</source>
          <target state="translated">規格で規定されているコードのうち、2つのコード(試験用に予約されているXTSと通貨が関係しない取引用のXXX)を省略しています。</target>
        </trans-unit>
        <trans-unit id="a1d006aec19b5d26f771c4cb3b1aa7d14cd4a562" translate="yes" xml:space="preserve">
          <source>Two or more suspects remain</source>
          <target state="translated">二人以上の容疑者が残っている</target>
        </trans-unit>
        <trans-unit id="069f392f8b693bf3f912fa721edb551769786910" translate="yes" xml:space="preserve">
          <source>Two other &quot;encapsulation&quot; macros are the PERL_GLOBAL_STRUCT and PERL_GLOBAL_STRUCT_PRIVATE (the latter turns on the former, and the former turns on MULTIPLICITY.) The PERL_GLOBAL_STRUCT causes all the internal variables of Perl to be wrapped inside a single global struct, struct perl_vars, accessible as (globals) &amp;amp;PL_Vars or PL_VarsPtr or the function Perl_GetVars(). The PERL_GLOBAL_STRUCT_PRIVATE goes one step further, there is still a single struct (allocated in main() either from heap or from stack) but there are no global data symbols pointing to it. In either case the global struct should be initialized as the very first thing in main() using Perl_init_global_struct() and correspondingly tear it down after perl_free() using Perl_free_global_struct(), please see</source>
          <target state="translated">他の2つの「カプセル化」マクロは、PERL_GLOBAL_STRUCTとPERL_GLOBAL_STRUCT_PRIVATEです（後者は前者をオンにし、前者はMULTIPLICITYをオンにします）。 （グローバル）＆PL_VarsまたはPL_VarsPtrまたは関数Perl_GetVars（）。 PERL_GLOBAL_STRUCT_PRIVATEはさらに一歩進んで、単一の構造体（main（）でヒープまたはスタックから割り当てられます）がまだありますが、それを指すグローバルデータシンボルはありません。どちらの場合も、グローバル構造体は、Perl_init_global_struct（）を使用してmain（）の一番最初に初期化する必要があり、Perl_free_global_struct（）を使用してperl_free（）の後にそれに応じて破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e4d897b2c15b7e4e4ca9fbaec8aab25f6b14e93" translate="yes" xml:space="preserve">
          <source>Two possible uses (besides ignoring the property) come to mind. A singleton class could be implemented this using the generic object. If necessary, an &lt;code&gt;init()&lt;/code&gt; method could die or ignore calls with actual objects (references), so only the generic object will ever exist.</source>
          <target state="translated">（プロパティを無視する以外に）2つの可能な使用法が思い浮かびます。シングルトンクラスは、汎用オブジェクトを使用してこれを実装できます。必要に応じて、 &lt;code&gt;init()&lt;/code&gt; メソッドは、実際のオブジェクト（参照）による呼び出しを無効にするか無視することができるため、汎用オブジェクトのみが存在します。</target>
        </trans-unit>
        <trans-unit id="b02b6a9a4575d62354db7ec75686a98545f9466d" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional &lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt;&lt;code&gt;flock&lt;/code&gt;&lt;/a&gt; semantics are that it waits indefinitely until the lock is granted, and that its locks are &lt;b&gt;merely advisory&lt;/b&gt;. Such discretionary locks are more flexible, but offer fewer guarantees. This means that programs that do not also use &lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt;&lt;code&gt;flock&lt;/code&gt;&lt;/a&gt; may modify files locked with &lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt;&lt;code&gt;flock&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;, your port's specific documentation, and your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (But if you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">2つの潜在的に自明ではないが従来の&lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt; &lt;code&gt;flock&lt;/code&gt; &lt;/a&gt;セマンティクスは、ロックが付与されるまで無期限に待機することと、そのロックは&lt;b&gt;単なる助言であるということ&lt;/b&gt;です。このような任意のロックはより柔軟ですが、保証は少なくなります。これは、&lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt; &lt;code&gt;flock&lt;/code&gt; &lt;/a&gt;も使用しないプログラムが、&lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt; &lt;code&gt;flock&lt;/code&gt; で&lt;/a&gt;ロックされたファイルを変更する可能性があることを意味します。&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照してください、ポート固有のドキュメント、および詳細についてはシステム固有のローカルマンページ。ポータブルプログラムを作成している場合は、従来の動作を想定するのが最善です。（しかし、そうでない場合は、いつものように、自分のシステムの特異性（「機能」と呼ばれることもあります）について完全に自由に書く必要があります。移植性の懸念への怠惰な順守が仕事の妨げになることはありません。）</target>
        </trans-unit>
        <trans-unit id="70abff015732d480e204353f739476e826fe7dc6" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; semantics are that it waits indefinitely until the lock is granted, and that its locks are &lt;b&gt;merely advisory&lt;/b&gt;. Such discretionary locks are more flexible, but offer fewer guarantees. This means that programs that do not also use &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; may modify files locked with &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt;, your port's specific documentation, and your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (But if you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">2つの潜在的に自明ではないが従来の &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; セマンティクスは、ロックが許可されるまで無期限に待機することと、そのロックは&lt;b&gt;単なる&lt;/b&gt;通知に&lt;b&gt;過ぎないこと&lt;/b&gt;です。このような任意のロックはより柔軟ですが、保証は少なくなります。つまり、 &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; を使用しないプログラムは、 &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; でロックされたファイルを変更する可能性があります。&lt;a href=&quot;../perlport&quot;&gt;perlportを&lt;/a&gt;参照、ポート固有のドキュメント、詳細についてはシステム固有のローカルマンページをご覧ください。移植性のあるプログラムを作成している場合は、従来の動作を想定するのが最善です。 （ただし、そうでない場合は、常に独自のシステムの特異性（「機能」と呼ばれることもあります）を書くのに完全に自由に感じる必要があります。移植性の問題への奴隷の固執は、仕事を遂行する上で邪魔になってはなりません。）</target>
        </trans-unit>
        <trans-unit id="3c9f59ec6423987c8c2fe5d0858f160205e3fc59" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; semantics are that it waits indefinitely until the lock is granted, and that its locks are &lt;b&gt;merely advisory&lt;/b&gt;. Such discretionary locks are more flexible, but offer fewer guarantees. This means that programs that do not also use &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; may modify files locked with &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt;. See &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;, your port's specific documentation, and your system-specific local manpages for details. It's best to assume traditional behavior if you're writing portable programs. (But if you're not, you should as always feel perfectly free to write for your own system's idiosyncrasies (sometimes called &quot;features&quot;). Slavish adherence to portability concerns shouldn't get in the way of your getting your job done.)</source>
          <target state="translated">2つの潜在的に自明ではないが従来の &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; セマンティクスは、ロックが許可されるまで無期限に待機することと、そのロックは&lt;b&gt;単なる&lt;/b&gt;通知に&lt;b&gt;過ぎないこと&lt;/b&gt;です。このような任意のロックはより柔軟ですが、保証は少なくなります。つまり、 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; を使用しないプログラムは、 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; でロックされたファイルを変更する可能性があります。&lt;a href=&quot;perlport&quot;&gt;perlportを&lt;/a&gt;参照、ポート固有のドキュメント、詳細についてはシステム固有のローカルマンページをご覧ください。移植性のあるプログラムを作成している場合は、従来の動作を想定するのが最善です。 （ただし、そうでない場合は、常に独自のシステムの特異性（「機能」と呼ばれることもあります）を書くのに完全に自由に感じる必要があります。移植性の問題への奴隷の固執は、仕事を遂行する上で邪魔になってはなりません。）</target>
        </trans-unit>
        <trans-unit id="53df84b423920613232d12c96d5eb675ef01a9db" translate="yes" xml:space="preserve">
          <source>Two potentially non-obvious but traditional flock semantics are that it waits indefinitely until the lock is granted, and that its locks are</source>
          <target state="translated">潜在的には自明ではありませんが、伝統的なフロックのセマンティクスとしては、ロックが付与されるまで無期限に待機することと、そのロックが</target>
        </trans-unit>
        <trans-unit id="778a62aee9043b393531476babc83e7e729243c9" translate="yes" xml:space="preserve">
          <source>Two special locales are worth particular mention: &quot;C&quot; and &quot;POSIX&quot;. Currently these are effectively the same locale: the difference is mainly that the first one is defined by the C standard, the second by the POSIX standard. They define the &lt;b&gt;default locale&lt;/b&gt; in which every program starts in the absence of locale information in its environment. (The</source>
          <target state="translated">「C」と「POSIX」という2つの特別なロケールは特に言及する価値があります。現在、これらは事実上同じロケールです。違いは主に、最初のロケールがC標準によって定義され、2番目のロケールがPOSIX標準によって定義されていることです。それらは、すべてのプログラムがその環境にロケール情報がない場合に起動する&lt;b&gt;デフォルトのロケール&lt;/b&gt;を定義し&lt;b&gt;ます&lt;/b&gt;。（</target>
        </trans-unit>
        <trans-unit id="001ed180b265179aa35dbaf576484db20b8f3115" translate="yes" xml:space="preserve">
          <source>Two special marker lines will bracket debugging code, like this:</source>
          <target state="translated">2 本の特別なマーカー線は、以下のようにデバッグコードを括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="fc4c89a57e0f51cea54d0e2e158fcc3083bc5fa2" translate="yes" xml:space="preserve">
          <source>Two threads both access &lt;code&gt;$x&lt;/code&gt; . Each thread can potentially be interrupted at any point, or be executed in any order. At the end, &lt;code&gt;$x&lt;/code&gt; could be 3 or 4, and both &lt;code&gt;$y&lt;/code&gt; and &lt;code&gt;$z&lt;/code&gt; could be 2 or 3.</source>
          <target state="translated">2つのスレッドが両方とも &lt;code&gt;$x&lt;/code&gt; アクセスします。各スレッドは潜在的に任意の時点で中断されるか、任意の順序で実行されます。最後に、 &lt;code&gt;$x&lt;/code&gt; は3または4で、 &lt;code&gt;$y&lt;/code&gt; と &lt;code&gt;$z&lt;/code&gt; は2または3です。</target>
        </trans-unit>
        <trans-unit id="ed596ad5315f7ee111b20fc3225326599075e7d0" translate="yes" xml:space="preserve">
          <source>Two threads both access &lt;code&gt;$x&lt;/code&gt;. Each thread can potentially be interrupted at any point, or be executed in any order. At the end, &lt;code&gt;$x&lt;/code&gt; could be 3 or 4, and both &lt;code&gt;$y&lt;/code&gt; and &lt;code&gt;$z&lt;/code&gt; could be 2 or 3.</source>
          <target state="translated">2つのスレッドは両方とも &lt;code&gt;$x&lt;/code&gt; アクセスします。各スレッドは、任意の時点で中断されたり、任意の順序で実行されたりする可能性があります。最後に、 &lt;code&gt;$x&lt;/code&gt; は3または4になり、 &lt;code&gt;$y&lt;/code&gt; と &lt;code&gt;$z&lt;/code&gt; は両方とも2または3になります。</target>
        </trans-unit>
        <trans-unit id="a040608578e9e9c915007f47fc1e5b14ac218a6c" translate="yes" xml:space="preserve">
          <source>Two ways. One is to build the module normally...</source>
          <target state="translated">二つの方法があります。一つは普通にモジュールを構築する方法...</target>
        </trans-unit>
        <trans-unit id="aed361ca9a7b196027b5db9a2f0828216a331df8" translate="yes" xml:space="preserve">
          <source>Two's complement (bitwise not). This is equivalent to</source>
          <target state="translated">2つの補数(ビット単位ではありません)。に相当します。</target>
        </trans-unit>
        <trans-unit id="1f8bb2682169008d50215675c388c14028479675" translate="yes" xml:space="preserve">
          <source>Two's complement (bitwise not). This is equivalent to, but faster than,</source>
          <target state="translated">2 の補数(ビット単位ではありません)。と同等ですが、それよりも高速です。</target>
        </trans-unit>
        <trans-unit id="ec9798b2ceec50b36efb45258055740cd070510f" translate="yes" xml:space="preserve">
          <source>Two-arg &lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; is magic and can translate characters like &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;|&lt;/code&gt; in filenames, which is usually the wrong thing to do. &lt;a href=&quot;perlfunc#sysopen-FILEHANDLE%2CFILENAME%2CMODE&quot;&gt;&lt;code&gt;sysopen&lt;/code&gt;&lt;/a&gt; and three-arg &lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; don't have this problem.</source>
          <target state="translated">2引数&lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;は魔法であり、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; などの文字を変換できます。ファイル名で、これは通常間違ったことです。&lt;a href=&quot;perlfunc#sysopen-FILEHANDLE%2CFILENAME%2CMODE&quot;&gt; &lt;code&gt;sysopen&lt;/code&gt; &lt;/a&gt;と3引数&lt;a href=&quot;perlfunc#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; に&lt;/a&gt;はこの問題はありません。</target>
        </trans-unit>
        <trans-unit id="639570380139caf69541c926ba46013c3318dc90" translate="yes" xml:space="preserve">
          <source>Two-face References</source>
          <target state="translated">二面性リファレンス</target>
        </trans-unit>
        <trans-unit id="ae90b2c9e3f2f4b661468b3ddaef859dd9bff8a2" translate="yes" xml:space="preserve">
          <source>Two-face Scalars</source>
          <target state="translated">二重顔のスカルプ</target>
        </trans-unit>
        <trans-unit id="f60980a56996745ba95f06a5f138b8e86a98d3dd" translate="yes" xml:space="preserve">
          <source>Tye McQueen, tye@metronet.com, http://perlmonks.org/?node=tye.</source>
          <target state="translated">タイ・マックイーン、tye@metronet.com、http://perlmonks.org/?node=tye。</target>
        </trans-unit>
        <trans-unit id="47708aacd7aae4d98506843c2ea25848ad8c524c" translate="yes" xml:space="preserve">
          <source>Tying Arrays</source>
          <target state="translated">配列を結ぶ</target>
        </trans-unit>
        <trans-unit id="29fe0e127980eab253dd9684cf8924d1439a9c07" translate="yes" xml:space="preserve">
          <source>Tying Arrays by Casey West &amp;lt;</source>
          <target state="translated">Casey Westによる配列の結合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="1cb864932b4ba6b40040bda147b28500825da685" translate="yes" xml:space="preserve">
          <source>Tying FileHandles</source>
          <target state="translated">FileHandles の紐付け</target>
        </trans-unit>
        <trans-unit id="c44951e9133e5d8875fa8e60d17eb7ca4e5ec846" translate="yes" xml:space="preserve">
          <source>Tying Hashes</source>
          <target state="translated">ハッシュを結びつける</target>
        </trans-unit>
        <trans-unit id="c124692dc36c13d6ea9eefe451091514b3053308" translate="yes" xml:space="preserve">
          <source>Tying Scalars</source>
          <target state="translated">スカラーを結ぶ</target>
        </trans-unit>
        <trans-unit id="dd441f6c670bdd175a4a06606b3ade32864a5013" translate="yes" xml:space="preserve">
          <source>Tying to an already-opened filehandle</source>
          <target state="translated">既に開いているファイルハンドルとの紐付け</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="b987ff7b7058c91b5723d0647b696ba512fc503e" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake install&quot; (or &quot;gmake install&quot;, &quot;nmake install&quot;). This will put the newly built perl and the libraries under whatever &lt;code&gt;INST_TOP&lt;/code&gt; points to in the Makefile. It will also install the pod documentation under &lt;code&gt;$INST_TOP\$INST_VER\lib\pod&lt;/code&gt; and HTML versions of the same under &lt;code&gt;$INST_TOP\$INST_VER\lib\pod\html&lt;/code&gt;.</source>
          <target state="translated">「dmakeinstall」（または「gmakeinstall」、「nmakeinstall」）と入力します。これにより、新しく構築されたperlとライブラリがMakefile内の &lt;code&gt;INST_TOP&lt;/code&gt; が指すものの下に配置されます。また、ポッドのドキュメントを &lt;code&gt;$INST_TOP\$INST_VER\lib\pod&lt;/code&gt; インストールし、同じHTMLバージョンを &lt;code&gt;$INST_TOP\$INST_VER\lib\pod\html&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="622fe690390119c9b2836b529615b923c08f64da" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake install&quot; (or &quot;nmake install&quot;). This will put the newly built perl and the libraries under whatever &lt;code&gt;INST_TOP&lt;/code&gt; points to in the Makefile. It will also install the pod documentation under &lt;code&gt;$INST_TOP\$INST_VER\lib\pod&lt;/code&gt; and HTML versions of the same under &lt;code&gt;$INST_TOP\$INST_VER\lib\pod\html&lt;/code&gt; .</source>
          <target state="translated">「dmake install」（または「nmake install」）と入力します。これにより、新しく構築されたperlとライブラリが、Makefile内の &lt;code&gt;INST_TOP&lt;/code&gt; が指す場所に配置されます。また、 &lt;code&gt;$INST_TOP\$INST_VER\lib\pod&lt;/code&gt; ポッドドキュメントをインストールし、 &lt;code&gt;$INST_TOP\$INST_VER\lib\pod\html&lt;/code&gt; 同じHTMLバージョンをインストールします。</target>
        </trans-unit>
        <trans-unit id="0bc4b446d209674d0e9fea7244b04c4c376a3eb5" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake test&quot; (or &quot;gmake test&quot;, &quot;nmake test&quot;). This will run most of the tests from the testsuite (many tests will be skipped).</source>
          <target state="translated">dmake test&quot; (または &quot;gmake test&quot;,&quot;nmake test&quot;)と入力してください。これはテストスイートからほとんどのテストを実行します (多くのテストはスキップされます)。</target>
        </trans-unit>
        <trans-unit id="48996994efbc36adb9197c655f8807f921339671" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake test&quot; (or &quot;nmake test&quot;). This will run most of the tests from the testsuite (many tests will be skipped).</source>
          <target state="translated">dmake test&quot; (または &quot;nmake test&quot;)と入力してください。これは testsuite からほとんどのテストを実行します (多くのテストはスキップされます)。</target>
        </trans-unit>
        <trans-unit id="ce74e5125b2ce8cfe1e9037bd6ca72c9f8e02d8e" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake&quot; (&quot;gmake&quot; for GNU make, or &quot;nmake&quot; if you are using that make).</source>
          <target state="translated">dmake&quot; (GNU makeの場合は &quot;gmake&quot;、そのmakeを使っている場合は &quot;nmake &quot;と入力してください)。</target>
        </trans-unit>
        <trans-unit id="e707f55e50471f8dc7a11eb61a45491656e65c20" translate="yes" xml:space="preserve">
          <source>Type &quot;dmake&quot; (or &quot;nmake&quot; if you are using that make).</source>
          <target state="translated">dmake &quot;と入力してください(そのmakeを使用している場合は &quot;nmake &quot;と入力してください)。</target>
        </trans-unit>
        <trans-unit id="817cc5b4f0c413465ec1e98078f923e58ba436f8" translate="yes" xml:space="preserve">
          <source>Type &lt;code&gt;perl -v&lt;/code&gt; at the command line to find out.</source>
          <target state="translated">入力 &lt;code&gt;perl -v&lt;/code&gt; 見つけるために、コマンドラインで。</target>
        </trans-unit>
        <trans-unit id="9226639af847a9b60c06b437bbd1474fd6ad1ed2" translate="yes" xml:space="preserve">
          <source>Type =&amp;gt; INT</source>
          <target state="translated">タイプ=&amp;gt; INT</target>
        </trans-unit>
        <trans-unit id="8d4464e66323935602a00348988e0d51aae9ab21" translate="yes" xml:space="preserve">
          <source>Type flag for I/O objects. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">I / Oオブジェクトのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="470a91ba8a41cc959ff1b12a936c2603408f2a81" translate="yes" xml:space="preserve">
          <source>Type flag for I/O objects. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">I / Oオブジェクトのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0214e8a20ca847239102bda8ea4c8f57bc680a1d" translate="yes" xml:space="preserve">
          <source>Type flag for arrays. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">配列のタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="115e0f5825d2a5e2437586f43a3052a4bc413be2" translate="yes" xml:space="preserve">
          <source>Type flag for arrays. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">配列のタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b619926ff72ff70acdcfb56667bc380fd10917da" translate="yes" xml:space="preserve">
          <source>Type flag for formats. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">フォーマットのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5424ebb415da653ce11cbaa80efe5caaa204e71c" translate="yes" xml:space="preserve">
          <source>Type flag for formats. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">フォーマットのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="862128cc96218003cbfad3b7ee14c34ad3105872" translate="yes" xml:space="preserve">
          <source>Type flag for hashes. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">ハッシュのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="11f3d189f9118d5a6a717d6df4d8bfc5dd5c80fb" translate="yes" xml:space="preserve">
          <source>Type flag for hashes. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">ハッシュのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a9baa4a58d00e83fc0bcce1af37a4d54939255e4" translate="yes" xml:space="preserve">
          <source>Type flag for regular expressions. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">正規表現のタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7697ce082ff72de4bd1f6e232aec1e708c3e949b" translate="yes" xml:space="preserve">
          <source>Type flag for regular expressions. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">正規表現のタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68fd7e6db2e32b4d1268770600fb508ba841fcb6" translate="yes" xml:space="preserve">
          <source>Type flag for scalars. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">スカラーのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8842ec0ce8ceed5f394b670f4b4d43838af8af85" translate="yes" xml:space="preserve">
          <source>Type flag for scalars. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">スカラーのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dc19461206b9d4e886495f08f330852592ae56f4" translate="yes" xml:space="preserve">
          <source>Type flag for scalars. See &lt;a href=&quot;perlapi#svtype&quot;&gt;&quot;svtype&quot; in perlapi&lt;/a&gt;.</source>
          <target state="translated">スカラーのタイプフラグ。&lt;a href=&quot;perlapi#svtype&quot;&gt;perlapiの「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fc3eaa4bcf13a8b0cfd50d989093647d196bc08a" translate="yes" xml:space="preserve">
          <source>Type flag for subroutines. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">サブルーチンのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ba6e0906867866e6b4c76c1aa73ce8fb1ddab2a4" translate="yes" xml:space="preserve">
          <source>Type flag for subroutines. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">サブルーチンのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b728a87739a1b53338d9a99924f6b87621554866" translate="yes" xml:space="preserve">
          <source>Type flag for typeglobs. See &lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;.</source>
          <target state="translated">typeglobsのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;「svtype」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5d98af6202cdf505f81d6de89907f306acd604bb" translate="yes" xml:space="preserve">
          <source>Type flag for typeglobs. See &lt;a href=&quot;#svtype&quot;&gt;svtype&lt;/a&gt;.</source>
          <target state="translated">タイプグロブのタイプフラグ。&lt;a href=&quot;#svtype&quot;&gt;svtypeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b83265a2400fad6fae10ac8b63f66f6aa5168ddc" translate="yes" xml:space="preserve">
          <source>Type of arg %d to %s must be %s (not %s)</source>
          <target state="translated">arg %d から %s への型は %s でなければなりません (%s ではありません)。</target>
        </trans-unit>
        <trans-unit id="33daa9fc448c1a401c5c6eb564a12a3b5b0309c7" translate="yes" xml:space="preserve">
          <source>Type of arg %d to &amp;amp;CORE::%s must be %s</source>
          <target state="translated">＆CORE ::％sへの引数％dのタイプは％sでなければなりません</target>
        </trans-unit>
        <trans-unit id="e47d64cc94d0acfc0cdbf0b2c9dd711351e0f339" translate="yes" xml:space="preserve">
          <source>Type of first matching node.</source>
          <target state="translated">最初にマッチするノードのタイプ。</target>
        </trans-unit>
        <trans-unit id="82be69629fdb03e428153252cb628a3089333b85" translate="yes" xml:space="preserve">
          <source>Type-casting operator.</source>
          <target state="translated">タイプキャスティングのオペレーター。</target>
        </trans-unit>
        <trans-unit id="3c6b62766a1a668fd13ee2f54c72526e46bdd675" translate="yes" xml:space="preserve">
          <source>Type-specific attribute handlers</source>
          <target state="translated">タイプ固有の属性ハンドラ</target>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="translated">Type:</target>
        </trans-unit>
        <trans-unit id="dacaa1ce7373acde846ee256ee267058f226c8cb" translate="yes" xml:space="preserve">
          <source>Typed lexicals</source>
          <target state="translated">型付けされた語彙</target>
        </trans-unit>
        <trans-unit id="764662b450b71457a1b7dac7680a6d81b8a030c7" translate="yes" xml:space="preserve">
          <source>Typeglob Slots</source>
          <target state="translated">タイペグローブスロット</target>
        </trans-unit>
        <trans-unit id="35c58169317903405f89e446350d7099fc17650c" translate="yes" xml:space="preserve">
          <source>Typeglobs and Filehandles</source>
          <target state="translated">タイプグローブとファイルハンドル</target>
        </trans-unit>
        <trans-unit id="c93af0f29f506026f9bce190608810109efe41de" translate="yes" xml:space="preserve">
          <source>Typeglobs are also a way to create a local filehandle using the local() operator. These last until their block is exited, but may be passed back. For example:</source>
          <target state="translated">タイプグローブは、local()演算子を使ってローカルファイルハンドルを作成する方法でもあります。これらは、そのブロックが終了するまで続きますが、引き渡すこともできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ce5682fe2db39004dc33d1f245a642897d0ccef1" translate="yes" xml:space="preserve">
          <source>Typeless &lt;code&gt;abs&lt;/code&gt; or &lt;code&gt;fabs&lt;/code&gt;,</source>
          <target state="translated">タイプレスの &lt;code&gt;abs&lt;/code&gt; または &lt;code&gt;fabs&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="7c854e2c86ed5ebd580cf024fab8796f99c1a0f9" translate="yes" xml:space="preserve">
          <source>Types of Nodes</source>
          <target state="translated">ノードの種類</target>
        </trans-unit>
        <trans-unit id="54a79ea7d31cf3e80acf5e2ca6b3eef126289136" translate="yes" xml:space="preserve">
          <source>Typical frequently used settings:</source>
          <target state="translated">代表的なよく使う設定。</target>
        </trans-unit>
        <trans-unit id="19f0351a6e0b3a0f7afdab28ba608c9abfed4106" translate="yes" xml:space="preserve">
          <source>Typical names for the single object key are &lt;code&gt;__class_whatever__&lt;/code&gt;, or &lt;code&gt;$__dollars_are_rarely_used__$&lt;/code&gt; or &lt;code&gt;}ugly_brace_placement&lt;/code&gt;, or even things like &lt;code&gt;__class_md5sum(classname)__&lt;/code&gt;, to reduce the risk of clashing with real hashes.</source>
          <target state="translated">単一のオブジェクトキーの一般的な名前は &lt;code&gt;__class_whatever__&lt;/code&gt; 、または &lt;code&gt;$__dollars_are_rarely_used__$&lt;/code&gt; または &lt;code&gt;}ugly_brace_placement&lt;/code&gt; 、などであっても、物事 &lt;code&gt;__class_md5sum(classname)__&lt;/code&gt; 実際のハッシュと衝突の危険性を低減するために、。</target>
        </trans-unit>
        <trans-unit id="eeee45f0582f2da790f6df23acb83c5b9ac37e5b" translate="yes" xml:space="preserve">
          <source>Typical usage is just:</source>
          <target state="translated">典型的な使い方はただの</target>
        </trans-unit>
        <trans-unit id="9f433de3a09f2cf5cd13a827c57725457d725e39" translate="yes" xml:space="preserve">
          <source>Typical usage:</source>
          <target state="translated">典型的な使い方。</target>
        </trans-unit>
        <trans-unit id="f0a20c31caa817cfde9a5903c8d1331d2cc5ddae" translate="yes" xml:space="preserve">
          <source>Typical use is to do range checks on &lt;code&gt;uv&lt;/code&gt; before casting:</source>
          <target state="translated">典型的な用途は、キャストする前に &lt;code&gt;uv&lt;/code&gt; 範囲チェックを行うことです：</target>
        </trans-unit>
        <trans-unit id="0f7c555ca8af58d8be6641bce4c54e1f92594d54" translate="yes" xml:space="preserve">
          <source>Typical use of AutoSplit in the perl MakeMaker utility is via the command-line with:</source>
          <target state="translated">perl MakeMaker ユーティリティでの AutoSplit の一般的な使用方法は、コマンドラインからの使用です。</target>
        </trans-unit>
        <trans-unit id="2eb42fd8be2849b836904fd8c0478452015d5021" translate="yes" xml:space="preserve">
          <source>Typically displayed in italics. Example: &quot;&lt;code&gt;F&amp;lt;.cshrc&amp;gt;&lt;/code&gt; &quot;</source>
          <target state="translated">通常、イタリック体で表示されます。例： &quot; &lt;code&gt;F&amp;lt;.cshrc&amp;gt;&lt;/code&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="b5d871a9c977277097fa4a829e659b06d6204d49" translate="yes" xml:space="preserve">
          <source>Typically displayed in italics. Example: &quot;&lt;code&gt;F&amp;lt;.cshrc&amp;gt;&lt;/code&gt;&quot;</source>
          <target state="translated">通常、斜体で表示されます。例： &quot; &lt;code&gt;F&amp;lt;.cshrc&amp;gt;&lt;/code&gt; &quot;</target>
        </trans-unit>
        <trans-unit id="e392be83caed3c91eae784a95dbf70091fef0bbc" translate="yes" xml:space="preserve">
          <source>Typically only necessary for debugging and testing, if you need to dump the internals of an SV, &lt;a href=&quot;Devel::Peek&quot;&gt;Devel::Peek's&lt;/a&gt; Dump() provides more detail in a compact form.</source>
          <target state="translated">通常、デバッグとテストにのみ必要です&lt;a href=&quot;Devel::Peek&quot;&gt;。SVの&lt;/a&gt;内部をダンプする必要がある場合、Devel :: PeekのDump（）はコンパクトな形式で詳細を提供します。</target>
        </trans-unit>
        <trans-unit id="2a174345584e66d867781b1452d35dc4522e5c23" translate="yes" xml:space="preserve">
          <source>Typically only necessary for debugging and testing. Don't use this flag as a marker to distinguish character and binary data, that should be decided for each variable when you write your code.</source>
          <target state="translated">通常、デバッグやテストの際にのみ必要です。文字データとバイナリデータを区別するためのマーカーとしてこのフラグを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="0b14febd4050c6e9e7fff1ec1a1e04a32b2411b9" translate="yes" xml:space="preserve">
          <source>Typically render into NFD on input and NFC on output. Using NFKC or NFKD functions improves recall on searches, assuming you've already done to the same text to be searched. Note that this is about much more than just pre- combined compatibility glyphs; it also reorders marks according to their canonical combining classes and weeds out singletons.</source>
          <target state="translated">通常、入力ではNFDに、出力ではNFCにレンダリングされます。NFKC または NFKD 関数を使用することで、検索対象の同じテキストに対して既に検索を行っていると仮定して、検索時の想起性が向上します。これは、事前に結合された互換性のあるグリフだけでなく、正規の結合クラスに従ってマークを並べ替えたり、シングルトンを除外したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="4aadd663fd22d97ef1413917c08e1ab3e9fe702e" translate="yes" xml:space="preserve">
          <source>Typically returns the string &lt;code&gt;at &amp;lt;FILE&amp;gt; line &amp;lt;LINE&amp;gt;&lt;/code&gt;. If &lt;code&gt;detail&lt;/code&gt; is set then its value will be returned instead.</source>
          <target state="translated">通常 &lt;code&gt;at &amp;lt;FILE&amp;gt; line &amp;lt;LINE&amp;gt;&lt;/code&gt; の文字列を返します。 &lt;code&gt;detail&lt;/code&gt; が設定されている場合は、代わりにその値が返されます。</target>
        </trans-unit>
        <trans-unit id="b5c564109e8a3afa5be0b031d855d9ae4aa0bbb3" translate="yes" xml:space="preserve">
          <source>Typically this is used to emulate &lt;code&gt;#!&lt;/code&gt; startup on platforms that don't support &lt;code&gt;#!&lt;/code&gt; . It's also convenient when debugging a script that uses &lt;code&gt;#!&lt;/code&gt; , and is thus normally found by the shell's $PATH search mechanism.</source>
          <target state="translated">通常、これは &lt;code&gt;#!&lt;/code&gt; をエミュレートするために使用されます。 &lt;code&gt;#!&lt;/code&gt; をサポートしないプラットフォームでの起動 。 &lt;code&gt;#!&lt;/code&gt; を使用するスクリプトをデバッグするときにも便利です。なので、通常はシェルの$ PATH検索メカニズムによって検出されます。</target>
        </trans-unit>
        <trans-unit id="0f7ce98ce055e01dae18470a5f2a3135a14234ad" translate="yes" xml:space="preserve">
          <source>Typically this is used to emulate &lt;code&gt;#!&lt;/code&gt; startup on platforms that don't support &lt;code&gt;#!&lt;/code&gt;. It's also convenient when debugging a script that uses &lt;code&gt;#!&lt;/code&gt;, and is thus normally found by the shell's $PATH search mechanism.</source>
          <target state="translated">通常、これは &lt;code&gt;#!&lt;/code&gt; をエミュレートするために使用されます。 &lt;code&gt;#!&lt;/code&gt; サポートしていないプラットフォームでの起動！。 &lt;code&gt;#!&lt;/code&gt; を使用するスクリプトをデバッグするときにも便利です。、したがって、通常はシェルの$ PATH検索メカニズムによって検出されます。</target>
        </trans-unit>
        <trans-unit id="687058d347f26c3b9dcf0508ed2f5930b5b6fa48" translate="yes" xml:space="preserve">
          <source>Typically used to finish the deflation. Any pending output will be returned via &lt;code&gt;$out&lt;/code&gt; . &lt;code&gt;$status&lt;/code&gt; will have a value &lt;code&gt;Z_OK&lt;/code&gt; if successful.</source>
          <target state="translated">通常、デフレを終わらせるために使用されます。保留中の出力はすべて &lt;code&gt;$out&lt;/code&gt; を介して返されます。成功した場合、 &lt;code&gt;$status&lt;/code&gt; の値は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4bb05899bf90c01639baa0fce37a7ffd38acaffb" translate="yes" xml:space="preserve">
          <source>Typically used to finish the deflation. Any pending output will be returned via &lt;code&gt;$out&lt;/code&gt;. &lt;code&gt;$status&lt;/code&gt; will have a value &lt;code&gt;Z_OK&lt;/code&gt; if successful.</source>
          <target state="translated">通常、デフレを終了するために使用されます。保留中の出力は &lt;code&gt;$out&lt;/code&gt; を介して返されます。成功した場合、 &lt;code&gt;$status&lt;/code&gt; の値は &lt;code&gt;Z_OK&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="01a46f6fee05faa753caaabc6b43de594c708bd4" translate="yes" xml:space="preserve">
          <source>Typically used to finish the deflation. Any pending output will be written to &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="translated">通常、デフレを終わらせるために使用されます。保留中の出力はすべて &lt;code&gt;$output&lt;/code&gt; 書き込まれます。</target>
        </trans-unit>
        <trans-unit id="61eb0abe390afe612ea12baca62c7c474255a6b3" translate="yes" xml:space="preserve">
          <source>Typically used to finish the deflation. Any pending output will be written to &lt;code&gt;$output&lt;/code&gt;.</source>
          <target state="translated">通常、デフレを終了するために使用されます。保留中の出力はすべて &lt;code&gt;$output&lt;/code&gt; 書き込まれます。</target>
        </trans-unit>
        <trans-unit id="6622b7497b5ad854ceef3d9e6b7f39de4b5a746f" translate="yes" xml:space="preserve">
          <source>Typically will call &lt;code&gt;Fill&lt;/code&gt; and manipulate pointers (possibly via the API). &lt;code&gt;PerlIOBuf_read()&lt;/code&gt; may be suitable for derived classes which provide &quot;fast gets&quot; methods.</source>
          <target state="translated">通常は、 &lt;code&gt;Fill&lt;/code&gt; を呼び出してポインタを操作します（おそらくAPIを介して）。 &lt;code&gt;PerlIOBuf_read()&lt;/code&gt; は、「高速取得」メソッドを提供する派生クラスに適している場合があります。</target>
        </trans-unit>
        <trans-unit id="eb1290094db39111daed12026731de41d874265c" translate="yes" xml:space="preserve">
          <source>Typically you only need to set this if you are using nonstandard prefixes and want some or all of them to have the same semantics as '--' does under normal circumstances.</source>
          <target state="translated">通常、非標準の接頭辞を使用していて、通常の状況下では'--'と同じセマンティクスを持つ接頭辞が必要な場合にのみ設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="bbb5689bb894bcd45bb2427b7ffbb2ba5d9ac28a" translate="yes" xml:space="preserve">
          <source>Typically you use the &lt;code&gt;\G&lt;/code&gt; anchor with the &lt;code&gt;c&lt;/code&gt; flag when you want to try a different match if one fails, such as in a tokenizer. Jeffrey Friedl offers this example which works in 5.004 or later.</source>
          <target state="translated">通常、トークナイザーなどで失敗した場合に別の一致を試したい場合は、 &lt;code&gt;\G&lt;/code&gt; アンカーを &lt;code&gt;c&lt;/code&gt; フラグと共に使用します。 Jeffrey Friedlは、5.004以降で機能するこの例を提供しています。</target>
        </trans-unit>
        <trans-unit id="e42958c3877ca65db1e97bfa470cdaaff1d1e60d" translate="yes" xml:space="preserve">
          <source>Typically you use the &lt;code&gt;\G&lt;/code&gt; anchor with the &lt;code&gt;c&lt;/code&gt; modifier when you want to try a different match if one fails, such as in a tokenizer. Jeffrey Friedl offers this example which works in 5.004 or later.</source>
          <target state="translated">通常、トークナイザーなどで失敗した場合に別の一致を試行する場合は、 &lt;code&gt;c&lt;/code&gt; 修飾子を指定して &lt;code&gt;\G&lt;/code&gt; アンカーを使用します。 Jeffrey Friedlは、5.004以降で機能するこの例を提供しています。</target>
        </trans-unit>
        <trans-unit id="4d250975c35bc29bcb347189b99facfa0b3287b6" translate="yes" xml:space="preserve">
          <source>Typically you'll want to change how TAP gets</source>
          <target state="translated">通常、TAPの取得方法を変更したい場合があります。</target>
        </trans-unit>
        <trans-unit id="291f2d298dd4e6053c773023592956eee5655566" translate="yes" xml:space="preserve">
          <source>Typically, Perl tests are run through this. However, anything which spits out TAP is fine. You can use this argument to specify the name of the program (and optional switches) to run your tests with:</source>
          <target state="translated">通常、Perl のテストはこれを使って実行されます。しかし、TAP を出力するものであれば何でも構いません。この引数を使って、テストを実行するプログラムの名前 (およびオプションのスイッチ)を指定することができます。</target>
        </trans-unit>
        <trans-unit id="b62868c79b9e92764b29688b63eb397e1c587dcb" translate="yes" xml:space="preserve">
          <source>Typically, a &lt;code&gt;package&lt;/code&gt; statement is the first declaration in a file included in a program by one of the &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or &lt;code&gt;use&lt;/code&gt; operators. You can switch into a package in more than one place: &lt;code&gt;package&lt;/code&gt; has no effect beyond specifying which symbol table the compiler will use for dynamic symbols for the rest of that block or until the next &lt;code&gt;package&lt;/code&gt; statement. You can refer to variables and filehandles in other packages by prefixing the identifier with the package name and a double colon: &lt;code&gt;$Package::Variable&lt;/code&gt;. If the package name is null, the &lt;code&gt;main&lt;/code&gt; package is assumed. That is, &lt;code&gt;$::sail&lt;/code&gt; is equivalent to &lt;code&gt;$main::sail&lt;/code&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;package&lt;/code&gt; ステートメントは、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、または &lt;code&gt;use&lt;/code&gt; 演算子のいずれかによってプログラムに含まれるファイル内の最初の宣言です。複数の場所でパッケージに切り替えることができます。 &lt;code&gt;package&lt;/code&gt; は、コンパイラがそのブロックの残りの部分または次の &lt;code&gt;package&lt;/code&gt; ステートメントまで動的シンボルに使用するシンボルテーブルを指定する以外には効果がありません。識別子の前にパッケージ名と二重コロンを付けることで、他のパッケージの変数とファイルハンドルを参照できます： &lt;code&gt;$Package::Variable&lt;/code&gt; 。パッケージ名がnullの場合、 &lt;code&gt;main&lt;/code&gt; パッケージが想定されます。つまり、 &lt;code&gt;$::sail&lt;/code&gt; 同等です &lt;code&gt;$main::sail&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc1a3db1817e4391406ea8e4c10b938d812a2baf" translate="yes" xml:space="preserve">
          <source>Typically, a C compiler allocates 12 bytes to a &lt;code&gt;gappy_t&lt;/code&gt; variable, but requires only 8 bytes for a &lt;code&gt;dense_t&lt;/code&gt; . After investigating this further, we can draw memory maps, showing where the extra 4 bytes are hidden:</source>
          <target state="translated">通常、Cコンパイラーは、12バイトを &lt;code&gt;gappy_t&lt;/code&gt; 変数に割り当てますが、dense_tに必要なのは8バイトのみ &lt;code&gt;dense_t&lt;/code&gt; 。これをさらに調査した後、メモリマップを描画して、余分な4バイトが隠されている場所を示すことができます。</target>
        </trans-unit>
        <trans-unit id="842e52cd2265b412e8f4aaf0dec34c2c2fc7c9ed" translate="yes" xml:space="preserve">
          <source>Typically, a C compiler allocates 12 bytes to a &lt;code&gt;gappy_t&lt;/code&gt; variable, but requires only 8 bytes for a &lt;code&gt;dense_t&lt;/code&gt;. After investigating this further, we can draw memory maps, showing where the extra 4 bytes are hidden:</source>
          <target state="translated">通常、Cコンパイラは &lt;code&gt;gappy_t&lt;/code&gt; 変数に12バイトを割り当てますが、dense_tには8バイトしか必要ありませ &lt;code&gt;dense_t&lt;/code&gt; 。これをさらに調査した後、メモリマップを描画して、余分な4バイトが隠されている場所を示すことができます。</target>
        </trans-unit>
        <trans-unit id="83c91d2712bb90187ca081aa74ad37d202d5e800" translate="yes" xml:space="preserve">
          <source>Typically, however, things are the other way around: the tieable class expects its arguments as a flattened list, so the attribute looks like:</source>
          <target state="translated">タイアブルクラスはその引数をフラット化されたリストとして期待しているので、属性は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f8985e43d2d106574f328b34641196cf266af572" translate="yes" xml:space="preserve">
          <source>Typically, the</source>
          <target state="translated">一般的には</target>
        </trans-unit>
        <trans-unit id="a2dcf9e9fce909e6d70f7fd2b928940489e6fad5" translate="yes" xml:space="preserve">
          <source>Typing &quot;buildtype d off&quot; or &quot;buildtype d&quot; at the command prompt causes the buildtype to be set to Debug type with D1 flag set.</source>
          <target state="translated">コマンドプロンプトで &quot;buildtype d off &quot;または &quot;buildtype d &quot;と入力すると、ビルドタイプはD1フラグが設定されたデバッグタイプに設定されます。</target>
        </trans-unit>
        <trans-unit id="b2c7510e598f94047792f2e34322c55a1d654ee0" translate="yes" xml:space="preserve">
          <source>Typing &quot;buildtype d on&quot; at the command prompt causes the buildtype to be set to Debug type with D2 flag set.</source>
          <target state="translated">コマンドプロンプトで &quot;buildtype d on &quot;と入力すると、ビルドタイプがD2フラグが設定されたデバッグタイプになります。</target>
        </trans-unit>
        <trans-unit id="6127511edf886df0417540a81474ffb3800e60b7" translate="yes" xml:space="preserve">
          <source>Typing &quot;buildtype r&quot; at the command prompt sets it to Release Build type.</source>
          <target state="translated">コマンドプロンプトで &quot;buildtype r &quot;と入力すると、リリースビルドタイプに設定されます。</target>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="70ae2f8ea36eac22765cdf44837146969d083d4c" translate="yes" xml:space="preserve">
          <source>U/WIN specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の U/Win 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="e87e721b92dfc3ce5a42bdc5529d628275269297" translate="yes" xml:space="preserve">
          <source>UAX #11: East Asian Width</source>
          <target state="translated">UAX #11:東アジアの幅</target>
        </trans-unit>
        <trans-unit id="54e111693f7553557203eea396555ad20db941bc" translate="yes" xml:space="preserve">
          <source>UAX #14: Unicode Line Breaking Algorithm</source>
          <target state="translated">UAX #14:Unicode改行アルゴリズム</target>
        </trans-unit>
        <trans-unit id="f62b71447bb2670ca75d2c60404b5335b86f48a9" translate="yes" xml:space="preserve">
          <source>UAX #15: Unicode Normalization Forms</source>
          <target state="translated">UAX #15:Unicode正規化フォーム</target>
        </trans-unit>
        <trans-unit id="57fbcb66826627051473f0031e536eaa29808986" translate="yes" xml:space="preserve">
          <source>UAX #29: Unicode Text Segmentation</source>
          <target state="translated">UAX #29:Unicodeテキストセグメンテーション</target>
        </trans-unit>
        <trans-unit id="04846c59e74a6b4b2e534cd9cb9a90b44ec543b2" translate="yes" xml:space="preserve">
          <source>UAX #44: Unicode Character Database</source>
          <target state="translated">UAX #44:Unicode文字データベース</target>
        </trans-unit>
        <trans-unit id="591e272980f29149d094e061515f3a24c2416346" translate="yes" xml:space="preserve">
          <source>UC</source>
          <target state="translated">UC</target>
        </trans-unit>
        <trans-unit id="3a333ea8bebfa50b73219f11f7bf0ebbb8c9a863" translate="yes" xml:space="preserve">
          <source>UCA recommends that out-of-range values should not be ignored for security reasons. Say, &lt;code&gt;&quot;pe\x{110000}rl&quot;&lt;/code&gt; should not be equal to &lt;code&gt;&quot;perl&quot;&lt;/code&gt; . However, &lt;code&gt;U+FFFD&lt;/code&gt; is wrongly mapped to a variable collation element in DUCET for Unicode 6.0.0 to 6.2.0, that means out-of-range values will be ignored when &lt;code&gt;variable&lt;/code&gt; isn't &lt;code&gt;Non-ignorable&lt;/code&gt; .</source>
          <target state="translated">UCAは、セキュリティ上の理由から範囲外の値を無視しないことをお勧めします。たとえば、 &lt;code&gt;&quot;pe\x{110000}rl&quot;&lt;/code&gt; は &lt;code&gt;&quot;perl&quot;&lt;/code&gt; と等しくないはずです。ただし、 &lt;code&gt;U+FFFD&lt;/code&gt; は、Unicode 6.0.0から6.2.0のDUCETの変数照合要素に誤ってマップされます。つまり、 &lt;code&gt;variable&lt;/code&gt; が &lt;code&gt;Non-ignorable&lt;/code&gt; できない場合、範囲外の値は無視されます。</target>
        </trans-unit>
        <trans-unit id="492c906fc3f312af6ae908d9ffaf994fd07f46cc" translate="yes" xml:space="preserve">
          <source>UCA recommends that out-of-range values should not be ignored for security reasons. Say, &lt;code&gt;&quot;pe\x{110000}rl&quot;&lt;/code&gt; should not be equal to &lt;code&gt;&quot;perl&quot;&lt;/code&gt;. However, &lt;code&gt;U+FFFD&lt;/code&gt; is wrongly mapped to a variable collation element in DUCET for Unicode 6.0.0 to 6.2.0, that means out-of-range values will be ignored when &lt;code&gt;variable&lt;/code&gt; isn't &lt;code&gt;Non-ignorable&lt;/code&gt;.</source>
          <target state="translated">UCAは、セキュリティ上の理由から、範囲外の値を無視しないことをお勧めします。たとえば、 &lt;code&gt;&quot;pe\x{110000}rl&quot;&lt;/code&gt; は &lt;code&gt;&quot;perl&quot;&lt;/code&gt; と同じであってはなりません。ただし、 &lt;code&gt;U+FFFD&lt;/code&gt; は、Unicode 6.0.0〜6.2.0のDUCETの変数照合要素に誤ってマップされます。つまり、 &lt;code&gt;variable&lt;/code&gt; が &lt;code&gt;Non-ignorable&lt;/code&gt; できない場合、範囲外の値は無視されます。</target>
        </trans-unit>
        <trans-unit id="46cc4029c87ef2347d0792acb85d7dbc180043ff" translate="yes" xml:space="preserve">
          <source>UCA_Version</source>
          <target state="translated">UCA_Version</target>
        </trans-unit>
        <trans-unit id="e80de0851d29f92f6e9e34856bbc13a9b674c12b" translate="yes" xml:space="preserve">
          <source>UCS</source>
          <target state="translated">UCS</target>
        </trans-unit>
        <trans-unit id="c3ba710b4e9b506e4750f6e24e9eeec383e609b3" translate="yes" xml:space="preserve">
          <source>UCS-2</source>
          <target state="translated">UCS-2</target>
        </trans-unit>
        <trans-unit id="206177d23e4d5ec0abfb5c6b0df396d679742e7c" translate="yes" xml:space="preserve">
          <source>UCS-2 is a fixed-length encoding with each character taking 16 bits. It &lt;b&gt;does not&lt;/b&gt; support</source>
          <target state="translated">UCS-2は、各文字が16ビットを取る固定長エンコーディングです。それ&lt;b&gt;は&lt;/b&gt;サポートして&lt;b&gt;いません&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="daeba9311089266fcf0acd6d54c9e56ca13a992e" translate="yes" xml:space="preserve">
          <source>UCS-2, UCS-4</source>
          <target state="translated">UCS-2、UCS-4</target>
        </trans-unit>
        <trans-unit id="e9a6f622e340090feb219eb5c94b0df756e8e486" translate="yes" xml:space="preserve">
          <source>UDP</source>
          <target state="translated">UDP</target>
        </trans-unit>
        <trans-unit id="a392dc8e430c846ca90f8e40c79fda571eef8daf" translate="yes" xml:space="preserve">
          <source>UDP datagrams are</source>
          <target state="translated">UDP データグラムは</target>
        </trans-unit>
        <trans-unit id="0b1ddbe7e9085079ee7967600cb1889fd0b548d1" translate="yes" xml:space="preserve">
          <source>UDP: Message Passing</source>
          <target state="translated">UDPです。メッセージパッシング</target>
        </trans-unit>
        <trans-unit id="d946adf52a4783929f122d341b29ac0fe188371c" translate="yes" xml:space="preserve">
          <source>UID</source>
          <target state="translated">UID</target>
        </trans-unit>
        <trans-unit id="6baa0c91c35738e244018a78ee06f9f0b5e589ea" translate="yes" xml:space="preserve">
          <source>UNDEF</source>
          <target state="translated">UNDEF</target>
        </trans-unit>
        <trans-unit id="bbb2722df9c1be9f9216f08d7da234a2e705e9d4" translate="yes" xml:space="preserve">
          <source>UNDERBAR</source>
          <target state="translated">UNDERBAR</target>
        </trans-unit>
        <trans-unit id="74ff590c1dac1161eec0fbaa8b7d8b3a98fff4d5" translate="yes" xml:space="preserve">
          <source>UNICODE AND SIDE EFFECTS</source>
          <target state="translated">ユニコードと副作用</target>
        </trans-unit>
        <trans-unit id="0f9d971f52bdd7a74ebeb786ec5143de4c2935d5" translate="yes" xml:space="preserve">
          <source>UNICODE IN OLDER PERLS</source>
          <target state="translated">古いペルルスのユニコード</target>
        </trans-unit>
        <trans-unit id="3d51f9ce7ad6a8a131760c17f51427e8bbfb85b1" translate="yes" xml:space="preserve">
          <source>UNICODE_REPLACEMENT</source>
          <target state="translated">UNICODE_REPLACEMENT</target>
        </trans-unit>
        <trans-unit id="94c5e5979031dbec3b6f240558b2bfaa36f46791" translate="yes" xml:space="preserve">
          <source>UNIMPLEMENTED</source>
          <target state="translated">UNIMPLEMENTED</target>
        </trans-unit>
        <trans-unit id="9392ee60535a3aa7bb3335f263044b78e27554ed" translate="yes" xml:space="preserve">
          <source>UNISTD</source>
          <target state="translated">UNISTD</target>
        </trans-unit>
        <trans-unit id="c070755890afd262edf57a1cfae99ffc017d2459" translate="yes" xml:space="preserve">
          <source>UNITCHECK</source>
          <target state="translated">UNITCHECK</target>
        </trans-unit>
        <trans-unit id="bc192a928ab3fe78a1c74cfa4d1027b44d52c868" translate="yes" xml:space="preserve">
          <source>UNIVERSAL</source>
          <target state="translated">UNIVERSAL</target>
        </trans-unit>
        <trans-unit id="1feda7e9d1b1a232e025eeb903dd53659f7b069c" translate="yes" xml:space="preserve">
          <source>UNIVERSAL - base class for ALL classes (blessed references)</source>
          <target state="translated">UNIVERSAL-すべてのクラスの基底クラス (祝福された参照)</target>
        </trans-unit>
        <trans-unit id="b23387c60700d885c584c4f2b25855ad58b48b48" translate="yes" xml:space="preserve">
          <source>UNIX and POSIX systems provide an abstract access() operating system call, which should be used to query the read, write, and execute rights. This function hides various distinct approaches in additional operating system specific security features, like Access Control Lists (ACLs)</source>
          <target state="translated">UNIX および POSIX システムは、読み取り、書き込み、および実行の権利を問い合わせるために使用されるべき、抽象的なアクセス()オペレーティングシステムコールを提供します。この関数は、アクセス制御リスト (ACL)のような追加のオペレーティングシステム固有のセキュリティ機能の中に、さまざまな異なるアプローチを隠しています。</target>
        </trans-unit>
        <trans-unit id="fa0c8b9587852cbf0dc08f98bcecbaed53f1e1c0" translate="yes" xml:space="preserve">
          <source>UNIX domain sockets added by Sean Robinson &amp;lt;</source>
          <target state="translated">Sean Robinsonによって追加されたUNIXドメインソケット&amp;lt;</target>
        </trans-unit>
        <trans-unit id="85db2499d39f4696e02fb26511b230add2c1b670" translate="yes" xml:space="preserve">
          <source>UNIX file permissions are based on sets of mode bits for {read,write,execute} for each {user,group,other}. By default Cygwin only tracks the Win32 read-only attribute represented as the UNIX file user write bit (files are always readable, files are executable if they have a</source>
          <target state="translated">UNIXファイルのパーミッションは、各{ユーザ、グループ、その他}の{read,write,execute}のモードビットのセットに基づいています。デフォルトでは、CygwinはUNIXファイルのユーザー書き込みビットとして表されるWin32の読み取り専用属性のみを追跡します(ファイルは常に読み取り可能で、ファイルに</target>
        </trans-unit>
        <trans-unit id="1db53023f517a9c3a97970b2e62a29042045d3f0" translate="yes" xml:space="preserve">
          <source>UNI_TO_NATIVE</source>
          <target state="translated">UNI_TO_NATIVE</target>
        </trans-unit>
        <trans-unit id="36361e169f0479184326d85ebb47825bf51a5753" translate="yes" xml:space="preserve">
          <source>UNLIKELY</source>
          <target state="translated">UNLIKELY</target>
        </trans-unit>
        <trans-unit id="5c24b56d363871364a8198c1e16261b34c9bf761" translate="yes" xml:space="preserve">
          <source>UNLINK flag available since 0.10.</source>
          <target state="translated">UNLINKフラグは0.10から利用可能です。</target>
        </trans-unit>
        <trans-unit id="265e8c38a269eb32604a5d0ed5924378784ee057" translate="yes" xml:space="preserve">
          <source>UNSHIFT this, LIST</source>
          <target state="translated">これをUNSHIFTしてLIST</target>
        </trans-unit>
        <trans-unit id="5b8f1af6e17a29d4f20f56ec6d442f59acfc755d" translate="yes" xml:space="preserve">
          <source>UNSUPPORTED</source>
          <target state="translated">UNSUPPORTED</target>
        </trans-unit>
        <trans-unit id="40cccdd49a4b2f7980664d02999aa7b9e3022b50" translate="yes" xml:space="preserve">
          <source>UNTIE by Nick Ing-Simmons &amp;lt;</source>
          <target state="translated">UNTIE by Nick Ing-Simmons &amp;lt;</target>
        </trans-unit>
        <trans-unit id="41304503568dff57766f35c33ebaca45f5e827b2" translate="yes" xml:space="preserve">
          <source>UNTIE this</source>
          <target state="translated">UNTIEこれ</target>
        </trans-unit>
        <trans-unit id="ea518a7caeec27fa571544a1959010e8689298ab" translate="yes" xml:space="preserve">
          <source>UPGRADE SUGGESTED</source>
          <target state="translated">推奨されるアップグレード</target>
        </trans-unit>
        <trans-unit id="e3bb3273c3d27a35e7a79c09d285ae651319171c" translate="yes" xml:space="preserve">
          <source>UPGRADING</source>
          <target state="translated">UPGRADING</target>
        </trans-unit>
        <trans-unit id="a6b6b187a5dabe1711e09378ba034929cf5397f3" translate="yes" xml:space="preserve">
          <source>UPSTREAM indicates where patches should go. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; implies that this hasn't been discussed for the module at hand. &lt;code&gt;blead&lt;/code&gt; indicates that the copy of the module in the blead sources is to be considered canonical, &lt;code&gt;cpan&lt;/code&gt; means that the module on CPAN is to be patched first. &lt;code&gt;first-come&lt;/code&gt; means that blead can be patched freely if it is in sync with the latest release on CPAN.</source>
          <target state="translated">UPSTREAMは、パッチの配置先を示します。 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; は、これが現在のモジュールで議論されていないことを意味します。 &lt;code&gt;blead&lt;/code&gt; は、bleadソース内のモジュールのコピーが正規のものと見なさ &lt;code&gt;cpan&lt;/code&gt; ことを示し、cpanは、CPAN上のモジュールが最初にパッチされることを意味します。 &lt;code&gt;first-come&lt;/code&gt; とは、CPANの最新リリースと同期している場合、bleadに自由にパッチを適用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="1b193f75bbf58b38858154a6e283a021406e55fd" translate="yes" xml:space="preserve">
          <source>UPSTREAM indicates where patches should go. &lt;code&gt;undef&lt;/code&gt; implies that this hasn't been discussed for the module at hand. &lt;code&gt;blead&lt;/code&gt; indicates that the copy of the module in the blead sources is to be considered canonical, &lt;code&gt;cpan&lt;/code&gt; means that the module on CPAN is to be patched first. &lt;code&gt;first-come&lt;/code&gt; means that blead can be patched freely if it is in sync with the latest release on CPAN.</source>
          <target state="translated">UPSTREAMは、パッチの配置先を示します。 &lt;code&gt;undef&lt;/code&gt; は、これが手元のモジュールについて議論されていないことを意味します。 &lt;code&gt;blead&lt;/code&gt; は、bleadソース内のモジュールのコピーが正規と見なさ &lt;code&gt;cpan&lt;/code&gt; ことを示し、cpanは、CPAN上のモジュールに最初にパッチが適用されることを意味します。 &lt;code&gt;first-come&lt;/code&gt; とは、CPANの最新リリースと同期している場合、bleadに自由にパッチを適用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="ba5e5280eb88749f4ed2bd7802c151c1f77cb3d7" translate="yes" xml:space="preserve">
          <source>URL decoding and encoding</source>
          <target state="translated">URL のデコードとエンコーディング</target>
        </trans-unit>
        <trans-unit id="a2c8158547717be782e140b2ad8b3a2b5e515fe5" translate="yes" xml:space="preserve">
          <source>URL for further information</source>
          <target state="translated">詳細はURLをご参照ください。</target>
        </trans-unit>
        <trans-unit id="61aff325c59f0125c7432101521fe8aef2d620f8" translate="yes" xml:space="preserve">
          <source>URLS</source>
          <target state="translated">URLS</target>
        </trans-unit>
        <trans-unit id="cf3bfa9a159c5a5ddc20da1eccd6bbddbdc037e4" translate="yes" xml:space="preserve">
          <source>USAGE</source>
          <target state="translated">USAGE</target>
        </trans-unit>
        <trans-unit id="11db5afeaceeb6d5fec1a6025012faccc762da50" translate="yes" xml:space="preserve">
          <source>USAGE DETAILS</source>
          <target state="translated">使用法の詳細</target>
        </trans-unit>
        <trans-unit id="3ca88d77aca2d323542d2e8f12b83151e0846c19" translate="yes" xml:space="preserve">
          <source>USE EXAMPLES</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="48c336c391ccd32eaf0812999ba74a1243f916d3" translate="yes" xml:space="preserve">
          <source>USE Test2::Suite INSTEAD</source>
          <target state="translated">USE Test2::Continued INSTEAD</target>
        </trans-unit>
        <trans-unit id="ce94de210299952d4167e1951445b8720839ce7f" translate="yes" xml:space="preserve">
          <source>USEFUL</source>
          <target state="translated">USEFUL</target>
        </trans-unit>
        <trans-unit id="6eb0c61201a96afc99cbf180f1c8d93c0a9fd8c8" translate="yes" xml:space="preserve">
          <source>USER</source>
          <target state="translated">USER</target>
        </trans-unit>
        <trans-unit id="045095377d72052bacadc70846f65ba919bc72ee" translate="yes" xml:space="preserve">
          <source>USER METHODS</source>
          <target state="translated">ユーザーメソッド</target>
        </trans-unit>
        <trans-unit id="eff0e1414e1813c02157d57d3f325f32947a8413" translate="yes" xml:space="preserve">
          <source>USE_MULTI &amp;amp; USE_IMP_SYS defined and USE_ITHREADS not defined</source>
          <target state="translated">USE_MULTIおよびUSE_IMP_SYSが定義され、USE_ITHREADSが定義されていません</target>
        </trans-unit>
        <trans-unit id="5e29b7b3b7536de15b46013805cfeb875c7a61d3" translate="yes" xml:space="preserve">
          <source>USE_MULTI, USE_ITHREADS &amp;amp; USE_IMP_SYS defined</source>
          <target state="translated">USE_MULTI、USE_ITHREADSおよびUSE_IMP_SYSが定義されています</target>
        </trans-unit>
        <trans-unit id="227996d58fdfdee97220bd395f44c03336330289" translate="yes" xml:space="preserve">
          <source>USE_PERL_FLOCK</source>
          <target state="translated">USE_PERL_FLOCK</target>
        </trans-unit>
        <trans-unit id="f8104e09349c8c6000afb7fc05a4ed027d50f4e3" translate="yes" xml:space="preserve">
          <source>USE_THREADS</source>
          <target state="translated">USE_THREADS</target>
        </trans-unit>
        <trans-unit id="eeb0c37772a1b806f230c8036c163dab104d01af" translate="yes" xml:space="preserve">
          <source>USING A CONTEXT</source>
          <target state="translated">文脈を利用する</target>
        </trans-unit>
        <trans-unit id="d403f19c30d9dafcf5b6a7bb8666159dacf7697f" translate="yes" xml:space="preserve">
          <source>USING B::Deparse AS A MODULE</source>
          <target state="translated">B::Deparse をモジュールとして使用する</target>
        </trans-unit>
        <trans-unit id="2efa10816450d527d9e56d3271b7e34ea8c81a61" translate="yes" xml:space="preserve">
          <source>USING CONTEXT: THE DEBUG FILTER</source>
          <target state="translated">文章の使用:DEBUG FILTER</target>
        </trans-unit>
        <trans-unit id="5dc41a076ce2820059919cbbf35a7c867770cef6" translate="yes" xml:space="preserve">
          <source>USING FILTERS</source>
          <target state="translated">フィルタの使用</target>
        </trans-unit>
        <trans-unit id="3d73074a3cddd39278e855bf130287734b3a28e3" translate="yes" xml:space="preserve">
          <source>USING LOCALES</source>
          <target state="translated">現地語の使用</target>
        </trans-unit>
        <trans-unit id="e914e6326e1588417f534e760a668a311b7406cd" translate="yes" xml:space="preserve">
          <source>USING PERL IN OPENVOS</source>
          <target state="translated">OPENVOSでのPERLの使用</target>
        </trans-unit>
        <trans-unit id="99eec133fe1ada053200d233f3eaa4520c2bb5fb" translate="yes" xml:space="preserve">
          <source>USING THE CONSTRUCTOR</source>
          <target state="translated">コンストラクタの使用</target>
        </trans-unit>
        <trans-unit id="ac35aec57e40ba482f8f9fa734ce439013d2f6b2" translate="yes" xml:space="preserve">
          <source>USING THE EXTERNAL GZIP</source>
          <target state="translated">外部GZIPの使用</target>
        </trans-unit>
        <trans-unit id="ca105f51c68cd465fba8a30858f385516bc30dcf" translate="yes" xml:space="preserve">
          <source>USING UTF8</source>
          <target state="translated">UTF8を使用する</target>
        </trans-unit>
        <trans-unit id="6af50db97d3b4d2d4a30cc3bc98a5ffb4cb39ec7" translate="yes" xml:space="preserve">
          <source>USourceData.txt</source>
          <target state="translated">USourceData.txt</target>
        </trans-unit>
        <trans-unit id="d96ff9257bc1dd5af725fa01d1ac6c3c64b3d707" translate="yes" xml:space="preserve">
          <source>USourceGlyphs.pdf</source>
          <target state="translated">USourceGlyphs.pdf</target>
        </trans-unit>
        <trans-unit id="618f65101275eae124d9a7c9c7a5431c588e88d8" translate="yes" xml:space="preserve">
          <source>UTF</source>
          <target state="translated">UTF</target>
        </trans-unit>
        <trans-unit id="6b28c2250a1cbb7c8f56dfcf0dd9e06201c35f2f" translate="yes" xml:space="preserve">
          <source>UTF stands for &quot;Unicode Transformation Format&quot;. UTF-8 is an encoding of Unicode into a sequence of 8-bit byte chunks, based on ASCII and Latin-1. The length of a sequence required to represent a Unicode code point depends on the ordinal number of that code point, with larger numbers requiring more bytes. UTF-EBCDIC is like UTF-8, but based on EBCDIC. They are enough alike that often, casual usage will conflate the two terms, and use &quot;UTF-8&quot; to mean both the UTF-8 found on ASCII platforms, and the UTF-EBCDIC found on EBCDIC ones.</source>
          <target state="translated">UTFは「Unicode Transformation Format」の略です。UTF-8 は、ASCII と Latin-1 に基づいて Unicode を 8 ビ ッ ト バ イ ト の塊の列にエン コ ーデ ィ ン グ し た も のです。Unicode コードポイントを表現するのに必要なシーケンスの長さは、そのコードポイントの序数に依存し、大きい数字ほど多くのバイトを必要とします。UTF-EBCDICはUTF-8のようなものですが、EBCDICに基づいています。彼らはしばしば、カジュアルな使用法は2つの用語を混同し、ASCIIプラットフォーム上で見つかったUTF-8、およびEBCDICのもので見つかったUTF-EBCDICの両方を意味するために &quot;UTF-8 &quot;を使用することになることを十分に似ています。</target>
        </trans-unit>
        <trans-unit id="5a9da893be5fd5fae314bea8dcdeeee12beeec4b" translate="yes" xml:space="preserve">
          <source>UTF-16</source>
          <target state="translated">UTF-16</target>
        </trans-unit>
        <trans-unit id="c965e907f9d25c517a8e5bd79aea9417a0714217" translate="yes" xml:space="preserve">
          <source>UTF-16 is almost the same as UCS-2 but it supports</source>
          <target state="translated">UTF-16はUCS-2とほぼ同じですが</target>
        </trans-unit>
        <trans-unit id="6368ee0d76a2ca5c3d83c85e127ba1610670e64c" translate="yes" xml:space="preserve">
          <source>UTF-16 surrogate U+%X</source>
          <target state="translated">UTF-16サロゲート U+%X</target>
        </trans-unit>
        <trans-unit id="5222e4ab75ba1ce305284f282ec30a73156a366c" translate="yes" xml:space="preserve">
          <source>UTF-16, UTF-16BE, UTF-16LE, Surrogates, and &lt;code&gt;BOM&lt;/code&gt; 's (Byte Order Marks)</source>
          <target state="translated">UTF-16、UTF-16BE、UTF-16LE、サロゲート、および &lt;code&gt;BOM&lt;/code&gt; （バイトオーダーマーク）</target>
        </trans-unit>
        <trans-unit id="ca51c01ddb04a5d5f4843a1045e4eb7fa59f4fe4" translate="yes" xml:space="preserve">
          <source>UTF-16, UTF-16BE, UTF-16LE, Surrogates, and &lt;code&gt;BOM&lt;/code&gt;'s (Byte Order Marks)</source>
          <target state="translated">UTF-16、UTF-16BE、UTF-16LE、サロゲート、および &lt;code&gt;BOM&lt;/code&gt; （バイト順マーク）</target>
        </trans-unit>
        <trans-unit id="47a1ff59a1e826be6636526f502c21d7b7b97ead" translate="yes" xml:space="preserve">
          <source>UTF-32 (UCS-4) is a fixed-length encoding with each character taking 32 bits. Since it is 32-bit, there is no need for</source>
          <target state="translated">UTF-32 (UCS-4)は、 各文字が 32 ビ ッ ト を取る固定長エン コ ーデ ィ ン グです。32ビットなので</target>
        </trans-unit>
        <trans-unit id="dfd8dce020ef601007001e4289b99a7908444d8a" translate="yes" xml:space="preserve">
          <source>UTF-32, UTF-32BE, UTF-32LE</source>
          <target state="translated">UTF-32、UTF-32BE、UTF-32LE</target>
        </trans-unit>
        <trans-unit id="20e199acc434517cd4a6e5977a48bae6e5af47a4" translate="yes" xml:space="preserve">
          <source>UTF-7</source>
          <target state="translated">UTF-7</target>
        </trans-unit>
        <trans-unit id="4d56cb8e2ad2a50613de9fa7d9d9a0d239c1aca9" translate="yes" xml:space="preserve">
          <source>UTF-7 encoding</source>
          <target state="translated">エッチエフシーセブン符号化方式</target>
        </trans-unit>
        <trans-unit id="c69eadbe302e95901c2e20dc0780e1b33ffbf733" translate="yes" xml:space="preserve">
          <source>UTF-7 is a special encoding which &quot;re-encodes&quot; UTF-16BE into a 7-bit encoding. It is implemented separately by Encode::Unicode::UTF7.</source>
          <target state="translated">UTF-7 は UTF-16BE を 7 ビットエンコーディングに「再エンコード」する特殊なエンコーディングです。Encode::Unicode::UTF7 によって別途実装されています。</target>
        </trans-unit>
        <trans-unit id="ba8308c0cebaf2cef9e02fb7f26e6c4f56ba6ce0" translate="yes" xml:space="preserve">
          <source>UTF-7 was not supported by Encode until version 1.95 because of that. But Unicode::String, a module by Gisle Aas which adds Unicode supports to non-utf8-savvy perl did support UTF-7, the UTF-7 support was added so Encode can supersede Unicode::String 100%.</source>
          <target state="translated">UTF-7はそのためにバージョン1.95までEncodeではサポートされていませんでした。しかし、UTF-7 をサポートしていた Gisle Aas のモジュールである Unicode::String は UTF-7 をサポートしていたので、 Encode は Unicode::String を 100% 置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="663b90c899fa25a111067be0c22ffc64dcf581c2" translate="yes" xml:space="preserve">
          <source>UTF-8</source>
          <target state="translated">UTF-8</target>
        </trans-unit>
        <trans-unit id="e2635de14b396bd81c2a4f587434aea9cfbf99fc" translate="yes" xml:space="preserve">
          <source>UTF-8 and UTF-EBCDIC are two different encodings used to represent Unicode code points as sequences of bytes. Macros with the same names (but different definitions) in</source>
          <target state="translated">UTF-8 と UTF-EBCDIC は、Unicode コ ー ド 点をバ イ ト 列 と し て表現す る ために用い ら れてい る 2 つの異なるエン コ ーデ ィ ン グです。で同じ名前(定義は異なる)のマクロは</target>
        </trans-unit>
        <trans-unit id="8b4fe83acd749a66b827e068556fa7943eee22bb" translate="yes" xml:space="preserve">
          <source>UTF-8 and Unicode FAQ for Unix/Linux</source>
          <target state="translated">Unix/Linux用のUTF-8とUnicode FAQ</target>
        </trans-unit>
        <trans-unit id="79cdcb7150e1254a38f057938e6f4012fc46b08a" translate="yes" xml:space="preserve">
          <source>UTF-8 is a variable-length (1 to 4 bytes), byte-order independent encoding. In most of Perl's documentation, including elsewhere in this document, the term &quot;UTF-8&quot; means also &quot;UTF-EBCDIC&quot;. But in this section, &quot;UTF-8&quot; refers only to the encoding used on ASCII platforms. It is a superset of 7-bit US-ASCII, so anything encoded in ASCII has the identical representation when encoded in UTF-8.</source>
          <target state="translated">UTF-8 は可変長(1~4 バイト)で、バイトオーダーに依存しないエンコーディングです。このドキュメントの他の場所を含め、Perlのドキュメントのほとんどでは、「UTF-8」という用語は「UTF-EBCDIC」をも意味しています。しかし、この節では、「UTF-8」はASCIIプラットフォームで使用されるエンコーディングのみを指します。これは7ビットのUS-ASCIIのスーパーセットなので、ASCIIでエンコードされたものはすべて、UTF-8でエンコードされたときに同じ表現になります。</target>
        </trans-unit>
        <trans-unit id="2d6c49b0c5ea97423fbd4064bf9d6fbd9eeb0509" translate="yes" xml:space="preserve">
          <source>UTF-8 is very structured, so many combinations of bytes are invalid. In the past, Perl tried to soldier on and make some sense of invalid combinations, but this can lead to security holes, so now, if the Perl core needs to process an invalid combination, it will either raise a fatal error, or will replace those bytes by the sequence that forms the Unicode REPLACEMENT CHARACTER, for which purpose Unicode created it.</source>
          <target state="translated">UTF-8 は非常に構造化されているため、多くのバイトの組み合わせは無効です。そのため、Perl のコアが無効な組み合わせを処理する必要がある場合、致命的なエラーを発生させるか、Unicode の REPLACEMENT CHARACTER を形成するシーケンスでそれらのバイトを置き換えることになります。</target>
        </trans-unit>
        <trans-unit id="64b07e44d3986db9cf7499225144a4d1d394db97" translate="yes" xml:space="preserve">
          <source>UTF-8 treats the first 128 codepoints, 0..127, the same as ASCII. They take only one byte per character. All other characters are encoded as two to four bytes using a complex scheme. Fortunately, Perl handles this for us, so we don't have to worry about this.</source>
          <target state="translated">UTF-8 は、最初の 128 コードポイント 0 ~ 127 を ASCII と同じように扱います。こ れ ら は 1 文字につき 1 バ イ ト し か必要 と し ません。他のすべての文字は、複雑なスキームを使用して 2 バイトから 4 バイトにエンコードされます。幸いなことに、Perl はこれを処理してくれるので、これを心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7443ec4bd05d2044739a43a92206bcfe32f068b2" translate="yes" xml:space="preserve">
          <source>UTF-8 vs. utf8 vs. UTF8</source>
          <target state="translated">UTF-8 vs.utf8 vs.UTF8</target>
        </trans-unit>
        <trans-unit id="21357a91ac9a6238516304ecf3d0973befa29dc1" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC</source>
          <target state="translated">UTF-EBCDIC</target>
        </trans-unit>
        <trans-unit id="54206a5f5bcbb8b5ddd3ceb665085cec48ec6be8" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC is defined by &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr16&quot;&gt;Unicode Technical Report #16&lt;/a&gt;. It is defined based on CCSID 1047, not allowing for the differences for other code pages. This allows for easy interchange of text between computers running different code pages, but makes it unusable, without adaptation, for Perl on those other code pages.</source>
          <target state="translated">UTF-EBCDICは、&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr16&quot;&gt;Unicode Technical Report＃16で&lt;/a&gt;定義されています。これはCCSID 1047に基づいて定義されており、他のコードページの違いを考慮していません。これにより、異なるコードページを実行しているコンピューター間でテキストを簡単に交換できますが、他のコードページのPerlに適応させることなく使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="d1acc50280127d54b308a40ab3c768e112572a85" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC is defined by &lt;a href=&quot;https://www.unicode.org/reports/tr16&quot;&gt;Unicode Technical Report #16&lt;/a&gt; (often referred to as just TR16). It is defined based on CCSID 1047, not allowing for the differences for other code pages. This allows for easy interchange of text between computers running different code pages, but makes it unusable, without adaptation, for Perl on those other code pages.</source>
          <target state="translated">UTF-EBCDICは、&lt;a href=&quot;https://www.unicode.org/reports/tr16&quot;&gt;Unicodeテクニカルレポート＃16&lt;/a&gt;（TR16と呼ばれることもあります）で定義されています。これはCCSID1047に基づいて定義されており、他のコードページとの違いは考慮されていません。これにより、異なるコードページを実行しているコンピューター間でテキストを簡単に交換できますが、他のコードページのPerlでは、適応せずにテキストを使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="f9b0bbf585cedfbc65f392d0551056f49932bbd3" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC is used on EBCDIC platforms. It generally requires more bytes to represent a given code point than UTF-8 does; the largest Unicode code points take 5 bytes to represent (instead of 4 in UTF-8), and, extended for 64-bit words, it uses 14 bytes instead of 13 bytes in UTF-8.</source>
          <target state="translated">UTF-EBCDIC は EBCDIC プ ラ ッ ト フ ォーム上で使われます。最大の Unicode コ ー ド 点は表現に 5 バ イ ト を必要 と し (UTF-8 では 4 バ イ ト ではな く )、64 ビ ッ ト 単語に対 し て拡張す る と 、 UTF-8 では 13 バ イ ト ではな く 14 バ イ ト を使用 し ます。</target>
        </trans-unit>
        <trans-unit id="fae1061497efd49ee6054c0a3d6e1ce19e05e6be" translate="yes" xml:space="preserve">
          <source>UTF-EBCDIC is used on EBCDIC platforms. The largest Unicode code points take 5 bytes to represent (instead of 4 in UTF-8), and Perl extends it to a maximum of 7 bytes to encode pode points up to what can fit in a 32-bit word (instead of 13 bytes and a 64-bit word in UTF-8).</source>
          <target state="translated">UTF-EBCDIC は EBCDIC プラットフォームで使用されます。最大の Unicode コードポイントは 5 バイトで表現され(UTF-8 では 4 バイトではなく)、Perl はそれを最大 7 バイトまで拡張して、32 ビットワードに収まるものまでのコードポイントをエンコードします(UTF-8 では 13 バイトで 64 ビットワードではなく)。</target>
        </trans-unit>
        <trans-unit id="32e4aba336279eb247fca6069de55e692fafce3d" translate="yes" xml:space="preserve">
          <source>UTF-X</source>
          <target state="translated">UTF-X</target>
        </trans-unit>
        <trans-unit id="31c724652517aa38e02f9cc38046b12306389452" translate="yes" xml:space="preserve">
          <source>UTF8SKIP</source>
          <target state="translated">UTF8SKIP</target>
        </trans-unit>
        <trans-unit id="126afec887a4798caa07a768c2ae8b1e709d5df3" translate="yes" xml:space="preserve">
          <source>UTF8_CHK_SKIP</source>
          <target state="translated">UTF8_CHK_SKIP</target>
        </trans-unit>
        <trans-unit id="f98f9b7b4dfefa91df6e8d07ade4cdf88d2b3a4e" translate="yes" xml:space="preserve">
          <source>UTF8_IS_INVARIANT</source>
          <target state="translated">UTF8_IS_INVARIANT</target>
        </trans-unit>
        <trans-unit id="ce7018ef4c544b4117f40b9403d65042195dc6ca" translate="yes" xml:space="preserve">
          <source>UTF8_IS_NONCHAR</source>
          <target state="translated">UTF8_IS_NONCHAR</target>
        </trans-unit>
        <trans-unit id="43a7d7eb6f7a4999dcf643e96fc55bf3ed29e04b" translate="yes" xml:space="preserve">
          <source>UTF8_IS_SUPER</source>
          <target state="translated">UTF8_IS_SUPER</target>
        </trans-unit>
        <trans-unit id="41c64bb8f1a0503efaa4f02874d635fa7fb44ce4" translate="yes" xml:space="preserve">
          <source>UTF8_IS_SURROGATE</source>
          <target state="translated">UTF8_IS_SURROGATE</target>
        </trans-unit>
        <trans-unit id="45d5fa1bf0c167c3f6576cc7457645a65299cae3" translate="yes" xml:space="preserve">
          <source>UTF8_MAXBYTES</source>
          <target state="translated">UTF8_MAXBYTES</target>
        </trans-unit>
        <trans-unit id="0a897c1fa81d6a6686e912ed672c264e86acb2f9" translate="yes" xml:space="preserve">
          <source>UTF8_MAXBYTES_CASE</source>
          <target state="translated">UTF8_MAXBYTES_CASE</target>
        </trans-unit>
        <trans-unit id="8af74f37673e55aee8c36bf5b73bd668baf4075c" translate="yes" xml:space="preserve">
          <source>UTF8_SAFE_SKIP</source>
          <target state="translated">UTF8_SAFE_SKIP</target>
        </trans-unit>
        <trans-unit id="69870d763a319ff2077dd64b9f02bdfd1ad88546" translate="yes" xml:space="preserve">
          <source>UTF8_SKIP</source>
          <target state="translated">UTF8_SKIP</target>
        </trans-unit>
        <trans-unit id="17562b3d061f2f42586076a6b020ba8eb357a3ff" translate="yes" xml:space="preserve">
          <source>UTILITIES</source>
          <target state="translated">UTILITIES</target>
        </trans-unit>
        <trans-unit id="58bc809d31f639453a46636f9c8ab08c8b78bb44" translate="yes" xml:space="preserve">
          <source>UTILITY FUNCTIONS</source>
          <target state="translated">UTILITY FUNCTIONS</target>
        </trans-unit>
        <trans-unit id="0df889160bec1efd3a376bc092db51a6960809d0" translate="yes" xml:space="preserve">
          <source>UTS #10: Unicode Collation Algorithm</source>
          <target state="translated">UTS #10:Unicode 照合アルゴリズム</target>
        </trans-unit>
        <trans-unit id="876d25fb5dd30a195bda72a305a7ba4a3acfcb55" translate="yes" xml:space="preserve">
          <source>UTS #18: Unicode Regular Expressions</source>
          <target state="translated">UTS #18:Unicode 正規表現</target>
        </trans-unit>
        <trans-unit id="edd7d8b48471cc7bdfa22b6a7694cc46d2409bb0" translate="yes" xml:space="preserve">
          <source>UV</source>
          <target state="translated">UV</target>
        </trans-unit>
        <trans-unit id="b25ef34eb3a5137d61daf0def8b67fe626cd3875" translate="yes" xml:space="preserve">
          <source>UVCHR_IS_INVARIANT</source>
          <target state="translated">UVCHR_IS_INVARIANT</target>
        </trans-unit>
        <trans-unit id="626b2f1b7c0d475b14997cb2d1af0b7a04543371" translate="yes" xml:space="preserve">
          <source>UVCHR_SKIP</source>
          <target state="translated">UVCHR_SKIP</target>
        </trans-unit>
        <trans-unit id="9746ff9d4d7b1c241287393e4d9dd0cd6f1bbf03" translate="yes" xml:space="preserve">
          <source>UVX</source>
          <target state="translated">UVX</target>
        </trans-unit>
        <trans-unit id="e92904bce8026b3c1f8828b0ce882e6b081c7fb6" translate="yes" xml:space="preserve">
          <source>Uganda</source>
          <target state="translated">Uganda</target>
        </trans-unit>
        <trans-unit id="c951ec00f123510a00d1e3d9539b11b4631d4096" translate="yes" xml:space="preserve">
          <source>Ukraine</source>
          <target state="translated">Ukraine</target>
        </trans-unit>
        <trans-unit id="994023f4756ccee554f76e83b238ef8441ca987c" translate="yes" xml:space="preserve">
          <source>Ultimate control over what should be done when (actually: each time) an option is encountered on the command line can be achieved by designating a reference to a subroutine (or an anonymous subroutine) as the option destination. When GetOptions() encounters the option, it will call the subroutine with two or three arguments. The first argument is the name of the option. (Actually, it is an object that stringifies to the name of the option.) For a scalar or array destination, the second argument is the value to be stored. For a hash destination, the second argument is the key to the hash, and the third argument the value to be stored. It is up to the subroutine to store the value, or do whatever it thinks is appropriate.</source>
          <target state="translated">コマンドライン上でオプションに遭遇したとき(実際には:毎回)に何をすべきかを究極的に制御するには、オプションの宛先としてサブルーチン(あるいは匿名のサブルーチン)への参照を指定することで達成できます。GetOptions()がオプションに遭遇した場合、2つまたは3つの引数を指定してサブルーチンを呼び出します。最初の引数はオプションの名前です。スカラや配列の場合は、第二引数に格納する値を指定します。ハッシュの場合は、第2引数にハッシュのキー、第3引数に格納する値を指定します。値を格納するかどうかはサブルーチン次第です。</target>
        </trans-unit>
        <trans-unit id="3ee38d90a0334118e79056b8389ee44abc43742c" translate="yes" xml:space="preserve">
          <source>Unacceptable behavior will result in a public and clearly identified warning. A second instance of unacceptable behavior from the same individual will result in removal from the mailing list and GitHub issue tracker, for a period of one calendar month. The rationale for this is to provide an opportunity for the person to change the way they act.</source>
          <target state="translated">受け入れられない行為があった場合は、公開された明確な警告が行われます。同一人物が二度目に容認できない行動をとった場合は、メーリングリストからも GitHub の課題追跡システムからも削除され、一暦月の期間が経過します。これは、その人が自分の行動を変える機会を提供するためです。</target>
        </trans-unit>
        <trans-unit id="fd11761cf7cb6cb9a563ded422bdfc4417516b2a" translate="yes" xml:space="preserve">
          <source>Unacceptable behavior will result in a public and clearly identified warning. Repeated unacceptable behavior will result in removal from the mailing list and revocation of rights to update rt.perl.org. The first removal is for one month. Subsequent removals will double in length. After six months with no warning, a user's ban length is reset. Removals, like warnings, are public.</source>
          <target state="translated">受け入れられない行為をした場合は、公開された明確な警告が行われます。受け入れられない行動を繰り返すと、メーリングリストからの削除とrt.perl.orgを更新する権利を剥奪されます。最初の削除は1ヶ月間です。それ以降の削除は2倍の期間になります。警告なしで6ヶ月間削除されると、ユーザの禁止期間はリセットされます。警告のような削除は公開されます。</target>
        </trans-unit>
        <trans-unit id="7be1c42f094036e0d5e47ba36abcce7c417f4479" translate="yes" xml:space="preserve">
          <source>Unambiguous name: &lt;code&gt;CP932&lt;/code&gt;. &lt;code&gt;IANA&lt;/code&gt; name (also used by Mozilla, and provided as an alias by Encode): &lt;code&gt;Windows-31J&lt;/code&gt;.</source>
          <target state="translated">明確な名前： &lt;code&gt;CP932&lt;/code&gt; 。 &lt;code&gt;IANA&lt;/code&gt; 名（Mozillaでも使用され、Encodeによってエイリアスとして提供されます）： &lt;code&gt;Windows-31J&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f645668eee1c03a85fb2473dd516adceaef3f2d" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;!&quot;&lt;/code&gt; performs logical negation, that is, &quot;not&quot;. See also &lt;a href=&quot;#Logical-Not&quot;&gt;&lt;code&gt;not&lt;/code&gt;&lt;/a&gt; for a lower precedence version of this.</source>
          <target state="translated">単項 &lt;code&gt;&quot;!&quot;&lt;/code&gt; 論理否定、つまり「not」を実行します。これの優先度の低いバージョンについては、&lt;a href=&quot;#Logical-Not&quot;&gt; &lt;code&gt;not&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1f8a4652f1c5950bdfb9f442db5f7ff059a9e8ff" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;!&quot;&lt;/code&gt; performs logical negation, that is, &quot;not&quot;. See also &lt;code&gt;not&lt;/code&gt; for a lower precedence version of this.</source>
          <target state="translated">単項 &lt;code&gt;&quot;!&quot;&lt;/code&gt; 論理否定、つまり「否定」を実行します。この優先順位の低いバージョンについては &lt;code&gt;not&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9a531b0100d0a01bbebb12554267e4d3655767b7" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;+&quot;&lt;/code&gt; has no effect whatsoever, even on strings. It is useful syntactically for separating a function name from a parenthesized expression that would otherwise be interpreted as the complete list of function arguments. (See examples above under &lt;a href=&quot;#Terms-and-List-Operators-%28Leftward%29&quot;&gt;&quot;Terms and List Operators (Leftward)&quot;&lt;/a&gt;.)</source>
          <target state="translated">単項 &lt;code&gt;&quot;+&quot;&lt;/code&gt; は、文字列に対しても何の効果もありません。これは、関数名を、関数の引数の完全なリストとして解釈される括弧で囲まれた式から分離するために構文的に役立ちます。（上記の&lt;a href=&quot;#Terms-and-List-Operators-%28Leftward%29&quot;&gt;「用語とリスト演算子（左向き）」の&lt;/a&gt;例を参照してください。）</target>
        </trans-unit>
        <trans-unit id="975143052b1e27f57ec5fcc07f42eb1c0eae9dc3" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;+&quot;&lt;/code&gt; has no effect whatsoever, even on strings. It is useful syntactically for separating a function name from a parenthesized expression that would otherwise be interpreted as the complete list of function arguments. (See examples above under &lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;Terms and List Operators (Leftward)&lt;/a&gt;.)</source>
          <target state="translated">単項 &lt;code&gt;&quot;+&quot;&lt;/code&gt; は、文字列に対してもまったく影響しません。これは、関数名を括弧で囲まれた式から分離するために構文的に便利です。そうしないと、関数の引数の完全なリストとして解釈されます。 （上記の&lt;a href=&quot;#Terms-and-List-Operators-(Leftward)&quot;&gt;用語とリスト演算子（左）の&lt;/a&gt;例を参照してください。）</target>
        </trans-unit>
        <trans-unit id="cbc2e014fe3be3f69d01617e0a9853fb77867e55" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;-&quot;&lt;/code&gt; performs arithmetic negation if the operand is numeric, including any string that looks like a number. If the operand is an identifier, a string consisting of a minus sign concatenated with the identifier is returned. Otherwise, if the string starts with a plus or minus, a string starting with the opposite sign is returned. One effect of these rules is that &lt;code&gt;-bareword&lt;/code&gt; is equivalent to the string &lt;code&gt;&quot;-bareword&quot;&lt;/code&gt; . If, however, the string begins with a non-alphabetic character (excluding &lt;code&gt;&quot;+&quot;&lt;/code&gt; or &lt;code&gt;&quot;-&quot;&lt;/code&gt; ), Perl will attempt to convert the string to a numeric, and the arithmetic negation is performed. If the string cannot be cleanly converted to a numeric, Perl will give the warning &lt;b&gt;Argument &quot;the string&quot; isn't numeric in negation (-) at ...&lt;/b&gt;.</source>
          <target state="translated">単項 &lt;code&gt;&quot;-&quot;&lt;/code&gt; は、オペランドが数値である場合、算術否定を実行します。オペランドが識別子の場合、識別子と連結されたマイナス記号で構成される文字列が返されます。それ以外の場合、文字列がプラスまたはマイナスで始まると、反対の符号で始まる文字列が返されます。これらのルールの1つの効果は、 &lt;code&gt;-bareword&lt;/code&gt; が文字列 &lt;code&gt;&quot;-bareword&quot;&lt;/code&gt; と同等であることです。ただし、文字列がアルファベット以外の文字（ &lt;code&gt;&quot;+&quot;&lt;/code&gt; または &lt;code&gt;&quot;-&quot;&lt;/code&gt; を除く）で始まる場合、Perlは文字列を数値に変換しようとし、算術否定が実行されます。文字列を数値にきれいに変換できない場合、Perlは警告を出します&lt;b&gt;引数 &quot;文字列&quot;は...の否定（-）で数値ではありません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="7bfdc53979623a8376c9812be313cb442d92714a" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;-&quot;&lt;/code&gt; performs arithmetic negation if the operand is numeric, including any string that looks like a number. If the operand is an identifier, a string consisting of a minus sign concatenated with the identifier is returned. Otherwise, if the string starts with a plus or minus, a string starting with the opposite sign is returned. One effect of these rules is that &lt;code&gt;-bareword&lt;/code&gt; is equivalent to the string &lt;code&gt;&quot;-bareword&quot;&lt;/code&gt;. If, however, the string begins with a non-alphabetic character (excluding &lt;code&gt;&quot;+&quot;&lt;/code&gt; or &lt;code&gt;&quot;-&quot;&lt;/code&gt;), Perl will attempt to convert the string to a numeric, and the arithmetic negation is performed. If the string cannot be cleanly converted to a numeric, Perl will give the warning &lt;b&gt;Argument &quot;the string&quot; isn't numeric in negation (-) at ...&lt;/b&gt;.</source>
          <target state="translated">単項 &lt;code&gt;&quot;-&quot;&lt;/code&gt; は、オペランドが数値の場合、数値のように見える文字列を含め、算術否定を実行します。オペランドが識別子の場合、識別子と連結されたマイナス記号で構成される文字列が返されます。それ以外の場合、文字列がプラスまたはマイナスで始まると、反対の符号で始まる文字列が返されます。これらのルールの効果の1つは、 &lt;code&gt;-bareword&lt;/code&gt; が文字列 &lt;code&gt;&quot;-bareword&quot;&lt;/code&gt; と同等であることです。ただし、文字列がアルファベット以外の文字（ &lt;code&gt;&quot;+&quot;&lt;/code&gt; または &lt;code&gt;&quot;-&quot;&lt;/code&gt; を除く）で始まる場合、Perlは文字列を数値に変換しようとし、算術否定が実行されます。文字列をきれいに数値に変換できない場合、Perlは警告を出します&lt;b&gt;引数「文字列」は、...で否定（-）の数値ではありません&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="75765e3d8911e6ac713c74a3a1fc1d709b9ed2ea" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;\&quot;&lt;/code&gt; creates a reference to whatever follows it. See &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt; and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;. Do not confuse this behavior with the behavior of backslash within a string, although both forms do convey the notion of protecting the next thing from interpolation.</source>
          <target state="translated">単項 &lt;code&gt;&quot;\&quot;&lt;/code&gt; は、それに続くものへの参照を作成します。&lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;および&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;参照してください。この動作と文字列内のバックスラッシュの動作を混同しないでください。どちらの形式も、次のものを補間から保護するという概念を伝えています。</target>
        </trans-unit>
        <trans-unit id="ebbcbdaf6ef9f2a6fa62770e3fce7999d3f8a59a" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;\&quot;&lt;/code&gt; creates references. If its operand is a single sigilled thing, it creates a reference to that object. If its operand is a parenthesised list, then it creates references to the things mentioned in the list. Otherwise it puts its operand in list context, and creates a list of references to the scalars in the list provided by the operand. See &lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt; and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;. Do not confuse this behavior with the behavior of backslash within a string, although both forms do convey the notion of protecting the next thing from interpolation.</source>
          <target state="translated">単項 &lt;code&gt;&quot;\&quot;&lt;/code&gt; は参照を作成します。そのオペランドが単一のsigilledである場合、そのオブジェクトへの参照を作成します。そのオペランドが括弧で囲まれたリストである場合、リストに記載されているものへの参照を作成します。それ以外の場合は、オペランドをリストコンテキストに配置し、オペランドによって提供されるリスト内のスカラーへの参照のリストを作成します。&lt;a href=&quot;perlreftut&quot;&gt;perlreftut&lt;/a&gt;および&lt;a href=&quot;perlref&quot;&gt;perlrefを&lt;/a&gt;参照してください。この動作を文字列内のバックスラッシュの動作と混同しないでください。ただし、どちらの形式も、次のものを補間から保護するという概念を伝えています。</target>
        </trans-unit>
        <trans-unit id="a440a050a6ba4df9312abb517ec0cbc1f89e1767" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;not&quot;&lt;/code&gt; returns the logical negation of the expression to its right. It's the equivalent of &lt;code&gt;&quot;!&quot;&lt;/code&gt; except for the very low precedence.</source>
          <target state="translated">単項 &lt;code&gt;&quot;not&quot;&lt;/code&gt; は、式の論理否定を右側に返します。 &lt;code&gt;&quot;!&quot;&lt;/code&gt; と同じです。優先度が非常に低い場合を除きます。</target>
        </trans-unit>
        <trans-unit id="eafed7c0deddc83d38ef5898a025102a424aea2a" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;~&quot;&lt;/code&gt; performs bitwise negation, that is, 1's complement. For example, &lt;code&gt;0666 &amp;amp; ~027&lt;/code&gt; is 0640. (See also &lt;a href=&quot;#Integer-Arithmetic&quot;&gt;&quot;Integer Arithmetic&quot;&lt;/a&gt; and &lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;&quot;Bitwise String Operators&quot;&lt;/a&gt;.) Note that the width of the result is platform-dependent: &lt;code&gt;~0&lt;/code&gt; is 32 bits wide on a 32-bit platform, but 64 bits wide on a 64-bit platform, so if you are expecting a certain bit width, remember to use the &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; operator to mask off the excess bits.</source>
          <target state="translated">単項 &lt;code&gt;&quot;~&quot;&lt;/code&gt; はビット単位の否定、つまり1の補数を実行します。例えば、 &lt;code&gt;0666 &amp;amp; ~027&lt;/code&gt; 0640（参照である&lt;a href=&quot;#Integer-Arithmetic&quot;&gt;「整数演算」&lt;/a&gt;と&lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;「ビット単位文字列演算子」&lt;/a&gt;結果の幅は、プラットフォーム依存性であること。）注： &lt;code&gt;~0&lt;/code&gt; 、32ビットプラットフォーム上で32ビット幅でありますただし、64ビットプラットフォームでは64ビット幅であるため、特定のビット幅が必要な場合は、 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 演算子を使用して余分なビットをマスクすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="4dae9b42247425fb7e1e868bc6aec93255104f04" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;&quot;~&quot;&lt;/code&gt; performs bitwise negation, that is, 1's complement. For example, &lt;code&gt;0666 &amp;amp; ~027&lt;/code&gt; is 0640. (See also &lt;a href=&quot;#Integer-Arithmetic&quot;&gt;Integer Arithmetic&lt;/a&gt; and &lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;Bitwise String Operators&lt;/a&gt;.) Note that the width of the result is platform-dependent: &lt;code&gt;~0&lt;/code&gt; is 32 bits wide on a 32-bit platform, but 64 bits wide on a 64-bit platform, so if you are expecting a certain bit width, remember to use the &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; operator to mask off the excess bits.</source>
          <target state="translated">単項 &lt;code&gt;&quot;~&quot;&lt;/code&gt; はビット単位の否定、つまり1の補数を実行します。例えば、 &lt;code&gt;0666 &amp;amp; ~027&lt;/code&gt; 0640である（また、ある&lt;a href=&quot;#Integer-Arithmetic&quot;&gt;整数算術&lt;/a&gt;及び&lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;ビット単位ストリング演算子&lt;/a&gt;：。）結果の幅は、プラットフォーム依存であることに留意されたい &lt;code&gt;~0&lt;/code&gt; 32ビットプラットフォーム上で32ビット幅であるが、64ビット幅64ビットプラットフォームでは、特定のビット幅が予想される場合は、 &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 演算子を使用して余分なビットをマスクしてください。</target>
        </trans-unit>
        <trans-unit id="121bb514c3415be69016271f5f8950c0aed3f161" translate="yes" xml:space="preserve">
          <source>Unbackslashed prototype characters have special meanings. Any unbackslashed &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; eats all remaining arguments, and forces list context. An argument represented by &lt;code&gt;$&lt;/code&gt; forces scalar context. An &lt;code&gt;&amp;amp;&lt;/code&gt; requires an anonymous subroutine, which, if passed as the first argument, does not require the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; keyword or a subsequent comma.</source>
          <target state="translated">バックスラッシュのないプロトタイプ文字には特別な意味があります。バックスラッシュなしの &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;%&lt;/code&gt; は、残りの引数をすべて使用し、リストコンテキストを強制します。 &lt;code&gt;$&lt;/code&gt; で表される引数は、スカラーコンテキストを強制します。 &lt;code&gt;&amp;amp;&lt;/code&gt; 、最初の引数として渡された場合は、必要ありません無名サブルーチン、必要と &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; キーワードまたは後続のカンマを。</target>
        </trans-unit>
        <trans-unit id="0f4206d3ad193e4f502eb8614314c82b73d3aac7" translate="yes" xml:space="preserve">
          <source>Unbackslashed prototype characters have special meanings. Any unbackslashed &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; eats all remaining arguments, and forces list context. An argument represented by &lt;code&gt;$&lt;/code&gt; forces scalar context. An &lt;code&gt;&amp;amp;&lt;/code&gt; requires an anonymous subroutine, which, if passed as the first argument, does not require the &lt;code&gt;sub&lt;/code&gt; keyword or a subsequent comma.</source>
          <target state="translated">バックスラッシュされていないプロトタイプ文字には特別な意味があります。バックスラッシュされていない &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;%&lt;/code&gt; は、残りのすべての引数を食い尽くし、リストコンテキストを強制します。 &lt;code&gt;$&lt;/code&gt; で表される引数は、スカラーコンテキストを強制します。 &lt;code&gt;&amp;amp;&lt;/code&gt; 、最初の引数として渡された場合は、必要ありません無名サブルーチン、必要と &lt;code&gt;sub&lt;/code&gt; キーワードまたは後続のカンマを。</target>
        </trans-unit>
        <trans-unit id="3738795de70b96657adef7c7eb0d0399db5d1dfd" translate="yes" xml:space="preserve">
          <source>Unbalanced context: %d more PUSHes than POPs</source>
          <target state="translated">アンバランスなコンテキスト:%d が POP よりも PUSH が多い</target>
        </trans-unit>
        <trans-unit id="fd301ac8b7825aca5986ed906c3a5149ebf3f404" translate="yes" xml:space="preserve">
          <source>Unbalanced saves: %d more saves than restores</source>
          <target state="translated">アンバランスなセーブ:%d のセーブ数がリストアよりも多い</target>
        </trans-unit>
        <trans-unit id="6c20914fff1ee5340b7195287825b168d65cf279" translate="yes" xml:space="preserve">
          <source>Unbalanced scopes: %d more ENTERs than LEAVEs</source>
          <target state="translated">アンバランスなスコープ:%d は、LEAVE よりも多くの ENTER を使用しています。</target>
        </trans-unit>
        <trans-unit id="353a68e15d6c873dffbe66b456319369d1b6b50f" translate="yes" xml:space="preserve">
          <source>Unbalanced string table refcount: (%d) for &quot;%s&quot;</source>
          <target state="translated">バランスの取れていない文字列テーブルの refcount。(%d)for &quot;%s&quot;</target>
        </trans-unit>
        <trans-unit id="d948ff04e713e8c3958319663d10246dfd6ee946" translate="yes" xml:space="preserve">
          <source>Unbalanced tmps: %d more allocs than frees</source>
          <target state="translated">不均衡な tmps:%d がフリーよりも多くのアロックスを使用している</target>
        </trans-unit>
        <trans-unit id="825c40d18a2a673a59517a26d2876574d355db3e" translate="yes" xml:space="preserve">
          <source>Uncompress gzip, zip, bzip2 or lzop file/buffer</source>
          <target state="translated">gzip、zip、bzip2、または lzop ファイル/バッファの解凍</target>
        </trans-unit>
        <trans-unit id="d920a6c2ef6eab3bfedd330e8191658438c99755" translate="yes" xml:space="preserve">
          <source>Uncompress gzip, zip, bzip2, xz, lzma, lzip, lzf or lzop file/buffer</source>
          <target state="translated">gzip,zip,bzip2,xz,lzma,lzip,lzf,lzop ファイル/バッファの解凍</target>
        </trans-unit>
        <trans-unit id="aed55ac0a8b1616e77c1e8b5f3fc823c056e7f68" translate="yes" xml:space="preserve">
          <source>Uncompress zlib-based (zip, gzip) file/buffer</source>
          <target state="translated">zlib ベースの (zip,gzip)ファイル/バッファの解凍</target>
        </trans-unit>
        <trans-unit id="5566ebf8e86133343de98e57588751d94f017699" translate="yes" xml:space="preserve">
          <source>Uncompresses &lt;code&gt;$input&lt;/code&gt; and writes the uncompressed data to &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$input&lt;/code&gt; を解凍し、解凍されたデータを &lt;code&gt;$output&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="28f5f3ca9546807770e11a4b5cc0101b027504cd" translate="yes" xml:space="preserve">
          <source>Uncompresses &lt;code&gt;$input&lt;/code&gt; and writes the uncompressed data to &lt;code&gt;$output&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$input&lt;/code&gt; を解凍し、解凍したデータを &lt;code&gt;$output&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="3241d8b84b7531f4c85af8e73c024fd4504975c7" translate="yes" xml:space="preserve">
          <source>Uncompresses &lt;code&gt;$source&lt;/code&gt; . If successful it returns the uncompressed data. Otherwise it returns</source>
          <target state="translated">&lt;code&gt;$source&lt;/code&gt; 解凍します。成功すると、非圧縮データが返されます。それ以外の場合は戻ります</target>
        </trans-unit>
        <trans-unit id="3e3d7aabce04dc1ae1923e54e8345382bb871093" translate="yes" xml:space="preserve">
          <source>Uncompresses &lt;code&gt;$source&lt;/code&gt;. If successful it returns the uncompressed data. Otherwise it returns</source>
          <target state="translated">&lt;code&gt;$source&lt;/code&gt; 解凍します。成功すると、圧縮されていないデータが返されます。それ以外の場合は戻ります</target>
        </trans-unit>
        <trans-unit id="ac8d3226186ea01833996c8b65de3f2a8379790e" translate="yes" xml:space="preserve">
          <source>Uncompression</source>
          <target state="translated">Uncompression</target>
        </trans-unit>
        <trans-unit id="4189d548d277ce627b98749a55c3556ffc35219e" translate="yes" xml:space="preserve">
          <source>Unconditionally match a bareword or any other single character, and then go back to step 1.</source>
          <target state="translated">無条件にベアワードやその他の単一の文字にマッチして、ステップ1に戻ります。</target>
        </trans-unit>
        <trans-unit id="577343970a5bf9b7cb8738f42c2797ca4589087a" translate="yes" xml:space="preserve">
          <source>Uncuddled elses and &quot;K&amp;amp;R&quot; style for indenting control constructs</source>
          <target state="translated">抱きしめられたelseと制御構造をインデントするための「K＆R」スタイル</target>
        </trans-unit>
        <trans-unit id="11c11d31d108dd964ce797e5076b1d8839850791" translate="yes" xml:space="preserve">
          <source>Uncuddled elses.</source>
          <target state="translated">他の人たちは寝ていない</target>
        </trans-unit>
        <trans-unit id="5cd9e75daaa9152346601595647eb2d9696e6583" translate="yes" xml:space="preserve">
          <source>Undef if an external</source>
          <target state="translated">外部の場合は未定義</target>
        </trans-unit>
        <trans-unit id="a6e635cf2fd6fb596c7dbe39947e67bb7ea6fa49" translate="yes" xml:space="preserve">
          <source>Undefined format</source>
          <target state="translated">未定義のフォーマット</target>
        </trans-unit>
        <trans-unit id="bc4f02e6922be60fefc3ec95167f2596c8a6d252" translate="yes" xml:space="preserve">
          <source>Undefined format &quot;%s&quot; called</source>
          <target state="translated">という未定義のフォーマット &quot;%s&quot; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="3c4edf1aebafd67a9b05c592beff7f41d45d0d8d" translate="yes" xml:space="preserve">
          <source>Undefined sort subroutine &quot;%s&quot; called</source>
          <target state="translated">という名前の未定義のソート・サブルーチン &quot;%s&quot;。</target>
        </trans-unit>
        <trans-unit id="4df75dc3ed124d993a3860e648584776b9c515c8" translate="yes" xml:space="preserve">
          <source>Undefined subroutine &amp;amp;%s called</source>
          <target state="translated">未定義のサブルーチン＆％sが呼び出されました</target>
        </trans-unit>
        <trans-unit id="b410752a7d8baa31a708ac9e0618b37a2bdd788d" translate="yes" xml:space="preserve">
          <source>Undefined subroutine &amp;amp;main::GetOptions called</source>
          <target state="translated">未定義のサブルーチン＆main :: GetOptionsが呼び出されました</target>
        </trans-unit>
        <trans-unit id="547eab04e6e04e1b4edec483ca694ca7539affef" translate="yes" xml:space="preserve">
          <source>Undefined subroutine called</source>
          <target state="translated">という未定義のサブルーチン</target>
        </trans-unit>
        <trans-unit id="264796a21d9347fe1112a79c8f0b60a38d55c6c6" translate="yes" xml:space="preserve">
          <source>Undefined subroutine in sort</source>
          <target state="translated">sort の未定義のサブルーチン</target>
        </trans-unit>
        <trans-unit id="6d3680cc6661c9c64f65a5465eb19c791369f48e" translate="yes" xml:space="preserve">
          <source>Undefined top format &quot;%s&quot; called</source>
          <target state="translated">と呼ばれる未定義のトップ形式 &quot;%s&quot;。</target>
        </trans-unit>
        <trans-unit id="fc0e7464ad33c8fd897b6e1f38879e9424a6041b" translate="yes" xml:space="preserve">
          <source>Undefined value assigned to typeglob</source>
          <target state="translated">typeglob に割り当てられた未定義の値</target>
        </trans-unit>
        <trans-unit id="4be1ae516287ece8c814ce973af8c8cef754916c" translate="yes" xml:space="preserve">
          <source>Undefines the array. Frees the memory used by the av to store its list of scalars. If any destructors are triggered as a result, the av itself may be freed.</source>
          <target state="translated">配列の定義を解除します。スカラーのリストを格納するために av が使用するメモリを解放します。結果としてデストラクタが起動された場合、AV 自体が解放されることがあります。</target>
        </trans-unit>
        <trans-unit id="54917ea2121718cf7348ee74d00c8feedc82f150" translate="yes" xml:space="preserve">
          <source>Undefines the array. The XS equivalent of &lt;code&gt;undef(@array)&lt;/code&gt;.</source>
          <target state="translated">配列の定義を解除します。 &lt;code&gt;undef(@array)&lt;/code&gt; に相当するXS 。</target>
        </trans-unit>
        <trans-unit id="270b863b48b0c13c0b01735bf826d9b654084021" translate="yes" xml:space="preserve">
          <source>Undefines the collation element as if it were unassigned in the &lt;code&gt;table&lt;/code&gt; . This reduces the size of the table. If an unassigned character appears in the string to be collated, the sort key is made from its codepoint as a single-character collation element, as it is greater than any other assigned collation elements (in the codepoint order among the unassigned characters). But, it'd be better to ignore characters unfamiliar to you and maybe never used.</source>
          <target state="translated">照合要素を &lt;code&gt;table&lt;/code&gt; 割り当て解除されたかのように定義解除します。これにより、テーブルのサイズが小さくなります。照合される文字列に割り当てられていない文字が含まれている場合、並べ替えキーは、他の割り当てられている照合要素よりも大きい（割り当てられていない文字間のコードポイント順）ため、コードポイントから単一文字の照合要素として作成されます。ただし、慣れていない、使用されていない可能性のある文字は無視することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6c572aa720a9e02b4868a08c5ea6700924c6a793" translate="yes" xml:space="preserve">
          <source>Undefines the collation element as if it were unassigned in the &lt;code&gt;table&lt;/code&gt;. This reduces the size of the table. If an unassigned character appears in the string to be collated, the sort key is made from its codepoint as a single-character collation element, as it is greater than any other assigned collation elements (in the codepoint order among the unassigned characters). But, it'd be better to ignore characters unfamiliar to you and maybe never used.</source>
          <target state="translated">&lt;code&gt;table&lt;/code&gt; 割り当てが解除されているかのように、照合要素の定義を解除します。これにより、テーブルのサイズが小さくなります。割り当てられていない文字が照合対象の文字列に表示される場合、ソートキーは、他の割り当てられた照合要素よりも大きいため（割り当てられていない文字間のコードポイントの順序で）、コードポイントから単一文字の照合要素として作成されます。ただし、なじみのない文字や使用したことがない文字は無視したほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="7b61a323c52c38306eb024952539f4f8c5a7ffe3" translate="yes" xml:space="preserve">
          <source>Undefines the hash. The XS equivalent of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef(%hash)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハッシュを未定義にします。 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef(%hash)&lt;/a&gt;&lt;/code&gt; に相当するXS 。</target>
        </trans-unit>
        <trans-unit id="1e5b088250fea82ab591b0cfc87d6babcdba55fe" translate="yes" xml:space="preserve">
          <source>Undefines the hash. The XS equivalent of &lt;code&gt;undef(%hash)&lt;/code&gt;.</source>
          <target state="translated">ハッシュの定義を解除します。 &lt;code&gt;undef(%hash)&lt;/code&gt; に相当するXS 。</target>
        </trans-unit>
        <trans-unit id="21918cc87ca44856538ac74361e547848b42b7b4" translate="yes" xml:space="preserve">
          <source>Undefines the value of EXPR, which must be an lvalue. Use only on a scalar value, an array (using &lt;code&gt;@&lt;/code&gt; ), a hash (using &lt;code&gt;%&lt;/code&gt; ), a subroutine (using &lt;code&gt;&amp;amp;&lt;/code&gt; ), or a typeglob (using &lt;code&gt;*&lt;/code&gt; ). Saying &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; will probably not do what you expect on most predefined variables or DBM list values, so don't do that; see &lt;a href=&quot;#delete&quot;&gt;delete&lt;/a&gt;. Always returns the undefined value. You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter. Examples:</source>
          <target state="translated">左辺値でなければならないEXPRの値を未定義にします。スカラー値、配列（ &lt;code&gt;@&lt;/code&gt; を使用）、ハッシュ（ &lt;code&gt;%&lt;/code&gt; を使用）、サブルーチン（ &lt;code&gt;&amp;amp;&lt;/code&gt; を使用）、または型グロブ（ &lt;code&gt;*&lt;/code&gt; を使用）でのみ使用します。言って &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; 、おそらくあなたがそうすることををしない、ほとんどの定義済みの変数やDBMリスト値に何を期待しないだろう。&lt;a href=&quot;#delete&quot;&gt;削除を&lt;/a&gt;参照してください。常に未定義の値を返します。 EXPRを省略できます。この場合、未定義のものはありませんが、未定義の値を取得できます。たとえば、サブルーチンから返されたり、変数に割り当てたり、パラメーターとして渡すことができます。例：</target>
        </trans-unit>
        <trans-unit id="12772c94a5d6a3598c32da79f4c1c4affc5b608e" translate="yes" xml:space="preserve">
          <source>Undefines the value of EXPR, which must be an lvalue. Use only on a scalar value, an array (using &lt;code&gt;@&lt;/code&gt; ), a hash (using &lt;code&gt;%&lt;/code&gt; ), a subroutine (using &lt;code&gt;&amp;amp;&lt;/code&gt; ), or a typeglob (using &lt;code&gt;*&lt;/code&gt; ). Saying &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; will probably not do what you expect on most predefined variables or DBM list values, so don't do that; see &lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;. Always returns the undefined value. You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter. Examples:</source>
          <target state="translated">左辺値でなければならないEXPRの値を未定義にします。スカラー値、配列（ &lt;code&gt;@&lt;/code&gt; を使用）、ハッシュ（ &lt;code&gt;%&lt;/code&gt; を使用）、サブルーチン（ &lt;code&gt;&amp;amp;&lt;/code&gt; を使用）、または型グロブ（ &lt;code&gt;*&lt;/code&gt; を使用）でのみ使用します。言って &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt; $hash{$key}&lt;/code&gt; 、おそらくあなたがそうすることををしない、ほとんどの定義済みの変数やDBMリスト値に何を期待しないだろう。&lt;a href=&quot;delete&quot;&gt;削除を&lt;/a&gt;参照してください。常に未定義の値を返します。 EXPRを省略できます。この場合、未定義のものはありませんが、未定義の値を取得できます。たとえば、サブルーチンから返されたり、変数に割り当てたり、パラメーターとして渡すことができます。例：</target>
        </trans-unit>
        <trans-unit id="638220651f84b9cd00c5941897d28ba69d79dc1a" translate="yes" xml:space="preserve">
          <source>Undefines the value of EXPR, which must be an lvalue. Use only on a scalar value, an array (using &lt;code&gt;@&lt;/code&gt;), a hash (using &lt;code&gt;%&lt;/code&gt;), a subroutine (using &lt;code&gt;&amp;amp;&lt;/code&gt;), or a typeglob (using &lt;code&gt;*&lt;/code&gt;). Saying &lt;code&gt;undef $hash{$key}&lt;/code&gt; will probably not do what you expect on most predefined variables or DBM list values, so don't do that; see &lt;a href=&quot;#delete-EXPR&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;. Always returns the undefined value. You can omit the EXPR, in which case nothing is undefined, but you still get an undefined value that you could, for instance, return from a subroutine, assign to a variable, or pass as a parameter. Examples:</source>
          <target state="translated">EXPRの値を未定義にします。これは左辺値でなければなりません。スカラー値、配列（ &lt;code&gt;@&lt;/code&gt; を使用）、ハッシュ（ &lt;code&gt;%&lt;/code&gt; を使用）、サブルーチン（ &lt;code&gt;&amp;amp;&lt;/code&gt; を使用）、またはタイプグロブ（ &lt;code&gt;*&lt;/code&gt; を使用）でのみ使用してください。言って &lt;code&gt;undef $hash{$key}&lt;/code&gt; 、おそらくあなたがそうすることををしない、ほとんどの定義済みの変数やDBMリスト値に何を期待しないだろう。&lt;a href=&quot;#delete-EXPR&quot;&gt; &lt;code&gt;delete&lt;/code&gt; &lt;/a&gt;参照してください。常に未定義の値を返します。EXPRを省略できます。その場合、未定義のものは何もありませんが、たとえば、サブルーチンから返す、変数に割り当てる、またはパラメーターとして渡すことができる未定義の値を取得します。例：</target>
        </trans-unit>
        <trans-unit id="8b42ea56822642513e4f112de38357bed9dd6a64" translate="yes" xml:space="preserve">
          <source>Undefining this symbol disables the PerlIO abstraction. PerlIO is now the default; it is not recommended to disable PerlIO.</source>
          <target state="translated">このシンボルを定義しないと、PerlIO の抽象化を無効にします。PerlIO は現在デフォルトです。</target>
        </trans-unit>
        <trans-unit id="14931b1ffe46d4f806d87924392ea8d8ba051a3f" translate="yes" xml:space="preserve">
          <source>Undefining this symbol forces Perl to be compiled statically.</source>
          <target state="translated">このシンボルを定義しないと、Perl は静的にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="55d31ccf7c7a9061158740ae0e4ba2a4be4c51d6" translate="yes" xml:space="preserve">
          <source>Under &quot;Classic&quot; MacOS, a perl program will have the appropriate Creator and Type, so that double-clicking them will invoke the MacPerl application. Under Mac OS X, clickable apps can be made from any &lt;code&gt;#!&lt;/code&gt; script using Wil Sanchez' DropScript utility: &lt;a href=&quot;http://www.wsanchez.net/software/&quot;&gt;http://www.wsanchez.net/software/&lt;/a&gt; .</source>
          <target state="translated">「クラシック」MacOSでは、perlプログラムに適切なクリエーターとタイプがあり、それらをダブルクリックするとMacPerlアプリケーションが呼び出されます。Mac OS Xでは、クリック可能なアプリはどの &lt;code&gt;#!&lt;/code&gt; からでも作成できます。Wil SanchezのDropScriptユーティリティを使用したスクリプト：&lt;a href=&quot;http://www.wsanchez.net/software/&quot;&gt;http&lt;/a&gt; ://www.wsanchez.net/software/ 。</target>
        </trans-unit>
        <trans-unit id="7de147ca0cf42a020c2b34e4934080e8fbf00bba" translate="yes" xml:space="preserve">
          <source>Under &lt;a href=&quot;../test/harness&quot;&gt;Test::Harness&lt;/a&gt;, test number 2 would</source>
          <target state="translated">&lt;a href=&quot;../test/harness&quot;&gt;Test :: Harnessの&lt;/a&gt;下で、テスト番号2は</target>
        </trans-unit>
        <trans-unit id="830e70bc7050b5ad58debeaf947b37217d6be21e" translate="yes" xml:space="preserve">
          <source>Under &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt;, test number 2 would</source>
          <target state="translated">&lt;a href=&quot;Test::Harness&quot;&gt;Test :: Harnessの&lt;/a&gt;下で、テスト番号2は</target>
        </trans-unit>
        <trans-unit id="50510298fcc80cb0b2cfe5fcb98eb1382cb9d484" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; , detection step of discontiguous contractions will be skipped.</source>
          <target state="translated">下の &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; 、不連続収縮の検出ステップはスキップされます。</target>
        </trans-unit>
        <trans-unit id="6a769e92dc491fba4fdaa440dbac9751e38e85b4" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt;, detection step of discontiguous contractions will be skipped.</source>
          <target state="translated">&lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt; 下では、不連続な収縮の検出ステップはスキップされます。</target>
        </trans-unit>
        <trans-unit id="da1bc7be7a27894ec56a14e00f77fdf88c07658e" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature &quot;array_base&quot;&lt;/code&gt; , &lt;code&gt;$[&lt;/code&gt; no longer has any effect, and always contains 0. Assigning 0 to it is permitted, but any other value will produce an error.</source>
          <target state="translated">下で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.16&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; feature &quot;array_base&quot;&lt;/code&gt; 、 &lt;code&gt;$[&lt;/code&gt; もはや効果がありませんし、常にそれに0が許可されている割り当ては0が含まれていますが、それ以外の値はエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="bacf555aace53131b41a0f7ef63c9e3e7d03589b" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;unicode_strings&lt;/code&gt; starting in Perl 5.12.0, Unicode rules are generally used. See &lt;a href=&quot;functions/lc&quot;&gt;lc&lt;/a&gt; for details on how this works in combination with various other pragmas.</source>
          <target state="translated">下に &lt;code&gt;unicode_strings&lt;/code&gt; はPerl 5.12で始まる、Unicodeのルールは一般的に使用されています。参照してください&lt;a href=&quot;functions/lc&quot;&gt;LC&lt;/a&gt;これは、様々な他のプラグマとの組み合わせでどのように機能するかの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="f60303853e6438f23bfd0e7253ff8d6666354a3e" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;unicode_strings&lt;/code&gt; starting in Perl 5.12.0, Unicode rules are generally used. See &lt;a href=&quot;perlfunc#lc&quot;&gt;&quot;lc&quot; in perlfunc&lt;/a&gt; for details on how this works in combination with various other pragmas.</source>
          <target state="translated">下に &lt;code&gt;unicode_strings&lt;/code&gt; はPerl 5.12で始まる、Unicodeのルールは一般的に使用されています。参照してください&lt;a href=&quot;perlfunc#lc&quot;&gt;perlfuncの中に「LC」&lt;/a&gt;方法の詳細については、様々な他のプラグマとの組み合わせで、この作品。</target>
        </trans-unit>
        <trans-unit id="94fe5caf324bcb104f1845ec70df5cb17cd45071" translate="yes" xml:space="preserve">
          <source>Under Cygwin, $^E is the same as $!. When using &lt;a href=&quot;http://search.cpan.org/perldoc/Win32&quot;&gt;Win32 API Functions&lt;/a&gt;, use &lt;code&gt;Win32::GetLastError()&lt;/code&gt; to get the last Windows error.</source>
          <target state="translated">Cygwinでは、$ ^ Eは$！と同じです。使用している場合&lt;a href=&quot;http://search.cpan.org/perldoc/Win32&quot;&gt;のWin32 API関数を&lt;/a&gt;使用する &lt;code&gt;Win32::GetLastError()&lt;/code&gt; 最後のWindowsのエラーを取得します。</target>
        </trans-unit>
        <trans-unit id="bf1bd7b89a19b28d20d4df86f951acf9fc393dd7" translate="yes" xml:space="preserve">
          <source>Under Cygwin, $^E is the same as $!. When using &lt;a href=&quot;win32&quot;&gt;Win32 API Functions&lt;/a&gt;, use &lt;code&gt;Win32::GetLastError()&lt;/code&gt; to get the last Windows error.</source>
          <target state="translated">Cygwinでは、$ ^ Eは$！と同じです。使用している場合&lt;a href=&quot;win32&quot;&gt;のWin32 API関数を&lt;/a&gt;使用する &lt;code&gt;Win32::GetLastError()&lt;/code&gt; 最後のWindowsのエラーを取得します。</target>
        </trans-unit>
        <trans-unit id="08490cc0df2a509f16cddc3cf2a4ae40e649767f" translate="yes" xml:space="preserve">
          <source>Under EBCDIC platforms, &lt;code&gt;e2char($n)&lt;/code&gt; may not always be the same as &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(e2charnum($n))&lt;/a&gt;&lt;/code&gt;, and ditto for &lt;code&gt;$Name2character{$name}&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr($Name2character_number{$name})&lt;/a&gt;&lt;/code&gt;, because the strings are returned as native, and the numbers are returned as Unicode. However, for Perls starting with v5.8, &lt;code&gt;e2char($n)&lt;/code&gt; is the same as &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native(e2charnum($n)))&lt;/a&gt;&lt;/code&gt;, and ditto for &lt;code&gt;$Name2character{$name}&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native($Name2character_number{$name}))&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">EBCDICプラットフォームでは、文字列が返されるため、 &lt;code&gt;e2char($n)&lt;/code&gt; は必ずしも &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(e2charnum($n))&lt;/a&gt;&lt;/code&gt; と同じであるとは限らず、 &lt;code&gt;$Name2character{$name}&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr($Name2character_number{$name})&lt;/a&gt;&lt;/code&gt; 同上ネイティブとして、番号はUnicodeとして返されます。ただし、v5.8以降の &lt;code&gt;e2char($n)&lt;/code&gt; 場合、e2char（$ n）は &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native(e2charnum($n)))&lt;/a&gt;&lt;/code&gt; と同じであり、 &lt;code&gt;$Name2character{$name}&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../functions/chr&quot;&gt;chr(utf8::unicode_to_native($Name2character_number{$name}))&lt;/a&gt;&lt;/code&gt; ディットは同じです。 （$ Name2character_number {$ name}））。</target>
        </trans-unit>
        <trans-unit id="24801e56e20625b1799dc0d5ebdcc72e9b0dcde9" translate="yes" xml:space="preserve">
          <source>Under EBCDIC platforms, &lt;code&gt;e2char($n)&lt;/code&gt; may not always be the same as &lt;code&gt;chr(e2charnum($n))&lt;/code&gt;, and ditto for &lt;code&gt;$Name2character{$name}&lt;/code&gt; and &lt;code&gt;chr($Name2character_number{$name})&lt;/code&gt;, because the strings are returned as native, and the numbers are returned as Unicode. However, for Perls starting with v5.8, &lt;code&gt;e2char($n)&lt;/code&gt; is the same as &lt;code&gt;chr(utf8::unicode_to_native(e2charnum($n)))&lt;/code&gt;, and ditto for &lt;code&gt;$Name2character{$name}&lt;/code&gt; and &lt;code&gt;chr(utf8::unicode_to_native($Name2character_number{$name}))&lt;/code&gt;.</source>
          <target state="translated">EBCDICプラットフォームでは、文字列が返されるため、 &lt;code&gt;e2char($n)&lt;/code&gt; は &lt;code&gt;chr(e2charnum($n))&lt;/code&gt; と常に同じであるとは限らず、 &lt;code&gt;$Name2character{$name}&lt;/code&gt; および &lt;code&gt;chr($Name2character_number{$name})&lt;/code&gt; 場合も同様です。ネイティブとして、数値はUnicodeとして返されます。ただし、v5.8以降の &lt;code&gt;e2char($n)&lt;/code&gt; 場合、e2char（$ n）は &lt;code&gt;chr(utf8::unicode_to_native(e2charnum($n)))&lt;/code&gt; と同じであり、 &lt;code&gt;$Name2character{$name}&lt;/code&gt; および &lt;code&gt;chr(utf8::unicode_to_native($Name2character_number{$name}))&lt;/code&gt; ）も同様です。 （$ Name2character_number {$ name}））。</target>
        </trans-unit>
        <trans-unit id="1fc50122941a9cec999fb031245122855f9d5976" translate="yes" xml:space="preserve">
          <source>Under NFS this will use the time of the NFS server, not the time of the local machine. If there is a time synchronization problem, the NFS server and local machine will have different times. The Unix &lt;a href=&quot;http://man.he.net/man1/touch&quot;&gt;touch(1)&lt;/a&gt; command will in fact normally use this form instead of the one shown in the first example.</source>
          <target state="translated">NFSでは、これはローカルマシンの時刻ではなく、NFSサーバーの時刻を使用します。時刻の同期に問題がある場合、NFSサーバーとローカルマシンの時刻は異なります。実際、Unix &lt;a href=&quot;http://man.he.net/man1/touch&quot;&gt;touch（1）&lt;/a&gt;コマンドは通常、最初の例に示されている形式ではなく、この形式を使用します。</target>
        </trans-unit>
        <trans-unit id="18254acc65d18b7ddbf875f7bfc47db0d75ce39a" translate="yes" xml:space="preserve">
          <source>Under NFS this will use the time of the NFS server, not the time of the local machine. If there is a time synchronization problem, the NFS server and local machine will have different times. The Unix touch(1) command will in fact normally use this form instead of the one shown in the first example.</source>
          <target state="translated">NFS の場合、ローカルマシンの時刻ではなく、NFS サーバーの時刻が使用されます。時刻同期の問題がある場合、NFS サーバとローカルマシンの時刻は異なります。Unix の touch(1)コマンドは、実際には最初の例に示したものではなく、この形式を使用します。</target>
        </trans-unit>
        <trans-unit id="f3924a4fe96e1e85710f171a0842dfde3423eb52" translate="yes" xml:space="preserve">
          <source>Under OS/2, &lt;code&gt;$^E&lt;/code&gt; is set to the error code of the last call to OS/2 API either via CRT, or directly from perl.</source>
          <target state="translated">OS / 2では、 &lt;code&gt;$^E&lt;/code&gt; はCRTを介して、またはperlから直接、OS / 2 APIへの最後の呼び出しのエラーコードに設定されます。</target>
        </trans-unit>
        <trans-unit id="19dcdc34494760727e410f497dbed91a176d6c5e" translate="yes" xml:space="preserve">
          <source>Under Perl 5.10 only, using a string eval when &lt;code&gt;autodie&lt;/code&gt; is in effect can cause the autodie behaviour to leak into the surrounding scope. This can be worked around by using a &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie&lt;/code&gt; at the end of the scope to explicitly remove autodie's effects, or by avoiding the use of string eval.</source>
          <target state="translated">Perl 5.10のみで、 &lt;code&gt;autodie&lt;/code&gt; が有効なときに文字列evalを使用すると、autodieの動作が周囲のスコープにリークする可能性があります。これは、オートダイの効果を明示的に削除するためにスコープの最後に &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; autodie&lt;/code&gt; を使用するか、文字列evalの使用を回避することで回避できます。</target>
        </trans-unit>
        <trans-unit id="141394caeda9c5ad5a22f24134bab7c210cd57fb" translate="yes" xml:space="preserve">
          <source>Under Perl 5.10 only, using a string eval when &lt;code&gt;autodie&lt;/code&gt; is in effect can cause the autodie behaviour to leak into the surrounding scope. This can be worked around by using a &lt;code&gt;no autodie&lt;/code&gt; at the end of the scope to explicitly remove autodie's effects, or by avoiding the use of string eval.</source>
          <target state="translated">Perl 5.10でのみ、 &lt;code&gt;autodie&lt;/code&gt; が有効なときに文字列evalを使用すると、autodieの動作が周囲のスコープにリークする可能性があります。これは、スコープの最後に &lt;code&gt;no autodie&lt;/code&gt; を使用してautodieの効果を明示的に削除するか、文字列evalの使用を回避することで回避できます。</target>
        </trans-unit>
        <trans-unit id="1824d549ede70b3449b6bc94fa47857184a96f9f" translate="yes" xml:space="preserve">
          <source>Under Perl 5.18 and later, SvREADONLY only applies to read-only variables, and, under 5.20, copy-on-write scalars can also be read-only, so the above check is incorrect. You just want:</source>
          <target state="translated">Perl 5.18 以降では、SvREADONLY は読み取り専用の変数にのみ適用され、5.20 ではコピーオンライトのスカラも読み取り専用になるので、上記のチェックは正しくありません。欲しいだけです。</target>
        </trans-unit>
        <trans-unit id="8d107d150b9abd6d04d1d29a993fa6ea829d9209" translate="yes" xml:space="preserve">
          <source>Under Perl 5.8 only, &lt;code&gt;autodie&lt;/code&gt;</source>
          <target state="translated">Perl 5.8でのみ、 &lt;code&gt;autodie&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e28f5c058f0915564622ac46660d6f84c05ab318" translate="yes" xml:space="preserve">
          <source>Under Perl 5.8, the &lt;code&gt;given/when&lt;/code&gt; structure is not available, so the following structure may be used:</source>
          <target state="translated">Perl 5.8では、 &lt;code&gt;given/when&lt;/code&gt; 構造が使用できないため、次の構造を使用できます。</target>
        </trans-unit>
        <trans-unit id="ef993909ab6a97a91baf7e650bc7ce46f77c2516" translate="yes" xml:space="preserve">
          <source>Under QNX 6.2.0 there are still a few tests which fail. See below and hints/qnx.sh for more information.</source>
          <target state="translated">QNX 6.2.0 では、まだいくつかのテストが失敗しています。詳細については、以下と hints/qnx.sh を参照してください。</target>
        </trans-unit>
        <trans-unit id="66b5ec5cf7fb5924aee8dffa63eba13ccd60d52e" translate="yes" xml:space="preserve">
          <source>Under Unicode rules, there are a few case-insensitive matches that cross the 255/256 boundary. Except for UTF-8 locales in Perls v5.20 and later, these are disallowed under &lt;code&gt;/l&lt;/code&gt; . For example, 0xFF (on ASCII platforms) does not caselessly match the character at 0x178, &lt;code&gt;LATIN
CAPITAL LETTER Y WITH DIAERESIS&lt;/code&gt; , because 0xFF may not be &lt;code&gt;LATIN SMALL
LETTER Y WITH DIAERESIS&lt;/code&gt; in the current locale, and Perl has no way of knowing if that character even exists in the locale, much less what code point it is.</source>
          <target state="translated">Unicodeルールでは、255/256の境界を越える大文字と小文字を区別しない一致がいくつかあります。Perl v5.20以降のUTF-8ロケールを除き、これらは &lt;code&gt;/l&lt;/code&gt; で許可されていません。たとえば、0xFF（ASCIIプラットフォームの場合）は、0x178の文字に大文字と &lt;code&gt;LATIN CAPITAL LETTER Y WITH DIAERESIS&lt;/code&gt; を区別せずに一致しません。これは、0xFFが現在のロケールの &lt;code&gt;LATIN SMALL LETTER Y WITH DIAERESIS&lt;/code&gt; でない場合があり、Perlがそれを認識する方法がないためです。文字はロケールにさえ存在しますが、それがどのコードポイントであるかははるかに少ないです。</target>
        </trans-unit>
        <trans-unit id="a229f317f16db87320c5e41b43cc77785168f869" translate="yes" xml:space="preserve">
          <source>Under Unicode rules, there are a few case-insensitive matches that cross the 255/256 boundary. Except for UTF-8 locales in Perls v5.20 and later, these are disallowed under &lt;code&gt;/l&lt;/code&gt;. For example, 0xFF (on ASCII platforms) does not caselessly match the character at 0x178, &lt;code&gt;LATIN CAPITAL LETTER Y WITH DIAERESIS&lt;/code&gt;, because 0xFF may not be &lt;code&gt;LATIN SMALL LETTER Y WITH DIAERESIS&lt;/code&gt; in the current locale, and Perl has no way of knowing if that character even exists in the locale, much less what code point it is.</source>
          <target state="translated">Unicode規則では、255/256の境界を越える大文字と小文字を区別しない一致がいくつかあります。Perl v5.20以降のUTF-8ロケールを除いて、これらは &lt;code&gt;/l&lt;/code&gt; では許可されていません。たとえば、0xFF（ASCIIプラットフォームの場合）は、0x178の文字と大文字と &lt;code&gt;LATIN CAPITAL LETTER Y WITH DIAERESIS&lt;/code&gt; を区別せずに一致しません。これは、0xFFが現在のロケールの &lt;code&gt;LATIN SMALL LETTER Y WITH DIAERESIS&lt;/code&gt; ではない可能性があり、Perlがそれを知る方法がないためです。文字はロケールにさえ存在し、それがどのコードポイントであるかははるかに少ないです。</target>
        </trans-unit>
        <trans-unit id="666da3b151d79c3526ad94c74b4a7b5272bc4ad7" translate="yes" xml:space="preserve">
          <source>Under Unicode rules, these upper-Latin1 characters are interpreted as Unicode code points, which means they have the same semantics as Latin-1 (ISO-8859-1) and C1 controls.</source>
          <target state="translated">Unicode規則の下では、これらの上位Latin1文字はUnicodeコードポイントとして解釈され、Latin-1(ISO-8859-1)やC1コントロールと同じセマンティクスを持っていることを意味します。</target>
        </trans-unit>
        <trans-unit id="15d191765263aacd2b7fcad31e78fb6cf886a85b" translate="yes" xml:space="preserve">
          <source>Under VMS this reflects the actual VMS exit status; i.e. it is the same as &lt;code&gt;$?&lt;/code&gt; when the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; is in effect.</source>
          <target state="translated">VMSでは、これは実際のVMS終了ステータスを反映します。つまり、それは &lt;code&gt;$?&lt;/code&gt; と同じですか？プラグマ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; している場合。</target>
        </trans-unit>
        <trans-unit id="c6482226ed3d921882dbfe662280c6e28493cbae" translate="yes" xml:space="preserve">
          <source>Under VMS this reflects the actual VMS exit status; i.e. it is the same as &lt;code&gt;$?&lt;/code&gt; when the pragma &lt;code&gt;use vmsish 'status'&lt;/code&gt; is in effect.</source>
          <target state="translated">VMSでは、これは実際のVMS終了ステータスを反映します。つまり、 &lt;code&gt;$?&lt;/code&gt; と同じですか？プラグマ &lt;code&gt;use vmsish 'status'&lt;/code&gt; が有効な場合。</target>
        </trans-unit>
        <trans-unit id="737324e93129014d33d4923a010ebe747aa167f7" translate="yes" xml:space="preserve">
          <source>Under VMS, &lt;code&gt;$^E&lt;/code&gt; provides the VMS status value from the last system error. This is more specific information about the last system error than that provided by &lt;code&gt;$!&lt;/code&gt; . This is particularly important when &lt;code&gt;$!&lt;/code&gt; is set to &lt;b&gt;EVMSERR&lt;/b&gt;.</source>
          <target state="translated">VMSでは、 &lt;code&gt;$^E&lt;/code&gt; は最後のシステムエラーからのVM​​Sステータス値を提供します。これは、 &lt;code&gt;$!&lt;/code&gt; によって提供されるものよりも、最後のシステムエラーに関するより具体的な情報です。。 &lt;code&gt;$!&lt;/code&gt; 場合、これは特に重要です。&lt;b&gt;EVMSERRに&lt;/b&gt;設定され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="76dfcc4ab4ed83661a267ed44726342ca382d02d" translate="yes" xml:space="preserve">
          <source>Under VMS, &lt;code&gt;$^E&lt;/code&gt; provides the VMS status value from the last system error. This is more specific information about the last system error than that provided by &lt;code&gt;$!&lt;/code&gt;. This is particularly important when &lt;code&gt;$!&lt;/code&gt; is set to &lt;b&gt;EVMSERR&lt;/b&gt;.</source>
          <target state="translated">VMSでは、 &lt;code&gt;$^E&lt;/code&gt; は最後のシステムエラーからのVM​​Sステータス値を提供します。これは、 &lt;code&gt;$!&lt;/code&gt; によって提供される情報よりも、最後のシステムエラーに関するより具体的な情報です。。 &lt;code&gt;$!&lt;/code&gt; の場合、これは特に重要です。&lt;b&gt;EVMSERRに&lt;/b&gt;設定され&lt;b&gt;ます&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="50b3f98ca540bd0c81d34840956f838255c71318" translate="yes" xml:space="preserve">
          <source>Under VMS, if there is no directory information in the $path, then the current default device and directory is used.</source>
          <target state="translated">VMS では、$path にディレクトリ情報がない場合は、現在のデフォルトのデバイスとディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="3aaae4cddb5ecef27b2c450c8cc4b4b174c7016f" translate="yes" xml:space="preserve">
          <source>Under VMS, the pragma &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; makes &lt;code&gt;$?&lt;/code&gt; reflect the actual VMS exit status, instead of the default emulation of POSIX status; see &lt;a href=&quot;perlvms#%24%3f&quot;&gt;$? in perlvms&lt;/a&gt; for details.</source>
          <target state="translated">VMSでは、プラグマ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vmsish 'status'&lt;/code&gt; を使用して &lt;code&gt;$?&lt;/code&gt; POSIXステータスのデフォルトのエミュレーションではなく、実際のVMS終了ステータスを反映します。参照&lt;a href=&quot;perlvms#%24%3f&quot;&gt;$を？&lt;/a&gt;詳細はperlvmsで。</target>
        </trans-unit>
        <trans-unit id="9fe540ff184660416cab5f62ce2d7a86b31b31b4" translate="yes" xml:space="preserve">
          <source>Under VMS, the pragma &lt;code&gt;use vmsish 'status'&lt;/code&gt; makes &lt;code&gt;$?&lt;/code&gt; reflect the actual VMS exit status, instead of the default emulation of POSIX status; see &lt;a href=&quot;perlvms#%24%3F&quot;&gt;&quot;$?&quot; in perlvms&lt;/a&gt; for details.</source>
          <target state="translated">VMSでは、プラグマ &lt;code&gt;use vmsish 'status'&lt;/code&gt; は &lt;code&gt;$?&lt;/code&gt; POSIXステータスのデフォルトのエミュレーションではなく、実際のVMS終了ステータスを反映します。&lt;a href=&quot;perlvms#%24%3F&quot;&gt;「$？」を&lt;/a&gt;参照してください 詳細については、perlvmsで。</target>
        </trans-unit>
        <trans-unit id="711e7c0754f84b5e7bda634825aa4039a4a70c54" translate="yes" xml:space="preserve">
          <source>Under Win32's &quot;test&quot; target you may use the TEST_SWITCHES and TEST_FILES environment variables to control the behaviour of</source>
          <target state="translated">Win32 の &quot;test&quot; ターゲットでは、環境変数 TEST_SWITCHES と TEST_FILES を使用して</target>
        </trans-unit>
        <trans-unit id="53c6d0758bf54648c779157ed9111dd650df9efe" translate="yes" xml:space="preserve">
          <source>Under Win32, &lt;code&gt;$^E&lt;/code&gt; always returns the last error information reported by the Win32 call &lt;code&gt;GetLastError()&lt;/code&gt; which describes the last error from within the Win32 API. Most Win32-specific code will report errors via &lt;code&gt;$^E&lt;/code&gt; . ANSI C and Unix-like calls set &lt;code&gt;errno&lt;/code&gt; and so most portable Perl code will report errors via &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">Win32では、 &lt;code&gt;$^E&lt;/code&gt; 常に、Win32 API内からの最後のエラーを記述するWin32呼び出し &lt;code&gt;GetLastError()&lt;/code&gt; によって報告された最後のエラー情報を返します。ほとんどのWin32固有のコードは &lt;code&gt;$^E&lt;/code&gt; 介してエラーを報告します。ANSI CおよびUnixのような呼び出しは &lt;code&gt;errno&lt;/code&gt; を設定するため、ほとんどの移植可能なPerlコードは &lt;code&gt;$!&lt;/code&gt; を介してエラーを報告します。。</target>
        </trans-unit>
        <trans-unit id="9e14095c735f4241ba86445b598120697973ed27" translate="yes" xml:space="preserve">
          <source>Under Win32, &lt;code&gt;$^E&lt;/code&gt; always returns the last error information reported by the Win32 call &lt;code&gt;GetLastError()&lt;/code&gt; which describes the last error from within the Win32 API. Most Win32-specific code will report errors via &lt;code&gt;$^E&lt;/code&gt;. ANSI C and Unix-like calls set &lt;code&gt;errno&lt;/code&gt; and so most portable Perl code will report errors via &lt;code&gt;$!&lt;/code&gt;.</source>
          <target state="translated">Win32では、 &lt;code&gt;$^E&lt;/code&gt; 常に、Win32 API内からの最後のエラーを説明する &lt;code&gt;GetLastError()&lt;/code&gt; のWin32呼び出しによって報告された最後のエラー情報を返します。ほとんどのWin32固有のコードは、 &lt;code&gt;$^E&lt;/code&gt; 介してエラーを報告します。ANSI CおよびUnixライクな呼び出しは &lt;code&gt;errno&lt;/code&gt; を設定するため、ほとんどの移植可能なPerlコードは &lt;code&gt;$!&lt;/code&gt; を介してエラーを報告します。。</target>
        </trans-unit>
        <trans-unit id="9f5b168779b6e4455afcf5fa22f2ddb16d807c4c" translate="yes" xml:space="preserve">
          <source>Under Windows NT, &lt;code&gt;$sPath&lt;/code&gt; can start with &lt;code&gt;&quot;//?/&quot;&lt;/code&gt; to allow the use of paths longer than &lt;code&gt;MAX_PATH&lt;/code&gt; [for UNC paths, replace the leading &lt;code&gt;&quot;//&quot;&lt;/code&gt; with &lt;code&gt;&quot;//?/UNC/&quot;&lt;/code&gt;, as in &lt;code&gt;&quot;//?/UNC/Server/Share/Dir/File.Ext&quot;&lt;/code&gt;].</source>
          <target state="translated">Windows NTで、 &lt;code&gt;$sPath&lt;/code&gt; して始めることができます &lt;code&gt;&quot;//?/&quot;&lt;/code&gt; よりも長いパスを使用できるように &lt;code&gt;MAX_PATH&lt;/code&gt; [UNCパスのために、大手置き換える &lt;code&gt;&quot;//&quot;&lt;/code&gt; と &lt;code&gt;&quot;//?/UNC/&quot;&lt;/code&gt; のように、 &lt;code&gt;&quot;//?/UNC/Server/Share/Dir/File.Ext&quot;&lt;/code&gt; ]。</target>
        </trans-unit>
        <trans-unit id="445377f279bee790252626a9efe4c710c5fb31ec" translate="yes" xml:space="preserve">
          <source>Under Windows and VMS the option file is named</source>
          <target state="translated">WindowsとVMSでは、オプションファイルの名前は</target>
        </trans-unit>
        <trans-unit id="991af3b0df6455b17cae9de8484aa49771ee9333" translate="yes" xml:space="preserve">
          <source>Under a few operating systems, &lt;code&gt;$^E&lt;/code&gt; may contain a more verbose error indicator, such as in this case, &quot;CDROM tray not closed.&quot; Systems that do not support extended error messages leave &lt;code&gt;$^E&lt;/code&gt; the same as &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">いくつかのオペレーティングシステムでは、 &lt;code&gt;$^E&lt;/code&gt; 、この場合の「CDROMトレイが閉じていません」などのより詳細なエラーインジケーターが含まれている場合があります。拡張エラーメッセージをサポートしないシステムでは、 &lt;code&gt;$^E&lt;/code&gt; は &lt;code&gt;$!&lt;/code&gt; と同じです！。</target>
        </trans-unit>
        <trans-unit id="9cba04bbbcd7e6b0b58cb405fffa7701c6b86b43" translate="yes" xml:space="preserve">
          <source>Under a few operating systems, &lt;code&gt;$^E&lt;/code&gt; may contain a more verbose error indicator, such as in this case, &quot;CDROM tray not closed.&quot; Systems that do not support extended error messages leave &lt;code&gt;$^E&lt;/code&gt; the same as &lt;code&gt;$!&lt;/code&gt;.</source>
          <target state="translated">いくつかのオペレーティングシステムでは、 &lt;code&gt;$^E&lt;/code&gt; 、この場合は「CDROMトレイが閉じていません」などのより詳細なエラーインジケータが含まれている場合があります。拡張エラーメッセージをサポートしないシステムは、 &lt;code&gt;$^E&lt;/code&gt; を &lt;code&gt;$!&lt;/code&gt; と同じままにします！。</target>
        </trans-unit>
        <trans-unit id="b8188d9bfb2c028e78df0c34f466ab12923ca95e" translate="yes" xml:space="preserve">
          <source>Under bignum (or bigint or bigrat), Perl will &quot;upgrade&quot; the numbers appropriately. This means that:</source>
          <target state="translated">bignum(またはbigintやbigrat)の下では、Perlは適切に数値を「アップグレード」します。これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="936167913e1d36052a60fe747af5e2acfb71f327" translate="yes" xml:space="preserve">
          <source>Under case-sensitive matching, these both match the same code points as &lt;code&gt;\p{General Category=Titlecase_Letter}&lt;/code&gt; (&lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; ). The difference is that under &lt;code&gt;/i&lt;/code&gt; caseless matching, these match the same as &lt;code&gt;\p{Cased}&lt;/code&gt; , whereas &lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; matches &lt;code&gt;\p{Cased_Letter&lt;/code&gt; ).</source>
          <target state="translated">大文字と小文字を区別するマッチングでは、これらは両方とも &lt;code&gt;\p{General Category=Titlecase_Letter}&lt;/code&gt; （ &lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; ）と同じコードポイントに一致します。違いは、 &lt;code&gt;/i&lt;/code&gt; の &lt;code&gt;\p{Cased_Letter&lt;/code&gt; 一致では、これらは &lt;code&gt;\p{Cased}&lt;/code&gt; と同じように一致するのに対し、 &lt;code&gt;\p{gc=&lt;a href=&quot;functions/lt&quot;&gt;lt&lt;/a&gt;}&lt;/code&gt; \ p {Cased_Letter）と一致することです。</target>
        </trans-unit>
        <trans-unit id="16d7375a7fe76f99800381f8b36c3f7a2c76e668" translate="yes" xml:space="preserve">
          <source>Under case-sensitive matching, these both match the same code points as &lt;code&gt;\p{General Category=Titlecase_Letter}&lt;/code&gt; (&lt;code&gt;\p{gc=lt}&lt;/code&gt;). The difference is that under &lt;code&gt;/i&lt;/code&gt; caseless matching, these match the same as &lt;code&gt;\p{Cased}&lt;/code&gt;, whereas &lt;code&gt;\p{gc=lt}&lt;/code&gt; matches &lt;code&gt;\p{Cased_Letter&lt;/code&gt;).</source>
          <target state="translated">大文字と小文字を区別するマッチングでは、これらは両方とも &lt;code&gt;\p{General Category=Titlecase_Letter}&lt;/code&gt; （ &lt;code&gt;\p{gc=lt}&lt;/code&gt; ）と同じコードポイントに一致します。違いは、下にある &lt;code&gt;/i&lt;/code&gt; と同様、これらの一致、ケースレス整合 &lt;code&gt;\p{Cased}&lt;/code&gt; 一方、 &lt;code&gt;\p{gc=lt}&lt;/code&gt; マッチ &lt;code&gt;\p{Cased_Letter&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="58098e551f5eebaa46d0d3a19d00f14ced3f4d46" translate="yes" xml:space="preserve">
          <source>Under ithreads the optree is read only. If you want to enforce this, to check for write accesses from buggy code, compile with &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_OPS&lt;/code&gt; to enable code that allocates op memory via &lt;code&gt;mmap&lt;/code&gt; , and sets it read-only when it is attached to a subroutine. Any write access to an op results in a &lt;code&gt;SIGBUS&lt;/code&gt; and abort.</source>
          <target state="translated">ithreadsでは、optreeは読み取り専用です。これを強制したい場合は、バグのあるコードからの書き込みアクセスをチェックするために、 &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_OPS&lt;/code&gt; でコンパイルして、 &lt;code&gt;mmap&lt;/code&gt; を介してopメモリーを割り当てるコードを有効にし、サブルーチンにアタッチされている場合は読み取り専用に設定します。opへの書き込みアクセスはすべて &lt;code&gt;SIGBUS&lt;/code&gt; となり、打ち切られます。</target>
        </trans-unit>
        <trans-unit id="21eb1ae9bcc07ffd150bd4cea8dca0ae9a233a36" translate="yes" xml:space="preserve">
          <source>Under ithreads the optree is read only. If you want to enforce this, to check for write accesses from buggy code, compile with &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_OPS&lt;/code&gt; to enable code that allocates op memory via &lt;code&gt;mmap&lt;/code&gt;, and sets it read-only when it is attached to a subroutine. Any write access to an op results in a &lt;code&gt;SIGBUS&lt;/code&gt; and abort.</source>
          <target state="translated">ithreadsでは、optreeは読み取り専用です。これを強制する場合は、バグのあるコードからの書き込みアクセスをチェックするために、 &lt;code&gt;-Accflags=-DPERL_DEBUG_READONLY_OPS&lt;/code&gt; を使用してコンパイルし、 &lt;code&gt;mmap&lt;/code&gt; を介してopメモリを割り当てるコードを有効にし、サブルーチンに接続されている場合は読み取り専用に設定します。opへの書き込みアクセスは、 &lt;code&gt;SIGBUS&lt;/code&gt; になり、中止されます。</target>
        </trans-unit>
        <trans-unit id="9d556cba6d79170127d0f04c67e73cd273a0ab83" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, the CV forgets about its slab (decrementing the reference count) when the root is attached. So the slab reference counting that happens when ops are freed takes care of freeing the slab. In some cases, the CV is told to forget about the slab (&lt;code&gt;cv_forget_slab&lt;/code&gt;) precisely so that the ops can survive after the CV is done away with.</source>
          <target state="translated">通常の状況では、CVは、ルートが接続されているときにスラブを忘れます（参照カウントを減らします）。したがって、opsが解放されたときに発生するスラブ参照カウントは、スラブの解放を処理します。場合によっては、CVが &lt;code&gt;cv_forget_slab&lt;/code&gt; れた後も運用が存続できるように、CVはスラブ（cv_forget_slab）を正確に忘れるように指示されます。</target>
        </trans-unit>
        <trans-unit id="41c5c0dce73b6a45e16e6c80203f13488d40f1dd" translate="yes" xml:space="preserve">
          <source>Under the &quot;switch&quot; feature, Perl gains the experimental keywords &lt;code&gt;given&lt;/code&gt; , &lt;code&gt;when&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; . Starting from Perl 5.16, one can prefix the switch keywords with &lt;code&gt;CORE::&lt;/code&gt; to access the feature without a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature&lt;/code&gt; statement. The keywords &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; are analogous to &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; in other languages, so the code in the previous section could be rewritten as</source>
          <target state="translated">「スイッチ」機能の下では、Perlは、実験のキーワード獲得 &lt;code&gt;given&lt;/code&gt; 、、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;break&lt;/code&gt; 。 Perl 5.16以降では、switchキーワードの前に &lt;code&gt;CORE::&lt;/code&gt; を付けることができ、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature&lt;/code&gt; featureステートメントを使用せずに機能にアクセスできます。 &lt;code&gt;given&lt;/code&gt; キーワードと &lt;code&gt;when&lt;/code&gt; が他の言語の &lt;code&gt;switch&lt;/code&gt; と &lt;code&gt;case&lt;/code&gt; に類似しているので、前のセクションのコードは次のように書き直すことができます &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="429aec7265e307e4dfd4174d6cfde74d06bbb3ef" translate="yes" xml:space="preserve">
          <source>Under the &quot;switch&quot; feature, Perl gains the experimental keywords &lt;code&gt;given&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt;. Starting from Perl 5.16, one can prefix the switch keywords with &lt;code&gt;CORE::&lt;/code&gt; to access the feature without a &lt;code&gt;use feature&lt;/code&gt; statement. The keywords &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; are analogous to &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; in other languages -- though &lt;code&gt;continue&lt;/code&gt; is not -- so the code in the previous section could be rewritten as</source>
          <target state="translated">「スイッチ」機能の下で、Perlは、 &lt;code&gt;when&lt;/code&gt; 、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; で指定さ &lt;code&gt;given&lt;/code&gt; た実験的なキーワードを取得します。Perlの5.16から始まって、一つはでスイッチのキーワードの前に付けることができ &lt;code&gt;CORE::&lt;/code&gt; なし機能にアクセスするために &lt;code&gt;use feature&lt;/code&gt; 声明。キーワード &lt;code&gt;given&lt;/code&gt; とに類似している &lt;code&gt;switch&lt;/code&gt; と &lt;code&gt;case&lt;/code&gt; かかわらず-他の言語で &lt;code&gt;continue&lt;/code&gt; ない-前のセクションのコードのように書き換えることができるよう &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f764edcb644a2a893a6fefa3a757e31fb881f9a7" translate="yes" xml:space="preserve">
          <source>Under the &lt;a href=&quot;feature#The-%27unicode_eval%27-and-%27evalbytes%27-features&quot;&gt;&lt;code&gt;&quot;unicode_eval&quot;&lt;/code&gt; feature&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;feature#The-%27unicode_eval%27-and-%27evalbytes%27-features&quot;&gt; &lt;code&gt;&quot;unicode_eval&quot;&lt;/code&gt; &lt;/a&gt;機能の下</target>
        </trans-unit>
        <trans-unit id="3dcedc6c33e9a6ba46a7f82a03dd4b7c259f61b3" translate="yes" xml:space="preserve">
          <source>Under the &lt;code&gt;unicode_eval&lt;/code&gt; feature, Perl's &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; function, when passed a string, will evaluate it as a string of characters, ignoring any &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations. &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; exists to declare the encoding of the script, which only makes sense for a stream of bytes, not a string of characters. Source filters are forbidden, as they also really only make sense on strings of bytes. Any attempt to activate a source filter will result in an error.</source>
          <target state="translated">下に &lt;code&gt;unicode_eval&lt;/code&gt; 機能、Perlの &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; の文字列が渡されたときの機能は、任意の無視して、文字の文字列として評価されます &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 宣言を。スクリプトのエンコーディングを宣言するには、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;します。これは、文字列ではなく、バイトストリームに対してのみ意味があります。ソースフィルターは、バイトストリングでのみ意味があるため、禁止されています。ソースフィルターをアクティブにしようとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3ed7e8de69faa9a39e5b719579b31e326e5e1ba3" translate="yes" xml:space="preserve">
          <source>Under the Mac, it depends which environment you are using. The MacPerl shell, or MPW, is much like Unix shells in its support for several quoting variants, except that it makes free use of the Mac's non-ASCII characters as control characters.</source>
          <target state="translated">Mac では、使用している環境によって異なります。MacPerl シェル (MPW)は、いくつかの引用符のバリエーションをサポートしている点で Unix シェルとよく似ていますが、Mac の非 ASCII 文字を制御文字として自由に利用できる点を除いては、MacPerl シェルの方がはるかに優れています。</target>
        </trans-unit>
        <trans-unit id="57a69bed4d30aeb2c23df15a4942d2f1bc4e9a99" translate="yes" xml:space="preserve">
          <source>Under the current implementation, the &lt;code&gt;foreach&lt;/code&gt; loop can be anywhere within the &lt;code&gt;when&lt;/code&gt; modifier's dynamic scope, but must be within the &lt;code&gt;given&lt;/code&gt; block's lexical scope. This restricted may be relaxed in a future release. See &lt;a href=&quot;#Switch-Statements&quot;&gt;Switch Statements&lt;/a&gt; below.</source>
          <target state="translated">現在の実装では、 &lt;code&gt;foreach&lt;/code&gt; ループは &lt;code&gt;when&lt;/code&gt; 修飾子の動的スコープ内のどこにあってもかまいませんが、 &lt;code&gt;given&lt;/code&gt; ブロックの字句スコープ内にある必要があります。この制限は、将来のリリースで緩和される可能性があります。下記の&lt;a href=&quot;#Switch-Statements&quot;&gt;Switchステートメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c2c16149ecdeeb74ed5502e1f6dbfb7232f42a07" translate="yes" xml:space="preserve">
          <source>Under the current implementation, the &lt;code&gt;foreach&lt;/code&gt; loop can be anywhere within the &lt;code&gt;when&lt;/code&gt; modifier's dynamic scope, but must be within the &lt;code&gt;given&lt;/code&gt; block's lexical scope. This restriction may be relaxed in a future release. See &lt;a href=&quot;#Switch-Statements&quot;&gt;&quot;Switch Statements&quot;&lt;/a&gt; below.</source>
          <target state="translated">現在の実装では、 &lt;code&gt;foreach&lt;/code&gt; ループは &lt;code&gt;when&lt;/code&gt; 修飾子の動的スコープ内のどこにあってもかまいませんが、 &lt;code&gt;given&lt;/code&gt; ブロックの字句スコープ内にある必要があります。この制限は、将来のリリースで緩和される可能性があります。以下の&lt;a href=&quot;#Switch-Statements&quot;&gt;「Switchステートメント」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e08f959b6899ef90dffb2ee9e0e0a8572c0a7c28" translate="yes" xml:space="preserve">
          <source>Under the hood, Perl filehandles are instances of the &lt;code&gt;IO::Handle&lt;/code&gt; or &lt;code&gt;IO::File&lt;/code&gt; class. Once you have an open filehandle, you can call methods on it. Additionally, you can call methods on the &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; , and &lt;code&gt;STDERR&lt;/code&gt; filehandles.</source>
          <target state="translated">内部的には、Perlファイルハンドルは &lt;code&gt;IO::Handle&lt;/code&gt; または &lt;code&gt;IO::File&lt;/code&gt; クラスのインスタンスです。ファイルハンドルを開いたら、その上でメソッドを呼び出すことができます。さらに、 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; 、および &lt;code&gt;STDERR&lt;/code&gt; ファイルハンドルのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="39f4d0de021895e742d4650602144370ddd79e3a" translate="yes" xml:space="preserve">
          <source>Under the hood, Perl filehandles are instances of the &lt;code&gt;IO::Handle&lt;/code&gt; or &lt;code&gt;IO::File&lt;/code&gt; class. Once you have an open filehandle, you can call methods on it. Additionally, you can call methods on the &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt;, and &lt;code&gt;STDERR&lt;/code&gt; filehandles.</source>
          <target state="translated">内部的には、Perlファイルハンドルは &lt;code&gt;IO::Handle&lt;/code&gt; または &lt;code&gt;IO::File&lt;/code&gt; クラスのインスタンスです。ファイルハンドルを開いたら、そのハンドルでメソッドを呼び出すことができます。さらに、 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; 、および &lt;code&gt;STDERR&lt;/code&gt; ファイルハンドルのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="16abd29e91ee37c03769fcf588081b10ade9062f" translate="yes" xml:space="preserve">
          <source>Under the same license as Perl itself</source>
          <target state="translated">Perl 自体と同じライセンスの下で</target>
        </trans-unit>
        <trans-unit id="27e7e970c4cb85f5a1a451cbbaa7bb6fdbefed11" translate="yes" xml:space="preserve">
          <source>Underlying implementation for the &lt;code&gt;&lt;a href=&quot;functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; Perl function. Note that the perl-level function is vaguely deprecated.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; Perl関数の基礎となる実装。perlレベルの関数は漠然と廃止されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7f6fc2f81f4959a48ec9de583348cb6833131799" translate="yes" xml:space="preserve">
          <source>Underlying implementation for the &lt;code&gt;reset&lt;/code&gt; Perl function. Note that the perl-level function is vaguely deprecated.</source>
          <target state="translated">&lt;code&gt;reset&lt;/code&gt; Perl関数の基本的な実装。perlレベルの関数は漠然と非推奨になっていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3d53a031b5fe95ac3434bee7e57607b8155a1a48" translate="yes" xml:space="preserve">
          <source>Understand References Today</source>
          <target state="translated">今日の参考文献を理解する</target>
        </trans-unit>
        <trans-unit id="d2b515bbbe667df83c6f17f27b425a07b052435e" translate="yes" xml:space="preserve">
          <source>Understand that this removes the case-insensitivity feature of this module.</source>
          <target state="translated">これにより、このモジュールの大文字小文字を区別しない機能が削除されることを理解してください。</target>
        </trans-unit>
        <trans-unit id="5dff374e163235318e5ce8f7742ec1049ed8b995" translate="yes" xml:space="preserve">
          <source>Understanding the Magic of Tied Hashes and Arrays</source>
          <target state="translated">紐付きハッシュと配列のマジックを理解する</target>
        </trans-unit>
        <trans-unit id="4fad51d89f7e0dadc266115be3afc11b52bc9806" translate="yes" xml:space="preserve">
          <source>Undertake to build a new set of Perl images using VMS commands. Since VMS does dynamic loading, it's not necessary to statically link each extension into the Perl image, so this isn't the normal build path. Consequently, it hasn't really been tested, and may well be incomplete.</source>
          <target state="translated">VMS コマンドを使用して Perl イメージの新しいセットをビルドする作業を行います。VMS は動的な読み込みを行うので、各拡張機能を Perl イメージに静的にリンクする必要がないので、これは通常のビルドパスではありません。その結果、これは実際にはテストされておらず、不完全なものになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="6b54be85a5a464cb36e53bbd5948681e9238101f" translate="yes" xml:space="preserve">
          <source>Undo various types of fakery on an SV, where fakery means &quot;more than&quot; a string: if the PV is a shared string, make a private copy; if we're a ref, stop refing; if we're a glob, downgrade to an &lt;code&gt;xpvmg&lt;/code&gt;; if we're a copy-on-write scalar, this is the on-write time when we do the copy, and is also used locally; if this is a vstring, drop the vstring magic. If &lt;code&gt;SV_COW_DROP_PV&lt;/code&gt; is set then a copy-on-write scalar drops its PV buffer (if any) and becomes &lt;code&gt;SvPOK_off&lt;/code&gt; rather than making a copy. (Used where this scalar is about to be set to some other value.) In addition, the &lt;code&gt;flags&lt;/code&gt; parameter gets passed to &lt;code&gt;sv_unref_flags()&lt;/code&gt; when unreffing. &lt;code&gt;sv_force_normal&lt;/code&gt; calls this function with flags set to 0.</source>
          <target state="translated">SVでさまざまなタイプの偽造を元に戻します。偽造は文字列の「以上」を意味します。PVが共有文字列の場合は、プライベートコピーを作成します。私たちが参照している場合は、参照を停止します。グロブの場合は、 &lt;code&gt;xpvmg&lt;/code&gt; にダウングレードします。コピーオンライトスカラーの場合、これはコピーを実行するオンライト時間であり、ローカルでも使用されます。これがvstringの場合は、vstringマジックをドロップします。場合 &lt;code&gt;SV_COW_DROP_PV&lt;/code&gt; はその後、設定されているコピー・オン・ライトスカラーは、そのPVバッファをドロップ（もしあれば）となっ &lt;code&gt;SvPOK_off&lt;/code&gt; をコピーを作るのではなく。 （このスカラーが他の値に設定されようとしている場合に使用されます。）さらに、 &lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;sv_unref_flags()&lt;/code&gt; すると、flagsパラメーターがsv_unref_flags（）に渡されます。 &lt;code&gt;sv_force_normal&lt;/code&gt; は、フラグを0に設定してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="58380a9a71bcafd994016d7b4cb1383592a7215e" translate="yes" xml:space="preserve">
          <source>Undo various types of fakery on an SV, where fakery means &quot;more than&quot; a string: if the PV is a shared string, make a private copy; if we're a ref, stop refing; if we're a glob, downgrade to an xpvmg; if we're a copy-on-write scalar, this is the on-write time when we do the copy, and is also used locally; if this is a vstring, drop the vstring magic. If &lt;code&gt;SV_COW_DROP_PV&lt;/code&gt; is set then a copy-on-write scalar drops its PV buffer (if any) and becomes SvPOK_off rather than making a copy. (Used where this scalar is about to be set to some other value.) In addition, the &lt;code&gt;flags&lt;/code&gt; parameter gets passed to &lt;code&gt;sv_unref_flags()&lt;/code&gt; when unreffing. &lt;code&gt;sv_force_normal&lt;/code&gt; calls this function with flags set to 0.</source>
          <target state="translated">SVでさまざまなタイプのフェイクリーを元に戻します。フェイクリーは文字列の「以上」を意味します。PVが共有ストリングの場合は、プライベートコピーを作成します。私たちが参照者である場合、参照を停止します。グロブの場合は、xpvmgにダウングレードします。コピーオンライトスカラーの場合、これはコピーを実行するときのオンライト時間であり、ローカルでも使用されます。これがvstringの場合、vstringマジックをドロップします。場合 &lt;code&gt;SV_COW_DROP_PV&lt;/code&gt; はその後、設定されているコピー・オン・ライトスカラーは、そのPVバッファをドロップ（もしあれば）とコピーを作成するのではなく、SvPOK_offになります。 （このスカラーが他の値に設定されるところで使用されます。）さらに、 &lt;code&gt;flags&lt;/code&gt; を &lt;code&gt;sv_unref_flags()&lt;/code&gt; ときに、flagsパラメーターがsv_unref_flags（）に渡されます。 &lt;code&gt;sv_force_normal&lt;/code&gt; は、フラグを0に設定してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6f1a942ff8c67eb2d1fc5bf7179e4670a0cecd7d" translate="yes" xml:space="preserve">
          <source>Undo various types of fakery on an SV: if the PV is a shared string, make a private copy; if we're a ref, stop refing; if we're a glob, downgrade to an &lt;code&gt;xpvmg&lt;/code&gt;. See also &lt;code&gt;&lt;a href=&quot;#sv_force_normal_flags&quot;&gt;&quot;sv_force_normal_flags&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVでさまざまな種類の偽造を元に戻します。PVが共有文字列の場合は、プライベートコピーを作成します。私たちが参照している場合は、参照を停止します。グロブの場合は、 &lt;code&gt;xpvmg&lt;/code&gt; にダウングレードします。 &lt;code&gt;&lt;a href=&quot;#sv_force_normal_flags&quot;&gt;&quot;sv_force_normal_flags&quot;&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="2c0043167da52b5a8f43ef5ef3ae847c1d205a64" translate="yes" xml:space="preserve">
          <source>Undo various types of fakery on an SV: if the PV is a shared string, make a private copy; if we're a ref, stop refing; if we're a glob, downgrade to an xpvmg. See also &lt;code&gt;sv_force_normal_flags&lt;/code&gt; .</source>
          <target state="translated">SVでさまざまなタイプの偽物を元に戻します。PVが共有文字列の場合は、プライベートコピーを作成します。私たちが参照者である場合、参照を停止します。グロブの場合は、xpvmgにダウングレードしてください。 &lt;code&gt;sv_force_normal_flags&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="f9b219af612756cb93e821fb5ae6c25750a8208b" translate="yes" xml:space="preserve">
          <source>Undocumented functions</source>
          <target state="translated">文章化されていない機能</target>
        </trans-unit>
        <trans-unit id="e41716465542db7b5229d785ccf7cc674a9a2021" translate="yes" xml:space="preserve">
          <source>Unescaped left brace in regex is illegal here in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現でエスケープされていない左中括弧は、ここでは正規表現では違法です。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="6360e841155690a571fd019b59b2e90901cd664e" translate="yes" xml:space="preserve">
          <source>Unescaped left brace in regex is passed through in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現でエスケープされていない左中括弧は、正規表現で渡されます。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="ebd43bbecc54b5a0f3d5534ed1867230c22e3ca4" translate="yes" xml:space="preserve">
          <source>Unescaped left braces in regular expressions</source>
          <target state="translated">正規表現でエスケープされていない左中括弧</target>
        </trans-unit>
        <trans-unit id="9cb80f3878ea015392dd87b05584ccec54611d89" translate="yes" xml:space="preserve">
          <source>Unescaped left braces in regular expressions (for 5.30)</source>
          <target state="translated">正規表現におけるエスケープされていない左中括弧 (5.30用)</target>
        </trans-unit>
        <trans-unit id="9669238bade25c40c06b3f549ae09d7384574818" translate="yes" xml:space="preserve">
          <source>Unescaped literal '%c' in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現のエスケープされていないリテラル '％c'; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="22086bbd02aed990980d36b0db035a998bc6e3e0" translate="yes" xml:space="preserve">
          <source>Unexpected '(' with no preceding operator in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">予期しない '（'正規表現に先行演算子がありません; m /％s /で&amp;lt;-ここにマークされています</target>
        </trans-unit>
        <trans-unit id="e8ad8043f2dbcf1dd017dcdb5209cbf492290eda" translate="yes" xml:space="preserve">
          <source>Unexpected ')' in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の予期しない '）'; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="d3baa204dcc0f34d9c04dd0cdbe5cd8bc491de0f" translate="yes" xml:space="preserve">
          <source>Unexpected ']' with no following ')' in (?[... in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">予期しない ']'に続く '）' in（？[... in regex;マーク&amp;lt;-HEREin m /％s /</target>
        </trans-unit>
        <trans-unit id="3ceff2d23f8886ee7189841ccdf57932b12e7de9" translate="yes" xml:space="preserve">
          <source>Unexpected binary operator '%c' with no preceding operand in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現に先行オペランドがない予期しないバイナリ演算子 '％c'; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="a6fd6877eeb4ca65b2ae370712af39b9caed0a2a" translate="yes" xml:space="preserve">
          <source>Unexpected character in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の予期しない文字。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="93bb4877e7bb13d05b3e08f4eae8e3dad1e4b888" translate="yes" xml:space="preserve">
          <source>Unexpected constant lvalue entersub entry via type/targ %d:%d</source>
          <target state="translated">予期しない定数 lvalue が type/targ %d:%d を介してサブエントリに入りました。</target>
        </trans-unit>
        <trans-unit id="f3d819fa6d0f62b6341c9587511dec4703500307" translate="yes" xml:space="preserve">
          <source>Unexpected exit %u</source>
          <target state="translated">予期せぬ終了 %u。</target>
        </trans-unit>
        <trans-unit id="8dbae700354867d121187e2a50e0cc20e0e1e77b" translate="yes" xml:space="preserve">
          <source>Unexpected exit failure %d</source>
          <target state="translated">予期せぬ終了失敗 %d。</target>
        </trans-unit>
        <trans-unit id="eed18284023acb946f22279a557b952faac276d4" translate="yes" xml:space="preserve">
          <source>Unfinished Tales</source>
          <target state="translated">未完の物語</target>
        </trans-unit>
        <trans-unit id="4df58040d6486eaa853729500be20c8509618322" translate="yes" xml:space="preserve">
          <source>Unfortunately it is not that difficult somehow manage to break one's Mac OS X Perl rather severely. If all else fails and you want to really, &lt;b&gt;REALLY&lt;/b&gt;, start from scratch and remove even your Apple Perl installation (which has become corrupted somehow), the following instructions should do it. &lt;b&gt;Please think twice before following these instructions: they are much like conducting brain surgery to yourself. Without anesthesia.&lt;/b&gt; We will &lt;b&gt;not&lt;/b&gt; come to fix your system if you do this.</source>
          <target state="translated">残念ながら、なんとかしてMac OS X Perlをかなりひどく壊すことはそれほど難しいことではありません。他のすべてが失敗し、&lt;b&gt;本当に本当に&lt;/b&gt;最初から&lt;b&gt;やり直して&lt;/b&gt;、（何らかの方法で破損した）Apple Perlのインストールさえも削除したい場合は、次の手順で実行できます。&lt;b&gt;これらの指示に従う前によく考えてください：彼らは自分自身に脳外科手術を行うことに似ています。麻酔なし。&lt;/b&gt;私たちはなり&lt;b&gt;ません&lt;/b&gt;、あなたがこれを行う場合は、あなたのシステムを修正するために来ます。</target>
        </trans-unit>
        <trans-unit id="378b677974afb6ec2935fe271f0a9219fbb154a8" translate="yes" xml:space="preserve">
          <source>Unfortunately this field is basically meaningless, since many distributions are hybrids of several kinds of things, or some new thing, or subjectively different in focus depending on who's using them. Tools like Module::Build and MakeMaker will likely stop generating this field.</source>
          <target state="translated">残念ながらこのフィールドは基本的に無意味です。多くのディストリビューションは数種類のもののハイブリッドであったり、新しいものであったり、誰が使うかによって主観的に焦点が異なるためです。Module::Build や MakeMaker のようなツールはこのフィールドを生成しなくなる可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="59f5b94a3a1a43fcb76168bb8fa3d4bd048c2c1e" translate="yes" xml:space="preserve">
          <source>Unfortunately this is sometimes not enough, neither colour nor quotes will help you with problems involving tabs, other non-printing characters and certain kinds of problems inherent in Unicode. To deal with this, you can switch Test::Tester into a mode whereby all &quot;tricky&quot; characters are shown as \{xx}. Tricky characters are those with ASCII code less than 33 or higher than 126. This makes the output more difficult to read but much easier to find subtle differences between strings. To turn on this mode either call &lt;code&gt;show_space()&lt;/code&gt; in your test script or set the &lt;code&gt;TESTTESTERSPACE&lt;/code&gt; environment variable to be a true value. The example above would then look like</source>
          <target state="translated">残念ながら、これでは不十分な場合があります。色も引用符も、タブ、その他の印刷されない文字、およびUnicodeに固有の特定の種類の問題に関連する問題の解決には役立ちません。これに対処するために、Test :: Testerをすべての「トリッキーな」文字が\ {xx}として表示されるモードに切り替えることができます。トリッキーな文字とは、ASCIIコードが33未満または126を超える文字です。これにより、出力が読みにくくなりますが、文字列間の微妙な違いを見つけるのがはるかに簡単になります。このモードをオンにするには、テストスクリプトで &lt;code&gt;show_space()&lt;/code&gt; を呼び出すか、 &lt;code&gt;TESTTESTERSPACE&lt;/code&gt; 環境変数をtrue値に設定します。上記の例は次のようになります</target>
        </trans-unit>
        <trans-unit id="29de2b4590451aa9259989dd73cca2f011560c79" translate="yes" xml:space="preserve">
          <source>Unfortunately, I can't differentiate any further.</source>
          <target state="translated">残念ながら、これ以上の差別化はできません。</target>
        </trans-unit>
        <trans-unit id="6e14820d498a0bc4a9f36bbc1285250e475a8eba" translate="yes" xml:space="preserve">
          <source>Unfortunately, a note cannot be used with the single argument style of &lt;code&gt;ok()&lt;/code&gt; . That is, if you try &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;note&lt;/i&gt;)&lt;/code&gt;, then &lt;code&gt;Test&lt;/code&gt; will interpret this as &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;arg2&lt;/i&gt;)&lt;/code&gt;, and probably end up testing &lt;code&gt;&lt;i&gt;arg1&lt;/i&gt; eq &lt;i&gt;arg2&lt;/i&gt;&lt;/code&gt; -- and that's not what you want!</source>
          <target state="translated">残念ながら、ノートは &lt;code&gt;ok()&lt;/code&gt; の単一引数スタイルでは使用できません。つまり、 &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;note&lt;/i&gt;)&lt;/code&gt; を試行すると、 &lt;code&gt;Test&lt;/code&gt; はこれを &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;arg2&lt;/i&gt;)&lt;/code&gt; と解釈し、おそらく &lt;code&gt;&lt;i&gt;arg1&lt;/i&gt; eq &lt;i&gt;arg2&lt;/i&gt;&lt;/code&gt; をテストすることになりますが、それは望んだことではありません！</target>
        </trans-unit>
        <trans-unit id="ef3c1b19c392ac342a5e6bd955e45b0b563788d1" translate="yes" xml:space="preserve">
          <source>Unfortunately, a note cannot be used with the single argument style of &lt;code&gt;ok()&lt;/code&gt;. That is, if you try &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;note&lt;/i&gt;)&lt;/code&gt;, then &lt;code&gt;Test&lt;/code&gt; will interpret this as &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;arg2&lt;/i&gt;)&lt;/code&gt;, and probably end up testing &lt;code&gt;&lt;i&gt;arg1&lt;/i&gt; eq &lt;i&gt;arg2&lt;/i&gt;&lt;/code&gt; -- and that's not what you want!</source>
          <target state="translated">残念ながら、メモは &lt;code&gt;ok()&lt;/code&gt; の単一引数スタイルでは使用できません。つまり、 &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;note&lt;/i&gt;)&lt;/code&gt; を試してみると、 &lt;code&gt;Test&lt;/code&gt; はこれを &lt;code&gt;ok(&lt;i&gt;arg1&lt;/i&gt;, &lt;i&gt;arg2&lt;/i&gt;)&lt;/code&gt; として解釈し、おそらく &lt;code&gt;&lt;i&gt;arg1&lt;/i&gt; eq &lt;i&gt;arg2&lt;/i&gt;&lt;/code&gt; をテストすることになります-そしてそれはあなたが望むものではありません！</target>
        </trans-unit>
        <trans-unit id="4ed74c92d4298d9e7fcce728b69ed6f5c8ab08c5" translate="yes" xml:space="preserve">
          <source>Unfortunately, for backwards compatibility reasons, an empty &lt;code&gt;\x&lt;/code&gt; is legal outside &lt;code&gt;use re 'strict'&lt;/code&gt; and expands to a NUL character.</source>
          <target state="translated">残念ながら、下位互換性の理由から、空の &lt;code&gt;\x&lt;/code&gt; はre'strict &lt;code&gt;use re 'strict'&lt;/code&gt; 以外では有効であり、NUL文字に展開されます。</target>
        </trans-unit>
        <trans-unit id="7f4f5938609da571758adb22fa6ce02f230693d9" translate="yes" xml:space="preserve">
          <source>Unfortunately, interpretation of colors 0 through 7 often depends on whether the emulator supports eight colors or sixteen colors. Emulators that only support eight colors (such as the Linux console) will display colors 0 through 7 with normal brightness and ignore colors 8 through 15, treating them the same as white. Emulators that support 16 colors, such as gnome-terminal, normally display colors 0 through 7 as dim or darker versions and colors 8 through 15 as normal brightness. On such emulators, the &quot;normal&quot; white (color 7) usually is shown as pale grey, requiring bright white (15) to be used to get a real white color. Bright black usually is a dark grey color, although some terminals display it as pure black. Some sixteen-color terminal emulators also treat normal yellow (color 3) as orange or brown, and bright yellow (color 11) as yellow.</source>
          <target state="translated">残念ながら、0 から 7 色の色の解釈は、エミュレータが 8 色をサポートしているか 16 色をサポートしているかに依存します。8 色しかサポートしていないエミュレータ (Linux コンソールなど)は、0 から 7 色を通常の明るさで表示し、8 から 15 色は無視して白と同じように扱います。gnome-terminal のような 16 色をサポートするエミュレータでは、通常、0 から 7 色は薄暗いか暗い色で表示され、8 から 15 色は通常の明るさで表示されます。このようなエミュレータでは、「通常の」白 (7 色)は通常淡い灰色で表示され、本当の白を得るためには明るい白 (15)が必要です。明るい黒は通常は暗い灰色ですが、一部の端末では純粋な黒として表示されます。一部の16色端末エミュレータでは、通常の黄色(色3)をオレンジや茶色、明るい黄色(色11)を黄色として扱うものもあります。</target>
        </trans-unit>
        <trans-unit id="d3f96232328f4faede427c8ce3041998253135ab" translate="yes" xml:space="preserve">
          <source>Unfortunately, it may be that encodings are not &lt;code&gt;PerlIO&lt;/code&gt; -savvy. You can check to see whether your encoding is supported by &lt;code&gt;PerlIO&lt;/code&gt; by invoking the &lt;code&gt;perlio_ok&lt;/code&gt; method on it:</source>
          <target state="translated">残念ながら、エンコーディングが &lt;code&gt;PerlIO&lt;/code&gt; に対応していない可能性があります。エンコーディングが &lt;code&gt;PerlIO&lt;/code&gt; でサポートされているかどうかを確認するには、 &lt;code&gt;perlio_ok&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7a881f618a75cd78f718468efd31960bdadb828c" translate="yes" xml:space="preserve">
          <source>Unfortunately, it may be that encodings are not &lt;code&gt;PerlIO&lt;/code&gt;-savvy. You can check to see whether your encoding is supported by &lt;code&gt;PerlIO&lt;/code&gt; by invoking the &lt;code&gt;perlio_ok&lt;/code&gt; method on it:</source>
          <target state="translated">残念ながら、エンコーディングは &lt;code&gt;PerlIO&lt;/code&gt; に精通していない可能性があります。 &lt;code&gt;perlio_ok&lt;/code&gt; メソッドを呼び出すことで、エンコーディングが &lt;code&gt;PerlIO&lt;/code&gt; でサポートされているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="fa870b38ba970158ffd4da6159a903c51d8f85af" translate="yes" xml:space="preserve">
          <source>Unfortunately, the original specification of UTF-8 leaves some room for interpretation of how many bytes of encoded output one should generate from one input Unicode character. Strictly speaking, the shortest possible sequence of UTF-8 bytes should be generated, because otherwise there is potential for an input buffer overflow at the receiving end of a UTF-8 connection. Perl always generates the shortest length UTF-8, and with warnings on, Perl will warn about non-shortest length UTF-8 along with other malformations, such as the surrogates, which are not Unicode code points valid for interchange.</source>
          <target state="translated">残念なことに、UTF-8 の元の仕様では、1 つの入力 Unicode キ ャ ラ ク タ から何バ イ ト のエン コ ー ド 出力を生成す る べ き か と い う 解釈の余地を残しています。厳密に言えば、可能な限り最短の UTF-8 バイトのシーケンスが生成されるべきで、そうしないと UTF-8 接続の受信側で入力バッファオーバーフローが発生する可能性があるからです。Perl は常に最短長の UTF-8 を生成し、警告をオンにすると、Perl は最短長でない UTF-8 について、サロゲートのような他の不正形 態とともに警告を発します(交換に有効な Unicode コードポイントではない)。</target>
        </trans-unit>
        <trans-unit id="a23a8e59abb3029d4c1dd279e145008516f63183" translate="yes" xml:space="preserve">
          <source>Unfortunately, there are quite a few deficiencies with the design (and often, the implementations) of locales. Unicode was invented (see &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; for an introduction to that) in part to address these design deficiencies, and nowadays, there is a series of &quot;UTF-8 locales&quot;, based on Unicode. These are locales whose character set is Unicode, encoded in UTF-8. Starting in v5.20, Perl fully supports UTF-8 locales, except for sorting and string comparisons like &lt;code&gt;lt&lt;/code&gt; and &lt;code&gt;ge&lt;/code&gt;. Starting in v5.26, Perl can handle these reasonably as well, depending on the platform's implementation. However, for earlier releases or for better control, use &lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode::Collate&lt;/a&gt;. There are actually two slightly different types of UTF-8 locales: one for Turkic languages and one for everything else.</source>
          <target state="translated">残念ながら、ロケールの設計（および多くの場合、実装）にはかなりの欠陥があります。 Unicodeは、これらの設計上の欠陥に対処するために部分的に発明されました（その&lt;a href=&quot;perlunitut&quot;&gt;概要&lt;/a&gt;については、perlunitutを参照してください）。現在、Unicodeに基づく一連の「UTF-8ロケール」があります。これらは、UTF-8でエンコードされたUnicodeの文字セットを持つロケールです。 v5.20以降、Perlは、 &lt;code&gt;lt&lt;/code&gt; や &lt;code&gt;ge&lt;/code&gt; などのソートと文字列比較を除いて、UTF-8ロケールを完全にサポートします。 v5.26以降、Perlは、プラットフォームの実装に応じて、これらも適切に処理できます。ただし、以前のリリースまたはより適切な制御のために、&lt;a href=&quot;Unicode::Collate&quot;&gt;Unicode :: Collat​​eを&lt;/a&gt;使用してください。実際には、わずかに異なる2つのタイプのUTF-8ロケールがあります。1つはチュルク語用で、もう1つはその他すべて用です。</target>
        </trans-unit>
        <trans-unit id="1170c59a72df3e22ea0a090adf0e9824ff8c0b09" translate="yes" xml:space="preserve">
          <source>Unfortunately, there are quite a few deficiencies with the design (and often, the implementations) of locales. Unicode was invented (see &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; for an introduction to that) in part to address these design deficiencies, and nowadays, there is a series of &quot;UTF-8 locales&quot;, based on Unicode. These are locales whose character set is Unicode, encoded in UTF-8. Starting in v5.20, Perl fully supports UTF-8 locales, except for sorting and string comparisons. (Use &lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt; for these.) Perl continues to support the old non UTF-8 locales as well. There are currently no UTF-8 locales for EBCDIC platforms.</source>
          <target state="translated">残念ながら、ロケールの設計（および多くの場合、実装）には多くの欠点があります。 Unicodeは、これらの設計上の欠陥に部分的に対処するために発明され（その&lt;a href=&quot;perlunitut&quot;&gt;概要&lt;/a&gt;についてはperlunitutを参照）、現在、Unicodeに基づく一連の「UTF-8ロケール」があります。これらは、UTF-8でエンコードされたUnicodeの文字セットのロケールです。 Perlはv5.20以降、ソートと文字列比較を除き、UTF-8ロケールを完全にサポートしています。 （これらには&lt;a href=&quot;unicode/collate&quot;&gt;Unicode :: Collat​​e&lt;/a&gt;を使用してください。）Perlは引き続き古い非UTF-8ロケールもサポートしています。現在、EBCDICプラットフォーム用のUTF-8ロケールはありません。</target>
        </trans-unit>
        <trans-unit id="c8d518114a049f78aefe7090de8efc32eccefc83" translate="yes" xml:space="preserve">
          <source>Unfortunately, this isn't true. In perl 5.18 and earlier, AVs use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; as a marker for indicating that an array element has not yet been initialized. Thus, &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $av[0]&lt;/code&gt; would be true for the above Perl code, but false for the array generated by the XS code. In perl 5.20, storing &amp;amp;PL_sv_undef will create a read-only element, because the scalar &amp;amp;PL_sv_undef itself is stored, not a copy.</source>
          <target state="translated">残念ながら、これは真実ではありません。perl 5.18以前では、AVは &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; をマーカーとして使用して、配列要素がまだ初期化されていないことを示しています。したがって、 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $av[0]&lt;/code&gt; は上記のPerlコードではtrueになりますが、XSコードで生成された配列ではfalseになります。perl 5.20では、スカラー＆PL_sv_undef自体がコピーではなく格納されるため、＆PL_sv_undefを格納すると読み取り専用要素が作成されます。</target>
        </trans-unit>
        <trans-unit id="6aaca93722126b600c61100d9e3813a48d2917af" translate="yes" xml:space="preserve">
          <source>Unfortunately, this isn't true. In perl 5.18 and earlier, AVs use &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; as a marker for indicating that an array element has not yet been initialized. Thus, &lt;code&gt;exists $av[0]&lt;/code&gt; would be true for the above Perl code, but false for the array generated by the XS code. In perl 5.20, storing &amp;amp;PL_sv_undef will create a read-only element, because the scalar &amp;amp;PL_sv_undef itself is stored, not a copy.</source>
          <target state="translated">残念ながら、これは真実ではありません。perl 5.18以前では、AVは配列要素がまだ初期化されていないことを示すためのマーカーとして &lt;code&gt;&amp;amp;PL_sv_undef&lt;/code&gt; を使用します。したがって、 &lt;code&gt;exists $av[0]&lt;/code&gt; は上記のPerlコードでは真になりますが、XSコードによって生成された配列では偽になります。perl 5.20では、スカラー＆PL_sv_undef自体がコピーではなく保存されるため、＆PL_sv_undefを保存すると読み取り専用要素が作成されます。</target>
        </trans-unit>
        <trans-unit id="4484d276f38b1e070d2bbc67b4f47022917572dc" translate="yes" xml:space="preserve">
          <source>Unfortunately, this scheme does not work well with escape-based encodings such as ISO-2022-JP.</source>
          <target state="translated">残念ながら、この方式は ISO-2022-JP のようなエスケープベースのエンコーディングではうまく動作しません。</target>
        </trans-unit>
        <trans-unit id="5a9b09da1b70d953819b14bad175ad6e8c81c049" translate="yes" xml:space="preserve">
          <source>Unfortunately, while this &lt;code&gt;style&lt;/code&gt; variable is used to set defaults for all three directory hierarchies (core, vendor, and site), there is no guarantee that the same style is actually appropriate for all those directories. For example, $prefix might be</source>
          <target state="translated">残念ながら、この &lt;code&gt;style&lt;/code&gt; 変数は3つすべてのディレクトリ階層（コア、ベンダー、サイト）のデフォルトを設定するために使用されますが、同じスタイルが実際にこれらすべてのディレクトリに適切であるという保証はありません。たとえば、$ prefixは</target>
        </trans-unit>
        <trans-unit id="87c5d4faa14910842f5557a05819e468661f127e" translate="yes" xml:space="preserve">
          <source>Unfortunately, while this is true, it's still broken. All the references in @AoA refer to the</source>
          <target state="translated">残念ながら、これは事実であるとはいえ、まだ壊れています。AoAの中のすべての参照は</target>
        </trans-unit>
        <trans-unit id="b3033d12e8c5e48f79875dd4cf162f90c243f353" translate="yes" xml:space="preserve">
          <source>Unfortunately, you may encounter Perl modules that are not</source>
          <target state="translated">残念ながら、Perl のモジュールが</target>
        </trans-unit>
        <trans-unit id="76435dad798e21eb71def4f2d3a46ed9708e4adf" translate="yes" xml:space="preserve">
          <source>Unget a line of text from the server.</source>
          <target state="translated">サーバーからテキストの行を取得します。</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="eb802e96fd38e5e550d19f898a4fa941c45d6b21" translate="yes" xml:space="preserve">
          <source>Unicode 7.0 changed the wording so that they are &quot;&lt;b&gt;not recommended&lt;/b&gt; for use in open interchange of Unicode text data&quot;. The 7.0 Standard goes on to say:</source>
          <target state="translated">Unicode 7.0は、「Unicodeテキストデータのオープンインターチェンジでの使用&lt;b&gt;は推奨さ&lt;/b&gt;れ&lt;b&gt;ない&lt;/b&gt;」ように表現を変更しました。 7.0規格ではさらに次のように述べています。</target>
        </trans-unit>
        <trans-unit id="8306b01ff9c220d1ce9274f85cf12d457904d299" translate="yes" xml:space="preserve">
          <source>Unicode Character Properties</source>
          <target state="translated">ユニコード文字プロパティ</target>
        </trans-unit>
        <trans-unit id="2a76af7c10ae9a7945dc677634ff7f287d2f0d66" translate="yes" xml:space="preserve">
          <source>Unicode Collation Algorithm</source>
          <target state="translated">ユニコード照合アルゴリズム</target>
        </trans-unit>
        <trans-unit id="c80690d5b1494bcf7f26319a35f4cf6977eedc42" translate="yes" xml:space="preserve">
          <source>Unicode Collation Algorithm - UTS #10</source>
          <target state="translated">Unicode 照合アルゴリズム-UTS #10</target>
        </trans-unit>
        <trans-unit id="8a8a7bf1ba1b9e4c2b07e9ad90fbd26463e5d980" translate="yes" xml:space="preserve">
          <source>Unicode Consortium</source>
          <target state="translated">ユニコードコンソーシアム</target>
        </trans-unit>
        <trans-unit id="0eb610a39db0d61541e877f8f7d93f1d2cd4e414" translate="yes" xml:space="preserve">
          <source>Unicode Consortium &lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/&lt;/a&gt;</source>
          <target state="translated">Unicodeコンソーシアム&lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b56cce9c1325a6619b09abb29a03b2934dad13be" translate="yes" xml:space="preserve">
          <source>Unicode Encodings</source>
          <target state="translated">ユニコードエンコーディング</target>
        </trans-unit>
        <trans-unit id="20d826b4f354ace01634ff9215d461c1d2de2da2" translate="yes" xml:space="preserve">
          <source>Unicode FAQ</source>
          <target state="translated">ユニコードFAQ</target>
        </trans-unit>
        <trans-unit id="be2c3b070e201b30c780f442801bee53720d3f02" translate="yes" xml:space="preserve">
          <source>Unicode Glossary</source>
          <target state="translated">ユニコード用語集</target>
        </trans-unit>
        <trans-unit id="c37be50216d5f3d38f1ea9b4becfe8758aaff3f3" translate="yes" xml:space="preserve">
          <source>Unicode I/O</source>
          <target state="translated">ユニコード入出力</target>
        </trans-unit>
        <trans-unit id="0b15b2a3ee7f250e6d79317da505977b8ac153a4" translate="yes" xml:space="preserve">
          <source>Unicode Locale Data Markup Language (LDML) - UTS #35</source>
          <target state="translated">Unicode ローカルデータマークアップ言語 (LDML)-UTS #35</target>
        </trans-unit>
        <trans-unit id="4f977034e8571e3a210188dcc1d8385457a8e9f6" translate="yes" xml:space="preserve">
          <source>Unicode Normalization Forms</source>
          <target state="translated">ユニコード正規化フォーム</target>
        </trans-unit>
        <trans-unit id="775e22294d31686679c1488c3a4e009b588fb93a" translate="yes" xml:space="preserve">
          <source>Unicode Normalization Forms - UAX #15</source>
          <target state="translated">Unicode正規化フォーム-UAX #15</target>
        </trans-unit>
        <trans-unit id="41086ae1277eac703b49ed9c64da7c4e1e028776" translate="yes" xml:space="preserve">
          <source>Unicode Properties</source>
          <target state="translated">Unicodeプロパティ</target>
        </trans-unit>
        <trans-unit id="ecfb52e522a545f9d54db78a273755a7cf69910d" translate="yes" xml:space="preserve">
          <source>Unicode Recommended Reading List</source>
          <target state="translated">ユニコード推奨リーディングリスト</target>
        </trans-unit>
        <trans-unit id="3dc43797a086d2e60b97e26ddbcd0e763ba2be44" translate="yes" xml:space="preserve">
          <source>Unicode Regular Expression Support Level</source>
          <target state="translated">ユニコード正規表現サポートレベル</target>
        </trans-unit>
        <trans-unit id="47be4025952fbf3894ef86d325a9d331d9d77d10" translate="yes" xml:space="preserve">
          <source>Unicode Support</source>
          <target state="translated">ユニコードサポート</target>
        </trans-unit>
        <trans-unit id="5477f70b1eea785630b35cd84e386522cded5715" translate="yes" xml:space="preserve">
          <source>Unicode Transformation Format</source>
          <target state="translated">ユニコード変換形式</target>
        </trans-unit>
        <trans-unit id="3b3c1f4d1dbf76960cd965f0a9ee21a6e35c74bd" translate="yes" xml:space="preserve">
          <source>Unicode Useful Resources</source>
          <target state="translated">ユニコードの便利なリソース</target>
        </trans-unit>
        <trans-unit id="0bd38e8f5dc5fab318029c6a0f6bf740c02237f9" translate="yes" xml:space="preserve">
          <source>Unicode aims to &lt;b&gt;UNI&lt;/b&gt;-fy the en-&lt;b&gt;CODE&lt;/b&gt;-ings of all the world's character sets into a single Standard. For quite a few of the various coding standards that existed when Unicode was first created, converting from each to Unicode essentially meant adding a constant to each code point in the original standard, and converting back meant just subtracting that same constant. For ASCII and ISO-8859-1, the constant is 0. For ISO-8859-5, (Cyrillic) the constant is 864; for Hebrew (ISO-8859-8), it's 1488; Thai (ISO-8859-11), 3424; and so forth. This made it easy to do the conversions, and facilitated the adoption of Unicode.</source>
          <target state="translated">Unicodeの目的&lt;b&gt;UNIは、&lt;/b&gt;エン-Fy &lt;b&gt;CODEの&lt;/b&gt;単一の標準に世界のすべての文字セットの-ingsを。 Unicodeが最初に作成されたときに存在していたさまざまなコーディング標準のかなりの数について、それぞれをUnicodeに変換すると、基本的に元の標準の各コードポイントに定数が追加され、元に戻すと、同じ定数が差し引かれるだけでした。 ASCIIおよびISO-8859-1の場合、定数は0です。ISO-8859-5の場合（キリル文字）、定数は864です。ヘブライ語（ISO-8859-8）の場合は1488です。タイ語（ISO-8859-11）、3424;など。これにより、変換が簡単になり、Unicodeの採用が容易になりました。</target>
        </trans-unit>
        <trans-unit id="292b5cfbcdb907b6b9b2852bab43a1e41959e1df" translate="yes" xml:space="preserve">
          <source>Unicode also defines various</source>
          <target state="translated">また、ユニコードは様々な</target>
        </trans-unit>
        <trans-unit id="bfb017bed191925e52b6029168924ebfe8c5d26c" translate="yes" xml:space="preserve">
          <source>Unicode and EBCDIC</source>
          <target state="translated">ユニコードとEBCDIC</target>
        </trans-unit>
        <trans-unit id="e27520c25eb75e7d79e8f990eeb1be4ae1df41df" translate="yes" xml:space="preserve">
          <source>Unicode and ISO/IEC 10646 are coordinated standards that unify almost all other modern character set standards, covering more than 80 writing systems and hundreds of languages, including all commercially-important modern languages. All characters in the largest Chinese, Japanese, and Korean dictionaries are also encoded. The standards will eventually cover almost all characters in more than 250 writing systems and thousands of languages. Unicode 1.0 was released in October 1991, and 6.0 in October 2010.</source>
          <target state="translated">UnicodeとISO/IEC 10646は、他のほとんどすべての現代文字セット規格を統一した協調規格であり、商業的に重要な現代言語を含む80以上の筆記体系と数百以上の言語をカバーしています。最大の中国語、日本語、韓国語辞書のすべての文字も符号化されています。この規格は最終的に、250以上の筆記体系と数千以上の言語のほぼすべての文字をカバーすることになります。Unicode 1.0は1991年10月に、6.0は2010年10月にリリースされました。</target>
        </trans-unit>
        <trans-unit id="35759c0ae04781f6ce2a8261ef308a0d62267332" translate="yes" xml:space="preserve">
          <source>Unicode and Localisation Support</source>
          <target state="translated">ユニコードとローカリゼーションのサポート</target>
        </trans-unit>
        <trans-unit id="c79347889e0d28fc8f7e3b48dc5c985da6b9c2b3" translate="yes" xml:space="preserve">
          <source>Unicode and Multilingual Support in HTML, Fonts, Web Browsers and Other Applications</source>
          <target state="translated">HTML、フォント、Webブラウザおよびその他のアプリケーションにおけるUnicodeおよび多言語サポート</target>
        </trans-unit>
        <trans-unit id="aa0a00bb85a8ade7272b8fa2d081ab3abd746b2c" translate="yes" xml:space="preserve">
          <source>Unicode and UTF</source>
          <target state="translated">ユニコードとエッチエフティーエフ</target>
        </trans-unit>
        <trans-unit id="8e9632880dc5b73eee711bbb8acae51558160af7" translate="yes" xml:space="preserve">
          <source>Unicode and UTF-8</source>
          <target state="translated">ユニコードとUTF-8</target>
        </trans-unit>
        <trans-unit id="814213da4f2b17caa9167081f902458536e3ac5c" translate="yes" xml:space="preserve">
          <source>Unicode casing is very different from ASCII casing.</source>
          <target state="translated">UnicodeのケーシングはASCIIのケーシングとは大きく異なります。</target>
        </trans-unit>
        <trans-unit id="3db087027c1f3fb2dafc91bf1aec8e28ed66555f" translate="yes" xml:space="preserve">
          <source>Unicode character database</source>
          <target state="translated">ユニコード文字データベース</target>
        </trans-unit>
        <trans-unit id="90ce74ac0f978040e744ea5f9ee3a9fc0fdd5b56" translate="yes" xml:space="preserve">
          <source>Unicode character properties that are NOT accepted by Perl</source>
          <target state="translated">Perl が受け付けない Unicode 文字プロパティ</target>
        </trans-unit>
        <trans-unit id="131ad96e9210c062a5a91bbff68adb3c52f574b9" translate="yes" xml:space="preserve">
          <source>Unicode characters are assigned to</source>
          <target state="translated">Unicode文字は</target>
        </trans-unit>
        <trans-unit id="9cd8bdcde375ab8cc6d64998c61f22e2b1db366b" translate="yes" xml:space="preserve">
          <source>Unicode characters have a Unicode name and numeric code point (ordinal) value. Use the &lt;code&gt;\N{}&lt;/code&gt; construct to specify a character by either of these values. Certain sequences of characters also have names.</source>
          <target state="translated">Unicode文字には、Unicode名と数値コードポイント（序数）値があります。 &lt;code&gt;\N{}&lt;/code&gt; 構成を使用して、これらの値のいずれかで文字を指定します。文字の特定のシーケンスにも名前があります。</target>
        </trans-unit>
        <trans-unit id="210080ef48f936087dda80492d9856fe5ec4b9bc" translate="yes" xml:space="preserve">
          <source>Unicode classes</source>
          <target state="translated">ユニコードクラス</target>
        </trans-unit>
        <trans-unit id="0f01459324a40b9e6a3a0e387cbfebfba5b6c62c" translate="yes" xml:space="preserve">
          <source>Unicode code points versus EBCDIC code points</source>
          <target state="translated">Unicode コードポイント対 EBCDIC コードポイント</target>
        </trans-unit>
        <trans-unit id="7625e9ef1dd87171eb4d5354c03dd9be33744a1d" translate="yes" xml:space="preserve">
          <source>Unicode codepoint</source>
          <target state="translated">ユニコードコードポイント</target>
        </trans-unit>
        <trans-unit id="329b02599470f15ed9e34472928160323f9fb081" translate="yes" xml:space="preserve">
          <source>Unicode coding schemes other than native utf8 are supported by Encode::Unicode, which will be autoloaded on demand.</source>
          <target state="translated">ネイティブ utf8 以外の Unicode コーディング方式は Encode::Unicode でサポートされており、必要に応じてオートロードされます。</target>
        </trans-unit>
        <trans-unit id="106885fd8f00b6d1d3909f50579c6a1e81f50c34" translate="yes" xml:space="preserve">
          <source>Unicode concept which most often is equal to uppercase, but for certain characters like the German &quot;sharp s&quot; there is a difference.</source>
          <target state="translated">ユニコードの概念で、大文字と同じになることが多いが、ドイツ語の &quot;sharp s &quot;のような特定の文字には違いがある。</target>
        </trans-unit>
        <trans-unit id="be2f011fe43db39f9182b02fbc6580c3cfe62024" translate="yes" xml:space="preserve">
          <source>Unicode considers many code points to be illegal, or to be avoided. Perl generally accepts them, once they have passed through any input filters that may try to exclude them. These have been discussed above (see &quot;Surrogates&quot; under UTF-16 in &lt;a href=&quot;#Unicode-Encodings&quot;&gt;&quot;Unicode Encodings&quot;&lt;/a&gt;, &lt;a href=&quot;#Noncharacter-code-points&quot;&gt;&quot;Noncharacter code points&quot;&lt;/a&gt;, and &lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;&quot;Beyond Unicode code points&quot;&lt;/a&gt;).</source>
          <target state="translated">Unicodeは、多くのコードポイントを違法または回避するものと見なします。Perlは通常、それらを除外しようとする可能性のある入力フィルターを通過すると、それらを受け入れます。これらについては上記で説明しました（&lt;a href=&quot;#Unicode-Encodings&quot;&gt;「Unicodeエンコーディング」&lt;/a&gt;、&lt;a href=&quot;#Noncharacter-code-points&quot;&gt;「&lt;/a&gt;文字以外のコードポイント」、および&lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;「Unicodeコードポイントを超え&lt;/a&gt;て」のUTF-16の「サロゲート」を参照してください）。</target>
        </trans-unit>
        <trans-unit id="d49075f8dbc705f2f67ea7272b64074e286787f2" translate="yes" xml:space="preserve">
          <source>Unicode defines a fourth boundary type, accessible through the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::LineBreak&quot;&gt;Unicode::LineBreak&lt;/a&gt; module.</source>
          <target state="translated">Unicodeは4番目の境界タイプを定義し、&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::LineBreak&quot;&gt;Unicode :: LineBreak&lt;/a&gt;モジュールを通じてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="07aa50c4f0010de0db76a15f32c4e153b24a7275" translate="yes" xml:space="preserve">
          <source>Unicode defines all its properties in the compound form, so all single-form properties are Perl extensions. Most of these are just synonyms for the Unicode ones, but some are genuine extensions, including several that are in the compound form. And quite a few of these are actually recommended by Unicode (in &lt;a href=&quot;http://www.unicode.org/reports/tr18&quot;&gt;http://www.unicode.org/reports/tr18&lt;/a&gt;).</source>
          <target state="translated">Unicodeはすべてのプロパティを複合形式で定義するため、すべての単一形式プロパティはPerl拡張です。これらのほとんどは、Unicodeの同義語ですが、複合形式になっているものを含め、一部は本物の拡張です。そして、これらのかなりの数が実際にUnicodeによって推奨されています（&lt;a href=&quot;http://www.unicode.org/reports/tr18&quot;&gt;http://www.unicode.org/reports/tr18にあります&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="83740583eabf50f236d63ef1d8d25274281fb0cf" translate="yes" xml:space="preserve">
          <source>Unicode defines all its properties in the compound form, so all single-form properties are Perl extensions. Most of these are just synonyms for the Unicode ones, but some are genuine extensions, including several that are in the compound form. And quite a few of these are actually recommended by Unicode (in &lt;a href=&quot;https://www.unicode.org/reports/tr18&quot;&gt;https://www.unicode.org/reports/tr18&lt;/a&gt;).</source>
          <target state="translated">Unicodeはそのすべてのプロパティを複合形式で定義するため、すべての単一形式のプロパティはPerl拡張機能です。これらのほとんどはUnicodeのものの同義語ですが、複合形式のいくつかを含む、いくつかは本物の拡張です。そして、これらのかなりの数が実際にUnicodeによって推奨されています（&lt;a href=&quot;https://www.unicode.org/reports/tr18&quot;&gt;https://www.unicode.org/reports/tr18&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8557c4367cf0c9f30d95a470ee521928d669fb7c" translate="yes" xml:space="preserve">
          <source>Unicode defines characters like &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; or &lt;code&gt;GREEK
SMALL LETTER ALPHA&lt;/code&gt; and unique numbers for the characters, in this case 0x0041 and 0x03B1, respectively. These unique numbers are called</source>
          <target state="translated">Unicodeは、 &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; やギリシャ語 &lt;code&gt;GREEK SMALL LETTER ALPHA&lt;/code&gt; などの文字と、文字の一意の番号（この場合はそれぞれ0x0041および0x03B1）を定義します。これらの一意の番号は</target>
        </trans-unit>
        <trans-unit id="acaff2c7ef0e4ff533eb55c7b82bb8cb537cf6b5" translate="yes" xml:space="preserve">
          <source>Unicode does define several other decimal--and numeric--characters besides the familiar 0 to 9, such as the Arabic and Indic digits. Perl does not support string-to-number conversion for digits other than ASCII &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; (and ASCII &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt; for hexadecimal). To get safe conversions from any Unicode string, use &lt;a href=&quot;Unicode::UCD#num%28%29&quot;&gt;&quot;num()&quot; in Unicode::UCD&lt;/a&gt;.</source>
          <target state="translated">Unicodeは、アラビア数字やインド数字など、おなじみの0から9の他に、他のいくつかの10進文字と数字を定義します。 Perlは、ASCII &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;9&lt;/code&gt; （および16進数の &lt;code&gt;f&lt;/code&gt; はASCII &lt;code&gt;a&lt;/code&gt; からf）以外の数字の文字列から数値への変換をサポートしていません。 Unicode文字列から安全に変換するには&lt;a href=&quot;Unicode::UCD#num%28%29&quot;&gt;、Unicode :: UCDで「num（）」を使用します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="66287c5bc6e75d359bae32c20cfc35103e105bf3" translate="yes" xml:space="preserve">
          <source>Unicode does define several other decimal--and numeric--characters besides the familiar 0 to 9, such as the Arabic and Indic digits. Perl does not support string-to-number conversion for digits other than ASCII &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; (and ASCII &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt; for hexadecimal). To get safe conversions from any Unicode string, use &lt;a href=&quot;unicode/ucd#num()&quot;&gt;num() in Unicode::UCD&lt;/a&gt;.</source>
          <target state="translated">Unicodeは、アラビア数字やインド数字など、一般的な0〜9以外のいくつかの10進文字および数値文字を定義します。PerlはASCII以外の数字の文字列対数変換をサポートしていません &lt;code&gt;0&lt;/code&gt; に &lt;code&gt;9&lt;/code&gt; （及びASCII &lt;code&gt;a&lt;/code&gt; に &lt;code&gt;f&lt;/code&gt; 進のために）。Unicode文字列から安全な変換を取得するには&lt;a href=&quot;unicode/ucd#num()&quot;&gt;、Unicode :: UCDでnum（）を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e0b4309884526bd11fe1ab30cc9fc6ed43648809" translate="yes" xml:space="preserve">
          <source>Unicode form that is useful when comparing strings regardless of case, as certain characters have complex one-to-many case mappings. Primarily a variant of lowercase.</source>
          <target state="translated">特定の文字は一対多の大文字と小文字の対応付けが複雑なため、大文字と小文字に関係なく文字列を比較する際に便利な Unicode 形式。主に小文字の変形です。</target>
        </trans-unit>
        <trans-unit id="71079ed61722f43474765527d68998144c7665d4" translate="yes" xml:space="preserve">
          <source>Unicode furnishes the &lt;code&gt;Age&lt;/code&gt; property from which this is derived. The problem with Age is that a strict interpretation of it (which Perl takes) has it matching the precise release a code point's meaning is introduced in. Thus &lt;code&gt;U+0041&lt;/code&gt; would match only 1.1; and &lt;code&gt;U+1EFF&lt;/code&gt; only 5.1. This is not usually what you want.</source>
          <target state="translated">Unicodeは、これの派生元である &lt;code&gt;Age&lt;/code&gt; プロパティを提供します。 Ageの問題は、それを厳密に解釈すると（Perlが取る）、コードポイントの意味が導入された正確なリリースと一致することです。したがって、 &lt;code&gt;U+0041&lt;/code&gt; は1.1にのみ一致します。および &lt;code&gt;U+1EFF&lt;/code&gt; のみ5.1。これは通常、あなたが望むものではありません。</target>
        </trans-unit>
        <trans-unit id="fd3ab6b6f70f7431b1416e0f9107c1af48c38649" translate="yes" xml:space="preserve">
          <source>Unicode has some property-value pairs that currently don't match anything. This happens generally either because they are obsolete, or they exist for symmetry with other forms, but no language has yet been encoded that uses them. In this version of Unicode, the following match zero code points:</source>
          <target state="translated">Unicodeには、現在のところ何も一致しないプロパティと値のペアがいくつかあります。これは一般的に、それらが時代遅れになっているか、あるいは他の形式との対称性のために存在しているが、それらを使用する言語がまだエンコードされていないために起こります。このバージョンの Unicode では、以下のものがゼロのコードポイントにマッチします。</target>
        </trans-unit>
        <trans-unit id="598e8ae9c96e08e40d6e1a738b55c351268bc51b" translate="yes" xml:space="preserve">
          <source>Unicode has three pseudo scripts that are handled specially.</source>
          <target state="translated">Unicodeには、特別に扱われる3つの疑似スクリプトがあります。</target>
        </trans-unit>
        <trans-unit id="73c49c9d36b230f185c7169c7475e8856ddbd520" translate="yes" xml:space="preserve">
          <source>Unicode in Perl on EBCDIC</source>
          <target state="translated">EBCDIC 上の Perl での Unicode</target>
        </trans-unit>
        <trans-unit id="5a2ff10d38459692f18fa8f0d5e12e0027770ead" translate="yes" xml:space="preserve">
          <source>Unicode is a character set standard which plans to codify all of the writing systems of the world, plus many other symbols.</source>
          <target state="translated">Unicodeは、世界のすべての文字システムに加えて、他の多くの記号をコード化することを計画している文字セットの標準です。</target>
        </trans-unit>
        <trans-unit id="3bb1c5615f2383d427b4613073ef1ec435b5138c" translate="yes" xml:space="preserve">
          <source>Unicode is a character set that can represent most characters in most of the world's languages, providing room for over one million different characters. Unicode 3.1 specifies 94,140 characters: The Basic Latin characters are assigned to the numbers 0 - 127. The Latin-1 Supplement with characters that are used in several European languages is in the next range, up to 255. After some more Latin extensions we find the character sets from languages using non-Roman alphabets, interspersed with a variety of symbol sets such as currency symbols, Zapf Dingbats or Braille. (You might want to visit &lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/&lt;/a&gt; for a look at some of them - my personal favourites are Telugu and Kannada.)</source>
          <target state="translated">Unicodeは、世界のほとんどの言語でほとんどの文字を表すことができる文字セットであり、100万以上の異なる文字に対応できます。 Unicode 3.1では94,140文字が指定されています。基本ラテン文字は0〜127の数字に割り当てられています。いくつかのヨーロッパ言語で使用されている文字を含むLatin-1サプリメントは、次の範囲、最大255です。ローマ字以外のアルファベットを使用する言語の文字セット。通貨記号、Zapf Dingbats、点字などのさまざまな記号セットが散在しています。 （あなたはそれらのいくつかを見るために&lt;a href=&quot;http://www.unicode.org/&quot;&gt;http://www.unicode.org/&lt;/a&gt;を訪問したいかもしれません-私の個人的なお気に入りはテルグ語とカンナダ語です。）</target>
        </trans-unit>
        <trans-unit id="918d612f1c2574dce41b14dc2be8c0387758201b" translate="yes" xml:space="preserve">
          <source>Unicode is a character set that can represent most characters in most of the world's languages, providing room for over one million different characters. Unicode 3.1 specifies 94,140 characters: The Basic Latin characters are assigned to the numbers 0 - 127. The Latin-1 Supplement with characters that are used in several European languages is in the next range, up to 255. After some more Latin extensions we find the character sets from languages using non-Roman alphabets, interspersed with a variety of symbol sets such as currency symbols, Zapf Dingbats or Braille. (You might want to visit &lt;a href=&quot;https://www.unicode.org/&quot;&gt;https://www.unicode.org/&lt;/a&gt; for a look at some of them - my personal favourites are Telugu and Kannada.)</source>
          <target state="translated">Unicodeは、世界のほとんどの言語でほとんどの文字を表すことができる文字セットであり、100万を超える異なる文字のためのスペースを提供します。 Unicode 3.1は94,140文字を指定します。基本ラテン文字は0〜127の数字に割り当てられます。いくつかのヨーロッパ言語で使用される文字を含むラテン1補足は、次の範囲で、最大255です。ローマ字以外のアルファベットを使用する言語の文字セットに、通貨記号、Zapf Dingbats、Brailleなどのさまざまな記号セットが点在しています。 （&lt;a href=&quot;https://www.unicode.org/&quot;&gt;https://www.unicode.org/にアクセス&lt;/a&gt;して、それらのいくつかを確認することをお勧めします。私の個人的なお気に入りはテルグ語とカンナダ語です。）</target>
        </trans-unit>
        <trans-unit id="bb4b52a0e0d40f8cd4680e731fa8661db40b7bfb" translate="yes" xml:space="preserve">
          <source>Unicode is a comprehensive standard. It specifies many things outside the scope of Perl, such as how to display sequences of characters. For a full discussion of all aspects of Unicode, see &lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;.</source>
          <target state="translated">Unicodeは包括的な標準です。文字のシーケンスを表示する方法など、Perlの範囲外の多くのものを指定します。Unicodeのすべての側面の詳細については、&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.orgを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0004a5b6be77b386fdac7a26a14cd8154c46e916" translate="yes" xml:space="preserve">
          <source>Unicode is a comprehensive standard. It specifies many things outside the scope of Perl, such as how to display sequences of characters. For a full discussion of all aspects of Unicode, see &lt;a href=&quot;https://www.unicode.org&quot;&gt;https://www.unicode.org&lt;/a&gt;.</source>
          <target state="translated">Unicodeは包括的な標準です。文字のシーケンスを表示する方法など、Perlの範囲外の多くのことを指定します。Unicodeのすべての側面の詳細については、&lt;a href=&quot;https://www.unicode.org&quot;&gt;https：&lt;/a&gt; //www.unicode.orgを参照してください。</target>
        </trans-unit>
        <trans-unit id="6b43e74b6aa7b2acf2d7d34cb97f083e42a3eb18" translate="yes" xml:space="preserve">
          <source>Unicode is a new and complex technology and one may easily overlook certain security pitfalls. See &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; for an overview and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for details, and &lt;a href=&quot;perlunicode#Security-Implications-of-Unicode&quot;&gt;&quot;Security Implications of Unicode&quot; in perlunicode&lt;/a&gt; for security implications in particular.</source>
          <target state="translated">Unicodeは新しく複雑なテクノロジーであり、特定のセキュリティ上の落とし穴を見落としがちです。参照&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;概要およびため&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照してください&lt;/a&gt;詳細については、と&lt;a href=&quot;perlunicode#Security-Implications-of-Unicode&quot;&gt;perlunicodeを参照してくださいにある「ユニコードのセキュリティへの影響」&lt;/a&gt;、特にセキュリティへの影響について。</target>
        </trans-unit>
        <trans-unit id="38d8bac67762b71e3e301bd389dd5bf647e3a7f7" translate="yes" xml:space="preserve">
          <source>Unicode is a new and complex technology and one may easily overlook certain security pitfalls. See &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt; for an overview and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for details, and &lt;a href=&quot;perlunicode#Security-Implications-of-Unicode&quot;&gt;Security Implications of Unicode in perlunicode&lt;/a&gt; for security implications in particular.</source>
          <target state="translated">Unicodeは新しく複雑な技術であり、特定のセキュリティ上の落とし穴を見落としがちです。参照&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;概要およびため&lt;a href=&quot;perlunicode&quot;&gt;perlunicodeを参照してください&lt;/a&gt;詳細については、と&lt;a href=&quot;perlunicode#Security-Implications-of-Unicode&quot;&gt;perlunicodeを参照してくださいでのUnicodeのセキュリティへの影響&lt;/a&gt;、特にセキュリティへの影響について。</target>
        </trans-unit>
        <trans-unit id="2819bd58737a8580070f8ba307d9387529fe1cef" translate="yes" xml:space="preserve">
          <source>Unicode is encoded using several competing encodings, of which UTF-8 is the most used. In a Unicode encoding, multiple subsequent bytes can be used to store a single code point, or simply: character.</source>
          <target state="translated">Unicode は、 い く つかの競合エン コ ーデ ィ ン グ を用いてエン コ ーデ ィ ン グ さ れていますが、 その中でも UTF-8 が最も使われています。Unicode エンコーディングでは、複数の後続のバイトを使って 1 つのコードポイントを格納したり、単に:文字を格納したりすることができます。</target>
        </trans-unit>
        <trans-unit id="eebcf5b59ea874094c8b9d89a4f67a602ded5273" translate="yes" xml:space="preserve">
          <source>Unicode is stored in &lt;code&gt;$oswBuffer&lt;/code&gt;. &lt;code&gt;$lwBufSize&lt;/code&gt; and &lt;code&gt;$olwOutLength&lt;/code&gt; are measured as number of &lt;code&gt;WCHAR&lt;/code&gt;s.</source>
          <target state="translated">Unicodeは &lt;code&gt;$oswBuffer&lt;/code&gt; 保存されます。 &lt;code&gt;$lwBufSize&lt;/code&gt; と &lt;code&gt;$olwOutLength&lt;/code&gt; は、 &lt;code&gt;WCHAR&lt;/code&gt; の数として測定されます。</target>
        </trans-unit>
        <trans-unit id="5a66fde7942a6271294a3a5979cbe3017c3d5acd" translate="yes" xml:space="preserve">
          <source>Unicode is supported on EBCDIC platforms. See &lt;a href=&quot;perlebcdic&quot;&gt;perlebcdic&lt;/a&gt;.</source>
          <target state="translated">Unicodeは、EBCDICプラットフォームでサポートされています。&lt;a href=&quot;perlebcdic&quot;&gt;perlebcdicを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9649076a02c41263127b2e79657012b62bed018f" translate="yes" xml:space="preserve">
          <source>Unicode non-character U+%X is not recommended for open interchange</source>
          <target state="translated">Unicode 非文字 U+%X は、オープンインターチェンジには推奨されません。</target>
        </trans-unit>
        <trans-unit id="4276af257ec826541933ef5d517bc7bb403fdca7" translate="yes" xml:space="preserve">
          <source>Unicode only allows code points up to 0x10FFFF, but Perl allows much larger ones. Up till Perl 5.28, it was allowed to use code points exceeding the maximum value of an integer (&lt;code&gt;IV_MAX&lt;/code&gt;). However, that did break the perl interpreter in some constructs, including causing it to hang in a few cases. The known problem areas were in &lt;code&gt;tr///&lt;/code&gt;, regular expression pattern matching using quantifiers, as quote delimiters in &lt;code&gt;q&lt;i&gt;X&lt;/i&gt;...&lt;i&gt;X&lt;/i&gt;&lt;/code&gt; (where</source>
          <target state="translated">Unicodeは0x10FFFFまでのコードポイントのみを許可しますが、Perlははるかに大きなコードポイントを許可します。Perl 5.28までは、整数の最大値（ &lt;code&gt;IV_MAX&lt;/code&gt; ）を超えるコードポイントを使用することが許可されていました。しかし、それはいくつかの場合にそれをハングさせることを含めて、いくつかの構造でperlインタープリターを壊しました。既知の問題領域は、 &lt;code&gt;q&lt;i&gt;X&lt;/i&gt;...&lt;i&gt;X&lt;/i&gt;&lt;/code&gt; &lt;i&gt;X&lt;/i&gt; ... &lt;i&gt;Xの&lt;/i&gt;引用符区切り文字として、数量詞を使用した正規表現パターンマッチングである &lt;code&gt;tr///&lt;/code&gt; にありました（ここで&lt;i&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="989d0062ad097f9dec3fa95782856724eb6165aa" translate="yes" xml:space="preserve">
          <source>Unicode promises that the set of code points that have these two properties will never change, so something that is not quoted in v5.16 will never need to be quoted in any future Perl release. (Not all the code points that match Pattern_Syntax have actually had characters assigned to them; so there is room to grow, but they are quoted whether assigned or not. Perl, of course, would never use an unassigned code point as an actual metacharacter.)</source>
          <target state="translated">Unicode では、これら 2 つのプロパティを持つコードポイントのセットは決して変更されないと約束されていますので、v5.16 で引用されていないものは、将来の Perl リリースで引用される必要はありません。(Pattern_Syntax にマッチする全てのコードポイントに実際に文字が割り当てられているわけではありませんので、増やす余地はありますが、割り当てられているかどうかに関わらず引用されます。Perlはもちろん、未割り当てのコードポイントを実際のメタキャラクタとして使用することはありません。)</target>
        </trans-unit>
        <trans-unit id="fb2ca4e28ea7e22cfa06c89ba6c3b93dca994a19" translate="yes" xml:space="preserve">
          <source>Unicode properties are defined (surprise!) only on Unicode code points. Starting in v5.20, when matching against &lt;code&gt;\p&lt;/code&gt; and &lt;code&gt;\P&lt;/code&gt; , Perl treats non-Unicode code points (those above the legal Unicode maximum of 0x10FFFF) as if they were typical unassigned Unicode code points.</source>
          <target state="translated">Unicodeプロパティは、Unicodeコードポイントでのみ定義されます（驚き！）。v5.20から、 &lt;code&gt;\p&lt;/code&gt; および &lt;code&gt;\P&lt;/code&gt; と照合する場合、Perlは非Unicodeコードポイント（有効なUnicodeの最大値0x10FFFFを超えるもの）を、典型的な割り当てられていないUnicodeコードポイントであるかのように扱います。</target>
        </trans-unit>
        <trans-unit id="a1b191780dd618f1a1adb03d6a73e2206a215bac" translate="yes" xml:space="preserve">
          <source>Unicode properties are defined (surprise!) only on Unicode code points. Starting in v5.20, when matching against &lt;code&gt;\p&lt;/code&gt; and &lt;code&gt;\P&lt;/code&gt;, Perl treats non-Unicode code points (those above the legal Unicode maximum of 0x10FFFF) as if they were typical unassigned Unicode code points.</source>
          <target state="translated">Unicodeプロパティは、Unicodeコードポイントでのみ定義されます（驚きです！）。v5.20以降、 &lt;code&gt;\p&lt;/code&gt; および &lt;code&gt;\P&lt;/code&gt; と照合する場合、Perlは非Unicodeコードポイント（正規のUnicode最大値である0x10FFFFを超えるもの）を、通常の割り当てられていないUnicodeコードポイントであるかのように扱います。</target>
        </trans-unit>
        <trans-unit id="4421ab9f1aa61dc9cbda1e9f59175c1a3635d1e0" translate="yes" xml:space="preserve">
          <source>Unicode property wildcard not terminated</source>
          <target state="translated">Unicodeプロパティワイルドカードは終了していません。</target>
        </trans-unit>
        <trans-unit id="139a9bb1fddefbaa23b5411336f2d45c5af1add3" translate="yes" xml:space="preserve">
          <source>Unicode publishes the names of blocks in two different styles, though the two are equivalent under Unicode's loose matching rules.</source>
          <target state="translated">Unicode はブロックの名前を 2 つの異なるスタイルで公開していますが、この 2 つは Unicode の緩いマッチングルールの下では同等です。</target>
        </trans-unit>
        <trans-unit id="38ecc57a7a45e8fa0530ba908225186656979efa" translate="yes" xml:space="preserve">
          <source>Unicode rules are used for the case change.</source>
          <target state="translated">大文字小文字の変更にはUnicodeルールを使用しています。</target>
        </trans-unit>
        <trans-unit id="1b41da839119c4860ed2bab536f19149822ad0f7" translate="yes" xml:space="preserve">
          <source>Unicode string</source>
          <target state="translated">ユニコード文字列</target>
        </trans-unit>
        <trans-unit id="f63eb0aa495029030f8880e8159d4eda857dd8ed" translate="yes" xml:space="preserve">
          <source>Unicode string properties are not implemented in (?[...]) in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">Unicode文字列プロパティは正規表現の（？[...]）に実装されていません。 &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="7088ba3066aa65d6bcc96771fbb92a42fd96dcd6" translate="yes" xml:space="preserve">
          <source>Unicode support is an extensive requirement. While Perl does not implement the Unicode standard or the accompanying technical reports from cover to cover, Perl does support many Unicode features.</source>
          <target state="translated">Unicode サポートは広範な要件です。Perl は Unicode 標準やそれに付随する技術レポートを隅から隅まで実装しているわけではありませんが、Perl は多くの Unicode 機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="92c5fb67050f7cc6a07c62ea0f43698241d0a5b2" translate="yes" xml:space="preserve">
          <source>Unicode surrogate U+%X is illegal in UTF-8</source>
          <target state="translated">UnicodeサロゲートU+%XはUTF-8では違法です。</target>
        </trans-unit>
        <trans-unit id="b8b243e5f3e426dd36737b42e29d2ec9970a7c1a" translate="yes" xml:space="preserve">
          <source>Unicode, of course, assigns each of those code points a particular meaning (along with ones above 255). To preserve backward compatibility, Perl only uses the Unicode meanings when there is some indication that Unicode is what is intended; otherwise the non-ASCII code points remain treated as if they are unassigned.</source>
          <target state="translated">もちろん、Unicode はこれらのコードポイントのそれぞれに特定の意味を割り当てます (255 以上のコードポイントと一緒に)。後方互換性を維持するために、Perl は Unicode が意図されたものであることを示す何らかの兆候がある場合にのみ Unicode の意味を使用します。</target>
        </trans-unit>
        <trans-unit id="21276899f4cb4b0159879360c7526c4fe6c28316" translate="yes" xml:space="preserve">
          <source>Unicode/Collate</source>
          <target state="translated">Unicode/Collate</target>
        </trans-unit>
        <trans-unit id="37148638183749a1c0b03d85014634d4e43c64c4" translate="yes" xml:space="preserve">
          <source>Unicode/Collate/Foo.txt</source>
          <target state="translated">Unicode/Collate/Foo.txt</target>
        </trans-unit>
        <trans-unit id="f77e952a14d870cb3ae7b18f391e8c5f3d325575" translate="yes" xml:space="preserve">
          <source>Unicode::Collate</source>
          <target state="translated">Unicode::Collate</target>
        </trans-unit>
        <trans-unit id="3ff519c896603d01c9e76e4f19191f11d112327a" translate="yes" xml:space="preserve">
          <source>Unicode::Collate - Unicode Collation Algorithm</source>
          <target state="translated">Unicode::Collate-Unicode 照合アルゴリズム</target>
        </trans-unit>
        <trans-unit id="fdf0d75274a879104b0f1f8bc64ee18ff02c5b30" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Big5</source>
          <target state="translated">Unicode::Collate::CJK::Big5</target>
        </trans-unit>
        <trans-unit id="1d6f6aa49ee6fad5eca6f35948b7e1bb0ab65190" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Big5 - weighting CJK Unified Ideographs for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::Big5-Unicode::Collate 用の日中韓統一表意文字の重み付け</target>
        </trans-unit>
        <trans-unit id="5df783cdcff877161e1582e96c9fee058c8ac391" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::GB2312</source>
          <target state="translated">Unicode::Collate::CJK::GB2312</target>
        </trans-unit>
        <trans-unit id="69f6a1af4b9d7847bba5939a34148141b098e758" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::GB2312 - weighting CJK Unified Ideographs for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::GB2312-Unicode::Collate のための日中韓統一表意文字の重み付け</target>
        </trans-unit>
        <trans-unit id="6a120ddf4b189ce790913ac61694171437406f3d" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::JISX0208</source>
          <target state="translated">Unicode::Collate::CJK::JISX0208</target>
        </trans-unit>
        <trans-unit id="52137c04544cacc73939ff1aee0c874c9d8fee08" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::JISX0208 - weighting JIS KANJI for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::JISX0208-Unicode::Collate用のJIS漢字の重み付け</target>
        </trans-unit>
        <trans-unit id="522cc80239808b956014178ec75f366b2cd491f0" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Korean</source>
          <target state="translated">Unicode::Collate::CJK::Korean</target>
        </trans-unit>
        <trans-unit id="0ac8b48e92e15bda76c4fcc728f48f96352b283f" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Korean - weighting CJK Unified Ideographs for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::Korean-Unicode::Collateのための日中韓統一表意文字の重み付け</target>
        </trans-unit>
        <trans-unit id="19c59af510fe79c64655e756d8461e5d375c2fd6" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Pinyin</source>
          <target state="translated">Unicode::Collate::CJK::Pinyin</target>
        </trans-unit>
        <trans-unit id="42747836215aeadf69f9c614290fca82880640f7" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Pinyin - weighting CJK Unified Ideographs for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::Pinyin-Unicode::Collate のための日中韓統一表意文字の重み付け</target>
        </trans-unit>
        <trans-unit id="119a4f4d104376889a668529add1217787695cd3" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Stroke</source>
          <target state="translated">Unicode::Collate::CJK::Stroke</target>
        </trans-unit>
        <trans-unit id="f4760535296459fcd8959501743735349df70437" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Stroke - weighting CJK Unified Ideographs for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::Stroke-Unicode::Collate 用の日中韓統一表意文字の重み付け</target>
        </trans-unit>
        <trans-unit id="935469afe79a7967133cbd5dc7a19cf8e8b7b28e" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Zhuyin</source>
          <target state="translated">Unicode::Collate::CJK::Zhuyin</target>
        </trans-unit>
        <trans-unit id="6bf20cf45b8ff713b3a40392be9d33f596934776" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::CJK::Zhuyin - weighting CJK Unified Ideographs for Unicode::Collate</source>
          <target state="translated">Unicode::Collate::CJK::Zhuyin-Unicode::Collate のための日中韓統一表意文字の重み付け</target>
        </trans-unit>
        <trans-unit id="1a163e245e5c3cf99dc2f5ab882390d17947426d" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::Locale</source>
          <target state="translated">Unicode::Collate::Locale</target>
        </trans-unit>
        <trans-unit id="001480054455d7b56706418239469b08b55ae695" translate="yes" xml:space="preserve">
          <source>Unicode::Collate::Locale - Linguistic tailoring for DUCET via Unicode::Collate</source>
          <target state="translated">Unicode::Collate::Locale-Unicode::Collate による DUCET の言語的テーラーリング</target>
        </trans-unit>
        <trans-unit id="72b47eca97eb095d02921b6571fab1a6dfdb0bc0" translate="yes" xml:space="preserve">
          <source>Unicode::Normalize</source>
          <target state="translated">Unicode::Normalize</target>
        </trans-unit>
        <trans-unit id="2e61bd2963848230702b059b3f915c279424ceeb" translate="yes" xml:space="preserve">
          <source>Unicode::Normalize - Unicode Normalization Forms</source>
          <target state="translated">Unicode::Normalize-Unicode正規化フォーム</target>
        </trans-unit>
        <trans-unit id="58e1ebb138145877210bc1aaddb6a695f639333f" translate="yes" xml:space="preserve">
          <source>Unicode::UCD</source>
          <target state="translated">Unicode::UCD</target>
        </trans-unit>
        <trans-unit id="878eb3fe5907f3dbbef3993a9d210c838c3bd0a6" translate="yes" xml:space="preserve">
          <source>Unicode::UCD - Unicode character database</source>
          <target state="translated">Unicode::UCD-Unicode 文字データベース</target>
        </trans-unit>
        <trans-unit id="b0e10771734c32d2d9e8385457afb6c4bd746163" translate="yes" xml:space="preserve">
          <source>Unicode::UCD::UnicodeVersion</source>
          <target state="translated">Unicode::UCD::UnicodeVersion</target>
        </trans-unit>
        <trans-unit id="1147d047b52e119e77fa52566535f97fa00f2d54" translate="yes" xml:space="preserve">
          <source>Unified method to both set and get options in the &lt;code&gt;SOL_SOCKET&lt;/code&gt; level. If called with one argument then &lt;a href=&quot;IO::Socket#getsockopt&quot;&gt;&quot;getsockopt&quot; in IO::Socket&lt;/a&gt; is called, otherwise &lt;a href=&quot;IO::Socket#setsockopt&quot;&gt;&quot;setsockopt&quot; in IO::Socket&lt;/a&gt; is called.</source>
          <target state="translated">&lt;code&gt;SOL_SOCKET&lt;/code&gt; レベルでオプションを設定および取得するための統一されたメソッド。1つの引数を指定して呼び出されると&lt;a href=&quot;IO::Socket#getsockopt&quot;&gt;、IO :: Socketの「getsockopt」&lt;/a&gt;が呼び出されます。それ以外の場合は、IO :: Socketの&lt;a href=&quot;IO::Socket#setsockopt&quot;&gt;「setsockopt」&lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c884d01b9429a9f7304a835d13687b8ca5872d3c" translate="yes" xml:space="preserve">
          <source>Unified method to both set and get options in the SOL_SOCKET level. If called with one argument then getsockopt is called, otherwise setsockopt is called.</source>
          <target state="translated">SOL_SOCKET レベルのオプションの設定と取得の両方を行う統一されたメソッド。1 つの引数を指定して呼ばれた場合は getsockopt が呼ばれ、そうでない場合は setsockopt が呼ばれます。</target>
        </trans-unit>
        <trans-unit id="238642af65f3add9fa062158d9a8954a0d8cc5fc" translate="yes" xml:space="preserve">
          <source>Unimplemented, but you can use &lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt; and the &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; module to achieve similar things.</source>
          <target state="translated">実装されていませんが、&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;と&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;モジュールを使用して同様のことを実現できます。</target>
        </trans-unit>
        <trans-unit id="e6507a9fbb8009ec64673ec8cd6b7aa40be844fe" translate="yes" xml:space="preserve">
          <source>Unimplemented, but you can use &lt;a href=&quot;perlfunc#die&quot;&gt;&quot;die&quot; in perlfunc&lt;/a&gt; and the &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; module to achieve similar things.</source>
          <target state="translated">実装されていませんが&lt;a href=&quot;perlfunc#die&quot;&gt;、perlfunc&lt;/a&gt;と&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;モジュールで「die」を使用して同様のことを実現できます。</target>
        </trans-unit>
        <trans-unit id="afec59d2cbb0d42662480e51b0e7e50584f1e2e5" translate="yes" xml:space="preserve">
          <source>Unimplemented, except on Windows, due to the vagaries of vendor locale names, returning &lt;code&gt;&quot;&quot;&lt;/code&gt; on non-Windows.</source>
          <target state="translated">ベンダーのロケール名が変動するため、Windowsを除いて実装されておらず、Windows以外では &lt;code&gt;&quot;&quot;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4e456a7d2242bb697d1c62ca28710a65f1b354e3" translate="yes" xml:space="preserve">
          <source>Unimplemented, so returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">実装されていないため、 &lt;code&gt;&quot;&quot;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="9769121f10f77079b27eb08e9ffa488cbcc37ed0" translate="yes" xml:space="preserve">
          <source>United Kingdom</source>
          <target state="translated">イギリス</target>
        </trans-unit>
        <trans-unit id="768685ca582abd0af2fbb57ca37752aa98c9372b" translate="yes" xml:space="preserve">
          <source>United States</source>
          <target state="translated">合衆国</target>
        </trans-unit>
        <trans-unit id="c6635fe323dcba6e8b8b2d5cdbb340361ce906ed" translate="yes" xml:space="preserve">
          <source>Universal Binary support</source>
          <target state="translated">ユニバーサルバイナリのサポート</target>
        </trans-unit>
        <trans-unit id="a1a652fb80ef2238fc4c5e10930af87b4f3aac30" translate="yes" xml:space="preserve">
          <source>Universal Character Set</source>
          <target state="translated">ユニバーサルキャラクターセット</target>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="2fb49d2b5adcca8ced12a532099ac9adce5647b1" translate="yes" xml:space="preserve">
          <source>Unix Network Programming, 2nd Edition, Volume 1</source>
          <target state="translated">ユニックスネットワークプログラミング 第2版 第1巻</target>
        </trans-unit>
        <trans-unit id="b4c5506923f63fcc0ec2a3603b475130b23382af" translate="yes" xml:space="preserve">
          <source>Unix Review</source>
          <target state="translated">Unixレビュー</target>
        </trans-unit>
        <trans-unit id="4b39a128140df62988dc25aafca006880dd71ad2" translate="yes" xml:space="preserve">
          <source>Unix has no need of special linker flags.</source>
          <target state="translated">Unixでは特別なリンカフラグは必要ありません。</target>
        </trans-unit>
        <trans-unit id="4547b2fe2a8711e2250c90726e47d0a32f9e7c0b" translate="yes" xml:space="preserve">
          <source>Unix style shell macros like &lt;code&gt;$(abcd)&lt;/code&gt; are passed through instead of being converted to &lt;code&gt;$^(abcd^)&lt;/code&gt; independent of the &lt;code&gt;DECC$EFS_CHARSET&lt;/code&gt; feature setting. Unix style shell macros should not use characters that are not in the ASCII character set, as the resulting specification may or may not be still in UTF8 format.</source>
          <target state="translated">&lt;code&gt;$(abcd)&lt;/code&gt; のようなUnixスタイルのシェルマクロは、 &lt;code&gt;DECC$EFS_CHARSET&lt;/code&gt; 機能設定に関係なく、 &lt;code&gt;$^(abcd^)&lt;/code&gt; に変換される代わりに渡されます。Unixスタイルのシェルマクロでは、ASCII文字セットに含まれていない文字を使用しないでください。結果の仕様がUTF8形式のままである場合とそうでない場合があるためです。</target>
        </trans-unit>
        <trans-unit id="faa3f11d873bf24fcae352a27226c0c2e88d087f" translate="yes" xml:space="preserve">
          <source>Unix's &lt;code&gt;#!&lt;/code&gt; technique can be simulated on other systems:</source>
          <target state="translated">Unixの &lt;code&gt;#!&lt;/code&gt; テクニックは他のシステムでシミュレートできます：</target>
        </trans-unit>
        <trans-unit id="7f87c004392cd89a556aff5f86328de12b9ca773" translate="yes" xml:space="preserve">
          <source>Unix-Domain TCP Clients and Servers</source>
          <target state="translated">Unix ドメイン TCP クライアントとサーバ</target>
        </trans-unit>
        <trans-unit id="4acfa258fe45e38658aa00a5dfda8b8abeddb8cc" translate="yes" xml:space="preserve">
          <source>Unix-domain sockets on OS/2 live in a pseudo-file-system &lt;code&gt;/sockets/...&lt;/code&gt; . To avoid a failure to create a socket with a name of a different form, &lt;code&gt;&quot;/socket/&quot;&lt;/code&gt; is prepended to the socket name (unless it starts with this already).</source>
          <target state="translated">OS / 2のUnixドメインソケットは、疑似ファイルシステム &lt;code&gt;/sockets/...&lt;/code&gt; にあります。別の形式の名前でソケットを作成できないことを回避するために、 &lt;code&gt;&quot;/socket/&quot;&lt;/code&gt; がソケット名の前に付加されます（これがすでにこれで始まっている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="35779ed7c2718c03c2a679cc689368ba373e9248" translate="yes" xml:space="preserve">
          <source>Unix-domain sockets on OS/2 live in a pseudo-file-system &lt;code&gt;/sockets/...&lt;/code&gt;. To avoid a failure to create a socket with a name of a different form, &lt;code&gt;&quot;/socket/&quot;&lt;/code&gt; is prepended to the socket name (unless it starts with this already).</source>
          <target state="translated">OS / 2のUnixドメインソケットは、疑似ファイルシステム &lt;code&gt;/sockets/...&lt;/code&gt; にあります。別の形式の名前でソケットを作成できないようにするために、ソケット名の前に &lt;code&gt;&quot;/socket/&quot;&lt;/code&gt; が付加されます（すでにこれで始まっている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="4f3c45c8b86738464ace2f8005c8fbdecfe76366" translate="yes" xml:space="preserve">
          <source>Unix.U</source>
          <target state="translated">Unix.U</target>
        </trans-unit>
        <trans-unit id="bc7819b34ff87570745fbe461e36a16f80e562ce" translate="yes" xml:space="preserve">
          <source>Unknown</source>
          <target state="translated">Unknown</target>
        </trans-unit>
        <trans-unit id="a8b5e7a7d509a7c62d93ee2bad1c35496336638f" translate="yes" xml:space="preserve">
          <source>Unknown &quot;re&quot; subpragma '%s' (known ones are: %s)</source>
          <target state="translated">不明な &quot;re&quot; サブプラグマ '%s' (既知のものは以下の通りです:%s)。</target>
        </trans-unit>
        <trans-unit id="ae6c175629d52f8caa8d90709840d842ec6a24a8" translate="yes" xml:space="preserve">
          <source>Unknown &amp;lt;unknown@example.com&amp;gt;</source>
          <target state="translated">不明&amp;lt;unknown@example.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4260834064ed4da863200d4ab98727ee77cc0db4" translate="yes" xml:space="preserve">
          <source>Unknown '(*...)' construct '%s' in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">不明な '（* ...）'は正規表現の '％s'を構成します。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="516d733c8bf9db439f1f86408315d55784a8e43c" translate="yes" xml:space="preserve">
          <source>Unknown '=xxxx' commands, unknown 'X&amp;lt;...&amp;gt;' interior-sequences, and unterminated interior sequences.</source>
          <target state="translated">不明な '= xxxx'コマンド、不明な 'X &amp;lt;...&amp;gt;'内部シーケンス、および終了していない内部シーケンス。</target>
        </trans-unit>
        <trans-unit id="0c7f616921e8aa6ce31483dac2c125041fa7ff10" translate="yes" xml:space="preserve">
          <source>Unknown E content in E&amp;lt;</source>
          <target state="translated">E &amp;lt;の不明なEコンテンツ</target>
        </trans-unit>
        <trans-unit id="b452be528de2ca72fbdca17c8a6b9000bd72960e" translate="yes" xml:space="preserve">
          <source>Unknown PerlIO layer &quot;%s&quot;</source>
          <target state="translated">不明な PerlIO レイヤ &quot;%s&quot;。</target>
        </trans-unit>
        <trans-unit id="bcc9d502ba9bb87ff9a938ae6d50ef1785f93443" translate="yes" xml:space="preserve">
          <source>Unknown Unicode option letter '%c'</source>
          <target state="translated">不明な Unicode オプション文字 '%c' です。</target>
        </trans-unit>
        <trans-unit id="b383a6c76e59091add963d05eca879c2155929c3" translate="yes" xml:space="preserve">
          <source>Unknown Unicode option value %d</source>
          <target state="translated">不明な Unicode オプション値 %d。</target>
        </trans-unit>
        <trans-unit id="63b64d99361c84dd2b785abb8dd250103d6a822f" translate="yes" xml:space="preserve">
          <source>Unknown charname '%s'</source>
          <target state="translated">不明な文字列 '%s'</target>
        </trans-unit>
        <trans-unit id="4f8c284e5307746cdeea5551e2520dce4836d73d" translate="yes" xml:space="preserve">
          <source>Unknown directive:</source>
          <target state="translated">不明なディレクティブ。</target>
        </trans-unit>
        <trans-unit id="e5fd9aa24c9417e7332e6f25936ae2a6ec8f1524" translate="yes" xml:space="preserve">
          <source>Unknown error</source>
          <target state="translated">不明なエラー</target>
        </trans-unit>
        <trans-unit id="2ebda19c79ae8fdc09d9f934173a9e0b1dda8ac2" translate="yes" xml:space="preserve">
          <source>Unknown locale category %d; can't set it to %s</source>
          <target state="translated">不明なロケール・カテゴリ %d。</target>
        </trans-unit>
        <trans-unit id="17e9349b86ed14bdbc36e717e0e54a45178a5709" translate="yes" xml:space="preserve">
          <source>Unknown open() mode '%s'</source>
          <target state="translated">不明な open()モード '%s'。</target>
        </trans-unit>
        <trans-unit id="7a9ce623a0a054e7c503d1bead726383200a08d0" translate="yes" xml:space="preserve">
          <source>Unknown option: %s</source>
          <target state="translated">不明なオプション:%s</target>
        </trans-unit>
        <trans-unit id="94063b188637c4358408514f0dec4be5138069da" translate="yes" xml:space="preserve">
          <source>Unknown process %x sent message to prime_env_iter: %s</source>
          <target state="translated">不明なプロセス %x が prime_env_iter にメッセージを送信しました:%s。</target>
        </trans-unit>
        <trans-unit id="5a27728149a20fa874d8e5d6ec5784571e435f85" translate="yes" xml:space="preserve">
          <source>Unknown regexp modifier &quot;/%s&quot;</source>
          <target state="translated">不明な正規表現修飾子 &quot;/%s&quot;</target>
        </trans-unit>
        <trans-unit id="48c5c163aa1fa71615dee0d3c90ca77bf54723d6" translate="yes" xml:space="preserve">
          <source>Unknown result token.</source>
          <target state="translated">不明な結果トークンです。</target>
        </trans-unit>
        <trans-unit id="5362b9dbff55eae528c95c41a9cdfba23a42b91e" translate="yes" xml:space="preserve">
          <source>Unknown switch condition (?(...)) in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の不明なスイッチ条件（？（...））。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="cc278b1f69a68c5fa1706993032fe0bce8d046fa" translate="yes" xml:space="preserve">
          <source>Unknown verb pattern '%s' in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の不明な動詞パターン '％s'; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="faa3d10b86eac319b820b63f583e0a0a896d21a3" translate="yes" xml:space="preserve">
          <source>Unknown warnings category '%s'</source>
          <target state="translated">不明な警告カテゴリ '%s'</target>
        </trans-unit>
        <trans-unit id="4013e411624fa8892f8200feafb69475d2458d0b" translate="yes" xml:space="preserve">
          <source>Unknowns are &lt;code&gt;&quot;-&quot;&lt;/code&gt; . Unknowns can happen unfortunately quite easily: if the platform doesn't support retrieving the information; if the binary is missing the debug information; if the optimizer has transformed the code by for example inlining.</source>
          <target state="translated">不明は &lt;code&gt;&quot;-&quot;&lt;/code&gt; です。未知は、残念ながら非常に簡単に発生する可能性があります。プラットフォームが情報の取得をサポートしていない場合。バイナリにデバッグ情報がない場合。オプティマイザがインライン化などによってコードを変換した場合。</target>
        </trans-unit>
        <trans-unit id="e246db88408875913f8b8fd552f45cc3814a8897" translate="yes" xml:space="preserve">
          <source>Unknowns are &lt;code&gt;&quot;-&quot;&lt;/code&gt;. Unknowns can happen unfortunately quite easily: if the platform doesn't support retrieving the information; if the binary is missing the debug information; if the optimizer has transformed the code by for example inlining.</source>
          <target state="translated">不明なものは &lt;code&gt;&quot;-&quot;&lt;/code&gt; です。残念ながら、不明な点は非常に簡単に発生する可能性があります。プラットフォームが情報の取得をサポートしていない場合。バイナリにデバッグ情報がない場合。オプティマイザがインライン化などによってコードを変換した場合。</target>
        </trans-unit>
        <trans-unit id="ce906b20ea9a7a0bf0bcbae85c1c9421e3de60b2" translate="yes" xml:space="preserve">
          <source>Unless %hash has already been locked the key/value could be deleted regardless of this setting.</source>
          <target state="translated">hash が既にロックされていない限り、この設定に関係なくキー/値を削除できます。</target>
        </trans-unit>
        <trans-unit id="5c6af5673dc4ae00136df64bec88a6550bf388e5" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;${^UNICODE}&lt;/code&gt; (available starting in v5.8.2) exists and is non-zero, the PerlIO layers of &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; are set to &quot;&lt;code&gt;:encoding(&lt;i&gt;ENCNAME&lt;/i&gt;)&lt;/code&gt;&quot;. Therefore,</source>
          <target state="translated">ない限り、 &lt;code&gt;${^UNICODE}&lt;/code&gt; （v5.8.2で入手可能な出発）が存在し、非ゼロである、のPerlIOを層 &lt;code&gt;STDIN&lt;/code&gt; および &lt;code&gt;STDOUT&lt;/code&gt; は「に設定されている &lt;code&gt;:encoding(&lt;i&gt;ENCNAME&lt;/i&gt;)&lt;/code&gt; 」。したがって、</target>
        </trans-unit>
        <trans-unit id="d2c8c659e558ac6c6718a8a57a68dcfe5600f320" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; (&lt;code&gt;-Accflags=-DPERL_MEM_LOG_NOIMPL&lt;/code&gt;) is also compiled, the logging functions read $ENV{PERL_MEM_LOG} to determine whether to log the event, and if so how:</source>
          <target state="translated">&lt;code&gt;-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; （ &lt;code&gt;-Accflags=-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; ）もコンパイルされていない限り、ロギング関数は$ ENV {PERL_MEM_LOG}を読み取って、イベントをログに記録するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="c4a238cf9ea26a0e7ddfda497c5bf0d771bd8656" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; is also compiled, the logging functions read $ENV{PERL_MEM_LOG} to determine whether to log the event, and if so how:</source>
          <target state="translated">&lt;code&gt;-DPERL_MEM_LOG_NOIMPL&lt;/code&gt; もコンパイルされていない限り、ロギング関数は$ ENV {PERL_MEM_LOG}を読み取って、イベントをログに記録するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="7183c27cf3fecde6bcc64c00a3a891d43f73c77b" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; is set to &lt;code&gt;T&lt;/code&gt; (and the kernel is after 2000/09/01), such DLLs are considered to be global. When loading a global DLL it is first looked in the table of already-loaded global DLLs. Because of this the fact that one executable loaded a DLL from &lt;code&gt;BEGINLIBPATH&lt;/code&gt; and &lt;code&gt;ENDLIBPATH&lt;/code&gt; , or</source>
          <target state="translated">&lt;code&gt;LIBPATHSTRICT&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; に設定されていない限り（およびカーネルが2000/09/01以降）、そのようなDLLはグローバルであると見なされます。グローバルDLLをロードするときは、最初に、すでにロードされているグローバルDLLのテーブルを調べます。このため、1つの実行可能ファイルが &lt;code&gt;BEGINLIBPATH&lt;/code&gt; および &lt;code&gt;ENDLIBPATH&lt;/code&gt; からDLLをロードした、または</target>
        </trans-unit>
        <trans-unit id="a9d2404af2307482983ff6743f035f7118e9d8f6" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;LIBPATHSTRICT&lt;/code&gt; is set to &lt;code&gt;T&lt;/code&gt; (and the kernel is after 2000/09/01), such DLLs are considered to be global. When loading a global DLL it is first looked in the table of already-loaded global DLLs. Because of this the fact that one executable loaded a DLL from &lt;code&gt;BEGINLIBPATH&lt;/code&gt; and &lt;code&gt;ENDLIBPATH&lt;/code&gt;, or</source>
          <target state="translated">&lt;code&gt;LIBPATHSTRICT&lt;/code&gt; が &lt;code&gt;T&lt;/code&gt; に設定されていない限り（そしてカーネルが2000/09/01以降である場合）、そのようなDLLはグローバルであると見なされます。グローバルDLLをロードすると、最初にロード済みのグローバルDLLのテーブルが検索されます。このため、1つの実行可能ファイルが &lt;code&gt;BEGINLIBPATH&lt;/code&gt; および &lt;code&gt;ENDLIBPATH&lt;/code&gt; からDLLをロードしたという事実、または</target>
        </trans-unit>
        <trans-unit id="4244b98dff2bf774775c08e4df5afb2e645e4b77" translate="yes" xml:space="preserve">
          <source>Unless ASCII vs. EBCDIC issues are specifically being discussed, references to UTF-8 encoding in this document and elsewhere should be read as meaning UTF-EBCDIC on EBCDIC platforms. See &lt;a href=&quot;perlebcdic#Unicode-and-UTF&quot;&gt;&quot;Unicode and UTF&quot; in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">ASCIIとEBCDICの問題が具体的に議論されていない限り、このドキュメントや他の場所でのUTF-8エンコーディングへの言及は、EBCDICプラットフォームでのUTF-EBCDICを意味するものとして読む必要があります。&lt;a href=&quot;perlebcdic#Unicode-and-UTF&quot;&gt;perlebcdicの「UnicodeとUTF」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="025ed2d87cd53899da043f16934d54b56cb767cf" translate="yes" xml:space="preserve">
          <source>Unless ASCII vs. EBCDIC issues are specifically being discussed, references to UTF-8 encoding in this document and elsewhere should be read as meaning UTF-EBCDIC on EBCDIC platforms. See &lt;a href=&quot;perlebcdic#Unicode-and-UTF&quot;&gt;Unicode and UTF in perlebcdic&lt;/a&gt;.</source>
          <target state="translated">ASCIIとEBCDICの問題が特に議論されていない限り、このドキュメントおよび他の場所でのUTF-8エンコーディングへの参照は、EBCDICプラットフォームでのUTF-EBCDICを意味するものとして読む必要があります。&lt;a href=&quot;perlebcdic#Unicode-and-UTF&quot;&gt;perlebcdicのUnicodeおよびUTFを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="763e516abf0169c17797549989072db7b3b436d9" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, functions return 0 on success, or a negative value (usually &lt;code&gt;EOF&lt;/code&gt; which is usually -1) and set &lt;code&gt;errno&lt;/code&gt; on error.</source>
          <target state="translated">特に明記されていない限り、関数は成功すると0を返すか、負の値（通常は &lt;code&gt;EOF&lt;/code&gt; で通常は-1）を &lt;code&gt;errno&lt;/code&gt; 、エラー時にはerrnoを設定します。</target>
        </trans-unit>
        <trans-unit id="843ebacc41e4317d9c7bf3f947fad475a9e1f11b" translate="yes" xml:space="preserve">
          <source>Unless otherwise notes, all examples below require this standard preamble to work correctly, with the &lt;code&gt;#!&lt;/code&gt; adjusted to work on your system:</source>
          <target state="translated">特に注記がない限り、以下のすべての例では、 &lt;code&gt;#!&lt;/code&gt; を使用してこの標準プリアンブルが正しく機能する必要があります。システムで動作するように調整：</target>
        </trans-unit>
        <trans-unit id="a1410ee8e42e843fa403d9edd63361088b53c82a" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified, version numbers &lt;b&gt;must&lt;/b&gt; appear in one of two formats:</source>
          <target state="translated">特に指定のない限り、バージョン番号は次の2つの形式のいずれかで表示される&lt;b&gt;必要&lt;/b&gt;が&lt;b&gt;あり&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="519ecd12b4838877006c606ab377c9933076da06" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated all methods return either a</source>
          <target state="translated">特に指定がない限り、すべてのメソッドは</target>
        </trans-unit>
        <trans-unit id="58c869a304e00ffd24d619f7d44db8d57f44a80c" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated it works just like ExtUtils::MM_Unix</source>
          <target state="translated">特に明記されていない限り、ExtUtils::MM_Unix と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="ae0b84fa2af86714bff9b9ce409d73281e7852b8" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated it works just like ExtUtils::MM_Unix.</source>
          <target state="translated">特に明記されていない限り、ExtUtils::MM_Unix と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="caa9da45012bfbe0b5378d58f4fff0a9abfa58b5" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated, it works just like ExtUtils::MM_Unix</source>
          <target state="translated">特に指定がない限り、ExtUtils::MM_Unix と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="495362fe83affb77b166fe352e049869ffdf5946" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated, it works just like ExtUtils::MM_Unix.</source>
          <target state="translated">特に記載がない限り、ExtUtils::MM_Unix と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="42e400a7ab19dec964d9377da14546fab4feb3ec" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;anyinflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;anyinflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="47a707f463b0bb3f1b25444c520600dbd6696505" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;anyuncompress&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;anyuncompress&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="d669d839575081392547a5a9cafaedbd09bec28c" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;bunzip2&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;bunzip2&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションのパラメーターは、以下の&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクターオプション&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="5cd0d3bee7135d518d8ccc595535d8b3eccde37f" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;bzip2&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;bzip2&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="2d2f8a94031befaa66720968f47bd4dde9da6fcf" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;deflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;deflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="f180e51799fa543d0272bd825b3d860097f806c2" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;gunzip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;gunzip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="43b54de84f56f9f511018d58087cdd33377321ec" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;gzip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;gzip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="d8c0791fbf600370c86e6ae040e4b2abd896e9ba" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;inflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;inflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="e65e4b1379d48c357409defc2e3a088bfcc64051" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;rawdeflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;rawdeflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="f9aa434ca385a7cef6abc358c51e5f3189796565" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;rawinflate&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下で指定されていない限り、 &lt;code&gt;rawinflate&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; のオプションパラメータは、以下の「&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション」&lt;/a&gt;セクションで定義されているOOインターフェースで使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="e2285dec1544503fb1e6e19eb0aec81e1f5a9726" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;unzip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;unzip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="f45874d912d180929ebed6cffec516fc7cf2fb97" translate="yes" xml:space="preserve">
          <source>Unless specified below, the optional parameters for &lt;code&gt;zip&lt;/code&gt; , &lt;code&gt;OPTS&lt;/code&gt; , are the same as those used with the OO interface defined in the &lt;a href=&quot;#Constructor-Options&quot;&gt;Constructor Options&lt;/a&gt; section below.</source>
          <target state="translated">以下の指定がない限り、のためのオプションパラメータ &lt;code&gt;zip&lt;/code&gt; 、 &lt;code&gt;OPTS&lt;/code&gt; は、で定義されたオブジェクト指向インタフェースを用いたものと同じである&lt;a href=&quot;#Constructor-Options&quot;&gt;コンストラクタオプション&lt;/a&gt;以下のセクション。</target>
        </trans-unit>
        <trans-unit id="871cfac0f7d812719fa8ee355ce0991623ac4e0b" translate="yes" xml:space="preserve">
          <source>Unless specified otherwise all method can be called as class methods, or as object methods. If called as class methods then the &quot;default&quot; object will be used, and if necessary created using the current processes %Config and @INC. See the 'default' option to new() for details.</source>
          <target state="translated">特に指定がない限り、すべてのメソッドはクラス・メソッドとして、またはオブジェクト・メソッドとして呼び出すことができます。クラス・メソッドとして呼び出された場合、&quot;既定の&quot; オブジェクトが使用され、必要に応じて現在のプロセス %Config および @INC を使用して作成されます。詳細は new()の 'default' オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="360b129724fa7c1c8235f3513edf30406e818a7b" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;/r&lt;/code&gt; option is used, the string specified with &lt;code&gt;=~&lt;/code&gt; must be a scalar variable, an array element, a hash element, or an assignment to one of those; in other words, an lvalue.</source>
          <target state="translated">&lt;code&gt;/r&lt;/code&gt; オプションを使用しない限り、 &lt;code&gt;=~&lt;/code&gt; 指定する文字列は、スカラー変数、配列要素、ハッシュ要素、またはこれらのいずれかの割り当てでなければなりません。つまり、左辺値。</target>
        </trans-unit>
        <trans-unit id="9ef73743f2ca77d91834c677a3b2a131dd0854b0" translate="yes" xml:space="preserve">
          <source>Unless the above additional feature is enabled, nothing about the backtrace functionality is visible, except for the Perl/XS level.</source>
          <target state="translated">上記の追加機能を有効にしない限り、Perl/XSレベル以外ではバックトレース機能については何も表示されません。</target>
        </trans-unit>
        <trans-unit id="c2c4cb992d99b0b97748811097f97eea4d2ce81b" translate="yes" xml:space="preserve">
          <source>Unless the operator is an assignment (&lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; , etc.), repeat step (1) in respect of the second operand.</source>
          <target state="translated">演算子が代入（ &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; など）でない限り、2番目のオペランドに関してステップ（1）を繰り返します。</target>
        </trans-unit>
        <trans-unit id="05d7e76af21f11f9c892472417201fd8ed4cf910" translate="yes" xml:space="preserve">
          <source>Unless the operator is an assignment (&lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, etc.), repeat step (1) in respect of the second operand.</source>
          <target state="translated">演算子が代入（ &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; など）でない限り、2番目のオペランドに関してステップ（1）を繰り返します。</target>
        </trans-unit>
        <trans-unit id="2c6634c0ddc3b2fcdacf253fa92fd7c8403abaf0" translate="yes" xml:space="preserve">
          <source>Unless the pattern or string are encoded in UTF-8, only ASCII characters can match positively.</source>
          <target state="translated">パターンや文字列がUTF-8でエンコードされていない限り、ASCII文字のみが正の意味で一致します。</target>
        </trans-unit>
        <trans-unit id="93f6520e33056598a5ce68e86d15794aa942a8a6" translate="yes" xml:space="preserve">
          <source>Unless they are explicitly specified, the default values for the exit status, verbose level, and output stream to use are determined as follows:</source>
          <target state="translated">明示的に指定しない限り、使用する終了ステータス、冗長レベル、出力ストリームのデフォルト値は以下のように決定されます。</target>
        </trans-unit>
        <trans-unit id="28631a8600ab2d0e4799cb9a021cc0306169b6f9" translate="yes" xml:space="preserve">
          <source>Unless you are accessing the CPAN on your filesystem via a file: URL, CPAN.pm needs to keep the source files it downloads somewhere. Please supply a directory where the downloaded files are to be kept.</source>
          <target state="translated">ファイルを介してファイルシステム上のCPANにアクセスしているのでなければ、CPAN.pmはダウンロードしたソースファイルをどこかに保存しておく必要があります。URL経由でファイルシステム上のCPANにアクセスしていない限り、CPAN.pmはダウンロードしたソースファイルをどこかに保存しておく必要があります。ダウンロードしたファイルが保存されるディレクトリを指定してください。</target>
        </trans-unit>
        <trans-unit id="6b861eac07037b268358d427fce8707b48f9500e" translate="yes" xml:space="preserve">
          <source>Unless you are using the &lt;code&gt;fields&lt;/code&gt; pragma, consider this module discouraged in favor of the lighter-weight &lt;code&gt;parent&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; プラグマを使用しているのでない限り、このモジュールはより軽量な &lt;code&gt;parent&lt;/code&gt; を優先することをお勧めしません。</target>
        </trans-unit>
        <trans-unit id="bd40baebc35d8dd113beed64e1b32df4e1666e49" translate="yes" xml:space="preserve">
          <source>Unless you are using the &lt;code&gt;fields&lt;/code&gt; pragma, consider this module discouraged in favor of the lighter-weight &lt;code&gt;parent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; プラグマを使用している場合を除き、このモジュールは軽量の &lt;code&gt;parent&lt;/code&gt; 優先して推奨されていないと考えてください。</target>
        </trans-unit>
        <trans-unit id="84f0f4d743460958895c1346a2bcc4ae32486815" translate="yes" xml:space="preserve">
          <source>Unless you don't like the possibility of there being part of your Perl scripts embedded in a database file, this is nothing to worry about.</source>
          <target state="translated">データベースファイルにPerlスクリプトの一部が埋め込まれている可能性を嫌わない限り、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="078c8b3d64fda031c2ca3a111adc19b05790c7fb" translate="yes" xml:space="preserve">
          <source>Unless you have a particular reason to use the two-argument form you should use the three-argument form of open() which does not treat any characters in the filename as special.</source>
          <target state="translated">2 引数形式を使う特別な理由がない限り、ファイル名の中のいかなる文字も特別なものとして扱わない open()の 3 引数形式を使うべきです。</target>
        </trans-unit>
        <trans-unit id="bcd145902080112cd3bd3565e1aa0b2eb6698439" translate="yes" xml:space="preserve">
          <source>Unless you have good reasons for using some other format (for example, a format used within your company), the convention is to name your changelog file &lt;code&gt;Changes&lt;/code&gt; , and to follow the simple format described in &lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Changes::Spec&quot;&gt;CPAN::Changes::Spec&lt;/a&gt;.</source>
          <target state="translated">他の形式（たとえば、社内で使用されている形式）を使用する十分な理由がない限り、規則は、 &lt;code&gt;Changes&lt;/code&gt; ログファイルにChangesという名前を付け、&lt;a href=&quot;http://search.cpan.org/perldoc/CPAN::Changes::Spec&quot;&gt;CPAN :: Changes :: Specで&lt;/a&gt;説明されている単純な形式に従うことです。</target>
        </trans-unit>
        <trans-unit id="87db3fba7e4f130f44369a6d247e1f97fe2c94e1" translate="yes" xml:space="preserve">
          <source>Unless you have good reasons for using some other format (for example, a format used within your company), the convention is to name your changelog file &lt;code&gt;Changes&lt;/code&gt;, and to follow the simple format described in &lt;a href=&quot;CPAN::Changes::Spec&quot;&gt;CPAN::Changes::Spec&lt;/a&gt;.</source>
          <target state="translated">他の形式（たとえば、社内で使用されている形式）を使用する正当な理由がない限り、慣例では、 &lt;code&gt;Changes&lt;/code&gt; ログファイルにChangesという名前を付け、&lt;a href=&quot;CPAN::Changes::Spec&quot;&gt;CPAN :: Changes :: Specで&lt;/a&gt;説明されている単純な形式に従います。</target>
        </trans-unit>
        <trans-unit id="ba7a1f205e8e2686b0c4b6d39cce725cef83741e" translate="yes" xml:space="preserve">
          <source>Unless you know better, serializing hook should always say:</source>
          <target state="translated">よほどのことがない限り、シリアライズフックは常に言うべきです。</target>
        </trans-unit>
        <trans-unit id="4f5f76f31b82833340ef52081bb4d0e79eab2cc2" translate="yes" xml:space="preserve">
          <source>Unless you know with 100% certainty that quux() is only ever available for the &quot;Foonix&quot; operating system &lt;b&gt;and&lt;/b&gt; that is available &lt;b&gt;and&lt;/b&gt; correctly working for &lt;b&gt;all&lt;/b&gt; past, present, &lt;b&gt;and&lt;/b&gt; future versions of &quot;Foonix&quot;, the above is very wrong. This is more correct (though still not perfect, because the below is a compile-time check):</source>
          <target state="translated">あなたは100％とquux（）が「Foonix」オペレーティングシステムのためにしか利用可能であることを確実に知っている限り&lt;b&gt;と&lt;/b&gt;それが利用可能である&lt;b&gt;と&lt;/b&gt;正しくのために働く&lt;b&gt;すべての&lt;/b&gt;過去、現在、&lt;b&gt;そして&lt;/b&gt;「Foonix」の将来のバージョンでは、上記の非常に間違っています。これはより正確です（ただし、以下はコンパイル時のチェックであるため、まだ完全ではありません）。</target>
        </trans-unit>
        <trans-unit id="93ff79231a3d36c0c3d8ce3114e701a1baebbf25" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a false value, Pod::Search will recurse into subdirectories of the search directories.</source>
          <target state="translated">この属性をfalseに設定しない限り、Pod::Searchは検索ディレクトリのサブディレクトリに再帰します。</target>
        </trans-unit>
        <trans-unit id="17c62f898b45d3be500e6c39bec8d493a60a2715" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a true value, Pod::Search will apply Perl-specific heuristics to find the correct module PODs quickly. This attribute's default value is false. You won't normally need to set this to true.</source>
          <target state="translated">この属性を真の値に設定しない限り、Pod::SearchはPerl固有のヒューリスティックを適用して、正しいモジュールのPODを素早く見つけます。この属性のデフォルト値はfalseです。通常はこれをtrueに設定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="9f9a16887abf4c916f1550cac344cc208f6c0b6b" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a true value, Pod::Simple::Search will consider only the first file of a given modulename as it looks thru the specified directories; that is, with this option off, if Pod::Simple::Search has seen a &lt;code&gt;somepathdir/Foo/Bar.pm&lt;/code&gt; already in this search, then it won't bother looking at a &lt;code&gt;somelaterpathdir/Foo/Bar.pm&lt;/code&gt; later on in that search, because that file is merely a &quot;shadow&quot;. But if you turn on &lt;code&gt;$self-&amp;gt;shadows(1)&lt;/code&gt; , then these &quot;shadow&quot; files are inspected too, and are noted in the pathname2podname return hash.</source>
          <target state="translated">この属性をtrue値に設定しない限り、Pod :: Simple :: Searchは、指定されたディレクトリを調べて、指定されたモジュール名の最初のファイルのみを考慮します。ポッド::シンプル::検索が見られた場合、それは、このオプションをオフにして、ある &lt;code&gt;somepathdir/Foo/Bar.pm&lt;/code&gt; すでにこの検索では、それは見て気にしないだろう &lt;code&gt;somelaterpathdir/Foo/Bar.pm&lt;/code&gt; 以降で上その検索は、そのファイルが単に「シャドウ」であるためです。ただし、 &lt;code&gt;$self-&amp;gt;shadows(1)&lt;/code&gt; をオンにすると、これらの「シャドウ」ファイルも検査され、pathname2podname戻りハッシュに記録されます。</target>
        </trans-unit>
        <trans-unit id="4fc995dcd124519ccc18ad86cc265d6cd653065c" translate="yes" xml:space="preserve">
          <source>Unless you set this attribute to a true value, Pod::Simple::Search will consider only the first file of a given modulename as it looks thru the specified directories; that is, with this option off, if Pod::Simple::Search has seen a &lt;code&gt;somepathdir/Foo/Bar.pm&lt;/code&gt; already in this search, then it won't bother looking at a &lt;code&gt;somelaterpathdir/Foo/Bar.pm&lt;/code&gt; later on in that search, because that file is merely a &quot;shadow&quot;. But if you turn on &lt;code&gt;$self-&amp;gt;shadows(1)&lt;/code&gt;, then these &quot;shadow&quot; files are inspected too, and are noted in the pathname2podname return hash.</source>
          <target state="translated">この属性をtrue値に設定しない限り、Pod :: Simple :: Searchは、指定されたディレクトリを検索するときに、指定されたモジュール名の最初のファイルのみを考慮します。ポッド::シンプル::検索が見られた場合、それは、このオプションをオフにして、ある &lt;code&gt;somepathdir/Foo/Bar.pm&lt;/code&gt; すでにこの検索では、それは見て気にしないだろう &lt;code&gt;somelaterpathdir/Foo/Bar.pm&lt;/code&gt; 以降で上そのファイルは単なる「影」であるため、その検索。ただし、 &lt;code&gt;$self-&amp;gt;shadows(1)&lt;/code&gt; をオンにすると、これらの「シャドウ」ファイルも検査され、pathname2podnameの戻りハッシュに記録されます。</target>
        </trans-unit>
        <trans-unit id="fa89971032de2d3d226811c31dc2014b63de305b" translate="yes" xml:space="preserve">
          <source>Unless you want to override the defaults, prefer META_MERGE so as to get the advantage of any future defaults.</source>
          <target state="translated">デフォルトを上書きしたい場合を除いて、将来のデフォルトの利点を得るために、META_MERGEを推奨します。</target>
        </trans-unit>
        <trans-unit id="eb83985aa16dab9a13560a8e8f1159fe638efa8b" translate="yes" xml:space="preserve">
          <source>Unless you want to use its advanced features, this is probably all you need to know to use Exporter.</source>
          <target state="translated">その高度な機能を使いたいのでなければ、Exporterを使うために知っておくべきことはこれだけでしょう。</target>
        </trans-unit>
        <trans-unit id="04c205c66e7bc90d55cfb8afb031ef118a5c83da" translate="yes" xml:space="preserve">
          <source>Unless you&amp;rsquo;ve used &lt;code&gt;/a&lt;/code&gt; or &lt;code&gt;/aa&lt;/code&gt; , &lt;code&gt;\d&lt;/code&gt; matches more than ASCII digits only, but Perl&amp;rsquo;s implicit string-to-number conversion does not current recognize these. Here&amp;rsquo;s how to convert such strings manually.</source>
          <target state="translated">あなたが使用していない限り &lt;code&gt;/a&lt;/code&gt; または &lt;code&gt;/aa&lt;/code&gt; 、 &lt;code&gt;\d&lt;/code&gt; マッチよりだけASCII数字よりますが、Perlの暗黙の文字列から数値への変換は、現在では、これらを認識しません。このような文字列を手動で変換する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="37d04e5bf67a8174972d88089473b77064f2c69b" translate="yes" xml:space="preserve">
          <source>Unless you&amp;rsquo;ve used &lt;code&gt;/a&lt;/code&gt; or &lt;code&gt;/aa&lt;/code&gt;, &lt;code&gt;\d&lt;/code&gt; matches more than ASCII digits only, but Perl&amp;rsquo;s implicit string-to-number conversion does not current recognize these. Here&amp;rsquo;s how to convert such strings manually.</source>
          <target state="translated">あなたが使用していない限り &lt;code&gt;/a&lt;/code&gt; または &lt;code&gt;/aa&lt;/code&gt; 、 &lt;code&gt;\d&lt;/code&gt; マッチよりだけASCII数字よりますが、Perlの暗黙の文字列から数値への変換は、現在では、これらを認識しません。このような文字列を手動で変換する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8a9444f4badd85c5a13fe02c22e0706b7a37804d" translate="yes" xml:space="preserve">
          <source>Unless you're writing a new &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, a plugin or subclassing &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt;, you probably won't need to use this module directly.</source>
          <target state="translated">新しい&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;、プラグイン、または&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parserの&lt;/a&gt;サブクラスを作成していない限り、このモジュールを直接使用する必要はおそらくありません。</target>
        </trans-unit>
        <trans-unit id="b006759734f26ef71ac954f172bdb96074166b64" translate="yes" xml:space="preserve">
          <source>Unless you're writing a new &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, a plugin, or subclassing &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt;, you probably won't need to use this module directly.</source>
          <target state="translated">新しい&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;、プラグイン、または&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parserの&lt;/a&gt;サブクラス化を作成していない限り、このモジュールを直接使用する必要はおそらくありません。</target>
        </trans-unit>
        <trans-unit id="5d5045afa1f26fa3558f3707783d1ac5db1ca1f3" translate="yes" xml:space="preserve">
          <source>Unless you're writing a new &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;, a plugin or subclassing &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt;, you probably won't need to use this module directly.</source>
          <target state="translated">新しい&lt;a href=&quot;sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;、プラグイン、または&lt;a href=&quot;../parser&quot;&gt;TAP :: Parserを&lt;/a&gt;サブクラス化しているのでない限り、このモジュールを直接使用する必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="83a68b50b49a806ff511080c423ef60589d29433" translate="yes" xml:space="preserve">
          <source>Unless you're writing a plugin or subclassing &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt;, you probably won't need to use this module directly.</source>
          <target state="translated">プラグインを作成するか、&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parserを&lt;/a&gt;サブクラス化する場合を除いて、このモジュールを直接使用する必要はおそらくありません。</target>
        </trans-unit>
        <trans-unit id="d54802d84b1114c8dea2af70188cfd6c295957d7" translate="yes" xml:space="preserve">
          <source>Unless your parameters specify &lt;code&gt;'formatter'&lt;/code&gt; or &lt;code&gt;'ipc'&lt;/code&gt; arguments, the formatter and IPC instance will be inherited from the current top hub. You can set the parameters to &lt;code&gt;undef&lt;/code&gt; to avoid having a formatter or IPC instance.</source>
          <target state="translated">パラメータで &lt;code&gt;'formatter'&lt;/code&gt; または &lt;code&gt;'ipc'&lt;/code&gt; 引数を指定しない限り、フォーマッタとIPCイン​​スタンスは現在のトップハブから継承されます。パラメーターを &lt;code&gt;undef&lt;/code&gt; に設定して、フォーマッターまたはIPCイン​​スタンスが発生しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="e4fc409268936e0da48b9a4cfb9650b21029f3c0" translate="yes" xml:space="preserve">
          <source>Unlike</source>
          <target state="translated">Unlike</target>
        </trans-unit>
        <trans-unit id="0b93fd78908f06ac9f5039bb243a42a6b44ce01c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#Decimal-Versions&quot;&gt;&quot;Decimal Versions&quot;&lt;/a&gt;, Dotted-Decimal Versions have more than a single decimal point, e.g.:</source>
          <target state="translated">&lt;a href=&quot;#Decimal-Versions&quot;&gt;「10進バージョン」&lt;/a&gt;とは異なり、ドット付き10進バージョンには複数の小数点があります。例：</target>
        </trans-unit>
        <trans-unit id="cb0a5bc8021cd6778eed9a88f7e5cfd7b53090d1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#charinfo%28%29&quot;&gt;&quot;charinfo()&quot;&lt;/a&gt;, this does not include the decomposition type. Use the &lt;code&gt;Decomposition_Type&lt;/code&gt; property to get that.</source>
          <target state="translated">&lt;a href=&quot;#charinfo%28%29&quot;&gt;「charinfo（）」&lt;/a&gt;とは異なり、これには分解タイプは含まれません。これを取得するには、 &lt;code&gt;Decomposition_Type&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="26769d51e7e8546d072ce687409eedaf6bbd7d27" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#charinfo()&quot;&gt;charinfo()&lt;/a&gt;, this does not include the decomposition type. Use the &lt;code&gt;Decomposition_Type&lt;/code&gt; property to get that.</source>
          <target state="translated">&lt;a href=&quot;#charinfo()&quot;&gt;charinfo（）&lt;/a&gt;とは異なり、これには分解タイプは含まれません。これを取得するには、 &lt;code&gt;Decomposition_Type&lt;/code&gt; プロパティを使用します。</target>
        </trans-unit>
        <trans-unit id="9a41788c4603779b500b4b22e894cfcf25b5f9a6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#dbmopen-HASH%2CDBNAME%2CMASK&quot;&gt;&lt;code&gt;dbmopen&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#tie-VARIABLE%2CCLASSNAME%2CLIST&quot;&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/a&gt; function will not &lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#require-VERSION&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; a module for you; you need to do that explicitly yourself. See &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; or the &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; module for interesting &lt;a href=&quot;#tie-VARIABLE%2CCLASSNAME%2CLIST&quot;&gt;&lt;code&gt;tie&lt;/code&gt;&lt;/a&gt; implementations.</source>
          <target state="translated">&lt;a href=&quot;#dbmopen-HASH%2CDBNAME%2CMASK&quot;&gt; &lt;code&gt;dbmopen&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#tie-VARIABLE%2CCLASSNAME%2CLIST&quot;&gt; &lt;code&gt;tie&lt;/code&gt; &lt;/a&gt;関数はモジュールを&lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#require-VERSION&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;としません。明示的に自分で行う必要があります。興味深い&lt;a href=&quot;#tie-VARIABLE%2CCLASSNAME%2CLIST&quot;&gt; &lt;code&gt;tie&lt;/code&gt; &lt;/a&gt;実装については、&lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;または&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="6a6202c7008c5edbd97e21466da5df4a59ec41a0" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt; does not do what you probably mean when you pass it an array as your first argument. The array is given scalar context, and instead of using the 0th element of the array as the format, Perl will use the count of elements in the array as the format, which is almost never useful.</source>
          <target state="translated">&lt;a href=&quot;#printf-FILEHANDLE-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;printf&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;/a&gt;は、最初の引数として配列を渡すときに、おそらく意味することを実行しません。配列にはスカラーコンテキストが与えられ、配列の0番目の要素を形式として使用する代わりに、Perlは配列内の要素の数を形式として使用します。これはほとんど役に立ちません。</target>
        </trans-unit>
        <trans-unit id="a68f9ca2a4829500bd2437e49a38f1fec56cc959" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#utf8_to_bytes&quot;&gt;&quot;utf8_to_bytes&quot;&lt;/a&gt; but like &lt;a href=&quot;#bytes_to_utf8&quot;&gt;&quot;bytes_to_utf8&quot;&lt;/a&gt;, this is non-destructive of the input string.</source>
          <target state="translated">&lt;a href=&quot;#utf8_to_bytes&quot;&gt;「utf8_to_bytes」&lt;/a&gt;とは異なりますが、&lt;a href=&quot;#bytes_to_utf8&quot;&gt;「bytes_to_utf8」&lt;/a&gt;と同様に、これは入力文字列を破壊しません。</target>
        </trans-unit>
        <trans-unit id="0f7823a1b5c73e2c047f503abcdbc0ee1982c031" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;integer&quot;&gt;integer&lt;/a&gt;, this pragma creates integer constants that are only limited in their size by the available memory and CPU time.</source>
          <target state="translated">&lt;a href=&quot;integer&quot;&gt;integer&lt;/a&gt;とは異なり、このプラグマは、使用可能なメモリとCPU時間によってサイズが制限される整数定数を作成します。</target>
        </trans-unit>
        <trans-unit id="ed386882eb03009cdfed1d7cc619e0742b192d68" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function will not &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module for you; you need to do that explicitly yourself. See &lt;a href=&quot;../db_file&quot;&gt;DB_File&lt;/a&gt; or the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数はモジュールを &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ないか、モジュールを &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; としません。明示的に自分で行う必要があります。参照&lt;a href=&quot;../db_file&quot;&gt;はDB_File&lt;/a&gt;か</target>
        </trans-unit>
        <trans-unit id="e6074edfe48b345d15827a75a36946caff143c7a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function will not &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module for you; you need to do that explicitly yourself. See &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; or the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/dbmopen&quot;&gt;dbmopen&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数はモジュールを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ないか、モジュールを &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; としません。明示的に自分で行う必要があります。参照&lt;a href=&quot;db_file&quot;&gt;はDB_File&lt;/a&gt;か</target>
        </trans-unit>
        <trans-unit id="7f221507f852d26a177998f0fca0127e91483ffd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;functions/for&quot;&gt;for...in&lt;/a&gt;&lt;/code&gt;, Perl's &lt;code&gt;for&lt;/code&gt; (also spelled &lt;code&gt;foreach&lt;/code&gt; ) does not allow the left-hand side to be an arbitrary expression. It must be a variable:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/for&quot;&gt;for...in&lt;/a&gt;&lt;/code&gt; とは異なり、Perlの &lt;code&gt;for&lt;/code&gt; （また、 &lt;code&gt;foreach&lt;/code&gt; のスペルも）では、左側を任意の式にすることはできません。変数でなければなりません：</target>
        </trans-unit>
        <trans-unit id="2d1c847135806754dca42b817cb04eaf19cedf87" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; does not do what you probably mean when you pass it an array as your first argument. The array is given scalar context, and instead of using the 0th element of the array as the format, Perl will use the count of elements in the array as the format, which is almost never useful.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、最初の引数として配列を渡したときにおそらく意味することを行いません。配列にはスカラーコンテキストが与えられ、配列の0番目の要素を形式として使用する代わりに、Perlは配列内の要素の数を形式として使用するため、ほとんど役に立ちません。</target>
        </trans-unit>
        <trans-unit id="89ae4f74127125a7e7d48317841dc79dfceae6a6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; does not do what you probably mean when you pass it an array as your first argument. The array is given scalar context, and instead of using the 0th element of the array as the format, Perl will use the count of elements in the array as the format, which is almost never useful.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; とは異なり、 &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; は、最初の引数として配列を渡したときにおそらく意味することを行いません。配列にはスカラーコンテキストが与えられ、配列の0番目の要素を形式として使用する代わりに、Perlは配列内の要素の数を形式として使用するため、ほとんど役に立ちません。</target>
        </trans-unit>
        <trans-unit id="3b964f91b8b4881dd0085a0962dbd9390808f7e2" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;[[:digit:]]&lt;/code&gt; which matches digits in many writing systems, such as Thai and Devanagari, there are currently only two sets of hexadecimal digits, and it is unlikely that more will be added. This is because you not only need the ten digits, but also the six &lt;code&gt;[A-F]&lt;/code&gt; (and &lt;code&gt;[a-f]&lt;/code&gt;) to correspond. That means only the Latin script is suitable for these, and Unicode has only two sets of these, the familiar ASCII set, and the fullwidth forms starting at U+FF10 (FULLWIDTH DIGIT ZERO).</source>
          <target state="translated">タイ語やデーバナーガリーなどの多くの書記体系の数字と一致する &lt;code&gt;[[:digit:]]&lt;/code&gt; とは異なり、現在、16進数は2セットしかないため、これ以上追加される可能性はほとんどありません。これは、10桁だけでなく、6つの &lt;code&gt;[A-F]&lt;/code&gt; （および &lt;code&gt;[a-f]&lt;/code&gt; ）も対応する必要があるためです。つまり、これらにはラテン文字のみが適しており、Unicodeには、使い慣れたASCIIセットと、U + FF10（FULLWIDTH DIGIT ZERO）で始まる全角形式の2つのセットしかありません。</target>
        </trans-unit>
        <trans-unit id="b58c8c453430fd542b53059b23563075518c8ca7" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;for...in&lt;/code&gt;, Perl's &lt;code&gt;for&lt;/code&gt; (also spelled &lt;code&gt;foreach&lt;/code&gt;) does not allow the left-hand side to be an arbitrary expression. It must be a variable:</source>
          <target state="translated">&lt;code&gt;for...in&lt;/code&gt; とは異なり、Perlの &lt;code&gt;for&lt;/code&gt; （ &lt;code&gt;foreach&lt;/code&gt; のスペルも）では、左側を任意の式にすることはできません。変数でなければなりません：</target>
        </trans-unit>
        <trans-unit id="08ee12c11bcd84febb2422b0c97e2cecef90b3a9" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;use feature &quot;:5.12&quot;&lt;/code&gt;, saying &lt;code&gt;use v5.12&lt;/code&gt; (or any higher version) also does the equivalent of &lt;code&gt;use strict&lt;/code&gt;; see &lt;a href=&quot;perlfunc#use&quot;&gt;&quot;use&quot; in perlfunc&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;use feature &quot;:5.12&quot;&lt;/code&gt; とは異なり、 &lt;code&gt;use v5.12&lt;/code&gt; （またはそれ以降のバージョン）と言うことも、 &lt;code&gt;use strict&lt;/code&gt; と同等です。詳細については&lt;a href=&quot;perlfunc#use&quot;&gt;、perlfuncの「use」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9885543c31cf8cf0906d34d4b26f89726d373169" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;which&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; , this function is platform independent and will also work on, for example, Win32.</source>
          <target state="translated">&lt;code&gt;which&lt;/code&gt; や &lt;code&gt;type&lt;/code&gt; とは異なり、この関数はプラットフォームに依存せず、Win32などでも機能します。</target>
        </trans-unit>
        <trans-unit id="4fd10722655bcf3a1480d15b870f6c966069d54d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;which&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;, this function is platform independent and will also work on, for example, Win32.</source>
          <target state="translated">&lt;code&gt;which&lt;/code&gt; や &lt;code&gt;type&lt;/code&gt; とは異なり、この関数はプラットフォームに依存せず、たとえばWin32でも機能します。</target>
        </trans-unit>
        <trans-unit id="8c1319ac66a745a073ad45b032e405d0c0606e8b" translate="yes" xml:space="preserve">
          <source>Unlike Perl 4, in which all the variables were dynamic and shared one global name space, causing maintainability problems, Perl 5 provides two mechanisms for protecting code from having its variables stomped on by other code: lexically scoped variables created with &lt;code&gt;my&lt;/code&gt; or &lt;code&gt;state&lt;/code&gt; and namespaced global variables, which are exposed via the &lt;code&gt;vars&lt;/code&gt; pragma, or the &lt;code&gt;our&lt;/code&gt; keyword. Any global variable is considered to be part of a namespace and can be accessed via a &quot;fully qualified form&quot;. Conversely, any lexically scoped variable is considered to be part of that lexical-scope, and does not have a &quot;fully qualified form&quot;.</source>
          <target state="translated">すべての変数は、動的であり、保守の問題を引き起こす、一つのグローバルネームスペースを共有するのPerl 4とは異なり、Perl 5の他のコードによってで踏みつけ、その変数を有するからコードを保護するための2つのメカニズムを提供する：レキシカルスコープの変数はで作成された &lt;code&gt;my&lt;/code&gt; 又は &lt;code&gt;state&lt;/code&gt; と名前空間 &lt;code&gt;vars&lt;/code&gt; プラグマまたは &lt;code&gt;our&lt;/code&gt; キーワードを介して公開されるグローバル変数。グローバル変数はすべて名前空間の一部と見なされ、「完全修飾形式」を介してアクセスできます。逆に、字句スコープの変数はその字句スコープの一部と見なされ、「完全修飾形式」はありません。</target>
        </trans-unit>
        <trans-unit id="a35eb11bdbc8f6461d7ed511f9bd108d79a6ba74" translate="yes" xml:space="preserve">
          <source>Unlike Perl's built-in hashes, it is not safe to &lt;code&gt;delete&lt;/code&gt; the current item from a GDBM_File tied hash while iterating over it with &lt;code&gt;each&lt;/code&gt;. This is a limitation of the gdbm library.</source>
          <target state="translated">Perlの組み込みハッシュとは異なり、GDBM_Fileに関連付けられたハッシュから現在のアイテムを &lt;code&gt;delete&lt;/code&gt; して、 &lt;code&gt;each&lt;/code&gt; を繰り返し処理することは安全ではありません。これはgdbmライブラリーの制限です。</target>
        </trans-unit>
        <trans-unit id="a93ac07922c6fc8a77d40224ee6574380d8e4055" translate="yes" xml:space="preserve">
          <source>Unlike Win32 build, miniperl will not have</source>
          <target state="translated">Win32のビルドとは異なり、miniperlは</target>
        </trans-unit>
        <trans-unit id="a7c35c87e2cd92f458c69ed20a29518c1fc60ceb" translate="yes" xml:space="preserve">
          <source>Unlike constants in some languages, these cannot be overridden on the command line or via environment variables.</source>
          <target state="translated">いくつかの言語の定数とは異なり、コマンドラインや環境変数でオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="2e9d61b3ed80ed71e7bbbb9d575bf23b5d77fb98" translate="yes" xml:space="preserve">
          <source>Unlike dbmopen(), the tie() function will not &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; a module for you--you need to do that explicitly yourself.</source>
          <target state="translated">dbmopen（）とは異なり、tie（）関数はモジュールを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; しません。明示的に自分で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="ac457fcb4cff6e9b40b4fc09afe6c228026b2c13" translate="yes" xml:space="preserve">
          <source>Unlike dbmopen(), the tie() function will not &lt;code&gt;use&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; a module for you--you need to do that explicitly yourself.</source>
          <target state="translated">dbmopen（）と異なり、タイ（）関数がありません &lt;code&gt;use&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; あなたのためのモジュールを-自分で明示的に行う必要があります。</target>
        </trans-unit>
        <trans-unit id="ae7d99bfc8b3205da369ad185c97fc4f2004cc75" translate="yes" xml:space="preserve">
          <source>Unlike dynamic variables created by the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; operator, lexical variables declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; are totally hidden from the outside world, including any called subroutines. This is true if it's the same subroutine called from itself or elsewhere--every call gets its own copy.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 演算子によって作成された動的変数とは異なり、 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言されたレキシカル変数は、呼び出されたサブルーチンを含め、外部の世界から完全に隠されています。これは、それ自体または他から呼び出された同じサブルーチンの場合に当てはまります。呼び出しごとに独自のコピーが取得されます。</target>
        </trans-unit>
        <trans-unit id="ef30321397c8a6c2a145849a1e7eb34fc5044060" translate="yes" xml:space="preserve">
          <source>Unlike dynamic variables created by the &lt;code&gt;local&lt;/code&gt; operator, lexical variables declared with &lt;code&gt;my&lt;/code&gt; are totally hidden from the outside world, including any called subroutines. This is true if it's the same subroutine called from itself or elsewhere--every call gets its own copy.</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; 演算子によって作成された動的変数とは異なり、 &lt;code&gt;my&lt;/code&gt; で宣言された字句変数は、呼び出されたサブルーチンを含め、外部から完全に隠されています。これは、それ自体または他の場所から呼び出された同じサブルーチンである場合に当てはまります。すべての呼び出しは独自のコピーを取得します。</target>
        </trans-unit>
        <trans-unit id="f1d613b9dfee0f458298b76229e47572b9ad09a4" translate="yes" xml:space="preserve">
          <source>Unlike in C and Pascal, in Perl these are all defined in terms of BLOCKs, not statements. This means that the curly brackets are</source>
          <target state="translated">CやPascalとは異なり、Perlではこれらはすべてステートメントではなくブロックで定義されています。つまり、中括弧は</target>
        </trans-unit>
        <trans-unit id="f21336a91710bef15208089eafb11092016626b2" translate="yes" xml:space="preserve">
          <source>Unlike in C, the scalar assignment operator produces a valid lvalue. Modifying an assignment is equivalent to doing the assignment and then modifying the variable that was assigned to. This is useful for modifying a copy of something, like this:</source>
          <target state="translated">C言語とは異なり、スカラ代入演算子は有効なl値を生成します。代入を変更することは、代入を行い、代入された変数を変更することと同じです。これは何かのコピーを修正するときに便利です。</target>
        </trans-unit>
        <trans-unit id="5f827eec6110de095ec9210c18c9cbffc634099b" translate="yes" xml:space="preserve">
          <source>Unlike in earlier versions of Perl, &lt;code&gt;:raw&lt;/code&gt; is</source>
          <target state="translated">以前のバージョンのPerlとは異なり、 &lt;code&gt;:raw&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="33bdaa80be75964fba31840d455d3822e7d396b4" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;&quot;&quot;&lt;/code&gt; ) can be returned. Since &lt;code&gt;catdir()&lt;/code&gt; on Mac OS always appends a trailing colon to distinguish a directory path from a file path, a single trailing colon will be ignored, i.e. there's no empty directory name after it.</source>
          <target state="translated">セパレーターでディレクトリを分割するだけとは異なり、空のディレクトリ名（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）を返すことができます。以来 &lt;code&gt;catdir()&lt;/code&gt; はMac OS上は、常にファイルパスからディレクトリパスを区別するため、末尾のコロンを追加し、単一末尾のコロンはそれの後には空のディレクトリ名がありませんつまり、無視されます。</target>
        </trans-unit>
        <trans-unit id="7e91e9b08f85424586bbe7fa7e02138bcae68a32" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;&quot;&quot;&lt;/code&gt;) can be returned. Since &lt;code&gt;catdir()&lt;/code&gt; on Mac OS always appends a trailing colon to distinguish a directory path from a file path, a single trailing colon will be ignored, i.e. there's no empty directory name after it.</source>
          <target state="translated">セパレータでディレクトリを分割するだけとは異なり、空のディレクトリ名（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）を返すことができます。以来 &lt;code&gt;catdir()&lt;/code&gt; はMac OS上は、常にファイルパスからディレクトリパスを区別するため、末尾のコロンを追加し、単一末尾のコロンはそれの後には空のディレクトリ名がありませんつまり、無視されます。</target>
        </trans-unit>
        <trans-unit id="54463777f2a5a26bb28578fbecd0a237664559d0" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;''&lt;/code&gt; ) can be returned, because these are significant on some OSes.</source>
          <target state="translated">セパレータでディレクトリを分割するだけの場合とは異なり、空のディレクトリ名（ &lt;code&gt;''&lt;/code&gt; ）が返されることがあります。これは、一部のOSでは重要であるためです。</target>
        </trans-unit>
        <trans-unit id="86f74613bf49290364595249fc093a5b0e46c0b1" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;''&lt;/code&gt; ) can be returned, because these are significant on some OSs.</source>
          <target state="translated">セパレータでディレクトリを分割するだけではなく、一部のOSでは重要なので、空のディレクトリ名（ &lt;code&gt;''&lt;/code&gt; ）が返されることがあります。</target>
        </trans-unit>
        <trans-unit id="a1dab7e402fccbdcf23288af9af78be14a2bd58c" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;''&lt;/code&gt;) can be returned, because these are significant on some OSes.</source>
          <target state="translated">セパレータでディレクトリを分割するだけとは異なり、空のディレクトリ名（ &lt;code&gt;''&lt;/code&gt; ）は、一部のOSで重要であるため、返される可能性があります。</target>
        </trans-unit>
        <trans-unit id="6113c750f78736baa4aa9cd996719b663fd9d18d" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, empty directory names (&lt;code&gt;''&lt;/code&gt;) can be returned, because these are significant on some OSs.</source>
          <target state="translated">セパレータでディレクトリを分割するだけとは異なり、空のディレクトリ名（ &lt;code&gt;''&lt;/code&gt; ）は、一部のOSで重要であるため、返される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f0601a2027041706b4a215c5ba97b0f2d038f55f" translate="yes" xml:space="preserve">
          <source>Unlike just splitting the directories on the separator, leading empty and trailing directory entries can be returned, because these are significant on some OSs. So,</source>
          <target state="translated">ただ単にディレクトリをセパレータ上で分割するのとは異なり、先頭の空のディレクトリエントリと末尾のディレクトリエントリを返すことができますが、これはOSによってはこれらが重要なためです。というのも、これらはOSによっては重要なものだからです。</target>
        </trans-unit>
        <trans-unit id="7934f43f05e561c630f325debe8a290638569198" translate="yes" xml:space="preserve">
          <source>Unlike local variables in C or C++, Perl's lexical variables don't necessarily get recycled just because their scope has exited. If something more permanent is still aware of the lexical, it will stick around. So long as something else references a lexical, that lexical won't be freed--which is as it should be. You wouldn't want memory being free until you were done using it, or kept around once you were done. Automatic garbage collection takes care of this for you.</source>
          <target state="translated">C や C++のローカル変数とは異なり、Perl の字句変数はスコープが終了したからといって必ずしもリサイクルされるわけではありません。より永続的な何かがまだその語彙を認識している場合、その語彙はその周りに留まります。何か他のものが字句を参照している限り、その字句は解放されません。あなたはメモリを使い終わるまでメモリが解放されることを望んでいないでしょうし、使い終わった後もメモリが残っていることを望んでいないでしょう。自動ガベージコレクションがこの問題を解決してくれます。</target>
        </trans-unit>
        <trans-unit id="61c2bf5d9fb9c4e4b449918bf685b7cd4c575760" translate="yes" xml:space="preserve">
          <source>Unlike many other languages which support object orientation, Perl does not provide any special syntax for constructing an object. Objects are merely Perl data structures (hashes, arrays, scalars, filehandles, etc.) that have been explicitly associated with a particular class.</source>
          <target state="translated">オブジェクト指向をサポートする他の多くの言語とは異なり、Perl はオブジェクトを構築するための特別な構文を提供しません。オブジェクトとは、特定のクラスに明示的に関連付けられた Perl のデータ構造 (ハッシュ、配列、スカラ、ファイルハンドルなど)に過ぎません。</target>
        </trans-unit>
        <trans-unit id="96a17407e83fd96732a811a270065f8bf99b9560" translate="yes" xml:space="preserve">
          <source>Unlike most encodings which accept various ways to handle errors, Unicode encodings simply croaks.</source>
          <target state="translated">エラーを処理するための様々な方法を受け入れるほとんどのエンコーディングとは異なり、Unicodeエンコーディングは単にうなり声を上げます。</target>
        </trans-unit>
        <trans-unit id="49b673e0d13d9cc508ff95ef6bf45edac94a0386" translate="yes" xml:space="preserve">
          <source>Unlike most locales, which are specific to a language and country pair, Unicode classifies all the characters that are letters</source>
          <target state="translated">言語と国のペアに固有のほとんどのロケールとは異なり、ユニコードは文字であるすべての文字を分類します。</target>
        </trans-unit>
        <trans-unit id="de28345f4c14a0c66a5513ec93329ba001d9ced5" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されるため、 &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="c0d9558dea8e06eb18c291c6122258af13477176" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されるため、 &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/dump&quot;&gt;dump&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="9b35f8dffb5619dd71375e3734d385be7cc68976" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されるため、 &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="642dec0f5e46307ce9e97ef7e93a9392f0b1f7ab" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; への引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="8e8af66683db3fc2cddaa8cdf32b4f53ebab4445" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="5bec2254ea41ddda3ef06eefb12b88f8ff1170ba" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されるため、 &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="46f28e7c4c55184f01ee0fc59018a927acd8437c" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; への引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="fe0bcbfb6300fcbe2507c49b4631d20697de525c" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは代入と同じ優先順位を持っています。関数のように見えるルールからも除外されているため、 &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="34c00fe043d78656afd77828c738549c64c1fe0d" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;dump (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;a href=&quot;#dump-LABEL&quot;&gt;&lt;code&gt;dump&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは割り当てと同じ優先順位を持ちます。また、looks-like-a-functionルールも免除されるため、 &lt;code&gt;dump (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が&lt;a href=&quot;#dump-LABEL&quot;&gt; &lt;code&gt;dump&lt;/code&gt; &lt;/a&gt;の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="a22585aa0bd13d608250b8dcea334b07dd252021" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;last (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;a href=&quot;#last-LABEL&quot;&gt;&lt;code&gt;last&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは割り当てと同じ優先順位を持ちます。また、looks-like-a-functionルールも免除されるため、 &lt;code&gt;last (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が&lt;a href=&quot;#last-LABEL&quot;&gt; &lt;code&gt;last&lt;/code&gt; &lt;/a&gt;の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="bec12e43efad3d3a645f2714eff3a43a7be31992" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;next (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;a href=&quot;#next-LABEL&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは割り当てと同じ優先順位を持ちます。また、looks-like-a-functionルールも免除されるため、 &lt;code&gt;next (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が&lt;a href=&quot;#next-LABEL&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="03dc19f120a0108be730d05ae2cc974e390f447d" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this has the same precedence as assignment. It is also exempt from the looks-like-a-function rule, so &lt;code&gt;redo (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;a href=&quot;#redo-LABEL&quot;&gt;&lt;code&gt;redo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これは割り当てと同じ優先順位を持ちます。また、looks-like-a-functionルールも免除されるため、 &lt;code&gt;redo (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が&lt;a href=&quot;#redo-LABEL&quot;&gt; &lt;code&gt;redo&lt;/code&gt; &lt;/a&gt;の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="3ee3973cea98d2564d41622c65ad1eadc9b20495" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これも関数のように見えるルールから除外されているため、 &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="fd9949db65a27c0400a1254746b3e91b925c452b" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this is also exempt from the looks-like-a-function rule, so &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &quot;bar&quot; to be part of the argument to &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの名前付き演算子とは異なり、これも関数のように見えるルールから除外されているため、 &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; すると、 &quot;bar&quot;が &lt;code&gt;&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; の引数の一部になります。</target>
        </trans-unit>
        <trans-unit id="c7a5022b5ad46573ca70c92672e20e032530725b" translate="yes" xml:space="preserve">
          <source>Unlike most named operators, this is also exempt from the looks-like-a-function rule, so &lt;code&gt;return (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; will cause &lt;code&gt;&quot;bar&quot;&lt;/code&gt; to be part of the argument to &lt;a href=&quot;#return-EXPR&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最も名前の演算子とは異なり、これはまた、ルックスライク-機能規則から免除されるので、 &lt;code&gt;return (&quot;foo&quot;).&quot;bar&quot;&lt;/code&gt; が発生します &lt;code&gt;&quot;bar&quot;&lt;/code&gt; の引数の一部であることを&lt;a href=&quot;#return-EXPR&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="728a32d1ef745efc09c9a2c8f8520f5d6f4c4b95" translate="yes" xml:space="preserve">
          <source>Unlike most of the other functions that have &lt;code&gt;utf8&lt;/code&gt; in their name, the input to this function is NOT a UTF-8-encoded string. The function name is slightly</source>
          <target state="translated">名前に &lt;code&gt;utf8&lt;/code&gt; が含まれている他のほとんどの関数とは異なり、この関数への入力はUTF-8でエンコードされた文字列ではありません。関数名は少しです</target>
        </trans-unit>
        <trans-unit id="d21a9fd801c4b5ff299a1a5bef8631136555ebd2" translate="yes" xml:space="preserve">
          <source>Unlike most operators, the smartmatch operator knows to treat &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; specially:</source>
          <target state="translated">ほとんどの演算子とは異なり、smartmatch演算子は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を特別に処理することを知っています。</target>
        </trans-unit>
        <trans-unit id="a099365433c865a39830b29bcea8462ee44a1ac6" translate="yes" xml:space="preserve">
          <source>Unlike most operators, the smartmatch operator knows to treat &lt;code&gt;undef&lt;/code&gt; specially:</source>
          <target state="translated">ほとんどの演算子とは異なり、smartmatch演算子は &lt;code&gt;undef&lt;/code&gt; を特別に扱うことを知っています。</target>
        </trans-unit>
        <trans-unit id="c52ae364f54ddc8596b506c3503500a0182fc785" translate="yes" xml:space="preserve">
          <source>Unlike most other encodings, the following always croaks on error for any $chk that evaluates to true.</source>
          <target state="translated">他のほとんどのエンコーディングとは異なり、以下のように、真と評価される $chk の場合は常にエラーで鳴きます。</target>
        </trans-unit>
        <trans-unit id="3d20af86f51aab9cb74465f15c6036108807e949" translate="yes" xml:space="preserve">
          <source>Unlike non-user-defined &lt;code&gt;\p{}&lt;/code&gt; property matches, no warning is ever generated if these properties are matched against a non-Unicode code point (see &lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;&quot;Beyond Unicode code points&quot;&lt;/a&gt; below).</source>
          <target state="translated">ユーザー定義ではない &lt;code&gt;\p{}&lt;/code&gt; プロパティの一致とは異なり、これらのプロパティが非Unicodeコードポイントと一致した場合、警告は生成されません（以下の&lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;「Unicodeコードポイントを超えて」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a0be45e558750e70d5ad5d40843ef88fbc85d85e" translate="yes" xml:space="preserve">
          <source>Unlike non-user-defined &lt;code&gt;\p{}&lt;/code&gt; property matches, no warning is ever generated if these properties are matched against a non-Unicode code point (see &lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;Beyond Unicode code points&lt;/a&gt; below).</source>
          <target state="translated">非ユーザー定義の &lt;code&gt;\p{}&lt;/code&gt; プロパティの一致とは異なり、これらのプロパティが非Unicodeコードポイントと一致しても警告は生成されません（下記の&lt;a href=&quot;#Beyond-Unicode-code-points&quot;&gt;Unicodeコードポイントを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="54d85676113e32968ab38ead192e565266d17ce6" translate="yes" xml:space="preserve">
          <source>Unlike other DJGPP packages, which are normal &quot;zip&quot; files, most CPAN module packages are &quot;gzipped tarballs&quot;. Recent versions of WinZip will safely unpack and expand them, *UNLESS* they have zero-length files. It is a known WinZip bug (as of v7.0) that it will not extract zero-length files.</source>
          <target state="translated">他のDJGPPパッケージは通常の &quot;zip &quot;ファイルですが、CPANモジュールパッケージのほとんどは &quot;gzで圧縮されたtarballs &quot;です。最近の WinZip のバージョンでは、安全に解凍して展開することができます。(v7.0 の時点で)WinZip が長さゼロのファイルを展開しないという既知のバグがあります。</target>
        </trans-unit>
        <trans-unit id="7d1d9ddacb9cc957a1381975755b447def4208e7" translate="yes" xml:space="preserve">
          <source>Unlike other boolean options, this opotion is enabled by default beginning with version &lt;code&gt;4.0&lt;/code&gt;.</source>
          <target state="translated">他のブールオプションとは異なり、このオプションはバージョン &lt;code&gt;4.0&lt;/code&gt; 以降デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="83864ffb2b433053a7d93f1893b27cbe33018e20" translate="yes" xml:space="preserve">
          <source>Unlike other encodings where mappings are not one-to-one against Unicode, UTFs are supposed to map 100% against one another. So Encode is more strict on UTFs.</source>
          <target state="translated">マッピングが Unicode に対して一対一ではない他のエンコーディングとは異なり、UTF は互いに 100% マッピングすることになっています。そのため、EncodeはUTFに対してより厳格になっています。</target>
        </trans-unit>
        <trans-unit id="9944da74f109a50432581cc20ef1a61578ffdb1c" translate="yes" xml:space="preserve">
          <source>Unlike other types of quote-like literals, a here document is rarely a contiguous substring. For example, a typical piece of code using here document might look like this:</source>
          <target state="translated">他のタイプの引用符のようなリテラルとは異なり、 here 文書は連続した部分文字列であることはほとんどありません。例えば、here 文書を使った典型的なコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="82bfb2284168959f095690d2be25e5ae6b5a6d2d" translate="yes" xml:space="preserve">
          <source>Unlike pragmas that affect the &lt;code&gt;$^H&lt;/code&gt; hints variable, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; declarations are not BLOCK-scoped. They are thus effective for the entire file in which they appear. You may not rescind such declarations with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$^H&lt;/code&gt; ヒント変数に影響を与えるプラグマとは異なり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; 宣言はBLOCKスコープではありません。したがって、これらは出現するファイル全体に対して有効です。あなたはこのような宣言を撤回しないことがあり &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; もしくは &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="946dc8e2b9e4dbb1e056eab35da113b4edec1e74" translate="yes" xml:space="preserve">
          <source>Unlike pragmas that affect the &lt;code&gt;$^H&lt;/code&gt; hints variable, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; declarations are not BLOCK-scoped. They are thus effective for the entire package in which they appear. You may not rescind such declarations with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$^H&lt;/code&gt; ヒント変数に影響を与えるプラグマとは異なり、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; subs&lt;/code&gt; 宣言はBLOCKスコープではありません。したがって、それらは出現するパッケージ全体に効果的です。あなたはこのような宣言を撤回しないことがあり &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; vars&lt;/code&gt; もしくは &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee09d59fb829cfd66034aa9b684c476eb3f881a3" translate="yes" xml:space="preserve">
          <source>Unlike pragmas that affect the &lt;code&gt;$^H&lt;/code&gt; hints variable, the &lt;code&gt;use vars&lt;/code&gt; and &lt;code&gt;use subs&lt;/code&gt; declarations are not lexically scoped to the block they appear in: they affect the entire package in which they appear. It is not possible to rescind these declarations with &lt;code&gt;no vars&lt;/code&gt; or &lt;code&gt;no subs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$^H&lt;/code&gt; ヒント変数に影響を与えるプラグマとは異なり、 &lt;code&gt;use vars&lt;/code&gt; および &lt;code&gt;use subs&lt;/code&gt; 宣言は、それらが表示されるブロックに字句スコープされません。それらは、それらが表示されるパッケージ全体に影響します。 &lt;code&gt;no vars&lt;/code&gt; または &lt;code&gt;no subs&lt;/code&gt; なしでこれらの宣言を取り消すことはできません。</target>
        </trans-unit>
        <trans-unit id="a62fc8b32926f79e07e4cd739d192b4db682422d" translate="yes" xml:space="preserve">
          <source>Unlike previous examples, we've now run h2xs on a real include file. This has caused some extra goodies to appear in both the .pm and .xs files.</source>
          <target state="translated">これまでの例とは異なり、実際のインクルードファイル上で h2xs を実行するようになりました。これにより、.pm と .xs の両方のファイルの中にいくつかの特別なものが現れました。</target>
        </trans-unit>
        <trans-unit id="1ef80340079fb27e8a35fae5de34324e0ae68abb" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; implementations, the directory used for the temporary file is not specified in a system include file (&lt;code&gt;P_tmpdir&lt;/code&gt;) but simply depends on the choice of tmpdir() returned by &lt;a href=&quot;File::Spec&quot;&gt;File::Spec&lt;/a&gt;. On some implementations this location can be set using the &lt;code&gt;TMPDIR&lt;/code&gt; environment variable, which may not be secure. If this is a problem, simply use mkstemp() and specify a template.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;実装とは異なり、一時ファイルに使用されるディレクトリは、システムインクルードファイル（ &lt;code&gt;P_tmpdir&lt;/code&gt; ）では指定されませんが、&lt;a href=&quot;File::Spec&quot;&gt;File :: Spec&lt;/a&gt;によって返されるtmpdir（）の選択に依存します。一部の実装では、この場所は &lt;code&gt;TMPDIR&lt;/code&gt; 環境変数を使用して設定できますが、これは安全ではない可能性があります。これが問題になる場合は、mkstemp（）を使用してテンプレートを指定するだけです。</target>
        </trans-unit>
        <trans-unit id="82613342b350d8ac2d5e700389b419d73a2e8511" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;Newx&lt;/code&gt; and &lt;code&gt;Newxc&lt;/code&gt; macros, the &lt;code&gt;Newxz&lt;/code&gt; macro calls &lt;code&gt;memzero&lt;/code&gt; to zero out all the newly allocated memory.</source>
          <target state="translated">異なり &lt;code&gt;Newx&lt;/code&gt; と &lt;code&gt;Newxc&lt;/code&gt; マクロ、 &lt;code&gt;Newxz&lt;/code&gt; マクロ呼び出しは &lt;code&gt;memzero&lt;/code&gt; すべて新しく割り当てられたメモリをゼロにします。</target>
        </trans-unit>
        <trans-unit id="3459d8de61947e832dd8d6cc93a45a157f32fe5d" translate="yes" xml:space="preserve">
          <source>Unlike the GNU programs,</source>
          <target state="translated">GNUプログラムとは異なります。</target>
        </trans-unit>
        <trans-unit id="675122bbd6fe9d02ab821cef4f122f1e2fdb7554" translate="yes" xml:space="preserve">
          <source>Unlike the L</source>
          <target state="translated">Lと違って</target>
        </trans-unit>
        <trans-unit id="00946f20f0f39de3fde945a1c4762c9a2eb54a4d" translate="yes" xml:space="preserve">
          <source>Unlike the old Unix fmt(1) utility, this module correctly accounts for any Unicode combining characters (such as diacriticals) that may occur in each line for both expansion and unexpansion. These are overstrike characters that do not increment the logical position. Make sure you have the appropriate Unicode settings enabled.</source>
          <target state="translated">古い Unix の fmt(1)ユーティリティとは異なり、このモジュールは、展開と非展開の両方で各行で発生する可能性のある Unicode 結合文字 (ダイアクリティカルのような)を正しく考慮しています。これらは論理位置をインクリメントしないオーバーストライク文字です。適切な Unicode 設定が有効になっていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="0625a7948b2143bf8fa5b94abdec3d975bedca11" translate="yes" xml:space="preserve">
          <source>Unlike the old unix utilities, this module correctly accounts for any Unicode combining characters (such as diacriticals) that may occur in each line for both expansion and unexpansion. These are overstrike characters that do not increment the logical position. Make sure you have the appropriate Unicode settings enabled.</source>
          <target state="translated">古い unix ユーティリティとは異なり、このモジュールは、拡張と非拡張の両方で各行で発生する可能性のある Unicode 結合文字 (ダイアクリティカルなど)を正しく考慮しています。これらは論理位置をインクリメントしないオーバーストライク文字です。適切な Unicode 設定が有効になっていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="bbee11f3129dceedbb755c4927925d533e72e81f" translate="yes" xml:space="preserve">
          <source>Unlike the original coding of this example, the returned values are not accessed in reverse order. So &lt;code&gt;ST(0)&lt;/code&gt; refers to the first value returned by the Perl subroutine and &lt;code&gt;ST(count-1)&lt;/code&gt; refers to the last.</source>
          <target state="translated">この例の元のコーディングとは異なり、戻り値には逆の順序でアクセスされません。したがって、 &lt;code&gt;ST(0)&lt;/code&gt; はPerlサブルーチンによって返される最初の値を参照し、 &lt;code&gt;ST(count-1)&lt;/code&gt; は最後の値を参照します。</target>
        </trans-unit>
        <trans-unit id="038e468b7871a7585436a41ba81caefab5eb3568" translate="yes" xml:space="preserve">
          <source>Unlike the stringification operator, there is never any need to append trailing zeros to preserve the correct version value.</source>
          <target state="translated">文字列化演算子とは異なり、正しいバージョン値を保持するために末尾にゼロを追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="daa5c6301a77bc0d8757cfca2a7141b60979b735" translate="yes" xml:space="preserve">
          <source>Unlike with &lt;a href=&quot;#croak&quot;&gt;&quot;croak&quot;&lt;/a&gt;, &lt;code&gt;pat&lt;/code&gt; is not permitted to be null.</source>
          <target state="translated">&lt;a href=&quot;#croak&quot;&gt;「croak」&lt;/a&gt;とは異なり、 &lt;code&gt;pat&lt;/code&gt; をnullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="54921bfadbbc4d5488355e38753c36b606db5127" translate="yes" xml:space="preserve">
          <source>Unlike with &lt;a href=&quot;#croak&quot;&gt;croak&lt;/a&gt;, &lt;code&gt;pat&lt;/code&gt; is not permitted to be null.</source>
          <target state="translated">&lt;a href=&quot;#croak&quot;&gt;croak&lt;/a&gt;とは異なり、 &lt;code&gt;pat&lt;/code&gt; を nullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="ae0137e5db1f710b710a9bc0edfaf77e15650ab6" translate="yes" xml:space="preserve">
          <source>Unlike with &lt;a href=&quot;#vcroak&quot;&gt;&quot;vcroak&quot;&lt;/a&gt;, &lt;code&gt;pat&lt;/code&gt; is not permitted to be null.</source>
          <target state="translated">&lt;a href=&quot;#vcroak&quot;&gt;「vcroak」&lt;/a&gt;とは異なり、 &lt;code&gt;pat&lt;/code&gt; をnullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="8a7070baa0bba9b5c3411b37157873dd12da55ea" translate="yes" xml:space="preserve">
          <source>Unlike with &lt;a href=&quot;#vcroak&quot;&gt;vcroak&lt;/a&gt;, &lt;code&gt;pat&lt;/code&gt; is not permitted to be null.</source>
          <target state="translated">&lt;a href=&quot;#vcroak&quot;&gt;vcroak&lt;/a&gt;とは異なり、 &lt;code&gt;pat&lt;/code&gt; を nullにすることはできません。</target>
        </trans-unit>
        <trans-unit id="28eadad196509c659a3994d74f2858a30a637ebf" translate="yes" xml:space="preserve">
          <source>Unlink a file, this wraps &lt;code&gt;unlink()&lt;/code&gt; in a way that makes it more reliable cross-platform when trying to unlink files you recently altered.</source>
          <target state="translated">ファイルの &lt;code&gt;unlink()&lt;/code&gt; ます。これにより、最近変更したファイルのリンクを解除しようとしたときに、クロスプラットフォームでの信頼性が高くなるようにunlink（）がラップされます。</target>
        </trans-unit>
        <trans-unit id="e5cefcdd918640639ca1153770063f61e285104d" translate="yes" xml:space="preserve">
          <source>Unlink any temporary files you create.</source>
          <target state="translated">作成した一時ファイルのリンクを解除します。</target>
        </trans-unit>
        <trans-unit id="3e77881bda9dd47b3e5c55a65b50384eb4b9609f" translate="yes" xml:space="preserve">
          <source>Unloads a previously loaded dynamic-link library. The HANDLE is no longer valid after this call. See &lt;a&gt;LoadLibrary&lt;/a&gt; for information on dynamically loading a library.</source>
          <target state="translated">以前にロードされたダイナミックリンクライブラリをアンロードします。この呼び出しの後、HANDLEは無効になります。ライブラリを動的にロードする方法については、&lt;a&gt;LoadLibrary&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f2c338fa9bfcccaac25268ab0ef12e64490b19e" translate="yes" xml:space="preserve">
          <source>Unlock and close the database.</source>
          <target state="translated">データベースのロックを解除して閉じます。</target>
        </trans-unit>
        <trans-unit id="425b4daaa8be44cc037fb6c4f8a9c4ee47b576db" translate="yes" xml:space="preserve">
          <source>Unmatched ( in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">不一致（正規表現で、&amp;lt;-ここでm /％s /でマーク）</target>
        </trans-unit>
        <trans-unit id="a6fca5f2f3ab74092e2301bc93cfd673ca1d5fb7" translate="yes" xml:space="preserve">
          <source>Unmatched ) in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現で一致しない）; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="87bab1d81d4066140528cdd5b267a8458e21ea97" translate="yes" xml:space="preserve">
          <source>Unmatched [ in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">比類のない[正規表現; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="5582b12b8fb1f3004178fe6e1d310ea58d890611" translate="yes" xml:space="preserve">
          <source>Unmatched right %s bracket</source>
          <target state="translated">不一致の右 %s ブラケット</target>
        </trans-unit>
        <trans-unit id="bc2c3a3141852414ad16ff6056e8a91c4d6648f7" translate="yes" xml:space="preserve">
          <source>Unpack the main archive to a temporary location (RAM: is fine).</source>
          <target state="translated">メインアーカイブを一時的な場所に解凍します(RAM:で大丈夫です)。</target>
        </trans-unit>
        <trans-unit id="3a1b8bde43d6985240bfa75345e6d99d943394fd" translate="yes" xml:space="preserve">
          <source>Unpack the result with</source>
          <target state="translated">で結果を解凍します。</target>
        </trans-unit>
        <trans-unit id="add77c91d022a17024fa5eba373c6e719da883a1" translate="yes" xml:space="preserve">
          <source>Unpack the result with &lt;code&gt;tar -xof yourmodule.tar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tar -xof yourmodule.tar&lt;/code&gt; を使用して結果を解凍します</target>
        </trans-unit>
        <trans-unit id="ae62392d2b4bc10cbedb53bdaea138dd0c54922e" translate="yes" xml:space="preserve">
          <source>Unpack the source package</source>
          <target state="translated">ソースパッケージの解凍</target>
        </trans-unit>
        <trans-unit id="3ba56861ba0d7e4bf096f38cb19b9bd9d11ad9ab" translate="yes" xml:space="preserve">
          <source>Unpacking CPAN Modules on DOS</source>
          <target state="translated">DOSでのCPANモジュールの解凍</target>
        </trans-unit>
        <trans-unit id="a3e58138dfa89b35eb5a0a67e0ceb78fe71fb3cd" translate="yes" xml:space="preserve">
          <source>Unpacking Perl Distribution on BS2000</source>
          <target state="translated">BS2000でのPerlディストリビューションの解凍</target>
        </trans-unit>
        <trans-unit id="1906a11a734d044847362b51bdd5c4ffec722822" translate="yes" xml:space="preserve">
          <source>Unpacking Perl distribution on OS/390</source>
          <target state="translated">OS/390でのPerlディストリビューションの解凍</target>
        </trans-unit>
        <trans-unit id="1bfe6e7e13df7f1f795bc2c142ba9f8933ba83d0" translate="yes" xml:space="preserve">
          <source>Unpacking a Stack Frame</source>
          <target state="translated">スタックフレームの開梱</target>
        </trans-unit>
        <trans-unit id="13585670fad4d52485b4ecff204569086b8b8bc7" translate="yes" xml:space="preserve">
          <source>Unpacking this message can be done with the same template:</source>
          <target state="translated">このメッセージの解凍は、同じテンプレートで行うことができます。</target>
        </trans-unit>
        <trans-unit id="65ab97485c132c2a06d23b7d99106c078eeca52f" translate="yes" xml:space="preserve">
          <source>Unpacking using the &lt;code&gt;U&lt;/code&gt; template code also works on UTF-8 encoded byte strings.</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; テンプレートコードを使用した解凍は、UTF-8でエンコードされたバイト文字列でも機能します。</target>
        </trans-unit>
        <trans-unit id="72bbb6196a2774c03510ad2f9119cf1acefc342b" translate="yes" xml:space="preserve">
          <source>Unqualified &lt;code&gt;dump()&lt;/code&gt;</source>
          <target state="translated">修飾されていない &lt;code&gt;dump()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e326cb1d4e10ed2c54308ac7f68f78f28b408a5" translate="yes" xml:space="preserve">
          <source>Unqualified dump()</source>
          <target state="translated">文句なしの dump()</target>
        </trans-unit>
        <trans-unit id="b99dd6692af960885bd57e60a35c0eb60eb31d7b" translate="yes" xml:space="preserve">
          <source>Unquoted string &quot;%s&quot; may clash with future reserved word</source>
          <target state="translated">引用符で囲まれていない文字列 &quot;%s&quot; は、将来の予約語と衝突する可能性があります。</target>
        </trans-unit>
        <trans-unit id="07b032b56f7aa399f0c5a6580292f3e83d7b1fad" translate="yes" xml:space="preserve">
          <source>Unread</source>
          <target state="translated">Unread</target>
        </trans-unit>
        <trans-unit id="630c8dcab3eab70bdc2071c988078d95676c03b2" translate="yes" xml:space="preserve">
          <source>Unrecognized character %s; marked by &amp;lt;-- HERE after %s near column %d</source>
          <target state="translated">認識されない文字％s; 列％dの近くの％sの後の&amp;lt;-ここにマーク</target>
        </trans-unit>
        <trans-unit id="35c8af17f83153420d0d873b2861766a589d6251" translate="yes" xml:space="preserve">
          <source>Unrecognized escape \%c in character class in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の文字クラスで認識されないエスケープ\％c; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="435719049eae3b64ca346100529a4145c47781d5" translate="yes" xml:space="preserve">
          <source>Unrecognized escape \%c in character class passed through in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現で渡された文字クラスの認識されないエスケープ\％c; &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="43f0a236cfaeb24a6d268ae857e2d6c9ca2477d8" translate="yes" xml:space="preserve">
          <source>Unrecognized escape \%c passed through</source>
          <target state="translated">Unrecognized escape ¶c passed through.</target>
        </trans-unit>
        <trans-unit id="6680e7a052c1c186addf84b706b28b2f52bdc84d" translate="yes" xml:space="preserve">
          <source>Unrecognized escape \%s passed through in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">認識されないエスケープ\％sが正規表現で渡されました。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="14f5901f9cf23090de8d1e00ed8502304a6736d2" translate="yes" xml:space="preserve">
          <source>Unrecognized signal name &quot;%s&quot;</source>
          <target state="translated">認識できない信号名 &quot;%s&quot;</target>
        </trans-unit>
        <trans-unit id="3d60ad24f51432cfcd0acc6a239e8d374b5bdb9a" translate="yes" xml:space="preserve">
          <source>Unrecognized signal name: ...</source>
          <target state="translated">認識されていない信号名:...</target>
        </trans-unit>
        <trans-unit id="e72ab0d0741f2af5e4f61b7913215c68a19c3881" translate="yes" xml:space="preserve">
          <source>Unrecognized switch: -%s (-h will show valid options)</source>
          <target state="translated">認識できないスイッチ:-%s (-h は有効なオプションを表示)</target>
        </trans-unit>
        <trans-unit id="7a7351144db986600fc42c362487972431c1fb70" translate="yes" xml:space="preserve">
          <source>Unsafe signals</source>
          <target state="translated">危険な信号</target>
        </trans-unit>
        <trans-unit id="f5c52c7fb5fb7350d05f5400b468c41971c6a2ea" translate="yes" xml:space="preserve">
          <source>Unsets the IV status of an SV.</source>
          <target state="translated">SV の IV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="4b35d98112909417a16d4e204369414a7012a63c" translate="yes" xml:space="preserve">
          <source>Unsets the NV status of an SV.</source>
          <target state="translated">SV の NV ステータスを解除します。</target>
        </trans-unit>
        <trans-unit id="8c346401fde7bad98f35f3a033aefb050144d4e1" translate="yes" xml:space="preserve">
          <source>Unsets the NV/IV status of an SV.</source>
          <target state="translated">SV の NV/IV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="b2fe5f61df3d20003f435b822e60a53db4a67fca" translate="yes" xml:space="preserve">
          <source>Unsets the PV status of an SV.</source>
          <target state="translated">SV の PV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="2b428943db3814d458253435d21b77a7039ff870" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of an SV.</source>
          <target state="translated">SV の RV 状態を解除します。</target>
        </trans-unit>
        <trans-unit id="167340ebdf7672f2c96a0ab5594ee87b55416719" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of the SV, and decrements the reference count of whatever was being referenced by the RV. This can almost be thought of as a reversal of &lt;code&gt;newSVrv&lt;/code&gt; . The &lt;code&gt;cflags&lt;/code&gt; argument can contain &lt;code&gt;SV_IMMEDIATE_UNREF&lt;/code&gt; to force the reference count to be decremented (otherwise the decrementing is conditional on the reference count being different from one or the reference being a readonly SV). See &lt;code&gt;SvROK_off&lt;/code&gt; .</source>
          <target state="translated">SVのRVステータスを設定解除し、RVによって参照されていたものの参照カウントをデクリメントします。これは、ほとんど &lt;code&gt;newSVrv&lt;/code&gt; の逆転と考えることができます。 &lt;code&gt;cflags&lt;/code&gt; 引数を含むことができる &lt;code&gt;SV_IMMEDIATE_UNREF&lt;/code&gt; が参照カウントをデクリメントすることを強制する（そうでなければデクリメントは、参照カウントが1から異なっているか、参照が読み取り専用SVことを条件です）。 &lt;code&gt;SvROK_off&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2213e6f5fdeb83ff58d3c894e858b5a7ff9788f0" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of the SV, and decrements the reference count of whatever was being referenced by the RV. This can almost be thought of as a reversal of &lt;code&gt;newSVrv&lt;/code&gt; . This is &lt;code&gt;sv_unref_flags&lt;/code&gt; with the &lt;code&gt;flag&lt;/code&gt; being zero. See &lt;code&gt;SvROK_off&lt;/code&gt; .</source>
          <target state="translated">SVのRVステータスを設定解除し、RVによって参照されていたものの参照カウントをデクリメントします。これは、ほとんど &lt;code&gt;newSVrv&lt;/code&gt; の逆転と考えることができます。これは、 &lt;code&gt;flag&lt;/code&gt; がゼロの &lt;code&gt;sv_unref_flags&lt;/code&gt; です。 &lt;code&gt;SvROK_off&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b4cffc0b1a0c243323d58c0b5fa0e4671c5ada28" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of the SV, and decrements the reference count of whatever was being referenced by the RV. This can almost be thought of as a reversal of &lt;code&gt;newSVrv&lt;/code&gt;. The &lt;code&gt;cflags&lt;/code&gt; argument can contain &lt;code&gt;SV_IMMEDIATE_UNREF&lt;/code&gt; to force the reference count to be decremented (otherwise the decrementing is conditional on the reference count being different from one or the reference being a readonly SV). See &lt;code&gt;&lt;a href=&quot;#SvROK_off&quot;&gt;&quot;SvROK_off&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVのRVステータスの設定を解除し、RVによって参照されていたものの参照カウントを減らします。これは、ほとんど &lt;code&gt;newSVrv&lt;/code&gt; の逆転と考えることができます。 &lt;code&gt;cflags&lt;/code&gt; 引数を含むことができる &lt;code&gt;SV_IMMEDIATE_UNREF&lt;/code&gt; が参照カウントをデクリメントすることを強制する（そうでなければデクリメントは、参照カウントが1から異なっているか、参照が読み取り専用SVことを条件です）。 &lt;code&gt;&lt;a href=&quot;#SvROK_off&quot;&gt;&quot;SvROK_off&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="1f24f3b0f1eacb57c8cbf5e1328666ef8fc81abb" translate="yes" xml:space="preserve">
          <source>Unsets the RV status of the SV, and decrements the reference count of whatever was being referenced by the RV. This can almost be thought of as a reversal of &lt;code&gt;newSVrv&lt;/code&gt;. This is &lt;code&gt;sv_unref_flags&lt;/code&gt; with the &lt;code&gt;flag&lt;/code&gt; being zero. See &lt;code&gt;&lt;a href=&quot;#SvROK_off&quot;&gt;&quot;SvROK_off&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVのRVステータスの設定を解除し、RVによって参照されていたものの参照カウントを減らします。これは、ほとんど &lt;code&gt;newSVrv&lt;/code&gt; の逆転と考えることができます。これは &lt;code&gt;sv_unref_flags&lt;/code&gt; であり、 &lt;code&gt;flag&lt;/code&gt; はゼロです。 &lt;code&gt;&lt;a href=&quot;#SvROK_off&quot;&gt;&quot;SvROK_off&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="fcfacd26d54ec31883bc064dd4f33047f4f7aa58" translate="yes" xml:space="preserve">
          <source>Unsets the UTF-8 status of an SV (the data is not changed, just the flag). Do not use frivolously.</source>
          <target state="translated">SV の UTF-8 状態を解除します(データは変更されません。軽薄に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d458cc7af0595ce52fa475113c58f925209c55f3" translate="yes" xml:space="preserve">
          <source>Unsets the script encoding. The layers of &lt;code&gt;STDIN&lt;/code&gt; , &lt;code&gt;STDOUT&lt;/code&gt; are reset to &quot;&lt;code&gt;:raw&lt;/code&gt; &quot; (the default unprocessed raw stream of bytes).</source>
          <target state="translated">スクリプトエンコーディングの設定を解除します。 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; のレイヤーは&quot; &lt;code&gt;:raw&lt;/code&gt; &quot;（デフォルトの未処理の未加工バイトストリーム）にリセットされます。</target>
        </trans-unit>
        <trans-unit id="8ffc0139d7a33cda1bb74b572fbce39422237d1e" translate="yes" xml:space="preserve">
          <source>Unsets the script encoding. The layers of &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;STDOUT&lt;/code&gt; are reset to &quot;&lt;code&gt;:raw&lt;/code&gt;&quot; (the default unprocessed raw stream of bytes).</source>
          <target state="translated">スクリプトエンコーディングの設定を解除します。 &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;STDOUT&lt;/code&gt; のレイヤーは、「 &lt;code&gt;:raw&lt;/code&gt; 」（デフォルトの未処理の生のバイトストリーム）にリセットされます。</target>
        </trans-unit>
        <trans-unit id="f3f886677b52de9f164b2193f280f9e0b4fa4087" translate="yes" xml:space="preserve">
          <source>Unshift the given number of &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; values onto the beginning of the array. The array will grow automatically to accommodate the addition. You must then use &lt;code&gt;av_store&lt;/code&gt; to assign values to these new elements.</source>
          <target state="translated">指定された数の &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 値を配列の先頭にシフトします。追加に対応するために、アレイは自動的に拡大します。次に、 &lt;code&gt;av_store&lt;/code&gt; を使用して、これらの新しい要素に値を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="75a9c3204a7376541e1fbe9d2c8b5f9cdca1e7c3" translate="yes" xml:space="preserve">
          <source>Unshift the given number of &lt;code&gt;undef&lt;/code&gt; values onto the beginning of the array. The array will grow automatically to accommodate the addition.</source>
          <target state="translated">指定された数の &lt;code&gt;undef&lt;/code&gt; 値を配列の先頭にシフト解除します。アレイは、追加に対応するために自動的に拡張されます。</target>
        </trans-unit>
        <trans-unit id="56c8806e91e8b07e1c8c5b623b330c5fc17f1e53" translate="yes" xml:space="preserve">
          <source>Unshifts an SV onto the beginning of the array, creating the array if necessary. A small internal helper function to remove a commonly duplicated idiom.</source>
          <target state="translated">SV を配列の先頭にアンシフトし、必要に応じて配列を作成します。重複しているイディオムを削除するための小さな内部ヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="ee9dd9a34e19860a5fcf0a7ebd745fb02d06f995" translate="yes" xml:space="preserve">
          <source>Unsigned long integers. This is equivalent to T_UV but explicitly casts the return to type &lt;code&gt;unsigned long&lt;/code&gt; . The default typemap for &lt;code&gt;unsigned long&lt;/code&gt; is T_UV.</source>
          <target state="translated">符号なし長整数。これはT_UVと同等ですが、戻り値を &lt;code&gt;unsigned long&lt;/code&gt; 型に明示的にキャストします。 &lt;code&gt;unsigned long&lt;/code&gt; のデフォルトのタイプマップはT_UVです。</target>
        </trans-unit>
        <trans-unit id="ced873325d4a96e8ef45785591aba3dcab16744b" translate="yes" xml:space="preserve">
          <source>Unsigned long integers. This is equivalent to T_UV but explicitly casts the return to type &lt;code&gt;unsigned long&lt;/code&gt;. The default typemap for &lt;code&gt;unsigned long&lt;/code&gt; is T_UV.</source>
          <target state="translated">符号なし長整数。これはT_UVと同等ですが、明示的にreturnを &lt;code&gt;unsigned long&lt;/code&gt; 型にキャストします。 &lt;code&gt;unsigned long&lt;/code&gt; のデフォルトのタイプマップはT_UVです。</target>
        </trans-unit>
        <trans-unit id="ef145f774c9c40a970f92057ceb7090d079d49a8" translate="yes" xml:space="preserve">
          <source>Unsigned short integers. This is equivalent to T_UV but explicitly casts the return to type &lt;code&gt;unsigned short&lt;/code&gt; . The default typemap for &lt;code&gt;unsigned short&lt;/code&gt; is T_UV.</source>
          <target state="translated">符号なし短整数。これはT_UVと同等ですが、戻り値を明示的に &lt;code&gt;unsigned short&lt;/code&gt; 型にキャストします。 &lt;code&gt;unsigned short&lt;/code&gt; のデフォルトのタイプマップはT_UVです。</target>
        </trans-unit>
        <trans-unit id="df6c108aea89772b8a63a9edc5f87c844d4af0f5" translate="yes" xml:space="preserve">
          <source>Unsigned short integers. This is equivalent to T_UV but explicitly casts the return to type &lt;code&gt;unsigned short&lt;/code&gt;. The default typemap for &lt;code&gt;unsigned short&lt;/code&gt; is T_UV.</source>
          <target state="translated">符号なし短整数。これはT_UVと同等ですが、明示的にreturnを &lt;code&gt;unsigned short&lt;/code&gt; 型にキャストします。 &lt;code&gt;unsigned short&lt;/code&gt; のデフォルトのタイプマップはT_UVです。</target>
        </trans-unit>
        <trans-unit id="e913109aa138d1120ee92917139364ad0e62c982" translate="yes" xml:space="preserve">
          <source>Unstable CPAN modules</source>
          <target state="translated">不安定なCPANモジュール</target>
        </trans-unit>
        <trans-unit id="9831cf1a4b45f856ff1bfb0d3f2cad82357c9d2d" translate="yes" xml:space="preserve">
          <source>Unsuccessful %s on filename containing newline</source>
          <target state="translated">改行を含むファイル名の %s が失敗しました。</target>
        </trans-unit>
        <trans-unit id="ea66a9b99cf0a2a1cdbce38ec66bd1c5b4a6472f" translate="yes" xml:space="preserve">
          <source>Unsupported directory function &quot;%s&quot; called</source>
          <target state="translated">サポートされていないディレクトリ関数 &quot;%s&quot; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="24f166b32e4b60fa7b2dcb9461bba55e0fc0824b" translate="yes" xml:space="preserve">
          <source>Unsupported encodings</source>
          <target state="translated">サポートされていないエンコーディング</target>
        </trans-unit>
        <trans-unit id="5eef5d64732b0acc7a8ccefeec52120ece754125" translate="yes" xml:space="preserve">
          <source>Unsupported function %s</source>
          <target state="translated">サポートされていない関数 %s</target>
        </trans-unit>
        <trans-unit id="75d9503b567ed143ca61aa16b0f7d9ae956dd496" translate="yes" xml:space="preserve">
          <source>Unsupported function fork</source>
          <target state="translated">サポートされていない関数のフォーク</target>
        </trans-unit>
        <trans-unit id="d2c5497b1a7cb7063234cce74ee916eac2bf6146" translate="yes" xml:space="preserve">
          <source>Unsupported script encoding %s</source>
          <target state="translated">サポートされていないスクリプト・エンコーディング %s</target>
        </trans-unit>
        <trans-unit id="d7eb67c38ebe84ebbe543f338c00dda69167f50e" translate="yes" xml:space="preserve">
          <source>Unsupported socket function &quot;%s&quot; called</source>
          <target state="translated">サポートされていないソケット関数 &quot;%s&quot; が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="36af1ae54977c39ffd1ead9641e29d3a83f91f42" translate="yes" xml:space="preserve">
          <source>Untaint an SV. Use &lt;code&gt;SvTAINTED_off&lt;/code&gt; instead.</source>
          <target state="translated">SVをuntaintします。代わりに &lt;code&gt;SvTAINTED_off&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="bf2cbcc095493f902db2ae40c30ea409c9c066e5" translate="yes" xml:space="preserve">
          <source>Untaints an SV. Be</source>
          <target state="translated">SVを穢す。ビー</target>
        </trans-unit>
        <trans-unit id="c7caa469295aafcb97e51d949546f29d23659089" translate="yes" xml:space="preserve">
          <source>Unterminated</source>
          <target state="translated">Unterminated</target>
        </trans-unit>
        <trans-unit id="61f3c80e76746c97d6708a314163f8c2fd9b4bef" translate="yes" xml:space="preserve">
          <source>Unterminated &amp;lt;&amp;gt; operator</source>
          <target state="translated">終了していない&amp;lt;&amp;gt;演算子</target>
        </trans-unit>
        <trans-unit id="82e068ea0edf1c7b4de3ae2e55c67d1e8b974e77" translate="yes" xml:space="preserve">
          <source>Unterminated '(*...' argument in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の未終了の '（* ...'引数; m /％s /の&amp;lt;-ここにマーク</target>
        </trans-unit>
        <trans-unit id="624e8334756d23d133eedf0a6bc6607c292afcbb" translate="yes" xml:space="preserve">
          <source>Unterminated '(*...' construct in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の未終了の '（* ...'構成; &amp;lt;-HERE in m /％s /</target>
        </trans-unit>
        <trans-unit id="c59551fb5498e7f4ecec0f9a669fcc525e52d708" translate="yes" xml:space="preserve">
          <source>Unterminated \g... pattern in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の未終了の\ g ...パターン。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="4eed8703593e02aeec17f79e274dece7c2582459" translate="yes" xml:space="preserve">
          <source>Unterminated \g{...} pattern in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の未終了の\ g {...}パターン。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="be2cc0e43ab8f9502433f110394b1a21ca55af23" translate="yes" xml:space="preserve">
          <source>Unterminated attribute list</source>
          <target state="translated">終了していない属性リスト</target>
        </trans-unit>
        <trans-unit id="9b0888b49dc0060324f0f2e9fa27010b029af92a" translate="yes" xml:space="preserve">
          <source>Unterminated attribute parameter in attribute list</source>
          <target state="translated">属性リスト内の終端しない属性パラメータ</target>
        </trans-unit>
        <trans-unit id="5b13c5c91a9b07a5b57b3a0636a5913145b68098" translate="yes" xml:space="preserve">
          <source>Unterminated compressed integer</source>
          <target state="translated">終端されていない圧縮整数</target>
        </trans-unit>
        <trans-unit id="2743d41a5029219fd527d8b196fe97e1ab034e0d" translate="yes" xml:space="preserve">
          <source>Unterminated delimiter for here document</source>
          <target state="translated">ここの文書の終端なし区切り文字</target>
        </trans-unit>
        <trans-unit id="0d319b07743736c50cebc71660dfd18cd71390d3" translate="yes" xml:space="preserve">
          <source>Unterminated verb pattern argument in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の未終了の動詞パターン引数。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="31df085fb521f1474fc83e47e984ad35a507e50f" translate="yes" xml:space="preserve">
          <source>Unterminated verb pattern in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の未終了の動詞パターン。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="dd1c8a6c3311799ae1ea8e9badc636ca33ce5f06" translate="yes" xml:space="preserve">
          <source>Until May 1997, this document was maintained by Jeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;. It is now maintained as part of Perl itself by the Perl 5 Porters &amp;lt;perl5-porters@perl.org&amp;gt;.</source>
          <target state="translated">1997年5月まで、このドキュメントはJeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;によって管理されていました。現在、Perl 5 Porters &amp;lt;perl5-porters@perl.org&amp;gt;によってPerl自体の一部として維持されています。</target>
        </trans-unit>
        <trans-unit id="1831403e65413acb20ccb5893a29f9432e4a4a0c" translate="yes" xml:space="preserve">
          <source>Until May 1997, this document was maintained by Jeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;. It is now maintained as part of Perl itself.</source>
          <target state="translated">1997年5月まで、このドキュメントはJeff Okamoto &amp;lt;okamoto@corp.hp.com&amp;gt;によって管理されていました。現在、Perl自体の一部として維持されています。</target>
        </trans-unit>
        <trans-unit id="c233457d919be5e7a3077c4ecc8aac8f0f4cca07" translate="yes" xml:space="preserve">
          <source>Until Unicode 3.1, it was legal for programs to accept this malformation, but it was discovered that this created security issues.</source>
          <target state="translated">Unicode 3.1までは、プログラムがこの不正を受け入れることは合法でしたが、それがセキュリティ上の問題を生み出していることが判明しました。</target>
        </trans-unit>
        <trans-unit id="9377bbae85c5f3f0ba947e70ca82611c37d8697f" translate="yes" xml:space="preserve">
          <source>Until Unicode 6.1, the 4 control characters U+0080, U+0081, U+0084, and U+0099 did not have names nor aliases. To preserve backwards compatibility, any alias you define for these code points will be returned by this function, in preference to the official name.</source>
          <target state="translated">Unicode 6.1 までは、4 つの制御キ ャ ラ ク タ U+0080、U+0081、U+0084、および U+0099 には名前もエイリアスもありませんでした。後方互換性を維持するために、これらのコードポイントに定義したエイリアスは、正式な名前ではなく、この関数によって返されます。</target>
        </trans-unit>
        <trans-unit id="1eb5a9bdac4b575070ceef54e56442cbab9b46a4" translate="yes" xml:space="preserve">
          <source>Until Unicode 7.0, the noncharacters were &quot;&lt;b&gt;forbidden&lt;/b&gt; for use in open interchange of Unicode text data&quot;, so that code that processed those streams could use these code points as sentinels that could be mixed in with character data, and would always be distinguishable from that data. (Emphasis above and in the next paragraph are added in this document.)</source>
          <target state="translated">Unicode 7.0まで、非文字は「Unicodeテキストデータのオープンインターチェンジでの使用が&lt;b&gt;禁止さ&lt;/b&gt;れていました」ので、これらのストリームを処理するコードは、これらのコードポイントを文字データと混合できるセンチネルとして使用でき、常にそれと区別できました。データ。（このドキュメントでは、上記および次の段落の強調が追加されています。）</target>
        </trans-unit>
        <trans-unit id="cf0c5cc9e7d8c8770f1e88663df8d645526d47b8" translate="yes" xml:space="preserve">
          <source>Until the lexical &lt;code&gt;$_&lt;/code&gt; feature was removed, this function would find the position of the lexical &lt;code&gt;$_&lt;/code&gt; in the pad of the currently-executing function and return the offset in the current pad, or &lt;code&gt;NOT_IN_PAD&lt;/code&gt;.</source>
          <target state="translated">字句 &lt;code&gt;$_&lt;/code&gt; 機能が削除されるまで、この関数は現在実行中の関数のパッド内の字句 &lt;code&gt;$_&lt;/code&gt; 位置を見つけ、現在のパッド内のオフセット、つまり &lt;code&gt;NOT_IN_PAD&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d4ab20108515e8dd588162df69f6581bf8cbeba9" translate="yes" xml:space="preserve">
          <source>Until then, users are alerted &lt;b&gt;NOT&lt;/b&gt; to rely on the value of &lt;code&gt;$_&lt;/code&gt; remaining unmodified between the outside and the inside of the control block. In particular, the following example is &lt;b&gt;UNSAFE&lt;/b&gt;:</source>
          <target state="translated">それまでは、制御ブロックの外側と内側の間で変更されないままの &lt;code&gt;$_&lt;/code&gt; の値に依存し&lt;b&gt;ない&lt;/b&gt;ようにユーザーに警告されます。特に、次の例は&lt;b&gt;UNSAFE&lt;/b&gt;です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="39e4b4459c9bb0a70e21b5f9e46e887914c2d11b" translate="yes" xml:space="preserve">
          <source>Until version 1.72 of this module, the recommended technique for locking &lt;b&gt;DB_File&lt;/b&gt; databases was to flock the filehandle returned from the &quot;fd&quot; function. Unfortunately this technique has been shown to be fundamentally flawed (Kudos to David Harris for tracking this down). Use it at your own peril!</source>
          <target state="translated">このモジュールのバージョン1.72まで、&lt;b&gt;DB_File&lt;/b&gt;データベースをロックするための推奨手法は、「fd」関数から返されたファイルハンドルをフロックすることでした。残念ながら、この手法には根本的な欠陥があることが示されています（これを追跡するためのDavid Harrisへの称賛）。自分の危険でそれを使用してください！</target>
        </trans-unit>
        <trans-unit id="086839a55d5b993fe1e0e2c06b1920a0c4bb718d" translate="yes" xml:space="preserve">
          <source>Until version 1.88 CPAN.pm never trusted the contents of the build_dir directory between sessions. Since 1.88_58 CPAN.pm has a YAML-based mechanism that makes it possible to share the contents of the build_dir/ directory between different sessions with the same version of perl. People who prefer to test things several days before installing will like this feature because it saves a lot of time.</source>
          <target state="translated">バージョン 1.88 までは、CPAN.pm はセッション間で build_dir ディレクトリの内容を信頼することはありませんでした。1.88_58 以降、CPAN.pm には YAML ベースのメカニズムがあり、同じバージョンの perl で異なるセッション間で build_dir/ディレクトリの内容を共有することが可能になりました。インストールする前に何日かテストするのが好きな人は、この機能を気に入るでしょう。</target>
        </trans-unit>
        <trans-unit id="3e8ce03700f57426d42c01b15a7e4b29915f11c3" translate="yes" xml:space="preserve">
          <source>Unused. Left in for compatibility with Perl 5.10.0.</source>
          <target state="translated">未使用。Perl 5.10.0との互換性のために入れたままになっています。</target>
        </trans-unit>
        <trans-unit id="06342bce5c18e1ce2d5790dec4f3e08db46e5f75" translate="yes" xml:space="preserve">
          <source>Unusually, the overloaded implementation of the smart match operator does not get full control of the smart match behaviour. In particular, in the following code:</source>
          <target state="translated">異常に、スマートマッチ演算子のオーバーロードされた実装では、スマートマッチの動作を完全に制御することができません。特に、以下のコードでは</target>
        </trans-unit>
        <trans-unit id="29dacba7bdce44332111c01c6b875e4536599d85" translate="yes" xml:space="preserve">
          <source>Unweaken a reference: Clear the &lt;code&gt;SvWEAKREF&lt;/code&gt; flag on this RV; remove the backreference to this RV from the array of backreferences associated with the target SV, increment the refcount of the target. Silently ignores &lt;code&gt;undef&lt;/code&gt; and warns on non-weak references.</source>
          <target state="translated">参照を弱めない：このRVの &lt;code&gt;SvWEAKREF&lt;/code&gt; フラグをクリアします。ターゲットSVに関連付けられた後方参照の配列からこのRVへの後方参照を削除し、ターゲットのrefcountをインクリメントします。 &lt;code&gt;undef&lt;/code&gt; をサイレントに無視し、弱でない参照について警告します。</target>
        </trans-unit>
        <trans-unit id="2e6b69fad267beac964f8da92bb1c2cb8cf51e03" translate="yes" xml:space="preserve">
          <source>Unzipping a complete zip file to disk</source>
          <target state="translated">完全なzipファイルをディスクに解凍する</target>
        </trans-unit>
        <trans-unit id="3706919ae59d2c2aad143453aa2569b724a8dcba" translate="yes" xml:space="preserve">
          <source>Up to 3.14_05, the switch &lt;b&gt;-v&lt;/b&gt; was used to produce verbose messages of &lt;b&gt;perldoc&lt;/b&gt; operation, which is now enabled by &lt;b&gt;-D&lt;/b&gt;.</source>
          <target state="translated">3.14_05までは、スイッチ&lt;b&gt;-v&lt;/b&gt;を使用して&lt;b&gt;perldoc&lt;/b&gt;操作の詳細メッセージを生成していましたが、現在&lt;b&gt;-Dで&lt;/b&gt;有効になっています。</target>
        </trans-unit>
        <trans-unit id="ccaf842ca15dd152998644a5cc6be29af2ba5d3b" translate="yes" xml:space="preserve">
          <source>Up to Perl 5.5, opendir() could not autovivify a directory handle from &lt;code&gt;undef&lt;/code&gt;, so using a lexical handle required using a function from &lt;a href=&quot;symbol&quot;&gt;Symbol&lt;/a&gt; to create an anonymous glob, which took a separate step. &lt;code&gt;DirHandle&lt;/code&gt; encapsulates this, which allowed cleaner code than opendir(). Since Perl 5.6, opendir() alone has been all you need for lexical handles.</source>
          <target state="translated">Perl 5.5までは、opendir（）は &lt;code&gt;undef&lt;/code&gt; からディレクトリハンドルを自動化できなかったため、&lt;a href=&quot;symbol&quot;&gt;Symbolの&lt;/a&gt;関数を使用して匿名のグロブを作成するために必要な字句ハンドルを使用し、別の手順を実行しました。 &lt;code&gt;DirHandle&lt;/code&gt; はこれをカプセル化し、opendir（）よりもクリーンなコードを可能にしました。Perl 5.6以降、字句ハンドルに必要なのはopendir（）だけです。</target>
        </trans-unit>
        <trans-unit id="b37c83dafbe144687e4e64f7705c9303ba945d98" translate="yes" xml:space="preserve">
          <source>Up until Perl 5.18, the actual rules of what a valid identifier was were a bit fuzzy. However, in general, anything defined here should work on previous versions of Perl, while the opposite -- edge cases that work in previous versions, but aren't defined here -- probably won't work on newer versions. As an important side note, please note that the following only applies to bareword identifiers as found in Perl source code, not identifiers introduced through symbolic references, which have much fewer restrictions. If working under the effect of the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8;&lt;/code&gt; pragma, the following rules apply:</source>
          <target state="translated">Perl 5.18までは、有効な識別子の実際のルールは少しあいまいでした。ただし、一般的に、ここで定義されたものはすべて以前のバージョンのPerlで動作しますが、反対-以前のバージョンでは動作しますが、ここでは定義されていないエッジケース-おそらく新しいバージョンでは動作しません。重要な副次的な注意として、以下はPerlソースコードにあるベアワード識別子にのみ適用され、制限がはるかに少ないシンボリック参照によって導入された識別子には適用されないことに注意してください。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8;&lt;/code&gt; 影響下で作業している場合; プラグマには、次の規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="6fc88db01ba5e7a05c82ebb02e9f5bce416f55ca" translate="yes" xml:space="preserve">
          <source>Up until Perl 5.18, the actual rules of what a valid identifier was were a bit fuzzy. However, in general, anything defined here should work on previous versions of Perl, while the opposite -- edge cases that work in previous versions, but aren't defined here -- probably won't work on newer versions. As an important side note, please note that the following only applies to bareword identifiers as found in Perl source code, not identifiers introduced through symbolic references, which have much fewer restrictions. If working under the effect of the &lt;code&gt;use utf8;&lt;/code&gt; pragma, the following rules apply:</source>
          <target state="translated">Perl 5.18までは、有効な識別子が何であるかについての実際のルールは少しあいまいでした。ただし、一般に、ここで定義されたものはすべて以前のバージョンのPerlで機能するはずですが、反対の（以前のバージョンでは機能するが、ここでは定義されていないエッジケース）はおそらく新しいバージョンでは機能しません。重要な補足として、以下はPerlソースコードにあるベアワード識別子にのみ適用され、制限がはるかに少ないシンボリック参照によって導入された識別子には適用されないことに注意してください。 &lt;code&gt;use utf8;&lt;/code&gt; て作業する場合。プラグマには、次のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="700db59a01b3167d63908b9389905b718c997451" translate="yes" xml:space="preserve">
          <source>Update the pad compilation state variables on entry to a new block.</source>
          <target state="translated">新しいブロックへのエントリー時にパッドのコンパイル状態変数を更新します。</target>
        </trans-unit>
        <trans-unit id="8d41ca4ae9515e795255242cbd01a15b9d2f782f" translate="yes" xml:space="preserve">
          <source>Update the running test count during testing.</source>
          <target state="translated">テスト中に実行中のテスト回数を更新します。</target>
        </trans-unit>
        <trans-unit id="38f04a1ce254f18542607a5049eadaa5aadd3a16" translate="yes" xml:space="preserve">
          <source>Updated 03 October 2019 for perl-5.32.0+</source>
          <target state="translated">2019年10月03日に更新されました。</target>
        </trans-unit>
        <trans-unit id="ee4df1b22166fed22f195ec39ac5348e1ad4b8f4" translate="yes" xml:space="preserve">
          <source>Updated 12 March 2001 to mention //'SYS1.TCPPARMS(TCPDATA)'.</source>
          <target state="translated">2001 年 3 月 12 日の更新で、 //SYS1.TCPPARMS(TCPDATA)に言及するようになりました。</target>
        </trans-unit>
        <trans-unit id="6a623978ea73cf3eae49fa257cd2b3aa518dc7a5" translate="yes" xml:space="preserve">
          <source>Updated 12 November 2000 for the 5.7.1 release of Perl.</source>
          <target state="translated">Perl の 5.7.1 リリース用に 2000 年 11 月 12 日に更新されました。</target>
        </trans-unit>
        <trans-unit id="dd3c1a655a151c3e2de2f2bcc426466b5deb0bf5" translate="yes" xml:space="preserve">
          <source>Updated 15 January 2001 for the 5.7.1 release of Perl.</source>
          <target state="translated">Perl の 5.7.1 リリースのために 2001 年 1 月 15 日に更新されました。</target>
        </trans-unit>
        <trans-unit id="5b24aab6b7b4ffb7848dd5c01694221d0200543c" translate="yes" xml:space="preserve">
          <source>Updated 24 January 2001 to mention dynamic loading.</source>
          <target state="translated">2001年1月24日に更新され、ダイナミックローディングについて言及しました。</target>
        </trans-unit>
        <trans-unit id="555d5c68c249342b429101141b4e668ed9316de1" translate="yes" xml:space="preserve">
          <source>Updated 28 November 2001 for broken URLs.</source>
          <target state="translated">壊れたURLのために2001年11月28日に更新されました。</target>
        </trans-unit>
        <trans-unit id="e62d7626efdd54a1045fbdd7ab753ad6e883c01e" translate="yes" xml:space="preserve">
          <source>Updated by Kirrily &quot;Skud&quot; Robert, &lt;code&gt;skud@cpan.org&lt;/code&gt;</source>
          <target state="translated">Kirrily &quot;Skud&quot; Robert、 &lt;code&gt;skud@cpan.org&lt;/code&gt; cpan.orgによって更新</target>
        </trans-unit>
        <trans-unit id="8d4259d34b695e49901c9de958534f87265a7f80" translate="yes" xml:space="preserve">
          <source>Updated to be autogenerated from comments in the source by Benjamin Stuhl.</source>
          <target state="translated">Benjamin Stuhl氏によるソースのコメントから自動生成されるように更新。</target>
        </trans-unit>
        <trans-unit id="76fadb0208f83533ce563882faa439aa56b4df27" translate="yes" xml:space="preserve">
          <source>Updates for 5.8.0 by Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;</source>
          <target state="translated">Nicholas Clark &amp;lt;nick@ccl4.org&amp;gt;による5.8.0の更新</target>
        </trans-unit>
        <trans-unit id="1339cf8af116acbabf9923f4b5f205bd8b4522d5" translate="yes" xml:space="preserve">
          <source>Updates the current digest state by appending bits to it. The return value is the updated object itself.</source>
          <target state="translated">現在のダイジェスト状態にビットを追加して更新します。戻り値は更新されたオブジェクトそのものです。</target>
        </trans-unit>
        <trans-unit id="0f2ec1c28ed80b9544a67d730b3a5ce7a7abddfc" translate="yes" xml:space="preserve">
          <source>Updates to dual-life modules should consist of minimal patches to fix crashing bugs or security issues (as above). Any changes made to dual-life modules for which CPAN is canonical should be coordinated with the upstream author.</source>
          <target state="translated">dual-life モジュールのアップデートは、クラッシュするバグやセキュリティ問題を修正する最小限のパッチで構成されるべきです (上記のように)。CPAN が正規化されている dual-life モジュールに加えられた変更は、上流の作者と調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="6308607dfbe53993e815ce31d09f4ea8e48145b7" translate="yes" xml:space="preserve">
          <source>Updating Apple's Perl</source>
          <target state="translated">アップルのPerlのアップデート</target>
        </trans-unit>
        <trans-unit id="e1215f678a578a0f9348858eb8435faef2c2b2a9" translate="yes" xml:space="preserve">
          <source>Updating perldelta</source>
          <target state="translated">ペルデルタの更新</target>
        </trans-unit>
        <trans-unit id="a93c4eda9c6091f3f69d33443d08d2297a61d678" translate="yes" xml:space="preserve">
          <source>Upgrade all installed modules. Blindly doing this can really break things, so keep a backup.</source>
          <target state="translated">インストールされているモジュールをすべてアップグレードしてください。やみくもにこれを行うと、本当に物を壊すことがありますので、バックアップを取っておきましょう。</target>
        </trans-unit>
        <trans-unit id="2c9b320c5f351db0fa6eccf0f443242caa105988" translate="yes" xml:space="preserve">
          <source>Upgrade an SV to a more complex form. Generally adds a new body type to the SV, then copies across as much information as possible from the old body. It croaks if the SV is already in a more complex form than requested. You generally want to use the &lt;code&gt;SvUPGRADE&lt;/code&gt; macro wrapper, which checks the type before calling &lt;code&gt;sv_upgrade&lt;/code&gt; , and hence does not croak. See also &lt;code&gt;svtype&lt;/code&gt; .</source>
          <target state="translated">SVをより複雑なフォームにアップグレードします。通常、新しいボディタイプをSVに追加し、古いボディから可能な限り多くの情報をコピーします。SVがすでに要求されたものより複雑な形式である場合、それは鳴きます。あなたは、一般的に使用したい &lt;code&gt;SvUPGRADE&lt;/code&gt; 呼び出す前にチェックタイプマクロラッパーを、 &lt;code&gt;sv_upgrade&lt;/code&gt; を、ひいてはcroakしていません。 &lt;code&gt;svtype&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1d51dcaafe87398cb11a10ca76493ca177deff1c" translate="yes" xml:space="preserve">
          <source>Upgrade an SV to a more complex form. Generally adds a new body type to the SV, then copies across as much information as possible from the old body. It croaks if the SV is already in a more complex form than requested. You generally want to use the &lt;code&gt;SvUPGRADE&lt;/code&gt; macro wrapper, which checks the type before calling &lt;code&gt;sv_upgrade&lt;/code&gt;, and hence does not croak. See also &lt;code&gt;&lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVをより複雑な形式にアップグレードします。通常、SVに新しいボディタイプを追加してから、古いボディから可能な限り多くの情報をコピーします。SVがすでに要求されたよりも複雑な形式になっている場合は、鳴きます。通常、 &lt;code&gt;SvUPGRADE&lt;/code&gt; マクロラッパーを使用します。このラッパーは、 &lt;code&gt;sv_upgrade&lt;/code&gt; を呼び出す前に型をチェックするため、クロークしません。 &lt;code&gt;&lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="add6ead95077aa4159bcce425fd97688bfe672e4" translate="yes" xml:space="preserve">
          <source>Upgrade both sides to unicode-strings</source>
          <target state="translated">両側をユニコード文字列にアップグレードする</target>
        </trans-unit>
        <trans-unit id="bf9f028e2ed4c8dda78241c1ef169c062efd613f" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. Any arguments necessary for SSL must be given in &lt;code&gt;new&lt;/code&gt; already.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。SSLに必要な引数は、すでに &lt;code&gt;new&lt;/code&gt; で指定されている必要があります。</target>
        </trans-unit>
        <trans-unit id="2e297ad00204348f72b48d82b1764d98805e45e0" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. The SSL arguments have to be given in &lt;code&gt;new&lt;/code&gt; already because they are needed for data connections too.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。SSL引数はデータ接続にも必要であるため、SSL引数はすでに &lt;code&gt;new&lt;/code&gt; で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f973497f8e7a213aaea7ca02f49b6eca9fd3bfc" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. You can use SSL arguments as documented in &lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt;, but it will usually use the right arguments already.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。&lt;a href=&quot;IO::Socket::SSL&quot;&gt;IO :: Socket :: SSL&lt;/a&gt;に記載されているようにSSL引数を使用できますが、通常はすでに正しい引数を使用します。</target>
        </trans-unit>
        <trans-unit id="1fee598dc67371af303baa6134f7476c80299023" translate="yes" xml:space="preserve">
          <source>Upgrade existing plain connection to SSL. You can use SSL arguments as documented in &lt;a href=&quot;http://search.cpan.org/perldoc/IO::Socket::SSL&quot;&gt;IO::Socket::SSL&lt;/a&gt;, but it will usually use the right arguments already.</source>
          <target state="translated">既存のプレーン接続をSSLにアップグレードします。&lt;a href=&quot;http://search.cpan.org/perldoc/IO::Socket::SSL&quot;&gt;IO :: Socket :: SSL&lt;/a&gt;に記載されているようにSSL引数を使用できますが、通常はすでに正しい引数を使用しています。</target>
        </trans-unit>
        <trans-unit id="bd48bfd47491f661502b2059f5ddd29245e2ae65" translate="yes" xml:space="preserve">
          <source>Upgrade the input stream to handle UTF8.</source>
          <target state="translated">入力ストリームをUTF8を扱うようにアップグレードします。</target>
        </trans-unit>
        <trans-unit id="512167fc556180d756801a5133a4af3eea376b8d" translate="yes" xml:space="preserve">
          <source>Upload the tarball</source>
          <target state="translated">タールボールのアップロード</target>
        </trans-unit>
        <trans-unit id="1cd0f1b9998e13b00b78484f1fadbc538035dbb0" translate="yes" xml:space="preserve">
          <source>Upon a successful match, if &lt;code&gt;pe1&lt;/code&gt; is non-&lt;code&gt;NULL&lt;/code&gt;, it will be set to point to the beginning of the</source>
          <target state="translated">一致が成功すると、 &lt;code&gt;pe1&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; 以外の場合、pe1はの先頭を指すように設定されます。</target>
        </trans-unit>
        <trans-unit id="abc1ecb08d6b6e94555b0616aae01977c29165a2" translate="yes" xml:space="preserve">
          <source>Upon a successful match, if &lt;code&gt;pe1&lt;/code&gt; is non-NULL, it will be set to point to the beginning of the</source>
          <target state="translated">一致が成功したときに、 &lt;code&gt;pe1&lt;/code&gt; がNULLでない場合は、pe1の先頭を指すように設定されます。</target>
        </trans-unit>
        <trans-unit id="d6227a3769b7b8bef00a65fa576f89761ee6446f" translate="yes" xml:space="preserve">
          <source>Upon failure, returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">失敗すると、 &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dfebf0d8d353544ce7a20fd6b2aa49b84d774da5" translate="yes" xml:space="preserve">
          <source>Upon return from the code that needs to use the global locale, &lt;a href=&quot;perlapi#sync_locale&quot;&gt;&lt;code&gt;sync_locale()&lt;/code&gt;&lt;/a&gt; should be called to restore the safe multi-thread operation.</source>
          <target state="translated">グローバルロケールを使用する必要があるコードから戻っ&lt;a href=&quot;perlapi#sync_locale&quot;&gt; &lt;code&gt;sync_locale()&lt;/code&gt; &lt;/a&gt;、sync_locale（）を呼び出して、安全なマルチスレッド操作を復元する必要があります。</target>
        </trans-unit>
        <trans-unit id="e9bbd1f38e3f10a7609320917c264db329d774df" translate="yes" xml:space="preserve">
          <source>Upon success, returns an &lt;a href=&quot;ExtUtils::Typemaps&quot;&gt;ExtUtils::Typemaps&lt;/a&gt; object.</source>
          <target state="translated">成功すると、&lt;a href=&quot;ExtUtils::Typemaps&quot;&gt;ExtUtils :: Typemaps&lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="00d3d32521b4b97a3ea7146d67bef7d8345970f3" translate="yes" xml:space="preserve">
          <source>Upon success, returns the same string passed as argument.</source>
          <target state="translated">成功すると、引数として渡された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3a843d4dab6f725af56da9a31e9ee6fb792722a4" translate="yes" xml:space="preserve">
          <source>Upon successful return, the number of variants in the string can be computed by having saved the value of &lt;code&gt;*lenp&lt;/code&gt; before the call, and subtracting it from the after-call value of &lt;code&gt;*lenp&lt;/code&gt;.</source>
          <target state="translated">正常に戻ったら、呼び出し前に &lt;code&gt;*lenp&lt;/code&gt; の値を保存し、それを* lenpの呼び出し後の値から減算することにより、文字列内のバリアントの数を計算でき &lt;code&gt;*lenp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="169eb65969db88df1163a98feb823fd7dda92b8b" translate="yes" xml:space="preserve">
          <source>Upon successful return, the number of variants in the string can be computed by having saved the value of &lt;code&gt;*lenp&lt;/code&gt; before the call, and subtracting the after-call value of &lt;code&gt;*lenp&lt;/code&gt; from it.</source>
          <target state="translated">正常に戻ったら、呼び出し前に &lt;code&gt;*lenp&lt;/code&gt; の値を保存し、そこから &lt;code&gt;*lenp&lt;/code&gt; の呼び出し後の値を引くことにより、文字列内のバリアントの数を計算できます。</target>
        </trans-unit>
        <trans-unit id="7931625de6bea30c3520a42f1b48c8c7ccb1cf73" translate="yes" xml:space="preserve">
          <source>Upon the call, the &lt;code&gt;mg_obj&lt;/code&gt; field will hold the hash key to be accessed. Upon return, the &lt;code&gt;SV*&lt;/code&gt; value in &lt;code&gt;mg_obj&lt;/code&gt; will be used in place of the original key in the hash access. The integer index value in the first parameter will be the &lt;code&gt;action&lt;/code&gt; value from &lt;code&gt;hv_fetch_common&lt;/code&gt; , or -1 if the call is from &lt;code&gt;hv_delete_common&lt;/code&gt; .</source>
          <target state="translated">呼び出し時に、 &lt;code&gt;mg_obj&lt;/code&gt; フィールドはアクセスされるハッシュキーを保持します。戻ったとき、 &lt;code&gt;mg_obj&lt;/code&gt; の &lt;code&gt;SV*&lt;/code&gt; 値がハッシュアクセスの元のキーの代わりに使用されます。最初のパラメーターの整数インデックス値は &lt;code&gt;hv_fetch_common&lt;/code&gt; からの &lt;code&gt;action&lt;/code&gt; 値、または呼び出しが &lt;code&gt;hv_delete_common&lt;/code&gt; からの場合は-1になります。</target>
        </trans-unit>
        <trans-unit id="5908c7f7cc15c0eccf74a3929a4b447274d6a72c" translate="yes" xml:space="preserve">
          <source>Upon the call, the &lt;code&gt;mg_obj&lt;/code&gt; field will hold the hash key to be accessed. Upon return, the &lt;code&gt;SV*&lt;/code&gt; value in &lt;code&gt;mg_obj&lt;/code&gt; will be used in place of the original key in the hash access. The integer index value in the first parameter will be the &lt;code&gt;action&lt;/code&gt; value from &lt;code&gt;hv_fetch_common&lt;/code&gt;, or -1 if the call is from &lt;code&gt;hv_delete_common&lt;/code&gt;.</source>
          <target state="translated">呼び出し時に、 &lt;code&gt;mg_obj&lt;/code&gt; フィールドはアクセスされるハッシュキーを保持します。戻ると、ハッシュアクセスの元のキーの代わりに &lt;code&gt;mg_obj&lt;/code&gt; の &lt;code&gt;SV*&lt;/code&gt; 値が使用されます。最初のパラメーターの整数インデックス値は、 &lt;code&gt;hv_fetch_common&lt;/code&gt; からの &lt;code&gt;action&lt;/code&gt; 値、または呼び出しが &lt;code&gt;hv_delete_common&lt;/code&gt; からのものである場合は-1になります。</target>
        </trans-unit>
        <trans-unit id="fa70849156e04d235d49fdb3686f0245d179ad8d" translate="yes" xml:space="preserve">
          <source>Upon tying a new hash to this package, the developer must specify the size of the keys that will be used, the size of the value fields that the keys will index, and the size of the overall table (in terms of key-value pairs, not size in hard memory).</source>
          <target state="translated">新しいハッシュをこのパッケージに結びつける際に、開発者は使用するキーのサイズ、キーがインデックスを作成する値フィールドのサイズ、テーブル全体のサイズ(ハードメモリ上のサイズではなく、キーと値のペアのサイズ)を指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="187b6d106a78abc992df989626da341b4759f5bf" translate="yes" xml:space="preserve">
          <source>Upper/lower case differences in property names and values are irrelevant; thus &lt;code&gt;\p{Upper}&lt;/code&gt; means the same thing as &lt;code&gt;\p{upper}&lt;/code&gt; or even &lt;code&gt;\p{UpPeR}&lt;/code&gt; . Similarly, you can add or subtract underscores anywhere in the middle of a word, so that these are also equivalent to &lt;code&gt;\p{U_p_p_e_r}&lt;/code&gt; . And white space is irrelevant adjacent to non-word characters, such as the braces and the equals or colon separators, so &lt;code&gt;\p{ Upper }&lt;/code&gt; and &lt;code&gt;\p{ Upper_case : Y }&lt;/code&gt; are equivalent to these as well. In fact, white space and even hyphens can usually be added or deleted anywhere. So even &lt;code&gt;\p{ Up-per case = Yes}&lt;/code&gt; is equivalent. All this is called &quot;loose-matching&quot; by Unicode. The few places where stricter matching is used is in the middle of numbers, and in the Perl extension properties that begin or end with an underscore. Stricter matching cares about white space (except adjacent to non-word characters), hyphens, and non-interior underscores.</source>
          <target state="translated">プロパティ名と値の大文字と小文字の違いは関係ありません。したがって、 &lt;code&gt;\p{Upper}&lt;/code&gt; は &lt;code&gt;\p{upper}&lt;/code&gt; または &lt;code&gt;\p{UpPeR}&lt;/code&gt; と同じことを意味します。同様に、単語の途中のどこにでもアンダースコアを追加または削除できるため、これらも &lt;code&gt;\p{U_p_p_e_r}&lt;/code&gt; と同等になります。また、中括弧や等号やコロンの区切り文字など、単語以外の文字に隣接する空白は関係がないため、 &lt;code&gt;\p{ Upper }&lt;/code&gt; および &lt;code&gt;\p{ Upper_case : Y }&lt;/code&gt; もこれらと同等です。実際、空白文字やハイフンでさえ、通常はどこでも追加または削除できます。したがって、 &lt;code&gt;\p{ Up-per case = Yes}&lt;/code&gt; 同等です。これはすべて、Unicodeでは「ルーズマッチング」と呼ばれています。より厳密なマッチングが使用されるいくつかの場所は、数字の途中と、アンダースコアで開始または終了するPerl拡張プロパティです。厳密なマッチングでは、空白（単語以外の文字に隣接するものを除く）、ハイフン、および内部以外のアンダースコアが考慮されます。</target>
        </trans-unit>
        <trans-unit id="4660b05f7ff6fc21af46a89123d4d2cc76b34ecd" translate="yes" xml:space="preserve">
          <source>Upper/lower case differences in property names and values are irrelevant; thus &lt;code&gt;\p{Upper}&lt;/code&gt; means the same thing as &lt;code&gt;\p{upper}&lt;/code&gt; or even &lt;code&gt;\p{UpPeR}&lt;/code&gt;. Similarly, you can add or subtract underscores anywhere in the middle of a word, so that these are also equivalent to &lt;code&gt;\p{U_p_p_e_r}&lt;/code&gt;. And white space is generally irrelevant adjacent to non-word characters, such as the braces and the equals or colon separators, so &lt;code&gt;\p{ Upper }&lt;/code&gt; and &lt;code&gt;\p{ Upper_case : Y }&lt;/code&gt; are equivalent to these as well. In fact, white space and even hyphens can usually be added or deleted anywhere. So even &lt;code&gt;\p{ Up-per case = Yes}&lt;/code&gt; is equivalent. All this is called &quot;loose-matching&quot; by Unicode. The &quot;name&quot; property has some restrictions on this due to a few outlier names. Full details are given in &lt;a href=&quot;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&quot;&gt;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&lt;/a&gt;.</source>
          <target state="translated">プロパティ名と値の大文字と小文字の違いは関係ありません。したがって、 &lt;code&gt;\p{Upper}&lt;/code&gt; は &lt;code&gt;\p{upper}&lt;/code&gt; または &lt;code&gt;\p{UpPeR}&lt;/code&gt; と同じ意味です。同様に、単語の途中のどこにでもアンダースコアを加算または減算できるため、これらも &lt;code&gt;\p{U_p_p_e_r}&lt;/code&gt; と同等です。また、空白は通常、中括弧や等号またはコロン区切り文字などの単語以外の文字に隣接しては無関係であるため、 &lt;code&gt;\p{ Upper }&lt;/code&gt; および &lt;code&gt;\p{ Upper_case : Y }&lt;/code&gt; もこれらと同等です。実際、空白やハイフンでさえ、通常はどこにでも追加または削除できます。したがって、 &lt;code&gt;\p{ Up-per case = Yes}&lt;/code&gt; 同等です。これはすべて、Unicodeでは「ルーズマッチング」と呼ばれています。「name」プロパティには、いくつかの外れ値の名前があるため、これにいくつかの制限があります。詳細については、&lt;a href=&quot;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&quot;&gt;https：//www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="46cec56f3412b99de640a0bca5cebcfbc4f533b0" translate="yes" xml:space="preserve">
          <source>Urgh. No wonder. There's a big difference between &quot;a null byte&quot;, character zero, and &quot;a space&quot;, character 32. Perl's put something between the date and the description - but unfortunately, we can't see it!</source>
          <target state="translated">うっ。当たり前だ。文字ゼロの &quot;ヌルバイト &quot;と32文字の &quot;スペース &quot;の間には大きな違いがあります。Perl は日付と記述の間に何かを入れていますが、残念ながらそれを見ることはできません。</target>
        </trans-unit>
        <trans-unit id="da969c82ff05cdc8d49e5dc3d47bc17f0b801a39" translate="yes" xml:space="preserve">
          <source>Urgh. Well, it's a bit better, but - well, would you want to maintain that?</source>
          <target state="translated">ううっ。まあ、少しはマシにはなったけど......まあ、このままでいいのかな?</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="82706ecdf8b404a3d7af76c38e97c34669646ccc" translate="yes" xml:space="preserve">
          <source>Usage Hints for Perl on OS/390</source>
          <target state="translated">OS/390でのPerlの使い方のヒント</target>
        </trans-unit>
        <trans-unit id="96115201cdc9d452c0fc7c1a0ccadddf5148529a" translate="yes" xml:space="preserve">
          <source>Usage Hints for Perl on Windows</source>
          <target state="translated">WindowsでのPerlの使い方のヒント</target>
        </trans-unit>
        <trans-unit id="73e902d9c6da4a824d1ebe10f64b85e576698ee7" translate="yes" xml:space="preserve">
          <source>Usage is</source>
          <target state="translated">使用法は</target>
        </trans-unit>
        <trans-unit id="b4adcf0ec968acb4f04ec349a0b19258b19ca830" translate="yes" xml:space="preserve">
          <source>Usage messages issued as a result of bad command-line syntax should go to &lt;code&gt;STDERR&lt;/code&gt; . However, usage messages issued due to an explicit request to print usage (like specifying &lt;b&gt;-help&lt;/b&gt; on the command line) should go to &lt;code&gt;STDOUT&lt;/code&gt; , just in case the user wants to pipe the output to a pager (such as &lt;b&gt;more(1)&lt;/b&gt;).</source>
          <target state="translated">不正なコマンドライン構文の結果として発行された使用方法メッセージは、 &lt;code&gt;STDERR&lt;/code&gt; に送信されます。ただし、ユーザーが出力をページャー（&lt;b&gt;more（1）など&lt;/b&gt;）にパイプしたい場合に備えて、（コマンドラインで&lt;b&gt;-help&lt;/b&gt;を指定するなどの）使用状況を印刷する明示的な要求により発行された使用状況メッセージは &lt;code&gt;STDOUT&lt;/code&gt; に送信する必要があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="41d5df819d19562e6554eaedc6a7c783f798be7b" translate="yes" xml:space="preserve">
          <source>Usage messages issued as a result of bad command-line syntax should go to &lt;code&gt;STDERR&lt;/code&gt;. However, usage messages issued due to an explicit request to print usage (like specifying &lt;b&gt;-help&lt;/b&gt; on the command line) should go to &lt;code&gt;STDOUT&lt;/code&gt;, just in case the user wants to pipe the output to a pager (such as &lt;b&gt;more(1)&lt;/b&gt;).</source>
          <target state="translated">不正なコマンドライン構文の結果として発行された使用法メッセージは、 &lt;code&gt;STDERR&lt;/code&gt; に送信する必要があります。ただし、ユーザーが出力をポケットベル（&lt;b&gt;more（1）など&lt;/b&gt;）にパイプしたい場合に備えて、使用法を印刷する明示的な要求（コマンドラインで&lt;b&gt;-help&lt;/b&gt;を指定するなど）によって発行された使用法メッセージは &lt;code&gt;STDOUT&lt;/code&gt; に送信する必要があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="261136bd75aafd5cdd3130fb700c6549b50d82b1" translate="yes" xml:space="preserve">
          <source>Usage might be something like:</source>
          <target state="translated">用法はこんな感じかもしれません。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="7e4b7de93d932c1efcbac56adf57dfdace4c1516" translate="yes" xml:space="preserve">
          <source>Usage: POSIX::%s(%s)</source>
          <target state="translated">使用法。POSIX::%s(%s)</target>
        </trans-unit>
        <trans-unit id="125a9a7f74a7b0dd6f1033bba99a6fa5c5199974" translate="yes" xml:space="preserve">
          <source>Usage: Win32::%s(%s)</source>
          <target state="translated">使用法。Win32::%s(%s)</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="4f798ffcb78d5a7f233440bdd6c6128bfc8e6fe0" translate="yes" xml:space="preserve">
          <source>Use &quot;%s&quot; instead of &quot;%s&quot;</source>
          <target state="translated">&quot;%s&quot; の代わりに &quot;%s&quot; を使用してください。</target>
        </trans-unit>
        <trans-unit id="82df0013720cd7586b2bc95bd024b2fab925070f" translate="yes" xml:space="preserve">
          <source>Use &quot;opaque&quot; data type for the C types matched by the regular expression, even if these types are &lt;code&gt;typedef&lt;/code&gt; -equivalent to types from typemaps. Should not be used without &lt;b&gt;-x&lt;/b&gt;.</source>
          <target state="translated">正規表現に一致するCの型には、これらの型が &lt;code&gt;typedef&lt;/code&gt; から型マップの型と同等であっても、「不透明」データ型を使用します。&lt;b&gt;-x&lt;/b&gt;なしでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="f821e8c5dcdcc4f25432b67bcb287f73b2058efb" translate="yes" xml:space="preserve">
          <source>Use &quot;opaque&quot; data type for the C types matched by the regular expression, even if these types are &lt;code&gt;typedef&lt;/code&gt;-equivalent to types from typemaps. Should not be used without &lt;b&gt;-x&lt;/b&gt;.</source>
          <target state="translated">これらの型が &lt;code&gt;typedef&lt;/code&gt; と同等である場合でも、正規表現と一致するC型には「不透明」データ型を使用してください。&lt;b&gt;-x&lt;/b&gt;なしで使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3c21be167d639b35ddaa57a08912b97d5e9dff41" translate="yes" xml:space="preserve">
          <source>Use &quot;tie&quot; to open the database.</source>
          <target state="translated">データベースを開くには「TIE」を使用します。</target>
        </trans-unit>
        <trans-unit id="446b95fda0c14dcd166b6b7bb8452cd305935a5c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#is_utf8_string_flags&quot;&gt;&quot;is_utf8_string_flags&quot;&lt;/a&gt;, &lt;a href=&quot;#is_utf8_string_loc_flags&quot;&gt;&quot;is_utf8_string_loc_flags&quot;&lt;/a&gt;, and &lt;a href=&quot;#is_utf8_string_loclen_flags&quot;&gt;&quot;is_utf8_string_loclen_flags&quot;&lt;/a&gt; to check entire strings.</source>
          <target state="translated">使用&lt;a href=&quot;#is_utf8_string_flags&quot;&gt;「is_utf8_string_flags」&lt;/a&gt;、&lt;a href=&quot;#is_utf8_string_loc_flags&quot;&gt;「is_utf8_string_loc_flags」&lt;/a&gt;、および&lt;a href=&quot;#is_utf8_string_loclen_flags&quot;&gt;「is_utf8_string_loclen_flags」&lt;/a&gt;全体の文字列をチェックします。</target>
        </trans-unit>
        <trans-unit id="083bcfc1424d9243fc6a63bfbd611d517b2983c2" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;HTML::Strip&quot;&gt;HTML::Strip&lt;/a&gt;, or &lt;a href=&quot;HTML::FormatText&quot;&gt;HTML::FormatText&lt;/a&gt; which not only removes HTML but also attempts to do a little simple formatting of the resulting plain text.</source>
          <target state="translated">&lt;a href=&quot;HTML::Strip&quot;&gt;HTML :: Strip&lt;/a&gt;または&lt;a href=&quot;HTML::FormatText&quot;&gt;HTML :: FormatText&lt;/a&gt;を使用して、HTMLを削除するだけでなく、結果のプレーンテキストの少し単純なフォーマットを実行しようとします。</target>
        </trans-unit>
        <trans-unit id="138b7329a1d9ab9236d2f4b1f41480a59ad859da" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;Test2::Suite&quot;&gt;Test2::Suite&lt;/a&gt; if at all possible.</source>
          <target state="translated">&lt;a href=&quot;Test2::Suite&quot;&gt;可能であれば、Test2 :: Suiteを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="2a1c34e684465d646570e575678d89d88fa6eded" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;Text::Wrap&quot;&gt;Text::Wrap&lt;/a&gt; (part of the standard Perl distribution):</source>
          <target state="translated">使用&lt;a href=&quot;Text::Wrap&quot;&gt;テキスト::ラップ&lt;/a&gt;（標準のPerlディストリビューションの一部）：</target>
        </trans-unit>
        <trans-unit id="2859b671be05bd5de57f7f8967124d35c1657098" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;carp&quot;&gt;コイを&lt;/a&gt;使う</target>
        </trans-unit>
        <trans-unit id="328b2dd567925d497d9e667189af9a036b40b4b4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt; - wisely!</source>
          <target state="translated">&lt;a href=&quot;exporter&quot;&gt;Exporterを&lt;/a&gt;使用する-賢明に！</target>
        </trans-unit>
        <trans-unit id="4c6d07e8046e85c144f5081da5bd8baf9030e3a5" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Strip&quot;&gt;HTML::Strip&lt;/a&gt;, or &lt;a href=&quot;http://search.cpan.org/perldoc/HTML::FormatText&quot;&gt;HTML::FormatText&lt;/a&gt; which not only removes HTML but also attempts to do a little simple formatting of the resulting plain text.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/HTML::Strip&quot;&gt;HTML :: Strip&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/perldoc/HTML::FormatText&quot;&gt;HTML :: FormatText&lt;/a&gt;を使用します。これは、HTMLを削除するだけでなく、結果として得られるプレーンテキストの簡単なフォーマットも行います。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
