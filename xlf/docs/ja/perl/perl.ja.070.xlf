<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="3f7b2356bc3c6cbdde72802a26b13714fd83fb6c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;perlpod&quot;&gt;plain old documentation&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;perlpod&quot;&gt;プレーンオールドドキュメントを&lt;/a&gt;使用する</target>
        </trans-unit>
        <trans-unit id="a5e2d057fcf298f7072a9c254f5415e3ce42e39e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt; and &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;</source>
          <target state="translated">使用し&lt;a href=&quot;strict&quot;&gt;厳格な&lt;/a&gt;と&lt;a href=&quot;warnings&quot;&gt;警告を&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a5b53467807b9027de0ba1ae32437de79640c9fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;text/wrap&quot;&gt;Text::Wrap&lt;/a&gt; (part of the standard Perl distribution):</source>
          <target state="translated">使用&lt;a href=&quot;text/wrap&quot;&gt;テキスト::ラップ&lt;/a&gt;（標準のPerlディストリビューションの一部）：</target>
        </trans-unit>
        <trans-unit id="87276cc5955780242b6240d9ad22eaa36930d92c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:alias&lt;/code&gt; to give your own lexically scoped nicknames to existing characters, or even to give unnamed private-use characters useful names.</source>
          <target state="translated">&lt;code&gt;:alias&lt;/code&gt; を使用して、独自のレキシカルスコープのニックネームを既存の文字に付けたり、名前のない私用文字に有用な名前を付けたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="fdf71fcf7dcb9c3fbc3fc7c52735a70671018192" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:encoding(ENCODING)&lt;/code&gt; either in open() or binmode() to install a layer that transparently does character set and encoding transformations, for example from Shift-JIS to Unicode. Note that under &lt;code&gt;stdio&lt;/code&gt; an &lt;code&gt;:encoding&lt;/code&gt; also enables &lt;code&gt;:utf8&lt;/code&gt; . See &lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO::encoding&lt;/a&gt; for more information.</source>
          <target state="translated">使用 &lt;code&gt;:encoding(ENCODING)&lt;/code&gt; 透過例えば、シフトJISからUnicodeに文字セットとコード変換を行い、その層をインストールするために、オープン（）またはbinmodeを（）のいずれか。 &lt;code&gt;stdio&lt;/code&gt; では、 &lt;code&gt;:encoding&lt;/code&gt; も &lt;code&gt;:utf8&lt;/code&gt; を有効にすることに注意してください。詳細については、&lt;a href=&quot;perlio/encoding&quot;&gt;PerlIO :: encoding&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0596c7e9304d40616582d7ad418a939b0b569b98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:encoding(ENCODING)&lt;/code&gt; to transparently do character set and encoding transformations, for example from Shift-JIS to Unicode. Note that an &lt;code&gt;:encoding&lt;/code&gt; also enables &lt;code&gt;:utf8&lt;/code&gt;. See &lt;a href=&quot;PerlIO::encoding&quot;&gt;PerlIO::encoding&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;:encoding(ENCODING)&lt;/code&gt; を使用して、Shift-JISからUnicodeなどの文字セットおよびエンコード変換を透過的に実行します。 &lt;code&gt;:encoding&lt;/code&gt; は &lt;code&gt;:utf8&lt;/code&gt; も有効にすることに注意してください。詳細については、&lt;a href=&quot;PerlIO::encoding&quot;&gt;PerlIO :: encoding&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b32751627ad0f538a9c781523741b9c9689a81e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;:via(MODULE)&lt;/code&gt; either in open() or binmode() to install a layer that does whatever transformation (for example compression / decompression, encryption / decryption) to the filehandle. See &lt;a href=&quot;perlio/via&quot;&gt;PerlIO::via&lt;/a&gt; for more information.</source>
          <target state="translated">open（）またはbinmode（ &lt;code&gt;:via(MODULE)&lt;/code&gt; いずれかで：via（MODULE）を使用して、ファイルハンドルへの変換（たとえば、圧縮/解凍、暗号化/復号化）を行うレイヤーをインストールします。詳細については、&lt;a href=&quot;perlio/via&quot;&gt;PerlIO :: via&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9727d6cadefbfc6680b09de2a83ff6897fb06fc4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;#isC9_STRICT_UTF8_CHAR&quot;&gt;&quot;isC9_STRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; to use the &lt;a href=&quot;http://www.unicode.org/versions/corrigendum9.html&quot;&gt;Unicode Corrigendum #9&lt;/a&gt; definition of allowable code points; &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; to check for Perl's extended UTF-8; and &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR_flags&quot;&gt;&quot;isUTF8_CHAR_flags&quot;&lt;/a&gt;&lt;/code&gt; for a more customized definition.</source>
          <target state="translated">使用する &lt;code&gt;&lt;a href=&quot;#isC9_STRICT_UTF8_CHAR&quot;&gt;&quot;isC9_STRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; 使用する&lt;a href=&quot;http://www.unicode.org/versions/corrigendum9.html&quot;&gt;Unicodeの正誤表＃9&lt;/a&gt;許容コードポイントの定義を、Perlの拡張UTF-8をチェックするための &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; 。よりカスタマイズされた定義については、 &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR_flags&quot;&gt;&quot;isUTF8_CHAR_flags&quot;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5bc6bcca8c8291fe091fc5eba0b5c978fb11554d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;#isSTRICT_UTF8_CHAR&quot;&gt;&quot;isSTRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; to restrict the acceptable code points to those defined by Unicode to be fully interchangeable across applications; &lt;code&gt;&lt;a href=&quot;#isC9_STRICT_UTF8_CHAR&quot;&gt;&quot;isC9_STRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; to use the &lt;a href=&quot;http://www.unicode.org/versions/corrigendum9.html&quot;&gt;Unicode Corrigendum #9&lt;/a&gt; definition of allowable code points; and &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR_flags&quot;&gt;&quot;isUTF8_CHAR_flags&quot;&lt;/a&gt;&lt;/code&gt; for a more customized definition.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;#isSTRICT_UTF8_CHAR&quot;&gt;&quot;isSTRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; アプリケーション間で完全に交換可能であることがUnicodeで定義されたものに許容されるコードポイントを制限します。 &lt;code&gt;&lt;a href=&quot;#isC9_STRICT_UTF8_CHAR&quot;&gt;&quot;isC9_STRICT_UTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; は、許容されるコードポイントの&lt;a href=&quot;http://www.unicode.org/versions/corrigendum9.html&quot;&gt;Unicode正誤表＃9&lt;/a&gt;定義を使用します。よりカスタマイズされた定義については、 &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR_flags&quot;&gt;&quot;isUTF8_CHAR_flags&quot;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2594bc53acbb8193156330388d855a8adc6a6ea0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; to check for Perl's extended UTF-8; and &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR_flags&quot;&gt;&quot;isUTF8_CHAR_flags&quot;&lt;/a&gt;&lt;/code&gt; for a more customized definition.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR&quot;&gt;&quot;isUTF8_CHAR&quot;&lt;/a&gt;&lt;/code&gt; Perlの拡張UTF-8をチェックします。よりカスタマイズされた定義については、 &lt;code&gt;&lt;a href=&quot;#isUTF8_CHAR_flags&quot;&gt;&quot;isUTF8_CHAR_flags&quot;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1157d2d20dde5a15fbdf95d65ef85d099140d1ab" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string_loc&quot;&gt;&quot;is_c9strict_utf8_string_loc&quot;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string_loclen&quot;&gt;&quot;is_c9strict_utf8_string_loclen&quot;&lt;/a&gt;&lt;/code&gt; to check entire strings.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string&quot;&gt;&quot;is_c9strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string_loc&quot;&gt;&quot;is_c9strict_utf8_string_loc&quot;&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#is_c9strict_utf8_string_loclen&quot;&gt;&quot;is_c9strict_utf8_string_loclen&quot;&lt;/a&gt;&lt;/code&gt; 全体の文字列をチェックします。</target>
        </trans-unit>
        <trans-unit id="f6aa5f83c56c2fc0dc5608f78102ee88a53475fa" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string_loc&quot;&gt;&quot;is_strict_utf8_string_loc&quot;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string_loclen&quot;&gt;&quot;is_strict_utf8_string_loclen&quot;&lt;/a&gt;&lt;/code&gt; to check entire strings.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string&quot;&gt;&quot;is_strict_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string_loc&quot;&gt;&quot;is_strict_utf8_string_loc&quot;&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#is_strict_utf8_string_loclen&quot;&gt;&quot;is_strict_utf8_string_loclen&quot;&lt;/a&gt;&lt;/code&gt; 全体の文字列をチェックします。</target>
        </trans-unit>
        <trans-unit id="88f540d6d7b5ffa5ec6b09b9a4359e52e070a6b6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#is_utf8_string_loc&quot;&gt;&quot;is_utf8_string_loc&quot;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;&quot;is_utf8_string_loclen&quot;&lt;/a&gt;&lt;/code&gt; to check entire strings.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;#is_utf8_string&quot;&gt;&quot;is_utf8_string&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#is_utf8_string_loc&quot;&gt;&quot;is_utf8_string_loc&quot;&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#is_utf8_string_loclen&quot;&gt;&quot;is_utf8_string_loclen&quot;&lt;/a&gt;&lt;/code&gt; 全体の文字列をチェックします。</target>
        </trans-unit>
        <trans-unit id="5c35f727c8e06fe9ff695531c994a06e6d32367e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; for local variables whenever you can get away with it (but see &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; for where you can't). Using &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; actually gives a local value to a global variable, which leaves you open to unforeseen side-effects of dynamic scoping.</source>
          <target state="translated">ローカル変数に &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my()&lt;/a&gt;&lt;/code&gt; を使用して、それを&lt;a href=&quot;perlform&quot;&gt;回避&lt;/a&gt;できる場合はいつでも使用できます（ただし、できない場所についてはperlformを参照してください）。 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; を使用すると、実際にはグローバル変数にローカル値が与えられ、動的スコープの予期しない副作用が発生します。</target>
        </trans-unit>
        <trans-unit id="c47d329f16fdbd745016d298559c2d16104952e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt;, or else &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; and the bitwise operations.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; 、または他の &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; とビット演算。</target>
        </trans-unit>
        <trans-unit id="e7d6c1efbb4fe6ed3d0e44682a7fdfcad4845a94" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; to go from several pieces of data to one fixed-width version; use &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; to turn a fixed-width-format string into several pieces of data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; を使用して、複数のデータから1つの固定幅バージョンに移動します。 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用して、固定幅形式の文字列をいくつかのデータに変換します。</target>
        </trans-unit>
        <trans-unit id="8fbc052d865293ed23949ab2e7f416dfadd5a776" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse()&lt;/a&gt;&lt;/code&gt; in scalar context, as documented in &lt;a href=&quot;functions/reverse&quot;&gt;reverse&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/reverse&quot;&gt;reverse()&lt;/a&gt;&lt;/code&gt; 説明されているように、スカラーコンテキストでreverse（）を使用し&lt;a href=&quot;functions/reverse&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="27ae995888d29f8142b3c2932bd24cab6ea87cf6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@CARP_NOT&lt;/code&gt; , instead of &lt;code&gt;$Carp::CarpLevel&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$Carp::CarpLevel&lt;/code&gt; 代わりに &lt;code&gt;@CARP_NOT&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="606cd34efaddb2638df681f99b6af26a22978dd9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;@CARP_NOT&lt;/code&gt;, instead of &lt;code&gt;$Carp::CarpLevel&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$Carp::CarpLevel&lt;/code&gt; 代わりに &lt;code&gt;@CARP_NOT&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="92183967ac97249aea7bc977e218502508a51699" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;NDBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function to establish the connection between the variable and the file. The arguments to &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; should be:</source>
          <target state="translated">変数とファイル間の接続を確立するには、Perlの組み込み &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数で &lt;code&gt;NDBM_File&lt;/code&gt; を使用します。 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; の引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c0f242fee978e3dcd99181c765d0434e5812cdd5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;NDBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;tie&lt;/code&gt; function to establish the connection between the variable and the file. The arguments to &lt;code&gt;tie&lt;/code&gt; should be:</source>
          <target state="translated">Perl組み込みの &lt;code&gt;tie&lt;/code&gt; 関数で &lt;code&gt;NDBM_File&lt;/code&gt; を使用して、変数とファイルの間の接続を確立します。 &lt;code&gt;tie&lt;/code&gt; 引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9423ac1af551ac690aef0474203af36011c9817e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ODBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;tie&lt;/code&gt; function to establish the connection between the variable and the file. The arguments to &lt;code&gt;tie&lt;/code&gt; should be:</source>
          <target state="translated">Perl組み込みの &lt;code&gt;tie&lt;/code&gt; 関数で &lt;code&gt;ODBM_File&lt;/code&gt; を使用して、変数とファイルの間の接続を確立します。 &lt;code&gt;tie&lt;/code&gt; 引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a39f53bf0801332ad81a8e20b727e708ddef3b6b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Role::Tiny&lt;/code&gt; with &lt;code&gt;Class::Accessor&lt;/code&gt; or &lt;code&gt;Class::Tiny&lt;/code&gt; if you find yourself considering multiple inheritance. If you go with &lt;code&gt;Moose&lt;/code&gt; , it comes with its own role implementation.</source>
          <target state="translated">多重継承を検討している場合は、 &lt;code&gt;Class::Accessor&lt;/code&gt; または &lt;code&gt;Class::Tiny&lt;/code&gt; &lt;code&gt;Role::Tiny&lt;/code&gt; を使用します。 &lt;code&gt;Moose&lt;/code&gt; を使用する場合、独自のロール実装が付属しています。</target>
        </trans-unit>
        <trans-unit id="fabbc51b5191f6f0947ec18c66a1a930b3727711" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Role::Tiny&lt;/code&gt; with &lt;code&gt;Class::Accessor&lt;/code&gt; or &lt;code&gt;Class::Tiny&lt;/code&gt; if you find yourself considering multiple inheritance. If you go with &lt;code&gt;Moose&lt;/code&gt;, it comes with its own role implementation.</source>
          <target state="translated">多重継承を検討している場合は、 &lt;code&gt;Role::Tiny&lt;/code&gt; と &lt;code&gt;Class::Accessor&lt;/code&gt; または &lt;code&gt;Class::Tiny&lt;/code&gt; :: Tinyを使用してください。あなたが一緒に行く場合 &lt;code&gt;Moose&lt;/code&gt; 、それは自身の役割の実装が付属しています。</target>
        </trans-unit>
        <trans-unit id="0f06b5eddbf8d97d651f4831a1beb13b8718c8d6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;SDBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function to establish the connection between the variable and the file.</source>
          <target state="translated">&lt;code&gt;SDBM_File&lt;/code&gt; をPerlの組み込み &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 関数とともに使用して、変数とファイルの間の接続を確立します。</target>
        </trans-unit>
        <trans-unit id="ae2becc725210179bc532cf645f737467fa7ad50" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;SDBM_File&lt;/code&gt; with the Perl built-in &lt;code&gt;tie&lt;/code&gt; function to establish the connection between the variable and the file.</source>
          <target state="translated">変数とファイル間の接続を確立するには、Perl組み込みの &lt;code&gt;tie&lt;/code&gt; 関数で &lt;code&gt;SDBM_File&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="dd5ddb92a2e87aa696e71c88822af794ba04ff5b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; instead.</source>
          <target state="translated">代わりに &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5709fd5fee3c8f65a9f2b5ff4443b46d700ffd8b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;error&lt;/code&gt; to trap all that is reasonable (problems with permissions and the like), and let it die if things get out of hand. This is the safest course of action.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; を使用して、妥当なものすべて（アクセス権などの問題）をトラップし、手に負えなくなった場合にエラーを終了させます。これが最も安全な行動方針です。</target>
        </trans-unit>
        <trans-unit id="a7ae97b4dc032127dbdf525b36f3287eea7a74cc" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for&lt;/code&gt; /&lt;code&gt;foreach&lt;/code&gt; :</source>
          <target state="translated">使用 &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;foreach&lt;/code&gt; の：</target>
        </trans-unit>
        <trans-unit id="55bdf440a9f723ee43aebb77971d2e3eb2db4e84" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;foreach&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;for&lt;/code&gt; / &lt;code&gt;foreach&lt;/code&gt; の：</target>
        </trans-unit>
        <trans-unit id="9c996433c1b1c526a5c995da04a118c0ab560ab7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;my()&lt;/code&gt; for local variables whenever you can get away with it (but see &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; for where you can't). Using &lt;code&gt;local()&lt;/code&gt; actually gives a local value to a global variable, which leaves you open to unforeseen side-effects of dynamic scoping.</source>
          <target state="translated">ローカル変数には &lt;code&gt;my()&lt;/code&gt; を使用してください（ただし、実行できない場合は&lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;を参照してください）。 &lt;code&gt;local()&lt;/code&gt; を使用すると、実際にはグローバル変数にローカル値が与えられ、動的スコープの予期しない副作用が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7373cbc173d8d72760b4d82b2e0cd717919a95b3" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;pack()&lt;/code&gt; and &lt;code&gt;unpack()&lt;/code&gt;, or else &lt;code&gt;vec()&lt;/code&gt; and the bitwise operations.</source>
          <target state="translated">&lt;code&gt;pack()&lt;/code&gt; と &lt;code&gt;unpack()&lt;/code&gt; を使用するか、 &lt;code&gt;vec()&lt;/code&gt; とビット演算を使用します。</target>
        </trans-unit>
        <trans-unit id="9088d71cb197707818e551ff66050ee4db9e30a5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;pack&lt;/code&gt; to go from several pieces of data to one fixed-width version; use &lt;code&gt;unpack&lt;/code&gt; to turn a fixed-width-format string into several pieces of data.</source>
          <target state="translated">&lt;code&gt;pack&lt;/code&gt; を使用して、複数のデータから1つの固定幅バージョンに移行します。 &lt;code&gt;unpack&lt;/code&gt; を使用して、固定幅形式の文字列をいくつかのデータに変換します。</target>
        </trans-unit>
        <trans-unit id="39f6d6f105dad51bdc7b3be73deb4316e5aa1573" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;reverse()&lt;/code&gt; in scalar context, as documented in &lt;a href=&quot;perlfunc#reverse&quot;&gt;&quot;reverse&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlfunc#reverse&quot;&gt;perlfuncの「reverse」に&lt;/a&gt;記載されているように、スカラーコンテキストで &lt;code&gt;reverse()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="42448f158fc4cf33aed96fb909d73152cfab8a01" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;sv_pos_b2u_flags&lt;/code&gt; in preference, which correctly handles strings longer than 2Gb.</source>
          <target state="translated">2Gbより長い文字列を正しく処理する &lt;code&gt;sv_pos_b2u_flags&lt;/code&gt; を優先的に使用します。</target>
        </trans-unit>
        <trans-unit id="7227aee0b7448cf59bbacaf7f7fdbecd1aac240b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;sv_pos_u2b_flags&lt;/code&gt; in preference, which correctly handles strings longer than 2Gb.</source>
          <target state="translated">2Gbより長い文字列を正しく処理する &lt;code&gt;sv_pos_u2b_flags&lt;/code&gt; を優先的に使用します。</target>
        </trans-unit>
        <trans-unit id="f5cc90bbf1f42a53e21bdba9821c29aadf03b587" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;undef&lt;/code&gt; as the first parameter to this function to get the effect of passing NULL as the first parameter to &lt;code&gt;mblen&lt;/code&gt;. This resets any shift state to its initial value. The return value is undefined if &lt;code&gt;mbrlen&lt;/code&gt; was substituted, so you should never rely on it.</source>
          <target state="translated">この関数の最初のパラメーターとして &lt;code&gt;undef&lt;/code&gt; を使用して、 &lt;code&gt;mblen&lt;/code&gt; への最初のパラメーターとしてNULLを渡す効果を取得します。これにより、シフト状態が初期値にリセットされます。 &lt;code&gt;mbrlen&lt;/code&gt; が代用された場合、戻り値は未定義であるため、決して信頼しないでください。</target>
        </trans-unit>
        <trans-unit id="f392458fbcc15b0a14e0e135484e6100755568d8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;undef&lt;/code&gt; as the first parameter to this function to get the effect of passing NULL as the first parameter to &lt;code&gt;wctomb&lt;/code&gt;. This resets any shift state to its initial value. The return value is undefined if &lt;code&gt;wcrtomb&lt;/code&gt; was substituted, so you should never rely on it.</source>
          <target state="translated">この関数の最初のパラメーターとして &lt;code&gt;undef&lt;/code&gt; を使用して、 &lt;code&gt;wctomb&lt;/code&gt; への最初のパラメーターとしてNULLを渡す効果を取得します。これにより、シフト状態が初期値にリセットされます。 &lt;code&gt;wcrtomb&lt;/code&gt; が代用された場合、戻り値は未定義であるため、決して信頼しないでください。</target>
        </trans-unit>
        <trans-unit id="ad3b928d47a6b3cc4fc01ca2a0f7d31491bc6c38" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;undef&lt;/code&gt; as the second parameter to this function to get the effect of passing NULL as the second parameter to &lt;code&gt;mbtowc&lt;/code&gt;. This resets any shift state to its initial value. The return value is undefined if &lt;code&gt;mbrtowc&lt;/code&gt; was substituted, so you should never rely on it.</source>
          <target state="translated">この関数の2番目のパラメーターとして &lt;code&gt;undef&lt;/code&gt; を使用して、 &lt;code&gt;mbtowc&lt;/code&gt; への2番目のパラメーターとしてNULLを渡す効果を取得します。これにより、シフト状態が初期値にリセットされます。 &lt;code&gt;mbrtowc&lt;/code&gt; が代用された場合、戻り値は未定義であるため、決して信頼しないでください。</target>
        </trans-unit>
        <trans-unit id="9174053d497c0bac4b0650a86818fe94eb1cad92" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;utf8::encode()&lt;/code&gt; instead.</source>
          <target state="translated">代わりに &lt;code&gt;utf8::encode()&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="e974bf00a2d723dec73908b097ca121c9409a8e4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;~pattern&lt;/code&gt; and &lt;code&gt;!pattern&lt;/code&gt; for positive and negative regexes.</source>
          <target state="translated">使用 &lt;code&gt;~pattern&lt;/code&gt; と &lt;code&gt;!pattern&lt;/code&gt; 正と負の正規表現のために。</target>
        </trans-unit>
        <trans-unit id="061b1dc7990493487dde420be8fe1d319fffab9e" translate="yes" xml:space="preserve">
          <source>Use CPAN::SQLite if available? (yes/no)?</source>
          <target state="translated">CPAN::SQLiteが利用可能な場合は使用しますか?(はい/いいえ)?</target>
        </trans-unit>
        <trans-unit id="714325381beb635775804a746adac93cfa93686a" translate="yes" xml:space="preserve">
          <source>Use Internet-domain sockets when you want to do client-server communication that might extend to machines outside of your own system.</source>
          <target state="translated">自分のシステムの外にあるマシンにまで及ぶ可能性のあるクライアント-サーバ通信を行いたい場合には、インターネットドメインソケットを使用します。</target>
        </trans-unit>
        <trans-unit id="0b9b3669dfa437dd595e2562fc06d4aa9b5c2435" translate="yes" xml:space="preserve">
          <source>Use MM[SK] macros, and VMS command line for C compiler.</source>
          <target state="translated">CコンパイラではMM[SK]マクロ、VMSコマンドラインを使用します。</target>
        </trans-unit>
        <trans-unit id="ea4874b782f37efa4adbe580d7fbd195de341f05" translate="yes" xml:space="preserve">
          <source>Use MM[SK] macros.</source>
          <target state="translated">MM[SK]マクロを使用します。</target>
        </trans-unit>
        <trans-unit id="566b4db3c362df6b71e0ff5dee0038deb7684d52" translate="yes" xml:space="preserve">
          <source>Use MakeMaker's uninstalled version of a package</source>
          <target state="translated">MakeMakerのアンインストール版のパッケージを使用する</target>
        </trans-unit>
        <trans-unit id="4f9fabedc3012949759d8b318f59e8e1f7ac6a68" translate="yes" xml:space="preserve">
          <source>Use Rule 1</source>
          <target state="translated">ルール1を使用する</target>
        </trans-unit>
        <trans-unit id="d30cb9c4b707a0ea6318459e09b4f950a7aa56ec" translate="yes" xml:space="preserve">
          <source>Use Rule 2</source>
          <target state="translated">ルール2を使用する</target>
        </trans-unit>
        <trans-unit id="8e0e5dba70a90f698d3e0ca5e61baef285d0f01f" translate="yes" xml:space="preserve">
          <source>Use VMS Link command.</source>
          <target state="translated">VMS Linkコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="280948ed6505d39690e8bfb21e155eff171d0ef1" translate="yes" xml:space="preserve">
          <source>Use VMS commands to manipulate object library.</source>
          <target state="translated">VMSコマンドを使用してオブジェクトライブラリを操作します。</target>
        </trans-unit>
        <trans-unit id="bda9ca770225246f2160551c7450fb9367f1b262" translate="yes" xml:space="preserve">
          <source>Use VMS file specification syntax and CLI commands to find and invoke Perl images.</source>
          <target state="translated">VMSファイル指定構文とCLIコマンドを使用して、Perlイメージを検索して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ede73fbf3b4744edf3efb586d91835b3d9ad9918" translate="yes" xml:space="preserve">
          <source>Use VMS syntax on command line. In particular, $(DEFINE) and $(PERL_INC) have been pulled into $(CCCMD). Also use MM[SK] macros.</source>
          <target state="translated">コマンドラインでVMSの構文を使用します。特に、$(DEFINE)と$(PERL_INC)は、$(CCCMD)に引っ張られています。また、MM[SK]マクロも使用してください。</target>
        </trans-unit>
        <trans-unit id="b04910f58b3601dbb3123084b8efe1db2f3112cb" translate="yes" xml:space="preserve">
          <source>Use VMS-style syntax for files; it's cheaper to just do it directly here than to have the &lt;a href=&quot;ExtUtils::MM_Unix&quot;&gt;MM_Unix&lt;/a&gt; method call &lt;code&gt;catfile&lt;/code&gt; repeatedly. Also, if we have to rebuild Config.pm, use MM[SK] to do it.</source>
          <target state="translated">ファイルにはVMSスタイルの構文を使用します。&lt;a href=&quot;ExtUtils::MM_Unix&quot;&gt;MM_Unix&lt;/a&gt;メソッドで &lt;code&gt;catfile&lt;/code&gt; を繰り返し呼び出すよりも、ここで直接実行する方が安価です。また、Config.pmを再構築する必要がある場合は、MM [SK]を使用して再構築します。</target>
        </trans-unit>
        <trans-unit id="691de1dabff4e93d09d661b351d70e27dc9a3c25" translate="yes" xml:space="preserve">
          <source>Use VMS-style syntax for files; it's cheaper to just do it directly here than to have the MM_Unix method call &lt;code&gt;catfile&lt;/code&gt; repeatedly. Also, if we have to rebuild Config.pm, use MM[SK] to do it.</source>
          <target state="translated">ファイルにはVMSスタイルの構文を使用します。MM_Unixメソッドに &lt;code&gt;catfile&lt;/code&gt; を繰り返し呼び出させるよりも、ここで直接実行する方が安上がりです。また、Config.pmを再構築する必要がある場合は、MM [SK]を使用して再構築します。</target>
        </trans-unit>
        <trans-unit id="9e7289d77337b52e3e101220e2c02359e9406ba1" translate="yes" xml:space="preserve">
          <source>Use \x{...} for more than two hex characters in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の3つ以上の16進文字には\ x {...}を使用します。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="21386b7269a32025e94fbc169460c22c01ed7e1f" translate="yes" xml:space="preserve">
          <source>Use a collator object to compare Unicode text by character instead of by codepoint.</source>
          <target state="translated">Unicode テキストをコードポイントではなく、文字ごとに比較するには、照合子オブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="af5688754fcfe001260b97f3d6228bac17ab8a5e" translate="yes" xml:space="preserve">
          <source>Use a command-line option, an environment variable, or else call &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; explicitly:</source>
          <target state="translated">コマンドラインオプション、環境変数を使用するか、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を明示的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="86512cacbdfebef905eeab5b1d6bac9c2f54b06e" translate="yes" xml:space="preserve">
          <source>Use a command-line option, an environment variable, or else call &lt;code&gt;binmode&lt;/code&gt; explicitly:</source>
          <target state="translated">コマンドラインオプション、環境変数を使用するか、 &lt;code&gt;binmode&lt;/code&gt; を明示的に呼び出します。</target>
        </trans-unit>
        <trans-unit id="ba762ed342f4cf062ad179e99538aaf1e4c1ae60" translate="yes" xml:space="preserve">
          <source>Use a hash. Here's code to do both and more. It assumes that each element is unique in a given array:</source>
          <target state="translated">ハッシュを使用します。以下はその両方とそれ以上を行うコードです。これは、与えられた配列の各要素が一意であることを前提としています。</target>
        </trans-unit>
        <trans-unit id="271eac68025544545b6b8cda21c48f10de3e2be3" translate="yes" xml:space="preserve">
          <source>Use a hash. When you think the words &quot;unique&quot; or &quot;duplicated&quot;, think &quot;hash keys&quot;.</source>
          <target state="translated">ハッシュを使う。ユニーク」や「複製」という言葉を思い浮かべたら、「ハッシュキー」を思い浮かべてみてください。</target>
        </trans-unit>
        <trans-unit id="fb4ec017e331a31a5b1abaea84089100f3dba15e" translate="yes" xml:space="preserve">
          <source>Use a sort helper function</source>
          <target state="translated">ソートヘルパー機能を使う</target>
        </trans-unit>
        <trans-unit id="f616a684cd386a4ea767461805601287970f5579" translate="yes" xml:space="preserve">
          <source>Use a tree format in which the minimum amount of space is used for the lines connecting nodes (one character in most cases). This squeezes out a few precious columns of screen real estate.</source>
          <target state="translated">ツリー形式を使用して、ノードを結ぶ線に最小のスペースを使用します(ほとんどの場合は1文字)。これにより、画面上の貴重な列が少なくなります。</target>
        </trans-unit>
        <trans-unit id="5882a02b6e19732df1aac03e7c042980b0e32ff8" translate="yes" xml:space="preserve">
          <source>Use a tree format that uses longer edges to separate OP nodes. This format tends to look better than the compact one, especially in ASCII, and is the default.</source>
          <target state="translated">OP ノードを分離するために長いエッジを使用するツリー形式を使用します。この形式は、特にASCIIではコンパクトな形式よりも見栄えが良くなる傾向があり、デフォルトで使用されています。</target>
        </trans-unit>
        <trans-unit id="4b48f7ca244968605d46dde3055bd12f89577678" translate="yes" xml:space="preserve">
          <source>Use an alpha/beta style version number. Causes version number to be &quot;0.00_01&quot; unless &lt;b&gt;-v&lt;/b&gt; is specified.</source>
          <target state="translated">アルファ/ベータスタイルのバージョン番号を使用します。&lt;b&gt;-v&lt;/b&gt;が指定されていない限り、バージョン番号は「0.00_01」になります。</target>
        </trans-unit>
        <trans-unit id="6134c36e04029ff2453cb542046305a1f937b7f5" translate="yes" xml:space="preserve">
          <source>Use an alternate output format that, among other things, uses a different heading style and marks &lt;code&gt;=item&lt;/code&gt; entries with a colon in the left margin.</source>
          <target state="translated">特に、異なる見出しスタイルを使用し、左マージンにコロンを付けて &lt;code&gt;=item&lt;/code&gt; エントリーをマークする代替出力フォーマットを使用します。</target>
        </trans-unit>
        <trans-unit id="dcdeb0b163229c6ff03de5a0cdb9e6a57a7ea002" translate="yes" xml:space="preserve">
          <source>Use an index if it is present. The &lt;b&gt;-X&lt;/b&gt; option looks for an entry whose basename matches the name given on the command line in the file &lt;code&gt;$Config{archlib}/pod.idx&lt;/code&gt; . The</source>
          <target state="translated">存在する場合はインデックスを使用します。&lt;b&gt;-X&lt;/b&gt;ベース名のファイルにコマンドラインで指定された名前と一致するエントリのオプションルックス &lt;code&gt;$Config{archlib}/pod.idx&lt;/code&gt; 。の</target>
        </trans-unit>
        <trans-unit id="ef5fba3e097676146fd184d39f8ee78df4f9bf53" translate="yes" xml:space="preserve">
          <source>Use an index if it is present. The &lt;b&gt;-X&lt;/b&gt; option looks for an entry whose basename matches the name given on the command line in the file &lt;code&gt;$Config{archlib}/pod.idx&lt;/code&gt;. The</source>
          <target state="translated">インデックスが存在する場合はそれを使用します。&lt;b&gt;-X&lt;/b&gt;ベース名のファイルにコマンドラインで指定された名前と一致するエントリのオプションルックス &lt;code&gt;$Config{archlib}/pod.idx&lt;/code&gt; 。ザ・</target>
        </trans-unit>
        <trans-unit id="ae7e5fe5c728700cd50b3c52c6ee63480235da37" translate="yes" xml:space="preserve">
          <source>Use as separator a character which is legal in a VMS-syntax file name.</source>
          <target state="translated">VMS-syntaxファイル名で有効な文字をセパレータとして使用します。</target>
        </trans-unit>
        <trans-unit id="672a1c76642ee42c51ebfa65fd5a5d1a95399678" translate="yes" xml:space="preserve">
          <source>Use autosplit so little used or newly added functions won't be a burden to programs that don't use them. Add test functions to the module after __END__ either using AutoSplit or by saying:</source>
          <target state="translated">ほとんど使わない関数や新しく追加された関数が、それらを使わないプログラムの負担にならないように、オートスプリットを使用してください。モジュールにテスト関数を追加するには、オートスプリットを使用するか、あるいは、こう言ってください。</target>
        </trans-unit>
        <trans-unit id="317a05001ebb0c43c5b2e6eaa3b070114b0ab11b" translate="yes" xml:space="preserve">
          <source>Use blessed references. Use the two argument form of bless to bless into the class name given as the first parameter of the constructor, e.g.,:</source>
          <target state="translated">bless された参照を使用します。bless の 2 つの引数形式を使用して、コンストラクタの最初のパラメータとして与えられたクラス名を bless します。</target>
        </trans-unit>
        <trans-unit id="ec95e04beca28ff76c489858d434dba58b46f4b7" translate="yes" xml:space="preserve">
          <source>Use both global and lexical variables.</source>
          <target state="translated">グローバル変数と語彙変数の両方を使用します。</target>
        </trans-unit>
        <trans-unit id="3ec0b24d1442368e951d28938a31c4007d000691" translate="yes" xml:space="preserve">
          <source>Use formatting conventions in which the name of each OP, rather than being written out in full, is represented by a one- or two-character abbreviation. This is mainly a joke.</source>
          <target state="translated">各OPの名前は、全文を書き出すのではなく、1文字または2文字の略語で表すような書式を使用してください。これは主に冗談です。</target>
        </trans-unit>
        <trans-unit id="32e0435d286f4e0f5dea4e605f6ba74b7a19693a" translate="yes" xml:space="preserve">
          <source>Use formatting conventions read from the environment variables &lt;code&gt;B_CONCISE_FORMAT&lt;/code&gt; , &lt;code&gt;B_CONCISE_GOTO_FORMAT&lt;/code&gt; , and &lt;code&gt;B_CONCISE_TREE_FORMAT&lt;/code&gt; .</source>
          <target state="translated">環境変数 &lt;code&gt;B_CONCISE_FORMAT&lt;/code&gt; 、 &lt;code&gt;B_CONCISE_GOTO_FORMAT&lt;/code&gt; 、および &lt;code&gt;B_CONCISE_TREE_FORMAT&lt;/code&gt; から読み取ったフォーマット規則を使用します。</target>
        </trans-unit>
        <trans-unit id="e2b1ef34038ed8dfe09f9371921208e861dec82e" translate="yes" xml:space="preserve">
          <source>Use formatting conventions read from the environment variables &lt;code&gt;B_CONCISE_FORMAT&lt;/code&gt;, &lt;code&gt;B_CONCISE_GOTO_FORMAT&lt;/code&gt;, and &lt;code&gt;B_CONCISE_TREE_FORMAT&lt;/code&gt;.</source>
          <target state="translated">環境変数 &lt;code&gt;B_CONCISE_FORMAT&lt;/code&gt; 、 &lt;code&gt;B_CONCISE_GOTO_FORMAT&lt;/code&gt; 、および &lt;code&gt;B_CONCISE_TREE_FORMAT&lt;/code&gt; から読み取られたフォーマット規則を使用します。</target>
        </trans-unit>
        <trans-unit id="4fae2a54363441130a92de76cae86f65e4405daf" translate="yes" xml:space="preserve">
          <source>Use formatting conventions reminiscent of &lt;b&gt;B::Debug&lt;/b&gt;; these aren't very concise at all.</source>
          <target state="translated">&lt;b&gt;B :: Debugを&lt;/b&gt;連想させるフォーマット規則を使用します。これらはまったく簡潔ではありません。</target>
        </trans-unit>
        <trans-unit id="ece1c683b89e2113c24ec60abd248372293805ff" translate="yes" xml:space="preserve">
          <source>Use formatting conventions reminiscent of CPAN module &lt;b&gt;B::Debug&lt;/b&gt;; these aren't very concise at all.</source>
          <target state="translated">CPANモジュール&lt;b&gt;B :: Debugを&lt;/b&gt;彷彿とさせるフォーマット規則を使用します。これらはまったく簡潔ではありません。</target>
        </trans-unit>
        <trans-unit id="60e51473a2aeb572e34290de332f54db3103274f" translate="yes" xml:space="preserve">
          <source>Use formatting conventions that emulate the output of &lt;b&gt;B::Terse&lt;/b&gt;. The basic mode is almost indistinguishable from the real &lt;b&gt;B::Terse&lt;/b&gt;, and the exec mode looks very similar, but is in a more logical order and lacks curly brackets. &lt;b&gt;B::Terse&lt;/b&gt; doesn't have a tree mode, so the tree mode is only vaguely reminiscent of &lt;b&gt;B::Terse&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;B :: Terseの&lt;/b&gt;出力をエミュレートするフォーマット規則を使用します。基本モードは実際の&lt;b&gt;B :: Terse&lt;/b&gt;とほとんど区別がつかず、execモードは非常によく似ていますが、より論理的な順序であり、中括弧がありません。&lt;b&gt;B :: Terseに&lt;/b&gt;はツリーモードがないため、ツリーモードは&lt;b&gt;B :: Terseを&lt;/b&gt;漠然と連想させるだけです。</target>
        </trans-unit>
        <trans-unit id="05e7e7257def62f44171c1ab5e1ea5739af490a1" translate="yes" xml:space="preserve">
          <source>Use grok_atoUV() instead. atoi() has ill-defined behavior on overflows, and cannot be used for incremental parsing. It is also affected by locale, which is bad.</source>
          <target state="translated">代わりに grok_atoUV()を使用してください。 atoi()はオーバーフロー時の挙動が不明確で、インクリメンタル解析には使用できません。また、ロケールの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="49bfe15faf704565402bc75b321564e7f1a0847e" translate="yes" xml:space="preserve">
          <source>Use grok_atoUV() instead. strtol() or strtoul() (or their IV/UV-friendly macro disguises, Strtol() and Strtoul(), or Atol() and Atoul() are affected by locale, which is bad.</source>
          <target state="translated">代わりに grok_atoUV()を使ってください。 strtol()や strtoul()(あるいはそれらの IV/UV に優しいマクロの偽装である Strtol()や Strtoul()、Atol()や Atoul()はロケールの影響を受けますが、これは良くありません。</target>
        </trans-unit>
        <trans-unit id="fec2179657e1b299044343e0b89c5b33f2055639" translate="yes" xml:space="preserve">
          <source>Use here documents instead of repeated &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; statements.</source>
          <target state="translated">繰り返し &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; ステートメントの代わりにhereドキュメントを使用します。</target>
        </trans-unit>
        <trans-unit id="c440dc86e72fbc8e04ff6164f2628ef826b387c3" translate="yes" xml:space="preserve">
          <source>Use here documents instead of repeated &lt;code&gt;print()&lt;/code&gt; statements.</source>
          <target state="translated">繰り返される &lt;code&gt;print()&lt;/code&gt; ステートメントの代わりにヒアドキュメントを使用してください。</target>
        </trans-unit>
        <trans-unit id="7408313f5feae22d66298e9df35a5c92afed0d81" translate="yes" xml:space="preserve">
          <source>Use integer arithmetic instead of floating point</source>
          <target state="translated">浮動小数点の代わりに整数演算を使用</target>
        </trans-unit>
        <trans-unit id="4a2d0c065aebe88058e7899fe2b03390f5fd9ac8" translate="yes" xml:space="preserve">
          <source>Use it as follows:</source>
          <target state="translated">以下のように使用してください。</target>
        </trans-unit>
        <trans-unit id="0e4377f0ebd8feae0e428e1f69f4b88e9fe92f50" translate="yes" xml:space="preserve">
          <source>Use map and grep selectively</source>
          <target state="translated">map と grep を選択的に使用する</target>
        </trans-unit>
        <trans-unit id="0f2153ef63f7f49f92d87613b8e6086727534be7" translate="yes" xml:space="preserve">
          <source>Use mkstemp() instead.</source>
          <target state="translated">代わりに mkstemp()を使用してください。</target>
        </trans-unit>
        <trans-unit id="9d215af52eba1c24168d3668f703076a6c44c6c8" translate="yes" xml:space="preserve">
          <source>Use mstat() function to emit a memory state statistic to the terminal. For more information on the format of output of mstat() see &lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;Using $ENV{PERL_DEBUG_MSTATS} in perldebguts&lt;/a&gt;.</source>
          <target state="translated">mstat（）関数を使用して、メモリ状態統計を端末に送信します。mstat（）の出力形式の詳細については、perldebgutsでの&lt;a href=&quot;../perldebguts#Using-%24ENV%7bPERL_DEBUG_MSTATS%7d&quot;&gt;$ ENV {PERL_DEBUG_MSTATS}の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9090f5fa82f58c70e0a393ca1899abc0c7f56518" translate="yes" xml:space="preserve">
          <source>Use mstat() function to emit a memory state statistic to the terminal. For more information on the format of output of mstat() see &lt;a href=&quot;perldebguts#Using-%24ENV%7BPERL_DEBUG_MSTATS%7D&quot;&gt;&quot;Using $ENV{PERL_DEBUG_MSTATS}&quot; in perldebguts&lt;/a&gt;.</source>
          <target state="translated">mstat（）関数を使用して、メモリ状態統計を端末に送信します。mstat（）の出力形式の詳細については、perldebgutsの&lt;a href=&quot;perldebguts#Using-%24ENV%7BPERL_DEBUG_MSTATS%7D&quot;&gt;「$ ENV {PERL_DEBUG_MSTATS}の使用」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="531c130b925ffd3120eb898dd244351239e437cf" translate="yes" xml:space="preserve">
          <source>Use my_strlcpy() and my_strlcat() instead: they either use the native implementation, or Perl's own implementation (borrowed from the public domain implementation of INN).</source>
          <target state="translated">代わりに my_strlcpy()と my_strlcat()を使用してください:これらはネイティブの実装を使用するか、Perl の独自の実装 (INN のパブリックドメイン実装から借用)を使用します。</target>
        </trans-unit>
        <trans-unit id="2c9671db7475e8358c84b51b41af26939a79a05c" translate="yes" xml:space="preserve">
          <source>Use named parameters (a hash or hashref) when there are more than two parameters</source>
          <target state="translated">2つ以上のパラメータがある場合は、名前付きパラメータ(ハッシュまたはハッシュリフ)を使用します。</target>
        </trans-unit>
        <trans-unit id="6b1ab005a876449dcff824693329635ee0415484" translate="yes" xml:space="preserve">
          <source>Use named parameters. It's easier to use a hash like this:</source>
          <target state="translated">名前付きのパラメータを使用します。このようにハッシュを使った方が簡単です。</target>
        </trans-unit>
        <trans-unit id="a7996c874ba5c6e6417be6c43ab584f3aaff6022" translate="yes" xml:space="preserve">
          <source>Use nice English (or awk) names for ugly punctuation variables</source>
          <target state="translated">醜い句読点変数には、素敵な英語(または awk)の名前を使用してください。</target>
        </trans-unit>
        <trans-unit id="8d5397d217e6f86d4205c68445ae6f732da49e78" translate="yes" xml:space="preserve">
          <source>Use non-standard idioms (otherwise you are not testing TIMTOWTDI).</source>
          <target state="translated">非標準のイディオムを使用してください(そうでなければTIMTOWTDIをテストしていません)。</target>
        </trans-unit>
        <trans-unit id="6d784f6b71c910742ddb8c39366085d5eaa6b49a" translate="yes" xml:space="preserve">
          <source>Use of &quot;goto&quot; to jump into a construct is deprecated</source>
          <target state="translated">コンストラクトにジャンプするための &quot;goto&quot; の使用は推奨されていません。</target>
        </trans-unit>
        <trans-unit id="65c0ad194f86ef8c82abcd714574628241a1c276" translate="yes" xml:space="preserve">
          <source>Use of %s for non-UTF-8 locale is wrong. Assuming a UTF-8 locale</source>
          <target state="translated">UTF-8以外のロケールでの%sの使用は誤りです。UTF-8ロケールを仮定した場合</target>
        </trans-unit>
        <trans-unit id="bebafaa19d6fe670acf22d1cc6a431b641b74e89" translate="yes" xml:space="preserve">
          <source>Use of %s in printf format not supported</source>
          <target state="translated">printf 形式での %s の使用はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b4ca242f9217b9ece62afdc3280e0c2f1ce89fd5" translate="yes" xml:space="preserve">
          <source>Use of %s is not allowed in Unicode property wildcard subpatterns in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現のUnicodeプロパティワイルドカードサブパターンでは、％sの使用は許可されていません。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="1a7a3eef2bfbbb30c9188767c64177f8e00781d5" translate="yes" xml:space="preserve">
          <source>Use of %s on a handle without * is deprecated</source>
          <target state="translated">を含まないハンドルで %s を使用することは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="2a7c4737dfee83ab37645e9a00338ed68db9aa94" translate="yes" xml:space="preserve">
          <source>Use of '%s' in \p{} or \P{} is deprecated because: %s</source>
          <target state="translated">s' の使用は推奨されていません。%s</target>
        </trans-unit>
        <trans-unit id="7c751876ef69d38b0b6a8bd312f51c65ad7867cd" translate="yes" xml:space="preserve">
          <source>Use of *glob{FILEHANDLE}</source>
          <target state="translated">glob{FILEHANDLE}の使用</target>
        </trans-unit>
        <trans-unit id="baf1d32e71b080bd0e2166e3ce2c5596c1ae49fa" translate="yes" xml:space="preserve">
          <source>Use of -l on filehandle%s</source>
          <target state="translated">ファイルハンドル%sでの-lの使用</target>
        </trans-unit>
        <trans-unit id="0cdcd0ba50f9a29dcb0b98dafb0194ca0fdfb139" translate="yes" xml:space="preserve">
          <source>Use of /c modifier is meaningless in s///</source>
          <target state="translated">s///では/c修飾子の使用は意味がありません。</target>
        </trans-unit>
        <trans-unit id="f09256ec5e382dc06ceda63430da57dffa9dad61" translate="yes" xml:space="preserve">
          <source>Use of /c modifier is meaningless without /g</source>
          <target state="translated">c修飾子の使用は、/gなしでは意味がありません。</target>
        </trans-unit>
        <trans-unit id="a582d342a6007eed483b9b338c2db031af137645" translate="yes" xml:space="preserve">
          <source>Use of /g modifier is meaningless in split</source>
          <target state="translated">g修飾子の使用はスプリットでは意味がありません。</target>
        </trans-unit>
        <trans-unit id="a7316ff47b19ccc203ee621904eb275b145a2994" translate="yes" xml:space="preserve">
          <source>Use of := for an empty attribute list is not allowed</source>
          <target state="translated">空の属性リストに対する :=の使用は許可されていません。</target>
        </trans-unit>
        <trans-unit id="468e9917b59882eb3d8638fe67693df28c0d85ba" translate="yes" xml:space="preserve">
          <source>Use of &lt;a href=&quot;#defined-EXPR&quot;&gt;&lt;code&gt;defined&lt;/code&gt;&lt;/a&gt; on aggregates (hashes and arrays) is no longer supported. It used to report whether memory for that aggregate had ever been allocated. You should instead use a simple test for size:</source>
          <target state="translated">アグリゲート（ハッシュと配列）での&lt;a href=&quot;#defined-EXPR&quot;&gt; &lt;code&gt;defined&lt;/code&gt; &lt;/a&gt;使用はサポートされなくなりました。以前は、そのアグリゲートのメモリが割り当てられたことがあるかどうかを報告していました。代わりに、サイズの簡単なテストを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d18763d393ff0aca29ed275dd1c244f6eb5d9f3f" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;*glob{FILEHANDLE}&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;*glob{FILEHANDLE}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa3e24eb7265f399128718cd4ed1d941275d4544" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;/x&lt;/code&gt; means that if you want real whitespace or &lt;code&gt;&quot;#&quot;&lt;/code&gt; characters in the pattern (outside a bracketed character class, which is unaffected by &lt;code&gt;/x&lt;/code&gt;), then you'll either have to escape them (using backslashes or &lt;code&gt;\Q...\E&lt;/code&gt;) or encode them using octal, hex, or &lt;code&gt;\N{}&lt;/code&gt; or &lt;code&gt;\p{name=...}&lt;/code&gt; escapes. It is ineffective to try to continue a comment onto the next line by escaping the &lt;code&gt;\n&lt;/code&gt; with a backslash or &lt;code&gt;\Q&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; を使用すると、パターンに実際の空白文字または &lt;code&gt;&quot;#&quot;&lt;/code&gt; 文字（ &lt;code&gt;/x&lt;/code&gt; の影響を受けない角かっこ文字クラスの外側）が必要な場合は、それらをエスケープする必要があります（バックスラッシュまたは &lt;code&gt;\Q...\E&lt;/code&gt; を使用）。 .. \ E）または、8進数、16進数、または &lt;code&gt;\N{}&lt;/code&gt; または &lt;code&gt;\p{name=...}&lt;/code&gt; エスケープを使用してエンコードします。 &lt;code&gt;\n&lt;/code&gt; を円記号または &lt;code&gt;\Q&lt;/code&gt; エスケープして、次の行にコメントを続けようとするのは効果的ではありません。</target>
        </trans-unit>
        <trans-unit id="0f0cda525ac86ed2eeaa7f4035a68ab00df2e040" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;/x&lt;/code&gt; means that if you want real whitespace or &lt;code&gt;#&lt;/code&gt; characters in the pattern (outside a bracketed character class, which is unaffected by &lt;code&gt;/x&lt;/code&gt;), then you'll either have to escape them (using backslashes or &lt;code&gt;\Q...\E&lt;/code&gt; ) or encode them using octal, hex, or &lt;code&gt;\N{}&lt;/code&gt; escapes. It is ineffective to try to continue a comment onto the next line by escaping the &lt;code&gt;\n&lt;/code&gt; with a backslash or &lt;code&gt;\Q&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;/x&lt;/code&gt; の使用は、パターンに実際の空白文字または &lt;code&gt;#&lt;/code&gt; 文字が必要な場合（ &lt;code&gt;/x&lt;/code&gt; の影響を受けない角括弧付き文字クラスの外側）、それらをエスケープする必要がある（バックスラッシュまたは &lt;code&gt;\Q...\E&lt;/code&gt; ）または、8進、16進、 &lt;code&gt;\N{}&lt;/code&gt; エスケープを使用してエンコードします。 &lt;code&gt;\n&lt;/code&gt; をバックスラッシュまたは &lt;code&gt;\Q&lt;/code&gt; エスケープしてコメントを次の行に続けようとすると効果的ではありません。</target>
        </trans-unit>
        <trans-unit id="1cbbacbfb5cc1cd370b8cd67026b2e577274d54c" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on aggregates (hashes and arrays) is deprecated. It used to report whether memory for that aggregate had ever been allocated. This behavior may disappear in future versions of Perl. You should instead use a simple test for size:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 凝集（ハッシュや配列）には推奨されています。これは、そのアグリゲートのメモリが割り当てられたことがあるかどうかを報告するために使用されていました。この動作は、Perlの将来のバージョンではなくなる可能性があります。代わりに、サイズの簡単なテストを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c575003ac8ed97c3c8c499c8985b645cc965dd9e" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on aggregates (hashes and arrays) is deprecated. It used to report whether memory for that aggregate had ever been allocated. This behavior may disappear in future versions of Perl. You should instead use a simple test for size:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 凝集（ハッシュや配列）には推奨されています。これは、そのアグリゲートのメモリが割り当てられたことがあるかどうかを報告するために使用されていました。この動作は、Perlの将来のバージョンではなくなる可能性があります。代わりに、サイズの簡単なテストを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a1452256e006f48ab16db831ff1d2bc55b7b495f" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; to jump into a construct is deprecated and will issue a warning. Even then, it may not be used to go into any construct that requires initialization, such as a subroutine or a &lt;code&gt;foreach&lt;/code&gt; loop. It also can't be used to go into a construct that is optimized away.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; を使用して構成にジャンプすることは非推奨であり、警告が表示されます。その場合でも、サブルーチンや &lt;code&gt;foreach&lt;/code&gt; ループなど、初期化が必要な構成要素へのアクセスには使用できません。また、最適化された構成に移動するために使用することもできません。</target>
        </trans-unit>
        <trans-unit id="5aa03266aa6d88c654f206267c8022d408e9c245" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; to jump into a construct is deprecated and will issue a warning. Even then, it may not be used to go into any construct that requires initialization, such as a subroutine or a &lt;code&gt;foreach&lt;/code&gt; loop. It also can't be used to go into a construct that is optimized away.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; LABEL&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt; EXPR&lt;/code&gt; を使用して構成にジャンプすることは非推奨であり、警告が表示されます。その場合でも、サブルーチンや &lt;code&gt;foreach&lt;/code&gt; ループなど、初期化が必要な構成要素へのアクセスには使用できません。また、最適化された構成に移動するために使用することもできません。</target>
        </trans-unit>
        <trans-unit id="d32f8fbd86e7458e1a9f83eb5128d9b92159295d" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;\N{}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;\N{}&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="0a03f34c55feb99ac37237337b71f2bbb24cc722" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;\N{}&lt;/code&gt; with nothing between the braces was deprecated in Perl 5.24, and throws a fatal error as of Perl 5.28.</source>
          <target state="translated">中括弧の間に何もない &lt;code&gt;\N{}&lt;/code&gt; 使用は、Perl 5.24で非推奨になり、Perl5.28で致命的なエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="5064a11ee17de7c6b4f525fb98c9de3471ad9b56" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;dump()&lt;/code&gt; instead of &lt;code&gt;CORE::dump()&lt;/code&gt; was deprecated in Perl 5.8, and an unqualified &lt;code&gt;dump()&lt;/code&gt; will no longer be available in Perl 5.30.</source>
          <target state="translated">使用 &lt;code&gt;dump()&lt;/code&gt; の代わりに、 &lt;code&gt;CORE::dump()&lt;/code&gt; はPerl 5.8で非推奨なかった、そして修飾されていない &lt;code&gt;dump()&lt;/code&gt; はもはやPerlの5.30で利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0d4b161f30574eaa433844bbaf4ce439759098dd" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;goto LABEL&lt;/code&gt; or &lt;code&gt;goto EXPR&lt;/code&gt; to jump into a construct is deprecated and will issue a warning. Even then, it may not be used to go into any construct that requires initialization, such as a subroutine, a &lt;code&gt;foreach&lt;/code&gt; loop, or a &lt;code&gt;given&lt;/code&gt; block. In general, it may not be used to jump into the parameter of a binary or list operator, but it may be used to jump into the</source>
          <target state="translated">&lt;code&gt;goto LABEL&lt;/code&gt; または &lt;code&gt;goto EXPR&lt;/code&gt; を使用して構成にジャンプすることは非推奨であり、警告が発行されます。それでも、サブルーチン、 &lt;code&gt;foreach&lt;/code&gt; ループ、 &lt;code&gt;given&lt;/code&gt; ブロックなど、初期化が必要な構造に入るには使用できません。一般に、バイナリ演算子またはリスト演算子のパラメーターにジャンプするために使用することはできませんが、</target>
        </trans-unit>
        <trans-unit id="2fc7e9c1e65d2b2d7ee8473afb7a4367f93c333a" translate="yes" xml:space="preserve">
          <source>Use of \N{}</source>
          <target state="translated">Use of \N{}.</target>
        </trans-unit>
        <trans-unit id="c7dfc1119fcc5888a5876ddb333f3d0fa91541d8" translate="yes" xml:space="preserve">
          <source>Use of a bare terminator was deprecated in Perl 5.000, and is a fatal error as of Perl 5.28.</source>
          <target state="translated">裸のターミネータの使用は Perl 5.000 で非推奨とされ、Perl 5.28 では致命的なエラーとなっています。</target>
        </trans-unit>
        <trans-unit id="0ce1975659a74600b8f5d10e727a0e482e0ccb5e" translate="yes" xml:space="preserve">
          <source>Use of a single identifier, prefixed with &lt;code&gt;*&lt;/code&gt; . For example, &lt;code&gt;*name&lt;/code&gt; stands for any or all of &lt;code&gt;$name&lt;/code&gt; , &lt;code&gt;@name&lt;/code&gt; , &lt;code&gt;%name&lt;/code&gt; , &lt;code&gt;&amp;amp;name&lt;/code&gt; , or just &lt;code&gt;name&lt;/code&gt; . How you use it determines whether it is interpreted as all or only one of them. See &amp;ldquo;Typeglobs and Filehandles&amp;rdquo; in Camel chapter 2, &amp;ldquo;Bits and Pieces&amp;rdquo;.</source>
          <target state="translated">接頭辞が &lt;code&gt;*&lt;/code&gt; の単一の識別子の使用。たとえば、 &lt;code&gt;*name&lt;/code&gt; のいずれかまたは全てを表し &lt;code&gt;$name&lt;/code&gt; 、 &lt;code&gt;@name&lt;/code&gt; 、 &lt;code&gt;%name&lt;/code&gt; 、 &lt;code&gt;&amp;amp;name&lt;/code&gt; 、または単に &lt;code&gt;name&lt;/code&gt; 。それをどのように使用するかによって、すべてとして解釈されるか、それらのうちの1つとして解釈されるかが決まります。 Camelの第2章「ビットとピース」の「タイプグロブとファイルハンドル」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9efe55d6316474228b943b01fd40260688802603" translate="yes" xml:space="preserve">
          <source>Use of a single identifier, prefixed with &lt;code&gt;*&lt;/code&gt;. For example, &lt;code&gt;*name&lt;/code&gt; stands for any or all of &lt;code&gt;$name&lt;/code&gt;, &lt;code&gt;@name&lt;/code&gt;, &lt;code&gt;%name&lt;/code&gt;, &lt;code&gt;&amp;amp;name&lt;/code&gt;, or just &lt;code&gt;name&lt;/code&gt;. How you use it determines whether it is interpreted as all or only one of them. See &amp;ldquo;Typeglobs and Filehandles&amp;rdquo; in Camel chapter 2, &amp;ldquo;Bits and Pieces&amp;rdquo;.</source>
          <target state="translated">接頭辞 &lt;code&gt;*&lt;/code&gt; が付いた単一の識別子の使用。たとえば、 &lt;code&gt;*name&lt;/code&gt; のいずれかまたは全てを表し &lt;code&gt;$name&lt;/code&gt; 、 &lt;code&gt;@name&lt;/code&gt; 、 &lt;code&gt;%name&lt;/code&gt; 、 &lt;code&gt;&amp;amp;name&lt;/code&gt; 、または単に &lt;code&gt;name&lt;/code&gt; 。どのように使用するかによって、すべてとして解釈されるか、1つだけとして解釈されるかが決まります。Camelの第2章「BitsandPieces」の「TypeglobsandFilehandles」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3881272909d748ab2110f15f44ee735d764d9f5" translate="yes" xml:space="preserve">
          <source>Use of a subroutine call, rather than a subroutine name, as an argument to &lt;a href=&quot;#exists-EXPR&quot;&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/a&gt; is an error.</source>
          <target state="translated">&lt;a href=&quot;#exists-EXPR&quot;&gt; &lt;code&gt;exists&lt;/code&gt; &lt;/a&gt;する引数として、サブルーチン名ではなくサブルーチン呼び出しを使用するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="79921a859879ed1277d82b4cc80975d8402d69d3" translate="yes" xml:space="preserve">
          <source>Use of a subroutine call, rather than a subroutine name, as an argument to exists() is an error.</source>
          <target state="translated">exists()の引数にサブルーチン名ではなくサブルーチンコールを使用するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="86136067e812367f102852e0f2a4131e0073483c" translate="yes" xml:space="preserve">
          <source>Use of any other character following the &lt;code&gt;&quot;c&quot;&lt;/code&gt; besides those listed above is discouraged, and as of Perl v5.20, the only characters actually allowed are the printable ASCII ones, minus the left brace &lt;code&gt;&quot;{&quot;&lt;/code&gt; . What happens for any of the allowed other characters is that the value is derived by xor'ing with the seventh bit, which is 64, and a warning raised if enabled. Using the non-allowed characters generates a fatal error.</source>
          <target state="translated">上記以外の &lt;code&gt;&quot;c&quot;&lt;/code&gt; に続く文字の使用はお勧めしません。Perlv5.20以降では、実際に使用できる文字は印刷可能なASCII文字から左中括弧 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 除いたものだけです。許可されている他の文字の場合は、7番目のビット（64）とのxor演算によって値が導出され、有効になっている場合は警告が発生します。許可されていない文字を使用すると、致命的なエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3963c492ea44a849f2bbefe1df3ebc8f84c5b619" translate="yes" xml:space="preserve">
          <source>Use of any other character following the &lt;code&gt;&quot;c&quot;&lt;/code&gt; besides those listed above is discouraged, and as of Perl v5.20, the only characters actually allowed are the printable ASCII ones, minus the left brace &lt;code&gt;&quot;{&quot;&lt;/code&gt;. What happens for any of the allowed other characters is that the value is derived by xor'ing with the seventh bit, which is 64, and a warning raised if enabled. Using the non-allowed characters generates a fatal error.</source>
          <target state="translated">上記以外の &lt;code&gt;&quot;c&quot;&lt;/code&gt; に続く他の文字の使用は推奨されていません。Perlv5.20以降、実際に許可される文字は、左中括弧 &lt;code&gt;&quot;{&quot;&lt;/code&gt; 除いた印刷可能なASCII文字のみです。許可されている他の文字のいずれかで発生するのは、値が7番目のビット（64）との排他的論理和によって導出され、有効になっている場合は警告が発生することです。許可されていない文字を使用すると、致命的なエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fd42bdd625b8d0b9d131c2d5eabe222b4e385960" translate="yes" xml:space="preserve">
          <source>Use of bare &amp;lt;&amp;lt; to mean &amp;lt;&amp;lt;&quot;&quot; is forbidden</source>
          <target state="translated">&amp;lt;&amp;lt; &quot;&quot;を意味する裸の&amp;lt;&amp;lt;の使用は禁止されています</target>
        </trans-unit>
        <trans-unit id="e8df89669e693c3f41976f14858dbf5ac4daf98f" translate="yes" xml:space="preserve">
          <source>Use of code point 0x%s is not allowed; the permissible max is 0x%X</source>
          <target state="translated">コードポイント 0x%s の使用は許可されていません。</target>
        </trans-unit>
        <trans-unit id="ce31c6fac1c3d88e21b9aa38b5da69bc1299dc6b" translate="yes" xml:space="preserve">
          <source>Use of code point 0x%s is not allowed; the permissible max is 0x%X in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">コードポイント0x％sの使用は許可されていません。許容最大値は正規表現で0x％Xです。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="bc07c6c17cfacbbf506929ab43b45dc5c37c1366" translate="yes" xml:space="preserve">
          <source>Use of code points over 0xFF in string bitwise operators</source>
          <target state="translated">文字列ビット演算子での0xFFを超えるコードポイントの使用</target>
        </trans-unit>
        <trans-unit id="a6a4474ac4e2b4bfc6cd8e3f6568e69b02d635ec" translate="yes" xml:space="preserve">
          <source>Use of comma-less variable list in formats.</source>
          <target state="translated">フォーマットでのカンマレス変数リストの使用。</target>
        </trans-unit>
        <trans-unit id="2d322945b4e21e9e3602bafb5e497ecc98176eed" translate="yes" xml:space="preserve">
          <source>Use of each publically accessible method or subroutine, including parameters and return values</source>
          <target state="translated">パラメータと戻り値を含む、公開されている各メソッドまたはサブルーチンの使用</target>
        </trans-unit>
        <trans-unit id="74536623687a73612b6c9ed701fc462121dc7d7c" translate="yes" xml:space="preserve">
          <source>Use of each() on hash after insertion without resetting hash iterator results in undefined behavior</source>
          <target state="translated">ハッシュイテレータをリセットせずに挿入後のハッシュに対して each()を使用すると、未定義の動作になります。</target>
        </trans-unit>
        <trans-unit id="c4576ebd26dc37f362b412c956b1df320b83b3af" translate="yes" xml:space="preserve">
          <source>Use of epoch seconds</source>
          <target state="translated">エポック秒の使用</target>
        </trans-unit>
        <trans-unit id="89f0d1e04a6d485fb8a42962bb065aa11137cb06" translate="yes" xml:space="preserve">
          <source>Use of freed value in iteration</source>
          <target state="translated">イテレーションでの解放された値の使用</target>
        </trans-unit>
        <trans-unit id="10577790a7e390e15c7076444b50c596890af4f3" translate="yes" xml:space="preserve">
          <source>Use of inherited AUTOLOAD for non-method %s::%s() is no longer allowed</source>
          <target state="translated">非メソッド %s::%s()での継承された AUTOLOAD の使用は許可されなくなりました。</target>
        </trans-unit>
        <trans-unit id="1731aaf31968c5fdd9480f64d745beb19858cc51" translate="yes" xml:space="preserve">
          <source>Use of interval timers may interfere with &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;usleep()&lt;/code&gt; . In standard-speak the &quot;interaction is unspecified&quot;, which means that</source>
          <target state="translated">インターバルタイマーを使用すると、 &lt;code&gt;&lt;a href=&quot;../functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;usleep()&lt;/code&gt; に干渉する可能性があります。標準的に言えば、「相互作用は指定されていません」、つまり</target>
        </trans-unit>
        <trans-unit id="9a36df45b998246d9d4e37166492fb54cb408d13" translate="yes" xml:space="preserve">
          <source>Use of interval timers may interfere with &lt;code&gt;alarm()&lt;/code&gt;, &lt;code&gt;sleep()&lt;/code&gt;, and &lt;code&gt;usleep()&lt;/code&gt;. In standard-speak the &quot;interaction is unspecified&quot;, which means that</source>
          <target state="translated">インターバルタイマーを使用すると、 &lt;code&gt;alarm()&lt;/code&gt; 、 &lt;code&gt;sleep()&lt;/code&gt; 、および &lt;code&gt;usleep()&lt;/code&gt; に干渉する可能性があります。標準的に言えば、「相互作用は特定されていない」ということです。</target>
        </trans-unit>
        <trans-unit id="3805a9db13b60335dc548646c2acddd3a9ee7d48" translate="yes" xml:space="preserve">
          <source>Use of reference &quot;%s&quot; as array index</source>
          <target state="translated">配列のインデックスとして参照 &quot;%s&quot; を使用します。</target>
        </trans-unit>
        <trans-unit id="2e29d84c7fc62ad9de47d9754a6c77e8d33bc264" translate="yes" xml:space="preserve">
          <source>Use of strings with code points over 0xFF as arguments to %s operator is not allowed</source>
          <target state="translated">コード・ポイントが 0xFF を超える文字列を %s 演算子の引数として使用することは許可されていません。</target>
        </trans-unit>
        <trans-unit id="bdfaec0f9336124278f7b817b28607323f021b97" translate="yes" xml:space="preserve">
          <source>Use of strings with code points over 0xFF as arguments to &lt;code&gt;vec&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;vec&lt;/code&gt; への引数として0xFFを超えるコードポイントを持つ文字列の使用</target>
        </trans-unit>
        <trans-unit id="5ba1cfef52bf7da86cdcb08ec91920d8642a5df2" translate="yes" xml:space="preserve">
          <source>Use of strings with code points over 0xFF as arguments to vec</source>
          <target state="translated">0xFF 以上のコードポイントを持つ文字列を vec の引数として使用する</target>
        </trans-unit>
        <trans-unit id="c8754dd269d352f81b7e4e85b6cbc8d5f258959f" translate="yes" xml:space="preserve">
          <source>Use of strings with code points over 0xFF as arguments to vec is forbidden</source>
          <target state="translated">0xFF 以上のコードポイントを持つ文字列を vec の引数として使用することは禁止されています。</target>
        </trans-unit>
        <trans-unit id="fb325453470b7ad07e18ee5e7b6fc85e5f7e98d0" translate="yes" xml:space="preserve">
          <source>Use of tainted arguments in %s is deprecated</source>
          <target state="translated">s での汚染された引数の使用は推奨されません。</target>
        </trans-unit>
        <trans-unit id="7d5e7b759fe4fca36b18414600475c4a0965fdc9" translate="yes" xml:space="preserve">
          <source>Use of the &quot;Is&quot; Prefix</source>
          <target state="translated">接頭辞「Is」の使用</target>
        </trans-unit>
        <trans-unit id="d97acda1f5bdbca48a63d3dc657d3e8cb8a0224c" translate="yes" xml:space="preserve">
          <source>Use of the &lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt; module is recommended.</source>
          <target state="translated">&lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt;モジュールの使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="04ae8dc20ee7df48e5cc5d87f830521771a4c91c" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;normalization&lt;/code&gt; parameter requires the &lt;b&gt;Unicode::Normalize&lt;/b&gt; module (see &lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;normalization&lt;/code&gt; パラメーターを使用するには、&lt;b&gt;Unicode :: Normalize&lt;/b&gt;モジュールが必要です（&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode :: Normalizeを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1a808d3a7e8e48ea8bc89247be3129db920de8bf" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;normalization&lt;/code&gt; parameter requires the &lt;b&gt;Unicode::Normalize&lt;/b&gt; module (see &lt;a href=&quot;normalize&quot;&gt;Unicode::Normalize&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;normalization&lt;/code&gt; パラメーターを使用するには、&lt;b&gt;Unicode :: Normalize&lt;/b&gt;モジュールが必要です（&lt;a href=&quot;normalize&quot;&gt;Unicode :: Normalizeを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="64a7870ec498fba32689c035536b6cc73bacdad6" translate="yes" xml:space="preserve">
          <source>Use of the non-greedy modifier &lt;code&gt;&quot;?&quot;&lt;/code&gt; may not give you the expected results if it is within a capturing group within the construct.</source>
          <target state="translated">欲張りでない修飾子 &lt;code&gt;&quot;?&quot;&lt;/code&gt; コンストラクト内のキャプチャグループ内にある場合、期待される結果が得られない可能性があります。</target>
        </trans-unit>
        <trans-unit id="0889f1efa2b019bc209b7679925ab3d28d4ef3fb" translate="yes" xml:space="preserve">
          <source>Use of this function is deprecated. It is equivalent with $ENV{PROCESSOR_ARCHITECTURE}. This might not work on Win9X.</source>
          <target state="translated">この関数の使用は非推奨です。ENV{PROCESSOR_ARCHITECTURE}と同等です。Win9Xでは動作しないかもしれません。</target>
        </trans-unit>
        <trans-unit id="13f32a60715fd5465681f84312a8ca313ee4ea13" translate="yes" xml:space="preserve">
          <source>Use of this variable will be a fatal error in Perl 5.30.</source>
          <target state="translated">この変数を使用すると、Perl 5.30では致命的なエラーとなります。</target>
        </trans-unit>
        <trans-unit id="b7e43122047a54a500c46cfca5d821a3b00fe4e2" translate="yes" xml:space="preserve">
          <source>Use of unassigned code point or non-standalone grapheme for a delimiter is not allowed</source>
          <target state="translated">区切り文字に未割り当てのコードポイントや独立していない書記素を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="c2d0d39a177af319c88c58039c6648bd0013da8c" translate="yes" xml:space="preserve">
          <source>Use of unassigned code point or non-standalone grapheme for a delimiter.</source>
          <target state="translated">区切り記号に未割り当てのコードポイントまたは独立していない書記素を使用します。</target>
        </trans-unit>
        <trans-unit id="2b4a73f904c498fbe69f531f41a3817c889f80b4" translate="yes" xml:space="preserve">
          <source>Use of uninitialized value%s</source>
          <target state="translated">初期化されていない値%sの使用</target>
        </trans-unit>
        <trans-unit id="0f49c2ebf95d755e5a6d2e5df09c73558f210f71" translate="yes" xml:space="preserve">
          <source>Use one of</source>
          <target state="translated">のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="5c06bf7bc66bd95d8dadea94a66d540da42d6175" translate="yes" xml:space="preserve">
          <source>Use one of the RPC modules( &lt;a href=&quot;https://metacpan.org/search?q=RPC&quot;&gt;https://metacpan.org/search?q=RPC&lt;/a&gt; ).</source>
          <target state="translated">RPCモジュール（&lt;a href=&quot;https://metacpan.org/search?q=RPC&quot;&gt;https://metacpan.org/search?q=RPC&lt;/a&gt;）のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="e43df0045591deb1920c698e1e06d9540206f44c" translate="yes" xml:space="preserve">
          <source>Use only modes 'rb' or 'wb' or /wb[1-9]/.</source>
          <target state="translated">モード 'rb' または 'wb' または /wb[1-9]/のみを使用してください。</target>
        </trans-unit>
        <trans-unit id="852a3fb75c58ea9ab6aee1d984501d31575dbe43" translate="yes" xml:space="preserve">
          <source>Use or avoid POSIX locales for built-in operations</source>
          <target state="translated">組み込み操作に POSIX ロケールを使用または回避する</target>
        </trans-unit>
        <trans-unit id="42549f09d2d3209d758990ebfc780be7cd9d6789" translate="yes" xml:space="preserve">
          <source>Use references as hash keys</source>
          <target state="translated">参照をハッシュキーとして使用する</target>
        </trans-unit>
        <trans-unit id="f9644a66bc0fc21fd3bf748f9ecc3ae4860c12aa" translate="yes" xml:space="preserve">
          <source>Use spaces for indentation, not tab characters.</source>
          <target state="translated">インデントにはタブ文字ではなくスペースを使用します。</target>
        </trans-unit>
        <trans-unit id="24db154be0d68fd92b28271f4ccc60a8152b9d53" translate="yes" xml:space="preserve">
          <source>Use subroutine address instead of name when reporting.</source>
          <target state="translated">報告時には名前の代わりにサブルーチンアドレスを使用してください。</target>
        </trans-unit>
        <trans-unit id="e65336030d621ad236216bbd262ac0c17be3ed80" translate="yes" xml:space="preserve">
          <source>Use tabs for each 8 columns of indent. The default is to use only spaces. For instance, if the style options are &lt;b&gt;-si4T&lt;/b&gt;, a line that's indented 3 times will be preceded by one tab and four spaces; if the options were &lt;b&gt;-si8T&lt;/b&gt;, the same line would be preceded by three tabs.</source>
          <target state="translated">インデントの8列ごとにタブを使用します。デフォルトでは、スペースのみを使用します。たとえば、スタイルオプションが&lt;b&gt;-si4Tの&lt;/b&gt;場合、3回インデントされた行の前には1つのタブと4つのスペースが付きます。オプションが&lt;b&gt;-si8Tの&lt;/b&gt;場合、同じ行の前に3つのタブが付きます。</target>
        </trans-unit>
        <trans-unit id="900e9cc0a9414f47ad3c3cf6cec86c687d5c9a3b" translate="yes" xml:space="preserve">
          <source>Use the &amp;lt;&amp;gt; (&lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt;) operator, documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;. Versions of Perl older than 5.6 require that you have a shell installed that groks tildes. Later versions of Perl have this feature built in. The &lt;a href=&quot;http://search.cpan.org/perldoc/File::KGlob&quot;&gt;File::KGlob&lt;/a&gt; module (available from CPAN) gives more portable glob functionality.</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;に記載されている&amp;lt;&amp;gt;（ &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt; ）演算子を使用します。5.6より古いバージョンのPerlでは、チルダを取得するシェルがインストールされている必要があります。Perlの新しいバージョンには、この機能が組み込まれています&lt;a href=&quot;http://search.cpan.org/perldoc/File::KGlob&quot;&gt;。File:: KGlob&lt;/a&gt;モジュール（CPANから入手可能）は、より移植性の高いglob機能を提供します。</target>
        </trans-unit>
        <trans-unit id="ef1e23d9fb4dd0e9ea38e4518e9591d60f56c77c" translate="yes" xml:space="preserve">
          <source>Use the &amp;lt;&amp;gt; (&lt;code&gt;glob()&lt;/code&gt;) operator, documented in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;. Versions of Perl older than 5.6 require that you have a shell installed that groks tildes. Later versions of Perl have this feature built in. The &lt;a href=&quot;File::KGlob&quot;&gt;File::KGlob&lt;/a&gt; module (available from CPAN) gives more portable glob functionality.</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;に記載されている&amp;lt;&amp;gt;（ &lt;code&gt;glob()&lt;/code&gt; ）演算子を使用します。5.6より古いバージョンのPerlでは、チルダを鳴らすシェルがインストールされている必要があります。それ以降のバージョンのPerlには、この機能が組み込まれています&lt;a href=&quot;File::KGlob&quot;&gt;。File:: KGlob&lt;/a&gt;モジュール（CPANから入手可能）は、よりポータブルなglob機能を提供します。</target>
        </trans-unit>
        <trans-unit id="5a5399c28d11debe8de46b2d5e2d58b2ab28722c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt; module from CPAN. As an example:</source>
          <target state="translated">CPANの&lt;a href=&quot;BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt;モジュールを使用します。例として：</target>
        </trans-unit>
        <trans-unit id="effb03bd829df4c475803f0a78cb260ed53ef280" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;Email::Folder&quot;&gt;Email::Folder&lt;/a&gt; module, like so:</source>
          <target state="translated">次のように、&lt;a href=&quot;Email::Folder&quot;&gt;Email :: Folder&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="c8be9c742f6803184d41f9ae31a05a0ac897f541" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; module. It's well-tested and supports all the craziness that you'll see in the real world (comment-folding whitespace, encodings, comments, etc.).</source>
          <target state="translated">&lt;a href=&quot;Email::MIME&quot;&gt;Email :: MIME&lt;/a&gt;モジュールを使用します。それは十分にテストされており、現実の世界で見られるすべての狂気をサポートしています（コメント-折りたたみ空白、エンコーディング、コメントなど）。</target>
        </trans-unit>
        <trans-unit id="be8858e11145295902cfc4aa55f6e4e257bbd6ea" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;Email::Stuffer&quot;&gt;Email::Stuffer&lt;/a&gt; module, like so:</source>
          <target state="translated">次のように、&lt;a href=&quot;Email::Stuffer&quot;&gt;Email :: Stuffer&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="bb431ef2247424046d831f2d66515a5a7c258889" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;File::Copy&quot;&gt;File::Copy&lt;/a&gt; module. It comes with Perl and can do a true copy across file systems, and it does its magic in a portable fashion.</source>
          <target state="translated">&lt;a href=&quot;File::Copy&quot;&gt;File :: Copy&lt;/a&gt;モジュールを使用します。Perlに付属しており、ファイルシステム間で真のコピーを実行でき、移植可能な方法でその魔法を実行します。</target>
        </trans-unit>
        <trans-unit id="ba2675eaa63b6f203dbc762c633eb0b0a36528fb" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;List::Permutor&quot;&gt;List::Permutor&lt;/a&gt; module on CPAN. If the list is actually an array, try the &lt;a href=&quot;Algorithm::Permute&quot;&gt;Algorithm::Permute&lt;/a&gt; module (also on CPAN). It's written in XS code and is very efficient:</source>
          <target state="translated">CPANの&lt;a href=&quot;List::Permutor&quot;&gt;List :: Permutor&lt;/a&gt;モジュールを使用します。リストが実際に配列である場合は、&lt;a href=&quot;Algorithm::Permute&quot;&gt;Algorithm :: Permute&lt;/a&gt;モジュール（これもCPANにあります）を試してください。XSコードで記述されており、非常に効率的です。</target>
        </trans-unit>
        <trans-unit id="b0e1f2f13de1a40cd3f8f4989f2a1c9a14eedc5e" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;Math::Matrix&quot;&gt;Math::Matrix&lt;/a&gt; or &lt;a href=&quot;Math::MatrixReal&quot;&gt;Math::MatrixReal&lt;/a&gt; modules (available from CPAN) or the &lt;a href=&quot;pdl&quot;&gt;PDL&lt;/a&gt; extension (also available from CPAN).</source>
          <target state="translated">使用&lt;a href=&quot;Math::Matrix&quot;&gt;数学::マトリックス&lt;/a&gt;または&lt;a href=&quot;Math::MatrixReal&quot;&gt;数学:: MatrixReal&lt;/a&gt;（CPANから入手可能）モジュールまたは&lt;a href=&quot;pdl&quot;&gt;PDLの&lt;/a&gt;（CPANから入手可能）の拡張子。</target>
        </trans-unit>
        <trans-unit id="00d15469d48b935a1500729c77a1b8e476196625" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;Tie::IxHash&quot;&gt;Tie::IxHash&lt;/a&gt; from CPAN.</source>
          <target state="translated">CPANの&lt;a href=&quot;Tie::IxHash&quot;&gt;Tie :: IxHashを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="70b160440316452f340f816438a94ac57e43a80b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;file/copy&quot;&gt;File::Copy&lt;/a&gt; module. It comes with Perl and can do a true copy across file systems, and it does its magic in a portable fashion.</source>
          <target state="translated">&lt;a href=&quot;file/copy&quot;&gt;File :: Copy&lt;/a&gt;モジュールを使用します。Perlが付属しており、ファイルシステム間で真のコピーを行うことができ、移植性のある方法で魔法をかけます。</target>
        </trans-unit>
        <trans-unit id="e3fef79cbd4ceac4e867796d39b4567be99b7a0c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD::Resource&lt;/a&gt; module from CPAN. As an example:</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/BSD::Resource&quot;&gt;BSD :: Resource&lt;/a&gt;モジュールを使用します。例として：</target>
        </trans-unit>
        <trans-unit id="d164af42cbef789ed1001f4b9517bb726a601d59" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email::Folder&lt;/a&gt; module, like so:</source>
          <target state="translated">次のように、&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Folder&quot;&gt;Email :: Folder&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="66505dab9f27e8ded0226b45047ac4d95ef19d93" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email::Sender::Simple&lt;/a&gt; modules, like so:</source>
          <target state="translated">次のように、&lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email :: MIME&lt;/a&gt;および&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email :: Sender :: Simple&lt;/a&gt;モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="9cda4728e014cde6b4aa8b1e9ff60d1e00b00f30" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email::MIME&lt;/a&gt; module. It's well-tested and supports all the craziness that you'll see in the real world (comment-folding whitespace, encodings, comments, etc.).</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Email::MIME&quot;&gt;Email :: MIME&lt;/a&gt;モジュールを使用します。これは十分にテストされており、現実の世界で見られるすべての狂気（コメント折りたたみの空白、エンコーディング、コメントなど）をサポートしています。</target>
        </trans-unit>
        <trans-unit id="6c838954123651f7a7afc095c1c154c266d44966" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/List::Permutor&quot;&gt;List::Permutor&lt;/a&gt; module on CPAN. If the list is actually an array, try the &lt;a href=&quot;http://search.cpan.org/perldoc/Algorithm::Permute&quot;&gt;Algorithm::Permute&lt;/a&gt; module (also on CPAN). It's written in XS code and is very efficient:</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/List::Permutor&quot;&gt;List :: Permutor&lt;/a&gt;モジュールを使用します。リストが実際に配列の場合は、&lt;a href=&quot;http://search.cpan.org/perldoc/Algorithm::Permute&quot;&gt;Algorithm :: Permute&lt;/a&gt;モジュールを試してください（CPANでも）。XSコードで記述されており、非常に効率的です。</target>
        </trans-unit>
        <trans-unit id="65a351301ca14a96333147c8b3d3106e99e464c1" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Math::Matrix&quot;&gt;Math::Matrix&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Math::MatrixReal&quot;&gt;Math::MatrixReal&lt;/a&gt; modules (available from CPAN) or the &lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDL&lt;/a&gt; extension (also available from CPAN).</source>
          <target state="translated">使用&lt;a href=&quot;http://search.cpan.org/perldoc/Math::Matrix&quot;&gt;数学::マトリックス&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/perldoc/Math::MatrixReal&quot;&gt;数学:: MatrixReal&lt;/a&gt;（CPANから入手可能）モジュールまたは&lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDLの&lt;/a&gt;（CPANから入手可能）の拡張子。</target>
        </trans-unit>
        <trans-unit id="9284406bbe8e82a3357e3616e641d1dd96c570f0" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie::IxHash&lt;/a&gt; from CPAN.</source>
          <target state="translated">CPANの&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie :: IxHashを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a4377719087a150e546f9b7a3c98e50014f5748d" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; pragma to control the I/O layers used when reading the output of the command, for example:</source>
          <target state="translated">&lt;a href=&quot;open&quot;&gt;オープン&lt;/a&gt;プラグマを使用して、コマンドの出力を読み取るときに使用されるI / Oレイヤーを制御します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="c0e1ce41fa321637cf3d64ebec09008a4c7342ad" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$/&lt;/code&gt; variable (see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details). You can either set it to &lt;code&gt;&quot;&quot;&lt;/code&gt; to eliminate empty paragraphs (&lt;code&gt;&quot;abc\n\n\n\ndef&quot;&lt;/code&gt; , for instance, gets treated as two paragraphs and not three), or &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; to accept empty paragraphs.</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; 変数を使用します（詳細は&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照）。空の段落を削除するには &lt;code&gt;&quot;&quot;&lt;/code&gt; に設定し（たとえば、 &lt;code&gt;&quot;abc\n\n\n\ndef&quot;&lt;/code&gt; は3ではなく2つの段落として扱われます）、または &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; して空の段落を受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="5ef5922afb613aad3b7939c077d2e25bb76fdb53" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$/&lt;/code&gt; variable (see &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for details). You can either set it to &lt;code&gt;&quot;&quot;&lt;/code&gt; to eliminate empty paragraphs (&lt;code&gt;&quot;abc\n\n\n\ndef&quot;&lt;/code&gt;, for instance, gets treated as two paragraphs and not three), or &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; to accept empty paragraphs.</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; 変数を使用します（詳細については、&lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;を参照してください）。空の段落を削除するには &lt;code&gt;&quot;&quot;&lt;/code&gt; に設定するか（たとえば、 &lt;code&gt;&quot;abc\n\n\n\ndef&quot;&lt;/code&gt; は3つではなく2つの段落として扱われます）、空の段落を受け入れるには &lt;code&gt;&quot;\n\n&quot;&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="3eb28dd761b36a73acd489d9a060d0261a86e1b3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:encoding(...)&lt;/code&gt; layer to read from and write to filehandles using the specified encoding. (See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;.)</source>
          <target state="translated">使用する &lt;code&gt;:encoding(...)&lt;/code&gt; 指定されたエンコーディングを使用してファイルハンドルから読み込むための層と書き込みを。（&lt;a href=&quot;open&quot;&gt;openを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="1043c9bb577ccc31fca3b4929e685adcde02639a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; function, probably in conjunction with a signal handler, as documented in &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; and the section on &quot;Signals&quot; in the Camel. You may instead use the more flexible &lt;a href=&quot;http://search.cpan.org/perldoc/Sys::AlarmCall&quot;&gt;Sys::AlarmCall&lt;/a&gt; module available from CPAN.</source>
          <target state="translated">「&lt;a href=&quot;perlipc#Signals&quot;&gt;perlipcの&lt;/a&gt;シグナル」とラクダの「シグナル」のセクションに記載されているように、おそらくシグナルハンドラーと組み合わせて &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm()&lt;/a&gt;&lt;/code&gt; 関数を使用します。代わりに、CPANから入手できるより柔軟な&lt;a href=&quot;http://search.cpan.org/perldoc/Sys::AlarmCall&quot;&gt;Sys :: AlarmCall&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="0b06aec35cc8ae0b522498e65b1bb4f4583c757e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; function (see &lt;a href=&quot;functions/rand&quot;&gt;rand&lt;/a&gt;):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/rand&quot;&gt;rand()&lt;/a&gt;&lt;/code&gt; 関数を使用します（&lt;a href=&quot;functions/rand&quot;&gt;randを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="24977a0b1e006e0285b58c0302df8403248c380a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;Encode&lt;/code&gt; package to try converting it. For example,</source>
          <target state="translated">&lt;code&gt;Encode&lt;/code&gt; パッケージを使用して変換してみてください。例えば、</target>
        </trans-unit>
        <trans-unit id="0dc5eef8749d48465cf33790a50fb27f748e0a9f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;SvPV_nolen&lt;/code&gt; macro instead</source>
          <target state="translated">代わりに &lt;code&gt;SvPV_nolen&lt;/code&gt; マクロを使用してください</target>
        </trans-unit>
        <trans-unit id="ef653b1e1ac17e7ebb2ebd7fe5cecc710ea855b0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; macro instead</source>
          <target state="translated">代わりに &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; マクロを使用してください</target>
        </trans-unit>
        <trans-unit id="bfd1997217ebfcfd0b8127ecc2505173b83edb29" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;\N{&lt;i&gt;charname&lt;/i&gt;}&lt;/code&gt; notation to get the character by that name for use in interpolated literals (double-quoted strings and regexes). In v5.16, there is an implicit</source>
          <target state="translated">使用 &lt;code&gt;\N{&lt;i&gt;charname&lt;/i&gt;}&lt;/code&gt; 補間リテラル（二重引用符で囲まれた文字列や正規表現）での使用のためにその名前で文字を取得するための表記法を。v5.16では、暗黙的な</target>
        </trans-unit>
        <trans-unit id="50bdc262f56d539538ccdf5dbc4b7829a0847bc1" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;alarm()&lt;/code&gt; function, probably in conjunction with a signal handler, as documented in &lt;a href=&quot;perlipc#Signals&quot;&gt;&quot;Signals&quot; in perlipc&lt;/a&gt; and the section on &quot;Signals&quot; in the Camel. You may instead use the more flexible &lt;a href=&quot;Sys::AlarmCall&quot;&gt;Sys::AlarmCall&lt;/a&gt; module available from CPAN.</source>
          <target state="translated">&lt;a href=&quot;perlipc#Signals&quot;&gt;perlipcの「Signals」&lt;/a&gt;およびCamelの「Signals」のセクションに記載されているように、おそらくシグナルハンドラーと組み合わせて &lt;code&gt;alarm()&lt;/code&gt; 関数を使用します。代わりに、CPANから入手できるより柔軟な&lt;a href=&quot;Sys::AlarmCall&quot;&gt;Sys :: AlarmCall&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="d4da56703364cf0ee0a03e41789d4d68cbdaa546" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;rand()&lt;/code&gt; function (see &lt;a href=&quot;perlfunc#rand&quot;&gt;&quot;rand&quot; in perlfunc&lt;/a&gt;):</source>
          <target state="translated">&lt;code&gt;rand()&lt;/code&gt; 関数を使用します（&lt;a href=&quot;perlfunc#rand&quot;&gt;perlfuncの「rand」を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7d52ddc8b7977a545ad663296d7fb2fca1b0f239" translate="yes" xml:space="preserve">
          <source>Use the Configure &lt;code&gt;-Dgccansipedantic&lt;/code&gt; flag to enable the gcc &lt;code&gt;-ansi
-pedantic&lt;/code&gt; flags which enforce stricter ANSI rules.</source>
          <target state="translated">より厳格なANSIルールを適用するgcc &lt;code&gt;-ansi -pedantic&lt;/code&gt; &lt;code&gt;-Dgccansipedantic&lt;/code&gt; フラグを有効にするには、Configure -Dgccansipedanticフラグを使用します。</target>
        </trans-unit>
        <trans-unit id="ddf13da36f032e379ae4d2a3b1c1bae344b15223" translate="yes" xml:space="preserve">
          <source>Use the MY_CXT macro to access members of the &lt;code&gt;my_cxt_t&lt;/code&gt; struct. For example, if &lt;code&gt;my_cxt_t&lt;/code&gt; is</source>
          <target state="translated">MY_CXTマクロを使用して、 &lt;code&gt;my_cxt_t&lt;/code&gt; 構造体のメンバーにアクセスします。たとえば、 &lt;code&gt;my_cxt_t&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="209d781836e6b1246a37a402443979bfc102b6da" translate="yes" xml:space="preserve">
          <source>Use the alternate DATA command &quot;BDAT&quot; of the data chunking service extension defined in RFC1830 for efficiently sending large MIME messages.</source>
          <target state="translated">大きなMIMEメッセージを効率的に送信するために、RFC1830で定義されているデータチャンキングサービス拡張の代替DATAコマンド「BDAT」を使用する。</target>
        </trans-unit>
        <trans-unit id="3b568a8fe0839108748606587d3b5ef52fd93b31" translate="yes" xml:space="preserve">
          <source>Use the author's favorite set of formatting conventions. This is the default, of course.</source>
          <target state="translated">作者の好きな書式設定を使用してください。もちろんこれがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="9ac34b7ac482595c74c32af79b7d65f665861078" translate="yes" xml:space="preserve">
          <source>Use the backslash ('\') character for quoting: every occurrence of a backslash followed by a character in the pattern is replaced by that character, avoiding any special interpretation of the character. (But see below for exceptions on DOSISH systems).</source>
          <target state="translated">引用にはバックスラッシュ ('\')文字を使います。バックスラッシュの後にパターン内の文字が続くと、その文字に置き換えられ、その文字の特別な解釈を避けることができます。ただし、DOSISH システムでの例外については以下を参照してください)。</target>
        </trans-unit>
        <trans-unit id="58c791ac75ac6f9811d7c1cd895cf02a99e988fc" translate="yes" xml:space="preserve">
          <source>Use the dMY_CXT macro (a declaration) in all the functions that access MY_CXT.</source>
          <target state="translated">MY_CXTにアクセスするすべての関数でdMY_CXTマクロ(宣言)を使用します。</target>
        </trans-unit>
        <trans-unit id="a11c34555178b87ed57024b7506fd7ffd640c9ab" translate="yes" xml:space="preserve">
          <source>Use the default &quot;cmd&quot; shell that comes with Windows. Some versions of the popular 4DOS/NT shell have incompatibilities that may cause you trouble. If the build fails under that shell, try building again with the cmd shell.</source>
          <target state="translated">Windowsに付属しているデフォルトの「cmd」シェルを使用します。人気のある 4DOS/NT シェルのいくつかのバージョンには互換性がないものがあり、それがトラブルの原因になることがあります。そのシェルでビルドに失敗した場合は、cmd シェルでビルドし直してみてください。</target>
        </trans-unit>
        <trans-unit id="e7eb918841419258515e4bb838ed4565f624f56c" translate="yes" xml:space="preserve">
          <source>Use the default answer for a prompted questions. &lt;code&gt;cpan(1)&lt;/code&gt; sets this to &lt;code&gt;1&lt;/code&gt; unless it already has a value (even if that value is false).</source>
          <target state="translated">プロンプトが表示された質問には、デフォルトの回答を使用します。 &lt;code&gt;cpan(1)&lt;/code&gt; は、すでに値がない限り（その値がfalseであっても）、これを &lt;code&gt;1&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="860daa28ec194a818f5b182bccd22928db406092" translate="yes" xml:space="preserve">
          <source>Use the default to produce the *.dll's. But for new archdir dll's use the same rebase address if the old exists.</source>
          <target state="translated">.dll を生成するにはデフォルトを使用してください。しかし、新しいarchdirのdllは、古いものが存在する場合は同じリベースアドレスを使用してください。</target>
        </trans-unit>
        <trans-unit id="e1fc4198386c0572da6a991c5d426478433e6323" translate="yes" xml:space="preserve">
          <source>Use the external tar program instead of Archive::Tar?</source>
          <target state="translated">Archive::Tar の代わりに外部の tar プログラムを使用しますか?</target>
        </trans-unit>
        <trans-unit id="4bac2574d114ae82b8fd263b9459dca50bff3c24" translate="yes" xml:space="preserve">
          <source>Use the following simple functions:</source>
          <target state="translated">以下の簡単な機能を使用します。</target>
        </trans-unit>
        <trans-unit id="82c21f5742907cbf65bd7db33516fce8af244b3d" translate="yes" xml:space="preserve">
          <source>Use the force pragma like so</source>
          <target state="translated">forceプラグマを次のように使用します。</target>
        </trans-unit>
        <trans-unit id="d7f075c6e2b64b3ce706fb827bca3411e7b8504c" translate="yes" xml:space="preserve">
          <source>Use the key mentioned at</source>
          <target state="translated">で述べたキーを使用します。</target>
        </trans-unit>
        <trans-unit id="718a478ced25e8295348d28c5a0bc5741996efff" translate="yes" xml:space="preserve">
          <source>Use the libwww-perl distribution. The &lt;a href=&quot;http://search.cpan.org/perldoc/LWP::Simple&quot;&gt;LWP::Simple&lt;/a&gt; module can fetch web resources and give their content back to you as a string:</source>
          <target state="translated">libwww-perlディストリビューションを使用します。&lt;a href=&quot;http://search.cpan.org/perldoc/LWP::Simple&quot;&gt;LWP :: Simpleは&lt;/a&gt;モジュールは、Webリソースを取得し、文字列としてあなたに自分のコンテンツ背中を与えることができます：</target>
        </trans-unit>
        <trans-unit id="cb1603df2ef00841c0d9bacb479a841ff6e25e94" translate="yes" xml:space="preserve">
          <source>Use the macros STMT_START and STMT_END.</source>
          <target state="translated">マクロ STMT_START と STMT_END を使用します。</target>
        </trans-unit>
        <trans-unit id="c888fae92abf19a81b4d142f09c5f461d8d9608c" translate="yes" xml:space="preserve">
          <source>Use the name of the class for the object reference, &lt;code&gt;$object&lt;/code&gt; , as the warnings category.</source>
          <target state="translated">警告カテゴリとして、オブジェクト参照のクラスの名前 &lt;code&gt;$object&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8491a8784c79488d26c7a0776126752e369c73a7" translate="yes" xml:space="preserve">
          <source>Use the name of the class for the object reference, &lt;code&gt;$object&lt;/code&gt;, as the warnings category.</source>
          <target state="translated">警告カテゴリとして、オブジェクト参照のクラス名 &lt;code&gt;$object&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="90b334d1699fa8ac1b699ca7fe59817de25916cf" translate="yes" xml:space="preserve">
          <source>Use the new &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators to avoid having to parenthesize list operators so much, and to reduce the incidence of punctuation operators like &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;. Call your subroutines as if they were functions or list operators to avoid excessive ampersands and parentheses.</source>
          <target state="translated">リスト演算子を括弧で &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 、&amp;amp;&amp;amp;や &lt;code&gt;||&lt;/code&gt; のような句読点演算子の出現率を減らすために、新しい &lt;code&gt;and&lt;/code&gt; および &lt;code&gt;or&lt;/code&gt; 演算子を使用します。。アンパサンドや括弧を過度に使用しないように、関数やリスト演算子のようにサブルーチンを呼び出します。</target>
        </trans-unit>
        <trans-unit id="442188b51b5e18cf49fd3890247d5179d50e4049" translate="yes" xml:space="preserve">
          <source>Use the object-oriented interface if fine-grained control of when a file is removed is required.</source>
          <target state="translated">ファイルを削除する際のきめ細かな制御が必要な場合は、オブジェクト指向インターフェースを使用します。</target>
        </trans-unit>
        <trans-unit id="79265afb000f4991752261ca28217b5c373e53aa" translate="yes" xml:space="preserve">
          <source>Use the perlrebase or rebase utilities to resolve the conflicting dll addresses. The rebase package is included in the Cygwin setup. Use</source>
          <target state="translated">競合する dll アドレスを解決するには perlrebase または rebase ユーティリティを使用してください。rebase パッケージは Cygwin セットアップに含まれています。使用するには</target>
        </trans-unit>
        <trans-unit id="406dad7fa9a9b85a63a25268f65100875c7b49a3" translate="yes" xml:space="preserve">
          <source>Use the prototyped versions (see above) for a more generic alternative.</source>
          <target state="translated">より一般的な代替案には、プロトタイピングされたバージョン(上記参照)を使用してください。</target>
        </trans-unit>
        <trans-unit id="62599a293da2f7d3226d049d02a58beb44cfc269" translate="yes" xml:space="preserve">
          <source>Use the reaper code from &lt;a href=&quot;perlipc#Signals&quot;&gt;&quot;Signals&quot; in perlipc&lt;/a&gt; to call &lt;code&gt;wait()&lt;/code&gt; when a SIGCHLD is received, or else use the double-fork technique described in &lt;a href=&quot;perlfaq8#How-do-I-start-a-process-in-the-background%3F&quot;&gt;&quot;How do I start a process in the background?&quot; in perlfaq8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlipc#Signals&quot;&gt;perlipcの「Signals」&lt;/a&gt;のリーパーコードを使用して、SIGCHLDを受信したときに &lt;code&gt;wait()&lt;/code&gt; を呼び出す&lt;a href=&quot;perlfaq8#How-do-I-start-a-process-in-the-background%3F&quot;&gt;か、「バックグラウンドでプロセスを開始するにはどうすればよいですか？」で&lt;/a&gt;説明されているダブルフォーク手法を使用します。perlfaq8で。</target>
        </trans-unit>
        <trans-unit id="0801908980e9c580009d45c4098d1486f12c00b2" translate="yes" xml:space="preserve">
          <source>Use the reaper code from &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; to call &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; when a SIGCHLD is received, or else use the double-fork technique described in &lt;a href=&quot;perlfaq8#How-do-I-start-a-process-in-the-background%3f&quot;&gt;How do I start a process in the background? in perlfaq8&lt;/a&gt;.</source>
          <target state="translated">SIGCHLDを受信したときに、&lt;a href=&quot;perlipc#Signals&quot;&gt;perlipcのシグナル&lt;/a&gt;からのリーパーコードを使用して &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; を呼び出すか、または&lt;a href=&quot;perlfaq8#How-do-I-start-a-process-in-the-background%3f&quot;&gt;バックグラウンドでプロセスを開始するに&lt;/a&gt;はどうすればよいですか？perlfaq8で。</target>
        </trans-unit>
        <trans-unit id="4ab1865ade7c5cbdf616d9cfa7bc296cc942c842" translate="yes" xml:space="preserve">
          <source>Use the split function:</source>
          <target state="translated">分割機能を使用します。</target>
        </trans-unit>
        <trans-unit id="a9b5bca0abebc1d76df512275844e6baf7fca732" translate="yes" xml:space="preserve">
          <source>Use the three-argument form to open a file with arbitrary weird characters in it,</source>
          <target state="translated">任意の変な文字が入ったファイルを開くには、3引数形式を使用します。</target>
        </trans-unit>
        <trans-unit id="0e2045ea69cf09267eda92b39d5360c52617d312" translate="yes" xml:space="preserve">
          <source>Use the warnings category with the same name as the current package.</source>
          <target state="translated">現在のパッケージと同じ名前の警告カテゴリを使用します。</target>
        </trans-unit>
        <trans-unit id="0293445fabb340233713c8257ab81530a2889bf1" translate="yes" xml:space="preserve">
          <source>Use these rather than &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; , &lt;code&gt;stderr&lt;/code&gt; . They are written to look like &quot;function calls&quot; rather than variables because this makes it easier to</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; ではなく、これらを使用してください。それらは変数ではなく「関数呼び出し」のように見えるように書かれています。</target>
        </trans-unit>
        <trans-unit id="78393279cde85921d8f8c6fd4c6e8e7d77ff04aa" translate="yes" xml:space="preserve">
          <source>Use these rather than &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;. They are written to look like &quot;function calls&quot; rather than variables because this makes it easier to</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、 &lt;code&gt;stderr&lt;/code&gt; ではなくこれらを使用してください。変数ではなく「関数呼び出し」のように見えるように記述されているため、</target>
        </trans-unit>
        <trans-unit id="a81fa8275577903400d658f76e856afcaee1f2f2" translate="yes" xml:space="preserve">
          <source>Use these very, very, very sparingly.</source>
          <target state="translated">これらを非常に、非常に、惜しげもなく使いましょう。</target>
        </trans-unit>
        <trans-unit id="87ebb269f56a9a915023b69eabf6ff027e2f7e0c" translate="yes" xml:space="preserve">
          <source>Use this code, provided by Mark-Jason Dominus:</source>
          <target state="translated">マークジェイソン・ドミニスが提供するこのコードを使用してください。</target>
        </trans-unit>
        <trans-unit id="077f386270655a39a44d9dc249821c4b0ca20a1d" translate="yes" xml:space="preserve">
          <source>Use this if you need to write your own tool that wraps a call to &lt;code&gt;context()&lt;/code&gt; with the intent that it should return a context object.</source>
          <target state="translated">これは、 &lt;code&gt;context()&lt;/code&gt; の呼び出しをラップして、コンテキストオブジェクトを返すことを目的とした独自のツールを作成する必要がある場合に使用します。</target>
        </trans-unit>
        <trans-unit id="1a99888f271041405f93aa8e81d9f5a2d2c20746" translate="yes" xml:space="preserve">
          <source>Use this instead of $(PERL) when you wish to run perl to work with modules. It will add things like -I$(INST_ARCH) and other necessary flags so perl can see the modules you're about to install.</source>
          <target state="translated">モジュールを扱うために perl を実行したい場合は $(perl)の代わりにこれを使用します。これは、-I$(INST_ARCH)のようなものやその他の必要なフラグを追加して、インストールしようとしているモジュールをperlが見ることができるようにします。</target>
        </trans-unit>
        <trans-unit id="388121ab9a82a1ad19377b89ac9de297ea8e7f2c" translate="yes" xml:space="preserve">
          <source>Use this instead of $(PERL) when you wish to run perl. It will set up extra necessary flags for you.</source>
          <target state="translated">perlを実行したいときは、$(perl)の代わりにこれを使ってください。これはあなたのために必要なフラグを余分に設定してくれます。</target>
        </trans-unit>
        <trans-unit id="e6433f54cefa63ecf9e10e3ca3a566ca9eb8f9de" translate="yes" xml:space="preserve">
          <source>Use this instead:</source>
          <target state="translated">代わりにこれを使ってください。</target>
        </trans-unit>
        <trans-unit id="9482ca604a352c4ff781a10e825ea8768f370ffb" translate="yes" xml:space="preserve">
          <source>Use this module like this:</source>
          <target state="translated">このモジュールはこんな感じで使います。</target>
        </trans-unit>
        <trans-unit id="97690b2f31ef7f268036c43fc7989b79968edf4d" translate="yes" xml:space="preserve">
          <source>Use this parameter if you want to obtain the context for a specific hub instead of whatever one happens to be at the top of the stack.</source>
          <target state="translated">スタックの先頭にあるハブではなく、特定のハブのコンテキストを取得したい場合は、このパラメータを使用します。</target>
        </trans-unit>
        <trans-unit id="cd556107fd0fb942951a496b76d8c5f95f2102d6" translate="yes" xml:space="preserve">
          <source>Use this to add behaviors that are called just before the hub is finalized. The only argument to your codeblock will be a &lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;Test2::EventFacet::Trace&lt;/a&gt; instance.</source>
          <target state="translated">これを使用して、ハブがファイナライズされる直前に呼び出される動作を追加します。&lt;a href=&quot;Test2::EventFacet::Trace&quot;&gt;コード&lt;/a&gt;ブロックへの唯一の引数は、Test2 :: EventFacet :: Traceインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="24fd134a2b3d96c5cbea104957e21046321bc6c3" translate="yes" xml:space="preserve">
          <source>Use this to build perl outside of the source tree. Details can be found in the</source>
          <target state="translated">これを使って、ソースツリーの外側にperlをビルドします。詳細は</target>
        </trans-unit>
        <trans-unit id="163162b126000a656e356ab3254dffb8d7962901" translate="yes" xml:space="preserve">
          <source>Use this to disassociate a file from a PerlIO * that was associated using PerlIO_exportFILE().</source>
          <target state="translated">PerlIO_exportFILE()を使用して関連付けられたPerlIO*からファイルの関連付けを解除するために使用します。</target>
        </trans-unit>
        <trans-unit id="b543720e8daabc3733964f244cca2d14e58df202" translate="yes" xml:space="preserve">
          <source>Use this:</source>
          <target state="translated">これを使って</target>
        </trans-unit>
        <trans-unit id="307626673e0bd7f8495318897a6981cd297178f1" translate="yes" xml:space="preserve">
          <source>Use to turn numbers on and off.</source>
          <target state="translated">数字のオンオフに使用します。</target>
        </trans-unit>
        <trans-unit id="03038b4251119aa1c25d1f79aa4a7d76f09e6350" translate="yes" xml:space="preserve">
          <source>Use tree connecting characters drawn from the VT100 line-drawing set. This looks better if your terminal supports it.</source>
          <target state="translated">VT100 の線画セットから描画されたツリー接続文字を使用します。端末がこれをサポートしている場合は、この方が良いようです。</target>
        </trans-unit>
        <trans-unit id="5b877243c67d7922e8d87750811b66b31f1b397f" translate="yes" xml:space="preserve">
          <source>Use underscores to separate words. It is generally easier to read $var_names_like_this than $VarNamesLikeThis, especially for non-native speakers of English. It's also a simple rule that works consistently with VAR_NAMES_LIKE_THIS.</source>
          <target state="translated">単語の区切りにはアンダースコアを使用します。一般的には $VarNamesLikeThis よりも $var_names_like_this の方が、特に英語を母国語としない人にとっては読みやすいです。また、var_names_like_thisと一貫して動作するシンプルなルールです。</target>
        </trans-unit>
        <trans-unit id="a9f6d10a6d2104b7922abf95412d3e52031b3d8b" translate="yes" xml:space="preserve">
          <source>Use unrelated features (this will flush out bizarre interactions).</source>
          <target state="translated">無関係な機能を使う(これは奇妙な相互作用を洗い流す)。</target>
        </trans-unit>
        <trans-unit id="94264aa782503bfc93a9d2198fe0a7492052ef22" translate="yes" xml:space="preserve">
          <source>Use with older Unicode versions</source>
          <target state="translated">古い Unicode バージョンでの使用</target>
        </trans-unit>
        <trans-unit id="4735554e1398f969b06e194368a7ba44c81db126" translate="yes" xml:space="preserve">
          <source>Used as a custom trace message that will be used INSTEAD of &lt;code&gt;at &amp;lt;FILE&amp;gt; line &amp;lt;LINE&amp;gt;&lt;/code&gt; when calling &lt;code&gt;$trace-&amp;gt;debug&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$trace-&amp;gt;debug&lt;/code&gt; 呼び出すときに &lt;code&gt;at &amp;lt;FILE&amp;gt; line &amp;lt;LINE&amp;gt;&lt;/code&gt; INSTEADで使用されるカスタムトレースメッセージとして使用されます。</target>
        </trans-unit>
        <trans-unit id="b5b5116cfec58023d905fc9d5b3040b726593cef" translate="yes" xml:space="preserve">
          <source>Used as a noun in this case, this refers to a known way to compromise a program to get it to do something the author didn&amp;rsquo;t intend. Your task is to write unexploitable programs.</source>
          <target state="translated">この場合、名詞として使用されます。これは、プログラムを危険にさらして、作者の意図しない動作をさせる既知の方法を指します。あなたの仕事は悪用できないプログラムを書くことです。</target>
        </trans-unit>
        <trans-unit id="79c6d27106d07e0f5897103d8c6a8d8a85ec8bb1" translate="yes" xml:space="preserve">
          <source>Used as a noun, a name in a &lt;b&gt;directory&lt;/b&gt; that represents a &lt;b&gt;file&lt;/b&gt;. A given file can have multiple links to it. It&amp;rsquo;s like having the same phone number listed in the phone directory under different names. As a verb, to resolve a partially &lt;b&gt;compiled&lt;/b&gt; file&amp;rsquo;s unresolved symbols into a (nearly) executable image. Linking can generally be static or dynamic, which has nothing to do with static or dynamic scoping.</source>
          <target state="translated">名詞として使用される、&lt;b&gt;ファイル&lt;/b&gt;を表す&lt;b&gt;ディレクトリ&lt;/b&gt;内の名前。特定のファイルには、複数のリンクを含めることができます。それは、同じ電話番号が電話帳に異なる名前でリストされているようなものです。動詞として、部分的に&lt;b&gt;コンパイルされた&lt;/b&gt;ファイルの未解決のシンボルを（ほぼ）実行可能なイメージに解決します。リンクは一般に静的または動的にすることができ、静的または動的スコープとは何の関係もありません。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="156b1ffab2a8f1b730df4187d04674edf41a68c8" translate="yes" xml:space="preserve">
          <source>Used as an lvalue, &lt;a href=&quot;#keys-HASH&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; allows you to increase the number of hash buckets allocated for the given hash. This can gain you a measure of efficiency if you know the hash is going to get big. (This is similar to pre-extending an array by assigning a larger number to $#array.) If you say</source>
          <target state="translated">左辺値として使用される&lt;a href=&quot;#keys-HASH&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;使用すると、特定のハッシュに割り当てられるハッシュバケットの数を増やすことができます。ハッシュが大きくなることがわかっている場合、これにより効率を測定できます。（これは、$＃arrayにより大きな数を割り当てて、配列を事前に拡張することに似ています。）</target>
        </trans-unit>
        <trans-unit id="5e94bf506fd2ed1897d55415e2eda38e61b816ec" translate="yes" xml:space="preserve">
          <source>Used as an lvalue, &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; allows you to increase the number of hash buckets allocated for the given hash. This can gain you a measure of efficiency if you know the hash is going to get big. (This is similar to pre-extending an array by assigning a larger number to $#array.) If you say</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 左辺値として使用すると、特定のハッシュに割り当てるハッシュバケットの数を増やすことができます。これにより、ハッシュが大きくなることがわかっている場合に、効率の尺度を得ることができます。（これは、より大きな数を$＃arrayに割り当てて配列を事前に拡張することに似ています。）</target>
        </trans-unit>
        <trans-unit id="cfcd9d6e7d0af6a973640e08731f7579c85d2ca6" translate="yes" xml:space="preserve">
          <source>Used as an lvalue, &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; allows you to increase the number of hash buckets allocated for the given hash. This can gain you a measure of efficiency if you know the hash is going to get big. (This is similar to pre-extending an array by assigning a larger number to $#array.) If you say</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; 左辺値として使用すると、特定のハッシュに割り当てるハッシュバケットの数を増やすことができます。これにより、ハッシュが大きくなることがわかっている場合に、効率の尺度を得ることができます。（これは、より大きな数を$＃arrayに割り当てて配列を事前に拡張することに似ています。）</target>
        </trans-unit>
        <trans-unit id="9d927fa8ae51a19f16800a69ce9d19da2c120815" translate="yes" xml:space="preserve">
          <source>Used as part of the &quot;clone&quot; process when a thread is spawned (in which case param will be non-NULL) and when a stream is being duplicated via '&amp;amp;' in the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スレッドが生成された場合（この場合、paramはNULL以外になります）、および &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; で '＆'を介してストリームが複製されている場合、「クローン」プロセスの一部として使用されます。</target>
        </trans-unit>
        <trans-unit id="60459c86df13f14efd5dda77730301e787cdfe33" translate="yes" xml:space="preserve">
          <source>Used as part of the &quot;clone&quot; process when a thread is spawned (in which case param will be non-NULL) and when a stream is being duplicated via '&amp;amp;' in the &lt;code&gt;open&lt;/code&gt;.</source>
          <target state="translated">スレッドが生成されたとき（この場合、paramはNULL以外になります）、および &lt;code&gt;open&lt;/code&gt; で「＆」を介してストリームが複製されているときに、「クローン」プロセスの一部として使用されます。</target>
        </trans-unit>
        <trans-unit id="251c18a90eefe3a719259f59bb8700c29e6c2e54" translate="yes" xml:space="preserve">
          <source>Used by 'make install' which copies files from INST_SCRIPT to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">INSTALLDIRS が site (デフォルト)に設定されている場合、 INST_SCRIPT からこのディレクトリにファイルをコピーする 'make install' で使用されます。</target>
        </trans-unit>
        <trans-unit id="0413527e465c4de8a077bbf425ed66e91381919a" translate="yes" xml:space="preserve">
          <source>Used by 'make install' which copies files from INST_SCRIPT to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">INSTALLDIRS が vendor に設定されている場合、 INST_SCRIPT からこのディレクトリにファイルをコピーする 'make install' で使用されます。</target>
        </trans-unit>
        <trans-unit id="976bda008ac56ae36683d29627c3f35a11dab1ca" translate="yes" xml:space="preserve">
          <source>Used by 'make install' which copies files from INST_SCRIPT to this directory if INSTALLDIRS=perl.</source>
          <target state="translated">INSTALLDIRS=perl の場合に INST_SCRIPT からこのディレクトリにファイルをコピーする 'make install' で使用されます。</target>
        </trans-unit>
        <trans-unit id="37d1058a6b6ba0e70de245f908c09c85ed3a873d" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to perl.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が perl に設定されている場合に INST_ARCHLIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="8402b50cbc218eeff1f81c3db2cda9adf3fffbd7" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が site (デフォルト)に設定されている場合に INST_ARCHLIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="c4c8328bf8916ab5fdd86eb62de06cc4f4230a70" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合に INST_ARCHLIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="6ce5a40c4c3e0c16a95489eab9cd3e9eb723f24b" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_ARCHLIB to this directory if INSTALLDIRS is set to vendor. Note that if you do not set this, the value of INSTALLVENDORLIB will be used, which is probably not what you want.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合は INST_ARCHLIB からこのディレクトリにファイルをコピーします。これを設定しないと、INSTALLVENDORLIB の値が使われることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3b0cddfea5d7479fbfb7a215e845b5a123be89bb" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_BIN to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が site (デフォルト)に設定されている場合に INST_BIN からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="eb49c11648bc66ca1d5846b99271ffd0d898ea32" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_BIN to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合に INST_BIN からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="2b07ebb6cc38d7286ba9e956f3eba69a5ff528fe" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_LIB to this directory if INSTALLDIRS is set to perl.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が perl に設定されている場合に INST_LIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="4c572796939181da5eba99b899ab05bfaac9e449" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_LIB to this directory if INSTALLDIRS is set to site (default).</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が site (デフォルト)に設定されている場合に INST_LIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="497f3b2bdeaf3749352a862b66d7233b6bb7365e" translate="yes" xml:space="preserve">
          <source>Used by 'make install', which copies files from INST_LIB to this directory if INSTALLDIRS is set to vendor.</source>
          <target state="translated">make install' で使用され、INSTALLDIRS が vendor に設定されている場合に INST_LIB からこのディレクトリにファイルをコピーします。</target>
        </trans-unit>
        <trans-unit id="955b442432c35e6b42d1db59049e0e27c3353bce" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;xsubpp&lt;/code&gt; to hook up XSUBs as Perl subs.</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; がXSUBをPerlのsubとしてフックするために使用します。</target>
        </trans-unit>
        <trans-unit id="5d2c2e15661d8694f28fe98eab4f73a7c1f9a721" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;xsubpp&lt;/code&gt; to hook up XSUBs as Perl subs. &lt;code&gt;filename&lt;/code&gt; needs to be static storage, as it is used directly as CvFILE(), without a copy being made.</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; がXSUBをPerlサブとして接続するために使用します。 &lt;code&gt;filename&lt;/code&gt; は、コピーを作成せずにCvFILE（）として直接使用されるため、静的ストレージである必要があります。</target>
        </trans-unit>
        <trans-unit id="b701e8ad52984344882bfc710f4e3b41bfee3ae7" translate="yes" xml:space="preserve">
          <source>Used by &lt;code&gt;xsubpp&lt;/code&gt; to hook up XSUBs as Perl subs. Adds Perl prototypes to the subs.</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; がXSUBをPerlのsubとしてフックするために使用します。サブルーチンにPerlプロトタイプを追加します。</target>
        </trans-unit>
        <trans-unit id="bf413f31411cb5187dfc08c3a35d494612fab477" translate="yes" xml:space="preserve">
          <source>Used by Unicode internally for generating other properties and not intended to be used stand-alone</source>
          <target state="translated">他のプ ロ パテ ィ を生成す る ために内部的に Unicode で使用 さ れ、 単独での使用は意図 さ れていません。</target>
        </trans-unit>
        <trans-unit id="4e698d59aaba8e3ee1c30011c41b0b74d5937cc8" translate="yes" xml:space="preserve">
          <source>Used by a &lt;b&gt;standard I/O&lt;/b&gt; output stream that flushes its &lt;b&gt;buffer&lt;/b&gt; after every &lt;b&gt;newline&lt;/b&gt;. Many standard I/O libraries automatically set up line buffering on output that is going to the terminal.</source>
          <target state="translated">&lt;b&gt;改行&lt;/b&gt;ごとに&lt;b&gt;バッファ&lt;/b&gt;をフラッシュする&lt;b&gt;標準I / O&lt;/b&gt;出力ストリームによって使用され&lt;b&gt;ます&lt;/b&gt;。多くの標準I / Oライブラリは、端末に送られる出力にラインバッファリングを自動的に設定します。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e00976e80fe78228b9297b3ddbd122a14f1abe1f" translate="yes" xml:space="preserve">
          <source>Used by some OS' to define DL_FUNCS and DL_VARS and write the *.exp files.</source>
          <target state="translated">いくつかの OS で DL_FUNCS と DL_VARS を定義し、*.exp ファイルを書き込むために使用されます。</target>
        </trans-unit>
        <trans-unit id="b189d5874fa8033758f781e723e54b376d23c484" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;IS_SAFE_SYSCALL()&lt;/code&gt; macro.</source>
          <target state="translated">&lt;code&gt;IS_SAFE_SYSCALL()&lt;/code&gt; マクロによって使用されます。</target>
        </trans-unit>
        <trans-unit id="1ba26d0698fc6f53589c3fcda2fd4a8860e0e9f9" translate="yes" xml:space="preserve">
          <source>Used by the IS_SAFE_SYSCALL() macro.</source>
          <target state="translated">IS_SAFE_SYSCALL()マクロで使用されます。</target>
        </trans-unit>
        <trans-unit id="c2253cb286405345c16b81c3000c80dff0161abd" translate="yes" xml:space="preserve">
          <source>Used during the execution phase for managing search and replace patterns, and for providing the text for &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$1&lt;/code&gt; etc. &lt;code&gt;subbeg&lt;/code&gt; points to a buffer (either the original string, or a copy in the case of &lt;code&gt;RX_MATCH_COPIED(rx)&lt;/code&gt; ), and &lt;code&gt;sublen&lt;/code&gt; is the length of the buffer. The &lt;code&gt;RX_OFFS&lt;/code&gt; start and end indices index into this buffer.</source>
          <target state="translated">実行フェーズ中に、検索と置換のパターンを管理し、 &lt;code&gt;$&amp;amp;&lt;/code&gt; や &lt;code&gt;$1&lt;/code&gt; などのテキストを提供するために使用されます。 &lt;code&gt;subbeg&lt;/code&gt; はバッファー（元の文字列、または &lt;code&gt;RX_MATCH_COPIED(rx)&lt;/code&gt; の場合はコピー）を &lt;code&gt;sublen&lt;/code&gt; 、サブレンバッファの長さです。 &lt;code&gt;RX_OFFS&lt;/code&gt; が開始し、このバッファへのインデックスのインデックスを終了します。</target>
        </trans-unit>
        <trans-unit id="651551117825faea8d09d9baa6928cc7c2bfd137" translate="yes" xml:space="preserve">
          <source>Used during the execution phase for managing search and replace patterns, and for providing the text for &lt;code&gt;$&amp;amp;&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt; etc. &lt;code&gt;subbeg&lt;/code&gt; points to a buffer (either the original string, or a copy in the case of &lt;code&gt;RX_MATCH_COPIED(rx)&lt;/code&gt;), and &lt;code&gt;sublen&lt;/code&gt; is the length of the buffer. The &lt;code&gt;RX_OFFS&lt;/code&gt; start and end indices index into this buffer.</source>
          <target state="translated">検索と置換のパターンを管理し、 &lt;code&gt;$&amp;amp;&lt;/code&gt; 、 &lt;code&gt;$1&lt;/code&gt; などのテキストを提供するために実行フェーズで使用されます &lt;code&gt;subbeg&lt;/code&gt; はバッファ（元の文字列、または &lt;code&gt;RX_MATCH_COPIED(rx)&lt;/code&gt; の場合はコピー）を &lt;code&gt;sublen&lt;/code&gt; 、sublenはバッファの長さです。 &lt;code&gt;RX_OFFS&lt;/code&gt; が開始し、このバッファへのインデックスのインデックスを終了します。</target>
        </trans-unit>
        <trans-unit id="b11724fb66b5b88866c9924f1327c02f9213cd90" translate="yes" xml:space="preserve">
          <source>Used for asynchronous IO in Win32 to get the result of a pending IO operation, such as when a file operation returns &lt;code&gt;ERROR_IO_PENDING&lt;/code&gt;. Returns a false value on failure. The &lt;code&gt;$overlapped&lt;/code&gt; structure and &lt;code&gt;$numBytesTransferred&lt;/code&gt; will be modified with the results of the operation.</source>
          <target state="translated">ファイル操作が &lt;code&gt;ERROR_IO_PENDING&lt;/code&gt; を返す場合など、保留中のIO操作の結果を取得するためにWin32の非同期IOに使用されます。失敗するとfalse値を返します。 &lt;code&gt;$overlapped&lt;/code&gt; 構造と &lt;code&gt;$numBytesTransferred&lt;/code&gt; 操作の結果を用いて変更されます。</target>
        </trans-unit>
        <trans-unit id="c07d1ff394d728bbcdaa2001c2857f1cf7faa30d" translate="yes" xml:space="preserve">
          <source>Used for emphasis (&quot;&lt;code&gt;be I&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;) and parameters (&quot;&lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; I&amp;lt;LABEL&amp;gt;&lt;/code&gt; &quot;)</source>
          <target state="translated">強調（ &quot; &lt;code&gt;be I&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;）およびパラメーター（ &quot; &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt; I&amp;lt;LABEL&amp;gt;&lt;/code&gt; &quot;）に使用</target>
        </trans-unit>
        <trans-unit id="79101ddce726e177f648ccb97fafe6e35ba41948" translate="yes" xml:space="preserve">
          <source>Used for emphasis (&quot;&lt;code&gt;be I&amp;lt;careful!&amp;gt;&lt;/code&gt;&quot;) and parameters (&quot;&lt;code&gt;redo I&amp;lt;LABEL&amp;gt;&lt;/code&gt;&quot;)</source>
          <target state="translated">強調（ &quot; &lt;code&gt;be I&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;）およびパラメーター（ &quot; &lt;code&gt;redo I&amp;lt;LABEL&amp;gt;&lt;/code&gt; &quot;）に使用されます</target>
        </trans-unit>
        <trans-unit id="7d3c574527f056e37525c76d104fc8a22ad9cc2b" translate="yes" xml:space="preserve">
          <source>Used for optimisations. &lt;code&gt;precomp&lt;/code&gt; holds a copy of the pattern that was compiled and &lt;code&gt;prelen&lt;/code&gt; its length. When a new pattern is to be compiled (such as inside a loop) the internal &lt;code&gt;regcomp&lt;/code&gt; operator checks if the last compiled &lt;code&gt;REGEXP&lt;/code&gt; 's &lt;code&gt;precomp&lt;/code&gt; and &lt;code&gt;prelen&lt;/code&gt; are equivalent to the new one, and if so uses the old pattern instead of compiling a new one.</source>
          <target state="translated">最適化に使用されます。 &lt;code&gt;precomp&lt;/code&gt; コンパイルとされたパターンのコピーを保持している &lt;code&gt;prelen&lt;/code&gt; その長さを。新しいパターンは、（例えばループ内のように）内部コンパイルするとき &lt;code&gt;regcomp&lt;/code&gt; 最後にコンパイルした場合、オペレータの確認を &lt;code&gt;REGEXP&lt;/code&gt; の &lt;code&gt;precomp&lt;/code&gt; と &lt;code&gt;prelen&lt;/code&gt; が新しいものと同等であるので、新しいものをコンパイルするのではなく、古いパターンを使用している場合。</target>
        </trans-unit>
        <trans-unit id="865769afa1ae4a2862cdd9a060f4d353ff5ed9bc" translate="yes" xml:space="preserve">
          <source>Used for optimisations. &lt;code&gt;precomp&lt;/code&gt; holds a copy of the pattern that was compiled and &lt;code&gt;prelen&lt;/code&gt; its length. When a new pattern is to be compiled (such as inside a loop) the internal &lt;code&gt;regcomp&lt;/code&gt; operator checks if the last compiled &lt;code&gt;REGEXP&lt;/code&gt;'s &lt;code&gt;precomp&lt;/code&gt; and &lt;code&gt;prelen&lt;/code&gt; are equivalent to the new one, and if so uses the old pattern instead of compiling a new one.</source>
          <target state="translated">最適化に使用されます。 &lt;code&gt;precomp&lt;/code&gt; コンパイルとされたパターンのコピーを保持している &lt;code&gt;prelen&lt;/code&gt; その長さを。新しいパターンは、（例えばループ内のように）内部コンパイルするとき &lt;code&gt;regcomp&lt;/code&gt; 最後にコンパイルした場合、オペレータの確認を &lt;code&gt;REGEXP&lt;/code&gt; の &lt;code&gt;precomp&lt;/code&gt; と &lt;code&gt;prelen&lt;/code&gt; が新しいものと同等であるので、新しいものをコンパイルするのではなく、古いパターンを使用している場合。</target>
        </trans-unit>
        <trans-unit id="c16a1dda4419ca1fa42a25c2f463240abdf22010" translate="yes" xml:space="preserve">
          <source>Used for switches (&quot;&lt;code&gt;perl's B&amp;lt;-n&amp;gt; switch&lt;/code&gt; &quot;), programs (&quot;&lt;code&gt;some systems provide a B&amp;lt;chfn&amp;gt; for that&lt;/code&gt; &quot;), emphasis (&quot;&lt;code&gt;be B&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;), and so on (&quot;&lt;code&gt;and that feature is known as B&amp;lt;autovivification&amp;gt;&lt;/code&gt; &quot;).</source>
          <target state="translated">スイッチ（ &quot; &lt;code&gt;perl's B&amp;lt;-n&amp;gt; switch&lt;/code&gt; &quot;）、プログラム（ &quot; &lt;code&gt;some systems provide a B&amp;lt;chfn&amp;gt; for that&lt;/code&gt; &quot;）、強調（ &quot; &lt;code&gt;be B&amp;lt;careful!&amp;gt;&lt;/code&gt; &quot;）など（ &quot; &lt;code&gt;and that feature is known as B&amp;lt;autovivification&amp;gt;&lt;/code&gt; 」として知られています。</target>
        </trans-unit>
        <trans-unit id="df0534ab5cb2156a670b02757216f26561c5b81d" translate="yes" xml:space="preserve">
          <source>Used for switches (&quot;&lt;code&gt;perl's B&amp;lt;-n&amp;gt; switch&lt;/code&gt;&quot;), programs (&quot;&lt;code&gt;some systems provide a B&amp;lt;chfn&amp;gt; for that&lt;/code&gt;&quot;), emphasis (&quot;&lt;code&gt;be B&amp;lt;careful!&amp;gt;&lt;/code&gt;&quot;), and so on (&quot;&lt;code&gt;and that feature is known as B&amp;lt;autovivification&amp;gt;&lt;/code&gt;&quot;).</source>
          <target state="translated">スイッチ（「 &lt;code&gt;perl's B&amp;lt;-n&amp;gt; switch&lt;/code&gt; 」）、プログラム（「 &lt;code&gt;some systems provide a B&amp;lt;chfn&amp;gt; for that&lt;/code&gt; 」）、強調（「 &lt;code&gt;be B&amp;lt;careful!&amp;gt;&lt;/code&gt; 」）などに使用されます（「」 &lt;code&gt;and that feature is known as B&amp;lt;autovivification&amp;gt;&lt;/code&gt; &quot;）として知られています。</target>
        </trans-unit>
        <trans-unit id="8d00f06e1f81e3c4218071563a3bababae3c7eab" translate="yes" xml:space="preserve">
          <source>Used for test.pl, since they don't always follow Test::Harness formatting.</source>
          <target state="translated">test::Harnessのフォーマットに常に従っているとは限らないので、test.plに使用されます。</target>
        </trans-unit>
        <trans-unit id="85f7caced82a8f0a4057356aaa1e87b6b4b7ead3" translate="yes" xml:space="preserve">
          <source>Used if &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; has no argument and HOME is not set.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; に引数がなく、HOMEが設定されていない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="a5442b49ecc1bae306f70b5a25e1762fda194c70" translate="yes" xml:space="preserve">
          <source>Used if &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; has no argument.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; に引数がない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="2d410f6de438cbb26b911cf2f15b03b4afc869a3" translate="yes" xml:space="preserve">
          <source>Used if &lt;code&gt;chdir&lt;/code&gt; has no argument and &lt;a href=&quot;#HOME&quot;&gt;&quot;HOME&quot;&lt;/a&gt; is not set.</source>
          <target state="translated">&lt;code&gt;chdir&lt;/code&gt; に引数がなく、&lt;a href=&quot;#HOME&quot;&gt;「HOME」&lt;/a&gt;が設定されていない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="d3e2be660d398830c6421721e5380bb05f4d11e3" translate="yes" xml:space="preserve">
          <source>Used if &lt;code&gt;chdir&lt;/code&gt; has no argument.</source>
          <target state="translated">&lt;code&gt;chdir&lt;/code&gt; に引数がない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b449b1e6003f0a47a3ac7a7f3e867aa4d2d04e46" translate="yes" xml:space="preserve">
          <source>Used if chdir has no argument and &lt;a href=&quot;#HOME&quot;&gt;&quot;HOME&quot;&lt;/a&gt; and &lt;a href=&quot;#LOGDIR&quot;&gt;&quot;LOGDIR&quot;&lt;/a&gt; are not set.</source>
          <target state="translated">chdirに引数がなく、&lt;a href=&quot;#HOME&quot;&gt;「HOME」&lt;/a&gt;と&lt;a href=&quot;#LOGDIR&quot;&gt;「LOGDIR」&lt;/a&gt;が設定されていない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="5908b09f62d202af9a5d54ac62b509abf705e1f4" translate="yes" xml:space="preserve">
          <source>Used if chdir has no argument and HOME and LOGDIR are not set.</source>
          <target state="translated">chdirに引数がなく、HOMEとLOGDIRが設定されていない場合に使用します。</target>
        </trans-unit>
        <trans-unit id="9b97a5382104ef747655a54d5cf00ae2ece3ac3e" translate="yes" xml:space="preserve">
          <source>Used in conjunction with the &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; option to supply a reference to an &lt;code&gt;@ARGV&lt;/code&gt; style array of arguments to pass to the test program.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; オプションと共に使用して、テストプログラムに渡す引数の &lt;code&gt;@ARGV&lt;/code&gt; スタイル配列への参照を提供します。</target>
        </trans-unit>
        <trans-unit id="c8a38191bc46f4249b043c38ac454629a53d827f" translate="yes" xml:space="preserve">
          <source>Used in conjunction with the &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt; option to supply a reference to an &lt;code&gt;@ARGV&lt;/code&gt; style array of arguments to pass to the test program.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; および &lt;code&gt;exec&lt;/code&gt; オプションと組み合わせて使用​​して、テストプログラムに渡す引数の &lt;code&gt;@ARGV&lt;/code&gt; スタイルの配列への参照を提供します。</target>
        </trans-unit>
        <trans-unit id="f3b4f9fcc830680942e63427a2c44eed84c782ab" translate="yes" xml:space="preserve">
          <source>Used in conjunction with the &lt;code&gt;strcoll()&lt;/code&gt; function, see &lt;a href=&quot;#strcoll&quot;&gt;&quot;strcoll&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;strcoll()&lt;/code&gt; 関数と組み合わせて使用​​します。&lt;a href=&quot;#strcoll&quot;&gt;「strcoll」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="477606f47e75aab0d16ae4c72010e54847d20bed" translate="yes" xml:space="preserve">
          <source>Used in conjunction with the &lt;code&gt;strcoll()&lt;/code&gt; function, see &lt;a href=&quot;#strcoll&quot;&gt;strcoll&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;strcoll()&lt;/code&gt; 関数と組み合わせて使用​​します&lt;a href=&quot;#strcoll&quot;&gt;。strcollを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3a75b2e9b8ac8650e725e7c98fe7339411bb3bfc" translate="yes" xml:space="preserve">
          <source>Used in executing subprocesses, and in finding the program if &lt;a href=&quot;#-S&quot;&gt;&quot;-S&quot;&lt;/a&gt; is used.</source>
          <target state="translated">サブプロセスの実行、および&lt;a href=&quot;#-S&quot;&gt;「-S」&lt;/a&gt;が使用されている場合のプログラムの検索に使用されます。</target>
        </trans-unit>
        <trans-unit id="0096c9408c39e5114a134ce424b3de68995688e0" translate="yes" xml:space="preserve">
          <source>Used in executing subprocesses, and in finding the program if &lt;b&gt;-S&lt;/b&gt; is used.</source>
          <target state="translated">サブプロセスの実行、および&lt;b&gt;-S&lt;/b&gt;が使用されている場合のプログラムの検索に使用されます。</target>
        </trans-unit>
        <trans-unit id="ba44e70b36f71f9050217be51cd85d85bdb4c810" translate="yes" xml:space="preserve">
          <source>Used internally to perform logging; imported from Log::Contextual if Log::Contextual has already been loaded, otherwise simply calls warn.</source>
          <target state="translated">Log::Contextual が既にロードされている場合は Log::Contextual からインポートされ、そうでない場合は単に warn を呼び出します。</target>
        </trans-unit>
        <trans-unit id="fc7e238a8b39d615018cf421f51aee97a59ca55c" translate="yes" xml:space="preserve">
          <source>Used on numbers, the bitwise operators (&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;^&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ) always produce integral results. (But see also &lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;Bitwise String Operators&lt;/a&gt;.) However, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; still has meaning for them. By default, their results are interpreted as unsigned integers, but if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; is in effect, their results are interpreted as signed integers. For example, &lt;code&gt;~0&lt;/code&gt; usually evaluates to a large integral value. However, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer; ~0&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; on two's-complement machines.</source>
          <target state="translated">数値で使用すると、ビットごとの演算子（ &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;~&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ）は常に整数の結果を生成します。（しかし、&lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;ビットごとの文字列演算子&lt;/a&gt;も参照してください。）ただし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;することは、それらにとってまだ意味があります。デフォルトでは、結果は符号なし整数として解釈されますが、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer&lt;/code&gt; が有効な場合、結果は符号付き整数として解釈されます。たとえば、 &lt;code&gt;~0&lt;/code&gt; は通常、大きな整数値に評価されます。ただし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; integer; ~0&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用してください&lt;/a&gt;。〜0である &lt;code&gt;-1&lt;/code&gt; 2の補数のマシンで。</target>
        </trans-unit>
        <trans-unit id="17440f7ceac2f06faa3db667512e4a58e695c9fb" translate="yes" xml:space="preserve">
          <source>Used on numbers, the bitwise operators (&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;^&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;) always produce integral results. (But see also &lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;&quot;Bitwise String Operators&quot;&lt;/a&gt;.) However, &lt;code&gt;use integer&lt;/code&gt; still has meaning for them. By default, their results are interpreted as unsigned integers, but if &lt;code&gt;use integer&lt;/code&gt; is in effect, their results are interpreted as signed integers. For example, &lt;code&gt;~0&lt;/code&gt; usually evaluates to a large integral value. However, &lt;code&gt;use integer; ~0&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt; on two's-complement machines.</source>
          <target state="translated">数値に使用されるビット単位の演算子（ &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;~&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; ）は、常に整数の結果を生成します。（ただし、&lt;a href=&quot;#Bitwise-String-Operators&quot;&gt;「ビット単位の文字列演算子」&lt;/a&gt;も参照してください。）ただし、 &lt;code&gt;use integer&lt;/code&gt; は意味があります。デフォルトでは、結果は符号なし整数として解釈されますが、 &lt;code&gt;use integer&lt;/code&gt; が有効な場合、結果は符号付き整数として解釈されます。たとえば、 &lt;code&gt;~0&lt;/code&gt; は通常、大きな整数値に評価されます。ただし、 &lt;code&gt;use integer; ~0&lt;/code&gt; である &lt;code&gt;-1&lt;/code&gt; 2の補数のマシンで。</target>
        </trans-unit>
        <trans-unit id="22f1fcd6bfd2f48fba3948a9e62685e57c7db9d1" translate="yes" xml:space="preserve">
          <source>Used on the t/*.t files.</source>
          <target state="translated">t/*.tファイルで使用します。</target>
        </trans-unit>
        <trans-unit id="a64dabf0b28b220a6076bc6a581b9356f3e76610" translate="yes" xml:space="preserve">
          <source>Used only when MakeMaker is building the extensions of the Perl core distribution (because normally $(PERL_ARCHLIB) is automatically in @INC, and adding it would get in the way of PERL5LIB).</source>
          <target state="translated">MakeMakerがPerlコアディストリビューションの拡張機能をビルドするときにのみ使用されます(通常は@INCに$(PERL_ARCHLIB)が自動的に入っており、追加するとPERL5LIBの邪魔になるからです)。</target>
        </trans-unit>
        <trans-unit id="522904b951ae26afa223c455d7c6bd2555ea2781" translate="yes" xml:space="preserve">
          <source>Used only when MakeMaker is building the extensions of the Perl core distribution (because normally $(PERL_LIB) is automatically in @INC, and adding it would get in the way of PERL5LIB).</source>
          <target state="translated">MakeMakerがPerlのコアディストリビューションの拡張機能をビルドしているときにのみ使用します(通常は$(PERL_LIB)が自動的に@INCに入っているので、追加するとPERL5LIBの邪魔になるからです)。</target>
        </trans-unit>
        <trans-unit id="f0b6e6daa054441299880d327c03ad5022b9eb54" translate="yes" xml:space="preserve">
          <source>Used to access elements on the XSUB's stack.</source>
          <target state="translated">XSUB のスタック上の要素にアクセスするために使用します。</target>
        </trans-unit>
        <trans-unit id="e35e54c290e520db893e920267b9220db378f0a1" translate="yes" xml:space="preserve">
          <source>Used to check if any errata was seen.</source>
          <target state="translated">正誤表が見られたかどうかを確認するために使用します。</target>
        </trans-unit>
        <trans-unit id="87a9aa1ba364ad0831ad8d0593884f266cd7c93e" translate="yes" xml:space="preserve">
          <source>Used to choose the LZMA compression preset.</source>
          <target state="translated">LZMA圧縮プリセットを選択するために使用します。</target>
        </trans-unit>
        <trans-unit id="95a475746591bd4adeab810bf6982b243a52a9b8" translate="yes" xml:space="preserve">
          <source>Used to collect events that have been sent to the specified hub.</source>
          <target state="translated">指定したハブに送信されたイベントを収集するために使用します。</target>
        </trans-unit>
        <trans-unit id="7c52aa40f13bb513d24fe0ba0fa19d6fcc4a443a" translate="yes" xml:space="preserve">
          <source>Used to compare numbers.</source>
          <target state="translated">数字の比較に使用します。</target>
        </trans-unit>
        <trans-unit id="c48ef407eccd138f057ccc3292baa7a78dede864" translate="yes" xml:space="preserve">
          <source>Used to describe a &lt;b&gt;referent&lt;/b&gt; that is not directly accessible through a named &lt;b&gt;variable&lt;/b&gt;. Such a referent must be indirectly accessible through at least one &lt;b&gt;hard reference&lt;/b&gt;. When the last hard reference goes away, the anonymous referent is destroyed without pity.</source>
          <target state="translated">名前付き&lt;b&gt;変数を&lt;/b&gt;介して直接アクセスできない&lt;b&gt;参照先&lt;/b&gt;を記述するために使用され&lt;b&gt;ます&lt;/b&gt;。そのような指示対象は、少なくとも1つの&lt;b&gt;ハード参照&lt;/b&gt;を通じて間接的にアクセスできる必要があります。最後のハード参照がなくなると、匿名の指示対象は残念なことに破壊されます。</target>
        </trans-unit>
        <trans-unit id="68eae2d00f0bb0e45444425d5ef88e0a25c713c4" translate="yes" xml:space="preserve">
          <source>Used to extend the argument stack for an XSUB's return values. Once used, guarantees that there is room for at least &lt;code&gt;nitems&lt;/code&gt; to be pushed onto the stack.</source>
          <target state="translated">XSUBの戻り値の引数スタックを拡張するために使用されます。一度使用すると、少なくとも &lt;code&gt;nitems&lt;/code&gt; がスタックにプッシュされる余地があることが保証されます。</target>
        </trans-unit>
        <trans-unit id="c9d6ff55b3e514bbe849f67e44d09a8a1f610db4" translate="yes" xml:space="preserve">
          <source>Used to force a Perl &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; wrapper around a callback. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">コールバックの周りのPerl &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ラッパーを強制するために使用されます。&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a32052445fd30952e9db91bbfd242c9623786635" translate="yes" xml:space="preserve">
          <source>Used to force a Perl &lt;code&gt;eval&lt;/code&gt; wrapper around a callback. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">コールバックの周りに &lt;code&gt;eval&lt;/code&gt; ラッパーを強制するために使用されます。&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="de62f27495e3f33e099616750808f449be5f2cfc" translate="yes" xml:space="preserve">
          <source>Used to get a PerlIO * from a FILE *.</source>
          <target state="translated">FILE *からPerlIO *を取得するのに使用しました。</target>
        </trans-unit>
        <trans-unit id="7db1f3e9a417bfe913cd54ab43ac2c865165aafc" translate="yes" xml:space="preserve">
          <source>Used to get/set a custom trace message that will be used INSTEAD of &lt;code&gt;at &amp;lt;FILE&amp;gt; line &amp;lt;LINE&amp;gt;&lt;/code&gt; when calling &lt;code&gt;$trace-&amp;gt;debug&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$trace-&amp;gt;debug&lt;/code&gt; 呼び出すときに &lt;code&gt;at &amp;lt;FILE&amp;gt; line &amp;lt;LINE&amp;gt;&lt;/code&gt; 代わりに使用されるカスタムトレースメッセージを取得/設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ea613d2ba362c35f2ce83afc90e661e1230c489c" translate="yes" xml:space="preserve">
          <source>Used to indicate list context. See &lt;code&gt;&lt;a href=&quot;#GIMME_V&quot;&gt;&quot;GIMME_V&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#GIMME&quot;&gt;&quot;GIMME&quot;&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">リストのコンテキストを示すために使用されます。 &lt;code&gt;&lt;a href=&quot;#GIMME_V&quot;&gt;&quot;GIMME_V&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#GIMME&quot;&gt;&quot;GIMME&quot;&lt;/a&gt;&lt;/code&gt; 、および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e5f86f7323575cf5c768f8e5109eb6cf3318d1d9" translate="yes" xml:space="preserve">
          <source>Used to indicate list context. See &lt;code&gt;GIMME_V&lt;/code&gt; , &lt;code&gt;GIMME&lt;/code&gt; and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">リストのコンテキストを示すために使用されます。 &lt;code&gt;GIMME_V&lt;/code&gt; 、 &lt;code&gt;GIMME&lt;/code&gt; および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b2cec7805880b122f75804dfbb39c718dc242d42" translate="yes" xml:space="preserve">
          <source>Used to indicate scalar context. See &lt;code&gt;&lt;a href=&quot;#GIMME_V&quot;&gt;&quot;GIMME_V&quot;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#GIMME&quot;&gt;&quot;GIMME&quot;&lt;/a&gt;&lt;/code&gt;, and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">スカラーコンテキストを示すために使用されます。 &lt;code&gt;&lt;a href=&quot;#GIMME_V&quot;&gt;&quot;GIMME_V&quot;&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#GIMME&quot;&gt;&quot;GIMME&quot;&lt;/a&gt;&lt;/code&gt; 、および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a930c77deebf229f4a954c4d6804d1b626a7c0da" translate="yes" xml:space="preserve">
          <source>Used to indicate scalar context. See &lt;code&gt;GIMME_V&lt;/code&gt; , &lt;code&gt;GIMME&lt;/code&gt; , and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">スカラーコンテキストを示すために使用されます。 &lt;code&gt;GIMME_V&lt;/code&gt; 、 &lt;code&gt;GIMME&lt;/code&gt; 、および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3bf05fcf106f8a5c8937c4b2441e36694da0a3cf" translate="yes" xml:space="preserve">
          <source>Used to indicate void context. See &lt;code&gt;&lt;a href=&quot;#GIMME_V&quot;&gt;&quot;GIMME_V&quot;&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">無効なコンテキストを示すために使用されます。 &lt;code&gt;&lt;a href=&quot;#GIMME_V&quot;&gt;&quot;GIMME_V&quot;&lt;/a&gt;&lt;/code&gt; および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="06d42cedd073f96c9a77c4270da2ab3e95ee0de9" translate="yes" xml:space="preserve">
          <source>Used to indicate void context. See &lt;code&gt;GIMME_V&lt;/code&gt; and &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;.</source>
          <target state="translated">voidコンテキストを示すために使用されます。 &lt;code&gt;GIMME_V&lt;/code&gt; および&lt;a href=&quot;perlcall&quot;&gt;perlcallを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9bb1d0a62eb268dccff9ee670a0b1ed19d224173" translate="yes" xml:space="preserve">
          <source>Used to negate the object in-place.</source>
          <target state="translated">その場にあるオブジェクトを否定するために使用します。</target>
        </trans-unit>
        <trans-unit id="7ab9fb9e2f57ebf6032a373e79745b71c5c594eb" translate="yes" xml:space="preserve">
          <source>Used to pass in and return a reference to an SV.</source>
          <target state="translated">SVへの参照をパスインして返すときに使用します。</target>
        </trans-unit>
        <trans-unit id="02c1be0e858c6b96b18473855240486ec63fb69b" translate="yes" xml:space="preserve">
          <source>Used to pass in and return a reference to an SV. This is a fixed variant of T_SVREF that decrements the refcount appropriately when returning a reference to an SV*. Introduced in perl 5.15.4.</source>
          <target state="translated">SV への参照を渡して返すために使用されます。これは、SV*への参照を返す際に refcount を適切にデクリメントする T_SVREF の固定型です。perl 5.15.4 で導入されました。</target>
        </trans-unit>
        <trans-unit id="6329119f5669ee995c8c52570e1c5977a8800ad7" translate="yes" xml:space="preserve">
          <source>Used to send events from the current process/thread to the specified hub in its process+thread.</source>
          <target state="translated">現在のプロセス/スレッドから、そのプロセス+スレッド内の指定されたハブにイベントを送信するために使用します。</target>
        </trans-unit>
        <trans-unit id="c91a5082aa2e7c4d29d7e1b996780ca43a12407b" translate="yes" xml:space="preserve">
          <source>Used to shift numbers left/right.</source>
          <target state="translated">数字を左右にずらすのに使用します。</target>
        </trans-unit>
        <trans-unit id="68e033a11c06f9ce51ea9813275c9343d35e3bef" translate="yes" xml:space="preserve">
          <source>Used to signal that a phase change has occurred. Currently only the perl END phase is signaled.</source>
          <target state="translated">フェーズの変更が発生したことを知らせるために使用します。現在は perl の END フェーズのみがシグナルされています。</target>
        </trans-unit>
        <trans-unit id="0d8dbe24f6294c1f64efbbb4b95eb12824022d6a" translate="yes" xml:space="preserve">
          <source>Used to upgrade an SV to a more complex form. Uses &lt;code&gt;sv_upgrade&lt;/code&gt; to perform the upgrade if necessary. See &lt;code&gt;&lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SVをより複雑な形式にアップグレードするために使用されます。用途は &lt;code&gt;sv_upgrade&lt;/code&gt; 、必要に応じてアップグレードを実行します。 &lt;code&gt;&lt;a href=&quot;#svtype&quot;&gt;&quot;svtype&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3deb258f4b48416c1a5909b948e6f301fdab02b0" translate="yes" xml:space="preserve">
          <source>Used to upgrade an SV to a more complex form. Uses &lt;code&gt;sv_upgrade&lt;/code&gt; to perform the upgrade if necessary. See &lt;code&gt;svtype&lt;/code&gt; .</source>
          <target state="translated">SVをより複雑な形式にアップグレードするために使用されます。用途は &lt;code&gt;sv_upgrade&lt;/code&gt; 、必要に応じてアップグレードを実行します。 &lt;code&gt;svtype&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fcb5d7f5c46a099246ea8a6f9905effe5c22e13c" translate="yes" xml:space="preserve">
          <source>Used together, as &lt;code&gt;/ms&lt;/code&gt;, they let the &quot;.&quot; match any character whatsoever, while still allowing &quot;^&quot; and &quot;$&quot; to match, respectively, just after and just before newlines within the string.</source>
          <target state="translated">&lt;code&gt;/ms&lt;/code&gt; と一緒に使用すると、「。」が使用されます。文字列内の改行の直後と直前にそれぞれ「^」と「$」が一致することを許可しながら、すべての文字に一致します。</target>
        </trans-unit>
        <trans-unit id="a984f0517a02a95514aa7849e322ad2bba528af2" translate="yes" xml:space="preserve">
          <source>Used together, as &lt;code&gt;/ms&lt;/code&gt;, they let the &lt;code&gt;&quot;.&quot;&lt;/code&gt; match any character whatsoever, while still allowing &lt;code&gt;&quot;^&quot;&lt;/code&gt; and &lt;code&gt;&quot;$&quot;&lt;/code&gt; to match, respectively, just after and just before newlines within the string.</source>
          <target state="translated">&lt;code&gt;/ms&lt;/code&gt; として一緒に使用すると、 &lt;code&gt;&quot;.&quot;&lt;/code&gt; 文字列内の改行の直後と直前で、それぞれ &lt;code&gt;&quot;^&quot;&lt;/code&gt; と &lt;code&gt;&quot;$&quot;&lt;/code&gt; を一致させながら、任意の文字に一致します。</target>
        </trans-unit>
        <trans-unit id="6fa27f5c1082734ec40392b2d9f3d19afd0775e2" translate="yes" xml:space="preserve">
          <source>Used when creating PPD files for binary packages. It can be set to a full or relative path or URL to the binary archive for a particular architecture. For example:</source>
          <target state="translated">バイナリパッケージ用の PPD ファイルを作成する際に使用します。これは、特定のアーキテクチャ用のバイナリアーカイブへのフルパスまたは相対パス、または URL を設定することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0efa982fe3c01dc21ffac634d0623c22f8078dad" translate="yes" xml:space="preserve">
          <source>Used when the layer's open() accepts more arguments than usual. The extra arguments should come not before the &lt;code&gt;MODE&lt;/code&gt; argument. When this flag is used it's up to the layer to validate the args.</source>
          <target state="translated">レイヤーのopen（）が通常より多くの引数を受け入れるときに使用されます。余分な引数は、 &lt;code&gt;MODE&lt;/code&gt; 引数の前に置かないでください。このフラグを使用する場合、引数を検証するのはレイヤー次第です。</target>
        </trans-unit>
        <trans-unit id="cdd67bcd97e446b57807bc47ce4d7da189f0ad26" translate="yes" xml:space="preserve">
          <source>Used with the example above, &lt;code&gt;@libfiles&lt;/code&gt; (or &lt;code&gt;@$libfiles&lt;/code&gt; ) would contain two strings upon completion: &lt;code&gt;&quot;lib/stdlib&quot;&lt;/code&gt; and &lt;code&gt;&quot;lib/extlib&quot;&lt;/code&gt; , in that order. It is also possible to specify that only integer or floating point numbers are acceptable values.</source>
          <target state="translated">上記の例で使用した場合、 &lt;code&gt;@$libfiles&lt;/code&gt; &lt;code&gt;@libfiles&lt;/code&gt; （または@ $ libfiles）には、 &lt;code&gt;&quot;lib/stdlib&quot;&lt;/code&gt; と &lt;code&gt;&quot;lib/extlib&quot;&lt;/code&gt; 順に2つの文字列が完了時に含まれます。整数または浮動小数点数のみが許容値であることを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="686b0cfb7edf72aaa48c42035c97b73729e54164" translate="yes" xml:space="preserve">
          <source>Used with the example above, &lt;code&gt;@libfiles&lt;/code&gt; c.q. &lt;code&gt;@$libfiles&lt;/code&gt; would contain two strings upon completion: &lt;code&gt;&quot;lib/stdlib&quot;&lt;/code&gt; and &lt;code&gt;&quot;lib/extlib&quot;&lt;/code&gt;, in that order. It is also possible to specify that only integer or floating point numbers are acceptable values.</source>
          <target state="translated">上記の例で使用すると、 &lt;code&gt;@$libfiles&lt;/code&gt; &lt;code&gt;@libfiles&lt;/code&gt; cq @ $ libfilesには、完了時に &lt;code&gt;&quot;lib/stdlib&quot;&lt;/code&gt; と &lt;code&gt;&quot;lib/extlib&quot;&lt;/code&gt; 2つの文字列がこの順序で含まれます。整数または浮動小数点数のみが許容値として指定することもできます。</target>
        </trans-unit>
        <trans-unit id="d539b8e87e848f4ea03e572c54286711be989ac8" translate="yes" xml:space="preserve">
          <source>Used without arguments in scalar context, &lt;a href=&quot;#reverse-LIST&quot;&gt;&lt;code&gt;reverse&lt;/code&gt;&lt;/a&gt; reverses &lt;a href=&quot;perlvar#%24_&quot;&gt;&lt;code&gt;$_&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スカラコンテキストで引数なしで使用し、&lt;a href=&quot;#reverse-LIST&quot;&gt; &lt;code&gt;reverse&lt;/code&gt; &lt;/a&gt;反転&lt;a href=&quot;perlvar#%24_&quot;&gt; &lt;code&gt;$_&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32482e797407c687053869f8a4e7d0cfe24ca4f2" translate="yes" xml:space="preserve">
          <source>Used without arguments in scalar context, reverse() reverses &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">スカラーコンテキストで引数なしで使用すると、reverse（）は &lt;code&gt;$_&lt;/code&gt; 反転します。</target>
        </trans-unit>
        <trans-unit id="287fb92f0982907aa797c3b17e0824ad256b9b20" translate="yes" xml:space="preserve">
          <source>Useful functions for dealing with the filehandle and filename.</source>
          <target state="translated">ファイルハンドルやファイル名を扱うのに便利な関数です。</target>
        </trans-unit>
        <trans-unit id="f0b64588f00eed76bae59e12d25ea5d5e9aeab35" translate="yes" xml:space="preserve">
          <source>Useful modules to help you write tests (with minimum impact on your development process or your time) include Test::Simple, Carp::Assert and Test::Inline. For more sophisticated test suites there are Test::More and Test::MockObject.</source>
          <target state="translated">Test::Simple、Carp::Assert、Test::Inlineなど、開発プロセスや時間への影響を最小限に抑えてテストを書くのに役立つモジュールがあります。より洗練されたテストスイートには、Test::More や Test::MockObject があります。</target>
        </trans-unit>
        <trans-unit id="04355f5678f3ad8646b491395f68bd676dba02d6" translate="yes" xml:space="preserve">
          <source>Useful options of</source>
          <target state="translated">の便利なオプション</target>
        </trans-unit>
        <trans-unit id="7705a5ed12704795a74e0deb45a6e2191d0de39a" translate="yes" xml:space="preserve">
          <source>Useful values for &lt;code&gt;PERLDOC&lt;/code&gt; include &lt;code&gt;-oterm&lt;/code&gt; , &lt;code&gt;-otext&lt;/code&gt; , &lt;code&gt;-ortf&lt;/code&gt; , &lt;code&gt;-oxml&lt;/code&gt; , and so on, depending on what modules you have on hand; or the formatter class may be specified exactly with &lt;code&gt;-MPod::Perldoc::ToTerm&lt;/code&gt; or the like.</source>
          <target state="translated">&lt;code&gt;PERLDOC&lt;/code&gt; の有用な値には、 &lt;code&gt;-otext&lt;/code&gt; にあるモジュールに応じて、 &lt;code&gt;-oterm&lt;/code&gt; 、-otext、 &lt;code&gt;-ortf&lt;/code&gt; 、 &lt;code&gt;-oxml&lt;/code&gt; などがあります。または、フォーマッタクラスを &lt;code&gt;-MPod::Perldoc::ToTerm&lt;/code&gt; などで正確に指定できます。</target>
        </trans-unit>
        <trans-unit id="9b8aa89e83cee5e3ca309bd98b7ad5e6d2482f28" translate="yes" xml:space="preserve">
          <source>Useful values for &lt;code&gt;PERLDOC&lt;/code&gt; include &lt;code&gt;-oterm&lt;/code&gt;, &lt;code&gt;-otext&lt;/code&gt;, &lt;code&gt;-ortf&lt;/code&gt;, &lt;code&gt;-oxml&lt;/code&gt;, and so on, depending on what modules you have on hand; or the formatter class may be specified exactly with &lt;code&gt;-MPod::Perldoc::ToTerm&lt;/code&gt; or the like.</source>
          <target state="translated">&lt;code&gt;PERLDOC&lt;/code&gt; の有用な値には、 &lt;code&gt;-otext&lt;/code&gt; にあるモジュールに応じて、 &lt;code&gt;-oterm&lt;/code&gt; 、-otext、 &lt;code&gt;-ortf&lt;/code&gt; 、 &lt;code&gt;-oxml&lt;/code&gt; などがあります。または、フォーマッタクラスは &lt;code&gt;-MPod::Perldoc::ToTerm&lt;/code&gt; などで正確に指定できます。</target>
        </trans-unit>
        <trans-unit id="108f6902446d675962ade16c5ef5d6ed95723631" translate="yes" xml:space="preserve">
          <source>Useful, huh? You can eval nearly anything in there, and experiment with bits of code or regexes until the cows come home:</source>
          <target state="translated">役に立つだろ?ここではほとんど何でも評価できますし、牛が帰ってくるまでコードや正規表現を試してみることもできます。</target>
        </trans-unit>
        <trans-unit id="c71dc9b541dc8018b02adecc71f98a225f3ccc06" translate="yes" xml:space="preserve">
          <source>Useless (?%s) - use /%s modifier in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">役に立たない（？％s）-正規表現で/％s修飾子を使用します。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="4d6a9e2eda3ea6c7d73f3e707e7ed5269aa14f73" translate="yes" xml:space="preserve">
          <source>Useless (?-%s) - don't use /%s modifier in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">役に立たない（？-％s）-正規表現で/％s修飾子を使用しないでください。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="7b1a23dd36f92ed177c1832b7b7a0a0fece7983e" translate="yes" xml:space="preserve">
          <source>Useless assignment to a temporary</source>
          <target state="translated">無駄な仮配属</target>
        </trans-unit>
        <trans-unit id="17842187d2df7f0082511c734a4e6cdd38eac818" translate="yes" xml:space="preserve">
          <source>Useless localization of %s</source>
          <target state="translated">無用な %s のローカライズ</target>
        </trans-unit>
        <trans-unit id="b5177755cd0fdb62c51f6b4485b79f58ffe1af79" translate="yes" xml:space="preserve">
          <source>Useless use of &quot;re&quot; pragma</source>
          <target state="translated">re」プラグマの無駄な使い方</target>
        </trans-unit>
        <trans-unit id="f3cd952a4c24e6449dea1b01472de2758d858ccc" translate="yes" xml:space="preserve">
          <source>Useless use of %s in void context</source>
          <target state="translated">void コンテキストで %s を使用していません。</target>
        </trans-unit>
        <trans-unit id="531e23c28370cd335d5e05163d10e5c756434034" translate="yes" xml:space="preserve">
          <source>Useless use of %s with no values</source>
          <target state="translated">値のない %s の無駄な使用</target>
        </trans-unit>
        <trans-unit id="aa2f0ba2f4ce0c9566542ca020616ad5b9098770" translate="yes" xml:space="preserve">
          <source>Useless use of (?-p) in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現での（？-p）の無用な使用。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="ae262acf9642fbcf83b9ac3bddb3c7a0b90b3044" translate="yes" xml:space="preserve">
          <source>Useless use of /d modifier in transliteration operator</source>
          <target state="translated">音訳演算子での /d 修飾子の無駄な使用</target>
        </trans-unit>
        <trans-unit id="f322490cc9136ca5c6162d551690ef0e5090fce7" translate="yes" xml:space="preserve">
          <source>Useless use of \E</source>
          <target state="translated">♪Useless use of ††††††††††††††☆彡</target>
        </trans-unit>
        <trans-unit id="a1e9290b890dbc7ea19bb7968869cd494c601fd1" translate="yes" xml:space="preserve">
          <source>Useless use of attribute &quot;const&quot;</source>
          <target state="translated">属性 &quot;const&quot; の無駄な使用</target>
        </trans-unit>
        <trans-unit id="cd6f6c2ca209d2a1356342031126536b4e4ce875" translate="yes" xml:space="preserve">
          <source>Useless use of greediness modifier '%c' in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現での貪欲修飾子 '％c'の無用な使用。 &amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="2acb52c27a42a9b152f7b16b1ae62e6068996ad1" translate="yes" xml:space="preserve">
          <source>Useless use of sort in scalar context</source>
          <target state="translated">スカラコンテキストでのソートの無駄な使用</target>
        </trans-unit>
        <trans-unit id="d0da921253dc1698e885ee8fb4858aa3af66b911" translate="yes" xml:space="preserve">
          <source>User CPU Time</source>
          <target state="translated">ユーザーCPU時間</target>
        </trans-unit>
        <trans-unit id="fe3be132ee381a9663c71ca2a6207a31717e7705" translate="yes" xml:space="preserve">
          <source>User Datagram Protocol, the typical way to send &lt;b&gt;datagrams&lt;/b&gt; over the Internet.</source>
          <target state="translated">ユーザーデータグラムプロトコル。インターネット経由で&lt;b&gt;データグラム&lt;/b&gt;を送信する一般的な方法。</target>
        </trans-unit>
        <trans-unit id="3056b101498f0c6196c04d621ba22bd3175219d6" translate="yes" xml:space="preserve">
          <source>User Groups</source>
          <target state="translated">ユーザーグループ</target>
        </trans-unit>
        <trans-unit id="4325c61b581bf8fe6a3e2400d58928e7b9a55496" translate="yes" xml:space="preserve">
          <source>User Interfaces</source>
          <target state="translated">ユーザーインターフェース</target>
        </trans-unit>
        <trans-unit id="84956701ef226c2e8ce9adf59fb3ab8347d15b4f" translate="yes" xml:space="preserve">
          <source>User mounts override system mounts.</source>
          <target state="translated">ユーザーマウントはシステムマウントを上書きします。</target>
        </trans-unit>
        <trans-unit id="158586304dc1eef989a278eac13c889b9d8fde82" translate="yes" xml:space="preserve">
          <source>User pragmata store their state by writing to the magical hash &lt;code&gt;%^H&lt;/code&gt; , hence these two routines manipulate it. The state information in &lt;code&gt;%^H&lt;/code&gt; is stored in the optree, and can be retrieved read-only at runtime with &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt;, at index 10 of the list of returned results. In the example pragma, retrieval is encapsulated into the routine &lt;code&gt;in_effect()&lt;/code&gt; , which takes as parameter the number of call frames to go up to find the value of the pragma in the user's script. This uses &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; to determine the value of &lt;code&gt;$^H{&quot;myint/in_effect&quot;}&lt;/code&gt; when each line of the user's script was called, and therefore provide the correct semantics in the subroutine implementing the overloaded addition.</source>
          <target state="translated">ユーザープラグマは、魔法のハッシュ &lt;code&gt;%^H&lt;/code&gt; に書き込むことで状態を保存します。したがって、これらの2つのルーチンがそれを操作します。 &lt;code&gt;%^H&lt;/code&gt; の状態情報はoptreeに格納され、実行時に &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; を使用して、返された結果のリストのインデックス10で読み取り専用で取得できます。サンプルのプラグマでは、検索はルーチン &lt;code&gt;in_effect()&lt;/code&gt; にカプセル化されます。これは、ユーザーのスクリプトでプラグマの値を見つけるために上がる呼び出しフレームの数をパラメーターとして受け取ります。これは、 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller()&lt;/a&gt;&lt;/code&gt; を使用して、ユーザーのスクリプトの各行が呼び出されたときに &lt;code&gt;$^H{&quot;myint/in_effect&quot;}&lt;/code&gt; の値を決定します。したがって、オーバーロードされた追加を実装するサブルーチンで正しいセマンティクスを提供します。</target>
        </trans-unit>
        <trans-unit id="f856a6046b9f6cae5f15c166d8fa49ca391fb027" translate="yes" xml:space="preserve">
          <source>User pragmata store their state by writing to the magical hash &lt;code&gt;%^H&lt;/code&gt;, hence these two routines manipulate it. The state information in &lt;code&gt;%^H&lt;/code&gt; is stored in the optree, and can be retrieved read-only at runtime with &lt;code&gt;caller()&lt;/code&gt;, at index 10 of the list of returned results. In the example pragma, retrieval is encapsulated into the routine &lt;code&gt;in_effect()&lt;/code&gt;, which takes as parameter the number of call frames to go up to find the value of the pragma in the user's script. This uses &lt;code&gt;caller()&lt;/code&gt; to determine the value of &lt;code&gt;$^H{&quot;myint/in_effect&quot;}&lt;/code&gt; when each line of the user's script was called, and therefore provide the correct semantics in the subroutine implementing the overloaded addition.</source>
          <target state="translated">ユーザープラグマタは、魔法のハッシュ &lt;code&gt;%^H&lt;/code&gt; に書き込むことで状態を保存するため、これら2つのルーチンがそれを操作します。 &lt;code&gt;%^H&lt;/code&gt; の状態情報は、optreeに格納され、返された結果のリストのインデックス10で、 &lt;code&gt;caller()&lt;/code&gt; を使用して実行時に読み取り専用で取得できます。プラグマの例では、取得はルーチン &lt;code&gt;in_effect()&lt;/code&gt; にカプセル化されます。このルーチンは、ユーザーのスクリプトでプラグマの値を見つけるために上がる呼び出しフレームの数をパラメーターとして受け取ります。これは、 &lt;code&gt;caller()&lt;/code&gt; を使用して、ユーザーのスクリプトの各行が呼び出されたときに &lt;code&gt;$^H{&quot;myint/in_effect&quot;}&lt;/code&gt; の値を決定するため、オーバーロードされた加算を実装するサブルーチンに正しいセマンティクスを提供します。</target>
        </trans-unit>
        <trans-unit id="94ffd06de7d6ceb23de314937b25f1039f95408e" translate="yes" xml:space="preserve">
          <source>User-Defined Case Mappings (for serious hackers only)</source>
          <target state="translated">ユーザ定義のケースマッピング(シリアスなハッカー専用</target>
        </trans-unit>
        <trans-unit id="021fce3b8ed64c4c7ea81643b8e56e61d1fb88d9" translate="yes" xml:space="preserve">
          <source>User-Defined Character Properties</source>
          <target state="translated">ユーザー定義の文字プロパティ</target>
        </trans-unit>
        <trans-unit id="d44dccc14b24e3c801b9e26a3683449430f65550" translate="yes" xml:space="preserve">
          <source>User-defined properties must begin with &quot;In&quot; or &quot;Is&quot;. These override any Unicode property of the same name.</source>
          <target state="translated">ユーザー定義プ ロ パテ ィ は、 「In」 または 「Is」 で始ま る 必要があ り ます。これらは、同名のUnicodeプロパティを上書きします。</target>
        </trans-unit>
        <trans-unit id="8bdd4953a2aaaf5875fdc9a6599aaccd9331209f" translate="yes" xml:space="preserve">
          <source>User-defined subroutines may choose to care whether they are being called in a void, scalar, or list context. Most subroutines do not need to bother, though. That's because both scalars and lists are automatically interpolated into lists. See &lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt; for how you would dynamically discern your function's calling context.</source>
          <target state="translated">ユーザー定義のサブルーチンは、void、スカラー、またはリストのコンテキストで呼び出されているかどうかを気にすることを選択できます。しかし、ほとんどのサブルーチンは気にする必要はありません。これは、スカラーとリストの両方が自動的にリストに挿入されるためです。関数の呼び出しコンテキストを動的に識別する方法については、&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8b42037c5b1c84227a8152688f10f03ea3163be6" translate="yes" xml:space="preserve">
          <source>User-defined subroutines may choose to care whether they are being called in a void, scalar, or list context. Most subroutines do not need to bother, though. That's because both scalars and lists are automatically interpolated into lists. See &lt;a href=&quot;perlfunc#wantarray&quot;&gt;&quot;wantarray&quot; in perlfunc&lt;/a&gt; for how you would dynamically discern your function's calling context.</source>
          <target state="translated">ユーザー定義のサブルーチンは、それらがvoid、スカラー、またはリストのコンテキストで呼び出されているかどうかを気にすることを選択できます。ただし、ほとんどのサブルーチンはわざわざする必要はありません。これは、スカラーとリストの両方が自動的にリストに補間されるためです。関数の呼び出しコンテキストを動的に識別する方法について&lt;a href=&quot;perlfunc#wantarray&quot;&gt;は、perlfuncの「wantarray」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04b3f7fd0444d60354dbca146d3a101a49d16754" translate="yes" xml:space="preserve">
          <source>User-defined subroutines to handle options</source>
          <target state="translated">オプションを処理するためのユーザー定義のサブルーチン</target>
        </trans-unit>
        <trans-unit id="c2c8678cd5e840290be2cdc362d36d4139b6821c" translate="yes" xml:space="preserve">
          <source>User-mode threads are threads that live entirely within a program and its libraries. In this model, the OS knows nothing about threads. As far as it's concerned, your process is just a process.</source>
          <target state="translated">ユーザーモードのスレッドは、プログラムとそのライブラリ内に完全に存在するスレッドです。このモデルでは、OSはスレッドについて何も知りません。それが関係している限り、あなたのプロセスはただのプロセスです。</target>
        </trans-unit>
        <trans-unit id="5e4e64aff0ba218cc4ec3a0635d41a38135e5b7e" translate="yes" xml:space="preserve">
          <source>User::grent</source>
          <target state="translated">User::grent</target>
        </trans-unit>
        <trans-unit id="5e0090a6a9d55bf78a5f019a9872cf7e4308c124" translate="yes" xml:space="preserve">
          <source>User::grent - by-name interface to Perl's built-in getgr*() functions</source>
          <target state="translated">User::grent-Perl の組み込み関数 getgr*()への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="a2bda03ecc876d5bf92fb7707c3e5918fe5160b9" translate="yes" xml:space="preserve">
          <source>User::pwent</source>
          <target state="translated">User::pwent</target>
        </trans-unit>
        <trans-unit id="c4a9575f1a385e0c0339a3155858dfaa2331a364" translate="yes" xml:space="preserve">
          <source>User::pwent - by-name interface to Perl's built-in getpw*() functions</source>
          <target state="translated">User::pwent-Perl の組み込み getpw*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="7a5c186766f7254fdc2c4d1f6c57403c2bb4c28b" translate="yes" xml:space="preserve">
          <source>Users must ensure that URLs are properly escaped for unsafe characters and that international domain names are properly encoded to ASCII. See &lt;a href=&quot;URI::Escape&quot;&gt;URI::Escape&lt;/a&gt;, &lt;a href=&quot;URI::_punycode&quot;&gt;URI::_punycode&lt;/a&gt; and &lt;a href=&quot;Net::IDN::Encode&quot;&gt;Net::IDN::Encode&lt;/a&gt;.</source>
          <target state="translated">ユーザーは、安全でない文字に対してURLが適切にエスケープされていること、および国際ドメイン名がASCIIに適切にエンコードされていることを確認する必要があります。&lt;a href=&quot;URI::Escape&quot;&gt;URI :: Escape&lt;/a&gt;、&lt;a href=&quot;URI::_punycode&quot;&gt;URI :: _punycode&lt;/a&gt;および&lt;a href=&quot;Net::IDN::Encode&quot;&gt;Net :: IDN :: Encodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5dc8b5002e114f1d2e85c5074d99f142b8068508" translate="yes" xml:space="preserve">
          <source>Users of &lt;b&gt;vi&lt;/b&gt; should also look into &lt;b&gt;vim&lt;/b&gt; and &lt;b&gt;gvim&lt;/b&gt;, the mousey and windy version, for coloring of Perl keywords.</source>
          <target state="translated">&lt;b&gt;viの&lt;/b&gt;ユーザーは、Perlキーワードの色付けのために、マウスバージョンとウィンディバージョンの&lt;b&gt;vim&lt;/b&gt;と&lt;b&gt;gvim&lt;/b&gt;も調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="ba4927255994b8f9be2cf9331a8ecd222ec16885" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;Emacs&lt;/code&gt; would appreciate it very much, especially with &lt;code&gt;CPerl&lt;/code&gt; mode loaded. You need to get latest &lt;code&gt;pod2info&lt;/code&gt; from &lt;code&gt;CPAN&lt;/code&gt; , or, alternately, prebuilt info pages.</source>
          <target state="translated">&lt;code&gt;Emacs&lt;/code&gt; のユーザーは、特に &lt;code&gt;CPerl&lt;/code&gt; モードがロードされている場合に非常に役立ちます。 &lt;code&gt;CPAN&lt;/code&gt; から最新の &lt;code&gt;pod2info&lt;/code&gt; を取得するか、代わりに事前に作成された情報ページを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="06b3fe1f4b99439f17ea2b119c5a26871e0414f8" translate="yes" xml:space="preserve">
          <source>Users of Emacs would appreciate it very much, especially with &lt;code&gt;CPerl&lt;/code&gt; mode loaded. You need to get latest &lt;code&gt;pod2texi&lt;/code&gt; from &lt;code&gt;CPAN&lt;/code&gt; , or, alternately, the prebuilt info pages.</source>
          <target state="translated">Emacsのユーザーは、特に &lt;code&gt;CPerl&lt;/code&gt; モードがロードされている場合に非常に役立ちます。 &lt;code&gt;CPAN&lt;/code&gt; から最新の &lt;code&gt;pod2texi&lt;/code&gt; を取得する必要があります。または、事前に作成された情報ページを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="fdd1a93dfedc166d886bf8034f368577dba1721c" translate="yes" xml:space="preserve">
          <source>Users of Emacs would appreciate it very much, especially with &lt;code&gt;CPerl&lt;/code&gt; mode loaded. You need to get latest &lt;code&gt;pod2texi&lt;/code&gt; from &lt;code&gt;CPAN&lt;/code&gt;, or, alternately, the prebuilt info pages.</source>
          <target state="translated">Emacsのユーザーは、特に &lt;code&gt;CPerl&lt;/code&gt; モードがロードされている場合に非常に高く評価します。 &lt;code&gt;CPAN&lt;/code&gt; から最新の &lt;code&gt;pod2texi&lt;/code&gt; を入手するか、または事前に作成された情報ページを入手する必要があります。</target>
        </trans-unit>
        <trans-unit id="35a39b7d66f7225d4c692887cb8445ec8ecaf55a" translate="yes" xml:space="preserve">
          <source>Users of Sub::Name beware</source>
          <target state="translated">Sub::Nameをご利用の方はご注意ください。</target>
        </trans-unit>
        <trans-unit id="3d37ee7e83ea8423b48a5461ba1696b2c860b013" translate="yes" xml:space="preserve">
          <source>Users of these operating systems may also wish to make use of scripts such as</source>
          <target state="translated">これらのオペレーティングシステムのユーザーは、以下のようなスクリプトを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="6cc3fbd2d7ced57e1d64779d75050cbddcdc28da" translate="yes" xml:space="preserve">
          <source>Users who install modules and do not intend to look back, can free occupied disk space quickly by letting CPAN.pm cleanup each build directory immediately after a successful install.</source>
          <target state="translated">モジュールをインストールしていて、振り返るつもりがないユーザは、インストールが成功した直後に CPAN.pm に各ビルドディレクトリをクリーンアップさせることで、占有していたディスク容量を素早く解放することができます。</target>
        </trans-unit>
        <trans-unit id="5f2a2d2f970a65c0f069bae958a29d5ba1eb82f2" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;$Config{pod2html}&lt;/code&gt; to setup default options.</source>
          <target state="translated">使用しています &lt;code&gt;$Config{pod2html}&lt;/code&gt; 、セットアップのデフォルトオプションに。</target>
        </trans-unit>
        <trans-unit id="1bd665ac74aefc48e3c1dedcb2f5bc582892064f" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;strlen&lt;/code&gt; to get the length of &lt;code&gt;name&lt;/code&gt; , then calls &lt;code&gt;get_cvn_flags&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;strlen&lt;/code&gt; を使用して &lt;code&gt;name&lt;/code&gt; の長さを取得し、次に &lt;code&gt;get_cvn_flags&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="76193d1362ff8617d4996859b5e3b4d6f6ef6d9a" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;strlen&lt;/code&gt; to get the length of &lt;code&gt;name&lt;/code&gt;, then calls &lt;code&gt;get_cvn_flags&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strlen&lt;/code&gt; を使用して &lt;code&gt;name&lt;/code&gt; の長さを取得してから、 &lt;code&gt;get_cvn_flags&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f2d33b5a65c41c46d97dad83c368ba4c31fcb025" translate="yes" xml:space="preserve">
          <source>Uses Bourne shell from &lt;code&gt;$exedir/../dll/sh/ksh.exe&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$exedir/../dll/sh/ksh.exe&lt;/code&gt; Bourneシェルを使用します。</target>
        </trans-unit>
        <trans-unit id="8535753d5756d418d77c7eeafa2177abcd178411" translate="yes" xml:space="preserve">
          <source>Uses Encode::from_to for conversion. This is the default.</source>
          <target state="translated">変換にEncode::from_toを使用します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="a78266e003805d15484a613ae3192f24c4a5e63f" translate="yes" xml:space="preserve">
          <source>Uses a single private buffer so if you want to format several strings you must explicitly copy the earlier strings away (and free the copies when you are done).</source>
          <target state="translated">複数の文字列をフォーマットしたい場合は、それ以前の文字列を明示的にコピーしなければなりません(コピーが終わったらそのコピーを解放します)。</target>
        </trans-unit>
        <trans-unit id="fce3093136a7d2638de72d1f6b19af95e4dd37ba" translate="yes" xml:space="preserve">
          <source>Uses for the &lt;code&gt;export_fail&lt;/code&gt; method include giving better error messages for some symbols and performing lazy architectural checks (put more symbols into &lt;code&gt;@EXPORT_FAIL&lt;/code&gt; by default and then take them out if someone actually tries to use them and an expensive check shows that they are usable on that platform).</source>
          <target state="translated">&lt;code&gt;export_fail&lt;/code&gt; メソッドの使用には、一部のシンボルのより良いエラーメッセージの提供と遅延アーキテクチャチェックの実行が &lt;code&gt;@EXPORT_FAIL&lt;/code&gt; れます（デフォルトで@EXPORT_FAILにシンボルを追加し、誰かが実際にそれらを使用しようとすると高価なチェックがそれらを使用できることを示します）プラットホーム）。</target>
        </trans-unit>
        <trans-unit id="eac5d6a5ec3502600865ed0620f6a65c1c849fe7" translate="yes" xml:space="preserve">
          <source>Uses the RMS $PARSE and $SEARCH services to expand the input specification to its fully qualified form, except that a null type or version is not added unless it was present in either the original file specification or the default specification passed to &lt;code&gt;rmsexpand&lt;/code&gt;. (If the file does not exist, the input specification is expanded as much as possible.) If an error occurs, returns &lt;code&gt;undef&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$^E&lt;/code&gt;.</source>
          <target state="translated">RMS $ PARSEおよび$ SEARCHサービスを使用して、入力仕様を完全修飾形式に拡張します。ただし、元のファイル仕様または &lt;code&gt;rmsexpand&lt;/code&gt; に渡されたデフォルト仕様のいずれかに存在しない限り、nullタイプまたはバージョンは追加されません。（ファイルが存在しない場合は、入力仕様を可能な限り拡張します。）エラーが発生した場合は、 &lt;code&gt;undef&lt;/code&gt; を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。そして、 &lt;code&gt;$^E&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff51dbb10de4f730c3d10cc9e64e2774f2375b58" translate="yes" xml:space="preserve">
          <source>Uses the same algorithm as getcwd(). Symbolic links and relative-path components (&quot;.&quot; and &quot;..&quot;) are resolved to return the canonical pathname, just like realpath(3).</source>
          <target state="translated">getcwd()と同じアルゴリズムを使用します。シンボリックリンクと相対パスコンポーネント (&quot;.&quot; と &quot;...&quot;)は、realpath(3)のように、正準パス名を返すように解決されます。</target>
        </trans-unit>
        <trans-unit id="4365c50bdac565f572d333d6b72f03aff0ac251d" translate="yes" xml:space="preserve">
          <source>Uses the same algorithm as getcwd(). Symbolic links and relative-path components (&quot;.&quot; and &quot;..&quot;) are resolved to return the canonical pathname, just like realpath(3). On error returns &lt;code&gt;undef&lt;/code&gt;, with &lt;code&gt;$!&lt;/code&gt; set to indicate the error.</source>
          <target state="translated">getcwd（）と同じアルゴリズムを使用します。シンボリックリンクと相対パスコンポーネント（ &quot;。&quot;と &quot;..&quot;）は、realpath（3）と同様に、正規のパス名を返すように解決されます。エラーが発生すると、 &lt;code&gt;$!&lt;/code&gt; &lt;code&gt;undef&lt;/code&gt; が返されます。エラーを示すように設定します。</target>
        </trans-unit>
        <trans-unit id="9086306446f5bee7eedc51873f977f5639cf3890" translate="yes" xml:space="preserve">
          <source>Uses the value of EXPR as a filename and executes the contents of the file as a Perl script.</source>
          <target state="translated">EXPRの値をファイル名として使用し、ファイルの内容をPerlスクリプトとして実行します。</target>
        </trans-unit>
        <trans-unit id="0833769764b7443ea479805ee6f37b7caafeab0d" translate="yes" xml:space="preserve">
          <source>Uses the value of EXPR as a filename and executes the contents of the file as a Perl script:</source>
          <target state="translated">EXPRの値をファイル名として使用し、ファイルの内容をPerlスクリプトとして実行します。</target>
        </trans-unit>
        <trans-unit id="b191f377109544e991562530e982f3ab20d97a29" translate="yes" xml:space="preserve">
          <source>Uses the value of a previous getpos call to return to a previously visited position. Returns &quot;0 but true&quot; on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">以前のgetpos呼び出しの値を使用して、以前にアクセスした位置に戻ります。成功した場合は「0 but true」を返し、失敗した場合は &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9f57754e44ef793b1363eb328e38c456df0e8c76" translate="yes" xml:space="preserve">
          <source>Uses the value of a previous getpos call to return to a previously visited position. Returns &quot;0 but true&quot; on success, &lt;code&gt;undef&lt;/code&gt; on failure.</source>
          <target state="translated">以前のgetpos呼び出しの値を使用して、以前に訪問した位置に戻ります。成功した場合は「 &lt;code&gt;undef&lt;/code&gt; 」を返し、失敗した場合はundefを返します。</target>
        </trans-unit>
        <trans-unit id="c25de2e83e9fceeee022a34e378748baf14ac201" translate="yes" xml:space="preserve">
          <source>Using</source>
          <target state="translated">Using</target>
        </trans-unit>
        <trans-unit id="966e93b10e960e2cad1eb5a36830811e8adda0ef" translate="yes" xml:space="preserve">
          <source>Using !~ with %s doesn't make sense</source>
          <target state="translated">を %s と一緒に使うと意味がありません。</target>
        </trans-unit>
        <trans-unit id="2352b330d6ed131b0eecd5f3967c2801dc2e677c" translate="yes" xml:space="preserve">
          <source>Using &quot;#&quot; as a padding character specifies a numeric field, with right justification. An optional &quot;.&quot; defines the position of the decimal point. With a &quot;0&quot; (zero) instead of the first &quot;#&quot;, the formatted number will be padded with leading zeroes if necessary. A special numeric field is blanked out if the value is undefined. If the resulting value would exceed the width specified the field is filled with &quot;#&quot; as overflow evidence.</source>
          <target state="translated">パディング文字として &quot;#&quot;を使用すると、数値フィールドを右寄せで指定します。オプションの「.」は、小数点の位置を定義します。最初の &quot;#&quot;の代わりに &quot;0&quot; (ゼロ)を使用すると、フォーマットされた数値は、必要に応じて先頭のゼロでパディングされます。値が未定義の場合、特別な数値フィールドは空白になります。結果の値が指定された幅を超えてしまう場合は、フィールドはオーバーフローの証拠として &quot;#&quot; で埋められます。</target>
        </trans-unit>
        <trans-unit id="4d195a30219da687f66f5ac2e4c6c839d91fc335" translate="yes" xml:space="preserve">
          <source>Using &quot;&amp;gt;&quot; always clobbers or creates. Using &quot;&amp;lt;&quot; never does either. The &quot;+&quot; doesn't change this.</source>
          <target state="translated">&quot;&amp;gt;&quot;を使用すると、常に目立たない、または作成されます。「&amp;lt;」を使用しても、どちらも実行されません。「+」はこれを変更しません。</target>
        </trans-unit>
        <trans-unit id="16cc068fbb7f0118050467d326f37173d537b721" translate="yes" xml:space="preserve">
          <source>Using &quot;pl2bat&quot; has a few problems: the file name gets changed, so scripts that rely on &lt;code&gt;$0&lt;/code&gt; to find what they must do may not run properly; running &quot;pl2bat&quot; replicates the contents of the original script, and so this process can be maintenance intensive if the originals get updated often. A different approach that avoids both problems is possible.</source>
          <target state="translated">「pl2bat」の使用にはいくつかの問題があります。ファイル名が変更されるため、 &lt;code&gt;$0&lt;/code&gt; を使用して実行する必要があることを見つけるスクリプトは正しく実行されない可能性があります。「pl2bat」を実行すると、元のスクリプトの内容が複製されるため、元のスクリプトが頻繁に更新される場合、このプロセスはメンテナンスの負荷が大きくなる可能性があります。両方の問題を回避する別のアプローチが可能です。</target>
        </trans-unit>
        <trans-unit id="05f631394c6e9641817e0e504fc7c43b66232fc2" translate="yes" xml:space="preserve">
          <source>Using $ENV{PERL_DEBUG_MSTATS}</source>
          <target state="translated">ENV{PERL_DEBUG_MSTATS}の使用</target>
        </trans-unit>
        <trans-unit id="369ff12968f332b6148e74df2b66edfe0b032cb0" translate="yes" xml:space="preserve">
          <source>Using 'X' and cousins requires you not to use the type identifiers ($@%), just the 'name':</source>
          <target state="translated">X' といとこを使うには、型の識別子 ($@%)を使わずに '名前' だけを使う必要があります。</target>
        </trans-unit>
        <trans-unit id="2dfddf8d7a196c4e7f1fa3524316075003cbc8ac" translate="yes" xml:space="preserve">
          <source>Using *AutoLoader*'s AUTOLOAD Subroutine</source>
          <target state="translated">AutoLoader*のAUTOLOADサブルーチンを使用する</target>
        </trans-unit>
        <trans-unit id="9094fd1811fd7f32bf808bb09cf11c4c4b959972" translate="yes" xml:space="preserve">
          <source>Using / for Unix. Called by init_main.</source>
          <target state="translated">Unixでは/を使用しています。init_mainによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ef6fd37cde410d5e8c4989d291b7ed857f9e1011" translate="yes" xml:space="preserve">
          <source>Using //-comments</source>
          <target state="translated">コメントの使用</target>
        </trans-unit>
        <trans-unit id="79809cc2376a530f4cdcf8b4b35d6c4db1c5702b" translate="yes" xml:space="preserve">
          <source>Using /u for '%s' instead of /%s in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現で/％sの代わりに '％s'に/ uを使用します。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="6c61487f8204326408bdf1ae7270fc6e5521a082" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#newSVpvn&quot;&gt;&quot;newSVpvn&quot;&lt;/a&gt; is a safer alternative for non &lt;code&gt;NUL&lt;/code&gt; terminated strings. For string literals use &lt;a href=&quot;#newSVpvs&quot;&gt;&quot;newSVpvs&quot;&lt;/a&gt; instead. This function will work fine for &lt;code&gt;NUL&lt;/code&gt; terminated strings, but if you want to avoid the if statement on whether to call &lt;code&gt;strlen&lt;/code&gt; use &lt;code&gt;newSVpvn&lt;/code&gt; instead (calling &lt;code&gt;strlen&lt;/code&gt; yourself).</source>
          <target state="translated">&lt;a href=&quot;#newSVpvn&quot;&gt;「newSVpvn」の&lt;/a&gt;使用は、 &lt;code&gt;NUL&lt;/code&gt; で終了していない文字列のより安全な代替手段です。文字列リテラルの場合は、代わりに&lt;a href=&quot;#newSVpvs&quot;&gt;「newSVpvs」を&lt;/a&gt;使用してください。この関数は、 &lt;code&gt;NUL&lt;/code&gt; で終了する文字列に対しては正常に機能しますが、 &lt;code&gt;strlen&lt;/code&gt; を呼び出すかどうかに関するifステートメントを避けたい場合は、代わりに &lt;code&gt;newSVpvn&lt;/code&gt; を使用してください（ &lt;code&gt;strlen&lt;/code&gt; を自分で呼び出す）。</target>
        </trans-unit>
        <trans-unit id="ab5f6e9be6b3df2e9fbe8c1d9ff48b4e453e5870" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;Bit::Vector&quot;&gt;Bit::Vector&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;Bit::Vector&quot;&gt;Bit :: Vectorの&lt;/a&gt;使用：</target>
        </trans-unit>
        <trans-unit id="5f4a15910e3dadf2cc006c6867eda30e63f7dc0f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;http://search.cpan.org/perldoc/Bit::Vector&quot;&gt;Bit::Vector&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Bit::Vector&quot;&gt;Bit :: Vector&lt;/a&gt;を使用：</target>
        </trans-unit>
        <trans-unit id="40cb646ced92b37d9010916926bfe1380a1696f2" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;::ARG_MAX. Otherwise falling back to 4096.</source>
          <target state="translated">&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; :: ARG_MAXを使用します。それ以外の場合は、4096にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="9e6665571474aeb5014d9a2187041b82aa2b6cf9" translate="yes" xml:space="preserve">
          <source>Using &lt;b&gt;AutoLoader&lt;/b&gt;'s AUTOLOAD Subroutine</source>
          <target state="translated">&lt;b&gt;AutoLoader&lt;/b&gt;のAUTOLOADサブルーチンの使用</target>
        </trans-unit>
        <trans-unit id="5cfa1c0592cc7196c9a7f1e7194e067f8fe4c528" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&quot;or&quot;&lt;/code&gt; for assignment is unlikely to do what you want; see below.</source>
          <target state="translated">割り当てに &lt;code&gt;&quot;or&quot;&lt;/code&gt; を使用しても、望んだことを実行することはほとんどありません。下記参照。</target>
        </trans-unit>
        <trans-unit id="8a303f25d71d0c242dc6c0e5ae7c606b1bec2045" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/code&gt;</source>
          <target state="translated">使用して &lt;code&gt;$ENV{PERL_DEBUG_MSTATS}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6ff3dae92bc192e26ee0eb7af7182c12b0e7db8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$in_fh-&amp;gt;getline()&lt;/code&gt; , input is read line-by-line and assembled into paragraphs or &quot;blocks&quot; (which are separated by lines containing nothing but whitespace). For each block of POD documentation encountered it will invoke a method to parse the given paragraph.</source>
          <target state="translated">&lt;code&gt;$in_fh-&amp;gt;getline()&lt;/code&gt; を使用すると、入力は行ごとに読み取られ、段落または「ブロック」（空白のみを含む行で区切られている）にアセンブルされます。遭遇したPODドキュメントの各ブロックに対して、指定された段落を解析するメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="f2a68f677fc4720bdeb7e4f8032c1c375f4d6291" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--verbose&lt;/code&gt; on the command line will increment the value of &lt;code&gt;$verbose&lt;/code&gt; . This way the program can keep track of how many times the option occurred on the command line. For example, each occurrence of &lt;code&gt;--verbose&lt;/code&gt; could increase the verbosity level of the program.</source>
          <target state="translated">コマンドラインで &lt;code&gt;--verbose&lt;/code&gt; を使用すると、 &lt;code&gt;$verbose&lt;/code&gt; 値が増加します。このようにして、プログラムはオプションがコマンドラインで発生した回数を追跡できます。たとえば、 &lt;code&gt;--verbose&lt;/code&gt; が発生するたびに、プログラムの詳細レベルが上がる可能性があります。</target>
        </trans-unit>
        <trans-unit id="017d2fafe54a43c9bad8e818f1629a740d67178f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--verbose&lt;/code&gt; on the command line will increment the value of &lt;code&gt;$verbose&lt;/code&gt;. This way the program can keep track of how many times the option occurred on the command line. For example, each occurrence of &lt;code&gt;--verbose&lt;/code&gt; could increase the verbosity level of the program.</source>
          <target state="translated">コマンドラインで &lt;code&gt;--verbose&lt;/code&gt; を使用すると、 &lt;code&gt;$verbose&lt;/code&gt; 値がインクリメントされます。このようにして、プログラムはコマンドラインでオプションが発生した回数を追跡できます。たとえば、 &lt;code&gt;--verbose&lt;/code&gt; が出現するたびに、プログラムの詳細レベルが上がる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4ad1d7060df6581913c9f5f84ab874f296c32585" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-Dusethreads -Duseithreads&lt;/code&gt; rather than &lt;code&gt;-Dusemultiplicity&lt;/code&gt; is more appropriate if you intend to run multiple interpreters concurrently in different threads, because it enables support for linking in the thread libraries of your system with the interpreter.</source>
          <target state="translated">使用 &lt;code&gt;-Dusethreads -Duseithreads&lt;/code&gt; ではなく &lt;code&gt;-Dusemultiplicity&lt;/code&gt; することは、あなたが別のスレッドで同時に複数のインタプリタを実行する場合、それは通訳を使用してシステムのスレッドライブラリにリンクするためのサポートが可能になるため、より適切です。</target>
        </trans-unit>
        <trans-unit id="61eab4185699c92641d9413479e73b37872fd212" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; out to another perl after loading multiple dlls may result on a DLL baseaddress conflict. The internal cygwin error looks like like the following:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 複数のDLLをロードした後、別のPerlに出するDLLのBASEADDRESS競合に生じ得ます。cygwinの内部エラーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="fcca95252686536518c82a86f093a53ca5ff8ade" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; in combination with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; at the top of your Perl scripts means that the interpreter will pick up certain common programming errors. For instance, in the example above, the final &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; $y&lt;/code&gt; would cause a compile-time error and prevent you from running the program. Using &lt;code&gt;strict&lt;/code&gt; is highly recommended.</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; での組み合わせを &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict;&lt;/code&gt; Perlスクリプトの先頭にあるということは、インタープリターが特定の一般的なプログラミングエラーをピックアップすることを意味します。たとえば、上記の例では、最終的な &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; $y&lt;/code&gt; が原因でコンパイル時エラーが発生し、プログラムを実行できなくなります。 &lt;code&gt;strict&lt;/code&gt; の使用を強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="6570099c968b1dac1aeada91a2fa62948e513fde" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; を使用：</target>
        </trans-unit>
        <trans-unit id="c4ee3a2331f58e1266f76a324d649c5e7a530542" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(..., $x)&lt;/code&gt; with &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; to get the address where &lt;code&gt;$x&lt;/code&gt; is actually stored must be used with circumspection. Perl's internal machinery considers the relation between a variable and that address as its very own private matter and doesn't really care that we have obtained a copy. Therefore:</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(..., $x)&lt;/code&gt; で &lt;code&gt;P&lt;/code&gt; または &lt;code&gt;p&lt;/code&gt; アドレスを取得するために &lt;code&gt;$x&lt;/code&gt; 実際に格納されているがcircumspectionを使用する必要があります。Perlの内部機構は、変数とそのアドレスの間の関係をそれ自体のプライベートな問題と見なし、コピーを取得したことを本当に気にしません。したがって：</target>
        </trans-unit>
        <trans-unit id="f64f7e3c602eac9f0cc5d3fae9a96d9a3eb0bb0b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="5fe85d80b5d4e554e757435dadbee8779f515048" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; for larger strings:</source>
          <target state="translated">より大きな文字列に対して &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; を使用する：</target>
        </trans-unit>
        <trans-unit id="77bac2c89d98d4342e51014bdc1e5dfcf83f7405" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 使用：</target>
        </trans-unit>
        <trans-unit id="9b2ba3ba2d555e75ce68454a406fe0f0433207e8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; (or the operator form, &lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; ) as the conditional of a &lt;code&gt;for&lt;/code&gt; loop is shorthand for the following. This behaviour is the same as a &lt;code&gt;while&lt;/code&gt; loop conditional.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; （またはオペレータ形、 &lt;code&gt;&amp;lt;EXPR&amp;gt;&lt;/code&gt; の条件として） &lt;code&gt;for&lt;/code&gt; ループは、次の省略形です。この動作は、条件付きの &lt;code&gt;while&lt;/code&gt; ループと同じです。</target>
        </trans-unit>
        <trans-unit id="48ea9a8aca48a2ecece519f0da9a5610c9c21b22" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; (perl 5.6+):</source>
          <target state="translated">使い方 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; （perlの5.6+）：</target>
        </trans-unit>
        <trans-unit id="672d9d441ef641164ca3c34a7892f3146881bd19" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="46b9c6aa21d990c3320125b6b398a58171b824d2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c96b7be56d606a5173254b9ecaa85e8754516cc1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;C0&lt;/code&gt; to get Unicode characters while using &lt;code&gt;U0&lt;/code&gt; to get</source>
          <target state="translated">&lt;code&gt;U0&lt;/code&gt; を使用して取得しながら &lt;code&gt;C0&lt;/code&gt; を使用してUnicode文字を取得する</target>
        </trans-unit>
        <trans-unit id="bd76d249b9cc849b475f04243607bd5ac606dc24" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;EVERY&lt;/code&gt; methods</source>
          <target state="translated">&lt;code&gt;EVERY&lt;/code&gt; メソッドの使用</target>
        </trans-unit>
        <trans-unit id="060b36ae2eafc535fc899ab4d0c43c28a110d442" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;InputLength&lt;/code&gt; avoids the use of temporary storage and means the application can cope with large compressed data streams.</source>
          <target state="translated">使用 &lt;code&gt;InputLength&lt;/code&gt; は、一時的な記憶の使用を回避し、大規模な圧縮データストリームに対応できるアプリケーションを意味します。</target>
        </trans-unit>
        <trans-unit id="98cb598e3b72d4f21f30ade24958fec2725c2b36" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;InputLength&lt;/code&gt; to uncompress data embedded in a larger file/buffer.</source>
          <target state="translated">&lt;code&gt;InputLength&lt;/code&gt; を使用して、より大きなファイル/バッファーに埋め込まれたデータを解凍します。</target>
        </trans-unit>
        <trans-unit id="0ecd1ec7133eb6a574dc47a89387830a895fdc67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;autouse&lt;/code&gt; will move important steps of your program's execution from compile time to runtime. This can</source>
          <target state="translated">&lt;code&gt;autouse&lt;/code&gt; を使用すると、プログラムの実行の重要なステップがコンパイル時からランタイムに移動します。これは</target>
        </trans-unit>
        <trans-unit id="ddf6589db735a9f59292836b7b6ee26755c1a873" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;do&lt;/code&gt; with a relative path (except for</source>
          <target state="translated">相対パスで &lt;code&gt;do&lt;/code&gt; を使用する（ただし</target>
        </trans-unit>
        <trans-unit id="ef84df941727116a5825b7a2a6765e3991fcd112" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fork()&lt;/code&gt; or &lt;code&gt;system()&lt;/code&gt; out to another perl after loading multiple dlls may result on a DLL baseaddress conflict. The internal cygwin error looks like like the following:</source>
          <target state="translated">使用 &lt;code&gt;fork()&lt;/code&gt; または &lt;code&gt;system()&lt;/code&gt; 複数のDLLをロードした後、別のPerlに出するDLLのBASEADDRESS競合に生じ得ます。内部cygwinエラーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2c94e397182ad35f0199796c485d6c8aec54e54f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;gen_extract_tagged&lt;/code&gt; to create extraction functions for specific tags is a good idea if those functions are going to be called more than once, since their performance is typically twice as good as the more general-purpose &lt;code&gt;extract_tagged&lt;/code&gt; .</source>
          <target state="translated">使用 &lt;code&gt;gen_extract_tagged&lt;/code&gt; より汎用としての性能が二倍良いと一般的であるため、これらの機能は、複数回呼び出されることになるだろうしている場合、特定のタグの抽出関数を作成することは良いアイデアです &lt;code&gt;extract_tagged&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5433b6a32cf1d604428ab16e7190967e95673e56" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;gen_extract_tagged&lt;/code&gt; to create extraction functions for specific tags is a good idea if those functions are going to be called more than once, since their performance is typically twice as good as the more general-purpose &lt;code&gt;extract_tagged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_extract_tagged&lt;/code&gt; を使用して特定のタグの抽出関数を作成することは、それらの関数が複数回呼び出される場合に適しています。これらの関数のパフォーマンスは通常、より汎用的な &lt;code&gt;extract_tagged&lt;/code&gt; の2倍であるためです。</target>
        </trans-unit>
        <trans-unit id="e15459b53ecb2c76cd94f0b94ae736e49e8484db" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lib&lt;/code&gt; warns if none of the specified libraries can be found and &lt;a href=&quot;Math::BigInt&quot;&gt;Math::BigInt&lt;/a&gt; did fall back to one of the default libraries. To suppress this warning, use &lt;code&gt;try&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; を使用すると、指定したライブラリが見つからず、&lt;a href=&quot;Math::BigInt&quot;&gt;Math :: BigInt&lt;/a&gt;がデフォルトライブラリの1つにフォールバックした場合に警告が表示されます。この警告を抑制するには、代わりに &lt;code&gt;try&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5b55d7735ea783b5e6004e758bd55af4f884bf92" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;lib&lt;/code&gt; warns if none of the specified libraries can be found and &lt;a href=&quot;math/bigint&quot;&gt;Math::BigInt&lt;/a&gt; did fall back to one of the default libraries. To suppress this warning, use &lt;code&gt;try&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; を使用すると、指定されたライブラリーが見つからず、&lt;a href=&quot;math/bigint&quot;&gt;Math :: BigInt&lt;/a&gt;がデフォルトのライブラリーの1つにフォールバックした場合に警告します。この警告を抑制するには、代わりに &lt;code&gt;try&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7e629d4fa388da4d8ac7581ea3d526173f8b0ad2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;my&lt;/code&gt; in combination with a &lt;code&gt;use strict;&lt;/code&gt; at the top of your Perl scripts means that the interpreter will pick up certain common programming errors. For instance, in the example above, the final &lt;code&gt;print $y&lt;/code&gt; would cause a compile-time error and prevent you from running the program. Using &lt;code&gt;strict&lt;/code&gt; is highly recommended.</source>
          <target state="translated">使用して &lt;code&gt;my&lt;/code&gt; での組み合わせを &lt;code&gt;use strict;&lt;/code&gt; Perlスクリプトの上部にあるということは、インタプリタが特定の一般的なプログラミングエラーを検出することを意味します。たとえば、上記の例では、最終的な &lt;code&gt;print $y&lt;/code&gt; によってコンパイル時エラーが発生し、プログラムを実行できなくなります。 &lt;code&gt;strict&lt;/code&gt; を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="d3b7d2848f22bcc07eed4323aeaebde4299c41ef" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;oct&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;oct&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="58ef3ca19134d3f66249fa1483f651e7bd5d8f8d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;pack(..., $x)&lt;/code&gt; with &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt; to get the address where &lt;code&gt;$x&lt;/code&gt; is actually stored must be used with circumspection. Perl's internal machinery considers the relation between a variable and that address as its very own private matter and doesn't really care that we have obtained a copy. Therefore:</source>
          <target state="translated">使用して &lt;code&gt;pack(..., $x)&lt;/code&gt; して &lt;code&gt;P&lt;/code&gt; または &lt;code&gt;p&lt;/code&gt; アドレスを取得するために &lt;code&gt;$x&lt;/code&gt; 実際に格納されているがcircumspectionを使用する必要があります。Perlの内部機構は、変数とそのアドレスとの関係をそれ自体の私的な事柄と見なし、コピーを取得したことを実際には気にしません。したがって：</target>
        </trans-unit>
        <trans-unit id="58a53bf2c5ceda1c9b4b4644412681b9465fd2ab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;ord&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pack&lt;/code&gt; と &lt;code&gt;ord&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="6da26c3b2ee39d32013ceb92470d6b6f25d85226" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;pack&lt;/code&gt; and &lt;code&gt;unpack&lt;/code&gt; for larger strings:</source>
          <target state="translated">大きな文字列に &lt;code&gt;pack&lt;/code&gt; と &lt;code&gt;unpack&lt;/code&gt; を使用する：</target>
        </trans-unit>
        <trans-unit id="e6a8a932e33f385f4030a8352a7d3514d3cb726f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;pack&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pack&lt;/code&gt; 使用：</target>
        </trans-unit>
        <trans-unit id="0ffd8ad58b1a0f4bd73c5c83cc872616c113bd7f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;refaddr()&lt;/code&gt; is unreliable for testing whether or not two shared references are equivalent (e.g., when testing for circular references). Use &lt;a href=&quot;#is_shared-VARIABLE&quot;&gt;is_shared()&lt;/a&gt;, instead:</source>
          <target state="translated">&lt;code&gt;refaddr()&lt;/code&gt; の使用は、2つの共有参照が同等であるかどうかをテストする場合は信頼できません（たとえば、循環参照をテストする場合）。代わりに&lt;a href=&quot;#is_shared-VARIABLE&quot;&gt;is_shared（）を&lt;/a&gt;使用してください：</target>
        </trans-unit>
        <trans-unit id="6c6974328aaa0d51c94208e65999d2c3c46bd958" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;sprintf&lt;/code&gt; (perl 5.6+):</source>
          <target state="translated">使い方 &lt;code&gt;sprintf&lt;/code&gt; （perlの5.6+）：</target>
        </trans-unit>
        <trans-unit id="591729639c3713bf822d3524e75de771d667b742" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;sprintf&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;sprintf&lt;/code&gt; の使用：</target>
        </trans-unit>
        <trans-unit id="cb9d7582ed46e0d412f2d6595c39dd57224927a6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;undef&lt;/code&gt; for temporary files</source>
          <target state="translated">一時ファイルに &lt;code&gt;undef&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="e3b7d0e5d79a2753c1c7b705ec6fe0b2755e9284" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;unpack&lt;/code&gt;:</source>
          <target state="translated">使用 &lt;code&gt;unpack&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2ef178ae90603162abddf22f7d9bb0fc3e898af5" translate="yes" xml:space="preserve">
          <source>Using Attributes and Parameters</source>
          <target state="translated">属性とパラメータの使用</target>
        </trans-unit>
        <trans-unit id="7224556798c8e29a3e7917f3fcdea9b882c8dbbe" translate="yes" xml:space="preserve">
          <source>Using AutoLoader's AUTOLOAD Subroutine</source>
          <target state="translated">AutoLoaderのAUTOLOADサブルーチンを使う</target>
        </trans-unit>
        <trans-unit id="03bf2717e06af78329e93ebf453e1e826613e2e4" translate="yes" xml:space="preserve">
          <source>Using B::Concise outside of the O framework</source>
          <target state="translated">B::Concise を O フレームワークの外で使う</target>
        </trans-unit>
        <trans-unit id="18bafced67519d44baeebd7cfdcaf662b62afabc" translate="yes" xml:space="preserve">
          <source>Using DB_File with Berkeley DB version 2 or greater</source>
          <target state="translated">Berkeley DB バージョン 2 以上で DB_File を使用する場合</target>
        </trans-unit>
        <trans-unit id="97e4ec7dc3ee57617b8c25e5da7b2620a2b30764" translate="yes" xml:space="preserve">
          <source>Using EVERY methods</source>
          <target state="translated">あらゆる方法を駆使して</target>
        </trans-unit>
        <trans-unit id="eaf5424654cdf470f964dbc03078a17cf18e6b68" translate="yes" xml:space="preserve">
          <source>Using Encode</source>
          <target state="translated">エンコードの使用</target>
        </trans-unit>
        <trans-unit id="b3c01fd9731ccf33cc32d289966ab7fb5c9b6f88" translate="yes" xml:space="preserve">
          <source>Using Fill Mode</source>
          <target state="translated">フィルモードの使用</target>
        </trans-unit>
        <trans-unit id="5cb7c472310d76de5801b53745949b0358783728" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple and Exporter together</source>
          <target state="translated">Filter::SimpleとExporterの併用</target>
        </trans-unit>
        <trans-unit id="8adffc36e41ac8b6ef194fa0464f19be3d960928" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple with an explicit &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine</source>
          <target state="translated">明示的な &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; サブルーチンでFilter :: Simpleを使用する</target>
        </trans-unit>
        <trans-unit id="be645fc12b677ffc0811a1fbab93eecc047912a0" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple with an explicit &lt;code&gt;import&lt;/code&gt; subroutine</source>
          <target state="translated">Filter :: Simpleを明示的な &lt;code&gt;import&lt;/code&gt; サブルーチンで使用する</target>
        </trans-unit>
        <trans-unit id="4fae20bc9d38356a2d17453bc9b205cc1c897f19" translate="yes" xml:space="preserve">
          <source>Using Filter::Simple with an explicit import subroutine</source>
          <target state="translated">明示的なインポートサブルーチンでの Filter::Simple の使用</target>
        </trans-unit>
        <trans-unit id="1ae3259ed8aaec135b40d3c0be57406133a41acb" translate="yes" xml:space="preserve">
          <source>Using GIMME_V</source>
          <target state="translated">GIMME_Vを使う</target>
        </trans-unit>
        <trans-unit id="1d57725fba088f8b24d927a2eedcfd4e936a608f" translate="yes" xml:space="preserve">
          <source>Using GNU's gcc for building Perl</source>
          <target state="translated">PerlのビルドにGNUのgccを使う</target>
        </trans-unit>
        <trans-unit id="e882257535f024e0d015187d37538f63a8847fce" translate="yes" xml:space="preserve">
          <source>Using G_EVAL</source>
          <target state="translated">G_EVALの使用</target>
        </trans-unit>
        <trans-unit id="295eff162915babd344155c6be19db49d4d64f02" translate="yes" xml:space="preserve">
          <source>Using G_KEEPERR</source>
          <target state="translated">G_KEEPERRの使用</target>
        </trans-unit>
        <trans-unit id="ba80e8a55a6de58b5cac5607f035e2bd86d99769" translate="yes" xml:space="preserve">
          <source>Using InputLength to uncompress data embedded in a larger file/buffer.</source>
          <target state="translated">より大きなファイル/バッファに埋め込まれたデータを解凍するためにInputLengthを使用しています。</target>
        </trans-unit>
        <trans-unit id="16d5f49af97261f97893047f771a98e55443d77c" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl</source>
          <target state="translated">Perl で大きなファイルを使う</target>
        </trans-unit>
        <trans-unit id="317a1b556565aa526e2b302cc529d9bc9bad8e03" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl &amp;lt; 5L</source>
          <target state="translated">5L未満のPerlでの大きなファイルの使用</target>
        </trans-unit>
        <trans-unit id="4193d5877700c1da7cc3dc0d04426fb8e279c514" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl on HP-UX</source>
          <target state="translated">HP-UX で Perl で大容量ファイルを使用する</target>
        </trans-unit>
        <trans-unit id="bb8e5976c90f08c21142951c3aacf31e66206c3b" translate="yes" xml:space="preserve">
          <source>Using Large Files with Perl on Tru64</source>
          <target state="translated">Tru64 での Perl での大容量ファイルの使用</target>
        </trans-unit>
        <trans-unit id="d35a8b92c0313948c8001f6e0f5a80140456f638" translate="yes" xml:space="preserve">
          <source>Using Math::BigInt::Lite</source>
          <target state="translated">Math::BigInt::Liteの使用</target>
        </trans-unit>
        <trans-unit id="d3ea25d5f31a035beb72e8f68cf347e89b109748" translate="yes" xml:space="preserve">
          <source>Using Net::FTP</source>
          <target state="translated">Net::FTP の使用</target>
        </trans-unit>
        <trans-unit id="505b1ba51f7a380027ac8add47d55b866c5788d3" translate="yes" xml:space="preserve">
          <source>Using Net::SMTP</source>
          <target state="translated">Net::SMTP の使用</target>
        </trans-unit>
        <trans-unit id="f4a9198bb8db024f66e7beddb02099ae2c33e45d" translate="yes" xml:space="preserve">
          <source>Using POSIX::ARG_MAX. Otherwise falling back to 4096.</source>
          <target state="translated">POSIX::ARG_MAXを使用しています。それ以外の場合は4096にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7f350838d7d6c4618cf4c3624992c0a5fa550ccf" translate="yes" xml:space="preserve">
          <source>Using Perl in &quot;native&quot; BS2000</source>
          <target state="translated">ネイティブ」BS2000でPerlを使う</target>
        </trans-unit>
        <trans-unit id="adbb3dbb566652d469c92e143d370e6625a585c4" translate="yes" xml:space="preserve">
          <source>Using Perl in OS/400 PASE</source>
          <target state="translated">OS/400のPASEでPerlを使う</target>
        </trans-unit>
        <trans-unit id="2f91327799ddf2016004ebaf8e8d6bedda20acf6" translate="yes" xml:space="preserve">
          <source>Using Perl in Symbian</source>
          <target state="translated">SymbianでPerlを使う</target>
        </trans-unit>
        <trans-unit id="6d719543bb32291214db915134a27443927a8c27" translate="yes" xml:space="preserve">
          <source>Using Perl in the Posix-Shell of BS2000</source>
          <target state="translated">BS2000のPosix-ShellでのPerlの使用法</target>
        </trans-unit>
        <trans-unit id="84118c01838e699ac467fa37b8bb29a7f8370768" translate="yes" xml:space="preserve">
          <source>Using Perl modules</source>
          <target state="translated">Perlモジュールの使用</target>
        </trans-unit>
        <trans-unit id="028de32ca6d30212bfbce4a0c1bee8b8576b4e69" translate="yes" xml:space="preserve">
          <source>Using Perl modules, which themselves use C libraries, from your C program</source>
          <target state="translated">C プログラムから C ライブラリを使用する Perl モジュールを使用する</target>
        </trans-unit>
        <trans-unit id="0ff9818b99a67e75450030e8c7e7092cbe65f9c0" translate="yes" xml:space="preserve">
          <source>Using Perl on WinCE</source>
          <target state="translated">WinCEでPerlを使う</target>
        </trans-unit>
        <trans-unit id="a5580cc662de9455c8f221545dacc2b26132369a" translate="yes" xml:space="preserve">
          <source>Using Perl to Dispose of Temporaries</source>
          <target state="translated">Perlを使ってテンポラリを処分する</target>
        </trans-unit>
        <trans-unit id="5320f15bf6dff40493f314bd488164951d124fee" translate="yes" xml:space="preserve">
          <source>Using Perl to dispose of temporaries</source>
          <target state="translated">Perlを使ってテンポラリを処分する</target>
        </trans-unit>
        <trans-unit id="b797430b32d30f68c1ea4534b74218539d3aaf64" translate="yes" xml:space="preserve">
          <source>Using Perl's built in conversion of numbers with leading zeros:</source>
          <target state="translated">先頭のゼロを含む数値の変換にPerlの組み込みを使用しています。</target>
        </trans-unit>
        <trans-unit id="f15ed3b42ac67b1af9e23e97edaf317ed0b825a6" translate="yes" xml:space="preserve">
          <source>Using PerlIO and different encodings on ASCII and EBCDIC partitions</source>
          <target state="translated">ASCII および EBCDIC パーティションでの PerlIO と異なるエンコーディングの使用</target>
        </trans-unit>
        <trans-unit id="36711385fbee8d56f23de9017ef392314347e2e0" translate="yes" xml:space="preserve">
          <source>Using References</source>
          <target state="translated">参考文献の使用</target>
        </trans-unit>
        <trans-unit id="f52e2f6da146b1affad48afad3cd39b28bc932df" translate="yes" xml:space="preserve">
          <source>Using Sudo</source>
          <target state="translated">須藤を使う</target>
        </trans-unit>
        <trans-unit id="82685302632dac9e1fd31a13c0849aefa5124be7" translate="yes" xml:space="preserve">
          <source>Using Unicode in XS</source>
          <target state="translated">XSでのUnicodeの使用</target>
        </trans-unit>
        <trans-unit id="998956ebf62d14d931cc7ad656bc083d855b7aba" translate="yes" xml:space="preserve">
          <source>Using XS With C++</source>
          <target state="translated">C++でXSを使う</target>
        </trans-unit>
        <trans-unit id="dac1e6f7cf5fb38291cdecac855edeefdf437f99" translate="yes" xml:space="preserve">
          <source>Using \ for Windows, except for &quot;gmake&quot; where it is /.</source>
          <target state="translated">Windowsでは、&quot;gmake &quot;が/になっているところを除いて、&quot;Using œœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœœﾞ</target>
        </trans-unit>
        <trans-unit id="8137c8c1ed484dbce9760788d8ea8483549cf1f0" translate="yes" xml:space="preserve">
          <source>Using _t/harness_ for testing</source>
          <target state="translated">テストに_t/harness_を使用する</target>
        </trans-unit>
        <trans-unit id="4f4b906f20b028b71f5628fd6f90032d406f6155" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;__WARN__&lt;/code&gt; handler provides a powerful way to silence all warnings (even the so-called mandatory ones). An example:</source>
          <target state="translated">&lt;code&gt;__WARN__&lt;/code&gt; ハンドラーを使用すると、すべての警告（いわゆる必須の警告であっても）を非表示にする強力な方法が提供されます。例：</target>
        </trans-unit>
        <trans-unit id="b4b4ca6e1deabca931233328798f7fbb48c8c07b" translate="yes" xml:space="preserve">
          <source>Using a closure as a function template allows us to generate many functions that act similarly. Suppose you wanted functions named after the colors that generated HTML font changes for the various colors:</source>
          <target state="translated">クロージャを関数テンプレートとして使用することで、似たような動作をする多くの関数を生成することができます。様々な色のHTMLフォントの変更を生成する色にちなんだ名前の関数が欲しかったとしましょう。</target>
        </trans-unit>
        <trans-unit id="3428ced333d3144f878ace997075432ead893fb6" translate="yes" xml:space="preserve">
          <source>Using a hash reference is</source>
          <target state="translated">ハッシュ参照の使用は</target>
        </trans-unit>
        <trans-unit id="336ecaf20b3b819b2df81459841f824dd710f158" translate="yes" xml:space="preserve">
          <source>Using a lexical pragma to enable or disable legacy behavior should be considered when appropriate, and in the absence of any pragma legacy behavior should be enabled. Which backward-incompatible changes are controlled implicitly by a 'use v5.x.y' is a decision which should be made by the pumpking in consultation with the community.</source>
          <target state="translated">レガシーな動作を有効にしたり無効にしたりするために語彙的なプラグマを使うことは、適切な場合には考慮すべきであり、プラグマがない場合にはレガシーな動作を有効にすべきです。どの後方互換性のない変更を 'use v5.x.y' で暗黙のうちに制御するかは、コミュニティとの協議の上、pumpking が決定すべきことです。</target>
        </trans-unit>
        <trans-unit id="37d264a714cc8982079f31352e5a02a2d407c9ec" translate="yes" xml:space="preserve">
          <source>Using a reference as a string produces both its referent's type, including any package blessing as described in &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;, as well as the numeric address expressed in hex. The ref() operator returns just the type of thing the reference is pointing to, without the address. See &lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt; for details and examples of its use.</source>
          <target state="translated">参照を文字列として使用すると、&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;で説明されているパッケージの祝福を含む、その参照先のタイプと、16進数で表された数値アドレスの両方が生成されます。ref（）演算子は、参照が指しているもののタイプのみを返し、アドレスは返しません。参照&lt;a href=&quot;functions/ref&quot;&gt;参照&lt;/a&gt;詳細とその使用例のために。</target>
        </trans-unit>
        <trans-unit id="7048559c1137fab42b7f83dcde719d8123af44bd" translate="yes" xml:space="preserve">
          <source>Using a reference as a string produces both its referent's type, including any package blessing as described in &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;, as well as the numeric address expressed in hex. The ref() operator returns just the type of thing the reference is pointing to, without the address. See &lt;a href=&quot;perlfunc#ref&quot;&gt;&quot;ref&quot; in perlfunc&lt;/a&gt; for details and examples of its use.</source>
          <target state="translated">参照を文字列として使用すると、&lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;で説明されているパッケージの祝福を含む参照先の型と、16進数で表された数値アドレスの両方が生成されます。ref（）演算子は、アドレスを除いて、参照が指しているもののタイプのみを返します。詳細と使用例については&lt;a href=&quot;perlfunc#ref&quot;&gt;、perlfuncの「ref」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="178dbf3b1655da796ad383968646cf6aaa7b961a" translate="yes" xml:space="preserve">
          <source>Using a regular Perl string as a key or value for a DBM hash will trigger a wide character exception if any codepoints won&amp;rsquo;t fit into a byte. Here&amp;rsquo;s how to manually manage the translation:</source>
          <target state="translated">通常のPerl文字列をDBMハッシュのキーまたは値として使用すると、コードポイントがバイトに収まらない場合にワイド文字例外がトリガーされます。翻訳を手動で管理する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="544cb5d954d39b68ec105da285e699133ee66333" translate="yes" xml:space="preserve">
          <source>Using a slice on the lefthand side of the assignment supplies list context to the righthand side. This can lead to unexpected results. For instance, if you want to read a single line from a filehandle, assigning to a scalar value is fine:</source>
          <target state="translated">課題の左側にスライスを使用すると、リストのコンテキストが右側に供給されます。これは予期しない結果をもたらす可能性があります。例えば、ファイルハンドルから1行を読みたい場合、スカラ値に代入しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="4d64816ce71679faa0148bf687b3dd87ced39ea8" translate="yes" xml:space="preserve">
          <source>Using a smoke-me branch to test changes</source>
          <target state="translated">変更点をテストするための smoke-me ブランチの使用</target>
        </trans-unit>
        <trans-unit id="047ab6347496bdbb043bb75da5faf973242f2e7a" translate="yes" xml:space="preserve">
          <source>Using a source-level debugger</source>
          <target state="translated">ソースレベルのデバッガの使用</target>
        </trans-unit>
        <trans-unit id="5e1e5b1c335e1407e117badbc02a20174cee06fd" translate="yes" xml:space="preserve">
          <source>Using a string or number as a reference produces a symbolic reference, as explained above. Using a reference as a number produces an integer representing its storage location in memory. The only useful thing to be done with this is to compare two references numerically to see whether they refer to the same location.</source>
          <target state="translated">文字列や数値を参照として使用すると、上で説明したようにシンボリックな参照が生成されます。参照を数値として使用すると、メモリ内の格納場所を表す整数が生成されます。これを使って唯一有用なのは、2 つの参照を数値的に比較して、同じ場所を参照しているかどうかを確認することです。</target>
        </trans-unit>
        <trans-unit id="937545592134f4777c1d76d97432be42ef7d2470" translate="yes" xml:space="preserve">
          <source>Using a string that doesn't correspond to any existing function or a glob that doesn't contain a code slot is equivalent to &lt;code&gt;'IGNORE'&lt;/code&gt;, but a warning is emitted when the handler is being called (the warning is not emitted for the internal hooks described below).</source>
          <target state="translated">既存の関数に対応しない文字列またはコードスロットを含まないglobを使用することは、 &lt;code&gt;'IGNORE'&lt;/code&gt; と同等ですが、ハンドラーが呼び出されているときに警告が発行されます（内部に対して警告は発行されません）以下に説明するフック）。</target>
        </trans-unit>
        <trans-unit id="d9e91a5896764f48c6ace56fa4d53091e1acc312" translate="yes" xml:space="preserve">
          <source>Using a subroutine as part of your sort is a powerful way to get exactly what you want, but will usually be slower than the built-in</source>
          <target state="translated">ソートの一部としてサブルーチンを使うのは強力な方法ですが、通常は組み込みの</target>
        </trans-unit>
        <trans-unit id="2a79ecdd0e9982d50231f84c62b552b6746f4f38" translate="yes" xml:space="preserve">
          <source>Using a value of &lt;code&gt;'IGNORE'&lt;/code&gt; usually has the effect of ignoring the signal, except for the &lt;code&gt;CHLD&lt;/code&gt; signal. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more about this special case.</source>
          <target state="translated">&lt;code&gt;'IGNORE'&lt;/code&gt; 値を使用すると、 &lt;code&gt;CHLD&lt;/code&gt; 信号を除き、通常は信号を無視する効果があります。この特殊なケースの詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69c690d04b9213eef35e158a45e78b34887853f6" translate="yes" xml:space="preserve">
          <source>Using a value of &lt;code&gt;'IGNORE'&lt;/code&gt; usually has the effect of ignoring the signal, except for the &lt;code&gt;CHLD&lt;/code&gt; signal. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more about this special case. Using an empty string or &lt;code&gt;undef&lt;/code&gt; as the value has the same effect as &lt;code&gt;'DEFAULT'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'IGNORE'&lt;/code&gt; の値を使用すると、 &lt;code&gt;CHLD&lt;/code&gt; 信号を除いて、通常、信号を無視する効果があります。この特殊なケースの詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。空の文字列または &lt;code&gt;undef&lt;/code&gt; を値として使用すると、 &lt;code&gt;'DEFAULT'&lt;/code&gt; と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="bcddbca973bdd2d4fec8195d0ee94f29f4dde64e" translate="yes" xml:space="preserve">
          <source>Using an indirect object with &lt;a href=&quot;#exec-LIST&quot;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#system-LIST&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt; is also more secure. This usage (which also works fine with &lt;a href=&quot;#system-LIST&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt;) forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</source>
          <target state="translated">&lt;a href=&quot;#exec-LIST&quot;&gt; &lt;code&gt;exec&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#system-LIST&quot;&gt; &lt;code&gt;system&lt;/code&gt; で&lt;/a&gt;間接オブジェクトを使用することもより安全です。この使用法（&lt;a href=&quot;#system-LIST&quot;&gt; &lt;code&gt;system&lt;/code&gt; &lt;/a&gt;でも正常に機能します）は、リストに引数が1つしかない場合でも、引数を複数値のリストとして解釈することを強制します。そうすれば、シェルがワイルドカードを拡張したり、空白を含む単語を分割したりするのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="4df5e3fd8acd272c23a1963f6dc8693fe3a9c164" translate="yes" xml:space="preserve">
          <source>Using an indirect object with &lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is also more secure. This usage (which also works fine with system()) forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; での間接オブジェクトの使用もより安全です。この使用法（system（）でも正常に機能）は、リストに引数が1つしかない場合でも、引数を複数値リストとして強制的に解釈します。そうすれば、シェルがワイルドカードを展開したり、空白を含む単語を分割したりしても安全です。</target>
        </trans-unit>
        <trans-unit id="44d98963d401217f7be5255c87293a2853856e67" translate="yes" xml:space="preserve">
          <source>Using an indirect object with &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; is also more secure. This usage (which also works fine with system()) forces interpretation of the arguments as a multivalued list, even if the list had just one argument. That way you're safe from the shell expanding wildcards or splitting up words with whitespace in them.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; での間接オブジェクトの使用もより安全です。この使用法（system（）でも正常に機能）は、リストに引数が1つしかない場合でも、引数を複数値リストとして強制的に解釈します。そうすれば、シェルがワイルドカードを展開したり、空白を含む単語を分割したりしても安全です。</target>
        </trans-unit>
        <trans-unit id="604eef1aa9c7558fedd10f863a9440cef58a337c" translate="yes" xml:space="preserve">
          <source>Using an installation prefix of '/usr' will result in a directory layout that mirrors that of Apple's default Perl, with core modules stored in '/System/Library/Perl/${version}', CPAN modules stored in '/Library/Perl/${version}', and the addition of '/Network/Library/Perl/${version}' to @INC for modules that are stored on a file server and used by many Macs.</source>
          <target state="translated">インストールプレフィックスを「/usr」にすると、Apple のデフォルトの Perl と同じようなディレクトリレイアウトになります。</target>
        </trans-unit>
        <trans-unit id="aa23c98317fa566c477de2941d147e87b315123e" translate="yes" xml:space="preserve">
          <source>Using an object as the left operand is allowed, although not very useful. Smartmatching rules take precedence over overloading, so even if the object in the left operand has smartmatch overloading, this will be ignored. A left operand that is a non-overloaded object falls back on a string or numeric comparison of whatever the &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; operator returns. That means that</source>
          <target state="translated">オブジェクトを左のオペランドとして使用することは許可されていますが、あまり役に立ちません。スマートマッチングルールはオーバーロードよりも優先されるため、左のオペランドのオブジェクトにスマートマッチオーバーロードがある場合でも、これは無視されます。オーバーロードされていないオブジェクトである左オペランドは、 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 演算子が返すものの文字列または数値比較にフォールバックします。つまり</target>
        </trans-unit>
        <trans-unit id="84909391edc56fe29eb99f999fdd4d50a409a946" translate="yes" xml:space="preserve">
          <source>Using an object as the left operand is allowed, although not very useful. Smartmatching rules take precedence over overloading, so even if the object in the left operand has smartmatch overloading, this will be ignored. A left operand that is a non-overloaded object falls back on a string or numeric comparison of whatever the &lt;code&gt;ref&lt;/code&gt; operator returns. That means that</source>
          <target state="translated">あまり有用ではありませんが、左側のオペランドとしてオブジェクトを使用することは許可されています。Smartmatchingルールはオーバーロードよりも優先されるため、左側のオペランドのオブジェクトにsmartmatchオーバーロードがある場合でも、これは無視されます。オーバーロードされていないオブジェクトである左側のオペランドは、 &lt;code&gt;ref&lt;/code&gt; 演算子が返すものの文字列または数値の比較にフォールバックします。つまり、</target>
        </trans-unit>
        <trans-unit id="6e3237ae31bb37c81782ea50be28770f0de2555e" translate="yes" xml:space="preserve">
          <source>Using any of the above invocations, the first argument to the constructor is always the corresponding package name (or object reference). No other arguments are required, but if desired, an associative array (or hash-table) my be passed to the &lt;b&gt;new()&lt;/b&gt; constructor, as in:</source>
          <target state="translated">上記の呼び出しのいずれかを使用すると、コンストラクターの最初の引数は常に対応するパッケージ名（またはオブジェクト参照）になります。他の引数は必要ありませんが、必要に応じて、次のように連想配列（またはハッシュテーブル）を&lt;b&gt;new（）&lt;/b&gt;コンストラクターに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8097e70784bcbb030b53b18d1acb24cd21f46737" translate="yes" xml:space="preserve">
          <source>Using arguments of the form &lt;code&gt;-Ldir&lt;/code&gt; and &lt;code&gt;-lname&lt;/code&gt; is recommended.</source>
          <target state="translated">&lt;code&gt;-Ldir&lt;/code&gt; および &lt;code&gt;-lname&lt;/code&gt; の形式の引数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f6161aa0cd787955761dec12d0177c3ac026e9b0" translate="yes" xml:space="preserve">
          <source>Using call_argv</source>
          <target state="translated">call_argv の使用</target>
        </trans-unit>
        <trans-unit id="9134163152acbc5710de0bd418aa078593a2b9c2" translate="yes" xml:space="preserve">
          <source>Using call_method</source>
          <target state="translated">call_methodを使う</target>
        </trans-unit>
        <trans-unit id="b881b2dfc007740bbb57d40d5226f14e171509f9" translate="yes" xml:space="preserve">
          <source>Using call_sv</source>
          <target state="translated">call_svの使用</target>
        </trans-unit>
        <trans-unit id="fa52cf5ccb980442f1ec3e9f0afd04690158c461" translate="yes" xml:space="preserve">
          <source>Using caret fields can produce lines where all fields are blank. You can suppress such lines by putting a &quot;~&quot; (tilde) character anywhere in the line. The tilde will be translated to a space upon output.</source>
          <target state="translated">キャレットフィールドを使用すると、すべてのフィールドが空白の行が生成されることがあります。そのような行は、行内のどこかに &quot;~&quot; (チルダ)文字を入れることで抑制することができます。チルダは出力時にスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="3b35e7b174dfce328e49d2c9b54ef677263d0168" translate="yes" xml:space="preserve">
          <source>Using caseless (&lt;code&gt;/i&lt;/code&gt;) regular expression matching.</source>
          <target state="translated">大文字と小文字を区別しない（ &lt;code&gt;/i&lt;/code&gt; ）正規表現マッチングを使用します。</target>
        </trans-unit>
        <trans-unit id="912a2aec3bed273542aa33d8ea10bb43e6f23900" translate="yes" xml:space="preserve">
          <source>Using character classes</source>
          <target state="translated">文字クラスの使用</target>
        </trans-unit>
        <trans-unit id="0ed204e094dc9752d186724902c15a617f19dc27" translate="yes" xml:space="preserve">
          <source>Using diagnostics to get stack traces from a misbehaving script:</source>
          <target state="translated">診断を使用して、動作不良のスクリプトからスタックトレースを取得します。</target>
        </trans-unit>
        <trans-unit id="6d1350125897c58fd7a177587a74cb5b6d024e7d" translate="yes" xml:space="preserve">
          <source>Using double angle brackets inside of a while causes the open to use the three argument form (with the second argument being &lt;code&gt;&amp;lt;&lt;/code&gt; ), so all arguments in &lt;code&gt;ARGV&lt;/code&gt; are treated as literal filenames (including &lt;code&gt;&quot;-&quot;&lt;/code&gt; ). (Note that for convenience, if you use &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; and if &lt;code&gt;@ARGV&lt;/code&gt; is empty, it will still read from the standard input.)</source>
          <target state="translated">while内で二重山括弧を使用すると、openは3つの引数の形式（2番目の引数は &lt;code&gt;&amp;lt;&lt;/code&gt; ）を使用するため、 &lt;code&gt;ARGV&lt;/code&gt; のすべての引数はリテラルファイル名（ &lt;code&gt;&quot;-&quot;&lt;/code&gt; を含む）として扱われます。（便宜上、 &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; を使用し、 &lt;code&gt;@ARGV&lt;/code&gt; が空の場合でも、標準入力から読み取られます。）</target>
        </trans-unit>
        <trans-unit id="046e496e81943994e689bc356bf07a0e8b6601e5" translate="yes" xml:space="preserve">
          <source>Using double angle brackets inside of a while causes the open to use the three argument form (with the second argument being &lt;code&gt;&amp;lt;&lt;/code&gt;), so all arguments in &lt;code&gt;ARGV&lt;/code&gt; are treated as literal filenames (including &lt;code&gt;&quot;-&quot;&lt;/code&gt;). (Note that for convenience, if you use &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; and if &lt;code&gt;@ARGV&lt;/code&gt; is empty, it will still read from the standard input.)</source>
          <target state="translated">while内で二重山括弧を使用すると、openは3つの引数形式（2番目の引数は &lt;code&gt;&amp;lt;&lt;/code&gt; ）を使用するため、 &lt;code&gt;ARGV&lt;/code&gt; のすべての引数はリテラルファイル名（ &lt;code&gt;&quot;-&quot;&lt;/code&gt; を含む）として扱われます。（便宜上、 &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; を使用し、 &lt;code&gt;@ARGV&lt;/code&gt; が空の場合でも、標準入力から読み取られることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="87082cc66c652c8a0a8c6cf8ba8fff9479b0be7a" translate="yes" xml:space="preserve">
          <source>Using either $MM-&amp;gt;{uc $var} || $Config{lc $var}, it will attempt to replace it's $prefix with a $new_prefix.</source>
          <target state="translated">$ MM-&amp;gt; {uc $ var}のいずれかを使用する|| $ Config {lc $ var}、それは$ prefixを$ new_prefixで置き換えようとします。</target>
        </trans-unit>
        <trans-unit id="215bd29754319db34f811a8f9488126e67fb90a8" translate="yes" xml:space="preserve">
          <source>Using embedded Perl with POSIX locales</source>
          <target state="translated">POSIXロケールを使った組み込みPerlの使用</target>
        </trans-unit>
        <trans-unit id="b18845c29a07642058d0aa5ccceaac4ae90f9d59" translate="yes" xml:space="preserve">
          <source>Using gcc statement expressions</source>
          <target state="translated">gcc 文式の使用</target>
        </trans-unit>
        <trans-unit id="2fe92cd4a689f7ce76bfa5b984e6c38acace0732" translate="yes" xml:space="preserve">
          <source>Using gcc-3.x (tested with 3.0.4, 3.1, and 3.2) now works out of the box, as do recent gcc-2.9 builds available directly from IBM as part of their Linux compatibility packages, available here:</source>
          <target state="translated">gcc-3.x (3.0.4,3.1,3.2 でテスト済み)を使用することで、Linux 互換性パッケージの一部として IBM から直接入手できる最近の gcc-2.9 ビルドと同様に、すぐに動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="bdb0c9c540b125781f1757da970ccae106c403a1" translate="yes" xml:space="preserve">
          <source>Using gdb to look at specific parts of a program</source>
          <target state="translated">プログラムの特定の部分を見るために gdb を使用する</target>
        </trans-unit>
        <trans-unit id="57bf0c1d6a34f5d8784552210b62d448a2b10410" translate="yes" xml:space="preserve">
          <source>Using gdb to look at what the parser/lexer are doing</source>
          <target state="translated">gdbを使ってパーサー/レキサーの動作を見る</target>
        </trans-unit>
        <trans-unit id="d623a07c7dcea608be086ca8cc859423db79fbd9" translate="yes" xml:space="preserve">
          <source>Using iPkg has been deprecated on DSM 6, but an alternative is available for DSM 6: entware/opkg. For instructions on how to use that, please read &lt;a href=&quot;https://github.com/Entware-ng/Entware-ng/wiki/Install-on-Synology-NAS&quot;&gt;Install Entware-ng on Synology NAS&lt;/a&gt;</source>
          <target state="translated">iPkgの使用はDSM6で非推奨になりましたが、DSM6の代わりにentware / opkgを使用できます。その使用方法については&lt;a href=&quot;https://github.com/Entware-ng/Entware-ng/wiki/Install-on-Synology-NAS&quot;&gt;、SynologyNASへのEntware-ngのインストール&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="29fde3627eec5ec683270fb27481ef8c0d1c38c6" translate="yes" xml:space="preserve">
          <source>Using independent subexpressions to prevent backtracking</source>
          <target state="translated">独立した副表現を使って逆戻りを防ぐ</target>
        </trans-unit>
        <trans-unit id="e8b9dd4bb8ed97ffb07430ec6d35d6ea3ee41a4b" translate="yes" xml:space="preserve">
          <source>Using just the first character returned by \N{} in character class in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の文字クラスで\ N {}によって返される最初の文字のみを使用します。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="54f92a353c503ae2d38c23e8090282fadec8f34c" translate="yes" xml:space="preserve">
          <source>Using just the single character results returned by \p{} in (?[...]) in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の（？[...]）の\ p {}によって返される1文字の結果のみを使用します。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="31ab5d33d67aac1b9f2ccad1cbfd447894360c2b" translate="yes" xml:space="preserve">
          <source>Using logically paired delimiters can be even more readable:</source>
          <target state="translated">論理的にペアになった区切り文字を使用すると、さらに読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="3a44a3d396fc486b4ee2331bfc52809b0dad44df" translate="yes" xml:space="preserve">
          <source>Using methods that do not modify, but test that the contents works:</source>
          <target state="translated">修正しないメソッドを使用して、内容が動作するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b0d1b97f67a06429913567862e9a662a62326468" translate="yes" xml:space="preserve">
          <source>Using methods that do not modify, but test the contents works:</source>
          <target state="translated">変更はしないが、内容をテストするメソッドを使用することで動作します。</target>
        </trans-unit>
        <trans-unit id="a5aebc39485edc859f77fc91f87d35c5af691252" translate="yes" xml:space="preserve">
          <source>Using methods that do not modify, but testthe contents works:</source>
          <target state="translated">修正しない方法を使用しても、コンテンツが動作します。</target>
        </trans-unit>
        <trans-unit id="e3ceb297fd417e76a638eea2b51f025be00a47ad" translate="yes" xml:space="preserve">
          <source>Using minimum thread stack size of #</source>
          <target state="translated">の最小スレッドスタックサイズを使用しています。</target>
        </trans-unit>
        <trans-unit id="e5bf5cc7e02027fc347fd5821a540e8a6ddd5c65" translate="yes" xml:space="preserve">
          <source>Using modules that use version.pm</source>
          <target state="translated">version.pm を使用するモジュールを使用する</target>
        </trans-unit>
        <trans-unit id="c7108a91963b8344d52acb6aff4bb6481258231a" translate="yes" xml:space="preserve">
          <source>Using my() in false conditional.</source>
          <target state="translated">false条件でmy()を使う。</target>
        </trans-unit>
        <trans-unit id="8d80ea05e0ed4a3e5f034eecf41875e66394f03f" translate="yes" xml:space="preserve">
          <source>Using negation on a single letter option when bundling is in effect is pointless and will result in a warning.</source>
          <target state="translated">バンドルが有効なときに一文字オプションで否定を使うのは無意味であり、警告になります。</target>
        </trans-unit>
        <trans-unit id="67ef0619a31b7410b25402183523bb6bbe8910fd" translate="yes" xml:space="preserve">
          <source>Using non-thread-safe modules</source>
          <target state="translated">スレッドセーフでないモジュールの使用</target>
        </trans-unit>
        <trans-unit id="8d592d89e9701f8203326be192c2ab0972d996bc" translate="yes" xml:space="preserve">
          <source>Using open() for IPC</source>
          <target state="translated">IPC のための open()の使用</target>
        </trans-unit>
        <trans-unit id="f8c56b194bd4e8beff577cc65b3f025dea6a56fa" translate="yes" xml:space="preserve">
          <source>Using perl as shipped with HP-UX</source>
          <target state="translated">HP-UX に同梱されている perl を使用する</target>
        </trans-unit>
        <trans-unit id="543f3ae6c47ff0945f0303be3eebde44d6d34ce3" translate="yes" xml:space="preserve">
          <source>Using perl from HP's porting centre</source>
          <target state="translated">HPのポーティングセンターからperlを使う</target>
        </trans-unit>
        <trans-unit id="f25d65fa681aba1a3e380720334ce4fec43f73bf" translate="yes" xml:space="preserve">
          <source>Using perl from the command line</source>
          <target state="translated">コマンドラインからperlを使う</target>
        </trans-unit>
        <trans-unit id="8b05c58f51293f54962b4c8b3d752fd39e7ea984" translate="yes" xml:space="preserve">
          <source>Using perl to connect to Oracle databases through DBI and DBD::Oracle has caused a lot of people many headaches. Read README.hpux in the DBD::Oracle for much more information. The reason to mention it here is that Oracle requires a perl built with libcl and libpthread, the latter even when perl is build without threads. Building perl using all defaults, but still enabling to build DBD::Oracle later on can be achieved using</source>
          <target state="translated">Perlを使ってDBIやDBD::Oracleを使ってOracleデータベースに接続すると、多くの人が頭痛の種になっています。詳細は DBD::Oracle の README.hpux を読んでください。ここで言及する理由は、Oracle は libcl と libpthread でビルドされた perl を必要とし、後者は perl がスレッドなしでビルドされている場合でも必要だからです。すべてのデフォルトを使用して perl をビルドしても、後で DBD::Oracle をビルドできるようにするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="7a2126efc34d2ceda4c425a482fb9bb2ca847f69" translate="yes" xml:space="preserve">
          <source>Using perl's built in conversion of &lt;code&gt;0x&lt;/code&gt; notation:</source>
          <target state="translated">perlに組み込まれている &lt;code&gt;0x&lt;/code&gt; 表記の変換を使用する：</target>
        </trans-unit>
        <trans-unit id="1d2a5a50232b147e3a169652436928c470a9aa77" translate="yes" xml:space="preserve">
          <source>Using printf formats for non-basic C types</source>
          <target state="translated">非基本的なC言語の型でprintf形式を使用する</target>
        </trans-unit>
        <trans-unit id="df5384f5e1467c8d0cf10444a33f9f98d9662cee" translate="yes" xml:space="preserve">
          <source>Using qq(), q(), and qx(), instead of &quot;double quotes&quot;, 'single quotes', and `backticks`, may make one-liners easier to write.</source>
          <target state="translated">二重引用符」や「単一引用符」、`backticks` の代わりに qqq()、q()、qx()を使うと、ワンライナーを書きやすくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="322a6e9972f7fb8edd8295fc130224c62501d62e" translate="yes" xml:space="preserve">
          <source>Using regular expressions in Perl</source>
          <target state="translated">Perlで正規表現を使う</target>
        </trans-unit>
        <trans-unit id="6fac332e29fd0c799ec1618a5cc40f7221532230" translate="yes" xml:space="preserve">
          <source>Using single-quote as a delimiter protects the command from Perl's double-quote interpolation, passing it on to the shell instead:</source>
          <target state="translated">シングルクォートをデリミタとして使用することで、Perl のダブルクォート補間からコマンドを保護し、代わりにシェルに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="17533bb23c45c392541dce8e0a6b13e74ebcae12" translate="yes" xml:space="preserve">
          <source>Using t/harness for testing</source>
          <target state="translated">テストにT/ハーネスを使用</target>
        </trans-unit>
        <trans-unit id="8fc76a9390c03f1e1c8d53d3031773d984401877" translate="yes" xml:space="preserve">
          <source>Using the -a switch to &lt;code&gt;branch&lt;/code&gt; will also show the remote tracking branches in the repository:</source>
          <target state="translated">-aスイッチを使用して &lt;code&gt;branch&lt;/code&gt; すると、リポジトリ内のリモートトラッキングブランチも表示されます。</target>
        </trans-unit>
        <trans-unit id="29499bfd5b0fcb0c4c62782a738237d398c2bb02" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt; module. This module hides the complexity of the API defined below and comes with a number of &quot;canned&quot; filters that cover some of the common use-cases.</source>
          <target state="translated">&lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt;モジュールを使用します。このモジュールは、以下で定義されているAPIの複雑さを隠し、一般的なユースケースのいくつかをカバーするいくつかの「定型」フィルターが付属しています。</target>
        </trans-unit>
        <trans-unit id="e361630850aae34ab890ed75be3d3681ddf2f2b5" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; form as an exception trap in libraries does have some issues. Due to the current arguably broken state of &lt;code&gt;__DIE__&lt;/code&gt; hooks, you may wish not to trigger any &lt;code&gt;__DIE__&lt;/code&gt; hooks that user code may have installed. You can use the &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; construct for this purpose, as this example shows:</source>
          <target state="translated">ライブラリの例外トラップとして &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; フォームを使用すると、いくつかの問題が発生します。 &lt;code&gt;__DIE__&lt;/code&gt; フックの現在の間違いなく壊れた状態のため、ユーザーコードがインストールした &lt;code&gt;__DIE__&lt;/code&gt; フックをトリガーしないようにすることができます。次の例に示すように、この目的で &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; 構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="1af4f95da6bd74e39669d85ff89a3cba96099269" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; form as an exception trap in libraries does have some issues. Due to the current arguably broken state of &lt;code&gt;__DIE__&lt;/code&gt; hooks, you may wish not to trigger any &lt;code&gt;__DIE__&lt;/code&gt; hooks that user code may have installed. You can use the &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; construct for this purpose, as this example shows:</source>
          <target state="translated">ライブラリの例外トラップとして &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{}&lt;/a&gt;&lt;/code&gt; フォームを使用すると、いくつかの問題が発生します。 &lt;code&gt;__DIE__&lt;/code&gt; フックの現在の間違いなく壊れた状態のため、ユーザーコードがインストールした &lt;code&gt;__DIE__&lt;/code&gt; フックをトリガーしないようにすることができます。次の例に示すように、この目的で &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $SIG{__DIE__}&lt;/code&gt; 構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="de2169c7a04ae8dba7470fca93fa527b85798dbe" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/hex&quot;&gt;hex&lt;/a&gt;&lt;/code&gt; 関数を使用する：</target>
        </trans-unit>
        <trans-unit id="1108296e898fc2261dd95f4aa7570d85ddac276e" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; command of Perl debugger (see &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;) one can deduce which operations are overloaded (and which ancestor triggers this overloading). Say, if &lt;code&gt;eq&lt;/code&gt; is overloaded, then the method &lt;code&gt;(eq&lt;/code&gt; is shown by debugger. The method &lt;code&gt;()&lt;/code&gt; corresponds to the &lt;code&gt;fallback&lt;/code&gt; key (in fact a presence of this method shows that this package has overloading enabled, and it is what is used by the &lt;code&gt;Overloaded&lt;/code&gt; function of module &lt;code&gt;overload&lt;/code&gt; ).</source>
          <target state="translated">Perlデバッガー（&lt;a href=&quot;perldebug&quot;&gt;perldebugを&lt;/a&gt;参照）の &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m&lt;/a&gt;&lt;/code&gt; コマンドを使用して、どの操作がオーバーロードされているか（そしてどの祖先がこのオーバーロードをトリガーするか）を推測できます。たとえば、 &lt;code&gt;eq&lt;/code&gt; がオーバーロードされている場合、メソッド &lt;code&gt;(eq&lt;/code&gt; はデバッガーによって表示されます。メソッド &lt;code&gt;()&lt;/code&gt; は &lt;code&gt;fallback&lt;/code&gt; キーに対応します（実際、このメソッドの存在は、このパッケージでオーバーロードが有効になっていることを示しており、モジュール &lt;code&gt;overload&lt;/code&gt; の &lt;code&gt;Overloaded&lt;/code&gt; 関数）。</target>
        </trans-unit>
        <trans-unit id="aa67b5d2a4e3907ddf928ce915424a8bf19328d4" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/oct&quot;&gt;oct&lt;/a&gt;&lt;/code&gt; 関数の使用：</target>
        </trans-unit>
        <trans-unit id="53251a51732562d07b79a04a55bb9b101d155369" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; pragma ensures that all variables are properly declared and prevents other misuses of legacy Perl features.</source>
          <target state="translated">使用して &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; レガシーのPerlの機能の他の誤用は、プラグマのすべての変数が適切に宣言されていることを確認して防止します。</target>
        </trans-unit>
        <trans-unit id="1bda480993361a430b2548cdcd3f02a2d61e7bb5" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;In&lt;/code&gt; prefix avoids this ambiguity, so far. But new versions of Unicode continue to add new properties whose names begin with &lt;code&gt;In&lt;/code&gt; . There is a possibility that one of them someday will conflict with your usage. Since this is just a Perl extension, Unicode's name will take precedence and your code will become broken. Also, Unicode is free to add a script whose name begins with &lt;code&gt;In&lt;/code&gt; ; that would cause problems.</source>
          <target state="translated">&lt;code&gt;In&lt;/code&gt; 接頭辞を使用すると、これまでのところ、このあいまいさを回避できます。ただし、Unicodeの新しいバージョンでは、名前が &lt;code&gt;In&lt;/code&gt; で始まる新しいプロパティが引き続き追加されます。そのうちの1つがいつかあなたの使用法と衝突する可能性があります。これは単なるPerl拡張であるため、Unicodeの名前が優先され、コードが破損します。また、Unicodeでは、名前が &lt;code&gt;In&lt;/code&gt; で始まるスクリプトを自由に追加できます。それは問題を引き起こすでしょう。</target>
        </trans-unit>
        <trans-unit id="26fd47284e729cedc59da500b68930f9ee3e861b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;diagnostics&lt;/code&gt; pragma:</source>
          <target state="translated">&lt;code&gt;diagnostics&lt;/code&gt; プラグマの使用：</target>
        </trans-unit>
        <trans-unit id="6a48fe8770e4bc6343e8f7cc623c071dba07db7d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;eval {}&lt;/code&gt; form as an exception trap in libraries does have some issues. Due to the current arguably broken state of &lt;code&gt;__DIE__&lt;/code&gt; hooks, you may wish not to trigger any &lt;code&gt;__DIE__&lt;/code&gt; hooks that user code may have installed. You can use the &lt;code&gt;local $SIG{__DIE__}&lt;/code&gt; construct for this purpose, as this example shows:</source>
          <target state="translated">ライブラリで例外トラップとして &lt;code&gt;eval {}&lt;/code&gt; フォームを使用すると、いくつかの問題が発生します。 &lt;code&gt;__DIE__&lt;/code&gt; フックの現在の間違いなく壊れた状態のために、ユーザーコードがインストールした可能性のある &lt;code&gt;__DIE__&lt;/code&gt; フックをトリガーしたくない場合があります。この例が示すように、この目的のために &lt;code&gt;local $SIG{__DIE__}&lt;/code&gt; 構造を使用できます。</target>
        </trans-unit>
        <trans-unit id="7366bf6040d08d4b8373a9577c95b17583042824" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;hex&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;hex&lt;/code&gt; 関数の使用：</target>
        </trans-unit>
        <trans-unit id="062e9840191a74dbcab03b46006e8ae73c24f2a7" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;m&lt;/code&gt; command of Perl debugger (see &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;) one can deduce which operations are overloaded (and which ancestor triggers this overloading). Say, if &lt;code&gt;eq&lt;/code&gt; is overloaded, then the method &lt;code&gt;(eq&lt;/code&gt; is shown by debugger. The method &lt;code&gt;()&lt;/code&gt; corresponds to the &lt;code&gt;fallback&lt;/code&gt; key (in fact a presence of this method shows that this package has overloading enabled, and it is what is used by the &lt;code&gt;Overloaded&lt;/code&gt; function of module &lt;code&gt;overload&lt;/code&gt;).</source>
          <target state="translated">Perlデバッガーの &lt;code&gt;m&lt;/code&gt; コマンド（&lt;a href=&quot;perldebug&quot;&gt;perldebugを&lt;/a&gt;参照）を使用して、どの操作がオーバーロードされているか（およびどの祖先がこのオーバーロードをトリガーするか）を推測できます。たとえば、 &lt;code&gt;eq&lt;/code&gt; がオーバーロードされている場合、メソッド &lt;code&gt;(eq&lt;/code&gt; はデバッガーによって表示されます。メソッド &lt;code&gt;()&lt;/code&gt; は &lt;code&gt;fallback&lt;/code&gt; キーに対応します（実際、このメソッドの存在は、このパッケージでオーバーロードが有効になっていることを示し、これがによって使用されます。モジュール &lt;code&gt;overload&lt;/code&gt; &lt;code&gt;Overloaded&lt;/code&gt; 関数）。</target>
        </trans-unit>
        <trans-unit id="18c4a3f647e2f5d82357ab39ea92ae98228cc2e0" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;nntpstat&lt;/code&gt; command to select by message-id is valid but of questionable value, since a selection by message-id does &lt;b&gt;not&lt;/b&gt; alter the &quot;current article pointer&quot;.</source>
          <target state="translated">&lt;code&gt;nntpstat&lt;/code&gt; コマンドを使用してメッセージIDで選択することは有効ですが、メッセージIDによる選択は「現在の記事のポインタ」を変更し&lt;b&gt;ない&lt;/b&gt;ため、疑わしい値です。</target>
        </trans-unit>
        <trans-unit id="4aae14539f5087a9705a605bf5b6819cdd4aff20" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;oct&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;oct&lt;/code&gt; 関数の使用：</target>
        </trans-unit>
        <trans-unit id="13d6e3a9e702d5a08e56927cb7a997c29fc49a7b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;splain&lt;/code&gt; standalone filter program:</source>
          <target state="translated">使用 &lt;code&gt;splain&lt;/code&gt; スタンドアロンフィルタプログラムを：</target>
        </trans-unit>
        <trans-unit id="ac36b350bc5c7bff77a8c82b391ccc496e9c5d92" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;use &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt;&lt;/code&gt; pragma ensures that all variables are properly declared and prevents other misuses of legacy Perl features.</source>
          <target state="translated">使用して &lt;code&gt;use &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt;&lt;/code&gt; レガシーのPerlの機能の他の誤用は、プラグマのすべての変数が適切に宣言されていることを確認して防止します。</target>
        </trans-unit>
        <trans-unit id="5ea33d1eaae8e24543688decd019ec0f69a1f79d" translate="yes" xml:space="preserve">
          <source>Using the CPAN module &lt;code&gt;Bit::Vector&lt;/code&gt; :</source>
          <target state="translated">CPANモジュール &lt;code&gt;Bit::Vector&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="802b0f74ea43ba6c90816233a7cb9e542d5ff3eb" translate="yes" xml:space="preserve">
          <source>Using the CPAN module &lt;code&gt;Bit::Vector&lt;/code&gt;:</source>
          <target state="translated">CPANモジュールの使用 &lt;code&gt;Bit::Vector&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="910c0c6f5c0907edc9665e4e606f548cf3f4c360" translate="yes" xml:space="preserve">
          <source>Using the G_EVAL flag described above will always set &lt;code&gt;$@&lt;/code&gt; : clearing it if there was no error, and setting it to describe the error if there was an error in the called code. This is what you want if your intention is to handle possible errors, but sometimes you just want to trap errors and stop them interfering with the rest of the program.</source>
          <target state="translated">上記のG_EVALフラグを使用すると、常に &lt;code&gt;$@&lt;/code&gt; が設定されます。エラーがなかった場合はそれをクリアし、呼び出されたコードにエラーがあった場合はエラーを説明するように設定します。これは、考えられるエラーを処理することを意図している場合に必要ですが、エラーをトラップして、プログラムの残りの部分に干渉しないようにする場合もあります。</target>
        </trans-unit>
        <trans-unit id="bdf237d121731c138e436d867fb340448be7bbc3" translate="yes" xml:space="preserve">
          <source>Using the G_EVAL flag described above will always set &lt;code&gt;$@&lt;/code&gt;: clearing it if there was no error, and setting it to describe the error if there was an error in the called code. This is what you want if your intention is to handle possible errors, but sometimes you just want to trap errors and stop them interfering with the rest of the program.</source>
          <target state="translated">上記のG_EVALフラグを使用すると、常に &lt;code&gt;$@&lt;/code&gt; が設定されます。エラーがなかった場合はクリアし、呼び出されたコードにエラーがあった場合はエラーを説明するように設定します。これは、起こりうるエラーを処理することを目的としている場合に必要なことですが、エラーをトラップして、プログラムの他の部分への干渉を停止したい場合もあります。</target>
        </trans-unit>
        <trans-unit id="ece795b73c229ddff7119e1c0d2301ee76d727fb" translate="yes" xml:space="preserve">
          <source>Using the GitHub Pull Request workflow, your patch will automatically be available in a suitable format. If you wish to submit a patch to the p5p list for review, make sure to create it appropriately.</source>
          <target state="translated">GitHub Pull Request のワークフローを使えば、あなたのパッチは自動的に適切な形式で利用可能になります。パッチをp5pリストに投稿してレビューを受けたい場合は、適切に作成するようにしてください。</target>
        </trans-unit>
        <trans-unit id="81c0cbb80720ba82333e9cac242b49c7344290c8" translate="yes" xml:space="preserve">
          <source>Using the O_WRONLY flag.</source>
          <target state="translated">O_WRONLYフラグを使用しています。</target>
        </trans-unit>
        <trans-unit id="318651aa0afd4166b844c0395b31d38b0b5bb275" translate="yes" xml:space="preserve">
          <source>Using the copy or the original with overloaded math is okay, e.g. the following work:</source>
          <target state="translated">コピーや原本をオーバーロードした数学を使ってもOK、例えば次のような作業をしてもOKです。</target>
        </trans-unit>
        <trans-unit id="0de692f809342e61f897ad9464158e162341eb3b" translate="yes" xml:space="preserve">
          <source>Using the form $x += $y; etc over $x = $x + $y is faster, since a copy of $x must be made in the second case. For long numbers, the copy can eat up to 20% of the work (in the case of addition/subtraction, less for multiplication/division). If $y is very small compared to $x, the form $x += $y is MUCH faster than $x = $x + $y since making the copy of $x takes more time then the actual addition.</source>
          <target state="translated">2 番目のケースでは $x のコピーを作成しなければならないので、 $x +=$y;などの形式を $x=$x+$y の上に使用する方が高速です。長い数値の場合、コピーは最大20%の作業量を消費します (足し算/引き算の場合はそれ以下、乗算/除算の場合はそれ以下になります)。y が $x に比べて非常に小さい場合、 $x +=$y の形式は $x=$x+$y よりもはるかに速くなります。</target>
        </trans-unit>
        <trans-unit id="5f9ff7254d2f81af60c47b564085e4f9339d27bc" translate="yes" xml:space="preserve">
          <source>Using the low-level API defined below.</source>
          <target state="translated">以下に定義されている低レベルAPIを使用します。</target>
        </trans-unit>
        <trans-unit id="ce214a03a88942751d1032191930fa065fa65dbe" translate="yes" xml:space="preserve">
          <source>Using the same symbol to &lt;code&gt;open()&lt;/code&gt; a filehandle and a dirhandle throws a fatal error as of Perl 5.28.</source>
          <target state="translated">同じシンボルを使用してファイルハンドルとdirhandleを &lt;code&gt;open()&lt;/code&gt; すると、Perl5.28の時点で致命的なエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="398007f06ed5c26b6393d21585510169a401935b" translate="yes" xml:space="preserve">
          <source>Using the same symbol to open a filehandle and a dirhandle</source>
          <target state="translated">同じシンボルを使ってファイルハンドルとディレクトリハンドルを開く</target>
        </trans-unit>
        <trans-unit id="12ccaa0444078f2a1b0edccce245e0b394be801a" translate="yes" xml:space="preserve">
          <source>Using the supplied template, create the temporary directory in a standard location for temporary files. Equivalent to doing</source>
          <target state="translated">付属のテンプレートを使用して、一時ファイルの標準的な場所に一時ディレクトリを作成します。を実行するのと同じです。</target>
        </trans-unit>
        <trans-unit id="9e2035734d6024304e489d6917a2e574dba468c1" translate="yes" xml:space="preserve">
          <source>Using the syntax &lt;code&gt;MyParser::new()&lt;/code&gt; to invoke the constructor is</source>
          <target state="translated">構文 &lt;code&gt;MyParser::new()&lt;/code&gt; を使用してコンストラクターを呼び出すと、</target>
        </trans-unit>
        <trans-unit id="38da1db00a7b99c0a13533d364129dc73f4d104a" translate="yes" xml:space="preserve">
          <source>Using the template &lt;code&gt;pat..patend&lt;/code&gt;, this function unpacks the string &lt;code&gt;s..strend&lt;/code&gt; into a number of mortal SVs, which it pushes onto the perl argument (&lt;code&gt;@_&lt;/code&gt;) stack (so you will need to issue a &lt;code&gt;PUTBACK&lt;/code&gt; before and &lt;code&gt;SPAGAIN&lt;/code&gt; after the call to this function). It returns the number of pushed elements.</source>
          <target state="translated">この関数は、テンプレート &lt;code&gt;pat..patend&lt;/code&gt; を使用して、文字列 &lt;code&gt;s..strend&lt;/code&gt; をいくつかの致命的なSVに解凍し、perl引数（ &lt;code&gt;@_&lt;/code&gt; ）スタックにプッシュします（したがって、前に &lt;code&gt;SPAGAIN&lt;/code&gt; を発行し、後に &lt;code&gt;PUTBACK&lt;/code&gt; を発行する必要があります。この関数を呼び出します）。プッシュされた要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="acb6f03c46c097330bc723d0ffaf6e2dff2e6744" translate="yes" xml:space="preserve">
          <source>Using the template pat..patend, this function unpacks the string s..strend into a number of mortal SVs, which it pushes onto the perl argument (@_) stack (so you will need to issue a &lt;code&gt;PUTBACK&lt;/code&gt; before and &lt;code&gt;SPAGAIN&lt;/code&gt; after the call to this function). It returns the number of pushed elements.</source>
          <target state="translated">テンプレートpat..patendを使用して、この関数は（@_）それはperlの引数にプッシュし、致命SVの数、に文字列のs..strendをアンパックスタック（あなたが発行する必要がありますので、 &lt;code&gt;PUTBACK&lt;/code&gt; を前にして &lt;code&gt;SPAGAIN&lt;/code&gt; 後この関数の呼び出し）。プッシュされた要素の数を返します。</target>
        </trans-unit>
        <trans-unit id="7a18622b9f73cf084e1c40515e63402b15a29333" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::bitwise&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::bitwise&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="c41fbff9d3dc71a6f8badab26c0a06f0e18953ee" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::const_attr&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::const_attr&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="cc856eaeef355d43fa8953f9faffa4c073431f05" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::lexical_subs&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::lexical_subs&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="857c7cbd2ca8ba6b31bcdbf6dd9c2b32441faf23" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::lexical_topic&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::lexical_topic&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="de44610062c3b08fbff0aea3fd8f765facd544b6" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::postderef&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::postderef&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="e5af3cfd78b8e6f9d0563b3f4cf549f389ec7ba5" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::re_strict&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::re_strict&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="65fcb853c1a517ad8d77449f7c0018250e14485b" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::refaliasing&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::refaliasing&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="37bffd5a63be98cf17b1b1c985d57c2adb638271" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::regex_sets&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::regex_sets&lt;/code&gt; カテゴリーの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="c0a382b10a1d9a073eb205f7f2bb7818eb3bbf75" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::signatures&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::signatures&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="482e06051ee37583e9eea4d7cca4c50c1fbeaf4e" translate="yes" xml:space="preserve">
          <source>Using this feature triggers warnings in the category &lt;code&gt;experimental::smartmatch&lt;/code&gt; .</source>
          <target state="translated">この機能を使用すると、 &lt;code&gt;experimental::smartmatch&lt;/code&gt; カテゴリの警告がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="074c6a2ab43d29315af279e0bad192b2e6bd6e77" translate="yes" xml:space="preserve">
          <source>Using this inside your test tool takes care of a lot of boilerplate for you. It will ensure a context is acquired. It will capture and rethrow any exception. It will insure the context is released when you are done. It preserves the subroutine call context (array, scalar, void).</source>
          <target state="translated">これをテストツールの中で使用することで、多くのボイラプレートを処理してくれます。コンテキストを確実に取得します。例外をキャプチャして再スローします。テスト終了時にコンテキストが解放されるようにします。サブルーチンコールのコンテキスト(配列、スカラ、void)を保持します。</target>
        </trans-unit>
        <trans-unit id="2d4359e0b1138dffdeb53a1d3017037757b78671" translate="yes" xml:space="preserve">
          <source>Using this operator can lead to programs that are difficult to port, because the shell commands called vary between systems, and may in fact not be present at all. As one example, the &lt;code&gt;type&lt;/code&gt; command under the POSIX shell is very different from the &lt;code&gt;type&lt;/code&gt; command under DOS. That doesn't mean you should go out of your way to avoid backticks when they're the right way to get something done. Perl was made to be a glue language, and one of the things it glues together is commands. Just understand what you're getting yourself into.</source>
          <target state="translated">呼び出されるシェルコマンドはシステムによって異なり、実際にはまったく存在しない可能性があるため、この演算子を使用すると、移植が困難なプログラムにつながる可能性があります。一例として、 &lt;code&gt;type&lt;/code&gt; POSIXシェルの下のコマンドは、非常に異なる &lt;code&gt;type&lt;/code&gt; DOSの下でコマンド。これは、バッククォートが何かを行うための正しい方法である場合に、バッククォートを回避するために邪魔をしないことを意味しません。Perlはグルー言語として作られました、そしてそれが一緒に接着するものの1つはコマンドです。自分が何をしているのかを理解してください。</target>
        </trans-unit>
        <trans-unit id="b6c986b23b08d817ef2b3ef3edf4922835b01e64" translate="yes" xml:space="preserve">
          <source>Using this pragma to 'enable an experimental feature' is another way of saying that this pragma will disable the warnings which would result from using that feature. Therefore, the order in which pragmas are applied is important. In particular, you probably want to enable experimental features</source>
          <target state="translated">実験的な機能を有効にする」ためにこのプラグマを使うことは、このプラグマがその機能を使うことによって生じるであろう警告を無効にするという別の言い方です。したがって、プラグマを適用する順序は重要です。特に、実験的な機能を有効にしたいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="19a37b5dbd299333aab3745e6a99e1cd7583086d" translate="yes" xml:space="preserve">
          <source>Using various gambits, try to get a CV from an SV; in addition, try if possible to set &lt;code&gt;*st&lt;/code&gt; and &lt;code&gt;*gvp&lt;/code&gt; to the stash and GV associated with it. The flags in &lt;code&gt;lref&lt;/code&gt; are passed to &lt;code&gt;gv_fetchsv&lt;/code&gt;.</source>
          <target state="translated">さまざまなギャンビットを使用して、SVからCVを取得してみてください。さらに、可能であれば、 &lt;code&gt;*st&lt;/code&gt; と &lt;code&gt;*gvp&lt;/code&gt; をそれに関連付けられたスタッシュとGVに設定してみてください。 &lt;code&gt;lref&lt;/code&gt; のフラグはgv_fetchsvに渡され &lt;code&gt;gv_fetchsv&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4d70574aacd1d1847898b08d95988a332169072" translate="yes" xml:space="preserve">
          <source>Using various gambits, try to get a CV from an SV; in addition, try if possible to set &lt;code&gt;*st&lt;/code&gt; and &lt;code&gt;*gvp&lt;/code&gt; to the stash and GV associated with it. The flags in &lt;code&gt;lref&lt;/code&gt; are passed to gv_fetchsv.</source>
          <target state="translated">さまざまなガンビットを使用して、SVからCVを取得してみてください。さらに、可能であれば、 &lt;code&gt;*st&lt;/code&gt; と &lt;code&gt;*gvp&lt;/code&gt; をそれに関連付けられているスタッシュとGV に設定してみてください。 &lt;code&gt;lref&lt;/code&gt; のフラグはgv_fetchsvに渡されます。</target>
        </trans-unit>
        <trans-unit id="27cc9ed80851550eb53eda865f75d2e008f1dc72" translate="yes" xml:space="preserve">
          <source>Using various gambits, try to get an IO from an SV: the IO slot if its a GV; or the recursive result if we're an RV; or the IO slot of the symbol named after the PV if we're a string.</source>
          <target state="translated">GVならIOスロット、RVなら再帰結果、文字列ならPVにちなんだシンボルのIOスロットなど、様々なギャンビットを使ってSVからIOを取得しよう。</target>
        </trans-unit>
        <trans-unit id="40c4ad482806895c6f8713969b3ecb705fa44118" translate="yes" xml:space="preserve">
          <source>Using various methods &lt;b&gt;attempt&lt;/b&gt; to find the Fully Qualified Domain Name (FQDN) of the current host. From this determine the host-name and the host-domain.</source>
          <target state="translated">さまざまな方法を使用して、現在のホストの完全修飾ドメイン名（FQDN）を見つけよ&lt;b&gt;うと&lt;/b&gt;します。これから、ホスト名とホストドメインを決定します。</target>
        </trans-unit>
        <trans-unit id="e11cccd40e08f4d8829656864189eefc5a2d6492" translate="yes" xml:space="preserve">
          <source>Using wildcards on these is resource intensive, given the hundreds of thousands of legal names that must be checked against.</source>
          <target state="translated">これらのワイルドカードを使用することは、何十万もの法律上の名前をチェックしなければならないことを考えると、リソースを集中的に使用しています。</target>
        </trans-unit>
        <trans-unit id="984440cafd7acbcbdf562eb5fc6d6acd83d7c5d3" translate="yes" xml:space="preserve">
          <source>Using your favourite browser open the DSM management page and start the Package Center.</source>
          <target state="translated">お気に入りのブラウザを使ってDSM管理ページを開き、パッケージセンターを起動します。</target>
        </trans-unit>
        <trans-unit id="892738b2747cec8282f76dab54e62a0b79491609" translate="yes" xml:space="preserve">
          <source>Usual perl lib path (semi-list).</source>
          <target state="translated">通常のperlのlibパス(セミリスト)。</target>
        </trans-unit>
        <trans-unit id="b7cde133a5ff79130fd30cde6b361d0ab467bd51" translate="yes" xml:space="preserve">
          <source>Usually a hash ref, perhaps like this:</source>
          <target state="translated">通常はハッシュリファ、おそらくこのような感じです。</target>
        </trans-unit>
        <trans-unit id="ad35f25dce96f5712243ad327f82cc56b137d4d7" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVbyte&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVbyte&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="e38187632a58d32566d4fbc0b71dc22c87d815e2" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVbyte_nolen&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="a0ca6cd076c679630ac44632c012203ed79a11ad" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVutf8&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVutf8&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="b020d8f1cda36b9415a539e77cdc15cb72cc9530" translate="yes" xml:space="preserve">
          <source>Usually accessed via the &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; macro.</source>
          <target state="translated">通常、 &lt;code&gt;SvPVutf8_nolen&lt;/code&gt; マクロを介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="7c024fdbe2028ca7a62024863c10f1c75039e578" translate="yes" xml:space="preserve">
          <source>Usually called from the object destructor when using the OO interface.</source>
          <target state="translated">通常、OO インターフェースを使用する際には、オブジェクトデストラクタから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4285fe9b5258e25bc264f1b1a13271726e80e089" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. Ask for a STRING to be &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;-ed in executing code context.</source>
          <target state="translated">通常、DBパッケージから継承されます。実行中のコードコンテキストでSTRINGを &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; するように要求します。</target>
        </trans-unit>
        <trans-unit id="1b767b699ca666ca195f318b11bb903c3a22cd75" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. Ask for a STRING to be &lt;code&gt;eval&lt;/code&gt;-ed in executing code context.</source>
          <target state="translated">通常、DBパッケージから継承されます。コードコンテキストの実行時に &lt;code&gt;eval&lt;/code&gt; されるSTRINGを要求します。</target>
        </trans-unit>
        <trans-unit id="026b900ced2773356641f583fde7b62143e57def" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. If no arguments are passed, returns the poststop action string.</source>
          <target state="translated">通常はDBパッケージから継承されます。引数が渡されない場合は、ポストストップアクションの文字列を返します。</target>
        </trans-unit>
        <trans-unit id="7d9b8edd49b4cf562a81e5b8decb5de77fa1afd9" translate="yes" xml:space="preserve">
          <source>Usually inherited from DB package. If no arguments are passed, returns the prestop action string.</source>
          <target state="translated">通常は DB パッケージから継承されます。引数が渡されない場合は、プレストトップアクションの文字列を返します。</target>
        </trans-unit>
        <trans-unit id="0c460ecc82dad59a8d6a90636305608877d8c532" translate="yes" xml:space="preserve">
          <source>Usually programs take command line options as well as other arguments, for example, file names. It is good practice to always specify the options first, and the other arguments last. Getopt::Long will, however, allow the options and arguments to be mixed and 'filter out' all the options before passing the rest of the arguments to the program. To stop Getopt::Long from processing further arguments, insert a double dash &lt;code&gt;--&lt;/code&gt; on the command line:</source>
          <target state="translated">通常、プログラムはコマンドラインオプションと他の引数（ファイル名など）を取ります。常に最初にオプションを指定し、他の引数は最後に指定することをお勧めします。ただし、Getopt :: Longを使用すると、オプションと引数を混合して、残りの引数をプログラムに渡す前にすべてのオプションを「フィルターで除外」できます。Getopt :: Longが以降の引数を処理しないようにするには、コマンドラインに2つのダッシュ &lt;code&gt;--&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="2691970d8d342de7ae3956a2783fcd64867158b2" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_catpvf&lt;/code&gt; .</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_catpvf&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="77ebade53997d221a462c627fabe395463a20200" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_catpvf&lt;/code&gt;.</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_catpvf&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="221ae26d5a59ab131e1ef8287fa9b5a715378994" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_catpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_catpvf_mg&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="d5a96fc714b34f71556d82b6c790fd037deaf405" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_catpvf_mg&lt;/code&gt;.</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_catpvf_mg&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="1f47e17c3d0a65f1e24ab46a970720597c10ef39" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_setpvf&lt;/code&gt; .</source>
          <target state="translated">通常、そのフロントエンド &lt;code&gt;sv_setpvf&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="4b4e1489808f355127c321ef07168c767ea9ffc9" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_setpvf&lt;/code&gt;.</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_setpvf&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="3548cea6e28d55dc32a5bfd0e3189ea93c77d357" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_setpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_setpvf_mg&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="7b469233ee2df2f568c9601474bc5743c17d8760" translate="yes" xml:space="preserve">
          <source>Usually used via its frontend &lt;code&gt;sv_setpvf_mg&lt;/code&gt;.</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_setpvf_mg&lt;/code&gt; を介して使用されます。</target>
        </trans-unit>
        <trans-unit id="a9bb4c004a0f7c4b905c963d10b31ef391b5c334" translate="yes" xml:space="preserve">
          <source>Usually used via one of its frontends &lt;code&gt;sv_vcatpvf&lt;/code&gt; and &lt;code&gt;sv_vcatpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常は、フロントエンド &lt;code&gt;sv_vcatpvf&lt;/code&gt; および &lt;code&gt;sv_vcatpvf_mg&lt;/code&gt; のいずれかを介して使用されます。</target>
        </trans-unit>
        <trans-unit id="e4c3aa12e3e6daf3bf3f8b843c4e309f3a2e4a62" translate="yes" xml:space="preserve">
          <source>Usually used via one of its frontends &lt;code&gt;sv_vcatpvf&lt;/code&gt; and &lt;code&gt;sv_vcatpvf_mg&lt;/code&gt;.</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_vcatpvf&lt;/code&gt; および &lt;code&gt;sv_vcatpvf_mg&lt;/code&gt; のいずれかを介して使用されます。</target>
        </trans-unit>
        <trans-unit id="2f08502c181dd16b4bbf68ae24c29b059d5a1bce" translate="yes" xml:space="preserve">
          <source>Usually used via one of its frontends &lt;code&gt;sv_vsetpvf&lt;/code&gt; and &lt;code&gt;sv_vsetpvf_mg&lt;/code&gt; .</source>
          <target state="translated">通常は、フロントエンド &lt;code&gt;sv_vsetpvf&lt;/code&gt; および &lt;code&gt;sv_vsetpvf_mg&lt;/code&gt; のいずれかを介して使用されます。</target>
        </trans-unit>
        <trans-unit id="54fe455ec6ccaaba60c8865419721a15c0826228" translate="yes" xml:space="preserve">
          <source>Usually used via one of its frontends &lt;code&gt;sv_vsetpvf&lt;/code&gt; and &lt;code&gt;sv_vsetpvf_mg&lt;/code&gt;.</source>
          <target state="translated">通常、フロントエンド &lt;code&gt;sv_vsetpvf&lt;/code&gt; および &lt;code&gt;sv_vsetpvf_mg&lt;/code&gt; のいずれかを介して使用されます。</target>
        </trans-unit>
        <trans-unit id="7fff94b5e5d0e7b2c191398749185343c2f32a65" translate="yes" xml:space="preserve">
          <source>Usually when a variable is localized you want to make sure that this change affects the shortest scope possible. So unless you are already inside some short &lt;code&gt;{}&lt;/code&gt; block, you should create one yourself. For example:</source>
          <target state="translated">通常、変数がローカライズされるときは、この変更が可能な限り最短のスコープに影響を与えることを確認する必要があります。したがって、すでに短い &lt;code&gt;{}&lt;/code&gt; ブロック内にいるのでない限り、自分で作成する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="599351f57ec025dcf8b7e2139660d070855a8727" translate="yes" xml:space="preserve">
          <source>Usually you'll want to pack or unpack UTF-8 strings:</source>
          <target state="translated">通常はUTF-8の文字列をパックしたり、アンパックしたりしたくなります。</target>
        </trans-unit>
        <trans-unit id="cf8c2092d45b2a1234c61351a627eb75997a3b4f" translate="yes" xml:space="preserve">
          <source>Usually, the feature can be entirely ignored. Calling</source>
          <target state="translated">通常、この機能は完全に無視することができます。呼び出し</target>
        </trans-unit>
        <trans-unit id="3747a1556b1698c5e4df73c06a70d49b29b190d1" translate="yes" xml:space="preserve">
          <source>Usually, these single-character options can be bundled:</source>
          <target state="translated">通常、これらの1文字オプションは、バンドルすることができます。</target>
        </trans-unit>
        <trans-unit id="2ff606f5bbdaacc091df7cb49a15e201040dcd56" translate="yes" xml:space="preserve">
          <source>Utah</source>
          <target state="translated">Utah</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="29f83b729f46062c9dd1b32c5a75ee83eb4a8e12" translate="yes" xml:space="preserve">
          <source>Utilities for embedding Perl in C/C++ applications</source>
          <target state="translated">C/C++アプリケーションに Perl を埋め込むためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="c5c36f1963730a8868662732388dc0c0703a634a" translate="yes" xml:space="preserve">
          <source>Utilities for managing %^H scopes</source>
          <target state="translated">H スコープを管理するためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="35acf3ef6343308f92e84a6c665aa85cecd79c2b" translate="yes" xml:space="preserve">
          <source>Utilities to replace common UNIX commands in Makefiles etc.</source>
          <target state="translated">Makefile などで一般的な UNIX コマンドを置き換えるためのユーティリティ。</target>
        </trans-unit>
        <trans-unit id="1637dc7299266babf67a48df4d48af858929b4bd" translate="yes" xml:space="preserve">
          <source>Utilities to write and check a MANIFEST file</source>
          <target state="translated">MANIFESTファイルの書き込みとチェックのためのユーティリティ</target>
        </trans-unit>
        <trans-unit id="8bf056ede57539fe7ab422f88b516c58223a0adf" translate="yes" xml:space="preserve">
          <source>Utility Functions</source>
          <target state="translated">ユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="5486a0e8e13b0b039dc58793f09b6e6eb6465317" translate="yes" xml:space="preserve">
          <source>Utility Methods</source>
          <target state="translated">ユーティリティーの方法</target>
        </trans-unit>
        <trans-unit id="2ffeb2e1de80e186589b30d3572aa3cf779263b5" translate="yes" xml:space="preserve">
          <source>Utility for CPAN::Config file Initialization</source>
          <target state="translated">CPAN::Configファイル初期化ユーティリティ</target>
        </trans-unit>
        <trans-unit id="bc41614ee1aee6d115725273058a3f6ba77aebc5" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Cmd&lt;/code&gt; is capable of capturing buffers in it's current configuration.</source>
          <target state="translated">&lt;code&gt;IPC::Cmd&lt;/code&gt; が現在の構成でバッファーをキャプチャできるかどうかを通知するユーティリティ関数。</target>
        </trans-unit>
        <trans-unit id="f378c15ae2f401b4423675b36af5d2e3c5f0b6d5" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Cmd&lt;/code&gt; is capable of providing &lt;code&gt;run_forked&lt;/code&gt; on the current platform.</source>
          <target state="translated">&lt;code&gt;IPC::Cmd&lt;/code&gt; が現在のプラットフォームで &lt;code&gt;run_forked&lt;/code&gt; を提供できるかどうかを通知するユーティリティ関数。</target>
        </trans-unit>
        <trans-unit id="4bd9fd9b54869479fd1b5ab93786828f7dca29ba" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Open3&lt;/code&gt; is available. If the verbose flag is passed, it will print diagnostic messages if &lt;code&gt;IPC::Open3&lt;/code&gt; can not be found or loaded.</source>
          <target state="translated">&lt;code&gt;IPC::Open3&lt;/code&gt; が利用可能かどうかを通知するユーティリティ関数。詳細フラグが渡された場合、 &lt;code&gt;IPC::Open3&lt;/code&gt; が見つからないかロードできない場合に診断メッセージが出力されます。</target>
        </trans-unit>
        <trans-unit id="0e2f17ef240aba3f9b165b95741ed6655472196e" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Run&lt;/code&gt; is available. If the &lt;code&gt;verbose&lt;/code&gt; flag is passed, it will print diagnostic messages if &lt;a href=&quot;IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; can not be found or loaded.</source>
          <target state="translated">&lt;code&gt;IPC::Run&lt;/code&gt; が使用可能かどうかを通知するユーティリティ関数。場合は &lt;code&gt;verbose&lt;/code&gt; フラグが渡された場合、それは診断メッセージを出力します&lt;a href=&quot;IPC::Run&quot;&gt;IPC ::ランが&lt;/a&gt;見つからないか、またはロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="451db65a6c9d4e76bfbbd6735fbbae7748464a49" translate="yes" xml:space="preserve">
          <source>Utility function that tells you if &lt;code&gt;IPC::Run&lt;/code&gt; is available. If the &lt;code&gt;verbose&lt;/code&gt; flag is passed, it will print diagnostic messages if &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; can not be found or loaded.</source>
          <target state="translated">&lt;code&gt;IPC::Run&lt;/code&gt; が使用可能かどうかを通知するユーティリティ関数。場合は &lt;code&gt;verbose&lt;/code&gt; フラグが渡された場合、それは診断メッセージを出力します&lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC ::ランが&lt;/a&gt;見つからないか、またはロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="f16cdccb3faaa5e67faa6fdb65caa5cf29d51cbb" translate="yes" xml:space="preserve">
          <source>Utility functions</source>
          <target state="translated">ユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="1f8287a26f238372802990f191fcd97ce4ce1919" translate="yes" xml:space="preserve">
          <source>Utility functions to compare CPAN versions</source>
          <target state="translated">CPANのバージョンを比較するユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="5361245b089bc8d03d289e970efd7e683d4ec19f" translate="yes" xml:space="preserve">
          <source>Utility method that performs the reverse of &lt;code&gt;split_addr&lt;/code&gt;, returning a string formed by joining the specified host address and port number. The host address will be wrapped in &lt;code&gt;[]&lt;/code&gt; brackets if required (because it is a raw IPv6 numeric address).</source>
          <target state="translated">&lt;code&gt;split_addr&lt;/code&gt; の逆を実行し、指定されたホストアドレスとポート番号を結合して形成された文字列を返すユーティリティメソッド。ホストアドレスは、必要に応じて &lt;code&gt;[]&lt;/code&gt; 括弧で囲まれます（生のIPv6数値アドレスであるため）。</target>
        </trans-unit>
        <trans-unit id="3ed6d1a25db20e0f87bc8b51d704291bd4012594" translate="yes" xml:space="preserve">
          <source>Utility method that provides the parsing functionality described above. Returns a 2-element list, containing either the split hostname and port description if it could be parsed, or the given address and &lt;code&gt;undef&lt;/code&gt; if it was not recognised.</source>
          <target state="translated">上記の解析機能を提供するユーティリティメソッド。解析可能な場合は分割されたホスト名とポートの説明、または認識されなかった場合は指定されたアドレスと &lt;code&gt;undef&lt;/code&gt; のいずれかを含む2要素のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c04d18faf6a6212c265fa3f8b28cccfae0335158" translate="yes" xml:space="preserve">
          <source>Utility method that returns Makefile snippet to call &lt;code&gt;Mksymlists&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mksymlists&lt;/code&gt; を呼び出すためにMakefileスニペットを返すユーティリティメソッド。</target>
        </trans-unit>
        <trans-unit id="e944fa11ecc3fc10a3b409bcd5f6df4ebd3f4487" translate="yes" xml:space="preserve">
          <source>Uuencoding</source>
          <target state="translated">Uuencoding</target>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="b2b5b0afa386d0f6d03efebcc7e6436dddd260b0" translate="yes" xml:space="preserve">
          <source>V [pkg [vars]]</source>
          <target state="translated">V [pkg [vars]</target>
        </trans-unit>
        <trans-unit id="dcac8d0d355bfc2539bc51c5b27c73eb9148c07d" translate="yes" xml:space="preserve">
          <source>V6Only =&amp;gt; BOOL</source>
          <target state="translated">V6Only =&amp;gt; BOOL</target>
        </trans-unit>
        <trans-unit id="7dc10180b878fd7bd185c2d6a23c0519a292a3a0" translate="yes" xml:space="preserve">
          <source>VALUE</source>
          <target state="translated">VALUE</target>
        </trans-unit>
        <trans-unit id="41fdf9c71f9b0e67f5d577b57ffb59065472ee6e" translate="yes" xml:space="preserve">
          <source>VAR</source>
          <target state="translated">VAR</target>
        </trans-unit>
        <trans-unit id="b58c19038082c2364b9c1548d2e1a4ec413831d4" translate="yes" xml:space="preserve">
          <source>VARIABLE</source>
          <target state="translated">VARIABLE</target>
        </trans-unit>
        <trans-unit id="b5fcb61029823124da78ad195388293fa0fe55ea" translate="yes" xml:space="preserve">
          <source>VARIABLES</source>
          <target state="translated">VARIABLES</target>
        </trans-unit>
        <trans-unit id="65e8a60ae2734c94b1bca677070b6ce22543b21a" translate="yes" xml:space="preserve">
          <source>VENDORPREFIX</source>
          <target state="translated">VENDORPREFIX</target>
        </trans-unit>
        <trans-unit id="34cfc4300012f78dcac00f29aa2134528b1522e9" translate="yes" xml:space="preserve">
          <source>VERBINST</source>
          <target state="translated">VERBINST</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="1a0e7c6395aa749eb79993b77fe40299cee85e5a" translate="yes" xml:space="preserve">
          <source>VERSION NUMBERS</source>
          <target state="translated">バージョン番号</target>
        </trans-unit>
        <trans-unit id="4a66beacd54baefba431f2c1d69f2741b3909cfb" translate="yes" xml:space="preserve">
          <source>VERSION SPECIFICATIONS</source>
          <target state="translated">バージョン指定</target>
        </trans-unit>
        <trans-unit id="c88937cef0ebe636b7d4a7ab527077c5d199964a" translate="yes" xml:space="preserve">
          <source>VERSION may be either a literal such as v5.24.1, which will be compared to &lt;a href=&quot;perlvar#%24%5EV&quot;&gt;&lt;code&gt;$^V&lt;/code&gt;&lt;/a&gt; (or &lt;code&gt;$PERL_VERSION&lt;/code&gt; in &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;), or a numeric argument of the form 5.024001, which will be compared to &lt;a href=&quot;perlvar#%24%5D&quot;&gt;&lt;code&gt;$]&lt;/code&gt;&lt;/a&gt;. An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with &lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt;, which can do a similar check at compile time.</source>
          <target state="translated">VERSIONは、と比較されるv5.24.1、リテラルのいずれであってもよい&lt;a href=&quot;perlvar#%24%5EV&quot;&gt; &lt;code&gt;$^V&lt;/code&gt; &lt;/a&gt;（または &lt;code&gt;$PERL_VERSION&lt;/code&gt; で&lt;a href=&quot;english&quot;&gt;英語&lt;/a&gt;）、またはと比較する形5.024001の数値引数&lt;a href=&quot;perlvar#%24%5D&quot;&gt; &lt;code&gt;$]&lt;/code&gt; &lt;/a&gt;。VERSIONが現在のPerlインタープリターのバージョンより大きい場合、例外が発生します。コンパイル時に同様のチェックを実行できる&lt;a href=&quot;#use-Module-VERSION-LIST&quot;&gt; &lt;code&gt;use&lt;/code&gt; &lt;/a&gt;と比較してください。</target>
        </trans-unit>
        <trans-unit id="f189e0805d92e6bfdd489073d1a01e43b46335be" translate="yes" xml:space="preserve">
          <source>VERSION may be either a numeric argument such as 5.006, which will be compared to &lt;code&gt;$]&lt;/code&gt; , or a literal of the form v5.6.1, which will be compared to &lt;code&gt;$^V&lt;/code&gt; (aka $PERL_VERSION). An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with &lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;, which can do a similar check at compile time.</source>
          <target state="translated">VERSIONは、 &lt;code&gt;$]&lt;/code&gt; と比較される5.006などの数値引数、または &lt;code&gt;$^V&lt;/code&gt; （別名$ PERL_VERSION）と比較されるv5.6.1形式のリテラルのいずれかです。VERSIONが現在のPerlインタープリターのバージョンより大きい場合、例外が発生します。コンパイル時に同様のチェックを行うことができる&lt;a href=&quot;#use&quot;&gt;use&lt;/a&gt;と比較してください。</target>
        </trans-unit>
        <trans-unit id="3f48ba5d24abaab8495945658838888561f00637" translate="yes" xml:space="preserve">
          <source>VERSION may be either a numeric argument such as 5.006, which will be compared to &lt;code&gt;$]&lt;/code&gt; , or a literal of the form v5.6.1, which will be compared to &lt;code&gt;$^V&lt;/code&gt; (aka $PERL_VERSION). An exception is raised if VERSION is greater than the version of the current Perl interpreter. Compare with &lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;, which can do a similar check at compile time.</source>
          <target state="translated">VERSIONは、 &lt;code&gt;$]&lt;/code&gt; と比較される5.006などの数値引数、または &lt;code&gt;$^V&lt;/code&gt; （別名$ PERL_VERSION）と比較されるv5.6.1形式のリテラルのいずれかです。VERSIONが現在のPerlインタープリターのバージョンより大きい場合、例外が発生します。コンパイル時に同様のチェックを行うことができる&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;と比較してください。</target>
        </trans-unit>
        <trans-unit id="5d731ce07b6ab147e73f68aa93bae0038e5c91ec" translate="yes" xml:space="preserve">
          <source>VERSION($need)</source>
          <target state="translated">VERSION($need)</target>
        </trans-unit>
        <trans-unit id="8aab271152b932f50d15f749cb2ad3f6aa388e98" translate="yes" xml:space="preserve">
          <source>VERSION: version of your module</source>
          <target state="translated">VERSION:モジュールのバージョン</target>
        </trans-unit>
        <trans-unit id="cfc1761eb1b4fa057b0d19009a1cacfedb0165ec" translate="yes" xml:space="preserve">
          <source>VERSION_FROM</source>
          <target state="translated">VERSION_FROM</target>
        </trans-unit>
        <trans-unit id="439c8f3808541b8d38659912158a7dbb6e0d7837" translate="yes" xml:space="preserve">
          <source>VERSION_MACRO: which macro represents the version (usually 'VERSION')</source>
          <target state="translated">VERSION_MACRO:バージョンを表すマクロ (通常は 'VERSION' です)</target>
        </trans-unit>
        <trans-unit id="8fb8fe6db13804d93644ada9aadf9577aa7276da" translate="yes" xml:space="preserve">
          <source>VERSION_SYM</source>
          <target state="translated">VERSION_SYM</target>
        </trans-unit>
        <trans-unit id="d46d79d5b527245ae65e82f18ddd3ba603c16976" translate="yes" xml:space="preserve">
          <source>VERSION_SYM: like version but safe for use as an RCS revision number</source>
          <target state="translated">VERSION_SYM:バージョンに似ていますが、RCS リビジョン番号として使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="a850272b9ab78b2a9e2f07713cef8bc188b3ede9" translate="yes" xml:space="preserve">
          <source>VERY ALPHA AND LIKELY TO CHANGE</source>
          <target state="translated">非常にアルファで変化しやすい</target>
        </trans-unit>
        <trans-unit id="cce163acefa51c5f80357419607cd2acfc9bcda6" translate="yes" xml:space="preserve">
          <source>VIEW.EXE</source>
          <target state="translated">VIEW.EXE</target>
        </trans-unit>
        <trans-unit id="8e5207fffbfb609ac37a389e363f0db0120b9dae" translate="yes" xml:space="preserve">
          <source>VMS</source>
          <target state="translated">VMS</target>
        </trans-unit>
        <trans-unit id="6ad64d23074ae7d322786e62e572397b29888496" translate="yes" xml:space="preserve">
          <source>VMS Software Inc. web site, &lt;a href=&quot;http://www.vmssoftware.com&quot;&gt;http://www.vmssoftware.com&lt;/a&gt;</source>
          <target state="translated">VMS Software Inc. Webサイト、&lt;a href=&quot;http://www.vmssoftware.com&quot;&gt;http：//www.vmssoftware.com&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2719ba4075d542c93bfa0cdfa52b9abcdd8bf1e2" translate="yes" xml:space="preserve">
          <source>VMS file specification syntax is case-tolerant.</source>
          <target state="translated">VMSファイル指定構文は大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="731e9eea656f3a7b49847d98fa31bc8bf39060b9" translate="yes" xml:space="preserve">
          <source>VMS has $(MMSQUALIFIERS) which is a listing of all the original command line options. This is used in every invocation of make in the VMS Makefile so PASTHRU should not be necessary. Using PASTHRU tends to blow commands past the 256 character limit.</source>
          <target state="translated">VMS には $(MMSQUALIFIERS)があり、これはすべてのオリジナルのコマンドラインオプションのリストです。これは VMS Makefile の make のすべての呼び出しで使用されるので、PASTHRU は必要ありません。PASTHRU を使用すると、256 文字制限を超えたコマンドが飛んでしまう傾向があります。</target>
        </trans-unit>
        <trans-unit id="26ff54e8c5dec349cf161af5221feaf07190cd81" translate="yes" xml:space="preserve">
          <source>VMS implementation</source>
          <target state="translated">ブイエムエスの実装</target>
        </trans-unit>
        <trans-unit id="044140c726f05d1f569402b05b60683ee5f27ac8" translate="yes" xml:space="preserve">
          <source>VMS is VMS.</source>
          <target state="translated">VMSはVMSです。</target>
        </trans-unit>
        <trans-unit id="19cc64067b9d9a483d87606a5fc200285da5a247" translate="yes" xml:space="preserve">
          <source>VMS support for this process in the current release of Perl is sufficient to handle most extensions. (See the MakeMaker documentation for more details on installation options for extensions.)</source>
          <target state="translated">Perl の現在のリリースでは、この処理を VMS でサポートしているため、ほとんどの拡張機能を処理することができます (拡張機能のインストールオプションの詳細については、MakeMaker のドキュメントを参照してください)。(拡張機能のインストールオプションの詳細については、MakeMaker のドキュメントを参照してください)。</target>
        </trans-unit>
        <trans-unit id="a0b48a2078e8546f59c353d4437730af0e465606" translate="yes" xml:space="preserve">
          <source>VMS systems have a permissions structure that cannot be completely represented in a stat buffer, and unlike on other systems the builtin filetest operators respect this. The &lt;code&gt;File::stat&lt;/code&gt; overloads, however, do not, since the information required is not available.</source>
          <target state="translated">VMSシステムには、statバッファーで完全に表現できない権限構造があり、他のシステムとは異なり、組み込みのファイルテストオペレーターはこれを尊重します。 &lt;code&gt;File::stat&lt;/code&gt; 必要な情報が入手できないため、オーバーロードは、しかし、しないでください。</target>
        </trans-unit>
        <trans-unit id="d55cb5dcb20d55a8b83dc657590161b870f2b37b" translate="yes" xml:space="preserve">
          <source>VMS wants a dot in every file so we can't have one called 'pm_to_blib', it becomes 'pm_to_blib.' and MMS/K isn't smart enough to know that when you have a target called 'pm_to_blib' it should look for 'pm_to_blib.'.</source>
          <target state="translated">VMS はすべてのファイルにドットが欲しいので、'pm_to_blib' という名前のファイルを持つことができず、'pm_to_blib.' になってしまいますし、MMS/K は 'pm_to_blib' という名前のターゲットを持っているときに 'pm_to_blib.' を探すべきだということを知るほど賢くありません。</target>
        </trans-unit>
        <trans-unit id="0e24f5c7bee0e19f011bf4c3aca4390cc4355307" translate="yes" xml:space="preserve">
          <source>VMS::DCLsym</source>
          <target state="translated">VMS::DCLsym</target>
        </trans-unit>
        <trans-unit id="b336ca312fb6b5012bc0f980018b96b39cc5d97a" translate="yes" xml:space="preserve">
          <source>VMS::DCLsym - Perl extension to manipulate DCL symbols</source>
          <target state="translated">VMS::DCLsym-DCL シンボルを操作するための Perl 拡張モジュール</target>
        </trans-unit>
        <trans-unit id="f6a668d8a9e7c5b2e6ed9bd16636649f0694d2e0" translate="yes" xml:space="preserve">
          <source>VMS::Filespec</source>
          <target state="translated">VMS::Filespec</target>
        </trans-unit>
        <trans-unit id="ce371c18629eb5a2332472099dc4be0f24631603" translate="yes" xml:space="preserve">
          <source>VMS::Filespec - convert between VMS and Unix file specification syntax</source>
          <target state="translated">VMS::Filespec-VMS と Unix ファイル指定構文の間で変換する</target>
        </trans-unit>
        <trans-unit id="93e48439cb0a08d8d733a8d5837af8969bf46574" translate="yes" xml:space="preserve">
          <source>VMS::Stdio</source>
          <target state="translated">VMS::Stdio</target>
        </trans-unit>
        <trans-unit id="8c21bd1897d8287afaceb2b3d0158fb032b5f81b" translate="yes" xml:space="preserve">
          <source>VMS::Stdio - standard I/O functions via VMS extensions</source>
          <target state="translated">VMS::Stdio-VMS 拡張機能による標準 I/O 関数</target>
        </trans-unit>
        <trans-unit id="f2c0fca2c674b5e61f569c9a2276cbaa83043ca7" translate="yes" xml:space="preserve">
          <source>VMSish defaults for some values.</source>
          <target state="translated">一部の値については、VMSish のデフォルト値を使用します。</target>
        </trans-unit>
        <trans-unit id="b34e6b4bc196605f4ec9f36bd956bf4d5349e341" translate="yes" xml:space="preserve">
          <source>VOS</source>
          <target state="translated">VOS</target>
        </trans-unit>
        <trans-unit id="3ed32c224bfdeaef83075fa116b0ec438527a823" translate="yes" xml:space="preserve">
          <source>VOS Open-Source Software on the web at &lt;a href=&quot;http://ftp.stratus.com/pub/vos/vos.html&quot;&gt;http://ftp.stratus.com/pub/vos/vos.html&lt;/a&gt;</source>
          <target state="translated">Web上のVOSオープンソースソフトウェア（&lt;a href=&quot;http://ftp.stratus.com/pub/vos/vos.html&quot;&gt;http://ftp.stratus.com/pub/vos/vos.html）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="957b3df553f7dff11b930fd1fbc2f8551388c83f" translate="yes" xml:space="preserve">
          <source>VOS perl can emulate Unix filenames with &lt;code&gt;/&lt;/code&gt; as path separator. The native pathname characters greater-than, less-than, number-sign, and percent-sign are always accepted.</source>
          <target state="translated">VOS perlは、パス区切り文字として &lt;code&gt;/&lt;/code&gt; を使用してUnixファイル名をエミュレートできます。大なり、小なり、番号記号、パーセント記号のネイティブパス名文字は常に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="228203bd56ca8f33c2e2cf1d51934741f92afc9c" translate="yes" xml:space="preserve">
          <source>VOS specific subclass of ExtUtils::MM_Unix</source>
          <target state="translated">ExtUtils::MM_Unix の VOS 固有のサブクラス</target>
        </trans-unit>
        <trans-unit id="0565b8691c25d546ce54285d2b39e0a691ab1159" translate="yes" xml:space="preserve">
          <source>Valgrind also provides a cachegrind tool, invoked on perl as:</source>
          <target state="translated">Valgrind には、perl で起動される cachegrind ツールもあります。</target>
        </trans-unit>
        <trans-unit id="c78c948aba2c03abbf33d21db8439afd4716f2fd" translate="yes" xml:space="preserve">
          <source>Valid $types are &quot;MacOS&quot;, &quot;VMS&quot;, &quot;AmigaOS&quot;, &quot;OS2&quot;, &quot;RISCOS&quot;, &quot;MSWin32&quot;, &quot;DOS&quot; (also &quot;MSDOS&quot; for backwards bug compatibility), &quot;Epoc&quot; and &quot;Unix&quot; (all case-insensitive). If an unrecognized $type is given &quot;Unix&quot; will be assumed.</source>
          <target state="translated">有効な $type は、&quot;MacOS&quot;,&quot;VMS&quot;,&quot;AmigaOS&quot;,&quot;OS2&quot;,&quot;RISCOS&quot;,&quot;MSWin32&quot;,&quot;DOS&quot;(後方のバグ互換性のために &quot;MSDOS&quot;)、&quot;Epoc&quot;,&quot;Unix&quot; (すべて大文字小文字を区別しません)です。認識できない $type が与えられた場合は &quot;Unix&quot; と見なされます。</target>
        </trans-unit>
        <trans-unit id="d87824790e95edd528ec77ce1248bb255db934ac" translate="yes" xml:space="preserve">
          <source>Valid &lt;code&gt;family&lt;/code&gt; values for IPv4:</source>
          <target state="translated">IPv4の有効な &lt;code&gt;family&lt;/code&gt; 値：</target>
        </trans-unit>
        <trans-unit id="5a7b7334e746218435b347345ba3a54288017b88" translate="yes" xml:space="preserve">
          <source>Valid &lt;code&gt;family&lt;/code&gt; values for IPv6:</source>
          <target state="translated">IPv6の有効な &lt;code&gt;family&lt;/code&gt; 値：</target>
        </trans-unit>
        <trans-unit id="4f1f0874166d8489998a2dabaec65b65aacdc83c" translate="yes" xml:space="preserve">
          <source>Valid flags are R_CURSOR, R_IAFTER, R_IBEFORE, R_NOOVERWRITE and R_SETCURSOR.</source>
          <target state="translated">有効なフラグは、R_CURSOR、R_IAFTER、R_IBEFORE、R_NOOVERWRITE、R_SETCURSORです。</target>
        </trans-unit>
        <trans-unit id="123ee2fdc2efc6c40bcd8dcd85325f7aa9fb54a9" translate="yes" xml:space="preserve">
          <source>Valid options are:</source>
          <target state="translated">有効なオプションは</target>
        </trans-unit>
        <trans-unit id="0a290db91a18e145de3fd22cf0908d5ffbead566" translate="yes" xml:space="preserve">
          <source>Valid parameters include:</source>
          <target state="translated">有効なパラメータは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="544a40b2945362d5c270868a97b7c7b3dac0af34" translate="yes" xml:space="preserve">
          <source>Valid subkeys are as follows:</source>
          <target state="translated">有効なサブキーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f6574cf50e04ff3d08a215fe36df9b5f9360f4ab" translate="yes" xml:space="preserve">
          <source>Valid subkeys include:</source>
          <target state="translated">有効なサブキーには以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="372003ef32f4fb85add82bd740d0d6f53c484da5" translate="yes" xml:space="preserve">
          <source>Valid values are 0-9 and &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; .</source>
          <target state="translated">有効な値は0〜9および &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="01ad1474a233203dc1a0399d395439f1248f6024" translate="yes" xml:space="preserve">
          <source>Valid values are 0-9 and &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt;.</source>
          <target state="translated">有効な値は0〜9および &lt;code&gt;LZMA_PRESET_DEFAULT&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4fc9756075f953dec67702b67d732830de319ae" translate="yes" xml:space="preserve">
          <source>Valid values are from 1 to 9, where 9 is best compression.</source>
          <target state="translated">有効な値は1から9までで、9は最高の圧縮率です。</target>
        </trans-unit>
        <trans-unit id="61c0f0c254e06b47f44e05f0b16b8e15856c3b3c" translate="yes" xml:space="preserve">
          <source>Valid values for the file type are the following constants defined by Archive::Tar::Constant:</source>
          <target state="translated">ファイルタイプの有効な値は、Archive::Tar::Constant で定義されている以下の定数です。</target>
        </trans-unit>
        <trans-unit id="e2d14a7d576fe1f87f5d9e8e9cd3b19b9f3883ab" translate="yes" xml:space="preserve">
          <source>Valid values range from 0 to 250, where 0 means use the default value 30.</source>
          <target state="translated">有効な値の範囲は0から250までで、0はデフォルト値30を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="0c5fff5f0da802e753b92748a90cbb8fb80c8fcd" translate="yes" xml:space="preserve">
          <source>Validate CPAN distribution metadata structures</source>
          <target state="translated">CPAN ディストリビューションのメタデータ構造を検証する</target>
        </trans-unit>
        <trans-unit id="180bc31ac1ef2e429fcabdb69a6fabf90167ae43" translate="yes" xml:space="preserve">
          <source>Validate prototype string.</source>
          <target state="translated">プロトタイプの文字列を検証します。</target>
        </trans-unit>
        <trans-unit id="42ca1a4cda43fbba8ac585879a08c0309c1d20bf" translate="yes" xml:space="preserve">
          <source>Validate that a given string can be parsed as a version object, but doesn't actually perform the parsing. Can use either strict or lax validation rules. Can optionally set a number of hint variables to save the parsing code some time when tokenizing.</source>
          <target state="translated">与えられた文字列がバージョンオブジェクトとして解析できることを検証しますが、実際には解析は行いません。厳密な検証ルールと緩い検証ルールのどちらかを使用することができます。オプションで、トークン化の際に解析コードを保存するためのヒント変数をいくつか設定することができます。</target>
        </trans-unit>
        <trans-unit id="02a3f32fae979c719788dc5214614a1ca3e7e4ee" translate="yes" xml:space="preserve">
          <source>Validate the arguments given by the user based on strings, regexes, lists or even subroutines</source>
          <target state="translated">文字列、正規表現、リスト、あるいはサブルーチンに基づいて、ユーザが与えた引数を検証します。</target>
        </trans-unit>
        <trans-unit id="df34a04c181ba88b10ee206f3171d24fb01034c4" translate="yes" xml:space="preserve">
          <source>Validates that the SV contains valid internal structure for a version object. It may be passed either the version object (RV) or the hash itself (HV). If the structure is valid, it returns the HV. If the structure is invalid, it returns NULL.</source>
          <target state="translated">SV がバージョンオブジェクトの有効な内部構造を含んでいるかどうかを検証します。バージョンオブジェクト (RV)またはハッシュそのもの (HV)を渡すことができます。構造体が有効な場合は HV を返します。構造体が無効な場合は NULL を返します。</target>
        </trans-unit>
        <trans-unit id="ff4094183301726c60c811c9d974ce575c34af6b" translate="yes" xml:space="preserve">
          <source>Validation Tests</source>
          <target state="translated">バリデーションテスト</target>
        </trans-unit>
        <trans-unit id="4d900f1d051c288e24f709c981e03ccd37adfbbd" translate="yes" xml:space="preserve">
          <source>Value Stack</source>
          <target state="translated">バリュースタック</target>
        </trans-unit>
        <trans-unit id="fa414ab19e33bf9bd3aaeda3e54cacdb51c904fe" translate="yes" xml:space="preserve">
          <source>Value must be greater than zero. Pass an undef value to disable it:</source>
          <target state="translated">値はゼロよりも大きくする必要があります。無効にするには undef 値を渡します。</target>
        </trans-unit>
        <trans-unit id="8e360f8bf206de689bb55f1c4b0bd7cddaf9168d" translate="yes" xml:space="preserve">
          <source>Value of %s can be &quot;0&quot;; test with defined()</source>
          <target state="translated">値 %s は &quot;0&quot; にすることができます;defined()でテストします。</target>
        </trans-unit>
        <trans-unit id="b0d46691b36a4cfd8073ccea65b9af59d3d9a938" translate="yes" xml:space="preserve">
          <source>Value of CLI symbol &quot;%s&quot; too long</source>
          <target state="translated">CLI 記号 &quot;%s&quot; の値が長すぎます。</target>
        </trans-unit>
        <trans-unit id="5329eac11375c274bf2934a43944e0d3c65118bd" translate="yes" xml:space="preserve">
          <source>Value slices of arrays and hashes may also be taken with postfix dereferencing notation, with the following equivalencies:</source>
          <target state="translated">配列やハッシュの値のスライスは、以下の等価性を持った後置修飾解除記法でも取ることができます。</target>
        </trans-unit>
        <trans-unit id="e64d4ce7263370a1b49deef410915f500cf0475d" translate="yes" xml:space="preserve">
          <source>Values are pushed to the scope stack using the &lt;code&gt;ENTER&lt;/code&gt; macro, which begins a new nested scope. Any items pushed to the save stack are then restored at the next nested invocation of the &lt;code&gt;LEAVE&lt;/code&gt; macro.</source>
          <target state="translated">値は、新しいネストされたスコープを開始する &lt;code&gt;ENTER&lt;/code&gt; マクロを使用してスコープスタックにプッシュされます。保存スタックにプッシュされたアイテムは、 &lt;code&gt;LEAVE&lt;/code&gt; マクロの次のネストされた呼び出しで復元されます。</target>
        </trans-unit>
        <trans-unit id="9d49e40c3d7ac176f056540076e808cf6346a547" translate="yes" xml:space="preserve">
          <source>Values are usually referred to by name, or through a named reference. The first character of the name tells you to what sort of data structure it refers. The rest of the name tells you the particular value to which it refers. Usually this name is a single</source>
          <target state="translated">値は通常、名前で参照されるか、名前付きの参照を介して参照されます。名前の最初の文字は、それが参照するデータ構造の種類を示します。名前の残りの部分は、それが参照する特定の値を示します。通常、この名前は単一の</target>
        </trans-unit>
        <trans-unit id="b95834354d188d1c446139257f83c336e08b30f1" translate="yes" xml:space="preserve">
          <source>Values in this array are magical in numeric context: they compare equal to zero only if the line is not breakable.</source>
          <target state="translated">この配列の値は、数値的な文脈では魔法のようなものです:線が切れない場合にのみ、ゼロと等しく比較されます。</target>
        </trans-unit>
        <trans-unit id="f6e707c7542fd8d8b012efb4bcba22c20e79cddd" translate="yes" xml:space="preserve">
          <source>Values must be either strings with possible glob-style matching, or arrayrefs of strings or hashrefs which follow this pattern recursively.</source>
          <target state="translated">値は、グロブスタイルのマッチングが可能な文字列か、このパターンに再帰的に従う文字列またはハッシュタグの配列参照のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d7f43d25cf7a3a7519ab8b3625879499f1cffcc" translate="yes" xml:space="preserve">
          <source>Values of %meta_add will overwrite any existing metadata in those keys. %meta_merge will be merged with them.</source>
          <target state="translated">meta_add の値は、これらのキーにある既存のメタデータをすべて上書きします。meta_merge はこれらのキーにマージされます。</target>
        </trans-unit>
        <trans-unit id="a7c124848c793b84e7134c4f5b9435a446fc14e9" translate="yes" xml:space="preserve">
          <source>Values stored in config.sh as 'undef' are returned as undefined values. The perl &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; function can be used to check if a named variable exists.</source>
          <target state="translated">config.shに「undef」として格納されている値は、未定義の値として返されます。perl &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; 関数を使用して、名前付き変数が存在するかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="bc94d1a671b89ad57f1aa0156b15177125de31bb" translate="yes" xml:space="preserve">
          <source>Values stored in config.sh as 'undef' are returned as undefined values. The perl &lt;code&gt;exists&lt;/code&gt; function can be used to check if a named variable exists.</source>
          <target state="translated">config.shに「undef」として格納されている値は、未定義の値として返されます。perl &lt;code&gt;exists&lt;/code&gt; 関数を使用して、名前付き変数が存在するかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="5cea87cf757286518e1e5c257fb70591a7aa6af7" translate="yes" xml:space="preserve">
          <source>Var</source>
          <target state="translated">Var</target>
        </trans-unit>
        <trans-unit id="a8cc4d7cf8e75840c513ed884704f9fb054bc7c2" translate="yes" xml:space="preserve">
          <source>Variable &quot;%s&quot; is not available</source>
          <target state="translated">変数 &quot;%s&quot; は使用できません。</target>
        </trans-unit>
        <trans-unit id="5c72503df1f71c887b239158a8be4a2aa4b36a21" translate="yes" xml:space="preserve">
          <source>Variable &quot;%s&quot; is not imported%s</source>
          <target state="translated">変数 &quot;%s&quot; がインポートされていません。</target>
        </trans-unit>
        <trans-unit id="7ea9cac689300f159148e8f0a8f2616ca1bb44d6" translate="yes" xml:space="preserve">
          <source>Variable &quot;%s&quot; will not stay shared</source>
          <target state="translated">変数 &quot;%s&quot; は共有されたままになりません。</target>
        </trans-unit>
        <trans-unit id="7702d043cf3784b9e2c18ba2872555b4d1466f37" translate="yes" xml:space="preserve">
          <source>Variable length lookbehind not implemented in regex m/%s/</source>
          <target state="translated">可変長のルックバインドは正規表現では実装されていません。</target>
        </trans-unit>
        <trans-unit id="9adc561121b10d3163cfe0f3b6e1049a68105bd5" translate="yes" xml:space="preserve">
          <source>Variable names</source>
          <target state="translated">変数名</target>
        </trans-unit>
        <trans-unit id="5b24debec3e800c2a01f6fe873b50e5c2cfac784" translate="yes" xml:space="preserve">
          <source>Variable names in Perl can have several formats. Usually, they must begin with a letter or underscore, in which case they can be arbitrarily long (up to an internal limit of 251 characters) and may contain letters, digits, underscores, or the special sequence &lt;code&gt;::&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;. In this case, the part before the last &lt;code&gt;::&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; is taken to be a</source>
          <target state="translated">Perlの変数名にはいくつかの形式があります。通常、それらは文字またはアンダースコアで始まる必要があります。その場合、それらは任意に長くすることができ（251文字の内部制限まで）、文字、数字、アンダースコア、または特殊なシーケンス &lt;code&gt;::&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; を含めることができます。この場合、最後の &lt;code&gt;::&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; の前の部分は、</target>
        </trans-unit>
        <trans-unit id="41f1e305cd399af1bab308129c47ec5731d3275e" translate="yes" xml:space="preserve">
          <source>Variable scoping</source>
          <target state="translated">変数のスコープ</target>
        </trans-unit>
        <trans-unit id="ef32d1f98150e537dbad0f8aeb79c36da9b27e19" translate="yes" xml:space="preserve">
          <source>Variable suicide is when you (temporarily or permanently) lose the value of a variable. It is caused by scoping through my() and local() interacting with either closures or aliased foreach() iterator variables and subroutine arguments. It used to be easy to inadvertently lose a variable's value this way, but now it's much harder. Take this code:</source>
          <target state="translated">変数自殺とは、(一時的または恒久的に)変数の値を失うことです。これは、my()やlocal()のスコープがクロージャやエイリアスされたforeach()のイテレータ変数やサブルーチンの引数と相互作用することで起こります。以前はこの方法でうっかり変数の値を失ってしまうことは簡単でしたが、今ではかなり難しくなっています。このコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="47b3e8f70ad6355e89423e5426ec8864d96b0945" translate="yes" xml:space="preserve">
          <source>Variable syntax</source>
          <target state="translated">変数の構文</target>
        </trans-unit>
        <trans-unit id="9595ccfdc2cb14668d7371a6550c9db23eb820fc" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to designate the object in a C++ XSUB. This is always the proper type for the C++ object. See &lt;code&gt;&lt;a href=&quot;#CLASS&quot;&gt;&quot;CLASS&quot;&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;perlxs#Using-XS-With-C%2B%2B&quot;&gt;&quot;Using XS With C++&quot; in perlxs&lt;/a&gt;.</source>
          <target state="translated">C ++ XSUBでオブジェクトを指定するために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。これは常にC ++オブジェクトの適切な型です。&lt;a href=&quot;perlxs#Using-XS-With-C%2B%2B&quot;&gt;perlxsの&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;#CLASS&quot;&gt;&quot;CLASS&quot;&lt;/a&gt;&lt;/code&gt; および「C ++でのXSの使用」を参照してください。</target>
        </trans-unit>
        <trans-unit id="250f3f77348f1daf074babbf51813ae9c5cec2e2" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to designate the object in a C++ XSUB. This is always the proper type for the C++ object. See &lt;code&gt;CLASS&lt;/code&gt; and &lt;a href=&quot;perlxs#Using-XS-With-C%2b%2b&quot;&gt;Using XS With C++ in perlxs&lt;/a&gt;.</source>
          <target state="translated">C ++ XSUBでオブジェクトを指定するために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。これは常にC ++オブジェクトの適切なタイプです。 &lt;code&gt;CLASS&lt;/code&gt; および&lt;a href=&quot;perlxs#Using-XS-With-C%2b%2b&quot;&gt;perlxsでのC ++でのXSの使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bdd7354af00e561ecb80e253a23ed6bba8978906" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to hold the return value for an XSUB. This is always the proper type for the XSUB. See &lt;a href=&quot;perlxs#The-RETVAL-Variable&quot;&gt;&quot;The RETVAL Variable&quot; in perlxs&lt;/a&gt;.</source>
          <target state="translated">XSUBの戻り値を保持するために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。これは常にXSUBの適切なタイプです。&lt;a href=&quot;perlxs#The-RETVAL-Variable&quot;&gt;perlxsの「RETVAL変数」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="96f93b135985c0d3733c8f2cb9adad25487bb3de" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to hold the return value for an XSUB. This is always the proper type for the XSUB. See &lt;a href=&quot;perlxs#The-RETVAL-Variable&quot;&gt;The RETVAL Variable in perlxs&lt;/a&gt;.</source>
          <target state="translated">XSUBの戻り値を保持するために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。これは常にXSUBの適切なタイプです。&lt;a href=&quot;perlxs#The-RETVAL-Variable&quot;&gt;perlxsのRETVAL変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca0fab0f8678649996d70b3f1641bab2dc619d79" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the class name for a C++ XS constructor. This is always a &lt;code&gt;char*&lt;/code&gt; . See &lt;code&gt;THIS&lt;/code&gt; .</source>
          <target state="translated">C ++ XSコンストラクターのクラス名を示すために &lt;code&gt;xsubpp&lt;/code&gt; によってセットアップされる変数。これは常に &lt;code&gt;char*&lt;/code&gt; です。参照してください &lt;code&gt;THIS&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="2610f01c18618f6b4e61ef5579954542f95443b5" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the class name for a C++ XS constructor. This is always a &lt;code&gt;char*&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;#THIS&quot;&gt;&quot;THIS&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">C ++ XSコンストラクターのクラス名を示すために &lt;code&gt;xsubpp&lt;/code&gt; によってセットアップされる変数。これは常に &lt;code&gt;char*&lt;/code&gt; です。「これ &lt;code&gt;&lt;a href=&quot;#THIS&quot;&gt;&quot;THIS&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="5d9bc67084c6b4e0d289da64dc494006e6e91346" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the number of items on the stack. See &lt;a href=&quot;perlxs#Variable-length-Parameter-Lists&quot;&gt;&quot;Variable-length Parameter Lists&quot; in perlxs&lt;/a&gt;.</source>
          <target state="translated">スタック上のアイテムの数を示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。&lt;a href=&quot;perlxs#Variable-length-Parameter-Lists&quot;&gt;perlxsの「可変長パラメータリスト」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="047db5765fb37d513256abe7c3bb231a7730d231" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the number of items on the stack. See &lt;a href=&quot;perlxs#Variable-length-Parameter-Lists&quot;&gt;Variable-length Parameter Lists in perlxs&lt;/a&gt;.</source>
          <target state="translated">スタック上の項目の数を示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。&lt;a href=&quot;perlxs#Variable-length-Parameter-Lists&quot;&gt;perlxsの可変長パラメーターリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f9f90eb2fc40e8b2bdb8fd7693973daf5289f55d" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the stack base offset, used by the &lt;code&gt;ST&lt;/code&gt; , &lt;code&gt;XSprePUSH&lt;/code&gt; and &lt;code&gt;XSRETURN&lt;/code&gt; macros. The &lt;code&gt;dMARK&lt;/code&gt; macro must be called prior to setup the &lt;code&gt;MARK&lt;/code&gt; variable.</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; 、 &lt;code&gt;XSprePUSH&lt;/code&gt; 、 &lt;code&gt;XSRETURN&lt;/code&gt; マクロで使用される、スタックのベースオフセットを示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。 &lt;code&gt;dMARK&lt;/code&gt; のマクロを設定する前に呼び出す必要があり &lt;code&gt;MARK&lt;/code&gt; の変数。</target>
        </trans-unit>
        <trans-unit id="4c4206525b1955922faa9570698fd54c202117dd" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate the stack base offset, used by the &lt;code&gt;ST&lt;/code&gt;, &lt;code&gt;XSprePUSH&lt;/code&gt; and &lt;code&gt;XSRETURN&lt;/code&gt; macros. The &lt;code&gt;dMARK&lt;/code&gt; macro must be called prior to setup the &lt;code&gt;MARK&lt;/code&gt; variable.</source>
          <target state="translated">&lt;code&gt;ST&lt;/code&gt; 、 &lt;code&gt;XSprePUSH&lt;/code&gt; 、および &lt;code&gt;XSRETURN&lt;/code&gt; マクロで使用される、スタックベースオフセットを示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。 &lt;code&gt;dMARK&lt;/code&gt; のマクロを設定する前に呼び出す必要があり &lt;code&gt;MARK&lt;/code&gt; の変数。</target>
        </trans-unit>
        <trans-unit id="06c3d0dfeba1248a5e8fb4920323ae89e710ee04" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate which of an XSUB's aliases was used to invoke it. See &lt;a href=&quot;perlxs#The-ALIAS%3A-Keyword&quot;&gt;&quot;The ALIAS: Keyword&quot; in perlxs&lt;/a&gt;.</source>
          <target state="translated">XSUBのどのエイリアスがそれを呼び出すために使用されたかを示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。&lt;a href=&quot;perlxs#The-ALIAS%3A-Keyword&quot;&gt;perlxsの「ALIAS：キーワード」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="71ae1592070f983485afeb1f94bb9f14e5751687" translate="yes" xml:space="preserve">
          <source>Variable which is setup by &lt;code&gt;xsubpp&lt;/code&gt; to indicate which of an XSUB's aliases was used to invoke it. See &lt;a href=&quot;perlxs#The-ALIAS%3a-Keyword&quot;&gt;The ALIAS: Keyword in perlxs&lt;/a&gt;.</source>
          <target state="translated">呼び出しに使用されたXSUBのエイリアスを示すために &lt;code&gt;xsubpp&lt;/code&gt; によって設定される変数。「&lt;a href=&quot;perlxs#The-ALIAS%3a-Keyword&quot;&gt;エイリアス：perlxsのキーワード&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="262d6897e3f4e2ab273d197b04708a28aa8bbe0f" translate="yes" xml:space="preserve">
          <source>Variable-length Parameter Lists</source>
          <target state="translated">可変長パラメータリスト</target>
        </trans-unit>
        <trans-unit id="09f21e0b72a890b7452c0c80006a5d0fc60da109" translate="yes" xml:space="preserve">
          <source>Variable-length record format.</source>
          <target state="translated">可変長レコードフォーマット。</target>
        </trans-unit>
        <trans-unit id="79fb38e548a7d57e9341b9693eae82c2cb8b3f6a" translate="yes" xml:space="preserve">
          <source>Variable-length record with fixed control.</source>
          <target state="translated">制御が固定された可変長レコード。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="ab9c1a29fb6d3de8ef612773205828e2a92ce7d5" translate="yes" xml:space="preserve">
          <source>Variables begin with &quot;$&quot;, &quot;@&quot; or &quot;%&quot; in Perl.</source>
          <target state="translated">Perlでは、変数は&quot;$&quot;,&quot;@&quot;,&quot;%&quot;で始まります。</target>
        </trans-unit>
        <trans-unit id="5694c664526ad480f20d39864f7f31a2f29da553" translate="yes" xml:space="preserve">
          <source>Variables beginning with underscore used to be forced into package main, but we decided it was more useful for package writers to be able to use leading underscore to indicate private variables and method names. However, variables and functions named with a single &lt;code&gt;_&lt;/code&gt; , such as $_ and &lt;code&gt;sub _&lt;/code&gt; , are still forced into the package &lt;code&gt;main&lt;/code&gt; . See also &lt;a href=&quot;perlvar#The-Syntax-of-Variable-Names&quot;&gt;The Syntax of Variable Names in perlvar&lt;/a&gt;.</source>
          <target state="translated">以前はアンダースコアで始まる変数がパッケージmainに強制されていましたが、パッケージ作成者が先頭のアンダースコアを使用してプライベート変数とメソッド名を示すことができる方が便利だと判断しました。ただし、$ _や &lt;code&gt;sub _&lt;/code&gt; など、単一の &lt;code&gt;_&lt;/code&gt; で名前が付けられた変数および関数は、パッケージ &lt;code&gt;main&lt;/code&gt; に強制されます。&lt;a href=&quot;perlvar#The-Syntax-of-Variable-Names&quot;&gt;perlvarの変数名の構文&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="26168dd82bf7b2dc23bdaef3f18e5c1fff057d97" translate="yes" xml:space="preserve">
          <source>Variables beginning with underscore used to be forced into package main, but we decided it was more useful for package writers to be able to use leading underscore to indicate private variables and method names. However, variables and functions named with a single &lt;code&gt;_&lt;/code&gt;, such as $_ and &lt;code&gt;sub _&lt;/code&gt;, are still forced into the package &lt;code&gt;main&lt;/code&gt;. See also &lt;a href=&quot;perlvar#The-Syntax-of-Variable-Names&quot;&gt;&quot;The Syntax of Variable Names&quot; in perlvar&lt;/a&gt;.</source>
          <target state="translated">以前はアンダースコアで始まる変数がパッケージmainに強制されていましたが、パッケージ作成者が先頭のアンダースコアを使用してプライベート変数とメソッド名を示すことができる方が便利であると判断しました。ただし、$ _や &lt;code&gt;sub _&lt;/code&gt; などの単一の &lt;code&gt;_&lt;/code&gt; で名前が付けられた変数と関数は、引き続きパッケージ &lt;code&gt;main&lt;/code&gt; に強制されます。&lt;a href=&quot;perlvar#The-Syntax-of-Variable-Names&quot;&gt;perlvarの「変数名の構文」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1d9f29c9ec062e45676786fba6e4ad3c40d0d306" translate="yes" xml:space="preserve">
          <source>Variables can also be marked as shared at compile time by using the &lt;code&gt;:shared&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;code&gt;:shared&lt;/code&gt; 属性を使用して、コンパイル時に変数を共有としてマークすることもできます。</target>
        </trans-unit>
        <trans-unit id="0033a0c4e8e90fcf27d95fe18f7eaf535322599e" translate="yes" xml:space="preserve">
          <source>Variables created by &lt;code&gt;xsubpp&lt;/code&gt; and &lt;code&gt;xsubpp&lt;/code&gt; internal functions</source>
          <target state="translated">&lt;code&gt;xsubpp&lt;/code&gt; および &lt;code&gt;xsubpp&lt;/code&gt; 内部関数によって作成された変数</target>
        </trans-unit>
        <trans-unit id="2071c5e3d5c20b9e635746474f5973d9034dd205" translate="yes" xml:space="preserve">
          <source>Variables created by xsubpp and xsubpp internal functions</source>
          <target state="translated">xsubppとxsubppの内部関数で作成された変数</target>
        </trans-unit>
        <trans-unit id="ca450e789c925910d0144b598324f623b886a902" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; are not part of any package and are therefore never fully qualified with the package name. In particular, you're not allowed to try to make a package variable (or other global) lexical:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言された変数はパッケージの一部ではないため、パッケージ名で完全に修飾されることはありません。特に、パッケージ変数（または他のグローバル）を字句に変換することは許可されていません。</target>
        </trans-unit>
        <trans-unit id="56cf64dcca72d1ecb702e55ecfffca62a98a5220" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; only affect code</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 影響コードで宣言された変数</target>
        </trans-unit>
        <trans-unit id="d3d56dc9a78f42fb7499789e6d98d88210aa03d0" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;my&lt;/code&gt; are not part of any package and are therefore never fully qualified with the package name. In particular, you're not allowed to try to make a package variable (or other global) lexical:</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; で宣言された変数はパッケージの一部ではないため、パッケージ名で完全修飾されることはありません。特に、パッケージ変数（または他のグローバル）を字句にしようとすることは許可されていません。</target>
        </trans-unit>
        <trans-unit id="5f70fed22449adf43a6e36b2bbd2180af0d6323b" translate="yes" xml:space="preserve">
          <source>Variables declared with &lt;code&gt;my&lt;/code&gt; only affect code</source>
          <target state="translated">&lt;code&gt;my&lt;/code&gt; 唯一の影響コードで宣言された変数</target>
        </trans-unit>
        <trans-unit id="69ce46af0f21b3569cc5560ba28db507a1c93dca" translate="yes" xml:space="preserve">
          <source>Variables defined outside the &lt;code&gt;eval&lt;/code&gt; and used inside it retain their original UTF-8ness. Everything inside the string follows the normal rules for a Perl program with the given state of &lt;code&gt;use utf8&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; 外部で定義され、評価の内部で使用される変数は、元のUTF-8を保持します。文字列内のすべては、指定された &lt;code&gt;use utf8&lt;/code&gt; 状態utf8を持つPerlプログラムの通常のルールに従います。</target>
        </trans-unit>
        <trans-unit id="8ca248e3be58f6491cbca3baeca1c24e3a843c96" translate="yes" xml:space="preserve">
          <source>Variables related to filehandles</source>
          <target state="translated">ファイルハンドルに関連する変数</target>
        </trans-unit>
        <trans-unit id="558d3788e0608ddd59e54bc45d3414f4ed7b1e43" translate="yes" xml:space="preserve">
          <source>Variables related to formats</source>
          <target state="translated">フォーマットに関連する変数</target>
        </trans-unit>
        <trans-unit id="f14620676ede46dcf2f3ea6fa3c3858d660e5480" translate="yes" xml:space="preserve">
          <source>Variables related to regular expressions</source>
          <target state="translated">正規表現に関連する変数</target>
        </trans-unit>
        <trans-unit id="68141fa59316c5490c4a375661890da2077e4814" translate="yes" xml:space="preserve">
          <source>Variables related to the interpreter state</source>
          <target state="translated">インタプリタの状態に関連する変数</target>
        </trans-unit>
        <trans-unit id="45bdaa2e59ea64f1b1a54370586faae6f0ef4051" translate="yes" xml:space="preserve">
          <source>Variables set up from &lt;code&gt;$other_hashref&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;$other_hashref&lt;/code&gt; から設定された変数：</target>
        </trans-unit>
        <trans-unit id="9c673dd907946ee700d211969e18c41800f161cd" translate="yes" xml:space="preserve">
          <source>Variables that depend on the currently selected filehandle may be set by calling an appropriate object method on the &lt;code&gt;IO::Handle&lt;/code&gt; object, although this is less efficient than using the regular built-in variables. (Summary lines below for this contain the word HANDLE.) First you must say</source>
          <target state="translated">現在選択されているファイルハンドルに依存する変数は、 &lt;code&gt;IO::Handle&lt;/code&gt; オブジェクトで適切なオブジェクトメソッドを呼び出すことで設定できますが、これは通常の組み込み変数を使用する場合よりも効率的ではありません。（このための以下の要約行にはHANDLEという単語が含まれています。）最初に、次のように言う必要があります。</target>
        </trans-unit>
        <trans-unit id="6c75a819ab1d89b1b9557b70b74cda014bda1555" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_A&lt;/code&gt; (e.g., &lt;code&gt;isALPHA_A()&lt;/code&gt;) is identical to the base function with no suffix &lt;code&gt;&quot;_A&quot;&lt;/code&gt;. This variant is used to emphasize by its name that only ASCII-range characters can return TRUE.</source>
          <target state="translated">バリアントが &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_A&lt;/code&gt; （例えば、 &lt;code&gt;isALPHA_A()&lt;/code&gt; ）接尾辞なしで基本関数と同じです &lt;code&gt;&quot;_A&quot;&lt;/code&gt; 。このバリアントは、ASCII範囲の文字のみがTRUEを返すことができることを名前で強調するために使用されます。</target>
        </trans-unit>
        <trans-unit id="438e58bd036b53d85e207095a62e0d34f8fb5fa9" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_L1&lt;/code&gt; imposes the Latin-1 (or EBCDIC equivalent) character set onto the platform. That is, the code points that are ASCII are unaffected, since ASCII is a subset of Latin-1. But the non-ASCII code points are treated as if they are Latin-1 characters. For example, &lt;code&gt;isWORDCHAR_L1()&lt;/code&gt; will return true when called with the code point 0xDF, which is a word character in both ASCII and EBCDIC (though it represents different characters in each). If the input is a number that doesn't fit in an octet, FALSE is returned. (Perl's documentation uses a colloquial definition of Latin-1, to include all code points below 256.)</source>
          <target state="translated">バリアントは &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_L1&lt;/code&gt; プラットフォームにラテン1（またはEBCDIC同等の）文字セットを課しています。つまり、ASCIIはLatin-1のサブセットであるため、ASCIIであるコードポイントは影響を受けません。ただし、非ASCIIコードポイントは、Latin-1文字であるかのように扱われます。たとえば、 &lt;code&gt;isWORDCHAR_L1()&lt;/code&gt; は、ASCIIとEBCDICの両方の単語文字であるコードポイント0xDFで呼び出されたときにtrueを返します（ただし、それぞれで異なる文字を表します）。入力がオクテットに収まらない数値の場合、FALSEが返されます。 （Perlのドキュメントでは、Latin-1の口語的な定義を使用して、256未満のすべてのコードポイントを含めています。）</target>
        </trans-unit>
        <trans-unit id="2ecd9778e510c6c92f9f4175aedb118b27dfcb52" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC&lt;/code&gt; is like the &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_A&lt;/code&gt; and &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_L1&lt;/code&gt; variants, but the result is based on the current locale, which is what &lt;code&gt;LC&lt;/code&gt; in the name stands for. If Perl can determine that the current locale is a UTF-8 locale, it uses the published Unicode rules; otherwise, it uses the C library function that gives the named classification. For example, &lt;code&gt;isDIGIT_LC()&lt;/code&gt; when not in a UTF-8 locale returns the result of calling &lt;code&gt;isdigit()&lt;/code&gt;. FALSE is always returned if the input won't fit into an octet. On some platforms where the C library function is known to be defective, Perl changes its result to follow the POSIX standard's rules.</source>
          <target state="translated">バリアントは &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC&lt;/code&gt; 似ている &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_A&lt;/code&gt; と &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_L1&lt;/code&gt; バリアントが、結果は何である現在のロケールに基づいており、 &lt;code&gt;LC&lt;/code&gt; の略名インチ Perlが現在のロケールがUTF-8ロケールであると判断できる場合、公開されているUnicodeルールを使用します。それ以外の場合は、名前付き分類を提供するCライブラリ関数を使用します。たとえば、UTF-8ロケールにない場合の &lt;code&gt;isDIGIT_LC()&lt;/code&gt; は、 &lt;code&gt;isdigit()&lt;/code&gt; を呼び出した結果を返します。。入力がオクテットに収まらない場合は、常にFALSEが返されます。Cライブラリ関数に欠陥があることがわかっている一部のプラットフォームでは、PerlはPOSIX標準のルールに従うように結果を変更します。</target>
        </trans-unit>
        <trans-unit id="a9a373bcc3385df5e80bc17d512e29824facb6df" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_uvchr&lt;/code&gt; acts exactly like &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC&lt;/code&gt; for inputs less than 256, but for larger ones it returns the Unicode classification of the code point.</source>
          <target state="translated">変異体は、 &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_uvchr&lt;/code&gt; 正確ように作用する &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC&lt;/code&gt; 少ない256より入力に対して、より大きなものに、それはコードポイントのUnicodeの分類を返します。</target>
        </trans-unit>
        <trans-unit id="874df5512e3694c07df72eff5a9eb4e83beaba23" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_uvchr&lt;/code&gt; is exactly like the &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_L1&lt;/code&gt; variant, for inputs below 256, but if the code point is larger than 255, Unicode rules are used to determine if it is in the character class. For example, &lt;code&gt;isWORDCHAR_uvchr(0x100)&lt;/code&gt; returns TRUE, since 0x100 is LATIN CAPITAL LETTER A WITH MACRON in Unicode, and is a word character.</source>
          <target state="translated">バリアントは &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_uvchr&lt;/code&gt; まったく同じで &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_L1&lt;/code&gt; 256以下の入力のために、バリアントが、コード・ポイントが255よりも大きい場合には、Unicodeのルールは、それが文字クラスであるかどうかを判断するために使用されています。たとえば、 &lt;code&gt;isWORDCHAR_uvchr(0x100)&lt;/code&gt; はTRUEを返します。これは、0x100がUnicodeのLATIN CAPITAL LETTER A WITH MACRONであり、単語文字であるためです。</target>
        </trans-unit>
        <trans-unit id="e157f974af404a93fff305d4d8e7f7a16c700432" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_A&lt;/code&gt; (e.g., &lt;code&gt;isALPHA_A()&lt;/code&gt; ) is identical to the base function with no suffix &lt;code&gt;&quot;_A&quot;&lt;/code&gt; .</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_A&lt;/code&gt; （ &lt;code&gt;isALPHA_A()&lt;/code&gt; など）は、基本関数と同じで、接尾辞 &lt;code&gt;&quot;_A&quot;&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="ee9c1e7b92e7d90953ad4f56c51f36c66e7040f2" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_L1&lt;/code&gt; imposes the Latin-1 (or EBCDIC equivlalent) character set onto the platform. That is, the code points that are ASCII are unaffected, since ASCII is a subset of Latin-1. But the non-ASCII code points are treated as if they are Latin-1 characters. For example, &lt;code&gt;isWORDCHAR_L1()&lt;/code&gt; will return true when called with the code point 0xDF, which is a word character in both ASCII and EBCDIC (though it represents different characters in each).</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_L1&lt;/code&gt; は、Latin-1（またはEBCDICと同等）の文字セットをプラットフォームに適用します。つまり、ASCIIはLatin-1のサブセットであるため、ASCIIであるコードポイントは影響を受けません。ただし、非ASCIIコードポイントは、Latin-1文字であるかのように扱われます。たとえば、 &lt;code&gt;isWORDCHAR_L1()&lt;/code&gt; は、コードポイント0xDFで呼び出されるとtrueを返します。これは、ASCIIとEBCDICの両方の単語文字です（ただし、それぞれで異なる文字を表します）。</target>
        </trans-unit>
        <trans-unit id="2ba58c7880e89de07e18f6663de6bf67a770fa3f" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_LC&lt;/code&gt; is like the &lt;code&gt;isFOO_A&lt;/code&gt; and &lt;code&gt;isFOO_L1&lt;/code&gt; variants, but the result is based on the current locale, which is what &lt;code&gt;LC&lt;/code&gt; in the name stands for. If Perl can determine that the current locale is a UTF-8 locale, it uses the published Unicode rules; otherwise, it uses the C library function that gives the named classification. For example, &lt;code&gt;isDIGIT_LC()&lt;/code&gt; when not in a UTF-8 locale returns the result of calling &lt;code&gt;isdigit()&lt;/code&gt; . FALSE is always returned if the input won't fit into an octet. On some platforms where the C library function is known to be defective, Perl changes its result to follow the POSIX standard's rules.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_LC&lt;/code&gt; は &lt;code&gt;isFOO_A&lt;/code&gt; および &lt;code&gt;isFOO_L1&lt;/code&gt; バリアントに似ていますが、結果は現在のロケールに基づいています。これは、名前の &lt;code&gt;LC&lt;/code&gt; が表すものです。 Perlが現在のロケールがUTF-8ロケールであると判断できる場合、公開されたUnicodeルールを使用します。それ以外の場合は、名前付きの分類を提供するCライブラリ関数を使用します。たとえば、UTF-8ロケールでない場合、 &lt;code&gt;isDIGIT_LC()&lt;/code&gt; は &lt;code&gt;isdigit()&lt;/code&gt; を呼び出した結果を返します。入力がオクテットに収まらない場合は、常にFALSEが返されます。 Cライブラリ関数に欠陥があることがわかっている一部のプラットフォームでは、PerlはPOSIX標準の規則に従うように結果を変更します。</target>
        </trans-unit>
        <trans-unit id="0cd770db8027add93d163f3958fbe5e0a03fc884" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_LC_utf8&lt;/code&gt; is like &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; , but the input is a pointer to a (known to be well-formed) UTF-8 encoded string (&lt;code&gt;U8*&lt;/code&gt; or &lt;code&gt;char*&lt;/code&gt; ). The classification of just the first (possibly multi-byte) character in the string is tested.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_LC_utf8&lt;/code&gt; は &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; に似ていますが、入力は（整形式であることがわかっている）UTF-8エンコード文字列（ &lt;code&gt;U8*&lt;/code&gt; または &lt;code&gt;char*&lt;/code&gt; ）へのポインターです。文字列の最初の（おそらくマルチバイトの）文字だけの分類がテストされます。</target>
        </trans-unit>
        <trans-unit id="2e2baae040164a854cd256e8bb0078a6be7e0556" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; is like &lt;code&gt;isFOO_LC&lt;/code&gt; , but is defined on any UV. It returns the same as &lt;code&gt;isFOO_LC&lt;/code&gt; for input code points less than 256, and returns the hard-coded, not-affected-by-locale, Unicode results for larger ones.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_LC_uvchr&lt;/code&gt; は &lt;code&gt;isFOO_LC&lt;/code&gt; に似ていますが、任意のUVで定義されます。これは、256未満の入力コードポイントに対して &lt;code&gt;isFOO_LC&lt;/code&gt; と同じ結果を返し、ハードコードされた、ロケールの影響を受けない、大きなコード結果のUnicode結果を返します。</target>
        </trans-unit>
        <trans-unit id="2ad298897b2ed0cfe491083076d3380e15f29221" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_uni&lt;/code&gt; is like the &lt;code&gt;isFOO_L1&lt;/code&gt; variant, but accepts any UV code point as input. If the code point is larger than 255, Unicode rules are used to determine if it is in the character class. For example, &lt;code&gt;isWORDCHAR_uni(0x100)&lt;/code&gt; returns TRUE, since 0x100 is LATIN CAPITAL LETTER A WITH MACRON in Unicode, and is a word character.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_uni&lt;/code&gt; は &lt;code&gt;isFOO_L1&lt;/code&gt; バリアントに似ていますが、任意のUVコードポイントを入力として受け入れます。コードポイントが255より大きい場合は、Unicodeルールを使用して、それが文字クラスにあるかどうかを判断します。たとえば、 &lt;code&gt;isWORDCHAR_uni(0x100)&lt;/code&gt; はTRUEを返します。0x100はUnicodeのラテン大文字Aウィズマクロンであり、単語文字であるためです。</target>
        </trans-unit>
        <trans-unit id="4a2fc63255fac34edd7ea0e57902967c8c3777dd" translate="yes" xml:space="preserve">
          <source>Variant &lt;code&gt;isFOO_utf8&lt;/code&gt; is like &lt;code&gt;isFOO_uni&lt;/code&gt; , but the input is a pointer to a (known to be well-formed) UTF-8 encoded string (&lt;code&gt;U8*&lt;/code&gt; or &lt;code&gt;char*&lt;/code&gt; ). The classification of just the first (possibly multi-byte) character in the string is tested.</source>
          <target state="translated">バリアント &lt;code&gt;isFOO_utf8&lt;/code&gt; は &lt;code&gt;isFOO_uni&lt;/code&gt; に似ていますが、入力は（整形式であることがわかっている）UTF-8エンコードされた文字列（ &lt;code&gt;U8*&lt;/code&gt; または &lt;code&gt;char*&lt;/code&gt; ）へのポインターです。文字列の最初の（おそらくマルチバイトの）文字だけの分類がテストされます。</target>
        </trans-unit>
        <trans-unit id="786f5e70748cc3ce6d3a4d95eb203e5790a45b20" translate="yes" xml:space="preserve">
          <source>Variant of make you intend to run the generated Makefile with. This parameter lets Makefile.PL know what make quirks to account for when generating the Makefile.</source>
          <target state="translated">生成されたMakefileを実行したいmakeのバリエーション。このパラメータは、Makefile.PLがMakefileを生成する際にどのようなmakeの癖を考慮すべきかを知ることを可能にします。</target>
        </trans-unit>
        <trans-unit id="e4e1f2b8b132fbf4e7660ea9944ebd7d3a32964e" translate="yes" xml:space="preserve">
          <source>Variants &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_utf8&lt;/code&gt; and &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_utf8_safe&lt;/code&gt; are like &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_uvchr&lt;/code&gt;, but are used for UTF-8 encoded strings. The two forms are different names for the same thing. Each call to one of these classifies the first character of the string starting at &lt;code&gt;p&lt;/code&gt;. The second parameter, &lt;code&gt;e&lt;/code&gt;, points to anywhere in the string beyond the first character, up to one byte past the end of the entire string. Although both variants are identical, the suffix &lt;code&gt;_safe&lt;/code&gt; in one name emphasizes that it will not attempt to read beyond &lt;code&gt;e - 1&lt;/code&gt;, provided that the constraint &lt;code&gt;s &amp;lt; e&lt;/code&gt; is true (this is asserted for in &lt;code&gt;-DDEBUGGING&lt;/code&gt; builds). If the UTF-8 for the input character is malformed in some way, the program may croak, or the function may return FALSE, at the discretion of the implementation, and subject to change in future releases.</source>
          <target state="translated">バリアントは &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_utf8&lt;/code&gt; と &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_utf8_safe&lt;/code&gt; のようなもの &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_LC_uvchr&lt;/code&gt; が、UTF-8エンコードされた文字列のために使用されています。 2つの形式は、同じものの異なる名前です。これらのいずれかを呼び出すたびに、 &lt;code&gt;p&lt;/code&gt; で始まる文字列の最初の文字が分類されます。 2番目のパラメータ &lt;code&gt;e&lt;/code&gt; は、最初の文字を超えて、文字列全体の終わりを1バイト超えた文字列内の任意の場所を指します。両方のバリアントは同一ですが、1つの名前の接尾辞 &lt;code&gt;_safe&lt;/code&gt; は、制約 &lt;code&gt;s &amp;lt; e&lt;/code&gt; 場合、 &lt;code&gt;e - 1&lt;/code&gt; を超えて読み取ろうとしないことを強調しています。trueです（これは &lt;code&gt;-DDEBUGGING&lt;/code&gt; ビルドでアサートされます）。入力文字のUTF-8が何らかの形で不正な形式である場合、実装の裁量でプログラムが鳴ったり、関数がFALSEを返したりする可能性があり、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="295db905c184e8133af3f2c19a8cc4a4448692b0" translate="yes" xml:space="preserve">
          <source>Variants &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_utf8&lt;/code&gt; and &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_utf8_safe&lt;/code&gt; are like &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_uvchr&lt;/code&gt;, but are used for UTF-8 encoded strings. The two forms are different names for the same thing. Each call to one of these classifies the first character of the string starting at &lt;code&gt;p&lt;/code&gt;. The second parameter, &lt;code&gt;e&lt;/code&gt;, points to anywhere in the string beyond the first character, up to one byte past the end of the entire string. Although both variants are identical, the suffix &lt;code&gt;_safe&lt;/code&gt; in one name emphasizes that it will not attempt to read beyond &lt;code&gt;e - 1&lt;/code&gt;, provided that the constraint &lt;code&gt;s &amp;lt; e&lt;/code&gt; is true (this is asserted for in &lt;code&gt;-DDEBUGGING&lt;/code&gt; builds). If the UTF-8 for the input character is malformed in some way, the program may croak, or the function may return FALSE, at the discretion of the implementation, and subject to change in future releases.</source>
          <target state="translated">バリアントは &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_utf8&lt;/code&gt; と &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_utf8_safe&lt;/code&gt; のようなもの &lt;code&gt;is&lt;i&gt;FOO&lt;/i&gt;_uvchr&lt;/code&gt; が、UTF-8エンコードされた文字列のために使用されています。 2つの形式は、同じものの異なる名前です。これらのいずれかを呼び出すたびに、 &lt;code&gt;p&lt;/code&gt; で始まる文字列の最初の文字が分類されます。 2番目のパラメータ &lt;code&gt;e&lt;/code&gt; は、最初の文字を超えて、文字列全体の終わりを1バイト超えた文字列内の任意の場所を指します。両方のバリアントは同一ですが、1つの名前の接尾辞 &lt;code&gt;_safe&lt;/code&gt; は、制約 &lt;code&gt;s &amp;lt; e&lt;/code&gt; 場合、 &lt;code&gt;e - 1&lt;/code&gt; を超えて読み取ろうとしないことを強調しています。trueです（これは &lt;code&gt;-DDEBUGGING&lt;/code&gt; ビルドでアサートされます）。入力文字のUTF-8が何らかの形で不正な形式である場合、実装の裁量でプログラムが鳴ったり、関数がFALSEを返したりする可能性があり、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="075be6a60b145b1ce1b874ce5a76b369cdd0b469" translate="yes" xml:space="preserve">
          <source>Various</source>
          <target state="translated">Various</target>
        </trans-unit>
        <trans-unit id="8c77b7455bfd7adea569c5a3c57a2f0f3eeee8c3" translate="yes" xml:space="preserve">
          <source>Various ALLOW flags can be set in &lt;code&gt;flags&lt;/code&gt; to allow (and not warn on) individual types of malformations, such as the sequence being overlong (that is, when there is a shorter sequence that can express the same code point; overlong sequences are expressly forbidden in the UTF-8 standard due to potential security issues). Another malformation example is the first byte of a character not being a legal first byte. See</source>
          <target state="translated">各種フラグを設定することができるALLOW &lt;code&gt;flags&lt;/code&gt; すぎる配列が明示禁止され、そのような配列は、同じコードポイントを表現することができ、より短い配列が存在する場合には、その（すぎるものとして奇形の（上の警告としない）可能にするために、個々のタイプ、セキュリティ上の問題がある可能性があるため、UTF-8標準では）。別の不正な例は、文字の最初のバイトが正当な最初のバイトではないことです。見る</target>
        </trans-unit>
        <trans-unit id="68c0704bdf0a70945d4fb86036dd49b70f248c62" translate="yes" xml:space="preserve">
          <source>Various HP-UX encodings</source>
          <target state="translated">様々な HP-UX エンコーディング</target>
        </trans-unit>
        <trans-unit id="c07be7bc36dbf55adefbb7fd81ec90050f12f5c8" translate="yes" xml:space="preserve">
          <source>Various Mac encodings</source>
          <target state="translated">さまざまな Mac エンコーディング</target>
        </trans-unit>
        <trans-unit id="afddad8d7b065f14bf0be2c971fc90accba56a72" translate="yes" xml:space="preserve">
          <source>Various Unicode Transformation Formats</source>
          <target state="translated">さまざまなユニコード変換フォーマット</target>
        </trans-unit>
        <trans-unit id="404e3a3ac470d95d1670f966be1334f65704910a" translate="yes" xml:space="preserve">
          <source>Various control characters can be written in C language style: &lt;code&gt;&quot;\n&quot;&lt;/code&gt; matches a newline, &lt;code&gt;&quot;\t&quot;&lt;/code&gt; a tab, &lt;code&gt;&quot;\r&quot;&lt;/code&gt; a carriage return, &lt;code&gt;&quot;\f&quot;&lt;/code&gt; a form feed,</source>
          <target state="translated">さまざまな制御文字をC言語スタイルで記述できます。 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; は改行に一致し、 &lt;code&gt;&quot;\t&quot;&lt;/code&gt; はタブに、 &lt;code&gt;&quot;\r&quot;&lt;/code&gt; はキャリッジリターンに、 &lt;code&gt;&quot;\f&quot;&lt;/code&gt; はフォームフィードに一致します。</target>
        </trans-unit>
        <trans-unit id="a46ffb799e9facca7cf6a41e226c75214fbc1de5" translate="yes" xml:space="preserve">
          <source>Various flags whose names begin with &lt;code&gt;ANYOF_&lt;/code&gt; are used for special situations. Above Latin1 matches and things not known until run-time are stored in &lt;a href=&quot;#Perl%27s-pprivate-structure&quot;&gt;&quot;Perl's pprivate structure&quot;&lt;/a&gt;.</source>
          <target state="translated">名前が &lt;code&gt;ANYOF_&lt;/code&gt; で始まるさまざまなフラグは、特別な状況で使用されます。上記のLatin1の一致と、実行時までわからないものは、&lt;a href=&quot;#Perl%27s-pprivate-structure&quot;&gt;「Perlのプライベート構造」に&lt;/a&gt;格納されます。</target>
        </trans-unit>
        <trans-unit id="07521b5f641f36eca327ef3a95aecd1a3cb86300" translate="yes" xml:space="preserve">
          <source>Various flags whose names begin with &lt;code&gt;ANYOF_&lt;/code&gt; are used for special situations. Above Latin1 matches and things not known until run-time are stored in &lt;a href=&quot;#Perl's-pprivate-structure&quot;&gt;Perl's pprivate structure&lt;/a&gt;.</source>
          <target state="translated">名前が &lt;code&gt;ANYOF_&lt;/code&gt; で始まるさまざまなフラグは、特別な状況で使用されます。上記のLatin1の一致および実行時まで不明なものは、&lt;a href=&quot;#Perl's-pprivate-structure&quot;&gt;Perlのpprivate構造に&lt;/a&gt;格納されます。</target>
        </trans-unit>
        <trans-unit id="44c78407657471f7c495761722bd853edd5018b1" translate="yes" xml:space="preserve">
          <source>Various people have made helpful suggestions and contributions, in particular:</source>
          <target state="translated">特に、様々な方から参考になる提案や投稿がありました。</target>
        </trans-unit>
        <trans-unit id="69b7658a42848958a79ee8bd9419cad0dccd5541" translate="yes" xml:space="preserve">
          <source>Various spelling corrections</source>
          <target state="translated">様々なスペルの修正</target>
        </trans-unit>
        <trans-unit id="e18054f599f969e2a7425c026d09df10072d24d7" translate="yes" xml:space="preserve">
          <source>Various tools exist for analysing C source code &lt;b&gt;statically&lt;/b&gt;, as opposed to &lt;b&gt;dynamically&lt;/b&gt;, that is, without executing the code. It is possible to detect resource leaks, undefined behaviour, type mismatches, portability problems, code paths that would cause illegal memory accesses, and other similar problems by just parsing the C code and looking at the resulting graph, what does it tell about the execution and data flows. As a matter of fact, this is exactly how C compilers know to give warnings about dubious code.</source>
          <target state="translated">Cソースコードを&lt;b&gt;動的に&lt;/b&gt;、つまりコードを実行せず&lt;b&gt;に静的に&lt;/b&gt;分析するためのさまざまなツールが存在します。リソースリーク、未定義の動作、タイプの不一致、移植性の問題、不正なメモリアクセスを引き起こすコードパス、およびその他の同様の問題を検出するには、Cコードを解析して結果のグラフを見るだけで、実行について何がわかりますかとデータフロー。実際のところ、これはCコンパイラが疑わしいコードについて警告を出すことを知っている方法です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="73cab00905b3a6637e1ac427d0bd8b9c7ea4bd82" translate="yes" xml:space="preserve">
          <source>Various useful techniques for the redirection of STDOUT and STDERR filehandles are explained in &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; and &lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8&lt;/a&gt;.</source>
          <target state="translated">STDOUTおよびSTDERRファイルハンドルのリダイレクトに役立つさまざまなテクニックは、&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;および&lt;a href=&quot;perlfaq8&quot;&gt;perlfaq8で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="348afb03d84f05d16f7adbc3eb8e693f676f5018" translate="yes" xml:space="preserve">
          <source>Varying slowly compared to something else. (Unfortunately, everything is relatively stable compared to something else, except for certain elementary particles, and we&amp;rsquo;re not so sure about them.) In computers, where things are supposed to vary rapidly, &amp;ldquo;static&amp;rdquo; has a derogatory connotation, indicating a slightly dysfunctional &lt;b&gt;variable&lt;/b&gt;, &lt;b&gt;subroutine&lt;/b&gt;, or &lt;b&gt;method&lt;/b&gt;. In Perl culture, the word is politely avoided.</source>
          <target state="translated">他のものと比較してゆっくり変化します。 （残念ながら、特定の素粒子を除いて、他のものと比べてすべてが比較的安定しています。また、それらについてはよくわかりません）。わずかに機能しない&lt;b&gt;変数&lt;/b&gt;、&lt;b&gt;サブルーチン&lt;/b&gt;、または&lt;b&gt;メソッド&lt;/b&gt;。 Perlの文化では、この単語は丁寧に避けられています。</target>
        </trans-unit>
        <trans-unit id="e79da3e6021f3a596a78ff3c162722022d2bdea5" translate="yes" xml:space="preserve">
          <source>Vendor locales are notoriously buggy, and it is difficult for Perl to test its locale-handling code because this interacts with code that Perl has no control over; therefore the locale-handling code in Perl may be buggy as well. (However, the Unicode-supplied locales should be better, and there is a feed back mechanism to correct any problems. See &lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;&quot;Freely available locale definitions&quot;&lt;/a&gt;.)</source>
          <target state="translated">ベンダーのロケールはバグがあることで有名であり、Perlが制御できないコードと相互作用するため、Perlがロケール処理コードをテストすることは困難です。したがって、Perlのロケール処理コードにもバグがある可能性があります。（ただし、Unicodeが提供するロケールの方が優れているはずであり、問​​題を修正するためのフィードバックメカニズムが&lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;あります&lt;/a&gt;。「無料で利用できるロケール定義」を参照してください。）</target>
        </trans-unit>
        <trans-unit id="85ffef503f476138b4fff0b28711a4307dd0273e" translate="yes" xml:space="preserve">
          <source>Vendor locales are notoriously buggy, and it is difficult for Perl to test its locale-handling code because this interacts with code that Perl has no control over; therefore the locale-handling code in Perl may be buggy as well. (However, the Unicode-supplied locales should be better, and there is a feed back mechanism to correct any problems. See &lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;Freely available locale definitions&lt;/a&gt;.)</source>
          <target state="translated">ベンダーロケールはバグが多いことで有名であり、Perlが制御できないコードと相互作用するため、Perlがロケール処理コードをテストすることは困難です。したがって、Perlのロケール処理コードにもバグがある可能性があります。（ただし、Unicode提供のロケールの方が優れているはずです。問題を修正するためのフィードバックメカニズムが&lt;a href=&quot;#Freely-available-locale-definitions&quot;&gt;あります&lt;/a&gt;。無料で利用できるロケール定義を参照してください。）</target>
        </trans-unit>
        <trans-unit id="ae16e585cede929dd5c0d05f2d8d93b4e3c5e1a2" translate="yes" xml:space="preserve">
          <source>Verb pattern '%s' has a mandatory argument in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">動詞パターン '％s'には、正規表現に必須の引数があります。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="6c870d3cea184fbea0d2392c9e9ff75220ee8535" translate="yes" xml:space="preserve">
          <source>Verb pattern '%s' may not have an argument in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">動詞パターン '％s'は、正規表現に引数がない場合があります。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="6d32a0f82e0ef391607d7fd073f792ba0310faa2" translate="yes" xml:space="preserve">
          <source>Verbatim Paragraph</source>
          <target state="translated">バーベイタムパラグラフ</target>
        </trans-unit>
        <trans-unit id="44cdb59b24111362d70f4a8382e75c47d1cd7dc4" translate="yes" xml:space="preserve">
          <source>Verbatim paragraph in NAME section</source>
          <target state="translated">NAMEセクションのVerbatim段落</target>
        </trans-unit>
        <trans-unit id="3c3c8bdee8d70621828a9acf42235be7b9af6f25" translate="yes" xml:space="preserve">
          <source>Verbatim paragraphs are usually used for presenting a codeblock or other text which does not require any special parsing or formatting, and which shouldn't be wrapped.</source>
          <target state="translated">Verbatim paragraphs は通常、特別な解析や書式設定を必要とせず、また、ラップされるべきではないコードブロックやその他のテキストを提示するために使用されます。</target>
        </trans-unit>
        <trans-unit id="090b72cddab5818af5764dad1f1a558d3f63ccc1" translate="yes" xml:space="preserve">
          <source>Verbose</source>
          <target state="translated">Verbose</target>
        </trans-unit>
        <trans-unit id="d2ed762aa9e6f4a70c69d05cecc69ec96c79f712" translate="yes" xml:space="preserve">
          <source>Verbosity level for PERL5LIB changes (none or v)?</source>
          <target state="translated">PERL5LIBの変更に対する動詞レベル(なしかvか)?</target>
        </trans-unit>
        <trans-unit id="b16f50ef11893ee8a56a924cf21f29d6d3384b2d" translate="yes" xml:space="preserve">
          <source>Verbosity level for loading modules (none or v)?</source>
          <target state="translated">モジュールをロードする際の冗長度のレベル (none or v)?</target>
        </trans-unit>
        <trans-unit id="7802ad32f0ce92df70c7ae50d17c25d1ff11aa8c" translate="yes" xml:space="preserve">
          <source>Verbs</source>
          <target state="translated">Verbs</target>
        </trans-unit>
        <trans-unit id="ebb91b58aca2ebdb100650ca61a4b135081b8fae" translate="yes" xml:space="preserve">
          <source>Verification of server identity</source>
          <target state="translated">サーバーのアイデンティティの検証</target>
        </trans-unit>
        <trans-unit id="5c786adc4be052262918fbf867ae699f3967bdb1" translate="yes" xml:space="preserve">
          <source>Verifies your POD's correctness</source>
          <target state="translated">あなたのPODが正しいかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d4e18ac1b3adf04f8a64f79e732d6cb231328446" translate="yes" xml:space="preserve">
          <source>Verify that</source>
          <target state="translated">以下のことを確認してください。</target>
        </trans-unit>
        <trans-unit id="c6d2ae8d70f95ac35eb4f17f52487e3fbb74bfe8" translate="yes" xml:space="preserve">
          <source>Verify that &lt;code&gt;ADDRESS&lt;/code&gt; is a legitimate mailing address.</source>
          <target state="translated">&lt;code&gt;ADDRESS&lt;/code&gt; が正当なメールアドレスであることを確認します。</target>
        </trans-unit>
        <trans-unit id="cb149dcdc57c60283abbabea9a1ffc5a9199c209" translate="yes" xml:space="preserve">
          <source>Verify that a device's media is accessible. &lt;code&gt;$pInBuf&lt;/code&gt; and &lt;code&gt;$opOutBuf&lt;/code&gt; should both be &lt;code&gt;[]&lt;/code&gt;. If &lt;code&gt;DeviceIoControl&lt;/code&gt; returns a true value, then the media is currently accessible.</source>
          <target state="translated">デバイスのメディアにアクセスできることを確認します。 &lt;code&gt;$pInBuf&lt;/code&gt; と &lt;code&gt;$opOutBuf&lt;/code&gt; は両方とも &lt;code&gt;[]&lt;/code&gt; である必要があります。 &lt;code&gt;DeviceIoControl&lt;/code&gt; がtrue値を返す場合、メディアは現在アクセス可能です。</target>
        </trans-unit>
        <trans-unit id="aa131b92248ccc3e18a5da63bd932dabad63bce2" translate="yes" xml:space="preserve">
          <source>Verify that the element at index</source>
          <target state="translated">インデックスの要素が</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="9ed6f2dc280e11e593f15a2c84216188036d49d7" translate="yes" xml:space="preserve">
          <source>Version 0.14 relied on &lt;code&gt;Test::Builder-&amp;gt;history&lt;/code&gt; which was available in Test::Builder 1.5. Versions 0.12 and 0.13 relied on other Test::Builder internals.</source>
          <target state="translated">バージョン0.14は、 &lt;code&gt;Test::Builder-&amp;gt;history&lt;/code&gt; で使用可能だったTest :: Builder-&amp;gt; historyに依存していました。バージョン0.12および0.13は、他のTest :: Builder内部に依存していました。</target>
        </trans-unit>
        <trans-unit id="994d1b0dafb2a784fe9a62de996298af3c56fa67" translate="yes" xml:space="preserve">
          <source>Version 0.17</source>
          <target state="translated">バージョン0.17</target>
        </trans-unit>
        <trans-unit id="51506756d2eaaaf5ff900dffa8447ff28ca6442b" translate="yes" xml:space="preserve">
          <source>Version 0.30</source>
          <target state="translated">バージョン0.30</target>
        </trans-unit>
        <trans-unit id="084e67410714ed45209c2fc1829d3b5161821488" translate="yes" xml:space="preserve">
          <source>Version 1.0</source>
          <target state="translated">バージョン1.0</target>
        </trans-unit>
        <trans-unit id="cf9296ff9faf64bcbf7077fc94b20c36180a2b81" translate="yes" xml:space="preserve">
          <source>Version 1.0 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.0メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="aebe0ed007174f53947b5cc077294c6b536f56d0" translate="yes" xml:space="preserve">
          <source>Version 1.1</source>
          <target state="translated">バージョン1.1</target>
        </trans-unit>
        <trans-unit id="5f58248b430683f1248cf64cbe1e704fe1b1c2aa" translate="yes" xml:space="preserve">
          <source>Version 1.1 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.1メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="b7238b18233914a27637a58322ad1e229a7760ee" translate="yes" xml:space="preserve">
          <source>Version 1.2</source>
          <target state="translated">バージョン1.2</target>
        </trans-unit>
        <trans-unit id="6b502e3047cfe1751d1d1b7edc28b46bfd3a8d92" translate="yes" xml:space="preserve">
          <source>Version 1.2 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.2メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="f0a22b7c2bfa86efce44888eba679b333a85f9d7" translate="yes" xml:space="preserve">
          <source>Version 1.3</source>
          <target state="translated">バージョン1.3</target>
        </trans-unit>
        <trans-unit id="c0707932557d9b8e2fa8ebb9e9863bf7fee11d96" translate="yes" xml:space="preserve">
          <source>Version 1.3 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.3メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="6bb856fd2cb7a8a4749ea08a96d81eed38d2bee4" translate="yes" xml:space="preserve">
          <source>Version 1.3, 14th Apr 1997</source>
          <target state="translated">バージョン1.3、1997年4月14日</target>
        </trans-unit>
        <trans-unit id="ab7ec275a46fb4c5722bac07a75f0a956f8d05bd" translate="yes" xml:space="preserve">
          <source>Version 1.4</source>
          <target state="translated">バージョン1.4</target>
        </trans-unit>
        <trans-unit id="50cdda2fafe15d6a81c70eb22bbe3a4d4d6f2154" translate="yes" xml:space="preserve">
          <source>Version 1.4 metadata specification for META.yml</source>
          <target state="translated">META.ymlのバージョン1.4メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="e595432938de926793decdb5491565f726cb5632" translate="yes" xml:space="preserve">
          <source>Version 1.x of Devel::PPPort was written by Kenneth Albanowski.</source>
          <target state="translated">Devel::PPPortのバージョン1.xはKenneth Albanowski氏によって書かれました。</target>
        </trans-unit>
        <trans-unit id="a64e96de79863ac878adbe6d99f0ef3004f7ada2" translate="yes" xml:space="preserve">
          <source>Version 1.x, Copyright (C) 1999, Kenneth Albanowski.</source>
          <target state="translated">Version 1.x,Copyright (C)1999,Kenneth Albanowski.</target>
        </trans-unit>
        <trans-unit id="a5a2dcb962ed837bde5bb2d230fbf541ca8dd67b" translate="yes" xml:space="preserve">
          <source>Version 1.x, Copyright (c) 1997, Graham Barr.</source>
          <target state="translated">バージョン 1.x,Copyright (c)1997,Graham Barr.</target>
        </trans-unit>
        <trans-unit id="57ce28f628abe360a4bb4a57891d0472e82ed0fe" translate="yes" xml:space="preserve">
          <source>Version 2</source>
          <target state="translated">バージョン2</target>
        </trans-unit>
        <trans-unit id="45647cd5610f6e1c8ad80ff8302e3680ebe69bd4" translate="yes" xml:space="preserve">
          <source>Version 2.07 included 2 functions for modifying the internal data: rename_country and alias_code. Both of these could be used only to modify the internal data for country codes.</source>
          <target state="translated">バージョン2.07では、内部データを変更するための2つの関数が含まれています:rename_countryとalias_codeです。これらはどちらも国コードの内部データを修正するためにのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="92a1c91419a81cd1268ac19dce637a320313655e" translate="yes" xml:space="preserve">
          <source>Version 2.158 (March 13 2015)</source>
          <target state="translated">バージョン2.158(2015年3月13日</target>
        </trans-unit>
        <trans-unit id="0b55da2137d093534a6831714068f7257347e71c" translate="yes" xml:space="preserve">
          <source>Version 2.174</source>
          <target state="translated">バージョン2.174</target>
        </trans-unit>
        <trans-unit id="2b76e68914b5b481fce750a4808d6a01e4e0d7a5" translate="yes" xml:space="preserve">
          <source>Version 2.x was ported to the Perl core by Paul Marquess.</source>
          <target state="translated">バージョン2.xはPaul MarquessによってPerlコアに移植されました。</target>
        </trans-unit>
        <trans-unit id="b4dfa929b5ee3edcabc4bb1ff1f2299b2ba1ffbf" translate="yes" xml:space="preserve">
          <source>Version 2.x, Copyright (C) 2001, Paul Marquess.</source>
          <target state="translated">Version 2.x,Copyright (C)2001,Paul Marquess.</target>
        </trans-unit>
        <trans-unit id="afb9e5ddc0f066d6e4fe7219b73a7a8e7aeed9fa" translate="yes" xml:space="preserve">
          <source>Version 2.x, Copyright (C) 2007-2013, Marcus Holland-Moritz.</source>
          <target state="translated">Version 2.x,Copyright (C)2007-2013,Marcus Holland-Moritz.</target>
        </trans-unit>
        <trans-unit id="2b92364fcb707c868641f18b85e8bb1624050d73" translate="yes" xml:space="preserve">
          <source>Version 3.35</source>
          <target state="translated">バージョン3.35</target>
        </trans-unit>
        <trans-unit id="3d13369b73c7cc81fbe5ade842653a9ef9b6978a" translate="yes" xml:space="preserve">
          <source>Version 3.42</source>
          <target state="translated">バージョン3.42</target>
        </trans-unit>
        <trans-unit id="4f0303ef100e7bd0b627ac0ed92f17d79836c82a" translate="yes" xml:space="preserve">
          <source>Version 3.x was ported back to CPAN by Marcus Holland-Moritz.</source>
          <target state="translated">バージョン3.xはMarcus Holland-MoritzによってCPANに移植されました。</target>
        </trans-unit>
        <trans-unit id="87ba3aa39294d7bd5f976dfda6425a25c0769a48" translate="yes" xml:space="preserve">
          <source>Version 3.x, Copyright (C) 2004-2013, Marcus Holland-Moritz.</source>
          <target state="translated">バージョン 3.x,Copyright (C)2004-2013,Marcus Holland-Moritz.</target>
        </trans-unit>
        <trans-unit id="70ac02d65beabeafc66ef77aabf5e475e6710dac" translate="yes" xml:space="preserve">
          <source>Version 8 Regular Expressions</source>
          <target state="translated">バージョン 8 正規表現</target>
        </trans-unit>
        <trans-unit id="48cef9bff2f0656a9bc016c70489a7f115e54a95" translate="yes" xml:space="preserve">
          <source>Version Formats</source>
          <target state="translated">バージョンのフォーマット</target>
        </trans-unit>
        <trans-unit id="0d7aa4af9923c4ea2df786e516b1d91ed097781a" translate="yes" xml:space="preserve">
          <source>Version Object Internals</source>
          <target state="translated">バージョンオブジェクト内部</target>
        </trans-unit>
        <trans-unit id="612fee8b1bdb5ec96c3b958d20d963af408a8ba2" translate="yes" xml:space="preserve">
          <source>Version Range</source>
          <target state="translated">バージョン範囲</target>
        </trans-unit>
        <trans-unit id="9e2d06b1e653eddf67a51c5cfa2fa97d0daba218" translate="yes" xml:space="preserve">
          <source>Version Ranges</source>
          <target state="translated">バージョン範囲</target>
        </trans-unit>
        <trans-unit id="5148ac4d9167ac054bd9f1a1a44dfedd508ff1b8" translate="yes" xml:space="preserve">
          <source>Version Strings</source>
          <target state="translated">バージョンの文字列</target>
        </trans-unit>
        <trans-unit id="68c98714c821df335863c348a8dc241ec68a74da" translate="yes" xml:space="preserve">
          <source>Version caveat</source>
          <target state="translated">バージョンの注意事項</target>
        </trans-unit>
        <trans-unit id="434cb8dbdd9890a0a33fe9a437168ab4d0039bc5" translate="yes" xml:space="preserve">
          <source>Version control conflict marker</source>
          <target state="translated">バージョン管理競合マーカー</target>
        </trans-unit>
        <trans-unit id="48de413380b443b457a34140a67e47a478a91517" translate="yes" xml:space="preserve">
          <source>Version number must be a constant number</source>
          <target state="translated">バージョン番号は定数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="01e4cae31c98991a3d53edad9d5a04ca08ed4f3b" translate="yes" xml:space="preserve">
          <source>Version numbering</source>
          <target state="translated">バージョン・ナンバリング</target>
        </trans-unit>
        <trans-unit id="7a4b23d2aee6859898d9d8a68bcc2c3cf6b34466" translate="yes" xml:space="preserve">
          <source>Version numbers can be checked like so:</source>
          <target state="translated">バージョン番号はこんな感じで確認できます。</target>
        </trans-unit>
        <trans-unit id="5696765a5732e40cf7b383ab040149ef89dddcaa" translate="yes" xml:space="preserve">
          <source>Version numbers must be treated as strings, not numbers. For example, &lt;code&gt;1.200&lt;/code&gt;&lt;b&gt;must not&lt;/b&gt; be serialized as &lt;code&gt;1.2&lt;/code&gt;. Version comparison should be delegated to the Perl &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; module, version 0.80 or newer.</source>
          <target state="translated">バージョン番号は、数字ではなく文字列として扱う必要があります。たとえば、 &lt;code&gt;1.200&lt;/code&gt; を &lt;code&gt;1.2&lt;/code&gt; としてシリアル化して&lt;b&gt;は&lt;/b&gt;なり&lt;b&gt;ません&lt;/b&gt;。バージョン比較は、Perl&lt;a href=&quot;version&quot;&gt;バージョン&lt;/a&gt;モジュール、バージョン0.80以降に委任する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ea6fb41a1f5c2adb11175166f62cfde32e3e36d" translate="yes" xml:space="preserve">
          <source>Version numbers should indicate at least major and minor releases, and possibly sub-minor releases. A major release is one in which most of the functionality has changed, or in which major new functionality is added. A minor release is one in which a small amount of functionality has been added or changed. Sub-minor version numbers are usually used for changes which do not affect functionality, such as documentation patches.</source>
          <target state="translated">バージョン番号は、少なくともメジャーリリースとマイナーリリース、そして場合によってはサブマイナーリリースを示すべきです。メジャーリリースとは、ほとんどの機能が変更されたもの、または主要な新機能が追加されたものを指します。マイナーリリースとは、少量の機能が追加または変更されたものを指します。サブマイナーリリースのバージョン番号は、通常、ドキュメントパッチなど、機能に影響を与えない変更に使用されます。</target>
        </trans-unit>
        <trans-unit id="d33038b68a6d275b70080c4ca40f495c404258ac" translate="yes" xml:space="preserve">
          <source>Version object aware cmp. Both operands must already have been converted into version objects.</source>
          <target state="translated">バージョンオブジェクトを認識するcmp。両方のオペランドは、すでにバージョンオブジェクトに変換されている必要があります。</target>
        </trans-unit>
        <trans-unit id="8c1648993be0b2c87b25909c3ffed3198e2670b9" translate="yes" xml:space="preserve">
          <source>Version objects overload the &lt;code&gt;cmp&lt;/code&gt; and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; operators. Perl automatically generates all of the other comparison operators based on those two so all the normal logical comparisons will work.</source>
          <target state="translated">バージョンオブジェクトは、 &lt;code&gt;cmp&lt;/code&gt; および &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 演算子をオーバーロードします。Perlは、これら2つに基づいて他のすべての比較演算子を自動的に生成するため、通常の論理比較はすべて機能します。</target>
        </trans-unit>
        <trans-unit id="393f932dd60dfc189f6aa33e5b9f83c8dab7f2ef" translate="yes" xml:space="preserve">
          <source>Version objects were added to Perl in 5.10. This module implements version objects for older version of Perl and provides the version object API for all versions of Perl. All previous releases before 0.74 are deprecated and should not be used due to incompatible API changes. Version 0.77 introduces the new 'parse' and 'declare' methods to standardize usage. You are strongly urged to set 0.77 as a minimum in your code, e.g.</source>
          <target state="translated">バージョンオブジェクトは5.10でPerlに追加されました。このモジュールは、古いバージョンのPerlのバージョンオブジェクトを実装し、すべてのバージョンのPerlのバージョンオブジェクトAPIを提供します。0.74以前のすべてのリリースは非推奨であり、互換性のないAPIの変更のために使用すべきではありません。バージョン 0.77 では、使用法を標準化するために新しい 'parse' と 'declare' メソッドが導入されています。あなたのコードでは 0.77 を最小値に設定することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="3baa0f9b0929b837aa74bf940a43803481da3864" translate="yes" xml:space="preserve">
          <source>Version string '%s' contains invalid data; ignoring: '%s'</source>
          <target state="translated">バージョン文字列 '%s' には無効なデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="163f83af7c59c73d6987bf0e8d27cefb4ea749cd" translate="yes" xml:space="preserve">
          <source>VersionMessage</source>
          <target state="translated">VersionMessage</target>
        </trans-unit>
        <trans-unit id="2750d3223582565870adf32b96da562927d7229f" translate="yes" xml:space="preserve">
          <source>Versioning</source>
          <target state="translated">Versioning</target>
        </trans-unit>
        <trans-unit id="201083490b52b671353fc4a66b87fa4286ce8a12" translate="yes" xml:space="preserve">
          <source>Versions &amp;gt;= 3.22 are maintained by perl5 porters</source>
          <target state="translated">バージョン&amp;gt; = 3.22は、perl5ポーターによって維持されます</target>
        </trans-unit>
        <trans-unit id="6fe8bcdb81f192c675970c262f42ae11e468a493" translate="yes" xml:space="preserve">
          <source>Versions &amp;gt;= 3.22 are maintained with support from Matthew Horsfall (alh).</source>
          <target state="translated">バージョン3.22以上は、Matthew Horsfall（alh）のサポートにより維持されます。</target>
        </trans-unit>
        <trans-unit id="0a0e4cacd3bf4b53f4105e538a9024d7fb5c49ec" translate="yes" xml:space="preserve">
          <source>Versions of Perl from 5.002 to 5.003 did use the &lt;code&gt;LC_CTYPE&lt;/code&gt; information if available; that is, &lt;code&gt;\w&lt;/code&gt; did understand what were the letters according to the locale environment variables. The problem was that the user had no control over the feature: if the C library supported locales, Perl used them.</source>
          <target state="translated">5.002から5.003までのバージョンのPerlでは、 &lt;code&gt;LC_CTYPE&lt;/code&gt; 情報が使用可能であれば使用されていました。つまり、 &lt;code&gt;\w&lt;/code&gt; は、ロケール環境変数による文字を理解しました。問題は、ユーザーが機能を制御できないことでした。Cライブラリがロケールをサポートしている場合、Perlがロケールを使用していました。</target>
        </trans-unit>
        <trans-unit id="cb93dacee4b958854867faa8071d3b66c095d816" translate="yes" xml:space="preserve">
          <source>Versions of Perl prior to 5.004 &lt;b&gt;mostly&lt;/b&gt; ignored locale information, generally behaving as if something similar to the &lt;code&gt;&quot;C&quot;&lt;/code&gt; locale were always in force, even if the program environment suggested otherwise (see &lt;a href=&quot;#The-setlocale-function&quot;&gt;&quot;The setlocale function&quot;&lt;/a&gt;). By default, Perl still behaves this way for backward compatibility. If you want a Perl application to pay attention to locale information, you &lt;b&gt;must&lt;/b&gt; use the &lt;code&gt;use locale&lt;/code&gt; pragma (see &lt;a href=&quot;#The-%22use-locale%22-pragma&quot;&gt;&quot;The &quot;use locale&quot; pragma&quot;&lt;/a&gt;) or, in the unlikely event that you want to do so for just pattern matching, the &lt;code&gt;/l&lt;/code&gt; regular expression modifier (see &lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;&quot;Character set modifiers&quot; in perlre&lt;/a&gt;) to instruct it to do so.</source>
          <target state="translated">5.004より前のバージョンのPerlは、ロケール情報を&lt;b&gt;ほとんど&lt;/b&gt;無視し、プログラム環境が別の方法を提案した場合でも、 &lt;code&gt;&quot;C&quot;&lt;/code&gt; ロケールに似たものが常に有効であるかのように動作します（&lt;a href=&quot;#The-setlocale-function&quot;&gt;「setlocale関数」を&lt;/a&gt;参照）。デフォルトでは、Perlは下位互換性のためにこのように動作します。 Perlアプリケーションにロケール情報に注意を向けさせたい場合は、 &lt;code&gt;use locale&lt;/code&gt; プラグマ（&lt;a href=&quot;#The-%22use-locale%22-pragma&quot;&gt;「uselocale」プラグマを&lt;/a&gt;参照）を使用する&lt;b&gt;必要&lt;/b&gt;が&lt;b&gt;あり&lt;/b&gt;ます。または、万が一、パターンマッチングのためだけに使用したい場合は、 &lt;code&gt;/l&lt;/code&gt; 正規表現修飾子（&lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;perlreの「文字セット修飾子」を参照&lt;/a&gt;）を使用して、そうするように指示します。</target>
        </trans-unit>
        <trans-unit id="e19f78e14eb21b19646ec53e2aa5cba777aaa99b" translate="yes" xml:space="preserve">
          <source>Versions of Perl prior to 5.004 &lt;b&gt;mostly&lt;/b&gt; ignored locale information, generally behaving as if something similar to the &lt;code&gt;&quot;C&quot;&lt;/code&gt; locale were always in force, even if the program environment suggested otherwise (see &lt;a href=&quot;#The-setlocale-function&quot;&gt;The setlocale function&lt;/a&gt;). By default, Perl still behaves this way for backward compatibility. If you want a Perl application to pay attention to locale information, you &lt;b&gt;must&lt;/b&gt; use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; pragma (see &lt;a href=&quot;#The-%22use-locale%22-pragma&quot;&gt;The use locale pragma&lt;/a&gt;) or, in the unlikely event that you want to do so for just pattern matching, the &lt;code&gt;/l&lt;/code&gt; regular expression modifier (see &lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;Character set modifiers in perlre&lt;/a&gt;) to instruct it to do so.</source>
          <target state="translated">5.004より前のバージョンのPerlは、&lt;b&gt;ほとんどの&lt;/b&gt;場合、ロケール情報を無視しました。プログラム環境が特に示唆している場合でも、 &lt;code&gt;&quot;C&quot;&lt;/code&gt; ロケールに類似したものが常に有効であるかのように振る舞います（&lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale関数を&lt;/a&gt;参照）。デフォルトでは、Perlは下位互換性のためにこのように動作します。あなたはロケール情報への注意を払うへのPerlアプリケーションが必要な場合は、あなたが&lt;b&gt;しなければならない&lt;/b&gt;使用 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; プラグマを（参照&lt;a href=&quot;#The-%22use-locale%22-pragma&quot;&gt;使用ロケールプラグマを&lt;/a&gt;、あなただけのパターンマッチングのためにそうしたいとは考えにくい場合には、）または &lt;code&gt;/l&lt;/code&gt; の正規表現修飾子（&lt;a href=&quot;perlre#Character-set-modifiers&quot;&gt;perlreのCharacter set modifiersを参照&lt;/a&gt;）、そうするように指示します。</target>
        </trans-unit>
        <trans-unit id="cd42417aaf403d8a849b95358e372d8ab627e926" translate="yes" xml:space="preserve">
          <source>Versions of Perl prior to 5.6 would recompile the regular expression for each iteration, even if &lt;code&gt;$pattern&lt;/code&gt; had not changed. The &lt;code&gt;/o&lt;/code&gt; would prevent this by telling Perl to compile the pattern the first time, then reuse that for subsequent iterations:</source>
          <target state="translated">5.6より前のバージョンのPerlは、 &lt;code&gt;$pattern&lt;/code&gt; が変更されていなくても、反復ごとに正規表現を再コンパイルします。 &lt;code&gt;/o&lt;/code&gt; パターンを初めてコンパイルするPerlを伝えることによって、これを防止する、その後の反復のためにそれを再利用します。</target>
        </trans-unit>
        <trans-unit id="f19a403596404a81dbbf33862dbf8eb957047276" translate="yes" xml:space="preserve">
          <source>Versions prior to 2.22 (part of Encode 2.83) have a malfunctioning decoder and encoder. The MIME encoder infamously inserted additional spaces or discarded white spaces between consecutive MIME encoded-words, which led to invalid MIME headers produced by this module. The MIME decoder had a tendency to discard white spaces, incorrectly interpret data or attempt to decode Base64 MIME encoded-words as Quoted-Printable. These problems were fixed in version 2.22. It is highly recommended not to use any version prior 2.22!</source>
          <target state="translated">2.22 より前のバージョン (Encode 2.83 の一部)には、デコーダとエンコーダの誤動作があります。MIME エンコーダーは悪名高く、連続した MIME エンコードされた単語の間に追加のスペースを挿入したり、ホワイトスペースを捨てたりしていましたが、これはこのモジュールによって生成される無効な MIME ヘッダーにつながりました。MIME デコーダはホワイトスペースを捨てたり、データを誤って解釈したり、Base64 MIME エンコードされたワードを Quoted-Printable としてデコードしようとしたりする傾向がありました。これらの問題はバージョン 2.22 で修正されました。2.22 より前のバージョンを使用しないことが強く推奨されます!</target>
        </trans-unit>
        <trans-unit id="ac9f13bce2e40c7034fc84684990b2f382929942" translate="yes" xml:space="preserve">
          <source>Versions prior to 2.24 (part of Encode 2.87) ignored &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;CHECK flags&lt;/a&gt;. The MIME encoder used &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;not strict utf8&lt;/a&gt; encoder for input Unicode strings which could lead to invalid UTF-8 sequences. MIME decoder used also &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;not strict utf8&lt;/a&gt; decoder and additionally called the decode method with a &lt;code&gt;Encode::FB_PERLQQ&lt;/code&gt; flag (thus user-specified &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;CHECK flags&lt;/a&gt; were ignored). Moreover, it automatically croaked when a MIME encoded-word contained unknown encoding. Since version 2.24, this module uses &lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;strict UTF-8&lt;/a&gt; encoder and decoder. And &lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;CHECK flags&lt;/a&gt; are correctly propagated.</source>
          <target state="translated">2.24より前のバージョン（エンコード2.87の一部）は、&lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;CHECKフラグを&lt;/a&gt;無視していました。 MIMEエンコーダーは、無効なUTF-8シーケンスにつながる可能性のある入力Unicode文字列に&lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;厳密ではないutf8&lt;/a&gt;エンコーダーを使用していました。 MIMEデコーダーも&lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;厳密なutf8&lt;/a&gt;デコーダーを使用せず、さらに &lt;code&gt;Encode::FB_PERLQQ&lt;/code&gt; フラグを使用してdecodeメソッドを呼び出しました（したがって、ユーザー指定の&lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;CHECKフラグ&lt;/a&gt;は無視されました）。さらに、MIMEでエンコードされた単語に不明なエンコードが含まれていると、自動的にクロークが発生しました。バージョン2.24以降、このモジュールは&lt;a href=&quot;encode#UTF-8-vs.-utf8-vs.-UTF8&quot;&gt;厳密なUTF-8&lt;/a&gt;エンコーダーとデコーダーを使用します。また、&lt;a href=&quot;encode#Handling-Malformed-Data&quot;&gt;CHECKフラグ&lt;/a&gt;は正しく伝播されます。</target>
        </trans-unit>
        <trans-unit id="3862168f946314ea765703eeec887a87938d1f6e" translate="yes" xml:space="preserve">
          <source>Versions prior to perl5.004 had serious security problems with buffer overflows, and in some cases have CERT advisories (for instance, &lt;a href=&quot;http://www.cert.org/advisories/CA-1997-17.html&quot;&gt;http://www.cert.org/advisories/CA-1997-17.html&lt;/a&gt; ).</source>
          <target state="translated">perl5.004より前のバージョンには、バッファオーバーフローに関する深刻なセキュリティ問題があり、場合によってはCERTアドバイザリ（たとえば、&lt;a href=&quot;http://www.cert.org/advisories/CA-1997-17.html&quot;&gt;http:&lt;/a&gt; //www.cert.org/advisories/CA-1997-17.html ）がありました。</target>
        </trans-unit>
        <trans-unit id="af88a51473f729bd7efb750c66c484d3ad88aa17" translate="yes" xml:space="preserve">
          <source>Versions up to 2.11 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.11 onwards Copyright (C) 2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.11までのバージョン Copyright (c)1995-2004 Graham Barr.無断複写・転載を禁じます。バージョン2.11以降の変更点 Copyright (C)2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="645570264e1c9b5d4c69c1487a566c0753776ad2" translate="yes" xml:space="preserve">
          <source>Versions up to 2.13 Copyright (c) 1995-1998 Graham Barr. All rights reserved. Changes in Version 2.13_01 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.13までのバージョン Copyright (c)1995-1998 Graham Barr.無断複写・転載を禁じます。バージョン2.13_01以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="df128b7f68ed19de182414be1bd4f1f2d9c6a0b4" translate="yes" xml:space="preserve">
          <source>Versions up to 2.21 Copyright (c) 1995-1998 Graham Barr. All rights reserved. Changes in Version 2.22 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.21までのバージョン Copyright (c)1995-1998 Graham Barr.無断複写・転載を禁じます。バージョン2.22以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="230af24ce1338603fae4bdb469b6688c0e4037a9" translate="yes" xml:space="preserve">
          <source>Versions up to 2.24_1 Copyright (c) 1995-1997 Graham Barr. All rights reserved. Changes in Version 2.25 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.24_1 までのバージョン Copyright (c)1995-1997 Graham Barr.すべての著作権は留保されています。バージョン2.25以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="5670a2aa1f7771d1194bac3e8af5f2d1835dd801" translate="yes" xml:space="preserve">
          <source>Versions up to 2.29 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.29_01 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.29までのバージョン Copyright (c)1995-2004 Graham Barr.無断複写・転載を禁じます。バージョン2.29_01以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="f23d5e96a8b776d3b4630eccbbe42aa010b76c05" translate="yes" xml:space="preserve">
          <source>Versions up to 2.29_1 Copyright (c) 1995-2006 Graham Barr. All rights reserved. Changes in Version 2.29_2 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.29_1 までのバージョン Copyright (c)1995-2006 Graham Barr.すべての著作権は留保されています。バージョン2.29_2以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="84d20de3782c28252a3c6f7756f86f07da1b04bb" translate="yes" xml:space="preserve">
          <source>Versions up to 2.31_1 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.31_2 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.31_1 までのバージョン Copyright (c)1995-2004 Graham Barr.すべての著作権は留保されています。バージョン2.31_2以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="e46c1089fa8e642aaf026e639393be6e2f9a3f93" translate="yes" xml:space="preserve">
          <source>Versions up to 2.77_2 Copyright (c) 1995-2004 Graham Barr. All rights reserved. Changes in Version 2.77_3 onwards Copyright (C) 2013-2014 Steve Hay. All rights reserved.</source>
          <target state="translated">2.77_2までのバージョン Copyright (c)1995-2004 Graham Barr.すべての著作権は留保されています。バージョン2.77_3以降の変更点 Copyright (C)2013-2014 Steve Hay.無断複写・転載を禁じます。</target>
        </trans-unit>
        <trans-unit id="3e953c4e403299818cc2d2c327160433abe8b2b9" translate="yes" xml:space="preserve">
          <source>Very large code points (above 0x7FFF_FFFF) are considered more problematic than the others that are above the Unicode legal maximum. There are several reasons: they requre at least 32 bits to represent them on ASCII platforms, are not representable at all on EBCDIC platforms, and the original UTF-8 specification never went above this number (the current 0x10FFFF limit was imposed later). (The smaller ones, those that fit into 32 bits, are representable by a UV on ASCII platforms, but not by an IV, which means that the number of operations that can be performed on them is quite restricted.) The UTF-8 encoding on ASCII platforms for these large code points begins with a byte containing 0xFE or 0xFF. The UTF8_DISALLOW_FE_FF flag will cause them to be treated as malformations, while allowing smaller above-Unicode code points. (Of course UTF8_DISALLOW_SUPER will treat all above-Unicode code points, including these, as malformations.) Similarly, UTF8_WARN_FE_FF acts just like the other WARN flags, but applies just to these code points.</source>
          <target state="translated">非常に大きなコードポイント (0x7FFF_FFFF より上)は、 Unicode の法定最大値を超えている他のコードポイントよりも問題が多いと考えられています。それにはいくつかの理由があります:それらはASCIIプラットフォーム上で表現するために少なくとも32ビットが必要であり、EBCDICプラットフォーム上では全く表現できないこと、そしてオリジナルのUTF-8仕様ではこの数を超えることはありませんでした(現在の0x10FFFFの制限は後に課されました)。(32ビットに収まる小さいものは、ASCIIプラットフォームではUVで表現できますが、IVでは表現できないので、それに対して実行できる操作がかなり制限されています)。こ れ ら の大規模 コ ー ド 点に対す る ASCII プ ラ ッ ト フ ォーム上の UTF-8 エン コ ーデ ィ ン グは、 0xFE か 0xFF を含むバ イ ト で始ま り ます。UTF8_DISALLOW_FE_FF フラグは、それらを不正形 式 と し て扱う一方で、Unicode 以上の小さな コ ー ド 点を許す こ と を可能にします (もちろん UTF8_DISALLOW_FE_FF フラグは、それらを不正形 式 と し て扱います)。(もちろん UTF8_DISALLOW_SUPER は、 こ れ ら を含めてすべての Unicode 以上の コ ー ド 点を不正形 式 と し て扱います。)同様に、UTF8_WARN_FE_FF は他の WARN フラグと同様に動作 し ますが、 こ れ ら の コ ー ド 点にのみ適用 さ れます。</target>
        </trans-unit>
        <trans-unit id="a0d5201ccd05c9ec8ec53b6a69352780556eae41" translate="yes" xml:space="preserve">
          <source>Very little work should be needed since nothing changes until you generate Unicode data. The most important thing is getting input as Unicode; for that, see the earlier I/O discussion. To get full seamless Unicode support, add &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher) to your script.</source>
          <target state="translated">Unicodeデータを生成するまで何も変更されないため、作業はほとんど必要ありません。最も重要なことは、入力をUnicodeとして取得することです。これについては、以前のI / Oの説明を参照してください。完全なシームレスなUnicodeサポートを取得するには、スクリプトに &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 以降を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;）を追加します。</target>
        </trans-unit>
        <trans-unit id="08ea2581324def416cf5169b872c3c2b6741d81c" translate="yes" xml:space="preserve">
          <source>Very little work should be needed since nothing changes until you generate Unicode data. The most important thing is getting input as Unicode; for that, see the earlier I/O discussion. To get full seamless Unicode support, add &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; (or &lt;code&gt;use 5.012&lt;/code&gt; or higher) to your script.</source>
          <target state="translated">Unicodeデータを生成するまで何も変更されないため、作業はほとんど必要ありません。最も重要なことは、Unicodeとして入力を取得することです。そのためには、以前のI / Oの説明を参照してください。完全にシームレスなUnicodeサポートを取得するには、スクリプトに &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; 追加します（または &lt;code&gt;use 5.012&lt;/code&gt; 以降を使用します）。</target>
        </trans-unit>
        <trans-unit id="eb22342c76c7e665931efb33364b8148d2bfea0a" translate="yes" xml:space="preserve">
          <source>Very nearly all Unicode character properties are accessible through regular expressions by using the &lt;code&gt;\p{}&lt;/code&gt; &quot;matches property&quot; construct and the &lt;code&gt;\P{}&lt;/code&gt; &quot;doesn't match property&quot; for its negation.</source>
          <target state="translated">ほぼすべてのUnicode文字プロパティは、正規表現を介して、 &lt;code&gt;\p{}&lt;/code&gt; 「matches property」コンストラクトと &lt;code&gt;\P{}&lt;/code&gt; 「does n't match property」の否定を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="5c9d6c4d037708bb7601d0c4b194d48f70b48661" translate="yes" xml:space="preserve">
          <source>Very probably not. Unless you are generating Unicode characters somehow, old behaviour should be preserved. About the only behaviour that has changed and which could start generating Unicode is the old behaviour of &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; where supplying an argument more than 255 produced a character modulo 255. &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(300)&lt;/a&gt;&lt;/code&gt;, for example, was equal to &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(45)&lt;/a&gt;&lt;/code&gt; or &quot;-&quot; (in ASCII), now it is LATIN CAPITAL LETTER I WITH BREVE.</source>
          <target state="translated">おそらくそうではありません。何らかの方法でUnicode文字を生成しているのでない限り、古い動作を維持する必要があります。変更され、Unicodeの生成を開始できる唯一の動作は、255を超える引数を指定すると255を法とする文字が生成される &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr()&lt;/a&gt;&lt;/code&gt; の古い動作です。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(300)&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(45)&lt;/a&gt;&lt;/code&gt; または「-」（ASCII）、現在はラテン大文字I短音記号です。</target>
        </trans-unit>
        <trans-unit id="ea422331279af5333effb9487f09e40531606795" translate="yes" xml:space="preserve">
          <source>Very probably not. Unless you are generating Unicode characters somehow, old behaviour should be preserved. About the only behaviour that has changed and which could start generating Unicode is the old behaviour of &lt;code&gt;chr()&lt;/code&gt; where supplying an argument more than 255 produced a character modulo 255. &lt;code&gt;chr(300)&lt;/code&gt;, for example, was equal to &lt;code&gt;chr(45)&lt;/code&gt; or &quot;-&quot; (in ASCII), now it is LATIN CAPITAL LETTER I WITH BREVE.</source>
          <target state="translated">おそらくそうではありません。何らかの方法でUnicode文字を生成しない限り、古い動作を保持する必要があります。変更され、Unicodeの生成を開始できる唯一の動作は、255を超える引数を指定すると255を法とする文字が生成される &lt;code&gt;chr()&lt;/code&gt; の古い動作です。たとえば、 &lt;code&gt;chr(300)&lt;/code&gt; は &lt;code&gt;chr(45)&lt;/code&gt; または「-」（ASCII）、現在はLATIN CAPITAL LETTER I WITHBREVEです。</target>
        </trans-unit>
        <trans-unit id="3df57364769892c03471ecd89738053fe81083da" translate="yes" xml:space="preserve">
          <source>Very similar to HTML/XML &lt;code&gt;&amp;amp;&lt;i&gt;foo&lt;/i&gt;;&lt;/code&gt; &quot;entity references&quot;:</source>
          <target state="translated">HTML / XML &lt;code&gt;&amp;amp;&lt;i&gt;foo&lt;/i&gt;;&lt;/code&gt; によく似ています。「エンティティ参照」：</target>
        </trans-unit>
        <trans-unit id="88a7cc964078758d646c21f587f22b62e9a2dd56" translate="yes" xml:space="preserve">
          <source>Very useful online reference material:</source>
          <target state="translated">非常に便利なオンライン参考資料です。</target>
        </trans-unit>
        <trans-unit id="53cd19bd85b05f2ff6addcc980a9f32c53ce3398" translate="yes" xml:space="preserve">
          <source>Viet Nam</source>
          <target state="translated">ベトナム</target>
        </trans-unit>
        <trans-unit id="955578c91c571b85e0395e0299d31bb8777ee3e2" translate="yes" xml:space="preserve">
          <source>Vietnamese encodings VPS</source>
          <target state="translated">ベトナム語エンコーディング VPS</target>
        </trans-unit>
        <trans-unit id="81b34b94e5e74c2375523a735ce4a25a6536b5a0" translate="yes" xml:space="preserve">
          <source>View a few lines of code around the current line.</source>
          <target state="translated">現在の行を中心に数行のコードを表示します。</target>
        </trans-unit>
        <trans-unit id="ee53ceb3384ce0d69b124dce7f13e6c99981e32e" translate="yes" xml:space="preserve">
          <source>View existing bug reports at, and submit any new bugs, problems, patches, etc. to: &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared&lt;/a&gt;</source>
          <target state="translated">既存のバグレポートを表示し、新しいバグ、問題、パッチなどを&lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-shared&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threads-sharedに&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="8d75c4c4e8ba2437b93176cc4dca513c1b1a52a8" translate="yes" xml:space="preserve">
          <source>View mailing list</source>
          <target state="translated">メーリングリストを見る</target>
        </trans-unit>
        <trans-unit id="cedb02ffcfe21f8ad14403434b6387c1a2701d09" translate="yes" xml:space="preserve">
          <source>Vile</source>
          <target state="translated">Vile</target>
        </trans-unit>
        <trans-unit id="daa603bc60750ae7f5cf9defaca0f136f2e1197a" translate="yes" xml:space="preserve">
          <source>Ville Skytt&amp;auml;</source>
          <target state="translated">Ville Skytt&amp;auml;</target>
        </trans-unit>
        <trans-unit id="a78ad277616170813560c5fab7aabae8ac9cfb23" translate="yes" xml:space="preserve">
          <source>Vim</source>
          <target state="translated">Vim</target>
        </trans-unit>
        <trans-unit id="b6c758d8b473540f59e349acc9e443ca1e9333bd" translate="yes" xml:space="preserve">
          <source>Vincent Pit &amp;lt;perl@profvince.com&amp;gt;</source>
          <target state="translated">ヴィンセントピット&amp;lt;perl@profvince.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3ee82a6b555759727c4e5933e475a065e10be5a6" translate="yes" xml:space="preserve">
          <source>Vipul Ved Prakash &amp;lt;mail AT vipul DOT net&amp;gt; - Helping with debugging</source>
          <target state="translated">Vipul Ved Prakash &amp;lt;mail at vipul DOT net&amp;gt;-デバッグの支援</target>
        </trans-unit>
        <trans-unit id="027fb4bdb28984d493fe1f36eee6d83fe2cd8afe" translate="yes" xml:space="preserve">
          <source>Virginia</source>
          <target state="translated">Virginia</target>
        </trans-unit>
        <trans-unit id="36318ca45973e47d767fba0f44ca703effba7017" translate="yes" xml:space="preserve">
          <source>Virtual parent class for Math::BigInt libraries</source>
          <target state="translated">Math::BigInt ライブラリの仮想親クラス</target>
        </trans-unit>
        <trans-unit id="f1807aa2e2ce520d4cd7270ad67acbbd88fb6197" translate="yes" xml:space="preserve">
          <source>Visual Perl</source>
          <target state="translated">ビジュアルパール</target>
        </trans-unit>
        <trans-unit id="028988d7a45fe46ec8fd41d271d201dc35932db0" translate="yes" xml:space="preserve">
          <source>Visual Perl is a Visual Studio.NET plug-in from ActiveState.</source>
          <target state="translated">Visual PerlはActiveStateのVisual Studio.NETプラグインです。</target>
        </trans-unit>
        <trans-unit id="386d827cc4ba6b5f42c38cef2abc770e9c36de72" translate="yes" xml:space="preserve">
          <source>Volumes can be drive letters or UNC sharenames (\\server\share).</source>
          <target state="translated">ボリュームは、ドライブレターかUNC sharenames (\servershare)にすることができます。</target>
        </trans-unit>
        <trans-unit id="cbd2e41fa14b367f9d76d5ff80e04135e1e22ee4" translate="yes" xml:space="preserve">
          <source>Vstrings are not implemented in the version of perl</source>
          <target state="translated">Perl のバージョンでは Vstring は実装されていません。</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="fedc3a89289968e45dac8fb3352091ab861bbbec" translate="yes" xml:space="preserve">
          <source>W *</source>
          <target state="translated">W *</target>
        </trans-unit>
        <trans-unit id="9bb850012f486d3a4b2c62a2ac8a7530c9d93702" translate="yes" xml:space="preserve">
          <source>W expr</source>
          <target state="translated">Wエクスプリ</target>
        </trans-unit>
        <trans-unit id="c26d74df8890b7f659e90425275e4ff437fc0eeb" translate="yes" xml:space="preserve">
          <source>WAIT</source>
          <target state="translated">WAIT</target>
        </trans-unit>
        <trans-unit id="fd3edc641024a335a508fdacefb5f51ded5905cc" translate="yes" xml:space="preserve">
          <source>WARNING</source>
          <target state="translated">WARNING</target>
        </trans-unit>
        <trans-unit id="97689d5d0ad473b9dbadc8ef4f3007ef3d307a97" translate="yes" xml:space="preserve">
          <source>WARNING! Prior to Perl 5.28 or on a system that does not support thread-safe locale operations, do NOT use this function in a &lt;a href=&quot;threads&quot;&gt;thread&lt;/a&gt;. The locale will change in all other threads at the same time, and should your thread get paused by the operating system, and another started, that thread will not have the locale it is expecting. On some platforms, there can be a race leading to segfaults if two threads call this function nearly simultaneously. This warning does not apply on unthreaded builds, or on perls where &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; exists and is non-zero; namely Perl 5.28 and later compiled to be locale-thread-safe.</source>
          <target state="translated">警告！Perl 5.28より前、またはスレッドセーフなロケール操作をサポートしていないシステムでは、この関数を&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;で使用しないでください。ロケールは他のすべてのスレッドで同時に変更されます。スレッドがオペレーティングシステムによって一時停止され、別のスレッドが開始された場合、そのスレッドには期待するロケールがありません。一部のプラットフォームでは、2つのスレッドがこの関数をほぼ同時に呼び出すと、セグメンテーション違反につながる競合が発生する可能性があります。この警告は、スレッド化されていないビルド、または &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; が存在してゼロ以外のperlには適用されません。つまり、Perl 5.28以降は、ロケールスレッドセーフになるようにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="69e1ca04b7c3f5c99c009d6c09f17b1dc3b90bfb" translate="yes" xml:space="preserve">
          <source>WARNING! Prior to Perl 5.28 or on a system that does not support thread-safe locale operations, do NOT use this function in a &lt;a href=&quot;threads&quot;&gt;thread&lt;/a&gt;. The locale will change in all other threads at the same time, and should your thread get paused by the operating system, and another started, that thread will not have the locale it is expecting. On some platforms, there can be a race leading to segfaults if two threads call this function nearly simultaneously. This warning does not apply on unthreaded builds, or on perls where &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; exists and is non-zero; namely Perl 5.28 and later unthreaded or compiled to be locale-thread-safe.</source>
          <target state="translated">警告！ Perl 5.28より前、またはスレッドセーフなロケール操作をサポートしていないシステムでは、この関数を&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;で使用しないでください。ロケールは他のすべてのスレッドで同時に変更されます。スレッドがオペレーティングシステムによって一時停止され、別のスレッドが開始された場合、そのスレッドには期待するロケールがありません。一部のプラットフォームでは、2つのスレッドがこの関数をほぼ同時に呼び出すと、セグメンテーション違反につながる競合が発生する可能性があります。この警告は、スレッド化されていないビルド、または &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; が存在してゼロ以外のperlには適用されません。つまり、Perl 5.28以降は、スレッド化されていないか、ロケールスレッドセーフになるようにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="3c94abff24468ec74283806394c7e1079287562a" translate="yes" xml:space="preserve">
          <source>WARNING: A variable used as a buffer by &lt;code&gt;setbuf&lt;/code&gt; or &lt;code&gt;setvbuf&lt;/code&gt;&lt;b&gt;must not be modified&lt;/b&gt; in any way until the IO::Handle is closed or &lt;code&gt;setbuf&lt;/code&gt; or &lt;code&gt;setvbuf&lt;/code&gt; is called again, or memory corruption may result! Remember that the order of global destruction is undefined, so even if your buffer variable remains in scope until program termination, it may be undefined before the file IO::Handle is closed. Note that you need to import the constants &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; explicitly. Like C, setbuf returns nothing. setvbuf returns &quot;0 but true&quot;, on success, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="translated">警告： &lt;code&gt;setbuf&lt;/code&gt; または &lt;code&gt;setvbuf&lt;/code&gt; によってバッファとして使用される変数は、IO :: Handleが閉じられるか、 &lt;code&gt;setbuf&lt;/code&gt; または &lt;code&gt;setvbuf&lt;/code&gt; が再度呼び出されるまで&lt;b&gt;変更&lt;/b&gt;し&lt;b&gt;ないでください。変更&lt;/b&gt;すると、メモリが破損する可能性があります。グローバル破棄の順序は未定義であるため、プログラムが終了するまでバッファー変数がスコープ内に残っている場合でも、ファイルIO :: Handleを閉じる前に未定義になる可能性があることに注意してください。定数 &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および &lt;code&gt;_IONBF&lt;/code&gt; を明示的にインポートする必要があることに注意してください。 Cと同様に、setbufは何も返しません。 setvbufは、成功すると「0 but true」を返し、失敗すると &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fd94aaa9ebb92abff359a6bbe25198f13a80d2a2" translate="yes" xml:space="preserve">
          <source>WARNING: A variable used as a buffer by &lt;code&gt;setbuf&lt;/code&gt; or &lt;code&gt;setvbuf&lt;/code&gt;&lt;b&gt;must not be modified&lt;/b&gt; in any way until the IO::Handle is closed or &lt;code&gt;setbuf&lt;/code&gt; or &lt;code&gt;setvbuf&lt;/code&gt; is called again, or memory corruption may result! Remember that the order of global destruction is undefined, so even if your buffer variable remains in scope until program termination, it may be undefined before the file IO::Handle is closed. Note that you need to import the constants &lt;code&gt;_IOFBF&lt;/code&gt;, &lt;code&gt;_IOLBF&lt;/code&gt;, and &lt;code&gt;_IONBF&lt;/code&gt; explicitly. Like C, setbuf returns nothing. setvbuf returns &quot;0 but true&quot;, on success, &lt;code&gt;undef&lt;/code&gt; on failure.</source>
          <target state="translated">警告： &lt;code&gt;setbuf&lt;/code&gt; または &lt;code&gt;setvbuf&lt;/code&gt; によってバッファーとして使用される変数は、IO :: Handleが閉じられるか、 &lt;code&gt;setbuf&lt;/code&gt; または &lt;code&gt;setvbuf&lt;/code&gt; が再度呼び出されるまで、いかなる方法でも&lt;b&gt;変更&lt;/b&gt;し&lt;b&gt;ないでください。変更&lt;/b&gt;すると、メモリが破損する可能性があります。グローバル破棄の順序は未定義であるため、プログラムが終了するまでバッファ変数がスコープ内にある場合でも、ファイルIO :: Handleが閉じられる前に未定義になる可能性があることに注意してください。定数 &lt;code&gt;_IOFBF&lt;/code&gt; 、 &lt;code&gt;_IOLBF&lt;/code&gt; 、および &lt;code&gt;_IONBF&lt;/code&gt; を明示的にインポートする必要があることに注意してください。 Cと同様に、setbufは何も返しません。 setvbufは、成功すると「0 but true」を返し、失敗すると &lt;code&gt;undef&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="84c2915b48a50feabe204322fda8dc2bbdf52e7d" translate="yes" xml:space="preserve">
          <source>WARNING: As of the 5.004 release, proper usage of the array and hash access functions requires understanding a few caveats. Some of these caveats are actually considered bugs in the API, to be fixed in later releases, and are bracketed with [MAYCHANGE] below. If you find yourself actually applying such information in this section, be aware that the behavior may change in the future, umm, without warning.</source>
          <target state="translated">警告:5.004 リリースでは、配列やハッシュアクセス関数を適切に使用するためには、いくつかの注意点を理解する必要があります。これらの注意事項のいくつかは、実際にはAPIのバグと考えられており、後のリリースで修正されることになっています。このセクションの情報を実際に適用する場合は、将来、警告なしに動作が変更される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="209683d518f52549e286671c6de56b159d3f5040" translate="yes" xml:space="preserve">
          <source>WARNING: Comparing version with unequal numbers of decimal points (whether explicitly or implicitly initialized), may yield unexpected results at first glance. For example, the following inequalities hold:</source>
          <target state="translated">警告:小数点の不等号(明示的に初期化されているか暗黙的に初期化されているかに関わらず)でバージョンを比較すると、一見すると予期しない結果が得られることがあります。例えば、以下の不等式が成り立ちます。</target>
        </trans-unit>
        <trans-unit id="78cb5952c2334da8ce71a5e3b08759b3487fe96b" translate="yes" xml:space="preserve">
          <source>WARNING: Don't use references as hash keys</source>
          <target state="translated">警告:参照をハッシュキーとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="05aab9ee07d74b03226bac90b4501275a8030a8f" translate="yes" xml:space="preserve">
          <source>WARNING: The IO::Handle::setvbuf() is not available by default on Perls 5.8.0 and later because setvbuf() is rather specific to using the stdio library, while Perl prefers the new perlio subsystem instead.</source>
          <target state="translated">警告:IO::Handle::setvbuf()はPerl 5.8.0以降ではデフォルトでは利用できません。</target>
        </trans-unit>
        <trans-unit id="19985e22537400319dbf86c71031d6722bd3ab22" translate="yes" xml:space="preserve">
          <source>WARNING: This variable is strictly for internal use only. Its availability, behavior, and contents are subject to change without notice.</source>
          <target state="translated">警告:この変数は厳密には内部使用のみを目的としています。その可用性、動作、および内容は予告なく変更されることがあります。</target>
        </trans-unit>
        <trans-unit id="0d49d38da52bda88d24ca74222cd75784e961a51" translate="yes" xml:space="preserve">
          <source>WARNING: Unicode discourages the use of this function or any of the alternative mechanisms listed in this section (the documentation of &lt;code&gt;compexcl()&lt;/code&gt;), except internally in implementations of the Unicode Normalization Algorithm. You should be using &lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode::Normalize&lt;/a&gt; directly instead of these. Using these will likely lead to half-baked results.</source>
          <target state="translated">警告：Unicodeは、Unicode正規化アルゴリズムの実装の内部を除いて、この関数またはこのセクションにリストされている代替メカニズム（ &lt;code&gt;compexcl()&lt;/code&gt; のドキュメント）の使用を推奨していません。これらの代わりに、&lt;a href=&quot;Unicode::Normalize&quot;&gt;Unicode :: Normalizeを&lt;/a&gt;直接使用する必要があります。これらを使用すると、結果が中途半端になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5fbfa986b2fb43598295e70fb2ca9f7ae7e83632" translate="yes" xml:space="preserve">
          <source>WARNING: do not use the following unless you *know* &lt;code&gt;off&lt;/code&gt; is within the UTF-8 data pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; *and* that on entry &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; is aligned on the first byte of character or just after the last byte of a character.</source>
          <target state="translated">警告： &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が指すUTF-8データ内に* &lt;code&gt;off&lt;/code&gt; *があり*かつ*エントリ &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt; が文字の最初のバイトまたは文字の最後のバイトの直後に配置されることを除いて、以下を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="0d8f3ae0bd39963e80fa9556609a8341dd002dea" translate="yes" xml:space="preserve">
          <source>WARNING: do not use the following unless you *know* &lt;code&gt;off&lt;/code&gt; is within the UTF-8 data pointed to by &lt;code&gt;s&lt;/code&gt; *and* that on entry &lt;code&gt;s&lt;/code&gt; is aligned on the first byte of character or just after the last byte of a character.</source>
          <target state="translated">警告： &lt;code&gt;off&lt;/code&gt; が &lt;code&gt;s&lt;/code&gt; が指すUTF-8データ内にあり、エントリ &lt;code&gt;s&lt;/code&gt; が文字の最初のバイトまたは文字の最後のバイトの直後に配置されていることを*知っている*場合を除いて、以下を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="aabc0c60a46a204266038744d94511089efbda7b" translate="yes" xml:space="preserve">
          <source>WARNING: this is new code, use at your own risk.</source>
          <target state="translated">警告:これは新しいコードです。</target>
        </trans-unit>
        <trans-unit id="678aa148e87e729dd3e10fce0605ee0538d043a2" translate="yes" xml:space="preserve">
          <source>WARNING: use only if you *know* that the pointers point inside the same UTF-8 buffer.</source>
          <target state="translated">警告:ポインタが同じUTF-8バッファ内を指すことが*わかっている場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="163b0dd1ef8e487db793ddc755bf68fdfda1ccf3" translate="yes" xml:space="preserve">
          <source>WARNINGS</source>
          <target state="translated">WARNINGS</target>
        </trans-unit>
        <trans-unit id="991fe4b3587f5bc3956dbdf64cab7946d865d2e1" translate="yes" xml:space="preserve">
          <source>WARRANTY</source>
          <target state="translated">WARRANTY</target>
        </trans-unit>
        <trans-unit id="899abc782023a16c90d026f7662b081d0e5603bf" translate="yes" xml:space="preserve">
          <source>WELCOME to Plan 9 Perl, brave soul!</source>
          <target state="translated">Plan 9 Perlへようこそ、勇者の魂よ!</target>
        </trans-unit>
        <trans-unit id="943f25cc8d7abfb9400129c428f47471a4e77ccc" translate="yes" xml:space="preserve">
          <source>WHAT</source>
          <target state="translated">WHAT</target>
        </trans-unit>
        <trans-unit id="d8c634435f258992c7dbf89bc42a5c10afe89f43" translate="yes" xml:space="preserve">
          <source>WHAT ABOUT &lt;code&gt;DB_File&lt;/code&gt; ?</source>
          <target state="translated">WHAT ABOUT &lt;code&gt;DB_File&lt;/code&gt; は？</target>
        </trans-unit>
        <trans-unit id="12d31ef8ed1e17871bcd8516b33cf37c388df2a0" translate="yes" xml:space="preserve">
          <source>WHAT ABOUT &lt;code&gt;DB_File&lt;/code&gt;?</source>
          <target state="translated">WHAT ABOUT &lt;code&gt;DB_File&lt;/code&gt;?</target>
        </trans-unit>
        <trans-unit id="a3e4fe4880a26ca7ed67d03d21e6c8855e324c1e" translate="yes" xml:space="preserve">
          <source>WHAT ABOUT DB_File?</source>
          <target state="translated">DB_Fileについて教えてください。</target>
        </trans-unit>
        <trans-unit id="bb2cbc236529ba6c03e19171332631741f3a45b7" translate="yes" xml:space="preserve">
          <source>WHAT ARE FACETS?</source>
          <target state="translated">ファセットとは何ですか?</target>
        </trans-unit>
        <trans-unit id="69dc14e97abf1c2f032d0ecddf4083e210815600" translate="yes" xml:space="preserve">
          <source>WHAT IS A LOCALE</source>
          <target state="translated">ロケールとは</target>
        </trans-unit>
        <trans-unit id="eb5802049a17176195e43722e4ced1b8fb09cdaf" translate="yes" xml:space="preserve">
          <source>WHAT IS A VERSION?</source>
          <target state="translated">バージョンとは何ですか?</target>
        </trans-unit>
        <trans-unit id="ee62ea74b2ed280ab8d8c51fcc0626b34eaaa438" translate="yes" xml:space="preserve">
          <source>WHAT IS NEW?</source>
          <target state="translated">WHAT IS NEW?</target>
        </trans-unit>
        <trans-unit id="8df7eec36d2c3cf583d0c776054ef24d9f2ed0ea" translate="yes" xml:space="preserve">
          <source>WHAT NEXT?</source>
          <target state="translated">次は?</target>
        </trans-unit>
        <trans-unit id="f60e480d83f28578fb3dbf8c978d35dfcb42e486" translate="yes" xml:space="preserve">
          <source>WHENCE=0 (SEEK_SET)</source>
          <target state="translated">WHENCE=0 (SEEK_SET)</target>
        </trans-unit>
        <trans-unit id="cc0fe6299ae8442d783daf2df69a8280af3c212a" translate="yes" xml:space="preserve">
          <source>WHENCE=1 (SEEK_CUR)</source>
          <target state="translated">WHENCE=1 (SEEK_CUR)</target>
        </trans-unit>
        <trans-unit id="8f29ab5ac9903a080d3f378d4a8806da7247a04b" translate="yes" xml:space="preserve">
          <source>WHENCE=2 (SEEK_END)</source>
          <target state="translated">WHENCE=2 (SEEK_END)</target>
        </trans-unit>
        <trans-unit id="7f400a201f25780fb9e0a0caa8053f3dac800fbe" translate="yes" xml:space="preserve">
          <source>WHERE IS THE DATA STORED?</source>
          <target state="translated">データはどこに保存されていますか?</target>
        </trans-unit>
        <trans-unit id="a31a09e4a44017984cab9426a275543f91816385" translate="yes" xml:space="preserve">
          <source>WHY YOU SHOULD ALWAYS &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt;</source>
          <target state="translated">なぜ &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使う&lt;/a&gt;べきなのか</target>
        </trans-unit>
        <trans-unit id="761a1531e62fa364bf292e45dfe0cf1d0ec041d6" translate="yes" xml:space="preserve">
          <source>WHY YOU SHOULD ALWAYS &lt;code&gt;use strict&lt;/code&gt;</source>
          <target state="translated">常に &lt;code&gt;use strict&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dcf4ad6d76037668ee7377a5088288d629d80a03" translate="yes" xml:space="preserve">
          <source>WHY YOU SHOULD ALWAYS use strict</source>
          <target state="translated">厳格な使用が推奨される理由</target>
        </trans-unit>
        <trans-unit id="7836d14ed49f7f915caabfbf55f88d40c3534ae0" translate="yes" xml:space="preserve">
          <source>WIDEST_UTYPE</source>
          <target state="translated">WIDEST_UTYPE</target>
        </trans-unit>
        <trans-unit id="dea5d6976f7c54b48ff5d6c539121232f52092ef" translate="yes" xml:space="preserve">
          <source>WILDCARD</source>
          <target state="translated">WILDCARD</target>
        </trans-unit>
        <trans-unit id="0c43129d9d0d186b4b0f362b87e153eb3ddb2224" translate="yes" xml:space="preserve">
          <source>WINSOCK</source>
          <target state="translated">WINSOCK</target>
        </trans-unit>
        <trans-unit id="f522c7304362d47837e7d7d72df20f33bb5c3578" translate="yes" xml:space="preserve">
          <source>WITH_LC_NUMERIC_SET_TO_NEEDED</source>
          <target state="translated">WITH_LC_NUMERIC_SET_TO_NEEDED</target>
        </trans-unit>
        <trans-unit id="2e8799ba5f44ad5295f36b8a4e9fd2c7bd21d464" translate="yes" xml:space="preserve">
          <source>WITH_LC_NUMERIC_SET_TO_NEEDED_IN</source>
          <target state="translated">WITH_LC_NUMERIC_SET_TO_NEEDED_IN</target>
        </trans-unit>
        <trans-unit id="89237cfda70e873f323e7dd25612ea5b444530a5" translate="yes" xml:space="preserve">
          <source>WIZARDS ONLY</source>
          <target state="translated">ウィザード専用</target>
        </trans-unit>
        <trans-unit id="612951b55eb7373e18b643aac58cf8c1af06a81c" translate="yes" xml:space="preserve">
          <source>WORKING WITH CPAN.pm BEHIND FIREWALLS</source>
          <target state="translated">CPAN.pm 火の壁に囲まれての作業</target>
        </trans-unit>
        <trans-unit id="c44674d622af74bf01f71c0df330675b8fc538a5" translate="yes" xml:space="preserve">
          <source>WORKING WITH THE REPOSITORY</source>
          <target state="translated">リポジトリーとの連携</target>
        </trans-unit>
        <trans-unit id="9d256f0190bf5f3f616a8b6b96bb25f26aee3704" translate="yes" xml:space="preserve">
          <source>WORKS BUT TESTS WILL FAIL</source>
          <target state="translated">動作しますが、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="aa72ff97b7ec5cf699db7cbbd19331d50b9d05b4" translate="yes" xml:space="preserve">
          <source>WRAP EXISTING TOOLS</source>
          <target state="translated">既存のツールをラップする</target>
        </trans-unit>
        <trans-unit id="999a14026114357b2720836f701f7f83d4e769ea" translate="yes" xml:space="preserve">
          <source>WRAP YOUR OWN</source>
          <target state="translated">自分で書く</target>
        </trans-unit>
        <trans-unit id="0e5f01bd0e09cde662071352f1c22bdfa112d527" translate="yes" xml:space="preserve">
          <source>WRITE ACCESS TO THE GIT REPOSITORY</source>
          <target state="translated">GITリポジトリへの書き込みアクセス</target>
        </trans-unit>
        <trans-unit id="bbb69a08877950ac2cabf9586223967dbe69ff05" translate="yes" xml:space="preserve">
          <source>WRITE this, LIST</source>
          <target state="translated">WRITE this,LIST</target>
        </trans-unit>
        <trans-unit id="823cf783387b0921711ea7224e7f8f9852646895" translate="yes" xml:space="preserve">
          <source>WRITE this, scalar, length, offset</source>
          <target state="translated">WRITE this,スカラー,長さ,オフセット</target>
        </trans-unit>
        <trans-unit id="66af5a28971a4c6868ba337400ea0c92dd22295d" translate="yes" xml:space="preserve">
          <source>WRITING A SOURCE FILTER</source>
          <target state="translated">ソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="0d91186f3fc1a27893403674a7abb0832febe2cf" translate="yes" xml:space="preserve">
          <source>WRITING A SOURCE FILTER IN C</source>
          <target state="translated">C言語でのソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="1cd7808a59ef1fb929041296bd5ead5a0b08527e" translate="yes" xml:space="preserve">
          <source>WRITING A SOURCE FILTER IN PERL</source>
          <target state="translated">PERLでのソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="7cf837e27caaabc83bda33a0709b22a63a97d222" translate="yes" xml:space="preserve">
          <source>WRITING A TOOL</source>
          <target state="translated">ツールを書く</target>
        </trans-unit>
        <trans-unit id="43ed72ea4948106f20d22be7d4795a45bc81908a" translate="yes" xml:space="preserve">
          <source>WRITING DRIVERS</source>
          <target state="translated">ライティングドライバー</target>
        </trans-unit>
        <trans-unit id="6f33f4557886e9a55139159f018449074d30de1b" translate="yes" xml:space="preserve">
          <source>WRITING PLUGINS</source>
          <target state="translated">ライティングプラグイン</target>
        </trans-unit>
        <trans-unit id="f05feec7da7a332163ae2b9ada28efac30939640" translate="yes" xml:space="preserve">
          <source>WTF is going on here?</source>
          <target state="translated">どうなってるんだ?</target>
        </trans-unit>
        <trans-unit id="84a3f436dd9eb993df939861bd779d6edde94632" translate="yes" xml:space="preserve">
          <source>WYSIWYG</source>
          <target state="translated">WYSIWYG</target>
        </trans-unit>
        <trans-unit id="34dbd5c4c8a64801891d960b57133767c3104fe7" translate="yes" xml:space="preserve">
          <source>Wait</source>
          <target state="translated">Wait</target>
        </trans-unit>
        <trans-unit id="975f1891ff79af7de3d437f83af46051523ae8be" translate="yes" xml:space="preserve">
          <source>Wait a bit. The PAUSE admins don't want to act too quickly in case the current maintainer is on holiday. If there's no response to private communication or the public post, a PAUSE admin can transfer it to you.</source>
          <target state="translated">ちょっと待ってください。PAUSEの管理者は、現在のメンテナが休暇中の場合に備えて、あまり早く行動したくありません。非公開の通信や公開ポストに反応がない場合は、PAUSE管理者が転送してくれます。</target>
        </trans-unit>
        <trans-unit id="15314082ca8a524c0f28646da09da9a7b2b19503" translate="yes" xml:space="preserve">
          <source>Wait for a child process to change state. This is identical to Perl's builtin &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt; function, see &lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;.</source>
          <target state="translated">子プロセスの状態が変化するのを待ちます。これはPerlの組み込みのと同じである &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid()&lt;/a&gt;&lt;/code&gt; 関数で、参照&lt;a href=&quot;functions/waitpid&quot;&gt;のwaitpid&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9cdfff8c0c2da9db775855d389b5ae3a04a93b78" translate="yes" xml:space="preserve">
          <source>Wait for a child process to change state. This is identical to Perl's builtin &lt;code&gt;waitpid()&lt;/code&gt; function, see &lt;a href=&quot;perlfunc#waitpid&quot;&gt;&quot;waitpid&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">子プロセスが状態を変更するのを待ちます。これは、Perlの組み込み &lt;code&gt;waitpid()&lt;/code&gt; 関数と同じです。perlfuncの&lt;a href=&quot;perlfunc#waitpid&quot;&gt;「waitpid」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="98f8c391ec2d3f6164371190f831fbafeb81843a" translate="yes" xml:space="preserve">
          <source>Wait for a message to arive at the port.</source>
          <target state="translated">メッセージが港に到着するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="a35026d04db5ceaa6a2182c2ffc6eee263aafcff" translate="yes" xml:space="preserve">
          <source>Wait on a signal set with optional timeout. The result ($signals) should be checked to determine which signal was raised. It will be 0 for timeout.</source>
          <target state="translated">オプションのタイムアウトで設定されたシグナルを待ちます。結果 ($signals)をチェックして、どのシグナルが上がったかを判断しなければなりません。タイムアウトの場合は0になります。</target>
        </trans-unit>
        <trans-unit id="0efc282e6beae9c158a75481f83c57c80668be2a" translate="yes" xml:space="preserve">
          <source>Wait until record is available, if currently locked by another stream.</source>
          <target state="translated">他のストリームでロックされている場合は、レコードが利用可能になるまで待ちます。</target>
        </trans-unit>
        <trans-unit id="f6cf131695c42ff802839eee6d284c2ac7d67182" translate="yes" xml:space="preserve">
          <source>Waiting For A Thread To Exit</source>
          <target state="translated">スレッドが抜けるのを待つ</target>
        </trans-unit>
        <trans-unit id="e3ebec26983a17c27a53a6ef7e86c4cba507cfab" translate="yes" xml:space="preserve">
          <source>Waiting for a Condition</source>
          <target state="translated">条件待ち</target>
        </trans-unit>
        <trans-unit id="4fad8a3271d8da06df3b86b2c5fe59d52ab9c3c9" translate="yes" xml:space="preserve">
          <source>Waiting is turned on by default. Waiting will cause the parent process/thread to wait until all child processes and threads are finished before exiting. You will almost never want to turn this off.</source>
          <target state="translated">Waiting はデフォルトでオンになっています。待機中の場合、親プロセス/スレッドは、すべての子プロセスとスレッドが終了するまで待機してから終了します。これをオフにすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="dbebb4e5fbea810a41b79edfc44a1469a56aab0e" translate="yes" xml:space="preserve">
          <source>Waits for a particular child process to terminate and returns the pid of the deceased process, or &lt;code&gt;-1&lt;/code&gt; if there is no such child process. A non-blocking wait (with &lt;a href=&quot;posix#WNOHANG&quot;&gt;WNOHANG&lt;/a&gt; in FLAGS) can return 0 if there are child processes matching PID but none have terminated yet. The status is returned in &lt;a href=&quot;perlvar#%24%3F&quot;&gt;&lt;code&gt;$?&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;perlvar#%24%7B%5ECHILD_ERROR_NATIVE%7D&quot;&gt;&lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の子プロセスが終了するのを待って、死亡したプロセスのpidを返します。そのような子プロセスがない場合は、 &lt;code&gt;-1&lt;/code&gt; を返します。PIDに一致する子プロセスがあるが、まだ終了していない場合、非ブロッキング待機（FLAGSに&lt;a href=&quot;posix#WNOHANG&quot;&gt;WNOHANG&lt;/a&gt;を使用）は0を返すことができます。ステータスは&lt;a href=&quot;perlvar#%24%3F&quot;&gt; &lt;code&gt;$?&lt;/code&gt; &lt;/a&gt;で返されますか？および&lt;a href=&quot;perlvar#%24%7B%5ECHILD_ERROR_NATIVE%7D&quot;&gt; &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a039b2b9c5bcec1c837f18b2a777a3cf1a5c101d" translate="yes" xml:space="preserve">
          <source>Waits for a particular child process to terminate and returns the pid of the deceased process, or &lt;code&gt;-1&lt;/code&gt; if there is no such child process. On some systems, a value of 0 indicates that there are processes still running. The status is returned in &lt;code&gt;$?&lt;/code&gt; and &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; . If you say</source>
          <target state="translated">特定の子プロセスが終了するのを待ち、死んだプロセスのpidを返します。そのような子プロセスがない場合は &lt;code&gt;-1&lt;/code&gt; を返します。一部のシステムでは、値0はまだ実行中のプロセスがあることを示します。ステータスは &lt;code&gt;$?&lt;/code&gt; で返されますか？および &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; 。あなたが言うなら</target>
        </trans-unit>
        <trans-unit id="9d2d2ea3d50db6c0193c946021247ef1ef74c98a" translate="yes" xml:space="preserve">
          <source>Walk Perl syntax tree, printing concise info about ops</source>
          <target state="translated">Perl 構文ツリーをウォークし、ops に関する簡潔な情報を表示</target>
        </trans-unit>
        <trans-unit id="98ac99324db8fed0af8f3ac36eac780a0f3b01c7" translate="yes" xml:space="preserve">
          <source>Walk Perl syntax tree, printing debug info about ops</source>
          <target state="translated">Perl 構文ツリーをウォークし、ops のデバッグ情報を表示</target>
        </trans-unit>
        <trans-unit id="7431af4c5a7328a3a156e7686791a7345dc2386a" translate="yes" xml:space="preserve">
          <source>Walk Perl syntax tree, printing terse info about ops</source>
          <target state="translated">Perl の構文ツリーをウォークし、ops についての簡潔な情報を表示する</target>
        </trans-unit>
        <trans-unit id="a864d880f623d2740f245bfcfe987603dc895c7a" translate="yes" xml:space="preserve">
          <source>Walk the symbol table starting at SYMREF and call METHOD on each symbol (a B::GV object) visited. When the walk reaches package symbols (such as &quot;Foo::&quot;) it invokes RECURSE, passing in the symbol name, and only recurses into the package if that sub returns true.</source>
          <target state="translated">SYMREF から始まるシンボルテーブルをウォークし、訪れた各シンボル (B::GV オブジェクト)に対して METHOD を呼び出します。ウォークがパッケージシンボル (例えば &quot;Foo::&quot;)に到達すると、シンボル名を渡して RECURSE を呼び出し、そのサブが true を返した場合にのみパッケージに再帰します。</target>
        </trans-unit>
        <trans-unit id="8c7c87239fc66d9d343f9260489e69fb8f9d3386" translate="yes" xml:space="preserve">
          <source>Walking through a zip file</source>
          <target state="translated">ZIPファイルを歩く</target>
        </trans-unit>
        <trans-unit id="4e8d79fb203d74f77c4bb0a86a3b744deaaf0e27" translate="yes" xml:space="preserve">
          <source>Wanting to explore this thoroughly, we want to use the stdio &lt;code&gt;fputs()&lt;/code&gt; on a PerlIO *. This means we have to ask the perlio system for a stdio &lt;code&gt;FILE *&lt;/code&gt; :</source>
          <target state="translated">これを徹底的に調べたいので、PerlIO *でstdio &lt;code&gt;fputs()&lt;/code&gt; を使用したいと思います。つまり、perlioシステムにstdio &lt;code&gt;FILE *&lt;/code&gt; を要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="ddb9d78c7601cd47bef87e3a8d1703d450fc174a" translate="yes" xml:space="preserve">
          <source>Wanting to explore this thoroughly, we want to use the stdio &lt;code&gt;fputs()&lt;/code&gt; on a PerlIO *. This means we have to ask the perlio system for a stdio &lt;code&gt;FILE *&lt;/code&gt;:</source>
          <target state="translated">これを徹底的に調査したいので、PerlIO *で &lt;code&gt;fputs()&lt;/code&gt; を使用します。これは、perlioシステムにstdio &lt;code&gt;FILE *&lt;/code&gt; を要求する必要があることを意味します*：</target>
        </trans-unit>
        <trans-unit id="65120e633a3335709be4eae387234d4db4add102" translate="yes" xml:space="preserve">
          <source>Warn on exit.</source>
          <target state="translated">出口で警告します。</target>
        </trans-unit>
        <trans-unit id="00ff4de53d3fe3ffe55031beb5fa9d320e5a35d7" translate="yes" xml:space="preserve">
          <source>Warn on implicit encoding conversions</source>
          <target state="translated">暗黙のエンコーディング変換に関する警告</target>
        </trans-unit>
        <trans-unit id="418df7742f5ac900627eefeef667634c85cc08a0" translate="yes" xml:space="preserve">
          <source>Warn()</source>
          <target state="translated">Warn()</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="5e95a54cc5d29c0bcc82593871bdfa68f79221af" translate="yes" xml:space="preserve">
          <source>Warning about Output Arguments</source>
          <target state="translated">出力引数についての警告</target>
        </trans-unit>
        <trans-unit id="78a452b501be745d32ffe67fa7b1df3549ee0e88" translate="yes" xml:space="preserve">
          <source>Warning and Dieing</source>
          <target state="translated">警告と死</target>
        </trans-unit>
        <trans-unit id="3986e72de01daed13d3e70510168ee3fa7188cc1" translate="yes" xml:space="preserve">
          <source>Warning messages are not collected in this variable. You can, however, set up a routine to process warnings by setting &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; as described in &lt;a href=&quot;#%25SIG&quot;&gt;&quot;%SIG&quot;&lt;/a&gt;.</source>
          <target state="translated">警告メッセージはこの変数に収集されません。ただし、&lt;a href=&quot;#%25SIG&quot;&gt;「％SIG」で&lt;/a&gt;説明されているように &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; を設定することにより、警告を処理するルーチンを設定できます。</target>
        </trans-unit>
        <trans-unit id="e62cd761838ae197b4220edd9e3bd0f69c6d3c92" translate="yes" xml:space="preserve">
          <source>Warning messages are not collected in this variable. You can, however, set up a routine to process warnings by setting &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; as described in &lt;a href=&quot;#%25SIG&quot;&gt;%SIG&lt;/a&gt;.</source>
          <target state="translated">この変数には警告メッセージは収集されません。ただし、&lt;a href=&quot;#%25SIG&quot;&gt;％SIGで&lt;/a&gt;説明されているように &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; を設定することにより、警告を処理するルーチンを設定できます。</target>
        </trans-unit>
        <trans-unit id="177f43f40d5a0d1c0d1cade54f6a793d7b628bd1" translate="yes" xml:space="preserve">
          <source>Warning on &lt;code&gt;\1&lt;/code&gt; Instead of &lt;code&gt;$1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$1&lt;/code&gt; なく &lt;code&gt;\1&lt;/code&gt; に関する警告</target>
        </trans-unit>
        <trans-unit id="e6fb45b9b8c6b7b341ac8191e822e0bd743414ee" translate="yes" xml:space="preserve">
          <source>Warning on \1 Instead of $1</source>
          <target state="translated">Warning on †††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††††† ｶﾞｰﾝﾄﾞｳﾞｧｰﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝﾄﾞｳﾞｧﾝ</target>
        </trans-unit>
        <trans-unit id="151e71b95baa6e558c89aa6c4dcb9635e2009b86" translate="yes" xml:space="preserve">
          <source>Warning! The accuracy</source>
          <target state="translated">警告!精度</target>
        </trans-unit>
        <trans-unit id="dab0c499dcd06e930b9b78c9e213ee3924e2052e" translate="yes" xml:space="preserve">
          <source>Warning: If &lt;code&gt;SvCUR&lt;/code&gt; is equal to &lt;code&gt;SvLEN&lt;/code&gt; , then &lt;code&gt;SvEND&lt;/code&gt; points to unallocated memory.</source>
          <target state="translated">警告：もし &lt;code&gt;SvCUR&lt;/code&gt; がに等しい &lt;code&gt;SvLEN&lt;/code&gt; その後、 &lt;code&gt;SvEND&lt;/code&gt; 割り当てられていないメモリを指します。</target>
        </trans-unit>
        <trans-unit id="0974493779dafc7e57ac71d562dfab60f76d71ea" translate="yes" xml:space="preserve">
          <source>Warning: If &lt;code&gt;SvCUR&lt;/code&gt; is equal to &lt;code&gt;SvLEN&lt;/code&gt;, then &lt;code&gt;SvEND&lt;/code&gt; points to unallocated memory.</source>
          <target state="translated">警告：もし &lt;code&gt;SvCUR&lt;/code&gt; がに等しい &lt;code&gt;SvLEN&lt;/code&gt; その後、 &lt;code&gt;SvEND&lt;/code&gt; 割り当てられていないメモリを指します。</target>
        </trans-unit>
        <trans-unit id="5cdc8cc6818456815e1d0494f24351d811145d85" translate="yes" xml:space="preserve">
          <source>Warning: Use of &quot;%s&quot; without parentheses is ambiguous</source>
          <target state="translated">警告。括弧なしの「%s」の使用は曖昧です。</target>
        </trans-unit>
        <trans-unit id="897e60f42bffb44a74b7eeefd8312eec6b6adc82" translate="yes" xml:space="preserve">
          <source>Warning: What follows is an experimental feature.</source>
          <target state="translated">警告。以下の内容は実験的なものです。</target>
        </trans-unit>
        <trans-unit id="3d90a55578395474fdb067a0642c6c8de7badf12" translate="yes" xml:space="preserve">
          <source>Warning: something's wrong</source>
          <target state="translated">警告:何かが間違っている</target>
        </trans-unit>
        <trans-unit id="0f8de18035aca70c8dfa181a9a2f5d6af3e09a08" translate="yes" xml:space="preserve">
          <source>Warning: syntactical care is required when sorting the list returned from a function. If you want to sort the list returned by the function call &lt;code&gt;find_records(@key)&lt;/code&gt; , you can use:</source>
          <target state="translated">警告：関数から返されたリストをソートするときは、構文上の注意が必要です。関数呼び出し &lt;code&gt;find_records(@key)&lt;/code&gt; によって返されたリストを並べ替える場合は、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="dae34924595ac7e52988d28d8e637ae6b35f169b" translate="yes" xml:space="preserve">
          <source>Warning: syntactical care is required when sorting the list returned from a function. If you want to sort the list returned by the function call &lt;code&gt;find_records(@key)&lt;/code&gt;, you can use:</source>
          <target state="translated">警告：関数から返されたリストを並べ替えるときは、構文上の注意が必要です。関数呼び出し &lt;code&gt;find_records(@key)&lt;/code&gt; によって返されるリストをソートする場合は、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="5108285f53caf36c4da1bf90b62aacb88666b29e" translate="yes" xml:space="preserve">
          <source>Warning: the inst_perl: target will most probably overwrite your existing perl binary. Use with care!</source>
          <target state="translated">警告:inst_perl:ターゲットは、おそらく既存の perl バイナリを上書きします。注意して使用してください!</target>
        </trans-unit>
        <trans-unit id="dcb788686e262ffd0dbd7ce4c0f8b286c9bc209c" translate="yes" xml:space="preserve">
          <source>Warning: unable to close filehandle %s properly</source>
          <target state="translated">警告:ファイルハンドル %s を正しく閉じることができません。</target>
        </trans-unit>
        <trans-unit id="c623d9da250d1d3baf0fc1865c1c269866707421" translate="yes" xml:space="preserve">
          <source>Warning: unable to close filehandle %s properly: %s</source>
          <target state="translated">警告:ファイルハンドル %s を正しく閉じることができません:%s</target>
        </trans-unit>
        <trans-unit id="b2b8a6152044437878fd32b30b892373be87bfc0" translate="yes" xml:space="preserve">
          <source>Warning: unable to close filehandle properly: %s</source>
          <target state="translated">警告:ファイルハンドルを正しく閉じることができません:%s</target>
        </trans-unit>
        <trans-unit id="1430f976c596795274458abcfbc4f280cbfcebac" translate="yes" xml:space="preserve">
          <source>Warnings</source>
          <target state="translated">Warnings</target>
        </trans-unit>
        <trans-unit id="cd781cfd6561f1847315b32c68e5aa6443ed0ce1" translate="yes" xml:space="preserve">
          <source>Warnings about floating-point overflow when compiling Perl on Tru64</source>
          <target state="translated">Tru64 で Perl をコンパイルする際の浮動小数点オーバーフローに関する警告</target>
        </trans-unit>
        <trans-unit id="f781ae9f2ff2acd0ab91c312289ece490360983a" translate="yes" xml:space="preserve">
          <source>Warnings are issued and the file skipped if &lt;code&gt;AutoSplit&lt;/code&gt; cannot locate either the</source>
          <target state="translated">&lt;code&gt;AutoSplit&lt;/code&gt; がどちらも特定で​​きない場合、警告が発行され、ファイルはスキップされます。</target>
        </trans-unit>
        <trans-unit id="931a49d01050aa1b2755e3ac6bcc484cb7da972d" translate="yes" xml:space="preserve">
          <source>Warnings dispatched from perl itself (or more accurately, those that match descriptions found in &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;) are only displayed once (no duplicate descriptions). User code generated warnings a la warn() are unaffected, allowing duplicate user messages to be displayed.</source>
          <target state="translated">perl自体（より正確には、&lt;a href=&quot;perldiag&quot;&gt;perldiagにある&lt;/a&gt;説明と一致するもの）からディスパッチされた警告は、一度だけ表示されます（説明の重複はありません）。ユーザーコードが警告を生成し、warn（）は影響を受けないため、重複したユーザーメッセージを表示できます。</target>
        </trans-unit>
        <trans-unit id="e5a6430c53bc65107aa5413603aa9d5ae883fbaa" translate="yes" xml:space="preserve">
          <source>Warnings import function</source>
          <target state="translated">警告のインポート関数</target>
        </trans-unit>
        <trans-unit id="c2ae6895b901f6f499e198f2b33c31bd733ed306" translate="yes" xml:space="preserve">
          <source>Warnings of other C compilers</source>
          <target state="translated">他のCコンパイラの警告</target>
        </trans-unit>
        <trans-unit id="b7138d6fa7c0b17bdce29490d5c36d00f35c9b8a" translate="yes" xml:space="preserve">
          <source>Warns the contents of &lt;code&gt;$@&lt;/code&gt; if any.</source>
          <target state="translated">&lt;code&gt;$@&lt;/code&gt; の内容がある場合は警告します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
