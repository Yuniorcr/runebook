<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="254f31569eb5ae2200e952d6645d10bd474402c9" translate="yes" xml:space="preserve">
          <source>You can also insert hooks into the file inclusion system by putting Perl code directly into &lt;code&gt;@INC&lt;/code&gt; . Those hooks may be subroutine references, array references or blessed objects. See &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; for details.</source>
          <target state="translated">Perlコードを &lt;code&gt;@INC&lt;/code&gt; に直接挿入することにより、ファイルインクルードシステムにフックを挿入することもできます。これらのフックは、サブルーチン参照、配列参照、または祝福されたオブジェクトの場合があります。詳細&lt;a href=&quot;functions/require&quot;&gt;はrequire&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0d00ca1cf68d3a16d0f398e68938a43a44653a67" translate="yes" xml:space="preserve">
          <source>You can also insert hooks into the file inclusion system by putting Perl code directly into &lt;code&gt;@INC&lt;/code&gt;. Those hooks may be subroutine references, array references or blessed objects. See &lt;a href=&quot;perlfunc#require&quot;&gt;&quot;require&quot; in perlfunc&lt;/a&gt; for details.</source>
          <target state="translated">Perlコードを &lt;code&gt;@INC&lt;/code&gt; に直接配置することにより、ファイルインクルードシステムにフックを挿入することもできます。これらのフックは、サブルーチン参照、配列参照、または祝福されたオブジェクトです。詳細について&lt;a href=&quot;perlfunc#require&quot;&gt;は、perlfuncの「require」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3bd593043bf11a275706b2d003ae9bc2607ea6" translate="yes" xml:space="preserve">
          <source>You can also insert hooks into the import facility by putting Perl code directly into the &lt;a href=&quot;perlvar#%40INC&quot;&gt;&lt;code&gt;@INC&lt;/code&gt;&lt;/a&gt; array. There are three forms of hooks: subroutine references, array references, and blessed objects.</source>
          <target state="translated">Perlコードを&lt;a href=&quot;perlvar#%40INC&quot;&gt; &lt;code&gt;@INC&lt;/code&gt; &lt;/a&gt;配列に直接配置することにより、インポート機能にフックを挿入することもできます。フックには、サブルーチン参照、配列参照、および祝福されたオブジェクトの3つの形式があります。</target>
        </trans-unit>
        <trans-unit id="ae3dcb264a37bf433b3f44d57e7b80c09701bead" translate="yes" xml:space="preserve">
          <source>You can also insert hooks into the import facility by putting Perl code directly into the @INC array. There are three forms of hooks: subroutine references, array references, and blessed objects.</source>
          <target state="translated">また、Perlのコードを直接@INC配列に入れることで、インポート機能にフックを挿入することもできます。フックには、サブルーチン参照、配列参照、祝福されたオブジェクトの3つの形式があります。</target>
        </trans-unit>
        <trans-unit id="05e59c02014a1d5de9eba1297e8dbc08a175322a" translate="yes" xml:space="preserve">
          <source>You can also just quickly &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; on an undefined value this way:</source>
          <target state="translated">このようにして、未定義の値ですぐに &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; こともできます。</target>
        </trans-unit>
        <trans-unit id="d08d52cd53b0788f14ad13e65f62fc4176471f69" translate="yes" xml:space="preserve">
          <source>You can also just quickly &lt;code&gt;die&lt;/code&gt; on an undefined value this way:</source>
          <target state="translated">この方法で、未定義の値ですぐに &lt;code&gt;die&lt;/code&gt; こともできます。</target>
        </trans-unit>
        <trans-unit id="5af0b3086e446e033f6737e913de95b977971d84" translate="yes" xml:space="preserve">
          <source>You can also look for information at:</source>
          <target state="translated">で情報を探すこともできます。</target>
        </trans-unit>
        <trans-unit id="87644608210f2aa31bbb03fc62e8e9aeb59cfbac" translate="yes" xml:space="preserve">
          <source>You can also make the warnings fatal by importing this module as:</source>
          <target state="translated">また、このモジュールをインポートして警告を致命的なものにすることもできます。</target>
        </trans-unit>
        <trans-unit id="7c87e0f17edfeca7f9eb08d5d17c96c80da6a5f2" translate="yes" xml:space="preserve">
          <source>You can also organize your tests within subdirectories in the</source>
          <target state="translated">のサブディレクトリ内でテストを整理することもできます。</target>
        </trans-unit>
        <trans-unit id="52f3afa40db22b85e32dd734c2f80ac43010fee7" translate="yes" xml:space="preserve">
          <source>You can also override &lt;code&gt;DOES&lt;/code&gt; directly in your own classes. If you override this method, it should never throw an exception.</source>
          <target state="translated">独自のクラスで &lt;code&gt;DOES&lt;/code&gt; を直接オーバーライドすることもできます。このメソッドをオーバーライドすると、例外がスローされることはありません。</target>
        </trans-unit>
        <trans-unit id="95cd0a4f9ce9a6a1469a2469c1efc68cdb5fae5b" translate="yes" xml:space="preserve">
          <source>You can also pass &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; an explicit encoding to change it on the fly. This isn't exactly &quot;binary&quot; mode, but we still use &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; to do it:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; に明示的なエンコーディングを渡して、オンザフライで変更することもできます。これは厳密に「バイナリ」モードではありませんが、 &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;&lt;/code&gt; を使用して実行します。</target>
        </trans-unit>
        <trans-unit id="0073e68ffe2cd9f7e4c5d59bc4ac83d3762723b7" translate="yes" xml:space="preserve">
          <source>You can also pass &lt;code&gt;binmode&lt;/code&gt; an explicit encoding to change it on the fly. This isn't exactly &quot;binary&quot; mode, but we still use &lt;code&gt;binmode&lt;/code&gt; to do it:</source>
          <target state="translated">&lt;code&gt;binmode&lt;/code&gt; に明示的なエンコーディングを渡して、その場で変更することもできます。これは正確に「バイナリ」モードではありませんが、それでも &lt;code&gt;binmode&lt;/code&gt; を使用して実行します。</target>
        </trans-unit>
        <trans-unit id="f90ccf1fd48c6dc4de43f56b2888c9c3134e2996" translate="yes" xml:space="preserve">
          <source>You can also pass a subroutine reference in order to determine and return the proper program to run based on a given test script. The subroutine reference should expect the TAP::Harness object itself as the first argument, and the file name as the second argument. It should return an array reference containing the command to be run and including the test file name. It can also simply return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, in which case TAP::Harness will fall back on executing the test script in Perl:</source>
          <target state="translated">また、特定のテストスクリプトに基づいて実行する適切なプログラムを決定して返すために、サブルーチン参照を渡すこともできます。サブルーチンの参照では、最初の引数としてTAP :: Harnessオブジェクト自体を想定し、2番目の引数としてファイル名を想定する必要があります。実行するコマンドとテストファイル名を含む配列参照を返す必要があります。また、単に &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返すこともできます。その場合、TAP :: HarnessはPerlでのテストスクリプトの実行にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="962bddff5bcc07f7f4968830992a0a3b3b51ad71" translate="yes" xml:space="preserve">
          <source>You can also pass a subroutine reference in order to determine and return the proper program to run based on a given test script. The subroutine reference should expect the TAP::Harness object itself as the first argument, and the file name as the second argument. It should return an array reference containing the command to be run and including the test file name. It can also simply return &lt;code&gt;undef&lt;/code&gt;, in which case TAP::Harness will fall back on executing the test script in Perl:</source>
          <target state="translated">特定のテストスクリプトに基づいて実行する適切なプログラムを決定して返すために、サブルーチン参照を渡すこともできます。サブルーチン参照では、最初の引数としてTAP :: Harnessオブジェクト自体を、2番目の引数としてファイル名を想定する必要があります。実行するコマンドとテストファイル名を含む配列参照を返す必要があります。また、単に &lt;code&gt;undef&lt;/code&gt; を返すこともできます。その場合、TAP :: HarnessはPerlでテストスクリプトを実行するとフォールバックします。</target>
        </trans-unit>
        <trans-unit id="f73ef4e3f69ff87027791a2bee2e957755bc2ee3" translate="yes" xml:space="preserve">
          <source>You can also read and execute Perl statements from a file while in the midst of your C program, by placing the filename in</source>
          <target state="translated">また、C プログラムの途中でファイル名を</target>
        </trans-unit>
        <trans-unit id="e9bed781c4a6044ffb67b23fe5c127e03e4dd1a1" translate="yes" xml:space="preserve">
          <source>You can also refer to capture groups relatively, by using a negative number, so that &lt;code&gt;\g-1&lt;/code&gt; and &lt;code&gt;\g{-1}&lt;/code&gt; both refer to the immediately preceding capture group, and &lt;code&gt;\g-2&lt;/code&gt; and &lt;code&gt;\g{-2}&lt;/code&gt; both refer to the group before it. For example:</source>
          <target state="translated">負の数を使用して、キャプチャグループを相対的に参照することもできます。これにより、 &lt;code&gt;\g-1&lt;/code&gt; と &lt;code&gt;\g{-1}&lt;/code&gt; どちらも直前のキャプチャグループを参照し、 &lt;code&gt;\g-2&lt;/code&gt; と &lt;code&gt;\g{-2}&lt;/code&gt; 両方を参照できます。その前のグループを参照してください。例えば：</target>
        </trans-unit>
        <trans-unit id="108a751b15dd5a65748cd5542a9f662a512fab15" translate="yes" xml:space="preserve">
          <source>You can also restrict names to a certain alphabet by specifying the &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt; pragma:</source>
          <target state="translated">&lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt;プラグマを指定して、名前を特定のアルファベットに制限することもできます。</target>
        </trans-unit>
        <trans-unit id="0b5023bd40fe3a7df91e6504812de04a002532fe" translate="yes" xml:space="preserve">
          <source>You can also see in that example that we use &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; to get the value of the character; the inverse function &lt;code&gt;uvchr_to_utf8&lt;/code&gt; is available for putting a UV into UTF-8:</source>
          <target state="translated">この例では、 &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; を使用して文字の値を取得していることもわかります。UVをUTF-8に入れるには、逆関数 &lt;code&gt;uvchr_to_utf8&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="2fae27cd653314395e221d45c5f75ed85eb09446" translate="yes" xml:space="preserve">
          <source>You can also send patch files to &lt;a href=&quot;mailto:perl5-porters@perl.org&quot;&gt;perl5-porters@perl.org&lt;/a&gt; directly if the patch is not ready to be applied, but intended for discussion.</source>
          <target state="translated">パッチを適用する準備ができていないが、議論を目的としている場合は、パッチファイルを&lt;a href=&quot;mailto:perl5-porters@perl.org&quot;&gt;perl5-porters@perl.orgに&lt;/a&gt;直接送信することもできます。</target>
        </trans-unit>
        <trans-unit id="7a3be218b57aec1fe1552cf95cde772b459e8c4a" translate="yes" xml:space="preserve">
          <source>You can also send pull requests to the Github repository:</source>
          <target state="translated">プルリクエストをGithubリポジトリに送ることもできます。</target>
        </trans-unit>
        <trans-unit id="36456f92328715ac88fc0c97cb1b9c2205f52562" translate="yes" xml:space="preserve">
          <source>You can also set up your user name and e-mail address. Most people do this once globally in their</source>
          <target state="translated">ユーザー名やメールアドレスの設定もできます。ほとんどの人は、グローバルに一度、自分の</target>
        </trans-unit>
        <trans-unit id="2a4162cf16b37e0bb4e40d233ea23d3b932f7f0d" translate="yes" xml:space="preserve">
          <source>You can also specify the separator character using hexadecimal notation: &lt;b&gt;-0x&lt;i&gt;HHH...&lt;/i&gt;&lt;/b&gt;, where the &lt;code&gt;&lt;i&gt;H&lt;/i&gt;&lt;/code&gt; are valid hexadecimal digits. Unlike the octal form, this one may be used to specify any Unicode character, even those beyond 0xFF. So if you</source>
          <target state="translated">16進表記&lt;b&gt;-0x &lt;i&gt;HHH ...&lt;/i&gt;&lt;/b&gt;を使用して、区切り文字を指定することもできます&lt;b&gt;&lt;i&gt;。&lt;/i&gt;&lt;/b&gt;ここで、 &lt;code&gt;&lt;i&gt;H&lt;/i&gt;&lt;/code&gt; は有効な16進数です。8進形式とは異なり、これは、0xFFを超えるものを含め、任意のUnicode文字を指定するために使用できます。だからあなたなら</target>
        </trans-unit>
        <trans-unit id="5708c7cba5f95ced05791bc1f781cc7e3ab698d2" translate="yes" xml:space="preserve">
          <source>You can also specify to NOT use something:</source>
          <target state="translated">また、何かを使わないように指定することもできます。</target>
        </trans-unit>
        <trans-unit id="d0e21d8042eb943e53a763ac42b81475843fd69a" translate="yes" xml:space="preserve">
          <source>You can also store data in network order to allow easy sharing across multiple platforms, or when storing on a socket known to be remotely connected. The routines to call have an initial &lt;code&gt;n&lt;/code&gt; prefix for</source>
          <target state="translated">複数のプラットフォーム間で簡単に共有できるように、またはリモート接続されていることがわかっているソケットに保存するときに、ネットワーク順にデータを保存することもできます。呼び出すルーチンには、最初の &lt;code&gt;n&lt;/code&gt; 接頭辞が</target>
        </trans-unit>
        <trans-unit id="32a000612a53a9f73b8165e9ffd35ee663d455aa" translate="yes" xml:space="preserve">
          <source>You can also subscript a list to get a single element from it:</source>
          <target state="translated">また、リストから1つの要素を取得するために、リストに添え字をつけることもできます。</target>
        </trans-unit>
        <trans-unit id="e308900a9f85413017177815b933ee92128f909d" translate="yes" xml:space="preserve">
          <source>You can also test a class, to make sure that it has the right ancestor:</source>
          <target state="translated">クラスをテストして、それが正しい祖先を持っていることを確認することもできます。</target>
        </trans-unit>
        <trans-unit id="45cf05db45090a770c4e7c7739f97f42fdaa1b72" translate="yes" xml:space="preserve">
          <source>You can also test whether a version object is an alpha version, for example to prevent the use of some feature not present in the main release:</source>
          <target state="translated">また、バージョンオブジェクトがアルファバージョンであるかどうかをテストすることもできます。</target>
        </trans-unit>
        <trans-unit id="e940484c0812f3991ca3b5162180666fbbc774e9" translate="yes" xml:space="preserve">
          <source>You can also try &lt;code&gt;guess_encoding&lt;/code&gt; function which is exported by default. It takes $data to check and it also takes the list of suspects by option. The optional suspect list is</source>
          <target state="translated">デフォルトでエクスポートされる &lt;code&gt;guess_encoding&lt;/code&gt; 関数を試すこともできます。チェックには$ dataを使用し、オプションで容疑者のリストも取得します。オプションの容疑者リストは</target>
        </trans-unit>
        <trans-unit id="c6c2bb7263fcb86f56120bac5220dbcae10e778f" translate="yes" xml:space="preserve">
          <source>You can also try to include the module in a one-liner to see if perl finds it:</source>
          <target state="translated">また、ワンライナーにモジュールを入れてみて、Perlがそれを見つけるかどうかを確認することもできます。</target>
        </trans-unit>
        <trans-unit id="b15c66e70792efbd27fd6c112e317c6eb54c5b69" translate="yes" xml:space="preserve">
          <source>You can also try using &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt;, as described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; (although this is the same thing that many of the modules will do for you).</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;perlfuncで&lt;/a&gt;説明されているように、 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; の使用を試すこともできます（ただし、これは多くのモジュールが行うことと同じです）。</target>
        </trans-unit>
        <trans-unit id="74be7ad2f05258d57aeb18d3aea7623947196e74" translate="yes" xml:space="preserve">
          <source>You can also try using &lt;code&gt;fork&lt;/code&gt;, as described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; (although this is the same thing that many of the modules will do for you).</source>
          <target state="translated">&lt;a href=&quot;perlfunc&quot;&gt;perlfuncで&lt;/a&gt;説明されているように、 &lt;code&gt;fork&lt;/code&gt; を使用することもできます（ただし、これは多くのモジュールで実行されるのと同じことです）。</target>
        </trans-unit>
        <trans-unit id="22d0b06ab6697336780029eb518e6cdd2c05382e" translate="yes" xml:space="preserve">
          <source>You can also use</source>
          <target state="translated">また、以下のような使い方もできます。</target>
        </trans-unit>
        <trans-unit id="e0b40e46358631fd782ce6cd1e20ef0687b61198" translate="yes" xml:space="preserve">
          <source>You can also use 0x8e and 0x8f to indicate that the following sequence of characters belongs to yet another character set. To each following byte is added the value 0x80.</source>
          <target state="translated">また、0x8e と 0x8f を使用して、次の文字列が別の文字セットに属していることを示すこともできます。以下の各バイトには、値 0x80 が追加されます。</target>
        </trans-unit>
        <trans-unit id="202f7bfbf8f49e8ba6c221c617da66be05b837aa" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;Class::Tiny::Antlers&quot;&gt;Class::Tiny::Antlers&lt;/a&gt; for &lt;code&gt;Moose&lt;/code&gt;-like syntax.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; のような構文には&lt;a href=&quot;Class::Tiny::Antlers&quot;&gt;Class :: Tiny :: Antlers&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="da89dff1ecf2505f23c0fe06386fc84d5b6555f6" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;Devel::REPL&quot;&gt;Devel::REPL&lt;/a&gt; which is an interactive shell for Perl, commonly known as a REPL - Read, Evaluate, Print, Loop. It provides various handy features.</source>
          <target state="translated">また、Perlのインタラクティブシェルである&lt;a href=&quot;Devel::REPL&quot;&gt;Devel :: REPL&lt;/a&gt;を使用することもできます。これは、一般にREPLとして知られています-読み取り、評価、印刷、ループ。さまざまな便利な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="05db0e88a7c897c6cc9fa696a780cde648824d4d" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;Tie::Cycle&quot;&gt;Tie::Cycle&lt;/a&gt; to use a scalar that always has the next element of the circular array:</source>
          <target state="translated">&lt;a href=&quot;Tie::Cycle&quot;&gt;Tie :: Cycle&lt;/a&gt;を使用して、循環配列の次の要素を常に持つスカラーを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="8cb4cba1a89412d983ef34b9565f67b33c11cb2b" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;Time::Piece&quot;&gt;Time::Piece&lt;/a&gt;, which comes with Perl and provides a &lt;code&gt;localtime&lt;/code&gt; that returns an object:</source>
          <target state="translated">また、Perlに付属し、オブジェクトを返す &lt;code&gt;localtime&lt;/code&gt; &lt;a href=&quot;Time::Piece&quot;&gt;時間&lt;/a&gt;を提供するTime :: Pieceを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="b0304b03ea61e4912a40d9a36c7c0d47306360a9" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny::Antlers&quot;&gt;Class::Tiny::Antlers&lt;/a&gt; for &lt;code&gt;Moose&lt;/code&gt; -like syntax.</source>
          <target state="translated">&lt;code&gt;Moose&lt;/code&gt; のような構文には&lt;a href=&quot;http://search.cpan.org/perldoc/Class::Tiny::Antlers&quot;&gt;Class :: Tiny :: Antlers&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="37de0be164e83020017ecbe8445d1b73a8f2a1b8" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;http://search.cpan.org/perldoc/Devel::REPL&quot;&gt;Devel::REPL&lt;/a&gt; which is an interactive shell for Perl, commonly known as a REPL - Read, Evaluate, Print, Loop. It provides various handy features.</source>
          <target state="translated">また、Perlのインタラクティブシェルである&lt;a href=&quot;http://search.cpan.org/perldoc/Devel::REPL&quot;&gt;Devel :: REPL&lt;/a&gt;を使用することもできます。これは一般にREPLとして知られています-読み取り、評価、印刷、ループ。さまざまな便利な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="9013c35ad3298535ad5c8c74739a6a896be46939" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::Cycle&quot;&gt;Tie::Cycle&lt;/a&gt; to use a scalar that always has the next element of the circular array:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::Cycle&quot;&gt;Tie :: Cycle&lt;/a&gt;を使用して、循環配列の次の要素を常に持つスカラーを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="ed9079885add1db23c7b692dc26264a6c8112995" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;http://search.cpan.org/perldoc/local::lib&quot;&gt;local::lib&lt;/a&gt; to do much of the same thing. Install modules using &lt;a href=&quot;http://search.cpan.org/perldoc/local::lib&quot;&gt;local::lib&lt;/a&gt;'s settings then use the module in your program:</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/local::lib&quot;&gt;local :: lib&lt;/a&gt;を使用して同じことの多くを行うこともできます。&lt;a href=&quot;http://search.cpan.org/perldoc/local::lib&quot;&gt;local :: lib&lt;/a&gt;の設定を使用してモジュールをインストールし、プログラムでモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="cee36dc459570b6060c3229ade20676c1103dac6" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;local::lib&quot;&gt;local::lib&lt;/a&gt; to do much of the same thing. Install modules using &lt;a href=&quot;local::lib&quot;&gt;local::lib&lt;/a&gt;'s settings then use the module in your program:</source>
          <target state="translated">&lt;a href=&quot;local::lib&quot;&gt;local :: lib&lt;/a&gt;を使用して、同じことの多くを実行することもできます。&lt;a href=&quot;local::lib&quot;&gt;local :: lib&lt;/a&gt;の設定を使用してモジュールをインストールしてから、プログラムでモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="38efc50c4c6a8567a3f07d734113580b8054b830" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;time/piece&quot;&gt;Time::Piece&lt;/a&gt;, which comes with Perl and provides a &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; that returns an object:</source>
          <target state="translated">Perlに付属し、オブジェクトを返す &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; を提供する&lt;a href=&quot;time/piece&quot;&gt;Time :: Pieceを&lt;/a&gt;使用することもできます。</target>
        </trans-unit>
        <trans-unit id="fe8ff91507ad3e201158ab00126828440dda9b62" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;HANDLE-&amp;gt;input_line_number(EXPR)&lt;/code&gt; to access the line counter for a given filehandle without having to worry about which handle you last accessed.</source>
          <target state="translated">&lt;code&gt;HANDLE-&amp;gt;input_line_number(EXPR)&lt;/code&gt; を使用して、最後にアクセスしたハンドルを気にすることなく、特定のファイルハンドルの行カウンターにアクセスすることもできます。</target>
        </trans-unit>
        <trans-unit id="cfc194c704de65f5fa2e2dc7cdfca08cd861cafc" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;cpan&lt;/code&gt; 's &lt;code&gt;-a&lt;/code&gt; switch to create an autobundle file that &lt;code&gt;CPAN.pm&lt;/code&gt; understands and can use to re-install every module:</source>
          <target state="translated">また、使用することができます &lt;code&gt;cpan&lt;/code&gt; の &lt;code&gt;-a&lt;/code&gt; というautobundleファイルを作成するようにスイッチを &lt;code&gt;CPAN.pm&lt;/code&gt; を理解し、再インストールし、すべてのモジュールに使用することができます。</target>
        </trans-unit>
        <trans-unit id="c32a4a11aa3d97ad829511eee7c584cbf65b7424" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;cpan&lt;/code&gt;'s &lt;code&gt;-a&lt;/code&gt; switch to create an autobundle file that &lt;code&gt;CPAN.pm&lt;/code&gt; understands and can use to re-install every module:</source>
          <target state="translated">また、 &lt;code&gt;cpan&lt;/code&gt; の &lt;code&gt;-a&lt;/code&gt; スイッチを使用して、 &lt;code&gt;CPAN.pm&lt;/code&gt; が理解し、すべてのモジュールを再インストールするために使用できる自動バンドルファイルを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="3ed04ee9d470ae5bb5ded41953f6884557aab9f4" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;while&lt;/code&gt; in a post-condition:</source>
          <target state="translated">また、使用することができます &lt;code&gt;while&lt;/code&gt; 事後条件に：</target>
        </trans-unit>
        <trans-unit id="d2490129a2ade6b9a949f50bed0b1d18208e8c0a" translate="yes" xml:space="preserve">
          <source>You can also use Perl one-liners to modify a file in-place. The following changes all 'Fred' to 'Barney' in</source>
          <target state="translated">また、Perl のワンライナーを使って、ファイルをその場で修正することもできます。次の例では、'Fred'を'Barney'に変更しています。</target>
        </trans-unit>
        <trans-unit id="7bdc3a001959e967af8fbe560047483c608a1a86" translate="yes" xml:space="preserve">
          <source>You can also use PerlIO to convert larger amounts of data you don't want to bring into memory. For example, to convert between ISO-8859-1 (Latin 1) and UTF-8 (or UTF-EBCDIC in EBCDIC machines):</source>
          <target state="translated">また、PerlIO を使用して、メモリに持ち込みたくない大容量のデータを変換することもできます。例えば、ISO-8859-1 (Latin 1)と UTF-8 (EBCDIC マシンでは UTF-EBCDIC)の間で変換します。</target>
        </trans-unit>
        <trans-unit id="ae806fe9a09487e09415c88d84054f11b5bab926" translate="yes" xml:space="preserve">
          <source>You can also use a commercial debugger such as Affrus (Mac OS X), Komodo from Activestate (Windows and Mac OS X), or EPIC (most platforms).</source>
          <target state="translated">また、Affrus (Mac OS X)、ActivestateのKomodo (WindowsとMac OS X)、EPIC (ほとんどのプラットフォーム)などの市販のデバッガを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="79babd18e608e40e4da78366242734a20c79cee2" translate="yes" xml:space="preserve">
          <source>You can also use a double fork. You immediately &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; for your first child, and the init daemon will &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; for your grandchild once it exits.</source>
          <target state="translated">ダブルフォークを使用することもできます。あなたはすぐに &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; 、あなたの最初の子のために、とinitデーモンがします &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait()&lt;/a&gt;&lt;/code&gt; 、それが終了したら、あなたの孫のために。</target>
        </trans-unit>
        <trans-unit id="d69e7ee5e4d94793bbffd2e90393fe6a378a73cd" translate="yes" xml:space="preserve">
          <source>You can also use a double fork. You immediately &lt;code&gt;wait()&lt;/code&gt; for your first child, and the init daemon will &lt;code&gt;wait()&lt;/code&gt; for your grandchild once it exits.</source>
          <target state="translated">ダブルフォークを使用することもできます。すぐに最初の子を &lt;code&gt;wait()&lt;/code&gt; し、initデーモンは孫が終了するとすぐに &lt;code&gt;wait()&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="9ef85cce54fb95ce8f948edcebadc50c579e68d3" translate="yes" xml:space="preserve">
          <source>You can also use a list slice to select only the elements that you need:</source>
          <target state="translated">リストスライスを使って、必要な要素だけを選択することもできます。</target>
        </trans-unit>
        <trans-unit id="d760c6f0200ce645ec4271e39ed0780a635d6be2" translate="yes" xml:space="preserve">
          <source>You can also use a localized &lt;code&gt;@ARGV&lt;/code&gt; to eliminate the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">ローカライズされた &lt;code&gt;@ARGV&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; を排除することもできます。</target>
        </trans-unit>
        <trans-unit id="52b5c5f91438f8f97a41eab3ee2f38fefeb189a7" translate="yes" xml:space="preserve">
          <source>You can also use a localized &lt;code&gt;@ARGV&lt;/code&gt; to eliminate the &lt;code&gt;open&lt;/code&gt;:</source>
          <target state="translated">ローカライズされた &lt;code&gt;@ARGV&lt;/code&gt; を使用して、 &lt;code&gt;open&lt;/code&gt; を排除することもできます。</target>
        </trans-unit>
        <trans-unit id="4613c51eb74aabc580ab960ede735ed7c5a84c03" translate="yes" xml:space="preserve">
          <source>You can also use a subroutine reference as a method:</source>
          <target state="translated">サブルーチン参照をメソッドとして使用することもできます。</target>
        </trans-unit>
        <trans-unit id="55b643d1caec2f7008ddc9ff139f97c1c50f1aef" translate="yes" xml:space="preserve">
          <source>You can also use certain libraries like &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; conditionally, but be sure to skip the test gracefully if it's not there.</source>
          <target state="translated">&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;などの特定のライブラリを条件付きで使用することもできますが、テストがない場合は、テストを適切にスキップしてください。</target>
        </trans-unit>
        <trans-unit id="f4a8095c707393fa806f56c74d791b44c5bdbd35" translate="yes" xml:space="preserve">
          <source>You can also use certain libraries like Config conditionally, but be sure to skip the test gracefully if it's not there.</source>
          <target state="translated">Configのような特定のライブラリを条件付きで使うこともできますが、それがない場合は潔くテストをスキップするようにしましょう。</target>
        </trans-unit>
        <trans-unit id="aee62fec81f8fc5af73b94cc4b6a4396ba0e2b3e" translate="yes" xml:space="preserve">
          <source>You can also use dmake to build using Visual C++; provided, however, you set OSRELEASE to &quot;microsft&quot; (or whatever the directory name under which the Visual C dmake configuration lives) in your environment and edit win32/config.vc to change &quot;make=nmake&quot; into &quot;make=dmake&quot;. The latter step is only essential if you want to use dmake as your default make for building extensions using MakeMaker.</source>
          <target state="translated">ただし、お使いの環境で OSRELEASE を &quot;microsft&quot; (または Visual C の dmake 設定が存在するディレクトリ名)に設定し、win32/config.vc を編集して &quot;make=nmake&quot; を &quot;make=dmake&quot; に変更する必要があります。後者のステップは、MakeMaker を使って拡張機能をビルドする際に dmake をデフォルトの make として使用したい場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="4fabe958607319aed5413ce7d91aa1937c4486e1" translate="yes" xml:space="preserve">
          <source>You can also use file-descriptor redirection to make STDERR a duplicate of STDOUT:</source>
          <target state="translated">また、ファイルディスクリプターのリダイレクトを使用して、STDERRをSTDOUTの複製にすることもできます。</target>
        </trans-unit>
        <trans-unit id="bb1f48473296bb1c89d7c3f43ff784b475814cae" translate="yes" xml:space="preserve">
          <source>You can also use negation in both &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; by introducing a caret (&lt;code&gt;^&lt;/code&gt;) between the first brace and the property name: &lt;code&gt;\p{^Tamil}&lt;/code&gt; is equal to &lt;code&gt;\P{Tamil}&lt;/code&gt; .</source>
          <target state="translated">また、最初のブレースとプロパティ名の間にキャレット（ &lt;code&gt;^&lt;/code&gt; ）を導入することにより、 &lt;code&gt;\p{}&lt;/code&gt; と &lt;code&gt;\P{}&lt;/code&gt; 両方で否定を使用できます。 &lt;code&gt;\p{^Tamil}&lt;/code&gt; は &lt;code&gt;\P{Tamil}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="54d20874570939ffd2d092114e0b4e19463ff0b5" translate="yes" xml:space="preserve">
          <source>You can also use negation in both &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; by introducing a caret (&lt;code&gt;^&lt;/code&gt;) between the first brace and the property name: &lt;code&gt;\p{^Tamil}&lt;/code&gt; is equal to &lt;code&gt;\P{Tamil}&lt;/code&gt;.</source>
          <target state="translated">最初の中括弧とプロパティ名の間にキャレット（ &lt;code&gt;^&lt;/code&gt; ）を導入することにより、 &lt;code&gt;\p{}&lt;/code&gt; と &lt;code&gt;\P{}&lt;/code&gt; 両方で否定を使用することもできます。 &lt;code&gt;\p{^Tamil}&lt;/code&gt; は &lt;code&gt;\P{Tamil}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6e6a71e5490894554dcf75a2f44b77577d1780db" translate="yes" xml:space="preserve">
          <source>You can also use substr() as an lvalue.</source>
          <target state="translated">また、lvalueとしてsubstr()を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="c8a027b09bbb1035f68edd31b3dac9da865767c1" translate="yes" xml:space="preserve">
          <source>You can also use the -Duse64bitint flag to Configure. Although there are some minor differences between compiling Perl with this flag versus the -Duse64bitall flag, they should not be noticeable from a Perl user's perspective. When configuring -Duse64bitint using a 64bit gcc on a pa-risc architecture, -Duse64bitint is silently promoted to -Duse64bitall.</source>
          <target state="translated">また、-Duse64bitint フラグを使用して Configure を行うこともできます。このフラグを使ってPerlをコンパイルする場合と-Duse64bitallフラグを使ってPerlをコンパイルする場合とでは、若干の違いがありますが、Perlユーザの視点から見れば目立った違いはありません。PA-RISC アーキテクチャ上で 64bit gcc を使用して -Duse64bitint を設定すると、-Duse64bitint は -Duse64bitall に昇格します。</target>
        </trans-unit>
        <trans-unit id="b2a60dda9b88e0346f381f0e7d0f8c46c74bcfba" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;Date::Calc&quot;&gt;Date::Calc&lt;/a&gt; module using its &lt;code&gt;Today_and_Now&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;Today_and_Now&lt;/code&gt; 関数を使用して&lt;a href=&quot;Date::Calc&quot;&gt;Date :: Calc&lt;/a&gt;モジュールを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="4a700e3ed5372f353d27ba3249155ac84ffdf5ae" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;Tie::File&quot;&gt;Tie::File&lt;/a&gt; module which lets you access the lines through a tied array. You can use normal array operations to modify your file, including setting the last index and using &lt;code&gt;splice&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;Tie::File&quot;&gt;Tie :: File&lt;/a&gt;モジュールを使用して、結合された配列を介して行にアクセスすることもできます。最後のインデックスの設定や &lt;code&gt;splice&lt;/code&gt; 使用など、通常の配列操作を使用してファイルを変更できます。</target>
        </trans-unit>
        <trans-unit id="01f985bfd65126ce04f3352a8f1c24d2647a415c" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date::Calc&lt;/a&gt; module using its &lt;code&gt;Today_and_Now&lt;/code&gt; function.</source>
          <target state="translated">また、 &lt;code&gt;Today_and_Now&lt;/code&gt; 関数を使用して&lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date :: Calc&lt;/a&gt;モジュールを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="5948ec91fdfb792b5884ccadb56a91fc59d16359" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;tie/file&quot;&gt;Tie::File&lt;/a&gt; module which lets you access the lines through a tied array. You can use normal array operations to modify your file, including setting the last index and using &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;tie/file&quot;&gt;Tie :: File&lt;/a&gt;モジュールを使用して、結合された配列を介して行にアクセスすることもできます。通常の配列操作を使用して、最後のインデックスの設定や &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; の使用など、ファイルを変更できます。</target>
        </trans-unit>
        <trans-unit id="cea4cf5784aecf948d1c03056df0b1645df434de" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;**&lt;/code&gt; operator, see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;**&lt;/code&gt; 演算子を使用することもできます&lt;a href=&quot;perlop&quot;&gt;。perlopを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="aca7a853e98fdbbaafd79c6bf0b9e3d107072aaf" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;\G&lt;/code&gt; anchor in scalar context. You still need the &lt;code&gt;g&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; アンカーをスカラーコンテキストで使用することもできます。まだ &lt;code&gt;g&lt;/code&gt; フラグが必要です。</target>
        </trans-unit>
        <trans-unit id="dd0679d81994a6f99aa92d35f6d6b0e5281b7e9d" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;\G&lt;/code&gt; anchor in scalar context. You still need the &lt;code&gt;g&lt;/code&gt; modifier.</source>
          <target state="translated">スカラーコンテキストで &lt;code&gt;\G&lt;/code&gt; アンカーを使用することもできます。まだ &lt;code&gt;g&lt;/code&gt; 修飾子が必要です。</target>
        </trans-unit>
        <trans-unit id="8c6b2b4f9f728f0a8f747fc021c92ba0dae0be15" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;open3()&lt;/code&gt; function from &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3&lt;/a&gt;. Benjamin Goldberg provides some sample code:</source>
          <target state="translated">&lt;a href=&quot;IPC::Open3&quot;&gt;IPC :: Open3&lt;/a&gt;から &lt;code&gt;open3()&lt;/code&gt; 関数を使用することもできます。Benjamin Goldbergは、いくつかのサンプルコードを提供しています。</target>
        </trans-unit>
        <trans-unit id="36d5ff0652d0a9cfb0d9a8028ed64cb97f87e026" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;open3()&lt;/code&gt; function from &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt;. Benjamin Goldberg provides some sample code:</source>
          <target state="translated">&lt;a href=&quot;ipc/open3&quot;&gt;IPC :: Open3&lt;/a&gt;から &lt;code&gt;open3()&lt;/code&gt; 関数を使用することもできます。Benjamin Goldbergがいくつかのサンプルコードを提供します。</target>
        </trans-unit>
        <trans-unit id="54c10825a7a9a0e79c4bc9a8acb25f8c895c8d2f" translate="yes" xml:space="preserve">
          <source>You can also use the Unix command mknod(1), or on some systems, mkfifo(1). These may not be in your normal path, though.</source>
          <target state="translated">Unix のコマンド mknod(1)や、いくつかのシステムでは mkfifo(1)を使うこともできます。しかし、これらは通常のパスにはないかもしれません。</target>
        </trans-unit>
        <trans-unit id="d558c8753e7739908d901edc4316bd26afe6b26c" translate="yes" xml:space="preserve">
          <source>You can also use the complement of \b, \B, to specify that there should not be a word boundary.</source>
          <target state="translated">また、\b,\Bの補語を使って、単語の境界があってはならないことを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="94817cf57f637575defe9d34927c35a3c77682d8" translate="yes" xml:space="preserve">
          <source>You can also use the following functions to extract the file header information from Storable images:</source>
          <target state="translated">また、以下の関数を使用してStorable画像からファイルヘッダ情報を抽出することもできます。</target>
        </trans-unit>
        <trans-unit id="621c9d7b846400426f6a8d8885a28fc12414361e" translate="yes" xml:space="preserve">
          <source>You can also write that as a single substitution, although it turns out the combined statement is slower than the separate ones. That might not matter to you, though:</source>
          <target state="translated">また、単一の代入として書くこともできます。しかし、それはあなたにとっては重要ではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="6e736747d1920ca322bb92742d39b47addfde6fe" translate="yes" xml:space="preserve">
          <source>You can also:</source>
          <target state="translated">また、あなたもできます。</target>
        </trans-unit>
        <trans-unit id="9a39342cae5acfdbd6b63da64d2d504d73f599e3" translate="yes" xml:space="preserve">
          <source>You can alter the global variable $Params::Check::NO_DUPLICATES to control whether the &lt;code&gt;store&lt;/code&gt; 'd key will still be present in your result set. See the &lt;a href=&quot;#Global-Variables&quot;&gt;Global Variables&lt;/a&gt; section below.</source>
          <target state="translated">グローバル変数$ Params :: Check :: NO_DUPLICATESを変更して、 &lt;code&gt;store&lt;/code&gt; のキーが結果セットにまだ存在するかどうかを制御できます。以下の&lt;a href=&quot;#Global-Variables&quot;&gt;グローバル変数の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6da0fead206bedaefe0c555de0dec9128299e2e3" translate="yes" xml:space="preserve">
          <source>You can alter the global variable $Params::Check::NO_DUPLICATES to control whether the &lt;code&gt;store&lt;/code&gt;'d key will still be present in your result set. See the &lt;a href=&quot;#Global-Variables&quot;&gt;&quot;Global Variables&quot;&lt;/a&gt; section below.</source>
          <target state="translated">グローバル変数$ Params :: Check :: NO_DUPLICATESを変更して、 &lt;code&gt;store&lt;/code&gt; のdキーが結果セットに引き続き存在するかどうかを制御できます。参照してください。&lt;a href=&quot;#Global-Variables&quot;&gt;「グローバル変数」&lt;/a&gt;以下のセクションを。</target>
        </trans-unit>
        <trans-unit id="330192003f1fea8edf49c86f71523fd9c154de87" translate="yes" xml:space="preserve">
          <source>You can always check the value you're using by printing it in octal notation to ensure it matches what you think it should be. Print it in octal and decimal format:</source>
          <target state="translated">使用している値を8進数で印刷することで、使用している値をいつでも確認することができます。8進数と10進数で印刷します。</target>
        </trans-unit>
        <trans-unit id="ef6c5c0a821b62556c215147b73e29172a7eabfd" translate="yes" xml:space="preserve">
          <source>You can always use an array reference, in curly braces, in place of the name of an array. For example, &lt;code&gt;@{$aref}&lt;/code&gt; instead of &lt;code&gt;@array&lt;/code&gt; .</source>
          <target state="translated">配列の名前の代わりに、中括弧で囲まれた配列参照をいつでも使用できます。たとえば、 &lt;code&gt;@{$aref}&lt;/code&gt; ではなく@ {$ aref} &lt;code&gt;@array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="150541d09f643b30e2058d1e0bade9c15ba89324" translate="yes" xml:space="preserve">
          <source>You can always use an array reference, in curly braces, in place of the name of an array. For example, &lt;code&gt;@{$aref}&lt;/code&gt; instead of &lt;code&gt;@array&lt;/code&gt;.</source>
          <target state="translated">配列の名前の代わりに、中括弧で囲まれた配列参照をいつでも使用できます。たとえば、 &lt;code&gt;@{$aref}&lt;/code&gt; 代わりに@ {$ aref}を &lt;code&gt;@array&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="7165a3ffe3314c6d01e5a6307c924382d3b64487" translate="yes" xml:space="preserve">
          <source>You can arrange for a callback to be run just before the &lt;a href=&quot;#die-LIST&quot;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; does its deed, by setting the &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&lt;code&gt;$SIG{__DIE__}&lt;/code&gt;&lt;/a&gt; hook. The associated handler is called with the exception as an argument, and can change the exception, if it sees fit, by calling &lt;a href=&quot;#die-LIST&quot;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; again. See &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&quot;%SIG&quot; in perlvar&lt;/a&gt; for details on setting &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&lt;code&gt;%SIG&lt;/code&gt;&lt;/a&gt; entries, and &lt;a href=&quot;#eval-EXPR&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; for some examples. Although this feature was to be run only right before your program was to exit, this is not currently so: the &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&lt;code&gt;$SIG{__DIE__}&lt;/code&gt;&lt;/a&gt; hook is currently called even inside &lt;a href=&quot;#eval-EXPR&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;ed blocks/strings! If one wants the hook to do nothing in such situations, put</source>
          <target state="translated">&lt;a href=&quot;perlvar#%25SIG&quot;&gt; &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; &lt;/a&gt;フックを設定することにより、&lt;a href=&quot;#die-LIST&quot;&gt; &lt;code&gt;die&lt;/code&gt; &lt;/a&gt;がその行為を行う直前にコールバックが実行されるように調整できます。関連付けられたハンドラーは、例外を引数として呼び出され、適切であると判断された場合は、&lt;a href=&quot;#die-LIST&quot;&gt; &lt;code&gt;die&lt;/code&gt; を&lt;/a&gt;再度呼び出すことで例外を変更できます。参照&lt;a href=&quot;perlvar#%25SIG&quot;&gt;はperlvar中の「％SIG」&lt;/a&gt;の設定の詳細については、&lt;a href=&quot;perlvar#%25SIG&quot;&gt; &lt;code&gt;%SIG&lt;/code&gt; &lt;/a&gt;エントリを、そして&lt;a href=&quot;#eval-EXPR&quot;&gt; &lt;code&gt;eval&lt;/code&gt; の&lt;/a&gt;いくつかの例のために。この機能は、プログラムが終了する直前にのみ実行される予定でしたが、現在はそうではありません。現在、&lt;a href=&quot;#eval-EXPR&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;ブロック/文字列内でも&lt;a href=&quot;perlvar#%25SIG&quot;&gt; &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; &lt;/a&gt;フックが呼び出されています。そのような状況でフックに何もさせたくない場合は、</target>
        </trans-unit>
        <trans-unit id="4754996a46b2974a193b45735bde04e1ddad5927" translate="yes" xml:space="preserve">
          <source>You can arrange for a callback to be run just before the &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; does its deed, by setting the &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; hook. The associated handler is called with the error text and can change the error message, if it sees fit, by calling &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; again. See &lt;a href=&quot;../perlvar#%25SIG&quot;&gt;%SIG in perlvar&lt;/a&gt; for details on setting &lt;code&gt;%SIG&lt;/code&gt; entries, and &lt;a href=&quot;#eval-BLOCK&quot;&gt;eval BLOCK&lt;/a&gt; for some examples. Although this feature was to be run only right before your program was to exit, this is not currently so: the &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; hook is currently called even inside eval()ed blocks/strings! If one wants the hook to do nothing in such situations, put</source>
          <target state="translated">&lt;code&gt;$SIG{__DIE__}&lt;/code&gt; フックを設定することにより、 &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; が実行する直前にコールバックが実行されるように調整できます。関連するハンドラーはエラーテキストとともに呼び出され、適切であると判断した場合は、もう一度 &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を呼び出すことでエラーメッセージを変更できます。参照&lt;a href=&quot;../perlvar#%25SIG&quot;&gt;はperlvarの％SIGの&lt;/a&gt;設定の詳細については、 &lt;code&gt;%SIG&lt;/code&gt; エントリ、と&lt;a href=&quot;#eval-BLOCK&quot;&gt;はeval BLOCKを&lt;/a&gt;いくつかの例について。この機能はプログラムが終了する直前にのみ実行される予定でしたが、現在はそうではありません。 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; フックは現在eval（）されたブロック/文字列内でも呼び出されます！そのような状況でフックが何もしないようにしたい場合は、</target>
        </trans-unit>
        <trans-unit id="6d6ebe42604b8b630167882d7abe0a8f91ccbdb6" translate="yes" xml:space="preserve">
          <source>You can arrange for a callback to be run just before the &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; does its deed, by setting the &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; hook. The associated handler is called with the error text and can change the error message, if it sees fit, by calling &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; again. See &lt;a href=&quot;perlvar#%25SIG&quot;&gt;%SIG in perlvar&lt;/a&gt; for details on setting &lt;code&gt;%SIG&lt;/code&gt; entries, and &lt;a href=&quot;#eval-BLOCK&quot;&gt;eval BLOCK&lt;/a&gt; for some examples. Although this feature was to be run only right before your program was to exit, this is not currently so: the &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; hook is currently called even inside eval()ed blocks/strings! If one wants the hook to do nothing in such situations, put</source>
          <target state="translated">&lt;code&gt;$SIG{__DIE__}&lt;/code&gt; フックを設定することにより、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; が実行する直前にコールバックが実行されるように調整できます。関連するハンドラーはエラーテキストとともに呼び出され、適切であると判断した場合は、もう一度 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を呼び出すことでエラーメッセージを変更できます。参照&lt;a href=&quot;perlvar#%25SIG&quot;&gt;はperlvarの％SIGの&lt;/a&gt;設定の詳細については、 &lt;code&gt;%SIG&lt;/code&gt; エントリ、と&lt;a href=&quot;#eval-BLOCK&quot;&gt;はeval BLOCKを&lt;/a&gt;いくつかの例について。この機能はプログラムが終了する直前にのみ実行される予定でしたが、現在はそうではありません。 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; フックは現在eval（）されたブロック/文字列内でも呼び出されます！そのような状況でフックが何もしないようにしたい場合は、</target>
        </trans-unit>
        <trans-unit id="b111cf2dc7e21ab63d8886219ae9103dbe8e5745" translate="yes" xml:space="preserve">
          <source>You can ask &lt;code&gt;prove&lt;/code&gt; to remember the state of previous test runs and select and/or order the tests to be run based on that saved state.</source>
          <target state="translated">以前のテスト実行の状態を覚えている &lt;code&gt;prove&lt;/code&gt; を証明してもらい、その保存された状態に基づいて実行するテストを選択または注文できます。</target>
        </trans-unit>
        <trans-unit id="691310b760f2429354c31b938255b9b2f1fdb135" translate="yes" xml:space="preserve">
          <source>You can avoid this by using a bracketed character class in the lookbehind assertion, like</source>
          <target state="translated">これは、lookbehind アサーションで中括弧付きの文字クラスを使用することで回避できます。</target>
        </trans-unit>
        <trans-unit id="291f7b02019a89ab9c5bae1789127ea82bbc5201" translate="yes" xml:space="preserve">
          <source>You can break circular references by creating a &quot;weak reference&quot;. A weak reference does not increment the reference count for a variable, which means that the object can go out of scope and be destroyed. You can weaken a reference with the &lt;code&gt;weaken&lt;/code&gt; function exported by the &lt;a href=&quot;Scalar::Util&quot;&gt;Scalar::Util&lt;/a&gt; module.</source>
          <target state="translated">「弱い参照」を作成することにより、循環参照を壊すことができます。弱参照は変数の参照カウントをインクリメントしません。つまり、オブジェクトはスコープ外に出て破棄される可能性があります。あなたはして参照を弱めることができ &lt;code&gt;weaken&lt;/code&gt; ことにより、エクスポートされた関数&lt;a href=&quot;Scalar::Util&quot;&gt;スカラー:: Utilのの&lt;/a&gt;モジュール。</target>
        </trans-unit>
        <trans-unit id="5be6ec0673c2462bb7fe8ce793fcded60eef0f18" translate="yes" xml:space="preserve">
          <source>You can break circular references by creating a &quot;weak reference&quot;. A weak reference does not increment the reference count for a variable, which means that the object can go out of scope and be destroyed. You can weaken a reference with the &lt;code&gt;weaken&lt;/code&gt; function exported by the &lt;a href=&quot;scalar/util&quot;&gt;Scalar::Util&lt;/a&gt; module.</source>
          <target state="translated">「弱い参照」を作成すると、循環参照を解除できます。弱い参照は変数の参照カウントをインクリメントしません。つまり、オブジェクトがスコープ外になり、破棄される可能性があります。あなたはして参照を弱めることができ &lt;code&gt;weaken&lt;/code&gt; ことにより、エクスポートされた関数&lt;a href=&quot;scalar/util&quot;&gt;スカラー:: Utilのの&lt;/a&gt;モジュール。</target>
        </trans-unit>
        <trans-unit id="7b50c9286c4042666f0e26f5a3f4bc1fff06eaf5" translate="yes" xml:space="preserve">
          <source>You can call the perl visible subroutine something other than &lt;code&gt;constant&lt;/code&gt; if you give the parameter</source>
          <target state="translated">パラメータを指定すると、perl visibleサブルーチンを &lt;code&gt;constant&lt;/code&gt; 以外のものと呼ぶことができます</target>
        </trans-unit>
        <trans-unit id="03c6b44929e8d300ef044fa7166e3c54539d868d" translate="yes" xml:space="preserve">
          <source>You can capture its numeric and string content using:</source>
          <target state="translated">を使用して、その数値や文字列の内容をキャプチャすることができます。</target>
        </trans-unit>
        <trans-unit id="596d44f0dc27aeca16b120bcaf752ef2dfa99248" translate="yes" xml:space="preserve">
          <source>You can categorize these CES by 3 criteria: size of each character, endianness, and Byte Order Mark.</source>
          <target state="translated">これらのCESは、各文字の大きさ、エンディアン度、バイトオーダーマークの3つの基準で分類することができます。</target>
        </trans-unit>
        <trans-unit id="4b8f84adbeec6314eab49fb83df65b6443839d6c" translate="yes" xml:space="preserve">
          <source>You can cause characters that normally function as metacharacters to be interpreted literally by prefixing them with a &lt;code&gt;&quot;\&quot;&lt;/code&gt;, just like the pattern's delimiter must be escaped if it also occurs within the pattern. Thus, &lt;code&gt;&quot;\.&quot;&lt;/code&gt; matches just a literal dot, &lt;code&gt;&quot;.&quot;&lt;/code&gt; instead of its normal meaning. This means that the backslash is also a metacharacter, so &lt;code&gt;&quot;\\&quot;&lt;/code&gt; matches a single &lt;code&gt;&quot;\&quot;&lt;/code&gt;. And a sequence that contains an escaped metacharacter matches the same sequence (but without the escape) in the target string. So, the pattern &lt;code&gt;/blur\\fl/&lt;/code&gt; would match any target string that contains the sequence &lt;code&gt;&quot;blur\fl&quot;&lt;/code&gt;.</source>
          <target state="translated">通常はメタ文字として機能する文字の前に &lt;code&gt;&quot;\&quot;&lt;/code&gt; を付けることで、文字通りに解釈させることができます。これは、パターン内でも発生する場合は、パターンの区切り文字をエスケープする必要があるのと同じです。したがって、 &lt;code&gt;&quot;\.&quot;&lt;/code&gt; リテラルドット &lt;code&gt;&quot;.&quot;&lt;/code&gt; のみ一致します。その通常の意味の代わりに。これは、円記号もメタ文字であるため、 &lt;code&gt;&quot;\\&quot;&lt;/code&gt; は単一の &lt;code&gt;&quot;\&quot;&lt;/code&gt; 一致することを意味します。また、エスケープされたメタ文字を含むシーケンスは、ターゲット文字列内の同じシーケンスに一致します（ただしエスケープは含まれません）。したがって、パターン &lt;code&gt;/blur\\fl/&lt;/code&gt; は、シーケンス &lt;code&gt;&quot;blur\fl&quot;&lt;/code&gt; を含むすべてのターゲット文字列に一致します。</target>
        </trans-unit>
        <trans-unit id="6b889973d01196115807ed3e24800abe92e6ed58" translate="yes" xml:space="preserve">
          <source>You can change an array element, but you can't change a list element:</source>
          <target state="translated">配列の要素は変更できますが、リストの要素は変更できません。</target>
        </trans-unit>
        <trans-unit id="d178a91245c223a6b3d558a26825e4086182ea75" translate="yes" xml:space="preserve">
          <source>You can change both the effective gid and the real gid at the same time by using &lt;code&gt;POSIX::setgid()&lt;/code&gt; (use only a single numeric argument). Changes to &lt;code&gt;$)&lt;/code&gt; require a check to &lt;code&gt;$!&lt;/code&gt; to detect any possible errors after an attempted change.</source>
          <target state="translated">&lt;code&gt;POSIX::setgid()&lt;/code&gt; 使用すると、有効なgidと実際のgidの両方を同時に変更できます（単一の数値引数のみを使用）。 &lt;code&gt;$)&lt;/code&gt; への変更は$へのチェックが必要です &lt;code&gt;$!&lt;/code&gt; 変更を試みた後に起こり得るエラーを検出するため。</target>
        </trans-unit>
        <trans-unit id="59d9719ad7d1133b142fc0ce7a1557db385a25a2" translate="yes" xml:space="preserve">
          <source>You can change both the effective uid and the real uid at the same time by using &lt;code&gt;POSIX::setuid()&lt;/code&gt; . Changes to &lt;code&gt;$&amp;gt;&lt;/code&gt; require a check to &lt;code&gt;$!&lt;/code&gt; to detect any possible errors after an attempted change.</source>
          <target state="translated">&lt;code&gt;POSIX::setuid()&lt;/code&gt; を使用すると、有効なuidと実際のuidの両方を同時に変更できます。 &lt;code&gt;$&amp;gt;&lt;/code&gt; への変更には、 &lt;code&gt;$!&lt;/code&gt; へのチェックが必要です。変更を試みた後に起こり得るエラーを検出するため。</target>
        </trans-unit>
        <trans-unit id="5c077fd437c354bc24be98de6cf2487d02c8a685" translate="yes" xml:space="preserve">
          <source>You can change both the effective uid and the real uid at the same time by using &lt;code&gt;POSIX::setuid()&lt;/code&gt;. Changes to &lt;code&gt;$&amp;gt;&lt;/code&gt; require a check to &lt;code&gt;$!&lt;/code&gt; to detect any possible errors after an attempted change.</source>
          <target state="translated">&lt;code&gt;POSIX::setuid()&lt;/code&gt; を使用して、有効なuidと実際のuidの両方を同時に変更できます。 &lt;code&gt;$&amp;gt;&lt;/code&gt; を変更するには、$をチェックする必要があります &lt;code&gt;$!&lt;/code&gt; 変更を試みた後に発生する可能性のあるエラーを検出します。</target>
        </trans-unit>
        <trans-unit id="57121de58d74f1a64c5b126aeda69842259d90c4" translate="yes" xml:space="preserve">
          <source>You can change both the real gid and the effective gid at the same time by using &lt;code&gt;POSIX::setgid()&lt;/code&gt; . Changes to &lt;code&gt;$(&lt;/code&gt; require a check to &lt;code&gt;$!&lt;/code&gt; to detect any possible errors after an attempted change.</source>
          <target state="translated">&lt;code&gt;POSIX::setgid()&lt;/code&gt; を使用して、実際のgidと有効なgidの両方を同時に変更できます。 &lt;code&gt;$(&lt;/code&gt; への変更は、変更を試みた後に起こり得るエラーを検出するために &lt;code&gt;$!&lt;/code&gt; へのチェックを必要とします。</target>
        </trans-unit>
        <trans-unit id="11e8003bdfd58a10a9ce8d2ff75b8afc3ab5c059" translate="yes" xml:space="preserve">
          <source>You can change both the real gid and the effective gid at the same time by using &lt;code&gt;POSIX::setgid()&lt;/code&gt;. Changes to &lt;code&gt;$(&lt;/code&gt; require a check to &lt;code&gt;$!&lt;/code&gt; to detect any possible errors after an attempted change.</source>
          <target state="translated">&lt;code&gt;POSIX::setgid()&lt;/code&gt; を使用して、実際のgidと有効なgidの両方を同時に変更できます。 &lt;code&gt;$(&lt;/code&gt; への変更は、変更の試行後に発生する可能性のあるエラーを検出するために &lt;code&gt;$!&lt;/code&gt; へのチェックが必要です。</target>
        </trans-unit>
        <trans-unit id="b09c5405e2b602271ef0ef2f3017aa480c6d1079" translate="yes" xml:space="preserve">
          <source>You can change options from</source>
          <target state="translated">からオプションを変更することができます。</target>
        </trans-unit>
        <trans-unit id="d6315b4e978f53eeff4964ee1909c618fbc90cfa" translate="yes" xml:space="preserve">
          <source>You can change the underlying module that does the low-level math operations by using:</source>
          <target state="translated">を使用して、低レベルの数学演算を行う基礎となるモジュールを変更することができます。</target>
        </trans-unit>
        <trans-unit id="ac0967b2c568b641678650e45e2b539ad81b2c7d" translate="yes" xml:space="preserve">
          <source>You can change this backend library by using:</source>
          <target state="translated">このバックエンドライブラリは、以下のようにして変更することができます。</target>
        </trans-unit>
        <trans-unit id="e271d7bee0eb9af50859c996a87b147d97ca08b1" translate="yes" xml:space="preserve">
          <source>You can change this by using:</source>
          <target state="translated">を使って変更することができます。</target>
        </trans-unit>
        <trans-unit id="a8c0aadd56b5a3424b47f02ac266fd1fef206d7e" translate="yes" xml:space="preserve">
          <source>You can check the values of these variables on your system with</source>
          <target state="translated">これらの変数の値は、システム上で</target>
        </trans-unit>
        <trans-unit id="19186d4d2aa107ae87a9009974a30d3e15b94cd1" translate="yes" xml:space="preserve">
          <source>You can choose if you want to always install (yes), never install (no) or be always asked. In the latter case you can set the default answer for the question to yes (ask/yes) or no (ask/no).</source>
          <target state="translated">常にインストールする (yes)、インストールしない (no)、または常に質問されるかどうかを選択できます。後者の場合、質問のデフォルトの答えを yes (尋ねる/yes)または no (尋ねる/no)に設定することができます。</target>
        </trans-unit>
        <trans-unit id="432283768bc5fcc2cbc19482faa7326a0cb0200d" translate="yes" xml:space="preserve">
          <source>You can compare $s1 and $s2 above with</source>
          <target state="translated">上記の$s1と$s2で比較してみてください。</target>
        </trans-unit>
        <trans-unit id="5cd28c9babbe3b0c5cce52c7e8b6bd3de247f8a7" translate="yes" xml:space="preserve">
          <source>You can compile a special debugging version of Perl, which allows you to use the &lt;code&gt;-D&lt;/code&gt; option of Perl to tell more about what Perl is doing. But sometimes there is no alternative than to dive in with a debugger, either to see the stack trace of a core dump (very useful in a bug report), or trying to figure out what went wrong before the core dump happened, or how did we end up having wrong or unexpected results.</source>
          <target state="translated">特別なデバッグバージョンのPerlをコンパイルできます。これにより、Perl の &lt;code&gt;-D&lt;/code&gt; オプションを使用して、Perlが何をしているかをさらに詳しく知ることができます。ただし、コアダンプのスタックトレースを確認する（バグレポートで非常に役立つ）か、コアダンプが発生する前に問題が発生したか、またはどのように実行したかを把握するために、デバッガーを使用する以外に方法がない場合があります。誤った結果や予期しない結果が生じることになります。</target>
        </trans-unit>
        <trans-unit id="87041007fca4b20217db14f0fb86e591cf75c1a4" translate="yes" xml:space="preserve">
          <source>You can compile perl as a universal binary (built for both ppc and intel). In Mac OS X 10.4 &quot;Tiger&quot;, you must export the 'u' variant of the SDK:</source>
          <target state="translated">(ppcとintelの両方のために作られた)ユニバーサルバイナリとしてPerlをコンパイルすることができます。Mac OS X 10.4 &quot;Tiger&quot; では、SDK の 'u' バリアントをエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="fa58ab427e59cc304b800becf278713e2a473dc4" translate="yes" xml:space="preserve">
          <source>You can compute spherical distances, called &lt;b&gt;great circle distances&lt;/b&gt;, by importing the great_circle_distance() function:</source>
          <target state="translated">great_circle_distance（）関数をインポートすることにより、&lt;b&gt;大圏距離&lt;/b&gt;と呼ばれる球面距離を計算できます。</target>
        </trans-unit>
        <trans-unit id="e0e56eaab18c95d9fc59dbbcb6020dceb739e042" translate="yes" xml:space="preserve">
          <source>You can configure &lt;code&gt;CPAN.pm&lt;/code&gt; to automatically use this option too:</source>
          <target state="translated">このオプションを自動的に使用するように &lt;code&gt;CPAN.pm&lt;/code&gt; を構成することもできます。</target>
        </trans-unit>
        <trans-unit id="0a61232f0a79e5aed1425905026fb34cb9f7fecb" translate="yes" xml:space="preserve">
          <source>You can consult &lt;a href=&quot;http://dev.perl.org/perl5&quot;&gt;releases&lt;/a&gt; to determine the current stable release of Perl.</source>
          <target state="translated">&lt;a href=&quot;http://dev.perl.org/perl5&quot;&gt;リリース&lt;/a&gt;を参照して、Perlの現在の安定したリリースを確認できます。</target>
        </trans-unit>
        <trans-unit id="2a1c9e7ff6eff00a8559dcb5573a19d0be7a958f" translate="yes" xml:space="preserve">
          <source>You can control the maximum array and hash recursion depths by modifying &lt;code&gt;$Storable::recursion_limit&lt;/code&gt; and &lt;code&gt;$Storable::recursion_limit_hash&lt;/code&gt; respectively. Either can be set to &lt;code&gt;-1&lt;/code&gt; to prevent any depth checks, though this isn't recommended.</source>
          <target state="translated">&lt;code&gt;$Storable::recursion_limit&lt;/code&gt; と &lt;code&gt;$Storable::recursion_limit_hash&lt;/code&gt; それぞれ変更することで、配列とハッシュの最大再帰深度を制御できます。どちらも &lt;code&gt;-1&lt;/code&gt; に設定して、深度チェックを防ぐことができますが、これはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="0f34654d1547e79b58fc6ed76c2c867b2e4c13c5" translate="yes" xml:space="preserve">
          <source>You can control which DBM library you use by loading that library before you call &lt;a href=&quot;#dbmopen-HASH%2CDBNAME%2CMASK&quot;&gt;&lt;code&gt;dbmopen&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#dbmopen-HASH%2CDBNAME%2CMASK&quot;&gt; &lt;code&gt;dbmopen&lt;/code&gt; &lt;/a&gt;を呼び出す前にそのライブラリをロードすることにより、使用するDBMライブラリを制御できます。</target>
        </trans-unit>
        <trans-unit id="2d461022ba384996bf77747145dbd16f78eb1d3d" translate="yes" xml:space="preserve">
          <source>You can control which DBM library you use by loading that library before you call dbmopen():</source>
          <target state="translated">dbmopen()を呼び出す前にそのライブラリをロードすることで、どのDBMライブラリを使用するかを制御することができます。</target>
        </trans-unit>
        <trans-unit id="b63a08beb712c643691cdd9c1e77329f30769a82" translate="yes" xml:space="preserve">
          <source>You can create endless loops if the things you serialize via freeze() (for instance) point back to the object we're trying to serialize in the hook.</source>
          <target state="translated">(例えば)freeze()でシリアライズしたものが、フックでシリアライズしようとしているオブジェクトを指すようにすれば、無限ループを作ることができます。</target>
        </trans-unit>
        <trans-unit id="adf4a1b481a315cc2b37fc68aeedf4fc3bec4612" translate="yes" xml:space="preserve">
          <source>You can create your own names for characters, and override official ones when using &lt;code&gt;\N{...}&lt;/code&gt;. See &lt;a href=&quot;charnames#CUSTOM-ALIASES&quot;&gt;&quot;CUSTOM ALIASES&quot; in charnames&lt;/a&gt;.</source>
          <target state="translated">文字に独自の名前を作成し、 &lt;code&gt;\N{...}&lt;/code&gt; を使用するときに正式な名前を上書きできます。&lt;a href=&quot;charnames#CUSTOM-ALIASES&quot;&gt;charnamesの「CUSTOMALIASES」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="146fea6b6c62fcc84c6add6c6816ffff9347ea9e" translate="yes" xml:space="preserve">
          <source>You can define for all tie types an UNTIE method that will be called at untie(). See &lt;a href=&quot;#The-untie-Gotcha&quot;&gt;&quot;The &lt;code&gt;untie&lt;/code&gt; Gotcha&quot;&lt;/a&gt; below.</source>
          <target state="translated">すべてのタイタイプに対して、untie（）で呼び出されるUNTIEメソッドを定義できます。参照&lt;a href=&quot;#The-untie-Gotcha&quot;&gt;「 &lt;code&gt;untie&lt;/code&gt; ガッチャ」&lt;/a&gt;以下を。</target>
        </trans-unit>
        <trans-unit id="8cc300aa058401f33bcdc1d74e140c0960d7fa90" translate="yes" xml:space="preserve">
          <source>You can define for all tie types an UNTIE method that will be called at untie(). See &lt;a href=&quot;#The-untie-Gotcha&quot;&gt;The untie Gotcha&lt;/a&gt; below.</source>
          <target state="translated">すべてのタイタイプに対して、untie（）で呼び出されるUNTIEメソッドを定義できます。以下&lt;a href=&quot;#The-untie-Gotcha&quot;&gt;のuntie Gotchaを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cd22b39009d785c43f4f9453185f24b021494e27" translate="yes" xml:space="preserve">
          <source>You can define your own binary character properties by defining subroutines whose names begin with &lt;code&gt;&quot;In&quot;&lt;/code&gt; or &lt;code&gt;&quot;Is&quot;&lt;/code&gt; . (The experimental feature &lt;a href=&quot;perlre#(%3f%5b-%5d)&quot;&gt;(?[ ]) in perlre&lt;/a&gt; provides an alternative which allows more complex definitions.) The subroutines can be defined in any package. The user-defined properties can be used in the regular expression &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; constructs; if you are using a user-defined property from a package other than the one you are in, you must specify its package in the &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; construct.</source>
          <target state="translated">名前が &lt;code&gt;&quot;In&quot;&lt;/code&gt; または &lt;code&gt;&quot;Is&quot;&lt;/code&gt; で始まるサブルーチンを定義することにより、独自のバイナリ文字プロパティを定義できます。 （&lt;a href=&quot;perlre#(%3f%5b-%5d)&quot;&gt;perlre&lt;/a&gt;の実験的機能（？[]）は、より複雑な定義を可能にする代替手段を提供します。）サブルーチンは、任意のパッケージで定義できます。ユーザー定義プロパティは、正規表現 &lt;code&gt;\p{}&lt;/code&gt; および &lt;code&gt;\P{}&lt;/code&gt; 構成で使用できます。現在のパッケージ以外のパッケージのユーザー定義プロパティを使用している場合は、 &lt;code&gt;\p{}&lt;/code&gt; または &lt;code&gt;\P{}&lt;/code&gt; 構成でそのパッケージを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="581b021633b88b8ca77368d47883217c97fc358f" translate="yes" xml:space="preserve">
          <source>You can define your own binary character properties by defining subroutines whose names begin with &lt;code&gt;&quot;In&quot;&lt;/code&gt; or &lt;code&gt;&quot;Is&quot;&lt;/code&gt;. (The experimental feature &lt;a href=&quot;perlre#%28%3F%5B-%5D%29&quot;&gt;&quot;(?[ ])&quot; in perlre&lt;/a&gt; provides an alternative which allows more complex definitions.) The subroutines can be defined in any package. They override any Unicode properties expressed as the same names. The user-defined properties can be used in the regular expression &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; constructs; if you are using a user-defined property from a package other than the one you are in, you must specify its package in the &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; construct.</source>
          <target state="translated">名前が &lt;code&gt;&quot;In&quot;&lt;/code&gt; または &lt;code&gt;&quot;Is&quot;&lt;/code&gt; 始まるサブルーチンを定義することにより、独自のバイナリ文字プロパティを定義できます。 （&lt;a href=&quot;perlre#%28%3F%5B-%5D%29&quot;&gt;perlre&lt;/a&gt;の実験的な機能&quot;（？[]）&quot;は、より複雑な定義を可能にする代替手段を提供します。）サブルーチンは任意のパッケージで定義できます。これらは、同じ名前で表現されたUnicodeプロパティを上書きします。ユーザー定義のプロパティは、正規表現 &lt;code&gt;\p{}&lt;/code&gt; および &lt;code&gt;\P{}&lt;/code&gt; 構造で使用できます。使用しているパッケージ以外のパッケージのユーザー定義プロパティを使用している場合は、そのパッケージを &lt;code&gt;\p{}&lt;/code&gt; または &lt;code&gt;\P{}&lt;/code&gt; 構造で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2ea972cce46eda2a3f1a7af312987a64fafa63f8" translate="yes" xml:space="preserve">
          <source>You can define your own character properties and use them in the regular expression with the &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; construct. See &lt;a href=&quot;#User-Defined-Character-Properties&quot;&gt;&quot;User-Defined Character Properties&quot;&lt;/a&gt; for more details.</source>
          <target state="translated">独自の文字プロパティを定義し、 &lt;code&gt;\p{}&lt;/code&gt; または &lt;code&gt;\P{}&lt;/code&gt; 構文を使用して正規表現で使用できます。詳細については、&lt;a href=&quot;#User-Defined-Character-Properties&quot;&gt;「ユーザー定義の文字プロパティ」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="107745b2e3d0c30dbe6a28beb79e3db6db75115c" translate="yes" xml:space="preserve">
          <source>You can define your own character properties and use them in the regular expression with the &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; construct. See &lt;a href=&quot;#User-Defined-Character-Properties&quot;&gt;User-Defined Character Properties&lt;/a&gt; for more details.</source>
          <target state="translated">独自の文字プロパティを定義し、 &lt;code&gt;\p{}&lt;/code&gt; または &lt;code&gt;\P{}&lt;/code&gt; 構成を使用して正規表現で使用できます。詳細については、&lt;a href=&quot;#User-Defined-Character-Properties&quot;&gt;ユーザー定義の文字プロパティ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d07e5c5285c0856948c6976c6c8552f314a8bd96" translate="yes" xml:space="preserve">
          <source>You can define your own custom character classes, by putting into your pattern in the appropriate place(s), a list of all the characters you want in the set. You do this by enclosing the list within &lt;code&gt;[]&lt;/code&gt; bracket characters. These are called &quot;bracketed character classes&quot; when we are being precise, but often the word &quot;bracketed&quot; is dropped. (Dropping it usually doesn't cause confusion.) This means that the &lt;code&gt;&quot;[&quot;&lt;/code&gt; character is another metacharacter. It doesn't match anything just by itself; it is used only to tell Perl that what follows it is a bracketed character class. If you want to match a literal left square bracket, you must escape it, like &lt;code&gt;&quot;\[&quot;&lt;/code&gt;. The matching &lt;code&gt;&quot;]&quot;&lt;/code&gt; is also a metacharacter; again it doesn't match anything by itself, but just marks the end of your custom class to Perl. It is an example of a &quot;sometimes metacharacter&quot;. It isn't a metacharacter if there is no corresponding &lt;code&gt;&quot;[&quot;&lt;/code&gt;, and matches its literal self:</source>
          <target state="translated">セットに必要なすべての文字のリストを適切な場所にパターンに配置することで、独自のカスタム文字クラスを定義できます。これを行うには、リストを &lt;code&gt;[]&lt;/code&gt; 角かっこで囲みます。正確に言うと、これらは「括弧で囲まれた文字クラス」と呼ばれますが、「括弧で囲まれた」という単語はしばしば削除されます。 （通常、ドロップしても混乱は発生しません。）これは、 &lt;code&gt;&quot;[&quot;&lt;/code&gt; 文字が別のメタ文字であることを意味します。それだけでは何にも一致しません。これは、その後に括弧で囲まれた文字クラスであることをPerlに伝えるためにのみ使用されます。リテラルの左角括弧と一致させる場合は、 &lt;code&gt;&quot;\[&quot;&lt;/code&gt; ようにエスケープする必要があります。一致する &lt;code&gt;&quot;]&quot;&lt;/code&gt; メタ文字でもあります。繰り返しますが、それ自体は何にも一致しませんが、カスタムクラスの終わりをPerlにマークするだけです。これは「時々メタ文字」の例です。対応する &lt;code&gt;&quot;[&quot;&lt;/code&gt; がない場合はメタ文字ではなく、そのリテラルの自己と一致します。</target>
        </trans-unit>
        <trans-unit id="9472dcd36f94375050dea75545931297e23f500b" translate="yes" xml:space="preserve">
          <source>You can detect the OS mode using &quot;isainfo -v&quot;, e.g.</source>
          <target state="translated">OSのモードは &quot;isainfo -v &quot;を使って検出することができます。</target>
        </trans-unit>
        <trans-unit id="ac56709f3e046a38d3f4f58f4d03fe93d1a1a7f4" translate="yes" xml:space="preserve">
          <source>You can determine your system endianness with this incantation:</source>
          <target state="translated">この呪文で自分のシステムのエンディアン性を見極めることができます。</target>
        </trans-unit>
        <trans-unit id="d720ebfa9c94db62cff235f1fc566ea523fe6220" translate="yes" xml:space="preserve">
          <source>You can directly disable thread support with one of the following:</source>
          <target state="translated">以下のいずれかの方法でスレッドサポートを直接無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="5e10ee4faf1824e9c84d1fdce76b93c2ae5f9fd0" translate="yes" xml:space="preserve">
          <source>You can disable &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; resets on fail with the &lt;code&gt;c&lt;/code&gt; flag, documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlreref&quot;&gt;perlreref&lt;/a&gt;. Subsequent matches start where the last successful match ended (the value of &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt;) even if a match on the same string has failed in the meantime. In this case, the match after the &lt;code&gt;while()&lt;/code&gt; loop starts at the &lt;code&gt;a&lt;/code&gt; (where the last match stopped), and since it does not use any anchor it can skip over the &lt;code&gt;a&lt;/code&gt; to find &lt;code&gt;44&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;と&lt;a href=&quot;perlreref&quot;&gt;perlrerefに&lt;/a&gt;記載されている &lt;code&gt;c&lt;/code&gt; フラグを使用して、失敗時に &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; リセットを無効にすることができます。同じ文字列の一致がその間に失敗した場合でも、後続の一致は、最後に成功した一致が終了した場所（ &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; の値）から始まります。この場合、 &lt;code&gt;while()&lt;/code&gt; ループの後の一致は &lt;code&gt;a&lt;/code&gt; （最後の一致が停止した場所）から始まり、アンカーを使用しないため、 &lt;code&gt;a&lt;/code&gt; をスキップして &lt;code&gt;44&lt;/code&gt; を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="762ba82b0f7c5bd42e2bb3f028578d05bfa6f570" translate="yes" xml:space="preserve">
          <source>You can disable &lt;code&gt;pos()&lt;/code&gt; resets on fail with the &lt;code&gt;c&lt;/code&gt; modifier, documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlreref&quot;&gt;perlreref&lt;/a&gt;. Subsequent matches start where the last successful match ended (the value of &lt;code&gt;pos()&lt;/code&gt;) even if a match on the same string has failed in the meantime. In this case, the match after the &lt;code&gt;while()&lt;/code&gt; loop starts at the &lt;code&gt;a&lt;/code&gt; (where the last match stopped), and since it does not use any anchor it can skip over the &lt;code&gt;a&lt;/code&gt; to find &lt;code&gt;44&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;および&lt;a href=&quot;perlreref&quot;&gt;perlrerefに&lt;/a&gt;記載されている &lt;code&gt;c&lt;/code&gt; 修飾子を使用して、失敗時に &lt;code&gt;pos()&lt;/code&gt; リセットを無効にすることができます。後続の一致は、同じ文字列での一致がその間に失敗した場合でも、最後に成功した一致が終了した場所（ &lt;code&gt;pos()&lt;/code&gt; の値）から開始されます。この場合、 &lt;code&gt;while()&lt;/code&gt; ループの後の一致は &lt;code&gt;a&lt;/code&gt; （最後の一致が停止した場所）で始まり、アンカーを使用しないため、 &lt;code&gt;a&lt;/code&gt; をスキップして &lt;code&gt;44&lt;/code&gt; を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="458912b1d0d0c5a77d13c3e7ffc4ddad22f59daf" translate="yes" xml:space="preserve">
          <source>You can dispense with numbers altogether and create named capture groups. The notation is &lt;code&gt;(?&amp;lt;&lt;i&gt;name&lt;/i&gt;&amp;gt;...)&lt;/code&gt; to declare and &lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; to reference. (To be compatible with .Net regular expressions, &lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; may also be written as &lt;code&gt;\k{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt;, &lt;code&gt;\k&amp;lt;&lt;i&gt;name&lt;/i&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;\k'&lt;i&gt;name&lt;/i&gt;'&lt;/code&gt;.)</source>
          <target state="translated">番号をすべて省略して、名前付きのキャプチャグループを作成できます。表記は &lt;code&gt;(?&amp;lt;&lt;i&gt;name&lt;/i&gt;&amp;gt;...)&lt;/code&gt; で宣言し、 &lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; で参照します。（.Net正規表現と互換性を持たせるために、 &lt;code&gt;\g{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; は &lt;code&gt;\k{&lt;i&gt;name&lt;/i&gt;}&lt;/code&gt; 、 &lt;code&gt;\k&amp;lt;&lt;i&gt;name&lt;/i&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;\k'&lt;i&gt;name&lt;/i&gt;'&lt;/code&gt; としても記述できます。）</target>
        </trans-unit>
        <trans-unit id="b18d3c8d444331784ad87d0c9066604ce83188e2" translate="yes" xml:space="preserve">
          <source>You can do a similar thing with the value of &lt;code&gt;$0&lt;/code&gt; , which holds the script name. That might hold a relative path, but &lt;code&gt;rel2abs&lt;/code&gt; can turn it into an absolute path. Once you have the</source>
          <target state="translated">スクリプト名を保持する &lt;code&gt;$0&lt;/code&gt; の値でも同様のことができます。それは相対パスを保持するかもしれませんが、 &lt;code&gt;rel2abs&lt;/code&gt; はそれを絶対パスに変えることができます。あなたが持ったら</target>
        </trans-unit>
        <trans-unit id="708b113fd606c824d990b531e5ec634fa7999b38" translate="yes" xml:space="preserve">
          <source>You can do a similar thing with the value of &lt;code&gt;$0&lt;/code&gt;, which holds the script name. That might hold a relative path, but &lt;code&gt;rel2abs&lt;/code&gt; can turn it into an absolute path. Once you have the</source>
          <target state="translated">スクリプト名を保持する &lt;code&gt;$0&lt;/code&gt; の値を使用して、同様のことを行うことができます。それは相対パスを保持するかもしれませんが、 &lt;code&gt;rel2abs&lt;/code&gt; はそれを絶対パスに変えることができます。あなたが持ったら</target>
        </trans-unit>
        <trans-unit id="2cb0b5304ad3a2505b033f6205316fe91cd8667f" translate="yes" xml:space="preserve">
          <source>You can do it yourself:</source>
          <target state="translated">自分でやればいいんだよ。</target>
        </trans-unit>
        <trans-unit id="3df3594ac830b3b367e2449531bc9481e6c2c743" translate="yes" xml:space="preserve">
          <source>You can do some customization by setting up a</source>
          <target state="translated">を設定することで、ある程度のカスタマイズが可能です。</target>
        </trans-unit>
        <trans-unit id="e36b0a11441d7f370d1c8f3b9a2c5df0ed14fec0" translate="yes" xml:space="preserve">
          <source>You can do the same thing with foreach and a match using the c flag and the \G anchor, if you do not mind your entire file being in memory at the end.</source>
          <target state="translated">ファイル全体が最後にメモリに残ることを気にしないのであれば、c フラグと \G アンカーを使って、foreach と match で同じことができます。</target>
        </trans-unit>
        <trans-unit id="94475bd1aa00e25358f732725451e1c48c0023a3" translate="yes" xml:space="preserve">
          <source>You can do this by filtering a list of &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects based on your criteria. For example, to extract only files that have the string &lt;code&gt;foo&lt;/code&gt; in their title, you would use:</source>
          <target state="translated">これを行うには、基準に基づいて &lt;code&gt;Archive::Tar::File&lt;/code&gt; オブジェクトのリストをフィルタリングします。たとえば、タイトルに文字列 &lt;code&gt;foo&lt;/code&gt; が含まれるファイルのみを抽出するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e3b58ea141bf0b2ab8308eba04e2fe1187709b38" translate="yes" xml:space="preserve">
          <source>You can do this in</source>
          <target state="translated">で行うことができます。</target>
        </trans-unit>
        <trans-unit id="0e82d2d4c5fee3c3455ee13c93472ac8305c2886" translate="yes" xml:space="preserve">
          <source>You can do various useful things to lists:</source>
          <target state="translated">リストにはいろいろと便利なことができます。</target>
        </trans-unit>
        <trans-unit id="2293c83d7e9f41c388c0c9ef674c18441a39f91a" translate="yes" xml:space="preserve">
          <source>You can download the NDK from &lt;a href=&quot;http://developer.blackberry.com/native/downloads/&quot;&gt;http://developer.blackberry.com/native/downloads/&lt;/a&gt;.</source>
          <target state="translated">NDKは&lt;a href=&quot;http://developer.blackberry.com/native/downloads/&quot;&gt;http://developer.blackberry.com/native/downloads/&lt;/a&gt;からダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="ccab4c9ebd3c859889355271883dcf42caad69df" translate="yes" xml:space="preserve">
          <source>You can download the NDK from &lt;a href=&quot;https://developer.android.com/tools/sdk/ndk/index.html&quot;&gt;https://developer.android.com/tools/sdk/ndk/index.html&lt;/a&gt;. You'll want the normal, non-legacy version.</source>
          <target state="translated">NDKは&lt;a href=&quot;https://developer.android.com/tools/sdk/ndk/index.html&quot;&gt;https://developer.android.com/tools/sdk/ndk/index.html&lt;/a&gt;からダウンロードできます。通常の非レガシーバージョンが必要になります。</target>
        </trans-unit>
        <trans-unit id="34382fbd280654c58cbfc9d0110d2c77f2d872d7" translate="yes" xml:space="preserve">
          <source>You can easily do this yourself too by checking each level of the hash before you move onto the next level. This is essentially what &lt;a href=&quot;Data::Diver&quot;&gt;Data::Diver&lt;/a&gt; does for you:</source>
          <target state="translated">次のレベルに進む前にハッシュの各レベルをチェックすることで、これを自分でも簡単に行うことができます。これは基本的に&lt;a href=&quot;Data::Diver&quot;&gt;Data :: Diver&lt;/a&gt;が行うことです。</target>
        </trans-unit>
        <trans-unit id="2add1e5f384d4e366c7f0bda81dca221784f796a" translate="yes" xml:space="preserve">
          <source>You can easily do this yourself too by checking each level of the hash before you move onto the next level. This is essentially what &lt;a href=&quot;http://search.cpan.org/perldoc/Data::Diver&quot;&gt;Data::Diver&lt;/a&gt; does for you:</source>
          <target state="translated">次のレベルに進む前にハッシュの各レベルをチェックすることで、これも自分で簡単に行うことができます。これは本質的に&lt;a href=&quot;http://search.cpan.org/perldoc/Data::Diver&quot;&gt;Data :: Diver&lt;/a&gt;があなたのために行うことです：</target>
        </trans-unit>
        <trans-unit id="aca937c9b8249ef74f6bdd2a2c24ef2b2c942c33" translate="yes" xml:space="preserve">
          <source>You can effect a sleep of 250 milliseconds this way:</source>
          <target state="translated">このようにして250ミリ秒のスリープを効果的に行うことができます。</target>
        </trans-unit>
        <trans-unit id="2cf03e7d8c028c108e1f07b9fdfd93ec5a0911cb" translate="yes" xml:space="preserve">
          <source>You can either get the latest perl-for-amiga source from Ninemoons and extract it with:</source>
          <target state="translated">Ninemoonsから最新のperl-for-amigaのソースを入手して、それをNinemoonsで抽出するか。</target>
        </trans-unit>
        <trans-unit id="dc1b686bd86f9825c512e3b19e24ca27d9b0e88c" translate="yes" xml:space="preserve">
          <source>You can embed Pod documentation in your Perl modules and scripts. Start your documentation with an empty line, a &quot;=head1&quot; command at the beginning, and end it with a &quot;=cut&quot; command and an empty line. The &lt;b&gt;perl&lt;/b&gt; executable will ignore the Pod text. You can place a Pod statement where &lt;b&gt;perl&lt;/b&gt; expects the beginning of a new statement, but not within a statement, as that would result in an error. See any of the supplied library modules for examples.</source>
          <target state="translated">Perlモジュールとスクリプトにポッドのドキュメントを埋め込むことができます。ドキュメントを空行で始め、「= head1」コマンドを最初に置き、「= cut」コマンドと空行で終わります。&lt;b&gt;perlの&lt;/b&gt;実行ファイルは、ポッドのテキストを無視します。エラーが発生するため、&lt;b&gt;Perl&lt;/b&gt;が新しいステートメントの開始を期待する場所にPodステートメントを配置できますが、ステートメント内には配置できません。例については、提供されているライブラリモジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e8901a24d5203f278555dd6630e84e6495d5c32" translate="yes" xml:space="preserve">
          <source>You can enable automatic UTF-8-ification of your standard file handles, default &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; layer, and &lt;code&gt;@ARGV&lt;/code&gt; by using either the &lt;code&gt;-C&lt;/code&gt; command line switch or the &lt;code&gt;PERL_UNICODE&lt;/code&gt; environment variable, see &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for the documentation of the &lt;code&gt;-C&lt;/code&gt; switch.</source>
          <target state="translated">あなたは、あなたの標準ファイルハンドルの自動的なUTF-8-ificationを有効にデフォルトすることができます &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 層、および &lt;code&gt;@ARGV&lt;/code&gt; をどちらか使用して &lt;code&gt;-C&lt;/code&gt; コマンドラインスイッチまたは &lt;code&gt;PERL_UNICODE&lt;/code&gt; の環境変数を参照してください&lt;a href=&quot;perlrun&quot;&gt;はperlrun&lt;/a&gt;のドキュメントについては &lt;code&gt;-C&lt;/code&gt; スイッチ。</target>
        </trans-unit>
        <trans-unit id="82c6bb69edc2a1dcc5ef223d908dad512d68780d" translate="yes" xml:space="preserve">
          <source>You can enable automatic UTF-8-ification of your standard file handles, default &lt;code&gt;open()&lt;/code&gt; layer, and &lt;code&gt;@ARGV&lt;/code&gt; by using either the &lt;code&gt;-C&lt;/code&gt; command line switch or the &lt;code&gt;PERL_UNICODE&lt;/code&gt; environment variable, see &lt;a href=&quot;perlrun#-C-%5Bnumber%2Flist%5D&quot;&gt;perlrun&lt;/a&gt; for the documentation of the &lt;code&gt;-C&lt;/code&gt; switch.</source>
          <target state="translated">&lt;code&gt;-C&lt;/code&gt; コマンドラインスイッチまたは &lt;code&gt;PERL_UNICODE&lt;/code&gt; 環境変数のいずれかを使用して、標準ファイルハンドル、デフォルトの &lt;code&gt;open()&lt;/code&gt; レイヤー、および &lt;code&gt;@ARGV&lt;/code&gt; の自動UTF-8化を有効にできます。 &lt;code&gt;-C&lt;/code&gt; スイッチのドキュメントについては、perlrunを参照して&lt;a href=&quot;perlrun#-C-%5Bnumber%2Flist%5D&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9b7d65e57af61c849fd344c325e8ff8558b6ea76" translate="yes" xml:space="preserve">
          <source>You can enable this program wide by setting the package variable &lt;code&gt;$Params::Check::VERBOSE&lt;/code&gt; to a true value. For details, see the section on &lt;code&gt;Global Variables&lt;/code&gt; below.</source>
          <target state="translated">パッケージ変数 &lt;code&gt;$Params::Check::VERBOSE&lt;/code&gt; をtrue値に設定することにより、このプログラム全体を有効にすることができます。詳細については、以下の &lt;code&gt;Global Variables&lt;/code&gt; のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bd9f5fdd175da39fdf1b2aee95117b6f24089729" translate="yes" xml:space="preserve">
          <source>You can even add a line to the beginning of a file, since the current line prints at the end of the loop:</source>
          <target state="translated">ループの最後に現在の行が表示されるので、ファイルの先頭に行を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="469cbe63338eb0799dde10314ea7997fd8799ab7" translate="yes" xml:space="preserve">
          <source>You can even chain the operations together as usual:</source>
          <target state="translated">いつものように操作を連鎖させることもできます。</target>
        </trans-unit>
        <trans-unit id="2aadc431d196d9bef8923dcadb3a5f0c2d7f67b9" translate="yes" xml:space="preserve">
          <source>You can even set them to pipe commands. For example, this automatically filters compressed arguments through &lt;b&gt;gzip&lt;/b&gt;:</source>
          <target state="translated">コマンドをパイプするように設定することもできます。たとえば、これは&lt;b&gt;gzip&lt;/b&gt;を通じて圧縮された引数を自動的にフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="5959df3dd95aca5e6820f2cd7c4389121f214d69" translate="yes" xml:space="preserve">
          <source>You can examine the @INC variable from within a perl program to see the order in which Perl searches these directories.</source>
          <target state="translated">perlプログラムの中から@INC変数を調べて、Perlがこれらのディレクトリを検索する順番を見ることができます。</target>
        </trans-unit>
        <trans-unit id="b4227d7f6f90687ed1f952d3300efda038a669dd" translate="yes" xml:space="preserve">
          <source>You can examine your last commit with:</source>
          <target state="translated">で最後のコミットを調べることができます。</target>
        </trans-unit>
        <trans-unit id="b698e2e22416ac9eb31f0b1d16a0dd9b5e075ed0" translate="yes" xml:space="preserve">
          <source>You can expand the macros in a</source>
          <target state="translated">でマクロを展開することができます。</target>
        </trans-unit>
        <trans-unit id="c6984ea0cc547a7d94d70f8b198039214ca8c15f" translate="yes" xml:space="preserve">
          <source>You can explore the endianness of your platform by unpacking a data structure packed in native format such as:</source>
          <target state="translated">のようなネイティブ形式でパックされたデータ構造を解凍することで、プラットフォームのエンディアン性を探ることができます。</target>
        </trans-unit>
        <trans-unit id="25084ad020c81115ae6c13e15f94c38c747b7c70" translate="yes" xml:space="preserve">
          <source>You can explore various information from the Unicode data files using the &lt;code&gt;Unicode::UCD&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Unicode::UCD&lt;/code&gt; モジュールを使用して、Unicodeデータファイルからさまざまな情報を探索できます。</target>
        </trans-unit>
        <trans-unit id="214226a1ed44146fabbcdf1d7ff955aea72e1c83" translate="yes" xml:space="preserve">
          <source>You can extend the data conversion shortcuts menu, so for example you can display an SV's IV value with one click, without doing any typing. To do that simply edit ~/.ddd/init file and add after:</source>
          <target state="translated">データ変換のショートカットメニューを拡張することができ、例えば SV の IV 値をワンクリックで表示することができます。これを行うには、~/.ddd/initファイルを編集して後から追加するだけです。</target>
        </trans-unit>
        <trans-unit id="9f3b19dace5e1ee6e80db897c83810c886662b0c" translate="yes" xml:space="preserve">
          <source>You can fake a static variable by using a lexical variable which goes out of scope. In this example, you define the subroutine &lt;code&gt;counter&lt;/code&gt; , and it uses the lexical variable &lt;code&gt;$count&lt;/code&gt; . Since you wrap this in a BEGIN block, &lt;code&gt;$count&lt;/code&gt; is defined at compile-time, but also goes out of scope at the end of the BEGIN block. The BEGIN block also ensures that the subroutine and the value it uses is defined at compile-time so the subroutine is ready to use just like any other subroutine, and you can put this code in the same place as other subroutines in the program text (i.e. at the end of the code, typically). The subroutine &lt;code&gt;counter&lt;/code&gt; still has a reference to the data, and is the only way you can access the value (and each time you do, you increment the value). The data in chunk of memory defined by &lt;code&gt;$count&lt;/code&gt; is private to &lt;code&gt;counter&lt;/code&gt; .</source>
          <target state="translated">スコープ外のレキシカル変数を使用して、静的変数を偽造できます。この例では、サブルーチン &lt;code&gt;counter&lt;/code&gt; を定義し、レキシカル変数 &lt;code&gt;$count&lt;/code&gt; 使用しています。これをBEGINブロックでラップするので、 &lt;code&gt;$count&lt;/code&gt; はコンパイル時に定義されますが、BEGINブロックの最後でスコープ外になります。BEGINブロックは、サブルーチンとそれが使用する値がコンパイル時に定義されることも保証するため、サブルーチンは他のサブルーチンと同じように使用できるようになり、このコードをプログラムテキスト内の他のサブルーチンと同じ場所に配置できます（つまり、通常はコードの最後です）。サブルーチン &lt;code&gt;counter&lt;/code&gt; にはまだデータへの参照があり、値にアクセスできる唯一の方法です（アクセスするたびに値をインクリメントします）。 &lt;code&gt;$count&lt;/code&gt; 定義されたメモリのチャンク内のデータは、 &lt;code&gt;counter&lt;/code&gt; 専用です。</target>
        </trans-unit>
        <trans-unit id="d87a4ece96c240d1ec10cdcea1f450090af5432d" translate="yes" xml:space="preserve">
          <source>You can fake a static variable by using a lexical variable which goes out of scope. In this example, you define the subroutine &lt;code&gt;counter&lt;/code&gt;, and it uses the lexical variable &lt;code&gt;$count&lt;/code&gt;. Since you wrap this in a BEGIN block, &lt;code&gt;$count&lt;/code&gt; is defined at compile-time, but also goes out of scope at the end of the BEGIN block. The BEGIN block also ensures that the subroutine and the value it uses is defined at compile-time so the subroutine is ready to use just like any other subroutine, and you can put this code in the same place as other subroutines in the program text (i.e. at the end of the code, typically). The subroutine &lt;code&gt;counter&lt;/code&gt; still has a reference to the data, and is the only way you can access the value (and each time you do, you increment the value). The data in chunk of memory defined by &lt;code&gt;$count&lt;/code&gt; is private to &lt;code&gt;counter&lt;/code&gt;.</source>
          <target state="translated">スコープ外の字句変数を使用して、静的変数を偽造することができます。この例では、サブルーチン &lt;code&gt;counter&lt;/code&gt; を定義し、字句変数 &lt;code&gt;$count&lt;/code&gt; 使用します。これをBEGINブロックでラップするため、 &lt;code&gt;$count&lt;/code&gt; はコンパイル時に定義されますが、BEGINブロックの終わりでもスコープ外になります。また、BEGINブロックは、サブルーチンとそれが使用する値がコンパイル時に定義されることを保証するため、サブルーチンは他のサブルーチンと同じように使用できるようになり、このコードをプログラムテキストの他のサブルーチンと同じ場所に配置できます（つまり、通常はコードの最後にあります）。サブルーチン &lt;code&gt;counter&lt;/code&gt; まだデータへの参照があり、値にアクセスできる唯一の方法です（アクセスするたびに、値をインクリメントします）。 &lt;code&gt;$count&lt;/code&gt; 定義されたメモリのチャンク内のデータは、 &lt;code&gt;counter&lt;/code&gt; 専用です。</target>
        </trans-unit>
        <trans-unit id="98bfa69a23c16121bcf7918a14cd66f9c3c6d27f" translate="yes" xml:space="preserve">
          <source>You can find documentation for this module with the perldoc command.</source>
          <target state="translated">このモジュールのドキュメントは perldoc コマンドで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="2ec893daacd3a612f16b5ff8e3b0ca737de8a9f5" translate="yes" xml:space="preserve">
          <source>You can find more info about Configure's command line switches in the</source>
          <target state="translated">Configure のコマンドラインスイッチについての詳細は</target>
        </trans-unit>
        <trans-unit id="60d30b2a5683150ee021b2d2efe823e684b28b49" translate="yes" xml:space="preserve">
          <source>You can find out whether Perl considers &quot;long double&quot; to be the default floating-point size to use on your platform via &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perlが &quot;long double&quot;を&lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;を介してプラットフォームで使用するデフォルトの浮動小数点サイズであると見なしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="0a14665644553d1c1ca40b3a369c0cfc1687919b" translate="yes" xml:space="preserve">
          <source>You can find out whether Perl considers &quot;long double&quot; to be the default floating-point size to use on your platform via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perlが &quot;long double&quot;を&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を介してプラットフォームで使用するデフォルトの浮動小数点サイズであると見なしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="a8c0376796b23fff5ec186fab67f5500801dd3ed" translate="yes" xml:space="preserve">
          <source>You can find out whether your Perl supports quads via &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perlが&lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;を介してクワッドをサポートしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="977c50ef8718482d8b17abe375d1697e8f9a2d66" translate="yes" xml:space="preserve">
          <source>You can find out whether your Perl supports quads via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perlが&lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;を介してクワッドをサポートしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="58566ff87e227e47e0a6175cb880b0492ff07d0d" translate="yes" xml:space="preserve">
          <source>You can find the bytes that make up a UTF-8 sequence with</source>
          <target state="translated">UTF-8 シーケンスを構成するバイトは、次のようにして見つけることができます。</target>
        </trans-unit>
        <trans-unit id="d66bda1e5630ce31a16d647268de04ca99f2d093" translate="yes" xml:space="preserve">
          <source>You can find the full DJGPP distribution on any of the mirrors listed here:</source>
          <target state="translated">DJGPP の完全なディストリビューションは、ここに掲載されているミラーのいずれかで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="53a7bd12f9a84d4d155f8bc43066fe15624ba305" translate="yes" xml:space="preserve">
          <source>You can find them for example by</source>
          <target state="translated">例えば、以下のような方法で見つけることができます。</target>
        </trans-unit>
        <trans-unit id="abd3b038a5876faa8d912c01ba340b1b8ceaabfa" translate="yes" xml:space="preserve">
          <source>You can follow the formats with numbers to say how many characters should be affected by that format: &lt;code&gt;A12&lt;/code&gt; means &quot;take 12 characters&quot;; &lt;code&gt;x6&lt;/code&gt; means &quot;skip 6 bytes&quot; or &quot;character 0, 6 times&quot;.</source>
          <target state="translated">数字を含むフォーマットに従って、そのフォーマットの影響を受ける文字数を指定できます &lt;code&gt;A12&lt;/code&gt; は「12文字を取る」を意味します。 &lt;code&gt;x6&lt;/code&gt; は、「6バイトをスキップ」または「文字0、6回」を意味します。</target>
        </trans-unit>
        <trans-unit id="3e5ffde15ed2080164a5592bd7bb881aeab7fa67" translate="yes" xml:space="preserve">
          <source>You can force Perl to interpret the bareword as a class name by appending &quot;::&quot; to it, like we saw earlier:</source>
          <target state="translated">先ほど見たように、「:::」を付け加えることで、Perl を強制的にベアワードをクラス名として解釈させることができます。</target>
        </trans-unit>
        <trans-unit id="6a0f7fd6c71d8ef00acad73e562310bfdc7188b5" translate="yes" xml:space="preserve">
          <source>You can force Perl to use the first interpretation (i.e. as a method call on the class named &quot;Class&quot;) in two ways. First, you can append a &lt;code&gt;::&lt;/code&gt; to the class name:</source>
          <target state="translated">Perlに最初の解釈を（つまり、「クラス」という名前のクラスのメソッド呼び出しとして）使用するように強制するには、2つの方法があります。まず、クラス名に &lt;code&gt;::&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="3683b364293548110b32df191aa4769c6b0d7861" translate="yes" xml:space="preserve">
          <source>You can force a backreference interpretation always by using the &lt;code&gt;\g{...}&lt;/code&gt; form. You can the force an octal interpretation always by using the &lt;code&gt;\o{...}&lt;/code&gt; form, or for numbers up through \077 (= 63 decimal), by using three digits, beginning with a &quot;0&quot;.</source>
          <target state="translated">&lt;code&gt;\g{...}&lt;/code&gt; フォームを使用すると、常に後方参照の解釈を強制できます。 &lt;code&gt;\o{...}&lt;/code&gt; 形式を使用するか、\ 077（10進数= 63）までの数値の場合は、常に0で始まる3桁を使用して、8進数の解釈を強制できます。</target>
        </trans-unit>
        <trans-unit id="b877192684c9091db1ed512a1471d2f292aa330b" translate="yes" xml:space="preserve">
          <source>You can force an SV to make its own copy of its string buffer by calling &lt;code&gt;sv_force_normal(sv)&lt;/code&gt; or SvPV_force_nolen(sv).</source>
          <target state="translated">&lt;code&gt;sv_force_normal(sv)&lt;/code&gt; またはSvPV_force_nolen（sv）を呼び出すことにより、SVに文字列バッファの独自のコピーを作成させることができます。</target>
        </trans-unit>
        <trans-unit id="17a663e3d7a25b5bda8c7ec8fa9aff0d95066f73" translate="yes" xml:space="preserve">
          <source>You can force the thread-safe locale operations to always be used (if available) by recompiling perl with</source>
          <target state="translated">スレッドセーフなロケール操作を常に使用するように強制するには、 perl を</target>
        </trans-unit>
        <trans-unit id="1e323a2944066f4acfe2875190557e817154e971" translate="yes" xml:space="preserve">
          <source>You can force the type to be a JSON number by numifying it:</source>
          <target state="translated">型を数値化することで、強制的にJSONの数値にすることができます。</target>
        </trans-unit>
        <trans-unit id="99a383c28a991c1f9ed0ee28b1f5306a152b1497" translate="yes" xml:space="preserve">
          <source>You can force the type to be a JSON string by stringifying it:</source>
          <target state="translated">型を文字列化することで、強制的にJSON文字列にすることができます。</target>
        </trans-unit>
        <trans-unit id="59bd5097130055276750c2a4628acf949f4c2e6b" translate="yes" xml:space="preserve">
          <source>You can get a precompiled version of gcc from &lt;a href=&quot;http://www.sunfreeware.com/&quot;&gt;http://www.sunfreeware.com/&lt;/a&gt; or &lt;a href=&quot;http://www.blastwave.org/&quot;&gt;http://www.blastwave.org/&lt;/a&gt;. Make sure you pick up the package for your Solaris release.</source>
          <target state="translated">プリコンパイルされたバージョンのgccは、&lt;a href=&quot;http://www.sunfreeware.com/&quot;&gt;http：//www.sunfreeware.com/&lt;/a&gt;または&lt;a href=&quot;http://www.blastwave.org/&quot;&gt;http://www.blastwave.org/&lt;/a&gt;から入手できます。Solarisリリース用のパッケージを必ず選択してください。</target>
        </trans-unit>
        <trans-unit id="6c43b7d416e3df44e0ee3889ce9e7a7e5b755245" translate="yes" xml:space="preserve">
          <source>You can get an overview of all the files with this command:</source>
          <target state="translated">このコマンドですべてのファイルの概要を知ることができます。</target>
        </trans-unit>
        <trans-unit id="a325b2e4941194b844aaba1d34803d7f10c46f65" translate="yes" xml:space="preserve">
          <source>You can get and set the current length of the string stored in an SV with the following macros:</source>
          <target state="translated">SV に格納されている文字列の現在の長さを以下のマクロで取得・設定することができます。</target>
        </trans-unit>
        <trans-unit id="498e28fc3884e7bafa55f40835a491ab14376104" translate="yes" xml:space="preserve">
          <source>You can get around this in several ways depending on our situation. First, if you don't want any of the characters in the string to be special, you can escape them with &lt;code&gt;&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;&lt;/code&gt; before you use the string.</source>
          <target state="translated">あなたは私たちの状況に応じていくつかの方法でこれを回避することができます。まず、文字列内の文字を特別なものにし &lt;code&gt;&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;&lt;/code&gt; ない場合は、文字列を使用する前にquotemetaでエスケープできます。</target>
        </trans-unit>
        <trans-unit id="907671da7c158c5e53cf7c4009f169bdae8b7e54" translate="yes" xml:space="preserve">
          <source>You can get around this in several ways depending on our situation. First, if you don't want any of the characters in the string to be special, you can escape them with &lt;code&gt;quotemeta&lt;/code&gt; before you use the string.</source>
          <target state="translated">状況に応じて、いくつかの方法でこれを回避できます。まず、文字列内のどの文字も特別なものにし &lt;code&gt;quotemeta&lt;/code&gt; ない場合は、文字列を使用する前にquotemetaを使用してそれらをエスケープできます。</target>
        </trans-unit>
        <trans-unit id="2880274dc7c0ec586da21bf05619e960d62718ce" translate="yes" xml:space="preserve">
          <source>You can get at any of these quantities from C very easily; just add &lt;code&gt;Sv&lt;/code&gt; to the name of the field shown in the snippet, and you've got a macro which will return the value: &lt;code&gt;SvCUR(sv)&lt;/code&gt; returns the current length of the string, &lt;code&gt;SvREFCOUNT(sv)&lt;/code&gt; returns the reference count, &lt;code&gt;SvPV(sv, len)&lt;/code&gt; returns the string itself with its length, and so on. More macros to manipulate these properties can be found in &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;.</source>
          <target state="translated">Cからこれらの量を非常に簡単に取得できます。スニペットに示されているフィールドの名前に &lt;code&gt;Sv&lt;/code&gt; を追加するだけで、値を返すマクロが得られます &lt;code&gt;SvCUR(sv)&lt;/code&gt; は文字列の現在の長さを返し、 &lt;code&gt;SvREFCOUNT(sv)&lt;/code&gt; は参照カウントを返します &lt;code&gt;SvPV(sv, len)&lt;/code&gt; は、文字列自体とその長さなどを返します。これらのプロパティを操作するためのより多くのマクロが&lt;a href=&quot;perlguts&quot;&gt;perlgutsにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="98610d953793b8d3a809dccac32eb0df790fe7b6" translate="yes" xml:space="preserve">
          <source>You can get at lists of keys and values with &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values()&lt;/a&gt;&lt;/code&gt; を使用して、キーと値のリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="bfa837955bc2111631d4644a0aa1c41fcffdf11c" translate="yes" xml:space="preserve">
          <source>You can get at lists of keys and values with &lt;code&gt;keys()&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keys()&lt;/code&gt; と &lt;code&gt;values()&lt;/code&gt; を使用して、キーと値のリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="55a77b36211d3d02a45104bff8d76788cd986acc" translate="yes" xml:space="preserve">
          <source>You can get commercial support of Perl if you wish, although for most users the informal support will more than suffice. See the answer to &quot;Where can I buy a commercial version of Perl?&quot; for more information.</source>
          <target state="translated">ほとんどのユーザにとっては非公式なサポートで十分ですが、希望すればPerlの商用サポートを受けることができます。詳細については、&quot;どこでPerlの商用版を購入できますか?&quot;を参照してください。</target>
        </trans-unit>
        <trans-unit id="83877e131c38375e988c7edf4defa59ad28286ba" translate="yes" xml:space="preserve">
          <source>You can get gzip from &lt;a href=&quot;ftp://prep.ai.mit.edu/pub/gnu/&quot;&gt;ftp://prep.ai.mit.edu/pub/gnu/&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ftp://prep.ai.mit.edu/pub/gnu/&quot;&gt;ftp://prep.ai.mit.edu/pub/gnu/&lt;/a&gt;からgzipを取得できます</target>
        </trans-unit>
        <trans-unit id="5cc7caff36ea8191fb948cb25382a0802d8b70e3" translate="yes" xml:space="preserve">
          <source>You can get gzip from &lt;a href=&quot;http://www.s390.ibm.com/products/oe/bpxqp1.html&quot;&gt;http://www.s390.ibm.com/products/oe/bpxqp1.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.s390.ibm.com/products/oe/bpxqp1.html&quot;&gt;http://www.s390.ibm.com/products/oe/bpxqp1.html&lt;/a&gt;からgzipを取得できます</target>
        </trans-unit>
        <trans-unit id="ceb45063df183ed03ff063ebe2021495fbb9baff" translate="yes" xml:space="preserve">
          <source>You can get into trouble if you use constants in a context which automatically quotes barewords (as is true for any subroutine call). For example, you can't say &lt;code&gt;$hash{CONSTANT}&lt;/code&gt; because &lt;code&gt;CONSTANT&lt;/code&gt; will be interpreted as a string. Use &lt;code&gt;$hash{CONSTANT()}&lt;/code&gt; or &lt;code&gt;$hash{+CONSTANT}&lt;/code&gt; to prevent the bareword quoting mechanism from kicking in. Similarly, since the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator quotes a bareword immediately to its left, you have to say &lt;code&gt;CONSTANT() =&amp;gt; 'value'&lt;/code&gt; (or simply use a comma in place of the big arrow) instead of &lt;code&gt;CONSTANT =&amp;gt; 'value'&lt;/code&gt; .</source>
          <target state="translated">自動的にベアワードを引用するコンテキストで定数を使用すると、問題が発生する可能性があります（すべてのサブルーチン呼び出しに当てはまります）。たとえば、 &lt;code&gt;CONSTANT&lt;/code&gt; は文字列として解釈されるため、 &lt;code&gt;$hash{CONSTANT}&lt;/code&gt; とは言えません。使用 &lt;code&gt;$hash{CONSTANT()}&lt;/code&gt; または &lt;code&gt;$hash{+CONSTANT}&lt;/code&gt; に蹴りからのメカニズムを引用裸の単語を防止する。同様に、以降 &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子は、そのすぐ左に裸の単語を引用し、あなたが言っている &lt;code&gt;CONSTANT() =&amp;gt; 'value'&lt;/code&gt; &lt;code&gt;CONSTANT =&amp;gt; 'value'&lt;/code&gt; 代わりにvalue '（または単に大きな矢印の代わりにカンマを使用）。</target>
        </trans-unit>
        <trans-unit id="da2f7597146611c6fbedf52c5830c6aad8de3611" translate="yes" xml:space="preserve">
          <source>You can get into trouble if you use constants in a context which automatically quotes barewords (as is true for any subroutine call). For example, you can't say &lt;code&gt;$hash{CONSTANT}&lt;/code&gt; because &lt;code&gt;CONSTANT&lt;/code&gt; will be interpreted as a string. Use &lt;code&gt;$hash{CONSTANT()}&lt;/code&gt; or &lt;code&gt;$hash{+CONSTANT}&lt;/code&gt; to prevent the bareword quoting mechanism from kicking in. Similarly, since the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator quotes a bareword immediately to its left, you have to say &lt;code&gt;CONSTANT() =&amp;gt; 'value'&lt;/code&gt; (or simply use a comma in place of the big arrow) instead of &lt;code&gt;CONSTANT =&amp;gt; 'value'&lt;/code&gt;.</source>
          <target state="translated">ベアワードを自動的に引用するコンテキストで定数を使用すると、問題が発生する可能性があります（すべてのサブルーチン呼び出しに当てはまります）。たとえば、 &lt;code&gt;CONSTANT&lt;/code&gt; は文字列として解釈されるため、 &lt;code&gt;$hash{CONSTANT}&lt;/code&gt; と言うことはできません。使用 &lt;code&gt;$hash{CONSTANT()}&lt;/code&gt; または &lt;code&gt;$hash{+CONSTANT}&lt;/code&gt; に蹴りからのメカニズムを引用裸の単語を防止する。同様に、以降 &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子は、そのすぐ左に裸の単語を引用し、あなたが言っている &lt;code&gt;CONSTANT() =&amp;gt; 'value'&lt;/code&gt; &lt;code&gt;CONSTANT =&amp;gt; 'value'&lt;/code&gt; 代わりにvalue '（または単に大きな矢印の代わりにコンマを使用）。</target>
        </trans-unit>
        <trans-unit id="e6872803f70582536909b7aa8df4da94cd4d37a4" translate="yes" xml:space="preserve">
          <source>You can have an environment variable PERL_INSTALL_ROOT set which will be prepended as a directory to each installed file (and directory).</source>
          <target state="translated">環境変数PERL_INSTALL_ROOTを設定しておくと、インストールされた各ファイル(およびディレクトリ)にディレクトリとして前置されるようになります。</target>
        </trans-unit>
        <trans-unit id="fa58ede728fa900b2be53c5925b3b4ff8069c044" translate="yes" xml:space="preserve">
          <source>You can ignore [pad]THXx when browsing the Perl headers/sources. Those are strictly for use within the core. Extensions and embedders need only be aware of [pad]THX.</source>
          <target state="translated">Perl のヘッダ/ソースを閲覧する際には、[pad]THXx を無視しても構いません。これらは厳密にはコア内で使用するためのものです。拡張機能やエンベッダーは [pad]THX を意識する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0a479cb9681a1cb4f6cbb2bcf71ac6471f5092e" translate="yes" xml:space="preserve">
          <source>You can imagine how bad things would be if, for example, the SYS$MANAGER or SYS$SYSTEM logical names were deleted.</source>
          <target state="translated">例えば、SYS$MANAGERやSYS$SYSTEMの論理名が削除されたら、どれだけ悪いことになるか想像できます。</target>
        </trans-unit>
        <trans-unit id="2157dc8c06b7685edcc449748ab0e77243e5a157" translate="yes" xml:space="preserve">
          <source>You can immediately see a slightly different focus to the subroutine profiling modules, and we start to see exactly which line of code is taking the most time. That regex line is looking a bit suspicious, for example. Remember that these tools are supposed to be used together, there is no single best way to profile your code, you need to use the best tools for the job.</source>
          <target state="translated">すぐにサブルーチンプロファイリングモジュールの焦点が少し変わったことがわかり、どのコードのどの行に最も時間がかかっているかが正確にわかります。例えば、あの正規表現の行はちょっと怪しいですね。これらのツールは一緒に使うものであり、コードのプロファイリングには一つのベストな方法があるわけではありません。</target>
        </trans-unit>
        <trans-unit id="01ccbef4b59df5e513c51a0c19924a7a01e4981e" translate="yes" xml:space="preserve">
          <source>You can import &lt;code&gt;:pushpop&lt;/code&gt; and maintain a stack of colors using PUSHCOLOR, POPCOLOR, and LOCALCOLOR. PUSHCOLOR takes the attribute string that starts its argument and pushes it onto a stack of attributes. POPCOLOR removes the top of the stack and restores the previous attributes set by the argument of a prior PUSHCOLOR. LOCALCOLOR surrounds its argument in a PUSHCOLOR and POPCOLOR so that the color resets afterward.</source>
          <target state="translated">&lt;code&gt;:pushpop&lt;/code&gt; をインポートし、PUSHCOLOR、POPCOLOR、およびLOCALCOLORを使用して色のスタックを維持できます。 PUSHCOLORは引数を開始する属性文字列を取り、それを属性のスタックにプッシュします。 POPCOLORはスタックの最上位を削除し、前のPUSHCOLORの引数によって設定された以前の属性を復元します。 LOCALCOLORは引数をPUSHCOLORおよびPOPCOLORで囲み、後で色がリセットされるようにします。</target>
        </trans-unit>
        <trans-unit id="7225c37bbdccefc8a70c019da87c9b8dea7a6b29" translate="yes" xml:space="preserve">
          <source>You can import all the great circle formulas by</source>
          <target state="translated">以下の方法で、すべての大円式をインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="6ccdd2eb8d7e6ad6ca52482a2893e8ad5920726c" translate="yes" xml:space="preserve">
          <source>You can import radial coordinate conversion functions by using the &lt;code&gt;:radial&lt;/code&gt; tag:</source>
          <target state="translated">&lt;code&gt;:radial&lt;/code&gt; タグを使用して、ラジアル座標変換関数をインポートできます。</target>
        </trans-unit>
        <trans-unit id="a747eb56defc25ea65ac8c773f590bb69f4cf6d4" translate="yes" xml:space="preserve">
          <source>You can import symbolic mode constants (&lt;code&gt;S_IF*&lt;/code&gt; ) and functions (&lt;code&gt;S_IS*&lt;/code&gt; ) from the Fcntl module:</source>
          <target state="translated">Fcntlモジュールからシンボリックモード定数（ &lt;code&gt;S_IF*&lt;/code&gt; ）および関数（ &lt;code&gt;S_IS*&lt;/code&gt; ）をインポートできます。</target>
        </trans-unit>
        <trans-unit id="daf6e79cd146ad6c1ff8be35e0c5dd03545d96b4" translate="yes" xml:space="preserve">
          <source>You can import symbolic mode constants (&lt;code&gt;S_IF*&lt;/code&gt;) and functions (&lt;code&gt;S_IS*&lt;/code&gt;) from the &lt;a href=&quot;fcntl&quot;&gt;Fcntl&lt;/a&gt; module:</source>
          <target state="translated">&lt;a href=&quot;fcntl&quot;&gt;Fcntl&lt;/a&gt;モジュールからシンボリックモード定数（ &lt;code&gt;S_IF*&lt;/code&gt; ）と関数（ &lt;code&gt;S_IS*&lt;/code&gt; ）をインポートできます。</target>
        </trans-unit>
        <trans-unit id="c7c8f6c731717afeb2f914b548c9389d16df04b0" translate="yes" xml:space="preserve">
          <source>You can include one underscore between any two digits.</source>
          <target state="translated">任意の2桁の間にアンダースコアを1つ入れることができます。</target>
        </trans-unit>
        <trans-unit id="06780cff3747acdd27c6cb36674311a1b2286d47" translate="yes" xml:space="preserve">
          <source>You can instead write</source>
          <target state="translated">代わりに以下のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="c4bd7d42db9b74a8aac6c0368becb036004d4652" translate="yes" xml:space="preserve">
          <source>You can intermix &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; matches with &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\G.../g&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;\G&lt;/code&gt; is a zero-width assertion that matches the exact position where the previous &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt;, if any, left off. Without the &lt;code&gt;/g&lt;/code&gt; modifier, the &lt;code&gt;\G&lt;/code&gt; assertion still anchors at &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; as it was at the start of the operation (see &lt;a href=&quot;functions/pos&quot;&gt;pos&lt;/a&gt;), but the match is of course only attempted once. Using &lt;code&gt;\G&lt;/code&gt; without &lt;code&gt;/g&lt;/code&gt; on a target string that has not previously had a &lt;code&gt;/g&lt;/code&gt; match applied to it is the same as using the &lt;code&gt;\A&lt;/code&gt; assertion to match the beginning of the string. Note also that, currently, &lt;code&gt;\G&lt;/code&gt; is only properly supported when anchored at the very beginning of the pattern.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; 一致を &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\G.../g&lt;/a&gt;&lt;/code&gt; と混在させることができます。ここで、 &lt;code&gt;\G&lt;/code&gt; は、前の &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//g&lt;/a&gt;&lt;/code&gt; がある場合は、それが終了した正確な位置と一致するゼロ幅のアサーションです。 &lt;code&gt;/g&lt;/code&gt; 修飾子がなくても、 &lt;code&gt;\G&lt;/code&gt; アサーションは操作の開始時と同じように &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; に固定されます（&lt;a href=&quot;functions/pos&quot;&gt;posを&lt;/a&gt;参照）。ただし、一致はもちろん一度だけ試行されます。以前に &lt;code&gt;/g&lt;/code&gt; 一致が適用されていないターゲット文字列で &lt;code&gt;/g&lt;/code&gt; なしで &lt;code&gt;\G&lt;/code&gt; を使用することは、 &lt;code&gt;\A&lt;/code&gt; アサーションを使用して文字列の先頭と一致することと同じです。現在、 &lt;code&gt;\G&lt;/code&gt; パターンの最初にアンカーされている場合にのみ適切にサポートされます。</target>
        </trans-unit>
        <trans-unit id="a2f99acf8ebf785cd6fcc65bebd6795b26da26f1" translate="yes" xml:space="preserve">
          <source>You can intermix &lt;code&gt;m//g&lt;/code&gt; matches with &lt;code&gt;m/\G.../g&lt;/code&gt;, where &lt;code&gt;\G&lt;/code&gt; is a zero-width assertion that matches the exact position where the previous &lt;code&gt;m//g&lt;/code&gt;, if any, left off. Without the &lt;code&gt;/g&lt;/code&gt; modifier, the &lt;code&gt;\G&lt;/code&gt; assertion still anchors at &lt;code&gt;pos()&lt;/code&gt; as it was at the start of the operation (see &lt;a href=&quot;perlfunc#pos&quot;&gt;&quot;pos&quot; in perlfunc&lt;/a&gt;), but the match is of course only attempted once. Using &lt;code&gt;\G&lt;/code&gt; without &lt;code&gt;/g&lt;/code&gt; on a target string that has not previously had a &lt;code&gt;/g&lt;/code&gt; match applied to it is the same as using the &lt;code&gt;\A&lt;/code&gt; assertion to match the beginning of the string. Note also that, currently, &lt;code&gt;\G&lt;/code&gt; is only properly supported when anchored at the very beginning of the pattern.</source>
          <target state="translated">&lt;code&gt;m//g&lt;/code&gt; 一致を &lt;code&gt;m/\G.../g&lt;/code&gt; と混在させることができます。ここで、 &lt;code&gt;\G&lt;/code&gt; は、前の &lt;code&gt;m//g&lt;/code&gt; がある場合は中断した正確な位置に一致する、幅がゼロのアサーションです。 &lt;code&gt;/g&lt;/code&gt; 修飾子がない場合でも、 &lt;code&gt;\G&lt;/code&gt; アサーションは操作の開始時と同じように &lt;code&gt;pos()&lt;/code&gt; に固定されます（&lt;a href=&quot;perlfunc#pos&quot;&gt;perlfuncの「pos」を参照&lt;/a&gt;）が、一致はもちろん1回だけ試行されます。以前に &lt;code&gt;/g&lt;/code&gt; 一致が適用されていないターゲット文字列で &lt;code&gt;/g&lt;/code&gt; なしで &lt;code&gt;\G&lt;/code&gt; を使用することは、 &lt;code&gt;\A&lt;/code&gt; アサーションを使用して文字列の先頭を一致させることと同じです。また、現在、 &lt;code&gt;\G&lt;/code&gt; は、パターンの最初に固定されている場合にのみ適切にサポートされます。</target>
        </trans-unit>
        <trans-unit id="83b86b2d839c827310b20f3c55919cf18f3acb03" translate="yes" xml:space="preserve">
          <source>You can inversely compute the destination if you know the starting point, direction, and distance:</source>
          <target state="translated">出発点、方向、距離がわかれば、目的地を逆算することができます。</target>
        </trans-unit>
        <trans-unit id="c770c9c675ab604224950a0310e7e3cbf6f8631c" translate="yes" xml:space="preserve">
          <source>You can list opcodes by names, or use a tag name; see &lt;a href=&quot;opcode#Predefined-Opcode-Tags&quot;&gt;&quot;Predefined Opcode Tags&quot; in Opcode&lt;/a&gt;.</source>
          <target state="translated">オペコードを名前でリストするか、タグ名を使用できます。&lt;a href=&quot;opcode#Predefined-Opcode-Tags&quot;&gt;Opcodeの「事前定義されたOpcodeタグ」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0dfc74f0d7463fa46580b22cd874ca59538b399a" translate="yes" xml:space="preserve">
          <source>You can list opcodes by names, or use a tag name; see &lt;a href=&quot;opcode#Predefined-Opcode-Tags&quot;&gt;Predefined Opcode Tags in Opcode&lt;/a&gt;.</source>
          <target state="translated">オペコードを名前でリストするか、タグ名を使用できます。&lt;a href=&quot;opcode#Predefined-Opcode-Tags&quot;&gt;Opcodeの事前定義されたOpcodeタグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f4c7db1d02ea8c4d5d73863315380fa405b9daa" translate="yes" xml:space="preserve">
          <source>You can load a custom &lt;a href=&quot;TAP::Parser::Formatter&quot;&gt;TAP::Parser::Formatter&lt;/a&gt;:</source>
          <target state="translated">カスタム&lt;a href=&quot;TAP::Parser::Formatter&quot;&gt;TAP :: Parser :: Formatterを&lt;/a&gt;ロードできます：</target>
        </trans-unit>
        <trans-unit id="001468774175cba071073df8732faf49990cd65b" translate="yes" xml:space="preserve">
          <source>You can load a custom &lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Parser::Formatter&quot;&gt;TAP::Parser::Formatter&lt;/a&gt;:</source>
          <target state="translated">カスタム&lt;a href=&quot;http://search.cpan.org/perldoc/TAP::Parser::Formatter&quot;&gt;TAP :: Parser :: Formatterを&lt;/a&gt;ロードできます。</target>
        </trans-unit>
        <trans-unit id="922b68ea0df3880a69d6f0bb73214de0179f5c3f" translate="yes" xml:space="preserve">
          <source>You can load custom &lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s, to change the way the parser interprets particular</source>
          <target state="translated">カスタム&lt;a href=&quot;TAP::Parser::SourceHandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;をロードして、パーサーが特定の解釈を行う方法を変更できます。</target>
        </trans-unit>
        <trans-unit id="97cc72d3ba21acacd11a8df6beb891397824853a" translate="yes" xml:space="preserve">
          <source>You can load custom &lt;a href=&quot;tap/parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s, to change the way the parser interprets particular</source>
          <target state="translated">カスタム&lt;a href=&quot;tap/parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt;をロードして、パーサーが特定の方法を解釈する方法を変更できます</target>
        </trans-unit>
        <trans-unit id="864c8cc598c8e4c08f636d6accb98e4216dd8dc6" translate="yes" xml:space="preserve">
          <source>You can log in to the bug tracking system and comment on existing bug reports. If you have additional information regarding an existing bug, please add it. This will help the porters fix the bug.</source>
          <target state="translated">バグ追跡システムにログインして、既存のバグ報告にコメントすることができます。既存のバグに関する追加情報があれば、追加してください。これは移植者がバグを修正するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="70b967da2737530b2ccb33fdb14ce4b355858a95" translate="yes" xml:space="preserve">
          <source>You can look into using the &lt;code&gt;DB_File&lt;/code&gt; module and &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie()&lt;/a&gt;&lt;/code&gt; using the &lt;code&gt;$DB_BTREE&lt;/code&gt; hash bindings as documented in &lt;a href=&quot;db_file#In-Memory-Databases&quot;&gt;In Memory Databases in DB_File&lt;/a&gt;. The &lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie::IxHash&lt;/a&gt; module from CPAN might also be instructive. Although this does keep your hash sorted, you might not like the slowdown you suffer from the tie interface. Are you sure you need to do this? :)</source>
          <target state="translated">&lt;code&gt;DB_File&lt;/code&gt; モジュールの使用と、DB_Fileの&lt;a href=&quot;db_file#In-Memory-Databases&quot;&gt;メモリ内データベースに&lt;/a&gt;記載されている &lt;code&gt;$DB_BTREE&lt;/code&gt; ハッシュバインディングを使用した &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie()&lt;/a&gt;&lt;/code&gt; を調べることができます。CPAN の&lt;a href=&quot;http://search.cpan.org/perldoc/Tie::IxHash&quot;&gt;Tie :: IxHash&lt;/a&gt;モジュールも参考になるかもしれません。これはハッシュをソートしたままにしますが、tieインターフェースの影響を受ける速度低下が気に入らない場合があります。これを実行する必要がありますか？:)</target>
        </trans-unit>
        <trans-unit id="7b312039abf365be7292ef1e18c22e425bf6aa57" translate="yes" xml:space="preserve">
          <source>You can look into using the &lt;code&gt;DB_File&lt;/code&gt; module and &lt;code&gt;tie()&lt;/code&gt; using the &lt;code&gt;$DB_BTREE&lt;/code&gt; hash bindings as documented in &lt;a href=&quot;db_file#In-Memory-Databases&quot;&gt;&quot;In Memory Databases&quot; in DB_File&lt;/a&gt;. The &lt;a href=&quot;Tie::IxHash&quot;&gt;Tie::IxHash&lt;/a&gt; module from CPAN might also be instructive. Although this does keep your hash sorted, you might not like the slowdown you suffer from the tie interface. Are you sure you need to do this? :)</source>
          <target state="translated">あなたは使用してに見ることができる &lt;code&gt;DB_File&lt;/code&gt; モジュールと &lt;code&gt;tie()&lt;/code&gt; 使用して &lt;code&gt;$DB_BTREE&lt;/code&gt; 中で文書化されているように、ハッシュ結合&lt;a href=&quot;db_file#In-Memory-Databases&quot;&gt;はDB_Fileに「のメモリデータベース」&lt;/a&gt;。CPANの&lt;a href=&quot;Tie::IxHash&quot;&gt;Tie :: IxHash&lt;/a&gt;モジュールも参考になるかもしれません。これによりハッシュはソートされたままになりますが、タイインターフェイスによる速度低下は気に入らないかもしれません。これを行う必要がありますか？ :)</target>
        </trans-unit>
        <trans-unit id="d9625d3e38b4c49498359b9273455de8f35f225d" translate="yes" xml:space="preserve">
          <source>You can make a read-only clone of the repository by running:</source>
          <target state="translated">を実行することで、リポジトリの読み取り専用のクローンを作成することができます。</target>
        </trans-unit>
        <trans-unit id="d03c6c46e2fd91fc95b867e10fbdca9429550351" translate="yes" xml:space="preserve">
          <source>You can make references to anything, including scalars, functions, and other references.</source>
          <target state="translated">スカラー、関数、その他の参照を含めて、何でも参照することができます。</target>
        </trans-unit>
        <trans-unit id="f238aab29e64ee5c9b032d4d04c0ab30c79c6501" translate="yes" xml:space="preserve">
          <source>You can make the while loop a lot shorter with this suggestion from Benjamin Goldberg:</source>
          <target state="translated">Benjamin Goldberg氏の提案でwhileループを大幅に短くすることができます。</target>
        </trans-unit>
        <trans-unit id="0ec5f2b2db5f7957e7b186e607473a4a56ae2fd0" translate="yes" xml:space="preserve">
          <source>You can make your configuration changes permanent by calling the command &lt;code&gt;o conf commit&lt;/code&gt; . Alternatively set the &lt;code&gt;auto_commit&lt;/code&gt; variable to true by running &lt;code&gt;o conf init auto_commit&lt;/code&gt; and answering the following question with yes.</source>
          <target state="translated">コマンド &lt;code&gt;o conf commit&lt;/code&gt; を呼び出すことで、設定の変更を永続的にすることができます。または、 &lt;code&gt;o conf init auto_commit&lt;/code&gt; を実行し、次の質問にyesと答えて、 &lt;code&gt;auto_commit&lt;/code&gt; 変数をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="2011dcb658fe55c431da3ed5067e6f4bf4528970" translate="yes" xml:space="preserve">
          <source>You can mimic class subtraction using lookahead. For example, what UTS#18 might write as</source>
          <target state="translated">ルックヘッドを使ってクラスの減算を真似ることができます。例えば、UTS#18では以下のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="3461cd371c3715543776c435145f8478a0ac6ec8" translate="yes" xml:space="preserve">
          <source>You can mock TTY input to debugger by adding arbitrary commands to @DB::typeahead. For example, your</source>
          <target state="translated">DB::typeahead に任意のコマンドを追加することで、デバッガへの TTY 入力をモックすることができます。例えば</target>
        </trans-unit>
        <trans-unit id="cf9cef6663d4cd69a19179eacb290a6dcc1e8352" translate="yes" xml:space="preserve">
          <source>You can modify &lt;code&gt;@ARGV&lt;/code&gt; before the first &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; as long as the array ends up containing the list of filenames you really want. Line numbers (&lt;code&gt;$.&lt;/code&gt; ) continue as though the input were one big happy file. See the example in &lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt; for how to reset line numbers on each file.</source>
          <target state="translated">配列に最終的に必要なファイル名のリストが含まれている限り、最初の &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; の前に &lt;code&gt;@ARGV&lt;/code&gt; を変更できます。入力が1つの大きな幸せなファイルであるかのように、行番号（ &lt;code&gt;$.&lt;/code&gt; ）が続きます。各ファイルの行番号をリセットする方法については、&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="fef203404e7c4e26b3201a37c63c3bf76f7a448a" translate="yes" xml:space="preserve">
          <source>You can modify &lt;code&gt;@ARGV&lt;/code&gt; before the first &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; as long as the array ends up containing the list of filenames you really want. Line numbers (&lt;code&gt;$.&lt;/code&gt;) continue as though the input were one big happy file. See the example in &lt;a href=&quot;perlfunc#eof&quot;&gt;&quot;eof&quot; in perlfunc&lt;/a&gt; for how to reset line numbers on each file.</source>
          <target state="translated">配列に本当に必要なファイル名のリストが含まれている限り、最初の &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; の前に &lt;code&gt;@ARGV&lt;/code&gt; を変更できます。行番号（ &lt;code&gt;$.&lt;/code&gt; ）は、入力が1つの大きな幸せなファイルであるかのように続きます。各ファイルの行番号をリセットする方法について&lt;a href=&quot;perlfunc#eof&quot;&gt;は、perlfuncの「eof」の&lt;/a&gt;例を参照してください。</target>
        </trans-unit>
        <trans-unit id="4c8a419c4027fffc2a00680692cdd50042e9d07e" translate="yes" xml:space="preserve">
          <source>You can modify the 'commands' for example to hardwire an absolute path by e.g.</source>
          <target state="translated">コマンド」を変更して、例えば絶対パスをハードワイヤリングすることができます。</target>
        </trans-unit>
        <trans-unit id="b4169d013aca1666238580a9fd59a4dae77a7deb" translate="yes" xml:space="preserve">
          <source>You can not currently force the type in other, less obscure, ways.</source>
          <target state="translated">現在のところ、他の曖昧さの少ない方法では、そのタイプを強制することはできません。</target>
        </trans-unit>
        <trans-unit id="e5494206985a4f40e7d6f949c9e6a6ea96245c15" translate="yes" xml:space="preserve">
          <source>You can now &lt;code&gt;use my::autodie&lt;/code&gt;, which will work just like the standard &lt;code&gt;autodie&lt;/code&gt;, but is now aware of any hints that you've set.</source>
          <target state="translated">これで &lt;code&gt;use my::autodie&lt;/code&gt; できます。これは、標準の &lt;code&gt;autodie&lt;/code&gt; と同じように機能しますが、設定したヒントを認識します。</target>
        </trans-unit>
        <trans-unit id="3de41be22b6a5efcacf396fbce08b0572f97fd60" translate="yes" xml:space="preserve">
          <source>You can only declare autoties for types &lt;code&gt;&quot;SCALAR&quot;&lt;/code&gt; , &lt;code&gt;&quot;ARRAY&quot;&lt;/code&gt; , and &lt;code&gt;&quot;HASH&quot;&lt;/code&gt; . They're the only things (apart from typeglobs -- which are not declarable) that Perl can tie.</source>
          <target state="translated">autotiesは、タイプ &lt;code&gt;&quot;SCALAR&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ARRAY&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;HASH&quot;&lt;/code&gt; に対してのみ宣言できます。これらは、Perlがタイで結びつけることができる唯一のもの（宣言型ではないタイプグロブは別として）です。</target>
        </trans-unit>
        <trans-unit id="d8980e8dd984a6627df441ec747331d50a1b07d8" translate="yes" xml:space="preserve">
          <source>You can only declare autoties for types &lt;code&gt;&quot;SCALAR&quot;&lt;/code&gt;, &lt;code&gt;&quot;ARRAY&quot;&lt;/code&gt;, and &lt;code&gt;&quot;HASH&quot;&lt;/code&gt;. They're the only things (apart from typeglobs -- which are not declarable) that Perl can tie.</source>
          <target state="translated">タイプ &lt;code&gt;&quot;SCALAR&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ARRAY&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;HASH&quot;&lt;/code&gt; 自動化のみを宣言できます。Perlが結び付けることができるのは（typeglobsを除いて-宣言できない）それらだけです。</target>
        </trans-unit>
        <trans-unit id="48d6492d8d5c8ebf50c4b6f0278c97639e62301c" translate="yes" xml:space="preserve">
          <source>You can only obtain this using an alias, and Getopt::Long of at least version 2.13.</source>
          <target state="translated">これを取得するには、エイリアスと、少なくともバージョン 2.13 以上の Getopt::Long を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d146ace3315d8b55185b8781aa6332aa44a31223" translate="yes" xml:space="preserve">
          <source>You can only use the elliptical statement to stand in for a complete statement. Syntactically, &quot;&lt;code&gt;...;&lt;/code&gt;&quot; is a complete statement, but, as with other kinds of semicolon-terminated statement, the semicolon may be omitted if &quot;&lt;code&gt;...&lt;/code&gt;&quot; appears immediately before a closing brace. These examples show how the ellipsis works:</source>
          <target state="translated">楕円形のステートメントは、完全なステートメントの代わりにのみ使用できます。構文的には、「 &lt;code&gt;...;&lt;/code&gt; 」は完全なステートメントですが、他の種類のセミコロンで終了するステートメントと同様に、「 &lt;code&gt;...&lt;/code&gt; 」が閉じ中括弧の直前にある場合はセミコロンを省略できます。これらの例は、省略記号がどのように機能するかを示しています。</target>
        </trans-unit>
        <trans-unit id="0ce5924582aac2aa9ee7cd1ad99c9e8ff1e6ecea" translate="yes" xml:space="preserve">
          <source>You can only use the elliptical statement to stand in for a complete statement. These examples of how the ellipsis works:</source>
          <target state="translated">楕円形の文は、完全な文のために立ち上がるためにのみ使用することができます。楕円文がどのように機能するのか、これらの例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="9cae8654bfe063f888826b48470927a2c30f96cd" translate="yes" xml:space="preserve">
          <source>You can open a file for input or output using the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; function. It's documented in extravagant detail in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;, but in short:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 関数を使用して、入力または出力用にファイルを開くことができます。それは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;と&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;で贅沢な詳細で文書化されていますが、簡単に言えば：</target>
        </trans-unit>
        <trans-unit id="318c92a1d982aec365969dbe006cbe697f2326c8" translate="yes" xml:space="preserve">
          <source>You can open a file for input or output using the &lt;code&gt;open()&lt;/code&gt; function. It's documented in extravagant detail in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; and &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;, but in short:</source>
          <target state="translated">&lt;code&gt;open()&lt;/code&gt; 関数を使用して、入力または出力用にファイルを開くことができます。それは&lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;と&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;で贅沢な詳細で文書化されていますが、要するに：</target>
        </trans-unit>
        <trans-unit id="76ba77a9bf1f3b31a9c843fd61b1d22b18753582" translate="yes" xml:space="preserve">
          <source>You can open filehandles directly to Perl scalars instead of a file or other resource external to the program. To do so, provide a reference to that scalar as the third argument to &lt;code&gt;open&lt;/code&gt;, like so:</source>
          <target state="translated">プログラムの外部にあるファイルやその他のリソースの代わりに、ファイルハンドルを直接Perlスカラーに開くことができます。これを行うには、次のように、 &lt;code&gt;open&lt;/code&gt; 3番目の引数としてそのスカラーへの参照を指定します。</target>
        </trans-unit>
        <trans-unit id="ce96504bc4965bb9a6b5d98ed74131b7aef0ff79" translate="yes" xml:space="preserve">
          <source>You can override predefined aliases by simply applying define_alias(). The new alias is always evaluated first, and when necessary, define_alias() flushes the internal cache to make the new definition available.</source>
          <target state="translated">define_alias()を適用するだけで、定義済みのエイリアスを上書きすることができます。新しいエイリアスは常に最初に評価され、必要に応じて define_alias()は内部キャッシュをフラッシュして新しい定義を利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="ef785435f6086fb9fd6b00d9def6f92017001719" translate="yes" xml:space="preserve">
          <source>You can override the default and build a shared libperl if you wish (Configure ... -Duseshrplib).</source>
          <target state="translated">必要に応じて、デフォルトを上書きして共有の libperl をビルドすることができます (Configure ...-Duseshrplib)。</target>
        </trans-unit>
        <trans-unit id="97ed2e27db33bd8f090672fcd70380db3caec730" translate="yes" xml:space="preserve">
          <source>You can override this by giving extra arguments; see below.</source>
          <target state="translated">追加の引数を与えることで、これをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="73f74d7cb907a2b7504c7060b4ad0ec87a6506fe" translate="yes" xml:space="preserve">
          <source>You can override this by passing the desired rounding mode as parameter to &lt;code&gt;as_number()&lt;/code&gt; :</source>
          <target state="translated">これをオーバーライドするには、目的の丸めモードをパラメーターとして &lt;code&gt;as_number()&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="82587933cae4e9f30d2fe8c8c0c7863b53e2375e" translate="yes" xml:space="preserve">
          <source>You can override this by passing the desired rounding mode as parameter to &lt;code&gt;as_number()&lt;/code&gt;:</source>
          <target state="translated">目的の丸めモードをパラメーターとして &lt;code&gt;as_number()&lt;/code&gt; に渡すことで、これをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="7321ebb0b4eea0262a3b635a8b77554cb51e976a" translate="yes" xml:space="preserve">
          <source>You can override this default using the &lt;code&gt;T2_FORMATTER&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;T2_FORMATTER&lt;/code&gt; 環境変数を使用して、このデフォルトをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="92b4dbfc185a430ad159257351a9ef1b4f3e946a" translate="yes" xml:space="preserve">
          <source>You can pass an argument to your plugin by appending an &lt;code&gt;=&lt;/code&gt; after the plugin name, eg &lt;code&gt;-PMyPlugin=foo&lt;/code&gt; . You can pass multiple arguments using commas:</source>
          <target state="translated">プラグインに引数を渡すには、プラグイン名の後に &lt;code&gt;=&lt;/code&gt; を追加します（例： &lt;code&gt;-PMyPlugin=foo&lt;/code&gt; )。コンマを使用して複数の引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2736e3b985373c7bf800fbac7652d16fb607a369" translate="yes" xml:space="preserve">
          <source>You can pass an argument to your plugin by appending an &lt;code&gt;=&lt;/code&gt; after the plugin name, eg &lt;code&gt;-PMyPlugin=foo&lt;/code&gt;. You can pass multiple arguments using commas:</source>
          <target state="translated">プラグイン名の後に &lt;code&gt;=&lt;/code&gt; を追加することで、プラグインに引数を渡すことができます（例： &lt;code&gt;-PMyPlugin=foo&lt;/code&gt; )。コンマを使用して複数の引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="577ba47f8467272240629f611eeec9e04fdaf1e6" translate="yes" xml:space="preserve">
          <source>You can pass arguments to your plugin by appending &lt;code&gt;=arg1,arg2,etc&lt;/code&gt; to the plugin name:</source>
          <target state="translated">プラグイン名に &lt;code&gt;=arg1,arg2,etc&lt;/code&gt; を追加することで、プラグインに引数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="386308dc979139b37676d9287d489e82d9329ea5" translate="yes" xml:space="preserve">
          <source>You can pass in &lt;code&gt;&quot;?&quot;&lt;/code&gt; for &lt;code&gt;$svAccess&lt;/code&gt; to have an error message displayed summarizing its possible values. This is very handy when doing on-the-fly programming using the Perl debugger:</source>
          <target state="translated">&lt;code&gt;&quot;?&quot;&lt;/code&gt; 渡すことができます 以下のために &lt;code&gt;$svAccess&lt;/code&gt; 持っているエラーメッセージは、その可能な値をまとめた表示しました。これは、Perlデバッガーを使用してオンザフライプログラミングを行う場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="2015c5b11227b45450c075073adbe76ec83f58eb" translate="yes" xml:space="preserve">
          <source>You can peek into the bisecting process with &lt;code&gt;git bisect log&lt;/code&gt; and &lt;code&gt;git bisect visualize&lt;/code&gt;. &lt;code&gt;git bisect reset&lt;/code&gt; will get you out of bisect mode.</source>
          <target state="translated">あなたはと二分するプロセスにのぞくことができます &lt;code&gt;git bisect log&lt;/code&gt; と &lt;code&gt;git bisect visualize&lt;/code&gt; 。 &lt;code&gt;git bisect reset&lt;/code&gt; を使用すると、bisectモードが終了します。</target>
        </trans-unit>
        <trans-unit id="d9b26d7e57483cd1ed4bf2659755481a3ca93653" translate="yes" xml:space="preserve">
          <source>You can pick up prebuilt binaries for Solaris from &lt;a href=&quot;http://www.sunfreeware.com/&quot;&gt;http://www.sunfreeware.com/&lt;/a&gt;, &lt;a href=&quot;http://www.blastwave.org&quot;&gt;http://www.blastwave.org&lt;/a&gt;, ActiveState &lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;, and &lt;a href=&quot;http://www.perl.com/&quot;&gt;http://www.perl.com/&lt;/a&gt; under the Binaries list at the top of the page. There are probably other sources as well. Please note that these sites are under the control of their respective owners, not the perl developers.</source>
          <target state="translated">あなたはからSolaris用のビルド済みのバイナリを拾うことができ&lt;a href=&quot;http://www.sunfreeware.com/&quot;&gt;http://www.sunfreeware.com/&lt;/a&gt;、&lt;a href=&quot;http://www.blastwave.org&quot;&gt;http://www.blastwave.org&lt;/a&gt;、ActiveStateの&lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;、と&lt;a href=&quot;http://www.perl.com/&quot;&gt;のhttp：//www.perl&lt;/a&gt;ページ上部のバイナリリストの下にある.com /。おそらく他のソースもあるでしょう。これらのサイトは、perl開発者ではなく、それぞれの所有者の管理下にあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="afad181efc494d271a3d1339fc4bea9100125dd3" translate="yes" xml:space="preserve">
          <source>You can preallocate space for a hash by assigning to the keys() function. This rounds up the allocated buckets to the next power of two:</source>
          <target state="translated">keys()関数に代入することで、ハッシュのためのスペースを事前に確保することができます。これは、割り当てられたバケットを次の 2 の累乗に丸めます。</target>
        </trans-unit>
        <trans-unit id="627b7e3f88900bea51795d1c0d405285e2cec7cd" translate="yes" xml:space="preserve">
          <source>You can prevent regeneration by adding the setting</source>
          <target state="translated">設定を追加することで、再生を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="6ece78405c91977c16dd3a742419b856c5fd5394" translate="yes" xml:space="preserve">
          <source>You can probably expect your users to be able to guess that they can request less CPU or memory or just &quot;less&quot; overall.</source>
          <target state="translated">ユーザーが少ないCPUやメモリを要求できるか、全体的に「少ない」だけだと推測できるのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="02d6761deb2c7c6b18b97139af69b3430e2b5002" translate="yes" xml:space="preserve">
          <source>You can provide an argument, which will be available in the var &lt;code&gt;$REGMARK&lt;/code&gt; after the match completes.</source>
          <target state="translated">引数を指定できます。引数は、一致が完了した後、var &lt;code&gt;$REGMARK&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="2bb56a3e59af78b8d5da4daff16effef12d060e2" translate="yes" xml:space="preserve">
          <source>You can provide this layer when &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;ing the file:</source>
          <target state="translated">ファイルを &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ときに、このレイヤーを提供できます。</target>
        </trans-unit>
        <trans-unit id="add06e5808df8acbd3f7d2e5d056882c7fd1db80" translate="yes" xml:space="preserve">
          <source>You can provide this layer when &lt;code&gt;open&lt;/code&gt;ing the file:</source>
          <target state="translated">ファイルを &lt;code&gt;open&lt;/code&gt; ときにこのレイヤーを指定できます。</target>
        </trans-unit>
        <trans-unit id="87d0d59bd2621cca1e6ec0d854420947ec5a4ec5" translate="yes" xml:space="preserve">
          <source>You can put a &lt;code&gt;+&lt;/code&gt; in front of the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; to indicate that you want both read and write access to the file; thus &lt;code&gt;+&amp;lt;&lt;/code&gt; is almost always preferred for read/write updates--the &lt;code&gt;+&amp;gt;&lt;/code&gt; mode would clobber the file first. You can't usually use either read-write mode for updating textfiles, since they have variable-length records. See the &lt;b&gt;-i&lt;/b&gt; switch in &lt;a href=&quot;../perlrun&quot;&gt;perlrun&lt;/a&gt; for a better approach. The file is created with permissions of &lt;code&gt;0666&lt;/code&gt; modified by the process's &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; の前に &lt;code&gt;+&lt;/code&gt; を付けて、ファイルへの読み取りアクセスと書き込みアクセスの両方が必要であることを示すことができます。したがって、読み取り/書き込みの更新には &lt;code&gt;+&amp;lt;&lt;/code&gt; がほとんど常に推奨されます。 &lt;code&gt;+&amp;gt;&lt;/code&gt; モードでは、最初にファイルが上書きされます。テキストファイルは可変長レコードを持っているため、テキストファイルの更新には通常、どちらの読み取り/書き込みモードも使用できません。より良いアプローチについては、&lt;a href=&quot;../perlrun&quot;&gt;perlrun&lt;/a&gt;の&lt;b&gt;-i&lt;/b&gt;スイッチを参照してください。ファイルは、プロセスの &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 値によって変更された &lt;code&gt;0666&lt;/code&gt; の権限で作成されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a5c78cfaaebb70f40ad0f93e0301fba4283c243b" translate="yes" xml:space="preserve">
          <source>You can put a &lt;code&gt;+&lt;/code&gt; in front of the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; to indicate that you want both read and write access to the file; thus &lt;code&gt;+&amp;lt;&lt;/code&gt; is almost always preferred for read/write updates--the &lt;code&gt;+&amp;gt;&lt;/code&gt; mode would clobber the file first. You can't usually use either read-write mode for updating textfiles, since they have variable-length records. See the &lt;b&gt;-i&lt;/b&gt; switch in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for a better approach. The file is created with permissions of &lt;code&gt;0666&lt;/code&gt; modified by the process's &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; の前に &lt;code&gt;+&lt;/code&gt; を付けて、ファイルへの読み取りアクセスと書き込みアクセスの両方が必要であることを示すことができます。したがって、読み取り/書き込みの更新には &lt;code&gt;+&amp;lt;&lt;/code&gt; がほとんど常に推奨されます。 &lt;code&gt;+&amp;gt;&lt;/code&gt; モードでは、最初にファイルが上書きされます。テキストファイルは可変長レコードを持っているため、テキストファイルの更新には通常、どちらの読み取り/書き込みモードも使用できません。より良いアプローチについては、&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;の&lt;b&gt;-i&lt;/b&gt;スイッチを参照してください。ファイルは、プロセスの &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 値によって変更された &lt;code&gt;0666&lt;/code&gt; の権限で作成されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="764b0ecb923d2a9a161c6836b490b2d71dbd0c6c" translate="yes" xml:space="preserve">
          <source>You can put a &lt;code&gt;+&lt;/code&gt; in front of the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; to indicate that you want both read and write access to the file; thus &lt;code&gt;+&amp;lt;&lt;/code&gt; is almost always preferred for read/write updates--the &lt;code&gt;+&amp;gt;&lt;/code&gt; mode would clobber the file first. You can't usually use either read-write mode for updating textfiles, since they have variable-length records. See the &lt;b&gt;-i&lt;/b&gt; switch in &lt;a href=&quot;perlrun#-i%5Bextension%5D&quot;&gt;perlrun&lt;/a&gt; for a better approach. The file is created with permissions of &lt;code&gt;0666&lt;/code&gt; modified by the process's &lt;a href=&quot;#umask-EXPR&quot;&gt;&lt;code&gt;umask&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="translated">&lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; の前に &lt;code&gt;+&lt;/code&gt; を付けて、ファイルへの読み取りアクセスと書き込みアクセスの両方が必要であることを示すことができます。したがって、ほとんどの場合、読み取り/書き込み更新には &lt;code&gt;+&amp;lt;&lt;/code&gt; が優先されます。 &lt;code&gt;+&amp;gt;&lt;/code&gt; モードでは最初にファイルが上書きされます。テキストファイルには可変長のレコードがあるため、通常、どちらの読み取り/書き込みモードを使用してテキストファイルを更新することはできません。より良いアプローチについては、&lt;a href=&quot;perlrun#-i%5Bextension%5D&quot;&gt;perlrun&lt;/a&gt;の&lt;b&gt;-i&lt;/b&gt;スイッチを参照してください。このファイルは、プロセスの&lt;a href=&quot;#umask-EXPR&quot;&gt; &lt;code&gt;umask&lt;/code&gt; &lt;/a&gt;値によって変更された &lt;code&gt;0666&lt;/code&gt; のアクセス許可で作成されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7c8c4f9eec7c5f71cbfe88cf0f5ec847885d12d2" translate="yes" xml:space="preserve">
          <source>You can put any backslash sequence character class (with the exception of &lt;code&gt;\N&lt;/code&gt; and &lt;code&gt;\R&lt;/code&gt; ) inside a bracketed character class, and it will act just as if you had put all characters matched by the backslash sequence inside the character class. For instance, &lt;code&gt;[a-f\d]&lt;/code&gt; matches any decimal digit, or any of the lowercase letters between 'a' and 'f' inclusive.</source>
          <target state="translated">括弧で囲まれた文字クラス内に任意のバックスラッシュシーケンス文字クラス（ &lt;code&gt;\N&lt;/code&gt; と &lt;code&gt;\R&lt;/code&gt; 除く）を置くことができ、バックスラッシュシーケンスと一致するすべての文字を文字クラス内に置いたかのように動作します。たとえば、 &lt;code&gt;[a-f\d]&lt;/code&gt; 、任意の10進数、または 'a'と 'f'の間の小文字のいずれかに一致します。</target>
        </trans-unit>
        <trans-unit id="3f74a5262161afb2e7d36af12d2c0a5e7f5326b6" translate="yes" xml:space="preserve">
          <source>You can put any backslash sequence character class (with the exception of &lt;code&gt;\N&lt;/code&gt; and &lt;code&gt;\R&lt;/code&gt;) inside a bracketed character class, and it will act just as if you had put all characters matched by the backslash sequence inside the character class. For instance, &lt;code&gt;[a-f\d]&lt;/code&gt; matches any decimal digit, or any of the lowercase letters between 'a' and 'f' inclusive.</source>
          <target state="translated">角かっこで囲まれた文字クラス内に任意のバックスラッシュシーケンス文字クラス（ &lt;code&gt;\N&lt;/code&gt; と &lt;code&gt;\R&lt;/code&gt; 除く）を配置でき、バックスラッシュシーケンスと一致するすべての文字を文字クラス内に配置した場合と同じように機能します。たとえば、 &lt;code&gt;[a-f\d]&lt;/code&gt; 、任意の10進数、または「a」と「f」の間の小文字のいずれかに一致します。</target>
        </trans-unit>
        <trans-unit id="a88a6953f485e8c5fc3aeb601fd219de754900f0" translate="yes" xml:space="preserve">
          <source>You can read from an open filehandle using the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator. In scalar context it reads a single line from the filehandle, and in list context it reads the whole file in, assigning each line to an element of the list:</source>
          <target state="translated">&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子を使用して、開いているファイルハンドルから読み取ることができます。スカラーコンテキストではファイルハンドルから1行を読み取り、リストコンテキストではファイル全体を読み取り、各行をリストの要素に割り当てます。</target>
        </trans-unit>
        <trans-unit id="91ab2ef6e453973e41443b71f9d3e34175e99630" translate="yes" xml:space="preserve">
          <source>You can read more about profiling in</source>
          <target state="translated">プロファイリングについての詳細は</target>
        </trans-unit>
        <trans-unit id="00f2324bbf3536a80f241b597db331417bcbe8c1" translate="yes" xml:space="preserve">
          <source>You can redistribute and/or modify this document under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはPerlと同じ条件で再配布や変更が可能です。</target>
        </trans-unit>
        <trans-unit id="d7dc0e1fc9ad5b87e77bf63d3f4081648cdf49ca" translate="yes" xml:space="preserve">
          <source>You can request that the flock() constants (LOCK_SH, LOCK_EX, LOCK_NB and LOCK_UN) be provided by using the tag &lt;code&gt;:&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; . See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="translated">あなたは群れ（）定数（LOCK_SH、LOCK_EX、LOCK_NBとLOCK_UN）はタグを使用して提供されることを要求することができます &lt;code&gt;:&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 。&lt;a href=&quot;exporter&quot;&gt;エクスポーターを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bd402063fc23c838fdd082ec0039119a677f8477" translate="yes" xml:space="preserve">
          <source>You can request that the flock() constants (LOCK_SH, LOCK_EX, LOCK_NB and LOCK_UN) be provided by using the tag &lt;code&gt;:flock&lt;/code&gt;. See &lt;a href=&quot;exporter&quot;&gt;Exporter&lt;/a&gt;.</source>
          <target state="translated">タグ &lt;code&gt;:flock&lt;/code&gt; を使用して、flock（）定数（LOCK_SH、LOCK_EX、LOCK_NB、およびLOCK_UN）を指定するように要求できます。&lt;a href=&quot;exporter&quot;&gt;Exporterを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e9f4701466ab8780e7a2b0e9f2a17e8d0b7017d5" translate="yes" xml:space="preserve">
          <source>You can request that the old constants (FAPPEND, FASYNC, FCREAT, FDEFER, FEXCL, FNDELAY, FNONBLOCK, FSYNC, FTRUNC) be provided for compatibility reasons by using the tag &lt;code&gt;:Fcompat&lt;/code&gt; . For new applications the newer versions of these constants are suggested (O_APPEND, O_ASYNC, O_CREAT, O_DEFER, O_EXCL, O_NDELAY, O_NONBLOCK, O_SYNC, O_TRUNC).</source>
          <target state="translated">&lt;code&gt;:Fcompat&lt;/code&gt; タグを使用すると、互換性の理由から古い定数（FAPPEND、FASYNC、FCREAT、FDEFER、FEXCL、FNDELAY、FNONBLOCK、FSYNC、FTRUNC）を提供するように要求できます。新しいアプリケーションでは、これらの定数の新しいバージョンが推奨されます（O_APPEND、O_ASYNC、O_CREAT、O_DEFER、O_EXCL、O_NDELAY、O_NONBLOCK、O_SYNC、O_TRUNC）。</target>
        </trans-unit>
        <trans-unit id="2443b5b8d3d70bb42e56fa3047f34fa5b05587ad" translate="yes" xml:space="preserve">
          <source>You can request that the old constants (FAPPEND, FASYNC, FCREAT, FDEFER, FEXCL, FNDELAY, FNONBLOCK, FSYNC, FTRUNC) be provided for compatibility reasons by using the tag &lt;code&gt;:Fcompat&lt;/code&gt;. For new applications the newer versions of these constants are suggested (O_APPEND, O_ASYNC, O_CREAT, O_DEFER, O_EXCL, O_NDELAY, O_NONBLOCK, O_SYNC, O_TRUNC).</source>
          <target state="translated">タグ &lt;code&gt;:Fcompat&lt;/code&gt; を使用して、互換性の理由から古い定数（FAPPEND、FASYNC、FCREAT、FDEFER、FEXCL、FNDELAY、FNONBLOCK、FSYNC、FTRUNC）の提供を要求できます。新しいアプリケーションの場合、これらの定数の新しいバージョンが提案されます（O_APPEND、O_ASYNC、O_CREAT、O_DEFER、O_EXCL、O_NDELAY、O_NONBLOCK、O_SYNC、O_TRUNC）。</target>
        </trans-unit>
        <trans-unit id="caaaaed5194349d7e53889bf69ba7c88d167c7d9" translate="yes" xml:space="preserve">
          <source>You can reset this cache by assigning an empty hashref to it, or individually remove keys.</source>
          <target state="translated">このキャッシュをリセットするには、空のハッシュリフを割り当てるか、個別にキーを削除します。</target>
        </trans-unit>
        <trans-unit id="c4fc671bd928d082df8dcbc4d77c81ac14538200" translate="yes" xml:space="preserve">
          <source>You can retrieve the result via -&amp;gt;data but usually you don't have to because the stringify operator (&quot;&quot;) is overridden to do exactly that.</source>
          <target state="translated">結果は-&amp;gt; dataを介して取得できますが、文字列化演算子（ &quot;&quot;）がオーバーライドされて正確に実行されるため、通常は不要です。</target>
        </trans-unit>
        <trans-unit id="1bc6861c31e761832a97f33e3f90e04d306eb3ee" translate="yes" xml:space="preserve">
          <source>You can return the</source>
          <target state="translated">を返すことができます。</target>
        </trans-unit>
        <trans-unit id="c5203f3ceab8b6b9bc7b6ca2deddcda6d494d3e9" translate="yes" xml:space="preserve">
          <source>You can run a command in the background with:</source>
          <target state="translated">でバックグラウンドでコマンドを実行することができます。</target>
        </trans-unit>
        <trans-unit id="c92356e98ca4379f9b92a2bcc41db6e953218853" translate="yes" xml:space="preserve">
          <source>You can run all the tests with the following commands:</source>
          <target state="translated">以下のコマンドですべてのテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="dab3a450deb8a8c4cd405b2e23f88d23efbbf2ec" translate="yes" xml:space="preserve">
          <source>You can run an individual test by a command similar to</source>
          <target state="translated">と似たようなコマンドで個別のテストを実行することができます。</target>
        </trans-unit>
        <trans-unit id="7019e534322025bbdc3a56a0ada6decc0fac6688" translate="yes" xml:space="preserve">
          <source>You can run into similar problems when you store &lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; or &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; into AVs or HVs. Trying to modify such elements will give you the following error:</source>
          <target state="translated">&lt;code&gt;&amp;amp;PL_sv_yes&lt;/code&gt; または &lt;code&gt;&amp;amp;PL_sv_no&lt;/code&gt; をAVまたはHVに格納すると、同様の問題が発生する可能性があります。このような要素を変更しようとすると、次のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="48a3f2e45a171b8580b9277e027aa9cbf304aecf" translate="yes" xml:space="preserve">
          <source>You can run part of the test suite by hand by using one of the following commands from the</source>
          <target state="translated">テストスイートの一部を手作業で実行するには、次のコマンドのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="8428671802bcea1f2c15f381a5fa2ece33821ca0" translate="yes" xml:space="preserve">
          <source>You can safely ignore the line about &quot;prototyping behavior&quot; - it is explained in &lt;a href=&quot;perlxs#The-PROTOTYPES%3A-Keyword&quot;&gt;&quot;The PROTOTYPES: Keyword&quot; in perlxs&lt;/a&gt;.</source>
          <target state="translated">「プロトタイピングの動作」に関する行は無視してかまいません。これは&lt;a href=&quot;perlxs#The-PROTOTYPES%3A-Keyword&quot;&gt;、perlxsの「プロトタイプ：キーワード」で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="9677002a55994cfb79edd644465223dc6f275627" translate="yes" xml:space="preserve">
          <source>You can safely ignore the line about &quot;prototyping behavior&quot; - it is explained in &lt;a href=&quot;perlxs#The-PROTOTYPES%3a-Keyword&quot;&gt;The PROTOTYPES: Keyword in perlxs&lt;/a&gt;.</source>
          <target state="translated">「プロトタイピング動作」に関する行は無視してかまいません。これについては&lt;a href=&quot;perlxs#The-PROTOTYPES%3a-Keyword&quot;&gt;、PROTOTYPES：キーワードin perlxsで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="00bbb0e9f9b7d267fed175221358a00b2882f0e8" translate="yes" xml:space="preserve">
          <source>You can safely replace &lt;code&gt;isa&lt;/code&gt; with &lt;code&gt;DOES&lt;/code&gt; (although the converse is not true).</source>
          <target state="translated">&lt;code&gt;isa&lt;/code&gt; を &lt;code&gt;DOES&lt;/code&gt; で安全に置き換えることができます（ただし、逆は当てはまりません）。</target>
        </trans-unit>
        <trans-unit id="f3c22b7008ae62adff98ca02982c07c25fd7ebcc" translate="yes" xml:space="preserve">
          <source>You can say &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; and &lt;code&gt;*foo{NAME}&lt;/code&gt; to find out what name and package the *foo symbol table entry comes from. This may be useful in a subroutine that gets passed typeglobs as arguments:</source>
          <target state="translated">あなたが言うことができます &lt;code&gt;*foo{PACKAGE}&lt;/code&gt; や &lt;code&gt;*foo{NAME}&lt;/code&gt; 何名を見つけると* fooのシンボルテーブルエントリはから来てパッケージ化します。これは、型グロブを引数として渡すサブルーチンで役立ちます。</target>
        </trans-unit>
        <trans-unit id="1966e0b952d6a25db96c9f73b3f341a3e54cf712" translate="yes" xml:space="preserve">
          <source>You can say &lt;code&gt;BEGIN { $Exporter::Verbose=1 }&lt;/code&gt; to see how the specifications are being processed and what is actually being imported into modules.</source>
          <target state="translated">&lt;code&gt;BEGIN { $Exporter::Verbose=1 }&lt;/code&gt; と言うと、仕様がどのように処理され、実際にモジュールに何がインポートされているかを確認できます。</target>
        </trans-unit>
        <trans-unit id="0ffa8d04bb2be838b7be17e141561b51ef27dbcb" translate="yes" xml:space="preserve">
          <source>You can search CPAN on &lt;a href=&quot;http://metacpan.org&quot;&gt;http://metacpan.org&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt;.</source>
          <target state="translated">CPANは&lt;a href=&quot;http://metacpan.org&quot;&gt;http://metacpan.org&lt;/a&gt;または&lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/で&lt;/a&gt;検索できます。</target>
        </trans-unit>
        <trans-unit id="60a987a3bb2545fd9e1606745f4c8b7aa743cafc" translate="yes" xml:space="preserve">
          <source>You can search CPAN on &lt;a href=&quot;http://metacpan.org&quot;&gt;http://metacpan.org&lt;/a&gt;.</source>
          <target state="translated">CPANは&lt;a href=&quot;http://metacpan.org&quot;&gt;http://metacpan.orgで&lt;/a&gt;検索できます。</target>
        </trans-unit>
        <trans-unit id="decda746759f350cc820cd1383e913824bf2e767" translate="yes" xml:space="preserve">
          <source>You can search for &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; related bug reports at &lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt;. If needed submit any new bugs, problems, patches, etc. to: &lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threads&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;関連のバグレポートは、&lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http：//rt.cpan.org/Public/で&lt;/a&gt;検索できます。必要に応じて、新しいバグ、問題、パッチなどを&lt;a href=&quot;http://rt.cpan.org/Public/Dist/Display.html?Name=threads&quot;&gt;http://rt.cpan.org/Public/Dist/Display.html?Name=threadsに&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="e97ec90c5b6d0afa6264e332a770f1df3b2195d9" translate="yes" xml:space="preserve">
          <source>You can search for &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; related bug reports at &lt;a href=&quot;https://rt.cpan.org/Public/&quot;&gt;https://rt.cpan.org/Public/&lt;/a&gt;. If needed submit any new bugs, problems, patches, etc. to: &lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=threads&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=threads&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rt.cpan.org/Public/&quot;&gt;https://rt.cpan.org/Public/&lt;/a&gt;で&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;関連のバグレポートを検索できます。必要に応じて、新しいバグ、問題、パッチなどを&lt;a href=&quot;https://rt.cpan.org/Public/Dist/Display.html?Name=threads&quot;&gt;https://rt.cpan.org/Public/Dist/Display.html?Name=threadsに&lt;/a&gt;送信してください。</target>
        </trans-unit>
        <trans-unit id="802f6c1f9273b694e1c0cdbd6edb66de5f11d6b4" translate="yes" xml:space="preserve">
          <source>You can see from the above that the effect of &lt;code&gt;unicode_strings&lt;/code&gt; increased over several Perl releases. (And Perl's support for Unicode continues to improve; it's best to use the latest available release in order to get the most complete and accurate results possible.) Note that &lt;code&gt;unicode_strings&lt;/code&gt; is automatically chosen if you &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher.</source>
          <target state="translated">上記から、いくつかのPerlリリースで &lt;code&gt;unicode_strings&lt;/code&gt; の効果が増加していることがわかります。（PerlによるUnicodeのサポートは改善され続けています。可能な限り完全で正確な結果を得るには、利用可能な最新のリリースを使用するのが最善です。） &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 以降を&lt;a href=&quot;functions/use&quot;&gt;使用している&lt;/a&gt;場合は、 &lt;code&gt;unicode_strings&lt;/code&gt; が自動的に選択されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="46b2856a8d70679ee475ab545d871ca0c4c93809" translate="yes" xml:space="preserve">
          <source>You can see from the above that the effect of &lt;code&gt;unicode_strings&lt;/code&gt; increased over several Perl releases. (And Perl's support for Unicode continues to improve; it's best to use the latest available release in order to get the most complete and accurate results possible.) Note that &lt;code&gt;unicode_strings&lt;/code&gt; is automatically chosen if you &lt;code&gt;use 5.012&lt;/code&gt; or higher.</source>
          <target state="translated">上記から、 &lt;code&gt;unicode_strings&lt;/code&gt; の効果がいくつかのPerlリリースで増加したことがわかります。（そして、PerlのUnicodeのサポートは改善され続けています。可能な限り最も完全で正確な結果を得るには、入手可能な最新のリリースを使用するのが最善です。） &lt;code&gt;use 5.012&lt;/code&gt; 以降を使用する場合、 &lt;code&gt;unicode_strings&lt;/code&gt; が自動的に選択されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dd3b0475986391ff28ff08c186138fbea404f4a4" translate="yes" xml:space="preserve">
          <source>You can see recent commits:</source>
          <target state="translated">最近のコミットを見ることができます。</target>
        </trans-unit>
        <trans-unit id="169f5a8ded36f882f89340ed4481186781ecd0dd" translate="yes" xml:space="preserve">
          <source>You can see this with the following:</source>
          <target state="translated">これは以下のようなもので見ることができます。</target>
        </trans-unit>
        <trans-unit id="f79ce90f40044bb7e9b04185de2c778bbed128b2" translate="yes" xml:space="preserve">
          <source>You can see what files are changed:</source>
          <target state="translated">どのようなファイルが変更されたかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="a30453af312489e18bd58825504c04b5c3c816c5" translate="yes" xml:space="preserve">
          <source>You can see whether your Perl was built with PerlIO by running &lt;code&gt;perl -V&lt;/code&gt; and looking for the &lt;code&gt;useperlio=&lt;/code&gt; line. If &lt;code&gt;useperlio&lt;/code&gt; is &lt;code&gt;define&lt;/code&gt; , you have PerlIO; otherwise you don't.</source>
          <target state="translated">PerlがPerlIOでビルドされたかどうかを確認するには、 &lt;code&gt;perl -V&lt;/code&gt; を実行し、 &lt;code&gt;useperlio=&lt;/code&gt; 行を探します。 &lt;code&gt;useperlio&lt;/code&gt; が &lt;code&gt;define&lt;/code&gt; の場合、PerlIOがあります。そうでなければあなたはしません。</target>
        </trans-unit>
        <trans-unit id="1d64238a1676682fd78cc68f5aa21599974d313a" translate="yes" xml:space="preserve">
          <source>You can see which (or neither) threading flavour you have by running &lt;code&gt;perl -V&lt;/code&gt; and looking at the &lt;code&gt;Platform&lt;/code&gt; section. If you have &lt;code&gt;useithreads=define&lt;/code&gt; you have ithreads, if you have &lt;code&gt;use5005threads=define&lt;/code&gt; you have 5.005 threads. If you have neither, you don't have any thread support built in. If you have both, you are in trouble.</source>
          <target state="translated">&lt;code&gt;perl -V&lt;/code&gt; を実行して &lt;code&gt;Platform&lt;/code&gt; セクションを確認することで、どの（またはどちらでもない）スレッドの種類を確認できます。あなたが持っている場合は &lt;code&gt;useithreads=define&lt;/code&gt; あなたが持っている場合は、iスレッドを持っている &lt;code&gt;use5005threads=define&lt;/code&gt; あなたは5.005スレッドを持っています。どちらもない場合、スレッドサポートは組み込まれていません。両方ある場合、問題が発生します。</target>
        </trans-unit>
        <trans-unit id="8dc1d6869249a32d7f829c0b3a5e051d9383488b" translate="yes" xml:space="preserve">
          <source>You can see why the arrows are important. Without them, we would have had to write &lt;code&gt;${$a[1]}[2]&lt;/code&gt; instead of &lt;code&gt;$a[1][2]&lt;/code&gt; . For three-dimensional arrays, they let us write &lt;code&gt;$x[2][3][5]&lt;/code&gt; instead of the unreadable &lt;code&gt;${${$x[2]}[3]}[5]&lt;/code&gt; .</source>
          <target state="translated">矢印が重要な理由がわかります。それらがなければ、 &lt;code&gt;${$a[1]}[2]&lt;/code&gt; 代わりに &lt;code&gt;$a[1][2]&lt;/code&gt; {$ a [1]} [2]を書かなければならなかっただろう。3次元配列の場合、読み取り不可能な &lt;code&gt;${${$x[2]}[3]}[5]&lt;/code&gt; 代わりに &lt;code&gt;$x[2][3][5]&lt;/code&gt; 書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="317655eca25364352776afb5bed80ace1fea4f49" translate="yes" xml:space="preserve">
          <source>You can see why the arrows are important. Without them, we would have had to write &lt;code&gt;${$a[1]}[2]&lt;/code&gt; instead of &lt;code&gt;$a[1][2]&lt;/code&gt;. For three-dimensional arrays, they let us write &lt;code&gt;$x[2][3][5]&lt;/code&gt; instead of the unreadable &lt;code&gt;${${$x[2]}[3]}[5]&lt;/code&gt;.</source>
          <target state="translated">矢印が重要である理由がわかります。それらがなければ、 &lt;code&gt;${$a[1]}[2]&lt;/code&gt; 代わりに &lt;code&gt;$a[1][2]&lt;/code&gt; {$ a [1]} [2]を書く必要がありました。3次元配列の場合、読み取り不可能な &lt;code&gt;${${$x[2]}[3]}[5]&lt;/code&gt; 代わりに &lt;code&gt;$x[2][3][5]&lt;/code&gt; 記述できます。</target>
        </trans-unit>
        <trans-unit id="b46ad3852d414e337d72bbed36bfa27c57b29adc" translate="yes" xml:space="preserve">
          <source>You can set and query each of these options interactively in the cpan shell with the &lt;code&gt;o conf&lt;/code&gt; or the &lt;code&gt;o conf init&lt;/code&gt; command as specified below.</source>
          <target state="translated">以下のように &lt;code&gt;o conf&lt;/code&gt; または &lt;code&gt;o conf init&lt;/code&gt; コマンドを使用して、cpanシェルでこれらの各オプションをインタラクティブに設定および照会できます。</target>
        </trans-unit>
        <trans-unit id="16508b3f102bc9307eda4b040c0235215ac4aad7" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; elements to set the POSIX realtime signal handlers, use &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; on the elements, and use &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; to find out how many POSIX realtime signals there are available &lt;code&gt;(SIGRTMAX - SIGRTMIN + 1&lt;/code&gt; , the &lt;code&gt;SIGRTMAX&lt;/code&gt; is a valid POSIX realtime signal).</source>
          <target state="translated">あなたは、設定することができます &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; 、POSIXリアルタイムシグナルハンドラを設定するための要素を使用し &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt;&lt;/code&gt; 要素の上に、利用 &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; 上 &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; 利用可能であるどのように多くのPOSIXリアルタイムシグナルを見つけるために &lt;code&gt;(SIGRTMAX - SIGRTMIN + 1&lt;/code&gt; 、 &lt;code&gt;SIGRTMAX&lt;/code&gt; は有効なPOSIXリアルタイム信号です）。</target>
        </trans-unit>
        <trans-unit id="79ff7651cbb8cbdef1e9fddeb8df40c39df09e89" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; elements to set the POSIX realtime signal handlers, use &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;exists&lt;/code&gt; on the elements, and use &lt;code&gt;scalar&lt;/code&gt; on the &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; to find out how many POSIX realtime signals there are available &lt;code&gt;(SIGRTMAX - SIGRTMIN + 1&lt;/code&gt;, the &lt;code&gt;SIGRTMAX&lt;/code&gt; is a valid POSIX realtime signal).</source>
          <target state="translated">あなたは、設定することができます &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; 、POSIXリアルタイムシグナルハンドラを設定するための要素を使用し &lt;code&gt;delete&lt;/code&gt; して &lt;code&gt;exists&lt;/code&gt; 要素の上に、利用 &lt;code&gt;scalar&lt;/code&gt; 上 &lt;code&gt;%POSIX::SIGRT&lt;/code&gt; 利用可能であるどのように多くのPOSIXリアルタイムシグナルを見つけるために &lt;code&gt;(SIGRTMAX - SIGRTMIN + 1&lt;/code&gt; 、 &lt;code&gt;SIGRTMAX&lt;/code&gt; は有効なPOSIXリアルタイムシグナルです）。</target>
        </trans-unit>
        <trans-unit id="3f6da332e187deef2beadbe770ab6beeaee593c3" translate="yes" xml:space="preserve">
          <source>You can set the values of the &lt;code&gt;%SIG&lt;/code&gt; hash to be the functions you want to handle the signal. After perl catches the signal, it looks in &lt;code&gt;%SIG&lt;/code&gt; for a key with the same name as the signal, then calls the subroutine value for that key.</source>
          <target state="translated">&lt;code&gt;%SIG&lt;/code&gt; ハッシュの値を、信号を処理する関数に設定できます。perlがシグナルをキャッチすると、 &lt;code&gt;%SIG&lt;/code&gt; でシグナルと同じ名前のキーを探し、そのキーのサブルーチン値を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4b3c0110aa09f64da5c5df5eac7d33e443e6104d" translate="yes" xml:space="preserve">
          <source>You can set the variable &lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; to 0 if you are sure the filesystem you are scanning reflects the number of subdirectories in the parent directory's &lt;code&gt;nlink&lt;/code&gt; count.</source>
          <target state="translated">スキャンしているファイルシステムが親ディレクトリの &lt;code&gt;nlink&lt;/code&gt; カウント内のサブディレクトリの数を反映していることが確実な場合は、変数 &lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; を0に設定できます。</target>
        </trans-unit>
        <trans-unit id="bee1469992dc1b9c8f0b603349904e7ab865deb8" translate="yes" xml:space="preserve">
          <source>You can set the variable &lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; to 1, if you want to force File::Find to always stat directories. This was used for file systems that do not have an &lt;code&gt;nlink&lt;/code&gt; count matching the number of sub-directories. Examples are ISO-9660 (CD-ROM), AFS, HPFS (OS/2 file system), FAT (DOS file system) and a couple of others.</source>
          <target state="translated">変数 &lt;code&gt;$File::Find::dont_use_nlink&lt;/code&gt; を1に設定して、File :: Findが常にディレクトリをstatするようにすることができます。これは、サブディレクトリの数と一致する &lt;code&gt;nlink&lt;/code&gt; カウントを持たないファイルシステムに使用されていました。たとえば、ISO-9660（CD-ROM）、AFS、HPFS（OS / 2ファイルシステム）、FAT（DOSファイルシステム）などです。</target>
        </trans-unit>
        <trans-unit id="5472b025e4a5169aacbf87f4ca700aef907769b9" translate="yes" xml:space="preserve">
          <source>You can set these attributes on the parser object before you call &lt;code&gt;parse_file&lt;/code&gt; (or a similar method) on it:</source>
          <target state="translated">&lt;code&gt;parse_file&lt;/code&gt; （または同様のメソッド）を呼び出す前に、パーサーオブジェクトにこれらの属性を設定できます。</target>
        </trans-unit>
        <trans-unit id="d11091c76638b6f543204cac0351812864021173" translate="yes" xml:space="preserve">
          <source>You can set these with cereg.exe, a (remote) registry editor or via the PerlIDE.</source>
          <target state="translated">これらの設定は、cereg.exe、(リモートの)レジストリエディタ、またはPerlIDE経由で行うことができます。</target>
        </trans-unit>
        <trans-unit id="a45d7d92f838159f25ad37c4eba92cfbf985fe7f" translate="yes" xml:space="preserve">
          <source>You can set this in your &lt;code&gt;CPAN.pm&lt;/code&gt; configuration so modules automatically install in your private library directory when you use the CPAN.pm shell:</source>
          <target state="translated">これを &lt;code&gt;CPAN.pm&lt;/code&gt; 構成で設定して、CPAN.pmシェルを使用するときにモジュールがプライベートライブラリディレクトリに自動的にインストールされるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="30390221c1f07dd9de6ff3b92b3e83f72d1fc24c" translate="yes" xml:space="preserve">
          <source>You can sometimes</source>
          <target state="translated">時々、あなたは</target>
        </trans-unit>
        <trans-unit id="7db7fa33c434550059625aa8e8d2392ae86f8c71" translate="yes" xml:space="preserve">
          <source>You can specify a character class, by enclosing a list of characters in &lt;code&gt;[]&lt;/code&gt; , which will match any character from the list. If the first character after the &quot;[&quot; is &quot;^&quot;, the class matches any character not in the list. Within a list, the &quot;-&quot; character specifies a range, so that &lt;code&gt;a-z&lt;/code&gt; represents all characters between &quot;a&quot; and &quot;z&quot;, inclusive. If you want either &quot;-&quot; or &quot;]&quot; itself to be a member of a class, put it at the start of the list (possibly after a &quot;^&quot;), or escape it with a backslash. &quot;-&quot; is also taken literally when it is at the end of the list, just before the closing &quot;]&quot;. (The following all specify the same class of three characters: &lt;code&gt;[-az]&lt;/code&gt; , &lt;code&gt;[az-]&lt;/code&gt; , and &lt;code&gt;[a\-z]&lt;/code&gt; . All are different from &lt;code&gt;[a-z]&lt;/code&gt; , which specifies a class containing twenty-six characters, even on EBCDIC-based character sets.) Also, if you try to use the character classes &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;\W&lt;/code&gt; , &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt; , &lt;code&gt;\d&lt;/code&gt; , or &lt;code&gt;\D&lt;/code&gt; as endpoints of a range, the &quot;-&quot; is understood literally.</source>
          <target state="translated">文字のリストを &lt;code&gt;[]&lt;/code&gt; で囲むことにより、文字クラスを指定できます。これは、リストの任意の文字と一致します。 「[」の後の最初の文字が「^」の場合、クラスはリストにない任意の文字と一致します。リスト内では、「-」文字は範囲を指定するため、 &lt;code&gt;a-z&lt;/code&gt; は「a」から「z」までのすべての文字を表します。 「-」または「]」自体をクラスのメンバーにしたい場合は、リストの先頭（おそらく「^」の後ろ）に置くか、バックスラッシュでエスケープします。 &quot;-&quot;は、リストの最後で、最後の &quot;]&quot;の直前にある場合にも、文字どおりに解釈されます。 （以下はすべて、3つの文字の同じクラスを指定します： &lt;code&gt;[-az]&lt;/code&gt; 、 &lt;code&gt;[az-]&lt;/code&gt; 、および &lt;code&gt;[a\-z]&lt;/code&gt; 。 &lt;code&gt;[a-z]&lt;/code&gt; とはすべて異なります、これはEBCDICベースの文字セットでも26文字を含むクラスを指定します。）また、文字クラス &lt;code&gt;\w&lt;/code&gt; 、 &lt;code&gt;\W&lt;/code&gt; 、 &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\S&lt;/code&gt; 、 &lt;code&gt;\d&lt;/code&gt; 、または &lt;code&gt;\D&lt;/code&gt; をエンドポイントとして使用する場合範囲の「-」は文字通り理解されます。</target>
        </trans-unit>
        <trans-unit id="26fab1522afd0e2727fdb333919185675d766a45" translate="yes" xml:space="preserve">
          <source>You can specify a precision (for numeric conversions) or a maximum width (for string conversions) by specifying a &lt;code&gt;.&lt;/code&gt; followed by a number. For floating-point formats except &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; , this specifies how many places right of the decimal point to show (the default being 6). For example:</source>
          <target state="translated">を指定して、精度（数値変換の場合）または最大幅（文字列変換の場合）を指定でき &lt;code&gt;.&lt;/code&gt; 数字が続きます。 &lt;code&gt;g&lt;/code&gt; および &lt;code&gt;G&lt;/code&gt; を除く浮動小数点形式の場合、これは小数点の右側に表示する桁数を指定します（デフォルトは6）。例えば：</target>
        </trans-unit>
        <trans-unit id="eb60daa97062d5b450232fe33f31d785b7b34956" translate="yes" xml:space="preserve">
          <source>You can specify a precision (for numeric conversions) or a maximum width (for string conversions) by specifying a &lt;code&gt;.&lt;/code&gt; followed by a number. For floating-point formats except &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;, this specifies how many places right of the decimal point to show (the default being 6). For example:</source>
          <target state="translated">を指定することにより、精度（数値変換の場合）または最大幅（文字列変換の場合）を指定でき &lt;code&gt;.&lt;/code&gt; 数字が続きます。 &lt;code&gt;g&lt;/code&gt; と &lt;code&gt;G&lt;/code&gt; を除く浮動小数点形式の場合、これは表示する小数点の右側の桁数を指定します（デフォルトは6）。例えば：</target>
        </trans-unit>
        <trans-unit id="d7117f36d5a9b63e0e2af83d4187313124e5bec9" translate="yes" xml:space="preserve">
          <source>You can specify a series of alternatives for a pattern using &quot;|&quot; to separate them, so that &lt;code&gt;fee|fie|foe&lt;/code&gt; will match any of &quot;fee&quot;, &quot;fie&quot;, or &quot;foe&quot; in the target string (as would &lt;code&gt;f(e|i|o)e&lt;/code&gt;). The first alternative includes everything from the last pattern delimiter (&quot;(&quot;, &quot;(?:&quot;, etc. or the beginning of the pattern) up to the first &quot;|&quot;, and the last alternative contains everything from the last &quot;|&quot; to the next closing pattern delimiter. That's why it's common practice to include alternatives in parentheses: to minimize confusion about where they start and end.</source>
          <target state="translated">&quot;|&quot;を使用して、パターンの一連の選択肢を指定できます それらを分離して、 &lt;code&gt;fee|fie|foe&lt;/code&gt; がターゲット文字列の「fee」、「fie」、または「foe」のいずれかに一致するようにします（ &lt;code&gt;f(e|i|o)e&lt;/code&gt; 同様）。最初の選択肢には、最後のパターン区切り文字（ &quot;（&quot;、 &quot;（?:&quot;など、またはパターンの先頭）から最初の &quot;|&quot;までのすべてが含まれ、最後の選択肢には、最後の &quot;|&quot;からのすべてが含まれます。そのため、括弧の中に代替を含めるのが一般的な方法です：開始位置と終了位置の混乱を最小限に抑えるためです。</target>
        </trans-unit>
        <trans-unit id="2c0acf2a3cfcada005163c068fb15aa1f1ca963b" translate="yes" xml:space="preserve">
          <source>You can specify several classes to try by joining them with commas or semicolons, as in &lt;code&gt;-MTk::SuperPod;Tk::Pod&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-MTk::SuperPod;Tk::Pod&lt;/code&gt; ように、コンマまたはセミコロンで結合することにより、いくつかのクラスを指定して試すことができます。</target>
        </trans-unit>
        <trans-unit id="641b8e676fa0d8d749c4f8fe7240158e55ec8e1b" translate="yes" xml:space="preserve">
          <source>You can specify several classes to try by joining them with commas or semicolons, as in &lt;code&gt;-MTk::SuperPod;Tk::Pod&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-MTk::SuperPod;Tk::Pod&lt;/code&gt; ように、コンマまたはセミコロンで結合することにより、試行するいくつかのクラスを指定できます。</target>
        </trans-unit>
        <trans-unit id="1590cfec6710042ae4b201c340cadca79997b8f8" translate="yes" xml:space="preserve">
          <source>You can stop using AutoLoader by simply</source>
          <target state="translated">AutoLoaderの使用を停止するには、次のようにしてください。</target>
        </trans-unit>
        <trans-unit id="2a07cd3fd8cff327607dbfc5239cb17fe58be132" translate="yes" xml:space="preserve">
          <source>You can subclass an existing HashBase class.</source>
          <target state="translated">既存のHashBaseクラスをサブクラス化することができます。</target>
        </trans-unit>
        <trans-unit id="1eb2363990bc861a2294e72254c60f889449d2d6" translate="yes" xml:space="preserve">
          <source>You can switch encodings on an already opened stream by using &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt;; see &lt;a href=&quot;functions/binmode&quot;&gt;binmode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode()&lt;/a&gt;&lt;/code&gt; を使用して、すでに開いているストリームのエンコーディングを切り替えることができます。&lt;a href=&quot;functions/binmode&quot;&gt;binmodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="408bf98559257c5c2b42f635092e2cb73454caf6" translate="yes" xml:space="preserve">
          <source>You can switch encodings on an already opened stream by using &lt;code&gt;binmode()&lt;/code&gt;; see &lt;a href=&quot;perlfunc#binmode&quot;&gt;&quot;binmode&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;binmode()&lt;/code&gt; を使用して、すでに開いているストリームのエンコーディングを切り替えることができます。&lt;a href=&quot;perlfunc#binmode&quot;&gt;perlfuncの「binmode」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad4a77a592ef4f50bebb75551ecc777ec47349e4" translate="yes" xml:space="preserve">
          <source>You can switch locales as often as you wish at run time with the &lt;code&gt;POSIX::setlocale()&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;POSIX::setlocale()&lt;/code&gt; 関数を使用すると、実行時にロケールを何度でも切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="4591a0f85fb87cbd2147c9e7634ca2d54faf481c" translate="yes" xml:space="preserve">
          <source>You can tell if using locales is safe on your system by looking at the read-only boolean variable &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt;. The value is 1 if the perl is not threaded, or if it is using thread-safe locale operations.</source>
          <target state="translated">読み取り専用のブール変数 &lt;code&gt;${^SAFE_LOCALES}&lt;/code&gt; 調べることで、システムでロケールを使用しても安全かどうかを判断できます。Perlがスレッド化されていない場合、またはスレッドセーフなロケール操作を使用している場合、値は1です。</target>
        </trans-unit>
        <trans-unit id="d35fb0ec3f2c6e87bec34d10cff3e1fa0aa39f99" translate="yes" xml:space="preserve">
          <source>You can test for these with Perl's &lt;b&gt;-S&lt;/b&gt; file test:</source>
          <target state="translated">Perlの&lt;b&gt;-S&lt;/b&gt;ファイルテストでこれらをテストできます。</target>
        </trans-unit>
        <trans-unit id="33cabbc3e6b78a04641195c801755295c5b1770a" translate="yes" xml:space="preserve">
          <source>You can test out changing these variables temporarily, and if the new settings seem to help, put those settings into your shell startup files. Consult your local documentation for the exact details. For Bourne-like shells (&lt;b&gt;sh&lt;/b&gt;, &lt;b&gt;ksh&lt;/b&gt;, &lt;b&gt;bash&lt;/b&gt;, &lt;b&gt;zsh&lt;/b&gt;):</source>
          <target state="translated">これらの変数を一時的に変更してテストし、新しい設定が役立つと思われる場合は、それらの設定をシェルの起動ファイルに入れます。正確な詳細については、ローカルのドキュメントを参照してください。Bourneのようなシェル（&lt;b&gt;sh&lt;/b&gt;、&lt;b&gt;ksh&lt;/b&gt;、&lt;b&gt;bash&lt;/b&gt;、&lt;b&gt;zsh&lt;/b&gt;）の場合：</target>
        </trans-unit>
        <trans-unit id="9aef87ade0298c8e39a512c631e34755f8d99a1d" translate="yes" xml:space="preserve">
          <source>You can test whether an SV is using copy-on-write with &lt;code&gt;SvIsCOW(sv)&lt;/code&gt; .</source>
          <target state="translated">SVが &lt;code&gt;SvIsCOW(sv)&lt;/code&gt; でコピーオンライトを使用しているかどうかをテストできます。</target>
        </trans-unit>
        <trans-unit id="397833f042c8b1f602c31dae872891a03b284f7c" translate="yes" xml:space="preserve">
          <source>You can test whether an SV is using copy-on-write with &lt;code&gt;SvIsCOW(sv)&lt;/code&gt;.</source>
          <target state="translated">SVが &lt;code&gt;SvIsCOW(sv)&lt;/code&gt; でコピーオンライトを使用しているかどうかをテストできます。</target>
        </trans-unit>
        <trans-unit id="bb7b765496cd5db87bb4e9bf905826761c1ac026" translate="yes" xml:space="preserve">
          <source>You can therefore save time by reusing this object as follows;</source>
          <target state="translated">そのため、以下のようにこのオブジェクトを再利用することで時間を節約することができます。</target>
        </trans-unit>
        <trans-unit id="9025bea13f42c28d6d27d405ef555cfdfb67e0c5" translate="yes" xml:space="preserve">
          <source>You can think of &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;typeof&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;typeof&lt;/code&gt; 演算子と考えることができます。</target>
        </trans-unit>
        <trans-unit id="cf104869dd9c15f6376b764dcf7d585d45ca8039" translate="yes" xml:space="preserve">
          <source>You can think of &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; as a &lt;code&gt;typeof&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;typeof&lt;/code&gt; 演算子と考えることができます。</target>
        </trans-unit>
        <trans-unit id="728882433c08d9f5799a415b920db42fb16d9b1c" translate="yes" xml:space="preserve">
          <source>You can think of a module as the fundamental unit of reusable Perl code; see &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details. Whenever anyone creates a chunk of Perl code that they think will be useful to the world, they register as a Perl developer at &lt;a href=&quot;http://www.cpan.org/modules/04pause.html&quot;&gt;http://www.cpan.org/modules/04pause.html&lt;/a&gt; so that they can then upload their code to the CPAN. The CPAN is the Comprehensive Perl Archive Network and can be accessed at &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; , and searched at &lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt; .</source>
          <target state="translated">モジュールは、再利用可能なPerlコードの基本的な単位と考えることができます。詳細は&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。世界に役立つと思われるPerlコードのチャンクを誰かが作成するたびに、&lt;a href=&quot;http://www.cpan.org/modules/04pause.html&quot;&gt;http：&lt;/a&gt; //www.cpan.org/modules/04pause.htmlでPerl開発者として登録し、コードをCPAN。CPANは包括的なPerlのアーカイブネットワークであり、アクセスが可能で&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;、及びで検索&lt;a href=&quot;http://search.cpan.org/&quot;&gt;http://search.cpan.org/&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f66f02858677c3e7654c4ad6291c3ba16be82841" translate="yes" xml:space="preserve">
          <source>You can think of a module as the fundamental unit of reusable Perl code; see &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details. Whenever anyone creates a chunk of Perl code that they think will be useful to the world, they register as a Perl developer at &lt;a href=&quot;https://www.cpan.org/modules/04pause.html&quot;&gt;https://www.cpan.org/modules/04pause.html&lt;/a&gt; so that they can then upload their code to the CPAN. The CPAN is the Comprehensive Perl Archive Network and can be accessed at &lt;a href=&quot;https://www.cpan.org/&quot;&gt;https://www.cpan.org/&lt;/a&gt; , and searched at &lt;a href=&quot;https://metacpan.org/&quot;&gt;https://metacpan.org/&lt;/a&gt; .</source>
          <target state="translated">モジュールは、再利用可能なPerlコードの基本単位と考えることができます。詳細については、&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。誰かが世界に役立つと思うPerlコードのチャンクを作成するときはいつでも、&lt;a href=&quot;https://www.cpan.org/modules/04pause.html&quot;&gt;https：//www.cpan.org/modules/04pause.htmlで&lt;/a&gt;Perl開発者として登録し、コードをにアップロードできるようにします。 CPAN。CPANは包括的なPerlアーカイブネットワークであり、&lt;a href=&quot;https://www.cpan.org/&quot;&gt;https：//www.cpan.org/&lt;/a&gt;でアクセスでき、https：//metacpan.org/で検索でき&lt;a href=&quot;https://metacpan.org/&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="969f96d8ec4df0c71d177e6b1625408e665ae979" translate="yes" xml:space="preserve">
          <source>You can tie the cache tables to any sort of tied hash that you want to, as long as it supports &lt;code&gt;TIEHASH&lt;/code&gt; , &lt;code&gt;FETCH&lt;/code&gt; , &lt;code&gt;STORE&lt;/code&gt; , and &lt;code&gt;EXISTS&lt;/code&gt; . For example,</source>
          <target state="translated">キャッシュテーブルは、 &lt;code&gt;TIEHASH&lt;/code&gt; 、 &lt;code&gt;FETCH&lt;/code&gt; 、 &lt;code&gt;STORE&lt;/code&gt; 、および &lt;code&gt;EXISTS&lt;/code&gt; をサポートしている限り、任意の種類の結合ハッシュに結合できます。例えば、</target>
        </trans-unit>
        <trans-unit id="067fb5762580d2bd9d11414d9eb17e488c70c98d" translate="yes" xml:space="preserve">
          <source>You can tie the cache tables to any sort of tied hash that you want to, as long as it supports &lt;code&gt;TIEHASH&lt;/code&gt;, &lt;code&gt;FETCH&lt;/code&gt;, &lt;code&gt;STORE&lt;/code&gt;, and &lt;code&gt;EXISTS&lt;/code&gt;. For example,</source>
          <target state="translated">&lt;code&gt;TIEHASH&lt;/code&gt; 、 &lt;code&gt;FETCH&lt;/code&gt; 、 &lt;code&gt;STORE&lt;/code&gt; 、および &lt;code&gt;EXISTS&lt;/code&gt; をサポートしている限り、キャッシュテーブルを任意の種類の結合ハッシュに結合できます。例えば、</target>
        </trans-unit>
        <trans-unit id="5dff5882ff33a85a3a95fb0e709084606bfc8485" translate="yes" xml:space="preserve">
          <source>You can try using encryption via source filters (Filter::* from CPAN, or Filter::Util::Call and Filter::Simple since Perl 5.8). But crackers might be able to decrypt it. You can try using the byte code compiler and interpreter described below, but crackers might be able to de-compile it. You can try using the native-code compiler described below, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (this is true of every language, not just Perl).</source>
          <target state="translated">ソースフィルタ(CPANのFilter::*やPerl 5.8以降のFilter::Util::CallやFilter::Simple)を使って暗号化を試してみてください。しかし、クラッカーに解読されてしまうかもしれません。後述のバイトコードコンパイラとインタプリタを使ってみてください。後述のネイティブコードコンパイラを使ってみてもいいですが、クラッカーは逆コンパイルできるかもしれません。これらは、あなたのコードを盗み見しようとする人にとっては、難易度の差はありますが、どれも確実にコードを隠すことはできません (これは Perl に限らず、すべての言語に当てはまります)。</target>
        </trans-unit>
        <trans-unit id="bd149095683892a2c8050e33a089a96e4ba58ba3" translate="yes" xml:space="preserve">
          <source>You can try using encryption via source filters (Starting from Perl 5.8 the Filter::Simple and Filter::Util::Call modules are included in the standard distribution), but any decent programmer will be able to decrypt it. You can try using the byte code compiler and interpreter described later in &lt;a href=&quot;perlfaq3&quot;&gt;perlfaq3&lt;/a&gt;, but the curious might still be able to de-compile it. You can try using the native-code compiler described later, but crackers might be able to disassemble it. These pose varying degrees of difficulty to people wanting to get at your code, but none can definitively conceal it (true of every language, not just Perl).</source>
          <target state="translated">ソースフィルターを介して暗号化を使用することもできます（Perl 5.8以降、Filter :: SimpleおよびFilter :: Util :: Callモジュールは標準ディストリビューションに含まれています）。ただし、適切なプログラマであれば暗号化を解除できます。後で&lt;a href=&quot;perlfaq3&quot;&gt;perlfaq3&lt;/a&gt;で説明するバイトコードコンパイラとインタープリタを使用してみることができますが、好奇心旺盛な人はそれを逆コンパイルできるかもしれません。後で説明するネイティブコードコンパイラを使用してみることもできますが、クラッカーが逆アセンブルできる場合があります。これらは、コードを取得したい人々にさまざまな程度の困難をもたらしますが、それを明確に隠すことはできません（Perlだけでなく、すべての言語に当てはまります）。</target>
        </trans-unit>
        <trans-unit id="2b09b812e89e288611a3620bc913b5b1b0fe4650" translate="yes" xml:space="preserve">
          <source>You can turn off that eagerness-to-help by declaring an attribute handler with the keyword &lt;code&gt;RAWDATA&lt;/code&gt; . For example:</source>
          <target state="translated">キーワード &lt;code&gt;RAWDATA&lt;/code&gt; を使用して属性ハンドラーを宣言することにより、その熱意をオフにすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="411d0a05d6b5a0d470da1b804c20182fb7f3b7be" translate="yes" xml:space="preserve">
          <source>You can turn off that eagerness-to-help by declaring an attribute handler with the keyword &lt;code&gt;RAWDATA&lt;/code&gt;. For example:</source>
          <target state="translated">キーワード &lt;code&gt;RAWDATA&lt;/code&gt; を使用して属性ハンドラーを宣言することにより、その支援への熱意をオフにすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="f49d0ea6561f21345168a93b25795d827d9b3e56" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#%28%3F%23text%29&quot;&gt;&quot;(?#text)&quot;&lt;/a&gt; to create a comment that ends earlier than the end of the current line, but &lt;code&gt;text&lt;/code&gt; also can't contain the closing delimiter unless escaped with a backslash.</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;#%28%3F%23text%29&quot;&gt;「（？の#text）」&lt;/a&gt;その両端以前の現在の行の末尾よりもコメントを作成するには、しかし、 &lt;code&gt;text&lt;/code&gt; バックスラッシュでエスケープしない限り、また終了区切り文字を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="b5701868a13c5d43cf7a782ca599e3f4284f18bb" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#(%3f%23text)&quot;&gt;(?#text)&lt;/a&gt; to create a comment that ends earlier than the end of the current line, but &lt;code&gt;text&lt;/code&gt; also can't contain the closing delimiter unless escaped with a backslash.</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;#(%3f%23text)&quot;&gt;（？の#text）&lt;/a&gt;その両端以前の現在の行の末尾よりもコメントを作成するには、しかし、 &lt;code&gt;text&lt;/code&gt; バックスラッシュでエスケープしない限り、また終了区切り文字を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="46e1962292f1a1a38164468a62659371a7ced694" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#prop_values%28%29&quot;&gt;&quot;prop_values()&quot;&lt;/a&gt; to find out if a given property is one which has a restricted set of values, and if so, what those values are. But usually each value actually has several synonyms. For example, in Unicode binary properties,</source>
          <target state="translated">&lt;a href=&quot;#prop_values%28%29&quot;&gt;「prop_values（）」&lt;/a&gt;を使用して、特定のプロパティが制限された値のセットを持つプロパティであるかどうか、ある場合はそれらの値が何であるかを確認できます。ただし、通常、各値には実際にはいくつかの同義語があります。たとえば、Unicodeバイナリプロパティでは、</target>
        </trans-unit>
        <trans-unit id="6d944fb3215d0dd16d4105b924d26c8f26a00944" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#prop_values()&quot;&gt;prop_values()&lt;/a&gt; to find out if a given property is one which has a restricted set of values, and if so, what those values are. But usually each value actually has several synonyms. For example, in Unicode binary properties,</source>
          <target state="translated">&lt;a href=&quot;#prop_values()&quot;&gt;prop_values（）&lt;/a&gt;を使用して、指定されたプロパティが制限された値のセットを持つプロパティであるかどうかを確認でき、そうである場合、それらの値は何かを確認できます。ただし、通常、各値には実際には複数の同義語があります。たとえば、Unicodeバイナリプロパティでは、</target>
        </trans-unit>
        <trans-unit id="53b328e86a1c8561fad7e05704d7dac310eecbe7" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;Number::Format&quot;&gt;Number::Format&lt;/a&gt; to separate places in a number. It handles locale information for those of you who want to insert full stops instead (or anything else that they want to use, really).</source>
          <target state="translated">&lt;a href=&quot;Number::Format&quot;&gt;Number :: Format&lt;/a&gt;を使用して、数値の場所を区切ることができます。代わりにピリオドを挿入したい人（または実際に使用したいもの）のロケール情報を処理します。</target>
        </trans-unit>
        <trans-unit id="b1c9a75863cb6d9c190a426b8b3063cbac50315b" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;URI::Find&quot;&gt;URI::Find&lt;/a&gt; or &lt;a href=&quot;URL::Search&quot;&gt;URL::Search&lt;/a&gt; to extract URLs from an arbitrary text document.</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;URI::Find&quot;&gt;URIを::検索&lt;/a&gt;または&lt;a href=&quot;URL::Search&quot;&gt;URL ::検索する&lt;/a&gt;任意のテキスト文書からURLを抽出すること。</target>
        </trans-unit>
        <trans-unit id="b53d0563bc5da053955b9d3b7d437fbd188f8795" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://search.cpan.org/perldoc/Number::Format&quot;&gt;Number::Format&lt;/a&gt; to separate places in a number. It handles locale information for those of you who want to insert full stops instead (or anything else that they want to use, really).</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Number::Format&quot;&gt;Number :: Format&lt;/a&gt;を使用して、数字の場所を区切ることができます。代わりにフルストップを挿入したい人（または実際に使用したいもの）のロケール情報を処理します。</target>
        </trans-unit>
        <trans-unit id="49f5dd665c5e9d2b71ecb4caa05c28940c8fc3d9" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;http://search.cpan.org/perldoc/URI::Find&quot;&gt;URI::Find&lt;/a&gt; to extract URLs from an arbitrary text document.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/URI::Find&quot;&gt;URI :: Find&lt;/a&gt;を使用して、任意のテキストドキュメントからURLを抽出できます。</target>
        </trans-unit>
        <trans-unit id="7fe2956ea1b7c9e1e517ba013b7204dc28c702c8" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;-C0&lt;/b&gt; (or &lt;code&gt;&quot;0&quot;&lt;/code&gt; for &lt;code&gt;PERL_UNICODE&lt;/code&gt; ) to explicitly disable all the above Unicode features.</source>
          <target state="translated">あなたが使用することができます&lt;b&gt;-C0&lt;/b&gt;（または &lt;code&gt;&quot;0&quot;&lt;/code&gt; ため &lt;code&gt;PERL_UNICODE&lt;/code&gt; 明示的に無効にする）すべてのUnicode上記いただけます。</target>
        </trans-unit>
        <trans-unit id="463dcf8fc0cca782c4e0e34c3ad93d1f8a2e69a8" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;-C0&lt;/b&gt; (or &lt;code&gt;&quot;0&quot;&lt;/code&gt; for &lt;code&gt;PERL_UNICODE&lt;/code&gt;) to explicitly disable all the above Unicode features.</source>
          <target state="translated">あなたが使用することができます&lt;b&gt;-C0&lt;/b&gt;（または &lt;code&gt;&quot;0&quot;&lt;/code&gt; ため &lt;code&gt;PERL_UNICODE&lt;/code&gt; 明示的に無効にする）すべてのUnicode上記いただけます。</target>
        </trans-unit>
        <trans-unit id="8820cb36e9b0a2ef9812096c3ae47e4337e70f22" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;-w optionname&lt;/code&gt; (without a value) as shorthand for &lt;code&gt;-w optionname:&lt;i&gt;TRUE&lt;/i&gt;&lt;/code&gt;. This is presumably useful in cases of on/off features like: &lt;code&gt;-w page_numbering&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-w optionname&lt;/code&gt; （値なし）を &lt;code&gt;-w optionname:&lt;i&gt;TRUE&lt;/i&gt;&lt;/code&gt; の省略形として使用できます。これはおそらく &lt;code&gt;-w page_numbering&lt;/code&gt; のようなオン/オフ機能の場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d92d50a80d7de3bbc1a703e905f54b306c769ca9" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;-w optionname&lt;/code&gt; (without a value) as shorthand for &lt;code&gt;-w optionname:&lt;i&gt;TRUE&lt;/i&gt;&lt;/code&gt;. This is presumably useful in cases of on/off features like: &lt;code&gt;-w page_numbering&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w optionname&lt;/code&gt; （値なし）を &lt;code&gt;-w optionname:&lt;i&gt;TRUE&lt;/i&gt;&lt;/code&gt; 省略形として使用できます：&lt;i&gt;TRUE&lt;/i&gt;。これは、次のようなオン/オフ機能の場合におそらく役立ちます。 &lt;code&gt;-w page_numbering&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b34722383d4a6c958172dfe61f02074274ede7a9" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; without parentheses to locate the end of each input file, in case you want to append to each file, or reset line numbering (see example in &lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;).</source>
          <target state="translated">括弧なしで &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; を使用して、各ファイルに追加したり、行番号をリセットしたりする場合（&lt;a href=&quot;functions/eof&quot;&gt;eofの&lt;/a&gt;例を参照）、各入力ファイルの終わりを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="7509178f0cc142ffa6970d993aa78a311665535a" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; if the columns are separated by whitespace or some other delimiter, as long as whitespace or the delimiter cannot appear as part of the data.</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 列が空白限り、空白や他のいくつかの区切り文字で区切られていたり、区切り文字がデータの一部として表示することができない場合。</target>
        </trans-unit>
        <trans-unit id="6118fe862d5ba72dadefc97ab80da97946efe653" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;eof&lt;/code&gt; without parentheses to locate the end of each input file, in case you want to append to each file, or reset line numbering (see example in &lt;a href=&quot;perlfunc#eof&quot;&gt;&quot;eof&quot; in perlfunc&lt;/a&gt;).</source>
          <target state="translated">各ファイルに追加する場合&lt;a href=&quot;perlfunc#eof&quot;&gt;、または行&lt;/a&gt;番号をリセットする場合は、括弧なしで &lt;code&gt;eof&lt;/code&gt; を使用して、各入力ファイルの終わりを見つけることができます（perlfuncの「eof」の例を参照）。</target>
        </trans-unit>
        <trans-unit id="0a9d607e237fddf53d59f7e552edb64a49ae50a5" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;no Test2::IPC;&lt;/code&gt; to disable IPC for good. You can also use the T2_NO_IPC env var.</source>
          <target state="translated">&lt;code&gt;no Test2::IPC;&lt;/code&gt; は使用できません。IPCを永久に無効にします。T2_NO_IPC環境変数を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="8daea58cf28c3fae97111d40d3f6273a0428003e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;split&lt;/code&gt; if the columns are separated by whitespace or some other delimiter, as long as whitespace or the delimiter cannot appear as part of the data.</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;split&lt;/code&gt; 列が空白限り、空白や他のいくつかの区切り文字で区切られていたり、区切り文字がデータの一部として表示することができない場合。</target>
        </trans-unit>
        <trans-unit id="207bd81996c41f563d70786505a61f566bf7c9d1" translate="yes" xml:space="preserve">
          <source>You can use Andreas Koenig's CPAN module ( &lt;a href=&quot;http://www.cpan.org/modules/by-module/CPAN&quot;&gt;http://www.cpan.org/modules/by-module/CPAN&lt;/a&gt; ) to automate the following steps, from DECOMPRESS through INSTALL.</source>
          <target state="translated">Andreas KoenigのCPANモジュール（&lt;a href=&quot;http://www.cpan.org/modules/by-module/CPAN&quot;&gt;http://www.cpan.org/modules/by-module/CPAN&lt;/a&gt;）を使用して、DECOMPRESSからINSTALLまでの次の手順を自動化できます。</target>
        </trans-unit>
        <trans-unit id="e7b5250e276d656c30117b7ccc528681aa0fdc2f" translate="yes" xml:space="preserve">
          <source>You can use Andreas Koenig's CPAN module ( &lt;a href=&quot;https://metacpan.org/release/CPAN&quot;&gt;https://metacpan.org/release/CPAN&lt;/a&gt; ) to automate the following steps, from DECOMPRESS through INSTALL.</source>
          <target state="translated">Andreas KoenigのCPANモジュール（&lt;a href=&quot;https://metacpan.org/release/CPAN&quot;&gt;https://metacpan.org/release/CPAN&lt;/a&gt;）を使用して、DECOMPRESSからINSTALLまでの次の手順を自動化できます。</target>
        </trans-unit>
        <trans-unit id="1a4fa2e9a279c718478efb15dbd58f3963c395b2" translate="yes" xml:space="preserve">
          <source>You can use Perl's somewhat exotic &lt;code&gt;..&lt;/code&gt; operator (documented in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;):</source>
          <target state="translated">Perlのややエキゾチックな &lt;code&gt;..&lt;/code&gt; 演算子を使用できます（&lt;a href=&quot;perlop&quot;&gt;perlopに&lt;/a&gt;文書化されています）。</target>
        </trans-unit>
        <trans-unit id="0352c7c82515615be31fde318d8a078c0a2c1a97" translate="yes" xml:space="preserve">
          <source>You can use a leading underscore to indicate that a variable or function should not be used outside the package that defined it.</source>
          <target state="translated">変数や関数を定義したパッケージの外で使用してはいけないことを示すために、先頭のアンダースコアを使用することができます。</target>
        </trans-unit>
        <trans-unit id="388231cbd33477282c1e5dc7ff7aa725ad26b114" translate="yes" xml:space="preserve">
          <source>You can use a string as if it were a reference. If you use the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; as an array reference, it's taken to be a reference to the array &lt;code&gt;@foo&lt;/code&gt; . This is called a</source>
          <target state="translated">文字列を参照であるかのように使用できます。文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; を配列参照として使用する場合、それは配列 &lt;code&gt;@foo&lt;/code&gt; への参照と見なされます。これは</target>
        </trans-unit>
        <trans-unit id="f196929f5477404a496f1eb939b7d7fae56076c9" translate="yes" xml:space="preserve">
          <source>You can use a string as if it were a reference. If you use the string &lt;code&gt;&quot;foo&quot;&lt;/code&gt; as an array reference, it's taken to be a reference to the array &lt;code&gt;@foo&lt;/code&gt;. This is called a</source>
          <target state="translated">文字列は、参照であるかのように使用できます。文字列 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; を配列参照として使用する場合、それは配列 &lt;code&gt;@foo&lt;/code&gt; への参照と見なされます。これはと呼ばれます</target>
        </trans-unit>
        <trans-unit id="adc3bc3485dafe6de0835e8cb890731728d4f233" translate="yes" xml:space="preserve">
          <source>You can use an &quot;=&quot; instead of the &quot;:&quot;, as in: &lt;code&gt;-w textsize=15&lt;/code&gt; . This might be more (or less) convenient, depending on what shell you use.</source>
          <target state="translated">&lt;code&gt;-w textsize=15&lt;/code&gt; のように、「：」の代わりに「=」を使用できます。使用するシェルによっては、これはより便利な場合と便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="574332bc08377fe482a2062d389f5bfcb77e4baa" translate="yes" xml:space="preserve">
          <source>You can use an &quot;=&quot; instead of the &quot;:&quot;, as in: &lt;code&gt;-w textsize=15&lt;/code&gt;. This might be more (or less) convenient, depending on what shell you use.</source>
          <target state="translated">&lt;code&gt;-w textsize=15&lt;/code&gt; のように、「：」の代わりに「=」を使用できます。使用するシェルによっては、これが便利な場合もあれば、そうでない場合もあります。</target>
        </trans-unit>
        <trans-unit id="72421369c1a6f65beaf183288338ba69c655cf15" translate="yes" xml:space="preserve">
          <source>You can use an alternative library to drive Math::BigInt. See the section &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;&quot;MATH LIBRARY&quot;&lt;/a&gt; for more information.</source>
          <target state="translated">別のライブラリを使用して、Math :: BigIntを駆動できます。詳細については、&lt;a href=&quot;#MATH-LIBRARY&quot;&gt;「MATHLIBRARY」&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="659b448e1309e418ec405468f01e562189ac5581" translate="yes" xml:space="preserve">
          <source>You can use an alternative library to drive Math::BigInt. See the section &lt;a href=&quot;#MATH-LIBRARY&quot;&gt;MATH LIBRARY&lt;/a&gt; for more information.</source>
          <target state="translated">代替ライブラリを使用して、Math :: BigIntを駆動できます。詳細については、「&lt;a href=&quot;#MATH-LIBRARY&quot;&gt;数学ライブラリ&lt;/a&gt;」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f7c7a81f2a96d58e5477ffb42832551e4a65a1ae" translate="yes" xml:space="preserve">
          <source>You can use and redistribute this document under the same terms as Perl itself.</source>
          <target state="translated">このドキュメントはPerlと同じ条件で使用したり、再配布したりすることができます。</target>
        </trans-unit>
        <trans-unit id="02346143e059d2c6966f5b1da988acae6f664ce7" translate="yes" xml:space="preserve">
          <source>You can use another collation element table if desired.</source>
          <target state="translated">必要に応じて、別の照合要素テーブルを使用することができます。</target>
        </trans-unit>
        <trans-unit id="80ffd7e86ab2f265c3b1b5af5301c88022dfacbd" translate="yes" xml:space="preserve">
          <source>You can use any combination of the methods from none to all four.</source>
          <target state="translated">なしから4つの方法まで、任意の組み合わせで使用することができます。</target>
        </trans-unit>
        <trans-unit id="727cc3b9105721ca57e170521deb86b9cfbaaa16" translate="yes" xml:space="preserve">
          <source>You can use any combination of the methods, from none, to all four.</source>
          <target state="translated">どれも使わない方法から4つすべての方法まで、任意の組み合わせで使用することができます。</target>
        </trans-unit>
        <trans-unit id="d63724145019d1ea36fba22c0caf955250b6107a" translate="yes" xml:space="preserve">
          <source>You can use either &lt;code&gt;filter()&lt;/code&gt; or &lt;code&gt;pre_filter()&lt;/code&gt;, depending on your needs. Both have identical syntax, so only &lt;code&gt;filter()&lt;/code&gt; is shown here.</source>
          <target state="translated">必要に応じて、 &lt;code&gt;filter()&lt;/code&gt; または &lt;code&gt;pre_filter()&lt;/code&gt; のいずれかを使用できます。どちらも構文が同じであるため、ここでは &lt;code&gt;filter()&lt;/code&gt; のみを示しています。</target>
        </trans-unit>
        <trans-unit id="6cf084acc213926a976c0b6e7b2d7ff58c8a1c98" translate="yes" xml:space="preserve">
          <source>You can use formatting codes in ordinary paragraphs, for &lt;b&gt;bold&lt;/b&gt;,</source>
          <target state="translated">&lt;b&gt;太字の&lt;/b&gt;場合は、通常の段落でフォーマットコードを使用できます。</target>
        </trans-unit>
        <trans-unit id="7b0f4d35c03dc40ee00f05e56f139894c4c251ca" translate="yes" xml:space="preserve">
          <source>You can use it as follows:</source>
          <target state="translated">以下のような使い方ができます。</target>
        </trans-unit>
        <trans-unit id="cfbc7862683635b53050e53b7defa0eddc13b749" translate="yes" xml:space="preserve">
          <source>You can use more than one source filter on a single file. Similarly, you can reuse the same filter in as many files as you like.</source>
          <target state="translated">1 つのファイルに複数のソースフィルタを使用することができます。同様に、同じフィルターを好きなだけ多くのファイルで再利用することができます。</target>
        </trans-unit>
        <trans-unit id="cb2c65d2dbc0740833a918a76d1bf6977975706a" translate="yes" xml:space="preserve">
          <source>You can use parentheses for functions' arguments or omit them according to your personal taste. They are only required occasionally to clarify issues of precedence.</source>
          <target state="translated">関数の引数には括弧を使用してもよいし、個人的な好みに応じて省略してもよい。括弧は、優先順位の問題を明確にするために時々必要になるだけです。</target>
        </trans-unit>
        <trans-unit id="78045ec633e87e0c82678bcb8abea9b50b38e139" translate="yes" xml:space="preserve">
          <source>You can use that same structure to count the entries any way that you like. If you want the count of the keys with vowels in them, you just test for that instead:</source>
          <target state="translated">同じ構造を使用して、好きな方法でエントリを数えることができます。母音を含むキーの数を数えたい場合は、代わりにそれをテストしてください。</target>
        </trans-unit>
        <trans-unit id="1690d1523426f507501d7105b1df0c66115ba59a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;#substr-EXPR%2COFFSET%2CLENGTH%2CREPLACEMENT&quot;&gt;&lt;code&gt;substr&lt;/code&gt;&lt;/a&gt; function as an lvalue, in which case EXPR must itself be an lvalue. If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it. To keep the string the same length, you may need to pad or chop your value using &lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#substr-EXPR%2COFFSET%2CLENGTH%2CREPLACEMENT&quot;&gt; &lt;code&gt;substr&lt;/code&gt; &lt;/a&gt;関数を左辺値として使用できます。その場合、EXPR自体が左辺値である必要があります。LENGTHより短いものを割り当てると、文字列は縮小し、LENGTHより長いものを割り当てると、文字列はそれに対応するように大きくなります。文字列を同じ長さに保つには、&lt;a href=&quot;#sprintf-FORMAT%2C-LIST&quot;&gt; &lt;code&gt;sprintf&lt;/code&gt; &lt;/a&gt;を使用して値をパディングまたはチョップする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e8f3236da7ba1e40bfd7a845e9acaf4bc53886e9" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;File::Random&quot;&gt;File::Random&lt;/a&gt; module which provides a function for that algorithm:</source>
          <target state="translated">そのアルゴリズムの関数を提供する&lt;a href=&quot;File::Random&quot;&gt;File :: Random&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="f2ff1d721e6d422eb2eb3595a270ae28f16f631d" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;Term::ANSIScreen&quot;&gt;Term::ANSIScreen&lt;/a&gt; module to get the special sequence. Import the &lt;code&gt;cls&lt;/code&gt; function (or the &lt;code&gt;:screen&lt;/code&gt; tag):</source>
          <target state="translated">&lt;a href=&quot;Term::ANSIScreen&quot;&gt;Term :: ANSIScreen&lt;/a&gt;モジュールを使用して、特別なシーケンスを取得できます。 &lt;code&gt;cls&lt;/code&gt; 関数（または &lt;code&gt;:screen&lt;/code&gt; タグ）をインポートします。</target>
        </trans-unit>
        <trans-unit id="6328463814d0d727ad78cc1185df620969d34550" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;Time::JulianDay&quot;&gt;Time::JulianDay&lt;/a&gt; module available on CPAN. Ensure that you really want to find a Julian day, though, as many people have different ideas about Julian days (see &lt;a href=&quot;http://www.hermetic.ch/cal_stud/jdn.htm&quot;&gt;http://www.hermetic.ch/cal_stud/jdn.htm&lt;/a&gt; for instance):</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;Time::JulianDay&quot;&gt;タイム::ユリウス通日の&lt;/a&gt;CPANで利用可能なモジュールを。ただし、多くの人がユリウス日についてさまざまな考えを持っているため、本当にユリウス日を見つけたいと思っていることを確認してください（たとえば、&lt;a href=&quot;http://www.hermetic.ch/cal_stud/jdn.htm&quot;&gt;http：//www.hermetic.ch/cal_stud/jdn.htm&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="3fd3c53d8040ec103bb8a5c0b0a769aa081bccb4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;Time::Piece&quot;&gt;Time::Piece&lt;/a&gt; module, part of the Standard Library, which can convert a date/time to a Julian Day:</source>
          <target state="translated">標準ライブラリの一部である&lt;a href=&quot;Time::Piece&quot;&gt;Time :: Piece&lt;/a&gt;モジュールを使用できます。このモジュールは、日付/時刻をユリウス日に変換できます。</target>
        </trans-unit>
        <trans-unit id="264d904732b18badb8f8af0ee614fe938cb62fd3" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;http://search.cpan.org/perldoc/File::Random&quot;&gt;File::Random&lt;/a&gt; module which provides a function for that algorithm:</source>
          <target state="translated">そのアルゴリズムに関数を提供する&lt;a href=&quot;http://search.cpan.org/perldoc/File::Random&quot;&gt;File :: Random&lt;/a&gt;モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="12dc43addaceb3325735b42235a5db7b043fe8e8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ANSIScreen&quot;&gt;Term::ANSIScreen&lt;/a&gt; module to get the special sequence. Import the &lt;code&gt;cls&lt;/code&gt; function (or the &lt;code&gt;:screen&lt;/code&gt; tag):</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Term::ANSIScreen&quot;&gt;Term :: ANSIScreen&lt;/a&gt;モジュールを使用して、特別なシーケンスを取得できます。 &lt;code&gt;cls&lt;/code&gt; 関数（または &lt;code&gt;:screen&lt;/code&gt; タグ）をインポートします。</target>
        </trans-unit>
        <trans-unit id="5e45dc25f4fd438a13c8ce07a9424e43bd367039" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;http://search.cpan.org/perldoc/Time::JulianDay&quot;&gt;Time::JulianDay&lt;/a&gt; module available on CPAN. Ensure that you really want to find a Julian day, though, as many people have different ideas about Julian days (see &lt;a href=&quot;http://www.hermetic.ch/cal_stud/jdn.htm&quot;&gt;http://www.hermetic.ch/cal_stud/jdn.htm&lt;/a&gt; for instance):</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;http://search.cpan.org/perldoc/Time::JulianDay&quot;&gt;タイム::ユリウス通日の&lt;/a&gt; CPANで利用可能なモジュールを。ただし、多くの人がユリウス日について異なる考えを持っているので、本当にユリウス日を見つけたいと思うようにして&lt;a href=&quot;http://www.hermetic.ch/cal_stud/jdn.htm&quot;&gt;ください&lt;/a&gt;（たとえば、http：//www.hermetic.ch/cal_stud/jdn.htmを参照してください）。</target>
        </trans-unit>
        <trans-unit id="ba1788ef1bedfa0514aebf9080742800f7823493" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;time/piece&quot;&gt;Time::Piece&lt;/a&gt; module, part of the Standard Library, which can convert a date/time to a Julian Day:</source>
          <target state="translated">標準ライブラリの一部である&lt;a href=&quot;time/piece&quot;&gt;Time :: Piece&lt;/a&gt;モジュールを使用して、日付/時刻をユリウス日に変換できます。</target>
        </trans-unit>
        <trans-unit id="19bff3f43fe0160ae5712a54b49b7225e08cf437" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; variable to detect if you are currently in the global destruction phase:</source>
          <target state="translated">&lt;code&gt;${^GLOBAL_PHASE}&lt;/code&gt; 変数を使用して、現在グローバル破壊フェーズにあるかどうかを検出できます。</target>
        </trans-unit>
        <trans-unit id="c3b01f73c25a67d7de0988508e3d6a08d549191f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; keyword to fall through from one case to the next:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; キーワードを使用して、あるケースから次のケースに進むことができます。</target>
        </trans-unit>
        <trans-unit id="0512ec103381f142d5cd53ad55c41fe8a57f36b8" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $array[$idx]&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $hash{key}&lt;/code&gt; constructs to delete a composite type entry for the current block and restore it when it ends. They return the array/hash value before the localization, which means that they are respectively equivalent to</source>
          <target state="translated">あなたが使用することができ &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $array[$idx]&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt; &lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $hash{key}&lt;/code&gt; 現在のブロックのための複合型エントリを削除し、それが終了したときにそれを復元するために構築物。これらはローカライズ前に配列/ハッシュ値を返します。つまり、それぞれ次と同等です。</target>
        </trans-unit>
        <trans-unit id="e75c67446fa3d94c780e921da6acd4affb168a6f" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; built-in function in scalar context to find out have many entries you have in a hash:</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys()&lt;/a&gt;&lt;/code&gt; 内蔵の機能スカラコンテキストであなたはハッシュを持っている多くのエントリを持っている見つけるために：</target>
        </trans-unit>
        <trans-unit id="32a43fdc7d4ed02e813e0075b65927b5536f01d4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; functions to reset &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt;. To simply reset the iterator used by &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; without doing anything else, use one of them in void context:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; 関数を使用して、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; をリセットできます。何もせずに、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 使用するイテレータを単にリセットするには、voidコンテキストでそれらの1つを使用します。</target>
        </trans-unit>
        <trans-unit id="91d95a3ba11b677c44eabfc4c39139686174c03a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;END&lt;/code&gt; block to simulate &lt;code&gt;atexit()&lt;/code&gt; . Each package's &lt;code&gt;END&lt;/code&gt; block is called when the program or thread ends. See the &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; manpage for more details about &lt;code&gt;END&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;code&gt;END&lt;/code&gt; ブロックを使用して &lt;code&gt;atexit()&lt;/code&gt; をシミュレートできます。各パッケージの &lt;code&gt;END&lt;/code&gt; ブロックは、プログラムまたはスレッドが終了すると呼び出されます。 &lt;code&gt;END&lt;/code&gt; ブロックの詳細については、&lt;a href=&quot;perlmod&quot;&gt;perlmodの&lt;/a&gt;マンページを参照してください。</target>
        </trans-unit>
        <trans-unit id="4356379b81876248477b6f357e68e2915cc3c4a7" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;END&lt;/code&gt; block to simulate &lt;code&gt;atexit()&lt;/code&gt;. Each package's &lt;code&gt;END&lt;/code&gt; block is called when the program or thread ends. See the &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; manpage for more details about &lt;code&gt;END&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;code&gt;END&lt;/code&gt; ブロックを使用して &lt;code&gt;atexit()&lt;/code&gt; をシミュレートできます。各パッケージの &lt;code&gt;END&lt;/code&gt; ブロックは、プログラムまたはスレッドが終了したときに呼び出されます。 &lt;code&gt;END&lt;/code&gt; ブロックの詳細については、&lt;a href=&quot;perlmod&quot;&gt;perlmodの&lt;/a&gt;マンページを参照してください。</target>
        </trans-unit>
        <trans-unit id="daf833c1822dba958c8327441530b019e90d9f3c" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;Text::Soundex&lt;/code&gt; module. If you want to do fuzzy or close matching, you might also try the &lt;a href=&quot;String::Approx&quot;&gt;String::Approx&lt;/a&gt;, and &lt;a href=&quot;Text::Metaphone&quot;&gt;Text::Metaphone&lt;/a&gt;, and &lt;a href=&quot;Text::DoubleMetaphone&quot;&gt;Text::DoubleMetaphone&lt;/a&gt; modules.</source>
          <target state="translated">&lt;code&gt;Text::Soundex&lt;/code&gt; モジュールを使用できます。あなたがあいまいまたは近いマッチングを行いたい場合は、あなたも試してみてください&lt;a href=&quot;String::Approx&quot;&gt;文字列::約&lt;/a&gt;、および&lt;a href=&quot;Text::Metaphone&quot;&gt;テキスト:: Metaphoneの&lt;/a&gt;、および&lt;a href=&quot;Text::DoubleMetaphone&quot;&gt;テキスト:: DoubleMetaphoneというの&lt;/a&gt;モジュールを。</target>
        </trans-unit>
        <trans-unit id="23320d34367d7c8e19c4f3b2648a39107aaceafc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;Text::Soundex&lt;/code&gt; module. If you want to do fuzzy or close matching, you might also try the &lt;a href=&quot;http://search.cpan.org/perldoc/String::Approx&quot;&gt;String::Approx&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Metaphone&quot;&gt;Text::Metaphone&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Text::DoubleMetaphone&quot;&gt;Text::DoubleMetaphone&lt;/a&gt; modules.</source>
          <target state="translated">&lt;code&gt;Text::Soundex&lt;/code&gt; モジュールを使用できます。あなたがあいまいまたは近いマッチングを行いたい場合は、あなたも試してみてください&lt;a href=&quot;http://search.cpan.org/perldoc/String::Approx&quot;&gt;文字列::約&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Text::Metaphone&quot;&gt;テキスト:: Metaphoneの&lt;/a&gt;、および&lt;a href=&quot;http://search.cpan.org/perldoc/Text::DoubleMetaphone&quot;&gt;テキスト:: DoubleMetaphoneというの&lt;/a&gt;モジュールを。</target>
        </trans-unit>
        <trans-unit id="488d88c32abab4c7103bc8a9f7d995aca32467c4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;UNIVERSAL&lt;/code&gt; class (see &lt;a href=&quot;universal&quot;&gt;UNIVERSAL&lt;/a&gt;). However, please be very careful to consider the consequences of doing this: adding methods to every object is very likely to have unintended consequences. If possible, it would be better to have all your object inherit from some common base class, or to use an object system like Moose that supports roles.</source>
          <target state="translated">&lt;code&gt;UNIVERSAL&lt;/code&gt; クラスを使用できます（&lt;a href=&quot;universal&quot;&gt;UNIVERSALを&lt;/a&gt;参照）。ただし、これを行うことの結果を慎重に検討してください。すべてのオブジェクトにメソッドを追加すると、意図しない結果になる可能性が非常に高くなります。可能であれば、すべてのオブジェクトをいくつかの共通の基本クラスから継承するか、Mooseのようなロールをサポートするオブジェクトシステムを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9e82c1f5d6a6827f8e16779cc47df9c04d7d8adc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;\[]&lt;/code&gt; backslash group notation to specify more than one allowed argument type. For example:</source>
          <target state="translated">&lt;code&gt;\[]&lt;/code&gt; バックスラッシュグループ表記を使用して、許可される引数の型を複数指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="29a5b3337e458ba95bc1ff4b8a89d182c9528c72" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;break&lt;/code&gt; keyword to break out of the enclosing &lt;code&gt;given&lt;/code&gt; block. Every &lt;code&gt;when&lt;/code&gt; block is implicitly ended with a &lt;code&gt;break&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; キーワードを使用して、囲まれた &lt;code&gt;given&lt;/code&gt; ブロックから抜け出すことができます。すべての &lt;code&gt;when&lt;/code&gt; ブロックは暗黙的に &lt;code&gt;break&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="bba1699dbcdd0690079aefe9fd9ab593286631dc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;break&lt;/code&gt; keyword to break out of the enclosing &lt;code&gt;given&lt;/code&gt; block. Every &lt;code&gt;when&lt;/code&gt; block is implicitly ended with a &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; キーワードを使用して、囲んでいる &lt;code&gt;given&lt;/code&gt; ブロックから抜け出すことができます。すべてのブロックが暗黙的に終了される &lt;code&gt;break&lt;/code&gt; 。 &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="949c9a5e3f3716d2943d21cb6815e4a1eba07109" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;continue&lt;/code&gt; keyword to fall through from one case to the next immediate &lt;code&gt;when&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; キーワードを使用して、あるケースから次の即時の &lt;code&gt;when&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; にフォールスルーできます。</target>
        </trans-unit>
        <trans-unit id="eb5ebdd2538225dc5126d819377dd6fa733157f0" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;delete local $array[$idx]&lt;/code&gt; and &lt;code&gt;delete local $hash{key}&lt;/code&gt; constructs to delete a composite type entry for the current block and restore it when it ends. They return the array/hash value before the localization, which means that they are respectively equivalent to</source>
          <target state="translated">あなたが使用することができ &lt;code&gt;delete local $array[$idx]&lt;/code&gt; および &lt;code&gt;delete local $hash{key}&lt;/code&gt; 現在のブロックのための複合型エントリを削除し、それが終了したときにそれを復元するために構築物。ローカリゼーションの前に配列/ハッシュ値を返します。つまり、それぞれ同等です。</target>
        </trans-unit>
        <trans-unit id="424781ac9f1048ec292a7a68c49b74676d773d63" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;keys()&lt;/code&gt; built-in function in scalar context to find out have many entries you have in a hash:</source>
          <target state="translated">スカラーコンテキストで &lt;code&gt;keys()&lt;/code&gt; 組み込み関数を使用して、ハッシュに多くのエントリがあることを確認できます。</target>
        </trans-unit>
        <trans-unit id="9d6ffcfb4d7d7a8b446a2b5b6c864d29b7abf92a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;keys&lt;/code&gt; or &lt;code&gt;values&lt;/code&gt; functions to reset &lt;code&gt;each&lt;/code&gt;. To simply reset the iterator used by &lt;code&gt;each&lt;/code&gt; without doing anything else, use one of them in void context:</source>
          <target state="translated">&lt;code&gt;keys&lt;/code&gt; または &lt;code&gt;values&lt;/code&gt; 関数を使用して、 &lt;code&gt;each&lt;/code&gt; をリセットできます。他に何もせずに、 &lt;code&gt;each&lt;/code&gt; 使用するイテレータを単純にリセットするには、voidコンテキストでそれらの1つを使用します。</target>
        </trans-unit>
        <trans-unit id="a4e6268ce8a22314d30cc236ac406a7320d8f9ec" translate="yes" xml:space="preserve">
          <source>You can use the Configure script in non-interactive mode too. When I built my</source>
          <target state="translated">非インタラクティブモードでもConfigureスクリプトを使うことができます。私が</target>
        </trans-unit>
        <trans-unit id="a88ac92f15e86bfef2bc330f6e37cbdfaa5d2949" translate="yes" xml:space="preserve">
          <source>You can use the POSIX character class syntax &lt;code&gt;/[[:alpha:]]/&lt;/code&gt; documented in &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlre&quot;&gt;perlreに&lt;/a&gt;記載されているPOSIX文字クラス構文 &lt;code&gt;/[[:alpha:]]/&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e278d58c9ab507fbb7f9453e431896c65ad5fd6f" translate="yes" xml:space="preserve">
          <source>You can use the SDK by exporting some additions to Perl's 'ccflags' and '..flags' config variables:</source>
          <target state="translated">Perl の 'ccflags' と '..flags' の設定変数にいくつかの追加をエクスポートすることで、SDK を使用することができます。</target>
        </trans-unit>
        <trans-unit id="2cbe3a7e5b8b2c8d5af954d0911633deaa0d280d" translate="yes" xml:space="preserve">
          <source>You can use the WILDCARD option to enable the debugging output of this subpattern matching. Careful! This can lead to voluminous outputs, and it may not make much sense to you what and why Perl is doing what it is. But it may be helpful to you to see why things aren't going the way you expect.</source>
          <target state="translated">WILDCARDオプションを使用して、このサブパターンマッチングのデバッグ出力を有効にすることができます。注意してください! これは大量の出力につながる可能性があり、Perl が何を、なぜそうしているのか、あなたにはあまり意味がないかもしれません。しかし、あなたが期待しているように物事が進まない理由を知るのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="dcba1d434e18427e8484e54d9e14e5566e79c6d1" translate="yes" xml:space="preserve">
          <source>You can use the builtin &lt;code&gt;&lt;a href=&quot;functions/getc&quot;&gt;getc()&lt;/a&gt;&lt;/code&gt; function for most filehandles, but it won't (easily) work on a terminal device. For STDIN, either use the Term::ReadKey module from CPAN or use the sample code in &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt;.</source>
          <target state="translated">ほとんどのファイルハンドルに組み込みの &lt;code&gt;&lt;a href=&quot;functions/getc&quot;&gt;getc()&lt;/a&gt;&lt;/code&gt; 関数を使用できますが、ターミナルデバイスでは（簡単に）機能しません。STDINの場合は、CPANのTerm :: ReadKeyモジュールを使用するか、&lt;a href=&quot;functions/getc&quot;&gt;getcの&lt;/a&gt;サンプルコードを使用します。</target>
        </trans-unit>
        <trans-unit id="576855da70920d778b0c9c1adac6f51a7f5843b4" translate="yes" xml:space="preserve">
          <source>You can use the builtin &lt;code&gt;getc()&lt;/code&gt; function for most filehandles, but it won't (easily) work on a terminal device. For STDIN, either use the Term::ReadKey module from CPAN or use the sample code in &lt;a href=&quot;perlfunc#getc&quot;&gt;&quot;getc&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">ほとんどのファイルハンドルに組み込みの &lt;code&gt;getc()&lt;/code&gt; 関数を使用できますが、端末デバイスでは（簡単に）機能しません。 STDINの場合、CPANのTerm :: ReadKeyモジュールを使用するか&lt;a href=&quot;perlfunc#getc&quot;&gt;、perlfuncの「getc」の&lt;/a&gt;サンプルコードを使用します。</target>
        </trans-unit>
        <trans-unit id="ad23301638fa59a074f7b5a830adc451b7882aec" translate="yes" xml:space="preserve">
          <source>You can use the debugger's &lt;code&gt;x&lt;/code&gt; command to dump out complex data structures. For example, given the assignment to $AoA above, here's the debugger output:</source>
          <target state="translated">デバッガーの &lt;code&gt;x&lt;/code&gt; コマンドを使用して、複雑なデータ構造をダンプできます。たとえば、上記の$ AoAへの割り当てがある場合、デバッガーの出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="26aa247b07d1815cd4598322a5a4fc92732d8a40" translate="yes" xml:space="preserve">
          <source>You can use the file handle returned by &lt;code&gt;vmsopen&lt;/code&gt; just as you would any other Perl file handle. The class VMS::Stdio ISA IO::File, so you can call IO::File methods using the handle returned by &lt;code&gt;vmsopen&lt;/code&gt;. However, &lt;code&gt;use&lt;/code&gt;ing VMS::Stdio does not automatically &lt;code&gt;use&lt;/code&gt; IO::File; you must do so explicitly in your program if you want to call IO::File methods. This is done to avoid the overhead of initializing the IO::File package in programs which intend to use the handle returned by &lt;code&gt;vmsopen&lt;/code&gt; as a normal Perl file handle only. When the scalar containing a VMS::Stdio file handle is overwritten, &lt;code&gt;undef&lt;/code&gt;d, or goes out of scope, the associated file is closed automatically.</source>
          <target state="translated">他のPerlファイルハンドルと同じように、 &lt;code&gt;vmsopen&lt;/code&gt; によって返されるファイルハンドルを使用できます。クラスVMS :: Stdio ISA IO :: File。したがって、 &lt;code&gt;vmsopen&lt;/code&gt; によって返されるハンドルを使用してIO :: Fileメソッドを呼び出すことができます。しかし、 &lt;code&gt;use&lt;/code&gt; 自動的にしませんVMS :: STDIOをINGの &lt;code&gt;use&lt;/code&gt; IO ::ファイルを。 IO :: Fileメソッドを呼び出す場合は、プログラムで明示的に行う必要があります。これは、 &lt;code&gt;vmsopen&lt;/code&gt; によって返されたハンドルを通常のPerlファイルハンドルとしてのみ使用することを目的としたプログラムでIO :: Fileパッケージを初期化するオーバーヘッドを回避するために行われます。 VMS :: Stdioファイルハンドルを含むスカラーが上書き、 &lt;code&gt;undef&lt;/code&gt; 解除、またはスコープ外になると、関連するファイルは自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="c95e7176a4cdb8eb19d859ce523240b91e0d516f" translate="yes" xml:space="preserve">
          <source>You can use the following types of values for allow:</source>
          <target state="translated">allowには以下のタイプの値を使用することができます。</target>
        </trans-unit>
        <trans-unit id="3ce0a691bebd0b371247224bb7f78a55fdff48f0" translate="yes" xml:space="preserve">
          <source>You can use the four-argument form of sysread to continually add to a buffer. After you add to the buffer, you check if you have a complete line (using your regular expression).</source>
          <target state="translated">バッファに継続的に追加するために、sysreadの4つの引数形式を使うことができます。バッファに追加した後、(正規表現を使って)完全な行があるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="68293f8666171fe0ed45f0e78671e51ac55dfe3d" translate="yes" xml:space="preserve">
          <source>You can use the open source 7-zip ( &lt;a href=&quot;https://www.7-zip.org/&quot;&gt;https://www.7-zip.org/&lt;/a&gt; ) or the shareware Winzip ( &lt;a href=&quot;https://www.winzip.com&quot;&gt;https://www.winzip.com&lt;/a&gt; ) to decompress and unpack modules.</source>
          <target state="translated">オープンソースの7-zip（&lt;a href=&quot;https://www.7-zip.org/&quot;&gt;https://www.7-zip.org/&lt;/a&gt;）またはシェアウェアのWinzip（&lt;a href=&quot;https://www.winzip.com&quot;&gt;https://www.winzip.com&lt;/a&gt;）を使用して、モジュールを解凍および解凍できます。</target>
        </trans-unit>
        <trans-unit id="da343e9c661b7d9b54a6aef1473ed8a755544823" translate="yes" xml:space="preserve">
          <source>You can use the shareware Winzip ( &lt;a href=&quot;http://www.winzip.com&quot;&gt;http://www.winzip.com&lt;/a&gt; ) to decompress and unpack modules.</source>
          <target state="translated">シェアウェアのWinzip（&lt;a href=&quot;http://www.winzip.com&quot;&gt;http://www.winzip.com&lt;/a&gt;）を使用して、モジュールを解凍および解凍できます。</target>
        </trans-unit>
        <trans-unit id="29131242da6a21b6f2efd67a20aaa973ec754794" translate="yes" xml:space="preserve">
          <source>You can use the substitution operator to find pairs of characters (or runs of characters) and replace them with a single instance. In this substitution, we find a character in &lt;code&gt;(.)&lt;/code&gt;. The memory parentheses store the matched character in the back-reference &lt;code&gt;\g1&lt;/code&gt; and we use that to require that the same thing immediately follow it. We replace that part of the string with the character in &lt;code&gt;$1&lt;/code&gt; .</source>
          <target state="translated">置換演算子を使用して、文字のペア（または文字の連続）を検索し、それらを単一のインスタンスに置き換えることができます。この置換では、 &lt;code&gt;(.)&lt;/code&gt; 文字が見つかります。メモリの括弧は一致した文字を後方参照 &lt;code&gt;\g1&lt;/code&gt; 格納します。これを使用して、直後に同じことを要求します。文字列のその部分を &lt;code&gt;$1&lt;/code&gt; 文字に置き換えます。</target>
        </trans-unit>
        <trans-unit id="7f3665d3fee5fef1523abafbe5cde6dfe44f5710" translate="yes" xml:space="preserve">
          <source>You can use the substitution operator to find pairs of characters (or runs of characters) and replace them with a single instance. In this substitution, we find a character in &lt;code&gt;(.)&lt;/code&gt;. The memory parentheses store the matched character in the back-reference &lt;code&gt;\g1&lt;/code&gt; and we use that to require that the same thing immediately follow it. We replace that part of the string with the character in &lt;code&gt;$1&lt;/code&gt;.</source>
          <target state="translated">置換演算子を使用して、文字のペア（または文字の実行）を検索し、それらを単一のインスタンスに置き換えることができます。この置換では、 &lt;code&gt;(.)&lt;/code&gt; 文字があります。メモリ括弧は、一致した文字を後方参照 &lt;code&gt;\g1&lt;/code&gt; 格納し、それを使用して、同じものが直後に続くことを要求します。文字列のその部分を &lt;code&gt;$1&lt;/code&gt; 文字に置き換えます。</target>
        </trans-unit>
        <trans-unit id="b56ec6ea26f22e6bec1d13c6dc597e46c1853d2d" translate="yes" xml:space="preserve">
          <source>You can use the substr() function as an lvalue, in which case EXPR must itself be an lvalue. If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it. To keep the string the same length, you may need to pad or chop your value using &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">substr（）関数を左辺値として使用できます。この場合、EXPR自体は左辺値でなければなりません。LENGTHよりも短いものを割り当てると、文字列は短くなり、LENGTHよりも長いものを割り当てると、文字列はそれに合わせて大きくなります。文字列を同じ長さにするには、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; を使用して値をパディングまたはチョップする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="5696279d1bd6b651a532c13cf176bc61670cde27" translate="yes" xml:space="preserve">
          <source>You can use the substr() function as an lvalue, in which case EXPR must itself be an lvalue. If you assign something shorter than LENGTH, the string will shrink, and if you assign something longer than LENGTH, the string will grow to accommodate it. To keep the string the same length, you may need to pad or chop your value using &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">substr（）関数を左辺値として使用できます。この場合、EXPR自体は左辺値でなければなりません。LENGTHよりも短いものを割り当てると、文字列は短くなり、LENGTHよりも長いものを割り当てると、文字列はそれに合わせて大きくなります。文字列を同じ長さにするには、 &lt;code&gt;&lt;a href=&quot;sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; を使用して値をパディングまたはチョップする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="370c9e4d882e8e3555298091312bb16cb7ba0b14" translate="yes" xml:space="preserve">
          <source>You can use the tainted() function of the Scalar::Util module, available from CPAN (or included with Perl since release 5.8.0). See also &lt;a href=&quot;perlsec#Laundering-and-Detecting-Tainted-Data&quot;&gt;&quot;Laundering and Detecting Tainted Data&quot; in perlsec&lt;/a&gt;.</source>
          <target state="translated">CPANから入手できる（またはリリース5.8.0以降のPerlに含まれている）Scalar :: Utilモジュールのtainted（）関数を使用できます。&lt;a href=&quot;perlsec#Laundering-and-Detecting-Tainted-Data&quot;&gt;perlsecの「汚染されたデータの洗濯と検出」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="cfeed36c7e84bfafbf0ea57f25867379b77f770c" translate="yes" xml:space="preserve">
          <source>You can use the tainted() function of the Scalar::Util module, available from CPAN (or included with Perl since release 5.8.0). See also &lt;a href=&quot;perlsec#Laundering-and-Detecting-Tainted-Data&quot;&gt;Laundering and Detecting Tainted Data in perlsec&lt;/a&gt;.</source>
          <target state="translated">CPANから入手できる（またはリリース5.8.0以降のPerlに含まれている）Scalar :: Utilモジュールのtainted（）関数を使用できます。&lt;a href=&quot;perlsec#Laundering-and-Detecting-Tainted-Data&quot;&gt;perlsecでの汚染データのロンダリングと検出&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="67ef5a8d9d775587994b1c8525522dac443d6c25" translate="yes" xml:space="preserve">
          <source>You can use the three-argument form of open to specify I/O layers (sometimes referred to as &quot;disciplines&quot;) to apply to the new filehandle. These affect how the input and output are processed (see &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; and &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for more details). For example:</source>
          <target state="translated">openの3つの引数形式を使用して、新しいファイルハンドルに適用するI / Oレイヤー（「ディシプリン」と呼ばれることもあります）を指定できます。これらは、入力と出力の処理方法に影響します（詳細については、&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;と&lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt;を参照してください）。例えば：</target>
        </trans-unit>
        <trans-unit id="09d2af0acba58841da7d114d861e093a90573f8a" translate="yes" xml:space="preserve">
          <source>You can use these macros if you call code that may croak, but you need to do some cleanup before giving control back to Perl. For example:</source>
          <target state="translated">これらのマクロを使用することができますが、Perl に制御を返す前にクリーンアップを行う必要がある場合には、これらのコードを呼び出すことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8d60246dfc629fa2c767c2383b114af7d8fad4bc" translate="yes" xml:space="preserve">
          <source>You can use this as a shortcut to determine whether &lt;code&gt;Archive::Tar&lt;/code&gt; will do what you think before passing compressed archives to its &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">これをショートカットとして使用して、圧縮されたアーカイブを &lt;code&gt;&lt;a href=&quot;../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; メソッドに渡す前に、 &lt;code&gt;Archive::Tar&lt;/code&gt; が思い通りに動作するかどうかを判断できます。</target>
        </trans-unit>
        <trans-unit id="dbd42e35c7b3f7dd461bd372dbf9f5578060d86f" translate="yes" xml:space="preserve">
          <source>You can use this as a shortcut to determine whether &lt;code&gt;Archive::Tar&lt;/code&gt; will do what you think before passing compressed archives to its &lt;code&gt;read&lt;/code&gt; method.</source>
          <target state="translated">これをショートカットとして使用して、 &lt;code&gt;Archive::Tar&lt;/code&gt; が圧縮アーカイブを &lt;code&gt;read&lt;/code&gt; メソッドに渡す前に、あなたが考えていることを実行するかどうかを判断できます。</target>
        </trans-unit>
        <trans-unit id="a2583bc76f12f41a833e44f457c707f446ecc90f" translate="yes" xml:space="preserve">
          <source>You can use this class as the base class for a Pod formatter/processor.</source>
          <target state="translated">このクラスは、Podフォーマッタ/プロセッサのベースクラスとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="ddc269b809151a32259fd4bfb2f0eaf592a60142" translate="yes" xml:space="preserve">
          <source>You can use this subroutine to get and set the traversal mask for a specific hash. Setting the mask ensures that a given hash will produce the same key order. &lt;b&gt;Note&lt;/b&gt; that this does &lt;b&gt;not&lt;/b&gt; guarantee that &lt;b&gt;two&lt;/b&gt; hashes will produce the same key order for the same hash seed and traversal mask, items that collide into one bucket may have different orders regardless of this setting.</source>
          <target state="translated">このサブルーチンを使用して、特定のハッシュのトラバーサルマスクを取得および設定できます。マスクを設定すると、特定のハッシュが同じキー順序を生成することが保証されます。これは、&lt;b&gt;2つの&lt;/b&gt;ハッシュが同じハッシュシードとトラバーサルマスクに対して同じキーの順序を生成することを保証するものでは&lt;b&gt;ない&lt;/b&gt;ことに&lt;b&gt;注意し&lt;/b&gt;て&lt;b&gt;ください&lt;/b&gt;。1つのバケットに衝突するアイテムは、この設定に関係なく異なる順序になる場合があります。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="3cb82727ce61d8edf5281f6c0ba4e6a9919853bd" translate="yes" xml:space="preserve">
          <source>You can use this to concatenate two scalars:</source>
          <target state="translated">これを使って2つのスカラを連結することができます。</target>
        </trans-unit>
        <trans-unit id="4e57a6a3e1ac0e576a34f1deb9cbe35e8438d88f" translate="yes" xml:space="preserve">
          <source>You can use this to find out whether two handles refer to the same underlying descriptor:</source>
          <target state="translated">これを使用して、2 つのハンドルが同じ基礎となる記述子を参照しているかどうかを調べることができます。</target>
        </trans-unit>
        <trans-unit id="e2f6df83e5ac1b378170dbde8b31e8b10cee41f6" translate="yes" xml:space="preserve">
          <source>You can use this to print out all the variables in a package, for instance. The standard but antiquated</source>
          <target state="translated">これを使って、例えばパッケージ内のすべての変数を印刷することができます。標準ではありますが、時代遅れの</target>
        </trans-unit>
        <trans-unit id="2c064b95103461f4732f35fcd238f5be71635622" translate="yes" xml:space="preserve">
          <source>You can use this to record all events AFTER they have been sent to the formatter. No changes made here will be meaningful, except possibly to other listeners.</source>
          <target state="translated">これを使って、フォーマッタに送られた後のすべてのイベントを記録することができます。ここで行われた変更は、他のリスナーにとっては意味があるかもしれませんが、何の意味もありません。</target>
        </trans-unit>
        <trans-unit id="973b86bb17e6d843653e8421a775f98d4d43a73b" translate="yes" xml:space="preserve">
          <source>You can use this to remove a listen callback. You must pass in the coderef returned by the &lt;code&gt;listen()&lt;/code&gt; method.</source>
          <target state="translated">これを使用して、リッスンコールバックを削除できます。 &lt;code&gt;listen()&lt;/code&gt; メソッドによって返されるcoderefを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="b6fe2602c37d36cd939b3f2966e9882c1457b54a" translate="yes" xml:space="preserve">
          <source>You can use whitespace and the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator to lay them out more nicely:</source>
          <target state="translated">空白と &lt;code&gt;=&amp;gt;&lt;/code&gt; 演算子を使用して、より適切にレイアウトできます。</target>
        </trans-unit>
        <trans-unit id="2a2d95bc6981ab5724b117c21adf2c42ff1324ac" translate="yes" xml:space="preserve">
          <source>You can watch Perl's regular expression engine at work to verify for yourself if Perl is recompiling a regular expression. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re
'debug'&lt;/code&gt; pragma (comes with Perl 5.005 and later) shows the details. With Perls before 5.6, you should see &lt;code&gt;re&lt;/code&gt; reporting that its compiling the regular expression on each iteration. With Perl 5.6 or later, you should only see &lt;code&gt;re&lt;/code&gt; report that for the first iteration.</source>
          <target state="translated">Perlの正規表現エンジンの動作を見て、Perlが正規表現を再コンパイルしているかどうかを確認できます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'debug'&lt;/code&gt; プラグマ（後にはPerl 5.005と付属しています）の詳細を示しています。Perlが5.6より前の場合は、反復ごとに正規表現をコンパイルすることを &lt;code&gt;re&lt;/code&gt; 報告しているはずです。Perl 5.6以降では、最初の反復の &lt;code&gt;re&lt;/code&gt; レポートのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="be5157e72fec47ccda29a3884d0d6aa69a038c22" translate="yes" xml:space="preserve">
          <source>You can watch Perl's regular expression engine at work to verify for yourself if Perl is recompiling a regular expression. The &lt;code&gt;use re 'debug'&lt;/code&gt; pragma (comes with Perl 5.005 and later) shows the details. With Perls before 5.6, you should see &lt;code&gt;re&lt;/code&gt; reporting that its compiling the regular expression on each iteration. With Perl 5.6 or later, you should only see &lt;code&gt;re&lt;/code&gt; report that for the first iteration.</source>
          <target state="translated">Perlの正規表現エンジンが機能しているのを見て、Perlが正規表現を再コンパイルしているかどうかを自分で確認できます。 &lt;code&gt;use re 'debug'&lt;/code&gt; プラグマは、（後にはPerl 5.005に付属していると）の詳細を示しています。5.6より前のPerlでは、反復ごとに正規表現をコンパイルしていることが &lt;code&gt;re&lt;/code&gt; 報告されているはずです。Perl 5.6以降では、最初の反復でのみ &lt;code&gt;re&lt;/code&gt; 報告が表示されます。</target>
        </trans-unit>
        <trans-unit id="b95a7534126966a35fdb290a82cc3eb90110d990" translate="yes" xml:space="preserve">
          <source>You can work around the first case by using the fully qualified name (&lt;code&gt;$Package::FOO&lt;/code&gt; ) where you need a local value, or by overriding it by saying &lt;code&gt;*FOO = *Package::FOO&lt;/code&gt; in your script.</source>
          <target state="translated">最初のケースは、ローカル値が必要な完全修飾名（ &lt;code&gt;$Package::FOO&lt;/code&gt; ）を使用するか、スクリプトで &lt;code&gt;*FOO = *Package::FOO&lt;/code&gt; と指定してオーバーライドすることで回避できます。</target>
        </trans-unit>
        <trans-unit id="5d9ed6d1d4bf51c3f2d48b808ade1c9eb6d3e68f" translate="yes" xml:space="preserve">
          <source>You can work around the first case by using the fully qualified name (&lt;code&gt;$Package::FOO&lt;/code&gt;) where you need a local value, or by overriding it by saying &lt;code&gt;*FOO = *Package::FOO&lt;/code&gt; in your script.</source>
          <target state="translated">最初のケースを回避するには、ローカル値が必要な場合に完全修飾名（ &lt;code&gt;$Package::FOO&lt;/code&gt; ）を使用するか、スクリプトで &lt;code&gt;*FOO = *Package::FOO&lt;/code&gt; と言ってオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="74896a00006c71879750ed85d659cbff45ee1a05" translate="yes" xml:space="preserve">
          <source>You can write this by hand or generate it with 'make manifest'.</source>
          <target state="translated">これを手書きで書くか、'make manifest'で生成します。</target>
        </trans-unit>
        <trans-unit id="b1c2fce28dbd805f8d7a870a949b6c5834632bf2" translate="yes" xml:space="preserve">
          <source>You can write this more briefly using a grep, which does the same thing.</source>
          <target state="translated">これをもっと簡単に書くと、grepを使っても同じことができます。</target>
        </trans-unit>
        <trans-unit id="abb98a8eca7d1aa69e5a0eb195e9e9713bd18c72" translate="yes" xml:space="preserve">
          <source>You can write your regular expressions just like someone on an ASCII platform would do. But keep in mind that using octal or hex notation to specify a particular code point will give you the character that the EBCDIC code page natively maps to it. (This is also true of all double-quoted strings.) If you want to write portably, just use the &lt;code&gt;\N{U+...}&lt;/code&gt; notation everywhere where you would have used &lt;code&gt;\x{...}&lt;/code&gt; , and don't use octal notation at all.</source>
          <target state="translated">ASCIIプラットフォームの誰かがするように、正規表現を書くことができます。ただし、8進または16進表記を使用して特定のコードポイントを指定すると、EBCDICコードページがネイティブにマッピングする文字が得られることに注意してください。（これはすべての二重引用符で囲まれた文字列にも当てはまります。）移植性のある方法で書き込みたい場合は、 &lt;code&gt;\N{U+...}&lt;/code&gt; 表記を &lt;code&gt;\x{...}&lt;/code&gt; を使用していたすべての場所で使用してください。 8進数表記を使用してください。</target>
        </trans-unit>
        <trans-unit id="7d266b91c488913460baf4dd560ddccb0fd29aed" translate="yes" xml:space="preserve">
          <source>You can write your regular expressions just like someone on an ASCII platform would do. But keep in mind that using octal or hex notation to specify a particular code point will give you the character that the EBCDIC code page natively maps to it. (This is also true of all double-quoted strings.) If you want to write portably, just use the &lt;code&gt;\N{U+...}&lt;/code&gt; notation everywhere where you would have used &lt;code&gt;\x{...}&lt;/code&gt;, and don't use octal notation at all.</source>
          <target state="translated">ASCIIプラットフォームの誰かが行うのと同じように、正規表現を書くことができます。ただし、8進表記または16進表記を使用して特定のコードポイントを指定すると、EBCDICコードページがネイティブにマップする文字が得られることに注意してください。（これは、すべての二重引用符で囲まれた文字列にも当てはまります。）移植可能に記述したい場合は、 &lt;code&gt;\x{...}&lt;/code&gt; を使用するすべての場所で &lt;code&gt;\N{U+...}&lt;/code&gt; 表記を使用してください。 8進表記を使用します。</target>
        </trans-unit>
        <trans-unit id="0c77e05c4dac877ccb1d3bc62136f650220cc0e0" translate="yes" xml:space="preserve">
          <source>You can't (directly) write a recursive lexical subroutine:</source>
          <target state="translated">再帰的な語彙サブルーチンを(直接)書くことはできません。</target>
        </trans-unit>
        <trans-unit id="e94e5e7086b787cf553633de7398d82024090d60" translate="yes" xml:space="preserve">
          <source>You can't (easily) have any space in front of the tag.</source>
          <target state="translated">タグの前にスペースを確保することは(簡単には)できません。</target>
        </trans-unit>
        <trans-unit id="62834a834066a3093a80c93ec315493101e7f82e" translate="yes" xml:space="preserve">
          <source>You can't disambiguate that by saying &lt;code&gt;\{1}000&lt;/code&gt; , whereas you can fix it with &lt;code&gt;${1}000&lt;/code&gt;. The operation of interpolation should not be confused with the operation of matching a backreference. Certainly they mean two different things on the</source>
          <target state="translated">&lt;code&gt;\{1}000&lt;/code&gt; と言ってもそれを明確にすることはできませんが、 &lt;code&gt;${1}000&lt;/code&gt; 修正できます。補間の操作は、後方参照を照合する操作と混同しないでください。確かに彼らは2つの異なることを意味します</target>
        </trans-unit>
        <trans-unit id="446ed284a8405938957f84b57096d4442d17377f" translate="yes" xml:space="preserve">
          <source>You can't disambiguate that by saying &lt;code&gt;\{1}000&lt;/code&gt;, whereas you can fix it with &lt;code&gt;${1}000&lt;/code&gt;. The operation of interpolation should not be confused with the operation of matching a backreference. Certainly they mean two different things on the</source>
          <target state="translated">&lt;code&gt;\{1}000&lt;/code&gt; と言っても曖昧さを解消することはできませんが、 &lt;code&gt;${1}000&lt;/code&gt; 修正できます。補間の操作を、後方参照のマッチングの操作と混同しないでください。確かにそれらは2つの異なることを意味します</target>
        </trans-unit>
        <trans-unit id="020ca4e878548eed17ca845dc3179b69179a2006" translate="yes" xml:space="preserve">
          <source>You can't do this with the &lt;code&gt;if&lt;/code&gt; pragma; however, you can achieve exactly this effect, at compile time, with:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; プラグマではこれを行うことはできません。ただし、コンパイル時に、次の方法でこの効果を正確に実現できます。</target>
        </trans-unit>
        <trans-unit id="026d053774b9559119bfc24f712c71285ffb2ad2" translate="yes" xml:space="preserve">
          <source>You can't have =items (as at line</source>
          <target state="translated">行目のように =items を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="b18683b4b76072abbee71a6881cdb8bc575df90f" translate="yes" xml:space="preserve">
          <source>You can't have a hash whose values are arrays; hash values can only be scalars. We're stuck with that. But a single reference can refer to an entire array, and references are scalars, so you can have a hash of references to arrays, and it'll act a lot like a hash of arrays, and it'll be just as useful as a hash of arrays.</source>
          <target state="translated">ハッシュの値が配列であるハッシュを持つことはできません。ハッシュ値はスカラ値にしかなりません。しかし、単一の参照は配列全体を参照することができますし、参照はスカラなので、配列への参照のハッシュを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d10d9e535268b6be7a5edad8c961bf0a3eba1a2f" translate="yes" xml:space="preserve">
          <source>You can't prevent people from sending your script bad data. Even if you add some client-side checks, people may disable them or bypass them completely. For instance, someone might use a module such as &lt;a href=&quot;http://search.cpan.org/perldoc/LWP&quot;&gt;LWP&lt;/a&gt; to submit to your web site. If you want to prevent data that try to use SQL injection or other sorts of attacks (and you should want to), you have to not trust any data that enter your program.</source>
          <target state="translated">不正なデータがスクリプトから送信されるのを防ぐことはできません。クライアント側のチェックをいくつか追加しても、人々はそれらを無効にするか完全にバイパスするかもしれません。たとえば、誰かが&lt;a href=&quot;http://search.cpan.org/perldoc/LWP&quot;&gt;LWP&lt;/a&gt;などのモジュールを使用してWebサイトに送信する場合があります。 SQLインジェクションまたは他の種類の攻撃を使用しようとするデータを防止したい場合（そして、必要な場合）、プログラムに入るデータを信頼する必要はありません。</target>
        </trans-unit>
        <trans-unit id="6424e72f031416bce90e6701fa0fc1986967103a" translate="yes" xml:space="preserve">
          <source>You can't prevent people from sending your script bad data. Even if you add some client-side checks, people may disable them or bypass them completely. For instance, someone might use a module such as &lt;a href=&quot;lwp&quot;&gt;LWP&lt;/a&gt; to submit to your web site. If you want to prevent data that try to use SQL injection or other sorts of attacks (and you should want to), you have to not trust any data that enter your program.</source>
          <target state="translated">人々があなたのスクリプトに悪いデータを送るのを防ぐことはできません。クライアント側のチェックをいくつか追加しても、ユーザーはそれらを無効にしたり、完全にバイパスしたりする可能性があります。たとえば、誰かが&lt;a href=&quot;lwp&quot;&gt;LWP&lt;/a&gt;などのモジュールを使用してWebサイトに送信する場合があります。 SQLインジェクションやその他の種類の攻撃を使用しようとするデータを防止したい場合（そしてそうする必要がある場合）、プログラムに入力されるデータを信頼する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8673b45bcf51a92e5bbd4f8ac4117b4afa807acf" translate="yes" xml:space="preserve">
          <source>You can't produce a tied constant by giving a tied scalar as the value. References to tied variables, however, can be used as constants without any problems.</source>
          <target state="translated">タイドスカラを値として与えても、タイド定数を生成することはできません。しかし、結び付けられた変数への参照は問題なく定数として使用できます。</target>
        </trans-unit>
        <trans-unit id="37d171546c154312737dfd62e998eea96bcef04d" translate="yes" xml:space="preserve">
          <source>You can't store GLOB, FORMLINE, REGEXP, etc.... If you can define semantics for those operations, feel free to enhance Storable so that it can deal with them.</source>
          <target state="translated">GLOB、FORMLINE、REGEXPなどは格納できません。これらの操作のセマンティクスを定義できるのであれば、Storableがそれらの操作に対応できるように自由に拡張してください。</target>
        </trans-unit>
        <trans-unit id="67bd9de8b466ae8269d533b74dcf8f4858db7b40" translate="yes" xml:space="preserve">
          <source>You can't store GLOB, FORMLINE, etc.... If you can define semantics for those operations, feel free to enhance Storable so that it can deal with them.</source>
          <target state="translated">GLOB,FORMLINEなどは格納できません....。これらの操作のセマンティクスを定義できるのであれば、Storableがそれらの操作に対応できるように自由に拡張してください。</target>
        </trans-unit>
        <trans-unit id="e0c681bde3f10285d1065419cbcfdfe8d15a0638" translate="yes" xml:space="preserve">
          <source>You can't take the address of anything, although a similar operator in Perl is the backslash, which creates a reference.</source>
          <target state="translated">何かのアドレスを取ることはできませんが、Perl の類似した演算子にバックスラッシュがあり、参照を作成します。</target>
        </trans-unit>
        <trans-unit id="3d03f47a54efdf6a567386eabfcea4dcbcebbcab" translate="yes" xml:space="preserve">
          <source>You can't use a reference to an array or hash in quite the same way that you would a real array or hash. For C or C++ programmers unused to distinguishing between arrays and pointers to the same, this can be confusing. If so, just think of it as the difference between a structure and a pointer to a structure.</source>
          <target state="translated">配列やハッシュへの参照は、実際の配列やハッシュと全く同じように使うことはできません。配列とポインタの区別に慣れていないCやC++プログラマーにとっては、これは混乱を招くでしょう。その場合は、構造体と構造体へのポインタの違いと考えてください。</target>
        </trans-unit>
        <trans-unit id="f88b12efd9288b17ac8ba038151b3170bc987f73" translate="yes" xml:space="preserve">
          <source>You can't. Some use the UTF8 flag for this, but that's misuse, and makes well behaved modules like Data::Dumper look bad. The flag is useless for this purpose, because it's off when an 8 bit encoding (by default ISO-8859-1) is used to store the string.</source>
          <target state="translated">できません。このためにUTF8フラグを使っている人もいますが、これは誤用であり、Data::Dumperのような振る舞いの良いモジュールを悪く見せてしまいます。このフラグは、文字列を格納するのに8ビットエンコーディング(デフォルトではISO-8859-1)が使われている場合にはオフになっているので、この目的には意味がありません。</target>
        </trans-unit>
        <trans-unit id="2fd8f1486a5edc4ee6dd1a50f986e5205ada1304" translate="yes" xml:space="preserve">
          <source>You can't. This is because UTF-8 data is stored in bytes just like non-UTF-8 data. The Unicode character 200, (&lt;code&gt;0xC8&lt;/code&gt; for you hex types) capital E with a grave accent, is represented by the two bytes &lt;code&gt;v196.172&lt;/code&gt; . Unfortunately, the non-Unicode string &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(196).chr(172)&lt;/a&gt;&lt;/code&gt; has that byte sequence as well. So you can't tell just by looking -- this is what makes Unicode input an interesting problem.</source>
          <target state="translated">できません。これは、UTF-8データが非UTF-8データと同様にバイト単位で格納されるためです。重大なアクセントのあるUnicode文字200（16進数タイプの場合は &lt;code&gt;0xC8&lt;/code&gt; ）の大文字Eは、2バイト &lt;code&gt;v196.172&lt;/code&gt; で表されます。残念ながら、非Unicode文字列 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(196).chr(172)&lt;/a&gt;&lt;/code&gt; にもそのバイトシーケンスがあります。したがって、見ただけではわかりません。これが、Unicode入力を興味深い問題にしている理由です。</target>
        </trans-unit>
        <trans-unit id="7f972addc76fd0cd985b7d4af8bf74af7b31dec1" translate="yes" xml:space="preserve">
          <source>You can't. This is because UTF-8 data is stored in bytes just like non-UTF-8 data. The Unicode character 200, (&lt;code&gt;0xC8&lt;/code&gt; for you hex types) capital E with a grave accent, is represented by the two bytes &lt;code&gt;v196.172&lt;/code&gt;. Unfortunately, the non-Unicode string &lt;code&gt;chr(196).chr(172)&lt;/code&gt; has that byte sequence as well. So you can't tell just by looking -- this is what makes Unicode input an interesting problem.</source>
          <target state="translated">できません。これは、UTF-8データが非UTF-8データと同じようにバイト単位で格納されるためです。Unicode文字200（16進タイプの場合は &lt;code&gt;0xC8&lt;/code&gt; ）、 &lt;code&gt;v196.172&lt;/code&gt; 付きの大文字Eは、2バイトのv196.172で表されます。残念ながら、非Unicode文字列 &lt;code&gt;chr(196).chr(172)&lt;/code&gt; にもそのバイトシーケンスがあります。したがって、見ただけではわかりません。これが、Unicode入力を興味深い問題にしている理由です。</target>
        </trans-unit>
        <trans-unit id="e5a4ed4ed782a30731e5ac82f99a95d222b188b0" translate="yes" xml:space="preserve">
          <source>You can't. You need to imitate the &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; call (see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for sample code) and then have a signal handler for the INT signal that passes the signal on to the subprocess. Or you can check for it:</source>
          <target state="translated">できません。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 呼び出し（サンプルコードについては&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照）を模倣し、シグナルをサブプロセスに渡すINTシグナルのシグナルハンドラーを用意する必要があります。または、それを確認することができます：</target>
        </trans-unit>
        <trans-unit id="6e29577f40cc4b8214af8a5686eca5058c2c6b00" translate="yes" xml:space="preserve">
          <source>You can't. You need to imitate the &lt;code&gt;system()&lt;/code&gt; call (see &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for sample code) and then have a signal handler for the INT signal that passes the signal on to the subprocess. Or you can check for it:</source>
          <target state="translated">できません。 &lt;code&gt;system()&lt;/code&gt; 呼び出しを模倣して（サンプルコードについては&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照）、シグナルをサブプロセスに渡すINTシグナルのシグナルハンドラーを用意する必要があります。または、それを確認することができます：</target>
        </trans-unit>
        <trans-unit id="969f4cfd26924af3983dcc03e66552409285562e" translate="yes" xml:space="preserve">
          <source>You can, of course, declare separate handlers for these types as well (but you'll need to specify &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt; warnings 'redefine'&lt;/code&gt; to do it quietly):</source>
          <target state="translated">もちろん、これらのタイプに個別のハンドラーを宣言することもできます（ただし、静かに行うには &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt; warnings 'redefine'&lt;/code&gt; しないように指定する必要があります）。</target>
        </trans-unit>
        <trans-unit id="9b9ddea33f9624effb8458a53428961e73756f4e" translate="yes" xml:space="preserve">
          <source>You can, of course, declare separate handlers for these types as well (but you'll need to specify &lt;code&gt;no warnings 'redefine'&lt;/code&gt; to do it quietly):</source>
          <target state="translated">もちろん、これらのタイプに対して個別のハンドラーを宣言することもできます（ただし、静かに行うには &lt;code&gt;no warnings 'redefine'&lt;/code&gt; を指定する必要があります）。</target>
        </trans-unit>
        <trans-unit id="74374dec5e50007a2bb85f4a7c8771f4686fdade" translate="yes" xml:space="preserve">
          <source>You cannot Configure Perl to use long doubles unless you have at least Tru64 V5.0, the long double support simply wasn't functional enough before that. Perl's Configure will override attempts to use the long doubles (you can notice this by Configure finding out that the modfl() function does not work as it should).</source>
          <target state="translated">少なくとも Tru64 V5.0 を持っていない限り、Perl を設定して長いダブルスを使用することはできません。Perl の Configure は長い倍数を使用しようとする試みをオーバーライドします (modfl()関数が本来あるべきように動作しないことを Configure が発見することで、これに気づくことができます)。</target>
        </trans-unit>
        <trans-unit id="9d01ce1702f639775b361fb520a4a77dd3873994" translate="yes" xml:space="preserve">
          <source>You cannot add a regular filter to a hub if the hub was created in another process or thread. You can always add a pre_filter.</source>
          <target state="translated">ハブが別のプロセスやスレッドで作成された場合は、通常のフィルタをハブに追加することはできません。常にpre_filterを追加することができます。</target>
        </trans-unit>
        <trans-unit id="12d8ae48400ed6e2886a4d5be754a09a9e2677eb" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;format_formfeed()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;format_formfeed()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d8bdeec288ef204b43d051952afe1296036c485c" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;format_formfeed()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;format_formfeed()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="886d6e7860352adfbf36238a2c3195543ecc4842" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;format_line_break_characters()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;format_line_break_characters()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="206c72a8b7cef7a32a6db021ff310a9ca6c22c22" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;format_line_break_characters()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;format_line_break_characters()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e0ebaf2ed18c8c28bbb77a954b42ef5fea55a1b9" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;input_record_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;input_record_separator()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be794aed40b9701358348d087034d06f390762c7" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;input_record_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;input_record_separator()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3fbf7abc01d969743407ff802897565a9f2a54c" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;output_field_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;output_field_separator()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0e9632f1b73e717ca255777fe1c2f39799e45e4a" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;output_field_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;output_field_separator()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2c8b5595acc49990fca235aed04153d4258b087b" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;output_record_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;IO::Handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">静的メソッドとしてのみ、ハンドルで &lt;code&gt;output_record_separator()&lt;/code&gt; を呼び出すことはできません。&lt;a href=&quot;IO::Handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9f3ec65172d98e67d60dc40971034bddc7747e9" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;output_record_separator()&lt;/code&gt; on a handle, only as a static method. See &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">ハンドルで &lt;code&gt;output_record_separator()&lt;/code&gt; を呼び出すことはできません。静的メソッドとしてのみ呼び出すことができます。&lt;a href=&quot;io/handle&quot;&gt;IO :: Handleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9134fa5f451fb01a8e6eeae9f39b7f5a89fc7ce" translate="yes" xml:space="preserve">
          <source>You cannot change the ordering once the database has been created. Thus you must use the same compare function every time you access the database.</source>
          <target state="translated">データベースが作成されると、順序を変更することはできません。したがって、データベースにアクセスするたびに同じ比較関数を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9e33a69a0160e97c284c6f83bf69b3911fb50910" translate="yes" xml:space="preserve">
          <source>You cannot currently get the precision from a specified number, but it is intended that this will be possible in the future, for example using &lt;code&gt;.*2$&lt;/code&gt;:</source>
          <target state="translated">現在、指定した番号からの精度を得ることができないが、将来的に可能になることを意図している、例えば使用 &lt;code&gt;.*2$&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9a19723c24ab74fcf1cad038cc364f2eed15903b" translate="yes" xml:space="preserve">
          <source>You cannot discern from mere inspection which builtins are unary operators (like chop() and chdir()) and which are list operators (like print() and unlink()). (Unless prototyped, user-defined subroutines can &lt;b&gt;only&lt;/b&gt; be list operators, never unary ones.) See &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; and &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">ビルトインが単項演算子（chop（）やchdir（）など）であるか、リスト演算子（print（）やunlink（）など）であるかは、単なる検査では識別できません。（プロトタイプ化されたユーザー定義のサブルーチンでない限り、リスト演算子&lt;b&gt;のみで&lt;/b&gt;あり、単項演算子ではありません。）&lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;および&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab137c3fb7d6e07844b33eb499911ea797677bd5" translate="yes" xml:space="preserve">
          <source>You cannot easily tie a multilevel data structure (such as a hash of hashes) to a dbm file. The first problem is that all but GDBM and Berkeley DB have size limitations, but beyond that, you also have problems with how references are to be represented on disk. One experimental module that does partially attempt to address this need is the MLDBM module. Check your nearest CPAN site as described in &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for source code to MLDBM.</source>
          <target state="translated">マルチレベルのデータ構造（ハッシュのハッシュなど）をdbmファイルに簡単に関連付けることはできません。最初の問題は、GDBMとBerkeley DBを除くすべてにサイズ制限があることですが、それを超えると、参照がディスク上でどのように表現されるかにも問題があります。このニーズに部分的に対処しようとする実験的なモジュールの1つがMLDBMモジュールです。MLDBMへのソースコードについては、&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;で説明されているように、最寄りのCPANサイトを確認してください。</target>
        </trans-unit>
        <trans-unit id="38213a95a75072574eb5ab9364f983653ee56ffc" translate="yes" xml:space="preserve">
          <source>You cannot easily tie a multilevel data structure (such as a hash of hashes) to a dbm file. The first problem is that all but GDBM and Berkeley DB have size limitations, but beyond that, you also have problems with how references are to be represented on disk. One module that does attempt to address this need is DBM::Deep. Check your nearest CPAN site as described in &lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt; for source code. Note that despite its name, DBM::Deep does not use dbm. Another earlier attempt at solving the problem is MLDBM, which is also available on the CPAN, but which has some fairly serious limitations.</source>
          <target state="translated">マルチレベルのデータ構造（ハッシュのハッシュなど）をdbmファイルに簡単に関連付けることはできません。最初の問題は、GDBMとBerkeley DBを除くすべてにサイズ制限があることですが、それを超えると、参照がディスク上でどのように表現されるかにも問題があります。このニーズに対処しようとする1つのモジュールは、DBM :: Deepです。ソースコードについては、&lt;a href=&quot;perlmodlib&quot;&gt;perlmodlib&lt;/a&gt;で説明されているように、最寄りのCPANサイトを確認してください。その名前にもかかわらず、DBM :: Deepはdbmを使用しないことに注意してください。問題を解決するための以前の別の試みはMLDBMです。これはCPANでも利用できますが、かなり深刻な制限があります。</target>
        </trans-unit>
        <trans-unit id="54808a204fe862b1dfa25e752a892b2a04ab63bf" translate="yes" xml:space="preserve">
          <source>You cannot get stack frame information or in any fashion debug functions that were not compiled by Perl, such as those from C or C++ extensions.</source>
          <target state="translated">C や C++の拡張機能など、Perl でコンパイルされていない関数のスタックフレーム情報やデバッグ関数を取得することはできません。</target>
        </trans-unit>
        <trans-unit id="b370a3f9299c4f8abb35adc5b9b2b86568a00bc8" translate="yes" xml:space="preserve">
          <source>You cannot lock the individual elements of a container variable:</source>
          <target state="translated">コンテナ変数の個々の要素をロックすることはできません。</target>
        </trans-unit>
        <trans-unit id="f2b8b7a26c050e538a292ea22f61da0581625210" translate="yes" xml:space="preserve">
          <source>You cannot portably &quot;stack&quot; cpp directives. For example in the above you need two separate BURGLE() #defines, one for each #ifdef branch.</source>
          <target state="translated">cpp ディレクティブを移植的に &quot;スタック&quot; することはできません。例えば、上の例では、2つのBURGLE()#defineが必要です。</target>
        </trans-unit>
        <trans-unit id="b918f134e01ab04a493d865bacd0ad2555d6eed0" translate="yes" xml:space="preserve">
          <source>You cannot set $RS to a pattern, only a string.</source>
          <target state="translated">RS をパターンに設定することはできません。</target>
        </trans-unit>
        <trans-unit id="891970fccef081510b98291902ea82121168e7ae" translate="yes" xml:space="preserve">
          <source>You cannot tie this routine directly to an option, e.g.:</source>
          <target state="translated">このルーチンをオプションに直接結びつけることはできません。</target>
        </trans-unit>
        <trans-unit id="2d9b5eae243979aa930fce2644c85c94e98e03e5" translate="yes" xml:space="preserve">
          <source>You cannot use &lt;b&gt;-i&lt;/b&gt; to create directories or to strip extensions from files.</source>
          <target state="translated">&lt;b&gt;-i&lt;/b&gt;を使用してディレクトリを作成したり、ファイルから拡張子を取り除くことはできません。</target>
        </trans-unit>
        <trans-unit id="3d40633e0023663f60f6c6868c36efce9e85c50a" translate="yes" xml:space="preserve">
          <source>You compare the sort keys using a binary comparison and get the result of the comparison of the strings using UCA.</source>
          <target state="translated">ソートキーを二値比較で比較し、UCAを使って文字列を比較した結果を取得します。</target>
        </trans-unit>
        <trans-unit id="794fe9a7963db4b15645c3e75175ca30a42e7c02" translate="yes" xml:space="preserve">
          <source>You could also exclude &lt;code&gt;LC_NUMERIC&lt;/code&gt; , if you don't need it, by</source>
          <target state="translated">&lt;code&gt;LC_NUMERIC&lt;/code&gt; を除外することもできます（不要な場合）。</target>
        </trans-unit>
        <trans-unit id="7f8b90476595b6a38493d09d09f4d09a3ee84510" translate="yes" xml:space="preserve">
          <source>You could also exclude &lt;code&gt;LC_NUMERIC&lt;/code&gt;, if you don't need it, by</source>
          <target state="translated">必要がない場合は、 &lt;code&gt;LC_NUMERIC&lt;/code&gt; を除外することもできます。</target>
        </trans-unit>
        <trans-unit id="63946de92748533808fd29d4342bd54a0ec7a953" translate="yes" xml:space="preserve">
          <source>You could also have used the existing block property names:</source>
          <target state="translated">既存のブロックプロパティ名を使用することもできました。</target>
        </trans-unit>
        <trans-unit id="eaa54d59d0ed5e55dbc530f16d131415959a1711" translate="yes" xml:space="preserve">
          <source>You could also investigate the can() method in the UNIVERSAL class (part of the standard perl distribution).</source>
          <target state="translated">また、UNIVERSAL クラス (標準 perl ディストリビューションの一部)の can()メソッドを調査することもできます。</target>
        </trans-unit>
        <trans-unit id="802dff37470d190b2a864a13c708bc5907b98d91" translate="yes" xml:space="preserve">
          <source>You could also just know all the perl errors, and although there are some people who may know all of them, you probably don't. However, they all should be in the &lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt; manpage. If you don't find the error in there, it probably isn't a perl error.</source>
          <target state="translated">また、すべてのperlエラーを知ることもできます。すべてのエラーを知っている人もいますが、あなたは知らないかもしれません。ただし、これらはすべて&lt;a href=&quot;perldiag&quot;&gt;perldiag&lt;/a&gt;マンページにあるはずです。そこにエラーが見つからない場合、それはおそらくperlエラーではありません。</target>
        </trans-unit>
        <trans-unit id="80d2dd3ba7c4c2069cf58261b6aaeb6dcd467d24" translate="yes" xml:space="preserve">
          <source>You could also write a single get/set method using an optional argument:</source>
          <target state="translated">オプションの引数を使って、単一のget/setメソッドを書くこともできます。</target>
        </trans-unit>
        <trans-unit id="8444b9fc7a3ed8d2fa7659ffde996510ee7f1f46" translate="yes" xml:space="preserve">
          <source>You could build a web site using &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt; and your own code, but for anything other than a very basic web site, using a web framework (that uses &lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;) is a better option.</source>
          <target state="translated">&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;と独自のコードを使用してWebサイトを構築できますが、非常に基本的なWebサイト以外の場合は、（&lt;a href=&quot;http://search.cpan.org/perldoc/Plack&quot;&gt;Plack&lt;/a&gt;を使用する）Webフレームワークを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5c2c9c77f0aed52ec579ee2ac823c3d0735f4eb0" translate="yes" xml:space="preserve">
          <source>You could build a web site using &lt;a href=&quot;plack&quot;&gt;Plack&lt;/a&gt; and your own code, but for anything other than a very basic web site, using a web framework (that uses &lt;a href=&quot;https://plackperl.org&quot;&gt;https://plackperl.org&lt;/a&gt;) is a better option.</source>
          <target state="translated">&lt;a href=&quot;plack&quot;&gt;Plack&lt;/a&gt;と独自のコードを使用してWebサイトを構築することもできますが、非常に基本的なWebサイト以外の場合は、Webフレームワーク（&lt;a href=&quot;https://plackperl.org&quot;&gt;https://plackperl.org&lt;/a&gt;を使用）を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2158ae7a8b9ea3f34a07fb0e90c3b98892665dc8" translate="yes" xml:space="preserve">
          <source>You could conceivably do both.</source>
          <target state="translated">両方できるかもしれない</target>
        </trans-unit>
        <trans-unit id="49073618f97078f446e251732bebc1a46a9b86b9" translate="yes" xml:space="preserve">
          <source>You could do the memoization yourself, by rewriting the function, like this:</source>
          <target state="translated">こんな感じで関数を書き換えれば、自分でメモ書きをすることができます。</target>
        </trans-unit>
        <trans-unit id="958608f6d5208c278d0f2a3422ee32f9617b3a57" translate="yes" xml:space="preserve">
          <source>You could do this through opening an ordinary filehandle into each of those files, gradually building up an in-memory array of all the file contents you load this way, and finally sorting and filtering that array when you've run out of files to load.</source>
          <target state="translated">これらのファイルのそれぞれに通常のファイルハンドルを開き、この方法で読み込んだすべてのファイルの内容のインメモリ配列を徐々に構築し、読み込むファイルがなくなったときにその配列をソートしてフィルタリングすることで、これを行うことができます。</target>
        </trans-unit>
        <trans-unit id="a8bc28868b949ea5a73ffcd10a5a6d7af5c6ab02" translate="yes" xml:space="preserve">
          <source>You could do this:</source>
          <target state="translated">こんなこともできるんですね。</target>
        </trans-unit>
        <trans-unit id="9e128ecfca5b0e265baad327ad431d782e5e7ffc" translate="yes" xml:space="preserve">
          <source>You could edit that header yourself to remove that last '/', or you might note that Language Environment (LE) APAR PQ39997 describes the problem and PTF's UQ46272 and UQ46271 are the (R8 at least) fixes and apply them. If left unattended that syntax error will turn up as an inability for Perl to build its &quot;Socket&quot; extension.</source>
          <target state="translated">あるいは、言語環境 (LE)APAR PQ39997 に問題が記述されていて、 PTF の UQ46272 と UQ46271 が (少なくとも R8 の)修正プログラムであることに注意して、それらを適用することができるかもしれません。この構文エラーを放置しておくと、Perl が &quot;Socket&quot; 拡張モジュールをビルドできないことが判明します。</target>
        </trans-unit>
        <trans-unit id="3e7ad6be7d9fb2b01433fa3be5444bc3be8a1d7d" translate="yes" xml:space="preserve">
          <source>You could instead do lookups on $wanted with:</source>
          <target state="translated">代わりに $wanted で検索することができます。</target>
        </trans-unit>
        <trans-unit id="457f8e624ad1da28bfb9cf34b1f79dc6623d16da" translate="yes" xml:space="preserve">
          <source>You could just store all your dates as a number and then subtract. Life isn't always that simple though.</source>
          <target state="translated">すべての日付を数字として保存してから引き算することができます。人生はいつもそんな単純なものではありません。</target>
        </trans-unit>
        <trans-unit id="c19f6ab6291cf9eaf2e211ed563b35ea9ac437b5" translate="yes" xml:space="preserve">
          <source>You could open the document in a web browser, and change the character set or character encoding until you can visually confirm that all characters look the way they should.</source>
          <target state="translated">Web ブラウザでドキュメントを開き、すべての文字が本来あるべき姿に見えることを目視で確認できるようになるまで、文字セットや文字エンコーディングを変更することができます。</target>
        </trans-unit>
        <trans-unit id="6bbc1dc32472d30736fd70aa0522d187dae0801f" translate="yes" xml:space="preserve">
          <source>You could tell make to run tests in both of those directories with the following directives:</source>
          <target state="translated">これらの両方のディレクトリでテストを実行するように make に指示するには、以下のディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="2a20c232c667e613d02f2b4874878f40bc6c28f2" translate="yes" xml:space="preserve">
          <source>You could write the last two using the &lt;code&gt;-u&lt;/code&gt; and &lt;code&gt;-d&lt;/code&gt; operators. Commonly available &lt;code&gt;S_IF*&lt;/code&gt; constants are:</source>
          <target state="translated">最後の2つは、 &lt;code&gt;-u&lt;/code&gt; および &lt;code&gt;-d&lt;/code&gt; 演算子を使用して記述できます。一般的に利用可能な &lt;code&gt;S_IF*&lt;/code&gt; 定数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2516f9cbf3f3333565923611bf8e4c6225451c64" translate="yes" xml:space="preserve">
          <source>You create the queue with &lt;code&gt;Thread::Queue-&amp;gt;new()&lt;/code&gt; . Then you can add lists of scalars onto the end with &lt;code&gt;enqueue()&lt;/code&gt; , and pop scalars off the front of it with &lt;code&gt;dequeue()&lt;/code&gt; . A queue has no fixed size, and can grow as needed to hold everything pushed on to it.</source>
          <target state="translated">キューは &lt;code&gt;Thread::Queue-&amp;gt;new()&lt;/code&gt; 作成します。次に、 &lt;code&gt;enqueue()&lt;/code&gt; を使用してスカラーのリストを最後に追加し、 &lt;code&gt;dequeue()&lt;/code&gt; を使用してスカラーの先頭からポップします。キューには固定サイズがなく、プッシュされたすべてを保持するために必要に応じて拡張できます。</target>
        </trans-unit>
        <trans-unit id="c19ccf2bc39b48b6ea782f37420e2fd0ec94934e" translate="yes" xml:space="preserve">
          <source>You create the queue with &lt;code&gt;Thread::Queue-&amp;gt;new()&lt;/code&gt;. Then you can add lists of scalars onto the end with &lt;code&gt;enqueue()&lt;/code&gt;, and pop scalars off the front of it with &lt;code&gt;dequeue()&lt;/code&gt;. A queue has no fixed size, and can grow as needed to hold everything pushed on to it.</source>
          <target state="translated">&lt;code&gt;Thread::Queue-&amp;gt;new()&lt;/code&gt; 使用してキューを作成します。次に、 &lt;code&gt;enqueue()&lt;/code&gt; を使用してスカラーのリストを最後に追加し、 &lt;code&gt;dequeue()&lt;/code&gt; を使用してその前にスカラーをポップできます。キューには固定サイズはなく、必要に応じて拡張して、キューにプッシュされたすべてのものを保持できます。</target>
        </trans-unit>
        <trans-unit id="dede4110b8ccb447bd7101130015f76cda530da1" translate="yes" xml:space="preserve">
          <source>You currently don't need to instantiate a factory in order to use it.</source>
          <target state="translated">現在のところ、ファクトリーを使用するためにインスタンス化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="94aa24e74566493da77121fdf1cf79a43455f271" translate="yes" xml:space="preserve">
          <source>You did not run &lt;code&gt;omflibs&lt;/code&gt; . See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;omflibs&lt;/code&gt; を実行していません。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="520c8e979cd55500908dc61d154b50983c533336" translate="yes" xml:space="preserve">
          <source>You did not run &lt;code&gt;omflibs&lt;/code&gt;. See &lt;a href=&quot;#Prerequisites&quot;&gt;&quot;Prerequisites&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;omflibs&lt;/code&gt; を実行しませんでした。&lt;a href=&quot;#Prerequisites&quot;&gt;「前提条件」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="351e72fc696e530c4b98b81dced35a153aee9b73" translate="yes" xml:space="preserve">
          <source>You did try the &lt;b&gt;-w&lt;/b&gt; switch, didn't you?</source>
          <target state="translated">&lt;b&gt;-w&lt;/b&gt;スイッチを試しましたか？</target>
        </trans-unit>
        <trans-unit id="4eedca5e5af0ab78e40eb2863f783568ef2a973d" translate="yes" xml:space="preserve">
          <source>You do have &lt;code&gt;use strict&lt;/code&gt; and &lt;code&gt;use warnings&lt;/code&gt; enabled, don't you?</source>
          <target state="translated">あなたは持っている &lt;code&gt;use strict&lt;/code&gt; して &lt;code&gt;use warnings&lt;/code&gt; あなたには、有効になっていないのですか？</target>
        </trans-unit>
        <trans-unit id="88ae653a2469feaccaacebc0c4775e33fd1da464" translate="yes" xml:space="preserve">
          <source>You do need to be careful with the logical names representing process-permanent files, such as &lt;code&gt;SYS$INPUT&lt;/code&gt; and &lt;code&gt;SYS$OUTPUT&lt;/code&gt; . The translations for these logical names are prepended with a two-byte binary value (0x1B 0x00) that needs to be stripped off if you want to use it. (In previous versions of Perl it wasn't possible to get the values of these logical names, as the null byte acted as an end-of-string marker)</source>
          <target state="translated">&lt;code&gt;SYS$INPUT&lt;/code&gt; や &lt;code&gt;SYS$OUTPUT&lt;/code&gt; などのプロセス永続ファイルを表す論理名には注意する必要があります。これらの論理名の変換には、2バイトのバイナリ値（0x1B 0x00）が前に付加されます。これを使用する場合は、削除する必要があります。（以前のバージョンのPerlでは、nullバイトが文字列の終わりマーカーとして機能していたため、これらの論理名の値を取得することはできませんでした）</target>
        </trans-unit>
        <trans-unit id="50985c33eacad99671dfcb8dd8006db36d362e65" translate="yes" xml:space="preserve">
          <source>You do need to be careful with the logical names representing process-permanent files, such as &lt;code&gt;SYS$INPUT&lt;/code&gt; and &lt;code&gt;SYS$OUTPUT&lt;/code&gt;. The translations for these logical names are prepended with a two-byte binary value (0x1B 0x00) that needs to be stripped off if you want to use it. (In previous versions of Perl it wasn't possible to get the values of these logical names, as the null byte acted as an end-of-string marker)</source>
          <target state="translated">&lt;code&gt;SYS$INPUT&lt;/code&gt; や &lt;code&gt;SYS$OUTPUT&lt;/code&gt; などのプロセスパーマネントファイルを表す論理名には注意する必要があります。これらの論理名の変換には、2バイトのバイナリ値（0x1B 0x00）が付加されており、使用する場合は削除する必要があります。（以前のバージョンのPerlでは、ヌルバイトが文字列の終わりマーカーとして機能したため、これらの論理名の値を取得できませんでした）</target>
        </trans-unit>
        <trans-unit id="058b0924bf8d4ec16b563bbf0577363645a7bf62" translate="yes" xml:space="preserve">
          <source>You do not call &lt;code&gt;setlogsock&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;setlogsock&lt;/code&gt; を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="66b3b57985e95259e75aa2f231d8ac7e67d53cd1" translate="yes" xml:space="preserve">
          <source>You do not call &lt;code&gt;setlogsock&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setlogsock&lt;/code&gt; を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="0688f744612cb917b09a1848a221dbc87e7927a1" translate="yes" xml:space="preserve">
          <source>You do not have MT-safe</source>
          <target state="translated">MTセーフを持っていない</target>
        </trans-unit>
        <trans-unit id="2e1ca2f68a9ba2ef298384c1d65396bc3e584c1e" translate="yes" xml:space="preserve">
          <source>You do not have to override methods shown below unless you have to.</source>
          <target state="translated">以下に示すメソッドは、必要がない限りオーバーライドする必要はありません。</target>
        </trans-unit>
        <trans-unit id="fb758f283ea1827a0e24eaa44c4a0b710b292031" translate="yes" xml:space="preserve">
          <source>You do not need to use this directly.</source>
          <target state="translated">直接使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d463f5c40ea27790902d715d5582fd331f2a8862" translate="yes" xml:space="preserve">
          <source>You do this by using &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; and replacing your &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt;s with &lt;code&gt;carp&lt;/code&gt; s. If you need to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, say &lt;code&gt;croak&lt;/code&gt; instead. However, keep &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; in place for your sanity checks - where it really is your module at fault.</source>
          <target state="translated">これを行うには、&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;を使用して &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;carp&lt;/code&gt; に置き換えます。 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 必要がある場合は、代わりに &lt;code&gt;croak&lt;/code&gt; と言ってください。ただし、健全性チェックのために &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 状態を維持します。これは、実際に障害のあるモジュールです。</target>
        </trans-unit>
        <trans-unit id="113f89135b9f076e711872b293b64852cb136b98" translate="yes" xml:space="preserve">
          <source>You do this by using &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; and replacing your &lt;code&gt;warn&lt;/code&gt;s with &lt;code&gt;carp&lt;/code&gt;s. If you need to &lt;code&gt;die&lt;/code&gt;, say &lt;code&gt;croak&lt;/code&gt; instead. However, keep &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;die&lt;/code&gt; in place for your sanity checks - where it really is your module at fault.</source>
          <target state="translated">これを行うには、&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;を使用し、 &lt;code&gt;warn&lt;/code&gt; を &lt;code&gt;carp&lt;/code&gt; に置き換えます。あなたが &lt;code&gt;die&lt;/code&gt; 必要があるならば、代わりに &lt;code&gt;croak&lt;/code&gt; を言ってください。しかし、キープ &lt;code&gt;warn&lt;/code&gt; と &lt;code&gt;die&lt;/code&gt; あなたの健全性チェックのための場所で-それは本当に障害で、あなたのモジュールです。</target>
        </trans-unit>
        <trans-unit id="005e9bdc4a22cadca7bbf603665f85ba87cfef2b" translate="yes" xml:space="preserve">
          <source>You don't actually</source>
          <target state="translated">あなたは実際には</target>
        </trans-unit>
        <trans-unit id="5d5d63d2e431a9c6b982f4e636021ca69ef4faa3" translate="yes" xml:space="preserve">
          <source>You don't actually &quot;trap&quot; a control character. Instead, that character generates a signal which is sent to your terminal's currently foregrounded process group, which you then trap in your process. Signals are documented in &lt;a href=&quot;perlipc#Signals&quot;&gt;&quot;Signals&quot; in perlipc&lt;/a&gt; and the section on &quot;Signals&quot; in the Camel.</source>
          <target state="translated">実際には、制御文字を「トラップ」することはありません。代わりに、その文字は、端末の現在フォアグラウンドされているプロセスグループに送信されるシグナルを生成し、それをプロセスにトラップします。シグナルは&lt;a href=&quot;perlipc#Signals&quot;&gt;、perlipcの「Signals」&lt;/a&gt;およびCamelの「Signals」のセクションに記載されています。</target>
        </trans-unit>
        <trans-unit id="27b09323fd0303316a1e04f47208b954d9880846" translate="yes" xml:space="preserve">
          <source>You don't actually &quot;trap&quot; a control character. Instead, that character generates a signal which is sent to your terminal's currently foregrounded process group, which you then trap in your process. Signals are documented in &lt;a href=&quot;perlipc#Signals&quot;&gt;Signals in perlipc&lt;/a&gt; and the section on &quot;Signals&quot; in the Camel.</source>
          <target state="translated">実際には制御文字を「トラップ」するわけではありません。代わりに、その文字は、端末の現在フォアグラウンドのプロセスグループに送信される信号を生成し、それをプロセスにトラップします。シグナルは&lt;a href=&quot;perlipc#Signals&quot;&gt;、Perlipcのシグナル&lt;/a&gt;とラクダの「シグナル」のセクションに記載されています。</target>
        </trans-unit>
        <trans-unit id="43005f5be66bea21174dcb83ad3e5e91f2ebadaa" translate="yes" xml:space="preserve">
          <source>You don't have to check for &lt;a href=&quot;#defined-EXPR&quot;&gt;&lt;code&gt;defined&lt;/code&gt;&lt;/a&gt; on the return from &lt;a href=&quot;#fcntl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt;&lt;code&gt;fcntl&lt;/code&gt;&lt;/a&gt;. Like &lt;a href=&quot;#ioctl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt;&lt;code&gt;ioctl&lt;/code&gt;&lt;/a&gt;, it maps a &lt;code&gt;0&lt;/code&gt; return from the system call into &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; in Perl. This string is true in boolean context and &lt;code&gt;0&lt;/code&gt; in numeric context. It is also exempt from the normal &lt;a href=&quot;perldiag#Argument-%22%25s%22-isn%27t-numeric%25s&quot;&gt;&lt;code&gt;Argument &quot;...&quot; isn't numeric&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; on improper numeric conversions.</source>
          <target state="translated">&lt;a href=&quot;#fcntl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt; &lt;code&gt;fcntl&lt;/code&gt; &lt;/a&gt;からの戻り時に&lt;a href=&quot;#defined-EXPR&quot;&gt; &lt;code&gt;defined&lt;/code&gt; &lt;/a&gt;を確認する必要はありません。&lt;a href=&quot;#ioctl-FILEHANDLE%2CFUNCTION%2CSCALAR&quot;&gt; &lt;code&gt;ioctl&lt;/code&gt; &lt;/a&gt;と同様に、システムコールからの &lt;code&gt;0&lt;/code&gt; リターンをPerlの &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; 0buttrue」にマップします。この文字列は、ブールコンテキストではtrue 、数値コンテキストでは &lt;code&gt;0&lt;/code&gt; です。また、通常の&lt;a href=&quot;perldiag#Argument-%22%25s%22-isn%27t-numeric%25s&quot;&gt; &lt;code&gt;Argument &quot;...&quot; isn't numeric&lt;/code&gt; &lt;/a&gt;、不適切な数値変換に対する数値&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;ではありません。</target>
        </trans-unit>
        <trans-unit id="9b1e2e036145d009e379c1e58f4e8404e4bb7c5f" translate="yes" xml:space="preserve">
          <source>You don't have to check for &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on the return from &lt;code&gt;&lt;a href=&quot;fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt;. Like &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;, it maps a &lt;code&gt;0&lt;/code&gt; return from the system call into &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; in Perl. This string is true in boolean context and &lt;code&gt;0&lt;/code&gt; in numeric context. It is also exempt from the normal &lt;b&gt;-w&lt;/b&gt; warnings on improper numeric conversions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt; からの戻りで &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; を確認する必要はありません。 &lt;code&gt;&lt;a href=&quot;ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; と同様に、Perl &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; システムコールからの &lt;code&gt;0&lt;/code&gt; の戻りを「0 but true」にマッピングします。この文字列は、ブールコンテキストではtrue 、数値コンテキストでは &lt;code&gt;0&lt;/code&gt; です。また、不適切な数値変換に関する通常の&lt;b&gt;-w&lt;/b&gt;警告も免除されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="91e28b8dde4eef2778828dc13bbb504ddd8429b3" translate="yes" xml:space="preserve">
          <source>You don't have to check for &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; on the return from &lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt;. Like &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt;, it maps a &lt;code&gt;0&lt;/code&gt; return from the system call into &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; in Perl. This string is true in boolean context and &lt;code&gt;0&lt;/code&gt; in numeric context. It is also exempt from the normal &lt;b&gt;-w&lt;/b&gt; warnings on improper numeric conversions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/fcntl&quot;&gt;fcntl&lt;/a&gt;&lt;/code&gt; からの戻りで &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; を確認する必要はありません。 &lt;code&gt;&lt;a href=&quot;functions/ioctl&quot;&gt;ioctl&lt;/a&gt;&lt;/code&gt; と同様に、Perl &lt;code&gt;&quot;0 but true&quot;&lt;/code&gt; システムコールからの &lt;code&gt;0&lt;/code&gt; の戻りを「0 but true」にマッピングします。この文字列は、ブールコンテキストではtrue 、数値コンテキストでは &lt;code&gt;0&lt;/code&gt; です。また、不適切な数値変換に関する通常の&lt;b&gt;-w&lt;/b&gt;警告も免除されます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b28935e71a19f281a841ddb06e95aa9113f5e9af" translate="yes" xml:space="preserve">
          <source>You don't have to close FILEHANDLE if you are immediately going to do another &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; on it, because &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; closes it for you. (See &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;.) However, an explicit &lt;a href=&quot;#close-FILEHANDLE&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; on an input file resets the line counter (&lt;a href=&quot;perlvar#%24.&quot;&gt;&lt;code&gt;$.&lt;/code&gt;&lt;/a&gt;), while the implicit close done by &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; does not.</source>
          <target state="translated">あなたはすぐに別のやろうとしている場合は、近いFILEHANDLEする必要はありません&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;ているため、それを&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;、あなたのために閉じて。（&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; を&lt;/a&gt;参照してください。）ただし、入力ファイルを明示的に&lt;a href=&quot;#close-FILEHANDLE&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;と、行カウンター（&lt;a href=&quot;perlvar#%24.&quot;&gt; &lt;code&gt;$.&lt;/code&gt; &lt;/a&gt;）がリセットされ&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;が、openによって実行される暗黙的な閉じるはリセットされません。</target>
        </trans-unit>
        <trans-unit id="3317a455934bcb4f5310b2ce1e13684a7b6884c6" translate="yes" xml:space="preserve">
          <source>You don't have to close FILEHANDLE if you are immediately going to do another &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; on it, because &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; closes it for you. (See &lt;a href=&quot;#open-FILEHANDLE&quot;&gt;open&lt;/a&gt;.) However, an explicit &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on an input file resets the line counter (&lt;code&gt;$.&lt;/code&gt; ), while the implicit close done by &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; does not.</source>
          <target state="translated">あなたはすぐに別のやろうとしている場合は、近いFILEHANDLEする必要はありません &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ているため、それを &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、あなたのために閉じて。（&lt;a href=&quot;#open-FILEHANDLE&quot;&gt;openを&lt;/a&gt;参照してください。）ただし、入力ファイルを明示的に &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; と、行カウンター（ &lt;code&gt;$.&lt;/code&gt; ）がリセットされ &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; が、openによって行われる暗黙的なクローズはリセットされません。</target>
        </trans-unit>
        <trans-unit id="d144697260e1beed6903444902a55fc7aceb423c" translate="yes" xml:space="preserve">
          <source>You don't have to close FILEHANDLE if you are immediately going to do another &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; on it, because &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; closes it for you. (See &lt;a href=&quot;#open-FILEHANDLE&quot;&gt;open&lt;/a&gt;.) However, an explicit &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on an input file resets the line counter (&lt;code&gt;$.&lt;/code&gt; ), while the implicit close done by &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; does not.</source>
          <target state="translated">あなたはすぐに別のやろうとしている場合は、近いFILEHANDLEする必要はありません &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; ているため、それを &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、あなたのために閉じて。（&lt;a href=&quot;#open-FILEHANDLE&quot;&gt;openを&lt;/a&gt;参照してください。）ただし、入力ファイルを明示的に &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; と、行カウンター（ &lt;code&gt;$.&lt;/code&gt; ）がリセットされ &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; が、openによって行われる暗黙的なクローズはリセットされません。</target>
        </trans-unit>
        <trans-unit id="ada37b6245f195e4fcd7aa6724d9b314782b9989" translate="yes" xml:space="preserve">
          <source>You don't have to do anything new in your extension to get this; since the Perl library provides Perl_get_context(), it will all just work.</source>
          <target state="translated">Perl ライブラリは Perl_get_context()を提供しているので、これを得るために拡張機能で何か新しいことをする必要はありません。</target>
        </trans-unit>
        <trans-unit id="0afa6281a85d9c8f0451db68d3408cd7d6bba6a9" translate="yes" xml:space="preserve">
          <source>You don't have to do this all on the command line, though, there are a few GUI options out there. The nice thing about these is you can wave a mouse over a variable and a dump of its data will appear in an appropriate window, or in a popup balloon, no more tiresome typing of 'x $varname' :-)</source>
          <target state="translated">コマンドラインですべてを行う必要はありませんが、いくつかのGUIオプションがあります。これらの良いところは、変数の上でマウスを振ると、そのデータのダンプが適切なウィンドウに表示されるか、ポップアップバルーンに表示され、'x $varname' と入力するのが面倒でなくなることです :-)</target>
        </trans-unit>
        <trans-unit id="bc3f5455b30ee7863f96aa530c94393c0cafca20" translate="yes" xml:space="preserve">
          <source>You don't have to enclose POSIX class names inside double brackets, hence both of the following work:</source>
          <target state="translated">POSIXクラス名を二重括弧で囲む必要はありません。</target>
        </trans-unit>
        <trans-unit id="229ae092ed53a2ce77c4892afb43389969fbd9bc" translate="yes" xml:space="preserve">
          <source>You don't have to use \b to match words though. You can look for non-word characters surrounded by word characters. These strings match the pattern /\b'\b/.</source>
          <target state="translated">b」を使わなくてもいいんだよ。単語に囲まれた単語以外の文字列を探すことができるんだ。これらの文字列は、/\b'\b/のパターンと一致します。</target>
        </trans-unit>
        <trans-unit id="21cad750fa1f143b35b4124baa7518d27d8319c9" translate="yes" xml:space="preserve">
          <source>You don't have to worry about finding or paying for Perl; it's freely available and several popular operating systems come with Perl. Community support in places such as Perlmonks ( &lt;a href=&quot;http://www.perlmonks.com&quot;&gt;http://www.perlmonks.com&lt;/a&gt; ) and the various Perl mailing lists ( &lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt; ) means that you can usually get quick answers to your problems.</source>
          <target state="translated">Perlの検索や支払いについて心配する必要はありません。それは自由に利用でき、人気のあるいくつかのオペレーティングシステムにはPerlが付属しています。Perlmonks（&lt;a href=&quot;http://www.perlmonks.com&quot;&gt;http://www.perlmonks.com&lt;/a&gt;）やさまざまなPerlメーリングリスト（&lt;a href=&quot;http://lists.perl.org&quot;&gt;http://lists.perl.org&lt;/a&gt;）などの場所でのコミュニティサポートにより、通常は問題に対する迅速な回答を得ることができます。</target>
        </trans-unit>
        <trans-unit id="8365eeff3d04c895cb1076cf6e1217da1d00d04f" translate="yes" xml:space="preserve">
          <source>You don't just have to match on fixed strings. In fact, you can match on just about anything you could dream of by using more complex regular expressions. These are documented at great length in &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;, but for the meantime, here's a quick cheat sheet:</source>
          <target state="translated">固定文字列で一致する必要はありません。実際、より複雑な正規表現を使用することで、夢に見たあらゆるものと一致させることができます。これらは&lt;a href=&quot;perlre&quot;&gt;perlreに詳細に記載&lt;/a&gt;されていますが、それまでの間、クイックチートシートを次に示します。</target>
        </trans-unit>
        <trans-unit id="6fa3f4f65b9497a1fe4774a26aaf551f58ec3c5f" translate="yes" xml:space="preserve">
          <source>You don't need to have /usr/ucb/ in your PATH to build perl. If you want /usr/ucb/ in your PATH anyway, make sure that /usr/ucb/ is NOT in your PATH before the directory containing the right C compiler.</source>
          <target state="translated">perl をビルドするのに /usr/ucb/が PATH にある必要はありません。もし /usr/ucb/を PATH に入れたいのであれば、正しい C コンパイラのあるディレクトリの前に /usr/ucb/がないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="fb446a8ceff857b0d30326b022d90618c379b51d" translate="yes" xml:space="preserve">
          <source>You don't need to specify wildcards if you only want to test within specific subdirectories. The following example will only run tests in</source>
          <target state="translated">特定のサブディレクトリ内でのみテストしたい場合は、ワイルドカードを指定する必要はありません。次の例では</target>
        </trans-unit>
        <trans-unit id="e40dd09143f7def3dc81d2ff9344d2600d1d1ae7" translate="yes" xml:space="preserve">
          <source>You don't really have to count them yourself, though, since Perl already does that with the &lt;code&gt;$.&lt;/code&gt; variable, which is the current line number from the last filehandle read:</source>
          <target state="translated">ただし、Perlはすでに &lt;code&gt;$.&lt;/code&gt; しているため、自分で数える必要はありません。変数。これは、最後に読み取られたファイルハンドルからの現在の行番号です。</target>
        </trans-unit>
        <trans-unit id="b24e0508e2da733e0f794e663fee88bb39a1e25a" translate="yes" xml:space="preserve">
          <source>You don't skip tests which are failing because there's a bug in your program, or for which you don't yet have code written. For that you use TODO. Read on.</source>
          <target state="translated">プログラムにバグがあるために失敗しているテストや、まだコードが書かれていないテストをスキップすることはありません。そのためにTODOを使います。続きを読んでください。</target>
        </trans-unit>
        <trans-unit id="eebc556ad68a7f00f0136b389c1fbe429ec9a58f" translate="yes" xml:space="preserve">
          <source>You first enter in bisect mode with:</source>
          <target state="translated">で最初に二等分モードに入ります。</target>
        </trans-unit>
        <trans-unit id="4fdc25fa644377770199aae18193b3eaaa7f502c" translate="yes" xml:space="preserve">
          <source>You forgot a '=back' before '=head</source>
          <target state="translated">頭の前に'=back'を忘れています。</target>
        </trans-unit>
        <trans-unit id="93562b7ff5c979fa6f4e89c93b44f448f3599aca" translate="yes" xml:space="preserve">
          <source>You forgot a '=back' before '=head3'</source>
          <target state="translated">head3」の前に「=back」を忘れています。</target>
        </trans-unit>
        <trans-unit id="710a0707d7d6991623d26d4226d9c4d860f3f7d5" translate="yes" xml:space="preserve">
          <source>You forgot to check &lt;code&gt;$?&lt;/code&gt; to see whether the program even ran correctly. Even if you wrote</source>
          <target state="translated">&lt;code&gt;$?&lt;/code&gt; をチェックするのを忘れましたか？プログラムが正しく実行されたかどうかを確認します。書いても</target>
        </trans-unit>
        <trans-unit id="fc90d9f18467dae7f984c44b04f6fed62e49d3b4" translate="yes" xml:space="preserve">
          <source>You get two references to the same array. If you modify &lt;code&gt;$aref1-&amp;gt;[23]&lt;/code&gt; and then look at &lt;code&gt;$aref2-&amp;gt;[23]&lt;/code&gt; you'll see the change.</source>
          <target state="translated">同じ配列への2つの参照を取得します。あなたが変更する場合 &lt;code&gt;$aref1-&amp;gt;[23]&lt;/code&gt; 、その後を見て &lt;code&gt;$aref2-&amp;gt;[23]&lt;/code&gt; あなたは、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="bc28177c520a27689ee52401d7752fede6fec23d" translate="yes" xml:space="preserve">
          <source>You have '=item x' instead of the expected '=item</source>
          <target state="translated">予想されていた '=item' の代わりに '=item x' があります。</target>
        </trans-unit>
        <trans-unit id="d8e5e5638bed24bad2d4ab312bfe1360cb8707ce" translate="yes" xml:space="preserve">
          <source>You have a data file that expresses greetings in different languages. Its format is &quot;[language tag]=[how to say 'Hello']&quot;, like:</source>
          <target state="translated">挨拶を異なる言語で表現したデータファイルがあります。フォーマットは「[言語タグ]=[How to say 'Hello']」のようになっています。</target>
        </trans-unit>
        <trans-unit id="afbb6b8d64f8b4b3f378ab57026bdb8753122fdc" translate="yes" xml:space="preserve">
          <source>You have a piece of data on which many different operations are applied.</source>
          <target state="translated">多くの異なる操作が適用されているデータを持っています。</target>
        </trans-unit>
        <trans-unit id="63d97bb84f94237f7e4b056d5ae5d88b12cd254c" translate="yes" xml:space="preserve">
          <source>You have a very old pdksh. See &lt;a href=&quot;#Prerequisites&quot;&gt;&quot;Prerequisites&quot;&lt;/a&gt;.</source>
          <target state="translated">非常に古いpdkshがあります。&lt;a href=&quot;#Prerequisites&quot;&gt;「前提条件」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f8eed8b91591afe605349a4edd81010c1b4133d5" translate="yes" xml:space="preserve">
          <source>You have a very old pdksh. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">非常に古いpdkshがあります。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0763fc81d3cd7a4189100a79a22596558a167896" translate="yes" xml:space="preserve">
          <source>You have an older version of</source>
          <target state="translated">の古いバージョンをお持ちの方は</target>
        </trans-unit>
        <trans-unit id="e430c6e7f2999710866cf3f6291d3dd58341a4a4" translate="yes" xml:space="preserve">
          <source>You have been warned already in &lt;a href=&quot;#Selecting-What-to-Export&quot;&gt;&quot;Selecting What to Export&quot;&lt;/a&gt; to not export:</source>
          <target state="translated">&lt;a href=&quot;#Selecting-What-to-Export&quot;&gt;「エクスポートするものの選択」で、エクスポート&lt;/a&gt;しないように警告されています。</target>
        </trans-unit>
        <trans-unit id="72b9024251b30a14c45724d6bbd90abab3f232a3" translate="yes" xml:space="preserve">
          <source>You have been warned already in &lt;a href=&quot;#Selecting-What-to-Export&quot;&gt;Selecting What to Export&lt;/a&gt; to not export:</source>
          <target state="translated">&lt;a href=&quot;#Selecting-What-to-Export&quot;&gt;エクスポート&lt;/a&gt;しないものを選択するですでに警告されています：</target>
        </trans-unit>
        <trans-unit id="43dfe62727996603d47468da8d91c958abc24b74" translate="yes" xml:space="preserve">
          <source>You have created an XSUB interface to an application's C API.</source>
          <target state="translated">アプリケーションのC APIへのXSUBインターフェースを作成しました。</target>
        </trans-unit>
        <trans-unit id="c236e9b8bd9523c45d8e12fd36ee9331405ecbff" translate="yes" xml:space="preserve">
          <source>You have defined an END handler for an attribute that is being applied to a lexical variable. Since the variable may not be available during END this won't happen.</source>
          <target state="translated">辞書変数に適用されている属性のENDハンドラを定義しました。ENDの間、変数は利用できないかもしれないので、これは起こらないでしょう。</target>
        </trans-unit>
        <trans-unit id="717f15e5bfd4a04630296d7e18d1dc4a8563c670" translate="yes" xml:space="preserve">
          <source>You have set the &lt;code&gt;WindowBits&lt;/code&gt; parameter to &lt;code&gt;-MAX_WBITS&lt;/code&gt; in the constructor for this object, i.e. you are uncompressing a raw deflated data stream (RFC 1951).</source>
          <target state="translated">あなたが設定した &lt;code&gt;WindowBits&lt;/code&gt; のにパラメータ &lt;code&gt;-MAX_WBITS&lt;/code&gt; をこのオブジェクトのコンストラクタで、つまりあなたは、生の収縮したデータストリーム（RFC 1951）を解凍しています。</target>
        </trans-unit>
        <trans-unit id="522d08a79de6280adc20232939d047a4cc891b57" translate="yes" xml:space="preserve">
          <source>You have the choice to set the config variable &lt;code&gt;scan_cache&lt;/code&gt; to &lt;code&gt;never&lt;/code&gt; . Then you must clean it up yourself. The other possible values, &lt;code&gt;atstart&lt;/code&gt; and &lt;code&gt;atexit&lt;/code&gt; clean up the build directory when you start (or more precisely, after the first extraction into the build directory) or exit the CPAN shell, respectively. If you never start up the CPAN shell, you probably also have to clean up the build directory yourself.</source>
          <target state="translated">設定変数 &lt;code&gt;scan_cache&lt;/code&gt; を &lt;code&gt;never&lt;/code&gt; に設定することもできます。次に、自分でクリーンアップする必要があります。他の可能な値である &lt;code&gt;atstart&lt;/code&gt; と &lt;code&gt;atexit&lt;/code&gt; は、開始時（またはより正確には、最初のビルドディレクトリへの抽出後）またはCPANシェルを終了するときに、それぞれビルドディレクトリをクリーンアップします。CPANシェルを起動しない場合は、ビルドディレクトリも自分でクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="d43912cc9e84a61faff2f02f26a4d03134058ada" translate="yes" xml:space="preserve">
          <source>You have the same problem with &lt;a href=&quot;Time::Local&quot;&gt;Time::Local&lt;/a&gt;, which will give the wrong answer for those same special cases:</source>
          <target state="translated">&lt;a href=&quot;Time::Local&quot;&gt;Time :: Local&lt;/a&gt;でも同じ問題が発生します。これにより、同じ特殊なケースに対して間違った答えが返されます。</target>
        </trans-unit>
        <trans-unit id="b2deb6a8cd98a82f2aaaef2ec6bec5741ef832ea" translate="yes" xml:space="preserve">
          <source>You have the same problem with &lt;a href=&quot;time/local&quot;&gt;Time::Local&lt;/a&gt;, which will give the wrong answer for those same special cases:</source>
          <target state="translated">&lt;a href=&quot;time/local&quot;&gt;Time :: Local&lt;/a&gt;にも同じ問題があり、同じ特殊な場合に間違った答えが返されます。</target>
        </trans-unit>
        <trans-unit id="d93e439cde6acc82e52bf85fad48553b810a706b" translate="yes" xml:space="preserve">
          <source>You have to be prepared to &quot;reap&quot; the child process when it finishes.</source>
          <target state="translated">子どものプロセスが終わったときに「刈り取る」ということを覚悟しなければなりません。</target>
        </trans-unit>
        <trans-unit id="7bc9963f1adfa43aa2eba732c53b836ac12c4562" translate="yes" xml:space="preserve">
          <source>You have to decide whether you want to use string or numeric comparisons.</source>
          <target state="translated">文字列比較と数値比較のどちらを使用するかを決めなければなりません。</target>
        </trans-unit>
        <trans-unit id="4cf51b08c425e59c5631231a092f6037897d07c7" translate="yes" xml:space="preserve">
          <source>You have to decide whether your array has numeric or string indices.</source>
          <target state="translated">配列のインデックスが数値か文字列かを決めなければなりません。</target>
        </trans-unit>
        <trans-unit id="a73461591d1d0c0412d08a5e1e1cc7e69b28c7fe" translate="yes" xml:space="preserve">
          <source>You have to have Pod::Simple::RTF installed (from the Pod::Simple dist), or this module won't work.</source>
          <target state="translated">Pod::Simple::RTFがインストールされていないと(Pod::Simple distから)、このモジュールは動作しません。</target>
        </trans-unit>
        <trans-unit id="58b51a173ef28ef95718c75aa4bacf0fb0ef7258" translate="yes" xml:space="preserve">
          <source>You have to have installed Pod::Simple::XMLOutStream (from the Pod::Simple dist), or this class won't work.</source>
          <target state="translated">Pod::Simple::XMLOutStreamを(Pod::Simple distから)インストールしていないと、このクラスは動作しません。</target>
        </trans-unit>
        <trans-unit id="f9f9dbede53dcc87c8a6c2c35d9ae17a92119e03" translate="yes" xml:space="preserve">
          <source>You have to have installed Tk::Pod first, or this class won't load.</source>
          <target state="translated">最初にTk::Podをインストールしておかないと、このクラスは読み込まれません。</target>
        </trans-unit>
        <trans-unit id="95bfc19d25cce1034c6f167e8df494025bec3f1c" translate="yes" xml:space="preserve">
          <source>You have to have two hex digits after a braceless &lt;code&gt;\x&lt;/code&gt; (use a leading zero to make two). These restrictions are to lower the incidence of typos causing the class to not match what you thought it would.</source>
          <target state="translated">ブレースレス &lt;code&gt;\x&lt;/code&gt; 後に2桁の16進数が必要です（2を作るには先行ゼロを使用します）。これらの制限は、誤字の発生率を低くして、クラスがあなたが思っていたものと一致しないようにすることです。</target>
        </trans-unit>
        <trans-unit id="c268b51167b66309dd9d49ba2a2c249b1b287fa0" translate="yes" xml:space="preserve">
          <source>You have to keep track of N yourself. For example, let's say you want to change the fifth occurrence of &lt;code&gt;&quot;whoever&quot;&lt;/code&gt; or &lt;code&gt;&quot;whomever&quot;&lt;/code&gt; into &lt;code&gt;&quot;whosoever&quot;&lt;/code&gt; or &lt;code&gt;&quot;whomsoever&quot;&lt;/code&gt; , case insensitively. These all assume that $_ contains the string to be altered.</source>
          <target state="translated">自分でNを追跡する必要があります。たとえば、あなたがの第五の発生変更したいとしましょう &lt;code&gt;&quot;whoever&quot;&lt;/code&gt; または &lt;code&gt;&quot;whomever&quot;&lt;/code&gt; に &lt;code&gt;&quot;whosoever&quot;&lt;/code&gt; または &lt;code&gt;&quot;whomsoever&quot;&lt;/code&gt; 小文字を区別せずに、ケースを。これらはすべて、$ _に変更する文字列が含まれていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="8f497ff3dd0b8c02bb7f0cfe45277ba739785588" translate="yes" xml:space="preserve">
          <source>You have to keep track of N yourself. For example, let's say you want to change the fifth occurrence of &lt;code&gt;&quot;whoever&quot;&lt;/code&gt; or &lt;code&gt;&quot;whomever&quot;&lt;/code&gt; into &lt;code&gt;&quot;whosoever&quot;&lt;/code&gt; or &lt;code&gt;&quot;whomsoever&quot;&lt;/code&gt;, case insensitively. These all assume that $_ contains the string to be altered.</source>
          <target state="translated">あなたは自分でNを追跡しなければなりません。たとえば、あなたがの第五の発生変更したいとしましょう &lt;code&gt;&quot;whoever&quot;&lt;/code&gt; または &lt;code&gt;&quot;whomever&quot;&lt;/code&gt; に &lt;code&gt;&quot;whosoever&quot;&lt;/code&gt; または &lt;code&gt;&quot;whomsoever&quot;&lt;/code&gt; 小文字を区別せずに、ケースを。これらはすべて、$ _に変更する文字列が含まれていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="ac02203046e578344330c6d8542449742080d451" translate="yes" xml:space="preserve">
          <source>You have to run this program by hand; it's not run as part of the Perl installation.</source>
          <target state="translated">このプログラムは手作業で実行する必要があり、Perl のインストールの一部としては実行されません。</target>
        </trans-unit>
        <trans-unit id="64c3798560849a7dba79bf1106dd1dedfd652114" translate="yes" xml:space="preserve">
          <source>You have tried to use one of the &lt;code&gt;-rwxRWX&lt;/code&gt; filetests with &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;
filetest 'access'&lt;/code&gt; in effect. &lt;code&gt;File::stat&lt;/code&gt; will ignore the pragma, and just use the information in the &lt;code&gt;mode&lt;/code&gt; member as usual.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; filetest 'access'が有効な状態で &lt;code&gt;-rwxRWX&lt;/code&gt; ファイルテストの1つを使用しようとしました。 &lt;code&gt;File::stat&lt;/code&gt; はプラグマを無視し、 &lt;code&gt;mode&lt;/code&gt; メンバーの情報を通常どおり使用します。</target>
        </trans-unit>
        <trans-unit id="619430200c4656ad3bc2866c9b899c95858a7c7b" translate="yes" xml:space="preserve">
          <source>You have tried to use one of the &lt;code&gt;-rwxRWX&lt;/code&gt; filetests with &lt;code&gt;use filetest 'access'&lt;/code&gt; in effect. &lt;code&gt;File::stat&lt;/code&gt; will ignore the pragma, and just use the information in the &lt;code&gt;mode&lt;/code&gt; member as usual.</source>
          <target state="translated">&lt;code&gt;use filetest 'access'&lt;/code&gt; 有効にして、 &lt;code&gt;-rwxRWX&lt;/code&gt; ファイルテストの1つを使用しようとしました。 &lt;code&gt;File::stat&lt;/code&gt; はプラグマを無視し、通常どおり &lt;code&gt;mode&lt;/code&gt; メンバーの情報を使用します。</target>
        </trans-unit>
        <trans-unit id="f298d6edd85361a4fe69a118c738c5c6d1ac6519" translate="yes" xml:space="preserve">
          <source>You just can't, okay? Instead, put all the specifications together with commas between them in a single &lt;code&gt;ATTR(&lt;i&gt;specification&lt;/i&gt;)&lt;/code&gt;.</source>
          <target state="translated">できませんいいですか 代わりに、すべての仕様を1つの &lt;code&gt;ATTR(&lt;i&gt;specification&lt;/i&gt;)&lt;/code&gt; コンマを入れてまとめます。</target>
        </trans-unit>
        <trans-unit id="d2ae4f730c89fd94f9c70ee5552ee3019cb5e33a" translate="yes" xml:space="preserve">
          <source>You like this port? See &lt;a href=&quot;http://www.broad.ology.org.uk/amiga/&quot;&gt;http://www.broad.ology.org.uk/amiga/&lt;/a&gt; for how you can help.</source>
          <target state="translated">あなたはこのポートが好きですか？支援方法については、&lt;a href=&quot;http://www.broad.ology.org.uk/amiga/&quot;&gt;http：//www.broad.ology.org.uk/amiga/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="afbf451f9422303960f49b456d9bb760406138be" translate="yes" xml:space="preserve">
          <source>You likely need to figure out how this multi-byte character got mixed up with your single-byte locale (or perhaps you thought you had a UTF-8 locale, but Perl disagrees).</source>
          <target state="translated">このマルチバイト文字がシングルバイトロケールとどのように混ざってしまったのかを知る必要があるでしょう (あるいは、UTF-8 ロケールだと思っていたが、Perl がそれに同意しなかったのかもしれません)。</target>
        </trans-unit>
        <trans-unit id="b36efc02e455a878d40bce54d0800047ed5ce051" translate="yes" xml:space="preserve">
          <source>You may (and usually should) use the three-argument form of open to specify I/O layers (sometimes referred to as &quot;disciplines&quot;) to apply to the handle that affect how the input and output are processed (see &lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt; and &lt;a href=&quot;../perlio&quot;&gt;PerlIO&lt;/a&gt; for more details). For example:</source>
          <target state="translated">openの3つの引数形式を使用してI / Oレイヤー（「規律」と呼ばれることもあります）を指定して、入出力の処理方法に影響を与えるハンドルに適用することができます（通常使用する必要があります）（&lt;a href=&quot;../open&quot;&gt;open&lt;/a&gt;および&lt;a href=&quot;../perlio&quot;&gt;PerlIO&lt;/a&gt; for詳細）。例えば：</target>
        </trans-unit>
        <trans-unit id="f4242caecdd2a41134c434e48293066c09a61129" translate="yes" xml:space="preserve">
          <source>You may (and usually should) use the three-argument form of open to specify I/O layers (sometimes referred to as &quot;disciplines&quot;) to apply to the handle that affect how the input and output are processed (see &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; and &lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for more details). For example:</source>
          <target state="translated">openの3つの引数形式を使用してI / Oレイヤー（「規律」と呼ばれることもあります）を指定して、入出力の処理方法に影響を与えるハンドルに適用することができます（通常使用する必要があります）（&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;および&lt;a href=&quot;perlio&quot;&gt;PerlIO&lt;/a&gt; for詳細）。例えば：</target>
        </trans-unit>
        <trans-unit id="9e56389d96587e792278e4c558eb5807976007cf" translate="yes" xml:space="preserve">
          <source>You may access the repository over the web. This allows you to browse the tree, see recent commits, subscribe to RSS feeds for the changes, search for particular commits and more. You may access it at &lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.git&lt;/a&gt;. A mirror of the repository is found at &lt;a href=&quot;https://github.com/Perl/perl5&quot;&gt;https://github.com/Perl/perl5&lt;/a&gt;.</source>
          <target state="translated">ウェブ経由でリポジトリにアクセスできます。これにより、ツリーの閲覧、最近のコミットの確認、変更のRSSフィードの購読、特定のコミットの検索などが可能になります。&lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.gitから&lt;/a&gt;アクセスできます。リポジトリのミラーは&lt;a href=&quot;https://github.com/Perl/perl5&quot;&gt;https://github.com/Perl/perl5にあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="880fe17e1513224bf25aeb9d0faccae93b9cb553" translate="yes" xml:space="preserve">
          <source>You may access the repository over the web. This allows you to browse the tree, see recent commits, subscribe to repository notifications, search for particular commits and more. You may access it at &lt;a href=&quot;https://github.com/Perl/perl5&quot;&gt;https://github.com/Perl/perl5&lt;/a&gt;.</source>
          <target state="translated">Web経由でリポジトリにアクセスできます。これにより、ツリーの参照、最近のコミットの確認、リポジトリ通知のサブスクライブ、特定のコミットの検索などを行うことができます。&lt;a href=&quot;https://github.com/Perl/perl5&quot;&gt;https://github.com/Perl/perl5から&lt;/a&gt;アクセスできます。</target>
        </trans-unit>
        <trans-unit id="d839e720ae2e7bff2fab5b0520b346cd44ca6b4d" translate="yes" xml:space="preserve">
          <source>You may add other methods to the UNIVERSAL class via Perl or XS code. You do not need to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; UNIVERSAL&lt;/code&gt; to make these methods available to your program (and you should not do so).</source>
          <target state="translated">PerlまたはXSコードを介してUNIVERSALクラスに他のメソッドを追加できます。これらのメソッドをプログラムで使用できるようにする &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; UNIVERSAL&lt;/code&gt; を使用する必要はありません（そうしないでください）。</target>
        </trans-unit>
        <trans-unit id="224f5909daef0b34d22040e764c9911e7daddf8b" translate="yes" xml:space="preserve">
          <source>You may add other methods to the UNIVERSAL class via Perl or XS code. You do not need to &lt;code&gt;use UNIVERSAL&lt;/code&gt; to make these methods available to your program (and you should not do so).</source>
          <target state="translated">PerlまたはXSコードを介して他のメソッドをUNIVERSALクラスに追加できます。これらのメソッドをプログラムで使用できるようにする &lt;code&gt;use UNIVERSAL&lt;/code&gt; を使用する必要はありません（そうすべきではありません）。</target>
        </trans-unit>
        <trans-unit id="100a6f059c39fc4530e46957891e388f20cf1052" translate="yes" xml:space="preserve">
          <source>You may also choose to assign the strings &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; or &lt;code&gt;&quot;DEFAULT&quot;&lt;/code&gt; as the handler, in which case Perl will try to discard the signal or do the default thing.</source>
          <target state="translated">文字列 &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; または &lt;code&gt;&quot;DEFAULT&quot;&lt;/code&gt; をハンドラーとして割り当てることを選択することもできます。その場合、Perlはシグナルを破棄するか、デフォルトの処理を試みます。</target>
        </trans-unit>
        <trans-unit id="daa282ce292ff54483ba2ce846a92dc96f9168dc" translate="yes" xml:space="preserve">
          <source>You may also examine the &quot;safe&quot; flag on the output action object which is filled in when given as the third parameter to &lt;code&gt;POSIX::sigaction()&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;POSIX::sigaction()&lt;/code&gt; への3番目のパラメーターとして指定されたときに入力される出力アクションオブジェクトの「安全な」フラグを調べることもできます。</target>
        </trans-unit>
        <trans-unit id="423918885baf5f3a8b58d2fd022436e7d14efbab" translate="yes" xml:space="preserve">
          <source>You may also examine the &quot;safe&quot; flag on the output action object which is filled in when given as the third parameter to &lt;code&gt;POSIX::sigaction()&lt;/code&gt;:</source>
          <target state="translated">また、 &lt;code&gt;POSIX::sigaction()&lt;/code&gt; 3番目のパラメーターとして指定されたときに入力される出力アクションオブジェクトの「safe」フラグを調べることもできます。</target>
        </trans-unit>
        <trans-unit id="6858c6ae6b5f95e06bfedeb3afc148cdf748f135" translate="yes" xml:space="preserve">
          <source>You may also have found out by now why 7bit ISO-2022 cannot comprise a CCS. If you look at a byte sequence \x21\x21, you can't tell if it is two !'s or IDEOGRAPHIC SPACE. EUC maps the latter to \xA1\xA1 so you have no trouble differentiating between &quot;!!&quot;. and &quot; &quot;.</source>
          <target state="translated">7bitのISO-2022がCCSを構成できない理由がわかったかもしれない。もし、「\x21\x21\x21」というバイト列を見ても、それが2つの!のスペースなのか、それともIDEOGRAPHIC SPACEなのか、見分けがつかない。EUCは後者を\xA1\xA1\xA1にマッピングしているので、&quot;!&quot;.と&quot;.&quot;を区別するのに苦労しない。</target>
        </trans-unit>
        <trans-unit id="01c5b9373dd2d19d42f55fdae95d97ea20dd07a1" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;gr_&lt;/code&gt; . Thus, &lt;code&gt;$group_obj-&amp;gt;gid()&lt;/code&gt; corresponds to $gr_gid if you import the fields. Array references are available as regular array variables, so &lt;code&gt;@{ $group_obj-&amp;gt;members() }&lt;/code&gt; would be simply @gr_members.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。（これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;gr_&lt;/code&gt; で指定された変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$group_obj-&amp;gt;gid()&lt;/code&gt; は$ gr_gidに対応します。配列参照は通常の配列変数として使用できるため、 &lt;code&gt;@{ $group_obj-&amp;gt;members() }&lt;/code&gt; は単に@gr_membersになります。</target>
        </trans-unit>
        <trans-unit id="caae676e8fb92488f8f5b8dcd2e680cb050048ef" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;gr_&lt;/code&gt;. Thus, &lt;code&gt;$group_obj-&amp;gt;gid()&lt;/code&gt; corresponds to $gr_gid if you import the fields. Array references are available as regular array variables, so &lt;code&gt;@{ $group_obj-&amp;gt;members() }&lt;/code&gt; would be simply @gr_members.</source>
          <target state="translated">：FIELDS importタグを使用して、すべての構造体フィールドを通常の変数として名前空間に直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;gr_&lt;/code&gt; で名前が付けられた変数としてアクセスします。したがって、フィールドをインポートすると、 &lt;code&gt;$group_obj-&amp;gt;gid()&lt;/code&gt; は$ gr_gidに対応します。配列参照は通常の配列変数として使用できるため、 &lt;code&gt;@{ $group_obj-&amp;gt;members() }&lt;/code&gt; は単に@gr_membersになります。</target>
        </trans-unit>
        <trans-unit id="fa4935199f235ba2f0cd0a1d49e3ac1a3bbd011f" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;h_&lt;/code&gt; . Thus, &lt;code&gt;$host_obj-&amp;gt;name()&lt;/code&gt; corresponds to $h_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $host_obj-&amp;gt;aliases()
}&lt;/code&gt; would be simply @h_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;h_&lt;/code&gt; で指定された変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$host_obj-&amp;gt;name()&lt;/code&gt; は$ h_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $host_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@h_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="da401673f6af44a50993b3561d0579f99e07eee9" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;h_&lt;/code&gt;. Thus, &lt;code&gt;$host_obj-&amp;gt;name()&lt;/code&gt; corresponds to $h_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $host_obj-&amp;gt;aliases() }&lt;/code&gt; would be simply @h_aliases.</source>
          <target state="translated">：FIELDS importタグを使用して、すべての構造体フィールドを通常の変数として名前空間に直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、前に &lt;code&gt;h_&lt;/code&gt; が付いた名前の変数としてアクセスします。したがって、フィールドをインポートすると、 &lt;code&gt;$host_obj-&amp;gt;name()&lt;/code&gt; は$ h_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $host_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@h_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="60ec160f76fcfc38cc73d96c90a7ce874d6384c9" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;n_&lt;/code&gt; . Thus, &lt;code&gt;$net_obj-&amp;gt;name()&lt;/code&gt; corresponds to $n_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $net_obj-&amp;gt;aliases()
}&lt;/code&gt; would be simply @n_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先頭に &lt;code&gt;n_&lt;/code&gt; を付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$net_obj-&amp;gt;name()&lt;/code&gt; は$ n_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば、 &lt;code&gt;@{ $net_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@n_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="19db00abebd3ac2639c39bd38da2d23c013b0474" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;n_&lt;/code&gt;. Thus, &lt;code&gt;$net_obj-&amp;gt;name()&lt;/code&gt; corresponds to $n_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $net_obj-&amp;gt;aliases() }&lt;/code&gt; would be simply @n_aliases.</source>
          <target state="translated">：FIELDS importタグを使用して、すべての構造体フィールドを通常の変数として名前空間に直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、前に &lt;code&gt;n_&lt;/code&gt; が付いた名前の変数としてアクセスします。したがって、フィールドをインポートすると、 &lt;code&gt;$net_obj-&amp;gt;name()&lt;/code&gt; は$ n_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $net_obj-&amp;gt;aliases() }&lt;/code&gt; は単純に@n_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="cd8189e5c613aac0e23d3c0670ed3ce2f5ae13db" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;p_&lt;/code&gt; . Thus, &lt;code&gt;$proto_obj-&amp;gt;name()&lt;/code&gt; corresponds to $p_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $proto_obj-&amp;gt;aliases()
}&lt;/code&gt; would be simply @p_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;p_&lt;/code&gt; で指定された変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$proto_obj-&amp;gt;name()&lt;/code&gt; は$ p_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $proto_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@p_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="59c78f0961227d9eef360c4cd0d66deb00f372b4" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;p_&lt;/code&gt;. Thus, &lt;code&gt;$proto_obj-&amp;gt;name()&lt;/code&gt; corresponds to $p_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $proto_obj-&amp;gt;aliases() }&lt;/code&gt; would be simply @p_aliases.</source>
          <target state="translated">：FIELDS importタグを使用して、すべての構造体フィールドを通常の変数として名前空間に直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、前に &lt;code&gt;p_&lt;/code&gt; で名前が付けられた変数としてアクセスします。したがって、フィールドをインポートすると、 &lt;code&gt;$proto_obj-&amp;gt;name()&lt;/code&gt; は$ p_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $proto_obj-&amp;gt;aliases() }&lt;/code&gt; は単に@p_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="25ca76eb17a2cf86a0c57fdc15c696e88b6cf4c9" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;pw_&lt;/code&gt; in front their method names. Thus, &lt;code&gt;$passwd_obj-&amp;gt;shell&lt;/code&gt; corresponds to $pw_shell if you import the fields.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、メソッド名の前に &lt;code&gt;pw_&lt;/code&gt; を前に付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$passwd_obj-&amp;gt;shell&lt;/code&gt; は$ pw_shellに対応します。</target>
        </trans-unit>
        <trans-unit id="274d859e81c068db4c48efa8f50c77493ca5cdbd" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;s_&lt;/code&gt; . Thus, &lt;code&gt;$serv_obj-&amp;gt;name()&lt;/code&gt; corresponds to $s_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $serv_obj-&amp;gt;aliases()}&lt;/code&gt; would be simply @s_aliases.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、先行する &lt;code&gt;s_&lt;/code&gt; で名前が付けられた変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$serv_obj-&amp;gt;name()&lt;/code&gt; は$ s_nameに対応します。配列参照は通常の配列変数として利用できるため、たとえば、 &lt;code&gt;@{ $serv_obj-&amp;gt;aliases()}&lt;/code&gt; は単に@s_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="18fe09aa2549872796afb74f39ab43e75ad25ff1" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;s_&lt;/code&gt;. Thus, &lt;code&gt;$serv_obj-&amp;gt;name()&lt;/code&gt; corresponds to $s_name if you import the fields. Array references are available as regular array variables, so for example &lt;code&gt;@{ $serv_obj-&amp;gt;aliases()}&lt;/code&gt; would be simply @s_aliases.</source>
          <target state="translated">：FIELDS importタグを使用して、すべての構造体フィールドを通常の変数として名前空間に直接インポートすることもできます。 （これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、前に &lt;code&gt;s_&lt;/code&gt; が付いた名前の変数としてアクセスします。したがって、フィールドをインポートすると、 &lt;code&gt;$serv_obj-&amp;gt;name()&lt;/code&gt; は$ s_nameに対応します。配列参照は通常の配列変数として使用できるため、たとえば &lt;code&gt;@{ $serv_obj-&amp;gt;aliases()}&lt;/code&gt; は単に@s_aliasesになります。</target>
        </trans-unit>
        <trans-unit id="447198c5b98b7b54155b70c415358589d509c62e" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your core functions.) Access these fields as variables named with a preceding &lt;code&gt;tm_&lt;/code&gt; in front their method names. Thus, &lt;code&gt;$tm_obj-&amp;gt;mday()&lt;/code&gt; corresponds to $tm_mday if you import the fields.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。（これでもコア関数がオーバーライドされることに注意してください。）これらのフィールドには、メソッド名の前に &lt;code&gt;tm_&lt;/code&gt; を前に付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$tm_obj-&amp;gt;mday()&lt;/code&gt; は$ tm_mdayに対応します。</target>
        </trans-unit>
        <trans-unit id="5c856054dbb9356054cca7ccfef163a998ceb55f" translate="yes" xml:space="preserve">
          <source>You may also import all the structure fields directly into your namespace as regular variables using the :FIELDS import tag. (Note that this still overrides your stat() and lstat() functions.) Access these fields as variables named with a preceding &lt;code&gt;st_&lt;/code&gt; in front their method names. Thus, &lt;code&gt;$stat_obj-&amp;gt;dev()&lt;/code&gt; corresponds to $st_dev if you import the fields.</source>
          <target state="translated">：FIELDSインポートタグを使用して、すべての構造フィールドを通常の変数としてネームスペースに直接インポートすることもできます。（これにより、stat（）関数とlstat（）関数がオーバーライドされることに注意してください。）これらのフィールドには、メソッド名の前に &lt;code&gt;st_&lt;/code&gt; を前に付けた名前の変数としてアクセスします。したがって、フィールドをインポートする場合、 &lt;code&gt;$stat_obj-&amp;gt;dev()&lt;/code&gt; は$ st_devに対応します。</target>
        </trans-unit>
        <trans-unit id="a6b6b26fcc9879eca82e69c4a67570540fca4ae9" translate="yes" xml:space="preserve">
          <source>You may also need to apply the patches supplied with the binary distribution of perl. It also makes sense to look on the perl5-porters mailing list for the latest OS/2-related patches (see &lt;a href=&quot;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&quot;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&lt;/a&gt;). Such patches usually contain strings &lt;code&gt;/os2/&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt; , so it makes sense looking for these strings.</source>
          <target state="translated">また、perlのバイナリディストリビューションで提供されるパッチを適用する必要がある場合もあります。また、perl5-portersメーリングリストで最新のOS / 2関連のパッチを探すことも意味があります（&lt;a href=&quot;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&quot;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/を参照&lt;/a&gt;）。このようなパッチには通常、文字列 &lt;code&gt;/os2/&lt;/code&gt; および &lt;code&gt;patch&lt;/code&gt; が含まれているため、これらの文字列を探すのは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="8e4529b370379079adb0c3991b105507c8bdaf29" translate="yes" xml:space="preserve">
          <source>You may also need to apply the patches supplied with the binary distribution of perl. It also makes sense to look on the perl5-porters mailing list for the latest OS/2-related patches (see &lt;a href=&quot;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&quot;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&lt;/a&gt;). Such patches usually contain strings &lt;code&gt;/os2/&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt;, so it makes sense looking for these strings.</source>
          <target state="translated">perlのバイナリ配布で提供されるパッチを適用する必要がある場合もあります。また、perl5-portersメーリングリストで最新のOS / 2関連のパッチを探すことも理にかなっています（&lt;a href=&quot;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/&quot;&gt;http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/を参照&lt;/a&gt;）。このようなパッチには通常、文字列 &lt;code&gt;/os2/&lt;/code&gt; と &lt;code&gt;patch&lt;/code&gt; が含まれているため、これらの文字列を探すのは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="6aa8495c9efa1eb6aea78e6cd751529d33d7b29e" translate="yes" xml:space="preserve">
          <source>You may also need to comment out the &lt;code&gt;DELAYLOAD = ...&lt;/code&gt; line in the Makefile if you're using VC++ 6.0 without the latest service pack and the linker reports an internal error.</source>
          <target state="translated">最新のサービスパックなしでVC ++ 6.0を使用していて、リンカーが内部エラーを報告する場合は、Makefileの &lt;code&gt;DELAYLOAD = ...&lt;/code&gt; 行をコメント化する必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="069c796ed1b4791a2efc8028daa2cfe58429ceb7" translate="yes" xml:space="preserve">
          <source>You may also refer to a distribution in the form A/AU/AUTHORID/TARBALL.</source>
          <target state="translated">また、A/AU/AUTHORID/TARBALLの形式で分配金を参照してもよい。</target>
        </trans-unit>
        <trans-unit id="2c64c3fbfbcaace5918da128791239c43cdf19d2" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; to check whether subroutine &lt;code&gt;&amp;amp;func&lt;/code&gt; has ever been defined. The return value is unaffected by any forward declarations of &lt;code&gt;&amp;amp;func&lt;/code&gt; . A subroutine that is not defined may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;../perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; を使用して、サブルーチン &lt;code&gt;&amp;amp;func&lt;/code&gt; が定義されたことがあるかどうかを確認することもできます。戻り値は、 &lt;code&gt;&amp;amp;func&lt;/code&gt; の前方宣言の影響を受けません。定義されていないサブルーチンでも呼び出し可能である可能性があります。そのパッケージには、最初に呼び出されたときに存在するようにする &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;../perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="172f346295165efa4fd86444269a98fd3b778c01" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; to check whether subroutine &lt;code&gt;&amp;amp;func&lt;/code&gt; has ever been defined. The return value is unaffected by any forward declarations of &lt;code&gt;&amp;amp;func&lt;/code&gt; . A subroutine that is not defined may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;functions/defined&quot;&gt;defined(&amp;amp;func)&lt;/a&gt;&lt;/code&gt; を使用して、サブルーチン &lt;code&gt;&amp;amp;func&lt;/code&gt; が定義されたことがあるかどうかを確認することもできます。戻り値は、 &lt;code&gt;&amp;amp;func&lt;/code&gt; の前方宣言の影響を受けません。定義されていないサブルーチンでも呼び出し可能である可能性があります。そのパッケージには、最初に呼び出されたときに存在するようにする &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2b8d15f86aa40a5b71c22fd3f0132310f48b5d79" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;defined(&amp;amp;func)&lt;/code&gt; to check whether subroutine &lt;code&gt;func&lt;/code&gt; has ever been defined. The return value is unaffected by any forward declarations of &lt;code&gt;func&lt;/code&gt;. A subroutine that is not defined may still be callable: its package may have an &lt;code&gt;AUTOLOAD&lt;/code&gt; method that makes it spring into existence the first time that it is called; see &lt;a href=&quot;perlsub&quot;&gt;perlsub&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;defined(&amp;amp;func)&lt;/code&gt; を使用して、サブルーチン &lt;code&gt;func&lt;/code&gt; が定義されたことがあるかどうかを確認することもできます。戻り値は、 &lt;code&gt;func&lt;/code&gt; の前方宣言の影響を受けません。定義されていないサブルーチンは引き続き呼び出すことができます。そのパッケージには、最初に呼び出されたときに発生する &lt;code&gt;AUTOLOAD&lt;/code&gt; メソッドが含まれている場合があります。&lt;a href=&quot;perlsub&quot;&gt;perlsubを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b5f7479dd4b17df91be39e0264b553fbc922288" translate="yes" xml:space="preserve">
          <source>You may also use backticks to invoke a DCL subprocess, whose output is used as the return value of the expression. The string between the backticks is handled as if it were the argument to the &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; operator (see below). In this case, Perl will wait for the subprocess to complete before continuing.</source>
          <target state="translated">バックティックを使用してDCLサブプロセスを呼び出すこともできます。DCLサブプロセスの出力は、式の戻り値として使用されます。バックティックの間の文字列は、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; オペレータの引数であるかのように処理されます（以下を参照）。この場合、Perlはサブプロセスが完了するのを待ってから続行します。</target>
        </trans-unit>
        <trans-unit id="4106bc4cad7712056a35b119b25c2a2d70a97ddc" translate="yes" xml:space="preserve">
          <source>You may also use backticks to invoke a DCL subprocess, whose output is used as the return value of the expression. The string between the backticks is handled as if it were the argument to the &lt;code&gt;system&lt;/code&gt; operator (see below). In this case, Perl will wait for the subprocess to complete before continuing.</source>
          <target state="translated">バッククォートを使用してDCLサブプロセスを呼び出すこともできます。このサブプロセスの出力は、式の戻り値として使用されます。バックティック間の文字列は、 &lt;code&gt;system&lt;/code&gt; オペレータへの引数であるかのように処理されます（以下を参照）。この場合、Perlはサブプロセスが完了するのを待ってから続行します。</target>
        </trans-unit>
        <trans-unit id="bbaa1ecf2a2a16f0a8eda0bda48b0855b6af1d1c" translate="yes" xml:space="preserve">
          <source>You may also use dmake or gmake. See &lt;a href=&quot;#Make&quot;&gt;&quot;Make&quot;&lt;/a&gt; above on how to get it.</source>
          <target state="translated">dmakeまたはgmakeを使用することもできます。入手方法については、上記の&lt;a href=&quot;#Make&quot;&gt;「作成」を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="5448f65c98891197c6cecbe08ead986b82724f17" translate="yes" xml:space="preserve">
          <source>You may also use dmake. See &lt;a href=&quot;#Make&quot;&gt;Make&lt;/a&gt; above on how to get it.</source>
          <target state="translated">dmakeを使用することもできます。取得方法については、上記の&lt;a href=&quot;#Make&quot;&gt;Makeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a9260264524823855ded5315edf6f0c9bddfa48" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3&lt;/a&gt; module (part of the standard perl distribution), but be warned that it has a different order of arguments from &lt;a href=&quot;IPC::Open2&quot;&gt;IPC::Open2&lt;/a&gt; (see &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="translated">あなたはまた、使用することができます&lt;a href=&quot;IPC::Open3&quot;&gt;IPC ::のopen3の&lt;/a&gt;モジュール（標準Perl配布の一部）が、それはからの引数の異なる順序があることを警告する&lt;a href=&quot;IPC::Open2&quot;&gt;IPC :: Open2を&lt;/a&gt;（参照&lt;a href=&quot;IPC::Open3&quot;&gt;IPC ::のopen3を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3196fa8d2ff4d6ac1033b15a7916441466060e42" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt; module (part of the standard perl distribution), but be warned that it has a different order of arguments from &lt;a href=&quot;ipc/open2&quot;&gt;IPC::Open2&lt;/a&gt; (see &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt;).</source>
          <target state="translated">あなたはまた、使用することができます&lt;a href=&quot;ipc/open3&quot;&gt;IPC ::のopen3の&lt;/a&gt;モジュール（標準Perl配布の一部）が、それはからの引数の異なる順序があることを警告する&lt;a href=&quot;ipc/open2&quot;&gt;IPC :: Open2を&lt;/a&gt;（参照&lt;a href=&quot;ipc/open3&quot;&gt;IPC ::のopen3を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="71182d3aa143564846d6bda380e37d7713401c83" translate="yes" xml:space="preserve">
          <source>You may also use the operators &amp;lt; (less than), &amp;lt;= (less than or equal), &amp;gt; (greater than), &amp;gt;= (greater than or equal), == (equal), and != (not equal). For example, the specification &lt;code&gt;&amp;lt; 2.0&lt;/code&gt; means that any version of the prerequisite less than 2.0 is suitable.</source>
          <target state="translated">演算子&amp;lt;（より小さい）、&amp;lt;=（以下）、&amp;gt;（より大きい）、&amp;gt; =（以上）、==（等しい）、および！=（等しくない）を使用することもできます。たとえば、仕様 &lt;code&gt;&amp;lt; 2.0&lt;/code&gt; は、2.0未満の前提条件の任意のバージョンが適切であることを意味します。</target>
        </trans-unit>
        <trans-unit id="6b7ef88e606ea55cb21f76eea0e0de1fb7b9db2f" translate="yes" xml:space="preserve">
          <source>You may also want to look at one other option for building a perl that will work on Windows: the README.cygwin file, which give a different set of rules to build a perl for Windows. This method will probably enable you to build a more Unix-compatible perl, but you will also need to download and use various other build-time and run-time support software described in that file.</source>
          <target state="translated">Windows上で動作するperlをビルドするためのもう一つのオプション、README.cygwinファイルを見てみるのもいいかもしれません。この方法では、おそらくよりUnixと互換性のあるperlをビルドすることができるでしょうが、そのファイルに記載されている他の様々なビルドタイムやランタイムサポートソフトウェアをダウンロードして使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="47d8e5afa5f51ce60391c15623a30d357b47dac4" translate="yes" xml:space="preserve">
          <source>You may also want to override the &lt;b&gt;begin_input()&lt;/b&gt; and &lt;b&gt;end_input()&lt;/b&gt; methods for your subclass (to perform any needed per-file and/or per-document initialization or cleanup).</source>
          <target state="translated">サブクラスの&lt;b&gt;begin_input（）&lt;/b&gt;および&lt;b&gt;end_input（）&lt;/b&gt;メソッドをオーバーライドすることもできます（必要なファイルごとまたはドキュメントごとの初期化またはクリーンアップを実行するため）。</target>
        </trans-unit>
        <trans-unit id="fad70035f3a1b89b3667a331878011a9d50cf74f" translate="yes" xml:space="preserve">
          <source>You may also want to read over the source for &lt;code&gt;File::Findgrep&lt;/code&gt; and its constituent modules -- they are a complete (if small) example application that uses Maketext.</source>
          <target state="translated">また、 &lt;code&gt;File::Findgrep&lt;/code&gt; とその構成モジュールのソースを読むこともできます。これらは、Maketextを使用する完全な（小さい場合の）サンプルアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="32c591edfbc105cf26f618c0c72cc57761fceff2" translate="yes" xml:space="preserve">
          <source>You may also wish to discuss with the translators the question of how to relate different subforms of the same language tag, considering how this reacts with &lt;code&gt;get_handle&lt;/code&gt; 's treatment of these. For example, if a user accepts interfaces in &quot;en, fr&quot;, and you have interfaces available in &quot;en-US&quot; and &quot;fr&quot;, what should they get? You may wish to resolve this by establishing that &quot;en&quot; and &quot;en-US&quot; are effectively synonymous, by having one class zero-derive from the other.</source>
          <target state="translated">これが &lt;code&gt;get_handle&lt;/code&gt; の処理とどのように反応するかを考慮して、同じ言語タグの異なるサブフォームを関連付ける方法についての質問を翻訳者と話し合うこともできます。たとえば、ユーザーが「en、fr」でインターフェースを受け入れ、「en-US」と「fr」で使用可能なインターフェースがある場合、何を取得する必要がありますか？ 「en」と「en-US」が実質的に同義であることを確立することにより、1つのクラスを他からゼロ派生させることで、これを解決することができます。</target>
        </trans-unit>
        <trans-unit id="91e1b897633821a7c3b5243be65043e6b7b07517" translate="yes" xml:space="preserve">
          <source>You may also wish to discuss with the translators the question of how to relate different subforms of the same language tag, considering how this reacts with &lt;code&gt;get_handle&lt;/code&gt;'s treatment of these. For example, if a user accepts interfaces in &quot;en, fr&quot;, and you have interfaces available in &quot;en-US&quot; and &quot;fr&quot;, what should they get? You may wish to resolve this by establishing that &quot;en&quot; and &quot;en-US&quot; are effectively synonymous, by having one class zero-derive from the other.</source>
          <target state="translated">また、 &lt;code&gt;get_handle&lt;/code&gt; によるこれらの処理とどのように反応するかを考慮して、同じ言語タグの異なるサブフォームをどのように関連付けるかについて、翻訳者と話し合うこともできます。たとえば、ユーザーが「en、fr」のインターフェースを受け入れ、「en-US」と「fr」で使用可能なインターフェースがある場合、それらは何を取得する必要がありますか？ 「en」と「en-US」が事実上同義語であることを確立し、一方のクラスをもう一方のクラスからゼロ派生させることで、これを解決することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="05003e2911012bca46d826b18714273b702cbb78" translate="yes" xml:space="preserve">
          <source>You may also, in the Bourne shell tradition, specify an EXPR beginning with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, in which case the rest of the string is interpreted as the name of a filehandle (or file descriptor, if numeric) to be duped (as &lt;code&gt;dup(2)&lt;/code&gt; ) and opened. You may use &lt;code&gt;&amp;amp;&lt;/code&gt; after &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;+&amp;gt;&lt;/code&gt;, &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt; , and &lt;code&gt;+&amp;lt;&lt;/code&gt; . The mode you specify should match the mode of the original filehandle. (Duping a filehandle does not take into account any existing contents of IO buffers.) If you use the three-argument form, then you can pass either a number, the name of a filehandle, or the normal &quot;reference to a glob&quot;.</source>
          <target state="translated">Bourneシェルの伝統では、 &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まるEXPRを指定することもできます。この場合、文字列の残りの部分は、複製されるファイルハンドル（または数値の場合はファイル記述子）の名前として解釈されます（ &lt;code&gt;dup(2)&lt;/code&gt; ）とオープン。 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;+&amp;gt;&lt;/code&gt; 、 &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;+&amp;lt;&lt;/code&gt; の後に＆を使用できます。指定するモードは、元のファイルハンドルのモードと一致する必要があります。 （ファイルハンドルを複製しても、IOバッファーの既存の内容は考慮されません。）3つの引数の形式を使用する場合、数値、ファイルハンドルの名前、または通常の「グロブへの参照」のいずれかを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="36b7c7ac25178c324a91d61c24d7fde286a14a90" translate="yes" xml:space="preserve">
          <source>You may also, in the Bourne shell tradition, specify an EXPR beginning with &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt;, in which case the rest of the string is interpreted as the name of a filehandle (or file descriptor, if numeric) to be duped (as in &lt;a href=&quot;http://man.he.net/man2/dup&quot;&gt;dup(2)&lt;/a&gt;) and opened. You may use &lt;code&gt;&amp;amp;&lt;/code&gt; after &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;+&amp;gt;&lt;/code&gt;, &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;+&amp;lt;&lt;/code&gt;. The mode you specify should match the mode of the original filehandle. (Duping a filehandle does not take into account any existing contents of IO buffers.) If you use the three-argument form, then you can pass either a number, the name of a filehandle, or the normal &quot;reference to a glob&quot;.</source>
          <target state="translated">Bourneシェルの伝統では、 &lt;code&gt;&amp;gt;&amp;amp;&lt;/code&gt; で始まるEXPRを指定することもできます。この場合、文字列の残りの部分は、複製されるファイルハンドル（または数値の場合はファイル記述子）の名前として解釈されます（&lt;a href=&quot;http://man.he.net/man2/dup&quot;&gt;dup（ 2）&lt;/a&gt;）そして開いた。 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;+&amp;gt;&lt;/code&gt; 、 &lt;code&gt;+&amp;gt;&amp;gt;&lt;/code&gt; 、および &lt;code&gt;+&amp;lt;&lt;/code&gt; の後に &lt;code&gt;&amp;amp;&lt;/code&gt; を使用できます。指定するモードは、元のファイルハンドルのモードと一致する必要があります。 （ファイルハンドルの複製では、IOバッファーの既存の内容は考慮されません。）3引数形式を使用する場合は、数値、ファイルハンドルの名前、または通常の「グロブへの参照」のいずれかを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="1c5fc563eb0d1fd26ae839cfa02427332324573f" translate="yes" xml:space="preserve">
          <source>You may ask whether one of these was implemented on the system Perl was built on by asking the importable &lt;code&gt;pw_has&lt;/code&gt; function about them. This function returns true if all parameters are supported fields on the build platform, false if one or more were not, and raises an exception if you asked about a field that Perl never knows how to provide. Parameters may be in a space-separated string, or as separate arguments. If you pass no parameters, the function returns the list of &lt;code&gt;struct pwd&lt;/code&gt; fields supported by your build platform's C library, as a list in list context, or a space-separated string in scalar context. Note that just because your C library had a field doesn't necessarily mean that it's fully implemented on that system.</source>
          <target state="translated">これらの1つが、Perlが構築されたシステムに実装されているかどうかを、インポート可能な &lt;code&gt;pw_has&lt;/code&gt; 関数に尋ねることで確認できます。この関数は、すべてのパラメーターがビルドプラットフォームでサポートされているフィールドである場合はtrueを返し、1つ以上がサポートされていない場合はfalseを返し、Perlが提供する方法を知らないフィールドについて質問した場合は例外を発生させます。パラメータは、スペースで区切られた文字列、または個別の引数として指定できます。パラメータを渡さない場合、関数は、ビルドプラットフォームのCライブラリでサポートされている &lt;code&gt;struct pwd&lt;/code&gt; フィールドのリストを、リストコンテキストのリストとして、またはスカラーコンテキストのスペース区切りの文字列として返します。 Cライブラリにフィールドがあったからといって、必ずしもそのシステムに完全に実装されているとは限らないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="56003b76083072e5d28f4c38591744948d360c03" translate="yes" xml:space="preserve">
          <source>You may at this point want to consider whether your base class (Projname::L10N), from which all lexicons inherit from (Projname::L10N::en, Projname::L10N::es, etc.), should be an _AUTO lexicon. It may be true that in theory, all needed messages will be in each language class; but in the presumably unlikely or &quot;impossible&quot; case of lookup failure, you should consider whether your program should throw an exception, emit text in English (or whatever your project's first language is), or some more complex solution as described in the section &quot;Controlling Lookup Failure&quot;, above.</source>
          <target state="translated">この時点で、基底クラス(Projname::L10N)が_AUTOレキシコンであるべきかどうかを検討したくなるかもしれません。理論的には、必要なメッセージはすべて各言語クラスにあることは事実かもしれません。しかし、検索に失敗した場合には、プログラムが例外を投げるか、英語(またはプロジェクトの第一言語が何であれ)でテキストを出力するか、上記の「検索失敗の制御」のセクションで説明されているように、より複雑な解決策を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="00dd50349ec2812a0e8ba87a508b17b844d30458" translate="yes" xml:space="preserve">
          <source>You may be able to figure out what's going wrong using the Perl debugger. For information about how to use the debugger &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;.</source>
          <target state="translated">Perlデバッガーを使用して、何が問題になっているのかを理解できる場合があります。デバッガー&lt;b&gt;perldoc &lt;/b&gt;&lt;a href=&quot;perldebug&quot;&gt;perldebugの&lt;/a&gt;使用方法については。</target>
        </trans-unit>
        <trans-unit id="14e829b9ba39410c7fdd62b2c0459a78db997545" translate="yes" xml:space="preserve">
          <source>You may be able to get the CCTools app, which is free. Keep in mind that you want a full toolchain; some apps tend to default to installing only a barebones version without some important utilities, like ar or nm.</source>
          <target state="translated">無料のCCToolsアプリを入手できるかもしれません。一部のアプリでは、arやnmのような重要なユーティリティを含まないベアボーン版のみをインストールすることがデフォルトになっている傾向があります。</target>
        </trans-unit>
        <trans-unit id="538c1768e7dd08c154327dd9d81d8469210ac3b8" translate="yes" xml:space="preserve">
          <source>You may be mixing the Tru64 cc/ar/ld with the GNU gcc/ar/ld. That may work, but sometimes it doesn't (your gcc or GNU utils may have been compiled for an incompatible OS release).</source>
          <target state="translated">Tru64 cc/ar/ld と GNU gcc/ar/ld を混合している可能性があります。これはうまくいくかもしれませんが、うまくいかないこともあります (あなたの gcc や GNU utils は、互換性のない OS リリース用にコンパイルされているかもしれません)。</target>
        </trans-unit>
        <trans-unit id="569474da0977b8a6d57c606d4bf816045d439deb" translate="yes" xml:space="preserve">
          <source>You may be more comfortable with the Perl version of that:</source>
          <target state="translated">その辺のPerl版の方が快適かもしれません。</target>
        </trans-unit>
        <trans-unit id="55841621afe9413e5a4d96acdf404652aff0ba71" translate="yes" xml:space="preserve">
          <source>You may be presented with strings in any of these equivalent forms. There is currently nothing in Perl 5 that ignores the differences. So you'll have to specially handle it. The usual advice is to convert your inputs to &lt;code&gt;NFD&lt;/code&gt; before processing further.</source>
          <target state="translated">これらの同等の形式の文字列が表示される場合があります。現在、Perl5には違いを無視するものはありません。したがって、特別に処理する必要があります。通常のアドバイスは、さらに処理する前に入力を &lt;code&gt;NFD&lt;/code&gt; に変換することです。</target>
        </trans-unit>
        <trans-unit id="a2c2934cf1eab265e83a97c11bed16b38a8b5801" translate="yes" xml:space="preserve">
          <source>You may be presented with strings in any of these equivalent forms. There is currently nothing in Perl 5 that ignores the differences. So you'll have to specially hanlde it. The usual advice is to convert your inputs to &lt;code&gt;NFD&lt;/code&gt; before processing further.</source>
          <target state="translated">これらの同等の形式の文字列が表示される場合があります。現在、Perl 5には違いを無視するものはありません。だから、特別にそれを処理する必要があります。通常のアドバイスは、さらに処理する前に入力を &lt;code&gt;NFD&lt;/code&gt; に変換することです。</target>
        </trans-unit>
        <trans-unit id="58f64d73709bb7f46995ccc9ddf584cf761fc186" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;can&lt;/code&gt; as a class (static) method or an object method.</source>
          <target state="translated">&lt;code&gt;can&lt;/code&gt; はクラス（静的）メソッドまたはオブジェクトメソッドとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8cf034da6832021586a2104fbbd0c08a1605f5bc" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;hv_delete&lt;/code&gt; or &lt;code&gt;hv_delete_ent&lt;/code&gt; on the hash entry that the iterator currently points to, without losing your place or invalidating your iterator. Note that in this case the current entry is deleted from the hash with your iterator holding the last reference to it. Your iterator is flagged to free the entry on the next call to &lt;code&gt;hv_iternext&lt;/code&gt; , so you must not discard your iterator immediately else the entry will leak - call &lt;code&gt;hv_iternext&lt;/code&gt; to trigger the resource deallocation.</source>
          <target state="translated">場所を失うことなく、イテレータを無効にすることなく、イテレータが現在指しているハッシュエントリで &lt;code&gt;hv_delete&lt;/code&gt; または &lt;code&gt;hv_delete_ent&lt;/code&gt; を呼び出すことができます。この場合、現在のエントリはハッシュから削除され、イテレータは最後の参照を保持しています。イテレータには次の &lt;code&gt;hv_iternext&lt;/code&gt; の呼び出しでエントリを解放するフラグが設定されているため、イテレータをすぐに破棄しないでください。破棄すると、エントリがリークします &lt;code&gt;hv_iternext&lt;/code&gt; を呼び出してリソースの割り当て解除をトリガーします。</target>
        </trans-unit>
        <trans-unit id="224612e001a662c3d4076adbf22c1ddb33c4fc09" translate="yes" xml:space="preserve">
          <source>You may call &lt;code&gt;hv_delete&lt;/code&gt; or &lt;code&gt;hv_delete_ent&lt;/code&gt; on the hash entry that the iterator currently points to, without losing your place or invalidating your iterator. Note that in this case the current entry is deleted from the hash with your iterator holding the last reference to it. Your iterator is flagged to free the entry on the next call to &lt;code&gt;hv_iternext&lt;/code&gt;, so you must not discard your iterator immediately else the entry will leak - call &lt;code&gt;hv_iternext&lt;/code&gt; to trigger the resource deallocation.</source>
          <target state="translated">場所を失ったり、イテレータを無効にしたりすることなく、イテレータが現在指しているハッシュエントリで &lt;code&gt;hv_delete&lt;/code&gt; または &lt;code&gt;hv_delete_ent&lt;/code&gt; を呼び出すことができます。この場合、現在のエントリがハッシュから削除され、イテレータがそのエントリへの最後の参照を保持していることに注意してください。イテレータは、 &lt;code&gt;hv_iternext&lt;/code&gt; への次の呼び出しでエントリを解放するようにフラグが立てられているため、すぐにイテレータを破棄しないでください。そうしないと、エントリがリークします &lt;code&gt;hv_iternext&lt;/code&gt; を呼び出して、リソースの割り当て解除をトリガーします。</target>
        </trans-unit>
        <trans-unit id="9be40ceb1a7306a76b520e9584d2eca0a12452f8" translate="yes" xml:space="preserve">
          <source>You may change the pager which is used via &lt;code&gt;o pager=...&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;o pager=...&lt;/code&gt; コマンドで使用するページャーを変更できます。</target>
        </trans-unit>
        <trans-unit id="8d0d219cb50b9b95de99bdba2a6790e3027b1988" translate="yes" xml:space="preserve">
          <source>You may choose one of six different protocols to use for the ping. The &quot;tcp&quot; protocol is the default. Note that a live remote host may still fail to be pingable by one or more of these protocols. For example, www.microsoft.com is generally alive but not &quot;icmp&quot; pingable.</source>
          <target state="translated">pingに使用する6つの異なるプロトコルのうちの1つを選択することができます。tcp&quot; プロトコルがデフォルトです。ライブのリモートホストは、これらのプロトコルのうちの 1 つ以上で ping 可能であることに失敗する可能性があることに注意してください。例えば、www.microsoft.com は一般的には生きていますが、&quot;icmp&quot; は ping 可能ではありません。</target>
        </trans-unit>
        <trans-unit id="5b9386b09cdd1212e7410c2ab62737e2149c7f2b" translate="yes" xml:space="preserve">
          <source>You may create a shared library that refers to another library, which may be either an archive library or a shared library. If this second library is a shared library, this is called a &quot;dependent library&quot;. The dependent library's name is recorded in the main shared library, but it is not linked into the shared library. Instead, it is loaded when the main shared library is loaded. This can cause problems if you build an extension on one system and move it to another system where the libraries may not be located in the same place as on the first system.</source>
          <target state="translated">別のライブラリを参照する共有ライブラリを作成することができますが、そのライブラリはアーカイブライブラリでも共有ライブラリでもどちらでも構いません。この2つ目のライブラリが共有ライブラリの場合、これを「従属ライブラリ」と呼びます。依存ライブラリの名前はメインの共有ライブラリに記録されますが、共有ライブラリにリンクされているわけではありません。その代わり、メインの共有ライブラリが読み込まれたときに読み込まれます。これは、あるシステムで拡張機能を構築して、最初のシステムと同じ場所にライブラリが配置されていない可能性がある別のシステムに移動した場合に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c69978ae72909c6a0d4c9ce7bda602f4029ade9" translate="yes" xml:space="preserve">
          <source>You may declare &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; variables at the outermost scope of a file to hide any such identifiers from the world outside that file. This is similar in spirit to C's static variables when they are used at the file level. To do this with a subroutine requires the use of a closure (an anonymous function that accesses enclosing lexicals). If you want to create a private subroutine that cannot be called from outside that block, it can declare a lexical variable containing an anonymous sub reference:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 変数をファイルの最も外側のスコープで宣言して、そのような識別子をそのファイルの外の世界から隠すことができます。これは、Cレベルの静的変数をファイルレベルで使用する場合の精神と似ています。サブルーチンでこれを行うには、クロージャー（囲んでいる語彙にアクセスする無名関数）を使用する必要があります。そのブロックの外部から呼び出せないプライベートサブルーチンを作成する場合は、無名のサブ参照を含むレキシカル変数を宣言できます。</target>
        </trans-unit>
        <trans-unit id="876f17265dbc24f5deeea94b0b905e8da6c53d61" translate="yes" xml:space="preserve">
          <source>You may declare &lt;code&gt;my&lt;/code&gt; variables at the outermost scope of a file to hide any such identifiers from the world outside that file. This is similar in spirit to C's static variables when they are used at the file level. To do this with a subroutine requires the use of a closure (an anonymous function that accesses enclosing lexicals). If you want to create a private subroutine that cannot be called from outside that block, it can declare a lexical variable containing an anonymous sub reference:</source>
          <target state="translated">ファイルの最も外側のスコープで変数を宣言し &lt;code&gt;my&lt;/code&gt; そのような識別子をそのファイルの外部の世界から隠すことができます。これは、ファイルレベルで使用される場合のCの静的変数と精神的に似ています。サブルーチンでこれを行うには、クロージャ（囲んでいるレキシカルにアクセスする無名関数）を使用する必要があります。そのブロックの外部から呼び出すことができないプライベートサブルーチンを作成する場合は、匿名のサブ参照を含む字句変数を宣言できます。</target>
        </trans-unit>
        <trans-unit id="4c485e566982c516f185802a5bb8005684c87aaf" translate="yes" xml:space="preserve">
          <source>You may do &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads qw(yield)&lt;/code&gt; , and then just use &lt;code&gt;yield()&lt;/code&gt; in your code.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads qw(yield)&lt;/code&gt; 使用して、コードで &lt;code&gt;yield()&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;こともできます。</target>
        </trans-unit>
        <trans-unit id="f4966f6d04fe64b0eb4295da47dec6c27a2bd019" translate="yes" xml:space="preserve">
          <source>You may do &lt;code&gt;use threads qw(yield)&lt;/code&gt;, and then just use &lt;code&gt;yield()&lt;/code&gt; in your code.</source>
          <target state="translated">&lt;code&gt;use threads qw(yield)&lt;/code&gt; 使用してから、コードで &lt;code&gt;yield()&lt;/code&gt; を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="e6dafa2436cf995ba75a2bba335e0ce68071a9ad" translate="yes" xml:space="preserve">
          <source>You may downgrade strings with &lt;code&gt;Encode::encode&lt;/code&gt; and &lt;code&gt;utf8::encode&lt;/code&gt;. See &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; and &lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;Encode::encode&lt;/code&gt; および &lt;code&gt;utf8::encode&lt;/code&gt; を使用して文字列をダウングレードできます。詳細については、&lt;a href=&quot;encode&quot;&gt;エンコード&lt;/a&gt;と&lt;a href=&quot;utf8&quot;&gt;utf8&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad59ee540ee6c5334c4114152f24df062a49e4a1" translate="yes" xml:space="preserve">
          <source>You may encounter the following warning message at Perl startup:</source>
          <target state="translated">Perlの起動時に以下のような警告メッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="294037a277c0cf3bb9e6ace3733986ce5d32b057" translate="yes" xml:space="preserve">
          <source>You may find it helpful to have a &quot;macro dictionary&quot;, which you can produce by saying &lt;code&gt;cpp -dM perl.c | &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; . Even then,</source>
          <target state="translated">&lt;code&gt;cpp -dM perl.c | &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; と言って作成できる「マクロ辞書」があると便利です。並べ替え。その時でさえ、</target>
        </trans-unit>
        <trans-unit id="299fa4ce881470b697321e68c7758eae9bf1d1cf" translate="yes" xml:space="preserve">
          <source>You may find it helpful to have a &quot;macro dictionary&quot;, which you can produce by saying &lt;code&gt;cpp -dM perl.c | sort&lt;/code&gt;. Even then,</source>
          <target state="translated">&lt;code&gt;cpp -dM perl.c | sort&lt;/code&gt; と言うことで作成できる「マクロ辞書」があると便利な場合があります。並べ替え。その時でさえ、</target>
        </trans-unit>
        <trans-unit id="972b606b3734fb1680ed24e777ce569b72a6f320" translate="yes" xml:space="preserve">
          <source>You may find it helpful to use letter case to indicate the scope or nature of a variable. For example:</source>
          <target state="translated">変数の範囲や性質を示すために大文字小文字を使うと便利です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c25f48a1ca763d34150d8bac8dc30aeefcd980b5" translate="yes" xml:space="preserve">
          <source>You may get a bus error core dump from the op/pwent or op/grent tests. If compiled with -g you will see a stack trace much like the following:</source>
          <target state="translated">op/pwent や op/grent テストからバスエラーのコアダンプが得られるかもしれません。g でコンパイルした場合、以下のようなスタックトレースが表示されます。</target>
        </trans-unit>
        <trans-unit id="108b6e50ab8abc6a709ca1e727e6115ff077c1f8" translate="yes" xml:space="preserve">
          <source>You may get a warning when doing a threaded build:</source>
          <target state="translated">スレッドビルドを行うと警告が表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="22f1e826336ce72e185bd16ea03c1b6430323fa0" translate="yes" xml:space="preserve">
          <source>You may have an optional comma before the closing parenthesis of a list literal, so that you can say:</source>
          <target state="translated">リストリテラルの閉じ括弧の前に任意のカンマを入れておくと、こう言えるようになります。</target>
        </trans-unit>
        <trans-unit id="94ced856f582ad7ad5a45cb74870b4f4ae27ed8b" translate="yes" xml:space="preserve">
          <source>You may have to add extra libraries as well. Which ones? Perhaps those printed by</source>
          <target state="translated">余分なライブラリも追加する必要があるかもしれません。どれですか?おそらく</target>
        </trans-unit>
        <trans-unit id="adc5eceb43ab39f0721310d8a087b92c4cf96e19" translate="yes" xml:space="preserve">
          <source>You may have to re-read this entire section a few times...</source>
          <target state="translated">このセクション全体を何度か読み直す必要があるかもしれません...</target>
        </trans-unit>
        <trans-unit id="9e568be51255384d52fb1c41217e7d274f15f0ca" translate="yes" xml:space="preserve">
          <source>You may ignore the error message for the first element of the archive (this doesn't look like a tar archive / skipping to next file...), it's only the directory which will be created automatically anyway.</source>
          <target state="translated">アーカイブの最初の要素のエラーメッセージは無視しても構いません(これはtarアーカイブ/次のファイルへのスキップのようには見えません...)。</target>
        </trans-unit>
        <trans-unit id="927c6b1abd9425ad341215fb99d87b72f734b089" translate="yes" xml:space="preserve">
          <source>You may intersperse documentation and Perl code within the .pm file. In fact, if you want to use method autoloading, you must do this, as the comment inside the .pm file explains.</source>
          <target state="translated">.pm ファイルの中にドキュメントと Perl のコードを混在させても構いません。実際、もしメソッドのオートローディングを使いたいのであれば、.pm ファイル内のコメントで説明されているように、これをしなければなりません。</target>
        </trans-unit>
        <trans-unit id="b911c24edf96323dfee0b5a16ac2655f93ba03e8" translate="yes" xml:space="preserve">
          <source>You may lock arrays and hashes as well as scalars. Locking an array, though, will not block subsequent locks on array elements, just lock attempts on the array itself.</source>
          <target state="translated">スカラだけでなく、配列やハッシュをロックすることもできます。しかし、配列をロックしても配列の要素に対する後続のロックはブロックされず、配列自体をロックしようとするだけです。</target>
        </trans-unit>
        <trans-unit id="00344360ec287bdb5274fbd2e88953a8065f329a" translate="yes" xml:space="preserve">
          <source>You may look into the file</source>
          <target state="translated">ファイルを調べることができます。</target>
        </trans-unit>
        <trans-unit id="9516dc740ae77942efcf6e8fd80e5504a8b1fd26" translate="yes" xml:space="preserve">
          <source>You may mail your bug reports (be sure to include full configuration information as output by the myconfig program in the perl source tree, or by &lt;code&gt;perl -V&lt;/code&gt; ) to perlbug@perl.org . If you've succeeded in compiling perl, the &lt;a href=&quot;perlbug&quot;&gt;perlbug&lt;/a&gt; script in the</source>
          <target state="translated">バグレポート（perlソースツリーのmyconfigプログラムまたは &lt;code&gt;perl -V&lt;/code&gt; による出力として、完全な構成情報を必ず含めてください）をperlbug@perl.orgにメールで送信できます。あなたは、perlのコンパイルに成功した場合&lt;a href=&quot;perlbug&quot;&gt;perlbugの&lt;/a&gt;でスクリプトを</target>
        </trans-unit>
        <trans-unit id="9b598b6ebd49a9a2c8435acfea60cd639dc39cf9" translate="yes" xml:space="preserve">
          <source>You may need the following GNU programs in order to install perl:</source>
          <target state="translated">perlをインストールするには、以下のGNUプログラムが必要かもしれません。</target>
        </trans-unit>
        <trans-unit id="65000230f7491853635f8932fbc750e90e8f3c2d" translate="yes" xml:space="preserve">
          <source>You may need to be</source>
          <target state="translated">必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="64a7e3cbbe6d605d5c662e6d4594cef6c6e25ffe" translate="yes" xml:space="preserve">
          <source>You may need to carry out some system configuration tasks before running the Configure script for Perl.</source>
          <target state="translated">Perl 用の Configure スクリプトを実行する前に、いくつかのシステム設定タスクを実行する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b5c6282830e01b5eeb55fdff2a78b2efbd4e43e4" translate="yes" xml:space="preserve">
          <source>You may need to examine the test results in a more flexible way, for example, the diagnostic output may be quite long or complex or it may involve something that you cannot predict in advance like a timestamp. In this case you can get direct access to the test results:</source>
          <target state="translated">例えば、診断結果が非常に長くて複雑なものであったり、タイムスタンプのように事前に予測できないものが含まれていたりします。この場合、テスト結果に直接アクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="d10056deec90cd668c3f12e0f304b01dde73621d" translate="yes" xml:space="preserve">
          <source>You may need to make this change to scripts written for a Unix system which expect that after a call to &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, no files with the names passed to &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; will exist. (Note: This can be changed at compile time; if you &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; and &lt;code&gt;$Config{'d_unlink_all_versions'}&lt;/code&gt; is &lt;code&gt;define&lt;/code&gt; , then &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; will delete all versions of a file on the first call.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; を呼び出した後、unlinkに渡された名前のファイルが存在しないことを期待するUnixシステム用に記述されたスクリプトに、この変更を加える必要がある場合があり &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 。（注：これは、コンパイル時に変更することができます。あなたがいる場合 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Config&lt;/code&gt; し、 &lt;code&gt;$Config{'d_unlink_all_versions'}&lt;/code&gt; ある &lt;code&gt;define&lt;/code&gt; 、その後、 &lt;code&gt;&lt;a href=&quot;functions/unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 最初の呼び出し上のファイルのすべてのバージョンを削除します。）</target>
        </trans-unit>
        <trans-unit id="1ff29c0121a8a089447657f7329f05cee5d1935c" translate="yes" xml:space="preserve">
          <source>You may need to make this change to scripts written for a Unix system which expect that after a call to &lt;code&gt;unlink&lt;/code&gt;, no files with the names passed to &lt;code&gt;unlink&lt;/code&gt; will exist. (Note: This can be changed at compile time; if you &lt;code&gt;use Config&lt;/code&gt; and &lt;code&gt;$Config{'d_unlink_all_versions'}&lt;/code&gt; is &lt;code&gt;define&lt;/code&gt;, then &lt;code&gt;unlink&lt;/code&gt; will delete all versions of a file on the first call.)</source>
          <target state="translated">&lt;code&gt;unlink&lt;/code&gt; の呼び出し後、unlinkに渡された名前のファイルが存在しないことを期待するUnixシステム用に記述されたスクリプトにこの変更を加える必要がある場合があり &lt;code&gt;unlink&lt;/code&gt; 。（注：これはコンパイル時に変更できます &lt;code&gt;$Config{'d_unlink_all_versions'}&lt;/code&gt; を &lt;code&gt;use Config&lt;/code&gt; 、$ Config {'d_unlink_all_versions'}が &lt;code&gt;define&lt;/code&gt; 場合、 &lt;code&gt;unlink&lt;/code&gt; は最初の呼び出しでファイルのすべてのバージョンを削除します。）</target>
        </trans-unit>
        <trans-unit id="3ec14405f03df7cdb78bb123848d4a14d07a8d45" translate="yes" xml:space="preserve">
          <source>You may not (usefully) use a reference as the key to a hash. It will be converted into a string:</source>
          <target state="translated">参照をハッシュのキーとして使用することは(便利なことに)できません。これは文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="d8a434e0ce88a99bf8a5488e4b0fad4981c52cd7" translate="yes" xml:space="preserve">
          <source>You may not even need to write the module. Check whether it's already been done in Perl, and avoid re-inventing the wheel unless you have a good reason.</source>
          <target state="translated">モジュールを書く必要がないかもしれません。Perlですでに行われているかどうかを確認し、よほどの理由がない限り、車輪の再発明は避けてください。</target>
        </trans-unit>
        <trans-unit id="936986b9e470ced1f7fdf65dd9ad838a32d13386" translate="yes" xml:space="preserve">
          <source>You may not use data derived from outside your program to affect something else outside your program--at least, not by accident. All command line arguments, environment variables, locale information (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), results of certain system calls (&lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt;, the variable of &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread()&lt;/a&gt;&lt;/code&gt;, the messages returned by &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv()&lt;/a&gt;&lt;/code&gt;, the password, gcos and shell fields returned by the &lt;code&gt;getpwxxx()&lt;/code&gt; calls), and all file input are marked as &quot;tainted&quot;. Tainted data may not be used directly or indirectly in any command that invokes a sub-shell, nor in any command that modifies files, directories, or processes, &lt;b&gt;with the following exceptions&lt;/b&gt;:</source>
          <target state="translated">プログラムの外部から派生したデータを使用して、少なくとも偶然ではなく、プログラムの外部の何かに影響を与えることはできません。すべてのコマンドライン引数、環境変数、ロケール情報（参照&lt;a href=&quot;perllocale&quot;&gt;はperllocaleを&lt;/a&gt;）、特定のシステムコールの結果（ &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt; 、の変数 &lt;code&gt;&lt;a href=&quot;functions/shmread&quot;&gt;shmread()&lt;/a&gt;&lt;/code&gt; によって返されたメッセージ &lt;code&gt;&lt;a href=&quot;functions/msgrcv&quot;&gt;msgrcv()&lt;/a&gt;&lt;/code&gt; パスワード、GCOSとシェル &lt;code&gt;getpwxxx()&lt;/code&gt; 呼び出しによって返されるフィールド）、およびすべてのファイル入力は「汚染」としてマークされます。汚染されたデータは、サブシェルを呼び出すコマンドや、ファイル、ディレクトリ、プロセスを変更するコマンドでは、直接的または間接的に使用できません。&lt;b&gt;ただし、次の例外があります&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="dd3902074b205dce05c67740cc2649d8a39ee898" translate="yes" xml:space="preserve">
          <source>You may not use data derived from outside your program to affect something else outside your program--at least, not by accident. All command line arguments, environment variables, locale information (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), results of certain system calls (&lt;code&gt;readdir()&lt;/code&gt;, &lt;code&gt;readlink()&lt;/code&gt;, the variable of &lt;code&gt;shmread()&lt;/code&gt;, the messages returned by &lt;code&gt;msgrcv()&lt;/code&gt;, the password, gcos and shell fields returned by the &lt;code&gt;getpwxxx()&lt;/code&gt; calls), and all file input are marked as &quot;tainted&quot;. Tainted data may not be used directly or indirectly in any command that invokes a sub-shell, nor in any command that modifies files, directories, or processes, &lt;b&gt;with the following exceptions&lt;/b&gt;:</source>
          <target state="translated">プログラムの外部から派生したデータを使用して、プログラムの外部の他の何かに影響を与えることはできません。少なくとも、偶然ではありません。すべてのコマンドライン引数、環境変数、ロケール情報（参照&lt;a href=&quot;perllocale&quot;&gt;はperllocaleを&lt;/a&gt;）、特定のシステムコールの結果（ &lt;code&gt;readdir()&lt;/code&gt; 、 &lt;code&gt;readlink()&lt;/code&gt; 、の変数 &lt;code&gt;shmread()&lt;/code&gt; によって返されたメッセージ &lt;code&gt;msgrcv()&lt;/code&gt; パスワード、GCOSとシェル &lt;code&gt;getpwxxx()&lt;/code&gt; 呼び出しによって返されるフィールド）、およびすべてのファイル入力は「汚染された」としてマークされます。汚染されたデータは&lt;b&gt;、次の例外を除いて、&lt;/b&gt;サブシェルを呼び出すコマンドや、ファイル、ディレクトリ、またはプロセスを変更するコマンドで直接または間接的に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="591a9362d10f62521cdde4ccfa89567d331e2d8b" translate="yes" xml:space="preserve">
          <source>You may notice that &lt;code&gt;PL_FILES&lt;/code&gt; is not specified above, since the default of mapping each .PL file to its basename works well.</source>
          <target state="translated">各.PLファイルをそのベース名にマッピングするデフォルトが適切に機能するため、 &lt;code&gt;PL_FILES&lt;/code&gt; が上記で指定されていないことに気付くかもしれません。</target>
        </trans-unit>
        <trans-unit id="656cab64db0943d80c2c347bdd21c8a07c645dc2" translate="yes" xml:space="preserve">
          <source>You may once in a while try a &quot;make microperl&quot; to see whether we can still compile Perl with just the bare minimum of interfaces. (See README.micro.)</source>
          <target state="translated">たまには &quot;make microperl&quot; を試してみて、最低限のインターフェースだけでPerlをコンパイルできるかどうかを確認してみてください。(README.microを参照してください。)</target>
        </trans-unit>
        <trans-unit id="67acb9777380059ff280be22d8c3f8940dae8cc7" translate="yes" xml:space="preserve">
          <source>You may or may not choose to follow this usage. But never write &quot;PERL&quot;, because perl is not an acronym.</source>
          <target state="translated">この用法に従うかどうかは自由です。しかし、perlは頭文字ではないので、perlとは絶対に書いてはいけません。</target>
        </trans-unit>
        <trans-unit id="613fbbe8af8f9b1517992c7dc5a2a0283f5a8c13" translate="yes" xml:space="preserve">
          <source>You may override this as you like; Maketext doesn't use it for anything.</source>
          <target state="translated">これを好きなように上書きすることができます;Maketext はこれを何にも使いません。</target>
        </trans-unit>
        <trans-unit id="402c7a6c9e9b95e1569244e1df01e166ced2b5b5" translate="yes" xml:space="preserve">
          <source>You may redistribute this under the same terms as Perl itself.</source>
          <target state="translated">これを Perl 自体と同じ条件で再配布することができます。</target>
        </trans-unit>
        <trans-unit id="c300617b79443af38e0fcd704c86c317dd858ef3" translate="yes" xml:space="preserve">
          <source>You may report corrections, additions, and suggestions on the CPAN Request Tracker at</source>
          <target state="translated">CPANリクエストトラッカーの修正、追加、提案は以下で報告することができます。</target>
        </trans-unit>
        <trans-unit id="471b54cb9da3fd2429477493f77011df7439603d" translate="yes" xml:space="preserve">
          <source>You may run into memory limits, in which case you should use the -Xmx option:</source>
          <target state="translated">メモリ制限がある場合は、-Xmx オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b87668ec2b109de55eff18c1a93548bfc928cdb" translate="yes" xml:space="preserve">
          <source>You may see a message about errors while extracting</source>
          <target state="translated">抽出中にエラーに関するメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="567b2cee3d4edcc53c5dd10d0ae801a480e80721" translate="yes" xml:space="preserve">
          <source>You may see some messages during Configure that seem suspicious.</source>
          <target state="translated">Configure中に不審なメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="6272ef61085d34f4e76b635ae7f550e4bd67beb6" translate="yes" xml:space="preserve">
          <source>You may see the term &quot;invariant&quot; character or code point. This simply means that the character has the same numeric value and representation when encoded in UTF-8 (or UTF-EBCDIC) as when not. (Note that this is a very different concept from &lt;a href=&quot;#The-13-variant-characters&quot;&gt;&quot;The 13 variant characters&quot;&lt;/a&gt; mentioned above. Careful prose will use the term &quot;UTF-8 invariant&quot; instead of just &quot;invariant&quot;, but most often you'll see just &quot;invariant&quot;.) For example, the ordinal value of &quot;A&quot; is 193 in most EBCDIC code pages, and also is 193 when encoded in UTF-EBCDIC. All UTF-8 (or UTF-EBCDIC) variant code points occupy at least two bytes when encoded in UTF-8 (or UTF-EBCDIC); by definition, the UTF-8 (or UTF-EBCDIC) invariant code points are exactly one byte whether encoded in UTF-8 (or UTF-EBCDIC), or not. (By now you see why people typically just say &quot;UTF-8&quot; when they also mean &quot;UTF-EBCDIC&quot;. For the rest of this document, we'll mostly be casual about it too.) In ASCII UTF-8, the code points corresponding to the lowest 128 ordinal numbers (0 - 127: the ASCII characters) are invariant. In UTF-EBCDIC, there are 160 invariant characters. (If you care, the EBCDIC invariants are those characters which have ASCII equivalents, plus those that correspond to the C1 controls (128 - 159 on ASCII platforms).)</source>
          <target state="translated">「不変」の文字またはコードポイントという用語が表示される場合があります。これは単に、UTF-8（またはUTF-EBCDIC）でエンコードされた場合とそうでない場合とで、文字の数値と表現が同じであることを意味します。（これは&lt;a href=&quot;#The-13-variant-characters&quot;&gt;「13の異体字」&lt;/a&gt;とは非常に異なる概念であることに注意してください上記の通り。注意深い散文では、「不変」ではなく「UTF-8不変」という用語を使用しますが、ほとんどの場合、「不変」だけが表示されます。）たとえば、「A」の序数は、ほとんどのEBCDICコードページで193です。また、UTF-EBCDICでエンコードされた場合は193です。すべてのUTF-8（またはUTF-EBCDIC）バリアントコードポイントは、UTF-8（またはUTF-EBCDIC）でエンコードされたときに少なくとも2バイトを占有します。定義上、UTF-8（またはUTF-EBCDIC）不変コードポイントは、UTF-8（またはUTF-EBCDIC）でエンコードされているかどうかに関係なく、正確に1バイトです。 （これまでに、人々が「UTF-EBCDIC」を意味するのに「UTF-8」とだけ言う理由がわかります。このドキュメントの残りの部分では、ほとんどの場合、それについてもカジュアルに説明します。）ASCII UTF-8では、最下位の128の序数（0〜127：ASCII文字）に対応するコードポイントは不変です。UTF-EBCDICには、160の不変文字があります。 （気になる場合、EBCDIC不変条件は、ASCIIに相当する文字に加えて、C1コントロール（ASCIIプラットフォームでは128〜159）に対応する文字です。）</target>
        </trans-unit>
        <trans-unit id="3d40b88fd93e71db6719630cc623bcd6de5e08cd" translate="yes" xml:space="preserve">
          <source>You may see the term &quot;invariant&quot; character or code point. This simply means that the character has the same numeric value and representation when encoded in UTF-8 (or UTF-EBCDIC) as when not. (Note that this is a very different concept from &lt;a href=&quot;#The-13-variant-characters&quot;&gt;The 13 variant characters&lt;/a&gt; mentioned above. Careful prose will use the term &quot;UTF-8 invariant&quot; instead of just &quot;invariant&quot;, but most often you'll see just &quot;invariant&quot;.) For example, the ordinal value of &quot;A&quot; is 193 in most EBCDIC code pages, and also is 193 when encoded in UTF-EBCDIC. All UTF-8 (or UTF-EBCDIC) variant code points occupy at least two bytes when encoded in UTF-8 (or UTF-EBCDIC); by definition, the UTF-8 (or UTF-EBCDIC) invariant code points are exactly one byte whether encoded in UTF-8 (or UTF-EBCDIC), or not. (By now you see why people typically just say &quot;UTF-8&quot; when they also mean &quot;UTF-EBCDIC&quot;. For the rest of this document, we'll mostly be casual about it too.) In ASCII UTF-8, the code points corresponding to the lowest 128 ordinal numbers (0 - 127: the ASCII characters) are invariant. In UTF-EBCDIC, there are 160 invariant characters. (If you care, the EBCDIC invariants are those characters which have ASCII equivalents, plus those that correspond to the C1 controls (128 - 159 on ASCII platforms).)</source>
          <target state="translated">「不変」の文字またはコードポイントが表示される場合があります。これは単に、UTF-8（またはUTF-EBCDIC）でエンコードされた場合とそうでない場合とで、文字の数値および表現が同じであることを意味します。 （これは&lt;a href=&quot;#The-13-variant-characters&quot;&gt;13のバリアントキャラクター&lt;/a&gt;とは非常に異なる概念です。上記の通り。注意深い散文では、単に「不変」ではなく「UTF-8不変」という用語を使用しますが、ほとんどの場合、「不変」とだけ表示されます。たとえば、「A」の序数値は、ほとんどのEBCDICコードページで193です。また、UTF-EBCDICでエンコードすると193になります。すべてのUTF-8（またはUTF-EBCDIC）バリアントコードポイントは、UTF-8（またはUTF-EBCDIC）でエンコードされた場合、少なくとも2バイトを占有します。定義により、UTF-8（またはUTF-EBCDIC）不変コードポイントは、UTF-8（またはUTF-EBCDIC）でエンコードされているかどうかに関係なく、正確に1バイトです。 （これまでに、「UTF-EBCDIC」も意味するのに、通常「UTF-8」とだけ言う理由がわかります。このドキュメントの残りの部分では、ほとんどの場合、それについても気軽に説明します。）ASCII UTF-8では、最小の128序数（0-127：ASCII文字）に対応するコードポイントは不変です。UTF-EBCDICでは、160の不変文字があります。 （必要に応じて、EBCDIC不変条件は、ASCIIに対応する文字と、C1コントロール（ASCIIプラットフォームでは128〜159）に対応する文字です。）</target>
        </trans-unit>
        <trans-unit id="79733aabc84104a70d6cbcc3a880d8aa4897ea07" translate="yes" xml:space="preserve">
          <source>You may sense that a lexicon (to use a non-committal catch-all term for a collection of things you know how to say, regardless of whether they're phrases or words) consisting of functions</source>
          <target state="translated">機能からなるレキシコン(フレーズや単語に関係なく、言い方を知っていることを集めたものの総称で、非committalなキャッチオール用語を使う)を感じられるかもしれません。</target>
        </trans-unit>
        <trans-unit id="fa093d809cde8bd253ba564171319f316c1ecb65" translate="yes" xml:space="preserve">
          <source>You may set the &lt;code&gt;dw_size&lt;/code&gt; option to limit the amount of data that can be saved in the deferred write buffer. This limit may not exceed the total memory limit. For example, if you set &lt;code&gt;dw_size&lt;/code&gt; to 1000 and &lt;code&gt;memory&lt;/code&gt; to 2500, that means that no more than 1000 bytes of deferred writes will be saved up. The space available for the read cache will vary, but it will always be at least 1500 bytes (if the deferred write buffer is full) and it could grow as large as 2500 bytes (if the deferred write buffer is empty.)</source>
          <target state="translated">あなたは設定でき &lt;code&gt;dw_size&lt;/code&gt; 延期ライト・バッファに保存できるデータの量を制限するためのオプションを。この制限は、合計メモリ制限を超えることはできません。たとえば、 &lt;code&gt;dw_size&lt;/code&gt; を1000に設定し、 &lt;code&gt;memory&lt;/code&gt; を2500に設定した場合、延期された書き込みの1000バイト以下が保存されます。読み取りキャッシュに使用可能なスペースはさまざまですが、少なくとも1500バイト（据え置き書き込みバッファーがいっぱいの場合）であり、2500バイトまで大きくなる可能性があります（据え置き書き込みバッファーが空の場合）。</target>
        </trans-unit>
        <trans-unit id="e3ef89e73cb3013d59d9c9121bbae022ae6a75e6" translate="yes" xml:space="preserve">
          <source>You may submit your bug reports (be sure to include full configuration information as output by the myconfig program in the perl source tree, or by &lt;code&gt;perl -V&lt;/code&gt;) to &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt;.</source>
          <target state="translated">バグレポートを&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issuesに&lt;/a&gt;送信できます（myconfigプログラムによって出力される完全な構成情報をperlソースツリーまたは &lt;code&gt;perl -V&lt;/code&gt; に含めるようにしてください）。</target>
        </trans-unit>
        <trans-unit id="fbe802847d2e9437afa3772a7f3ed12ac0cb75f5" translate="yes" xml:space="preserve">
          <source>You may use any combination of these three values 'SUCCESS','FAILURE','DELAY' in the anonymous array reference as defined by RFC3461 (see &lt;a href=&quot;http://www.ietf.org/rfc/rfc3461.txt&quot;&gt;http://www.ietf.org/rfc/rfc3461.txt&lt;/a&gt; for more information. Note: quotations in this topic from same.).</source>
          <target state="translated">RFC3461（詳細については、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3461.txt&quot;&gt;http：&lt;/a&gt; //www.ietf.org/rfc/rfc3461.txtを参照）で定義されている匿名配列参照で、これら3つの値「SUCCESS」、「FAILURE」、「DELAY」の任意の組み合わせを使用できます。注：このトピックの引用は同じです。）</target>
        </trans-unit>
        <trans-unit id="36629e1d8b3fb0403dc71736a38b10adc1877865" translate="yes" xml:space="preserve">
          <source>You may use any combination of these three values 'SUCCESS','FAILURE','DELAY' in the anonymous array reference as defined by RFC3461 (see http://www.ietf.org/rfc/rfc3461.txt for more information. Note: quotations in this topic from same.).</source>
          <target state="translated">RFC3461で定義されている匿名配列参照では、これら3つの値'SUCCESS','FAILURE','DELAY'の任意の組み合わせを使用することができます (詳細は http://www.ietf.org/rfc/rfc3461.txt を参照してください)。注:このトピックでの引用は同じものから引用しています)。</target>
        </trans-unit>
        <trans-unit id="3726ab64bc777be024735266d80e288f34e7bd83" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;mv&lt;/code&gt; alias for this function in the same way that you may use the &lt;code&gt;cp&lt;/code&gt; alias for &lt;code&gt;copy&lt;/code&gt; .</source>
          <target state="translated">あなたは使用すること &lt;code&gt;mv&lt;/code&gt; は、使用するのと同じように、この関数のエイリアスを &lt;code&gt;cp&lt;/code&gt; のエイリアスを &lt;code&gt;copy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb0e3799f2ec470ffb4ae33dcfe538e7d9e90c15" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;mv&lt;/code&gt; alias for this function in the same way that you may use the &lt;code&gt;cp&lt;/code&gt; alias for &lt;code&gt;copy&lt;/code&gt;.</source>
          <target state="translated">あなたは使用すること &lt;code&gt;mv&lt;/code&gt; は、使用するのと同じように、この関数のエイリアスを &lt;code&gt;cp&lt;/code&gt; のエイリアスを &lt;code&gt;copy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9368b724095114d596f9a9bbd047855f785492a1" translate="yes" xml:space="preserve">
          <source>You may use the syntax &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; File::Copy &quot;cp&quot;&lt;/code&gt; to get at the &lt;code&gt;cp&lt;/code&gt; alias for this function. The syntax is</source>
          <target state="translated">構文 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; File::Copy &quot;cp&quot;&lt;/code&gt; を使用して、この関数の &lt;code&gt;cp&lt;/code&gt; エイリアスを取得できます。構文は</target>
        </trans-unit>
        <trans-unit id="2cddc64528e49f0c1ae7766ec48b73a37ff2e0c8" translate="yes" xml:space="preserve">
          <source>You may use the syntax &lt;code&gt;use File::Copy &quot;cp&quot;&lt;/code&gt; to get at the &lt;code&gt;cp&lt;/code&gt; alias for this function. The syntax is</source>
          <target state="translated">&lt;code&gt;use File::Copy &quot;cp&quot;&lt;/code&gt; という構文を使用して、この関数の &lt;code&gt;cp&lt;/code&gt; エイリアスを取得できます。構文は</target>
        </trans-unit>
        <trans-unit id="354ed25e81c6f68b0172423d879862310feed1c5" translate="yes" xml:space="preserve">
          <source>You may very well want to see how your subpattern gets compiled, but it is likely of less use to you to see how Perl matches that against all the legal possibilities, as that is under control of Perl, not you. Therefore, the debugging information of the compilation portion is as specified by the other options, but the debugging output of the matching portion is normally suppressed.</source>
          <target state="translated">あなたのサブパターンがどのようにコンパイルされるかを見たいと思うかもしれませんが、Perlがどのようにして合法的な可能性にマッチするかを見ることは、あなたにとってあまり意味がないかもしれません。したがって、コンパイル部分のデバッグ情報は他のオプションで指定された通りですが、 マッチング部分のデバッグ出力は通常は抑制されます。</target>
        </trans-unit>
        <trans-unit id="2ef4fe61a399da32f9cc97283defa049459439a2" translate="yes" xml:space="preserve">
          <source>You may want to configure something like</source>
          <target state="translated">のような設定をするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="a188842328fc3a53256335dbb97698cdb0d7e65f" translate="yes" xml:space="preserve">
          <source>You may want to create the destination directory and give it the right permissions before installing, thus eliminating the need to build Perl as a super user.</source>
          <target state="translated">インストールする前に、インストール先のディレクトリを作成して正しいパーミッションを与えておくと、スーパーユーザとしてPerlを構築する必要がなくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="274166c866cd17a4a70da3e9dd16359e3df50e0e" translate="yes" xml:space="preserve">
          <source>You may want to use the &lt;code&gt;&lt;a href=&quot;perlrecharclass#Digits&quot;&gt;/\d/&lt;/a&gt;&lt;/code&gt; construct instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;perlrecharclass#Digits&quot;&gt;/\d/&lt;/a&gt;&lt;/code&gt; 構成を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="3d3a0b34238678a39ac71745f1262bf0f4700e24" translate="yes" xml:space="preserve">
          <source>You may want to use the &lt;code&gt;&lt;a href=&quot;perlrecharclass#Whitespace&quot;&gt;/\s/&lt;/a&gt;&lt;/code&gt; construct instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;perlrecharclass#Whitespace&quot;&gt;/\s/&lt;/a&gt;&lt;/code&gt; 構成を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="30ce0fc76dee65d768e8b8edbb86d17b3ec69cef" translate="yes" xml:space="preserve">
          <source>You may want to use the &lt;code&gt;&lt;a href=&quot;perlrecharclass#Word-characters&quot;&gt;/\w/&lt;/a&gt;&lt;/code&gt; construct instead.</source>
          <target state="translated">代わりに &lt;code&gt;&lt;a href=&quot;perlrecharclass#Word-characters&quot;&gt;/\w/&lt;/a&gt;&lt;/code&gt; 構成を使用したい場合があります。</target>
        </trans-unit>
        <trans-unit id="599db7e90374e2462ae43e1deb74b5ede6e00ac9" translate="yes" xml:space="preserve">
          <source>You may wish to put your version of perl in the PATH of all users by changing the link</source>
          <target state="translated">リンクを変更して、あなたのバージョンのperlをすべてのユーザのPATHに置くことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a667970ef9d2de2018d0cc9d89b6040168c92e68" translate="yes" xml:space="preserve">
          <source>You might also be interested in using the &lt;a href=&quot;benchmark&quot;&gt;Benchmark&lt;/a&gt; to measure and compare code snippets.</source>
          <target state="translated">また、&lt;a href=&quot;benchmark&quot;&gt;ベンチマーク&lt;/a&gt;を使用してコードスニペットを測定および比較することもできます。</target>
        </trans-unit>
        <trans-unit id="e19209d2418cb6070db23de3b3f291f912738061" translate="yes" xml:space="preserve">
          <source>You might also find it more fun to use the standard &lt;a href=&quot;Tie::File&quot;&gt;Tie::File&lt;/a&gt; module, or the &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; module's &lt;code&gt;$DB_RECNO&lt;/code&gt; bindings, which allow you to tie an array to a file so that accessing an element of the array actually accesses the corresponding line in the file.</source>
          <target state="translated">また、標準の&lt;a href=&quot;Tie::File&quot;&gt;Tie :: File&lt;/a&gt;モジュール、または&lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;モジュールの &lt;code&gt;$DB_RECNO&lt;/code&gt; バインディングを使用すると、配列をファイルに関連付けて、配列の要素にアクセスすると、ファイル。</target>
        </trans-unit>
        <trans-unit id="f2fb8d4423459616a83c78e11c0c6368281abff5" translate="yes" xml:space="preserve">
          <source>You might also find it more fun to use the standard &lt;a href=&quot;tie/file&quot;&gt;Tie::File&lt;/a&gt; module, or the &lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt; module's &lt;code&gt;$DB_RECNO&lt;/code&gt; bindings, which allow you to tie an array to a file so that accessing an element of the array actually accesses the corresponding line in the file.</source>
          <target state="translated">また、標準の&lt;a href=&quot;tie/file&quot;&gt;Tie :: File&lt;/a&gt;モジュール、または&lt;a href=&quot;db_file&quot;&gt;DB_File&lt;/a&gt;モジュールの &lt;code&gt;$DB_RECNO&lt;/code&gt; バインディングを使用すると、配列の要素にアクセスすることで実際にファイル。</target>
        </trans-unit>
        <trans-unit id="e08469744ffe89846f236eef2581143171c3fbcd" translate="yes" xml:space="preserve">
          <source>You might also have loaded that from a function:</source>
          <target state="translated">関数から読み込んだこともあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="95a16ffa9a148d97aba69dab68818a05442a9c0f" translate="yes" xml:space="preserve">
          <source>You might also see the terms &lt;b&gt;getter&lt;/b&gt; and &lt;b&gt;setter&lt;/b&gt;. These are two types of accessors. A getter gets the attribute's value, while a setter sets it. Another term for a setter is &lt;b&gt;mutator&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;getter&lt;/b&gt;および&lt;b&gt;setter&lt;/b&gt;という用語も表示される場合があります。これらは2種類のアクセサです。ゲッターは属性の値を取得し、セッターはそれを設定します。セッターの別の用語は&lt;b&gt;ミューテーターです&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a6f4008d05ac5a7684642f452fcea99bbe63649d" translate="yes" xml:space="preserve">
          <source>You might also think of closure as a way to write a subroutine template without using eval(). Here's a small example of how closures work:</source>
          <target state="translated">eval()を使わずにサブルーチンのテンプレートを書く方法としてクロージャを考えることもできるかもしれません。ここでは、クロージャがどのように動作するかの小さな例を示します。</target>
        </trans-unit>
        <trans-unit id="adab95dd47c51cc1af72771a0152072872dcbaaf" translate="yes" xml:space="preserve">
          <source>You might also want to check out &lt;a href=&quot;perlfaq8#How-do-I-keep-my-own-module%2Flibrary-directory%3F&quot;&gt;&quot;How do I keep my own module/library directory?&quot; in perlfaq8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;perlfaq8#How-do-I-keep-my-own-module%2Flibrary-directory%3F&quot;&gt;「自分のモジュール/ライブラリディレクトリを保持するにはどうすればよいですか？」&lt;/a&gt;も確認してください。perlfaq8で。</target>
        </trans-unit>
        <trans-unit id="b07a183cbfa7c2c5ada23e1358bb836c0036ff82" translate="yes" xml:space="preserve">
          <source>You might also want to check out &lt;a href=&quot;perlfaq8#How-do-I-keep-my-own-module%2flibrary-directory%3f&quot;&gt;How do I keep my own module/library directory? in perlfaq8&lt;/a&gt;.</source>
          <target state="translated">また&lt;a href=&quot;perlfaq8#How-do-I-keep-my-own-module%2flibrary-directory%3f&quot;&gt;、自分のモジュール/ライブラリディレクトリをどのように保持&lt;/a&gt;するかを確認することもできます。perlfaq8で。</target>
        </trans-unit>
        <trans-unit id="c9d50c5088a6a6db1dd16f71b5a0b7ad311259d2" translate="yes" xml:space="preserve">
          <source>You might also want to employ anonymous functions for simple signal handlers:</source>
          <target state="translated">また、単純なシグナルハンドラには匿名関数を使用するとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="c4f0a4c3456aabab2b8397ba18c3d239195efdd9" translate="yes" xml:space="preserve">
          <source>You might also want to have GNU groff for OS/390 installed before running the &quot;make install&quot; step for Perl.</source>
          <target state="translated">また、Perlの &quot;make install &quot;ステップを実行する前に、GNU groff for OS/390をインストールしておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="2fa0f7304d269ada4e265c5dcd91a35489923597" translate="yes" xml:space="preserve">
          <source>You might also want to trap any errors by wrapping an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; block around the whole thing.</source>
          <target state="translated">また、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ブロックを全体にラップして、エラーをトラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="f194f9c87c4be6e7a8b64a94f082480b14ad7510" translate="yes" xml:space="preserve">
          <source>You might also want to trap any errors by wrapping an &lt;code&gt;eval&lt;/code&gt; block around the whole thing.</source>
          <target state="translated">また、 &lt;code&gt;eval&lt;/code&gt; ブロックを全体にラップしてエラーをトラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="ae14caefeb104abfd32e1ac4b08ddaa6c43442c2" translate="yes" xml:space="preserve">
          <source>You might be tempted to think that deferred writing is like transactions, with &lt;code&gt;flush&lt;/code&gt; as &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;discard&lt;/code&gt; as &lt;code&gt;rollback&lt;/code&gt; , but it isn't, so don't.</source>
          <target state="translated">遅延書き込みはトランザクションのようであり、 &lt;code&gt;flush&lt;/code&gt; が &lt;code&gt;commit&lt;/code&gt; 、 &lt;code&gt;discard&lt;/code&gt; が &lt;code&gt;rollback&lt;/code&gt; であると考えたくなるかもしれませんが、そうではありません。</target>
        </trans-unit>
        <trans-unit id="1c6b7aa981d94fea5d2afafa18044a92955cf0dc" translate="yes" xml:space="preserve">
          <source>You might be tempted to think that deferred writing is like transactions, with &lt;code&gt;flush&lt;/code&gt; as &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;discard&lt;/code&gt; as &lt;code&gt;rollback&lt;/code&gt;, but it isn't, so don't.</source>
          <target state="translated">遅延書き込みはトランザクションのようなものであり、 &lt;code&gt;flush&lt;/code&gt; を &lt;code&gt;commit&lt;/code&gt; として、 &lt;code&gt;discard&lt;/code&gt; を &lt;code&gt;rollback&lt;/code&gt; として考えたくなるかもしれませんが、そうではないので、そうしないでください。</target>
        </trans-unit>
        <trans-unit id="eadb7f27713b1af6126dec14d8fa3f25be31b545" translate="yes" xml:space="preserve">
          <source>You might be tempted to use &lt;code&gt;$#array + 1&lt;/code&gt; to tell you how many items there are in an array. Don't bother. As it happens, using &lt;code&gt;@array&lt;/code&gt; where Perl expects to find a scalar value (&quot;in scalar context&quot;) will give you the number of elements in the array:</source>
          <target state="translated">&lt;code&gt;$#array + 1&lt;/code&gt; を使用して、配列内の項目の数を通知したくなるかもしれません。気にしないでください。偶然にも、Perlがスカラー値（ &quot;スカラーコンテキスト内&quot;）を見つけることを期待している場所で &lt;code&gt;@array&lt;/code&gt; を使用すると、配列内の要素の数がわかります。</target>
        </trans-unit>
        <trans-unit id="cdd5e43c44200a95eaa3aa45d374b3ef4d1b96c7" translate="yes" xml:space="preserve">
          <source>You might consider using just Math::BigInt or Math::BigFloat, since they allow you finer control over what get's done in which module/space. For instance, simple loop counters will be Math::BigInts under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bignum;&lt;/code&gt; and this is slower than keeping them as Perl scalars:</source>
          <target state="translated">Math :: BigIntまたはMath :: BigFloatだけを使用することを検討してください。これにより、どのモジュール/スペースで何が行われるかをより細かく制御できます。たとえば、単純なループカウンターは、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bignum;&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用して&lt;/a&gt;いるときにMath :: BigIntsになります。これは、Perlスカラーとして保持するよりも遅くなります。</target>
        </trans-unit>
        <trans-unit id="30c848bd997fa1fb77285aa03d0d04fc4d8a21e7" translate="yes" xml:space="preserve">
          <source>You might consider using just Math::BigInt or Math::BigFloat, since they allow you finer control over what get's done in which module/space. For instance, simple loop counters will be Math::BigInts under &lt;code&gt;use bignum;&lt;/code&gt; and this is slower than keeping them as Perl scalars:</source>
          <target state="translated">Math :: BigIntまたはMath :: BigFloatのみを使用することを検討してください。これらを使用すると、どのモジュール/スペースで何を実行するかをより細かく制御できます。たとえば、単純なループカウンターは、 &lt;code&gt;use bignum;&lt;/code&gt; を使用しているMath :: BigIntsになります。これは、Perlスカラーとして保持するよりも時間がかかります。</target>
        </trans-unit>
        <trans-unit id="602086881bebd3c9c81540dfd1686b9dc1e9a7c1" translate="yes" xml:space="preserve">
          <source>You might expect this to output &quot;12&quot;. In fact, it prints &quot;&amp;lt;&quot;: the ASCII result of treating &quot;|&quot; as a bitwise string operator - that is, the result of treating the operands as the strings &quot;4&quot; and &quot;8&quot; rather than numbers. The fact that numify (&lt;code&gt;0+&lt;/code&gt; ) is implemented but stringify (&lt;code&gt;&quot;&quot;&lt;/code&gt; ) isn't makes no difference since the latter is simply autogenerated from the former.</source>
          <target state="translated">あなたはこれが「12」を出力すると期待するかもしれません。実際、「&amp;lt;」を出力します：「|」を処理したASCII結果 ビット単位の文字列演算子として、つまり、オペランドを数値ではなく文字列「4」と「8」として扱った結果。numify（ &lt;code&gt;0+&lt;/code&gt; ）は実装されていますがstringify（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）は実装されていませんが、後者は前者から単純に自動生成されるため、違いはありません。</target>
        </trans-unit>
        <trans-unit id="aba6c51d79ac08de8cd8c4628728aebfc81fc52e" translate="yes" xml:space="preserve">
          <source>You might expect this to output &quot;12&quot;. In fact, it prints &quot;&amp;lt;&quot;: the ASCII result of treating &quot;|&quot; as a bitwise string operator - that is, the result of treating the operands as the strings &quot;4&quot; and &quot;8&quot; rather than numbers. The fact that numify (&lt;code&gt;0+&lt;/code&gt;) is implemented but stringify (&lt;code&gt;&quot;&quot;&lt;/code&gt;) isn't makes no difference since the latter is simply autogenerated from the former.</source>
          <target state="translated">これは「12」を出力すると予想されるかもしれません。実際、「&amp;lt;」を出力します。「|」を処理したASCII結果です。ビット単位の文字列演算子として-つまり、オペランドを数値ではなく文字列「4」および「8」として扱った結果。 numify（ &lt;code&gt;0+&lt;/code&gt; ）が実装されているが、stringify（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）が実装されているという事実は、後者が前者から単純に自動生成されるため、違いはありません。</target>
        </trans-unit>
        <trans-unit id="ec2b6e72cccd9ea401a92e1c584d3ce729f0ed23" translate="yes" xml:space="preserve">
          <source>You might find these links useful:</source>
          <target state="translated">これらのリンクが役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="7041884103fb3be2206f9857bdd3e655cde0bf34" translate="yes" xml:space="preserve">
          <source>You might have expected test 3 to fail because it seems to a more general purpose version of test 1. The important difference between them is that test 3 contains a quantifier (&lt;code&gt;\D*&lt;/code&gt; ) and so can use backtracking, whereas test 1 will not. What's happening is that you've asked &quot;Is it true that at the start of $x, following 0 or more non-digits, you have something that's not 123?&quot; If the pattern matcher had let &lt;code&gt;\D*&lt;/code&gt; expand to &quot;ABC&quot;, this would have caused the whole pattern to fail.</source>
          <target state="translated">テスト3は、テスト1のより汎用的なバージョンのように見えるため、失敗することが予想された可能性があります。これらの重要な違いは、テスト3には数量詞（ &lt;code&gt;\D*&lt;/code&gt; ）が含まれているため、バックトラッキングを使用できますが、テスト1はそうではありません。何が起こっているのですか？「$ xの始めに、0以上の非数字に続いて、123ではないものがあるというのは本当ですか？」パターンマッチャーが &lt;code&gt;\D*&lt;/code&gt; を &quot;ABC&quot;に拡張させた場合、これによりパターン全体が失敗しました。</target>
        </trans-unit>
        <trans-unit id="8d27aa5c6286c0d9603c5055be14cd21bce623ba" translate="yes" xml:space="preserve">
          <source>You might have expected test 3 to fail because it seems to a more general purpose version of test 1. The important difference between them is that test 3 contains a quantifier (&lt;code&gt;\D*&lt;/code&gt;) and so can use backtracking, whereas test 1 will not. What's happening is that you've asked &quot;Is it true that at the start of &lt;code&gt;$x&lt;/code&gt;, following 0 or more non-digits, you have something that's not 123?&quot; If the pattern matcher had let &lt;code&gt;\D*&lt;/code&gt; expand to &quot;ABC&quot;, this would have caused the whole pattern to fail.</source>
          <target state="translated">テスト1のより汎用的なバージョンのように見えるため、テスト3が失敗すると予想したかもしれません。これらの重要な違いは、テスト3には数量詞（ &lt;code&gt;\D*&lt;/code&gt; ）が含まれているため、バックトラッキングを使用できるのに対し、テスト1は使用しないことです。何が起こっているのかというと、「 &lt;code&gt;$x&lt;/code&gt; の先頭で、0個以上の非数字に続いて、123ではないものがあるというのは本当ですか？」パターンマッチャーが &lt;code&gt;\D*&lt;/code&gt; を「ABC」に展開させた場合、これによりパターン全体が失敗します。</target>
        </trans-unit>
        <trans-unit id="f5bd0f9bdd3b3f8f6c3d7920cb7c553cce6d6284" translate="yes" xml:space="preserve">
          <source>You might like to read Mark Jason Dominus's &quot;Suffering From Buffering&quot; at &lt;a href=&quot;http://perl.plover.com/FAQs/Buffering.html&quot;&gt;http://perl.plover.com/FAQs/Buffering.html&lt;/a&gt; .</source>
          <target state="translated">Mark Jason Dominusの &quot;Suffering From Buffering&quot;（&lt;a href=&quot;http://perl.plover.com/FAQs/Buffering.html&quot;&gt;http://perl.plover.com/FAQs/Buffering.html）&lt;/a&gt;を読んでください。</target>
        </trans-unit>
        <trans-unit id="46f43a5be926bef744cfabc91aaec25e6a108f46" translate="yes" xml:space="preserve">
          <source>You might like to use &lt;a href=&quot;#do-EXPR&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; to read in a program configuration file. Manual error checking can be done this way:</source>
          <target state="translated">&lt;a href=&quot;#do-EXPR&quot;&gt; &lt;code&gt;do&lt;/code&gt; &lt;/a&gt;を使用して、プログラム構成ファイルを読み込むことをお勧めします。手動エラーチェックは次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="d5e0af742e5a24576127c7192de3da3f64667af3" translate="yes" xml:space="preserve">
          <source>You might like to use &lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; to read in a program configuration file. Manual error checking can be done this way:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; を使用してプログラム構成ファイルを読み取ることができます。手動エラーチェックは次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="ea3e43e35b42104c2dfdbbb81763643be691010c" translate="yes" xml:space="preserve">
          <source>You might like to use &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; to read in a program configuration file. Manual error checking can be done this way:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; を使用してプログラム構成ファイルを読み取ることができます。手動エラーチェックは次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="2bd0dacd69a7ed36257e893211378330acac2cba" translate="yes" xml:space="preserve">
          <source>You might love it. You might feel that everyone else needs it. But there might not actually be any real demand for it out there. If you're unsure about the demand your module will have, consider asking the &lt;code&gt;module-authors@perl.org&lt;/code&gt; mailing list (send an email to &lt;code&gt;module-authors-subscribe@perl.org&lt;/code&gt; to subscribe; see &lt;a href=&quot;https://lists.perl.org/list/module-authors.html&quot;&gt;https://lists.perl.org/list/module-authors.html&lt;/a&gt; for more information and a link to the archives).</source>
          <target state="translated">あなたはそれを好きかもしれません。あなたは他の誰もがそれを必要としていると感じるかもしれません。しかし、実際にはそれに対する実際の需要はないかもしれません。モジュールの需要がわからない場合は、module &lt;code&gt;module-authors@perl.org&lt;/code&gt; メーリングリストに問い合わせることを検討してください（サブスクライブするには &lt;code&gt;module-authors-subscribe@perl.org&lt;/code&gt; に電子メールを送信してください&lt;a href=&quot;https://lists.perl.org/list/module-authors.html&quot;&gt;。https：//lists.perlを&lt;/a&gt;参照してください）。詳細およびアーカイブへのリンクについては、.org / list / module-authors.htmlを参照してください）。</target>
        </trans-unit>
        <trans-unit id="052100b20ac103ab19054e70ed9a9d17e374ebf5" translate="yes" xml:space="preserve">
          <source>You might love it. You might feel that everyone else needs it. But there might not actually be any real demand for it out there. If you're unsure about the demand your module will have, consider sending out feelers on the &lt;code&gt;comp.lang.perl.modules&lt;/code&gt; newsgroup, or as a last resort, ask the modules list at &lt;code&gt;modules@perl.org&lt;/code&gt; . Remember that this is a closed list with a very long turn-around time - be prepared to wait a good while for a response from them.</source>
          <target state="translated">あなたはそれを愛するかもしれません。他の誰もがそれを必要としていると感じるかもしれません。しかし、実際にはそれに対する実際の需要はないかもしれません。モジュールの需要がわからない場合は、 &lt;code&gt;comp.lang.perl.modules&lt;/code&gt; ニュースグループに報告者を送ることを検討するか、最後の手段として、modules &lt;code&gt;modules@perl.org&lt;/code&gt; モジュールリストを確認してください。これは非常に長いターンアラウンドタイムの​​クローズドリストであることを忘れないでください-それらからの応答を待つ間、準備をしてください。</target>
        </trans-unit>
        <trans-unit id="635f4d083c94bfb096f7bc0bc442f402e843c1a1" translate="yes" xml:space="preserve">
          <source>You might mistakenly think that &lt;code&gt;len&lt;/code&gt; is the number of bytes to add to the existing size, but instead it is the total size &lt;code&gt;sv&lt;/code&gt; should be.</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; は既存のサイズに追加するバイト数であると誤解するかもしれませんが、代わりに &lt;code&gt;sv&lt;/code&gt; の合計サイズである必要があります。</target>
        </trans-unit>
        <trans-unit id="169bde04d58834aed9e29a6302664c4d13ccbcd6" translate="yes" xml:space="preserve">
          <source>You might not need all the power of XS. The Inline::C module lets you put C code directly in your Perl source. It handles all the magic to make it work. You still have to learn at least some of the perl API but you won't have to deal with the complexity of the XS support files.</source>
          <target state="translated">XS のすべての機能を必要としないかもしれません。Inline::Cモジュールを使うと、C言語のコードを直接Perlのソースに入れることができます。それを動作させるためのすべてのマジックを処理します。少なくともPerl APIの一部を学ぶ必要がありますが、XSのサポートファイルの複雑さに悩まされる必要はありません。</target>
        </trans-unit>
        <trans-unit id="3b031c43f33840adc70b02de47a8fd1daefabaa6" translate="yes" xml:space="preserve">
          <source>You might notice several familiar Perl concepts in this collection of ACM columns from Jon Bentley. The similarity to the title of the major Perl book (which came later) is not completely accidental:</source>
          <target state="translated">Jon BentleyによるACMのコラム集で、いくつかのおなじみのPerlの概念に気づくかもしれません。(後から来た)メジャーな Perl の本のタイトルとの類似性は、完全に偶然ではありません。</target>
        </trans-unit>
        <trans-unit id="66fdf1bb9d02362c3ab6fa3feaa38bdbfcec77f8" translate="yes" xml:space="preserve">
          <source>You might notice that you could use backticks for much the same effect as opening a pipe for reading:</source>
          <target state="translated">あなたはあなたが読むためのパイプを開くのとほぼ同じ効果のためにバックティックを使用することができることに気づくかもしれません。</target>
        </trans-unit>
        <trans-unit id="42704287df9412e9063781246ba069342cd72b32" translate="yes" xml:space="preserve">
          <source>You might notice this when each of the elements of &lt;code&gt;@array&lt;/code&gt; end with a newline. You expect to print one element per line, but notice that every line after the first is indented:</source>
          <target state="translated">&lt;code&gt;@array&lt;/code&gt; の各要素が改行で終わる場合、これに気付くでしょう。1行に1つの要素を出力することを期待していますが、最初の行の後のすべての行がインデントされていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e3ccde21cef99ed04d4c1fb15da658aad8223bd5" translate="yes" xml:space="preserve">
          <source>You might prefer to go on to &lt;a href=&quot;perllol&quot;&gt;perllol&lt;/a&gt; instead of &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt;; it discusses lists of lists and multidimensional arrays in detail. After that, you should move on to &lt;a href=&quot;perldsc&quot;&gt;perldsc&lt;/a&gt;; it's a Data Structure Cookbook that shows recipes for using and printing out arrays of hashes, hashes of arrays, and other kinds of data.</source>
          <target state="translated">&lt;a href=&quot;perllol&quot;&gt;perlrefの&lt;/a&gt;代わりに&lt;a href=&quot;perlref&quot;&gt;perllol&lt;/a&gt;を使用することをお勧めします。リストのリストと多次元配列について詳しく説明します。その後、&lt;a href=&quot;perldsc&quot;&gt;perldscに&lt;/a&gt;移動する必要があります。これは、ハッシュの配列、配列のハッシュ、およびその他の種類のデータを使用および出力するためのレシピを示すデータ構造クックブックです。</target>
        </trans-unit>
        <trans-unit id="a6310ecb45c68b753610be852acb876a80aa3c10" translate="yes" xml:space="preserve">
          <source>You might relate this to a fictional 'Translate' module:</source>
          <target state="translated">これを架空の「翻訳」モジュールに関連づけることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="13ab2e65d93fb0059f6f55ed6a75f22913178d96" translate="yes" xml:space="preserve">
          <source>You might remember &lt;code&gt;ok() or diag()&lt;/code&gt; with the mnemonic &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;() or
&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;()&lt;/code&gt; .</source>
          <target state="translated">ニーモニック &lt;code&gt;&lt;a href=&quot;../functions/open&quot;&gt;open&lt;/a&gt;() or &lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;()&lt;/code&gt; （）または &lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;（）で &lt;code&gt;ok() or diag()&lt;/code&gt; を覚えているかもしれません。</target>
        </trans-unit>
        <trans-unit id="88eec674517534aa08403d748f3a5041ffce6d87" translate="yes" xml:space="preserve">
          <source>You might remember &lt;code&gt;ok() or diag()&lt;/code&gt; with the mnemonic &lt;code&gt;open() or die()&lt;/code&gt;.</source>
          <target state="translated">ニーモニック &lt;code&gt;open() or die()&lt;/code&gt; &lt;code&gt;ok() or diag()&lt;/code&gt; を覚えているかもしれません。</target>
        </trans-unit>
        <trans-unit id="4c266ee238a4776706bced7eb857615f2dea1e3c" translate="yes" xml:space="preserve">
          <source>You might sometimes find that the original author has edited the branch's history. There are lots of good reasons for this. Sometimes, an author might simply be rebasing the branch onto a newer source point. Sometimes, an author might have found an error in an early commit which they wanted to fix before merging the branch to blead.</source>
          <target state="translated">原著者が枝の歴史を編集していることに気づくことがあるかもしれません。これにはたくさんの理由があります。単純に新しいソースポイントにブランチをリベースしたいという場合もあるでしょう。ブランチをマージして blead にする前に、初期のコミットでエラーを見つけて修正したいと思ったこともあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="37d4864369383102be2440cd5c5cb4b7987e528b" translate="yes" xml:space="preserve">
          <source>You might sometimes see reference to Rule 1 and Rule 2. Larry's power as Supreme Court is expressed in The Rules:</source>
          <target state="translated">ルール1とルール2への言及を時々目にすることがあるかもしれません。ラリーの最高裁判所としての力は、The Rulesで表現されています。</target>
        </trans-unit>
        <trans-unit id="8dd311a23537c2ad8611321313121285ae51f8bb" translate="yes" xml:space="preserve">
          <source>You might try &lt;a href=&quot;Encode::Guess&quot;&gt;Encode::Guess&lt;/a&gt;, but it has a number of limitations.</source>
          <target state="translated">&lt;a href=&quot;Encode::Guess&quot;&gt;Encode :: Guessを&lt;/a&gt;試すこともできますが、いくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="f5b7d1197bc89948add2ed3f352d319d84d2e28b" translate="yes" xml:space="preserve">
          <source>You might try &lt;a href=&quot;encode/guess&quot;&gt;Encode::Guess&lt;/a&gt;, but it has a number of limitations.</source>
          <target state="translated">&lt;a href=&quot;encode/guess&quot;&gt;Encode :: Guessを&lt;/a&gt;試すこともできますが、いくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="193b85d5b4fe0e90a0d9c66d7d0b78036e923063" translate="yes" xml:space="preserve">
          <source>You might want to do the same thing for expressing key bindings or the like (since hardwiring &quot;q&quot; as the binding for the function that quits a screen/menu/program is useful only if your language happens to associate &quot;q&quot; with &quot;quit&quot;!)</source>
          <target state="translated">キーバインディングなどの表現についても同じことをした方がいいかもしれません(画面/メニュー/プログラムを終了させる関数のバインディングとして &quot;q &quot;をハードワイヤリングするのは、あなたの言語が &quot;q &quot;と &quot;quit &quot;を関連付けている場合にのみ有用です!)。</target>
        </trans-unit>
        <trans-unit id="b5d495d915ce638287be04e211dc9e03d5ac46bf" translate="yes" xml:space="preserve">
          <source>You might want to keep these desktop references close by your keyboard:</source>
          <target state="translated">これらのデスクトップリファレンスをキーボードのそばに置いておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="d8a5e7dd7b9870679e3daf8f99524f8e40f1a078" translate="yes" xml:space="preserve">
          <source>You might want to use &lt;a href=&quot;#accuracy%28%29&quot;&gt;&quot;accuracy()&quot;&lt;/a&gt; instead. With &lt;a href=&quot;#accuracy%28%29&quot;&gt;&quot;accuracy()&quot;&lt;/a&gt; you set the number of digits each result should have, with &lt;a href=&quot;#precision%28%29&quot;&gt;&quot;precision()&quot;&lt;/a&gt; you set the place where to round.</source>
          <target state="translated">代わりに&lt;a href=&quot;#accuracy%28%29&quot;&gt;「accuracy（）」&lt;/a&gt;を使用することをお勧めします。&lt;a href=&quot;#accuracy%28%29&quot;&gt;「精度（）」&lt;/a&gt;あなたと、それぞれの結果が持つべき桁数を設定する&lt;a href=&quot;#precision%28%29&quot;&gt;「）（精度」&lt;/a&gt;あなたはどこのラウンドに場所を設定します。</target>
        </trans-unit>
        <trans-unit id="0d1eb54f95a4e04b463b84dfe6de9e8067695824" translate="yes" xml:space="preserve">
          <source>You might wonder why &lt;code&gt;'.'&lt;/code&gt; matches everything but &lt;code&gt;&quot;\n&quot;&lt;/code&gt; - why not every character? The reason is that often one is matching against lines and would like to ignore the newline characters. For instance, while the string &lt;code&gt;&quot;\n&quot;&lt;/code&gt; represents one line, we would like to think of it as empty. Then</source>
          <target state="translated">なぜ &lt;code&gt;'.'&lt;/code&gt; なのか不思議に思うかもしれません。 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 以外のすべてに一致-なぜすべての文字ではないのですか？その理由は、多くの場合、行と照合していて、改行文字を無視したいからです。たとえば、文字列 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; は1行を表しますが、空であると考えます。その後</target>
        </trans-unit>
        <trans-unit id="e851d081cca3db1538b95133dfa4e2591e66b038" translate="yes" xml:space="preserve">
          <source>You must Configure perl with</source>
          <target state="translated">perl を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b0e2052701354699753b2ee60dea4ed06963928" translate="yes" xml:space="preserve">
          <source>You must be triply conscious of cross-platform concerns. This usually boils down to using &lt;a href=&quot;File::Spec&quot;&gt;File::Spec&lt;/a&gt;, avoiding things like &lt;code&gt;fork()&lt;/code&gt; and &lt;code&gt;system()&lt;/code&gt; unless absolutely necessary, and not assuming that a given character has a particular ordinal value (code point) or that its UTF-8 representation is composed of particular bytes.</source>
          <target state="translated">クロスプラットフォームの懸念を三重に意識する必要があります。これは通常、&lt;a href=&quot;File::Spec&quot;&gt;File :: Spec&lt;/a&gt;を使用することになり、絶対に必要な場合を除いて &lt;code&gt;fork()&lt;/code&gt; や &lt;code&gt;system()&lt;/code&gt; （）などを避け、特定の文字が特定の順序値（コードポイント）を持っている、またはそのUTF-8表現が構成されているとは想定していません。特定のバイトの。</target>
        </trans-unit>
        <trans-unit id="c18657846c86f19718177ea80036f400e403ff68" translate="yes" xml:space="preserve">
          <source>You must be triply conscious of cross-platform concerns. This usually boils down to using &lt;a href=&quot;file/spec&quot;&gt;File::Spec&lt;/a&gt;, avoiding things like &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; unless absolutely necessary, and not assuming that a given character has a particular ordinal value (code point) or that its UTF-8 representation is composed of particular bytes.</source>
          <target state="translated">クロスプラットフォームの問題については三重に意識している必要があります。これは通常、&lt;a href=&quot;file/spec&quot;&gt;File :: Specの&lt;/a&gt;使用に帰着し、絶対に必要な場合を除いて &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; （）などを回避し、特定の文字が特定の序数値（コードポイント）を持っている、またはそのUTF-8表現が構成されていると想定しません特定のバイトの。</target>
        </trans-unit>
        <trans-unit id="8daf2a31e4062052794994fb1a77c6bf915b4376" translate="yes" xml:space="preserve">
          <source>You must call &lt;code&gt;plan(...)&lt;/code&gt; once and only once. You should call it in a &lt;code&gt;BEGIN {...}&lt;/code&gt; block, like so:</source>
          <target state="translated">&lt;code&gt;plan(...)&lt;/code&gt; は 1回だけ呼び出す必要があります。次のように、 &lt;code&gt;BEGIN {...}&lt;/code&gt; ブロックで呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ec48be76fb2e44c8427a737bacd675c106899a43" translate="yes" xml:space="preserve">
          <source>You must convert your non-ASCII, non-UTF-8 Perl scripts to be UTF-8.</source>
          <target state="translated">非ASCII、非UTF-8のPerlスクリプトをUTF-8に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="0d9b102a51e636379025c1716da72ec7158d144f" translate="yes" xml:space="preserve">
          <source>You must have a plan.</source>
          <target state="translated">計画を立てなければなりません。</target>
        </trans-unit>
        <trans-unit id="f323bd128da70502b49397ad0f7c4f483197be9e" translate="yes" xml:space="preserve">
          <source>You must have a project base class, which you load, and which you then use as the first argument in the call to YourProjClass-&amp;gt;get_handle(...). It should derive (whether directly or indirectly) from Locale::Maketext. It &lt;b&gt;doesn't matter&lt;/b&gt; how you name this class, although assuming this is the localization component of your Super Mega Program, good names for your project class might be SuperMegaProgram::Localization, SuperMegaProgram::L10N, SuperMegaProgram::I18N, SuperMegaProgram::International, or even SuperMegaProgram::Languages or SuperMegaProgram::Messages.</source>
          <target state="translated">ロードし、YourProjClass-&amp;gt; get_handle（...）への呼び出しの最初の引数として使用するプロジェクト基本クラスが必要です。Locale :: Maketextから（直接的または間接的に）派生する必要があります。このクラスの名前はどのように指定&lt;b&gt;してもかまいません&lt;/b&gt;が、これはスーパーメガプログラムのローカリゼーションコンポーネントであると想定していますが、プロジェクトクラスの適切な名前は、SuperMegaProgram :: Localization、SuperMegaProgram :: L10N、SuperMegaProgram :: I18N、SuperMegaProgram ::などです。インターナショナル、またはSuperMegaProgram :: LanguagesまたはSuperMegaProgram :: Messages。</target>
        </trans-unit>
        <trans-unit id="739cc975a787be41633b91aa5de71e36b127ddec" translate="yes" xml:space="preserve">
          <source>You must install the &lt;code&gt;Expect&lt;/code&gt; module to use &lt;code&gt;eexpect&lt;/code&gt; . CPAN.pm does not install it for you.</source>
          <target state="translated">&lt;code&gt;eexpect&lt;/code&gt; を使用するには、 &lt;code&gt;Expect&lt;/code&gt; モジュールをインストールする必要があります。CPAN.pmはそれをインストールしません。</target>
        </trans-unit>
        <trans-unit id="72fde4fbc93c4a749f9096aea6d3bd9a70e80b1d" translate="yes" xml:space="preserve">
          <source>You must install the &lt;code&gt;Expect&lt;/code&gt; module to use &lt;code&gt;expect&lt;/code&gt; . CPAN.pm does not install it for you.</source>
          <target state="translated">&lt;code&gt;expect&lt;/code&gt; を使用するには、 &lt;code&gt;Expect&lt;/code&gt; モジュールをインストールする必要があります。CPAN.pmはそれをインストールしません。</target>
        </trans-unit>
        <trans-unit id="4490a879ca5d596cdf1f67e2681afb5d54f17c52" translate="yes" xml:space="preserve">
          <source>You must make sure that any paths and path components are properly surrounded with double-quotes if they contain spaces. For example, &lt;code&gt;$potential_libs&lt;/code&gt; could be (literally):</source>
          <target state="translated">パスとパスコンポーネントにスペースが含まれている場合は、二重引用符で適切に囲む必要があります。たとえば、 &lt;code&gt;$potential_libs&lt;/code&gt; は（文字通り）次のようになります。</target>
        </trans-unit>
        <trans-unit id="30c4fd5a99a25cad991844e3c5c4f7509fd399a0" translate="yes" xml:space="preserve">
          <source>You must open your files before you print to them.</source>
          <target state="translated">印刷する前にファイルを開く必要があります。</target>
        </trans-unit>
        <trans-unit id="45897939488bd63d927112e2ca64e2fec16238a0" translate="yes" xml:space="preserve">
          <source>You must override the abstract methods as noted above.</source>
          <target state="translated">上記のように抽象メソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="2aa81922480ed45c435c4cf0c99c4c4aba3634fc" translate="yes" xml:space="preserve">
          <source>You must use &lt;code&gt;elsif&lt;/code&gt; rather than &lt;code&gt;else if&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;else if&lt;/code&gt; は、 &lt;code&gt;elsif&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d5226624761673c1e1cddc0c742247733ee03083" translate="yes" xml:space="preserve">
          <source>You must use &lt;code&gt;elsif&lt;/code&gt; rather than &lt;code&gt;else if&lt;/code&gt;.</source>
          <target state="translated">の &lt;code&gt;else if&lt;/code&gt; 、elseではなく &lt;code&gt;elsif&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="39c7a78d87a43f543e7180d2370d441ee16c546b" translate="yes" xml:space="preserve">
          <source>You must use an ANSI C compiler to build perl. Perl can be compiled with either Sun's add-on C compiler or with gcc. The C compiler that shipped with SunOS4 will not do.</source>
          <target state="translated">Perl をビルドするには ANSI C コンパイラを使用する必要があります。Perl は Sun のアドオン C コンパイラか gcc でコンパイルできます。SunOS4に同梱されているCコンパイラではコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="ac16e240bd822406d6dbb8a20f6f3e5d780cc6b4" translate="yes" xml:space="preserve">
          <source>You must use the cmd.exe, the Cygwin shell will not work. The PATH must include the SDK tools, including a Perl, which should be the case under cmd.exe. If you do not have that, see the end of symbian\sdk.pl for notes of how your environment should be set up for Symbian compiles.</source>
          <target state="translated">cmd.exeを使用する必要がありますが、Cygwinのシェルは動作しません。PATH には、cmd.exe の下にあるべき Perl を含む SDK ツールが含まれていなければならない。もし、それがなければ、Symbian のコンパイルのためにあなたの環境がどのようにセットアップされるべきかについてのメモのために、symbiansdk.pl の最後を参照してください。</target>
        </trans-unit>
        <trans-unit id="c168b8ed4e8b351eba14fd33d598861cf2969e22" translate="yes" xml:space="preserve">
          <source>You must yourself do any alignment or padding by inserting, for example, enough &lt;code&gt;&quot;x&quot;&lt;/code&gt; es while packing. There is no way for pack() and unpack() to know where characters are going to or coming from, so they handle their output and input as flat sequences of characters.</source>
          <target state="translated">たとえば、パッキング中に十分な &lt;code&gt;&quot;x&quot;&lt;/code&gt; esを挿入することにより、位置合わせまたはパディングを自分で行う必要があります。pack（）とunpack（）は、文字がどこに行き来するかを知る方法がないため、出力と入力を文字のフラットシーケンスとして処理します。</target>
        </trans-unit>
        <trans-unit id="da2b6f4499c28ef8f95dd1270da02ad4217bd0a5" translate="yes" xml:space="preserve">
          <source>You must yourself do any alignment or padding by inserting, for example, enough &lt;code&gt;&quot;x&quot;&lt;/code&gt;es while packing. There is no way for &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; to know where characters are going to or coming from, so they handle their output and input as flat sequences of characters.</source>
          <target state="translated">たとえば、梱包中に十分な &lt;code&gt;&quot;x&quot;&lt;/code&gt; 挿入して、位置合わせまたはパディングを自分で行う必要があります。&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#unpack-TEMPLATE%2CEXPR&quot;&gt; &lt;code&gt;unpack&lt;/code&gt; &lt;/a&gt;で文字がどこに行くのか、どこから来るのかを知る方法がないため、出力と入力をフラットな文字シーケンスとして処理します。</target>
        </trans-unit>
        <trans-unit id="495ba80801ecf71f6944f8f06ac3f6b0ec33f568" translate="yes" xml:space="preserve">
          <source>You need a &quot;make&quot; program to build the sources. If you are using Visual C++ or the Windows SDK tools, nmake will work. Builds using the gcc need dmake.</source>
          <target state="translated">ソースをビルドするには、&quot;make &quot;プログラムが必要です。Visual C++や Windows SDK ツールを使用している場合は、nmake が動作します。gcc を使ったビルドには dmake が必要です。</target>
        </trans-unit>
        <trans-unit id="6e03410c2453434206af384ed70ad4bb1fdfc03a" translate="yes" xml:space="preserve">
          <source>You need a &quot;make&quot; program to build the sources. If you are using Visual C++ or the Windows SDK tools, you can use nmake supplied with Visual C++ or Windows SDK. You may also use, for Visual C++ or Windows SDK, dmake or gmake instead of nmake. dmake is open source software, but is not included with Visual C++ or Windows SDK. Builds using gcc need dmake or gmake. nmake is not supported for gcc builds. Parallel building is only supported with dmake and gmake, not nmake. When using dmake it is recommended to use dmake 4.13 or newer for parallel building. Older dmakes, in parallel mode, have very high CPU usage and pound the disk/filing system with duplicate I/O calls in an aggressive polling loop.</source>
          <target state="translated">ソースをビルドするには「make」プログラムが必要です。Visual C++やWindows SDKツールを使用している場合は、Visual C++やWindows SDKに付属のnmakeを使用することができます。また、Visual C++や Windows SDK では nmake の代わりに dmake や gmake を使用することもできます。gcc を使ったビルドには dmake または gmake が必要です。並列ビルドは dmake と gmake でのみサポートされており、nmake はサポートされていません。dmake を使用する場合、並列ビルドには dmake 4.13 以降を使用することをお勧めします。古い dmake は、並列モードでは、CPU 使用率が非常に高く、積極的なポーリングループで重複した I/O 呼び出しでディスク/ファイリングシステムを叩きます。</target>
        </trans-unit>
        <trans-unit id="384c0cf5619a59f9ce19e0cd720b3f9bfb700b5a" translate="yes" xml:space="preserve">
          <source>You need a separate perl executable</source>
          <target state="translated">別の perl 実行ファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="aa34c474feea2ebcd51fe52bc61e21c7aa534d7c" translate="yes" xml:space="preserve">
          <source>You need an installed and working gccsdk cross compiler &lt;a href=&quot;http://gccsdk.riscos.info/&quot;&gt;http://gccsdk.riscos.info/&lt;/a&gt; and REXEN &lt;a href=&quot;http://www.cp15.org/programming/&quot;&gt;http://www.cp15.org/programming/&lt;/a&gt;</source>
          <target state="translated">インストールされ、動作するgccsdkクロスコンパイラ&lt;a href=&quot;http://gccsdk.riscos.info/&quot;&gt;http://gccsdk.riscos.info/&lt;/a&gt;およびREXEN &lt;a href=&quot;http://www.cp15.org/programming/&quot;&gt;http://www.cp15.org/programming/&lt;/a&gt;が必要です。</target>
        </trans-unit>
        <trans-unit id="4caefc1d4e2631b1200ec354d43fce32735ee7c7" translate="yes" xml:space="preserve">
          <source>You need at the very least AmigaOS version 2.0. Recommended is version 3.1.</source>
          <target state="translated">最低でもAmigaOSのバージョン2.0が必要です。推奨はバージョン3.1です。</target>
        </trans-unit>
        <trans-unit id="5333f88ac5bf8fd24e224f0d8051b5fec4dfc6b5" translate="yes" xml:space="preserve">
          <source>You need the Unix emulation for AmigaOS, whose most important part is &lt;b&gt;ixemul.library&lt;/b&gt;. For a minimum setup, get the latest versions of the following packages from the Aminet archives ( &lt;a href=&quot;http://www.aminet.net/~aminet/&quot;&gt;http://www.aminet.net/~aminet/&lt;/a&gt; ):</source>
          <target state="translated">AmigaOSのUnixエミュレーションが必要&lt;b&gt;です&lt;/b&gt;。その最も重要な部分は&lt;b&gt;ixemul.library&lt;/b&gt;です。最小限のセットアップでは、Aminetアーカイブ（&lt;a href=&quot;http://www.aminet.net/~aminet/&quot;&gt;http://www.aminet.net/~aminet/&lt;/a&gt;）から次のパッケージの最新バージョンを入手してください。</target>
        </trans-unit>
        <trans-unit id="46e89c73cbc6b5dd39fd756e0f6110a1446e5be5" translate="yes" xml:space="preserve">
          <source>You need the following files to build perl (or add new modules):</source>
          <target state="translated">perlをビルドする(または新しいモジュールを追加する)ためには、以下のファイルが必要です。</target>
        </trans-unit>
        <trans-unit id="9f9c012bcf4380f633cf4f7379c24b96c60ecb4b" translate="yes" xml:space="preserve">
          <source>You need to add either braces or blanks to disambiguate.</source>
          <target state="translated">曖昧さを解消するには、中括弧または空白を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="cd33ddce78ff1c7340f83b621a3b3b7072ee0d07" translate="yes" xml:space="preserve">
          <source>You need to apply the patches in</source>
          <target state="translated">でパッチを適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e3349f1cb25ac13b86ae16e145a0b5decd29f3c" translate="yes" xml:space="preserve">
          <source>You need to correct all the entries which look like file paths (they currently start with &lt;code&gt;f:/&lt;/code&gt;).</source>
          <target state="translated">ファイルパスのように見えるすべてのエントリを修正する必要があります（現在は &lt;code&gt;f:/&lt;/code&gt; で始まります）。</target>
        </trans-unit>
        <trans-unit id="ac623d9d2638d8e7b4db69f0dfe7d1ff10e6b5e8" translate="yes" xml:space="preserve">
          <source>You need to create a local file or directory handle or a local function.</source>
          <target state="translated">ローカルのファイルやディレクトリのハンドルやローカル関数を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="f1f5eb114f0c20a6807ea82566cc5f87d3a50a5b" translate="yes" xml:space="preserve">
          <source>You need to fetch the latest perl source (including developers releases). With some probability it is located in</source>
          <target state="translated">最新のPerlソース(開発者のリリースを含む)を取得する必要があります。ある程度の確率で</target>
        </trans-unit>
        <trans-unit id="965f03aeeab996c747b3c012ec9e65e74625b61a" translate="yes" xml:space="preserve">
          <source>You need to give a global variable a temporary value, especially $_.</source>
          <target state="translated">グローバル変数に一時的な値を与える必要があります。</target>
        </trans-unit>
        <trans-unit id="4566431899ec1f0737bac24e93a9db0aa49d528e" translate="yes" xml:space="preserve">
          <source>You need to have the latest &lt;b&gt;ixemul&lt;/b&gt; (Unix emulation for Amiga) from Aminet.</source>
          <target state="translated">&lt;b&gt;Aminet&lt;/b&gt;の最新の&lt;b&gt;ixemul&lt;/b&gt;（AmigaのUNIXエミュレーション）が必要です。</target>
        </trans-unit>
        <trans-unit id="a7ac6e008f84ae7c7059b678b8182fe611763a32" translate="yes" xml:space="preserve">
          <source>You need to have the latest EMX development environment, the full GNU tool suite (gawk renamed to awk, and GNU</source>
          <target state="translated">最新のEMX開発環境、完全なGNUツールスイート(gawkがawkに改名され、GNU</target>
        </trans-unit>
        <trans-unit id="f0226c50fdff6c76ac2211b429b8387e73ade57a" translate="yes" xml:space="preserve">
          <source>You need to have zlib 1.2.1 or better if you want to use the &lt;code&gt;-Merge&lt;/code&gt; option with &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; , &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; and &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-Merge&lt;/code&gt; オプションを &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; 、 &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; 、および &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; 使用する場合は、zlib 1.2.1以降が必要です。</target>
        </trans-unit>
        <trans-unit id="873959dbb9bde44be24f12aa34b3eef434338c60" translate="yes" xml:space="preserve">
          <source>You need to have zlib 1.2.1 or better if you want to use the &lt;code&gt;-Merge&lt;/code&gt; option with &lt;code&gt;IO::Compress::Gzip&lt;/code&gt;, &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; and &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt;.</source>
          <target state="translated">あなたが使用したい場合はzlib 1.2.1以上が必要です &lt;code&gt;-Merge&lt;/code&gt; でオプションを &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; 、 &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; し、 &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fe783f272c0192721f39d883cea6a7e6d87c384" translate="yes" xml:space="preserve">
          <source>You need to indent a strictly positive number of spaces, not 0.</source>
          <target state="translated">0ではなく、厳密に正の数のスペースをインデントする必要があります。</target>
        </trans-unit>
        <trans-unit id="f7d2bb828dde58ca4350b2c6d38a82848f926212" translate="yes" xml:space="preserve">
          <source>You need to make sure your script is executable, is accessible by the user CGI is running the script under (which is probably not the user account you tested it under), does not rely on any environment variables (like PATH) from the user it isn't running under, and isn't in a location where the CGI server can't find it, basically, more or less. Please see the following for more information:</source>
          <target state="translated">スクリプトが実行可能であること、CGI がスクリプトを実行しているユーザ (おそらくテストしたユーザアカウントではないでしょう)からアクセス可能であること、実行していないユーザからの環境変数 (PATH など)に依存していないこと、CGI サーバが見つけられない場所にないこと、基本的には多かれ少なかれ確認する必要があります。詳しくは以下をご覧ください。</target>
        </trans-unit>
        <trans-unit id="5378dd6faea905708bfdb72023c895700d44361d" translate="yes" xml:space="preserve">
          <source>You need to pass references to these objects. See &lt;a href=&quot;perlsub#Pass-by-Reference&quot;&gt;&quot;Pass by Reference&quot; in perlsub&lt;/a&gt; for this particular question, and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; for information on references.</source>
          <target state="translated">これらのオブジェクトへの参照を渡す必要があります。参照&lt;a href=&quot;perlsub#Pass-by-Reference&quot;&gt;はperlsubで「参照渡し」を&lt;/a&gt;、この特定の問題のために、と&lt;a href=&quot;perlref&quot;&gt;はperlref&lt;/a&gt;参照の詳細については。</target>
        </trans-unit>
        <trans-unit id="28dffbeaeb79cbefc3a6182c3945facf9e0c58d9" translate="yes" xml:space="preserve">
          <source>You need to pass references to these objects. See &lt;a href=&quot;perlsub#Pass-by-Reference&quot;&gt;Pass by Reference in perlsub&lt;/a&gt; for this particular question, and &lt;a href=&quot;perlref&quot;&gt;perlref&lt;/a&gt; for information on references.</source>
          <target state="translated">これらのオブジェクトへの参照を渡す必要があります。この特定の質問について&lt;a href=&quot;perlsub#Pass-by-Reference&quot;&gt;はperlsubの&lt;/a&gt;「Pass by Reference」を、リファレンスについては「&lt;a href=&quot;perlref&quot;&gt;perlref」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3725b76142cf0ba93578fc0f4b37b143a50c105" translate="yes" xml:space="preserve">
          <source>You need to perform the same general operations on related types of data, but with slight variations depending on the specific type of data the operations are applied to.</source>
          <target state="translated">関連するタイプのデータに対しても同じ一般的な操作を行う必要がありますが、操作が適用される特定のタイプのデータによって若干の違いがあります。</target>
        </trans-unit>
        <trans-unit id="97ad81b34d40212b78af8fc083ac0854544a24a5" translate="yes" xml:space="preserve">
          <source>You need to quote &quot;%s&quot;</source>
          <target state="translated">&quot;%s &quot;を引用する必要があります。</target>
        </trans-unit>
        <trans-unit id="520b001573d6d14aabe35562ee4099fd076b8bd4" translate="yes" xml:space="preserve">
          <source>You need to use &lt;code&gt;sv_magicext&lt;/code&gt; to add magic to &lt;code&gt;SvREADONLY&lt;/code&gt; SVs and also to add more than one instance of the same &lt;code&gt;how&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sv_magicext&lt;/code&gt; を使用して、 &lt;code&gt;SvREADONLY&lt;/code&gt; SVに魔法を追加し、同じ &lt;code&gt;how&lt;/code&gt; インスタンスを複数追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="eca7b2277d21c0c8eb2a5172b673ea24b48da4eb" translate="yes" xml:space="preserve">
          <source>You need to use &lt;code&gt;sv_magicext&lt;/code&gt; to add magic to SvREADONLY SVs and also to add more than one instance of the same 'how'.</source>
          <target state="translated">&lt;code&gt;sv_magicext&lt;/code&gt; を使用してSvREADONLY SVにマジックを追加し、同じ 'how'の複数のインスタンスを追加する必要もあります。</target>
        </trans-unit>
        <trans-unit id="87282945868227dd2bfe22d624f87b781030217d" translate="yes" xml:space="preserve">
          <source>You never know what tools you call from within your own tool will need a context. Obtaining the context early ensures that nested tools can find the context you want them to find.</source>
          <target state="translated">自分のツールの中から呼び出すツールがコンテキストを必要とするかどうかはわかりません。早めにコンテキストを取得することで、入れ子になっているツールが必要なコンテキストを確実に見つけることができます。</target>
        </trans-unit>
        <trans-unit id="48a3262ccbefb20acd592d55306e17827a38c688" translate="yes" xml:space="preserve">
          <source>You now have better understanding of what a source filter is, and you might even have a possible use for them. If you feel like playing with source filters but need a bit of inspiration, here are some extra features you could add to the Debug filter.</source>
          <target state="translated">これでソースフィルタとは何かがよく理解できたでしょうし、ソースフィルタを使う可能性も出てきたかもしれません。ソースフィルタをいじってみたいけど、もう少しインスピレーションが欲しいという方のために、デバッグフィルタに追加できる機能をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="73cbac231eb90b456375cc000b5becdd4bf8f684" translate="yes" xml:space="preserve">
          <source>You probably cannot fix the thing that runs perl, but you can change how perl outputs its warnings by defining a custom warning and die functions.</source>
          <target state="translated">perlを動かすものを修正することはおそらくできないでしょうが、カスタムの警告関数やdie関数を定義することで、perlが警告を出力する方法を変更することができます。</target>
        </trans-unit>
        <trans-unit id="c7c0603ac9ce1e85817396d548da858cc92fd4cc" translate="yes" xml:space="preserve">
          <source>You probably cannot mix &lt;a href=&quot;#alarm-SECONDS&quot;&gt;&lt;code&gt;alarm&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#sleep-EXPR&quot;&gt;&lt;code&gt;sleep&lt;/code&gt;&lt;/a&gt; calls, because &lt;a href=&quot;#sleep-EXPR&quot;&gt;&lt;code&gt;sleep&lt;/code&gt;&lt;/a&gt; is often implemented using &lt;a href=&quot;#alarm-SECONDS&quot;&gt;&lt;code&gt;alarm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sleep-EXPR&quot;&gt; &lt;code&gt;sleep&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#alarm-SECONDS&quot;&gt; &lt;code&gt;alarm&lt;/code&gt; &lt;/a&gt;を使用して実装されることが多いため、&lt;a href=&quot;#alarm-SECONDS&quot;&gt; &lt;code&gt;alarm&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#sleep-EXPR&quot;&gt; &lt;code&gt;sleep&lt;/code&gt; &lt;/a&gt;呼び出しを混在させることはおそらくできません。</target>
        </trans-unit>
        <trans-unit id="c42726aad22724c022f0c559e39f4d6e8477c11a" translate="yes" xml:space="preserve">
          <source>You probably cannot mix &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; calls, because &lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; is often implemented using &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; は多くの場合 &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; を使用して実装されるため、おそらく &lt;code&gt;&lt;a href=&quot;alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 呼び出しを混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="15661abf22e3cef9f933847127ca80cfb4161e88" translate="yes" xml:space="preserve">
          <source>You probably cannot mix &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; calls, because &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; is often implemented using &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; は多くの場合 &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; を使用して実装されるため、おそらく &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 呼び出しを混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="c6ea02ffa42491538c740d65bba124e60d5ff937" translate="yes" xml:space="preserve">
          <source>You probably expect this code to print the equivalent of</source>
          <target state="translated">おそらく、このコードは</target>
        </trans-unit>
        <trans-unit id="d62ac8cab5911278724664b4481b34fb6ef41dfa" translate="yes" xml:space="preserve">
          <source>You probably meant to use &lt;code&gt;$]&lt;/code&gt; instead. &lt;code&gt;$[&lt;/code&gt; is the base for indexing arrays. &lt;code&gt;$]&lt;/code&gt; is the Perl version number in decimal.</source>
          <target state="translated">代わりに &lt;code&gt;$]&lt;/code&gt; を使用するつもりでした。 &lt;code&gt;$[&lt;/code&gt; は配列のインデックス付けのベースです。 &lt;code&gt;$]&lt;/code&gt; は、Perlのバージョン番号（10進数）です。</target>
        </trans-unit>
        <trans-unit id="fd777891ad8556771da5ce520e6dfb0017006c11" translate="yes" xml:space="preserve">
          <source>You probably shouldn't rely upon the &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; being podded out forever. Not all pod translators are well-behaved in this regard, and perhaps the compiler will become pickier.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; が永久にポッドアウトされることに依存すべきではありません。この点に関して、すべてのポッドトランスレーターが適切に動作するわけではなく、おそらくコンパイラーがより厳格になるでしょう。</target>
        </trans-unit>
        <trans-unit id="fdea4fb0b549076471da0ef11cc5591c5ad20b5e" translate="yes" xml:space="preserve">
          <source>You probably shouldn't rely upon the &lt;code&gt;warn()&lt;/code&gt; being podded out forever. Not all pod translators are well-behaved in this regard, and perhaps the compiler will become pickier.</source>
          <target state="translated">おそらく、 &lt;code&gt;warn()&lt;/code&gt; が永久にポッドアウトされることに依存するべきではありません。すべてのポッドトランスレータがこの点で適切に動作するわけではなく、おそらくコンパイラはより厳しくなります。</target>
        </trans-unit>
        <trans-unit id="f7e43d034a25f1af2139047ca7966917ab4cd1dd" translate="yes" xml:space="preserve">
          <source>You probably want to use one of the assortment of wrappers, such as &lt;code&gt;SvSetSV&lt;/code&gt; , &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; , &lt;code&gt;SvSetMagicSV&lt;/code&gt; and &lt;code&gt;SvSetMagicSV_nosteal&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;SvSetSV&lt;/code&gt; 、 &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; 、 &lt;code&gt;SvSetMagicSV&lt;/code&gt; 、SvSetMagicSV_nostealなどのラッパーの種類のいずれかを使用したい場合があり &lt;code&gt;SvSetMagicSV_nosteal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26d6df5a722c4587c10d1e33caf64417a111e3b7" translate="yes" xml:space="preserve">
          <source>You probably want to use one of the assortment of wrappers, such as &lt;code&gt;SvSetSV&lt;/code&gt;, &lt;code&gt;SvSetSV_nosteal&lt;/code&gt;, &lt;code&gt;SvSetMagicSV&lt;/code&gt; and &lt;code&gt;SvSetMagicSV_nosteal&lt;/code&gt;.</source>
          <target state="translated">あなたは、おそらくのような、ラッパーの品揃えのいずれかを使用したい &lt;code&gt;SvSetSV&lt;/code&gt; 、 &lt;code&gt;SvSetSV_nosteal&lt;/code&gt; 、 &lt;code&gt;SvSetMagicSV&lt;/code&gt; と &lt;code&gt;SvSetMagicSV_nosteal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d6ef8cdce7f3fb77e02bca3307aceacf65c4aa9" translate="yes" xml:space="preserve">
          <source>You probably wrote something like this:</source>
          <target state="translated">こんなことを書いたんでしょうね。</target>
        </trans-unit>
        <trans-unit id="39ad4b4dd2e75230f3579c0483b312257f0274c5" translate="yes" xml:space="preserve">
          <source>You really need GNU make to compile this. GNU make ships by default with QNX 4.23, but you can get it from quics for earlier versions.</source>
          <target state="translated">これをコンパイルするには GNU make が必要です。GNU make はデフォルトで QNX 4.23 と一緒に出荷されますが、それ以前のバージョンの場合は quics から入手できます。</target>
        </trans-unit>
        <trans-unit id="f29c66ebc5c2830e25ec34ca0ddd3f809b29ffce" translate="yes" xml:space="preserve">
          <source>You really probably want to be using &lt;a href=&quot;#my-VARLIST&quot;&gt;&lt;code&gt;my&lt;/code&gt;&lt;/a&gt; instead, because &lt;a href=&quot;#local-EXPR&quot;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt; isn't what most people think of as &quot;local&quot;. See &lt;a href=&quot;perlsub#Private-Variables-via-my%28%29&quot;&gt;&quot;Private Variables via my()&quot; in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;#local-EXPR&quot;&gt; &lt;code&gt;local&lt;/code&gt; &lt;/a&gt;はほとんどの人が「ローカル」と考えるものではないので&lt;a href=&quot;#my-VARLIST&quot;&gt; &lt;code&gt;my&lt;/code&gt; &lt;/a&gt;あなたはおそらく代わりに私のものを使いたいと思うでしょう。詳細については&lt;a href=&quot;perlsub#Private-Variables-via-my%28%29&quot;&gt;、perlsubの「my（）を介したプライベート変数」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e91eff73482d2359765ffe5506e4ead5d70a7574" translate="yes" xml:space="preserve">
          <source>You really probably want to be using &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; instead, because &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; isn't what most people think of as &quot;local&quot;. See &lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; はほとんどの人が「ローカル」と考えているものではないので &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; あなたはおそらく私の代わりに本当に使用したいと思うでしょう。詳細については&lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;、perlsubのmy（）によるプライベート変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ab88c992626b72f6894fc343016d386fe947c5ce" translate="yes" xml:space="preserve">
          <source>You really probably want to be using &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; instead, because &lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; isn't what most people think of as &quot;local&quot;. See &lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; はほとんどの人が「ローカル」と考えているものではないので &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; あなたはおそらく私の代わりに本当に使用したいと思うでしょう。詳細については&lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;、perlsubのmy（）によるプライベート変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d15f62d6aa63d728245cd3284fc083f9f68cff93" translate="yes" xml:space="preserve">
          <source>You see, if you call pstruct by its other incybernation, c2ph, you have a code generator that translates C code into perl code! Well, structure and union declarations at least, but that's quite a bit.</source>
          <target state="translated">ご覧のように、もしあなたがpstructを他のインサイバネーションであるc2phで呼ぶならば、Cのコードをperlのコードに変換するコードジェネレータを手に入れたことになります。まあ、少なくとも構造体とユニオンの宣言はそうですが、それはかなりのものです。</target>
        </trans-unit>
        <trans-unit id="e40f965e1563da6a69b2b3cefacc4ba6dd9ef204" translate="yes" xml:space="preserve">
          <source>You should &lt;code&gt;use Test2::IPC;&lt;/code&gt; as early as possible in your test file. If you import this module after API initialization it will attempt to retrofit IPC onto the existing hubs.</source>
          <target state="translated">&lt;code&gt;use Test2::IPC;&lt;/code&gt; を使用する必要があります。テストファイルのできるだけ早い段階で。APIの初期化後にこのモジュールをインポートすると、IPCを既存のハブに後付けしようとします。</target>
        </trans-unit>
        <trans-unit id="95f74aa64cd2ea580871d2847f70b2776302bedc" translate="yes" xml:space="preserve">
          <source>You should also &quot;register&quot; your op with the Perl interpreter so that it can produce sensible error and warning messages. Since it is possible to have multiple custom ops within the one &quot;logical&quot; op type &lt;code&gt;OP_CUSTOM&lt;/code&gt; , Perl uses the value of &lt;code&gt;o-&amp;gt;op_ppaddr&lt;/code&gt; to determine which custom op it is dealing with. You should create an &lt;code&gt;XOP&lt;/code&gt; structure for each ppaddr you use, set the properties of the custom op with &lt;code&gt;XopENTRY_set&lt;/code&gt; , and register the structure against the ppaddr using &lt;code&gt;Perl_custom_op_register&lt;/code&gt; . A trivial example might look like:</source>
          <target state="translated">また、opをPerlインタープリターに「登録」して、賢明なエラーおよび警告メッセージを生成できるようにする必要もあります。 1つの「論理」opタイプ &lt;code&gt;OP_CUSTOM&lt;/code&gt; 内に複数のカスタムopを含めることができるため、Perlは &lt;code&gt;o-&amp;gt;op_ppaddr&lt;/code&gt; の値を使用して、処理するカスタムopを決定します。あなたは、作成する必要があり &lt;code&gt;XOP&lt;/code&gt; の、あなたが使用する各ppaddrための構造を持つカスタムOPのプロパティ設定 &lt;code&gt;XopENTRY_set&lt;/code&gt; を、そして使用してppaddrに対する構造登録 &lt;code&gt;Perl_custom_op_register&lt;/code&gt; を。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a859b2e7cc53302cdc693e11c15d6ffe18891b34" translate="yes" xml:space="preserve">
          <source>You should also &quot;register&quot; your op with the Perl interpreter so that it can produce sensible error and warning messages. Since it is possible to have multiple custom ops within the one &quot;logical&quot; op type &lt;code&gt;OP_CUSTOM&lt;/code&gt;, Perl uses the value of &lt;code&gt;o-&amp;gt;op_ppaddr&lt;/code&gt; to determine which custom op it is dealing with. You should create an &lt;code&gt;XOP&lt;/code&gt; structure for each ppaddr you use, set the properties of the custom op with &lt;code&gt;XopENTRY_set&lt;/code&gt;, and register the structure against the ppaddr using &lt;code&gt;Perl_custom_op_register&lt;/code&gt;. A trivial example might look like:</source>
          <target state="translated">また、Perlインタープリターに操作を「登録」して、適切なエラーおよび警告メッセージを生成できるようにする必要があります。 1つの「論理」操作タイプ &lt;code&gt;OP_CUSTOM&lt;/code&gt; 内に複数のカスタム操作を含めることができるため、Perlは &lt;code&gt;o-&amp;gt;op_ppaddr&lt;/code&gt; の値を使用して、処理しているカスタム操作を決定します。あなたは、作成する必要があり &lt;code&gt;XOP&lt;/code&gt; の、あなたが使用する各ppaddrための構造を持つカスタムOPのプロパティ設定 &lt;code&gt;XopENTRY_set&lt;/code&gt; を、そして使用してppaddrに対する構造登録 &lt;code&gt;Perl_custom_op_register&lt;/code&gt; を。簡単な例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="8cd501f21ed6c5e9d05fc6e18329636984dc10c8" translate="yes" xml:space="preserve">
          <source>You should also check out the Frequently Asked Questions list in comp.unix.* for things like this: the answer is essentially the same. It's very system-dependent. Here's one solution that works on BSD systems:</source>
          <target state="translated">comp.unix.*の「よくある質問」リストをチェックしてみてください。答えは基本的に同じです。BSD システム上で動作する解決策があります。</target>
        </trans-unit>
        <trans-unit id="f04dff0eea092cd0ec8988c859db7bf95d5caa53" translate="yes" xml:space="preserve">
          <source>You should also check your modules, and upgrade them if necessary. For example, HTML::Entities requires version &amp;gt;= 1.32 to function correctly, even though the changelog is silent about this.</source>
          <target state="translated">また、モジュールを確認し、必要に応じてアップグレードする必要があります。たとえば、HTML :: Entitiesが正しく機能するためには、変更ログに何も書かれていないにもかかわらず、バージョン1.32以上が必要です。</target>
        </trans-unit>
        <trans-unit id="216e237825c211374fe3090940c41c56504f6ae4" translate="yes" xml:space="preserve">
          <source>You should also have received a copy of the GNU General Public License along with this program in the file named &quot;Copying&quot;. If not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA or visit their web page on the internet at &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;http://www.gnu.org/copyleft/gpl.html&lt;/a&gt;.</source>
          <target state="translated">また、「コピー」という名前のファイルで、このプログラムと一緒にGNU General PublicLicenseのコピーを受け取っているはずです。そうでない場合は、Free Software Foundation、Inc.、51 Franklin St、Fifth Floor、Boston、MA 02110-1301、USAに連絡するか、インターネット上のWebページ（&lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;http://www.gnu.org/copyleft/gpl）にアクセス&lt;/a&gt;してください。 .html。</target>
        </trans-unit>
        <trans-unit id="1bf271b2d5721f863cabe314c6f3ea53dab9ccef" translate="yes" xml:space="preserve">
          <source>You should also look at &lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;perlfaq9&quot;&gt;perlfaq9&lt;/a&gt;も確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2a8e7bc27f2427aec43e373a1d93fb28c7dab24" translate="yes" xml:space="preserve">
          <source>You should also take a look at &lt;a href=&quot;perlmodstyle&quot;&gt;perlmodstyle&lt;/a&gt; for best practices in making a module.</source>
          <target state="translated">モジュールを作成する際のベストプラクティスについては、&lt;a href=&quot;perlmodstyle&quot;&gt;perlmodstyle&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="50caca8ed03bfd57a516ccc3b6dfa215ef520713" translate="yes" xml:space="preserve">
          <source>You should also try to get feedback from people who are already familiar with the module's application domain and the CPAN naming system. Authors of similar modules, or modules with similar names, may be a good place to start, as are community sites like &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perlmonks.org&quot;&gt;Perl Monks&lt;/a&gt;.</source>
          <target state="translated">また、モジュールのアプリケーションドメインとCPANネーミングシステムに既に精通しているユーザーからのフィードバックを得るようにしてください。&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.perlmonks.org&quot;&gt;Perl Monksの&lt;/a&gt;ようなコミュニティサイトと同様に、類似のモジュールの作成者、または類似の名前のモジュールを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="95145fec9529b3152d5a5f6f32c276f625174f2b" translate="yes" xml:space="preserve">
          <source>You should also try to get feedback from people who are already familiar with the module's application domain and the CPAN naming system. Authors of similar modules, or modules with similar names, may be a good place to start, as are community sites like &lt;a href=&quot;https://www.perlmonks.org&quot;&gt;Perl Monks&lt;/a&gt;.</source>
          <target state="translated">また、モジュールのアプリケーションドメインとCPANネーミングシステムに既に精通している人々からフィードバックを得るようにしてください。&lt;a href=&quot;https://www.perlmonks.org&quot;&gt;Perl Monksの&lt;/a&gt;ようなコミュニティサイトと同様に、同様のモジュール、または同様の名前のモジュールの作成者が開始するのに適している場合があります。</target>
        </trans-unit>
        <trans-unit id="6748d5917300372787fdc7a9ff0a6b3a57b1d0d9" translate="yes" xml:space="preserve">
          <source>You should always support a &lt;code&gt;HASH&lt;/code&gt; argument to &lt;code&gt;TIEHASH&lt;/code&gt; that ties the underlying cache so that the user can specify that the cache is also persistent or that it has some other interesting semantics. The example above demonstrates how to do this, as does &lt;code&gt;Memoize::Expire&lt;/code&gt; .</source>
          <target state="translated">ユーザーは、キャッシュも永続的であるか、または他の興味深いセマンティクスを持っていることをユーザーが指定できるように、基になるキャッシュを &lt;code&gt;TIEHASH&lt;/code&gt; するTIEHASHへの &lt;code&gt;HASH&lt;/code&gt; 引数を常にサポートする必要があります。上記の例は、 &lt;code&gt;Memoize::Expire&lt;/code&gt; と同様に、これを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d1e2e0b2bc7e86a2fa76d37f5310a663f4f81bdc" translate="yes" xml:space="preserve">
          <source>You should always support a &lt;code&gt;HASH&lt;/code&gt; argument to &lt;code&gt;TIEHASH&lt;/code&gt; that ties the underlying cache so that the user can specify that the cache is also persistent or that it has some other interesting semantics. The example above demonstrates how to do this, as does &lt;code&gt;Memoize::Expire&lt;/code&gt;.</source>
          <target state="translated">基になるキャッシュを結び付ける &lt;code&gt;TIEHASH&lt;/code&gt; への &lt;code&gt;HASH&lt;/code&gt; 引数を常にサポートして、ユーザーがキャッシュも永続的であること、または他の興味深いセマンティクスがあることを指定できるようにする必要があります。上記の例は、 &lt;code&gt;Memoize::Expire&lt;/code&gt; と同様に、これを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3be69763ec9a168e71d6a325f5feb839520bece8" translate="yes" xml:space="preserve">
          <source>You should attempt older code to fully use</source>
          <target state="translated">を完全に使用するには、古いコードを試す必要があります。</target>
        </trans-unit>
        <trans-unit id="035ccc9a9d5711f4af1f69c6423f5fd457c6beb5" translate="yes" xml:space="preserve">
          <source>You should attempt to get older code to fully use</source>
          <target state="translated">を完全に使用するためには、古いコードの取得を試みる必要があります。</target>
        </trans-unit>
        <trans-unit id="2aa5702baea4b6cbbf8baf7ed5e04e20725d5137" translate="yes" xml:space="preserve">
          <source>You should be aware that it is unsupported, and is not claimed to be fit for any purpose. If your system allows installation of arbitrary locales, you may find the definitions useful as they are, or as a basis for the development of your own locales.</source>
          <target state="translated">これはサポートされておらず、いかなる目的にも適合するとは主張されていないことに注意すべきです。お使いのシステムが任意のロケールのインストールを許可している場合、定義はそのままでも、独自のロケールを開発するための基礎としても、役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="e3162405a76386caaa175c4a5b3c2a85402c9c86" translate="yes" xml:space="preserve">
          <source>You should be careful about creating mortal variables. Strange things can happen if you make the same value mortal within multiple contexts, or if you make a variable mortal multiple times. Thinking of &quot;Mortalization&quot; as deferred &lt;code&gt;SvREFCNT_dec&lt;/code&gt; should help to minimize such problems. For example if you are passing an SV which you</source>
          <target state="translated">モータル変数の作成には注意が必要です。複数のコンテキスト内で同じ値を致命的にする場合、または可変の致命的な値を複数回作成する場合、奇妙なことが発生する可能性があります。「 &lt;code&gt;SvREFCNT_dec&lt;/code&gt; 」を据え置きのSvREFCNT_decと考えると、このような問題を最小限に抑えることができます。たとえば、SVを渡す場合、</target>
        </trans-unit>
        <trans-unit id="9ad5df3f66f5b17aedb15ffe31f22d342f4b8c8e" translate="yes" xml:space="preserve">
          <source>You should be especially careful to remember what's being looked at when:</source>
          <target state="translated">特に気をつけなければならないのは、いつ何を見られているのかを覚えておくことです。</target>
        </trans-unit>
        <trans-unit id="2612532f10e360a543e4698a0462860c195cea00" translate="yes" xml:space="preserve">
          <source>You should be using two different symbols instead.</source>
          <target state="translated">代わりに2種類の記号を使うべきです。</target>
        </trans-unit>
        <trans-unit id="f75000df91bba9bce6bbc0dce623bb898fe50b2f" translate="yes" xml:space="preserve">
          <source>You should be very careful when modifying the default values of most special variables described in this document. In most cases you want to localize these variables before changing them, since if you don't, the change may affect other modules which rely on the default values of the special variables that you have changed. This is one of the correct ways to read the whole file at once:</source>
          <target state="translated">このドキュメントで説明されているほとんどの特別な変数のデフォルト値を変更するときは、非常に注意が必要です。そうしないと、変更した特殊変数のデフォルト値に依存している他のモジュールに影響を与える可能性があるからです。これは、ファイル全体を一度に読み込む正しい方法の一つです。</target>
        </trans-unit>
        <trans-unit id="949c1f70059f0d92507bf8500b354d7dab533cd7" translate="yes" xml:space="preserve">
          <source>You should by now have had a look at &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;, which tells you about Perl's internal variable types: SVs, HVs, AVs and the rest. If not, do that now.</source>
          <target state="translated">これで、&lt;a href=&quot;perlguts&quot;&gt;Perlgutsを&lt;/a&gt;確認できました。Perlgutsは、Perlの内部変数タイプ（SV、HV、AV、その他）について説明しています。そうでない場合は、今すぐ実行してください。</target>
        </trans-unit>
        <trans-unit id="8dc43c8dd65f9ea8dbe3744e02b3f2e2bf6fd033" translate="yes" xml:space="preserve">
          <source>You should have received a copy of the Artistic License with this Kit, in the file named &quot;Artistic&quot;. If not, I'll be glad to provide one.</source>
          <target state="translated">このキットと一緒に芸術的ライセンスのコピーを &quot;芸術的 &quot;という名前のファイルで受け取っているはずです。そうでなければ、喜んで提供します。</target>
        </trans-unit>
        <trans-unit id="1de8c82aa4b462c346cc4f7308a916f25f4fef57" translate="yes" xml:space="preserve">
          <source>You should have received a copy of the GNU General Public License along with this library program; it should be in the file &lt;code&gt;COPYING&lt;/code&gt; . If not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA</source>
          <target state="translated">このライブラリプログラムとともに、GNU General Public Licenseのコピーを受け取っているはずです。ファイル &lt;code&gt;COPYING&lt;/code&gt; にある必要があります。そうでない場合は、Free Software Foundation、Inc.、51 Franklin Street、Fifth Floor、Boston、MA 02110-1301、USAまでご連絡ください。</target>
        </trans-unit>
        <trans-unit id="89d4940a32ed3ab90e1b7165c58f90ef387f0c29" translate="yes" xml:space="preserve">
          <source>You should have received a copy of the GNU General Public License along with this library program; it should be in the file &lt;code&gt;COPYING&lt;/code&gt;. If not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA</source>
          <target state="translated">このライブラリプログラムと一緒にGNUGeneral PublicLicenseのコピーを受け取っているはずです。 &lt;code&gt;COPYING&lt;/code&gt; ファイルにあるはずです。そうでない場合は、Free Software Foundation、Inc.、51 Franklin Street、Fifth Floor、Boston、MA 02110-1301、USAに連絡してください。</target>
        </trans-unit>
        <trans-unit id="e47e81623eb986394886e54e85f1183c3a98df4e" translate="yes" xml:space="preserve">
          <source>You should in general be leery of using functions that could potentially return lists in scalar context without explicitly stating such. This would be clearer to the casual reader:</source>
          <target state="translated">スカラコンテキストでリストを返す可能性のある関数を明示的に記述せずに使うことは、一般的には注意が必要です。この方がカジュアルな読者にはわかりやすいでしょう。</target>
        </trans-unit>
        <trans-unit id="f07911b4c8d126039388d13cb35130da1027b105" translate="yes" xml:space="preserve">
          <source>You should make a module out of any code that you think is going to be useful to others. Anything that's likely to fill a hole in the communal library and which someone else can slot directly into their program. Any part of your code which you can isolate and extract and plug into something else is a likely candidate.</source>
          <target state="translated">他の人に役立ちそうなコードからモジュールを作るべきです。共同ライブラリの穴を埋めてくれそうなもので、他の誰かが自分のプログラムに直接挿入できるものなら何でもいいのです。あなたのコードのどの部分も、分離して抽出して他の何かに差し込むことができるものが候補になります。</target>
        </trans-unit>
        <trans-unit id="040633d0da585780031086722446751b04946152" translate="yes" xml:space="preserve">
          <source>You should neither care about nor depend on the internal representation; it might change without notice. Use &lt;b&gt;ONLY&lt;/b&gt; method calls like &lt;code&gt;$x-&amp;gt;sign();&lt;/code&gt; instead relying on the internal representation.</source>
          <target state="translated">内部表現を気にしたり、依存したりしないでください。予告なく変更される場合があります。 &lt;code&gt;$x-&amp;gt;sign();&lt;/code&gt; ようなメソッド呼び出し&lt;b&gt;のみを&lt;/b&gt;使用します。代わりに、内部表現に依存しています。</target>
        </trans-unit>
        <trans-unit id="8e48507edb3519e34f20c7e3d955b48a4ed82ad2" translate="yes" xml:space="preserve">
          <source>You should normally only add directories to @INC. If you need to delete directories from @INC take care to only delete those which you added yourself or which you are certain are not needed by other modules in your script. Other modules may have added directories which they need for correct operation.</source>
          <target state="translated">通常は @INC にディレクトリを追加するだけです。INC からディレクトリを削除する必要がある場合は、自分で追加したもの、またはスクリプト内の他のモジュールが必要としないと確信したものだけを削除するように注意してください。他のモジュールが正しく動作させるために必要なディレクトリを追加しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="693cc772a08fe2cee68cbfc24c2a6625d73c01c6" translate="yes" xml:space="preserve">
          <source>You should not depend on the internal format, all accesses must go through accessor methods. E.g. looking at $x-&amp;gt;{sign} is not a bright idea since there is no guaranty that the object in question has such a hashkey, nor is a hash underneath at all.</source>
          <target state="translated">内部形式に依存するべきではありません。すべてのアクセスは、アクセサメソッドを経由する必要があります。たとえば、$ x-&amp;gt; {sign}を見るのは良い考えではありません。問題のオブジェクトがそのようなハッシュキーを持っているという保証も、その下のハッシュもまったく保証されていないからです。</target>
        </trans-unit>
        <trans-unit id="d13d5397797f2275509831750bfac02171b7d4f3" translate="yes" xml:space="preserve">
          <source>You should not depend on the internal format, all accesses must go through accessor methods. E.g. looking at $x-&amp;gt;{sign} is not a good idea since there is no guaranty that the object in question has such a hash key, nor is a hash underneath at all.</source>
          <target state="translated">内部形式に依存するべきではありません。すべてのアクセスは、アクセサメソッドを経由する必要があります。たとえば、$ x-&amp;gt; {sign}を見るのは良い考えではありません。問題のオブジェクトがそのようなハッシュキーを持っていることや、その下のハッシュがまったく保証されていないためです。</target>
        </trans-unit>
        <trans-unit id="6e8d21cc64f2bc1e9d1ef661a62db1a121e53da8" translate="yes" xml:space="preserve">
          <source>You should not even &lt;b&gt;want&lt;/b&gt; to use</source>
          <target state="translated">あなたも使い&lt;b&gt;たく&lt;/b&gt;ない</target>
        </trans-unit>
        <trans-unit id="675338533405ed3338eef5ef4ee169f82f2ec7e6" translate="yes" xml:space="preserve">
          <source>You should not use perl's malloc if you are building with gcc. There are reports of core dumps, especially in the PDL module. The problem appears to go away under -DDEBUGGING, so it has been difficult to track down. Sun's compiler appears to be okay with or without perl's malloc. [XXX further investigation is needed here.]</source>
          <target state="translated">gccでビルドする場合はperlのmallocは使わない方がいいです。特にPDLモジュールでコアダンプが発生するという報告があります。この問題は -DDEBUGGING で解決するように見えるので、追跡するのに苦労しています。Sunのコンパイラはperlのmallocの有無に関わらず問題ないようです。ここではさらに調査が必要です。</target>
        </trans-unit>
        <trans-unit id="13af3135f590e4077444d490629ef8daddd658bc" translate="yes" xml:space="preserve">
          <source>You should note that, if it is necessary to store the SV (&lt;code&gt;name&lt;/code&gt; in the example above) which corresponds to the Perl subroutine so that it can be used later in the program, it not enough just to store a copy of the pointer to the SV. Say the code above had been like this:</source>
          <target state="translated">プログラムで後で使用できるようにPerlサブルーチンに対応するSV（上記の例では &lt;code&gt;name&lt;/code&gt; を格納する必要がある場合、ポインタへのポインタのコピーを格納するだけでは不十分であることに注意してください。 SV。上記のコードが次のようであったとしましょう：</target>
        </trans-unit>
        <trans-unit id="be707fb5b1867bc329a5a5a540fc202148f2df94" translate="yes" xml:space="preserve">
          <source>You should now build perl and test your (merged) changes one last time (ideally run the whole test suite, but failing that at least run the</source>
          <target state="translated">これでPerlをビルドして、(マージされた)変更点を最後にもう一度テストしてください(理想的にはテストスイート全体を実行しますが、それに失敗した場合は少なくとも</target>
        </trans-unit>
        <trans-unit id="b6b47aa7e3c4b13e3ddb21243f2aa9c3c7a0d993" translate="yes" xml:space="preserve">
          <source>You should now submit a Pull Request (PR) on GitHub from the new branch to blead. For more information, see the GitHub documentation at &lt;a href=&quot;https://help.github.com/en/articles/creating-a-pull-request-from-a-fork&quot;&gt;https://help.github.com/en/articles/creating-a-pull-request-from-a-fork&lt;/a&gt;.</source>
          <target state="translated">ここで、GitHubで新しいブランチからプルリクエスト（PR）を送信してbleadする必要があります。詳細については、&lt;a href=&quot;https://help.github.com/en/articles/creating-a-pull-request-from-a-fork&quot;&gt;https：&lt;/a&gt; //help.github.com/en/articles/creating-a-pull-request-from-a-forkにあるGitHubのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d554ccba9c0cacff167113e9e842dbb2b577730c" translate="yes" xml:space="preserve">
          <source>You should only need to use this option if you want the</source>
          <target state="translated">このオプションを使用する必要があるのは</target>
        </trans-unit>
        <trans-unit id="30d7be701b66af4a13ce23ca4f4637ef46685c93" translate="yes" xml:space="preserve">
          <source>You should probably be using lexical variables anyway, although the issue is the same here:</source>
          <target state="translated">ここでも問題は同じですが、どうせなら語彙変数を使うべきでしょう。</target>
        </trans-unit>
        <trans-unit id="8df19768141a29740332079971ccdd9d5ccbe578" translate="yes" xml:space="preserve">
          <source>You should really look at &lt;a href=&quot;Test2::Suite&quot;&gt;Test2::Suite&lt;/a&gt;. This package is some very basic essential tools implemented using &lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt;. This exists only so that &lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt; and other tools required by &lt;a href=&quot;Test2::Suite&quot;&gt;Test2::Suite&lt;/a&gt; can be tested. This is the package &lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt; uses to test itself.</source>
          <target state="translated">&lt;a href=&quot;Test2::Suite&quot;&gt;Test2 :: Suite&lt;/a&gt;を実際に確認する必要があります。このパッケージは、&lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt;を使用して実装された非常に基本的な必須ツールです。これは、&lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt;および&lt;a href=&quot;Test2::Suite&quot;&gt;Test2 :: Suiteに&lt;/a&gt;必要なその他のツールをテストできるようにするためにのみ存在します。これは、&lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt;がそれ自体をテストするために使用するパッケージです。</target>
        </trans-unit>
        <trans-unit id="54112594f7721aec0b526a825c8c553a794597d2" translate="yes" xml:space="preserve">
          <source>You should say</source>
          <target state="translated">と言うべきです。</target>
        </trans-unit>
        <trans-unit id="669aa98258ce9656dc2f7e8465e9a97f44e937fd" translate="yes" xml:space="preserve">
          <source>You should seldom if ever use &lt;code&gt;0644&lt;/code&gt; as argument to &lt;a href=&quot;#sysopen-FILEHANDLE%2CFILENAME%2CMODE&quot;&gt;&lt;code&gt;sysopen&lt;/code&gt;&lt;/a&gt;, because that takes away the user's option to have a more permissive umask. Better to omit it. See &lt;a href=&quot;#umask-EXPR&quot;&gt;&lt;code&gt;umask&lt;/code&gt;&lt;/a&gt; for more on this.</source>
          <target state="translated">あなたはめったに今までに使用してはならない場合は &lt;code&gt;0644&lt;/code&gt; を引数として&lt;a href=&quot;#sysopen-FILEHANDLE%2CFILENAME%2CMODE&quot;&gt; &lt;code&gt;sysopen&lt;/code&gt; で&lt;/a&gt;それはより寛大のumaskを持っているユーザーの選択肢を奪うので、。省略したほうがいいです。詳細については、&lt;a href=&quot;#umask-EXPR&quot;&gt; &lt;code&gt;umask&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5ae04df28b1ca8233ad4f14017b75003d4a4c0fc" translate="yes" xml:space="preserve">
          <source>You should seldom if ever use &lt;code&gt;0644&lt;/code&gt; as argument to &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, because that takes away the user's option to have a more permissive umask. Better to omit it. See the perlfunc(1) entry on &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; for more on this.</source>
          <target state="translated">あなたはめったに今までに使用してはならない場合は &lt;code&gt;0644&lt;/code&gt; を引数として &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; でそれはより寛大のumaskを持っているユーザーの選択肢を奪うので、。省略した方がいいです。詳細については、 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; のperlfunc（1）エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="a5da0398cef906098b3aedb900161f9013fc9dbe" translate="yes" xml:space="preserve">
          <source>You should seldom if ever use &lt;code&gt;0644&lt;/code&gt; as argument to &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, because that takes away the user's option to have a more permissive umask. Better to omit it. See the perlfunc(1) entry on &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; for more on this.</source>
          <target state="translated">あなたはめったに今までに使用してはならない場合は &lt;code&gt;0644&lt;/code&gt; を引数として &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; でそれはより寛大のumaskを持っているユーザーの選択肢を奪うので、。省略した方がいいです。詳細については、 &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; のperlfunc（1）エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="93291955e6753d9b28d9290f1f843ab314e860d1" translate="yes" xml:space="preserve">
          <source>You should take great pains to try to pass the function the type of variable it wants, when possible. It will save you a lot of trouble in the long run.</source>
          <target state="translated">可能であれば、関数が望む変数の型を関数に渡すように努力すべきです。そうすることで、長い目で見れば多くのトラブルを避けることができます。</target>
        </trans-unit>
        <trans-unit id="12e9cbf7ef859529e7aa6ad559377e6f6b1073a2" translate="yes" xml:space="preserve">
          <source>You should think long and hard about why you need everything loaded at once. It's just not a scalable solution.</source>
          <target state="translated">なぜ一度にすべてをロードする必要があるのか、じっくりと考えるべきです。それはスケーラブルなソリューションではないだけです。</target>
        </trans-unit>
        <trans-unit id="60692fdbea6181558282af5a09ad1a91226b0568" translate="yes" xml:space="preserve">
          <source>You should use</source>
          <target state="translated">を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6151ee9c13ae718ea297cb2924721c23869b50eb" translate="yes" xml:space="preserve">
          <source>You should use the &lt;b&gt;-T&lt;/b&gt; flag to enable taint checking (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;) even if we aren't running setuid or setgid. This is always a good idea for servers or any program run on behalf of someone else (like CGI scripts), because it lessens the chances that people from the outside will be able to compromise your system.</source>
          <target state="translated">setuidまたはsetgidを実行していない場合でも、&lt;b&gt;-T&lt;/b&gt;フラグを使用して汚染チェック（&lt;a href=&quot;perlsec&quot;&gt;perlsecを&lt;/a&gt;参照）を有効にする必要があります。これは、サーバーまたは他の誰かに代わって実行されるプログラム（CGIスクリプトなど）にとって常に良いアイデアです。これは、外部の人がシステムを危険にさらす可能性を減らすためです。</target>
        </trans-unit>
        <trans-unit id="c6b52a2caf001c41f2fbe0900c81a2862fac3a04" translate="yes" xml:space="preserve">
          <source>You should use this</source>
          <target state="translated">これを使うべきです。</target>
        </trans-unit>
        <trans-unit id="f980030e1ddd6415377ab007be132a7835310a08" translate="yes" xml:space="preserve">
          <source>You should use this option if you are using UTF-16 and others which linefeed is not $/.</source>
          <target state="translated">UTF-16などで改行が$/ではない場合は、このオプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="db384f65b44d08a41642068cf25462a07360e950" translate="yes" xml:space="preserve">
          <source>You should usually be able to ignore this and just use the module without thinking about deferring. However, special applications may require fine control over which writes are deferred, or may require that all writes be immediate. To disable the autodeferment feature, use</source>
          <target state="translated">通常はこれを無視して、遅延について考えずにモジュールを使用することができるはずです。しかし、特殊なアプリケーションでは、どの書き込みを延期するかを細かく制御する必要があるかもしれませんし、すべての書き込みを即時に行う必要があるかもしれません。自動保存機能を無効にするには</target>
        </trans-unit>
        <trans-unit id="962a252e8053766a043aa7e45b2c62a450a0683c" translate="yes" xml:space="preserve">
          <source>You shouldn't have to care. But you may if your Perl is before 5.14.0 or you haven't specified &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
5.012&lt;/code&gt; (or higher) because otherwise the rules for the code points in the range 128 to 255 are different depending on whether the string they are contained within is in Unicode or not. (See &lt;a href=&quot;perlunicode#When-Unicode-Does-Not-Happen&quot;&gt;When Unicode Does Not Happen in perlunicode&lt;/a&gt;.)</source>
          <target state="translated">あなたは気にする必要はありません。しかし、あなたはあなたかもしれPerlは5.14.0の前にあるか、指定しなかった場合は &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; （またはそれ以上）のためかどうか、文字列に応じて異なっている128〜255の範囲のコードポイントのためのそれ以外のルールそれらはUnicodeであるかどうかに含まれます。（&lt;a href=&quot;perlunicode#When-Unicode-Does-Not-Happen&quot;&gt;Unicodeがperlunicodeで発生しない場合を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="9aa9430e0cc51b74e3ef5d34b9f38ebd3c03a610" translate="yes" xml:space="preserve">
          <source>You shouldn't have to care. But you may if your Perl is before 5.14.0 or you haven't specified &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; or &lt;code&gt;use 5.012&lt;/code&gt; (or higher) because otherwise the rules for the code points in the range 128 to 255 are different depending on whether the string they are contained within is in Unicode or not. (See &lt;a href=&quot;perlunicode#When-Unicode-Does-Not-Happen&quot;&gt;&quot;When Unicode Does Not Happen&quot; in perlunicode&lt;/a&gt;.)</source>
          <target state="translated">気にする必要はありません。ただし、Perlが5.14.0より前であるか、 &lt;code&gt;use 5.012&lt;/code&gt; &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; 指定していないか、5.012（またはそれ以降）を使用している場合は、文字列の有無によって128〜255の範囲のコードポイントのルールが異なるためです。それらはUnicodeであるかどうかに含まれています。（&lt;a href=&quot;perlunicode#When-Unicode-Does-Not-Happen&quot;&gt;perlunicodeの「Unicodeが発生しない場合」を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="a8856a657ecb3d97a5c46abba56a556f46cc66ed" translate="yes" xml:space="preserve">
          <source>You shouldn't need to set this variable, since File::Find should now detect such file systems on-the-fly and switch itself to using stat. This works even for parts of your file system, like a mounted CD-ROM.</source>
          <target state="translated">File::Find はその場でそのようなファイルシステムを検出し、stat を使用するように切り替えるので、この変数を設定する必要はありません。これは、マウントされたCD-ROMのようなファイルシステムの一部に対しても動作します。</target>
        </trans-unit>
        <trans-unit id="07632dfd399f0ee08d2dcc1bc356caea0fb1fc3a" translate="yes" xml:space="preserve">
          <source>You shouldn't worry about what this format is, because conversion is automatically done when you decode or encode.</source>
          <target state="translated">デコードやエンコードをすると自動的に変換が行われるので、このフォーマットが何なのか気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="1bf2aae490ef3108185dddeac7ace7d36d9b8359" translate="yes" xml:space="preserve">
          <source>You specified a character that has the given plainer way of writing it, and which is also portable to platforms running with different character sets.</source>
          <target state="translated">与えられた平易な書き方を持ち、異なるキャラクターセットで動作するプラットフォームにも移植可能なキャラクターを指定したのですね。</target>
        </trans-unit>
        <trans-unit id="ba1446898cf703a433f10e50053c48b7c4bd65ea" translate="yes" xml:space="preserve">
          <source>You specify the parameters that will be passed into the XSUB on the line(s) after you declare the function's return value and name. Each input parameter line starts with optional whitespace, and may have an optional terminating semicolon.</source>
          <target state="translated">関数の戻り値と名前を宣言した後の行で、XSUBに渡されるパラメータを指定します。各入力パラメータの行は、オプションの空白で始まり、オプションのセミコロンで終わることもあります。</target>
        </trans-unit>
        <trans-unit id="5e23d741eb164f1a1d95de07ecc25c6899dd796b" translate="yes" xml:space="preserve">
          <source>You spend lots and lots of money on dedicated hardware, but this is bound to get you talked about.</source>
          <target state="translated">専用ハードにはたくさんのお金をかけているのに、これは話題になるに違いない。</target>
        </trans-unit>
        <trans-unit id="e47578a3d656799aa6fd209dfd66ed644e50edb2" translate="yes" xml:space="preserve">
          <source>You then can run the test(s) from your test suite that call &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt;. At this point the output of &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt; is safely captured by &lt;a href=&quot;tester&quot;&gt;Test::Builder::Tester&lt;/a&gt; rather than being interpreted as real test output.</source>
          <target state="translated">次に、&lt;a href=&quot;../builder&quot;&gt;Test :: Builder&lt;/a&gt;を呼び出すテストスイートからテストを実行できます。この時点で、&lt;a href=&quot;../builder&quot;&gt;Test :: Builderの&lt;/a&gt;出力は、実際のテスト出力として解釈されるのではなく、&lt;a href=&quot;tester&quot;&gt;Test :: Builder :: Tester&lt;/a&gt;によって安全にキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="27cca9133f1312a001d7fe1a85c24e4f576073c8" translate="yes" xml:space="preserve">
          <source>You then can run the test(s) from your test suite that call &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt;. At this point the output of &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; is safely captured by &lt;a href=&quot;Test::Builder::Tester&quot;&gt;Test::Builder::Tester&lt;/a&gt; rather than being interpreted as real test output.</source>
          <target state="translated">次に、&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builder&lt;/a&gt;を呼び出すテストスイートからテストを実行できます。この時点で、&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builderの&lt;/a&gt;出力は、実際のテスト出力として解釈されるのではなく、&lt;a href=&quot;Test::Builder::Tester&quot;&gt;Test :: Builder :: Tester&lt;/a&gt;によって安全にキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="677380f0fc96290216b3b386e909881a38477756" translate="yes" xml:space="preserve">
          <source>You think about that, and realize that it doesn't even work right for English, as it can produce this output:</source>
          <target state="translated">そのことを考えて、このようなアウトプットができるのだから、英語でも通用しないことに気づくのですね。</target>
        </trans-unit>
        <trans-unit id="89f392c3f60b78b930a2c99b682f5745b402f97b" translate="yes" xml:space="preserve">
          <source>You tried to use a negative time argument.</source>
          <target state="translated">否定的な時間論を使おうとしたんですね。</target>
        </trans-unit>
        <trans-unit id="d0e63499831fb2a66fb9056cf426d7e6b0b72f22" translate="yes" xml:space="preserve">
          <source>You use an old version of GNU make. See &lt;a href=&quot;#Prerequisites&quot;&gt;&quot;Prerequisites&quot;&lt;/a&gt;.</source>
          <target state="translated">古いバージョンのGNUmakeを使用します。&lt;a href=&quot;#Prerequisites&quot;&gt;「前提条件」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="215da501a4d763185822fdec5710086fea4dd9c5" translate="yes" xml:space="preserve">
          <source>You use an old version of GNU make. See &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;.</source>
          <target state="translated">古いバージョンのGNU makeを使用している。&lt;a href=&quot;#Prerequisites&quot;&gt;前提条件を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="220275358a49875c3abbea24e2340553d9cb4444" translate="yes" xml:space="preserve">
          <source>You use the &lt;code&gt;\G&lt;/code&gt; anchor to start the next match on the same string where the last match left off. The regular expression engine cannot skip over any characters to find the next match with this anchor, so &lt;code&gt;\G&lt;/code&gt; is similar to the beginning of string anchor, &lt;code&gt;^&lt;/code&gt;. The &lt;code&gt;\G&lt;/code&gt; anchor is typically used with the &lt;code&gt;g&lt;/code&gt; flag. It uses the value of &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; as the position to start the next match. As the match operator makes successive matches, it updates &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; with the position of the next character past the last match (or the first character of the next match, depending on how you like to look at it). Each string has its own &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; アンカーを使用して、最後の一致が終了した同じ文字列で次の一致を開始します。正規表現エンジンは、このアンカーとの次の一致を見つけるために文字をスキップすることはできないため、 &lt;code&gt;\G&lt;/code&gt; は文字列アンカーの先頭 &lt;code&gt;^&lt;/code&gt; に似ています。 &lt;code&gt;\G&lt;/code&gt; アンカーは、典型的には、一緒に使用され &lt;code&gt;g&lt;/code&gt; フラグ。次の一致を開始する位置として &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; の値を使用します。一致演算子は連続して一致するため、最後の一致を過ぎた次の文字の位置（または、見方によっては次の一致の最初の文字 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; の位置でpos（）を更新します。各文字列には独自の &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; 値があります。</target>
        </trans-unit>
        <trans-unit id="1e5946dcfcf3479db4ae2e5695fe6c76f97743a7" translate="yes" xml:space="preserve">
          <source>You use the &lt;code&gt;\G&lt;/code&gt; anchor to start the next match on the same string where the last match left off. The regular expression engine cannot skip over any characters to find the next match with this anchor, so &lt;code&gt;\G&lt;/code&gt; is similar to the beginning of string anchor, &lt;code&gt;^&lt;/code&gt;. The &lt;code&gt;\G&lt;/code&gt; anchor is typically used with the &lt;code&gt;g&lt;/code&gt; modifier. It uses the value of &lt;code&gt;pos()&lt;/code&gt; as the position to start the next match. As the match operator makes successive matches, it updates &lt;code&gt;pos()&lt;/code&gt; with the position of the next character past the last match (or the first character of the next match, depending on how you like to look at it). Each string has its own &lt;code&gt;pos()&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;\G&lt;/code&gt; アンカーを使用して、最後の一致が中断したのと同じ文字列で次の一致を開始します。正規表現エンジンは、このアンカーとの次の一致を見つけるために文字をスキップすることはできないため、 &lt;code&gt;\G&lt;/code&gt; は文字列アンカーの先頭に似ています &lt;code&gt;^&lt;/code&gt; 。 &lt;code&gt;\G&lt;/code&gt; アンカーは、典型的には、一緒に使用され &lt;code&gt;g&lt;/code&gt; 修飾子。次の一致を開始する位置として &lt;code&gt;pos()&lt;/code&gt; の値を使用します。一致演算子が連続して一致するとき、最後の一致を過ぎた次の文字（または、見方によっては次の一致の最初の文字 &lt;code&gt;pos()&lt;/code&gt; の位置でpos（）を更新します。各文字列には独自の &lt;code&gt;pos()&lt;/code&gt; 値があります。</target>
        </trans-unit>
        <trans-unit id="fc28690a1164ffed63384fc9d48573f0201b1c8c" translate="yes" xml:space="preserve">
          <source>You use the utime() function documented in &lt;a href=&quot;functions/utime&quot;&gt;utime&lt;/a&gt;. By way of example, here's a little program that copies the read and write times from its first argument to all the rest of them.</source>
          <target state="translated">あなたには文書化さUTIME（）関数を使用&lt;a href=&quot;functions/utime&quot;&gt;UTIMEを&lt;/a&gt;。例として、最初の引数から残りのすべての引数に読み取り時間と書き込み時間をコピーする小さなプログラムを次に示します。</target>
        </trans-unit>
        <trans-unit id="9d5d257c0d5834299b68e1d80c48e829b8bcc94a" translate="yes" xml:space="preserve">
          <source>You use the utime() function documented in &lt;a href=&quot;perlfunc#utime&quot;&gt;&quot;utime&quot; in perlfunc&lt;/a&gt;. By way of example, here's a little program that copies the read and write times from its first argument to all the rest of them.</source>
          <target state="translated">&lt;a href=&quot;perlfunc#utime&quot;&gt;perlfuncの「utime」に&lt;/a&gt;記載されているutime（）関数を使用します。例として、最初の引数から残りのすべての引数に読み取り時間と書き込み時間をコピーする小さなプログラムを次に示します。</target>
        </trans-unit>
        <trans-unit id="6636b861a3b2aa1c111b3f0b60ae946532727186" translate="yes" xml:space="preserve">
          <source>You usually can use the value of &lt;code&gt;$^X&lt;/code&gt; to re-invoke an independent copy of the same perl that is currently running, e.g.,</source>
          <target state="translated">通常、 &lt;code&gt;$^X&lt;/code&gt; 値を使用して、現在実行中の同じperlの独立したコピーを再度呼び出すことができます。たとえば、</target>
        </trans-unit>
        <trans-unit id="aa6e6cfea08fbea7a5de694a45b0570deb9eda14" translate="yes" xml:space="preserve">
          <source>You usually can't. Memory allocated to lexicals (i.e. my() variables) cannot be reclaimed or reused even if they go out of scope. It is reserved in case the variables come back into scope. Memory allocated to global variables can be reused (within your program) by using undef() and/or delete().</source>
          <target state="translated">通常はできません。レキシカル(つまりmy()変数)に割り当てられたメモリは、スコープ外に出ても再利用や再利用はできません。変数がスコープに戻ってきたときのために予約されています。グローバル変数に割り当てられたメモリは、 undef()や delete()を使用することで (プログラム内で)再利用することができます。</target>
        </trans-unit>
        <trans-unit id="654d5925759821a41f7b319f6f5acce1580b7e6a" translate="yes" xml:space="preserve">
          <source>You want to temporarily change just one element of an array or hash.</source>
          <target state="translated">配列やハッシュの1つの要素だけを一時的に変更したい場合。</target>
        </trans-unit>
        <trans-unit id="d06ad7bf53cef6bd6922e06d9d929dd05f8dbea0" translate="yes" xml:space="preserve">
          <source>You will almost certainly be better off using the &lt;code&gt;PL_FILES&lt;/code&gt; system, instead. See above, or the &lt;a href=&quot;ExtUtils::MakeMaker::FAQ&quot;&gt;ExtUtils::MakeMaker::FAQ&lt;/a&gt; entry.</source>
          <target state="translated">代わりに、 &lt;code&gt;PL_FILES&lt;/code&gt; システムを使用する方がほぼ確実に良いでしょう。上記、または&lt;a href=&quot;ExtUtils::MakeMaker::FAQ&quot;&gt;ExtUtils :: MakeMaker :: FAQ&lt;/a&gt;エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="2ba6881210a4041e425c0b40054f89e605a3c752" translate="yes" xml:space="preserve">
          <source>You will also need to be able to connect over the Internet to the public key servers, like pgp.mit.edu, and their port 11731 (the HKP protocol).</source>
          <target state="translated">また、pgp.mit.eduのような公開鍵サーバとそのポート11731(HKPプロトコル)にインターネット経由で接続できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c62030728cb5bac5bc525932491c14ac0a7adf6d" translate="yes" xml:space="preserve">
          <source>You will also need to download the &quot;Platform SDK&quot; (the &quot;Core SDK&quot; and &quot;MDAC SDK&quot; components are required) for header files, libraries and rc.exe, and &quot;.NET Framework SDK&quot; for more libraries and nmake.exe. Note that the latter (which also includes the free compiler and linker) requires the &quot;.NET Framework Redistributable&quot; to be installed first. This can be downloaded and installed separately, but is included in the &quot;Visual C++ Toolkit 2003&quot; anyway.</source>
          <target state="translated">また、ヘッダファイル、ライブラリ、rc.exe用の「Platform SDK」(「Core SDK」と「MDAC SDK」のコンポーネントが必要)と、より多くのライブラリとnmake.exe用の「.NET Framework SDK」をダウンロードする必要があります。後者(これはまた、無料のコンパイラとリンカが含まれています)は、最初にインストールする必要があることに注意してください&quot; .NET Framework Redistributable&quot;。これは別々にダウンロードしてインストールすることができますが、とにかく &quot;Visual C++Toolkit 2003 &quot;に含まれています。</target>
        </trans-unit>
        <trans-unit id="356f5d0daa70748f28cbf7166d4f341295254619" translate="yes" xml:space="preserve">
          <source>You will also need to download the &quot;Windows SDK&quot; (the &quot;Core SDK&quot; and &quot;MDAC SDK&quot; components are required) for more header files and libraries.</source>
          <target state="translated">また、より多くのヘッダファイルやライブラリを入手するためには、「Windows SDK」(「Core SDK」と「MDAC SDK」のコンポーネントが必要です)をダウンロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="a1a5cfadaa899360662110efdf3739aae4dbc6c1" translate="yes" xml:space="preserve">
          <source>You will encounter this particular error message when you have the &lt;code&gt;strict 'subs'&lt;/code&gt; pragma (or the full strict pragma) in your script. Consider this script:</source>
          <target state="translated">スクリプトに &lt;code&gt;strict 'subs'&lt;/code&gt; プラグマ（または完全なstrictプラグマ）がある場合、この特定のエラーメッセージが表示されます。次のスクリプトについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="23e29e8947be99b87040c3c4a0668f86aaf880a4" translate="yes" xml:space="preserve">
          <source>You will find brief info on &lt;code&gt;EUC-CN&lt;/code&gt;, &lt;code&gt;GBK&lt;/code&gt; and mostly on &lt;code&gt;GB 18030&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EUC-CN&lt;/code&gt; 、 &lt;code&gt;GBK&lt;/code&gt; 、および主に &lt;code&gt;GB 18030&lt;/code&gt; に関する簡単な情報があります。</target>
        </trans-unit>
        <trans-unit id="8d527eca4336857f6af5af5d0a105cad653a71a0" translate="yes" xml:space="preserve">
          <source>You will find this behavior is slightly different from that of &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&lt;code&gt;$SIG{__DIE__}&lt;/code&gt;&lt;/a&gt; handlers (which don't suppress the error text, but can instead call &lt;a href=&quot;#die-LIST&quot;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; again to change it).</source>
          <target state="translated">この動作は、&lt;a href=&quot;perlvar#%25SIG&quot;&gt; &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; &lt;/a&gt;ハンドラーの動作とは少し異なることがわかります（エラーテキストは抑制されませんが、代わりにもう一度&lt;a href=&quot;#die-LIST&quot;&gt; &lt;code&gt;die&lt;/code&gt; &lt;/a&gt;を呼び出して変更できます）。</target>
        </trans-unit>
        <trans-unit id="9ef82421bf1d6104efddfdc8565b14c0ddc86aec" translate="yes" xml:space="preserve">
          <source>You will find this behavior is slightly different from that of &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handlers (which don't suppress the error text, but can instead call &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; again to change it).</source>
          <target state="translated">この動作は &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーの動作とは少し異なります（エラーテキストは抑制されませんが、代わりにもう一度 &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を呼び出して変更できます）。</target>
        </trans-unit>
        <trans-unit id="7d85e118af6c81732006143a60990cead4fa03d5" translate="yes" xml:space="preserve">
          <source>You will find this behavior is slightly different from that of &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handlers (which don't suppress the error text, but can instead call &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; again to change it).</source>
          <target state="translated">この動作は &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーの動作とは少し異なります（エラーテキストは抑制されませんが、代わりにもう一度 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; を呼び出して変更できます）。</target>
        </trans-unit>
        <trans-unit id="c01bddfdbad27a7674a351ac148e02cb61a266a6" translate="yes" xml:space="preserve">
          <source>You will get this error message when one of the parameters in the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call is wrong. Unfortunately there are quite a few parameters to get wrong, so it can be difficult to figure out which one it is.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 呼び出しのパラメーターの1つが間違っていると、このエラーメッセージが表示されます。残念ながら、誤解を招くパラメーターがかなりあるため、どちらが適切かを判断するのは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="6f39ce5468b191fe767e35548ddecfe66b13656d" translate="yes" xml:space="preserve">
          <source>You will get this error message when one of the parameters in the &lt;code&gt;tie&lt;/code&gt; call is wrong. Unfortunately there are quite a few parameters to get wrong, so it can be difficult to figure out which one it is.</source>
          <target state="translated">&lt;code&gt;tie&lt;/code&gt; 呼び出しのパラメータの1つが間違っていると、このエラーメッセージが表示されます。残念ながら、間違えるパラメータはかなりあるので、それがどれであるかを理解するのは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="b306755ccc7dd24d9d304eb11d95322f9c7d1c36" translate="yes" xml:space="preserve">
          <source>You will have to make sure that CCTYPE is set correctly and that CCHOME points to wherever you installed your compiler.</source>
          <target state="translated">CCTYPEが正しく設定されていることと、CCHOMEがコンパイラをインストールした場所を指していることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a37a6f06ca5d5f038a38f2ddd94e62c35c0fb8e" translate="yes" xml:space="preserve">
          <source>You will have to make sure that CCTYPE is set correctly and that CCHOME points to wherever you installed your compiler. For GCC this should be the directory that contains the</source>
          <target state="translated">CCTYPEが正しく設定されていることと、CCHOMEがコンパイラをインストールした場所を指していることを確認する必要があります。GCCの場合、これは</target>
        </trans-unit>
        <trans-unit id="b8d67b6a7548006b180c9c0aa7f1777391e8e3f6" translate="yes" xml:space="preserve">
          <source>You will need a copy of Git for your computer. You can fetch a copy of the repository using the git protocol:</source>
          <target state="translated">お使いのコンピュータにGitのコピーが必要です。git プロトコルを使ってリポジトリのコピーを取得することができます。</target>
        </trans-unit>
        <trans-unit id="7a0e1442c7d674a64133a4ac5cbad0b8f84016fe" translate="yes" xml:space="preserve">
          <source>You will need perl version 5.005_03 or newer.</source>
          <target state="translated">perl のバージョン 5.005_03 以降が必要です。</target>
        </trans-unit>
        <trans-unit id="c20642cf215c3811e3976c0a074a0bc8e167607f" translate="yes" xml:space="preserve">
          <source>You will need the packages mentioned in</source>
          <target state="translated">で述べたパッケージが必要になります。</target>
        </trans-unit>
        <trans-unit id="125a7a338622da6411e41d9bf9ce7dc1495ae8ff" translate="yes" xml:space="preserve">
          <source>You will need to have Module::Signature installed, which in turn requires that you have at least one of Crypt::OpenPGP module or the command-line</source>
          <target state="translated">Module::Signature がインストールされている必要がありますが、そのためには Crypt::OpenPGP モジュールかコマンドラインの</target>
        </trans-unit>
        <trans-unit id="26225667638a5ef1fac02d60146f2f3c0e15d299" translate="yes" xml:space="preserve">
          <source>You will need to open every other filehandle on your own. Although there are many variants, the most common way to call Perl's open() function is with three arguments and one return value:</source>
          <target state="translated">他のすべてのファイルハンドルを自分で開く必要があります。多くのバリエーションがありますが、Perl の open()関数を呼び出す最も一般的な方法は、3 つの引数と 1 つの戻り値です。</target>
        </trans-unit>
        <trans-unit id="e7fe6fd13dad565a05157034d79dc2c0ed04e368" translate="yes" xml:space="preserve">
          <source>You will probably find these modifiers even more useful if you have to deal with big- or little-endian C structures. Be sure to read &lt;a href=&quot;#Packing-and-Unpacking-C-Structures&quot;&gt;&quot;Packing and Unpacking C Structures&quot;&lt;/a&gt; for more on that.</source>
          <target state="translated">ビッグエンディアンまたはリトルエンディアンのC構造体を処理する必要がある場合は、これらの修飾子がさらに役立つことがわかります。詳細については、&lt;a href=&quot;#Packing-and-Unpacking-C-Structures&quot;&gt;「C構造体のパックとアンパック」を&lt;/a&gt;必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="ced186b3bff5ac2b886750a50b53e155abe57dbc" translate="yes" xml:space="preserve">
          <source>You will probably find these modifiers even more useful if you have to deal with big- or little-endian C structures. Be sure to read &lt;a href=&quot;#Packing-and-Unpacking-C-Structures&quot;&gt;Packing and Unpacking C Structures&lt;/a&gt; for more on that.</source>
          <target state="translated">ビッグエンディアンまたはリトルエンディアンのC構造体を処理する必要がある場合は、これらの修飾子がさらに役立つはずです。詳細については、&lt;a href=&quot;#Packing-and-Unpacking-C-Structures&quot;&gt;C構造体のパックとアンパックを&lt;/a&gt;必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="299bf5b3f1c12a5c613500fd1bf200a8e448ae9f" translate="yes" xml:space="preserve">
          <source>You will see a message about errors while extracting</source>
          <target state="translated">抽出中にエラーに関するメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="5094570ece83ba87b116e497a48639d59ad16c42" translate="yes" xml:space="preserve">
          <source>You will see your commits being re-applied, and you will then be able to push safely. More information about rebasing can be found in the documentation for the git-rebase(1) command.</source>
          <target state="translated">コミットが再適用されているのがわかり、安全にプッシュできるようになります。リベースについての詳細は、git-rebase(1)コマンドのドキュメントを参照ください。</target>
        </trans-unit>
        <trans-unit id="d4ae5109d0174e4b426288bcd1b8e77508718bce" translate="yes" xml:space="preserve">
          <source>You will sometimes see older books or documentation mention &quot;blessing a reference&quot; or describe an object as a &quot;blessed reference&quot;, but this is incorrect. It isn't the reference that is blessed as an object; it's the thing the reference refers to (i.e. the referent).</source>
          <target state="translated">古い本や文書で「参照を祝福する」と書いてあったり、オブジェクトを「祝福された参照」と表現しているのを見かけることがありますが、これは正しくありません。オブジェクトとして祝福されているのは参照ではなく、参照が参照しているもの (すなわち参照元)です。</target>
        </trans-unit>
        <trans-unit id="b76bd931ca4d3ee61d00134eaf02261405743feb" translate="yes" xml:space="preserve">
          <source>You will usually get this message if you are working with UTF-8 data and want to read/write it from/to a Berkeley DB database file.</source>
          <target state="translated">UTF-8データで作業していて、バークレーDBデータベースファイルから読み書きしたい場合は、通常このメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="f3ffa4e5392f74c061811f37be769a0d8e66a909" translate="yes" xml:space="preserve">
          <source>You wonder how you'll get gettext to handle this; to accommodate the ways Arabic, Chinese, and Italian deal with numbers in just these few very simple phrases, you need to write code that will ask gettext for different queries depending on whether the numerical values in question are 1, 2, more than 2, or in some cases 0, and you still haven't figured out the problem with the different word order in Chinese.</source>
          <target state="translated">アラビア語、中国語、イタリア語の数字の扱い方に対応するためには、問題の数値が1、2、2以上、場合によっては0であるかどうかによって異なるクエリをgettextに要求するコードを書く必要があります。</target>
        </trans-unit>
        <trans-unit id="e797714a16ef1ab3d51adb0398a2351cdb2d4869" translate="yes" xml:space="preserve">
          <source>You would do</source>
          <target state="translated">あなたならできる</target>
        </trans-unit>
        <trans-unit id="6a39b437275322e4ded1326f66b7e094ff120686" translate="yes" xml:space="preserve">
          <source>You would do well to understand that the TIEARRAY and TIEHASH interfaces are mere sugar to invoke some perl method calls while using the uniform hash and array syntax. The use of this sugar imposes some overhead (typically about two to four extra opcodes per FETCH/STORE operation, in addition to the creation of all the mortal variables required to invoke the methods). This overhead will be comparatively small if the TIE methods are themselves substantial, but if they are only a few statements long, the overhead will not be insignificant.</source>
          <target state="translated">TIEARRAY と TIEHASH インターフェースは、統一されたハッシュと配列構文を使用しながら、Perl のメソッド呼び出しを呼び出すための単なる糖質であることを理解しておいた方が良いでしょう。この糖を使用することで、いくつかのオーバーヘッドが発生します(通常、メソッドを呼び出すために必要なすべての死すべき変数の生成に加えて、FETCH/STORE操作ごとに約2〜4個の余分なオペコードが発生します)。このオーバーヘッドは、TIEメソッドがそれ自体が実質的なものであれば比較的小さくなりますが、数文の長さであれば、オーバーヘッドは取るに足らないものではありません。</target>
        </trans-unit>
        <trans-unit id="d4ff63e38580a86bc4e960e615187745a0cf46e6" translate="yes" xml:space="preserve">
          <source>You would tell &lt;code&gt;Memoize&lt;/code&gt; to use this normalizer this way:</source>
          <target state="translated">このノーマライザを次のように使用するよう &lt;code&gt;Memoize&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="26052a9c2b555b8c00fe517ca714ea40b56ea28f" translate="yes" xml:space="preserve">
          <source>You would think passing files to an XS is difficult, with all the typeglobs and stuff. Well, it isn't.</source>
          <target state="translated">XSにファイルを渡すのは難しいと思うでしょう。しかし、そうではありません。</target>
        </trans-unit>
        <trans-unit id="0f48ec8747685a1be6881def5b864ffbb8151d2b" translate="yes" xml:space="preserve">
          <source>You would use the following &lt;code&gt;test&lt;/code&gt; directive:</source>
          <target state="translated">次の &lt;code&gt;test&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="8ae49780570ada5605ad7b4d5f17a41e10f03f26" translate="yes" xml:space="preserve">
          <source>You wrote something like</source>
          <target state="translated">みたいなことを書いていましたね。</target>
        </trans-unit>
        <trans-unit id="97f37569bdb5c4ba52eeb6c3306265613993e5ff" translate="yes" xml:space="preserve">
          <source>You'll also find that &lt;code&gt;foreach&lt;/code&gt; loop used to create a topicalizer and a switch:</source>
          <target state="translated">また、トポラライザーとスイッチを作成するために使用された &lt;code&gt;foreach&lt;/code&gt; ループが見つかります。</target>
        </trans-unit>
        <trans-unit id="5e9bf36ecbd53fc8e26acf6fb90205c1b5356d3c" translate="yes" xml:space="preserve">
          <source>You'll also have to choose the appropriate library directory (</source>
          <target state="translated">また、適切なライブラリディレクトリを選択する必要があります (</target>
        </trans-unit>
        <trans-unit id="d14f9a4e84e4a65a6fcadc471d3775e2d2026c66" translate="yes" xml:space="preserve">
          <source>You'll also need to add the following code to the top of the .xs file, just after the include of &quot;XSUB.h&quot;:</source>
          <target state="translated">また、.xsファイルの先頭、&quot;XSUB.h &quot;のインクルードの直後に以下のコードを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="067d0f39aaa002449de130921826b00edd6e52d4" translate="yes" xml:space="preserve">
          <source>You'll also see code that does this without a temporary variable, as in</source>
          <target state="translated">また、以下のように一時変数を使わずにこれを行うコードも見られます。</target>
        </trans-unit>
        <trans-unit id="e76c883ffb7e9e13e48b98bafcbb6fa1aa675b80" translate="yes" xml:space="preserve">
          <source>You'll be in trouble. Those should (in 99.8% of the cases) be the simpler and more direct:</source>
          <target state="translated">困ったことになります。それらは(99.8%のケースで)よりシンプルで直接的なものであるべきです。</target>
        </trans-unit>
        <trans-unit id="f885bd4b3bb53aff3bed3dec0b066248d1576a12" translate="yes" xml:space="preserve">
          <source>You'll have to catch the SIGCHLD signal, and possibly SIGPIPE too. SIGCHLD is sent when the backgrounded process finishes. SIGPIPE is sent when you write to a filehandle whose child process has closed (an untrapped SIGPIPE can cause your program to silently die). This is not an issue with &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system(&quot;cmd&amp;amp;&quot;)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SIGCHLDシグナルと、場合によってはSIGPIPEもキャッチする必要があります。SIGCHLDは、バックグラウンド処理が完了すると送信されます。SIGPIPEは、子プロセスが閉じているファイルハンドルに書き込むときに送信されます（トラップされていないSIGPIPEにより、プログラムがサイレントで終了する可能性があります）。これは &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system(&quot;cmd&amp;amp;&quot;)&lt;/a&gt;&lt;/code&gt; の問題ではありません。</target>
        </trans-unit>
        <trans-unit id="2cab58b27e2de2ea6f8506a9492db28f36b0db46" translate="yes" xml:space="preserve">
          <source>You'll have to catch the SIGCHLD signal, and possibly SIGPIPE too. SIGCHLD is sent when the backgrounded process finishes. SIGPIPE is sent when you write to a filehandle whose child process has closed (an untrapped SIGPIPE can cause your program to silently die). This is not an issue with &lt;code&gt;system(&quot;cmd&amp;amp;&quot;)&lt;/code&gt;.</source>
          <target state="translated">SIGCHLDシグナルをキャッチする必要があり、場合によってはSIGPIPEもキャッチする必要があります。バックグラウンドプロセスが終了すると、SIGCHLDが送信されます。子プロセスが閉じているファイルハンドルに書き込むと、SIGPIPEが送信されます（トラップされていないSIGPIPEを使用すると、プログラムがサイレントに停止する可能性があります）。これは &lt;code&gt;system(&quot;cmd&amp;amp;&quot;)&lt;/code&gt; の問題ではありません。</target>
        </trans-unit>
        <trans-unit id="2c26c7e5ed49de9efc0c0dba307a9def27936a34" translate="yes" xml:space="preserve">
          <source>You'll have to choose the appropriate compiler (</source>
          <target state="translated">適切なコンパイラを選択する必要があります (</target>
        </trans-unit>
        <trans-unit id="e62d384e427e6ef82a853693fc0380e3a4a6bcdd" translate="yes" xml:space="preserve">
          <source>You'll know your submission has been processed when you receive an email from our ticket tracking system. This email will give you a ticket number. Once your patch has made it to the ticket tracking system, it will also be sent to the perl5-porters@perl.org list.</source>
          <target state="translated">チケット追跡システムからメールが届くと、応募が処理されたことがわかります。このメールにはチケット番号が記載されています。あなたのパッチがチケット追跡システムに送られると、perl5-porters@perl.org リストにも送られます。</target>
        </trans-unit>
        <trans-unit id="feea2270863ca6e9573aba26122b77d4eeb6b2e7" translate="yes" xml:space="preserve">
          <source>You'll need the &lt;code&gt;nmake&lt;/code&gt; utility, available at &lt;a href=&quot;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&quot;&gt;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&lt;/a&gt; or dmake, available on CPAN. &lt;a href=&quot;http://search.cpan.org/dist/dmake/&quot;&gt;http://search.cpan.org/dist/dmake/&lt;/a&gt;</source>
          <target state="translated">CPANから入手できる&lt;a href=&quot;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&quot;&gt;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&lt;/a&gt;またはdmakeから入手できる &lt;code&gt;nmake&lt;/code&gt; ユーティリティが必要です。&lt;a href=&quot;http://search.cpan.org/dist/dmake/&quot;&gt;http://search.cpan.org/dist/dmake/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d5c934ac89d7dfe4684c6e54f3c503e7b13b2e6d" translate="yes" xml:space="preserve">
          <source>You'll need the &lt;code&gt;nmake&lt;/code&gt; utility, available at &lt;a href=&quot;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&quot;&gt;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&lt;/a&gt; or dmake, available on CPAN. &lt;a href=&quot;https://metacpan.org/release/dmake&quot;&gt;https://metacpan.org/release/dmake&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&quot;&gt;http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe&lt;/a&gt;またはCPANで入手可能なdmakeで入手可能な &lt;code&gt;nmake&lt;/code&gt; ユーティリティが必要です。&lt;a href=&quot;https://metacpan.org/release/dmake&quot;&gt;https://metacpan.org/release/dmake&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d98bbda9e4101a6a3cc3bbb0d325b9faa857f4a3" translate="yes" xml:space="preserve">
          <source>You'll want to do that in your Perl source tree so the debugger can read the source code. You should see the copyright message, followed by the prompt.</source>
          <target state="translated">デバッガがソースコードを読めるように、Perl のソースツリーでこれを行いたいと思うでしょう。copyright のメッセージが表示され、その後にプロンプトが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="43eea0417aae56c41dd79afb85423b61a36ecf9b" translate="yes" xml:space="preserve">
          <source>You're confusing the purpose of &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; and backticks (``). &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; runs a command and returns exit status information (as a 16 bit value: the low 7 bits are the signal the process died from, if any, and the high 8 bits are the actual exit value). Backticks (``) run a command and return what it sent to STDOUT.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; とバックティック（ ``）の目的を混乱させています。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; はコマンドを実行し、終了ステータス情報を返します（16ビット値：下位7ビットはプロセスが終了した場合のシグナルであり、上位8ビットは実際の終了値です）。バックティック（ ``）はコマンドを実行し、送信したものをSTDOUTに返します。</target>
        </trans-unit>
        <trans-unit id="08b0cf3cad789cb4d3af9f9bb75436a6878af698" translate="yes" xml:space="preserve">
          <source>You're confusing the purpose of &lt;code&gt;system()&lt;/code&gt; and backticks (``). &lt;code&gt;system()&lt;/code&gt; runs a command and returns exit status information (as a 16 bit value: the low 7 bits are the signal the process died from, if any, and the high 8 bits are the actual exit value). Backticks (``) run a command and return what it sent to STDOUT.</source>
          <target state="translated">&lt;code&gt;system()&lt;/code&gt; とバックティック（ ``）の目的を混乱させています。 &lt;code&gt;system()&lt;/code&gt; はコマンドを実行し、終了ステータス情報を返します（16ビット値として：下位7ビットはプロセスが停止したシグナルであり、上位8ビットは実際の終了値です）。バックティック（ ``）はコマンドを実行し、それがSTDOUTに送信したものを返します。</target>
        </trans-unit>
        <trans-unit id="4c524955aca90f8362890a62830c6184582bf776" translate="yes" xml:space="preserve">
          <source>You're encouraged to create self-tests for your module to ensure it's working as intended on the myriad platforms Perl supports; if you upload your module to CPAN, a host of testers will build your module and send you the results of the tests. Again, &lt;code&gt;module-starter&lt;/code&gt; and &lt;code&gt;h2xs&lt;/code&gt; provide a test framework which you can extend - you should do something more than just checking your module will compile. &lt;a href=&quot;Test::Simple&quot;&gt;Test::Simple&lt;/a&gt; and &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt; are good places to start when writing a test suite.</source>
          <target state="translated">モジュールのセルフテストを作成して、Perlがサポートする無数のプラットフォームで意図したとおりに機能することを確認することをお勧めします。モジュールをCPANにアップロードすると、多数のテスターがモジュールを作成し、テストの結果を送信します。繰り返しになり &lt;code&gt;module-starter&lt;/code&gt; 、module-starterと &lt;code&gt;h2xs&lt;/code&gt; は、拡張可能なテストフレームワークを提供します。モジュールがコンパイルされることを確認するだけでなく、何かを行う必要があります。&lt;a href=&quot;Test::Simple&quot;&gt;Test :: Simple&lt;/a&gt;と&lt;a href=&quot;Test::More&quot;&gt;Test :: More&lt;/a&gt;は、テストスイートを作成するときに開始するのに適した場所です。</target>
        </trans-unit>
        <trans-unit id="0067a9abf52f5d5adc52730de693ce9354a17edf" translate="yes" xml:space="preserve">
          <source>You're encouraged to create self-tests for your module to ensure it's working as intended on the myriad platforms Perl supports; if you upload your module to CPAN, a host of testers will build your module and send you the results of the tests. Again, &lt;code&gt;module-starter&lt;/code&gt; and &lt;code&gt;h2xs&lt;/code&gt; provide a test framework which you can extend - you should do something more than just checking your module will compile. &lt;a href=&quot;test/simple&quot;&gt;Test::Simple&lt;/a&gt; and &lt;a href=&quot;test/more&quot;&gt;Test::More&lt;/a&gt; are good places to start when writing a test suite.</source>
          <target state="translated">Perlがサポートする無数のプラットフォームでモジュールが意図したとおりに機能することを確認するために、モジュールのセルフテストを作成することをお勧めします。モジュールをCPANにアップロードすると、多数のテスターがモジュールを作成し、テストの結果を送信します。繰り返しますが、 &lt;code&gt;module-starter&lt;/code&gt; と &lt;code&gt;h2xs&lt;/code&gt; は、拡張可能なテストフレームワークを提供します。モジュールがコンパイルされることを確認するだけではなく、何かを行う必要があります。&lt;a href=&quot;test/simple&quot;&gt;Test :: Simple&lt;/a&gt;と&lt;a href=&quot;test/more&quot;&gt;Test :: More&lt;/a&gt;は、テストスイートを作成する際の出発点として最適です。</target>
        </trans-unit>
        <trans-unit id="1465c23d6a9abbc69d7c02001d0a261855c5206d" translate="yes" xml:space="preserve">
          <source>You're probably trying to convert a string to a number, which Perl only converts as a decimal number. When Perl converts a string to a number, it ignores leading spaces and zeroes, then assumes the rest of the digits are in base 10:</source>
          <target state="translated">おそらく、文字列を数値に変換しようとしているのでしょうが、Perl は 10 進数としてしか変換しません。Perlが文字列を数値に変換するとき、先頭のスペースとゼロを無視して、残りの桁が10進数であると仮定します。</target>
        </trans-unit>
        <trans-unit id="f32dee0623a34d25e555f7bd9fe977163f048dfb" translate="yes" xml:space="preserve">
          <source>You're still out of luck if you need to keep track of decaying protons though.</source>
          <target state="translated">でも、減衰する陽子を追跡する必要があるなら、あなたはまだ運がありません。</target>
        </trans-unit>
        <trans-unit id="4522acbd81c14b3349dda685727b4174a91c46c1" translate="yes" xml:space="preserve">
          <source>You're unlikely to ever need to construct an object of this class for yourself, but if you want to, call &lt;code&gt;Pod::Simple::PullParserEndToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt; )&lt;/code&gt;</source>
          <target state="translated">このクラスのオブジェクトを自分で作成する必要はほとんどありませんが、必要に応じて、 &lt;code&gt;Pod::Simple::PullParserEndToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt; )&lt;/code&gt; &lt;i&gt;tagname&lt;/i&gt;）を呼び出します。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="13c2c796fe95a445a68ec254f6e70e50cbdb3db7" translate="yes" xml:space="preserve">
          <source>You're unlikely to ever need to construct an object of this class for yourself, but if you want to, call &lt;code&gt;Pod::Simple::PullParserStartToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt;, &lt;i&gt;attrhash&lt;/i&gt; )&lt;/code&gt;</source>
          <target state="translated">このクラスのオブジェクトを自分で構築する必要はほとんどありませんが、必要に応じて、 &lt;code&gt;Pod::Simple::PullParserStartToken-&amp;gt;new( &lt;i&gt;tagname&lt;/i&gt;, &lt;i&gt;attrhash&lt;/i&gt; )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="63fdd43345f7726cfc85c93addac87c77eec8e6e" translate="yes" xml:space="preserve">
          <source>You're unlikely to ever need to construct an object of this class for yourself, but if you want to, call &lt;code&gt;Pod::Simple::PullParserTextToken-&amp;gt;new( &lt;i&gt;text&lt;/i&gt; )&lt;/code&gt;</source>
          <target state="translated">このクラスのオブジェクトを自分で構築する必要はほとんどありませんが、必要に応じて、 &lt;code&gt;Pod::Simple::PullParserTextToken-&amp;gt;new( &lt;i&gt;text&lt;/i&gt; )&lt;/code&gt; &lt;i&gt;text&lt;/i&gt;）を呼び出し&lt;i&gt;ます。&lt;/i&gt;&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="244e1e138ccb1ddf345dc218bc4eb88a0d9affd5" translate="yes" xml:space="preserve">
          <source>You've asked &lt;code&gt;Fatal&lt;/code&gt; to replace a subroutine, but it's not a Perl built-in, and &lt;code&gt;Fatal&lt;/code&gt; couldn't find it as a regular subroutine. It either doesn't exist or has not yet been defined.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; にサブルーチンを置き換えるように依頼しましたが、これはPerlの組み込みではなく、 &lt;code&gt;Fatal&lt;/code&gt; はそれを通常のサブルーチンとして見つけることができませんでした。存在しないか、まだ定義されていません。</target>
        </trans-unit>
        <trans-unit id="e40be2d06acbdf1af8b44d624778687fbb9e49ee" translate="yes" xml:space="preserve">
          <source>You've asked &lt;code&gt;Fatal&lt;/code&gt; to try and replace a subroutine which does not exist, or has not yet been defined.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; に、存在しない、またはまだ定義されていないサブルーチンを置き換えてみるように依頼しました。</target>
        </trans-unit>
        <trans-unit id="b50e18d238da3dcc7957f257361d12bcaab56e61" translate="yes" xml:space="preserve">
          <source>You've called &lt;code&gt;Fatal&lt;/code&gt; with an argument that doesn't look like a subroutine name, nor a switch that this version of Fatal understands.</source>
          <target state="translated">あなたは呼んでいる &lt;code&gt;Fatal&lt;/code&gt; サブルーチン名のように見えない引数、また致命的なのこのバージョンが理解できるスイッチ付き。</target>
        </trans-unit>
        <trans-unit id="a27632c5e590274b1b4e11ad85f630e87b588ea0" translate="yes" xml:space="preserve">
          <source>You've called &lt;code&gt;autodie::hints-&amp;gt;set_hints_for()&lt;/code&gt; using a subroutine reference, but that reference could not be resolved back to a subroutine name. It may be an anonymous subroutine (which can't be made autodying), or may lack a name for other reasons.</source>
          <target state="translated">あなたは呼んでいる &lt;code&gt;autodie::hints-&amp;gt;set_hints_for()&lt;/code&gt; サブルーチンのリファレンスを使用しますが、その参照は、サブルーチン名に戻って解決できませんでした。匿名のサブルーチン（自動死滅させることはできません）であるか、他の理由で名前がない可能性があります。</target>
        </trans-unit>
        <trans-unit id="dcf998c7dc1a2b4fcde7c406f8c5df0a1daf51ce" translate="yes" xml:space="preserve">
          <source>You've found a bug in &lt;code&gt;Fatal&lt;/code&gt; . Please report it using the &lt;code&gt;perlbug&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; のバグを見つけました。 &lt;code&gt;perlbug&lt;/code&gt; コマンドを使用して報告してください。</target>
        </trans-unit>
        <trans-unit id="186dc5c770148f3dd87e1d02da09c16c26a5cddd" translate="yes" xml:space="preserve">
          <source>You've found a bug in &lt;code&gt;Fatal&lt;/code&gt;. Please report it using the &lt;code&gt;perlbug&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;Fatal&lt;/code&gt; にバグが見つかりました。 &lt;code&gt;perlbug&lt;/code&gt; コマンドを使用して報告してください。</target>
        </trans-unit>
        <trans-unit id="475fb69a6a2555d09a61f2284d19f582455e0ff5" translate="yes" xml:space="preserve">
          <source>You've insisted on hints for user-subroutines, either by pre-pending a &lt;code&gt;!&lt;/code&gt; to the subroutine name itself, or earlier in the list of arguments to &lt;code&gt;autodie&lt;/code&gt; . However the subroutine in question does not have any hints available.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; を前に付けて、ユーザーサブルーチンのヒントを主張しました。サブルーチン名自体、または &lt;code&gt;autodie&lt;/code&gt; の引数リストの前の部分に追加します。ただし、問題のサブルーチンにはヒントがありません。</target>
        </trans-unit>
        <trans-unit id="f41835786752a38d494d7d5ae837f154ec2c37cb" translate="yes" xml:space="preserve">
          <source>You've insisted on hints for user-subroutines, either by pre-pending a &lt;code&gt;!&lt;/code&gt; to the subroutine name itself, or earlier in the list of arguments to &lt;code&gt;autodie&lt;/code&gt;. However the subroutine in question does not have any hints available.</source>
          <target state="translated">&lt;code&gt;!&lt;/code&gt; を前に付けることにより、ユーザーサブルーチンのヒントを主張しました。サブルーチン名自体、または &lt;code&gt;autodie&lt;/code&gt; への引数のリストの前の方に。ただし、問題のサブルーチンには利用可能なヒントがありません。</target>
        </trans-unit>
        <trans-unit id="3c13a053a1a459196298d76dc68f54350a5781eb" translate="yes" xml:space="preserve">
          <source>You've probably seen shuffling algorithms that work using splice, randomly picking another element to swap the current element with</source>
          <target state="translated">スプライスを使って動作するシャッフルアルゴリズムを見たことがあるでしょう。</target>
        </trans-unit>
        <trans-unit id="bace4fda5dfa9e604000927d0b697f692a0161ba" translate="yes" xml:space="preserve">
          <source>You've provided either a &lt;code&gt;scalar&lt;/code&gt; hint without supplying a &lt;code&gt;list&lt;/code&gt; hint, or vice-versa. You</source>
          <target state="translated">あなたはどちらか提供してきました &lt;code&gt;scalar&lt;/code&gt; 供給することなく、ヒントを &lt;code&gt;list&lt;/code&gt; ヒントを、またはその逆。君は</target>
        </trans-unit>
        <trans-unit id="4f7734dcac6827c63f3c8f78e3f70fe360dc90d8" translate="yes" xml:space="preserve">
          <source>You've tried to use &lt;code&gt;Fatal&lt;/code&gt; on a Perl built-in that can't be overridden, such as &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, which means that &lt;code&gt;Fatal&lt;/code&gt; can't help you, although some other modules might. See the &lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt; section of this documentation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; など、上書きできないPerl組み込みで &lt;code&gt;Fatal&lt;/code&gt; を使用しようとしました。これは、他の一部のモジュールがそうであっても、 &lt;code&gt;Fatal&lt;/code&gt; が役に立たないことを意味します。このドキュメントの「&lt;a href=&quot;#SEE-ALSO&quot;&gt;関連&lt;/a&gt;項目」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f898c307fef56d8fb09d91955f3edb21ee3b471f" translate="yes" xml:space="preserve">
          <source>You've tried to use &lt;code&gt;Fatal&lt;/code&gt; on a Perl built-in that can't be overridden, such as &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;system&lt;/code&gt;, which means that &lt;code&gt;Fatal&lt;/code&gt; can't help you, although some other modules might. See the &lt;a href=&quot;#SEE-ALSO&quot;&gt;&quot;SEE ALSO&quot;&lt;/a&gt; section of this documentation.</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; や &lt;code&gt;system&lt;/code&gt; など、オーバーライドできないPerlビルトインで &lt;code&gt;Fatal&lt;/code&gt; を使用しようとしました。つまり、 &lt;code&gt;Fatal&lt;/code&gt; は他のモジュールでは役立つかもしれませんが、役に立ちません。このドキュメントの&lt;a href=&quot;#SEE-ALSO&quot;&gt;「関連&lt;/a&gt;項目」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="770547bed3b38328c9ebe9f8750573476f6753ff" translate="yes" xml:space="preserve">
          <source>Young and free of legacy weight, providing a lightweight and easy to learn API. Has a growing addon ecosystem. It is best used for smaller projects and very easy to learn for beginners.</source>
          <target state="translated">若くてレガシーな重さから解放され、軽量で学習しやすいAPIを提供しています。成長しているアドオンエコシステムを持っています。小規模なプロジェクトに最適で、初心者には非常に簡単に学習できます。</target>
        </trans-unit>
        <trans-unit id="ba596fd35b1b636342c6fc7093ef0992a49f81fa" translate="yes" xml:space="preserve">
          <source>Your</source>
          <target state="translated">Your</target>
        </trans-unit>
        <trans-unit id="3c6f85b02933dd53061abea03a23ce712a1c9139" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; is most probably working just fine. It's the numbers that aren't quite what you think.</source>
          <target state="translated">あなたの &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int()&lt;/a&gt;&lt;/code&gt; はおそらくうまく機能しています。それはあなたが考えているものとはかなり違う数字です。</target>
        </trans-unit>
        <trans-unit id="319f611f50fc6a22b8fa54c955965a1d3de00bce" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;int()&lt;/code&gt; is most probably working just fine. It's the numbers that aren't quite what you think.</source>
          <target state="translated">あなたの &lt;code&gt;int()&lt;/code&gt; はおそらくうまく機能しています。それはあなたが思っているものとはまったく違う数字です。</target>
        </trans-unit>
        <trans-unit id="9533f1ccc20bdaeae76d10a75b07a721d13705b3" translate="yes" xml:space="preserve">
          <source>Your Chinese translator emails right back -- he says both of these phrases translate to the same thing in Chinese, because, in linguistic jargon, Chinese &quot;doesn't have number as a grammatical category&quot; -- whereas English does. That is, English has grammatical rules that refer to &quot;number&quot;, i.e., whether something is grammatically singular or plural; and one of these rules is the one that forces nouns to take a plural suffix (generally &quot;s&quot;) when in a plural context, as they are when they follow a number other than &quot;one&quot; (including, oddly enough, &quot;zero&quot;). Chinese has no such rules, and so has just the one phrase where English has two. But, no problem, you can have this one Chinese phrase appear as the translation for the two English phrases in the &quot;zh&quot; gettext lexicon for your program.</source>
          <target state="translated">中国語の翻訳者がすぐに返信してくれましたが、彼によると、これらのフレーズはどちらも中国語では同じ意味に翻訳されるそうです。つまり、英語には「数」、つまり文法的に単数であるか複数形であるかという文法的なルールがあり、そのルールの一つに、名詞が複数形の文脈にあるときには、「1」以外の数(奇妙なことに「ゼロ」も含む)に従うときと同じように、複数形の接尾辞(一般的には「s」)をつけなければならないというルールがあります。中国語にはそのようなルールがないので、英語には2つのフレーズがあるのに対し、中国語には1つのフレーズしかありません。しかし、問題ありません。この中国語のフレーズを、プログラムの &quot;zh&quot; gettext レキシコン内の 2 つの英語フレーズの翻訳として表示させることができます。</target>
        </trans-unit>
        <trans-unit id="02f7bdfd19e6ed7691bd6491da0df9046c99f10e" translate="yes" xml:space="preserve">
          <source>Your Italian translator emails you back and says that &quot;I searched 0 directories&quot; (a possible English output of your program) is stilted, and if you think that's fine English, that's your problem, but that</source>
          <target state="translated">あなたのイタリア語の翻訳者があなたにメールを送り返してきて、&quot;I searched 0 directories&quot; (あなたのプログラムの英語出力の可能性がある)が陳腐であると言っていますが、あなたがそれが英語で良いと思うならば、それはあなたの問題ですが</target>
        </trans-unit>
        <trans-unit id="df53f54d51a07584d7be09d83850a7da9c15786b" translate="yes" xml:space="preserve">
          <source>Your basic test. Pass if &lt;code&gt;$test&lt;/code&gt; is true, fail if $test is false. Just like Test::Simple's &lt;code&gt;ok()&lt;/code&gt; .</source>
          <target state="translated">あなたの基本的なテスト。場合パス &lt;code&gt;$test&lt;/code&gt; 真である$テストがfalseの場合、失敗します。Test :: Simpleの &lt;code&gt;ok()&lt;/code&gt; と同じように。</target>
        </trans-unit>
        <trans-unit id="13c1c0455bcc3acdf9c65a36998e43b91fb907cc" translate="yes" xml:space="preserve">
          <source>Your basic test. Pass if &lt;code&gt;$test&lt;/code&gt; is true, fail if $test is false. Just like Test::Simple's &lt;code&gt;ok()&lt;/code&gt;.</source>
          <target state="translated">あなたの基本的なテスト。場合パス &lt;code&gt;$test&lt;/code&gt; 真である$テストがfalseの場合、失敗します。Test :: Simpleの &lt;code&gt;ok()&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b237ec1c8f3c84ff91c26a3b96b070c2410531e4" translate="yes" xml:space="preserve">
          <source>Your best bet is to use the single argument form:</source>
          <target state="translated">あなたの最善の策は、単一の引数形式を使用することです。</target>
        </trans-unit>
        <trans-unit id="30a923bd50861e3e1f2796d154bd6dcc6842fa55" translate="yes" xml:space="preserve">
          <source>Your choice:</source>
          <target state="translated">あなたの選択です。</target>
        </trans-unit>
        <trans-unit id="2240cd19d3c19a8cd0a6388378dc061fa17be90f" translate="yes" xml:space="preserve">
          <source>Your commit message should describe what part of the Perl core you're changing and what you expect your patch to do.</source>
          <target state="translated">コミットメッセージには、Perl のコアのどの部分を変更するのか、そしてパッチに何を期待するのかを記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="9f522992b80d434f30bfc99a44403ac7ea5d333f" translate="yes" xml:space="preserve">
          <source>Your commit message should describe why the change you are making is important. When someone looks at your change in six months or six years, your intent should be clear.</source>
          <target state="translated">コミットメッセージでは、なぜあなたが行う変更が重要なのかを説明しなければなりません。6ヶ月後、6年後に誰かがあなたの変更を見たとき、あなたの意図は明確でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0e92f837de5ea84ed03360a4aeae41a080276983" translate="yes" xml:space="preserve">
          <source>Your current &lt;b&gt;directory&lt;/b&gt;, from which relative pathnames are interpreted by the &lt;b&gt;operating system&lt;/b&gt;. The operating system knows your current directory because you told it with a &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt;, or because you started out in the place where your parent &lt;b&gt;process&lt;/b&gt; was when you were born.</source>
          <target state="translated">相対パス名が&lt;b&gt;オペレーティングシステム&lt;/b&gt;によって解釈される現在の&lt;b&gt;ディレクトリ&lt;/b&gt;。現在のディレクトリは、 &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir&lt;/a&gt;&lt;/code&gt; を使用して指示したため、または生まれたときに親&lt;b&gt;プロセス&lt;/b&gt;があった場所から開始したため、オペレーティングシステムは知っています。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d7167b4cc4e41309435c48692bb15d1df5a48299" translate="yes" xml:space="preserve">
          <source>Your current &lt;b&gt;directory&lt;/b&gt;, from which relative pathnames are interpreted by the &lt;b&gt;operating system&lt;/b&gt;. The operating system knows your current directory because you told it with a &lt;code&gt;chdir&lt;/code&gt;, or because you started out in the place where your parent &lt;b&gt;process&lt;/b&gt; was when you were born.</source>
          <target state="translated">相対パス名が&lt;b&gt;オペレーティングシステム&lt;/b&gt;によって解釈される現在の&lt;b&gt;ディレクトリ&lt;/b&gt;。オペレーティングシステムは、 &lt;code&gt;chdir&lt;/code&gt; で指定したため、または親&lt;b&gt;プロセス&lt;/b&gt;が生まれたときの場所から開始したため、現在のディレクトリを認識しています。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d9200ca79b7b623bd2d92209c7c88d5edf0f0d25" translate="yes" xml:space="preserve">
          <source>Your custom type should then be picked up automatically by the &lt;a href=&quot;../parser&quot;&gt;TAP::Parser&lt;/a&gt;.</source>
          <target state="translated">その後、カスタムタイプは&lt;a href=&quot;../parser&quot;&gt;TAP :: Parser&lt;/a&gt;によって自動的に取得されます。</target>
        </trans-unit>
        <trans-unit id="8f096288cb046102028aee2ab90a36c8f226071a" translate="yes" xml:space="preserve">
          <source>Your custom type should then be picked up automatically by the &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt;.</source>
          <target state="translated">その後、カスタムタイプが&lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parser&lt;/a&gt;によって自動的に取得されます。</target>
        </trans-unit>
        <trans-unit id="8e7f0615cde01baf7008f00eb9c075025028921a" translate="yes" xml:space="preserve">
          <source>Your distribution &lt;b&gt;must&lt;/b&gt; have a &lt;code&gt;NAME&lt;/code&gt; .</source>
          <target state="translated">お使いのディストリビューションは、&lt;b&gt;必要があります&lt;/b&gt;持っている &lt;code&gt;NAME&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7431b6da14bc1d6fd4725aa372c076a384c899d0" translate="yes" xml:space="preserve">
          <source>Your distribution &lt;b&gt;must&lt;/b&gt; have a &lt;code&gt;NAME&lt;/code&gt;.</source>
          <target state="translated">お使いのディストリビューションは、&lt;b&gt;必要があります&lt;/b&gt;持っている &lt;code&gt;NAME&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="aae118bff15580dd943332f565267249fec4d8f3" translate="yes" xml:space="preserve">
          <source>Your entire first hard disk. Doesn't work under Windows 95. This allows you to read or write raw sectors of your hard disk and to use &lt;code&gt;DeviceIoControl&lt;/code&gt; to perform miscellaneous queries and operations to the hard disk. Writing raw sectors and certain other operations can seriously damage your files or the function of your computer.</source>
          <target state="translated">最初のハードディスク全体。Windows 95では機能しません。これにより、ハードディスクのrawセクターの読み取りまたは書き込みが可能になり、 &lt;code&gt;DeviceIoControl&lt;/code&gt; を使用してハードディスクに対してさまざまなクエリや操作を実行できます。rawセクターの書き込みやその他の特定の操作は、ファイルやコンピューターの機能に深刻なダメージを与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="f5d2eb0a183e7ffe1856bdc0a5dc547498704b0f" translate="yes" xml:space="preserve">
          <source>Your first try should probably be the &lt;a href=&quot;Text::Balanced&quot;&gt;Text::Balanced&lt;/a&gt; module, which is in the Perl standard library since Perl 5.8. It has a variety of functions to deal with tricky text. The &lt;a href=&quot;Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; module can also help by providing canned patterns you can use.</source>
          <target state="translated">最初に試すのは、おそらく&lt;a href=&quot;Text::Balanced&quot;&gt;Text :: Balanced&lt;/a&gt;モジュールです。これは、Perl5.8以降のPerl標準ライブラリにあります。トリッキーなテキストを処理するためのさまざまな機能があります。&lt;a href=&quot;Regexp::Common&quot;&gt;正規表現::一般的な&lt;/a&gt;モジュールは、あなたが使用することができます缶詰パターンを提供することでも助けることができます。</target>
        </trans-unit>
        <trans-unit id="df70fd54c497020a59006e2165eb78aadc748605" translate="yes" xml:space="preserve">
          <source>Your first try should probably be the &lt;a href=&quot;text/balanced&quot;&gt;Text::Balanced&lt;/a&gt; module, which is in the Perl standard library since Perl 5.8. It has a variety of functions to deal with tricky text. The &lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;Regexp::Common&lt;/a&gt; module can also help by providing canned patterns you can use.</source>
          <target state="translated">最初の試みは、おそらく&lt;a href=&quot;text/balanced&quot;&gt;Text :: Balanced&lt;/a&gt;モジュールであるはずです。これは、Perl 5.8以降のPerl標準ライブラリにあります。トリッキーなテキストを処理するためのさまざまな機能があります。&lt;a href=&quot;http://search.cpan.org/perldoc/Regexp::Common&quot;&gt;正規表現::一般的な&lt;/a&gt;モジュールは、あなたが使用することができます缶詰パターンを提供することでも助けることができます。</target>
        </trans-unit>
        <trans-unit id="880f6f429e2d63ef4a94f9a2206ede8287e74da3" translate="yes" xml:space="preserve">
          <source>Your interfaces should be understandable by an average Perl programmer. The following guidelines may help you judge whether your API is sufficiently straightforward:</source>
          <target state="translated">あなたのインターフェイスは、平均的なPerlプログラマーが理解できるものでなければなりません。以下のガイドラインは、あなたの API が十分にわかりやすいかどうかを判断するのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="d26baf198cb18edde520e205142e25037414abf9" translate="yes" xml:space="preserve">
          <source>Your internet domain name</source>
          <target state="translated">あなたのインターネットドメイン名</target>
        </trans-unit>
        <trans-unit id="c8e05b300242eb52ca20c1b662ee525c5256fe27" translate="yes" xml:space="preserve">
          <source>Your interpreter doesn't know how to communicate with these extensions on its own. A little glue will help. Up until now you've been calling</source>
          <target state="translated">あなたのインタープリタは、これらの拡張機能との通信方法を知らないのです。少しの接着剤があれば大丈夫です。今までは</target>
        </trans-unit>
        <trans-unit id="926b6183d26bfd81c7f17ff04a868dae347149ae" translate="yes" xml:space="preserve">
          <source>Your mileage may vary...</source>
          <target state="translated">走行距離が異なる場合があります...</target>
        </trans-unit>
        <trans-unit id="60a065094064545ff1123708e618e1b6cf8cbd1c" translate="yes" xml:space="preserve">
          <source>Your mileage will vary. If in any doubt &lt;b&gt;do not use it&lt;/b&gt;.</source>
          <target state="translated">あなたの走行距離は異なります。疑わしい場合&lt;b&gt;は使用しないでください&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="c8a47834f473426f773c0b79429bd305f3db3ac9" translate="yes" xml:space="preserve">
          <source>Your module may be object oriented (OO) or not, or it may have both kinds of interfaces available. There are pros and cons of each technique, which should be considered when you design your API.</source>
          <target state="translated">モジュールはオブジェクト指向 (OO)である場合もあれば、そうでない場合もありますし、両方の種類のインターフェイスが利用可能な場合もあります。それぞれのテクニックには長所と短所があり、APIを設計する際に考慮すべきです。</target>
        </trans-unit>
        <trans-unit id="4936a62e724ff21109fff06e820adf4197164d03" translate="yes" xml:space="preserve">
          <source>Your module should also include a README file describing the module and giving pointers to further information (website, author email).</source>
          <target state="translated">あなたのモジュールには、モジュールを記述し、詳細情報(ウェブサイト、著者の電子メール)へのポインタを提供するREADMEファイルも含める必要があります。</target>
        </trans-unit>
        <trans-unit id="290b95e5d44851668b2e9d3e7d74fdc415789c4e" translate="yes" xml:space="preserve">
          <source>Your module should have a clearly defined scope which is no longer than a single sentence. Can your module be broken down into a family of related modules?</source>
          <target state="translated">あなたのモジュールは、明確に定義された範囲を持っていなければなりませんが、それは一文以上の長さではありません。あなたのモジュールは、関連するモジュールのファミリーに分解できますか?</target>
        </trans-unit>
        <trans-unit id="8348552a40cd77a386588c2671c4e766e50a33bd" translate="yes" xml:space="preserve">
          <source>Your module should include documentation aimed at Perl developers. You should use Perl's &quot;plain old documentation&quot; (POD) for your general technical documentation, though you may wish to write additional documentation (white papers, tutorials, etc) in some other format. You need to cover the following subjects:</source>
          <target state="translated">あなたのモジュールには、Perl の開発者向けのドキュメントを含めるべきです。一般的な技術文書にはPerlの「古い文書」(POD)を使うべきですが、他の形式で追加の文書(ホワイトペーパー、チュートリアルなど)を書きたいと思うかもしれません。以下のテーマをカバーする必要があります。</target>
        </trans-unit>
        <trans-unit id="861d9c806a8066b7b2265b2640dfe765fcbec7fa" translate="yes" xml:space="preserve">
          <source>Your module should run successfully under the strict pragma and should run without generating any warnings. Your module should also handle taint-checking where appropriate, though this can cause difficulties in many cases.</source>
          <target state="translated">あなたのモジュールは厳格なプラグマの下で正常に実行され、警告を発生させることなく実行されるべきです。多くの場合、これは困難を引き起こす可能性がありますが、モジュールは適切な場合には、 汚染物質のチェックも行うべきです。</target>
        </trans-unit>
        <trans-unit id="55948057c1f1e500efb989c6858ac749bffed2dd" translate="yes" xml:space="preserve">
          <source>Your module will be part of a developer's toolkit. It will not, in itself, form the &lt;b&gt;entire&lt;/b&gt; toolkit. It's tempting to add extra features until your code is a monolithic system rather than a set of modular building blocks.</source>
          <target state="translated">モジュールは開発者のツールキットの一部になります。それ自体では&lt;b&gt;、&lt;/b&gt;ツールキット&lt;b&gt;全体を&lt;/b&gt;形成しません。コードがモジュラービルディングブロックのセットではなくモノリシックシステムになるまで、追加の機能を追加したくなります。</target>
        </trans-unit>
        <trans-unit id="ad14f196f53d1d71d675a079baed8e60dbe25d0c" translate="yes" xml:space="preserve">
          <source>Your name for distributing the package with the version number included. This is used by 'make dist' to name the resulting archive file.</source>
          <target state="translated">パッケージを配布する際に使用する名前で、バージョン番号が含まれています。これは 'make dist' が結果のアーカイブファイルに名前を付ける際に使用します。</target>
        </trans-unit>
        <trans-unit id="175b500be69da19db3c39bbbb8f52b905fefd909" translate="yes" xml:space="preserve">
          <source>Your naming should be consistent. For instance, it's better to have:</source>
          <target state="translated">ネーミングは一貫性のあるものにしましょう。例えば、あった方がいいですね。</target>
        </trans-unit>
        <trans-unit id="f42ef3040bfea4a52c4a41099b15560c160072e6" translate="yes" xml:space="preserve">
          <source>Your new toolkit</source>
          <target state="translated">新しいツールキット</target>
        </trans-unit>
        <trans-unit id="ab842b2beec604e1059561d157771750a66116bd" translate="yes" xml:space="preserve">
          <source>Your patch may be returned with requests for changes, or requests for more detailed explanations about your fix.</source>
          <target state="translated">あなたのパッチは、変更の要求や、あなたの修正についてのより詳細な説明の要求とともに返却されることがあります。</target>
        </trans-unit>
        <trans-unit id="1fe050a844b774ad50502f71e6d05cbaaefcd33b" translate="yes" xml:space="preserve">
          <source>Your programs can use the Config module to check whether threads are enabled. If your program can't run without them, you can say something like:</source>
          <target state="translated">プログラムは Config モジュールを使ってスレッドが有効になっているかどうかをチェックすることができます。もしあなたのプログラムがスレッドなしで実行できない場合は、次のように言うことができます。</target>
        </trans-unit>
        <trans-unit id="729e5a3fcb0f2511564ed50f52f86e5648feda76" translate="yes" xml:space="preserve">
          <source>Your random numbers are not that random</source>
          <target state="translated">あなたの乱数はそんなに乱数ではありません</target>
        </trans-unit>
        <trans-unit id="3998dbed349b6ee91c59e7ad32be8eef4f4d5eba" translate="yes" xml:space="preserve">
          <source>Your return address. The program will ask you to confirm its default if you don't use this option.</source>
          <target state="translated">あなたのリターンアドレスです。このオプションを使用しない場合、プログラムはデフォルトの確認を求めてきます。</target>
        </trans-unit>
        <trans-unit id="cba06454beaed255dda3071738eb1ee00c75c6c3" translate="yes" xml:space="preserve">
          <source>Your script will declare a skip with the reason why you skipped and exit immediately with a zero (success). See &lt;a href=&quot;Test::Harness&quot;&gt;Test::Harness&lt;/a&gt; for details.</source>
          <target state="translated">スクリプトは、スキップした理由とともにスキップを宣言し、ゼロ（成功）ですぐに終了します。詳細については、&lt;a href=&quot;Test::Harness&quot;&gt;Test :: Harness&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b4ef3a10fbcdb1f56987b1c90e4c788bb1481b23" translate="yes" xml:space="preserve">
          <source>Your script will declare a skip with the reason why you skipped and exit immediately with a zero (success). See &lt;a href=&quot;harness&quot;&gt;Test::Harness&lt;/a&gt; for details.</source>
          <target state="translated">スクリプトはスキップを宣言し、スキップした理由をゼロ（成功）ですぐに終了します。詳細については、&lt;a href=&quot;harness&quot;&gt;Test :: Harness&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c17c8db759a1044bdb9841bb5182137da0f0e667" translate="yes" xml:space="preserve">
          <source>Your subpattern can be just about anything, but for it to have some utility, it should match when called with either or both of a) the full name of the property value with underscores (and/or spaces in the Block property) and some things uppercase; or b) the property value in all lowercase with spaces and underscores squeezed out. For example,</source>
          <target state="translated">サブパターンは何でも構いませんが、実用性を持たせるためには、a)プロパティ値のフルネームにアンダースコア(Blockプロパティ内のスペース)と大文字のものが含まれているか、またはb)プロパティ値にスペースとアンダースコアが含まれている小文字のものが含まれているか、のどちらか、または両方を指定して呼び出されたときにマッチしなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e050859bb44c130f248bd693464de24c2fe62560" translate="yes" xml:space="preserve">
          <source>Your system documentation for &lt;a href=&quot;clock(3)&quot;&gt;&lt;code&gt;clock(3)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;clock_gettime(2)&quot;&gt;&lt;code&gt;clock_gettime(2)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;clock_getres(3)&quot;&gt;&lt;code&gt;clock_getres(3)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;clock_nanosleep(3)&quot;&gt;&lt;code&gt;clock_nanosleep(3)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;clock_settime(2)&quot;&gt;&lt;code&gt;clock_settime(2)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getitimer(2)&quot;&gt;&lt;code&gt;getitimer(2)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;gettimeofday(2)&quot;&gt;&lt;code&gt;gettimeofday(2)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;setitimer(2)&quot;&gt;&lt;code&gt;setitimer(2)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;sleep(3)&quot;&gt;&lt;code&gt;sleep(3)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stat(2)&quot;&gt;&lt;code&gt;stat(2)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;ualarm(3)&quot;&gt;&lt;code&gt;ualarm(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;clock(3)&quot;&gt; &lt;code&gt;clock(3)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;clock_gettime(2)&quot;&gt; &lt;code&gt;clock_gettime(2)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;clock_getres(3)&quot;&gt; &lt;code&gt;clock_getres(3)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;clock_nanosleep(3)&quot;&gt; &lt;code&gt;clock_nanosleep(3)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;clock_settime(2)&quot;&gt; &lt;code&gt;clock_settime(2)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;getitimer(2)&quot;&gt; &lt;code&gt;getitimer(2)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;gettimeofday(2)&quot;&gt; &lt;code&gt;gettimeofday(2)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;setitimer(2)&quot;&gt; &lt;code&gt;setitimer(2)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;sleep(3)&quot;&gt; &lt;code&gt;sleep(3)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stat(2)&quot;&gt; &lt;code&gt;stat(2)&lt;/code&gt; &lt;/a&gt;システムドキュメント（2）、&lt;a href=&quot;ualarm(3)&quot;&gt; &lt;code&gt;ualarm(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2ffadff849a0704c5040d7dc21528967305be780" translate="yes" xml:space="preserve">
          <source>Your system documentation for &lt;code&gt;clock&lt;/code&gt; , &lt;code&gt;clock_gettime&lt;/code&gt; , &lt;code&gt;clock_getres&lt;/code&gt; , &lt;code&gt;clock_nanosleep&lt;/code&gt; , &lt;code&gt;clock_settime&lt;/code&gt; , &lt;code&gt;getitimer&lt;/code&gt; , &lt;code&gt;gettimeofday&lt;/code&gt; , &lt;code&gt;setitimer&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ualarm&lt;/code&gt; .</source>
          <target state="translated">お使いのシステムのドキュメント &lt;code&gt;clock&lt;/code&gt; 、 &lt;code&gt;clock_gettime&lt;/code&gt; 、 &lt;code&gt;clock_getres&lt;/code&gt; 、 &lt;code&gt;clock_nanosleep&lt;/code&gt; 、 &lt;code&gt;clock_settime&lt;/code&gt; 、 &lt;code&gt;getitimer&lt;/code&gt; 、 &lt;code&gt;gettimeofday&lt;/code&gt; の、 &lt;code&gt;setitimer&lt;/code&gt; が、 &lt;code&gt;&lt;a href=&quot;../functions/sleep&quot;&gt;sleep&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;ualarm&lt;/code&gt; 関数。</target>
        </trans-unit>
        <trans-unit id="f45278c990de17bddc07886e62872d5705e84df2" translate="yes" xml:space="preserve">
          <source>Your system may also have man pages installed for those modules, in which case you can probably just use the man(1) command.</source>
          <target state="translated">あなたのシステムには、それらのモジュール用の man ページがインストールされているかもしれませんが、その場合は man(1)コマンドを使うことができるでしょう。</target>
        </trans-unit>
        <trans-unit id="f67311ed40fd91017f49e031b08d5e66ea348e7f" translate="yes" xml:space="preserve">
          <source>Your system may use lockfiles to control multiple access. Make sure you follow the correct protocol. Unpredictable behavior can result from multiple processes reading from one device.</source>
          <target state="translated">お使いのシステムでは、ロックファイルを使用して複数のアクセスを制御している可能性があります。正しいプロトコルに従ってください。1つのデバイスから複数のプロセスが読み込まれた場合、予測できない動作が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="69b78ca3bd9762db3a1f2fc87f8707247fab00ca" translate="yes" xml:space="preserve">
          <source>Your terminal expects ISO-8859-1 (yes/no)?</source>
          <target state="translated">お使いの端末はISO-8859-1を期待していますか?</target>
        </trans-unit>
        <trans-unit id="eb27aa8afa0df31a742a7c36ee000dde7a333d59" translate="yes" xml:space="preserve">
          <source>Your test suite additions should generally follow these guidelines (courtesy of Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;):</source>
          <target state="translated">テストスイートの追加は、一般に次のガイドラインに従う必要があります（Gursamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;提供）。</target>
        </trans-unit>
        <trans-unit id="6757bbaa3e59b9eae8d3358f1cb54cb3839ec256" translate="yes" xml:space="preserve">
          <source>Your text string will be sent using the bytes in Perl's internal format. In some cases, Perl will warn you that you're doing something wrong, with a friendly warning:</source>
          <target state="translated">あなたのテキスト文字列は、Perl の内部フォーマットのバイトを使用して送信されます。場合によっては、Perl はあなたが何か間違ったことをしていることをフレンドリーな警告で警告します。</target>
        </trans-unit>
        <trans-unit id="e6fdf4d82698552aa3b04fea17dd3738278fad63" translate="yes" xml:space="preserve">
          <source>Your version number for distributing the package. This defaults to 0.1.</source>
          <target state="translated">パッケージを配布するためのバージョン番号です。デフォルトは 0.1 です。</target>
        </trans-unit>
        <trans-unit id="6470a2f4b416b0ce03b530f9156d5bf0649ff6c9" translate="yes" xml:space="preserve">
          <source>Your version number for the .xs file of this package. This defaults to the value of the VERSION attribute.</source>
          <target state="translated">このパッケージの .xs ファイルのバージョン番号。デフォルトは VERSION 属性の値です。</target>
        </trans-unit>
        <trans-unit id="f943e56eab4587790a7d8e3702190e81dcdaf111" translate="yes" xml:space="preserve">
          <source>YourModule.pm</source>
          <target state="translated">YourModule.pm</target>
        </trans-unit>
        <trans-unit id="a032b09d002bfec745ff9618af85165922efa0c5" translate="yes" xml:space="preserve">
          <source>YourPackage.pm</source>
          <target state="translated">YourPackage.pm</target>
        </trans-unit>
        <trans-unit id="96b451942b04b66df98082b51a96fd9c21c979e6" translate="yes" xml:space="preserve">
          <source>YourPackage.xs</source>
          <target state="translated">YourPackage.xs</target>
        </trans-unit>
        <trans-unit id="3a63a963c11724e54297328f1cd01fab7cc056fb" translate="yes" xml:space="preserve">
          <source>YourProjClass-&amp;gt;fallback_language_classes()</source>
          <target state="translated">YourProjClass-&amp;gt;fallback_language_classes()</target>
        </trans-unit>
        <trans-unit id="93d7ab614acf51e6ed84bd194c23c002e0bc546a" translate="yes" xml:space="preserve">
          <source>YourProjClass-&amp;gt;fallback_languages()</source>
          <target state="translated">YourProjClass-&amp;gt;fallback_languages()</target>
        </trans-unit>
        <trans-unit id="98d44898a77a54f7718ada94977059bdfaa937a9" translate="yes" xml:space="preserve">
          <source>Yuval Kogman &amp;lt;nothingmuch@woobling.org&amp;gt;</source>
          <target state="translated">Yuval Kogman &amp;lt;nothingmuch@woobling.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="07164f28ddae965cddce1176bfcf228c5d4cba8c" translate="yes" xml:space="preserve">
          <source>Yves Orton</source>
          <target state="translated">イヴ・オートン</target>
        </trans-unit>
        <trans-unit id="cf3031c81c2a11248f63acc5b78e4d34caa6f6e1" translate="yes" xml:space="preserve">
          <source>Yves Orton suggested and helped for making &lt;code&gt;Sys::Syslog&lt;/code&gt; use the native event logger under Win32 systems.</source>
          <target state="translated">Yves Ortonは、Win32システムで &lt;code&gt;Sys::Syslog&lt;/code&gt; がネイティブイベントロガーを使用することを提案および支援しました。</target>
        </trans-unit>
        <trans-unit id="909f99a779adb66a76fc53ab56c7dd1caf35d0fd" translate="yes" xml:space="preserve">
          <source>Z</source>
          <target state="translated">Z</target>
        </trans-unit>
        <trans-unit id="d9d220ab2925c9b97a98a9d9b35059f864dbe73a" translate="yes" xml:space="preserve">
          <source>ZIP</source>
          <target state="translated">ZIP</target>
        </trans-unit>
        <trans-unit id="685e745370d7ffc08330b15ff0e898d01b1112c8" translate="yes" xml:space="preserve">
          <source>ZLIB</source>
          <target state="translated">ZLIB</target>
        </trans-unit>
        <trans-unit id="afc6c45769ec18ef9f8f79510ff88d4f56540059" translate="yes" xml:space="preserve">
          <source>Zero</source>
          <target state="translated">Zero</target>
        </trans-unit>
        <trans-unit id="acf70cc883c3ef52ca41acaeee58af2e53ac5854" translate="yes" xml:space="preserve">
          <source>Zero length \N{} in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の長さがゼロの\ N {}。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="d48ab14b512dde996fa9a15aacd833945ec5f9a6" translate="yes" xml:space="preserve">
          <source>Zero or more embedded pattern-match modifiers, to be turned on (or turned off if preceded by &lt;code&gt;&quot;-&quot;&lt;/code&gt;) for the remainder of the pattern or the remainder of the enclosing pattern group (if any).</source>
          <target state="translated">ゼロ個以上の埋め込みパターン一致修飾子。パターンの残りの部分またはそれを囲むパターングループの残りの部分（存在する場合）でオンになります（または &lt;code&gt;&quot;-&quot;&lt;/code&gt; が前に付いている場合はオフになります）。</target>
        </trans-unit>
        <trans-unit id="f655446e726aef6fcbbbc67b592301154abfb5dd" translate="yes" xml:space="preserve">
          <source>ZeroD</source>
          <target state="translated">ZeroD</target>
        </trans-unit>
        <trans-unit id="0093edc3abc07bdec91d7aaaa812118b59df0952" translate="yes" xml:space="preserve">
          <source>Zeus</source>
          <target state="translated">Zeus</target>
        </trans-unit>
        <trans-unit id="f2fd2a56c54b7c37d0d9f4b109a0de518f12a9a8" translate="yes" xml:space="preserve">
          <source>Zeus for Windows is another Win32 multi-language editor/IDE that comes with support for Perl.</source>
          <target state="translated">Zeus for Windowsは、PerlをサポートするWin32の多言語エディタ/IDEです。</target>
        </trans-unit>
        <trans-unit id="5922f5ceeff38bcfdb993efd6cfd5c472f827fa9" translate="yes" xml:space="preserve">
          <source>Zimbabwe</source>
          <target state="translated">Zimbabwe</target>
        </trans-unit>
        <trans-unit id="e1fe5d84561f30200d262fed8306805379c095f6" translate="yes" xml:space="preserve">
          <source>Zip Resources</source>
          <target state="translated">Zipリソース</target>
        </trans-unit>
        <trans-unit id="222ddf368cdba35bc5af070a0978dbd9007e77f9" translate="yes" xml:space="preserve">
          <source>Zip64</source>
          <target state="translated">Zip64</target>
        </trans-unit>
        <trans-unit id="c5b305a4c34b7027cdd20c60babbc737e1ea5ce5" translate="yes" xml:space="preserve">
          <source>Zipdetails displays information about the internal record structure of the zip file. It is not concerned with displaying any details of the compressed data stored in the zip file.</source>
          <target state="translated">Zipdetails は、zip ファイルの内部レコード構造に関する情報を表示します。ZIPファイルに格納されている圧縮データの詳細を表示することには関係ありません。</target>
        </trans-unit>
        <trans-unit id="db104e2c14625f90e76e1788e4a37b936ee652b6" translate="yes" xml:space="preserve">
          <source>Zlib Library Version Support</source>
          <target state="translated">Zlib ライブラリのバージョンサポート</target>
        </trans-unit>
        <trans-unit id="b921378e5d6ffc3afd5712a860acbd0c806b6fd7" translate="yes" xml:space="preserve">
          <source>Zlib Resources</source>
          <target state="translated">Zlib リソース</target>
        </trans-unit>
        <trans-unit id="4711f7565028433a4314c92a81925825c798cf57" translate="yes" xml:space="preserve">
          <source>Zombies</source>
          <target state="translated">Zombies</target>
        </trans-unit>
        <trans-unit id="1e5c2f367f02e47a8c160cda1cd9d91decbac441" translate="yes" xml:space="preserve">
          <source>[</source>
          <target state="translated">[</target>
        </trans-unit>
        <trans-unit id="c3eb06ad4792b7cd40a4451742b55657a2707dfb" translate="yes" xml:space="preserve">
          <source>[ Note: previous editions of the spec had &lt;code&gt;dir&lt;/code&gt; instead of &lt;code&gt;directory&lt;/code&gt; ]</source>
          <target state="translated">[注：仕様だったの以前の版 &lt;code&gt;dir&lt;/code&gt; 代わりの &lt;code&gt;directory&lt;/code&gt; ]</target>
        </trans-unit>
        <trans-unit id="a1358ca17f4fbd1e63e273da592aecdd7f2d4541" translate="yes" xml:space="preserve">
          <source>[*] http://www.unicode.org/repos/cldr/tags/latest/seed/collation/</source>
          <target state="translated">[*] http://www.unicode.org/repos/cldr/tags/latest/seed/collation/</target>
        </trans-unit>
        <trans-unit id="fd2a987f8fd28617d0641e26e1ee23e3f1c471fb" translate="yes" xml:space="preserve">
          <source>[.Foo.Bar]</source>
          <target state="translated">[.Foo.Bar]</target>
        </trans-unit>
        <trans-unit id="4b6373280a08e827a1ab5c68abe6349dceef8925" translate="yes" xml:space="preserve">
          <source>[.Lib.Auto.</source>
          <target state="translated">[.Lib.Auto.</target>
        </trans-unit>
        <trans-unit id="630f50e0cd8cffab6e0a142979fe618389586858" translate="yes" xml:space="preserve">
          <source>[.pod]</source>
          <target state="translated">[.pod]</target>
        </trans-unit>
        <trans-unit id="1184f5b8d4b6dd08709cf1513f26744167065e0d" translate="yes" xml:space="preserve">
          <source>[0]</source>
          <target state="translated">[0]</target>
        </trans-unit>
        <trans-unit id="e9310b0c165be166c43d717718981dd6c9379fbe" translate="yes" xml:space="preserve">
          <source>[10]</source>
          <target state="translated">[10]</target>
        </trans-unit>
        <trans-unit id="ead435550bed6c7728d2f8005c87a3108ae51206" translate="yes" xml:space="preserve">
          <source>[10] Perl has &lt;code&gt;\X&lt;/code&gt; and &lt;code&gt;\b{gcb}&lt;/code&gt;. Unicode has retracted their &quot;Grapheme Cluster Mode&quot;, and recently added string properties, which Perl does not yet support.</source>
          <target state="translated">[10] Perlには &lt;code&gt;\X&lt;/code&gt; と &lt;code&gt;\b{gcb}&lt;/code&gt; ます。Unicodeは「書記素クラスターモード」を撤回し、最近、Perlがまだサポートしていない文字列プロパティを追加しました。</target>
        </trans-unit>
        <trans-unit id="6431f9aef7720a5ded14cfda76812cbf19d9f7b5" translate="yes" xml:space="preserve">
          <source>[11] see &lt;a href=&quot;https://www.unicode.org/reports/tr29&quot;&gt;UAX#29 &quot;Unicode Text Segmentation&quot;&lt;/a&gt;,</source>
          <target state="translated">[11] &lt;a href=&quot;https://www.unicode.org/reports/tr29&quot;&gt;UAX＃29「Unicodeテキストセグメンテーション」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d9ee40540fe63a506ce6d36914c87bb4afea3cd2" translate="yes" xml:space="preserve">
          <source>[12] see &lt;a href=&quot;#Wildcards-in-Property-Values&quot;&gt;&quot;Wildcards in Property Values&quot;&lt;/a&gt; above.</source>
          <target state="translated">[12]上記の&lt;a href=&quot;#Wildcards-in-Property-Values&quot;&gt;「プロパティ値のワイルドカード」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="394d4974dd13620cf2e99365a3bb93bf704a4ae5" translate="yes" xml:space="preserve">
          <source>[13] Perl supports all the properties in the Unicode Character Database (UCD). It does not yet support the listed properties that come from other Unicode sources.</source>
          <target state="translated">[13] Perlは、Unicode文字データベース（UCD）のすべてのプロパティをサポートしています。他のUnicodeソースからのリストされたプロパティはまだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="88ce2d0b777027047f49d6aebdade5275a4bb399" translate="yes" xml:space="preserve">
          <source>[14] The only optional property that Perl supports is Named Sequence. None of these properties are in the UCD.</source>
          <target state="translated">[14] Perlがサポートする唯一のオプションのプロパティは、名前付きシーケンスです。これらのプロパティはいずれもUCDにはありません。</target>
        </trans-unit>
        <trans-unit id="f629ae44b7b3dcfed444d363e626edf411ec69a8" translate="yes" xml:space="preserve">
          <source>[1]</source>
          <target state="translated">[1]</target>
        </trans-unit>
        <trans-unit id="0cf7207af93f70e6c641ba1e90b8e15f86916573" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;http://en.wikipedia.org/wiki/Base64#URL_applications&quot;&gt;http://en.wikipedia.org/wiki/Base64#URL_applications&lt;/a&gt;</source>
          <target state="translated">[1] &lt;a href=&quot;http://en.wikipedia.org/wiki/Base64#URL_applications&quot;&gt;http://en.wikipedia.org/wiki/Base64#URL_applications&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d6819c355b216edc67b6c6a8c6dab5509cee1376" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;http://perl.plover.com/Rx/paper/&quot;&gt;http://perl.plover.com/Rx/paper/&lt;/a&gt;</source>
          <target state="translated">[1] &lt;a href=&quot;http://perl.plover.com/Rx/paper/&quot;&gt;http://perl.plover.com/Rx/paper/&lt;/a&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
