<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="09e18333d92450e41ab304a7813502d7248c06a7" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; will</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;IO::Uncompress::Gunzip&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="09e2116155b494da50686ee8fd22c6f8af75259f" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;List::Util&lt;/code&gt; does not export any subroutines.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;List::Util&lt;/code&gt; はサブルーチンをエクスポートしません。</target>
        </trans-unit>
        <trans-unit id="5c8967b9c380cc8af7979a94b2f6e12071d5756c" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;Scalar::Util&lt;/code&gt; does not export any subroutines.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Scalar::Util&lt;/code&gt; はサブルーチンをエクスポートしません。</target>
        </trans-unit>
        <trans-unit id="6a85c45889f6bd96a07b3072c70fdac86872c8e7" translate="yes" xml:space="preserve">
          <source>By default CPAN Meta specification &lt;code&gt;1.4&lt;/code&gt; is used. In order to use CPAN Meta specification &lt;code&gt;2.0&lt;/code&gt; , indicate with &lt;code&gt;meta-spec&lt;/code&gt; the version you want to use.</source>
          <target state="translated">デフォルトでは、CPANメタ仕様 &lt;code&gt;1.4&lt;/code&gt; が使用されます。CPAN Meta仕様 &lt;code&gt;2.0&lt;/code&gt; を使用するには、使用するバージョンを &lt;code&gt;meta-spec&lt;/code&gt; で示します。</target>
        </trans-unit>
        <trans-unit id="ec5e42a7b49114e39a5cf2d863170e1a8e680a55" translate="yes" xml:space="preserve">
          <source>By default CPAN Meta specification &lt;code&gt;1.4&lt;/code&gt; is used. In order to use CPAN Meta specification &lt;code&gt;2.0&lt;/code&gt;, indicate with &lt;code&gt;meta-spec&lt;/code&gt; the version you want to use.</source>
          <target state="translated">デフォルトでは、CPANメタ仕様 &lt;code&gt;1.4&lt;/code&gt; が使用されます。CPANメタ仕様を使用するためには &lt;code&gt;2.0&lt;/code&gt; を、と示す &lt;code&gt;meta-spec&lt;/code&gt; 使用したいバージョン。</target>
        </trans-unit>
        <trans-unit id="8a4b99182796026a411ed2b60fe38baf518d32a5" translate="yes" xml:space="preserve">
          <source>By default Perl assumes your source code is written in an 8-bit ASCII superset. To embed Unicode characters in your strings and regexes, you can use the &lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt;&lt;code&gt;\x{HH}&lt;/code&gt; or (more portably) &lt;code&gt;\N{U+HH}&lt;/code&gt; notations&lt;/a&gt;. You can also use the &lt;a href=&quot;utf8&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt; pragma and write your code in UTF-8, which lets you use Unicode characters directly (not just in quoted constructs but also in identifiers).</source>
          <target state="translated">デフォルトでは、Perlはソースコードが8ビットASCIIスーパーセットで記述されていることを前提としています。文字列と正規表現にUnicode文字を埋め込むには、&lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt; &lt;code&gt;\x{HH}&lt;/code&gt; または（より移植性の高い） &lt;code&gt;\N{U+HH}&lt;/code&gt; 表記を使用でき&lt;/a&gt;ます。&lt;a href=&quot;utf8&quot;&gt; &lt;code&gt;utf8&lt;/code&gt; &lt;/a&gt;プラグマを使用して、コードをUTF-8で記述することもできます。これにより、Unicode文字を直接使用できます（引用符で囲まれた構造だけでなく、識別子でも使用できます）。</target>
        </trans-unit>
        <trans-unit id="8bc161a96f1f3872cf0bfff0e6212dcccea74651" translate="yes" xml:space="preserve">
          <source>By default Perl does not use the &lt;code&gt;malloc()&lt;/code&gt; included with the Perl source, because it was slower and not entirely thread-safe. If you want to force Perl to build with the old -Dusemymalloc define this.</source>
          <target state="translated">デフォルトでは、Perlソースに含まれている &lt;code&gt;malloc()&lt;/code&gt; を使用しません。低速であり、完全にスレッドセーフではないためです。Perlに古い-Dusemymallocを使用してビルドさせる場合は、これを定義します。</target>
        </trans-unit>
        <trans-unit id="1261dc25c0b95e8495b666b1c3497fb4bd944f86" translate="yes" xml:space="preserve">
          <source>By default Perl uses 64 bit integers. If you want to use smaller 32 bit integers, define this symbol.</source>
          <target state="translated">デフォルトでは、Perl は 64 ビットの整数を使用します。より小さい32ビットの整数を使いたい場合は、このシンボルを定義してください。</target>
        </trans-unit>
        <trans-unit id="2b8741f41b3847fc8e6d6ed4c668a3b8923660d9" translate="yes" xml:space="preserve">
          <source>By default Pod::Simple::HTML adds a dummy anchor at the top of the HTML. You can change it by calling</source>
          <target state="translated">デフォルトでは、Pod::Simple::HTMLはHTMLの先頭にダミーのアンカーを追加します。これを変更するには</target>
        </trans-unit>
        <trans-unit id="85488345da8d50d7c72f406a26800d51eab1277e" translate="yes" xml:space="preserve">
          <source>By default an instance of &lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2::Formatter::TAP&lt;/a&gt; is created and used.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;Test2::Formatter::TAP&quot;&gt;Test2 :: Formatter :: TAPの&lt;/a&gt;インスタンスが作成されて使用されます。</target>
        </trans-unit>
        <trans-unit id="63d675d5fb6fc8fe769b7759c86a5571aae789b8" translate="yes" xml:space="preserve">
          <source>By default floating point numbers substituted inside strings use the dot (&quot;.&quot;) as the decimal separator. If &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect, and POSIX::setlocale() has been called, the character used for the decimal separator is affected by the LC_NUMERIC locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、文字列内で置換された浮動小数点数は小数点（ &quot;。&quot;）を小数点として使用します。場合は &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 有効である、とPOSIX ::のsetlocale（）が呼び出された、小数の区切り文字に使用する文字はLC_NUMERICロケールの影響を受けています。&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;と&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c28be1fa0adbeea2fa914132ae148c766307022e" translate="yes" xml:space="preserve">
          <source>By default floating point numbers substituted inside strings use the dot (&quot;.&quot;) as the decimal separator. If &lt;code&gt;use locale&lt;/code&gt; is in effect, and POSIX::setlocale() has been called, the character used for the decimal separator is affected by the LC_NUMERIC locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、文字列内で置き換えられる浮動小数点数は、小数点記号としてドット（ &quot;。&quot;）を使用します。場合は &lt;code&gt;use locale&lt;/code&gt; が有効である、とPOSIX ::のsetlocale（）が呼び出された、小数の区切り文字に使用する文字はLC_NUMERICロケールの影響を受けています。&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;および&lt;a href=&quot;posix&quot;&gt;POSIXを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dadc258ff54a1a05b69b778084fc2dfc7494a970" translate="yes" xml:space="preserve">
          <source>By default it does nothing.</source>
          <target state="translated">デフォルトでは何もしません。</target>
        </trans-unit>
        <trans-unit id="4033d9fb012c9ab68d72ab1a3b85a5a59eb68724" translate="yes" xml:space="preserve">
          <source>By default it just prints the stubs, but you can set the global $Devel::SelfStubber::JUST_STUBS to 0 and it will print out the entire module with the stubs positioned correctly.</source>
          <target state="translated">デフォルトではスタブを表示するだけですが、グローバルな $Devel::SelfStubber::JUST_STUBS を 0 に設定すると、スタブを正しく配置してモジュール全体を表示します。</target>
        </trans-unit>
        <trans-unit id="f3cfe07b0874e5c860a9ad1e8fd1566639cad34f" translate="yes" xml:space="preserve">
          <source>By default it writes to &lt;code&gt;cwd()&lt;/code&gt; , but you can override that by specifying the &lt;code&gt;to&lt;/code&gt; argument:</source>
          <target state="translated">デフォルトでは &lt;code&gt;cwd()&lt;/code&gt; に書き込みますが、 &lt;code&gt;to&lt;/code&gt; 引数を指定することで上書きできます：</target>
        </trans-unit>
        <trans-unit id="134aa142740eea63e3f7d4209036922ec9993924" translate="yes" xml:space="preserve">
          <source>By default it writes to &lt;code&gt;cwd()&lt;/code&gt;, but you can override that by specifying the &lt;code&gt;to&lt;/code&gt; argument:</source>
          <target state="translated">デフォルトでは &lt;code&gt;cwd()&lt;/code&gt; に書き込みますが、 &lt;code&gt;to&lt;/code&gt; 引数を指定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="15f383cfebdc1979faf03798a39be5be086b2b22" translate="yes" xml:space="preserve">
          <source>By default listeners are not inherited by child hubs. That means if you start a subtest, the subtest will not inherit the listener. You can change this behavior with the &lt;code&gt;inherit&lt;/code&gt; parameter:</source>
          <target state="translated">デフォルトでは、リスナーは子ハブに継承されません。つまり、サブテストを開始した場合、サブテストはリスナーを継承しません。この動作は、 &lt;code&gt;inherit&lt;/code&gt; パラメーターを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="27c6146d97f6523b1856790ae4b8a285b8e3db7e" translate="yes" xml:space="preserve">
          <source>By default no Unix2 extra field is created.</source>
          <target state="translated">デフォルトではUnix2の追加フィールドは作成されません。</target>
        </trans-unit>
        <trans-unit id="0ab606593d4a9d45e75e4256f15600160e7bc2fa" translate="yes" xml:space="preserve">
          <source>By default no UnixN extra field is created.</source>
          <target state="translated">デフォルトではUnixNの追加フィールドは作成されません。</target>
        </trans-unit>
        <trans-unit id="ee18fc042b3c569119417a51774089c404eb248f" translate="yes" xml:space="preserve">
          <source>By default no extended time field is created.</source>
          <target state="translated">デフォルトでは、拡張時間フィールドは作成されません。</target>
        </trans-unit>
        <trans-unit id="ebb685a0031880a3b5e0df98008f367fed554c4e" translate="yes" xml:space="preserve">
          <source>By default no opmask is in effect and any code can be compiled.</source>
          <target state="translated">デフォルトでは opmask は有効ではなく、任意のコードをコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="c2a6e64907872a01e02add6a8ea23d69c4a6e77e" translate="yes" xml:space="preserve">
          <source>By default only the &lt;code&gt;langinfo()&lt;/code&gt; function is exported.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;langinfo()&lt;/code&gt; 関数のみがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="05fbe13f9e04e93defd0bc70b90e12a9f8b88b6a" translate="yes" xml:space="preserve">
          <source>By default the &lt;a href=&quot;TAP::Parser::SourceHandler::Executable&quot;&gt;TAP::Parser::SourceHandler::Executable&lt;/a&gt; class will create a &lt;a href=&quot;TAP::Parser::Iterator::Process&quot;&gt;TAP::Parser::Iterator::Process&lt;/a&gt; object to handle the source. This passes the array reference strings as command arguments to &lt;a href=&quot;IPC::Open3&quot;&gt;IPC::Open3::open3&lt;/a&gt;:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;TAP::Parser::SourceHandler::Executable&quot;&gt;TAP :: Parser :: SourceHandler :: Executable&lt;/a&gt;クラスはソースを処理するための&lt;a href=&quot;TAP::Parser::Iterator::Process&quot;&gt;TAP :: Parser :: Iterator :: Process&lt;/a&gt;オブジェクトを作成します。これにより、配列参照文字列がコマンド引数として&lt;a href=&quot;IPC::Open3&quot;&gt;IPC :: Open3 :: open3&lt;/a&gt;：に渡されます。</target>
        </trans-unit>
        <trans-unit id="d98ec28c38227dc5b1c1a5373143946764c67c67" translate="yes" xml:space="preserve">
          <source>By default the &lt;a href=&quot;parser/sourcehandler/executable&quot;&gt;TAP::Parser::SourceHandler::Executable&lt;/a&gt; class will create a &lt;a href=&quot;parser/iterator/process&quot;&gt;TAP::Parser::Iterator::Process&lt;/a&gt; object to handle the source. This passes the array reference strings as command arguments to &lt;a href=&quot;../ipc/open3&quot;&gt;IPC::Open3::open3&lt;/a&gt;:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;parser/sourcehandler/executable&quot;&gt;TAP :: Parser :: SourceHandler :: Executable&lt;/a&gt;クラスは、ソースを処理する&lt;a href=&quot;parser/iterator/process&quot;&gt;TAP :: Parser :: Iterator :: Process&lt;/a&gt;オブジェクトを作成します。これにより、配列参照文字列がコマンド引数として&lt;a href=&quot;../ipc/open3&quot;&gt;IPC :: Open3 :: open3に渡され&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a48220280114a78503f2a2001b0a32eddecb9d87" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;flush_type&lt;/code&gt; used is &lt;code&gt;Z_FINISH&lt;/code&gt; . Other valid values for &lt;code&gt;flush_type&lt;/code&gt; are &lt;code&gt;Z_NO_FLUSH&lt;/code&gt; , &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt; , &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; and &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; . It is strongly recommended that you only set the &lt;code&gt;flush_type&lt;/code&gt; parameter if you fully understand the implications of what it does. See the &lt;code&gt;zlib&lt;/code&gt; documentation for details.</source>
          <target state="translated">デフォルトでは &lt;code&gt;flush_type&lt;/code&gt; 使用です &lt;code&gt;Z_FINISH&lt;/code&gt; 。 &lt;code&gt;flush_type&lt;/code&gt; の他の有効な値は、 &lt;code&gt;Z_NO_FLUSH&lt;/code&gt; 、 &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt; 、 &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; および &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; です。内容の影響を完全に理解している場合にのみ、 &lt;code&gt;flush_type&lt;/code&gt; パラメータを設定することを強くお勧めします。詳細については、 &lt;code&gt;zlib&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="61c7b1cbe3af3e79bbf82957644e90bd2966ab80" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;flush_type&lt;/code&gt; used is &lt;code&gt;Z_FINISH&lt;/code&gt;. Other valid values for &lt;code&gt;flush_type&lt;/code&gt; are &lt;code&gt;Z_NO_FLUSH&lt;/code&gt;, &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt;, &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; and &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt;. It is strongly recommended that you only set the &lt;code&gt;flush_type&lt;/code&gt; parameter if you fully understand the implications of what it does. See the &lt;code&gt;zlib&lt;/code&gt; documentation for details.</source>
          <target state="translated">デフォルトでは &lt;code&gt;flush_type&lt;/code&gt; 使用です &lt;code&gt;Z_FINISH&lt;/code&gt; 。以下のための他の有効な値 &lt;code&gt;flush_type&lt;/code&gt; はあり &lt;code&gt;Z_NO_FLUSH&lt;/code&gt; 、 &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt; 、 &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; と &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; 。 &lt;code&gt;flush_type&lt;/code&gt; パラメーターは、その機能の意味を完全に理解している場合にのみ設定することを強くお勧めします。詳細については、 &lt;code&gt;zlib&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="13a328506dc208738ad9d028668747611624fc18" translate="yes" xml:space="preserve">
          <source>By default the Makefile produced includes all the static extensions in the perl library. (Purified versions of library files, e.g., DynaLoader_pure_p1_c0_032.a are automatically ignored to avoid link errors.)</source>
          <target state="translated">デフォルトでは、生成されるMakefileにはPerlライブラリの静的拡張子がすべて含まれています。(DynaLoader_pure_p1_c0_032.aなどのライブラリファイルの精製版は、リンクエラーを避けるために自動的に無視されます)。</target>
        </trans-unit>
        <trans-unit id="72406ce9b9b1b9e64fd6ddb212ef0d9f15de7828" translate="yes" xml:space="preserve">
          <source>By default the debugger is called using &lt;code&gt;-d&lt;/code&gt; option to perl. If you want to specify some other option, set the &lt;code&gt;TESTDB_SW&lt;/code&gt; variable:</source>
          <target state="translated">デフォルトでは、デバッガーはperlに &lt;code&gt;-d&lt;/code&gt; オプションを使用して呼び出されます。他のオプションを指定する場合は、 &lt;code&gt;TESTDB_SW&lt;/code&gt; 変数を設定します。</target>
        </trans-unit>
        <trans-unit id="b2356cae1189c23be90e67a7d45b9477ad72051f" translate="yes" xml:space="preserve">
          <source>By default the directory is deleted when the object goes out of scope.</source>
          <target state="translated">デフォルトでは、オブジェクトがスコープ外になるとディレクトリは削除されます。</target>
        </trans-unit>
        <trans-unit id="cbf770fbcc502baf26e331b84104d6aaf9126f59" translate="yes" xml:space="preserve">
          <source>By default the layers from the input side of the filehandle are returned; to get the output side, use the optional &lt;code&gt;output&lt;/code&gt; argument:</source>
          <target state="translated">デフォルトでは、ファイルハンドルの入力側のレイヤーが返されます。出力側を取得するには、オプションの &lt;code&gt;output&lt;/code&gt; 引数を使用します。</target>
        </trans-unit>
        <trans-unit id="c002101ab1a0ef760a6cd97c38ea179cd0ee30e5" translate="yes" xml:space="preserve">
          <source>By default this hash is only filled with the environment variables out of %ENV that start with &lt;code&gt;PERL&lt;/code&gt;, but you can pass the &lt;code&gt;env&lt;/code&gt; option to myconfig to get more</source>
          <target state="translated">デフォルトでは、このハッシュは &lt;code&gt;PERL&lt;/code&gt; で始まる％ENVの環境変数のみで埋められますが、 &lt;code&gt;env&lt;/code&gt; オプションをmyconfigに渡してさらに取得することができます</target>
        </trans-unit>
        <trans-unit id="29f25f3b77d3062c86a659cbc91ff07ea769bf59" translate="yes" xml:space="preserve">
          <source>By default this will include *.pm and *.pl and the files found in the PMLIBDIRS directories. Defining PM in the Makefile.PL will override PMLIBDIRS.</source>
          <target state="translated">デフォルトでは *.pm と *.pl、そして PMLIBDIRS ディレクトリにあるファイルが含まれます。Makefile.PL で PM を定義すると、PMLIBDIRS をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1c14ce64b17e700de893a0b00ad2e97e494dcfd4" translate="yes" xml:space="preserve">
          <source>By default verbose output is generated, setting the PERL_INSTALL_QUIET environment variable will silence this output.</source>
          <target state="translated">デフォルトでは冗長な出力が生成され、環境変数PERL_INSTALL_QUIETを設定すると、この出力は消されます。</target>
        </trans-unit>
        <trans-unit id="4e63e74d2a508a1a33c3e1bb5754226ab9609082" translate="yes" xml:space="preserve">
          <source>By default your system's F_* and O_* constants (eg, F_DUPFD and O_CREAT) and the FD_CLOEXEC constant are exported into your namespace.</source>
          <target state="translated">デフォルトでは、システムの F_*と O_*定数 (例:F_DUPFD と O_CREAT)と FD_CLOEXEC 定数は名前空間にエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d7781baa84d2aa71913f24b53d017427c0b16792" translate="yes" xml:space="preserve">
          <source>By default zipdetails will output the details of the zip file in three columns.</source>
          <target state="translated">デフォルトでは、zipdetailsはzipファイルの詳細を3つの列で出力します。</target>
        </trans-unit>
        <trans-unit id="b44b2a95f6381a248195f00274a8435d100aaa35" translate="yes" xml:space="preserve">
          <source>By default,</source>
          <target state="translated">デフォルトでは</target>
        </trans-unit>
        <trans-unit id="6d88a1aadef2616cc309d3135c3c0ad225e5d689" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../../cpan/meta/yaml&quot;&gt;CPAN::Meta::YAML&lt;/a&gt; will be used for deserializing YAML data. If the &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; environment variable is defined, then it is interpreted as a module to use for deserialization. The given module must be installed, must load correctly and must implement the &lt;code&gt;Load()&lt;/code&gt; function or an exception will be thrown.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../../cpan/meta/yaml&quot;&gt;CPAN :: Meta :: YAML&lt;/a&gt;はYAMLデータのデシリアライズに使用されます。場合 &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; の環境変数が定義され、それはデシリアライズするために使用するモジュールとして解釈されます。指定されたモジュールがインストールされ、正しく &lt;code&gt;Load()&lt;/code&gt; され、Load（）関数を実装する必要があります。そうしないと、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="a9ce14085141d2bedbc81e908e7a8dd19fcc292a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../../json/pp&quot;&gt;JSON::PP&lt;/a&gt; will be used for deserializing JSON data. If the &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; environment variable exists, is true and is not &quot;JSON::PP&quot;, then the &lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSON&lt;/a&gt; module (version 2.5 or greater) will be loaded and used to interpret &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; . If &lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSON&lt;/a&gt; is not installed or is too old, an exception will be thrown.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../../json/pp&quot;&gt;JSON :: PP&lt;/a&gt;はJSONデータのデシリアライズに使用されます。場合 &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; の環境変数が存在し、真であり、「JSON :: PP」ではない場合、&lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSONの&lt;/a&gt;モジュール（バージョン2.5以上）をロードし、解釈するために使用される &lt;code&gt;PERL_JSON_BACKEND&lt;/code&gt; を。場合は&lt;a href=&quot;http://search.cpan.org/perldoc/JSON&quot;&gt;JSONが&lt;/a&gt;インストールまたは古すぎるされていない、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="babd48f1acbcf2cefafda1f4e072d38c1d9be88a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;CPAN::Meta::YAML&quot;&gt;CPAN::Meta::YAML&lt;/a&gt; will be used for deserializing YAML data. If the &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; environment variable is defined, then it is interpreted as a module to use for deserialization. The given module must be installed, must load correctly and must implement the &lt;code&gt;Load()&lt;/code&gt; function or an exception will be thrown.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;CPAN::Meta::YAML&quot;&gt;CPAN :: Meta :: YAML&lt;/a&gt;がYAMLデータの逆シリアル化に使用されます。場合 &lt;code&gt;PERL_YAML_BACKEND&lt;/code&gt; の環境変数が定義され、それはデシリアライズするために使用するモジュールとして解釈されます。指定されたモジュールをインストールし、正しくロードし、 &lt;code&gt;Load()&lt;/code&gt; 関数を実装する必要があります。そうしないと、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="91507ffd77a8c68ad696f119dae98dd6eab9b326" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;Email::Sender::Simple&quot;&gt;Email::Sender::Simple&lt;/a&gt; (the &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;send_or_die&lt;/code&gt; methods use this under the hood) will try &lt;code&gt;sendmail&lt;/code&gt; first, if it exists in your $PATH. This generally isn't the case. If there's a remote mail server you use to send mail, consider investigating one of the Transport classes. At time of writing, the available transports include:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;Email::Sender::Simple&quot;&gt;メール送信者:: :: Simpleは&lt;/a&gt;（ &lt;code&gt;send&lt;/code&gt; と &lt;code&gt;send_or_die&lt;/code&gt; しようとする方法は、ボンネットの下にこれを使用） &lt;code&gt;sendmail&lt;/code&gt; それはあなたの$ PATHに存在する場合、最初に。これは一般的には当てはまりません。メールの送信に使用するリモートメールサーバーがある場合は、Transportクラスの1つを調査することを検討してください。執筆時点で、利用可能なトランスポートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="951a27293b21723e13facff91a05ad645f4b8b59" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt; will be used for deserializing JSON data. If the &lt;code&gt;CPAN_META_JSON_BACKEND&lt;/code&gt; environment variable exists, this is expected to be the name of a loadable module that provides the &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; API, since downstream code expects to be able to call &lt;code&gt;new&lt;/code&gt; on this class. As such, while &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt;, &lt;a href=&quot;JSON::XS&quot;&gt;JSON::XS&lt;/a&gt;, &lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel::JSON::XS&lt;/a&gt; and &lt;a href=&quot;JSON::MaybeXS&quot;&gt;JSON::MaybeXS&lt;/a&gt; will work for this, to use &lt;a href=&quot;Mojo::JSON&quot;&gt;Mojo::JSON&lt;/a&gt; or &lt;a href=&quot;JSON::Tiny&quot;&gt;JSON::Tiny&lt;/a&gt; for decoding requires setting &lt;a href=&quot;#CPAN_META_JSON_DECODER&quot;&gt;&quot;CPAN_META_JSON_DECODER&quot;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;JSON::PP&quot;&gt;JSON :: PP&lt;/a&gt;がJSONデータの逆シリアル化に使用されます。場合 &lt;code&gt;CPAN_META_JSON_BACKEND&lt;/code&gt; の環境変数が存在して、これを提供してロード可能なモジュールの名前であることが予想される&lt;a href=&quot;json&quot;&gt;JSONの&lt;/a&gt;下流コードが呼び出すことができることを期待しているため、APIを &lt;code&gt;new&lt;/code&gt; このクラスに。そのため、&lt;a href=&quot;JSON::PP&quot;&gt;JSON :: PP&lt;/a&gt;、&lt;a href=&quot;JSON::XS&quot;&gt;JSON :: XS&lt;/a&gt;、&lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel :: JSON :: XS&lt;/a&gt;、&lt;a href=&quot;JSON::MaybeXS&quot;&gt;JSON :: MaybeXS&lt;/a&gt;はこれで機能しますが、&lt;a href=&quot;Mojo::JSON&quot;&gt;Mojo :: JSON&lt;/a&gt;または&lt;a href=&quot;JSON::Tiny&quot;&gt;JSON :: Tiny&lt;/a&gt;をデコードに使用するには、&lt;a href=&quot;#CPAN_META_JSON_DECODER&quot;&gt;「CPAN_META_JSON_DECODER」を&lt;/a&gt;設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="fd2cca244c4dee51baa96e422675f44c6c00f8ee" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt; will be used for deserializing JSON data. If the &lt;code&gt;CPAN_META_JSON_DECODER&lt;/code&gt; environment variable exists, this is expected to be the name of a loadable module that provides a &lt;code&gt;decode_json&lt;/code&gt; subroutine, which will then be used for deserialization. Relying only on the existence of said subroutine allows for maximum compatibility, since this API is provided by all of &lt;a href=&quot;JSON::PP&quot;&gt;JSON::PP&lt;/a&gt;, &lt;a href=&quot;JSON::XS&quot;&gt;JSON::XS&lt;/a&gt;, &lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel::JSON::XS&lt;/a&gt;, &lt;a href=&quot;JSON::MaybeXS&quot;&gt;JSON::MaybeXS&lt;/a&gt;, &lt;a href=&quot;JSON::Tiny&quot;&gt;JSON::Tiny&lt;/a&gt;, and &lt;a href=&quot;Mojo::JSON&quot;&gt;Mojo::JSON&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;JSON::PP&quot;&gt;JSON :: PP&lt;/a&gt;がJSONデータの逆シリアル化に使用されます。場合 &lt;code&gt;CPAN_META_JSON_DECODER&lt;/code&gt; の環境変数が存在して、これを提供してロード可能なモジュールの名前であることが予想される &lt;code&gt;decode_json&lt;/code&gt; の後、直列化復元に使用されるサブルーチンを、。このAPIは&lt;a href=&quot;JSON::PP&quot;&gt;JSON :: PP&lt;/a&gt;、&lt;a href=&quot;JSON::XS&quot;&gt;JSON :: XS&lt;/a&gt;、&lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel :: JSON :: XS&lt;/a&gt;、&lt;a href=&quot;JSON::MaybeXS&quot;&gt;JSON :: MaybeXS&lt;/a&gt;、&lt;a href=&quot;JSON::Tiny&quot;&gt;JSON :: Tiny&lt;/a&gt;、およびのすべてによって提供されるため、上記のサブルーチンの存在のみに依存することで、最大限の互換性が得られます。&lt;a href=&quot;Mojo::JSON&quot;&gt;Mojo :: JSON&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="79a294e48ade56dbe097d94ecb2d017b667469c8" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email::Sender::Simple&lt;/a&gt; will try `sendmail` first, if it exists in your $PATH. This generally isn't the case. If there's a remote mail server you use to send mail, consider investigating one of the Transport classes. At time of writing, the available transports include:</source>
          <target state="translated">$ PATHに存在する場合、デフォルトでは、&lt;a href=&quot;http://search.cpan.org/perldoc/Email::Sender::Simple&quot;&gt;Email :: Sender :: Simple&lt;/a&gt;は最初に `sendmail`を試みます。これは一般的にそうではありません。メールの送信に使用するリモートメールサーバーがある場合は、トランスポートクラスの1つを調査することを検討してください。執筆の時点で、利用可能なトランスポートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d72ee058cb3ba5edce2a08b405dc90217d0eada0" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;Locale::Maketext::Simple&lt;/b&gt; draws its source from the calling package's</source>
          <target state="translated">デフォルトでは、&lt;b&gt;Locale :: Maketext :: Simple&lt;/b&gt;は呼び出し元のパッケージのソースからソースを描画します</target>
        </trans-unit>
        <trans-unit id="35fc08f26016b44845e97a461120088a4d635511" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2man&lt;/b&gt; dies if any errors are detected in the POD input. If &lt;b&gt;--stderr&lt;/b&gt; is given and no &lt;b&gt;--errors&lt;/b&gt; flag is present, errors are sent to standard error, but &lt;b&gt;pod2man&lt;/b&gt; does not abort. This is equivalent to &lt;code&gt;--errors=stderr&lt;/code&gt; and is supported for backward compatibility.</source>
          <target state="translated">デフォルトでは、POD入力でエラーが検出されると、&lt;b&gt;pod2man&lt;/b&gt;は終了します。&lt;b&gt;--stderr&lt;/b&gt;が指定され、&lt;b&gt;-errors&lt;/b&gt;フラグが存在しない場合、エラーは標準エラーに送信されますが、&lt;b&gt;pod2man&lt;/b&gt;は中止されません。これは &lt;code&gt;--errors=stderr&lt;/code&gt; と同等であり、下位互換性のためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="30d3609c8a43f768f52510e95fef029cac6273de" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2man&lt;/b&gt; produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt; .</source>
          <target state="translated">デフォルトでは、&lt;b&gt;pod2man&lt;/b&gt;は、可能な限り多くの* roff実装で動作することを保証するために、最も保守的な* roff出力を生成します。多くの* roff実装は非ASCII文字を処理できないため、これは、すべての非ASCII文字が、適切なアクセント付き文字を作成しようとする* roffエスケープシーケンス（少なくともtroff出力用）または &lt;code&gt;X&lt;/code&gt; に変換されることを意味します。</target>
        </trans-unit>
        <trans-unit id="6c802c27acda71e33b3944a76fe3f254627c5e35" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2man&lt;/b&gt; produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、&lt;b&gt;pod2man&lt;/b&gt;は可能な限り最も保守的な* roff出力を生成して、可能な限り多くの異なる* roff実装で確実に機能するようにします。多くの* roff実装は非ASCII文字を処理できないため、これはすべての非ASCII文字が適切なアクセント付き文字を作成しようとする* roffエスケープシーケンス（少なくともtroff出力の場合）または &lt;code&gt;X&lt;/code&gt; に変換されることを意味します。</target>
        </trans-unit>
        <trans-unit id="b7337f82d45ceca3575dcc4fcaada9bab5f7a5ae" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2text&lt;/b&gt; dies if any errors are detected in the POD input. If &lt;b&gt;--stderr&lt;/b&gt; is given and no &lt;b&gt;--errors&lt;/b&gt; flag is present, errors are sent to standard error, but &lt;b&gt;pod2text&lt;/b&gt; does not abort. This is equivalent to &lt;code&gt;--errors=stderr&lt;/code&gt; and is supported for backward compatibility.</source>
          <target state="translated">デフォルトでは、POD入力でエラーが検出されると、&lt;b&gt;pod2textは終了し&lt;/b&gt;ます。&lt;b&gt;--stderr&lt;/b&gt;が指定され、&lt;b&gt;-errors&lt;/b&gt;フラグが存在しない場合、エラーは標準エラーに送信されますが、&lt;b&gt;pod2text&lt;/b&gt;は中止されません。これは &lt;code&gt;--errors=stderr&lt;/code&gt; と同等であり、下位互換性のためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="d7d98831aaac5ae8bfa863600541ce748cdfa2ce" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2text&lt;/b&gt; tries to use the same output encoding as its input encoding (to be backward-compatible with older versions). This option says to instead force the output encoding to UTF-8.</source>
          <target state="translated">デフォルトでは、&lt;b&gt;pod2text&lt;/b&gt;は入力エンコーディングと同じ出力エンコーディングを使用しようとします（古いバージョンとの下位互換性を保つため）。このオプションは、代わりに出力エンコーディングをUTF-8に強制することを示しています。</target>
        </trans-unit>
        <trans-unit id="f53f148127af7bd5af025188de73dc79a271f7fe" translate="yes" xml:space="preserve">
          <source>By default, &lt;b&gt;pod2usage()&lt;/b&gt; will use &lt;code&gt;$0&lt;/code&gt; as the path to the pod input file. Unfortunately, not all systems on which Perl runs will set &lt;code&gt;$0&lt;/code&gt; properly (although if &lt;code&gt;$0&lt;/code&gt; isn't found, &lt;b&gt;pod2usage()&lt;/b&gt; will search &lt;code&gt;$ENV{PATH}&lt;/code&gt; or else the list specified by the &lt;code&gt;-pathlist&lt;/code&gt; option). If this is the case for your system, you may need to explicitly specify the path to the pod docs for the invoking script using something similar to the following:</source>
          <target state="translated">デフォルトでは、&lt;b&gt;pod2usage（）&lt;/b&gt;は &lt;code&gt;$0&lt;/code&gt; をポッド入力ファイルへのパスとして使用します。残念ながら、Perlを実行するすべてのシステムが &lt;code&gt;$0&lt;/code&gt; 正しく設定するわけではありません（ただし、 &lt;code&gt;$0&lt;/code&gt; が見つからない場合、&lt;b&gt;pod2usage（）&lt;/b&gt;は &lt;code&gt;$ENV{PATH}&lt;/code&gt; または &lt;code&gt;-pathlist&lt;/code&gt; オプションで指定されたリストを検索します）。ご使用のシステムがこれに該当する場合、次のようなものを使用して、呼び出しスクリプトのポッドドキュメントへのパスを明示的に指定する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="139ad65b1f5c08871019f97feca04f36c4d7791f" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; is in a completely POSIX-compatible mode, which uses the POSIX-specification of &lt;code&gt;tar&lt;/code&gt; to store files. For paths greater than 100 characters, this is done using the &lt;code&gt;POSIX header prefix&lt;/code&gt; . Non-POSIX-compatible clients may not support this part of the specification, and may only support the &lt;code&gt;GNU Extended
Header&lt;/code&gt; functionality. To facilitate those clients, you can set the &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt; . See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section for details on this variable.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; は完全にPOSIX互換モードであり、 &lt;code&gt;tar&lt;/code&gt; の POSIX仕様を使用してファイルを格納します。 100文字を超えるパスの場合、これは &lt;code&gt;POSIX header prefix&lt;/code&gt; を使用して行われます。非POSIX互換クライアントは、仕様のこの部分をサポートせず、 &lt;code&gt;GNU Extended Header&lt;/code&gt; 機能のみをサポートする場合があります。これらのクライアントを容易にするために、 &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; 変数を &lt;code&gt;true&lt;/code&gt; に設定できます。この変数の詳細については、 &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="22d3080e984d27612f64abae1b1cd500724525a5" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; is in a completely POSIX-compatible mode, which uses the POSIX-specification of &lt;code&gt;tar&lt;/code&gt; to store files. For paths greater than 100 characters, this is done using the &lt;code&gt;POSIX header prefix&lt;/code&gt;. Non-POSIX-compatible clients may not support this part of the specification, and may only support the &lt;code&gt;GNU Extended Header&lt;/code&gt; functionality. To facilitate those clients, you can set the &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;. See the &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; section for details on this variable.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; は完全にPOSIX互換モードであり、ファイルを格納するために &lt;code&gt;tar&lt;/code&gt; のPOSIX仕様を使用します。 100文字を超えるパスの場合、これは &lt;code&gt;POSIX header prefix&lt;/code&gt; を使用して行われます。非POSIX互換クライアントは、仕様のこの部分をサポートしていない可能性があり、 &lt;code&gt;GNU Extended Header&lt;/code&gt; 機能のみをサポートしている可能性があります。これらのクライアントを容易にするために、 &lt;code&gt;$Archive::Tar::DO_NOT_USE_PREFIX&lt;/code&gt; 変数を &lt;code&gt;true&lt;/code&gt; に設定できます。この変数の詳細については、「 &lt;code&gt;GLOBAL VARIABLES&lt;/code&gt; 変数」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a0ce25419277d6adf6e0c4949f8ca8dca00cd62d" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; your files to whatever mode was specified for the particular file in the archive. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt;-ing.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; はファイルをアーカイブ内の特定のファイルに指定されたモードに &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; しようとします。これが望ましくない場合もあります。その場合、この変数を &lt;code&gt;0&lt;/code&gt; に設定して &lt;code&gt;&lt;a href=&quot;../functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; -ing を無効にします。</target>
        </trans-unit>
        <trans-unit id="eb67a5af923530004ebe769a16f96c44f7d23600" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; your files if it is able to. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt;-ing, even if it were possible.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; は、可能であればファイルを &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; しようとします。これが望ましくない場合もあります。その場合、この変数を &lt;code&gt;0&lt;/code&gt; に設定して、可能であっても &lt;code&gt;&lt;a href=&quot;../functions/chown&quot;&gt;chown&lt;/a&gt;&lt;/code&gt; -ing を無効にします。</target>
        </trans-unit>
        <trans-unit id="06e25549a7c661c31580c21cab9b2e4174ef8ab8" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;chmod&lt;/code&gt; your files to whatever mode was specified for the particular file in the archive. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;chmod&lt;/code&gt;-ing.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; は、アーカイブ内の特定のファイルに指定されたモードにファイルを &lt;code&gt;chmod&lt;/code&gt; しようとします。場合によっては、これが望ましくないこともあります。その場合、この変数を &lt;code&gt;0&lt;/code&gt; に設定して、 &lt;code&gt;chmod&lt;/code&gt; - ingを無効にします。</target>
        </trans-unit>
        <trans-unit id="3ebe21c0c6c50ca514eb93d2e374500f1bce8cfb" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to &lt;code&gt;chown&lt;/code&gt; your files if it is able to. In some cases, this may not be desired. In that case, set this variable to &lt;code&gt;0&lt;/code&gt; to disable &lt;code&gt;chown&lt;/code&gt;-ing, even if it were possible.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; は、可能であればファイルを &lt;code&gt;chown&lt;/code&gt; しようとします。場合によっては、これが望ましくないこともあります。その場合、可能であっても、この変数を &lt;code&gt;0&lt;/code&gt; に設定して、 &lt;code&gt;chown&lt;/code&gt; - ingを無効にします。</target>
        </trans-unit>
        <trans-unit id="a46faa893a6a331982326586cd0db0d3a2c1dfbd" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Archive::Tar&lt;/code&gt; will try to put paths that are over 100 characters in the &lt;code&gt;prefix&lt;/code&gt; field of your tar header, as defined per POSIX-standard. However, some (older) tar programs do not implement this spec. To retain compatibility with these older or non-POSIX compliant versions, you can set the &lt;code&gt;$DO_NOT_USE_PREFIX&lt;/code&gt; variable to a true value, and &lt;code&gt;Archive::Tar&lt;/code&gt; will use an alternate way of dealing with paths over 100 characters by using the &lt;code&gt;GNU Extended Header&lt;/code&gt; feature.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Archive::Tar&lt;/code&gt; は、POSIX標準で定義されているように、tarヘッダーの &lt;code&gt;prefix&lt;/code&gt; フィールドに100文字を超えるパスを配置しようとします。ただし、一部の（古い）tarプログラムはこの仕様を実装していません。これらの古いバージョンまたは非POSIX準拠のバージョンとの互換性を維持するには、 &lt;code&gt;$DO_NOT_USE_PREFIX&lt;/code&gt; 変数をtrue値に設定できます。Archive &lt;code&gt;Archive::Tar&lt;/code&gt; は、 &lt;code&gt;GNU Extended Header&lt;/code&gt; 機能を使用して100文字を超えるパスを処理する別の方法を使用します。</target>
        </trans-unit>
        <trans-unit id="ca08f9f1e5aebac60920c9f0bab0c8d5475cdd53" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Sys::Syslog&lt;/code&gt; exports the symbols from the &lt;code&gt;:standard&lt;/code&gt; tag.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;Sys::Syslog&lt;/code&gt; は &lt;code&gt;:standard&lt;/code&gt; タグからシンボルをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="ea04cfd93bdf64370c1cc20e848935f755855d27" translate="yes" xml:space="preserve">
          <source>By default, CJK unified ideographs are ordered in Unicode codepoint order, but those in the CJK Unified Ideographs block are less than those in the CJK Unified Ideographs Extension A etc.</source>
          <target state="translated">デフォルトでは、日中韓統一表意文字はUnicodeのコードポイント順に並びますが、日中韓統一表意文字ブロックに含まれるものは、日中韓統一表意文字拡張Aなどに含まれるものよりも少なくなります。</target>
        </trans-unit>
        <trans-unit id="c9fd4df55423b1ff0429c30297d024455fc09d6b" translate="yes" xml:space="preserve">
          <source>By default, CPAN will install the latest non-developer release of a module. If you want to install a dev release, you have to specify the partial path starting with the author id to the tarball you wish to install, like so:</source>
          <target state="translated">デフォルトでは、CPANはモジュールの最新の非開発者リリースをインストールします。開発者リリースをインストールしたい場合は、以下のように、インストールしたい tarball への author id で始まる部分パスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d31a5f0a0e7ac5c54379eb4d64385f193a7c7e78" translate="yes" xml:space="preserve">
          <source>By default, Data::Dumper builds up the &quot;seen&quot; hash of scalars that it has encountered during serialization. This is very expensive. This seen hash is necessary to support and even just detect circular references. It is exposed to the user via the &lt;code&gt;Seen()&lt;/code&gt; call both for writing and reading.</source>
          <target state="translated">デフォルトでは、Data :: Dumperは、シリアル化中に検出されたスカラーの「表示された」ハッシュを構築します。これは非常に高価です。このハッシュは循環参照をサポートするだけでなく、検出するためにも必要です。これは、書き込みと読み取りの両方で &lt;code&gt;Seen()&lt;/code&gt; 呼び出しを介してユーザーに公開されます。</target>
        </trans-unit>
        <trans-unit id="cd1b6853947249bceb85a960748d4561e30fc8ae" translate="yes" xml:space="preserve">
          <source>By default, GetOptions parses the options that are present in the global array &lt;code&gt;@ARGV&lt;/code&gt; . A special entry &lt;code&gt;GetOptionsFromArray&lt;/code&gt; can be used to parse options from an arbitrary array.</source>
          <target state="translated">デフォルトでは、GetOptionsはグローバル配列 &lt;code&gt;@ARGV&lt;/code&gt; にあるオプションを解析します。特別なエントリ &lt;code&gt;GetOptionsFromArray&lt;/code&gt; を使用して、任意の配列からオプションを解析できます。</target>
        </trans-unit>
        <trans-unit id="d4156072258fa02556fc1c5baacde7ddf6319893" translate="yes" xml:space="preserve">
          <source>By default, GetOptions parses the options that are present in the global array &lt;code&gt;@ARGV&lt;/code&gt;. A special entry &lt;code&gt;GetOptionsFromArray&lt;/code&gt; can be used to parse options from an arbitrary array.</source>
          <target state="translated">デフォルトでは、GetOptionsはグローバル配列 &lt;code&gt;@ARGV&lt;/code&gt; に存在するオプションを解析します。特別なエントリ &lt;code&gt;GetOptionsFromArray&lt;/code&gt; を使用して、任意の配列からオプションを解析できます。</target>
        </trans-unit>
        <trans-unit id="96d8266281e8d2795ccf65d39f9f3a28ecacdd25" translate="yes" xml:space="preserve">
          <source>By default, HP-UX comes configured with a maximum data segment size of 64MB. This is too small to correctly compile Perl with the maximum optimization levels. You can increase the size of the maxdsiz kernel parameter through the use of SAM.</source>
          <target state="translated">デフォルトでは、HP-UXでは最大データセグメントサイズが64MBに設定されています。これは、最大の最適化レベルで Perl を正しくコンパイルするには小さすぎます。SAM を使用して maxdsiz カーネルパラメータのサイズを大きくすることができます。</target>
        </trans-unit>
        <trans-unit id="5e3209602259bcaf280c37535cab25ba0fe2f1dc" translate="yes" xml:space="preserve">
          <source>By default, HTTP::Tiny does not make any assumptions about your trust model, threat level or risk tolerance. It just aims to give you an encrypted channel when you need one.</source>
          <target state="translated">デフォルトでは、HTTP::Tiny は信頼モデル、脅威レベル、リスク許容度についての仮定を行いません。必要なときに暗号化されたチャネルを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="137732db42e50a8e0a9c182ecd242a32825b115f" translate="yes" xml:space="preserve">
          <source>By default, Hangul syllables are decomposed into Hangul Jamo, even if &lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; . But the mapping of Hangul syllables may be overridden.</source>
          <target state="translated">&lt;code&gt;(normalization =&amp;gt; &lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;)&lt;/code&gt; であっても、デフォルトでは、ハングル音節はハングルジャモに分解されます。ただし、ハングル音節のマッピングはオーバーライドされる場合があります。</target>
        </trans-unit>
        <trans-unit id="ac19ab911ba3ab14f7cbb62b29a9d3c7664d12cf" translate="yes" xml:space="preserve">
          <source>By default, Hangul syllables are decomposed into Hangul Jamo, even if &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt;. But the mapping of Hangul syllables may be overridden.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;(normalization =&amp;gt; undef)&lt;/code&gt; であっても、ハングル音節はハングル音節に分解されます。ただし、ハングル音節文字のマッピングは上書きされる場合があります。</target>
        </trans-unit>
        <trans-unit id="ab7c37acde02f04a994a0fe2dce5847989bfb7ac" translate="yes" xml:space="preserve">
          <source>By default, JSON booleans will be decoded as overloaded &lt;code&gt;$JSON::PP::false&lt;/code&gt; and &lt;code&gt;$JSON::PP::true&lt;/code&gt; objects.</source>
          <target state="translated">デフォルトでは、JSONブール値はオーバーロードされた &lt;code&gt;$JSON::PP::false&lt;/code&gt; および &lt;code&gt;$JSON::PP::true&lt;/code&gt; オブジェクトとしてデコードされます。</target>
        </trans-unit>
        <trans-unit id="f03358de26c8be966d378648ec79854e58778f9c" translate="yes" xml:space="preserve">
          <source>By default, Locale::Maketext blacklists all methods in the Locale::Maketext namespace that begin with the '_' character, and all methods which include Perl's namespace separator characters.</source>
          <target state="translated">デフォルトでは、Locale::Maketextは、Locale::Maketext名前空間内の'_'で始まるすべてのメソッドと、Perlの名前空間区切り文字を含むすべてのメソッドをブラックリスト化します。</target>
        </trans-unit>
        <trans-unit id="41b45806d57c8440d5ef81fe98a720868522060d" translate="yes" xml:space="preserve">
          <source>By default, Perl assumes that it must do most of its arithmetic in floating point. But by saying</source>
          <target state="translated">デフォルトでは、Perl は演算のほとんどを浮動小数点で行わなければならないと仮定しています。しかし</target>
        </trans-unit>
        <trans-unit id="4de9fffb0ae0d357c4fcb6328d235687ad4441ca" translate="yes" xml:space="preserve">
          <source>By default, Perl does a depth-first left-to-right search for a method. That means it starts with the first parent in the &lt;code&gt;@ISA&lt;/code&gt; array, and then searches all of its parents, grandparents, etc. If it fails to find the method, it then goes to the next parent in the original class's &lt;code&gt;@ISA&lt;/code&gt; array and searches from there.</source>
          <target state="translated">デフォルトでは、Perlはメソッドに対して深さ優先の左から右への検索を行います。つまり、 &lt;code&gt;@ISA&lt;/code&gt; 配列の最初の親から始まり、その親、祖父母などすべてを検索します。メソッドが見つからない場合は、元のクラスの &lt;code&gt;@ISA&lt;/code&gt; 配列の次の親に移動して検索しますそこから。</target>
        </trans-unit>
        <trans-unit id="b268ca20b85e7cb3d549ac0ab2d0251384881b6c" translate="yes" xml:space="preserve">
          <source>By default, Perl itself (outside the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module) ignores the current locale. The &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; pragma tells Perl to use the current locale for some operations. Starting in v5.16, there are optional parameters to this pragma, described below, which restrict which operations are affected by it.</source>
          <target state="translated">デフォルトでは、Perl自体（&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールの外）は現在のロケールを無視します。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; プラグマは、いくつかの操作のための現在のロケールを使用するようにPerlを伝えます。v5.16以降、このプラグマにはオプションのパラメーターがあり、以下で説明されています。これにより、影響を受ける操作が制限されます。</target>
        </trans-unit>
        <trans-unit id="aa94a8ccd3466368231cc76eb0e0e655562c87e1" translate="yes" xml:space="preserve">
          <source>By default, Perl itself (outside the &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; module) ignores the current locale. The &lt;code&gt;use locale&lt;/code&gt; pragma tells Perl to use the current locale for some operations. Starting in v5.16, there are optional parameters to this pragma, described below, which restrict which operations are affected by it.</source>
          <target state="translated">デフォルトでは、Perl自体（&lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;モジュールの外部）は現在のロケールを無視します。 &lt;code&gt;use locale&lt;/code&gt; プラグマは、いくつかの操作のための現在のロケールを使用するようにPerlを伝えます。v5.16以降、このプラグマにはオプションのパラメーターがあり、以下で説明します。これらのパラメーターは、影響を受ける操作を制限します。</target>
        </trans-unit>
        <trans-unit id="d3796ef67591d4f35614b1eaeb5b1f668ac93c4c" translate="yes" xml:space="preserve">
          <source>By default, Perl's built-in OO system is very minimal, leaving you to do most of the work. This minimalism made a lot of sense in 1994, but in the years since Perl 5.0 we've seen a number of common patterns emerge in Perl OO. Fortunately, Perl's flexibility has allowed a rich ecosystem of Perl OO systems to flourish.</source>
          <target state="translated">デフォルトでは、Perl の組み込みの OO システムは非常にミニマムで、ほとんどの作業はあなたに任されています。このミニマリズムは 1994 年には多くの意味を持っていましたが、Perl 5.0 以降の数年間で、Perl OO には多くの一般的なパターンが出現しています。幸いなことに、Perl の柔軟性は Perl OO システムの豊かなエコシステムを繁栄させることを可能にしました。</target>
        </trans-unit>
        <trans-unit id="fcb268259208b983d01ebd2fb8ea62f828af5570" translate="yes" xml:space="preserve">
          <source>By default, Pod::Escapes exports none of its symbols. But you can request any of them to be exported. Either request them individually, as with &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt; , or you can do &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(:ALL);&lt;/code&gt; to get all exportable symbols.</source>
          <target state="translated">デフォルトでは、Pod :: Escapesはそのシンボルをエクスポートしません。ただし、それらのいずれかをエクスポートするように要求できます。 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt; 、それらを個別に要求します。または、 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Pod::Escapes qw(:ALL);&lt;/code&gt; &lt;a href=&quot;../functions/use&quot;&gt;使用&lt;/a&gt;できます。すべてのエクスポート可能なシンボルを取得します。</target>
        </trans-unit>
        <trans-unit id="1395433e5e722399b7b232764452499b218a2dda" translate="yes" xml:space="preserve">
          <source>By default, Pod::Escapes exports none of its symbols. But you can request any of them to be exported. Either request them individually, as with &lt;code&gt;use Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt;, or you can do &lt;code&gt;use Pod::Escapes qw(:ALL);&lt;/code&gt; to get all exportable symbols.</source>
          <target state="translated">デフォルトでは、Pod :: Escapesはそのシンボルをエクスポートしません。ただし、それらのいずれかをエクスポートするように要求できます。 &lt;code&gt;use Pod::Escapes qw(symbolname symbolname2...);&lt;/code&gt; を使用する場合と同様に、個別にリクエストします。、または &lt;code&gt;use Pod::Escapes qw(:ALL);&lt;/code&gt; できます。すべてのエクスポート可能なシンボルを取得します。</target>
        </trans-unit>
        <trans-unit id="a42f3e93e67354db749eedfb3803802a7a1b163f" translate="yes" xml:space="preserve">
          <source>By default, Pod::Man produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt; .</source>
          <target state="translated">デフォルトでは、Pod :: Manは、可能な限り多くの* roff実装で確実に機能するように、最も保守的な* roff出力を生成します。多くの* roff実装は非ASCII文字を処理できないため、これはすべての非ASCII文字が適切にアクセント記号付き文字を作成しようとする* roffエスケープシーケンス（少なくともtroff出力用）または &lt;code&gt;X&lt;/code&gt; に変換されることを意味します。</target>
        </trans-unit>
        <trans-unit id="1aff6e317b0c1cd918985cba32d252237ffac9cc" translate="yes" xml:space="preserve">
          <source>By default, Pod::Man produces the most conservative possible *roff output to try to ensure that it will work with as many different *roff implementations as possible. Many *roff implementations cannot handle non-ASCII characters, so this means all non-ASCII characters are converted either to a *roff escape sequence that tries to create a properly accented character (at least for troff output) or to &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Pod :: Manは可能な限り最も保守的な* roff出力を生成して、可能な限り多くの異なる* roff実装で機能するようにします。多くの* roff実装は非ASCII文字を処理できないため、これはすべての非ASCII文字が適切なアクセント付き文字を作成しようとする* roffエスケープシーケンス（少なくともtroff出力の場合）または &lt;code&gt;X&lt;/code&gt; に変換されることを意味します。</target>
        </trans-unit>
        <trans-unit id="98107783dba2f8c87d2092a6ced42a0827ce5268" translate="yes" xml:space="preserve">
          <source>By default, Pod::Text uses the same output encoding as the input encoding of the POD source (provided that Perl was built with PerlIO; otherwise, it doesn't encode its output). If this option is given, the output encoding is forced to UTF-8.</source>
          <target state="translated">デフォルトでは、Pod::TextはPODソースの入力エンコーディングと同じ出力エンコーディングを使用します(PerlがPerlIOでビルドされていることが条件です。このオプションを指定すると、出力エンコーディングは強制的にUTF-8になります。</target>
        </trans-unit>
        <trans-unit id="607468b061542c5fb308ea35e966138c590f5abc" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. This does not work well e.g. if the script was packed with &lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;. The -noperldoc option suppresses the external call to &lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt; and uses the simple text formatter (&lt;a href=&quot;text&quot;&gt;Pod::Text&lt;/a&gt;) to output the POD.</source>
          <target state="translated">デフォルトでは、-verbose&amp;gt; = 2が指定されている場合、Pod :: Usageは&lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt;を呼び出します。これは、スクリプトが&lt;a href=&quot;http://search.cpan.org/perldoc/PAR&quot;&gt;PAR&lt;/a&gt;でパックされている場合など、うまく機能しません。-noperldocオプションは、&lt;a href=&quot;../perldoc&quot;&gt;perldoc&lt;/a&gt;への外部呼び出しを抑制し、単純なテキストフォーマッター（&lt;a href=&quot;text&quot;&gt;Pod :: Text&lt;/a&gt;）を使用してPODを出力します。</target>
        </trans-unit>
        <trans-unit id="3329bbc8b004125c8c5278e4dfc259a804cd3aa3" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. In case &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; is not installed where the &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt; interpreter thinks it is (see &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;), the -perldoc option may be used to supply the correct path to &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、-verbose&amp;gt; = 2が指定されている場合、Pod :: Usageは&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;を呼び出します。&lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;インタープリターが考えている場所に&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;がインストールされていない場合（&lt;a href=&quot;config&quot;&gt;Configを&lt;/a&gt;参照）、- &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;オプションを使用してperldocへの正しいパスを指定できます。</target>
        </trans-unit>
        <trans-unit id="22871ba1e750f95b09d8130a2d10b57dbadb7827" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. In case of special or unusual Perl installations, the -perlcmd option may be used to supply the path to a &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt; executable which should run &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、-verbose&amp;gt; = 2が指定されている場合、Pod :: Usageは&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;を呼び出します。特別なまたは異常なPerlインストールの場合、-perlcmdオプションを使用して、&lt;a href=&quot;perldoc&quot;&gt;perldocを&lt;/a&gt;実行する必要がある&lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;実行可能ファイルへのパスを指定できます。</target>
        </trans-unit>
        <trans-unit id="1201c61be1212ca71fcfd8853a5004fc60c01a5a" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. The -perldocopt option may be used to supply options to &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;. The string may contain several, space-separated options.</source>
          <target state="translated">デフォルトでは、-verbose&amp;gt; = 2が指定されている場合、Pod :: Usageは&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;を呼び出します。-perldocoptオプションは、&lt;a href=&quot;perldoc&quot;&gt;perldocに&lt;/a&gt;オプションを提供するために使用できます。文字列には、スペースで区切られた複数のオプションが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="cb1d3cbd9df1b34d43a284a1aea0a8c7b074f24c" translate="yes" xml:space="preserve">
          <source>By default, Pod::Usage will call &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; when -verbose &amp;gt;= 2 is specified. This does not work well e.g. if the script was packed with &lt;a href=&quot;par&quot;&gt;PAR&lt;/a&gt;. The -noperldoc option suppresses the external call to &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; and uses the simple text formatter (&lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt;) to output the POD.</source>
          <target state="translated">デフォルトでは、-verbose&amp;gt; = 2が指定されている場合、Pod :: Usageは&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;を呼び出します。スクリプトが&lt;a href=&quot;par&quot;&gt;PAR&lt;/a&gt;でパックされている場合など、これはうまく機能しません。-noperldocオプションは、&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;への外部呼び出しを抑制し、単純なテキストフォーマッター（&lt;a href=&quot;Pod::Text&quot;&gt;Pod :: Text&lt;/a&gt;）を使用してPODを出力します。</target>
        </trans-unit>
        <trans-unit id="7aaf9130ce3cc364b8ff0d6d870dfc5f5e3ff5d9" translate="yes" xml:space="preserve">
          <source>By default, a quantified subpattern is &quot;greedy&quot;, that is, it will match as many times as possible (given a particular starting location) while still allowing the rest of the pattern to match. If you want it to match the minimum number of times possible, follow the quantifier with a &quot;?&quot;. Note that the meanings don't change, just the &quot;greediness&quot;:</source>
          <target state="translated">デフォルトでは、定量化されたサブパターンは &quot;貪欲 &quot;になります。もし可能な限り少ない回数だけマッチさせたいのであれば、定量化子の後に&quot;? &quot;をつけてください。意味は変わらないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b6eec9c8bbe7a9df535a2212f50cb8ec43bdf1e" translate="yes" xml:space="preserve">
          <source>By default, a quantified subpattern is &quot;greedy&quot;, that is, it will match as many times as possible (given a particular starting location) while still allowing the rest of the pattern to match. If you want it to match the minimum number of times possible, follow the quantifier with a &lt;code&gt;&quot;?&quot;&lt;/code&gt;. Note that the meanings don't change, just the &quot;greediness&quot;:</source>
          <target state="translated">デフォルトでは、定量化されたサブパターンは「貪欲」です。つまり、パターンの残りの部分を一致させながら、（特定の開始位置を指定して）可能な限り何度も一致します。可能な最小回数に一致させたい場合は、数量詞の後に &lt;code&gt;&quot;?&quot;&lt;/code&gt; 。意味は変わらず、「貪欲」だけであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b48a9b04f7e394f8ae5c84a6badf024eee518a01" translate="yes" xml:space="preserve">
          <source>By default, all ftp connections are done in passive mode. To change that, see the &lt;code&gt;$FTP_PASSIVE&lt;/code&gt; variable further down.</source>
          <target state="translated">デフォルトでは、すべてのFTP接続はパッシブモードで行われます。これを変更するには、下の &lt;code&gt;$FTP_PASSIVE&lt;/code&gt; 変数を参照してください。</target>
        </trans-unit>
        <trans-unit id="d7f764723d2b6f4e034b63502225f5115dfa076e" translate="yes" xml:space="preserve">
          <source>By default, all tests are eligible to be run in parallel. Specifying any of your own rules removes this one.</source>
          <target state="translated">デフォルトでは、すべてのテストを並行して実行することができます。独自のルールを指定することで、このルールは削除されます。</target>
        </trans-unit>
        <trans-unit id="7f80a56139fac5d67611619acae3e63a365a4381" translate="yes" xml:space="preserve">
          <source>By default, attribute handlers are called at the end of the compilation phase (in a &lt;code&gt;CHECK&lt;/code&gt; block). This seems to be optimal in most cases because most things that can be defined are defined by that point but nothing has been executed.</source>
          <target state="translated">デフォルトでは、属性ハンドラーはコンパイル段階の最後（ &lt;code&gt;CHECK&lt;/code&gt; ブロック内）で呼び出されます。これは、定義できるほとんどのものがその時点で定義されているが、何も実行されていないため、ほとんどの場合に最適であると思われます。</target>
        </trans-unit>
        <trans-unit id="d92e033ccee030ae17ccf241ebba25503e925cbf" translate="yes" xml:space="preserve">
          <source>By default, but can be redefined.</source>
          <target state="translated">デフォルトですが、再定義することができます。</target>
        </trans-unit>
        <trans-unit id="9f90d660b6b88d20d5a032c88e00b0f974301c2b" translate="yes" xml:space="preserve">
          <source>By default, case-sensitive comparison (that is level 3 difference) won't ignore accents (that is level 2 difference).</source>
          <target state="translated">既定では、大文字小文字を区別する比較 (これはレベル 3 の違いです)はアクセント (これはレベル 2 の違いです)を無視しません。</target>
        </trans-unit>
        <trans-unit id="b957d395a8a7eedebb03724489ebfa7e55174b9c" translate="yes" xml:space="preserve">
          <source>By default, classes in Perl only perform the &lt;code&gt;UNIVERSAL&lt;/code&gt; role, as well as the role of all classes in their inheritance. In other words, by default &lt;code&gt;DOES&lt;/code&gt; responds identically to &lt;code&gt;isa&lt;/code&gt; .</source>
          <target state="translated">デフォルトでは、Perlのクラスは &lt;code&gt;UNIVERSAL&lt;/code&gt; の役割と、継承におけるすべてのクラスの役割のみを実行します。つまり、デフォルトでは &lt;code&gt;DOES&lt;/code&gt; は &lt;code&gt;isa&lt;/code&gt; とまったく同じように応答します。</target>
        </trans-unit>
        <trans-unit id="72b12f15b2704c72b2abbc49dd17fbafa2fd667f" translate="yes" xml:space="preserve">
          <source>By default, classes in Perl only perform the &lt;code&gt;UNIVERSAL&lt;/code&gt; role, as well as the role of all classes in their inheritance. In other words, by default &lt;code&gt;DOES&lt;/code&gt; responds identically to &lt;code&gt;isa&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Perlのクラスは、 &lt;code&gt;UNIVERSAL&lt;/code&gt; の役割と、継承におけるすべてのクラスの役割のみを実行します。つまり、デフォルトでは &lt;code&gt;DOES&lt;/code&gt; 同じように応答を &lt;code&gt;isa&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a09751b6a3dd219cd03f615c311b1588c0433a01" translate="yes" xml:space="preserve">
          <source>By default, each time the CPAN module is started, cache scanning is performed to keep the cache size in sync ('atstart'). Alternatively, scanning and cleanup can happen when CPAN exits ('atexit'). To prevent any cache cleanup, answer 'never'.</source>
          <target state="translated">デフォルトでは、CPANモジュールが起動するたびに、キャッシュスキャンが実行され、キャッシュサイズを同期させる ('atstart')。あるいは、CPANが終了したときにスキャンとクリーンアップを実行することもできる('atexit')。キャッシュのクリーンアップを防止するには、「never」と答える。</target>
        </trans-unit>
        <trans-unit id="a04a99ac495330cd07b871fc7a9618f7082ee169" translate="yes" xml:space="preserve">
          <source>By default, every base class needs to live in a file of its own. If you want to have a subclass and its parent class in the same file, you can tell &lt;code&gt;parent&lt;/code&gt; not to load any modules by using the &lt;code&gt;-norequire&lt;/code&gt; switch:</source>
          <target state="translated">デフォルトでは、すべての基本クラスは独自のファイルに存在する必要があります。サブクラスとその親クラスを同じファイルに &lt;code&gt;-norequire&lt;/code&gt; 場合は、-norequireスイッチを使用して、モジュールをロードしないように &lt;code&gt;parent&lt;/code&gt; 指示できます。</target>
        </trans-unit>
        <trans-unit id="009314417d0e225d96e9c70c4f8a61f37cbd61fb" translate="yes" xml:space="preserve">
          <source>By default, file names are assumed to be case sensitive; this flag makes bsd_glob() treat case differences as not significant.</source>
          <target state="translated">デフォルトでは、ファイル名は大文字小文字を区別するものとされています。 このフラグにより、 bsd_glob()は大文字小文字の違いを重要ではないものとして扱います。</target>
        </trans-unit>
        <trans-unit id="f417fd8f43a3aea1715b95681c77c39ae15d3bda" translate="yes" xml:space="preserve">
          <source>By default, filters are not inherited by child hubs. That means if you start a subtest, the subtest will not inherit the filter. You can change this behavior with the &lt;code&gt;inherit&lt;/code&gt; parameter:</source>
          <target state="translated">デフォルトでは、フィルターは子ハブに継承されません。つまり、サブテストを開始した場合、サブテストはフィルターを継承しません。この動作は、 &lt;code&gt;inherit&lt;/code&gt; パラメーターを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="6e050dc7d694db5e9597e9b5666a97cb998c6670" translate="yes" xml:space="preserve">
          <source>By default, hiragana is before katakana. If the parameter is made true, this is reversed.</source>
          <target state="translated">デフォルトでは、ひらがなはカタカナより前になります。このパラメータを true にすると、これが逆になります。</target>
        </trans-unit>
        <trans-unit id="f1a9fafb28afdf9312602001044d697513c2f742" translate="yes" xml:space="preserve">
          <source>By default, if a redispatch attempt fails to find another method elsewhere in the objects class hierarchy, it quietly gives up and does nothing (but see &lt;a href=&quot;#Enforcing-redispatch&quot;&gt;&quot;Enforcing redispatch&quot;&lt;/a&gt;). This gracious acquiescence is also unlike the (generally annoying) behaviour of &lt;code&gt;SUPER&lt;/code&gt;, which throws an exception if it cannot redispatch.</source>
          <target state="translated">デフォルトでは、再ディスパッチの試行がオブジェクトクラス階層の他の場所で別のメソッドを見つけられなかった場合、それは静かに諦めて何もしません（ただし、&lt;a href=&quot;#Enforcing-redispatch&quot;&gt;「再ディスパッチの強制」を&lt;/a&gt;参照）。この優雅な黙認は、再ディスパッチできない場合に例外をスローする &lt;code&gt;SUPER&lt;/code&gt; の（一般的に迷惑な）動作とも異なります。</target>
        </trans-unit>
        <trans-unit id="a68b6a00ff07db87e5b4fca637ec784a918f2f88" translate="yes" xml:space="preserve">
          <source>By default, if a redispatch attempt fails to find another method elsewhere in the objects class hierarchy, it quietly gives up and does nothing (but see &lt;a href=&quot;#Enforcing-redispatch&quot;&gt;Enforcing redispatch&lt;/a&gt;). This gracious acquiescence is also unlike the (generally annoying) behaviour of &lt;code&gt;SUPER&lt;/code&gt; , which throws an exception if it cannot redispatch.</source>
          <target state="translated">デフォルトでは、再ディスパッチの試行がオブジェクトクラス階層の別の場所で別のメソッドを見つけることができない場合、静かにあきらめて何もしません（ただし、&lt;a href=&quot;#Enforcing-redispatch&quot;&gt;再ディスパッチの強制を&lt;/a&gt;参照）。この丁寧な黙認は、再ディスパッチできない場合に例外をスローする &lt;code&gt;SUPER&lt;/code&gt; の（一般に厄介な）動作とも異なります。</target>
        </trans-unit>
        <trans-unit id="622748004543277cac1eed24641a5d626b92e074" translate="yes" xml:space="preserve">
          <source>By default, it checks only ascii, utf8 and UTF-16/32 with BOM.</source>
          <target state="translated">デフォルトでは、ASCI、UTF8、UTF-16/32のみをBOMでチェックします。</target>
        </trans-unit>
        <trans-unit id="7d795357eb0370d795216bc893725d71f457449f" translate="yes" xml:space="preserve">
          <source>By default, it exports the functions cwd(), getcwd(), fastcwd(), and fastgetcwd() (and, on Win32, getdcwd()) into the caller's namespace.</source>
          <target state="translated">デフォルトでは、関数 cwd(),getcwd(),fastcwd(),fastgetcwd()(および Win32 では getdcwd())を呼び出し元の名前空間にエクスポートします。</target>
        </trans-unit>
        <trans-unit id="bd57ef383f01461a26729aaf5bda1caeec29a44b" translate="yes" xml:space="preserve">
          <source>By default, lowercase is before uppercase. If the parameter is made true, this is reversed.</source>
          <target state="translated">デフォルトでは、小文字は大文字より前になります。このパラメータを true にすると、これが逆になります。</target>
        </trans-unit>
        <trans-unit id="bd52b1e53c314fe3c4b656aedbdea4b06daed47d" translate="yes" xml:space="preserve">
          <source>By default, no comment field is written to the zip file.</source>
          <target state="translated">デフォルトでは、コメント欄はzipファイルには書き込まれません。</target>
        </trans-unit>
        <trans-unit id="5d5b6fb015586b3864b9f25cf4e1c4322f8f41ee" translate="yes" xml:space="preserve">
          <source>By default, optional warnings are disabled, so any legacy code that doesn't attempt to control the warnings will work unchanged.</source>
          <target state="translated">デフォルトでは、オプションの警告は無効になっているので、警告を制御しようとしないレガシーコードは変更されずに動作します。</target>
        </trans-unit>
        <trans-unit id="56744be38bf9987fcb8b98dab67cef731ba84ab1" translate="yes" xml:space="preserve">
          <source>By default, perl handles file globbing using the File::Glob extension, which provides portable globbing.</source>
          <target state="translated">デフォルトでは、Perl は File::Glob 拡張子を使用してファイルのグロブを処理します。</target>
        </trans-unit>
        <trans-unit id="b252359c438a3c8369c5cbca58632d9664dd0131" translate="yes" xml:space="preserve">
          <source>By default, perl uses the large file compilation environment and relies on Solaris to do the underlying mapping of interfaces.</source>
          <target state="translated">デフォルトでは、perlはラージファイルのコンパイル環境を使用し、Solarisに依存してインターフェースのマッピングを行います。</target>
        </trans-unit>
        <trans-unit id="95ea6d685281e6fc9b1246edd3de6ccbfbf85ecd" translate="yes" xml:space="preserve">
          <source>By default, perl will be compiled as a 32-bit application. Unless you want to allocate more than ~ 4GB of memory inside perl, or unless you need more than 255 open file descriptors, you probably don't need perl to be a 64-bit app.</source>
          <target state="translated">デフォルトでは、perlは32ビットアプリケーションとしてコンパイルされます。perl の内部に ~ 4GB 以上のメモリを割り当てたい場合や、255 個以上のオープンファイル記述子が必要な場合を除いては、おそらく perl を 64 ビットアプリにする必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="8beb3118174cbb4befcc9218c3e11ee8559a67ed" translate="yes" xml:space="preserve">
          <source>By default, perl-5.6.0 (or later) is compiled as a 32-bit application with largefile and long-long support.</source>
          <target state="translated">デフォルトでは、largefileとlong-longをサポートした32ビットアプリケーションとしてコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="c1d7d31b73907dcda6cd3ad0857aee8de05a33a3" translate="yes" xml:space="preserve">
          <source>By default, running out of memory is an untrappable, fatal error. However, if suitably built, Perl can use the contents of &lt;code&gt;$^M&lt;/code&gt; as an emergency memory pool after &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt;ing. Suppose that your Perl were compiled with &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; and used Perl's malloc. Then</source>
          <target state="translated">デフォルトでは、メモリ不足はトラップできない致命的なエラーです。ただし、適切に構築されている場合、Perlは &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; の実行後に &lt;code&gt;$^M&lt;/code&gt; 内容を緊急メモリプールとして使用できます。Perlが &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; でコンパイルされ、Perlのmallocを使用していると仮定します。その後</target>
        </trans-unit>
        <trans-unit id="6367e8a3e44bc0b4aac043c742b1314b3e53105a" translate="yes" xml:space="preserve">
          <source>By default, running out of memory is an untrappable, fatal error. However, if suitably built, Perl can use the contents of &lt;code&gt;$^M&lt;/code&gt; as an emergency memory pool after &lt;code&gt;die()&lt;/code&gt;ing. Suppose that your Perl were compiled with &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; and used Perl's malloc. Then</source>
          <target state="translated">デフォルトでは、メモリ不足はトラップできない致命的なエラーです。ただし、適切に構築されている場合、Perlは &lt;code&gt;die()&lt;/code&gt; ing後の緊急メモリプールとして &lt;code&gt;$^M&lt;/code&gt; 内容を使用できます。 Perlが &lt;code&gt;-DPERL_EMERGENCY_SBRK&lt;/code&gt; でコンパイルされ、Perlのmallocを使用したとします。次に</target>
        </trans-unit>
        <trans-unit id="4190ef76a4299cfe3e352f5cfeb999b38851b5f5" translate="yes" xml:space="preserve">
          <source>By default, section 1 will be used unless the file ends in &lt;code&gt;.pm&lt;/code&gt; in which case section 3 will be selected.</source>
          <target state="translated">デフォルトでは、ファイルの末尾が &lt;code&gt;.pm&lt;/code&gt; でない限りセクション1が使用されます。この場合、セクション3が選択されます。</target>
        </trans-unit>
        <trans-unit id="8d9133733d7f7dcd376ecd3cd224e4dddd523774" translate="yes" xml:space="preserve">
          <source>By default, section 1 will be used unless the file ends in &lt;code&gt;.pm&lt;/code&gt;, in which case section 3 will be selected.</source>
          <target state="translated">デフォルトでは、ファイルの末尾が &lt;code&gt;.pm&lt;/code&gt; でない限りセクション1が使用されます。この場合、セクション3が選択されます。</target>
        </trans-unit>
        <trans-unit id="961a8c7a3d78a4ba111b92d292c8ae5c80f7c1a1" translate="yes" xml:space="preserve">
          <source>By default, semaphores behave like locks, letting only one thread &lt;code&gt;down()&lt;/code&gt; them at a time. However, there are other uses for semaphores.</source>
          <target state="translated">デフォルトでは、セマフォはロックのように動作し、一度に1つのスレッドしか &lt;code&gt;down()&lt;/code&gt; できません。ただし、セマフォの使用法は他にもあります。</target>
        </trans-unit>
        <trans-unit id="fed769cd67eb1346af1f13055d0984c3c18e8ed3" translate="yes" xml:space="preserve">
          <source>By default, strings whose weights are equal should be equal, even though their code points are not equal. Completely ignorable characters are ignored.</source>
          <target state="translated">デフォルトでは、コードポイントが等しくなくても、重みが等しい文字列は等しくなるはずです。完全に無視できる文字は無視されます。</target>
        </trans-unit>
        <trans-unit id="4a36fa72282c7563bf7e21fc24cf3c3c9ea04d1b" translate="yes" xml:space="preserve">
          <source>By default, the</source>
          <target state="translated">デフォルトでは</target>
        </trans-unit>
        <trans-unit id="56921ea3749d0afb26fde19f34e5cd700c2dac28" translate="yes" xml:space="preserve">
          <source>By default, the &quot;^&quot; character is guaranteed to match only the beginning of the string, the &quot;$&quot; character only the end (or before the newline at the end), and Perl does certain optimizations with the assumption that the string contains only one line. Embedded newlines will not be matched by &quot;^&quot; or &quot;$&quot;. You may, however, wish to treat a string as a multi-line buffer, such that the &quot;^&quot; will match after any newline within the string (except if the newline is the last character in the string), and &quot;$&quot; will match before any newline. At the cost of a little more overhead, you can do this by using the /m modifier on the pattern match operator. (Older programs did this by setting &lt;code&gt;$*&lt;/code&gt; , but this option was removed in perl 5.10.)</source>
          <target state="translated">デフォルトでは、「^」文字は文字列の先頭のみと一致し、「$」文字は末尾のみ（または末尾の改行の前）と一致することが保証されています。Perlは、文字列にのみが含まれるという前提で特定の最適化を行います1行。埋め込まれた改行は、「^」または「$」と一致しません。ただし、文字列を複数行のバッファとして扱い、 &quot;^&quot;が文字列内の改行の後に一致し（改行が文字列の最後の文字である場合を除く）、 &quot;$&quot;が一致するようにすることもできます。改行の前に一致します。オーバーヘッドが少し増える代わりに、パターンマッチ演算子で/ m修飾子を使用してこれを行うことができます。 （古いプログラムは &lt;code&gt;$*&lt;/code&gt; 設定してこれを行いましたが、このオプションはperl 5.10で削除されました。）</target>
        </trans-unit>
        <trans-unit id="346e0669eeb7d260c287822e0f04240653bff2d8" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;&quot;^&quot;&lt;/code&gt; character is guaranteed to match only the beginning of the string, the &lt;code&gt;&quot;$&quot;&lt;/code&gt; character only the end (or before the newline at the end), and Perl does certain optimizations with the assumption that the string contains only one line. Embedded newlines will not be matched by &lt;code&gt;&quot;^&quot;&lt;/code&gt; or &lt;code&gt;&quot;$&quot;&lt;/code&gt;. You may, however, wish to treat a string as a multi-line buffer, such that the &lt;code&gt;&quot;^&quot;&lt;/code&gt; will match after any newline within the string (except if the newline is the last character in the string), and &lt;code&gt;&quot;$&quot;&lt;/code&gt; will match before any newline. At the cost of a little more overhead, you can do this by using the &lt;a href=&quot;#%2Fm&quot;&gt;&quot;&lt;code&gt;/m&lt;/code&gt;&quot;&lt;/a&gt; modifier on the pattern match operator. (Older programs did this by setting &lt;code&gt;$*&lt;/code&gt;, but this option was removed in perl 5.10.)</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;&quot;^&quot;&lt;/code&gt; 文字は文字列の先頭のみに一致し、 &lt;code&gt;&quot;$&quot;&lt;/code&gt; 文字は末尾（または末尾の改行の前）にのみ一致することが保証され、Perlは文字列にのみが含まれることを前提として特定の最適化を行います1行。埋め込まれた改行は &lt;code&gt;&quot;^&quot;&lt;/code&gt; または &lt;code&gt;&quot;$&quot;&lt;/code&gt; と一致しません。ただし、文字列を複数行のバッファとして扱い、 &lt;code&gt;&quot;^&quot;&lt;/code&gt; が文字列内の改行の後に一致し（改行が文字列の最後の文字である場合を除く）、 &lt;code&gt;&quot;$&quot;&lt;/code&gt; が一致するようにすることもできます。改行の前に一致します。もう少しオーバーヘッドがかかりますが、&lt;a href=&quot;#%2Fm&quot;&gt;「&lt;/a&gt; &lt;code&gt;/m&lt;/code&gt; 」を使用してこれを行うことができます。パターン一致演算子の修飾子。（古いプログラムは &lt;code&gt;$*&lt;/code&gt; 設定することでこれを行いましたが、このオプションはperl 5.10で削除されました。）</target>
        </trans-unit>
        <trans-unit id="492fc906b55f1b406ab710691a332ebe623491a7" translate="yes" xml:space="preserve">
          <source>By default, the check function is &lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;, the SV parameter is &lt;code&gt;cv&lt;/code&gt; itself, and the &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; flag is clear. This implements standard prototype processing. It can be changed, for a particular subroutine, by &lt;a href=&quot;#cv_set_call_checker_flags&quot;&gt;&quot;cv_set_call_checker_flags&quot;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、チェック関数は&lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;であり、SVパラメーターは &lt;code&gt;cv&lt;/code&gt; 自体であり、 &lt;code&gt;CALL_CHECKER_REQUIRE_GV&lt;/code&gt; フラグはクリアされています。これにより、標準のプロトタイプ処理が実装されます。特定のサブルーチンについては、&lt;a href=&quot;#cv_set_call_checker_flags&quot;&gt;「cv_set_call_checker_flags」&lt;/a&gt;で変更できます。</target>
        </trans-unit>
        <trans-unit id="f75c5443daebd3a0b513a176d080239244e192dd" translate="yes" xml:space="preserve">
          <source>By default, the exception derived from the operand LIST is stringified and printed to &lt;code&gt;STDERR&lt;/code&gt;. This behaviour can be altered by installing a &lt;a href=&quot;perlvar#%25SIG&quot;&gt;&lt;code&gt;$SIG{__WARN__}&lt;/code&gt;&lt;/a&gt; handler. If there is such a handler then no message is automatically printed; it is the handler's responsibility to deal with the exception as it sees fit (like, for instance, converting it into a &lt;a href=&quot;#die-LIST&quot;&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt;). Most handlers must therefore arrange to actually display the warnings that they are not prepared to deal with, by calling &lt;a href=&quot;#warn-LIST&quot;&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/a&gt; again in the handler. Note that this is quite safe and will not produce an endless loop, since &lt;code&gt;__WARN__&lt;/code&gt; hooks are not called from inside one.</source>
          <target state="translated">デフォルトでは、オペランドLISTから派生した例外は文字列化され、 &lt;code&gt;STDERR&lt;/code&gt; に出力されます。この動作は、&lt;a href=&quot;perlvar#%25SIG&quot;&gt; &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; &lt;/a&gt;ハンドラーをインストールすることで変更できます。そのようなハンドラーがある場合、メッセージは自動的に出力されません。例外を適切と判断した場合に対処するのはハンドラーの責任です（たとえば、&lt;a href=&quot;#die-LIST&quot;&gt; &lt;code&gt;die&lt;/code&gt; &lt;/a&gt;変換するなど）。したがって、ほとんどのハンドラーは、ハンドラーで再度&lt;a href=&quot;#warn-LIST&quot;&gt; &lt;code&gt;warn&lt;/code&gt; &lt;/a&gt;を呼び出すことにより、処理する準備ができていない警告を実際に表示するように調整する必要があります。 &lt;code&gt;__WARN__&lt;/code&gt; フックはフックの内部から呼び出されないため、これは非常に安全であり、無限ループを生成しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a1a870bf9d52ad0a2c1a90186336492c4ae0aed3" translate="yes" xml:space="preserve">
          <source>By default, the function is &lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;, and the SV parameter is</source>
          <target state="translated">デフォルトでは、関数は&lt;a href=&quot;#ck_entersub_args_proto_or_list&quot;&gt;Perl_ck_entersub_args_proto_or_list&lt;/a&gt;であり、SVパラメータは</target>
        </trans-unit>
        <trans-unit id="beeed48a59ea18c1b18a6cfda68d25973cd743b6" translate="yes" xml:space="preserve">
          <source>By default, the installed filter only filters up to a line consisting of one of the three standard source &quot;terminators&quot;:</source>
          <target state="translated">デフォルトでは、インストールされたフィルタは、3つの標準ソース「ターミネーター」のうちの1つからなる行までしかフィルタリングしません。</target>
        </trans-unit>
        <trans-unit id="e79e890007f8b504a54617ddbf05ff93a90734ba" translate="yes" xml:space="preserve">
          <source>By default, the only variables shared with compartments are the &quot;underscore&quot; variables $_ and @_ (and, technically, the less frequently used %_, the _ filehandle and so on). This is because otherwise perl operators which default to $_ will not work and neither will the assignment of arguments to @_ on subroutine entry.</source>
          <target state="translated">デフォルトでは、コンパートメントと共有される変数は &quot;アンダースコア &quot;変数$_と@_だけです(厳密には、あまり使われていない%_や_ファイルハンドルなど)。これは、そうでなければ $_をデフォルトにした perl の演算子は動作しませんし、サブルーチンのエントリで @_に引数を代入しても動作しないからです。</target>
        </trans-unit>
        <trans-unit id="4eebbb2dfa043331a8ced51ef018a956d406180e" translate="yes" xml:space="preserve">
          <source>By default, the pathnames are sorted in ascending ASCII order; this flag prevents that sorting (speeding up bsd_glob()).</source>
          <target state="translated">デフォルトでは、パス名は ASCII の昇順でソートされます;このフラグはソートを防ぎます (bsd_glob()を高速化します)。</target>
        </trans-unit>
        <trans-unit id="cd52d7b7234ea4b8c1ee0272333575fae9c9ac61" translate="yes" xml:space="preserve">
          <source>By default, the string appended is assumed to be valid UTF-8 if the SV has the UTF-8 status set, and a string of bytes otherwise. One can force the appended string to be interpreted as UTF-8 by supplying the &lt;code&gt;SV_CATUTF8&lt;/code&gt; flag, and as bytes by supplying the &lt;code&gt;SV_CATBYTES&lt;/code&gt; flag; the SV or the string appended will be upgraded to UTF-8 if necessary.</source>
          <target state="translated">デフォルトでは、SVにUTF-8ステータスが設定されている場合、追加された文字列は有効なUTF-8であると見なされ、そうでない場合はバイトの文字列であると見なされます。一つは、添付の文字列を強制することができ供給することによって、UTF-8として解釈されるべき &lt;code&gt;SV_CATUTF8&lt;/code&gt; のフラグ、および供給することによってバイトとして &lt;code&gt;SV_CATBYTES&lt;/code&gt; のフラグ。SVまたは追加された文字列は、必要に応じてUTF-8にアップグレードされます。</target>
        </trans-unit>
        <trans-unit id="3c44da1fa54feaff13f3357da78bc5d189559610" translate="yes" xml:space="preserve">
          <source>By default, there is a fundamental asymmetry in Perl's unicode model: implicit upgrading from byte-strings to unicode-strings assumes that they were encoded in</source>
          <target state="translated">デフォルトでは、Perl の unicode モデルには基本的な非対称性があります。</target>
        </trans-unit>
        <trans-unit id="8d41f8d85e7a977c1704e0b6aa0d1e3446f200e7" translate="yes" xml:space="preserve">
          <source>By default, this module creates an &lt;code&gt;::I18N&lt;/code&gt; subclass under the caller's package (or the package specified by &lt;code&gt;Class&lt;/code&gt; ), and stores lexicon data in its subclasses. You can assign a name other than &lt;code&gt;I18N&lt;/code&gt; via this option.</source>
          <target state="translated">デフォルトでは、このモジュールは呼び出し元のパッケージ（または &lt;code&gt;Class&lt;/code&gt; で指定されたパッケージ）の下に &lt;code&gt;::I18N&lt;/code&gt; サブクラスを作成し、そのサブクラスに辞書データを格納します。このオプションを使用して、 &lt;code&gt;I18N&lt;/code&gt; 以外の名前を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="39d93a161b8e818beee11c7a4375f2ab33e763db" translate="yes" xml:space="preserve">
          <source>By default, this module creates an &lt;code&gt;::I18N&lt;/code&gt; subclass under the caller's package (or the package specified by &lt;code&gt;Class&lt;/code&gt;), and stores lexicon data in its subclasses. You can assign a name other than &lt;code&gt;I18N&lt;/code&gt; via this option.</source>
          <target state="translated">デフォルトでは、このモジュールは呼び出し元のパッケージ（または &lt;code&gt;Class&lt;/code&gt; で指定されたパッケージ）の下に &lt;code&gt;::I18N&lt;/code&gt; サブクラスを作成し、そのサブクラスにレキシコンデータを格納します。このオプションを使用して、 &lt;code&gt;I18N&lt;/code&gt; 以外の名前を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="5949c007c079cc7a10f34781de30c09a225b6eca" translate="yes" xml:space="preserve">
          <source>By default, this module exports a single function, &lt;code&gt;loc&lt;/code&gt; , into its caller's namespace. You can set it to another name, or set it to an empty string to disable exporting.</source>
          <target state="translated">デフォルトでは、このモジュールは単一の関数 &lt;code&gt;loc&lt;/code&gt; を呼び出し元の名前空間にエクスポートします。別の名前に設定するか、空の文字列に設定してエクスポートを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="712a00a33c605be8604c3834cdbcfab88be256ac" translate="yes" xml:space="preserve">
          <source>By default, this module exports a single function, &lt;code&gt;loc&lt;/code&gt;, into its caller's namespace. You can set it to another name, or set it to an empty string to disable exporting.</source>
          <target state="translated">デフォルトでは、このモジュールは単一の関数 &lt;code&gt;loc&lt;/code&gt; を呼び出し元の名前空間にエクスポートします。別の名前に設定するか、空の文字列に設定してエクスポートを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="8ad4115958f94effa9746305a9b0cb4cffc6bd7c" translate="yes" xml:space="preserve">
          <source>By default, this module uses the &lt;code&gt;maketext&lt;/code&gt; style of &lt;code&gt;[_1]&lt;/code&gt; and &lt;code&gt;[quant,_1]&lt;/code&gt; for interpolation. Alternatively, you can specify the &lt;code&gt;gettext&lt;/code&gt; style, which uses &lt;code&gt;%1&lt;/code&gt; and &lt;code&gt;%quant(%1)&lt;/code&gt; for interpolation.</source>
          <target state="translated">デフォルトでは、このモジュールは補間に &lt;code&gt;[_1]&lt;/code&gt; および &lt;code&gt;[quant,_1]&lt;/code&gt; の &lt;code&gt;maketext&lt;/code&gt; スタイルを使用します。または、 &lt;code&gt;%1&lt;/code&gt; と &lt;code&gt;%quant(%1)&lt;/code&gt; を補間に使用する &lt;code&gt;gettext&lt;/code&gt; スタイルを指定できます。</target>
        </trans-unit>
        <trans-unit id="252a3c80bb1e3517a1330d8a71715773619ce9ac" translate="yes" xml:space="preserve">
          <source>By default, variables are private to each thread, and each newly created thread gets a private copy of each existing variable. This module allows you to share variables across different threads (and pseudo-forks on Win32). It is used together with the &lt;a href=&quot;../threads&quot;&gt;threads&lt;/a&gt; module.</source>
          <target state="translated">デフォルトでは、変数は各スレッドにプライベートであり、新しく作成された各スレッドは既存の各変数のプライベートコピーを取得します。このモジュールを使用すると、さまざまなスレッド（およびWin32の疑似フォーク）で変数を共有できます。これは&lt;a href=&quot;../threads&quot;&gt;スレッド&lt;/a&gt;モジュールと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="9f2757a28f882e9d7437545b7f1bd8e345152206" translate="yes" xml:space="preserve">
          <source>By default, variables are private to each thread, and each newly created thread gets a private copy of each existing variable. This module allows you to share variables across different threads (and pseudo-forks on Win32). It is used together with the &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; module.</source>
          <target state="translated">デフォルトでは、変数は各スレッドに対してプライベートであり、新しく作成された各スレッドは、既存の各変数のプライベートコピーを取得します。このモジュールを使用すると、さまざまなスレッド（およびWin32の疑似フォーク）間で変数を共有できます。&lt;a href=&quot;threads&quot;&gt;スレッド&lt;/a&gt;モジュールと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="6c30bfb71acf5bab76a39a204b8f603e13c705d5" translate="yes" xml:space="preserve">
          <source>By default, warnings are output to STDERR</source>
          <target state="translated">デフォルトでは、警告は STDERR に出力されます。</target>
        </trans-unit>
        <trans-unit id="08d154b38941f09ce6557f839a81a8eafedac239" translate="yes" xml:space="preserve">
          <source>By default, when a new interpreter is created as a copy of an existing one (eg via &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; ), both interpreters share the same physical my_cxt_t structure. Calling &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; (typically via the package's &lt;code&gt;CLONE()&lt;/code&gt; function), causes a byte-for-byte copy of the structure to be taken, and any future dMY_CXT will cause the copy to be accessed instead.</source>
          <target state="translated">デフォルトでは、新しいインタプリタが既存のインタプリタのコピーとして作成されると（たとえば、 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; を介して）、両方のインタプリタが同じ物理my_cxt_t構造を共有します。 &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; を呼び出すと（通常はパッケージの &lt;code&gt;CLONE()&lt;/code&gt; 関数を介して）、構造体のバイト単位のコピーが作成され、以降のdMY_CXTが代わりにコピーにアクセスします。</target>
        </trans-unit>
        <trans-unit id="8b319a76707aa4f1f8b1be359984e02b7255e6a0" translate="yes" xml:space="preserve">
          <source>By default, when a new interpreter is created as a copy of an existing one (eg via &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt;), both interpreters share the same physical my_cxt_t structure. Calling &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; (typically via the package's &lt;code&gt;CLONE()&lt;/code&gt; function), causes a byte-for-byte copy of the structure to be taken, and any future dMY_CXT will cause the copy to be accessed instead.</source>
          <target state="translated">デフォルトでは、新しいインタープリターが既存のインタープリターのコピーとして作成されると（たとえば、 &lt;code&gt;threads-&amp;gt;create()&lt;/code&gt; を介して）、両方のインタープリターが同じ物理my_cxt_t構造を共有します。 &lt;code&gt;MY_CXT_CLONE&lt;/code&gt; を呼び出すと（通常はパッケージの &lt;code&gt;CLONE()&lt;/code&gt; 関数を介して）、構造体のバイト単位のコピーが取得され、将来のdMY_CXTによって代わりにコピーがアクセスされます。</target>
        </trans-unit>
        <trans-unit id="dffafaef14fbbfda71aa3c0226b07030f61fdd39" translate="yes" xml:space="preserve">
          <source>By default, your pattern is matched case-insensitively, as if &lt;code&gt;/i&lt;/code&gt; had been specified. You can change this by saying &lt;code&gt;(?-i)&lt;/code&gt; in your pattern.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;/i&lt;/code&gt; が指定されているかのように、パターンは大文字と小文字を区別せずに照合されます。パターンで &lt;code&gt;(?-i)&lt;/code&gt; と言うことで、これを変更できます。</target>
        </trans-unit>
        <trans-unit id="1f023b47e4b490e5f3861a02400fb5ce0693a9fc" translate="yes" xml:space="preserve">
          <source>By default, your program starts in package &lt;code&gt;main&lt;/code&gt; , so you will always be in some package.</source>
          <target state="translated">デフォルトでは、プログラムはパッケージ &lt;code&gt;main&lt;/code&gt; で起動するため、常にいくつかのパッケージに入ります。</target>
        </trans-unit>
        <trans-unit id="e24e192b6da98e496fcb6606ff2b3e72e0f05fea" translate="yes" xml:space="preserve">
          <source>By default, your program starts in package &lt;code&gt;main&lt;/code&gt;, so you will always be in some package.</source>
          <target state="translated">デフォルトでは、プログラムはパッケージ &lt;code&gt;main&lt;/code&gt; で開始されるため、常に何らかのパッケージに含まれます。</target>
        </trans-unit>
        <trans-unit id="cc16f7e5e668d806fbde2fd531d2629a195bfd9c" translate="yes" xml:space="preserve">
          <source>By explicitly requiring a minimum Perl version number for your program, with the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; construct. That is,</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; VERSION&lt;/code&gt; 構文を&lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;して、プログラムの最小Perlバージョン番号を明示的に要求する。あれは、</target>
        </trans-unit>
        <trans-unit id="d7932496508fde98a4b2f745f7c16a8938bd5c70" translate="yes" xml:space="preserve">
          <source>By explicitly requiring a minimum Perl version number for your program, with the &lt;code&gt;use VERSION&lt;/code&gt; construct. That is,</source>
          <target state="translated">&lt;code&gt;use VERSION&lt;/code&gt; 構文を使用して、プログラムに最小のPerlバージョン番号を明示的に要求する。あれは、</target>
        </trans-unit>
        <trans-unit id="b496b26c66a41bb8b28e0a2591cb8dda23a4871c" translate="yes" xml:space="preserve">
          <source>By far the easiest way to build Perl for OS/400 is to use the PASE (Portable Application Solutions Environment), for more information see &lt;a href=&quot;http://www.iseries.ibm.com/developer/factory/pase/index.html&quot;&gt;http://www.iseries.ibm.com/developer/factory/pase/index.html&lt;/a&gt; This environment allows one to use AIX APIs while programming, and it provides a runtime that allows AIX binaries to execute directly on the PowerPC iSeries.</source>
          <target state="translated">これまででOS / 400用のPerlを構築するための最も簡単な方法は、より多くの情報のため、PASE（ポータブル・アプリケーション・ソリューション環境）を使用することです参照&lt;a href=&quot;http://www.iseries.ibm.com/developer/factory/pase/index.html&quot;&gt;http://www.iseries.ibm.com/developer/factory/pase/index.html&lt;/a&gt;これを環境では、プログラミング中にAIX APIを使用でき、AIXバイナリをPowerPC iSeriesで直接実行できるランタイムを提供します。</target>
        </trans-unit>
        <trans-unit id="90b268ad6928ce9b139ce0bfe20e0ab522c5a230" translate="yes" xml:space="preserve">
          <source>By far the most common reason is that the locale has characters in it that are represented by more than one byte. The only such locales that Perl can handle are the UTF-8 locales. Most likely the specified locale is a non-UTF-8 one for an East Asian language such as Chinese or Japanese. If the locale is a superset of ASCII, the ASCII portion of it may work in Perl.</source>
          <target state="translated">最も一般的な理由は、ロケールに複数のバイトで表される文字が含まれていることです。Perl が扱えるロケールは UTF-8 ロケールのみです。ほとんどの場合、指定されたロケールは、中国語や日本語などの東アジア言語用のUTF-8以外のロケールです。ロケールがASCIIのスーパーセットであれば、PerlではASCIIの部分が動作するかもしれません。</target>
        </trans-unit>
        <trans-unit id="5be86ce403211ab50be3b7ce1f4f87ec5b6bd179" translate="yes" xml:space="preserve">
          <source>By first converting the FOO-encoded byte string to a text string, and then the text string to a BAR-encoded byte string:</source>
          <target state="translated">最初にFOOエンコードされたバイト文字列をテキスト文字列に変換し、そのテキスト文字列をBARエンコードされたバイト文字列に変換することによって。</target>
        </trans-unit>
        <trans-unit id="3456e5ab0f472be26a41623d10e3cc8ff953c769" translate="yes" xml:space="preserve">
          <source>By including Exporter in your &lt;code&gt;@ISA&lt;/code&gt; you inherit an Exporter's import() method but you also inherit several other helper methods which you probably don't want. To avoid this you can do:</source>
          <target state="translated">&lt;code&gt;@ISA&lt;/code&gt; にエクスポーターを含めることにより、エクスポーターのimport（）メソッドを継承しますが、おそらく不要な他のいくつかのヘルパーメソッドも継承します。これを回避するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="583ac2704011a6bdba33e0ae7763c40858b78828" translate="yes" xml:space="preserve">
          <source>By passing a reference to a hash you may set the configuration values. This works only for values that a marked with a &lt;code&gt;RW&lt;/code&gt; above, anything else is read-only.</source>
          <target state="translated">ハッシュへの参照を渡すことにより、構成値を設定できます。これは、上記の &lt;code&gt;RW&lt;/code&gt; でマークされた値に対してのみ機能し、それ以外は読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="ffc61b70d37b8dffa55761a98d33cd6f2e713e8c" translate="yes" xml:space="preserve">
          <source>By placing &lt;code&gt;-register&lt;/code&gt; in the import list, &lt;a href=&quot;IO::Socket&quot;&gt;IO::Socket&lt;/a&gt; uses &lt;code&gt;IO::Socket::IP&lt;/code&gt; rather than &lt;code&gt;IO::Socket::INET&lt;/code&gt; as the class that handles &lt;code&gt;PF_INET&lt;/code&gt;. &lt;code&gt;IO::Socket&lt;/code&gt; will also use &lt;code&gt;IO::Socket::IP&lt;/code&gt; rather than &lt;code&gt;IO::Socket::INET6&lt;/code&gt; to handle &lt;code&gt;PF_INET6&lt;/code&gt;, provided that the &lt;code&gt;AF_INET6&lt;/code&gt; constant is available.</source>
          <target state="translated">インポートリストに &lt;code&gt;-register&lt;/code&gt; を配置することにより、&lt;a href=&quot;IO::Socket&quot;&gt;IO :: Socket&lt;/a&gt;は、 &lt;code&gt;PF_INET&lt;/code&gt; を処理するクラスとして &lt;code&gt;IO::Socket::INET&lt;/code&gt; ではなく &lt;code&gt;IO::Socket::IP&lt;/code&gt; 使用します。 &lt;code&gt;IO::Socket&lt;/code&gt; また、使用する &lt;code&gt;IO::Socket::IP&lt;/code&gt; ではなく &lt;code&gt;IO::Socket::INET6&lt;/code&gt; ハンドルに &lt;code&gt;PF_INET6&lt;/code&gt; ことを提供し、 &lt;code&gt;AF_INET6&lt;/code&gt; の定数が使用可能です。</target>
        </trans-unit>
        <trans-unit id="e30293ddc7efc1598420ad5a32ac1415cea4ba8a" translate="yes" xml:space="preserve">
          <source>By running &quot;&lt;code&gt;make test&lt;/code&gt; &quot;, you ensure that your Mytest.t script runs and uses the correct version of your extension. If you have many test cases, save your test files in the &quot;t&quot; directory and use the suffix &quot;.t&quot;. When you run &quot;&lt;code&gt;make test&lt;/code&gt; &quot;, all of these test files will be executed.</source>
          <target state="translated">「 &lt;code&gt;make test&lt;/code&gt; 」を実行すると、Mytest.tスクリプトが実行され、正しいバージョンの拡張機能を使用するようになります。テストケースが多数ある場合は、テストファイルを「t」ディレクトリに保存し、サフィックス「.t」を使用します。「 &lt;code&gt;make test&lt;/code&gt; 」を実行すると、これらすべてのテストファイルが実行されます。</target>
        </trans-unit>
        <trans-unit id="b012b405c2fff7730ead4df76d693c2db095ab5d" translate="yes" xml:space="preserve">
          <source>By running &quot;&lt;code&gt;make test&lt;/code&gt;&quot;, you ensure that your Mytest.t script runs and uses the correct version of your extension. If you have many test cases, save your test files in the &quot;t&quot; directory and use the suffix &quot;.t&quot;. When you run &quot;&lt;code&gt;make test&lt;/code&gt;&quot;, all of these test files will be executed.</source>
          <target state="translated">「実行することで &lt;code&gt;make test&lt;/code&gt; 」、あなたはあなたのMytest.tスクリプトが実行され、あなたの拡張機能の正しいバージョンを使用していることを確認してください。多くのテストケースがある場合は、テストファイルを「t」ディレクトリに保存し、接尾辞「.t」を使用します。あなたが「実行すると &lt;code&gt;make test&lt;/code&gt; 」、これらのテストのすべてのファイルが実行されます。</target>
        </trans-unit>
        <trans-unit id="49d2ff2073c166abecd08a90ef566dc2e86a7f38" translate="yes" xml:space="preserve">
          <source>By setting and then using &lt;code&gt;$var&lt;/code&gt; in this way relieves you from having to worry about exactly which numbered set of parentheses they are.</source>
          <target state="translated">このように &lt;code&gt;$var&lt;/code&gt; を設定して使用することで、括弧の番号付きセットを正確に気にする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="265fb107c25a0f703500d08dbe4e8f2787903896" translate="yes" xml:space="preserve">
          <source>By setting it to an empty string you can generate a Makefile that prints all commands. Mainly used in debugging MakeMaker itself.</source>
          <target state="translated">空文字列に設定することで、すべてのコマンドを表示するMakefileを生成することができます。主に MakeMaker 自体のデバッグに使用します。</target>
        </trans-unit>
        <trans-unit id="619bd2bab7e99a9933fcadbbac647cbc3917a48b" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;:loose&lt;/code&gt; , Unicode's &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr44%23Matching_Rules&quot;&gt;loose character name matching&lt;/a&gt; rules are selected instead of the strict exact match used otherwise. That means that</source>
          <target state="translated">&lt;code&gt;:loose&lt;/code&gt; を指定すると、Unicodeの&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.unicode.org%2freports%2ftr44%23Matching_Rules&quot;&gt;緩い文字名の一致&lt;/a&gt;ルールが選択されます。つまり</target>
        </trans-unit>
        <trans-unit id="409281df47ba60298eba1ac37bc10f01f4eb2677" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;:loose&lt;/code&gt;, Unicode's &lt;a href=&quot;http://www.unicode.org/reports/tr44#Matching_Rules&quot;&gt;loose character name matching&lt;/a&gt; rules are selected instead of the strict exact match used otherwise. That means that</source>
          <target state="translated">&lt;code&gt;:loose&lt;/code&gt; を指定すると、他の方法で使用される厳密な完全一致の代わりに、Unicodeの&lt;a href=&quot;http://www.unicode.org/reports/tr44#Matching_Rules&quot;&gt;緩い文字名の一致&lt;/a&gt;ルールが選択されます。つまり、</target>
        </trans-unit>
        <trans-unit id="4173811273acdfc3b518c06a8c9add11d80be073" translate="yes" xml:space="preserve">
          <source>By subclassing, you may end up overriding undocumented methods. That's not a bad thing per se, but be forewarned that undocumented methods may change without warning from one release to the next - we cannot guarantee backwards compatibility. If any</source>
          <target state="translated">サブクラス化することで、文書化されていないメソッドをオーバーライドすることになるかもしれません。それ自体は悪いことではありませんが、文書化されていないメソッドはあるリリースから次のリリースへと警告なしに変更される可能性があることに注意してください。もし</target>
        </trans-unit>
        <trans-unit id="7963af28b4afe4fecf3771e6be636d3a37450528" translate="yes" xml:space="preserve">
          <source>By the time Perl 5 rolled around, we were already stuck with this design: Hash values must be scalars. The solution to this is references.</source>
          <target state="translated">Perl 5がロールアップされる頃には、すでにこのデザインにはまっていました。ハッシュ値はスカラーでなければなりません。これを解決するのが参照です。</target>
        </trans-unit>
        <trans-unit id="92f8d8ab799211d118cdd3b80bc6282c36c18e07" translate="yes" xml:space="preserve">
          <source>By the time each of the &lt;code&gt;SaveSub1&lt;/code&gt; statements above has been executed, the SV*s which corresponded to the parameters will no longer exist. Expect an error message from Perl of the form</source>
          <target state="translated">上記の各 &lt;code&gt;SaveSub1&lt;/code&gt; ステートメントが実行されるまでに、パラメーターに対応するSV *は存在しなくなります。次の形式のPerlからのエラーメッセージが予期されます</target>
        </trans-unit>
        <trans-unit id="334c1508a5d779cb0c1040092154fbe0583ab19f" translate="yes" xml:space="preserve">
          <source>By the time the comp callback is called, some of these flags have already had effect (noted below where applicable). However most of their effect occurs after the comp callback has run, in routines that read the &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; field which it populates.</source>
          <target state="translated">compコールバックが呼び出されるまでに、これらのフラグの一部はすでに有効になっています（該当する場合は以下に記載）。ただし、それらの効果のほとんどは、compコールバックが実行された後に、それが入力する &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; フィールドを読み取るルーチンで発生します。</target>
        </trans-unit>
        <trans-unit id="72795a79e31e2518cbd921d2bc0697a1bdbd6144" translate="yes" xml:space="preserve">
          <source>By tuning the stack size to more accurately reflect your application's needs, you may significantly reduce your application's memory usage, and increase the number of simultaneously running threads.</source>
          <target state="translated">スタックサイズを調整してアプリケーションのニーズをより正確に反映させることで、アプリケーションのメモリ使用量を大幅に削減し、同時に実行するスレッドの数を増やすことができます。</target>
        </trans-unit>
        <trans-unit id="bd379fb72b0b513ca230e24dca7f155e46117288" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;NEXT::ACTUAL&lt;/code&gt; , if there is no other &lt;code&gt;AUTOLOAD&lt;/code&gt; to handle the method call, an exception will be thrown (as usually happens in the absence of a suitable &lt;code&gt;AUTOLOAD&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;NEXT::ACTUAL&lt;/code&gt; を使用することにより、メソッド呼び出しを処理する他の &lt;code&gt;AUTOLOAD&lt;/code&gt; がない場合は、例外がスローされます（通常、適切な &lt;code&gt;AUTOLOAD&lt;/code&gt; がない場合に発生します）。</target>
        </trans-unit>
        <trans-unit id="cc2a57a1ff280502a7e9bf05c718df68c27f204e" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;NEXT::ACTUAL&lt;/code&gt;, if there is no other &lt;code&gt;AUTOLOAD&lt;/code&gt; to handle the method call, an exception will be thrown (as usually happens in the absence of a suitable &lt;code&gt;AUTOLOAD&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;NEXT::ACTUAL&lt;/code&gt; を使用すると、メソッド呼び出しを処理する &lt;code&gt;AUTOLOAD&lt;/code&gt; が他にない場合、例外がスローされます（通常、適切な &lt;code&gt;AUTOLOAD&lt;/code&gt; がない場合に発生します）。</target>
        </trans-unit>
        <trans-unit id="f260eb29b6f0673bfdb6b907d310d5d3920f6717" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;-E&lt;/code&gt; switch on the Perl command-line instead of &lt;code&gt;-e&lt;/code&gt; . That will enable the feature bundle for that version of Perl in the main compilation unit (that is, the one-liner that follows &lt;code&gt;-E&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; の代わりにPerlコマンドラインで &lt;code&gt;-E&lt;/code&gt; スイッチを使用する。これにより、メインコンパイルユニット（つまり、 &lt;code&gt;-E&lt;/code&gt; に続く1行）で、そのバージョンのPerlの機能バンドルが有効になります。</target>
        </trans-unit>
        <trans-unit id="23fbc447da7d6e302f0723443cc59549d355126a" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;-E&lt;/code&gt; switch on the Perl command-line instead of &lt;code&gt;-e&lt;/code&gt;. That will enable the feature bundle for that version of Perl in the main compilation unit (that is, the one-liner that follows &lt;code&gt;-E&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; の代わりにPerlコマンドラインで &lt;code&gt;-E&lt;/code&gt; スイッチを使用する。これにより、メインコンパイルユニットでそのバージョンのPerlの機能バンドルが有効になります（つまり、 &lt;code&gt;-E&lt;/code&gt; に続くワンライナー）。</target>
        </trans-unit>
        <trans-unit id="9dfef463e4e713cbb716245b6be6a4856999a34d" translate="yes" xml:space="preserve">
          <source>By using the WWW interface you can ask the Upload Server to mirror your modules from your ftp or WWW site into your own directory on CPAN!</source>
          <target state="translated">WWWインターフェースを使用して、アップロードサーバに、FTPまたはWWWサイトからCPAN上の自分のディレクトリにモジュールをミラーリングするように依頼することができます!</target>
        </trans-unit>
        <trans-unit id="4f37c6bc860992a71dc03ba0a6eb8583644d0eac" translate="yes" xml:space="preserve">
          <source>By using the backslash operator on a variable, subroutine, or value. (This works much like the &amp;amp; (address-of) operator in C.) This typically creates</source>
          <target state="translated">変数、サブルーチン、または値にバックスラッシュ演算子を使用する。（これは、Cの＆（address-of）演算子のように機能します。）これは通常、</target>
        </trans-unit>
        <trans-unit id="4fea865bf2bc7c769f8247d0ffedba42a3ee67f2" translate="yes" xml:space="preserve">
          <source>By way of demonstration, we present below a laborious listing resulting from setting your &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable to the value &lt;code&gt;f=n N&lt;/code&gt; , and running</source>
          <target state="translated">デモとして、 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 環境変数を値 &lt;code&gt;f=n N&lt;/code&gt; に設定して実行した結果の面倒なリストを以下に示します。</target>
        </trans-unit>
        <trans-unit id="762b8206672bed376e88659055a2184381b41345" translate="yes" xml:space="preserve">
          <source>By way of demonstration, we present below a laborious listing resulting from setting your &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable to the value &lt;code&gt;f=n N&lt;/code&gt;, and running</source>
          <target state="translated">デモンストレーションとして、 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 環境変数を値 &lt;code&gt;f=n N&lt;/code&gt; に設定し、実行した結果として生じる面倒なリストを以下に示します。</target>
        </trans-unit>
        <trans-unit id="05ff92e836fe1c104b327e3d41d6f42c1c2f68cf" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getgr*() functions</source>
          <target state="translated">Perl の組み込み getgr*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="8701f0c6760ad255897a2adbc246d9e8608c8d7a" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in gethost*() functions</source>
          <target state="translated">Perl の組み込み gethost*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="8edbac978dbd72904307e2cc9662b26a10b3bd66" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getnet*() functions</source>
          <target state="translated">Perl の組み込み getnet*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="905cb97e8ed297dc43dcd08d2a9db1d9958b4ddc" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getproto*() functions</source>
          <target state="translated">Perl の組み込み getproto*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="7980958e534d59fc2ef012727304a32f6778bc74" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getpw*() functions</source>
          <target state="translated">Perl の組み込み getpw*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="8c13e6c841eee178cc9c90b3ec31731fb7b6e9d6" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in getserv*() functions</source>
          <target state="translated">Perl の組み込み getserv*()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="10bacc859a37b5cb2457a9867f2de200be21a6bd" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in gmtime() function</source>
          <target state="translated">Perl の組み込み関数 gmtime()の名前によるインターフェース</target>
        </trans-unit>
        <trans-unit id="827cbeee072a43490f322081b175fcaabf1286c6" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in localtime() function</source>
          <target state="translated">Perl の組み込み localtime()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="34a637e08658f8356d26a5052ced9a5575ccaa48" translate="yes" xml:space="preserve">
          <source>By-name interface to Perl's built-in stat() functions</source>
          <target state="translated">Perl の組み込み stat()関数への名前によるインターフェイス</target>
        </trans-unit>
        <trans-unit id="00a7465e9ae8fc45cdd85380909fc57080f23c9d" translate="yes" xml:space="preserve">
          <source>Bypass shell script and produce qualifiers for CC directly (but warn user if a shell script for this extension exists). Fold multiple /Defines into one, since some C compilers pay attention to only one instance of this qualifier on the command line.</source>
          <target state="translated">シェルスクリプトをバイパスして CC 用の修飾子を直接生成します (ただし、この拡張のためのシェルスクリプトが存在する場合はユーザに警告します)。複数の /Define を一つに折りたたむ。</target>
        </trans-unit>
        <trans-unit id="9f9d63573452a4bd55326feb5fe5283989ad472d" translate="yes" xml:space="preserve">
          <source>Byte and Character Semantics</source>
          <target state="translated">バイトと文字の意味</target>
        </trans-unit>
        <trans-unit id="1e6a3eac8ab6b01ca95c7c44eb60befc42854a50" translate="yes" xml:space="preserve">
          <source>Byte order is not compatible</source>
          <target state="translated">バイト順は互換性がありません</target>
        </trans-unit>
        <trans-unit id="635424c9374984012107c0dd02fd2041e999753a" translate="yes" xml:space="preserve">
          <source>Byte-order modifiers</source>
          <target state="translated">バイトオーダー修飾子</target>
        </trans-unit>
        <trans-unit id="b0cb8dbe3d4ffe27cb86b68da21fae1475b9d341" translate="yes" xml:space="preserve">
          <source>Byteorders &lt;code&gt;&quot;1234&quot;&lt;/code&gt; and &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; are little-endian; &lt;code&gt;&quot;4321&quot;&lt;/code&gt; and &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; are big-endian. Systems with multiarchitecture binaries will have &lt;code&gt;&quot;ffff&quot;&lt;/code&gt; , signifying that static information doesn't work, one must use runtime probing.</source>
          <target state="translated">バイトオーダー &lt;code&gt;&quot;1234&quot;&lt;/code&gt; と &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; はリトルエンディアンです。 &lt;code&gt;&quot;4321&quot;&lt;/code&gt; と &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; はビッグエンディアンです。マルチアーキテクチャバイナリを備えたシステムには &lt;code&gt;&quot;ffff&quot;&lt;/code&gt; があり、静的情報が機能しないことを示します。ランタイムプローブを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1d6d1561fa64dc379f38a143df1bb4bb4ff06800" translate="yes" xml:space="preserve">
          <source>Byteorders &lt;code&gt;&quot;1234&quot;&lt;/code&gt; and &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; are little-endian; &lt;code&gt;&quot;4321&quot;&lt;/code&gt; and &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; are big-endian. Systems with multiarchitecture binaries will have &lt;code&gt;&quot;ffff&quot;&lt;/code&gt;, signifying that static information doesn't work, one must use runtime probing.</source>
          <target state="translated">バイトオーダー &lt;code&gt;&quot;1234&quot;&lt;/code&gt; および &lt;code&gt;&quot;12345678&quot;&lt;/code&gt; はリトルエンディアンです。 &lt;code&gt;&quot;4321&quot;&lt;/code&gt; と &lt;code&gt;&quot;87654321&quot;&lt;/code&gt; はビッグエンディアンです。マルチアーキテクチャバイナリを備えたシステムには &lt;code&gt;&quot;ffff&quot;&lt;/code&gt; があり、静的情報が機能しないことを示します。ランタイムプロービングを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3272df7ee0cf3835350319a829ff6f62b6d4f831" translate="yes" xml:space="preserve">
          <source>Bytes in the source text that are not in the ASCII character set will be treated as being part of a literal UTF-8 sequence. This includes most literals such as identifier names, string constants, and constant regular expression patterns.</source>
          <target state="translated">ソーステキスト内の ASCII 文字セット以外のバイトは、リテラル UTF-8 シーケンスの一部として扱われます。これには、識別子名、文字列定数、定数正規表現パターンなどのほとんどのリテラルが含まれます。</target>
        </trans-unit>
        <trans-unit id="7bf6c5677e50bfc87de6c08c11b4d2bd476a1535" translate="yes" xml:space="preserve">
          <source>Bytes in the source text that have their high-bit set will be treated as being part of a literal UTF-X sequence. This includes most literals such as identifier names, string constants, and constant regular expression patterns.</source>
          <target state="translated">ソーステキス ト 内の高 ビ ッ ト 集合を持つバ イ ト は、 リ テ ラ ル UTF-X シーケ ン ス の一部 と し て扱われます。これには、識別子名、文字列定数、定数正規表現パターンなどのほとんどのリテラルが含まれます。</target>
        </trans-unit>
        <trans-unit id="ede17bae171156d89f14a0594c04dccf3d5c2c4c" translate="yes" xml:space="preserve">
          <source>Bytes that correspond to ASCII-range code points will have their normal meanings for operators in the string. The treatment of the other bytes depends on if the &lt;a href=&quot;feature#The-%27unicode_strings%27-feature&quot;&gt;&lt;code&gt;'unicode_strings&quot;&lt;/code&gt; feature&lt;/a&gt; is in effect.</source>
          <target state="translated">ASCII範囲のコードポイントに対応するバイトは、文字列内の演算子に対して通常の意味を持ちます。他のバイトの処理は、&lt;a href=&quot;feature#The-%27unicode_strings%27-feature&quot;&gt; &lt;code&gt;'unicode_strings&quot;&lt;/code&gt; 機能&lt;/a&gt;が有効かどうかによって異なります。</target>
        </trans-unit>
        <trans-unit id="227fdfe21232054f75a3165f51d73d4e5aa71986" translate="yes" xml:space="preserve">
          <source>Bzip2</source>
          <target state="translated">Bzip2</target>
        </trans-unit>
        <trans-unit id="b72c1bfc3d1aa62c14107ddc13ff2beb37ac2390" translate="yes" xml:space="preserve">
          <source>Bzip2 (method 12)</source>
          <target state="translated">Bzip2 (方法12)</target>
        </trans-unit>
        <trans-unit id="73bb7f85363a7a7907526dffcd31355e1e334924" translate="yes" xml:space="preserve">
          <source>Bzip2 Compression Options</source>
          <target state="translated">Bzip2 圧縮オプション</target>
        </trans-unit>
        <trans-unit id="8d9aa98649ca48285f49e53319341c39216b042a" translate="yes" xml:space="preserve">
          <source>Bzip2 Resources</source>
          <target state="translated">Bzip2 リソース</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="c380132bd13732c2a4492b58e8089f6c672f3148" translate="yes" xml:space="preserve">
          <source>C API</source>
          <target state="translated">シーエーピーアイ</target>
        </trans-unit>
        <trans-unit id="129226dbff7ac0a26641ae86a93a3ce3ab2b8aca" translate="yes" xml:space="preserve">
          <source>C Operators Missing From Perl</source>
          <target state="translated">Perl から消えた C 演算子</target>
        </trans-unit>
        <trans-unit id="b810a5ecd150e1d0012428a848e5d769f60fea9b" translate="yes" xml:space="preserve">
          <source>C RTL</source>
          <target state="translated">CRTL</target>
        </trans-unit>
        <trans-unit id="17a5304c5884fe220f513c1c918ef7adab324995" translate="yes" xml:space="preserve">
          <source>C backtrace</source>
          <target state="translated">Cバックトレース</target>
        </trans-unit>
        <trans-unit id="a16bcf14a78c44b6bfc6c36207ff504cb459f2ef" translate="yes" xml:space="preserve">
          <source>C code</source>
          <target state="translated">シーコード</target>
        </trans-unit>
        <trans-unit id="ebcfbca1a38de887c4893368cd463906e0bbe7b3" translate="yes" xml:space="preserve">
          <source>C code to place between the assignment of value (to a temporary) and the return from the function. This allows you to clear up anything in</source>
          <target state="translated">値の代入(一時的なものへの)と関数からの戻り値の間に配置するCコード。これにより</target>
        </trans-unit>
        <trans-unit id="538185c3d7f303f06af9140ec0da107705c84d52" translate="yes" xml:space="preserve">
          <source>C code to use before the assignment of the value of the constant. This allows you to use temporary variables to extract a value from part of a &lt;code&gt;struct&lt;/code&gt; and return this as</source>
          <target state="translated">定数の値を割り当てる前に使用するCコード。これにより、一時変数を使用して &lt;code&gt;struct&lt;/code&gt; 一部から値を抽出し、これを次のように返すことができます</target>
        </trans-unit>
        <trans-unit id="0d6da997067e1b793fb43677b57abb70e6d14673" translate="yes" xml:space="preserve">
          <source>C doesn't have a concept of local scope, so perl provides one. We've seen that &lt;code&gt;ENTER&lt;/code&gt; and &lt;code&gt;LEAVE&lt;/code&gt; are used as scoping braces; the save stack implements the C equivalent of, for example:</source>
          <target state="translated">Cにはローカルスコープの概念がないため、perlが提供します。 &lt;code&gt;ENTER&lt;/code&gt; と &lt;code&gt;LEAVE&lt;/code&gt; がスコープブレースとして使用されているのを見てきました。保存スタックは、たとえば次のCと同等のものを実装します。</target>
        </trans-unit>
        <trans-unit id="062ffdd22a0d9502c039f8528f8150dbe0714cfe" translate="yes" xml:space="preserve">
          <source>C function parameters are normally initialized with their values from the argument stack (which in turn contains the parameters that were passed to the XSUB from Perl). The typemaps contain the code segments which are used to translate the Perl values to the C parameters. The programmer, however, is allowed to override the typemaps and supply alternate (or additional) initialization code. Initialization code starts with the first &lt;code&gt;=&lt;/code&gt; , &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; on a line in the INPUT: section. The only exception happens if this &lt;code&gt;;&lt;/code&gt; terminates the line, then this &lt;code&gt;;&lt;/code&gt; is quietly ignored.</source>
          <target state="translated">C関数パラメーターは通常、引数スタック（PerlからXSUBに渡されたパラメーターを含む）からの値で初期化されます。タイプマップには、Perl値をCパラメータに変換するために使用されるコードセグメントが含まれています。ただし、プログラマはタイプマップをオーバーライドして、代替（または追加の）初期化コードを提供できます。初期化コードは、最初から始まります &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;;&lt;/code&gt; または、INPUT：セクションの行で &lt;code&gt;+&lt;/code&gt; 。これが唯一の例外 &lt;code&gt;;&lt;/code&gt; 行を終了し、次にthis &lt;code&gt;;&lt;/code&gt; 静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="213fb315de520b456a3df78bdf4d7f2421cc02be" translate="yes" xml:space="preserve">
          <source>C function parameters are normally initialized with their values from the argument stack (which in turn contains the parameters that were passed to the XSUB from Perl). The typemaps contain the code segments which are used to translate the Perl values to the C parameters. The programmer, however, is allowed to override the typemaps and supply alternate (or additional) initialization code. Initialization code starts with the first &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; on a line in the INPUT: section. The only exception happens if this &lt;code&gt;;&lt;/code&gt; terminates the line, then this &lt;code&gt;;&lt;/code&gt; is quietly ignored.</source>
          <target state="translated">C関数パラメーターは通常、引数スタックからの値で初期化されます（これには、PerlからXSUBに渡されたパラメーターが含まれます）。タイプマップには、Perl値をCパラメーターに変換するために使用されるコードセグメントが含まれています。ただし、プログラマーはタイプマップをオーバーライドして、代替（または追加の）初期化コードを提供することができます。初期化コードは最初の &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;;&lt;/code&gt; で始まります。または、INPUT：セクションの行に &lt;code&gt;+&lt;/code&gt; 。唯一の例外は、これが発生した場合に発生し &lt;code&gt;;&lt;/code&gt; 行を終了し、次にこれ &lt;code&gt;;&lt;/code&gt; 静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="33ca94bf1de4049e4f9bdaa005b019e6d57ed90a" translate="yes" xml:space="preserve">
          <source>C header file. This file contains a series of macros and, if explicitly requested, functions that allow XS modules to be built using older versions of Perl. Currently, Perl versions from 5.003 to 5.20 are supported.</source>
          <target state="translated">Cヘッダファイル。このファイルには、一連のマクロと、明示的に要求された場合には、古いバージョンのPerlを使ってXSモジュールを構築するための関数が含まれています。現在、Perlのバージョンは5.003から5.20までがサポートされています。</target>
        </trans-unit>
        <trans-unit id="2d0d49f7751613335f0d49f8a0f5d1a5a2b15669" translate="yes" xml:space="preserve">
          <source>C header file. This file contains a series of macros and, if explicitly requested, functions that allow XS modules to be built using older versions of Perl. Currently, Perl versions from 5.003_07 to 5.31.6 are supported.</source>
          <target state="translated">Cヘッダファイル。このファイルには、一連のマクロと、明示的に要求された場合には、古いバージョンのPerlを使ってXSモジュールをビルドできるようにする関数が含まれています。現在、5.003_07から5.31.6までのPerlがサポートされています。</target>
        </trans-unit>
        <trans-unit id="a90cbbad6ac1bd0dbc637e8984710d08b0d07f9c" translate="yes" xml:space="preserve">
          <source>C header file.)</source>
          <target state="translated">Cヘッダファイルを使用しています。)</target>
        </trans-unit>
        <trans-unit id="c22974d869d3644dd5d37745dcc22b37d2c1793e" translate="yes" xml:space="preserve">
          <source>C implementations</source>
          <target state="translated">シーインプリメンテーション</target>
        </trans-unit>
        <trans-unit id="6475b4e6bb646eb3e0b6202577ce4b2fb0cd180d" translate="yes" xml:space="preserve">
          <source>C keyword introducing a structure definition or name.</source>
          <target state="translated">構造体の定義や名前を導入するCキーワード。</target>
        </trans-unit>
        <trans-unit id="399adcb6a34b5f69b459a531d78f258d2967e635" translate="yes" xml:space="preserve">
          <source>C library functions instead. In this case &lt;code&gt;memchr&lt;/code&gt; can be used to see if &lt;code&gt;c&lt;/code&gt; is in &lt;code&gt;&quot;list&quot;&lt;/code&gt; and works even if &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;NUL&lt;/code&gt;. These functions need an additional parameter to give the string length. In the case of literal string parameters, perl has defined macros that calculate the length for you. See &lt;a href=&quot;perlapi#Miscellaneous-Functions&quot;&gt;&quot;Miscellaneous Functions&quot; in perlapi&lt;/a&gt;.</source>
          <target state="translated">代わりにCライブラリ関数。この場合、 &lt;code&gt;memchr&lt;/code&gt; を使用して、 &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;&quot;list&quot;&lt;/code&gt; かどうかを確認し、 &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;NUL&lt;/code&gt; であっても機能します。これらの関数には、文字列の長さを指定するための追加のパラメーターが必要です。リテラル文字列パラメータの場合、perlは長さを計算するマクロを定義しています。&lt;a href=&quot;perlapi#Miscellaneous-Functions&quot;&gt;perlapiの「その他の機能」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8e71f3bcd3ba5c06990be4ccb0628ea48bb58a61" translate="yes" xml:space="preserve">
          <source>C preprocessor</source>
          <target state="translated">シープリプロセッサ</target>
        </trans-unit>
        <trans-unit id="0a4b78bc2d00244d4f2291c70d25ad9ed10ec746" translate="yes" xml:space="preserve">
          <source>C preprocessor directives are allowed within BOOT:, PREINIT: INIT:, CODE:, PPCODE:, POSTCALL:, and CLEANUP: blocks, as well as outside the functions. Comments are allowed anywhere after the MODULE keyword. The compiler will pass the preprocessor directives through untouched and will remove the commented lines. POD documentation is allowed at any point, both in the C and XS language sections. POD must be terminated with a &lt;code&gt;=cut&lt;/code&gt; command; &lt;code&gt;xsubpp&lt;/code&gt; will exit with an error if it does not. It is very unlikely that human generated C code will be mistaken for POD, as most indenting styles result in whitespace in front of any line starting with &lt;code&gt;=&lt;/code&gt; . Machine generated XS files may fall into this trap unless care is taken to ensure that a space breaks the sequence &quot;\n=&quot;.</source>
          <target state="translated">Cプリプロセッサディレクティブは、BOOT：、PREINIT：INIT：、CODE：、PPCODE：、POSTCALL :、およびCLEANUP：ブロック内、および関数の外部で使用できます。コメントは、MODULEキーワードの後であればどこでも許可されます。コンパイラはプリプロセッサディレクティブをそのまま渡し、コメント化された行を削除します。 POD文書は、CおよびXS言語セクションの両方で、いつでも許可されます。 PODは &lt;code&gt;=cut&lt;/code&gt; コマンドで終了する必要があります。存在しない場合、 &lt;code&gt;xsubpp&lt;/code&gt; はエラーで終了します。ほとんどのインデントスタイルでは &lt;code&gt;=&lt;/code&gt; で始まる行の前に空白ができるため、人間が生成したCコードがPODと間違われることはほとんどありません。スペースがシーケンス「\ n =」を分割するように注意を払わない限り、マシン生成のXSファイルはこのトラップに分類される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d8020cdca86500f6da443db0c3bcae725eafd266" translate="yes" xml:space="preserve">
          <source>C preprocessor directives are allowed within BOOT:, PREINIT: INIT:, CODE:, PPCODE:, POSTCALL:, and CLEANUP: blocks, as well as outside the functions. Comments are allowed anywhere after the MODULE keyword. The compiler will pass the preprocessor directives through untouched and will remove the commented lines. POD documentation is allowed at any point, both in the C and XS language sections. POD must be terminated with a &lt;code&gt;=cut&lt;/code&gt; command; &lt;code&gt;xsubpp&lt;/code&gt; will exit with an error if it does not. It is very unlikely that human generated C code will be mistaken for POD, as most indenting styles result in whitespace in front of any line starting with &lt;code&gt;=&lt;/code&gt;. Machine generated XS files may fall into this trap unless care is taken to ensure that a space breaks the sequence &quot;\n=&quot;.</source>
          <target state="translated">Cプリプロセッサディレクティブは、BOOT：、PREINIT：INIT：、CODE：、PPCODE：、POSTCALL ：、およびCLEANUP：ブロック内、および関数の外部で使用できます。コメントは、MODULEキーワードの後のどこでも許可されます。コンパイラは、プリプロセッサディレクティブをそのまま通過させ、コメント行を削除します。 PODドキュメントは、C言語セクションとXS言語セクションの両方でいつでも許可されます。 PODは &lt;code&gt;=cut&lt;/code&gt; コマンドで終了する必要があります。そうでない場合、 &lt;code&gt;xsubpp&lt;/code&gt; はエラーで終了します。ほとんどのインデントスタイルでは、 &lt;code&gt;=&lt;/code&gt; で始まる行の前に空白が生じるため、人間が生成したCコードがPODと間違われる可能性はほとんどありません。スペースがシーケンス「\ n =」を壊さないように注意しない限り、マシンで生成されたXSファイルがこのトラップに分類される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8b72786c4e2763e287b454e5689b07155e0cdb40" translate="yes" xml:space="preserve">
          <source>C&amp;lt;_pc_chown_restricted&amp;gt; symbol (for example, Windows NT) it is assumed that ``chown() giveaway'' is possible and the recursive test is performed.</source>
          <target state="translated">C &amp;lt;_pc_chown_restricted&amp;gt;シンボル（たとえば、Windows NT）は、「chown（）プレゼント」が可能であると想定され、再帰テストが実行されます。</target>
        </trans-unit>
        <trans-unit id="1978f4f5f2811138c5f2f911584623110e67b626" translate="yes" xml:space="preserve">
          <source>C++-style one-line '//'-comments (JSON::PP only)</source>
          <target state="translated">C++スタイルの一行 '//' コメント (JSON::PP のみ)</target>
        </trans-unit>
        <trans-unit id="d682623210c6b24f8d8f68ce43a83783f1b6c8af" translate="yes" xml:space="preserve">
          <source>C-style Logical And</source>
          <target state="translated">Cスタイルの論理的な</target>
        </trans-unit>
        <trans-unit id="468d5b286c1316bc4a6baa7daaefae5e90272197" translate="yes" xml:space="preserve">
          <source>C-style Logical Or</source>
          <target state="translated">Cスタイルのロジカルオー</target>
        </trans-unit>
        <trans-unit id="737b024863913bee156948e275791da6eb8f4b38" translate="yes" xml:space="preserve">
          <source>C-style multiple-line '/* */'-comments (JSON::PP only)</source>
          <target state="translated">C 形式の複数行 '/**/' -コメント (JSON::PP のみ)</target>
        </trans-unit>
        <trans-unit id="0403ad1f3298e7e9e68a2636bf42146ffa41b4ae" translate="yes" xml:space="preserve">
          <source>C. BUILD</source>
          <target state="translated">C.BUILD</target>
        </trans-unit>
        <trans-unit id="253cf957599cb78b1482e6eb5a8fa9c3483eda97" translate="yes" xml:space="preserve">
          <source>C.UTF</source>
          <target state="translated">C.UTF</target>
        </trans-unit>
        <trans-unit id="624f656f2b44769e8027ab2f2c47b638fe6eea88" translate="yes" xml:space="preserve">
          <source>C/C++ Traps</source>
          <target state="translated">C/C++のトラップ</target>
        </trans-unit>
        <trans-unit id="d8bdd8cfb0c27a9643fac03c57e2c9dde9e10b0d" translate="yes" xml:space="preserve">
          <source>C3 is the name of an algorithm which aims to provide a sane method resolution order under multiple inheritance. It was first introduced in the language Dylan (see links in the &lt;a href=&quot;#SEE-ALSO&quot;&gt;&quot;SEE ALSO&quot;&lt;/a&gt; section), and then later adopted as the preferred MRO (Method Resolution Order) for the new-style classes in Python 2.3. Most recently it has been adopted as the &quot;canonical&quot; MRO for Perl 6 classes, and the default MRO for Parrot objects as well.</source>
          <target state="translated">C3は、多重継承の下で適切なメソッド解決順序を提供することを目的としたアルゴリズムの名前です。これは最初にDylan言語で導入され（&lt;a href=&quot;#SEE-ALSO&quot;&gt;「関連&lt;/a&gt;項目」セクションのリンクを参照）、その後、Python 2.3の新しいスタイルのクラスの優先MRO（メソッド解決順序）として採用されました。最近では、Perl 6クラスの「正規の」MROとして採用されており、ParrotオブジェクトのデフォルトのMROとしても採用されています。</target>
        </trans-unit>
        <trans-unit id="633490a93f1c6b59da0e4592f3c36f5d9d5fc276" translate="yes" xml:space="preserve">
          <source>C3 is the name of an algorithm which aims to provide a sane method resolution order under multiple inheritance. It was first introduced in the language Dylan (see links in the &lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt; section), and then later adopted as the preferred MRO (Method Resolution Order) for the new-style classes in Python 2.3. Most recently it has been adopted as the &quot;canonical&quot; MRO for Perl 6 classes, and the default MRO for Parrot objects as well.</source>
          <target state="translated">C3は、多重継承のもとで正しいメソッド解決順序を提供することを目的とするアルゴリズムの名前です。なお、第1（のリンクを参照言語ディランに導入された&lt;a href=&quot;#SEE-ALSO&quot;&gt;SEE ALSO&lt;/a&gt;セクション）、およびその後のPython 2.3の新スタイルクラスに好適MRO（メソッド解決順序）として採用します。最近では、Perl 6クラスの「正規」MROとして採用されており、ParrotオブジェクトのデフォルトMROとしても採用されています。</target>
        </trans-unit>
        <trans-unit id="4aa8a8fa5eacc54ba9f8a4e755d8440833ba62a6" translate="yes" xml:space="preserve">
          <source>C3 works by always preserving local precedence ordering. This essentially means that no class will appear before any of its subclasses. Take, for instance, the classic diamond inheritance pattern:</source>
          <target state="translated">C3 は常にローカルな優先順位を維持して動作します。これは本質的に、どのクラスもそのサブクラスの前には現れないということを意味します。例えば、古典的なダイヤモンド継承パターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1173dbb43313d07b70a93fae991af36789693f17" translate="yes" xml:space="preserve">
          <source>C:</source>
          <target state="translated">C:</target>
        </trans-unit>
        <trans-unit id="7a382120912440ea350318c064061d0e6ea8184a" translate="yes" xml:space="preserve">
          <source>C:/emx.add/bin/bash.exe</source>
          <target state="translated">C:/emx.add/bin/bash.exe</target>
        </trans-unit>
        <trans-unit id="519c5bd785564af1dec76cf3a5edc1bf3e894ac6" translate="yes" xml:space="preserve">
          <source>C:/emx/bin/foo.cmd</source>
          <target state="translated">C:/emx/bin/foo.cmd</target>
        </trans-unit>
        <trans-unit id="f6665c2627be2b969dcd410132185e0dd599f37b" translate="yes" xml:space="preserve">
          <source>CALLBACKS</source>
          <target state="translated">CALLBACKS</target>
        </trans-unit>
        <trans-unit id="3991ab584fec70130dcdb49fb4dbe4638d6f1b90" translate="yes" xml:space="preserve">
          <source>CALLING FROM PERL</source>
          <target state="translated">PERLからの呼び出し</target>
        </trans-unit>
        <trans-unit id="5f0a327136ac9e42e9905406e9cf6ed2f2b8cdbf" translate="yes" xml:space="preserve">
          <source>CALLING FROM THE COMMAND LINE</source>
          <target state="translated">コマンドラインからの呼び出し</target>
        </trans-unit>
        <trans-unit id="3b04e0388b12d5718ab0ab4fbeede800c9bdf464" translate="yes" xml:space="preserve">
          <source>CALL_BLOCK_HOOKS</source>
          <target state="translated">CALL_BLOCK_HOOKS</target>
        </trans-unit>
        <trans-unit id="aa884ac53759d984488c656f65f21f650359027e" translate="yes" xml:space="preserve">
          <source>CAN</source>
          <target state="translated">CAN</target>
        </trans-unit>
        <trans-unit id="5f05bf320ccd994a5b4376cbf772126d72a752e5" translate="yes" xml:space="preserve">
          <source>CANONICAL REPRESENTATION</source>
          <target state="translated">カノニカルリプレゼンテーション</target>
        </trans-unit>
        <trans-unit id="ed877e5c7f10c31f466df09c23df16788f087cc2" translate="yes" xml:space="preserve">
          <source>CANONICAL_NAME</source>
          <target state="translated">CANONICAL_NAME</target>
        </trans-unit>
        <trans-unit id="7c383ee49414a970f2fefff09538765cce85b6f7" translate="yes" xml:space="preserve">
          <source>CAN_FORK</source>
          <target state="translated">CAN_FORK</target>
        </trans-unit>
        <trans-unit id="d89bfce77d1d10d8b67301ffcd86ad4a0fd51999" translate="yes" xml:space="preserve">
          <source>CAN_REALLY_FORK</source>
          <target state="translated">CAN_REALLY_FORK</target>
        </trans-unit>
        <trans-unit id="a10ef324dbcf8652446a083bde0eb77789137e55" translate="yes" xml:space="preserve">
          <source>CAN_THREAD</source>
          <target state="translated">CAN_THREAD</target>
        </trans-unit>
        <trans-unit id="e520869852c82bbce05b6c5dc47274d3b3a11987" translate="yes" xml:space="preserve">
          <source>CATEGORIES</source>
          <target state="translated">CATEGORIES</target>
        </trans-unit>
        <trans-unit id="980aeb7f8f581c6b66ed59bbbed49733515b10e6" translate="yes" xml:space="preserve">
          <source>CAVEAT</source>
          <target state="translated">CAVEAT</target>
        </trans-unit>
        <trans-unit id="b72f8eb839f7acede3b2ca8386d0ebe48e624e02" translate="yes" xml:space="preserve">
          <source>CAVEAT %A, %a, %B, %b, and friends</source>
          <target state="translated">CAVEAT %A,%A,%B,%B,%B,と仲間たち</target>
        </trans-unit>
        <trans-unit id="6567e0b0a7daf3c098913aa924483cfe44852131" translate="yes" xml:space="preserve">
          <source>CAVEAT FOR GREAT CIRCLE FORMULAS</source>
          <target state="translated">グレートサークルフォーマルのためのケイバット</target>
        </trans-unit>
        <trans-unit id="8ae97560e6c967ffcb76f6cd835c75b45c6b2d57" translate="yes" xml:space="preserve">
          <source>CAVEAT ON PRECEDENCE</source>
          <target state="translated">前提条件のケイバット</target>
        </trans-unit>
        <trans-unit id="1c968ba436040f2ef7532a90991da165ff0512dd" translate="yes" xml:space="preserve">
          <source>CAVEAT: The thread signalling capability provided by this module does not actually send signals via the OS. It</source>
          <target state="translated">CAVEAT:このモジュールが提供するスレッド信号機能は、実際にはOS経由で信号を送信しません。それは</target>
        </trans-unit>
        <trans-unit id="ce611c3a23df37ff734feee69c06233d5c9abfb4" translate="yes" xml:space="preserve">
          <source>CAVEAT: Though BOM in utf8 (\xEF\xBB\xBF) is valid, it is meaningless and as of this writing Encode suite just leave it as is (\x{FeFF}).</source>
          <target state="translated">CAVEAT:Though BOM in utf8 (Utf8)is valid,it is meaningless and as of this writing Encode suite just leave it as is (\x{FeFF}).</target>
        </trans-unit>
        <trans-unit id="5ea0a6fefc9f66fb07ad0567375a2c4308c1f112" translate="yes" xml:space="preserve">
          <source>CAVEAT: Unlike UTF-(16|32), BOM in utf8 is NOT AUTOMATICALLY STRIPPED.</source>
          <target state="translated">CAVEAT:UTF-(16|32)とは異なり、 utf8 の BOM は自動的にストリップされません。</target>
        </trans-unit>
        <trans-unit id="0852d6090cb36f8c92fc678e7c0ed0101951986e" translate="yes" xml:space="preserve">
          <source>CAVEATS</source>
          <target state="translated">CAVEATS</target>
        </trans-unit>
        <trans-unit id="afa50a96d52c4af6173a5b3dcf9e10a0a47c02ab" translate="yes" xml:space="preserve">
          <source>CAVEATS AND LIMITATIONS</source>
          <target state="translated">ケイブアトと限界</target>
        </trans-unit>
        <trans-unit id="8db2d4672c0bb6f4ea12967ef5822987358da334" translate="yes" xml:space="preserve">
          <source>CAVEATS and NOTES</source>
          <target state="translated">ケイバットとノート</target>
        </trans-unit>
        <trans-unit id="2730fdc488249d7bafe77293689db04473acbaf2" translate="yes" xml:space="preserve">
          <source>CC0 1.0 Universal</source>
          <target state="translated">CC0 1.0 ユニバーサル</target>
        </trans-unit>
        <trans-unit id="a6e7743e5b77bff9708c13ccf20fcc50d9073b5e" translate="yes" xml:space="preserve">
          <source>CCFLAGS</source>
          <target state="translated">CCFLAGS</target>
        </trans-unit>
        <trans-unit id="34d724a57223d56ce5370f930a6de174ea64e793" translate="yes" xml:space="preserve">
          <source>CCTools</source>
          <target state="translated">CCTools</target>
        </trans-unit>
        <trans-unit id="422f720e7d72716b7017e69268406be073cfc7c1" translate="yes" xml:space="preserve">
          <source>CGI</source>
          <target state="translated">CGI</target>
        </trans-unit>
        <trans-unit id="41a4605be9cd5708c0812fcf96a67b02ae213ace" translate="yes" xml:space="preserve">
          <source>CGI.pm</source>
          <target state="translated">CGI.pm</target>
        </trans-unit>
        <trans-unit id="313c83d1d2e8c998d1416c76ceb327085bafcc5a" translate="yes" xml:space="preserve">
          <source>CHANGED IN PERL 5.6</source>
          <target state="translated">PERL 5.6での変更点</target>
        </trans-unit>
        <trans-unit id="15a7fa79c2e880d7c668e6f0bb63190d52852647" translate="yes" xml:space="preserve">
          <source>CHANGED in 3.18</source>
          <target state="translated">3.18で変更</target>
        </trans-unit>
        <trans-unit id="a2feb6ed0257c21c6672793ee2f94eaadc10c72c" translate="yes" xml:space="preserve">
          <source>CHANGES</source>
          <target state="translated">CHANGES</target>
        </trans-unit>
        <trans-unit id="77e515bcbeea42a381522b3f02fc083d411a62f5" translate="yes" xml:space="preserve">
          <source>CHARACTER CLASSES</source>
          <target state="translated">キャラクタークラス</target>
        </trans-unit>
        <trans-unit id="80ca0b224740835c619b09444159e57296b64d7e" translate="yes" xml:space="preserve">
          <source>CHARDEV</source>
          <target state="translated">CHARDEV</target>
        </trans-unit>
        <trans-unit id="a375cca9c609e8591d1c22cf8e8a8c4bbd0e6f6f" translate="yes" xml:space="preserve">
          <source>CHARMAP starts the character map section. Each line has a form as follows:</source>
          <target state="translated">CHARMAPは、文字マップ部を開始する。各行は以下のような形式になっています。</target>
        </trans-unit>
        <trans-unit id="1fbd3cbf6697996c51d6a64a08ee8b874fefe67b" translate="yes" xml:space="preserve">
          <source>CHARNAME</source>
          <target state="translated">CHARNAME</target>
        </trans-unit>
        <trans-unit id="d37267cb2995cccac2283009e1ea4f3a6dd37db3" translate="yes" xml:space="preserve">
          <source>CHECK</source>
          <target state="translated">CHECK</target>
        </trans-unit>
        <trans-unit id="0a228e95208b8ea7acb00589cdd0f311e92f3483" translate="yes" xml:space="preserve">
          <source>CHECKSUM FUNCTIONS</source>
          <target state="translated">チェックサム関数</target>
        </trans-unit>
        <trans-unit id="375b607411c5c81ce08dc5795ece2335113cdfb6" translate="yes" xml:space="preserve">
          <source>CJK.inf</source>
          <target state="translated">CJK.inf</target>
        </trans-unit>
        <trans-unit id="1f22ed2c7cd021c0f2f66309f2f05fa0c8cba3b9" translate="yes" xml:space="preserve">
          <source>CJK: Chinese, Japanese, Korean (Multibyte)</source>
          <target state="translated">日中韓:中国語、日本語、韓国語(マルチバイト</target>
        </trans-unit>
        <trans-unit id="a149ba82f2f03dc5065a0af0c7f361f94591fd8e" translate="yes" xml:space="preserve">
          <source>CJKRadicals.txt</source>
          <target state="translated">CJKRadicals.txt</target>
        </trans-unit>
        <trans-unit id="1cd4dc2f81b0a6fdbbb287d0cb553f7eb2bc1256" translate="yes" xml:space="preserve">
          <source>CJKV Information Processing 1999 O'Reilly &amp;amp; Associates, ISBN : 1-56592-224-7</source>
          <target state="translated">CJKV情報処理1999O'Reilly＆Associates、ISBN：1-56592-224-7</target>
        </trans-unit>
        <trans-unit id="bb95f17d9243e483e268617dbce738cf49527ccf" translate="yes" xml:space="preserve">
          <source>CLASS</source>
          <target state="translated">CLASS</target>
        </trans-unit>
        <trans-unit id="0d2dc3d6989d0491c087fdf8b26389f6609dba54" translate="yes" xml:space="preserve">
          <source>CLASS METHODS</source>
          <target state="translated">クラスメソッド</target>
        </trans-unit>
        <trans-unit id="dbf4163822f839bcdb88c4da697b65983c814143" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_1ex(N)</source>
          <target state="translated">CLASS-&amp;gt;_1ex(N)</target>
        </trans-unit>
        <trans-unit id="5e3cd43942de5bc55bb4b61dff2152defa5e665c" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_acmp(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_acmp(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="c0fe5b11e664f45527c8cbf573b1b4a9111881ab" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_add(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_add(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="bbe8e3c720a50c4d2a9750528931e93986936121" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_alen(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_alen(OBJ)</target>
        </trans-unit>
        <trans-unit id="9c0f693334bb3b43074ff7fb54e0a35e69585bdc" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_and(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_and(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="373f5c07704d916c11b9458bafdf0b3c797ab20b" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_bin(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_bin(OBJ)</target>
        </trans-unit>
        <trans-unit id="ae3b000dcb18d4a9a9b9e0c641ae341959b8b1f3" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_bytes(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_bytes(OBJ)</target>
        </trans-unit>
        <trans-unit id="939aeb6ab73227e57772ccf8d1bbefe66e8960e7" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_hex(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_hex(OBJ)</target>
        </trans-unit>
        <trans-unit id="230ca81d0842013c25749d9d81db1f748148ed30" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_as_oct(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_as_oct(OBJ)</target>
        </trans-unit>
        <trans-unit id="aa47a54f32aa5d9aedfbc8b0516ffb16b4e8ad9b" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_check(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_check(OBJ)</target>
        </trans-unit>
        <trans-unit id="b76d89ef951323f62ea3d4f7e3bf6625216a664e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_copy(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_copy(OBJ)</target>
        </trans-unit>
        <trans-unit id="7b316610efe595918ab265cc516b10525cb0a9e4" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_dec(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_dec(OBJ)</target>
        </trans-unit>
        <trans-unit id="eff86bbc5c81f0ef90c6a67839537dc95561de27" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_dfac(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_dfac(OBJ)</target>
        </trans-unit>
        <trans-unit id="65789515386f4257376ec8b095a149f8249a54c8" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_digit(OBJ, N)</source>
          <target state="translated">CLASS-&amp;gt;_digit(OBJ, N)</target>
        </trans-unit>
        <trans-unit id="ea0a5425bf5954e529e526265bbbe725dac5b692" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_digitsum(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_digitsum(OBJ)</target>
        </trans-unit>
        <trans-unit id="01cc9e41069c631dbebc0964cbf38d39d062d70c" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_div(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_div(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="81104bf1f4830cc5d2f3062c9f17bb351dcea9e5" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_fac(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_fac(OBJ)</target>
        </trans-unit>
        <trans-unit id="9bebd4b16a3688a92b9ec1309e0093ef6c878a26" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_fib(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_fib(OBJ)</target>
        </trans-unit>
        <trans-unit id="9c38737454337b63e376846c30d93e58da737182" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_base(STR, BASE, COLLSEQ)</source>
          <target state="translated">CLASS-&amp;gt;_from_base(STR, BASE, COLLSEQ)</target>
        </trans-unit>
        <trans-unit id="554065c0180a909fc6b23180a8a9cfc40b6e7245" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_bin(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_bin(STR)</target>
        </trans-unit>
        <trans-unit id="e0b67da5a286b962b5103b9d3a1b9a892b1ed509" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_bytes(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_bytes(STR)</target>
        </trans-unit>
        <trans-unit id="c243787e132d2a094d8a15627a1a7451a3814933" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_hex(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_hex(STR)</target>
        </trans-unit>
        <trans-unit id="bee67c462491c6f639f9d7df02ebc91914ba0651" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_from_oct(STR)</source>
          <target state="translated">CLASS-&amp;gt;_from_oct(STR)</target>
        </trans-unit>
        <trans-unit id="79947d07c35c8d7ca8fb7ab582580ad09f68a270" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_gcd(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_gcd(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="bf870d7b557e437ecc4f6df31048e61c1a766639" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_inc(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_inc(OBJ)</target>
        </trans-unit>
        <trans-unit id="57ef40818297d41ce5ae6dfe2935cbe10a948e55" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_even(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_even(OBJ)</target>
        </trans-unit>
        <trans-unit id="78e92a508444c9a4e153cb27dec44ce710d3fbfb" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_odd(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_odd(OBJ)</target>
        </trans-unit>
        <trans-unit id="4e20f7c171116a375cf13642bc296e79fa405fdc" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_one(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_one(OBJ)</target>
        </trans-unit>
        <trans-unit id="f88b575610df28090e82ca09cbc271fba882a984" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_ten(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_ten(OBJ)</target>
        </trans-unit>
        <trans-unit id="c073383626cbcb436b52f80e441e3525185a9c35" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_two(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_two(OBJ)</target>
        </trans-unit>
        <trans-unit id="0931755142c2e5061f082dcab3a8b3d06ee0d673" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_is_zero(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_is_zero(OBJ)</target>
        </trans-unit>
        <trans-unit id="52b59fb9ef6c768eaf71a7b4d2195bdd1507ba3e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_lcm(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_lcm(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="d3e0eb30c18735b72536d99d8876be0e0f45994a" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_len(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_len(OBJ)</target>
        </trans-unit>
        <trans-unit id="4c7950e347030db6d9cf7aeabf66a289e6d4957c" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_log_int(OBJ, B)</source>
          <target state="translated">CLASS-&amp;gt;_log_int(OBJ, B)</target>
        </trans-unit>
        <trans-unit id="cc8371d73a223d5f3f24b060cd71a0b488611602" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_lsft(OBJ, N, B)</source>
          <target state="translated">CLASS-&amp;gt;_lsft(OBJ, N, B)</target>
        </trans-unit>
        <trans-unit id="22cba7fcab6b1e38e812527c51957fb448a1dfbd" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_lucas(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_lucas(OBJ)</target>
        </trans-unit>
        <trans-unit id="d1020b2df8e6bc65d3831c16910a186a6aedb167" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_mod(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_mod(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="12c329275261c155dd0553c2b9d32d417c6fd959" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_modinv(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_modinv(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="25bd4b6eae9a7e994127aca1153ee769bb0a4fc5" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_modpow(OBJ1, OBJ2, OBJ3)</source>
          <target state="translated">CLASS-&amp;gt;_modpow(OBJ1, OBJ2, OBJ3)</target>
        </trans-unit>
        <trans-unit id="25d6ac0e0c4cf42a3b72e71957f069a23ecaca7a" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_mul(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_mul(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="f72b5e20b6fa3144b91ee9cc34948365f3de5f56" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_new(STR)</source>
          <target state="translated">CLASS-&amp;gt;_new(STR)</target>
        </trans-unit>
        <trans-unit id="8f05265514c627bfe1c1bb7fc447201ea3dc0844" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_nok(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_nok(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="8735ec3c7027990b743211f907d190471dab8b0d" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_num(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_num(OBJ)</target>
        </trans-unit>
        <trans-unit id="7063799ab7a1554372ab0077a85ae240ce398e0e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_one()</source>
          <target state="translated">CLASS-&amp;gt;_one()</target>
        </trans-unit>
        <trans-unit id="6a5ee9d5848f3b7486015f8969d7466409265df6" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_or(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_or(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="3f28b295d6374c491c3fe35b78ae7b6181398402" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_pow(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_pow(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="2db0025cc70599004bf6f7ce6450bde2b7750c10" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_root(OBJ, N)</source>
          <target state="translated">CLASS-&amp;gt;_root(OBJ, N)</target>
        </trans-unit>
        <trans-unit id="383991a80a7684e88dc70dca994e1117d7ba4c8f" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_rsft(OBJ, N, B)</source>
          <target state="translated">CLASS-&amp;gt;_rsft(OBJ, N, B)</target>
        </trans-unit>
        <trans-unit id="6829cafc5ea39d01bb87254edd352f6bc5503975" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sand(OBJ1, OBJ2, SIGN1, SIGN2)</source>
          <target state="translated">CLASS-&amp;gt;_sand(OBJ1, OBJ2, SIGN1, SIGN2)</target>
        </trans-unit>
        <trans-unit id="3f3a5c67db38b96d60ac6745a515a2bb726a9a22" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_set(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_set(OBJ)</target>
        </trans-unit>
        <trans-unit id="a57d527484c99992dbfe4499fffa9a173eb3f781" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sor(OBJ1, OBJ2, SIGN1, SIGN2)</source>
          <target state="translated">CLASS-&amp;gt;_sor(OBJ1, OBJ2, SIGN1, SIGN2)</target>
        </trans-unit>
        <trans-unit id="5ac0302a0996c0213583a493ee19dd407df00100" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sqrt(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_sqrt(OBJ)</target>
        </trans-unit>
        <trans-unit id="6789029e56909be438f25122aaab1a089e43ffe8" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_str(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_str(OBJ)</target>
        </trans-unit>
        <trans-unit id="2b0825027da9a54d42038acc8d5ba027d5c46cb3" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sub(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_sub(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="4950b9010a4834f9373708080b8e69ae8e9c5c49" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sub(OBJ1, OBJ2, FLAG)</source>
          <target state="translated">CLASS-&amp;gt;_sub(OBJ1, OBJ2, FLAG)</target>
        </trans-unit>
        <trans-unit id="77468e1908c6dafd5d2074208a664ae5e60f2dd1" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_sxor(OBJ1, OBJ2, SIGN1, SIGN2)</source>
          <target state="translated">CLASS-&amp;gt;_sxor(OBJ1, OBJ2, SIGN1, SIGN2)</target>
        </trans-unit>
        <trans-unit id="76c7c88b44890239ec86e544ab6611e5cd108682" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_ten()</source>
          <target state="translated">CLASS-&amp;gt;_ten()</target>
        </trans-unit>
        <trans-unit id="7329d1090c0993df5e9a2b709663faa1d6fcf49e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_base(OBJ, BASE, COLLSEQ)</source>
          <target state="translated">CLASS-&amp;gt;_to_base(OBJ, BASE, COLLSEQ)</target>
        </trans-unit>
        <trans-unit id="77fcc2b13d1e0c8ebd7f8e44e49e356c78134165" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_bin(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_bin(OBJ)</target>
        </trans-unit>
        <trans-unit id="7027f3991415488985a9bd72f394eda651f4b3a8" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_bytes(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_bytes(OBJ)</target>
        </trans-unit>
        <trans-unit id="474f2351bc034f4e2dee67fde64fb9ecd0687fcd" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_hex(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_hex(OBJ)</target>
        </trans-unit>
        <trans-unit id="eda55669e9a413e319a52f38c9b97d2f80258723" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_to_oct(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_to_oct(OBJ)</target>
        </trans-unit>
        <trans-unit id="35f6b512f149fc5647d9be14d6c3696779666d7b" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_two()</source>
          <target state="translated">CLASS-&amp;gt;_two()</target>
        </trans-unit>
        <trans-unit id="6c043a16c1ce905dc69c182599a1ed3e1706644f" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_xor(OBJ1, OBJ2)</source>
          <target state="translated">CLASS-&amp;gt;_xor(OBJ1, OBJ2)</target>
        </trans-unit>
        <trans-unit id="1786e012068e0bce30f713c13983059095b9846e" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_zero()</source>
          <target state="translated">CLASS-&amp;gt;_zero()</target>
        </trans-unit>
        <trans-unit id="4427e6621d576c9b9544faafe160d613f16fd0a2" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;_zeros(OBJ)</source>
          <target state="translated">CLASS-&amp;gt;_zeros(OBJ)</target>
        </trans-unit>
        <trans-unit id="98c43027b56d54580ef0f278822b82fba3c6c7b0" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;api_version()</source>
          <target state="translated">CLASS-&amp;gt;api_version()</target>
        </trans-unit>
        <trans-unit id="3a8f000aa3840296550580880a88660b74717610" translate="yes" xml:space="preserve">
          <source>CLASS-&amp;gt;safe_quote ITEM</source>
          <target state="translated">CLASS-&amp;gt; safe_quote ITEM</target>
        </trans-unit>
        <trans-unit id="2a5520b8514a16a64037e86c211cbd6b6bfdc1cb" translate="yes" xml:space="preserve">
          <source>CLASSES</source>
          <target state="translated">CLASSES</target>
        </trans-unit>
        <trans-unit id="cd6bd9f33c285fac5da62108d5afffde0dae96e5" translate="yes" xml:space="preserve">
          <source>CLDR - Unicode Common Locale Data Repository</source>
          <target state="translated">CLDR-Unicode 共通ロケールデータリポジトリ</target>
        </trans-unit>
        <trans-unit id="16ec74fc0a433fb02e0d1f99b9c32251a3f73264" translate="yes" xml:space="preserve">
          <source>CLEAR</source>
          <target state="translated">CLEAR</target>
        </trans-unit>
        <trans-unit id="fac58dbcd72067a5f153ffc2c833d4355a2e9136" translate="yes" xml:space="preserve">
          <source>CLEAR this</source>
          <target state="translated">これをクリア</target>
        </trans-unit>
        <trans-unit id="9d3e5deafcdb3a6a27a65e5bfeaafad1584429f1" translate="yes" xml:space="preserve">
          <source>CLEAR_ERRSV</source>
          <target state="translated">CLEAR_ERRSV</target>
        </trans-unit>
        <trans-unit id="8c43ea9afe441832e3cd4c7b7273072cf89d4f36" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;cleanup()</source>
          <target state="translated">CLIENT-&amp;gt;cleanup()</target>
        </trans-unit>
        <trans-unit id="358d8a539f6516a3018cd971d1f7108ae888fd92" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;done()</source>
          <target state="translated">CLIENT-&amp;gt;done()</target>
        </trans-unit>
        <trans-unit id="362ae63f2520b0ac6a4a12fc77bc456bba0bbcc3" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;evalcode(STRING)</source>
          <target state="translated">CLIENT-&amp;gt;evalcode(STRING)</target>
        </trans-unit>
        <trans-unit id="ba2a51aebeb9cbe8ede2ee1f099eaf5f9c19efd0" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;idle()</source>
          <target state="translated">CLIENT-&amp;gt;idle()</target>
        </trans-unit>
        <trans-unit id="409e287a81847627c930dbd66e9d048b08e25d40" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;init()</source>
          <target state="translated">CLIENT-&amp;gt;init()</target>
        </trans-unit>
        <trans-unit id="beb8820f770c08f109a42da993198a2bf758e2af" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;next()</source>
          <target state="translated">CLIENT-&amp;gt;next()</target>
        </trans-unit>
        <trans-unit id="f4b64a7bfd435bce1098449143c22fafad1d5535" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;output(LIST)</source>
          <target state="translated">CLIENT-&amp;gt;output(LIST)</target>
        </trans-unit>
        <trans-unit id="02ff864bb0d3ac0d506e8664f9ec2249e935efca" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;poststop([STRING])</source>
          <target state="translated">CLIENT-&amp;gt;poststop([STRING])</target>
        </trans-unit>
        <trans-unit id="d623baf5484b0acf229ea866ad9e9a377eb16b8e" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;prestop([STRING])</source>
          <target state="translated">CLIENT-&amp;gt;prestop([STRING])</target>
        </trans-unit>
        <trans-unit id="1c7a7b82fce1e98c96aff13692c7449dfe17a4b2" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;register()</source>
          <target state="translated">CLIENT-&amp;gt;register()</target>
        </trans-unit>
        <trans-unit id="a0a32439f61153f1114c4f2cbb168b643a0c035f" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;run()</source>
          <target state="translated">CLIENT-&amp;gt;run()</target>
        </trans-unit>
        <trans-unit id="1644fd80139ae09888986e942a4b6aa717e134ed" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;skippkg('D::hide')</source>
          <target state="translated">CLIENT-&amp;gt;skippkg('D::hide')</target>
        </trans-unit>
        <trans-unit id="bc32722474d27f37fcd785205662e484073b7283" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;step()</source>
          <target state="translated">CLIENT-&amp;gt;step()</target>
        </trans-unit>
        <trans-unit id="dfdb07cd11971abb4934eabdc4e75a80161a4535" translate="yes" xml:space="preserve">
          <source>CLIENT-&amp;gt;stop()</source>
          <target state="translated">CLIENT-&amp;gt;stop()</target>
        </trans-unit>
        <trans-unit id="6a75d42526571d5f3b5ee3277f0f56033635d616" translate="yes" xml:space="preserve">
          <source>CLISYM_[LOCAL]</source>
          <target state="translated">CLISYM_[LOCAL]</target>
        </trans-unit>
        <trans-unit id="02511b0ef4c076e32b8ecf4a292ccc2e251c9180" translate="yes" xml:space="preserve">
          <source>CLOBBER</source>
          <target state="translated">CLOBBER</target>
        </trans-unit>
        <trans-unit id="eb2ed6b6d36f266377a9e30f6e145c7fdae07a3f" translate="yes" xml:space="preserve">
          <source>CLONEf_CLONE_HOST - This is a win32 thing, it is ignored on unix, it tells perls win32host code (which is c++) to clone itself, this is needed on win32 if you want to run two threads at the same time, if you just want to do some stuff in a separate perl interpreter and then throw it away and return to the original one, you don't need to do anything.</source>
          <target state="translated">CLONEf_CLONE_HOST-これは win32 のもので、Unix では無視されます。これは Perl の win32host コード (c++)に自分自身をクローンするように指示します。</target>
        </trans-unit>
        <trans-unit id="5dd06954f8504852be625e8b13f9f38ba4df5c2d" translate="yes" xml:space="preserve">
          <source>CLONEf_COPY_STACKS - is used to, well, copy the stacks also, without it we only clone the data and zero the stacks, with it we copy the stacks and the new perl interpreter is ready to run at the exact same point as the previous one. The pseudo-fork code uses COPY_STACKS while the threads-&amp;gt;create doesn't.</source>
          <target state="translated">CLONEf_COPY_STACKS-スタックをコピーするためにも使用されます。これなしでは、データを複製してスタックをゼロにするだけで、スタックをコピーして、新しいperlインタープリターを前のインタープリターとまったく同じ時点で実行する準備が整います。疑似フォークコードはCOPY_STACKSを使用しますが、threads-&amp;gt; createは使用しません。</target>
        </trans-unit>
        <trans-unit id="496d69294e21b9e9459d9ae5f134da2961a69331" translate="yes" xml:space="preserve">
          <source>CLONEf_KEEP_PTR_TABLE - perl_clone keeps a ptr_table with the pointer of the old variable as a key and the new variable as a value, this allows it to check if something has been cloned and not clone it again but rather just use the value and increase the refcount. If KEEP_PTR_TABLE is not set then perl_clone will kill the ptr_table using the function &lt;code&gt;ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;&lt;/code&gt; , reason to keep it around is if you want to dup some of your own variable who are outside the graph perl scans, example of this code is in threads.xs create.</source>
          <target state="translated">CLONEf_KEEP_PTR_TABLE-perl_cloneは、古い変数のポインターをキーとして、新しい変数を値として持つptr_tableを保持します。これにより、何かが複製されたかどうかを確認し、再度複製するのではなく、値を使用してrefcountを増やすだけです。KEEP_PTR_TABLEが設定されていない場合、perl_cloneは関数 &lt;code&gt;ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;&lt;/code&gt; を使用してptr_tableを強制終了します。PL_ptr_table = NULL; 、それを保持する理由は、グラフのperlスキャンの外にある独自の変数の一部を複製する場合です。このコードの例は、threads.xs createにあります。</target>
        </trans-unit>
        <trans-unit id="07801b8767211109091edb84bc973192295d0f01" translate="yes" xml:space="preserve">
          <source>CLONING THE REPOSITORY</source>
          <target state="translated">リポジトリの複製</target>
        </trans-unit>
        <trans-unit id="03722f59b0c28be7ddc35c91bb350d9e0cf0b45b" translate="yes" xml:space="preserve">
          <source>CLOSE this</source>
          <target state="translated">これを閉じる</target>
        </trans-unit>
        <trans-unit id="08e4da4e4f3b9df4371883c2c534d94c9bbb7158" translate="yes" xml:space="preserve">
          <source>CMD</source>
          <target state="translated">CMD</target>
        </trans-unit>
        <trans-unit id="439fbcbebff5d3e18e9cd1652b960a8b5958c8fb" translate="yes" xml:space="preserve">
          <source>CMD.EXE</source>
          <target state="translated">CMD.EXE</target>
        </trans-unit>
        <trans-unit id="b7f8b1aaa4e3518d65a63cc4b574d3a502b21354" translate="yes" xml:space="preserve">
          <source>CMD_ERROR</source>
          <target state="translated">CMD_ERROR</target>
        </trans-unit>
        <trans-unit id="b9c1aaaf65573c7e15b93b6d826729e7711cf242" translate="yes" xml:space="preserve">
          <source>CNAME</source>
          <target state="translated">CNAME</target>
        </trans-unit>
        <trans-unit id="16de25af888480da1af57a71855f3e8c515dcb61" translate="yes" xml:space="preserve">
          <source>CODE</source>
          <target state="translated">CODE</target>
        </trans-unit>
        <trans-unit id="8a81c4f5d7ebf0af1540db862699627a91092359" translate="yes" xml:space="preserve">
          <source>CODE EXAMPLES</source>
          <target state="translated">コード例</target>
        </trans-unit>
        <trans-unit id="e00c531b83778b8e9867578bc4976f46546c5a61" translate="yes" xml:space="preserve">
          <source>CODE REFERENCES</source>
          <target state="translated">コード参照</target>
        </trans-unit>
        <trans-unit id="440677eb0b9f2ced4b57b4cf4a1f2a4041acaf2f" translate="yes" xml:space="preserve">
          <source>CODE reference. The subroutine should return a hash reference. The hash may contain further attributes, e.g. {LIBS =&amp;gt; ...}, that have to be determined by some evaluation method.</source>
          <target state="translated">CODEリファレンス。サブルーチンはハッシュ参照を返す必要があります。ハッシュには、{LIBS =&amp;gt; ...}などの属性が含まれる場合があり、これらは何らかの評価方法で決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2f975202aa1b4783c29e4937429d2b66fab5169e" translate="yes" xml:space="preserve">
          <source>CODE: directive is used which sets ST(0) explicitly.</source>
          <target state="translated">CODE:ディレクティブを使用して、ST(0)を明示的に設定します。</target>
        </trans-unit>
        <trans-unit id="a057830a61bb847750f9a416ef2afe8f0db78c7a" translate="yes" xml:space="preserve">
          <source>COLOUR</source>
          <target state="translated">COLOUR</target>
        </trans-unit>
        <trans-unit id="2d5c5615b998898e7768ec56433dbebafc08a4d0" translate="yes" xml:space="preserve">
          <source>COLUMNS</source>
          <target state="translated">COLUMNS</target>
        </trans-unit>
        <trans-unit id="8a9cbc4396b103e6b251b294230c1bb9eed38e2f" translate="yes" xml:space="preserve">
          <source>COM1</source>
          <target state="translated">COM1</target>
        </trans-unit>
        <trans-unit id="3a38ee1d9bd08c8be0112c20a3c4f3c5309ce957" translate="yes" xml:space="preserve">
          <source>COMMAND.COM</source>
          <target state="translated">COMMAND.COM</target>
        </trans-unit>
        <trans-unit id="c13bbfcc6932afed8045a8c6d2be122bbea2f4a3" translate="yes" xml:space="preserve">
          <source>COMMON CHARACTER CODE SETS</source>
          <target state="translated">共通キャラクターコードセット</target>
        </trans-unit>
        <trans-unit id="3565dc34b7a16c1ebb52c1be4a3b9554d589b634" translate="yes" xml:space="preserve">
          <source>COMMON MISTAKES</source>
          <target state="translated">よくあるミス</target>
        </trans-unit>
        <trans-unit id="d3bd9328431af889713253c0fe82cf459fd62fdd" translate="yes" xml:space="preserve">
          <source>COMMON PITFALLS</source>
          <target state="translated">一般的な欠点</target>
        </trans-unit>
        <trans-unit id="3b75e36fb6f8799ec17d763957648965ceb0bf19" translate="yes" xml:space="preserve">
          <source>COMMON PROBLEMS</source>
          <target state="translated">一般的な問題</target>
        </trans-unit>
        <trans-unit id="3631d60b3c3dad75e7023cf75ede2d8db90dced0" translate="yes" xml:space="preserve">
          <source>COMMON QUESTIONS</source>
          <target state="translated">COMMON QUESTIONS.</target>
        </trans-unit>
        <trans-unit id="34c150933a6aa70510a6417b9f759a880de15e63" translate="yes" xml:space="preserve">
          <source>COMMON TASKS</source>
          <target state="translated">共通タスク</target>
        </trans-unit>
        <trans-unit id="5931c475df95ba4c0e69e8680b4b2746d7dcadbd" translate="yes" xml:space="preserve">
          <source>COMPATIBILITY</source>
          <target state="translated">COMPATIBILITY</target>
        </trans-unit>
        <trans-unit id="abe070716581f0b619231b1ebef8e7055b0ca326" translate="yes" xml:space="preserve">
          <source>COMPILE</source>
          <target state="translated">COMPILE</target>
        </trans-unit>
        <trans-unit id="1b93c2f6af1a728937d801492e8514e231fe859d" translate="yes" xml:space="preserve">
          <source>COMPILING AND INSTALLING PERL ON PLAN 9</source>
          <target state="translated">プラン9へのPERLのコンパイルとインストール</target>
        </trans-unit>
        <trans-unit id="a3dbb0f2d743369125c33547e4a98f6e69c718ea" translate="yes" xml:space="preserve">
          <source>COMPRESS/UNCOMPRESS</source>
          <target state="translated">COMPRESS/UNCOMPRESS</target>
        </trans-unit>
        <trans-unit id="7679a072c92896a2f8b38c43a6b6959d5d9cd9c5" translate="yes" xml:space="preserve">
          <source>CON</source>
          <target state="translated">CON</target>
        </trans-unit>
        <trans-unit id="dbbd6e677093ab33626116ddbe95a8116b822da0" translate="yes" xml:space="preserve">
          <source>CONCEPTS</source>
          <target state="translated">CONCEPTS</target>
        </trans-unit>
        <trans-unit id="ce2288334f1137f427c025bf4db30086aa2e6ccd" translate="yes" xml:space="preserve">
          <source>CONCLUSION</source>
          <target state="translated">CONCLUSION</target>
        </trans-unit>
        <trans-unit id="54b45ea0b830c111f200238254cbe142d992ceb9" translate="yes" xml:space="preserve">
          <source>CONCURRENT ACCESS TO FILES</source>
          <target state="translated">ファイルへの現在のアクセス</target>
        </trans-unit>
        <trans-unit id="2fb60054b43a25d7a958d3d19bdb1aa7809577a8" translate="yes" xml:space="preserve">
          <source>CONFIG</source>
          <target state="translated">CONFIG</target>
        </trans-unit>
        <trans-unit id="b6e52e4d80314fc8a5ba1a7faeb4aa6cd672bec0" translate="yes" xml:space="preserve">
          <source>CONFIGURATION</source>
          <target state="translated">CONFIGURATION</target>
        </trans-unit>
        <trans-unit id="d5e00d8ba45995ef9ab303972f7c1a6cae02996a" translate="yes" xml:space="preserve">
          <source>CONFIGURATION VARIABLES</source>
          <target state="translated">設定変数</target>
        </trans-unit>
        <trans-unit id="d4267ae349f13bd1612b2ef41ef2fe7a1e068f48" translate="yes" xml:space="preserve">
          <source>CONFIGURE</source>
          <target state="translated">CONFIGURE</target>
        </trans-unit>
        <trans-unit id="0bcdf5cc47cad9c41938edcc7524d271413daa98" translate="yes" xml:space="preserve">
          <source>CONFIGURE PERL ON CYGWIN</source>
          <target state="translated">CYGWINでPERLを設定する</target>
        </trans-unit>
        <trans-unit id="22733669b75038bbdd66305b9f339bad99694375" translate="yes" xml:space="preserve">
          <source>CONFIGURE_REQUIRES</source>
          <target state="translated">CONFIGURE_REQUIRES</target>
        </trans-unit>
        <trans-unit id="86446751ae319594b5e453b782ebdfc8c4bf543b" translate="yes" xml:space="preserve">
          <source>CONFIGURING</source>
          <target state="translated">CONFIGURING</target>
        </trans-unit>
        <trans-unit id="a0e4619a67d77836e15c84ab1f7acbadf6b5e068" translate="yes" xml:space="preserve">
          <source>CONSTANT ONLY</source>
          <target state="translated">コンスタントオンリー</target>
        </trans-unit>
        <trans-unit id="65df4be803801cf76d0b33102b49347c0f49a265" translate="yes" xml:space="preserve">
          <source>CONSTANTS</source>
          <target state="translated">CONSTANTS</target>
        </trans-unit>
        <trans-unit id="9d4cd9e346a27cff016ae855f03e070521487596" translate="yes" xml:space="preserve">
          <source>CONSTRUCT</source>
          <target state="translated">CONSTRUCT</target>
        </trans-unit>
        <trans-unit id="6ed66fd18a1b175704db533d3865fa2679863e6d" translate="yes" xml:space="preserve">
          <source>CONSTRUCTOR</source>
          <target state="translated">CONSTRUCTOR</target>
        </trans-unit>
        <trans-unit id="a8bbeb234bce1b12584f91c5efbcf549dcdfea50" translate="yes" xml:space="preserve">
          <source>CONSTRUCTOR ARGUMENTS</source>
          <target state="translated">構成員の主張</target>
        </trans-unit>
        <trans-unit id="a81e8ee10f05992e9990c024071dc9ef826e1cd3" translate="yes" xml:space="preserve">
          <source>CONSTRUCTORS</source>
          <target state="translated">CONSTRUCTORS</target>
        </trans-unit>
        <trans-unit id="740fabb870d6ed652cd56a6f6b4cabc2048431f9" translate="yes" xml:space="preserve">
          <source>CONTACT</source>
          <target state="translated">CONTACT</target>
        </trans-unit>
        <trans-unit id="27c8094199d30ca2b1fd54cbe86c56a5369fe808" translate="yes" xml:space="preserve">
          <source>CONTACTING US</source>
          <target state="translated">お問い合わせ</target>
        </trans-unit>
        <trans-unit id="238a131a3e8eb98d1fc5b27d882ca40b7618fd2a" translate="yes" xml:space="preserve">
          <source>CONTENT</source>
          <target state="translated">CONTENT</target>
        </trans-unit>
        <trans-unit id="c7fb4a1c86b7fc71a83ddb8d52b446a1a692bd4f" translate="yes" xml:space="preserve">
          <source>CONTENTS</source>
          <target state="translated">CONTENTS</target>
        </trans-unit>
        <trans-unit id="6eb1660530253dbbb9bc0adce6c7c2db98f6c11e" translate="yes" xml:space="preserve">
          <source>CONTRIBUTED MODULES</source>
          <target state="translated">貢献したモジュール</target>
        </trans-unit>
        <trans-unit id="378eb0be276c8f7e7ce971475f7e96915511bccb" translate="yes" xml:space="preserve">
          <source>CONTRIBUTING</source>
          <target state="translated">CONTRIBUTING</target>
        </trans-unit>
        <trans-unit id="c00c0afca84109e3fb2b98c8209ef559a912b256" translate="yes" xml:space="preserve">
          <source>CONTRIBUTORS</source>
          <target state="translated">CONTRIBUTORS</target>
        </trans-unit>
        <trans-unit id="3c270e7e648d60e989f665180ac5841d2f501b46" translate="yes" xml:space="preserve">
          <source>CONTROLLING LOOKUP FAILURE</source>
          <target state="translated">検索失敗の制御</target>
        </trans-unit>
        <trans-unit id="56e1ec5824af8dff3fb44acbb1f5889b6031d924" translate="yes" xml:space="preserve">
          <source>CONVENTIONS</source>
          <target state="translated">CONVENTIONS</target>
        </trans-unit>
        <trans-unit id="bb5de08378fdc79cf1e8f681e4066f1cb85bb028" translate="yes" xml:space="preserve">
          <source>CONVERSIONS</source>
          <target state="translated">CONVERSIONS</target>
        </trans-unit>
        <trans-unit id="e1146aff355e08a86787f760b889571c858e8593" translate="yes" xml:space="preserve">
          <source>COOKBOOK</source>
          <target state="translated">COOKBOOK</target>
        </trans-unit>
        <trans-unit id="9510141c24a403496c1dfba8b0ab986988f95879" translate="yes" xml:space="preserve">
          <source>COORDINATE SYSTEMS</source>
          <target state="translated">コーディネートシステム</target>
        </trans-unit>
        <trans-unit id="c51ce576d0d85de4e554620a3b7e0dd309045090" translate="yes" xml:space="preserve">
          <source>COP Hint Hashes</source>
          <target state="translated">COPヒントハッシュ</target>
        </trans-unit>
        <trans-unit id="22ad88b10bee537423c13139a4d2b08d579efc3e" translate="yes" xml:space="preserve">
          <source>COP Hint Reading</source>
          <target state="translated">COPヒントの読み方</target>
        </trans-unit>
        <trans-unit id="e352fc138c5e488dc34254c3ee2e99e3e9aaf288" translate="yes" xml:space="preserve">
          <source>COPYRIGHT</source>
          <target state="translated">COPYRIGHT</target>
        </trans-unit>
        <trans-unit id="9c7e4e94b44caac6a4f40ca3467d6883ed67cf24" translate="yes" xml:space="preserve">
          <source>COPYRIGHT &amp;amp; LICENSE</source>
          <target state="translated">著作権とライセンス</target>
        </trans-unit>
        <trans-unit id="fd93171470739cb1a4e64e6ea953d8c1dd9e7c3a" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND DISCLAIMER</source>
          <target state="translated">著作権および免責事項</target>
        </trans-unit>
        <trans-unit id="aed47af09308ae3a4fa8a24efc25bc20b8d6091d" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND DISCLAIMERS</source>
          <target state="translated">著作権および免責事項</target>
        </trans-unit>
        <trans-unit id="0524ce058903ad04ed18326112dd9695f4ac4f56" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND LICENCE</source>
          <target state="translated">著作権とライセンス</target>
        </trans-unit>
        <trans-unit id="d7f1de266854e2b8d4c927372f1242e7739925ed" translate="yes" xml:space="preserve">
          <source>COPYRIGHT AND LICENSE</source>
          <target state="translated">著作権とライセンス</target>
        </trans-unit>
        <trans-unit id="8c9b991a9d45dee993d0ee634ba8eafd7815c6a3" translate="yes" xml:space="preserve">
          <source>COPYRIGHT and LICENSE</source>
          <target state="translated">著作権とライセンス</target>
        </trans-unit>
        <trans-unit id="b2adcad6cf0cf6a066258c4fd1d02420f1966a91" translate="yes" xml:space="preserve">
          <source>COP_SEQ_RANGE_HIGH</source>
          <target state="translated">COP_SEQ_RANGE_HIGH</target>
        </trans-unit>
        <trans-unit id="a9b392a8220f4c5f1bcb88a16ab6a09829f1ffc1" translate="yes" xml:space="preserve">
          <source>COP_SEQ_RANGE_LOW</source>
          <target state="translated">COP_SEQ_RANGE_LOW</target>
        </trans-unit>
        <trans-unit id="6d917c2df32bb3f8fb6b5f8e529bb779c3dca6f7" translate="yes" xml:space="preserve">
          <source>CORE</source>
          <target state="translated">CORE</target>
        </trans-unit>
        <trans-unit id="9f2a7e4446d753ffa86ebd32d2855d851f9cf12a" translate="yes" xml:space="preserve">
          <source>CORE - Namespace for Perl's core routines</source>
          <target state="translated">CORE-Perl のコアルーチンの名前空間</target>
        </trans-unit>
        <trans-unit id="497675c86e638bfe224cc68e3f05d28dcf571f18" translate="yes" xml:space="preserve">
          <source>CORE::%s is not a keyword</source>
          <target state="translated">CORE::%s はキーワードではありません。</target>
        </trans-unit>
        <trans-unit id="ea0b6538392d829d8b749d944b7acd94dee0ddb6" translate="yes" xml:space="preserve">
          <source>CPAN</source>
          <target state="translated">CPAN</target>
        </trans-unit>
        <trans-unit id="a6110e98d6d5509cfa9c7e73794ab71e46a695de" translate="yes" xml:space="preserve">
          <source>CPAN - query, download and build perl modules from CPAN sites</source>
          <target state="translated">CPAN-CPAN のサイトから perl モジュールをクエリ、ダウンロード、ビルドする</target>
        </trans-unit>
        <trans-unit id="640c7f36ffad456a54e80bb77b215b4df80f86d4" translate="yes" xml:space="preserve">
          <source>CPAN Ratings</source>
          <target state="translated">CPANレーティング</target>
        </trans-unit>
        <trans-unit id="f5cb991183e9576ae99c7af8774c4d59270235f0" translate="yes" xml:space="preserve">
          <source>CPAN TESTERS AND PERL SMOKERS</source>
          <target state="translated">CPAN試験機およびPERL喫煙者</target>
        </trans-unit>
        <trans-unit id="b04380d2ad945f75e3aa967dafb36ed58ba766cd" translate="yes" xml:space="preserve">
          <source>CPAN Testers</source>
          <target state="translated">CPANテスター</target>
        </trans-unit>
        <trans-unit id="863161d001f9ccb830b592052aeebdcb0078239b" translate="yes" xml:space="preserve">
          <source>CPAN Testers Matrix</source>
          <target state="translated">CPANテスターマトリックス</target>
        </trans-unit>
        <trans-unit id="01505e76b90321ebd4493c61034cb8a884911e63" translate="yes" xml:space="preserve">
          <source>CPAN also keeps track of what it has done within the current session and doesn't try to build a package a second time regardless of whether it succeeded or not. It does not repeat a test run if the test has been run successfully before. Same for install runs.</source>
          <target state="translated">CPAN はまた、現在のセッション内で何をしたかを追跡し、成功したかどうかに関わらず、二度目のパッケージのビルドを試みません。以前にテストが成功していた場合、テストの実行を繰り返すことはありません。インストールの実行についても同様です。</target>
        </trans-unit>
        <trans-unit id="d978419581e9be6ec9c55f53ba43e4e7f68766bd" translate="yes" xml:space="preserve">
          <source>CPAN can now help you select a &quot;good&quot; mirror, based on which ones have the lowest 'ping' round-trip times. From the shell, use the command 'o conf init urllist' and allow CPAN to automatically select mirrors for you.</source>
          <target state="translated">CPANは、「Ping」ラウンドトリップ時間が最も短いミラーに基づいて、「良い」ミラーを選択するのに役立つようになりました。シェルから、'o conf init urllist' コマンドを使用して、CPAN が自動的にミラーを選択するようにします。</target>
        </trans-unit>
        <trans-unit id="5ef4af0178192ba3f8dbe6d0b6def5f18be1c055" translate="yes" xml:space="preserve">
          <source>CPAN can provide the best examples. &lt;a href=&quot;Test::Simple&quot;&gt;Test::Simple&lt;/a&gt;, &lt;a href=&quot;Test::More&quot;&gt;Test::More&lt;/a&gt;, &lt;a href=&quot;Test::Exception&quot;&gt;Test::Exception&lt;/a&gt; and &lt;a href=&quot;Test::Differences&quot;&gt;Test::Differences&lt;/a&gt; all use Test::Builder.</source>
          <target state="translated">CPANは最良の例を提供できます。&lt;a href=&quot;Test::Simple&quot;&gt;Test :: Simple&lt;/a&gt;、&lt;a href=&quot;Test::More&quot;&gt;Test :: More&lt;/a&gt;、&lt;a href=&quot;Test::Exception&quot;&gt;Test :: Exception&lt;/a&gt;、&lt;a href=&quot;Test::Differences&quot;&gt;Test :: Differencesは&lt;/a&gt;すべてTest :: Builderを使用します。</target>
        </trans-unit>
        <trans-unit id="9f419c26e2ea47eba870171b0304a0f12d770bcb" translate="yes" xml:space="preserve">
          <source>CPAN can provide the best examples. &lt;a href=&quot;simple&quot;&gt;Test::Simple&lt;/a&gt;, &lt;a href=&quot;more&quot;&gt;Test::More&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Exception&quot;&gt;Test::Exception&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Differences&quot;&gt;Test::Differences&lt;/a&gt; all use Test::Builder.</source>
          <target state="translated">CPANは最良の例を提供できます。&lt;a href=&quot;simple&quot;&gt;Test :: Simple&lt;/a&gt;、&lt;a href=&quot;more&quot;&gt;Test :: More&lt;/a&gt;、&lt;a href=&quot;http://search.cpan.org/perldoc/Test::Exception&quot;&gt;Test :: Exception&lt;/a&gt;および&lt;a href=&quot;http://search.cpan.org/perldoc/Test::Differences&quot;&gt;Test :: Differencesは&lt;/a&gt;すべてTest :: Builderを使用します。</target>
        </trans-unit>
        <trans-unit id="9b25cd0f5375c5eab72f3ffe3e62897e52e03cea" translate="yes" xml:space="preserve">
          <source>CPAN checks whether an install is needed and prints</source>
          <target state="translated">CPAN はインストールが必要かどうかをチェックして印刷します。</target>
        </trans-unit>
        <trans-unit id="d5ac7dd05001d7d37e2f43d1797c997c4df20e68" translate="yes" xml:space="preserve">
          <source>CPAN has several JAPH programs at &lt;a href=&quot;http://www.cpan.org/misc/japh&quot;&gt;http://www.cpan.org/misc/japh&lt;/a&gt;.</source>
          <target state="translated">CPANには、&lt;a href=&quot;http://www.cpan.org/misc/japh&quot;&gt;http:&lt;/a&gt; //www.cpan.org/misc/japhにいくつかのJAPHプログラムがあります。</target>
        </trans-unit>
        <trans-unit id="02833bc73787fea6b5bfa63c891711c6ecf458e5" translate="yes" xml:space="preserve">
          <source>CPAN module &lt;code&gt;&lt;a href=&quot;Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">CPANモジュール &lt;code&gt;&lt;a href=&quot;Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73829bcf0ad0c4b896f34810c840c5f0243a137e" translate="yes" xml:space="preserve">
          <source>CPAN module &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">CPANモジュール &lt;code&gt;&lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Regex::Set&quot;&gt;Unicode::Regex::Set&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec0e8e76dd47186c4a257a69793cc4b0fbd9812e" translate="yes" xml:space="preserve">
          <source>CPAN packages can be digitally signed by authors and thus verified with the security provided by strong cryptography. The exact mechanism is defined in the Module::Signature module. While this is generally considered a good thing, it is not always convenient to the end user to install modules that are signed incorrectly or where the key of the author is not available or where some prerequisite for Module::Signature has a bug and so on.</source>
          <target state="translated">CPAN パッケージは、作者によってデジタル署名され、強力な暗号技術によって提供されるセキュリティで検証されます。正確なメカニズムは Module::Signature モジュールで定義されています。これは一般的には良いことだと考えられていますが、 不正確な署名がされていたり、作者の鍵が利用できなかったり、 Module::Signature の前提条件にバグがあったりするようなモジュールを インストールすることは、エンドユーザにとって必ずしも便利なことではありません。</target>
        </trans-unit>
        <trans-unit id="b51337fb370844b9eff5cf2f0d2334791161629e" translate="yes" xml:space="preserve">
          <source>CPAN stands for Comprehensive Perl Archive Network, a multi-gigabyte archive replicated on hundreds of machines all over the world. CPAN contains tens of thousands of modules and extensions, source code and documentation, designed for</source>
          <target state="translated">CPAN は Comprehensive Perl Archive Network の略で、世界中の数百台のマシンに複製されたマルチギガバイトのアーカイブです。CPANには、数万のモジュールや拡張機能、ソースコード、ドキュメントが含まれており、以下のような目的で設計されています。</target>
        </trans-unit>
        <trans-unit id="4a083d1c70360c499c212a22f42c02ebc10a2b7e" translate="yes" xml:space="preserve">
          <source>CPAN stands for Comprehensive Perl Archive Network; it's a globally replicated trove of Perl materials, including documentation, style guides, tricks and traps, alternate ports to non-Unix systems and occasional binary distributions for these. Search engines for CPAN can be found at &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;</source>
          <target state="translated">CPANはComprehensive Perl Archive Networkの略です。これは、ドキュメント、スタイルガイド、トリックとトラップ、非UNIXシステムへの代替ポート、およびこれらの不定期のバイナリディストリビューションを含む、Perlマテリアルの世界的に複製された群れです。CPANの検索エンジンは、&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http：&lt;/a&gt; //www.cpan.org/にあります。</target>
        </trans-unit>
        <trans-unit id="db4a7f495a75e5647a60a515b464cd126cd6fe2f" translate="yes" xml:space="preserve">
          <source>CPAN stands for Comprehensive Perl Archive Network; it's a globally replicated trove of Perl materials, including documentation, style guides, tricks and traps, alternate ports to non-Unix systems and occasional binary distributions for these. Search engines for CPAN can be found at https://www.cpan.org/</source>
          <target state="translated">CPANはComprehensive Perl Archive Networkの略で、ドキュメント、スタイルガイド、トリックやトラップ、非Unixシステムへの代替ポート、そしてそれらのための時折のバイナリディストリビューションを含む、世界的に複製されたPerlの資料の宝庫です。CPAN の検索エンジンは https://www.cpan.org/で見つけることができます。</target>
        </trans-unit>
        <trans-unit id="11b7513cf5ed0783e222931555703c39249404ca" translate="yes" xml:space="preserve">
          <source>CPAN uses ExtUtils::MakeMaker's prompt() function to ask its questions, so if you set the PERL_MM_USE_DEFAULT environment variable, you shouldn't be asked any questions at all (assuming the modules you are installing are nice about obeying that variable as well):</source>
          <target state="translated">CPAN は ExtUtils::MakeMaker の prompt()関数を使用して質問をしますので、PERL_MM_USE_DEFAULT 環境変数を設定しておけば、質問されることは全くありません (インストールするモジュールがこの変数にも従ってくれると仮定しています)。</target>
        </trans-unit>
        <trans-unit id="763ab2cd14f13622b64f1d364ae89ff5e930c5e0" translate="yes" xml:space="preserve">
          <source>CPAN version is currently maintained by S&amp;eacute;bastien Aperghis-Tramoni &amp;lt;sebastien@aperghis.net&amp;gt;.</source>
          <target state="translated">CPANバージョンは現在、S&amp;eacute;bastienAperghis-Tramoni &amp;lt;sebastien@aperghis.net&amp;gt;によって管理されています。</target>
        </trans-unit>
        <trans-unit id="d022fca84f913595d0e465957aa3ec07aa26e29a" translate="yes" xml:space="preserve">
          <source>CPAN version produced by Jerry D. Hedden &amp;lt;jdhedden AT cpan DOT org&amp;gt;</source>
          <target state="translated">Jerry D. Heddenによって作成されたCPANバージョン&amp;lt;jdhedden AT cpan DOT org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="df1b7ad617e594d1fcea7ef95394577f7d4285ee" translate="yes" xml:space="preserve">
          <source>CPAN version produced by Jerry D. Hedden &amp;lt;jdhedden AT cpan DOT org&amp;gt;.</source>
          <target state="translated">CPANバージョンは、Jerry D. Hedden &amp;lt;jdhedden AT cpan DOT org&amp;gt;によって作成されました。</target>
        </trans-unit>
        <trans-unit id="deb6d0c2ba6a1e511bb2a73b69254f1705154545" translate="yes" xml:space="preserve">
          <source>CPAN, &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;</source>
          <target state="translated">CPAN、&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http：&lt;/a&gt; //www.cpan.org/</target>
        </trans-unit>
        <trans-unit id="487de831d21a908d502622e00613c7b641cb5b29" translate="yes" xml:space="preserve">
          <source>CPAN, or the Comprehensive Perl Archive Network &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;, is a replicated, worldwide repository of Perl software. See &lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3F-What-is-CPAN%3F&quot;&gt;What is CPAN?&lt;/a&gt;.</source>
          <target state="translated">CPAN、または包括的なPerlアーカイブネットワーク&lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;は、Perlソフトウェアの複製された世界規模のリポジトリです。&lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3F-What-is-CPAN%3F&quot;&gt;CPANとは何ですか？を&lt;/a&gt;参照してください。。</target>
        </trans-unit>
        <trans-unit id="a3c7ec93761c4b99669cfe3abe56f987f4d86e7b" translate="yes" xml:space="preserve">
          <source>CPAN, or the Comprehensive Perl Archive Network &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;, is a replicated, worldwide repository of Perl software. See &lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3f-What-is-CPAN%3f&quot;&gt;What is CPAN?&lt;/a&gt;.</source>
          <target state="translated">CPAN、または包括的なPerl Archive Network &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt;は、Perlソフトウェアの複製された世界的なリポジトリです。参照してください。&lt;a href=&quot;#What-modules-and-extensions-are-available-for-Perl%3f-What-is-CPAN%3f&quot;&gt;CPANとは何ですか？&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d24df83c42548921d5e891bad0ec265b58c5632b" translate="yes" xml:space="preserve">
          <source>CPAN.pm</source>
          <target state="translated">CPAN.pm</target>
        </trans-unit>
        <trans-unit id="df07d81df98f66bb5cc686dd3a7b7369a164da96" translate="yes" xml:space="preserve">
          <source>CPAN.pm can introduce some randomness when using hosts for download that are configured in the urllist parameter. Enter a numeric value between 0 and 1 to indicate how often you want to let CPAN.pm try a random host from the urllist. A value of one specifies to always use a random host as the first try. A value of zero means no randomness at all. Anything in between specifies how often, on average, a random host should be tried first.</source>
          <target state="translated">CPAN.pm は urllist パラメータで設定されているダウンロード用のホストを使用する際にランダム性を導入することができます。0 から 1 の間の数値を入力して、CPAN.pm に urllist からランダムなホストを試す頻度を示します。1 の値は、最初の試行に常にランダムなホストを使用するように指定します。0 の値はランダム性が全くないことを意味します。この間の値は、平均してランダムホストを最初に試す頻度を指定します。</target>
        </trans-unit>
        <trans-unit id="8be548e1857808a4c33f06e8483679790bde10ef" translate="yes" xml:space="preserve">
          <source>CPAN.pm can limit the size of the disk area for keeping the build directories with all the intermediate files.</source>
          <target state="translated">CPAN.pm は、すべての中間ファイルを含むビルドディレクトリを保持するためのディスク領域のサイズを制限することができます。</target>
        </trans-unit>
        <trans-unit id="f21743f9fae507577e1ebe77ee42077c588936ab" translate="yes" xml:space="preserve">
          <source>CPAN.pm can store customized build environments based on regular expressions for distribution names. These are YAML files where the default options for CPAN.pm and the environment can be overridden and dialog sequences can be stored that can later be executed by an Expect.pm object. The CPAN.pm distribution comes with some prefab YAML files that cover sample distributions that can be used as blueprints to store your own prefs. Please check out the distroprefs/ directory of the CPAN.pm distribution to get a quick start into the prefs system.</source>
          <target state="translated">CPAN.pm は、ディストリビューション名の正規表現に基づいてカスタマイズされたビルド環境を保存することができます。これらは YAML ファイルで、CPAN.pm と環境のデフォルトオプションをオーバーライドしたり、後で Expect.pm オブジェクトによって実行されるダイアログシーケンスを保存することができます。CPAN.pm ディストリビューションには、あなた自身のプリフを保存するための青写真として使用できるサンプルディストリビューションをカバーするいくつかのプリファブYAMLファイルが付属しています。CPAN.pm ディストリビューションの distroprefs/ディレクトリをチェックアウトしてください。</target>
        </trans-unit>
        <trans-unit id="fe8999832e8cb3e24c5ee5786438c2eb7045f528" translate="yes" xml:space="preserve">
          <source>CPAN.pm changes the current working directory often and needs to determine its own current working directory. By default it uses Cwd::cwd, but if for some reason this doesn't work on your system, configure alternatives according to the following table:</source>
          <target state="translated">CPAN.pm は現在の作業ディレクトリを頻繁に変更し、自分自身の現在の作業ディレクトリを決定する必要があります。デフォルトでは Cwd::cwd を使用しますが、何らかの理由でこれがあなたのシステム上で動作しない場合は、以下の表に従って代替案を設定してください。</target>
        </trans-unit>
        <trans-unit id="110953d17daedc5ab884b800e79aa6017f230c3c" translate="yes" xml:space="preserve">
          <source>CPAN.pm changes the current working directory often and needs to determine its own current working directory. Per default it uses Cwd::cwd but if this doesn't work on your system for some reason, alternatives can be configured according to the following table:</source>
          <target state="translated">CPAN.pm は現在の作業ディレクトリを頻繁に変更し、自分自身の現在の作業ディレクトリを決定する必要があります。デフォルトでは Cwd::cwd を使用しますが、もしこれが何らかの理由であなたのシステム上で動作しない場合、以下の表に従って代替案を設定することができます。</target>
        </trans-unit>
        <trans-unit id="316ae9b3e749a01c06c792f2cfcc80c4846f19f6" translate="yes" xml:space="preserve">
          <source>CPAN.pm ignores SIGPIPE. If the user sets &lt;code&gt;inactivity_timeout&lt;/code&gt; , a SIGALRM is used during the run of the &lt;code&gt;perl Makefile.PL&lt;/code&gt; or &lt;code&gt;perl
Build.PL&lt;/code&gt; subprocess. A SIGALRM is also used during module version parsing, and is controlled by &lt;code&gt;version_timeout&lt;/code&gt; .</source>
          <target state="translated">CPAN.pmはSIGPIPEを無視します。ユーザーが &lt;code&gt;inactivity_timeout&lt;/code&gt; を設定すると、 &lt;code&gt;perl Makefile.PL&lt;/code&gt; または &lt;code&gt;perl Build.PL&lt;/code&gt; サブプロセスの実行中にSIGALRMが使用されます。SIGALRMは、モジュールバージョンの解析中にも使用され、 &lt;code&gt;version_timeout&lt;/code&gt; によって制御されます。</target>
        </trans-unit>
        <trans-unit id="190c010b5387bba4ea2b42cb563bd4dbf19face7" translate="yes" xml:space="preserve">
          <source>CPAN.pm installs signal handlers for SIGINT and SIGTERM. While you are in the cpan-shell, it is intended that you can press &lt;code&gt;^C&lt;/code&gt; anytime and return to the cpan-shell prompt. A SIGTERM will cause the cpan-shell to clean up and leave the shell loop. You can emulate the effect of a SIGTERM by sending two consecutive SIGINTs, which usually means by pressing &lt;code&gt;^C&lt;/code&gt; twice.</source>
          <target state="translated">CPAN.pmは、SIGINTおよびSIGTERMのシグナルハンドラーをインストールします。 cpan-shellを開いている間は、いつでも &lt;code&gt;^C&lt;/code&gt; を押してcpan-shellプロンプトに戻ることができます。 SIGTERMは、cpan-shellをクリーンアップし、シェルループを終了します。 SIGTERMの効果をエミュレートするには、2つの連続したSIGINTを送信します。これは、通常、 &lt;code&gt;^C&lt;/code&gt; 2回押すことを意味します。</target>
        </trans-unit>
        <trans-unit id="74c9de97c18d0f26d42b5dbeeae85623299ae97e" translate="yes" xml:space="preserve">
          <source>CPAN.pm is regularly tested to run under 5.005 and assorted newer versions. It is getting more and more difficult to get the minimal prerequisites working on older perls. It is close to impossible to get the whole Bundle::CPAN working there. If you're in the position to have only these old versions, be advised that CPAN is designed to work fine without the Bundle::CPAN installed.</source>
          <target state="translated">CPAN.pm は定期的に 5.005 と様々な新しいバージョンで動作するようにテストされています。最小限の前提条件を古い Perl で動作させるのは、ますます難しくなっています。Bundle::CPAN全体をそこで動作させるのは不可能に近いです。もし、これらの古いバージョンしか持っていないのであれば、CPANはBundle::CPANがインストールされていなくても問題なく動作するように設計されていることを知っておいてください。</target>
        </trans-unit>
        <trans-unit id="cf1353490c4d7670619296c8008a7613115046dd" translate="yes" xml:space="preserve">
          <source>CPAN.pm sends all the good stuff either to STDOUT, or to a temp file if $CPAN::Be_Silent is set. I have to intercept that output so I can find out what happened.</source>
          <target state="translated">CPAN.pmはすべての良いものをSTDOUTに送るか、$CPAN::Be_Silentが設定されている場合はテンポラリファイルに送ります。その出力を傍受して、何が起こったのかを調べる必要があります。</target>
        </trans-unit>
        <trans-unit id="9dede3b8abe89d4a573f74c512265cae8a956106" translate="yes" xml:space="preserve">
          <source>CPAN.pm will then fetch the index files from one of the CPAN sites that come at the beginning of urllist. It will later check for each module to see whether there is a local copy of the most recent version.</source>
          <target state="translated">CPAN.pm は urllist の先頭にある CPAN サイトの一つからインデックスファイルを取得します。その後、各モジュールについて、最新バージョンのローカルコピーがあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="2867ea997c1ecbeaa882b9d340cc76b94bdae145" translate="yes" xml:space="preserve">
          <source>CPAN.pm works nicely without network access, too. If you maintain machines that are not networked at all, you should consider working with &lt;code&gt;file:&lt;/code&gt; URLs. You'll have to collect your modules somewhere first. So you might use CPAN.pm to put together all you need on a networked machine. Then copy the $CPAN::Config-&amp;gt;{keep_source_where} (but not $CPAN::Config-&amp;gt;{build_dir}) directory on a floppy. This floppy is kind of a personal CPAN. CPAN.pm on the non-networked machines works nicely with this floppy. See also below the paragraph about CD-ROM support.</source>
          <target state="translated">CPAN.pmもネットワークにアクセスしなくてもうまく機能します。ネットワークに接続されていないマシンを維持している場合は、 &lt;code&gt;file:&lt;/code&gt; URLの使用を検討する必要があります。最初にどこかでモジュールを収集する必要があります。したがって、CPAN.pmを使用して、ネットワークマシンに必要なすべてのものをまとめることができます。次に、$ CPAN :: Config-&amp;gt; {keep_source_where}（ただし$ CPAN :: Config-&amp;gt; {build_dir}ではなく）ディレクトリをフロッピーにコピーします。このフロッピーは、個人のCPANの一種です。ネットワークに接続されていないマシンのCPAN.pmは、このフロッピーでうまく動作します。CD-ROMサポートに関する段落の下も参照してください。</target>
        </trans-unit>
        <trans-unit id="b58516423735ce2c3f324d8402c003fc36fbed0f" translate="yes" xml:space="preserve">
          <source>CPAN/Config.pm</source>
          <target state="translated">CPAN/Config.pm</target>
        </trans-unit>
        <trans-unit id="6faef7e4f766e6858ddfbab08e842e5664c02d4a" translate="yes" xml:space="preserve">
          <source>CPAN::API::HOWTO</source>
          <target state="translated">CPAN::API::HOWTO</target>
        </trans-unit>
        <trans-unit id="7d13c1f45959303dde93846efab68b723f0e1350" translate="yes" xml:space="preserve">
          <source>CPAN::API::HOWTO - a recipe book for programming with CPAN.pm</source>
          <target state="translated">CPAN::API::HOWTO-CPAN.pm を使ったプログラミングのレシピ本</target>
        </trans-unit>
        <trans-unit id="64b36001560d3fac13b876398b3f1a59def99f26" translate="yes" xml:space="preserve">
          <source>CPAN::Author, CPAN::Bundle, CPAN::Module, and CPAN::Distribution inherit this method. It prints the data structure associated with an object. Useful for debugging. Note: the data structure is considered internal and thus subject to change without notice.</source>
          <target state="translated">CPAN::Author、CPAN::Bundle、CPAN::Module、およびCPAN::Distributionは、このメソッドを継承しています。オブジェクトに関連付けられたデータ構造を表示する。デバッグに便利。注意:データ構造は内部的なものとみなされるため、予告なく変更される可能性がある。</target>
        </trans-unit>
        <trans-unit id="2446a32cd0ff78f16b4c1f3133beeac56c5f5898" translate="yes" xml:space="preserve">
          <source>CPAN::Debug</source>
          <target state="translated">CPAN::Debug</target>
        </trans-unit>
        <trans-unit id="3cc1933835ca0280363968e304f73c0a15112e4c" translate="yes" xml:space="preserve">
          <source>CPAN::Debug - internal debugging for CPAN.pm</source>
          <target state="translated">CPAN::Debug-CPAN.pm の内部デバッグ</target>
        </trans-unit>
        <trans-unit id="8d7cc75d89d8c3bb9bd4511533d5eed2ec9484af" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs</source>
          <target state="translated">CPAN::Distroprefs</target>
        </trans-unit>
        <trans-unit id="80ea37d944a5515b88dd77f972d31b6df3134129" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs -- read and match distroprefs</source>
          <target state="translated">CPAN::Distroprefs --distroprefs の読み込みとマッチ</target>
        </trans-unit>
        <trans-unit id="5bcd04a88f701c432b5a1ff104f6c8a0d02960ee" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs::Pref objects represent individual distroprefs documents. They are constructed automatically as part of &lt;code&gt;success&lt;/code&gt; results from &lt;code&gt;find()&lt;/code&gt; .</source>
          <target state="translated">CPAN :: Distroprefs :: Prefオブジェクトは、個々のdistroprefsドキュメントを表します。それらは &lt;code&gt;find()&lt;/code&gt; の &lt;code&gt;success&lt;/code&gt; 結果の一部として自動的に構築されます。</target>
        </trans-unit>
        <trans-unit id="0a80c4fbbd0b304da11de451846a67216c923a02" translate="yes" xml:space="preserve">
          <source>CPAN::Distroprefs::Pref objects represent individual distroprefs documents. They are constructed automatically as part of &lt;code&gt;success&lt;/code&gt; results from &lt;code&gt;find()&lt;/code&gt;.</source>
          <target state="translated">CPAN :: Distroprefs :: Prefオブジェクトは、個々のdistroprefsドキュメントを表します。これらは、 &lt;code&gt;find()&lt;/code&gt; からの &lt;code&gt;success&lt;/code&gt; 結果の一部として自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="a2f3edd9da9fa97ece6eafd83608b4b243b452a0" translate="yes" xml:space="preserve">
          <source>CPAN::FirstTime</source>
          <target state="translated">CPAN::FirstTime</target>
        </trans-unit>
        <trans-unit id="78dc35292a9ffa84e8778b2bc228974b2a98a06d" translate="yes" xml:space="preserve">
          <source>CPAN::FirstTime - Utility for CPAN::Config file Initialization</source>
          <target state="translated">CPAN::FirstTime-CPAN::Config ファイル初期化用ユーティリティ</target>
        </trans-unit>
        <trans-unit id="e737cd6e08d40b3a667635e5cb83727e8679bd6f" translate="yes" xml:space="preserve">
          <source>CPAN::FirstTime::init()</source>
          <target state="translated">CPAN::FirstTime::init()</target>
        </trans-unit>
        <trans-unit id="85ea935cb2e14666fd64cb017917705b1d6fede5" translate="yes" xml:space="preserve">
          <source>CPAN::HandleConfig</source>
          <target state="translated">CPAN::HandleConfig</target>
        </trans-unit>
        <trans-unit id="24310cde90de0fb64790326e96a727677d4e7601" translate="yes" xml:space="preserve">
          <source>CPAN::HandleConfig - internal configuration handling for CPAN.pm</source>
          <target state="translated">CPAN::HandleConfig-CPAN.pm の内部設定処理</target>
        </trans-unit>
        <trans-unit id="64057ceb28c792089f8152cbd3da3bcade5223e9" translate="yes" xml:space="preserve">
          <source>CPAN::Kwalify</source>
          <target state="translated">CPAN::Kwalify</target>
        </trans-unit>
        <trans-unit id="a2e5f91adff087cfa00a37e97d84ee7727243629" translate="yes" xml:space="preserve">
          <source>CPAN::Kwalify - Interface between CPAN.pm and Kwalify.pm</source>
          <target state="translated">CPAN::Kwalify-CPAN.pm と Kwalify.pm の間のインターフェース</target>
        </trans-unit>
        <trans-unit id="4b8f36fffdfa53be5f4b115ae8913d434ac5c6b1" translate="yes" xml:space="preserve">
          <source>CPAN::Meta</source>
          <target state="translated">CPAN::Meta</target>
        </trans-unit>
        <trans-unit id="48ad65740fe63343931a8656187eafec5955c57f" translate="yes" xml:space="preserve">
          <source>CPAN::Meta - the distribution metadata for a CPAN dist</source>
          <target state="translated">CPAN::Meta-CPAN distのディストリビューションメタデータ。</target>
        </trans-unit>
        <trans-unit id="73001d880b33350252b208c4e0748fe317bc1a14" translate="yes" xml:space="preserve">
          <source>CPAN::Meta provides a simple class to represent this distribution metadata (or</source>
          <target state="translated">CPAN::Metaは、この配布メタデータを表現するシンプルなクラスを提供します。</target>
        </trans-unit>
        <trans-unit id="bf488c14acf7130238ab7ab864400d15606e4dcc" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Converter</source>
          <target state="translated">CPAN::Meta::Converter</target>
        </trans-unit>
        <trans-unit id="3a44aacfd90649473b04272bf68b167438021597" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Converter - Convert CPAN distribution metadata structures</source>
          <target state="translated">CPAN::Meta::Converter-CPAN ディストリビューションのメタデータ構造を変換する</target>
        </trans-unit>
        <trans-unit id="e74c7b35ace25f98dcab7adda6d087e4d41138b2" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Feature</source>
          <target state="translated">CPAN::Meta::Feature</target>
        </trans-unit>
        <trans-unit id="e77a117c65ccb9a682ea3baf643ba394032f0657" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Feature - an optional feature provided by a CPAN distribution</source>
          <target state="translated">CPAN::Meta::Feature-CPAN ディストリビューションで提供されるオプションの機能。</target>
        </trans-unit>
        <trans-unit id="e05ed4b2cca8e77098c550bdf2e7803252cf0419" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History</source>
          <target state="translated">CPAN::Meta::History</target>
        </trans-unit>
        <trans-unit id="3d4ef469c0a2fd520f2668dcee9d50b4a92831af" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History - history of CPAN Meta Spec changes</source>
          <target state="translated">CPAN::Meta::History-CPANメタ仕様の変更履歴</target>
        </trans-unit>
        <trans-unit id="63a20178ce03327fd7ce61d35e3d28cf7389d57e" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_0</source>
          <target state="translated">CPAN::Meta::History::Meta_1_0</target>
        </trans-unit>
        <trans-unit id="4c76496897217f6b28f34a5999470faf19da7f33" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_0 - Version 1.0 metadata specification for META.yml</source>
          <target state="translated">CPAN::Meta::History::Meta_1_0-META.yml のバージョン 1.0 メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="ba913709397d694384cad42b5967ba97f7017dea" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_1</source>
          <target state="translated">CPAN::Meta::History::Meta_1_1</target>
        </trans-unit>
        <trans-unit id="7d8f39c866aada4c5c7c3961949f6bc55fb8974c" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_1 - Version 1.1 metadata specification for META.yml</source>
          <target state="translated">CPAN::Meta::History::Meta_1_1-META.yml のバージョン 1.1 メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="1f20c5ce694247d2eb820323008522888c093e8d" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_2</source>
          <target state="translated">CPAN::Meta::History::Meta_1_2</target>
        </trans-unit>
        <trans-unit id="1ac83fedd5492a444b000b4073f44de3c7919193" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_2 - Version 1.2 metadata specification for META.yml</source>
          <target state="translated">CPAN::Meta::History::Meta_1_2_2-META.yml のバージョン 1.2 メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="2b035ec656582b467956149f35002359f79c8e55" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_3</source>
          <target state="translated">CPAN::Meta::History::Meta_1_3</target>
        </trans-unit>
        <trans-unit id="d7ae7add4211fafefa6b4e8776cab276f84dcc89" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_3 - Version 1.3 metadata specification for META.yml</source>
          <target state="translated">CPAN::Meta::History::Meta_1_3-META.yml のバージョン 1.3 メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="5ab69aa6faceb5500a76eace17ff9300c464214e" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_4</source>
          <target state="translated">CPAN::Meta::History::Meta_1_4</target>
        </trans-unit>
        <trans-unit id="c4026439639f237a4b2722822cbe43bc68b0f0a4" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::History::Meta_1_4 - Version 1.4 metadata specification for META.yml</source>
          <target state="translated">CPAN::Meta::History::Meta_1_4-META.yml のバージョン 1.4 メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="b93049ddccd3b5964f6ccdc08c6a2888e17af001" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Merge</source>
          <target state="translated">CPAN::Meta::Merge</target>
        </trans-unit>
        <trans-unit id="4fe7d2aec8f5226d2a8a01d5327d50b15e085cf1" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Merge - Merging CPAN Meta fragments</source>
          <target state="translated">CPAN::Meta::Merge-CPAN Meta フラグメントをマージする</target>
        </trans-unit>
        <trans-unit id="59a4bf767d93cb4558936ab83a63cbc35d95b95d" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Prereqs</source>
          <target state="translated">CPAN::Meta::Prereqs</target>
        </trans-unit>
        <trans-unit id="05ec9fad7ede51b61fe7feb474e02adc2a6d4635" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Prereqs - a set of distribution prerequisites by phase and type</source>
          <target state="translated">CPAN::Meta::Prereqs-フェーズとタイプ別の配布前提条件のセット</target>
        </trans-unit>
        <trans-unit id="abd64823a6e9d665af8461e2c27c91e2bebb3182" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Requirements</source>
          <target state="translated">CPAN::Meta::Requirements</target>
        </trans-unit>
        <trans-unit id="f0f14af6a21fdfef215ec198ceb71c2f5ca2993d" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Requirements - a set of version requirements for a CPAN dist</source>
          <target state="translated">CPAN::Meta::Requirements-CPAN distのバージョン要件のセット。</target>
        </trans-unit>
        <trans-unit id="83ae05af348305875670e0df393908708ee5c284" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Spec</source>
          <target state="translated">CPAN::Meta::Spec</target>
        </trans-unit>
        <trans-unit id="72c4f43258ec93a850621e0bf7f50c5239b4a882" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Spec - specification for CPAN distribution metadata</source>
          <target state="translated">CPAN::Meta::Spec-CPAN配布メタデータの仕様</target>
        </trans-unit>
        <trans-unit id="f53b9ec4780637887d4c02075a461cedf9448d3f" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Validator</source>
          <target state="translated">CPAN::Meta::Validator</target>
        </trans-unit>
        <trans-unit id="86eb5e58240b2848f6d3ea2d072260021ef84be0" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::Validator - validate CPAN distribution metadata structures</source>
          <target state="translated">CPAN::Meta::Validator-CPAN ディストリビューションのメタデータ構造を検証する</target>
        </trans-unit>
        <trans-unit id="208f6e92b224465a177e744e188b4255cd284c6e" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::YAML</source>
          <target state="translated">CPAN::Meta::YAML</target>
        </trans-unit>
        <trans-unit id="626d1c9831b7c2685adada5e5c8869b4c0685b60" translate="yes" xml:space="preserve">
          <source>CPAN::Meta::YAML - Read and write a subset of YAML for CPAN Meta files</source>
          <target state="translated">CPAN::Meta::YAML-CPAN メタファイル用の YAML のサブセットを読み書きする</target>
        </trans-unit>
        <trans-unit id="8dcc2e6edc3eadab9e78355482bf7252fe18e3ff" translate="yes" xml:space="preserve">
          <source>CPAN::Nox</source>
          <target state="translated">CPAN::Nox</target>
        </trans-unit>
        <trans-unit id="0b944fc036709f45e2abf674dd21a2de916a71a8" translate="yes" xml:space="preserve">
          <source>CPAN::Nox - Wrapper around CPAN.pm without using any XS module</source>
          <target state="translated">CPAN::Nox-XS モジュールを使わない CPAN.pm のラッパー</target>
        </trans-unit>
        <trans-unit id="4f10b5cd1bc0cc808fb08d652fc8dc5ab07aa1e6" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin</source>
          <target state="translated">CPAN::Plugin</target>
        </trans-unit>
        <trans-unit id="90b38b9fb846cae383975af3b4f6fd3cabdc24ab" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin - Base class for CPAN shell extensions</source>
          <target state="translated">CPAN::Plugin-CPAN シェル拡張の基底クラス</target>
        </trans-unit>
        <trans-unit id="73b3c1c1427c579ea6cd5b109622ba6ef3a76785" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin::Specfile</source>
          <target state="translated">CPAN::Plugin::Specfile</target>
        </trans-unit>
        <trans-unit id="a0e2ea8376440c75cc98c1ad8457bb4032bf2103" translate="yes" xml:space="preserve">
          <source>CPAN::Plugin::Specfile - Proof of concept implementation of a trivial CPAN::Plugin</source>
          <target state="translated">CPAN::Plugin::Specfile-トリビアルな CPAN::Plugin の実装の概念実証</target>
        </trans-unit>
        <trans-unit id="cff38ba28ab3cfea4d0464d49309db8969faf6ef" translate="yes" xml:space="preserve">
          <source>CPAN::Queue</source>
          <target state="translated">CPAN::Queue</target>
        </trans-unit>
        <trans-unit id="e3a09726a6ba57409ab3f10ea87af46541484c9f" translate="yes" xml:space="preserve">
          <source>CPAN::Queue - internal queue support for CPAN.pm</source>
          <target state="translated">CPAN::Queue-CPAN.pm の内部キューサポート</target>
        </trans-unit>
        <trans-unit id="349e923ec9cc993c3c5c400728886a4cd805bc87" translate="yes" xml:space="preserve">
          <source>CPAN::SQLite is a layer between the index files that are downloaded from the CPAN and CPAN.pm that speeds up metadata queries and reduces memory consumption of CPAN.pm considerably.</source>
          <target state="translated">CPAN::SQLiteは、CPANからダウンロードしたインデックスファイルとCPAN.pmの間にあるレイヤーで、メタデータのクエリを高速化し、CPAN.pmのメモリ消費を大幅に削減します。</target>
        </trans-unit>
        <trans-unit id="b47dcd8919f1f65cec06b9c2d7f965e75c2b1219" translate="yes" xml:space="preserve">
          <source>CPAN::Shell</source>
          <target state="translated">CPAN::Shell</target>
        </trans-unit>
        <trans-unit id="23798a7b15a5d75dd8c6bdfc98d7078c277c16e8" translate="yes" xml:space="preserve">
          <source>CPAN::Tarzip</source>
          <target state="translated">CPAN::Tarzip</target>
        </trans-unit>
        <trans-unit id="814fdd5396978409421856089181c07c58c4c4cf" translate="yes" xml:space="preserve">
          <source>CPAN::Tarzip - internal handling of tar archives for CPAN.pm</source>
          <target state="translated">CPAN::Tarzip-CPAN.pm 用の tar アーカイブの内部処理</target>
        </trans-unit>
        <trans-unit id="4901e7156541948e262f8f5d98071d2c7b3b87e3" translate="yes" xml:space="preserve">
          <source>CPAN::Version</source>
          <target state="translated">CPAN::Version</target>
        </trans-unit>
        <trans-unit id="30cd4b0821f4765c0d8295e7726cfae9b7fab40e" translate="yes" xml:space="preserve">
          <source>CPAN::Version - utility functions to compare CPAN versions</source>
          <target state="translated">CPAN::Version-CPAN のバージョンを比較するためのユーティリティ関数</target>
        </trans-unit>
        <trans-unit id="ec4a1634792e6ece098aa09e476bc1d9ef4268d0" translate="yes" xml:space="preserve">
          <source>CPAN::anycwd($path): Note on config variable getcwd</source>
          <target state="translated">CPAN::anycwd($path)。設定変数 getcwd に関する注意事項</target>
        </trans-unit>
        <trans-unit id="6bf4457df819c8d2b082c5c17c609ae27bb6a63b" translate="yes" xml:space="preserve">
          <source>CPAN::shell([$prompt, $command]) Starting Interactive Mode</source>
          <target state="translated">CPAN::shell([$prompt,$command])インタラクティブモードの起動</target>
        </trans-unit>
        <trans-unit id="4ffdbed7690fc2f38db76dd54cf504d79c06ee88" translate="yes" xml:space="preserve">
          <source>CPANMINUS</source>
          <target state="translated">CPANMINUS</target>
        </trans-unit>
        <trans-unit id="0300a08f28f15d52b8c0f31d868e80fadb408109" translate="yes" xml:space="preserve">
          <source>CPANPLUS</source>
          <target state="translated">CPANPLUS</target>
        </trans-unit>
        <trans-unit id="cddd63a37f15517811274317a3521885c8465e0c" translate="yes" xml:space="preserve">
          <source>CPANSCRIPT_LOGLEVEL</source>
          <target state="translated">CPANSCRIPT_LOGLEVEL</target>
        </trans-unit>
        <trans-unit id="596893c7ae353e11febbdfc549493341b79250bd" translate="yes" xml:space="preserve">
          <source>CPAN_META_JSON_BACKEND</source>
          <target state="translated">CPAN_META_JSON_BACKEND</target>
        </trans-unit>
        <trans-unit id="56630007ce8f6ea01649aae19d31614ccb2fcfb1" translate="yes" xml:space="preserve">
          <source>CPAN_META_JSON_DECODER</source>
          <target state="translated">CPAN_META_JSON_DECODER</target>
        </trans-unit>
        <trans-unit id="ca1237679e72b0e6f4c9e40aa693972b89e6005f" translate="yes" xml:space="preserve">
          <source>CPAN_OPTS</source>
          <target state="translated">CPAN_OPTS</target>
        </trans-unit>
        <trans-unit id="ff221d4752ce05f5a91bbf1d28b78a7bf7e2ddaa" translate="yes" xml:space="preserve">
          <source>CPU</source>
          <target state="translated">CPU</target>
        </trans-unit>
        <trans-unit id="4a2648ee2c7cdfe4f04963290c94c0f73b1a0296" translate="yes" xml:space="preserve">
          <source>CPU seconds is, in UNIX terms, the user time plus the system time of the process itself, as opposed to the real (wallclock) time and the time spent by the child processes. Less than 0.1 seconds is not accepted (-0.01 as the count, for example, will cause a fatal runtime exception).</source>
          <target state="translated">CPU秒とは、UNIX用語では、ユーザの時間にプロセス自体のシステム時間を加えたもので、実際の(ウォールクロックの)時間や子プロセスが費やした時間とは対照的なものです。0.1秒未満は認められません(例えば、カウントとして-0.01を指定すると、致命的なランタイム例外が発生します)。</target>
        </trans-unit>
        <trans-unit id="8eabeaf9c51703b78032cab60996509e2a9fbc29" translate="yes" xml:space="preserve">
          <source>CPU time</source>
          <target state="translated">CPUタイム</target>
        </trans-unit>
        <trans-unit id="ceae75038d81d55818f9c7099cc499bef29e500c" translate="yes" xml:space="preserve">
          <source>CREATING A SOURCE FILTER AS A SEPARATE EXECUTABLE</source>
          <target state="translated">別の実行可能ファイルとしてのソースフィルタの作成</target>
        </trans-unit>
        <trans-unit id="440025df559c6a5653bcee40ea212abfedca608a" translate="yes" xml:space="preserve">
          <source>CREATING FORMATTERS</source>
          <target state="translated">フォーマットの作成</target>
        </trans-unit>
        <trans-unit id="8f5fc61f95a802dc2f2c87590b81afa3dc2d9f36" translate="yes" xml:space="preserve">
          <source>CREATION</source>
          <target state="translated">CREATION</target>
        </trans-unit>
        <trans-unit id="338f52baadf832c435e6693a6b1e770c010b5681" translate="yes" xml:space="preserve">
          <source>CREDITS</source>
          <target state="translated">CREDITS</target>
        </trans-unit>
        <trans-unit id="e455615ff19fea236c13c0cc8cc42e9a1fb0de9b" translate="yes" xml:space="preserve">
          <source>CRITICAL DETAILS</source>
          <target state="translated">クリティカルディテイルズ</target>
        </trans-unit>
        <trans-unit id="4b79357f1f7c4a8b8c01c419e8cd32de82816fa7" translate="yes" xml:space="preserve">
          <source>CROSS-COMPILATION</source>
          <target state="translated">CROSS-COMPILATION</target>
        </trans-unit>
        <trans-unit id="a3d5ec7e72504ad29b8a4c994f24267617037161" translate="yes" xml:space="preserve">
          <source>CRTL_ENV</source>
          <target state="translated">CRTL_ENV</target>
        </trans-unit>
        <trans-unit id="4dd4581105bbe8d44425ee07bb7bb229d812b848" translate="yes" xml:space="preserve">
          <source>CUR</source>
          <target state="translated">CUR</target>
        </trans-unit>
        <trans-unit id="5ff3994b10db2ad29d009f4ea60878f1dbf5c21e" translate="yes" xml:space="preserve">
          <source>CURRENT BUILD INSTRUCTIONS</source>
          <target state="translated">現在の建築手順</target>
        </trans-unit>
        <trans-unit id="d7a2114fe29992707c06bdf0e24dd4971a33ab14" translate="yes" xml:space="preserve">
          <source>CURRENT MAINTAINER</source>
          <target state="translated">現在の管理者</target>
        </trans-unit>
        <trans-unit id="f132b454c07ac52e508f217f0add8bd7ce5fa710" translate="yes" xml:space="preserve">
          <source>CUSTOM ALIASES</source>
          <target state="translated">カスタムエイリアス</target>
        </trans-unit>
        <trans-unit id="457857075253f90b422c3d6ec94b4e07bc6c17a8" translate="yes" xml:space="preserve">
          <source>CUSTOM DATA</source>
          <target state="translated">カスタムデータ</target>
        </trans-unit>
        <trans-unit id="566216bf858af2148e9f96bcf3257d2d54bc9983" translate="yes" xml:space="preserve">
          <source>CUSTOM TRANSLATORS</source>
          <target state="translated">カスタム翻訳機</target>
        </trans-unit>
        <trans-unit id="8963b0f409c3a3fda6cdee265e282d666bc239f6" translate="yes" xml:space="preserve">
          <source>CV</source>
          <target state="translated">CV</target>
        </trans-unit>
        <trans-unit id="095d16308375c60700e556f5b8f5796ca1925951" translate="yes" xml:space="preserve">
          <source>CV Manipulation Functions</source>
          <target state="translated">CV操作機能</target>
        </trans-unit>
        <trans-unit id="2b943e6acf60a6fb581a6a5d00e315120f0f582e" translate="yes" xml:space="preserve">
          <source>CV reference counts and CvOUTSIDE</source>
          <target state="translated">CV参照カウントとCvOUTSIDE</target>
        </trans-unit>
        <trans-unit id="0c42c13d714fd16e36f14c85f7c7898781594d12" translate="yes" xml:space="preserve">
          <source>CV's can have CvPADLIST(cv) set to point to a PADLIST. This is the CV's scratchpad, which stores lexical variables and opcode temporary and per-thread values.</source>
          <target state="translated">CV の CvPADLIST(cv)は,PADLIST を指すように設定することができます.これは,字句変数やオペコードのテンポラリ値,スレッド毎の値を格納する CV のスクラッチパッドです.</target>
        </trans-unit>
        <trans-unit id="92b37c5475ec1dea78f404618ece63a8a92e114e" translate="yes" xml:space="preserve">
          <source>CVGEN</source>
          <target state="translated">CVGEN</target>
        </trans-unit>
        <trans-unit id="72f361fd5a33f48e600af7873c367abc9b77f221" translate="yes" xml:space="preserve">
          <source>CVs use the &lt;code&gt;CVf_SLABBED&lt;/code&gt; flag to indicate that the CV has a reference count on the slab. When this flag is set, the slab is accessible via &lt;code&gt;CvSTART&lt;/code&gt; when &lt;code&gt;CvROOT&lt;/code&gt; is not set, or by subtracting two pointers &lt;code&gt;(2*sizeof(I32 *))&lt;/code&gt; from &lt;code&gt;CvROOT&lt;/code&gt; when it is set. The alternative to this approach of sneaking the slab into &lt;code&gt;CvSTART&lt;/code&gt; during compilation would be to enlarge the &lt;code&gt;xpvcv&lt;/code&gt; struct by another pointer. But that would make all CVs larger, even though slab-based op freeing is typically of benefit only for programs that make significant use of string eval.</source>
          <target state="translated">CVは、 &lt;code&gt;CVf_SLABBED&lt;/code&gt; フラグを使用して、CVにスラブの参照カウントがあることを示します。このフラグが設定されている場合、スラブを介してアクセス可能である &lt;code&gt;CvSTART&lt;/code&gt; 場合 &lt;code&gt;CvROOT&lt;/code&gt; を設定、または二つのポインタ減算することによってされていない &lt;code&gt;(2*sizeof(I32 *))&lt;/code&gt; から &lt;code&gt;CvROOT&lt;/code&gt; が設定されている場合。コンパイル中にスラブを &lt;code&gt;CvSTART&lt;/code&gt; に忍び込ませるこのアプローチの代替方法は、 &lt;code&gt;xpvcv&lt;/code&gt; 構造体を別のポインターで拡大することです。ただし、スラブベースのop解放は通常、文字列評価を大幅に使用するプログラムにのみメリットがありますが、これによりすべてのCVが大きくなります。</target>
        </trans-unit>
        <trans-unit id="f1e51fb7a6114d481c1d0f93a37fb30c3e241a73" translate="yes" xml:space="preserve">
          <source>CX_CURPAD_SAVE</source>
          <target state="translated">CX_CURPAD_SAVE</target>
        </trans-unit>
        <trans-unit id="10bc4b4585dd74c80d037efe480f5a15cf760875" translate="yes" xml:space="preserve">
          <source>CX_CURPAD_SV</source>
          <target state="translated">CX_CURPAD_SV</target>
        </trans-unit>
        <trans-unit id="66460a3b93b78bfb0555774b761ce7dd073e8855" translate="yes" xml:space="preserve">
          <source>C_ARRAY_END</source>
          <target state="translated">C_ARRAY_END</target>
        </trans-unit>
        <trans-unit id="04a5223afc068c1c13a4c5f27ca78e5b10db53fb" translate="yes" xml:space="preserve">
          <source>C_ARRAY_LENGTH</source>
          <target state="translated">C_ARRAY_LENGTH</target>
        </trans-unit>
        <trans-unit id="3db0016459bc32ecd5a2abfda4e4b4eb9544e81d" translate="yes" xml:space="preserve">
          <source>C_FH</source>
          <target state="translated">C_FH</target>
        </trans-unit>
        <trans-unit id="ddb00c36c6d4c35daa72fdd0b44d9c728b39bcfa" translate="yes" xml:space="preserve">
          <source>C_FILE</source>
          <target state="translated">C_FILE</target>
        </trans-unit>
        <trans-unit id="575569dbcc2f1973e29e715e813fbf5f343f083a" translate="yes" xml:space="preserve">
          <source>C_SUBNAME</source>
          <target state="translated">C_SUBNAME</target>
        </trans-unit>
        <trans-unit id="dec4c830b8ddb5dccb4f7473e2780b24256aed99" translate="yes" xml:space="preserve">
          <source>C_constant arg_hashref, ITEM...</source>
          <target state="translated">C_constant arg_hashref,ITEM...</target>
        </trans-unit>
        <trans-unit id="a704c039a062759c68107bf491f441821b6748f3" translate="yes" xml:space="preserve">
          <source>C_string()</source>
          <target state="translated">C_string()</target>
        </trans-unit>
        <trans-unit id="c9a4bfcb48afedb38aac0a493b9bba80f14b49d8" translate="yes" xml:space="preserve">
          <source>C_stringify NAME</source>
          <target state="translated">C_stringify NAME</target>
        </trans-unit>
        <trans-unit id="49dd0ee71a9f8c8e59007d14c22f8f02a232442a" translate="yes" xml:space="preserve">
          <source>Cache Manager</source>
          <target state="translated">キャッシュマネージャ</target>
        </trans-unit>
        <trans-unit id="a9fca3e43fd40d529fa1de2b124c4181a70bcb17" translate="yes" xml:space="preserve">
          <source>Cache metadata (yes/no)?</source>
          <target state="translated">キャッシュ・メタデータ(はい/いいえ)?</target>
        </trans-unit>
        <trans-unit id="36e2cd82188ed6fa0e4b613f6e68c50033b4f7eb" translate="yes" xml:space="preserve">
          <source>Cache size for build directory (in MB)?</source>
          <target state="translated">ビルドディレクトリのキャッシュサイズ(MB)?</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="4216adaca29295eaea61f0fa24c35227b02c6845" translate="yes" xml:space="preserve">
          <source>Caching and deferred writing are inappropriate if you want the same file to be accessed simultaneously from more than one process. Other optimizations performed internally by this module are also incompatible with concurrent access. A future version of this module will support a &lt;code&gt;concurrent =&amp;gt; 1&lt;/code&gt; option that enables safe concurrent access.</source>
          <target state="translated">同じファイルに複数のプロセスから同時にアクセスしたい場合は、キャッシングと据え置き書き込みは不適切です。このモジュールによって内部的に実行される他の最適化も、同時アクセスと互換性がありません。このモジュールの将来のバージョンでは、安全な同時アクセスを可能にする &lt;code&gt;concurrent =&amp;gt; 1&lt;/code&gt; オプションがサポートされる予定です。</target>
        </trans-unit>
        <trans-unit id="66d425679370669a060d7b12eda4e17f2fb01bea" translate="yes" xml:space="preserve">
          <source>Caching is off by default, as it can (usually slightly) decrease accuracy and does not usually noticeably affect runtimes.</source>
          <target state="translated">キャッシングはデフォルトではオフになっていますが、これは精度を(通常はわずかに)低下させることができ、通常はランタイムに顕著な影響を与えないためです。</target>
        </trans-unit>
        <trans-unit id="81c8c72b5e27066945946d422a802165663f5930" translate="yes" xml:space="preserve">
          <source>Caesarean ciphers</source>
          <target state="translated">帝王切開の暗号</target>
        </trans-unit>
        <trans-unit id="f76942716d4c2528f7cd94b85c359f606e3e15f5" translate="yes" xml:space="preserve">
          <source>Calculate PI to N digits (including the 3 before the dot). The result is rounded according to the current rounding mode, which defaults to &quot;even&quot;.</source>
          <target state="translated">PI を N 桁(ドットの前の 3 を含む)に計算します。結果は現在の丸めモードに従って丸められ、デフォルトは &quot;偶数 &quot;です。</target>
        </trans-unit>
        <trans-unit id="ba16d2dfddf095e54ae25bc218255c71ce5afa48" translate="yes" xml:space="preserve">
          <source>Calculate digests of files</source>
          <target state="translated">ファイルのダイジェストを計算</target>
        </trans-unit>
        <trans-unit id="6edac12b6f864eee888f0c08f462e84fff153f20" translate="yes" xml:space="preserve">
          <source>Calculate the N'th root of $x.</source>
          <target state="translated">xのN番目の根を計算します。</target>
        </trans-unit>
        <trans-unit id="f7dc98fbb7b43c855859dedd630f45c56ad2bc12" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tangens of $x, modifying $x in place.</source>
          <target state="translated">xの円弧接線を計算し、$xをその場で修正します。</target>
        </trans-unit>
        <trans-unit id="49fd3457ed632359ca2520e72d6632cb278658b7" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tangens of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt; , modifying $y in place.</source>
          <target state="translated">&lt;code&gt;$y&lt;/code&gt; を &lt;code&gt;$x&lt;/code&gt; で割ったアークタンジェンスを計算し、$ yを適切に変更します。</target>
        </trans-unit>
        <trans-unit id="5bbe8238807ec8d47bbbcc6d01cee7e8f992583a" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tangens of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt;, modifying $y in place.</source>
          <target state="translated">&lt;code&gt;$y&lt;/code&gt; を &lt;code&gt;$x&lt;/code&gt; で割ったアーカスタンゲンを計算し、$ yを所定の位置に変更します。</target>
        </trans-unit>
        <trans-unit id="8171f0ff6bd907f4503e20866134c76966e85b6f" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of $x, modifying $x in place. See also &lt;a href=&quot;#batan2%28%29&quot;&gt;&quot;batan2()&quot;&lt;/a&gt;.</source>
          <target state="translated">$ xを所定の位置に変更して、$ xのアーカスタンジを計算します。&lt;a href=&quot;#batan2%28%29&quot;&gt;「batan2（）」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="4f94eb38f838a42af1307713af2f7a6e7542c447" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of $x, modifying $x in place. See also &lt;a href=&quot;#batan2()&quot;&gt;batan2()&lt;/a&gt;.</source>
          <target state="translated">$ xを所定の位置に変更して、$ xのアークタングを計算します。&lt;a href=&quot;#batan2()&quot;&gt;batan2（）&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="982777a50f0c3516dc7b84208808f54a3e72dbea" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt; , modifying $y in place. See also &lt;a href=&quot;#batan()&quot;&gt;batan()&lt;/a&gt;.</source>
          <target state="translated">弓のtanges計算 &lt;code&gt;$y&lt;/code&gt; で割った &lt;code&gt;$x&lt;/code&gt; 代わりに$ Yを変更し、。&lt;a href=&quot;#batan()&quot;&gt;batan（）&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="7d6fb13adb7bf3184a3048bb0dff7cf77ccc8226" translate="yes" xml:space="preserve">
          <source>Calculate the arcus tanges of &lt;code&gt;$y&lt;/code&gt; divided by &lt;code&gt;$x&lt;/code&gt;, modifying $y in place. See also &lt;a href=&quot;#batan%28%29&quot;&gt;&quot;batan()&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$y&lt;/code&gt; を &lt;code&gt;$x&lt;/code&gt; で割ったアーカスタンを計算し、$ yを所定の位置に変更します。&lt;a href=&quot;#batan%28%29&quot;&gt;「batan（）」&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ac94229d27fcaa835b1ec1d88cf3594ca1121397" translate="yes" xml:space="preserve">
          <source>Calculate the cosine of $x, modifying $x in place.</source>
          <target state="translated">xの余弦を計算して、$xの余弦を代わりに修正します。</target>
        </trans-unit>
        <trans-unit id="8312c24fc6c367f7ba0626e0df9859355b1ba267" translate="yes" xml:space="preserve">
          <source>Calculate the cosinus of $x, modifying $x in place.</source>
          <target state="translated">その場で$xを修正して、$xの余弦を計算します。</target>
        </trans-unit>
        <trans-unit id="961da91820feb8c98ca20b69e6e93c1fe53ffbb7" translate="yes" xml:space="preserve">
          <source>Calculate the sine of $x, modifying $x in place.</source>
          <target state="translated">x の正弦を計算し、$x をその場で修正します。</target>
        </trans-unit>
        <trans-unit id="01c8c185c9d12673e45f702a2f9d36653ab1f38e" translate="yes" xml:space="preserve">
          <source>Calculate the sinus of $x, modifying $x in place.</source>
          <target state="translated">その場で$xを修正して、$xの正弦を計算します。</target>
        </trans-unit>
        <trans-unit id="049cf6157b6ee1c242c2800800be8ef0165625bc" translate="yes" xml:space="preserve">
          <source>Calculate the square root of $x.</source>
          <target state="translated">xの平方根を計算します。</target>
        </trans-unit>
        <trans-unit id="f4820fe9e03a7c976939a8cebecd9d08b353aa30" translate="yes" xml:space="preserve">
          <source>Calculated means the facet was generated from another facet. Calculated facets may be cleared and regenerated whenever the event state changes.</source>
          <target state="translated">計算されたファセットは、そのファセットが他のファセットから生成されたことを意味します。計算された切子は、イベントの状態が変化するたびにクリアされ、再生成されることがあります。</target>
        </trans-unit>
        <trans-unit id="d5c08bd3d571674414934d46e315d05c1e757d23" translate="yes" xml:space="preserve">
          <source>Calculates the N'th root of &lt;code&gt;$x&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$x&lt;/code&gt; N乗根を計算します。</target>
        </trans-unit>
        <trans-unit id="b37e44d0a686e2ca230fb786ab85e288a1c54529" translate="yes" xml:space="preserve">
          <source>Calculates the N'th root of &lt;code&gt;$x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$x&lt;/code&gt; N乗根を計算します。</target>
        </trans-unit>
        <trans-unit id="d60ccc2f19222914da87593fea9f1afb62ee5252" translate="yes" xml:space="preserve">
          <source>Calculates the binomial coefficient n over k, also called the &quot;choose&quot; function, which is</source>
          <target state="translated">k上の二項係数nを計算します。</target>
        </trans-unit>
        <trans-unit id="2470f12a5e304e7422bd1a2f8c0e1abfd2982a1d" translate="yes" xml:space="preserve">
          <source>Calculates the binomial coefficient n over k, also called the &quot;choose&quot; function. The result is equivalent to:</source>
          <target state="translated">選択」関数とも呼ばれる、k上の二項係数nを計算します。と同等の結果が得られます。</target>
        </trans-unit>
        <trans-unit id="34e97fbd408b8eed5635c834b2854c0be8cb6dbf" translate="yes" xml:space="preserve">
          <source>Calculates the expression &lt;code&gt;e ** $x&lt;/code&gt; where &lt;code&gt;e&lt;/code&gt; is Euler's number.</source>
          <target state="translated">計算式 &lt;code&gt;e ** $x&lt;/code&gt; &lt;code&gt;e&lt;/code&gt; はオイラー数です。</target>
        </trans-unit>
        <trans-unit id="416b7a310945db184afb57b971e8e098dac1fa18" translate="yes" xml:space="preserve">
          <source>Calculates the factorial of $x. For instance:</source>
          <target state="translated">xの階乗を計算します。例えば</target>
        </trans-unit>
        <trans-unit id="62fb105cdba4cb5918fb1ee8f5656956e6874fed" translate="yes" xml:space="preserve">
          <source>Calculates the maximum command size the OS can exec. Effectively, this is the max size of a shell command line.</source>
          <target state="translated">OSが実行できる最大コマンドサイズを計算します。実質的には、これがシェルのコマンドラインの最大サイズとなります。</target>
        </trans-unit>
        <trans-unit id="fd42bdc4343d55afb259e24e240b92c18465e03e" translate="yes" xml:space="preserve">
          <source>Calculates two integers A and B so that A/B is equal to &lt;code&gt;e ** $x&lt;/code&gt; , where &lt;code&gt;e&lt;/code&gt; is Euler's number.</source>
          <target state="translated">2つの整数AとBを計算して、A / Bが &lt;code&gt;e ** $x&lt;/code&gt; 等しくなるようにします。ここで、 &lt;code&gt;e&lt;/code&gt; はオイラー数です。</target>
        </trans-unit>
        <trans-unit id="f2ca019b0d59ea6f0382ac9b50f298aadf929274" translate="yes" xml:space="preserve">
          <source>Calculates two integers A and B so that A/B is equal to &lt;code&gt;e ** $x&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is Euler's number.</source>
          <target state="translated">A / Bが &lt;code&gt;e ** $x&lt;/code&gt; 等しくなるように、2つの整数AとBを計算します。ここで、 &lt;code&gt;e&lt;/code&gt; はオイラーの数です。</target>
        </trans-unit>
        <trans-unit id="0037c314d771bc8eaa4953dbcb986cc7bf547ac0" translate="yes" xml:space="preserve">
          <source>Calendar of Perl Events</source>
          <target state="translated">Perl イベントカレンダー</target>
        </trans-unit>
        <trans-unit id="afd632ce2019ef9ec38232fb5195ec297239dcfa" translate="yes" xml:space="preserve">
          <source>Calendar time for December 12, 1995, at 10:30 am.</source>
          <target state="translated">1995年12月12日午前10時30分のカレンダータイム。</target>
        </trans-unit>
        <trans-unit id="cf386e5831516538d6deaa1383a8556be7abbcc0" translate="yes" xml:space="preserve">
          <source>California</source>
          <target state="translated">California</target>
        </trans-unit>
        <trans-unit id="a7a5d5cba867fa341140666997ab9bfd6cadc129" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;&lt;a href=&quot;../functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt; and return a list of two sockets created, or an empty list on failure.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/socketpair&quot;&gt;socketpair&lt;/a&gt;&lt;/code&gt; を呼び出し、作成された2つのソケットのリスト、または失敗した場合は空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="35dfe1234c2b3035ee2b40e6c30d2b36aabfe8c5" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;abort()&lt;/code&gt; on exit. This is used internally by perl itself to abort if exit is called while processing exit.</source>
          <target state="translated">終了時に &lt;code&gt;abort()&lt;/code&gt; を呼び出します。これは、exitの処理中にexitが呼び出された場合に中止するために、perl自体によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="6b6b5d06a5f85554364bcd897b8c29e92093294d" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;start&lt;/code&gt; immediately before adding any results to the aggregator. Among other times it records the start time for the test run.</source>
          <target state="translated">結果をアグリゲーターに追加 &lt;code&gt;start&lt;/code&gt; 直前にstartを呼び出します。特に、テスト実行の開始時間を記録します。</target>
        </trans-unit>
        <trans-unit id="bab90a1ca7bed318a773f1cd868353d680619794" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;stop&lt;/code&gt; immediately after adding all test results to the aggregator.</source>
          <target state="translated">すべてのテスト結果をアグリゲーターに追加した直後に、 &lt;code&gt;stop&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b397d3a007d888457eb1a3db65426142f2a1211a" translate="yes" xml:space="preserve">
          <source>Call Pod::Perldoc::GetOptsOO::getopts($object, \@ARGV, $truth)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f1fdfb2231f4e8ba5ad2172306eb394d414cf5" translate="yes" xml:space="preserve">
          <source>Call all the registered block hooks for type</source>
          <target state="translated">型に登録されているすべてのブロックフックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6d7e2e0ddf774eeed37f22e407552d0937049ad2" translate="yes" xml:space="preserve">
          <source>Call all the registered block hooks for type &lt;code&gt;which&lt;/code&gt;. &lt;code&gt;which&lt;/code&gt; is a preprocessing token; the type of &lt;code&gt;arg&lt;/code&gt; depends on &lt;code&gt;which&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;which&lt;/code&gt; の登録済みブロックフックをすべて呼び出します。 &lt;code&gt;which&lt;/code&gt; は前処理トークンです。 &lt;code&gt;arg&lt;/code&gt; のタイプは、 &lt;code&gt;which&lt;/code&gt; 依存します。</target>
        </trans-unit>
        <trans-unit id="409c307d19d683a501410b5ff5a68b6c8bd9aca3" translate="yes" xml:space="preserve">
          <source>Call the custom callback if one is set, otherwise this does nothing.</source>
          <target state="translated">カスタムコールバックが設定されている場合は、カスタムコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="d63876fa9d1b98c3c63563764cf54bc05c244034" translate="yes" xml:space="preserve">
          <source>Call the system level poll routine. If TIMEOUT is not specified then the call will block. Returns the number of handles which had events happen, or -1 on error.</source>
          <target state="translated">システム・レベル・ポーリング・ルーチンを呼び出します。TIMEOUT が指定されていない場合は、呼び出しがブロックされます。イベントが発生したハンドルの数、エラーの場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="707d41981449a7ac1f49727761a071399e9047fa" translate="yes" xml:space="preserve">
          <source>Call this function to signal to a stash that it has been assigned to another spot in the stash hierarchy. &lt;code&gt;stash&lt;/code&gt; is the stash that has been assigned. &lt;code&gt;oldstash&lt;/code&gt; is the stash it replaces, if any. &lt;code&gt;gv&lt;/code&gt; is the glob that is actually being assigned to.</source>
          <target state="translated">この関数を呼び出して、スタッシュ階層内の別のスポットに割り当てられたことをスタッシュに通知します。 &lt;code&gt;stash&lt;/code&gt; は、割り当てられているstashです。 &lt;code&gt;oldstash&lt;/code&gt; は、存在する場合、それが置き換えるstashです。 &lt;code&gt;gv&lt;/code&gt; は、実際に割り当てられているグロブです。</target>
        </trans-unit>
        <trans-unit id="897a2466922f6de52dc65c0d77a98544c7fb349a" translate="yes" xml:space="preserve">
          <source>CallSubPV</source>
          <target state="translated">CallSubPV</target>
        </trans-unit>
        <trans-unit id="ade75b74553b436dc4fbae17ff916436ba41a1b5" translate="yes" xml:space="preserve">
          <source>CallSubSV</source>
          <target state="translated">CallSubSV</target>
        </trans-unit>
        <trans-unit id="9c55daf6e61f9dc1556f1ec913e0ca99b7e0ea38" translate="yes" xml:space="preserve">
          <source>Callback Functions</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="c60c17f100badf24e67226833a550c8cb29e67d2" translate="yes" xml:space="preserve">
          <source>Callback called exit</source>
          <target state="translated">exit と呼ばれるコールバック</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="e2492d7f90f5ff291923cb9e3820556cd26e7081" translate="yes" xml:space="preserve">
          <source>Callbacks may also be added like this:</source>
          <target state="translated">このようにコールバックを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="0b30b959e54d6077a0087fde2fbe95f232d8abe1" translate="yes" xml:space="preserve">
          <source>Called after debug API inits itself.</source>
          <target state="translated">デバッグ API が起動した後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7ce9b93a40160290fff58c32f9bc646588fa275b" translate="yes" xml:space="preserve">
          <source>Called before &lt;code&gt;process_args&lt;/code&gt; to prepend the contents of an rc file to the options.</source>
          <target state="translated">rcファイルの内容をオプションの前に &lt;code&gt;process_args&lt;/code&gt; ために、process_argsの前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="01b1a27618644b64f84f4ae78cca932070236cdf" translate="yes" xml:space="preserve">
          <source>Called by &lt;a href=&quot;Pod::Simple::HTMLBatch&quot;&gt;Pod::Simple::HTMLBatch&lt;/a&gt; so that the class has a chance to initialize the converter. Internally it sets the &lt;code&gt;batch_mode&lt;/code&gt; property to true and sets &lt;code&gt;batch_mode_current_level()&lt;/code&gt;, but Pod::Simple::XHTML does not currently use those features. Subclasses might, though.</source>
          <target state="translated">&lt;a href=&quot;Pod::Simple::HTMLBatch&quot;&gt;Pod :: Simple :: HTMLBatch&lt;/a&gt;によって呼び出され、クラスがコンバーターを初期化する機会が与えられます。内部的には、 &lt;code&gt;batch_mode&lt;/code&gt; プロパティをtrueに設定し、 &lt;code&gt;batch_mode_current_level()&lt;/code&gt; を設定しますが、Pod :: Simple :: XHTMLは現在これらの機能を使用していません。ただし、サブクラスは可能性があります。</target>
        </trans-unit>
        <trans-unit id="712b31fe99457d34e411f45757dac056dcd534cd" translate="yes" xml:space="preserve">
          <source>Called by &lt;a href=&quot;htmlbatch&quot;&gt;Pod::Simple::HTMLBatch&lt;/a&gt; so that the class has a chance to initialize the converter. Internally it sets the &lt;code&gt;batch_mode&lt;/code&gt; property to true and sets &lt;code&gt;batch_mode_current_level()&lt;/code&gt; , but Pod::Simple::XHTML does not currently use those features. Subclasses might, though.</source>
          <target state="translated">&lt;a href=&quot;htmlbatch&quot;&gt;Pod :: Simple :: HTMLBatch&lt;/a&gt;によって呼び出され、クラスがコンバーターを初期化できるようにします。内部的には、 &lt;code&gt;batch_mode&lt;/code&gt; プロパティをtrueに設定し、 &lt;code&gt;batch_mode_current_level()&lt;/code&gt; を設定しますが、Pod :: Simple :: XHTMLは現在これらの機能を使用していません。しかし、サブクラスはそうかもしれません。</target>
        </trans-unit>
        <trans-unit id="d44d9ba6e8c865877532df9753c9657e69186427" translate="yes" xml:space="preserve">
          <source>Called by &lt;code&gt;close_test&lt;/code&gt; to clear the line showing test progress, or the parallel test ruler, prior to printing the final test result.</source>
          <target state="translated">最終テスト結果を出力する前に、 &lt;code&gt;close_test&lt;/code&gt; によって呼び出され、テストの進行状況を示す行または並列テスト定規をクリアします。</target>
        </trans-unit>
        <trans-unit id="83de9bce1b7b2bd7be455db4ac0ff451b79c596a" translate="yes" xml:space="preserve">
          <source>Called by Perl when it is freeing a regexp pattern so that the engine can release any resources pointed to by the &lt;code&gt;pprivate&lt;/code&gt; member of the &lt;code&gt;regexp&lt;/code&gt; structure. This is only responsible for freeing private data; Perl will handle releasing anything else contained in the &lt;code&gt;regexp&lt;/code&gt; structure.</source>
          <target state="translated">正規表現パターンを解放しているときにPerlによって呼び出され、エンジンが &lt;code&gt;regexp&lt;/code&gt; 構造体の &lt;code&gt;pprivate&lt;/code&gt; メンバーが指しているリソースを解放できるようにします。これは、個人データの解放のみを担当します。Perlは &lt;code&gt;regexp&lt;/code&gt; 構造に含まれる他のものの解放を処理します。</target>
        </trans-unit>
        <trans-unit id="192f5069ea69d61876f992ae04cbfebd42365fdf" translate="yes" xml:space="preserve">
          <source>Called by Test::Harness before any test output is generated.</source>
          <target state="translated">テスト出力が生成される前に Test::Harness によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0cd42467897ffdba4f9319dfefbd20551429ca89" translate="yes" xml:space="preserve">
          <source>Called by a utility method of makeaperl. Checks whether a given file is an XS library by seeing whether it defines any symbols starting with &lt;code&gt;boot_&lt;/code&gt; (with an optional leading underscore - needed on MacOS).</source>
          <target state="translated">makeaperlのユーティリティメソッドによって呼び出されます。指定されたファイルがXSライブラリであるかどうかを確認するために、 &lt;code&gt;boot_&lt;/code&gt; で始まるシンボルが定義されているかどうかを確認します（オプションの先頭の下線付き-MacOSで必要）。</target>
        </trans-unit>
        <trans-unit id="252637df9babf3148f5feaeda72912f2045c6976" translate="yes" xml:space="preserve">
          <source>Called by init_main.</source>
          <target state="translated">init_mainによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4cdb9b50857f3ef3652ef325b6cf3d72fa3622a7" translate="yes" xml:space="preserve">
          <source>Called by init_main. Initializes PERL_*</source>
          <target state="translated">init_mainによって呼び出される。PERL_*を初期化します。</target>
        </trans-unit>
        <trans-unit id="803f7311292b6dbe520d9001028a74a3740ad58e" translate="yes" xml:space="preserve">
          <source>Called by init_main. Sets up ABSPERL, PERL, FULLPERL and all the *PERLRUN* permutations.</source>
          <target state="translated">init_mainによって呼び出されます。ABSPERL、PERL、FULLPERL、およびすべての*PERLRUN*パーミュテーションを設定します。</target>
        </trans-unit>
        <trans-unit id="3f68bdd2c8090ffda024fb7a301dcec75150221e" translate="yes" xml:space="preserve">
          <source>Called by init_main. Sets up all INSTALL_* variables (except INSTALLDIRS) and *PREFIX.</source>
          <target state="translated">init_mainによって呼び出されます。すべてのINSTALL_*変数(INSTALLDIRSを除く)と*PREFIXを設定します。</target>
        </trans-unit>
        <trans-unit id="e5e9ec66a22e81bfffe8ba34ae133177fa3495b6" translate="yes" xml:space="preserve">
          <source>Called by init_main. Sets up all INST_* variables except those related to XS code. Those are handled in init_xs.</source>
          <target state="translated">init_mainによって呼び出されます。XSコードに関連するものを除いたすべてのINST_*変数を設定します。これらはinit_xsで処理されます。</target>
        </trans-unit>
        <trans-unit id="6dfa9b16abbbe06ab0d5e00e013cd050e482cced" translate="yes" xml:space="preserve">
          <source>Called by init_others, and calls ext ExtUtils::Liblist. See &lt;a href=&quot;ExtUtils::Liblist&quot;&gt;ExtUtils::Liblist&lt;/a&gt; for details.</source>
          <target state="translated">init_othersによって呼び出され、ext ExtUtils :: Liblistを呼び出します。詳細については、&lt;a href=&quot;ExtUtils::Liblist&quot;&gt;ExtUtils :: Liblist&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f0c75a0f13f487e51a8d6aa8f296a671eded4fd" translate="yes" xml:space="preserve">
          <source>Called by init_others, and calls ext ExtUtils::Liblist. See &lt;a href=&quot;liblist&quot;&gt;ExtUtils::Liblist&lt;/a&gt; for details.</source>
          <target state="translated">init_othersによって呼び出され、ext ExtUtils :: Liblistを呼び出します。詳細は&lt;a href=&quot;liblist&quot;&gt;ExtUtils :: Liblist&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="aa989d1b35e9dfa1af106d6dbfbb5e0924c7a182" translate="yes" xml:space="preserve">
          <source>Called by staticmake. Defines how to write the Makefile to produce a static new perl.</source>
          <target state="translated">staticmakeによって呼び出されます。静的な新しいperlを生成するためのMakefileの書き方を定義します。</target>
        </trans-unit>
        <trans-unit id="a7da98d82f41c03c342a989f11faab94693c6c57" translate="yes" xml:space="preserve">
          <source>Called by the harness for each line of TAP it receives.</source>
          <target state="translated">ハーネスが受信したTAPのラインごとに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0521bfafa9ba37410f99fe5ff1bf683133d1cd71" translate="yes" xml:space="preserve">
          <source>Called by the harness when it needs to create a &lt;a href=&quot;TAP::Parser::Scheduler&quot;&gt;TAP::Parser::Scheduler&lt;/a&gt;. Override in a subclass to provide an alternative scheduler. &lt;code&gt;make_scheduler&lt;/code&gt; is passed the list of tests that was passed to &lt;code&gt;aggregate_tests&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser::Scheduler&quot;&gt;TAP :: Parser :: Scheduler&lt;/a&gt;を作成する必要があるときにハーネスによって呼び出されます。サブクラスをオーバーライドして、代替スケジューラーを提供します。 &lt;code&gt;make_scheduler&lt;/code&gt; には、 &lt;code&gt;aggregate_tests&lt;/code&gt; に渡されたテストのリストが渡されます。</target>
        </trans-unit>
        <trans-unit id="567cd3e87bf8931281fcaa23e35e2da3fe139b11" translate="yes" xml:space="preserve">
          <source>Called by the harness when it needs to create a &lt;a href=&quot;parser/scheduler&quot;&gt;TAP::Parser::Scheduler&lt;/a&gt;. Override in a subclass to provide an alternative scheduler. &lt;code&gt;make_scheduler&lt;/code&gt; is passed the list of tests that was passed to &lt;code&gt;aggregate_tests&lt;/code&gt; .</source>
          <target state="translated">&lt;a href=&quot;parser/scheduler&quot;&gt;TAP :: Parser :: Scheduler&lt;/a&gt;を作成する必要があるときに、ハーネスによって呼び出されます。サブクラスでオーバーライドして、代替スケジューラを提供します。 &lt;code&gt;make_scheduler&lt;/code&gt; には、 &lt;code&gt;aggregate_tests&lt;/code&gt; に渡されたテストのリストが渡されます。</target>
        </trans-unit>
        <trans-unit id="496f62a4d27b344cea2367c44afc046f7d3e616c" translate="yes" xml:space="preserve">
          <source>Called in list context, returns a list consisting of all the keys of the named hash, or in Perl 5.12 or later only, the indices of an array. Perl releases prior to 5.12 will produce a syntax error if you try to use an array argument. In scalar context, returns the number of keys or indices.</source>
          <target state="translated">リストコンテキストで呼び出された場合、指定されたハッシュのすべてのキーからなるリスト、またはPerl 5.12以降では配列のインデックスを返します。5.12以前のPerlのリリースでは、配列の引数を使おうとすると構文エラーが発生します。スカラコンテキストでは、キーまたはインデックスの数を返します。</target>
        </trans-unit>
        <trans-unit id="467bfe2c2b5fcadd2c658d71f62e583886879a81" translate="yes" xml:space="preserve">
          <source>Called just before exit.</source>
          <target state="translated">出口の直前に電話があった。</target>
        </trans-unit>
        <trans-unit id="56f111d681d8f9bb2b8ea3bbe2cb68fe1cbd1b6b" translate="yes" xml:space="preserve">
          <source>Called to close a test session.</source>
          <target state="translated">テストセッションを閉じるために呼び出されました。</target>
        </trans-unit>
        <trans-unit id="0fea40ea6e66a6d129222181dca9ffffa1dc50aa" translate="yes" xml:space="preserve">
          <source>Called to create a new test session. A test session looks like this:</source>
          <target state="translated">新しいテストセッションを作成するために呼び出されました。テストセッションは次のようになります。</target>
        </trans-unit>
        <trans-unit id="bec535037f1a075b8ca545622477cf0f336b95f2" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;$`&lt;/code&gt; , &lt;code&gt;$'&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; and their named equivalents, ${^PREMATCH}, ${^POSTMATCH} and ${^MATCH}, as well as the numbered capture groups (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , ...).</source>
          <target state="translated">&lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$'&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; の値、およびそれらに相当する$ {^ PREMATCH}、$ {^ POSTMATCH}と$ {^ MATCH}、および番号付きのキャプチャグループ（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; 、...）。</target>
        </trans-unit>
        <trans-unit id="28c2d939a2818d842c409238148056a468e80c26" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$'&lt;/code&gt;, &lt;code&gt;$&amp;amp;&lt;/code&gt; and their named equivalents, ${^PREMATCH}, ${^POSTMATCH} and ${^MATCH}, as well as the numbered capture groups (&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, ...).</source>
          <target state="translated">&lt;code&gt;$`&lt;/code&gt; 、 &lt;code&gt;$'&lt;/code&gt; 、 &lt;code&gt;$&amp;amp;&lt;/code&gt; の値とそれに相当する名前の$ {^ PREMATCH}、$ {^ POSTMATCH}、$ {^ MATCH}、および番号付きのキャプチャグループ（ &lt;code&gt;$1&lt;/code&gt; 、 &lt;code&gt;$2&lt;/code&gt; を取得/設定するために呼び出されます、...）。</target>
        </trans-unit>
        <trans-unit id="f05cab34d068a722bc12f2e226cde25cd9659c30" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt; , as well as by some utility functions in &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;%+&lt;/code&gt; と &lt;code&gt;%-&lt;/code&gt; の値を取得/設定するため、および&lt;a href=&quot;re&quot;&gt;reの&lt;/a&gt;いくつかのユーティリティ関数によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="172a2008c9c9bfdccd10398a4900cd9074f2930c" translate="yes" xml:space="preserve">
          <source>Called to get/set the value of &lt;code&gt;%+&lt;/code&gt; and &lt;code&gt;%-&lt;/code&gt;, as well as by some utility functions in &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;%+&lt;/code&gt; と &lt;code&gt;%-&lt;/code&gt; の値を取得/設定するため、および&lt;a href=&quot;re&quot;&gt;reの&lt;/a&gt;いくつかのユーティリティ関数によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8ca1fbe0a0f38d437dca54b642d9f31c3ccb8f90" translate="yes" xml:space="preserve">
          <source>Called when API must show a message (warnings, errors etc.).</source>
          <target state="translated">APIがメッセージ(警告、エラーなど)を表示する必要がある場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f94cf1c0617789052abd6d872abe927053b4b0cd" translate="yes" xml:space="preserve">
          <source>Called when a job is complete to unlock it. If a callback has been registered with &lt;code&gt;on_finish&lt;/code&gt; , it calls it. Otherwise, it does nothing.</source>
          <target state="translated">ジョブが完了したときに呼び出され、ロックを解除します。コールバックが &lt;code&gt;on_finish&lt;/code&gt; に登録されている場合は、それを呼び出します。それ以外の場合は、何もしません。</target>
        </trans-unit>
        <trans-unit id="529d993616ad651bd31b98b890f1161f3ca2f07f" translate="yes" xml:space="preserve">
          <source>Called when a job is complete to unlock it. If a callback has been registered with &lt;code&gt;on_finish&lt;/code&gt;, it calls it. Otherwise, it does nothing.</source>
          <target state="translated">ジョブのロックを解除するためにジョブが完了したときに呼び出されます。コールバックが &lt;code&gt;on_finish&lt;/code&gt; に登録されている場合は、それを呼び出します。それ以外の場合は、何もしません。</target>
        </trans-unit>
        <trans-unit id="c5516c9265ba63c86e3ef82397e79274838607cf" translate="yes" xml:space="preserve">
          <source>Called when execution stops (w/ args file, line).</source>
          <target state="translated">実行停止時に呼び出されます(引数ファイル、行を含む)。</target>
        </trans-unit>
        <trans-unit id="145748d07108bcdb9c427172d1270877727239ed" translate="yes" xml:space="preserve">
          <source>Called when the layer is popped from the stack. A layer will normally be popped after &lt;code&gt;Close()&lt;/code&gt; is called. But a layer can be popped without being closed if the program is dynamically managing layers on the stream. In such cases &lt;code&gt;Popped()&lt;/code&gt; should free any resources (buffers, translation tables, ...) not held directly in the layer's struct. It should also &lt;code&gt;Unread()&lt;/code&gt; any unconsumed data that has been read and buffered from the layer below back to that layer, so that it can be re-provided to what ever is now above.</source>
          <target state="translated">レイヤーがスタックからポップされたときに呼び出されます。通常、レイヤーは &lt;code&gt;Close()&lt;/code&gt; が呼び出された後にポップされます。ただし、プログラムがストリーム上のレイヤーを動的に管理している場合は、レイヤーを閉じなくてもポップできます。このような場合、 &lt;code&gt;Popped()&lt;/code&gt; は、レイヤーの構造体に直接保持されていないリソース（バッファー、変換テーブルなど）を解放する必要があります。また、下のレイヤーからそのレイヤーに読み取られてバッファーされた &lt;code&gt;Unread()&lt;/code&gt; データをUnread（）して、現在の上のレイヤーに再提供できるようにする必要もあります。</target>
        </trans-unit>
        <trans-unit id="939127156e81551fd5a7e818b4482a513aebb0f8" translate="yes" xml:space="preserve">
          <source>Called while stopped (can be a client event loop).</source>
          <target state="translated">停止中に呼び出されます(クライアントイベントループになります)。</target>
        </trans-unit>
        <trans-unit id="aac1bcb8d7dddba4603f778cf3da3d2bb22b9d64" translate="yes" xml:space="preserve">
          <source>Called without parameters, or with the first argument false, hash marks are suppressed. If the first argument is true but not a reference to a file handle glob, then \*STDERR is used. The second argument is the number of bytes per hash mark printed, and defaults to 1024. In all cases the return value is a reference to an array of two: the filehandle glob reference and the bytes per hash mark.</source>
          <target state="translated">パラメータなしでコールされた場合、または第一引数が false の場合、ハッシュマークは抑制される。第1引数が真で、ファイル・ハンドル・グロブへの参照がない場合は、\*STDERRが使用される。2 番目の引数は、ハッシュマークを印刷する際のバイト数であり、デフォルトは 1024 です。いずれの場合も、戻り値は、ファイルハンドル・グロブ参照とハッシュ・マークあたりのバイト数の 2 つの配列への参照となります。</target>
        </trans-unit>
        <trans-unit id="e216eb70c5a18b158cc8c755c284c444b41dcf38" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;functions/exit&quot;&gt;exit EXPR&lt;/a&gt; inside a thread causes the whole application to terminate. Because of this, the use of &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; inside threaded code, or in modules that might be used in threaded applications, is strongly discouraged.</source>
          <target state="translated">スレッド内で&lt;a href=&quot;functions/exit&quot;&gt;出口EXPR&lt;/a&gt;を呼び出すと、アプリケーション全体が終了します。このため、スレッド化されたコード内、またはスレッド化されたアプリケーションで使用される可能性のあるモジュールでの &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; の使用は、強くお勧めしません。</target>
        </trans-unit>
        <trans-unit id="2d2e77d4a5966924f91b9000c9d77963f423bb14" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;perlfunc#exit-EXPR&quot;&gt;exit()&lt;/a&gt; inside a thread causes the whole application to terminate. Because of this, the use of &lt;code&gt;exit()&lt;/code&gt; inside threaded code, or in modules that might be used in threaded applications, is strongly discouraged.</source>
          <target state="translated">スレッド内で&lt;a href=&quot;perlfunc#exit-EXPR&quot;&gt;exit（）を&lt;/a&gt;呼び出すと、アプリケーション全体が終了します。このため、スレッドコード内、またはスレッドアプリケーションで使用される可能性のあるモジュールで &lt;code&gt;exit()&lt;/code&gt; を使用することは強くお勧めしません。</target>
        </trans-unit>
        <trans-unit id="9e1f81bd75479e40b9c0318383b0b5ea0cddb02d" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;flush&lt;/code&gt; returns the array to immediate-write mode. If you wish to discard the deferred writes, you may call &lt;code&gt;-&amp;gt;discard&lt;/code&gt; instead of &lt;code&gt;-&amp;gt;flush&lt;/code&gt; . Note that in some cases, some of the data will have been written already, and it will be too late for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; to discard all the changes. Support for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; may be withdrawn in a future version of &lt;code&gt;Tie::File&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;-&amp;gt;flush&lt;/code&gt; を呼び出すと、配列が即時書き込みモードに戻ります。遅延書き込みを破棄したい場合は、 &lt;code&gt;-&amp;gt;flush&lt;/code&gt; の代わりに-&amp;gt; &lt;code&gt;-&amp;gt;discard&lt;/code&gt; 呼び出すことができます。場合によっては、一部のデータが既に書き込まれているため、 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; discardですべての変更を破棄するには遅すぎることに注意してください。 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; のサポートは、 &lt;code&gt;Tie::File&lt;/code&gt; 将来のバージョンで廃止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="76255ff12e8b31dd1faa9b3a8f1af6ce261a3237" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;flush&lt;/code&gt; returns the array to immediate-write mode. If you wish to discard the deferred writes, you may call &lt;code&gt;-&amp;gt;discard&lt;/code&gt; instead of &lt;code&gt;-&amp;gt;flush&lt;/code&gt;. Note that in some cases, some of the data will have been written already, and it will be too late for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; to discard all the changes. Support for &lt;code&gt;-&amp;gt;discard&lt;/code&gt; may be withdrawn in a future version of &lt;code&gt;Tie::File&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;flush&lt;/code&gt; を呼び出すと、アレイは即時書き込みモードに戻ります。延期された書き込みを破棄したい場合は、 &lt;code&gt;-&amp;gt;flush&lt;/code&gt; の代わりに-&amp;gt; &lt;code&gt;-&amp;gt;discard&lt;/code&gt; 呼び出すことができます。一部のデータはすでに書き込まれている場合があり、 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; discardですべての変更を破棄するには遅すぎることに注意してください。 &lt;code&gt;-&amp;gt;discard&lt;/code&gt; のサポートは、 &lt;code&gt;Tie::File&lt;/code&gt; 将来のバージョンで廃止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b218ac14d28e4eba90c2438d62379a52be6547e9" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;join()&lt;/code&gt; or &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; on an already detached thread will cause an error to be thrown.</source>
          <target state="translated">すでに切り離されているスレッドで &lt;code&gt;-&amp;gt;join()&lt;/code&gt; または &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="66b0f01a2dc8c4ec0ab9ed2203d7fa7fc14d740a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;-&amp;gt;join()&lt;/code&gt; or &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; on an already joined thread will cause an error to be thrown.</source>
          <target state="translated">すでに参加しているスレッドで &lt;code&gt;-&amp;gt;join()&lt;/code&gt; または &lt;code&gt;-&amp;gt;detach()&lt;/code&gt; を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="5013e17c5c2bf4d76b64a60f93a3e6d87ce580e9" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; in a thread indicates an abnormal exit for the thread. Any &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler in the thread will be called first, and then the thread will exit with a warning message that will contain any arguments passed in the &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">スレッドで &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; を呼び出すと、スレッドの異常終了を示します。スレッド内のすべての &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーが最初に呼び出され、次にスレッドは、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; 呼び出しで渡された引数を含む警告メッセージで終了します。</target>
        </trans-unit>
        <trans-unit id="432a891f5fe2a318db5e9ee1a582e0b88a0dccd1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;attributes::get()&lt;/code&gt; from within the scope of a null package declaration &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt; ;&lt;/code&gt; for an unblessed variable reference will not provide any starting package name for the 'fetch' method lookup. Thus, this circumstance will not result in a method call for package-defined attributes. A named subroutine knows to which symbol table entry it belongs (or originally belonged), and it will use the corresponding package. An anonymous subroutine knows the package name into which it was compiled (unless it was also compiled with a null package declaration), and so it will use that package name.</source>
          <target state="translated">nullパッケージ宣言 &lt;code&gt;&lt;a href=&quot;functions/package&quot;&gt;package&lt;/a&gt; ;&lt;/code&gt; スコープ内からの &lt;code&gt;attributes::get()&lt;/code&gt; 呼び出し。祝福されていない変数参照の場合、「fetch」メソッド検索の開始パッケージ名は提供されません。したがって、この状況では、パッケージ定義の属性のメソッド呼び出しは発生しません。名前付きサブルーチンは、それが属する（または元々属していた）シンボルテーブルエントリを認識しており、対応するパッケージを使用します。匿名サブルーチンは、それがコンパイルされたパッケージ名を知っているため（パッケージ宣言がnullでコンパイルされていない限り）、そのパッケージ名を使用します。</target>
        </trans-unit>
        <trans-unit id="c7a2534c30975c1b087b49471bb8e69b1192ea93" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;attributes::get()&lt;/code&gt; from within the scope of a null package declaration &lt;code&gt;package ;&lt;/code&gt; for an unblessed variable reference will not provide any starting package name for the 'fetch' method lookup. Thus, this circumstance will not result in a method call for package-defined attributes. A named subroutine knows to which symbol table entry it belongs (or originally belonged), and it will use the corresponding package. An anonymous subroutine knows the package name into which it was compiled (unless it was also compiled with a null package declaration), and so it will use that package name.</source>
          <target state="translated">nullパッケージ宣言 &lt;code&gt;package ;&lt;/code&gt; スコープ内から &lt;code&gt;attributes::get()&lt;/code&gt; 呼び出す;祝福されていない変数参照の場合、「fetch」メソッドルックアップの開始パッケージ名は提供されません。したがって、この状況では、パッケージ定義属性のメソッド呼び出しは発生しません。名前付きサブルーチンは、それが属する（または元々属していた）シンボルテーブルエントリを認識しており、対応するパッケージを使用します。匿名サブルーチンは、コンパイルされたパッケージ名を知っているため（nullパッケージ宣言でコンパイルされた場合を除く）、そのパッケージ名を使用します。</target>
        </trans-unit>
        <trans-unit id="22c282790e74cecc249727d08376e623e8df58ac" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;die()&lt;/code&gt; in a thread indicates an abnormal exit for the thread. Any &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler in the thread will be called first, and then the thread will exit with a warning message that will contain any arguments passed in the &lt;code&gt;die()&lt;/code&gt; call.</source>
          <target state="translated">スレッドで &lt;code&gt;die()&lt;/code&gt; を呼び出すと、スレッドの異常終了が示されます。任意の &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; スレッド内のハンドラが最初に呼び出され、その後、スレッドは、渡された引数が含まれます警告メッセージを出して終了する &lt;code&gt;die()&lt;/code&gt; の呼び出しを。</target>
        </trans-unit>
        <trans-unit id="45dcc202c1bcd283c8d27205afa6c8a664424d57" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;finalize&lt;/code&gt; on a Prereqs object will close it for further modification. Attempting to make any changes that would actually alter the prereqs will result in an exception being thrown.</source>
          <target state="translated">Prereqsオブジェクトで &lt;code&gt;finalize&lt;/code&gt; を呼び出すと、さらに変更するためにオブジェクトが閉じられます。実際に前提条件を変更するような変更を行おうとすると、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="33bb3644bf1e13b2cbec6a1bd85b13b8d5473401" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;finalize&lt;/code&gt; on a child with open children will &lt;code&gt;croak&lt;/code&gt; .</source>
          <target state="translated">開いている子を持つ子で &lt;code&gt;finalize&lt;/code&gt; を呼び出すと、 &lt;code&gt;croak&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d102d9d7899bae3b5de4db95f96142eba91cc591" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;open&lt;/code&gt; with one argument via global variables</source>
          <target state="translated">グローバル変数を介して1つの引数で &lt;code&gt;open&lt;/code&gt; を呼び出す</target>
        </trans-unit>
        <trans-unit id="a05e36379b2d12e2a61d8dca60e3236620cfbdd1" translate="yes" xml:space="preserve">
          <source>Calling Configure</source>
          <target state="translated">呼び出し設定</target>
        </trans-unit>
        <trans-unit id="858cb737d2c8f0a72b951ab4ea78b7b78f817737" translate="yes" xml:space="preserve">
          <source>Calling Conventions and Magic Autogeneration</source>
          <target state="translated">呼び出し規約と魔法の自動生成</target>
        </trans-unit>
        <trans-unit id="007c7c3c00863b6f6eeae212582075fcbcd68f99" translate="yes" xml:space="preserve">
          <source>Calling POSIX::%s() is deprecated</source>
          <target state="translated">POSIX::%s()の呼び出しは非推奨です。</target>
        </trans-unit>
        <trans-unit id="5a077d29f5340a5b715ff2d0b7446d09abed736c" translate="yes" xml:space="preserve">
          <source>Calling Perl Routines from within C Programs</source>
          <target state="translated">C プログラムから Perl ルーチンを呼び出す</target>
        </trans-unit>
        <trans-unit id="da4bd907e548514c9e5225dea46a70baeae7e05d" translate="yes" xml:space="preserve">
          <source>Calling PerlIO_releaseFILE informs PerlIO that all use of FILE * is complete. It is removed from the list of 'exported' FILE *s, and the associated PerlIO * should revert to its original behaviour.</source>
          <target state="translated">PerlIO_releaseFILE を呼び出すと、FILE*のすべての使用が完了したことを PerlIO に通知します。エクスポートされた'FILE *sのリストから削除され、関連するPerlIO *は元の動作に戻るはずです。</target>
        </trans-unit>
        <trans-unit id="4f10f9c81f6874964032fb54a94909bb2041ccaa" translate="yes" xml:space="preserve">
          <source>Calling Pod::Simple::Search-&amp;gt;find(...) is short for Pod::Simple::Search-&amp;gt;new-&amp;gt;find(...). That is, a throwaway object with default attribute values is used.</source>
          <target state="translated">Pod :: Simple :: Search-&amp;gt; find（...）の呼び出しは、Pod :: Simple :: Search-&amp;gt; new-&amp;gt; find（...）の略です。つまり、デフォルトの属性値を持つ使い捨てオブジェクトが使用されます。</target>
        </trans-unit>
        <trans-unit id="63b53fa8f0a187ed1ffd0c16a376efb544cfcb62" translate="yes" xml:space="preserve">
          <source>Calling Pod::Simple::Search-&amp;gt;search(...) is short for Pod::Simple::Search-&amp;gt;new-&amp;gt;search(...). That is, a throwaway object with default attribute values is used.</source>
          <target state="translated">Pod :: Simple :: Search-&amp;gt; search（...）の呼び出しは、Pod :: Simple :: Search-&amp;gt; new-&amp;gt; search（...）の略です。つまり、デフォルトの属性値を持つ使い捨てオブジェクトが使用されます。</target>
        </trans-unit>
        <trans-unit id="ae570393756fa33aae649a93468e74ad3aa690b1" translate="yes" xml:space="preserve">
          <source>Calling a Perl method from C is fairly straightforward. The following things are required:</source>
          <target state="translated">C言語からPerlのメソッドを呼び出すのはかなり簡単です。必要なものは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4f751357fb4ae38f84e904fc36d9db5113b5aaaf" translate="yes" xml:space="preserve">
          <source>Calling a Perl subroutine from your C program</source>
          <target state="translated">CプログラムからPerlのサブルーチンを呼び出す</target>
        </trans-unit>
        <trans-unit id="c40cbac274b56e1beac728d697b23cc2ad8b3e30" translate="yes" xml:space="preserve">
          <source>Calling a method on an object is written as &lt;code&gt;$object-&amp;gt;method&lt;/code&gt; .</source>
          <target state="translated">オブジェクトのメソッドの呼び出しは、 &lt;code&gt;$object-&amp;gt;method&lt;/code&gt; として記述されます。</target>
        </trans-unit>
        <trans-unit id="0b9ba46d6edef1a3ad04cd36813abba303e920d0" translate="yes" xml:space="preserve">
          <source>Calling a method on an object is written as &lt;code&gt;$object-&amp;gt;method&lt;/code&gt;.</source>
          <target state="translated">オブジェクトのメソッドの呼び出しは、 &lt;code&gt;$object-&amp;gt;method&lt;/code&gt; として記述されます。</target>
        </trans-unit>
        <trans-unit id="effd5ea5d1271fcf8d367de7457fffef004c2411" translate="yes" xml:space="preserve">
          <source>Calling a subroutine as &lt;code&gt;&amp;amp;foo&lt;/code&gt; with no trailing parentheses ignores the prototype of &lt;code&gt;foo&lt;/code&gt; and passes it the current value of the argument list, &lt;code&gt;@_&lt;/code&gt; . Here's an example; the &lt;code&gt;bar&lt;/code&gt; subroutine calls &lt;code&gt;&amp;amp;foo&lt;/code&gt; , which prints its arguments list:</source>
          <target state="translated">サブルーチンを呼び出す &lt;code&gt;&amp;amp;foo&lt;/code&gt; の末尾に括弧付きでのプロトタイプ無視 &lt;code&gt;foo&lt;/code&gt; し、それを引数リストの現在の値を渡し、 &lt;code&gt;@_&lt;/code&gt; 。ここに例があります。 &lt;code&gt;bar&lt;/code&gt; サブルーチンコール &lt;code&gt;&amp;amp;foo&lt;/code&gt; の引数リストを印刷し、：</target>
        </trans-unit>
        <trans-unit id="5f2e994dab175c56f2b3036cb967b87cd73f7dc9" translate="yes" xml:space="preserve">
          <source>Calling a subroutine as &lt;code&gt;&amp;amp;foo&lt;/code&gt; with no trailing parentheses ignores the prototype of &lt;code&gt;foo&lt;/code&gt; and passes it the current value of the argument list, &lt;code&gt;@_&lt;/code&gt;. Here's an example; the &lt;code&gt;bar&lt;/code&gt; subroutine calls &lt;code&gt;&amp;amp;foo&lt;/code&gt;, which prints its arguments list:</source>
          <target state="translated">サブルーチンを呼び出す &lt;code&gt;&amp;amp;foo&lt;/code&gt; の末尾に括弧付きでのプロトタイプ無視 &lt;code&gt;foo&lt;/code&gt; し、それを引数リストの現在の値を渡し、 &lt;code&gt;@_&lt;/code&gt; 。これが例です。 &lt;code&gt;bar&lt;/code&gt; サブルーチンコール &lt;code&gt;&amp;amp;foo&lt;/code&gt; の引数リストを印刷し、：</target>
        </trans-unit>
        <trans-unit id="83a5a40c5745b90b08565729f9c8b41d859bfba5" translate="yes" xml:space="preserve">
          <source>Calling an overloaded filetest operator does not affect the stat value associated with the special filehandle &lt;code&gt;_&lt;/code&gt; . It still refers to the result of the last &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; or unoverloaded filetest.</source>
          <target state="translated">オーバーロードされたfiletestオペレーターを呼び出しても、特別なファイルハンドル &lt;code&gt;_&lt;/code&gt; に関連付けられているstat値には影響しません。それでも、最後の &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 、またはオーバーロードされていないファイルテストの結果が参照されます。</target>
        </trans-unit>
        <trans-unit id="deea643f059aedfd6a8b872cf539a132679beee6" translate="yes" xml:space="preserve">
          <source>Calling an overloaded filetest operator does not affect the stat value associated with the special filehandle &lt;code&gt;_&lt;/code&gt;. It still refers to the result of the last &lt;code&gt;stat&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt; or unoverloaded filetest.</source>
          <target state="translated">オーバーロードされたfiletest演算子を呼び出しても、特別なファイルハンドル &lt;code&gt;_&lt;/code&gt; に関連付けられた統計値には影響しません。それでも、最後の &lt;code&gt;stat&lt;/code&gt; 、 &lt;code&gt;lstat&lt;/code&gt; 、またはオーバーロードされていないfiletestの結果を参照します。</target>
        </trans-unit>
        <trans-unit id="14b56c65ecc7ed881027be8fe2d912f5b6a36243" translate="yes" xml:space="preserve">
          <source>Calling any of the dequeue methods with &lt;code&gt;COUNT&lt;/code&gt; greater than a queue's &lt;code&gt;limit&lt;/code&gt; will generate an error.</source>
          <target state="translated">&lt;code&gt;COUNT&lt;/code&gt; がキューの &lt;code&gt;limit&lt;/code&gt; を超えているデキューメソッドのいずれかを呼び出すと、エラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="013392383aeb8f3aaeaada77da8e78bbc103974c" translate="yes" xml:space="preserve">
          <source>Calling either function on a string that already is in the desired state is a no-op.</source>
          <target state="translated">すでに目的の状態にある文字列に対してどちらかの関数を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="ac9d89d6b846180f08777572deb7332f87bf19f8" translate="yes" xml:space="preserve">
          <source>Calling exec() within a pseudo-process actually spawns the requested executable in a separate process and waits for it to complete before exiting with the same exit status as that process. This means that the process ID reported within the running executable will be different from what the earlier Perl fork() might have returned. Similarly, any process manipulation functions applied to the ID returned by fork() will affect the waiting pseudo-process that called exec(), not the real process it is waiting for after the exec().</source>
          <target state="translated">疑似プロセス内で exec()を呼び出すと、実際には要求された実行ファイルが別のプロセスで生成され、そのプロセスと同じ終了ステータスで終了する前にそれが完了するのを待ちます。これは、実行中の実行ファイル内で報告されるプロセス ID が、以前の Perl の fork()で返されたものとは異なることを意味します。同様に、fork()によって返された ID に適用されたプロセス操作関数は、 exec()を呼び出した待機中の疑似プロセスに影響を与え、 exec()の後に待機している実際のプロセスには影響を与えません。</target>
        </trans-unit>
        <trans-unit id="b3da6d792b23555ef8d68fd44a37624b5388c7ec" translate="yes" xml:space="preserve">
          <source>Calling methods from a package means it must be loaded, of course, so you will often want to load a module and add it to &lt;code&gt;@ISA&lt;/code&gt; at the same time. You can do so in a single step using the &lt;a href=&quot;parent&quot;&gt;parent&lt;/a&gt; pragma. (In older code you may encounter the &lt;a href=&quot;base&quot;&gt;base&lt;/a&gt; pragma, which is nowadays discouraged except when you have to work with the equally discouraged &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; pragma.)</source>
          <target state="translated">もちろん、パッケージからメソッドを呼び出すということは、それをロードする必要があることを意味します。そのため、モジュールをロードすると同時に &lt;code&gt;@ISA&lt;/code&gt; に追加したい場合がよくあります。&lt;a href=&quot;parent&quot;&gt;親&lt;/a&gt;プラグマを使用して、1つのステップでこれを行うことができます。（古いコードでは、&lt;a href=&quot;base&quot;&gt;基本&lt;/a&gt;プラグマが発生する可能性があります。これは、同様に推奨されていない&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;プラグマを使用する必要がある場合を除いて、現在は推奨されていません。）</target>
        </trans-unit>
        <trans-unit id="5cb763801b922c32e04d2d797853c7083dee141b" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;truncate&lt;/code&gt; method returns a copy of the object but with the time truncated to the start of the supplied unit.</source>
          <target state="translated">&lt;code&gt;truncate&lt;/code&gt; メソッドを呼び出すと、オブジェクトのコピーが返されますが、指定されたユニットの先頭まで時間が切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="40ade94f7a99e61011be8ace5918982f9630cfc9" translate="yes" xml:space="preserve">
          <source>Calling the Debugger</source>
          <target state="translated">デバッガの呼び出し</target>
        </trans-unit>
        <trans-unit id="2ca81641ec6217e87de3fa52de37358174c935e6" translate="yes" xml:space="preserve">
          <source>Calling the subroutine with trailing parentheses, with or without arguments, does not use the current &lt;code&gt;@_&lt;/code&gt; . Changing the example to put parentheses after the call to &lt;code&gt;foo&lt;/code&gt; changes the program:</source>
          <target state="translated">引数を付けても付けなくても、末尾の括弧を付けてサブルーチンを呼び出すと、現在の &lt;code&gt;@_&lt;/code&gt; は使用されません。 &lt;code&gt;foo&lt;/code&gt; の呼び出しの後に括弧を付けるように例を変更すると、プログラムが変更されます。</target>
        </trans-unit>
        <trans-unit id="422d0af8c5eb261d34cbbb96d682bb4067741230" translate="yes" xml:space="preserve">
          <source>Calling the subroutine with trailing parentheses, with or without arguments, does not use the current &lt;code&gt;@_&lt;/code&gt;. Changing the example to put parentheses after the call to &lt;code&gt;foo&lt;/code&gt; changes the program:</source>
          <target state="translated">引数の有無にかかわらず、末尾の括弧を使用してサブルーチンを呼び出すと、現在の &lt;code&gt;@_&lt;/code&gt; は使用されません。 &lt;code&gt;foo&lt;/code&gt; の呼び出しの後に括弧を付けるように例を変更すると、プログラムが変更されます。</target>
        </trans-unit>
        <trans-unit id="492d320490c0c1bea0a0670c56d499e8b857ba1c" translate="yes" xml:space="preserve">
          <source>Calling this function repeatedly will create a FILE * on each call (and will push an :stdio layer each time as well).</source>
          <target state="translated">この関数を繰り返し呼び出すと、呼び出すたびにFILE *が作成されます (また、毎回 :stdioレイヤーをプッシュします)。</target>
        </trans-unit>
        <trans-unit id="bc6008c1e7f7d9345b7132b8abf50b8ba6fadc50" translate="yes" xml:space="preserve">
          <source>Calling this function will cause any temp files or temp directories that are registered for removal to be removed. This happens automatically when the process exits but can be triggered manually if the caller is sure that none of the temp files are required. This method can be registered as an Apache callback.</source>
          <target state="translated">この関数を呼び出すと、削除のために登録されている一時ファイルまたは一時ディレクトリが削除されます。これはプロセスの終了時に自動的に行われますが、 呼び出し元が必要な一時ファイルがないことを確信している場合には、 手動で起動することもできます。このメソッドは Apache コールバックとして登録することができます。</target>
        </trans-unit>
        <trans-unit id="35a047a5a40f59a3fe1e8072e49516ca5ef89a11" translate="yes" xml:space="preserve">
          <source>Calling this method without any arguments will reset the booleans to their default values.</source>
          <target state="translated">引数なしでこのメソッドを呼び出すと、ブーリアンがデフォルト値にリセットされます。</target>
        </trans-unit>
        <trans-unit id="b2c554dbf8d391703907c916da0c8b2d2b667cbb" translate="yes" xml:space="preserve">
          <source>Calling this on the root builder is a no-op.</source>
          <target state="translated">ルートビルダでこれを呼び出すのは、何もできません。</target>
        </trans-unit>
        <trans-unit id="2e765d5d5aa54eb2d852bc799f3a264f32d02c18" translate="yes" xml:space="preserve">
          <source>Calling with ampersand syntax and through references does not work for the following functions, as they have special syntax that cannot always be translated into a simple list (e.g., &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; vs &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof()&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">アンパサンド構文と参照による呼び出しは、次の関数では機能しません。これらの関数には、常に単純なリストに変換できるとは限らない特別な構文があるためです（たとえば、 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof()&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="572ae6ad378888078239d3f0fa7d20957b159547" translate="yes" xml:space="preserve">
          <source>Calling with ampersand syntax and through references does not work for the following functions, as they have special syntax that cannot always be translated into a simple list (e.g., &lt;code&gt;eof&lt;/code&gt; vs &lt;code&gt;eof()&lt;/code&gt;):</source>
          <target state="translated">アンパサンド構文および参照を介した呼び出しは、次の関数では機能しません。これらの関数には、常に単純なリストに変換できるとは限らない特別な構文があるためです（ &lt;code&gt;eof&lt;/code&gt; vs &lt;code&gt;eof()&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="e1d2f00d0a68b61567b5869949b9613e61d77b2e" translate="yes" xml:space="preserve">
          <source>Callon, Ross, editor. 1996.</source>
          <target state="translated">カロン、ロス、編集者。1996.</target>
        </trans-unit>
        <trans-unit id="c4be13ee9b6c0119a6fc3735504c657f3d22aba3" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;http://man.he.net/man2/flock&quot;&gt;flock(2)&lt;/a&gt;, or an emulation of it, on FILEHANDLE. Returns true for success, false on failure. Produces a fatal error if used on a machine that doesn't implement &lt;a href=&quot;http://man.he.net/man2/flock&quot;&gt;flock(2)&lt;/a&gt;, &lt;a href=&quot;http://man.he.net/man2/fcntl&quot;&gt;fcntl(2)&lt;/a&gt; locking, or &lt;a href=&quot;http://man.he.net/man3/lockf&quot;&gt;lockf(3)&lt;/a&gt;. &lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt;&lt;code&gt;flock&lt;/code&gt;&lt;/a&gt; is Perl's portable file-locking interface, although it locks entire files only, not records.</source>
          <target state="translated">FILEHANDLEで&lt;a href=&quot;http://man.he.net/man2/flock&quot;&gt;flock（2）&lt;/a&gt;またはそのエミュレーションを呼び出します。成功した場合はtrueを返し、失敗した場合はfalseを返します。&lt;a href=&quot;http://man.he.net/man2/flock&quot;&gt;flock（2）&lt;/a&gt;、&lt;a href=&quot;http://man.he.net/man2/fcntl&quot;&gt;fcntl（2）&lt;/a&gt;ロック、または&lt;a href=&quot;http://man.he.net/man3/lockf&quot;&gt;lockf（3）を&lt;/a&gt;実装していないマシンで使用すると、致命的なエラーが発生します。&lt;a href=&quot;#flock-FILEHANDLE%2COPERATION&quot;&gt; &lt;code&gt;flock&lt;/code&gt; &lt;/a&gt;はPerlのポータブルファイルロックインターフェイスですが、レコードではなくファイル全体のみをロックします。</target>
        </trans-unit>
        <trans-unit id="fd4f026ec1a5607feec9a1e107752900730638f9" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Test::Builder-&amp;gt;no_ending&lt;/code&gt; turning off the ending tests. This is needed as otherwise it will trip out because we've run more tests than we strictly should have and it'll register any failures we had that we were testing for as real failures.</source>
          <target state="translated">&lt;code&gt;Test::Builder-&amp;gt;no_ending&lt;/code&gt; 呼び出して、終了テストをオフにします。必要以上のテストを実行し、実際にテストしたすべての障害を実際の障害として登録するため、そうしないとトリップします。</target>
        </trans-unit>
        <trans-unit id="e2d11676efd2bea34999087c58d58b6f570aee40" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;sv_setsv&lt;/code&gt; if &lt;code&gt;dsv&lt;/code&gt; is not the same as &lt;code&gt;ssv&lt;/code&gt;. May evaluate arguments more than once. Does not handle 'set' magic on the destination SV.</source>
          <target state="translated">コールは &lt;code&gt;sv_setsv&lt;/code&gt; 場合 &lt;code&gt;dsv&lt;/code&gt; 同じではありません &lt;code&gt;ssv&lt;/code&gt; 。引数を複数回評価する場合があります。宛先SVの「設定」マジックを処理しません。</target>
        </trans-unit>
        <trans-unit id="590c7d6e88adb5bddf3d8f642e0126b6c862bc26" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;sv_setsv&lt;/code&gt; if dsv is not the same as ssv. May evaluate arguments more than once. Does not handle 'set' magic on the destination SV.</source>
          <target state="translated">&lt;code&gt;sv_setsv&lt;/code&gt; がssvと同じでない場合、sv_setsvを呼び出します。引数を複数回評価する場合があります。宛先SVで「設定」マジックを処理しません。</target>
        </trans-unit>
        <trans-unit id="ecc1c1a42047512bf4698d979850ea62424810ba" translate="yes" xml:space="preserve">
          <source>Calls Cwd::cwd</source>
          <target state="translated">Cwd::cwd を呼び出す</target>
        </trans-unit>
        <trans-unit id="c904982ef90b628587f5e1c223b066f40097484e" translate="yes" xml:space="preserve">
          <source>Calls Cwd::fastcwd</source>
          <target state="translated">Cwd::fastcwd を呼び出す</target>
        </trans-unit>
        <trans-unit id="8c1ba5cb44af7e4a4c20a5047a781fc7e8a8fc22" translate="yes" xml:space="preserve">
          <source>Calls Cwd::getcwd</source>
          <target state="translated">Cwd::getcwd を呼び出す</target>
        </trans-unit>
        <trans-unit id="206e7aa2eb36edf2b309bbc5748aac00256c2321" translate="yes" xml:space="preserve">
          <source>Calls Cwd::getdcwd</source>
          <target state="translated">Cwd::getdcwd を呼び出す</target>
        </trans-unit>
        <trans-unit id="2af7df6efbe8d09524c66413aabddc70ce66b453" translate="yes" xml:space="preserve">
          <source>Calls a non-destructive version of &lt;code&gt;sv_setsv&lt;/code&gt; if &lt;code&gt;dsv&lt;/code&gt; is not the same as &lt;code&gt;ssv&lt;/code&gt;. May evaluate arguments more than once.</source>
          <target state="translated">&lt;code&gt;dsv&lt;/code&gt; がssvと同じでない場合は、非破壊バージョンの &lt;code&gt;sv_setsv&lt;/code&gt; を &lt;code&gt;ssv&lt;/code&gt; ます。引数を複数回評価する場合があります。</target>
        </trans-unit>
        <trans-unit id="780a41207facdbbb71db04db90d90ec1fa2163f5" translate="yes" xml:space="preserve">
          <source>Calls a non-destructive version of &lt;code&gt;sv_setsv&lt;/code&gt; if dsv is not the same as ssv. May evaluate arguments more than once.</source>
          <target state="translated">dsvがssvと同じでない場合、非破壊バージョンの &lt;code&gt;sv_setsv&lt;/code&gt; を呼び出します。引数を複数回評価する場合があります。</target>
        </trans-unit>
        <trans-unit id="4ff2ef8b2188043c87a9c12a3c9cbf04635b332b" translate="yes" xml:space="preserve">
          <source>Calls flock(2), or an emulation of it, on FILEHANDLE. Returns true for success, false on failure. Produces a fatal error if used on a machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3). &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; is Perl's portable file-locking interface, although it locks entire files only, not records.</source>
          <target state="translated">FILEHANDLEでflock（2）またはそのエミュレーションを呼び出します。成功した場合はtrue、失敗した場合はfalseを返します。flock（2）、fcntl（2）のロック、またはlockf（3）を実装していないマシンで使用すると、致命的なエラーが発生します。 &lt;code&gt;&lt;a href=&quot;flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; はPerlのポータブルファイルロックインターフェイスですが、レコードではなくファイル全体のみをロックします。</target>
        </trans-unit>
        <trans-unit id="bb35c1fa57137cad992f4edf7e56c85897367e17" translate="yes" xml:space="preserve">
          <source>Calls flock(2), or an emulation of it, on FILEHANDLE. Returns true for success, false on failure. Produces a fatal error if used on a machine that doesn't implement flock(2), fcntl(2) locking, or lockf(3). &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; is Perl's portable file-locking interface, although it locks entire files only, not records.</source>
          <target state="translated">FILEHANDLEでflock（2）またはそのエミュレーションを呼び出します。成功した場合はtrue、失敗した場合はfalseを返します。flock（2）、fcntl（2）のロック、またはlockf（3）を実装していないマシンで使用すると、致命的なエラーが発生します。 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; はPerlのポータブルファイルロックインターフェイスですが、レコードではなくファイル全体のみをロックします。</target>
        </trans-unit>
        <trans-unit id="773f4cafc0f3777dd34c2b664ecf08fdcad62645" translate="yes" xml:space="preserve">
          <source>Calls install() with arguments to copy a module from blib/ to the default site installation location.</source>
          <target state="translated">モジュールを blib/からデフォルトのサイトのインストール場所にコピーするために、引数を指定して install()を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f72e847b0819bcbc3ab49dbf4b9ab2bb349a665c" translate="yes" xml:space="preserve">
          <source>Calls makeaperl.</source>
          <target state="translated">メークアパールを呼び出します。</target>
        </trans-unit>
        <trans-unit id="37943b6a726d9d0c50758cce3c190484f78dfe2c" translate="yes" xml:space="preserve">
          <source>Calls the Perl subroutine in a list context.</source>
          <target state="translated">リストコンテキストでPerlのサブルーチンを呼び出します。</target>
        </trans-unit>
        <trans-unit id="bb7f57720f3817b40ff0bbe8ea59e47c2d2ab29e" translate="yes" xml:space="preserve">
          <source>Calls the Perl subroutine in a scalar context. This is the default context flag setting for all the</source>
          <target state="translated">スカラコンテキストでPerlのサブルーチンを呼び出します。これは、すべての</target>
        </trans-unit>
        <trans-unit id="73962f3f75b41688efacfc0da40dee4461b9fec3" translate="yes" xml:space="preserve">
          <source>Calls the Perl subroutine in a void context.</source>
          <target state="translated">voidコンテキストでPerlのサブルーチンを呼び出します。</target>
        </trans-unit>
        <trans-unit id="a917066a2b971e1883f106f1c39848e3431a241f" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/msgctl&quot;&gt;msgctl(2)&lt;/a&gt;. You'll probably have to say</source>
          <target state="translated">System V IPC関数&lt;a href=&quot;http://man.he.net/man2/msgctl&quot;&gt;msgctl（2）を&lt;/a&gt;呼び出します。あなたはおそらく言わなければならないでしょう</target>
        </trans-unit>
        <trans-unit id="57e4fe26c30e1fa24204f31776f0762d325e8b11" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/msgget&quot;&gt;msgget(2)&lt;/a&gt;. Returns the message queue id, or &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Msg&quot;&gt;&lt;code&gt;IPC::Msg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">System V IPC関数&lt;a href=&quot;http://man.he.net/man2/msgget&quot;&gt;msgget（2）を&lt;/a&gt;呼び出します。メッセージキューIDを返すか、エラーの場合は&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;を返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcの「SysVIPC」&lt;/a&gt;および&lt;a href=&quot;IPC::SysV&quot;&gt; &lt;code&gt;IPC::SysV&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;IPC::Msg&quot;&gt; &lt;code&gt;IPC::Msg&lt;/code&gt; &lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="2ed1326cac6665ddf6fabcb783d39b2410699c9f" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/semctl&quot;&gt;semctl(2)&lt;/a&gt;. You'll probably have to say</source>
          <target state="translated">System V IPC関数&lt;a href=&quot;http://man.he.net/man2/semctl&quot;&gt;semctl（2）を&lt;/a&gt;呼び出します。あなたはおそらく言わなければならないでしょう</target>
        </trans-unit>
        <trans-unit id="51f6b9cf3287200835df80787252ceca2e3e01f3" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/semget&quot;&gt;semget(2)&lt;/a&gt;. Returns the semaphore id, or the undefined value on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Semaphore&quot;&gt;&lt;code&gt;IPC::Semaphore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">System V IPC関数&lt;a href=&quot;http://man.he.net/man2/semget&quot;&gt;semget（2）を&lt;/a&gt;呼び出します。セマフォID、またはエラー時に未定義の値を返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcの「SysVIPC」&lt;/a&gt;および&lt;a href=&quot;IPC::SysV&quot;&gt; &lt;code&gt;IPC::SysV&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;IPC::Semaphore&quot;&gt; &lt;code&gt;IPC::Semaphore&lt;/code&gt; &lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="c8f45ddf4f5072f6080434b7d93e3b080f31d293" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function &lt;a href=&quot;http://man.he.net/man2/semop&quot;&gt;semop(2)&lt;/a&gt; for semaphore operations such as signalling and waiting. OPSTRING must be a packed array of semop structures. Each semop structure can be generated with &lt;code&gt;pack(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt;. The length of OPSTRING implies the number of semaphore operations. Returns true if successful, false on error. As an example, the following code waits on semaphore $semnum of semaphore id $semid:</source>
          <target state="translated">シグナリングや待機などのセマフォ操作のために、System V IPC関数&lt;a href=&quot;http://man.he.net/man2/semop&quot;&gt;semop（2）&lt;/a&gt;を呼び出します。 OPSTRINGは、semop構造体のパックされた配列である必要があります。各semop構造体は、 &lt;code&gt;pack(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; 使用して生成できます。 OPSTRINGの長さは、セマフォ操作の数を意味します。成功した場合はtrueを返し、エラーの場合はfalseを返します。例として、次のコードは、セマフォID $ semidのセマフォ$ semnumを待機します。</target>
        </trans-unit>
        <trans-unit id="f29d60ee63be0b6e387efbeaa174ef5a3adf4ba4" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgctl(2). You'll probably have to say</source>
          <target state="translated">System V の IPC 関数 msgctl(2)を呼び出します。と言わなければならないでしょう。</target>
        </trans-unit>
        <trans-unit id="be9988a6d42da7c4020e6a5f954992f1c4491de0" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgget(2). Returns the message queue id, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::Msg&lt;/code&gt; .</source>
          <target state="translated">System V IPC関数msgget（2）を呼び出します。メッセージキューIDを返します。エラーの場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;および &lt;code&gt;IPC::SysV&lt;/code&gt; および &lt;code&gt;IPC::Msg&lt;/code&gt; のドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="98b9f73da86e0e6b472bbcb69f309820842a2666" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgget(2). Returns the message queue id, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::Msg&lt;/code&gt; .</source>
          <target state="translated">System V IPC関数msgget（2）を呼び出します。メッセージキューIDを返します。エラーの場合は &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;および &lt;code&gt;IPC::SysV&lt;/code&gt; および &lt;code&gt;IPC::Msg&lt;/code&gt; のドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="bc2abfdb7a6e8deeeb37c01f08b5371f84b9260b" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE. Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message. This packing may be opened with &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; . Taints the variable. Returns true if successful, false on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; .</source>
          <target state="translated">System V IPC関数msgrcvを呼び出して、メッセージキューIDから最大メッセージサイズSIZEの変数VARにメッセージを受信します。メッセージが受信されると、ネイティブのlong integerとしてのメッセージタイプがVARの最初になり、その後に実際のメッセージが続きます。このパッキングは、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; で開くことができます。変数を汚染します。成功した場合はtrue、エラーの場合はfalseを返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;および &lt;code&gt;IPC::SysV&lt;/code&gt; および &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; のドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="948f348f6fa98a8010bd8fc9ae4ccc04726f6c57" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE. Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message. This packing may be opened with &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; . Taints the variable. Returns true if successful, false on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and the documentation for &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; .</source>
          <target state="translated">System V IPC関数msgrcvを呼び出して、メッセージキューIDから最大メッセージサイズSIZEの変数VARにメッセージを受信します。メッセージが受信されると、ネイティブのlong integerとしてのメッセージタイプがVARの最初になり、その後に実際のメッセージが続きます。このパッキングは、 &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;(&quot;l! a*&quot;)&lt;/code&gt; で開くことができます。変数を汚染します。成功した場合はtrue、エラーの場合はfalseを返します。&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;および &lt;code&gt;IPC::SysV&lt;/code&gt; および &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; のドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="85d31b1b6ccaa6ed03aaac494aa638c440797b62" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgrcv to receive a message from message queue ID into variable VAR with a maximum message size of SIZE. Note that when a message is received, the message type as a native long integer will be the first thing in VAR, followed by the actual message. This packing may be opened with &lt;code&gt;unpack(&quot;l! a*&quot;)&lt;/code&gt;. Taints the variable. Returns true if successful, false on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Msg&quot;&gt;&lt;code&gt;IPC::Msg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">System V IPC関数msgrcvを呼び出して、メッセージキューIDから変数VARへのメッセージを最大メッセージサイズSIZEで受信します。メッセージが受信されると、ネイティブ長整数としてのメッセージタイプがVARの最初のものになり、その後に実際のメッセージが続くことに注意してください。このパッキングは、 &lt;code&gt;unpack(&quot;l! a*&quot;)&lt;/code&gt; で開くことができます。変数を汚染します。成功した場合はtrueを返し、エラーの場合はfalseを返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcの「SysVIPC」&lt;/a&gt;および&lt;a href=&quot;IPC::SysV&quot;&gt; &lt;code&gt;IPC::SysV&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;IPC::Msg&quot;&gt; &lt;code&gt;IPC::Msg&lt;/code&gt; &lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="c5afcee05064a60e928b37ea8427c6294d37aba0" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID. MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself. This kind of packing can be achieved with &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; . Returns true if successful, false on error. See also the &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; documentation.</source>
          <target state="translated">System V IPC関数msgsndを呼び出して、メッセージMSGをメッセージキューIDに送信します。 MSGはネイティブ長整数メッセージタイプで始まり、その後に実際のメッセージの長さが続き、最後にメッセージ自体が続きます。この種のパッキングは &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; ます。成功した場合はtrue、エラーの場合はfalseを返します。 &lt;code&gt;IPC::SysV&lt;/code&gt; および &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="11394b0f70e6027e810e867a48b7248721c79467" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID. MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself. This kind of packing can be achieved with &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; . Returns true if successful, false on error. See also the &lt;code&gt;IPC::SysV&lt;/code&gt; and &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; documentation.</source>
          <target state="translated">System V IPC関数msgsndを呼び出して、メッセージMSGをメッセージキューIDに送信します。 MSGはネイティブ長整数メッセージタイプで始まり、その後に実際のメッセージの長さが続き、最後にメッセージ自体が続きます。この種のパッキングは &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; ます。成功した場合はtrue、エラーの場合はfalseを返します。 &lt;code&gt;IPC::SysV&lt;/code&gt; および &lt;code&gt;IPC::SysV::Msg&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="8851b56288c91863a6d17483301ecf8e41e3ecfb" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function msgsnd to send the message MSG to the message queue ID. MSG must begin with the native long integer message type, be followed by the length of the actual message, and then finally the message itself. This kind of packing can be achieved with &lt;code&gt;pack(&quot;l! a*&quot;, $type, $message)&lt;/code&gt;. Returns true if successful, false on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;IPC::Msg&quot;&gt;&lt;code&gt;IPC::Msg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">System V IPC関数msgsndを呼び出して、メッセージMSGをメッセージキューIDに送信します。MSGは、ネイティブの長整数メッセージタイプで始まり、実際のメッセージの長さが続き、最後にメッセージ自体が続く必要があります。この種のパッキングは、 &lt;code&gt;pack(&quot;l! a*&quot;, $type, $message)&lt;/code&gt; ます。成功した場合はtrueを返し、エラーの場合はfalseを返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcの「SysVIPC」&lt;/a&gt;および&lt;a href=&quot;IPC::SysV&quot;&gt; &lt;code&gt;IPC::SysV&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;IPC::Msg&quot;&gt; &lt;code&gt;IPC::Msg&lt;/code&gt; &lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="6019e00f804cda82d4ccc726e831f656c990eb13" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semctl(2). You'll probably have to say</source>
          <target state="translated">System V の IPC 関数 semctl(2)を呼び出す。と言わざるを得ないでしょう。</target>
        </trans-unit>
        <trans-unit id="5f610b5b4eaf02b0f729a98fdbc4342fbee172a9" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semget(2). Returns the semaphore id, or the undefined value on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">System V IPC関数semget（2）を呼び出します。セマフォID、またはエラー時に未定義の値を返します。&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;、 &lt;code&gt;IPC::SysV&lt;/code&gt; 、 &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; ドキュメントもご覧ください。</target>
        </trans-unit>
        <trans-unit id="315be1c7490d0b06d562bb984c8930c31052ce5c" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semget(2). Returns the semaphore id, or the undefined value on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt;, &lt;code&gt;IPC::SysV&lt;/code&gt; , &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; documentation.</source>
          <target state="translated">System V IPC関数semget（2）を呼び出します。セマフォID、またはエラー時に未定義の値を返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;、 &lt;code&gt;IPC::SysV&lt;/code&gt; 、 &lt;code&gt;IPC::SysV::Semaphore&lt;/code&gt; ドキュメントもご覧ください。</target>
        </trans-unit>
        <trans-unit id="ef274fb91ef606897494225538343bd9782c7288" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semop(2) for semaphore operations such as signalling and waiting. OPSTRING must be a packed array of semop structures. Each semop structure can be generated with &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; . The length of OPSTRING implies the number of semaphore operations. Returns true if successful, false on error. As an example, the following code waits on semaphore $semnum of semaphore id $semid:</source>
          <target state="translated">シグナリングや待機などのセマフォ操作のためにSystem V IPC関数semop（2）を呼び出します。OPSTRINGは、semop構造体のパック配列でなければなりません。各semop構造は、 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; で生成できます。OPSTRINGの長さは、セマフォ操作の数を意味します。成功した場合はtrue、エラーの場合はfalseを返します。例として、次のコードはセマフォID $ semidのセマフォ$ semnumで待機します。</target>
        </trans-unit>
        <trans-unit id="e0c44ed833fa28db0acecadac8e6a6c1fb4ee6ed" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function semop(2) for semaphore operations such as signalling and waiting. OPSTRING must be a packed array of semop structures. Each semop structure can be generated with &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; . The length of OPSTRING implies the number of semaphore operations. Returns true if successful, false on error. As an example, the following code waits on semaphore $semnum of semaphore id $semid:</source>
          <target state="translated">シグナリングや待機などのセマフォ操作のためにSystem V IPC関数semop（2）を呼び出します。OPSTRINGは、semop構造体のパック配列でなければなりません。各semop構造は、 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;(&quot;s!3&quot;, $semnum, $semop, $semflag)&lt;/code&gt; で生成できます。OPSTRINGの長さは、セマフォ操作の数を意味します。成功した場合はtrue、エラーの場合はfalseを返します。例として、次のコードはセマフォID $ semidのセマフォ$ semnumで待機します。</target>
        </trans-unit>
        <trans-unit id="c7ffce30c16d2adb19634cb73edd07b139d51d58" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmctl. You'll probably have to say</source>
          <target state="translated">System V の IPC 関数 shmctl を呼び出します。と言わなければならないでしょう。</target>
        </trans-unit>
        <trans-unit id="ccef605f2e6df70fde49a59cc497d30196bec568" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmget. Returns the shared memory segment id, or &lt;a href=&quot;#undef-EXPR&quot;&gt;&lt;code&gt;undef&lt;/code&gt;&lt;/a&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;&quot;SysV IPC&quot; in perlipc&lt;/a&gt; and the documentation for &lt;a href=&quot;IPC::SysV&quot;&gt;&lt;code&gt;IPC::SysV&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">System VIPC関数shmgetを呼び出します。共有メモリセグメントIDを返すか、エラーの場合は&lt;a href=&quot;#undef-EXPR&quot;&gt; &lt;code&gt;undef&lt;/code&gt; &lt;/a&gt;を返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcの「SysVIPC」&lt;/a&gt;および&lt;a href=&quot;IPC::SysV&quot;&gt; &lt;code&gt;IPC::SysV&lt;/code&gt; &lt;/a&gt;ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="b0bc62f7fa862b27b2de307fc455c072f03da35c" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmget. Returns the shared memory segment id, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and &lt;code&gt;IPC::SysV&lt;/code&gt; documentation.</source>
          <target state="translated">System V IPC関数shmgetを呼び出します。共有メモリセグメントIDを返します。エラーの場合は &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。&lt;a href=&quot;perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;および &lt;code&gt;IPC::SysV&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="4c305f2b321c34aa679da0caad314dcb3d11fcda" translate="yes" xml:space="preserve">
          <source>Calls the System V IPC function shmget. Returns the shared memory segment id, or &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; on error. See also &lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;SysV IPC in perlipc&lt;/a&gt; and &lt;code&gt;IPC::SysV&lt;/code&gt; documentation.</source>
          <target state="translated">System V IPC関数shmgetを呼び出します。共有メモリセグメントIDを返します。エラーの場合は &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。&lt;a href=&quot;../perlipc#SysV-IPC&quot;&gt;perlipcのSysV IPC&lt;/a&gt;および &lt;code&gt;IPC::SysV&lt;/code&gt; ドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="171e1908f8052943b22ba1224601d2782bb8861e" translate="yes" xml:space="preserve">
          <source>Calls the external command cwd.</source>
          <target state="translated">外部コマンド cwd を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3c0dfe2a93186d77d26e8574e4df98dbb4f6b11b" translate="yes" xml:space="preserve">
          <source>Calls the reports() method on the associated distribution object.</source>
          <target state="translated">関連するディストリビューション・オブジェクトの reports()メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="96cd064be72718f49bf44f8c4387cf9595674530" translate="yes" xml:space="preserve">
          <source>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. If unimplemented, raises an exception. The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int. If not, the pointer to the string value is passed. You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string. You can't use a string literal (or other read-only string) as an argument to &lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; because Perl has to assume that any string pointer might be written through. If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add &lt;code&gt;0&lt;/code&gt; to them to force them to look like numbers. This emulates the &lt;a href=&quot;#syswrite-FILEHANDLE%2CSCALAR%2CLENGTH%2COFFSET&quot;&gt;&lt;code&gt;syswrite&lt;/code&gt;&lt;/a&gt; function (or vice versa):</source>
          <target state="translated">リストの最初の要素として指定されたシステムコールを呼び出し、残りの要素を引数としてシステムコールに渡します。実装されていない場合、例外が発生します。引数は次のように解釈されます。指定された引数が数値の場合、引数はintとして渡されます。そうでない場合は、文字列値へのポインタが渡されます。文字列に書き込まれる可能性のある結果を受け取るのに十分な長さで文字列が事前に拡張されていることを確認する必要があります。文字列リテラル（または他の読み取り専用文字列）を&lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt; &lt;code&gt;syscall&lt;/code&gt; の&lt;/a&gt;引数として使用することはできません。これは、Perlが文字列ポインタが書き込まれる可能性があると想定する必要があるためです。整数引数がリテラルではなく、数値コンテキストで解釈されたことがない場合は、 &lt;code&gt;0&lt;/code&gt; を追加する必要があります。彼らに数字のように見せるように強制します。これは、&lt;a href=&quot;#syswrite-FILEHANDLE%2CSCALAR%2CLENGTH%2COFFSET&quot;&gt; &lt;code&gt;syswrite&lt;/code&gt; &lt;/a&gt;関数をエミュレートします（またはその逆）。</target>
        </trans-unit>
        <trans-unit id="e80219f44739d96f5e20c3cf29ed7bd7ff8e792b" translate="yes" xml:space="preserve">
          <source>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. If unimplemented, raises an exception. The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int. If not, the pointer to the string value is passed. You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string. You can't use a string literal (or other read-only string) as an argument to &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; because Perl has to assume that any string pointer might be written through. If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add &lt;code&gt;0&lt;/code&gt; to them to force them to look like numbers. This emulates the &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; function (or vice versa):</source>
          <target state="translated">リストの最初の要素として指定されたシステムコールを呼び出し、残りの要素を引数としてシステムコールに渡します。実装されていない場合、例外が発生します。引数は次のように解釈されます。指定された引数が数値の場合、引数はintとして渡されます。そうでない場合、文字列値へのポインタが渡されます。文字列に書き込まれる可能性のある結果を受け取るのに十分な長さで文字列が事前に拡張されていることを確認する必要があります。文字列リテラル（または他の読み取り専用文字列）を &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; への引数として使用することはできません。Perlは文字列ポインタが通過する可能性があると想定する必要があるためです。整数引数がリテラルではなく、数値コンテキストで解釈されたことがない場合は、 &lt;code&gt;0&lt;/code&gt; を追加する必要がある場合があります。強制的に数字のように見せます。これは &lt;code&gt;&lt;a href=&quot;functions/syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; 関数をエミュレートします（またはその逆）。</target>
        </trans-unit>
        <trans-unit id="14adf48ff5b79cf02eb35e0df8ee02d1dedea8a0" translate="yes" xml:space="preserve">
          <source>Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. If unimplemented, raises an exception. The arguments are interpreted as follows: if a given argument is numeric, the argument is passed as an int. If not, the pointer to the string value is passed. You are responsible to make sure a string is pre-extended long enough to receive any result that might be written into a string. You can't use a string literal (or other read-only string) as an argument to &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; because Perl has to assume that any string pointer might be written through. If your integer arguments are not literals and have never been interpreted in a numeric context, you may need to add &lt;code&gt;0&lt;/code&gt; to them to force them to look like numbers. This emulates the &lt;code&gt;&lt;a href=&quot;syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; function (or vice versa):</source>
          <target state="translated">リストの最初の要素として指定されたシステムコールを呼び出し、残りの要素を引数としてシステムコールに渡します。実装されていない場合、例外が発生します。引数は次のように解釈されます。指定された引数が数値の場合、引数はintとして渡されます。そうでない場合、文字列値へのポインタが渡されます。文字列に書き込まれる可能性のある結果を受け取るのに十分な長さで文字列が事前に拡張されていることを確認する必要があります。文字列リテラル（または他の読み取り専用文字列）を &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; への引数として使用することはできません。Perlは文字列ポインタが通過する可能性があると想定する必要があるためです。整数引数がリテラルではなく、数値コンテキストで解釈されたことがない場合は、 &lt;code&gt;0&lt;/code&gt; を追加する必要がある場合があります。強制的に数字のように見せます。これは &lt;code&gt;&lt;a href=&quot;syswrite&quot;&gt;syswrite&lt;/a&gt;&lt;/code&gt; 関数をエミュレートします（またはその逆）。</target>
        </trans-unit>
        <trans-unit id="4689606e99f2e0dc6a1ba0af906a041a8988cfda" translate="yes" xml:space="preserve">
          <source>Calls to external programs</source>
          <target state="translated">外部プログラムへの呼び出し</target>
        </trans-unit>
        <trans-unit id="b9f578265a3254a0619351c53e86631e90149c66" translate="yes" xml:space="preserve">
          <source>Calls user-supplied functions for conversion. For &lt;code&gt;OUTPUT&lt;/code&gt; (XSUB to Perl), a function named &lt;code&gt;XS_pack_$ntype&lt;/code&gt; is called with the output Perl scalar and the C variable to convert from. &lt;code&gt;$ntype&lt;/code&gt; is the normalized C type that is to be mapped to Perl. Normalized means that all &lt;code&gt;*&lt;/code&gt; are replaced by the string &lt;code&gt;Ptr&lt;/code&gt; . The return value of the function is ignored.</source>
          <target state="translated">ユーザー提供の関数を呼び出して変換します。以下のために &lt;code&gt;OUTPUT&lt;/code&gt; （PerlのにXSUB）、名前の関数 &lt;code&gt;XS_pack_$ntype&lt;/code&gt; 変換するの出力PerlのスカラーとC変数と呼ばれています。 &lt;code&gt;$ntype&lt;/code&gt; は、Perlにマップされる正規化されたCタイプです。正規化とは、すべての &lt;code&gt;*&lt;/code&gt; が文字列 &lt;code&gt;Ptr&lt;/code&gt; に置き換えられることを意味します。関数の戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="5713c56b79a368245b2288e1a9373414b6001e42" translate="yes" xml:space="preserve">
          <source>Calls user-supplied functions for conversion. For &lt;code&gt;OUTPUT&lt;/code&gt; (XSUB to Perl), a function named &lt;code&gt;XS_pack_$ntype&lt;/code&gt; is called with the output Perl scalar and the C variable to convert from. &lt;code&gt;$ntype&lt;/code&gt; is the normalized C type that is to be mapped to Perl. Normalized means that all &lt;code&gt;*&lt;/code&gt; are replaced by the string &lt;code&gt;Ptr&lt;/code&gt;. The return value of the function is ignored.</source>
          <target state="translated">変換のためにユーザー提供の関数を呼び出します。以下のために &lt;code&gt;OUTPUT&lt;/code&gt; （PerlのにXSUB）、名前の関数 &lt;code&gt;XS_pack_$ntype&lt;/code&gt; 変換するの出力PerlのスカラーとC変数と呼ばれています。 &lt;code&gt;$ntype&lt;/code&gt; は、Perlにマップされる正規化されたCタイプです。正規化とは、すべての &lt;code&gt;*&lt;/code&gt; が文字列 &lt;code&gt;Ptr&lt;/code&gt; に置き換えられることを意味します。関数の戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="37c8dd3e8e14ad4f27432158bf7160979db0ce6b" translate="yes" xml:space="preserve">
          <source>CamelBones</source>
          <target state="translated">CamelBones</target>
        </trans-unit>
        <trans-unit id="adb92c1608308898a1811cd12d916df49f9c32f4" translate="yes" xml:space="preserve">
          <source>CamelBones ( &lt;a href=&quot;http://camelbones.sourceforge.net&quot;&gt;http://camelbones.sourceforge.net&lt;/a&gt; ) is a Perl interface to Mac OS X's Cocoa GUI toolkit, and as such can be used to produce native GUIs on Mac OS X. It's not on CPAN, as it requires frameworks that CPAN.pm doesn't know how to install, but installation is via the standard OSX package installer. The Perl API is, again, very close to the ObjC API it's wrapping, and the documentation just tells you how to translate from one to the other.</source>
          <target state="translated">CamelBones（&lt;a href=&quot;http://camelbones.sourceforge.net&quot;&gt;http://camelbones.sourceforge.net&lt;/a&gt;）は、Mac OS XのCocoa GUIツールキットへのPerlインターフェースであり、Mac OS XでネイティブGUIを生成するために使用できます。CPAN にはフレームワークが必要なので、CPANにはありません.pmはインストール方法がわかりませんが、インストールは標準のOSXパッケージインストーラーを介して行われます。繰り返しますが、Perl APIは、ラッピングするObjC APIに非常に近く、ドキュメントには、一方から他方に変換する方法が記載されています。</target>
        </trans-unit>
        <trans-unit id="80701e22e30b3906cffd903f13b0b88b4269184d" translate="yes" xml:space="preserve">
          <source>CamelGrayBig.BMP</source>
          <target state="translated">CamelGrayBig.BMP</target>
        </trans-unit>
        <trans-unit id="80c61bba9e87f80092474b3e9f8694f40db54332" translate="yes" xml:space="preserve">
          <source>Camelcade plugin provides Perl5 support in IntelliJ IDEA and other JetBrains IDEs.</source>
          <target state="translated">Camelcade プラグインは IntelliJ IDEA や他の JetBrains IDE で Perl5 をサポートしています。</target>
        </trans-unit>
        <trans-unit id="4e35891916ef0cba1da028aae28377672d4e03bd" translate="yes" xml:space="preserve">
          <source>Can I Read/Write Zip files larger the 4 Gig?</source>
          <target state="translated">4 Gig以上のZipファイルを読み書きすることはできますか?</target>
        </trans-unit>
        <trans-unit id="e06a2487ce9da8707485d167c86e4cec108412be" translate="yes" xml:space="preserve">
          <source>Can I do [task] in Perl?</source>
          <target state="translated">タスク]はPerlでできますか?</target>
        </trans-unit>
        <trans-unit id="36ad0cba0b89c07f07180ff1037ede0187a0e666" translate="yes" xml:space="preserve">
          <source>Can I do a reget operation like the ftp command ?</source>
          <target state="translated">ftpコマンドのような再取得操作はできますか?</target>
        </trans-unit>
        <trans-unit id="17260f8bf54a1e0a6921ffbe29352d30c7eb0d7e" translate="yes" xml:space="preserve">
          <source>Can I get a BNF/yacc/RE for the Perl language?</source>
          <target state="translated">Perl言語のBNF/yacc/REを入手できますか?</target>
        </trans-unit>
        <trans-unit id="3a800859ea9403fd88df5aa63fab2b1ed9bba4be" translate="yes" xml:space="preserve">
          <source>Can I use Perl regular expressions to match balanced text?</source>
          <target state="translated">Perlの正規表現を使ってバランスの取れたテキストにマッチさせることはできますか?</target>
        </trans-unit>
        <trans-unit id="2289a974ae52b9e29f0b401490ee2c25637b7437" translate="yes" xml:space="preserve">
          <source>Can I use Unicode in my Perl sources?</source>
          <target state="translated">Perl のソースで Unicode を使うことはできますか?</target>
        </trans-unit>
        <trans-unit id="32e50e864db1746776899a01caf14e13d2d4a291" translate="yes" xml:space="preserve">
          <source>Can I use perl to run a telnet or ftp session?</source>
          <target state="translated">perlを使ってtelnetやftpセッションを実行できますか?</target>
        </trans-unit>
        <trans-unit id="7a4618a13feffae59b70603845a943f2cb759ba6" translate="yes" xml:space="preserve">
          <source>Can I write more that 64K entries is a Zip files?</source>
          <target state="translated">64KのエントリがZipファイルであることをより多く書くことはできますか?</target>
        </trans-unit>
        <trans-unit id="14d0ae1165be9b8566f8406ca14230c7961f4848" translate="yes" xml:space="preserve">
          <source>Can I write useful Perl programs on the command line?</source>
          <target state="translated">コマンドラインで便利なPerlプログラムを書くことはできますか?</target>
        </trans-unit>
        <trans-unit id="35df49ce9c972c29af7bf8e861531cb5efb30472" translate="yes" xml:space="preserve">
          <source>Can also be called as an instance method.</source>
          <target state="translated">インスタンスメソッドとして呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="4ba8c255d770ca0f7b72beded6916ada06108fbe" translate="yes" xml:space="preserve">
          <source>Can also be used to set &lt;code&gt;$TODO&lt;/code&gt; to a new value while returning the old value:</source>
          <target state="translated">古い値を返すときに &lt;code&gt;$TODO&lt;/code&gt; を新しい値に設定するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="3a763feb2abeeeb1f5fc314f6396d5ecb0b67e0b" translate="yes" xml:space="preserve">
          <source>Can be called as either an object or a class method.</source>
          <target state="translated">オブジェクトまたはクラスメソッドとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="91cc357ede21e8f86848e6eae7e811a215ba08ce" translate="yes" xml:space="preserve">
          <source>Can be constructed using &lt;code&gt;pod2latex&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;pod2latex&lt;/code&gt; を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="4965933ed8a498358e075e20abc688b166f9b286" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether code references are turned into perl source code. If set to a true value, &lt;code&gt;B::Deparse&lt;/code&gt; will be used to get the source of the code reference. In older versions, using this option imposed a significant performance penalty when dumping parts of a data structure other than code references, but that is no longer the case.</source>
          <target state="translated">コード参照をperlソースコードに変換するかどうかを制御するためにブール値に設定できます。真の値に設定すると、 &lt;code&gt;B::Deparse&lt;/code&gt; を使用してコード参照のソースが取得されます。古いバージョンでは、このオプションを使用すると、コード参照以外のデータ構造の一部をダンプするときにパフォーマンスが大幅に低下しましたが、現在はそうではありません。</target>
        </trans-unit>
        <trans-unit id="fa58e7bcf2882cbd00cc88fa0dc03c0cd52468bb" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether code references are turned into perl source code. If set to a true value, &lt;code&gt;B::Deparse&lt;/code&gt; will be used to get the source of the code reference. Using this option will force using the Perl implementation of the dumper, since the fast XSUB implementation doesn't support it.</source>
          <target state="translated">ブール値に設定して、コード参照をperlソースコードに変換するかどうかを制御できます。 true値に設定すると、 &lt;code&gt;B::Deparse&lt;/code&gt; がコード参照のソースを取得するために使用されます。このオプションを使用すると、高速なXSUB実装ではサポートされないため、ダンパーのPerl実装の使用が強制されます。</target>
        </trans-unit>
        <trans-unit id="6c627856437742bf2a91768641f29dacbba9c49e" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether hash keys are dumped in sorted order. A true value will cause the keys of all hashes to be dumped in Perl's default sort order. Can also be set to a subroutine reference which will be called for each hash that is dumped. In this case &lt;code&gt;Data::Dumper&lt;/code&gt; will call the subroutine once for each hash, passing it the reference of the hash. The purpose of the subroutine is to return a reference to an array of the keys that will be dumped, in the order that they should be dumped. Using this feature, you can control both the order of the keys, and which keys are actually used. In other words, this subroutine acts as a filter by which you can exclude certain keys from being dumped. Default is 0, which means that hash keys are not sorted.</source>
          <target state="translated">ブール値に設定して、ハッシュキーをソート順にダンプするかどうかを制御できます。 trueの値を指定すると、すべてのハッシュのキーがPerlのデフォルトのソート順でダンプされます。ダンプされるハッシュごとに呼び出されるサブルーチン参照に設定することもできます。この場合、 &lt;code&gt;Data::Dumper&lt;/code&gt; は、ハッシュごとに1回サブルーチンを呼び出し、ハッシュの参照を渡します。サブルーチンの目的は、ダンプされるキーの配列への参照を、それらがダンプされる順序で返すことです。この機能を使用すると、キーの順序と実際に使用するキーの両方を制御できます。つまり、このサブルーチンはフィルターとして機能し、特定のキーをダンプから除外できます。デフォルトは0で、ハッシュキーはソートされません。</target>
        </trans-unit>
        <trans-unit id="7fb27ddb4917ba511f5c8620ff526bf1f7bf1e63" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to control whether hash keys are quoted. A defined false value will avoid quoting hash keys when it looks like a simple string. Default is 1, which will always enclose hash keys in quotes.</source>
          <target state="translated">ハッシュキーをクォートするかどうかを制御するために、ブール値を設定することができます。定義されたfalseの値は、単純な文字列のように見える場合にハッシュキーを引用符で囲まないようにします。デフォルトは1で、ハッシュキーは常に引用符で囲まれます。</target>
        </trans-unit>
        <trans-unit id="88c46add64294e8210c672da2183abe0ed447bfc" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value to enable deep copies of structures. Cross-referencing will then only be done when absolutely essential (i.e., to break reference cycles). Default is 0.</source>
          <target state="translated">構造体の深いコピーを有効にするために、ブール値に設定することができます。この場合、相互参照は絶対に必要な場合にのみ行われます(つまり、参照サイクルを中断するため)。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="67a33f1bf6a1de539cc6aeb590a56729f0fa737c" translate="yes" xml:space="preserve">
          <source>Can be set to a boolean value which controls whether the pure Perl implementation of &lt;code&gt;Data::Dumper&lt;/code&gt; is used. The &lt;code&gt;Data::Dumper&lt;/code&gt; module is a dual implementation, with almost all functionality written in both pure Perl and also in XS ('C'). Since the XS version is much faster, it will always be used if possible. This option lets you override the default behavior, usually for testing purposes only. Default is 0, which means the XS implementation will be used if possible.</source>
          <target state="translated">&lt;code&gt;Data::Dumper&lt;/code&gt; 純粋なPerl実装を使用するかどうかを制御するブール値に設定できます。 &lt;code&gt;Data::Dumper&lt;/code&gt; モジュールは、両方の純粋なPerlでもXS（「C」）で記述されたほぼすべての機能を備えた、デュアル実装です。 XSバージョンははるかに高速であるため、可能であれば常に使用されます。このオプションを使用すると、通常はテスト目的でのみ、デフォルトの動作を上書きできます。デフォルトは0で、可能な場合はXS実装が使用されます。</target>
        </trans-unit>
        <trans-unit id="cb22428de8a3ede5e563a5e4f65611da085b8c2a" translate="yes" xml:space="preserve">
          <source>Can be set to a method name, or to an empty string to disable the feature. Data::Dumper will emit a method call for any objects that are to be dumped using the syntax &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt; . Note that this means that the method specified will have to perform any modifications required on the object (like creating new state within it, and/or reblessing it in a different package) and then return it. The client is responsible for making sure the method can be called via the object, and that it returns a valid object. Defaults to an empty string.</source>
          <target state="translated">メソッド名に設定するか、空の文字列に設定して機能を無効にすることができます。 Data :: Dumperは、 &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt; という構文を使用してダンプされるオブジェクトのメソッド呼び出しを発行します。これは、指定されたメソッドがオブジェクトに必要な変更（オブジェクト内での新しい状態の作成や別のパッケージでのreblessなど）を実行し、それを返す必要があることを意味します。クライアントは、オブジェクトを介してメソッドを呼び出すことができること、および有効なオブジェクトを返すことを確認する責任があります。デフォルトは空の文字列です。</target>
        </trans-unit>
        <trans-unit id="b11825cf8d5444285d0f3fd94a8c3dfc7f09ab85" translate="yes" xml:space="preserve">
          <source>Can be set to a method name, or to an empty string to disable the feature. Data::Dumper will emit a method call for any objects that are to be dumped using the syntax &lt;code&gt;bless(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt;. Note that this means that the method specified will have to perform any modifications required on the object (like creating new state within it, and/or reblessing it in a different package) and then return it. The client is responsible for making sure the method can be called via the object, and that it returns a valid object. Defaults to an empty string.</source>
          <target state="translated">メソッド名に設定するか、空の文字列に設定して機能を無効にすることができます。 Data :: Dumperは、構文 &lt;code&gt;bless(DATA, CLASS)-&amp;gt;METHOD()&lt;/code&gt; を使用してダンプされるオブジェクトのメソッド呼び出しを発行します。これは、指定されたメソッドがオブジェクトに必要な変更（オブジェクト内に新しい状態を作成したり、別のパッケージでオブジェクトを再祝福したりするなど）を実行してから返す必要があることを意味します。クライアントは、メソッドがオブジェクトを介して呼び出せること、および有効なオブジェクトを返すことを確認する責任があります。デフォルトは空の文字列です。</target>
        </trans-unit>
        <trans-unit id="585673e874a0b17703c1a10f7dfc47aff5c9f0ec" translate="yes" xml:space="preserve">
          <source>Can be set to a method name, or to an empty string to disable the feature. Data::Dumper will invoke that method via the object before attempting to stringify it. This method can alter the contents of the object (if, for instance, it contains data allocated from C), and even rebless it in a different package. The client is responsible for making sure the specified method can be called via the object, and that the object ends up containing only perl data types after the method has been called. Defaults to an empty string.</source>
          <target state="translated">この機能を無効にするには、メソッド名か空文字列を設定します。Data::Dumper は、オブジェクトを文字列化しようとする前に、オブジェクトを介してそのメソッドを呼び出します。このメソッドは、オブジェクトの内容を変更したり (例えば、C から割り当てられたデータが含まれている場合)、別のパッケージにリベスしたりすることもできます。クライアントは、指定されたメソッドがオブジェクトを介して呼び出すことができ、メソッドが呼び出された後にオブジェクトがperlのデータ型だけを含んで終わることを確認する責任があります。デフォルトは空の文字列です。</target>
        </trans-unit>
        <trans-unit id="6ee2759a6426aff4b67b4db8b27a81f5748f17a4" translate="yes" xml:space="preserve">
          <source>Can be set to a positive integer that specifies the depth beyond which recursion into a structure will throw an exception. This is intended as a security measure to prevent perl running out of stack space when dumping an excessively deep structure. Can be set to 0 to remove the limit. Default is 1000.</source>
          <target state="translated">構造体への再帰が例外をスローする深さを指定する正の整数を設定することができます。これは、過度に深い構造体をダンプしたときにPerlがスタックスペースを使い果たしてしまうのを防ぐためのセキュリティ対策として意図されています。0に設定すると制限がなくなります。デフォルトは1000です。</target>
        </trans-unit>
        <trans-unit id="4bf42f1af137c40c87a30e672fa92d800507f75f" translate="yes" xml:space="preserve">
          <source>Can be set to a positive integer that specifies the depth beyond which we don't venture into a structure. Has no effect when &lt;code&gt;Data::Dumper::Purity&lt;/code&gt; is set. (Useful in debugger when we often don't want to see more than enough). Default is 0, which means there is no maximum depth.</source>
          <target state="translated">構造に進入しない深さを指定する正の整数に設定できます。 &lt;code&gt;Data::Dumper::Purity&lt;/code&gt; が設定されている場合は効果がありません。（デバッガーでは、十分な量を表示したくない場合に便利です）。デフォルトは0で、最大深度がないことを意味します。</target>
        </trans-unit>
        <trans-unit id="1b8ab4925558b8a13bc55bec7e3f47e1da66a3e2" translate="yes" xml:space="preserve">
          <source>Can be set to a regular expression. Only files with names that match the expression will be read.</source>
          <target state="translated">正規表現に設定することができます。正規表現に一致する名前のファイルのみが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="b4c1fc7bc4091447e126bb9cbc6311ac8f682f2f" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies an alternative to the &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; builtin operator used to create objects. A function with the specified name should exist, and should accept the same arguments as the builtin. Default is &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの作成に使用される &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 組み込み演算子の代替を指定する文字列に設定できます。指定された名前の関数が存在し、組み込み関数と同じ引数を受け入れる必要があります。デフォルトは &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1a8d696a13fbd3787a71fb1fa50c88e46886ad09" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies an alternative to the &lt;code&gt;bless&lt;/code&gt; builtin operator used to create objects. A function with the specified name should exist, and should accept the same arguments as the builtin. Default is &lt;code&gt;bless&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの作成に使用される &lt;code&gt;bless&lt;/code&gt; 組み込み演算子の代替を指定する文字列に設定できます。指定された名前の関数が存在し、組み込み関数と同じ引数を受け入れる必要があります。デフォルトは &lt;code&gt;bless&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a994c4b88b43caa5b752fd46ef7324627d9d83c6" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies the separator between hash keys and values. To dump nested hash, array and scalar values to JavaScript, use: &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt; . Implementing &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; in JavaScript is left as an exercise for the reader. A function with the specified name exists, and accepts the same arguments as the builtin.</source>
          <target state="translated">ハッシュキーと値の間のセパレータを指定する文字列に設定できます。ネストされたハッシュ、配列、スカラー値をJavaScriptにダンプするには、次を使用します： &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt; 。JavaScriptで &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; を実装することは、読者の練習問題として残しておきます。指定された名前の関数が存在し、組み込み関数と同じ引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="4da48067bcb9ac7f05cdf30f4157e26c1703a27f" translate="yes" xml:space="preserve">
          <source>Can be set to a string that specifies the separator between hash keys and values. To dump nested hash, array and scalar values to JavaScript, use: &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt;. Implementing &lt;code&gt;bless&lt;/code&gt; in JavaScript is left as an exercise for the reader. A function with the specified name exists, and accepts the same arguments as the builtin.</source>
          <target state="translated">ハッシュキーと値の間の区切り文字を指定する文字列に設定できます。ネストされたハッシュ、配列、およびスカラー値をJavaScriptにダンプするには、次を使用します。 &lt;code&gt;$Data::Dumper::Pair = ' : ';&lt;/code&gt; 。JavaScriptで &lt;code&gt;bless&lt;/code&gt; を実装することは、読者の練習問題として残されています。指定された名前の関数が存在し、組み込み関数と同じ引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="9e933a47e6aaf6dd73210fa86f1269378f8318bc" translate="yes" xml:space="preserve">
          <source>Can be trimmed if you compile for one access method.</source>
          <target state="translated">1つのアクセスメソッド用にコンパイルした場合は、トリミングすることができます。</target>
        </trans-unit>
        <trans-unit id="521dc350b83fb9d0aef450c7bd8ea71637ecc134" translate="yes" xml:space="preserve">
          <source>Can be used to get/set the filehandles. Indexes are identified by the &lt;code&gt;OUT_STD&lt;/code&gt; and &lt;code&gt;OUT_ERR&lt;/code&gt; constants.</source>
          <target state="translated">ファイルハンドルを取得/設定するために使用できます。インデックスはによって識別され &lt;code&gt;OUT_STD&lt;/code&gt; と &lt;code&gt;OUT_ERR&lt;/code&gt; 定数。</target>
        </trans-unit>
        <trans-unit id="717d201646a10747b3a920b5eaa1592483e5445b" translate="yes" xml:space="preserve">
          <source>Can call croak() if an error occurs.</source>
          <target state="translated">エラーが発生した場合に croak()を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="610ece97ddb84d598c6d8556f131f1844efd48bc" translate="yes" xml:space="preserve">
          <source>Can call croak() if there is a security anomaly during the stat() comparison.</source>
          <target state="translated">stat()の比較中にセキュリティ上の異常があった場合に croak()を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="512d893f80ec4605f408cd9d8d3b090f641b1bc5" translate="yes" xml:space="preserve">
          <source>Can only be applied to process handles returned for processes spawned using &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;(1, ...)&lt;/code&gt; or pseudo processes created with &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;. (Win32)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;(1, ...)&lt;/code&gt; を使用して生成されたプロセスまたは &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; で作成された疑似プロセスに対して返されたプロセスハンドルにのみ適用できます。（Win32）</target>
        </trans-unit>
        <trans-unit id="3d551e22f31cb9e7a6e87242c04142cacdd9e085" translate="yes" xml:space="preserve">
          <source>Can only compress unsigned integers in pack</source>
          <target state="translated">パック内の符号なし整数のみ圧縮可能</target>
        </trans-unit>
        <trans-unit id="acc17adc87dae58e0d71e7b8a46715c51db69dd0" translate="yes" xml:space="preserve">
          <source>Can use any of the methods described above but for further customization one needs to override some of the methods:</source>
          <target state="translated">上記のいずれかのメソッドを使用することができますが、さらにカスタマイズするためには、いくつかのメソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="6e5e0a8f8265c585a4f386242ed86595f0f740c3" translate="yes" xml:space="preserve">
          <source>Can we do the same with an XSUB</source>
          <target state="translated">XSUBでも同じことができるのか</target>
        </trans-unit>
        <trans-unit id="464a528d25f15fcc413cccaa9039a519f971ff35" translate="yes" xml:space="preserve">
          <source>Can you describe the bug in plain English?</source>
          <target state="translated">そのバグをわかりやすく説明してもらえますか?</target>
        </trans-unit>
        <trans-unit id="f2e89781235664711abeb12b27bdbc2f29b3b339" translate="yes" xml:space="preserve">
          <source>Can you fix the bug yourself?</source>
          <target state="translated">自分でバグを修正できますか?</target>
        </trans-unit>
        <trans-unit id="5608d8974ae07992c56822675bbd6ac88c79a5cd" translate="yes" xml:space="preserve">
          <source>Can you lazy-load data instead?</source>
          <target state="translated">代わりにデータをダラダラロードすることはできますか?</target>
        </trans-unit>
        <trans-unit id="ed62fc194f3937ce4d71415ddacb324ed399936b" translate="yes" xml:space="preserve">
          <source>Can you use &lt;code&gt;perlbug&lt;/code&gt; to submit a thank-you note?</source>
          <target state="translated">&lt;code&gt;perlbug&lt;/code&gt; を使用してお礼状を提出できますか？</target>
        </trans-unit>
        <trans-unit id="610efb240abaf3ea2c7896188006719e64b149b7" translate="yes" xml:space="preserve">
          <source>Can't &quot;break&quot; in a loop topicalizer</source>
          <target state="translated">ループ状の外用剤では「壊す」ことができない</target>
        </trans-unit>
        <trans-unit id="ce5267bb8010bbb7a6db4a6906e8693b63a95a10" translate="yes" xml:space="preserve">
          <source>Can't &quot;break&quot; outside a given block</source>
          <target state="translated">決められたブロックの外では「壊す」ことができない</target>
        </trans-unit>
        <trans-unit id="e33f6eee861c1cd353015b8f99633849b2ad8b6b" translate="yes" xml:space="preserve">
          <source>Can't &quot;continue&quot; outside a when block</source>
          <target state="translated">when ブロックの外で &quot;continue&quot; ができない</target>
        </trans-unit>
        <trans-unit id="5031122e389e2a8f51436eefc4fd6c303a7874ef" translate="yes" xml:space="preserve">
          <source>Can't &quot;default&quot; outside a topicalizer</source>
          <target state="translated">トピカライザの外では「デフォルト」にできない</target>
        </trans-unit>
        <trans-unit id="54adaebe96f6f14efea9928fcb70d70ab7208530" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; into a &quot;given&quot; block</source>
          <target state="translated">与えられた &quot;ブロックに &quot;ゴト &quot;ができない</target>
        </trans-unit>
        <trans-unit id="b97ed9e79dff848024195e1d17df569a0614b7f9" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; into a binary or list expression</source>
          <target state="translated">バイナリ式やリスト式に「ゴト」ができない</target>
        </trans-unit>
        <trans-unit id="f3c96689798d1e5eb721e92be82b1e85d192e746" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; into the middle of a foreach loop</source>
          <target state="translated">フォアリーチループの途中で「ゴト」ができない</target>
        </trans-unit>
        <trans-unit id="292e527849b890fe71de8d1ef37b93db73abdc02" translate="yes" xml:space="preserve">
          <source>Can't &quot;goto&quot; out of a pseudo block</source>
          <target state="translated">疑似ブロックから「ゴト」ができない</target>
        </trans-unit>
        <trans-unit id="b7e4e8a631a4dace6462765b61586a6f3818bfb3" translate="yes" xml:space="preserve">
          <source>Can't &quot;last&quot; outside a loop block</source>
          <target state="translated">ループブロックの外では &quot;最後 &quot;にできない</target>
        </trans-unit>
        <trans-unit id="1af20848c94f970db6efca5a1f1a68ee5eef163f" translate="yes" xml:space="preserve">
          <source>Can't &quot;next&quot; outside a loop block</source>
          <target state="translated">ループブロックの外では「次」ができない</target>
        </trans-unit>
        <trans-unit id="5e1a6b4b5d7807286b0352e400757a27d6c53dde" translate="yes" xml:space="preserve">
          <source>Can't &quot;redo&quot; outside a loop block</source>
          <target state="translated">ループブロックの外では「やり直し」ができない</target>
        </trans-unit>
        <trans-unit id="30706871a36ddc9aa4e542689a79fed92550b9d4" translate="yes" xml:space="preserve">
          <source>Can't &quot;when&quot; outside a topicalizer</source>
          <target state="translated">外用剤の外では「いつ」ができない</target>
        </trans-unit>
        <trans-unit id="739fbf3b991aa3306484c95541d74ac6110799ac" translate="yes" xml:space="preserve">
          <source>Can't %s %s-endian %ss on this platform</source>
          <target state="translated">このプラットフォームでは %s %s エンディアン %ss ができません。</target>
        </trans-unit>
        <trans-unit id="1856a75618797a18a668ad5c56fdb6cfb907772d" translate="yes" xml:space="preserve">
          <source>Can't be used by more than one module in a single program.</source>
          <target state="translated">1つのプログラムで複数のモジュールを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="91995835d674b3cf661c8f37ab1798b89b1ab9d6" translate="yes" xml:space="preserve">
          <source>Can't bless non-reference value</source>
          <target state="translated">非参照値を祝福することはできません</target>
        </trans-unit>
        <trans-unit id="d52b07474c6248623ee044575ad79260817dc732" translate="yes" xml:space="preserve">
          <source>Can't call method &quot;%s&quot; on an undefined value</source>
          <target state="translated">未定義の値でメソッド &quot;%s&quot; を呼び出すことができません。</target>
        </trans-unit>
        <trans-unit id="31eb8ca46c20a63468e96d0119fe4b0ab2ed41d7" translate="yes" xml:space="preserve">
          <source>Can't call method &quot;%s&quot; on unblessed reference</source>
          <target state="translated">非連結参照でメソッド &quot;%s&quot; を呼び出すことができません。</target>
        </trans-unit>
        <trans-unit id="21aa3f9f11a962d5a8136b0d22220a88232f9eb4" translate="yes" xml:space="preserve">
          <source>Can't call method &quot;%s&quot; without a package or object reference</source>
          <target state="translated">パッケージまたはオブジェクト参照がないとメソッド &quot;%s&quot; を呼び出すことができません。</target>
        </trans-unit>
        <trans-unit id="3f99c38d16202cb1e5238364ba2e015191f0def4" translate="yes" xml:space="preserve">
          <source>Can't call mro_isa_changed_in() on anonymous symbol table</source>
          <target state="translated">匿名シンボルテーブルで mro_isa_changed_in()が呼び出せない。</target>
        </trans-unit>
        <trans-unit id="e8c73f04ff81e18f8b075ff1e7ca12ddbe0cf71d" translate="yes" xml:space="preserve">
          <source>Can't call mro_method_changed_in() on anonymous symbol table</source>
          <target state="translated">匿名シンボルテーブルで mro_method_changed_in()をコールできない。</target>
        </trans-unit>
        <trans-unit id="5f185fa80d16db103831be6732bec2cbdb876c17" translate="yes" xml:space="preserve">
          <source>Can't chdir to %s</source>
          <target state="translated">chdir を %s に設定できません。</target>
        </trans-unit>
        <trans-unit id="d39f3e5fc2bc595191631ac64e0110e379c05120" translate="yes" xml:space="preserve">
          <source>Can't check filesystem of script &quot;%s&quot; for nosuid</source>
          <target state="translated">スクリプト &quot;%s&quot; のファイルシステムを nosuid でチェックできません。</target>
        </trans-unit>
        <trans-unit id="4ab029356c1dcdb7ddd4db17e3ca26c3bdea04cd" translate="yes" xml:space="preserve">
          <source>Can't coerce %s to %s in %s</source>
          <target state="translated">sでは%sを%sに強制することはできません。</target>
        </trans-unit>
        <trans-unit id="e8135be232e0c989a972d3285dca8e1be94c89bb" translate="yes" xml:space="preserve">
          <source>Can't create pipe mailbox</source>
          <target state="translated">パイプメールボックスが作成できない</target>
        </trans-unit>
        <trans-unit id="39be791b64076f438fc4fc4549ff16a866b21a3c" translate="yes" xml:space="preserve">
          <source>Can't declare %s in &quot;%s&quot;</source>
          <target state="translated">&quot;%s&quot; で %s を宣言できません。</target>
        </trans-unit>
        <trans-unit id="421bf40bef9b904ca19bbc43b0b6e304e13c7d0c" translate="yes" xml:space="preserve">
          <source>Can't determine class of operator %s, assuming BASEOP</source>
          <target state="translated">演算子 %s のクラスを判別できません。</target>
        </trans-unit>
        <trans-unit id="5525dd98465276b549436a7aaaea773a34e12cdb" translate="yes" xml:space="preserve">
          <source>Can't do %s(&quot;%s&quot;) on non-UTF-8 locale; resolved to &quot;%s&quot;.</source>
          <target state="translated">UTF-8 以外のロケールでは %s(&quot;%s&quot;)を実行できません。</target>
        </trans-unit>
        <trans-unit id="799ebf7552897604edfb655ee73cb4aa2e65564f" translate="yes" xml:space="preserve">
          <source>Can't do inplace edit on %s: %s</source>
          <target state="translated">%s でインプレース編集ができません:%s</target>
        </trans-unit>
        <trans-unit id="63fc86196418f4eb47afc83791341c1d2b02409e" translate="yes" xml:space="preserve">
          <source>Can't do inplace edit: %s is not a regular file</source>
          <target state="translated">インプレース編集ができない:%s は通常のファイルではありません。</target>
        </trans-unit>
        <trans-unit id="d201f1f315a2780544f8f13e1bff7ab0d04f47da" translate="yes" xml:space="preserve">
          <source>Can't do inplace edit: %s would not be unique</source>
          <target state="translated">インプレース編集ができません:%s は一意ではありません。</target>
        </trans-unit>
        <trans-unit id="751fce6dbbda7a1efa0473b4e1db461c754d4012" translate="yes" xml:space="preserve">
          <source>Can't do waitpid with flags</source>
          <target state="translated">フラッグではウェイトピッドができない</target>
        </trans-unit>
        <trans-unit id="75c543ce903975d4c46285e7ba8ab13dba08720d" translate="yes" xml:space="preserve">
          <source>Can't emulate -%s on #! line</source>
          <target state="translated">行の -%s をエミュレートできません。</target>
        </trans-unit>
        <trans-unit id="2ba565a6c185898b9c853d8b41dcdb7df64dd77d" translate="yes" xml:space="preserve">
          <source>Can't exec &quot;%s&quot;: %s</source>
          <target state="translated">s&quot; を実行できません。%s</target>
        </trans-unit>
        <trans-unit id="98aff00df7fc28c9118a56e889015f548c3b1d6f" translate="yes" xml:space="preserve">
          <source>Can't exec %s</source>
          <target state="translated">%s を実行できません。</target>
        </trans-unit>
        <trans-unit id="dfbb83283103d369cd009d2fb09d0c3027047de0" translate="yes" xml:space="preserve">
          <source>Can't execute %s</source>
          <target state="translated">%s を実行できません。</target>
        </trans-unit>
        <trans-unit id="e673e894256ce8258644963ba449cc08a696f2a0" translate="yes" xml:space="preserve">
          <source>Can't find %s on PATH</source>
          <target state="translated">PATH で %s が見つかりません。</target>
        </trans-unit>
        <trans-unit id="c8a347039c959afcde3039f1cc543cdf77eaf343" translate="yes" xml:space="preserve">
          <source>Can't find %s on PATH, '.' not in PATH</source>
          <target state="translated">PATH に %s が見つかりません。</target>
        </trans-unit>
        <trans-unit id="04925a28f7de74ca3260ac8009169ca793b7dd6c" translate="yes" xml:space="preserve">
          <source>Can't find Unicode property definition &quot;%s&quot;</source>
          <target state="translated">Unicode プロパティ定義 &quot;%s&quot; が見つかりません。</target>
        </trans-unit>
        <trans-unit id="6f919f1e0dd48452dd3f3007d95a278f883d55cb" translate="yes" xml:space="preserve">
          <source>Can't find Unicode property definition &quot;%s&quot; in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現でUnicodeプロパティ定義 &quot;％s&quot;が見つかりません。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="3b6b6abc3119c565999617ad82811d11e9cf74ef" translate="yes" xml:space="preserve">
          <source>Can't find an opnumber for &quot;%s&quot;</source>
          <target state="translated">&quot;%s&quot; のオペランド番号が見つかりません。</target>
        </trans-unit>
        <trans-unit id="0a073bbd2adfee099a38ce1cf48da9ea06d14cc2" translate="yes" xml:space="preserve">
          <source>Can't find label %s</source>
          <target state="translated">ラベル %s が見つかりません。</target>
        </trans-unit>
        <trans-unit id="8674cca3540f909a6e7d1746f8ab0e906443ddea" translate="yes" xml:space="preserve">
          <source>Can't find string terminator %s anywhere before EOF</source>
          <target state="translated">EOF の前のどこにも文字列のターミネータ %s が見つかりません。</target>
        </trans-unit>
        <trans-unit id="a9902ded7245ba58492e826cbd78144be6e0b082" translate="yes" xml:space="preserve">
          <source>Can't fork, trying again in 5 seconds</source>
          <target state="translated">フォークできません、5秒後にもう一度試してみます。</target>
        </trans-unit>
        <trans-unit id="1cc12510e515931da96c92c3dd9822d024879c4f" translate="yes" xml:space="preserve">
          <source>Can't fork: %s</source>
          <target state="translated">フォークできません:%s</target>
        </trans-unit>
        <trans-unit id="bc95c76e34bbcb3ac3e2167785800bfaa08082f0" translate="yes" xml:space="preserve">
          <source>Can't get SYSGEN parameter value for MAXBUF</source>
          <target state="translated">MAXBUF の SYSGEN パラメータ値が取得できない</target>
        </trans-unit>
        <trans-unit id="e898aa48bf2a4ad6e3a66e4a25fc752d5790eb8b" translate="yes" xml:space="preserve">
          <source>Can't get filespec - stale stat buffer?</source>
          <target state="translated">ファイルスペックが取得できない-スタットバッファが古くなっていますか?</target>
        </trans-unit>
        <trans-unit id="4c5157e1d5ceb8c44b0381792927b7f6ed6e6fe6" translate="yes" xml:space="preserve">
          <source>Can't get pipe mailbox device name</source>
          <target state="translated">パイプメールボックスのデバイス名が取得できない</target>
        </trans-unit>
        <trans-unit id="af789fc6df03d085c7560c168207188bd089f808" translate="yes" xml:space="preserve">
          <source>Can't goto subroutine from a sort sub (or similar callback)</source>
          <target state="translated">ソートサブ(またはそれに類するコールバック)からサブルーチンをゴトできない</target>
        </trans-unit>
        <trans-unit id="89e4c16930673bb4bd17a46bef3956985f35c783" translate="yes" xml:space="preserve">
          <source>Can't goto subroutine from an eval-%s</source>
          <target state="translated">eval-%s からサブルーチンを goto できません。</target>
        </trans-unit>
        <trans-unit id="08685649c3b554522c303b64206695490b2a9a75" translate="yes" xml:space="preserve">
          <source>Can't goto subroutine outside a subroutine</source>
          <target state="translated">サブルーチンの外でサブルーチンをゴトできない</target>
        </trans-unit>
        <trans-unit id="89bc53813367f15ad7fd5e6c473cbf45b7508af4" translate="yes" xml:space="preserve">
          <source>Can't have a 0 in =over</source>
          <target state="translated">0を持つことはできません。</target>
        </trans-unit>
        <trans-unit id="a95b4238378329e0e66b3fe87b93480ed8c0163b" translate="yes" xml:space="preserve">
          <source>Can't ignore signal CHLD, forcing to default</source>
          <target state="translated">シグナルCHLDを無視できず、強制的にデフォルトにする</target>
        </trans-unit>
        <trans-unit id="209c1dd1d198f15260ea9fe2d0267cd749d13fec" translate="yes" xml:space="preserve">
          <source>Can't kill a non-numeric process ID</source>
          <target state="translated">数値以外のプロセス ID をキルできない</target>
        </trans-unit>
        <trans-unit id="854b58a1a74b2ff5f09474ec8360292927417069" translate="yes" xml:space="preserve">
          <source>Can't linearize anonymous symbol table</source>
          <target state="translated">匿名シンボルテーブルの線形化ができない</target>
        </trans-unit>
        <trans-unit id="68326ac4a2b948a26636891b3172cd7613dd16c5" translate="yes" xml:space="preserve">
          <source>Can't load '%s' for module %s</source>
          <target state="translated">モジュール %s で '%s' をロードできません。</target>
        </trans-unit>
        <trans-unit id="dad118a840973578048304da9e4f67b2ef09cc96" translate="yes" xml:space="preserve">
          <source>Can't localize lexical variable %s</source>
          <target state="translated">字句変数 %s をローカライズできません。</target>
        </trans-unit>
        <trans-unit id="059add3be3b6631cfa466485a4d59ae6847384df" translate="yes" xml:space="preserve">
          <source>Can't localize through a reference</source>
          <target state="translated">参照を介してローカライズできない</target>
        </trans-unit>
        <trans-unit id="8190ac1f225c43a3c6b431f272c0cf6c8d766378" translate="yes" xml:space="preserve">
          <source>Can't locate %s</source>
          <target state="translated">%s を見つけることができません。</target>
        </trans-unit>
        <trans-unit id="fff9d0dd46a0f6d96b6530672a1def705c7eb5e2" translate="yes" xml:space="preserve">
          <source>Can't locate PerlIO%s</source>
          <target state="translated">PerlIO%の場所がわからない</target>
        </trans-unit>
        <trans-unit id="6701d024514e4834bd8f733a06e64983615b22bb" translate="yes" xml:space="preserve">
          <source>Can't locate auto/%s.al in @INC</source>
          <target state="translated">INCでauto/%s.alを見つけられません。</target>
        </trans-unit>
        <trans-unit id="2c0531eadde3f1644d3d81f08ad68828d1732f8d" translate="yes" xml:space="preserve">
          <source>Can't locate loadable object for module %s in @INC</source>
          <target state="translated">INC でモジュール %s のロード可能なオブジェクトが見つかりません。</target>
        </trans-unit>
        <trans-unit id="36ddc2b5284a6658ec4c35b32361ad5e6843ab5a" translate="yes" xml:space="preserve">
          <source>Can't locate object method &quot;%s&quot; via package &quot;%s&quot;</source>
          <target state="translated">パッケージ &quot;%s&quot; でオブジェクト・メソッド &quot;%s&quot; を見つけられません。</target>
        </trans-unit>
        <trans-unit id="856d71e2ccc5dc0179b30be00df48a3fa3ef5c5c" translate="yes" xml:space="preserve">
          <source>Can't locate object method &quot;%s&quot; via package &quot;%s&quot; (perhaps you forgot to load &quot;%s&quot;?)</source>
          <target state="translated">パッケージ &quot;%s&quot; を介してオブジェクト・メソッド &quot;%s&quot; を見つけられません (おそらく &quot;%s&quot; をロードするのを忘れたのでしょうか?)</target>
        </trans-unit>
        <trans-unit id="fcada84613fcdc78cb7459bdc0bce32dec0040f8" translate="yes" xml:space="preserve">
          <source>Can't locate package %s for @%s::ISA</source>
          <target state="translated">s::ISA のパッケージ %s を見つけることができません。</target>
        </trans-unit>
        <trans-unit id="d5fe9c70fde31d15a48884094e607d19f244c906" translate="yes" xml:space="preserve">
          <source>Can't make list assignment to %ENV on this system</source>
          <target state="translated">このシステムで %ENV にリストを割り当てることができません。</target>
        </trans-unit>
        <trans-unit id="56650e531c219b96060d691972076b7f3b4cfc1d" translate="yes" xml:space="preserve">
          <source>Can't make loaded symbols global on this platform while loading %s</source>
          <target state="translated">s をロード中にロードされたシンボルをこのプラットフォームでグローバルにできません。</target>
        </trans-unit>
        <trans-unit id="fa5de11f11ab44c9f3c84eacc2234354d9e240cc" translate="yes" xml:space="preserve">
          <source>Can't modify %s in %s</source>
          <target state="translated">s で %s を変更できません。</target>
        </trans-unit>
        <trans-unit id="b8b6e3af4990589e685062c8af185ee22cda18ff" translate="yes" xml:space="preserve">
          <source>Can't modify non-lvalue subroutine call of &amp;amp;%s</source>
          <target state="translated">＆％sの非左辺値サブルーチン呼び出しを変更できません</target>
        </trans-unit>
        <trans-unit id="4cb212950718e9340d89c5b19f9133919e1ebc2e" translate="yes" xml:space="preserve">
          <source>Can't modify non-lvalue subroutine call of &amp;amp;%s in %s</source>
          <target state="translated">％sの＆％sの非左辺値サブルーチン呼び出しを変更できません</target>
        </trans-unit>
        <trans-unit id="eaca9b0920afd252b3807162e97466ed7ed772db" translate="yes" xml:space="preserve">
          <source>Can't modify nonexistent substring</source>
          <target state="translated">存在しない部分文字列を変更できない</target>
        </trans-unit>
        <trans-unit id="de526e2b2dd17c16062ddd0b3be1faf0a4c95c35" translate="yes" xml:space="preserve">
          <source>Can't modify reference to %s in %s assignment</source>
          <target state="translated">%s 代入で %s への参照を変更できません。</target>
        </trans-unit>
        <trans-unit id="ece864afd296053aeb27646df351d85f71c1b9d3" translate="yes" xml:space="preserve">
          <source>Can't modify reference to localized parenthesized array in list assignment</source>
          <target state="translated">リスト代入でローカライズされた括弧付き配列への参照を変更できない</target>
        </trans-unit>
        <trans-unit id="28041854196266225e06dfeccf3445cf97ae0dbf" translate="yes" xml:space="preserve">
          <source>Can't modify reference to parenthesized hash in list assignment</source>
          <target state="translated">リスト代入で括弧付きハッシュへの参照を変更できない</target>
        </trans-unit>
        <trans-unit id="d71b162349ad8d3cc1b62ad26a21aad2924ff2d2" translate="yes" xml:space="preserve">
          <source>Can't move directories between directories on different logical volumes. (Win32)</source>
          <target state="translated">異なる論理ボリューム上のディレクトリ間でディレクトリを移動できない。(Win32)</target>
        </trans-unit>
        <trans-unit id="253802c668bb989a5f22bd3eea83b1824d4e2d9b" translate="yes" xml:space="preserve">
          <source>Can't msgrcv to read-only var</source>
          <target state="translated">読み取り専用の var に msgrcv ができない</target>
        </trans-unit>
        <trans-unit id="8fcb71bfd86c0e91cb932afa6693beaf3db80849" translate="yes" xml:space="preserve">
          <source>Can't open %s for reading: %s</source>
          <target state="translated">読み取りのために %s を開くことができません。%s</target>
        </trans-unit>
        <trans-unit id="ba7e82ecbec319db3ac48476c8fc988603922b0f" translate="yes" xml:space="preserve">
          <source>Can't open %s: %s</source>
          <target state="translated">s が開けません:%s</target>
        </trans-unit>
        <trans-unit id="7b47e9fcf4d99f67f18ab23bd218159eef9c13ab" translate="yes" xml:space="preserve">
          <source>Can't open a reference</source>
          <target state="translated">リファレンスを開くことができない</target>
        </trans-unit>
        <trans-unit id="b60024d188cd4d4c0c0003e45a5fe98eb9c7c162" translate="yes" xml:space="preserve">
          <source>Can't open bidirectional pipe</source>
          <target state="translated">双方向パイプが開けない</target>
        </trans-unit>
        <trans-unit id="f5eec28bc4405ab30736402c536493a71e47fcb7" translate="yes" xml:space="preserve">
          <source>Can't open error file %s as stderr</source>
          <target state="translated">エラー・ファイル %s を stderr として開けません。</target>
        </trans-unit>
        <trans-unit id="ac08c0c69b1481a6aa69fc6e2f4f533733680442" translate="yes" xml:space="preserve">
          <source>Can't open input file %s as stdin</source>
          <target state="translated">入力ファイル %s を stdin として開けません。</target>
        </trans-unit>
        <trans-unit id="3f088e61191d284ee060f7fe01fec6eaf20763a7" translate="yes" xml:space="preserve">
          <source>Can't open output file %s as stdout</source>
          <target state="translated">出力ファイル %s を stdout として開けません。</target>
        </trans-unit>
        <trans-unit id="18a90fd6697b09b852cb1e1dc935296753b45b29" translate="yes" xml:space="preserve">
          <source>Can't open output pipe (name: %s)</source>
          <target state="translated">出力パイプを開けません (名前:%s)。</target>
        </trans-unit>
        <trans-unit id="04b90f250fc3ac9a20c74a55a9e9facc489fa13f" translate="yes" xml:space="preserve">
          <source>Can't open perl script &quot;%s&quot;: %s</source>
          <target state="translated">perl スクリプト &quot;%s&quot; を開けません。%s</target>
        </trans-unit>
        <trans-unit id="ee64cedb1a1cb1d91b6a178a0a9832c207890bd4" translate="yes" xml:space="preserve">
          <source>Can't read CRTL environ</source>
          <target state="translated">CRTL環境が読めない</target>
        </trans-unit>
        <trans-unit id="2ede2d9d86cf67fb629f074ca78e860d0d9fab7b" translate="yes" xml:space="preserve">
          <source>Can't redeclare &quot;%s&quot; in &quot;%s&quot;</source>
          <target state="translated">&quot;%s&quot; で &quot;%s&quot; を再宣言できません。</target>
        </trans-unit>
        <trans-unit id="f166bacef5e5597fa942abc67b168e62388fc153" translate="yes" xml:space="preserve">
          <source>Can't remove %s: %s, skipping file</source>
          <target state="translated">削除できません %s:%s、ファイルをスキップしています。</target>
        </trans-unit>
        <trans-unit id="9bb937d4de08be950c9ecb1762c96ed8cb9686b9" translate="yes" xml:space="preserve">
          <source>Can't rename %s to %s: %s, skipping file</source>
          <target state="translated">名前 %s を %s:%s に変更できません。</target>
        </trans-unit>
        <trans-unit id="33a43d9553c530ca2509d37b700b01eb470c061b" translate="yes" xml:space="preserve">
          <source>Can't rename in-place work file '%s' to '%s': %s</source>
          <target state="translated">インプレース作業ファイル '%s' の名前を '%s' に変更できません:%s</target>
        </trans-unit>
        <trans-unit id="3e7b6fde3e21c351e61def567bf76e539f3ee923" translate="yes" xml:space="preserve">
          <source>Can't reopen input pipe (name: %s) in binary mode</source>
          <target state="translated">バイナリ・モードで入力パイプ (名前:%s)を再オープンできません。</target>
        </trans-unit>
        <trans-unit id="2d6f4901930125b8629e6d241783f853c1bea7a0" translate="yes" xml:space="preserve">
          <source>Can't represent character for Ox%X on this platform</source>
          <target state="translated">このプラットフォームではOx%Xのキャラクターを表現することはできません。</target>
        </trans-unit>
        <trans-unit id="8ad6b52932458c7860a5ae1bcb97c00e6ca48303" translate="yes" xml:space="preserve">
          <source>Can't reset %ENV on this system</source>
          <target state="translated">このシステムで %ENV をリセットできません。</target>
        </trans-unit>
        <trans-unit id="84979537cfd0f0f071043caf043519cf175f8a9d" translate="yes" xml:space="preserve">
          <source>Can't resolve method &quot;%s&quot; overloading &quot;%s&quot; in package &quot;%s&quot;</source>
          <target state="translated">パッケージ &quot;%s&quot; でメソッド &quot;%s&quot; オーバーロード &quot;%s&quot; を解決できません。</target>
        </trans-unit>
        <trans-unit id="1e7ad0aea6bd0cd26a1e94b76e26f86df3b41437" translate="yes" xml:space="preserve">
          <source>Can't return %s from lvalue subroutine</source>
          <target state="translated">lvalue サブルーチンから %s を返すことができません。</target>
        </trans-unit>
        <trans-unit id="5b80012b0e6e81d9e1151ca353b9114e7b547900" translate="yes" xml:space="preserve">
          <source>Can't return %s to lvalue scalar context</source>
          <target state="translated">lvalue スカラコンテキストに %s を返すことができません。</target>
        </trans-unit>
        <trans-unit id="31bae2a960d0856237b1216bdb7d3ad590d492c4" translate="yes" xml:space="preserve">
          <source>Can't return outside a subroutine</source>
          <target state="translated">サブルーチンの外に戻せない</target>
        </trans-unit>
        <trans-unit id="75abc33a50ebc04bfeb2b56f56de0f4c6ae6f515" translate="yes" xml:space="preserve">
          <source>Can't stat script &quot;%s&quot;</source>
          <target state="translated">スクリプト &quot;%s&quot; を統計化できません。</target>
        </trans-unit>
        <trans-unit id="1ab99670ff8d8c85bbe295cfe5d78b7f827e2119" translate="yes" xml:space="preserve">
          <source>Can't take log of %g</source>
          <target state="translated">g のログを取ることができません。</target>
        </trans-unit>
        <trans-unit id="21c0e313c42bf88914a90e5c2d2eb26e959f394c" translate="yes" xml:space="preserve">
          <source>Can't take sqrt of %g</source>
          <target state="translated">g の sqrt を取ることができません。</target>
        </trans-unit>
        <trans-unit id="44c5445fbb928768e9353ec9d999709b2b9bb549" translate="yes" xml:space="preserve">
          <source>Can't undef active subroutine</source>
          <target state="translated">アクティブなサブルーチンを undef できない</target>
        </trans-unit>
        <trans-unit id="ed6abe1792db906a52a11913bac927ca38a44773" translate="yes" xml:space="preserve">
          <source>Can't unweaken a nonreference</source>
          <target state="translated">不参照を解除することはできません</target>
        </trans-unit>
        <trans-unit id="8c1f35ef7c4d401308e222d3fcffb9e9800d53a8" translate="yes" xml:space="preserve">
          <source>Can't upgrade %s (%d) to %d</source>
          <target state="translated">s (%d)を %d にアップグレードできません。</target>
        </trans-unit>
        <trans-unit id="53faef17d768ab26e821e73ada78af65179f649b" translate="yes" xml:space="preserve">
          <source>Can't use &quot;my %s&quot; in sort comparison</source>
          <target state="translated">ソート比較で &quot;my %s&quot; が使用できない</target>
        </trans-unit>
        <trans-unit id="fa22ab8ff7d152243a8346dc02c35c3f3d6a0255" translate="yes" xml:space="preserve">
          <source>Can't use %! because Errno.pm is not available</source>
          <target state="translated">Errno.pm が使用できないので、%!</target>
        </trans-unit>
        <trans-unit id="e6684f9ea9fdadb65c8a9421996c2f4d55e1886d" translate="yes" xml:space="preserve">
          <source>Can't use %s for loop variable</source>
          <target state="translated">ループ変数に %s を使用できません。</target>
        </trans-unit>
        <trans-unit id="333bebbc7a920a463ca900f63e0743d16fa2dcaa" translate="yes" xml:space="preserve">
          <source>Can't use %s ref as %s ref</source>
          <target state="translated">%s ref を %s ref として使用できません。</target>
        </trans-unit>
        <trans-unit id="2a115c0048e134e9d76b1b13d8d33deda087969e" translate="yes" xml:space="preserve">
          <source>Can't use '%c' after -mname</source>
          <target state="translated">mname の後に '%c' を使用できません。</target>
        </trans-unit>
        <trans-unit id="a8514b194f05ef85fa88cca4412220afbd285624" translate="yes" xml:space="preserve">
          <source>Can't use '%c' in a group with different byte-order in %s</source>
          <target state="translated">s でバイト順が異なるグループで '%c' を使用できません。</target>
        </trans-unit>
        <trans-unit id="3c5a99a4242c6abb3e04494187a05fa6dab2f31e" translate="yes" xml:space="preserve">
          <source>Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)</source>
          <target state="translated">defined(%hash)' は使用できません (defined()を省略する必要があるかもしれません)。</target>
        </trans-unit>
        <trans-unit id="6b5b68a194b050b383eccd6adc4efdc6eb5b79b1" translate="yes" xml:space="preserve">
          <source>Can't use 'defined(@array)' (Maybe you should just omit the defined()?)</source>
          <target state="translated">defined(@array)'が使えない(defined()を省略した方がいいかも?</target>
        </trans-unit>
        <trans-unit id="8bde597b32693d0abe304e3d13a90adaa98bc45f" translate="yes" xml:space="preserve">
          <source>Can't use \%c to mean $%c in expression</source>
          <target state="translated">Can't use \%c to mean $%c in expression.</target>
        </trans-unit>
        <trans-unit id="03a8e1b2b59fdc4a706c4e31cfd579bb62fc5939" translate="yes" xml:space="preserve">
          <source>Can't use a hash as a reference</source>
          <target state="translated">ハッシュを参照として使用することはできません</target>
        </trans-unit>
        <trans-unit id="02178331a38ef34753ddbf17cea7391d706e6790" translate="yes" xml:space="preserve">
          <source>Can't use an array as a reference</source>
          <target state="translated">配列を参照として使用できない</target>
        </trans-unit>
        <trans-unit id="bde94c5e75cb6a1b33b4f1f13580799044318cb5" translate="yes" xml:space="preserve">
          <source>Can't use an undefined value as %s reference</source>
          <target state="translated">未定義の値を %s 参照として使用できません。</target>
        </trans-unit>
        <trans-unit id="a036bd3b8575d03e44627689d24be7dcde134126" translate="yes" xml:space="preserve">
          <source>Can't use anonymous symbol table for method lookup</source>
          <target state="translated">メソッドのルックアップに匿名シンボルテーブルを使用できない</target>
        </trans-unit>
        <trans-unit id="fc0b3aa696da09b074406deb7fc50d8ab957d558" translate="yes" xml:space="preserve">
          <source>Can't use bareword (&quot;%s&quot;) as %s ref while &quot;strict refs&quot; in use</source>
          <target state="translated">&quot;strict refs&quot; が使用されている場合、ベアワード (&quot;%s&quot;)を %s ref として使用できません。</target>
        </trans-unit>
        <trans-unit id="f56529a2d10a3e25a4653ab805b6f80a460e185f" translate="yes" xml:space="preserve">
          <source>Can't use both '&amp;lt;' and '&amp;gt;' after type '%c' in %s</source>
          <target state="translated">％sのタイプ '％c'の後に '&amp;lt;'と '&amp;gt;'の両方を使用することはできません</target>
        </trans-unit>
        <trans-unit id="5fa0a9174c821771fb82e978bd7ff74664934902" translate="yes" xml:space="preserve">
          <source>Can't use global %s in %s</source>
          <target state="translated">グローバル %s を %s で使用できません。</target>
        </trans-unit>
        <trans-unit id="f2b34439935b436b9bdf4fc1f5a9d24c9f5d99b7" translate="yes" xml:space="preserve">
          <source>Can't use string (&quot;%s&quot;) as %s ref while &quot;strict refs&quot; in use</source>
          <target state="translated">&quot;strict refs&quot; の使用中に文字列 (&quot;%s&quot;)を %s ref として使用できません。</target>
        </trans-unit>
        <trans-unit id="b456bf1b39c98c040555f540d4f0340908ea32f3" translate="yes" xml:space="preserve">
          <source>Can't use string (&quot;%s&quot;...) as %s ref while &quot;strict refs&quot; in use</source>
          <target state="translated">文字列 (&quot;%s&quot;...)を %s ref として使用できません。</target>
        </trans-unit>
        <trans-unit id="2293fb91bfc92728008a30e736f71da35facbe9e" translate="yes" xml:space="preserve">
          <source>Can't use subscript on %s</source>
          <target state="translated">s で添え字を使用できません。</target>
        </trans-unit>
        <trans-unit id="48413b1da81af0e8f787539b259fb7717aff54aa" translate="yes" xml:space="preserve">
          <source>Can't weaken a nonreference</source>
          <target state="translated">不参照を弱めることはできない</target>
        </trans-unit>
        <trans-unit id="d9df7c794e4239f8fcf34bc70d062eaaffbe40aa" translate="yes" xml:space="preserve">
          <source>Can't x= to read-only value</source>
          <target state="translated">x=を読み取り専用の値にできない</target>
        </trans-unit>
        <trans-unit id="cd6a7b8768528485a0dbcd459185091e80dc28ad" translate="yes" xml:space="preserve">
          <source>Canada</source>
          <target state="translated">Canada</target>
        </trans-unit>
        <trans-unit id="ab7cfc5e3e1575ef731dc8a192764717c39a667f" translate="yes" xml:space="preserve">
          <source>Cancel Ctrl/O (used with Terminal I/O).</source>
          <target state="translated">Ctrl/Oをキャンセル(ターミナルI/Oで使用)。</target>
        </trans-unit>
        <trans-unit id="d5c61e930ba2ace5562dbc01d87ff2dccd871bad" translate="yes" xml:space="preserve">
          <source>Cancel output to the file handle. Any POD read by the &lt;code&gt;$parser&lt;/code&gt; is not effected.</source>
          <target state="translated">ファイルハンドルへの出力をキャンセルします。 &lt;code&gt;$parser&lt;/code&gt; によって読み取られたPOD は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="56c9d54018682f033ce26d5d28cbd53bef40aa76" translate="yes" xml:space="preserve">
          <source>Cancel output to the output string. Any POD read by the &lt;code&gt;$parser&lt;/code&gt; is not effected.</source>
          <target state="translated">出力文字列への出力をキャンセルします。 &lt;code&gt;$parser&lt;/code&gt; によって読み取られたPOD は影響を受けません。</target>
        </trans-unit>
        <trans-unit id="cf5ab48928c6227aa52c3d012c2701389449d7d8" translate="yes" xml:space="preserve">
          <source>Canned Filters</source>
          <target state="translated">缶詰フィルター</target>
        </trans-unit>
        <trans-unit id="3482894db317b46f89fa72afa818ad64a07e0cd6" translate="yes" xml:space="preserve">
          <source>Cannot alias standard color %s</source>
          <target state="translated">標準色 %s をエイリアス化できません。</target>
        </trans-unit>
        <trans-unit id="41090d32ebd650b4d2771c985fed201051cdf9f4" translate="yes" xml:space="preserve">
          <source>Cannot alias standard color %s in %s</source>
          <target state="translated">標準色 %s を %s でエイリアスすることはできません。</target>
        </trans-unit>
        <trans-unit id="b787d73f05383dd7a48896f2443da8e9275458d4" translate="yes" xml:space="preserve">
          <source>Cannot change stack size of an existing thread</source>
          <target state="translated">既存スレッドのスタックサイズを変更できない</target>
        </trans-unit>
        <trans-unit id="8ef73c44f87ca55aebbbb4209f8f165a3e8be29c" translate="yes" xml:space="preserve">
          <source>Cannot chr %f</source>
          <target state="translated">f をクロすることはできません。</target>
        </trans-unit>
        <trans-unit id="adf6d2093d7aa9c2c96446dc6c579ae60a287418" translate="yes" xml:space="preserve">
          <source>Cannot complete in-place edit of %s: %s</source>
          <target state="translated">%s のインプレース編集を完了できません:%s</target>
        </trans-unit>
        <trans-unit id="eaf733aeab99894ab43126f5e6d2b81d874d7490" translate="yes" xml:space="preserve">
          <source>Cannot compress %f in pack</source>
          <target state="translated">パック内で %f を圧縮できません。</target>
        </trans-unit>
        <trans-unit id="514769805856ccf2c5763fdcef436c3bc2222351" translate="yes" xml:space="preserve">
          <source>Cannot compress integer in pack</source>
          <target state="translated">パック内の整数を圧縮できない</target>
        </trans-unit>
        <trans-unit id="6361040636e91d3798203704d51c1d95c2661e25" translate="yes" xml:space="preserve">
          <source>Cannot compress negative numbers in pack</source>
          <target state="translated">パック内の負の数を圧縮できない</target>
        </trans-unit>
        <trans-unit id="6cb52553b7290c44cfad6769b7861a447ee417c5" translate="yes" xml:space="preserve">
          <source>Cannot convert a reference to %s to typeglob</source>
          <target state="translated">%s への参照を typeglob に変換できません。</target>
        </trans-unit>
        <trans-unit id="c04f97c847ac18aa6024c06c265705e7cdd27488" translate="yes" xml:space="preserve">
          <source>Cannot copy to %s</source>
          <target state="translated">%s にコピーできません。</target>
        </trans-unit>
        <trans-unit id="8d38515cb4d649e479170b074991ec1a54930262" translate="yes" xml:space="preserve">
          <source>Cannot find encoding &quot;%s&quot;</source>
          <target state="translated">エンコーディング &quot;%s&quot; が見つかりません。</target>
        </trans-unit>
        <trans-unit id="036d97b2ab5bc100700978cd436d6f1a92e70266" translate="yes" xml:space="preserve">
          <source>Cannot make the non-overridable %s fatal</source>
          <target state="translated">非オーバーライド可能な %s を致命的にすることはできません。</target>
        </trans-unit>
        <trans-unit id="a92329d5518a4d680c08de477d5613e4f5e2514d" translate="yes" xml:space="preserve">
          <source>Cannot open %s as a dirhandle: it is already open as a filehandle</source>
          <target state="translated">s を dirhandle として開くことはできません:既にファイルハンドルとして開いています。</target>
        </trans-unit>
        <trans-unit id="0b9a75fa08d6758b781cf39ffd1bc9a76df03b2e" translate="yes" xml:space="preserve">
          <source>Cannot open %s as a filehandle: it is already open as a dirhandle</source>
          <target state="translated">ファイルハンドルとして %s を開くことはできません:既に dirhandle として開かれています。</target>
        </trans-unit>
        <trans-unit id="b1b6e672bb47f36ee70fad76d1b0ecf405f7492f" translate="yes" xml:space="preserve">
          <source>Cannot pack %f with '%c'</source>
          <target state="translated">f を '%c' でパックできません。</target>
        </trans-unit>
        <trans-unit id="0b549c12495891c4212e9462b575ce7219f4b851" translate="yes" xml:space="preserve">
          <source>Cannot printf %f with '%c'</source>
          <target state="translated">c' で %f を印刷できません。</target>
        </trans-unit>
        <trans-unit id="e5c599f856ba4af6fad2820148768283781cec70" translate="yes" xml:space="preserve">
          <source>Cannot set tied @DB::args</source>
          <target state="translated">紐付きの @DB::args を設定できません。</target>
        </trans-unit>
        <trans-unit id="9c2a221f5e04eff6e5d2aa76ebeee66ff6fcd159" translate="yes" xml:space="preserve">
          <source>Cannot signal threads without safe signals</source>
          <target state="translated">安全な信号がないとスレッドに信号を送ることができない</target>
        </trans-unit>
        <trans-unit id="1bbd1f5144cc25ff3e79e713323aaa5805fc1bb3" translate="yes" xml:space="preserve">
          <source>Cannot start &lt;code&gt;find.exe &quot;pattern&quot; file&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;find.exe &quot;pattern&quot; file&lt;/code&gt; 開始できません</target>
        </trans-unit>
        <trans-unit id="4f9378da13e876924853515ac330a0589ab874eb" translate="yes" xml:space="preserve">
          <source>Cannot start find.exe &quot;pattern&quot; file</source>
          <target state="translated">find.exe &quot;pattern&quot; ファイルを起動できません。</target>
        </trans-unit>
        <trans-unit id="914952aefbce09e1cf83c26cf3520aab7f64751c" translate="yes" xml:space="preserve">
          <source>Cannot tie unreifiable array</source>
          <target state="translated">結ぶことができない配列</target>
        </trans-unit>
        <trans-unit id="c959a875f14ef6a8cba2e5d7d5f89eb5b0c49a03" translate="yes" xml:space="preserve">
          <source>Cannot yet reorder sv_vcatpvfn() arguments from va_list</source>
          <target state="translated">va_list から sv_vcatpvfn()の引数を並べ替えることができません。</target>
        </trans-unit>
        <trans-unit id="07f4ae991f88e569288a303eea482424b54e133d" translate="yes" xml:space="preserve">
          <source>Canonical Equivalence in Applications - UTN #5</source>
          <target state="translated">応用における正準方程式-UTN #5</target>
        </trans-unit>
        <trans-unit id="b8dabeba508ec88a0783430634fb6a91f3d06c7d" translate="yes" xml:space="preserve">
          <source>Canonical order does not imply network order; those are two orthogonal settings.</source>
          <target state="translated">正準順序はネットワーク順序を意味するものではありません。</target>
        </trans-unit>
        <trans-unit id="4d54bf792a185de045beb26ac6e2d8cc01e21726" translate="yes" xml:space="preserve">
          <source>Capitalizes characters on a read from the terminal.</source>
          <target state="translated">端末から読み込んだ文字を大文字にします。</target>
        </trans-unit>
        <trans-unit id="70958560117660215c678a65a317f69cf291f71f" translate="yes" xml:space="preserve">
          <source>Capture STDOUT and STDERR output.</source>
          <target state="translated">STDOUTとSTDERRの出力をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="e2e45233bca1ff9d51fe1747e5a3f80383b6f972" translate="yes" xml:space="preserve">
          <source>Capture an arrayref of warnings from the block.</source>
          <target state="translated">ブロックから警告の配列refを取得します。</target>
        </trans-unit>
        <trans-unit id="a41cbe379826efcfbfa4c8d79aa79ece89ec2bf7" translate="yes" xml:space="preserve">
          <source>Capture an exception.</source>
          <target state="translated">例外をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="022667ded0755ea18f63880b563578c05902ec8e" translate="yes" xml:space="preserve">
          <source>Capture group contents are dynamically scoped and available to you outside the pattern until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;&quot;Compound Statements&quot; in perlsyn&lt;/a&gt;.) You can refer to them by absolute number (using &lt;code&gt;&quot;$1&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;\g1&quot;&lt;/code&gt;,</source>
          <target state="translated">キャプチャグループのコンテンツは動的にスコープされ、囲んでいるブロックが終了するまで、または次の一致が成功するまで、パターンの外側で利用できます。（参照&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;perlsynで「化合物文」&lt;/a&gt;。）あなたは絶対数でそれらを参照することができます（使用して &lt;code&gt;&quot;$1&quot;&lt;/code&gt; の代わりに &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="747ae3c9036b2b9d0c1bdc3f6a1c392c7794eed3" translate="yes" xml:space="preserve">
          <source>Capture group contents are dynamically scoped and available to you outside the pattern until the end of the enclosing block or until the next successful match, whichever comes first. (See &lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;Compound Statements in perlsyn&lt;/a&gt;.) You can refer to them by absolute number (using &lt;code&gt;&quot;$1&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; , etc); or by name via the &lt;code&gt;%+&lt;/code&gt; hash, using &lt;code&gt;&quot;$+{&lt;i&gt;name&lt;/i&gt;}&quot;&lt;/code&gt;.</source>
          <target state="translated">キャプチャグループのコンテンツは動的にスコープされ、囲みブロックの終わりまで、または次の一致が成功するまでのいずれか早い方まで、パターンの外側で使用できます。（&lt;a href=&quot;perlsyn#Compound-Statements&quot;&gt;perlsynの複合文を&lt;/a&gt;参照してください。）それらを絶対数で参照できます（ &lt;code&gt;&quot;\g1&quot;&lt;/code&gt; 代わりに&quot; &lt;code&gt;&quot;$1&quot;&lt;/code&gt; を使用するなど）。または、 &lt;code&gt;&quot;$+{&lt;i&gt;name&lt;/i&gt;}&quot;&lt;/code&gt; &lt;i&gt;name&lt;/i&gt; }」を使用して、 &lt;code&gt;%+&lt;/code&gt; ハッシュを介して名前で指定します。&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="311dff8ce71dc0b4b0666e7280ad010d93e7918a" translate="yes" xml:space="preserve">
          <source>Capture groups</source>
          <target state="translated">キャプチャグループ</target>
        </trans-unit>
        <trans-unit id="17d5baafa6da919c16c090df56e9fd9d7a565715" translate="yes" xml:space="preserve">
          <source>Capture groups are numbered from left to right, but inside this construct the numbering is restarted for each branch.</source>
          <target state="translated">キャプチャグループには左から右へ番号が振られますが、この構造体の中では各ブランチごとに番号付けが再開されます。</target>
        </trans-unit>
        <trans-unit id="ee0771c31053343949dda6efc584e44e5297b9a9" translate="yes" xml:space="preserve">
          <source>Captured groups are numbered according to their</source>
          <target state="translated">捕獲されたグループには、それぞれの</target>
        </trans-unit>
        <trans-unit id="f7b4920b8aa7c1586544c28d9c8886e52d98ca56" translate="yes" xml:space="preserve">
          <source>Capturing parenthesis that work just like perl</source>
          <target state="translated">perlと同じように動作する括弧のキャプチャ</target>
        </trans-unit>
        <trans-unit id="307f83eae2041bdf7a5d0e4d4039929292abf689" translate="yes" xml:space="preserve">
          <source>Care has been taken to make all flags symmetrical with respect to &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;decode&lt;/code&gt;, that is, texts encoded with any combination of these flag values will be correctly decoded when the same flags are used - in general, if you use different flag settings while encoding vs. when decoding you likely have a bug somewhere.</source>
          <target state="translated">&lt;code&gt;encode&lt;/code&gt; と &lt;code&gt;decode&lt;/code&gt; に関してすべてのフラグを対称にするように注意が払われています。つまり、これらのフラグ値の任意の組み合わせでエンコードされたテキストは、同じフラグが使用された場合に正しくデコードされます-一般に、エンコード中に異なるフラグ設定を使用した場合対デコードするとき、どこかにバグがある可能性があります。</target>
        </trans-unit>
        <trans-unit id="4ea8cbac41ff9a96e8d9db8e075354ecd6a9f99e" translate="yes" xml:space="preserve">
          <source>Care must be taken when making changes to make sure that you handle UTF-8 properly, both at compile time and at execution time, including when the string and pattern are mismatched.</source>
          <target state="translated">文字列とパターンが不一致の場合を含め、コンパイル時と実行時の両方でUTF-8を適切に扱うように変更を加える際には注意が必要です。</target>
        </trans-unit>
        <trans-unit id="04617e457add86a7b016a256cae6724b67e05962" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. It is</source>
          <target state="translated">使用する際には注意する必要がある &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; 形式 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 。です</target>
        </trans-unit>
        <trans-unit id="f12898eb208465f617f9b5c3dd913e72b7c63a92" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. It is</source>
          <target state="translated">使用する際には注意する必要がある &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; VERSION&lt;/code&gt; 形式 &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 。です</target>
        </trans-unit>
        <trans-unit id="662a10769a4851c5fa85f39275e3a20db3254277" translate="yes" xml:space="preserve">
          <source>Care should be taken when using the &lt;code&gt;no VERSION&lt;/code&gt; form of &lt;a href=&quot;#no-MODULE-VERSION-LIST&quot;&gt;&lt;code&gt;no&lt;/code&gt;&lt;/a&gt;. It is</source>
          <target state="translated">使用する際には注意する必要がある &lt;code&gt;no VERSION&lt;/code&gt; のフォーム&lt;a href=&quot;#no-MODULE-VERSION-LIST&quot;&gt; &lt;code&gt;no&lt;/code&gt; &lt;/a&gt;。です</target>
        </trans-unit>
        <trans-unit id="d00ed6d0c5ac45de00f179782815edeefadfc67b" translate="yes" xml:space="preserve">
          <source>Carp</source>
          <target state="translated">Carp</target>
        </trans-unit>
        <trans-unit id="d88a6c87d4e1376b298c703f4fc38df13d24c117" translate="yes" xml:space="preserve">
          <source>Carp - alternative warn and die for modules</source>
          <target state="translated">カープ-モジュールのための代替の警告とダイ</target>
        </trans-unit>
        <trans-unit id="4cac758eff9ae8b1951cfa88daf6efd8e4c9f9dd" translate="yes" xml:space="preserve">
          <source>Carp gives two ways to control this.</source>
          <target state="translated">カープはこれを制御するために2つの方法を与えます。</target>
        </trans-unit>
        <trans-unit id="9cdaea1be30b41a257f3e74ca5f04da906b26010" translate="yes" xml:space="preserve">
          <source>Carriage-return control.</source>
          <target state="translated">キャリーリターン制御。</target>
        </trans-unit>
        <trans-unit id="bca0e3c0ab768e90d91b7158f9afa5173ab39d46" translate="yes" xml:space="preserve">
          <source>Case 2 is also deceptive in that you're accessing a variable called %hashref, not dereferencing through $hashref to the hash it's presumably referencing. That would be case 3.</source>
          <target state="translated">ケース 2 はまた、%hashref という変数にアクセスしているという点でも欺瞞的で、$hashref を通じて参照していると思われるハッシュへの派生ではありません。これはケース3です。</target>
        </trans-unit>
        <trans-unit id="298d6337ccd66315823554fe2294fb2258cef971" translate="yes" xml:space="preserve">
          <source>Case Mappings/SpecialCasing</source>
          <target state="translated">ケースマッピング/特殊ケース</target>
        </trans-unit>
        <trans-unit id="12c50192a130e9814d8ea8606bd466ad9981e92e" translate="yes" xml:space="preserve">
          <source>Case and abbreviations</source>
          <target state="translated">大文字と略語</target>
        </trans-unit>
        <trans-unit id="71820be5979516bbf68abefb91861f6a5f447350" translate="yes" xml:space="preserve">
          <source>Case translation operators use the Unicode case translation tables.</source>
          <target state="translated">大文字小文字変換演算子は、Unicode 大文字小文字変換テーブルを使用します。</target>
        </trans-unit>
        <trans-unit id="9fc0b2fddd3396951a95310fbd8003b367dba5dd" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input parameters (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt; , which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt; ).</source>
          <target state="translated">入力パラメーターでは、大文字小文字、空白、ハイフン、およびアンダースコアは無視されます（古い形式の一般的なカテゴリプロパティ値 &lt;code&gt;&quot;L_&quot;&lt;/code&gt; の末尾のアンダースコアは除きますが、 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; の方が適切です）。</target>
        </trans-unit>
        <trans-unit id="5dc22b379cca8577f46f5a98f71105a90b33e0a9" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input parameters (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt;, which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt;).</source>
          <target state="translated">大文字と小文字、空白、ハイフン、およびアンダースコアは、入力パラメーターでは無視されます（古い形式の &lt;code&gt;&quot;L_&quot;&lt;/code&gt; 権の一般カテゴリプロパティ値「L_」の末尾の下線は除きます。これは &lt;code&gt;&quot;LC&quot;&lt;/code&gt; と表記する方が適切です）。</target>
        </trans-unit>
        <trans-unit id="9c97ea35c0c010d6bc3fa3e2766ca1eeed20cb95" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input property name (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt; , which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt; ).</source>
          <target state="translated">入力プロパティ名では、大文字、小文字、空白、ハイフン、アンダースコアは無視されます（古い形式の一般的なカテゴリプロパティ値 &lt;code&gt;&quot;L_&quot;&lt;/code&gt; の末尾のアンダースコアは除き、 &lt;code&gt;&quot;LC&quot;&lt;/code&gt; の方が適切です）。</target>
        </trans-unit>
        <trans-unit id="cdb95a78fe8cf5fb324342e8050f8f838eaf6255" translate="yes" xml:space="preserve">
          <source>Case, white space, hyphens, and underscores are ignored in the input property name (except for the trailing underscore in the old-form grandfathered-in general category property value &lt;code&gt;&quot;L_&quot;&lt;/code&gt;, which is better written as &lt;code&gt;&quot;LC&quot;&lt;/code&gt;).</source>
          <target state="translated">入力プロパティ名では、大文字と小文字、空白、ハイフン、およびアンダースコアは無視されます（ただし、古い形式の &lt;code&gt;&quot;L_&quot;&lt;/code&gt; 権の一般カテゴリプロパティ値「L_」の末尾の下線は &lt;code&gt;&quot;LC&quot;&lt;/code&gt; と表記する方が適切です）。</target>
        </trans-unit>
        <trans-unit id="5913a3e508c3f58147c3a7ea4922d97aeb2d10bc" translate="yes" xml:space="preserve">
          <source>Casefolding is the process of mapping strings to a form where case differences are erased; comparing two strings in their casefolded form is effectively a way of asking if two strings are equal, regardless of case.</source>
          <target state="translated">ケースフォールディングとは、大文字と小文字の違いを消去した形に文字列をマッピングするプロセスです。ケースフォールディングされた形で2つの文字列を比較することは、大文字と小文字の違いに関係なく、2つの文字列が等しいかどうかを尋ねる効果的な方法です。</target>
        </trans-unit>
        <trans-unit id="3efae3773aea3e6418118bae37722e49dd2d43fd" translate="yes" xml:space="preserve">
          <source>Cases 1 and 2 above behave identically: they run the code contained in the variable $x. (Although case 2 has misleading double quotes making the reader wonder what else might be happening (nothing is).) Cases 3 and 4 likewise behave in the same way: they run the code &lt;code&gt;'$x'&lt;/code&gt; , which does nothing but return the value of $x. (Case 4 is preferred for purely visual reasons, but it also has the advantage of compiling at compile-time instead of at run-time.) Case 5 is a place where normally you</source>
          <target state="translated">上記のケース1と2は同じように動作し、変数$ xに含まれるコードを実行します。（ケース2には誤解を招く二重引用符がありますが、他に何が起こっているのか読者に不思議に思わせます（何も起こりません）。）ケース3と4も同様に動作します：コード &lt;code&gt;'$x'&lt;/code&gt; を実行し、値を返すだけです。 $ xの。（ケース4は純粋に視覚的な理由で推奨されますが、実行時ではなくコンパイル時にコンパイルするという利点もあります。）ケース5は通常、</target>
        </trans-unit>
        <trans-unit id="b06e162aa03a647b4812343dc3da5daa182fbaff" translate="yes" xml:space="preserve">
          <source>Cases 1 and 2 above behave identically: they run the code contained in the variable $x. (Although case 2 has misleading double quotes making the reader wonder what else might be happening (nothing is).) Cases 3 and 4 likewise behave in the same way: they run the code &lt;code&gt;'$x'&lt;/code&gt;, which does nothing but return the value of $x. (Case 4 is preferred for purely visual reasons, but it also has the advantage of compiling at compile-time instead of at run-time.) Case 5 is a place where normally you</source>
          <target state="translated">上記のケース1と2は同じように動作します。つまり、変数$ xに含まれるコードを実行します。（ケース2には誤解を招く二重引用符が含まれているため、読者は他に何が起こっているのか疑問に思います（何も起こりません）。）ケース3と4も同様に動作します。コード &lt;code&gt;'$x'&lt;/code&gt; を実行し、値を返すだけです。 $ xの。（ケース4は、純粋に視覚的な理由から推奨されますが、実行時ではなくコンパイル時にコンパイルするという利点もあります。）ケース5は、通常は</target>
        </trans-unit>
        <trans-unit id="5505c412fd66a6e2bea57031fd55f4c6fd701c28" translate="yes" xml:space="preserve">
          <source>Cast-to-bool. A simple &lt;code&gt;(bool) &lt;i&gt;expr&lt;/i&gt;&lt;/code&gt; cast may not do the right thing: if &lt;code&gt;bool&lt;/code&gt; is defined as &lt;code&gt;char&lt;/code&gt;, for example, then the cast from &lt;code&gt;int&lt;/code&gt; is implementation-defined.</source>
          <target state="translated">Cast-to-bool。単純な &lt;code&gt;(bool) &lt;i&gt;expr&lt;/i&gt;&lt;/code&gt; キャストは正しく機能しない場合があります。たとえば、 &lt;code&gt;bool&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; として定義されている場合、 &lt;code&gt;int&lt;/code&gt; からのキャストは実装定義です。</target>
        </trans-unit>
        <trans-unit id="fce28c3834b46c5817fa1ba652ddba28baf2570f" translate="yes" xml:space="preserve">
          <source>Casting between function pointers and data pointers</source>
          <target state="translated">関数ポインタとデータポインタ間のキャスト</target>
        </trans-unit>
        <trans-unit id="6f9e423b5bc8680aa5b16ed1908f25312d66ad7e" translate="yes" xml:space="preserve">
          <source>Casting pointers to integers or casting integers to pointers</source>
          <target state="translated">整数へのポインタのキャストまたはポインタへの整数のキャスト</target>
        </trans-unit>
        <trans-unit id="499253af5f67ae889bc3aabf24d35d8ba82de0e2" translate="yes" xml:space="preserve">
          <source>Casts I to the internal I32 type used by that perl.</source>
          <target state="translated">そのperlが使用する内部のI32型にIをキャストします。</target>
        </trans-unit>
        <trans-unit id="59979146f46a040b0a7e911c02c1492a2329f87e" translate="yes" xml:space="preserve">
          <source>Casts the following votes:</source>
          <target state="translated">以下の投票を行います。</target>
        </trans-unit>
        <trans-unit id="bf602a375c078eea9d4f26e60690e565125dbf72" translate="yes" xml:space="preserve">
          <source>Catalyst</source>
          <target state="translated">Catalyst</target>
        </trans-unit>
        <trans-unit id="c174d6be41280356a91ddfdde65f079878120639" translate="yes" xml:space="preserve">
          <source>Catch stopped child processes.</source>
          <target state="translated">停止している子プロセスをキャッチします。</target>
        </trans-unit>
        <trans-unit id="c2d335ad7e81fdf6a55a7304c8fd31f60f0fc162" translate="yes" xml:space="preserve">
          <source>Catchall routine to clean up problem MM[SK]/Make macros. Expands macros in any directory specification, in order to avoid juxtaposing two VMS-syntax directories when MM[SK] is run. Also expands expressions which are all macro, so that we can tell how long the expansion is, and avoid overrunning DCL's command buffer when MM[KS] is running.</source>
          <target state="translated">問題のある MM[SK]/Make マクロをクリーンアップするためのキャッチオールルーチン。MM[SK]の実行時にVMS-syntaxのディレクトリが2つ並置されるのを避けるために、任意のディレクトリ指定でマクロを展開します。また、全てマクロである式を展開することで、展開の長さが分かるようにし、MM[KS]の実行時にDCLのコマンドバッファがオーバーランしないようにしています。</target>
        </trans-unit>
        <trans-unit id="8ebd028848b2a2942ac465614616f32324230d21" translate="yes" xml:space="preserve">
          <source>Catching signals</source>
          <target state="translated">信号のキャッチ</target>
        </trans-unit>
        <trans-unit id="6b5024a9f7f3c46574351ad45dcdeceef2016767" translate="yes" xml:space="preserve">
          <source>Categories of modules range from text manipulation to network protocols to database integration to graphics. A categorized list of modules is also available from CPAN.</source>
          <target state="translated">モジュールのカテゴリは、テキスト操作からネットワークプロトコル、データベース統合、グラフィックスまで多岐にわたります。モジュールの分類されたリストは、CPANからも入手可能です。</target>
        </trans-unit>
        <trans-unit id="337a8f7bd3bdbf4fe42f0b9d4b42a95657d8e9f9" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_COLLATE&lt;/code&gt; : Collation</source>
          <target state="translated">カテゴリー &lt;code&gt;LC_COLLATE&lt;/code&gt; ：照合</target>
        </trans-unit>
        <trans-unit id="63bd78675cb869e7c134fbca3753e02f0edb2b92" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_COLLATE&lt;/code&gt;: Collation</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_COLLATE&lt;/code&gt; ：照合</target>
        </trans-unit>
        <trans-unit id="919d3be1151a8a62ff3f509b3510742d344c2496" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_COLLATE&lt;/code&gt;: Collation: Text Comparisons and Sorting</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_COLLATE&lt;/code&gt; ：照合順序：テキストの比較と並べ替え</target>
        </trans-unit>
        <trans-unit id="beec9c5a8a3b1200e13a31c08cab20f387038371" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_CTYPE&lt;/code&gt; : Character Types</source>
          <target state="translated">カテゴリー &lt;code&gt;LC_CTYPE&lt;/code&gt; ：文字タイプ</target>
        </trans-unit>
        <trans-unit id="011933a95f9a8627bd8a8b00900841623f871c86" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_CTYPE&lt;/code&gt;: Character Types</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_CTYPE&lt;/code&gt; ：文字タイプ</target>
        </trans-unit>
        <trans-unit id="d237153062484cd9db84eb0e31d1a90b2c50d7ab" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_MESSAGES&lt;/code&gt;: Error and other messages</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_MESSAGES&lt;/code&gt; ：エラーおよびその他のメッセージ</target>
        </trans-unit>
        <trans-unit id="38233af031be21177bea3a81f92c8363621b4861" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_MONETARY&lt;/code&gt; : Formatting of monetary amounts</source>
          <target state="translated">カテゴリー &lt;code&gt;LC_MONETARY&lt;/code&gt; ：金額のフォーマット</target>
        </trans-unit>
        <trans-unit id="56775ec2542f69ddf365702c3138f3ad177fd92b" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_MONETARY&lt;/code&gt;: Formatting of monetary amounts</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_MONETARY&lt;/code&gt; ：金額のフォーマット</target>
        </trans-unit>
        <trans-unit id="19550402e5a1f045b848054b7a9e298b524aa833" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_NUMERIC&lt;/code&gt; : Numeric Formatting</source>
          <target state="translated">カテゴリー &lt;code&gt;LC_NUMERIC&lt;/code&gt; ：数値のフォーマット</target>
        </trans-unit>
        <trans-unit id="5e8cd7df31bcad9a7460bcc56674a80279c7718f" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_NUMERIC&lt;/code&gt;: Numeric Formatting</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_NUMERIC&lt;/code&gt; ：数値フォーマット</target>
        </trans-unit>
        <trans-unit id="2ef0947154dc11f8df87c645f41aa4495ea0e052" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_NUMERIC&lt;/code&gt;: Numeric formatting</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_NUMERIC&lt;/code&gt; ：数値フォーマット</target>
        </trans-unit>
        <trans-unit id="55751e3a0413fc5462344716ab71e2bd8275874c" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_TIME&lt;/code&gt;: Date/Time formatting</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_TIME&lt;/code&gt; ：日付/時刻のフォーマット</target>
        </trans-unit>
        <trans-unit id="cbf487ce36806c29e5298812ba0b7582489033c6" translate="yes" xml:space="preserve">
          <source>Category &lt;code&gt;LC_TIME&lt;/code&gt;: Respresentation of time</source>
          <target state="translated">カテゴリ &lt;code&gt;LC_TIME&lt;/code&gt; ：時間の表現</target>
        </trans-unit>
        <trans-unit id="d6caa2ce2c0ba347d49ead269d4ac916346dc572" translate="yes" xml:space="preserve">
          <source>Category Hierarchy</source>
          <target state="translated">カテゴリ階層</target>
        </trans-unit>
        <trans-unit id="ad6f8c0088808eee492b45306c0d1b94608c6f08" translate="yes" xml:space="preserve">
          <source>Category LC_COLLATE: Collation</source>
          <target state="translated">カテゴリ LC_COLLATE.照合</target>
        </trans-unit>
        <trans-unit id="0bdd88741c1732953327ff657fadb93b2ae039be" translate="yes" xml:space="preserve">
          <source>Category LC_COLLATE: Collation: Text Comparisons and Sorting</source>
          <target state="translated">カテゴリ LC_COLLATE.照合。テキストの比較と並べ替え</target>
        </trans-unit>
        <trans-unit id="a51fd3f6ab56831c7fdec8dd63db4d84c5e5ddfb" translate="yes" xml:space="preserve">
          <source>Category LC_CTYPE: Character Types</source>
          <target state="translated">カテゴリ LC_CTYPE.文字タイプ</target>
        </trans-unit>
        <trans-unit id="7682ad4955d10f9cf4cc9354213c179454f72007" translate="yes" xml:space="preserve">
          <source>Category LC_MONETARY: Formatting of monetary amounts</source>
          <target state="translated">カテゴリ LC_MONETARY:金額の書式設定</target>
        </trans-unit>
        <trans-unit id="07571e7937ae3f96671e4cd556a4abc903111a57" translate="yes" xml:space="preserve">
          <source>Category LC_NUMERIC: Numeric Formatting</source>
          <target state="translated">カテゴリ LC_NUMERIC:数値フォーマット</target>
        </trans-unit>
        <trans-unit id="df2ca5e8366f7d90f63b83096b599541b20211a0" translate="yes" xml:space="preserve">
          <source>Category LC_TIME: Respresentation of time</source>
          <target state="translated">カテゴリ LC_TIME。時間の表現</target>
        </trans-unit>
        <trans-unit id="5815523127907cea055a8c75d152a5931bf9635a" translate="yes" xml:space="preserve">
          <source>Causes records to be flushed</source>
          <target state="translated">レコードがフラッシュされる</target>
        </trans-unit>
        <trans-unit id="351f03ebcae4fdf4e90e88c26a354b4fb738e5ad" translate="yes" xml:space="preserve">
          <source>Causes symbolic links to be followed. Since directory trees with symbolic links (followed) may contain files more than once and may even have cycles, a hash has to be built up with an entry for each file. This might be expensive both in space and time for a large directory tree. See &lt;a href=&quot;#follow_fast&quot;&gt;&quot;follow_fast&quot;&lt;/a&gt; and &lt;a href=&quot;#follow_skip&quot;&gt;&quot;follow_skip&quot;&lt;/a&gt; below. If either</source>
          <target state="translated">シンボリックリンクをたどります。シンボリックリンク（フォロー）のあるディレクトリツリーには、ファイルが複数回含まれている場合があり、サイクルがある場合もあるため、各ファイルのエントリを使用してハッシュを作成する必要があります。これは、大きなディレクトリツリーの場合、スペースと時間の両方でコストがかかる可能性があります。参照&lt;a href=&quot;#follow_fast&quot;&gt;「follow_fastを」&lt;/a&gt;と&lt;a href=&quot;#follow_skip&quot;&gt;「follow_skip」&lt;/a&gt;以下。どちらかなら</target>
        </trans-unit>
        <trans-unit id="85dc017dda24f39d24e2b45c927b49e37ad2e173" translate="yes" xml:space="preserve">
          <source>Causes symbolic links to be followed. Since directory trees with symbolic links (followed) may contain files more than once and may even have cycles, a hash has to be built up with an entry for each file. This might be expensive both in space and time for a large directory tree. See &lt;a href=&quot;#follow_fast&quot;&gt;follow_fast&lt;/a&gt; and &lt;a href=&quot;#follow_skip&quot;&gt;follow_skip&lt;/a&gt; below. If either</source>
          <target state="translated">シンボリックリンクをたどります。シンボリックリンク（以下を参照）のあるディレクトリツリーには複数のファイルが含まれている可能性があり、循環する可能性さえあるため、各ファイルのエントリでハッシュを構築する必要があります。大規模なディレクトリツリーの場合、これはスペースと時間の両方でコストがかかる可能性があります。下記の&lt;a href=&quot;#follow_fast&quot;&gt;follow_fast&lt;/a&gt;および&lt;a href=&quot;#follow_skip&quot;&gt;follow_skipを&lt;/a&gt;参照してください。どちらか</target>
        </trans-unit>
        <trans-unit id="d8a6af2ce96fea0e83364432bebd24ee2a299a63" translate="yes" xml:space="preserve">
          <source>Causes the script to sleep for (integer) EXPR seconds, or forever if no argument is given. Returns the integer number of seconds actually slept.</source>
          <target state="translated">スクリプトを(整数の)EXPR秒間スリープさせ、引数が与えられなかった場合は永遠にスリープさせます。実際にスリープした秒数を整数で返します。</target>
        </trans-unit>
        <trans-unit id="adc5b4e7301cfc17b319d4424a90aed30a644658" translate="yes" xml:space="preserve">
          <source>Causes this module to use Time::HiRes module, allowing milliseconds to be returned by subsequent calls to ping().</source>
          <target state="translated">このモジュールが Time::HiRes モジュールを使用するようにし、後続の ping()の呼び出しでミリ秒が返されるようにします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
