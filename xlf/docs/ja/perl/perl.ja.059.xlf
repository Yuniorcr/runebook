<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="e8f4fc6abff769c701a3cd104bd7d5e13a65f76f" translate="yes" xml:space="preserve">
          <source>The configure phase occurs before any dynamic configuration has been attempted. Libraries required by the configure phase &lt;b&gt;must&lt;/b&gt; be available for use before the distribution building tool has been executed.</source>
          <target state="translated">構成フェーズは、動的構成が試行される前に発生します。構成フェーズで&lt;b&gt;必要&lt;/b&gt;なライブラリは、配布構築ツールを実行する前に使用できる&lt;b&gt;必要&lt;/b&gt;があります。</target>
        </trans-unit>
        <trans-unit id="cb35472fba52fde6c0d287b9880009008ce62bd4" translate="yes" xml:space="preserve">
          <source>The conformance test for the UCA</source>
          <target state="translated">UCAの適合性試験</target>
        </trans-unit>
        <trans-unit id="92e8c71c043d1ee5895cf5c5a239168a7f0a8975" translate="yes" xml:space="preserve">
          <source>The confusion arises because people incorrectly assume that the sigil denotes the variable type.</source>
          <target state="translated">この混乱は、人々がシグルが変数の型を示すと誤って思い込んでいるために起こります。</target>
        </trans-unit>
        <trans-unit id="72def2ab61e0c7e7dccd965b3f9393136d20aa03" translate="yes" xml:space="preserve">
          <source>The constant &lt;code&gt;pi&lt;/code&gt; and some handy multiples of it (pi2, pi4, and pip2 (pi/2) and pip4 (pi/4)) are also available if separately exported:</source>
          <target state="translated">定数 &lt;code&gt;pi&lt;/code&gt; とその便利な倍数（pi2、pi4、pip2（pi / 2）およびpip4（pi / 4））は、個別にエクスポートした場合にも使用できます。</target>
        </trans-unit>
        <trans-unit id="c81821f9e03375c52f91dde5667119328458dcfd" translate="yes" xml:space="preserve">
          <source>The constant function &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; returns a comparable number that represents the highest file version number that this version of Storable fully supports (but see discussion of &lt;code&gt;$Storable::accept_future_minor&lt;/code&gt; above). The constant &lt;code&gt;Storable::BIN_WRITE_VERSION_NV&lt;/code&gt; function returns what file version is written and might be less than &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; in some configurations.</source>
          <target state="translated">定数関数 &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; は、このバージョンのStorableが完全にサポートしている最高のファイルバージョン番号を表す比較可能な番号を返します（ただし、上記の &lt;code&gt;$Storable::accept_future_minor&lt;/code&gt; 説明を参照してください）。定数 &lt;code&gt;Storable::BIN_WRITE_VERSION_NV&lt;/code&gt; 関数は、書き込まれたファイルのバージョンを返し、構成 &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; はStorable :: BIN_VERSION_NVよりも小さい場合があります。</target>
        </trans-unit>
        <trans-unit id="1404d0959d5fe2f0dd1fe9c942e64fc147050eb7" translate="yes" xml:space="preserve">
          <source>The constants for specific &lt;code&gt;code&lt;/code&gt; values can be imported individually or using the &lt;code&gt;:signal_h_si_code&lt;/code&gt; tag.</source>
          <target state="translated">特定の &lt;code&gt;code&lt;/code&gt; 値の定数は、個別にインポートすることも、 &lt;code&gt;:signal_h_si_code&lt;/code&gt; タグを使用してインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="9018d00ba0cf85500f9049cabc293077c6a815d2" translate="yes" xml:space="preserve">
          <source>The construct</source>
          <target state="translated">コンストラクト</target>
        </trans-unit>
        <trans-unit id="8226460345430ec3df47c2bd35c2d238766995a6" translate="yes" xml:space="preserve">
          <source>The construct &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; used in the above example has a two-fold purpose: first, when this line is processed by &lt;b&gt;xsubpp&lt;/b&gt;, the Perl snippet &lt;code&gt;$v{timep}=$arg&lt;/code&gt; is evaluated. Second, the text of the evaluated snippet is output into the generated C file (inside a C comment)! During the processing of &lt;code&gt;char *host&lt;/code&gt; line, &lt;code&gt;$arg&lt;/code&gt; will evaluate to &lt;code&gt;ST(0)&lt;/code&gt; , and &lt;code&gt;$v{timep}&lt;/code&gt; will evaluate to &lt;code&gt;ST(1)&lt;/code&gt; .</source>
          <target state="translated">上記の例で使用されている構成 &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; は2つの目的があります。最初に、この行が&lt;b&gt;xsubppによって&lt;/b&gt;処理さ&lt;b&gt;れる&lt;/b&gt;とき、Perlスニペット &lt;code&gt;$v{timep}=$arg&lt;/code&gt; が評価されます。次に、評価されたスニペットのテキストが生成されたCファイル（Cコメント内）に出力されます。 &lt;code&gt;char *host&lt;/code&gt; 行の処理中に、 &lt;code&gt;$arg&lt;/code&gt; は &lt;code&gt;ST(0)&lt;/code&gt; に評価され、 &lt;code&gt;$v{timep}&lt;/code&gt; は &lt;code&gt;ST(1)&lt;/code&gt; に評価されます。</target>
        </trans-unit>
        <trans-unit id="5f2f29b3b2c632054cc482de2585e44d1631920b" translate="yes" xml:space="preserve">
          <source>The construct &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; used in the above example has a two-fold purpose: first, when this line is processed by &lt;b&gt;xsubpp&lt;/b&gt;, the Perl snippet &lt;code&gt;$v{timep}=$arg&lt;/code&gt; is evaluated. Second, the text of the evaluated snippet is output into the generated C file (inside a C comment)! During the processing of &lt;code&gt;char *host&lt;/code&gt; line, &lt;code&gt;$arg&lt;/code&gt; will evaluate to &lt;code&gt;ST(0)&lt;/code&gt;, and &lt;code&gt;$v{timep}&lt;/code&gt; will evaluate to &lt;code&gt;ST(1)&lt;/code&gt;.</source>
          <target state="translated">上記の例で使用されている構文 &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; は、2つの目的があります。まず、この行が&lt;b&gt;xsubppによって&lt;/b&gt;処理さ&lt;b&gt;れる&lt;/b&gt;と、Perlスニペット &lt;code&gt;$v{timep}=$arg&lt;/code&gt; が評価されます。次に、評価されたスニペットのテキストが、生成されたCファイル（Cコメント内）に出力されます。 &lt;code&gt;char *host&lt;/code&gt; 行の処理中に、 &lt;code&gt;$arg&lt;/code&gt; は &lt;code&gt;ST(0)&lt;/code&gt; と評価され、 &lt;code&gt;$v{timep}&lt;/code&gt; は &lt;code&gt;ST(1)&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="b59007854896f819ee065a798da86e7867bce96e" translate="yes" xml:space="preserve">
          <source>The constructor &lt;code&gt;new&lt;/code&gt; creates and returns an empty &lt;code&gt;TAP::Parser::YAMLish::Reader&lt;/code&gt; object.</source>
          <target state="translated">コンストラクタ &lt;code&gt;new&lt;/code&gt; は、空の &lt;code&gt;TAP::Parser::YAMLish::Reader&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="1bad8668cdf1d431ad701326f6748ece18b79658" translate="yes" xml:space="preserve">
          <source>The constructor &lt;code&gt;new&lt;/code&gt; creates and returns an empty &lt;code&gt;TAP::Parser::YAMLish::Writer&lt;/code&gt; object.</source>
          <target state="translated">コンストラクタ &lt;code&gt;new&lt;/code&gt; は、空の &lt;code&gt;TAP::Parser::YAMLish::Writer&lt;/code&gt; オブジェクトを作成して返します。</target>
        </trans-unit>
        <trans-unit id="4c2fcf35a44aabf097cd59f3a3854953c70e5fcd" translate="yes" xml:space="preserve">
          <source>The constructor can also accept additional parameters that define the object. Let's write a real constructor for the &lt;code&gt;File&lt;/code&gt; class we used earlier:</source>
          <target state="translated">コンストラクターは、オブジェクトを定義する追加のパラメーターも受け入れることができます。前に使用した &lt;code&gt;File&lt;/code&gt; クラスの実際のコンストラクターを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="3a88176407788666ff0021721dd4e56b3400cf3f" translate="yes" xml:space="preserve">
          <source>The constructor creates a new object and optionally initialises it with a set of handles.</source>
          <target state="translated">コンストラクタは、新しいオブジェクトを作成し、オプションでハンドルのセットで初期化します。</target>
        </trans-unit>
        <trans-unit id="26002f2b8ad63b7adc28307355437aa48afa5d7b" translate="yes" xml:space="preserve">
          <source>The constructor for a &lt;code&gt;Net::Netrc&lt;/code&gt; object is not called new as it does not really create a new object. But instead is called &lt;code&gt;lookup&lt;/code&gt; as this is essentially what it does.</source>
          <target state="translated">&lt;code&gt;Net::Netrc&lt;/code&gt; オブジェクトのコンストラクターは、実際には新しいオブジェクトを作成しないため、newと呼ばれません。ただし、 &lt;code&gt;lookup&lt;/code&gt; と呼ばれます。これは本質的にルックアップと呼ばれるためです。</target>
        </trans-unit>
        <trans-unit id="5e4047980f5ac3eb3127d3d68b5f254e9299a0fd" translate="yes" xml:space="preserve">
          <source>The constructor for all the singletons used to represent modules, distributions, authors, and bundles. If the object already exists, this method returns the object; otherwise, it calls the constructor.</source>
          <target state="translated">モジュール、ディストリビューション、作者、バンドルを表現するために使用されるすべてのシングルトンのコンストラクタ。オブジェクトが既に存在する場合、このメソッドはそのオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="392e17e9526fa6867e8438f1a219ca39e5568acc" translate="yes" xml:space="preserve">
          <source>The constructor must be passed a metadata structure.</source>
          <target state="translated">コンストラクタにはメタデータ構造体を渡さなければなりません。</target>
        </trans-unit>
        <trans-unit id="a54cf785d15de998f3ac18ade864f218319b1ee1" translate="yes" xml:space="preserve">
          <source>The constructor of a generated class can be passed a list of</source>
          <target state="translated">生成されたクラスのコンストラクタには</target>
        </trans-unit>
        <trans-unit id="bb7df7aab984a9c0e691c8f805de279350cf56e0" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;Digest::MD5&lt;/code&gt; object which encapsulate the state of the MD5 message-digest algorithm.</source>
          <target state="translated">コンストラクターは、MD5メッセージダイジェストアルゴリズムの状態をカプセル化する新しい &lt;code&gt;Digest::MD5&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2e6b2441df01bfc969fd7dfde15484f966dcaf52" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; object. If &lt;a href=&quot;../../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is not installed, returns undef.</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; オブジェクトを返します。&lt;a href=&quot;../../term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt;がインストールされていない場合は、undefを返します。</target>
        </trans-unit>
        <trans-unit id="4747d0a8e21ed88de854df16a2a22a83e805b50c" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; object. If &lt;a href=&quot;Term::ANSIColor&quot;&gt;Term::ANSIColor&lt;/a&gt; is not installed, returns undef.</source>
          <target state="translated">コンストラクターは、新しい &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; オブジェクトを返します。&lt;a href=&quot;Term::ANSIColor&quot;&gt;Term :: ANSIColor&lt;/a&gt;がインストールされていない場合、undefを返します。</target>
        </trans-unit>
        <trans-unit id="972195b07373ba2fa384173c37fb399dc7626fb1" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console::Session&lt;/code&gt; object.</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Formatter::Console::Session&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="64d08d3b354e3667ab5da2f82eaec44dd6d25ea5" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; object. If a &lt;a href=&quot;../harness&quot;&gt;TAP::Harness&lt;/a&gt; is created with no &lt;code&gt;formatter&lt;/code&gt; a &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; is automatically created. If any of the following options were given to TAP::Harness-&amp;gt;new they well be passed to this constructor which accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; オブジェクトを返します。場合&lt;a href=&quot;../harness&quot;&gt;TAP ::ハーネスは&lt;/a&gt;一切使用して作成されていない &lt;code&gt;formatter&lt;/code&gt; &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; 自動的に作成されます。次のオプションのいずれかがTAP :: Harness-&amp;gt; newに指定されている場合、これらのオプションは、許可されたキーがあるオプションのハッシュ参照を受け入れるこのコンストラクタに渡されます。</target>
        </trans-unit>
        <trans-unit id="8909e70f1c9cdb1bc8623d8b0a2d889cffc98a88" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; object. If a &lt;a href=&quot;TAP::Harness&quot;&gt;TAP::Harness&lt;/a&gt; is created with no &lt;code&gt;formatter&lt;/code&gt; a &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; is automatically created. If any of the following options were given to TAP::Harness-&amp;gt;new they well be passed to this constructor which accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">コンストラクターは、新しい &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; オブジェクトを返します。場合&lt;a href=&quot;TAP::Harness&quot;&gt;TAP ::ハーネスは&lt;/a&gt;一切使用して作成されていない &lt;code&gt;formatter&lt;/code&gt; &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; 自動的に作成されます。次のオプションのいずれかがTAP :: Harness-&amp;gt; newに指定された場合、それらは、許可されたキーが次のオプションのハッシュ参照を受け入れるこのコンストラクターに渡されます。</target>
        </trans-unit>
        <trans-unit id="cdf8ec5d8f9e8688b8b1e013d18928a0b5fdbbeb" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Harness&lt;/code&gt; object. It accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">コンストラクターは新しい &lt;code&gt;TAP::Harness&lt;/code&gt; オブジェクトを返します。許可されるキーが次のオプションのハッシュ参照を受け入れます。</target>
        </trans-unit>
        <trans-unit id="093c7ac00d4bfb4c1a8deee532d1b8ad2334e8c0" translate="yes" xml:space="preserve">
          <source>The constructor returns some object that encapsulate the state of the message-digest algorithm. You can add data to the object and finally ask for the digest. The &quot;XXX&quot; should of course be replaced by the proper name of the digest algorithm you want to use.</source>
          <target state="translated">コンストラクタは、メッセージダイジェストアルゴリズムの状態をカプセル化したオブジェクトを返します。このオブジェクトにデータを追加して、最後にダイジェストを求めることができます。もちろん、&quot;XXX &quot;は使用したいダイジェストアルゴリズムの適切な名前に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="b8c0174cc6aa4e80ad4122d0657361b0e191a979" translate="yes" xml:space="preserve">
          <source>The constructor should be passed a valid metadata structure but invalid structures are accepted. If no meta-spec version is provided, version 1.0 will be assumed.</source>
          <target state="translated">コンストラクタには有効なメタデータ構造体を渡す必要がありますが、無効な構造体も受け入れられます。メタ仕様のバージョンが指定されていない場合は、バージョン 1.0 が想定されます。</target>
        </trans-unit>
        <trans-unit id="cb4929a7c6855e45789fbb16fa26a8399b54ccaf" translate="yes" xml:space="preserve">
          <source>The content from the __DATA__ block is not filtered. This is a serious limitation, e.g. for the &lt;a href=&quot;switch&quot;&gt;Switch&lt;/a&gt; module. See &lt;a href=&quot;http://search.cpan.org/perldoc?Switch#LIMITATIONS&quot;&gt;http://search.cpan.org/perldoc?Switch#LIMITATIONS&lt;/a&gt; for more.</source>
          <target state="translated">__DATA__ブロックのコンテンツはフィルタリングされません。これは重大な制限です。たとえば、&lt;a href=&quot;switch&quot;&gt;スイッチ&lt;/a&gt;モジュールの場合です。詳細については、&lt;a href=&quot;http://search.cpan.org/perldoc?Switch#LIMITATIONS&quot;&gt;http：//search.cpan.org/perldoc？Switch＃LIMITATIONS&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f4ebdab724a22632fec3a1d054882b1bc817c7d6" translate="yes" xml:space="preserve">
          <source>The content of the here doc is treated just as it would be if the string were embedded in backticks. Thus the content is interpolated as though it were double quoted and then executed via the shell, with the results of the execution returned.</source>
          <target state="translated">here doc の内容は、文字列が backticks に埋め込まれている場合と同じように扱われます。したがって、内容はあたかもダブルクォートされたかのように補間され、シェル経由で実行され、実行結果が返されます。</target>
        </trans-unit>
        <trans-unit id="2c33213d12b4d00abe49d77a5bff9aee654312d3" translate="yes" xml:space="preserve">
          <source>The content of the text chunk in the buffer is commonly exactly one complete line of input, up to and including a newline terminator, but there are situations where it is otherwise. The octets of the buffer may be intended to be interpreted as either UTF-8 or Latin-1. The function &lt;a href=&quot;#lex_bufutf8&quot;&gt;&quot;lex_bufutf8&quot;&lt;/a&gt; tells you which. Do not use the &lt;code&gt;SvUTF8&lt;/code&gt; flag on this scalar, which may disagree with it.</source>
          <target state="translated">バッファ内のテキストチャンクの内容は、通常、改行ターミネータまでの完全な1行の入力ですが、そうでない場合もあります。バッファのオクテットは、UTF-8またはLatin-1のいずれかとして解釈されることを意図している場合があります。関数&lt;a href=&quot;#lex_bufutf8&quot;&gt;「lex_bufutf8」&lt;/a&gt;はどちらかを示します。このスカラーに &lt;code&gt;SvUTF8&lt;/code&gt; フラグを使用しないでください。これと一致しない場合があります。</target>
        </trans-unit>
        <trans-unit id="6af50a9986dd8fc345d5bd2a482a8608eafdf212" translate="yes" xml:space="preserve">
          <source>The content of the text chunk in the buffer is commonly exactly one complete line of input, up to and including a newline terminator, but there are situations where it is otherwise. The octets of the buffer may be intended to be interpreted as either UTF-8 or Latin-1. The function &lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt; tells you which. Do not use the &lt;code&gt;SvUTF8&lt;/code&gt; flag on this scalar, which may disagree with it.</source>
          <target state="translated">バッファ内のテキストチャンクの内容は、通常、改行ターミネータまでの完全な1行の入力ですが、それ以外の場合もあります。バッファのオクテットは、UTF-8またはLatin-1として解釈されるように意図されている場合があります。関数&lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt;はどちらかを示します。このスカラーで &lt;code&gt;SvUTF8&lt;/code&gt; フラグを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3c50b9c6cd39ffa60fa752e0357613216ec7e1d3" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;$/&lt;/code&gt; are used to determine what constitutes a line terminator.</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; の内容は、行末記号を構成するものを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="09777bcf55808641ba4d5a5b61fa0d9ce1740b32" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;$@&lt;/code&gt; immediately after autodie triggered an exception. This may be useful when dealing with modules such as &lt;a href=&quot;Text::Balanced&quot;&gt;Text::Balanced&lt;/a&gt; that set (but do not throw) &lt;code&gt;$@&lt;/code&gt; on error.</source>
          <target state="translated">自動ダイ直後の &lt;code&gt;$@&lt;/code&gt; の内容が例外をトリガーしました。これは、エラー時に &lt;code&gt;$@&lt;/code&gt; を設定する（ただしスローしない）&lt;a href=&quot;Text::Balanced&quot;&gt;Text :: Balanced&lt;/a&gt;などのモジュールを処理する場合に役立つことがあります。</target>
        </trans-unit>
        <trans-unit id="e7ca5978cb2d9772e7d9f41db4210fa03ba32d12" translate="yes" xml:space="preserve">
          <source>The contents of SVs may be printed using the &lt;code&gt;SVf&lt;/code&gt; format, like so:</source>
          <target state="translated">SVの内容は、次のように &lt;code&gt;SVf&lt;/code&gt; 形式を使用して印刷できます。</target>
        </trans-unit>
        <trans-unit id="18d18ed7c7a8db27a58a80fd58640cc3bbfe1bce" translate="yes" xml:space="preserve">
          <source>The contents of the Comment header field, if present. If no comment is present, the value will be undef. Note this is different from a zero length comment, which will return an empty string.</source>
          <target state="translated">Commentヘッダーフィールドの内容(存在する場合)。コメントが存在しない場合、値は undef となります。これは、空の文字列を返すゼロ長のコメントとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f67589a8aeaaf0494de7c02234d42e486e771e87" translate="yes" xml:space="preserve">
          <source>The contents of the Name header field, if present. If no name is present, the value will be undef. Note this is different from a zero length name, which will return an empty string.</source>
          <target state="translated">Nameヘッダーフィールドの内容(存在する場合)。名前が存在しない場合、値は undef となります。これは、空の文字列を返すゼロ長の名前とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9456b1413183ce2a7cacbf69ac958ec33df9e078" translate="yes" xml:space="preserve">
          <source>The contents of the above &quot;=begin :yetanotherformat&quot; ... &quot;=end :yetanotherformat&quot; region</source>
          <target state="translated">上記の&quot;=begin :yetanotherformat &quot;の内容 ...&quot;=end :yetanotherformat&quot; リージョン</target>
        </trans-unit>
        <trans-unit id="7bdc8b3d3c8ea3698e851bea6c870ef22be74842" translate="yes" xml:space="preserve">
          <source>The contents of the string are split into arguments using a call to &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; . As with &lt;code&gt;GetOptionsFromArray&lt;/code&gt; , the global &lt;code&gt;@ARGV&lt;/code&gt; is not touched.</source>
          <target state="translated">文字列の内容は、 &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; 呼び出しを使用して引数に分割されます。 &lt;code&gt;GetOptionsFromArray&lt;/code&gt; と同様に、グローバル &lt;code&gt;@ARGV&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="07cf397badd80566fee8d86ba0e84ac06f7a748f" translate="yes" xml:space="preserve">
          <source>The contents of the string are split into arguments using a call to &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt;. As with &lt;code&gt;GetOptionsFromArray&lt;/code&gt;, the global &lt;code&gt;@ARGV&lt;/code&gt; is not touched.</source>
          <target state="translated">文字列の内容は、 &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; 呼び出しを使用して引数に分割されます。 &lt;code&gt;GetOptionsFromArray&lt;/code&gt; と同様に、グローバル &lt;code&gt;@ARGV&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="ee0a191734836657a10b5b7b1f37002c95e61a13" translate="yes" xml:space="preserve">
          <source>The contents of the string changes, but not the nature of the string. Perl doesn't know any more after the call than before that the contents of the string indicates the affirmative.</source>
          <target state="translated">文字列の内容は変わりますが、文字列の性質は変わりません。文字列の内容が肯定を示していることは、呼び出し前よりも呼び出し後の方がPerlにはわかりません。</target>
        </trans-unit>
        <trans-unit id="fa23695f3fe9b71ce5ed23d56ccd05be2c1e1b36" translate="yes" xml:space="preserve">
          <source>The contents should be an integer; different bits of it are used for different pragmatic flags. Here's an example:</source>
          <target state="translated">その内容は整数でなければなりません。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="29b067c45824f7dfd004988f65509a605101a269" translate="yes" xml:space="preserve">
          <source>The context (void, scalar or list) for the return value(s) for &lt;code&gt;-&amp;gt;join()&lt;/code&gt; is determined at the time of thread creation.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;join()&lt;/code&gt; の戻り値のコンテキスト（ボイド、スカラー、またはリスト）は、スレッドの作成時に決定されます。</target>
        </trans-unit>
        <trans-unit id="2981bb07b7171fe17187abbda366aca2482181b3" translate="yes" xml:space="preserve">
          <source>The context in which the subroutine was called by autodie; usually the same as the context in which you called the autodying subroutine. This can be 'list', 'scalar', or undefined (unknown). It will never be 'void', as &lt;code&gt;autodie&lt;/code&gt; always captures the return value in one way or another.</source>
          <target state="translated">サブルーチンがautodieによって呼び出されたコンテキスト。通常、自動染色サブルーチンを呼び出したコンテキストと同じです。これは、「リスト」、「スカラー」、または未定義（不明）の場合があります。 &lt;code&gt;autodie&lt;/code&gt; は常に何らかの方法で戻り値をキャプチャするため、「void」になることはありません。</target>
        </trans-unit>
        <trans-unit id="ecdacee8e16379859c5cc73f585093cfac3b0ac5" translate="yes" xml:space="preserve">
          <source>The context object has API compatible implementations of the following methods:</source>
          <target state="translated">コンテキストオブジェクトは、以下のメソッドのAPI互換性のある実装を持っています。</target>
        </trans-unit>
        <trans-unit id="1d48ce1ec215b9e3fdc0488fca135ada53527334" translate="yes" xml:space="preserve">
          <source>The context object is the primary interface for authors of testing tools written with &lt;a href=&quot;test2&quot;&gt;Test2&lt;/a&gt;. The context object represents the context in which a test takes place (File and Line Number), and provides a quick way to generate events from that context. The context object also takes care of sending events to the correct &lt;a href=&quot;Test2::Hub&quot;&gt;Test2::Hub&lt;/a&gt; instance.</source>
          <target state="translated">コンテキストオブジェクトは、&lt;a href=&quot;test2&quot;&gt;Test2で&lt;/a&gt;記述されたテストツールの作成者のための主要なインターフェイスです。コンテキストオブジェクトは、テストが行​​われるコンテキスト（ファイルと行番号）を表し、そのコンテキストからイベントを生成するための迅速な方法を提供します。コンテキストオブジェクトは、正しい&lt;a href=&quot;Test2::Hub&quot;&gt;Test2 :: Hub&lt;/a&gt;インスタンスへのイベントの送信も処理します。</target>
        </trans-unit>
        <trans-unit id="cafef0e58c037c46bb556fc0f1a1471183c9edb3" translate="yes" xml:space="preserve">
          <source>The context type may also be used as the</source>
          <target state="translated">コンテキスト型は</target>
        </trans-unit>
        <trans-unit id="67c74c2a8a5b26d0759477b6c197cf9395cba8a0" translate="yes" xml:space="preserve">
          <source>The context-free version of Perl_warner is called Perl_warner_nocontext, and does not take the extra argument. Instead it does &lt;code&gt;dTHX;&lt;/code&gt; to get the context from thread-local storage. We &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; so that extensions get source compatibility at the expense of performance. (Passing an arg is cheaper than grabbing it from thread-local storage.)</source>
          <target state="translated">Perl_warnerの文脈自由バージョンはPerl_warner_nocontextと呼ばれ、余分な引数を取りません。代わりに、 &lt;code&gt;dTHX;&lt;/code&gt; スレッドローカルストレージからコンテキストを取得します。拡張機能がパフォーマンスを犠牲にしてソースの互換性を取得できるように、 &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; を#defineします。（引数を渡すことは、スレッドローカルストレージから取得するよりも安価です。）</target>
        </trans-unit>
        <trans-unit id="cd3e46d3e11cb302e5746c299ddd22b0f06326e3" translate="yes" xml:space="preserve">
          <source>The context-free version of Perl_warner is called Perl_warner_nocontext, and does not take the extra argument. Instead it does dTHX; to get the context from thread-local storage. We &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; so that extensions get source compatibility at the expense of performance. (Passing an arg is cheaper than grabbing it from thread-local storage.)</source>
          <target state="translated">Perl_warnerのコンテキストフリーバージョンはPerl_warner_nocontextと呼ばれ、追加の引数を取りません。代わりに、dTHXを行います。スレッドローカルストレージからコンテキストを取得します。拡張機能がパフォーマンスを犠牲にしてソース互換性を取得できるように、 &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; を定義します。（argを渡す方が、スレッドローカルストレージから取得するよりも安価です。）</target>
        </trans-unit>
        <trans-unit id="427dbaaec2be0f9303d86d3fada6d103291e20da" translate="yes" xml:space="preserve">
          <source>The contexts where no warnings or errors are raised are:</source>
          <target state="translated">警告やエラーが発生しないコンテキストは、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a306525389293789c4d3b564d2695ad27f640911" translate="yes" xml:space="preserve">
          <source>The conversion from Perl to C is left as an exercise to the reader, but the prototype would be:</source>
          <target state="translated">PerlからCへの変換は、読者には演習として残していますが、プロトタイプはそうなるでしょう。</target>
        </trans-unit>
        <trans-unit id="5dab7a329fdfbc3426218724b9a43e87edffc6ee" translate="yes" xml:space="preserve">
          <source>The copy constructor is called only before a call to a function declared to implement a mutator, for example, if &lt;code&gt;++$b;&lt;/code&gt; in the code above is effected via a method declared for key &lt;code&gt;'++'&lt;/code&gt; (or 'nomethod', passed &lt;code&gt;'++'&lt;/code&gt; as the fourth argument) or, by autogeneration, &lt;code&gt;'+='&lt;/code&gt; . It is not called if the increment operation is effected by a call to the method for &lt;code&gt;'+'&lt;/code&gt; since, in the equivalent code,</source>
          <target state="translated">コピーコンストラクターは、たとえば &lt;code&gt;++$b;&lt;/code&gt; 場合など、ミューテーターを実装するように宣言された関数の呼び出しの前にのみ呼び出されます。上記のコードでは、キー &lt;code&gt;'++'&lt;/code&gt; （または 'nomethod'、4番目の引数として &lt;code&gt;'++'&lt;/code&gt; が渡された）に対して宣言されたメソッド、または自動生成によって &lt;code&gt;'+='&lt;/code&gt; が影響を受けます。同等のコードでは、 &lt;code&gt;'+'&lt;/code&gt; メソッドの呼び出しによってインクリメント操作が影響を受ける場合は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="1a338324ec1f9edaef696d6d917c941261b8a116" translate="yes" xml:space="preserve">
          <source>The copy constructor is called only before a call to a function declared to implement a mutator, for example, if &lt;code&gt;++$b;&lt;/code&gt; in the code above is effected via a method declared for key &lt;code&gt;'++'&lt;/code&gt; (or 'nomethod', passed &lt;code&gt;'++'&lt;/code&gt; as the fourth argument) or, by autogeneration, &lt;code&gt;'+='&lt;/code&gt;. It is not called if the increment operation is effected by a call to the method for &lt;code&gt;'+'&lt;/code&gt; since, in the equivalent code,</source>
          <target state="translated">コピーコンストラクターは、ミューテーターを実装するように宣言された関数を呼び出す前にのみ呼び出され &lt;code&gt;++$b;&lt;/code&gt; たとえば、++ $ bの場合です。上記のコードでは、キー &lt;code&gt;'++'&lt;/code&gt; （または「nomethod」、4番目の引数として &lt;code&gt;'++'&lt;/code&gt; を渡した）に対して宣言されたメソッドを介して、または自動生成によって &lt;code&gt;'+='&lt;/code&gt; 介して実行されます。同等のコードでは、 &lt;code&gt;'+'&lt;/code&gt; メソッドの呼び出しによってインクリメント操作が実行される場合は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ed73a5b2044d7fb703c52c07bf589cfde908abd5" translate="yes" xml:space="preserve">
          <source>The copy constructor is not called if Perl determines that it is unnecessary because there is no other reference to the data being modified.</source>
          <target state="translated">コピーコンストラクタは、変更されるデータへの参照が他にないため、Perl が不要と判断した場合には呼び出されません。</target>
        </trans-unit>
        <trans-unit id="535c9ed5919c829adefa54d7a3ea16590ff263e1" translate="yes" xml:space="preserve">
          <source>The core &lt;a href=&quot;Devel::Peek&quot;&gt;Devel::Peek&lt;/a&gt; module lets us examine SVs from a Perl program. Let's see, for instance, how Perl treats the constant &lt;code&gt;&quot;hello&quot;&lt;/code&gt;.</source>
          <target state="translated">コアの&lt;a href=&quot;Devel::Peek&quot;&gt;Devel :: Peek&lt;/a&gt;モジュールを使用すると、PerlプログラムからSVを調べることができます。たとえば、Perlが定数 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; どのように扱うかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="bc11db58db7976be6cbb0391f46874d6c6c0bdfd" translate="yes" xml:space="preserve">
          <source>The core &lt;a href=&quot;HTTP::Tiny&quot;&gt;HTTP::Tiny&lt;/a&gt; module can fetch web resources and give their content back to you as a string:</source>
          <target state="translated">コア&lt;a href=&quot;HTTP::Tiny&quot;&gt;HTTP :: Tiny&lt;/a&gt;モジュールは、Webリソースをフェッチし、そのコンテンツを文字列として返すことができます。</target>
        </trans-unit>
        <trans-unit id="dd210b745dfa94e566cd092061cca3c4c3e619ac" translate="yes" xml:space="preserve">
          <source>The core &lt;a href=&quot;devel/peek&quot;&gt;Devel::Peek&lt;/a&gt; module lets us examine SVs from a Perl program. Let's see, for instance, how Perl treats the constant &lt;code&gt;&quot;hello&quot;&lt;/code&gt; .</source>
          <target state="translated">コア&lt;a href=&quot;devel/peek&quot;&gt;Devel :: Peek&lt;/a&gt;モジュールを使用すると、PerlプログラムからSVを調べることができます。たとえば、Perlが定数 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; をどのように扱うかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="216872d0879be12be32ab51a2f74dd9e0b301e2c" translate="yes" xml:space="preserve">
          <source>The core development team (known as the Perl Porters) are a group of highly altruistic individuals committed to producing better software for free than you could hope to purchase for money. You may snoop on pending developments via the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f&quot;&gt;archives&lt;/a&gt; or read the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html&quot;&gt;faq&lt;/a&gt;, or you can subscribe to the mailing list by sending perl5-porters-subscribe@perl.org a subscription request (an empty message with no subject is fine).</source>
          <target state="translated">コア開発チーム（Perl Portersとして知られています）は、お金で購入するよりも優れたソフトウェアを無料で生産することに熱心な個人のグループです。あなたは経由して、保留中の開発をスヌーピングも&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f&quot;&gt;アーカイブ&lt;/a&gt;または読み取り&lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html&quot;&gt;よくある質問を&lt;/a&gt;、またはあなたがperl5-porters-subscribe@perl.orgサブスクリプション要求（件名なしで空のメッセージで結構です）を送信することにより、メーリングリストを購読することができます。</target>
        </trans-unit>
        <trans-unit id="722caaf3f888051207be247f57e2eb71f8ea20ba" translate="yes" xml:space="preserve">
          <source>The core development team (known as the Perl Porters) are a group of highly altruistic individuals committed to producing better software for free than you could hope to purchase for money. You may snoop on pending developments via the &lt;a href=&quot;http://www.nntp.perl.org/group/perl.perl5.porters/&quot;&gt;archives&lt;/a&gt; or you can subscribe to the mailing list by sending perl5-porters-subscribe@perl.org a subscription request (an empty message with no subject is fine).</source>
          <target state="translated">コア開発チーム（Perl Portersとして知られている）は、お金で購入したいと思うよりも優れたソフトウェアを無料で作成することに取り組んでいる非常に利他的な個人のグループです。&lt;a href=&quot;http://www.nntp.perl.org/group/perl.perl5.porters/&quot;&gt;アーカイブ&lt;/a&gt;を介して保留中の開発をスヌープするか、perl5-porters-subscribe @ perl.orgにサブスクリプションリクエストを送信してメーリングリストにサブスクライブできます（件名のない空のメッセージで問題ありません）。</target>
        </trans-unit>
        <trans-unit id="0cd6f3115d2d6dbe91a070c10c729356bd227008" translate="yes" xml:space="preserve">
          <source>The core distribution can now run its regression tests in parallel on Unix-like platforms. Instead of running &lt;code&gt;make test&lt;/code&gt; , set &lt;code&gt;TEST_JOBS&lt;/code&gt; in your environment to the number of tests to run in parallel, and run &lt;code&gt;make test_harness&lt;/code&gt; . On a Bourne-like shell, this can be done as</source>
          <target state="translated">コアディストリビューションは、Unixのようなプラットフォームで回帰テストを並行して実行できるようになりました。 &lt;code&gt;make test&lt;/code&gt; を実行する代わりに、環境内の &lt;code&gt;TEST_JOBS&lt;/code&gt; を並行して実行するテストの数に設定し、 &lt;code&gt;make test_harness&lt;/code&gt; を実行します。ボーンのようなシェルでは、これは次のように行うことができます</target>
        </trans-unit>
        <trans-unit id="b674b66d3912143b8c38b5c16cba55bf33d927a4" translate="yes" xml:space="preserve">
          <source>The core distribution can now run its regression tests in parallel on Unix-like platforms. Instead of running &lt;code&gt;make test&lt;/code&gt;, set &lt;code&gt;TEST_JOBS&lt;/code&gt; in your environment to the number of tests to run in parallel, and run &lt;code&gt;make test_harness&lt;/code&gt;. On a Bourne-like shell, this can be done as</source>
          <target state="translated">コアディストリビューションは、Unixライクなプラットフォームで回帰テストを並行して実行できるようになりました。代わりに、実行中の &lt;code&gt;make test&lt;/code&gt; 、セット &lt;code&gt;TEST_JOBS&lt;/code&gt; を並列で実行するテストの数、および実行に使用している環境では &lt;code&gt;make test_harness&lt;/code&gt; 。ボーンのようなシェルでは、これは次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="a6cc3805e3a5e355489c3ee53c0ef93bf5066f34" translate="yes" xml:space="preserve">
          <source>The core provides a wrapper program,</source>
          <target state="translated">コアはラッパープログラムを提供します。</target>
        </trans-unit>
        <trans-unit id="e662bc8801eef788dff3d6316ec77e7ad811db79" translate="yes" xml:space="preserve">
          <source>The core uses the same testing style as the rest of Perl, a simple &quot;ok/not ok&quot; run through Test::Harness, but there are a few special considerations.</source>
          <target state="translated">コアはPerlの他の部分と同じテストスタイルを使用しており、Test::Harnessを通して単純な &quot;OK/NG &quot;を実行しますが、いくつかの特別な考慮事項があります。</target>
        </trans-unit>
        <trans-unit id="a3ac8ff08d630fcfeea5350e81e0c2b799df3c84" translate="yes" xml:space="preserve">
          <source>The corpse of a &lt;b&gt;process&lt;/b&gt;, in the form of a file left in the &lt;b&gt;working directory&lt;/b&gt; of the process, usually as a result of certain kinds of fatal errors.</source>
          <target state="translated">通常、特定の種類の致命的なエラーの結果として、プロセスの&lt;b&gt;作業ディレクトリ&lt;/b&gt;に残されたファイルの形式での&lt;b&gt;プロセス&lt;/b&gt;の死体。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ad72ec528dbf7e40ea844e46e3a129f3b3eadb6f" translate="yes" xml:space="preserve">
          <source>The correct code is &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; .</source>
          <target state="translated">正しいコードは &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d267e23c37d16b49140100273b7c13b82e17e524" translate="yes" xml:space="preserve">
          <source>The correct code is &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt;.</source>
          <target state="translated">正しいコードは &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7eb7322d9e711d10a989215f61754b35fdcb57a5" translate="yes" xml:space="preserve">
          <source>The correct procedure, then, is to use &lt;code&gt;newRV_noinc&lt;/code&gt; instead of &lt;code&gt;newRV_inc&lt;/code&gt; . Then, if and when the last reference is destroyed, the reference count of the SV will go to zero and it will be destroyed, stopping any memory leak.</source>
          <target state="translated">したがって、正しい手順は、 &lt;code&gt;newRV_inc&lt;/code&gt; の代わりに &lt;code&gt;newRV_noinc&lt;/code&gt; を使用することです。次に、最後の参照が破棄されると、SVの参照カウントはゼロになり、破棄され、メモリリークが停止します。</target>
        </trans-unit>
        <trans-unit id="e90480b056b891e1197a3bfca2f65f9341469925" translate="yes" xml:space="preserve">
          <source>The correspondence between OPs and</source>
          <target state="translated">OPの対応と</target>
        </trans-unit>
        <trans-unit id="3e632bae0f91b7fe9b42695b7f4eb9541547d7ab" translate="yes" xml:space="preserve">
          <source>The corresponding bright foreground color attributes (colors 8 to 15) are:</source>
          <target state="translated">対応する明るい前景色の属性(色8〜15)は</target>
        </trans-unit>
        <trans-unit id="15d3a8f91abd0b678be46a5c74457eb9c1a22a59" translate="yes" xml:space="preserve">
          <source>The corresponding command to get the current value of &lt;code&gt;$version&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;$version&lt;/code&gt; 現在の値を取得するための対応するコマンドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="05b1215b3085d02b291dbd96e47ab01de8dfb44a" translate="yes" xml:space="preserve">
          <source>The corresponding values are interpreted as regular expressions. The &lt;code&gt;distribution&lt;/code&gt; related one will be matched against the canonical distribution name, e.g. &quot;AUTHOR/Foo-Bar-3.14.tar.gz&quot;.</source>
          <target state="translated">対応する値は正規表現として解釈されます。 &lt;code&gt;distribution&lt;/code&gt; 関連する1つは、標準的なディストリビューション名、例えば「AUTHOR /フー・バー-3.14.tar.gz」と照合されます。</target>
        </trans-unit>
        <trans-unit id="128893376b086988df0b6fe82266dcff7ded3c2c" translate="yes" xml:space="preserve">
          <source>The corresponding values are references to functions which take three arguments: the first one is the</source>
          <target state="translated">対応する値は、3つの引数を取る関数への参照です。</target>
        </trans-unit>
        <trans-unit id="6d3c7b629f0ebabb7666a1418d689e5fcefefd4a" translate="yes" xml:space="preserve">
          <source>The count of the saved lines in the history (assuming &lt;code&gt;HistFile&lt;/code&gt; above).</source>
          <target state="translated">履歴に保存された行の数（上記の &lt;code&gt;HistFile&lt;/code&gt; を想定）。</target>
        </trans-unit>
        <trans-unit id="8a76e9ed23620e2d0138b893f98a44b589dac036" translate="yes" xml:space="preserve">
          <source>The cpd tool detects cut-and-paste coding. If one instance of the cut-and-pasted code changes, all the other spots should probably be changed, too. Therefore such code should probably be turned into a subroutine or a macro.</source>
          <target state="translated">cpd ツールは、カットアンドペーストされたコードを検出します。カットアンドペーストされたコードの1つのインスタンスが変更された場合、他のすべてのスポットも変更されるはずです。そのため、そのようなコードはサブルーチンやマクロにしておくべきでしょう。</target>
        </trans-unit>
        <trans-unit id="3e999a3fce2098896facdee408ae939b810f6fc0" translate="yes" xml:space="preserve">
          <source>The cperl PERL_PERTURB_KEYS_TOP hash strategy has a known problem with restricted hashes.</source>
          <target state="translated">cperl PERL_PERTURB_KEYS_TOP ハッシュ戦略には、制限付きハッシュの既知の問題があります。</target>
        </trans-unit>
        <trans-unit id="4315b91912980da8ee0d1d0ed73982372319566a" translate="yes" xml:space="preserve">
          <source>The critical thing when considering performance is to remember there is no such thing as a &lt;code&gt;Golden Bullet&lt;/code&gt; , which is why there are no rules, only guidelines.</source>
          <target state="translated">パフォーマンスを検討する際に重要なことは、 &lt;code&gt;Golden Bullet&lt;/code&gt; などは存在しないことです。そのため、ルールはなく、ガイドラインのみです。</target>
        </trans-unit>
        <trans-unit id="fe5e8a5c2d99ce7c51902edfccff2bd041c5e28d" translate="yes" xml:space="preserve">
          <source>The critical thing when considering performance is to remember there is no such thing as a &lt;code&gt;Golden Bullet&lt;/code&gt;, which is why there are no rules, only guidelines.</source>
          <target state="translated">パフォーマンスを検討する際に重要なことは、 &lt;code&gt;Golden Bullet&lt;/code&gt; ようなものは存在しないことを覚えておくことです。そのため、ルールはなく、ガイドラインのみが存在します。</target>
        </trans-unit>
        <trans-unit id="2b2f6d378553efd3b9ab7bab3a4069e081f7b24e" translate="yes" xml:space="preserve">
          <source>The crucial thing to understand about the Windows environment is that the command line you type in is processed twice before Perl sees it. First, your command shell (usually CMD.EXE) preprocesses the command line, to handle redirection, environment variable expansion, and location of the executable to run. Then, the perl executable splits the remaining command line into individual arguments, using the C runtime library upon which Perl was built.</source>
          <target state="translated">Windows 環境について理解しておくべき重要なことは、入力されたコマンドラインは Perl がそれを見る前に 2 回処理されるということです。最初に、コマンドシェル(通常は CMD.EXE)がコマンドラインを前処理し、リダイレクション、環境変数の展開、実行可能な実行ファイルの場所を処理します。次に、Perl の実行ファイルは、Perl がビルドされた C ランタイムライブラリを使用して、残りのコマンドラインを個々の引数に分割します。</target>
        </trans-unit>
        <trans-unit id="1bc259f8a74780b8f0344bb67ea81414fbf6762f" translate="yes" xml:space="preserve">
          <source>The crypt package distributed with Cygwin is a Linux compatible 56-bit DES crypt port by Corinna Vinschen.</source>
          <target state="translated">Cygwinで配布されているcryptパッケージは、Corinna VinschenによるLinux互換の56ビットDES暗号ポートです。</target>
        </trans-unit>
        <trans-unit id="39208a8b75f909c397f1ded48c8402dc3fb7d1f8" translate="yes" xml:space="preserve">
          <source>The crypt() function is unimplemented due to excessive paranoia.</source>
          <target state="translated">crypt()関数は過剰なパラノイアのため未実装です。</target>
        </trans-unit>
        <trans-unit id="831281b1eb1b6cf65cdf498d326c123b4d2ac980" translate="yes" xml:space="preserve">
          <source>The csh_glob() function can also be exported, but you should not use it directly unless you really know what you are doing. It splits the pattern into words and feeds each one to bsd_glob(). Perl's own glob() function uses this internally.</source>
          <target state="translated">csh_glob()関数はエクスポートすることもできますが、本当に何をしているのかわからない限り、直接使うべきではありません。これはパターンを単語に分割し、それぞれを bsd_glob()に送ります。Perl 自身の glob()関数はこれを内部的に使用しています。</target>
        </trans-unit>
        <trans-unit id="bb0c5fc2762311ff2f0c2ca9c51463e63c575d45" translate="yes" xml:space="preserve">
          <source>The ctime() function provides a way of getting at the scalar sense of the original CORE::localtime() function.</source>
          <target state="translated">ctime()関数は、オリジナルの CORE::localtime()関数のスカラーセンスを取得する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="cc603efa123dedf5ee9218533c5f2218c02b0847" translate="yes" xml:space="preserve">
          <source>The cube root [C99].</source>
          <target state="translated">立方根[C99]。</target>
        </trans-unit>
        <trans-unit id="64bb5be49b5cecef1e72ffa347e55d8d7f71bf40" translate="yes" xml:space="preserve">
          <source>The current Unicode definition of a Word Boundary matches between every white space character. Perl tailors this, starting in version 5.24, to generally not break up spans of white space, just as plain &lt;code&gt;\b&lt;/code&gt; has always functioned. This allows &lt;code&gt;\b{wb}&lt;/code&gt; to be a drop-in replacement for &lt;code&gt;\b&lt;/code&gt;, but with generally better results for natural language processing. (The exception to this tailoring is when a span of white space is immediately followed by something like U+0303, COMBINING TILDE. If the final space character in the span is a horizontal white space, it is broken out so that it attaches instead to the combining character. To be precise, if a span of white space that ends in a horizontal space has the character immediately following it have any of the Word Boundary property values &quot;Extend&quot;, &quot;Format&quot; or &quot;ZWJ&quot;, the boundary between the final horizontal space character and the rest of the span matches &lt;code&gt;\b{wb}&lt;/code&gt;. In all other cases the boundary between two white space characters matches &lt;code&gt;\B{wb}&lt;/code&gt;.)</source>
          <target state="translated">単語境界の現在のUnicode定義は、すべての空白文字間で一致します。 Perlは、バージョン5.24以降、プレーン &lt;code&gt;\b&lt;/code&gt; が常に機能していたように、通常、空白のスパンを分割しないようにこれを調整します。これが可能 &lt;code&gt;\b{wb}&lt;/code&gt; ドロップイン交換のためであると &lt;code&gt;\b&lt;/code&gt; 、ただし、一般的に自然言語処理の方が良い結果が得られます。 （この調整の例外は、空白のスパンの直後にU + 0303、COMBINING TILDEのようなものが続く場合です。スパンの最後のスペース文字が水平方向の空白である場合、代わりにに接続されるように分割されます。結合文字。正確には、水平方向のスペースで終わる空白のスパンの直後に文字がある場合、Word Boundaryプロパティ値「Extend」、「Format」、または「ZWJ」のいずれか、最後の水平方向のスペース文字と残りのスパンは &lt;code&gt;\b{wb}&lt;/code&gt; 一致します。他のすべての場合、2つの空白文字間の境界は &lt;code&gt;\B{wb}&lt;/code&gt; 一致します。）</target>
        </trans-unit>
        <trans-unit id="64523d7c78b273edb939e95b2a44e78339d21a0e" translate="yes" xml:space="preserve">
          <source>The current format name is stored in the variable &lt;code&gt;$~&lt;/code&gt; (&lt;code&gt;$FORMAT_NAME&lt;/code&gt; ), and the current top of form format name is in &lt;code&gt;$^&lt;/code&gt; (&lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; ). The current output page number is stored in &lt;code&gt;$%&lt;/code&gt; (&lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; ), and the number of lines on the page is in &lt;code&gt;$=&lt;/code&gt; (&lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; ). Whether to autoflush output on this handle is stored in &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ). The string output before each top of page (except the first) is stored in &lt;code&gt;$^L&lt;/code&gt; (&lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; ). These variables are set on a per-filehandle basis, so you'll need to select() into a different one to affect them:</source>
          <target state="translated">現在のフォーマット名は変数 &lt;code&gt;$~&lt;/code&gt; （ &lt;code&gt;$FORMAT_NAME&lt;/code&gt; ）に保存され、現在のフォームフォーマット名の先頭は &lt;code&gt;$^&lt;/code&gt; （ &lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; ）にあります。現在の出力ページ番号は &lt;code&gt;$%&lt;/code&gt; （ &lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; ）に格納され、ページの行数は &lt;code&gt;$=&lt;/code&gt; （ &lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; ）に格納されます。このハンドルの出力を自動フラッシュするかどうかは &lt;code&gt;$|&lt;/code&gt; 保存されます （ &lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ）。ページの先頭（最初を除く）の前に出力される文字列は、 &lt;code&gt;$^L&lt;/code&gt; （ &lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; ）。これらの変数はファイルハンドルごとに設定されるため、select（）を別の変数に変更して、それらに影響を与える必要があります。</target>
        </trans-unit>
        <trans-unit id="15997f5af8679b322c9a721da40c3667459ea331" translate="yes" xml:space="preserve">
          <source>The current format name is stored in the variable &lt;code&gt;$~&lt;/code&gt; (&lt;code&gt;$FORMAT_NAME&lt;/code&gt;), and the current top of form format name is in &lt;code&gt;$^&lt;/code&gt; (&lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt;). The current output page number is stored in &lt;code&gt;$%&lt;/code&gt; (&lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt;), and the number of lines on the page is in &lt;code&gt;$=&lt;/code&gt; (&lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt;). Whether to autoflush output on this handle is stored in &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt;). The string output before each top of page (except the first) is stored in &lt;code&gt;$^L&lt;/code&gt; (&lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt;). These variables are set on a per-filehandle basis, so you'll need to select() into a different one to affect them:</source>
          <target state="translated">現在のフォーマット名は変数 &lt;code&gt;$~&lt;/code&gt; （ &lt;code&gt;$FORMAT_NAME&lt;/code&gt; ）に格納され、フォームの現在の先頭のフォーマット名は &lt;code&gt;$^&lt;/code&gt; （ &lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; ）にあります。現在の出力ページ番号は &lt;code&gt;$%&lt;/code&gt; （ &lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; ）に格納され、ページの行数は &lt;code&gt;$=&lt;/code&gt; （ &lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; ）に格納されます。このハンドルの出力を自動フラッシュするかどうかは &lt;code&gt;$|&lt;/code&gt; 格納されます （ &lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ）。各ページ上部（最初のページを除く）の前に出力される文字列は、 &lt;code&gt;$^L&lt;/code&gt; （ &lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; ）に格納されます。）。これらの変数はファイルハンドルごとに設定されるため、それらに影響を与えるには、別の変数にselect（）する必要があります。</target>
        </trans-unit>
        <trans-unit id="bbbf873260d45973f075c0f7d16575580f2c6333" translate="yes" xml:space="preserve">
          <source>The current hierarchy is:</source>
          <target state="translated">現在の階層は</target>
        </trans-unit>
        <trans-unit id="824b38e0c77c472868114a17d1e97b269bb0ba11" translate="yes" xml:space="preserve">
          <source>The current implementation does not allow specification of the required version of the module.</source>
          <target state="translated">現在の実装では、モジュールの必要なバージョンを指定することはできません。</target>
        </trans-unit>
        <trans-unit id="282bec354d0f4d4b762dd47ad0eb5b6ecfd1f6ce" translate="yes" xml:space="preserve">
          <source>The current input line is normally in $_, not $0. It generally does not have the newline stripped. ($0 is the name of the program executed.) See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">現在の入力行は通常$ _ではなく$ _にあります。通常、改行は削除されません。（$ 0は実行されるプログラムの名前です。）&lt;a href=&quot;perlvar&quot;&gt;perlvarを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="18f618cc025364ce800e5f345611b3c1497a1ed6" translate="yes" xml:space="preserve">
          <source>The current kinds of Magic Virtual Tables are:</source>
          <target state="translated">現在のマジックバーチャルテーブルの種類は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5c4fde69768c885a1c05aaf0e69e2380f88e2b66" translate="yes" xml:space="preserve">
          <source>The current leading implementation of Perl 6, Rakudo, released a &quot;useful, usable, 'early adopter'&quot; distribution of Perl 6 (called Rakudo Star) in July of 2010. Please see &lt;a href=&quot;http://rakudo.org/&quot;&gt;http://rakudo.org/&lt;/a&gt; for more information.</source>
          <target state="translated">Perl 6の現在の主要な実装であるRakudoは、2010年7月にPerl 6（Rakudo Starと呼ばれる）の「便利で使用可能な「早期導入者」」ディストリビューションをリリースしました。詳細については、&lt;a href=&quot;http://rakudo.org/&quot;&gt;http：//rakudo.org/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ee5778fbc1ab8fe240410952dd5b9eaf045d059" translate="yes" xml:space="preserve">
          <source>The current line number.</source>
          <target state="translated">現在の行番号です。</target>
        </trans-unit>
        <trans-unit id="cf758edb971b2b4dec99794c86a54d09eddea2b6" translate="yes" xml:space="preserve">
          <source>The current locale is exposed to XS code except possibly &lt;code&gt;LC_NUMERIC&lt;/code&gt; (explained in the next paragraph). There have not been reports of problems with the other categories. Perl initializes things on start-up so that the current locale is the one which is indicated by the user's environment in effect at that time. See &lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot; in perllocale&lt;/a&gt;.</source>
          <target state="translated">現在のロケールは、おそらく &lt;code&gt;LC_NUMERIC&lt;/code&gt; （次の段落で説明）を除いて、XSコードに公開されています。他のカテゴリーでの問題の報告はありません。 Perlは起動時に物事を初期化して、現在のロケールがその時点で有効なユーザーの環境によって示されるロケールになるようにします。&lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;perllocaleの「ENVIRONMENT」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="22d3f495bb4240a9d3bab6ec75da601351d12c2b" translate="yes" xml:space="preserve">
          <source>The current locale is exposed to XS code except possibly &lt;code&gt;LC_NUMERIC&lt;/code&gt; (explained in the next paragraph). There have not been reports of problems with the other categories. Perl initializes things on start-up so that the current locale is the one which is indicated by the user's environment in effect at that time. See &lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;ENVIRONMENT in perllocale&lt;/a&gt;.</source>
          <target state="translated">現在のロケールは、 &lt;code&gt;LC_NUMERIC&lt;/code&gt; を除いてXSコードに公開されています（次の段落で説明）。他のカテゴリに関する問題の報告はありません。Perlは起動時に物事を初期化するため、現在のロケールは、その時点で有効なユーザーの環境によって示されるロケールになります。&lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;perllocaleのENVIRONMENTを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="06e14b6dd5c0c60379e0f9fc4367987da9456c3d" translate="yes" xml:space="preserve">
          <source>The current locale is set at execution time by &lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale()&lt;/a&gt; described below. If that function hasn't yet been called in the course of the program's execution, the current locale is that which was determined by the &lt;a href=&quot;#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot;&lt;/a&gt; in effect at the start of the program. If there is no valid environment, the current locale is whatever the system default has been set to. On POSIX systems, it is likely, but not necessarily, the &quot;C&quot; locale. On Windows, the default is set via the computer's &lt;code&gt;Control Panel-&amp;gt;Regional and Language Options&lt;/code&gt; (or its current equivalent).</source>
          <target state="translated">現在のロケールは、実行時に以下で説明する&lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale（）&lt;/a&gt;によって設定されます。プログラムの実行中にその関数がまだ呼び出されていない場合、現在のロケールは、プログラムの開始時に有効な&lt;a href=&quot;#ENVIRONMENT&quot;&gt;「ENVIRONMENT」&lt;/a&gt;によって決定されたロケールです。有効な環境がない場合、現在のロケールはシ​​ステムのデフォルトに設定されているものです。POSIXシステムでは、「C」ロケールである可能性がありますが、必ずしもそうとは限りません。Windowsでは、デフォルトはコンピューターの[ &lt;code&gt;Control Panel-&amp;gt;Regional and Language Options&lt;/code&gt; （または現在の同等のオプション）で設定されます。</target>
        </trans-unit>
        <trans-unit id="061c069ca3fcc48e2c1a6a5055f7be81ca6838c7" translate="yes" xml:space="preserve">
          <source>The current locale is set at execution time by &lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale()&lt;/a&gt; described below. If that function hasn't yet been called in the course of the program's execution, the current locale is that which was determined by the &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; in effect at the start of the program. If there is no valid environment, the current locale is whatever the system default has been set to. On POSIX systems, it is likely, but not necessarily, the &quot;C&quot; locale. On Windows, the default is set via the computer's &lt;code&gt;Control Panel-&amp;gt;Regional &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; Language Options&lt;/code&gt; (or its current equivalent).</source>
          <target state="translated">現在のロケールは、実行時に以下で説明する&lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale（）&lt;/a&gt;によって設定されます。プログラムの実行中にその関数がまだ呼び出されていない場合、現在のロケールは、プログラムの開始時に有効な&lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt;によって決定されたロケールです。有効な環境がない場合、現在のロケールはシ​​ステムのデフォルトに設定されているものです。 POSIXシステムでは、「C」ロケールである可能性がありますが、必ずしもそうではありません。 Windowsでは、デフォルトはコンピュータの[ &lt;code&gt;Control Panel-&amp;gt;Regional &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; Language Options&lt;/code&gt; （または現在の同等オプション）で設定されます。</target>
        </trans-unit>
        <trans-unit id="b7f42f27fb52f98cb07c551fabc648053a689c30" translate="yes" xml:space="preserve">
          <source>The current locale is used when going outside of Perl with operations like &lt;a href=&quot;functions/system&quot;&gt;system LIST&lt;/a&gt; or &lt;a href=&quot;perlop#qx%2fSTRING%2f&quot;&gt;qx//&lt;/a&gt;, if those operations are locale-sensitive.</source>
          <target state="translated">現在のロケールは、&lt;a href=&quot;functions/system&quot;&gt;システムのLIST&lt;/a&gt;や&lt;a href=&quot;perlop#qx%2fSTRING%2f&quot;&gt;qx //&lt;/a&gt;などの操作でPerlの外に出るときに使用されます（これらの操作がロケールに依存する場合）。</target>
        </trans-unit>
        <trans-unit id="69e663f7c7a676b0d28d32e89828d9474ab1d29d" translate="yes" xml:space="preserve">
          <source>The current locale is used when going outside of Perl with operations like &lt;a href=&quot;perlfunc#system-LIST&quot;&gt;system()&lt;/a&gt; or &lt;a href=&quot;perlop#qx%2FSTRING%2F&quot;&gt;qx//&lt;/a&gt;, if those operations are locale-sensitive.</source>
          <target state="translated">現在のロケールは、&lt;a href=&quot;perlfunc#system-LIST&quot;&gt;system（）&lt;/a&gt;や&lt;a href=&quot;perlop#qx%2FSTRING%2F&quot;&gt;qx //&lt;/a&gt;などの操作でPerlの外部に移動するときに、それらの操作がロケールに依存する場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="ea51628874f50840c20248e49e31ecc39bc8aab0" translate="yes" xml:space="preserve">
          <source>The current major release of Perl is Perl 5, first released in 1994. It can run scripts from the previous major release, Perl 4 (March 1991), but has significant differences.</source>
          <target state="translated">現在のPerlのメジャーリリースはPerl 5で、1994年に最初にリリースされました。前のメジャーリリースである Perl 4 (1991年3月)からのスクリプトを実行することができますが、大きな違いがあります。</target>
        </trans-unit>
        <trans-unit id="1ad75b57a59621fb77288b117b229032ac9f513f" translate="yes" xml:space="preserve">
          <source>The current naming convention is:</source>
          <target state="translated">現在の命名規則は</target>
        </trans-unit>
        <trans-unit id="b2e2b3b69c2218e4d8359acb1335a4024632d82a" translate="yes" xml:space="preserve">
          <source>The current offset on the Perl internal stack (cf. &lt;code&gt;SP&lt;/code&gt; ) is restored at the end of</source>
          <target state="translated">Perl内部スタック（ &lt;code&gt;SP&lt;/code&gt; を参照）の現在のオフセットは、</target>
        </trans-unit>
        <trans-unit id="6ab9fb3b5f482c273ca6d801c743b02bcacec72c" translate="yes" xml:space="preserve">
          <source>The current offset on the Perl internal stack (cf. &lt;code&gt;SP&lt;/code&gt;) is restored at the end of</source>
          <target state="translated">Perl内部スタック（ &lt;code&gt;SP&lt;/code&gt; を参照）の現在のオフセットは、の最後に復元されます。</target>
        </trans-unit>
        <trans-unit id="c030186501458b34adb46e2d42aa7b81f218a056" translate="yes" xml:space="preserve">
          <source>The current page length (printable lines) of the currently selected output channel. The default is 60.</source>
          <target state="translated">現在選択されている出力チャンネルの現在のページ長(印刷可能な行数)。デフォルトは60です。</target>
        </trans-unit>
        <trans-unit id="3d4eb19bb10369473283d32cc7dd71a86ff46c90" translate="yes" xml:space="preserve">
          <source>The current page number of the currently selected output channel.</source>
          <target state="translated">現在選択されている出力チャンネルの現在のページ番号。</target>
        </trans-unit>
        <trans-unit id="770296232bd3d822ead8ffe492b7e0e282b9f95e" translate="yes" xml:space="preserve">
          <source>The current phase of the perl interpreter.</source>
          <target state="translated">perlインタプリタの現在のフェーズ。</target>
        </trans-unit>
        <trans-unit id="2864f23a19f0c83d2f66d97a56cf54892b44918f" translate="yes" xml:space="preserve">
          <source>The current process identifier is normally also available via the predefined $$ variable. Under fork() emulation however $$ may contain a pseudo-process identifier that is only meaningful to the Perl kill(), wait() and waitpid() functions. The Win32::GetCurrentProcessId() function will always return the regular Windows process id, even when called from inside a pseudo-process.</source>
          <target state="translated">現在のプロセス識別子は、通常、定義済みの $$$ 変数でも利用可能です。しかし、fork()エミュレーションの下では、 $$$ は、Perl の kill()、 wait()および waitpid()関数でのみ意味を持つ疑似プロセス識別子を含むかもしれません。Win32::GetCurrentProcessId()関数は、たとえ疑似プロセスの内部から呼び出されたとしても、常に通常のWindowsプロセスIDを返します。</target>
        </trans-unit>
        <trans-unit id="a2857cd700aaf0537f04949257bdb10786ea5148" translate="yes" xml:space="preserve">
          <source>The current set of characters after which a string may be broken to fill continuation fields (starting with &lt;code&gt;^&lt;/code&gt;) in a format. The default is &quot; \n-&quot;, to break on a space, newline, or a hyphen.</source>
          <target state="translated">形式の継続フィールド（ &lt;code&gt;^&lt;/code&gt; で始まる）を埋めるために文字列を分割できる現在の文字セット。デフォルトは「\ n-」で、スペース、改行、またはハイフンで区切ります。</target>
        </trans-unit>
        <trans-unit id="d0bc78c2888afaf94160d8cd4bd4fdc74663bf04" translate="yes" xml:space="preserve">
          <source>The current set of official keys is:</source>
          <target state="translated">現在の公式キーのセットは</target>
        </trans-unit>
        <trans-unit id="981300e195cac4e7353f833304330d8ac58b67a9" translate="yes" xml:space="preserve">
          <source>The current set of warning checks enabled by the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma. It has the same scoping as the &lt;code&gt;$^H&lt;/code&gt; and &lt;code&gt;%^H&lt;/code&gt; variables. The exact values are considered internal to the &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; pragma and may change between versions of Perl.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; プラグマによって有効にされた現在の警告チェックのセット。 &lt;code&gt;$^H&lt;/code&gt; および &lt;code&gt;%^H&lt;/code&gt; 変数と同じスコープを持っています。正確な値は、&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;プラグマの内部と見なされ、Perlのバージョン間で異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="5ff870c28a76abb15c6ef8bc6c01da1732cfc87c" translate="yes" xml:space="preserve">
          <source>The current set of warning checks enabled by the &lt;code&gt;use warnings&lt;/code&gt; pragma. It has the same scoping as the &lt;code&gt;$^H&lt;/code&gt; and &lt;code&gt;%^H&lt;/code&gt; variables. The exact values are considered internal to the &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; pragma and may change between versions of Perl.</source>
          <target state="translated">&lt;code&gt;use warnings&lt;/code&gt; プラグマによって有効になっている警告チェックの現在のセット。 &lt;code&gt;$^H&lt;/code&gt; および &lt;code&gt;%^H&lt;/code&gt; 変数と同じスコープがあります。正確な値は&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;プラグマの内部と見なされ、Perlのバージョン間で変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e48b124af22e055d2f998460eddfa2b05c504d05" translate="yes" xml:space="preserve">
          <source>The current setting for a particular CV can be retrieved by &lt;a href=&quot;#cv_get_call_checker&quot;&gt;cv_get_call_checker&lt;/a&gt;.</source>
          <target state="translated">特定のCVの現在の設定は、&lt;a href=&quot;#cv_get_call_checker&quot;&gt;cv_get_call_checker&lt;/a&gt;で取得できます。</target>
        </trans-unit>
        <trans-unit id="043e73127d721a29085be4df3900bb1371bf6328" translate="yes" xml:space="preserve">
          <source>The current setting for a particular CV can be retrieved by &lt;a href=&quot;#cv_get_call_checker_flags&quot;&gt;&quot;cv_get_call_checker_flags&quot;&lt;/a&gt;.</source>
          <target state="translated">特定のCVの現在の設定は、&lt;a href=&quot;#cv_get_call_checker_flags&quot;&gt;「cv_get_call_checker_flags」で&lt;/a&gt;取得できます。</target>
        </trans-unit>
        <trans-unit id="b952480064e555e874a4e5bab67374e0afa43170" translate="yes" xml:space="preserve">
          <source>The current state is quite close to this target. Known limitations:</source>
          <target state="translated">現在の状態は、このターゲットにかなり近いです。既知の制限。</target>
        </trans-unit>
        <trans-unit id="ba6118e27828276e003be0b716e1e27e35775418" translate="yes" xml:space="preserve">
          <source>The current time, hires or not.</source>
          <target state="translated">今の時代、採用するかしないか。</target>
        </trans-unit>
        <trans-unit id="c893fdb58e68676d453e9772eca0458d9ee9ef15" translate="yes" xml:space="preserve">
          <source>The current value giving the maximum number of open but unclosed parenthetical groups there may be at any point during a regular expression compilation. The default is currently 1000 nested groups. You may adjust it depending on your needs and the amount of memory available.</source>
          <target state="translated">正規表現のコンパイル中のどの時点でも、開いているが閉じていない親文字グループの最大数を与える現在の値です。デフォルトは現在1000個の入れ子になったグループです。ニーズと利用可能なメモリ量に応じて調整することができます。</target>
        </trans-unit>
        <trans-unit id="bc73114057d5a2e203bbe1e6af0220ea5c0d6452" translate="yes" xml:space="preserve">
          <source>The current value of &lt;a href=&quot;perlvar#%24%2C&quot;&gt;&lt;code&gt;$,&lt;/code&gt;&lt;/a&gt; (if any) is printed between each LIST item. The current value of &lt;a href=&quot;perlvar#%24%5C&quot;&gt;&lt;code&gt;$\&lt;/code&gt;&lt;/a&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt;, but that doesn't look as good).</source>
          <target state="translated">&lt;a href=&quot;perlvar#%24%2C&quot;&gt; &lt;code&gt;$,&lt;/code&gt; &lt;/a&gt;の現在の値（存在する場合）は、各LISTアイテムの間に出力されます。&lt;a href=&quot;perlvar#%24%5C&quot;&gt; &lt;code&gt;$\&lt;/code&gt; &lt;/a&gt;の現在の値（存在する場合）は、LIST全体が出力された後に出力されます。 printはLISTを受け取るため、returnリストを&lt;a href=&quot;#print-FILEHANDLE-LIST&quot;&gt; &lt;code&gt;print&lt;/code&gt; に&lt;/a&gt;渡すサブルーチンを含め、LIST内のすべてのものがリストコンテキストで評価されます。対応する右括弧でprintの引数を終了させたくない場合を除いて、printキーワードの後に​​左括弧を付けないように注意してください。すべての引数を括弧で囲みます（または &lt;code&gt;+&lt;/code&gt; を挿入しますが、見栄えがよくありません）。</target>
        </trans-unit>
        <trans-unit id="8b45957d0c48ff5a61159add09d1cced4fe06354" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$,&lt;/code&gt; (if any) is printed between each LIST item. The current value of &lt;code&gt;$\&lt;/code&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt; , but that doesn't look as good).</source>
          <target state="translated">&lt;code&gt;$,&lt;/code&gt; の現在の値（ある場合）は、各LIST項目の間に出力されます。 &lt;code&gt;$\&lt;/code&gt; （存在する場合）の現在の値は、リスト全体が印刷された後に印刷されます。printはLISTを取るため、printに渡す戻りリストを持つサブルーチンを含め、LIST内のすべてがリストコンテキストで評価され &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 。対応する右括弧でprintへの引数を終了させたい場合を除き、printキーワードの後に​​左括弧を付けないように注意してください。すべての引数を括弧で囲みます（または &lt;code&gt;+&lt;/code&gt; を挿入しますが、見栄えがよくありません）。</target>
        </trans-unit>
        <trans-unit id="d3b381c8d22a96ce946901e90864741d92df1af5" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$,&lt;/code&gt; (if any) is printed between each LIST item. The current value of &lt;code&gt;$\&lt;/code&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt; , but that doesn't look as good).</source>
          <target state="translated">&lt;code&gt;$,&lt;/code&gt; の現在の値（ある場合）は、各LIST項目の間に出力されます。 &lt;code&gt;$\&lt;/code&gt; （存在する場合）の現在の値は、リスト全体が印刷された後に印刷されます。printはLISTを取るため、printに渡す戻りリストを持つサブルーチンを含め、LIST内のすべてがリストコンテキストで評価され &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 。対応する右括弧でprintへの引数を終了させたい場合を除き、printキーワードの後に​​左括弧を付けないように注意してください。すべての引数を括弧で囲みます（または &lt;code&gt;+&lt;/code&gt; を挿入しますが、見栄えがよくありません）。</target>
        </trans-unit>
        <trans-unit id="16a7c40e8bbfe13e91d735da741af8520eabede2" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$archname&lt;/code&gt; can be found with this command:</source>
          <target state="translated">&lt;code&gt;$archname&lt;/code&gt; の現在の値は、次のコマンドで確認できます。</target>
        </trans-unit>
        <trans-unit id="db4a25bfed587546962de5c8d6543f967c92521a" translate="yes" xml:space="preserve">
          <source>The current value of the &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; accumulator for &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format()&lt;/a&gt;&lt;/code&gt; lines. A format contains &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; calls that put their result into &lt;code&gt;$^A&lt;/code&gt; . After calling its format, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; prints out the contents of &lt;code&gt;$^A&lt;/code&gt; and empties. So you never really see the contents of &lt;code&gt;$^A&lt;/code&gt; unless you call &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; yourself and then look at it. See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; and &lt;a href=&quot;functions/formline&quot;&gt;formline PICTURE,LIST&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format()&lt;/a&gt;&lt;/code&gt; 行の &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; アキュムレータの現在の値。形式には、結果を &lt;code&gt;$^A&lt;/code&gt; 入れる &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; 呼び出しが含まれます。その形式を呼び出した後、 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;$^A&lt;/code&gt; 内容を出力して空にします。したがって、 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; を自分で呼び出してそれを調べない限り、 &lt;code&gt;$^A&lt;/code&gt; 内容は実際には表示されません。&lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt;および&lt;a href=&quot;functions/formline&quot;&gt;formline PICTURE、LISTを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bf446124f3a4c45cac5e41b4dd3df5f6adedf891" translate="yes" xml:space="preserve">
          <source>The current value of the &lt;code&gt;write()&lt;/code&gt; accumulator for &lt;code&gt;format()&lt;/code&gt; lines. A format contains &lt;code&gt;formline()&lt;/code&gt; calls that put their result into &lt;code&gt;$^A&lt;/code&gt;. After calling its format, &lt;code&gt;write()&lt;/code&gt; prints out the contents of &lt;code&gt;$^A&lt;/code&gt; and empties. So you never really see the contents of &lt;code&gt;$^A&lt;/code&gt; unless you call &lt;code&gt;formline()&lt;/code&gt; yourself and then look at it. See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; and &lt;a href=&quot;perlfunc#formline-PICTURE%2CLIST&quot;&gt;&quot;formline PICTURE,LIST&quot; in perlfunc&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format()&lt;/code&gt; 行の &lt;code&gt;write()&lt;/code&gt; アキュムレータの現在の値。フォーマットには、結果を &lt;code&gt;$^A&lt;/code&gt; 入れる &lt;code&gt;formline()&lt;/code&gt; 呼び出しが含まれています。そのフォーマットを呼び出した後、 &lt;code&gt;write()&lt;/code&gt; は &lt;code&gt;$^A&lt;/code&gt; 内容を出力し、空にします。したがって、 &lt;code&gt;formline()&lt;/code&gt; を自分で呼び出してからそれを確認しない限り、 &lt;code&gt;$^A&lt;/code&gt; 内容を実際に確認することはできません。参照&lt;a href=&quot;perlform&quot;&gt;perlformを&lt;/a&gt;と&lt;a href=&quot;perlfunc#formline-PICTURE%2CLIST&quot;&gt;perlfuncの中に&quot;formline PICTURE、LIST&quot;を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08cef4c84f23112c510335f5bb9c61930fcb65b7" translate="yes" xml:space="preserve">
          <source>The current value of the debugging flags. May be read or set. Like its &lt;a href=&quot;perlrun#-Dletters&quot;&gt;command-line equivalent&lt;/a&gt;, you can use numeric or symbolic values, e.g. &lt;code&gt;$^D = 10&lt;/code&gt; or &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt;. See &lt;a href=&quot;perlrun#-Dnumber&quot;&gt;&quot;&lt;b&gt;-D&lt;/b&gt;&lt;i&gt;number&lt;/i&gt;&quot; in perlrun&lt;/a&gt;. The contents of this variable also affects the debugger operation. See &lt;a href=&quot;perldebguts#Debugger-Internals&quot;&gt;&quot;Debugger Internals&quot; in perldebguts&lt;/a&gt;.</source>
          <target state="translated">デバッグフラグの現在の値。読んだり設定したりできます。&lt;a href=&quot;perlrun#-Dletters&quot;&gt;同等のコマンドライン&lt;/a&gt;と同様に、数値または記号値を使用できます（例： &lt;code&gt;$^D = 10&lt;/code&gt; または &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; 。&lt;a href=&quot;perlrun#-Dnumber&quot;&gt;perlrunの&lt;/a&gt;「&lt;b&gt;-D&lt;/b&gt;&lt;i&gt;番号&lt;/i&gt;」を参照してください。この変数の内容は、デバッガーの操作にも影響します。&lt;a href=&quot;perldebguts#Debugger-Internals&quot;&gt;perldebgutsの「DebuggerInternals」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed07dc52d8f87fe5efbcd1795acd592cb2bcdd55" translate="yes" xml:space="preserve">
          <source>The current value of the debugging flags. May be read or set. Like its command-line equivalent, you can use numeric or symbolic values, eg &lt;code&gt;$^D = 10&lt;/code&gt; or &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; .</source>
          <target state="translated">デバッグフラグの現在の値。読み取りまたは設定できます。同等のコマンドラインと同様に、数値または記号値を使用できます（例： &lt;code&gt;$^D = 10&lt;/code&gt; または &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="761048a9f6779920117c38b6975281ec2824cbaa" translate="yes" xml:space="preserve">
          <source>The current value of the flag associated with the &lt;b&gt;-c&lt;/b&gt; switch. Mainly of use with &lt;b&gt;-MO=...&lt;/b&gt; to allow code to alter its behavior when being compiled, such as for example to &lt;code&gt;AUTOLOAD&lt;/code&gt; at compile time rather than normal, deferred loading. Setting &lt;code&gt;$^C = 1&lt;/code&gt; is similar to calling &lt;code&gt;B::minus_c&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;-c&lt;/b&gt;スイッチに関連付けられているフラグの現在の値。主に&lt;b&gt;-MO = ...&lt;/b&gt;と共に使用して、コンパイル時にコードの動作を変更できるようにします&lt;b&gt;。&lt;/b&gt;たとえば、通常の遅延ロードではなく、コンパイル時に &lt;code&gt;AUTOLOAD&lt;/code&gt; を実行します。 &lt;code&gt;$^C = 1&lt;/code&gt; 設定は、 &lt;code&gt;B::minus_c&lt;/code&gt; 呼び出しに似ています。</target>
        </trans-unit>
        <trans-unit id="8dafa28f68632a10855a57c5eacb6743b86c198f" translate="yes" xml:space="preserve">
          <source>The current value of the flag associated with the &lt;b&gt;-c&lt;/b&gt; switch. Mainly of use with &lt;b&gt;-MO=...&lt;/b&gt; to allow code to alter its behavior when being compiled, such as for example to &lt;code&gt;AUTOLOAD&lt;/code&gt; at compile time rather than normal, deferred loading. Setting &lt;code&gt;$^C = 1&lt;/code&gt; is similar to calling &lt;code&gt;B::minus_c&lt;/code&gt;.</source>
          <target state="translated">&lt;b&gt;-c&lt;/b&gt;スイッチに関連付けられているフラグの現在の値。主に&lt;b&gt;-MO = ...&lt;/b&gt;とともに使用して、コードがコンパイル時に動作を変更できるようにします&lt;b&gt;。&lt;/b&gt;たとえば、通常の遅延ロードではなく、コンパイル時に &lt;code&gt;AUTOLOAD&lt;/code&gt; を実行します。 &lt;code&gt;$^C = 1&lt;/code&gt; 設定することは、 &lt;code&gt;B::minus_c&lt;/code&gt; を呼び出すことに似ています。</target>
        </trans-unit>
        <trans-unit id="5468ce0ac69ee02e09a591df294df02b8e8e00dd" translate="yes" xml:space="preserve">
          <source>The current value of the inplace-edit extension. Use &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to disable inplace editing.</source>
          <target state="translated">インプレース編集拡張の現在の値。インプレース編集を無効にするには、 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="eb25a57f6557411f85b4814f0d93efdbea2e3515" translate="yes" xml:space="preserve">
          <source>The current value of the inplace-edit extension. Use &lt;code&gt;undef&lt;/code&gt; to disable inplace editing.</source>
          <target state="translated">インプレース編集拡張機能の現在の値。使用 &lt;code&gt;undef&lt;/code&gt; を無効にインプレース編集します。</target>
        </trans-unit>
        <trans-unit id="ab0d30902e8f62034444f0c46f34be59caec65d2" translate="yes" xml:space="preserve">
          <source>The current value of the regex debugging flags. Set to 0 for no debug output even when the &lt;code&gt;re 'debug'&lt;/code&gt; module is loaded. See &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt; for details.</source>
          <target state="translated">正規表現デバッグフラグの現在の値。 &lt;code&gt;re 'debug'&lt;/code&gt; モジュールがロードされている場合でも、デバッグ出力がない場合は0に設定します。詳細については、&lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a22922d7a166dbc35ec6d0a0c534fd11892caf1b" translate="yes" xml:space="preserve">
          <source>The current value of the warning switch, initially true if &lt;b&gt;-w&lt;/b&gt; was used, false otherwise, but directly modifiable.</source>
          <target state="translated">警告スイッチの現在の値。最初は&lt;b&gt;-w&lt;/b&gt;が使用された場合はtrue 、それ以外の場合はfalseですが、直接変更できます。</target>
        </trans-unit>
        <trans-unit id="434ca8d76bd8ecc27a064789f98b19395ab4f212" translate="yes" xml:space="preserve">
          <source>The current version of the standards for &lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2()&lt;/a&gt;&lt;/code&gt; is available at &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2()&lt;/a&gt;&lt;/code&gt; の標準の現在のバージョンは、&lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http: &lt;/a&gt;//www.opengroup.org/onlinepubs/009695399/functions/atan2.htmlで入手できます。</target>
        </trans-unit>
        <trans-unit id="2b563eb1b6cfef1294ee2d2ec105a8fc001fb852" translate="yes" xml:space="preserve">
          <source>The current version of the standards for &lt;code&gt;atan2&lt;/code&gt; is available at &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;atan2&lt;/code&gt; の標準の現在のバージョンは、&lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http：&lt;/a&gt;//www.opengroup.org/onlinepubs/009695399/functions/atan2.htmlで入手できます。</target>
        </trans-unit>
        <trans-unit id="6af70deb3b449e89c48e84135fbdeb7d79f07a9c" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;http://www.eyrie.org/~eagle/software/ansicolor/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このモジュールの現在のバージョンは、常に&lt;a href=&quot;http://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;http://www.eyrie.org/~eagle/software/ansicolor/の&lt;/a&gt; Webサイトから入手できます。5.6.0以降、Perlコアディストリビューションにも含まれています。</target>
        </trans-unit>
        <trans-unit id="b31c3cebc8faae4e8a4925e48535264d89073d95" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;.</source>
          <target state="translated">このモジュールの現在のバージョンは、常にWebサイト&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="f5a8854edfd01b7a5e559e1a5294ccbba9d0afe6" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このモジュールの現在のバージョンは、常にWebサイト&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;から入手できます。5.6.0以降、Perlコアディストリビューションにも含まれています。</target>
        </trans-unit>
        <trans-unit id="cbd165143fe6d4a52227133b4ee1638e509ed516" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;https://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;https://www.eyrie.org/~eagle/software/ansicolor/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このモジュールの現在のバージョンは、&lt;a href=&quot;https://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;https：//www.eyrie.org/~eagle/software/ansicolor/の&lt;/a&gt;Webサイトからいつでも入手できます。これは、5.6.0以降のPerlコアディストリビューションの一部でもあります。</target>
        </trans-unit>
        <trans-unit id="a674a12f3426ba3d689c7c921dc0c45b179571fc" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;.</source>
          <target state="translated">このモジュールの現在のバージョンは、&lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https：//www.eyrie.org/~eagle/software/podlators/の&lt;/a&gt;Webサイトからいつでも入手できます。</target>
        </trans-unit>
        <trans-unit id="c9c2bb6087cce8c28cf4e7d17487f87fbaa02086" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このモジュールの現在のバージョンは、&lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https：//www.eyrie.org/~eagle/software/podlators/の&lt;/a&gt;Webサイトからいつでも入手できます。これは、5.6.0以降のPerlコアディストリビューションの一部でもあります。</target>
        </trans-unit>
        <trans-unit id="c47cd4fd8d9bd245ee61848360efac4088607cb6" translate="yes" xml:space="preserve">
          <source>The current version of this script is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このスクリプトの現在のバージョンは、&lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http：//www.eyrie.org/~eagle/software/podlators/の&lt;/a&gt; Webサイトから常に入手できます。5.6.0以降、Perlコアディストリビューションにも含まれています。</target>
        </trans-unit>
        <trans-unit id="7b5c546ea518bb4350e7bf7b54f3310abe5cc06c" translate="yes" xml:space="preserve">
          <source>The current version of this script is always available from its web site at &lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">このスクリプトの現在のバージョンは、&lt;a href=&quot;https://www.eyrie.org/~eagle/software/podlators/&quot;&gt;https：//www.eyrie.org/~eagle/software/podlators/の&lt;/a&gt;Webサイトからいつでも入手できます。これは、5.6.0以降のPerlコアディストリビューションの一部でもあります。</target>
        </trans-unit>
        <trans-unit id="9d8fe5626c6979a9718f106c0652b7d905296f64" translate="yes" xml:space="preserve">
          <source>The current version was written by Graham Barr.</source>
          <target state="translated">現在のバージョンはグラハム・バー氏が執筆しています。</target>
        </trans-unit>
        <trans-unit id="7c32f08e82229236d88693ec9eaad5ec8a635209" translate="yes" xml:space="preserve">
          <source>The current working directory of the program is</source>
          <target state="translated">プログラムの現在の作業ディレクトリは</target>
        </trans-unit>
        <trans-unit id="403572c903ddf0d90233f3ad9327b2e78dc32883" translate="yes" xml:space="preserve">
          <source>The currently active COP (control op) roughly representing the current statement in the source.</source>
          <target state="translated">ソース内の現在の文をおおまかに表す、現在アクティブなCOP(control op)。</target>
        </trans-unit>
        <trans-unit id="588f5e820c106e9822f858102bdf0e7ae9b574c7" translate="yes" xml:space="preserve">
          <source>The customary Perl approach for processing all the lines in a file is to do so one line at a time:</source>
          <target state="translated">ファイル内のすべての行を処理するためのPerlの慣習的なアプローチは、一度に1行ずつ処理することです。</target>
        </trans-unit>
        <trans-unit id="a4504c4a63cdd557da723133c8d2b75666dc8630" translate="yes" xml:space="preserve">
          <source>The cwd() is the most natural form for the current architecture. For most systems it is identical to `pwd` (but without the trailing line terminator).</source>
          <target state="translated">cwd()は現在のアーキテクチャでは最も自然な形である。ほとんどのシステムでは `pwd` と同じである (ただし、末尾の行の終端がない)。</target>
        </trans-unit>
        <trans-unit id="40c9ebfbdf9a557c5ad182c1d60f03fd99fa74ef" translate="yes" xml:space="preserve">
          <source>The data argument passes in the value (if any) associated with the attribute. For example, if &lt;code&gt;&amp;amp;foo&lt;/code&gt; had been declared:</source>
          <target state="translated">data引数は、属性に関連付けられた値（存在する場合）を渡します。たとえば、 &lt;code&gt;&amp;amp;foo&lt;/code&gt; が宣言されている場合：</target>
        </trans-unit>
        <trans-unit id="4057a2800ea2edef8acd376fce4a738947ca16f2" translate="yes" xml:space="preserve">
          <source>The data can be aggregated into obvious structures, especially if there's a large amount of data in each aggregate.</source>
          <target state="translated">特に、各集合体に大量のデータがある場合には、明らかな構造に集合させることができる。</target>
        </trans-unit>
        <trans-unit id="f1737bbb402e005395886a66a62fefd166798f8a" translate="yes" xml:space="preserve">
          <source>The data is stored as a list of values from the time and times functions:</source>
          <target state="translated">データは、時間と時間の関数から値のリストとして保存されます。</target>
        </trans-unit>
        <trans-unit id="083ecdb4eb83b1283f9d7370b6905eb300e214e7" translate="yes" xml:space="preserve">
          <source>The data may be retrieved using the &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; function if the underlying type of the byte stream is known.</source>
          <target state="translated">バイトストリームの基になるタイプがわかっている場合は、 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 関数を使用してデータを取得できます。</target>
        </trans-unit>
        <trans-unit id="71f7b6c4c962003ad0e8bfcff7666dfb17bf3d56" translate="yes" xml:space="preserve">
          <source>The data may be retrieved using the &lt;code&gt;unpack&lt;/code&gt; function if the underlying type of the byte stream is known.</source>
          <target state="translated">バイトストリームの基になるタイプがわかっている場合は、 &lt;code&gt;unpack&lt;/code&gt; 関数を使用してデータを取得できます。</target>
        </trans-unit>
        <trans-unit id="63af91535a394b6aa4a43c6ecef621c3c5bffb80" translate="yes" xml:space="preserve">
          <source>The data of the file is not immediately available. This attribute indicates that the file data has been physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.</source>
          <target state="translated">ファイルのデータはすぐに利用できません。この属性は、ファイルのデータが物理的にオフラインストレージに移動したことを示します。この属性は、階層型ストレージ管理ソフトウェアであるリモートストレージで使用されます。アプリケーションは、この属性を任意に変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="9bb2c0f943e4592858ab2d05373119174b2d2dda" translate="yes" xml:space="preserve">
          <source>The data was added as a Unicode string and when writing it out to disk, the &lt;code&gt;:utf8&lt;/code&gt; line discipline wasn't set by &lt;code&gt;Archive::Tar&lt;/code&gt; , so Perl tried to convert the string to ISO-8859 and failed. The written file now contains garbage.</source>
          <target state="translated">データはUnicode文字列として追加され、ディスクに書き込むときに &lt;code&gt;:utf8&lt;/code&gt; 行の規律が &lt;code&gt;Archive::Tar&lt;/code&gt; によって設定されなかったため、Perlは文字列をISO-8859に変換しようとして失敗しました。書き込まれたファイルにはゴミが含まれています。</target>
        </trans-unit>
        <trans-unit id="a586674f2132d76d932dd3ae8f2556dfbebc1fb6" translate="yes" xml:space="preserve">
          <source>The data was added as a Unicode string and when writing it out to disk, the &lt;code&gt;:utf8&lt;/code&gt; line discipline wasn't set by &lt;code&gt;Archive::Tar&lt;/code&gt;, so Perl tried to convert the string to ISO-8859 and failed. The written file now contains garbage.</source>
          <target state="translated">データはUnicode文字列として追加され、ディスクに書き出すときに、 &lt;code&gt;:utf8&lt;/code&gt; 行の規律が &lt;code&gt;Archive::Tar&lt;/code&gt; によって設定されなかったため、Perlは文字列をISO-8859に変換しようとして失敗しました。書き込まれたファイルにガベージが含まれるようになりました。</target>
        </trans-unit>
        <trans-unit id="93ccb288f67ba8fe0c8510721b3e70886d45432a" translate="yes" xml:space="preserve">
          <source>The date and day names in dates formatted by &lt;code&gt;strftime()&lt;/code&gt; could be manipulated to advantage by a malicious user able to subvert the &lt;code&gt;LC_DATE&lt;/code&gt; locale. (&quot;Look--it says I wasn't in the building on Sunday.&quot;)</source>
          <target state="translated">&lt;code&gt;strftime()&lt;/code&gt; によってフォーマットされた日付の日付と曜日の名前は、 &lt;code&gt;LC_DATE&lt;/code&gt; ロケールを破壊できる悪意のあるユーザーによって操作される可能性があります。（「見て、私は日曜日に建物にいなかったと言っています」）</target>
        </trans-unit>
        <trans-unit id="c40b16f78ce75cc859be91a0613f27d3f68c2364" translate="yes" xml:space="preserve">
          <source>The day of the year is in the list returned by the &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; function. Without an argument &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; uses the current time.</source>
          <target state="translated">年間通算日は、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; 関数によって返されるリストに含まれています。引数がない場合、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; は現在の時刻を使用します。</target>
        </trans-unit>
        <trans-unit id="1c7a95dfcca9858a8405f98faf2612dd1935a1f7" translate="yes" xml:space="preserve">
          <source>The day of the year is in the list returned by the &lt;code&gt;localtime&lt;/code&gt; function. Without an argument &lt;code&gt;localtime&lt;/code&gt; uses the current time.</source>
          <target state="translated">年の日は、 &lt;code&gt;localtime&lt;/code&gt; 関数によって返されるリストにあります。引数がない場合、 &lt;code&gt;localtime&lt;/code&gt; は現在の時刻を使用します。</target>
        </trans-unit>
        <trans-unit id="32d7e957f2b60e8e8af1a45f78007f3a710223c2" translate="yes" xml:space="preserve">
          <source>The days of just flinging strings around are over. It's well established that modern programs need to be capable of communicating funny accented letters, and things like euro symbols. This means that programmers need new habits. It's easy to program Unicode capable software, but it does require discipline to do it right.</source>
          <target state="translated">ただ文字列を弄るだけの時代は終わりました。現代のプログラムには、面白いアクセントのある文字やユーロ記号のようなものを伝える能力が必要であることは、十分に確立されています。これは、プログラマには新しい習慣が必要だということを意味します。Unicode対応のソフトウェアをプログラムするのは簡単ですが、それを正しく行うには規律が必要です。</target>
        </trans-unit>
        <trans-unit id="7d9856be0d4d4aa47742843ac8ee15803c0a6dbf" translate="yes" xml:space="preserve">
          <source>The debugger does not currently work in conjunction with the &lt;b&gt;-W&lt;/b&gt; command-line switch, because it itself is not free of warnings.</source>
          <target state="translated">デバッガ自体は警告がないため、現在&lt;b&gt;-W&lt;/b&gt;コマンドラインスイッチと連動していません。</target>
        </trans-unit>
        <trans-unit id="bff20683f233c3b1a43e85dddcc26c68e9457e08" translate="yes" xml:space="preserve">
          <source>The debugger has numerous options settable using the &lt;code&gt;o&lt;/code&gt; command, either interactively or from the environment or an rc file. (./.perldb or ~/.perldb under Unix.)</source>
          <target state="translated">デバッガーには、対話式に、または環境またはrcファイルから、 &lt;code&gt;o&lt;/code&gt; コマンドを使用して設定可能な多数のオプションがあります。（UNIXでは./.perldbまたは〜/ .perldb。）</target>
        </trans-unit>
        <trans-unit id="2b8f02d76c62b5ac783a580e7846d6536aa86d85" translate="yes" xml:space="preserve">
          <source>The debugger probably contains enough configuration hooks that you won't ever have to modify it yourself. You may change the behaviour of the debugger from within the debugger using its &lt;code&gt;o&lt;/code&gt; command, from the command line via the &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable, and from customization files.</source>
          <target state="translated">デバッガにはおそらく、自分で変更する必要のない十分な構成フックが含まれています。デバッガーの動作は、デバッガー内の &lt;code&gt;o&lt;/code&gt; コマンドを使用して、コマンドラインから &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 環境変数を介して、およびカスタマイズファイルから変更できます。</target>
        </trans-unit>
        <trans-unit id="24bc00b2a7165b041b9ffd101df7fc63fd2218dd" translate="yes" xml:space="preserve">
          <source>The debugger prompt is something like</source>
          <target state="translated">デバッガのプロンプトは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f8e855d0dba7087b2dc163f59ea22e7610600301" translate="yes" xml:space="preserve">
          <source>The debugging output at compile time looks like this:</source>
          <target state="translated">コンパイル時のデバッグ出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="5cc26823ddc27c25d44117d4b49405e558f3683c" translate="yes" xml:space="preserve">
          <source>The declared variable is not introduced (is not visible) until after the current statement. Thus,</source>
          <target state="translated">宣言された変数は、現在の文の後まで導入されません(見えません)。したがって</target>
        </trans-unit>
        <trans-unit id="9ae51c467cb04a1b525475d0b1964978fbf97d39" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;:perlio&lt;/code&gt; layer retries &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; as described above; interrupted &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; calls will always be retried.</source>
          <target state="translated">デフォルトの &lt;code&gt;:perlio&lt;/code&gt; レイヤー &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 、上記のようにread、 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; を再試行します。中断された &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; 呼び出しは常に再試行されます。</target>
        </trans-unit>
        <trans-unit id="cc07a8196664bfcb190df25e9665ffed3bb1d528" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;:perlio&lt;/code&gt; layer retries &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt; as described above; interrupted &lt;code&gt;wait&lt;/code&gt; and &lt;code&gt;waitpid&lt;/code&gt; calls will always be retried.</source>
          <target state="translated">デフォルトの &lt;code&gt;:perlio&lt;/code&gt; レイヤー &lt;code&gt;read&lt;/code&gt; 、上記のように読み取り、 &lt;code&gt;write&lt;/code&gt; 、および &lt;code&gt;close&lt;/code&gt; を再試行します。中断された &lt;code&gt;wait&lt;/code&gt; および &lt;code&gt;waitpid&lt;/code&gt; 呼び出しは、常に再試行されます。</target>
        </trans-unit>
        <trans-unit id="7af57631245798d230b9a42590aed5504edc7411" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;TIEHASH&lt;/code&gt; method stores &quot;extra&quot; arguments to tie() starting from offset 1 in the array referenced by &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt;; this is the same storage algorithm as in TIEHASH subroutine above. Hence, a typical package inheriting from &lt;b&gt;Tie::ExtraHash&lt;/b&gt; does not need to overwrite this method.</source>
          <target state="translated">デフォルトの &lt;code&gt;TIEHASH&lt;/code&gt; メソッドは、 &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt; によって参照される配列のオフセット1から始まるtie（）への「追加の」引数を格納します。これは、上記のTIEHASHサブルーチンと同じストレージアルゴリズムです。したがって、&lt;b&gt;Tie :: ExtraHashを&lt;/b&gt;継承する一般的なパッケージは、このメソッドを上書きする必要はありません。</target>
        </trans-unit>
        <trans-unit id="d8f318f7bfa1b89c48af52e1a8f99d1af186c96f" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;TIEHASH&lt;/code&gt; method stores &quot;extra&quot; arguments to tie() starting from offset 1 in the array referenced by &lt;code&gt;tied(%tiedhash)&lt;/code&gt;; this is the same storage algorithm as in TIEHASH subroutine above. Hence, a typical package inheriting from &lt;b&gt;Tie::ExtraHash&lt;/b&gt; does not need to overwrite this method.</source>
          <target state="translated">デフォルトの &lt;code&gt;TIEHASH&lt;/code&gt; メソッドは、 &lt;code&gt;tied(%tiedhash)&lt;/code&gt; によって参照される配列のオフセット1から始まるtie（）への「追加の」引数を格納します。これは、上記のTIEHASHサブルーチンと同じストレージアルゴリズムです。したがって、&lt;b&gt;Tie :: ExtraHash&lt;/b&gt;から継承する一般的なパッケージでは、このメソッドを上書きする必要はありません。</target>
        </trans-unit>
        <trans-unit id="b5e1aaf469c61ad0505179ca4ef693920d67bf62" translate="yes" xml:space="preserve">
          <source>The default behavior for matching can be changed, using various modifiers. Modifiers that relate to the interpretation of the pattern are listed just below. Modifiers that alter the way a pattern is used by Perl are detailed in &lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;&quot;Regexp Quote-Like Operators&quot; in perlop&lt;/a&gt; and &lt;a href=&quot;perlop#Gory-details-of-parsing-quoted-constructs&quot;&gt;&quot;Gory details of parsing quoted constructs&quot; in perlop&lt;/a&gt;.</source>
          <target state="translated">マッチングのデフォルトの動作は、さまざまな修飾子を使用して変更できます。パターンの解釈に関連する修飾子は、すぐ下にリストされています。Perlによるパターンの使用方法を変更する修飾&lt;a href=&quot;perlop#Regexp-Quote-Like-Operators&quot;&gt;子&lt;/a&gt;&lt;a href=&quot;perlop#Gory-details-of-parsing-quoted-constructs&quot;&gt;については&lt;/a&gt;、perlopの「RegexpQuote-Like Operators」および、perlopの「Gorydetails of parsingquotedconstructs」で詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="8bacf1d67275db56db4c207815d6942a42814176" translate="yes" xml:space="preserve">
          <source>The default behavior is restored with the &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; pragma, or upon reaching the end of the block enclosing &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; . Note that &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; calls may be nested, and that what is in effect within an inner scope will revert to the outer scope's rules at the end of the inner scope.</source>
          <target state="translated">デフォルトの動作は、 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; プラグマを使用して、または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; を囲むブロックの終わりに到達すると復元されます。 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用&lt;/a&gt;呼び出しはネストされる場合があり、内部スコープ内で有効なものは内部スコープの最後で外部スコープのルールに戻ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7e3af61d974b45e2899ef4868c4839bde44f6b43" translate="yes" xml:space="preserve">
          <source>The default behavior is restored with the &lt;code&gt;no locale&lt;/code&gt; pragma, or upon reaching the end of the block enclosing &lt;code&gt;use locale&lt;/code&gt;. Note that &lt;code&gt;use locale&lt;/code&gt; calls may be nested, and that what is in effect within an inner scope will revert to the outer scope's rules at the end of the inner scope.</source>
          <target state="translated">デフォルトの動作は、 &lt;code&gt;no locale&lt;/code&gt; プラグマを &lt;code&gt;use locale&lt;/code&gt; 囲むブロックの最後に到達すると復元されます。 &lt;code&gt;use locale&lt;/code&gt; 呼び出しはネストされる可能性があり、内部スコープ内で有効なものは、内部スコープの最後で外部スコープのルールに戻ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ebc252c3cc028e1614732f1daa492845981dc49a" translate="yes" xml:space="preserve">
          <source>The default behavior is to allow either VMS or Unix syntax on input and to return VMS syntax on output unless Unix syntax has been explicitly requested via the &lt;code&gt;DECC$FILENAME_UNIX_REPORT&lt;/code&gt; CRTL feature.</source>
          <target state="translated">デフォルトの動作では、UNIX構文が &lt;code&gt;DECC$FILENAME_UNIX_REPORT&lt;/code&gt; CRTL機能を介して明示的に要求されていない限り、入力でVMSまたはUnix構文を許可し、出力でVMS構文を返します。</target>
        </trans-unit>
        <trans-unit id="d9abf79a3fe513de5ab5f6341a0a6954a2315c50" translate="yes" xml:space="preserve">
          <source>The default behaviour for what</source>
          <target state="translated">何のためのデフォルトの動作</target>
        </trans-unit>
        <trans-unit id="6dccc7bf2df4ee545fc6ed04ddf3f01c1358bdf3" translate="yes" xml:space="preserve">
          <source>The default behaviour of file test operators is to use the simple mode bits as returned by the stat() family of system calls. However, many operating systems have additional features to define more complex access rights, for example ACLs (Access Control Lists). For such environments, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; may help the permission operators to return results more consistent with other tools.</source>
          <target state="translated">ファイルテストオペレーターのデフォルトの動作は、システムコールのstat（）ファミリーによって返されるシンプルモードビットを使用することです。ただし、多くのオペレーティングシステムには、ACL（アクセス制御リスト）など、より複雑なアクセス権を定義するための追加機能があります。そのような環境で &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; すると、許可オペレーターが他のツールとより一貫した結果を返すのに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="b1be0363bbe710d46dddb1e57d79fb15e7183b86" translate="yes" xml:space="preserve">
          <source>The default behaviour of file test operators is to use the simple mode bits as returned by the stat() family of system calls. However, many operating systems have additional features to define more complex access rights, for example ACLs (Access Control Lists). For such environments, &lt;code&gt;use filetest&lt;/code&gt; may help the permission operators to return results more consistent with other tools.</source>
          <target state="translated">ファイルテスト演算子のデフォルトの動作は、システムコールのstat（）ファミリによって返される単純モードビットを使用することです。ただし、多くのオペレーティングシステムには、ACL（アクセス制御リスト）など、より複雑なアクセス権を定義するための追加機能があります。このような環境で &lt;code&gt;use filetest&lt;/code&gt; すると、権限オペレーターが他のツールとより一貫性のある結果を返すのに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="8f3d08e8e13d1af1b8292d5961459da70c0fafa4" translate="yes" xml:space="preserve">
          <source>The default blacklist for Locale::Maketext also prevents use of the following methods in bracket notation:</source>
          <target state="translated">Locale::Maketextのデフォルトのブラックリストでは、以下のメソッドを大括弧表記で使用することもできません。</target>
        </trans-unit>
        <trans-unit id="1e443bdcb2163a4573139a1dc139dfc380443bd8" translate="yes" xml:space="preserve">
          <source>The default blacklist is [qw|ftp|], as &lt;code&gt;/bin/ftp&lt;/code&gt; is rather unreliable.</source>
          <target state="translated">&lt;code&gt;/bin/ftp&lt;/code&gt; はかなり信頼できないため、デフォルトのブラックリストは[qw | ftp |] です。</target>
        </trans-unit>
        <trans-unit id="ed0767b7e5643475189138ab836319b55629d878" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">デフォルトのバッファサイズは4096です。</target>
        </trans-unit>
        <trans-unit id="8bc00fd19b1a0edf6b2c0d08377dcc6685c37357" translate="yes" xml:space="preserve">
          <source>The default can be overridden by setting the environment variable PERLIO to a space separated list of layers (&lt;code&gt;unix&lt;/code&gt; or platform low level layer is always pushed first).</source>
          <target state="translated">環境変数PERLIOをスペースで区切られたレイヤーのリストに設定することにより、デフォルトをオーバーライドできます（ &lt;code&gt;unix&lt;/code&gt; またはプラットフォームの低レベルレイヤーが常に最初にプッシュされます）。</target>
        </trans-unit>
        <trans-unit id="34b91bbcac281ec343e20574aee63c504ba37c87" translate="yes" xml:space="preserve">
          <source>The default command shells on DOS descendant operating systems (such as they are) usually do not expand wildcard arguments supplied to programs. They consider it the application's job to handle that. This is commonly achieved by linking the application (in our case, perl) with startup code that the C runtime libraries usually provide. However, doing that results in incompatible perl versions (since the behavior of the argv expansion code differs depending on the compiler, and it is even buggy on some compilers). Besides, it may be a source of frustration if you use such a perl binary with an alternate shell that *does* expand wildcards.</source>
          <target state="translated">DOS の子孫オペレーティングシステム上のデフォルトのコマンドシェル (そのようなもの)は、通常、プログラムに与えられたワイルドカード引数を展開しません。彼らはそれを処理するのがアプリケーションの仕事だと考えています。これは一般的に、アプリケーション(私たちの場合はperl)をCランタイムライブラリが通常提供するスタートアップコードとリンクすることで達成されます。しかし、これを行うと、互換性のない perl のバージョンになってしまいます (argv 拡張コードの動作はコンパイラによって異なり、コンパイラによってはバグることさえあります)。さらに、このような perl バイナリをワイルドカードを展開する代替シェルで使うと、フラストレーションの原因になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="83afe3e15499ebffd14384524a4838c21ad9ac57" translate="yes" xml:space="preserve">
          <source>The default delivery policy of signals changed in Perl v5.8.0 from immediate (also known as &quot;unsafe&quot;) to deferred, also known as &quot;safe signals&quot;. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more information.</source>
          <target state="translated">シグナルのデフォルトの配信ポリシーは、Perl v5.8.0で即時（「安全でない」とも呼ばれる）から遅延された（「安全なシグナル」とも呼ばれる）に変更されました。詳細については、&lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0b1ff51c2db16d895d3583e8ea3357f71cb7399" translate="yes" xml:space="preserve">
          <source>The default directory for this is the &lt;code&gt;plugins/CPAN::Plugin::Specfile&lt;/code&gt; directory in the</source>
          <target state="translated">このためのデフォルトのディレクトリは、の &lt;code&gt;plugins/CPAN::Plugin::Specfile&lt;/code&gt; ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="e779baf9efd4d9532a5adc61d0ecb2fb82fd6ccb" translate="yes" xml:space="preserve">
          <source>The default exports of &lt;code&gt;timelocal()&lt;/code&gt; and &lt;code&gt;timegm()&lt;/code&gt; do a complicated calculation when given a year value less than 1000. This leads to surprising results in many cases. See &lt;a href=&quot;#Year-Value-Interpretation&quot;&gt;&quot;Year Value Interpretation&quot;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; と &lt;code&gt;timegm()&lt;/code&gt; のデフォルトのエクスポートでは、年の値が1000未満の場合、複雑な計算が行われます。これにより、多くの場合、驚くべき結果が得られます。詳細については、&lt;a href=&quot;#Year-Value-Interpretation&quot;&gt;「年額の解釈」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f60de20ca32864441bb2ece16480b765adbc68d5" translate="yes" xml:space="preserve">
          <source>The default filename translation is roughly &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr|/.|./|;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">デフォルトのファイル名変換は、おおよそ &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr|/.|./|;&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f540cdd4f440c064d7b134e9369a41da6337cfdb" translate="yes" xml:space="preserve">
          <source>The default filename translation is roughly &lt;code&gt;tr|/.|./|&lt;/code&gt;, swapping dots and slashes.</source>
          <target state="translated">デフォルトのファイル名変換は、おおよそ &lt;code&gt;tr|/.|./|&lt;/code&gt; 、ドットとスラッシュを交換します。</target>
        </trans-unit>
        <trans-unit id="e8b0d8e26001e75f3757789c285eac1caf4919f4" translate="yes" xml:space="preserve">
          <source>The default for &lt;code&gt;$svShare&lt;/code&gt; is &lt;code&gt;&quot;rw&quot;&lt;/code&gt; which provides the same sharing as using regular perl &lt;code&gt;open()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$svShare&lt;/code&gt; のデフォルトは &lt;code&gt;&quot;rw&quot;&lt;/code&gt; で、通常のperl &lt;code&gt;open()&lt;/code&gt; を使用するのと同じ共有を提供します。</target>
        </trans-unit>
        <trans-unit id="189d94e0a4457922028f86938b0ce7520f054dc0" translate="yes" xml:space="preserve">
          <source>The default for this field, if it cannot be extracted, is to copy &lt;code&gt;$Config{osname}&lt;/code&gt;. The two may be differing in casing (OpenBSD vs openbsd).</source>
          <target state="translated">このフィールドのデフォルトは、抽出できない場合、 &lt;code&gt;$Config{osname}&lt;/code&gt; をコピーすることです。この2つは、大文字と小文字が異なる場合があります（OpenBSDとopenbsd）。</target>
        </trans-unit>
        <trans-unit id="141616a08e099cc503e54695ac44f2c439029e1f" translate="yes" xml:space="preserve">
          <source>The default for this option is off.</source>
          <target state="translated">このオプションのデフォルトはオフです。</target>
        </trans-unit>
        <trans-unit id="841e53532f4d336433d317d532f99affc692102b" translate="yes" xml:space="preserve">
          <source>The default hash function has been modified with the intention of making it harder to infer the hash seed.</source>
          <target state="translated">デフォルトのハッシュ関数は、ハッシュシードを推論しにくくする意図で修正されています。</target>
        </trans-unit>
        <trans-unit id="917b792910290b9f104f9e9bb1c1c376f6e62a1b" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
          <target state="translated">デフォルトの実装では何もしません。</target>
        </trans-unit>
        <trans-unit id="ba4a564c2fb984db1b9ac70f6b103f10fd3f2c07" translate="yes" xml:space="preserve">
          <source>The default in Perl 5.8.0 and later is to automatically use the &lt;code&gt;:perlio&lt;/code&gt; layer.</source>
          <target state="translated">Perl 5.8.0以降のデフォルトでは、 &lt;code&gt;:perlio&lt;/code&gt; レイヤーが自動的に使用されます。</target>
        </trans-unit>
        <trans-unit id="c5b539403338a04682d5065664097088c7ee8126" translate="yes" xml:space="preserve">
          <source>The default indent space length is three. You can use &lt;code&gt;indent_length&lt;/code&gt; to change the length.</source>
          <target state="translated">デフォルトのインデントスペースの長さは3です。 &lt;code&gt;indent_length&lt;/code&gt; を使用して長さを変更できます。</target>
        </trans-unit>
        <trans-unit id="c034d8cea0ccefbe74b407c47763a2d7febf85bd" translate="yes" xml:space="preserve">
          <source>The default input &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is coming from. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDIN&lt;/code&gt; .</source>
          <target state="translated">プログラムのデフォルトの入力&lt;b&gt;ストリーム。&lt;/b&gt;可能であれば、データの送信元を気にする必要はありません。Perlプログラム内では、&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDIN&lt;/code&gt; によって&lt;b&gt;表され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="aeb8819256c2fefb2deae155f9c497a4ece2df39" translate="yes" xml:space="preserve">
          <source>The default input &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is coming from. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">プログラムのデフォルトの入力&lt;b&gt;ストリーム。&lt;/b&gt;可能であれば、データの送信元を気にする必要はありません。Perlプログラム内で&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDIN&lt;/code&gt; によって&lt;b&gt;表され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c65b453abcd65763f1788a5bfac88b6cf8e06702" translate="yes" xml:space="preserve">
          <source>The default input and pattern-searching space. The following pairs are equivalent:</source>
          <target state="translated">デフォルトの入力とパターン探索空間。以下のペアは等価です。</target>
        </trans-unit>
        <trans-unit id="cea52ce10c001ee673712587e9b895266781fd26" translate="yes" xml:space="preserve">
          <source>The default installation directory of Perl under PASE is /QOpenSys/perl. This can be modified if needed with Configure parameter -Dprefix=/some/dir.</source>
          <target state="translated">PASEでのPerlのデフォルトのインストールディレクトリは/QOpenSys/perlです。これは必要に応じて Configure パラメータ -Dprefix=/some/dir で変更することができます。</target>
        </trans-unit>
        <trans-unit id="c02bd4590e22b3fdced3d71cd3c3281cc1a0a660" translate="yes" xml:space="preserve">
          <source>The default installation location for this release uses the traditional UNIX directory layout under /usr/local. This is the recommended location for most users, and will leave the Apple-supplied Perl and its modules undisturbed.</source>
          <target state="translated">このリリースのデフォルトのインストール場所は、/usr/local 以下の伝統的な UNIX ディレクトリレイアウトを使用しています。これはほとんどのユーザに推奨されている場所であり、Appleが提供するPerlとそのモジュールは邪魔にならないでしょう。</target>
        </trans-unit>
        <trans-unit id="2cf27b908bba58a1adbe27495a165db5ad0a8770" translate="yes" xml:space="preserve">
          <source>The default is 0.</source>
          <target state="translated">デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="b6e007f998a46a63459c07f21e8e579bcd3ddb9e" translate="yes" xml:space="preserve">
          <source>The default is 0;</source>
          <target state="translated">デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="2fede1b14731afaa7b9b9368ecc641901f9fa509" translate="yes" xml:space="preserve">
          <source>The default is 1 when &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt; are enabled, 0 otherwise;</source>
          <target state="translated">&lt;a href=&quot;../warnings&quot;&gt;警告&lt;/a&gt;が有効な場合のデフォルトは1、それ以外の場合は0です。</target>
        </trans-unit>
        <trans-unit id="b58a909406f580df200ff808a155d67c594063fb" translate="yes" xml:space="preserve">
          <source>The default is 1 when &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; are enabled, 0 otherwise;</source>
          <target state="translated">&lt;a href=&quot;warnings&quot;&gt;警告&lt;/a&gt;が有効な場合のデフォルトは1、それ以外の場合は0です。</target>
        </trans-unit>
        <trans-unit id="515832f976590cbb3c71bc0d7d3d0a86a107732b" translate="yes" xml:space="preserve">
          <source>The default is 1.</source>
          <target state="translated">デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="895305ba9904fa755bf8e86c105e9e415a01803b" translate="yes" xml:space="preserve">
          <source>The default is 15 seconds. If you set this value to 0, no timeout will occur, but this is not recommended.</source>
          <target state="translated">デフォルトは15秒です。この値を 0 に設定するとタイムアウトは発生しませんが、これはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="df47c42104d45d72a320a61c09a39d1b3d97871e" translate="yes" xml:space="preserve">
          <source>The default is 1;</source>
          <target state="translated">デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="f462ad28c3fd0db899a9c6ebf2e36d1b531777fa" translate="yes" xml:space="preserve">
          <source>The default is 4096.</source>
          <target state="translated">デフォルトは4096です。</target>
        </trans-unit>
        <trans-unit id="32bc975de1e1a4635ed927b65955622d6412a442" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;0&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d612105f440a62563ca32f22b838324e618ccdeb" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9b05c3b862baf5dbb3b6628baf4b68b1570abdb4" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1e7ce922e57105bce0e95e91cfca276a6a4bf1ac" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt; for the root user and &lt;code&gt;0&lt;/code&gt; for normal users.</source>
          <target state="translated">デフォルトは、rootユーザーの場合は &lt;code&gt;1&lt;/code&gt; 、通常のユーザーの場合は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="96a31382338c2cce7d4e50686f56e0e9ff7debef" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bbf2b1ea0900573472d5b071e3de19f7567ee6bd" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b961dbd8be6b25800dc4b37b67546efccad28f8e" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bfbfc9925e2dd8470367ef4195617d71c6222d8e" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc194b0254a7cf1688815756a4f2837510b9b267" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a908c10942fd5ae6b565f1ce15f1bbfadcedfbe1" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="40557fe038c23288a394f8bc56206a7b66f1744c" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;die&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;die&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb390eebfd5c04071c6f9ae432a01e30ec460a80" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;pod&lt;/code&gt; .</source>
          <target state="translated">デフォルトは &lt;code&gt;pod&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9a27550390154dabd1f6cbb3ac3486e6b597d5bd" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;pod&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;pod&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3d0a0f1ca8eef2f6fbf6f39dbd7668ad5fbc612a" translate="yes" xml:space="preserve">
          <source>The default is Z_DEFAULT_COMPRESSION.</source>
          <target state="translated">デフォルトは Z_DEFAULT_COMPRESSION です。</target>
        </trans-unit>
        <trans-unit id="ae93ce6388b29eb983caf1def75b439a9873a0b9" translate="yes" xml:space="preserve">
          <source>The default is Z_DEFAULT_STRATEGY.</source>
          <target state="translated">デフォルトは Z_DEFAULT_STRATEGY です。</target>
        </trans-unit>
        <trans-unit id="c52e69ffb8153da22fcf2e0c6d6adcb6a6ff963d" translate="yes" xml:space="preserve">
          <source>The default is false.</source>
          <target state="translated">デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="b30329767ad59c2dc5630061d1ce79106ced2716" translate="yes" xml:space="preserve">
          <source>The default is no dictionary.</source>
          <target state="translated">デフォルトでは辞書はありません。</target>
        </trans-unit>
        <trans-unit id="0eaff3b0b1b9eb661e7fc7bd656a07d77ba2a1ef" translate="yes" xml:space="preserve">
          <source>The default is not to cuddle.</source>
          <target state="translated">抱っこはしないのがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="7226202181b27bad8c72a76152482ae3e839b2c6" translate="yes" xml:space="preserve">
          <source>The default is to simply return the event package name.</source>
          <target state="translated">デフォルトでは、単にイベントパッケージ名を返すだけです。</target>
        </trans-unit>
        <trans-unit id="9c65dc0d3752b5562d0e04006d66de6352709010" translate="yes" xml:space="preserve">
          <source>The default is to try &lt;code&gt;native&lt;/code&gt; , &lt;code&gt;tcp&lt;/code&gt; , &lt;code&gt;udp&lt;/code&gt; , &lt;code&gt;unix&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; , &lt;code&gt;console&lt;/code&gt; . Under systems with the Win32 API, &lt;code&gt;eventlog&lt;/code&gt; will be added as the first mechanism to try if &lt;code&gt;Win32::EventLog&lt;/code&gt; is available.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;native&lt;/code&gt; 、 &lt;code&gt;tcp&lt;/code&gt; 、 &lt;code&gt;udp&lt;/code&gt; 、 &lt;code&gt;unix&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;stream&lt;/code&gt; 、 &lt;code&gt;console&lt;/code&gt; を試します。Win32 APIを備えたシステムでは、 &lt;code&gt;Win32::EventLog&lt;/code&gt; が利用可能である場合、最初に試行するメカニズムとして &lt;code&gt;eventlog&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="ae6954e08dfdc077f1f7dcc91f272e939cf877ea" translate="yes" xml:space="preserve">
          <source>The default is to try &lt;code&gt;native&lt;/code&gt;, &lt;code&gt;tcp&lt;/code&gt;, &lt;code&gt;udp&lt;/code&gt;, &lt;code&gt;unix&lt;/code&gt;, &lt;code&gt;pipe&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt;. Under systems with the Win32 API, &lt;code&gt;eventlog&lt;/code&gt; will be added as the first mechanism to try if &lt;code&gt;Win32::EventLog&lt;/code&gt; is available.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;native&lt;/code&gt; 、 &lt;code&gt;tcp&lt;/code&gt; 、 &lt;code&gt;udp&lt;/code&gt; 、 &lt;code&gt;unix&lt;/code&gt; 、 &lt;code&gt;pipe&lt;/code&gt; 、 &lt;code&gt;stream&lt;/code&gt; 、 &lt;code&gt;console&lt;/code&gt; を試します。Win32 APIを備えたシステムでは、 &lt;code&gt;Win32::EventLog&lt;/code&gt; が使用可能な場合に最初に試行するメカニズムとして &lt;code&gt;eventlog&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="69bb3e1a426b5cc38eac62d98ea857e63ed9b5dd" translate="yes" xml:space="preserve">
          <source>The default iterator variable in a &lt;code&gt;foreach&lt;/code&gt; loop if no other variable is supplied.</source>
          <target state="translated">他の変数が指定されていない場合の &lt;code&gt;foreach&lt;/code&gt; ループのデフォルトのイテレーター変数。</target>
        </trans-unit>
        <trans-unit id="375ddf0ab7799023484d02f8a221ca6afd3b2054" translate="yes" xml:space="preserve">
          <source>The default memory limit is 2Mib. You can adjust the maximum read cache size by supplying the &lt;code&gt;memory&lt;/code&gt; option. The argument is the desired cache size, in bytes.</source>
          <target state="translated">デフォルトのメモリ制限は2Mibです。 &lt;code&gt;memory&lt;/code&gt; オプションを指定することで、最大読み取りキャッシュサイズを調整できます。引数は、必要なキャッシュサイズ（バイト単位）です。</target>
        </trans-unit>
        <trans-unit id="97d617432e38273ff2337188090afe707d321e91" translate="yes" xml:space="preserve">
          <source>The default method is ZIP_CM_DEFLATE.</source>
          <target state="translated">デフォルトの方法は、ZIP_CM_DEFLATEです。</target>
        </trans-unit>
        <trans-unit id="d06faea5104288d8b0b633dc0567b8b191f0df74" translate="yes" xml:space="preserve">
          <source>The default name of the new configuration file is &quot;libnet.cfg&quot;, and by default it is written to the current directory, unless otherwise specified using the -o option, &lt;code&gt;-o newfile&lt;/code&gt; .</source>
          <target state="translated">新しい構成ファイルのデフォルト名は「libnet.cfg」で、デフォルトでは、-oオプション &lt;code&gt;-o newfile&lt;/code&gt; を使用して指定されていない限り、現在のディレクトリに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="408dfa6f2b57602d832595e17787ee724e235423" translate="yes" xml:space="preserve">
          <source>The default name of the new configuration file is &quot;libnet.cfg&quot;, and by default it is written to the current directory, unless otherwise specified using the -o option, &lt;code&gt;-o newfile&lt;/code&gt;.</source>
          <target state="translated">新しい構成ファイルのデフォルト名は「libnet.cfg」であり、-oオプション &lt;code&gt;-o newfile&lt;/code&gt; を使用して特に指定されていない限り、デフォルトでは現在のディレクトリに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2e5074809750e6c620d635552cb416989d3d15b2" translate="yes" xml:space="preserve">
          <source>The default name of the old configuration file is by default &quot;libnet.cfg&quot;, unless otherwise specified using the -i option, &lt;code&gt;-i oldfile&lt;/code&gt; , and it is searched first from the current directory, and then from your module path.</source>
          <target state="translated">古い構成ファイルのデフォルト名は、デフォルトで「libnet.cfg」です。ただし、-iオプション &lt;code&gt;-i oldfile&lt;/code&gt; を使用して特に指定されていない限り、最初に現在のディレクトリから、次にモジュールパスから検索されます。</target>
        </trans-unit>
        <trans-unit id="1fef6f94288b1eff625c2f95ef7ecffd1ba05913" translate="yes" xml:space="preserve">
          <source>The default name of the old configuration file is by default &quot;libnet.cfg&quot;, unless otherwise specified using the -i option, &lt;code&gt;-i oldfile&lt;/code&gt;, and it is searched first from the current directory, and then from your module path.</source>
          <target state="translated">古い構成ファイルのデフォルト名は、-iオプション &lt;code&gt;-i oldfile&lt;/code&gt; を使用して特に指定されていない限り、デフォルトで「libnet.cfg」であり、最初に現在のディレクトリから検索され、次にモジュールパスから検索されます。</target>
        </trans-unit>
        <trans-unit id="5eb6185afb472dae00827acf41154ba83b345446" translate="yes" xml:space="preserve">
          <source>The default normalizer just concatenates the arguments with character 28 in between. (In ASCII, this is called FS or control-\.) This always works correctly for functions with only one string argument, and also when the arguments never contain character 28. However, it can confuse certain argument lists:</source>
          <target state="translated">デフォルトのノーマライザは、引数の間に文字28を挟んで連結するだけです。(ASCIIでは、これはFSまたはcontrol-\と呼ばれています。)これは、文字列の引数が1つだけの関数では常に正しく動作し、また、引数に文字28が含まれない場合にも正しく動作します。しかし、これは特定の引数リストを混乱させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b39e82de8afe051a851d53770ae84cf3c68d41cb" translate="yes" xml:space="preserve">
          <source>The default normalizer will turn this into something like &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; . That would be all right, except that a subsequent array of numbers might be stored at a different location even though it contains the same data. If this happens, &lt;code&gt;Memoize&lt;/code&gt; will think that the arguments are different, even though they are equivalent. In this case, a normalizer like this is appropriate:</source>
          <target state="translated">デフォルトのノーマライザはこれを &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; ようなものに変えます。同じデータが含まれていても、後続の数値の配列が別の場所に格納される可能性があることを除いて、それで問題ありません。これが発生した場合、 &lt;code&gt;Memoize&lt;/code&gt; は、たとえ同等であるとしても、引数が異なると見なします。この場合、次のようなノーマライザが適切です。</target>
        </trans-unit>
        <trans-unit id="82517263c6d17f4e83cb2dad91556a271e1fb059" translate="yes" xml:space="preserve">
          <source>The default normalizer will turn this into something like &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt;. That would be all right, except that a subsequent array of numbers might be stored at a different location even though it contains the same data. If this happens, &lt;code&gt;Memoize&lt;/code&gt; will think that the arguments are different, even though they are equivalent. In this case, a normalizer like this is appropriate:</source>
          <target state="translated">デフォルトのノーマライザーは、これを &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; ようなものに変換します。同じデータが含まれていても、後続の数値の配列が別の場所に格納される可能性があることを除いて、それは問題ありません。これが発生した場合、 &lt;code&gt;Memoize&lt;/code&gt; は、引数が同等であっても、引数が異なると見なします。この場合、次のようなノーマライザーが適切です。</target>
        </trans-unit>
        <trans-unit id="e5d60aed408340ddef56e731c14beba1f193a756" translate="yes" xml:space="preserve">
          <source>The default of building Perl statically may cause problems with complex applications like Tk: in that case consider building shared Perl</source>
          <target state="translated">Perl を静的にビルドするデフォルトの方法は、Tk のような複雑なアプリケーションで問題が発生する可能性があります:その場合は、共有 Perl のビルドを検討してください。</target>
        </trans-unit>
        <trans-unit id="ac5f6413f6edd9db793b85ce42ea2d862be3c9a0" translate="yes" xml:space="preserve">
          <source>The default operator mask for a newly created compartment is the ':default' optag.</source>
          <target state="translated">新しく作成されたコンパートメントのデフォルトの演算子マスクは ':default' オプタグです。</target>
        </trans-unit>
        <trans-unit id="cd7a35f6ae99c836f5d425b35999dec2510b2218" translate="yes" xml:space="preserve">
          <source>The default options gathered by Configure with the assistance of</source>
          <target state="translated">の支援を受けて Configure が収集したデフォルトのオプションは、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="340bacd1cab82a806d284b26719b4d768c188a8d" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for nasty remarks that don&amp;rsquo;t belong in &lt;b&gt;standard output&lt;/b&gt;. Represented within a Perl program by the output&amp;gt; &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDERR&lt;/code&gt; . You can use this stream explicitly, but the &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; built-ins write to your standard error stream automatically (unless trapped or otherwise intercepted).</source>
          <target state="translated">&lt;b&gt;標準出力に&lt;/b&gt;属さない厄介なコメントのデフォルトの出力&lt;b&gt;ストリーム&lt;/b&gt;。Perlプログラム内では、output&amp;gt; &lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDERR&lt;/code&gt; で表されます。このストリームを明示的に使用できますが、 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; ビルトインは、標準のエラーストリームに自動的に書き込みます（トラップされない場合やインターセプトされない場合）。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="9d2c9ac156cbf55108641e915b384d66d9246e77" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for nasty remarks that don&amp;rsquo;t belong in &lt;b&gt;standard output&lt;/b&gt;. Represented within a Perl program by the output&amp;gt; &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDERR&lt;/code&gt;. You can use this stream explicitly, but the &lt;code&gt;die&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; built-ins write to your standard error stream automatically (unless trapped or otherwise intercepted).</source>
          <target state="translated">&lt;b&gt;標準出力に&lt;/b&gt;属さない厄介な発言のデフォルト出力&lt;b&gt;ストリーム&lt;/b&gt;。Perlプログラム内では、出力&amp;gt;&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDERR&lt;/code&gt; によって表されます。このストリームは明示的に使用できますが、 &lt;code&gt;die&lt;/code&gt; and &lt;code&gt;warn&lt;/code&gt; ビルトインは、標準エラーストリームに自動的に書き込みます（トラップされたり、傍受されたりしない限り）。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="aa254ec270a416bb3ac03f5a884b155a435c80cb" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is going. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDOUT&lt;/code&gt; .</source>
          <target state="translated">プログラムのデフォルトの出力&lt;b&gt;ストリーム。&lt;/b&gt;可能であれば、データの送信先を気にする必要はありません。Perlプログラム内では、&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDOUT&lt;/code&gt; によって&lt;b&gt;表され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ce1dc62266e22cc3e68d183b4a85d64622b5e7d5" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is going. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="translated">プログラムのデフォルトの出力&lt;b&gt;ストリーム。&lt;/b&gt;可能であれば、データの送信先を気にする必要はありません。Perlプログラム内で&lt;b&gt;ファイルハンドル&lt;/b&gt; &lt;code&gt;STDOUT&lt;/code&gt; によって&lt;b&gt;表され&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e96d4d616212a6cfd4d2816b5ab3f17c9db66319" translate="yes" xml:space="preserve">
          <source>The default output of self-referential structures can be &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed, but the nested references to &lt;code&gt;$VAR&lt;/code&gt;</source>
          <target state="translated">自己参照構造のデフォルトの出力は &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; できますが、 &lt;code&gt;$VAR&lt;/code&gt; へのネストされた参照</target>
        </trans-unit>
        <trans-unit id="ab4464102ba1e6fbe0c2c60b9748efe43e91939d" translate="yes" xml:space="preserve">
          <source>The default output of self-referential structures can be &lt;code&gt;eval&lt;/code&gt;ed, but the nested references to &lt;code&gt;$VAR&lt;/code&gt;</source>
          <target state="translated">自己参照構造のデフォルト出力は &lt;code&gt;eval&lt;/code&gt; できますが、ネストされた &lt;code&gt;$VAR&lt;/code&gt; への参照</target>
        </trans-unit>
        <trans-unit id="a5f2d9e51d87e9b71a9bd992e69d11af3ccda88f" translate="yes" xml:space="preserve">
          <source>The default path for perl binary is /QOpenSys/perl/bin/perl. You'll want to symlink /QOpenSys/usr/bin/perl to this file so you don't have to modify your path.</source>
          <target state="translated">perl バイナリのデフォルトパスは /QOpenSys/perl/bin/perl です。このファイルに /QOpenSys/usr/bin/perl をシンボリックリンクすると、パスを変更する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="c0e7903465e131bba24e8f9fa0f5926ebf1b8dce" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size for different platforms varies significantly, and is almost always far more than is needed for most applications. On Win32, Perl's makefile explicitly sets the default stack to 16 MB; on most other platforms, the system default is used, which again may be much larger than is needed.</source>
          <target state="translated">スレッドごとのデフォルトのスタックサイズはプラットフォームによって大きく異なり、ほとんどの場合、ほとんどのアプリケーショ ンで必要とされるスタックサイズをはるかに超えています。Win32 では、Perl の makefile はデフォルトのスタックサイズを 16 MB に明示的に設定しています。</target>
        </trans-unit>
        <trans-unit id="02fbe3c9bc6d319100d5d82a643c83d45a2aaf27" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size may be set at the start of the application through the use of the environment variable &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; :</source>
          <target state="translated">スレッドごとのデフォルトのスタックサイズは、環境変数 &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; を使用して、アプリケーションの開始時に設定できます。</target>
        </trans-unit>
        <trans-unit id="94af03e91a740f430511958dbcda39a82148e50f" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size may be set at the start of the application through the use of the environment variable &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt;:</source>
          <target state="translated">デフォルトのスレッドごとのスタックサイズは、アプリケーションの開始時に環境変数 &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="d17c04396f5d2338f66524479b64e4296e2bc5c4" translate="yes" xml:space="preserve">
          <source>The default perl executable is flexible enough to support most usages. However, one may want something yet more flexible; for example, one may want to find Perl DLL relatively to the location of the EXE file; or one may want to ignore the environment when setting the Perl-library search patch, etc.</source>
          <target state="translated">デフォルトの perl 実行ファイルは、ほとんどの用途をサポートするのに十分な柔軟性を持っています。しかし、もっと柔軟性のあるものが欲しいと思うかもしれません。例えば、Perl DLL を EXE ファイルの場所から相対的に見つけたい、Perl ライブラリ検索パッチを設定するときに環境を無視したいなどです。</target>
        </trans-unit>
        <trans-unit id="7009bdcf386245a7873fc69dc2c48c3bfdcf71d9" translate="yes" xml:space="preserve">
          <source>The default permissions to use if a new file is created. The actual permissions will be modified by the user's umask, so you should probably use 0666 here. (See &lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;.)</source>
          <target state="translated">新しいファイルが作成された場合に使用するデフォルトの権限。実際の権限はユーザーのumaskによって変更されるため、ここではおそらく0666を使用する必要があります。（&lt;a href=&quot;functions/umask&quot;&gt;umaskを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="81e2f33b41f0b680f7cab719bcc71740e182cd7b" translate="yes" xml:space="preserve">
          <source>The default permissions to use if a new file is created. The actual permissions will be modified by the user's umask, so you should probably use 0666 here. (See &lt;a href=&quot;perlfunc#umask&quot;&gt;&quot;umask&quot; in perlfunc&lt;/a&gt;.)</source>
          <target state="translated">新しいファイルが作成された場合に使用するデフォルトの権限。実際の権限はユーザーのumaskによって変更されるため、ここではおそらく0666を使用する必要があります。（&lt;a href=&quot;perlfunc#umask&quot;&gt;perlfuncの「umask」を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="af672db5716c0b823ab6d08666d2a653d572eae5" translate="yes" xml:space="preserve">
          <source>The default place to put the next value or input record when a &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; operation's result is tested by itself as the sole criterion of a &lt;code&gt;while&lt;/code&gt; test. Outside a &lt;code&gt;while&lt;/code&gt; test, this will not happen.</source>
          <target state="translated">&lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 操作の結果が、 &lt;code&gt;while&lt;/code&gt; テストの唯一の基準として単独でテストされるときに、次の値または入力レコードを配置するデフォルトの場所。外で &lt;code&gt;while&lt;/code&gt; テスト、これは発生しません。</target>
        </trans-unit>
        <trans-unit id="d37b151c3f1ab65346e3808827390e5bd84764e9" translate="yes" xml:space="preserve">
          <source>The default place to put the next value or input record when a &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt;, &lt;code&gt;readdir&lt;/code&gt; or &lt;code&gt;each&lt;/code&gt; operation's result is tested by itself as the sole criterion of a &lt;code&gt;while&lt;/code&gt; test. Outside a &lt;code&gt;while&lt;/code&gt; test, this will not happen.</source>
          <target state="translated">&lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; 、 &lt;code&gt;readline&lt;/code&gt; 、 &lt;code&gt;readdir&lt;/code&gt; 、または &lt;code&gt;each&lt;/code&gt; 操作の結果が &lt;code&gt;while&lt;/code&gt; テストの唯一の基準として単独でテストされるときに、次の値または入力レコードを配置するデフォルトの場所。 &lt;code&gt;while&lt;/code&gt; テスト以外では、これは起こりません。</target>
        </trans-unit>
        <trans-unit id="c5df9208ed1f779ba0f9d5864d277d9b22483511" translate="yes" xml:space="preserve">
          <source>The default rendering is top-down, so they're not in execution order. This form reflects the way the stack is used to parse and evaluate expressions; the add operates on the two terms below it in the tree.</source>
          <target state="translated">デフォルトのレンダリングはトップダウンなので、実行順ではありません。この形式は、スタックが式の解析と評価に使用される方法を反映しています。</target>
        </trans-unit>
        <trans-unit id="2fc20ab6a2146e41cd4461ac23c56be7f29f5c25" translate="yes" xml:space="preserve">
          <source>The default rounding mode is 'even'. By using &lt;code&gt;Math::BigFloat-&amp;gt;round_mode($round_mode);&lt;/code&gt; you can get and set the default mode for subsequent rounding. The usage of &lt;code&gt;$Math::BigFloat::$round_mode&lt;/code&gt; is no longer supported. The second parameter to the round functions then overrides the default temporarily.</source>
          <target state="translated">デフォルトの丸めモードは「偶数」です。使用することで &lt;code&gt;Math::BigFloat-&amp;gt;round_mode($round_mode);&lt;/code&gt; 後続の丸めのデフォルトモードを取得および設定できます。使用 &lt;code&gt;$Math::BigFloat::$round_mode&lt;/code&gt; サポートされなくなりました。ラウンド関数の2番目のパラメーターは、デフォルトを一時的にオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="0c0082ed0ee0f68ac7247af3405f6e36532a7d14" translate="yes" xml:space="preserve">
          <source>The default set of layers should give acceptable results on all platforms</source>
          <target state="translated">デフォルトのレイヤーのセットは、すべてのプラットフォームで許容できる結果を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="df981f37a11491520138a9699f03c2d8e3a6701d" translate="yes" xml:space="preserve">
          <source>The default set of layers should give acceptable results on all platforms.</source>
          <target state="translated">デフォルトのレイヤーのセットは、すべてのプラットフォームで許容できる結果を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="98f212f2163021f600388dfedb85757788b2ee77" translate="yes" xml:space="preserve">
          <source>The default sort function is cmp, string comparison, which would sort &lt;code&gt;(1, 2, 10)&lt;/code&gt; into &lt;code&gt;(1, 10, 2)&lt;/code&gt; . &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; , used above, is the numerical comparison operator.</source>
          <target state="translated">デフォルトのソート関数は文字列比較であるcmpで、（1、2、10 &lt;code&gt;(1, 2, 10)&lt;/code&gt; を &lt;code&gt;(1, 10, 2)&lt;/code&gt; 1、10、2）にソートします。上記で使用されている &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; は数値比較演算子です。</target>
        </trans-unit>
        <trans-unit id="353560b1cc4cc620cb2f91f0d6a0c54645b715f0" translate="yes" xml:space="preserve">
          <source>The default sort function is cmp, string comparison, which would sort &lt;code&gt;(1, 2, 10)&lt;/code&gt; into &lt;code&gt;(1, 10, 2)&lt;/code&gt;. &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, used above, is the numerical comparison operator.</source>
          <target state="translated">デフォルトのソート関数はcmp、文字列比較で、（1、2、10 &lt;code&gt;(1, 2, 10)&lt;/code&gt; を &lt;code&gt;(1, 10, 2)&lt;/code&gt; 1、10、2）にソートします。上記で使用されている &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; は、数値比較演算子です。</target>
        </trans-unit>
        <trans-unit id="d032c7cba8f64635473f913417491617017d4ca8" translate="yes" xml:space="preserve">
          <source>The default stringification for version objects returns exactly the same string as was used to create it, whether you used &lt;code&gt;new()&lt;/code&gt; or &lt;code&gt;qv()&lt;/code&gt;, with one exception. The sole exception is if the object was created using &lt;code&gt;qv()&lt;/code&gt; and the initializer did not have two decimal places or a leading 'v' (both optional), then the stringified form will have a leading 'v' prepended, in order to support round-trip processing.</source>
          <target state="translated">バージョンオブジェクトのデフォルトの文字列化は、 &lt;code&gt;new()&lt;/code&gt; または &lt;code&gt;qv()&lt;/code&gt; のどちらを使用したかに関係なく、1つの例外を除いて、作成に使用されたものとまったく同じ文字列を返します。唯一の例外は、オブジェクトが &lt;code&gt;qv()&lt;/code&gt; を使用して作成され、初期化子に小数点以下2桁または先頭の「v」（両方ともオプション）がない場合、サポートするために、文字列形式の先頭に先頭の「v」が付きます。往復処理。</target>
        </trans-unit>
        <trans-unit id="baa9ec2a72f812d2fff5978a7051ec1d9ead2a46" translate="yes" xml:space="preserve">
          <source>The default subscript separator is &quot;\034&quot;, the same as SUBSEP in &lt;b&gt;awk&lt;/b&gt;.</source>
          <target state="translated">デフォルトの添え字セパレータは「\ 034」で、これは&lt;b&gt;awkの&lt;/b&gt; SUBSEPと同じです。</target>
        </trans-unit>
        <trans-unit id="497fecb3c603ebf0c33d9ba37b78e38f23ed6d1f" translate="yes" xml:space="preserve">
          <source>The default text formatter is &lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt;. The base class for Pod::Usage can be defined by pre-setting &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt;</source>
          <target state="translated">デフォルトのテキストフォーマッタは&lt;a href=&quot;Pod::Text&quot;&gt;Pod :: Text&lt;/a&gt;です。Pod :: Usageの基本クラスは、 &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt; 事前設定することで定義できます。</target>
        </trans-unit>
        <trans-unit id="fedbef30ad12f7c78358c3195161f7bf65ed2265" translate="yes" xml:space="preserve">
          <source>The default text formatter is &lt;a href=&quot;text&quot;&gt;Pod::Text&lt;/a&gt;. The base class for Pod::Usage can be defined by pre-setting &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt;</source>
          <target state="translated">デフォルトのテキストフォーマッタは&lt;a href=&quot;text&quot;&gt;Pod :: Text&lt;/a&gt;です。Pod :: Usageの基本クラスは、 &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt; 事前設定することで定義できます。</target>
        </trans-unit>
        <trans-unit id="2eca7e39567cc3a4e38f07441f8e4f7046f9b14f" translate="yes" xml:space="preserve">
          <source>The default type for the constants. If not specified &lt;code&gt;IV&lt;/code&gt; is assumed.</source>
          <target state="translated">定数のデフォルトのタイプ。指定しない場合、 &lt;code&gt;IV&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="3a6f652439685a6a403073936eade467faa79602" translate="yes" xml:space="preserve">
          <source>The default typemap in the</source>
          <target state="translated">のデフォルトのタイプマップは</target>
        </trans-unit>
        <trans-unit id="82f3cb0c641077271c3068ea9c85e22ba715cfbb" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;div_scale&lt;/code&gt; is 40.</source>
          <target state="translated">&lt;code&gt;div_scale&lt;/code&gt; のデフォルト値は40です。</target>
        </trans-unit>
        <trans-unit id="609bf4918ead31f720f19323f5cf2348643f6d2e" translate="yes" xml:space="preserve">
          <source>The default value for CCHOME in the makefiles for Visual C++ may not be correct for some versions. Make sure the default exists and is valid.</source>
          <target state="translated">Visual C++の makefile の CCHOME のデフォルト値は、バージョンによっては正しくない場合があります。デフォルトが存在し、有効であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="80bc06aeaa38f855546b7a2a3a5c29a6a05fdf78" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;30&lt;/code&gt; seconds.</source>
          <target state="translated">デフォルト値は &lt;code&gt;30&lt;/code&gt; 秒です。</target>
        </trans-unit>
        <trans-unit id="1f34862d6782defbe2c5b2a0445c8f00de39fa4d" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; and &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; . An INTERFACE keyword with an empty list of functions can be omitted if INTERFACE_MACRO keyword is used.</source>
          <target state="translated">デフォルト値は &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; および &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; です。関数のリストが空のINTERFACEキーワードは、INTERFACE_MACROキーワードが使用されている場合は省略できます。</target>
        </trans-unit>
        <trans-unit id="32834cb885f5de67f85718b2d51a3b3a71e20354" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; and &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt;. An INTERFACE keyword with an empty list of functions can be omitted if INTERFACE_MACRO keyword is used.</source>
          <target state="translated">デフォルト値は &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; および &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; です。INTERFACE_MACROキーワードを使用する場合は、関数のリストが空のINTERFACEキーワードを省略できます。</target>
        </trans-unit>
        <trans-unit id="3ae2f809fd681df4fcb45c0c13d99a0283fc66b8" translate="yes" xml:space="preserve">
          <source>The definition used for complex arguments of atan2() is</source>
          <target state="translated">atan2()の複雑な引数に使われる定義は</target>
        </trans-unit>
        <trans-unit id="6431fb44fb840f90a758f20a67dcf8b7a9374aa9" translate="yes" xml:space="preserve">
          <source>The del_dup() Method</source>
          <target state="translated">del_dup()メソッド</target>
        </trans-unit>
        <trans-unit id="4c063e0f96bfc07d5c7996a96961c2627b3a8bf5" translate="yes" xml:space="preserve">
          <source>The delimiter is used to determine the &lt;b&gt;exact&lt;/b&gt; whitespace to remove from the beginning of each line. All lines &lt;b&gt;must&lt;/b&gt; have at least the same starting whitespace (except lines only containing a newline) or perl will croak. Tabs and spaces can be mixed, but are matched exactly. One tab will not be equal to 8 spaces!</source>
          <target state="translated">区切り文字は、各行の先頭から削除する&lt;b&gt;正確な&lt;/b&gt;空白を決定するために使用されます。すべての行が&lt;b&gt;なければなりません&lt;/b&gt;（唯一の改行を含む行を除く）少なくとも同じ開始空白を持っているか、perlはcroakします。タブとスペースを混在させることができますが、正確に一致します。1つのタブは8つのスペースに等しくなりません！</target>
        </trans-unit>
        <trans-unit id="ed1ded41373481d9b3a2afdb892465f6f5d0d39d" translate="yes" xml:space="preserve">
          <source>The delimiter provided to &lt;code&gt;extract_bracketed&lt;/code&gt; was not one of &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; に提供された区切り文字は、 &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; の 1つではありませんでした。</target>
        </trans-unit>
        <trans-unit id="3c4b77b961d2e96dc174edd63ec1e4a27ffd7394" translate="yes" xml:space="preserve">
          <source>The delimiter provided to &lt;code&gt;extract_bracketed&lt;/code&gt; was not one of &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; に提供された区切り文字は、 &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; のいずれでもありませんでした。</target>
        </trans-unit>
        <trans-unit id="0e6b6844fe43a8d8ec1aad6ff952638a46635ab3" translate="yes" xml:space="preserve">
          <source>The denizens of makemaker@perl.org.</source>
          <target state="translated">makemaker@perl.org の住人。</target>
        </trans-unit>
        <trans-unit id="04df92977d147f1a13e2b1c8b477d27313374630" translate="yes" xml:space="preserve">
          <source>The deprecated features will be grouped by the version of Perl in which they will be removed.</source>
          <target state="translated">非推奨の機能は、削除されるPerlのバージョンによってグループ化されます。</target>
        </trans-unit>
        <trans-unit id="5a1156b058c0b8098efde49eb59cb1671d23c2fe" translate="yes" xml:space="preserve">
          <source>The dereferencing cases (as opposed to method-calling cases) are somewhat extended by the &lt;code&gt;postderef&lt;/code&gt; feature. For the details of that feature, consult &lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;&quot;Postfix Dereference Syntax&quot; in perlref&lt;/a&gt;.</source>
          <target state="translated">（メソッド呼び出しの場合とは対照的に）間接参照の場合は、 &lt;code&gt;postderef&lt;/code&gt; 機能によっていくらか拡張されます。その機能の詳細については&lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;、perlrefの「Postfix逆参照構文」を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d6c12d31655a68b617bd8f8ac7d7b41ffa97d8df" translate="yes" xml:space="preserve">
          <source>The dereferencing cases (as opposed to method-calling cases) are somewhat extended by the experimental &lt;code&gt;postderef&lt;/code&gt; feature. For the details of that feature, consult &lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;Postfix Dereference Syntax in perlref&lt;/a&gt;.</source>
          <target state="translated">（メソッド呼び出しの場合とは対照的に）逆参照の場合は、実験的な &lt;code&gt;postderef&lt;/code&gt; 機能によって多少拡張されます。その機能の詳細については&lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;、perlrefのPostfix Dereference Syntaxを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e1ecac0ff0943f872a0e4773ff40533e7fc7967" translate="yes" xml:space="preserve">
          <source>The description will also include tags for other special editions, like &quot;R2&quot;, &quot;Media Center&quot;, &quot;Tablet PC&quot;, or &quot;Starter Edition&quot;.</source>
          <target state="translated">説明文には、「R2」や「メディアセンター」、「タブレットPC」、「スターターエディション」など、他のスペシャルエディションのタグも記載されています。</target>
        </trans-unit>
        <trans-unit id="c06b4b9a1d8e7058531ada60d67614dbcf01dfd0" translate="yes" xml:space="preserve">
          <source>The deserializing hook called on the object during deserialization. But wait: if we're deserializing, there's no object yet... right?</source>
          <target state="translated">デシリアライズ中にオブジェクトに呼び出されるデシリアライズフック。でも待ってください:デシリアライズしていると、まだオブジェクトがないんですよね...?</target>
        </trans-unit>
        <trans-unit id="8a2f99ef5bda346c32f63e70a7361acb83da8b02" translate="yes" xml:space="preserve">
          <source>The design intent is for &lt;code&gt;\d&lt;/code&gt; to exactly match the set of characters that can safely be used with &quot;normal&quot; big-endian positional decimal syntax, where, for example 123 means one 'hundred', plus two 'tens', plus three 'ones'. This positional notation does not necessarily apply to characters that match the other type of &quot;digit&quot;, &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; , and so &lt;code&gt;\d&lt;/code&gt; doesn't match them.</source>
          <target state="translated">設計意図は、 &lt;code&gt;\d&lt;/code&gt; が「通常の」ビッグエンディアン定位置10進構文で安全に使用できる文字セットと完全に一致することです。たとえば、123は、1つの「百」、2つの「10」、および3つの「」を意味します。もの。この位置表記は、他のタイプの「数字」に一致する文字 &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; に必ずしも適用されるわけではないため、 &lt;code&gt;\d&lt;/code&gt; はそれらに一致しません。</target>
        </trans-unit>
        <trans-unit id="f61094774e8ce7d5c193ad9edc881d479e0d9584" translate="yes" xml:space="preserve">
          <source>The design intent is for &lt;code&gt;\d&lt;/code&gt; to exactly match the set of characters that can safely be used with &quot;normal&quot; big-endian positional decimal syntax, where, for example 123 means one 'hundred', plus two 'tens', plus three 'ones'. This positional notation does not necessarily apply to characters that match the other type of &quot;digit&quot;, &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt;, and so &lt;code&gt;\d&lt;/code&gt; doesn't match them.</source>
          <target state="translated">設計の目的は、 &lt;code&gt;\d&lt;/code&gt; が、「通常の」ビッグエンディアンの位置10進構文で安全に使用できる文字のセットと正確に一致することです。もの」。この位置表記は、他のタイプの「数字」、 &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; に一致する文字には必ずしも適用されないため、 &lt;code&gt;\d&lt;/code&gt; はそれらに一致しません。</target>
        </trans-unit>
        <trans-unit id="c8a51af6f52e45aaf611688acf5b39dc61f9ae40" translate="yes" xml:space="preserve">
          <source>The desire of users to express filenames of the form &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; on the command line unquoted causes problems, too: &lt;a href=&quot;perlop#qx%2FSTRING%2F&quot;&gt;&lt;code&gt;``&lt;/code&gt;&lt;/a&gt; command output capture has to perform a guessing game. It assumes that a string &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; is a reference to an environment variable, whereas anything else involving &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; is redirection, and generally manages to be 99% right. Of course, the problem remains that scripts cannot rely on any Unix tools being available, or that any tools found have Unix-like command line arguments.</source>
          <target state="translated">引用符で囲まれていないコマンドラインで &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; 形式のファイル名を表現したいというユーザーの要望も、問題を引き起こします：&lt;a href=&quot;perlop#qx%2FSTRING%2F&quot;&gt; &lt;code&gt;``&lt;/code&gt; &lt;/a&gt;コマンド出力キャプチャは推測ゲームを実行する必要があります。文字列 &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; が環境変数への参照であると想定しますが、 &lt;code&gt;&amp;lt;&lt;/code&gt; または &lt;code&gt;&amp;gt;&lt;/code&gt; を含むその他のものはリダイレクトであり、通常は99％正しく管理されます。もちろん、スクリプトが利用可能なUnixツールに依存できないこと、または見つかったツールにUnixライクなコマンドライン引数があるという問題が残っています。</target>
        </trans-unit>
        <trans-unit id="d6ec3b1b57d74d9cf92c20c7537d430a4cb91982" translate="yes" xml:space="preserve">
          <source>The desire of users to express filenames of the form &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; on the command line unquoted causes problems, too: &lt;code&gt;``&lt;/code&gt; command output capture has to perform a guessing game. It assumes that a string &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; is a reference to an environment variable, whereas anything else involving &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; is redirection, and generally manages to be 99% right. Of course, the problem remains that scripts cannot rely on any Unix tools being available, or that any tools found have Unix-like command line arguments.</source>
          <target state="translated">コマンドラインで &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; という形式のファイル名を引用符で囲まずに表現したいというユーザーの要望も問題を引き起こします： &lt;code&gt;``&lt;/code&gt; コマンド出力のキャプチャは、推測ゲームを実行する必要があります。文字列 &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; は環境変数への参照であると想定していますが、 &lt;code&gt;&amp;lt;&lt;/code&gt; または &lt;code&gt;&amp;gt;&lt;/code&gt; に関係するものはすべてリダイレクトであり、通常は99％正しく管理されています。もちろん、問題は、スクリプトが利用可能なUnixツールに依存できないこと、または見つかったツールにUnixライクなコマンドライン引数があることです。</target>
        </trans-unit>
        <trans-unit id="a11af240187e8ce0ea57c0f5d9817fa72798ba59" translate="yes" xml:space="preserve">
          <source>The desired exit status to pass to the &lt;b&gt;exit()&lt;/b&gt; function. This should be an integer, or else the string &quot;NOEXIT&quot; to indicate that control should simply be returned without terminating the invoking process.</source>
          <target state="translated">&lt;b&gt;exit（）&lt;/b&gt;関数に渡す必要な終了ステータス。これは整数である必要があります。それ以外の場合は、文字列 &quot;NOEXIT&quot;を指定して、呼び出しプロセスを終了せずにコントロールを単に返す必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="a47bdc95431692c8deb0f97084523a81a5887de3" translate="yes" xml:space="preserve">
          <source>The desired level of &quot;verboseness&quot; to use when printing the usage message. If the corresponding value is 0, then only the &quot;SYNOPSIS&quot; section of the pod documentation is printed. If the corresponding value is 1, then the &quot;SYNOPSIS&quot; section, along with any section entitled &quot;OPTIONS&quot;, &quot;ARGUMENTS&quot;, or &quot;OPTIONS AND ARGUMENTS&quot; is printed. If the corresponding value is 2 or more then the entire manpage is printed.</source>
          <target state="translated">使用法メッセージを印刷するときに使用する「冗長性」の希望するレベル。対応する値が0の場合、ポッド文書の「SYNOPSIS」セクションのみが印刷される。対応する値が1の場合、「SYNOPSIS」セクションと、「OPTIONS」、「ARGUMENTS」、または「OPTIONS AND ARGUMENTS」と題されたセクションが印刷されます。対応する値が2以上の場合は、マンページ全体が印刷されます。</target>
        </trans-unit>
        <trans-unit id="a260934a8f226c98347f68c3fcc330ccf45f5926" translate="yes" xml:space="preserve">
          <source>The desired level of &quot;verboseness&quot; to use when printing the usage message. If the value is 0, then only the &quot;SYNOPSIS&quot; section of the pod documentation is printed. If the value is 1, then the &quot;SYNOPSIS&quot; section, along with any section entitled &quot;OPTIONS&quot;, &quot;ARGUMENTS&quot;, or &quot;OPTIONS AND ARGUMENTS&quot; is printed. If the corresponding value is 2 or more then the entire manpage is printed, using &lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt; if available; otherwise &lt;a href=&quot;Pod::Text&quot;&gt;Pod::Text&lt;/a&gt; is used for the formatting. For better readability, the all-capital headings are downcased, e.g. &lt;code&gt;SYNOPSIS&lt;/code&gt; =&amp;gt; &lt;code&gt;Synopsis&lt;/code&gt;.</source>
          <target state="translated">使用法メッセージを印刷するときに使用する「冗長性」の望ましいレベル。値が0の場合、ポッドドキュメントの「SYNOPSIS」セクションのみが印刷されます。値が1の場合、「SYNOPSIS」セクションが、「OPTIONS」、「ARGUMENTS」、または「OPTIONSANDARGUMENTS」というタイトルのセクションとともに出力されます。対応する値が2以上の場合、可能な場合は&lt;a href=&quot;perldoc&quot;&gt;perldoc&lt;/a&gt;を使用して、マンページ全体が印刷されます。それ以外の場合は、&lt;a href=&quot;Pod::Text&quot;&gt;Pod :: Text&lt;/a&gt;がフォーマットに使用されます。読みやすくするために、すべての資本の見出しは、例えば、downcasedさ &lt;code&gt;SYNOPSIS&lt;/code&gt; =&amp;gt; &lt;code&gt;Synopsis&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b3e64d006f3001c3df4472f5962fd664df30c48" translate="yes" xml:space="preserve">
          <source>The desired level of verbosity to use:</source>
          <target state="translated">使用するために必要な動詞のレベル。</target>
        </trans-unit>
        <trans-unit id="d21703722988891fb3f110d6e6d4a04ddd13048a" translate="yes" xml:space="preserve">
          <source>The destination directory is C:\Symbian\perl\X.Y.Z. For more details, see</source>
          <target state="translated">The destination directory is C:S\Symbian</target>
        </trans-unit>
        <trans-unit id="1f8c4d84dbcf0f5f2d69ca16b4ced3235af3fefd" translate="yes" xml:space="preserve">
          <source>The destination for the option must be an array or array reference.</source>
          <target state="translated">オプ シ ョ ンの出力先は、 配列か配列参照である必要があ り ます。</target>
        </trans-unit>
        <trans-unit id="409e973fa41301f9011188be107ecc88ef0e437c" translate="yes" xml:space="preserve">
          <source>The details for those items which may deviate from what this emulation returns and what a native &lt;code&gt;nl_langinfo()&lt;/code&gt; would return are specified in &lt;a href=&quot;I18N::Langinfo&quot;&gt;I18N::Langinfo&lt;/a&gt;.</source>
          <target state="translated">このエミュレーションが返すものとネイティブ &lt;code&gt;nl_langinfo()&lt;/code&gt; が返すものから逸脱する可能性のあるアイテムの詳細は、&lt;a href=&quot;I18N::Langinfo&quot;&gt;I18N :: Langinfoで&lt;/a&gt;指定されています。</target>
        </trans-unit>
        <trans-unit id="2940ce84da888fbb72c23c514c9cdd4e2c7bab4a" translate="yes" xml:space="preserve">
          <source>The detection algorithm works something like this:</source>
          <target state="translated">検出アルゴリズムは次のように動作します。</target>
        </trans-unit>
        <trans-unit id="8e261118eabba6fd9f550b8549a8f692c8f65be6" translate="yes" xml:space="preserve">
          <source>The develop phase's prereqs are libraries needed to work on the distribution's source code as its author does. These tools might be needed to build a release tarball, to run author-only tests, or to perform other tasks related to developing new versions of the distribution.</source>
          <target state="translated">開発フェーズの前提条件は、作者と同じようにディストリビューションのソースコードを作業するために必要なライブラリです。これらのツールは、リリースのtarballを構築したり、作者のみのテストを実行したり、ディストリビューションの新しいバージョンの開発に関連した他のタスクを実行するために必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="cfd0b50108607e59344e69b0de3bc9fd4f301247" translate="yes" xml:space="preserve">
          <source>The diagnostics Pragma</source>
          <target state="translated">診断プラグマ</target>
        </trans-unit>
        <trans-unit id="9e8272da23da05393615d77b37bcea56278deff5" translate="yes" xml:space="preserve">
          <source>The diagnostics of this test normally just refer to 'the object'. If you'd like them to be more specific, you can supply an $object_name (for example 'Test customer').</source>
          <target state="translated">このテストの診断は通常 'オブジェクト' を参照します。より具体的にしたい場合は、$object_name を指定することができます (例えば 'Test customer' など)。</target>
        </trans-unit>
        <trans-unit id="67027b213e7e98e89fd8e5ebf75f4789f0806d73" translate="yes" xml:space="preserve">
          <source>The diagram below represents a single source stream, with the flow of source from a Perl script file on the left into the Perl parser on the right. This is how Perl normally operates.</source>
          <target state="translated">下の図は、左のPerlスクリプトファイルから右のPerlパーサへのソースの流れを示す単一のソースストリームを表しています。これは、Perl が通常どのように動作するかを示しています。</target>
        </trans-unit>
        <trans-unit id="09d12bc25e1c17128a784d1b2ff7f2b3ea6c5f9e" translate="yes" xml:space="preserve">
          <source>The die on line 4 pops the context stack back down to the CxEVAL, leaving it as:</source>
          <target state="translated">4行目のダイは、コンテキストスタックをCxEVALにポップダウンさせ、そのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="930610eed704196a6c02e9606fed36fd7cdf0a59" translate="yes" xml:space="preserve">
          <source>The die pops the first &lt;code&gt;CxEVAL&lt;/code&gt; off the context stack, sets &lt;code&gt;PL_restartop&lt;/code&gt; from it, does a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; , and control returns to the top &lt;code&gt;docatch&lt;/code&gt; . This then starts another third-level runops level, which executes the nextstate, pushmark and die ops on line 4. At the point that the second &lt;code&gt;pp_die&lt;/code&gt; is called, the C call stack looks exactly like that above, even though we are no longer within an inner eval; this is because of the optimization mentioned earlier. However, the context stack now looks like this, ie with the top CxEVAL popped:</source>
          <target state="translated">ダイは、コンテキストスタックから最初の &lt;code&gt;CxEVAL&lt;/code&gt; をポップし、 &lt;code&gt;PL_restartop&lt;/code&gt; からPL_restartopを設定し、 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; を実行し、制御は最上位の &lt;code&gt;docatch&lt;/code&gt; 戻ります。次に、3番目のレベルの別のrunopsレベルが開始され、4行目でnextstate、pushmark、およびdie opsが実行されます。2番目の &lt;code&gt;pp_die&lt;/code&gt; が呼び出された時点で、Cコールスタックは上記とまったく同じですが、内部評価; これは、前述の最適化が原因です。ただし、コンテキストスタックは次のようになります。つまり、最上位のCxEVALがポップされます。</target>
        </trans-unit>
        <trans-unit id="bbbbc185d1013ac982e3992e43afeb11193aeae4" translate="yes" xml:space="preserve">
          <source>The die pops the first &lt;code&gt;CxEVAL&lt;/code&gt; off the context stack, sets &lt;code&gt;PL_restartop&lt;/code&gt; from it, does a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt;, and control returns to the top &lt;code&gt;docatch&lt;/code&gt;. This then starts another third-level runops level, which executes the nextstate, pushmark and die ops on line 4. At the point that the second &lt;code&gt;pp_die&lt;/code&gt; is called, the C call stack looks exactly like that above, even though we are no longer within an inner eval; this is because of the optimization mentioned earlier. However, the context stack now looks like this, ie with the top CxEVAL popped:</source>
          <target state="translated">ダイは最初の &lt;code&gt;CxEVAL&lt;/code&gt; をコンテキストスタックからポップし、 &lt;code&gt;PL_restartop&lt;/code&gt; からPL_restartopを設定し、 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; を実行し、制御は最上位の &lt;code&gt;docatch&lt;/code&gt; に戻ります。次に、これにより別の第3レベルのrunopsレベルが開始され、4行目でnextstate、pushmark、die opsが実行されます。2番目の &lt;code&gt;pp_die&lt;/code&gt; が呼び出された時点で、C呼び出しスタックは上記のようになります。内部評価; これは、前述の最適化によるものです。ただし、コンテキストスタックは次のようになります。つまり、最上位のCxEVALがポップされます。</target>
        </trans-unit>
        <trans-unit id="6ed5acbfe1a4a69e2eecb34b13c8306880da82cf" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;extract_tagged&lt;/code&gt; and the anonymous subroutines generated by &lt;code&gt;gen_extract_tagged&lt;/code&gt; , is that those generated subroutines:</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; と &lt;code&gt;gen_extract_tagged&lt;/code&gt; によって生成された無名サブルーチンの違いは、これらの生成されたサブルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4192a9e6844188f610795705ae7b4477088fe04b" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;extract_tagged&lt;/code&gt; and the anonymous subroutines generated by &lt;code&gt;gen_extract_tagged&lt;/code&gt;, is that those generated subroutines:</source>
          <target state="translated">&lt;code&gt;extract_tagged&lt;/code&gt; と &lt;code&gt;gen_extract_tagged&lt;/code&gt; によって生成された匿名サブルーチンの違いは、これらの生成されたサブルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7e6f28f40692ae97e2ea2e8080e59d267505ccf0" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;minlen&lt;/code&gt; and &lt;code&gt;minlenret&lt;/code&gt; can be seen in the following pattern:</source>
          <target state="translated">&lt;code&gt;minlen&lt;/code&gt; と &lt;code&gt;minlenret&lt;/code&gt; の違いは、次のパターンで確認できます。</target>
        </trans-unit>
        <trans-unit id="f8ae9fbf98646f2ef8526e7b39bf817f11262438" translate="yes" xml:space="preserve">
          <source>The difference between a block and a script is that scripts are closer to the linguistic notion of a set of code points required to represent languages, while block is more of an artifact of the Unicode code point numbering and separation into blocks of consecutive code points (so far the size of a block is some multiple of 16, like 128 or 256).</source>
          <target state="translated">ブロックとスクリプトの違いは、スクリプトは言語を表現するために必要なコードポイントのセットの言語的な概念に近いですが、ブロックはユニコードのコードポイントのナンバリングと連続したコードポイントのブロックへの分離の成果物です(これまでのところ、ブロックのサイズは128や256のような16のいくつかの倍数です)。</target>
        </trans-unit>
        <trans-unit id="4e0fd5df1eb8c3e578915cd6f8934c4fe5cf676a" translate="yes" xml:space="preserve">
          <source>The difference between these two properties involves characters that are used in multiple scripts. For example the digits '0' through '9' are used in many parts of the world. These are placed in a script named &lt;code&gt;Common&lt;/code&gt; . Other characters are used in just a few scripts. For example, the &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; is used in both Japanese scripts, Katakana and Hiragana, but nowhere else. The &lt;code&gt;Script&lt;/code&gt; property places all characters that are used in multiple scripts in the &lt;code&gt;Common&lt;/code&gt; script, while the &lt;code&gt;Script_Extensions&lt;/code&gt; property places those that are used in only a few scripts into each of those scripts; while still using &lt;code&gt;Common&lt;/code&gt; for those used in many scripts. Thus both these match:</source>
          <target state="translated">これら2つのプロパティの違いには、複数のスクリプトで使用される文字が含まれます。たとえば、数字の「0」から「9」は、世界の多くの地域で使用されています。これらは &lt;code&gt;Common&lt;/code&gt; という名前のスクリプトに配置されます。他の文字は、ほんのいくつかのスクリプトで使用されています。たとえば、カタカナとひらがなの両方で &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; カタカナヒラガナダブルハイフン」が使用されていますが、他では使用されていません。 &lt;code&gt;Script&lt;/code&gt; プロパティがで複数のスクリプトで使用されているすべての文字入れ &lt;code&gt;Common&lt;/code&gt; ながら、スクリプトを &lt;code&gt;Script_Extensions&lt;/code&gt; のプロパティは、これらのスクリプトのそれぞれに、わずか数スクリプトで使用されているものを配置します。まだ多くのスクリプトで使用されているものに対して &lt;code&gt;Common&lt;/code&gt; を使用しています。したがって、これらは両方とも一致します。</target>
        </trans-unit>
        <trans-unit id="6e605910d48501bdad38af7496eb4f572c4cfa33" translate="yes" xml:space="preserve">
          <source>The difference between these two properties involves characters that are used in multiple scripts. For example the digits '0' through '9' are used in many parts of the world. These are placed in a script named &lt;code&gt;Common&lt;/code&gt;. Other characters are used in just a few scripts. For example, the &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; is used in both Japanese scripts, Katakana and Hiragana, but nowhere else. The &lt;code&gt;Script&lt;/code&gt; property places all characters that are used in multiple scripts in the &lt;code&gt;Common&lt;/code&gt; script, while the &lt;code&gt;Script_Extensions&lt;/code&gt; property places those that are used in only a few scripts into each of those scripts; while still using &lt;code&gt;Common&lt;/code&gt; for those used in many scripts. Thus both these match:</source>
          <target state="translated">これら2つのプロパティの違いには、複数のスクリプトで使用される文字が含まれます。たとえば、「0」から「9」までの数字は、世界の多くの地域で使用されています。これらは、 &lt;code&gt;Common&lt;/code&gt; という名前のスクリプトに配置されます。他の文字は、いくつかのスクリプトで使用されています。たとえば、 &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; カタカナ-ひらがなダブルハイフン」は、カタカナとひらがなの両方の日本語の文字で使用されていますが、他の場所では使用されていません。 &lt;code&gt;Script&lt;/code&gt; プロパティがで複数のスクリプトで使用されているすべての文字入れ &lt;code&gt;Common&lt;/code&gt; ながら、スクリプトを &lt;code&gt;Script_Extensions&lt;/code&gt; のプロパティは、これらのスクリプトのそれぞれに、わずか数スクリプトで使用されているものを配置します。多くのスクリプトで使用されているものには引き続き &lt;code&gt;Common&lt;/code&gt; を使用します。したがって、これらは両方とも一致します。</target>
        </trans-unit>
        <trans-unit id="9cc2b3e05da478b77fc3b12b2fa311b0e5889311" translate="yes" xml:space="preserve">
          <source>The difference here is the addition of the temporary variable &lt;code&gt;$data&lt;/code&gt;. This is used to store a copy of the compressed data while it is being uncompressed.</source>
          <target state="translated">ここでの違いは、一時変数 &lt;code&gt;$data&lt;/code&gt; 追加です。これは、圧縮されていないデータのコピーを保存するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f324cedd823e628f1ed8025386bfb26cab3778ab" translate="yes" xml:space="preserve">
          <source>The difference is clear to see and the dereferencing approach is slower. While it managed to execute an average of 628,930 times a second during our test, the direct approach managed to run an additional 204,403 times, unfortunately. Unfortunately, because there are many examples of code written using the multiple layer direct variable access, and it's usually horrible. It is, however, minusculy faster. The question remains whether the minute gain is actually worth the eyestrain, or the loss of maintainability.</source>
          <target state="translated">その違いは明らかで、dereferencingアプローチの方が遅くなっています。私たちのテスト中、それは1秒間に平均628,930回を実行することに成功しましたが、直接アプローチは、残念ながら、追加の204,403回を実行することに成功しました。不幸なことに、複数レイヤーの直接変数アクセスを使って書かれたコードの例がたくさんあるので、通常は恐ろしいものです。しかし、それはマイナスに速くなっています。疑問が残るのは、この微増が実際には目の疲れに値するのか、それとも保守性の損失に値するのかということです。</target>
        </trans-unit>
        <trans-unit id="c9d466e6cdc3e3b171ba671cc22acace7243054b" translate="yes" xml:space="preserve">
          <source>The difference is the sigil, that special character in front of the array name. The &lt;code&gt;$&lt;/code&gt; sigil means &quot;exactly one item&quot;, while the &lt;code&gt;@&lt;/code&gt; sigil means &quot;zero or more items&quot;. The &lt;code&gt;$&lt;/code&gt; gets you a single scalar, while the &lt;code&gt;@&lt;/code&gt; gets you a list.</source>
          <target state="translated">違いは、配列名の前の特殊文字であるシギルです。 &lt;code&gt;$&lt;/code&gt; 「正確に一つの項目」、しばらく手段印章 &lt;code&gt;@&lt;/code&gt; 手段「0個以上の項目」印章。 &lt;code&gt;$&lt;/code&gt; は一方で、あなたに単一のスカラーを取得します &lt;code&gt;@&lt;/code&gt; は、あなたのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="82ff75d7fe49900a75f8b7a1628df2b78931946c" translate="yes" xml:space="preserve">
          <source>The difference to &lt;code&gt;incr_reset&lt;/code&gt; is that only text until the parse error occurred is removed.</source>
          <target state="translated">&lt;code&gt;incr_reset&lt;/code&gt; との違いは、解析エラーが発生するまでのテキストのみが削除されることです。</target>
        </trans-unit>
        <trans-unit id="c2b0921f524dbbf7564616e5853365d0c767bfc6" translate="yes" xml:space="preserve">
          <source>The digest can be delivered in three formats:</source>
          <target state="translated">ダイジェストは3つの形式でお届けします。</target>
        </trans-unit>
        <trans-unit id="0155d0c091234cee22dc790957626f27306487e0" translate="yes" xml:space="preserve">
          <source>The direction you must follow the great circle (also known as</source>
          <target state="translated">大円に沿って進むべき方向(通称</target>
        </trans-unit>
        <trans-unit id="03d134305af0df1045ab396312ef86cfab55c5d9" translate="yes" xml:space="preserve">
          <source>The direction you would have to go from London to Tokyo (in radians, straight north being zero, straight east being pi/2).</source>
          <target state="translated">ロンドンから東京に行く場合の方向(ラジアン表示で、北にまっすぐ行くとゼロ、東にまっすぐ行くとπ/2)。</target>
        </trans-unit>
        <trans-unit id="9159a72a045b505fc788bec97c5202fb7f87247c" translate="yes" xml:space="preserve">
          <source>The directory portion may or may not be returned with a trailing '/'.</source>
          <target state="translated">ディレクトリ部分は、末尾に '/' を付けて返される場合と返されない場合があります。</target>
        </trans-unit>
        <trans-unit id="efd54b0e8774d4521e37e9c7dad7074640dfad53" translate="yes" xml:space="preserve">
          <source>The directory you are put into when you log in. On a Unix system, the name is often placed into &lt;code&gt;$ENV{HOME}&lt;/code&gt; or &lt;code&gt;$ENV{LOGDIR}&lt;/code&gt; by</source>
          <target state="translated">あなたは、あなたがログインしたときに置かれているディレクトリ。UNIXシステムでは、名前がしばしばに配置されて &lt;code&gt;$ENV{HOME}&lt;/code&gt; や &lt;code&gt;$ENV{LOGDIR}&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="0f834768c044521ed2139a347066ecd1f6fd454d" translate="yes" xml:space="preserve">
          <source>The directory, if specified, must appear immediately following the &lt;b&gt;-x&lt;/b&gt; with no intervening whitespace.</source>
          <target state="translated">指定する場合、ディレクトリは&lt;b&gt;-xの&lt;/b&gt;直後に空白を入れずに表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="d7f8724048da79577878989633dd2a49c69c9ec2" translate="yes" xml:space="preserve">
          <source>The display name describes the native Windows version, so even on a 32-bit Perl this function may return a &quot;Windows ... (64-bit)&quot; name when running on a 64-bit Windows.</source>
          <target state="translated">表示名にはWindowsのネイティブバージョンが記載されていますので、32ビットのPerlでも64ビットのWindowsで実行すると &quot;Windows ...(64ビット)」という名前を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="33156bb6057d33c4b599fbfc979b33f776601d44" translate="yes" xml:space="preserve">
          <source>The distinction between &lt;code&gt;OBJECT&lt;/code&gt; and &lt;code&gt;LDFROM&lt;/code&gt;: &lt;code&gt;OBJECT&lt;/code&gt; is the make target, so make will try to build it. However, &lt;code&gt;LDFROM&lt;/code&gt; is what will actually be linked together to make the shared object or static library (SO/SL), so if you override it, make sure it includes what you want to make the final SO/SL, almost certainly including the XS basename with &lt;code&gt;$(OBJ_EXT)&lt;/code&gt; appended.</source>
          <target state="translated">区別 &lt;code&gt;OBJECT&lt;/code&gt; と &lt;code&gt;LDFROM&lt;/code&gt; ： &lt;code&gt;OBJECT&lt;/code&gt; は、 makeはそれを構築しようとしますので、メイクの対象です。ただし、 &lt;code&gt;LDFROM&lt;/code&gt; は実際にリンクされて共有オブジェクトまたは静的ライブラリ（SO / SL）を作成するため、オーバーライドする場合は、最終的なSO / SLを作成するものが含まれていることを確認してください。ほぼ確実に、XSが含まれます。 &lt;code&gt;$(OBJ_EXT)&lt;/code&gt; が追加されたベース名。</target>
        </trans-unit>
        <trans-unit id="52decfdd93c450a71874ee33c51b4afa2f1bd5c0" translate="yes" xml:space="preserve">
          <source>The distribution is distributed under the terms of the GNU General Public License version 2 (&lt;a href=&quot;http://opensource.org/licenses/GPL-2.0&quot;&gt;http://opensource.org/licenses/GPL-2.0&lt;/a&gt;).</source>
          <target state="translated">配布は、GNU General Public Licenseバージョン2（&lt;a href=&quot;http://opensource.org/licenses/GPL-2.0&quot;&gt;http://opensource.org/licenses/GPL-2.0&lt;/a&gt;）の条件の下で配布されます。</target>
        </trans-unit>
        <trans-unit id="7cba2181eae9ea18443bd663a1f8c3a87fbabe62" translate="yes" xml:space="preserve">
          <source>The distribution is distributed under the terms of the GNU Lesser General Public License version 2 (&lt;a href=&quot;http://opensource.org/licenses/LGPL-2.1&quot;&gt;http://opensource.org/licenses/LGPL-2.1&lt;/a&gt;).</source>
          <target state="translated">配布は、GNU劣等一般公衆利用許諾契約書バージョン2（&lt;a href=&quot;http://opensource.org/licenses/LGPL-2.1&quot;&gt;http://opensource.org/licenses/LGPL-2.1&lt;/a&gt;）の条件の下で配布されます。</target>
        </trans-unit>
        <trans-unit id="4888c0e08e74f6e2698369bc2f948843f746c57a" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under a license that is &lt;b&gt;not&lt;/b&gt; approved by &lt;a href=&quot;http://www.opensource.org/&quot;&gt;www.opensource.org&lt;/a&gt; but that allows distribution without restrictions.</source>
          <target state="translated">配布は、&lt;a href=&quot;http://www.opensource.org/&quot;&gt;www.opensource.org&lt;/a&gt;によって承認されて&lt;b&gt;いない&lt;/b&gt;が、制限なしで配布できるライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="b18e66ed77e39494025272eb1fa0055f83f4e24c" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under a license that is not approved by &lt;a href=&quot;http://www.opensource.org/&quot;&gt;www.opensource.org&lt;/a&gt; but that allows distribution without restrictions.</source>
          <target state="translated">配布は、&lt;a href=&quot;http://www.opensource.org/&quot;&gt;www.opensource.org&lt;/a&gt;によって承認されていないが、制限なしで配布できるライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="32f50f8aa35b8ab9124cad20b747796d784792a1" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under some other Open Source Initiative-approved license listed at &lt;a href=&quot;http://www.opensource.org/licenses/&quot;&gt;http://www.opensource.org/licenses/&lt;/a&gt;.</source>
          <target state="translated">ディストリビューションは、&lt;a href=&quot;http://www.opensource.org/licenses/&quot;&gt;http：//www.opensource.org/licenses/に&lt;/a&gt;リストされている他のオープンソースイニシアチブ承認済みライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="a78bde88df9f9ec717c7aea6abe37d463f7f3091" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under the Apache Software License version 1.1 (&lt;a href=&quot;http://opensource.org/licenses/Apache-1.1&quot;&gt;http://opensource.org/licenses/Apache-1.1&lt;/a&gt;).</source>
          <target state="translated">ディストリビューションは、Apache Software Licenseバージョン1.1（&lt;a href=&quot;http://opensource.org/licenses/Apache-1.1&quot;&gt;http://opensource.org/licenses/Apache-1.1&lt;/a&gt;）の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="7de749c864adb80ca7d1e8d280af821d8d4c9935" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under the Artistic License version 1, as specified by the Artistic file in the standard perl distribution (&lt;a href=&quot;http://opensource.org/licenses/Artistic-Perl-1.0&quot;&gt;http://opensource.org/licenses/Artistic-Perl-1.0&lt;/a&gt;).</source>
          <target state="translated">ディストリビューションは、標準のperlディストリビューション（&lt;a href=&quot;http://opensource.org/licenses/Artistic-Perl-1.0&quot;&gt;http://opensource.org/licenses/Artistic-Perl-1.0&lt;/a&gt;）のArtisticファイルで指定されているArtisticLicenseバージョン1でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="79ac3a668622bd0a049080f2c7b27295e3ec4b97" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under the BSD 3-Clause License (&lt;a href=&quot;http://opensource.org/licenses/BSD-3-Clause&quot;&gt;http://opensource.org/licenses/BSD-3-Clause&lt;/a&gt;).</source>
          <target state="translated">ディストリビューションは、BSD 3-Clause License（&lt;a href=&quot;http://opensource.org/licenses/BSD-3-Clause&quot;&gt;http://opensource.org/licenses/BSD-3-Clause&lt;/a&gt;）の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="9b566ce554e210d4ce11e3e299eeba816ff34110" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under the MIT License (&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;).</source>
          <target state="translated">ディストリビューションはMITライセンス（&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;）の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="3aac6612aedc9abedbc7808782068e6b14c9dad1" translate="yes" xml:space="preserve">
          <source>The distribution is licensed under the Mozilla Public License. (&lt;a href=&quot;http://opensource.org/licenses/MPL-1.0&quot;&gt;http://opensource.org/licenses/MPL-1.0&lt;/a&gt; or &lt;a href=&quot;http://opensource.org/licenses/MPL-1.1&quot;&gt;http://opensource.org/licenses/MPL-1.1&lt;/a&gt;)</source>
          <target state="translated">ディストリビューションは、Mozilla PublicLicenseの下でライセンスされています。（&lt;a href=&quot;http://opensource.org/licenses/MPL-1.0&quot;&gt;http://opensource.org/licenses/MPL-1.0&lt;/a&gt;または&lt;a href=&quot;http://opensource.org/licenses/MPL-1.1&quot;&gt;http://opensource.org/licenses/MPL-1.1&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="29ec48fe5b9db3aa7699bae9e6f37f57f64c6873" translate="yes" xml:space="preserve">
          <source>The distribution may be copied and redistributed under the same terms as perl itself (this is by far the most common licensing option for modules on CPAN). This is a dual license, in which the user may choose between either the GPL or the Artistic license.</source>
          <target state="translated">ディストリビューションは、perl自身と同じ条件でコピーして再配布することができます(これは、CPAN上のモジュールのための最も一般的なライセンシングオプションです)。これはデュアルライセンスで、ユーザはGPLか芸術的ライセンスのどちらかを選択できます。</target>
        </trans-unit>
        <trans-unit id="1f6a3b8d2999345748a288e76e75c0daa029db33" translate="yes" xml:space="preserve">
          <source>The distribution may be copied and redistributed under the same terms as perl itself (this is by far the most common licensing option for modules on CPAN). This is a dual license, in which the user may choose between either the GPL version 1 or the Artistic version 1 license.</source>
          <target state="translated">このディストリビューションは、perl自身と同じ条件でコピーして再配布することができます(これは、CPAN上のモジュールのための最も一般的なライセンシングオプションです)。これはデュアルライセンスで、ユーザはGPLバージョン1かArtisticバージョン1のどちらかを選ぶことができます。</target>
        </trans-unit>
        <trans-unit id="68561decd1a625d00c793764ccc0278b512e1101" translate="yes" xml:space="preserve">
          <source>The distribution may not be redistributed without special permission from the author and/or copyright holder.</source>
          <target state="translated">著作者および/または著作権者の特別な許可なく再配布することはできません。</target>
        </trans-unit>
        <trans-unit id="d8b84d36cdfd8993b5da988b0d1072e922c4f772" translate="yes" xml:space="preserve">
          <source>The distribution metadata for a CPAN dist</source>
          <target state="translated">CPAN distのディストリビューションメタデータ</target>
        </trans-unit>
        <trans-unit id="36683b868091d21c8930b291476202549c6dcddb" translate="yes" xml:space="preserve">
          <source>The distribution of a bundle should follow the same convention as other distributions.</source>
          <target state="translated">束の分布は、他の分布と同じ規則に従うべきです。</target>
        </trans-unit>
        <trans-unit id="51432e8130a916aea0132035b34ce241b04f9cf8" translate="yes" xml:space="preserve">
          <source>The distroprefs system of &lt;code&gt;CPAN.pm&lt;/code&gt; addresses this problem by allowing the user to specify extra informations and recipes in YAML files to either</source>
          <target state="translated">distroprefsシステム &lt;code&gt;CPAN.pm&lt;/code&gt; は、どちらかにYAMLファイルに余分な情報やレシピを指定することを可能にすることにより、この問題に対処します</target>
        </trans-unit>
        <trans-unit id="593a274a7d2141476dcb8b11db34f2f4536141e3" translate="yes" xml:space="preserve">
          <source>The division (/) and the following functions</source>
          <target state="translated">除算(/)と以下の機能</target>
        </trans-unit>
        <trans-unit id="863f717363dbe8d220d352a111c6c709f1a560be" translate="yes" xml:space="preserve">
          <source>The djgpp environment for DOS, &lt;a href=&quot;http://www.delorie.com/djgpp/&quot;&gt;http://www.delorie.com/djgpp/&lt;/a&gt; and &lt;a href=&quot;perldos&quot;&gt;perldos&lt;/a&gt;.</source>
          <target state="translated">DOS、&lt;a href=&quot;http://www.delorie.com/djgpp/&quot;&gt;http：&lt;/a&gt;&lt;a href=&quot;perldos&quot;&gt;//www.delorie.com/djgpp/&lt;/a&gt;およびperldosのdjgpp環境。</target>
        </trans-unit>
        <trans-unit id="02d01132aeec36ca260315fce03b39bb29168535" translate="yes" xml:space="preserve">
          <source>The do-or-die equivalents are set up simply by calling Fatal's &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; routine, passing it the names of the functions to be replaced. You may wrap both user-defined functions and overridable CORE operators (except &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, or any other built-in that cannot be expressed via prototypes) in this way.</source>
          <target state="translated">Do-or-Dieの同等機能は、Fatalの &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ルーチンを呼び出して、置き換える関数の名前を渡すだけで設定されます。このようにして、ユーザー定義関数とオーバーライド可能なCORE演算子（ &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 、またはプロトタイプでは表現できないその他の組み込み関数を除く）の両方をラップできます。</target>
        </trans-unit>
        <trans-unit id="d89559d6a4bade96c4b212e54a4534bbb62aa15a" translate="yes" xml:space="preserve">
          <source>The do-or-die equivalents are set up simply by calling Fatal's &lt;code&gt;import&lt;/code&gt; routine, passing it the names of the functions to be replaced. You may wrap both user-defined functions and overridable CORE operators (except &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;system&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;, or any other built-in that cannot be expressed via prototypes) in this way.</source>
          <target state="translated">同等のdo-or-dieは、Fatalの &lt;code&gt;import&lt;/code&gt; ルーチンを呼び出して、置き換える関数の名前を渡すだけで設定されます。この方法で、ユーザー定義関数とオーバーライド可能なCORE演算子（ &lt;code&gt;exec&lt;/code&gt; 、 &lt;code&gt;system&lt;/code&gt; 、 &lt;code&gt;print&lt;/code&gt; 、またはプロトタイプでは表現できないその他の組み込み関数を除く）の両方をラップできます。</target>
        </trans-unit>
        <trans-unit id="15384d55904491a7259b275ff7854d9b17c0ddff" translate="yes" xml:space="preserve">
          <source>The documentation below is only for the methods of the CPAN::Meta object. For information on the meaning of individual fields, consult the spec.</source>
          <target state="translated">以下のドキュメントは、CPAN::Metaオブジェクトのメソッドのみを対象としています。個々のフィールドの意味については、仕様書を参照してください。</target>
        </trans-unit>
        <trans-unit id="467707c3656000f994482e7ea5cafe87685ee6c8" translate="yes" xml:space="preserve">
          <source>The documentation for the Perl API explains what some of the internal functions do, as well as the many macros used in the source.</source>
          <target state="translated">Perl API のドキュメントでは、内部関数のいくつかが何をするのか、ソースで使用されている多くのマクロと同様に説明されています。</target>
        </trans-unit>
        <trans-unit id="f1c9061e68c820097f175c9e3bd485176b2a01c2" translate="yes" xml:space="preserve">
          <source>The documentation of &lt;a href=&quot;Locale::Maketext&quot;&gt;Locale::Maketext&lt;/a&gt; advises that the standard bracket method &lt;code&gt;numf&lt;/code&gt; is limited and that you must override that for better results. It even suggests the use of &lt;a href=&quot;Number::Format&quot;&gt;Number::Format&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;Locale::Maketext&quot;&gt;Locale :: Maketext&lt;/a&gt;のドキュメントでは、標準のブラケットメソッド &lt;code&gt;numf&lt;/code&gt; が制限されており、より良い結果を得るにはそれをオーバーライドする必要があるとアドバイスされています。&lt;a href=&quot;Number::Format&quot;&gt;Number :: Formatの&lt;/a&gt;使用も提案しています。</target>
        </trans-unit>
        <trans-unit id="fae102196b6b483518d27e0d97d3595cd35f7b66" translate="yes" xml:space="preserve">
          <source>The dot</source>
          <target state="translated">ドット</target>
        </trans-unit>
        <trans-unit id="3f38f6b4980cd9d2e94100bc5fdda9f827f655ac" translate="yes" xml:space="preserve">
          <source>The dot (or period), &lt;code&gt;.&lt;/code&gt; is probably the most used, and certainly the most well-known character class. By default, a dot matches any character, except for the newline. That default can be changed to add matching the newline by using the</source>
          <target state="translated">ドット（ピリオド）、 &lt;code&gt;.&lt;/code&gt; おそらく最もよく使われ、確かに最もよく知られている文字クラスです。デフォルトでは、ドットは改行を除くすべての文字と一致します。このデフォルトを変更して、改行に一致する行を追加することができます。</target>
        </trans-unit>
        <trans-unit id="a8d050074e0d8db225e0ced36924986b2d59e591" translate="yes" xml:space="preserve">
          <source>The dynamic nature of the regular expression variables means that their value is limited to the block that they are in, as demonstrated by this bit of code:</source>
          <target state="translated">正規表現変数の動的な性質は、その値がその中にあるブロックに限定されることを意味します。</target>
        </trans-unit>
        <trans-unit id="4214b1d60eaaef0d8bb7337abe8a20ad57121d02" translate="yes" xml:space="preserve">
          <source>The earliest development of &lt;code&gt;newgetopt.pl&lt;/code&gt; started in 1990, with Perl version 4. As a result, its development, and the development of Getopt::Long, has gone through several stages. Since backward compatibility has always been extremely important, the current version of Getopt::Long still supports a lot of constructs that nowadays are no longer necessary or otherwise unwanted. This section describes briefly some of these 'features'.</source>
          <target state="translated">&lt;code&gt;newgetopt.pl&lt;/code&gt; の最も初期の開発は1990年にPerlバージョン4で始まりました。その結果、その開発とGetopt :: Longの開発はいくつかの段階を経てきました。下位互換性は常に非常に重要であるので、Getopt :: Longの現在のバージョンは、現在ではもはや必要でないか、そうでなければ望ましくない多くの構成をサポートしています。このセクションでは、これらの「機能」のいくつかについて簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="a629fbdcc51d0664a749c16709dba8d145f34d93" translate="yes" xml:space="preserve">
          <source>The easier it is to reproduce your bug, the more likely it will be fixed -- if nobody can duplicate your problem, it probably won't be addressed.</source>
          <target state="translated">バグの再現が容易であればあるほど、修正される可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="a0f603eb4b75174f5f5f8c92980d04d40846be1f" translate="yes" xml:space="preserve">
          <source>The easier it is to understand a reproducible bug, the more likely it will be fixed. Any insight you can provide into the problem will help a great deal. In other words, try to analyze the problem (to the extent you can) and report your discoveries.</source>
          <target state="translated">再現可能なバグを理解するのが簡単であればあるほど、それが修正される可能性が高くなります。その問題についてあなたが提供できる洞察力があれば、大きな助けになるでしょう。言い換えれば、(できる範囲で)問題を分析し、発見したことを報告するようにしてください。</target>
        </trans-unit>
        <trans-unit id="affd4579291392539b898984b2d64fdfbc46e13c" translate="yes" xml:space="preserve">
          <source>The easiest and most portable option available for creating your own source filter is to write it completely in Perl. To distinguish this from the previous two techniques, I'll call it a Perl source filter.</source>
          <target state="translated">独自のソースフィルタを作成するための最も簡単で移植性の高い方法は、完全に Perl で書くことです。前の二つのテクニックと区別するために、これを Perl ソースフィルタと呼ぶことにします。</target>
        </trans-unit>
        <trans-unit id="74aa13205a264868ad41eb543a1a088589f0736a" translate="yes" xml:space="preserve">
          <source>The easiest conceptual solution is to count the lines in the file then start at the beginning and print the number of lines (minus the last N) to a new file.</source>
          <target state="translated">最も簡単な概念的な解決策は、ファイルの行数を数えて、最初から始めて、行数(最後のNを引いたもの)を新しいファイルに印刷することです。</target>
        </trans-unit>
        <trans-unit id="06308af6d2242e4fa49dd6cd28115c9993df529e" translate="yes" xml:space="preserve">
          <source>The easiest way is to have a module also named CPAN do it for you by using the &lt;code&gt;cpan&lt;/code&gt; command that comes with Perl. You can give it a list of modules to install:</source>
          <target state="translated">最も簡単な方法は、CPANという名前のモジュールに、Perlに付属の &lt;code&gt;cpan&lt;/code&gt; コマンドを使用して実行させることです。インストールするモジュールのリストを与えることができます：</target>
        </trans-unit>
        <trans-unit id="2cfa0d7d193c99cb54063076caae508cae649aa1" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is to read a key in nonblocking mode with the &lt;a href=&quot;Term::ReadKey&quot;&gt;Term::ReadKey&lt;/a&gt; module from CPAN, passing it an argument of -1 to indicate not to block:</source>
          <target state="translated">これを行う最も簡単な方法は、CPANから&lt;a href=&quot;Term::ReadKey&quot;&gt;Term :: ReadKey&lt;/a&gt;モジュールを使用して非ブロックモードでキーを読み取り、ブロックしないことを示すために-1の引数を渡すことです。</target>
        </trans-unit>
        <trans-unit id="50ecd0af899536563eb76ce8a93b28def2b41789" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is to read a key in nonblocking mode with the &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ReadKey&quot;&gt;Term::ReadKey&lt;/a&gt; module from CPAN, passing it an argument of -1 to indicate not to block:</source>
          <target state="translated">これを行う最も簡単な方法は、CPANから&lt;a href=&quot;http://search.cpan.org/perldoc/Term::ReadKey&quot;&gt;Term :: ReadKey&lt;/a&gt;モジュールを使用して非ブロックモードでキーを読み取り、-1の引数を渡してブロックしないことを示すことです。</target>
        </trans-unit>
        <trans-unit id="3b2853b05b0394d3d1c3bfe698cbfe924daa1822" translate="yes" xml:space="preserve">
          <source>The easiest way to examine the op tree is to stop Perl after it has finished parsing, and get it to dump out the tree. This is exactly what the compiler backends &lt;a href=&quot;B::Terse&quot;&gt;B::Terse&lt;/a&gt;, &lt;a href=&quot;B::Concise&quot;&gt;B::Concise&lt;/a&gt; and CPAN module &amp;lt;B::Debug do.</source>
          <target state="translated">opツリーを調べる最も簡単な方法は、解析が終了した後にPerlを停止し、ツリーをダンプするようにすることです。これはまさにコンパイラのバックエンドである&lt;a href=&quot;B::Terse&quot;&gt;B :: Terse&lt;/a&gt;、&lt;a href=&quot;B::Concise&quot;&gt;B :: Concise&lt;/a&gt;、CPANモジュール&amp;lt;B :: Debugが行うことです。</target>
        </trans-unit>
        <trans-unit id="8ab82d3c686ea0162144c8d6cfd2e56593a5e530" translate="yes" xml:space="preserve">
          <source>The easiest way to examine the op tree is to stop Perl after it has finished parsing, and get it to dump out the tree. This is exactly what the compiler backends &lt;a href=&quot;b/terse&quot;&gt;B::Terse&lt;/a&gt;, &lt;a href=&quot;b/concise&quot;&gt;B::Concise&lt;/a&gt; and &lt;a href=&quot;b/debug&quot;&gt;B::Debug&lt;/a&gt; do.</source>
          <target state="translated">opツリーを調べる最も簡単な方法は、Perlが解析を完了した後にPerlを停止し、Perlにツリーをダンプさせることです。これは、コンパイラバックエンド&lt;a href=&quot;b/terse&quot;&gt;B :: Terse&lt;/a&gt;、&lt;a href=&quot;b/concise&quot;&gt;B :: Concise&lt;/a&gt;、および&lt;a href=&quot;b/debug&quot;&gt;B :: Debugが&lt;/a&gt;行うこととまったく同じです。</target>
        </trans-unit>
        <trans-unit id="e420b4167196d87c0672e2ec36244ffaaeacf17d" translate="yes" xml:space="preserve">
          <source>The easiest way to get a template set of macros to use is by specifying the &lt;code&gt;-g&lt;/code&gt; (&lt;code&gt;--global&lt;/code&gt; ) option with h2xs (see &lt;a href=&quot;h2xs&quot;&gt;h2xs&lt;/a&gt;).</source>
          <target state="translated">使用するマクロのテンプレートセットを取得する最も簡単な方法は、指定してある &lt;code&gt;-g&lt;/code&gt; （ &lt;code&gt;--global&lt;/code&gt; h2xs（参照して）オプションを&lt;a href=&quot;h2xs&quot;&gt;h2xsを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="4c6326467cfffc66387125a93100da358b0b5c86" translate="yes" xml:space="preserve">
          <source>The easiest way to get a template set of macros to use is by specifying the &lt;code&gt;-g&lt;/code&gt; (&lt;code&gt;--global&lt;/code&gt;) option with h2xs (see &lt;a href=&quot;h2xs&quot;&gt;h2xs&lt;/a&gt;).</source>
          <target state="translated">使用するマクロのテンプレートセットを取得する最も簡単な方法は、指定してある &lt;code&gt;-g&lt;/code&gt; （ &lt;code&gt;--global&lt;/code&gt; h2xs（参照して）オプションを&lt;a href=&quot;h2xs&quot;&gt;h2xsを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="40c9c21dcd497445970db52d8583cffea3bdb68e" translate="yes" xml:space="preserve">
          <source>The easiest way to specify an individual typable character is to enclose it in brackets:</source>
          <target state="translated">個々のタイプ可能な文字を指定する最も簡単な方法は、それを括弧で囲むことです。</target>
        </trans-unit>
        <trans-unit id="d739701e48fac0ec01f64967528c5978352a4aef" translate="yes" xml:space="preserve">
          <source>The easiest way to tell if a subroutine was inlined is by using &lt;a href=&quot;B::Deparse&quot;&gt;B::Deparse&lt;/a&gt;. Consider this example of two subroutines returning &lt;code&gt;1&lt;/code&gt;, one with a &lt;code&gt;()&lt;/code&gt; prototype causing it to be inlined, and one without (with deparse output truncated for clarity):</source>
          <target state="translated">サブルーチンがインライン化されているかどうかを確認する最も簡単な方法は、&lt;a href=&quot;B::Deparse&quot;&gt;B :: Deparse&lt;/a&gt;を使用することです。戻り2つのサブルーチンのこの例考える &lt;code&gt;1&lt;/code&gt; と、いずれかを &lt;code&gt;()&lt;/code&gt; がインライン化させるプロトタイプを、及びないもの（明確にするために切り捨て逆パース出力付き）：</target>
        </trans-unit>
        <trans-unit id="61b4571e42b1eb8646fcc517dc4040a5571233f2" translate="yes" xml:space="preserve">
          <source>The easiest way to tell if a subroutine was inlined is by using &lt;a href=&quot;b/deparse&quot;&gt;B::Deparse&lt;/a&gt;. Consider this example of two subroutines returning &lt;code&gt;1&lt;/code&gt; , one with a &lt;code&gt;()&lt;/code&gt; prototype causing it to be inlined, and one without (with deparse output truncated for clarity):</source>
          <target state="translated">サブルーチンがインライン化されたかどうかを確認する最も簡単な方法は、&lt;a href=&quot;b/deparse&quot;&gt;B :: Deparse&lt;/a&gt;を使用することです。2つのサブルーチンが &lt;code&gt;1&lt;/code&gt; を返す例を考えてみましょう。1つは &lt;code&gt;()&lt;/code&gt; プロトタイプでインライン化され、もう1つは（明確化のために解析解除出力が切り捨てられて）ありません。</target>
        </trans-unit>
        <trans-unit id="0f8acfaed2cccc718ab47b22e571180e63f71aac" translate="yes" xml:space="preserve">
          <source>The easiest way to test is to do something like</source>
          <target state="translated">一番簡単なテスト方法は、次のようなことをすることです。</target>
        </trans-unit>
        <trans-unit id="6a0eee7295ee278e006e907a6f9a925e3a5df708" translate="yes" xml:space="preserve">
          <source>The easist way to deal with this issue is to use the pre-defined &quot;utf8&quot; &lt;b&gt;DBM_Filter&lt;/b&gt; (see &lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filter&lt;/a&gt;) that was designed to deal with this situation.</source>
          <target state="translated">この問題に対処する最も簡単な方法は、この状況に対処するように設計された事前定義された「utf8」&lt;b&gt;DBM_Filter&lt;/b&gt;（&lt;a href=&quot;dbm_filter&quot;&gt;DBM_Filterを&lt;/a&gt;参照）を使用することです。</target>
        </trans-unit>
        <trans-unit id="1861cd9be51843a146c51b85f741a8d483f14173" translate="yes" xml:space="preserve">
          <source>The easy answer is &quot;Don't do that!&quot;</source>
          <target state="translated">簡単な答えは「やめろ!」です。</target>
        </trans-unit>
        <trans-unit id="8aef9d5f47b23df02c1f4b866ddffffba9a2ae25" translate="yes" xml:space="preserve">
          <source>The effect of &lt;code&gt;:std&lt;/code&gt; is not lexical as it modifies the layer stack of the global handles. If you wish to apply only this global effect and not the effect on handles that are opened in that scope, you can isolate the call to this pragma in its own lexical scope.</source>
          <target state="translated">&lt;code&gt;:std&lt;/code&gt; の効果は、グローバルハンドルのレイヤースタックを変更するため、字句ではありません。このグローバル効果のみを適用し、そのスコープで開かれているハンドルへの効果は適用しない場合は、このプラグマへの呼び出しを独自のレキシカルスコープで分離できます。</target>
        </trans-unit>
        <trans-unit id="6c4605050fae7c9f6ca47b8c647d8260a448789c" translate="yes" xml:space="preserve">
          <source>The effect of multiple &lt;code&gt;-I&lt;/code&gt; options is to &lt;code&gt;unshift&lt;/code&gt; them onto &lt;code&gt;@INC&lt;/code&gt; from right to left. So for example:</source>
          <target state="translated">複数の効果 &lt;code&gt;-I&lt;/code&gt; オプションがすることである &lt;code&gt;unshift&lt;/code&gt; にそれらを &lt;code&gt;@INC&lt;/code&gt; 右から左へ。したがって、たとえば：</target>
        </trans-unit>
        <trans-unit id="0597cca28cb7230a0e356c17782e46be9384f5c8" translate="yes" xml:space="preserve">
          <source>The effect of using &quot;failure_auto_handler&quot; is like an AUTO lexicon, except that it 1) compiles $key even if it starts with &quot;_&quot;, and 2) you have a record in the new hashref $lh-&amp;gt;{'failure_lex'} of all the keys that have failed for this object. This should avoid your program dying -- as long as your keys aren't actually invalid as bracket code, and as long as they don't try calling methods that don't exist.</source>
          <target state="translated">&quot;failure_auto_handler&quot;を使用する効果は、AUTOレキシコンに似ていますが、1） &quot;_&quot;で始まっていても$ keyをコンパイルします。2）新しいハッシュリファレンス$ lh-&amp;gt; {'failure_lex'}にレコードがあります。このオブジェクトで失敗したすべてのキーの。これにより、プログラムが死ぬのを防ぐことができます-キーがブラケットコードとして実際に無効でない限り、および存在しないメソッドを呼び出そうとしない限り。</target>
        </trans-unit>
        <trans-unit id="e111bef16ba68c39a0b6040a000b635141c8f1f2" translate="yes" xml:space="preserve">
          <source>The effective gid of this process. If you are on a machine that supports membership in multiple groups simultaneously, gives a space separated list of groups you are in. The first number is the one returned by &lt;code&gt;getegid()&lt;/code&gt; , and the subsequent ones by &lt;code&gt;getgroups()&lt;/code&gt; , one of which may be the same as the first number.</source>
          <target state="translated">このプロセスの有効なgid。あなたは、同時に複数のグループでのサポートメンバーシップは、スペースを与えることをマシン上にある場合は、あなたがしているグループのリストを区切ります。最初の数はで返さ一つです &lt;code&gt;getegid()&lt;/code&gt; によると、それに続くもの &lt;code&gt;getgroups()&lt;/code&gt; 、5月の1最初の番号と同じである。</target>
        </trans-unit>
        <trans-unit id="c57c7b93a855188d4ab0c627a896d86afd3718eb" translate="yes" xml:space="preserve">
          <source>The effective gid of this process. If you are on a machine that supports membership in multiple groups simultaneously, gives a space separated list of groups you are in. The first number is the one returned by &lt;code&gt;getegid()&lt;/code&gt;, and the subsequent ones by &lt;code&gt;getgroups()&lt;/code&gt;, one of which may be the same as the first number.</source>
          <target state="translated">このプロセスの効果的なガイド。あなたは、同時に複数のグループでのサポートメンバーシップは、スペースを与えることをマシン上にある場合は、あなたがしているグループのリストを区切ります。最初の数はで返さ一つです &lt;code&gt;getegid()&lt;/code&gt; によると、それに続くもの &lt;code&gt;getgroups()&lt;/code&gt; 、5月の1最初の番号と同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="391c814eb86428160d8ecfb1e5d99a0a23856f18" translate="yes" xml:space="preserve">
          <source>The effective uid of this process. For example:</source>
          <target state="translated">このプロセスの有効なuid。例えば</target>
        </trans-unit>
        <trans-unit id="78e522cbb08752f888e4a4c422be723520118862" translate="yes" xml:space="preserve">
          <source>The element &lt;code&gt;$ENV{DEFAULT}&lt;/code&gt; is special: when read, it returns Perl's current default device and directory, and when set, it resets them, regardless of the definition of</source>
          <target state="translated">要素 &lt;code&gt;$ENV{DEFAULT}&lt;/code&gt; は特別です。読み込まれると、Perlの現在のデフォルトのデバイスとディレクトリが返され、設定されると、定義に関係なくそれらがリセットされます</target>
        </trans-unit>
        <trans-unit id="1927e85810982ff4bedcbd8fe6ac46c4f4acfd36" translate="yes" xml:space="preserve">
          <source>The element is a hash, initialized by default to &lt;code&gt;()&lt;/code&gt; .</source>
          <target state="translated">要素はハッシュであり、デフォルトで &lt;code&gt;()&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="ff2bffd6b7ca0e9e867ed8229203222ba2cd6dd2" translate="yes" xml:space="preserve">
          <source>The element is a hash, initialized by default to &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">要素はハッシュであり、デフォルトで &lt;code&gt;()&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="010155a37e502b613f4bf666146b070b50ac9cf2" translate="yes" xml:space="preserve">
          <source>The element is a scalar, and by default is initialized to &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; (but see &lt;a href=&quot;#Initializing-with-new&quot;&gt;Initializing with new&lt;/a&gt;).</source>
          <target state="translated">要素はスカラーであり、デフォルトでは &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; に初期化されます（ただし&lt;a href=&quot;#Initializing-with-new&quot;&gt;、newによる初期化を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f75fd8ea331a93e38c3ea51d7c4505b3a3d036f7" translate="yes" xml:space="preserve">
          <source>The element is a scalar, and by default is initialized to &lt;code&gt;undef&lt;/code&gt; (but see &lt;a href=&quot;#Initializing-with-new&quot;&gt;&quot;Initializing with new&quot;&lt;/a&gt;).</source>
          <target state="translated">要素はスカラーであり、デフォルトでは &lt;code&gt;undef&lt;/code&gt; に初期化されます（ただし、&lt;a href=&quot;#Initializing-with-new&quot;&gt;「新規での初期化」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7c7fe592a2def98474e3260c74013058ff355fc6" translate="yes" xml:space="preserve">
          <source>The element is an array, initialized by default to &lt;code&gt;()&lt;/code&gt; .</source>
          <target state="translated">要素は配列であり、デフォルトで &lt;code&gt;()&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="52aeddd404b7b928ef7ca86f1f29047b71eeb8ca" translate="yes" xml:space="preserve">
          <source>The element is an array, initialized by default to &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">要素は配列であり、デフォルトで &lt;code&gt;()&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="942bdb865668cc5d25526303c780ec9824d73845" translate="yes" xml:space="preserve">
          <source>The element's value must be a reference blessed to the named class or to one of its subclasses. The element is not initialized by default.</source>
          <target state="translated">要素の値は、指定されたクラスまたはそのサブクラスのいずれかに祝福された参照でなければなりません。要素はデフォルトでは初期化されません。</target>
        </trans-unit>
        <trans-unit id="96e4b34c1d85fc2315f1a2e433a4a09c9e1219d5" translate="yes" xml:space="preserve">
          <source>The elements must be identical</source>
          <target state="translated">要素は同一でなければならない</target>
        </trans-unit>
        <trans-unit id="cfb20ee6aa799cc8c00cade7ca9b921cb0624824" translate="yes" xml:space="preserve">
          <source>The elements we're getting from the array start with a &lt;code&gt;$&lt;/code&gt; because we're getting just a single value out of the array; you ask for a scalar, you get a scalar.</source>
          <target state="translated">配列から取得する要素は &lt;code&gt;$&lt;/code&gt; で始まります。これは、配列から1つの値しか取得しないためです。スカラーを要求すると、スカラーを取得します。</target>
        </trans-unit>
        <trans-unit id="c2d2a5272ddb492896f4b1aa2fdc89f7d8b57cf1" translate="yes" xml:space="preserve">
          <source>The elliptical statement cannot stand in for an expression that is part of a larger statement, since the &lt;code&gt;...&lt;/code&gt; is also the three-dot version of the flip-flop operator (see &lt;a href=&quot;perlop#Range-Operators&quot;&gt;Range Operators in perlop&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;...&lt;/code&gt; はフリップフロップ演算子の3ドットバージョンでもあるので、楕円のステートメントは、より大きなステートメントの一部である式の&lt;a href=&quot;perlop#Range-Operators&quot;&gt;代わりになる&lt;/a&gt;ことはできません（perlopのRange演算子を参照）。</target>
        </trans-unit>
        <trans-unit id="81b37f465ff28273358e52fdc4fa0d8ce3005267" translate="yes" xml:space="preserve">
          <source>The elliptical statement cannot stand in for an expression that is part of a larger statement. These examples of attempts to use an ellipsis are syntax errors:</source>
          <target state="translated">楕円文は、より大きな文の一部である式の代用にはなりません。省略記号を使用しようとしたこれらの例は、構文エラーです。</target>
        </trans-unit>
        <trans-unit id="545891d79255fc3bc69760f930c3f25bc8ae8965" translate="yes" xml:space="preserve">
          <source>The email you got when you received your CPAN ID will tell you how to log in to PAUSE, the Perl Authors Upload SErver. From the menus there, you can upload your module to CPAN.</source>
          <target state="translated">CPAN IDを受け取ったときに送られてきたメールには、Perl Authors Upload SErverであるPAUSEへのログイン方法が記載されています。そこにあるメニューから、あなたのモジュールをCPANにアップロードすることができます。</target>
        </trans-unit>
        <trans-unit id="327ff1bdde855523cde51b50cbe96fda9133ba11" translate="yes" xml:space="preserve">
          <source>The empty pattern &lt;code&gt;//&lt;/code&gt;</source>
          <target state="translated">空のパターン &lt;code&gt;//&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4129d1babbccbe45b1d8ec086eee7286a139eb46" translate="yes" xml:space="preserve">
          <source>The encoding being specified.</source>
          <target state="translated">指定されているエンコーディング。</target>
        </trans-unit>
        <trans-unit id="64546adcd99f15ed4491ee50ced298a5f03d14c6" translate="yes" xml:space="preserve">
          <source>The encoding event is generated when a test file wants to specify the encoding to be used when formatting its output. This event is intended to be produced by formatter classes and used for interpreting test names, message contents, etc.</source>
          <target state="translated">エンコーディングイベントは、テストファイルが出力をフォーマットする際に使用するエンコーディングを指定したい場合に生成されます。このイベントはフォーマッタクラスによって生成され、テスト名やメッセージの内容などを解釈するために使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="588a9b522600848c7a034e730acfdc94a0b61885" translate="yes" xml:space="preserve">
          <source>The encoding is assumed to be an Encode object, on entry the PV of the sv is assumed to be octets in that encoding, and the sv will be converted into Unicode (and UTF-8).</source>
          <target state="translated">エンコーディングはEncodeオブジェクトであると仮定され、エントリー時にsvのPVはそのエンコーディングのオクテットであると仮定され、svはUnicode(およびUTF-8)に変換されます。</target>
        </trans-unit>
        <trans-unit id="2aac7e4350e18d454240d654ed5501855f5c3e7e" translate="yes" xml:space="preserve">
          <source>The encoding is assumed to be an Encode object, the PV of the ssv is assumed to be octets in that encoding and decoding the input starts from the position which (PV + *offset) pointed to. The dsv will be concatenated the decoded UTF-8 string from ssv. Decoding will terminate when the string tstr appears in decoding output or the input ends on the PV of the ssv. The value which the offset points will be modified to the last input position on the ssv.</source>
          <target state="translated">エンコードはEncodeオブジェクトとし、ssvのPVはそのエンコードにおけるオクテットとし、入力のデコードは(PV+*offset)が指す位置から始まります。dsv は ssv からデコードされた UTF-8 文字列を連結したものになります。デコード出力に文字列 tstr が現れるか、入力が ssv の PV で終了するとデコードは終了します。オフセットが指す値は ssv の最後の入力位置に修正されます。</target>
        </trans-unit>
        <trans-unit id="e2d9b11db298559d7d705aec3e36d98ebb2389cc" translate="yes" xml:space="preserve">
          <source>The encoding name determined to be suitable for file system interfaces involving file names. &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; know this encoding as &quot;locale_fs&quot;.</source>
          <target state="translated">ファイル名を含むファイルシステムインターフェイスに適していると判断されたエンコーディング名。&lt;a href=&quot;encode&quot;&gt;エンコード&lt;/a&gt;は、このエンコードを「locale_fs」として認識します。</target>
        </trans-unit>
        <trans-unit id="050d2bf9033fce6c43078983175c16f9530f4831" translate="yes" xml:space="preserve">
          <source>The encoding name determined to be suitable for the current locale. &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; know this encoding as &quot;locale&quot;.</source>
          <target state="translated">現在のロケールに適していると判断されたエンコーディング名。&lt;a href=&quot;encode&quot;&gt;エンコード&lt;/a&gt;は、このエンコードを「ロケール」として認識します。</target>
        </trans-unit>
        <trans-unit id="d3062423073ff3110a760ac5983fd2a737512781" translate="yes" xml:space="preserve">
          <source>The encoding pragma is not supported on EBCDIC platforms.</source>
          <target state="translated">エンコーディング pragma は EBCDIC プラットフォームではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="04abf26a5ca58977d603141fc0ef79876490369d" translate="yes" xml:space="preserve">
          <source>The encoding requested is not supported by the Encode module.</source>
          <target state="translated">要求されたエンコーディングはEncodeモジュールではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="dc406e81e6f88430afa8892d13871c0d72a82fe4" translate="yes" xml:space="preserve">
          <source>The encoding that corresponds to ANSI varies between different editions of Windows. For many western editions of Windows ANSI corresponds to CP-1252 which is a character set similar to ISO-8859-1. Conceptually the ANSI character set is a similar concept to the POSIX locale CODESET so this module figures out what the ANSI code page is and make this available as $ENCODING_LOCALE and the &quot;locale&quot; Encoding alias.</source>
          <target state="translated">ANSIに対応するエンコーディングは、Windowsの異なるエディションによって異なります。Windows の多くの欧米版では、ANSI は ISO-8859-1 に似た文字セットである CP-1252 に対応しています。概念的には、ANSI 文字セットは POSIX のロケール CODESET と似たような概念なので、このモジュールは ANSI コードページが何であるかを把握し、これを $ENCODING_LOCALE と &quot;ロケール&quot; エンコーディングエイリアスとして利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="39b0be99c7e0fde92c59a2dde4b75bd2c5e6a66a" translate="yes" xml:space="preserve">
          <source>The encodings of &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt; are individually settable by parameters to the pragma:</source>
          <target state="translated">&lt;code&gt;STDIN&lt;/code&gt; および &lt;code&gt;STDOUT&lt;/code&gt; のエンコーディングは、プラグマへのパラメータによって個別に設定できます。</target>
        </trans-unit>
        <trans-unit id="6d62118e6065a9d454aaecd74844f2def3aa8534" translate="yes" xml:space="preserve">
          <source>The encodings to be used for reading and writing output to the a console. &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; know these encodings as &quot;console_in&quot; and &quot;console_out&quot;.</source>
          <target state="translated">コンソールへの出力の読み取りと書き込みに使用されるエンコーディング。&lt;a href=&quot;encode&quot;&gt;エンコード&lt;/a&gt;は、これらのエンコードを「console_in」および「console_out」として認識します。</target>
        </trans-unit>
        <trans-unit id="0d58ea5991c657606e31a1ebddfdcbdfe42b5a94" translate="yes" xml:space="preserve">
          <source>The end result of all this is a list of pairs of filenames. By default that is what is returned by &lt;code&gt;globmap&lt;/code&gt; . In this example the data structure returned will look like this</source>
          <target state="translated">これらすべての最終結果は、ファイル名のペアのリストです。デフォルトでは、これは &lt;code&gt;globmap&lt;/code&gt; によって返されるものです。この例では、返されるデータ構造は次のようになります</target>
        </trans-unit>
        <trans-unit id="d6253ff05c4cc919ddf707ca73edb1a406fe9c35" translate="yes" xml:space="preserve">
          <source>The end result of all this is a list of pairs of filenames. By default that is what is returned by &lt;code&gt;globmap&lt;/code&gt;. In this example the data structure returned will look like this</source>
          <target state="translated">これらすべての最終結果は、ファイル名のペアのリストです。デフォルトでは、これが &lt;code&gt;globmap&lt;/code&gt; によって返されるものです。この例では、返されるデータ構造は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1fda9b67eec164f9ff303e259fb27be29ca04c85" translate="yes" xml:space="preserve">
          <source>The engine implementing &lt;code&gt;pack()&lt;/code&gt; Perl function.</source>
          <target state="translated">&lt;code&gt;pack()&lt;/code&gt; Perl関数を実装するエンジン。</target>
        </trans-unit>
        <trans-unit id="66180c8b26ee487f27a0dc49b26d2d5244b75b6e" translate="yes" xml:space="preserve">
          <source>The engine implementing &lt;code&gt;pack()&lt;/code&gt; Perl function. Note: parameters &lt;code&gt;next_in_list&lt;/code&gt; and &lt;code&gt;flags&lt;/code&gt; are not used. This call should not be used; use &lt;code&gt;packlist&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;pack()&lt;/code&gt; Perl関数を実装するエンジン。注：パラメーター &lt;code&gt;next_in_list&lt;/code&gt; および &lt;code&gt;flags&lt;/code&gt; は使用されません。この呼び出しは使用しないでください。代わりに &lt;code&gt;packlist&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="463670dd77f9d4b250cfbf1933d859da20649fdf" translate="yes" xml:space="preserve">
          <source>The engine implementing &lt;code&gt;unpack()&lt;/code&gt; Perl function. Note: parameters &lt;code&gt;strbeg&lt;/code&gt;, &lt;code&gt;new_s&lt;/code&gt; and &lt;code&gt;ocnt&lt;/code&gt; are not used. This call should not be used, use &lt;code&gt;unpackstring&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;unpack()&lt;/code&gt; Perl関数を実装するエンジン。注：パラメーター &lt;code&gt;strbeg&lt;/code&gt; 、 &lt;code&gt;new_s&lt;/code&gt; 、および &lt;code&gt;ocnt&lt;/code&gt; は使用されません。この呼び出しは使用しないでください。代わりに &lt;code&gt;unpackstring&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="733a0f46f2e4433da326d8b3d8649ddcec9e6f67" translate="yes" xml:space="preserve">
          <source>The engine implementing pack() Perl function.</source>
          <target state="translated">Perl 関数 pack()を実装したエンジン。</target>
        </trans-unit>
        <trans-unit id="3347858c5b43f539e0e1c803ce10b0c1e284b3a5" translate="yes" xml:space="preserve">
          <source>The engine implementing pack() Perl function. Note: parameters next_in_list and flags are not used. This call should not be used; use packlist instead.</source>
          <target state="translated">Perl 関数 pack()を実装したエンジン。注意:パラメータ next_in_list と flags は使用されません。この呼び出しは使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="1108f56aaa943f349a8b769e2a9d1fa1d3614cf4" translate="yes" xml:space="preserve">
          <source>The engine implementing the &lt;code&gt;unpack()&lt;/code&gt; Perl function.</source>
          <target state="translated">&lt;code&gt;unpack()&lt;/code&gt; Perl関数を実装するエンジン。</target>
        </trans-unit>
        <trans-unit id="5023a760442586ad60fa18e526984ee22ee1b465" translate="yes" xml:space="preserve">
          <source>The engine implementing the unpack() Perl function.</source>
          <target state="translated">Perl の unpack()関数を実装したエンジン。</target>
        </trans-unit>
        <trans-unit id="23836ad0aab663b81186836eab5aaaa304905073" translate="yes" xml:space="preserve">
          <source>The engine implementing unpack() Perl function. Note: parameters strbeg, new_s and ocnt are not used. This call should not be used, use unpackstring instead.</source>
          <target state="translated">unpack()Perl 関数を実装したエンジン。注意:パラメータ strbeg,new_s,ocnt は使用されません。この呼び出しは使用しないで、代わりに unpackstring を使用してください。</target>
        </trans-unit>
        <trans-unit id="d9382e3775d5db72bf3f9d8d46eb30460f658e51" translate="yes" xml:space="preserve">
          <source>The engine's private copy of the flags the pattern was compiled with. Usually this is the same as &lt;code&gt;extflags&lt;/code&gt; unless the engine chose to modify one of them.</source>
          <target state="translated">パターンがコンパイルされたフラグのエンジンのプライベートコピー。エンジンがそれらのいずれかを変更することを選択しない限り、これは通常、 &lt;code&gt;extflags&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="9ce2a132adf5c2ffffe82f2f2320a1ff022e1a1c" translate="yes" xml:space="preserve">
          <source>The entire file system is compressed such as via &quot;DoubleSpace&quot;.</source>
          <target state="translated">DoubleSpace」を経由するなど、ファイルシステム全体を圧縮しています。</target>
        </trans-unit>
        <trans-unit id="7e628a3e380b1bb720e0473c9d50225fb2d2a7bf" translate="yes" xml:space="preserve">
          <source>The entire getaddrinfo() subsystem can be exported using the tag &lt;code&gt;:addrinfo&lt;/code&gt; ; this exports the getaddrinfo() and getnameinfo() functions, and all the &lt;code&gt;AI_*&lt;/code&gt; , &lt;code&gt;NI_*&lt;/code&gt; , &lt;code&gt;NIx_*&lt;/code&gt; and &lt;code&gt;EAI_*&lt;/code&gt; constants.</source>
          <target state="translated">getaddrinfo（）サブシステム全体は、タグ &lt;code&gt;:addrinfo&lt;/code&gt; を使用してエクスポートできます。これにより、getaddrinfo（）関数とgetnameinfo（）関数、およびすべての &lt;code&gt;AI_*&lt;/code&gt; 、 &lt;code&gt;NI_*&lt;/code&gt; 、 &lt;code&gt;NIx_*&lt;/code&gt; 、 &lt;code&gt;EAI_*&lt;/code&gt; 定数がエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="f9deffc2b03edaef07355a1dc99c65f075b4e32e" translate="yes" xml:space="preserve">
          <source>The entire getaddrinfo() subsystem can be exported using the tag &lt;code&gt;:addrinfo&lt;/code&gt;; this exports the getaddrinfo() and getnameinfo() functions, and all the &lt;code&gt;AI_*&lt;/code&gt;, &lt;code&gt;NI_*&lt;/code&gt;, &lt;code&gt;NIx_*&lt;/code&gt; and &lt;code&gt;EAI_*&lt;/code&gt; constants.</source>
          <target state="translated">getaddrinfo（）サブシステム全体は、タグ &lt;code&gt;:addrinfo&lt;/code&gt; ;を使用してエクスポートできます。これにより、getaddrinfo（）関数とgetnameinfo（）関数、およびすべての &lt;code&gt;AI_*&lt;/code&gt; 、 &lt;code&gt;NI_*&lt;/code&gt; 、 &lt;code&gt;NIx_*&lt;/code&gt; 、および &lt;code&gt;EAI_*&lt;/code&gt; 定数がエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="425561102978b28bf5fcfefe3513eb2739c2c06d" translate="yes" xml:space="preserve">
          <source>The entire hardware and software context in which a program runs. A program written in a platform-dependent language might break if you change any of the following: machine, operating system, libraries, compiler, or system configuration. The</source>
          <target state="translated">プログラムが動作するハードウェアとソフトウェアのコンテキスト全体。プラットフォームに依存する言語で書かれたプログラムは、マシン、オペレーティングシステム、ライブラリ、コンパイラ、システム設定のいずれかを変更すると壊れてしまう可能性があります。プラットフォームに依存する言語で書かれたプログラムは、マシン、オペレーティングシステム、ライブラリ、コンパイラ、システム構成のいずれかを変更すると壊れてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="062ee9dd6945c627c0db8805ff34b8bebe56650f" translate="yes" xml:space="preserve">
          <source>The entire upgrading/downgrading is still experimental and might not work as you expect or may even have bugs. You might get errors like this:</source>
          <target state="translated">アップグレード/ダウングレード全体はまだ実験的なものであり、期待通りに動作しないかもしれませんし、バグがあるかもしれません。このようなエラーが出るかもしれません。</target>
        </trans-unit>
        <trans-unit id="5e462b82c7819411d2795ec13fd404d6485cf8ac" translate="yes" xml:space="preserve">
          <source>The environment is not automatically made available as separate scalar variables.</source>
          <target state="translated">環境が自動的に別のスカラー変数として利用可能になるわけではありません。</target>
        </trans-unit>
        <trans-unit id="4a714b26cc76c6e720a2c1944b7c3273669f5c69" translate="yes" xml:space="preserve">
          <source>The environment variable &lt;code&gt;PERL_RL&lt;/code&gt; governs which ReadLine clone is loaded. If the value is false, a dummy interface is used. If the value is true, it should be tail of the name of the package to use, such as &lt;code&gt;Perl&lt;/code&gt; or &lt;code&gt;Gnu&lt;/code&gt; .</source>
          <target state="translated">環境変数 &lt;code&gt;PERL_RL&lt;/code&gt; は、読み込まれるReadLineクローンを管理します。値がfalseの場合、ダミーインターフェイスが使用されます。値がtrueの場合、 &lt;code&gt;Perl&lt;/code&gt; や &lt;code&gt;Gnu&lt;/code&gt; など、使用するパッケージの名前の末尾にする必要があります。</target>
        </trans-unit>
        <trans-unit id="390b6e9b1745d2d828a2345d3a86cf8b0b336f56" translate="yes" xml:space="preserve">
          <source>The environment variable &lt;code&gt;PERL_RL&lt;/code&gt; governs which ReadLine clone is loaded. If the value is false, a dummy interface is used. If the value is true, it should be tail of the name of the package to use, such as &lt;code&gt;Perl&lt;/code&gt; or &lt;code&gt;Gnu&lt;/code&gt;.</source>
          <target state="translated">環境変数 &lt;code&gt;PERL_RL&lt;/code&gt; は、ロードされるReadLineクローンを管理します。値がfalseの場合、ダミーインターフェイスが使用されます。値がtrueの場合、 &lt;code&gt;Perl&lt;/code&gt; や &lt;code&gt;Gnu&lt;/code&gt; など、使用するパッケージの名前の末尾である必要があります。</target>
        </trans-unit>
        <trans-unit id="5ee4db4f603bb2d952278fab3f0573c9f206b756" translate="yes" xml:space="preserve">
          <source>The environment variable &lt;code&gt;PERL_SIGNALS&lt;/code&gt; is set to &lt;code&gt;unsafe&lt;/code&gt; (see &lt;a href=&quot;perlrun#PERL_SIGNALS&quot;&gt;&quot;PERL_SIGNALS&quot; in perlrun&lt;/a&gt;).</source>
          <target state="translated">環境変数 &lt;code&gt;PERL_SIGNALS&lt;/code&gt; が &lt;code&gt;unsafe&lt;/code&gt; 設定されています（perlrunの&lt;a href=&quot;perlrun#PERL_SIGNALS&quot;&gt;「PERL_SIGNALS」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="17c8987c252d8945d5eef3157bdde1da3d4677a3" translate="yes" xml:space="preserve">
          <source>The error function [C99].</source>
          <target state="translated">エラー関数[C99]。</target>
        </trans-unit>
        <trans-unit id="c03bfb5951202558a79d3146a129bcd7599c5997" translate="yes" xml:space="preserve">
          <source>The error level, should be 'WARNING' or 'ERROR'.</source>
          <target state="translated">エラーレベルは、'WARNING'または'ERROR'でなければなりません。</target>
        </trans-unit>
        <trans-unit id="489643f4ea640ba730461cfbd32bed09509bae25" translate="yes" xml:space="preserve">
          <source>The error message or object will be used as an exception, by default returning control to the nearest enclosing &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, but subject to modification by a &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler. In any case, the &lt;code&gt;croak_sv&lt;/code&gt; function never returns normally.</source>
          <target state="translated">エラーメッセージまたはオブジェクトは例外として使用されます。デフォルトでは、最も近い囲んでいる &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; に制御を返しますが、 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーによる変更の対象となります。いずれの場合も、 &lt;code&gt;croak_sv&lt;/code&gt; 関数が正常に戻ることはありません。</target>
        </trans-unit>
        <trans-unit id="4301dd87f0c694dc26ff0db9df44403205bacc19" translate="yes" xml:space="preserve">
          <source>The error message or object will be used as an exception, by default returning control to the nearest enclosing &lt;code&gt;eval&lt;/code&gt;, but subject to modification by a &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler. In any case, the &lt;code&gt;croak_sv&lt;/code&gt; function never returns normally.</source>
          <target state="translated">エラーメッセージまたはオブジェクトは例外として使用され、デフォルトでは最も近い囲んでいる &lt;code&gt;eval&lt;/code&gt; に制御を返しますが、 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーによる変更の対象となります。いずれの場合も、 &lt;code&gt;croak_sv&lt;/code&gt; 関数が正常に戻ることはありません。</target>
        </trans-unit>
        <trans-unit id="664a7836db566d6a3f4c07aec582c78faf8e8984" translate="yes" xml:space="preserve">
          <source>The error message or object will by default be written to standard error, but this is subject to modification by a &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; handler.</source>
          <target state="translated">エラーメッセージまたはオブジェクトはデフォルトで標準エラーに書き込まれますが、これは &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; ハンドラーによって変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="b67bc4e2f3fe19fc43d4ef72e9869cbd0c9674e2" translate="yes" xml:space="preserve">
          <source>The error message will be used as an exception, by default returning control to the nearest enclosing &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, but subject to modification by a &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler. In any case, the &lt;code&gt;croak&lt;/code&gt; function never returns normally.</source>
          <target state="translated">エラーメッセージは例外として使用されます。デフォルトでは、最も近い &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; に制御を返しますが、$ SIG {__ DIE__}ハンドラーによって変更される可能性があります。いずれの場合でも、 &lt;code&gt;croak&lt;/code&gt; 関数は正常に戻りません。</target>
        </trans-unit>
        <trans-unit id="b00b7771ac407f2dd89d3f22f11d4228e791df56" translate="yes" xml:space="preserve">
          <source>The error message will be used as an exception, by default returning control to the nearest enclosing &lt;code&gt;eval&lt;/code&gt;, but subject to modification by a &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; handler. In any case, the &lt;code&gt;croak&lt;/code&gt; function never returns normally.</source>
          <target state="translated">エラーメッセージは例外として使用され、デフォルトでは最も近い囲んでいる &lt;code&gt;eval&lt;/code&gt; に制御を返しますが、 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; ハンドラーによって変更される可能性があります。いずれにせよ、 &lt;code&gt;croak&lt;/code&gt; 関数は正常に戻ることはありません。</target>
        </trans-unit>
        <trans-unit id="900d77a6d61d64e8af52decba69cafd8be937ac1" translate="yes" xml:space="preserve">
          <source>The error number returned by a &lt;b&gt;syscall&lt;/b&gt; when it fails. Perl refers to the error by the name &lt;code&gt;$!&lt;/code&gt; (or &lt;code&gt;$OS_ERROR&lt;/code&gt; if you use the English module).</source>
          <target state="translated">&lt;b&gt;syscall&lt;/b&gt;が失敗したときに返されるエラー番号。Perlは &lt;code&gt;$!&lt;/code&gt; という名前でエラーを参照します。（英語のモジュールを使用する場合は &lt;code&gt;$OS_ERROR&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4c482150704e0bf7cda4048aa90adb166f9af2aa" translate="yes" xml:space="preserve">
          <source>The error value will be a dualvar; comparable to the &lt;code&gt;EAI_*&lt;/code&gt; error constants, or printable as a human-readable error message string. If no error occurred it will be zero numerically and an empty string.</source>
          <target state="translated">エラー値はdualvarになります。 &lt;code&gt;EAI_*&lt;/code&gt; エラー定数に相当するか、人間が読めるエラーメッセージ文字列として印刷できます。エラーが発生しなかった場合、数値はゼロになり、文字列は空になります。</target>
        </trans-unit>
        <trans-unit id="31b014cdbfece5798eb6937c7e465a37ae5041c3" translate="yes" xml:space="preserve">
          <source>The error value will be a dualvar; comparable to the &lt;code&gt;EAI_*&lt;/code&gt; error constants, or printable as a human-readable error message string. The host and service names will be plain strings.</source>
          <target state="translated">エラー値はdualvarになります。 &lt;code&gt;EAI_*&lt;/code&gt; エラー定数に相当するか、人間が読めるエラーメッセージ文字列として印刷できます。ホスト名とサービス名はプレーンな文字列になります。</target>
        </trans-unit>
        <trans-unit id="953076d4b6c381c0ffffe4399cd4fbc39f8ceb23" translate="yes" xml:space="preserve">
          <source>The error value will be a dualvar; comparable to the &lt;code&gt;EI_*&lt;/code&gt; error constants, or printable as a human-readable error message string. If no error occurred it will be zero numerically and an empty string.</source>
          <target state="translated">エラー値はdualvarになります。 &lt;code&gt;EI_*&lt;/code&gt; エラー定数に相当するか、人間が読み取れるエラーメッセージ文字列として出力できます。エラーが発生しなかった場合、数値はゼロで空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="4f48137cede1f63ecf865be7641415458ec370ab" translate="yes" xml:space="preserve">
          <source>The error value will be a dualvar; comparable to the &lt;code&gt;EI_*&lt;/code&gt; error constants, or printable as a human-readable error message string. The host and service names will be plain strings.</source>
          <target state="translated">エラー値はdualvarになります。 &lt;code&gt;EI_*&lt;/code&gt; エラー定数に相当するか、人間が読み取れるエラーメッセージ文字列として出力できます。ホスト名とサービス名はプレーンな文字列になります。</target>
        </trans-unit>
        <trans-unit id="69f6f9a5df3062e908bd0165d9c2b9fe0563d15c" translate="yes" xml:space="preserve">
          <source>The errors facet is a list instead of a single item, any number of errors can be listed. In this facet &lt;code&gt;details&lt;/code&gt; describes the error, or may contain the raw error message itself (such as an exception). In perl exception may be blessed objects, as such the raw data for this facet may contain nested items which are blessed.</source>
          <target state="translated">エラーファセットは単一の項目ではなくリストであり、任意の数のエラーをリストできます。このファセットの &lt;code&gt;details&lt;/code&gt; は、エラーについて説明するか、生のエラーメッセージ自体（例外など）が含まれる場合があります。perlの例外は、祝福されたオブジェクトである可能性があります。そのため、このファセットの生データには、祝福されたネストされたアイテムが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="ce05d758ea509461baa38b741595abae13996ba5" translate="yes" xml:space="preserve">
          <source>The escape is the beginning or final end point of a range</source>
          <target state="translated">エスケープは、範囲の始点または終点です。</target>
        </trans-unit>
        <trans-unit id="7d1c1519bb36749c3cad434bbe27ce9cca770380" translate="yes" xml:space="preserve">
          <source>The evaluation modifier &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; wraps an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{...}&lt;/a&gt;&lt;/code&gt; around the replacement string and the evaluated result is substituted for the matched substring. Some examples:</source>
          <target state="translated">評価修飾子 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///e&lt;/a&gt;&lt;/code&gt; ラップ &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval{...}&lt;/a&gt;&lt;/code&gt; 置換文字列の周りを、評価結果は、マッチした部分文字列に置換されます。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="acb75763cbe80034d5f373af05d3a0392a02769b" translate="yes" xml:space="preserve">
          <source>The evaluation modifier &lt;code&gt;s///e&lt;/code&gt; wraps an &lt;code&gt;eval{...}&lt;/code&gt; around the replacement string and the evaluated result is substituted for the matched substring. Some examples:</source>
          <target state="translated">評価修飾子 &lt;code&gt;s///e&lt;/code&gt; は &lt;code&gt;eval{...}&lt;/code&gt; を置換文字列にラップし、評価された結果が一致した部分文字列に置き換えられます。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="cfba3806303ac6dda3f30dd80fde49f7e2183210" translate="yes" xml:space="preserve">
          <source>The event from &lt;code&gt;ok(1, &quot;pass&quot;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ok(1, &quot;pass&quot;)&lt;/code&gt; からのイベント</target>
        </trans-unit>
        <trans-unit id="863be168c93a9b4e951447892af8574c10035f63" translate="yes" xml:space="preserve">
          <source>The event of a plan</source>
          <target state="translated">企画のイベントの様子</target>
        </trans-unit>
        <trans-unit id="b4c657becf62f17dba34f2c0a7892b03eec9664a" translate="yes" xml:space="preserve">
          <source>The exact implementation of this macro varies by architecture and version of perl, and the return value may change per invocation, so the value is only valid for the duration of a single perl process.</source>
          <target state="translated">このマクロの正確な実装はperlのアーキテクチャやバージョンによって異なり、戻り値は呼び出しごとに変更される可能性があるため、値は1つのperlプロセスの間のみ有効です。</target>
        </trans-unit>
        <trans-unit id="77f569ab2ca56d55a753f65526e499d75cae3e5d" translate="yes" xml:space="preserve">
          <source>The exact line number may vary, but if the warning (W) comes from a line line this</source>
          <target state="translated">正確な行番号は異なるかもしれませんが、警告(W)が行番号から来ている場合は、この</target>
        </trans-unit>
        <trans-unit id="995bdcd8d207fa374f9f43b6e279df6bd565026b" translate="yes" xml:space="preserve">
          <source>The exact line numbers may vary between Perl releases. The warnings are benign and can be ignored: in later C compiler releases the warnings should be gone.</source>
          <target state="translated">正確な行番号は Perl のリリースによって異なるかもしれません。これらの警告は無害で無視することができます。</target>
        </trans-unit>
        <trans-unit id="44fc79e864b1257675cf101f1f7fd3a57bf639a9" translate="yes" xml:space="preserve">
          <source>The exact manner in which the address is returned in $symref is not currently defined. The only initial requirement is that $symref can be passed to, and understood by, dl_install_xsub().</source>
          <target state="translated">symref でアドレスが返される正確な方法は、現在のところ定義されていません。唯一の初期条件は、 $symref が dl_install_xsub()に渡され、それを理解できることです。</target>
        </trans-unit>
        <trans-unit id="e70c2ef4d5d588ebbe05350bafa35fc8f80a6a1c" translate="yes" xml:space="preserve">
          <source>The exact meaning of the $gcos field varies but it usually contains the real name of the user (as opposed to the login name) and other information pertaining to the user. Beware, however, that in many system users are able to change this information and therefore it cannot be trusted and therefore the $gcos is tainted (see &lt;a href=&quot;../perlsec&quot;&gt;perlsec&lt;/a&gt;). The $passwd and $shell, user's encrypted password and login shell, are also tainted, for the same reason.</source>
          <target state="translated">$ gcosフィールドの正確な意味はさまざまですが、通常は（ログイン名ではなく）ユーザーの実際の名前とユーザーに関するその他の情報が含まれます。ただし、多くのシステムユーザーはこの情報を変更できるため、信頼できないため、$ gcosが汚染されていることに&lt;a href=&quot;../perlsec&quot;&gt;注意して&lt;/a&gt;ください（perlsecを参照）。同じ理由で、ユーザーの暗号化されたパスワードとログインシェルである$ passwdと$ shellも汚染されています。</target>
        </trans-unit>
        <trans-unit id="d7d6887be4411b65036ddda7abbe1d73b16c3d9f" translate="yes" xml:space="preserve">
          <source>The exact meaning of the $gcos field varies but it usually contains the real name of the user (as opposed to the login name) and other information pertaining to the user. Beware, however, that in many system users are able to change this information and therefore it cannot be trusted and therefore the $gcos is tainted (see &lt;a href=&quot;perlsec&quot;&gt;perlsec&lt;/a&gt;). The $passwd and $shell, user's encrypted password and login shell, are also tainted, for the same reason.</source>
          <target state="translated">$ gcosフィールドの正確な意味はさまざまですが、通常は（ログイン名ではなく）ユーザーの実際の名前とユーザーに関するその他の情報が含まれます。ただし、多くのシステムユーザーはこの情報を変更できるため、信頼できないため、$ gcosが汚染されていることに&lt;a href=&quot;perlsec&quot;&gt;注意して&lt;/a&gt;ください（perlsecを参照）。同じ理由で、ユーザーの暗号化されたパスワードとログインシェルである$ passwdと$ shellも汚染されています。</target>
        </trans-unit>
        <trans-unit id="6462c6eed55545498a4b1274ffec108a59806854" translate="yes" xml:space="preserve">
          <source>The exact rules for how often (??{}) and (?{}) are executed in a pattern are unspecified. In the case of a successful match you can assume that they DWIM and will be executed in left to right order the appropriate number of times in the accepting path of the pattern as would any other meta-pattern. How non-accepting pathways and match failures affect the number of times a pattern is executed is specifically unspecified and may vary depending on what optimizations can be applied to the pattern and is likely to change from version to version.</source>
          <target state="translated">パターンの中で(? マッチに成功した場合、これらはDWIMであり、他のメタパターンと同様に、パターンのアクセプタンスパス内で適切な回数、左から右へと実行されると仮定することができます。非アクセプタンスパスやマッチの失敗がパターンの実行回数にどのような影響を与えるかは特に指定されておらず、どのような最適化がパターンに適用できるかによって変わる可能性があり、バージョンによって変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fdf1655ab3b8310f5b318568059958f807b33f0d" translate="yes" xml:space="preserve">
          <source>The exact rules for how often &lt;code&gt;(??{})&lt;/code&gt; and &lt;code&gt;(?{})&lt;/code&gt; are executed in a pattern are unspecified. In the case of a successful match you can assume that they DWIM and will be executed in left to right order the appropriate number of times in the accepting path of the pattern as would any other meta-pattern. How non-accepting pathways and match failures affect the number of times a pattern is executed is specifically unspecified and may vary depending on what optimizations can be applied to the pattern and is likely to change from version to version.</source>
          <target state="translated">&lt;code&gt;(??{})&lt;/code&gt; と &lt;code&gt;(?{})&lt;/code&gt; がパターンで実行される頻度の正確なルールは指定されていません。一致が成功した場合、それらはDWIMであり、他のメタパターンと同様に、パターンの受け入れパスで適切な回数、左から右の順序で実行されると想定できます。受け入れられない経路と一致の失敗がパターンの実行回数にどのように影響するかは特に特定されておらず、パターンに適用できる最適化によって異なり、バージョンごとに変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b7beaad311b9cd2e0a10bf6f8d5a018e83ebb91c" translate="yes" xml:space="preserve">
          <source>The exact same effect could, incidentally, be achieved with a single &quot;=for&quot; paragraph:</source>
          <target state="translated">ちなみに、全く同じ効果は、「=for」の段落でも達成できます。</target>
        </trans-unit>
        <trans-unit id="fb72ca6692327d6fee94ee24d9e91cba6dc1e016" translate="yes" xml:space="preserve">
          <source>The exact semantics and interface of TYPE and ATTRS are still evolving. TYPE is currently bound to the use of the &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; pragma, and attributes are handled using the &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; pragma, or, starting from Perl 5.8.0, also via the &lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute::Handlers&lt;/a&gt; module. See &lt;a href=&quot;perlsub#Private-Variables-via-my%28%29&quot;&gt;&quot;Private Variables via my()&quot; in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">TYPEとATTRSの正確なセマンティクスとインターフェースはまだ進化しています。 TYPEは現在、&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;プラグマの使用にバインドされており、属性は&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;プラグマを使用して、またはPerl 5.8.0以降、&lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute ::&lt;/a&gt; Handlersモジュールを介して処理されます。詳細については&lt;a href=&quot;perlsub#Private-Variables-via-my%28%29&quot;&gt;、perlsubの「my（）を介したプライベート変数」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="61acc8b78f6506711798cda20b87d0c0557e6d78" translate="yes" xml:space="preserve">
          <source>The exact semantics and interface of TYPE and ATTRS are still evolving. TYPE is currently bound to the use of the &lt;code&gt;fields&lt;/code&gt; pragma, and attributes are handled using the &lt;code&gt;attributes&lt;/code&gt; pragma, or, starting from Perl 5.8.0, also via the &lt;code&gt;Attribute::Handlers&lt;/code&gt; module. See &lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details, and &lt;a href=&quot;../fields&quot;&gt;fields&lt;/a&gt;, &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt;, and &lt;a href=&quot;../attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">TYPEとATTRSの正確なセマンティクスとインターフェースはまだ進化しています。 TYPEは現在、 &lt;code&gt;fields&lt;/code&gt; プラグマの使用にバインドされており、属性は &lt;code&gt;attributes&lt;/code&gt; プラグマを使用して、またはPerl 5.8.0以降では &lt;code&gt;Attribute::Handlers&lt;/code&gt; Handlers モジュールを介して処理されます。詳細については、&lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;perlsubのmy（）によるプライベート変数&lt;/a&gt;、&lt;a href=&quot;../fields&quot;&gt;フィールド&lt;/a&gt;、&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;、および&lt;a href=&quot;../attribute/handlers&quot;&gt;Attribute :: &lt;/a&gt;Handlersを参照してください。</target>
        </trans-unit>
        <trans-unit id="90e321854a7d357a33050984753578010a7cc972" translate="yes" xml:space="preserve">
          <source>The exact semantics and interface of TYPE and ATTRS are still evolving. TYPE is currently bound to the use of the &lt;code&gt;fields&lt;/code&gt; pragma, and attributes are handled using the &lt;code&gt;attributes&lt;/code&gt; pragma, or, starting from Perl 5.8.0, also via the &lt;code&gt;Attribute::Handlers&lt;/code&gt; module. See &lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details, and &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt;, &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;, and &lt;a href=&quot;attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">TYPEとATTRSの正確なセマンティクスとインターフェースはまだ進化しています。 TYPEは現在、 &lt;code&gt;fields&lt;/code&gt; プラグマの使用にバインドされており、属性は &lt;code&gt;attributes&lt;/code&gt; プラグマを使用して、またはPerl 5.8.0以降では &lt;code&gt;Attribute::Handlers&lt;/code&gt; Handlers モジュールを介して処理されます。詳細については、&lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;perlsubのmy（）によるプライベート変数&lt;/a&gt;、&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;、&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;、および&lt;a href=&quot;attribute/handlers&quot;&gt;Attribute :: &lt;/a&gt;Handlersを参照してください。</target>
        </trans-unit>
        <trans-unit id="c4b162d38593f0c61d02eda524507bf4fd01fab9" translate="yes" xml:space="preserve">
          <source>The exact semantics and interface of TYPE and ATTRS are still evolving. TYPE may be a bareword, a constant declared with &lt;a href=&quot;constant&quot;&gt;&lt;code&gt;use constant&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#__PACKAGE__&quot;&gt;&lt;code&gt;__PACKAGE__&lt;/code&gt;&lt;/a&gt;. It is currently bound to the use of the &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt; pragma, and attributes are handled using the &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt; pragma, or starting from Perl 5.8.0 also via the &lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute::Handlers&lt;/a&gt; module. See &lt;a href=&quot;perlsub#Private-Variables-via-my%28%29&quot;&gt;&quot;Private Variables via my()&quot; in perlsub&lt;/a&gt; for details.</source>
          <target state="translated">TYPEとATTRSの正確なセマンティクスとインターフェースはまだ進化しています。 TYPEは、&lt;a href=&quot;#__PACKAGE__&quot;&gt; &lt;code&gt;__PACKAGE__&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;constant&quot;&gt; &lt;code&gt;use constant&lt;/code&gt; &lt;/a&gt;で宣言された定数、または__PACKAGE__の場合があります。現在、&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;プラグマの使用にバインドされており、属性は&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;プラグマを使用して処理されるか、Perl5.8.0以降も&lt;a href=&quot;Attribute::Handlers&quot;&gt;Attribute ::&lt;/a&gt; Handlersモジュールを介して処理されます。詳細については&lt;a href=&quot;perlsub#Private-Variables-via-my%28%29&quot;&gt;、perlsubの「my（）を介したプライベート変数」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a2c046e7769f3ecfcaed8dd98a806a8be83eb888" translate="yes" xml:space="preserve">
          <source>The exact semantics and interface of TYPE and ATTRS are still evolving. TYPE may be a bareword, a constant declared with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; constant&lt;/code&gt; , or &lt;code&gt;__PACKAGE__&lt;/code&gt; . It is currently bound to the use of the &lt;code&gt;fields&lt;/code&gt; pragma, and attributes are handled using the &lt;code&gt;attributes&lt;/code&gt; pragma, or starting from Perl 5.8.0 also via the &lt;code&gt;Attribute::Handlers&lt;/code&gt; module. See &lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details, and &lt;a href=&quot;fields&quot;&gt;fields&lt;/a&gt;, &lt;a href=&quot;attributes&quot;&gt;attributes&lt;/a&gt;, and &lt;a href=&quot;attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">TYPEとATTRSの正確なセマンティクスとインターフェースはまだ進化しています。 TYPEは、 &lt;code&gt;__PACKAGE__&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; constant&lt;/code&gt; で宣言された定数、または__PACKAGE__のいずれかです。現在は &lt;code&gt;fields&lt;/code&gt; プラグマの使用にバインドされており、属性は &lt;code&gt;attributes&lt;/code&gt; プラグマを使用して処理されるか、Perl 5.8.0以降、 &lt;code&gt;Attribute::Handlers&lt;/code&gt; Handlers モジュールを介して処理されます。詳細については、&lt;a href=&quot;perlsub#Private-Variables-via-my()&quot;&gt;perlsubのmy（）によるプライベート変数&lt;/a&gt;、&lt;a href=&quot;fields&quot;&gt;フィールド&lt;/a&gt;、&lt;a href=&quot;attributes&quot;&gt;属性&lt;/a&gt;、および&lt;a href=&quot;attribute/handlers&quot;&gt;Attribute :: &lt;/a&gt;Handlersを参照してください。</target>
        </trans-unit>
        <trans-unit id="e8bfadb028cf247124d08e25f901567b324753c6" translate="yes" xml:space="preserve">
          <source>The exact semantics and interface of TYPE and ATTRS are still evolving. TYPE may be a bareword, a constant declared with &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; constant&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;__package__&quot;&gt;__PACKAGE__&lt;/a&gt;&lt;/code&gt;. It is currently bound to the use of the &lt;code&gt;fields&lt;/code&gt; pragma, and attributes are handled using the &lt;code&gt;attributes&lt;/code&gt; pragma, or starting from Perl 5.8.0 also via the &lt;code&gt;Attribute::Handlers&lt;/code&gt; module. See &lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;Private Variables via my() in perlsub&lt;/a&gt; for details, and &lt;a href=&quot;../fields&quot;&gt;fields&lt;/a&gt;, &lt;a href=&quot;../attributes&quot;&gt;attributes&lt;/a&gt;, and &lt;a href=&quot;../attribute/handlers&quot;&gt;Attribute::Handlers&lt;/a&gt;.</source>
          <target state="translated">TYPEとATTRSの正確なセマンティクスとインターフェースはまだ進化しています。 TYPEは、 &lt;code&gt;&lt;a href=&quot;__package__&quot;&gt;__PACKAGE__&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; constant&lt;/code&gt; で宣言された定数、または__PACKAGE__のいずれかです。現在は &lt;code&gt;fields&lt;/code&gt; プラグマの使用にバインドされており、属性は &lt;code&gt;attributes&lt;/code&gt; プラグマを使用して処理されるか、Perl 5.8.0以降、 &lt;code&gt;Attribute::Handlers&lt;/code&gt; Handlers モジュールを介して処理されます。詳細については、&lt;a href=&quot;../perlsub#Private-Variables-via-my()&quot;&gt;perlsubのmy（）によるプライベート変数&lt;/a&gt;、&lt;a href=&quot;../fields&quot;&gt;フィールド&lt;/a&gt;、&lt;a href=&quot;../attributes&quot;&gt;属性&lt;/a&gt;、および&lt;a href=&quot;../attribute/handlers&quot;&gt;Attribute :: &lt;/a&gt;Handlersを参照してください。</target>
        </trans-unit>
        <trans-unit id="c8d599de382831818fdc3314909d743d15fa4f85" translate="yes" xml:space="preserve">
          <source>The exact set of characters matched by &lt;code&gt;\d&lt;/code&gt; , &lt;code&gt;\s&lt;/code&gt;, and &lt;code&gt;\w&lt;/code&gt; varies depending on various pragma and regular expression modifiers. It is possible to restrict the match to the ASCII range by using the &lt;code&gt;/a&lt;/code&gt; regular expression modifier. See &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 、 &lt;code&gt;\s&lt;/code&gt; 、および &lt;code&gt;\w&lt;/code&gt; と一致する文字の正確なセットは、さまざまなプラグマと正規表現修飾子によって異なります。 &lt;code&gt;/a&lt;/code&gt; 正規表現修飾子を使用して、一致をASCII範囲に制限することができます。&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclassを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="23a6f9e0bca7b676930bcaa64329c3c867e0685e" translate="yes" xml:space="preserve">
          <source>The exact set of characters matched by &lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\s&lt;/code&gt;, and &lt;code&gt;\w&lt;/code&gt; varies depending on various pragma and regular expression modifiers. It is possible to restrict the match to the ASCII range by using the &lt;code&gt;/a&lt;/code&gt; regular expression modifier. See &lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclass&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;\d&lt;/code&gt; 、 &lt;code&gt;\s&lt;/code&gt; 、および &lt;code&gt;\w&lt;/code&gt; 一致する文字の正確なセットは、さまざまなプラグマおよび正規表現修飾子によって異なります。 &lt;code&gt;/a&lt;/code&gt; 正規表現修飾子を使用して、一致をASCII範囲に制限することができます。&lt;a href=&quot;perlrecharclass&quot;&gt;perlrecharclassを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="319ae490a71e74c46be21bc09971371ff532d6a8" translate="yes" xml:space="preserve">
          <source>The example above uses &lt;code&gt;select()&lt;/code&gt;, but any similar mechanism should work analogously. &lt;code&gt;IO::Socket::IP&lt;/code&gt; takes care when creating new socket filehandles to preserve the actual file descriptor number, so such techniques as &lt;code&gt;poll&lt;/code&gt; or &lt;code&gt;epoll&lt;/code&gt; should be transparent to its reallocation of a different socket underneath, perhaps in order to switch protocol family between &lt;code&gt;PF_INET&lt;/code&gt; and &lt;code&gt;PF_INET6&lt;/code&gt;.</source>
          <target state="translated">上記の例では &lt;code&gt;select()&lt;/code&gt; を使用していますが、同様のメカニズムは同様に機能するはずです。 &lt;code&gt;IO::Socket::IP&lt;/code&gt; は、実際のファイル記述子番号を保持するために新しいソケットファイルハンドルを作成するときに注意を払うため、 &lt;code&gt;poll&lt;/code&gt; や &lt;code&gt;epoll&lt;/code&gt; などの手法は、おそらく &lt;code&gt;PF_INET&lt;/code&gt; 間でプロトコルファミリを切り替えるために、下にある別のソケットの再割り当てに対して透過的である必要があります。および &lt;code&gt;PF_INET6&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="130d6baa202fd58693c4e06f24211f73d068ae4b" translate="yes" xml:space="preserve">
          <source>The example below illustrates this feature using the pattern for floating point numbers that was presented earlier on. The three subpatterns that are used more than once are the optional sign, the digit sequence for an integer and the decimal fraction. The &lt;code&gt;DEFINE&lt;/code&gt; group at the end of the pattern contains their definition. Notice that the decimal fraction pattern is the first place where we can reuse the integer pattern.</source>
          <target state="translated">以下の例は、前に示した浮動小数点数のパターンを使用したこの機能を示しています。複数回使用される3つのサブパターンは、オプションの符号、整数の桁シーケンス、および小数です。 &lt;code&gt;DEFINE&lt;/code&gt; パターンの最後にグループをその定義が含まれています。小数のパターンは、整数パターンを再利用できる最初の場所であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="04c6e96fbcd4407d552a2d3c6f391d06e2768883" translate="yes" xml:space="preserve">
          <source>The example below illustrates this feature using the pattern for floating point numbers that was presented earlier on. The three subpatterns that are used more than once are the optional sign, the digit sequence for an integer and the decimal fraction. The DEFINE group at the end of the pattern contains their definition. Notice that the decimal fraction pattern is the first place where we can reuse the integer pattern.</source>
          <target state="translated">以下の例は、先に紹介した浮動小数点数のパターンを使用して、この機能を説明しています。複数回使用される3つのサブパターンは、任意の符号、整数の桁数列、小数部です。パターンの最後にある DEFINE グループには、それらの定義が含まれています。小数点以下の小数パターンは、整数パターンを再利用できる最初の場所であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c669b79bf926dbbee70a1aab0498c88f6e21bd08" translate="yes" xml:space="preserve">
          <source>The example below shows what you need if</source>
          <target state="translated">以下の例は、以下の場合に必要なものを示しています。</target>
        </trans-unit>
        <trans-unit id="b95b2fc7c1cff73cb10b6820506fd203858d5dd0" translate="yes" xml:space="preserve">
          <source>The example does not untaint &lt;code&gt;$data&lt;/code&gt; if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect, because the characters matched by &lt;code&gt;\w&lt;/code&gt; are determined by the locale. Perl considers that locale definitions are untrustworthy because they contain data from outside the program. If you are writing a locale-aware program, and want to launder data with a regular expression containing &lt;code&gt;\w&lt;/code&gt; , put &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; ahead of the expression in the same block. See &lt;a href=&quot;perllocale#SECURITY&quot;&gt;SECURITY in perllocale&lt;/a&gt; for further discussion and examples.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 一致する文字はロケールによって決定されるため、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; localeが有効な場合、この例は &lt;code&gt;$data&lt;/code&gt; untaintしません。 Perlは、プログラムの外部からのデータが含まれているため、ロケール定義は信頼できないと見なしています。ロケール対応プログラムを作成していて、 &lt;code&gt;\w&lt;/code&gt; を含む正規表現でデータを洗いたい場合は、同じブロック内の式の前に &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; 配置し&lt;a href=&quot;functions/no&quot;&gt;ないで&lt;/a&gt;ください。さらなる議論と例について&lt;a href=&quot;perllocale#SECURITY&quot;&gt;は、perllocaleのSECURITYを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="36698f0de180b3f94fb468b665a41ca7be987afb" translate="yes" xml:space="preserve">
          <source>The example does not untaint &lt;code&gt;$data&lt;/code&gt; if &lt;code&gt;use locale&lt;/code&gt; is in effect, because the characters matched by &lt;code&gt;\w&lt;/code&gt; are determined by the locale. Perl considers that locale definitions are untrustworthy because they contain data from outside the program. If you are writing a locale-aware program, and want to launder data with a regular expression containing &lt;code&gt;\w&lt;/code&gt;, put &lt;code&gt;no locale&lt;/code&gt; ahead of the expression in the same block. See &lt;a href=&quot;perllocale#SECURITY&quot;&gt;&quot;SECURITY&quot; in perllocale&lt;/a&gt; for further discussion and examples.</source>
          <target state="translated">&lt;code&gt;\w&lt;/code&gt; 一致する文字はロケールによって決定されるため、 &lt;code&gt;use locale&lt;/code&gt; が有効な場合、この例では &lt;code&gt;$data&lt;/code&gt; 汚染されません。 Perlは、ロケール定義にはプログラム外部からのデータが含まれているため、信頼できないと見なします。ロケール対応プログラムを作成していて、 &lt;code&gt;\w&lt;/code&gt; を含む正規表現を使用してデータをロンダリングする場合は、同じブロック内の式の前に &lt;code&gt;no locale&lt;/code&gt; 配置しないでください。詳細な説明と例について&lt;a href=&quot;perllocale#SECURITY&quot;&gt;は、perllocaleの「SECURITY」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bd1c21f507054a9e5bf00808f679503b139b9cd1" translate="yes" xml:space="preserve">
          <source>The examples above use a relative path to the perl interpreter, getting whatever version is first in the user's path. If you want a specific version of Perl, say, perl5.14.1, you should place that directly in the &lt;code&gt;#!&lt;/code&gt; line's path.</source>
          <target state="translated">上記の例では、perlインタープリターへの相対パスを使用して、ユーザーのパスの最初のバージョンを取得しています。Perlの特定のバージョン、たとえばperl5.14.1が必要な場合は、 &lt;code&gt;#!&lt;/code&gt; 直接配置する必要があります。ラインのパス。</target>
        </trans-unit>
        <trans-unit id="ba7768ce3ab49f321e6775f2de42c2a895f7304f" translate="yes" xml:space="preserve">
          <source>The examples given at the start of the document (an error handler and an event driven program) are typical of the two main sorts of flow control that you are likely to encounter with callbacks. There is a very important distinction between them, so pay attention.</source>
          <target state="translated">ドキュメントの冒頭に挙げた例(エラーハンドラとイベントドリブンプログラム)は、コールバックで遭遇する可能性の高い2つの主要なフロー制御の典型的なものです。これらの間には非常に重要な区別がありますので、注意してください。</target>
        </trans-unit>
        <trans-unit id="d5744c543ee5f3d510361cac5aaaa06664739511" translate="yes" xml:space="preserve">
          <source>The examples illustrate several aspects: the first three queries target modules, authors, or distros directly and yield exactly one result. The last two use regular expressions and yield several results. The last one targets all of bundles, modules, authors, and distros simultaneously. When more than one result is available, they are printed in one-line format.</source>
          <target state="translated">最初の3つのクエリはモジュール、作者、またはディストロを直接ターゲットにしており、結果は正確に1つです。最後の2つは正規表現を使用しており、いくつかの結果が得られます。最後の1つは、バンドル、モジュール、著者、ディストロのすべてを同時に対象としています。複数の結果が得られる場合、それらは一行形式で表示されます。</target>
        </trans-unit>
        <trans-unit id="ddf2315db7343aee83255d9099df21a0faac3030" translate="yes" xml:space="preserve">
          <source>The examples in the previous section display an annoying weakness. We were only matching 3-letter words, or chunks of words of 4 letters or less. We'd like to be able to match words or, more generally, strings of any length, without writing out tedious alternatives like &lt;code&gt;\w\w\w\w|\w\w\w|\w\w|\w&lt;/code&gt; .</source>
          <target state="translated">前のセクションの例は、厄介な弱点を示しています。3文字の単語、または4文字以下の単語のチャンクのみを照合しました。 &lt;code&gt;\w\w\w\w|\w\w\w|\w\w|\w&lt;/code&gt; ような面倒な代替を記述せずに、単語またはより一般的には任意の長さの文字列に一致できるようにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="da6aadb818ba37828bf9750c2c1c42a56a0d0753" translate="yes" xml:space="preserve">
          <source>The examples in the previous section display an annoying weakness. We were only matching 3-letter words, or chunks of words of 4 letters or less. We'd like to be able to match words or, more generally, strings of any length, without writing out tedious alternatives like &lt;code&gt;\w\w\w\w|\w\w\w|\w\w|\w&lt;/code&gt;.</source>
          <target state="translated">前のセクションの例は、厄介な弱点を示しています。3文字の単語、または4文字以下の単語のチャンクのみを一致させました。 &lt;code&gt;\w\w\w\w|\w\w\w|\w\w|\w&lt;/code&gt; ような面倒な代替を書き出すことなく、単語、より一般的には任意の長さの文字列に一致できるようにしたいと考えています。</target>
        </trans-unit>
        <trans-unit id="6a56adef05fecf63fd9cba639dd925bcaf1cb87b" translate="yes" xml:space="preserve">
          <source>The examples show a very simple class that implements a</source>
          <target state="translated">を実装した非常にシンプルなクラスを示しています。</target>
        </trans-unit>
        <trans-unit id="45802eeee4d1f7759548f95073ecb55a63eb7a92" translate="yes" xml:space="preserve">
          <source>The examples show this class implemented with different levels of support by &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; . All supported combinations are shown. The difference between implementations is often quite small. The implementations are:</source>
          <target state="translated">例は、 &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; によるさまざまなサポートレベルで実装されたこのクラスを示しています。サポートされているすべての組み合わせが表示されます。多くの場合、実装の違いはごくわずかです。実装は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7cfc17e4302419b2090ffa8fca11900025b88c94" translate="yes" xml:space="preserve">
          <source>The examples show this class implemented with different levels of support by &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt;. All supported combinations are shown. The difference between implementations is often quite small. The implementations are:</source>
          <target state="translated">例は、 &lt;code&gt;Hash::Util::FieldHash&lt;/code&gt; によるさまざまなレベルのサポートで実装されたこのクラスを示しています。サポートされているすべての組み合わせが表示されます。多くの場合、実装間の違いは非常に小さいものです。実装は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f51ffd2e5bcc1a6d7d14bd6f95a324550850104d" translate="yes" xml:space="preserve">
          <source>The excellent Calendar FAQ at &lt;a href=&quot;http://www.tondering.dk/claus/calendar.html&quot;&gt;http://www.tondering.dk/claus/calendar.html&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.tondering.dk/claus/calendar.html&quot;&gt;http://www.tondering.dk/claus/calendar.html&lt;/a&gt;の優れたカレンダーFAQ</target>
        </trans-unit>
        <trans-unit id="b98aabfe9b6ba71ecfd39be082dced0eadaf1cc4" translate="yes" xml:space="preserve">
          <source>The excellent Filter::Util::Call module (by Paul Marquess) provides a usable Perl interface to source filtering, but it is often too powerful and not nearly as simple as it could be.</source>
          <target state="translated">優れた Filter::Util::Call モジュール (by Paul Marquess)は、ソースフィルタリングのための使い勝手の良い Perl インターフェイスを提供していますが、あまりにも強力すぎて、シンプルなものにはなりません。</target>
        </trans-unit>
        <trans-unit id="52ea595fb3e7d2ce456e743df519b555912d5e12" translate="yes" xml:space="preserve">
          <source>The exception is for organization-specific email (e.g. foo@yourcompany.com) where policy can be codified in your program. In that case, you could look at $ENV{USER}, $ENV{LOGNAME}, and getpwuid($&amp;lt;) in scalar context, like so:</source>
          <target state="translated">例外は、プログラムがポリシーを体系化できる組織固有のメール（例：foo@yourcompany.com）です。その場合、次のように、スカラーコンテキストで$ ENV {USER}、$ ENV {LOGNAME}、およびgetpwuid（$ &amp;lt;）を確認できます。</target>
        </trans-unit>
        <trans-unit id="1b5fd23c00f654857837ce525e2feca5e5a60486" translate="yes" xml:space="preserve">
          <source>The exception to the above rule is when the left-hand string begins with &lt;code&gt;0&lt;/code&gt; and is longer than one character, in this case the magic increment</source>
          <target state="translated">上記の規則の例外は、左側の文字列が &lt;code&gt;0&lt;/code&gt; で始まり、1文字より長い場合です。この場合、魔法の増分です。</target>
        </trans-unit>
        <trans-unit id="ffc87b76bc5dac6308b19a21f2fb89ffe909a88b" translate="yes" xml:space="preserve">
          <source>The exception to the principle of &quot;one tainted value taints the whole expression&quot; is with the ternary conditional operator &lt;code&gt;?:&lt;/code&gt;. Since code with a ternary conditional</source>
          <target state="translated">「1つの汚染された値が式全体を汚染する」という原則の例外は、3項条件演算子 &lt;code&gt;?:&lt;/code&gt; です。三項条件付きのコードなので</target>
        </trans-unit>
        <trans-unit id="5c4020c3e362c07677c68b98797130c8e33e53fa" translate="yes" xml:space="preserve">
          <source>The exception to this rule are</source>
          <target state="translated">このルールの例外は</target>
        </trans-unit>
        <trans-unit id="06cb57f51318b2c753120a0083873c4679095e1b" translate="yes" xml:space="preserve">
          <source>The exception to this rule is if you are calling a Perl subroutine directly from an XSUB function. In this case it is not necessary to use the &lt;code&gt;dSP&lt;/code&gt; macro explicitly--it will be declared for you automatically.</source>
          <target state="translated">このルールの例外は、XSUB関数から直接Perlサブルーチンを呼び出す場合です。この場合、 &lt;code&gt;dSP&lt;/code&gt; マクロを明示的に使用する必要はありません。自動的に宣言されます。</target>
        </trans-unit>
        <trans-unit id="0d894dabcea23f9b036a1c82348cf80da10ab49b" translate="yes" xml:space="preserve">
          <source>The exceptions are:</source>
          <target state="translated">例外はあります。</target>
        </trans-unit>
        <trans-unit id="3e26c68194190c41dfdad74105f0e492dc235a18" translate="yes" xml:space="preserve">
          <source>The execution order is indicated by &lt;code&gt;===&amp;gt;&lt;/code&gt; marks, thus it is &lt;code&gt;3
4 5 6&lt;/code&gt; (node &lt;code&gt;6&lt;/code&gt; is not included into above listing), i.e., &lt;code&gt;gvsv gvsv add whatever&lt;/code&gt; .</source>
          <target state="translated">実行順序は &lt;code&gt;===&amp;gt;&lt;/code&gt; マークで示されているため、 &lt;code&gt;3 4 5 6&lt;/code&gt; （ノード &lt;code&gt;6&lt;/code&gt; は上記のリストには含まれていません）、つまり &lt;code&gt;gvsv gvsv add whatever&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="db1745f72327cdbec0c0f35f7353b51ef20c7bd5" translate="yes" xml:space="preserve">
          <source>The execution order is indicated by &lt;code&gt;===&amp;gt;&lt;/code&gt; marks, thus it is &lt;code&gt;3 4 5 6&lt;/code&gt; (node &lt;code&gt;6&lt;/code&gt; is not included into above listing), i.e., &lt;code&gt;gvsv gvsv add whatever&lt;/code&gt;.</source>
          <target state="translated">実行順序は &lt;code&gt;===&amp;gt;&lt;/code&gt; マークで示されているため、 &lt;code&gt;3 4 5 6&lt;/code&gt; （ノード &lt;code&gt;6&lt;/code&gt; は上記のリストに含まれていません）です。つまり、 &lt;code&gt;gvsv gvsv add whatever&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68a81e1fe7a2f079c1b9f8b207b9fe9d777e92c5" translate="yes" xml:space="preserve">
          <source>The executive summary: learn how your filesystem works. The permissions on a file say what can happen to the data in that file. The permissions on a directory say what can happen to the list of files in that directory. If you delete a file, you're removing its name from the directory (so the operation depends on the permissions of the directory, not of the file). If you try to write to the file, the permissions of the file govern whether you're allowed to.</source>
          <target state="translated">要旨:ファイルシステムがどのように機能するかを学ぶ。ファイルのパーミッションは、そのファイル内のデータに何が起こるかを述べています。ディレクトリのパーミッションは、そのディレクトリ内のファイルのリストに何ができるかを示しています。ファイルを削除すると、ディレクトリからファイル名を削除することになります(その操作はファイルではなくディレクトリのパーミッションに依存します)。あなたがファイルに書き込みをしようとした場合、ファイルのパーミッションはあなたが許可されているかどうかを支配します。</target>
        </trans-unit>
        <trans-unit id="8bd1d5ba511947aaf27cf0898729cbcdb3363ec9" translate="yes" xml:space="preserve">
          <source>The existence of a rule does not imply selecting a test. You must still specify the tests to run.</source>
          <target state="translated">ルールの存在は、テストの選択を意味するものではありません。それでも実行するテストを指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="29fc393062d8546f20ed1b167ba8df5f73019ce5" translate="yes" xml:space="preserve">
          <source>The exit code of the executed program.</source>
          <target state="translated">実行されたプログラムの終了コード。</target>
        </trans-unit>
        <trans-unit id="137ed18115f3228ba7f07a48e55913ee96e30593" translate="yes" xml:space="preserve">
          <source>The exit status value to return.</source>
          <target state="translated">復帰する終了ステータス値。</target>
        </trans-unit>
        <trans-unit id="0c5c8d24f00e7eedd0cb8f1fea1a1b90fbdc8c11" translate="yes" xml:space="preserve">
          <source>The exit() function does not always exit immediately. It calls any defined &lt;code&gt;END&lt;/code&gt; routines first, but these &lt;code&gt;END&lt;/code&gt; routines may not themselves abort the exit. Likewise any object destructors that need to be called are called before the real exit. &lt;code&gt;END&lt;/code&gt; routines and destructors can change the exit status by modifying &lt;code&gt;$?&lt;/code&gt; . If this is a problem, you can call &lt;code&gt;POSIX::_exit($status)&lt;/code&gt; to avoid END and destructor processing. See &lt;a href=&quot;../perlmod&quot;&gt;perlmod&lt;/a&gt; for details.</source>
          <target state="translated">exit（）関数は、すぐに終了するとは限りません。最初に定義済みの &lt;code&gt;END&lt;/code&gt; ルーチンを呼び出しますが、これらの &lt;code&gt;END&lt;/code&gt; ルーチン自体が出口を中止することはできません。同様に、呼び出す必要のあるオブジェクトデストラクタは、実際に終了する前に呼び出されます。 &lt;code&gt;END&lt;/code&gt; ルーチンとデストラクタは、 &lt;code&gt;$?&lt;/code&gt; を変更して終了ステータスを変更できます。。これが問題である場合は、 &lt;code&gt;POSIX::_exit($status)&lt;/code&gt; を呼び出して、ENDおよびデストラクタ処理を回避できます。詳細は&lt;a href=&quot;../perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="680c902ef0b900a40fad1c488731545af94f9d10" translate="yes" xml:space="preserve">
          <source>The exit() function does not always exit immediately. It calls any defined &lt;code&gt;END&lt;/code&gt; routines first, but these &lt;code&gt;END&lt;/code&gt; routines may not themselves abort the exit. Likewise any object destructors that need to be called are called before the real exit. &lt;code&gt;END&lt;/code&gt; routines and destructors can change the exit status by modifying &lt;code&gt;$?&lt;/code&gt; . If this is a problem, you can call &lt;code&gt;POSIX::_exit($status)&lt;/code&gt; to avoid END and destructor processing. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details.</source>
          <target state="translated">exit（）関数は、すぐに終了するとは限りません。最初に定義済みの &lt;code&gt;END&lt;/code&gt; ルーチンを呼び出しますが、これらの &lt;code&gt;END&lt;/code&gt; ルーチン自体が出口を中止することはできません。同様に、呼び出す必要のあるオブジェクトデストラクタは、実際に終了する前に呼び出されます。 &lt;code&gt;END&lt;/code&gt; ルーチンとデストラクタは、 &lt;code&gt;$?&lt;/code&gt; を変更して終了ステータスを変更できます。。これが問題である場合は、 &lt;code&gt;POSIX::_exit($status)&lt;/code&gt; を呼び出して、ENDおよびデストラクタ処理を回避できます。詳細は&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="878ff23487a7f8c43fec8d4483cc1765c4df9eb4" translate="yes" xml:space="preserve">
          <source>The experimental &lt;code&gt;given&lt;/code&gt; statement is</source>
          <target state="translated">実験的に &lt;code&gt;given&lt;/code&gt; ステートメントは</target>
        </trans-unit>
        <trans-unit id="19bd303111f858742510d8d90c5638313c02c5ce" translate="yes" xml:space="preserve">
          <source>The experimental &lt;code&gt;legacy&lt;/code&gt; pragma was swallowed by the &lt;code&gt;feature&lt;/code&gt; pragma.</source>
          <target state="translated">実験的な &lt;code&gt;legacy&lt;/code&gt; プラグマは、 &lt;code&gt;feature&lt;/code&gt; プラグマによって飲み込まれました。</target>
        </trans-unit>
        <trans-unit id="52d7e8e19cc3efaf2aec8d989a33421d70ed317d" translate="yes" xml:space="preserve">
          <source>The experimental declared_refs feature is not enabled</source>
          <target state="translated">実験的な declared_refs 機能は有効になっていません。</target>
        </trans-unit>
        <trans-unit id="0ccc48fde094b67b79701d699ac45d91d085adcc" translate="yes" xml:space="preserve">
          <source>The experimental feature &lt;code&gt;&quot;(?[...])&quot;&lt;/code&gt; starting in v5.18 accomplishes this.</source>
          <target state="translated">v5.18以降の実験的な機能 &lt;code&gt;&quot;(?[...])&quot;&lt;/code&gt; はこれを実現します。</target>
        </trans-unit>
        <trans-unit id="868cc46704185b2a446e1b7a62d0312275a48c48" translate="yes" xml:space="preserve">
          <source>The explanation above has omitted some detail; refer to UAX#24 &quot;Unicode Script Property&quot;: &lt;a href=&quot;https://www.unicode.org/reports/tr24&quot;&gt;https://www.unicode.org/reports/tr24&lt;/a&gt;.</source>
          <target state="translated">上記の説明では、詳細が省略されています。UAX＃24「Unicodeスクリプトプロパティ」を参照して&lt;a href=&quot;https://www.unicode.org/reports/tr24&quot;&gt;ください&lt;/a&gt;：https：//www.unicode.org/reports/tr24 。</target>
        </trans-unit>
        <trans-unit id="0349830ce8cbe97566441b2e1c5b4811ccfb44c1" translate="yes" xml:space="preserve">
          <source>The exponent is an &lt;code&gt;'e'&lt;/code&gt; or &lt;code&gt;'E'&lt;/code&gt;, followed by an integer. So the exponent regexp is</source>
          <target state="translated">指数は &lt;code&gt;'e'&lt;/code&gt; または &lt;code&gt;'E'&lt;/code&gt; 後に整数が続きます。したがって、指数正規表現は</target>
        </trans-unit>
        <trans-unit id="f321e42a52fdc6b5d89f69bf0fc91962da84c32f" translate="yes" xml:space="preserve">
          <source>The exponent is an &lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt; , followed by an integer. So the exponent regexp is</source>
          <target state="translated">指数は &lt;code&gt;e&lt;/code&gt; または &lt;code&gt;E&lt;/code&gt; であり、その後に整数が続きます。したがって、指数正規表現は</target>
        </trans-unit>
        <trans-unit id="dc560dadf22f2caa4887dcda366e49e8868f1d51" translate="yes" xml:space="preserve">
          <source>The exponentiation operator is &quot;**&quot;, not &quot;^&quot;. &quot;^&quot; is the XOR operator, as in C. (You know, one could get the feeling that &lt;b&gt;awk&lt;/b&gt; is basically incompatible with C.)</source>
          <target state="translated">指数演算子は「^」ではなく「**」です。&quot;^&quot;はCと同様にXOR演算子です（ご存知のように、&lt;b&gt;awk&lt;/b&gt;は基本的にCと互換性がないと感じるかもしれません）。</target>
        </trans-unit>
        <trans-unit id="009dcc9526e9f6902be1b067b6a2b9829ed8f757" translate="yes" xml:space="preserve">
          <source>The expression is evaluated in scalar context. So the following will work:</source>
          <target state="translated">式はスカラコンテキストで評価されます。そのため、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="09c23065a9eeac610af39d5a880a04c9ff912e79" translate="yes" xml:space="preserve">
          <source>The ext/ODBM_File/odbm is known to fail with static builds (Configure -Uusedl) due to a known bug in Tru64's static libdbm library. The good news is that you very probably don't need to ever use the ODBM_File extension since more advanced NDBM_File works fine, not to mention the even more advanced DB_File.</source>
          <target state="translated">ext/ODBM_File/odbm は、Tru64 の静的 libdbm ライブラリの既知のバグにより、静的ビルド (Configure -Uusedl)で失敗することが知られています。良いニュースは、より高度な NDBM_File はもちろんのこと、より高度な DB_File も正常に動作するので、ODBM_File 拡張機能を使用する必要がないということです。</target>
        </trans-unit>
        <trans-unit id="31ec63f172c0fdca1326836d5d87e5fe035f0607" translate="yes" xml:space="preserve">
          <source>The extended filetest functionality is used by Perl only when the argument of the operators is a filename, not when it is a filehandle.</source>
          <target state="translated">拡張ファイルテスト機能は、演算子の引数がファイル名の場合にのみPerlによって使用され、ファイルハンドルの場合には使用されません。</target>
        </trans-unit>
        <trans-unit id="b669bdb080a6675f7c6ed5d24b2ef14539648c80" translate="yes" xml:space="preserve">
          <source>The extension is dynamically linked</source>
          <target state="translated">拡張機能は動的にリンクされています。</target>
        </trans-unit>
        <trans-unit id="f990232badfb418cbf7dd0574833889e9f679aa9" translate="yes" xml:space="preserve">
          <source>The extension is pure perl, so doesn't need linking to the perl executable</source>
          <target state="translated">拡張機能は純粋な perl なので、perl 実行ファイルへのリンクは必要ありません。</target>
        </trans-unit>
        <trans-unit id="13f70d182dd718c2ffdf92971d2248139cbe171e" translate="yes" xml:space="preserve">
          <source>The extension is statically linked to the perl binary</source>
          <target state="translated">拡張モジュールは静的に perl バイナリにリンクされています。</target>
        </trans-unit>
        <trans-unit id="b14db60112e20420246ea9d3dec3923a929f96a3" translate="yes" xml:space="preserve">
          <source>The extracted information is stored in 5 entries in the &lt;code&gt;build&lt;/code&gt; hash:</source>
          <target state="translated">抽出された情報は、 &lt;code&gt;build&lt;/code&gt; ハッシュの5つのエントリに保存されます。</target>
        </trans-unit>
        <trans-unit id="b1beda77ee5a84052f068e6757ef13cea3f36f8f" translate="yes" xml:space="preserve">
          <source>The extracted string, including the specified delimiters. If the extraction fails &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">指定された区切り文字を含む、抽出された文字列。抽出が失敗した場合、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a2570abc8ab1be73d003248dd246a24a2fc5f319" translate="yes" xml:space="preserve">
          <source>The extracted string, including the specified delimiters. If the extraction fails &lt;code&gt;undef&lt;/code&gt; is returned.</source>
          <target state="translated">指定された区切り文字を含む、抽出された文字列。抽出が失敗した場合、 &lt;code&gt;undef&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3130a57897b10b0bc008c6b4f6ef79e3b3444412" translate="yes" xml:space="preserve">
          <source>The extracted termcap entry is available in the object as &lt;code&gt;$self-&amp;gt;{TERMCAP}&lt;/code&gt; .</source>
          <target state="translated">抽出されたtermcapエントリーは、 &lt;code&gt;$self-&amp;gt;{TERMCAP}&lt;/code&gt; としてオブジェクトで使用できます。</target>
        </trans-unit>
        <trans-unit id="adf0aca1542de815275e994553ee7120f60337c3" translate="yes" xml:space="preserve">
          <source>The extracted termcap entry is available in the object as &lt;code&gt;$self-&amp;gt;{TERMCAP}&lt;/code&gt;.</source>
          <target state="translated">抽出されたtermcapエントリは、オブジェクトで &lt;code&gt;$self-&amp;gt;{TERMCAP}&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="c328df413a33fa608e46c6826495b03f8d0ee0f6" translate="yes" xml:space="preserve">
          <source>The extraction process works by applying each extractor in sequence to the text string.</source>
          <target state="translated">抽出処理は、各抽出器をテキスト文字列に順に適用することで動作します。</target>
        </trans-unit>
        <trans-unit id="7ad2005947669b79c8509770fad3b2b296acf5fd" translate="yes" xml:space="preserve">
          <source>The fact that such a FILE * has been 'exported' is recorded, (normally by pushing a new :stdio &quot;layer&quot; onto the PerlIO *), which may affect future PerlIO operations on the original PerlIO *. You should not call &lt;code&gt;fclose()&lt;/code&gt; on the file unless you call &lt;code&gt;PerlIO_releaseFILE()&lt;/code&gt; to disassociate it from the PerlIO *. (Do not use PerlIO_importFILE() for doing the disassociation.)</source>
          <target state="translated">このようなFILE *が「エクスポート」されたという事実が記録されます（通常、新しい：stdio &quot;レイヤー&quot;をPerlIO *にプッシュすることによって）。これは、元のPerlIO *での今後のPerlIO操作に影響を与える可能性があります。あなたは呼び出すべきではありません &lt;code&gt;fclose()&lt;/code&gt; 呼び出す場合を除き、ファイルに &lt;code&gt;PerlIO_releaseFILE()&lt;/code&gt; *はPerlIOから関連付けを解除します。 （関連付けを解除するためにPerlIO_importFILE（）を使用しないでください。）</target>
        </trans-unit>
        <trans-unit id="357aafdac768e27bb52a043649452bd876a53d4d" translate="yes" xml:space="preserve">
          <source>The factory itself is never instantiated (this</source>
          <target state="translated">ファクトリー自体がインスタンス化されることはありません(この</target>
        </trans-unit>
        <trans-unit id="ee17924499933b661b8e0c34b82c36eff25eeaf5" translate="yes" xml:space="preserve">
          <source>The fastgetcwd() function is provided as a synonym for cwd().</source>
          <target state="translated">fastgetcwd()関数は cwd()の同義語として提供されます。</target>
        </trans-unit>
        <trans-unit id="3c06a8aa0a4d260ed2765600496ce1fc1ffcef9e" translate="yes" xml:space="preserve">
          <source>The feature logical name &lt;code&gt;PERL_VMS_VTF7_FILENAMES&lt;/code&gt; controls if UNICODE characters in Unix filenames are encoded in VTF-7 notation in the resulting OpenVMS file specification. [Currently under development]</source>
          <target state="translated">機能論理名 &lt;code&gt;PERL_VMS_VTF7_FILENAMES&lt;/code&gt; は、Unixファイル名のUNICODE文字が結果のOpenVMSファイル仕様でVTF-7表記でエンコードされるかどうかを制御します。 【現在開発中】</target>
        </trans-unit>
        <trans-unit id="533f832808f430e9fde8557e2b27391f20356a2e" translate="yes" xml:space="preserve">
          <source>The feature logical name DECC$FILENAME_UNIX_REPORT modifies traditional Perl behavior in the conversion of file specifications from Unix to VMS format in order to follow the extended character handling rules now expected by the CRTL. Specifically, when this feature is in effect, the &lt;code&gt;./.../&lt;/code&gt; in a Unix path is now translated to &lt;code&gt;[.^.^.^.]&lt;/code&gt; instead of the traditional VMS &lt;code&gt;[...]&lt;/code&gt; . To be compatible with what MakeMaker expects, if a VMS path cannot be translated to a Unix path, it is passed through unchanged, so &lt;code&gt;unixify(&quot;[...]&quot;)&lt;/code&gt; will return &lt;code&gt;[...]&lt;/code&gt; .</source>
          <target state="translated">機能の論理名DECC $ FILENAME_UNIX_REPORTは、ファイル仕様をUNIXからVMS形式に変換する際の従来のPerlの動作を変更して、現在CRTLで想定されている拡張文字処理規則に従うようにします。具体的には、この機能が有効な場合、Unixパスの &lt;code&gt;./.../&lt;/code&gt; が、従来のVMS &lt;code&gt;[...]&lt;/code&gt; ではなく &lt;code&gt;[.^.^.^.]&lt;/code&gt; に変換されるようになりました。MakeMakerが期待するものと互換性を持たせるために、VMSパスをUnixパスに変換できない場合、パスは変更されずに渡されるため、 &lt;code&gt;unixify(&quot;[...]&quot;)&lt;/code&gt; は &lt;code&gt;[...]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cd427ddb1d40a440a4569bc32b983da79c223869" translate="yes" xml:space="preserve">
          <source>The feature logical name DECC$FILENAME_UNIX_REPORT modifies traditional Perl behavior in the conversion of file specifications from Unix to VMS format in order to follow the extended character handling rules now expected by the CRTL. Specifically, when this feature is in effect, the &lt;code&gt;./.../&lt;/code&gt; in a Unix path is now translated to &lt;code&gt;[.^.^.^.]&lt;/code&gt; instead of the traditional VMS &lt;code&gt;[...]&lt;/code&gt;. To be compatible with what MakeMaker expects, if a VMS path cannot be translated to a Unix path, it is passed through unchanged, so &lt;code&gt;unixify(&quot;[...]&quot;)&lt;/code&gt; will return &lt;code&gt;[...]&lt;/code&gt;.</source>
          <target state="translated">機能の論理名DECC $ FILENAME_UNIX_REPORTは、CRTLで現在期待されている拡張文字処理ルールに従うために、ファイル仕様をUnixからVMS形式に変換する際の従来のPerlの動作を変更します。具体的には、この機能が有効な場合、Unixパスの &lt;code&gt;./.../&lt;/code&gt; は、従来のVMS &lt;code&gt;[...]&lt;/code&gt; ではなく &lt;code&gt;[.^.^.^.]&lt;/code&gt; に変換されるようになりました。MakeMakerが期待するものと互換性を持たせるために、VMSパスをUnixパスに変換できない場合、変更されずに渡されるため、 &lt;code&gt;unixify(&quot;[...]&quot;)&lt;/code&gt; は &lt;code&gt;[...]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="98ee4cd3c900fba7f346eaf4d73c2e59283171b2" translate="yes" xml:space="preserve">
          <source>The feature needs to be enabled with &lt;code&gt;Configure -Dusecbacktrace&lt;/code&gt; .</source>
          <target state="translated">この機能は &lt;code&gt;Configure -Dusecbacktrace&lt;/code&gt; で有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="6b1fe35afa1a3972e367d70f65936f774e7c1fb4" translate="yes" xml:space="preserve">
          <source>The feature needs to be enabled with &lt;code&gt;Configure -Dusecbacktrace&lt;/code&gt;.</source>
          <target state="translated">この機能は、 &lt;code&gt;Configure -Dusecbacktrace&lt;/code&gt; で有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9967e9df7e264da6bcdb44f5aee030bc917d02a" translate="yes" xml:space="preserve">
          <source>The features you got from your mother and father, mixed together unpredictably. (See also &lt;b&gt;inheritance&lt;/b&gt; and &lt;b&gt;single inheritance&lt;/b&gt;.) In computer languages (including Perl), it is the notion that a given class may have multiple direct ancestors or &lt;b&gt;base classes&lt;/b&gt;.</source>
          <target state="translated">母親と父親から得られた機能は、予測不能に混在しています。（&lt;b&gt;継承&lt;/b&gt;と&lt;b&gt;単一継承&lt;/b&gt;も参照してください。）コンピューター言語（Perlを含む）では、特定のクラスに複数の直接の祖先または&lt;b&gt;基本クラス&lt;/b&gt;がある可能性があるという概念です。</target>
        </trans-unit>
        <trans-unit id="ddb61ef14874404dd766423660c7d397637ace24" translate="yes" xml:space="preserve">
          <source>The features you got from your mother, if she told you that you don&amp;rsquo;t have a father. (See also &lt;b&gt;inheritance&lt;/b&gt; and &lt;b&gt;multiple inheritance&lt;/b&gt;.) In computer languages, the idea that &lt;b&gt;classes&lt;/b&gt; reproduce asexually so that a given class can only have one direct ancestor or &lt;b&gt;base class&lt;/b&gt;. Perl supplies no such restriction, though you may certainly program Perl that way if you like.</source>
          <target state="translated">父親がいないと母親から言われた場合の、母親からの特徴。（&lt;b&gt;継承&lt;/b&gt;と&lt;b&gt;多重継承&lt;/b&gt;も参照してください。）コンピューター言語では、&lt;b&gt;クラスが&lt;/b&gt;無性に複製されるため、特定のクラスは1つの直接の祖先または&lt;b&gt;基本クラス&lt;/b&gt;のみを持つことができます。Perlにはそのような制限はありませんが、必要に応じてPerlをそのようにプログラミングすることもできます。</target>
        </trans-unit>
        <trans-unit id="587f845c68a8e5df6c3b5c11be163e859d4bde0c" translate="yes" xml:space="preserve">
          <source>The few places where stricter matching is used is in the middle of numbers, the &quot;name&quot; property, and in the Perl extension properties that begin or end with an underscore. Stricter matching cares about white space (except adjacent to non-word characters), hyphens, and non-interior underscores.</source>
          <target state="translated">厳格なマッチングが使用される場所は、数字の中間、「name」プロパティ、アンダースコアで始まるか終わるPerlの拡張プロパティの中にあります。厳密なマッチングでは、空白(単語以外の文字に隣接している場合を除く)、ハイフン、および内部のアンダースコア以外のものが気になります。</target>
        </trans-unit>
        <trans-unit id="3a3635eb281607d1f863de82b6a5a308964a4737" translate="yes" xml:space="preserve">
          <source>The field &quot;@*&quot; can be used for printing multi-line, nontruncated values; it should (but need not) appear by itself on a line. A final line feed is chomped off, but all other characters are emitted verbatim.</source>
          <target state="translated">フィールド &quot;@*&quot; は、複数行の、切り捨てられていない値を印刷するために使用することができます。最終的な改行は、切り捨てられますが、他のすべての文字はそのまま出力されます。</target>
        </trans-unit>
        <trans-unit id="90122eb3cf35f8e2aff21a4431fdb4311bb6f9c0" translate="yes" xml:space="preserve">
          <source>The field of Linguistics has expended a great deal of effort over the past century trying to find grammatical patterns which hold across languages; it's been a constant process of people making generalizations that should apply to all languages, only to find out that, all too often, these generalizations fail -- sometimes failing for just a few languages, sometimes whole classes of languages, and sometimes nearly every language in the world except English. Broad statistical trends are evident in what the &quot;average language&quot; is like as far as what its rules can look like, must look like, and cannot look like. But the &quot;average language&quot; is just as unreal a concept as the &quot;average person&quot; -- it runs up against the fact no language (or person) is, in fact, average. The wisdom of past experience leads us to believe that any given language can do whatever it wants, in any order, with appeal to any kind of grammatical categories wants -- case, number, tense, real or metaphoric characteristics of the things that words refer to, arbitrary or predictable classifications of words based on what endings or prefixes they can take, degree or means of certainty about the truth of statements expressed, and so on, ad infinitum.</source>
          <target state="translated">言語学の分野では、過去一世紀にわたって、言語間に存在する文法パターンを見つけるために多大な努力が費やされてきました。すべての言語に適用されるべき一般化を行う人々の絶え間ないプロセスでしたが、その一般化が失敗することが多々あります。平均的な言語」とは、そのルールがどのように見えるか、どのように見えなければならないか、どのように見えないかという点で、大まかな統計的傾向が明らかになっています。しかし、「平均的な言語」は「平均的な人」と同じように非現実的な概念であり、実際にはどの言語(または人)も平均的ではないという事実に直面しています。過去の経験の知恵は、与えられた言語が、文法的なカテゴリーのどんな種類のアピールでも、どんな順番でも、それが望むものは何でもできると信じるように私たちを導く--大文字、小文字、数、時制、単語が参照するものの実数や比喩的な特性、どのような語尾や接頭辞を取ることができるかに基づいて単語の任意のまたは予測可能な分類、表現された文の真実についての確実性の程度や手段など、無限大に。</target>
        </trans-unit>
        <trans-unit id="38f6e6f64de0d391d989196e8ebb7ddb708ac60a" translate="yes" xml:space="preserve">
          <source>The fields are discussed in more detail below:</source>
          <target state="translated">分野については、以下で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="c46c3f9340cdb846123d0b6b0164cec0b439e50c" translate="yes" xml:space="preserve">
          <source>The fields are tab-separated. The first column is the depth (zero being the innermost non-skipped frame). In the hex:offset, the hex is where the program counter was in &lt;code&gt;S_parse_body&lt;/code&gt;, and the :offset (might be missing) tells how much inside the &lt;code&gt;S_parse_body&lt;/code&gt; the program counter was.</source>
          <target state="translated">フィールドはタブで区切られています。最初の列は深さです（ゼロは最も内側のスキップされていないフレームです）。hex：offsetでは、hexはプログラムカウンターが &lt;code&gt;S_parse_body&lt;/code&gt; にあった場所であり、：offset（欠落している可能性があります）は &lt;code&gt;S_parse_body&lt;/code&gt; 内にプログラムカウンターがどれだけあったかを示します。</target>
        </trans-unit>
        <trans-unit id="d21955b9d1337383a18b406fff73dac35d4d6488" translate="yes" xml:space="preserve">
          <source>The fields are tab-separated. The first column is the depth (zero being the innermost non-skipped frame). In the hex:offset, the hex is where the program counter was in S_parse_body, and the :offset (might be missing) tells how much inside the S_parse_body the program counter was.</source>
          <target state="translated">フィールドはタブで区切られています。最初のカラムは深さ(0はスキップされていない一番内側のフレーム)です。hex:offsetでは、16進数はS_parse_bodyの中でプログラムカウンタがどこにあったかを表し、:offsetは(見つからないかもしれませんが)S_parse_bodyの中でプログラムカウンタがどれくらいあったかを表しています。</target>
        </trans-unit>
        <trans-unit id="f2427d714dfbcb812d5c2c0e464389b37b28e37a" translate="yes" xml:space="preserve">
          <source>The fields in the</source>
          <target state="translated">のフィールドは</target>
        </trans-unit>
        <trans-unit id="3aabcb5c5289f7ad819b54aa9417f88080d7fec5" translate="yes" xml:space="preserve">
          <source>The fields of interest which may appear in this line are</source>
          <target state="translated">この行に出てくる可能性のある分野は</target>
        </trans-unit>
        <trans-unit id="834f0bb251e57720466af45a551b7e653c4d2d6b" translate="yes" xml:space="preserve">
          <source>The fields of the context struct and the arguments to the &lt;code&gt;cx_*&lt;/code&gt; functions are subject to change between perl releases, representing whatever is convenient or efficient for that release.</source>
          <target state="translated">コンテキスト構造体のフィールドと &lt;code&gt;cx_*&lt;/code&gt; 関数の引数は、perlリリース間で変更される可能性があり、そのリリースにとって便利または効率的なものを表します。</target>
        </trans-unit>
        <trans-unit id="04fbc7508d5d457aedc840547581d13fb785d13c" translate="yes" xml:space="preserve">
          <source>The file</source>
          <target state="translated">ファイル</target>
        </trans-unit>
        <trans-unit id="99944ba23fa1671290cc70fdf7f917ecb5343db9" translate="yes" xml:space="preserve">
          <source>The file (name) the error occurred in.</source>
          <target state="translated">エラーが発生したファイル(名前)。</target>
        </trans-unit>
        <trans-unit id="801d0d7bebcd5bd5a38aa07b4d567dc82dc85f4a" translate="yes" xml:space="preserve">
          <source>The file (name) the error occurred in. Defaults to the name of the current file being processed.</source>
          <target state="translated">エラーが発生したファイル (名前)。デフォルトは、処理中の現在のファイル名です。</target>
        </trans-unit>
        <trans-unit id="74280467b06cd39e1ebe6f256e50f06eca04fcbe" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;perlio.c&lt;/code&gt; provides the following layers:</source>
          <target state="translated">&lt;code&gt;perlio.c&lt;/code&gt; ファイルは次のレイヤーを提供します：</target>
        </trans-unit>
        <trans-unit id="b4bb1e7661bc100161f83c2b2d4bc9930cd6bed6" translate="yes" xml:space="preserve">
          <source>The file MANIFEST.SKIP may contain regular expressions of files that should be ignored by mkmanifest() and filecheck(). The regular expressions should appear one on each line. Blank lines and lines which start with &lt;code&gt;#&lt;/code&gt; are skipped. Use &lt;code&gt;\#&lt;/code&gt; if you need a regular expression to start with a &lt;code&gt;#&lt;/code&gt; .</source>
          <target state="translated">ファイルMANIFEST.SKIPには、mkmanifest（）およびfilecheck（）で無視されるファイルの正規表現が含まれている場合があります。正規表現は各行に1つ表示されます。空白行と &lt;code&gt;#&lt;/code&gt; で始まる行はスキップされます。使用 &lt;code&gt;\#&lt;/code&gt; あなたが開始するために正規表現を必要とする場合 &lt;code&gt;#&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b4d65899438f61d608a7cb61bcc5fc30c8781c4" translate="yes" xml:space="preserve">
          <source>The file MANIFEST.SKIP may contain regular expressions of files that should be ignored by mkmanifest() and filecheck(). The regular expressions should appear one on each line. Blank lines and lines which start with &lt;code&gt;#&lt;/code&gt; are skipped. Use &lt;code&gt;\#&lt;/code&gt; if you need a regular expression to start with a &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">ファイルMANIFEST.SKIPには、mkmanifest（）およびfilecheck（）で無視する必要のあるファイルの正規表現が含まれている場合があります。正規表現は、各行に1つずつ表示されます。空白行と &lt;code&gt;#&lt;/code&gt; で始まる行はスキップされます。使用 &lt;code&gt;\#&lt;/code&gt; あなたが開始するために正規表現を必要とする場合 &lt;code&gt;#&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2791b558da2cb7ec65180cdaeb2459b7a1726fa1" translate="yes" xml:space="preserve">
          <source>The file Makefile.PL should look something like this:</source>
          <target state="translated">Makefile.PLファイルは以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="76e388baaf2a00fb72a8272cf31814ec70994241" translate="yes" xml:space="preserve">
          <source>The file Mytest.pm should start with something like this:</source>
          <target state="translated">Mytest.pmファイルは、以下のようなもので始まるはずです。</target>
        </trans-unit>
        <trans-unit id="a37078c2a2fb3ae7f022a61feee12e4a85c77a67" translate="yes" xml:space="preserve">
          <source>The file Unicode/Collate/allkeys.txt was copied verbatim from &lt;a href=&quot;http://www.unicode.org/Public/UCA/6.3.0/allkeys.txt&quot;&gt;http://www.unicode.org/Public/UCA/6.3.0/allkeys.txt&lt;/a&gt;. For this file, Copyright (c) 2001-2012 Unicode, Inc. Distributed under the Terms of Use in &lt;a href=&quot;http://www.unicode.org/copyright.html&quot;&gt;http://www.unicode.org/copyright.html&lt;/a&gt;.</source>
          <target state="translated">ファイルUnicode / Collat​​e / allkeys.txtは、&lt;a href=&quot;http://www.unicode.org/Public/UCA/6.3.0/allkeys.txt&quot;&gt;http://www.unicode.org/Public/UCA/6.3.0/allkeys.txt&lt;/a&gt;からそのままコピーされました。このファイルについては、著作権（c）2001-2012 Unicode、Inc . が&lt;a href=&quot;http://www.unicode.org/copyright.html&quot;&gt;http://www.unicode.org/copyright.htmlの&lt;/a&gt;利用規約に基づいて配布されています。</target>
        </trans-unit>
        <trans-unit id="30a5f318824f5507113c28e19247cf8309413692" translate="yes" xml:space="preserve">
          <source>The file Unicode/Collate/allkeys.txt was copied verbatim from &lt;a href=&quot;http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt&quot;&gt;http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt&lt;/a&gt;. For this file, Copyright (c) 2016 Unicode, Inc.; distributed under the Terms of Use in &lt;a href=&quot;http://www.unicode.org/terms_of_use.html&quot;&gt;http://www.unicode.org/terms_of_use.html&lt;/a&gt;</source>
          <target state="translated">ファイルUnicode / Collat​​e / allkeys.txtは、&lt;a href=&quot;http://www.unicode.org/Public/UCA/9.0.0/allkeys.txt&quot;&gt;http：//www.unicode.org/Public/UCA/9.0.0/allkeys.txt&lt;/a&gt;から逐語的にコピーされました。このファイルについては、Copyright（c）2016 Unicode、Inc。; &lt;a href=&quot;http://www.unicode.org/terms_of_use.html&quot;&gt;http://www.unicode.org/terms_of_use.htmlの&lt;/a&gt;利用規約に基づいて配布されます</target>
        </trans-unit>
        <trans-unit id="588cd9780438caba5355d1e82516b077a96efe46" translate="yes" xml:space="preserve">
          <source>The file in which the error occurred (eg, &lt;code&gt;myscript.pl&lt;/code&gt; or &lt;code&gt;MyTest.pm&lt;/code&gt;).</source>
          <target state="translated">エラーが発生したファイル（例： &lt;code&gt;myscript.pl&lt;/code&gt; または &lt;code&gt;MyTest.pm&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1744236e794a4c53bf20da07fd1df8dc62fc8e81" translate="yes" xml:space="preserve">
          <source>The file is</source>
          <target state="translated">ファイルは</target>
        </trans-unit>
        <trans-unit id="e4567b3de0171c763b083662777b94d3405e1c0f" translate="yes" xml:space="preserve">
          <source>The file is a sparse file.</source>
          <target state="translated">疎なファイルになっています。</target>
        </trans-unit>
        <trans-unit id="10a1515b1fc6663ef9dea0c0281497256e9502ad" translate="yes" xml:space="preserve">
          <source>The file is being used for temporary storage. File systems avoid writing data back to mass storage if sufficient cache memory is available, because often the application deletes the temporary file shortly after the handle is closed. In that case, the system can entirely avoid writing the data. Otherwise, the data will be written after the handle is closed.</source>
          <target state="translated">ファイルは一時的なストレージとして使用されています。ファイルシステムは、十分なキャッシュメモリが利用可能な場合、大容量ストレージにデータを書き戻すことを避けます。その場合、システムはデータの書き込みを完全に避けることができます。そうでなければ、データはハンドルが閉じられた後に書き込まれる。</target>
        </trans-unit>
        <trans-unit id="79a42520a58ddeeb12292112f2a308b0310a0a00" translate="yes" xml:space="preserve">
          <source>The file is removed when the filehandle is closed or when the program exits. No access to the filename is provided.</source>
          <target state="translated">ファイルは、ファイルハンドルが閉じられたとき、またはプログラムが終了したときに削除されます。ファイル名へのアクセスは提供されません。</target>
        </trans-unit>
        <trans-unit id="5b68113e94418bbe01dba1e8408762baaba90492" translate="yes" xml:space="preserve">
          <source>The file must return true as the last statement to indicate successful execution of any initialization code, so it's customary to end such a file with &lt;code&gt;1;&lt;/code&gt; unless you're sure it'll return true otherwise. But it's better just to put the &lt;code&gt;1;&lt;/code&gt; , in case you add more statements.</source>
          <target state="translated">初期化コードが正常に実行されたことを示すために、ファイルは最後のステートメントとしてtrueを返す必要があるため、このようなファイルは &lt;code&gt;1;&lt;/code&gt; 終了するのが通例です。それ以外の場合はtrueを返すことが確実でない限り。しかし、 &lt;code&gt;1;&lt;/code&gt; を置く方が良いです。、ステートメントを追加する場合。</target>
        </trans-unit>
        <trans-unit id="db479c8e212dd28f37cf11de532fb13a4706ab4c" translate="yes" xml:space="preserve">
          <source>The file must return true as the last statement to indicate successful execution of any initialization code, so it's customary to end such a file with &lt;code&gt;1;&lt;/code&gt; unless you're sure it'll return true otherwise. But it's better just to put the &lt;code&gt;1;&lt;/code&gt;, in case you add more statements.</source>
          <target state="translated">ファイルは、初期化コードが正常に実行されたことを示す最後のステートメントとしてtrueを返す必要があるため、このようなファイルは &lt;code&gt;1;&lt;/code&gt; 終了するのが通例です。それ以外の場合はtrueを返すことが確実でない限り。ただし、 &lt;code&gt;1;&lt;/code&gt; を付けるだけの方がよいでしょう。、ステートメントを追加する場合。</target>
        </trans-unit>
        <trans-unit id="cda785c206d1d83026d51c7970996f0a544bbd22" translate="yes" xml:space="preserve">
          <source>The file named in VERSION_FROM is not added as a dependency to Makefile. This is not really correct, but it would be a major pain during development to have to rewrite the Makefile for any smallish change in that file. If you want to make sure that the Makefile contains the correct VERSION macro after any change of the file, you would have to do something like</source>
          <target state="translated">VERSION_FROM で指定されたファイルは Makefile の依存関係として追加されません。これは実際には正しくありませんが、そのファイルの小さな変更のために Makefile を書き換えなければならないのは、開発中に大きな苦痛になります。ファイルを変更した後、Makefile に正しい VERSION マクロが含まれていることを確認したい場合は、次のようなことをしなければなりません。</target>
        </trans-unit>
        <trans-unit id="1264aef66e240939ce372646b5dc5401497e1664" translate="yes" xml:space="preserve">
          <source>The file or directory has an associated reparse point.</source>
          <target state="translated">ファイルまたはディレクトリには、関連するreparseポイントがあります。</target>
        </trans-unit>
        <trans-unit id="af548b827b63fa83aaea96b3b1471e3f70a720b8" translate="yes" xml:space="preserve">
          <source>The file or directory has no other attributes set. This attribute is valid only if used alone.</source>
          <target state="translated">ファイルまたはディレクトリには他の属性は設定されていません。この属性は単独で使用した場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="2a20833b40e53533fae911a70eb77893d34ddc0e" translate="yes" xml:space="preserve">
          <source>The file or directory is an archive file or directory. Applications use this attribute to mark files for backup or removal.</source>
          <target state="translated">ファイルまたはディレクトリは、アーカイブ ファイルまたはディレクトリです。アプリケーションはこの属性を使用して、バックアップや削除のためにファイルをマークします。</target>
        </trans-unit>
        <trans-unit id="3a28a2595e27b62a75bd273e98ef20b3ef8db95b" translate="yes" xml:space="preserve">
          <source>The file or directory is compressed. For a file, this means that all of the data in the file is compressed. For a directory, this means that compression is the default for newly created files and subdirectories.</source>
          <target state="translated">ファイルまたはディレクトリは圧縮されています。ファイルの場合、ファイル内のすべてのデータが圧縮されていることを意味します。ディレクトリの場合は、新しく作成されたファイルとサブディレクトリのデフォルトで圧縮されることを意味します。</target>
        </trans-unit>
        <trans-unit id="3d84e09e4ae07a74635af247678d4e0053654f7b" translate="yes" xml:space="preserve">
          <source>The file or directory is encrypted. For a file, this means that all data streams in the file are encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories.</source>
          <target state="translated">ファイルまたはディレクトリは暗号化されています。ファイルの場合、ファイル内のすべてのデータストリームが暗号化されていることを意味します。ディレクトリの場合、これは、新しく作成されたファイルとサブディレクトリのデフォルトで暗号化されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="97235d485d43a9b6726df3990eccad2157355604" translate="yes" xml:space="preserve">
          <source>The file or directory is hidden. It is not included in an ordinary directory listing.</source>
          <target state="translated">ファイルやディレクトリが非表示になっています。通常のディレクトリリストには含まれません。</target>
        </trans-unit>
        <trans-unit id="511d8ef3c0880481e73ffbe5546aad0ca9af7623" translate="yes" xml:space="preserve">
          <source>The file or directory is part of, or is used exclusively by, the operating system.</source>
          <target state="translated">ファイルまたはディレクトリは、オペレーティングシステムの一部、または排他的に使用されます。</target>
        </trans-unit>
        <trans-unit id="50a862ef7b392abfc56ec7987f674bfc97e4e196" translate="yes" xml:space="preserve">
          <source>The file or directory is read-only. Applications can read the file but cannot write to it or delete it. In the case of a directory, applications cannot delete it.</source>
          <target state="translated">ファイルまたはディレクトリは読み取り専用です。アプリケーションはファイルを読むことはできますが、ファイルへの書き込みや削除はできません。ディレクトリの場合、アプリケーションは削除できません。</target>
        </trans-unit>
        <trans-unit id="bdaf2cba4d9764ecdf7f47c7aa146b4c33b7bbf0" translate="yes" xml:space="preserve">
          <source>The file redirection characters &quot;&amp;lt;&quot;, &quot;&amp;gt;&quot;, and &quot;|&quot; can be quoted by double quotes (although there are suggestions that this may not always be true). Single quotes are not treated as quotes by the shell or the C runtime, they don't get stripped by the shell (just to make this type of quoting completely useless). The caret &quot;^&quot; has also been observed to behave as a quoting character, but this appears to be a shell feature, and the caret is not stripped from the command line, so Perl still sees it (and the C runtime phase does not treat the caret as a quote character).</source>
          <target state="translated">ファイルリダイレクト文字「&amp;lt;」、「&amp;gt;」、および「|」二重引用符で囲むことができます（ただし、常にそうであるとは限らないという提案もあります）。単一引用符は、シェルまたはCランタイムでは引用符として扱われません。シェルによって取り除かれることはありません（このタイプの引用符を完全に無用にするため）。キャレット「^」も引用文字として動作することが確認されていますが、これはシェル機能のようであり、キャレットはコマンドラインから削除されないため、Perlはそれを認識します（Cランタイムフェーズでは処理されません）引用符としてのキャレット）。</target>
        </trans-unit>
        <trans-unit id="50901ff92251eec862c454e35476bb796a0417dd" translate="yes" xml:space="preserve">
          <source>The file returned by File::Temp will have been opened in binary mode if such a mode is available. If that is not correct, use the &lt;code&gt;binmode()&lt;/code&gt; function to change the mode of the filehandle.</source>
          <target state="translated">File :: Tempによって返されるファイルは、そのようなモードが使用可能な場合、バイナリモードで開かれています。それが正しくない場合は、 &lt;code&gt;binmode()&lt;/code&gt; 関数を使用してファイルハンドルのモードを変更します。</target>
        </trans-unit>
        <trans-unit id="52fb6cb3aabc05d2c0113ff975b6b538671a53b3" translate="yes" xml:space="preserve">
          <source>The file returned by File::Temp will have been opened in binary mode if such a mode is available. If that is not correct, use the C</source>
          <target state="translated">File::Tempによって返されたファイルは、そのようなモードが利用可能な場合、バイナリモードで開かれています。それが正しくない場合は、C</target>
        </trans-unit>
        <trans-unit id="ce9457f95e305ab599387997a39303f4f4596d9a" translate="yes" xml:space="preserve">
          <source>The file specifications of &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; will be converted to &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;[-]&lt;/code&gt;.</source>
          <target state="translated">のファイル仕様 &lt;code&gt;.&lt;/code&gt; および &lt;code&gt;..&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; および &lt;code&gt;[-]&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="8f1bf193f0391c5390c8fed583c48df05d19c307" translate="yes" xml:space="preserve">
          <source>The file system preserves Unicode in file names [true for &quot;NTFS&quot;].</source>
          <target state="translated">ファイルシステムはファイル名にUnicodeを保持します[NTFSではtrue]。</target>
        </trans-unit>
        <trans-unit id="4cb5efb93d11a4fd3e9514acb9b3c301836d1d02" translate="yes" xml:space="preserve">
          <source>The file system preserves the case of file names [usually true]. That is, it doesn't change the case of file names such as forcing them to upper- or lower-case.</source>
          <target state="translated">ファイルシステムはファイル名の大文字小文字を保持します。つまり、ファイル名を強制的に大文字や小文字にするなど、ファイル名の大文字小文字を変更することはありません。</target>
        </trans-unit>
        <trans-unit id="a04a32c75b0e4d58abe85e387d4b6865a5c9ef55" translate="yes" xml:space="preserve">
          <source>The file system supports compression on a per-file basis [true for &quot;NTFS&quot;].</source>
          <target state="translated">ファイルシステムは、ファイル単位での圧縮をサポートしています。</target>
        </trans-unit>
        <trans-unit id="0d32a15b0b05b7bd2cbe516ad58a7e5b3062c6e8" translate="yes" xml:space="preserve">
          <source>The file system supports setting Access Control Lists on files [true for &quot;NTFS&quot;].</source>
          <target state="translated">ファイルシステムは、ファイルへのアクセス制御リストの設定をサポートしています。</target>
        </trans-unit>
        <trans-unit id="78fe12a81a2024d0eb3a6b039559611ea6c933d5" translate="yes" xml:space="preserve">
          <source>The file system supports the ability to not ignore the case of file names [but might ignore case the way you are using it]. That is, the file system has the ability to force you to get the letter case of a file's name exactly right to be able to open it. This is true for &quot;NTFS&quot; file systems, even though case in file names is usually still ignored.</source>
          <target state="translated">ファイルシステムは、ファイル名の大文字小文字を無視しない機能をサポートしています[ただし、あなたが使っている方法では大文字小文字を無視するかもしれません]。つまり、ファイルシステムは、ファイルを開くためには、ファイル名の大文字小文字を正確に区別しなければならないということです。これは &quot;NTFS &quot;ファイルシステムでは、ファイル名の大文字小文字は通常は無視されますが、そうではありません。</target>
        </trans-unit>
        <trans-unit id="3318e11fa92791fcdb7d551f55db23d41576d211" translate="yes" xml:space="preserve">
          <source>The file type, or extension, is always present in a VMS-format file specification even if it's zero-length. This means that, by default, &lt;a href=&quot;perlfunc#readdir-DIRHANDLE&quot;&gt;&lt;code&gt;readdir&lt;/code&gt;&lt;/a&gt; will return a trailing dot on a file with no extension, so where you would see &lt;code&gt;&quot;a&quot;&lt;/code&gt; on Unix you'll see &lt;code&gt;&quot;a.&quot;&lt;/code&gt; on VMS. However, the trailing dot may be suppressed by enabling the &lt;code&gt;DECC$READDIR_DROPDOTNOTYPE&lt;/code&gt; feature in the environment (see the CRTL documentation on feature logical names).</source>
          <target state="translated">ファイルタイプまたは拡張子は、長さがゼロの場合でも、VMS形式のファイル仕様に常に存在します。つまり、デフォルトでは、&lt;a href=&quot;perlfunc#readdir-DIRHANDLE&quot;&gt; &lt;code&gt;readdir&lt;/code&gt; &lt;/a&gt;は拡張子のないファイルに末尾のドットを返すため、Unixで &lt;code&gt;&quot;a&quot;&lt;/code&gt; が表示される場所には「a」が表示されます &lt;code&gt;&quot;a.&quot;&lt;/code&gt; VMSで。ただし、環境で &lt;code&gt;DECC$READDIR_DROPDOTNOTYPE&lt;/code&gt; 機能を有効にすることにより、末尾のドットを抑制できます（機能の論理名に関するCRTLのドキュメントを参照してください）。</target>
        </trans-unit>
        <trans-unit id="00c1f1869978b35696fb14c540a8ba10948b7605" translate="yes" xml:space="preserve">
          <source>The file type, or extension, is always present in a VMS-format file specification even if it's zero-length. This means that, by default, &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; will return a trailing dot on a file with no extension, so where you would see &lt;code&gt;&quot;a&quot;&lt;/code&gt; on Unix you'll see &lt;code&gt;&quot;a.&quot;&lt;/code&gt; on VMS. However, the trailing dot may be suppressed by enabling the &lt;code&gt;DECC$READDIR_DROPDOTNOTYPE&lt;/code&gt; feature in the environment (see the CRTL documentation on feature logical names).</source>
          <target state="translated">ファイルタイプまたは拡張子は、長さがゼロであっても、常にVMS形式のファイル仕様に存在します。つまり、デフォルトでは、 &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; は拡張子のないファイルの末尾のドットを返すため、Unixで &lt;code&gt;&quot;a&quot;&lt;/code&gt; が表示される場所には「a」が表示されます &lt;code&gt;&quot;a.&quot;&lt;/code&gt; VMSで。ただし、環境で &lt;code&gt;DECC$READDIR_DROPDOTNOTYPE&lt;/code&gt; 機能を有効にすると、末尾のドットが抑制される場合があります（機能の論理名に関するCRTLのドキュメントを参照）。</target>
        </trans-unit>
        <trans-unit id="4023271c9fc7425e571468846ea1d383c9d49eba" translate="yes" xml:space="preserve">
          <source>The file types are:</source>
          <target state="translated">ファイルの種類は</target>
        </trans-unit>
        <trans-unit id="913f7be6fa85f1e72e30e862d223c440b0b1e681" translate="yes" xml:space="preserve">
          <source>The file will not be indexed by the content indexing service.</source>
          <target state="translated">このファイルは、コンテンツインデックスサービスによってインデックス化されません。</target>
        </trans-unit>
        <trans-unit id="43719b35ec87acc604024ce99c0c8fb60624b26e" translate="yes" xml:space="preserve">
          <source>The file's mode</source>
          <target state="translated">ファイルのモード</target>
        </trans-unit>
        <trans-unit id="a95c16ea1ecea8120f9e1164c67484d409f61395" translate="yes" xml:space="preserve">
          <source>The file's name</source>
          <target state="translated">ファイル名</target>
        </trans-unit>
        <trans-unit id="4b9a5685b1075bc4b20ae964579e2b1d813d620d" translate="yes" xml:space="preserve">
          <source>The filehandle behaves normally for the parent, but I/O to that filehandle is piped from/to the STDOUT/STDIN of the child process. In the child process, the filehandle isn't opened--I/O happens from/to the new STDOUT/STDIN. Typically this is used like the normal piped open when you want to exercise more control over just how the pipe command gets executed, such as when running setuid and you don't want to have to scan shell commands for metacharacters.</source>
          <target state="translated">ファイルハンドルは親プロセスでは正常に動作しますが、そのファイルハンドルへのI/Oは子プロセスのSTDOUT/STDINから/へパイプされます。子プロセスでは、ファイルハンドルはオープンされません --I/Oは新しいSTDOUT/STDINとの間で行われます。通常、これは通常のパイプオープンのように、パイプコマンドがどのように実行されるかをより制御したい場合に使用されます。例えば、setuid を実行していて、メタキャラクタのためにシェルコマンドをスキャンする必要がない場合などです。</target>
        </trans-unit>
        <trans-unit id="92ee26a1481d9c364e91c69e1999f81d1550b5da" translate="yes" xml:space="preserve">
          <source>The filehandle will be closed when its reference count reaches zero. If it is a lexically scoped variable declared with &lt;a href=&quot;#my-VARLIST&quot;&gt;&lt;code&gt;my&lt;/code&gt;&lt;/a&gt;, that usually means the end of the enclosing scope. However, this automatic close does not check for errors, so it is better to explicitly close filehandles, especially those used for writing:</source>
          <target state="translated">ファイルハンドルは、参照カウントがゼロに達すると閉じられます。それが&lt;a href=&quot;#my-VARLIST&quot;&gt; &lt;code&gt;my&lt;/code&gt; &lt;/a&gt;で宣言された字句スコープの変数である場合、それは通常、囲んでいるスコープの終わりを意味します。ただし、この自動クローズはエラーをチェックしないため、ファイルハンドル、特に書き込みに使用されるファイルハンドルを明示的に閉じることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="82d3d5cbabb04fbe3144e08782ff5dbb8eaf643d" translate="yes" xml:space="preserve">
          <source>The filehandle will be closed when its reference count reaches zero. If it is a lexically scoped variable declared with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, that usually means the end of the enclosing scope. However, this automatic close does not check for errors, so it is better to explicitly close filehandles, especially those used for writing:</source>
          <target state="translated">参照カウントがゼロに達すると、ファイルハンドルは閉じられます。それが &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言されたレキシカルスコープの変数である場合、それは通常、囲んでいるスコープの終わりを意味します。ただし、この自動クローズはエラーをチェックしないため、ファイルハンドル、特に書き込みに使用されるものを明示的にクローズすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c6da7495029a8eadd3a9c0429778422e3ffb1d61" translate="yes" xml:space="preserve">
          <source>The filehandle will be closed when its reference count reaches zero. If it is a lexically scoped variable declared with &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, that usually means the end of the enclosing scope. However, this automatic close does not check for errors, so it is better to explicitly close filehandles, especially those used for writing:</source>
          <target state="translated">参照カウントがゼロに達すると、ファイルハンドルは閉じられます。それが &lt;code&gt;&lt;a href=&quot;my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; で宣言されたレキシカルスコープの変数である場合、それは通常、囲んでいるスコープの終わりを意味します。ただし、この自動クローズはエラーをチェックしないため、ファイルハンドル、特に書き込みに使用されるものを明示的にクローズすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f157c14e0e96a0cb19a8e1a0df5c9ee87ca4b5e2" translate="yes" xml:space="preserve">
          <source>The filehandles STDIN, STDOUT, and STDERR are predefined. (The filehandles &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; , and &lt;code&gt;stderr&lt;/code&gt; will also work except in packages, where they would be interpreted as local identifiers rather than global.) Additional filehandles may be created with the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; function, amongst others. See &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; and &lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; for details on this.</source>
          <target state="translated">ファイルハンドルSTDIN、STDOUT、およびSTDERRは事前定義されています。（ファイルハンドル &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、および &lt;code&gt;stderr&lt;/code&gt; も、パッケージがグローバルではなくローカル識別子として解釈される場合を除いて機能します。） &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 関数などを使用して、追加のファイルハンドルを作成できます。参照&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;と&lt;a href=&quot;functions/open&quot;&gt;開く&lt;/a&gt;この詳細については。</target>
        </trans-unit>
        <trans-unit id="dabead5f141fbdd7cbaf6b6ee9ed1c9d5ac4b10f" translate="yes" xml:space="preserve">
          <source>The filehandles STDIN, STDOUT, and STDERR are predefined. (The filehandles &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt; will also work except in packages, where they would be interpreted as local identifiers rather than global.) Additional filehandles may be created with the &lt;code&gt;open()&lt;/code&gt; function, amongst others. See &lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt; and &lt;a href=&quot;perlfunc#open&quot;&gt;&quot;open&quot; in perlfunc&lt;/a&gt; for details on this.</source>
          <target state="translated">ファイルハンドルSTDIN、STDOUT、およびSTDERRは事前定義されています。（ファイルハンドル &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、および &lt;code&gt;stderr&lt;/code&gt; は、グローバルではなくローカル識別子として解釈されるパッケージを除いても機能します。）追加のファイルハンドルは、とりわけ &lt;code&gt;open()&lt;/code&gt; 関数を使用して作成できます。詳細については、&lt;a href=&quot;perlopentut&quot;&gt;perlopentut&lt;/a&gt;および&lt;a href=&quot;perlfunc#open&quot;&gt;perlfuncの「open」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="586bcd238ccd4b9fecd344d54e37e9531bdb9cd2" translate="yes" xml:space="preserve">
          <source>The filehandles may also be integers, in which case they are understood as file descriptors.</source>
          <target state="translated">ファイルハンドルは整数である場合もあり、その場合はファイルディスクリプタとして理解されます。</target>
        </trans-unit>
        <trans-unit id="66a7978092f9f45d843d817f4a627ae3fdb00a8b" translate="yes" xml:space="preserve">
          <source>The filename of the data store holding the data that App::Prove::State reads.</source>
          <target state="translated">App::Prove::Stateが読み込んだデータを保持するデータストアのファイル名。</target>
        </trans-unit>
        <trans-unit id="6d594502076d5702a51ff03f260fd4c765a898ae" translate="yes" xml:space="preserve">
          <source>The filename of the perllibrary that will be used together with this extension. Defaults to libperl.a.</source>
          <target state="translated">この拡張モジュールと一緒に使用される perllibrary のファイル名。デフォルトは libperl.a です。</target>
        </trans-unit>
        <trans-unit id="76201dda41fb8f7d14160ae0f46e9ddf9f7d7f60" translate="yes" xml:space="preserve">
          <source>The filename passed to the one- and two-argument forms of &lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; will have leading and trailing whitespace deleted and normal redirection characters honored. This property, known as &quot;magic open&quot;, can often be used to good effect. A user could specify a filename of</source>
          <target state="translated">&lt;a href=&quot;#open-FILEHANDLE%2CMODE%2CEXPR&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;の1引数形式と2引数形式に渡されるファイル名では、先頭と末尾の空白が削除され、通常のリダイレクト文字が使用されます。「マジックオープン」として知られるこのプロパティは、多くの場合、効果的に使用できます。ユーザーは次のファイル名を指定できます</target>
        </trans-unit>
        <trans-unit id="d9b0656face1bd799f2d3aeeb4a33e8ccdb99fbf" translate="yes" xml:space="preserve">
          <source>The filename passed to the one- and two-argument forms of open() will have leading and trailing whitespace deleted and normal redirection characters honored. This property, known as &quot;magic open&quot;, can often be used to good effect. A user could specify a filename of</source>
          <target state="translated">open()の 1 つまたは 2 つの引数形式に渡されたファイル名は、先頭と末尾の空白が削除され、通常のリダイレクト文字が優先されます。このプロパティは &quot;マジックオープン&quot; として知られており、しばしば効果的に使用することができます。ユーザは、ファイル名として</target>
        </trans-unit>
        <trans-unit id="6d720ff4e8b207a8fa86d2d1f6ed053fe36cb247" translate="yes" xml:space="preserve">
          <source>The files</source>
          <target state="translated">ファイル</target>
        </trans-unit>
        <trans-unit id="5e8ac4ea16fdec255bb3d994323e38344f15cd1a" translate="yes" xml:space="preserve">
          <source>The files in the &quot;qnx&quot; directory are:</source>
          <target state="translated">qnx」ディレクトリにあるファイルは、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ccf1a34f9c5304eccd7056360fe19cfcc880dfc0" translate="yes" xml:space="preserve">
          <source>The filesystem may support neither access timestamp nor change timestamp (meaning that about the only portable timestamp is the modification timestamp), or one second granularity of any timestamps (e.g. the FAT filesystem limits the time granularity to two seconds).</source>
          <target state="translated">ファイルシステムはアクセスタイムスタンプも変更タイムスタンプもサポートしていません(つまり、ポータブルなタイムスタンプは変更タイムスタンプだけです)。</target>
        </trans-unit>
        <trans-unit id="9640e3801c8da6fb8d4c4212946957e9fbfe8dbf" translate="yes" xml:space="preserve">
          <source>The filesystem may support neither hard links (&lt;a href=&quot;perlfunc#link-OLDFILE%2CNEWFILE&quot;&gt;&lt;code&gt;link&lt;/code&gt;&lt;/a&gt;) nor symbolic links (&lt;a href=&quot;perlfunc#symlink-OLDFILE%2CNEWFILE&quot;&gt;&lt;code&gt;symlink&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;perlfunc#readlink-EXPR&quot;&gt;&lt;code&gt;readlink&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;perlfunc#lstat-FILEHANDLE&quot;&gt;&lt;code&gt;lstat&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ファイルシステムは、ハードリンク（&lt;a href=&quot;perlfunc#link-OLDFILE%2CNEWFILE&quot;&gt; &lt;code&gt;link&lt;/code&gt; &lt;/a&gt;）もシンボリックリンク（&lt;a href=&quot;perlfunc#symlink-OLDFILE%2CNEWFILE&quot;&gt; &lt;code&gt;symlink&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;perlfunc#readlink-EXPR&quot;&gt; &lt;code&gt;readlink&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;perlfunc#lstat-FILEHANDLE&quot;&gt; &lt;code&gt;lstat&lt;/code&gt; &lt;/a&gt;）もサポートしていません。</target>
        </trans-unit>
        <trans-unit id="4acc2f4b822151bd730e57f84d225c79d062f507" translate="yes" xml:space="preserve">
          <source>The filesystem may support neither hard links (&lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt;) nor symbolic links (&lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ファイルシステムは、ハードリンク（ &lt;code&gt;&lt;a href=&quot;functions/link&quot;&gt;link&lt;/a&gt;&lt;/code&gt; ）もシンボリックリンク（ &lt;code&gt;&lt;a href=&quot;functions/symlink&quot;&gt;symlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; ）もサポートしない場合があります。</target>
        </trans-unit>
        <trans-unit id="15629c3f6edb637003db8544e5aa317bc95e5e82" translate="yes" xml:space="preserve">
          <source>The filesystem of Symbian devices uses DOSish syntax, &quot;drives&quot; separated from paths by a colon, and backslashes for the path. The exact assignment of the drives probably varies between platforms, but for example in Series 60 you might see C: as the (flash) main memory, D: as the RAM drive, E: as the memory card (MMC), Z: as the ROM. In Series 80 D: is the memory card. As far the devices go the NUL: is the bit bucket, the COMx: are the serial lines, IRCOMx: are the IR ports, TMP: might be C:\System\Temp. Remember to double those backslashes in doublequoted strings.</source>
          <target state="translated">Symbian デバイスのファイルシステムは、DOS のような構文を使用し、「ドライブ」はコロンでパスから分離され、パスにはバックスラッシュを使用します。ドライブの正確な割り当ては、おそらくプラットフォームによって異なりますが、例えば60シリーズでは、C:(フラッシュ)メインメモリ、D:RAMドライブ、E:メモリカード(MMC)、Z:ROMと表示されます。シリーズ80ではD:がメモリカードとなります。デバイスとしては、NUL:はビットバケット、COMx:はシリアルライン、IRCOMx:はIRポート、TMP:はC:かもしれません。ダブルクォートで囲まれた文字列では、バックスラッシュを二重にすることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="60abfd860ab77072c0ffed33f686231d933f221b" translate="yes" xml:space="preserve">
          <source>The filetest operators &lt;code&gt;-t&lt;/code&gt; , &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; are not implemented, as they require more information than just a stat buffer.</source>
          <target state="translated">filetest演算子 &lt;code&gt;-t&lt;/code&gt; 、 &lt;code&gt;-T&lt;/code&gt; 、および &lt;code&gt;-B&lt;/code&gt; は、単なるstatバッファーよりも多くの情報を必要とするため、実装されていません。</target>
        </trans-unit>
        <trans-unit id="2f0292fee7197d3e8ac530c889c496fd989569af" translate="yes" xml:space="preserve">
          <source>The filetest operators &lt;code&gt;-t&lt;/code&gt;, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; are not implemented, as they require more information than just a stat buffer.</source>
          <target state="translated">ファイルテスト演算子 &lt;code&gt;-t&lt;/code&gt; 、 &lt;code&gt;-T&lt;/code&gt; 、および &lt;code&gt;-B&lt;/code&gt; は、単なる統計バッファーよりも多くの情報を必要とするため、実装されていません。</target>
        </trans-unit>
        <trans-unit id="a32f19af093b1f7fb24c634263035e297b5a2ba3" translate="yes" xml:space="preserve">
          <source>The filter ensures that Perl parses the code between the &amp;lt;DEBUG_BEGIN&amp;gt; and &lt;code&gt;DEBUG_END&lt;/code&gt; markers only when the &lt;code&gt;DEBUG&lt;/code&gt; environment variable exists. That means that when &lt;code&gt;DEBUG&lt;/code&gt; does exist, the code above should be passed through the filter unchanged. The marker lines can also be passed through as-is, because the Perl parser will see them as comment lines. When &lt;code&gt;DEBUG&lt;/code&gt; isn't set, we need a way to disable the debug code. A simple way to achieve that is to convert the lines between the two markers into comments:</source>
          <target state="translated">フィルターは、 &lt;code&gt;DEBUG&lt;/code&gt; 環境変数が存在する場合にのみ、Perlが&amp;lt;DEBUG_BEGIN&amp;gt; マーカーと &lt;code&gt;DEBUG_END&lt;/code&gt; マーカーの間のコードを解析するようにします。つまり、 &lt;code&gt;DEBUG&lt;/code&gt; が存在する場合、上記のコードは変更されずにフィルターを通過する必要があります。 Perlパーサーはマーカー行をコメント行として認識するため、マーカー行をそのまま渡すこともできます。 &lt;code&gt;DEBUG&lt;/code&gt; が設定されていない場合、デバッグコードを無効にする方法が必要です。これを実現する簡単な方法は、2つのマーカー間の行をコメントに変換することです。</target>
        </trans-unit>
        <trans-unit id="3cfa6a6fd2754ac19a694b001066c8361c789aec" translate="yes" xml:space="preserve">
          <source>The filter included are:</source>
          <target state="translated">付属のフィルターは</target>
        </trans-unit>
        <trans-unit id="06dac022e678c85372a6fa4a8e6e10c155086a90" translate="yes" xml:space="preserve">
          <source>The filter is applied to</source>
          <target state="translated">にフィルターを適用しています。</target>
        </trans-unit>
        <trans-unit id="6311b9692024a04fd6e913eb59f189ec85a241cf" translate="yes" xml:space="preserve">
          <source>The filter is applied to the key</source>
          <target state="translated">フィルタは、キー</target>
        </trans-unit>
        <trans-unit id="edd6196707ee8763311d3aafd47d83821af190dd" translate="yes" xml:space="preserve">
          <source>The filter is applied to the value</source>
          <target state="translated">フィルタが適用されるのは</target>
        </trans-unit>
        <trans-unit id="6693f0e2b9229e67ead2ac6746c8771a8ed55fa9" translate="yes" xml:space="preserve">
          <source>The final &lt;code&gt;PUTBACK&lt;/code&gt; is used to leave the Perl stack in a consistent state before exiting the function. This is necessary because when we popped the return value from the stack with &lt;code&gt;POPi&lt;/code&gt; it updated only our local copy of the stack pointer. Remember, &lt;code&gt;PUTBACK&lt;/code&gt; sets the global stack pointer to be the same as our local copy.</source>
          <target state="translated">最後の &lt;code&gt;PUTBACK&lt;/code&gt; は、関数を終了する前にPerlスタックを一貫した状態にしておくために使用されます。これは、 &lt;code&gt;POPi&lt;/code&gt; を使用してスタックから戻り値をポップしたときに、スタックポインターのローカルコピーのみを更新したためです。覚えておいて、 &lt;code&gt;PUTBACK&lt;/code&gt; は、私たちのローカルコピーと同じになるようにグローバルなスタックポインタを設定します。</target>
        </trans-unit>
        <trans-unit id="6d574089f345d41e6ac1476fc2b80885aa410f07" translate="yes" xml:space="preserve">
          <source>The final character can't be a hyphen, colon, or period. URLs ending with these characters, while allowed by XHTML, can be awkward to extract from plain text.</source>
          <target state="translated">最後の文字はハイフン、コロン、ピリオドにすることはできません。これらの文字で終わるURLは、XHTMLでは許可されていますが、プレーンテキストから抽出するのは厄介です。</target>
        </trans-unit>
        <trans-unit id="0a99e11f3a928dd6413c811829c3b9af3764501f" translate="yes" xml:space="preserve">
          <source>The final difference between regular bracketed character classes and these, is that it is not possible to get these to match a multi-character fold. Thus,</source>
          <target state="translated">通常の括弧付き文字クラスとこれらとの最終的な違いは、これらを複数文字の折り返しに一致させることができないということです。したがって、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="cde87782285bb08650f77bdd2e4ce0e06adc25ff" translate="yes" xml:space="preserve">
          <source>The final element of a list assignment may be an array or a hash:</source>
          <target state="translated">リスト代入の最後の要素は配列かハッシュになります。</target>
        </trans-unit>
        <trans-unit id="bee7b4f4630bbb2daf491aa012bc945e164b3e70" translate="yes" xml:space="preserve">
          <source>The final example shows that the characters &lt;code&gt;&quot;{&quot;&lt;/code&gt; and &lt;code&gt;&quot;}&quot;&lt;/code&gt; are metacharacters.</source>
          <target state="translated">最後の例は、文字 &lt;code&gt;&quot;{&quot;&lt;/code&gt; と &lt;code&gt;&quot;}&quot;&lt;/code&gt; がメタ文字であることを示しています。</target>
        </trans-unit>
        <trans-unit id="b74663d384e88ec12c85ff6a9f4b23592b8a3858" translate="yes" xml:space="preserve">
          <source>The final line (with Index [242]) means that the value for all code points above the legal Unicode maximum code point have the value &quot;No_Block&quot;, which is the term Unicode uses for a non-existing block.</source>
          <target state="translated">最後の行(インデックス [242]を持つ)は、法定 Unicode 最大コードポイント以上のすべてのコードポイントの値が、Unicode が既存でないブロックに対して使う用語である値 &quot;No_Block&quot; を持つことを意味しています。</target>
        </trans-unit>
        <trans-unit id="e6811c076957053b2764757de731f2de38b4111a" translate="yes" xml:space="preserve">
          <source>The final operation uses the backslash character to invalidate the special meaning of an open square bracket &lt;code&gt;[&lt;/code&gt;, the asterisk, backslash or the question mark. Two backslashes in sequence will result in the evaluation of the backslash as a character with no special meaning.</source>
          <target state="translated">最後の操作では、バックスラッシュ文字を使用して、開き角括弧 &lt;code&gt;[&lt;/code&gt; 、アスタリスク、バックスラッシュ、または疑問符の特別な意味を無効にします。円記号を2つ続けて使用すると、円記号は特別な意味のない文字として評価されます。</target>
        </trans-unit>
        <trans-unit id="be0c78c80ebce8da51fa36633d30ae64f567f49f" translate="yes" xml:space="preserve">
          <source>The final semicolon in a block is optional, as is the final comma in a list. Good style (see &lt;a href=&quot;perlstyle&quot;&gt;perlstyle&lt;/a&gt;) says to put them in except for one-liners:</source>
          <target state="translated">リストの最後のコンマと同様に、ブロックの最後のセミコロンはオプションです。良いスタイル（&lt;a href=&quot;perlstyle&quot;&gt;perlstyleを&lt;/a&gt;参照）は、ワンライナーを除いてそれらを入れるように言っています：</target>
        </trans-unit>
        <trans-unit id="16f205f9e57e8503952af3471732d873e8a9fc93" translate="yes" xml:space="preserve">
          <source>The final semicolon, if any, may be omitted from the value of EXPR or within the BLOCK.</source>
          <target state="translated">最後のセミコロンがある場合は、EXPRの値から、またはBLOCK内では省略することができます。</target>
        </trans-unit>
        <trans-unit id="701bfb8c787a64e7b1b253a3f8fa1a79c79b9b4d" translate="yes" xml:space="preserve">
          <source>The final semicolon, if any, may be omitted from the value of EXPR.</source>
          <target state="translated">最後のセミコロンがある場合は、EXPRの値を省略することができます。</target>
        </trans-unit>
        <trans-unit id="5f49a63a6bf839dcb9a9ccbe0a34339c52904e4c" translate="yes" xml:space="preserve">
          <source>The final semicolon, if any, may be omitted from within the BLOCK.</source>
          <target state="translated">最後のセミコロンがある場合は、block内から省略することができます。</target>
        </trans-unit>
        <trans-unit id="3ee4566a0600358ccd1fe8d6c5a93a6cd48a9d99" translate="yes" xml:space="preserve">
          <source>The final stage is to call &lt;code&gt;test_test&lt;/code&gt; that will simply compare what you predeclared to what &lt;a href=&quot;../builder&quot;&gt;Test::Builder&lt;/a&gt; actually outputted, and report the results back with a &quot;ok&quot; or &quot;not ok&quot; (with debugging) to the normal output.</source>
          <target state="translated">最後の段階では、 &lt;code&gt;test_test&lt;/code&gt; を呼び出して、事前に宣言した内容と実際に&lt;a href=&quot;../builder&quot;&gt;Test :: Builder&lt;/a&gt;が出力した内容を比較し、結果を「ok」または「not ok」（デバッグ付き）で通常の出力に報告します。</target>
        </trans-unit>
        <trans-unit id="a77ba1afa8fadab31ac1c8125c1a4cf3b74fcb5e" translate="yes" xml:space="preserve">
          <source>The final stage is to call &lt;code&gt;test_test&lt;/code&gt; that will simply compare what you predeclared to what &lt;a href=&quot;Test::Builder&quot;&gt;Test::Builder&lt;/a&gt; actually outputted, and report the results back with a &quot;ok&quot; or &quot;not ok&quot; (with debugging) to the normal output.</source>
          <target state="translated">最後の段階は、 &lt;code&gt;test_test&lt;/code&gt; を呼び出すことです。これは、事前に宣言したものと&lt;a href=&quot;Test::Builder&quot;&gt;Test :: Builderが&lt;/a&gt;実際に出力したものを単純に比較し、結果を「ok」または「not ok」（デバッグあり）で通常の出力に報告します。</target>
        </trans-unit>
        <trans-unit id="31473d1a074747714a49e0fc3e7edd46729c2ea4" translate="yes" xml:space="preserve">
          <source>The final step involves passing each filename matched by the &lt;code&gt;*.tar.gz&lt;/code&gt; file glob through the derived Perl regular expression in turn and expanding the output fileglob using it.</source>
          <target state="translated">最後のステップでは、 &lt;code&gt;*.tar.gz&lt;/code&gt; 。tar.gzファイルグロブに一致する各ファイル名を、派生したPerl正規表現に渡し、それを使用して出力ファイルグロブを拡張します。</target>
        </trans-unit>
        <trans-unit id="d96d9b1e4edc6c2a13a6362b88a7c6a709b1d43c" translate="yes" xml:space="preserve">
          <source>The final two modifiers we will discuss here, &lt;code&gt;//g&lt;/code&gt; and &lt;code&gt;//c&lt;/code&gt; , concern multiple matches. The modifier &lt;code&gt;//g&lt;/code&gt; stands for global matching and allows the matching operator to match within a string as many times as possible. In scalar context, successive invocations against a string will have &lt;code&gt;//g&lt;/code&gt; jump from match to match, keeping track of position in the string as it goes along. You can get or set the position with the &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">ここで説明する最後の2つの修飾子 &lt;code&gt;//g&lt;/code&gt; と &lt;code&gt;//c&lt;/code&gt; は、複数の一致に関係します。修飾子 &lt;code&gt;//g&lt;/code&gt; はグローバルマッチングを表し、マッチングオペレーターが文字列内で可能な限り何度でもマッチングできるようにします。スカラーコンテキストでは、文字列に対して連続して呼び出しを行うと、文字列内の位置を追跡しながら &lt;code&gt;//g&lt;/code&gt; が一致から一致へジャンプします。 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; 関数で位置を取得または設定できます。</target>
        </trans-unit>
        <trans-unit id="789fdded843f5a388c6234d5037a293bfbacec0d" translate="yes" xml:space="preserve">
          <source>The final two modifiers we will discuss here, &lt;code&gt;/g&lt;/code&gt; and &lt;code&gt;/c&lt;/code&gt;, concern multiple matches. The modifier &lt;code&gt;/g&lt;/code&gt; stands for global matching and allows the matching operator to match within a string as many times as possible. In scalar context, successive invocations against a string will have &lt;code&gt;/g&lt;/code&gt; jump from match to match, keeping track of position in the string as it goes along. You can get or set the position with the &lt;code&gt;pos()&lt;/code&gt; function.</source>
          <target state="translated">ここで説明する最後の2つの修飾子、 &lt;code&gt;/g&lt;/code&gt; と &lt;code&gt;/c&lt;/code&gt; は、複数の一致に関係します。修飾子 &lt;code&gt;/g&lt;/code&gt; はグローバルマッチングを表し、マッチング演算子が文字列内で可能な限り何度もマッチングできるようにします。スカラーコンテキストでは、文字列に対する連続した呼び出しでは、 &lt;code&gt;/g&lt;/code&gt; が一致から一致にジャンプし、文字列内の位置を追跡します。 &lt;code&gt;pos()&lt;/code&gt; 関数を使用して位置を取得または設定できます。</target>
        </trans-unit>
        <trans-unit id="68bb0429a21250927b8f2328dd69f3ab3c62b7fa" translate="yes" xml:space="preserve">
          <source>The final, fourth element (index [3], assigned to &lt;code&gt;$default&lt;/code&gt; in the &quot;block&quot; example) in the four element list returned by this function is used with the &lt;code&gt;&quot;a&quot;&lt;/code&gt; format types; it may also be useful for applications that wish to convert the returned inversion map data structure into some other, such as a hash. It gives the mapping that most code points map to under the property. If you establish the convention that any code point not explicitly listed in your data structure maps to this value, you can potentially make your data structure much smaller. As you construct your data structure from the one returned by this function, simply ignore those ranges that map to this value. For example, to convert to the data structure searchable by &lt;a href=&quot;#charinrange%28%29&quot;&gt;&quot;charinrange()&quot;&lt;/a&gt;, you can follow this recipe for properties that don't require adjustments:</source>
          <target state="translated">この関数によって返される4つの要素リストの最後の4番目の要素（インデックス[3]、「ブロック」の例では &lt;code&gt;$default&lt;/code&gt; に割り当てられています）は、 &lt;code&gt;&quot;a&quot;&lt;/code&gt; 形式のタイプで使用されます。また、返された反転マップのデータ構造をハッシュなどの他の構造に変換したいアプリケーションにも役立つ場合があります。これは、ほとんどのコードポイントがプロパティの下にマップするマッピングを提供します。データ構造に明示的にリストされていないコードポイントがこの値にマップされるという規則を確立すると、データ構造をはるかに小さくできる可能性があります。この関数によって返されるものからデータ構造を構築するときは、この値にマップされる範囲を単に無視してください。たとえば、&lt;a href=&quot;#charinrange%28%29&quot;&gt;「charinrange（）」で&lt;/a&gt;検索可能なデータ構造に変換するには、調整を必要としないプロパティについては、次のレシピに従うことができます。</target>
        </trans-unit>
        <trans-unit id="69b0c89da94c5764d6322358005c665b7a6ec505" translate="yes" xml:space="preserve">
          <source>The final, fourth element (index [3], assigned to &lt;code&gt;$default&lt;/code&gt; in the &quot;block&quot; example) in the four element list returned by this function is used with the &lt;code&gt;&quot;a&quot;&lt;/code&gt; format types; it may also be useful for applications that wish to convert the returned inversion map data structure into some other, such as a hash. It gives the mapping that most code points map to under the property. If you establish the convention that any code point not explicitly listed in your data structure maps to this value, you can potentially make your data structure much smaller. As you construct your data structure from the one returned by this function, simply ignore those ranges that map to this value. For example, to convert to the data structure searchable by &lt;a href=&quot;#charinrange()&quot;&gt;charinrange()&lt;/a&gt;, you can follow this recipe for properties that don't require adjustments:</source>
          <target state="translated">この関数によって返される4つの要素リストの最後の4番目の要素（「ブロック」の例では &lt;code&gt;$default&lt;/code&gt; に割り当てられている）は、 &lt;code&gt;&quot;a&quot;&lt;/code&gt; 形式タイプで使用されます。また、返された反転マップデータ構造をハッシュなどの他のいくつかに変換したいアプリケーションにも役立ちます。ほとんどのコードポイントがプロパティの下にマップするマッピングを提供します。データ構造に明示的にリストされていないコードポイントがこの値にマップするという規則を確立すると、データ構造を大幅に小さくできる可能性があります。この関数によって返されるデータ構造からデータ構造を構築するときは、この値にマップされる範囲を単に無視してください。たとえば、&lt;a href=&quot;#charinrange()&quot;&gt;charinrange（）で&lt;/a&gt;検索可能なデータ構造に変換するには、調整を必要としないプロパティについては、このレシピに従うことができます。</target>
        </trans-unit>
        <trans-unit id="20c1b5c18477e5291b6b00c55abb0e8a3b781429" translate="yes" xml:space="preserve">
          <source>The find_dup() Method</source>
          <target state="translated">find_dup()メソッド</target>
        </trans-unit>
        <trans-unit id="a4105f4f4646c65f036c1e5edea46eddb3a8418a" translate="yes" xml:space="preserve">
          <source>The first (and now failed) goal of Unicode was to map all character repertoires into a fixed-length integer so that programmers are happy. Since each character is either a</source>
          <target state="translated">ユニコードの最初の(今では失敗した)目標は、プログラマが満足できるように、すべての文字のレパートリーを固定長の整数にマッピングすることでした。各文字は</target>
        </trans-unit>
        <trans-unit id="172226a1c7ce5a6d06797585142c70179c0ec58b" translate="yes" xml:space="preserve">
          <source>The first &lt;b&gt;PAUSE&lt;/b&gt; author to upload a &lt;b&gt;namespace&lt;/b&gt; automatically becomes the &lt;b&gt;primary maintainer&lt;/b&gt; for that namespace. The &amp;ldquo;first come&amp;rdquo; permissions distinguish a &lt;b&gt;primary maintainer&lt;/b&gt; who was assigned that role from one who received it automatically.</source>
          <target state="translated">&lt;b&gt;名前空間&lt;/b&gt;をアップロードした最初の&lt;b&gt;PAUSE作成&lt;/b&gt;者は、自動的にその名前空間の&lt;b&gt;主要なメンテナ&lt;/b&gt;になります。「先着」権限は、そのロールが割り当てられた&lt;b&gt;メインのメンテナ&lt;/b&gt;と、自動的にそれを受け取った&lt;b&gt;メンテナ&lt;/b&gt;を区別します。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="97526a10437e54c9f14361d8f57177e27604beab" translate="yes" xml:space="preserve">
          <source>The first Perl argument to this function would be treated as a char and assigned to the variable a, and its address would be passed into the function foo. The second Perl argument would be treated as a string pointer and assigned to the variable b. The</source>
          <target state="translated">この関数へのPerlの最初の引数はcharとして扱われ、変数aに代入され、そのアドレスは関数fooに渡されます。2 番目の Perl の引数は文字列ポインタとして扱われ、変数 b に代入されます。</target>
        </trans-unit>
        <trans-unit id="c3453154bc2cd37e63c9b0f3f784faca750ac354" translate="yes" xml:space="preserve">
          <source>The first alternative includes everything from the last pattern delimiter (&lt;code&gt;&quot;(&quot;&lt;/code&gt;, &lt;code&gt;&quot;(?:&quot;&lt;/code&gt; (described later),</source>
          <target state="translated">最初の選択肢には、最後のパターン区切り文字（ &lt;code&gt;&quot;(&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;(?:&quot;&lt;/code&gt; （後述）、</target>
        </trans-unit>
        <trans-unit id="e5e4f6464deede9ad4eff50e6de5039522d07e08" translate="yes" xml:space="preserve">
          <source>The first and second arguments may be strings, typeglobs, typeglob references, or objects inheriting from IO::Handle; they are used in all cases to obtain the</source>
          <target state="translated">第一引数と第二引数は文字列、タイプグローブ、タイプグローブ参照、IO::Handleから継承したオブジェクトのいずれかである可能性があります。</target>
        </trans-unit>
        <trans-unit id="f11ee434e9fca49f11d7860f46bcba7e793d3dea" translate="yes" xml:space="preserve">
          <source>The first and second forms explicitly identify the name of the class being created. The third form assumes the current package name as the class name.</source>
          <target state="translated">1 番目と 2 番目のフォームでは、作成されるクラスの名前を明示的に指定します。第三の形式では、現在のパッケージ名をクラス名とします。</target>
        </trans-unit>
        <trans-unit id="1490a2bc188cd4f0f1d7d40df76c523f30ba9b64" translate="yes" xml:space="preserve">
          <source>The first argument &lt;code&gt;pointer&lt;/code&gt; should be the name of a variable that will point to the newly allocated memory.</source>
          <target state="translated">最初の引数 &lt;code&gt;pointer&lt;/code&gt; は、新しく割り当てられたメモリを指す変数の名前である必要があります。</target>
        </trans-unit>
        <trans-unit id="80c48ff540490ea5dad5fc5e056d6677cb16264e" translate="yes" xml:space="preserve">
          <source>The first argument of &lt;code&gt;setlocale()&lt;/code&gt; gives the &lt;b&gt;category&lt;/b&gt;, the second the &lt;b&gt;locale&lt;/b&gt;. The category tells in what aspect of data processing you want to apply locale-specific rules. Category names are discussed in &lt;a href=&quot;#LOCALE-CATEGORIES&quot;&gt;&quot;LOCALE CATEGORIES&quot;&lt;/a&gt; and &lt;a href=&quot;#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot;&lt;/a&gt;. The locale is the name of a collection of customization information corresponding to a particular combination of language, country or territory, and codeset. Read on for hints on the naming of locales: not all systems name locales as in the example.</source>
          <target state="translated">最初の引数 &lt;code&gt;setlocale()&lt;/code&gt; 与え&lt;b&gt;カテゴリ&lt;/b&gt;、第二&lt;b&gt;のロケールを&lt;/b&gt;。このカテゴリは、データ処理のどの側面でロケール固有のルールを適用するかを示します。カテゴリ名については、&lt;a href=&quot;#LOCALE-CATEGORIES&quot;&gt;「LOCALECATEGORIES」&lt;/a&gt;および&lt;a href=&quot;#ENVIRONMENT&quot;&gt;「ENVIRONMENT」で&lt;/a&gt;説明しています。ロケールは、言語、国または地域、およびコードセットの特定の組み合わせに対応するカスタマイズ情報のコレクションの名前です。ロケールの命名に関するヒントを読んでください。例のように、すべてのシステムがロケールに名前を付けるわけではありません。</target>
        </trans-unit>
        <trans-unit id="4f43aa625d664f2ba3718ef0a1149ca5df8580dd" translate="yes" xml:space="preserve">
          <source>The first argument of &lt;code&gt;setlocale()&lt;/code&gt; gives the &lt;b&gt;category&lt;/b&gt;, the second the &lt;b&gt;locale&lt;/b&gt;. The category tells in what aspect of data processing you want to apply locale-specific rules. Category names are discussed in &lt;a href=&quot;#LOCALE-CATEGORIES&quot;&gt;LOCALE CATEGORIES&lt;/a&gt; and &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt;. The locale is the name of a collection of customization information corresponding to a particular combination of language, country or territory, and codeset. Read on for hints on the naming of locales: not all systems name locales as in the example.</source>
          <target state="translated">最初の引数 &lt;code&gt;setlocale()&lt;/code&gt; 与え&lt;b&gt;カテゴリ&lt;/b&gt;、第二&lt;b&gt;のロケールを&lt;/b&gt;。カテゴリは、ロケール固有のルールを適用するデータ処理の側面を示します。カテゴリー名については、&lt;a href=&quot;#LOCALE-CATEGORIES&quot;&gt;LOCALE CATEGORIES&lt;/a&gt;および&lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENTで&lt;/a&gt;説明します。ロケールは、言語、国または地域、およびコードセットの特定の組み合わせに対応するカスタマイズ情報のコレクションの名前です。ロケールの命名に関するヒントを読んでください。例のようにすべてのシステムがロケールに名前を付けるわけではありません。</target>
        </trans-unit>
        <trans-unit id="fede859d91b131301182a8f517e78fcd79928ade" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;code&gt;find()&lt;/code&gt; is either a code reference to your &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function, or a hash reference describing the operations to be performed for each file. The code reference is described in &lt;a href=&quot;#The-wanted-function&quot;&gt;&quot;The wanted function&quot;&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; の最初の引数は、 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数へのコード参照、または各ファイルに対して実行される操作を説明するハッシュ参照のいずれかです。コードリファレンスについては、以下の&lt;a href=&quot;#The-wanted-function&quot;&gt;「必要な関数」で&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="7d7b3a91ac2b665d00253c60dfd683fd8e3981ca" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;code&gt;find()&lt;/code&gt; is either a code reference to your &lt;code&gt;&amp;amp;wanted&lt;/code&gt; function, or a hash reference describing the operations to be performed for each file. The code reference is described in &lt;a href=&quot;#The-wanted-function&quot;&gt;The wanted function&lt;/a&gt; below.</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; の最初の引数は、 &lt;code&gt;&amp;amp;wanted&lt;/code&gt; 関数へのコード参照、または各ファイルに対して実行される操作を説明するハッシュ参照です。コードリファレンスについては、以下の&lt;a href=&quot;#The-wanted-function&quot;&gt;「必要な関数」で&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="7c957468bac2255084a035a3220d83572a45006f" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;code&gt;open&lt;/code&gt;, labeled FILEHANDLE in this reference, is usually a scalar variable. (Exceptions exist, described in &quot;Other considerations&quot;, below.) If the call to &lt;code&gt;open&lt;/code&gt; succeeds, then the expression provided as FILEHANDLE will get assigned an open</source>
          <target state="translated">このリファレンスでFILEHANDLEとラベル付けされて &lt;code&gt;open&lt;/code&gt; 、開く最初の引数は、通常、スカラー変数です。（以下の「その他の考慮事項」で説明されている例外が存在します。） &lt;code&gt;open&lt;/code&gt; の呼び出しが成功すると、FILEHANDLEとして提供された式にopenが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="4cbf5c859ede86efd02d67b5ed562cbefaa9fa86" translate="yes" xml:space="preserve">
          <source>The first call creates a mortal SV (with no value), the second converts an existing SV to a mortal SV (and thus defers a call to &lt;code&gt;SvREFCNT_dec&lt;/code&gt; ), and the third creates a mortal copy of an existing SV. Because &lt;code&gt;sv_newmortal&lt;/code&gt; gives the new SV no value, it must normally be given one via &lt;code&gt;sv_setpv&lt;/code&gt; , &lt;code&gt;sv_setiv&lt;/code&gt; , etc. :</source>
          <target state="translated">最初の呼び出しは致命的なSV（値なし）を作成し、2番目の呼び出しは既存のSVを致命的なSVに変換し（したがって &lt;code&gt;SvREFCNT_dec&lt;/code&gt; の呼び出しを延期します）、3番目の呼び出しは既存のSVの致命的なコピーを作成します。ので &lt;code&gt;sv_newmortal&lt;/code&gt; は、新しいSVに何も値を与えていない、それは通常を通じて1を与えられなければならない &lt;code&gt;sv_setpv&lt;/code&gt; 、 &lt;code&gt;sv_setiv&lt;/code&gt; など、：</target>
        </trans-unit>
        <trans-unit id="4477498f36568777dd7d39a288f8eb78c180c0b5" translate="yes" xml:space="preserve">
          <source>The first call will cache the result, say 37, in the scalar cache; the second will cach the list &lt;code&gt;(37)&lt;/code&gt; in the list cache. The third call doesn't call the real &lt;code&gt;complicated&lt;/code&gt; function; it gets the value 37 from the scalar cache.</source>
          <target state="translated">最初の呼び出しは、結果（37など）をスカラーキャッシュにキャッシュします。 2番目は、リスト &lt;code&gt;(37)&lt;/code&gt; をリストキャッシュにキャッシュします。 3番目の呼び出しは、実際の &lt;code&gt;complicated&lt;/code&gt; 関数を呼び出しません。スカラーキャッシュから値37を取得します。</target>
        </trans-unit>
        <trans-unit id="cb2fb10ae2990b48a149ecb6c3ef672018aecbe1" translate="yes" xml:space="preserve">
          <source>The first call-back registered is the call back for waiting. It is expected that the callback will call the current event loop until there is something waiting to get on the input filehandle. The parameter passed in is the return value of the second call back.</source>
          <target state="translated">最初に登録されたコールバックは、待ち受けのコールバックです。このコールバックは、入力されたファイルハンドルに何か待ち受けがあるまで、現在のイベントループを呼び出すことが期待されます。渡されたパラメータは、2番目のコールバックの戻り値です。</target>
        </trans-unit>
        <trans-unit id="356bc7c1108ec743988bf0e03b81bb507c0cc12b" translate="yes" xml:space="preserve">
          <source>The first code point of the foldcased version is returned (but note, as explained at &lt;a href=&quot;#Character-case-changing&quot;&gt;the top of this section&lt;/a&gt;, that there may be more).</source>
          <target state="translated">折りたたまれたバージョンの最初のコードポイントが返されます（ただし、&lt;a href=&quot;#Character-case-changing&quot;&gt;このセクションの冒頭で&lt;/a&gt;説明したように、さらに多くのコードポイントがある可能性があることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="98e0061b9a6b011cebcff05349c5ac1b63fa9755" translate="yes" xml:space="preserve">
          <source>The first code point of the foldcased version is returned (but note, as explained just above, that there may be more.)</source>
          <target state="translated">foldcased版の最初のコードポイントが返されます(ただし、上記で説明したように、もっとあるかもしれないことに注意してください)。</target>
        </trans-unit>
        <trans-unit id="f94f6bc950fffc56630abef7e060753be71264b0" translate="yes" xml:space="preserve">
          <source>The first code point of the lowercased version is returned (but note, as explained at &lt;a href=&quot;#Character-case-changing&quot;&gt;the top of this section&lt;/a&gt;, that there may be more).</source>
          <target state="translated">小文字バージョンの最初のコードポイントが返されます（ただし、&lt;a href=&quot;#Character-case-changing&quot;&gt;このセクションの冒頭で&lt;/a&gt;説明したように、さらに多くのコードポイントがある可能性があることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="e520b61d264ebe77754743fca0b946c106ddd342" translate="yes" xml:space="preserve">
          <source>The first code point of the lowercased version is returned (but note, as explained at &lt;a href=&quot;#Character-case-changing&quot;&gt;the top of this section&lt;/a&gt;, that there may be more). It will not attempt to read beyond &lt;code&gt;e - 1&lt;/code&gt;, provided that the constraint &lt;code&gt;s &amp;lt; e&lt;/code&gt; is true (this is asserted for in &lt;code&gt;-DDEBUGGING&lt;/code&gt; builds). If the UTF-8 for the input character is malformed in some way, the program may croak, or the function may return the REPLACEMENT CHARACTER, at the discretion of the implementation, and subject to change in future releases.</source>
          <target state="translated">小文字バージョンの最初のコードポイントが返されます（ただし、&lt;a href=&quot;#Character-case-changing&quot;&gt;このセクションの冒頭で&lt;/a&gt;説明したように、さらに多くのコードポイントがある可能性があることに注意してください）。制約 &lt;code&gt;s &amp;lt; e&lt;/code&gt; が真である場合（これは &lt;code&gt;-DDEBUGGING&lt;/code&gt; ビルドでアサートされます）、 &lt;code&gt;e - 1&lt;/code&gt; を超えて読み取ろうとはしません。入力文字のUTF-8が何らかの形で不正な場合、実装の裁量でプログラムが鳴ったり、関数がREPLACEMENT CHARACTERを返したりする可能性があり、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bff810cbc1a30c3df94411ded7219d0513e8678c" translate="yes" xml:space="preserve">
          <source>The first code point of the lowercased version is returned (but note, as explained just above, that there may be more.)</source>
          <target state="translated">ローカスケード版の最初のコードポイントが返されます(ただし、上記で説明したように、もっとあるかもしれないことに注意してください)。</target>
        </trans-unit>
        <trans-unit id="d7f11b85b3fd5fa2f0a6c5645eeff96adc2054e0" translate="yes" xml:space="preserve">
          <source>The first code point of the titlecased version is returned (but note, as explained at &lt;a href=&quot;#Character-case-changing&quot;&gt;the top of this section&lt;/a&gt;, that there may be more).</source>
          <target state="translated">タイトルケース付きバージョンの最初のコードポイントが返されます（ただし、&lt;a href=&quot;#Character-case-changing&quot;&gt;このセクションの冒頭で&lt;/a&gt;説明したように、さらに多くのコードポイントがある可能性があることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="caeb3f58f789aa5ac3e09cf711fff7133bd0293e" translate="yes" xml:space="preserve">
          <source>The first code point of the titlecased version is returned (but note, as explained just above, that there may be more.)</source>
          <target state="translated">titlecased版の最初のコードポイントが返されます(ただし、上記で説明したように、もっとあるかもしれないことに注意)。</target>
        </trans-unit>
        <trans-unit id="3acdfbd051e586c1763fcef89bd42028b50c7068" translate="yes" xml:space="preserve">
          <source>The first code point of the uppercased version is returned (but note, as explained at &lt;a href=&quot;#Character-case-changing&quot;&gt;the top of this section&lt;/a&gt;, that there may be more).</source>
          <target state="translated">大文字のバージョンの最初のコードポイントが返されます（ただし、&lt;a href=&quot;#Character-case-changing&quot;&gt;このセクションの冒頭で&lt;/a&gt;説明したように、さらに多くのコードポイントがある可能性があることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="aa79c84ba894862a3bdfa5a898231ba1c669dc5c" translate="yes" xml:space="preserve">
          <source>The first code point of the uppercased version is returned (but note, as explained at &lt;a href=&quot;#Character-case-changing&quot;&gt;the top of this section&lt;/a&gt;, that there may be more.)</source>
          <target state="translated">大文字のバージョンの最初のコードポイントが返されます（ただし、&lt;a href=&quot;#Character-case-changing&quot;&gt;このセクションの冒頭で&lt;/a&gt;説明したように、さらに多くのコードポイントがある可能性があることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="150061371074e1d388cb756c8513ea3bae095580" translate="yes" xml:space="preserve">
          <source>The first code point of the uppercased version is returned (but note, as explained just above, that there may be more.)</source>
          <target state="translated">最初のコードポイントである大文字版のコードポイントが返されます(ただし、上記で説明したように、もっとあるかもしれないことに注意してください)。</target>
        </trans-unit>
        <trans-unit id="b31a69e396cbea336ac162c9e038d50204a60559" translate="yes" xml:space="preserve">
          <source>The first column gives the Unicode code point of the character (in hex format), the second column gives the (Unicode) name. The third column indicates by which class(es) the character is matched (assuming no locale is in effect that changes the &lt;code&gt;\s&lt;/code&gt; matching).</source>
          <target state="translated">最初の列は文字のUnicodeコードポイント（16進形式）を示し、2番目の列は（Unicode）名を示します。 3番目の列は、どのクラスによって文字が一致するかを示します（ &lt;code&gt;\s&lt;/code&gt; 一致を変更するロケールが有効になっていないと想定）。</target>
        </trans-unit>
        <trans-unit id="8beadb10ab71cda6dd02fa1a65287381a215cc85" translate="yes" xml:space="preserve">
          <source>The first column in the table is a name for the property; the second column is an alternative name, if any, plus possibly some annotations. The alternative name is the property's full name, unless that would simply repeat the first column, in which case the second column indicates the property's short name (if different). The annotations are given only in the entry for the full name. If a property is obsolete, etc, the entry will be flagged with the same characters used in the table in the &lt;a href=&quot;#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;section above&lt;/a&gt;, like &lt;b&gt;D&lt;/b&gt; or &lt;b&gt;S&lt;/b&gt;.</source>
          <target state="translated">テーブルの最初の列はプロパティの名前です。2列目は代替名（ある場合）と、おそらくいくつかの注釈です。代替名は、プロパティの完全な名前です。ただし、最初の列が単純に繰り返される場合を除きます。その場合、2番目の列はプロパティの短い名前（異なる場合）を示します。注釈は、氏名のエントリでのみ指定されます。プロパティが廃止された場合など、エントリには、&lt;b&gt;D&lt;/b&gt;や&lt;b&gt;S&lt;/b&gt;など、&lt;a href=&quot;#Properties-accessible-through-%5cp%7b%7d-and-%5cP%7b%7d&quot;&gt;上記&lt;/a&gt;のセクションの表で使用されているのと同じ文字でフラグが付けられます。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0a9e1d7bc901ecffb197db410cd69bf5871b1113" translate="yes" xml:space="preserve">
          <source>The first column in the table is a name for the property; the second column is an alternative name, if any, plus possibly some annotations. The alternative name is the property's full name, unless that would simply repeat the first column, in which case the second column indicates the property's short name (if different). The annotations are given only in the entry for the full name. The annotations for binary properties include a list of the first few ranges that the property matches. To avoid any ambiguity, the SPACE character is represented as &lt;code&gt;\x20&lt;/code&gt;.</source>
          <target state="translated">表の最初の列はプロパティの名前です。 2番目の列は、代替名（ある場合）と、場合によってはいくつかの注釈です。代替名はプロパティのフルネームです。ただし、最初の列が繰り返される場合は、2番目の列がプロパティの短い名前（異なる場合）を示します。注釈は、フルネームのエントリでのみ指定されます。バイナリプロパティの注釈には、プロパティが一致する最初のいくつかの範囲のリストが含まれています。あいまいさを避けるために、スペース文字は &lt;code&gt;\x20&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="1eff62aa7ff2adaee41faf8fb6df470068a01954" translate="yes" xml:space="preserve">
          <source>The first column is a set of flags, the second column the return type, the third column the name. Columns after that are the arguments. The flags are documented at the top of</source>
          <target state="translated">最初の列はフラグのセット、2番目の列は戻り値の型、3番目の列は名前です。それ以降の列は引数です。フラグは</target>
        </trans-unit>
        <trans-unit id="6b11168c63a090c6a2f9c94f928cd13ec49996f7" translate="yes" xml:space="preserve">
          <source>The first command sends both standard out and standard error to the temporary file. The second command sends only the old standard output there, and the old standard error shows up on the old standard out.</source>
          <target state="translated">最初のコマンドは、標準出力と標準エラーの両方を一時ファイルに送ります。2 番目のコマンドはそこに古い標準出力だけを送り、古い標準エラーは古い標準出力に表示されます。</target>
        </trans-unit>
        <trans-unit id="05c623db7c7d3a79e0f86ce6c1022ffde1e91677" translate="yes" xml:space="preserve">
          <source>The first element of @os_flavor is the major family (ie. Unix, Windows, VMS, OS/2, etc...) and the rest are sub families.</source>
          <target state="translated">OS_flavorの最初の要素はメジャーファミリー(Unix、Windows、VMS、OS/2など)で、残りはサブファミリーです。</target>
        </trans-unit>
        <trans-unit id="bf7e5d87f2410537daa86408c9c3f1321c88ab2f" translate="yes" xml:space="preserve">
          <source>The first entry in the string will run all tests in the top-level</source>
          <target state="translated">文字列の最初のエントリは、トップレベルの</target>
        </trans-unit>
        <trans-unit id="4b34621cb98b9f5d1895e9bf56ac10c10fa486de" translate="yes" xml:space="preserve">
          <source>The first example will be driven by an object of the class CPAN::Module, the second by an object of class CPAN::Distribution.</source>
          <target state="translated">最初の例は、クラス CPAN::Module のオブジェクトによって、2番目の例はクラス CPAN::Distribution のオブジェクトによって駆動されます。</target>
        </trans-unit>
        <trans-unit id="0a27c7509a2d370dd780c83c9db9ebfcd9028447" translate="yes" xml:space="preserve">
          <source>The first extension is an embedded comment &lt;code&gt;(?#text)&lt;/code&gt;. This embeds a comment into the regular expression without affecting its meaning. The comment should not have any closing parentheses in the text. An example is</source>
          <target state="translated">最初の拡張子は埋め込みコメント &lt;code&gt;(?#text)&lt;/code&gt; です。これは、その意味に影響を与えずにコメントを正規表現に埋め込みます。コメントのテキストに閉じ括弧を含めないでください。例は</target>
        </trans-unit>
        <trans-unit id="222cb4b3d3e8dffe112445249bb168e941db04b2" translate="yes" xml:space="preserve">
          <source>The first extra instruction sets DJGPP's FNCASE environment variable so that the new perl binary which you must build for an XS-type module will build correctly. The second extra instruction re-builds the perl binary in your module directory before you run &quot;make test&quot;, so that you are testing with the new module code you built with &quot;make&quot;. The third extra instruction installs the perl binary from your module directory into the standard DJGPP binary directory, &lt;code&gt;($DJDIR)/bin&lt;/code&gt; , replacing your previous perl binary.</source>
          <target state="translated">最初の追加の命令は、DJGPPのFNCASE環境変数を設定して、XSタイプのモジュール用にビルドする必要がある新しいperlバイナリが正しくビルドされるようにします。 2番目の追加の命令は、「make test」を実行する前にモジュールディレクトリにperlバイナリを再構築し、「make」で構築した新しいモジュールコードでテストするようにします。 3番目の追加の命令は、perlバイナリをモジュールディレクトリから標準のDJGPPバイナリディレクトリ &lt;code&gt;($DJDIR)/bin&lt;/code&gt; にインストールし、以前のperlバイナリを置き換えます。</target>
        </trans-unit>
        <trans-unit id="238d815e97aa4aefd914191a6984e7eea1bebbe7" translate="yes" xml:space="preserve">
          <source>The first extra instruction sets DJGPP's FNCASE environment variable so that the new perl binary which you must build for an XS-type module will build correctly. The second extra instruction re-builds the perl binary in your module directory before you run &quot;make test&quot;, so that you are testing with the new module code you built with &quot;make&quot;. The third extra instruction installs the perl binary from your module directory into the standard DJGPP binary directory, &lt;code&gt;($DJDIR)/bin&lt;/code&gt;, replacing your previous perl binary.</source>
          <target state="translated">最初の追加命令は、DJGPPのFNCASE環境変数を設定して、XSタイプのモジュール用にビルドする必要のある新しいperlバイナリが正しくビルドされるようにします。 2番目の追加命令は、「make test」を実行する前に、モジュールディレクトリ内のperlバイナリを再構築するため、「make」で構築した新しいモジュールコードでテストします。 3番目の追加命令は、モジュールディレクトリから標準のDJGPPバイナリディレクトリ &lt;code&gt;($DJDIR)/bin&lt;/code&gt; にperlバイナリをインストールし、以前のperlバイナリを置き換えます。</target>
        </trans-unit>
        <trans-unit id="9ae143bbfd14644c2528b32b8737fee2a5bff385" translate="yes" xml:space="preserve">
          <source>The first few lines tell you the modules that Net::FTP uses and their versions, this is useful data to me when a user reports a bug. The last seven lines show the communication with the server. Each line has three parts. The first part is the object itself, this is useful for separating the output if you are using multiple objects. The second part is either &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; to show data coming from the server or &lt;code&gt;&amp;amp;gt&amp;amp;gt&amp;amp;gt&amp;amp;gt&lt;/code&gt; to show data going to the server. The remainder of the line is the command being sent or response being received.</source>
          <target state="translated">最初の数行は、Net :: FTPが使用するモジュールとそのバージョンを示しています。これは、ユーザーがバグを報告するときに役立つデータです。最後の7行は、サーバーとの通信を示しています。各行には3つの部分があります。最初の部分はオブジェクト自体です。これは、複数のオブジェクトを使用している場合に出力を分離するのに役立ちます。 2番目の部分は、サーバーからのデータを表示する &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; か、サーバーに送信されるデータを表示する &lt;code&gt;&amp;amp;gt&amp;amp;gt&amp;amp;gt&amp;amp;gt&lt;/code&gt; のいずれかです。行の残りの部分は、送信されるコマンドまたは受信される応答です。</target>
        </trans-unit>
        <trans-unit id="34b17d18688be07602898309d70943af3ccee567" translate="yes" xml:space="preserve">
          <source>The first few members of the struct give a function table size for compatibility check &quot;name&quot; for the layer, the size to &lt;code&gt;malloc&lt;/code&gt; for the per-instance data, and some flags which are attributes of the class as whole (such as whether it is a buffering layer), then follow the functions which fall into four basic groups:</source>
          <target state="translated">構造体の最初のいくつかのメンバーは、レイヤーの互換性チェック「名前」の関数テーブルのサイズ、インスタンスごとのデータの &lt;code&gt;malloc&lt;/code&gt; のサイズ、およびクラス全体の属性であるいくつかのフラグ（それがバッファリング層）、次に、4つの基本グループに分類される機能に従います。</target>
        </trans-unit>
        <trans-unit id="5570358324850dc9a5c098d989e656b82d59427c" translate="yes" xml:space="preserve">
          <source>The first five of these are like the escape sequences &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\U&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\F&lt;/code&gt; . For Titlecase, see &lt;a href=&quot;#Titlecase&quot;&gt;Titlecase&lt;/a&gt;; For Foldcase, see &lt;a href=&quot;#Foldcase&quot;&gt;Foldcase&lt;/a&gt;.</source>
          <target state="translated">これらの最初の5つは、エスケープシーケンス &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\F&lt;/code&gt; 似ています。タイトル文字については、&lt;a href=&quot;#Titlecase&quot;&gt;タイトル文字を&lt;/a&gt;。Foldcaseについては、を参照してください&lt;a href=&quot;#Foldcase&quot;&gt;Foldcaseを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="679923e26685f0bf8bfaf94ea7988b4c7276fdb8" translate="yes" xml:space="preserve">
          <source>The first five of these are like the escape sequences &lt;code&gt;\L&lt;/code&gt;, &lt;code&gt;\l&lt;/code&gt;, &lt;code&gt;\U&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt;, and &lt;code&gt;\F&lt;/code&gt;. For Titlecase, see &lt;a href=&quot;#Titlecase&quot;&gt;&quot;Titlecase&quot;&lt;/a&gt;; For Foldcase, see &lt;a href=&quot;#Foldcase&quot;&gt;&quot;Foldcase&quot;&lt;/a&gt;.</source>
          <target state="translated">これらの最初の5つは、エスケープシーケンス &lt;code&gt;\L&lt;/code&gt; 、 &lt;code&gt;\l&lt;/code&gt; 、 &lt;code&gt;\U&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; 、および &lt;code&gt;\F&lt;/code&gt; です。タイトルケースについては、&lt;a href=&quot;#Titlecase&quot;&gt;「タイトルケース」を&lt;/a&gt;参照してください。フォールドケースについては、&lt;a href=&quot;#Foldcase&quot;&gt;「フォールドケース」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="056eb59b4cd627258e760e1417c53352badda0af" translate="yes" xml:space="preserve">
          <source>The first form causes the most-significant</source>
          <target state="translated">最初のフォームでは、最も重要な</target>
        </trans-unit>
        <trans-unit id="655fd20aca46eac1f13d92b5af802dc31b11d56c" translate="yes" xml:space="preserve">
          <source>The first form is used to request a</source>
          <target state="translated">第1の形態では</target>
        </trans-unit>
        <trans-unit id="37eddcbe0416a7dc5593d702e9505efc3b548dce" translate="yes" xml:space="preserve">
          <source>The first form lists all distribution files in and below an author's CPAN directory as stored in the CHECKSUMS files distributed on CPAN. The listing recurses into subdirectories.</source>
          <target state="translated">最初の形式では、CPANで配布されているCHECKSUMSファイルに格納されているように、著者のCPANディレクトリ以下にあるすべての配布ファイルをリストアップします。リストはサブディレクトリへと再帰する。</target>
        </trans-unit>
        <trans-unit id="46eae92ecd4f74796835635e06aeea1b041739b2" translate="yes" xml:space="preserve">
          <source>The first function calculates the length of the string to be appended by using &lt;code&gt;strlen&lt;/code&gt; . In the second, you specify the length of the string yourself. The third function processes its arguments like &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; and appends the formatted output. The fourth function works like &lt;code&gt;vsprintf&lt;/code&gt; . You can specify the address and length of an array of SVs instead of the va_list argument. The fifth function extends the string stored in the first SV with the string stored in the second SV. It also forces the second SV to be interpreted as a string.</source>
          <target state="translated">最初の関数は、 &lt;code&gt;strlen&lt;/code&gt; を使用して、追加される文字列の長さを計算します。 2番目では、文字列の長さを自分で指定します。 3番目の関数は、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; のように引数を処理し、フォーマットされた出力を追加します。 4番目の関数は &lt;code&gt;vsprintf&lt;/code&gt; のように機能します。 va_list引数の代わりに、SVの配列のアドレスと長さを指定できます。 5番目の関数は、最初のSVに格納されている文字列を2番目のSVに格納されている文字列で拡張します。また、2番目のSVを強制的に文字列として解釈します。</target>
        </trans-unit>
        <trans-unit id="090b5d34cd572296fdf844e61d55479b085e6558" translate="yes" xml:space="preserve">
          <source>The first function calculates the length of the string to be appended by using &lt;code&gt;strlen&lt;/code&gt;. In the second, you specify the length of the string yourself. The third function processes its arguments like &lt;code&gt;sprintf&lt;/code&gt; and appends the formatted output. The fourth function works like &lt;code&gt;vsprintf&lt;/code&gt;. You can specify the address and length of an array of SVs instead of the va_list argument. The fifth function extends the string stored in the first SV with the string stored in the second SV. It also forces the second SV to be interpreted as a string.</source>
          <target state="translated">最初の関数は、 &lt;code&gt;strlen&lt;/code&gt; を使用して、追加する文字列の長さを計算します。 2番目では、文字列の長さを自分で指定します。 3番目の関数は、 &lt;code&gt;sprintf&lt;/code&gt; のように引数を処理し、フォーマットされた出力を追加します。 4番目の関数は &lt;code&gt;vsprintf&lt;/code&gt; のように機能します。 va_list引数の代わりに、SVの配列のアドレスと長さを指定できます。 5番目の関数は、最初のSVに格納されている文字列を2番目のSVに格納されている文字列で拡張します。また、2番目のSVを文字列として解釈するように強制します。</target>
        </trans-unit>
        <trans-unit id="50f464748e3494ffffc2bddda9e0371a39740923" translate="yes" xml:space="preserve">
          <source>The first function takes a literal string, the second uses the string stored in the SV. Remember that a stash is just a hash table, so you get back an &lt;code&gt;HV*&lt;/code&gt; . The &lt;code&gt;flags&lt;/code&gt; flag will create a new package if it is set to GV_ADD.</source>
          <target state="translated">最初の関数はリテラル文字列を受け取り、2番目の関数はSVに保存されている文字列を使用します。stashは単なるハッシュテーブルであるため、 &lt;code&gt;HV*&lt;/code&gt; が返されることに注意してください。 &lt;code&gt;flags&lt;/code&gt; それはGV_ADDに設定されている場合、フラグは、新しいパッケージを作成します。</target>
        </trans-unit>
        <trans-unit id="753de98607835382ac405aaaec94b8f9df443117" translate="yes" xml:space="preserve">
          <source>The first function takes a literal string, the second uses the string stored in the SV. Remember that a stash is just a hash table, so you get back an &lt;code&gt;HV*&lt;/code&gt;. The &lt;code&gt;flags&lt;/code&gt; flag will create a new package if it is set to GV_ADD.</source>
          <target state="translated">最初の関数はリテラル文字列を受け取り、2番目の関数はSVに格納されている文字列を使用します。スタッシュは単なるハッシュテーブルであるため、 &lt;code&gt;HV*&lt;/code&gt; が返されることに注意してください。 &lt;code&gt;flags&lt;/code&gt; それはGV_ADDに設定されている場合、フラグは、新しいパッケージを作成します。</target>
        </trans-unit>
        <trans-unit id="835ff098919bab433ee120cffa3fe9f71b92c1c9" translate="yes" xml:space="preserve">
          <source>The first gives data on bucket chain lengths and provides insight on how much work a fetch *miss* will take. In this case we have to inspect every item in a bucket before we can be sure the item is not in the list. The performance for an insert is equivalent to this case, as is a delete where the item is not in the hash.</source>
          <target state="translated">最初のものは、バケットチェーンの長さに関するデータを提供し、フェッチ*miss*がどのくらいの作業量を要するかについての洞察を提供します。この場合、アイテムがリストにないことを確認する前に、バケット内のすべてのアイテムを検査しなければなりません。ハッシュにアイテムがない場合の削除と同様に、挿入のパフォーマンスはこの場合と同等です。</target>
        </trans-unit>
        <trans-unit id="44b1707c0aa3d824f6a27ecfef8a4304420287cd" translate="yes" xml:space="preserve">
          <source>The first interface is an object approach. &lt;code&gt;IO::Dir&lt;/code&gt; provides an object constructor and methods, which are just wrappers around perl's built in directory reading routines.</source>
          <target state="translated">最初のインターフェースはオブジェクトアプローチです。 &lt;code&gt;IO::Dir&lt;/code&gt; は、オブジェクトコンストラクターとメソッドを提供します。これらは、perlの組み込みディレクトリ読み取りルーチンのラッパーにすぎません。</target>
        </trans-unit>
        <trans-unit id="f4941dd26bc8de71bda8bbde95f00b715fc9713b" translate="yes" xml:space="preserve">
          <source>The first is an asterisk &lt;code&gt;*&lt;/code&gt; to match any sequence of zero or more characters.</source>
          <target state="translated">1つ目は、0個以上の文字のシーケンスと一致するアスタリスク &lt;code&gt;*&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e06aed8ca3d744d52c854ac09d0dcc88676f13d3" translate="yes" xml:space="preserve">
          <source>The first is the '*' metacharacter. This will be replaced by the complete filename matched by the input file glob. So</source>
          <target state="translated">最初のものはメタ文字 '*' です。これは、入力ファイルのグロブでマッチした完全なファイル名に置き換えられます。そのため、以下のように</target>
        </trans-unit>
        <trans-unit id="53f5cd295a83b9a3745b8897953b75db40666387" translate="yes" xml:space="preserve">
          <source>The first is the 'default' format, which is used in both basic and exec modes to print all opcodes. The 2nd, goto-format, is used in exec mode when branches are encountered. They're not real opcodes, and are inserted to look like a closing curly brace. The tree-format is tree specific.</source>
          <target state="translated">最初のフォーマットは 'default' フォーマットで、基本モードと exec モードの両方で、すべてのオペコードを表示するために使用されます。2 番目の goto-format は、分岐に遭遇したときに exec モードで使用されます。これらは実際のオペコードではなく、中括弧で閉じるように挿入されます。ツリーフォーマットはツリー固有のものです。</target>
        </trans-unit>
        <trans-unit id="32f6bb26a2f4ae1e809986ad78dbd60042fd1a3c" translate="yes" xml:space="preserve">
          <source>The first item is not fixable (except by upgrading to a later Visual Studio release), but it would be possible to work around the latter two items by using the Windows API functions &lt;code&gt;GetNumberFormat&lt;/code&gt; and &lt;code&gt;GetCurrencyFormat&lt;/code&gt;; patches welcome.</source>
          <target state="translated">最初の項目は &lt;code&gt;GetNumberFormat&lt;/code&gt; Visual Studioリリースにアップグレードする場合を除く）、Windows API関数のGetNumberFormatおよび &lt;code&gt;GetCurrencyFormat&lt;/code&gt; を使用して、後の2つの項目を回避することができます。パッチは大歓迎です。</target>
        </trans-unit>
        <trans-unit id="34237558f2321ff711f52a04588fb6ee8079ad92" translate="yes" xml:space="preserve">
          <source>The first line (with Index [0]) means that the value for code point 0 is &quot;Basic Latin&quot;. The entry &quot;0x0080&quot; in the @blocks_ranges column in the second line means that the value from the first line, &quot;Basic Latin&quot;, extends to all code points in the range from 0 up to but not including 0x0080, that is, through 127. In other words, the code points from 0 to 127 are all in the &quot;Basic Latin&quot; block. Similarly, all code points in the range from 0x0080 up to (but not including) 0x0100 are in the block named &quot;Latin-1 Supplement&quot;, etc. (Notice that the return is the old-style block names; see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;&quot;Old-style versus new-style block names&quot;&lt;/a&gt;).</source>
          <target state="translated">最初の行（インデックス[0]付き）は、コードポイント0の値が「基本ラテン語」であることを意味します。 2行目の@blocks_ranges列のエントリ「0x0080」は、最初の行の「Basic Latin」の値が、0から0x0080まで、つまり127までの範囲のすべてのコードポイントに拡張されることを意味します。つまり、0から127までのコードポイントはすべて「基本ラテン」ブロックにあります。同様に、0x0080から0x0100までの範囲のすべてのコードポイントは、「Latin-1Supplement」などの名前のブロックにあります（戻り値は古いスタイルのブロック名であることに注意してください。&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;「古いスタイル」を&lt;/a&gt;参照してください）。対新しいスタイルのブロック名」）。</target>
        </trans-unit>
        <trans-unit id="40fe0d63874f53e08f9d51c255d101fe5f08a938" translate="yes" xml:space="preserve">
          <source>The first line (with Index [0]) means that the value for code point 0 is &quot;Basic Latin&quot;. The entry &quot;0x0080&quot; in the @blocks_ranges column in the second line means that the value from the first line, &quot;Basic Latin&quot;, extends to all code points in the range from 0 up to but not including 0x0080, that is, through 127. In other words, the code points from 0 to 127 are all in the &quot;Basic Latin&quot; block. Similarly, all code points in the range from 0x0080 up to (but not including) 0x0100 are in the block named &quot;Latin-1 Supplement&quot;, etc. (Notice that the return is the old-style block names; see &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">最初の行（インデックス[0]付き）は、コードポイント0の値が「Basic Latin」であることを意味します。 2行目の@blocks_ranges列のエントリ「0x0080」は、最初の行の「Basic Latin」の値が、0から0x0080を含まない、つまり127までの範囲のすべてのコードポイントに拡張されることを意味します言い換えると、0から127までのコードポイントはすべて「Basic Latin」ブロック内にあります。同様に、0x0080から0x0100まで（ただし含まない）の範囲のすべてのコードポイントは、「Latin-1 Supplement」などの名前のブロック内にあります（戻り値は古いスタイルのブロック名であることに注意してください。&lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;古いスタイルと新しいスタイルのブロック名&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="0686c2b572c16f799b84765daa2d3e48250c69f7" translate="yes" xml:space="preserve">
          <source>The first line above defines &lt;code&gt;TIMESTAMP&lt;/code&gt; as a 9-element list, as returned by &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; in list context. To set it to the string returned by &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; in scalar context, an explicit &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; keyword is required.</source>
          <target state="translated">上記の最初の行は、 &lt;code&gt;TIMESTAMP&lt;/code&gt; を9要素のリストとして定義し、リストコンテキストの &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; によって返されます。スカラーコンテキストで &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; によって返される文字列に設定するには、明示的な &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; キーワードが必要です。</target>
        </trans-unit>
        <trans-unit id="69decd40a9a2c32528b6b5800434c2cba08678b1" translate="yes" xml:space="preserve">
          <source>The first line above defines &lt;code&gt;TIMESTAMP&lt;/code&gt; as a 9-element list, as returned by &lt;code&gt;localtime()&lt;/code&gt; in list context. To set it to the string returned by &lt;code&gt;localtime()&lt;/code&gt; in scalar context, an explicit &lt;code&gt;scalar&lt;/code&gt; keyword is required.</source>
          <target state="translated">上記の最初の行は、リストコンテキストで &lt;code&gt;localtime()&lt;/code&gt; によって返されるように、 &lt;code&gt;TIMESTAMP&lt;/code&gt; を9要素のリストとして定義しています。スカラーコンテキストで &lt;code&gt;localtime()&lt;/code&gt; によって返される文字列に設定するには、明示的な &lt;code&gt;scalar&lt;/code&gt; キーワードが必要です。</target>
        </trans-unit>
        <trans-unit id="9d82ab0cc733d5c69ba599aa083f54d41b0cd704" translate="yes" xml:space="preserve">
          <source>The first line ensures that the errors in your argument specification are found early. When you ship your application you should comment out the first line, since it makes the second one useless.</source>
          <target state="translated">1行目は、引数指定のエラーを早期に発見できるようにします。アプリケーションを出荷するときには、最初の行をコメントアウトしなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d816990178774f44d4b8769d3c845c853e30a87" translate="yes" xml:space="preserve">
          <source>The first line here indicates that the offset/length table contains 45 entries. Each entry is a pair of integers, denoted by &lt;code&gt;offset[&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;]&lt;/code&gt; . Entries are numbered starting with 1, so entry #1 here is &lt;code&gt;1[4]&lt;/code&gt; and entry #12 is &lt;code&gt;5[1]&lt;/code&gt; . &lt;code&gt;1[4]&lt;/code&gt; indicates that the node labeled &lt;code&gt;1:&lt;/code&gt; (the &lt;code&gt;1: ANYOF[bc]&lt;/code&gt;) begins at character position 1 in the pre-compiled form of the regex, and has a length of 4 characters. &lt;code&gt;5[1]&lt;/code&gt; in position 12 indicates that the node labeled &lt;code&gt;12:&lt;/code&gt; (the &lt;code&gt;12: EXACT &amp;lt;d&amp;gt;&lt;/code&gt;) begins at character position 5 in the pre-compiled form of the regex, and has a length of 1 character. &lt;code&gt;12[1]&lt;/code&gt; in position 14 indicates that the node labeled &lt;code&gt;14:&lt;/code&gt; (the &lt;code&gt;14: CURLYX[0] {1,32767}&lt;/code&gt;) begins at character position 12 in the pre-compiled form of the regex, and has a length of 1 character---that is, it corresponds to the &lt;code&gt;+&lt;/code&gt; symbol in the precompiled regex.</source>
          <target state="translated">ここの最初の行は、オフセット/長さテーブルに45のエントリが含まれていることを示しています。各エントリは、 &lt;code&gt;offset[&lt;a href=&quot;functions/length&quot;&gt;length&lt;/a&gt;]&lt;/code&gt; で示される整数のペアです。エントリには1から始まる番号が付けられているため、ここのエントリ＃1は &lt;code&gt;1[4]&lt;/code&gt; 、エントリ＃12は &lt;code&gt;5[1]&lt;/code&gt; です。 &lt;code&gt;1[4]&lt;/code&gt; は、 &lt;code&gt;1:&lt;/code&gt; （ &lt;code&gt;1: ANYOF[bc]&lt;/code&gt; ）というラベルの付いたノードが、コンパイル済みの正規表現の文字位置1から始まり、4文字の長さであることを示します。位置12の &lt;code&gt;5[1]&lt;/code&gt; は、 &lt;code&gt;12:&lt;/code&gt; （ &lt;code&gt;12: EXACT &amp;lt;d&amp;gt;&lt;/code&gt; ）というラベルの付いたノードが、コンパイル済みの正規表現の文字位置5から始まり、長さが1文字であることを示します。 &lt;code&gt;12[1]&lt;/code&gt; 位置14の12 [1]は、 &lt;code&gt;14:&lt;/code&gt; （ &lt;code&gt;14: CURLYX[0] {1,32767}&lt;/code&gt; ）というラベルの付いたノードが、コンパイル済みの正規表現の文字位置12から始まり、長さが1文字であることを示します。 ---つまり、プリコンパイルされた正規表現の &lt;code&gt;+&lt;/code&gt; 記号に対応します。</target>
        </trans-unit>
        <trans-unit id="e2bf1de2c16e8c0adbab29364ba1219b9e1777c7" translate="yes" xml:space="preserve">
          <source>The first line here indicates that the offset/length table contains 45 entries. Each entry is a pair of integers, denoted by &lt;code&gt;offset[length]&lt;/code&gt;. Entries are numbered starting with 1, so entry #1 here is &lt;code&gt;1[4]&lt;/code&gt; and entry #12 is &lt;code&gt;5[1]&lt;/code&gt;. &lt;code&gt;1[4]&lt;/code&gt; indicates that the node labeled &lt;code&gt;1:&lt;/code&gt; (the &lt;code&gt;1: ANYOF[bc]&lt;/code&gt;) begins at character position 1 in the pre-compiled form of the regex, and has a length of 4 characters. &lt;code&gt;5[1]&lt;/code&gt; in position 12 indicates that the node labeled &lt;code&gt;12:&lt;/code&gt; (the &lt;code&gt;12: EXACT &amp;lt;d&amp;gt;&lt;/code&gt;) begins at character position 5 in the pre-compiled form of the regex, and has a length of 1 character. &lt;code&gt;12[1]&lt;/code&gt; in position 14 indicates that the node labeled &lt;code&gt;14:&lt;/code&gt; (the &lt;code&gt;14: CURLYX[0] {1,32767}&lt;/code&gt;) begins at character position 12 in the pre-compiled form of the regex, and has a length of 1 character---that is, it corresponds to the &lt;code&gt;+&lt;/code&gt; symbol in the precompiled regex.</source>
          <target state="translated">ここの最初の行は、オフセット/長さテーブルに45のエントリが含まれていることを示しています。各エントリは、 &lt;code&gt;offset[length]&lt;/code&gt; で示される整数のペアです。エントリには1から始まる番号が付けられているため、ここでのエントリ＃1は &lt;code&gt;1[4]&lt;/code&gt; 、エントリ＃12は &lt;code&gt;5[1]&lt;/code&gt; です。 &lt;code&gt;1[4]&lt;/code&gt; は、 &lt;code&gt;1:&lt;/code&gt; （ &lt;code&gt;1: ANYOF[bc]&lt;/code&gt; ）というラベルの付いたノードが、正規表現のコンパイル済み形式の文字位置1から始まり、長さが4文字であることを示します。位置12の &lt;code&gt;5[1]&lt;/code&gt; は、 &lt;code&gt;12:&lt;/code&gt; （ &lt;code&gt;12: EXACT &amp;lt;d&amp;gt;&lt;/code&gt; ）というラベルの付いたノードが正規表現のプリコンパイル済み形式の文字位置5で始まり、長さが1文字であることを示します。 &lt;code&gt;12[1]&lt;/code&gt; 位置14は、 &lt;code&gt;14:&lt;/code&gt; （ &lt;code&gt;14: CURLYX[0] {1,32767}&lt;/code&gt; ）というラベルの付いたノードが、正規表現のコンパイル済み形式の文字位置12で始まり、長さが1文字であることを示します。つまり、プリコンパイルされた正規表現の &lt;code&gt;+&lt;/code&gt; 記号に対応します。</target>
        </trans-unit>
        <trans-unit id="3daa98ec524432df6c19e25f5089a0ae5fbe0898" translate="yes" xml:space="preserve">
          <source>The first line is an abbreviation for the following two lines, except that it doesn't create the superfluous array variable &lt;code&gt;@array&lt;/code&gt; .</source>
          <target state="translated">最初の行は次の2行の省略形ですが、余分な配列変数 &lt;code&gt;@array&lt;/code&gt; は作成されません。</target>
        </trans-unit>
        <trans-unit id="7be109e4ec8d67123623c616eb3634806eefdaf2" translate="yes" xml:space="preserve">
          <source>The first line is an abbreviation for the following two lines, except that it doesn't create the superfluous array variable &lt;code&gt;@array&lt;/code&gt;.</source>
          <target state="translated">最初の行は次の2行の省略形ですが、余分な配列変数 &lt;code&gt;@array&lt;/code&gt; は作成されません。</target>
        </trans-unit>
        <trans-unit id="45c7b267b0324e3ee08f49728c4657a96f3be74f" translate="yes" xml:space="preserve">
          <source>The first line is the plan - it specifies the number of tests I'm going to run so that it's easy to check that the test script didn't exit before running all the expected tests. The following lines are the test results - 'ok' for pass, 'not ok' for fail. Each test has a number and, optionally, a description. And that's it. Any language that can produce output like that on STDOUT can be used to write tests.</source>
          <target state="translated">最初の行は計画です-これは実行するテストの数を指定するもので、期待されるすべてのテストを実行する前にテストスクリプトが終了しなかったことを簡単に確認できるようにします。次の行はテスト結果です-合格の場合は「OK」、不合格の場合は「OKではない」です。それぞれのテストには番号と、オプションで説明が付いています。これだけです。STDOUT上でこのような出力ができる言語であれば、どんな言語でもテストを書くことができます。</target>
        </trans-unit>
        <trans-unit id="63cea67f4153eeb52ccd2e3da747660523e22317" translate="yes" xml:space="preserve">
          <source>The first line of a</source>
          <target state="translated">の最初の行は</target>
        </trans-unit>
        <trans-unit id="f07b113f7912ed4a47b2646ff4b1fee0ebfd1d07" translate="yes" xml:space="preserve">
          <source>The first line of the commit message should be a short description without a period. It should be no longer than the subject line of an email, 50 characters being a good rule of thumb.</source>
          <target state="translated">コミットメッセージの最初の行は、ピリオドなしの短い説明文にしてください。メールの件名よりも長くならないようにしてください。</target>
        </trans-unit>
        <trans-unit id="ae7ce29a18436b04a3b95f17b59a8ba620a5dab2" translate="yes" xml:space="preserve">
          <source>The first line shows the pre-compiled form of the regex. The second shows the size of the compiled form (in arbitrary units, usually 4-byte words) and the total number of bytes allocated for the offset/length table, usually 4+&lt;code&gt;size&lt;/code&gt; *8. The next line shows the label</source>
          <target state="translated">最初の行は、コンパイル済みの正規表現を示しています。2番目は、コンパイルされたフォームのサイズ（任意の単位、通常は4バイトワード）と、オフセット/長さテーブルに割り当てられた合計バイト数（通常は4+ &lt;code&gt;size&lt;/code&gt; * 8）を示します。次の行はラベルを示しています</target>
        </trans-unit>
        <trans-unit id="a20c750a487464791d892a303a995f218caaa79f" translate="yes" xml:space="preserve">
          <source>The first line shows the pre-compiled form of the regex. The second shows the size of the compiled form (in arbitrary units, usually 4-byte words) and the total number of bytes allocated for the offset/length table, usually 4+&lt;code&gt;size&lt;/code&gt;*8. The next line shows the label</source>
          <target state="translated">最初の行は、コンパイル済みの正規表現を示しています。2つ目は、コンパイルされたフォームのサイズ（任意の単位、通常は4バイトワード）と、オフセット/長さテーブルに割り当てられた合計バイト数（通常は4+ &lt;code&gt;size&lt;/code&gt; * 8）を示します。次の行はラベルを示しています</target>
        </trans-unit>
        <trans-unit id="c7723c265ae779d21866a1c9e48b6be3d9e2e441" translate="yes" xml:space="preserve">
          <source>The first method takes periodically samples of the CPU program counter, and since the program counter can be correlated with the code generated for functions, we get a statistical view of in which functions the program is spending its time. The caveats are that very small/fast functions have lower probability of showing up in the profile, and that periodically interrupting the program (this is usually done rather frequently, in the scale of milliseconds) imposes an additional overhead that may skew the results. The first problem can be alleviated by running the code for longer (in general this is a good idea for profiling), the second problem is usually kept in guard by the profiling tools themselves.</source>
          <target state="translated">最初の方法では、定期的に CPU プログラムカウンタのサンプルを取得し、プログラムカウンタを関数用に生成されたコードと相関させることができるので、プログラムがどの関数に時間を費やしているかを統計的に把握することができます。注意点としては、非常に小さな/高速な関数はプロファイルに表示される確率が低いことと、プログラムを定期的に中断する(これは通常、ミリ秒単位でかなり頻繁に行われます)ことで、結果が歪む可能性のある追加のオーバーヘッドが発生することが挙げられます。最初の問題は、コードをより長く実行することで緩和されます(一般的には、これはプロファイリングには良いアイデアです)。</target>
        </trans-unit>
        <trans-unit id="108fd116edbd3a8efddc6a912d5c851d634fe27e" translate="yes" xml:space="preserve">
          <source>The first name is called the</source>
          <target state="translated">と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="0263570650724ebe71f62b454fad700a5d663c69" translate="yes" xml:space="preserve">
          <source>The first number doesn't really mean anything, but it has to be 1. It's the second number that's important.</source>
          <target state="translated">1つ目の数字に意味はないが、1でなければならない。重要なのは2番目の数字です。</target>
        </trans-unit>
        <trans-unit id="3c95867addff6e3f2248f91516c23a2994856b3e" translate="yes" xml:space="preserve">
          <source>The first of the three available techniques is to write the filter completely in C. The external module you create interfaces directly with the source filter hooks provided by Perl.</source>
          <target state="translated">3 つの利用可能なテクニックのうち最初のものは、フィルタを完全に C 言語で記述する方法です。</target>
        </trans-unit>
        <trans-unit id="2cf31ee7914fd21827d64f65da992c78e2dd2481" translate="yes" xml:space="preserve">
          <source>The first of these is the operand providing the overloaded operator implementation - in this case, the object whose &lt;code&gt;minus()&lt;/code&gt; method is being called.</source>
          <target state="translated">これらの最初は、オーバーロードされた演算子の実装を提供するオペランドです-この場合、 &lt;code&gt;minus()&lt;/code&gt; メソッドが呼び出されているオブジェクト。</target>
        </trans-unit>
        <trans-unit id="32df19252ad74319d4ce1046b1c9ffb0a16536ba" translate="yes" xml:space="preserve">
          <source>The first of these two functions checks if a hash table entry exists, and the second deletes it.</source>
          <target state="translated">これら2つの関数のうち1つ目はハッシュテーブルエントリが存在するかどうかをチェックし、2つ目はそのハッシュテーブルエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="2baee74dbd5d9705ba409f49c41818c111db8f9c" translate="yes" xml:space="preserve">
          <source>The first one explicitly passes in the context, which is needed for e.g. threaded builds. The second one does that implicitly; do not get them mixed. If you are not passing in a aTHX_, you will need to do a dTHX (or a dVAR) as the first thing in the function.</source>
          <target state="translated">最初のものは明示的にコンテキストを渡しますが、これはスレッドビルドなどで必要になります。2 番目のものは暗黙のうちにそれを行います。aTHX_を渡さない場合は、関数の最初に dTHX (または dVAR)を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="b5d9b746eaf9594387396efaab0691495a0a8b7a" translate="yes" xml:space="preserve">
          <source>The first one is &lt;code&gt;&quot;format&quot;&lt;/code&gt; , which is a sprintf()-style format string to be used for both numeric parts of the complex number(s). The is somewhat system-dependent but most often it corresponds to &lt;code&gt;&quot;%.15g&quot;&lt;/code&gt; . You can revert to the default by setting the &lt;code&gt;&lt;a href=&quot;../functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最初のものは &lt;code&gt;&quot;format&quot;&lt;/code&gt; です。これは、複素数の両方の数値部分に使用されるsprintf（）スタイルのフォーマット文字列です。は多少システム依存ですが、ほとんどの場合 &lt;code&gt;&quot;%.15g&quot;&lt;/code&gt; に対応します。 &lt;code&gt;&lt;a href=&quot;../functions/format&quot;&gt;format&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; に設定することにより、デフォルトに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="51d3fa9f9095d6ba6fd87e541115beff9437b3d9" translate="yes" xml:space="preserve">
          <source>The first one is &lt;code&gt;&quot;format&quot;&lt;/code&gt;, which is a sprintf()-style format string to be used for both numeric parts of the complex number(s). The is somewhat system-dependent but most often it corresponds to &lt;code&gt;&quot;%.15g&quot;&lt;/code&gt;. You can revert to the default by setting the &lt;code&gt;format&lt;/code&gt; to &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">1つ目は &lt;code&gt;&quot;format&quot;&lt;/code&gt; 。これは、複素数の両方の数値部分に使用されるsprintf（）スタイルのフォーマット文字列です。これはシステムに多少依存しますが、ほとんどの場合、 &lt;code&gt;&quot;%.15g&quot;&lt;/code&gt; 。15g」に対応します。 &lt;code&gt;format&lt;/code&gt; を &lt;code&gt;undef&lt;/code&gt; に設定すると、デフォルトに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="64110520d33c3683502b6895ec7f686e2b691a83" translate="yes" xml:space="preserve">
          <source>The first one is a B::PADNAMELIST under Perl 5.22, and a B::AV under earlier versions. The rest are currently B::AV objects, but that could change in future versions.</source>
          <target state="translated">最初のものはPerl 5.22ではB::PADNAMELIST、それ以前のバージョンではB::AVです。残りは現在のところ B::AV オブジェクトですが、将来のバージョンでは変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="094fe85cd4712afd8983c54311ea1fc6e32b5e2d" translate="yes" xml:space="preserve">
          <source>The first parameter is a scalar into which, upon success, the wide character represented by the multi-byte string contained in the second parameter is stored. The optional third parameter is ignored if it is larger than the actual length of the second parameter string.</source>
          <target state="translated">1 番目のパラメータはスカラであり、成功した場合には、2 番目のパラメータに含まれるマルチバイト文字列で表されるワイド文字が格納されます。オプションの 3 番目のパラメータは、2 番目のパラメータの文字列の実際の長さよりも大きい場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="3b59fd7f35cf6d9692928110737a220c45e66d67" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;code&gt;UTF8fARG&lt;/code&gt; is a boolean: 1 if the string is in UTF-8; 0 if string is in native byte encoding (Latin1). The second parameter is the number of bytes in the string to print. And the third and final parameter is a pointer to the first byte in the string.</source>
          <target state="translated">&lt;code&gt;UTF8fARG&lt;/code&gt; の最初のパラメーターはブール値です。文字列がUTF-8の場合は1。文字列がネイティブバイトエンコーディング（Latin1）の場合は0。2番目のパラメーターは、出力する文字列のバイト数です。そして、3番目の最後のパラメーターは、文字列の最初のバイトへのポインターです。</target>
        </trans-unit>
        <trans-unit id="53ea0aa1b4ed42878caaa6bf56a3d5e35dfb1b12" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;code&gt;globmap&lt;/code&gt; , &lt;code&gt;*.tar.gz&lt;/code&gt;, is an</source>
          <target state="translated">最初のパラメータ &lt;code&gt;globmap&lt;/code&gt; 、 &lt;code&gt;*.tar.gz&lt;/code&gt; のは、あります</target>
        </trans-unit>
        <trans-unit id="bbc40cbdc77266be7323541d7a55e0277f7ff986" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;code&gt;globmap&lt;/code&gt;, &lt;code&gt;*.tar.gz&lt;/code&gt;, is an</source>
          <target state="translated">最初のパラメータ &lt;code&gt;globmap&lt;/code&gt; 、 &lt;code&gt;*.tar.gz&lt;/code&gt; のは、あります</target>
        </trans-unit>
        <trans-unit id="2f7f0d7f3250dff196379a82ef1042cf92584eab" translate="yes" xml:space="preserve">
          <source>The first part of each item is the language tag, between {...}. It is followed by an English name for the language or language-group. Language tags that I judge to be not for general use, are bracketed.</source>
          <target state="translated">各項目の最初の部分は、{...}の間の言語タグです。その後に、その言語または言語グループの英語名が続きます。私が一般的に使用するものではないと判断した言語タグは括弧で囲んでいます。</target>
        </trans-unit>
        <trans-unit id="2850ab20f1390861bb35445270293546335b53f4" translate="yes" xml:space="preserve">
          <source>The first part of the report already shows the critical information regarding which subroutines are using the most time. The next gives some statistics about the source files profiled.</source>
          <target state="translated">レポートの最初の部分では、どのサブルーチンが最も時間を使っているかという重要な情報がすでに表示されています。次の部分では、プロファイルされたソースファイルに関する統計情報を提供します。</target>
        </trans-unit>
        <trans-unit id="397f188600044026c7930c78c4ec45f2d657488a" translate="yes" xml:space="preserve">
          <source>The first pass is finding the end of the quoted construct. This results in saving to a safe location a copy of the text (between the starting and ending delimiters), normalized as necessary to avoid needing to know what the original delimiters were.</source>
          <target state="translated">最初のパスは、引用符で囲まれた構造体の終わりを見つけることです。この結果、安全な場所にテキストのコピー(開始デリミタと終了デリミタの間)を保存し、元のデリミタを知る必要がないように必要に応じて正規化します。</target>
        </trans-unit>
        <trans-unit id="52dc28c1ba280be3247117e934caac44df1ea80f" translate="yes" xml:space="preserve">
          <source>The first portions of this document contains instructions to cross-compile Perl for Android 2.0 and later, using the binaries provided by Google. The latter portions describe how to build perl native using one of the toolchains available on the Play Store.</source>
          <target state="translated">このドキュメントの最初の部分では、Googleが提供するバイナリを使用して、Android 2.0以降のPerlをクロスコンパイルする方法を説明しています。後者の部分では、Playストアで入手可能なツールチェーンを使ってPerlネイティブをビルドする方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="90fe7088bb4f27d081fbb7bc1dcf8f8999b582b8" translate="yes" xml:space="preserve">
          <source>The first quantifier '.*' starts out by matching the whole string 'the cat in the hat'.</source>
          <target state="translated">最初の定量化子 '.*' は、文字列 'the cat in the hat' 全体にマッチすることから始まります。</target>
        </trans-unit>
        <trans-unit id="9c1c8c14ec1e3a07903d82f126aec6635328f772" translate="yes" xml:space="preserve">
          <source>The first quantifier &lt;code&gt;.*&lt;/code&gt; grabs as much of the string as possible while still having the regex match. The second quantifier &lt;code&gt;.*&lt;/code&gt; has no string left to it, so it matches 0 times.</source>
          <target state="translated">最初の量指定子 &lt;code&gt;.*&lt;/code&gt; は、正規表現に一致させながら、文字列のできるだけ多くを取得します。 2番目の量指定子 &lt;code&gt;.*&lt;/code&gt; は文字列が残っていないため、0回一致します。</target>
        </trans-unit>
        <trans-unit id="6e528105bd9590f0533aed7b713042470a33b8f6" translate="yes" xml:space="preserve">
          <source>The first reason is that this technique</source>
          <target state="translated">第一の理由は、この手法は</target>
        </trans-unit>
        <trans-unit id="b01253c2ebd001b8b295bfdd61014e6f7807bcd2" translate="yes" xml:space="preserve">
          <source>The first regexp &lt;code&gt;world&lt;/code&gt; doesn't match because regexps are case-sensitive. The second regexp matches because the substring &lt;code&gt;'o W'&lt;/code&gt; occurs in the string &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; . The space character ' ' is treated like any other character in a regexp and is needed to match in this case. The lack of a space character is the reason the third regexp &lt;code&gt;'oW'&lt;/code&gt; doesn't match. The fourth regexp &lt;code&gt;'World '&lt;/code&gt; doesn't match because there is a space at the end of the regexp, but not at the end of the string. The lesson here is that regexps must match a part of the string</source>
          <target state="translated">正規表現では大文字と小文字が区別されるため、最初の正規表現の &lt;code&gt;world&lt;/code&gt; は一致しません。文字列 &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; に部分文字列 &lt;code&gt;'o W'&lt;/code&gt; が出現するため、2番目の正規表現が一致します。スペース文字「」は、正規表現の他の文字と同様に扱われ、この場合の一致に必要です。スペース文字がないことが、3番目の正規表現 &lt;code&gt;'oW'&lt;/code&gt; が一致しない理由です。 4番目の正規表現 &lt;code&gt;'World '&lt;/code&gt; は、正規表現の最後にスペースがあるので一致しませんが、文字列の最後にはありません。ここでの教訓は、正規表現は文字列の一部と一致する必要があるということです</target>
        </trans-unit>
        <trans-unit id="d791e1a0374a959ba40ed9f40fd370a5d5a456cb" translate="yes" xml:space="preserve">
          <source>The first regexp &lt;code&gt;world&lt;/code&gt; doesn't match because regexps are case-sensitive. The second regexp matches because the substring &lt;code&gt;'o W'&lt;/code&gt; occurs in the string &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;. The space character &lt;code&gt;' '&lt;/code&gt; is treated like any other character in a regexp and is needed to match in this case. The lack of a space character is the reason the third regexp &lt;code&gt;'oW'&lt;/code&gt; doesn't match. The fourth regexp &quot;&lt;code&gt;World &lt;/code&gt;&quot; doesn't match because there is a space at the end of the regexp, but not at the end of the string. The lesson here is that regexps must match a part of the string</source>
          <target state="translated">正規表現では大文字と小文字が区別されるため、最初の正規表現の &lt;code&gt;world&lt;/code&gt; は一致しません。第二の正規表現のマッチストリングので、 &lt;code&gt;'o W'&lt;/code&gt; 文字列に発生した &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; 。スペース文字 &lt;code&gt;' '&lt;/code&gt; は、正規表現内の他の文字と同様に扱われ、この場合は一致する必要があります。スペース文字がないことが、3番目の正規表現 &lt;code&gt;'oW'&lt;/code&gt; が一致しない理由です。4番目の正規表現「 &lt;code&gt;World &lt;/code&gt; 」は、正規表現の最後にスペースがありますが、文字列の最後にはないため、一致しません。ここでの教訓は、正規表現は文字列の一部と一致する必要があるということです</target>
        </trans-unit>
        <trans-unit id="ddca4d833894463530776d04e09076c4eab205cd" translate="yes" xml:space="preserve">
          <source>The first regexp doesn't match because the string has more to it than &lt;code&gt;keep&lt;/code&gt; . Since the second regexp is exactly the string, it matches. Using both &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in a regexp forces the complete string to match, so it gives you complete control over which strings match and which don't. Suppose you are looking for a fellow named bert, off in a string by himself:</source>
          <target state="translated">最初の正規表現は、文字列に &lt;code&gt;keep&lt;/code&gt; よりも多くの文字があるため、一致しません。2番目の正規表現は文字列そのものなので、一致します。正規表現で &lt;code&gt;^&lt;/code&gt; と &lt;code&gt;$&lt;/code&gt; の両方を使用すると、完全な文字列が強制的に一致するため、一致する文字列と一致しない文字列を完全に制御できます。自分で文字列から離れたbertという名前の仲間を探しているとします。</target>
        </trans-unit>
        <trans-unit id="467dd0993aab8207646a6fe07d7110c16e4ae880" translate="yes" xml:space="preserve">
          <source>The first regexp doesn't match because the string has more to it than &lt;code&gt;keep&lt;/code&gt;. Since the second regexp is exactly the string, it matches. Using both &lt;code&gt;'^'&lt;/code&gt; and &lt;code&gt;'$'&lt;/code&gt; in a regexp forces the complete string to match, so it gives you complete control over which strings match and which don't. Suppose you are looking for a fellow named bert, off in a string by himself:</source>
          <target state="translated">文字列には &lt;code&gt;keep&lt;/code&gt; よりも多くのものがあるため、最初の正規表現は一致しません。2番目の正規表現は正確に文字列であるため、一致します。正規表現で &lt;code&gt;'^'&lt;/code&gt; と &lt;code&gt;'$'&lt;/code&gt; 両方を使用すると、文字列全体が強制的に一致するため、一致する文字列と一致しない文字列を完全に制御できます。あなたが一人でひもで離れて、バートという名前の仲間を探しているとしましょう：</target>
        </trans-unit>
        <trans-unit id="187948592e3895c96d921caa597048a315b504cd" translate="yes" xml:space="preserve">
          <source>The first reports that both those the hashes contain the same data, while the second reports that they do not. Which you prefer is left as an exercise to the reader.</source>
          <target state="translated">最初のレポートは、両方のハッシュが同じデータを含むことを報告し、2番目のレポートは、それらがないことを報告しています。どちらを選ぶかは読者の自由です。</target>
        </trans-unit>
        <trans-unit id="8860a773058066d93bd3eee9e9232f1b245f86d6" translate="yes" xml:space="preserve">
          <source>The first section describes POSIX functions from the 1003.1 specification. The second section describes some classes for signal objects, TTY objects, and other miscellaneous objects. The remaining sections list various constants and macros in an organization which roughly follows IEEE Std 1003.1b-1993.</source>
          <target state="translated">第1節では、1003.1仕様のPOSIX関数について説明します。第2節では、シグナルオブジェクト、TTYオブジェクト、およびその他の雑多なオブジェクトのためのいくつかのクラスについて説明します。残りのセクションでは、IEEE Std 1003.1b-1993にほぼ準拠した構成で、各種の定数やマクロをリストアップしています。</target>
        </trans-unit>
        <trans-unit id="9a3305f1afd295681118d876dec01ed7a5b8a456" translate="yes" xml:space="preserve">
          <source>The first section maps various C data types to a name, which corresponds somewhat with the various Perl types. The second section contains C code which &lt;b&gt;xsubpp&lt;/b&gt; uses to handle input parameters. The third section contains C code which &lt;b&gt;xsubpp&lt;/b&gt; uses to handle output parameters.</source>
          <target state="translated">最初のセクションでは、さまざまなCデータ型を名前にマッピングします。名前は、さまざまなPerl型と多少対応しています。2番目のセクションには、&lt;b&gt;xsubpp&lt;/b&gt;が入力パラメーターを処理するために使用するCコードが含まれています。3番目のセクションには、&lt;b&gt;xsubpp&lt;/b&gt;が出力パラメーターを処理するために使用するCコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="5dec21809b3e94bb56bbf06b1ab08c273929b8df" translate="yes" xml:space="preserve">
          <source>The first section of this document provides an itemized checklist; subsequent sections provide a more detailed discussion of the items on the list. The final section, &quot;Common Pitfalls&quot;, describes some of the most popular mistakes made by CPAN authors.</source>
          <target state="translated">この文書の最初のセクションでは、項目別のチェックリストを提供しており、それ以降のセクションでは、リストの項目についてより詳細に説明している。最後のセクション「共通の落とし穴」では、CPANの執筆者が犯した最も一般的な間違いのいくつかを説明しています。</target>
        </trans-unit>
        <trans-unit id="873fa0119aa76096529ccc05f5ae97f00f810fd3" translate="yes" xml:space="preserve">
          <source>The first set of stats gives some summary statistical information, including the quality score translated into &quot;Good&quot;, &quot;Poor&quot; and &quot;Bad&quot;, (score&amp;lt;=1.05, score&amp;lt;=1.2, score&amp;gt;1.2). See the documentation in bucket_stats() for more details.</source>
          <target state="translated">最初の統計セットは、「良い」、「悪い」、「悪い」に翻訳された品質スコアを含むいくつかの要約統計情報を提供します（スコア&amp;lt;= 1.05、スコア&amp;lt;= 1.2、スコア&amp;gt; 1.2）。詳細については、bucket_stats（）のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="da5f31247c2eb407c67afefcfd779d23549ec3df" translate="yes" xml:space="preserve">
          <source>The first situation being much more frequent, it makes sense to rewrite the boilerplate as</source>
          <target state="translated">最初の状況はより頻繁に発生するので、ボイラプレートを次のように書き換えるのが理にかなっています。</target>
        </trans-unit>
        <trans-unit id="ad55dcbd2815a02cf9af8564c1fdb6a55d76bf9e" translate="yes" xml:space="preserve">
          <source>The first state may happen in &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; and &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; handlers.</source>
          <target state="translated">最初の状態は、 &lt;code&gt;$SIG{__DIE__}&lt;/code&gt; および &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; ハンドラーで発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="470d1d04836c0a5dd42cc354e122ff4ddc8f36a3" translate="yes" xml:space="preserve">
          <source>The first step is to add this line:</source>
          <target state="translated">まずはこの行を追加します。</target>
        </trans-unit>
        <trans-unit id="1d92a911344060c6031358fbe99f5d7b26fb10e8" translate="yes" xml:space="preserve">
          <source>The first step of processing such a line is the conversion, to binary, of the hexadecimal data, to obtain the four fields, while checking the checksum. No surprise here: we'll start with a simple &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; call to convert everything to binary:</source>
          <target state="translated">このような行を処理する最初のステップは、チェックサムをチェックしながら4つのフィールドを取得するための16進データのバイナリへの変換です。ここで驚くことはありません。すべてをバイナリに変換する単純な &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 呼び出しから始めます。</target>
        </trans-unit>
        <trans-unit id="3d051bbcc0b2bf5e763df328cc13763c82b21bfe" translate="yes" xml:space="preserve">
          <source>The first step of processing such a line is the conversion, to binary, of the hexadecimal data, to obtain the four fields, while checking the checksum. No surprise here: we'll start with a simple &lt;code&gt;pack&lt;/code&gt; call to convert everything to binary:</source>
          <target state="translated">このような行を処理する最初のステップは、チェックサムをチェックしながら4つのフィールドを取得するために、16進データを2進数に変換することです。ここで驚くことではありません。すべてをバイナリに変換するための単純な &lt;code&gt;pack&lt;/code&gt; 呼び出しから始めます。</target>
        </trans-unit>
        <trans-unit id="a2237935485a4e0e57cc8ab0badea71ce05f470d" translate="yes" xml:space="preserve">
          <source>The first string position that this regexp can match is at the first &lt;code&gt;'m'&lt;/code&gt; in &lt;code&gt;programming&lt;/code&gt; . At this position, the minimal &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m{1,2}?&lt;/a&gt;&lt;/code&gt; matches just one &lt;code&gt;'m'&lt;/code&gt; . Although the second quantifier &lt;code&gt;.*?&lt;/code&gt; would prefer to match no characters, it is constrained by the end-of-string anchor &lt;code&gt;$&lt;/code&gt; to match the rest of the string.</source>
          <target state="translated">この正規表現が一致できる最初の文字列の位置は、 &lt;code&gt;programming&lt;/code&gt; 最初の &lt;code&gt;'m'&lt;/code&gt; です。この位置で、最小の &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m{1,2}?&lt;/a&gt;&lt;/code&gt; 1つの &lt;code&gt;'m'&lt;/code&gt; にのみ一致します。 2番目の数量詞 &lt;code&gt;.*?&lt;/code&gt; 文字がないと一致することを好むだろう、それは文字列の残りのアンカーと一致するために文字列の終わりのアンカー &lt;code&gt;$&lt;/code&gt; によって制約されます。</target>
        </trans-unit>
        <trans-unit id="5f895607d70ebcfe9c61321d68de376e6e1b258c" translate="yes" xml:space="preserve">
          <source>The first string position that this regexp can match is at the first &lt;code&gt;'m'&lt;/code&gt; in &lt;code&gt;programming&lt;/code&gt;. At this position, the minimal &lt;code&gt;m{1,2}?&lt;/code&gt; matches just one &lt;code&gt;'m'&lt;/code&gt;. Although the second quantifier &lt;code&gt;.*?&lt;/code&gt; would prefer to match no characters, it is constrained by the end-of-string anchor &lt;code&gt;'$'&lt;/code&gt; to match the rest of the string.</source>
          <target state="translated">この正規表現が一致できる最初の文字列位置は、 &lt;code&gt;programming&lt;/code&gt; 最初の &lt;code&gt;'m'&lt;/code&gt; です。この位置で、最小の &lt;code&gt;m{1,2}?&lt;/code&gt; 1つの &lt;code&gt;'m'&lt;/code&gt; のみ一致します。 2番目の数量詞 &lt;code&gt;.*?&lt;/code&gt; 文字を一致させたくない場合は、文字列の残りの部分と一致するように文字列の終わりのアンカー &lt;code&gt;'$'&lt;/code&gt; によって制約されます。</target>
        </trans-unit>
        <trans-unit id="fea599d468c324040fff443da5016a605f7268fd" translate="yes" xml:space="preserve">
          <source>The first task in building a regexp is to decide what we want to match and what we want to exclude. In our case, we want to match both integers and floating point numbers and we want to reject any string that isn't a number.</source>
          <target state="translated">正規表現を構築する際の最初の作業は、マッチさせたいものと除外したいものを決めることです。この例では、整数と浮動小数点数の両方にマッチさせたいので、数値ではない文字列はすべて拒否します。</target>
        </trans-unit>
        <trans-unit id="a253a2302f0dd4214c0fa19a3c7600e1aeb7c19f" translate="yes" xml:space="preserve">
          <source>The first thing after the &quot;=over&quot; command should be an &quot;=item&quot;, unless there aren't going to be any items at all in this &quot;=over&quot; ... &quot;=back&quot; region.</source>
          <target state="translated">この&quot;=over&quot; ...&quot;=back &quot;領域にアイテムが全く存在しない場合を除いて、&quot;=over &quot;コマンドの後の最初のものは&quot;=item &quot;でなければなりません。back &quot;領域にアイテムが存在しないのであれば、&quot;=over&quot; ...&quot;=back &quot;領域にアイテムが存在しないのであれば、&quot;=item &quot;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b4182d2194d7b0a192c4908dabaf70426956c4b1" translate="yes" xml:space="preserve">
          <source>The first thread will grab a lock on &lt;code&gt;$x&lt;/code&gt; , then, after a pause during which the second thread has probably had time to do some work, try to grab a lock on &lt;code&gt;$y&lt;/code&gt; . Meanwhile, the second thread grabs a lock on &lt;code&gt;$y&lt;/code&gt; , then later tries to grab a lock on &lt;code&gt;$x&lt;/code&gt; . The second lock attempt for both threads will block, each waiting for the other to release its lock.</source>
          <target state="translated">最初のスレッドは &lt;code&gt;$x&lt;/code&gt; ロックを取得し、2番目のスレッドが何らかの作業を行う時間のある一時停止の後、 &lt;code&gt;$y&lt;/code&gt; ロックを取得しようとします。一方、2番目のスレッドは &lt;code&gt;$y&lt;/code&gt; のロックを取得し、後で &lt;code&gt;$x&lt;/code&gt; ロックを取得しようとします。両方のスレッドに対する2回目のロック試行はブロックされ、それぞれが他方のロックが解放されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="1b0e5abdf339f37172dcc121e02e6f88bb538337" translate="yes" xml:space="preserve">
          <source>The first thread will grab a lock on &lt;code&gt;$x&lt;/code&gt;, then, after a pause during which the second thread has probably had time to do some work, try to grab a lock on &lt;code&gt;$y&lt;/code&gt;. Meanwhile, the second thread grabs a lock on &lt;code&gt;$y&lt;/code&gt;, then later tries to grab a lock on &lt;code&gt;$x&lt;/code&gt;. The second lock attempt for both threads will block, each waiting for the other to release its lock.</source>
          <target state="translated">最初のスレッドは &lt;code&gt;$x&lt;/code&gt; ロックを取得し、2番目のスレッドがおそらく何らかの作業を行う時間があった一時停止の後、 &lt;code&gt;$y&lt;/code&gt; ロックを取得しようとします。一方、2番目のスレッドは &lt;code&gt;$y&lt;/code&gt; のロックを取得し、後で &lt;code&gt;$x&lt;/code&gt; ロックを取得しようとします。両方のスレッドに対する2回目のロック試行はブロックされ、それぞれが他方がロックを解放するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="97805142bc0d01ba991305a8f5bc28f8f3fcba12" translate="yes" xml:space="preserve">
          <source>The first time through the loop, you will rewrite the entire file, from line 0 through the end. The second time through the loop, you will rewrite the entire file from line 1 through the end. The third time through the loop, you will rewrite the entire file from line 2 to the end. And so on.</source>
          <target state="translated">ループの1回目は、0行目から最後までファイル全体を書き換えます。2回目のループでは、1行目から最後までファイル全体を書き換えます。3回目のループでは、2行目から最後までファイル全体を書き換えます。といった具合です。</target>
        </trans-unit>
        <trans-unit id="0d6a59a26170358aef33f4d3978afce2e252997e" translate="yes" xml:space="preserve">
          <source>The first two arguments taken by this method are the name of the symbol and the value which should be assigned to it. The optional third argument is a string specifying the symbol table to be used; 'GLOBAL' specifies the global symbol table, and any other string specifies the local symbol table. If this argument is omitted, the default symbol table for the object is used. &lt;code&gt;setsym&lt;/code&gt; returns TRUE if successful, and FALSE otherwise.</source>
          <target state="translated">このメソッドが取る最初の2つの引数は、シンボルの名前とそれに割り当てる必要のある値です。オプションの3番目の引数は、使用するシンボルテーブルを指定する文字列です。「GLOBAL」はグローバルシンボルテーブルを指定し、その他の文字列はローカルシンボルテーブルを指定します。この引数を省略すると、オブジェクトのデフォルトのシンボルテーブルが使用されます。 &lt;code&gt;setsym&lt;/code&gt; は、成功した場合はTRUEを返し、それ以外の場合はFALSEを返します。</target>
        </trans-unit>
        <trans-unit id="579873cee61866ba7eb29c6c1922769d306aac89" translate="yes" xml:space="preserve">
          <source>The first two fields give the total amount of memory perl sbrk(2)ed (ess-broken? :-) and number of sbrk(2)s used. The third number is what perl thinks about continuity of returned chunks. So long as this number is positive, malloc() will assume that it is probable that sbrk(2) will provide continuous memory.</source>
          <target state="translated">最初の2つのフィールドは、perlのsbrk(2)ed(ess-broken? :-)と使用されたsbrk(2)の数の合計メモリ量を与えます。3番目の数値は、返されたチャンクの連続性についてPerlがどう考えているかを示します。この数が正の値である限り、malloc()はsbrk(2)が連続的なメモリを提供する可能性が高いと仮定します。</target>
        </trans-unit>
        <trans-unit id="0819c6d2283041c7cfda116e5fb9ae13c3a8c8e6" translate="yes" xml:space="preserve">
          <source>The first two forms return &lt;b&gt;true&lt;/b&gt; if the &lt;a href=&quot;#code-point-argument&quot;&gt;&quot;code point argument&quot;&lt;/a&gt; should not be produced by composition normalization. For the final two forms to return &lt;b&gt;true&lt;/b&gt;, it is additionally required that this fact not otherwise be determinable from the Unicode data base.</source>
          <target state="translated">&lt;a href=&quot;#code-point-argument&quot;&gt;「コードポイント引数」&lt;/a&gt;が構成の正規化によって生成されるべきでない場合、最初の2つの形式は&lt;b&gt;true&lt;/b&gt;を返し&lt;b&gt;ます&lt;/b&gt;。最後の2つの形式が&lt;b&gt;true&lt;/b&gt;を返すためには、この事実がUnicodeデータベースから他の方法で判別できないことがさらに必要です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="4becb05f0bd7170201aca65de03c239266000dbc" translate="yes" xml:space="preserve">
          <source>The first two forms return &lt;b&gt;true&lt;/b&gt; if the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt; should not be produced by composition normalization. For the final two forms to return &lt;b&gt;true&lt;/b&gt;, it is additionally required that this fact not otherwise be determinable from the Unicode data base.</source>
          <target state="translated">最初の2つの形式は、&lt;a href=&quot;#code-point-argument&quot;&gt;コードポイント引数&lt;/a&gt;が構成の正規化によって生成されるべきでない場合に&lt;b&gt;true&lt;/b&gt;を返し&lt;b&gt;ます&lt;/b&gt;。最後の2つのフォームが&lt;b&gt;true&lt;/b&gt;を返すためには、この事実がUnicodeデータベースから判別できないことがさらに必要です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7edeb46a7cf77b29322b042169fd6545cca7858e" translate="yes" xml:space="preserve">
          <source>The first value to be substituted in the output string ( usually the column in a cursor addressing capability )</source>
          <target state="translated">出力文字列で置換される最初の値(通常はカーソルアドレッシング能力の列)。</target>
        </trans-unit>
        <trans-unit id="6c0a32c5664fb58c1965f29a470eb892918927d8" translate="yes" xml:space="preserve">
          <source>The first version of TAP to include an explicit version number is 13.</source>
          <target state="translated">明示的なバージョン番号を含むTAPの最初のバージョンは13です。</target>
        </trans-unit>
        <trans-unit id="23a0afbda307c4ae7b5c2196fca71616dba92438" translate="yes" xml:space="preserve">
          <source>The first version of this article originally appeared in The Perl Journal #11, and is copyright 1998 The Perl Journal. It appears courtesy of Jon Orwant and The Perl Journal. This document may be distributed under the same terms as Perl itself.</source>
          <target state="translated">この記事の最初のバージョンは The Perl Journal #11 に掲載されたもので、著作権は 1998 The Perl Journal にあります。Jon Orwant と The Perl Journal の提供によるものです。この文書は Perl 自体と同じ条件で配布することができます。</target>
        </trans-unit>
        <trans-unit id="ba908120df7bb5731ed530b89b4f89b55fe9cb39" translate="yes" xml:space="preserve">
          <source>The first version of this document appeared on Perl Monks, where several people had useful suggestions. Thank you, Perl Monks.</source>
          <target state="translated">この文書の最初のバージョンは Perl Monks に掲載され、何人かの人が有益な提案をしてくれました。Perl Monks に感謝します。</target>
        </trans-unit>
        <trans-unit id="af8e62f88abda0ab386f2cc101dff094b50fe117" translate="yes" xml:space="preserve">
          <source>The first version, the one without the indirect object, ran the</source>
          <target state="translated">最初のバージョンでは、間接オブジェクトがないものは</target>
        </trans-unit>
        <trans-unit id="6781fdff7b279779b03d140931fe35f9d498c177" translate="yes" xml:space="preserve">
          <source>The first will run all test files in all first-level subdirectories and all subdirectories they contain. The second will run tests in only the</source>
          <target state="translated">最初のものは、すべての第一レベルのサブディレクトリと、それらが含むすべてのサブディレクトリのすべてのテストファイルを実行します。2 番目は</target>
        </trans-unit>
        <trans-unit id="4cf53ff13525a226bb832b26adcd06a8433dba05" translate="yes" xml:space="preserve">
          <source>The fix is to remove all Test::Builder1.5/2 related code. Either use the legacy Test::Builder API, or use Test2 directly.</source>
          <target state="translated">この修正は、Test::Builder1.5/2関連のコードをすべて削除することです。レガシーの Test::Builder API を使用するか、Test2 を直接使用してください。</target>
        </trans-unit>
        <trans-unit id="f2b513d7712476adb9fe5c913d728ae8bf500df8" translate="yes" xml:space="preserve">
          <source>The fix is to use the API specified in &lt;a href=&quot;Test2::API&quot;&gt;Test2::API&lt;/a&gt; to look at or modify state as needed.</source>
          <target state="translated">修正は、&lt;a href=&quot;Test2::API&quot;&gt;Test2 :: APIで&lt;/a&gt;指定されたAPIを使用して、必要に応じて状態を確認または変更することです。</target>
        </trans-unit>
        <trans-unit id="8e5db8a38d2c3f00c90a5e9484dd046d60b873cc" translate="yes" xml:space="preserve">
          <source>The fixed-width font to use for verbatim text and code. Defaults to &lt;code&gt;CW&lt;/code&gt; . Some systems may want &lt;code&gt;CR&lt;/code&gt; instead. Only matters for &lt;b&gt;troff&lt;/b&gt; output.</source>
          <target state="translated">逐語的テキストとコードに使用する固定幅フォント。デフォルトは &lt;code&gt;CW&lt;/code&gt; です。一部のシステムでは、代わりに &lt;code&gt;CR&lt;/code&gt; が必要な場合があります。&lt;b&gt;troff&lt;/b&gt;出力にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="4411138b75b6f4d0eb399c58a09f8dac2bce859c" translate="yes" xml:space="preserve">
          <source>The fixed-width font to use for verbatim text and code. Defaults to &lt;code&gt;CW&lt;/code&gt; . Some systems may want &lt;code&gt;CR&lt;/code&gt; instead. Only matters for troff(1) output.</source>
          <target state="translated">逐語的テキストとコードに使用する固定幅フォント。デフォルトは &lt;code&gt;CW&lt;/code&gt; です。一部のシステムでは、代わりに &lt;code&gt;CR&lt;/code&gt; が必要な場合があります。troff（1）の出力にのみ重要です。</target>
        </trans-unit>
        <trans-unit id="e30f3c3943bfb47da6b22d33c6d6f3755c5c4c90" translate="yes" xml:space="preserve">
          <source>The fixed-width font to use for verbatim text and code. Defaults to &lt;code&gt;CW&lt;/code&gt;. Some systems may want &lt;code&gt;CR&lt;/code&gt; instead. Only matters for &lt;b&gt;troff&lt;/b&gt; output.</source>
          <target state="translated">逐語的なテキストとコードに使用する固定幅フォント。デフォルトは &lt;code&gt;CW&lt;/code&gt; です。一部のシステムでは、代わりに &lt;code&gt;CR&lt;/code&gt; が必要になる場合があります。&lt;b&gt;troff&lt;/b&gt;出力にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="0f14452e50daa176a2948e6c80e179269ad7ea89" translate="yes" xml:space="preserve">
          <source>The fixed-width font to use for verbatim text and code. Defaults to &lt;code&gt;CW&lt;/code&gt;. Some systems may want &lt;code&gt;CR&lt;/code&gt; instead. Only matters for troff(1) output.</source>
          <target state="translated">逐語的なテキストとコードに使用する固定幅フォント。デフォルトは &lt;code&gt;CW&lt;/code&gt; です。一部のシステムでは、代わりに &lt;code&gt;CR&lt;/code&gt; が必要になる場合があります。troff（1）出力にのみ関係します。</target>
        </trans-unit>
        <trans-unit id="67ad2fb87b3a3c9138524933b76f13bbb404b147" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;SVs_PADSTALE&lt;/code&gt; is cleared on lexicals each time the &lt;code&gt;my()&lt;/code&gt; is executed, and set on scope exit. This allows the &lt;code&gt;&quot;Variable $x is not available&quot;&lt;/code&gt; warning to be generated in evals, such as</source>
          <target state="translated">フラグ &lt;code&gt;SVs_PADSTALE&lt;/code&gt; は、 &lt;code&gt;my()&lt;/code&gt; が実行されるたびに字句でクリアされ、スコープの終了時に設定されます。これにより、 &lt;code&gt;&quot;Variable $x is not available&quot;&lt;/code&gt; 警告を次のような評価で生成できます。</target>
        </trans-unit>
        <trans-unit id="239752a03e595c22089872230ac5d8660b72070d" translate="yes" xml:space="preserve">
          <source>The flag &lt;code&gt;UNICODE_WARN_ILLEGAL_INTERCHANGE&lt;/code&gt; selects all three of the above WARN flags; and &lt;code&gt;UNICODE_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt; selects all three DISALLOW flags. &lt;code&gt;UNICODE_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt; restricts the allowed inputs to the strict UTF-8 traditionally defined by Unicode. Similarly, &lt;code&gt;UNICODE_WARN_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; and &lt;code&gt;UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; are shortcuts to select the above-Unicode and surrogate flags, but not the non-character ones, as defined in &lt;a href=&quot;https://www.unicode.org/versions/corrigendum9.html&quot;&gt;Unicode Corrigendum #9&lt;/a&gt;. See &lt;a href=&quot;perlunicode#Noncharacter-code-points&quot;&gt;&quot;Noncharacter code points&quot; in perlunicode&lt;/a&gt;.</source>
          <target state="translated">フラグ &lt;code&gt;UNICODE_WARN_ILLEGAL_INTERCHANGE&lt;/code&gt; は、上記の3つのWARNフラグすべてを選択します。そして &lt;code&gt;UNICODE_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt; は、 3つのすべてのDISALLOWフラグを選択します。 &lt;code&gt;UNICODE_DISALLOW_ILLEGAL_INTERCHANGE&lt;/code&gt; は、許可される入力を、Unicodeで従来定義されている厳密なUTF-8に制限します。同様に、 &lt;code&gt;UNICODE_WARN_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; および &lt;code&gt;UNICODE_DISALLOW_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; は、上記を選択するためのショートカットです&lt;a href=&quot;https://www.unicode.org/versions/corrigendum9.html&quot;&gt;-Unicode正誤表＃9で&lt;/a&gt;定義されているように、Unicodeフラグと代理フラグは選択できますが、文字以外のフラグは選択できません。&lt;a href=&quot;perlunicode#Noncharacter-code-points&quot;&gt;perlunicodeの「文字以外のコードポイント」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a5f7fca8c3cfcccf779409e2e759e639d09b18b3" translate="yes" xml:space="preserve">
          <source>The flag SVs_PADSTALE is cleared on lexicals each time the my() is executed, and set on scope exit. This allows the 'Variable $x is not available' warning to be generated in evals, such as</source>
          <target state="translated">SVs_PADSTALE フラグは、my()が実行されるたびにレキシカル上でクリアされ、スコープの終了時に設定されます。これにより、'変数 $x が利用できません' という警告が、次のような evals で生成されるようになります。</target>
        </trans-unit>
        <trans-unit id="f2aaf40e59e4745cf25b943d852f6d075ba40074" translate="yes" xml:space="preserve">
          <source>The flags &lt;code&gt;UTF8_WARN_ILLEGAL_INTERCHANGE&lt;/code&gt;, &lt;code&gt;UTF8_WARN_ILLEGAL_C9_INTERCHANGE&lt;/code&gt;, &lt;code&gt;UTF8_WARN_SURROGATE&lt;/code&gt;, &lt;code&gt;UTF8_WARN_NONCHAR&lt;/code&gt;, and &lt;code&gt;UTF8_WARN_SUPER&lt;/code&gt; will cause warning messages to be raised for their respective categories, but otherwise the code points are considered valid (not malformations). To get a category to both be treated as a malformation and raise a warning, specify both the WARN and DISALLOW flags. (But note that warnings are not raised if lexically disabled nor if &lt;code&gt;UTF8_CHECK_ONLY&lt;/code&gt; is also specified.)</source>
          <target state="translated">フラグ &lt;code&gt;UTF8_WARN_ILLEGAL_INTERCHANGE&lt;/code&gt; 、 &lt;code&gt;UTF8_WARN_ILLEGAL_C9_INTERCHANGE&lt;/code&gt; 、 &lt;code&gt;UTF8_WARN_SURROGATE&lt;/code&gt; 、 &lt;code&gt;UTF8_WARN_NONCHAR&lt;/code&gt; 、および &lt;code&gt;UTF8_WARN_SUPER&lt;/code&gt; により、それぞれのカテゴリに対して警告メッセージが生成されますが、それ以外の場合、コードポイントは有効と見なされます（奇形ではありません）。カテゴリを奇形として扱い、警告を出すには、WARNフラグとDISALLOWフラグの両方を指定します。 （ただし、字句が無効になっている場合や、 &lt;code&gt;UTF8_CHECK_ONLY&lt;/code&gt; も指定されている場合は、警告は表示されないことに注意してください。）</target>
        </trans-unit>
        <trans-unit id="b78429f471bd064af1845edc82bca0aa6e6778ce" translate="yes" xml:space="preserve">
          <source>The flags UTF8_WARN_ILLEGAL_INTERCHANGE, UTF8_WARN_SURROGATE, UTF8_WARN_NONCHAR, and UTF8_WARN_SUPER will cause warning messages to be raised for their respective categories, but otherwise the code points are considered valid (not malformations). To get a category to both be treated as a malformation and raise a warning, specify both the WARN and DISALLOW flags. (But note that warnings are not raised if lexically disabled nor if UTF8_CHECK_ONLY is also specified.)</source>
          <target state="translated">UTF8_WARN_ILLEGAL_INTERCHANGE ・ UTF8_WARN_SURROGATE ・ UTF8_WARN_NONCHAR ・ UTF8_WARN_SUPER フラグは、それぞれのカテゴリに対して警告メッセージを発生させますが、それ以外の場合はコードポイントは有効とみなされます (不正ではありません)。カテゴリを奇形として扱うと同時に警告を発生させるには、WARN と DISALLOW フラグの両方を指定します(ただし、警告は奇形ではないことに注意してください)。(ただし、語彙的に無効化されている場合や、UTF8_CHECK_ONLYも指定されている場合は警告は発生しないことに注意してください)。</target>
        </trans-unit>
        <trans-unit id="5e9a6e0acd0b69b277831006219122b07719e738" translate="yes" xml:space="preserve">
          <source>The flags default to zero, if you want something different you can either use &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;$POSIX::SigRt::SIGACTION_FLAGS&lt;/code&gt; , or you can derive from POSIX::SigRt and define your own &lt;code&gt;new()&lt;/code&gt; (the tied hash STORE method of the &lt;code&gt;%SIGRT&lt;/code&gt; calls &lt;code&gt;new($rtsig, $handler, $SIGACTION_FLAGS)&lt;/code&gt; , where the &lt;code&gt;$rtsig&lt;/code&gt; ranges from zero to &lt;code&gt;SIGRTMAX - SIGRTMIN + 1)&lt;/code&gt; .</source>
          <target state="translated">フラグをゼロにデフォルト、あなたが別の何かをしたい場合は、いずれかを使用することができます &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 上 &lt;code&gt;$POSIX::SigRt::SIGACTION_FLAGS&lt;/code&gt; 、またはあなたがPOSIX :: SigRtから派生し、独自に定義することができます &lt;code&gt;new()&lt;/code&gt; の（結ばハッシュSTORE方法 &lt;code&gt;%SIGRT&lt;/code&gt; は &lt;code&gt;new($rtsig, $handler, $SIGACTION_FLAGS)&lt;/code&gt; &lt;code&gt;$rtsig&lt;/code&gt; ます。ここで、$ rtsigの範囲はゼロから &lt;code&gt;SIGRTMAX - SIGRTMIN + 1)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="723ee765d373688ffd88695151d122551f3cfc41" translate="yes" xml:space="preserve">
          <source>The flags default to zero, if you want something different you can either use &lt;code&gt;local&lt;/code&gt; on &lt;code&gt;$POSIX::SigRt::SIGACTION_FLAGS&lt;/code&gt;, or you can derive from POSIX::SigRt and define your own &lt;code&gt;new()&lt;/code&gt; (the tied hash STORE method of the &lt;code&gt;%SIGRT&lt;/code&gt; calls &lt;code&gt;new($rtsig, $handler, $SIGACTION_FLAGS)&lt;/code&gt;, where the &lt;code&gt;$rtsig&lt;/code&gt; ranges from zero to &lt;code&gt;SIGRTMAX - SIGRTMIN + 1)&lt;/code&gt;.</source>
          <target state="translated">フラグのデフォルトはゼロです。何か別のものが必要な場合は、 &lt;code&gt;$POSIX::SigRt::SIGACTION_FLAGS&lt;/code&gt; で &lt;code&gt;local&lt;/code&gt; を使用するか、POSIX :: SigRtから派生して独自の &lt;code&gt;new()&lt;/code&gt; を定義できます（のタイハッシュSTOREメソッド &lt;code&gt;%SIGRT&lt;/code&gt; は &lt;code&gt;new($rtsig, $handler, $SIGACTION_FLAGS)&lt;/code&gt; &lt;code&gt;$rtsig&lt;/code&gt; ます。ここで、$ rtsigの範囲はゼロから &lt;code&gt;SIGRTMAX - SIGRTMIN + 1)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d13aa1a177f443868b50bc938e7eaafe94399ebc" translate="yes" xml:space="preserve">
          <source>The flags parameter is mandatory. The valid flag values are R_CURSOR, R_FIRST, R_LAST, R_NEXT and R_PREV.</source>
          <target state="translated">flagsパラメータは必須です。有効なフラグ値は R_CURSOR,R_FIRST,R_LAST,R_NEXT,R_PREV です。</target>
        </trans-unit>
        <trans-unit id="3f1710e98626f16d762b28b22c17439d043e302f" translate="yes" xml:space="preserve">
          <source>The flags specify dictionary order and case folding:</source>
          <target state="translated">フラグは、辞書の順番と大文字小文字の折り返しを指定します。</target>
        </trans-unit>
        <trans-unit id="10543ef8424f431d7ff14981f10f88f0c585ac15" translate="yes" xml:space="preserve">
          <source>The flavor</source>
          <target state="translated">味わい</target>
        </trans-unit>
        <trans-unit id="0aa322e2f3acfe06e30a26fc0d60aa65599ac7cd" translate="yes" xml:space="preserve">
          <source>The floating point infinity can be exported as a subroutine Inf():</source>
          <target state="translated">浮動小数点無限大はサブルーチンInf()として書き出すことができます。</target>
        </trans-unit>
        <trans-unit id="b219578f1fed53f8498341e6252dcc91a786ab6d" translate="yes" xml:space="preserve">
          <source>The floating point number is taken and split first on the single decimal place, then each group of three digits to the right of the decimal makes up the next digit, and so on until the number of significant digits is exhausted, &lt;b&gt;plus&lt;/b&gt; enough trailing zeros to reach the next multiple of three.</source>
          <target state="translated">浮動小数点数を取り、単一小数点場所に最初に分割され、次いで、小数点の右側に3桁の各グループは、次の桁を構成し、したがって有効数字の数が使い果たされるまでに&lt;b&gt;プラス&lt;/b&gt;十分後続ゼロに3の次の倍数に到達します。</target>
        </trans-unit>
        <trans-unit id="2e5e2b0312afcc71cd5da99161e1d75eaff20f77" translate="yes" xml:space="preserve">
          <source>The focus is on elements of style which are visible to the users of a module, rather than those parts which are only seen by the module's developers. However, many of the guidelines presented in this document can be extrapolated and applied successfully to a module's internals.</source>
          <target state="translated">モジュールの開発者にしか見えない部分よりも、モジュールのユーザに見えるスタイルの要素に焦点を当てています。しかし、このドキュメントで提示されたガイドラインの多くは、モジュールの内部に外挿してうまく適用することができます。</target>
        </trans-unit>
        <trans-unit id="9981cb315250daca0797ec1ef39fd43f6c6f6a86" translate="yes" xml:space="preserve">
          <source>The following &quot;public&quot; global names can be read by clients of this API. Beware that these should be considered &quot;readonly&quot;.</source>
          <target state="translated">以下の &quot;パブリック &quot;グローバル名は、このAPIのクライアントが読み取ることができます。これらは &quot;readonly&quot; と見なされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="20617679e0f828efd3412a47a9694c121128bc85" translate="yes" xml:space="preserve">
          <source>The following &quot;virtual&quot; methods can be defined by the client. They will be called by the API at appropriate points. Note that unless specified otherwise, the debug API only defines empty, non-functional default versions of these methods.</source>
          <target state="translated">以下の「仮想的な」メソッドは、クライアントによって定義することができます。これらのメソッドは、適切な場所で API によって呼び出されます。特に指定がない限り、デバッグ API はこれらのメソッドの空の非機能的なデフォルトバージョンのみを定義することに注意してください。</target>
        </trans-unit>
        <trans-unit id="74f1711fbc30180876f2a4788abe7e66574474a6" translate="yes" xml:space="preserve">
          <source>The following (inefficiently) deletes all the values of %HASH and @ARRAY:</source>
          <target state="translated">以下は (非効率的に)%HASH と @ARRAY のすべての値を削除します。</target>
        </trans-unit>
        <trans-unit id="d00c5dd059bf93f0972cfd4b44a56b57fd0caf81" translate="yes" xml:space="preserve">
          <source>The following API list contains functions, thus one needs to provide pointers to the modifiable data explicitly (either C pointers, or Perlish &lt;code&gt;GV *&lt;/code&gt; s). Where the above macros take &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt;, a similar function takes &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; *&lt;/code&gt; .</source>
          <target state="translated">次のAPIリストには関数が含まれているため、変更可能なデータへのポインターを明示的に提供する必要があります（CポインターまたはPerlish &lt;code&gt;GV *&lt;/code&gt; のいずれか）。上記のマクロが &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; を取る場合、同様の関数は &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; *&lt;/code&gt; を取ります。</target>
        </trans-unit>
        <trans-unit id="d7722c25bc63a475d0687db360090ccce2f038b0" translate="yes" xml:space="preserve">
          <source>The following API list contains functions, thus one needs to provide pointers to the modifiable data explicitly (either C pointers, or Perlish &lt;code&gt;GV *&lt;/code&gt;s). Where the above macros take &lt;code&gt;int&lt;/code&gt;, a similar function takes &lt;code&gt;int *&lt;/code&gt;.</source>
          <target state="translated">次のAPIリストには関数が含まれているため、変更可能なデータへのポインターを明示的に提供する必要があります（CポインターまたはPerlish &lt;code&gt;GV *&lt;/code&gt; sのいずれか）。上記のマクロが &lt;code&gt;int&lt;/code&gt; を取る場合、同様の関数は &lt;code&gt;int *&lt;/code&gt; を取ります。</target>
        </trans-unit>
        <trans-unit id="b1909e3498aef1b158b54d7174bc50b2ee9e5d97" translate="yes" xml:space="preserve">
          <source>The following API uses parts of Perl's internals in the current implementation. As such, they are efficient but may change in a future release.</source>
          <target state="translated">以下のAPIは、現在の実装ではPerlの内部の一部を使用しています。このように、これらは効率的ですが、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a57e29ab087cd96e1aaf0f9eb948df8f4a4939a" translate="yes" xml:space="preserve">
          <source>The following CVE reports were previously filed against File-Path and are believed to have been addressed:</source>
          <target state="translated">以下の CVE レポートは File-Path に対して以前に提出されたもので、対処されていると考えられます。</target>
        </trans-unit>
        <trans-unit id="36cab3979d794d7afb5425a45a32e9d6f7ad6a57" translate="yes" xml:space="preserve">
          <source>The following NNTP command are unsupported by the package, and there are no plans to do so.</source>
          <target state="translated">以下のNNTPコマンドはパッケージではサポートされておらず、その予定はありません。</target>
        </trans-unit>
        <trans-unit id="2d9e72c95e25f90c1fd2f371c21c4c0499d49748" translate="yes" xml:space="preserve">
          <source>The following RFC959 commands have not been implemented:</source>
          <target state="translated">以下のRFC959コマンドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="8ed1bcda5c1f977c3cd2bdcf823f30eee9e9931d" translate="yes" xml:space="preserve">
          <source>The following SDK and compiler configurations and Nokia phones were tested at some point in time (+ = compiled and PerlApp run, - = not), both for Perl 5.8.x and 5.9.x:</source>
          <target state="translated">以下のSDKとコンパイラの構成とNokiaの携帯電話は、Perl 5.8.xと5.9.xの両方で、ある時点でテストされました(+=コンパイルされてPerlAppが実行されている、-=実行されていない)。</target>
        </trans-unit>
        <trans-unit id="237479489ace35ae45dfd88db2279ca4abed31a5" translate="yes" xml:space="preserve">
          <source>The following VMS-specific information applies to the indicated &quot;special&quot; Perl variables, in addition to the general information in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;. Where there is a conflict, this information takes precedence.</source>
          <target state="translated">以下のVMS固有の情報は、&lt;a href=&quot;perlvar&quot;&gt;perlvarの&lt;/a&gt;一般情報に加えて、示された「特別な」Perl変数に適用されます。矛盾がある場合、この情報が優先されます。</target>
        </trans-unit>
        <trans-unit id="a7dd0dcb80676e8669cc8ad178e5203d579a6cf3" translate="yes" xml:space="preserve">
          <source>The following Win32-Methods are built-in:</source>
          <target state="translated">以下のWin32-Methodsが組み込まれています。</target>
        </trans-unit>
        <trans-unit id="1c76188e19e8645c61f6a21008485b728f914f68" translate="yes" xml:space="preserve">
          <source>The following XS code shows the getnetconfigent() function which is used with ONC+ TIRPC. The getnetconfigent() function will return a pointer to a C structure and has the C prototype shown below. The example will demonstrate how the C pointer will become a Perl reference. Perl will consider this reference to be a pointer to a blessed object and will attempt to call a destructor for the object. A destructor will be provided in the XS source to free the memory used by getnetconfigent(). Destructors in XS can be created by specifying an XSUB function whose name ends with the word &lt;b&gt;DESTROY&lt;/b&gt;. XS destructors can be used to free memory which may have been malloc'd by another XSUB.</source>
          <target state="translated">次のXSコードは、ONC + TIRPCで使用されるgetnetconfigent（）関数を示しています。 getnetconfigent（）関数は、C構造体へのポインターを返し、以下に示すCプロトタイプを持っています。この例では、CポインターがPerl参照になる方法を示します。 Perlはこの参照を祝福されたオブジェクトへのポインタと見なし、オブジェクトのデストラクタを呼び出そうとします。 getnetconfigent（）が使用していたメモリを解放するために、XSソースにデストラクタが提供されます。 XSのデストラクタは、名前が&lt;b&gt;DESTROYで&lt;/b&gt;終わるXSUB関数を指定することで作成できます。 XSデストラクタを使用して、別のXSUBによってmallocされた可能性のあるメモリを解放できます。</target>
        </trans-unit>
        <trans-unit id="63aaf3d4311946370f948fe1a874ef3b8b5e106b" translate="yes" xml:space="preserve">
          <source>The following XS file shows an XS subroutine, or XSUB, which demonstrates one possible interface to the rpcb_gettime() function. This XSUB represents a direct translation between C and Perl and so preserves the interface even from Perl. This XSUB will be invoked from Perl with the usage shown above. Note that the first three #include statements, for &lt;code&gt;EXTERN.h&lt;/code&gt; , &lt;code&gt;perl.h&lt;/code&gt; , and &lt;code&gt;XSUB.h&lt;/code&gt; , will always be present at the beginning of an XS file. This approach and others will be expanded later in this document. A #define for &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; should be present to fetch the interpreter context more efficiently, see &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt; for details.</source>
          <target state="translated">次のXSファイルは、rpcb_gettime（）関数への1つの可能なインターフェースを示すXSサブルーチンまたはXSUBを示しています。このXSUBは、CとPerl間の直接変換を表すため、Perlからのインターフェースも保持します。このXSUBは、上記の使用方法でPerlから呼び出されます。 &lt;code&gt;EXTERN.h&lt;/code&gt; 、 &lt;code&gt;perl.h&lt;/code&gt; 、および &lt;code&gt;XSUB.h&lt;/code&gt; の最初の3つの#includeステートメントは、XSファイルの先頭に常に存在することに注意してください。このアプローチなどは、このドキュメントの後半で拡張されます。インタプリタコンテキストをより効率的にフェッチするには、 &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; の#define が存在する必要があります。詳細については&lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d04933d03d9fe0141ffb2c1060f6f198f4e41d2" translate="yes" xml:space="preserve">
          <source>The following XS file shows an XS subroutine, or XSUB, which demonstrates one possible interface to the rpcb_gettime() function. This XSUB represents a direct translation between C and Perl and so preserves the interface even from Perl. This XSUB will be invoked from Perl with the usage shown above. Note that the first three #include statements, for &lt;code&gt;EXTERN.h&lt;/code&gt;, &lt;code&gt;perl.h&lt;/code&gt;, and &lt;code&gt;XSUB.h&lt;/code&gt;, will always be present at the beginning of an XS file. This approach and others will be expanded later in this document. A #define for &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; should be present to fetch the interpreter context more efficiently, see &lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt; for details.</source>
          <target state="translated">次のXSファイルは、rpcb_gettime（）関数への1つの可能なインターフェイスを示すXSサブルーチン（XSUB）を示しています。このXSUBは、CとPerlの間の直接変換を表すため、Perlからでもインターフェースを保持します。このXSUBは、上記の使用法でPerlから呼び出されます。 &lt;code&gt;EXTERN.h&lt;/code&gt; 、 &lt;code&gt;perl.h&lt;/code&gt; 、および &lt;code&gt;XSUB.h&lt;/code&gt; の最初の3つの#includeステートメントは、常にXSファイルの先頭に存在することに注意してください。このアプローチおよびその他のアプローチは、このドキュメントの後半で拡張されます。インタープリターコンテキストをより効率的にフェッチするには、 &lt;code&gt;PERL_NO_GET_CONTEXT&lt;/code&gt; の#defineを指定する必要があります。詳細については、&lt;a href=&quot;perlguts#How-multiple-interpreters-and-concurrency-are-supported&quot;&gt;perlguts&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a47250eb8cd4ed87f2a860c613d9258f03e5ab61" translate="yes" xml:space="preserve">
          <source>The following XSUB allows a Perl program to access a C library function called sin(). The XSUB will imitate the C function which takes a single argument and returns a single value.</source>
          <target state="translated">以下の XSUB は、Perl プログラムが sin()と呼ばれる C ライブラリ関数にアクセスできるようにします。このXSUBは,引数を1つ取り,値を1つ返すC言語の関数を模倣しています.</target>
        </trans-unit>
        <trans-unit id="71f3a3c3ea9ed7f75901c1ba18beceaf1cdd2fef" translate="yes" xml:space="preserve">
          <source>The following XSUB is for a C function which requires special handling of its parameters. The Perl usage is given first.</source>
          <target state="translated">以下のXSUBは、パラメータの特別な処理を必要とするC関数のためのものです。Perlの使用法を先に示します。</target>
        </trans-unit>
        <trans-unit id="4f90e96487752832ff267e1d1e37b8167fdf3f66" translate="yes" xml:space="preserve">
          <source>The following XSUB uses the &lt;code&gt;SV *&lt;/code&gt; return type as a mnemonic only, and uses a CODE: block to indicate to the compiler that the programmer has supplied all the necessary code. The sv_newmortal() call will initialize the return value to undef, making that the default return value.</source>
          <target state="translated">次のXSUBは、 &lt;code&gt;SV *&lt;/code&gt; 戻り型をニーモニックとしてのみ使用し、CODE：ブロックを使用して、プログラマーが必要なすべてのコードを提供したことをコンパイラーに示します。sv_newmortal（）呼び出しは戻り値をundefに初期化し、それをデフォルトの戻り値にします。</target>
        </trans-unit>
        <trans-unit id="a1bc7555b268b447bf525bbb361d23e74ba70916" translate="yes" xml:space="preserve">
          <source>The following XSUB will call the C rpcb_gettime() function and will return its two output values, timep and status, to Perl as a single list.</source>
          <target state="translated">以下の XSUB は C の rpcb_gettime()関数を呼び出し、その 2 つの出力値である timep と status を 1 つのリストとして Perl に返します。</target>
        </trans-unit>
        <trans-unit id="a13ba96373d895202485d58b843fc94572bbb6f9" translate="yes" xml:space="preserve">
          <source>The following XSUB will generate incorrect C code. The &lt;b&gt;xsubpp&lt;/b&gt; compiler will turn this into code which calls &lt;code&gt;rpcb_gettime()&lt;/code&gt; with parameters &lt;code&gt;(char
*host, time_t timep)&lt;/code&gt; , but the real &lt;code&gt;rpcb_gettime()&lt;/code&gt; wants the &lt;code&gt;timep&lt;/code&gt; parameter to be of type &lt;code&gt;time_t*&lt;/code&gt; rather than &lt;code&gt;time_t&lt;/code&gt; .</source>
          <target state="translated">次のXSUBは不正なCコードを生成します。&lt;b&gt;xsubppの&lt;/b&gt;コンパイラが呼び出すコードにこれを向けるだろう &lt;code&gt;rpcb_gettime()&lt;/code&gt; パラメータを持つ &lt;code&gt;(char *host, time_t timep)&lt;/code&gt; 、本当 &lt;code&gt;rpcb_gettime()&lt;/code&gt; 欲しい &lt;code&gt;timep&lt;/code&gt; にはパラメータが型であることが &lt;code&gt;time_t*&lt;/code&gt; ではなく、 &lt;code&gt;time_t&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="4d8ca7ce02dc17e5f491e4977939dfb34745c228" translate="yes" xml:space="preserve">
          <source>The following XSUB will generate incorrect C code. The &lt;b&gt;xsubpp&lt;/b&gt; compiler will turn this into code which calls &lt;code&gt;rpcb_gettime()&lt;/code&gt; with parameters &lt;code&gt;(char *host, time_t timep)&lt;/code&gt;, but the real &lt;code&gt;rpcb_gettime()&lt;/code&gt; wants the &lt;code&gt;timep&lt;/code&gt; parameter to be of type &lt;code&gt;time_t*&lt;/code&gt; rather than &lt;code&gt;time_t&lt;/code&gt;.</source>
          <target state="translated">次のXSUBは、誤ったCコードを生成します。&lt;b&gt;xsubppの&lt;/b&gt;コンパイラが呼び出すコードにこれを向けるだろう &lt;code&gt;rpcb_gettime()&lt;/code&gt; パラメータを持つ &lt;code&gt;(char *host, time_t timep)&lt;/code&gt; 、本当 &lt;code&gt;rpcb_gettime()&lt;/code&gt; 欲しい &lt;code&gt;timep&lt;/code&gt; にはパラメータが型であることが &lt;code&gt;time_t*&lt;/code&gt; ではなく、 &lt;code&gt;time_t&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="72e3e7ea3cadf3d440df4d4dd029f14c329e3532" translate="yes" xml:space="preserve">
          <source>The following are Win32 multilanguage editor/IDEs that support Perl:</source>
          <target state="translated">以下はPerlをサポートするWin32の多言語エディタ/IDEです。</target>
        </trans-unit>
        <trans-unit id="878ebe02234cd6605f8faf412927071c9b53a803" translate="yes" xml:space="preserve">
          <source>The following are additions that have been requested, but I have been reluctant to add due to them being very simple to implement in perl</source>
          <target state="translated">以下はリクエストのあった追加機能ですが、Perl での実装が非常に簡単なため、私は追加には消極的でした。</target>
        </trans-unit>
        <trans-unit id="f30d9daa89e8ddd37f1202a1d64d4bf0b2c5e1f9" translate="yes" xml:space="preserve">
          <source>The following are all accessor methods -- that is, they don't do anything on their own, but just alter the contents of the conversion object, which comprises the options for this particular batch conversion.</source>
          <target state="translated">つまり,それらはそれ自体では何もしませんが,この特定のバッチ変換のためのオプションを構成する変換オブジェクトの内容を変更するだけです。</target>
        </trans-unit>
        <trans-unit id="cd4d07e071310dab311d4b0da4565a6a9fb7c1f6" translate="yes" xml:space="preserve">
          <source>The following are also defined by POSIX/SUSv3, but unfortunately not very widely implemented:</source>
          <target state="translated">以下もPOSIX/SUSv3で定義されていますが、残念ながらあまり広く実装されていません。</target>
        </trans-unit>
        <trans-unit id="5b36027844e4806a69f430d629440d5e7ecab300" translate="yes" xml:space="preserve">
          <source>The following are common causes of compilation and/or execution failures, not common to Perl as such. The C FAQ is good bedtime reading. Please test your changes with as many C compilers and platforms as possible; we will, anyway, and it's nice to save oneself from public embarrassment.</source>
          <target state="translated">以下はコンパイルおよび/または実行の失敗の一般的な原因ですが、Perlには一般的ではありません。C FAQは寝る前に読んでおくと良いでしょう。できるだけ多くの C コンパイラやプラットフォームで変更点をテストしてください。</target>
        </trans-unit>
        <trans-unit id="e2853c6c7f110e3e4c7ed324a99e91a718ca2300" translate="yes" xml:space="preserve">
          <source>The following are exported:</source>
          <target state="translated">以下のようにエクスポートされています。</target>
        </trans-unit>
        <trans-unit id="7791b6ab4309dfc3ea821f7f1d4091cb49b39854" translate="yes" xml:space="preserve">
          <source>The following are fast conversions from ISO 8859-1 (Latin-1) bytes to UTF-8 bytes and back, the code works even with older Perl 5 versions.</source>
          <target state="translated">以下は、ISO 8859-1 (Latin-1)バイトから UTF-8 バイトへの高速変換です。</target>
        </trans-unit>
        <trans-unit id="c852e811877cc6e9c98b0f2d5fb593ccfc901a95" translate="yes" xml:space="preserve">
          <source>The following are methods in the DB base class. A client must access these methods by inheritance (*not* by calling them directly), since the API keeps track of clients through the inheritance mechanism.</source>
          <target state="translated">以下は DB 基底クラスのメソッドです。クライアントはこれらのメソッドに継承によってアクセスしなければなりません (*直接呼び出してはいけません*)。</target>
        </trans-unit>
        <trans-unit id="10865635be3faf44cc57e9f25634d2220e52c67d" translate="yes" xml:space="preserve">
          <source>The following are such interfaces. Also, see &lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;&quot;The &quot;Unicode Bug&quot;&quot;&lt;/a&gt;. For all of these interfaces Perl currently (as of v5.16.0) simply assumes byte strings both as arguments and results, or UTF-8 strings if the (deprecated) &lt;code&gt;encoding&lt;/code&gt; pragma has been used.</source>
          <target state="translated">以下はそのようなインターフェースです。また、&lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;「「Unicodeバグ」」&lt;/a&gt;も参照してください。これらすべてのインターフェースについて、Perlは現在（v5.16.0以降）、引数と結果の両方としてバイト文字列、または（非推奨の） &lt;code&gt;encoding&lt;/code&gt; プラグマが使用されている場合はUTF-8文字列を想定しています。</target>
        </trans-unit>
        <trans-unit id="2b3c274cc89ec17e7b845a436f38d1540dbbe5c4" translate="yes" xml:space="preserve">
          <source>The following are such interfaces. Also, see &lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;The Unicode Bug&lt;/a&gt;. For all of these interfaces Perl currently (as of v5.16.0) simply assumes byte strings both as arguments and results, or UTF-8 strings if the (deprecated) &lt;code&gt;encoding&lt;/code&gt; pragma has been used.</source>
          <target state="translated">以下はそのようなインターフェースです。また、&lt;a href=&quot;#The-%22Unicode-Bug%22&quot;&gt;Unicode Bugも&lt;/a&gt;参照してください。これらすべてのインターフェースについて、Perlは現在（v5.16.0以降）引数と結果の両方としてバイト文字列、または（非推奨の） &lt;code&gt;encoding&lt;/code&gt; プラグマが使用されている場合はUTF-8文字列を想定しています。</target>
        </trans-unit>
        <trans-unit id="5bd9bb59d1e1fb0197ed7d9b93043408c8c9a510" translate="yes" xml:space="preserve">
          <source>The following are the built-in attributes for subroutines:</source>
          <target state="translated">サブルーチンに組み込まれている属性は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e8e3f6674cdb74d0958b2c8c99d763306f790276" translate="yes" xml:space="preserve">
          <source>The following are the built-in attributes for variables:</source>
          <target state="translated">変数の組み込み属性は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ff4fdef880964ea16866f7dda3f218be964bbbac" translate="yes" xml:space="preserve">
          <source>The following are unsupported due to the lack of mapping data.</source>
          <target state="translated">以下はマッピングデータがないため未対応です。</target>
        </trans-unit>
        <trans-unit id="9d2f2e3af66effdb52e3d7832a18951cdcafd9d0" translate="yes" xml:space="preserve">
          <source>The following are valid ($t1 and $t2 are Time::Piece objects):</source>
          <target state="translated">以下が有効です($t1と$t2はTime::Pieceオブジェクト)。</target>
        </trans-unit>
        <trans-unit id="cbc24e337c1d628f49530f574e24235d24a7392e" translate="yes" xml:space="preserve">
          <source>The following article by Sean M. Burke and Jordan Lachler first appeared in</source>
          <target state="translated">Sean M.BurkeとJordan Lachlerによる以下の記事が最初に掲載されました。</target>
        </trans-unit>
        <trans-unit id="5045c4560d45f5e572e375de5ca429c353310df0" translate="yes" xml:space="preserve">
          <source>The following assume that the error has been copied into a separate scalar:</source>
          <target state="translated">以下は、エラーが別のスカラにコピーされたと仮定しています。</target>
        </trans-unit>
        <trans-unit id="f353aa81f91d6dfefc37a9410a376bf8429ba4d4" translate="yes" xml:space="preserve">
          <source>The following attributes may be specified as arguments to WriteMakefile() or as NAME=VALUE pairs on the command line. Attributes that became available with later versions of MakeMaker are indicated.</source>
          <target state="translated">以下の属性は、WriteMakefile()の引数として、またはコマンドラインで NAME=VALUE のペアとして指定することができます。MakeMaker の後のバージョンで利用可能になった属性を示しています。</target>
        </trans-unit>
        <trans-unit id="b84f68ccf7654a835d7d4e99c76422bf128a4813" translate="yes" xml:space="preserve">
          <source>The following blocks are more or less equivalent:</source>
          <target state="translated">以下のブロックは多かれ少なかれ同等である。</target>
        </trans-unit>
        <trans-unit id="8676339e37a5a253bdb0cffb28423c7698d023a0" translate="yes" xml:space="preserve">
          <source>The following boolean methods are useful in determining the</source>
          <target state="translated">を決定する際には、以下のブーリアンメソッドが便利です。</target>
        </trans-unit>
        <trans-unit id="b20d8378cbbcad7ea8e16d1f3872a95fae060afe" translate="yes" xml:space="preserve">
          <source>The following bzip2 constants are exported by this module</source>
          <target state="translated">以下の bzip2 定数はこのモジュールによってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="f401e4eb4fd748677014cc2aaf006246c60d726e" translate="yes" xml:space="preserve">
          <source>The following checks are currently performed:</source>
          <target state="translated">現在、以下のチェックを行っています。</target>
        </trans-unit>
        <trans-unit id="a62f3d4985ed23dc7ef4b06d5778fb97c9f68862" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to supply initialization code for function parameters. The initialization code is eval'ed within double quotes by the compiler before it is added to the output so anything which should be interpreted literally [mainly &lt;code&gt;$&lt;/code&gt; , &lt;code&gt;@&lt;/code&gt; , or &lt;code&gt;\\&lt;/code&gt; ] must be protected with backslashes. The variables &lt;code&gt;$var&lt;/code&gt; , &lt;code&gt;$arg&lt;/code&gt; , and &lt;code&gt;$type&lt;/code&gt; can be used as in typemaps.</source>
          <target state="translated">次のコードは、関数パラメーターの初期化コードを提供する方法を示しています。初期化コードは、出力に追加される前にコンパイラーによって二重引用符で囲まれて評価されるため、文字どおりに解釈される必要があるもの（主に &lt;code&gt;$&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、または &lt;code&gt;\\&lt;/code&gt; ）はバックスラッシュで保護する必要があります。変数 &lt;code&gt;$var&lt;/code&gt; 、 &lt;code&gt;$arg&lt;/code&gt; 、および &lt;code&gt;$type&lt;/code&gt; は、タイプマップと同じように使用できます。</target>
        </trans-unit>
        <trans-unit id="9746ef7b7145a5c34d6668413bb27b113b96441f" translate="yes" xml:space="preserve">
          <source>The following code demonstrates how to supply initialization code for function parameters. The initialization code is eval'ed within double quotes by the compiler before it is added to the output so anything which should be interpreted literally [mainly &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, or &lt;code&gt;\\&lt;/code&gt;] must be protected with backslashes. The variables &lt;code&gt;$var&lt;/code&gt;, &lt;code&gt;$arg&lt;/code&gt;, and &lt;code&gt;$type&lt;/code&gt; can be used as in typemaps.</source>
          <target state="translated">次のコードは、関数パラメーターの初期化コードを提供する方法を示しています。初期化コードは、出力に追加される前にコンパイラによって二重引用符で囲まれて評価されるため、文字通りに解釈される必要があるもの[主に &lt;code&gt;$&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、または &lt;code&gt;\\&lt;/code&gt; ]はすべて円記号で保護する必要があります。変数 &lt;code&gt;$var&lt;/code&gt; 、 &lt;code&gt;$arg&lt;/code&gt; 、および &lt;code&gt;$type&lt;/code&gt; は、タイプマップの場合と同様に使用できます。</target>
        </trans-unit>
        <trans-unit id="994718a63d0e6e92c9d2b82a651bf83693f2d577" translate="yes" xml:space="preserve">
          <source>The following code opens up an output handle that will convert any output to a hexadecimal dump of the output bytes: for example &quot;A&quot; will be converted to &quot;41&quot; (on ASCII-based machines, on EBCDIC platforms the &quot;A&quot; will become &quot;c1&quot;)</source>
          <target state="translated">次のコードは出力ハンドルを開き、出力を出力バイトの16進数ダンプに変換します:例えば、&quot;A &quot;は &quot;41 &quot;に変換されます(ASCIIベースのマシンでは、EBCDICプラットフォームでは &quot;A &quot;は &quot;c1 &quot;になります)。</target>
        </trans-unit>
        <trans-unit id="b646612d9dad6d0db0d9ef47258da28b3b64f1c7" translate="yes" xml:space="preserve">
          <source>The following code will build up an ASCII string saying &lt;code&gt;'PerlPerlPerl'&lt;/code&gt; . The comments show the string after each step. Note that this code works in the same way on big-endian or little-endian machines.</source>
          <target state="translated">次のコードは、 &lt;code&gt;'PerlPerlPerl'&lt;/code&gt; というASCII文字列を作成します。コメントは、各ステップの後の文字列を示しています。このコードは、ビッグエンディアンまたはリトルエンディアンのマシンで同じように機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="036e8023d85aa6d81194f031f72a68fa7f59b794" translate="yes" xml:space="preserve">
          <source>The following code will build up an ASCII string saying &lt;code&gt;'PerlPerlPerl'&lt;/code&gt;. The comments show the string after each step. Note that this code works in the same way on big-endian or little-endian machines.</source>
          <target state="translated">次のコードは、 &lt;code&gt;'PerlPerlPerl'&lt;/code&gt; というASCII文字列を作成します。コメントには、各ステップの後に文字列が表示されます。このコードは、ビッグエンディアンまたはリトルエンディアンのマシンでも同じように機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="b67a84b8d82f9d95c5a2c0536fda7094ec319c8b" translate="yes" xml:space="preserve">
          <source>The following code works for single-level arrays. It uses a stringwise comparison, and does not distinguish defined versus undefined empty strings. Modify if you have other needs.</source>
          <target state="translated">以下のコードは,シングルレベル配列に対して動作します.これは文字列ごとの比較を使用し、定義された空文字列と未定義の空文字列を区別しません。他の必要性があれば修正してください。</target>
        </trans-unit>
        <trans-unit id="b42ca297dfa48bfb8bd9e9eb19ab8d4d7764f6d5" translate="yes" xml:space="preserve">
          <source>The following collations all make sense and you may meet any of them if you &lt;code&gt;&quot;use locale&quot;&lt;/code&gt; .</source>
          <target state="translated">以下の照合順序はすべて意味があり、 &lt;code&gt;&quot;use locale&quot;&lt;/code&gt; する」場合はどの照合順序にも適合する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0c757c0b2a139bcc3c8432fda1a1f80dbad9e220" translate="yes" xml:space="preserve">
          <source>The following collations all make sense and you may meet any of them if you &lt;code&gt;&quot;use locale&quot;&lt;/code&gt;.</source>
          <target state="translated">以下の照合はすべて意味があり、 &lt;code&gt;&quot;use locale&quot;&lt;/code&gt; する」場合はそれらのいずれかに会う可能性があります。</target>
        </trans-unit>
        <trans-unit id="c5819e2e60b0b7a2348ddc793c274025d6f7880f" translate="yes" xml:space="preserve">
          <source>The following command characters are defined:</source>
          <target state="translated">以下のコマンド文字が定義されています。</target>
        </trans-unit>
        <trans-unit id="94b38038de165a0daa7082711aa19c3a2036cf7d" translate="yes" xml:space="preserve">
          <source>The following command line switches behave differently under VMS than described in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;. Note also that in order to pass uppercase switches to Perl, you need to enclose them in double-quotes on the command line, since the CRTL downcases all unquoted strings.</source>
          <target state="translated">次のコマンドラインスイッチは、VMSでの動作が&lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;で説明されているものとは異なります。大文字のスイッチをPerlに渡すには、CRTLが引用符で囲まれていない文字列をすべて小文字にするため、コマンドラインで二重引用符で囲む必要があることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="52448ab44f7b84ff23c0bb42cd9a8e27687108c1" translate="yes" xml:space="preserve">
          <source>The following command shows how to compute digests for typical inputs such as the NIST test vector &quot;abc&quot;:</source>
          <target state="translated">以下のコマンドは、NISTテストベクタ &quot;abc &quot;のような典型的な入力に対してダイジェストを計算する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ab2ed20fd1e01c9d474d41404b2754af8ec50648" translate="yes" xml:space="preserve">
          <source>The following compilation warnings may happen in HP-UX releases earlier than 11.31 but are harmless:</source>
          <target state="translated">以下のコンパイル警告は、11.31 より前の HP-UX リリースで発生する可能性がありますが、無害です。</target>
        </trans-unit>
        <trans-unit id="3f82c625cf5e705c9b15fb1534c5c11410cab28f" translate="yes" xml:space="preserve">
          <source>The following compiler versions are currently supported by IBM:</source>
          <target state="translated">IBM が現在サポートしているコンパイラのバージョンは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f0ad64f79a84fc4d8e60a250b5c99592e7f5b9c7" translate="yes" xml:space="preserve">
          <source>The following compound statements may be used to control flow:</source>
          <target state="translated">フローを制御するために、以下の複合文を使用することができる。</target>
        </trans-unit>
        <trans-unit id="a4b58da98f934bf4b5cdd1337624b0bd2ba9de07" translate="yes" xml:space="preserve">
          <source>The following compression formats are supported by &lt;code&gt;IO::Compress::Zip&lt;/code&gt; and &lt;code&gt;IO::Uncompress::Unzip&lt;/code&gt;</source>
          <target state="translated">次の圧縮形式は、 &lt;code&gt;IO::Compress::Zip&lt;/code&gt; および &lt;code&gt;IO::Uncompress::Unzip&lt;/code&gt; サポートされています。</target>
        </trans-unit>
        <trans-unit id="cd012592d06772e0ce9bcaaa2cfc233e60576f7d" translate="yes" xml:space="preserve">
          <source>The following constants may be returned by getaddrinfo() or getnameinfo(). Others may be provided by the OS.</source>
          <target state="translated">以下の定数は、getaddrinfo()または getnameinfo()によって返される可能性があります。その他はOSが提供しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="b842779c0173418719ebe5c2a7970e42d7d014a5" translate="yes" xml:space="preserve">
          <source>The following constants may be supplied as $xflags.</source>
          <target state="translated">以下の定数を $xflags として指定することができます。</target>
        </trans-unit>
        <trans-unit id="1be3497b66f11b1f18ed534aa513910c71b80ff0" translate="yes" xml:space="preserve">
          <source>The following debugger is actually useful:</source>
          <target state="translated">実際には以下のようなデバッガが便利です。</target>
        </trans-unit>
        <trans-unit id="becc45c3efb50622f9f813d964b04c0775034a75" translate="yes" xml:space="preserve">
          <source>The following describes</source>
          <target state="translated">次のように記述されています。</target>
        </trans-unit>
        <trans-unit id="c779f6e32c9824a654c3d3bb9768a1c5fd1243ca" translate="yes" xml:space="preserve">
          <source>The following description of methods is still under development. Please refer to the code for not suitably documented sections and complain loudly to the makemaker@perl.org mailing list. Better yet, provide a patch.</source>
          <target state="translated">以下のメソッドの記述はまだ開発中です。ドキュメント化されていない部分についてはコードを参照して、 makemaker@perl.org メーリングリストに大声で文句を言ってください。より良い方法としては、パッチを提供してください。</target>
        </trans-unit>
        <trans-unit id="b3965f0e7b97198aca0dad023bdfa649bc3d7a07" translate="yes" xml:space="preserve">
          <source>The following documentation describes how to use FATAL warnings but the perl5 porters strongly recommend that you understand the risks before doing so, especially for library code intended for use by others, as there is no way for downstream users to change the choice of fatal categories.</source>
          <target state="translated">以下のドキュメントでは FATAL 警告の使用方法を説明していますが、特に他の人が使用することを意図したライブラリコードについては、下流のユーザが致命的なカテゴリの選択を変更する方法がないため、Perl5 移植者は、そうする前にリスクを理解しておくことを強く推奨します。</target>
        </trans-unit>
        <trans-unit id="a7395fbf98116a6fe303ce2ccf2e783d73f2e981" translate="yes" xml:space="preserve">
          <source>The following efficiently counts the number of set bits in a bit vector:</source>
          <target state="translated">以下は、ビットベクトルのセットビット数を効率よくカウントします。</target>
        </trans-unit>
        <trans-unit id="b85e86d2a59836c1bf602fd66fd49161e113bc9d" translate="yes" xml:space="preserve">
          <source>The following encodings are always available.</source>
          <target state="translated">以下のエンコーディングが常に利用可能です。</target>
        </trans-unit>
        <trans-unit id="edb10534c1168ba80ae676bc74fad8ea1b177125" translate="yes" xml:space="preserve">
          <source>The following encodings are not supported as yet; some because they are rarely used, some because of technical difficulties. They may be supported by external modules via CPAN in the future, however.</source>
          <target state="translated">以下のエンコーディングはまだサポートされていません。しかし、将来的にはCPANを介して外部モジュールでサポートされるかもしれません。</target>
        </trans-unit>
        <trans-unit id="2679279cde508d70a24c6c066ec89faf688d0162" translate="yes" xml:space="preserve">
          <source>The following entries are used during installation &amp;amp; testing on the libnet package</source>
          <target state="translated">次のエントリは、libnetパッケージのインストールとテスト中に使用されます</target>
        </trans-unit>
        <trans-unit id="f9b777d6ecffc2871fa8ad1bd878e3ae6a3e84c6" translate="yes" xml:space="preserve">
          <source>The following environment variables are not specific to Perl: They are part of the standardized (ISO C, XPG4, POSIX 1.c) &lt;code&gt;setlocale()&lt;/code&gt; method for controlling an application's opinion on data. Windows is non-POSIX, but Perl arranges for the following to work as described anyway. If the locale given by an environment variable is not valid, Perl tries the next lower one in priority. If none are valid, on Windows, the system default locale is then tried. If all else fails, the &lt;code&gt;&quot;C&quot;&lt;/code&gt; locale is used. If even that doesn't work, something is badly broken, but Perl tries to forge ahead with whatever the locale settings might be.</source>
          <target state="translated">次の環境変数はPerlに固有のものではありません。データに関するアプリケーションの意見を制御するための標準化された（ISO C、XPG4、POSIX 1.c） &lt;code&gt;setlocale()&lt;/code&gt; メソッドの一部です。Windowsは非POSIXですが、Perlは以下のように記述されているように動作するように調整しています。環境変数によって指定されたロケールが有効でない場合、Perlは次に低いロケールを優先的に試みます。有効なものがない場合、Windowsでは、システムのデフォルトロケールが試行されます。他のすべてが失敗した場合、 &lt;code&gt;&quot;C&quot;&lt;/code&gt; ロケールが使用されます。それでもうまくいかない場合は、何かがひどく壊れていますが、Perlはロケール設定が何であれ、何であれ先取りを試みます。</target>
        </trans-unit>
        <trans-unit id="ec33aa555d27541d5a7185de1c1d5ba6a82fafba" translate="yes" xml:space="preserve">
          <source>The following equivalences hold (assuming &lt;code&gt;$#a &amp;gt;= $i&lt;/code&gt; )</source>
          <target state="translated">以下の同値が成立します（ &lt;code&gt;$#a &amp;gt;= $i&lt;/code&gt; 仮定）</target>
        </trans-unit>
        <trans-unit id="85ca43521cd7775d8d33759b4074f5573158c1e6" translate="yes" xml:space="preserve">
          <source>The following error handling mechanism is considered experimental and is subject to change pending feedback from users.</source>
          <target state="translated">以下のエラー処理メカニズムは実験的なものであり、ユーザーからのフィードバックを待って変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="31f04627eff0a8273cc4b4ecad29c912ce9d0e0e" translate="yes" xml:space="preserve">
          <source>The following error handling mechanism is consistent throughout all code paths EXCEPT in cases where the ROOT node is nonexistent. In version 2.11 the maintainers attempted to rectify this inconsistency but too many downstream modules encountered problems. In such case, if you require root node evaluation or error checking prior to calling &lt;code&gt;make_path&lt;/code&gt; or &lt;code&gt;remove_tree&lt;/code&gt;, you should take additional precautions.</source>
          <target state="translated">次のエラー処理メカニズムは、ROOTノードが存在しない場合を除いて、すべてのコードパスで一貫しています。バージョン2.11では、メンテナはこの不整合を修正しようとしましたが、あまりにも多くのダウンストリームモジュールで問題が発生しました。このような場合、 &lt;code&gt;make_path&lt;/code&gt; または &lt;code&gt;remove_tree&lt;/code&gt; を呼び出す前にルートノードの評価またはエラーチェックが必要な場合は、追加の予防措置を講じる必要があります。</target>
        </trans-unit>
        <trans-unit id="cd63c469244aad9fa5f13ff0ec636281c8ddaf6b" translate="yes" xml:space="preserve">
          <source>The following error occurs because of the Cygwin &lt;code&gt;#define&lt;/code&gt; of &lt;code&gt;_LONG_DOUBLE&lt;/code&gt; :</source>
          <target state="translated">次のエラーは、 &lt;code&gt;_LONG_DOUBLE&lt;/code&gt; の Cygwin &lt;code&gt;#define&lt;/code&gt; が原因で発生します。</target>
        </trans-unit>
        <trans-unit id="21e6156937fd6a5960b9a95ea9a5b12a0208719f" translate="yes" xml:space="preserve">
          <source>The following error occurs because of the Cygwin &lt;code&gt;#define&lt;/code&gt; of &lt;code&gt;_LONG_DOUBLE&lt;/code&gt;:</source>
          <target state="translated">以下のエラーは、Cygwinのが原因で発生 &lt;code&gt;#define&lt;/code&gt; の &lt;code&gt;_LONG_DOUBLE&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1c8339d5177634294fee1f0a35f0053c9114caf8" translate="yes" xml:space="preserve">
          <source>The following errors were encountered while parsing the POD:</source>
          <target state="translated">POD の解析中に以下のエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="e6803ff3ff7c0a56cc9e903a6a90daace782e458" translate="yes" xml:space="preserve">
          <source>The following escape sequences are available in constructs that interpolate, and in transliterations whose delimiters aren't single quotes (&lt;code&gt;&quot;'&quot;&lt;/code&gt;).</source>
          <target state="translated">次のエスケープシーケンスは、補間する構造、および区切り文字が一重引用符（ &lt;code&gt;&quot;'&quot;&lt;/code&gt; ）ではない音訳で使用できます。</target>
        </trans-unit>
        <trans-unit id="e111335c40da2391bb6d2b1d90ed4f7cf911e6e5" translate="yes" xml:space="preserve">
          <source>The following escape sequences are available in constructs that interpolate, and in transliterations:</source>
          <target state="translated">以下のエスケープシーケンスは、補間するコンストラクト、および音訳で利用可能です。</target>
        </trans-unit>
        <trans-unit id="82159e16248ad6f2c09cd225ffdcbbf320f234ef" translate="yes" xml:space="preserve">
          <source>The following escape sequences are available in constructs that interpolate, but not in transliterations.</source>
          <target state="translated">以下のエスケープシーケンスは、補間するコンストラクトでは利用できますが、音訳では利用できません。</target>
        </trans-unit>
        <trans-unit id="62d1bc8a7a340748e143b5a954b697a1e9a92d04" translate="yes" xml:space="preserve">
          <source>The following example contains all supported keywords and structures with the exception of &lt;code&gt;eexpect&lt;/code&gt; which can be used instead of &lt;code&gt;expect&lt;/code&gt; .</source>
          <target state="translated">次の例には、 &lt;code&gt;expect&lt;/code&gt; の代わりに使用できる &lt;code&gt;eexpect&lt;/code&gt; を除いて、サポートされているすべてのキーワードと構造が含まれています。</target>
        </trans-unit>
        <trans-unit id="e8665fd8b339dfb9b20108d0f4ac2879711d7bca" translate="yes" xml:space="preserve">
          <source>The following example counts all the possible matching strings in a pattern (without actually matching any of them).</source>
          <target state="translated">以下の例では、パターン内のマッチする可能性のある文字列をすべてカウントしています(実際にはマッチしません)。</target>
        </trans-unit>
        <trans-unit id="b54547ad1ef83c76b354b1c5c3bcd26f7c112217" translate="yes" xml:space="preserve">
          <source>The following example implements a simple daemon, which restarts itself every time the &lt;code&gt;SIGHUP&lt;/code&gt; signal is received. The actual code is located in the subroutine &lt;code&gt;code()&lt;/code&gt; , which just prints some debugging info to show that it works; it should be replaced with the real code.</source>
          <target state="translated">次の例は、 &lt;code&gt;SIGHUP&lt;/code&gt; シグナルを受信するたびに再起動する単純なデーモンを実装しています。実際のコードは、サブルーチン &lt;code&gt;code()&lt;/code&gt; にあります。サブルーチンcode（）は、デバッグ情報を出力して、機能することを示します。実際のコードに置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="72ef6e9fa58ad7d92fd5d070a5b1ff44ddb10726" translate="yes" xml:space="preserve">
          <source>The following example implements a simple daemon, which restarts itself every time the &lt;code&gt;SIGHUP&lt;/code&gt; signal is received. The actual code is located in the subroutine &lt;code&gt;code()&lt;/code&gt;, which just prints some debugging info to show that it works; it should be replaced with the real code.</source>
          <target state="translated">次の例では、 &lt;code&gt;SIGHUP&lt;/code&gt; シグナルを受信するたびに自動的に再起動する単純なデーモンを実装しています。実際のコードはサブルーチン &lt;code&gt;code()&lt;/code&gt; にあり、それが機能することを示すためにデバッグ情報を出力するだけです。実際のコードに置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="4db59d80ee391c290c8e0098f7b4cb5a921d343a" translate="yes" xml:space="preserve">
          <source>The following example shows a variation of the rpcb_gettime() function. This function uses the timep variable only as an output variable and does not care about its initial contents.</source>
          <target state="translated">以下の例は、rpcb_gettime()関数のバリエーションを示しています。この関数は timep 変数を出力変数としてのみ使用し、その初期内容は気にしません。</target>
        </trans-unit>
        <trans-unit id="6e5930c0e8a4086018f7b728e0496b7b5959e325" translate="yes" xml:space="preserve">
          <source>The following example shows how the input parameter &lt;code&gt;timep&lt;/code&gt; can be evaluated late, after a PREINIT.</source>
          <target state="translated">次の例は、PREINITの後、入力パラメーター &lt;code&gt;timep&lt;/code&gt; を遅延して評価する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="f2d336b88b655db564d2a7de7cc37f5570d6138e" translate="yes" xml:space="preserve">
          <source>The following example will create aliases &lt;code&gt;FOO::gettime()&lt;/code&gt; and &lt;code&gt;BAR::getit()&lt;/code&gt; for this function.</source>
          <target state="translated">次の例では、この関数のエイリアス &lt;code&gt;FOO::gettime()&lt;/code&gt; および &lt;code&gt;BAR::getit()&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="97da872b2dd68324aaeb980a55e38dbf65cc1f09" translate="yes" xml:space="preserve">
          <source>The following example will import the &lt;code&gt;langinfo()&lt;/code&gt; function itself and three constants to be used as arguments to &lt;code&gt;langinfo()&lt;/code&gt; : a constant for the abbreviated first day of the week (the numbering starts from Sunday = 1) and two more constants for the affirmative and negative answers for a yes/no question in the current locale.</source>
          <target state="translated">次の例では、インポートされます &lt;code&gt;langinfo()&lt;/code&gt; の引数として使用される機能自体と3つの定数 &lt;code&gt;langinfo()&lt;/code&gt; 週の略称最初の日のための定数（番号は日曜日= 1から始まる）と肯定のための2つの定数。現在のロケールでのはい/いいえの質問に対する否定的な回答。</target>
        </trans-unit>
        <trans-unit id="fa3452b428040cf2c56efc56c05eb14116e2d423" translate="yes" xml:space="preserve">
          <source>The following example will import the &lt;code&gt;langinfo()&lt;/code&gt; function itself and three constants to be used as arguments to &lt;code&gt;langinfo()&lt;/code&gt;: a constant for the abbreviated first day of the week (the numbering starts from Sunday = 1) and two more constants for the affirmative and negative answers for a yes/no question in the current locale.</source>
          <target state="translated">次の例では、インポートされます &lt;code&gt;langinfo()&lt;/code&gt; の引数として使用される機能自体と3つの定数 &lt;code&gt;langinfo()&lt;/code&gt; 週の略称最初の日のための定数（番号は日曜日= 1から始まる）と肯定のための2つの定数。現在のロケールでのはい/いいえの質問に対する否定的な回答。</target>
        </trans-unit>
        <trans-unit id="68fe38084e5e619d96b5a9797595ec407ba06c97" translate="yes" xml:space="preserve">
          <source>The following example will import the langinfo() function itself and three constants to be used as arguments to langinfo(): a constant for the abbreviated first day of the week (the numbering starts from Sunday = 1) and two more constants for the affirmative and negative answers for a yes/no question in the current locale.</source>
          <target state="translated">以下の例では、langinfo()関数自体と langinfo()の引数として使用する 3 つの定数をインポートしています:短縮された週の最初の曜日を表す定数 (日曜日=1 から始まる)と、現在のロケールでの質問の yes/no の肯定・否定の答えを表す 2 つの定数です。</target>
        </trans-unit>
        <trans-unit id="1d1e35923d66b27df87bbd4951c7d28f5e911d07" translate="yes" xml:space="preserve">
          <source>The following example will start the XS code and will place all functions in a package named RPC.</source>
          <target state="translated">以下の例では、XSのコードを開始し、すべての関数をRPCという名前のパッケージに入れます。</target>
        </trans-unit>
        <trans-unit id="dcb1a8c644e732663ae2a1c5ba3b577a1beb1ffa" translate="yes" xml:space="preserve">
          <source>The following examples all demonstrate how &lt;code&gt;reduce&lt;/code&gt; could be used to implement the other list-reduction functions in this module. (They are not in fact implemented like this, but instead in a more efficient manner in individual C functions).</source>
          <target state="translated">以下の例はすべて、 &lt;code&gt;reduce&lt;/code&gt; を使用してこのモジュールの他のリスト削減関数を実装する方法を示しています。（実際にはこのように実装されているのではなく、個々のC関数でより効率的な方法で実装されています）。</target>
        </trans-unit>
        <trans-unit id="887954cfa884d676e908a97b64a1555b23e32dbf" translate="yes" xml:space="preserve">
          <source>The following examples are equivalent, but if the code is using complex typemaps then the first example is safer.</source>
          <target state="translated">以下の例は同等ですが、コードが複雑なタイプマップを使用している場合は、最初の例の方が安全です。</target>
        </trans-unit>
        <trans-unit id="49473e8ccd96036c2dcbbff4100727b567ca00bb" translate="yes" xml:space="preserve">
          <source>The following examples assume</source>
          <target state="translated">以下の例では、以下のように想定しています。</target>
        </trans-unit>
        <trans-unit id="c8963d9d7205dc5eeae0e9a51c29c23916de6bfc" translate="yes" xml:space="preserve">
          <source>The following examples don't attempt to show everything as that would be a monumental task, and, frankly, we don't want this manpage to be an internals document for Perl. The examples do demonstrate some basics of the raw Perl datatypes, and should suffice to get most determined people on their way. There are no guidewires or safety nets, nor blazed trails, so be prepared to travel alone from this point and on and, if at all possible, don't fall into the quicksand (it's bad for business).</source>
          <target state="translated">以下の例では、すべてのものを紹介しようとはしていませんが、それは膨大な作業になるでしょうし、率直に言って、この man ページが Perl の内部文書になることを望んでいません。これらの例は、生のPerlのデータ型のいくつかの基本を示しており、ほとんどの決意のある人が自分の道を歩むのに十分なはずです。ここから先は一人で旅をすることを覚悟し、可能であれば、流砂に落ちないようにしてください(ビジネスに悪影響を及ぼします)。</target>
        </trans-unit>
        <trans-unit id="6687cc4c1adb4921b8b4b2318949d366c6deb7ae" translate="yes" xml:space="preserve">
          <source>The following examples show standard binary, octal, decimal, and hexadecimal conversion. All examples return 250.</source>
          <target state="translated">以下の例では、標準の2進数、8進数、10進数、および16進数の変換を示しています。すべての例は 250 を返します。</target>
        </trans-unit>
        <trans-unit id="f93e6ebc989a84ca950fac6b12d34738b1701d5f" translate="yes" xml:space="preserve">
          <source>The following extension layers are bundled with perl:</source>
          <target state="translated">perlには以下の拡張レイヤがバンドルされています。</target>
        </trans-unit>
        <trans-unit id="162be8fe3d219b0d9c97c2e524d7220d440e0dd3" translate="yes" xml:space="preserve">
          <source>The following extra flags are added:</source>
          <target state="translated">以下の追加フラグが追加されています。</target>
        </trans-unit>
        <trans-unit id="7106b07b78b7a3440b3c0ad4f4323e11abe72903" translate="yes" xml:space="preserve">
          <source>The following extra operations are supported on both real and complex numbers:</source>
          <target state="translated">以下の追加演算は、実数と複素数の両方でサポートされています。</target>
        </trans-unit>
        <trans-unit id="44559e75149012ee5d0aabd7169096ab8b9b70c9" translate="yes" xml:space="preserve">
          <source>The following feature bundles are available:</source>
          <target state="translated">以下の機能をバンドルしています。</target>
        </trans-unit>
        <trans-unit id="bfb5fd7e91227c5f530d75f35f7920db7fa46141" translate="yes" xml:space="preserve">
          <source>The following file is certain to trigger a few errors at both runtime and compiletime:</source>
          <target state="translated">以下のファイルは、実行時とコンパイル時の両方でいくつかのエラーを発生させることになります。</target>
        </trans-unit>
        <trans-unit id="21aca79b002af6c026c59989c512a774a1e9d423" translate="yes" xml:space="preserve">
          <source>The following files were created.</source>
          <target state="translated">以下のファイルを作成しました。</target>
        </trans-unit>
        <trans-unit id="c2d8b9dded738fa01824e3880baab2ed9227058b" translate="yes" xml:space="preserve">
          <source>The following flag constants are recognised as $flags. Other flag constants may exist as provided by the OS.</source>
          <target state="translated">以下のフラグ定数は、$flagsとして認識されます。その他のフラグ定数は、OSによって提供されているものが存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="650acaa8d024a737244b8df389c437c35b54545d" translate="yes" xml:space="preserve">
          <source>The following flag constants are recognised in the $hints hash. Other flag constants may exist as provided by the OS.</source>
          <target state="translated">以下のフラグ定数は$hintsハッシュで認識されます。その他のフラグ定数はOSが提供しているものが存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8b04fa6f897518e44671c43d372c1d8cbb29d5b0" translate="yes" xml:space="preserve">
          <source>The following flag has been added in the Perl implementation for csh compatibility:</source>
          <target state="translated">csh互換性のためにPerlの実装に以下のフラグが追加されました。</target>
        </trans-unit>
        <trans-unit id="50651d66e2238c03eee6171d8e3c138d824ff88d" translate="yes" xml:space="preserve">
          <source>The following flags and properties are for JSON::PP only. If you use any of these, you can't make your application run faster by replacing JSON::PP with JSON::XS. If you need these and also speed boost, you might want to try &lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;Cpanel::JSON::XS&lt;/a&gt;, a fork of JSON::XS by Reini Urban, which supports some of these (with a different set of incompatibilities). Most of these historical flags are only kept for backward compatibility, and should not be used in a new application.</source>
          <target state="translated">次のフラグとプロパティはJSON :: PP専用です。これらのいずれかを使用する場合、JSON :: PPをJSON :: XSに置き換えても、アプリケーションの実行速度を上げることはできません。これらとスピードブーストが必要な場合は、&lt;a href=&quot;Cpanel::JSON::XS&quot;&gt;ReiniUrbanによるJSON :: XS&lt;/a&gt;のフォークであるCpanel :: JSON :: XSを試してみることをお勧めします。これは、これらのいくつかをサポートします（非互換性のセットが異なります）。これらの履歴フラグのほとんどは、下位互換性のためにのみ保持されており、新しいアプリケーションでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="1cd8e3861113caf88d2e286d8b55139fd349b7d0" translate="yes" xml:space="preserve">
          <source>The following flags would be nice to have but they would first need their own Augean stablemaster:</source>
          <target state="translated">次の旗があればいいのですが、まずは自分のアルジェリアの厩務員が必要です。</target>
        </trans-unit>
        <trans-unit id="e731ee95c2996f14c508bcbd1c142f7cd0808c33" translate="yes" xml:space="preserve">
          <source>The following four convenience wrappers may be used to obtain one of the two values returned here. If both host and service names are required, this method is preferable to the following wrappers, because it will call &lt;code&gt;getnameinfo(3)&lt;/code&gt; only once.</source>
          <target state="translated">次の4つの便利なラッパーを使用して、ここで返される2つの値のいずれかを取得できます。ホスト名とサービス名の両方が必要な場合、このメソッドは &lt;code&gt;getnameinfo(3)&lt;/code&gt; を1回だけ呼び出すため、次のラッパーよりも適しています。</target>
        </trans-unit>
        <trans-unit id="9100eb4e02b3634a97be9d3c35013fdbb0474e55" translate="yes" xml:space="preserve">
          <source>The following four files sum up all the details discussed so far.</source>
          <target state="translated">これまでに説明した内容をまとめると、以下の4つのファイルになります。</target>
        </trans-unit>
        <trans-unit id="c34a482a0a61764634c9a647354d1ae932661df4" translate="yes" xml:space="preserve">
          <source>The following function copies a string into an SV whose reference is &lt;code&gt;rv&lt;/code&gt; . Set length to 0 to let Perl calculate the string length. SV is blessed if &lt;code&gt;classname&lt;/code&gt; is non-null.</source>
          <target state="translated">次の関数は、参照が &lt;code&gt;rv&lt;/code&gt; であるSVに文字列をコピーします。Perlに文字列の長さを計算させるには、長さを0に設定します。 &lt;code&gt;classname&lt;/code&gt; がnullでない場合、SVは祝福されます。</target>
        </trans-unit>
        <trans-unit id="d572303a215881dcd48f5b462f35572b6b301a6c" translate="yes" xml:space="preserve">
          <source>The following function copies a string into an SV whose reference is &lt;code&gt;rv&lt;/code&gt;. Set length to 0 to let Perl calculate the string length. SV is blessed if &lt;code&gt;classname&lt;/code&gt; is non-null.</source>
          <target state="translated">次の関数は、参照が &lt;code&gt;rv&lt;/code&gt; であるSVに文字列をコピーします。長さを0に設定して、Perlが文字列の長さを計算できるようにします。 &lt;code&gt;classname&lt;/code&gt; がnull以外の場合、SVは祝福されます。</target>
        </trans-unit>
        <trans-unit id="3c0cf226e396fa1b152052f0820e83e7d855fd95" translate="yes" xml:space="preserve">
          <source>The following function copies the pointer value (</source>
          <target state="translated">次の関数はポインタの値をコピーします(</target>
        </trans-unit>
        <trans-unit id="2e073fa19276cae1009d363a0e5463744a8cdb65" translate="yes" xml:space="preserve">
          <source>The following function is available on Perls built on 64 bit OpenVMS v8.2 with hard links enabled on an ODS-5 formatted build disk. CRTL support is in principle available as of OpenVMS v7.3-1, and better configuration support could detect this.</source>
          <target state="translated">64 ビットの OpenVMS v8.2 でビルドされた Perls で、ODS-5 フォーマットのビルドディスク上でハードリンクを有効にした場合、以下の機能が利用できます。CRTL サポートは OpenVMS v7.3-1 の時点では原則として利用可能であり、より優れた設定サポートによりこれを検出できる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1d791c23038d9fe8780d570ab1f25e41c2c30bfa" translate="yes" xml:space="preserve">
          <source>The following function tests whether the SV is a reference to a blessed object.</source>
          <target state="translated">以下の関数は、SV が祝福されたオブジェクトへの参照であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e97d512753d6d3628f54f7cc67945848127ebcd9" translate="yes" xml:space="preserve">
          <source>The following function tests whether the SV is blessed into the specified class. It does not check inheritance relationships.</source>
          <target state="translated">以下の関数は SV が指定されたクラスに bless されているかどうかをテストします。継承関係のチェックは行いません。</target>
        </trans-unit>
        <trans-unit id="df3aa6043ddcb399a0be1d9f05fb30512b44c0e8" translate="yes" xml:space="preserve">
          <source>The following function tests whether the SV is derived from the specified class. SV can be either a reference to a blessed object or a string containing a class name. This is the function implementing the &lt;code&gt;UNIVERSAL::isa&lt;/code&gt; functionality.</source>
          <target state="translated">次の関数は、SVが指定されたクラスから派生しているかどうかをテストします。SVは、祝福されたオブジェクトへの参照またはクラス名を含む文字列のいずれかです。これは &lt;code&gt;UNIVERSAL::isa&lt;/code&gt; 機能を実装する関数です。</target>
        </trans-unit>
        <trans-unit id="f2556ab0e8df33f1383226a4c6f98cdd750d952a" translate="yes" xml:space="preserve">
          <source>The following function upgrades rv to reference if not already one. Creates a new SV for rv to point to. If &lt;code&gt;classname&lt;/code&gt; is non-null, the SV is blessed into the specified class. SV is returned.</source>
          <target state="translated">次の関数は、rvを参照にアップグレードします（まだ参照していない場合）。rvが指す新しいSVを作成します。 &lt;code&gt;classname&lt;/code&gt; がnullでない場合、SVは指定されたクラスに祝福されます。SVが返されます。</target>
        </trans-unit>
        <trans-unit id="29dc5cc89743cc721a2ee3907403e1585ed5aaa4" translate="yes" xml:space="preserve">
          <source>The following functions</source>
          <target state="translated">以下の機能があります。</target>
        </trans-unit>
        <trans-unit id="d058fd87c96266d5fdc51527ace77cd0d78cdd43" translate="yes" xml:space="preserve">
          <source>The following functions all perform some useful activity on reference values.</source>
          <target state="translated">以下の関数はすべて、参照値に対して何らかの有用な活動を行います。</target>
        </trans-unit>
        <trans-unit id="2911d89162772ba03d36f6973e469a4101bb2cc6" translate="yes" xml:space="preserve">
          <source>The following functions are Perl implementations of the mktemp() family of temp file generation system calls.</source>
          <target state="translated">以下の関数は、一時ファイル生成システムコールのmktemp()ファミリのPerl実装です。</target>
        </trans-unit>
        <trans-unit id="e0a3d6bc866a23a74bfc5cb99a24046225a27424" translate="yes" xml:space="preserve">
          <source>The following functions are available on Perls built on 64 bit OpenVMS v8.2 and later.</source>
          <target state="translated">64bit OpenVMS v8.2以降でビルドされたPerlsでは、以下の機能が利用できます。</target>
        </trans-unit>
        <trans-unit id="c3192aa510cfad4d7ff0a5d49cbe59b87b3bf2ce" translate="yes" xml:space="preserve">
          <source>The following functions are available on Perls built on 64 bit OpenVMS v8.2 and later. CRTL support is in principle available as of OpenVMS v7.3-2, and better configuration support could detect this.</source>
          <target state="translated">64 ビット版 OpenVMS v8.2 以降でビルドされた Perls で以下の機能が利用可能です。CRTL サポートは OpenVMS v7.3-2 の時点では原則として利用可能であり、より良い設定サポートがあれば、これを検出できる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9298194e3e006b8fbe7257f536dde080822b8c50" translate="yes" xml:space="preserve">
          <source>The following functions are available on Perls built on VMS 7.2 or greater:</source>
          <target state="translated">VMS 7.2以上で構築されたPerlsでは、以下の機能が利用できます。</target>
        </trans-unit>
        <trans-unit id="5c953c5f1b476c550370e7b30065e8a151627682" translate="yes" xml:space="preserve">
          <source>The following functions are available on Perls compiled with Dec C 5.2 or greater and running VMS 7.0 or greater:</source>
          <target state="translated">以下の関数は、Dec C 5.2以上でコンパイルされ、VMS 7.0以上で動作するPerlsで利用できます。</target>
        </trans-unit>
        <trans-unit id="1e205f409e70ccbdada46ad7374f5371cb998862" translate="yes" xml:space="preserve">
          <source>The following functions are available.</source>
          <target state="translated">以下のような機能があります。</target>
        </trans-unit>
        <trans-unit id="5950979e93d5397c31fbc2a28b94b256eeabee34" translate="yes" xml:space="preserve">
          <source>The following functions are currently undocumented. If you use one of them, you may wish to consider creating and submitting documentation for it.</source>
          <target state="translated">以下の機能は現在のところドキュメント化されていません。これらの関数を使用している場合は、ドキュメントを作成して提出することを検討してみてください。</target>
        </trans-unit>
        <trans-unit id="886ab3bb8b191680b7816c0256fd741faf8bc7ec" translate="yes" xml:space="preserve">
          <source>The following functions are defined in the &lt;code&gt;utf8::&lt;/code&gt; package by the Perl core. You do not need to say &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; to use these and in fact you should not say that unless you really want to have UTF-8 source code.</source>
          <target state="translated">以下の関数はPerlコアによって &lt;code&gt;utf8::&lt;/code&gt; パッケージで定義されています。これらを使用 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; と言う必要はありません。実際に、UTF-8ソースコードが本当に必要な場合を除いて、それを言うべきではありません。</target>
        </trans-unit>
        <trans-unit id="04035437cedd81d97c7436275ce862e9db956a98" translate="yes" xml:space="preserve">
          <source>The following functions are defined in the &lt;code&gt;utf8::&lt;/code&gt; package by the Perl core. You do not need to say &lt;code&gt;use utf8&lt;/code&gt; to use these and in fact you should not say that unless you really want to have UTF-8 source code.</source>
          <target state="translated">次の関数は、Perlコアによって &lt;code&gt;utf8::&lt;/code&gt; パッケージで定義されています。これらを使用 &lt;code&gt;use utf8&lt;/code&gt; を使用すると言う必要はありません。実際、UTF-8ソースコードが本当に必要な場合を除いて、そう言うべきではありません。</target>
        </trans-unit>
        <trans-unit id="d924d0242f33a4bd7b878adc5df25af14f3fc818" translate="yes" xml:space="preserve">
          <source>The following functions are exported by &lt;code&gt;Filter::Util::Call&lt;/code&gt; :</source>
          <target state="translated">次の関数は &lt;code&gt;Filter::Util::Call&lt;/code&gt; によってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="880d841885ac667bfdecc26d11ccfd01c2ab96a8" translate="yes" xml:space="preserve">
          <source>The following functions are exported by &lt;code&gt;Filter::Util::Call&lt;/code&gt;:</source>
          <target state="translated">次の関数は、 &lt;code&gt;Filter::Util::Call&lt;/code&gt; によってエクスポートされます：</target>
        </trans-unit>
        <trans-unit id="aab0faf40d4a413b76ab20e1f7c9c1ce5f8e0b08" translate="yes" xml:space="preserve">
          <source>The following functions are exported by default.</source>
          <target state="translated">デフォルトでは以下の関数がエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="f74d5f0be47eadceddfa059884e47684f407a94a" translate="yes" xml:space="preserve">
          <source>The following functions are exported by this module. Please note that these are functions (not methods) and therefore &lt;code&gt;&lt;a href=&quot;../functions/do&quot;&gt;do&lt;/a&gt; not&lt;/code&gt; take an implicit first argument.</source>
          <target state="translated">次の関数は、このモジュールによってエクスポートされます。したがって、これらの関数（メソッドではない）であることに注意してください &lt;code&gt;&lt;a href=&quot;../functions/do&quot;&gt;do&lt;/a&gt; not&lt;/code&gt; 暗黙の最初の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="ecbe41a265e73d2f25c7e96c76a4a747b067fbd6" translate="yes" xml:space="preserve">
          <source>The following functions are exported by this module: &lt;code&gt;share&lt;/code&gt; , &lt;code&gt;shared_clone&lt;/code&gt; , &lt;code&gt;is_shared&lt;/code&gt; , &lt;code&gt;cond_wait&lt;/code&gt; , &lt;code&gt;cond_timedwait&lt;/code&gt; , &lt;code&gt;cond_signal&lt;/code&gt; and &lt;code&gt;cond_broadcast&lt;/code&gt;</source>
          <target state="translated">：次の関数がこのモジュールによってエクスポートされた &lt;code&gt;share&lt;/code&gt; 、 &lt;code&gt;shared_clone&lt;/code&gt; 、 &lt;code&gt;is_shared&lt;/code&gt; 、 &lt;code&gt;cond_wait&lt;/code&gt; 、 &lt;code&gt;cond_timedwait&lt;/code&gt; 、 &lt;code&gt;cond_signal&lt;/code&gt; や &lt;code&gt;cond_broadcast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a286ac22b6e657ba87cab3b6eff4036bd887933" translate="yes" xml:space="preserve">
          <source>The following functions are exported by this module: &lt;code&gt;share&lt;/code&gt;, &lt;code&gt;shared_clone&lt;/code&gt;, &lt;code&gt;is_shared&lt;/code&gt;, &lt;code&gt;cond_wait&lt;/code&gt;, &lt;code&gt;cond_timedwait&lt;/code&gt;, &lt;code&gt;cond_signal&lt;/code&gt; and &lt;code&gt;cond_broadcast&lt;/code&gt;</source>
          <target state="translated">：次の関数がこのモジュールによってエクスポートされた &lt;code&gt;share&lt;/code&gt; 、 &lt;code&gt;shared_clone&lt;/code&gt; 、 &lt;code&gt;is_shared&lt;/code&gt; 、 &lt;code&gt;cond_wait&lt;/code&gt; 、 &lt;code&gt;cond_timedwait&lt;/code&gt; 、 &lt;code&gt;cond_signal&lt;/code&gt; や &lt;code&gt;cond_broadcast&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="359dedf5643622ca4347a5ad1835485c0f626223" translate="yes" xml:space="preserve">
          <source>The following functions are exported only by request.</source>
          <target state="translated">以下の関数はリクエストでのみエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="6ff004aea51ff452f5a6a3680250ec66d08e006e" translate="yes" xml:space="preserve">
          <source>The following functions are not considered to be part of the public interface. They are documented here for the benefit of future maintainers of this module.</source>
          <target state="translated">以下の関数はパブリックインタフェースの一部ではないと考えられています。これらの関数は、このモジュールの将来のメンテナのために、ここに文書化されています。</target>
        </trans-unit>
        <trans-unit id="bdb1dbec7cc374a481e866646b73ca4b04e611a0" translate="yes" xml:space="preserve">
          <source>The following functions are now implemented in FastCalc.xs:</source>
          <target state="translated">以下の関数がFastCalc.xsに実装されました。</target>
        </trans-unit>
        <trans-unit id="685959529a3484efa19ac7a3baaeafce45e37b9a" translate="yes" xml:space="preserve">
          <source>The following functions are provided by the &lt;code&gt;Digest::MD5&lt;/code&gt; module. None of these functions are exported by default.</source>
          <target state="translated">次の関数は、 &lt;code&gt;Digest::MD5&lt;/code&gt; モジュールによって提供されます。これらの関数は、デフォルトではエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="b8a73287c5b8efe7a8f104d252583b6712796202" translate="yes" xml:space="preserve">
          <source>The following functions are provided:</source>
          <target state="translated">以下の機能を備えています。</target>
        </trans-unit>
        <trans-unit id="cb80d66061f0196a6ca192d5341a430ee1b0eb26" translate="yes" xml:space="preserve">
          <source>The following functions are supported:</source>
          <target state="translated">以下の機能に対応しています。</target>
        </trans-unit>
        <trans-unit id="89bf61ba64cc618bf2874d4293a3aae6452f1aba" translate="yes" xml:space="preserve">
          <source>The following functions can be imported from this module. No functions are exported by default.</source>
          <target state="translated">このモジュールからは、以下の関数をインポートできます。デフォルトではエクスポートされる関数はありません。</target>
        </trans-unit>
        <trans-unit id="76627ad7f894d0c3e9a81281fe41fe4c1c985047" translate="yes" xml:space="preserve">
          <source>The following functions check whether the string is in that normalization form.</source>
          <target state="translated">以下の関数は、文字列がその正規化形式であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="a27da5eeba1599f572e14a8c9329aa08b0e2cd4f" translate="yes" xml:space="preserve">
          <source>The following functions convert between lists of Perl values and packed binary strings representing structures.</source>
          <target state="translated">以下の関数は、Perl の値のリストと、構造体を表すパックされたバイナリ文字列の間で変換します。</target>
        </trans-unit>
        <trans-unit id="2ccfd58b6052a416773b606e17f327b9dd3cd108" translate="yes" xml:space="preserve">
          <source>The following functions have been flagged as part of the public API, but are currently undocumented. Use them at your own risk, as the interfaces are subject to change. Functions that are not listed in this document are not intended for public use, and should NOT be used under any circumstances.</source>
          <target state="translated">以下の関数は公開APIの一部としてフラグが立てられていますが、現在は文書化されていません。インターフェイスは変更される可能性があるので、自己責任で使用してください。このドキュメントに記載されていない関数は公開用ではなく、いかなる状況下でも使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="824636764a16367a90dfdeffbf74adccac69c5cb" translate="yes" xml:space="preserve">
          <source>The following functions in the &lt;code&gt;POSIX&lt;/code&gt; module are no longer available: &lt;code&gt;isalnum&lt;/code&gt;, &lt;code&gt;isalpha&lt;/code&gt;, &lt;code&gt;iscntrl&lt;/code&gt;, &lt;code&gt;isdigit&lt;/code&gt;, &lt;code&gt;isgraph&lt;/code&gt;, &lt;code&gt;islower&lt;/code&gt;, &lt;code&gt;isprint&lt;/code&gt;, &lt;code&gt;ispunct&lt;/code&gt;, &lt;code&gt;isspace&lt;/code&gt;, &lt;code&gt;isupper&lt;/code&gt;, and &lt;code&gt;isxdigit&lt;/code&gt;. The functions are buggy and don't work on UTF-8 encoded strings. See their entries in &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; for more information.</source>
          <target state="translated">で、次のような機能 &lt;code&gt;POSIX&lt;/code&gt; モジュールが使用できなくなります： &lt;code&gt;isalnum&lt;/code&gt; 、 &lt;code&gt;isalpha&lt;/code&gt; 、 &lt;code&gt;iscntrl&lt;/code&gt; は、 &lt;code&gt;isdigit&lt;/code&gt; 、 &lt;code&gt;isgraph&lt;/code&gt; 、 &lt;code&gt;islower&lt;/code&gt; は、 &lt;code&gt;isprint&lt;/code&gt; は、 &lt;code&gt;ispunct&lt;/code&gt; 、 &lt;code&gt;isspace&lt;/code&gt; 、 &lt;code&gt;isupper&lt;/code&gt; 、および &lt;code&gt;isxdigit&lt;/code&gt; 。関数はバグがあり、UTF-8でエンコードされた文字列では機能しません。詳細については、&lt;a href=&quot;posix&quot;&gt;POSIXの&lt;/a&gt;エントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="8f79fe7f0a766eea8a6363560d09b1b418f37a54" translate="yes" xml:space="preserve">
          <source>The following functions may or may not be implemented, depending on what type of socket support you've built into your copy of Perl:</source>
          <target state="translated">以下の関数は、Perl のコピーに組み込まれているソケットサポートの種類によっては、実装されていないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2d8b2c9f184b69863b362bc365b152ff7d6a2cc5" translate="yes" xml:space="preserve">
          <source>The following functions use &lt;code&gt;$_&lt;/code&gt; as a default argument:</source>
          <target state="translated">次の関数は、デフォルトの引数として &lt;code&gt;$_&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0dd434c67978a923f9ec0ee28d2a5538ba5682f6" translate="yes" xml:space="preserve">
          <source>The following functions were not implemented in the VMS port, and calling them produces a fatal error (usually) or undefined behavior (rarely, we hope):</source>
          <target state="translated">以下の関数は VMS ポートに実装されておらず、それらを呼び出すと致命的なエラー(通常は)または未定義の動作(まれに)が発生します。</target>
        </trans-unit>
        <trans-unit id="cdfa439e416672c343b7c0368293d837f0c0576b" translate="yes" xml:space="preserve">
          <source>The following functions would all be inlined:</source>
          <target state="translated">以下の関数はすべてインライン化されます。</target>
        </trans-unit>
        <trans-unit id="f04cb90467492e19af66e5b899cfc303ddef4110" translate="yes" xml:space="preserve">
          <source>The following global variables are associated with arenas:</source>
          <target state="translated">以下のグローバル変数がアリーナに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="0d3412aee89bad6343f641caa3a5d4996443527e" translate="yes" xml:space="preserve">
          <source>The following illustrates use of the Benchmark object:</source>
          <target state="translated">以下は、Benchmarkオブジェクトの使用方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="21c5c52868e5d5448c65efac8d8979602bb9419b" translate="yes" xml:space="preserve">
          <source>The following information applies to gcc version 2. Volunteers to update it as appropriately for gcc version 3 would be appreciated.</source>
          <target state="translated">以下の情報は gcc バージョン 2 に適用されます。gccバージョン3に合わせて適切なアップデートをしてくれるボランティアの方を募集します。</target>
        </trans-unit>
        <trans-unit id="62ec6b5e797715143c688dee03c54b63962fd46a" translate="yes" xml:space="preserve">
          <source>The following interfaces are provided for compatibility with existing APIs. They should not be used in new code.</source>
          <target state="translated">以下のインターフェイスは、既存の API との互換性のために提供されています。これらは新しいコードでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="0bdb13054ff9ef26849b463627b5915db32807ca" translate="yes" xml:space="preserve">
          <source>The following is a long section of miscellaneous requirements and suggestions to do with Pod processing.</source>
          <target state="translated">以下、Podの処理についての雑学的な要求と提案を長々と書いていきます。</target>
        </trans-unit>
        <trans-unit id="9eebaea88bec8281bdda401db84ecb8529c5edbd" translate="yes" xml:space="preserve">
          <source>The following is an example of a typemap that could be used for this C++ example.</source>
          <target state="translated">このC++の例で使用できるタイプマップの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="a14c2ddd24e4bc7ed4b474606997260d2d723a26" translate="yes" xml:space="preserve">
          <source>The following is the old c2ph.doc documentation by Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt; Date: 25 Jul 91 08:10:21 GMT</source>
          <target state="translated">以下は、Tom Christiansen &amp;lt;tchrist@perl.com&amp;gt;による古いc2ph.docドキュメントです。日付：25 Jul 91 08:10:21 GMT</target>
        </trans-unit>
        <trans-unit id="838c8cc6acec4e734454e6016dba1f13113970de" translate="yes" xml:space="preserve">
          <source>The following is used to &lt;a href=&quot;deprecate&quot;&gt;deprecate&lt;/a&gt; core modules beyond a certain version of Perl:</source>
          <target state="translated">以下は、特定のバージョンのPerlを超えてコアモジュールを&lt;a href=&quot;deprecate&quot;&gt;非推奨にする&lt;/a&gt;ために使用されます。</target>
        </trans-unit>
        <trans-unit id="0c3fbe199ab2c0c87ca2506f58ce4cc1ff1336a3" translate="yes" xml:space="preserve">
          <source>The following keys allowed for callbacks. These keys are case-sensitive.</source>
          <target state="translated">コールバックで使用できるキーは以下の通りです。これらのキーは大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="ace2dc9ae3a6b314c56205001ea3e99826b29341" translate="yes" xml:space="preserve">
          <source>The following keys are optional.</source>
          <target state="translated">以下のキーはオプションです。</target>
        </trans-unit>
        <trans-unit id="87593abf1938664ef0461a9fc202ad24f5f827db" translate="yes" xml:space="preserve">
          <source>The following keys are recognised in the option hash:</source>
          <target state="translated">オプションハッシュでは、以下のキーが認識されます。</target>
        </trans-unit>
        <trans-unit id="938c23249f0abe69d61c5caeb8c241a3b1c97b48" translate="yes" xml:space="preserve">
          <source>The following keys are valid, but only &lt;code&gt;version&lt;/code&gt; is required.</source>
          <target state="translated">次のキーは有効ですが、必要なのは &lt;code&gt;version&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="2e29171b7f3395c93aba1c43b176e6a5f79f9da1" translate="yes" xml:space="preserve">
          <source>The following keys in the hash reference $CPAN::Config are currently defined:</source>
          <target state="translated">現在、ハッシュ参照 $CPAN::Config の以下のキーが定義されています。</target>
        </trans-unit>
        <trans-unit id="8faa1306b5e277a45ec730d9a598e8adafe08efc" translate="yes" xml:space="preserve">
          <source>The following layers are currently defined:</source>
          <target state="translated">現在、以下のレイヤーが定義されています。</target>
        </trans-unit>
        <trans-unit id="d62e448414706bf58b56c68adcd155be3caa2f9f" translate="yes" xml:space="preserve">
          <source>The following license strings are also valid and indicate other licensing not described above:</source>
          <target state="translated">また、以下のライセンス文字列も有効であり、上記以外のライセンスを示しています。</target>
        </trans-unit>
        <trans-unit id="8819c5fc895570a060c0cc0274e5435ca8214190" translate="yes" xml:space="preserve">
          <source>The following line is taken from the testsuite for &lt;a href=&quot;http://search.cpan.org/perldoc/File::Map&quot;&gt;File::Map&lt;/a&gt;:</source>
          <target state="translated">次の行は&lt;a href=&quot;http://search.cpan.org/perldoc/File::Map&quot;&gt;File :: Mapの&lt;/a&gt;テストスイートから取得されます。</target>
        </trans-unit>
        <trans-unit id="b26a944c006c4ed66106c7db11bb76fd456329ff" translate="yes" xml:space="preserve">
          <source>The following lines are equivalent:</source>
          <target state="translated">以下の行は等価です。</target>
        </trans-unit>
        <trans-unit id="f188bcdc507d79e65b8c87878e9261e514ba50b4" translate="yes" xml:space="preserve">
          <source>The following list of Unicode supported features for regular expressions describes all features currently directly supported by core Perl. The references to &quot;Level</source>
          <target state="translated">正規表現でUnicodeがサポートされている機能の以下のリストでは、現在Perlのコアで直接サポートされているすべての機能を説明しています。レベル</target>
        </trans-unit>
        <trans-unit id="a27fa1a573ac1c2bd0bdaed0b154f8a047e4a778" translate="yes" xml:space="preserve">
          <source>The following list of Unicode supported features for regular expressions describes all features currently directly supported by core Perl. The references to &quot;Level N&quot; and the section numbers refer to the Unicode Technical Standard #18, &quot;Unicode Regular Expressions&quot;, version 13, from August 2008.</source>
          <target state="translated">以下の正規表現の Unicode サポート機能のリストは、現在コア Perl で直接サポートされているすべての機能を記述しています。レベルN」とセクション番号は、2008年8月のUnicode技術標準#18「Unicode正規表現」バージョン13を参照しています。</target>
        </trans-unit>
        <trans-unit id="fd9860b919a8b832481067980e3c3a381ec06f0c" translate="yes" xml:space="preserve">
          <source>The following list of license strings are valid:</source>
          <target state="translated">以下のライセンス文字列のリストが有効です。</target>
        </trans-unit>
        <trans-unit id="04d2ac78ac8de1d9653897258388c5a4d402853b" translate="yes" xml:space="preserve">
          <source>The following macros must always be used to access the contents of hash entries. Note that the arguments to these macros must be simple variables, since they may get evaluated more than once. See &lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt; for detailed descriptions of these macros.</source>
          <target state="translated">ハッシュエントリの内容にアクセスするには、次のマクロを常に使用する必要があります。これらのマクロは複数回評価される可能性があるため、これらのマクロの引数は単純な変数でなければならないことに注意してください。これらのマクロの詳細については、&lt;a href=&quot;perlapi&quot;&gt;perlapi&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="54cabd1569f977ca3a4b00bfe48c1954ef75d0d2" translate="yes" xml:space="preserve">
          <source>The following methods all return a boolean value and are to be overridden in the appropriate subclass.</source>
          <target state="translated">以下のメソッドはすべてブーリアン値を返し、適切なサブクラスでオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="2e28c1a68a0ac1abaa1b238b7c5b433afa448fce" translate="yes" xml:space="preserve">
          <source>The following methods are available for all &lt;code&gt;Digest::&lt;/code&gt; modules:</source>
          <target state="translated">次のメソッドは、すべての &lt;code&gt;Digest::&lt;/code&gt; モジュールで使用できます。</target>
        </trans-unit>
        <trans-unit id="5d1a84015cfed0b396f9aadd71cc3704958e67dc" translate="yes" xml:space="preserve">
          <source>The following methods are available:</source>
          <target state="translated">以下のような方法があります。</target>
        </trans-unit>
        <trans-unit id="9ab4dd7b2f4575f0fcc3274141eab6c5a7ca9278" translate="yes" xml:space="preserve">
          <source>The following methods are mandatory: _new(), _str(), _add(), and _sub(). However, computations will be very slow without _mul() and _div().</source>
          <target state="translated">以下のメソッドは必須です。new()、_str()、_add()、_sub()です。しかし、_mul()と_div()がないと計算が非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="7b6f41c232d0f405651a2979e1a726ffd3fbd1cf" translate="yes" xml:space="preserve">
          <source>The following methods are not supported on a per-filehandle basis.</source>
          <target state="translated">以下のメソッドは、ファイルハンドルごとにはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e3dd1f8a67cafbd7d4b11fa3ef01a32bc5c44916" translate="yes" xml:space="preserve">
          <source>The following methods are ones you may wish to override if you want to subclass &lt;code&gt;TAP::Harness&lt;/code&gt; .</source>
          <target state="translated">次のメソッドは、 &lt;code&gt;TAP::Harness&lt;/code&gt; をサブクラス化したい場合にオーバーライドしたいメソッドです。</target>
        </trans-unit>
        <trans-unit id="6e9f03dd5d9f58ae4081f60a8239d90f2810d056" translate="yes" xml:space="preserve">
          <source>The following methods are ones you may wish to override if you want to subclass &lt;code&gt;TAP::Harness&lt;/code&gt;.</source>
          <target state="translated">次のメソッドは、 &lt;code&gt;TAP::Harness&lt;/code&gt; をサブクラス化する場合にオーバーライドしたいメソッドです。</target>
        </trans-unit>
        <trans-unit id="679901c8aebeb73a7fa904b450ae5e241ed9cb03" translate="yes" xml:space="preserve">
          <source>The following methods are optional, and can be defined if the underlying lib has a fast way to do them. If undefined, Math::BigInt will use pure Perl (hence slow) fallback routines to emulate these:</source>
          <target state="translated">以下のメソッドはオプションであり、基礎となる lib に高速な方法があれば定義することができます。未定義の場合、Math::BigInt はこれらをエミュレートするために純粋な Perl (したがって遅い)フォールバックルーチンを使用します。</target>
        </trans-unit>
        <trans-unit id="d8157ae492dfb9da4aae902df688ee7d5be628f8" translate="yes" xml:space="preserve">
          <source>The following methods are provided in this module. Each one takes a reference to the object itself as an implicit first parameter.</source>
          <target state="translated">このモジュールでは、以下のメソッドが提供されています。それぞれのメソッドは、暗黙の第一パラメータとしてオブジェクト自体への参照を取ります。</target>
        </trans-unit>
        <trans-unit id="bde2e5da8041f121dd086d0f1594d72494846e0b" translate="yes" xml:space="preserve">
          <source>The following methods are provided:</source>
          <target state="translated">以下のような方法が用意されています。</target>
        </trans-unit>
        <trans-unit id="61fea790abe3137c314afb22029bb574c87067fd" translate="yes" xml:space="preserve">
          <source>The following methods are required for an API version of 2 or greater.</source>
          <target state="translated">APIのバージョンが2以上の場合は、以下のメソッドが必要です。</target>
        </trans-unit>
        <trans-unit id="ec06d96f64f88685f2a77a047bae0d4b9b41fde8" translate="yes" xml:space="preserve">
          <source>The following methods are wrappers for the directory related functions built into perl (the trailing 'dir' has been removed from the names). See &lt;a href=&quot;../perlfunc&quot;&gt;perlfunc&lt;/a&gt; for details of these functions.</source>
          <target state="translated">以下のメソッドは、perlに組み込まれているディレクトリ関連の関数のラッパーです（末尾の「dir」は名前から削除されています）。参照してください&lt;a href=&quot;../perlfunc&quot;&gt;perlfuncの&lt;/a&gt;これらの機能の詳細については。</target>
        </trans-unit>
        <trans-unit id="ded7f0c3574ed832e686f908708c74d7bfabfc4b" translate="yes" xml:space="preserve">
          <source>The following methods are wrappers for the directory related functions built into perl (the trailing 'dir' has been removed from the names). See &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; for details of these functions.</source>
          <target state="translated">以下のメソッドは、perlに組み込まれているディレクトリ関連関数のラッパーです（末尾の「dir」は名前から削除されています）。参照してください&lt;a href=&quot;perlfunc&quot;&gt;perlfuncの&lt;/a&gt;これらの機能の詳細については。</target>
        </trans-unit>
        <trans-unit id="570150b9609694e95e958423d380ac3c5369cdc3" translate="yes" xml:space="preserve">
          <source>The following methods can be used to manipulate items anywhere in a queue.</source>
          <target state="translated">キュー内の任意の場所でアイテムを操作するには、以下のメソッドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="1cff87e9e5dce6950df4739edc1576de748d33e5" translate="yes" xml:space="preserve">
          <source>The following methods can be used to transfer files between two remote servers, providing that these two servers can connect directly to each other.</source>
          <target state="translated">以下の方法は、これらの2つのサーバが互いに直接接続できることを条件に、2つのリモートサーバ間でファイルを転送するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d8f54c9acd776fdfe4ac513355a1096a098e49e7" translate="yes" xml:space="preserve">
          <source>The following methods can return different results depending on how they are called. If the user explicitly calls either of the &lt;code&gt;pasv&lt;/code&gt; or &lt;code&gt;port&lt;/code&gt; methods then these methods will return a</source>
          <target state="translated">次のメソッドは、呼び出された方法に応じて異なる結果を返す可能性があります。ユーザーが &lt;code&gt;pasv&lt;/code&gt; または &lt;code&gt;port&lt;/code&gt; メソッドのいずれかを明示的に呼び出すと、これらのメソッドは</target>
        </trans-unit>
        <trans-unit id="48671c770c71c327c8f21494ae7c58eef76a7413" translate="yes" xml:space="preserve">
          <source>The following methods can then be used on the compartment object returned by the above constructor. The object argument is implicit in each case.</source>
          <target state="translated">そして、上記のコンストラクタによって返されたコンパートメントオブジェクトに対して、以下のメソッドを使用することができます。オブジェクトの引数は、それぞれのケースで暗黙的に指定されます。</target>
        </trans-unit>
        <trans-unit id="a9334f5feea4574b7400347c313e7ae3bde9f0a9" translate="yes" xml:space="preserve">
          <source>The following methods deal with queues on a FIFO basis.</source>
          <target state="translated">以下のメソッドは、FIFO ベースでキューを処理します。</target>
        </trans-unit>
        <trans-unit id="1107701eeb6d8dce0fd7fc1f42599acf6178ec38" translate="yes" xml:space="preserve">
          <source>The following methods implement this incremental parser.</source>
          <target state="translated">以下のメソッドは、このインクリメンタルパーサを実装しています。</target>
        </trans-unit>
        <trans-unit id="ee7cc6ee31a4cea12821df3d9ff6b6e073be7714" translate="yes" xml:space="preserve">
          <source>The following methods must be defined in order to support the use by Math::BigInt v1.70 or later.</source>
          <target state="translated">Math::BigInt v1.70 以降での使用をサポートするためには、以下のメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="280d5e97299a977b6fb2506b08e4d295925aa675" translate="yes" xml:space="preserve">
          <source>The following methods return a single value, which is the value for the corresponding entry in the distmeta structure. Values should be either undef or strings.</source>
          <target state="translated">以下のメソッドは、distmeta構造体の対応するエントリの値である単一の値を返します。値は undef または文字列のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e47bdf0bfe9cf16bdf842c1c20e389188ee7a3a8" translate="yes" xml:space="preserve">
          <source>The following methods upgrade themselves unconditionally; that is if upgrade is in effect, they always hands up their work:</source>
          <target state="translated">以下の方法は、無条件に自分自身をアップグレードします。</target>
        </trans-unit>
        <trans-unit id="1f23966e0bc23b8a5a278ce7e5e420b3556e28b8" translate="yes" xml:space="preserve">
          <source>The following methods upgrade themselves unconditionally; that is if upgrade is in effect, they will always hand up their work:</source>
          <target state="translated">以下の方法では、無条件に自分自身をアップグレードします。</target>
        </trans-unit>
        <trans-unit id="4d85840c9544f4d1a9475cb2562273ab62746e95" translate="yes" xml:space="preserve">
          <source>The following methods, while usable from anywhere, are primarily intended for developers wishing to subclass &lt;code&gt;autodie::exception&lt;/code&gt;, write code that registers custom error messages, or otherwise work closely with the &lt;code&gt;autodie::exception&lt;/code&gt; model.</source>
          <target state="translated">次のメソッドは、どこからでも使用できますが、主に &lt;code&gt;autodie::exception&lt;/code&gt; をサブクラス化したり、カスタムエラーメッセージを登録するコードを記述したり、 &lt;code&gt;autodie::exception&lt;/code&gt; モデルと緊密に連携したりする開発者を対象としています。</target>
        </trans-unit>
        <trans-unit id="314022e0b634f0a33992a5bea72595f23a273937" translate="yes" xml:space="preserve">
          <source>The following modules are currently used by bigint:</source>
          <target state="translated">現在 bigint が使用しているモジュールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="086b35f723ebe590f75a1aea7b6b1150783292e6" translate="yes" xml:space="preserve">
          <source>The following modules are currently used by bignum:</source>
          <target state="translated">現在 bignum が使用しているモジュールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d93609e5247b12617e4dd3f00cb7708916287a29" translate="yes" xml:space="preserve">
          <source>The following names have special meaning to Perl. Most punctuation names have reasonable mnemonics, or analogs in the shells. Nevertheless, if you wish to use long variable names, you need only say:</source>
          <target state="translated">以下の名前は Perl にとって特別な意味を持っています。ほとんどの句読点名は、シェルの中では適切なニーモニックやアナログを持っています。それにもかかわらず、長い変数名を使いたい場合は</target>
        </trans-unit>
        <trans-unit id="8937b6a268204b01bd09b0791adaf0dc939c65b5" translate="yes" xml:space="preserve">
          <source>The following options affect what happens with &lt;code&gt;V&lt;/code&gt; , &lt;code&gt;X&lt;/code&gt; , and &lt;code&gt;x&lt;/code&gt; commands:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;x&lt;/code&gt; コマンドで何が起こるかに影響します。</target>
        </trans-unit>
        <trans-unit id="4a331658e3e1d7b8de900a2e68b72b832b1d4100" translate="yes" xml:space="preserve">
          <source>The following options affect what happens with &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; commands:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;x&lt;/code&gt; コマンドで何が起こるかに影響します。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="5530497eb21d4e6a6dcc738d7ea1b33bd3ad244e" translate="yes" xml:space="preserve">
          <source>The following options are pairwise exclusive.</source>
          <target state="translated">以下のオプションはペアワイズエクスクルーシブです。</target>
        </trans-unit>
        <trans-unit id="82fa31556e7811972756a886a4cfa29a126dcd22" translate="yes" xml:space="preserve">
          <source>The following options are passed through to the underlying text formatter. See the manual pages of these modules for more information.</source>
          <target state="translated">以下のオプションは、基礎となるテキストフォーマッタに渡されます。詳細については、これらのモジュールのマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="407cb3c611809d0d6a4a0229085dace99fab8aca" translate="yes" xml:space="preserve">
          <source>The following options are supported: center, date, fixed, fixedbold, fixeditalic, fixedbolditalic, quotes, release, section</source>
          <target state="translated">次のオプションがサポートされています:center、date、fixed、fixedbold、fixeditalic、fixedbolditalic、quotes、release、section。</target>
        </trans-unit>
        <trans-unit id="7fa87a7b90e6843371b98a42bf443c041138aacf" translate="yes" xml:space="preserve">
          <source>The following pattern matches a function &lt;code&gt;foo()&lt;/code&gt; which may contain balanced parentheses as the argument.</source>
          <target state="translated">次のパターンは、引数としてバランスの取れた括弧を含む可能性のある関数 &lt;code&gt;foo()&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="f9719c919f328c184200e9a901169faf3fe1692f" translate="yes" xml:space="preserve">
          <source>The following pattern matches a function foo() which may contain balanced parentheses as the argument.</source>
          <target state="translated">以下のパターンは、引数にバランスの取れた括弧を含む可能性のある関数 foo()にマッチします。</target>
        </trans-unit>
        <trans-unit id="88eac117835fd0d5e8fe0a92e17ee881d0f51bb6" translate="yes" xml:space="preserve">
          <source>The following pattern matches a parenthesized group:</source>
          <target state="translated">以下のパターンは、括弧で囲まれたグループと一致します。</target>
        </trans-unit>
        <trans-unit id="22ee5be8d1198dc109b222871c61596812e4d6af" translate="yes" xml:space="preserve">
          <source>The following people have all contributed to this document in some way, even if only for review.</source>
          <target state="translated">以下の方々は、レビューのためだけであっても、この文書に何らかの形で貢献してくれています。</target>
        </trans-unit>
        <trans-unit id="9261bf4cae54928a9960941cd2e6c763bb03b07b" translate="yes" xml:space="preserve">
          <source>The following platforms are known to build Perl 5.12 (as of April 2010, its release date) from the standard source code distribution available at &lt;a href=&quot;http://www.cpan.org/src&quot;&gt;http://www.cpan.org/src&lt;/a&gt;</source>
          <target state="translated">次のプラットフォームは、&lt;a href=&quot;http://www.cpan.org/src&quot;&gt;http：//www.cpan.org/srcで&lt;/a&gt;入手できる標準のソースコード配布からPerl 5.12（2010年4月現在、そのリリース日）をビルドすることがわかっています。</target>
        </trans-unit>
        <trans-unit id="6907367840204c62b96dad2c2b4daa026466da81" translate="yes" xml:space="preserve">
          <source>The following platforms have been known to build Perl from source in the past (5.005_03 and earlier), but we haven't been able to verify their status for the current release, either because the hardware/software platforms are rare or because we don't have an active champion on these platforms--or both. They used to work, though, so go ahead and try compiling them, and let &lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https://github.com/Perl/perl5/issues&lt;/a&gt; know of any trouble.</source>
          <target state="translated">以下のプラットフォームは、過去（5.005_03以前）にソースからPerlをビルドすることが知られていますが、ハードウェア/ソフトウェアプラットフォームがまれであるか、そうでないため、現在のリリースのステータスを確認できませんでした。これらのプラットフォーム、またはその両方でアクティブなチャンピオンはいない。ただし、以前は機能していたので、コンパイルしてみて、&lt;a href=&quot;https://github.com/Perl/perl5/issues&quot;&gt;https：//github.com/Perl/perl5/issuesに&lt;/a&gt;問題があれば知らせてください。</target>
        </trans-unit>
        <trans-unit id="3340ff1c2b446edebeb559ea5dd147cf80639131" translate="yes" xml:space="preserve">
          <source>The following platforms have been known to build Perl from source in the past (5.005_03 and earlier), but we haven't been able to verify their status for the current release, either because the hardware/software platforms are rare or because we don't have an active champion on these platforms--or both. They used to work, though, so go ahead and try compiling them, and let perlbug@perl.org of any trouble.</source>
          <target state="translated">以下のプラットフォームは、過去にソースから Perl をビルドすることが知られていますが (5.005_03 およびそれ以前)、現在のリリースではそれらの状態を確認することができませんでした。これらは以前は動作していましたので、コンパイルしてみてください。</target>
        </trans-unit>
        <trans-unit id="8c95fcd90364c113c8743d95c16878f685bbdec9" translate="yes" xml:space="preserve">
          <source>The following platforms have only binaries available via &lt;a href=&quot;http://www.cpan.org/ports/index.html&quot;&gt;http://www.cpan.org/ports/index.html&lt;/a&gt; :</source>
          <target state="translated">次のプラットフォームには、&lt;a href=&quot;http://www.cpan.org/ports/index.html&quot;&gt;http&lt;/a&gt; : //www.cpan.org/ports/index.htmlから入手できるバイナリのみがあります。</target>
        </trans-unit>
        <trans-unit id="17f6cd1b99f9d8c8f96a2484ba6123182c8c7ea5" translate="yes" xml:space="preserve">
          <source>The following platforms have their own source code distributions and binaries available via &lt;a href=&quot;http://www.cpan.org/ports/&quot;&gt;http://www.cpan.org/ports/&lt;/a&gt;</source>
          <target state="translated">次のプラットフォームには、独自のソースコードディストリビューションとバイナリがあり、&lt;a href=&quot;http://www.cpan.org/ports/&quot;&gt;http：&lt;/a&gt; //www.cpan.org/ports/から入手できます。</target>
        </trans-unit>
        <trans-unit id="ba4505bcfd3048861117fe3f1683581b473bc260" translate="yes" xml:space="preserve">
          <source>The following platforms were supported by a previous version of Perl but have been officially removed from Perl's source code as of 5.12:</source>
          <target state="translated">以下のプラットフォームは以前のバージョンの Perl でサポートされていましたが、5.12 の時点で Perl のソースコードから公式に削除されています。</target>
        </trans-unit>
        <trans-unit id="231bce91c0774cb9ac67f2e9bf6e077f99a9edec" translate="yes" xml:space="preserve">
          <source>The following platforms were supported by a previous version of Perl but have been officially removed from Perl's source code as of 5.20:</source>
          <target state="translated">以下のプラットフォームは以前のバージョンのPerlでサポートされていましたが、5.20の時点でPerlのソースコードから公式に削除されています。</target>
        </trans-unit>
        <trans-unit id="ce7175eecbb5cf889a2f2cc3f026e2da7a9136e7" translate="yes" xml:space="preserve">
          <source>The following platforms were supported up to 5.10. They may still have worked in 5.12, but supporting code has been removed for 5.14:</source>
          <target state="translated">以下のプラットフォームは 5.10 までサポートされていました。これらは 5.12 でも動作していたかもしれませんが、5.14 ではサポートされていたコードが削除されています。</target>
        </trans-unit>
        <trans-unit id="446fc2176911919a5044a357259301549c936213" translate="yes" xml:space="preserve">
          <source>The following platforms worked with the previous releases (5.6 and 5.7), but we did not manage either to fix or to test these in time for the 5.8.0 release. There is a very good chance that many of these will work fine with the 5.8.0.</source>
          <target state="translated">以下のプラットフォームは以前のリリース (5.6 と 5.7)で動作しましたが、5.8.0 のリリースに間に合うように修正したり、テストしたりすることはできませんでした。これらの多くは5.8.0でも問題なく動作する可能性が非常に高いです。</target>
        </trans-unit>
        <trans-unit id="637d6920710e051f990eceb2af393917b297b61a" translate="yes" xml:space="preserve">
          <source>The following pragmas are defined (and have their own documentation).</source>
          <target state="translated">以下のプラグマが定義されています(独自のドキュメントを持っています)。</target>
        </trans-unit>
        <trans-unit id="3e891a8176dfddab918a655b139307ab8b66b513" translate="yes" xml:space="preserve">
          <source>The following primary functions are provided:</source>
          <target state="translated">主な機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dcbd438c6b1158dced15757e5785975c49cf130b" translate="yes" xml:space="preserve">
          <source>The following probably doesn't do what you expect:</source>
          <target state="translated">以下はおそらく期待しているようなことはしていません。</target>
        </trans-unit>
        <trans-unit id="bbf69375b2075818b8dae7a187b7c74a5295e91b" translate="yes" xml:space="preserve">
          <source>The following problems are encountered with Haiku revision 28311:</source>
          <target state="translated">俳句改訂28311では、以下の問題が発生しています。</target>
        </trans-unit>
        <trans-unit id="d89ada30f3c9b0885c9f6f1b4c7448cd518fcaa4" translate="yes" xml:space="preserve">
          <source>The following returns the &lt;b&gt;names&lt;/b&gt; of the PerlIO layers on a filehandle.</source>
          <target state="translated">以下は、ファイルハンドル上のPerlIOレイヤーの&lt;b&gt;名前&lt;/b&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="1bc9e3e129e691ac04ecb6526cec5a595482fff6" translate="yes" xml:space="preserve">
          <source>The following revisions are supported. The default is 30.</source>
          <target state="translated">以下のリビジョンに対応しています。デフォルトは30です。</target>
        </trans-unit>
        <trans-unit id="4a818dfcd5c08f13e17285de1b0c0c9fdcdbac96" translate="yes" xml:space="preserve">
          <source>The following revisions are supported. The default is 36.</source>
          <target state="translated">以下のリビジョンに対応しています。デフォルトは36です。</target>
        </trans-unit>
        <trans-unit id="c446e9a76c2a849f3d9283f94a02c3c2d25e461d" translate="yes" xml:space="preserve">
          <source>The following routines will be exported into your namespace if you specifically ask that they be imported:</source>
          <target state="translated">以下のルーチンは、特にインポートを要求した場合、ネームスペースにエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="019be2c4bd05e066f928aafadb59663b3afde865" translate="yes" xml:space="preserve">
          <source>The following routines will be exported into your namespace if you use the Benchmark module:</source>
          <target state="translated">以下のルーチンは、Benchmark モジュールを使用している場合、ネームスペースにエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="de855448328b5e9f80cc8ce9168a701f985757d7" translate="yes" xml:space="preserve">
          <source>The following rules apply:</source>
          <target state="translated">以下のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="c3f236092c86ae50065ffb55ca5283dcb8508783" translate="yes" xml:space="preserve">
          <source>The following rules are available:</source>
          <target state="translated">以下のようなルールがあります。</target>
        </trans-unit>
        <trans-unit id="a8f5fc7c9bec47fa12d0874b935f8fd0b4ed0730" translate="yes" xml:space="preserve">
          <source>The following sample implementation of &lt;code&gt;minus()&lt;/code&gt; (which assumes that &lt;code&gt;Number&lt;/code&gt; objects are simply blessed references to scalars) illustrates the calling conventions:</source>
          <target state="translated">次の &lt;code&gt;minus()&lt;/code&gt; サンプル実装（ &lt;code&gt;Number&lt;/code&gt; オブジェクトは単にblessされたスカラーへの参照であると想定しています）は、呼び出し規約を示しています。</target>
        </trans-unit>
        <trans-unit id="67999be44740f8addea9fce4caf76726233a8acf" translate="yes" xml:space="preserve">
          <source>The following sequences (except &lt;code&gt;\N&lt;/code&gt; ) work within or without a character class. The first six are locale aware, all are Unicode aware. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for details.</source>
          <target state="translated">次のシーケンス（ &lt;code&gt;\N&lt;/code&gt; を除く）は、文字クラス内または文字クラスなしで機能します。最初の6つはロケール対応で、すべてがUnicode対応です。詳細については、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4d35a09553da6f576d42c5fa2490f9e35aa7f113" translate="yes" xml:space="preserve">
          <source>The following sequences (except &lt;code&gt;\N&lt;/code&gt;) work within or without a character class. The first six are locale aware, all are Unicode aware. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; and &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt; for details.</source>
          <target state="translated">次のシーケンス（ &lt;code&gt;\N&lt;/code&gt; を除く）は、文字クラスの内外で機能します。最初の6つはロケールに対応しており、すべてUnicodeに対応しています。詳細については、&lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;および&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9540b293755f2d5620dc9acad2cd13cee9e2ef96" translate="yes" xml:space="preserve">
          <source>The following set of functions all apply a given block of code to a list of values.</source>
          <target state="translated">以下の一連の関数は、すべてのコードブロックを値のリストに適用します。</target>
        </trans-unit>
        <trans-unit id="6520d28097d378d9470274294d01c67b34c1c70f" translate="yes" xml:space="preserve">
          <source>The following set of functions all reduce a list down to a single value.</source>
          <target state="translated">以下の一連の関数は、すべてリストを1つの値に縮小します。</target>
        </trans-unit>
        <trans-unit id="adf371bb48a28981de1ae9bebf30e1218065293c" translate="yes" xml:space="preserve">
          <source>The following set of functions, all inspired by &lt;a href=&quot;List::Pairwise&quot;&gt;List::Pairwise&lt;/a&gt;, consume an even-sized list of pairs. The pairs may be key/value associations from a hash, or just a list of values. The functions will all preserve the original ordering of the pairs, and will not be confused by multiple pairs having the same &quot;key&quot; value - nor even do they require that the first of each pair be a plain string.</source>
          <target state="translated">次の一連の関数は、すべて&lt;a href=&quot;List::Pairwise&quot;&gt;List :: Pairwiseに&lt;/a&gt;触発されており、均等なサイズのペアのリストを使用します。ペアは、ハッシュからのキーと値の関連付け、または値のリストの場合があります。関数はすべて、ペアの元の順序を保持し、同じ「キー」値を持つ複数のペアによって混乱することはありません。また、各ペアの最初の文字列がプレーンな文字列である必要もありません。</target>
        </trans-unit>
        <trans-unit id="31f700e59048089f2fca9626afc48c135af0fec0" translate="yes" xml:space="preserve">
          <source>The following set of functions, all inspired by &lt;a href=&quot;http://search.cpan.org/perldoc/List::Pairwise&quot;&gt;List::Pairwise&lt;/a&gt;, consume an even-sized list of pairs. The pairs may be key/value associations from a hash, or just a list of values. The functions will all preserve the original ordering of the pairs, and will not be confused by multiple pairs having the same &quot;key&quot; value - nor even do they require that the first of each pair be a plain string.</source>
          <target state="translated">次の一連の関数は、すべて&lt;a href=&quot;http://search.cpan.org/perldoc/List::Pairwise&quot;&gt;List :: Pairwise&lt;/a&gt;からヒントを得て、偶数サイズのペアのリストを消費します。ペアは、ハッシュからのキー/値の関連付け、または単なる値のリストです。これらの関数はすべて、ペアの元の順序を保持し、同じ「キー」値を持つ複数のペアによって混乱することはありません。各ペアの最初の文字列がプレーンな文字列である必要もありません。</target>
        </trans-unit>
        <trans-unit id="bf58c9289e75f1b85afc527d37ec88624aafe8e0" translate="yes" xml:space="preserve">
          <source>The following setting are currently preserved: history, breakpoints, actions, debugger options, and the Perl command-line options &lt;b&gt;-w&lt;/b&gt;, &lt;b&gt;-I&lt;/b&gt;, and &lt;b&gt;-e&lt;/b&gt;.</source>
          <target state="translated">現在保持されている設定は、履歴、ブレークポイント、アクション、デバッガーオプション、およびPerlコマンドラインオプション&lt;b&gt;-w&lt;/b&gt;、&lt;b&gt;-I&lt;/b&gt;、および&lt;b&gt;-e&lt;/b&gt;です。</target>
        </trans-unit>
        <trans-unit id="2f9e7f8b992aecf2d6263a37f2844fd220110139" translate="yes" xml:space="preserve">
          <source>The following shows how using negative indexing can make it easier to embed recursive patterns inside of a &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; construct for later use:</source>
          <target state="translated">次の例は、負のインデックスを使用して、後で使用するために再帰パターンを &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 構成の中に簡単に埋め込む方法を示しています。</target>
        </trans-unit>
        <trans-unit id="9b2c5c0c58ad6eab6d4bc5753a307f626a410d1e" translate="yes" xml:space="preserve">
          <source>The following shows how using negative indexing can make it easier to embed recursive patterns inside of a &lt;code&gt;qr//&lt;/code&gt; construct for later use:</source>
          <target state="translated">以下は、負のインデックスを使用すると、後で使用するために &lt;code&gt;qr//&lt;/code&gt; コンストラクト内に再帰パターンを簡単に埋め込むことができる方法を示しています。</target>
        </trans-unit>
        <trans-unit id="1462e7325e21b0e3087981f44f0af9a643d8599d" translate="yes" xml:space="preserve">
          <source>The following shows the raw form of a reference to a hash.</source>
          <target state="translated">以下は、ハッシュへの参照の生の形を示しています。</target>
        </trans-unit>
        <trans-unit id="967f133103c60d10e71b0c793260fc3ac77b40c4" translate="yes" xml:space="preserve">
          <source>The following single statement:</source>
          <target state="translated">次のような一文があります。</target>
        </trans-unit>
        <trans-unit id="2e884b22f85adb1ade979bfac548d842a78ee34c" translate="yes" xml:space="preserve">
          <source>The following standard quantifiers are recognized:</source>
          <target state="translated">以下の標準的な定量器が認識されています。</target>
        </trans-unit>
        <trans-unit id="f4477e5386cec5d30c1ffdf2df262ef158032a46" translate="yes" xml:space="preserve">
          <source>The following structure is used as the &lt;code&gt;pprivate&lt;/code&gt; struct by perl's regex engine. Since it is specific to perl it is only of curiosity value to other engine implementations.</source>
          <target state="translated">次の構造は、perlの正規表現エンジンによって &lt;code&gt;pprivate&lt;/code&gt; 構造体として使用されます。これはperlに固有であるため、他のエンジン実装にとっては好奇心の価値があります。</target>
        </trans-unit>
        <trans-unit id="89e9367ea2c2e9bf561ef1309852d2cf7361c03c" translate="yes" xml:space="preserve">
          <source>The following subroutines are available for general use once this module has been loaded:</source>
          <target state="translated">このモジュールがロードされると、以下のサブルーチンが一般的に使用できます。</target>
        </trans-unit>
        <trans-unit id="39addea572ccdb746968405797f7ed6ce1f71c76" translate="yes" xml:space="preserve">
          <source>The following subsections describe basic locale categories. Beyond these, some combination categories allow manipulation of more than one basic category at a time. See &lt;a href=&quot;#ENVIRONMENT&quot;&gt;&quot;ENVIRONMENT&quot;&lt;/a&gt; for a discussion of these.</source>
          <target state="translated">次のサブセクションでは、基本的なロケールカテゴリについて説明します。これらに加えて、一部の組み合わせカテゴリでは、一度に複数の基本カテゴリを操作できます。これらの説明については、&lt;a href=&quot;#ENVIRONMENT&quot;&gt;「環境」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba25a356d8138d41be0a86a5f5fb1d08b7adedd8" translate="yes" xml:space="preserve">
          <source>The following subsections describe basic locale categories. Beyond these, some combination categories allow manipulation of more than one basic category at a time. See &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; for a discussion of these.</source>
          <target state="translated">次のサブセクションでは、基本的なロケールカテゴリについて説明します。これらを超えて、一部の組み合わせカテゴリでは、一度に複数の基本カテゴリを操作できます。これらの説明については、&lt;a href=&quot;#ENVIRONMENT&quot;&gt;環境&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0dc5293bb808b42d229adc04604a47fcedbdefbc" translate="yes" xml:space="preserve">
          <source>The following symbolic constants for SHOWWINDOW are available (but not exported) from the Win32 module: SW_HIDE, SW_SHOWNORMAL, SW_SHOWMINIMIZED, SW_SHOWMAXIMIZED and SW_SHOWNOACTIVATE.</source>
          <target state="translated">以下の SHOWWINDOW 用のシンボリック定数は Win32 モジュールから利用可能です (エクスポートされていません)。SW_HIDE、SW_SHOWNORMAL、SW_SHOWMINIMIZED、SW_SHOWMAXIMIZED、SW_SHOWNOACTIVATE。</target>
        </trans-unit>
        <trans-unit id="00832acd024c7ea26f0714974719f6fe15f3259e" translate="yes" xml:space="preserve">
          <source>The following systems contain with PA-RISC 1.1 chips:</source>
          <target state="translated">以下のシステムにはPA-RISC 1.1チップが含まれています。</target>
        </trans-unit>
        <trans-unit id="6b127f4160144d76492f304d4812a08c409c1ee2" translate="yes" xml:space="preserve">
          <source>The following systems contained PA-RISC 1.0 chips:</source>
          <target state="translated">PA-RISC 1.0チップを搭載した以下のシステム。</target>
        </trans-unit>
        <trans-unit id="c10d1b335971cff8856d57f7108722f96d961255" translate="yes" xml:space="preserve">
          <source>The following table is a complete listing of characters matched by &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\h&lt;/code&gt; and &lt;code&gt;\v&lt;/code&gt; as of Unicode 6.3.</source>
          <target state="translated">次の表は、Unicode 6.3の時点で &lt;code&gt;\s&lt;/code&gt; 、 &lt;code&gt;\h&lt;/code&gt; 、および &lt;code&gt;\v&lt;/code&gt; と一致する文字の完全なリストです。</target>
        </trans-unit>
        <trans-unit id="b30fe71571a9a6420e717590392f76849f4888c3" translate="yes" xml:space="preserve">
          <source>The following table is from Unicode 3.2.</source>
          <target state="translated">以下の表はUnicode 3.2のものです。</target>
        </trans-unit>
        <trans-unit id="08ac1fd17048e5aaff438c3920650ea36fe28bd5" translate="yes" xml:space="preserve">
          <source>The following table shows the result of the division and the remainder, so that the equation above holds true. Some &quot;ordinary&quot; cases are strewn in to show more clearly the reasoning:</source>
          <target state="translated">次の表は、上の式が真であるように、割り算と余りの結果を示しています。推論をより明確に示すために、いくつかの「普通の」ケースを散りばめています。</target>
        </trans-unit>
        <trans-unit id="3985fef65ba4e91f6d3780d0b3e49df58907d0ee" translate="yes" xml:space="preserve">
          <source>The following table summarizes the default layers on UNIX-like and DOS-like platforms and depending on the setting of &lt;code&gt;$ENV{PERLIO}&lt;/code&gt; :</source>
          <target state="translated">次の表は、 &lt;code&gt;$ENV{PERLIO}&lt;/code&gt; 設定に応じて、UNIXライクおよびDOSライクなプラットフォームのデフォルトレイヤーをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="54678528be44b1241458a1af21612f2f6f5f0793" translate="yes" xml:space="preserve">
          <source>The following table summarizes the default layers on UNIX-like and DOS-like platforms and depending on the setting of &lt;code&gt;$ENV{PERLIO}&lt;/code&gt;:</source>
          <target state="translated">次の表は、UNIXライクおよびDOSライクなプラットフォームで、 &lt;code&gt;$ENV{PERLIO}&lt;/code&gt; 設定に応じたデフォルトのレイヤーをまとめたものです。</target>
        </trans-unit>
        <trans-unit id="72667df1c110c1893cb08480bc1c250b48c0cb32" translate="yes" xml:space="preserve">
          <source>The following tables list the ASCII and Latin 1 ordered sets including the subsets: C0 controls (0..31), ASCII graphics (32..7e), delete (7f), C1 controls (80..9f), and Latin-1 (a.k.a. ISO 8859-1) (a0..ff). In the table names of the Latin 1 extensions to ASCII have been labelled with character names roughly corresponding to</source>
          <target state="translated">以下の表は、サブセットを含むASCIIとLatin-1の順序付きセットをリストアップしたものです。C0 コントロール (0...31)、ASCII グラフィックス (32...7e)、削除 (7f)、C1 コントロール (80...9f)、および Latin-1 (別名 ISO 8859-1)(a0...ff)。表の中では、ASCII への Latin 1 拡張の名前には、大体</target>
        </trans-unit>
        <trans-unit id="a992ed291bf59a4f8c8642c8859ba903d7ab1f6d" translate="yes" xml:space="preserve">
          <source>The following tests are still failing for Perl 5.8.1 under QNX 6.2.0:</source>
          <target state="translated">以下のテストは、QNX 6.2.0 の下の Perl 5.8.1 でまだ失敗しています。</target>
        </trans-unit>
        <trans-unit id="679b51afc9785d4ea117543e0a14a59d2cf8f5c2" translate="yes" xml:space="preserve">
          <source>The following tests may report errors under QNX4:</source>
          <target state="translated">以下のテストでは、QNX4 でのエラーが報告されることがあります。</target>
        </trans-unit>
        <trans-unit id="3fcf934fd04c9d50192b3311166eff55a4dd9606" translate="yes" xml:space="preserve">
          <source>The following three functions copy integer, unsigned integer or double into an SV whose reference is &lt;code&gt;rv&lt;/code&gt; . SV is blessed if &lt;code&gt;classname&lt;/code&gt; is non-null.</source>
          <target state="translated">次の3つの関数は、整数、符号なし整数、またはdoubleを、参照が &lt;code&gt;rv&lt;/code&gt; であるSVにコピーします。 &lt;code&gt;classname&lt;/code&gt; がnullでない場合、SVは祝福されます。</target>
        </trans-unit>
        <trans-unit id="9965745aff45be1a5967becd8cef0c33f9e335d4" translate="yes" xml:space="preserve">
          <source>The following three functions copy integer, unsigned integer or double into an SV whose reference is &lt;code&gt;rv&lt;/code&gt;. SV is blessed if &lt;code&gt;classname&lt;/code&gt; is non-null.</source>
          <target state="translated">次の3つの関数は、整数、符号なし整数、またはdoubleを、参照が &lt;code&gt;rv&lt;/code&gt; であるSVにコピーします。 &lt;code&gt;classname&lt;/code&gt; がnull以外の場合、SVは祝福されます。</target>
        </trans-unit>
        <trans-unit id="ab708869e7683ae4c6749cf27fcceca80c5c3008" translate="yes" xml:space="preserve">
          <source>The following three macros are used to initially allocate memory :</source>
          <target state="translated">以下の 3 つのマクロを使用して、最初にメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="2d49873237bd9d666bf47ecb1ff27e7adc795d90" translate="yes" xml:space="preserve">
          <source>The following two calls behave identically:</source>
          <target state="translated">以下の2つの呼び出しは同じように動作します。</target>
        </trans-unit>
        <trans-unit id="2886be86660a6181dbf2332b9a39bde42d1bded2" translate="yes" xml:space="preserve">
          <source>The following types of change are NOT acceptable:</source>
          <target state="translated">以下のような変更は認められません。</target>
        </trans-unit>
        <trans-unit id="000a0a677c5358a2d9618715cbd6c3b2ea88fed1" translate="yes" xml:space="preserve">
          <source>The following types of change may be considered acceptable, as long as they do not also fall into any of the &quot;unacceptable&quot; categories set out below:</source>
          <target state="translated">以下のタイプの変更は、以下の「容認できない」カテゴリーに該当しない限り、容認できると考えられます。</target>
        </trans-unit>
        <trans-unit id="502bd00665528041c42b284ac29aaf12f2929946" translate="yes" xml:space="preserve">
          <source>The following values can be set by passing &lt;code&gt;config()&lt;/code&gt; a reference to a hash:</source>
          <target state="translated">次の値は、 &lt;code&gt;config()&lt;/code&gt; にハッシュへの参照を渡すことで設定できます。</target>
        </trans-unit>
        <trans-unit id="93c42f22f8e09b7cd455ba48443cb114b75d6049" translate="yes" xml:space="preserve">
          <source>The following variables are 'defined' by B::Concise; when they are used in a style, their respective values are plugged into the rendering of each opcode.</source>
          <target state="translated">以下の変数はB::Conciseによって「定義」されています;それらがスタイルで使用されるとき、それぞれの値は各オペコードのレンダリングに差し込まれます。</target>
        </trans-unit>
        <trans-unit id="706034b4d6cc89451a1849a613921860ab0e5afc" translate="yes" xml:space="preserve">
          <source>The following variables need to be set &lt;b&gt;before&lt;/b&gt; the call to the -&amp;gt;new constructor.</source>
          <target state="translated">-&amp;gt; newコンストラクタを呼び出す&lt;b&gt;前に&lt;/b&gt;、次の変数を設定&lt;b&gt;する&lt;/b&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="182dfc2e543ebf62f55632eff4a16082cef70bfe" translate="yes" xml:space="preserve">
          <source>The following variables work differently:</source>
          <target state="translated">以下の変数の動作が異なります。</target>
        </trans-unit>
        <trans-unit id="076a97e0e26cc34846172ca450710de9a3595069" translate="yes" xml:space="preserve">
          <source>The following were implemented with</source>
          <target state="translated">で実施しました。</target>
        </trans-unit>
        <trans-unit id="79ed55c53c285526808c76c6e4fadf315b9d9ae9" translate="yes" xml:space="preserve">
          <source>The following will determine the maximum length of the longest allowable pathname on the filesystem which holds</source>
          <target state="translated">以下のようにすることで、ファイルシステム上の</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
