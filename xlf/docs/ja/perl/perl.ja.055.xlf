<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="49b0c6a17d4f130bfec02b6faa0add21c28561e6" translate="yes" xml:space="preserve">
          <source>Spaces in the argument delimit distinct patterns, so &lt;code&gt;glob('*.exe *.dll')&lt;/code&gt; globs all filenames that end in &lt;code&gt;.exe&lt;/code&gt; or &lt;code&gt;.dll&lt;/code&gt;. If you want to put in literal spaces in the glob pattern, you can escape them with either double quotes, or backslashes. e.g. &lt;code&gt;glob('c:/&quot;Program Files&quot;/*/*.dll')&lt;/code&gt;, or &lt;code&gt;glob('c:/Program\ Files/*/*.dll')&lt;/code&gt;. The argument is tokenized using &lt;code&gt;Text::ParseWords::parse_line()&lt;/code&gt;, so see &lt;a href=&quot;Text::ParseWords&quot;&gt;Text::ParseWords&lt;/a&gt; for details of the quoting rules used.</source>
          <target state="translated">引数内のスペースは個別のパターンを区切るため、 &lt;code&gt;glob('*.exe *.dll')&lt;/code&gt; &lt;code&gt;.exe&lt;/code&gt; * .dll'）は.exeまたは &lt;code&gt;.dll&lt;/code&gt; で終わるすべてのファイル名をグロブします。グロブパターンにリテラルスペースを配置する場合は、二重引用符または円記号を使用してエスケープできます。例： &lt;code&gt;glob('c:/&quot;Program Files&quot;/*/*.dll')&lt;/code&gt; 、または &lt;code&gt;glob('c:/Program\ Files/*/*.dll')&lt;/code&gt; 。引数を使用してトークン化された &lt;code&gt;Text::ParseWords::parse_line()&lt;/code&gt; ので、参照&lt;a href=&quot;Text::ParseWords&quot;&gt;テキスト:: ParseWords&lt;/a&gt;使用引用規則の詳細については、を。</target>
        </trans-unit>
        <trans-unit id="20a8df9b760336178fca425339ec1c7e542a2463" translate="yes" xml:space="preserve">
          <source>Spain</source>
          <target state="translated">Spain</target>
        </trans-unit>
        <trans-unit id="39b253a2d834caa9ad3a83fa215c9eabff3effb2" translate="yes" xml:space="preserve">
          <source>Speaking of debugging, there are several pragmas available to control and debug regexps in Perl. We have already encountered one pragma in the previous section, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'eval';&lt;/code&gt; , that allows variable interpolation and code expressions to coexist in a regexp. The other pragmas are</source>
          <target state="translated">デバッグといえば、Perlで正規表現を制御およびデバッグするために使用できるプラグマがいくつかあります。前のセクションですでに1つのプラグマに遭遇しました。re &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; re 'eval';&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用してください&lt;/a&gt;。、これにより、変数補間とコード式を正規表現で共存させることができます。他のプラグマは</target>
        </trans-unit>
        <trans-unit id="0bc7408574e69956819d40445cf53d374170785f" translate="yes" xml:space="preserve">
          <source>Speaking of debugging, there are several pragmas available to control and debug regexps in Perl. We have already encountered one pragma in the previous section, &lt;code&gt;use re 'eval';&lt;/code&gt;, that allows variable interpolation and code expressions to coexist in a regexp. The other pragmas are</source>
          <target state="translated">デバッグと言えば、Perlで正規表現を制御およびデバッグするために使用できるプラグマがいくつかあります。前のセクションですでに1つのプラグマに遭遇しました &lt;code&gt;use re 'eval';&lt;/code&gt; 、これにより、変数の補間とコード式を正規表現で共存させることができます。他のプラグマは</target>
        </trans-unit>
        <trans-unit id="5cdd144975003eba8959b061eba84041ab9e203b" translate="yes" xml:space="preserve">
          <source>Speaking of the build directory. Do I have to clean it up myself?</source>
          <target state="translated">ビルドディレクトリといえば 自分で掃除しないといけないのかな?</target>
        </trans-unit>
        <trans-unit id="cf16c389cb12320d4c2b7cc5db763c0d5676df4a" translate="yes" xml:space="preserve">
          <source>Speaking of things like &lt;code&gt;@{$AoA[$i]}&lt;/code&gt; , the following are actually the same thing:</source>
          <target state="translated">&lt;code&gt;@{$AoA[$i]}&lt;/code&gt; ようなものといえば、以下は実際には同じものです。</target>
        </trans-unit>
        <trans-unit id="83aa40d82b5ec161297d7a176f14d055b800dde4" translate="yes" xml:space="preserve">
          <source>Speaking of things like &lt;code&gt;@{$AoA[$i]}&lt;/code&gt;, the following are actually the same thing:</source>
          <target state="translated">&lt;code&gt;@{$AoA[$i]}&lt;/code&gt; ようなものと言えば、以下は実際には同じものです。</target>
        </trans-unit>
        <trans-unit id="942078ca2d04f25545a316c123a392c4d5d339fd" translate="yes" xml:space="preserve">
          <source>Special</source>
          <target state="translated">Special</target>
        </trans-unit>
        <trans-unit id="735223734da1211964b616a8067d85971e38faaf" translate="yes" xml:space="preserve">
          <source>Special &lt;code&gt;make test&lt;/code&gt; targets</source>
          <target state="translated">特製 &lt;code&gt;make test&lt;/code&gt; ターゲット</target>
        </trans-unit>
        <trans-unit id="fdfdc56af4901b065f0b9e0022efafcd50dad6b5" translate="yes" xml:space="preserve">
          <source>Special Backtracking Control Verbs</source>
          <target state="translated">特殊逆走制御動詞</target>
        </trans-unit>
        <trans-unit id="59f265692e8532f3f9f4cf8098a358d626fbb2eb" translate="yes" xml:space="preserve">
          <source>Special Cases</source>
          <target state="translated">特殊なケース</target>
        </trans-unit>
        <trans-unit id="c09831be5235393e990f8ebc035a5453fef09355" translate="yes" xml:space="preserve">
          <source>Special Characters Inside a Bracketed Character Class</source>
          <target state="translated">括弧文字クラスの中の特殊文字</target>
        </trans-unit>
        <trans-unit id="076a0893de022e884b65708a98aa1abe56ee52c6" translate="yes" xml:space="preserve">
          <source>Special Keys for &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; を&lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;ための特別なキー</target>
        </trans-unit>
        <trans-unit id="fd43bdf2a69d1a862223b1bbefa15cce4dedd0cb" translate="yes" xml:space="preserve">
          <source>Special Keys for &lt;code&gt;use overload&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;use overload&lt;/code&gt; を使用するための特別なキー</target>
        </trans-unit>
        <trans-unit id="f1bc7b98edc6763e9d6c0abf8b4fa80886e2046f" translate="yes" xml:space="preserve">
          <source>Special Keys for use overload</source>
          <target state="translated">使用過負荷のための特別なキー</target>
        </trans-unit>
        <trans-unit id="749ad8df41c6024cc71b56ff395f77ccf401c88e" translate="yes" xml:space="preserve">
          <source>Special Literals</source>
          <target state="translated">特殊文字</target>
        </trans-unit>
        <trans-unit id="d4cb1cbcc64290386b7c11a130ff81a51320cc9f" translate="yes" xml:space="preserve">
          <source>Special Patterns</source>
          <target state="translated">特殊パターン</target>
        </trans-unit>
        <trans-unit id="f4d1e4b7e421f179bd6711768af6fd760a8db942" translate="yes" xml:space="preserve">
          <source>Special Topics</source>
          <target state="translated">スペシャルトピックス</target>
        </trans-unit>
        <trans-unit id="93e61da05b321c91a757c91aeb83a231cf936002" translate="yes" xml:space="preserve">
          <source>Special behaviors for OS X</source>
          <target state="translated">OS Xの特殊な動作</target>
        </trans-unit>
        <trans-unit id="e0e39ed69d2c670390ee8a8802b8ef63f9291065" translate="yes" xml:space="preserve">
          <source>Special floating point: infinity (Inf) and not-a-number (NaN)</source>
          <target state="translated">特殊浮動小数点:無限大(Inf)と非数(NaN)</target>
        </trans-unit>
        <trans-unit id="ca393fa33bfec26b8152f3f8b37c3b963f3cd851" translate="yes" xml:space="preserve">
          <source>Special make test targets</source>
          <target state="translated">スペシャルメイクテストターゲット</target>
        </trans-unit>
        <trans-unit id="3bc242af481a6d0584675ca62d67c528336abb44" translate="yes" xml:space="preserve">
          <source>Special note should be made of the return values for a few properties:</source>
          <target state="translated">いくつかのプロパティの戻り値には特に注意が必要です。</target>
        </trans-unit>
        <trans-unit id="b129e56f9be43046b321c79a90495916b0276970" translate="yes" xml:space="preserve">
          <source>Special package variables when using &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt;, see &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;. Because of this specialness &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; don't need to be declared (using &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; , or &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our()&lt;/a&gt;&lt;/code&gt;) even when using the &lt;code&gt;strict 'vars'&lt;/code&gt; pragma. Don't lexicalize them with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $a&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $b&lt;/code&gt; if you want to be able to use them in the &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; comparison block or function.</source>
          <target state="translated">特殊パッケージ変数使用して &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; 、参照の&lt;a href=&quot;functions/sort&quot;&gt;並べ替え&lt;/a&gt;。このspecialnessはのため &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; 宣言する必要はありません（使用して &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; か、 &lt;code&gt;&lt;a href=&quot;functions/our&quot;&gt;our()&lt;/a&gt;&lt;/code&gt; ）を使用した場合でも、 &lt;code&gt;strict 'vars'&lt;/code&gt; プラグマ。それらを語彙化しないでください &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $a&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $b&lt;/code&gt; あなたがそれらを使用することができるようにしたい場合は &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; 比較ブロックまたは機能。</target>
        </trans-unit>
        <trans-unit id="11283dda6b65d5275c4aa3ef39c12903730f96b2" translate="yes" xml:space="preserve">
          <source>Special package variables when using &lt;code&gt;sort()&lt;/code&gt;, see &lt;a href=&quot;perlfunc#sort&quot;&gt;&quot;sort&quot; in perlfunc&lt;/a&gt;. Because of this specialness &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; don't need to be declared (using &lt;code&gt;use vars&lt;/code&gt;, or &lt;code&gt;our()&lt;/code&gt;) even when using the &lt;code&gt;strict 'vars'&lt;/code&gt; pragma. Don't lexicalize them with &lt;code&gt;my $a&lt;/code&gt; or &lt;code&gt;my $b&lt;/code&gt; if you want to be able to use them in the &lt;code&gt;sort()&lt;/code&gt; comparison block or function.</source>
          <target state="translated">&lt;code&gt;sort()&lt;/code&gt; を使用する場合の特別なパッケージ変数&lt;a href=&quot;perlfunc#sort&quot;&gt;。perlfuncの「sort」を&lt;/a&gt;参照してください。このspecialnessはのため &lt;code&gt;$a&lt;/code&gt; と &lt;code&gt;$b&lt;/code&gt; 宣言する必要はありません（使用して &lt;code&gt;use vars&lt;/code&gt; か、 &lt;code&gt;our()&lt;/code&gt; ）を使用した場合でも、 &lt;code&gt;strict 'vars'&lt;/code&gt; プラグマ。それらを語彙化しないでください &lt;code&gt;my $a&lt;/code&gt; または &lt;code&gt;my $b&lt;/code&gt; あなたがそれらを使用することができるようにしたい場合は &lt;code&gt;sort()&lt;/code&gt; 比較ブロックまたは機能。</target>
        </trans-unit>
        <trans-unit id="c400e57824d764b6a1f1b8ed067b982b5491dad3" translate="yes" xml:space="preserve">
          <source>Special regop that is used by &lt;code&gt;re_intuit_start()&lt;/code&gt; to check if a pattern can match at a certain position. For instance if the regex engine knows that the pattern must start with a 'Z' then it can scan the string until it finds one and then launch the regex engine from there. The routine that handles this is called &lt;code&gt;find_by_class()&lt;/code&gt; . Sometimes this field points at a regop embedded in the program, and sometimes it points at an independent synthetic regop that has been constructed by the optimiser.</source>
          <target state="translated">パターンが特定の位置で一致するかどうかを確認するために &lt;code&gt;re_intuit_start()&lt;/code&gt; によって使用される特別なregop 。たとえば、パターンが「Z」で始まる必要があることを正規表現エンジンが認識している場合、文字列が見つかるまで文字列をスキャンし、そこから正規表現エンジンを起動できます。これを処理するルーチンは、 &lt;code&gt;find_by_class()&lt;/code&gt; と呼ばれます。このフィールドは、プログラムに組み込まれたレゴを指す場合もあれば、オプティマイザーによって作成された独立した合成レゴを指す場合もあります。</target>
        </trans-unit>
        <trans-unit id="52f092c6d31813604bca533dbc8c71a0c669a0b7" translate="yes" xml:space="preserve">
          <source>Special regop that is used by &lt;code&gt;re_intuit_start()&lt;/code&gt; to check if a pattern can match at a certain position. For instance if the regex engine knows that the pattern must start with a 'Z' then it can scan the string until it finds one and then launch the regex engine from there. The routine that handles this is called &lt;code&gt;find_by_class()&lt;/code&gt;. Sometimes this field points at a regop embedded in the program, and sometimes it points at an independent synthetic regop that has been constructed by the optimiser.</source>
          <target state="translated">パターンが特定の位置で一致するかどうかをチェックするために &lt;code&gt;re_intuit_start()&lt;/code&gt; によって使用される特別なregop 。たとえば、正規表現エンジンは、パターンが「Z」で始まる必要があることを認識している場合、文字列が見つかるまで文字列をスキャンし、そこから正規表現エンジンを起動できます。これを処理するルーチンは &lt;code&gt;find_by_class()&lt;/code&gt; と呼ばれます。このフィールドは、プログラムに埋め込まれたregopを指す場合もあれば、オプティマイザーによって作成された独立した合成regopを指す場合もあります。</target>
        </trans-unit>
        <trans-unit id="d7c69507b8821a1ac319bfe089337d432b752233" translate="yes" xml:space="preserve">
          <source>Special thanks to Craig Berry and Peter Prymmer (for VMS portability help), Randy Kobes (for Win32 portability help), Clinton Pierce and Autrijus Tang (for heroic eleventh-hour Win32 testing above and beyond the call of duty), Michael G Schwern (for testing advice), and the rest of the CPAN testers (for testing generally).</source>
          <target state="translated">Craig BerryとPeter Prymmer (VMSの移植性を手伝ってくれた)、Randy Kobes (Win32の移植性を手伝ってくれた)、Clinton PierceとAutrijus Tang (任務を超えた11時間目のWin32テストをしてくれた)、Michael G Schwern (テストのアドバイスをしてくれた)、そして残りのCPANテスター (一般的なテストをしてくれた)に特別な感謝の意を表します。</target>
        </trans-unit>
        <trans-unit id="5543458d832e80fa74fffef1fb3a6e0c964fd937" translate="yes" xml:space="preserve">
          <source>Special thanks to Jarkko Hietaniemi, the 5.8.0 pumpking, for including this module in the core and for his patient and helpful guidance during the integration process.</source>
          <target state="translated">このモジュールをコアに含めてくれた5.8.0 pumpkingのJarkko Hietaniemiさん、そして統合作業中に辛抱強く親切に指導してくれたJarkkoさんに特別に感謝します。</target>
        </trans-unit>
        <trans-unit id="bdc349ae3de267bae2e06e8394305bd25b3d697e" translate="yes" xml:space="preserve">
          <source>Special thanks to Tels for suggesting several speed and memory optimizations.</source>
          <target state="translated">いくつかの速度とメモリの最適化を提案してくれた Tels に感謝します。</target>
        </trans-unit>
        <trans-unit id="58c72ff51f409e740d18b159d1db36db70f1453a" translate="yes" xml:space="preserve">
          <source>Special thanks to the following people who assisted in the creation of the document.</source>
          <target state="translated">この文書の作成にご協力いただいた以下の方々に感謝いたします。</target>
        </trans-unit>
        <trans-unit id="b9982eff3f0e28f25e92903f06ecf866a5e7dab5" translate="yes" xml:space="preserve">
          <source>Special variables that have side effects when you access them or assign to them. For example, in Perl, changing elements of the &lt;code&gt;%ENV&lt;/code&gt; array also changes the corresponding environment variables that subprocesses will use. Reading the &lt;code&gt;$!&lt;/code&gt; variable gives you the current system error number or message.</source>
          <target state="translated">それらにアクセスしたり、それらに割り当てたりすると副作用を持つ特殊変数。たとえば、Perlでは、 &lt;code&gt;%ENV&lt;/code&gt; 配列の要素を変更すると、サブプロセスが使用する対応する環境変数も変更されます。 &lt;code&gt;$!&lt;/code&gt; 読んでいます！variableは、現在のシステムエラー番号またはメッセージを示します。</target>
        </trans-unit>
        <trans-unit id="100bcda8aa4f874878478525651d3bbff5ff7492" translate="yes" xml:space="preserve">
          <source>Specialised Import Lists</source>
          <target state="translated">専門輸入リスト</target>
        </trans-unit>
        <trans-unit id="7b09828591f2a4848f0494348259138540610a11" translate="yes" xml:space="preserve">
          <source>Specific (mis)features of OS/2 port</source>
          <target state="translated">OS/2ポートの具体的な(誤)機能</target>
        </trans-unit>
        <trans-unit id="f1dec8c277f6ad361d73048827b65d45acdb1217" translate="yes" xml:space="preserve">
          <source>Specific features of the Cygwin port</source>
          <target state="translated">Cygwinポートの具体的な機能</target>
        </trans-unit>
        <trans-unit id="686482526f9ca64e951de751df199a7ac0b21959" translate="yes" xml:space="preserve">
          <source>Specific for EMX port. Gives the directory part of the location for</source>
          <target state="translated">EMXポートに特化しています。の場所のディレクトリの一部を与えます。</target>
        </trans-unit>
        <trans-unit id="8719eacadd757c4d532ec01e84ca717f26242d45" translate="yes" xml:space="preserve">
          <source>Specific for EMX port. Should have the form</source>
          <target state="translated">EMXポート専用。フォームを持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="57a0519d586edded6d90f93d7b49b9ce56048c1e" translate="yes" xml:space="preserve">
          <source>Specific for EMX port. Since</source>
          <target state="translated">EMXポート専用。以降は</target>
        </trans-unit>
        <trans-unit id="3f69d6ce7ad07d5935103bd51d3ea2a5f16d4ee9" translate="yes" xml:space="preserve">
          <source>Specific for EMX port. Since &lt;a href=&quot;http://man.he.net/man3/flock&quot;&gt;flock(3)&lt;/a&gt; is present in EMX, but is not functional, it is emulated by perl. To disable the emulations, set environment variable &lt;code&gt;USE_PERL_FLOCK=0&lt;/code&gt;.</source>
          <target state="translated">EMXポートに固有です。以来、&lt;a href=&quot;http://man.he.net/man3/flock&quot;&gt;群れ（3）&lt;/a&gt; EMXに存在するが、機能していない、それは、Perlによってエミュレートされます。エミュレーションを無効にするには、環境変数 &lt;code&gt;USE_PERL_FLOCK=0&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="17684874cc7718b5fa207627bf38a956b3362a43" translate="yes" xml:space="preserve">
          <source>Specific for EMX port. Used as storage place for temporary files.</source>
          <target state="translated">EMXポート専用。一時ファイルの保管場所として使用します。</target>
        </trans-unit>
        <trans-unit id="e8a7871f78fa47c54d3b07594f2afe06c4064c9a" translate="yes" xml:space="preserve">
          <source>Specific types of access to files that can be requested via the &lt;code&gt;$uAccess&lt;/code&gt; argument to &lt;code&gt;CreateFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CreateFile&lt;/code&gt; への &lt;code&gt;$uAccess&lt;/code&gt; 引数を介して要求できるファイルへの特定のタイプのアクセス。</target>
        </trans-unit>
        <trans-unit id="f59751d539130b16033ff7290507022cfe789faf" translate="yes" xml:space="preserve">
          <source>Specifically, notice that the formatting codes are present and unescaped in</source>
          <target state="translated">具体的には、書式設定コードが</target>
        </trans-unit>
        <trans-unit id="8ee5fb071a0f4fc5995dbb8fab061746ab818f7e" translate="yes" xml:space="preserve">
          <source>Specifically, we read pathnames one at a time from the input array, and store the results in an output array (results) in the same order. If statfs fails, the element pushed onto the return array is the value of errno after the failure. If statfs succeeds, though, the value pushed onto the return array is a reference to a hash containing some of the information in the statfs structure.</source>
          <target state="translated">具体的には、入力配列からパス名を1つずつ読み込み、その結果を出力配列(結果)に同じ順番で格納していきます。statfs が失敗した場合、戻り値の配列にプッシュされる要素は、失敗後の errno の値になります。しかし statfs が成功した場合、戻り値の配列にプッシュされる値は statfs 構造体の情報の一部を含むハッシュへの参照となります。</target>
        </trans-unit>
        <trans-unit id="eda3fdece3884b319c275582d4e0949e974b3c68" translate="yes" xml:space="preserve">
          <source>Specifically: Turning on this option will disable the heuristics for seeing only files with Perl-like extensions, omitting subdirectories that are numeric but do</source>
          <target state="translated">具体的には、このオプションをオンにすると、Perl ライクな拡張子を持つファイルのみを表示するヒューリスティックが無効になります。このオプションをオンにすると、Perl ライクな拡張子を持つファイルのみを表示するヒューリスティックを無効にし、数値ではあるがサブディレクトリを省略します。</target>
        </trans-unit>
        <trans-unit id="ed81a4faa05daf1c1be51b7b8fa82d019bf30684" translate="yes" xml:space="preserve">
          <source>Specification for CPAN distribution metadata</source>
          <target state="translated">CPAN配信メタデータ仕様</target>
        </trans-unit>
        <trans-unit id="dffd2f13d0f19c68e6d18b2ad7656bd3be03e49e" translate="yes" xml:space="preserve">
          <source>Specified allowed version number formats</source>
          <target state="translated">指定された許可されたバージョン番号のフォーマット</target>
        </trans-unit>
        <trans-unit id="9358b554d9001e9e29d42fe71cb2423f6e13d1fd" translate="yes" xml:space="preserve">
          <source>Specified line by line via &lt;a href=&quot;#-e-commandline&quot;&gt;-e&lt;/a&gt; or &lt;a href=&quot;#-E-commandline&quot;&gt;-E&lt;/a&gt; switches on the command line.</source>
          <target state="translated">コマンドラインの&lt;a href=&quot;#-e-commandline&quot;&gt;-e&lt;/a&gt;または&lt;a href=&quot;#-E-commandline&quot;&gt;-E&lt;/a&gt;スイッチを介して行ごとに指定します。</target>
        </trans-unit>
        <trans-unit id="73a4072f8995fd4faf63509594cc45d51dcda62a" translate="yes" xml:space="preserve">
          <source>Specified line by line via &lt;b&gt;-e&lt;/b&gt; or &lt;b&gt;-E&lt;/b&gt; switches on the command line.</source>
          <target state="translated">コマンドラインで&lt;b&gt;-e&lt;/b&gt;または&lt;b&gt;-E&lt;/b&gt;スイッチを使用して行&lt;b&gt;ごとに&lt;/b&gt;指定します。</target>
        </trans-unit>
        <trans-unit id="acc937be340e9018f067e36d4fbe600f0ca7a48d" translate="yes" xml:space="preserve">
          <source>Specifies a TAP::Harness subclass to be used in place of TAP::Harness.</source>
          <target state="translated">TAP::Harness の代わりに使用する TAP::Harness サブクラスを指定します。</target>
        </trans-unit>
        <trans-unit id="2ccb38b1ea1946cfb54e7b524ba85568b166e308" translate="yes" xml:space="preserve">
          <source>Specifies a name to be used for the extension, e.g., -n RPC::DCE</source>
          <target state="translated">拡張機能に使用する名前を指定します。</target>
        </trans-unit>
        <trans-unit id="fb10437a9b9ee94fe2ef27d29d4fd6290157541f" translate="yes" xml:space="preserve">
          <source>Specifies an encoding to store lexicon entries, instead of utf8-strings. If set to &lt;code&gt;locale&lt;/code&gt; , the encoding from the current locale setting is used. Implies a true value for &lt;code&gt;Decode&lt;/code&gt; .</source>
          <target state="translated">utf8-stringsの代わりにレキシコンエントリを格納するエンコーディングを指定します。設定した場合 &lt;code&gt;locale&lt;/code&gt; 、現在のロケール設定からエンコードが使用されています。 &lt;code&gt;Decode&lt;/code&gt; の真の値を意味します。</target>
        </trans-unit>
        <trans-unit id="6b02361353aebba65f1252053ca8da3ec24a84ab" translate="yes" xml:space="preserve">
          <source>Specifies an encoding to store lexicon entries, instead of utf8-strings. If set to &lt;code&gt;locale&lt;/code&gt;, the encoding from the current locale setting is used. Implies a true value for &lt;code&gt;Decode&lt;/code&gt;.</source>
          <target state="translated">utf8-stringsの代わりに、レキシコンエントリを格納するエンコーディングを指定します。 &lt;code&gt;locale&lt;/code&gt; に設定されている場合、現在のロケール設定からのエンコードが使用されます。 &lt;code&gt;Decode&lt;/code&gt; の真の値を意味します。</target>
        </trans-unit>
        <trans-unit id="5288f1281b330410c08afae34819d7cfc53b87f4" translate="yes" xml:space="preserve">
          <source>Specifies any additional arguments to pass to the compiler. Should be given as a list reference containing the arguments individually, or if this is not possible, as a string containing all the arguments together.</source>
          <target state="translated">コンパイラに渡す追加の引数を指定します。引数を個別に含むリスト参照として、またはそれが不可能な場合はすべての引数を含む文字列として与えなければなりません。</target>
        </trans-unit>
        <trans-unit id="8c0fc5c465acc07c545f1645a7b4737064b57885" translate="yes" xml:space="preserve">
          <source>Specifies any additional directories in which to search for header files. May be given as a string indicating a single directory, or as a list reference indicating multiple directories.</source>
          <target state="translated">ヘッダファイルを検索する追加のディレクトリを指定します。単一のディレクトリを示す文字列として、または複数のディレクトリを示すリスト参照として指定することができます。</target>
        </trans-unit>
        <trans-unit id="df5f877cdfce163f364b76c3bfab4e6c5095d6d8" translate="yes" xml:space="preserve">
          <source>Specifies file structure for file to be transferred.</source>
          <target state="translated">転送するファイルのファイル構造を指定します。</target>
        </trans-unit>
        <trans-unit id="087e5ef636ea46b335e961f7299045a135d4c08f" translate="yes" xml:space="preserve">
          <source>Specifies how much effort bzip2 should take before resorting to a slower fallback compression algorithm.</source>
          <target state="translated">遅いフォールバック圧縮アルゴリズムに頼る前に bzip2 が取るべき労力を指定する。</target>
        </trans-unit>
        <trans-unit id="98ed6b009cf98007a6f6d9bd7e33d610c98ad8ec" translate="yes" xml:space="preserve">
          <source>Specifies one or more directories to search for the input file if it was not supplied with an absolute path. Each directory path in the given list should be separated by a ':' on Unix (';' on MSWin32 and DOS).</source>
          <target state="translated">絶対パスが与えられていない場合に、入力ファイルを検索する 1 つ以上のディレクトリを指定します。与えられたリスト内の各ディレクトリパスは、Unix では ':' で区切られなければなりません ('MSWin32 と DOS では ';' です)。</target>
        </trans-unit>
        <trans-unit id="8dd4c4abae664fff706848263f7e2a14f71871c3" translate="yes" xml:space="preserve">
          <source>Specifies source mappings for Tangut ideographs and components. This data file also includes informative radical-stroke values that are used internally by Unicode</source>
          <target state="translated">Tangut 表意文字とコンポーネントのソースマッピングを指定します。このデータファイルには、Unicode で内部的に使用されているラジカルストロークの値も含まれています。</target>
        </trans-unit>
        <trans-unit id="6e97bcf5fbd96ebc76bb798faacc45cc0f7deca3" translate="yes" xml:space="preserve">
          <source>Specifies source material for Nushu characters</source>
          <target state="translated">ヌシュのキャラクターのソース素材を指定します。</target>
        </trans-unit>
        <trans-unit id="1b9774b42720c2ff28dbc21e628ebcd3703ef058" translate="yes" xml:space="preserve">
          <source>Specifies that the source file is a C++ source file and sets appropriate compiler flags</source>
          <target state="translated">ソース ファイルが C++ソース ファイルであることを指定し、適切なコンパイラ フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="752f5b793296a2436f0f638671fc26add2789004" translate="yes" xml:space="preserve">
          <source>Specifies that this distribution shall not be processed at all.</source>
          <target state="translated">このディストリビューションを一切処理しないことを指定します。</target>
        </trans-unit>
        <trans-unit id="27c19b2359d6f4ac0335e1401df42879661c8cd1" translate="yes" xml:space="preserve">
          <source>Specifies the directory to use for the temporary directory. The temporary directory name is derived from an internal template.</source>
          <target state="translated">テンポラリディレクトリに使用するディレクトリを指定します。テンポラリディレクトリ名は内部テンプレートから取得します。</target>
        </trans-unit>
        <trans-unit id="69c1bcd4ebd70c8615309d5b9b715199cd57859f" translate="yes" xml:space="preserve">
          <source>Specifies the encoding you are converting from. Unlike &lt;b&gt;iconv&lt;/b&gt;, this option can be omitted. In such cases, the current locale is used.</source>
          <target state="translated">変換元のエンコードを指定します。&lt;b&gt;iconv&lt;/b&gt;とは異なり、このオプションは省略できます。このような場合、現在のロケールが使用されます。</target>
        </trans-unit>
        <trans-unit id="b6aabb58f01ed0bc266ebcb530fd5e3060867e4c" translate="yes" xml:space="preserve">
          <source>Specifies the encoding you are converting to. Unlike &lt;b&gt;iconv&lt;/b&gt;, this option can be omitted. In such cases, the current locale is used.</source>
          <target state="translated">変換先のエンコードを指定します。&lt;b&gt;iconv&lt;/b&gt;とは異なり、このオプションは省略できます。このような場合、現在のロケールが使用されます。</target>
        </trans-unit>
        <trans-unit id="bc14cf57cc1d526c9df38cf39a2a5e11891e51ad" translate="yes" xml:space="preserve">
          <source>Specifies the extension of the module's loadable object. For example:</source>
          <target state="translated">モジュールのロード可能なオブジェクトの拡張子を指定します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="62350db256aee74b2119a37a32d38d1a559bd3c6" translate="yes" xml:space="preserve">
          <source>Specifies the method or subroutine to use when printing error messages about POD syntax. The supplied method/subroutine</source>
          <target state="translated">POD構文に関するエラーメッセージを印刷する際に使用するメソッドまたはサブルーチンを指定します。指定されたメソッド/サブルーチン</target>
        </trans-unit>
        <trans-unit id="8490adfe21694bc6560acb4c4b017183f5259a5a" translate="yes" xml:space="preserve">
          <source>Specifies the name of the Perl module that will be created by linking. On platforms that need to do prelinking (Win32, OS/2, etc.) this is a required parameter.</source>
          <target state="translated">リンクによって作成される Perl モジュールの名前を指定します。プレリンクが必要なプラットフォーム(Win32、OS/2など)では、これは必須のパラメータです。</target>
        </trans-unit>
        <trans-unit id="f6fab30529e40665f8d0178ef7752b76fb583aec" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output executable file to create. Otherwise the &lt;code&gt;exe_file()&lt;/code&gt; method will be consulted, passing it the name of the first entry in &lt;code&gt;objects&lt;/code&gt; .</source>
          <target state="translated">作成する出力実行可能ファイルの名前を指定します。それ以外の場合は、 &lt;code&gt;exe_file()&lt;/code&gt; メソッドが調べられ、 &lt;code&gt;objects&lt;/code&gt; の最初のエントリの名前が渡されます。</target>
        </trans-unit>
        <trans-unit id="15de15454ec9b8a4605521f63e575015b98bd2c4" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output executable file to create. Otherwise the &lt;code&gt;exe_file()&lt;/code&gt; method will be consulted, passing it the name of the first entry in &lt;code&gt;objects&lt;/code&gt;.</source>
          <target state="translated">作成する出力実行可能ファイルの名前を指定します。それ以外の場合は、 &lt;code&gt;exe_file()&lt;/code&gt; メソッドが参照され、 &lt;code&gt;objects&lt;/code&gt; 最初のエントリの名前が渡されます。</target>
        </trans-unit>
        <trans-unit id="712c7b0a7198fb19bf2fcbbf1b68671ab3789d42" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output file to create. Otherwise the &lt;code&gt;object_file()&lt;/code&gt; method will be consulted, passing it the name of the &lt;code&gt;source&lt;/code&gt; file.</source>
          <target state="translated">作成する出力ファイルの名前を指定します。それ以外の場合は、 &lt;code&gt;object_file()&lt;/code&gt; メソッドが参照され、 &lt;code&gt;source&lt;/code&gt; ファイルの名前が渡されます。</target>
        </trans-unit>
        <trans-unit id="0ea5fb9dc13c7dfd946c4f0ec1f502d959136293" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output file to generate. If no file is specified, output will be written to standard output.</source>
          <target state="translated">生成する出力ファイルの名前を指定します。ファイルを指定しない場合、出力は標準出力に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="95eb37279bd4905df986dc0709bc7910f0b3037c" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output library file to create. Otherwise the &lt;code&gt;lib_file()&lt;/code&gt; method will be consulted, passing it the name of the first entry in &lt;code&gt;objects&lt;/code&gt; .</source>
          <target state="translated">作成する出力ライブラリファイルの名前を指定します。それ以外の場合は、 &lt;code&gt;lib_file()&lt;/code&gt; メソッドが調べられ、 &lt;code&gt;objects&lt;/code&gt; の最初のエントリの名前が渡されます。</target>
        </trans-unit>
        <trans-unit id="ef72e21940c27171a6511a580792ff08d2fefffd" translate="yes" xml:space="preserve">
          <source>Specifies the name of the output library file to create. Otherwise the &lt;code&gt;lib_file()&lt;/code&gt; method will be consulted, passing it the name of the first entry in &lt;code&gt;objects&lt;/code&gt;.</source>
          <target state="translated">作成する出力ライブラリファイルの名前を指定します。それ以外の場合は、 &lt;code&gt;lib_file()&lt;/code&gt; メソッドが参照され、 &lt;code&gt;objects&lt;/code&gt; 最初のエントリの名前が渡されます。</target>
        </trans-unit>
        <trans-unit id="9fc8b469ff5b98736322a31c19a8ffad03de9557" translate="yes" xml:space="preserve">
          <source>Specifies the string that will be prefixed to every line of the output. Empty string by default.</source>
          <target state="translated">出力の各行に接頭辞を付ける文字列を指定します。デフォルトでは空の文字列。</target>
        </trans-unit>
        <trans-unit id="969aa343df55e9a403d592d5b7e666d694e7c272" translate="yes" xml:space="preserve">
          <source>Specifies transfer mode (stream, block or compressed) for file to be transferred.</source>
          <target state="translated">転送するファイルの転送モード(ストリーム、ブロック、圧縮)を指定します。</target>
        </trans-unit>
        <trans-unit id="cc7f9fc804bc9d91b61a85b96105c59f7689d5aa" translate="yes" xml:space="preserve">
          <source>Specifies what to do with symbolic links whose target doesn't exist. If true and a code reference, will be called with the symbolic link name and the directory it lives in as arguments. Otherwise, if true and warnings are on, a warning of the form &lt;code&gt;&quot;symbolic_link_name is a dangling symbolic link\n&quot;&lt;/code&gt; will be issued. If false, the dangling symbolic link will be silently ignored.</source>
          <target state="translated">ターゲットが存在しないシンボリックリンクをどうするかを指定します。trueでコード参照の場合、シンボリックリンク名とそれが存在するディレクトリを引数として呼び出されます。それ以外の場合、trueで警告がオンの場合、 &lt;code&gt;&quot;symbolic_link_name is a dangling symbolic link\n&quot;&lt;/code&gt; という形式の警告が発行されます。falseの場合、ぶら下がっているシンボリックリンクは黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="b7aea723a83b432e8b220dab2e656f549c707e4d" translate="yes" xml:space="preserve">
          <source>Specifies which version of the &lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt; should be used as the format of the &lt;code&gt;provides&lt;/code&gt; output. Currently only '1.4' and '2' are supported (and their format is identical). This may change in the future as the definition of &lt;code&gt;provides&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;provides&lt;/code&gt; 出力の形式として使用する&lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN :: Meta :: Specの&lt;/a&gt;バージョンを指定します。現在、「1.4」と「2」のみがサポートされています（フォーマットは同じです）。の定義が変更されると、これは将来変更される可能性があり &lt;code&gt;provides&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e50a3555457e006ff9201a0e994fbe18d143981" translate="yes" xml:space="preserve">
          <source>Specify Perl version requirements with &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">使用するPerlバージョン要件を指定 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b40cf4bd5d43a9f1abad87e39cbbacc3be8422d6" translate="yes" xml:space="preserve">
          <source>Specify Perl version requirements with &lt;code&gt;use&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; Perlのバージョン要件を指定する</target>
        </trans-unit>
        <trans-unit id="51af544190f4d9e1d2d6358a5fcd6745e16f2552" translate="yes" xml:space="preserve">
          <source>Specify SHELL if needed - not done on Unix.</source>
          <target state="translated">必要に応じて SHELL を指定します。</target>
        </trans-unit>
        <trans-unit id="7a389cd0788a594b00d81ac38b0d5b58f982bb23" translate="yes" xml:space="preserve">
          <source>Specify a collation strength of level 1 to ignore case and diacritics, only looking at the basic character.</source>
          <target state="translated">大文字と小文字の区別を無視し、基本文字のみを見るようにレベル1の照合強度を指定します。</target>
        </trans-unit>
        <trans-unit id="fd9decfe42c6333527f5da43637561403cd51753" translate="yes" xml:space="preserve">
          <source>Specify a prefix which should be removed from the Perl function names, e.g., -p sec_rgy_ This sets up the XS &lt;b&gt;PREFIX&lt;/b&gt; keyword and removes the prefix from functions that are autoloaded via the &lt;code&gt;constant()&lt;/code&gt; mechanism.</source>
          <target state="translated">-p sec_rgy_など、Perl関数名から削除するプレフィックスを指定します。これにより、XS &lt;b&gt;PREFIX&lt;/b&gt;キーワードが設定され、 &lt;code&gt;constant()&lt;/code&gt; メカニズムを介してオートロードされる関数からプレフィックスが削除されます。</target>
        </trans-unit>
        <trans-unit id="8c37cb69f6acc79919a59db7bb047596246ded37" translate="yes" xml:space="preserve">
          <source>Specify a section to include in the output. See &lt;a href=&quot;pod/parser#SECTION-SPECIFICATIONS&quot;&gt;SECTION SPECIFICATIONS in Pod::Parser&lt;/a&gt; for the format to use for</source>
          <target state="translated">出力に含めるセクションを指定します。使用する形式については&lt;a href=&quot;pod/parser#SECTION-SPECIFICATIONS&quot;&gt;、Pod :: Parserのセクション仕様を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c842e0100e27043e97262bc2a56a8695e0228b4b" translate="yes" xml:space="preserve">
          <source>Specify a version number for this extension. This version number is added to the templates. The default is 0.01, or 0.00_01 if &lt;code&gt;-B&lt;/code&gt; is specified. The version specified should be numeric.</source>
          <target state="translated">この拡張機能のバージョン番号を指定します。このバージョン番号がテンプレートに追加されます。デフォルトは0.01、または &lt;code&gt;-B&lt;/code&gt; が指定されている場合は0.00_01です。指定されたバージョンは数値である必要があります。</target>
        </trans-unit>
        <trans-unit id="e7f58f2c2dcff1260c061c4b22f076c9afef1f52" translate="yes" xml:space="preserve">
          <source>Specify content is binary</source>
          <target state="translated">コンテンツがバイナリであることを指定</target>
        </trans-unit>
        <trans-unit id="196ff6b62a23b7ba506c7490495c47cea5d35955" translate="yes" xml:space="preserve">
          <source>Specify in seconds how long to run the command before it is killed with SIG_KILL (9), which effectively terminates it and all of its children (direct or indirect).</source>
          <target state="translated">SIG_KILL (9)でコマンドが終了するまでの時間を秒単位で指定します。</target>
        </trans-unit>
        <trans-unit id="e42f9f14e720a274b615a5fad1a17e292745c606" translate="yes" xml:space="preserve">
          <source>Specify pre-requisites in Makefile.PL or Build.PL</source>
          <target state="translated">Makefile.PLまたはBuild.PLで前提条件を指定します。</target>
        </trans-unit>
        <trans-unit id="1a3e3b8941c020b4dead165334a6a7f6f39e0c5c" translate="yes" xml:space="preserve">
          <source>Specify replacement for groff</source>
          <target state="translated">グロフの代替品を指定</target>
        </trans-unit>
        <trans-unit id="82792121ccf914c52ccf31c689a51331bdf9896b" translate="yes" xml:space="preserve">
          <source>Specify some text that will be passed into the &lt;code&gt;STDIN&lt;/code&gt; of the executed program.</source>
          <target state="translated">実行されるプログラムの &lt;code&gt;STDIN&lt;/code&gt; に渡されるテキストを指定します。</target>
        </trans-unit>
        <trans-unit id="e4f8120097eb5801ad49966dad7112d6c8bcad54" translate="yes" xml:space="preserve">
          <source>Specify stream encoding. This is the normal way to deal with encoded text, not by calling low-level functions.</source>
          <target state="translated">ストリームのエンコードを指定します。これは、低レベルの関数を呼び出してエンコードされたテキストを処理するのではなく、通常の方法です。</target>
        </trans-unit>
        <trans-unit id="8473cee86e4b03ee43a6c19c0f0dc45619e13394" translate="yes" xml:space="preserve">
          <source>Specify the HTML file to create. Output goes to STDOUT if no outfile is specified.</source>
          <target state="translated">作成するHTMLファイルを指定します。outfileが指定されていない場合はSTDOUTに出力されます。</target>
        </trans-unit>
        <trans-unit id="2deadb9e68c32c96f8a837b13d5dc23a9778d417" translate="yes" xml:space="preserve">
          <source>Specify the URL of a cascading style sheet. Also disables all HTML/CSS &lt;code&gt;style&lt;/code&gt; attributes that are output by default (to avoid conflicts).</source>
          <target state="translated">カスケードスタイルシートのURLを指定します。また、デフォルトで出力されるすべてのHTML / CSS &lt;code&gt;style&lt;/code&gt; 属性を無効にします（競合を回避するため）。</target>
        </trans-unit>
        <trans-unit id="4aa99f54409387b7146f47653777c920418ff10b" translate="yes" xml:space="preserve">
          <source>Specify the URL of cascading style sheet to link from resulting HTML file. Default is none style sheet.</source>
          <target state="translated">結果のHTMLファイルからリンクするカスケードスタイルシートのURLを指定します。デフォルトはスタイルシートなしです。</target>
        </trans-unit>
        <trans-unit id="9afcf7f83edb719a030bfbfd6d7f5c91cf7f8d6b" translate="yes" xml:space="preserve">
          <source>Specify the base directory for finding library pods.</source>
          <target state="translated">ライブラリポッドを探すためのベースディレクトリを指定します。</target>
        </trans-unit>
        <trans-unit id="44291a4ec495223a1da4f1839ae4e831f5a3c791" translate="yes" xml:space="preserve">
          <source>Specify the base directory for finding library pods. Default is the current working directory.</source>
          <target state="translated">ライブラリポッドを見つけるためのベースディレクトリを指定します。デフォルトは現在の作業ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="5753e538bcef55bd82135ab9b921c4428299f2cd" translate="yes" xml:space="preserve">
          <source>Specify the encoding for implicit byte-string upgrading</source>
          <target state="translated">暗黙のバイト列アップグレードのエンコーディングを指定します。</target>
        </trans-unit>
        <trans-unit id="bc5534a64aa32340e65ed43e45968b60d705f9fc" translate="yes" xml:space="preserve">
          <source>Specify the internal type that the constant() mechanism uses for macros. The default is IV (signed integer). Currently all macros found during the header scanning process will be assumed to have this type. Future versions of &lt;code&gt;h2xs&lt;/code&gt; may gain the ability to make educated guesses.</source>
          <target state="translated">constant（）メカニズムがマクロに使用する内部タイプを指定します。デフォルトはIV（符号付き整数）です。現在、ヘッダースキャンプロセス中に見つかったすべてのマクロは、このタイプであると想定されます。 &lt;code&gt;h2xs&lt;/code&gt; の将来のバージョンでは、知識に基づいた推測を行う機能が追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a20b2619004bea1e14f0e7f2949d240b1952dd51" translate="yes" xml:space="preserve">
          <source>Specify the number of 100K blocks bzip2 uses during compression.</source>
          <target state="translated">bzip2が圧縮時に使用する100Kのブロック数を指定する。</target>
        </trans-unit>
        <trans-unit id="1d869ecbc9c626d4a96da51d8e392c8fcdb22cdc" translate="yes" xml:space="preserve">
          <source>Specify the pod file to convert. Input is taken from STDIN if no infile is specified.</source>
          <target state="translated">変換するポッドファイルを指定します。infileが指定されていない場合はSTDINからの入力になります。</target>
        </trans-unit>
        <trans-unit id="2bed91a5a620b4aae10dcfd8cbca6e35a0ef51dd" translate="yes" xml:space="preserve">
          <source>Specify the targets for testing.</source>
          <target state="translated">テスト対象を指定します。</target>
        </trans-unit>
        <trans-unit id="21bb885000d067ff7c549508e4dd3407f52920a2" translate="yes" xml:space="preserve">
          <source>Specify the title of the resulting HTML file.</source>
          <target state="translated">結果のHTMLファイルのタイトルを指定します。</target>
        </trans-unit>
        <trans-unit id="46f23c724776424563c656a058b3155bcce7e71b" translate="yes" xml:space="preserve">
          <source>Specify version requirements for other Perl modules in the pre-requisites in your Makefile.PL or Build.PL.</source>
          <target state="translated">他のPerlモジュールのバージョン要件をMakefile.PLまたはBuild.PLの前提条件で指定します。</target>
        </trans-unit>
        <trans-unit id="8bd129aeb5d58a2d4cd81a32d015c916c4dfff29" translate="yes" xml:space="preserve">
          <source>Specify which directory is used for storing cache. Default directory is the current working directory.</source>
          <target state="translated">キャッシュの保存に使用するディレクトリを指定します。デフォルトのディレクトリは現在の作業ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="c06413cd34d05ffad8b760e0ccbb2a8039560c0e" translate="yes" xml:space="preserve">
          <source>Specify which subdirectories of the podroot contain pod files whose HTML converted forms can be linked to in cross references.</source>
          <target state="translated">ポッドルートのどのサブディレクトリに、HTML に変換されたフォームをクロスリファレンスでリンクできるポッドファイルが含まれているかを指定します。</target>
        </trans-unit>
        <trans-unit id="4ed9289cec9db507a9bd1e2cf8a443192d39f482" translate="yes" xml:space="preserve">
          <source>Specify which subdirectories of the podroot contain pod files whose HTML converted forms can be linked-to in cross-references.</source>
          <target state="translated">ポッドルートのどのサブディレクトリに、HTML に変換されたフォームを相互参照でリンクできるポッドファイルが含まれているかを指定します。</target>
        </trans-unit>
        <trans-unit id="08ce00bfc35270a0506d4be19cf439c32891aca2" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;flags&lt;/code&gt; can further restrict what is allowed and not warned on, as follows:</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; を指定すると、次のように、許可されるものと警告されないものをさらに制限できます。</target>
        </trans-unit>
        <trans-unit id="9ddb0fa6b996bdc82d7ed351288c14ade48e2fbe" translate="yes" xml:space="preserve">
          <source>Specifying I/O layers in MODE</source>
          <target state="translated">MODEでのI/Oレイヤの指定</target>
        </trans-unit>
        <trans-unit id="cda870361643b1e3b5ceca1a143c1054b6477609" translate="yes" xml:space="preserve">
          <source>Specifying VERSION as a literal of the form v5.6.1 should generally be avoided, because it leads to misleading error messages under earlier versions of Perl (that is, prior to 5.6.0) that do not support this syntax. The equivalent numeric version should be used instead.</source>
          <target state="translated">VERSION を v5.6.1 形式のリテラルとして指定するのは、この構文をサポートしていない以前のバージョンの Perl (5.6.0 より前のバージョン)では、誤解を招くようなエラーメッセージが表示されてしまうので、一般的には避けるべきです。代わりに、同等の数値バージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="4cc4c6ab0a0e40b55ad8e487edeab38628dd47f2" translate="yes" xml:space="preserve">
          <source>Specifying VERSION as a literal of the form v5.6.1 should generally be avoided, because it leads to misleading error messages under earlier versions of Perl that do not support this syntax. The equivalent numeric version should be used instead.</source>
          <target state="translated">VERSION を v5.6.1 形式のリテラルとして指定するのは、この構文をサポートしていない以前のバージョンの Perl では、 誤解を招くようなエラーメッセージが表示されてしまうため、一般的には避けるべきです。代わりに、同等の数値バージョンを使うべきです。</target>
        </trans-unit>
        <trans-unit id="b76a85ec03f0c93fc5652cb698781d576e230edd" translate="yes" xml:space="preserve">
          <source>Specifying VERSION as a numeric argument of the form 5.024001 should generally be avoided as older less readable syntax compared to v5.24.1. Before perl 5.8.0 (released in 2002), the more verbose numeric form was the only supported syntax, which is why you might see it in older code.</source>
          <target state="translated">5.024001 形式の数値引数に VERSION を指定することは、v5.24.1 に比べて古い構文で読みにくいので、一般的には避けるべきです。perl 5.8.0 (2002年リリース)以前は、より冗長な数値形式が唯一サポートされていました。</target>
        </trans-unit>
        <trans-unit id="7aa5c6fcdba9772c2f949fa78c3312ba8e176e5c" translate="yes" xml:space="preserve">
          <source>Specifying VERSION as a numeric argument of the form 5.024001 should generally be avoided as older less readable syntax compared to v5.24.1. Before perl 5.8.0 released in 2002 the more verbose numeric form was the only supported syntax, which is why you might see it in</source>
          <target state="translated">5.024001 形式の数値引数に VERSION を指定することは、v5.24.1 に比べて古い構文で読みにくいので、一般的には避けるべきです。2002 年に perl 5.8.0 がリリースされる前は、より冗長な数値形式が唯一サポートされていました。</target>
        </trans-unit>
        <trans-unit id="105a66a84ae1308320a2e6185af2d7c0f4640974" translate="yes" xml:space="preserve">
          <source>Specifying Values</source>
          <target state="translated">値の指定</target>
        </trans-unit>
        <trans-unit id="6ddacaf845437713514dee82096d8d2996a0782a" translate="yes" xml:space="preserve">
          <source>Specifying a compatibility version higher than the version of perl you are using to run h2xs will have no effect. If unspecified h2xs will default to compatibility with the version of perl you are using to run h2xs.</source>
          <target state="translated">h2xs を実行するために使用している perl のバージョンよりも高い互換性のバージョンを指定しても何の効果もありません。指定されていない場合、h2xs はデフォルトで h2xs を実行するために使用している perl のバージョンと互換性を持つようになります。</target>
        </trans-unit>
        <trans-unit id="b9ac38be3885e820db907e52feea151509c97c14" translate="yes" xml:space="preserve">
          <source>Specifying a negative flag after the caret is an error, as the flag is redundant.</source>
          <target state="translated">カレットの後に負のフラグを指定すると、フラグが冗長になるためエラーとなります。</target>
        </trans-unit>
        <trans-unit id="fcb93594508dd14f6f183606eef58af67f897bab" translate="yes" xml:space="preserve">
          <source>Specifying a negative index position greater than the number of items in the queue adds the list to the head of the queue.</source>
          <target state="translated">キュー内の項目数よりも大きい負のインデックス位置を指定すると、キューの先頭にリストが追加されます。</target>
        </trans-unit>
        <trans-unit id="0428551388a304fda9da2ce393b07c826bf5874b" translate="yes" xml:space="preserve">
          <source>Specifying a rule to allow tests to run in parallel does not make the run in parallel. You still need specify the number of parallel &lt;code&gt;jobs&lt;/code&gt; in your Harness object.</source>
          <target state="translated">テストを並行して実行できるようにルールを指定しても、並行して実行されるわけではありません。Harnessオブジェクトで並列 &lt;code&gt;jobs&lt;/code&gt; の数を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f5ae5b52602873edfea60de35a979b3a17659ea0" translate="yes" xml:space="preserve">
          <source>Specifying a rule to allow tests to run in parallel does not make them run in parallel. You still need specify the number of parallel &lt;code&gt;jobs&lt;/code&gt; in your Harness object.</source>
          <target state="translated">テストを並行して実行できるようにルールを指定しても、テストは並行して実行されません。Harnessオブジェクトで並列 &lt;code&gt;jobs&lt;/code&gt; の数を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="90e80e764794a3f53d9bd22d3f4959b3c3e8e8c0" translate="yes" xml:space="preserve">
          <source>Specifying an index position greater than the number of items in the queue just adds the list to the end.</source>
          <target state="translated">キュー内のアイテム数よりも大きなインデックス位置を指定すると、リストを末尾に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="9c224eb1496ab5698ab91d2a22838e04eaf02d0d" translate="yes" xml:space="preserve">
          <source>Specifying an index position greater than the number of items in the queue results in &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or an empty list being returned.</source>
          <target state="translated">キュー内のアイテム数より大きいインデックス位置を指定すると、 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; または空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="16018fb283b08c865834aaa6b2e024c776590ab5" translate="yes" xml:space="preserve">
          <source>Specifying an index position greater than the number of items in the queue results in &lt;code&gt;undef&lt;/code&gt; or an empty list being returned.</source>
          <target state="translated">キュー内のアイテム数よりも大きいインデックス位置を指定すると、 &lt;code&gt;undef&lt;/code&gt; または空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="d5fcdf16424ed34965445319ec725af2d142641e" translate="yes" xml:space="preserve">
          <source>Specifying mode and filename as a single argument</source>
          <target state="translated">モードとファイル名を単一の引数として指定する</target>
        </trans-unit>
        <trans-unit id="8b369061e994be9b95b9b52fd041d04e9eccbbae" translate="yes" xml:space="preserve">
          <source>Specifying sub-versions such as the &lt;code&gt;0&lt;/code&gt; in &lt;code&gt;5.14.0&lt;/code&gt; in feature bundles has no effect. Feature bundles are guaranteed to be the same for all sub-versions.</source>
          <target state="translated">機能バンドルで &lt;code&gt;5.14.0&lt;/code&gt; の &lt;code&gt;0&lt;/code&gt; などのサブバージョンを指定しても効果はありません。機能バンドルは、すべてのサブバージョンで同じであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="79a6f96c957e7feef1314dc46564cc00f5833bc6" translate="yes" xml:space="preserve">
          <source>Specifying the &quot;udp&quot; protocol causes the ping() method to send a udp packet to the remote host's echo port. If the echoed packet is received from the remote host and the received packet contains the same data as the packet that was sent, the remote host is considered reachable. This protocol does not require any special privileges. It should be borne in mind that, for a udp ping, a host will be reported as unreachable if it is not running the appropriate echo service. For Unix-like systems see</source>
          <target state="translated">udp&quot; プロトコルを指定すると、ping()メソッドはリモートホストのエコーポートに udp パケットを送信します。エコーされたパケットがリモートホストから受信され、受信したパケットに送信されたパケットと同じデータが含まれている場合、リモートホストは到達可能であるとみなされます。このプロトコルは特別な特権を必要としません。udp ping の場合、適切なエコーサービスを実行していないホストは到達不可能として報告されることを覚えておいてください。Unix 系のシステムでは</target>
        </trans-unit>
        <trans-unit id="a43e4d18241d23c364eb62d107e205d919850575" translate="yes" xml:space="preserve">
          <source>Specifying the &quot;udp&quot; protocol causes the ping() method to send a udp packet to the remote host's echo port. If the echoed packet is received from the remote host and the received packet contains the same data as the packet that was sent, the remote host is considered reachable. This protocol does not require any special privileges. It should be borne in mind that, for a udp ping, a host will be reported as unreachable if it is not running the appropriate echo service. For Unix-like systems see &lt;a href=&quot;http://man.he.net/man8/inetd&quot;&gt;inetd(8)&lt;/a&gt; for more information.</source>
          <target state="translated">「udp」プロトコルを指定すると、ping（）メソッドはudpパケットをリモートホストのエコーポートに送信します。エコーされたパケットがリモートホストから受信され、受信されたパケットに送信されたパケットと同じデータが含まれている場合、リモートホストは到達可能であると見なされます。このプロトコルには特別な特権は必要ありません。udp pingの場合、ホストが適切なエコーサービスを実行していないと、ホストが到達不能として報告されることに注意してください。Unixライクなシステムの場合、詳細については&lt;a href=&quot;http://man.he.net/man8/inetd&quot;&gt;inetd（8）&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2819720e6a0b64709090cd36c99161c9c51d2535" translate="yes" xml:space="preserve">
          <source>Specifying the G_DISCARD flag with</source>
          <target state="translated">で G_DISCARD フラグを指定する</target>
        </trans-unit>
        <trans-unit id="2d2cb022bc3d26bd1407c4aa787d5e46e1ad4c3b" translate="yes" xml:space="preserve">
          <source>Speed</source>
          <target state="translated">Speed</target>
        </trans-unit>
        <trans-unit id="40e5809be52d66c56af4f3807fbc74465fe77f2b" translate="yes" xml:space="preserve">
          <source>Spherical coordinates,</source>
          <target state="translated">球体座標です。</target>
        </trans-unit>
        <trans-unit id="0bce309883c4786c8f96950f6206dff26186fc2b" translate="yes" xml:space="preserve">
          <source>Split a directory specification into the components.</source>
          <target state="translated">ディレクトリの指定をコンポーネントに分割します。</target>
        </trans-unit>
        <trans-unit id="0e9eed69886886b90fb3afa01fba40f13ff4d0a7" translate="yes" xml:space="preserve">
          <source>Split a package for autoloading</source>
          <target state="translated">オートロードのためにパッケージを分割する</target>
        </trans-unit>
        <trans-unit id="5a8f5f6aec0e05c9fd24b5a8ca47f652c1c2ceaf" translate="yes" xml:space="preserve">
          <source>Split loop</source>
          <target state="translated">スプリットループ</target>
        </trans-unit>
        <trans-unit id="0a230284c2746978c6d208e00f352e0d6fb5d918" translate="yes" xml:space="preserve">
          <source>Split out from Safe module version 1, named opcode tags and other changes added by Tim Bunce.</source>
          <target state="translated">Tim Bunceによって追加されたSafeモジュールバージョン1、名前付きのopcodeタグ、およびその他の変更から分割されました。</target>
        </trans-unit>
        <trans-unit id="273ddbe310d23df41c94915a842b407f242c4749" translate="yes" xml:space="preserve">
          <source>Splits a path in to volume, directory, and filename portions. On systems with no concept of volume, returns '' for volume.</source>
          <target state="translated">パスをボリューム、ディレクトリ、ファイル名の部分に分割します。ボリュームの概念がないシステムでは、ボリュームに対して '' を返します。</target>
        </trans-unit>
        <trans-unit id="334895ed21abe595a625b2f1658f99e01bbe8d40" translate="yes" xml:space="preserve">
          <source>Splits a path into volume, directory, and filename portions.</source>
          <target state="translated">パスをボリューム、ディレクトリ、ファイル名の部分に分割します。</target>
        </trans-unit>
        <trans-unit id="9683042273a4ecd00e523d0bde1551fc4f8c1380" translate="yes" xml:space="preserve">
          <source>Splits a path into volume, directory, and filename portions. Assumes that the last file is a path unless the path ends in '\\', '\\.', '\\..' or $no_file is true. On Win32 this means that $no_file true makes this return ( $volume, $path, '' ).</source>
          <target state="translated">Splits a path into volume,directory,and filename portions.最後のファイルは、パスが '\\','\...','\...' で終わらない限り、パスであると仮定します。Win32では、$no_fileがtrueだと、このように返されます($volume,$path,'' ).</target>
        </trans-unit>
        <trans-unit id="86fed3cc24e2d19645e7064b9a14b47a5f182fe6" translate="yes" xml:space="preserve">
          <source>Splits a path into volume, directory, and filename portions. On systems with no concept of volume, returns '' for volume.</source>
          <target state="translated">パスをボリューム、ディレクトリ、ファイル名の部分に分割します。ボリュームの概念がないシステムでは、ボリュームに対して '' を返します。</target>
        </trans-unit>
        <trans-unit id="5d39c4c6b066b235387ae82c04d47c7856f6398b" translate="yes" xml:space="preserve">
          <source>Splits the string EXPR into a list of strings and returns the list in list context, or the size of the list in scalar context.</source>
          <target state="translated">文字列EXPRを文字列のリストに分割し、リストコンテキストではリストを、スカラコンテキストではリストのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="2936a94e1d47596e4e39d9256be18597c3aa4179" translate="yes" xml:space="preserve">
          <source>Splits the string EXPR into a list of strings and returns the list in list context, or the size of the list in scalar context. (Prior to Perl 5.11, it also overwrote &lt;code&gt;@_&lt;/code&gt; with the list in void and scalar context. If you target old perls, beware.)</source>
          <target state="translated">文字列EXPRを文字列のリストに分割し、リストコンテキストのリスト、またはスカラーコンテキストのリストのサイズを返します。（Perl 5.11より前は、ボイドおよびスカラーコンテキストのリストで &lt;code&gt;@_&lt;/code&gt; も上書きされていました。古いperlをターゲットにする場合は、注意してください。）</target>
        </trans-unit>
        <trans-unit id="250f996321b0ccf8a0a091d8ad8d1f0defcbee6b" translate="yes" xml:space="preserve">
          <source>Splitting up a program text into &lt;b&gt;tokens&lt;/b&gt;. Also known as &amp;ldquo;lexing&amp;rdquo;, in which case you get &amp;ldquo;lexemes&amp;rdquo; instead of tokens.</source>
          <target state="translated">プログラムのテキストを&lt;b&gt;トークンに&lt;/b&gt;分割&lt;b&gt;する&lt;/b&gt;。「字句解析」とも呼ばれます。この場合、トークンの代わりに「語彙素」が取得されます。</target>
        </trans-unit>
        <trans-unit id="ff729dbb2771278d79c384030e9caa881a4db264" translate="yes" xml:space="preserve">
          <source>Spool to system printer on close.</source>
          <target state="translated">システムプリンタにスプールします。</target>
        </trans-unit>
        <trans-unit id="81fc00753787683a6ac1541ee8a68b3aa017c6a5" translate="yes" xml:space="preserve">
          <source>Spurious text after =pod / =cut</source>
          <target state="translated">ポッド/=カットの後のスプリアステキスト</target>
        </trans-unit>
        <trans-unit id="44359690bcaf314432bdd57278be918c222c6a77" translate="yes" xml:space="preserve">
          <source>Square Brackets</source>
          <target state="translated">スクエアブラケット</target>
        </trans-unit>
        <trans-unit id="785ca9526809c90e3417966be7d5844fd2a0c5c8" translate="yes" xml:space="preserve">
          <source>Stability</source>
          <target state="translated">Stability</target>
        </trans-unit>
        <trans-unit id="dab8825d9ab14cb0ae9c8c35a6b41109eb0231a8" translate="yes" xml:space="preserve">
          <source>Stabilized</source>
          <target state="translated">Stabilized</target>
        </trans-unit>
        <trans-unit id="699cbcfa1d2de31b511ffab2c2a0ef9730993e7e" translate="yes" xml:space="preserve">
          <source>Stable CPAN modules</source>
          <target state="translated">安定したCPANモジュール</target>
        </trans-unit>
        <trans-unit id="0c37e4671699616f1b661a8adda9cc25f7e7c380" translate="yes" xml:space="preserve">
          <source>Stable modules should maintain backwards compatibility</source>
          <target state="translated">安定したモジュールは下位互換性を維持する必要があります。</target>
        </trans-unit>
        <trans-unit id="e59f32f5132f95bd8522cf0423d93b2b074371e3" translate="yes" xml:space="preserve">
          <source>Stack Manipulation Macros</source>
          <target state="translated">スタック操作マクロ</target>
        </trans-unit>
        <trans-unit id="d3f19bccf79868f3c579b95c4b4aa5c3173cdfc2" translate="yes" xml:space="preserve">
          <source>Stack Overflow is a free question-and-answer site for programmers. It's not focussed solely on Perl, but it does have an active group of users who do their best to help people with their Perl programming questions.</source>
          <target state="translated">Stack Overflow はプログラマのための無料の質問と回答のサイトです。Perl だけに焦点を当てたサイトではありませんが、Perl プログラミングの質問に全力で答えるアクティブなユーザーグループがあります。</target>
        </trans-unit>
        <trans-unit id="79c0915aad1c8e4662635799d017c78213056099" translate="yes" xml:space="preserve">
          <source>Stack Trace formatting</source>
          <target state="translated">スタックトレースの書式設定</target>
        </trans-unit>
        <trans-unit id="bed6dbd7b4c6ff7ccd34126ec3ad733b680488ca" translate="yes" xml:space="preserve">
          <source>Stack backtrace</source>
          <target state="translated">スタックバックトレース</target>
        </trans-unit>
        <trans-unit id="5fbdf4bd83f4cf97cb14bdbe17601c9d4a7b9b2b" translate="yes" xml:space="preserve">
          <source>Stack marker variable for the XSUB. See &lt;code&gt;&lt;a href=&quot;#dMARK&quot;&gt;&quot;dMARK&quot;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">XSUBのスタックマーカー変数。 &lt;code&gt;&lt;a href=&quot;#dMARK&quot;&gt;&quot;dMARK&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="c32c5432806926c51af3a6d722094d1b8498ee67" translate="yes" xml:space="preserve">
          <source>Stack marker variable for the XSUB. See &lt;code&gt;dMARK&lt;/code&gt; .</source>
          <target state="translated">XSUBのスタックマーカー変数。 &lt;code&gt;dMARK&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="abb5c52ccc52723cd1612e07bb13d70407d8e476" translate="yes" xml:space="preserve">
          <source>Stack pointer. This is usually handled by &lt;code&gt;xsubpp&lt;/code&gt; . See &lt;code&gt;dSP&lt;/code&gt; and &lt;code&gt;SPAGAIN&lt;/code&gt; .</source>
          <target state="translated">スタックポインター。これは通常 &lt;code&gt;xsubpp&lt;/code&gt; によって処理されます。 &lt;code&gt;dSP&lt;/code&gt; と &lt;code&gt;SPAGAIN&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8f089b00d917131a98e897f79444313cdb238edf" translate="yes" xml:space="preserve">
          <source>Stack pointer. This is usually handled by &lt;code&gt;xsubpp&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;#dSP&quot;&gt;&quot;dSP&quot;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;SPAGAIN&lt;/code&gt;.</source>
          <target state="translated">スタックポインタ。これは通常、 &lt;code&gt;xsubpp&lt;/code&gt; によって処理されます。 &lt;code&gt;&lt;a href=&quot;#dSP&quot;&gt;&quot;dSP&quot;&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;SPAGAIN&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7eeeffb91b556017b0569617dac90bb982af82c6" translate="yes" xml:space="preserve">
          <source>Stack size discussion: &lt;a href=&quot;http://www.perlmonks.org/?node_id=532956&quot;&gt;http://www.perlmonks.org/?node_id=532956&lt;/a&gt;</source>
          <target state="translated">スタックサイズの説明：&lt;a href=&quot;http://www.perlmonks.org/?node_id=532956&quot;&gt;http&lt;/a&gt; : //www.perlmonks.org/?node_id=532956</target>
        </trans-unit>
        <trans-unit id="154b31259cd2c2ec7e9e63fa8a80cdb8ccfd16a7" translate="yes" xml:space="preserve">
          <source>Stack size discussion: &lt;a href=&quot;https://www.perlmonks.org/?node_id=532956&quot;&gt;https://www.perlmonks.org/?node_id=532956&lt;/a&gt;</source>
          <target state="translated">スタックサイズの議論：&lt;a href=&quot;https://www.perlmonks.org/?node_id=532956&quot;&gt;https&lt;/a&gt;：//www.perlmonks.org/？node_id = 532956</target>
        </trans-unit>
        <trans-unit id="249f056b552dcec0dec16b7eed3b2513cf1351f3" translate="yes" xml:space="preserve">
          <source>Stacks</source>
          <target state="translated">Stacks</target>
        </trans-unit>
        <trans-unit id="5972ab200f32099d27f68650121e9738cdd0e0dc" translate="yes" xml:space="preserve">
          <source>Standard Exports</source>
          <target state="translated">標準輸出</target>
        </trans-unit>
        <trans-unit id="615e5b98a32ea52bb60f7df7a2666749db3e59ab" translate="yes" xml:space="preserve">
          <source>Standard I/O functions via VMS extensions</source>
          <target state="translated">VMS拡張による標準I/O機能</target>
        </trans-unit>
        <trans-unit id="eba63c181dd248d4b5bba8f0065bbb50178505fc" translate="yes" xml:space="preserve">
          <source>Standard Library</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="fbc014247a90e3e9471cd43027f6ed1dd5022323" translate="yes" xml:space="preserve">
          <source>Standard Modules</source>
          <target state="translated">標準モジュール</target>
        </trans-unit>
        <trans-unit id="c9c684d7aa085e9385f19a731c50f29d333142bb" translate="yes" xml:space="preserve">
          <source>Standard TAP formatter</source>
          <target state="translated">標準TAPフォーマッタ</target>
        </trans-unit>
        <trans-unit id="fcb1fc559ce28778664dae993a8bd3c9c1e13c04" translate="yes" xml:space="preserve">
          <source>Standard codes for country identification</source>
          <target state="translated">国を識別するための標準コード</target>
        </trans-unit>
        <trans-unit id="60f2260734e540712fc0b3a84eed77018b10ca66" translate="yes" xml:space="preserve">
          <source>Standard codes for currency identification</source>
          <target state="translated">通貨識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="b5deda2e5280ead9cecc60bbf30d177abf9ec4ea" translate="yes" xml:space="preserve">
          <source>Standard codes for language extension identification</source>
          <target state="translated">言語拡張識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="f2ee3631bc2f34f1c73413a9d2061ce03c5ab44f" translate="yes" xml:space="preserve">
          <source>Standard codes for language identification</source>
          <target state="translated">言語識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="10a16afeaf36afe90baa03b4e90894540cc06be0" translate="yes" xml:space="preserve">
          <source>Standard codes for language variation identification</source>
          <target state="translated">言語バリエーション識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="b1589d1520251236f9eb362681e4874ce8c5e9ee" translate="yes" xml:space="preserve">
          <source>Standard codes for script identification</source>
          <target state="translated">スクリプト識別のための標準コード</target>
        </trans-unit>
        <trans-unit id="5d6d11511a070bcf17fa4eb2391ebf6e7a493c05" translate="yes" xml:space="preserve">
          <source>Standard modules with VMS-specific differences</source>
          <target state="translated">VMS固有の違いを持つ標準モジュール</target>
        </trans-unit>
        <trans-unit id="de92c20ac3781f514b3f3e2c2c6d7cf3cd1b6af8" translate="yes" xml:space="preserve">
          <source>Standard, bundled modules are all expected to behave in a well-defined manner with respect to namespace pollution because they use the Exporter module. See their own documentation for details.</source>
          <target state="translated">標準でバンドルされているモジュールはすべて、Exporter モジュールを使用しているため、名前空間の汚染に関しては、きちんと定義された方法で動作することが期待されています。詳細はそれぞれのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="06d642894968e30a189e062bc83886c6edaae47c" translate="yes" xml:space="preserve">
          <source>StandardizedVariants.html</source>
          <target state="translated">StandardizedVariants.html</target>
        </trans-unit>
        <trans-unit id="8e0bc2ae4e7dee6efa427af24dac0f51946576f0" translate="yes" xml:space="preserve">
          <source>StandardizedVariants.txt</source>
          <target state="translated">StandardizedVariants.txt</target>
        </trans-unit>
        <trans-unit id="8f1eb352b92791858ba92c3002eb4f33fe75c02e" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Create if none&quot;. If the requested file does not exist, then it is created and then opened. This is the default if &lt;code&gt;GENERIC_WRITE&lt;/code&gt; access has been requested or if &lt;code&gt;&quot;t&quot;&lt;/code&gt; or &lt;code&gt;&quot;n&quot;&lt;/code&gt; was specified. Contrast with &lt;code&gt;&quot;e&quot;&lt;/code&gt;.</source>
          <target state="translated">「Createifnone」の略です。要求されたファイルが存在しない場合は、作成されてから開かれます。これは、 &lt;code&gt;GENERIC_WRITE&lt;/code&gt; アクセスが要求された場合、または &lt;code&gt;&quot;t&quot;&lt;/code&gt; または &lt;code&gt;&quot;n&quot;&lt;/code&gt; が指定された場合のデフォルトです。 &lt;code&gt;&quot;e&quot;&lt;/code&gt; と対比。</target>
        </trans-unit>
        <trans-unit id="822e0e0d7c446c8fe35f0a8dc97579be22addccb" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Existing file only&quot;. If the requested file does not exist, then nothing is opened and the &lt;code&gt;createFile&lt;/code&gt; call fails. This is the default unless &lt;code&gt;GENERIC_WRITE&lt;/code&gt; access has been requested or &lt;code&gt;&quot;t&quot;&lt;/code&gt; or &lt;code&gt;&quot;n&quot;&lt;/code&gt; was specified. Contrast with &lt;code&gt;&quot;c&quot;&lt;/code&gt;. Can't be used with &lt;code&gt;&quot;n&quot;&lt;/code&gt;.</source>
          <target state="translated">「既存のファイルのみ」の略です。要求されたファイルが存在しない場合、何も開かれず、 &lt;code&gt;createFile&lt;/code&gt; 呼び出しは失敗します。これは、 &lt;code&gt;GENERIC_WRITE&lt;/code&gt; アクセスが要求されているか、 &lt;code&gt;&quot;t&quot;&lt;/code&gt; または &lt;code&gt;&quot;n&quot;&lt;/code&gt; が指定されていない限り、デフォルトです。 &lt;code&gt;&quot;c&quot;&lt;/code&gt; と対比。 &lt;code&gt;&quot;n&quot;&lt;/code&gt; との併用はできません。</target>
        </trans-unit>
        <trans-unit id="652ad6f84c10dfa8eb50a6eccca9974ed76fa82f" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Keep if exists&quot;. If the requested file exists, then it is opened. This is the default unless &lt;code&gt;GENERIC_WRITE&lt;/code&gt; access has been requested but &lt;code&gt;GENERIC_READ&lt;/code&gt; access has not been requested. Contrast with &lt;code&gt;&quot;t&quot;&lt;/code&gt; and &lt;code&gt;&quot;n&quot;&lt;/code&gt;.</source>
          <target state="translated">「存在する場合は保持する」の略です。要求されたファイルが存在する場合は、それが開かれます。これは、 &lt;code&gt;GENERIC_WRITE&lt;/code&gt; アクセスが要求されているが、 &lt;code&gt;GENERIC_READ&lt;/code&gt; アクセスが要求されていない場合を除いて、デフォルトです。 &lt;code&gt;&quot;t&quot;&lt;/code&gt; および &lt;code&gt;&quot;n&quot;&lt;/code&gt; と対比してください。</target>
        </trans-unit>
        <trans-unit id="b97906deb67c16b9ab59b8c8cd40f5544710588f" translate="yes" xml:space="preserve">
          <source>Stands for &quot;New file only&quot;. If the requested file exists, then it is not opened and the &lt;code&gt;createFile&lt;/code&gt; call fails. Contrast with &lt;code&gt;&quot;k&quot;&lt;/code&gt; and &lt;code&gt;&quot;t&quot;&lt;/code&gt;. Can't be used with &lt;code&gt;&quot;e&quot;&lt;/code&gt;.</source>
          <target state="translated">「新規ファイルのみ」の略です。要求されたファイルが存在する場合、そのファイルは開かれず、 &lt;code&gt;createFile&lt;/code&gt; 呼び出しは失敗します。 &lt;code&gt;&quot;k&quot;&lt;/code&gt; および &lt;code&gt;&quot;t&quot;&lt;/code&gt; と対比してください。 &lt;code&gt;&quot;e&quot;&lt;/code&gt; との併用はできません。</target>
        </trans-unit>
        <trans-unit id="65a514e0a0fb34443686dd34171dc3a164f90121" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Query access&quot;. This is really a no-op since you always have query access when you open a file. You can specify &lt;code&gt;&quot;q&quot;&lt;/code&gt; to document that you plan to query the file [or device, etc.]. This is especially helpful when you don't want read nor write access since something like &lt;code&gt;&quot;q&quot;&lt;/code&gt; or &lt;code&gt;&quot;q ke&quot;&lt;/code&gt; may be easier to understand than just &lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;&quot;ke&quot;&lt;/code&gt;.</source>
          <target state="translated">「クエリアクセス」の略です。ファイルを開くときは常にクエリアクセス権があるため、これは実際には何もしません。 &lt;code&gt;&quot;q&quot;&lt;/code&gt; を指定して、ファイル[またはデバイスなど]にクエリを実行する予定のドキュメントを作成できます。これは、 &lt;code&gt;&quot;q&quot;&lt;/code&gt; や &lt;code&gt;&quot;q ke&quot;&lt;/code&gt; ようなものは、単に &lt;code&gt;&quot;&quot;&lt;/code&gt; や &lt;code&gt;&quot;ke&quot;&lt;/code&gt; よりも理解しやすいため、読み取りアクセスや書き込みアクセスを望まない場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="eca1e430d40009621884ba6704cb12fdbd5a5f0a" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Read access&quot;. Sets the &lt;code&gt;GENERIC_READ&lt;/code&gt; bit(s) in the &lt;code&gt;$uAccess&lt;/code&gt; that is passed to &lt;code&gt;CreateFile&lt;/code&gt;. This is the default access if the &lt;code&gt;$svAccess&lt;/code&gt; parameter is missing [or if it is &lt;code&gt;undef&lt;/code&gt; and &lt;code&gt;$rvhvOptions&lt;/code&gt; doesn't specify an &lt;code&gt;&quot;Access&quot;&lt;/code&gt; option].</source>
          <target state="translated">「読み取りアクセス」の略です。 &lt;code&gt;CreateFile&lt;/code&gt; に渡される &lt;code&gt;$uAccess&lt;/code&gt; の &lt;code&gt;GENERIC_READ&lt;/code&gt; ビットを設定します。これは、 &lt;code&gt;$svAccess&lt;/code&gt; パラメーターが欠落している場合[またはそれが &lt;code&gt;undef&lt;/code&gt; であり、 &lt;code&gt;$rvhvOptions&lt;/code&gt; が &lt;code&gt;&quot;Access&quot;&lt;/code&gt; オプションを指定していない場合]のデフォルトのアクセスです。</target>
        </trans-unit>
        <trans-unit id="dd7a0d1e7c51667204657dcea2b802a67f1a4440" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Truncate if exists&quot;. If the requested file exists, then it is truncated to zero length and then opened. This is the default if &lt;code&gt;GENERIC_WRITE&lt;/code&gt; access has been requested and &lt;code&gt;GENERIC_READ&lt;/code&gt; access has not been requested. Contrast with &lt;code&gt;&quot;k&quot;&lt;/code&gt; and &lt;code&gt;&quot;n&quot;&lt;/code&gt;.</source>
          <target state="translated">「存在する場合は切り捨て」の略です。要求されたファイルが存在する場合、そのファイルは長さがゼロに切り捨てられてから開かれます。これは、 &lt;code&gt;GENERIC_WRITE&lt;/code&gt; アクセスが要求され、 &lt;code&gt;GENERIC_READ&lt;/code&gt; アクセスが要求されていない場合のデフォルトです。 &lt;code&gt;&quot;k&quot;&lt;/code&gt; および &lt;code&gt;&quot;n&quot;&lt;/code&gt; と対比してください。</target>
        </trans-unit>
        <trans-unit id="481c6b37648dd19153bdddeac4cc38f4916dae94" translate="yes" xml:space="preserve">
          <source>Stands for &quot;Write access&quot;. Sets the &lt;code&gt;GENERIC_WRITE&lt;/code&gt; bit(s) in the &lt;code&gt;$uAccess&lt;/code&gt; that is passed to &lt;code&gt;CreateFile&lt;/code&gt;.</source>
          <target state="translated">「書き込みアクセス」の略です。 &lt;code&gt;CreateFile&lt;/code&gt; に渡される &lt;code&gt;$uAccess&lt;/code&gt; の &lt;code&gt;GENERIC_WRITE&lt;/code&gt; ビットを設定します。</target>
        </trans-unit>
        <trans-unit id="07142f93c49bc59a674f3cf54cfc45c16742e4f3" translate="yes" xml:space="preserve">
          <source>Stands for &amp;ldquo;Database Management&amp;rdquo; routines, a set of routines that emulate an &lt;b&gt;associative array&lt;/b&gt; using disk files. The routines use a dynamic hashing scheme to locate any entry with only two disk accesses. DBM files allow a Perl program to keep a persistent &lt;b&gt;hash&lt;/b&gt; across multiple invocations. You can &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; your hash variables to various DBM implementations.</source>
          <target state="translated">「データベース管理」ルーチンの略で、ディスクファイルを使用して&lt;b&gt;連想配列&lt;/b&gt;をエミュレートする一連のルーチンです。ルーチンは、動的ハッシュスキームを使用して、2回のディスクアクセスのみでエントリを検索します。DBMファイルを使用すると、Perlプログラムは複数の呼び出しにわたって永続的な&lt;b&gt;ハッシュ&lt;/b&gt;を保持できます。あなたはできる &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; 、様々なDBM実装にあなたのハッシュ変数を。</target>
        </trans-unit>
        <trans-unit id="1a775e3592f8bbe5e3864eeff5292ad588cc2550" translate="yes" xml:space="preserve">
          <source>Stands for &amp;ldquo;Database Management&amp;rdquo; routines, a set of routines that emulate an &lt;b&gt;associative array&lt;/b&gt; using disk files. The routines use a dynamic hashing scheme to locate any entry with only two disk accesses. DBM files allow a Perl program to keep a persistent &lt;b&gt;hash&lt;/b&gt; across multiple invocations. You can &lt;code&gt;tie&lt;/code&gt; your hash variables to various DBM implementations.</source>
          <target state="translated">「データベース管理」ルーチンの略で、ディスクファイルを使用して&lt;b&gt;連想配列&lt;/b&gt;をエミュレートする一連のルーチンです。ルーチンは動的ハッシュスキームを使用して、2回のディスクアクセスのみでエントリを検索します。DBMファイルを使用すると、Perlプログラムは複数の呼び出しにわたって永続的な&lt;b&gt;ハッシュ&lt;/b&gt;を保持できます。あなたはできる &lt;code&gt;tie&lt;/code&gt; 、様々なDBM実装にあなたのハッシュ変数を。</target>
        </trans-unit>
        <trans-unit id="912db97dd4f77a0ec4611c2eb6976e694df9c91d" translate="yes" xml:space="preserve">
          <source>Start by familiarizing yourself with &lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP::Parser::Source&lt;/a&gt; and &lt;a href=&quot;TAP::Parser::IteratorFactory&quot;&gt;TAP::Parser::IteratorFactory&lt;/a&gt;. &lt;a href=&quot;TAP::Parser::SourceHandler::RawTAP&quot;&gt;TAP::Parser::SourceHandler::RawTAP&lt;/a&gt; is the easiest sub-class to use as an example.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser::Source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt;と&lt;a href=&quot;TAP::Parser::IteratorFactory&quot;&gt;TAP :: Parser :: IteratorFactoryに&lt;/a&gt;慣れることから始めます。&lt;a href=&quot;TAP::Parser::SourceHandler::RawTAP&quot;&gt;TAP :: Parser :: SourceHandler :: RawTAP&lt;/a&gt;は、例として使用するのが最も簡単なサブクラスです。</target>
        </trans-unit>
        <trans-unit id="c1dfbc7a4324027580845858a63c6abfc58480ed" translate="yes" xml:space="preserve">
          <source>Start iPKGui. Install the packages &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;coreutils&lt;/code&gt;.</source>
          <target state="translated">iPKGuiを起動します。パッケージ &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;gcc&lt;/code&gt; 、 &lt;code&gt;coreutils&lt;/code&gt; をインストールします。</target>
        </trans-unit>
        <trans-unit id="42ab44220e1cd65314352df58f468e908b8005a5" translate="yes" xml:space="preserve">
          <source>Start logging each disk request in a buffer internal to the disk device driver of size &lt;code&gt;$uLogBufferSize&lt;/code&gt;:</source>
          <target state="translated">サイズ &lt;code&gt;$uLogBufferSize&lt;/code&gt; ディスクデバイスドライバーの内部バッファーに各ディスク要求のログ記録を開始します。</target>
        </trans-unit>
        <trans-unit id="32e3debe4cf1141c3184e11a9dc572fab1423447" translate="yes" xml:space="preserve">
          <source>Start position and no-match optimisations</source>
          <target state="translated">開始位置とノーマッチ最適化</target>
        </trans-unit>
        <trans-unit id="db76cc0f3f883ec9a2ed91694d94f4588b9f7245" translate="yes" xml:space="preserve">
          <source>Start up an interval timer: after a certain time, a signal ($which) arrives, and more signals may keep arriving at certain intervals. To disable an &quot;itimer&quot;, use &lt;code&gt;$floating_seconds&lt;/code&gt; of zero. If the &lt;code&gt;$interval_floating_seconds&lt;/code&gt; is set to zero (or unspecified), the timer is disabled &lt;b&gt;after&lt;/b&gt; the next delivered signal.</source>
          <target state="translated">インターバルタイマーを起動します。特定の時間の後、シグナル（$ which）が到着し、特定のインターバルでさらにシグナルが到着し続ける場合があります。「itimer」を無効にするには、ゼロの &lt;code&gt;$floating_seconds&lt;/code&gt; を使用します。場合は &lt;code&gt;$interval_floating_seconds&lt;/code&gt; ゼロ（または未指定）に設定され、タイマーが無効になってい&lt;b&gt;た後、&lt;/b&gt;次の配信信号。</target>
        </trans-unit>
        <trans-unit id="06610ff85775ebe35f7b8f21af74dc2942b66fd2" translate="yes" xml:space="preserve">
          <source>Start using Devel::PPPort for XS projects</source>
          <target state="translated">XS プロジェクトで Devel::PPPort の使用開始</target>
        </trans-unit>
        <trans-unit id="8dc3261b7747ff88ddb552066307bdb160a93102" translate="yes" xml:space="preserve">
          <source>Start with</source>
          <target state="translated">から始める</target>
        </trans-unit>
        <trans-unit id="bf54d336f01982c7f36b58a5973054d7f918d05e" translate="yes" xml:space="preserve">
          <source>Start with a dummy run of h2xs:</source>
          <target state="translated">h2xsのダミーランから始めます。</target>
        </trans-unit>
        <trans-unit id="8d112be587c3b58ec2b08ad08b5f28537f049d9b" translate="yes" xml:space="preserve">
          <source>Start with single-step on.</source>
          <target state="translated">シングルステップオンからスタート。</target>
        </trans-unit>
        <trans-unit id="8332767a94ccaf8b2674f5e407c13b8594261e03" translate="yes" xml:space="preserve">
          <source>Start with the first letter in the string 'a'.</source>
          <target state="translated">文字列'a'の最初の文字から始めます。</target>
        </trans-unit>
        <trans-unit id="be46870dc50c93db69a63c772d7b331eea2b204f" translate="yes" xml:space="preserve">
          <source>Start with the first letter in the string 't'.</source>
          <target state="translated">文字列't'の最初の文字から始めます。</target>
        </trans-unit>
        <trans-unit id="e5189aa41c41bf90fef351656e01e6473fbaf249" translate="yes" xml:space="preserve">
          <source>Start your Perl program</source>
          <target state="translated">Perl プログラムを起動します。</target>
        </trans-unit>
        <trans-unit id="9f05ee38f1d8c4b639d2c05f6f7cb39a8f63ba62" translate="yes" xml:space="preserve">
          <source>Start-tokens from Pod::Simple::PullParser</source>
          <target state="translated">Pod::Simple::PullParserからのスタートトークン</target>
        </trans-unit>
        <trans-unit id="bba3dd50f7eb62963e78abd741a6ecb84d7e0e92" translate="yes" xml:space="preserve">
          <source>Starting From Scratch</source>
          <target state="translated">スクラッチからのスタート</target>
        </trans-unit>
        <trans-unit id="d9722acfd050423d2f793d245909513d9f792a51" translate="yes" xml:space="preserve">
          <source>Starting OS/2 (and DOS) programs under Perl</source>
          <target state="translated">Perl で OS/2 (および DOS)プログラムを起動する</target>
        </trans-unit>
        <trans-unit id="6a454cb163d40a3be765256333ed856099e340c6" translate="yes" xml:space="preserve">
          <source>Starting Perl in the VMS debugger may change the program execution profile in a way that such problems are not reproduced.</source>
          <target state="translated">VMS デバッガで Perl を起動すると、そのような問題が再現されないようにプログラムの実行プロファイルが変更されることがあります。</target>
        </trans-unit>
        <trans-unit id="61b2b3d56b228f00035d9baf98e67307d761a53f" translate="yes" xml:space="preserve">
          <source>Starting Perl programs under AmigaOS</source>
          <target state="translated">AmigaOSでのPerlプログラムの起動</target>
        </trans-unit>
        <trans-unit id="0aee4d40c0b8d064ab00858293dabb8236e2cf55" translate="yes" xml:space="preserve">
          <source>Starting Perl programs under AmigaOS 4.1</source>
          <target state="translated">AmigaOS 4.1でのPerlプログラムの起動</target>
        </trans-unit>
        <trans-unit id="c712909317e062b2443119b81f61884099ac7f3f" translate="yes" xml:space="preserve">
          <source>Starting Perl programs under OS/2 (and DOS and...)</source>
          <target state="translated">OS/2(およびDOSと...)でPerlプログラムを起動する</target>
        </trans-unit>
        <trans-unit id="653f89b4c2f41c0d0134c806e923d3709fc205d1" translate="yes" xml:space="preserve">
          <source>Starting from IO::Zlib version 1.02, IO::Zlib can also use an external</source>
          <target state="translated">IO::Zlib バージョン 1.02 以降、IO::Zlib は外部の</target>
        </trans-unit>
        <trans-unit id="a508a2e273548a63bb5c0b07719e420fe300b9fd" translate="yes" xml:space="preserve">
          <source>Starting from OS/400 V5R2 the IBM Visual Age compiler is supported on OS/400 PASE, so it is possible to build Perl natively on OS/400. The easier way, however, is to compile in AIX, as just described.</source>
          <target state="translated">OS/400 V5R2からIBM Visual AgeコンパイラはOS/400 PASEでサポートされているので、OS/400上でPerlをネイティブにビルドすることができます。しかし、より簡単な方法は、先ほど説明したように AIX でコンパイルすることです。</target>
        </trans-unit>
        <trans-unit id="5e473385f5209d49f3d6236a23d69b61072e12c5" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.10.1 (well, 5.10.0, but it didn't work right), you can say</source>
          <target state="translated">Perl 5.10.1 (まあ、5.10.0ですが、正しく動作しませんでした)から始めると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="213483245e12096ac5558b413cc608887022de0d" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.6 Perl has had some level of multibyte character support. Perl 5.8 or later is recommended. Supported multibyte character repertoires include Unicode, and legacy encodings through the Encode module. See &lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;, &lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;, and &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt;.</source>
          <target state="translated">Perl 5.6以降、Perlはある程度のマルチバイト文字をサポートしています。Perl 5.8以降が推奨されます。サポートされているマルチバイト文字のレパートリーには、Unicode、およびEncodeモジュールによるレガシーエンコーディングが含まれます。&lt;a href=&quot;perluniintro&quot;&gt;perluniintro&lt;/a&gt;、&lt;a href=&quot;perlunicode&quot;&gt;perlunicode&lt;/a&gt;、および&lt;a href=&quot;encode&quot;&gt;Encodeを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f3401e5a549f724e4569e770d48d8137b822e30b" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.7.2 (and consequently 5.8.x / 5.10.x / 5.12.x) and AIX 4.3 or newer Perl uses the AIX native dynamic loading interface in the so called runtime linking mode instead of the emulated interface that was used in Perl releases 5.6.1 and earlier or, for AIX releases 4.2 and earlier. This change does break backward compatibility with compiled modules from earlier Perl releases. The change was made to make Perl more compliant with other applications like Apache/mod_perl which are using the AIX native interface. This change also enables the use of C++ code with static constructors and destructors in Perl extensions, which was not possible using the emulated interface.</source>
          <target state="translated">Perl 5.7.2 (結果として 5.8.x/5.10.x/5.12.x)および AIX 4.3 以降の Perl では、Perl 5.6.1 以前の Perl リリースや AIX 4.2 以前の Perl リリースで使用されていたエミュレートされたインターフェイスの代わりに、いわゆるランタイムリンクモードで AIX ネイティブのダイナミックローディングインターフェイスを使用しています。この変更により、以前の Perl リリースからコンパイルされたモジュールとの下位互換性が失われます。この変更は、AIX ネイティブインタフェースを使用している Apache/mod_perl のような他のアプリケーションに Perl をより準拠させるために行われました。この変更はまた、エミュレートされたインタフェースを使用していなかった Perl 拡張で静的なコンストラクタとデストラクタを持つ C++コードの使用を可能にします。</target>
        </trans-unit>
        <trans-unit id="25d510ae8cee14025ed8b7521c9e7b4803c6e585" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8 Filter::Util::Call (the core part of the Source Filters distribution) is part of the standard Perl distribution. Also included is a friendlier interface called Filter::Simple, by Damian Conway.</source>
          <target state="translated">Perl 5.8 以降、Filter::Util::Call (Source Filters ディストリビューションのコア部分)は標準 Perl ディストリビューションの一部となっています。また、Damian Conway による Filter::Simple と呼ばれるより親しみやすいインターフェイスも含まれています。</target>
        </trans-unit>
        <trans-unit id="84131be03444ffa9bfcdc4607ace523b2b4abf69" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8 you can use the standard module Encode to translate from EBCDIC to Latin-1 code points. Encode knows about more EBCDIC character sets than Perl can currently be compiled to run on.</source>
          <target state="translated">Perl 5.8 からは、標準モジュール Encode を使用して EBCDIC から Latin-1 コードポイントに翻訳することができます。Encode は、Perl が現在コンパイルして実行できるよりも多くの EBCDIC 文字セットについて知っています。</target>
        </trans-unit>
        <trans-unit id="b494835e5e76badb9fdcdcf6ee9b4a757213c9dc" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8, a source filter module, &lt;code&gt;Switch&lt;/code&gt; , can also be used to get switch and case. Its use is now discouraged, because it's not fully compatible with the native switch of Perl 5.10, and because, as it's implemented as a source filter, it doesn't always work as intended when complex syntax is involved.</source>
          <target state="translated">Perl 5.8以降、ソースフィルターモジュール &lt;code&gt;Switch&lt;/code&gt; を使用して、スイッチと大文字小文字を取得することもできます。 Perl 5.10のネイティブスイッチと完全に互換性がなく、またソースフィルターとして実装されているため、複雑な構文が含まれている場合、意図したとおりに機能しない場合があるため、その使用は現在推奨されていません。</target>
        </trans-unit>
        <trans-unit id="d155ec5cb50db186fa8a14b8502428201e840a22" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8, a source filter module, &lt;code&gt;Switch&lt;/code&gt;, can also be used to get switch and case. Its use is now discouraged, because it's not fully compatible with the native switch of Perl 5.10, and because, as it's implemented as a source filter, it doesn't always work as intended when complex syntax is involved.</source>
          <target state="translated">Perl 5.8以降では、ソースフィルターモジュールである &lt;code&gt;Switch&lt;/code&gt; を使用して、スイッチとケースを取得することもできます。 Perl 5.10のネイティブスイッチと完全に互換性がなく、ソースフィルターとして実装されているため、複雑な構文が含まれる場合は常に意図したとおりに機能するとは限らないため、現在は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="a6f4302390c39dc69e8bb4ae56d84681737deb52" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8, in C/C++ level Perl knows how to wrap system/library interfaces that have thread-aware versions (e.g. getpwent_r()) into frontend macros (e.g. getpwent()) that correctly handle the multithreaded interaction with the Perl interpreter. This will happen transparently, the only thing you need to do is to instantiate a Perl interpreter.</source>
          <target state="translated">Perl 5.8 以降、C/C++レベルでは、Perl はスレッドを考慮したバージョンのシステム/ライブラリインターフェイス (例:getpwent_r())を、Perl インタプリタとのマルチスレッドインタラクションを正しく処理するフロントエンドマクロ (例:getpwent())にラップする方法を知っています。これは透過的に行われ、必要なのは Perl インタプリタのインスタンスを作成することだけです。</target>
        </trans-unit>
        <trans-unit id="d0ecdc5671ad43a21bb3ba4b49951928dc27fb67" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8.1 different runs of Perl will have different ordering of hash keys. The change was done for greater security, see &lt;a href=&quot;../perlsec#Algorithmic-Complexity-Attacks&quot;&gt;Algorithmic Complexity Attacks in perlsec&lt;/a&gt;. This means that different runs of Perl will have different Data::Dumper outputs if the data contains hashes. If you need to have identical Data::Dumper outputs from different runs of Perl, use the environment variable PERL_HASH_SEED, see &lt;a href=&quot;../perlrun#PERL_HASH_SEED&quot;&gt;PERL_HASH_SEED in perlrun&lt;/a&gt;. Using this restores the old (platform-specific) ordering: an even prettier solution might be to use the &lt;code&gt;Sortkeys&lt;/code&gt; filter of Data::Dumper.</source>
          <target state="translated">Perl 5.8.1以降では、Perlの実行ごとにハッシュキーの順序が異なります。この変更はセキュリティを強化するために行われまし&lt;a href=&quot;../perlsec#Algorithmic-Complexity-Attacks&quot;&gt;た。PerlsecのAlgorithmic Complexity Attacksを&lt;/a&gt;参照してください。つまり、データにハッシュが含まれている場合、Perlの実行ごとに異なるData :: Dumper出力が生成されます。 Perlの異なる実行からの同一のData :: Dumper出力が必要な場合は、環境変数PERL_HASH_SEEDを使用します。perlrunのPERL_HASH_SEEDを参照&lt;a href=&quot;../perlrun#PERL_HASH_SEED&quot;&gt;してください&lt;/a&gt;。これを使用すると、古い（プラットフォーム固有の）順序が復元されます。より &lt;code&gt;Sortkeys&lt;/code&gt; されたソリューションとして、Data :: DumperのSortkeysフィルターを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f68deda9f44fedf246c9591657da44f835e61c6d" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.8.1 different runs of Perl will have different ordering of hash keys. The change was done for greater security, see &lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;&quot;Algorithmic Complexity Attacks&quot; in perlsec&lt;/a&gt;. This means that different runs of Perl will have different Data::Dumper outputs if the data contains hashes. If you need to have identical Data::Dumper outputs from different runs of Perl, use the environment variable PERL_HASH_SEED, see &lt;a href=&quot;perlrun#PERL_HASH_SEED&quot;&gt;&quot;PERL_HASH_SEED&quot; in perlrun&lt;/a&gt;. Using this restores the old (platform-specific) ordering: an even prettier solution might be to use the &lt;code&gt;Sortkeys&lt;/code&gt; filter of Data::Dumper.</source>
          <target state="translated">Perl 5.8.1以降、Perlを実行するたびに、ハッシュキーの順序が異なります。この変更は、セキュリティを強化するために行われまし&lt;a href=&quot;perlsec#Algorithmic-Complexity-Attacks&quot;&gt;た。perlsecの「AlgorithmicComplexityAttacks」を&lt;/a&gt;参照してください。これは、データにハッシュが含まれている場合、Perlの実行が異なればData :: Dumperの出力も異なることを意味します。 Perlの異なる実行からの同一のData :: Dumper出力が必要な場合は、環境変数PERL_HASH_SEEDを使用します。perlrunの&lt;a href=&quot;perlrun#PERL_HASH_SEED&quot;&gt;「PERL_HASH_SEED」を&lt;/a&gt;参照してください。これを使用すると、古い（プラットフォーム固有の）順序が復元されます。さらにきれいな解決策は、Data :: &lt;code&gt;Sortkeys&lt;/code&gt; フィルターを使用することです。</target>
        </trans-unit>
        <trans-unit id="54b73ef5c7c43845a94f049a96a2982af7951ff5" translate="yes" xml:space="preserve">
          <source>Starting from Perl 5.9.4 the following extra flags are added:</source>
          <target state="translated">Perl 5.9.4 以降、以下のフラグが追加されました。</target>
        </trans-unit>
        <trans-unit id="d0f3b9a37d935e7c453cae03a9fc889658a8b375" translate="yes" xml:space="preserve">
          <source>Starting from Perl v5.6.0, Perl has had the capacity to handle Unicode natively. Perl v5.8.0, however, is the first recommended release for serious Unicode work. The maintenance release 5.6.1 fixed many of the problems of the initial Unicode implementation, but for example regular expressions still do not work with Unicode in 5.6.1. Perl v5.14.0 is the first release where Unicode support is (almost) seamlessly integrable without some gotchas (the exception being some differences in &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;, and that is fixed starting in Perl 5.16.0). To enable this seamless support, you should &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; (which is automatically selected if you &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher). See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;. (5.14 also fixes a number of bugs and departures from the Unicode standard.)</source>
          <target state="translated">Perl v5.6.0から、PerlはUnicodeをネイティブで処理する機能を備えています。ただし、Perl v5.8.0は、本格的なUnicode作業に推奨される最初のリリースです。メンテナンスリリース5.6.1は、初期のUnicode実装の問題の多くを修正しましたが、たとえば、正規表現は5.6.1のUnicodeではまだ機能しません。 Perlのv5.14.0は、いくつかの落とし穴（例外にいくつかの違いことなくシームレス積分Unicodeサポートが（ほとんど）で最初のリリースであり&lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;、かつ、Perlの5.16.0に開始固定されています）。このシームレスなサポートを有効にするには、次のことを行う必要があり &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; （あなたがあれば自動的に選択された &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 以上）。&lt;a href=&quot;feature&quot;&gt;機能を&lt;/a&gt;見る。（5.14では、多くのバグとUnicode標準からの逸脱も修正されています。）</target>
        </trans-unit>
        <trans-unit id="df97b58d295ae07b3c7e368fabefa9c327ce3a5a" translate="yes" xml:space="preserve">
          <source>Starting from Perl v5.6.0, Perl has had the capacity to handle Unicode natively. Perl v5.8.0, however, is the first recommended release for serious Unicode work. The maintenance release 5.6.1 fixed many of the problems of the initial Unicode implementation, but for example regular expressions still do not work with Unicode in 5.6.1. Perl v5.14.0 is the first release where Unicode support is (almost) seamlessly integrable without some gotchas. (There are a few exceptions. Firstly, some differences in &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;quotemeta&lt;/a&gt; were fixed starting in Perl 5.16.0. Secondly, some differences in &lt;a href=&quot;perlop#Range-Operators&quot;&gt;the range operator&lt;/a&gt; were fixed starting in Perl 5.26.0. Thirdly, some differences in &lt;a href=&quot;perlfunc#split&quot;&gt;split&lt;/a&gt; were fixed started in Perl 5.28.0.)</source>
          <target state="translated">Perl v5.6.0以降、PerlにはUnicodeをネイティブに処理する機能があります。ただし、Perl v5.8.0は、本格的なUnicode作業に推奨される最初のリリースです。メンテナンスリリース5.6.1は、最初のUnicode実装の問題の多くを修正しましたが、たとえば、正規表現は5.6.1のUnicodeではまだ機能しません。 Perl v5.14.0は、Unicodeサポートが（ほぼ）シームレスに統合できる最初のリリースであり、いくつかの問題はありません。 （いくつかの例外があります。最初に、&lt;a href=&quot;perlfunc#quotemeta&quot;&gt;quotemetaの&lt;/a&gt;いくつかの違いがPerl 5.16.0で修正されました。次に、&lt;a href=&quot;perlop#Range-Operators&quot;&gt;範囲演算子の&lt;/a&gt;いくつかの違いがPerl 5.26.0で修正されました。3番目に、&lt;a href=&quot;perlfunc#split&quot;&gt;splitの&lt;/a&gt;いくつかの違いがPerlで修正されました。 5.28.0。）</target>
        </trans-unit>
        <trans-unit id="416a20fa36c19a41cf13089d9b7e6cda76a07463" translate="yes" xml:space="preserve">
          <source>Starting from perl 5.7.1 perl uses the Solaris malloc, since the perl malloc breaks when dealing with more than 2GB of memory, and the Solaris malloc also seems to be faster.</source>
          <target state="translated">perl 5.7.1からperlはSolarisのmallocを使用しています。なぜなら、perlのmallocは2GB以上のメモリを扱うと壊れてしまうからです。</target>
        </trans-unit>
        <trans-unit id="e6f60ae2145b9aa31e782db73fe39a61dbb6b373" translate="yes" xml:space="preserve">
          <source>Starting from the beginning of the input string, each 8-tuple of characters is converted to 1 character of output. With format &lt;code&gt;b&lt;/code&gt; , the first character of the 8-tuple determines the least-significant bit of a character; with format &lt;code&gt;B&lt;/code&gt; , it determines the most-significant bit of a character.</source>
          <target state="translated">入力文字列の先頭から開始して、8タプルの各文字が1文字の出力に変換されます。フォーマット &lt;code&gt;b&lt;/code&gt; では、8タプルの最初の文字が文字の最下位ビットを決定します。フォーマット &lt;code&gt;B&lt;/code&gt; では、文字の最上位ビットを決定します。</target>
        </trans-unit>
        <trans-unit id="924f79553c56797f30f757475a664dc8c52550ae" translate="yes" xml:space="preserve">
          <source>Starting from the beginning of the input string, each 8-tuple of characters is converted to 1 character of output. With format &lt;code&gt;b&lt;/code&gt;, the first character of the 8-tuple determines the least-significant bit of a character; with format &lt;code&gt;B&lt;/code&gt;, it determines the most-significant bit of a character.</source>
          <target state="translated">入力文字列の先頭から、8タプルの各文字が1文字の出力に変換されます。フォーマット &lt;code&gt;b&lt;/code&gt; では、8タプルの最初の文字が文字の最下位ビットを決定します。フォーマット &lt;code&gt;B&lt;/code&gt; では、文字の最上位ビットを決定します。</target>
        </trans-unit>
        <trans-unit id="34a530103a351aa6cda54d5b0c4c2b630750302d" translate="yes" xml:space="preserve">
          <source>Starting from the beginning of the template to &lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt;&lt;code&gt;pack&lt;/code&gt;&lt;/a&gt;, each pair of characters is converted to 1 character of output. With format &lt;code&gt;h&lt;/code&gt;, the first character of the pair determines the least-significant nybble of the output character; with format &lt;code&gt;H&lt;/code&gt;, it determines the most-significant nybble.</source>
          <target state="translated">テンプレートの最初から&lt;a href=&quot;#pack-TEMPLATE%2CLIST&quot;&gt; &lt;code&gt;pack&lt;/code&gt; &lt;/a&gt;、文字の各ペアは1文字の出力に変換されます。形式 &lt;code&gt;h&lt;/code&gt; の場合、ペアの最初の文字が出力文字の最下位のニブルを決定します。フォーマット &lt;code&gt;H&lt;/code&gt; では、最も重要なニブルを決定します。</target>
        </trans-unit>
        <trans-unit id="bca54402551e7931f104cb3acd73bb3d87fc7a43" translate="yes" xml:space="preserve">
          <source>Starting from the beginning of the template to pack(), each pair of characters is converted to 1 character of output. With format &lt;code&gt;h&lt;/code&gt; , the first character of the pair determines the least-significant nybble of the output character; with format &lt;code&gt;H&lt;/code&gt; , it determines the most-significant nybble.</source>
          <target state="translated">テンプレートの最初からpack（）まで、文字の各ペアは1文字の出力に変換されます。フォーマット &lt;code&gt;h&lt;/code&gt; では、ペアの最初の文字が出力文字の最下位ニブルを決定します。形式 &lt;code&gt;H&lt;/code&gt; では、最も重要なニブルを決定します。</target>
        </trans-unit>
        <trans-unit id="e0719e57793beb804762734f954a0430e8236ad0" translate="yes" xml:space="preserve">
          <source>Starting from the top, this says &lt;code&gt;$b&lt;/code&gt; is an SV. The scalar is an IV, which is capable of holding an integer or reference value. It has the &lt;code&gt;ROK&lt;/code&gt; flag set, meaning it is a reference (rather than an integer or string). Notice that Dump follows the reference and shows us what &lt;code&gt;$b&lt;/code&gt; was referencing. We see the same &lt;code&gt;$a&lt;/code&gt; that we found in the previous example.</source>
          <target state="translated">上から、これは &lt;code&gt;$b&lt;/code&gt; がSVであることを示しています。スカラーは、整数値または参照値を保持できるIVです。 &lt;code&gt;ROK&lt;/code&gt; フラグが設定されています。つまり、整数または文字列ではなく参照です。Dumpが参照に従い、 &lt;code&gt;$b&lt;/code&gt; が参照していたものを示していることに注意してください。前の例と同じ &lt;code&gt;$a&lt;/code&gt; が表示されます。</target>
        </trans-unit>
        <trans-unit id="0542c0de06c1b01762ccd40a6fe67b90b3556cde" translate="yes" xml:space="preserve">
          <source>Starting from version 5.8, Perl uses a builtin translation layer for text-mode files. This replaces the efficient well-tested EMX layer by some code which should be best characterized as a &quot;quick hack&quot;.</source>
          <target state="translated">バージョン 5.8 から、Perl はテキストモードファイルのための組み込みの翻訳レイヤーを使用しています。これは、効率的で十分にテストされた EMX レイヤーを、&quot;クイックハック &quot;として最もよく特徴づけられるべきコードによって置き換えます。</target>
        </trans-unit>
        <trans-unit id="889838782f9044eb1988a4e66547d5f47a179ecb" translate="yes" xml:space="preserve">
          <source>Starting in 5.28, changing locales on threaded builds is supported on systems that offer thread-safe locale functions. These include POSIX 2008 systems and Windows starting with Visual Studio 2005, and this module will work properly in such situations. However, on threaded builds on Windows prior to Visual Studio 2015, retrieving the items &lt;code&gt;CRNCYSTR&lt;/code&gt; and &lt;code&gt;THOUSEP&lt;/code&gt; can result in a race with a thread that has converted to use the global locale. It is quite uncommon for a thread to have done this. It would be possible to construct a workaround for this; patches welcome: see &lt;a href=&quot;perlapi#switch_to_global_locale&quot;&gt;&quot;switch_to_global_locale&quot; in perlapi&lt;/a&gt;.</source>
          <target state="translated">5.28以降、スレッドビルドでのロケールの変更は、スレッドセーフなロケール関数を提供するシステムでサポートされています。これらには、POSIX2008システムおよびVisualStudio 2005以降のWindowsが含まれ、このモジュールはこのような状況で適切に機能します。ただし、Visual Studio 2015より前のWindowsでのスレッドビルドでは、アイテム &lt;code&gt;CRNCYSTR&lt;/code&gt; および &lt;code&gt;THOUSEP&lt;/code&gt; を取得すると、グローバルロケールを使用するように変換されたスレッドとの競合が発生する可能性があります。スレッドがこれを行うことは非常にまれです。このための回避策を構築することは可能です。パッチを歓迎し&lt;a href=&quot;perlapi#switch_to_global_locale&quot;&gt;ます&lt;/a&gt;：perlapiの「switch_to_global_locale」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c52cca7c60b1d846e7ee0624e6dbe1baa1d2c524" translate="yes" xml:space="preserve">
          <source>Starting in 5.32, the Name, Name Aliases, and Named Sequences properties are allowed to be matched. They are considered to be a single combination property, just as has long been the case for &lt;code&gt;\N{}&lt;/code&gt;. Loose matching doesn't work in exactly the same way for these as it does for the values of other properties. The rules are given in &lt;a href=&quot;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&quot;&gt;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&lt;/a&gt;. As a result, Perl doesn't try loose matching for you, like it does in other properties. All letters in names are uppercase, but you can add &lt;code&gt;(?i)&lt;/code&gt; to your subpattern to ignore case. If you're uncertain where a blank is, you can use &lt;code&gt; ?&lt;/code&gt; in your subpattern. No character name contains an underscore, so don't bother trying to match one. The use of hyphens is particularly problematic; refer to the above link. But note that, as of Unicode 13.0, the only script in modern usage which has weirdnesses with these is Tibetan; also the two Korean characters U+116C HANGUL JUNGSEONG OE and U+1180 HANGUL JUNGSEONG O-E. Unicode makes no promises to not add hyphen-problematic names in the future.</source>
          <target state="translated">5.32以降、Name、Name Aliases、およびNamedSequencesのプロパティを一致させることができます。 &lt;code&gt;\N{}&lt;/code&gt; 場合と同様に、これらは単一の組み合わせプロパティと見なされます。緩いマッチングは、他のプロパティの値の場合とまったく同じようには機能しません。ルールは&lt;a href=&quot;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2&quot;&gt;https://www.unicode.org/reports/tr44/tr44-24.html#UAX44-LM2に&lt;/a&gt;記載されています。その結果、Perlは他のプロパティのようにルーズマッチングを試みません。名前の文字はすべて大文字ですが、大文字と小文字を無視するようにサブパターンに &lt;code&gt;(?i)&lt;/code&gt; を追加できます。空白がどこにあるかわからない場合は、？を使用できます &lt;code&gt; ?&lt;/code&gt; サブパターンで。文字名にアンダースコアが含まれていないため、わざわざアンダースコアを一致させないでください。ハイフンの使用は特に問題があります。上記のリンクを参照してください。ただし、Unicode 13.0の時点で、これらに奇妙な点がある現代の使用法のスクリプトはチベット語だけであることに注意してください。また、2つの韓国語文字U + 116C HANGUL JUNGSEONGOEとU + 1180 HANGUL JUNGSEONGOE。 Unicodeは、将来ハイフンに問題のある名前を追加しないことを約束しません。</target>
        </trans-unit>
        <trans-unit id="ac77222ae2e654fdac46266902dcc915cb8e811b" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.12.0, &lt;code&gt;\N&lt;/code&gt; also can have an additional meaning (only) in patterns, namely to match a non-newline character. (This is short for &lt;code&gt;[^\n]&lt;/code&gt;, and like &lt;code&gt;.&lt;/code&gt; but is not affected by the &lt;code&gt;/s&lt;/code&gt; regex modifier.)</source>
          <target state="translated">Perl 5.12.0から、 &lt;code&gt;\N&lt;/code&gt; はパターンで（のみ）追加の意味を持つこともできます。つまり、改行以外の文字に一致します。（これは &lt;code&gt;[^\n]&lt;/code&gt; 短縮形で、 &lt;code&gt;.&lt;/code&gt; 似ていますが、 &lt;code&gt;/s&lt;/code&gt; regex修飾子の影響を受けません。）</target>
        </trans-unit>
        <trans-unit id="2859a2d886c0e9aec6c1de9465ceff2207dfb72a" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14 (and partially in Perl 5.12), just put a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; near the beginning of your program. Within its lexical scope you shouldn't have this problem. It also is automatically enabled under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature ':5.12'&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.12&lt;/code&gt; or using &lt;code&gt;-E&lt;/code&gt; on the command line for Perl 5.12 or higher.</source>
          <target state="translated">Perl 5.14（および一部はPerl 5.12）から始めて、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; プログラムの先頭近くに配置するだけです。その語彙の範囲内では、この問題はありません。また、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature ':5.12'&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.12&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;使用する&lt;/a&gt;か、Perl 5.12以降のコマンドラインで &lt;code&gt;-E&lt;/code&gt; を使用すると、自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="df8245894479d7975ceddeb310b62137ac0e64fe" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14 (and partially in Perl 5.12), just put a &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; near the beginning of your program. Within its lexical scope you shouldn't have this problem. It also is automatically enabled under &lt;code&gt;use feature ':5.12'&lt;/code&gt; or &lt;code&gt;use v5.12&lt;/code&gt; or using &lt;code&gt;-E&lt;/code&gt; on the command line for Perl 5.12 or higher.</source>
          <target state="translated">Perl 5.14（および部分的にPerl 5.12）以降では、プログラムの先頭近くに &lt;code&gt;use feature 'unicode_strings'&lt;/code&gt; 配置するだけです。その字句スコープ内では、この問題は発生しないはずです。また、Perl 5.12以降のコマンドラインで &lt;code&gt;use feature ':5.12'&lt;/code&gt; または &lt;code&gt;use v5.12&lt;/code&gt; か、 &lt;code&gt;-E&lt;/code&gt; を使用すると自動的に有効になります。</target>
        </trans-unit>
        <trans-unit id="3b056d808ccaa125ddd8cb5bd3248f668c64c977" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14, a &lt;code&gt;&quot;^&quot;&lt;/code&gt; (caret or circumflex accent) immediately after the &lt;code&gt;&quot;?&quot;&lt;/code&gt; is a shorthand equivalent to &lt;code&gt;d-imnsx&lt;/code&gt;. Any positive flags (except &lt;code&gt;&quot;d&quot;&lt;/code&gt;) may follow the caret, so</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&quot;?&quot;&lt;/code&gt; 直後の &lt;code&gt;&quot;^&quot;&lt;/code&gt; （キャレットまたは曲折アクセント記号） &lt;code&gt;d-imnsx&lt;/code&gt; と同等の省略形です。正のフラグ（ &lt;code&gt;&quot;d&quot;&lt;/code&gt; を除く）はキャレットの後に続く可能性があるため、</target>
        </trans-unit>
        <trans-unit id="0b2dad99d1883b55d274e9ecc2470180f982e800" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14, a &lt;code&gt;&quot;^&quot;&lt;/code&gt; (caret or circumflex accent) immediately after the &lt;code&gt;&quot;?&quot;&lt;/code&gt; is a shorthand equivalent to &lt;code&gt;d-imnsx&lt;/code&gt;. Flags (except &lt;code&gt;&quot;d&quot;&lt;/code&gt;) may follow the caret to override it. But a minus sign is not legal with it.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&quot;?&quot;&lt;/code&gt; 直後の &lt;code&gt;&quot;^&quot;&lt;/code&gt; （キャレットまたは曲折アクセント記号） &lt;code&gt;d-imnsx&lt;/code&gt; と同等の省略形です。フラグ（ &lt;code&gt;&quot;d&quot;&lt;/code&gt; を除く）は、キャレットの後に続く場合があります。ただし、マイナス記号は合法ではありません。</target>
        </trans-unit>
        <trans-unit id="a8902a856b5fd88514da38f6d1ea437cef45dc91" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14, a &lt;code&gt;&quot;^&quot;&lt;/code&gt; (caret or circumflex accent) immediately after the &lt;code&gt;&quot;?&quot;&lt;/code&gt; is a shorthand equivalent to &lt;code&gt;d-imsx&lt;/code&gt; . Any positive flags (except &lt;code&gt;&quot;d&quot;&lt;/code&gt; ) may follow the caret, so</source>
          <target state="translated">Perl 5.14 以降、 &lt;code&gt;&quot;?&quot;&lt;/code&gt; 直後の &lt;code&gt;&quot;^&quot;&lt;/code&gt; （キャレットまたはサーカムフレックスアクセント） &lt;code&gt;d-imsx&lt;/code&gt; と同等の省略表現です。正のフラグ（ &lt;code&gt;&quot;d&quot;&lt;/code&gt; を除く）はキャレットの後に続く可能性があるため、</target>
        </trans-unit>
        <trans-unit id="dd982f589d8e87c6c46ce3117db1a952a4a3a29e" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14, a &lt;code&gt;&quot;^&quot;&lt;/code&gt; (caret or circumflex accent) immediately after the &lt;code&gt;&quot;?&quot;&lt;/code&gt; is a shorthand equivalent to &lt;code&gt;d-imsx&lt;/code&gt; . Flags (except &lt;code&gt;&quot;d&quot;&lt;/code&gt; ) may follow the caret to override it. But a minus sign is not legal with it.</source>
          <target state="translated">Perl 5.14 以降、 &lt;code&gt;&quot;?&quot;&lt;/code&gt; 直後の &lt;code&gt;&quot;^&quot;&lt;/code&gt; （キャレットまたはサーカムフレックスアクセント） &lt;code&gt;d-imsx&lt;/code&gt; と同等の省略表現です。フラグ（ &lt;code&gt;&quot;d&quot;&lt;/code&gt; を除く）は、キャレットに続いて上書きできます。ただし、マイナス記号は使用できません。</target>
        </trans-unit>
        <trans-unit id="f8764da9a2d4e197710fd50d36bbe6c6ef6a3ac9" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.14.0, regular expressions compiled within the scope of &lt;code&gt;unicode_strings&lt;/code&gt; use Unicode rules even when executed or compiled into larger regular expressions outside the scope.</source>
          <target state="translated">Perl 5.14.0以降では、 &lt;code&gt;unicode_strings&lt;/code&gt; のスコープ内でコンパイルされた正規表現は、スコープ外でより大きな正規表現に実行またはコンパイルされた場合でも、Unicodeルールを使用します。</target>
        </trans-unit>
        <trans-unit id="69cd047e088fdbefa20b4fff4c70feeb8034d880" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.16.0, consistent quoting rules are used within the scope of &lt;code&gt;unicode_strings&lt;/code&gt; , as described in &lt;a href=&quot;functions/quotemeta&quot;&gt;quotemeta&lt;/a&gt;. Prior to that, or outside its scope, no code points above 127 are quoted in UTF-8 encoded strings, but in byte encoded strings, code points between 128-255 are always quoted.</source>
          <target state="translated">Perl 5.16.0以降、quotemetaで説明されているように、一貫した引用規則が &lt;code&gt;unicode_strings&lt;/code&gt; のスコープ内で使用され&lt;a href=&quot;functions/quotemeta&quot;&gt;ます&lt;/a&gt;。その前またはその範囲外では、127を超えるコードポイントはUTF-8エンコードされた文字列で引用されませんが、バイトエンコードされた文字列では、128〜255のコードポイントは常に引用されます。</target>
        </trans-unit>
        <trans-unit id="18d82ac8aba251c121572f60699a2bf12308e978" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.16.0, consistent quoting rules are used within the scope of &lt;code&gt;unicode_strings&lt;/code&gt;, as described in &lt;a href=&quot;perlfunc#quotemeta&quot;&gt;&quot;quotemeta&quot; in perlfunc&lt;/a&gt;. Prior to that, or outside its scope, no code points above 127 are quoted in UTF-8 encoded strings, but in byte encoded strings, code points between 128-255 are always quoted.</source>
          <target state="translated">Perl 5.16.0以降、&lt;a href=&quot;perlfunc#quotemeta&quot;&gt;perlfuncの「quotemeta」で&lt;/a&gt;説明されているように、 &lt;code&gt;unicode_strings&lt;/code&gt; のスコープ内で一貫した引用規則が使用されます。それ以前、またはその範囲外では、127を超えるコードポイントはUTF-8エンコード文字列で引用されませんが、バイトエンコード文字列では、128〜255のコードポイントが常に引用されます。</target>
        </trans-unit>
        <trans-unit id="399f06c020d8cd6de2c45e4ca951de47d9647e70" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.18, there are non-obvious Unicode rules under &lt;code&gt;/i&lt;/code&gt; that can match variably, but which you might not think could. For example, the substring &lt;code&gt;&quot;ss&quot;&lt;/code&gt; can match the single character LATIN SMALL LETTER SHARP S. Here's a complete list of the current ones affecting ASCII characters:</source>
          <target state="translated">Perl 5.18以降、 &lt;code&gt;/i&lt;/code&gt; の下に、さまざまに一致する可能性があるが、一致するとは思わない可能性のある非自明なUnicodeルールがあります。たとえば、部分文字列 &lt;code&gt;&quot;ss&quot;&lt;/code&gt; は、単一文字のLATIN SMALL LETTER SHARP Sと一致する可能性があります。ASCII文字に影響を与える現在の文字の完全なリストは、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4f8e157579b8bab3ccd61e698c935bfec29a8f08" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.20, a hash slice operation with the % symbol is a variant of slice operation returning a list of key/value pairs rather than just values:</source>
          <target state="translated">Perl 5.20 以降、% シンボルを使用したハッシュスライス操作は、単なる値ではなく、キーと値のペアのリストを返すスライス操作の変形です。</target>
        </trans-unit>
        <trans-unit id="39e60469d5cdf9ceb960a075ac6c5b92f2cc1e99" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.26.0, the range operator on strings treats their lengths consistently within the scope of &lt;code&gt;unicode_strings&lt;/code&gt;. Prior to that, or outside its scope, it could produce strings whose length in characters exceeded that of the right-hand side, where the right-hand side took up more bytes than the correct range endpoint.</source>
          <target state="translated">Perl 5.26.0以降、文字列の範囲演算子は、 &lt;code&gt;unicode_strings&lt;/code&gt; のスコープ内でそれらの長さを一貫して扱います。それ以前、またはその範囲外では、文字数が右側の長さを超える文字列を生成する可能性があり、右側は正しい範囲のエンドポイントよりも多くのバイトを使用していました。</target>
        </trans-unit>
        <trans-unit id="c411e4acf4de658ce7555b24fb1288a04a3bbeb3" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28, it is a fatal error to try to complement a string containing a character with an ordinal value above 255.</source>
          <target state="translated">Perl 5.28 以降では、255 以上の序数値を持つ文字を含む文字列を補完しようとすると致命的なエラーとなります。</target>
        </trans-unit>
        <trans-unit id="74fa44c6c3c091efdcacc965773935ea7f947644" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28, it is illegal for bit operators, like &lt;code&gt;~&lt;/code&gt;, to operate on strings containing code points above 255.</source>
          <target state="translated">Perl 5.28以降、 &lt;code&gt;~&lt;/code&gt; などのビット演算子が255を超えるコードポイントを含む文字列を操作することは違法です。</target>
        </trans-unit>
        <trans-unit id="d05b2f43207fbc6b0a71ca28ad690738fd985132" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28, it is now easy to detect strings that aren't script runs. Simply enclose just about any pattern like either of these:</source>
          <target state="translated">Perl 5.28 から、スクリプトが実行されていない文字列を簡単に検出できるようになりました。これらのいずれかのパターンを囲むだけです。</target>
        </trans-unit>
        <trans-unit id="7e29afd35da622d839a7f0cbd5ae88b8a5f51e23" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28, on multi-threaded perls compiled on systems that implement POSIX 2008 thread-safe locale operations, this function doesn't actually call the system &lt;code&gt;setlocale&lt;/code&gt;. Instead those thread-safe operations are used to emulate the &lt;code&gt;setlocale&lt;/code&gt; function, but in a thread-safe manner.</source>
          <target state="translated">Perl 5.28以降、POSIX 2008スレッドセーフロケール操作を実装するシステムでコンパイルされたマルチスレッドperlでは、この関数は実際にはシステム &lt;code&gt;setlocale&lt;/code&gt; を呼び出しません。代わりに、これらのスレッドセーフ操作を使用して &lt;code&gt;setlocale&lt;/code&gt; 関数をエミュレートしますが、スレッドセーフな方法で使用します。</target>
        </trans-unit>
        <trans-unit id="1ebaa36867a4be778f15993a9a2db66338883da5" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28, this module is available even on systems that lack a native &lt;code&gt;nl_langinfo&lt;/code&gt;. On such systems, it uses various methods to construct what that function, if present, would return. But there are potential glitches. These are the items that could be different:</source>
          <target state="translated">Perl 5.28以降、このモジュールは、ネイティブの &lt;code&gt;nl_langinfo&lt;/code&gt; がないシステムでも使用できます。このようなシステムでは、さまざまなメソッドを使用して、その関数が存在する場合に何を返すかを構築します。しかし、潜在的な不具合があります。異なる可能性のある項目は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="31e1eb3f09fae3aaaa4cf7976dd6db42da82227a" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28, this pragma may be used in &lt;a href=&quot;threads&quot;&gt;multi-threaded&lt;/a&gt; applications on systems that have thread-safe locale ability. Some caveats apply, see &lt;a href=&quot;#Multi-threaded&quot;&gt;&quot;Multi-threaded&quot;&lt;/a&gt; below. On systems without this capability, or in earlier Perls, do NOT use this pragma in scripts that have multiple &lt;a href=&quot;threads&quot;&gt;threads&lt;/a&gt; active. The locale in these cases is not local to a single thread. Another thread may change the locale at any time, which could cause at a minimum that a given thread is operating in a locale it isn't expecting to be in. On some platforms, segfaults can also occur. The locale change need not be explicit; some operations cause perl to change the locale itself. You are vulnerable simply by having done a &lt;code&gt;&quot;use locale&quot;&lt;/code&gt;.</source>
          <target state="translated">Perl 5.28以降、このプラグマは、スレッドセーフなロケール機能を備えたシステム上の&lt;a href=&quot;threads&quot;&gt;マルチスレッド&lt;/a&gt;アプリケーションで使用できるようになりました。いくつかの注意事項が適用さ&lt;a href=&quot;#Multi-threaded&quot;&gt;れ&lt;/a&gt;ます。以下の「マルチスレッド」を参照してください。この機能のないシステム、または以前のPerlでは、複数の&lt;a href=&quot;threads&quot;&gt;スレッドが&lt;/a&gt;アクティブになっているスクリプトでこのプラグマを使用しないでください。これらの場合のロケールは、単一のスレッドに対してローカルではありません。別のスレッドがいつでもロケールを変更する可能性があります。これにより、少なくとも、特定のスレッドが予期しないロケールで動作している可能性があります。一部のプラットフォームでは、セグメンテーション違反も発生する可能性があります。ロケールの変更は明示的である必要はありません。一部の操作により、perlはロケール自体を変更します。 &lt;code&gt;&quot;use locale&quot;&lt;/code&gt; を行っただけで脆弱になります。</target>
        </trans-unit>
        <trans-unit id="7af6703d45f3b80a1d7fa23b6e6ecb6c4049fc60" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.28.0, the &lt;code&gt;split&lt;/code&gt; function with a pattern specified as a string containing a single space handles whitespace characters consistently within the scope of &lt;code&gt;unicode_strings&lt;/code&gt;. Prior to that, or outside its scope, characters that are whitespace according to Unicode rules but not according to ASCII rules were treated as field contents rather than field separators when they appear in byte-encoded strings.</source>
          <target state="translated">Perl 5.28.0以降、単一のスペースを含む文字列として指定されたパターンを持つ &lt;code&gt;split&lt;/code&gt; 関数は、 &lt;code&gt;unicode_strings&lt;/code&gt; のスコープ内で一貫して空白文字を処理します。それ以前、またはその範囲外では、Unicode規則に従って空白であるが、ASCII規則に従っていない文字は、バイトエンコードされた文字列に表示される場合、フィールド区切り文字ではなくフィールドコンテンツとして扱われていました。</target>
        </trans-unit>
        <trans-unit id="4a7e78b35743da5e79f86d77337042b624f1dcf2" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.30, it is possible to do something like this:</source>
          <target state="translated">Perl 5.30 以降では、以下のようなことが可能です。</target>
        </trans-unit>
        <trans-unit id="67c1f2502a54e1fd7e5f8ea0c68c3e31e84a505f" translate="yes" xml:space="preserve">
          <source>Starting in Perl 5.32, you can specify a character by its name in regular expression patterns using &lt;code&gt;\p{name=...}&lt;/code&gt;. This is in addition to the longstanding method of using &lt;code&gt;\N{...}&lt;/code&gt;. The following summarizes the differences between these two:</source>
          <target state="translated">Perl 5.32以降では、 &lt;code&gt;\p{name=...}&lt;/code&gt; を使用して、正規表現パターンで名前で文字を指定できます。これは、 &lt;code&gt;\N{...}&lt;/code&gt; を使用する長年の方法に追加されます。以下に、これら2つの違いを要約します。</target>
        </trans-unit>
        <trans-unit id="013197011e87f7e0633670e8b800c1024b759400" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.16 in a very limited way, and more generally in v5.22, you can restrict which category or categories are enabled by this particular instance of the pragma by adding parameters to it. For example,</source>
          <target state="translated">Perl v5.16では非常に限定的な方法で、より一般的にはv5.22では、このプラグマの特定のインスタンスが有効にするカテゴリやカテゴリを、パラメータを追加することで制限することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d7be757a62548668bef82e6fa7932eb10efddb3b" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.16, Perl adopted a Unicode-defined strategy for quoting non-ASCII characters; the quoting of ASCII characters is unchanged.</source>
          <target state="translated">Perl v5.16 以降、Perl は Unicode で定義された非 ASCII 文字のクォートのための戦略を採用しています。</target>
        </trans-unit>
        <trans-unit id="a75aca801899de40f1e5f4fc3d561cb6af7bcdc4" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.16, any occurrence of &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; sequences in a double-quotish string automatically loads this module with arguments &lt;code&gt;:full&lt;/code&gt; and &lt;code&gt;:short&lt;/code&gt; (described below) if it hasn't already been loaded with different arguments, in order to compile the named Unicode character into position in the string. Prior to v5.16, an explicit &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames&lt;/code&gt; was required to enable this usage. (However, prior to v5.16, the form &lt;code&gt;&quot;use
charnames ();&quot;&lt;/code&gt; did not enable &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt;.)</source>
          <target state="translated">Perl v5.16以降では、二重引用符文字列内の &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; シーケンスの出現により、このモジュールが引数 &lt;code&gt;:full&lt;/code&gt; および &lt;code&gt;:short&lt;/code&gt; （以下で説明）で自動的にロードされます（まだ異なる引数でロードされていない場合）。名前付きUnicode文字を文字列内の位置にコンパイルするため。 v5.16より前のバージョンでは、この使用を有効にするために明示的な &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; charnames&lt;/code&gt; が必要でした。 （ただし、v5.16より前では、 &lt;code&gt;&quot;use charnames ();&quot;&lt;/code&gt; の形式では &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; 有効になりませんでした。）</target>
        </trans-unit>
        <trans-unit id="2febf15cd94e7fcad788accee9fc2d94365a32bb" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.16, any occurrence of &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; sequences in a double-quotish string automatically loads this module with arguments &lt;code&gt;:full&lt;/code&gt; and &lt;code&gt;:short&lt;/code&gt; (described below) if it hasn't already been loaded with different arguments, in order to compile the named Unicode character into position in the string. Prior to v5.16, an explicit &lt;code&gt;use charnames&lt;/code&gt; was required to enable this usage. (However, prior to v5.16, the form &lt;code&gt;&quot;use charnames ();&quot;&lt;/code&gt; did not enable &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt;.)</source>
          <target state="translated">Perl v5.16以降、二重引用符で囲まれた文字列に &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; シーケンスが含まれると、このモジュールに引数 &lt;code&gt;:full&lt;/code&gt; および &lt;code&gt;:short&lt;/code&gt; （以下で説明）が自動的にロードされます（まだ別の引数がロードされていない場合）。名前付きUnicode文字を文字列内の位置にコンパイルするため。 v5.16より前は、この使用法を有効にするには、明示的な &lt;code&gt;use charnames&lt;/code&gt; が必要でした。 （ただし、v5.16より前では、 &lt;code&gt;&quot;use charnames ();&quot;&lt;/code&gt; という形式では &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; 有効になりませんでした。）</target>
        </trans-unit>
        <trans-unit id="608b1e70a82457592a3e840a3bb2cb2b40f918ad" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.20, UTF-8 locales are supported in Perl, except &lt;code&gt;LC_COLLATE&lt;/code&gt; is only partially supported; collation support is improved in Perl v5.26 to a level that may be sufficient for your needs (see &lt;a href=&quot;#Category-LC_COLLATE%3A-Collation%3A-Text-Comparisons-and-Sorting&quot;&gt;&quot;Category &lt;code&gt;LC_COLLATE&lt;/code&gt;: Collation: Text Comparisons and Sorting&quot;&lt;/a&gt;).</source>
          <target state="translated">Perl v5.20以降、 &lt;code&gt;LC_COLLATE&lt;/code&gt; が部分的にしかサポートされていないことを除いて、UTF-8ロケールがPerlでサポートされています。照合サポートは、Perl v5.26で、ニーズに十分なレベルに改善されています（&lt;a href=&quot;#Category-LC_COLLATE%3A-Collation%3A-Text-Comparisons-and-Sorting&quot;&gt;「カテゴリ &lt;code&gt;LC_COLLATE&lt;/code&gt; ：照合：テキストの比較と並べ替え」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="bc88b853a6a300ebebd43ce48839b53ca6b33945" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.20, UTF-8 locales are supported in Perl, except for &lt;code&gt;LC_COLLATE&lt;/code&gt; (use &lt;a href=&quot;unicode/collate&quot;&gt;Unicode::Collate&lt;/a&gt; instead). If you have Perl v5.16 or v5.18 and can't upgrade, you can use</source>
          <target state="translated">Perl v5.20以降では、 &lt;code&gt;LC_COLLATE&lt;/code&gt; を除いて、UTF-8ロケールがPerlでサポートされています（代わりに&lt;a href=&quot;unicode/collate&quot;&gt;Unicode :: Collat​​eを&lt;/a&gt;使用してください）。Perl v5.16またはv5.18を使用していてアップグレードできない場合は、</target>
        </trans-unit>
        <trans-unit id="24c20bca7982b6c0163573088c845daca9bc60e3" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.22, this applies to ranges in bracketed character classes. If you say, for example, &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/[\N{U+20}-\N{U+7F}]/&lt;/a&gt;&lt;/code&gt;, it means the characters &lt;code&gt;\N{U+20}&lt;/code&gt; , &lt;code&gt;\N{U+21}&lt;/code&gt; , ..., &lt;code&gt;\N{U+7F}&lt;/code&gt; . This range is all the printable characters that the ASCII character set contains.</source>
          <target state="translated">Perl v5.22以降、これは括弧で囲まれた文字クラスの範囲に適用されます。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/[\N{U+20}-\N{U+7F}]/&lt;/a&gt;&lt;/code&gt; と言った場合、これは文字 &lt;code&gt;\N{U+20}&lt;/code&gt; 、 &lt;code&gt;\N{U+21}&lt;/code&gt; 、..を意味します。 。、 &lt;code&gt;\N{U+7F}&lt;/code&gt; 。この範囲は、ASCII文字セットに含まれるすべての印刷可能な文字です。</target>
        </trans-unit>
        <trans-unit id="b54e661a1090defa2b2777581232122fccb99a2a" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.22, this applies to ranges in bracketed character classes. If you say, for example, &lt;code&gt;qr/[\N{U+20}-\N{U+7F}]/&lt;/code&gt;, it means the characters &lt;code&gt;\N{U+20}&lt;/code&gt;, &lt;code&gt;\N{U+21}&lt;/code&gt;, ..., &lt;code&gt;\N{U+7F}&lt;/code&gt;. This range is all the printable characters that the ASCII character set contains.</source>
          <target state="translated">Perl v5.22以降、これは括弧で囲まれた文字クラスの範囲に適用されます。たとえば、 &lt;code&gt;qr/[\N{U+20}-\N{U+7F}]/&lt;/code&gt; と言う場合、それは文字 &lt;code&gt;\N{U+20}&lt;/code&gt; 、 &lt;code&gt;\N{U+21}&lt;/code&gt; 、.を意味します。 。、 &lt;code&gt;\N{U+7F}&lt;/code&gt; 。この範囲は、ASCII文字セットに含まれるすべての印刷可能な文字です。</target>
        </trans-unit>
        <trans-unit id="b23b660058cb3ee939b11052749bad9b7526e31f" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.22, this is trivially changeable to work portably on both ASCII and EBCDIC platforms.</source>
          <target state="translated">Perl v5.22 以降では、ASCII と EBCDIC の両方のプラットフォームで可搬的に動作するように簡単に変更できます。</target>
        </trans-unit>
        <trans-unit id="78b643b4bf49444d908712fc4608ad821a201d28" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.26, if the modifier has a second &lt;code&gt;&quot;x&quot;&lt;/code&gt; within it, it does everything that a single &lt;code&gt;/x&lt;/code&gt; does, but additionally non-backslashed SPACE and TAB characters within bracketed character classes are also generally ignored, and hence can be added to make the classes more readable.</source>
          <target state="translated">Perl v5.26以降、修飾子に2番目の &lt;code&gt;&quot;x&quot;&lt;/code&gt; れている場合、単一の &lt;code&gt;/x&lt;/code&gt; が実行するすべてのことを実行しますが、括弧で囲まれた文字クラス内のバックスラッシュされていないSPACE文字とTAB文字も一般に無視されるため、クラスを読みやすくするために追加されます。</target>
        </trans-unit>
        <trans-unit id="03d25eddbb4ffae5919e515185604e4ce1f21281" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.26, specifying &lt;code&gt;/xx&lt;/code&gt; changes the square-bracketed portions of a pattern to ignore tabs and space characters unless they are escaped by preceding them with a backslash. So, we could write</source>
          <target state="translated">Perl v5.26以降、 &lt;code&gt;/xx&lt;/code&gt; を指定すると、パターンの角括弧部分が変更され、タブとスペース文字の前に円記号を付けてエスケープしない限り、それらは無視されます。だから、私たちは書くことができます</target>
        </trans-unit>
        <trans-unit id="3f981605ccbb39cb3202cced83d909060decc021" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.30, Perl detects Turkic locales by their behaviour, and seamlessly handles both types; previously only the non-Turkic one was supported. The name of the locale is ignored, if your system has a &lt;code&gt;tr_TR.UTF-8&lt;/code&gt; locale and it doesn't behave like a Turkic locale, perl will treat it like a non-Turkic locale.</source>
          <target state="translated">Perl v5.30以降、Perlは動作によってTurkicロケールを検出し、両方のタイプをシームレスに処理します。以前は、非トルコ語のみがサポートされていました。ロケールの名前は無視されます。システムに &lt;code&gt;tr_TR.UTF-8&lt;/code&gt; ロケールがあり、それがTurkicロケールのように動作しない場合、perlはそれを非Turkicロケールのように扱います。</target>
        </trans-unit>
        <trans-unit id="dad33022de79501f8101617222266c778da37687" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.32, an alternative to &lt;code&gt;\N{...}&lt;/code&gt; for full names is available, and that is to say</source>
          <target state="translated">Perl v5.32以降、フルネームの &lt;code&gt;\N{...}&lt;/code&gt; 代替が利用可能になりました。つまり、</target>
        </trans-unit>
        <trans-unit id="0e38118c6920f78946e8d31e17cb36ad4ee8bf0e" translate="yes" xml:space="preserve">
          <source>Starting in Perl v5.8.6 (&lt;code&gt;Encode&lt;/code&gt; version 2.0.1),</source>
          <target state="translated">Perl v5.8.6（ &lt;code&gt;Encode&lt;/code&gt; バージョン2.0.1）以降、</target>
        </trans-unit>
        <trans-unit id="474e1944b6ecbc8a507bc2e01a2a550b04aa62eb" translate="yes" xml:space="preserve">
          <source>Starting in Unicode 6.1 and Perl v5.16, Unicode defines many abbreviations and names that were formerly Perl extensions, and some additional ones that Perl did not previously accept. The list is getting too long to reproduce here, but you can get the complete list from the Unicode web site: &lt;a href=&quot;http://www.unicode.org/Public/UNIDATA/NameAliases.txt&quot;&gt;http://www.unicode.org/Public/UNIDATA/NameAliases.txt&lt;/a&gt;.</source>
          <target state="translated">Unicode 6.1およびPerl v5.16以降、Unicodeは、以前はPerl拡張であった多くの略語と名前、およびPerlが以前は受け入れなかったいくつかの追加の略語と名前を定義しています。リストはここで再現するには長すぎますが、完全なリストはUnicode Webサイト（&lt;a href=&quot;http://www.unicode.org/Public/UNIDATA/NameAliases.txt&quot;&gt;http://www.unicode.org/Public/UNIDATA/NameAliases.txt）&lt;/a&gt;から取得できます。</target>
        </trans-unit>
        <trans-unit id="d7ed0dc1ff9e9044e5149578e2503104831b9063" translate="yes" xml:space="preserve">
          <source>Starting in perl v5.30, wildcards are allowed in Unicode property values. See &lt;a href=&quot;perlunicode#Wildcards-in-Property-Values&quot;&gt;&quot;Wildcards in Property Values&quot; in perlunicode&lt;/a&gt;.</source>
          <target state="translated">perl v5.30以降、Unicodeプロパティ値でワイルドカードを使用できます。&lt;a href=&quot;perlunicode#Wildcards-in-Property-Values&quot;&gt;perlunicodeの「プロパティ値のワイルドカード」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b155d3280c20b781dad3393cccf04005ee9e4a0f" translate="yes" xml:space="preserve">
          <source>Starting in the 5.9.x development version of perl you can &lt;code&gt;use re Debug =&amp;gt; 'PARSE'&lt;/code&gt; to see some trace information about the parse process. We will start with some simple patterns and build up to more complex patterns.</source>
          <target state="translated">perlの5.9.x開発バージョン以降、 &lt;code&gt;use re Debug =&amp;gt; 'PARSE'&lt;/code&gt; を使用して、解析プロセスに関するトレース情報を確認できます。いくつかの単純なパターンから始めて、より複雑なパターンを構築します。</target>
        </trans-unit>
        <trans-unit id="818df47ef2f0fcf2a87de97f12babb967ed1fcfb" translate="yes" xml:space="preserve">
          <source>Starting in v5.20, Perl supports UTF-8 locales for &lt;code&gt;LC_CTYPE&lt;/code&gt; , but otherwise Perl only supports single-byte locales, such as the ISO 8859 series. This means that wide character locales, for example for Asian languages, are not well-supported. (If the platform has the capability for Perl to detect such a locale, starting in Perl v5.22, &lt;a href=&quot;warnings#Category-Hierarchy&quot;&gt;Perl will warn, default enabled&lt;/a&gt;, using the &lt;code&gt;locale&lt;/code&gt; warning category, whenever such a locale is switched into.) The UTF-8 locale support is actually a superset of POSIX locales, because it is really full Unicode behavior as if no &lt;code&gt;LC_CTYPE&lt;/code&gt; locale were in effect at all (except for tainting; see &lt;a href=&quot;#SECURITY&quot;&gt;SECURITY&lt;/a&gt;). POSIX locales, even UTF-8 ones, are lacking certain concepts in Unicode, such as the idea that changing the case of a character could expand to be more than one character. Perl in a UTF-8 locale, will give you that expansion. Prior to v5.20, Perl treated a UTF-8 locale on some platforms like an ISO 8859-1 one, with some restrictions, and on other platforms more like the &quot;C&quot; locale. For releases v5.16 and v5.18, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale 'not_characters&lt;/code&gt; could be used as a workaround for this (see &lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;Unicode and UTF-8&lt;/a&gt;).</source>
          <target state="translated">v5.20以降、Perlは &lt;code&gt;LC_CTYPE&lt;/code&gt; の UTF-8ロケールをサポートしますが、それ以外の場合、PerlはISO 8859シリーズなどのシングルバイトロケールのみをサポートします。つまり、アジア言語などのワイド文字ロケールは十分にサポートされていません。 （プラットフォームにPerlがそのようなロケールを検出する機能がある場合、Perl v5.22以降、そのようなロケールに切り替えるたびに、&lt;a href=&quot;warnings#Category-Hierarchy&quot;&gt;Perlは&lt;/a&gt; &lt;code&gt;locale&lt;/code&gt; 警告カテゴリを使用してデフォルトで有効に警告します。）UTF-8ロケールのサポートこれは、実際にはPOSIXロケールのスーパーセットです。これは、 &lt;code&gt;LC_CTYPE&lt;/code&gt; ロケールがまったく有効でなかったかのように、本当に完全なUnicode動作であるためです（汚染を除く。&lt;a href=&quot;#SECURITY&quot;&gt;セキュリティを&lt;/a&gt;参照））。 POSIXロケールは、UTF-8ロケールであっても、文字の大文字と小文字を変更すると複数の文字に拡張されるという考えなど、Unicodeの特定の概念に欠けています。 UTF-8ロケールのPerlは、その拡張を提供します。 v5.20より前のPerlは、一部のプラットフォームではISO 8859-1のような一部のプラットフォームでUTF-8ロケールを扱いましたが、他のプラットフォームでは &quot;C&quot;ロケールのようなものでした。リリースv5.16とv5.18の場合、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale 'not_characters&lt;/code&gt; （参照、このための回避策として使用することができ&lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;、UnicodeとUTF-8を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="abf931cf0a232d610a20a5327eae490434a5d7a8" translate="yes" xml:space="preserve">
          <source>Starting in v5.20, Perl supports UTF-8 locales for &lt;code&gt;LC_CTYPE&lt;/code&gt;, but otherwise Perl only supports single-byte locales, such as the ISO 8859 series. This means that wide character locales, for example for Asian languages, are not well-supported. Use of these locales may cause core dumps. If the platform has the capability for Perl to detect such a locale, starting in Perl v5.22, &lt;a href=&quot;warnings#Category-Hierarchy&quot;&gt;Perl will warn, default enabled&lt;/a&gt;, using the &lt;code&gt;locale&lt;/code&gt; warning category, whenever such a locale is switched into. The UTF-8 locale support is actually a superset of POSIX locales, because it is really full Unicode behavior as if no &lt;code&gt;LC_CTYPE&lt;/code&gt; locale were in effect at all (except for tainting; see &lt;a href=&quot;#SECURITY&quot;&gt;&quot;SECURITY&quot;&lt;/a&gt;). POSIX locales, even UTF-8 ones, are lacking certain concepts in Unicode, such as the idea that changing the case of a character could expand to be more than one character. Perl in a UTF-8 locale, will give you that expansion. Prior to v5.20, Perl treated a UTF-8 locale on some platforms like an ISO 8859-1 one, with some restrictions, and on other platforms more like the &quot;C&quot; locale. For releases v5.16 and v5.18, &lt;code&gt;use locale 'not_characters&lt;/code&gt; could be used as a workaround for this (see &lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;&quot;Unicode and UTF-8&quot;&lt;/a&gt;).</source>
          <target state="translated">v5.20以降、Perlは &lt;code&gt;LC_CTYPE&lt;/code&gt; のUTF-8ロケールをサポートしますが、それ以外の場合、PerlはISO8859シリーズなどのシングルバイトロケールのみをサポートします。これは、たとえばアジア言語のワイド文字ロケールが十分にサポートされていないことを意味します。これらのロケールを使用すると、コアダンプが発生する可能性があります。プラットフォームにPerlがそのようなロケールを検出する機能がある場合、Perl v5.22以降、&lt;a href=&quot;warnings#Category-Hierarchy&quot;&gt;Perlは&lt;/a&gt;、そのようなロケールに切り替えられるたびに、 &lt;code&gt;locale&lt;/code&gt; 警告カテゴリを使用して警告し、デフォルトで有効になります。 UTF-8ロケールのサポートは、実際にはPOSIXロケールのスーパーセットです。これは、 &lt;code&gt;LC_CTYPE&lt;/code&gt; ロケールがまったく有効になっていないかのように、実際には完全なUnicode動作であるためです（汚染を除く。&lt;a href=&quot;#SECURITY&quot;&gt;「セキュリティ」を&lt;/a&gt;参照）。）。 POSIXロケールは、UTF-8ロケールでさえ、文字の大文字と小文字を変更すると複数の文字に拡張される可能性があるという考えなど、Unicodeの特定の概念が欠けています。 UTF-8ロケールのPerlは、その拡張を提供します。 v5.20より前のバージョンでは、PerlはISO 8859-1ロケールなどの一部のプラットフォームでUTF-8ロケールを扱いましたが、いくつかの制限があり、他のプラットフォームでは「C」ロケールに似ていました。リリースv5.16およびv5.18の場合、この回避策として &lt;code&gt;use locale 'not_characters&lt;/code&gt; を使用できます（&lt;a href=&quot;#Unicode-and-UTF-8&quot;&gt;「UnicodeおよびUTF-8」を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7c0b3fbd50ff716e496a38d1dbfc0634c6a5772b" translate="yes" xml:space="preserve">
          <source>Starting in v5.20, Perl uses full Unicode rules if the locale is UTF-8. Otherwise, there is a deficiency in this scheme, which is that case changes that cross the 255/256 boundary are not well-defined. For example, the lower case of LATIN CAPITAL LETTER SHARP S (U+1E9E) in Unicode rules is U+00DF (on ASCII platforms). But under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (prior to v5.20 or not a UTF-8 locale), the lower case of U+1E9E is itself, because 0xDF may not be LATIN SMALL LETTER SHARP S in the current locale, and Perl has no way of knowing if that character even exists in the locale, much less what code point it is. Perl returns a result that is above 255 (almost always the input character unchanged, for all instances (and there aren't many) where the 255/256 boundary would otherwise be crossed; and starting in v5.22, it raises a &lt;a href=&quot;perldiag#Can't-do-%25s(%22%25s%22)-on-non-UTF-8-locale%3b-resolved-to-%22%25s%22.&quot;&gt;locale&lt;/a&gt; warning.</source>
          <target state="translated">v5.20以降、ロケールがUTF-8の場合、Perlは完全なUnicodeルールを使用します。それ以外の場合、このスキームには欠陥があります。つまり、255/256境界を越える変更は明確に定義されていません。たとえば、Unicodeルールでのラテン大文字S（U + 1E9E）の小文字はU + 00DF（ASCIIプラットフォーム）です。しかし、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; （v5.20より前、またはUTF-8ロケールではない）、現在のロケールでは0xDFがラテン小文字Sでない場合があり、Perlがその文字かどうかを知る方法がないため、U + 1E9Eの小文字がそれ自体です。ロケールにさえ存在し、それがどのコードポイントであるかははるかに少ない。 Perlは255を超える結果を返します（ほとんどの場合、入力文字は変更されず、255/256の境界を越えるとすべてのインスタンスが（多くはありません）、v5.22以降では&lt;a href=&quot;perldiag#Can't-do-%25s(%22%25s%22)-on-non-UTF-8-locale%3b-resolved-to-%22%25s%22.&quot;&gt;ロケールの&lt;/a&gt;警告が表示されます）。</target>
        </trans-unit>
        <trans-unit id="cf1eee1ccf148c85a77132cb28b023038cea490f" translate="yes" xml:space="preserve">
          <source>Starting in v5.20, Perl uses full Unicode rules if the locale is UTF-8. Otherwise, there is a deficiency in this scheme, which is that case changes that cross the 255/256 boundary are not well-defined. For example, the lower case of LATIN CAPITAL LETTER SHARP S (U+1E9E) in Unicode rules is U+00DF (on ASCII platforms). But under &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; (prior to v5.20 or not a UTF-8 locale), the lower case of U+1E9E is itself, because 0xDF may not be LATIN SMALL LETTER SHARP S in the current locale, and Perl has no way of knowing if that character even exists in the locale, much less what code point it is. Perl returns a result that is above 255 (almost always the input character unchanged, for all instances (and there aren't many) where the 255/256 boundary would otherwise be crossed; and starting in v5.22, it raises a &lt;a href=&quot;../perldiag#Can't-do-%25s(%22%25s%22)-on-non-UTF-8-locale%3b-resolved-to-%22%25s%22.&quot;&gt;locale&lt;/a&gt; warning.</source>
          <target state="translated">v5.20以降、ロケールがUTF-8の場合、Perlは完全なUnicodeルールを使用します。それ以外の場合、このスキームには欠陥があります。つまり、255/256境界を越える変更は明確に定義されていません。たとえば、Unicodeルールでのラテン大文字S（U + 1E9E）の小文字はU + 00DF（ASCIIプラットフォーム）です。しかし、 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; （v5.20より前、またはUTF-8ロケールではない）、現在のロケールでは0xDFがラテン小文字Sでない場合があり、Perlがその文字かどうかを知る方法がないため、U + 1E9Eの小文字がそれ自体です。ロケールにさえ存在し、それがどのコードポイントであるかははるかに少ない。 Perlは255を超える結果を返します（ほとんどの場合、入力文字は変更されず、255/256の境界を越えるとすべてのインスタンスが（多くはありません）、v5.22以降では&lt;a href=&quot;../perldiag#Can't-do-%25s(%22%25s%22)-on-non-UTF-8-locale%3b-resolved-to-%22%25s%22.&quot;&gt;ロケールの&lt;/a&gt;警告が表示されます）。</target>
        </trans-unit>
        <trans-unit id="fc33dddc57e009befe8b624c019e0d98b1679536" translate="yes" xml:space="preserve">
          <source>Starting in v5.20, Perl uses full Unicode rules if the locale is UTF-8. Otherwise, there is a deficiency in this scheme, which is that case changes that cross the 255/256 boundary are not well-defined. For example, the lower case of LATIN CAPITAL LETTER SHARP S (U+1E9E) in Unicode rules is U+00DF (on ASCII platforms). But under &lt;code&gt;use locale&lt;/code&gt; (prior to v5.20 or not a UTF-8 locale), the lower case of U+1E9E is itself, because 0xDF may not be LATIN SMALL LETTER SHARP S in the current locale, and Perl has no way of knowing if that character even exists in the locale, much less what code point it is. Perl returns a result that is above 255 (almost always the input character unchanged), for all instances (and there aren't many) where the 255/256 boundary would otherwise be crossed; and starting in v5.22, it raises a &lt;a href=&quot;perldiag#Can%27t-do-%25s%28%22%25s%22%29-on-non-UTF-8-locale%3B-resolved-to-%22%25s%22.&quot;&gt;locale&lt;/a&gt; warning.</source>
          <target state="translated">v5.20以降、ロケールがUTF-8の場合、Perlは完全なUnicodeルールを使用します。それ以外の場合、このスキームには欠陥があります。つまり、255/256の境界を超えるケースの変更は明確に定義されていません。たとえば、UnicodeルールのLATIN CAPITAL LETTER SHARP S（U + 1E9E）の小文字は、U + 00DF（ASCIIプラットフォームの場合）です。ただし、 &lt;code&gt;use locale&lt;/code&gt; （v5.20より前またはUTF-8ロケールではない）では、0xDFは現在のロケールではラテン文字のシャープSではない可能性があり、Perlには方法がないため、U + 1E9Eの小文字はそれ自体です。その文字がロケールに存在するかどうか、ましてやそれがどのコードポイントであるかを知ること。 Perlは、255/256の境界を超えるすべてのインスタンス（および多くはない）に対して、255を超える（ほとんどの場合、入力文字は変更されない）結果を返します。そしてv5.22から、それは&lt;a href=&quot;perldiag#Can%27t-do-%25s%28%22%25s%22%29-on-non-UTF-8-locale%3B-resolved-to-%22%25s%22.&quot;&gt;ロケール&lt;/a&gt;警告。</target>
        </trans-unit>
        <trans-unit id="2c762f587a88d06d3ee0d5c6c5c66f9e2aa3c2b6" translate="yes" xml:space="preserve">
          <source>Starting in v5.22, Perl will by default warn when switching into a locale that redefines any ASCII printable character (plus &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; ) into a different class than expected. This is likely to happen on modern locales only on EBCDIC platforms, where, for example, a CCSID 0037 locale on a CCSID 1047 machine moves &lt;code&gt;&quot;[&quot;&lt;/code&gt; , but it can happen on ASCII platforms with the ISO 646 and other 7-bit locales that are essentially obsolete. Things may still work, depending on what features of Perl are used by the program. For example, in the example from above where &lt;code&gt;&quot;|&quot;&lt;/code&gt; becomes a &lt;code&gt;\w&lt;/code&gt; , and there are no regular expressions where this matters, the program may still work properly. The warning lists all the characters that it can determine could be adversely affected.</source>
          <target state="translated">v5.22以降、Perlはデフォルトで、ASCII印刷可能文字（および &lt;code&gt;\t&lt;/code&gt; と &lt;code&gt;\n&lt;/code&gt; ）を予想とは異なるクラスに再定義するロケールに切り替えると警告を出します。これは、EBCDICプラットフォームの最新のロケールでのみ発生する可能性があります。たとえば、CCSID 1047マシンのCCSID 0037ロケールが &lt;code&gt;&quot;[&quot;&lt;/code&gt; に移動しますが、ISO 646およびその他の7ビットロケールのASCIIプラットフォームで発生する可能性があります。本質的に時代遅れです。プログラムで使用されているPerlの機能によっては、問題が解決しない場合があります。たとえば、上記の例では &lt;code&gt;&quot;|&quot;&lt;/code&gt; となり &lt;code&gt;\w&lt;/code&gt; 、これが問題となる正規表現がない場合でも、プログラムは正常に動作する可能性があります。警告には、悪影響を受ける可能性があると判断できるすべての文字がリストされています。</target>
        </trans-unit>
        <trans-unit id="045ba6195cde654f0e61c6b886bb35824c0a5a9a" translate="yes" xml:space="preserve">
          <source>Starting in v5.22, Perl will by default warn when switching into a locale that redefines any ASCII printable character (plus &lt;code&gt;\t&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt;) into a different class than expected. This is likely to happen on modern locales only on EBCDIC platforms, where, for example, a CCSID 0037 locale on a CCSID 1047 machine moves &lt;code&gt;&quot;[&quot;&lt;/code&gt;, but it can happen on ASCII platforms with the ISO 646 and other 7-bit locales that are essentially obsolete. Things may still work, depending on what features of Perl are used by the program. For example, in the example from above where &lt;code&gt;&quot;|&quot;&lt;/code&gt; becomes a &lt;code&gt;\w&lt;/code&gt;, and there are no regular expressions where this matters, the program may still work properly. The warning lists all the characters that it can determine could be adversely affected.</source>
          <target state="translated">v5.22以降、Perlは、ASCII印刷可能文字（および &lt;code&gt;\t&lt;/code&gt; と &lt;code&gt;\n&lt;/code&gt; ）を予想とは異なるクラスに再定義するロケールに切り替えると、デフォルトで警告を表示します。これは、EBCDICプラットフォーム上の最新のロケールでのみ発生する可能性があります。たとえば、CCSID1047マシンのCCSID0037ロケールは &lt;code&gt;&quot;[&quot;&lt;/code&gt; 移動しますが、ISO646およびその他の7ビットロケールを使用するASCIIプラットフォームで発生する可能性があります。本質的に時代遅れです。プログラムで使用されているPerlの機能によっては、引き続き機能する場合があります。たとえば、上記の例では &lt;code&gt;&quot;|&quot;&lt;/code&gt; となり &lt;code&gt;\w&lt;/code&gt; 、およびこれが重要な正規表現がない場合でも、プログラムは正常に動作する可能性があります。警告には、悪影響を受ける可能性があると判断できるすべての文字がリストされています。</target>
        </trans-unit>
        <trans-unit id="30ce7d231c27d2be8f1b1d8928ca5c39bf4aed51" translate="yes" xml:space="preserve">
          <source>Starting in v5.22, you can use Unicode code points as the end points of regular expression pattern character ranges, and the range will include all Unicode code points that lie between those end points, inclusive.</source>
          <target state="translated">v5.22 以降では、正規表現パターンの文字範囲の終点として Unicode コードポイントを使用することができ、その範囲には、それらの終点の間にあるすべての Unicode コードポイントが含まれます。</target>
        </trans-unit>
        <trans-unit id="6a0d77e9e3a9155e3031928b6e984c64d451ee78" translate="yes" xml:space="preserve">
          <source>Starting in v5.32, you can also use</source>
          <target state="translated">v5.32 以降では</target>
        </trans-unit>
        <trans-unit id="3cd5e5803935bbb6537a6c17faa83c7fdd9ffba0" translate="yes" xml:space="preserve">
          <source>Starting in v5.8.6, the encoding name may be &lt;code&gt;:locale&lt;/code&gt; . This means that the encoding is taken from the current locale, and not hard-coded by the pragma. Since a script really can only be encoded in exactly one encoding, this option is dangerous. It makes sense only if the script itself is written in ASCII, and all the possible locales that will be in use when the script is executed are supersets of ASCII. That means that the script itself doesn't get changed, but the I/O handles have the specified encoding added, and the operations like &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; use that encoding.</source>
          <target state="translated">v5.8.6以降、エンコーディング名は &lt;code&gt;:locale&lt;/code&gt; になる可能性があります。つまり、エンコーディングは現在のロケールから取得され、プラグマによってハードコードされません。スクリプトは実際には1つのエンコードでしかエンコードできないため、このオプションは危険です。これは、スクリプト自体がASCIIで記述されており、スクリプトの実行時に使用される可能性のあるすべてのロケールがASCIIのスーパーセットである場合にのみ意味があります。つまり、スクリプト自体は変更されませんが、I / Oハンドルには指定されたエンコーディングが追加されており、 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;functions/ord&quot;&gt;ord&lt;/a&gt;&lt;/code&gt; などの操作はそのエンコーディングを使用します。</target>
        </trans-unit>
        <trans-unit id="8cbc9aa4d02eb518e769236727e93c4edd075393" translate="yes" xml:space="preserve">
          <source>Starting in v5.8.6, the encoding name may be &lt;code&gt;:locale&lt;/code&gt;. This means that the encoding is taken from the current locale, and not hard-coded by the pragma. Since a script really can only be encoded in exactly one encoding, this option is dangerous. It makes sense only if the script itself is written in ASCII, and all the possible locales that will be in use when the script is executed are supersets of ASCII. That means that the script itself doesn't get changed, but the I/O handles have the specified encoding added, and the operations like &lt;code&gt;chr&lt;/code&gt; and &lt;code&gt;ord&lt;/code&gt; use that encoding.</source>
          <target state="translated">v5.8.6以降、エンコーディング名は &lt;code&gt;:locale&lt;/code&gt; になります。これは、エンコーディングが現在のロケールから取得され、プラグマによってハードコーディングされていないことを意味します。スクリプトは実際には1つのエンコーディングでしかエンコードできないため、このオプションは危険です。スクリプト自体がASCIIで記述されている場合にのみ意味があり、スクリプトの実行時に使用される可能性のあるすべてのロケールはASCIIのスーパーセットです。つまり、スクリプト自体は変更されませんが、I / Oハンドルには指定されたエンコーディングが追加され、 &lt;code&gt;chr&lt;/code&gt; や &lt;code&gt;ord&lt;/code&gt; などの操作はそのエンコーディングを使用します。</target>
        </trans-unit>
        <trans-unit id="f8eb72d81f87d6a7a0f9e91198c8aa2adc48dbed" translate="yes" xml:space="preserve">
          <source>Starting in version 5.21.2, perls built with the experimental define &lt;code&gt;-DPERL_OP_PARENT&lt;/code&gt; add an extra boolean flag for each op, &lt;code&gt;op_moresib&lt;/code&gt; . When not set, this indicates that this is the last op in an &lt;code&gt;OpSIBLING&lt;/code&gt; chain. This frees up the &lt;code&gt;op_sibling&lt;/code&gt; field on the last sibling to point back to the parent op. Under this build, that field is also renamed &lt;code&gt;op_sibparent&lt;/code&gt; to reflect its joint role. The macro &lt;code&gt;OpSIBLING(o)&lt;/code&gt; wraps this special behaviour, and always returns NULL on the last sibling. With this build the &lt;code&gt;op_parent(o)&lt;/code&gt; function can be used to find the parent of any op. Thus for forward compatibility, you should always use the &lt;code&gt;OpSIBLING(o)&lt;/code&gt; macro rather than accessing &lt;code&gt;op_sibling&lt;/code&gt; directly.</source>
          <target state="translated">バージョン5.21.2以降では、実験的に構築されたのPerlが定義 &lt;code&gt;-DPERL_OP_PARENT&lt;/code&gt; は、各オペアンプのための余分なブールフラグ、追加 &lt;code&gt;op_moresib&lt;/code&gt; を。設定されていない場合、これは &lt;code&gt;OpSIBLING&lt;/code&gt; チェーンの最後の操作であることを示します。これにより、最後の兄弟の &lt;code&gt;op_sibling&lt;/code&gt; フィールドが解放され、親opを指すようになります。このビルドでは、そのフィールドの名前も &lt;code&gt;op_sibparent&lt;/code&gt; に変更され、その共同の役割が反映されています。マクロ &lt;code&gt;OpSIBLING(o)&lt;/code&gt; はこの特別な動作をラップし、最後の兄弟では常にNULLを返します。このビルドでは、 &lt;code&gt;op_parent(o)&lt;/code&gt; 関数を使用して任意のopの親を見つけることができます。したがって、上位互換性のために、常に &lt;code&gt;OpSIBLING(o)&lt;/code&gt; を使用する必要があります &lt;code&gt;op_sibling&lt;/code&gt; に直接アクセスするのではなく、マクロ。</target>
        </trans-unit>
        <trans-unit id="fee6bf661a5a6cbe9e9f6e7dc3357f58ab23b1f3" translate="yes" xml:space="preserve">
          <source>Starting in version 5.21.2, perls built with the experimental define &lt;code&gt;-DPERL_OP_PARENT&lt;/code&gt; add an extra boolean flag for each op, &lt;code&gt;op_moresib&lt;/code&gt;. When not set, this indicates that this is the last op in an &lt;code&gt;OpSIBLING&lt;/code&gt; chain. This frees up the &lt;code&gt;op_sibling&lt;/code&gt; field on the last sibling to point back to the parent op. Under this build, that field is also renamed &lt;code&gt;op_sibparent&lt;/code&gt; to reflect its joint role. The macro &lt;code&gt;OpSIBLING(o)&lt;/code&gt; wraps this special behaviour, and always returns NULL on the last sibling. With this build the &lt;code&gt;op_parent(o)&lt;/code&gt; function can be used to find the parent of any op. Thus for forward compatibility, you should always use the &lt;code&gt;OpSIBLING(o)&lt;/code&gt; macro rather than accessing &lt;code&gt;op_sibling&lt;/code&gt; directly.</source>
          <target state="translated">バージョン5.21.2以降、実験的な定義 &lt;code&gt;-DPERL_OP_PARENT&lt;/code&gt; でビルドされたperlsは、各op、 &lt;code&gt;op_moresib&lt;/code&gt; に追加のブールフラグを追加します。設定されていない場合、これはこれが &lt;code&gt;OpSIBLING&lt;/code&gt; チェーンの最後の操作であることを示します。これにより、最後の兄弟の &lt;code&gt;op_sibling&lt;/code&gt; フィールドが解放され、親opを指すようになります。このビルドでは、その共同の役割を反映するために、そのフィールドの名前も &lt;code&gt;op_sibparent&lt;/code&gt; に変更されます。マクロ &lt;code&gt;OpSIBLING(o)&lt;/code&gt; は、この特別な動作をラップし、最後の兄弟で常にNULLを返します。このビルドでは、 &lt;code&gt;op_parent(o)&lt;/code&gt; 関数を使用して任意のopの親を見つけることができます。したがって、上位互換性のために、常に &lt;code&gt;OpSIBLING(o)&lt;/code&gt; を使用する必要があります &lt;code&gt;op_sibling&lt;/code&gt; に直接アクセスするのではなくマクロ。</target>
        </trans-unit>
        <trans-unit id="6641cb9032ef109574e28893d667801fcaa3e2c6" translate="yes" xml:space="preserve">
          <source>Starting with 2.10, the special module name &lt;code&gt;Unicode&lt;/code&gt; refers to the version of the Unicode Character Database bundled with Perl.</source>
          <target state="translated">2.10以降、特別なモジュール名 &lt;code&gt;Unicode&lt;/code&gt; は、PerlにバンドルされているUnicode Character Databaseのバージョンを指します。</target>
        </trans-unit>
        <trans-unit id="aca846c8be32988d259af2e704c9972784ca9b87" translate="yes" xml:space="preserve">
          <source>Starting with AutoLoader 5.73, you can call the &lt;code&gt;AutoLoader::autoload_sub&lt;/code&gt; function with the fully-qualified name of the function to load from its</source>
          <target state="translated">AutoLoader 5.73以降では、 &lt;code&gt;AutoLoader::autoload_sub&lt;/code&gt; 関数を、その関数からロードする関数の完全修飾名で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fe6dc30d7e458c682ee2ffab73f38deab13b705d" translate="yes" xml:space="preserve">
          <source>Starting with ExtUtils::ParseXS version 3.13_01 (comes with perl 5.16 and better), it is rather easy to share typemap code between multiple CPAN distributions. The general idea is to share it as a module that offers a certain API and have the dependent modules declare that as a built-time requirement and import the typemap into the XS. An example of such a typemap-sharing module on CPAN is &lt;code&gt;ExtUtils::Typemaps::Basic&lt;/code&gt; . Two steps to getting that module's typemaps available in your code:</source>
          <target state="translated">ExtUtils :: ParseXSバージョン3.13_01（perl 5.16以降に付属）以降、複数のCPANディストリビューション間でタイプマップコードを共有するのはかなり簡単です。一般的なアイデアは、特定のAPIを提供するモジュールとしてそれを共有し、依存するモジュールに組み込み時の要件として宣言し、タイプマップをXSにインポートすることです。CPANのそのようなタイプマップ共有モジュールの例は、 &lt;code&gt;ExtUtils::Typemaps::Basic&lt;/code&gt; です。そのモジュールのタイプマップをコードで利用できるようにするための2つのステップ：</target>
        </trans-unit>
        <trans-unit id="c7a9329439741d22826499b7e8ccc62b257e0036" translate="yes" xml:space="preserve">
          <source>Starting with ExtUtils::ParseXS version 3.13_01 (comes with perl 5.16 and better), it is rather easy to share typemap code between multiple CPAN distributions. The general idea is to share it as a module that offers a certain API and have the dependent modules declare that as a built-time requirement and import the typemap into the XS. An example of such a typemap-sharing module on CPAN is &lt;code&gt;ExtUtils::Typemaps::Basic&lt;/code&gt;. Two steps to getting that module's typemaps available in your code:</source>
          <target state="translated">ExtUtils :: ParseXSバージョン3.13_01（perl 5.16以降に付属）以降、複数のCPANディストリビューション間でタイプマップコードを共有するのはかなり簡単です。一般的な考え方は、特定のAPIを提供するモジュールとして共有し、依存モジュールにビルド時の要件としてそれを宣言させ、タイプマップをXSにインポートすることです。CPANでのこのようなタイプマップ共有モジュールの例は、 &lt;code&gt;ExtUtils::Typemaps::Basic&lt;/code&gt; です。そのモジュールのタイプマップをコードで使用できるようにするための2つのステップ：</target>
        </trans-unit>
        <trans-unit id="8f964cabb5662a6c495bdc0c921d6b311abc6ad4" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.10, &lt;a href=&quot;Time::Piece&quot;&gt;Time::Piece&lt;/a&gt; and &lt;a href=&quot;Time::Seconds&quot;&gt;Time::Seconds&lt;/a&gt; are part of the standard distribution, so you might think that you could do something like this:</source>
          <target state="translated">Perl 5.10以降、&lt;a href=&quot;Time::Piece&quot;&gt;Time :: Piece&lt;/a&gt;と&lt;a href=&quot;Time::Seconds&quot;&gt;Time :: Seconds&lt;/a&gt;は標準分布の一部であるため、次のようなことができると思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="f9212af4220a7c7e6998749dd4723a25f0d7eab4" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.10, &lt;a href=&quot;time/piece&quot;&gt;Time::Piece&lt;/a&gt; and &lt;a href=&quot;time/seconds&quot;&gt;Time::Seconds&lt;/a&gt; are part of the standard distribution, so you might think that you could do something like this:</source>
          <target state="translated">Perl 5.10以降、&lt;a href=&quot;time/piece&quot;&gt;Time :: Piece&lt;/a&gt;と&lt;a href=&quot;time/seconds&quot;&gt;Time :: Seconds&lt;/a&gt;は標準ディストリビューションの一部であるため、次のようなことができると思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="97eea9254558fb3fd8f17c44c41b369b3648d850" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.10.0, integer and floating-point formats, along with the &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; formats and &lt;code&gt;()&lt;/code&gt; groups, may all be followed by the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; endianness modifiers to respectively enforce big- or little-endian byte-order. These modifiers are especially useful given how &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;v&lt;/code&gt; , and &lt;code&gt;V&lt;/code&gt; don't cover signed integers, 64-bit integers, or floating-point values.</source>
          <target state="translated">Perl 5.10.0以降では、整数および浮動小数点形式、 &lt;code&gt;p&lt;/code&gt; および &lt;code&gt;P&lt;/code&gt; 形式および &lt;code&gt;()&lt;/code&gt; グループの後にすべて &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;&lt;/code&gt; エンディアンネス修飾子を付けて、それぞれビッグエンディアンまたはリトルエンディアンのバイト順を強制することができます。これらの修飾子は、 &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; が符号付き整数、64ビット整数、または浮動小数点値をカバーしない場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="91887288c16197195e2b34bfb5cb24e865412909" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.10.0, integer and floating-point formats, along with the &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; formats and &lt;code&gt;()&lt;/code&gt; groups, may all be followed by the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; endianness modifiers to respectively enforce big- or little-endian byte-order. These modifiers are especially useful given how &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt;, and &lt;code&gt;V&lt;/code&gt; don't cover signed integers, 64-bit integers, or floating-point values.</source>
          <target state="translated">Perlの5.10.0、整数と浮動小数点形式で始まると共に &lt;code&gt;p&lt;/code&gt; 及び &lt;code&gt;P&lt;/code&gt; の形式及び &lt;code&gt;()&lt;/code&gt; グループ、全てが続いてもよい &lt;code&gt;&amp;gt;&lt;/code&gt; 又は &lt;code&gt;&amp;lt;&lt;/code&gt; エンディアン改質剤は、それぞれ、ビッグエンディアンまたはリトルエンディアンバイト順を強制します。これらの修飾子は、 &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; 、および &lt;code&gt;V&lt;/code&gt; が符号付き整数、64ビット整数、または浮動小数点値をカバーしない場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2ee36782903bc57420ba5e155b45524572f22583" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.12, &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime&lt;/a&gt;&lt;/code&gt; can handle dates past 03:14:08 January 19, 2038, when a 32-bit based time would overflow. You still might get a warning on a 32-bit &lt;code&gt;perl&lt;/code&gt; :</source>
          <target state="translated">Perl 5.12以降、 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/gmtime&quot;&gt;gmtime&lt;/a&gt;&lt;/code&gt; は、20ビットの時刻がオーバーフローする2038年1月19日03:14:08より後の日付を処理できます。32ビット &lt;code&gt;perl&lt;/code&gt; でも警告が表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="06064bcbd3db9848f0c8a7c119116ec7dded2dac" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.12, &lt;code&gt;localtime&lt;/code&gt; and &lt;code&gt;gmtime&lt;/code&gt; can handle dates past 03:14:08 January 19, 2038, when a 32-bit based time would overflow. You still might get a warning on a 32-bit &lt;code&gt;perl&lt;/code&gt;:</source>
          <target state="translated">Perl 5.12以降、 &lt;code&gt;localtime&lt;/code&gt; と &lt;code&gt;gmtime&lt;/code&gt; は、32ビットベースの時間がオーバーフローする2038年1月19日03:14:08以降の日付を処理できます。あなたはまだ32ビットの &lt;code&gt;perl&lt;/code&gt; で警告を受け取るかもしれません：</target>
        </trans-unit>
        <trans-unit id="3547c4def41d12fec193f972e11bcb976215d4c4" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.12, an additional integer parameter will be passed. It will be zero if &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; is called without parameter; &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; is given a filehandle as a parameter, e.g. &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof(FH)&lt;/a&gt;&lt;/code&gt;; and &lt;code&gt;2&lt;/code&gt; in the very special case that the tied filehandle is &lt;code&gt;ARGV&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; is called with an empty parameter list, e.g. &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Perl 5.12以降、追加の整数パラメーターが渡されます。パラメータなしで &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; が呼び出された場合はゼロになります。 &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; にパラメータとしてファイルハンドルが指定されている場合は &lt;code&gt;1&lt;/code&gt; 、たとえば &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof(FH)&lt;/a&gt;&lt;/code&gt; 。そして &lt;code&gt;2&lt;/code&gt; 結び付けられたファイルハンドルがあることを非常に特殊なケースで &lt;code&gt;ARGV&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt; 例えば、空のパラメータリストで呼び出された &lt;code&gt;&lt;a href=&quot;functions/eof&quot;&gt;eof()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="052780286d8ffb3a2e7d500cfc57d223e2ef8ffc" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.12, an additional integer parameter will be passed. It will be zero if &lt;code&gt;eof&lt;/code&gt; is called without parameter; &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;eof&lt;/code&gt; is given a filehandle as a parameter, e.g. &lt;code&gt;eof(FH)&lt;/code&gt;; and &lt;code&gt;2&lt;/code&gt; in the very special case that the tied filehandle is &lt;code&gt;ARGV&lt;/code&gt; and &lt;code&gt;eof&lt;/code&gt; is called with an empty parameter list, e.g. &lt;code&gt;eof()&lt;/code&gt;.</source>
          <target state="translated">Perl 5.12以降、追加の整数パラメーターが渡されます。 &lt;code&gt;eof&lt;/code&gt; がパラメーターなしで呼び出された場合はゼロになります。 &lt;code&gt;1&lt;/code&gt; &lt;code&gt;eof&lt;/code&gt; にパラメータとしてファイルハンドルが指定されている場合。例： &lt;code&gt;eof(FH)&lt;/code&gt; ; そして &lt;code&gt;2&lt;/code&gt; 結び付けられたファイルハンドルがあることを非常に特殊なケースで &lt;code&gt;ARGV&lt;/code&gt; と &lt;code&gt;eof&lt;/code&gt; 例えば、空のパラメータリストで呼び出された &lt;code&gt;eof()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3385173ff54b55e840ed45e4ab6e0da31d97fba8" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14 a parent will not wait() automatically for any child that has been signalled with &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('TERM', ...)&lt;/code&gt; to avoid a deadlock in case the child is blocking on I/O and never receives the signal.</source>
          <target state="translated">Perl 5.14以降、親が &lt;code&gt;&lt;a href=&quot;functions/kill&quot;&gt;kill&lt;/a&gt;('TERM', ...)&lt;/code&gt; 通知された子を自動的にwait（）しないため、子がI / Oでブロックしていて信号を受信しない場合にデッドロックが回避されます。</target>
        </trans-unit>
        <trans-unit id="2f071da8b4fbf9d03d4174f4254c8ac70323e8cb" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14 a parent will not wait() automatically for any child that has been signalled with &lt;code&gt;kill('TERM', ...)&lt;/code&gt; to avoid a deadlock in case the child is blocking on I/O and never receives the signal.</source>
          <target state="translated">Perl 5.14以降、子がI / Oでブロックしていて信号を受信しない場合のデッドロックを回避するために、親は &lt;code&gt;kill('TERM', ...)&lt;/code&gt; 通知された子を自動的にwait（）しません。</target>
        </trans-unit>
        <trans-unit id="90de3712cf0c49e19f3e9d37735c0e97d4b521ae" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed hash or array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; がスカラーEXPRを取ることができます。これは、blessされていないハッシュまたは配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; この側面は非常に実験的であると考えられています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="818e24d28a7aaf2cbc1a6702710734a070d06698" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed hash or array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; がスカラーEXPRを取ることができます。これは、blessされていないハッシュまたは配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; この側面は非常に実験的であると考えられています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="72fa5cd516760576150d0418affb48e1abda4a5b" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must contain a reference to an unblessed hash or array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これには、blessされていないハッシュまたは配列への参照が含まれている必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e2b92aff600824b9c22651f1e75f3d65c35db8ae" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。このEXPRは、祝福されていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。この &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="07bb8994fa6804d1b79f779661eabab22fa4d596" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="10642e156a8402673021a377c62441722a9d8a63" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; この側面は非常に実験的であると考えられています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5169411fd5bf69d929b67dfac03c2c64e43db230" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; can take scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7439a015aa95224d62eb3bbca9a133f540e69f0f" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降では、 &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="23e76a783b752b5dc19b6f3c4b3d934de488d5e6" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed hash or array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。このEXPRは、祝福されていないハッシュまたは配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;functions/values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="47398b3574f050221d9d55302c39ea94e67781b9" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must contain a reference to an unblessed hash or array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これには、blessされていないハッシュまたは配列への参照が含まれている必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;keys&quot;&gt;keys&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fac0b7eb35a23345be196afebeca8562c183fce3" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。このEXPRは、祝福されていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。この &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="427fc5d0e35cec380d803ece997f22ba459e7c3c" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a0a12ea19c52c77b676bcf9fb786b8629096b3dc" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; この側面は非常に実験的であると考えられています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a3217cf42c0331e4a0cfa6eb7dd493042a8c7e44" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; can take scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d0f153998e2fa782a330b974d3d6a495fc8735ee" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降では、 &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。これは、blessされていない配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e3eb26fa45077fda36157e3c2cd25a74327fbf5e" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; can take a scalar EXPR, which must hold a reference to an unblessed hash or array. The argument will be dereferenced automatically. This aspect of &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; is considered highly experimental. The exact behaviour may change in a future version of Perl.</source>
          <target state="translated">Perl 5.14以降、 &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; はスカラーEXPRを取ることができます。このEXPRは、祝福されていないハッシュまたは配列への参照を保持する必要があります。引数は自動的に逆参照されます。 &lt;code&gt;&lt;a href=&quot;values&quot;&gt;values&lt;/a&gt;&lt;/code&gt; この側面は、非常に実験的なものと見なされています。正確な動作は、Perlの将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="de83fa8042912e9f6ddf571cde7008f435d64f25" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#each-HASH&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#each-HASH&quot;&gt; &lt;code&gt;each&lt;/code&gt; &lt;/a&gt;がスカラー式をとることができました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="52a5d1f49a9fb5c5245141f7dfc7c9150a868c0e" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#keys-HASH&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#keys-HASH&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;スカラー式を使用できるようになりました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="99313bdb1dd7941c61f4079e6582dd0df5ded04d" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#pop-ARRAY&quot;&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#pop-ARRAY&quot;&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/a&gt;はスカラー式をとることができました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="e05abb4efe9535e153e305c31af2507782337868" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#push-ARRAY%2CLIST&quot;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#push-ARRAY%2CLIST&quot;&gt; &lt;code&gt;push&lt;/code&gt; &lt;/a&gt;スカラー式を使用できるようになりました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="4b401da5a4481ae0700b1ffba5e3e1def6bf593b" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#shift-ARRAY&quot;&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#shift-ARRAY&quot;&gt; &lt;code&gt;shift&lt;/code&gt; で&lt;/a&gt;スカラー式を使用できるようになりました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="28ee1f2fd5baa405873ebfdb113cbcd1a850a5c7" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#splice-ARRAY%2COFFSET%2CLENGTH%2CLIST&quot;&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#splice-ARRAY%2COFFSET%2CLENGTH%2CLIST&quot;&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/a&gt;スカラー式を使用できるようになりました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="d04cd81960709d263997df907683fe183f516f9c" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#unshift-ARRAY%2CLIST&quot;&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#unshift-ARRAY%2CLIST&quot;&gt; &lt;code&gt;unshift&lt;/code&gt; で&lt;/a&gt;スカラー式を使用できるようになりました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="37dbf87d17e9cfc89d47e4dceb5bb03787d175d3" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.14, an experimental feature allowed &lt;a href=&quot;#values-HASH&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt; to take a scalar expression. This experiment has been deemed unsuccessful, and was removed as of Perl 5.24.</source>
          <target state="translated">Perl 5.14以降、実験的な機能により、&lt;a href=&quot;#values-HASH&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;にスカラー式を使用できるようになりました。この実験は失敗したと見なされ、Perl5.24で削除されました。</target>
        </trans-unit>
        <trans-unit id="84114b43a4e1c51016947fa39587027a5c42b337" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.16, you can embed typemaps into your XS code instead of or in addition to typemaps in a separate file. Multiple such embedded typemaps will be processed in order of appearance in the XS code and like local typemap files take precedence over the default typemap, the embedded typemaps may overwrite previous definitions of TYPEMAP, INPUT, and OUTPUT stanzas. The syntax for embedded typemaps is</source>
          <target state="translated">Perl 5.16からは、別のファイルにあるタイプマップの代わりに、あるいはそれに加えて、XSコードにタイプマップを埋め込むことができます。このような埋め込み型マップは、XSコードの中で出現した順に処理され、ローカル型マップファイルがデフォルト型マップよりも優先されるように、埋め込み型マップは以前に定義されたTYPEMAP,INPUT,OUTPUTのスタンザを上書きすることがあります。埋め込み型マップの構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ead2268f227644c92e6fae21c9b2bbc1c3977d01" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.8, a macro framework has been defined to allow static data to be safely stored in XS modules that will be accessed from a multi-threaded Perl.</source>
          <target state="translated">Perl 5.8 からは、マクロフレームワークが定義されており、マルチスレッドの Perl からアクセスされる XS モジュールに静的データを安全に保存することができます。</target>
        </trans-unit>
        <trans-unit id="83f897274d9417a81431b1cfc87771e6f6b3c937" translate="yes" xml:space="preserve">
          <source>Starting with Perl 5.8.1 strict is strict about its restrictions: if unknown restrictions are used, the strict pragma will abort with</source>
          <target state="translated">Perl 5.8.1以降、strictはその制限について厳格になっています:未知の制限が使用されている場合、strictプラグマは</target>
        </trans-unit>
        <trans-unit id="4c86c42abf281eff02c433a98ecba5908f6fea66" translate="yes" xml:space="preserve">
          <source>Starting with Solaris 8, perl5.00503 (or higher) is supplied with the operating system, so you might not even need to build a newer version of perl at all. The Sun-supplied version is installed in /usr/perl5 with</source>
          <target state="translated">Solaris 8 からは、perl5.00503 (またはそれ以上)がオペレーティングシステムに付属しているので、新しいバージョンの perl をビルドする必要は全くないかもしれません。Sun が提供するバージョンは、/usr/perl5 に</target>
        </trans-unit>
        <trans-unit id="070cbbea94d8e9dec2f41e08f125528dd6a6e9b2" translate="yes" xml:space="preserve">
          <source>Starting with Tiger (Mac OS X 10.4), Apple shipped broken locale files for the eu_ES locale (Basque-Spain). In previous releases of Perl, this resulted in failures in the</source>
          <target state="translated">Tiger (Mac OS X 10.4)以降、Apple は eu_ES ロケール (バスク・スペイン)のロケールファイルが壊れて出荷されていました。Perl の以前のリリースでは、このために</target>
        </trans-unit>
        <trans-unit id="0811928afaca739fa817229f5f4a0d0397bc7c2a" translate="yes" xml:space="preserve">
          <source>Starting with release 1.23_03, Scalar-List-Util is &lt;b&gt;always&lt;/b&gt; using the XS implementation, but for backwards compatibility, we still ship the &lt;code&gt;List::Util::XS&lt;/code&gt; module which just loads &lt;code&gt;List::Util&lt;/code&gt; .</source>
          <target state="translated">スカラー・リスト-Utilのがされ、リリース1.23_03以降では&lt;b&gt;常に&lt;/b&gt; XS実装を使用しますが、後方互換性のために、我々はまだ出荷 &lt;code&gt;List::Util::XS&lt;/code&gt; ちょうどロードモジュール &lt;code&gt;List::Util&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd623545d3ee1fd614905389b9ae3f566a5c0eda" translate="yes" xml:space="preserve">
          <source>Starting with release 1.23_03, Scalar-List-Util is &lt;b&gt;always&lt;/b&gt; using the XS implementation, but for backwards compatibility, we still ship the &lt;code&gt;List::Util::XS&lt;/code&gt; module which just loads &lt;code&gt;List::Util&lt;/code&gt;.</source>
          <target state="translated">スカラー・リスト-Utilのがされ、リリース1.23_03以降では&lt;b&gt;常に&lt;/b&gt;XS実装を使用しますが、後方互換性のために、我々はまだ出荷 &lt;code&gt;List::Util::XS&lt;/code&gt; ちょうどロードモジュール &lt;code&gt;List::Util&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f31afb43ed5a01839f8ddc750e5dd35f48c3a6c" translate="yes" xml:space="preserve">
          <source>Starting with this section, we will be discussing Perl's set of</source>
          <target state="translated">このセクションでは、まず Perl の</target>
        </trans-unit>
        <trans-unit id="351709654314c24c7e4828574de12d19b419fe3b" translate="yes" xml:space="preserve">
          <source>Starting with version 2, the specification document is part of the CPAN-Meta distribution and will be published on CPAN as &lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN::Meta::Spec&lt;/a&gt;.</source>
          <target state="translated">バージョン2以降、仕様書はCPAN-Metaディストリビューションの一部であり、&lt;a href=&quot;CPAN::Meta::Spec&quot;&gt;CPAN :: Meta :: Spec&lt;/a&gt;としてCPANで公開されます。</target>
        </trans-unit>
        <trans-unit id="90a60279d2b084f61a9ca16d8326eb786bc2e1ba" translate="yes" xml:space="preserve">
          <source>Starting with version 2.x, Berkeley DB has internal support for locking. The companion module to this one, &lt;a href=&quot;https://metacpan.org/pod/BerkeleyDB&quot;&gt;BerkeleyDB&lt;/a&gt;, provides an interface to this locking functionality. If you are serious about locking Berkeley DB databases, I strongly recommend using &lt;a href=&quot;https://metacpan.org/pod/BerkeleyDB&quot;&gt;BerkeleyDB&lt;/a&gt;.</source>
          <target state="translated">バージョン2.x以降、BerkeleyDBはロックを内部でサポートしています。このモジュールのコンパニオンモジュールである&lt;a href=&quot;https://metacpan.org/pod/BerkeleyDB&quot;&gt;BerkeleyDB&lt;/a&gt;は、このロック機能へのインターフェイスを提供します。Berkeley DBデータベースのロックを真剣に考えている場合は、&lt;a href=&quot;https://metacpan.org/pod/BerkeleyDB&quot;&gt;BerkeleyDB&lt;/a&gt;を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="8ef231992030ec09e2d04d1b4b88e1196c802a84" translate="yes" xml:space="preserve">
          <source>Starting with version 2.x, Berkeley DB has internal support for locking. The companion module to this one, &lt;b&gt;BerkeleyDB&lt;/b&gt;, provides an interface to this locking functionality. If you are serious about locking Berkeley DB databases, I strongly recommend using &lt;b&gt;BerkeleyDB&lt;/b&gt;.</source>
          <target state="translated">バージョン2.x以降、Berkeley DBは内部でロックをサポートしています。これに対応するモジュール、&lt;b&gt;BerkeleyDB&lt;/b&gt;は、このロック機能へのインターフェースを提供します。Berkeley DBデータベースのロックに真剣に取り組んでいる場合は、&lt;b&gt;BerkeleyDBの&lt;/b&gt;使用を強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="b0ddaaadcc9b4e10884d35d5140782f71785a028" translate="yes" xml:space="preserve">
          <source>Starts a try block. See &lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;&quot;Exception Handling&quot; in perlguts&lt;/a&gt;.</source>
          <target state="translated">tryブロックを開始します。&lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;perlgutsの「例外処理」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6f6299a2f62ed0797f2e4ca75150d013801fc49f" translate="yes" xml:space="preserve">
          <source>Starts a try block. See &lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;Exception Handling in perlguts&lt;/a&gt;.</source>
          <target state="translated">tryブロックを開始します。&lt;a href=&quot;perlguts#Exception-Handling&quot;&gt;perlgutsでの例外処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="79ce33706ca0540aaf9d8ed291d64bf45fad0cd4" translate="yes" xml:space="preserve">
          <source>Startup</source>
          <target state="translated">Startup</target>
        </trans-unit>
        <trans-unit id="6991439e4716de488447c6e2c2f9b1970b90a8e3" translate="yes" xml:space="preserve">
          <source>Stashes and Globs</source>
          <target state="translated">隠し場所とグローブ</target>
        </trans-unit>
        <trans-unit id="d798831840bb11ab5bf25cf6beacc1e88e0ccd5f" translate="yes" xml:space="preserve">
          <source>State Changes</source>
          <target state="translated">状態の変化</target>
        </trans-unit>
        <trans-unit id="acf91ec4328cf0ba3defd8522962fa33e41a1740" translate="yes" xml:space="preserve">
          <source>State storage for the &lt;code&gt;prove&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;prove&lt;/code&gt; コマンドの状態ストレージ。</target>
        </trans-unit>
        <trans-unit id="ed2cb72d0aaac69d6842c67515cf3bf802a6b33a" translate="yes" xml:space="preserve">
          <source>Statement Modifiers</source>
          <target state="translated">ステートメントの修正</target>
        </trans-unit>
        <trans-unit id="92fe71f129a3152d601e68e5cf094d2e72591e9b" translate="yes" xml:space="preserve">
          <source>Statement unlikely to be reached</source>
          <target state="translated">声明に到達する可能性は低い</target>
        </trans-unit>
        <trans-unit id="1ddbc09b1ca4e7855762d5787c6c0d7a3595a8af" translate="yes" xml:space="preserve">
          <source>Static Linking of a new Perl Binary</source>
          <target state="translated">新規Perlバイナリのスタティックリンク</target>
        </trans-unit>
        <trans-unit id="3c5f15db40f98d51818ecdf0034d37509667528b" translate="yes" xml:space="preserve">
          <source>Static functions might not be visible for the backtrace.</source>
          <target state="translated">静的な関数がバックトレースに表示されない場合があります。</target>
        </trans-unit>
        <trans-unit id="8f8ab9355e9f77bfc04d09779d25ce6944605b91" translate="yes" xml:space="preserve">
          <source>Statistics about downloads are truncated by size and period simultaneously.</source>
          <target state="translated">ダウンロードに関する統計は、サイズと期間で同時に切り捨てられています。</target>
        </trans-unit>
        <trans-unit id="5b62492ca830ebc3f7a3384ab3714a073b9f3f35" translate="yes" xml:space="preserve">
          <source>Statistics about downloads are truncated by size and period simultaneously. Setting this to zero or negative disables download statistics.</source>
          <target state="translated">ダウンロードに関する統計情報は、サイズと期間で同時に切り捨てられます。これをゼロまたは負に設定すると、ダウンロード統計を無効にします。</target>
        </trans-unit>
        <trans-unit id="5610cd01f9a3d6080e798d67334a100aa1573c90" translate="yes" xml:space="preserve">
          <source>Status 1 overrides status 2. If you want unambiguous results, call &lt;b&gt;podchecker&lt;/b&gt; with one single argument only.</source>
          <target state="translated">ステータス1はステータス2をオーバーライドします。明確な結果が必要な場合は、1つの引数のみを指定して&lt;b&gt;podchecker&lt;/b&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="187236d960db5eb4ad8363cf8f2f9b1ddb6ac5e1" translate="yes" xml:space="preserve">
          <source>Stdio class buffering options.</source>
          <target state="translated">Stdioクラスのバッファリングオプション。</target>
        </trans-unit>
        <trans-unit id="60a9d23beb62cbe40cee43c7f38898ee6c1f97c7" translate="yes" xml:space="preserve">
          <source>Steffen Mueller &amp;lt;smueller@cpan.org&amp;gt;</source>
          <target state="translated">Steffen Mueller &amp;lt;smueller@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d59ce5418f2072a961fa75b41a54fbc928b69c82" translate="yes" xml:space="preserve">
          <source>Steffen Mueller &lt;code&gt;&amp;lt;smueller@cpan.org&lt;/code&gt;&amp;gt;</source>
          <target state="translated">&lt;code&gt;&amp;lt;smueller@cpan.org&lt;/code&gt; ミューラー&amp;lt;smueller@cpan.org &amp;gt;</target>
        </trans-unit>
        <trans-unit id="c982c59dd847ba297d8467bd252ba58dd872a85c" translate="yes" xml:space="preserve">
          <source>Steffen Mueller, &amp;lt;smueller@cpan.org&amp;gt;</source>
          <target state="translated">Steffen Mueller、&amp;lt;smueller@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="67aeabbbe7f975f118f5118824dfb5a83bb31c11" translate="yes" xml:space="preserve">
          <source>Step-by-step: Distributing your module</source>
          <target state="translated">ステップバイステップ。モジュールを配布する</target>
        </trans-unit>
        <trans-unit id="1a565c4552b2edcc3b1a58d76fe5018ccb0e6a32" translate="yes" xml:space="preserve">
          <source>Step-by-step: Making the module</source>
          <target state="translated">ステップバイステップ。モジュールの作成</target>
        </trans-unit>
        <trans-unit id="481a4d002beceae3935eab8245f4c76879540359" translate="yes" xml:space="preserve">
          <source>Step-by-step: Preparing the ground</source>
          <target state="translated">ステップバイステップで 地盤の準備</target>
        </trans-unit>
        <trans-unit id="80427e23cbb5abd94ca5e55445014873b52c64b8" translate="yes" xml:space="preserve">
          <source>Stephen McCamant &amp;lt;smcc@CSUA.Berkeley.EDU&amp;gt;, based on an earlier version by Malcolm Beattie &amp;lt;mbeattie@sable.ox.ac.uk&amp;gt;, with contributions from Gisle Aas, James Duncan, Albert Dvornik, Robin Houston, Dave Mitchell, Hugo van der Sanden, Gurusamy Sarathy, Nick Ing-Simmons, and Rafael Garcia-Suarez.</source>
          <target state="translated">Stephen McCamant &amp;lt;smcc@CSUA.Berkeley.EDU&amp;gt;、Malcolm Beattie &amp;lt;mbeattie@sable.ox.ac.uk&amp;gt;による以前のバージョンに基づいており、Gisle Aas、James Duncan、Albert Dvornik、Robin Houston、Dave Mitchell、 Hugo van der Sanden、Gurusamy Sarathy、Nick Ing-Simmons、Rafael Garcia-Suarez。</target>
        </trans-unit>
        <trans-unit id="6a244b340bceacb4b7643a7f28401322b0f43369" translate="yes" xml:space="preserve">
          <source>Stephen McCamant, &amp;lt;smcc@CSUA.Berkeley.EDU&amp;gt;.</source>
          <target state="translated">Stephen McCamant、&amp;lt;smcc@CSUA.Berkeley.EDU&amp;gt;。</target>
        </trans-unit>
        <trans-unit id="406bdac466755debe16970475ad1ba98d0b486e3" translate="yes" xml:space="preserve">
          <source>Stepping through code</source>
          <target state="translated">コードのステップスルー</target>
        </trans-unit>
        <trans-unit id="f13a1be70942b94ceb5c4947f5cad9efec256df0" translate="yes" xml:space="preserve">
          <source>Steps through the program a line at a time, without descending into functions.</source>
          <target state="translated">関数に降順することなく、一度に一行ずつプログラムのステップを実行します。</target>
        </trans-unit>
        <trans-unit id="67e08e5dee051e0626b0f262d208037e870d3ac2" translate="yes" xml:space="preserve">
          <source>Steps through the program a line at a time.</source>
          <target state="translated">一度に一行のプログラムを通してステップを実行します。</target>
        </trans-unit>
        <trans-unit id="44dfc13e25f20c2b72056096edf2fa584b23e680" translate="yes" xml:space="preserve">
          <source>Steve Grazzini &amp;lt;steve.grazzini@grantstreet.com&amp;gt;</source>
          <target state="translated">スティーブグラッツィーニ&amp;lt;steve.grazzini@grantstreet.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f18c11d1612cf243a4188b75a5a32a4030b759d2" translate="yes" xml:space="preserve">
          <source>Steve Hay &amp;lt;</source>
          <target state="translated">スティーブ・ヘイ&amp;lt;</target>
        </trans-unit>
        <trans-unit id="378237399a39a01265203b3e7167eea75f75c0c4" translate="yes" xml:space="preserve">
          <source>Steve Hay &amp;lt;steve.m.hay@googlemail.com&amp;gt;</source>
          <target state="translated">スティーブヘイ&amp;lt;steve.m.hay@googlemail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="28fe4c0fd5295a5323e60434a55f5b50b8297659" translate="yes" xml:space="preserve">
          <source>Steve Lembark goes through the details in his YAPC::NA 2009 talk &quot;Perly Linked Lists&quot; ( &lt;a href=&quot;http://www.slideshare.net/lembark/perly-linked-lists&quot;&gt;http://www.slideshare.net/lembark/perly-linked-lists&lt;/a&gt; ), although you can just use his &lt;a href=&quot;LinkedList::Single&quot;&gt;LinkedList::Single&lt;/a&gt; module.</source>
          <target state="translated">Steve Lembarkは、YAPC :: NA2009の講演「&lt;a href=&quot;LinkedList::Single&quot;&gt;PerlyLinkedLists&lt;/a&gt;」（&lt;a href=&quot;http://www.slideshare.net/lembark/perly-linked-lists&quot;&gt;http://www.slideshare.net/lembark/perly-linked-lists&lt;/a&gt;）で詳細を説明していますが、彼のLinkedList :: Singleモジュールを使用することもできます。 。</target>
        </trans-unit>
        <trans-unit id="9d16db78589f14f29e83bbd762e7ffb3c9579828" translate="yes" xml:space="preserve">
          <source>Steve Lembark goes through the details in his YAPC::NA 2009 talk &quot;Perly Linked Lists&quot; ( &lt;a href=&quot;http://www.slideshare.net/lembark/perly-linked-lists&quot;&gt;http://www.slideshare.net/lembark/perly-linked-lists&lt;/a&gt; ), although you can just use his &lt;a href=&quot;http://search.cpan.org/perldoc/LinkedList::Single&quot;&gt;LinkedList::Single&lt;/a&gt; module.</source>
          <target state="translated">Steve Lembarkが彼のYAPC :: NA 2009講演「Perly Linked Lists」（&lt;a href=&quot;http://www.slideshare.net/lembark/perly-linked-lists&quot;&gt;http://www.slideshare.net/lembark/perly-linked-lists&lt;/a&gt;）で詳細を説明していますが、&lt;a href=&quot;http://search.cpan.org/perldoc/LinkedList::Single&quot;&gt;LinkedList :: Single&lt;/a&gt;モジュールを使用するだけで済みます。 。</target>
        </trans-unit>
        <trans-unit id="09652192134371fdefcd293d5003ff83e32ed6ed" translate="yes" xml:space="preserve">
          <source>Steve Peters &amp;lt;steve@fisharerojo.org&amp;gt;</source>
          <target state="translated">Steve Peters &amp;lt;steve@fisharerojo.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="7d6ea163d8063bfc57b0256f3178b768eac364c1" translate="yes" xml:space="preserve">
          <source>Steve Purkis</source>
          <target state="translated">スティーブ・パーキス</target>
        </trans-unit>
        <trans-unit id="9efb7766602083380f01f9cadb6f278fbfabf5e5" translate="yes" xml:space="preserve">
          <source>Steve Purkis &amp;lt;spurkis@cpan.org&amp;gt;</source>
          <target state="translated">Steve Purkis &amp;lt;spurkis@cpan.org&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2200943829d703ee08a178c2eb1eee2c0a806988" translate="yes" xml:space="preserve">
          <source>Steve Purkis.</source>
          <target state="translated">スティーブ・パーキス</target>
        </trans-unit>
        <trans-unit id="270c172269bbb0672801106f89223f66575337c6" translate="yes" xml:space="preserve">
          <source>Steven McDougall &amp;lt;swmcd@world.std.com&amp;gt; for his help and patience with re-writing this manpage.</source>
          <target state="translated">Steven McDougall &amp;lt;swmcd@world.std.com&amp;gt;は、このマンページの書き直しに対する彼の助けと忍耐力に感謝します。</target>
        </trans-unit>
        <trans-unit id="3a70ee5e8fb61558310f5b5e31b73a3d007c0de0" translate="yes" xml:space="preserve">
          <source>Still another problem is that this approach can lead to two code points meaning the same character. Thus in a Greek locale, both U+03A7 and U+00D7 are GREEK CAPITAL LETTER CHI.</source>
          <target state="translated">さらにもう一つの問題は、この方法では同じ文字を意味する2つのコードポイントになる可能性があるということです。このように、ギリシャ語のロケールでは、U+03A7とU+00D7の両方がGREEK CAPITAL LETTER CHIです。</target>
        </trans-unit>
        <trans-unit id="8328b23c2df12839f29c28c4eca38fd0aaace45d" translate="yes" xml:space="preserve">
          <source>Still another use is to maintain visual space between &lt;code&gt;=item&lt;/code&gt; lines. If you specify</source>
          <target state="translated">さらに別の用途は、 &lt;code&gt;=item&lt;/code&gt; 行の間に視覚的なスペースを維持することです。指定した場合</target>
        </trans-unit>
        <trans-unit id="f032a03c23ac64e26ed67dff94c5b968b51897fa" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.02</source>
          <target state="translated">バージョン0.02の時点ではまだ壊れています</target>
        </trans-unit>
        <trans-unit id="548ad6711bf4d2c2e72ae86a234fd3904bec68fd" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.05</source>
          <target state="translated">バージョン:0.05のようにまだ壊れています</target>
        </trans-unit>
        <trans-unit id="42108b0060916a9925408d666ac09829728230ed" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.11</source>
          <target state="translated">バージョン0.11の時点ではまだ壊れています</target>
        </trans-unit>
        <trans-unit id="c382741891bd1d6f7e460709510a9d80509ec7fa" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.20</source>
          <target state="translated">バージョン0.20の時点ではまだ壊れています</target>
        </trans-unit>
        <trans-unit id="1ee45fe089bcfb256a94238e7233dca4c3a45655" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.3.0</source>
          <target state="translated">バージョン0.3.0の時点ではまだ壊れています。</target>
        </trans-unit>
        <trans-unit id="ab0f25affc6234202644d5b637ab1fbe92fe3712" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.32</source>
          <target state="translated">バージョン0.32の時点ではまだ壊れています</target>
        </trans-unit>
        <trans-unit id="6880cdcd0506151ea51b1d4e727ce16ab7512631" translate="yes" xml:space="preserve">
          <source>Still broken as of version: 0.373</source>
          <target state="translated">バージョン:0.373の時点ではまだ壊れています</target>
        </trans-unit>
        <trans-unit id="f3165fead8117026ccedeeae5459ce4da4396860" translate="yes" xml:space="preserve">
          <source>Still broken in version: 0.052</source>
          <target state="translated">まだバージョンが壊れています:0.052</target>
        </trans-unit>
        <trans-unit id="fb3eea18c3547245e8ba9bb10ace527c065a868d" translate="yes" xml:space="preserve">
          <source>Still in Settings, in Channel Update, select Beta Channel.</source>
          <target state="translated">それでも「設定」の「チャンネル更新」で「ベータチャンネル」を選択します。</target>
        </trans-unit>
        <trans-unit id="cfa5a1bd92d7066216395c95a296195ffe2e0f16" translate="yes" xml:space="preserve">
          <source>Stolen from File::Path::Expand</source>
          <target state="translated">File::Path::Expand からの盗用</target>
        </trans-unit>
        <trans-unit id="6682620d81182203397e365b84fecf9cd43d1829" translate="yes" xml:space="preserve">
          <source>Stop logging each disk request:</source>
          <target state="translated">各ディスク要求のログを記録しないようにします。</target>
        </trans-unit>
        <trans-unit id="72bc7a84f86b7c98bba879166a64bc5b045625fd" translate="yes" xml:space="preserve">
          <source>Stops running tests as &quot;TODO&quot; tests. This method is fatal if called without a preceding &lt;code&gt;todo_start&lt;/code&gt; method call.</source>
          <target state="translated">「TODO」テストとしてのテストの実行を停止します。このメソッドは、前に &lt;code&gt;todo_start&lt;/code&gt; メソッドを呼び出さずに呼び出すと致命的です。</target>
        </trans-unit>
        <trans-unit id="45b0f8b6273dfd6e7997a4038c99b48d40e17dae" translate="yes" xml:space="preserve">
          <source>Storable</source>
          <target state="translated">Storable</target>
        </trans-unit>
        <trans-unit id="46f9f6e335231e1456d3ba18bd5a505213eb74c6" translate="yes" xml:space="preserve">
          <source>Storable - persistence for Perl data structures</source>
          <target state="translated">Storable-Perl データ構造体の永続化</target>
        </trans-unit>
        <trans-unit id="1630856d50b3ec9af87960aa33400ccd3dc094bd" translate="yes" xml:space="preserve">
          <source>Storable has now been changed to write out and read in a file header with information about the size of integers. It's impossible to detect whether an old file being read in was written with 32 or 64 bit integers (they have the same header) so it's impossible to automatically switch to a correct backwards compatibility mode. Hence this Storable defaults to the new, correct behaviour.</source>
          <target state="translated">Storableは、ファイルのヘッダに整数の大きさの情報を書き出して読み込むように変更されました。読み込まれる古いファイルが32ビットか64ビットの整数で書かれているかどうかを検出することができないので(それらは同じヘッダを持っています)、自動的に正しい下位互換モードに切り替えることができません。そのため、このStorableは新しい正しい動作をデフォルトにしています。</target>
        </trans-unit>
        <trans-unit id="714a2ccbafbac0389af167e01df326cf6b8a78ff" translate="yes" xml:space="preserve">
          <source>Storable magic</source>
          <target state="translated">保存可能な魔法</target>
        </trans-unit>
        <trans-unit id="dfd98121663ee3170e7a7e6a0d89a8a9dfe033b8" translate="yes" xml:space="preserve">
          <source>Storable now has experimental support for storing regular expressions, but there are significant limitations:</source>
          <target state="translated">Storableは現在、正規表現の格納を実験的にサポートしていますが、大きな制限があります。</target>
        </trans-unit>
        <trans-unit id="7182df5560db2bb6b5167976e453bb5798e3130f" translate="yes" xml:space="preserve">
          <source>Storable provides you with a &lt;code&gt;dclone&lt;/code&gt; interface which does not create that intermediary scalar but instead freezes the structure in some internal memory space and then immediately thaws it out.</source>
          <target state="translated">Storableは &lt;code&gt;dclone&lt;/code&gt; インターフェースを提供します。これは、中間スカラーを作成せず、代わりに一部の内部メモリ空間で構造をフリーズして、すぐに解凍します。</target>
        </trans-unit>
        <trans-unit id="70fb12ce1748ed7f4a137be836ce41aa365bbd68" translate="yes" xml:space="preserve">
          <source>Storable uses the &quot;exception&quot; paradigm, in that it does not try to workaround failures: if something bad happens, an exception is generated from the caller's perspective (see &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; and &lt;code&gt;croak()&lt;/code&gt; ). Use eval {} to trap those exceptions.</source>
          <target state="translated">Storableは、「例外」パラダイムを使用して、障害の回避策を試みません。何か問題が発生した場合、呼び出し元の観点から例外が生成されます（&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;および &lt;code&gt;croak()&lt;/code&gt; を参照）。これらの例外をトラップするには、eval {}を使用します。</target>
        </trans-unit>
        <trans-unit id="efb225f838cb012d7da5a2492afd60f053bbc61a" translate="yes" xml:space="preserve">
          <source>Storable uses the &quot;exception&quot; paradigm, in that it does not try to workaround failures: if something bad happens, an exception is generated from the caller's perspective (see &lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt; and &lt;code&gt;croak()&lt;/code&gt;). Use eval {} to trap those exceptions.</source>
          <target state="translated">Storableは、失敗を回避しようとしないという点で「例外」パラダイムを使用します。何か悪いことが起こった場合、呼び出し元の観点から例外が生成されます（&lt;a href=&quot;carp&quot;&gt;Carp&lt;/a&gt;と &lt;code&gt;croak()&lt;/code&gt; を参照）。eval {}を使用して、これらの例外をトラップします。</target>
        </trans-unit>
        <trans-unit id="531ca0b8b45f41c9f0b1aa246372790831675baa" translate="yes" xml:space="preserve">
          <source>Storable was written by Raphael Manfredi</source>
          <target state="translated">Storableは、ラファエル・マンフレディによって書かれました。</target>
        </trans-unit>
        <trans-unit id="2f13ce5cb38e462f6f7f68a313f75016b704439f" translate="yes" xml:space="preserve">
          <source>Storable will throw an exception if a frozen regular expression cannot be thawed.</source>
          <target state="translated">凍結した正規表現を解凍できない場合、Storable は例外をスローします。</target>
        </trans-unit>
        <trans-unit id="b7e864254e3dece2f3614748bd8acc66ad85caaa" translate="yes" xml:space="preserve">
          <source>Storable writes a file header which contains the sizes of various C language types for the C compiler that built Storable (when not writing in network order), and will refuse to load files written by a Storable not on the same (or compatible) architecture. This check and a check on machine byteorder is needed because the size of various fields in the file are given by the sizes of the C language types, and so files written on different architectures are incompatible. This is done for increased speed. (When writing in network order, all fields are written out as standard lengths, which allows full interworking, but takes longer to read and write)</source>
          <target state="translated">Storableは、Storableを構築したCコンパイラ用の各種C言語型のサイズを含むファイルヘッダを書き込み(ネットワーク順に書かれていない場合)、同じ(互換性のある)アーキテクチャ上にないStorableで書かれたファイルの読み込みを拒否します。このチェックとマシンのバイトオーダーのチェックが必要なのは、ファイル内の様々なフィールドのサイズがC言語型のサイズによって与えられているため、異なるアーキテクチャで書かれたファイルは互換性がないからです。これは高速化のために行われています。(ネットワーク順に書く場合は、すべてのフィールドが標準の長さで書き出されるため、完全なインターワーキングが可能になりますが、読み書きに時間がかかります)</target>
        </trans-unit>
        <trans-unit id="fcaa72ed14ae844e5cba322adeff102b58e7d72e" translate="yes" xml:space="preserve">
          <source>Store (method 0)</source>
          <target state="translated">ストア(メソッド0)</target>
        </trans-unit>
        <trans-unit id="4150d3a5cc43231c993765dececd1a150bb52a3d" translate="yes" xml:space="preserve">
          <source>Store Memoized data in Storable database</source>
          <target state="translated">メモされたデータを保存可能なデータベースに保存</target>
        </trans-unit>
        <trans-unit id="92a651d3dc16aed75ba857e2f774b7e083ba7965" translate="yes" xml:space="preserve">
          <source>Store and re-use state information about distributions between CPAN.pm sessions?</source>
          <target state="translated">CPAN.pm セッション間のディストリビューションに関する状態情報を保存して再利用するか?</target>
        </trans-unit>
        <trans-unit id="2c71530924851d1b8827aef4994b16eb515c4e61" translate="yes" xml:space="preserve">
          <source>Store data</source>
          <target state="translated">店舗の日付</target>
        </trans-unit>
        <trans-unit id="b25c722ad4f1fce5bbbe8fc35b0030d7d69ef919" translate="yes" xml:space="preserve">
          <source>Store datum</source>
          <target state="translated">保存データ</target>
        </trans-unit>
        <trans-unit id="8f37eea7a30e3775bbbbb580f43dfdd3bec41576" translate="yes" xml:space="preserve">
          <source>Store the results of a test.</source>
          <target state="translated">テストの結果を保存します。</target>
        </trans-unit>
        <trans-unit id="389cd56c2ab90c83d09e93be1e21e43d82460448" translate="yes" xml:space="preserve">
          <source>Stores &lt;code&gt;$value&lt;/code&gt; in the gzip OS header field. A number between 0 and 255 is valid.</source>
          <target state="translated">店舗の &lt;code&gt;$value&lt;/code&gt; のgzip OSヘッダーフィールドに入力します。0から255までの数値が有効です。</target>
        </trans-unit>
        <trans-unit id="b39d714bdc1e95f53f0e2222e4e3c3755001f302" translate="yes" xml:space="preserve">
          <source>Stores &lt;code&gt;val&lt;/code&gt; in a hash. The hash key is specified as &lt;code&gt;key&lt;/code&gt; . The &lt;code&gt;hash&lt;/code&gt; parameter is the precomputed hash value; if it is zero then Perl will compute it. The return value is the new hash entry so created. It will be NULL if the operation failed or if the value did not need to be actually stored within the hash (as in the case of tied hashes). Otherwise the contents of the return value can be accessed using the &lt;code&gt;He?&lt;/code&gt; macros described here. Note that the caller is responsible for suitably incrementing the reference count of &lt;code&gt;val&lt;/code&gt; before the call, and decrementing it if the function returned NULL. Effectively a successful hv_store_ent takes ownership of one reference to &lt;code&gt;val&lt;/code&gt; . This is usually what you want; a newly created SV has a reference count of one, so if all your code does is create SVs then store them in a hash, hv_store will own the only reference to the new SV, and your code doesn't need to do anything further to tidy up. Note that hv_store_ent only reads the &lt;code&gt;key&lt;/code&gt; ; unlike &lt;code&gt;val&lt;/code&gt; it does not take ownership of it, so maintaining the correct reference count on &lt;code&gt;key&lt;/code&gt; is entirely the caller's responsibility. hv_store is not implemented as a call to hv_store_ent, and does not create a temporary SV for the key, so if your key data is not already in SV form then use hv_store in preference to hv_store_ent.</source>
          <target state="translated">店舗は &lt;code&gt;val&lt;/code&gt; ハッシュで。ハッシュキーはkeyとして指定され &lt;code&gt;key&lt;/code&gt; 。 &lt;code&gt;hash&lt;/code&gt; パラメータは、事前に計算されたハッシュ値です。ゼロの場合、Perlはそれを計算します。戻り値は、そのように作成された新しいハッシュエントリです。操作が失敗した場合、または値が実際にハッシュ内に格納される必要がない場合（tieされたハッシュの場合など）は、NULLになります。そうでない場合、戻り値の内容は &lt;code&gt;He?&lt;/code&gt; ここで説明するマクロ。呼び出し元は、呼び出しの前に &lt;code&gt;val&lt;/code&gt; の参照カウントを適切にインクリメントし、関数がNULLを返した場合はそれをデクリメントする責任があることに注意してください。効果的にhv_store_entが成功すると、 &lt;code&gt;val&lt;/code&gt; への1つの参照の所有権が取得されます。通常、これが必要です。新しく作成されたSVの参照カウントは1であるため、すべてのコードがSVを作成してハッシュに格納する場合、hv_storeは新しいSVへの唯一の参照を所有し、コードはこれ以上何もする必要がありません。片付ける。 hv_store_entは &lt;code&gt;key&lt;/code&gt; のみを読み取ることに注意してください。 &lt;code&gt;val&lt;/code&gt; とは異なり、それの所有権は取得されないため、 &lt;code&gt;key&lt;/code&gt; の正しい参照カウントを維持することは完全に呼び出し側の責任です。 hv_storeはhv_store_entの呼び出しとして実装されておらず、キーの一時SVを作成しないため、キーデータがまだSV形式でない場合は、hv_store_entよりもhv_storeを使用してください。</target>
        </trans-unit>
        <trans-unit id="1d4914da783cf76bac012d3e2b02900b8208b54e" translate="yes" xml:space="preserve">
          <source>Stores &lt;code&gt;val&lt;/code&gt; in a hash. The hash key is specified as &lt;code&gt;key&lt;/code&gt;. The &lt;code&gt;hash&lt;/code&gt; parameter is the precomputed hash value; if it is zero then Perl will compute it. The return value is the new hash entry so created. It will be &lt;code&gt;NULL&lt;/code&gt; if the operation failed or if the value did not need to be actually stored within the hash (as in the case of tied hashes). Otherwise the contents of the return value can be accessed using the &lt;code&gt;He?&lt;/code&gt; macros described here. Note that the caller is responsible for suitably incrementing the reference count of &lt;code&gt;val&lt;/code&gt; before the call, and decrementing it if the function returned NULL. Effectively a successful &lt;code&gt;hv_store_ent&lt;/code&gt; takes ownership of one reference to &lt;code&gt;val&lt;/code&gt;. This is usually what you want; a newly created SV has a reference count of one, so if all your code does is create SVs then store them in a hash, &lt;code&gt;hv_store&lt;/code&gt; will own the only reference to the new SV, and your code doesn't need to do anything further to tidy up. Note that &lt;code&gt;hv_store_ent&lt;/code&gt; only reads the &lt;code&gt;key&lt;/code&gt;; unlike &lt;code&gt;val&lt;/code&gt; it does not take ownership of it, so maintaining the correct reference count on &lt;code&gt;key&lt;/code&gt; is entirely the caller's responsibility. The reason it does not take ownership, is that &lt;code&gt;key&lt;/code&gt; is not used after this function returns, and so can be freed immediately. &lt;code&gt;hv_store&lt;/code&gt; is not implemented as a call to &lt;code&gt;hv_store_ent&lt;/code&gt;, and does not create a temporary SV for the key, so if your key data is not already in SV form then use &lt;code&gt;hv_store&lt;/code&gt; in preference to &lt;code&gt;hv_store_ent&lt;/code&gt;.</source>
          <target state="translated">店舗は &lt;code&gt;val&lt;/code&gt; ハッシュで。ハッシュキーはkeyとして指定され &lt;code&gt;key&lt;/code&gt; 。 &lt;code&gt;hash&lt;/code&gt; パラメータは、事前に計算されたハッシュ値です。ゼロの場合、Perlはそれを計算します。戻り値は、そのように作成された新しいハッシュエントリです。操作が失敗した場合、または値を実際にハッシュ内に格納する必要がなかった場合（タイハッシュの場合のように）、 &lt;code&gt;NULL&lt;/code&gt; になります。それ以外の場合は、 &lt;code&gt;He?&lt;/code&gt; を使用して戻り値の内容にアクセスできます。ここで説明するマクロ。呼び出し元は、呼び出しの前に &lt;code&gt;val&lt;/code&gt; の参照カウントを適切にインクリメントし、関数がNULLを返した場合はそれをデクリメントする責任があることに注意してください。事実上、成功した &lt;code&gt;hv_store_ent&lt;/code&gt; は、次の1つの参照の所有権を取得します。 &lt;code&gt;val&lt;/code&gt; 。これは通常あなたが望むものです。新しく作成されたSVの参照カウントは1であるため、コードがSVを作成してハッシュに &lt;code&gt;hv_store&lt;/code&gt; するだけの場合、hv_storeは新しいSVへの唯一の参照を所有し、コードはそれ以上何もする必要はありません。片付ける。 &lt;code&gt;hv_store_ent&lt;/code&gt; は &lt;code&gt;key&lt;/code&gt; のみを読み取ることに注意してください。 &lt;code&gt;val&lt;/code&gt; とは異なり、所有権を取得しないため、 &lt;code&gt;key&lt;/code&gt; 正しい参照カウントを維持することは、完全に呼び出し元の責任です。所有権を取得しない理由は、この関数が戻った後は &lt;code&gt;key&lt;/code&gt; が使用されないため、すぐに解放できるためです。 &lt;code&gt;hv_store&lt;/code&gt; は、 &lt;code&gt;hv_store_ent&lt;/code&gt; の呼び出しとして実装されていません、およびキーの一時SVを作成しないため、キーデータがまだSV形式になっていない場合は、 &lt;code&gt;hv_store&lt;/code&gt; _entよりもを使用し &lt;code&gt;hv_store_ent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e853791e7f610503cb4ac62aa2d38d07104bcbf" translate="yes" xml:space="preserve">
          <source>Stores a value, associated with a key, in the cop hints hash</source>
          <target state="translated">キーに関連付けられた値を cop hints ハッシュに格納します。</target>
        </trans-unit>
        <trans-unit id="e4608cb007876dc9a320a4e730182bf778f713b9" translate="yes" xml:space="preserve">
          <source>Stores a value, associated with a key, in the cop hints hash &lt;code&gt;cophh&lt;/code&gt;, and returns the modified hash. The returned hash pointer is in general not the same as the hash pointer that was passed in. The input hash is consumed by the function, and the pointer to it must not be subsequently used. Use &lt;a href=&quot;#cophh_copy&quot;&gt;&quot;cophh_copy&quot;&lt;/a&gt; if you need both hashes.</source>
          <target state="translated">キーに関連付けられた値をcopヒントハッシュ &lt;code&gt;cophh&lt;/code&gt; に格納し、変更されたハッシュを返します。返されるハッシュポインタは、通常、渡されたハッシュポインタと同じではありません。入力ハッシュは関数によって消費されるため、それへのポインタを後で使用することはできません。両方のハッシュが必要な場合は、&lt;a href=&quot;#cophh_copy&quot;&gt;「cophh_copy」を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="5e0142d462eb02b96cf9082ac295203e85636940" translate="yes" xml:space="preserve">
          <source>Stores all unambiguous truncations of each element of LIST as keys in the associative array referenced by &lt;code&gt;$hashref&lt;/code&gt; . The values are the original list elements.</source>
          <target state="translated">&lt;code&gt;$hashref&lt;/code&gt; によって参照される連想配列のキーとして、LISTの各要素のすべての明確な切り捨てを格納します。値は元のリスト要素です。</target>
        </trans-unit>
        <trans-unit id="c2253242048c2f74667f3a23355d9505c38b27fe" translate="yes" xml:space="preserve">
          <source>Stores all unambiguous truncations of each element of LIST as keys in the associative array referenced by &lt;code&gt;$hashref&lt;/code&gt;. The values are the original list elements.</source>
          <target state="translated">LISTの各要素のすべての明確な切り捨てを、 &lt;code&gt;$hashref&lt;/code&gt; によって参照される連想配列のキーとして格納します。値は元のリスト要素です。</target>
        </trans-unit>
        <trans-unit id="4236561c990b7cd479ccb52f08cd5fac9306b818" translate="yes" xml:space="preserve">
          <source>Stores an SV in a hash. The hash key is specified as &lt;code&gt;key&lt;/code&gt; and the absolute value of &lt;code&gt;klen&lt;/code&gt; is the length of the key. If &lt;code&gt;klen&lt;/code&gt; is negative the key is assumed to be in UTF-8-encoded Unicode. The &lt;code&gt;hash&lt;/code&gt; parameter is the precomputed hash value; if it is zero then Perl will compute it.</source>
          <target state="translated">SVをハッシュに格納します。ハッシュキーはとして指定されている &lt;code&gt;key&lt;/code&gt; との絶対値 &lt;code&gt;klen&lt;/code&gt; は、キーの長さです。 &lt;code&gt;klen&lt;/code&gt; が負の場合、キーはUTF-8でエンコードされたUnicodeであると想定されます。 &lt;code&gt;hash&lt;/code&gt; パラメータは、事前に計算されたハッシュ値です。それがゼロの場合、Perlはそれを計算します。</target>
        </trans-unit>
        <trans-unit id="d6c29a0065e8b044a53af0ddb9dc3214fa041cf5" translate="yes" xml:space="preserve">
          <source>Stores an SV in an array. The array index is specified as &lt;code&gt;key&lt;/code&gt; . The return value will be NULL if the operation failed or if the value did not need to be actually stored within the array (as in the case of tied arrays). Otherwise, it can be dereferenced to get the &lt;code&gt;SV*&lt;/code&gt; that was stored there (= &lt;code&gt;val&lt;/code&gt; )).</source>
          <target state="translated">SVを配列に格納します。配列のインデックスは &lt;code&gt;key&lt;/code&gt; として指定されます。操作が失敗した場合、または値が実際に配列内に格納される必要がない場合（結合配列の場合など）、戻り値はNULLになります。そうでなければ、そこに格納された &lt;code&gt;SV*&lt;/code&gt; を取得するために逆参照することができます（= &lt;code&gt;val&lt;/code&gt; ））。</target>
        </trans-unit>
        <trans-unit id="76dd68cc1b2cbd70a2c8fe63742bb4f5c0c8d0f4" translate="yes" xml:space="preserve">
          <source>Stores an SV in an array. The array index is specified as &lt;code&gt;key&lt;/code&gt;. The return value will be &lt;code&gt;NULL&lt;/code&gt; if the operation failed or if the value did not need to be actually stored within the array (as in the case of tied arrays). Otherwise, it can be dereferenced to get the &lt;code&gt;SV*&lt;/code&gt; that was stored there (= &lt;code&gt;val&lt;/code&gt;)).</source>
          <target state="translated">SVを配列に格納します。配列インデックスは &lt;code&gt;key&lt;/code&gt; として指定されます。操作が失敗した場合、または値を実際に配列内に格納する必要がなかった場合（タイ配列の場合のように）、戻り値は &lt;code&gt;NULL&lt;/code&gt; になります。それ以外の場合は、そこに格納された &lt;code&gt;SV*&lt;/code&gt; （= &lt;code&gt;val&lt;/code&gt; ）を取得するために逆参照できます。</target>
        </trans-unit>
        <trans-unit id="7401a972574f8c1665c02fe0802590c81677bf55" translate="yes" xml:space="preserve">
          <source>Stores an alias to a variable in a hash instead of copying the value.</source>
          <target state="translated">値をコピーする代わりに、変数のエイリアスをハッシュに格納します。</target>
        </trans-unit>
        <trans-unit id="9f6711f9c55cd1025cf538a50470266deb723a43" translate="yes" xml:space="preserve">
          <source>Stores results for later output, all together.</source>
          <target state="translated">後で出力するための結果をまとめて保存します。</target>
        </trans-unit>
        <trans-unit id="ced5e829ffc1318c3116b905b84107c1f3b72848" translate="yes" xml:space="preserve">
          <source>Stores the contents of &lt;code&gt;$comment&lt;/code&gt; in the COMMENT field in the gzip header. By default, no comment field is written to the gzip file.</source>
          <target state="translated">&lt;code&gt;$comment&lt;/code&gt; の内容をgzipヘッダーのCOMMENTフィールドに格納します。デフォルトでは、コメントフィールドはgzipファイルに書き込まれません。</target>
        </trans-unit>
        <trans-unit id="26843a54a3aa3332ec1baa3fb76f8c537a96c327" translate="yes" xml:space="preserve">
          <source>Stores the contents of &lt;code&gt;$comment&lt;/code&gt; in the Central File Header of the zip file.</source>
          <target state="translated">&lt;code&gt;$comment&lt;/code&gt; の内容をzipファイルの中央ファイルヘッダーに格納します。</target>
        </trans-unit>
        <trans-unit id="f6d27852fc3f996b193528d04367b82db064d418" translate="yes" xml:space="preserve">
          <source>Stores the contents of &lt;code&gt;$comment&lt;/code&gt; in the End of Central Directory record of the zip file.</source>
          <target state="translated">&lt;code&gt;$comment&lt;/code&gt; の内容をzipファイルのEnd of Central Directoryレコードに格納します。</target>
        </trans-unit>
        <trans-unit id="24042b8640feee28c4f2a0aafea788776423cdd1" translate="yes" xml:space="preserve">
          <source>Stores the contents of &lt;code&gt;$string&lt;/code&gt; in the gzip NAME header field. If &lt;code&gt;Name&lt;/code&gt; is not specified, no gzip NAME field will be created.</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; の内容をgzip NAMEヘッダーフィールドに格納します。 &lt;code&gt;Name&lt;/code&gt; が指定されていない場合、gzip NAMEフィールドは作成されません。</target>
        </trans-unit>
        <trans-unit id="1023c335a52babfe2f8c4a04c4f2766471fa8387" translate="yes" xml:space="preserve">
          <source>Stores the contents of &lt;code&gt;$string&lt;/code&gt; in the zip filename header field.</source>
          <target state="translated">&lt;code&gt;$string&lt;/code&gt; の内容をzipファイル名のヘッダーフィールドに格納します。</target>
        </trans-unit>
        <trans-unit id="51541d8a3d93b2d48a376cb2252ed37ed72421ab" translate="yes" xml:space="preserve">
          <source>Stores the key/value pair in the database.</source>
          <target state="translated">キーと値のペアをデータベースに格納します。</target>
        </trans-unit>
        <trans-unit id="ab093d23324af52293488a603b3cc3854b181a9e" translate="yes" xml:space="preserve">
          <source>Stores the pad name (which may be null) at the given index, freeing any existing pad name in that slot.</source>
          <target state="translated">指定されたインデックスにパッド名(nullの場合もあります)を格納し、そのスロット内の既存のパッド名を解放します。</target>
        </trans-unit>
        <trans-unit id="9d70a29a0f92ba96f998b27b0c51d6b21ce2123e" translate="yes" xml:space="preserve">
          <source>Stores the string &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; stringifies to. The Perl engine for example stores &lt;code&gt;(?^:eek)&lt;/code&gt; in the case of &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/eek/&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 格納します。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr/eek/&lt;/a&gt;&lt;/code&gt; 場合、Perlエンジンはストア &lt;code&gt;(?^:eek)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bba419efdc2f7f861e8ccd4110f43bd3fa7e32d3" translate="yes" xml:space="preserve">
          <source>Stores the string &lt;code&gt;qr//&lt;/code&gt; stringifies to. The Perl engine for example stores &lt;code&gt;(?^:eek)&lt;/code&gt; in the case of &lt;code&gt;qr/eek/&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;qr//&lt;/code&gt; 文字列化して格納します。たとえば、Perlエンジンは、 &lt;code&gt;qr/eek/&lt;/code&gt; 場合に &lt;code&gt;(?^:eek)&lt;/code&gt; を格納します。</target>
        </trans-unit>
        <trans-unit id="30082107d90ca21e79e8350f2001678a7dc4b25b" translate="yes" xml:space="preserve">
          <source>Storing data canonically that contains large hashes can be significantly slower than storing the same data normally, as temporary arrays to hold the keys for each hash have to be allocated, populated, sorted and freed. Some tests have shown a halving of the speed of storing -- the exact penalty will depend on the complexity of your data. There is no slowdown on retrieval.</source>
          <target state="translated">大きなハッシュを含むデータを正準的に保存することは、同じデータを普通に保存するよりもかなり遅くなります。いくつかのテストでは、保存の速度が半減することが示されています --正確なペナルティはデータの複雑さに依存します。検索時の速度低下はありません。</target>
        </trans-unit>
        <trans-unit id="2ccce2de5e8ad98636ec0480f8c1e95cb4123766" translate="yes" xml:space="preserve">
          <source>Storing numbers</source>
          <target state="translated">数字の保存</target>
        </trans-unit>
        <trans-unit id="408286a7232f91f660936da7835bac0e8863fd20" translate="yes" xml:space="preserve">
          <source>Storing options values in a hash</source>
          <target state="translated">オプションの値をハッシュに格納する</target>
        </trans-unit>
        <trans-unit id="5ca11c09231ed950fa4ac2095c30a18383eebf81" translate="yes" xml:space="preserve">
          <source>Storing pre-compiled regexps in an array &lt;code&gt;@compiled&lt;/code&gt; allows us to simply loop through the regexps without any recompilation, thus gaining flexibility without sacrificing speed.</source>
          <target state="translated">コンパイル済みの正規表現を配列 &lt;code&gt;@compiled&lt;/code&gt; に格納すると、再コンパイルせずに単純に正規表現をループできるため、速度を犠牲にすることなく柔軟性を得ることができます。</target>
        </trans-unit>
        <trans-unit id="3e08b2cdc880eca3b63a251507ea23ebf665def8" translate="yes" xml:space="preserve">
          <source>Straightaway we can see that the number of times each line has been called is identical to the &lt;code&gt;Devel::SmallProf&lt;/code&gt; output, and the sequence is only very slightly different based on the ordering of the amount of time each line took to execute, &lt;code&gt;if ( $debug ) { &lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $message = &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;;&lt;/code&gt; , for example. The differences in the actual times recorded might be in the algorithm used internally, or it could be due to system resource limitations or contention.</source>
          <target state="translated">各行が呼び出された回数が &lt;code&gt;Devel::SmallProf&lt;/code&gt; 出力と同じであり、シーケンスが各行の実行にかかった時間の順序に基づいて非常にわずかに異なるだけであることがわかります &lt;code&gt;if ( $debug ) { &lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $message = &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;;&lt;/code&gt; 、 例えば。記録された実際の時間の違いは、内部で使用されているアルゴリズムにあるか、システムリソースの制限または競合が原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="b0bd17b455e668c15c8b3e94cf9e6f3076ea19b7" translate="yes" xml:space="preserve">
          <source>Straightaway we can see that the number of times each line has been called is identical to the &lt;code&gt;Devel::SmallProf&lt;/code&gt; output, and the sequence is only very slightly different based on the ordering of the amount of time each line took to execute, &lt;code&gt;if ( $debug ) { &lt;/code&gt; and &lt;code&gt;my $message = shift;&lt;/code&gt;, for example. The differences in the actual times recorded might be in the algorithm used internally, or it could be due to system resource limitations or contention.</source>
          <target state="translated">Straightaway私たちは、それぞれの行が呼び出された回数が同じであることがわかります &lt;code&gt;Devel::SmallProf&lt;/code&gt; 出力、およびシーケンスは、各行が、実行するのにかかった時間の順序に基づいて、ごくわずかに異なっている &lt;code&gt;if ( $debug ) { &lt;/code&gt; そして &lt;code&gt;my $message = shift;&lt;/code&gt; 、 例えば。記録された実際の時間の違いは、内部で使用されているアルゴリズムにあるか、システムリソースの制限または競合が原因である可能性があります。</target>
        </trans-unit>
        <trans-unit id="cf5060e04f34c62382f4c8552c1d1cf9f000d47b" translate="yes" xml:space="preserve">
          <source>Strategies for Storing Callback Context Information</source>
          <target state="translated">コールバックコンテキスト情報の保存戦略</target>
        </trans-unit>
        <trans-unit id="85d8ba9bfe62936890930b5c6a10433e149d003f" translate="yes" xml:space="preserve">
          <source>Stratus OpenVOS (17.0 or later)</source>
          <target state="translated">Stratus OpenVOS (17.0 以降)</target>
        </trans-unit>
        <trans-unit id="813265ea56803a78f3b7159d5fee7e20c7133600" translate="yes" xml:space="preserve">
          <source>Stratus Technologies on the web at &lt;a href=&quot;http://www.stratus.com&quot;&gt;http://www.stratus.com&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://www.stratus.com&quot;&gt;http://www.stratus.com&lt;/a&gt;にあるWeb上のStratus Technologies</target>
        </trans-unit>
        <trans-unit id="3e27222dd34cc6a5684f257f4f56510f3e78b139" translate="yes" xml:space="preserve">
          <source>Stratus VOS / OpenVOS</source>
          <target state="translated">Stratus VOS/OpenVOS</target>
        </trans-unit>
        <trans-unit id="e9e8d1a4aa1f448e22fd91f660943bf3fb47ccc9" translate="yes" xml:space="preserve">
          <source>Stratus VOS 15.1, &lt;a href=&quot;http://stratadoc.stratus.com/vos/15.1.1/r502-01/wwhelp/wwhimpl/js/html/wwhelp.htm?context=r502-01&amp;amp;file=ch5r502-01bi.html&quot;&gt;http://stratadoc.stratus.com/vos/15.1.1/r502-01/wwhelp/wwhimpl/js/html/wwhelp.htm?context=r502-01&amp;amp;file=ch5r502-01bi.html&lt;/a&gt;</source>
          <target state="translated">Stratus VOS 15.1、&lt;a href=&quot;http://stratadoc.stratus.com/vos/15.1.1/r502-01/wwhelp/wwhimpl/js/html/wwhelp.htm?context=r502-01&amp;amp;file=ch5r502-01bi.html&quot;&gt;http：&lt;/a&gt; //stratadoc.stratus.com/vos/15.1.1/r502-01/wwhelp/wwhimpl/js/html/wwhelp.htm？context = r502-01＆file = ch5r502-01bi.html</target>
        </trans-unit>
        <trans-unit id="6dac5050cc8d5226a232897b98c67a79066b8e3a" translate="yes" xml:space="preserve">
          <source>Stream TAP from a Perl executable</source>
          <target state="translated">Perl実行ファイルからTAPをストリーム配信</target>
        </trans-unit>
        <trans-unit id="411adcb2712346800a739adfeb9ade95333b1abf" translate="yes" xml:space="preserve">
          <source>Stream TAP from a text file.</source>
          <target state="translated">テキストファイルからTAPをストリーム配信します。</target>
        </trans-unit>
        <trans-unit id="5517c94f54c087e37e9e39887df00a0c39d682fc" translate="yes" xml:space="preserve">
          <source>Stream TAP from an IO::Handle or a GLOB.</source>
          <target state="translated">IO::HandleやGLOBからTAPをストリームする。</target>
        </trans-unit>
        <trans-unit id="aa321b146ad904dc93d6b1334004656dc82f28d4" translate="yes" xml:space="preserve">
          <source>Stream format with carriage-return terminator.</source>
          <target state="translated">キャリッジリターンターミネータを持つストリーム形式。</target>
        </trans-unit>
        <trans-unit id="cf344468bbe5af0df1f27ec4b813e688b7db58d7" translate="yes" xml:space="preserve">
          <source>Stream format with line-feed terminator.</source>
          <target state="translated">ラインフィードターミネータを持つストリーム形式。</target>
        </trans-unit>
        <trans-unit id="044591cd59e9b7c9396655ff7bb64423112f9b95" translate="yes" xml:space="preserve">
          <source>Stream output from an executable TAP source</source>
          <target state="translated">実行可能な TAP ソースからのストリーム出力</target>
        </trans-unit>
        <trans-unit id="137d2933966619b13837102be962efe1a1067d69" translate="yes" xml:space="preserve">
          <source>Stream output from raw TAP in a scalar/array ref.</source>
          <target state="translated">生のTAPからのストリーム出力をスカラ/配列で出力します。</target>
        </trans-unit>
        <trans-unit id="1e8325521df6e6903ede77955f9bf1a333363aed" translate="yes" xml:space="preserve">
          <source>Streaming</source>
          <target state="translated">Streaming</target>
        </trans-unit>
        <trans-unit id="79d9a52c246461dc0594d29507cd94db89e5088f" translate="yes" xml:space="preserve">
          <source>Stricter rules help to find typos and other errors. Perhaps you didn't even intend a range here, if the &lt;code&gt;&quot;-&quot;&lt;/code&gt; was meant to be some other character, or should have been escaped (like &lt;code&gt;&quot;\-&quot;&lt;/code&gt; ). If you did intend a range, the one that was used is not portable between ASCII and EBCDIC platforms, and doesn't have an obvious meaning to a casual reader.</source>
          <target state="translated">より厳密なルールは、タイプミスやその他のエラーを見つけるのに役立ちます。 &lt;code&gt;&quot;-&quot;&lt;/code&gt; が他の文字であることを意図しているか、エスケープされているはずの場合（ &lt;code&gt;&quot;\-&quot;&lt;/code&gt; のように）、ここで範囲を意図していなかったのかもしれません。範囲を意図していた場合、使用された範囲はASCIIプラットフォームとEBCDICプラットフォーム間で移植できず、カジュアルな読者には明らかな意味がありません。</target>
        </trans-unit>
        <trans-unit id="5396990d692459cc4babef519081fd255b847e8f" translate="yes" xml:space="preserve">
          <source>Stricter rules help to find typos and other errors. Perhaps you didn't even intend a range here, if the &lt;code&gt;&quot;-&quot;&lt;/code&gt; was meant to be some other character, or should have been escaped (like &lt;code&gt;&quot;\-&quot;&lt;/code&gt;). If you did intend a range, the one that was used is not portable between ASCII and EBCDIC platforms, and doesn't have an obvious meaning to a casual reader.</source>
          <target state="translated">より厳格なルールは、タイプミスやその他のエラーを見つけるのに役立ちます。 &lt;code&gt;&quot;-&quot;&lt;/code&gt; が他の文字を意味する場合、またはエスケープする必要がある場合（ &lt;code&gt;&quot;\-&quot;&lt;/code&gt; ）、ここで範囲を意図していなかった可能性があります。範囲を意図した場合、使用されたものはASCIIプラットフォームとEBCDICプラットフォーム間で移植可能ではなく、カジュアルな読者にとって明白な意味はありません。</target>
        </trans-unit>
        <trans-unit id="5eda0deef3d3835356e2633ac9dde47a16b13b5d" translate="yes" xml:space="preserve">
          <source>Stricter rules help to find typos and other errors. You included a range, and at least one of the end points is a decimal digit. Under the stricter rules, when this happens, both end points should be digits in the same group of 10 consecutive digits.</source>
          <target state="translated">ルールを厳しくすることで、誤字脱字などを見つけやすくなります。範囲を含んでいて、終点の少なくとも1つが10進数の桁になっているとします。より厳格な規則では、このような場合、両方の終点は10桁の連続した同じグループ内の数字でなければなりません。</target>
        </trans-unit>
        <trans-unit id="8871c27b11e121bdab37c41ce307e123e5948970" translate="yes" xml:space="preserve">
          <source>Strictly speaking, MIME header encoding documented in RFC 2047 is more of encapsulation than encoding. However, their support in modern world is imperative so they are supported.</source>
          <target state="translated">厳密に言えば、RFC 2047 で文書化されている MIME ヘッダのエンコーディングは、エンコーディングというよりもカプセル化である。しかし、現代の世界ではそれらのサポートは必須であるため、サポートされています。</target>
        </trans-unit>
        <trans-unit id="0650e0c020aef4abbfbd4bda604f404ed598e991" translate="yes" xml:space="preserve">
          <source>Strictly speaking, a program that munches up another program and spits out yet another file containing the program in a &amp;ldquo;more executable&amp;rdquo; form, typically containing native machine instructions. The</source>
          <target state="translated">厳密に言えば、別のプログラムをむちゃくちゃにして、通常はネイティブのマシン命令を含む「より実行可能な」形式のプログラムを含むさらに別のファイルを吐き出すプログラム。の</target>
        </trans-unit>
        <trans-unit id="19287d999efabb7aed57bbe8e78bb9475aab4690" translate="yes" xml:space="preserve">
          <source>Strictly speaking, a program that reads a second program and does what the second program says directly without turning the program into a different form first, which is what &lt;b&gt;compilers&lt;/b&gt; do. Perl is not an interpreter by this definition, because it contains a kind of compiler that takes a program and turns it into a more executable form (&lt;b&gt;syntax trees&lt;/b&gt;) within the</source>
          <target state="translated">厳密に言えば、2番目のプログラムを読み取り、最初にプログラムを別の形式に変換せずに2番目のプログラムが直接言うことを実行するプログラム、つまり&lt;b&gt;コンパイラーが&lt;/b&gt;行うプログラム。Perlは、この定義ではインタープリターではありません。Perlには、プログラムを取得して、プログラムをより実行可能な形式（&lt;b&gt;構文ツリー&lt;/b&gt;）に変換するコンパイラーが含まれているためです。</target>
        </trans-unit>
        <trans-unit id="a6fde2b9f7e959d871c8af08462a6492339f7057" translate="yes" xml:space="preserve">
          <source>Strictly speaking, nothing. Stylistically speaking, it's not a good way to write maintainable code. Perl has several operators for running external commands. Backticks are one; they collect the output from the command for use in your program. The &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; function is another; it doesn't do this.</source>
          <target state="translated">厳密に言えば、何も。文体的に言えば、それは保守可能なコードを書くための良い方法ではありません。Perlには、外部コマンドを実行するためのいくつかの演算子があります。バックティックは1つです。プログラムで使用するために、コマンドからの出力を収集します。 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;&lt;/code&gt; 機能は、別です。これは行いません。</target>
        </trans-unit>
        <trans-unit id="3c8ebada708fb113d97be17e44dc95013a97d6cf" translate="yes" xml:space="preserve">
          <source>Strictly speaking, nothing. Stylistically speaking, it's not a good way to write maintainable code. Perl has several operators for running external commands. Backticks are one; they collect the output from the command for use in your program. The &lt;code&gt;system&lt;/code&gt; function is another; it doesn't do this.</source>
          <target state="translated">厳密に言えば、何もありません。様式的に言えば、保守可能なコードを書くのは良い方法ではありません。Perlには、外部コマンドを実行するためのいくつかの演算子があります。バックティックは1つです。これらは、プログラムで使用するためにコマンドからの出力を収集します。 &lt;code&gt;system&lt;/code&gt; 機能は、別です。それはこれをしません。</target>
        </trans-unit>
        <trans-unit id="95ea50d3a212d751dc75823785ce8d3fc481176b" translate="yes" xml:space="preserve">
          <source>Strictly speaking, the year should be specified in a form consistent with &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt;, i.e. the offset from 1900. In order to make the interpretation of the year easier for humans, however, who are more accustomed to seeing years as two-digit or four-digit values, the following conventions are followed:</source>
          <target state="translated">厳密に言えば、年は &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; と一致する形式、つまり1900からのオフセットで指定する必要があります。ただし、年を2桁または4桁の値の場合、次の規則に従います。</target>
        </trans-unit>
        <trans-unit id="23a6b2fb53b29ab8753d41951749465184e362aa" translate="yes" xml:space="preserve">
          <source>Strictly speaking, the year should be specified in a form consistent with &lt;code&gt;localtime()&lt;/code&gt;, i.e. the offset from 1900. In order to make the interpretation of the year easier for humans, however, who are more accustomed to seeing years as two-digit or four-digit values, the following conventions are followed:</source>
          <target state="translated">厳密に言えば、年は &lt;code&gt;localtime()&lt;/code&gt; と一致する形式、つまり1900からのオフセットで指定する必要があります。ただし、年を2桁または4桁の値の場合、次の規則に従います。</target>
        </trans-unit>
        <trans-unit id="5c4b8f90e8599772141d5d74184d3678eb652f81" translate="yes" xml:space="preserve">
          <source>Strictly, the shell&amp;rsquo;s &lt;code&gt;*&lt;/code&gt; character, which will match a &amp;ldquo;glob&amp;rdquo; of characters when you&amp;rsquo;re trying to generate a list of filenames. Loosely, the act of using globs and similar symbols to do pattern matching. See also &lt;b&gt;fileglob&lt;/b&gt; and &lt;b&gt;typeglob&lt;/b&gt;.</source>
          <target state="translated">厳密には、シェルの &lt;code&gt;*&lt;/code&gt; 文字。ファイル名のリストを生成しようとするときに文字の「グロブ」と一致します。大まかに言って、グロブや類似のシンボルを使用してパターンマッチングを行う行為。参照してください&lt;b&gt;fileglob&lt;/b&gt;や&lt;b&gt;型グロブを&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="158127f06e6da3362607fa7cbbba756efc7019b1" translate="yes" xml:space="preserve">
          <source>Strictness and warnings</source>
          <target state="translated">厳格さと警告</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="516c0f4e3c92a494342e3cb25a961d2360643bc2" translate="yes" xml:space="preserve">
          <source>String &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;LC_NUMERIC&lt;/code&gt;</source>
          <target state="translated">文字列 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;LC_NUMERIC&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="13d19fb185a642a2881088ab8e929269f84edb68" translate="yes" xml:space="preserve">
          <source>String &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;LC_NUMERIC&lt;/code&gt;</source>
          <target state="translated">文字列 &lt;code&gt;eval&lt;/code&gt; と &lt;code&gt;LC_NUMERIC&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="322644ec18f089375fd934ccac0ee29b7bf9401a" translate="yes" xml:space="preserve">
          <source>String Collation</source>
          <target state="translated">文字列の照合</target>
        </trans-unit>
        <trans-unit id="40837ec372cc75f0a51393ed930c1fe017719b97" translate="yes" xml:space="preserve">
          <source>String Equivalence</source>
          <target state="translated">文字列の等価性</target>
        </trans-unit>
        <trans-unit id="c0852fa4a49f9a7f054796351af22423733e0ae5" translate="yes" xml:space="preserve">
          <source>String Lengths</source>
          <target state="translated">文字列の長さ</target>
        </trans-unit>
        <trans-unit id="b231adac90ed5af6e5723df56d210bfd345958ac" translate="yes" xml:space="preserve">
          <source>String Processing, Language Text Processing, Parsing, and Searching</source>
          <target state="translated">文字列処理、言語テキスト処理、構文解析、検索</target>
        </trans-unit>
        <trans-unit id="a76a0b86b2d8c7c2af26080ae08b76bef9730da0" translate="yes" xml:space="preserve">
          <source>String comparison</source>
          <target state="translated">文字列の比較</target>
        </trans-unit>
        <trans-unit id="f618ca662dfcc3b16eb26b3a99e8a37d3fd5c229" translate="yes" xml:space="preserve">
          <source>String constants that would normally evaluate to 0 or 1 are warned about.</source>
          <target state="translated">通常は0または1に評価されるはずの文字列定数が警告されます。</target>
        </trans-unit>
        <trans-unit id="6104084e70872a799af75c0c3b3e9c680e29b421" translate="yes" xml:space="preserve">
          <source>String conversion</source>
          <target state="translated">文字列変換</target>
        </trans-unit>
        <trans-unit id="8dc84df0bc8f7e36bf6046d5ceb68a3cfd06dca6" translate="yes" xml:space="preserve">
          <source>String conversion methods</source>
          <target state="translated">文字列の変換方法</target>
        </trans-unit>
        <trans-unit id="d5ce711ae430e00ec658d92f901bfb5ff64ae114" translate="yes" xml:space="preserve">
          <source>String eval</source>
          <target state="translated">文字列 eval</target>
        </trans-unit>
        <trans-unit id="597fe8909ca1928228ff982d52d105d13e058f8b" translate="yes" xml:space="preserve">
          <source>String eval and LC_NUMERIC</source>
          <target state="translated">文字列 eval と LC_NUMERIC</target>
        </trans-unit>
        <trans-unit id="4941134ab361827bee0789e57907295ac43600ee" translate="yes" xml:space="preserve">
          <source>String for the package. If the package does not have a &lt;code&gt;$VERSION&lt;/code&gt;, this field must be omitted.</source>
          <target state="translated">パッケージの文字列。パッケージに &lt;code&gt;$VERSION&lt;/code&gt; がない場合は、このフィールドを省略する必要があります。</target>
        </trans-unit>
        <trans-unit id="860dceea01893fc71bff8d83982d93e598606a4e" translate="yes" xml:space="preserve">
          <source>String handling functions, for the most part, continue to operate in terms of characters. &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length()&lt;/a&gt;&lt;/code&gt;, for example, returns the number of characters in a string, just as before. But that number no longer is necessarily the same as the number of bytes in the string (there may be more bytes than characters). The other such functions include &lt;code&gt;&lt;a href=&quot;functions/chop&quot;&gt;chop()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/index&quot;&gt;index()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/rindex&quot;&gt;rindex()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字列処理関数は、ほとんどの場合、文字に関して機能し続けます。たとえば、 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length()&lt;/a&gt;&lt;/code&gt; は、以前と同様に、文字列の文字数を返します。ただし、その数は文字列のバイト数と同じである必要はありません（文字よりも多くのバイトがある場合があります）。他のそのような関数には、 &lt;code&gt;&lt;a href=&quot;functions/chop&quot;&gt;chop()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/chomp&quot;&gt;chomp()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/pos&quot;&gt;pos()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/index&quot;&gt;index()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/rindex&quot;&gt;rindex()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf()&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="401ccffa7eab02269ca231a09dc9fc080d0ef44e" translate="yes" xml:space="preserve">
          <source>String handling functions, for the most part, continue to operate in terms of characters. &lt;code&gt;length()&lt;/code&gt;, for example, returns the number of characters in a string, just as before. But that number no longer is necessarily the same as the number of bytes in the string (there may be more bytes than characters). The other such functions include &lt;code&gt;chop()&lt;/code&gt;, &lt;code&gt;chomp()&lt;/code&gt;, &lt;code&gt;substr()&lt;/code&gt;, &lt;code&gt;pos()&lt;/code&gt;, &lt;code&gt;index()&lt;/code&gt;, &lt;code&gt;rindex()&lt;/code&gt;, &lt;code&gt;sort()&lt;/code&gt;, &lt;code&gt;sprintf()&lt;/code&gt;, and &lt;code&gt;write()&lt;/code&gt;.</source>
          <target state="translated">文字列処理関数は、ほとんどの場合、文字の観点から動作し続けます。たとえば、 &lt;code&gt;length()&lt;/code&gt; は、以前と同じように、文字列内の文字数を返します。ただし、その数は必ずしも文字列のバイト数と同じではありません（文字よりもバイト数が多い場合があります）。他のそのような関数には、 &lt;code&gt;chop()&lt;/code&gt; 、 &lt;code&gt;chomp()&lt;/code&gt; 、 &lt;code&gt;substr()&lt;/code&gt; 、 &lt;code&gt;pos()&lt;/code&gt; 、 &lt;code&gt;index()&lt;/code&gt; 、 &lt;code&gt;rindex()&lt;/code&gt; 、 &lt;code&gt;sort()&lt;/code&gt; 、 &lt;code&gt;sprintf()&lt;/code&gt; 、および &lt;code&gt;write()&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="93394b81d59344078a9850ad4f758f0f59ea42a4" translate="yes" xml:space="preserve">
          <source>String holding augmented version of second argument.</source>
          <target state="translated">第2引数の拡張版を保持する文字列。</target>
        </trans-unit>
        <trans-unit id="c329814ec2d3d4971e2511c74b3273f40003742e" translate="yes" xml:space="preserve">
          <source>String interpolation with case-mapping, as in, say, &lt;code&gt;$dest =
&quot;C:\U$name.$ext&quot;&lt;/code&gt; , may produce dangerous results if a bogus &lt;code&gt;LC_CTYPE&lt;/code&gt; case-mapping table is in effect.</source>
          <target state="translated">&lt;code&gt;$dest = &quot;C:\U$name.$ext&quot;&lt;/code&gt; ように、大文字小文字をマッピングした文字列補間は、偽の &lt;code&gt;LC_CTYPE&lt;/code&gt; 大文字小文字マッピングテーブルが有効な場合に危険な結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="cd79a2810365d4fde650c3f3ecb48c64b7bd3d40" translate="yes" xml:space="preserve">
          <source>String interpolation with case-mapping, as in, say, &lt;code&gt;$dest = &quot;C:\U$name.$ext&quot;&lt;/code&gt;, may produce dangerous results if a bogus &lt;code&gt;LC_CTYPE&lt;/code&gt; case-mapping table is in effect.</source>
          <target state="translated">たとえば、 &lt;code&gt;$dest = &quot;C:\U$name.$ext&quot;&lt;/code&gt; ように、ケースマッピングを使用した文字列補間では、偽の &lt;code&gt;LC_CTYPE&lt;/code&gt; ケースマッピングテーブルが有効な場合、危険な結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d6780b9a46b265648d17e144b69c48ee74770992" translate="yes" xml:space="preserve">
          <source>String literals are usually delimited by either single or double quotes. They work much like quotes in the standard Unix shells: double-quoted string literals are subject to backslash and variable substitution; single-quoted strings are not (except for &lt;code&gt;\'&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt; ). The usual C-style backslash rules apply for making characters such as newline, tab, etc., as well as some more exotic forms. See &lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt;Quote and Quote-like Operators in perlop&lt;/a&gt; for a list.</source>
          <target state="translated">文字列リテラルは通常、一重引用符または二重引用符で区切られます。これらは、標準のUnixシェルの引用符のように機能します。二重引用符で囲まれた文字列リテラルは、バックスラッシュと変数置換の対象になります。一重引用符で囲まれた文字列は含まれません（ &lt;code&gt;\'&lt;/code&gt; および &lt;code&gt;\\&lt;/code&gt; を除く）。通常のCスタイルのバックスラッシュルールは、改行やタブなどの文字を作成する場合や、よりエキゾチックなフォームを作成する場合に適用されます。リストについては&lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt;、perlopのQuoteおよびQuote-like演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="13732576251fc8d08b8cf385b7308ea1c12b8efc" translate="yes" xml:space="preserve">
          <source>String literals are usually delimited by either single or double quotes. They work much like quotes in the standard Unix shells: double-quoted string literals are subject to backslash and variable substitution; single-quoted strings are not (except for &lt;code&gt;\'&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt;). The usual C-style backslash rules apply for making characters such as newline, tab, etc., as well as some more exotic forms. See &lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt;&quot;Quote and Quote-like Operators&quot; in perlop&lt;/a&gt; for a list.</source>
          <target state="translated">文字列リテラルは通常、一重引用符または二重引用符で区切られます。これらは、標準のUnixシェルの引用符とほとんど同じように機能します。二重引用符で囲まれた文字列リテラルは、円記号と変数置換の対象になります。一重引用符で囲まれた文字列はそうではありません（ &lt;code&gt;\'&lt;/code&gt; と &lt;code&gt;\\&lt;/code&gt; を除く）。通常のCスタイルのバックスラッシュ規則は、改行、タブなどの文字、およびいくつかのよりエキゾチックなフォームの作成に適用されます。参照&lt;a href=&quot;perlop#Quote-and-Quote-like-Operators&quot;&gt;はperlopの「引用と引用のような演算子」&lt;/a&gt;リストのため。</target>
        </trans-unit>
        <trans-unit id="8e0fe980f60efc7c1f918b95be4503588f28be99" translate="yes" xml:space="preserve">
          <source>String needing checking.</source>
          <target state="translated">チェックが必要な文字列。</target>
        </trans-unit>
        <trans-unit id="d3051b99c9691d2719f0563e333076fae287e689" translate="yes" xml:space="preserve">
          <source>String needing escaping.</source>
          <target state="translated">文字列をエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="b011a78c96a9c16cf6436848fa3f565de97986a2" translate="yes" xml:space="preserve">
          <source>String of options to pass to xsubpp. This might include &lt;code&gt;-C++&lt;/code&gt; or &lt;code&gt;-extern&lt;/code&gt; . Do not include typemaps here; the TYPEMAP parameter exists for that purpose.</source>
          <target state="translated">xsubppに渡すオプションの文字列。これには &lt;code&gt;-C++&lt;/code&gt; または &lt;code&gt;-extern&lt;/code&gt; が含まれる場合があります。ここにはタイプマップを含めないでください。TYPEMAPパラメータはそのために存在します。</target>
        </trans-unit>
        <trans-unit id="01cf92ed42a8c75a1838e0a5762b33f6a2b55111" translate="yes" xml:space="preserve">
          <source>String of options to pass to xsubpp. This might include &lt;code&gt;-C++&lt;/code&gt; or &lt;code&gt;-extern&lt;/code&gt;. Do not include typemaps here; the TYPEMAP parameter exists for that purpose.</source>
          <target state="translated">xsubppに渡すオプションの文字列。これには、 &lt;code&gt;-C++&lt;/code&gt; または &lt;code&gt;-extern&lt;/code&gt; が含まれる場合があります。ここにタイプマップを含めないでください。TYPEMAPパラメーターはその目的のために存在します。</target>
        </trans-unit>
        <trans-unit id="3fec62342425ec8f81ce629d9250491168e3f930" translate="yes" xml:space="preserve">
          <source>String overloaded objects are compared &lt;b&gt;as strings&lt;/b&gt; (or in &lt;code&gt;cmp_ok()&lt;/code&gt; 's case, strings or numbers as appropriate to the comparison op). This prevents Test::More from piercing an object's interface allowing better blackbox testing. So if a function starts returning overloaded objects instead of bare strings your tests won't notice the difference. This is good.</source>
          <target state="translated">文字列オーバーロードされたオブジェクトは&lt;b&gt;文字列として&lt;/b&gt;比較さ&lt;b&gt;れます&lt;/b&gt;（または &lt;code&gt;cmp_ok()&lt;/code&gt; の場合は、比較演算子に応じて文字列または数値）。これにより、Test :: Moreがオブジェクトのインターフェースを貫通することがなくなり、より良いブラックボックステストが可能になります。したがって、関数が裸の文字列ではなくオーバーロードされたオブジェクトを返し始めた場合、テストでは違いに気づきません。これはいい。</target>
        </trans-unit>
        <trans-unit id="fa1a43b0163b121a327b4a58480c5d680c5b9558" translate="yes" xml:space="preserve">
          <source>String overloaded objects are compared &lt;b&gt;as strings&lt;/b&gt; (or in &lt;code&gt;cmp_ok()&lt;/code&gt;'s case, strings or numbers as appropriate to the comparison op). This prevents Test::More from piercing an object's interface allowing better blackbox testing. So if a function starts returning overloaded objects instead of bare strings your tests won't notice the difference. This is good.</source>
          <target state="translated">文字列がオーバーロードされたオブジェクトは&lt;b&gt;、文字列として&lt;/b&gt;比較さ&lt;b&gt;れます&lt;/b&gt;（または、 &lt;code&gt;cmp_ok()&lt;/code&gt; の場合は、比較操作に応じて文字列または数値）。これにより、Test :: Moreがオブジェクトのインターフェイスを貫通するのを防ぎ、ブラックボックステストを改善できます。したがって、関数が裸の文字列ではなくオーバーロードされたオブジェクトを返し始めた場合、テストは違いに気づきません。これはいい。</target>
        </trans-unit>
        <trans-unit id="0f00ebea06538bbe227ded196b24216fa175546f" translate="yes" xml:space="preserve">
          <source>String that will be included in the compiler call command line between the arguments INC and OPTIMIZE.</source>
          <target state="translated">コンパイラコールのコマンドラインで、引数INCとOPTIMIZEの間に含まれる文字列。</target>
        </trans-unit>
        <trans-unit id="6e526f1a740ace9291b3849106bb71fe9922d6d7" translate="yes" xml:space="preserve">
          <source>String to (long) integer translation. Returns the parsed number and the number of characters in the unparsed portion of the string. Truly POSIX-compliant systems set &lt;code&gt;$!&lt;/code&gt; (&lt;code&gt;$ERRNO&lt;/code&gt; ) to indicate a translation error, so clear &lt;code&gt;$!&lt;/code&gt; before calling &lt;code&gt;strtol&lt;/code&gt; . However, non-POSIX systems may not check for overflow, and therefore will never set &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">文字列から（long）整数への変換。解析された数と文字列の解析されていない部分の文字数を返します。本当にPOSIX準拠のシステムが &lt;code&gt;$!&lt;/code&gt; （ &lt;code&gt;$ERRNO&lt;/code&gt; ）は翻訳エラーを示すため、 &lt;code&gt;$!&lt;/code&gt; クリアします！ &lt;code&gt;strtol&lt;/code&gt; を呼び出す前。ただし、非POSIXシステムはオーバーフローをチェックしない可能性があるため、 &lt;code&gt;$!&lt;/code&gt; 設定することはありません。。</target>
        </trans-unit>
        <trans-unit id="1e3afd2c721e94e17632288572aff18f68920d41" translate="yes" xml:space="preserve">
          <source>String to (long) integer translation. Returns the parsed number and the number of characters in the unparsed portion of the string. Truly POSIX-compliant systems set &lt;code&gt;$!&lt;/code&gt; (&lt;code&gt;$ERRNO&lt;/code&gt;) to indicate a translation error, so clear &lt;code&gt;$!&lt;/code&gt; before calling &lt;code&gt;strtol&lt;/code&gt;. However, non-POSIX systems may not check for overflow, and therefore will never set &lt;code&gt;$!&lt;/code&gt;.</source>
          <target state="translated">文字列から（長い）整数への変換。文字列の解析された数と解析されていない部分の文字数を返します。本当にPOSIX準拠のシステムは &lt;code&gt;$!&lt;/code&gt; 設定します！（ &lt;code&gt;$ERRNO&lt;/code&gt; ）は変換エラーを示しているので、 &lt;code&gt;$!&lt;/code&gt; クリアします！ &lt;code&gt;strtol&lt;/code&gt; を呼び出す前に。ただし、非POSIXシステムはオーバーフローをチェックしない可能性があるため、 &lt;code&gt;$!&lt;/code&gt; 設定することはありません。。</target>
        </trans-unit>
        <trans-unit id="f8ad43047bd965bdc4d07f5ce2456ad0a02b96c7" translate="yes" xml:space="preserve">
          <source>String to double translation. Returns the parsed number and the number of characters in the unparsed portion of the string. Truly POSIX-compliant systems set &lt;code&gt;$!&lt;/code&gt; (&lt;code&gt;$ERRNO&lt;/code&gt; ) to indicate a translation error, so clear &lt;code&gt;$!&lt;/code&gt; before calling &lt;code&gt;strtod&lt;/code&gt; . However, non-POSIX systems may not check for overflow, and therefore will never set &lt;code&gt;$!&lt;/code&gt; .</source>
          <target state="translated">二重翻訳する文字列。解析された数と文字列の解析されていない部分の文字数を返します。本当にPOSIX準拠のシステムが &lt;code&gt;$!&lt;/code&gt; （ &lt;code&gt;$ERRNO&lt;/code&gt; ）は翻訳エラーを示すため、 &lt;code&gt;$!&lt;/code&gt; クリアします！ &lt;code&gt;strtod&lt;/code&gt; を呼び出す前。ただし、非POSIXシステムはオーバーフローをチェックしない可能性があるため、 &lt;code&gt;$!&lt;/code&gt; 設定することはありません。。</target>
        </trans-unit>
        <trans-unit id="d8676f880462f433f166d907d612c3e8919af6de" translate="yes" xml:space="preserve">
          <source>String to double translation. Returns the parsed number and the number of characters in the unparsed portion of the string. Truly POSIX-compliant systems set &lt;code&gt;$!&lt;/code&gt; (&lt;code&gt;$ERRNO&lt;/code&gt;) to indicate a translation error, so clear &lt;code&gt;$!&lt;/code&gt; before calling &lt;code&gt;strtod&lt;/code&gt;. However, non-POSIX systems may not check for overflow, and therefore will never set &lt;code&gt;$!&lt;/code&gt;.</source>
          <target state="translated">文字列から二重翻訳へ。文字列の解析された数と解析されていない部分の文字数を返します。本当にPOSIX準拠のシステムは &lt;code&gt;$!&lt;/code&gt; 設定します！（ &lt;code&gt;$ERRNO&lt;/code&gt; ）は変換エラーを示しているので、 &lt;code&gt;$!&lt;/code&gt; クリアします！ &lt;code&gt;strtod&lt;/code&gt; を呼び出す前に。ただし、非POSIXシステムはオーバーフローをチェックしない可能性があるため、 &lt;code&gt;$!&lt;/code&gt; 設定することはありません。。</target>
        </trans-unit>
        <trans-unit id="45f0eaf01673564e0319c5f3bfbb5d8942bb1f18" translate="yes" xml:space="preserve">
          <source>String to prepend to the &lt;code&gt;file&lt;/code&gt; field of the resulting output. This defaults to</source>
          <target state="translated">結果の出力の &lt;code&gt;file&lt;/code&gt; フィールドの前に付ける文字列。これはデフォルトで</target>
        </trans-unit>
        <trans-unit id="d6e6cc14bde5be0fa13f9402d856fc2a265b21a7" translate="yes" xml:space="preserve">
          <source>String to unsigned (long) integer translation. &lt;code&gt;strtoul()&lt;/code&gt; is identical to &lt;code&gt;strtol()&lt;/code&gt; except that &lt;code&gt;strtoul()&lt;/code&gt; only parses unsigned integers. See &lt;a href=&quot;#strtol&quot;&gt;&quot;strtol&quot;&lt;/a&gt; for details.</source>
          <target state="translated">文字列から符号なし（長い）整数への変換。 &lt;code&gt;strtoul()&lt;/code&gt; と同じです &lt;code&gt;strtol()&lt;/code&gt; それを除く &lt;code&gt;strtoul()&lt;/code&gt; のみ符号なし整数を解析します。詳細については、&lt;a href=&quot;#strtol&quot;&gt;「strtol」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2abcfc7dcb04cc4aa0bcda4543317ca564702847" translate="yes" xml:space="preserve">
          <source>String to unsigned (long) integer translation. &lt;code&gt;strtoul()&lt;/code&gt; is identical to &lt;code&gt;strtol()&lt;/code&gt; except that &lt;code&gt;strtoul()&lt;/code&gt; only parses unsigned integers. See &lt;a href=&quot;#strtol&quot;&gt;strtol&lt;/a&gt; for details.</source>
          <target state="translated">文字列から符号なし（長整数）への変換。 &lt;code&gt;strtoul()&lt;/code&gt; と同じです &lt;code&gt;strtol()&lt;/code&gt; それを除く &lt;code&gt;strtoul()&lt;/code&gt; のみ符号なし整数を解析します。詳細については、&lt;a href=&quot;#strtol&quot;&gt;strtol&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ad6f48bf54709b2ba69a1fce32b7638601bfac7" translate="yes" xml:space="preserve">
          <source>String transformation. Returns the transformed string.</source>
          <target state="translated">文字列変換。変換された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3093f7beb97882dcb9a98d3b5be7d4560e5f5ef4" translate="yes" xml:space="preserve">
          <source>String, numeric, boolean, and regexp conversions</source>
          <target state="translated">文字列、数値、ブール値、正規表現の変換</target>
        </trans-unit>
        <trans-unit id="095d3b7d7b51ca9267c55a71d96ee740ce9ed714" translate="yes" xml:space="preserve">
          <source>String-To-Number Conversions</source>
          <target state="translated">文字列と数字の変換</target>
        </trans-unit>
        <trans-unit id="5942152bba6334b38f5af4b68fa787f8c4338bf1" translate="yes" xml:space="preserve">
          <source>String.</source>
          <target state="translated">String.</target>
        </trans-unit>
        <trans-unit id="89f0c9a299c3800ad98959c29c190d1bc9de23ac" translate="yes" xml:space="preserve">
          <source>String. An arbitrary sequence of characters. It is valid for the argument to start with &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; .</source>
          <target state="translated">ストリング。文字の任意のシーケンス。引数が &lt;code&gt;-&lt;/code&gt; または &lt;code&gt;--&lt;/code&gt; 始まることは有効です。</target>
        </trans-unit>
        <trans-unit id="81f30cf5068f2f28c67e584c10005d36bbd46507" translate="yes" xml:space="preserve">
          <source>String. An arbitrary sequence of characters. It is valid for the argument to start with &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">ストリング。文字の任意のシーケンス。引数が &lt;code&gt;-&lt;/code&gt; または &lt;code&gt;--&lt;/code&gt; 始まることは有効です。</target>
        </trans-unit>
        <trans-unit id="b6805d3a9d242376321929e78e5ba39e0634fbb9" translate="yes" xml:space="preserve">
          <source>Stringification</source>
          <target state="translated">Stringification</target>
        </trans-unit>
        <trans-unit id="fafc0f2cb3777e3c850edce9bbb0624fb76d8e93" translate="yes" xml:space="preserve">
          <source>Stringification also destroys arrays.</source>
          <target state="translated">文字列化は配列も破壊します。</target>
        </trans-unit>
        <trans-unit id="a96e53fa801a030d61d0b0afb131453e4a3a7511" translate="yes" xml:space="preserve">
          <source>Stringified perl data structures, suitable for both printing and &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">文字列化されたperlデータ構造、印刷と &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 両方に適しています</target>
        </trans-unit>
        <trans-unit id="22b2c8519d7e0bf7d3dd8b66c9c7ae4d2bf2a17f" translate="yes" xml:space="preserve">
          <source>Stringified perl data structures, suitable for both printing and &lt;code&gt;eval&lt;/code&gt;</source>
          <target state="translated">印刷と &lt;code&gt;eval&lt;/code&gt; 両方に適した文字列化されたperlデータ構造</target>
        </trans-unit>
        <trans-unit id="6bad8926562843b707945e86b277e1f637dc69d2" translate="yes" xml:space="preserve">
          <source>Stringify dumps the data inside the object.</source>
          <target state="translated">Stringifyは、オブジェクト内部のデータをダンプします。</target>
        </trans-unit>
        <trans-unit id="242a6a36753d3e416e5262c8b767349bc289b912" translate="yes" xml:space="preserve">
          <source>Strings created with &lt;a href=&quot;#vec-EXPR%2COFFSET%2CBITS&quot;&gt;&lt;code&gt;vec&lt;/code&gt;&lt;/a&gt; can also be manipulated with the logical operators &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt;. These operators will assume a bit vector operation is desired when both operands are strings. See &lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;&quot;Bitwise String Operators&quot; in perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#vec-EXPR%2COFFSET%2CBITS&quot;&gt; &lt;code&gt;vec&lt;/code&gt; で&lt;/a&gt;作成された文字列は、論理演算子 &lt;code&gt;|&lt;/code&gt; で操作することもできます。、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;^&lt;/code&gt; 、および &lt;code&gt;~&lt;/code&gt; 。これらの演算子は、両方のオペランドが文字列の場合にビットベクトル演算が必要であると想定します。&lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;perlopの「ビット単位の文字列演算子」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c5cca40b8e6ab951533c16fbbdd8e8eeb9f0e6f8" translate="yes" xml:space="preserve">
          <source>Strings created with &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; can also be manipulated with the logical operators &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;^&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; . These operators will assume a bit vector operation is desired when both operands are strings. See &lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;Bitwise String Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; で作成された文字列は、論理演算子で操作することもできます &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;^&lt;/code&gt; 、および &lt;code&gt;~&lt;/code&gt; 。これらの演算子は、両方のオペランドが文字列の場合にビットベクトル演算が必要であると想定します。&lt;a href=&quot;perlop#Bitwise-String-Operators&quot;&gt;perlopのビット単位の文字列演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc0a2fc8d4082ea8e735316dde8d1811abffaf90" translate="yes" xml:space="preserve">
          <source>Strings created with &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; can also be manipulated with the logical operators &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;^&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt; . These operators will assume a bit vector operation is desired when both operands are strings. See &lt;a href=&quot;../perlop#Bitwise-String-Operators&quot;&gt;Bitwise String Operators in perlop&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; で作成された文字列は、論理演算子で操作することもできます &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;^&lt;/code&gt; 、および &lt;code&gt;~&lt;/code&gt; 。これらの演算子は、両方のオペランドが文字列の場合にビットベクトル演算が必要であると想定します。&lt;a href=&quot;../perlop#Bitwise-String-Operators&quot;&gt;perlopのビット単位の文字列演算子を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f7e8a6f87a8a42268a64c6a11af8887059d5680" translate="yes" xml:space="preserve">
          <source>Strings of multiple sub- and superscripts are not recognized as numbers. You can use either of the compatibility decompositions in Unicode::Normalize to change these into digits, and then call &lt;code&gt;num&lt;/code&gt; on the result.</source>
          <target state="translated">複数の下付き文字および上付き文字の文字列は、数値として認識されません。Unicode :: Normalizeの互換性分解のいずれかを使用してこれらを数字に変更し、結果に対して &lt;code&gt;num&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fe482813a109ae5d2d22da9c6e84cc6ce253ee7f" translate="yes" xml:space="preserve">
          <source>Strings with code points over 0xFF may not be mapped into in-memory file handles</source>
          <target state="translated">0xFF を超えるコードポイントを持つ文字列は、インメモリファイルハンドルにマップされない場合があります。</target>
        </trans-unit>
        <trans-unit id="7aaa3eb6eac6d4efb6574a9ba9018939acd1f8cf" translate="yes" xml:space="preserve">
          <source>Strings--including hash keys--and regular expression patterns may contain characters that have ordinal values larger than 255.</source>
          <target state="translated">ハッシュキーを含む文字列や正規表現パターンには、255よりも大きい序数値を持つ文字が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="d6348b5c86af8ba2c83c3a187e28bfcf9f1d038b" translate="yes" xml:space="preserve">
          <source>Stripping Perl Binaries on Cygwin</source>
          <target state="translated">CygwinでのPerlバイナリのストリップ</target>
        </trans-unit>
        <trans-unit id="f9141f854e0e233503d419a0cf18d9153715c039" translate="yes" xml:space="preserve">
          <source>Strongly object-oriented and fully-featured with a long development history and a large community and addon ecosystem. It is excellent for large and complex applications, where you have full control over the server.</source>
          <target state="translated">オブジェクト指向に強く、長い開発歴と大規模なコミュニティとアドオンエコシステムを備えた完全な機能を備えています。サーバーを完全に制御できる大規模で複雑なアプリケーションに優れています。</target>
        </trans-unit>
        <trans-unit id="0a7ad50fa5faede1ac1a8e9d617b83a136f3b36c" translate="yes" xml:space="preserve">
          <source>Strongly object-oriented and minimal, built for speed and intended as a toolkit for building micro web apps, custom frameworks or for tieing together existing Plack-compatible web applications with one central dispatcher.</source>
          <target state="translated">オブジェクト指向性が強く、最小限に抑えられており、高速化のために構築されており、マイクロウェブアプリケーションやカスタムフレームワークを構築するためのツールキットとして、また、既存のPlack互換ウェブアプリケーションを1つの中央ディスパッチャで連携させることを目的としています。</target>
        </trans-unit>
        <trans-unit id="92faa1dc48e3fe73a6fc4858913998fc576077e6" translate="yes" xml:space="preserve">
          <source>Strtod</source>
          <target state="translated">Strtod</target>
        </trans-unit>
        <trans-unit id="2bb3001dd42d6db227fc38ef7fd440ba6f9787f9" translate="yes" xml:space="preserve">
          <source>Strtol</source>
          <target state="translated">Strtol</target>
        </trans-unit>
        <trans-unit id="aaac07ac9b1f9026b0065ac193b055defc924b2e" translate="yes" xml:space="preserve">
          <source>Strtoul</source>
          <target state="translated">Strtoul</target>
        </trans-unit>
        <trans-unit id="4e5f4595501ae7d455e886e191bc02eb4a97eb9d" translate="yes" xml:space="preserve">
          <source>StructCopy</source>
          <target state="translated">StructCopy</target>
        </trans-unit>
        <trans-unit id="f23a884e110f1886cdc16e896ca93598233740f9" translate="yes" xml:space="preserve">
          <source>Structs are required to be aligned to the maximum alignment required by the fields - which for native types is for usually equivalent to sizeof() of the field</source>
          <target state="translated">構造体は、フィールドによって要求される最大のアラインメントに合わせてアラインメントされる必要があります-ネイティブ型の場合は、通常はフィールドの sizeof()と同等です。</target>
        </trans-unit>
        <trans-unit id="eb761c94903285d6515bd20e9cd52538249ae83b" translate="yes" xml:space="preserve">
          <source>Structure of a Regexp Program</source>
          <target state="translated">正規表現プログラムの構造</target>
        </trans-unit>
        <trans-unit id="a5c0ab1b864f9236f0a013c0c90f92ca429edfd8" translate="yes" xml:space="preserve">
          <source>Structure your modules so they are all located under</source>
          <target state="translated">モジュールを構成して、すべてのモジュールが</target>
        </trans-unit>
        <trans-unit id="cd40698b4bb94e939846994c9f9741e198f30bc1" translate="yes" xml:space="preserve">
          <source>Structured data retrieval of perl -V output</source>
          <target state="translated">perl -V出力の構造化データ検索</target>
        </trans-unit>
        <trans-unit id="3e4953dd11e72439867b2ad528b4c6dad15a7661" translate="yes" xml:space="preserve">
          <source>Stub found while resolving method &quot;%s&quot; overloading &quot;%s&quot; in package &quot;%s&quot;</source>
          <target state="translated">パッケージ &quot;%s&quot; でメソッド &quot;%s&quot; のオーバーロード &quot;%s&quot; を解決したときにスタブが見つかりました。</target>
        </trans-unit>
        <trans-unit id="b8ce54f7f99cf2cca6626a2de77f397b8065d514" translate="yes" xml:space="preserve">
          <source>Stub that provides thread hook for perl_destruct when there are no threads.</source>
          <target state="translated">スレッドがないときに perl_destruct のスレッドフックを提供するスタブ。</target>
        </trans-unit>
        <trans-unit id="d8d7cb9c0bd0e5d2e8d74ffc3881bd4b4fc1400b" translate="yes" xml:space="preserve">
          <source>Stubs for Deleted Documents</source>
          <target state="translated">削除した書類の半券</target>
        </trans-unit>
        <trans-unit id="4d7dabe926bb346f9396e40dca4282529b230cab" translate="yes" xml:space="preserve">
          <source>Stuff here is really low-priority to optimize, since it is far better to implement the operation in the low-level math library directly, possible even using a call to the native lib.</source>
          <target state="translated">ここにあるものは本当に最適化の優先度が低く、低レベルの数学ライブラリに直接操作を実装する方がはるかに良いので、ネイティブのlibへの呼び出しを使用しても可能です。</target>
        </trans-unit>
        <trans-unit id="2869e1f287c823d9d113fb739c0f867918c01e7c" translate="yes" xml:space="preserve">
          <source>Stuffit Expander</source>
          <target state="translated">スタッフィット・エキスパンダー</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="454122721f6b63e2ec36cf3779d6bbadd2e22140" translate="yes" xml:space="preserve">
          <source>Sub::Util</source>
          <target state="translated">Sub::Util</target>
        </trans-unit>
        <trans-unit id="200e883b1bf91bd7e7b1892b6781abbb8731b040" translate="yes" xml:space="preserve">
          <source>Sub::Util - A selection of utility subroutines for subs and CODE references</source>
          <target state="translated">Sub::Util-サブおよび CODE リファレンスのためのユーティリティーサブルーチンのセレクション。</target>
        </trans-unit>
        <trans-unit id="6f4fae33d407351a21e057015a8cfce97b1d1d2a" translate="yes" xml:space="preserve">
          <source>Subclass</source>
          <target state="translated">Subclass</target>
        </trans-unit>
        <trans-unit id="1a337fcb31e5829e1a600e170299e1eed7692c3f" translate="yes" xml:space="preserve">
          <source>Subclass &lt;a href=&quot;TAP::Parser::Grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt; and customize your parser by setting the &lt;code&gt;grammar_class&lt;/code&gt; parameter. See &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser::Grammar&quot;&gt;TAP :: Parser :: Grammar&lt;/a&gt;をサブクラス化し、 &lt;code&gt;grammar_class&lt;/code&gt; パラメーターを設定してパーサーをカスタマイズします。詳細については、&lt;a href=&quot;#new&quot;&gt;「新規」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="00e337d12e7f0f9db812cc8b4bb46be2d64cb670" translate="yes" xml:space="preserve">
          <source>Subclass &lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP::Parser::Result&lt;/a&gt; and register your new result type/class with the default &lt;a href=&quot;TAP::Parser::ResultFactory&quot;&gt;TAP::Parser::ResultFactory&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;をサブクラス化し、新しい結果タイプ/クラスをデフォルトの&lt;a href=&quot;TAP::Parser::ResultFactory&quot;&gt;TAP :: Parser :: ResultFactoryに&lt;/a&gt;登録します。</target>
        </trans-unit>
        <trans-unit id="a598fbe728e9996509df163e945962ae7a4ffed0" translate="yes" xml:space="preserve">
          <source>Subclass &lt;a href=&quot;TAP::Parser::ResultFactory&quot;&gt;TAP::Parser::ResultFactory&lt;/a&gt; itself and implement your own &lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP::Parser::Result&lt;/a&gt; creation logic. Then you'll need to customize the class used by your parser by setting the &lt;code&gt;result_factory_class&lt;/code&gt; parameter. See &lt;a href=&quot;#new&quot;&gt;&quot;new&quot;&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;TAP::Parser::ResultFactory&quot;&gt;TAP :: Parser :: ResultFactory&lt;/a&gt;自体をサブクラス化し、独自の&lt;a href=&quot;TAP::Parser::Result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;作成ロジックを実装します。次に、 &lt;code&gt;result_factory_class&lt;/code&gt; パラメーターを設定して、パーサーが使用するクラスをカスタマイズする必要があります。詳細については、&lt;a href=&quot;#new&quot;&gt;「新規」&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="873c1d3b114c3c8ca9fa8263d71c270acec87256" translate="yes" xml:space="preserve">
          <source>Subclass &lt;a href=&quot;parser/grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt; and customize your parser by setting the &lt;code&gt;grammar_class&lt;/code&gt; parameter. See &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;parser/grammar&quot;&gt;TAP :: Parser :: Grammar&lt;/a&gt;をサブクラス化し、 &lt;code&gt;grammar_class&lt;/code&gt; パラメーターを設定してパーサーをカスタマイズします。詳細については、&lt;a href=&quot;#new&quot;&gt;新規&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a88a43bb409ce5ce1ef29fd247b1a667d1a95af9" translate="yes" xml:space="preserve">
          <source>Subclass &lt;a href=&quot;parser/result&quot;&gt;TAP::Parser::Result&lt;/a&gt; and register your new result type/class with the default &lt;a href=&quot;parser/resultfactory&quot;&gt;TAP::Parser::ResultFactory&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;parser/result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;をサブクラス化し、新しい結果タイプ/クラスをデフォルトの&lt;a href=&quot;parser/resultfactory&quot;&gt;TAP :: Parser :: ResultFactoryに&lt;/a&gt;登録します。</target>
        </trans-unit>
        <trans-unit id="b9c1095f48c3aca9e5b044be2e9f7d4aebd28ac4" translate="yes" xml:space="preserve">
          <source>Subclass &lt;a href=&quot;parser/resultfactory&quot;&gt;TAP::Parser::ResultFactory&lt;/a&gt; itself and implement your own &lt;a href=&quot;parser/result&quot;&gt;TAP::Parser::Result&lt;/a&gt; creation logic. Then you'll need to customize the class used by your parser by setting the &lt;code&gt;result_factory_class&lt;/code&gt; parameter. See &lt;a href=&quot;#new&quot;&gt;new&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;parser/resultfactory&quot;&gt;TAP :: Parser :: ResultFactory&lt;/a&gt;自体をサブクラス化し、独自の&lt;a href=&quot;parser/result&quot;&gt;TAP :: Parser :: Result&lt;/a&gt;作成ロジックを実装します。次に、 &lt;code&gt;result_factory_class&lt;/code&gt; パラメーターを設定して、パーサーが使用するクラスをカスタマイズする必要があります。詳細については、&lt;a href=&quot;#new&quot;&gt;新規&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e73f017d1b2756188610b88957a8f09f27806cab" translate="yes" xml:space="preserve">
          <source>Subclass implementations of this method may wish to invoke the &lt;b&gt;nested()&lt;/b&gt; method of &lt;code&gt;$pod_seq&lt;/code&gt; to see if it is nested inside some other interior-sequence (and if so, which kind).</source>
          <target state="translated">このメソッドのサブクラス実装では、 &lt;code&gt;$pod_seq&lt;/code&gt; &lt;b&gt;nested（）&lt;/b&gt;メソッドを呼び出して、他の内部シーケンス内にネストされているかどうかを確認できます（そうである場合は、その種類も）。</target>
        </trans-unit>
        <trans-unit id="64bde9a828bba22dd63e418d48e0703d9c34544f" translate="yes" xml:space="preserve">
          <source>Subclass it</source>
          <target state="translated">サブクラス</target>
        </trans-unit>
        <trans-unit id="206092a8f1bccf21dc1a96fb2aecc7852ff2c2b3" translate="yes" xml:space="preserve">
          <source>Subclass off of ExtUtils::MM_Any</source>
          <target state="translated">ExtUtils::MM_Any のサブクラス</target>
        </trans-unit>
        <trans-unit id="c726c3176746b961b1da7788108e104c74c302c2" translate="yes" xml:space="preserve">
          <source>Subclasses will add methods, and will also inherit these methods:</source>
          <target state="translated">サブクラスはメソッドを追加し、これらのメソッドも継承します。</target>
        </trans-unit>
        <trans-unit id="f3e2eeeafa90ba07510736c79555f75b3f2683f2" translate="yes" xml:space="preserve">
          <source>Subclassing Math::BigInt</source>
          <target state="translated">Math::BigInt のサブクラス</target>
        </trans-unit>
        <trans-unit id="7a1cf3add6a7e4a2dd149344bc26ee4f53a43b6c" translate="yes" xml:space="preserve">
          <source>Subject to include with the message. You will be prompted if you don't supply one on the command line.</source>
          <target state="translated">メッセージに含める件名を指定します。コマンドラインで件名を指定しない場合は、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="514a69c7cb010ea0bf9f49cd1b452991b8b8c5f5" translate="yes" xml:space="preserve">
          <source>Subject to include with the report. You will be prompted if you don't supply one on the command line.</source>
          <target state="translated">レポートに含める件名を指定します。コマンドラインで指定しない場合は、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="2dacf65959849884a011f36f76a04eebea94c5ea" translate="yes" xml:space="preserve">
          <source>Submit</source>
          <target state="translated">Submit</target>
        </trans-unit>
        <trans-unit id="403bc0e6094ca81cdc2ca6f64a247c639431d231" translate="yes" xml:space="preserve">
          <source>Submit all messages/phrases/etc. to translators.</source>
          <target state="translated">すべてのメッセージ/フレーズ/などを翻訳者に提出します。</target>
        </trans-unit>
        <trans-unit id="0d2e3edd3ad42a3c825fac56543a9ba6ed29f070" translate="yes" xml:space="preserve">
          <source>Submit as command file on close.</source>
          <target state="translated">close時にコマンドファイルとして提出します。</target>
        </trans-unit>
        <trans-unit id="740057b8189ca179a92f1c0babad5e8319eb10b8" translate="yes" xml:space="preserve">
          <source>Submitting patches</source>
          <target state="translated">パッチの提出</target>
        </trans-unit>
        <trans-unit id="c9a1540fce9398b2881e3e765d38647cec10bf30" translate="yes" xml:space="preserve">
          <source>Subprocesses started with open use a minimal popen() routine and therefore they do not return pids usable with waitpid etc.</source>
          <target state="translated">open で開始されたサブプロセスは最小限の popen()ルーチンを使用するため、 waitpid などで使用可能な pid を返しません。</target>
        </trans-unit>
        <trans-unit id="5792d60bcabce4e99c77d69a1b0a93002b6b2c75" translate="yes" xml:space="preserve">
          <source>Subroutine &quot;%s&quot; will not stay shared</source>
          <target state="translated">サブルーチン &quot;%s&quot; が共有されたままになりません。</target>
        </trans-unit>
        <trans-unit id="800547d773f13c68fa4495c8910007398137cdb8" translate="yes" xml:space="preserve">
          <source>Subroutine &quot;&amp;amp;%s&quot; is not available</source>
          <target state="translated">サブルーチン「＆％s」は使用できません</target>
        </trans-unit>
        <trans-unit id="0b29109439b3ee3e3ad4d67ea3d37066e59b15da" translate="yes" xml:space="preserve">
          <source>Subroutine %s redefined</source>
          <target state="translated">サブルーチン %s 再定義</target>
        </trans-unit>
        <trans-unit id="76ef2c6312acb93997fc9533ac9d5fab3c547483" translate="yes" xml:space="preserve">
          <source>Subroutine Attributes</source>
          <target state="translated">サブルーチン属性</target>
        </trans-unit>
        <trans-unit id="e505b9988266048dcf61fcc7b04326e41ac00577" translate="yes" xml:space="preserve">
          <source>Subroutine References as Methods</source>
          <target state="translated">メソッドとしてのサブルーチン参照</target>
        </trans-unit>
        <trans-unit id="e0c81de6298b00147539fb1fd776b06104ff3a1b" translate="yes" xml:space="preserve">
          <source>Subroutine Stubs</source>
          <target state="translated">サブルーチンスタブ</target>
        </trans-unit>
        <trans-unit id="a522560a592f55d1244a49a61ccbec20e0f1bdb4" translate="yes" xml:space="preserve">
          <source>Subroutine attributes must come before the signature</source>
          <target state="translated">サブルーチンの属性はシグネチャの前に来なければなりません。</target>
        </trans-unit>
        <trans-unit id="e17d78c0715b7cc40ffcc13047f5c03c7076ce7e" translate="yes" xml:space="preserve">
          <source>Subroutine call to a named capture group. Equivalent to &lt;code&gt;(?&amp;amp;&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt;.</source>
          <target state="translated">名前付きキャプチャグループへのサブルーチン呼び出し。 &lt;code&gt;(?&amp;amp;&lt;i&gt;NAME&lt;/i&gt;)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="ba2c6bab1119398dcc6fbf96d66f3ef433c36e56" translate="yes" xml:space="preserve">
          <source>Subroutine call to a named capture group. Equivalent to &lt;code&gt;(?&amp;amp;NAME)&lt;/code&gt;.</source>
          <target state="translated">名前付きキャプチャグループへのサブルーチン呼び出し。同等の &lt;code&gt;(?&amp;amp;NAME)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2db8d18b231e5da42e906ca30c0b2a5d6ae6ff13" translate="yes" xml:space="preserve">
          <source>Subroutine calls and lookups of individual array elements arise often enough that it gets cumbersome to use method 2. As a form of syntactic sugar, the examples for method 2 may be written:</source>
          <target state="translated">個々の配列要素のサブルーチン呼び出しやルックアップは、メソッド2を使うのが面倒になるほど頻繁に発生します。構文的な糖質の一形態として,メソッド2の例を書くことができます.</target>
        </trans-unit>
        <trans-unit id="2a4b563566baea0b906bb1fd2aafe77f5b8f15d9" translate="yes" xml:space="preserve">
          <source>Subroutine declarations and definitions may optionally have attribute lists associated with them. (Variable &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; declarations also may, but see the warning below.) Perl handles these declarations by passing some information about the call site and the thing being declared along with the attribute list to this module. In particular, the first example above is equivalent to the following:</source>
          <target state="translated">サブルーチンの宣言と定義には、オプションで属性リストを関連付けることができます。（変数 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 宣言も可能ですが、以下の警告を参照してください。）Perlは、呼び出しサイトおよび宣言されているものに関する情報を属性リストとともにこのモジュールに渡すことにより、これらの宣言を処理します。特に、上記の最初の例は次のものと同等です。</target>
        </trans-unit>
        <trans-unit id="1073836739fed365f30def4568eabbaf570bbb96" translate="yes" xml:space="preserve">
          <source>Subroutine declarations and definitions may optionally have attribute lists associated with them. (Variable &lt;code&gt;my&lt;/code&gt; declarations also may, but see the warning below.) Perl handles these declarations by passing some information about the call site and the thing being declared along with the attribute list to this module. In particular, the first example above is equivalent to the following:</source>
          <target state="translated">サブルーチンの宣言と定義には、オプションで属性リストを関連付けることができます。（変数の &lt;code&gt;my&lt;/code&gt; 宣言も可能ですが、以下の警告を参照してください。）Perlは、呼び出しサイトと宣言されているものに関する情報を属性リストとともにこのモジュールに渡すことによって、これらの宣言を処理します。特に、上記の最初の例は次の例と同等です。</target>
        </trans-unit>
        <trans-unit id="1033729ecd127028ccf3e2aa66d4fd8f486f7da3" translate="yes" xml:space="preserve">
          <source>Subroutine defined.</source>
          <target state="translated">サブルーチンを定義しました。</target>
        </trans-unit>
        <trans-unit id="d9339f9cd00dee3efa9f7f46ee1ed9f5d6e327f1" translate="yes" xml:space="preserve">
          <source>Subroutine definitions (and declarations, for that matter) need not necessarily be situated in the package whose symbol table they occupy. You can define a subroutine outside its package by explicitly qualifying the name of the subroutine:</source>
          <target state="translated">サブルーチンの定義(宣言も)は、必ずしもシンボルテーブルが置かれているパッケージの中にある必要はありません。サブルーチンの名前を明示的に修飾することで、パッケージの外でサブルーチンを定義することができます。</target>
        </trans-unit>
        <trans-unit id="e9df428b17a930b0722f07795c93f287fd3afdec" translate="yes" xml:space="preserve">
          <source>Subroutine or method call.</source>
          <target state="translated">サブルーチンまたはメソッドの呼び出し。</target>
        </trans-unit>
        <trans-unit id="69c680037a9b95df2742cb6788f31ebc24c5c06b" translate="yes" xml:space="preserve">
          <source>Subroutine references are the simplest case. When the inclusion system walks through &lt;a href=&quot;perlvar#%40INC&quot;&gt;&lt;code&gt;@INC&lt;/code&gt;&lt;/a&gt; and encounters a subroutine, this subroutine gets called with two parameters, the first a reference to itself, and the second the name of the file to be included (e.g.,</source>
          <target state="translated">サブルーチン参照は最も単純なケースです。インクルージョンシステムが&lt;a href=&quot;perlvar#%40INC&quot;&gt; &lt;code&gt;@INC&lt;/code&gt; &lt;/a&gt;をウォークスルーしてサブルーチンに遭遇すると、このサブルーチンは2つのパラメーターで呼び出されます。最初のパラメーターはそれ自体への参照であり、2番目のパラメーターはインクルードされるファイルの名前です（例：</target>
        </trans-unit>
        <trans-unit id="e848b12ba1771594d7f90740383f312abe841d15" translate="yes" xml:space="preserve">
          <source>Subroutine references are the simplest case. When the inclusion system walks through @INC and encounters a subroutine, this subroutine gets called with two parameters, the first a reference to itself, and the second the name of the file to be included (e.g., &quot;</source>
          <target state="translated">サブルーチン参照は最も単純なケースです。インクルードシステムが@INCを歩き、サブルーチンに遭遇すると、このサブルーチンは2つのパラメータで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b392dcb7d8c01390614814ebacd1c58485fdcd21" translate="yes" xml:space="preserve">
          <source>Subroutines</source>
          <target state="translated">Subroutines</target>
        </trans-unit>
        <trans-unit id="3a9c9397dc48823cce2af70d8aec97a4fb827cbd" translate="yes" xml:space="preserve">
          <source>Subroutines can also return values:</source>
          <target state="translated">サブルーチンは値を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="7cbe2412d3dda1f0b9872899595b0870846f911a" translate="yes" xml:space="preserve">
          <source>Subroutines declarations can also be loaded up with the &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; statement or both loaded and imported into your namespace with a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details on this.</source>
          <target state="translated">サブルーチン宣言は &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; ステートメントでロードすることも、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; ステートメントでロードしてネームスペースにインポートすることもできます。詳細については&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c9413cb94cc1864a97b409cf3b7e7117c8f53d17" translate="yes" xml:space="preserve">
          <source>Subroutines declarations can also be loaded up with the &lt;code&gt;require&lt;/code&gt; statement or both loaded and imported into your namespace with a &lt;code&gt;use&lt;/code&gt; statement. See &lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt; for details on this.</source>
          <target state="translated">サブルーチン宣言は、 &lt;code&gt;require&lt;/code&gt; ステートメントを使用してロードすることも、 &lt;code&gt;use&lt;/code&gt; ステートメントを使用して名前空間にロードおよびインポートすることもできます。詳細については、&lt;a href=&quot;perlmod&quot;&gt;perlmod&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="01b365b15ba275665842a040de4aa6dff221b841" translate="yes" xml:space="preserve">
          <source>Subroutines in multiple packages within the same file are supported - but you should note that this requires exporting the &lt;code&gt;SelfLoader::AUTOLOAD&lt;/code&gt; to every package which requires it. This is done automatically by the &lt;b&gt;SelfLoader&lt;/b&gt; when it first loads the subs into the cache, but you should really specify it in the initialization before the &lt;code&gt;__DATA__&lt;/code&gt; by putting a 'use SelfLoader' statement in each package.</source>
          <target state="translated">同じファイル内の複数のパッケージのサブルーチンがサポートされていますが、これには、 &lt;code&gt;SelfLoader::AUTOLOAD&lt;/code&gt; を、それを必要とするすべてのパッケージにエクスポートする必要があることに注意してください。これは、最初に&lt;b&gt;Subsを&lt;/b&gt;キャッシュに読み込むときに&lt;b&gt;SelfLoader&lt;/b&gt;によって自動的に行われますが、各パッケージに 'use SelfLoader'ステートメントを配置することにより、 &lt;code&gt;__DATA__&lt;/code&gt; の前の初期化で実際に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="908bce63fd3bee1510a99f3549ad888c8938e948" translate="yes" xml:space="preserve">
          <source>Subroutines may be called recursively. If a subroutine is called using the &lt;code&gt;&amp;amp;&lt;/code&gt; form, the argument list is optional, and if omitted, no &lt;code&gt;@_&lt;/code&gt; array is set up for the subroutine: the &lt;code&gt;@_&lt;/code&gt; array at the time of the call is visible to subroutine instead. This is an efficiency mechanism that new users may wish to avoid.</source>
          <target state="translated">サブルーチンは再帰的に呼び出すことができます。 &lt;code&gt;&amp;amp;&lt;/code&gt; フォームを使用してサブルーチンを呼び出す場合、引数リストはオプションです。省略した場合、サブルーチンには &lt;code&gt;@_&lt;/code&gt; 配列は設定されません。代わりに、呼び出し時の &lt;code&gt;@_&lt;/code&gt; 配列がサブルーチンに表示されます。これは、新しいユーザーが避けたい効率的なメカニズムです。</target>
        </trans-unit>
        <trans-unit id="cda2b08c81beb1e8e27be40c69e142c7b306247c" translate="yes" xml:space="preserve">
          <source>Subroutines used with ExtUtils::ParseXS</source>
          <target state="translated">ExtUtils::ParseXS で使用されるサブルーチン</target>
        </trans-unit>
        <trans-unit id="3f753412893b86e74de31ef62203854e630f7671" translate="yes" xml:space="preserve">
          <source>Subroutines whose names are in all upper case are reserved to the Perl core, as are modules whose names are in all lower case. A subroutine in all capitals is a loosely-held convention meaning it will be called indirectly by the run-time system itself, usually due to a triggered event. Subroutines whose name start with a left parenthesis are also reserved the same way. The following is a list of some subroutines that currently do special, pre-defined things.</source>
          <target state="translated">名前がすべて大文字のサブルーチンはPerlコアに予約されており、名前がすべて小文字のモジュールも同様に予約されています。すべて大文字のサブルーチンは、ランタイムシステムから間接的に呼び出されることを意味します。名前が左括弧で始まるサブルーチンも同様に予約されます。以下は、現在、事前に定義された特別なことを行ういくつかのサブルーチンのリストです。</target>
        </trans-unit>
        <trans-unit id="bd995cb059355e488a61a605eadaa870990fb34e" translate="yes" xml:space="preserve">
          <source>Subscribe to perl5-porters, follow the patches and try and understand them; don't be afraid to ask if there's a portion you're not clear on - who knows, you may unearth a bug in the patch...</source>
          <target state="translated">perl5-porters を購読して、パッチをフォローして理解しようとしてみてください。</target>
        </trans-unit>
        <trans-unit id="93d9b06a27141e76f1c5da56e07d3f537a49d789" translate="yes" xml:space="preserve">
          <source>Subscribe/Unsubscribe</source>
          <target state="translated">Subscribe/Unsubscribe</target>
        </trans-unit>
        <trans-unit id="a9be04fdf20dd61cb8df7236630151f2b739230f" translate="yes" xml:space="preserve">
          <source>Subscribers to perl5-porters (the porters themselves) come in several flavours. Some are quiet curious lurkers, who rarely pitch in and instead watch the ongoing development to ensure they're forewarned of new changes or features in Perl. Some are representatives of vendors, who are there to make sure that Perl continues to compile and work on their platforms. Some patch any reported bug that they know how to fix, some are actively patching their pet area (threads, Win32, the regexp -engine), while others seem to do nothing but complain. In other words, it's your usual mix of technical people.</source>
          <target state="translated">perl5-porters (移植者自身)の購読者にはいくつかの種類があります。ある者は、静かな好奇心旺盛なラーカーで、滅多に参加せず、代わりに Perl の新しい変更や機能を確実に知らせるために、進行中の開発を見守っています。一部の人はベンダーの代表者で、Perl が彼らのプラットフォーム上でコンパイルして動作し続けることを確認するために存在しています。ある者は、報告されたバグを修正する方法を知っているものにパッチを当て、ある者は積極的に自分の好きな領域 (スレッド、Win32、regexp -engine)にパッチを当てていますが、他の者は文句を言うだけで何もしていないようです。言い換えれば、いつものように技術的な人たちが混在しているということです。</target>
        </trans-unit>
        <trans-unit id="4ce7140689363704a8ba85b5261797d063cdadf8" translate="yes" xml:space="preserve">
          <source>Subscripts</source>
          <target state="translated">Subscripts</target>
        </trans-unit>
        <trans-unit id="6555f256c06dba45d12ae5b008404f7426193f59" translate="yes" xml:space="preserve">
          <source>Substantial contributions by Sean Burke &amp;lt;sburke@cpan.org&amp;gt;.</source>
          <target state="translated">Sean Burke &amp;lt;sburke@cpan.org&amp;gt;による多大な貢献。</target>
        </trans-unit>
        <trans-unit id="972581919796c696d3887a640cd0abc4a9d6fe2f" translate="yes" xml:space="preserve">
          <source>Substitute &lt;code&gt;mmk&lt;/code&gt; for &lt;code&gt;mms&lt;/code&gt; above if you're using MMK.</source>
          <target state="translated">代替 &lt;code&gt;mmk&lt;/code&gt; 用 &lt;code&gt;mms&lt;/code&gt; あなたがMMKを使用している場合は、上記の。</target>
        </trans-unit>
        <trans-unit id="dbc00d62cb7997a305b625c77616bced61d7a767" translate="yes" xml:space="preserve">
          <source>Substitution loop</source>
          <target state="translated">置換ループ</target>
        </trans-unit>
        <trans-unit id="014d5a9e6f1c5bae7a50cda20695fb756eee0cc0" translate="yes" xml:space="preserve">
          <source>Substitution of &lt;code&gt;BEGIN { add_100() }&lt;/code&gt; block with:</source>
          <target state="translated">置換 &lt;code&gt;BEGIN { add_100() }&lt;/code&gt; ブロックとを：</target>
        </trans-unit>
        <trans-unit id="6aa080c65a0705bf8b85bd864e5d55d3b8ce1d38" translate="yes" xml:space="preserve">
          <source>Substitution pattern not terminated</source>
          <target state="translated">終了しない置換パターン</target>
        </trans-unit>
        <trans-unit id="618ea16f2fe1c5efd77bdfb863d15430e39ab7d9" translate="yes" xml:space="preserve">
          <source>Substitution replacement not terminated</source>
          <target state="translated">代替え終了していない</target>
        </trans-unit>
        <trans-unit id="821f56dfe7408535081734d464b6578d0a9340e7" translate="yes" xml:space="preserve">
          <source>Substitution-specific modifiers described in</source>
          <target state="translated">に記載されている置換特異的修飾子</target>
        </trans-unit>
        <trans-unit id="748640ee60ffaf08dbf9cf2300dfb0ab8b09456a" translate="yes" xml:space="preserve">
          <source>Substitution-specific modifiers described in &lt;a href=&quot;perlop#s%2FPATTERN%2FREPLACEMENT%2Fmsixpodualngcer&quot;&gt;&quot;s/PATTERN/REPLACEMENT/msixpodualngcer&quot; in perlop&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;perlop#s%2FPATTERN%2FREPLACEMENT%2Fmsixpodualngcer&quot;&gt;perlopの「s / PATTERN / REPLACEMENT / msixpodualngcer」で&lt;/a&gt;説明されている置換固有の修飾子は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a85608dfc0000ff615c1dec302e3be9c2df7837d" translate="yes" xml:space="preserve">
          <source>Substitutions are made with $col and $row in the output string with the following sprintf() line formats:</source>
          <target state="translated">出力文字列の $col と $row は、以下の sprintf()の行フォーマットで置換されます。</target>
        </trans-unit>
        <trans-unit id="e9a34939ee76bec97fd549a9a6b322c326e9dbba" translate="yes" xml:space="preserve">
          <source>Substring data about strings that must appear in the final match. This is currently only used internally by Perl's engine, but might be used in the future for all engines for optimisations.</source>
          <target state="translated">最終的なマッチで出現する必要のある文字列に関するサブストリングデータ。これは現在のところ Perl のエンジンでのみ使用されていますが、将来的にはすべてのエンジンで最適化のために使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="16f77c4705ec7e98c86e25e92de290785b8aa469" translate="yes" xml:space="preserve">
          <source>Subtest implementation is more sane.</source>
          <target state="translated">サブテスト実装の方がまともだな</target>
        </trans-unit>
        <trans-unit id="9292ec7a4b6c6d463da3dc2a73e0168876180e17" translate="yes" xml:space="preserve">
          <source>Subtest indentation</source>
          <target state="translated">サブテストのインデント</target>
        </trans-unit>
        <trans-unit id="288c9b632547ccefc043ed0814e269fb40d46750" translate="yes" xml:space="preserve">
          <source>Subtests make use of this hub to route events.</source>
          <target state="translated">サブテーマでは、このハブをイベントのルートに活用しています。</target>
        </trans-unit>
        <trans-unit id="3de3a6f2fafae521ea8d2aedc747771ba7ff68a0" translate="yes" xml:space="preserve">
          <source>Subtests were released in Test::More 0.94, which came with Perl 5.12.0. Subtests did not implicitly call &lt;code&gt;done_testing()&lt;/code&gt; until 0.96; the first Perl with that fix was Perl 5.14.0 with 0.98.</source>
          <target state="translated">サブテストは、Perl 5.12.0に付属するTest :: More 0.94でリリースされました。サブテストは0.96まで暗黙的に &lt;code&gt;done_testing()&lt;/code&gt; を呼び出しませんでした。その修正を施した最初のPerlは0.98を備えたPerl 5.14.0でした。</target>
        </trans-unit>
        <trans-unit id="da70c837fb111755e855b0a137562f112a4e55e2" translate="yes" xml:space="preserve">
          <source>Subtle interdependencies between test programs can mask problems - for example an earlier test may neglect to remove a temporary file that affects the behaviour of a later test. To find this kind of problem I use the --shuffle and --reverse options to run my tests in random or reversed order.</source>
          <target state="translated">テストプログラム間の微妙な相互依存性が問題を覆い隠してしまうことがあります。例えば、以前のテストでは、後のテストの動作に影響を与える一時ファイルを削除するのを怠ってしまうことがあります。この種の問題を見つけるために、私は--shuffleと--reverseオプションを使って、テストをランダムまたは逆の順序で実行しています。</target>
        </trans-unit>
        <trans-unit id="8a773e71238655167a41521fa50857f3f27293a6" translate="yes" xml:space="preserve">
          <source>Subtleties of this behavior may be platform-dependent and may change in the future.</source>
          <target state="translated">この行動の微妙なところは、プラットフォームに依存している可能性があり、将来的には変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae5f61e523ef194692c08eae320b323a03f8bb9b" translate="yes" xml:space="preserve">
          <source>Subtract</source>
          <target state="translated">Subtract</target>
        </trans-unit>
        <trans-unit id="532674971418925bf881a12b4532f1662a1e9a91" translate="yes" xml:space="preserve">
          <source>Subtracts $y from $x and returns the result.</source>
          <target state="translated">x から $y を引き算し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="a1c757fe97bd3bdc11456c873d4a95f5772e2115" translate="yes" xml:space="preserve">
          <source>Success results contain:</source>
          <target state="translated">成功の結果が含まれています。</target>
        </trans-unit>
        <trans-unit id="f918892a0be28ec22ae2148c6c8b20e089383319" translate="yes" xml:space="preserve">
          <source>Successes</source>
          <target state="translated">Successes</target>
        </trans-unit>
        <trans-unit id="9f13946904481800a60a2508acdf81d63816cbc9" translate="yes" xml:space="preserve">
          <source>Successfully tested means that all &quot;make test&quot; runs finish with a result of 100% OK. All tests were conducted with -Duseshrplib set.</source>
          <target state="translated">Successfully tested は、すべての &quot;make test&quot; の実行が 100% OK の結果で終了することを意味します。すべてのテストは -Duseshrplib セットで行われました。</target>
        </trans-unit>
        <trans-unit id="acd9d5af15f64c17e2970ba3b3a2889b142e6fb0" translate="yes" xml:space="preserve">
          <source>Such QP strings can be decoded with:</source>
          <target state="translated">このようなQP文字列は、次のようにしてデコードすることができます。</target>
        </trans-unit>
        <trans-unit id="9bd751ae4548def6edde9b711d0020609ff568b3" translate="yes" xml:space="preserve">
          <source>Such code no longer has the desired effect, for two reasons. Firstly, the use of &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; means that the sorting algorithm is not changed until runtime, by which time it's too late to have any effect. Secondly, &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort::current&lt;/a&gt;&lt;/code&gt; is also called at run-time, when in fact the compile-time value of &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort::current&lt;/a&gt;&lt;/code&gt; is the one that matters.</source>
          <target state="translated">このようなコードは、2つの理由で、望ましい効果を発揮しなくなりました。まず、 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; の使用は、ソートアルゴリズムが実行時まで変更されないことを意味します。次に、実際に &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort::current&lt;/a&gt;&lt;/code&gt; コンパイル時の値が重要である場合、 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort::current&lt;/a&gt;&lt;/code&gt; も実行時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="142ef3d73b12a657e355c82858c85c2cd7a23472" translate="yes" xml:space="preserve">
          <source>Such code no longer has the desired effect, for two reasons. Firstly, the use of &lt;code&gt;eval()&lt;/code&gt; means that the sorting algorithm is not changed until runtime, by which time it's too late to have any effect. Secondly, &lt;code&gt;sort::current&lt;/code&gt; is also called at run-time, when in fact the compile-time value of &lt;code&gt;sort::current&lt;/code&gt; is the one that matters.</source>
          <target state="translated">このようなコードは、2つの理由から、もはや望ましい効果を発揮しません。まず、 &lt;code&gt;eval()&lt;/code&gt; を使用すると、ソートアルゴリズムは実行時まで変更されません。実行時までには、効果を発揮するには遅すぎます。次に、 &lt;code&gt;sort::current&lt;/code&gt; は実行時にも呼び出されますが、実際には、 &lt;code&gt;sort::current&lt;/code&gt; コンパイル時の値が重要です。</target>
        </trans-unit>
        <trans-unit id="69ef159fceda5830f0aa82ac39ad009b226aeb52" translate="yes" xml:space="preserve">
          <source>Such combinations can include alternatives, leading to a problem of choice: if we match a regular expression &lt;code&gt;a|ab&lt;/code&gt; against &lt;code&gt;&quot;abc&quot;&lt;/code&gt; , will it match substring &lt;code&gt;&quot;a&quot;&lt;/code&gt; or &lt;code&gt;&quot;ab&quot;&lt;/code&gt; ? One way to describe which substring is actually matched is the concept of backtracking (see &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). However, this description is too low-level and makes you think in terms of a particular implementation.</source>
          <target state="translated">このような組み合わせには代替が含まれる可能性があり、選択の問題につながります。正規表現 &lt;code&gt;a|ab&lt;/code&gt; を &lt;code&gt;&quot;abc&quot;&lt;/code&gt; と照合すると、部分文字列 &lt;code&gt;&quot;a&quot;&lt;/code&gt; または &lt;code&gt;&quot;ab&quot;&lt;/code&gt; と照合されますか？実際に一致する部分文字列を記述する1つの方法は、バックトラックの概念です（&lt;a href=&quot;#Backtracking&quot;&gt;バックトラックを&lt;/a&gt;参照）。ただし、この説明は低レベルであり、特定の実装の観点から考える必要があります。</target>
        </trans-unit>
        <trans-unit id="3a0a0250134ad0585c52e578d2c27b8e55bf21c1" translate="yes" xml:space="preserve">
          <source>Such combinations can include alternatives, leading to a problem of choice: if we match a regular expression &lt;code&gt;a|ab&lt;/code&gt; against &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, will it match substring &lt;code&gt;&quot;a&quot;&lt;/code&gt; or &lt;code&gt;&quot;ab&quot;&lt;/code&gt;? One way to describe which substring is actually matched is the concept of backtracking (see &lt;a href=&quot;#Backtracking&quot;&gt;&quot;Backtracking&quot;&lt;/a&gt;). However, this description is too low-level and makes you think in terms of a particular implementation.</source>
          <target state="translated">このような組み合わせには選択肢が含まれる可能性があり、選択の問題が発生します。正規表現 &lt;code&gt;a|ab&lt;/code&gt; を &lt;code&gt;&quot;abc&quot;&lt;/code&gt; と照合すると、部分文字列 &lt;code&gt;&quot;a&quot;&lt;/code&gt; または &lt;code&gt;&quot;ab&quot;&lt;/code&gt; と一致しますか？どの部分文字列が実際に一致するかを説明する1つの方法は、バックトラッキングの概念です（&lt;a href=&quot;#Backtracking&quot;&gt;「バックトラッキング」を&lt;/a&gt;参照）。ただし、この説明は低レベルであるため、特定の実装の観点から考える必要があります。</target>
        </trans-unit>
        <trans-unit id="54d1b0795c68a81e9549d343de87babe2d5446e2" translate="yes" xml:space="preserve">
          <source>Such commands are explained in the &quot;&lt;a href=&quot;#Formatting-Codes&quot;&gt;Formatting Codes&lt;/a&gt;&quot; section, below.</source>
          <target state="translated">このようなコマンドについては、以下の「&lt;a href=&quot;#Formatting-Codes&quot;&gt;コードのフォーマット&lt;/a&gt;」セクションで説明します。</target>
        </trans-unit>
        <trans-unit id="610620ff68fcfedc9e4625433127c1fd73d100c6" translate="yes" xml:space="preserve">
          <source>Such constructs are quite frequently used, both because older versions of Perl had no official &lt;code&gt;switch&lt;/code&gt; statement, and also because the new version described immediately below remains experimental and can sometimes be confusing.</source>
          <target state="translated">古いバージョンのPerlには公式の &lt;code&gt;switch&lt;/code&gt; ステートメントがなかったため、およびすぐ下に記載されている新しいバージョンは実験的なものであり、混乱を招く可能性があるため、このような構造はかなり頻繁に使用されます。</target>
        </trans-unit>
        <trans-unit id="ea3348659ce40b97978cb89e7a2d2a3c12e7d561" translate="yes" xml:space="preserve">
          <source>Such dangers are not peculiar to the locale system: any aspect of an application's environment which may be modified maliciously presents similar challenges. Similarly, they are not specific to Perl: any programming language that allows you to write programs that take account of their environment exposes you to these issues.</source>
          <target state="translated">このような危険性はロケールシステムに特有のものではありません:悪意を持って変更される可能性のあるアプリケーションの環境のあらゆる面で、同様の課題が発生します。同様に、これらは Perl に特有のものではありません。環境を考慮したプログラムを書くことができるプログラミング言語であれば、どのようなものでもこのような問題に直面することになります。</target>
        </trans-unit>
        <trans-unit id="92e64e08c8f255e5e8a21829e9acd359d7cc7e25" translate="yes" xml:space="preserve">
          <source>Such literals are accepted by both &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; for doing a version check. Note that using the v-strings for IPv4 addresses is not portable unless you also use the inet_aton()/inet_ntoa() routines of the Socket package.</source>
          <target state="translated">このようなリテラルは、バージョンチェックを行うための &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; の両方で受け入れられます。Socketパッケージのinet_aton（）/ inet_ntoa（）ルーチンも使用しない限り、IPv4アドレスにv文字列を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="b3ece4d85f65108445ce8ad183c4acd13b1bae15" translate="yes" xml:space="preserve">
          <source>Such literals are accepted by both &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt; for doing a version check. Note that using the v-strings for IPv4 addresses is not portable unless you also use the inet_aton()/inet_ntoa() routines of the Socket package.</source>
          <target state="translated">このようなリテラルは、バージョンチェックを行うための &lt;code&gt;require&lt;/code&gt; と &lt;code&gt;use&lt;/code&gt; の両方で受け入れられます。Socketパッケージのinet_aton（）/ inet_ntoa（）ルーチンも使用しない限り、IPv4アドレスにv文字列を使用することは移植できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c45d151cfb183e258e5e363109f24149b1db62ae" translate="yes" xml:space="preserve">
          <source>Such modules should</source>
          <target state="translated">このようなモジュールは</target>
        </trans-unit>
        <trans-unit id="7aa5a2112d8e6f60d9221533518e8ad273984dab" translate="yes" xml:space="preserve">
          <source>Such things aside, you can see that a lot can be achieved with a modest amount of code.</source>
          <target state="translated">そんなことはさておき、適度な量のコードで多くのことが達成できることがわかります。</target>
        </trans-unit>
        <trans-unit id="3f289da124b245076253fddcae953c824b46fb88" translate="yes" xml:space="preserve">
          <source>Suggestion for disuse:</source>
          <target state="translated">不用品の提案。</target>
        </trans-unit>
        <trans-unit id="88beb5e8792960b693418a1e821caf3667e2978e" translate="yes" xml:space="preserve">
          <source>Sum of</source>
          <target state="translated">合計</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="625d4a750d30cd6f4ad0513fdf02b0a356847795" translate="yes" xml:space="preserve">
          <source>Summary Results</source>
          <target state="translated">サマリー結果</target>
        </trans-unit>
        <trans-unit id="090f5890d90dd32f61ec60eddd99730f85a15bf5" translate="yes" xml:space="preserve">
          <source>Summary about the event.</source>
          <target state="translated">イベントについてのまとめ。</target>
        </trans-unit>
        <trans-unit id="64d8f92a0739a61061673d891b1afa8db3bbc87d" translate="yes" xml:space="preserve">
          <source>Summary methods</source>
          <target state="translated">サマリー方法</target>
        </trans-unit>
        <trans-unit id="bbeaa09c87f3637cdf1095b67ab5a263e83c735c" translate="yes" xml:space="preserve">
          <source>Summary of Option Specifications</source>
          <target state="translated">オプション仕様の概要</target>
        </trans-unit>
        <trans-unit id="90bd8a629095e4d3e067b9ee655f4a7aef77fe44" translate="yes" xml:space="preserve">
          <source>Summary: &lt;code&gt;Configure ... -Dusecbacktrace&lt;/code&gt; and installing the Developer Tools would be good.</source>
          <target state="translated">概要： &lt;code&gt;Configure ... -Dusecbacktrace&lt;/code&gt; と開発者ツールのインストールが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="fac6a1b8f230cdc10fcc15f1e97d9ef7d5b8d095" translate="yes" xml:space="preserve">
          <source>Summary: &lt;code&gt;Configure ... -Dusecbacktrace&lt;/code&gt; and you need &lt;code&gt;-lbfd&lt;/code&gt; .</source>
          <target state="translated">概要： &lt;code&gt;Configure ... -Dusecbacktrace&lt;/code&gt; と-lbfdが必要 &lt;code&gt;-lbfd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="667597966182758709a808e416e091ee04e5a076" translate="yes" xml:space="preserve">
          <source>Summary: &lt;code&gt;Configure ... -Dusecbacktrace&lt;/code&gt; and you need &lt;code&gt;-lbfd&lt;/code&gt;.</source>
          <target state="translated">概要： &lt;code&gt;Configure ... -Dusecbacktrace&lt;/code&gt; 、-lbfdが必要 &lt;code&gt;-lbfd&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d4dd97ceb3548f78756cbaa9fdb900f6de48597" translate="yes" xml:space="preserve">
          <source>Summing up, Perl numeric values can store only those numbers which have a finite decimal expansion or a &quot;short&quot; binary expansion.</source>
          <target state="translated">要約すると、Perlの数値は、有限の10進数展開または「短い」2進数展開を持つ数値のみを格納することができます。</target>
        </trans-unit>
        <trans-unit id="a30c74d272f700d25fc5ffc72319faf190f9cd38" translate="yes" xml:space="preserve">
          <source>Sun Microsystems has released a port of their Sun Studio compilers for Linux. As of May 2019, the last stable release took place on 2017, and one can buy support contracts for them.</source>
          <target state="translated">Sun Microsystemsは、Linux用のSun Studioコンパイラの移植版をリリースしました。2019年5月の時点では、最後の安定リリースは2017年に行われ、1つはそれらのためのサポート契約を購入することができます。</target>
        </trans-unit>
        <trans-unit id="6f2aaceda628f6be2c51aa728019480822a4776e" translate="yes" xml:space="preserve">
          <source>Sun Microsystems has released a port of their Sun Studio compilers for Linux. As of November 2005, only an alpha version has been released. Until a release of these compilers is made, support for compiling Perl with these compiler experimental.</source>
          <target state="translated">Sun Microsystems社は、Sun StudioコンパイラのLinuxへの移植版をリリースしました。2005年11月現在、アルファ版のみがリリースされています。これらのコンパイラがリリースされるまでは、これらのコンパイラでPerlをコンパイルするためのサポートは実験的なものです。</target>
        </trans-unit>
        <trans-unit id="c878825d39958359a72cd8a76c4798d5c63452e1" translate="yes" xml:space="preserve">
          <source>Sun and GNU make</source>
          <target state="translated">サンとGNUが作る</target>
        </trans-unit>
        <trans-unit id="718d79465fef1629218681af768f2453685f48a1" translate="yes" xml:space="preserve">
          <source>Sun's C Compiler</source>
          <target state="translated">サンのCコンパイラ</target>
        </trans-unit>
        <trans-unit id="6195b0f6879010bbee2ff42c95d1331cc047feb8" translate="yes" xml:space="preserve">
          <source>SunOS 4.x</source>
          <target state="translated">サンオーエスフォーエックス</target>
        </trans-unit>
        <trans-unit id="0887ccabfd110aa623b91de64a05467ad2ff0b37" translate="yes" xml:space="preserve">
          <source>Supersede.</source>
          <target state="translated">Supersede.</target>
        </trans-unit>
        <trans-unit id="e16d86479fe3fa44742384e85cda27574322cbc3" translate="yes" xml:space="preserve">
          <source>Supply a comparison function to sort() (described in &lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;):</source>
          <target state="translated">sort（）に比較関数を提供します（&lt;a href=&quot;functions/sort&quot;&gt;sortで&lt;/a&gt;説明）。</target>
        </trans-unit>
        <trans-unit id="1abf49bb15ef4ea8e1f725a8e57c7d302079a707" translate="yes" xml:space="preserve">
          <source>Supply a comparison function to sort() (described in &lt;a href=&quot;perlfunc#sort&quot;&gt;&quot;sort&quot; in perlfunc&lt;/a&gt;):</source>
          <target state="translated">sort（）に比較関数を提供します（&lt;a href=&quot;perlfunc#sort&quot;&gt;perlfuncの「sort」で&lt;/a&gt;説明されています）。</target>
        </trans-unit>
        <trans-unit id="de415e5d5000869495451db35dc93df656397ea8" translate="yes" xml:space="preserve">
          <source>Supply a password. If this token is present, the auto-login process will supply the specified string if the remote server requires a password as part of the login process.</source>
          <target state="translated">パスワードを指定します。このトークンが存在する場合、リモートサーバがログインプロセスの一部としてパスワードを要求する場合、自動ログインプロセスは指定された文字列を提供します。</target>
        </trans-unit>
        <trans-unit id="2b5e575cc764d4329007cce80f84811dda7921d8" translate="yes" xml:space="preserve">
          <source>Supply an additional account password. If this token is present, the auto-login process will supply the specified string if the remote server requires an additional account password.</source>
          <target state="translated">追加のアカウントパスワードを指定します。このトークンが存在する場合、リモートサーバが追加のアカウントパスワードを要求している場合、自動ログインプロセスは指定された文字列を供給します。</target>
        </trans-unit>
        <trans-unit id="63bb1d0a1fc152b9571b2b05084b5b7573c0a7dc" translate="yes" xml:space="preserve">
          <source>Supply object methods for I/O handles</source>
          <target state="translated">I/Oハンドルのオブジェクトメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="e754d6f0995eab7526c2995e6dd29fc5213bbe9f" translate="yes" xml:space="preserve">
          <source>Supply object methods for directory handles</source>
          <target state="translated">ディレクトリハンドルのオブジェクトメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="9f22ffa5d56d4c5cfa232e27b220356c8959032d" translate="yes" xml:space="preserve">
          <source>Supply object methods for filehandles</source>
          <target state="translated">ファイルハンドルにオブジェクトメソッドを提供する</target>
        </trans-unit>
        <trans-unit id="b2a77c0ef03836a7333e41ce4f0c7055106ac057" translate="yes" xml:space="preserve">
          <source>Supply object methods for pipes</source>
          <target state="translated">パイプ用のオブジェクトメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="24f8675a681a3fcf0a19ce2f457ac46639a461cc" translate="yes" xml:space="preserve">
          <source>Supply seek based methods for I/O objects</source>
          <target state="translated">I/O オブジェクトのためのシークベースのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="4577ee52f9d606e12ad2fa9f7ea83ec15081ff52" translate="yes" xml:space="preserve">
          <source>Supplying a count to the</source>
          <target state="translated">にカウントを供給する</target>
        </trans-unit>
        <trans-unit id="9256abeb61b0e9c2634b93f868b22e3b6be3e559" translate="yes" xml:space="preserve">
          <source>Support for 64-bit Windows added in 5.8 (ActiveState Corp).</source>
          <target state="translated">5.8で64ビットWindowsのサポートが追加されました(ActiveState Corp.</target>
        </trans-unit>
        <trans-unit id="832ef41556695f42d002862c25aa7f6927ea5c9c" translate="yes" xml:space="preserve">
          <source>Support for 64-bit addressing is experimental: some aspects of Perl may be omitted or buggy. Note the messages output by</source>
          <target state="translated">64 ビットアドレッシングのサポートは実験的なものです:Perl のいくつかの側面が省略されていたり、バグがあったりするかもしれません。Perl の一部は省略されているかもしれませんし、バグがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="dfd649a90bcb497a90c270b395e1aca8e9f13d5a" translate="yes" xml:space="preserve">
          <source>Support for Inside-Out Classes</source>
          <target state="translated">インサイドアウト授業への対応</target>
        </trans-unit>
        <trans-unit id="a6e9ff56bd571fa57e267af64d661fa73e5d1898" translate="yes" xml:space="preserve">
          <source>Support for NO_COLOR was added in Term::ANSIColor 5.01.</source>
          <target state="translated">Term::ANSIColor 5.01でNO_COLORのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="f74542dacfa191bd88d61863d9855931e106e4c3" translate="yes" xml:space="preserve">
          <source>Support for PERL_OBJECT was added in 5.005 (ActiveState Tool Corp).</source>
          <target state="translated">5.005 (ActiveState Tool Corp)でPERL_OBJECTのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="aa9a9b9bea1d915cddc6e189a212373757505afc" translate="yes" xml:space="preserve">
          <source>Support for calling Test::Builder-&amp;gt;note is minimal. It's implemented as an empty stub, so modules that use it will not crash but the calls are not recorded for testing purposes like the others. Patches welcome.</source>
          <target state="translated">Test :: Builder-&amp;gt; noteの呼び出しのサポートは最小限です。空のスタブとして実装されているため、これを使用するモジュールはクラッシュしませんが、他のモジュールのようにテスト目的で呼び出しが記録されることはありません。パッチは大歓迎です。</target>
        </trans-unit>
        <trans-unit id="4152d06f964d8c8500926a55fcc080decb5f3944" translate="yes" xml:space="preserve">
          <source>Support for code 3 (italic) is rare and therefore not mentioned in that table. It is not believed to be fully supported by any of the terminals listed, although it's displayed as green in the Linux console, but it is reportedly supported by urxvt.</source>
          <target state="translated">コード 3 (イタリック体)のサポートは稀であるため、この表には記載されていません。Linux コンソールでは緑色で表示されていますが、 urxvt でサポートされていると報告されています。</target>
        </trans-unit>
        <trans-unit id="d13a3104d38bfebd2d8edefc71bb43ed89c25719" translate="yes" xml:space="preserve">
          <source>Support for colors 16 through 256 (the &lt;code&gt;ansi&lt;/code&gt; , &lt;code&gt;rgb&lt;/code&gt; , and &lt;code&gt;grey&lt;/code&gt; colors), the &lt;code&gt;:constants256&lt;/code&gt; import tag, the coloralias() function, and support for the ANSI_COLORS_ALIASES environment variable were added in Term::ANSIColor 4.00, included in Perl 5.17.8.</source>
          <target state="translated">色16〜256（ &lt;code&gt;ansi&lt;/code&gt; 、 &lt;code&gt;rgb&lt;/code&gt; 、および &lt;code&gt;grey&lt;/code&gt; ）のサポート、 &lt;code&gt;:constants256&lt;/code&gt; インポートタグ、coloralias（）関数、およびANSI_COLORS_ALIASES環境変数のサポートが、Perl 5.17に含まれるTerm :: ANSIColor 4.00に追加されました。 8。</target>
        </trans-unit>
        <trans-unit id="21899951038dc28e07a818ac9d52e61c8083b56f" translate="yes" xml:space="preserve">
          <source>Support for colors 16 through 256 (the &lt;code&gt;ansi&lt;/code&gt;, &lt;code&gt;rgb&lt;/code&gt;, and &lt;code&gt;grey&lt;/code&gt; colors), the &lt;code&gt;:constants256&lt;/code&gt; import tag, the coloralias() function, and support for the ANSI_COLORS_ALIASES environment variable were added in Term::ANSIColor 4.00, included in Perl 5.17.8.</source>
          <target state="translated">色16から256（ &lt;code&gt;ansi&lt;/code&gt; 、 &lt;code&gt;rgb&lt;/code&gt; 、および &lt;code&gt;grey&lt;/code&gt; ）のサポート、 &lt;code&gt;:constants256&lt;/code&gt; インポートタグ、coloralias（）関数、およびANSI_COLORS_ALIASES環境変数のサポートがTerm :: ANSIColor 4.00に追加され、Perl5.17に含まれています。 8.8。</target>
        </trans-unit>
        <trans-unit id="c9d79655477c957d3ded48d250eed51bd3ecf8ff" translate="yes" xml:space="preserve">
          <source>Support for colors 8 through 15 (the &lt;code&gt;bright_&lt;/code&gt; variants) was added in Term::ANSIColor 3.00, included in Perl 5.13.3.</source>
          <target state="translated">色 &lt;code&gt;bright_&lt;/code&gt; （bright_バリアント）のサポートは、Perl 5.13.3に含まれるTerm :: ANSIColor 3.00に追加されました。</target>
        </trans-unit>
        <trans-unit id="3520e7db85802558bb1d2a5a7277d73d6dd7678b" translate="yes" xml:space="preserve">
          <source>Support for concurrent interpreters and the fork() emulation was implemented by ActiveState, with funding from Microsoft Corporation.</source>
          <target state="translated">並行インタプリタのサポートと fork()エミュレーションは、Microsoft Corporation からの資金提供を受けて ActiveState によって実装されました。</target>
        </trans-unit>
        <trans-unit id="46d9a08c8fe0a5fa65df6f50206b3d6f86276cea" translate="yes" xml:space="preserve">
          <source>Support for dark was added in Term::ANSIColor 1.08, included in Perl 5.8.4.</source>
          <target state="translated">Perl 5.8.4に含まれるTerm::ANSIColor 1.08でダークのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="13c3f3679453dc21cf99ba9668b08821dc7c3536" translate="yes" xml:space="preserve">
          <source>Support for external gzip added by Jarkko Hietaniemi &amp;lt;</source>
          <target state="translated">Jarkko Hietaniemiによって追加された外部gzipのサポート&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c1d15c06235a8f38ea6479c09486fef84b83b91c" translate="yes" xml:space="preserve">
          <source>Support for fork() emulation was added in 5.6 (ActiveState Tool Corp).</source>
          <target state="translated">5.6 (ActiveState Tool Corp)で fork()エミュレーションのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="4da419edd1ac30a4a7b7cbe60b1ff8e03675397f" translate="yes" xml:space="preserve">
          <source>Support for globally overriding glob() (GSAR 3-JUN-98)</source>
          <target state="translated">グローバルにオーバーライドされるglob()のサポート (GSAR 3-JUN-98)</target>
        </trans-unit>
        <trans-unit id="52d4e9ac29525e6d8e33903392c09e0782a71a40" translate="yes" xml:space="preserve">
          <source>Support for italic was added in Term::ANSIColor 3.02, included in Perl 5.17.1.</source>
          <target state="translated">Perl 5.17.1に含まれるTerm::ANSIColor 3.02でイタリックのサポートが追加されました。</target>
        </trans-unit>
        <trans-unit id="5e61014798c019e10930e4b0e0ccb8e127ac816a" translate="yes" xml:space="preserve">
          <source>Support for output other than TAP.</source>
          <target state="translated">TAP以外の出力にも対応。</target>
        </trans-unit>
        <trans-unit id="0fee3b6033badb5f9d6b2ad7b4bd90ed22c35a68" translate="yes" xml:space="preserve">
          <source>Support for swapping real and effective user and group IDs is incomplete. On WinNT Cygwin provides &lt;code&gt;setuid()&lt;/code&gt; , &lt;code&gt;seteuid()&lt;/code&gt; , &lt;code&gt;setgid()&lt;/code&gt; and &lt;code&gt;setegid()&lt;/code&gt; . However, additional Cygwin calls for manipulating WinNT access tokens and security contexts are required.</source>
          <target state="translated">実際の有効なユーザーIDとグループIDの交換のサポートは不完全です。WinNTでは、Cygwinは &lt;code&gt;setuid()&lt;/code&gt; 、 &lt;code&gt;seteuid()&lt;/code&gt; 、 &lt;code&gt;setgid()&lt;/code&gt; および &lt;code&gt;setegid()&lt;/code&gt; を提供します。ただし、WinNTアクセストークンとセキュリティコンテキストを操作するための追加のCygwin呼び出しが必要です。</target>
        </trans-unit>
        <trans-unit id="5bb747be5ba781647f7ee9e1b01af00ae6891e82" translate="yes" xml:space="preserve">
          <source>Support for swapping real and effective user and group IDs is incomplete. On WinNT Cygwin provides &lt;code&gt;setuid()&lt;/code&gt;, &lt;code&gt;seteuid()&lt;/code&gt;, &lt;code&gt;setgid()&lt;/code&gt; and &lt;code&gt;setegid()&lt;/code&gt;. However, additional Cygwin calls for manipulating WinNT access tokens and security contexts are required.</source>
          <target state="translated">実際の有効なユーザーIDとグループIDの交換のサポートは不完全です。WinNTでは、Cygwinは &lt;code&gt;setuid()&lt;/code&gt; 、 &lt;code&gt;seteuid()&lt;/code&gt; 、 &lt;code&gt;setgid()&lt;/code&gt; 、および &lt;code&gt;setegid()&lt;/code&gt; を提供します。ただし、WinNTアクセストークンとセキュリティコンテキストを操作するための追加のCygwin呼び出しが必要です。</target>
        </trans-unit>
        <trans-unit id="112d45f23a800f84de37770824448a89f7d793b8" translate="yes" xml:space="preserve">
          <source>Support for this module is provided via the datetime@perl.org email list. See &lt;a href=&quot;http://lists.perl.org/&quot;&gt;http://lists.perl.org/&lt;/a&gt; for more details.</source>
          <target state="translated">このモジュールのサポートは、datetime @ perl.orgメーリングリストを介して提供されます。詳細については、&lt;a href=&quot;http://lists.perl.org/&quot;&gt;http：//lists.perl.org/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5dad507bd8d5ed70d50a2dce7e70ae220730928" translate="yes" xml:space="preserve">
          <source>Support for threading/forking.</source>
          <target state="translated">ねじ切り・フォークに対応しています。</target>
        </trans-unit>
        <trans-unit id="75b47c288b94e063b5e848ebb4c141831f2f842b" translate="yes" xml:space="preserve">
          <source>Support for threads extends beyond the code in this module (i.e.,</source>
          <target state="translated">スレッドのサポートは、このモジュールのコードを超えて拡張されています。</target>
        </trans-unit>
        <trans-unit id="21dd6f486b02b193ff80841db50fc3fa27133663" translate="yes" xml:space="preserve">
          <source>Support for true color (the &lt;code&gt;rNNNgNNNbNNN&lt;/code&gt; and &lt;code&gt;on_rNNNgNNNbNNN&lt;/code&gt; attributes), defining aliases in terms of other aliases, and aliases mapping to multiple attributes instead of only a single attribute was added in Term::ANSIColor 5.00.</source>
          <target state="translated">トゥルーカラー（ &lt;code&gt;rNNNgNNNbNNN&lt;/code&gt; および &lt;code&gt;on_rNNNgNNNbNNN&lt;/code&gt; 属性）のサポート、他のエイリアスに関するエイリアスの定義、および単一の属性だけでなく複数の属性へのエイリアスのマッピングがTerm :: ANSIColor5.00に追加されました。</target>
        </trans-unit>
        <trans-unit id="4ebd54c9803d67645a6bec6e8a530fc77962d822" translate="yes" xml:space="preserve">
          <source>Supported Colors</source>
          <target state="translated">サポートされた色</target>
        </trans-unit>
        <trans-unit id="a65b7f12a991185f44b505808bc867e90d749e20" translate="yes" xml:space="preserve">
          <source>Supported Compilers</source>
          <target state="translated">サポートされているコンパイラ</target>
        </trans-unit>
        <trans-unit id="e86357f3df6067cf4701809cd469c16322e01a41" translate="yes" xml:space="preserve">
          <source>Supported Encodings</source>
          <target state="translated">サポートされているエンコーディング</target>
        </trans-unit>
        <trans-unit id="c494dc50dd3ab8063517ff409c4657b627cea738" translate="yes" xml:space="preserve">
          <source>Supported Perl API, sorted by version</source>
          <target state="translated">サポートされているPerl APIのバージョン順</target>
        </trans-unit>
        <trans-unit id="1a182e900ad0b28f084dbe30c2f1ab8dc81f123a" translate="yes" xml:space="preserve">
          <source>Supported Platforms</source>
          <target state="translated">対応プラットフォーム</target>
        </trans-unit>
        <trans-unit id="49b953a7424bb44dd08394b0aeda11553bb12089" translate="yes" xml:space="preserve">
          <source>Supported Platforms (Perl 5.8)</source>
          <target state="translated">サポートされているプラットフォーム (Perl 5.8)</target>
        </trans-unit>
        <trans-unit id="b1429d26115432e6f40c246dd70a7c60030a0632" translate="yes" xml:space="preserve">
          <source>Supported are: &lt;code&gt;build_requires_install_policy&lt;/code&gt; , &lt;code&gt;check_sigs&lt;/code&gt; , &lt;code&gt;make&lt;/code&gt; , &lt;code&gt;make_install_make_command&lt;/code&gt; , &lt;code&gt;prefer_installer&lt;/code&gt; , &lt;code&gt;test_report&lt;/code&gt; . Please report as a bug when you need another one supported.</source>
          <target state="translated">サポートされているのは、 &lt;code&gt;build_requires_install_policy&lt;/code&gt; 、 &lt;code&gt;check_sigs&lt;/code&gt; 、 &lt;code&gt;make&lt;/code&gt; 、 &lt;code&gt;make_install_make_command&lt;/code&gt; 、 &lt;code&gt;prefer_installer&lt;/code&gt; 、 &lt;code&gt;test_report&lt;/code&gt; です。サポートされている別のものが必要な場合は、バグとして報告してください。</target>
        </trans-unit>
        <trans-unit id="a300efed490ba967b52cf87f5ed3078c87e2e5f8" translate="yes" xml:space="preserve">
          <source>Supported arguments are the same as for &lt;code&gt;tempfile&lt;/code&gt;: UNLINK (defaulting to true), DIR, EXLOCK and SUFFIX. Additionally, the filename template is specified using the TEMPLATE option. The OPEN option is not supported (the file is always opened).</source>
          <target state="translated">サポートされている引数は、 &lt;code&gt;tempfile&lt;/code&gt; の場合と同じです：UNLINK（デフォルトはtrue）、DIR、EXLOCK、およびSUFFIX。さらに、ファイル名テンプレートは、TEMPLATEオプションを使用して指定されます。OPENオプションはサポートされていません（ファイルは常に開かれています）。</target>
        </trans-unit>
        <trans-unit id="fef4367afdb333ca61c98475adcf339702a0de4a" translate="yes" xml:space="preserve">
          <source>Supported arguments are the same as for C</source>
          <target state="translated">サポートされる引数は C</target>
        </trans-unit>
        <trans-unit id="fea58cf8a3651927bfad6193b75319d8c2af260d" translate="yes" xml:space="preserve">
          <source>Supported operators include &amp;lt; (less than), &amp;lt;= (less than or equal), &amp;gt; (greater than), &amp;gt;= (greater than or equal), == (equal), and != (not equal).</source>
          <target state="translated">サポートされている演算子には、&amp;lt;（より小さい）、&amp;lt;=（以下）、&amp;gt;（より大きい）、&amp;gt; =（以上）、==（等しい）、および！=（等しくない）が含まれます。</target>
        </trans-unit>
        <trans-unit id="0aee30f240e3b0641c58b8ea19a5ce4e73c13514" translate="yes" xml:space="preserve">
          <source>Supported versions of Perl</source>
          <target state="translated">サポートされているPerlのバージョン</target>
        </trans-unit>
        <trans-unit id="16d6bd14e545e871010e04ca5850bc1f495fe10f" translate="yes" xml:space="preserve">
          <source>Supporting CLICOLOR</source>
          <target state="translated">クリカラーをサポート</target>
        </trans-unit>
        <trans-unit id="cbc8693c1249e9f6a0e8cf33a70dea32c26fa53d" translate="yes" xml:space="preserve">
          <source>Supports the same options as the &lt;code&gt;tempdir&lt;/code&gt; function. Note that directories created with this method default to CLEANUP =&amp;gt; 1.</source>
          <target state="translated">&lt;code&gt;tempdir&lt;/code&gt; 関数と同じオプションをサポートします。このメソッドで作成されたディレクトリは、デフォルトでCLEANUP =&amp;gt; 1であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4ab85bed1d3b1a215699ee5c1c8be8f331ffab56" translate="yes" xml:space="preserve">
          <source>Supports the same options as the C</source>
          <target state="translated">と同じオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="68a10bfa60258c2bbfe38e9f1a7ff60f4694f8f6" translate="yes" xml:space="preserve">
          <source>Suppose instead, that if no matching &quot;/endpara&quot; tag is found, the &quot;/para&quot; tag refers only to the immediately following paragraph:</source>
          <target state="translated">代わりに、一致する&quot;/endpara &quot;タグが見つからない場合、&quot;/para &quot;タグはその直後の段落のみを参照しているとします。</target>
        </trans-unit>
        <trans-unit id="4a2e98ea3f847f379e1d62458409b455691002c8" translate="yes" xml:space="preserve">
          <source>Suppose that for some strange reason we need a wrapper around the standard C library function &lt;code&gt;fputs()&lt;/code&gt; . This is all we need:</source>
          <target state="translated">奇妙な理由で、標準Cライブラリ関数 &lt;code&gt;fputs()&lt;/code&gt; のラッパーが必要だとします。これだけで十分です。</target>
        </trans-unit>
        <trans-unit id="cc6556ba8db25d3e88bccf33270c985ae50ea100" translate="yes" xml:space="preserve">
          <source>Suppose that for some strange reason we need a wrapper around the standard C library function &lt;code&gt;fputs()&lt;/code&gt;. This is all we need:</source>
          <target state="translated">なんらかの奇妙な理由で、標準Cライブラリ関数 &lt;code&gt;fputs()&lt;/code&gt; のラッパーが必要だとします。必要なのはこれだけです。</target>
        </trans-unit>
        <trans-unit id="e9713a66e131c3277390fd2e0a638134463da779" translate="yes" xml:space="preserve">
          <source>Suppose that in the previous example functions pointers for multiply(), divide(), add(), subtract() are kept in a global C array &lt;code&gt;fp[]&lt;/code&gt; with offsets being &lt;code&gt;multiply_off&lt;/code&gt; , &lt;code&gt;divide_off&lt;/code&gt; , &lt;code&gt;add_off&lt;/code&gt; , &lt;code&gt;subtract_off&lt;/code&gt; . Then one can use</source>
          <target state="translated">前の例では、multiply（）、divide（）、add（）、subtract（）の関数ポインターが、オフセットが &lt;code&gt;multiply_off&lt;/code&gt; 、 &lt;code&gt;divide_off&lt;/code&gt; 、 &lt;code&gt;add_off&lt;/code&gt; 、 &lt;code&gt;subtract_off&lt;/code&gt; のグローバルC配列 &lt;code&gt;fp[]&lt;/code&gt; 保持されていると仮定します。その後、使用できます</target>
        </trans-unit>
        <trans-unit id="ea8ab19bf86289ef6108d40f927555e5f4e3c590" translate="yes" xml:space="preserve">
          <source>Suppose that in the previous example functions pointers for multiply(), divide(), add(), subtract() are kept in a global C array &lt;code&gt;fp[]&lt;/code&gt; with offsets being &lt;code&gt;multiply_off&lt;/code&gt;, &lt;code&gt;divide_off&lt;/code&gt;, &lt;code&gt;add_off&lt;/code&gt;, &lt;code&gt;subtract_off&lt;/code&gt;. Then one can use</source>
          <target state="translated">前の例の関数では、multiply（）、divide（）、add（）、subtract（）の &lt;code&gt;divide_off&lt;/code&gt; 、 &lt;code&gt;multiply_off&lt;/code&gt; 、divide_off、 &lt;code&gt;add_off&lt;/code&gt; 、 &lt;code&gt;subtract_off&lt;/code&gt; のオフセットを持つグローバルC配列 &lt;code&gt;fp[]&lt;/code&gt; 保持されているとします。その後、使用することができます</target>
        </trans-unit>
        <trans-unit id="f6b728cf8454bb8ebd395d51ef450a37f61ee3df" translate="yes" xml:space="preserve">
          <source>Suppose that we want to enable a new RE escape-sequence &lt;code&gt;\Y|&lt;/code&gt; which matches at a boundary between whitespace characters and non-whitespace characters. Note that &lt;code&gt;(?=\S)(?&amp;lt;!\S)|(?!\S)(?&amp;lt;=\S)&lt;/code&gt; matches exactly at these positions, so we want to have each &lt;code&gt;\Y|&lt;/code&gt; in the place of the more complicated version. We can create a module &lt;code&gt;customre&lt;/code&gt; to do this:</source>
          <target state="translated">新しいREエスケープシーケンス &lt;code&gt;\Y|&lt;/code&gt; を有効にするとします。空白文字と非空白文字の境界で一致します。注意 &lt;code&gt;(?=\S)(?&amp;lt;!\S)|(?!\S)(?&amp;lt;=\S)&lt;/code&gt; 私たちは、それぞれ持っていると思いますので、これらの位置に正確に一致する &lt;code&gt;\Y|&lt;/code&gt; より複雑なバージョンの代わりに。これを行うためのモジュール &lt;code&gt;customre&lt;/code&gt; を作成できます。</target>
        </trans-unit>
        <trans-unit id="5ab2eaff078de5c28b462a36a77339cffbb8f320" translate="yes" xml:space="preserve">
          <source>Suppose that you have some C files implementing some functionality, and the corresponding header files. How to create an extension which makes this functionality accessible in Perl? The example below assumes that the header files are</source>
          <target state="translated">ある機能を実装したいくつかの C ファイルと、それに対応するヘッダファイルがあるとします。この機能をPerlでアクセスできるようにする拡張機能はどのようにして作成するのでしょうか?以下の例では、ヘッダファイルが</target>
        </trans-unit>
        <trans-unit id="0a98ed263af8d4ba63e18dadba6d2dc4eec20053" translate="yes" xml:space="preserve">
          <source>Suppose we wrote the following string to a file:</source>
          <target state="translated">以下のような文字列をファイルに書いたとします。</target>
        </trans-unit>
        <trans-unit id="e38ce69c0f981610bad14796ceb31eadf517ce86" translate="yes" xml:space="preserve">
          <source>Suppose you want to create an object which is accessible as both an array reference and a hash reference.</source>
          <target state="translated">配列参照とハッシュ参照の両方でアクセスできるオブジェクトを作成したいとします。</target>
        </trans-unit>
        <trans-unit id="abacd026fc80e9051241fe69f59c13539803bbd4" translate="yes" xml:space="preserve">
          <source>Suppose you want to match all of consecutive pairs of digits in a string like &quot;1122a44&quot; and stop matching when you encounter non-digits. You want to match &lt;code&gt;11&lt;/code&gt; and &lt;code&gt;22&lt;/code&gt; but the letter &amp;lt;a&amp;gt; shows up between &lt;code&gt;22&lt;/code&gt; and &lt;code&gt;44&lt;/code&gt; and you want to stop at &lt;code&gt;a&lt;/code&gt; . Simply matching pairs of digits skips over the &lt;code&gt;a&lt;/code&gt; and still matches &lt;code&gt;44&lt;/code&gt; .</source>
          <target state="translated">「1122a44」のような文字列内の連続する数字のペアすべてを照合し、数字以外の文字が見つかった場合は照合を停止するとします。あなたはマッチさせたい &lt;code&gt;11&lt;/code&gt; と &lt;code&gt;22&lt;/code&gt; の間ではなく、文字の&amp;lt;a&amp;gt;ショーを &lt;code&gt;22&lt;/code&gt; と &lt;code&gt;44&lt;/code&gt; 、あなたはで停止します。単に数字のペアを一致さ &lt;code&gt;a&lt;/code&gt; と、aはスキップされ、依然として &lt;code&gt;44&lt;/code&gt; と一致します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43b6b33a52cb0c2ab7e4d2d5a81bdf49073103dc" translate="yes" xml:space="preserve">
          <source>Suppose you want to match all of consecutive pairs of digits in a string like &quot;1122a44&quot; and stop matching when you encounter non-digits. You want to match &lt;code&gt;11&lt;/code&gt; and &lt;code&gt;22&lt;/code&gt; but the letter &lt;code&gt;a&lt;/code&gt; shows up between &lt;code&gt;22&lt;/code&gt; and &lt;code&gt;44&lt;/code&gt; and you want to stop at &lt;code&gt;a&lt;/code&gt;. Simply matching pairs of digits skips over the &lt;code&gt;a&lt;/code&gt; and still matches &lt;code&gt;44&lt;/code&gt;.</source>
          <target state="translated">「1122a44」のような文字列内の連続する数字のペアをすべて一致させ、数字以外の数字が見つかったときに一致を停止するとします。 &lt;code&gt;11&lt;/code&gt; と &lt;code&gt;22&lt;/code&gt; を一致させたいが、文字 &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;22&lt;/code&gt; と &lt;code&gt;44&lt;/code&gt; の間に表示され &lt;code&gt;a&lt;/code&gt; 停止したい。数字のペアを単に一致さ &lt;code&gt;a&lt;/code&gt; と、aがスキップされ、 &lt;code&gt;44&lt;/code&gt; と一致します。</target>
        </trans-unit>
        <trans-unit id="4bc722b9b16484d706d6ab120abc391e667f22c8" translate="yes" xml:space="preserve">
          <source>Suppose you wanted &lt;code&gt;ARGUMENTS&lt;/code&gt; to be an empty list,</source>
          <target state="translated">&lt;code&gt;ARGUMENTS&lt;/code&gt; を空のリストにしたい場合、</target>
        </trans-unit>
        <trans-unit id="99f46adab557fd8dab8b4b0b09a159b2654c69a5" translate="yes" xml:space="preserve">
          <source>Suppose you wanted to match only the allocated characters, not the raw block ranges: in other words, you want to remove the unassigned characters:</source>
          <target state="translated">生のブロック範囲ではなく、割り当てられた文字だけをマッチさせたいとします。</target>
        </trans-unit>
        <trans-unit id="7282725934a73028b4873e419044ca1541b7ef81" translate="yes" xml:space="preserve">
          <source>Suppose your function looks like this:</source>
          <target state="translated">あなたの関数が次のようなものだとしましょう。</target>
        </trans-unit>
        <trans-unit id="3cdc33b87c0a24861f5653d7a4749ecf4d10599b" translate="yes" xml:space="preserve">
          <source>Suppress statically defined functions from the profile.</source>
          <target state="translated">プロファイルから静的に定義された関数を抑制します。</target>
        </trans-unit>
        <trans-unit id="f000eea4b15966462d081470a0dbb8675e040042" translate="yes" xml:space="preserve">
          <source>Suppress the verbose descriptions in the profile.</source>
          <target state="translated">プロファイルの冗長な記述を抑制します。</target>
        </trans-unit>
        <trans-unit id="b1d411f9454876226deea65132d8958b5f310ebd" translate="yes" xml:space="preserve">
          <source>Suppresses echoing of input data on the screen as it is entered on the keyboard.</source>
          <target state="translated">キーボードで入力されたデータが画面に反響しないようにします。</target>
        </trans-unit>
        <trans-unit id="fe4ca7a4b62d0d93f13a11c00e6e1ef2ac15f93d" translate="yes" xml:space="preserve">
          <source>Suppressing Lines Where All Fields Are Void</source>
          <target state="translated">すべてのフィールドが無効な線の抑制</target>
        </trans-unit>
        <trans-unit id="f8a4d33a75006d37aaaa326a12ea28f45b06e609" translate="yes" xml:space="preserve">
          <source>Suppressing all output.</source>
          <target state="translated">すべての出力を抑制します。</target>
        </trans-unit>
        <trans-unit id="4db0aec339465e45f71592f3d61d3b7d5519b564" translate="yes" xml:space="preserve">
          <source>Suppressing everything but the tests summary.</source>
          <target state="translated">テストの概要以外はすべて抑制する。</target>
        </trans-unit>
        <trans-unit id="3118002fe0231bc240b745efda50a51f4811af55" translate="yes" xml:space="preserve">
          <source>Suppressing some test output (mostly failures while tests are running).</source>
          <target state="translated">いくつかのテスト出力を抑制する(テスト実行中はほとんどが失敗)。</target>
        </trans-unit>
        <trans-unit id="2f0421f55fddacae44a5e70879884253681983a3" translate="yes" xml:space="preserve">
          <source>Surprisingly, &lt;code&gt;decode&lt;/code&gt; will ignore these flags and so treat all input values as governed by the &lt;code&gt;utf8&lt;/code&gt; flag. If it is disabled, this allows you to decode ISO-8859-1- and ASCII-encoded strings, as both strict subsets of Unicode. If it is enabled, you can correctly decode UTF-8 encoded strings.</source>
          <target state="translated">驚いたことに、 &lt;code&gt;decode&lt;/code&gt; はこれらのフラグを無視するため、すべての入力値を &lt;code&gt;utf8&lt;/code&gt; フラグによって制御されるものとして扱います。無効にすると、ISO-8859-1およびASCIIでエンコードされた文字列を両方ともUnicodeの厳密なサブセットとしてデコードできます。有効にすると、UTF-8でエンコードされた文字列を正しくデコードできます。</target>
        </trans-unit>
        <trans-unit id="aaf2f474284f3bb3469459a5f2e282c817445e0a" translate="yes" xml:space="preserve">
          <source>Surprisingly, the following dangerous-looking construct will actually work out fine:</source>
          <target state="translated">意外にも、以下のような危険な見た目の構築物でも、実際にはうまくいきます。</target>
        </trans-unit>
        <trans-unit id="89de18d6062f8f62c80480423d64e1771fc8ce04" translate="yes" xml:space="preserve">
          <source>Surprisingly, the routines to be called are named &lt;code&gt;freeze&lt;/code&gt; and &lt;code&gt;thaw&lt;/code&gt; . If you wish to send out the frozen scalar to another machine, use &lt;code&gt;nfreeze&lt;/code&gt; instead to get a portable image.</source>
          <target state="translated">驚いたことに、呼び出されるルーチンは、 &lt;code&gt;freeze&lt;/code&gt; と &lt;code&gt;thaw&lt;/code&gt; という名前です。フリーズしたスカラーを別のマシンに送信したい場合は、代わりに &lt;code&gt;nfreeze&lt;/code&gt; を使用してポータブルイメージを取得します。</target>
        </trans-unit>
        <trans-unit id="38b1f8d5199fc680c670a3cdffbc331409087673" translate="yes" xml:space="preserve">
          <source>Surprisingly, the routines to be called are named &lt;code&gt;freeze&lt;/code&gt; and &lt;code&gt;thaw&lt;/code&gt;. If you wish to send out the frozen scalar to another machine, use &lt;code&gt;nfreeze&lt;/code&gt; instead to get a portable image.</source>
          <target state="translated">驚くべきことに、呼び出されるルーチンの名前は &lt;code&gt;freeze&lt;/code&gt; と &lt;code&gt;thaw&lt;/code&gt; 。フリーズしたスカラーを別のマシンに送信する場合は、代わりに &lt;code&gt;nfreeze&lt;/code&gt; を使用してポータブルイメージを取得します。</target>
        </trans-unit>
        <trans-unit id="c6a047875b873f6d1d398e86dbb7108d34705540" translate="yes" xml:space="preserve">
          <source>Surrogate Pairs</source>
          <target state="translated">サロゲートペア</target>
        </trans-unit>
        <trans-unit id="07a0eab00168ce9bedc809f5ad8c9eb56cbd1edb" translate="yes" xml:space="preserve">
          <source>Surrogate pairs were born when the Unicode Consortium finally admitted that 16 bits were not big enough to hold all the world's character repertoires. But they already made UCS-2 16-bit. What do we do?</source>
          <target state="translated">サロゲートペアが誕生したのは、ユニコードコンソーシアムが最終的に16ビットでは世界のすべての文字レパートリーを保持するには十分な大きさではないと認めたときでした。しかし、彼らはすでにUCS-2を16ビットにしていた。私たちは何をすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="1eaaa69a37b20a485ea6f0e51d7a77d119e19f29" translate="yes" xml:space="preserve">
          <source>Surrogates are code points set aside to encode the &lt;code&gt;U+10000..U+10FFFF&lt;/code&gt; range of Unicode code points in pairs of 16-bit units. The</source>
          <target state="translated">サロゲートは、16ビット単位のペアでUnicodeコードポイントの &lt;code&gt;U+10000..U+10FFFF&lt;/code&gt; 範囲をエンコードするために確保されたコードポイントです。の</target>
        </trans-unit>
        <trans-unit id="856dbe523b5bc18c3ac9b4ef67ed5a73d664d082" translate="yes" xml:space="preserve">
          <source>Surrogates have no meaning in Unicode outside their use in pairs to represent other code points. However, Perl allows them to be represented individually internally, for example by saying &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0xD801)&lt;/a&gt;&lt;/code&gt;, so that all code points, not just those valid for open interchange, are representable. Unicode does define semantics for them, such as their &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&quot;Cs&quot;&lt;/code&gt; . But because their use is somewhat dangerous, Perl will warn (using the warning category &lt;code&gt;&quot;surrogate&quot;&lt;/code&gt; , which is a sub-category of &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; ) if an attempt is made to do things like take the lower case of one, or match case-insensitively, or to output them. (But don't try this on Perls before 5.14.)</source>
          <target state="translated">サロゲートは、他のコードポイントを表すためにペアで使用する以外、Unicodeでは意味がありません。ただし、Perlでは、たとえば &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0xD801)&lt;/a&gt;&lt;/code&gt; と言うことにより、それらを内部で個別に表現できるため、オープンインターチェンジで有効なものだけでなく、すべてのコードポイントを表現できます。 Unicodeは &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;General_Category&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&quot;Cs&quot;&lt;/code&gt; であるなど、それらのセマンティクスを定義します。しかし、それらの使用は多少危険であるため、Perlは、小文字を使用したり、大文字と小文字を区別したりしようとすると、警告を出します（警告カテゴリ &lt;code&gt;&quot;surrogate&quot;&lt;/code&gt; を使用します。これは &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; のサブカテゴリです）。 -insensitively、またはそれらを出力します。 （ただし、5.14より前のPerlでは試さないでください。）</target>
        </trans-unit>
        <trans-unit id="7e4f255eb9d4da0b778db2cbd0767cd7435fa252" translate="yes" xml:space="preserve">
          <source>Surrogates have no meaning in Unicode outside their use in pairs to represent other code points. However, Perl allows them to be represented individually internally, for example by saying &lt;code&gt;chr(0xD801)&lt;/code&gt;, so that all code points, not just those valid for open interchange, are representable. Unicode does define semantics for them, such as their &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;&quot;General_Category&quot;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&quot;Cs&quot;&lt;/code&gt;. But because their use is somewhat dangerous, Perl will warn (using the warning category &lt;code&gt;&quot;surrogate&quot;&lt;/code&gt;, which is a sub-category of &lt;code&gt;&quot;utf8&quot;&lt;/code&gt;) if an attempt is made to do things like take the lower case of one, or match case-insensitively, or to output them. (But don't try this on Perls before 5.14.)</source>
          <target state="translated">サロゲートは、他のコードポイントを表すためにペアで使用する以外、Unicodeでは意味がありません。ただし、Perlでは、たとえば &lt;code&gt;chr(0xD801)&lt;/code&gt; と言うことで、それらを内部で個別に表すことができるため、オープンインターチェンジに有効なコードポイントだけでなく、すべてのコードポイントを表すことができます。 Unicodeは、 &lt;code&gt;&lt;a href=&quot;#General_Category&quot;&gt;&quot;General_Category&quot;&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&quot;Cs&quot;&lt;/code&gt; であるなど、それらのセマンティクスを定義します。しかし、それらの使用はやや危険であるため、Perlは、小文字を使用したり、大文字と小文字を区別したりするようなことを行おうとすると、警告を表示します（ &lt;code&gt;&quot;utf8&quot;&lt;/code&gt; サブカテゴリである警告カテゴリ &lt;code&gt;&quot;surrogate&quot;&lt;/code&gt; を使用）。 -鈍感に、またはそれらを出力します。 （ただし、5.14より前のPerlではこれを試さないでください。）</target>
        </trans-unit>
        <trans-unit id="540da7a8cd172c1838160d487b9d7ef0924efc97" translate="yes" xml:space="preserve">
          <source>Suspicious Warnings on Cygwin</source>
          <target state="translated">Cygwinの不審な警告</target>
        </trans-unit>
        <trans-unit id="ade7a22fa4aa1143e2d2d4f40f65a94eb90d8572" translate="yes" xml:space="preserve">
          <source>SvAMAGIC_off</source>
          <target state="translated">SvAMAGIC_off</target>
        </trans-unit>
        <trans-unit id="9b9fa0e67675873845864411f1905f615bc33d13" translate="yes" xml:space="preserve">
          <source>SvAMAGIC_on</source>
          <target state="translated">SvAMAGIC_on</target>
        </trans-unit>
        <trans-unit id="2425fee0a45344518684d0c9b14dde2323fe9de7" translate="yes" xml:space="preserve">
          <source>SvCUR</source>
          <target state="translated">SvCUR</target>
        </trans-unit>
        <trans-unit id="6058a9ad780b864ec71080d419dca4d99c96b0e6" translate="yes" xml:space="preserve">
          <source>SvCUR_set</source>
          <target state="translated">SvCUR_set</target>
        </trans-unit>
        <trans-unit id="661476f7df6dbc01af035711108e0d1500868903" translate="yes" xml:space="preserve">
          <source>SvEND</source>
          <target state="translated">SvEND</target>
        </trans-unit>
        <trans-unit id="e59e241299dce8584448d13053a18ac8814b51ab" translate="yes" xml:space="preserve">
          <source>SvGAMAGIC</source>
          <target state="translated">SvGAMAGIC</target>
        </trans-unit>
        <trans-unit id="aebf3d2208b03126421cfebdd2654ea2db0a30f7" translate="yes" xml:space="preserve">
          <source>SvGETMAGIC</source>
          <target state="translated">SvGETMAGIC</target>
        </trans-unit>
        <trans-unit id="4ddf923c756d56139db1069ad97f7b8f40e70f94" translate="yes" xml:space="preserve">
          <source>SvGROW</source>
          <target state="translated">SvGROW</target>
        </trans-unit>
        <trans-unit id="abfa953c1fed37e05526c0219c09e917f51bbd9e" translate="yes" xml:space="preserve">
          <source>SvIOK</source>
          <target state="translated">SvIOK</target>
        </trans-unit>
        <trans-unit id="c0e62457bc773af183a3e1d8cda75a5f3adbaf1c" translate="yes" xml:space="preserve">
          <source>SvIOK_UV</source>
          <target state="translated">SvIOK_UV</target>
        </trans-unit>
        <trans-unit id="cfbeae889fea001d8bb1a161c1f0da0c7af2b5f7" translate="yes" xml:space="preserve">
          <source>SvIOK_notUV</source>
          <target state="translated">SvIOK_notUV</target>
        </trans-unit>
        <trans-unit id="8f0272bd6fc26a005d760d2fea687329b0e4a68c" translate="yes" xml:space="preserve">
          <source>SvIOK_off</source>
          <target state="translated">SvIOK_off</target>
        </trans-unit>
        <trans-unit id="34a30cb8e77826bc36fe6388f6c8eb39936d73d8" translate="yes" xml:space="preserve">
          <source>SvIOK_on</source>
          <target state="translated">SvIOK_on</target>
        </trans-unit>
        <trans-unit id="eed3c603a946c2dcc8e9ac46fa3cd88ac634ee17" translate="yes" xml:space="preserve">
          <source>SvIOK_only</source>
          <target state="translated">SvIOK_only</target>
        </trans-unit>
        <trans-unit id="13e3f4df7cd8f72b57259101aa3948f2204a9335" translate="yes" xml:space="preserve">
          <source>SvIOK_only_UV</source>
          <target state="translated">SvIOK_only_UV</target>
        </trans-unit>
        <trans-unit id="45a18c6bb3b31a95939140770d9eaf87b85c8af4" translate="yes" xml:space="preserve">
          <source>SvIOKp</source>
          <target state="translated">SvIOKp</target>
        </trans-unit>
        <trans-unit id="e58c0b91b4f10ba7ea023ead483916f688590254" translate="yes" xml:space="preserve">
          <source>SvIV</source>
          <target state="translated">SvIV</target>
        </trans-unit>
        <trans-unit id="1e1cd0c78512c809bc8f82ce5a88755a660fc1dd" translate="yes" xml:space="preserve">
          <source>SvIV()</source>
          <target state="translated">SvIV()</target>
        </trans-unit>
        <trans-unit id="e3f836b31a83cc11f5f8cc34d3ffa47690b79351" translate="yes" xml:space="preserve">
          <source>SvIVX</source>
          <target state="translated">SvIVX</target>
        </trans-unit>
        <trans-unit id="a7e83f79d851aa05c23e8e127c1c0104d7becb61" translate="yes" xml:space="preserve">
          <source>SvIV_nomg</source>
          <target state="translated">SvIV_nomg</target>
        </trans-unit>
        <trans-unit id="d54d9f546b2a3ee3896c8e62f21916b605c8749e" translate="yes" xml:space="preserve">
          <source>SvIV_set</source>
          <target state="translated">SvIV_set</target>
        </trans-unit>
        <trans-unit id="d0e6c181ed31a5825fe2aba5e86b6714622736fc" translate="yes" xml:space="preserve">
          <source>SvIVx</source>
          <target state="translated">SvIVx</target>
        </trans-unit>
        <trans-unit id="bfb611e82edc20e454e089941049df596bb71192" translate="yes" xml:space="preserve">
          <source>SvIsCOW</source>
          <target state="translated">SvIsCOW</target>
        </trans-unit>
        <trans-unit id="9aecfe6c9cbba3f5b8ffdf25297fd019b7b2eaf2" translate="yes" xml:space="preserve">
          <source>SvIsCOW_shared_hash</source>
          <target state="translated">SvIsCOW_shared_hash</target>
        </trans-unit>
        <trans-unit id="80a0475edeea5c18e06234c9d64a8fcc2e3f6c39" translate="yes" xml:space="preserve">
          <source>SvLEN</source>
          <target state="translated">SvLEN</target>
        </trans-unit>
        <trans-unit id="556d85f2a0063cc9ba584af5e853a1ceb2f6783d" translate="yes" xml:space="preserve">
          <source>SvLEN_set</source>
          <target state="translated">SvLEN_set</target>
        </trans-unit>
        <trans-unit id="97aec17efc79908cfbaf02941eae143d8b976a42" translate="yes" xml:space="preserve">
          <source>SvLOCK</source>
          <target state="translated">SvLOCK</target>
        </trans-unit>
        <trans-unit id="84cc200fa83f3f6ed106b0dd44cb7c16363e0435" translate="yes" xml:space="preserve">
          <source>SvMAGIC_set</source>
          <target state="translated">SvMAGIC_set</target>
        </trans-unit>
        <trans-unit id="d379abe0c8da0cf1e20d037eb2f8185f062b9489" translate="yes" xml:space="preserve">
          <source>SvNIOK</source>
          <target state="translated">SvNIOK</target>
        </trans-unit>
        <trans-unit id="fb4f99f52267211a93dc9edb5e96013ebf799d8e" translate="yes" xml:space="preserve">
          <source>SvNIOK_off</source>
          <target state="translated">SvNIOK_off</target>
        </trans-unit>
        <trans-unit id="defaa8b9a1718665f488a28ac6a6a046a710c0d6" translate="yes" xml:space="preserve">
          <source>SvNIOKp</source>
          <target state="translated">SvNIOKp</target>
        </trans-unit>
        <trans-unit id="ca25134015aee24be79876d35dd93a74df11c721" translate="yes" xml:space="preserve">
          <source>SvNOK</source>
          <target state="translated">SvNOK</target>
        </trans-unit>
        <trans-unit id="baaa77e5fd0bf7672f89eaeb72acc5efa6ff8b0c" translate="yes" xml:space="preserve">
          <source>SvNOK_off</source>
          <target state="translated">SvNOK_off</target>
        </trans-unit>
        <trans-unit id="dd1f88650a4a7b063453463c4580f0b16fabe2d4" translate="yes" xml:space="preserve">
          <source>SvNOK_on</source>
          <target state="translated">SvNOK_on</target>
        </trans-unit>
        <trans-unit id="1b8500076baeb528cecf476027ad962a134be104" translate="yes" xml:space="preserve">
          <source>SvNOK_only</source>
          <target state="translated">SvNOK_only</target>
        </trans-unit>
        <trans-unit id="df8a270b374b63fb7ad234036190cb6d9599dc79" translate="yes" xml:space="preserve">
          <source>SvNOKp</source>
          <target state="translated">SvNOKp</target>
        </trans-unit>
        <trans-unit id="17482a420e00ffd25f7122c8a4e97ab029e48c16" translate="yes" xml:space="preserve">
          <source>SvNV</source>
          <target state="translated">SvNV</target>
        </trans-unit>
        <trans-unit id="dbc4878fd112ac06a09fc11cde47bb125aee2c3f" translate="yes" xml:space="preserve">
          <source>SvNV()</source>
          <target state="translated">SvNV()</target>
        </trans-unit>
        <trans-unit id="f62717e28cc640cdf47f8dd6ee4c879eb42bea28" translate="yes" xml:space="preserve">
          <source>SvNVX</source>
          <target state="translated">SvNVX</target>
        </trans-unit>
        <trans-unit id="dd86bbe5ae725800fcf2d56c703e0a31d42e3a42" translate="yes" xml:space="preserve">
          <source>SvNV_nomg</source>
          <target state="translated">SvNV_nomg</target>
        </trans-unit>
        <trans-unit id="c026cc4a3dbd70507f3a01baf8b04c8414942781" translate="yes" xml:space="preserve">
          <source>SvNV_set</source>
          <target state="translated">SvNV_set</target>
        </trans-unit>
        <trans-unit id="6a541df7bd973627ec28ca14270b2c53a16dac8e" translate="yes" xml:space="preserve">
          <source>SvNVx</source>
          <target state="translated">SvNVx</target>
        </trans-unit>
        <trans-unit id="020d091cc2310c06e45f2bc3d53eba7c49731b6d" translate="yes" xml:space="preserve">
          <source>SvOK</source>
          <target state="translated">SvOK</target>
        </trans-unit>
        <trans-unit id="0580de03ad05ae223672bac31eca2ff976a459f8" translate="yes" xml:space="preserve">
          <source>SvOOK</source>
          <target state="translated">SvOOK</target>
        </trans-unit>
        <trans-unit id="4dde88ed106842ab159cd28a6c4d036172ee28c7" translate="yes" xml:space="preserve">
          <source>SvOOK_offset</source>
          <target state="translated">SvOOK_offset</target>
        </trans-unit>
        <trans-unit id="b4ad9d1f5c7f6646cd2710f7f7da0b899e3a96cb" translate="yes" xml:space="preserve">
          <source>SvPOK</source>
          <target state="translated">SvPOK</target>
        </trans-unit>
        <trans-unit id="5654f39dee44eae829fb8b496682a50f0982a5e7" translate="yes" xml:space="preserve">
          <source>SvPOK_off</source>
          <target state="translated">SvPOK_off</target>
        </trans-unit>
        <trans-unit id="3fc674f1095783934e3ac6f2709bc63b02d7430c" translate="yes" xml:space="preserve">
          <source>SvPOK_on</source>
          <target state="translated">SvPOK_on</target>
        </trans-unit>
        <trans-unit id="63cf7f854220f91309bc16c8b83e2c3a33c8ab02" translate="yes" xml:space="preserve">
          <source>SvPOK_only</source>
          <target state="translated">SvPOK_only</target>
        </trans-unit>
        <trans-unit id="6181decd9d199af54afc923b0ff0ebf390a6d7b4" translate="yes" xml:space="preserve">
          <source>SvPOK_only_UTF8</source>
          <target state="translated">SvPOK_only_UTF8</target>
        </trans-unit>
        <trans-unit id="1f6818d473538e1037ae99abfd3928b6194d55f4" translate="yes" xml:space="preserve">
          <source>SvPOKp</source>
          <target state="translated">SvPOKp</target>
        </trans-unit>
        <trans-unit id="7565784ec8ed0b2a10e7ce11934bff895f7866ad" translate="yes" xml:space="preserve">
          <source>SvPV</source>
          <target state="translated">SvPV</target>
        </trans-unit>
        <trans-unit id="935c09deb58ecb63d6891adc1aabec93c4c8a5b7" translate="yes" xml:space="preserve">
          <source>SvPV()</source>
          <target state="translated">SvPV()</target>
        </trans-unit>
        <trans-unit id="bf9de3c1167813342adaabc11e3c1b95d085aee2" translate="yes" xml:space="preserve">
          <source>SvPVCLEAR</source>
          <target state="translated">SvPVCLEAR</target>
        </trans-unit>
        <trans-unit id="441e4866b0c8dfdb41e2b081d770159832861536" translate="yes" xml:space="preserve">
          <source>SvPVX</source>
          <target state="translated">SvPVX</target>
        </trans-unit>
        <trans-unit id="bb779035a6b5212f5bc497064139d582eac78761" translate="yes" xml:space="preserve">
          <source>SvPV_force</source>
          <target state="translated">SvPV_force</target>
        </trans-unit>
        <trans-unit id="a371ca6a1e78ccac0de2a78800f60864935747e1" translate="yes" xml:space="preserve">
          <source>SvPV_force_nomg</source>
          <target state="translated">SvPV_force_nomg</target>
        </trans-unit>
        <trans-unit id="e460005b105a2b7bfd76b6a69fac89cf40b7f1d9" translate="yes" xml:space="preserve">
          <source>SvPV_nolen</source>
          <target state="translated">SvPV_nolen</target>
        </trans-unit>
        <trans-unit id="ee503ff4f441fd072927bc4adf1a3b2b61c96eb8" translate="yes" xml:space="preserve">
          <source>SvPV_nomg</source>
          <target state="translated">SvPV_nomg</target>
        </trans-unit>
        <trans-unit id="7dc0def922bcc926f6b2a0768c4dc6365edb9c39" translate="yes" xml:space="preserve">
          <source>SvPV_nomg_nolen</source>
          <target state="translated">SvPV_nomg_nolen</target>
        </trans-unit>
        <trans-unit id="b294767f00b4898e2955e33a91d5667698462a42" translate="yes" xml:space="preserve">
          <source>SvPV_set</source>
          <target state="translated">SvPV_set</target>
        </trans-unit>
        <trans-unit id="8dfe9329a5a7e9cb118b1baf10944b5ae534ec2e" translate="yes" xml:space="preserve">
          <source>SvPVbyte</source>
          <target state="translated">SvPVbyte</target>
        </trans-unit>
        <trans-unit id="a42257f4844c980ccf0e6066f8db9f6f15894819" translate="yes" xml:space="preserve">
          <source>SvPVbyte_force</source>
          <target state="translated">SvPVbyte_force</target>
        </trans-unit>
        <trans-unit id="37adc1f4cfd7a587db4e891abb49367190445337" translate="yes" xml:space="preserve">
          <source>SvPVbyte_nolen</source>
          <target state="translated">SvPVbyte_nolen</target>
        </trans-unit>
        <trans-unit id="7923345fa2b2955faca8c97835509b73e61c0f71" translate="yes" xml:space="preserve">
          <source>SvPVbyte_nomg</source>
          <target state="translated">SvPVbyte_nomg</target>
        </trans-unit>
        <trans-unit id="7dabdc96dfd70ff777704e95caf484a1bbd67626" translate="yes" xml:space="preserve">
          <source>SvPVbyte_or_null</source>
          <target state="translated">SvPVbyte_or_null</target>
        </trans-unit>
        <trans-unit id="6f473eaded3b18d22bd0cfbd398f1d3838819074" translate="yes" xml:space="preserve">
          <source>SvPVbyte_or_null_nomg</source>
          <target state="translated">SvPVbyte_or_null_nomg</target>
        </trans-unit>
        <trans-unit id="00286cef8b77db9493694652d7e00120622a74fd" translate="yes" xml:space="preserve">
          <source>SvPVbytex</source>
          <target state="translated">SvPVbytex</target>
        </trans-unit>
        <trans-unit id="fed8330e0b39b1ac7a27526d358e6d7bd6a90609" translate="yes" xml:space="preserve">
          <source>SvPVbytex_force</source>
          <target state="translated">SvPVbytex_force</target>
        </trans-unit>
        <trans-unit id="b302138ff008911538b45179c44f73ff2f15910d" translate="yes" xml:space="preserve">
          <source>SvPVutf8</source>
          <target state="translated">SvPVutf8</target>
        </trans-unit>
        <trans-unit id="a8de8e18c45d70ca0a2ee1f75e6737824757551e" translate="yes" xml:space="preserve">
          <source>SvPVutf8_force</source>
          <target state="translated">SvPVutf8_force</target>
        </trans-unit>
        <trans-unit id="34b12f7ac99c5d36b41f8c87cb93ef246cef0211" translate="yes" xml:space="preserve">
          <source>SvPVutf8_nolen</source>
          <target state="translated">SvPVutf8_nolen</target>
        </trans-unit>
        <trans-unit id="423ddab605b2202c3b3c7cf1a6aab74e87847180" translate="yes" xml:space="preserve">
          <source>SvPVutf8_nomg</source>
          <target state="translated">SvPVutf8_nomg</target>
        </trans-unit>
        <trans-unit id="4266cc27f9fcb29ce91587ace651e07d810d65b5" translate="yes" xml:space="preserve">
          <source>SvPVutf8_or_null</source>
          <target state="translated">SvPVutf8_or_null</target>
        </trans-unit>
        <trans-unit id="d92f3b72d1647089e88a44d2515cd6a801386b09" translate="yes" xml:space="preserve">
          <source>SvPVutf8_or_null_nomg</source>
          <target state="translated">SvPVutf8_or_null_nomg</target>
        </trans-unit>
        <trans-unit id="35823de756974d226740f00e5c68a6481e4ed0de" translate="yes" xml:space="preserve">
          <source>SvPVutf8x</source>
          <target state="translated">SvPVutf8x</target>
        </trans-unit>
        <trans-unit id="7def8a7e5746a1d922bd31c60d3cb8a70d51aa60" translate="yes" xml:space="preserve">
          <source>SvPVutf8x_force</source>
          <target state="translated">SvPVutf8x_force</target>
        </trans-unit>
        <trans-unit id="6b594f1f8b6cd1295001275a5c619bad5200c1fb" translate="yes" xml:space="preserve">
          <source>SvPVx</source>
          <target state="translated">SvPVx</target>
        </trans-unit>
        <trans-unit id="4fa947438e302d4c0cfa0fd091b866be1356e841" translate="yes" xml:space="preserve">
          <source>SvREADONLY</source>
          <target state="translated">SvREADONLY</target>
        </trans-unit>
        <trans-unit id="be79d366d9292bb9353ad47fa578f3ba4c51d644" translate="yes" xml:space="preserve">
          <source>SvREADONLY(THING, [, $value])</source>
          <target state="translated">SvREADONLY(THING,[,$value])</target>
        </trans-unit>
        <trans-unit id="a76ee936f6a9d9874c72ac97c2ae38c0ac457002" translate="yes" xml:space="preserve">
          <source>SvREADONLY_off</source>
          <target state="translated">SvREADONLY_off</target>
        </trans-unit>
        <trans-unit id="ebbbefde1cfff96f373b3af6c19695b6b47fe85c" translate="yes" xml:space="preserve">
          <source>SvREADONLY_on</source>
          <target state="translated">SvREADONLY_on</target>
        </trans-unit>
        <trans-unit id="41356e74473a3c2dd231981a54cbf8916dae6a6f" translate="yes" xml:space="preserve">
          <source>SvREFCNT</source>
          <target state="translated">SvREFCNT</target>
        </trans-unit>
        <trans-unit id="e21722a974d6353587902b5def5af30f86188580" translate="yes" xml:space="preserve">
          <source>SvREFCNT(THING [, $value])</source>
          <target state="translated">SvREFCNT(THING [,$value])</target>
        </trans-unit>
        <trans-unit id="4bbc1bf9563ab155051e035e471f156eba22dc15" translate="yes" xml:space="preserve">
          <source>SvREFCNT_dec</source>
          <target state="translated">SvREFCNT_dec</target>
        </trans-unit>
        <trans-unit id="6d3d7d60ea55b7e2400d8e3c957adb22ceec857f" translate="yes" xml:space="preserve">
          <source>SvREFCNT_dec_NN</source>
          <target state="translated">SvREFCNT_dec_NN</target>
        </trans-unit>
        <trans-unit id="d6d6cfefd8cf7744542e901404792f234eef8a87" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc</source>
          <target state="translated">SvREFCNT_inc</target>
        </trans-unit>
        <trans-unit id="b1c71741a55c44f3cf76f940293fd4e4067b6c8c" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_NN</source>
          <target state="translated">SvREFCNT_inc_NN</target>
        </trans-unit>
        <trans-unit id="6e813ab000508b7b24df3398011a2c9c250e9d3d" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_simple</source>
          <target state="translated">SvREFCNT_inc_simple</target>
        </trans-unit>
        <trans-unit id="67b0407bf6132cb27ed090533a37abfe3f7d17e7" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_simple_NN</source>
          <target state="translated">SvREFCNT_inc_simple_NN</target>
        </trans-unit>
        <trans-unit id="355f655fe4c86d54f671992d7a810ce7e8512bc2" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_simple_void</source>
          <target state="translated">SvREFCNT_inc_simple_void</target>
        </trans-unit>
        <trans-unit id="822614c7d4b2a58a9282398c20eb02c49458d68d" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_simple_void_NN</source>
          <target state="translated">SvREFCNT_inc_simple_void_NN</target>
        </trans-unit>
        <trans-unit id="c6f050b18183b6e90800a93ea7e82b46868d707f" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_void</source>
          <target state="translated">SvREFCNT_inc_void</target>
        </trans-unit>
        <trans-unit id="149f6e6626b6f4ebd70bdf3a3eb889b7ec93bdf3" translate="yes" xml:space="preserve">
          <source>SvREFCNT_inc_void_NN</source>
          <target state="translated">SvREFCNT_inc_void_NN</target>
        </trans-unit>
        <trans-unit id="3889ade1aec07364b71e18598417719a90402368" translate="yes" xml:space="preserve">
          <source>SvROK</source>
          <target state="translated">SvROK</target>
        </trans-unit>
        <trans-unit id="b4e270c3ae40052ec524acd38a350e379d3010aa" translate="yes" xml:space="preserve">
          <source>SvROK_off</source>
          <target state="translated">SvROK_off</target>
        </trans-unit>
        <trans-unit id="c7a1d36a4bff0e8c7571cf20c8d6a3df05ea6d45" translate="yes" xml:space="preserve">
          <source>SvROK_on</source>
          <target state="translated">SvROK_on</target>
        </trans-unit>
        <trans-unit id="3551ff814d3508fe0494321baf0b08462a5951a1" translate="yes" xml:space="preserve">
          <source>SvRV</source>
          <target state="translated">SvRV</target>
        </trans-unit>
        <trans-unit id="98657f4eb633c067b2f4bbd96111ec20385af83f" translate="yes" xml:space="preserve">
          <source>SvRV_set</source>
          <target state="translated">SvRV_set</target>
        </trans-unit>
        <trans-unit id="5231d45a15ed6a1e96e1c7adf65310a112ccdb14" translate="yes" xml:space="preserve">
          <source>SvRX</source>
          <target state="translated">SvRX</target>
        </trans-unit>
        <trans-unit id="8bf53e27da8805a20511f9e414f46c9a92c3fe7c" translate="yes" xml:space="preserve">
          <source>SvRXOK</source>
          <target state="translated">SvRXOK</target>
        </trans-unit>
        <trans-unit id="6ce588dbb5a26b48845042b1fed998c7094f41b9" translate="yes" xml:space="preserve">
          <source>SvSETMAGIC</source>
          <target state="translated">SvSETMAGIC</target>
        </trans-unit>
        <trans-unit id="03b9e565f8509ce2cdd182d158dca6b07c40361c" translate="yes" xml:space="preserve">
          <source>SvSHARE</source>
          <target state="translated">SvSHARE</target>
        </trans-unit>
        <trans-unit id="663202fcb6a07de7521aee49ad200856328f670e" translate="yes" xml:space="preserve">
          <source>SvSTASH</source>
          <target state="translated">SvSTASH</target>
        </trans-unit>
        <trans-unit id="1e4dda9ea59b23608fcebfdab0f78b8414975f4b" translate="yes" xml:space="preserve">
          <source>SvSTASH_set</source>
          <target state="translated">SvSTASH_set</target>
        </trans-unit>
        <trans-unit id="55f331b95bad8451772b832cb2896cd13d8a62bf" translate="yes" xml:space="preserve">
          <source>SvSetMagicSV</source>
          <target state="translated">SvSetMagicSV</target>
        </trans-unit>
        <trans-unit id="a2363fa9b8d5575fdee7b5f5137de002a0d7fbd7" translate="yes" xml:space="preserve">
          <source>SvSetMagicSV_nosteal</source>
          <target state="translated">SvSetMagicSV_nosteal</target>
        </trans-unit>
        <trans-unit id="a870c5f5f765c31be19cc225270f373bf2a19609" translate="yes" xml:space="preserve">
          <source>SvSetSV</source>
          <target state="translated">SvSetSV</target>
        </trans-unit>
        <trans-unit id="0a56b40c972eb03057e49afb45a5f79c3b3c850c" translate="yes" xml:space="preserve">
          <source>SvSetSV_nosteal</source>
          <target state="translated">SvSetSV_nosteal</target>
        </trans-unit>
        <trans-unit id="3757c6ffdf931a1f2a0babe56b6b7bcfa87d7dcd" translate="yes" xml:space="preserve">
          <source>SvTAINT</source>
          <target state="translated">SvTAINT</target>
        </trans-unit>
        <trans-unit id="b132d1a6ca07d23104de48a3a5b9b9e288757452" translate="yes" xml:space="preserve">
          <source>SvTAINTED</source>
          <target state="translated">SvTAINTED</target>
        </trans-unit>
        <trans-unit id="da48b96bbbd0a5ec83161761506d58ef29de8d6a" translate="yes" xml:space="preserve">
          <source>SvTAINTED_off</source>
          <target state="translated">SvTAINTED_off</target>
        </trans-unit>
        <trans-unit id="e468ae6914e87cdb2b57113711db192dcf342f4e" translate="yes" xml:space="preserve">
          <source>SvTAINTED_on</source>
          <target state="translated">SvTAINTED_on</target>
        </trans-unit>
        <trans-unit id="0daba26132d99fae2f657acc44a21ff8e035bd1a" translate="yes" xml:space="preserve">
          <source>SvTHINKFIRST</source>
          <target state="translated">SvTHINKFIRST</target>
        </trans-unit>
        <trans-unit id="d644182b7fecca2e84a27663743f7d7d1731110e" translate="yes" xml:space="preserve">
          <source>SvTHINKFIRST sometimes produces false positives. In those cases sv_force_normal does nothing.</source>
          <target state="translated">SvTHINKFIRST は時々偽陽性を出すことがあります。このような場合、sv_force_normal は何もしません。</target>
        </trans-unit>
        <trans-unit id="2b4f8344aad95fbd47f327c9ffb82473442fdc07" translate="yes" xml:space="preserve">
          <source>SvTRUE</source>
          <target state="translated">SvTRUE</target>
        </trans-unit>
        <trans-unit id="5591dda75f8cb8334b1aa5f7592580f0e1465a90" translate="yes" xml:space="preserve">
          <source>SvTRUE_nomg</source>
          <target state="translated">SvTRUE_nomg</target>
        </trans-unit>
        <trans-unit id="ef07939a32727e62f23ab3bf8294ee0ae227b03b" translate="yes" xml:space="preserve">
          <source>SvTRUEx</source>
          <target state="translated">SvTRUEx</target>
        </trans-unit>
        <trans-unit id="d0b53af1ac0ffb7024eea6f6ecb8a708b9c38980" translate="yes" xml:space="preserve">
          <source>SvTYPE</source>
          <target state="translated">SvTYPE</target>
        </trans-unit>
        <trans-unit id="b775bed176614e9a49e8732c4986d2b2525760f8" translate="yes" xml:space="preserve">
          <source>SvUNLOCK</source>
          <target state="translated">SvUNLOCK</target>
        </trans-unit>
        <trans-unit id="54b59fb943f1a8c6fc241231137d882737d769f5" translate="yes" xml:space="preserve">
          <source>SvUOK</source>
          <target state="translated">SvUOK</target>
        </trans-unit>
        <trans-unit id="a5569c2ff8aba92fd99ba9b2df30c443b34a6f1f" translate="yes" xml:space="preserve">
          <source>SvUPGRADE</source>
          <target state="translated">SvUPGRADE</target>
        </trans-unit>
        <trans-unit id="4cd670c5feb308ed3b15e5b58b2f681b4c5bb579" translate="yes" xml:space="preserve">
          <source>SvUTF8</source>
          <target state="translated">SvUTF8</target>
        </trans-unit>
        <trans-unit id="12aa020f8a66c3e1d0a998e5c7796999c4211ab4" translate="yes" xml:space="preserve">
          <source>SvUTF8_off</source>
          <target state="translated">SvUTF8_off</target>
        </trans-unit>
        <trans-unit id="31712c4817da7a521357a0236b626c9b62700a5d" translate="yes" xml:space="preserve">
          <source>SvUTF8_on</source>
          <target state="translated">SvUTF8_on</target>
        </trans-unit>
        <trans-unit id="97e374818598ae8696854ce66ebfe26153cf81d6" translate="yes" xml:space="preserve">
          <source>SvUV</source>
          <target state="translated">SvUV</target>
        </trans-unit>
        <trans-unit id="1c39bfc4cdacb7f60ffec9b7097060595b0abf27" translate="yes" xml:space="preserve">
          <source>SvUVX</source>
          <target state="translated">SvUVX</target>
        </trans-unit>
        <trans-unit id="cf7246c4c0c7e22abb4930c099853bf5a86af5d1" translate="yes" xml:space="preserve">
          <source>SvUVXx</source>
          <target state="translated">SvUVXx</target>
        </trans-unit>
        <trans-unit id="37b28974a3152d2c3de1c657d9b3df720c807e0b" translate="yes" xml:space="preserve">
          <source>SvUV_nomg</source>
          <target state="translated">SvUV_nomg</target>
        </trans-unit>
        <trans-unit id="728d716b7fe1f957388320e1810e447969265d9c" translate="yes" xml:space="preserve">
          <source>SvUV_set</source>
          <target state="translated">SvUV_set</target>
        </trans-unit>
        <trans-unit id="f0070f4312b6d3c4e9753ebbebd42cc576a21cc7" translate="yes" xml:space="preserve">
          <source>SvUVx</source>
          <target state="translated">SvUVx</target>
        </trans-unit>
        <trans-unit id="2b2c80bf0f6f562d3d900c990060affb4cc3cdbb" translate="yes" xml:space="preserve">
          <source>SvVOK</source>
          <target state="translated">SvVOK</target>
        </trans-unit>
        <trans-unit id="72ddd2b619af6d6a73febf80f7fcad22495498cd" translate="yes" xml:space="preserve">
          <source>Sweden</source>
          <target state="translated">Sweden</target>
        </trans-unit>
        <trans-unit id="d1e609cdf540975b2ef838162ca1765da2f782c9" translate="yes" xml:space="preserve">
          <source>Switch (?(condition)... contains too many branches in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">Switch（？（condition）...正規表現に含まれるブランチが多すぎます; &amp;lt;-HERE in m /％s /でマークされています</target>
        </trans-unit>
        <trans-unit id="388b56e3569a3c2f26662f9bd0bad1aef19a414d" translate="yes" xml:space="preserve">
          <source>Switch (?(condition)... not terminated in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">Switch（？（condition）...正規表現で終了していません; &amp;lt;-HERE in m /％s /でマークされています</target>
        </trans-unit>
        <trans-unit id="7d140830d04307683300b42c263a4bad9b2b05e6" translate="yes" xml:space="preserve">
          <source>Switch Statements</source>
          <target state="translated">ステートメントを切り替える</target>
        </trans-unit>
        <trans-unit id="81f3afb94b79b127f4ba3f323efbf6b5702494d6" translate="yes" xml:space="preserve">
          <source>Switch condition not recognized in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現でスイッチ条件が認識されません。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="8bd9a48c2b8a06497ad155d8fb2e22e3efb40ec2" translate="yes" xml:space="preserve">
          <source>Switch off optimizations.</source>
          <target state="translated">最適化をオフにします。</target>
        </trans-unit>
        <trans-unit id="3bb7fa365adb6d9413c8c9a8c7435723660691af" translate="yes" xml:space="preserve">
          <source>Switch to viewing a different file or &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; statement. If</source>
          <target state="translated">別のファイルまたは &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; ステートメントの表示に切り替えます。もし</target>
        </trans-unit>
        <trans-unit id="d701d90d00f98c308677ac71f008ef2cd2b1b580" translate="yes" xml:space="preserve">
          <source>Switch to viewing a different file or &lt;code&gt;eval&lt;/code&gt; statement. If</source>
          <target state="translated">別のファイルまたは &lt;code&gt;eval&lt;/code&gt; ステートメントの表示に切り替えます。場合</target>
        </trans-unit>
        <trans-unit id="8bc7caf5e748552e870fbdf8c7d017c5fa6cf84c" translate="yes" xml:space="preserve">
          <source>Switched to JSON serialization from YAML</source>
          <target state="translated">YAMLからJSONシリアライズに切り替えました</target>
        </trans-unit>
        <trans-unit id="941726dc5468b689bfb5334269ab159c8c5ac044" translate="yes" xml:space="preserve">
          <source>Switches On the &quot;#!&quot; Line</source>
          <target state="translated">スイッチをオンにすると「#! ライン</target>
        </trans-unit>
        <trans-unit id="22865b749e47c4f80690e8fbf02747aa53e87248" translate="yes" xml:space="preserve">
          <source>Switches include:</source>
          <target state="translated">スイッチには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="1a104dee1272b5ea48fa02cf2cd55d0cf5980bda" translate="yes" xml:space="preserve">
          <source>Switches which take an argument don't care whether there is a space between the switch and the argument. If unspecified switches are found on the command-line, the user will be warned that an unknown option was given.</source>
          <target state="translated">引数を取るスイッチは、スイッチと引数の間にスペースがあるかどうかを気にしません。コマンドラインで指定されていないスイッチが見つかった場合、不明なオプションが与えられたことを警告します。</target>
        </trans-unit>
        <trans-unit id="88a10266365bec895433e46eaf4bb0d9f4319fa6" translate="yes" xml:space="preserve">
          <source>Switching in a loop</source>
          <target state="translated">ループ内での切り替え</target>
        </trans-unit>
        <trans-unit id="77dcd849e550afec3c83d38fcc8cbc72c058f4db" translate="yes" xml:space="preserve">
          <source>Switzerland</source>
          <target state="translated">Switzerland</target>
        </trans-unit>
        <trans-unit id="c4833a3fbcd559394f2c58d1f54c950e1415a542" translate="yes" xml:space="preserve">
          <source>Sx is an interface to the Athena widget set which comes with X, but again it appears not to be much used nowadays.</source>
          <target state="translated">Sx は X に付属している Athena ウィジェットセットへのインターフェースですが、最近はあまり使われていないようです。</target>
        </trans-unit>
        <trans-unit id="cd32c48fcfdab7a133c532cff3d2d0c939be7f22" translate="yes" xml:space="preserve">
          <source>Symbian</source>
          <target state="translated">Symbian</target>
        </trans-unit>
        <trans-unit id="899b34f07ea283295bd5ac5271424c60aff58966" translate="yes" xml:space="preserve">
          <source>Symbian (Series 60 v3, 3.2 and 5 - what else?)</source>
          <target state="translated">Symbian (Series 60 v3,3.2 and 5-what else?)</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="6f23f00b2c5559251a269c3e95612a03f0fa5304" translate="yes" xml:space="preserve">
          <source>Symbol - manipulate Perl symbols and their names</source>
          <target state="translated">Symbol-Perl のシンボルとその名前を操作する</target>
        </trans-unit>
        <trans-unit id="e2434de5e406913ebf6a3ac33e80e10d4a315aea" translate="yes" xml:space="preserve">
          <source>Symbol Encodings</source>
          <target state="translated">シンボルエンコーディング</target>
        </trans-unit>
        <trans-unit id="d794fc2c3b0c30f40edbe0d808d2368ffeb21d98" translate="yes" xml:space="preserve">
          <source>Symbol Tables</source>
          <target state="translated">シンボルテーブル</target>
        </trans-unit>
        <trans-unit id="4b05d7078c77af4d667a4898e87b6c3188ae4b11" translate="yes" xml:space="preserve">
          <source>Symbolic Calculator</source>
          <target state="translated">記号計算機</target>
        </trans-unit>
        <trans-unit id="37008620b710f26771f72ef684d0d762ce0c312d" translate="yes" xml:space="preserve">
          <source>Symbolic Links</source>
          <target state="translated">シンボリックリンク</target>
        </trans-unit>
        <trans-unit id="d0a9fa28cc57e07ecbedf349e28f66a417dbd550" translate="yes" xml:space="preserve">
          <source>Symbolic Unary Operators</source>
          <target state="translated">記号的単項演算子</target>
        </trans-unit>
        <trans-unit id="c85b29041363945d0d38e6dd76ab2012cab61284" translate="yes" xml:space="preserve">
          <source>Symbolic links will be replicated in the destination directory. If &lt;b&gt;-l&lt;/b&gt; is not specified, then links are skipped over.</source>
          <target state="translated">シンボリックリンクは宛先ディレクトリに複製されます。&lt;b&gt;-l&lt;/b&gt;が指定されていない場合、リンクはスキップされます。</target>
        </trans-unit>
        <trans-unit id="5740fe00b50befc25ecdbfe2ce1dcb268f365ae5" translate="yes" xml:space="preserve">
          <source>Symbolic methods</source>
          <target state="translated">シンボリックメソッド</target>
        </trans-unit>
        <trans-unit id="2ed5a46b240bca78e1ebda87bbf53e151430ff41" translate="yes" xml:space="preserve">
          <source>Symbolic references</source>
          <target state="translated">記号的参照</target>
        </trans-unit>
        <trans-unit id="11ea83f8147883e582553aebb48729beba5bdaf1" translate="yes" xml:space="preserve">
          <source>Symbolic references are forbidden under the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; pragma. They are not true references and consequently are not reference-counted or garbage-collected.</source>
          <target state="translated">シンボリック参照は、 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; プラグマでは禁止されています。これらは真の参照ではないため、参照カウントやガベージコレクションは行われません。</target>
        </trans-unit>
        <trans-unit id="af9f81a30b480e3a5214ee12ab8f0ac2f3b093d2" translate="yes" xml:space="preserve">
          <source>Symbolic references are forbidden under the &lt;code&gt;use strict&lt;/code&gt; pragma. They are not true references and consequently are not reference-counted or garbage-collected.</source>
          <target state="translated">&lt;code&gt;use strict&lt;/code&gt; プラグマを使用する場合、記号による参照は禁止されています。それらは真の参照ではないため、参照カウントやガベージコレクションは行われません。</target>
        </trans-unit>
        <trans-unit id="2a3d231a255923086dc7e82179bb6e9c216f886c" translate="yes" xml:space="preserve">
          <source>Symbolic references are names of variables or other objects, just as a symbolic link in a Unix filesystem contains merely the name of a file. The &lt;code&gt;*glob&lt;/code&gt; notation is something of a symbolic reference. (Symbolic references are sometimes called &quot;soft references&quot;, but please don't call them that; references are confusing enough without useless synonyms.)</source>
          <target state="translated">シンボリック参照は、Unixファイルシステムのシンボリックリンクにファイルの名前のみが含まれるのと同じように、変数またはその他のオブジェクトの名前です。 &lt;code&gt;*glob&lt;/code&gt; 表記はシンボリックリファレンスのようなものです。（シンボリック参照は「ソフト参照」と呼ばれることもありますが、そのように呼ばないでください。参照は、意味のない同義語なしでは十分に混乱します。）</target>
        </trans-unit>
        <trans-unit id="7eb647835a30e5a1bbf74157fa14f494b596a5c9" translate="yes" xml:space="preserve">
          <source>Symbols representing the concepts &amp;ldquo;and&amp;rdquo;, &amp;ldquo;or&amp;rdquo;, &amp;ldquo;xor&amp;rdquo;, and &amp;ldquo;not&amp;rdquo;.</source>
          <target state="translated">「and」、「or」、「xor」、「not」の概念を表す記号。</target>
        </trans-unit>
        <trans-unit id="bc32943d7841b88a1cf40309071785aab7d4e9d1" translate="yes" xml:space="preserve">
          <source>Synchronization and control</source>
          <target state="translated">同期化と制御</target>
        </trans-unit>
        <trans-unit id="3cea5373055c1ded68843107ad2f2e539bd093c5" translate="yes" xml:space="preserve">
          <source>Synology manufactures a vast number of Network Attached Storage (NAS) devices that are very popular in large organisations as well as small businesses and homes.</source>
          <target state="translated">Synology は、大規模な組織だけでなく、小規模な企業や家庭でも人気のある膨大な数のネットワーク接続ストレージ (NAS)デバイスを製造しています。</target>
        </trans-unit>
        <trans-unit id="fd6877f381ee0675d5bd925a8ea887b401ae7a51" translate="yes" xml:space="preserve">
          <source>Synonymous options (like both the short and long forms) are separated by a comma and a space on the same &lt;code&gt;=item&lt;/code&gt; line, or optionally listed as their own item with a reference to the canonical name. For example, since &lt;b&gt;--section&lt;/b&gt; can also be written as &lt;b&gt;-s&lt;/b&gt;, the above would be:</source>
          <target state="translated">同義のオプション（短い形式と長い形式の両方）は、同じ &lt;code&gt;=item&lt;/code&gt; 行でコンマとスペースで区切るか、オプションで正規名を参照する独自のアイテムとしてリストします。たとえば、-- &lt;b&gt;section&lt;/b&gt;は&lt;b&gt;-s&lt;/b&gt;としても記述できるため、上記は次のようになります。</target>
        </trans-unit>
        <trans-unit id="fcbf093f7bdc572a445b9a43606c7f7a83836b33" translate="yes" xml:space="preserve">
          <source>Synonyms for &lt;code&gt;recipient&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;recipient&lt;/code&gt; 同意語。</target>
        </trans-unit>
        <trans-unit id="79fdd2d4dec4b005410dc78b4fc5a2b54509cf1c" translate="yes" xml:space="preserve">
          <source>Synonyms for &lt;code&gt;recipient&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;recipient&lt;/code&gt; 同義語。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="af5f0a5e089ff24df87876664a300fc1d94de87c" translate="yes" xml:space="preserve">
          <source>Synopsis:</source>
          <target state="translated">Synopsis:</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="69c40972b3eb05b16c311ef5e1e2135fa3fd9faa" translate="yes" xml:space="preserve">
          <source>Syntax error in (?[...]) in regex; marked by &amp;lt;-- HERE in m/%s/</source>
          <target state="translated">正規表現の（？[...]）の構文エラー。&amp;lt;-ここにm /％s /でマーク</target>
        </trans-unit>
        <trans-unit id="fb07c71de4335da146595d32e9320b5a8140d2f2" translate="yes" xml:space="preserve">
          <source>Syntax error in =encoding directive</source>
          <target state="translated">エンコーディングディレクティブの構文エラー</target>
        </trans-unit>
        <trans-unit id="e90738f5d4b2229f3a4c124484c36b1275df5262" translate="yes" xml:space="preserve">
          <source>Syntax for invoking shar, tar and zip differs from that for Unix.</source>
          <target state="translated">shar,tar,zip を呼び出すための構文は Unix のそれとは異なります。</target>
        </trans-unit>
        <trans-unit id="7d8c7607abfe852f9a6ad8648332314d9917e637" translate="yes" xml:space="preserve">
          <source>Syntax of Attribute Lists</source>
          <target state="translated">属性リストの構文</target>
        </trans-unit>
        <trans-unit id="1de8dba368e7754dc199c99b017f5c51265ee8dc" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntax:</target>
        </trans-unit>
        <trans-unit id="be3351180e2a37f5c7ceb3ef2e3724ddf7a09419" translate="yes" xml:space="preserve">
          <source>Syohei YOSHIDA &amp;lt;syohex@gmail.com&amp;gt;</source>
          <target state="translated">吉田翔平&amp;lt;syohex@gmail.com&amp;gt;</target>
        </trans-unit>
        <trans-unit id="0785d5c2121b7134c4af7c65680f001acb76a92c" translate="yes" xml:space="preserve">
          <source>Sys$Library</source>
          <target state="translated">Sys$Library</target>
        </trans-unit>
        <trans-unit id="65fb3d73b0b7d628e2887a67776fd305bc37b9e6" translate="yes" xml:space="preserve">
          <source>Sys$Share</source>
          <target state="translated">Sys$Share</target>
        </trans-unit>
        <trans-unit id="dbb39438e97d2bc740ddc791cb728708fa6deab2" translate="yes" xml:space="preserve">
          <source>Sys$System:</source>
          <target state="translated">Sys$System:</target>
        </trans-unit>
        <trans-unit id="48fee1621e8e0fbac3a51bb7b722933258b770f4" translate="yes" xml:space="preserve">
          <source>Sys::Hostname</source>
          <target state="translated">Sys::Hostname</target>
        </trans-unit>
        <trans-unit id="2e415aac42b72faad3c72367e40e8717dbc66b3c" translate="yes" xml:space="preserve">
          <source>Sys::Hostname - Try every conceivable way to get hostname</source>
          <target state="translated">Sys::Hostname-ホスト名を取得するために考えられるあらゆる方法を試す</target>
        </trans-unit>
        <trans-unit id="c1e878d92efc49a2e4d7c74bab56ecb4df79e136" translate="yes" xml:space="preserve">
          <source>Sys::Syslog</source>
          <target state="translated">Sys::Syslog</target>
        </trans-unit>
        <trans-unit id="d0e7c26b96f1913c444745d08172cdce4e0c92fa" translate="yes" xml:space="preserve">
          <source>Sys::Syslog - Perl interface to the UNIX syslog(3) calls</source>
          <target state="translated">Sys::Syslog-UNIX の syslog(3)を呼び出すための Perl インターフェイス</target>
        </trans-unit>
        <trans-unit id="70083380e8efc0c90f74c992ef02124b7c1f9076" translate="yes" xml:space="preserve">
          <source>Sys::Syslog::Win32</source>
          <target state="translated">Sys::Syslog::Win32</target>
        </trans-unit>
        <trans-unit id="cfe74b88debb47d505f4b0c08319f0ca059d43ec" translate="yes" xml:space="preserve">
          <source>Sys::Syslog::Win32 - Win32 support for Sys::Syslog</source>
          <target state="translated">Sys::Syslog::Win32-Sys::Syslog の Win32 サポート</target>
        </trans-unit>
        <trans-unit id="e9c9e6fce8c27f1db38faca8727f60ffbd03b1df" translate="yes" xml:space="preserve">
          <source>SysV IPC</source>
          <target state="translated">エスアイシーブイアイピーシー</target>
        </trans-unit>
        <trans-unit id="b769fe98988d4570b7169913197897773fb46367" translate="yes" xml:space="preserve">
          <source>SysV Msg IPC object class</source>
          <target state="translated">SysV Msg IPC オブジェクトクラス</target>
        </trans-unit>
        <trans-unit id="1b5cd833684b7ef6a59dab44ff94b295bccc40b4" translate="yes" xml:space="preserve">
          <source>SysV Semaphore IPC object class</source>
          <target state="translated">SysV Semaphore IPC オブジェクトクラス</target>
        </trans-unit>
        <trans-unit id="71c44529ecac23b5c9809ec7a57f43fadf59d867" translate="yes" xml:space="preserve">
          <source>SysV Shared Memory IPC object class</source>
          <target state="translated">SysV 共有メモリ IPC オブジェクトクラス</target>
        </trans-unit>
        <trans-unit id="40f6355398d4cc8e6d990f10eb780e3725d4416e" translate="yes" xml:space="preserve">
          <source>Syscall returns whatever value returned by the system call it calls. If the system call fails, &lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;-1&lt;/code&gt; and sets &lt;a href=&quot;perlvar#%24%21&quot;&gt;&lt;code&gt;$!&lt;/code&gt;&lt;/a&gt; (errno). Note that some system calls</source>
          <target state="translated">Syscallは、呼び出すシステムコールによって返される値を返します。システムコールが失敗した場合、&lt;a href=&quot;#syscall-NUMBER%2C-LIST&quot;&gt; &lt;code&gt;syscall&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;-1&lt;/code&gt; を返し、&lt;a href=&quot;perlvar#%24%21&quot;&gt; &lt;code&gt;$!&lt;/code&gt; &lt;/a&gt;を設定します。（errno）。一部のシステムコールに注意してください</target>
        </trans-unit>
        <trans-unit id="e45e7e358eb9351a96a4b4d44c0db473a81b0bd0" translate="yes" xml:space="preserve">
          <source>Syscall returns whatever value returned by the system call it calls. If the system call fails, &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; (errno). Note that some system calls</source>
          <target state="translated">Syscallは、呼び出すシステムコールによって返される値を返します。システムコールが失敗した場合、 &lt;code&gt;&lt;a href=&quot;functions/syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;-1&lt;/code&gt; を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。一部のシステムコールに注意してください</target>
        </trans-unit>
        <trans-unit id="e0b761d47162708932873aa746a0b31a4af21afe" translate="yes" xml:space="preserve">
          <source>Syscall returns whatever value returned by the system call it calls. If the system call fails, &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;-1&lt;/code&gt; and sets &lt;code&gt;$!&lt;/code&gt; (errno). Note that some system calls</source>
          <target state="translated">Syscallは、呼び出すシステムコールによって返される値を返します。システムコールが失敗した場合、 &lt;code&gt;&lt;a href=&quot;syscall&quot;&gt;syscall&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;-1&lt;/code&gt; を返し、 &lt;code&gt;$!&lt;/code&gt; を設定します。（errno）。一部のシステムコールに注意してください</target>
        </trans-unit>
        <trans-unit id="53aa71666c5046c70bdb9cfa19d05f3e5e2dbe70" translate="yes" xml:space="preserve">
          <source>Syslogging with Perl</source>
          <target state="translated">Perlによるシスログ</target>
        </trans-unit>
        <trans-unit id="b9c23727af44d87276c73142b1bbc56acfa2ff99" translate="yes" xml:space="preserve">
          <source>Sysroot.U</source>
          <target state="translated">Sysroot.U</target>
        </trans-unit>
        <trans-unit id="80c0b230762f1b4764b9bec6b3b1ff958262b7bd" translate="yes" xml:space="preserve">
          <source>System CPU Time</source>
          <target state="translated">システムCPU時間</target>
        </trans-unit>
        <trans-unit id="286ad58c359f169cf560ed965ca49713b4161be5" translate="yes" xml:space="preserve">
          <source>System Interaction</source>
          <target state="translated">システムの相互作用</target>
        </trans-unit>
        <trans-unit id="a5f5e2adb8b84a09a3496b92bfc8ae6f7818b5f8" translate="yes" xml:space="preserve">
          <source>System Resources</source>
          <target state="translated">システムリソース</target>
        </trans-unit>
        <trans-unit id="12920688fafa23a0e3538825316e84488141b30c" translate="yes" xml:space="preserve">
          <source>System Specifics</source>
          <target state="translated">システムの仕様</target>
        </trans-unit>
        <trans-unit id="d6112adb659d79581ddf0b5cc4c94caed341f770" translate="yes" xml:space="preserve">
          <source>System V %s is not implemented on this machine</source>
          <target state="translated">システム V %s はこのマシンには実装されていません。</target>
        </trans-unit>
        <trans-unit id="1c80f9799bbc3cebb5501e8db9a2d073ae25632e" translate="yes" xml:space="preserve">
          <source>System V IPC constants and system calls</source>
          <target state="translated">システムV IPC定数とシステムコール</target>
        </trans-unit>
        <trans-unit id="c4b08ad7296a6185b44d15785cd2e71597984993" translate="yes" xml:space="preserve">
          <source>System V interprocess communication functions</source>
          <target state="translated">システムVのプロセス間通信機能</target>
        </trans-unit>
        <trans-unit id="16956db37d0c77a530acbdbc4b5059785173084f" translate="yes" xml:space="preserve">
          <source>System calls accept either &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;\&lt;/code&gt; as the path separator. However, many command-line utilities of DOS vintage treat &lt;code&gt;/&lt;/code&gt; as the option prefix, so may get confused by filenames containing &lt;code&gt;/&lt;/code&gt;. Aside from calling any external programs, &lt;code&gt;/&lt;/code&gt; will work just fine, and probably better, as it is more consistent with popular usage, and avoids the problem of remembering what to backwhack and what not to.</source>
          <target state="translated">システムコールは、パスの区切り文字として &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;\&lt;/code&gt; を受け入れます。しかし、DOSヴィンテージ御馳走の多くのコマンドラインユーティリティは、 &lt;code&gt;/&lt;/code&gt; オプションのプレフィックスとして、そう含むファイル名で混乱も &lt;code&gt;/&lt;/code&gt; を。外部プログラムの呼び出しは別として、 &lt;code&gt;/&lt;/code&gt; は正常に動作します。一般的な使用法との一貫性が高く、何をバックワックするか、何をしないかを覚えておくという問題を回避できます。</target>
        </trans-unit>
        <trans-unit id="4f24e94ced298a298739ba1339ef795f85bd6541" translate="yes" xml:space="preserve">
          <source>System calls at compile time</source>
          <target state="translated">コンパイル時のシステムコール</target>
        </trans-unit>
        <trans-unit id="007271cb98a5608fe64c06188e43289d61f1c7bd" translate="yes" xml:space="preserve">
          <source>System calls return -1 on error (setting ERRNO with the reason) and (usually) 0 on success. If the return value is -1 this typemap returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If the return value is not -1, this typemap translates a 0 (perl false) to &quot;0 but true&quot; (which is perl true) or returns the value itself, to indicate that the command succeeded.</source>
          <target state="translated">システムコールは、エラーの場合は-1（理由でERRNOを設定）を返し、成功した場合は（通常）0を返します。戻り値が-1の場合、このタイプマップは &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; を返します。戻り値が-1でない場合、このタイプマップは0（perl false）を &quot;0 but true&quot;（perl true）に変換するか、値自体を返し、コマンドが成功したことを示します。</target>
        </trans-unit>
        <trans-unit id="2359b820aa0452b65508553cdd45209d3b858de3" translate="yes" xml:space="preserve">
          <source>System calls return -1 on error (setting ERRNO with the reason) and (usually) 0 on success. If the return value is -1 this typemap returns &lt;code&gt;undef&lt;/code&gt;. If the return value is not -1, this typemap translates a 0 (perl false) to &quot;0 but true&quot; (which is perl true) or returns the value itself, to indicate that the command succeeded.</source>
          <target state="translated">システムコールは、エラー（理由でERRNOを設定）の場合は-1を返し、成功した場合は（通常）0を返します。戻り値が-1の場合、このタイプマップは &lt;code&gt;undef&lt;/code&gt; を返します。戻り値が-1でない場合、このタイプマップは0（perl false）を &quot;0 but true&quot;（perl true）に変換するか、値自体を返し、コマンドが成功したことを示します。</target>
        </trans-unit>
        <trans-unit id="eb78d5fbb36025d1ade73acf0ec1dc017253b7c6" translate="yes" xml:space="preserve">
          <source>System calls such as link(), unlink(), rename(), etc. return nonzero for success, not 0. (system(), however, returns zero for success.)</source>
          <target state="translated">link()、unlink()、 rename()などのシステムコールは成功すると 0 ではなく 0 以外の値を返します (ただし、system()は成功すると 0 を返します)。</target>
        </trans-unit>
        <trans-unit id="a5bfc62972086e83c2f9e4d6647ba3081448737b" translate="yes" xml:space="preserve">
          <source>System errno constants</source>
          <target state="translated">システム errno 定数</target>
        </trans-unit>
        <trans-unit id="0464247110efd6dc873ab7d03699ac46391aa089" translate="yes" xml:space="preserve">
          <source>SystemV Interprocess Communications:</source>
          <target state="translated">SystemVプロセス間通信。</target>
        </trans-unit>
        <trans-unit id="a183fb872a859df2f57021c9ab88f775bce8ce4c" translate="yes" xml:space="preserve">
          <source>Systems that don't use GDBM compatibilty for ndbm support will be using a platform specific library, possibly inherited from BSD systems, where it may or may not be safe to use an untrusted file.</source>
          <target state="translated">ndbm サポートのために GDBM 互換性を使わないシステムでは、おそらく BSD システムから継承されたプラットフォーム固有のライブラリを使うことになり、信頼されていないファイルを使うのは安全ではないかもしれないし、安全ではないかもしれない。</target>
        </trans-unit>
        <trans-unit id="bae914465ea54a3f354cb49e4c193a3ffe266b8f" translate="yes" xml:space="preserve">
          <source>Systems that don't use GDBM compatibilty for old dbm support will be using a platform specific library, possibly inherited from BSD systems, where it may or may not be safe to use an untrusted file.</source>
          <target state="translated">古いdbmサポートにGDBM互換性を使わないシステムでは、BSDシステムから継承されたプラットフォーム固有のライブラリを使うことになります。</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="5217808996f069ddbc219ab5febe206f9d89f653" translate="yes" xml:space="preserve">
          <source>T2_KEEP_TEMPDIR=0</source>
          <target state="translated">T2_KEEP_TEMPDIR=0</target>
        </trans-unit>
        <trans-unit id="463b5addcced0fba1581ac4edc4526052505db59" translate="yes" xml:space="preserve">
          <source>T2_TEMPDIR_TEMPLATE='test2-XXXXXX'</source>
          <target state="translated">T2_TEMPDIR_TEMPLATE='test2-XXXXXX'</target>
        </trans-unit>
        <trans-unit id="a4394edb00669dc4429b903f672c10ae13c95e90" translate="yes" xml:space="preserve">
          <source>TABLE</source>
          <target state="translated">TABLE</target>
        </trans-unit>
        <trans-unit id="9f94efb44fe911a9e20566c2b4f9e9743238c25c" translate="yes" xml:space="preserve">
          <source>TABLE OF CONTENTS</source>
          <target state="translated">目次</target>
        </trans-unit>
        <trans-unit id="3b4df05d703541d151d3e3628328bb8fd532308b" translate="yes" xml:space="preserve">
          <source>TAP GRAMMAR</source>
          <target state="translated">タップグラマー</target>
        </trans-unit>
        <trans-unit id="1920029d62435d8577df2572dd0096bfaff76178" translate="yes" xml:space="preserve">
          <source>TAP pragma token.</source>
          <target state="translated">TAP pragmaトークン。</target>
        </trans-unit>
        <trans-unit id="a6ad0c7cbda3b41f87bebc3eecd396afa503fee6" translate="yes" xml:space="preserve">
          <source>TAP syntax version token.</source>
          <target state="translated">TAP構文バージョントークン。</target>
        </trans-unit>
        <trans-unit id="3876ffd2c762f78e88b10fd7b5ed6b67ff853ed5" translate="yes" xml:space="preserve">
          <source>TAP::Base</source>
          <target state="translated">TAP::Base</target>
        </trans-unit>
        <trans-unit id="9b1c8b8b7e60c2d2e7b147def758851a2032505c" translate="yes" xml:space="preserve">
          <source>TAP::Base - Base class that provides common functionality to &lt;a href=&quot;TAP::Parser&quot;&gt;TAP::Parser&lt;/a&gt; and &lt;a href=&quot;TAP::Harness&quot;&gt;TAP::Harness&lt;/a&gt;</source>
          <target state="translated">TAP :: Base- &lt;a href=&quot;TAP::Parser&quot;&gt;TAP :: Parser&lt;/a&gt;および&lt;a href=&quot;TAP::Harness&quot;&gt;TAP :: Harnessに&lt;/a&gt;共通の機能を提供する基本クラス</target>
        </trans-unit>
        <trans-unit id="393bbdfe5b0291f7582e0a00a859897a43f52662" translate="yes" xml:space="preserve">
          <source>TAP::Base - Base class that provides common functionality to &lt;a href=&quot;parser&quot;&gt;TAP::Parser&lt;/a&gt; and &lt;a href=&quot;harness&quot;&gt;TAP::Harness&lt;/a&gt;</source>
          <target state="translated">TAP :: Base- &lt;a href=&quot;parser&quot;&gt;TAP :: Parser&lt;/a&gt;および&lt;a href=&quot;harness&quot;&gt;TAP :: Harnessに&lt;/a&gt;共通の機能を提供する基本クラス</target>
        </trans-unit>
        <trans-unit id="863c519a681845de61f18ccf2d91ed2bae4b3a87" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Base</source>
          <target state="translated">TAP::Formatter::Base</target>
        </trans-unit>
        <trans-unit id="2219301c0e6ab7a0cac653627940a66913b4e00c" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Base - Base class for harness output delegates</source>
          <target state="translated">TAP::Formatter::Base-ハーネス出力デリゲートの基底クラス</target>
        </trans-unit>
        <trans-unit id="737a5324c5901c02f42ad717687b54b1dafd7c3b" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Color</source>
          <target state="translated">TAP::Formatter::Color</target>
        </trans-unit>
        <trans-unit id="83dc9a13e5e40b4cace713c5d42771d2b5bb47e0" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Color - Run Perl test scripts with color</source>
          <target state="translated">TAP::Formatter::Color-Perl テストスクリプトをカラーで実行する</target>
        </trans-unit>
        <trans-unit id="de057ff7c6b5e40851d3c50d32e9750e339c5926" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Console</source>
          <target state="translated">TAP::Formatter::Console</target>
        </trans-unit>
        <trans-unit id="e5caa85b06270fe34451b375ee12674e638dd733" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Console - Harness output delegate for default console output</source>
          <target state="translated">TAP::Formatter::Console-デフォルトのコンソール出力用の出力デリゲートを保持する</target>
        </trans-unit>
        <trans-unit id="01b7c503e4f8a4af70b89b685b263fa99a7779a7" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Console::ParallelSession</source>
          <target state="translated">TAP::Formatter::Console::ParallelSession</target>
        </trans-unit>
        <trans-unit id="db7bd0c049621f91358c7128fbd5472680ec6d31" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Console::ParallelSession - Harness output delegate for parallel console output</source>
          <target state="translated">TAP::Formatter::Console::ParallelSession-並列コンソール出力用の出力デリゲートをハーネス化する</target>
        </trans-unit>
        <trans-unit id="e10aa0877a249858e704e343610555a15b6331f0" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Console::Session</source>
          <target state="translated">TAP::Formatter::Console::Session</target>
        </trans-unit>
        <trans-unit id="617e83a9b0bba0c6a87c6403d55512035b5d4331" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Console::Session - Harness output delegate for default console output</source>
          <target state="translated">TAP::Formatter::Console::Session-デフォルトのコンソール出力用の出力デリゲートを保持する</target>
        </trans-unit>
        <trans-unit id="ebcc51d604eabcfa523d96f91dc1b0eb51dccb7d" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::File</source>
          <target state="translated">TAP::Formatter::File</target>
        </trans-unit>
        <trans-unit id="ce9e5131d6998f180ee6abe8bad4643f869cfb3d" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::File - Harness output delegate for file output</source>
          <target state="translated">TAP::Formatter::File-ファイル出力のための出力デリゲートを保持する</target>
        </trans-unit>
        <trans-unit id="5a53ebb59dd4ba13f5939d6a9f81cddf3e1c6f45" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::File::Session</source>
          <target state="translated">TAP::Formatter::File::Session</target>
        </trans-unit>
        <trans-unit id="360d8f026e4e5483612bf0275831836f9ffb249f" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::File::Session - Harness output delegate for file output</source>
          <target state="translated">TAP::Formatter::File::Session-ファイル出力用の出力デリゲートを保持する</target>
        </trans-unit>
        <trans-unit id="46af53bbf8c7eee3da8d825fcace74fe474d232b" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Session</source>
          <target state="translated">TAP::Formatter::Session</target>
        </trans-unit>
        <trans-unit id="c2df33c30bd450c40b146c186ea09c6cab11e56c" translate="yes" xml:space="preserve">
          <source>TAP::Formatter::Session - Abstract base class for harness output delegate</source>
          <target state="translated">TAP::Formatter::Session-ハーネス出力デリゲートの抽象基底クラス</target>
        </trans-unit>
        <trans-unit id="93ebad31adfaf596a987126afe3d7a3f18d93c05" translate="yes" xml:space="preserve">
          <source>TAP::Harness</source>
          <target state="translated">TAP::Harness</target>
        </trans-unit>
        <trans-unit id="b7d5d266f7a8edc064e0b8c710521d51a2bc894a" translate="yes" xml:space="preserve">
          <source>TAP::Harness - Run test scripts with statistics</source>
          <target state="translated">TAP::Harness-統計情報を用いたテストスクリプトの実行</target>
        </trans-unit>
        <trans-unit id="a28a3f4d3229f49494c71baca96520e2ecfb6ce6" translate="yes" xml:space="preserve">
          <source>TAP::Harness::Env</source>
          <target state="translated">TAP::Harness::Env</target>
        </trans-unit>
        <trans-unit id="91f28a5a62ef8f799cd7525ba0b5759ca2448d9c" translate="yes" xml:space="preserve">
          <source>TAP::Harness::Env - Parsing harness related environmental variables where appropriate</source>
          <target state="translated">TAP::Harness::Env-ハーネス関連の環境変数を適切に解析する</target>
        </trans-unit>
        <trans-unit id="7a70a46bfa38bc1216fe94cb04afcea34c7e8685" translate="yes" xml:space="preserve">
          <source>TAP::Object</source>
          <target state="translated">TAP::Object</target>
        </trans-unit>
        <trans-unit id="f09e3a92ac29a0ecd8a4f02097d67c9251bfb4fd" translate="yes" xml:space="preserve">
          <source>TAP::Object - Base class that provides common functionality to all &lt;code&gt;TAP::*&lt;/code&gt; modules</source>
          <target state="translated">TAP :: Object-すべての &lt;code&gt;TAP::*&lt;/code&gt; モジュールに共通の機能を提供する基本クラス</target>
        </trans-unit>
        <trans-unit id="73c55e213830c688e72c24e7e2dc38927a8f526e" translate="yes" xml:space="preserve">
          <source>TAP::Parser</source>
          <target state="translated">TAP::Parser</target>
        </trans-unit>
        <trans-unit id="f762f998d40c617b51b08688208676705b948fa6" translate="yes" xml:space="preserve">
          <source>TAP::Parser - Parse &lt;a href=&quot;Test::Harness::TAP&quot;&gt;TAP&lt;/a&gt; output</source>
          <target state="translated">TAP :: Parser- &lt;a href=&quot;Test::Harness::TAP&quot;&gt;TAP&lt;/a&gt;出力を解析します</target>
        </trans-unit>
        <trans-unit id="2f07ed865105b4fe8e06f2ed0ef74d2249f0ce1b" translate="yes" xml:space="preserve">
          <source>TAP::Parser - Parse &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Harness::TAP&quot;&gt;TAP&lt;/a&gt; output</source>
          <target state="translated">TAP :: Parser- &lt;a href=&quot;http://search.cpan.org/perldoc/Test::Harness::TAP&quot;&gt;TAP&lt;/a&gt;出力を解析する</target>
        </trans-unit>
        <trans-unit id="947140d84d6dc3586ce66227c8fbf3b5502269bb" translate="yes" xml:space="preserve">
          <source>TAP::Parser also supports callbacks; bailout, comment, plan, test, unknown, version and yaml are called for the corresponding TAP result types, ALL is called for all results, ELSE is called for all results for which a named callback is not installed and EOF is called once at the end of each TAP stream.</source>
          <target state="translated">TAP::Parserはコールバックもサポートしています。bailout,comment,plan,test,unknown,version and yamlは対応するTAP結果タイプに対して呼び出され、ALLは全ての結果に対して呼び出され、ELSEは名前付きコールバックがインストールされていない全ての結果に対して呼び出され、EOFは各TAPストリームの最後に一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7a216f40bfe5d8c4e9f480503b3353a997f25d9e" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Aggregator</source>
          <target state="translated">TAP::Parser::Aggregator</target>
        </trans-unit>
        <trans-unit id="29967243373ff3c2847efa03292cf1394ade91bf" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Aggregator - Aggregate TAP::Parser results</source>
          <target state="translated">TAP::Parser::Aggregator-TAP::Parserの結果を集約する</target>
        </trans-unit>
        <trans-unit id="ea252a87adf45624e0915f082cf3a171691e2b87" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Grammar</source>
          <target state="translated">TAP::Parser::Grammar</target>
        </trans-unit>
        <trans-unit id="99d73c9149822b89f098465b0ef15b6e5e432ba4" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Grammar - A grammar for the Test Anything Protocol.</source>
          <target state="translated">TAP::Parser::Grammar-Test Anything Protocol の文法。</target>
        </trans-unit>
        <trans-unit id="f66dcc18cf605bab72f282216bf437fafae85c73" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator</source>
          <target state="translated">TAP::Parser::Iterator</target>
        </trans-unit>
        <trans-unit id="d222e4542e0f93a9f4cabc8a65b724fcc86515cd" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator - Base class for TAP source iterators</source>
          <target state="translated">TAP::Parser::Iterator-TAP ソースのイテレータの基底クラス</target>
        </trans-unit>
        <trans-unit id="599e631b6f320b3fc47ee504d90a3e175b821f4e" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator::Array</source>
          <target state="translated">TAP::Parser::Iterator::Array</target>
        </trans-unit>
        <trans-unit id="8849b72265bccd1154b20c5bcfd79b6177e1d979" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator::Array - Iterator for array-based TAP sources</source>
          <target state="translated">TAP::Parser::Iterator::Array-配列ベースの TAP ソースのイテレータ</target>
        </trans-unit>
        <trans-unit id="8afb640018f748c7abac8e508f78557fe8689509" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator::Process</source>
          <target state="translated">TAP::Parser::Iterator::Process</target>
        </trans-unit>
        <trans-unit id="ef61fd1ef2ee2ba4a706833aed0bb08fe84a24ba" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator::Process - Iterator for process-based TAP sources</source>
          <target state="translated">TAP::Parser::Iterator::Process-プロセスベースの TAP ソースのイテレータ</target>
        </trans-unit>
        <trans-unit id="c97751b26f9e6df1ee3c0a7feabeda4e0d9102c3" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator::Stream</source>
          <target state="translated">TAP::Parser::Iterator::Stream</target>
        </trans-unit>
        <trans-unit id="be38f68275dc99a67c8ac1d8cfd48bb032de4d4a" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Iterator::Stream - Iterator for filehandle-based TAP sources</source>
          <target state="translated">TAP::Parser::Iterator::Stream-ファイルハンドルベースの TAP ソースのイテレータ</target>
        </trans-unit>
        <trans-unit id="d89bed7b6f6d5d165f751cac2ac0a13e2dd7f697" translate="yes" xml:space="preserve">
          <source>TAP::Parser::IteratorFactory</source>
          <target state="translated">TAP::Parser::IteratorFactory</target>
        </trans-unit>
        <trans-unit id="8d39f8677b4d63ea3260e5507a930c994a438d70" translate="yes" xml:space="preserve">
          <source>TAP::Parser::IteratorFactory - Figures out which SourceHandler objects to use for a given Source</source>
          <target state="translated">TAP::Parser::IteratorFactory-与えられたソースに対してどの SourceHandler オブジェクトを使用するかを調べる</target>
        </trans-unit>
        <trans-unit id="6f50fafc730902e3aa24fa13c0c429b89a2cc1ff" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Multiplexer</source>
          <target state="translated">TAP::Parser::Multiplexer</target>
        </trans-unit>
        <trans-unit id="2da48d5d830b8cd9138d15d18237febc28e0b498" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Multiplexer - Multiplex multiple TAP::Parsers</source>
          <target state="translated">TAP::Parser::Multiplexer-複数の TAP::Parsers を多重化する</target>
        </trans-unit>
        <trans-unit id="3c077c3ce874909f47ae77cbcca2c04344198e5b" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result</source>
          <target state="translated">TAP::Parser::Result</target>
        </trans-unit>
        <trans-unit id="a422082a9e255b156b40569483bd6f50f2d5a284" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result - Base class for TAP::Parser output objects</source>
          <target state="translated">TAP::Parser::Result-TAP::Parser 出力オブジェクトの基底クラス</target>
        </trans-unit>
        <trans-unit id="03b8058105031bc1095218a7667a2ea1b2512b1e" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Bailout</source>
          <target state="translated">TAP::Parser::Result::Bailout</target>
        </trans-unit>
        <trans-unit id="00f4b677e9dddb24581e9ed004b7470cf77a617e" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Bailout - Bailout result token.</source>
          <target state="translated">TAP::Parser::Result::Bailout-ベイルアウト結果トークン.</target>
        </trans-unit>
        <trans-unit id="afba56eaac641feaac3daf9f840411e87ecf1e14" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Comment</source>
          <target state="translated">TAP::Parser::Result::Comment</target>
        </trans-unit>
        <trans-unit id="15ac19d49aebc2fdbf7a430ac512a0c55bc03548" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Comment - Comment result token.</source>
          <target state="translated">TAP::Parser::Result::Comment-コメント結果トークン.</target>
        </trans-unit>
        <trans-unit id="8028e0720d8ec37d7287bdb1bc7450078b0bf251" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Plan</source>
          <target state="translated">TAP::Parser::Result::Plan</target>
        </trans-unit>
        <trans-unit id="4383859286c921d76add9716628e055668e9e51d" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Plan - Plan result token.</source>
          <target state="translated">TAP::Parser::Result::Plan-プラン結果トークン.</target>
        </trans-unit>
        <trans-unit id="f69e80305022a26d3e2f7acc2b0ed1b953372499" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Pragma</source>
          <target state="translated">TAP::Parser::Result::Pragma</target>
        </trans-unit>
        <trans-unit id="14e0c88ebea6563cf55ee8c08b3b9ed300f0d20c" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Pragma - TAP pragma token.</source>
          <target state="translated">TAP::Parser::Result::Pragma-TAPプラグマトークン。</target>
        </trans-unit>
        <trans-unit id="2c91344b1f933a9487eebefc220df8812b008445" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Test</source>
          <target state="translated">TAP::Parser::Result::Test</target>
        </trans-unit>
        <trans-unit id="edc9dae5ee4fae6dd91f0295f192573a8fb6a01a" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Test - Test result token.</source>
          <target state="translated">TAP::Parser::Result::Test-テスト結果トークン.</target>
        </trans-unit>
        <trans-unit id="44c345b7d9dc9992b3e410debbb02b0d29d66e79" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Unknown</source>
          <target state="translated">TAP::Parser::Result::Unknown</target>
        </trans-unit>
        <trans-unit id="2943117d9510c588ee4451eb94edacf47000ab69" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Unknown - Unknown result token.</source>
          <target state="translated">TAP::Parser::Result::Unknown-不明な結果トークン。</target>
        </trans-unit>
        <trans-unit id="c6da177c03a14aa64f029674caca24adf3980051" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Version</source>
          <target state="translated">TAP::Parser::Result::Version</target>
        </trans-unit>
        <trans-unit id="57883e95518fac69c11831c9fff6d78815a22b85" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::Version - TAP syntax version token.</source>
          <target state="translated">TAP::Parser::Result::Version-TAP構文バージョントークン.</target>
        </trans-unit>
        <trans-unit id="0f318e8c966222dedab8b0415294cae97d5f4f64" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::YAML</source>
          <target state="translated">TAP::Parser::Result::YAML</target>
        </trans-unit>
        <trans-unit id="68efbf9d5d727c77c2280206016668c939f6f897" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Result::YAML - YAML result token.</source>
          <target state="translated">TAP::Parser::Result::YAML-YAML 結果トークン.</target>
        </trans-unit>
        <trans-unit id="1a3c6d732b12248b1b6d9e14cf320584eb0a7af0" translate="yes" xml:space="preserve">
          <source>TAP::Parser::ResultFactory</source>
          <target state="translated">TAP::Parser::ResultFactory</target>
        </trans-unit>
        <trans-unit id="4f51e316d0426f94634c75bc33e9099d8d304e39" translate="yes" xml:space="preserve">
          <source>TAP::Parser::ResultFactory - Factory for creating TAP::Parser output objects</source>
          <target state="translated">TAP::Parser::ResultFactory-TAP::Parser の出力オブジェクトを作成するためのファクトリー</target>
        </trans-unit>
        <trans-unit id="50d7a126914ae0138b7bdc512d9ccd5a5d77784d" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Scheduler</source>
          <target state="translated">TAP::Parser::Scheduler</target>
        </trans-unit>
        <trans-unit id="6da57a5308e690ad2cdb39023741e3d016f8b96b" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Scheduler - Schedule tests during parallel testing</source>
          <target state="translated">TAP::Parser::Scheduler-並列テスト中にテストをスケジュールする</target>
        </trans-unit>
        <trans-unit id="81a373608790f502b94224968ea5fc04bfbb7622" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Scheduler::Job</source>
          <target state="translated">TAP::Parser::Scheduler::Job</target>
        </trans-unit>
        <trans-unit id="657d2fb895dc4c666b37510d12e2199629196955" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Scheduler::Job - A single testing job.</source>
          <target state="translated">TAP::Parser::Scheduler::Job-単一のテストジョブ。</target>
        </trans-unit>
        <trans-unit id="5f18e879edab289da9e626ab0da6617557a360e9" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Scheduler::Spinner</source>
          <target state="translated">TAP::Parser::Scheduler::Spinner</target>
        </trans-unit>
        <trans-unit id="73c0394de64be963748b5ce71edfd4ac21a6b40d" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Scheduler::Spinner - A no-op job.</source>
          <target state="translated">TAP::Parser::Scheduler::Spinner-無停止ジョブ。</target>
        </trans-unit>
        <trans-unit id="223a37f35fb2a759c5993cb7f97ef9683ee5bef9" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Source</source>
          <target state="translated">TAP::Parser::Source</target>
        </trans-unit>
        <trans-unit id="ba1432bca02f36d9b7eb2dec89d208a92989961b" translate="yes" xml:space="preserve">
          <source>TAP::Parser::Source - a TAP source &amp;amp; meta data about it</source>
          <target state="translated">TAP :: Parser :: Source-TAPソースとそれに関するメタデータ</target>
        </trans-unit>
        <trans-unit id="b88d422ffa232da21769ecf23f36c9215fb7316d" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler</source>
          <target state="translated">TAP::Parser::SourceHandler</target>
        </trans-unit>
        <trans-unit id="7a11e510cbf8229cb9deefa589961e1880c0ef0c" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler - Base class for different TAP source handlers</source>
          <target state="translated">TAP::Parser::SourceHandler-さまざまな TAP ソースハンドラの基底クラス</target>
        </trans-unit>
        <trans-unit id="567fb9a0760765f024156fd52b7260852fb83a9f" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::Executable</source>
          <target state="translated">TAP::Parser::SourceHandler::Executable</target>
        </trans-unit>
        <trans-unit id="def5a816ec0112a978d703f8596c8df1a84fd5e0" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::Executable - Stream output from an executable TAP source</source>
          <target state="translated">TAP::Parser::SourceHandler::Executable-実行可能な TAP ソースからのストリーム出力</target>
        </trans-unit>
        <trans-unit id="7855e6a236f3f1bba1561cccffbc0253a8b41c1a" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::File</source>
          <target state="translated">TAP::Parser::SourceHandler::File</target>
        </trans-unit>
        <trans-unit id="c84a46ff700384567f810cc0dbe5e4d5b91c8613" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::File - Stream TAP from a text file.</source>
          <target state="translated">TAP::Parser::SourceHandler::File-テキストファイルからTAPをストリームする</target>
        </trans-unit>
        <trans-unit id="f75757e90ca350dfe386979f74159d3e72435290" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::Handle</source>
          <target state="translated">TAP::Parser::SourceHandler::Handle</target>
        </trans-unit>
        <trans-unit id="b6f0bcffb30af38c06936b6bf1545dd5a83277c1" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::Handle - Stream TAP from an IO::Handle or a GLOB.</source>
          <target state="translated">TAP::Parser::SourceHandler::Handle-IO::HandleまたはGLOBからのストリームTAP。</target>
        </trans-unit>
        <trans-unit id="4545cce101afaf68b0bd75f8cbbb180c6b160964" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::Perl</source>
          <target state="translated">TAP::Parser::SourceHandler::Perl</target>
        </trans-unit>
        <trans-unit id="04e054f8c028c674d2c9287cae69082bbf9ce520" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::Perl - Stream TAP from a Perl executable</source>
          <target state="translated">TAP::Parser::SourceHandler::Perl-Perl 実行ファイルからのストリーム TAP</target>
        </trans-unit>
        <trans-unit id="849652a7b8f5b288e476708d89c71b634dc488c2" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::RawTAP</source>
          <target state="translated">TAP::Parser::SourceHandler::RawTAP</target>
        </trans-unit>
        <trans-unit id="7fe676e21d00db4b7e1f5adc9ab5a7fc5c10349f" translate="yes" xml:space="preserve">
          <source>TAP::Parser::SourceHandler::RawTAP - Stream output from raw TAP in a scalar/array ref.</source>
          <target state="translated">TAP::Parser::SourceHandler::RawTAP-生の TAP からスカラー/配列 ref.でストリームを出力する</target>
        </trans-unit>
        <trans-unit id="f75366f8757d0c89dc67745e9e30ae921835fc92" translate="yes" xml:space="preserve">
          <source>TAP::Parser::YAMLish::Reader</source>
          <target state="translated">TAP::Parser::YAMLish::Reader</target>
        </trans-unit>
        <trans-unit id="92a795f40e2bb73376fc045a4635f6fcf7d6a7de" translate="yes" xml:space="preserve">
          <source>TAP::Parser::YAMLish::Reader - Read YAMLish data from iterator</source>
          <target state="translated">TAP::Parser::YAMLish::Reader-イテレータから YAMLish データを読み込む</target>
        </trans-unit>
        <trans-unit id="08d78eef616ac71669e623449566134b1c6d4b77" translate="yes" xml:space="preserve">
          <source>TAP::Parser::YAMLish::Writer</source>
          <target state="translated">TAP::Parser::YAMLish::Writer</target>
        </trans-unit>
        <trans-unit id="662f33223b14be1ce958a19abee31b207588ba54" translate="yes" xml:space="preserve">
          <source>TAP::Parser::YAMLish::Writer - Write YAMLish data</source>
          <target state="translated">TAP::Parser::YAMLish::Writer-YAMLish データを書き込む</target>
        </trans-unit>
        <trans-unit id="5b754807c6604c3c6635f1f0f60d367a6cffd283" translate="yes" xml:space="preserve">
          <source>TAPx Developers.</source>
          <target state="translated">TAPx開発者。</target>
        </trans-unit>
        <trans-unit id="1c4682dfeedc4e9ca5c57ef7dd969ecc22339454" translate="yes" xml:space="preserve">
          <source>TARG</source>
          <target state="translated">TARG</target>
        </trans-unit>
        <trans-unit id="f762108ca727f0bcd961fc7467c248887dfa70dc" translate="yes" xml:space="preserve">
          <source>TARGET</source>
          <target state="translated">TARGET</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
